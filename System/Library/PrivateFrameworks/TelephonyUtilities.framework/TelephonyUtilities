|| __DATA.__common _TUDialAssistEnabledOverride
|| __DATA.__data _TUDialAssistDomain
|| __DATA.__data _TUDialAssistUserSettingChanged
|| __DATA.__data _TUMobilePhoneDomain
|| __DATA.__data _TUMobilePhoneLogDialAssistKey
|| __DATA.__data _TUNumberToDialOptionsSuppressLocalAssistKey
|| __DATA.__objc_data _OBJC_CLASS_$_TUAbstractScreenTimeObserver
|| __DATA.__objc_data _OBJC_CLASS_$_TUAdhocResult
|| __DATA.__objc_data _OBJC_CLASS_$_TUAudioFrequencyController
|| __DATA.__objc_data _OBJC_CLASS_$_TUAudioRouteCollectionKey
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallDirectoryMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallFilterController
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallGroup
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallHistoryController
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallHistoryManager
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallHistoryManagerXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallHistorySearchModule
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallSoundPlayer
|| __DATA.__objc_data _OBJC_CLASS_$_TUCallSoundPlayerDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_TUCarPlayHardwareControlsBroadcaster
|| __DATA.__objc_data _OBJC_CLASS_$_TUContactsAutocompleteSearchModule
|| __DATA.__objc_data _OBJC_CLASS_$_TUContactsDataProviderFetchRequest
|| __DATA.__objc_data _OBJC_CLASS_$_TUContactsDataProviderResult
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationActivityContext
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationActivityEvent
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationActivityMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationActivitySessionContainer
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationInvitationPreference
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationLinkDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationLinkDescriptorXPCClientDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationLinkOriginator
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationMediaController
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationNotice
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationProvider
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationReport
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationVirtualParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_TUConversationVirtualParticipantConfig
|| __DATA.__objc_data _OBJC_CLASS_$_TUDiscoverabilitySignal
|| __DATA.__objc_data _OBJC_CLASS_$_TUDynamicCallDisplayContext
|| __DATA.__objc_data _OBJC_CLASS_$_TUGeoLocationMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_TUGroupTitle
|| __DATA.__objc_data _OBJC_CLASS_$_TUICFInterface
|| __DATA.__objc_data _OBJC_CLASS_$_TUICFQueryResult
|| __DATA.__objc_data _OBJC_CLASS_$_TUIDSLookupManager
|| __DATA.__objc_data _OBJC_CLASS_$_TUIntentController
|| __DATA.__objc_data _OBJC_CLASS_$_TULinkShareItem
|| __DATA.__objc_data _OBJC_CLASS_$_TULocked
|| __DATA.__objc_data _OBJC_CLASS_$_TULogging
|| __DATA.__objc_data _OBJC_CLASS_$_TUMapsMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_TUMetadataCache
|| __DATA.__objc_data _OBJC_CLASS_$_TUMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_TUMetadataClientController
|| __DATA.__objc_data _OBJC_CLASS_$_TUMetadataDestinationID
|| __DATA.__objc_data _OBJC_CLASS_$_TUMetadataItem
|| __DATA.__objc_data _OBJC_CLASS_$_TUMomentDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_TUMomentsCapabilities
|| __DATA.__objc_data _OBJC_CLASS_$_TUMomentsController
|| __DATA.__objc_data _OBJC_CLASS_$_TUMomentsControllerXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_TUMomentsProvider
|| __DATA.__objc_data _OBJC_CLASS_$_TUMutableCallContainer
|| __DATA.__objc_data _OBJC_CLASS_$_TUMutableCallDisplayContext
|| __DATA.__objc_data _OBJC_CLASS_$_TUMutableConversation
|| __DATA.__objc_data _OBJC_CLASS_$_TUMutableConversationLinkDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_TUMutableConversationParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_TUMutableConversationParticipantCapabilities
|| __DATA.__objc_data _OBJC_CLASS_$_TUMutableRoute
|| __DATA.__objc_data _OBJC_CLASS_$_TUNotifyObserver
|| __DATA.__objc_data _OBJC_CLASS_$_TUOptionalObject
|| __DATA.__objc_data _OBJC_CLASS_$_TUPhoneNumber
|| __DATA.__objc_data _OBJC_CLASS_$_TUPrivacyRule
|| __DATA.__objc_data _OBJC_CLASS_$_TUProxyAutocompleteResult
|| __DATA.__objc_data _OBJC_CLASS_$_TUProxyRecentCall
|| __DATA.__objc_data _OBJC_CLASS_$_TURTCCallReporter
|| __DATA.__objc_data _OBJC_CLASS_$_TURecentsResults
|| __DATA.__objc_data _OBJC_CLASS_$_TURepeatingActor
|| __DATA.__objc_data _OBJC_CLASS_$_TUReplyWithMessageStore
|| __DATA.__objc_data _OBJC_CLASS_$_TUReportingControllerXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_TUResultGroup
|| __DATA.__objc_data _OBJC_CLASS_$_TUScreenTimeObserver
|| __DATA.__objc_data _OBJC_CLASS_$_TUSearchController
|| __DATA.__objc_data _OBJC_CLASS_$_TUSearchModuleManager
|| __DATA.__objc_data _OBJC_CLASS_$_TUSearchResults
|| __DATA.__objc_data _OBJC_CLASS_$_TUStringShareItem
|| __DATA.__objc_data _OBJC_CLASS_$_TUSuggestionsMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_TUUserNotificationProviderXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_TUVideoDeviceController
|| __DATA.__objc_data _OBJC_CLASS_$_TUVideoEffect
|| __DATA.__objc_data _OBJC_METACLASS_$_TUAbstractScreenTimeObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_TUAdhocResult
|| __DATA.__objc_data _OBJC_METACLASS_$_TUAudioFrequencyController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUAudioRouteCollectionKey
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallDirectoryMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallFilterController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallHistoryController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallHistoryManager
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallHistoryManagerXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallHistorySearchModule
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallSoundPlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCallSoundPlayerDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_TUCarPlayHardwareControlsBroadcaster
|| __DATA.__objc_data _OBJC_METACLASS_$_TUContactsAutocompleteSearchModule
|| __DATA.__objc_data _OBJC_METACLASS_$_TUContactsDataProviderFetchRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_TUContactsDataProviderResult
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationActivityContext
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationActivityEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationActivityMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationActivitySessionContainer
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationInvitationPreference
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationLinkDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationLinkDescriptorXPCClientDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationLinkOriginator
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationMediaController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationNotice
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationReport
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationVirtualParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_TUConversationVirtualParticipantConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_TUDiscoverabilitySignal
|| __DATA.__objc_data _OBJC_METACLASS_$_TUDynamicCallDisplayContext
|| __DATA.__objc_data _OBJC_METACLASS_$_TUGeoLocationMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_TUGroupTitle
|| __DATA.__objc_data _OBJC_METACLASS_$_TUICFInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_TUICFQueryResult
|| __DATA.__objc_data _OBJC_METACLASS_$_TUIDSLookupManager
|| __DATA.__objc_data _OBJC_METACLASS_$_TUIntentController
|| __DATA.__objc_data _OBJC_METACLASS_$_TULinkShareItem
|| __DATA.__objc_data _OBJC_METACLASS_$_TULocked
|| __DATA.__objc_data _OBJC_METACLASS_$_TULogging
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMapsMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMetadataCache
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMetadataClientController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMetadataDestinationID
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMetadataItem
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMomentDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMomentsCapabilities
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMomentsController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMomentsControllerXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMomentsProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMutableCallContainer
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMutableCallDisplayContext
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMutableConversation
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMutableConversationLinkDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMutableConversationParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMutableConversationParticipantCapabilities
|| __DATA.__objc_data _OBJC_METACLASS_$_TUMutableRoute
|| __DATA.__objc_data _OBJC_METACLASS_$_TUNotifyObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_TUOptionalObject
|| __DATA.__objc_data _OBJC_METACLASS_$_TUPhoneNumber
|| __DATA.__objc_data _OBJC_METACLASS_$_TUPrivacyRule
|| __DATA.__objc_data _OBJC_METACLASS_$_TUProxyAutocompleteResult
|| __DATA.__objc_data _OBJC_METACLASS_$_TUProxyRecentCall
|| __DATA.__objc_data _OBJC_METACLASS_$_TURTCCallReporter
|| __DATA.__objc_data _OBJC_METACLASS_$_TURecentsResults
|| __DATA.__objc_data _OBJC_METACLASS_$_TURepeatingActor
|| __DATA.__objc_data _OBJC_METACLASS_$_TUReplyWithMessageStore
|| __DATA.__objc_data _OBJC_METACLASS_$_TUReportingControllerXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_TUResultGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_TUScreenTimeObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_TUSearchController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUSearchModuleManager
|| __DATA.__objc_data _OBJC_METACLASS_$_TUSearchResults
|| __DATA.__objc_data _OBJC_METACLASS_$_TUStringShareItem
|| __DATA.__objc_data _OBJC_METACLASS_$_TUSuggestionsMetadataCacheDataProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_TUUserNotificationProviderXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_TUVideoDeviceController
|| __DATA.__objc_data _OBJC_METACLASS_$_TUVideoEffect
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierAirPods
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierAirPods2
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierAirPodsPro
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierB494
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierB507
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierB688
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsFitPro
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsSolo
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsSoloPro
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsStudio
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsStudio2
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsStudioBuds
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsX
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierBeatsX2
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierHeadPods
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierPowerbeats
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierPowerbeats2
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierPowerbeats4
|| __DATA_CONST.__const _TUAudioRouteBluetoothProductIdentifierPowerbeatsPro
|| __DATA_CONST.__const _TUAudioSystemActiveCategoryVolumeChangedNotification
|| __DATA_CONST.__const _TUAudioSystemAudioPickableRoutesChanged
|| __DATA_CONST.__const _TUAudioSystemCategoryKey
|| __DATA_CONST.__const _TUAudioSystemDownlinkMuteStatusChangedNotification
|| __DATA_CONST.__const _TUAudioSystemModeKey
|| __DATA_CONST.__const _TUAudioSystemTTYChangedNotification
|| __DATA_CONST.__const _TUAudioSystemUplinkMuteStatusChangedNotification
|| __DATA_CONST.__const _TUBundleIdentifierCallServicesDaemon
|| __DATA_CONST.__const _TUBundleIdentifierFaceTimeApplication
|| __DATA_CONST.__const _TUBundleIdentifierFaceTimeConversationXPCService
|| __DATA_CONST.__const _TUBundleIdentifierInCallServiceApplication
|| __DATA_CONST.__const _TUBundleIdentifierLivePhotoXPCService
|| __DATA_CONST.__const _TUBundleIdentifierMessagesApplication
|| __DATA_CONST.__const _TUBundleIdentifierMobilePhoneApplication
|| __DATA_CONST.__const _TUBundleIdentifierNanoPhoneApplication
|| __DATA_CONST.__const _TUBundleIdentifierPhoneApplication
|| __DATA_CONST.__const _TUBundleIdentifierSafariApplication
|| __DATA_CONST.__const _TUBundleIdentifierScreenSharingApplication
|| __DATA_CONST.__const _TUBundleIdentifierSpringBoardApplication
|| __DATA_CONST.__const _TUBundleIdentifierTelephonyUtilitiesCLITool
|| __DATA_CONST.__const _TUBundleIdentifierTelephonyUtilitiesFramework
|| __DATA_CONST.__const _TUBundleIdentifierTinCan
|| __DATA_CONST.__const _TUBundleIdentifierVideoConferenceIdentifier
|| __DATA_CONST.__const _TUCallAudioPropertiesChangedNotification
|| __DATA_CONST.__const _TUCallBluetoothAudioFormatChangedNotification
|| __DATA_CONST.__const _TUCallCameraTypeChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesCloudCallingDevicesChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesEmergencyCallbackModeChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesEmergencyCallbackPossibleChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesFaceTimeAvailabilityChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesOutgoingRelayCallerIDChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesRelayCallingAvailabilityChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesRelayCallingChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesSupportsFaceTimeAudioCallsChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesSupportsFaceTimeVideoCallsChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesSupportsTelephonyCallsChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesThumperCallingChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesThumperCallingProvisioningURLChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesThumperCancelledKey
|| __DATA_CONST.__const _TUCallCapabilitiesThumperFromAliasKey
|| __DATA_CONST.__const _TUCallCapabilitiesThumperPinAlertCompletedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesThumperPinAlertNotification
|| __DATA_CONST.__const _TUCallCapabilitiesThumperPinKey
|| __DATA_CONST.__const _TUCallCapabilitiesThumperSuccessKey
|| __DATA_CONST.__const _TUCallCapabilitiesVoLTECallingChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesWiFiCallingChangedNotification
|| __DATA_CONST.__const _TUCallCapabilitiesWiFiCallingProvisioningURLChangedNotification
|| __DATA_CONST.__const _TUCallCenterCallConnectedNotification
|| __DATA_CONST.__const _TUCallCenterCallContinuityStateChangedNotification
|| __DATA_CONST.__const _TUCallCenterCallControlErrorCode
|| __DATA_CONST.__const _TUCallCenterCallInvitationSentNotification
|| __DATA_CONST.__const _TUCallCenterCallStartedConnectingNotification
|| __DATA_CONST.__const _TUCallCenterCallStatusChangedInternalNotification
|| __DATA_CONST.__const _TUCallCenterCallStatusChangedNotification
|| __DATA_CONST.__const _TUCallCenterCallWantsHoldMusicChangedNotification
|| __DATA_CONST.__const _TUCallCenterCallerIDChangedNotification
|| __DATA_CONST.__const _TUCallCenterConferenceParticipantsChangedNotification
|| __DATA_CONST.__const _TUCallCenterControlFailureNotification
|| __DATA_CONST.__const _TUCallCenterHaveBeenLetInNotification
|| __DATA_CONST.__const _TUCallCenterInCallServiceAllowRingingCallStatusIndicatorToken
|| __DATA_CONST.__const _TUCallCenterInCallServiceDialRequestFailureNotification
|| __DATA_CONST.__const _TUCallCenterInCallServiceDidAppearNotification
|| __DATA_CONST.__const _TUCallCenterInCallServiceLocalVideoDidAppearNotification
|| __DATA_CONST.__const _TUCallCenterInCallServiceSuppressInCallStatusBarToken
|| __DATA_CONST.__const _TUCallCenterIsEmergencyChangedNotification
|| __DATA_CONST.__const _TUCallCenterIsFailureExpectedChangedNotification
|| __DATA_CONST.__const _TUCallCenterModelStateChangedNotification
|| __DATA_CONST.__const _TUCallCenterPendingMemberAddedNotification
|| __DATA_CONST.__const _TUCallCenterResetCallStateNotification
|| __DATA_CONST.__const _TUCallCenterRestartNotification
|| __DATA_CONST.__const _TUCallCenterVideoCallCameraAspectRatioKey
|| __DATA_CONST.__const _TUCallCenterVideoCallCameraOrientationKey
|| __DATA_CONST.__const _TUCallCenterVideoCallInvitationSentNotification
|| __DATA_CONST.__const _TUCallCenterVideoCallMediaPropertiesChangedNotification
|| __DATA_CONST.__const _TUCallCenterVideoCallMediaStalledChangedNotification
|| __DATA_CONST.__const _TUCallCenterVideoCallPauseChangedNotification
|| __DATA_CONST.__const _TUCallCenterVideoCallStatusChangedNotification
|| __DATA_CONST.__const _TUCallCenterVideoCallVideoQualityChangedNotification
|| __DATA_CONST.__const _TUCallConversationChangedNotification
|| __DATA_CONST.__const _TUCallDisplayContextChangedNotification
|| __DATA_CONST.__const _TUCallDowngradedToAudioNotification
|| __DATA_CONST.__const _TUCallFaceTimeIDStatusChangedNotification
|| __DATA_CONST.__const _TUCallFaceTimeRemoteIDSDestinationKey
|| __DATA_CONST.__const _TUCallFaceTimeRemoteMomentsAvailableKey
|| __DATA_CONST.__const _TUCallFaceTimeTransportTypeKey
|| __DATA_CONST.__const _TUCallFilterUnknownCallerAddress
|| __DATA_CONST.__const _TUCallFilteringPreferencesContactsOnlyKey
|| __DATA_CONST.__const _TUCallFilteringPreferencesMaxJunkLevelKey
|| __DATA_CONST.__const _TUCallHardPauseDigitsStateChangedNotification
|| __DATA_CONST.__const _TUCallHistoryControllerDidFinishBoostNotification
|| __DATA_CONST.__const _TUCallHistoryControllerRecentCallsDidChangeNotification
|| __DATA_CONST.__const _TUCallHistoryControllerUnreadCallCountDidChangeNotification
|| __DATA_CONST.__const _TUCallIsOnHoldChangedNotification
|| __DATA_CONST.__const _TUCallIsSendingAudioChangedNotification
|| __DATA_CONST.__const _TUCallIsSendingVideoChangedNotification
|| __DATA_CONST.__const _TUCallIsSharingScreenChangedNotification
|| __DATA_CONST.__const _TUCallIsThirdPartyVideoChangedNotification
|| __DATA_CONST.__const _TUCallIsUplinkMutedChangedNotification
|| __DATA_CONST.__const _TUCallIsUsingBasebandChangedNotification
|| __DATA_CONST.__const _TUCallLocalSenderIdentityAccountUUIDChangedNotification
|| __DATA_CONST.__const _TUCallMixesVoiceWithMediaChangedNotification
|| __DATA_CONST.__const _TUCallModelChangedNotification
|| __DATA_CONST.__const _TUCallNeedsManualInCallSoundsChangedNotification
|| __DATA_CONST.__const _TUCallPrefersExclusiveAccessToCellularNetworkChangedNotification
|| __DATA_CONST.__const _TUCallProviderContextChangedNotification
|| __DATA_CONST.__const _TUCallProviderManagerProvidersChangedNotification
|| __DATA_CONST.__const _TUCallRemoteAspectRatioChangedNotification
|| __DATA_CONST.__const _TUCallRemoteCameraOrientationChangedNotification
|| __DATA_CONST.__const _TUCallRemoteParticipantHandlesChangedNotification
|| __DATA_CONST.__const _TUCallRemoteScreenAspectRatioChangedNotification
|| __DATA_CONST.__const _TUCallRemoteScreenOrientationChangedNotification
|| __DATA_CONST.__const _TUCallRemoteUnavailableAlternateButton
|| __DATA_CONST.__const _TUCallRemoteUnavailableAlternateButtonURL
|| __DATA_CONST.__const _TUCallRemoteUnavailableMessage
|| __DATA_CONST.__const _TUCallRemoteUnavailableOtherButton
|| __DATA_CONST.__const _TUCallRemoteUnavailableOtherButtonURL
|| __DATA_CONST.__const _TUCallRemoteUnavailableTitle
|| __DATA_CONST.__const _TUCallRemoteUplinkMutedChangedNotification
|| __DATA_CONST.__const _TUCallRemoteVideoContentRectChangedNotification
|| __DATA_CONST.__const _TUCallScreenShareAttributesChangedNotification
|| __DATA_CONST.__const _TUCallShouldSuppressRingingChangedNotification
|| __DATA_CONST.__const _TUCallSourceIdentifierCarPlay
|| __DATA_CONST.__const _TUCallSourceIdentifierHeySiri
|| __DATA_CONST.__const _TUCallSourceIdentifierKey
|| __DATA_CONST.__const _TUCallSourceIdentifierMikeyRoute
|| __DATA_CONST.__const _TUCallSourceIdentifierSpeakerRoute
|| __DATA_CONST.__const _TUCallSupportsTTYWithVoiceChangedNotification
|| __DATA_CONST.__const _TUCallTTYTypeChangedNotification
|| __DATA_CONST.__const _TUCallTranscriptionStringChangedNotification
|| __DATA_CONST.__const _TUCallUpgradedToVideoNotification
|| __DATA_CONST.__const _TUCallUserActivityDestinationIDKey
|| __DATA_CONST.__const _TUCallUserActivityHandleKey
|| __DATA_CONST.__const _TUCallUserActivityHandoffContextKey
|| __DATA_CONST.__const _TUCallUserActivityProviderIdentifierKey
|| __DATA_CONST.__const _TUCallVideoStreamTokenChangedNotification
|| __DATA_CONST.__const _TUCarPlayHardwareControlEventNotification
|| __DATA_CONST.__const _TUConversationLinkQueryKeyLinkName
|| __DATA_CONST.__const _TUConversationLinkQueryKeyNickname
|| __DATA_CONST.__const _TUConversationLinkQueryKeyPseudonym
|| __DATA_CONST.__const _TUConversationLinkQueryKeyPublicKey
|| __DATA_CONST.__const _TUConversationLinkQueryKeyVersion
|| __DATA_CONST.__const _TUConversationManagerMessagesErrorDomain
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringDialer
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringECG
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringEmergencyDialerLockscreen
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringFallDetection
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringFavorites
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringRecents
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringSideButtonHold
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringSideButtonPresses
|| __DATA_CONST.__const _TUDialRequestOriginatingUIStringVolumeLockHold
|| __DATA_CONST.__const _TUDialRequestProviderIdentifierKey
|| __DATA_CONST.__const _TUDialRequestQueryItemHandleTypeKey
|| __DATA_CONST.__const _TUDialRequestQueryItemHandleTypeValueEmailAddress
|| __DATA_CONST.__const _TUDialRequestQueryItemHandleTypeValueGeneric
|| __DATA_CONST.__const _TUDialRequestQueryItemHandleTypeValuePhoneNumber
|| __DATA_CONST.__const _TUDialRequestQueryItemNameFaceTimeAddressBookID
|| __DATA_CONST.__const _TUDialRequestQueryItemNameForceAssist
|| __DATA_CONST.__const _TUDialRequestQueryItemNameNoPrompt
|| __DATA_CONST.__const _TUDialRequestQueryItemNameOriginatingUIType
|| __DATA_CONST.__const _TUDialRequestQueryItemNameSuppressAssist
|| __DATA_CONST.__const _TUDialRequestQueryItemNameTelephonyAddressBookID
|| __DATA_CONST.__const _TUDialRequestQueryItemNameVoicemail
|| __DATA_CONST.__const _TUDialRequestQueryItemNameWasAssisted
|| __DATA_CONST.__const _TUDialRequestSchemeFaceTime
|| __DATA_CONST.__const _TUDialRequestSchemeFaceTimeAudio
|| __DATA_CONST.__const _TUDialRequestSchemeFaceTimeAudioPrompt
|| __DATA_CONST.__const _TUDialRequestSchemeFaceTimePrompt
|| __DATA_CONST.__const _TUDialRequestSchemeTelephony
|| __DATA_CONST.__const _TUDialRequestSchemeTelephonyEmergency
|| __DATA_CONST.__const _TUDialRequestSchemeTelephonyLegacy
|| __DATA_CONST.__const _TUDialRequestSchemeTelephonyPrompt
|| __DATA_CONST.__const _TUDialRequestUserActivityTypeAudioCall
|| __DATA_CONST.__const _TUDialRequestUserActivityTypeCall
|| __DATA_CONST.__const _TUDialRequestUserActivityTypeVideoCall
|| __DATA_CONST.__const _TUDialRequestValidityErrorDomain
|| __DATA_CONST.__const _TUEntitlementsAccessCallProvidersCapability
|| __DATA_CONST.__const _TUEntitlementsSplitSessionApprovalCapability
|| __DATA_CONST.__const _TUErrorDomain
|| __DATA_CONST.__const _TUGroupActivityIdentifierScreenSharing
|| __DATA_CONST.__const _TUIDSLookupManagerStatusChangedNotification
|| __DATA_CONST.__const _TUMetadataCacheDidFinishUpdatingNotification
|| __DATA_CONST.__const _TUNeighborhoodActivityConduitErrorDomain
|| __DATA_CONST.__const _TUNotificationCategoryIdentifierNewVoicemail
|| __DATA_CONST.__const _TUNotificationCategoryIdentifierNewVoicemailNoCallerID
|| __DATA_CONST.__const _TUNotificationCategoryIdentifierNewVoicemailNoVisualVoicemail
|| __DATA_CONST.__const _TUPrivacyRulesChangedNotification
|| __DATA_CONST.__const _TUSplitSessionErrorDomain
|| __DATA_CONST.__const _TUTelephonySchemeTel
|| __DATA_CONST.__const _TUTelephonySchemeTelPrompt
|| __DATA_CONST.__const _TUUserActivityJoinConversationRequestUserInfoKey
|| __DATA_CONST.__const _TUUserActivityTypeJoinConversationRequest
|| __DATA_CONST.__const _TUUserNotificationActivitySessionGetApp
|| __DATA_CONST.__const _TUUserNotificationActivitySessionIdentifierKey
|| __DATA_CONST.__const _TUUserNotificationConversationGroupIdentifierKey
|| __DATA_CONST.__const _TUUserNotificationConversationIdentifierKey
|| __DATA_CONST.__const _TUUserNotificationConversationLinkKey
|| __DATA_CONST.__const _TUUserNotificationConversationPendingMemberKey
|| __DATA_CONST.__const _TUUserNotificationConversationRemoteMembersKey
|| __DATA_CONST.__const _TUUserNotificationConversationUUIDKey
|| __DATA_CONST.__const _TUUserNotificationMissedCallDestinationKey
|| __DATA_CONST.__const _TUUserNotificationMissedCallHandleKey
|| __DATA_CONST.__const _TUUserNotificationMissedCallServiceKey
|| __DATA_CONST.__const _TUUserNotificationMissedCallUUIDkey
|| __DATA_CONST.__const _TUUserNotificationPendingMemberNotificationTypeKey
|| __DATA_CONST.__const _TUUserNotificationSharePlayBundleIDKey
|| __DATA_CONST.__const _TUUserNotificationSharePlayCallbackURLKey
|| __DATA_CONST.__const _TUUserNotificationThumperAvailableKey
|| __DATA_CONST.__const _TUVideoDeviceControllerCameraBlurEnabledChangedNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerCinematicFramingAvailabilityChangedNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerCinematicFramingEnabledChangedNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerDeviceBecameAvailableDeviceUniqueIDKey
|| __DATA_CONST.__const _TUVideoDeviceControllerDeviceBecameAvailableNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerDeviceDidReceiveErrorDeviceUniqueIDKey
|| __DATA_CONST.__const _TUVideoDeviceControllerDeviceDidReceiveErrorErrorKey
|| __DATA_CONST.__const _TUVideoDeviceControllerDeviceDidReceiveErrorNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerDidGetSnapshotNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerDidPausePreviewNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerDidStartPreviewDeviceUniqueIDKey
|| __DATA_CONST.__const _TUVideoDeviceControllerDidStartPreviewNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerDidStopPreviewNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerInputDevicesChangedNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerIsCameraBlurEnabledKey
|| __DATA_CONST.__const _TUVideoDeviceControllerIsCinematicFramingAvailableKey
|| __DATA_CONST.__const _TUVideoDeviceControllerIsCinematicFramingEnabledKey
|| __DATA_CONST.__const _TUVideoDeviceControllerLocalAttributesChangedAspectRatioKey
|| __DATA_CONST.__const _TUVideoDeviceControllerLocalAttributesChangedNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerReceivedFirstPreviewFrameNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerSnapshotDataKey
|| __DATA_CONST.__const _TUVideoDeviceControllerZoomAvailableNotification
|| __DATA_CONST.__const _TUVideoDeviceControllerZoomUnavailableNotification
|| __DATA_CONST.__const _TUVideoMirroredChangedNotification
|| __DATA_CONST.__const _TelURLAddressBookUID
|| __DATA_CONST.__const _TelURLForceAssist
|| __DATA_CONST.__const _TelURLOriginatingUIKey
|| __DATA_CONST.__const _TelURLSuppressAssist
|| __DATA_CONST.__const _TelURLWasAssistedKey
|| __DATA_CONST.__const _kFaceTimeAddressBookUIDOption
|| __DATA_CONST.__const _kTUCallHistoryMarkedReadBulletinBoardMessageCallUUIDsKey
|| __DATA_CONST.__const _kTUCallHistoryMarkedReadBulletinBoardMessageName
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonDelete
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonGreenTelephone
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonKey
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonKeypad
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonMute
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonRedTelephone
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonWhiteTelephone
|| __DATA_CONST.__const _kTUCarPlayHardwareControlButtonWhiteTelephoneLongPress
|| __DATA_CONST.__const _kTUCarPlayHardwareControlKeypadValueKey
|| __DATA_CONST.__const _kTUConfigurationAnnounceCalls
|| __DATA_CONST.__const _kTUConfigurationConversationLinkBaseURL
|| __DATA_CONST.__const _kTUConfigurationSimulateFatalPersistentStoreError
|| __DATA_CONST.__const _kTUConfigurationSimulateInternationalCall
|| __DATA_CONST.__const _kTURemindMeLaterBulletinBoardMessageCallBackStringKey
|| __DATA_CONST.__const _kTURemindMeLaterBulletinBoardMessageCallerKey
|| __DATA_CONST.__const _kTURemindMeLaterBulletinBoardMessageIsWhenILeaveKey
|| __DATA_CONST.__const _kTURemindMeLaterBulletinBoardMessageLocationTextKey
|| __DATA_CONST.__const _kTURemindMeLaterBulletinBoardMessageName
|| __DATA_CONST.__const _kTURemindMeLaterBulletinBoardMessageReminderIdentifierKey
|| __DATA_CONST.__const _kTURemindMeLaterBulletinBoardMessageWhenILeaveStringKey
|| __DATA_CONST.__const _kTUReplyWithMessageBulletinBoardMessageDestinationKey
|| __DATA_CONST.__const _kTUReplyWithMessageBulletinBoardMessageMessageKey
|| __DATA_CONST.__const _kTUReplyWithMessageBulletinBoardMessageName
|| __DATA_CONST.__const _kTUReplyWithMessageBulletinBoardMessagePersonIDKey
|| __DATA_CONST.__const _kTUReplyWithMessageBulletinBoardMessageRecipientKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUAnswerRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUAudioController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUAudioDeviceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUAudioRoute
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUAudioSystemController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCTCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCTCapabilityInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCall
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallCapabilitiesXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallDisplayContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallProviderManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallProviderManagerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallScreenShareAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallServicesClientCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCallServicesInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUCloudCallingDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUContactsDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUContactsDataProviderAppleCareHandles
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationActivitySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationLink
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationManagerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationMember
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationParticipant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationParticipantCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUConversationParticipantPresentationContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUDTMFSoundPlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUDelegateController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUDialRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUFeatureFlags
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUJoinConversationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TULabeledHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUNearbyDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUNeighborhoodActivityConduit
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUNeighborhoodActivityConduitXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUPrivacyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUProxyCall
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TURoute
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TURouteController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUSandboxExtendedURL
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUSenderIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUSenderIdentityCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUSenderIdentityCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUSenderIdentityClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUThumperCTCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUUserConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_TUVideoCallAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUAnswerRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUAudioController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUAudioDeviceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUAudioRoute
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUAudioSystemController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCTCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCTCapabilityInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCall
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallCapabilitiesXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallDisplayContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallProviderManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallProviderManagerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallScreenShareAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallServicesClientCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCallServicesInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUCloudCallingDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUContactsDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUContactsDataProviderAppleCareHandles
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationActivitySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationLink
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationManagerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationMember
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationParticipant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationParticipantCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUConversationParticipantPresentationContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUDTMFSoundPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUDelegateController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUDialRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUFeatureFlags
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUJoinConversationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TULabeledHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUNearbyDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUNeighborhoodActivityConduit
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUNeighborhoodActivityConduitXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUPrivacyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUProxyCall
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TURoute
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TURouteController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUSandboxExtendedURL
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUSenderIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUSenderIdentityCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUSenderIdentityCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUSenderIdentityClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUThumperCTCapabilitiesState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUUserConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_TUVideoCallAttributes
|| __TEXT.__text _TUActiveCountryCode
|| __TEXT.__text _TUAddDarwinObserver
|| __TEXT.__text _TUAddLocalNSObserver
|| __TEXT.__text _TUAddTelephonyCenterObserver
|| __TEXT.__text _TUAllowCallsDuringScreenSharing
|| __TEXT.__text _TUAllowLocalVideoRecording
|| __TEXT.__text _TUAppendItemToURLFragment
|| __TEXT.__text _TUBinaryGCD
|| __TEXT.__text _TUBundle
|| __TEXT.__text _TUCTServerConnection
|| __TEXT.__text _TUCallHandoffActivityType
|| __TEXT.__text _TUCallPhoneAppHistoryActivityType
|| __TEXT.__text _TUCallTTYTypeForTUDialRequestTTYType
|| __TEXT.__text _TUClosestLandscapeAspect
|| __TEXT.__text _TUConduitLog
|| __TEXT.__text _TUConnectionTimeoutForCallService
|| __TEXT.__text _TUConvertDestinationIDToLatinNumbers
|| __TEXT.__text _TUCopyIDSCanonicalAddressForDestinationID
|| __TEXT.__text _TUCopyIDSCanonicalAddressForHandle
|| __TEXT.__text _TUCopyIDSFromIDForHandle
|| __TEXT.__text _TUCopyOrderedPeopleForDestinationIDWithHintInAddressBook
|| __TEXT.__text _TUCountryCodeForIncomingCall
|| __TEXT.__text _TUCurrentProcessHasEntitlement
|| __TEXT.__text _TUDefaultLog
|| __TEXT.__text _TUDestinationIDsAreEqual
|| __TEXT.__text _TUDeviceHasHomeButton
|| __TEXT.__text _TUDialAssistedDialRequest
|| __TEXT.__text _TUDialRequestTTYTypeForTUCallTTYType
|| __TEXT.__text _TUDisableLinks
|| __TEXT.__text _TUDisableMacOSResultsStyling
|| __TEXT.__text _TUDispatchMainIfNecessary
|| __TEXT.__text _TUDispatchMainIfNecessaryAndWait
|| __TEXT.__text _TUFormattedPhoneNumber
|| __TEXT.__text _TUGreenTeaLogOutgoingSiriCallToHandle
|| __TEXT.__text _TUGuaranteeExecutionOnMainThreadAsync
|| __TEXT.__text _TUGuaranteeExecutionOnMainThreadSync
|| __TEXT.__text _TUHandleForIDSCanonicalAddress
|| __TEXT.__text _TUHandlesAreCanonicallyEqual
|| __TEXT.__text _TUHandlesAreCanonicallyEqualUsingCountryCodes
|| __TEXT.__text _TUHardPauseDigitsDisplayString
|| __TEXT.__text _TUHomeCountryCode
|| __TEXT.__text _TUISOCountryCodeForMCC
|| __TEXT.__text _TUInCallRemoteAlertViewControllerClassName
|| __TEXT.__text _TUIncomingInvitationTimeout
|| __TEXT.__text _TUIsBareMakoAccount
|| __TEXT.__text _TUIsCallHandoffActivityType
|| __TEXT.__text _TUIsEmergencyNumber
|| __TEXT.__text _TUIsEmergencyNumberOrIsWhiteListed
|| __TEXT.__text _TUIsIDSAvailableForFaceTime
|| __TEXT.__text _TUIsMMIOrUSSDNumber
|| __TEXT.__text _TUKickMemberTimeout
|| __TEXT.__text _TUMakeNeighborhoodConduitError
|| __TEXT.__text _TUMapItemForDestinationID
|| __TEXT.__text _TUMapItemForPhoneNumberRef
|| __TEXT.__text _TUMapItemForPhoneNumberRefSync
|| __TEXT.__text _TUMinimumSupportedSharePlayProtocolVersion
|| __TEXT.__text _TUMultiwayMaxConcurrentStreams
|| __TEXT.__text _TUNetworkCountryCode
|| __TEXT.__text _TUNormalizedHandleForTUHandle
|| __TEXT.__text _TUNotificationFromXPCObject
|| __TEXT.__text _TUNotifyOfRemindMeLater
|| __TEXT.__text _TUNotifyOfRemindMeLaterWhenILeave
|| __TEXT.__text _TUNotifyOfReplyWithMessage
|| __TEXT.__text _TUNumberToDial
|| __TEXT.__text _TUNumberWithOldStylePausesTransformed
|| __TEXT.__text _TUNumbersAreEqualOrNil
|| __TEXT.__text _TUObjectsAreEqualOrNil
|| __TEXT.__text _TUOpenFaceTimeAppWithCompletion
|| __TEXT.__text _TUOpenHomeScreenWithCompletion
|| __TEXT.__text _TUOpenSensitiveURL
|| __TEXT.__text _TUOpenURL
|| __TEXT.__text _TUOpenURLWithCompletion
|| __TEXT.__text _TUOpenURLWithError
|| __TEXT.__text _TUOpenUserActivityForConversationRequest
|| __TEXT.__text _TUOutgoingInvitationTimeoutForCallProvider
|| __TEXT.__text _TUOutgoingInvitationTimeoutForCallProviderAndIsUpgrade
|| __TEXT.__text _TUOversizedLog
|| __TEXT.__text _TUOversizedLogQueue
|| __TEXT.__text _TURecursiveSize
|| __TEXT.__text _TURegisterIDSAvailabilityListener
|| __TEXT.__text _TURemoveEveryTelephonyCenterObserver
|| __TEXT.__text _TURemoveTelephonyCenterObserver
|| __TEXT.__text _TUSharePlayForceDisabled
|| __TEXT.__text _TUSharePlayProtocolVersion
|| __TEXT.__text _TUShouldForegroundLaunchForActivity
|| __TEXT.__text _TUShouldShowCallHandoff
|| __TEXT.__text _TUStringForCallService
|| __TEXT.__text _TUStringForCallStatus
|| __TEXT.__text _TUStringKeyForNetwork
|| __TEXT.__text _TUStringKeyForNetworkAndProduct
|| __TEXT.__text _TUStringKeyForPlatform
|| __TEXT.__text _TUStringKeyForProduct
|| __TEXT.__text _TUStringsAreCaseInsensitiveEqual
|| __TEXT.__text _TUStringsAreCaseInsensitiveEqualOrNil
|| __TEXT.__text _TUStringsAreEqualOrNil
|| __TEXT.__text _TUThumperCarrierName
|| __TEXT.__text _TUTransferTimeout
|| __TEXT.__text _TUUnformattedPhoneNumber
|| __TEXT.__text _TUUnlockAndOpenSensitiveURL
|| __TEXT.__text _TUUnlockAndOpenURL
|| __TEXT.__text _TUUnlockDeviceWithPromptFrontBoardOptionsDictionary
|| __TEXT.__text __TUAssertShouldCrashApplication
|| __TEXT.__text __TUDialAssistedDialRequestUsingCountryCodes
|| __TEXT.__text __TUIsInternalInstall
__ AddressBookLegacy: _ABAddressBookCopyArrayOfUIDsMatchingEmailAddress
__ AddressBookLegacy: _ABAddressBookCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint
__ AddressBookLegacy: _ABAddressBookGetPersonWithRecordID
__ AddressBookLegacy: _ABMultiValueCopyValueAtIndex
__ AddressBookLegacy: _ABMultiValueGetCount
__ AddressBookLegacy: _ABPersonCopyPreferredLinkedPersonForName
__ AddressBookLegacy: _ABRecordCopyCompositeName
__ AddressBookLegacy: _ABRecordCopyValue
__ AddressBookLegacy: _ABRecordGetRecordID
__ AddressBookLegacy: _kABPersonPhoneProperty
__ AppSupport: _CFPhoneNumberCopyISOCountryCode
__ AppSupport: _CFPhoneNumberCopyNumberForInternationalAssist
__ AppSupport: _CFPhoneNumberCopyNumberForLocalAssist
__ AppSupport: _CFPhoneNumberCreate
__ AppSupport: _CFPhoneNumberCreateString
__ AppSupport: _CPPhoneNumberCopyActiveCountryCode
__ AppSupport: _CPPhoneNumberCopyCountryCodeForIncomingVoiceCall
__ AppSupport: _CPPhoneNumberCopyHomeCountryCode
__ AppSupport: _CPPhoneNumberCopyNetworkCountryCode
__ AppSupport: _CPPhoneNumbersEqual
__ AppSupport: _PNCopyBestGuessCountryCodeForNumber
__ AppSupport: _PNCreateFormattedStringWithCountry
__ AppSupport: _PNIsValidPhoneNumberForCountry
__ AppSupport: __PNCopyStrippedNumberWithoutPauses
__ AppSupport: __PNCreateStringByStrippingFormattingAndNotVisiblyAllowable
__ BaseBoard: _OBJC_CLASS_$_BSProcessHandle
__ CommonUtilities: _CUTWeakLinkClass
__ CommonUtilities: _CUTWeakLinkSymbol
__ CommunicationsFilter: _CMFBlockListAddItemForAllServices
__ CommunicationsFilter: _CMFBlockListCopyItemsForAllServicesService
__ CommunicationsFilter: _CMFBlockListIsItemBlocked
__ CommunicationsFilter: _CMFBlockListRemoveItemFromAllServices
__ CommunicationsFilter: _CMFBlockListUpdatedNotification
__ CommunicationsFilter: _CMFItemCopyBusinessID
__ CommunicationsFilter: _CMFItemCopyEmailAddress
__ CommunicationsFilter: _CMFItemCopyPhoneNumber
__ CommunicationsFilter: _CMFItemCreateWithBusinessID
__ CommunicationsFilter: _CMFItemCreateWithEmailAddress
__ CommunicationsFilter: _CMFItemCreateWithPhoneNumber
__ CommunicationsFilter: _CMFItemGetType
__ CommunicationsFilter: _CreateCMFItemFromString
__ Contacts: _CNActionBundleIdentifierFaceTime
__ Contacts: _CNActionBundleIdentifierPhone
__ Contacts: _CNContactCallAlertKey
__ Contacts: _CNContactEmailAddressesKey
__ Contacts: _CNContactIdentifierKey
__ Contacts: _CNContactImageDataKey
__ Contacts: _CNContactPhoneNumbersKey
__ Contacts: _CNContactSocialProfilesKey
__ Contacts: _CNContactThumbnailImageDataKey
__ Contacts: _CNErrorDomain
__ Contacts: _OBJC_CLASS_$_CNContact
__ Contacts: _OBJC_CLASS_$_CNContactFetchRequest
__ Contacts: _OBJC_CLASS_$_CNContactFormatter
__ Contacts: _OBJC_CLASS_$_CNContactStore
__ Contacts: _OBJC_CLASS_$_CNContactStoreConfiguration
__ Contacts: _OBJC_CLASS_$_CNGeminiManager
__ Contacts: _OBJC_CLASS_$_CNLabeledValue
__ Contacts: _OBJC_CLASS_$_CNPhoneNumber
__ Contacts: _OBJC_CLASS_$_CNSocialProfile
__ CoreDuet: _OBJC_CLASS_$__DKDiscoverabilitySignalsMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKEvent
__ CoreDuet: _OBJC_CLASS_$__DKKnowledgeStore
__ CoreDuet: _OBJC_CLASS_$__DKSource
__ CoreDuet: _OBJC_CLASS_$__DKSystemEventStreams
__ CoreDuetContext: _OBJC_CLASS_$__CDClientContext
__ CoreDuetContext: _OBJC_CLASS_$__CDContextualKeyPath
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetFirstIndexOfValue
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayInsertValueAtIndex
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesAppValueIsForced
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFSetAddValue
__ CoreFoundation: _CFSetContainsValue
__ CoreFoundation: _CFSetCreateMutable
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleCountryCode
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFTypeSetCallBacks
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$__LSOpenConfiguration
__ CoreTelephony: _CTCallIsCallHandoffPossible
__ CoreTelephony: _CTCallPhoneNumberIsMmiOrUssd
__ CoreTelephony: _CTTelephonyCenterAddObserver
__ CoreTelephony: _CTTelephonyCenterGetDefault
__ CoreTelephony: _CTTelephonyCenterRemoveEveryObserver
__ CoreTelephony: _CTTelephonyCenterRemoveObserver
__ CoreTelephony: _CTTelephonyCenterSetDefaultRunloop
__ CoreTelephony: _OBJC_CLASS_$_CTBundle
__ CoreTelephony: _OBJC_CLASS_$_CTXPCServiceSubscriptionContext
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreTelephony: __CTServerConnectionCopyISOForMCC
__ CoreTelephony: __CTServerConnectionCreateOnTargetQueue
__ CoreTelephony: __CTServerConnectionGetThumperName
__ CoreTelephony: __CTServerConnectionIsEmergencyNumber
__ CoreTelephony: __CTServerConnectionIsEmergencyNumberWithWhitelistIncluded
__ CoreTelephony: _kCTCapabilityCanSet
__ CoreTelephony: _kCTCapabilityStatus
__ CoreTelephony: _kCTProvisioningStatus
__ CoreTelephony: _kCTProvisioningStatusInProcess
__ CoreTelephony: _kCTProvisioningStatusNotAllowed
__ CoreTelephony: _kCTProvisioningStatusNotSubscribed
__ CoreTelephony: _kCTProvisioningStatusSubscribed
__ CoreTelephony: _kCTProvisioningURL
__ CoreTelephony: _kCTWebSheetPostData
__ CoreTelephony: _kCTWebSheetURL
__ CoreTelephony: _kPSAccountDetails
__ CoreTelephony: _kPSAccountId
__ CoreTelephony: _kPSAccountList
__ CoreTelephony: _kPSDeviceId
__ CoreTelephony: _kPSDeviceList
__ CoreTelephony: _kPSWifiCallingRoamingCanSet
__ CoreTelephony: _kPSWifiCallingRoamingEnabled
__ Foundation: _NSFileProtectionCompleteUntilFirstUserAuthentication
__ Foundation: _NSFileProtectionKey
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSStringFromSize
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponents
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCCoder
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListenerEndpoint
__ IDS: _IDSCopyAddressDestinationForDestination
__ IDS: _IDSCopyIDForEmailAddress
__ IDS: _IDSCopyIDForPhoneNumber
__ IDS: _IDSCopyIDForPseudonymID
__ IDS: _IDSCopyIDForTemporaryID
__ IDS: _IDSCopyRawAddressForDestination
__ IDS: _IDSCopyTokenAndIDForTokenWithID
__ IDS: _IDSRegistrationPropertyIsGreenTea
__ IDS: _IDSRegistrationPropertySupportsGondola
__ IDS: _IDSRegistrationPropertySupportsModernGFT
__ IDS: _IDSServiceNameCalling
__ IDS: _IDSServiceNameFaceTime
__ IDS: _IDSServiceNameFaceTimeMulti
__ IDS: _IDSServiceNameQuickRelayFaceTime
__ IDS: _OBJC_CLASS_$_IDSBatchIDQueryController
__ IDS: _OBJC_CLASS_$_IDSDestination
__ IDS: _OBJC_CLASS_$_IDSIDQueryController
__ IDS: _OBJC_CLASS_$_IDSMessagingCapabilities
__ IDS: _OBJC_CLASS_$_IDSServerBag
__ IDS: _OBJC_CLASS_$_IDSService
__ IDS: _OBJC_CLASS_$_IDSServiceAvailabilityController
__ IMFoundation: _IMCopyStringWithLatinNumbers
__ IMFoundation: _IMFormatPhoneNumber
__ IMFoundation: _IMStringIsEmail
__ IMFoundation: _IMStringIsHardwareID
__ IMFoundation: _IMStringIsPhoneNumber
__ IMFoundation: _IMStringIsPseudonymID
__ IMFoundation: _IMStringIsTemporaryID
__ IMFoundation: _IMStripFormattingFromAddress
__ IMFoundation: _IMWeakLinkSymbol
__ IMFoundation: _OBJC_CLASS_$_IMLockdownManager
__ IOKit: _IOHIDEventGetIntegerValue
__ IOKit: _IOHIDEventSystemClientCreate
__ IOKit: _IOHIDEventSystemClientRegisterEventCallback
__ IOKit: _IOHIDEventSystemClientScheduleWithRunLoop
__ IOKit: _IOHIDEventSystemClientSetMatchingMultiple
__ IOKit: _IOHIDEventSystemClientUnscheduleWithRunLoop
__ IncomingCallFilter: _ICFCallProviderShouldAllowIncomingCallWithQueue
__ RTCReporting: _OBJC_CLASS_$_RTCReporting
__ RTCReporting: _kRTCReportingMessageParametersCategory
__ RTCReporting: _kRTCReportingMessageParametersPayload
__ RTCReporting: _kRTCReportingMessageParametersType
__ RTCReporting: _kRTCReportingSessionInfoBatchEvent
__ RTCReporting: _kRTCReportingSessionInfoClientBundleID
__ RTCReporting: _kRTCReportingSessionInfoClientType
__ RTCReporting: _kRTCReportingSessionInfoClientVersion
__ RTCReporting: _kRTCReportingSessionInfoSamplingUUIID
__ RTCReporting: _kRTCReportingSessionInfoSessionID
__ RTCReporting: _kRTCReportingUserInfoClientName
__ RTCReporting: _kRTCReportingUserInfoServiceName
__ Security: _SecTaskCopySigningIdentifier
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTaskCreateWithAuditToken
__ SoftLinking: __sl_dlopen
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _APP_SANDBOX_READ
__ libSystem.B.dylib: _APP_SANDBOX_READ_WRITE
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Init
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _SANDBOX_CHECK_NO_REPORT
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __DefaultRuneLocale
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___maskrune
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___toupper
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_state_add_handler
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_unfair_recursive_lock_lock_with_options
__ libSystem.B.dylib: _os_unfair_recursive_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_diagnostics
__ libSystem.B.dylib: _proc_name
__ libSystem.B.dylib: _sandbox_check_by_audit_token
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_issue_file
__ libSystem.B.dylib: _sandbox_extension_issue_file_to_process_by_pid
__ libSystem.B.dylib: _sandbox_extension_release
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _sysctl
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_getName
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
TURouteController : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <TURouteControllerActions> *actionsDelegate
 @property  NSHashTable *delegates
 @property  NSDictionary *routesByUniqueIdentifier
 @property  NSArray *routes
 @property  TURoute *pickedRoute
 @property  TURoute *receiverRoute
 @property  TURoute *speakerRoute

  // instance methods
  -[TURouteController removeDelegate:]
  -[TURouteController routes]
  -[TURouteController requeryRoutes]
  -[TURouteController .cxx_destruct]
  -[TURouteController delegates]
  -[TURouteController setRoutesByUniqueIdentifier:]
  -[TURouteController handleServerDisconnect]
  -[TURouteController routeWithSourceIdentifier:]
  -[TURouteController speakerRoute]
  -[TURouteController pickRouteWithUniqueIdentifier:]
  -[TURouteController initWithActionsDelegate:serialQueue:]
  -[TURouteController pickRouteWhenAvailableWithUniqueIdentifier:]
  -[TURouteController routesByUniqueIdentifier]
  -[TURouteController handleRoutesByUniqueIdentifierUpdated:]
  -[TURouteController pickRoute:]
  -[TURouteController queue]
  -[TURouteController actionsDelegate]
  -[TURouteController receiverRoute]
  -[TURouteController handleServerReconnect]
  -[TURouteController pickedRoute]
  -[TURouteController addDelegate:]


TUMomentsCapabilities : NSObject <NSSecureCoding>
 @property  int availability
 @property  NSSet *supportedMediaTypes

  // class methods
  +[TUMomentsCapabilities supportsSecureCoding]

  // instance methods
  -[TUMomentsCapabilities initWithCoder:]
  -[TUMomentsCapabilities .cxx_destruct]
  -[TUMomentsCapabilities isEqualToCapabilities:]
  -[TUMomentsCapabilities isEqual:]
  -[TUMomentsCapabilities availability]
  -[TUMomentsCapabilities encodeWithCoder:]
  -[TUMomentsCapabilities supportedMediaTypes]
  -[TUMomentsCapabilities initWithAvailability:supportedMediaTypes:]


TUCarPlayHardwareControlsBroadcaster : NSObject
 @property  NSString *eventTypeToIgnore

  // instance methods
  -[TUCarPlayHardwareControlsBroadcaster .cxx_destruct]
  -[TUCarPlayHardwareControlsBroadcaster init]
  -[TUCarPlayHardwareControlsBroadcaster dealloc]
  -[TUCarPlayHardwareControlsBroadcaster eventTypeToIgnore]
  -[TUCarPlayHardwareControlsBroadcaster setEventTypeToIgnore:]
  -[TUCarPlayHardwareControlsBroadcaster longPressTimerFired:]


TUConversationLinkDescriptorXPCClientDataSource : NSObject <TUConversationLinkDescriptorXPCClient, TUConversationLinkDescriptorDataSource>
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSXPCConnection *xpcConnection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <TUConversationLinkDescriptorDataSourceDelegate> *conversationLinkDescriptorDataSourceDelegate

  // class methods
  +[TUConversationLinkDescriptorXPCClientDataSource serverXPCInterface]
  +[TUConversationLinkDescriptorXPCClientDataSource setSynchronousServer:]
  +[TUConversationLinkDescriptorXPCClientDataSource clientXPCInterface]
  +[TUConversationLinkDescriptorXPCClientDataSource synchronousServer]
  +[TUConversationLinkDescriptorXPCClientDataSource asynchronousServer]
  +[TUConversationLinkDescriptorXPCClientDataSource setAsynchronousServer:]

  // instance methods
  -[TUConversationLinkDescriptorXPCClientDataSource synchronousServerWithErrorHandler:]
  -[TUConversationLinkDescriptorXPCClientDataSource accessorLock]
  -[TUConversationLinkDescriptorXPCClientDataSource setXpcConnection:]
  -[TUConversationLinkDescriptorXPCClientDataSource xpcConnection]
  -[TUConversationLinkDescriptorXPCClientDataSource .cxx_destruct]
  -[TUConversationLinkDescriptorXPCClientDataSource asynchronousServerWithErrorHandler:]
  -[TUConversationLinkDescriptorXPCClientDataSource init]
  -[TUConversationLinkDescriptorXPCClientDataSource dealloc]
  -[TUConversationLinkDescriptorXPCClientDataSource conversationLinkDescriptorsDidChange]
  -[TUConversationLinkDescriptorXPCClientDataSource conversationLinkDescriptorDataSourceDelegate]
  -[TUConversationLinkDescriptorXPCClientDataSource addConversationLinkDescriptors:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource addConversationLinkDescriptors:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource addOrUpdateConversationLinkDescriptors:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource addOrUpdateConversationLinkDescriptors:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource conversationLinkDescriptorCountWithPredicate:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource conversationLinkDescriptorCountWithPredicate:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource conversationLinkDescriptorsWithPredicate:limit:offset:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource conversationLinkDescriptorsWithPredicate:limit:offset:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource removeConversationLinkDescriptorsWithPredicate:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource removeConversationLinkDescriptorsWithPredicate:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource setName:withRevision:forConversationLinkDescriptorsWithPredicate:error:]
  -[TUConversationLinkDescriptorXPCClientDataSource setName:withRevision:forConversationLinkDescriptorsWithPredicate:completion:]
  -[TUConversationLinkDescriptorXPCClientDataSource setConversationLinkDescriptorDataSourceDelegate:]


TUSuggestionsMetadataCacheDataProvider : TUMetadataCacheDataProvider
 @property  NSObject<OS_dispatch_semaphore> *suggestionsServiceThrottleSemaphore
 @property  id suggestionsContactsObserver

  // class methods
  +[TUSuggestionsMetadataCacheDataProvider canUseSiriSuggestions]
  +[TUSuggestionsMetadataCacheDataProvider suggestedNamesForDestinationID:onlySignificant:error:]
  +[TUSuggestionsMetadataCacheDataProvider newestSuggestedContactForDestinationID:]
  +[TUSuggestionsMetadataCacheDataProvider suggestedNamesForDestinationID:onlySignificant:withCompletion:]
  +[TUSuggestionsMetadataCacheDataProvider sharedService]

  // instance methods
  -[TUSuggestionsMetadataCacheDataProvider updateCacheWithDestinationIDs:withGroup:]
  -[TUSuggestionsMetadataCacheDataProvider .cxx_destruct]
  -[TUSuggestionsMetadataCacheDataProvider init]
  -[TUSuggestionsMetadataCacheDataProvider suggestionsContactsObserver]
  -[TUSuggestionsMetadataCacheDataProvider setSuggestionsServiceThrottleSemaphore:]
  -[TUSuggestionsMetadataCacheDataProvider suggestionsServiceThrottleSemaphore]


TUConversationActivity : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *activityIdentifier
 @property  NSUUID *UUID
 @property  TUConversationActivityMetadata *metadata
 @property  NSData *applicationContext
 @property  NSString *bundleIdentifier
 @property  BOOL supported
 @property  TUHandle *originator
 @property  TUHandle *trustedFromHandle
 @property  NSDate *timestamp
 @property  NSString *fallbackApplicationName
 @property  BOOL systemActivity
 @property  NSString *representativeBundleIdentifier
 @property  TUConversationActivityContext *activityContext
 @property  BOOL eligibleForHandoff
 @property  BOOL eligibleForWebBrowser
 @property  BOOL placeholderActivity

  // class methods
  +[TUConversationActivity supportsSecureCoding]
  +[TUConversationActivity lookupApplicationNameForBundleIdentifier:]
  +[TUConversationActivity placeholderActivity]

  // instance methods
  -[TUConversationActivity applicationContext]
  -[TUConversationActivity setOriginator:]
  -[TUConversationActivity setApplicationContext:]
  -[TUConversationActivity UUID]
  -[TUConversationActivity initWithCoder:]
  -[TUConversationActivity originator]
  -[TUConversationActivity bundleIdentifier]
  -[TUConversationActivity .cxx_destruct]
  -[TUConversationActivity isSupported]
  -[TUConversationActivity setBundleIdentifier:]
  -[TUConversationActivity fallbackApplicationName]
  -[TUConversationActivity isEqual:]
  -[TUConversationActivity metadata]
  -[TUConversationActivity setActivityIdentifier:]
  -[TUConversationActivity setMetadata:]
  -[TUConversationActivity setSupported:]
  -[TUConversationActivity timestamp]
  -[TUConversationActivity activityContext]
  -[TUConversationActivity copyWithZone:]
  -[TUConversationActivity isEligibleForHandoff]
  -[TUConversationActivity sanitizedCopy]
  -[TUConversationActivity setTimestamp:]
  -[TUConversationActivity activityIdentifier]
  -[TUConversationActivity localizedApplicationName]
  -[TUConversationActivity encodeWithCoder:]
  -[TUConversationActivity setUUID:]
  -[TUConversationActivity initWithBundleIdentifier:metadata:applicationContext:uuid:activityIdentifier:fallbackApplicationName:]
  -[TUConversationActivity initWithMetadata:applicationContext:uuid:activityIdentifier:]
  -[TUConversationActivity trustedFromHandle]
  -[TUConversationActivity isSystemActivity]
  -[TUConversationActivity isPlaceholderActivity]
  -[TUConversationActivity isEqualToConversationActivity:]
  -[TUConversationActivity setSystemActivity:]
  -[TUConversationActivity setTrustedFromHandle:]
  -[TUConversationActivity sanitizedCopyWithZone:]
  -[TUConversationActivity isEligibleForWebBrowser]
  -[TUConversationActivity isScreenSharingActivity]
  -[TUConversationActivity platformScreenSharingBundleIdentifier]
  -[TUConversationActivity concatenatedMetadataDescription]
  -[TUConversationActivity initWithBundleIdentifier:metadata:applicationContext:uuid:activityIdentifier:]
  -[TUConversationActivity isEquivalentToActivity:]
  -[TUConversationActivity representativeBundleIdentifier]
  -[TUConversationActivity representativeDisplayName]
  -[TUConversationActivity concatenatedDescription]
  -[TUConversationActivity setActivityContext:]
  -[TUConversationActivity setFallbackApplicationName:]


TUCallDirectoryMetadataCacheDataProvider : TUMetadataCacheDataProvider
 @property  CXCallDirectoryManager *callDirectoryManager
 @property  int identificationEntriesChangedNotifyToken
 @property  @? countryDialingCode
 @property  @? firstIdentificationEntriesForEnabledExtensions

  // instance methods
  -[TUCallDirectoryMetadataCacheDataProvider updateCacheWithDestinationIDs:withGroup:]
  -[TUCallDirectoryMetadataCacheDataProvider setCountryDialingCode:]
  -[TUCallDirectoryMetadataCacheDataProvider .cxx_destruct]
  -[TUCallDirectoryMetadataCacheDataProvider countryDialingCode]
  -[TUCallDirectoryMetadataCacheDataProvider identificationEntriesChangedNotifyToken]
  -[TUCallDirectoryMetadataCacheDataProvider init]
  -[TUCallDirectoryMetadataCacheDataProvider firstIdentificationEntriesForEnabledExtensions]
  -[TUCallDirectoryMetadataCacheDataProvider setFirstIdentificationEntriesForEnabledExtensions:]
  -[TUCallDirectoryMetadataCacheDataProvider dealloc]
  -[TUCallDirectoryMetadataCacheDataProvider callDirectoryManager]


TUStringShareItem : NSObject
 @property  NSString *message

  // instance methods
  -[TUStringShareItem .cxx_destruct]
  -[TUStringShareItem setMessage:]
  -[TUStringShareItem initWithMessage:]
  -[TUStringShareItem message]


TURecentsResults : TUSearchResults <NSCopying>
  // instance methods
  -[TURecentsResults copyWithZone:]
  -[TURecentsResults allSearchItems]


TUGeoLocationMetadataCacheDataProvider : TUMetadataCacheDataProvider
 @property  PNRPhoneNumberResolver *phoneNumberResolver

  // instance methods
  -[TUGeoLocationMetadataCacheDataProvider updateCacheWithDestinationIDs:withGroup:]
  -[TUGeoLocationMetadataCacheDataProvider .cxx_destruct]
  -[TUGeoLocationMetadataCacheDataProvider init]
  -[TUGeoLocationMetadataCacheDataProvider locationForMetadataIdentifier:]
  -[TUGeoLocationMetadataCacheDataProvider phoneNumberResolver]


TUAudioController : NSObject
 @property  NSObject<OS_dispatch_semaphore> *modifyingStateLock

  // instance methods
  -[TUAudioController .cxx_destruct]
  -[TUAudioController init]
  -[TUAudioController modifyingStateLock]
  -[TUAudioController setModifyingStateLock:]
  -[TUAudioController _requestUpdatedValueWithBlock:object:isRequestingPointer:forceNewRequest:scheduleTimePointer:notificationString:notificationUserInfo:queue:]
  -[TUAudioController _acquireLock]
  -[TUAudioController _releaseLock]
  -[TUAudioController _requestUpdatedValueWithBlock:object:isRequestingPointer:forceNewRequest:scheduleTimePointer:notificationString:queue:]


TUSenderIdentityCapabilities : NSObject
 @property  TUSenderIdentityCapabilitiesState *state
 @property  TUCallCapabilitiesXPCClient *client
 @property  TUCTCapabilityInfo *voLTECallingCapabilityInfo
 @property  TUCTCapabilityInfo *wiFiCallingCapabilityInfo
 @property  TUCTCapabilityInfo *thumperCallingCapabilityInfo
 @property  NSUUID *senderIdentityUUID
 @property  BOOL supportsSimultaneousVoiceAndData
 @property  BOOL canAttemptTelephonyCallsWithoutCellularConnection
 @property  BOOL canAttemptEmergencyCallsWithoutCellularConnection
 @property  BOOL csCallingCurrentlyAvailable
 @property  BOOL supportsVoLTECalling
 @property  BOOL voLTECallingEnabled
 @property  BOOL voLTECallingCurrentlyAvailable
 @property  BOOL supportsWiFiCalling
 @property  BOOL wiFiCallingEnabled
 @property  BOOL supportsWiFiCallingRoaming
 @property  BOOL wiFiCallingRoamingEnabled
 @property  BOOL wiFiCallingCurrentlyAvailable
 @property  BOOL supportsEmergencyWiFiCalling
 @property  BOOL emergencyWiFiCallingCurrentlyAvailable
 @property  int wiFiCallingProvisioningStatus
 @property  NSURL *wiFiCallingProvisioningURL
 @property  BOOL wiFiCallingProvisioningURLInvalid
 @property  NSData *wiFiCallingProvisioningPostData
 @property  BOOL supportsThumperCalling
 @property  BOOL thumperCallingAllowedForCurrentDevice
 @property  BOOL thumperCallingEnabled
 @property  BOOL thumperCallingCurrentlyAvailable
 @property  BOOL supportsThumperCallingOverCellularData
 @property  NSString *thumperCallingLocalDeviceID
 @property  int thumperCallingProvisioningStatus
 @property  NSURL *thumperCallingProvisioningURL
 @property  BOOL thumperCallingProvisioningURLInvalid
 @property  NSData *thumperCallingProvisioningPostData
 @property  BOOL thumperCallingAllowedOnDefaultPairedSecondaryDevice

  // instance methods
  -[TUSenderIdentityCapabilities isVoLTECallingCurrentlyAvailable]
  -[TUSenderIdentityCapabilities thumperCallingCapabilityInfo]
  -[TUSenderIdentityCapabilities isCSCallingCurrentlyAvailable]
  -[TUSenderIdentityCapabilities setWiFiCallingEnabled:]
  -[TUSenderIdentityCapabilities .cxx_destruct]
  -[TUSenderIdentityCapabilities canAttemptTelephonyCallsWithoutCellularConnection]
  -[TUSenderIdentityCapabilities isThumperCallingAllowedOnDefaultPairedSecondaryDevice]
  -[TUSenderIdentityCapabilities setThumperCallingAllowed:onSecondaryDeviceWithID:]
  -[TUSenderIdentityCapabilities canAttemptEmergencyCallsWithoutCellularConnection]
  -[TUSenderIdentityCapabilities setThumperCallingAllowedOnDefaultPairedSecondaryDevice:]
  -[TUSenderIdentityCapabilities wiFiCallingCapabilityInfo]
  -[TUSenderIdentityCapabilities isThumperCallingAllowedForCurrentDevice]
  -[TUSenderIdentityCapabilities setVoLTECallingEnabled:]
  -[TUSenderIdentityCapabilities isVoLTECallingEnabled]
  -[TUSenderIdentityCapabilities supportsSimultaneousVoiceAndData]
  -[TUSenderIdentityCapabilities supportsVoLTECalling]
  -[TUSenderIdentityCapabilities state]
  -[TUSenderIdentityCapabilities supportsThumperCallingOverCellularData]
  -[TUSenderIdentityCapabilities supportsThumperCalling]
  -[TUSenderIdentityCapabilities voLTECallingCapabilityInfo]
  -[TUSenderIdentityCapabilities client]
  -[TUSenderIdentityCapabilities isWiFiCallingRoamingEnabled]
  -[TUSenderIdentityCapabilities setThumperCallingEnabled:]
  -[TUSenderIdentityCapabilities supportsWiFiCalling]
  -[TUSenderIdentityCapabilities isWiFiCallingCurrentlyAvailable]
  -[TUSenderIdentityCapabilities isThumperCallingAllowedOnSecondaryDeviceWithID:]
  -[TUSenderIdentityCapabilities setWiFiCallingRoamingEnabled:]
  -[TUSenderIdentityCapabilities isWiFiCallingEnabled]
  -[TUSenderIdentityCapabilities invalidateAndRefreshThumperCallingProvisioningURL]
  -[TUSenderIdentityCapabilities isThumperCallingCurrentlyAvailable]
  -[TUSenderIdentityCapabilities invalidateAndRefreshWiFiCallingProvisioningURL]
  -[TUSenderIdentityCapabilities isThumperCallingEnabled]
  -[TUSenderIdentityCapabilities isEmergencyWiFiCallingCurrentlyAvailable]
  -[TUSenderIdentityCapabilities supportsWiFiCallingRoaming]
  -[TUSenderIdentityCapabilities senderIdentityUUID]
  -[TUSenderIdentityCapabilities supportsEmergencyWiFiCalling]
  -[TUSenderIdentityCapabilities initWithSenderIdentityUUID:state:client:]
  -[TUSenderIdentityCapabilities wiFiCallingProvisioningStatus]
  -[TUSenderIdentityCapabilities wiFiCallingProvisioningURL]
  -[TUSenderIdentityCapabilities isWiFiCallingProvisioningURLInvalid]
  -[TUSenderIdentityCapabilities wiFiCallingProvisioningPostData]
  -[TUSenderIdentityCapabilities thumperCallingProvisioningStatus]
  -[TUSenderIdentityCapabilities thumperCallingProvisioningURL]
  -[TUSenderIdentityCapabilities isThumperCallingProvisioningURLInvalid]
  -[TUSenderIdentityCapabilities thumperCallingProvisioningPostData]
  -[TUSenderIdentityCapabilities requestPinFromPrimaryDeviceForThumperCalling]
  -[TUSenderIdentityCapabilities cancelPinRequestFromPrimaryDeviceForThumperCalling]
  -[TUSenderIdentityCapabilities _sendNotificationsAndCallbacksComparingToOldSenderIdentityCapabilities:]
  -[TUSenderIdentityCapabilities thumperCallingLocalDeviceID]
  -[TUSenderIdentityCapabilities setThumperCallingLocalDeviceID:]


TUCTCapabilitiesState : NSObject <NSCopying, TUPubliclyAccessibleCopying, TUSecureCoding>
 @property  TUCTCapabilityInfo *ctCapabilityInfo
 @property  int provisioningStatus
 @property  NSURL *provisioningURL
 @property  BOOL provisioningURLInvalid
 @property  NSData *provisioningPostData
 @property  BOOL supported
 @property  BOOL enabled
 @property  BOOL currentlyAvailable
 @property  BOOL roamingSupported
 @property  BOOL roamingEnabled
 @property  BOOL emergencySupported
 @property  BOOL emergencyCurrentlyAvailable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCTCapabilitiesState supportsSecureCoding]
  +[TUCTCapabilitiesState unarchivedObjectClasses]
  +[TUCTCapabilitiesState unarchivedObjectFromData:error:]

  // instance methods
  -[TUCTCapabilitiesState initWithCoder:]
  -[TUCTCapabilitiesState archivedDataWithError:]
  -[TUCTCapabilitiesState .cxx_destruct]
  -[TUCTCapabilitiesState isSupported]
  -[TUCTCapabilitiesState setProvisioningStatus:]
  -[TUCTCapabilitiesState publiclyAccessibleCopy]
  -[TUCTCapabilitiesState isEqual:]
  -[TUCTCapabilitiesState provisioningStatus]
  -[TUCTCapabilitiesState isEnabled]
  -[TUCTCapabilitiesState isRoamingEnabled]
  -[TUCTCapabilitiesState setRoamingEnabled:]
  -[TUCTCapabilitiesState setSupported:]
  -[TUCTCapabilitiesState publiclyAccessibleCopyWithZone:]
  -[TUCTCapabilitiesState copyWithZone:]
  -[TUCTCapabilitiesState setEnabled:]
  -[TUCTCapabilitiesState encodeWithCoder:]
  -[TUCTCapabilitiesState isCurrentlyAvailable]
  -[TUCTCapabilitiesState ctCapabilityInfo]
  -[TUCTCapabilitiesState isRoamingSupported]
  -[TUCTCapabilitiesState isEmergencySupported]
  -[TUCTCapabilitiesState isEmergencyCurrentlyAvailable]
  -[TUCTCapabilitiesState provisioningURL]
  -[TUCTCapabilitiesState isProvisioningURLInvalid]
  -[TUCTCapabilitiesState provisioningPostData]
  -[TUCTCapabilitiesState setProvisioningURL:]
  -[TUCTCapabilitiesState setProvisioningPostData:]
  -[TUCTCapabilitiesState isEqualToCapabilitiesState:]
  -[TUCTCapabilitiesState setCurrentlyAvailable:]
  -[TUCTCapabilitiesState setRoamingSupported:]
  -[TUCTCapabilitiesState setEmergencySupported:]
  -[TUCTCapabilitiesState setEmergencyCurrentlyAvailable:]
  -[TUCTCapabilitiesState initWithCapabilityInfo:]
  -[TUCTCapabilitiesState invalidateProvisioningURL]
  -[TUCTCapabilitiesState setProvisioningURLInvalid:]


TUConversationLinkDescriptor : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL activated
 @property  NSDate *creationDate
 @property  NSDate *expirationDate
 @property  NSUUID *groupUUID
 @property  NSSet *invitedHandles
 @property  NSString *name
 @property  TUConversationLinkOriginator *originator
 @property  NSData *privateKey
 @property  NSString *pseudonym
 @property  NSData *publicKey
 @property  int version
 @property  long long linkLifetimeScope

  // class methods
  +[TUConversationLinkDescriptor supportsSecureCoding]

  // instance methods
  -[TUConversationLinkDescriptor setOriginator:]
  -[TUConversationLinkDescriptor publicKey]
  -[TUConversationLinkDescriptor setInvitedHandles:]
  -[TUConversationLinkDescriptor name]
  -[TUConversationLinkDescriptor initWithCoder:]
  -[TUConversationLinkDescriptor originator]
  -[TUConversationLinkDescriptor setCreationDate:]
  -[TUConversationLinkDescriptor privateKey]
  -[TUConversationLinkDescriptor setGroupUUID:]
  -[TUConversationLinkDescriptor .cxx_destruct]
  -[TUConversationLinkDescriptor setPrivateKey:]
  -[TUConversationLinkDescriptor setName:]
  -[TUConversationLinkDescriptor setActivated:]
  -[TUConversationLinkDescriptor setExpirationDate:]
  -[TUConversationLinkDescriptor setVersion:]
  -[TUConversationLinkDescriptor isEqual:]
  -[TUConversationLinkDescriptor pseudonym]
  -[TUConversationLinkDescriptor isEqualToConversationLinkDescriptor:]
  -[TUConversationLinkDescriptor invitedHandles]
  -[TUConversationLinkDescriptor isActivated]
  -[TUConversationLinkDescriptor initWithConversationLinkDescriptor:]
  -[TUConversationLinkDescriptor creationDate]
  -[TUConversationLinkDescriptor version]
  -[TUConversationLinkDescriptor mutableCopyWithZone:]
  -[TUConversationLinkDescriptor setPublicKey:]
  -[TUConversationLinkDescriptor copyWithZone:]
  -[TUConversationLinkDescriptor setPseudonym:]
  -[TUConversationLinkDescriptor expirationDate]
  -[TUConversationLinkDescriptor setLinkLifetimeScope:]
  -[TUConversationLinkDescriptor groupUUID]
  -[TUConversationLinkDescriptor linkLifetimeScope]
  -[TUConversationLinkDescriptor initWithGroupUUID:originator:pseudonym:publicKey:]
  -[TUConversationLinkDescriptor encodeWithCoder:]


TUMutableConversationLinkDescriptor : TUConversationLinkDescriptor
 @property  BOOL activated
 @property  NSDate *creationDate
 @property  NSDate *expirationDate
 @property  NSUUID *groupUUID
 @property  NSSet *invitedHandles
 @property  NSString *name
 @property  TUConversationLinkOriginator *originator
 @property  NSData *privateKey
 @property  NSString *pseudonym
 @property  NSData *publicKey
 @property  int version
 @property  long long linkLifetimeScope


TUDispatcher : NSObject
 @property  NSObject<OS_dispatch_queue> *dispatchQueue

  // class methods
  +[TUDispatcher dispatcherWithIdentifier:]
  +[TUDispatcher dispatcherWithQueue:]

  // instance methods
  -[TUDispatcher dispatchSynchronousBlock:]
  -[TUDispatcher initWithIdentifier:]
  -[TUDispatcher .cxx_destruct]
  -[TUDispatcher init]
  -[TUDispatcher initWithQueue:]
  -[TUDispatcher dispatchQueue]
  -[TUDispatcher dispatchAsynchronousBlock:]
  -[TUDispatcher qosUserInteractiveDispatchBlockForBlock:]
  -[TUDispatcher boostQualityOfService]


TUVideoDeviceController : NSObject <TUVideoDeviceControllerProviderDelegate>
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  <TUVideoDeviceControllerProvider><TUVideoEffectsProvider> *provider
 @property  BOOL wantsPreview
 @property  BOOL hasRefreshedPreviewAfterError
 @property  AVCaptureDevice *currentInputDevice
 @property  int currentVideoOrientation
 @property  NSArray *inputDevices
 @property  BOOL previewRunning
 @property  BOOL cinematicFramingEnabled
 @property  BOOL currentInputSupportsCinematicFraming
 @property  BOOL supportsCameraBlur
 @property  BOOL allowsCameraBlurToggling
 @property  BOOL cameraBlurEnabled
 @property  CALayer *localFrontLayer
 @property  CALayer *localBackLayer
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} localScreenContentsRect
 @property  {CGSize=dd} localVideoPortraitAspectRatio
 @property  {CGSize=dd} localScreenPortraitAspectRatio
 @property  {CGSize=dd} localVideoLandscapeAspectRatio
 @property  {CGSize=dd} localScreenLandscapeAspectRatio
 @property  TUVideoEffect *currentVideoEffect
 @property  NSArray *availableVideoEffects

  // class methods
  +[TUVideoDeviceController prewarm]
  +[TUVideoDeviceController _tuOrientationForVideoOrientation:]
  +[TUVideoDeviceController _videoOrientationForTUOrientation:]

  // instance methods
  -[TUVideoDeviceController setCinematicFramingEnabled:]
  -[TUVideoDeviceController currentInputDevice]
  -[TUVideoDeviceController pausePreview]
  -[TUVideoDeviceController setCurrentInputDevice:]
  -[TUVideoDeviceController stopPreview]
  -[TUVideoDeviceController .cxx_destruct]
  -[TUVideoDeviceController startPreview]
  -[TUVideoDeviceController serialQueue]
  -[TUVideoDeviceController init]
  -[TUVideoDeviceController inputDevices]
  -[TUVideoDeviceController provider]
  -[TUVideoDeviceController initWithSerialQueue:]
  -[TUVideoDeviceController isCinematicFramingEnabled]
  -[TUVideoDeviceController setCameraZoomFactor:]
  -[TUVideoDeviceController initWithProvider:serialQueue:]
  -[TUVideoDeviceController isPreviewRunning]
  -[TUVideoDeviceController setCurrentVideoEffect:]
  -[TUVideoDeviceController currentVideoEffect]
  -[TUVideoDeviceController availableVideoEffects]
  -[TUVideoDeviceController setWantsPreview:]
  -[TUVideoDeviceController getSnapshot]
  -[TUVideoDeviceController allowsCameraBlurToggling]
  -[TUVideoDeviceController setAllowsCameraBlurToggling:]
  -[TUVideoDeviceController setCameraBlurEnabled:]
  -[TUVideoDeviceController rampCameraZoomFactor:withRate:]
  -[TUVideoDeviceController portraitScreenAttributes]
  -[TUVideoDeviceController landscapeScreenAttributes]
  -[TUVideoDeviceController currentVideoOrientation]
  -[TUVideoDeviceController hasRefreshedPreviewAfterError]
  -[TUVideoDeviceController wantsPreview]
  -[TUVideoDeviceController setHasRefreshedPreviewAfterError:]
  -[TUVideoDeviceController didStartPreviewForProvider:]
  -[TUVideoDeviceController didPausePreviewForProvider:]
  -[TUVideoDeviceController didStopPreviewForProvider:]
  -[TUVideoDeviceController captureDevicesChangedForProvider:]
  -[TUVideoDeviceController provider:cameraDidBecomeAvailableForUniqueID:]
  -[TUVideoDeviceController provider:didChangeLocalVideoAttributes:]
  -[TUVideoDeviceController provider:didReceiveErrorFromCameraUniqueID:error:]
  -[TUVideoDeviceController provider:didReceiveFirstPreviewFrameFromCameraUniqueID:]
  -[TUVideoDeviceController provider:cameraZoomAvailabilityDidChange:]
  -[TUVideoDeviceController provider:cameraBlurEnabledDidChange:]
  -[TUVideoDeviceController provider:didGetSnapshot:]
  -[TUVideoDeviceController provider:cameraCinematicFramingAvailabilityDidChange:]
  -[TUVideoDeviceController provider:cameraCinematicFramingEnabledDidChange:]
  -[TUVideoDeviceController currentInputSupportsCinematicFraming]
  -[TUVideoDeviceController setCurrentVideoOrientation:]
  -[TUVideoDeviceController localFrontLayer]
  -[TUVideoDeviceController setLocalFrontLayer:]
  -[TUVideoDeviceController localBackLayer]
  -[TUVideoDeviceController setLocalBackLayer:]
  -[TUVideoDeviceController supportsCameraBlur]
  -[TUVideoDeviceController cameraBlurEnabled]
  -[TUVideoDeviceController noteBeginAnimationToPreview]
  -[TUVideoDeviceController flipCamera]
  -[TUVideoDeviceController noteEndAnimationToPreview]
  -[TUVideoDeviceController noteBeginAnimationToPIP]
  -[TUVideoDeviceController noteEndAnimationToPIP]
  -[TUVideoDeviceController setLocalPortraitAspectRatio:localLandscapeAspectRatio:]
  -[TUVideoDeviceController localScreenContentsRect]
  -[TUVideoDeviceController localVideoPortraitAspectRatio]
  -[TUVideoDeviceController localScreenPortraitAspectRatio]
  -[TUVideoDeviceController localVideoLandscapeAspectRatio]
  -[TUVideoDeviceController localScreenLandscapeAspectRatio]


TUCallHistorySearchModule : NSObject <TUSearchModuleProtocol>
 @property  NSMutableArray *currentResultsList
 @property  NSString *previousSearchString
 @property  BOOL searchComplete
 @property  TUSearchResults *searchResults
 @property  TUSearchController *searchController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUCallHistorySearchModule searchController]
  -[TUCallHistorySearchModule setSearchController:]
  -[TUCallHistorySearchModule .cxx_destruct]
  -[TUCallHistorySearchModule cancelSearch]
  -[TUCallHistorySearchModule searchResults]
  -[TUCallHistorySearchModule setSearchComplete:]
  -[TUCallHistorySearchModule previousSearchString]
  -[TUCallHistorySearchModule setPreviousSearchString:]
  -[TUCallHistorySearchModule currentResultsList]
  -[TUCallHistorySearchModule setCurrentResultsList:]
  -[TUCallHistorySearchModule searchForString:completion:]
  -[TUCallHistorySearchModule isSearchComplete]


TUUserNotificationProviderXPCClient : NSObject <TUUserNotificationsProviderXPCServer, TUUserNotificationProviderDataSource>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUUserNotificationProviderXPCClient setSynchronousServer:]
  +[TUUserNotificationProviderXPCClient synchronousServer]
  +[TUUserNotificationProviderXPCClient asynchronousServer]
  +[TUUserNotificationProviderXPCClient setAsynchronousServer:]
  +[TUUserNotificationProviderXPCClient userNotificationProviderServerXPCInterface]

  // instance methods
  -[TUUserNotificationProviderXPCClient synchronousServerWithErrorHandler:]
  -[TUUserNotificationProviderXPCClient setXpcConnection:]
  -[TUUserNotificationProviderXPCClient xpcConnection]
  -[TUUserNotificationProviderXPCClient .cxx_destruct]
  -[TUUserNotificationProviderXPCClient init]
  -[TUUserNotificationProviderXPCClient serverWithErrorHandler:]
  -[TUUserNotificationProviderXPCClient queue]
  -[TUUserNotificationProviderXPCClient dealloc]
  -[TUUserNotificationProviderXPCClient momentCapturedForStreamToken:requesterID:reply:]


TUConversationActivityContext : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier
 @property  NSString *actionDescription
 @property  NSString *ongoingDescription
 @property  NSString *completedDescription

  // class methods
  +[TUConversationActivityContext supportsSecureCoding]

  // instance methods
  -[TUConversationActivityContext initWithCoder:]
  -[TUConversationActivityContext .cxx_destruct]
  -[TUConversationActivityContext isEqual:]
  -[TUConversationActivityContext identifier]
  -[TUConversationActivityContext setActionDescription:]
  -[TUConversationActivityContext setIdentifier:]
  -[TUConversationActivityContext copyWithZone:]
  -[TUConversationActivityContext actionDescription]
  -[TUConversationActivityContext encodeWithCoder:]
  -[TUConversationActivityContext isEqualToActivityContext:]
  -[TUConversationActivityContext ongoingDescription]
  -[TUConversationActivityContext completedDescription]
  -[TUConversationActivityContext initWithContextIdentifier:actionDescription:ongoingDescription:completedDescription:]
  -[TUConversationActivityContext setOngoingDescription:]
  -[TUConversationActivityContext setCompletedDescription:]


TUDTMFSoundPlayer : NSObject
 @property  @? playSystemSoundHandler

  // instance methods
  -[TUDTMFSoundPlayer playSystemSoundHandler]
  -[TUDTMFSoundPlayer .cxx_destruct]
  -[TUDTMFSoundPlayer init]
  -[TUDTMFSoundPlayer setPlaySystemSoundHandler:]
  -[TUDTMFSoundPlayer attemptToPlayKey:]
  -[TUDTMFSoundPlayer attemptToPlaySoundType:]


TUDialAssist : NSObject
 @property  int dialAssistUserSettingsChangedToken

  // class methods
  +[TUDialAssist sharedInstance]

  // instance methods
  -[TUDialAssist init]
  -[TUDialAssist dealloc]
  -[TUDialAssist dialAssistUserSettingsChangedToken]


TUOptionalObject : NSObject
 @property  id value

  // instance methods
  -[TUOptionalObject .cxx_destruct]
  -[TUOptionalObject initWithValue:]
  -[TUOptionalObject value]


TUConversationInvitationPreference : NSObject <NSCopying, NSSecureCoding>
 @property  long long handleType
 @property  long long notificationStyles

  // class methods
  +[TUConversationInvitationPreference supportsSecureCoding]
  +[TUConversationInvitationPreference validateNotificationStyles:]
  +[TUConversationInvitationPreference invitationPreferencesForAllHandlesWithStyles:]
  +[TUConversationInvitationPreference standardInvitationPreferencesForLink]
  +[TUConversationInvitationPreference letMeInResponseInvitationPreferences]
  +[TUConversationInvitationPreference incomingCallInvitationPreferences]

  // instance methods
  -[TUConversationInvitationPreference initWithCoder:]
  -[TUConversationInvitationPreference isEqual:]
  -[TUConversationInvitationPreference handleType]
  -[TUConversationInvitationPreference copyWithZone:]
  -[TUConversationInvitationPreference encodeWithCoder:]
  -[TUConversationInvitationPreference notificationStyles]
  -[TUConversationInvitationPreference isEqualToInvitationPreference:]
  -[TUConversationInvitationPreference initWithHandleType:notificationStyles:]


TUVideoEffect : NSObject
 @property  NSString *name
 @property  UIImage *thumbnailImage

  // instance methods
  -[TUVideoEffect name]
  -[TUVideoEffect .cxx_destruct]
  -[TUVideoEffect init]
  -[TUVideoEffect isEqual:]
  -[TUVideoEffect thumbnailImage]
  -[TUVideoEffect initWithName:thumbnailImage:]
  -[TUVideoEffect isEqualToEffect:]


TULinkShareItem : NSObject
 @property  TUConversationLink *tuConversationLink
 @property  NSString *title
 @property  NSURL *placeholder

  // instance methods
  -[TULinkShareItem placeholder]
  -[TULinkShareItem setTitle:]
  -[TULinkShareItem .cxx_destruct]
  -[TULinkShareItem title]
  -[TULinkShareItem setPlaceholder:]
  -[TULinkShareItem setTuConversationLink:]
  -[TULinkShareItem initWithTUConversationLink:title:placeholder:]
  -[TULinkShareItem initWithTUConversationLink:]
  -[TULinkShareItem tuConversationLink]


TUConversationLinkOriginator : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier
 @property  TUHandle *handle
 @property  long long revision

  // class methods
  +[TUConversationLinkOriginator supportsSecureCoding]

  // instance methods
  -[TUConversationLinkOriginator setHandle:]
  -[TUConversationLinkOriginator initWithCoder:]
  -[TUConversationLinkOriginator setRevision:]
  -[TUConversationLinkOriginator .cxx_destruct]
  -[TUConversationLinkOriginator isEqual:]
  -[TUConversationLinkOriginator identifier]
  -[TUConversationLinkOriginator handle]
  -[TUConversationLinkOriginator isEqualToConversationLinkOriginator:]
  -[TUConversationLinkOriginator revision]
  -[TUConversationLinkOriginator setIdentifier:]
  -[TUConversationLinkOriginator initWithIdentifier:revision:handle:]
  -[TUConversationLinkOriginator copyWithZone:]
  -[TUConversationLinkOriginator encodeWithCoder:]


TURepeatingActor : NSObject
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSObject<OS_dispatch_queue> *queue
 @property  BOOL stopped
 @property  BOOL currentlyPerformingAction
 @property  TURepeatingAction *currentRepeatingAction
 @property  TURepeatingAction *pendingRepeatingAction
 @property  @? attemptNextIterationBlock
 @property  BOOL running

  // instance methods
  -[TURepeatingActor accessorLock]
  -[TURepeatingActor .cxx_destruct]
  -[TURepeatingActor isRunning]
  -[TURepeatingActor stop]
  -[TURepeatingActor setStopped:]
  -[TURepeatingActor isStopped]
  -[TURepeatingActor init]
  -[TURepeatingActor queue]
  -[TURepeatingActor currentRepeatingAction]
  -[TURepeatingActor beginRepeatingAction:iterations:pauseDurationBetweenIterations:completion:]
  -[TURepeatingActor _beginRepeatingAction:]
  -[TURepeatingActor _stopWithDidFinish:]
  -[TURepeatingActor setCurrentRepeatingAction:]
  -[TURepeatingActor _attemptNextIteration]
  -[TURepeatingActor setPendingRepeatingAction:]
  -[TURepeatingActor _hasIterationsRemaining]
  -[TURepeatingActor setCurrentlyPerformingAction:]
  -[TURepeatingActor setAttemptNextIterationBlock:]
  -[TURepeatingActor _completeWithDidFinish:]
  -[TURepeatingActor attemptNextIterationBlock]
  -[TURepeatingActor isCurrentlyPerformingAction]
  -[TURepeatingActor pendingRepeatingAction]
  -[TURepeatingActor beginRepeatingAction:iterations:completion:]


TURepeatingAction : NSObject
 @property  @? action
 @property  @? completion
 @property  unsigned long remainingIterations
 @property  double pauseDuration

  // instance methods
  -[TURepeatingAction completion]
  -[TURepeatingAction setCompletion:]
  -[TURepeatingAction .cxx_destruct]
  -[TURepeatingAction setAction:]
  -[TURepeatingAction action]
  -[TURepeatingAction initWithAction:]
  -[TURepeatingAction setRemainingIterations:]
  -[TURepeatingAction setPauseDuration:]
  -[TURepeatingAction remainingIterations]
  -[TURepeatingAction pauseDuration]


TUDiscoverabilitySignal : NSObject
 @property  NSString *identifier
 @property  NSString *context

  // class methods
  +[TUDiscoverabilitySignal osBuild]

  // instance methods
  -[TUDiscoverabilitySignal donateSignalWithCompletion:]
  -[TUDiscoverabilitySignal .cxx_destruct]
  -[TUDiscoverabilitySignal identifier]
  -[TUDiscoverabilitySignal context]
  -[TUDiscoverabilitySignal _discoverabilitySignalsStream]
  -[TUDiscoverabilitySignal initWithIdentifier:context:]


TUCallHistoryController : NSObject <TUCallProviderManagerDelegate>
 @property  CHManager *callHistoryManager
 @property  TUCallProviderManager *callProviderManager
 @property  TUDispatcher *dispatcher
 @property  TUDispatcher *simpleIvarDispatcher
 @property  NSArray *recentCalls
 @property  unsigned long unreadCallCount
 @property  NSArray *thirdPartyCallProviders
 @property  NSMutableSet *metadataPreCachedOptions
 @property  unsigned long coalescingStrategy
 @property  unsigned long options
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCallHistoryController sharedControllerWithCoalescingStrategy:options:]
  +[TUCallHistoryController callHistoryControllerWithCoalescingStrategy:options:]
  +[TUCallHistoryController sharedController]

  // instance methods
  -[TUCallHistoryController recentCallsWithPredicate:]
  -[TUCallHistoryController coalescingStrategy]
  -[TUCallHistoryController setThirdPartyCallProviders:]
  -[TUCallHistoryController callHistoryManagerRecentCallsDispatchBlock]
  -[TUCallHistoryController options]
  -[TUCallHistoryController _updateCallHistoryManagerUsingCurrentOptions]
  -[TUCallHistoryController setOptions:]
  -[TUCallHistoryController .cxx_destruct]
  -[TUCallHistoryController setSimpleIvarDispatcher:]
  -[TUCallHistoryController deleteRecentCall:]
  -[TUCallHistoryController setCoalescingStrategy:]
  -[TUCallHistoryController deleteAllRecentCalls]
  -[TUCallHistoryController thirdPartyCallProviders]
  -[TUCallHistoryController setCallHistoryManager:]
  -[TUCallHistoryController setRecentCalls:]
  -[TUCallHistoryController init]
  -[TUCallHistoryController simpleIvarDispatcher]
  -[TUCallHistoryController setCallProviderManager:]
  -[TUCallHistoryController deleteRecentCalls:]
  -[TUCallHistoryController dispatcher]
  -[TUCallHistoryController callHistoryManagerInitializationDispatchBlock]
  -[TUCallHistoryController providersChangedForProviderManager:]
  -[TUCallHistoryController markRecentVideoCallsAsRead]
  -[TUCallHistoryController reloadWithOptions:]
  -[TUCallHistoryController unreadCallCount]
  -[TUCallHistoryController markRecentCallsAsRead]
  -[TUCallHistoryController setUnreadCallCount:]
  -[TUCallHistoryController markRecentAudioCallsAsRead]
  -[TUCallHistoryController callProviderManager]
  -[TUCallHistoryController callHistoryManager]
  -[TUCallHistoryController markRecentCallsAsReadWithPredicate:]
  -[TUCallHistoryController recentCalls]
  -[TUCallHistoryController setDispatcher:]
  -[TUCallHistoryController initWithCoalescingStrategy:options:]
  -[TUCallHistoryController dealloc]
  -[TUCallHistoryController callHistoryDatabaseChanged:]
  -[TUCallHistoryController dispatcherDidFinishBoost:]
  -[TUCallHistoryController loadDispatchQueue]
  -[TUCallHistoryController metadataPreCachedOptions]
  -[TUCallHistoryController _callHistoryCoalescingStrategyForCoalescingStrategy:]
  -[TUCallHistoryController boostQualityOfService]
  -[TUCallHistoryController setMetadataPreCachedOptions:]


TUCallCapabilities : NSObject
  // class methods
  +[TUCallCapabilities isRelayCallingEnabled]
  +[TUCallCapabilities removeDelegate:]
  +[TUCallCapabilities addDelegate:queue:]
  +[TUCallCapabilities isEmergencyCallbackModeEnabled]
  +[TUCallCapabilities setRelayCallingEnabled:forDeviceWithID:]
  +[TUCallCapabilities isDirectFaceTimeVideoCallingCurrentlyAvailable]
  +[TUCallCapabilities endEmergencyCallbackMode]
  +[TUCallCapabilities supportsFaceTimeAudioRelayCalling]
  +[TUCallCapabilities isVoLTECallingCurrentlyAvailable]
  +[TUCallCapabilities thumperCallingCapabilityInfo]
  +[TUCallCapabilities isCSCallingCurrentlyAvailable]
  +[TUCallCapabilities cancelPinRequestFromPrimaryDevice]
  +[TUCallCapabilities faceTimeAudioCallSupport]
  +[TUCallCapabilities supportsTelephonyCalls]
  +[TUCallCapabilities supportsFaceTimeVideoCalls]
  +[TUCallCapabilities requestPinFromPrimaryDevice]
  +[TUCallCapabilities setWiFiCallingEnabled:]
  +[TUCallCapabilities canAttemptTelephonyCallsWithoutCellularConnection]
  +[TUCallCapabilities canAttemptEmergencyCallsWithoutCellularConnectionWithUUID:]
  +[TUCallCapabilities supportsHostingFaceTimeAudioCalls]
  +[TUCallCapabilities isRelayCallingEnabledForDeviceWithID:]
  +[TUCallCapabilities senderIdentityCapabilitiesWithUUID:]
  +[TUCallCapabilities supportsDisplayingTelephonyCalls]
  +[TUCallCapabilities setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:]
  +[TUCallCapabilities supportsDisplayingFaceTimeVideoCalls]
  +[TUCallCapabilities isThumperCallingAllowedOnDefaultPairedSecondaryDevice]
  +[TUCallCapabilities setThumperCallingAllowed:onSecondaryDeviceWithID:]
  +[TUCallCapabilities canAttemptEmergencyCallsWithoutCellularConnection]
  +[TUCallCapabilities canAttemptTelephonyCallsWithoutCellularConnectionWithSenderIdentityCapabilities:]
  +[TUCallCapabilities setThumperCallingAllowedOnDefaultPairedSecondaryDevice:]
  +[TUCallCapabilities isEmergencyCallbackPossible]
  +[TUCallCapabilities wiFiCallingCapabilityInfo]
  +[TUCallCapabilities isThumperCallingAllowedForCurrentDevice]
  +[TUCallCapabilities supportsBasebandCalling]
  +[TUCallCapabilities supportsDisplayingFaceTimeAudioCalls]
  +[TUCallCapabilities supportsWiFiEmergencyCalling]
  +[TUCallCapabilities supportsRelayCalling]
  +[TUCallCapabilities setVoLTECallingEnabled:]
  +[TUCallCapabilities supportsRelayingToOtherDevices]
  +[TUCallCapabilities isVoLTECallingEnabled]
  +[TUCallCapabilities isDirectFaceTimeAudioCallingCurrentlyAvailable]
  +[TUCallCapabilities supportsSimultaneousVoiceAndData]
  +[TUCallCapabilities supportsVoLTECalling]
  +[TUCallCapabilities _senderIdentityCapabilitiesByUUID]
  +[TUCallCapabilities supportsPrimaryCalling]
  +[TUCallCapabilities cloudCallingDevices]
  +[TUCallCapabilities supportsThumperCallingOverCellularData]
  +[TUCallCapabilities supportsThumperCalling]
  +[TUCallCapabilities voLTECallingCapabilityInfo]
  +[TUCallCapabilities supportsFaceTimeAudioCalls]
  +[TUCallCapabilities relayCallingAvailability]
  +[TUCallCapabilities client]
  +[TUCallCapabilities isWiFiCallingRoamingEnabled]
  +[TUCallCapabilities supportsFaceTimeVideoRelayCalling]
  +[TUCallCapabilities isFaceTimeVideoAvailable]
  +[TUCallCapabilities setThumperCallingEnabled:]
  +[TUCallCapabilities supportsWiFiCalling]
  +[TUCallCapabilities isWiFiCallingCurrentlyAvailable]
  +[TUCallCapabilities senderIdentityCapabilities]
  +[TUCallCapabilities faceTimeVideoCallSupport]
  +[TUCallCapabilities accountsSupportSecondaryCalling]
  +[TUCallCapabilities areRelayCallingFeaturesEnabled]
  +[TUCallCapabilities isThumperCallingAllowedOnSecondaryDeviceWithID:]
  +[TUCallCapabilities isDirectTelephonyCallingCurrentlyAvailable]
  +[TUCallCapabilities supportsHostingTelephonyCalls]
  +[TUCallCapabilities initializeCachedValues]
  +[TUCallCapabilities setWiFiCallingRoamingEnabled:]
  +[TUCallCapabilities isFaceTimeAudioAvailable]
  +[TUCallCapabilities isWiFiCallingEnabled]
  +[TUCallCapabilities invalidateAndRefreshThumperCallingProvisioningURL]
  +[TUCallCapabilities accountsMatchForSecondaryCalling]
  +[TUCallCapabilities supportsHostingFaceTimeVideoCalls]
  +[TUCallCapabilities areCTCapabilitiesValid]
  +[TUCallCapabilities _sendNotificationsAndCallbacksAfterRunningBlock:]
  +[TUCallCapabilities setRelayCallingEnabled:]
  +[TUCallCapabilities supportsTelephonyRelayCalling]
  +[TUCallCapabilities telephonyCallSupport]
  +[TUCallCapabilities isThumperCallingCurrentlyAvailable]
  +[TUCallCapabilities outgoingRelayCallerID]
  +[TUCallCapabilities invalidateAndRefreshWiFiCallingProvisioningURL]
  +[TUCallCapabilities isThumperCallingEnabled]


TUSenderIdentityClient : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <TUCoreTelephonyClient> *client

  // instance methods
  -[TUSenderIdentityClient .cxx_destruct]
  -[TUSenderIdentityClient setClient:]
  -[TUSenderIdentityClient init]
  -[TUSenderIdentityClient client]
  -[TUSenderIdentityClient queue]
  -[TUSenderIdentityClient isRTTSupportedForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYSoftwareAvailableForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYSupportedForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYHardwareAvailableForSenderIdentityUUID:]
  -[TUSenderIdentityClient isRTTAvailableForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYAvailableForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYEnabledForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYHardwareEnabledForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYHardwareSupportedForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYSoftwareEnabledForSenderIdentityUUID:]
  -[TUSenderIdentityClient isTTYSoftwareSupportedForSenderIdentityUUID:]
  -[TUSenderIdentityClient inEmergencyMode]
  -[TUSenderIdentityClient isEmergencyNumberForDigits:senderIdentityUUID:]
  -[TUSenderIdentityClient isWhitelistedEmergencyNumberForDigits:senderIdentityUUID:]
  -[TUSenderIdentityClient isEmergencyNumberForDigits:senderIdentityUUID:error:]
  -[TUSenderIdentityClient isWhitelistedEmergencyNumberForDigits:senderIdentityUUID:error:]
  -[TUSenderIdentityClient shouldShowEmergencyCallbackModeAlertForSenderIdentityUUID:error:]
  -[TUSenderIdentityClient shouldShowEmergencyCallbackModeAlertForSenderIdentityUUID:]
  -[TUSenderIdentityClient testEmergencyHandleForAccountUUID:error:]


TUMomentsController : NSObject <TUMomentsControllerDataSourceDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <TUMomentsControllerDataSource> *dataSource
 @property  <TUMomentsControllerDelegate> *delegate
 @property  NSMutableDictionary *capabilitiesByVideoStreamToken
 @property  NSMutableDictionary *providerByVideoStreamToken
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUMomentsController isInternalInstall]
  +[TUMomentsController isFaceTimePhotosRestricted]
  +[TUMomentsController isFaceTimePhotosEnabled]
  +[TUMomentsController isFaceTimePhotosEnabledByDefault]
  +[TUMomentsController faceTimePhotosEnabledDeterminer]
  +[TUMomentsController setFaceTimePhotosEnabledDeterminer:]
  +[TUMomentsController isFaceTimePhotosXPCServiceEnabled]
  +[TUMomentsController setFaceTimePhotosEnabled:]

  // instance methods
  -[TUMomentsController .cxx_destruct]
  -[TUMomentsController dataSource]
  -[TUMomentsController init]
  -[TUMomentsController initWithDelegate:]
  -[TUMomentsController delegate]
  -[TUMomentsController queue]
  -[TUMomentsController dealloc]
  -[TUMomentsController initWithDelegate:dataSource:]
  -[TUMomentsController endRequestWithTransactionID:completion:]
  -[TUMomentsController capabilitiesByVideoStreamToken]
  -[TUMomentsController providerByVideoStreamToken]
  -[TUMomentsController dataSource:didUpdateCapabilities:forVideoStreamToken:]
  -[TUMomentsController dataSource:willCaptureRemoteRequestFromRequesterID:]
  -[TUMomentsController dataSource:didReceiveLocallyRequestedMomentDescriptor:]
  -[TUMomentsController dataSource:requestSandboxExtensionForURL:reply:]
  -[TUMomentsController serverDiedForDataSource:]
  -[TUMomentsController startRequestWithMediaType:forProvider:requesteeID:completion:]
  -[TUMomentsController registerProvider:completion:]
  -[TUMomentsController unregisterProvider:completion:]
  -[TUMomentsController capabilitiesForProvider:]


TUSoundPlayer : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  TURepeatingActor *repeatingActor
 @property  unsigned int soundID
 @property  BOOL playing

  // instance methods
  -[TUSoundPlayer isPlaying]
  -[TUSoundPlayer soundID]
  -[TUSoundPlayer .cxx_destruct]
  -[TUSoundPlayer setSoundID:]
  -[TUSoundPlayer init]
  -[TUSoundPlayer queue]
  -[TUSoundPlayer playSound:iterations:pauseDurationBetweenIterations:]
  -[TUSoundPlayer playSound:iterations:pauseDurationBetweenIterations:completion:]
  -[TUSoundPlayer stopPlaying]
  -[TUSoundPlayer repeatingActor]
  -[TUSoundPlayer playSound:]
  -[TUSoundPlayer playSoundIndefinitely:pauseDurationBetweenIterations:]


TUContactsDataProviderAppleCareHandles : NSObject
 @property  NSSet *appleCareHandles

  // instance methods
  -[TUContactsDataProviderAppleCareHandles contains:]
  -[TUContactsDataProviderAppleCareHandles .cxx_destruct]
  -[TUContactsDataProviderAppleCareHandles init]
  -[TUContactsDataProviderAppleCareHandles loadHandles]
  -[TUContactsDataProviderAppleCareHandles appleCareHandles]


TUAudioDeviceController : NSObject <TUAudioDeviceControllerActions>
 @property  AVAudioClient *audioClient
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSHashTable *delegates
 @property  <TUAudioDeviceControllerActions> *actionsDelegate
 @property  AVAudioDevice *currentInputDevice
 @property  AVAudioDevice *currentOutputDevice
 @property  NSArray *devices
 @property  NSArray *inputDevices
 @property  NSArray *outputDevices
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUAudioDeviceController removeDelegate:]
  -[TUAudioDeviceController currentInputDevice]
  -[TUAudioDeviceController setDelegates:]
  -[TUAudioDeviceController setSerialQueue:]
  -[TUAudioDeviceController setCurrentInputDevice:]
  -[TUAudioDeviceController setCurrentAudioOutputDeviceToDeviceWithUID:]
  -[TUAudioDeviceController devices]
  -[TUAudioDeviceController setActionsDelegate:]
  -[TUAudioDeviceController .cxx_destruct]
  -[TUAudioDeviceController delegates]
  -[TUAudioDeviceController currentOutputDevice]
  -[TUAudioDeviceController setCurrentAudioInputDeviceToDeviceWithUID:]
  -[TUAudioDeviceController serialQueue]
  -[TUAudioDeviceController init]
  -[TUAudioDeviceController outputDevices]
  -[TUAudioDeviceController setCurrentOutputDevice:]
  -[TUAudioDeviceController initWithActionsDelegate:serialQueue:]
  -[TUAudioDeviceController inputDevices]
  -[TUAudioDeviceController dealloc]
  -[TUAudioDeviceController actionsDelegate]
  -[TUAudioDeviceController addDelegate:]
  -[TUAudioDeviceController audioClient]
  -[TUAudioDeviceController notifyDelegatesOfDeviceListChange]
  -[TUAudioDeviceController setMixesVoiceWithMedia:]
  -[TUAudioDeviceController setFollowsSystemInputSetting:]
  -[TUAudioDeviceController setFollowsSystemOutputSetting:]
  -[TUAudioDeviceController setAudioClient:]


TUConversationNotice : NSObject <NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSUUID *sessionUUID
 @property  long long sessionEventType
 @property  NSURL *actionURL
 @property  NSString *bundleIdentifier
 @property  NSString *item
 @property  long long queueItemType
 @property  TUConversationActivitySession *session

  // class methods
  +[TUConversationNotice supportsSecureCoding]

  // instance methods
  -[TUConversationNotice setSessionUUID:]
  -[TUConversationNotice setItem:]
  -[TUConversationNotice UUID]
  -[TUConversationNotice initWithCoder:]
  -[TUConversationNotice bundleIdentifier]
  -[TUConversationNotice .cxx_destruct]
  -[TUConversationNotice initWithUUID:]
  -[TUConversationNotice setBundleIdentifier:]
  -[TUConversationNotice setSession:]
  -[TUConversationNotice item]
  -[TUConversationNotice sessionUUID]
  -[TUConversationNotice isEqual:]
  -[TUConversationNotice actionURL]
  -[TUConversationNotice session]
  -[TUConversationNotice encodeWithCoder:]
  -[TUConversationNotice setActionURL:]
  -[TUConversationNotice sessionEventType]
  -[TUConversationNotice queueItemType]
  -[TUConversationNotice isEqualToConversationNotice:]
  -[TUConversationNotice setSessionEventType:]
  -[TUConversationNotice setQueueItemType:]


TUConversationParticipant : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL muted
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL audioPaused
 @property  BOOL momentsAvailable
 @property  BOOL lightweight
 @property  BOOL localAccountHandle
 @property  long long streamToken
 @property  long long screenToken
 @property  long long audioPriority
 @property  long long videoPriority
 @property  NSString *avcIdentifier
 @property  NSString *activeIDSDestination
 @property  TUConversationParticipantCapabilities *capabilities
 @property  BOOL remoteAudioEnabled
 @property  BOOL remoteVideoEnabled
 @property  unsigned long identifier
 @property  TUHandle *handle

  // class methods
  +[TUConversationParticipant supportsSecureCoding]

  // instance methods
  -[TUConversationParticipant setCapabilities:]
  -[TUConversationParticipant setMuted:]
  -[TUConversationParticipant isMuted]
  -[TUConversationParticipant initWithCoder:]
  -[TUConversationParticipant capabilities]
  -[TUConversationParticipant isEqualToParticipant:]
  -[TUConversationParticipant .cxx_destruct]
  -[TUConversationParticipant setAudioEnabled:]
  -[TUConversationParticipant setVideoEnabled:]
  -[TUConversationParticipant isEqual:]
  -[TUConversationParticipant identifier]
  -[TUConversationParticipant handle]
  -[TUConversationParticipant mutableCopyWithZone:]
  -[TUConversationParticipant copyWithZone:]
  -[TUConversationParticipant isAudioEnabled]
  -[TUConversationParticipant encodeWithCoder:]
  -[TUConversationParticipant isVideoEnabled]
  -[TUConversationParticipant streamToken]
  -[TUConversationParticipant activeIDSDestination]
  -[TUConversationParticipant audioPriority]
  -[TUConversationParticipant avcIdentifier]
  -[TUConversationParticipant isMomentsAvailable]
  -[TUConversationParticipant isScreenEnabled]
  -[TUConversationParticipant screenToken]
  -[TUConversationParticipant videoPriority]
  -[TUConversationParticipant isAudioPaused]
  -[TUConversationParticipant isRemoteAudioEnabled]
  -[TUConversationParticipant isRemoteVideoEnabled]
  -[TUConversationParticipant isLocalAccountHandle]
  -[TUConversationParticipant isLightweight]
  -[TUConversationParticipant initWithConversationParticipant:]
  -[TUConversationParticipant initWithIdentifier:handle:]
  -[TUConversationParticipant setScreenEnabled:]
  -[TUConversationParticipant setAudioPaused:]
  -[TUConversationParticipant setMomentsAvailable:]
  -[TUConversationParticipant setLightweight:]
  -[TUConversationParticipant setStreamToken:]
  -[TUConversationParticipant setScreenToken:]
  -[TUConversationParticipant setAudioPriority:]
  -[TUConversationParticipant setVideoPriority:]
  -[TUConversationParticipant setAvcIdentifier:]
  -[TUConversationParticipant setRemoteAudioEnabled:]
  -[TUConversationParticipant setRemoteVideoEnabled:]
  -[TUConversationParticipant setActiveIDSDestination:]
  -[TUConversationParticipant setLocalAccountHandle:]


TUMutableConversationParticipant : TUConversationParticipant
 @property  unsigned long identifier
 @property  TUHandle *handle
 @property  BOOL muted
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL momentsAvailable
 @property  long long streamToken
 @property  long long screenToken
 @property  long long audioPriority
 @property  long long videoPriority
 @property  NSString *avcIdentifier
 @property  NSString *activeIDSDestination
 @property  TUConversationParticipantCapabilities *capabilities
 @property  BOOL lightweight
 @property  BOOL remoteAudioEnabled
 @property  BOOL remoteVideoEnabled


TUVideoCallAttributes : NSObject <NSSecureCoding>
 @property  long long remoteCameraOrientation
 @property  long long localVideoContextSlotIdentifier
 @property  long long remoteVideoContextSlotIdentifier

  // class methods
  +[TUVideoCallAttributes supportsSecureCoding]

  // instance methods
  -[TUVideoCallAttributes initWithCoder:]
  -[TUVideoCallAttributes isEqual:]
  -[TUVideoCallAttributes encodeWithCoder:]
  -[TUVideoCallAttributes remoteCameraOrientation]
  -[TUVideoCallAttributes localVideoContextSlotIdentifier]
  -[TUVideoCallAttributes remoteVideoContextSlotIdentifier]
  -[TUVideoCallAttributes isEqualToVideoCallAttributes:]
  -[TUVideoCallAttributes setRemoteCameraOrientation:]
  -[TUVideoCallAttributes setLocalVideoContextSlotIdentifier:]
  -[TUVideoCallAttributes setRemoteVideoContextSlotIdentifier:]


TUProxyRecentCall : NSObject <TUSearchResult>
 @property  CHRecentCall *recentCall
 @property  NSString *mostRecentCallInfo
 @property  TUSearchController *searchController
 @property  NSString *displayName
 @property  NSString *callerId
 @property  CNContact *backingContact
 @property  NSString *backingContactId
 @property  NSString *backingContactIdentifier
 @property  NSString *destinationId
 @property  NSString *isoCountryCode
 @property  NSArray *handles
 @property  long long mostRecentCallType
 @property  BOOL mostRecentCallWasMissed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *idsCanonicalDestinations

  // instance methods
  -[TUProxyRecentCall displayName]
  -[TUProxyRecentCall searchController]
  -[TUProxyRecentCall setSearchController:]
  -[TUProxyRecentCall .cxx_destruct]
  -[TUProxyRecentCall forwardingTargetForSelector:]
  -[TUProxyRecentCall init]
  -[TUProxyRecentCall handles]
  -[TUProxyRecentCall destinationId]
  -[TUProxyRecentCall initWithRecentCall:]
  -[TUProxyRecentCall backingContact]
  -[TUProxyRecentCall mostRecentCallType]
  -[TUProxyRecentCall recentCall]
  -[TUProxyRecentCall backingContactId]
  -[TUProxyRecentCall backingContactIdentifier]
  -[TUProxyRecentCall mostRecentCallWasMissed]
  -[TUProxyRecentCall idsCanonicalDestinations]
  -[TUProxyRecentCall mostRecentCallInfo]
  -[TUProxyRecentCall setRecentCall:]


TURoute : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  BOOL A2DPRoute
 @property  BOOL airTunes
 @property  BOOL carAudio
 @property  BOOL currentlyPicked
 @property  BOOL bluetooth
 @property  long long bluetoothEndpointType
 @property  BOOL bluetoothLE
 @property  BOOL bluetoothManaged
 @property  BOOL defaultRoute
 @property  long long deviceType
 @property  BOOL guest
 @property  NSArray *identifiersOfOtherConnectedDevices
 @property  BOOL inEarDetectionEnabled
 @property  BOOL inEarDetectionSupported
 @property  NSString *name
 @property  BOOL preferred
 @property  BOOL preferredAndActive
 @property  BOOL receiver
 @property  BOOL speaker
 @property  BOOL supportsHighQualityVoiceWithMedia
 @property  BOOL supportsRelay
 @property  NSString *uniqueIdentifier
 @property  BOOL wiredHeadphones
 @property  BOOL wiredHeadset
 @property  BOOL wirelessHeadset
 @property  BOOL partnerRoutePresent
 @property  BOOL siblingRoutePresent
 @property  BOOL supportsSharePlay
 @property  BOOL carKitRoute
 @property  BOOL homePodFamily
 @property  BOOL isAirPodsRoute
 @property  BOOL inEarDetected
 @property  BOOL supportsPreferredAndActive
 @property  BOOL tipiParticipant
 @property  BOOL triangleParticipant

  // class methods
  +[TURoute supportsSecureCoding]
  +[TURoute predicateForPreferredRoute]
  +[TURoute predicateForInEarAudioRoute]

  // instance methods
  -[TURoute isGuest]
  -[TURoute isCarAudio]
  -[TURoute setReceiver:]
  -[TURoute isAirTunes]
  -[TURoute setGuest:]
  -[TURoute supportsRelay]
  -[TURoute setA2DPRoute:]
  -[TURoute isBluetooth]
  -[TURoute setUniqueIdentifier:]
  -[TURoute setInEarDetectionEnabled:]
  -[TURoute setSpeaker:]
  -[TURoute setBluetoothManaged:]
  -[TURoute setDefaultRoute:]
  -[TURoute setBluetoothLE:]
  -[TURoute name]
  -[TURoute isPreferred]
  -[TURoute isA2DPRoute]
  -[TURoute deviceType]
  -[TURoute uniqueIdentifier]
  -[TURoute initWithCoder:]
  -[TURoute setAirTunes:]
  -[TURoute isWiredHeadphones]
  -[TURoute isInEarDetectionSupported]
  -[TURoute isHomePodFamily]
  -[TURoute .cxx_destruct]
  -[TURoute isBluetoothManaged]
  -[TURoute identifiersOfOtherConnectedDevices]
  -[TURoute setSupportsHighQualityVoiceWithMedia:]
  -[TURoute isBluetoothLE]
  -[TURoute setName:]
  -[TURoute isDefaultRoute]
  -[TURoute setSupportsRelay:]
  -[TURoute isSpeaker]
  -[TURoute isInEarDetected]
  -[TURoute isCurrentlyPicked]
  -[TURoute setSiblingRoutePresent:]
  -[TURoute isEqual:]
  -[TURoute isEqualToRoute:]
  -[TURoute isTriangleParticipant]
  -[TURoute setDeviceType:]
  -[TURoute initWithUniqueIdentifier:name:]
  -[TURoute setPreferred:]
  -[TURoute setWiredHeadphones:]
  -[TURoute customDescription]
  -[TURoute supportsSharePlay]
  -[TURoute setWiredHeadset:]
  -[TURoute setInEarDetectionSupported:]
  -[TURoute initWithRoute:]
  -[TURoute isPartnerRoutePresent]
  -[TURoute setPreferredAndActive:]
  -[TURoute isTipiParticipant]
  -[TURoute isWiredHeadset]
  -[TURoute isPreferredAndActive]
  -[TURoute setBluetooth:]
  -[TURoute isWirelessHeadset]
  -[TURoute setIdentifiersOfOtherConnectedDevices:]
  -[TURoute mutableCopyWithZone:]
  -[TURoute isCarKitRoute]
  -[TURoute setBluetoothEndpointType:]
  -[TURoute isInEarDetectionEnabled]
  -[TURoute setWirelessHeadset:]
  -[TURoute supportsPreferredAndActive]
  -[TURoute copyWithZone:]
  -[TURoute setCurrentlyPicked:]
  -[TURoute isAirPodsRoute]
  -[TURoute bluetoothEndpointType]
  -[TURoute isSiblingRoutePresent]
  -[TURoute setPartnerRoutePresent:]
  -[TURoute setSupportsSharePlay:]
  -[TURoute encodeWithCoder:]
  -[TURoute setCarAudio:]
  -[TURoute isReceiver]
  -[TURoute supportsHighQualityVoiceWithMedia]


TUMutableRoute : TURoute
 @property  BOOL currentlyPicked
 @property  BOOL defaultRoute
 @property  long long deviceType
 @property  BOOL receiver
 @property  BOOL speaker
 @property  BOOL wiredHeadphones
 @property  BOOL wiredHeadset
 @property  BOOL wirelessHeadset
 @property  BOOL airTunes
 @property  BOOL carAudio
 @property  BOOL guest
 @property  BOOL bluetooth
 @property  BOOL bluetoothLE
 @property  BOOL bluetoothManaged
 @property  long long bluetoothEndpointType
 @property  BOOL inEarDetectionEnabled
 @property  BOOL inEarDetectionSupported
 @property  BOOL preferred
 @property  BOOL preferredAndActive
 @property  NSArray *identifiersOfOtherConnectedDevices
 @property  BOOL supportsRelay


TUProxyAutocompleteResult : NSObject <TUSearchResult>
 @property  CNAutocompleteResult *autocompleteResult
 @property  NSString *displayName
 @property  NSString *callerId
 @property  CNContact *backingContact
 @property  NSString *backingContactId
 @property  NSString *backingContactIdentifier
 @property  NSString *destinationId
 @property  NSString *isoCountryCode
 @property  NSArray *handles
 @property  long long mostRecentCallType
 @property  BOOL mostRecentCallWasMissed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *idsCanonicalDestinations

  // instance methods
  -[TUProxyAutocompleteResult isoCountryCode]
  -[TUProxyAutocompleteResult displayName]
  -[TUProxyAutocompleteResult .cxx_destruct]
  -[TUProxyAutocompleteResult init]
  -[TUProxyAutocompleteResult autocompleteResult]
  -[TUProxyAutocompleteResult callerId]
  -[TUProxyAutocompleteResult handles]
  -[TUProxyAutocompleteResult destinationId]
  -[TUProxyAutocompleteResult backingContact]
  -[TUProxyAutocompleteResult mostRecentCallType]
  -[TUProxyAutocompleteResult backingContactId]
  -[TUProxyAutocompleteResult backingContactIdentifier]
  -[TUProxyAutocompleteResult mostRecentCallWasMissed]
  -[TUProxyAutocompleteResult idsCanonicalDestinations]
  -[TUProxyAutocompleteResult setAutocompleteResult:]
  -[TUProxyAutocompleteResult initWithAutocompleteResult:]


TUConversationVirtualParticipant : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long identifier
 @property  NSString *pluginName

  // class methods
  +[TUConversationVirtualParticipant supportsSecureCoding]

  // instance methods
  -[TUConversationVirtualParticipant pluginName]
  -[TUConversationVirtualParticipant initWithCoder:]
  -[TUConversationVirtualParticipant .cxx_destruct]
  -[TUConversationVirtualParticipant isEqual:]
  -[TUConversationVirtualParticipant identifier]
  -[TUConversationVirtualParticipant copyWithZone:]
  -[TUConversationVirtualParticipant encodeWithCoder:]
  -[TUConversationVirtualParticipant isEqualToConversationVirtualParticipant:]
  -[TUConversationVirtualParticipant initWithIdentifier:pluginName:]


TUConversation : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSUUID *groupUUID
 @property  TUConversationLink *link
 @property  long long state
 @property  long long letMeInRequestState
 @property  BOOL hasReceivedLetMeInRequest
 @property  long long avcSessionToken
 @property  NSString *avcSessionIdentifier
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL locallyCreated
 @property  BOOL hasJoined
 @property  BOOL isAnyOtherAccountDeviceActive
 @property  BOOL video
 @property  BOOL pendingConversation
 @property  TUConversationMember *localMember
 @property  unsigned long localParticipantIdentifier
 @property  NSSet *remoteMembers
 @property  NSSet *pendingMembers
 @property  NSSet *kickedMembers
 @property  NSSet *rejectedMembers
 @property  NSSet *lightweightMembers
 @property  NSSet *otherInvitedHandles
 @property  BOOL ignoreLMIRequests
 @property  NSUUID *messagesGroupUUID
 @property  NSSet *participantHandles
 @property  NSSet *activeRemoteParticipants
 @property  NSSet *activeLightweightParticipants
 @property  TUHandle *initiator
 @property  NSString *messagesGroupName
 @property  long long maxVideoDecodesAllowed
 @property  NSObject *reportingHierarchyToken
 @property  NSObject *reportingHierarchySubToken
 @property  TUConversationReport *report
 @property  BOOL oneToOneModeEnabled
 @property  BOOL backedByGroupSession
 @property  NSSet *activitySessions
 @property  TUConversationActivitySession *stagedActivitySession
 @property  NSSet *virtualParticipants
 @property  NSSet *invitationPreferences
 @property  BOOL fromStorage
 @property  NSUUID *selectiveSharingSessionUUID
 @property  id conversationFailureContext
 @property  unsigned long avMode
 @property  TUConversationProvider *provider

  // class methods
  +[TUConversation numberFormatter]
  +[TUConversation supportsSecureCoding]
  +[TUConversation emptyConversationWithGroupUUID:]

  // instance methods
  -[TUConversation displayName]
  -[TUConversation UUID]
  -[TUConversation setInitiator:]
  -[TUConversation isVideo]
  -[TUConversation initWithCoder:]
  -[TUConversation bundleIdentifier]
  -[TUConversation setVideo:]
  -[TUConversation setFromStorage:]
  -[TUConversation setGroupUUID:]
  -[TUConversation .cxx_destruct]
  -[TUConversation initWithConversation:]
  -[TUConversation link]
  -[TUConversation setAudioEnabled:]
  -[TUConversation avMode]
  -[TUConversation report]
  -[TUConversation setLink:]
  -[TUConversation setVideoEnabled:]
  -[TUConversation setState:]
  -[TUConversation localMember]
  -[TUConversation isFromStorage]
  -[TUConversation isEqual:]
  -[TUConversation setPendingConversation:]
  -[TUConversation state]
  -[TUConversation participantHandles]
  -[TUConversation initiator]
  -[TUConversation activitySessions]
  -[TUConversation mutableCopyWithZone:]
  -[TUConversation handles]
  -[TUConversation provider]
  -[TUConversation copyWithZone:]
  -[TUConversation isAudioEnabled]
  -[TUConversation groupUUID]
  -[TUConversation encodeWithCoder:]
  -[TUConversation setReport:]
  -[TUConversation setUUID:]
  -[TUConversation pendingMembers]
  -[TUConversation activeRemoteParticipants]
  -[TUConversation isVideoEnabled]
  -[TUConversation isScreenEnabled]
  -[TUConversation setScreenEnabled:]
  -[TUConversation initWithUUID:groupUUID:]
  -[TUConversation setLetMeInRequestState:]
  -[TUConversation setParticipantHandles:]
  -[TUConversation setRemoteMembers:]
  -[TUConversation setPendingMembers:]
  -[TUConversation setKickedMembers:]
  -[TUConversation setRejectedMembers:]
  -[TUConversation setOtherInvitedHandles:]
  -[TUConversation setLightweightMembers:]
  -[TUConversation setActiveRemoteParticipants:]
  -[TUConversation setActiveLightweightParticipants:]
  -[TUConversation setActivitySessions:]
  -[TUConversation setVirtualParticipants:]
  -[TUConversation setInvitationPreferences:]
  -[TUConversation initWithUUID:groupUUID:provider:]
  -[TUConversation messagesGroupName]
  -[TUConversation remoteMembers]
  -[TUConversation messagesGroupUUID]
  -[TUConversation joinedActivitySession]
  -[TUConversation lightweightMembers]
  -[TUConversation invitationPreferences]
  -[TUConversation shouldShowInvitationOfStyles:forHandle:defaultValue:]
  -[TUConversation stagedActivitySession]
  -[TUConversation avcSessionIdentifier]
  -[TUConversation avcSessionToken]
  -[TUConversation isBackedByGroupSession]
  -[TUConversation hasJoined]
  -[TUConversation kickedMembers]
  -[TUConversation rejectedMembers]
  -[TUConversation otherInvitedHandles]
  -[TUConversation hasReceivedLetMeInRequest]
  -[TUConversation letMeInRequestState]
  -[TUConversation ignoreLMIRequests]
  -[TUConversation isLocallyCreated]
  -[TUConversation localParticipantIdentifier]
  -[TUConversation maxVideoDecodesAllowed]
  -[TUConversation isOneToOneModeEnabled]
  -[TUConversation virtualParticipants]
  -[TUConversation activeLightweightParticipants]
  -[TUConversation isAnyOtherAccountDeviceActive]
  -[TUConversation isEqualToConversation:]
  -[TUConversation messagesGroupPhotoData]
  -[TUConversation hasJoinedActivitySession]
  -[TUConversation isRepresentedByRemoteMembers:andLink:]
  -[TUConversation remoteParticipantForLightweightParticipantHandle:]
  -[TUConversation shouldShowInvitationUserNotificationForHandle:]
  -[TUConversation shouldShowInvitationRingingUIForHandle:]
  -[TUConversation shouldShowInvitationRingingUIForAnyHandleType]
  -[TUConversation contactNamesByHandleWithContactsDataSource:]
  -[TUConversation setHasReceivedLetMeInRequest:]
  -[TUConversation setLocallyCreated:]
  -[TUConversation setStagedActivitySession:]
  -[TUConversation setAvcSessionToken:]
  -[TUConversation setAvcSessionIdentifier:]
  -[TUConversation setHasJoined:]
  -[TUConversation setIsAnyOtherAccountDeviceActive:]
  -[TUConversation isPendingConversation]
  -[TUConversation setLocalMember:]
  -[TUConversation setLocalParticipantIdentifier:]
  -[TUConversation setIgnoreLMIRequests:]
  -[TUConversation setMessagesGroupUUID:]
  -[TUConversation setMessagesGroupName:]
  -[TUConversation setMaxVideoDecodesAllowed:]
  -[TUConversation reportingHierarchyToken]
  -[TUConversation setReportingHierarchyToken:]
  -[TUConversation reportingHierarchySubToken]
  -[TUConversation setReportingHierarchySubToken:]
  -[TUConversation setOneToOneModeEnabled:]
  -[TUConversation setBackedByGroupSession:]
  -[TUConversation selectiveSharingSessionUUID]
  -[TUConversation setSelectiveSharingSessionUUID:]
  -[TUConversation conversationFailureContext]
  -[TUConversation setConversationFailureContext:]


TUMutableConversation : TUConversation
 @property  TUConversationLink *link
 @property  long long state
 @property  long long letMeInRequestState
 @property  long long avcSessionToken
 @property  NSString *avcSessionIdentifier
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL locallyCreated
 @property  BOOL hasJoined
 @property  BOOL video
 @property  TUConversationMember *localMember
 @property  unsigned long localParticipantIdentifier
 @property  NSSet *remoteMembers
 @property  NSSet *pendingMembers
 @property  NSSet *rejectedMembers
 @property  NSSet *lightweightMembers
 @property  NSUUID *messagesGroupUUID
 @property  NSSet *participantHandles
 @property  NSSet *activeRemoteParticipants
 @property  TUHandle *initiator
 @property  NSString *messagesGroupName
 @property  long long maxVideoDecodesAllowed
 @property  NSObject *reportingHierarchyToken
 @property  NSObject *reportingHierarchySubToken
 @property  TUConversationReport *report
 @property  BOOL oneToOneModeEnabled
 @property  BOOL backedByGroupSession
 @property  NSSet *activitySessions
 @property  NSSet *virtualParticipants
 @property  NSSet *invitationPreferences


TUCallContainer : NSObject <TUCallContainerPrivate, TUCallContainer>
 @property  NSArray *calls
 @property  NSArray *_allCalls
 @property  TUCall *displayedCall
 @property  TUCall *conferenceCall
 @property  TUCall *frontmostCall
 @property  TUCall *frontmostAudioOrVideoCall
 @property  BOOL existingCallsHaveMultipleProviders
 @property  NSArray *currentCalls
 @property  NSArray *currentVideoCalls
 @property  NSArray *currentAudioAndVideoCalls
 @property  NSArray *incomingCalls
 @property  NSArray *displayedCalls
 @property  NSArray *displayedAudioAndVideoCalls
 @property  NSArray *conferenceParticipantCalls
 @property  NSArray *callsHostedElsewhere
 @property  NSArray *callsWithAnEndpointElsewhere
 @property  NSArray *callsHostedOrAnEndpointElsewhere
 @property  NSArray *callsOnDefaultPairedDevice
 @property  TUCall *incomingCall
 @property  TUCall *incomingVideoCall
 @property  TUCall *activeVideoCall
 @property  TUCall *currentVideoCall
 @property  unsigned long currentCallCount
 @property  unsigned long currentVideoCallCount
 @property  unsigned long currentAudioAndVideoCallCount
 @property  unsigned long callCountOnDefaultPairedDevice
 @property  BOOL hasCurrentCalls
 @property  BOOL hasCurrentAudioCalls
 @property  BOOL hasCurrentVideoCalls
 @property  BOOL anyCallIsHostedOnCurrentDevice
 @property  BOOL anyCallIsEndpointOnCurrentDevice
 @property  NSArray *currentCallGroups
 @property  NSArray *currentAudioAndVideoCallGroups
 @property  NSArray *callGroupsOnDefaultPairedDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUCallContainer currentAudioAndVideoCalls]
  -[TUCallContainer activeVideoCall]
  -[TUCallContainer currentCallGroups]
  -[TUCallContainer hasCurrentVideoCalls]
  -[TUCallContainer currentCallCount]
  -[TUCallContainer existingCallsHaveMultipleProviders]
  -[TUCallContainer currentCalls]
  -[TUCallContainer callsOnDefaultPairedDevice]
  -[TUCallContainer displayedCalls]
  -[TUCallContainer callGroupsOnDefaultPairedDevice]
  -[TUCallContainer frontmostAudioOrVideoCall]
  -[TUCallContainer conferenceParticipantCalls]
  -[TUCallContainer callsHostedElsewhere]
  -[TUCallContainer callPassingTest:]
  -[TUCallContainer currentVideoCalls]
  -[TUCallContainer _allCalls]
  -[TUCallContainer anyCallIsHostedOnCurrentDevice]
  -[TUCallContainer hasCurrentCalls]
  -[TUCallContainer currentVideoCall]
  -[TUCallContainer audioOrVideoCallWithStatus:]
  -[TUCallContainer anyCallPassesTest:]
  -[TUCallContainer currentAudioAndVideoCallGroups]
  -[TUCallContainer hasCurrentAudioCalls]
  -[TUCallContainer currentVideoCallCount]
  -[TUCallContainer callPassingTest:sortedUsingComparator:]
  -[TUCallContainer conferenceCall]
  -[TUCallContainer allCallsPassTest:]
  -[TUCallContainer currentAudioAndVideoCallCount]
  -[TUCallContainer callsPassingTest:]
  -[TUCallContainer incomingVideoCall]
  -[TUCallContainer callsWithGroupUUID:]
  -[TUCallContainer displayedAudioAndVideoCalls]
  -[TUCallContainer anyCallIsEndpointOnCurrentDevice]
  -[TUCallContainer callsWithAnEndpointElsewhere]
  -[TUCallContainer callWithUniqueProxyIdentifier:]
  -[TUCallContainer initWithCalls:]
  -[TUCallContainer videoCallWithStatus:]
  -[TUCallContainer allCallsAreOfService:]
  -[TUCallContainer callWithStatus:]
  -[TUCallContainer frontmostCall]
  -[TUCallContainer callsWithStatus:]
  -[TUCallContainer displayedCallFromCalls:]
  -[TUCallContainer incomingCalls]
  -[TUCallContainer incomingCall]
  -[TUCallContainer callWithCallUUID:]
  -[TUCallContainer displayedCall]
  -[TUCallContainer audioAndVideoCallsWithStatus:]
  -[TUCallContainer countOfCallsPassingTest:]
  -[TUCallContainer callsHostedOrAnEndpointElsewhere]
  -[TUCallContainer callCountOnDefaultPairedDevice]
  -[TUCallContainer calls]
  -[TUCallContainer callPassingTest:withOptions:]
  -[TUCallContainer enumerateCallsInvokingBlock:forCallsPassingTest:]
  -[TUCallContainer setCalls:]
  -[TUCallContainer .cxx_destruct]
  -[TUCallContainer init]
  -[TUCallContainer enumerateCallsWithOptions:invokingBlock:forCallsPassingTest:]
  -[TUCallContainer _callGroupsFromCalls:]


TUMutableCallContainer : TUCallContainer
 @property  NSArray *calls


TUCallScreenShareAttributes : NSObject <TUScreenShareAttributes>
 @property  long long deviceFamily
 @property  long long style
 @property  NSNumber *displayScale
 @property  NSNumber *scaleFactor
 @property  NSNumber *frameRate
 @property  NSNumber *displayID
 @property  NSValue *originalResolution
 @property  BOOL windowed
 @property  NSUUID *windowUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCallScreenShareAttributes defaultAttributes]
  +[TUCallScreenShareAttributes supportsSecureCoding]
  +[TUCallScreenShareAttributes defaultScaleFactor]
  +[TUCallScreenShareAttributes defaultDisplayScale]
  +[TUCallScreenShareAttributes currentDeviceFamily]

  // instance methods
  -[TUCallScreenShareAttributes scaleFactor]
  -[TUCallScreenShareAttributes displayID]
  -[TUCallScreenShareAttributes deviceFamily]
  -[TUCallScreenShareAttributes setScaleFactor:]
  -[TUCallScreenShareAttributes initWithCoder:]
  -[TUCallScreenShareAttributes displayScale]
  -[TUCallScreenShareAttributes .cxx_destruct]
  -[TUCallScreenShareAttributes setStyle:]
  -[TUCallScreenShareAttributes setDisplayScale:]
  -[TUCallScreenShareAttributes setFrameRate:]
  -[TUCallScreenShareAttributes setDisplayID:]
  -[TUCallScreenShareAttributes isEqual:]
  -[TUCallScreenShareAttributes frameRate]
  -[TUCallScreenShareAttributes style]
  -[TUCallScreenShareAttributes encodeWithCoder:]
  -[TUCallScreenShareAttributes windowUUID]
  -[TUCallScreenShareAttributes setDeviceFamily:]
  -[TUCallScreenShareAttributes setOriginalResolution:]
  -[TUCallScreenShareAttributes isWindowed]
  -[TUCallScreenShareAttributes originalResolution]
  -[TUCallScreenShareAttributes isEqualToScreenShareAttributes:]
  -[TUCallScreenShareAttributes isSignificantChangeFromAttributes:]
  -[TUCallScreenShareAttributes setWindowed:]
  -[TUCallScreenShareAttributes setWindowUUID:]


TUNeighborhoodActivityConduit : NSObject <TUNeighborhoodActivityConduitXPCClientDelegate>
 @property  NSMapTable *delegates
 @property  NSMutableSet *nearbyTVs
 @property  TUNearbyDeviceHandle *activeSplitSessionTV
 @property  TUNeighborhoodActivityConduitXPCClient *xpcClient
 @property  TUConversationManager *conversationManager
 @property  unsigned long stateHandle
 @property  <TUNeighborhoodActivityConduitApprovalDelegate> *approvalDelegate
 @property  NSDictionary *nearbyTVDevices
 @property  NSSet *nearbyTVDeviceHandles
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUNeighborhoodActivityConduit removeDelegate:]
  -[TUNeighborhoodActivityConduit addDelegate:queue:]
  -[TUNeighborhoodActivityConduit setDelegates:]
  -[TUNeighborhoodActivityConduit connectionEstablishedForClient:]
  -[TUNeighborhoodActivityConduit approveSplitSessionForConversation:device:pullContext:completion:]
  -[TUNeighborhoodActivityConduit tvDeviceAppeared:]
  -[TUNeighborhoodActivityConduit setStateHandle:]
  -[TUNeighborhoodActivityConduit stateHandle]
  -[TUNeighborhoodActivityConduit .cxx_destruct]
  -[TUNeighborhoodActivityConduit delegates]
  -[TUNeighborhoodActivityConduit _requestInitialState]
  -[TUNeighborhoodActivityConduit nearbyTVDeviceHandles]
  -[TUNeighborhoodActivityConduit xpcClient]
  -[TUNeighborhoodActivityConduit tvDeviceDisappeared:]
  -[TUNeighborhoodActivityConduit cancelSplitSessionApproval]
  -[TUNeighborhoodActivityConduit initWithConversationManager:]
  -[TUNeighborhoodActivityConduit _grouped:forEachDelegate:]
  -[TUNeighborhoodActivityConduit nearbyTVs]
  -[TUNeighborhoodActivityConduit _forEachDelegate:]
  -[TUNeighborhoodActivityConduit nearbyTVDevices]
  -[TUNeighborhoodActivityConduit splitSessionStarted:]
  -[TUNeighborhoodActivityConduit inviteTVDevice:toConversation:completion:]
  -[TUNeighborhoodActivityConduit _osStateDictionary]
  -[TUNeighborhoodActivityConduit splitSessionEnded:]
  -[TUNeighborhoodActivityConduit setApprovalDelegate:]
  -[TUNeighborhoodActivityConduit dealloc]
  -[TUNeighborhoodActivityConduit setActiveSplitSessionTV:]
  -[TUNeighborhoodActivityConduit conversationManager]
  -[TUNeighborhoodActivityConduit activeSplitSessionTV]
  -[TUNeighborhoodActivityConduit approvalDelegate]
  -[TUNeighborhoodActivityConduit disconnectTVDevice:completion:]
  -[TUNeighborhoodActivityConduit addDelegate:]


TUAudioSystemController : TUAudioController
 @property  <TUAudioSystemControllerDelegate> *delegate
 @property  float activeCategoryVolume
 @property  BOOL uplinkMuted
 @property  BOOL downlinkMuted
 @property  BOOL tty
 @property  NSDictionary *pickedRouteAttribute
 @property  NSArray *bestGuessPickableRoutesForAnyCall
 @property  NSArray *pickableRoutesForTTY
 @property  BOOL otherSessionsRequestNoRingtoneInterruption

  // class methods
  +[TUAudioSystemController sharedSystemController]
  +[TUAudioSystemController sharedAudioSystemController]
  +[TUAudioSystemController filteredPickableRoutesFromPickableRoutes:]
  +[TUAudioSystemController isPhoneCallAudioCategory:]
  +[TUAudioSystemController sourceIdentifierForRouteID:]

  // instance methods
  -[TUAudioSystemController _mediaServicesWereReset:]
  -[TUAudioSystemController isTTY]
  -[TUAudioSystemController _handleUplinkMuteDidChangeNotification:]
  -[TUAudioSystemController setUplinkMuted:]
  -[TUAudioSystemController setDownlinkMuted:]
  -[TUAudioSystemController activeCategoryVolume]
  -[TUAudioSystemController .cxx_destruct]
  -[TUAudioSystemController _handleDownlinkMuteDidChangeNotification:]
  -[TUAudioSystemController _pickableRoutesForPlayAndRecordVoiceWithForceNewRequest:]
  -[TUAudioSystemController shouldSuppressCallUsingRoute:]
  -[TUAudioSystemController pickableRoutesForTTY]
  -[TUAudioSystemController switchBluetoothAudioFormats]
  -[TUAudioSystemController _pickableRoutesForPhoneCallWithForceNewRequest:]
  -[TUAudioSystemController setDelegate:]
  -[TUAudioSystemController init]
  -[TUAudioSystemController pickableRouteWithUniqueIdentifier:]
  -[TUAudioSystemController _pickableRoutesForTTYWithForceNewRequest:]
  -[TUAudioSystemController isUplinkMuted]
  -[TUAudioSystemController getPickableRoutesForCategory:mode:completion:]
  -[TUAudioSystemController pickableRoutesForCategory:andMode:]
  -[TUAudioSystemController isDownlinkMuted]
  -[TUAudioSystemController setActiveCategoryVolume:]
  -[TUAudioSystemController _loadCurrentPickableRoutesWithCompletion:]
  -[TUAudioSystemController otherSessionsRequestNoRingtoneInterruption]
  -[TUAudioSystemController _getPickableRoutesForCategory:mode:onlyKnownCombinations:completion:]
  -[TUAudioSystemController _pickableRoutesForPlayAndRecordRemoteVoiceWithForceNewRequest:]
  -[TUAudioSystemController delegate]
  -[TUAudioSystemController pickableRoutesForActiveCall]
  -[TUAudioSystemController bestGuessPickableRoutesForAnyCall]
  -[TUAudioSystemController _updateCachedState]
  -[TUAudioSystemController pickedRouteAttribute]
  -[TUAudioSystemController _pickableRoutesForVoiceMailWithForceNewRequest:]
  -[TUAudioSystemController dealloc]
  -[TUAudioSystemController pickRoute:error:]
  -[TUAudioSystemController _handleVolumeDidChangeNotification:]
  -[TUAudioSystemController _pickableRoutesForPlayAndRecordVideoWithForceNewRequest:]
  -[TUAudioSystemController _handlePickableRoutesDidChangeNotification:]
  -[TUAudioSystemController currentlyPickedRouteIdForCategory:andMode:]


TUCallCapabilitiesXPCClient : NSObject <TUCallCapabilitiesXPCClient, TUCallCapabilitiesXPCServerActions>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  int token
 @property  NSMapTable *delegateToQueue
 @property  TUCallCapabilitiesState *state
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCallCapabilitiesXPCClient setSynchronousServer:]
  +[TUCallCapabilitiesXPCClient callCapabilitiesServerXPCInterface]
  +[TUCallCapabilitiesXPCClient synchronousServer]
  +[TUCallCapabilitiesXPCClient callCapabilitiesClientXPCInterface]
  +[TUCallCapabilitiesXPCClient asynchronousServer]
  +[TUCallCapabilitiesXPCClient setAsynchronousServer:]

  // instance methods
  -[TUCallCapabilitiesXPCClient removeDelegate:]
  -[TUCallCapabilitiesXPCClient synchronousServerWithErrorHandler:]
  -[TUCallCapabilitiesXPCClient addDelegate:queue:]
  -[TUCallCapabilitiesXPCClient setXpcConnection:]
  -[TUCallCapabilitiesXPCClient xpcConnection]
  -[TUCallCapabilitiesXPCClient setRelayCallingEnabled:forDeviceWithID:]
  -[TUCallCapabilitiesXPCClient performDelegateCallbackBlock:]
  -[TUCallCapabilitiesXPCClient endEmergencyCallbackMode]
  -[TUCallCapabilitiesXPCClient cancelPinRequestFromPrimaryDevice]
  -[TUCallCapabilitiesXPCClient setThumperCallingEnabled:forSenderIdentityWithUUID:]
  -[TUCallCapabilitiesXPCClient requestPinFromPrimaryDevice]
  -[TUCallCapabilitiesXPCClient .cxx_destruct]
  -[TUCallCapabilitiesXPCClient setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:]
  -[TUCallCapabilitiesXPCClient _retrieveState]
  -[TUCallCapabilitiesXPCClient asynchronousServerWithErrorHandler:]
  -[TUCallCapabilitiesXPCClient invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityWithUUID:]
  -[TUCallCapabilitiesXPCClient setState:]
  -[TUCallCapabilitiesXPCClient capabilityStateUpdated:]
  -[TUCallCapabilitiesXPCClient init]
  -[TUCallCapabilitiesXPCClient handleServerDisconnect]
  -[TUCallCapabilitiesXPCClient delegateToQueue]
  -[TUCallCapabilitiesXPCClient state]
  -[TUCallCapabilitiesXPCClient token]
  -[TUCallCapabilitiesXPCClient queue]
  -[TUCallCapabilitiesXPCClient setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:]
  -[TUCallCapabilitiesXPCClient dealloc]
  -[TUCallCapabilitiesXPCClient setWiFiCallingEnabled:forSenderIdentityWithUUID:]
  -[TUCallCapabilitiesXPCClient invalidate]
  -[TUCallCapabilitiesXPCClient setRelayCallingEnabled:]
  -[TUCallCapabilitiesXPCClient asynchronousServer]
  -[TUCallCapabilitiesXPCClient _updateState:]
  -[TUCallCapabilitiesXPCClient invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityWithUUID:]
  -[TUCallCapabilitiesXPCClient setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:]
  -[TUCallCapabilitiesXPCClient setVoLTECallingEnabled:forSenderIdentityWithUUID:]


TUConversationMember : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *idsFromID
 @property  NSString *idsDestination
 @property  NSString *nickname
 @property  BOOL joinedFromLetMeIn
 @property  BOOL isOtherInvitedHandle
 @property  long long validationSource
 @property  NSArray *idsDestinations
 @property  TUHandle *handle
 @property  BOOL validated
 @property  BOOL isSplitSessionMember
 @property  BOOL isLightweightMember
 @property  NSDate *dateReceivedLetMeIn
 @property  TUHandle *splitSessionPrimary
 @property  TUHandle *lightweightPrimary
 @property  unsigned long lightweightPrimaryParticipantIdentifier
 @property  NSSet *handles

  // class methods
  +[TUConversationMember supportsSecureCoding]

  // instance methods
  -[TUConversationMember nickname]
  -[TUConversationMember initWithContact:]
  -[TUConversationMember initWithCoder:]
  -[TUConversationMember initWithHandle:]
  -[TUConversationMember .cxx_destruct]
  -[TUConversationMember isEqual:]
  -[TUConversationMember pseudonym]
  -[TUConversationMember handle]
  -[TUConversationMember initWithDestinations:]
  -[TUConversationMember setNickname:]
  -[TUConversationMember initWithDestination:]
  -[TUConversationMember idsDestination]
  -[TUConversationMember handles]
  -[TUConversationMember copyWithZone:]
  -[TUConversationMember initWithHandles:]
  -[TUConversationMember encodeWithCoder:]
  -[TUConversationMember isLightweightMember]
  -[TUConversationMember lightweightPrimary]
  -[TUConversationMember initWithHandle:nickname:joinedFromLetMeIn:]
  -[TUConversationMember initWithContact:additionalHandles:]
  -[TUConversationMember isValidated]
  -[TUConversationMember lightweightPrimaryParticipantIdentifier]
  -[TUConversationMember joinedFromLetMeIn]
  -[TUConversationMember dateReceivedLetMeIn]
  -[TUConversationMember isOtherInvitedHandle]
  -[TUConversationMember setIsLightweightMember:]
  -[TUConversationMember setLightweightPrimary:]
  -[TUConversationMember validationSource]
  -[TUConversationMember isEqualToMember:]
  -[TUConversationMember setIsOtherInvitedHandle:]
  -[TUConversationMember setDateReceivedLetMeIn:]
  -[TUConversationMember setLightweightPrimaryParticipantIdentifier:]
  -[TUConversationMember setValidationSource:]
  -[TUConversationMember initWithHandle:nickname:]
  -[TUConversationMember idsFromID]
  -[TUConversationMember idsDestinations]
  -[TUConversationMember representsSameMemberAs:]
  -[TUConversationMember setIsSplitSessionMember:]
  -[TUConversationMember isSplitSessionMember]
  -[TUConversationMember setSplitSessionPrimary:]
  -[TUConversationMember splitSessionPrimary]
  -[TUConversationMember setJoinedFromLetMeIn:]


TUNotifyObserver : NSObject <TUNotifyObserver>
 @property  {os_unfair_lock_s=I} lock
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *notificationName
 @property  int token
 @property  @? callback
 @property  unsigned long state
 @property  BOOL observing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUNotifyObserver setToken:]
  -[TUNotifyObserver notificationName]
  -[TUNotifyObserver setCallback:]
  -[TUNotifyObserver callback]
  -[TUNotifyObserver .cxx_destruct]
  -[TUNotifyObserver beginObserving]
  -[TUNotifyObserver isObserving]
  -[TUNotifyObserver endObserving]
  -[TUNotifyObserver setNotificationName:]
  -[TUNotifyObserver state]
  -[TUNotifyObserver token]
  -[TUNotifyObserver queue]
  -[TUNotifyObserver dealloc]
  -[TUNotifyObserver lock]
  -[TUNotifyObserver initWithNotificationName:queue:callback:]
  -[TUNotifyObserver _endObserving]
  -[TUNotifyObserver initWithNotificationName:queue:]


TUContactsDataProviderResult : NSObject
 @property  NSArray *contacts
 @property  NSString *localizedName
 @property  NSString *companyName
 @property  NSString *contactLabel
 @property  int legacyAddressBookIdentifier

  // instance methods
  -[TUContactsDataProviderResult localizedName]
  -[TUContactsDataProviderResult setLocalizedName:]
  -[TUContactsDataProviderResult contactLabel]
  -[TUContactsDataProviderResult setContactLabel:]
  -[TUContactsDataProviderResult .cxx_destruct]
  -[TUContactsDataProviderResult setCompanyName:]
  -[TUContactsDataProviderResult contacts]
  -[TUContactsDataProviderResult setContacts:]
  -[TUContactsDataProviderResult companyName]
  -[TUContactsDataProviderResult legacyAddressBookIdentifier]
  -[TUContactsDataProviderResult setLegacyAddressBookIdentifier:]


TUContactsDataProvider : NSObject
 @property  BOOL useAsianNameFormat
 @property  @? localeSupportsPrefixHintForFetchRequest
 @property  <TUContactsDataSource> *contactsDataSource
 @property  TUContactsDataProviderAppleCareHandles *appleCareHandles

  // class methods
  +[TUContactsDataProvider numberFormatter]
  +[TUContactsDataProvider asianLocaleCountryCodes]
  +[TUContactsDataProvider unsupportedLocalesForPrefixHint]
  +[TUContactsDataProvider defaultContactKeyDescriptors]
  +[TUContactsDataProvider keysByCombiningDefaultKeysWithKeysToFetch:]

  // instance methods
  -[TUContactsDataProvider .cxx_destruct]
  -[TUContactsDataProvider init]
  -[TUContactsDataProvider executeFetchRequest:]
  -[TUContactsDataProvider appleCareHandles]
  -[TUContactsDataProvider initWithContactsDataSource:]
  -[TUContactsDataProvider ISOCountryCodeForHandle:fetchRequest:]
  -[TUContactsDataProvider contactsForHandle:countryCode:keysToFetch:prefixHint:]
  -[TUContactsDataProvider compositeNameForContacts:]
  -[TUContactsDataProvider formattedNameForHandle:countryCode:]
  -[TUContactsDataProvider contactWithIdentifier:keysToFetch:]
  -[TUContactsDataProvider unifiedContactsForFetchRequest:]
  -[TUContactsDataProvider personIDForContact:]
  -[TUContactsDataProvider contactLabelForContacts:matchingHandle:countryCode:]
  -[TUContactsDataProvider compositeNameForFetchRequest:]
  -[TUContactsDataProvider labeledHandlesForContacts:]
  -[TUContactsDataProvider contactsDataSource]
  -[TUContactsDataProvider prefixHintForFetchRequest:]
  -[TUContactsDataProvider useAsianNameFormat]
  -[TUContactsDataProvider localizedCompositeNameForContact:secondContact:]
  -[TUContactsDataProvider localeSupportsPrefixHintForFetchRequest]
  -[TUContactsDataProvider labeledHandlesForContactWithIdentifier:]
  -[TUContactsDataProvider setUseAsianNameFormat:]
  -[TUContactsDataProvider setLocaleSupportsPrefixHintForFetchRequest:]
  -[TUContactsDataProvider setAppleCareHandles:]


TUJoinConversationRequest : NSObject <TUFilteredRequest, NSCopying, NSSecureCoding>
 @property  TUHandle *callerID
 @property  NSUUID *messagesGroupUUID
 @property  NSString *messagesGroupName
 @property  BOOL showUIPrompt
 @property  BOOL uplinkMuted
 @property  BOOL video
 @property  BOOL sendLetMeInRequest
 @property  BOOL joiningConversationWithLink
 @property  NSSet *invitationPreferences
 @property  NSDictionary *notificationStylesByHandleType
 @property  NSSet *remoteMembers
 @property  NSSet *otherInvitedHandles
 @property  NSString *audioSourceIdentifier
 @property  NSUUID *UUID
 @property  BOOL videoEnabled
 @property  BOOL shouldSuppressInCallUI
 @property  BOOL wantsStagingArea
 @property  TUConversationLink *conversationLink
 @property  TUConversationActivity *activity
 @property  BOOL shouldLaunchBackgroundInCallUI
 @property  NSURL *URL
 @property  TUConversationProvider *provider
 @property  int originatingUIType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUJoinConversationRequest supportsSecureCoding]
  +[TUJoinConversationRequest sanitizedMembersFromMembers:]
  +[TUJoinConversationRequest remoteMembersFromURLComponents:]
  +[TUJoinConversationRequest otherInvitedHandlesFromURLComponents:]
  +[TUJoinConversationRequest conversationLinkFromURLComponents:]
  +[TUJoinConversationRequest joiningConversationWithLinkFromURLComponents:]
  +[TUJoinConversationRequest invitationPreferencesFromURLComponents:]
  +[TUJoinConversationRequest callerIDFromURLComponents:]
  +[TUJoinConversationRequest videoEnabledFromURLComponents:]
  +[TUJoinConversationRequest shouldSuppressInCallUIFromURLComponents:]
  +[TUJoinConversationRequest wantsStagingAreaFromURLComponents:]
  +[TUJoinConversationRequest messagesGroupUUIDFromURLComponents:]
  +[TUJoinConversationRequest messagesGroupNameFromURLComponents:]
  +[TUJoinConversationRequest showUIPromptFromURLComponents:]
  +[TUJoinConversationRequest videoFromURLComponents:]
  +[TUJoinConversationRequest providerFromURLComponents:]
  +[TUJoinConversationRequest audioSourceIdentifierFromURLComponents:]
  +[TUJoinConversationRequest sendLetMeInRequestFromURLComponents:]

  // instance methods
  -[TUJoinConversationRequest setProvider:]
  -[TUJoinConversationRequest queryItems]
  -[TUJoinConversationRequest setActivity:]
  -[TUJoinConversationRequest UUID]
  -[TUJoinConversationRequest isVideo]
  -[TUJoinConversationRequest setCallerID:]
  -[TUJoinConversationRequest initWithCoder:]
  -[TUJoinConversationRequest setUplinkMuted:]
  -[TUJoinConversationRequest bundleIdentifier]
  -[TUJoinConversationRequest setVideo:]
  -[TUJoinConversationRequest callerID]
  -[TUJoinConversationRequest .cxx_destruct]
  -[TUJoinConversationRequest initWithConversation:]
  -[TUJoinConversationRequest setVideoEnabled:]
  -[TUJoinConversationRequest setAudioSourceIdentifier:]
  -[TUJoinConversationRequest setShowUIPrompt:]
  -[TUJoinConversationRequest isUplinkMuted]
  -[TUJoinConversationRequest activity]
  -[TUJoinConversationRequest URL]
  -[TUJoinConversationRequest initWithUserActivity:]
  -[TUJoinConversationRequest handles]
  -[TUJoinConversationRequest provider]
  -[TUJoinConversationRequest copyWithZone:]
  -[TUJoinConversationRequest encodeWithCoder:]
  -[TUJoinConversationRequest setUUID:]
  -[TUJoinConversationRequest initWithURL:]
  -[TUJoinConversationRequest isVideoEnabled]
  -[TUJoinConversationRequest setInvitationPreferences:]
  -[TUJoinConversationRequest messagesGroupName]
  -[TUJoinConversationRequest remoteMembers]
  -[TUJoinConversationRequest messagesGroupUUID]
  -[TUJoinConversationRequest invitationPreferences]
  -[TUJoinConversationRequest otherInvitedHandles]
  -[TUJoinConversationRequest contactNamesByHandleWithContactsDataSource:]
  -[TUJoinConversationRequest setMessagesGroupUUID:]
  -[TUJoinConversationRequest setMessagesGroupName:]
  -[TUJoinConversationRequest initWithRemoteMembers:otherInvitedHandles:]
  -[TUJoinConversationRequest initWithConversationLink:otherInvitedHandles:remoteMembers:sendLetMeInRequest:]
  -[TUJoinConversationRequest initWithRemoteMembers:]
  -[TUJoinConversationRequest conversationMembersForIntent:]
  -[TUJoinConversationRequest shouldSuppressInCallUI]
  -[TUJoinConversationRequest wantsStagingArea]
  -[TUJoinConversationRequest showUIPrompt]
  -[TUJoinConversationRequest sendLetMeInRequest]
  -[TUJoinConversationRequest isJoiningConversationWithLink]
  -[TUJoinConversationRequest conversationLink]
  -[TUJoinConversationRequest audioSourceIdentifier]
  -[TUJoinConversationRequest remoteMembersQueryItem]
  -[TUJoinConversationRequest otherInvitedHandlesQueryItem]
  -[TUJoinConversationRequest callerIDQueryItem]
  -[TUJoinConversationRequest videoEnabledQueryItem]
  -[TUJoinConversationRequest shouldSuppressInCallUIQueryItem]
  -[TUJoinConversationRequest wantsStagingAreaQueryItem]
  -[TUJoinConversationRequest messagesGroupUUIDQueryItem]
  -[TUJoinConversationRequest messagesGroupNameQueryItem]
  -[TUJoinConversationRequest showUIPromptQueryItem]
  -[TUJoinConversationRequest sendLetMeInRequestQueryItem]
  -[TUJoinConversationRequest joiningConversationWithLinkQueryItem]
  -[TUJoinConversationRequest invitationPreferencesQueryItem]
  -[TUJoinConversationRequest videoQueryItem]
  -[TUJoinConversationRequest providerQueryItem]
  -[TUJoinConversationRequest audioSourceIdentifierQueryItem]
  -[TUJoinConversationRequest conversationLinkQueryItem]
  -[TUJoinConversationRequest setShouldSuppressInCallUI:]
  -[TUJoinConversationRequest setWantsStagingArea:]
  -[TUJoinConversationRequest setConversationLink:]
  -[TUJoinConversationRequest setSendLetMeInRequest:]
  -[TUJoinConversationRequest setJoiningConversationWithLink:]
  -[TUJoinConversationRequest shouldLaunchBackgroundInCallUI]
  -[TUJoinConversationRequest initWithConversationLink:otherInvitedHandles:sendLetMeInRequest:]
  -[TUJoinConversationRequest initWithGroupUUID:localParticipantHandle:remoteParticipantHandles:]
  -[TUJoinConversationRequest notificationStylesByHandleType]
  -[TUJoinConversationRequest userActivityUsingStartCallIntents]
  -[TUJoinConversationRequest setShouldLaunchBackgroundInCallUI:]
  -[TUJoinConversationRequest originatingUIType]
  -[TUJoinConversationRequest setOriginatingUIType:]


TUDelegateController : NSObject
 @property  {os_unfair_lock_s=I} delegateLock
 @property  NSMapTable *delegateToQueue

  // instance methods
  -[TUDelegateController removeDelegate:]
  -[TUDelegateController addDelegate:queue:]
  -[TUDelegateController .cxx_destruct]
  -[TUDelegateController init]
  -[TUDelegateController enumerateDelegatesUsingBlock:]
  -[TUDelegateController delegateToQueue]
  -[TUDelegateController delegateLock]


TUMomentDescriptor : NSObject <NSSecureCoding>
 @property  NSURL *photoViewingAppURL
 @property  NSString *photosAssetIdentifier

  // class methods
  +[TUMomentDescriptor supportsSecureCoding]

  // instance methods
  -[TUMomentDescriptor initWithCoder:]
  -[TUMomentDescriptor .cxx_destruct]
  -[TUMomentDescriptor init]
  -[TUMomentDescriptor encodeWithCoder:]
  -[TUMomentDescriptor photosAssetIdentifier]
  -[TUMomentDescriptor initWithPhotosAppAssetIdentifier:]
  -[TUMomentDescriptor photoViewingAppURL]


TUAnswerRequest : NSObject <NSSecureCoding, TUCallRequest, TUVideoRequest>
 @property  NSDate *dateAnswered
 @property  BOOL allowBluetoothAnswerWithoutDowngrade
 @property  NSString *sourceIdentifier
 @property  IDSDestination *endpointIDSDestination
 @property  NSString *endpointRapportMediaSystemIdentifier
 @property  NSString *endpointRapportEffectiveIdentifier
 @property  BOOL wantsHoldMusic
 @property  BOOL pauseVideoToStart
 @property  BOOL downgradeToAudio
 @property  long long behavior
 @property  NSString *uniqueProxyIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGSize=dd} localLandscapeAspectRatio
 @property  {CGSize=dd} localPortraitAspectRatio

  // class methods
  +[TUAnswerRequest supportsSecureCoding]

  // instance methods
  -[TUAnswerRequest initWithCoder:]
  -[TUAnswerRequest setSourceIdentifier:]
  -[TUAnswerRequest sourceIdentifier]
  -[TUAnswerRequest .cxx_destruct]
  -[TUAnswerRequest localLandscapeAspectRatio]
  -[TUAnswerRequest localPortraitAspectRatio]
  -[TUAnswerRequest init]
  -[TUAnswerRequest setBehavior:]
  -[TUAnswerRequest behavior]
  -[TUAnswerRequest setLocalPortraitAspectRatio:]
  -[TUAnswerRequest setLocalLandscapeAspectRatio:]
  -[TUAnswerRequest encodeWithCoder:]
  -[TUAnswerRequest uniqueProxyIdentifier]
  -[TUAnswerRequest initWithCall:]
  -[TUAnswerRequest initWithUniqueProxyIdentifier:]
  -[TUAnswerRequest wantsHoldMusic]
  -[TUAnswerRequest pauseVideoToStart]
  -[TUAnswerRequest downgradeToAudio]
  -[TUAnswerRequest dateAnswered]
  -[TUAnswerRequest allowBluetoothAnswerWithoutDowngrade]
  -[TUAnswerRequest endpointIDSDestination]
  -[TUAnswerRequest endpointRapportMediaSystemIdentifier]
  -[TUAnswerRequest endpointRapportEffectiveIdentifier]
  -[TUAnswerRequest setUniqueProxyIdentifier:]
  -[TUAnswerRequest setEndpointIDSDestination:]
  -[TUAnswerRequest setEndpointRapportMediaSystemIdentifier:]
  -[TUAnswerRequest setEndpointRapportEffectiveIdentifier:]
  -[TUAnswerRequest setWantsHoldMusic:]
  -[TUAnswerRequest setPauseVideoToStart:]
  -[TUAnswerRequest setDowngradeToAudio:]
  -[TUAnswerRequest setDateAnswered:]
  -[TUAnswerRequest setAllowBluetoothAnswerWithoutDowngrade:]


TUMetadataClientController : NSObject
 @property  TUMetadataCache *metadataCache

  // class methods
  +[TUMetadataClientController sharedInstance]

  // instance methods
  -[TUMetadataClientController updateMetadataForDestinationID:]
  -[TUMetadataClientController updateMetadataForRecentCalls:]
  -[TUMetadataClientController metadataCache]
  -[TUMetadataClientController locationForSearchItem:]
  -[TUMetadataClientController _metadataDestinationIdForSearchItem:]
  -[TUMetadataClientController .cxx_destruct]
  -[TUMetadataClientController suggestionForDestinationID:]
  -[TUMetadataClientController init]
  -[TUMetadataClientController updateMetadataForCall:]
  -[TUMetadataClientController setMetadataCache:]
  -[TUMetadataClientController suggestionForSearchItem:]
  -[TUMetadataClientController directoryLabelForDestinationID:]
  -[TUMetadataClientController locationForDestinationID:]
  -[TUMetadataClientController directoryLabelForSearchItem:]


TUGroupTitle : NSObject <TUSearchResult>
 @property  NSString *value
 @property  NSString *displayName
 @property  NSString *callerId
 @property  CNContact *backingContact
 @property  NSString *backingContactId
 @property  NSString *backingContactIdentifier
 @property  NSString *destinationId
 @property  NSString *isoCountryCode
 @property  NSArray *handles
 @property  long long mostRecentCallType
 @property  BOOL mostRecentCallWasMissed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *idsCanonicalDestinations

  // instance methods
  -[TUGroupTitle isoCountryCode]
  -[TUGroupTitle displayName]
  -[TUGroupTitle .cxx_destruct]
  -[TUGroupTitle initWithString:]
  -[TUGroupTitle setValue:]
  -[TUGroupTitle value]
  -[TUGroupTitle callerId]
  -[TUGroupTitle handles]
  -[TUGroupTitle destinationId]
  -[TUGroupTitle backingContact]
  -[TUGroupTitle mostRecentCallType]
  -[TUGroupTitle backingContactId]
  -[TUGroupTitle backingContactIdentifier]
  -[TUGroupTitle mostRecentCallWasMissed]
  -[TUGroupTitle idsCanonicalDestinations]


TURemoteVideoClient : NSObject <TURemoteVideoClient>
 @property  long long videoContextSlotIdentifier
 @property  CALayer *videoLayer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TURemoteVideoClient .cxx_destruct]
  -[TURemoteVideoClient init]
  -[TURemoteVideoClient setVideoLayer:]
  -[TURemoteVideoClient videoLayer]
  -[TURemoteVideoClient cleanUpSubLayerForLayer:]
  -[TURemoteVideoClient videoContextSlotIdentifier]
  -[TURemoteVideoClient insertSubLayerInLayer:videoSlotIdentifier:]
  -[TURemoteVideoClient nameForSubLayer]
  -[TURemoteVideoClient setVideoLayer:forMode:]
  -[TURemoteVideoClient initWithVideoContextSlotIdentifier:]


TUAudioRoute : TURoute
 @property  NSString *avAudioRouteName
 @property  NSString *bluetoothProductIdentifier
 @property  BOOL headphoneJackConnected
 @property  NSDictionary *route

  // class methods
  +[TUAudioRoute supportsSecureCoding]

  // instance methods
  -[TUAudioRoute isCarAudio]
  -[TUAudioRoute isAirTunes]
  -[TUAudioRoute isBluetooth]
  -[TUAudioRoute isHandset]
  -[TUAudioRoute isPreferred]
  -[TUAudioRoute isA2DPRoute]
  -[TUAudioRoute deviceType]
  -[TUAudioRoute initWithCoder:]
  -[TUAudioRoute route]
  -[TUAudioRoute _routeTypeEqualTo:]
  -[TUAudioRoute isWiredHeadphones]
  -[TUAudioRoute isInEarDetectionSupported]
  -[TUAudioRoute .cxx_destruct]
  -[TUAudioRoute isBluetoothManaged]
  -[TUAudioRoute identifiersOfOtherConnectedDevices]
  -[TUAudioRoute isBluetoothLE]
  -[TUAudioRoute isDefaultRoute]
  -[TUAudioRoute avAudioRouteName]
  -[TUAudioRoute isSpeaker]
  -[TUAudioRoute isCurrentlyPicked]
  -[TUAudioRoute customDescription]
  -[TUAudioRoute supportsSharePlay]
  -[TUAudioRoute isPartnerRoutePresent]
  -[TUAudioRoute isWiredHeadset]
  -[TUAudioRoute initWithDictionary:]
  -[TUAudioRoute isPreferredAndActive]
  -[TUAudioRoute isWirelessHeadset]
  -[TUAudioRoute isInEarDetectionEnabled]
  -[TUAudioRoute bluetoothProductIdentifier]
  -[TUAudioRoute bluetoothEndpointType]
  -[TUAudioRoute isSiblingRoutePresent]
  -[TUAudioRoute encodeWithCoder:]
  -[TUAudioRoute isReceiver]
  -[TUAudioRoute isHeadphoneJackConnected]
  -[TUAudioRoute supportsHighQualityVoiceWithMedia]


TUCallProviderManagerXPCClient : NSObject <TUCallProviderManagerXPCClient, TUCallProviderManagerDataSource>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  int token
 @property  BOOL requestedInitialState
 @property  NSDictionary *providersByIdentifier
 @property  NSDictionary *localProvidersByIdentifier
 @property  NSDictionary *pairedHostDeviceProvidersByIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL currentProcessCanAccessInitialState
 @property  <TUCallProviderManagerDataSourceDelegate> *delegate

  // class methods
  +[TUCallProviderManagerXPCClient callProviderManagerAllowedClasses]
  +[TUCallProviderManagerXPCClient setSynchronousServer:]
  +[TUCallProviderManagerXPCClient callProviderManagerClientXPCInterface]
  +[TUCallProviderManagerXPCClient callProviderManagerServerXPCInterface]
  +[TUCallProviderManagerXPCClient synchronousServer]
  +[TUCallProviderManagerXPCClient asynchronousServer]
  +[TUCallProviderManagerXPCClient setAsynchronousServer:]

  // instance methods
  -[TUCallProviderManagerXPCClient synchronousServerWithErrorHandler:]
  -[TUCallProviderManagerXPCClient launchAppForDialRequest:completion:]
  -[TUCallProviderManagerXPCClient providersByIdentifier]
  -[TUCallProviderManagerXPCClient setXpcConnection:]
  -[TUCallProviderManagerXPCClient xpcConnection]
  -[TUCallProviderManagerXPCClient currentProcessCanAccessInitialState]
  -[TUCallProviderManagerXPCClient setToken:]
  -[TUCallProviderManagerXPCClient setLocalProvidersByIdentifier:]
  -[TUCallProviderManagerXPCClient setPairedHostDeviceProvidersByIdentifier:]
  -[TUCallProviderManagerXPCClient setRequestedInitialState:]
  -[TUCallProviderManagerXPCClient pairedHostDeviceProvidersByIdentifier]
  -[TUCallProviderManagerXPCClient .cxx_destruct]
  -[TUCallProviderManagerXPCClient donateUserIntentForProviderWithIdentifier:]
  -[TUCallProviderManagerXPCClient _requestInitialState]
  -[TUCallProviderManagerXPCClient requestedInitialState]
  -[TUCallProviderManagerXPCClient setDelegate:]
  -[TUCallProviderManagerXPCClient init]
  -[TUCallProviderManagerXPCClient serverWithErrorHandler:]
  -[TUCallProviderManagerXPCClient setQueue:]
  -[TUCallProviderManagerXPCClient updateProvidersByIdentifier:localProvidersByIdentifier:pairedHostDeviceProvidersByIdentifier:]
  -[TUCallProviderManagerXPCClient token]
  -[TUCallProviderManagerXPCClient openURL:isSensitive:error:]
  -[TUCallProviderManagerXPCClient server]
  -[TUCallProviderManagerXPCClient delegate]
  -[TUCallProviderManagerXPCClient queue]
  -[TUCallProviderManagerXPCClient _updateProvidersByIdentifier:localProvidersByIdentifier:pairedHostDeviceProvidersByIdentifier:]
  -[TUCallProviderManagerXPCClient dealloc]
  -[TUCallProviderManagerXPCClient setProvidersByIdentifier:]
  -[TUCallProviderManagerXPCClient invalidate]
  -[TUCallProviderManagerXPCClient blockUntilInitialStateReceived]
  -[TUCallProviderManagerXPCClient localProvidersByIdentifier]


TUCallDisplayContext : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  NSString *name
 @property  NSPersonNameComponents *personNameComponents
 @property  NSString *suggestedName
 @property  NSString *label
 @property  NSString *companyName
 @property  NSString *mapName
 @property  NSString *location
 @property  NSString *contactName
 @property  NSString *contactLabel
 @property  NSString *callDirectoryLabel
 @property  NSString *callDirectoryLocalizedExtensionContainingAppName
 @property  NSString *callDirectoryExtensionIdentifier
 @property  NSString *contactIdentifier
 @property  NSArray *contactIdentifiers
 @property  int legacyAddressBookIdentifier
 @property  NSString *firstName

  // class methods
  +[TUCallDisplayContext supportsSecureCoding]

  // instance methods
  -[TUCallDisplayContext firstName]
  -[TUCallDisplayContext label]
  -[TUCallDisplayContext name]
  -[TUCallDisplayContext contactName]
  -[TUCallDisplayContext initWithCoder:]
  -[TUCallDisplayContext contactLabel]
  -[TUCallDisplayContext setContactLabel:]
  -[TUCallDisplayContext setContactIdentifier:]
  -[TUCallDisplayContext .cxx_destruct]
  -[TUCallDisplayContext contactIdentifier]
  -[TUCallDisplayContext setLocation:]
  -[TUCallDisplayContext setFirstName:]
  -[TUCallDisplayContext setName:]
  -[TUCallDisplayContext suggestedName]
  -[TUCallDisplayContext setCompanyName:]
  -[TUCallDisplayContext personNameComponents]
  -[TUCallDisplayContext init]
  -[TUCallDisplayContext setSuggestedName:]
  -[TUCallDisplayContext isEqual:]
  -[TUCallDisplayContext mapName]
  -[TUCallDisplayContext contactIdentifiers]
  -[TUCallDisplayContext location]
  -[TUCallDisplayContext setContactName:]
  -[TUCallDisplayContext mutableCopyWithZone:]
  -[TUCallDisplayContext setContactIdentifiers:]
  -[TUCallDisplayContext setLabel:]
  -[TUCallDisplayContext copyWithZone:]
  -[TUCallDisplayContext companyName]
  -[TUCallDisplayContext encodeWithCoder:]
  -[TUCallDisplayContext legacyAddressBookIdentifier]
  -[TUCallDisplayContext setLegacyAddressBookIdentifier:]
  -[TUCallDisplayContext setPersonNameComponents:]
  -[TUCallDisplayContext callDirectoryLabel]
  -[TUCallDisplayContext callDirectoryLocalizedExtensionContainingAppName]
  -[TUCallDisplayContext callDirectoryExtensionIdentifier]
  -[TUCallDisplayContext setMapName:]
  -[TUCallDisplayContext setCallDirectoryLabel:]
  -[TUCallDisplayContext setCallDirectoryLocalizedExtensionContainingAppName:]
  -[TUCallDisplayContext setCallDirectoryExtensionIdentifier:]
  -[TUCallDisplayContext displayContextByMergingWithDisplayContext:]


TUMutableCallDisplayContext : TUCallDisplayContext
 @property  NSString *name
 @property  NSPersonNameComponents *personNameComponents
 @property  NSString *firstName
 @property  NSString *suggestedName
 @property  NSString *label
 @property  NSString *companyName
 @property  NSString *mapName
 @property  NSString *location
 @property  NSString *contactName
 @property  NSString *contactLabel
 @property  NSString *callDirectoryLabel
 @property  NSString *callDirectoryLocalizedExtensionContainingAppName
 @property  NSString *callDirectoryExtensionIdentifier
 @property  NSString *contactIdentifier
 @property  NSArray *contactIdentifiers
 @property  int legacyAddressBookIdentifier

  // class methods
  +[TUMutableCallDisplayContext supportsSecureCoding]

  // instance methods
  -[TUMutableCallDisplayContext copyWithZone:]
  -[TUMutableCallDisplayContext mergeValuesFromDisplayContext:]


TUCallFilterController : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <TUCallFilterControllerActions> *actionsDelegate
 @property  BOOL silenceUnknownCallersEnabled

  // instance methods
  -[TUCallFilterController .cxx_destruct]
  -[TUCallFilterController isUnknownAddress:normalizedAddress:forBundleIdentifier:]
  -[TUCallFilterController willRestrictAddresses:forBundleIdentifier:]
  -[TUCallFilterController shouldRestrictAddresses:forBundleIdentifier:performSynchronously:]
  -[TUCallFilterController containsRestrictedHandle:forBundleIdentifier:performSynchronously:]
  -[TUCallFilterController initWithActionsDelegate:serialQueue:]
  -[TUCallFilterController policyForAddresses:forBundleIdentifier:]
  -[TUCallFilterController queue]
  -[TUCallFilterController actionsDelegate]
  -[TUCallFilterController shouldRestrictDialRequest:performSynchronously:]
  -[TUCallFilterController bundleIdentifierForCallProvider:]
  -[TUCallFilterController addressesToCheckForRestrictionsInConversation:]
  -[TUCallFilterController shouldRestrictAddresses:performSynchronously:]
  -[TUCallFilterController silenceUnknownCallersEnabled]
  -[TUCallFilterController isUnknownHandle:]
  -[TUCallFilterController shouldRestrictDialRequest:]
  -[TUCallFilterController callFilterStatusForDialRequest:]
  -[TUCallFilterController restrictedContacts:callProvider:]
  -[TUCallFilterController containsRestrictedHandle:forBundleIdentifier:]
  -[TUCallFilterController shouldRestrictConversation:performSynchronously:]
  -[TUCallFilterController shouldRestrictJoinConversationRequest:performSynchronously:]
  -[TUCallFilterController shouldRestrictAddresses:forBundleIdentifier:]


TUMetadataCacheDataProvider : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableDictionary *providerCache
 @property  <TUMetadataCacheDataProviderDelegate> *delegate
 @property  BOOL empty

  // class methods
  +[TUMetadataCacheDataProvider classIdentifier]

  // instance methods
  -[TUMetadataCacheDataProvider updateCacheWithDestinationIDs:withGroup:]
  -[TUMetadataCacheDataProvider isEmpty]
  -[TUMetadataCacheDataProvider refresh]
  -[TUMetadataCacheDataProvider .cxx_destruct]
  -[TUMetadataCacheDataProvider setDelegate:]
  -[TUMetadataCacheDataProvider init]
  -[TUMetadataCacheDataProvider initWithQueue:]
  -[TUMetadataCacheDataProvider metadataForDestinationID:]
  -[TUMetadataCacheDataProvider delegate]
  -[TUMetadataCacheDataProvider queue]
  -[TUMetadataCacheDataProvider setObject:forDestinationID:]
  -[TUMetadataCacheDataProvider providerCache]


TUFeatureFlags : NSObject <TUFeatureFlags>
 @property  BOOL announceCalls
 @property  BOOL conversationOneToOneModeEnabled
 @property  BOOL expanseEnabled
 @property  BOOL sharePlayDisabled
 @property  BOOL ftvSpatialAudioEnabled
 @property  BOOL FTUserScore
 @property  BOOL gondolaBoat
 @property  BOOL gondolaCreateCallUI
 @property  BOOL gondolaOpenLinksInFaceTime
 @property  BOOL gondolaNotifications
 @property  BOOL gondolaOar
 @property  BOOL gondolaShareLinkInAdvance
 @property  BOOL gondolaEnforceDelegationIntent
 @property  BOOL kettleFeatureComplete
 @property  BOOL livePhotoXPCServiceEnabled
 @property  BOOL nonInterruptingCalls
 @property  BOOL qrPluginEnabled
 @property  BOOL qrPluginEncryptionEnabled
 @property  BOOL supportsScreenSharing
 @property  BOOL individualAudioVideoToggleEnabled
 @property  BOOL expanseBTSwitchingEnabled
 @property  BOOL TTRBannerEnabled
 @property  BOOL aTVHandoff
 @property  BOOL suggestionsReloadForSelectedRecipients
 @property  BOOL gftDowngradeToOneToOne
 @property  BOOL uPlusNDowngrade
 @property  BOOL requestA2DPOverIncomingCalls
 @property  BOOL mochiEnabled
 @property  BOOL screenSharingCALayerHostMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUFeatureFlags screenSharingCALayerHostMode]
  -[TUFeatureFlags aTVHandoff]
  -[TUFeatureFlags individualAudioVideoToggleEnabled]
  -[TUFeatureFlags nonInterruptingCalls]
  -[TUFeatureFlags uPlusNDowngrade]
  -[TUFeatureFlags qrPluginEnabled]
  -[TUFeatureFlags kettleFeatureComplete]
  -[TUFeatureFlags expanseBTSwitchingEnabled]
  -[TUFeatureFlags sharePlayDisabled]
  -[TUFeatureFlags expanseEnabled]
  -[TUFeatureFlags expanseEnabledForTV]
  -[TUFeatureFlags conversationOneToOneModeEnabled]
  -[TUFeatureFlags announceCalls]
  -[TUFeatureFlags suggestionsReloadForSelectedRecipients]
  -[TUFeatureFlags qrPluginEncryptionEnabled]
  -[TUFeatureFlags ftvSpatialAudioEnabled]
  -[TUFeatureFlags requestA2DPOverIncomingCalls]
  -[TUFeatureFlags gondolaShareLinkInAdvance]
  -[TUFeatureFlags FTUserScore]
  -[TUFeatureFlags gondolaOpenLinksInFaceTime]
  -[TUFeatureFlags gftDowngradeToOneToOne]
  -[TUFeatureFlags mochiEnabled]
  -[TUFeatureFlags expanseEnabledForMusic]
  -[TUFeatureFlags gondolaBoat]
  -[TUFeatureFlags gondolaEnforceDelegationIntent]
  -[TUFeatureFlags livePhotoXPCServiceEnabled]
  -[TUFeatureFlags supportsScreenSharing]
  -[TUFeatureFlags TTRBannerEnabled]
  -[TUFeatureFlags gondolaNotifications]
  -[TUFeatureFlags gondolaOar]
  -[TUFeatureFlags gondolaCreateCallUI]


TUConversationProvider : NSObject <NSSecureCoding>
 @property  NSObject<OS_tcc_identity> *assumedIdentity
 @property  NSString *bundleIdentifier
 @property  NSString *localizedName
 @property  NSString *identifier

  // class methods
  +[TUConversationProvider supportsSecureCoding]
  +[TUConversationProvider faceTimeProvider]
  +[TUConversationProvider unknownProvider]
  +[TUConversationProvider providerForIdentifier:]
  +[TUConversationProvider expanseProvider]

  // instance methods
  -[TUConversationProvider localizedName]
  -[TUConversationProvider initWithCoder:]
  -[TUConversationProvider setLocalizedName:]
  -[TUConversationProvider bundleIdentifier]
  -[TUConversationProvider .cxx_destruct]
  -[TUConversationProvider assumedIdentity]
  -[TUConversationProvider setBundleIdentifier:]
  -[TUConversationProvider isEqual:]
  -[TUConversationProvider identifier]
  -[TUConversationProvider copyWithZone:]
  -[TUConversationProvider encodeWithCoder:]
  -[TUConversationProvider initWithIdentifier:localizedName:]
  -[TUConversationProvider initWithConversationProvider:]
  -[TUConversationProvider isEqualToConversationProvider:]


TUConversationLink : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *creationDate
 @property  NSUUID *groupUUID
 @property  BOOL locallyCreated
 @property  TUHandle *originatorHandle
 @property  NSString *pseudonym
 @property  NSData *publicKey
 @property  long long linkLifetimeScope
 @property  NSString *URLFragment
 @property  NSString *linkName
 @property  NSDate *expirationDate
 @property  NSSet *invitedMemberHandles
 @property  NSURL *URL

  // class methods
  +[TUConversationLink publicKeyForBase64EncodedString:]
  +[TUConversationLink preferredBaseURLString]
  +[TUConversationLink conversationLinkVersion]
  +[TUConversationLink supportsSecureCoding]
  +[TUConversationLink baseURLStrings]
  +[TUConversationLink baseURLs]
  +[TUConversationLink preferredBaseURL]
  +[TUConversationLink baseURLComponentsForURL:]
  +[TUConversationLink prefixedPseudonymFor:]
  +[TUConversationLink conversationLinkComponentsFromURL:]
  +[TUConversationLink checkMatchingConversationLinkCriteriaForURL:]
  +[TUConversationLink conversationLinkForURL:]
  +[TUConversationLink userConfiguration]

  // instance methods
  -[TUConversationLink initWithDescriptor:]
  -[TUConversationLink publicKey]
  -[TUConversationLink initWithCoder:]
  -[TUConversationLink setCreationDate:]
  -[TUConversationLink setGroupUUID:]
  -[TUConversationLink .cxx_destruct]
  -[TUConversationLink setExpirationDate:]
  -[TUConversationLink isEqual:]
  -[TUConversationLink pseudonym]
  -[TUConversationLink URL]
  -[TUConversationLink creationDate]
  -[TUConversationLink linkName]
  -[TUConversationLink setPublicKey:]
  -[TUConversationLink copyWithZone:]
  -[TUConversationLink setPseudonym:]
  -[TUConversationLink expirationDate]
  -[TUConversationLink setLinkLifetimeScope:]
  -[TUConversationLink groupUUID]
  -[TUConversationLink linkLifetimeScope]
  -[TUConversationLink encodeWithCoder:]
  -[TUConversationLink isLocallyCreated]
  -[TUConversationLink setLocallyCreated:]
  -[TUConversationLink originatorHandle]
  -[TUConversationLink invitedMemberHandles]
  -[TUConversationLink initWithPseudonym:publicKey:groupUUID:originatorHandle:creationDate:expirationDate:invitedMemberHandles:locallyCreated:linkName:linkLifetimeScope:]
  -[TUConversationLink URLFragment]
  -[TUConversationLink unprefixedPseudonym]
  -[TUConversationLink base64PublicKey]
  -[TUConversationLink isEqualToConversationLink:]
  -[TUConversationLink isEquivalentToPseudonym:andPublicKey:]
  -[TUConversationLink initWithPseudonym:publicKey:groupUUID:originatorHandle:]
  -[TUConversationLink canCreateConversations]
  -[TUConversationLink isEquivalentToConversationLink:]
  -[TUConversationLink setOriginatorHandle:]
  -[TUConversationLink setURLFragment:]
  -[TUConversationLink setLinkName:]
  -[TUConversationLink setInvitedMemberHandles:]


TUCallModel : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL supportsHolding
 @property  BOOL supportsGrouping
 @property  BOOL supportsUngrouping
 @property  BOOL supportsDTMF
 @property  BOOL supportsUnambiguousMultiPartyState
 @property  BOOL supportsAddCall
 @property  BOOL supportsSendingToVoicemail

  // class methods
  +[TUCallModel supportsSecureCoding]

  // instance methods
  -[TUCallModel initWithCoder:]
  -[TUCallModel supportsGrouping]
  -[TUCallModel isEqual:]
  -[TUCallModel setSupportsGrouping:]
  -[TUCallModel copyWithZone:]
  -[TUCallModel encodeWithCoder:]
  -[TUCallModel supportsHolding]
  -[TUCallModel supportsUngrouping]
  -[TUCallModel supportsDTMF]
  -[TUCallModel supportsUnambiguousMultiPartyState]
  -[TUCallModel supportsAddCall]
  -[TUCallModel supportsSendingToVoicemail]
  -[TUCallModel setSupportsHolding:]
  -[TUCallModel setSupportsUngrouping:]
  -[TUCallModel setSupportsDTMF:]
  -[TUCallModel setSupportsUnambiguousMultiPartyState:]
  -[TUCallModel setSupportsAddCall:]
  -[TUCallModel setSupportsSendingToVoicemail:]


TURTCCallReporter : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableDictionary *callUUIDToConversation
 @property  TUCallCenter *callCenter

  // instance methods
  -[TURTCCallReporter .cxx_destruct]
  -[TURTCCallReporter callCenter]
  -[TURTCCallReporter queue]
  -[TURTCCallReporter callStatusChangedNotification:]
  -[TURTCCallReporter callUUIDToConversation]
  -[TURTCCallReporter report:withConversation:]
  -[TURTCCallReporter reportingSessionForCall:withConversation:]
  -[TURTCCallReporter rtcCallInfoDictionary:withConversation:]
  -[TURTCCallReporter serviceName:withConversation:]
  -[TURTCCallReporter clientName:]
  -[TURTCCallReporter initWithCallCenter:]


TULogging : NSObject
  // class methods
  +[TULogging enablePhoneLogging]
  +[TULogging disablePhoneLogging]
  +[TULogging registerForShouldLogChangedNotification]
  +[TULogging unregisterForShouldLogChangedNotification]
  +[TULogging sendDirectoryToCrashReporter:error:]


TUConversationMediaController : NSObject <TUConversationMediaControllerDataSourceDelegate>
 @property  <TUConversationManagerDataSource> *dataSource
 @property  <TUConversationMediaControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUConversationMediaController .cxx_destruct]
  -[TUConversationMediaController setDelegate:]
  -[TUConversationMediaController dataSource]
  -[TUConversationMediaController delegate]
  -[TUConversationMediaController updateConversationWithUUID:participantPresentationContexts:]
  -[TUConversationMediaController mediaPrioritiesChangeForConversation:]
  -[TUConversationMediaController initWithConversationDataSource:]


TUConversationActivitySessionContainer : NSObject <NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSUUID *groupUUID
 @property  long long state
 @property  NSSet *activitySessions
 @property  NSSet *remoteMembers
 @property  TUConversationMember *localMember
 @property  TUHandle *initiator
 @property  unsigned long localParticipantIdentifier
 @property  NSSet *virtualParticipants
 @property  TUConversationVirtualParticipantConfig *virtualParticipantConfig
 @property  NSSet *activeRemoteParticipants

  // class methods
  +[TUConversationActivitySessionContainer supportsSecureCoding]

  // instance methods
  -[TUConversationActivitySessionContainer UUID]
  -[TUConversationActivitySessionContainer setInitiator:]
  -[TUConversationActivitySessionContainer initWithCoder:]
  -[TUConversationActivitySessionContainer setGroupUUID:]
  -[TUConversationActivitySessionContainer .cxx_destruct]
  -[TUConversationActivitySessionContainer setState:]
  -[TUConversationActivitySessionContainer localMember]
  -[TUConversationActivitySessionContainer state]
  -[TUConversationActivitySessionContainer initiator]
  -[TUConversationActivitySessionContainer activitySessions]
  -[TUConversationActivitySessionContainer copyWithZone:]
  -[TUConversationActivitySessionContainer groupUUID]
  -[TUConversationActivitySessionContainer encodeWithCoder:]
  -[TUConversationActivitySessionContainer setUUID:]
  -[TUConversationActivitySessionContainer activeRemoteParticipants]
  -[TUConversationActivitySessionContainer setRemoteMembers:]
  -[TUConversationActivitySessionContainer setActiveRemoteParticipants:]
  -[TUConversationActivitySessionContainer setActivitySessions:]
  -[TUConversationActivitySessionContainer setVirtualParticipants:]
  -[TUConversationActivitySessionContainer remoteMembers]
  -[TUConversationActivitySessionContainer localParticipantIdentifier]
  -[TUConversationActivitySessionContainer virtualParticipants]
  -[TUConversationActivitySessionContainer setLocalMember:]
  -[TUConversationActivitySessionContainer setLocalParticipantIdentifier:]
  -[TUConversationActivitySessionContainer virtualParticipantConfig]
  -[TUConversationActivitySessionContainer setVirtualParticipantConfig:]


TULabeledHandle : NSObject <NSCopying, NSSecureCoding>
 @property  TUHandle *handle
 @property  NSString *label
 @property  BOOL isSuggested

  // class methods
  +[TULabeledHandle supportsSecureCoding]

  // instance methods
  -[TULabeledHandle label]
  -[TULabeledHandle initWithCoder:]
  -[TULabeledHandle .cxx_destruct]
  -[TULabeledHandle init]
  -[TULabeledHandle isEqual:]
  -[TULabeledHandle isSuggested]
  -[TULabeledHandle handle]
  -[TULabeledHandle copyWithZone:]
  -[TULabeledHandle encodeWithCoder:]
  -[TULabeledHandle initWithHandle:label:isSuggested:]
  -[TULabeledHandle isEqualToLabeledHandle:]


TUSearchResults : NSObject <NSCopying>
 @property  NSString *searchTerm
 @property  NSMutableArray *resultGroups
 @property  NSMutableArray *allSearchItemsCache
 @property  NSMutableArray *allDataItemsCache
 @property  NSArray *allSearchItems
 @property  NSArray *allDataItems
 @property  long long numberOfSections
 @property  long long numberOfResults
 @property  TUSearchController *searchController

  // instance methods
  -[TUSearchResults searchController]
  -[TUSearchResults numberOfResults]
  -[TUSearchResults setSearchController:]
  -[TUSearchResults numberOfSections]
  -[TUSearchResults .cxx_destruct]
  -[TUSearchResults setSearchTerm:]
  -[TUSearchResults searchTerm]
  -[TUSearchResults copyWithZone:]
  -[TUSearchResults _clearCaches]
  -[TUSearchResults addSearchResults:]
  -[TUSearchResults resultGroups]
  -[TUSearchResults allSearchItems]
  -[TUSearchResults addResultGroup:]
  -[TUSearchResults addAdhocResultGroup]
  -[TUSearchResults setAllDataItemsCache:]
  -[TUSearchResults setAllSearchItemsCache:]
  -[TUSearchResults removeDuplicateResults]
  -[TUSearchResults removeSearchItem:]
  -[TUSearchResults setResultGroups:]
  -[TUSearchResults resultGroupForSection:]
  -[TUSearchResults allSearchItemsCache]
  -[TUSearchResults allDataItemsCache]
  -[TUSearchResults initWithSearchTerm:shouldAddAdhocResults:]
  -[TUSearchResults finalizeSearchResults]
  -[TUSearchResults numberOfTableViewRows]
  -[TUSearchResults allDataItems]


TUResultGroup : NSObject <NSCopying>
 @property  TUGroupTitle *title
 @property  NSMutableArray *resultsCache
 @property  NSArray *results
 @property  unsigned long groupType

  // instance methods
  -[TUResultGroup setTitle:]
  -[TUResultGroup results]
  -[TUResultGroup .cxx_destruct]
  -[TUResultGroup groupType]
  -[TUResultGroup title]
  -[TUResultGroup copyWithZone:]
  -[TUResultGroup initWithTitle:results:]
  -[TUResultGroup removeSearchItem:]
  -[TUResultGroup resultsCache]
  -[TUResultGroup setResultsCache:]


TUReplyWithMessageStore : NSObject
  // instance methods
  -[TUReplyWithMessageStore count]
  -[TUReplyWithMessageStore init]
  -[TUReplyWithMessageStore dealloc]
  -[TUReplyWithMessageStore _defaultRepliesForSending:]
  -[TUReplyWithMessageStore customReplies]
  -[TUReplyWithMessageStore _cannedRepliesForSending:]
  -[TUReplyWithMessageStore cannedReplies]
  -[TUReplyWithMessageStore defaultReplies]
  -[TUReplyWithMessageStore cannedReplyActionSheetOptions]
  -[TUReplyWithMessageStore cannedRepliesForSending]
  -[TUReplyWithMessageStore setCustomReply:atIndex:]
  -[TUReplyWithMessageStore _handleMessagesStoreChanged]


TUAdhocResult : NSObject <TUSearchResult>
 @property  NSString *value
 @property  TUSearchController *searchController
 @property  NSString *displayName
 @property  NSString *callerId
 @property  CNContact *backingContact
 @property  NSString *backingContactId
 @property  NSString *backingContactIdentifier
 @property  NSString *destinationId
 @property  NSString *isoCountryCode
 @property  NSArray *handles
 @property  long long mostRecentCallType
 @property  BOOL mostRecentCallWasMissed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *idsCanonicalDestinations

  // instance methods
  -[TUAdhocResult isoCountryCode]
  -[TUAdhocResult displayName]
  -[TUAdhocResult searchController]
  -[TUAdhocResult setSearchController:]
  -[TUAdhocResult .cxx_destruct]
  -[TUAdhocResult initWithString:]
  -[TUAdhocResult setValue:]
  -[TUAdhocResult value]
  -[TUAdhocResult callerId]
  -[TUAdhocResult handles]
  -[TUAdhocResult destinationId]
  -[TUAdhocResult backingContact]
  -[TUAdhocResult mostRecentCallType]
  -[TUAdhocResult backingContactId]
  -[TUAdhocResult backingContactIdentifier]
  -[TUAdhocResult mostRecentCallWasMissed]
  -[TUAdhocResult idsCanonicalDestinations]


TUConversationVirtualParticipantConfig : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long connectionRetryIntervalMillis
 @property  unsigned long connectionMaxAttempts
 @property  unsigned long rpcStreamRetryIntervalMillis
 @property  unsigned long rpcStreamMaxAttempts
 @property  BOOL serverCertValidationEnabled
 @property  NSString *serverCertHostnameOverride
 @property  NSString *serverCertLeafMarkerOIDOverride
 @property  NSData *idsAliasingSalt

  // class methods
  +[TUConversationVirtualParticipantConfig supportsSecureCoding]
  +[TUConversationVirtualParticipantConfig serverCertValidationEnabledUserDefaultsKey]
  +[TUConversationVirtualParticipantConfig serverCertHostnameUserDefaultsKey]
  +[TUConversationVirtualParticipantConfig serverCertLeafMarkerOIDUserDefaultsKey]

  // instance methods
  -[TUConversationVirtualParticipantConfig initWithCoder:]
  -[TUConversationVirtualParticipantConfig .cxx_destruct]
  -[TUConversationVirtualParticipantConfig isEqual:]
  -[TUConversationVirtualParticipantConfig copyWithZone:]
  -[TUConversationVirtualParticipantConfig encodeWithCoder:]
  -[TUConversationVirtualParticipantConfig connectionRetryIntervalMillis]
  -[TUConversationVirtualParticipantConfig connectionMaxAttempts]
  -[TUConversationVirtualParticipantConfig rpcStreamRetryIntervalMillis]
  -[TUConversationVirtualParticipantConfig rpcStreamMaxAttempts]
  -[TUConversationVirtualParticipantConfig serverCertValidationEnabled]
  -[TUConversationVirtualParticipantConfig serverCertHostnameOverride]
  -[TUConversationVirtualParticipantConfig serverCertLeafMarkerOIDOverride]
  -[TUConversationVirtualParticipantConfig isEqualToConversationVirtualParticipantConfig:]
  -[TUConversationVirtualParticipantConfig idsAliasingSalt]
  -[TUConversationVirtualParticipantConfig initWithConnectionRetryIntervalMillis:connectionMaxAttempts:rpcStreamRetryIntervalMillis:rpcStreamMaxAttempts:serverCertValidationEnabled:serverCertHostnameOverride:serverCertLeafMarkerOIDOverride:]
  -[TUConversationVirtualParticipantConfig setIdsAliasingSalt:]


TUConversationParticipantPresentationContext : NSObject <NSSecureCoding>
 @property  unsigned long participantIdentifier
 @property  unsigned long videoQuality
 @property  NSNumber *visibility
 @property  NSNumber *prominence
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} spatialPosition
 @property  BOOL isInCanvas

  // class methods
  +[TUConversationParticipantPresentationContext supportsSecureCoding]

  // instance methods
  -[TUConversationParticipantPresentationContext videoQuality]
  -[TUConversationParticipantPresentationContext prominence]
  -[TUConversationParticipantPresentationContext initWithCoder:]
  -[TUConversationParticipantPresentationContext visibility]
  -[TUConversationParticipantPresentationContext participantIdentifier]
  -[TUConversationParticipantPresentationContext encodeWithCoder:]
  -[TUConversationParticipantPresentationContext spatialPosition]
  -[TUConversationParticipantPresentationContext isInCanvas]
  -[TUConversationParticipantPresentationContext initWithParticipantIdentifier:videoQuality:visibility:prominence:spatialPosition:isInCanvas:]


TUUserConfiguration : TUConfiguration
  // class methods
  +[TUUserConfiguration registeredDefaults]
  +[TUUserConfiguration userDefaults]

  // instance methods
  -[TUUserConfiguration synchronize]
  -[TUUserConfiguration init]
  -[TUUserConfiguration dealloc]
  -[TUUserConfiguration observeValueForKeyPath:ofObject:change:context:]


TUCallServicesInterface : NSObject <TUCallServicesXPCClient, TUCallServicesProxyCallActions, TUCallServicesClientCapabilitiesActions, TUAudioDeviceControllerActions, TURouteControllerActions, TUCallFilterControllerActions>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  ^v queueContext
 @property  int connectionRequestNotificationToken
 @property  NSXPCConnection *xpcConnection
 @property  BOOL hasRequestedInitialState
 @property  BOOL hasReceivedInitialState
 @property  BOOL shouldHandleServerDisconnect
 @property  NSArray *currentCalls
 @property  NSMapTable *uniqueProxyIdentifierToProxyCall
 @property  TUCallNotificationManager *callNotificationManager
 @property  NSArray *localProxyCalls
 @property  BOOL serverLocal
 @property  BOOL hasServerLaunched
 @property  TUCallCenter *callCenter
 @property  <TUCallServicesXPCServer> *asynchronousServer
 @property  <TUCallServicesXPCServer> *server
 @property  TUCallServicesClientCapabilities *callServicesClientCapabilities
 @property  TURouteController *localRouteController
 @property  TURouteController *pairedHostDeviceRouteController
 @property  <TUCallContainerPrivate> *callContainer
 @property  NSDate *lastDaemonConnectTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUCallServicesInterface synchronousServerWithErrorHandler:]
  -[TUCallServicesInterface setServer:]
  -[TUCallServicesInterface currentCalls]
  -[TUCallServicesInterface setXpcConnection:]
  -[TUCallServicesInterface swapCalls]
  -[TUCallServicesInterface xpcConnection]
  -[TUCallServicesInterface fetchCurrentCalls]
  -[TUCallServicesInterface setHasReceivedInitialState:]
  -[TUCallServicesInterface setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:bluetoothAudioFormat:]
  -[TUCallServicesInterface setCallCenter:]
  -[TUCallServicesInterface pullCallFromClientUsingHandoffActivityUserInfo:completion:]
  -[TUCallServicesInterface setCurrentAudioOutputDeviceToDeviceWithUID:]
  -[TUCallServicesInterface setLocalProxyCalls:]
  -[TUCallServicesInterface handleFrequencyChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:]
  -[TUCallServicesInterface holdCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface willEnterBackgroundForAllCalls]
  -[TUCallServicesInterface setClientCapabilities:]
  -[TUCallServicesInterface requestCurrentStateWithCompletionHandler:]
  -[TUCallServicesInterface requestVideoUpgradeForCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface enteredForegroundForCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface requestCurrentStateWithCompletionHandler:handleInitialState:]
  -[TUCallServicesInterface .cxx_destruct]
  -[TUCallServicesInterface queueContext]
  -[TUCallServicesInterface handleLocalRoutesByUniqueIdentifierUpdated:]
  -[TUCallServicesInterface _ignorePendingServerDisconnectionHandlers]
  -[TUCallServicesInterface setSharingScreen:forCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface isUnknownAddress:normalizedAddress:forBundleIdentifier:]
  -[TUCallServicesInterface pullHostedCallsFromPairedHostDevice]
  -[TUCallServicesInterface callContainer]
  -[TUCallServicesInterface handleNotificationName:forCallWithUniqueProxyIdentifier:userInfo:]
  -[TUCallServicesInterface setScreenShareAttributesForCallWithUniqueProxyIdentifier:attributes:]
  -[TUCallServicesInterface localRouteController]
  -[TUCallServicesInterface isServerLocal]
  -[TUCallServicesInterface tearDownXPCConnection]
  -[TUCallServicesInterface handleServerDisconnectIfNecessary]
  -[TUCallServicesInterface _registerCall:]
  -[TUCallServicesInterface asynchronousServerWithErrorHandler:]
  -[TUCallServicesInterface filterStatusForAddresses:forBundleIdentifier:]
  -[TUCallServicesInterface setCurrentAudioInputDeviceToDeviceWithUID:]
  -[TUCallServicesInterface setSharingScreen:attributes:forCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface _proxyCallWithCall:]
  -[TUCallServicesInterface pushRelayingCallsToHostWithSourceIdentifier:]
  -[TUCallServicesInterface disconnectAllCalls]
  -[TUCallServicesInterface setHasServerLaunched:]
  -[TUCallServicesInterface willRestrictAddresses:forBundleIdentifier:]
  -[TUCallServicesInterface init]
  -[TUCallServicesInterface _proxyCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface handleServerDisconnect]
  -[TUCallServicesInterface localProxyCalls]
  -[TUCallServicesInterface answerCallWithRequest:]
  -[TUCallServicesInterface shouldRestrictAddresses:forBundleIdentifier:performSynchronously:]
  -[TUCallServicesInterface setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:]
  -[TUCallServicesInterface groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface callServicesClientCapabilities]
  -[TUCallServicesInterface initWithQueue:callCenter:]
  -[TUCallServicesInterface pairedHostDeviceRouteController]
  -[TUCallServicesInterface disconnectCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface pushHostedCallsToDestination:]
  -[TUCallServicesInterface _updateCurrentCalls:withNotificationsUsingUpdatedCalls:]
  -[TUCallServicesInterface setHasRequestedInitialState:]
  -[TUCallServicesInterface containsRestrictedHandle:forBundleIdentifier:performSynchronously:]
  -[TUCallServicesInterface sendUserScoreToRTCReporting:withScore:]
  -[TUCallServicesInterface hasServerLaunched]
  -[TUCallServicesInterface joinConversationWithRequest:]
  -[TUCallServicesInterface _updateCurrentCalls:]
  -[TUCallServicesInterface hasRequestedInitialState]
  -[TUCallServicesInterface _updateCurrentCallsWithoutNotifications:]
  -[TUCallServicesInterface _handleCurrentCallsChanged:callsDisconnected:]
  -[TUCallServicesInterface playDTMFToneForCallWithUniqueProxyIdentifier:key:]
  -[TUCallServicesInterface enteredBackgroundForAllCalls]
  -[TUCallServicesInterface callCenter]
  -[TUCallServicesInterface connectionRequestNotificationToken]
  -[TUCallServicesInterface ungroupCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface server]
  -[TUCallServicesInterface setTTYType:forCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface activateInCallUIWithActivityContinuationIdentifier:]
  -[TUCallServicesInterface setCurrentCalls:]
  -[TUCallServicesInterface shouldHandleServerDisconnect]
  -[TUCallServicesInterface setUplinkMuted:forCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface uniqueProxyIdentifierToProxyCall]
  -[TUCallServicesInterface policyForAddresses:forBundleIdentifier:]
  -[TUCallServicesInterface setIsSendingVideo:forCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface setLocalRouteController:]
  -[TUCallServicesInterface sendHardPauseDigitsForCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface hasReceivedInitialState]
  -[TUCallServicesInterface handlePairedHostDeviceRoutesByUniqueIdentifierUpdated:]
  -[TUCallServicesInterface waitForInitialStateIfNecessary]
  -[TUCallServicesInterface _setUpXPCConnection]
  -[TUCallServicesInterface handleMeterLevelChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:]
  -[TUCallServicesInterface queue]
  -[TUCallServicesInterface reportLocalPreviewStoppedForCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface callNotificationManager]
  -[TUCallServicesInterface _tearDownXPCConnection]
  -[TUCallServicesInterface shouldAllowRingingCallStatusIndicator:]
  -[TUCallServicesInterface dealloc]
  -[TUCallServicesInterface resetCallProvisionalStates]
  -[TUCallServicesInterface handleCurrentCallsChanged:callDisconnected:]
  -[TUCallServicesInterface setPairedHostDeviceRouteController:]
  -[TUCallServicesInterface setLastDaemonConnectTime:]
  -[TUCallServicesInterface registerCall:]
  -[TUCallServicesInterface setShouldHandleServerDisconnect:]
  -[TUCallServicesInterface disconnectCurrentCallAndActivateHeld]
  -[TUCallServicesInterface pullRelayingCallsFromClient]
  -[TUCallServicesInterface setDownlinkMuted:forCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:]
  -[TUCallServicesInterface performBlockOnQueue:andWait:]
  -[TUCallServicesInterface asynchronousServer]
  -[TUCallServicesInterface lastDaemonConnectTime]
  -[TUCallServicesInterface sendMMIOrUSSDCodeWithRequest:]
  -[TUCallServicesInterface routesByUniqueIdentifierForRouteController:]
  -[TUCallServicesInterface dialWithRequest:completion:]
  -[TUCallServicesInterface setMixesVoiceWithMedia:forCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface unholdCallWithUniqueProxyIdentifier:]
  -[TUCallServicesInterface handleServerReconnect]
  -[TUCallServicesInterface performBlockOnQueue:]
  -[TUCallServicesInterface updateCallWithProxy:]
  -[TUCallServicesInterface pickRouteWithUniqueIdentifier:shouldWaitUntilAvailable:forRouteController:]
  -[TUCallServicesInterface shouldSuppressInCallStatusBar:]


TUMetadataItem : NSObject
 @property  NSMutableDictionary *callMetadata
 @property  BOOL empty

  // instance methods
  -[TUMetadataItem isEmpty]
  -[TUMetadataItem .cxx_destruct]
  -[TUMetadataItem init]
  -[TUMetadataItem metadataForProvider:]
  -[TUMetadataItem callMetadata]
  -[TUMetadataItem setMetadata:forProvider:]


TUMetadataDestinationID : NSObject <NSSecureCoding, NSCopying>
 @property  TUHandle *handle
 @property  NSString *isoCountryCode

  // class methods
  +[TUMetadataDestinationID supportsSecureCoding]
  +[TUMetadataDestinationID metadataDestinationIDsForCHRecentCalls:]
  +[TUMetadataDestinationID metadataDestinationIDsForCHRecentCall:]
  +[TUMetadataDestinationID metadataDestinationIDForCall:]

  // instance methods
  -[TUMetadataDestinationID isoCountryCode]
  -[TUMetadataDestinationID initWithCoder:]
  -[TUMetadataDestinationID initWithHandle:]
  -[TUMetadataDestinationID .cxx_destruct]
  -[TUMetadataDestinationID isEqual:]
  -[TUMetadataDestinationID handle]
  -[TUMetadataDestinationID copyWithZone:]
  -[TUMetadataDestinationID encodeWithCoder:]
  -[TUMetadataDestinationID isEqualToMetadataDestinationID:]
  -[TUMetadataDestinationID initWithDestinationID:isoCountryCode:]


TUConversationParticipantCapabilities : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL momentsAvailable
 @property  BOOL screenSharingAvailable
 @property  BOOL gondolaCallingAvailable
 @property  BOOL mirageAvailable
 @property  BOOL gftDowngradeToOneToOneAvailable
 @property  BOOL uPlusNDowngradeAvailable
 @property  unsigned long sharePlayProtocolVersion

  // class methods
  +[TUConversationParticipantCapabilities supportsSecureCoding]

  // instance methods
  -[TUConversationParticipantCapabilities initWithCoder:]
  -[TUConversationParticipantCapabilities isEqualToCapabilities:]
  -[TUConversationParticipantCapabilities isEqual:]
  -[TUConversationParticipantCapabilities setScreenSharingAvailable:]
  -[TUConversationParticipantCapabilities isScreenSharingAvailable]
  -[TUConversationParticipantCapabilities copyWithZone:]
  -[TUConversationParticipantCapabilities encodeWithCoder:]
  -[TUConversationParticipantCapabilities isMomentsAvailable]
  -[TUConversationParticipantCapabilities setMomentsAvailable:]
  -[TUConversationParticipantCapabilities isGondolaCallingAvailable]
  -[TUConversationParticipantCapabilities isMirageAvailable]
  -[TUConversationParticipantCapabilities isGFTDowngradeToOneToOneAvailable]
  -[TUConversationParticipantCapabilities isUPlusNDowngradeAvailable]
  -[TUConversationParticipantCapabilities sharePlayProtocolVersion]
  -[TUConversationParticipantCapabilities setGondolaCallingAvailable:]
  -[TUConversationParticipantCapabilities setMirageAvailable:]
  -[TUConversationParticipantCapabilities setGftDowngradeToOneToOneAvailable:]
  -[TUConversationParticipantCapabilities setUPlusNDowngradeAvailable:]
  -[TUConversationParticipantCapabilities setSharePlayProtocolVersion:]


TUMutableConversationParticipantCapabilities : TUConversationParticipantCapabilities
 @property  BOOL momentsAvailable
 @property  BOOL screenSharingAvailable
 @property  BOOL gondolaCallingAvailable
 @property  BOOL mirageAvailable
 @property  BOOL gftDowngradeToOneToOneAvailable
 @property  BOOL uPlusNDowngradeAvailable
 @property  unsigned long sharePlayProtocolVersion


TUIDSLookupManager : NSObject <IDSBatchIDQueryControllerDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <TUIDSIDQueryController> *queryController
 @property  TULocked *idsFaceTimeVideoStatuses
 @property  TULocked *idsFaceTimeAudioStatuses
 @property  TULocked *idsFaceTimeMultiwayStatuses
 @property  TULocked *idsModernStatuses
 @property  TULocked *idsWebCapableStatuses
 @property  <TUIDSBatchIDQueryController> *batchQuerySearchVideoController
 @property  <TUIDSBatchIDQueryController> *batchQuerySearchAudioController
 @property  <TUIDSBatchIDQueryController> *batchQuerySearchMultiwayController
 @property  @? batchQueryControllerCreationBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUIDSLookupManager sharedManager]
  +[TUIDSLookupManager isAnyDestinationAvailableInDestinations:usingCache:]
  +[TUIDSLookupManager idsServiceAvailabilityForDestination:usingCache:]

  // instance methods
  -[TUIDSLookupManager queryController]
  -[TUIDSLookupManager batchQueryController:updatedDestinationsStatus:onService:error:]
  -[TUIDSLookupManager .cxx_destruct]
  -[TUIDSLookupManager init]
  -[TUIDSLookupManager queue]
  -[TUIDSLookupManager dealloc]
  -[TUIDSLookupManager initWithQueryController:]
  -[TUIDSLookupManager cancelQueries]
  -[TUIDSLookupManager batchQueryControllerCreationBlock]
  -[TUIDSLookupManager isFaceTimeVideoAvailableForAnyDestinationInDestinations:]
  -[TUIDSLookupManager isFaceTimeAudioAvailableForAnyDestinationInDestinations:]
  -[TUIDSLookupManager isFaceTimeMultiwayAvailableForAnyDestinationInDestinations:]
  -[TUIDSLookupManager idsFaceTimeVideoStatuses]
  -[TUIDSLookupManager idsFaceTimeAudioStatuses]
  -[TUIDSLookupManager idsFaceTimeMultiwayStatuses]
  -[TUIDSLookupManager idsModernStatuses]
  -[TUIDSLookupManager idsWebCapableStatuses]
  -[TUIDSLookupManager beginQueryWithDestination:onService:]
  -[TUIDSLookupManager handleIDSQueryResultWithDestinationStatus:onService:]
  -[TUIDSLookupManager batchQuerySearchVideoController]
  -[TUIDSLookupManager batchQuerySearchAudioController]
  -[TUIDSLookupManager batchQuerySearchMultiwayController]
  -[TUIDSLookupManager beginCachedQueryWithDestinations:onService:]
  -[TUIDSLookupManager postStatusChangedNotification]
  -[TUIDSLookupManager filteredDestinationForMultiway:completionBlock:]
  -[TUIDSLookupManager queryHasEndpointWithCapabilities:forMultiwayDestinations:completionBlock:]
  -[TUIDSLookupManager isFaceTimeVideoAvailableForItem:]
  -[TUIDSLookupManager isFaceTimeAudioAvailableForItem:]
  -[TUIDSLookupManager isFaceTimeMultiwayAvailableForItem:]
  -[TUIDSLookupManager faceTimeAudioAvailabilityForDestination:]
  -[TUIDSLookupManager faceTimeVideoAvailabilityForDestination:]
  -[TUIDSLookupManager faceTimeMultiwayAvailabilityForDestination:]
  -[TUIDSLookupManager isModernFaceTimeAvailableForDestination:]
  -[TUIDSLookupManager isWebCapableFaceTimeAvailableForDestination:]
  -[TUIDSLookupManager beginQueryWithDestinations:]
  -[TUIDSLookupManager beginBatchQueryWithDestinations:]
  -[TUIDSLookupManager beginCachedQueryWithDestinations:]
  -[TUIDSLookupManager queryHasWebOnlyEndpointsForDestinations:completionBlock:]
  -[TUIDSLookupManager setBatchQuerySearchVideoController:]
  -[TUIDSLookupManager setBatchQuerySearchAudioController:]
  -[TUIDSLookupManager setBatchQuerySearchMultiwayController:]
  -[TUIDSLookupManager setBatchQueryControllerCreationBlock:]


TUCoreTelephonyClient : NSObject <TUTTYCoreTelephonyClient, TUEmergencyCoreTelephonyClient, TUCoreTelephonyClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CoreTelephonyClient *client
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCoreTelephonyClient RTTTelephonyUtilitiesClass]
  +[TUCoreTelephonyClient RTTSettingsClass]
  +[TUCoreTelephonyClient sharedRTTTelephonyUtilities]

  // instance methods
  -[TUCoreTelephonyClient .cxx_destruct]
  -[TUCoreTelephonyClient init]
  -[TUCoreTelephonyClient initWithQueue:]
  -[TUCoreTelephonyClient client]
  -[TUCoreTelephonyClient queue]
  -[TUCoreTelephonyClient isRTTSupportedForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYEnabledForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYSupportedForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYHardwareAvailableForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYHardwareEnabledForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYHardwareSupportedForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYSoftwareAvailableForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYSoftwareEnabledForSubscriptionUUID:]
  -[TUCoreTelephonyClient isTTYSoftwareSupportedForSubscriptionUUID:]
  -[TUCoreTelephonyClient isDialAssistSupportedForSubscriptionLabelIdentifier:error:]
  -[TUCoreTelephonyClient subscriptionForUUID:]
  -[TUCoreTelephonyClient isRTTSupportedForSubscription:]
  -[TUCoreTelephonyClient isTTYSoftwareEnabledForSubscription:]
  -[TUCoreTelephonyClient isTTYHardwareEnabledForSubscription:]
  -[TUCoreTelephonyClient isTTYEnabledForSubscription:]
  -[TUCoreTelephonyClient isTTYSupportedForSubscription:]
  -[TUCoreTelephonyClient preferredTransportMethodForSubscription:]
  -[TUCoreTelephonyClient isTTYHardwareAvailableForSubscription:]
  -[TUCoreTelephonyClient isTTYHardwareSupportedForSubscription:]
  -[TUCoreTelephonyClient isTTYSoftwareAvailableForSubscription:]
  -[TUCoreTelephonyClient isTTYSoftwareSupportedForSubscription:]
  -[TUCoreTelephonyClient subscriptionForLabelIdentifier:]
  -[TUCoreTelephonyClient objectForKey:subscriptionLabelIdentifier:error:]
  -[TUCoreTelephonyClient testEmergencyHandleForSubscriptionLabelIdentifier:error:]
  -[TUCoreTelephonyClient isEmergencyNumberForDigits:subscription:error:]
  -[TUCoreTelephonyClient isWhitelistedEmergencyNumberForDigits:subscription:error:]
  -[TUCoreTelephonyClient shouldShowEmergencyCallbackModeAlertForSubscription:error:]
  -[TUCoreTelephonyClient inEmergencyMode]
  -[TUCoreTelephonyClient isEmergencyNumberForDigits:subscriptionUUID:error:]
  -[TUCoreTelephonyClient isWhitelistedEmergencyNumberForDigits:subscriptionUUID:error:]
  -[TUCoreTelephonyClient shouldShowEmergencyCallbackModeAlertForSubscriptionUUID:error:]


TUSearchController : NSObject
 @property  CNContactStore *contactStore
 @property  NSMutableDictionary *searchModules
 @property  NSMutableArray *recentsModules
 @property  NSObject<OS_dispatch_queue> *searchQueue

  // class methods
  +[TUSearchController sharedInstance]

  // instance methods
  -[TUSearchController contactStore]
  -[TUSearchController setContactStore:]
  -[TUSearchController .cxx_destruct]
  -[TUSearchController init]
  -[TUSearchController searchForString:completion:]
  -[TUSearchController searchQueue]
  -[TUSearchController _cancelRecentSearches]
  -[TUSearchController setRecentsModules:]
  -[TUSearchController recentsModules]
  -[TUSearchController recentsModuleCompletionWithCompletion:]
  -[TUSearchController _cancelSearchsForSearchTerm:]
  -[TUSearchController searchModules]
  -[TUSearchController searchModuleCompletionWithSearchTerm:completion:]
  -[TUSearchController _clearIdsDestinations]
  -[TUSearchController _searchModuleCompletionWithModules:searchTerm:resultsClass:completion:]
  -[TUSearchController _fetchIdsDestinationsIfNeeded:withReason:]
  -[TUSearchController recentsWithCompletion:]
  -[TUSearchController setSearchModules:]
  -[TUSearchController setSearchQueue:]


TUCTCapabilityInfo : NSObject <NSSecureCoding, NSCopying, TUPubliclyAccessibleCopying>
 @property  int provisioningStatus
 @property  NSURL *provisioningURL
 @property  NSData *provisioningPostData
 @property  BOOL canEnable
 @property  BOOL enabled
 @property  BOOL canEnableRoaming
 @property  BOOL roamingEnabled
 @property  BOOL provisioningURLInvalid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCTCapabilityInfo supportsSecureCoding]

  // instance methods
  -[TUCTCapabilityInfo initWithCoder:]
  -[TUCTCapabilityInfo .cxx_destruct]
  -[TUCTCapabilityInfo setProvisioningStatus:]
  -[TUCTCapabilityInfo publiclyAccessibleCopy]
  -[TUCTCapabilityInfo provisioningStatus]
  -[TUCTCapabilityInfo isEnabled]
  -[TUCTCapabilityInfo isRoamingEnabled]
  -[TUCTCapabilityInfo setRoamingEnabled:]
  -[TUCTCapabilityInfo publiclyAccessibleCopyWithZone:]
  -[TUCTCapabilityInfo copyWithZone:]
  -[TUCTCapabilityInfo setEnabled:]
  -[TUCTCapabilityInfo encodeWithCoder:]
  -[TUCTCapabilityInfo provisioningURL]
  -[TUCTCapabilityInfo isProvisioningURLInvalid]
  -[TUCTCapabilityInfo provisioningPostData]
  -[TUCTCapabilityInfo setProvisioningURL:]
  -[TUCTCapabilityInfo setProvisioningPostData:]
  -[TUCTCapabilityInfo setCanEnable:]
  -[TUCTCapabilityInfo setCanEnableRoaming:]
  -[TUCTCapabilityInfo invalidateProvisioningURL]
  -[TUCTCapabilityInfo canEnable]
  -[TUCTCapabilityInfo canEnableRoaming]


TUReportingControllerXPCClient : NSObject <TUReportingControllerXPCServer, TUReportingControllerDataSource>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUReportingControllerXPCClient setSynchronousServer:]
  +[TUReportingControllerXPCClient synchronousServer]
  +[TUReportingControllerXPCClient asynchronousServer]
  +[TUReportingControllerXPCClient setAsynchronousServer:]
  +[TUReportingControllerXPCClient reportingControllerServerXPCInterface]

  // instance methods
  -[TUReportingControllerXPCClient synchronousServerWithErrorHandler:]
  -[TUReportingControllerXPCClient setXpcConnection:]
  -[TUReportingControllerXPCClient xpcConnection]
  -[TUReportingControllerXPCClient .cxx_destruct]
  -[TUReportingControllerXPCClient init]
  -[TUReportingControllerXPCClient serverWithErrorHandler:]
  -[TUReportingControllerXPCClient queue]
  -[TUReportingControllerXPCClient dealloc]
  -[TUReportingControllerXPCClient registeredStream:withAvailability:reply:]
  -[TUReportingControllerXPCClient didCleanUpForStream:reply:]
  -[TUReportingControllerXPCClient didStartRequestForStream:withTransactionID:reply:]
  -[TUReportingControllerXPCClient didReceiveResultsForStream:withTransactionID:reply:]


TUNeighborhoodActivityConduitXPCClient : NSObject <TUNeighborhoodActivityConduitXPCClient>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  int token
 @property  <TUNeighborhoodActivityConduitXPCClientDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUNeighborhoodActivityConduitXPCClient asynchronousServer]
  +[TUNeighborhoodActivityConduitXPCClient setAsynchronousServer:]
  +[TUNeighborhoodActivityConduitXPCClient neighborhoodActivityServerXPCInterface]
  +[TUNeighborhoodActivityConduitXPCClient neighborhoodActivityClientXPCInterface]
  +[TUNeighborhoodActivityConduitXPCClient allowedXPCClasses]

  // instance methods
  -[TUNeighborhoodActivityConduitXPCClient setXpcConnection:]
  -[TUNeighborhoodActivityConduitXPCClient xpcConnection]
  -[TUNeighborhoodActivityConduitXPCClient setToken:]
  -[TUNeighborhoodActivityConduitXPCClient tvDeviceAppeared:]
  -[TUNeighborhoodActivityConduitXPCClient .cxx_destruct]
  -[TUNeighborhoodActivityConduitXPCClient setDelegate:]
  -[TUNeighborhoodActivityConduitXPCClient tvDeviceDisappeared:]
  -[TUNeighborhoodActivityConduitXPCClient init]
  -[TUNeighborhoodActivityConduitXPCClient cancelSplitSessionApproval]
  -[TUNeighborhoodActivityConduitXPCClient serverWithErrorHandler:]
  -[TUNeighborhoodActivityConduitXPCClient token]
  -[TUNeighborhoodActivityConduitXPCClient splitSessionStarted:]
  -[TUNeighborhoodActivityConduitXPCClient server]
  -[TUNeighborhoodActivityConduitXPCClient delegate]
  -[TUNeighborhoodActivityConduitXPCClient splitSessionEnded:]
  -[TUNeighborhoodActivityConduitXPCClient queue]
  -[TUNeighborhoodActivityConduitXPCClient ensureConnection]
  -[TUNeighborhoodActivityConduitXPCClient dealloc]
  -[TUNeighborhoodActivityConduitXPCClient disconnectTVDevice:completion:]
  -[TUNeighborhoodActivityConduitXPCClient registerApprovalClientEnabled:]
  -[TUNeighborhoodActivityConduitXPCClient nearbyTVDevicesWithCompletion:]
  -[TUNeighborhoodActivityConduitXPCClient activeSplitSessionTVDeviceWithCompletion:]
  -[TUNeighborhoodActivityConduitXPCClient inviteTVDevice:toConversationWithUUID:completion:]
  -[TUNeighborhoodActivityConduitXPCClient approveSplitSessionForConversation:requestedFromDevice:pullContext:completion:]


TUAudioRouteCollectionKey : NSObject <NSCopying>
 @property  NSString *category
 @property  NSString *mode

  // instance methods
  -[TUAudioRouteCollectionKey .cxx_destruct]
  -[TUAudioRouteCollectionKey isEqual:]
  -[TUAudioRouteCollectionKey category]
  -[TUAudioRouteCollectionKey copyWithZone:]
  -[TUAudioRouteCollectionKey mode]
  -[TUAudioRouteCollectionKey isEqualToAudioRouteCollectionKey:]
  -[TUAudioRouteCollectionKey initWithCategory:mode:]


TUAudioFrequencyController : NSObject <AVCAudioPowerSpectrumMeterDelegate>
 @property  <TUAudioFrequencyControllerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *queue
 @property  AVCAudioPowerSpectrumMeter *powerSpectrumMeter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUAudioFrequencyController rawPowerLevelForPowerSpectrum:]
  +[TUAudioFrequencyController normalizedPowerLevelForPowerSpectrum:]

  // instance methods
  -[TUAudioFrequencyController initWithDelegate:queue:]
  -[TUAudioFrequencyController .cxx_destruct]
  -[TUAudioFrequencyController delegate]
  -[TUAudioFrequencyController queue]
  -[TUAudioFrequencyController audioPowerSpectrumMeter:didUpdateAudioPowerSpectrums:]
  -[TUAudioFrequencyController powerSpectrumMeter]
  -[TUAudioFrequencyController meterServerDidDisconnect:]
  -[TUAudioFrequencyController registerParticipantPowerSpectrum:]
  -[TUAudioFrequencyController unregisterParticipantPowerSpectrum:]


TUCallSoundPlayer : NSObject
 @property  TUSoundPlayer *player
 @property  long long currentlyPlayingSoundType
 @property  BOOL playing

  // instance methods
  -[TUCallSoundPlayer isPlaying]
  -[TUCallSoundPlayer .cxx_destruct]
  -[TUCallSoundPlayer setPlayer:]
  -[TUCallSoundPlayer init]
  -[TUCallSoundPlayer player]
  -[TUCallSoundPlayer dealloc]
  -[TUCallSoundPlayer stopPlaying]
  -[TUCallSoundPlayer attemptToPlaySoundType:forCall:completion:]
  -[TUCallSoundPlayer attemptToPlayDescriptor:completion:]
  -[TUCallSoundPlayer currentlyPlayingSoundType]
  -[TUCallSoundPlayer setCurrentlyPlayingSoundType:]
  -[TUCallSoundPlayer attemptToPlaySoundType:forCall:]
  -[TUCallSoundPlayer attemptToPlayDescriptor:]


TUCallSoundPlayerDescriptor : NSObject
 @property  long long soundType
 @property  NSNumber *sound
 @property  unsigned long iterations
 @property  double pauseDuration

  // instance methods
  -[TUCallSoundPlayerDescriptor setSoundType:]
  -[TUCallSoundPlayerDescriptor setSound:]
  -[TUCallSoundPlayerDescriptor sound]
  -[TUCallSoundPlayerDescriptor setIterations:]
  -[TUCallSoundPlayerDescriptor .cxx_destruct]
  -[TUCallSoundPlayerDescriptor soundType]
  -[TUCallSoundPlayerDescriptor iterations]
  -[TUCallSoundPlayerDescriptor setPauseDuration:]
  -[TUCallSoundPlayerDescriptor pauseDuration]
  -[TUCallSoundPlayerDescriptor initWithSoundType:call:]
  -[TUCallSoundPlayerDescriptor initWithSoundType:provider:video:region:]
  -[TUCallSoundPlayerDescriptor initWithSoundType:sound:iterations:pauseDuration:]


TUSandboxExtendedURL : NSObject <NSSecureCoding>
 @property  NSURL *URL
 @property  NSString *sandboxExtensionToken
 @property  long long sandboxExtensionHandle
 @property  int pid
 @property  NSString *sandboxExtensionClass

  // class methods
  +[TUSandboxExtendedURL supportsSecureCoding]

  // instance methods
  -[TUSandboxExtendedURL initWithCoder:]
  -[TUSandboxExtendedURL setPid:]
  -[TUSandboxExtendedURL setURL:]
  -[TUSandboxExtendedURL sandboxExtensionHandle]
  -[TUSandboxExtendedURL .cxx_destruct]
  -[TUSandboxExtendedURL setSandboxExtensionHandle:]
  -[TUSandboxExtendedURL init]
  -[TUSandboxExtendedURL isEqual:]
  -[TUSandboxExtendedURL pid]
  -[TUSandboxExtendedURL sandboxExtensionToken]
  -[TUSandboxExtendedURL URL]
  -[TUSandboxExtendedURL setSandboxExtensionToken:]
  -[TUSandboxExtendedURL dealloc]
  -[TUSandboxExtendedURL encodeWithCoder:]
  -[TUSandboxExtendedURL initWithURL:]
  -[TUSandboxExtendedURL setSandboxExtensionClass:]
  -[TUSandboxExtendedURL sandboxExtensionClass]
  -[TUSandboxExtendedURL isEqualToSandboxExtendedURL:]


TUCallCapabilitiesState : NSObject <NSSecureCoding, NSCopying, TUPubliclyAccessibleCopying>
 @property  BOOL supportsPrimaryCalling
 @property  BOOL supportsBasebandCalling
 @property  BOOL supportsCellularData
 @property  BOOL supportsDisplayingTelephonyCalls
 @property  BOOL supportsDisplayingFaceTimeAudioCalls
 @property  BOOL supportsDisplayingFaceTimeVideoCalls
 @property  BOOL faceTimeAudioAvailable
 @property  BOOL faceTimeVideoAvailable
 @property  BOOL ctCapabilitiesValid
 @property  BOOL accountsMatchForSecondaryCalling
 @property  BOOL accountsSupportSecondaryCalling
 @property  BOOL supportsRelayCalling
 @property  BOOL relayCallingEnabled
 @property  BOOL relayCallingFeaturesEnabled
 @property  int relayCallingAvailability
 @property  NSDictionary *relayCallingDisabledForDeviceID
 @property  NSString *outgoingRelayCallerID
 @property  BOOL supportsTelephonyRelayCalling
 @property  BOOL supportsFaceTimeAudioRelayCalling
 @property  BOOL supportsFaceTimeVideoRelayCalling
 @property  NSArray *cloudCallingDevices
 @property  TUCloudCallingDevice *defaultPairedDevice
 @property  BOOL emergencyCallbackModeEnabled
 @property  BOOL emergencyCallbackPossible
 @property  NSDictionary *senderIdentityCapabilitiesStateByUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCallCapabilitiesState supportsSecureCoding]

  // instance methods
  -[TUCallCapabilitiesState setSupportsRelayCalling:]
  -[TUCallCapabilitiesState isRelayCallingEnabled]
  -[TUCallCapabilitiesState isEmergencyCallbackModeEnabled]
  -[TUCallCapabilitiesState supportsFaceTimeAudioRelayCalling]
  -[TUCallCapabilitiesState setFaceTimeVideoAvailable:]
  -[TUCallCapabilitiesState initWithCoder:]
  -[TUCallCapabilitiesState setSupportsTelephonyRelayCalling:]
  -[TUCallCapabilitiesState setSupportsFaceTimeVideoRelayCalling:]
  -[TUCallCapabilitiesState setRelayCallingDisabledForDeviceID:]
  -[TUCallCapabilitiesState defaultPairedDevice]
  -[TUCallCapabilitiesState setEmergencyCallbackPossible:]
  -[TUCallCapabilitiesState .cxx_destruct]
  -[TUCallCapabilitiesState setOutgoingRelayCallerID:]
  -[TUCallCapabilitiesState supportsDisplayingTelephonyCalls]
  -[TUCallCapabilitiesState supportsDisplayingFaceTimeVideoCalls]
  -[TUCallCapabilitiesState publiclyAccessibleCopy]
  -[TUCallCapabilitiesState setCtCapabilitiesValid:]
  -[TUCallCapabilitiesState setFaceTimeAudioAvailable:]
  -[TUCallCapabilitiesState isEmergencyCallbackPossible]
  -[TUCallCapabilitiesState init]
  -[TUCallCapabilitiesState setCloudCallingDevices:]
  -[TUCallCapabilitiesState setRelayCallingFeaturesEnabled:]
  -[TUCallCapabilitiesState supportsBasebandCalling]
  -[TUCallCapabilitiesState supportsDisplayingFaceTimeAudioCalls]
  -[TUCallCapabilitiesState supportsRelayCalling]
  -[TUCallCapabilitiesState setSupportsCellularData:]
  -[TUCallCapabilitiesState setSenderIdentityCapabilitiesStateByUUID:]
  -[TUCallCapabilitiesState senderIdentityCapabilitiesStateByUUID]
  -[TUCallCapabilitiesState supportsPrimaryCalling]
  -[TUCallCapabilitiesState setSupportsFaceTimeAudioRelayCalling:]
  -[TUCallCapabilitiesState supportsCellularData]
  -[TUCallCapabilitiesState cloudCallingDevices]
  -[TUCallCapabilitiesState setSupportsDisplayingFaceTimeAudioCalls:]
  -[TUCallCapabilitiesState setAccountsSupportSecondaryCalling:]
  -[TUCallCapabilitiesState relayCallingAvailability]
  -[TUCallCapabilitiesState supportsFaceTimeVideoRelayCalling]
  -[TUCallCapabilitiesState isFaceTimeVideoAvailable]
  -[TUCallCapabilitiesState setSupportsPrimaryCalling:]
  -[TUCallCapabilitiesState setSupportsDisplayingFaceTimeVideoCalls:]
  -[TUCallCapabilitiesState accountsSupportSecondaryCalling]
  -[TUCallCapabilitiesState setEmergencyCallbackModeEnabled:]
  -[TUCallCapabilitiesState areRelayCallingFeaturesEnabled]
  -[TUCallCapabilitiesState isFaceTimeAudioAvailable]
  -[TUCallCapabilitiesState publiclyAccessibleCopyWithZone:]
  -[TUCallCapabilitiesState setSupportsBasebandCalling:]
  -[TUCallCapabilitiesState copyWithZone:]
  -[TUCallCapabilitiesState accountsMatchForSecondaryCalling]
  -[TUCallCapabilitiesState areCTCapabilitiesValid]
  -[TUCallCapabilitiesState setAccountsMatchForSecondaryCalling:]
  -[TUCallCapabilitiesState setRelayCallingEnabled:]
  -[TUCallCapabilitiesState relayCallingDisabledForDeviceID]
  -[TUCallCapabilitiesState supportsTelephonyRelayCalling]
  -[TUCallCapabilitiesState setSupportsDisplayingTelephonyCalls:]
  -[TUCallCapabilitiesState encodeWithCoder:]
  -[TUCallCapabilitiesState outgoingRelayCallerID]
  -[TUCallCapabilitiesState setRelayCallingAvailability:]


TUCallGroup : NSObject
 @property  NSArray *calls
 @property  int status
 @property  NSString *displayName

  // instance methods
  -[TUCallGroup displayName]
  -[TUCallGroup initWithCalls:]
  -[TUCallGroup calls]
  -[TUCallGroup methodSignatureForSelector:]
  -[TUCallGroup .cxx_destruct]
  -[TUCallGroup isEqual:]
  -[TUCallGroup status]
  -[TUCallGroup forwardInvocation:]
  -[TUCallGroup initWithCall:]
  -[TUCallGroup isEqualToCallGroup:]


TUCallProviderManager : NSObject <TUCallProviderManagerDataSourceDelegate>
 @property  unsigned long type
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <TUCallProviderManagerDataSource> *dataSource
 @property  NSDictionary *providersByIdentifier
 @property  NSMapTable *delegateToQueue
 @property  TUCallProvider *tinCanProvider
 @property  TUCallProvider *defaultProvider
 @property  TUCallProvider *emergencyProvider
 @property  TUCallProvider *voicemailProvider
 @property  TUCallProvider *telephonyProvider
 @property  TUCallProvider *faceTimeProvider
 @property  NSArray *providers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCallProviderManager serviceForProvider:video:]
  +[TUCallProviderManager defaultProviders]

  // instance methods
  -[TUCallProviderManager removeDelegate:]
  -[TUCallProviderManager launchAppForDialRequest:completion:]
  -[TUCallProviderManager providersByIdentifier]
  -[TUCallProviderManager addDelegate:queue:]
  -[TUCallProviderManager providers]
  -[TUCallProviderManager initWithType:]
  -[TUCallProviderManager providerForFavoritesEntryActionBundleIdentifier:]
  -[TUCallProviderManager providersPassingTest:]
  -[TUCallProviderManager initWithLocalProviders]
  -[TUCallProviderManager initWithDataSource:type:queue:]
  -[TUCallProviderManager providersChangedForDataSource:]
  -[TUCallProviderManager .cxx_destruct]
  -[TUCallProviderManager voicemailProvider]
  -[TUCallProviderManager donateUserIntentForProviderWithIdentifier:]
  -[TUCallProviderManager dataSource]
  -[TUCallProviderManager faceTimeProvider]
  -[TUCallProviderManager init]
  -[TUCallProviderManager setDelegateToQueue:]
  -[TUCallProviderManager providerForRecentCall:]
  -[TUCallProviderManager dialRequestForRecentCall:]
  -[TUCallProviderManager delegateToQueue]
  -[TUCallProviderManager type]
  -[TUCallProviderManager telephonyProvider]
  -[TUCallProviderManager queue]
  -[TUCallProviderManager defaultProvider]
  -[TUCallProviderManager emergencyProvider]
  -[TUCallProviderManager providerWithIdentifier:]
  -[TUCallProviderManager dealloc]
  -[TUCallProviderManager providerWithService:video:]
  -[TUCallProviderManager providerForFavoritesEntry:]
  -[TUCallProviderManager tinCanProvider]
  -[TUCallProviderManager initWithPairedHostDeviceProviders]


TUMetadataCache : NSObject <TUMetadataCacheDataProviderDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSArray *providers
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUMetadataCache classIdentifier]

  // instance methods
  -[TUMetadataCache providers]
  -[TUMetadataCache isEmpty]
  -[TUMetadataCache .cxx_destruct]
  -[TUMetadataCache initWithDataProviders:]
  -[TUMetadataCache _updateCacheWithDestinationIDs:onlyEmptyProviders:]
  -[TUMetadataCache init]
  -[TUMetadataCache dataProvider:requestedRefreshWithDestinationIDs:]
  -[TUMetadataCache updateCacheWithDestinationIDs:]
  -[TUMetadataCache metadataForDestinationID:]
  -[TUMetadataCache queue]
  -[TUMetadataCache updateCacheForEmptyDataProvidersWithDestinationIDs:]
  -[TUMetadataCache initWithQueue:dataProviders:]


TUCallNotificationManager : NSObject
 @property  NSMutableArray *deferredNotificationBlocks

  // instance methods
  -[TUCallNotificationManager remoteAspectRatioChangedForCall:]
  -[TUCallNotificationManager _postNotificationName:object:userInfo:]
  -[TUCallNotificationManager destinationIDChangedForCall:]
  -[TUCallNotificationManager setDeferredNotificationBlocks:]
  -[TUCallNotificationManager displayContextChangedForCall:]
  -[TUCallNotificationManager remoteVideoContentRectChangedForCall:]
  -[TUCallNotificationManager mediaStalledChangedForCall:]
  -[TUCallNotificationManager localSenderIdentityAccountUUIDChangedForCall:]
  -[TUCallNotificationManager isSendingVideoChangedForCall:]
  -[TUCallNotificationManager cameraTypeChangedForCall:]
  -[TUCallNotificationManager .cxx_destruct]
  -[TUCallNotificationManager _postNotificationName:object:]
  -[TUCallNotificationManager conversationChangedForCall:]
  -[TUCallNotificationManager remoteCameraOrientationChangedForCall:]
  -[TUCallNotificationManager isUplinkMutedChangedForCall:]
  -[TUCallNotificationManager needsManualInCallSoundsChangedForCall:]
  -[TUCallNotificationManager postNotificationsForCall:usingComparisonCall:]
  -[TUCallNotificationManager ttyTypeChangedForCall:]
  -[TUCallNotificationManager isOnHoldChangedForCall:]
  -[TUCallNotificationManager connectingChangedForCall:]
  -[TUCallNotificationManager videoDegradedChangedForCall:]
  -[TUCallNotificationManager mediaPropertiesChangedForCall:remoteAspectRatioDidChange:remoteCameraOrientationDidChange:]
  -[TUCallNotificationManager deferNotificationsUntilAfterPerformingBlock:]
  -[TUCallNotificationManager shouldSuppressRingtoneChangedForCall:]
  -[TUCallNotificationManager isSendingAudioChangedForCall:]
  -[TUCallNotificationManager providerContextChangedForCall:]
  -[TUCallNotificationManager videoStreamTokenChangedForCall:]
  -[TUCallNotificationManager wantsHoldMusicChangedForCall:]
  -[TUCallNotificationManager hasSentInvitationChangedForCall:]
  -[TUCallNotificationManager audioPropertiesChangedForCall:]
  -[TUCallNotificationManager postNotificationsForCall:afterUpdatesInBlock:]
  -[TUCallNotificationManager sharingScreenChangedForCall:]
  -[TUCallNotificationManager isFailureExpectedChangedForCall:]
  -[TUCallNotificationManager mixesVoiceWithMediaChangedForCall:]
  -[TUCallNotificationManager postNotificationsForCall:usingComparisonCall:afterUpdatesInBlock:]
  -[TUCallNotificationManager statusChangedForCall:]
  -[TUCallNotificationManager prefersExclusiveAccessToCellularNetworkChangedForCall:]
  -[TUCallNotificationManager remoteUplinkMutedChangedForCall:]
  -[TUCallNotificationManager modelChangedForCall:]
  -[TUCallNotificationManager bluetoothAudioFormatChangedForCall:]
  -[TUCallNotificationManager deferredNotificationBlocks]
  -[TUCallNotificationManager isEmergencyChangedForCall:]
  -[TUCallNotificationManager videoPausedChangedForCall:]
  -[TUCallNotificationManager isThirdPartyVideoChangedForCall:]
  -[TUCallNotificationManager connectedChangedForCall:]
  -[TUCallNotificationManager hardPauseDigitsStateChangedForCall:]
  -[TUCallNotificationManager videoMirroredChangedForCall:]
  -[TUCallNotificationManager isUsingBasebandChangedForCall:]
  -[TUCallNotificationManager remoteParticipantHandlesChangedForCall:]
  -[TUCallNotificationManager supportsTTYWithVoiceChangedForCall:]
  -[TUCallNotificationManager postNotificationsForCallContainer:afterUpdatesInBlock:]
  -[TUCallNotificationManager remoteScreenAspectRatioChangedForCall:]
  -[TUCallNotificationManager conferenceParticipantCallsChangedForCallContainer:conferenceParticipantCalls:]
  -[TUCallNotificationManager remoteScreenOrientationChangedForCall:]
  -[TUCallNotificationManager endpointOnCurrentDeviceChangedForCall:]
  -[TUCallNotificationManager faceTimeIDStatusChangedForCall:]


TUConversationActivityMetadata : NSObject <TUSanitizedCopying, NSSecureCoding>
 @property  TUSandboxExtendedURL *imageFileURL
 @property  TUConversationActivityContext *context
 @property  NSData *linkMetadatablob
 @property  NSURL *fallbackURL
 @property  NSURL *invitationURL
 @property  BOOL supportsContinuationOnTV
 @property  NSString *title
 @property  NSString *subTitle
 @property  NSData *imageData
 @property  long long preferredBroadcastingAttributes
 @property  unsigned long length
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUConversationActivityMetadata supportsSecureCoding]
  +[TUConversationActivityMetadata activityMetadataWithDataBlob:]

  // instance methods
  -[TUConversationActivityMetadata initWithCoder:]
  -[TUConversationActivityMetadata fallbackURL]
  -[TUConversationActivityMetadata setImageData:]
  -[TUConversationActivityMetadata .cxx_destruct]
  -[TUConversationActivityMetadata imageData]
  -[TUConversationActivityMetadata subTitle]
  -[TUConversationActivityMetadata serializedData]
  -[TUConversationActivityMetadata length]
  -[TUConversationActivityMetadata isEqual:]
  -[TUConversationActivityMetadata title]
  -[TUConversationActivityMetadata imageFileURL]
  -[TUConversationActivityMetadata supportsContinuationOnTV]
  -[TUConversationActivityMetadata copyWithZone:]
  -[TUConversationActivityMetadata sanitizedCopy]
  -[TUConversationActivityMetadata encodeWithCoder:]
  -[TUConversationActivityMetadata context]
  -[TUConversationActivityMetadata invitationURL]
  -[TUConversationActivityMetadata linkMetadatablob]
  -[TUConversationActivityMetadata isEquivalentToActivityMetadata:]
  -[TUConversationActivityMetadata sanitizedCopyWithZone:]
  -[TUConversationActivityMetadata initWithContext:linkMetadata:fallbackURL:invitationURL:supportsContinuationOnTV:title:subTitle:imageData:preferredBroadcastingAttributes:]
  -[TUConversationActivityMetadata preferredBroadcastingAttributes]
  -[TUConversationActivityMetadata setImageFileURL:]
  -[TUConversationActivityMetadata _imagePreviewDirectoryPath]
  -[TUConversationActivityMetadata _createImageFolderIfNeeded]
  -[TUConversationActivityMetadata _filePathForImage]
  -[TUConversationActivityMetadata _isEqualToActivityMetadata:]
  -[TUConversationActivityMetadata initWithContext:linkMetadata:fallbackURL:invitationURL:supportsContinuationOnTV:title:subTitle:imageData:]
  -[TUConversationActivityMetadata saveImageToDisk]
  -[TUConversationActivityMetadata removeImageDiskFile]
  -[TUConversationActivityMetadata setLinkMetadatablob:]
  -[TUConversationActivityMetadata setSupportsContinuationOnTV:]
  -[TUConversationActivityMetadata setPreferredBroadcastingAttributes:]


TUMapsMetadataCacheDataProvider : TUMetadataCacheDataProvider
  // instance methods
  -[TUMapsMetadataCacheDataProvider updateCacheWithDestinationIDs:withGroup:]


TUConversationManager : NSObject <TUConversationManagerDataSourceDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <TUConversationManagerDataSource> *dataSource
 @property  NSMapTable *delegateToQueue
 @property  NSObject<OS_dispatch_queue> *nonSessionBackedConversationCreationQueue
 @property  NSMutableSet *callsNotBackedByGroupSessionsPendingUpgrade
 @property  NSMutableSet *conversationsNotBackedByGroupSessions
 @property  BOOL shouldCreateConversationsForCallsNotBackedByGroupSessions
 @property  unsigned long nonSessionBackedConversationCreationMode
 @property  TUConversationMediaController *mediaController
 @property  <TUConversationMessagesGroupProviding> *messagesGroupProvider
 @property  NSSet *activeConversations
 @property  NSSet *incomingPendingConversations
 @property  NSSet *activitySuggestions
 @property  NSDictionary *activityAuthorizedBundleIdentifiers
 @property  BOOL autoSharePlayEnabled
 @property  BOOL sharePlayAvailable
 @property  BOOL screenSharingAvailable
 @property  NSSet *activatedConversationLinks
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUConversationManager memorySize]
  +[TUConversationManager supportsConversations]
  +[TUConversationManager conversationWithRemoteMembers:andLink:fromConversations:]
  +[TUConversationManager conversationWithRemoteMembers:andLink:fromConversations:matchingVideo:backedByGroupSession:]
  +[TUConversationManager conversationWithPseudonym:fromConversations:]
  +[TUConversationManager pendingConversationWithLink:fromConversations:]
  +[TUConversationManager conversationsWithRemoteMembers:andLink:fromConversations:]
  +[TUConversationManager conversationWithUUID:fromConversations:]
  +[TUConversationManager remoteMembersForCall:]
  +[TUConversationManager conversationStateForCall:]
  +[TUConversationManager activeRemoteParticipantsForCall:remoteMembers:]
  +[TUConversationManager isAddPersonEnabled]
  +[TUConversationManager maximumNumberOfInvitedMembers]
  +[TUConversationManager allowsVideo]
  +[TUConversationManager allowsScreenSharing]
  +[TUConversationManager allowsScreenSharingWithVideo]
  +[TUConversationManager supportsEffects]

  // instance methods
  -[TUConversationManager removeDelegate:]
  -[TUConversationManager addDelegate:queue:]
  -[TUConversationManager conversation:receivedActivitySessionEvent:]
  -[TUConversationManager mediaController]
  -[TUConversationManager activateConversationNoticeWithActionURL:bundleIdentifier:]
  -[TUConversationManager initWithDataSource:]
  -[TUConversationManager addRemoteMembers:otherInvitedHandles:toConversation:]
  -[TUConversationManager scheduleConversationLinkCheckInInitial:]
  -[TUConversationManager invalidateLink:completionHandler:]
  -[TUConversationManager autoSharePlayEnabled]
  -[TUConversationManager buzzMember:conversation:]
  -[TUConversationManager activatedConversationLinks]
  -[TUConversationManager receivedTrackedPendingMember:forConversationLink:]
  -[TUConversationManager activeConversationWithRemoteMembers:andLink:matchingVideo:backedByGroupSession:]
  -[TUConversationManager generateLinkWithInvitedMemberHandles:completionHandler:]
  -[TUConversationManager sharePlayAvailableChanged:]
  -[TUConversationManager setGridDisplayMode:conversation:]
  -[TUConversationManager checkLinkValidity:completionHandler:]
  -[TUConversationManager conversationUpdatedMessagesGroupPhoto:]
  -[TUConversationManager messagesGroupProvider]
  -[TUConversationManager removeActivitySuggestion:]
  -[TUConversationManager setAudioEnabled:forRemoteParticipantWithIdentifier:conversation:]
  -[TUConversationManager .cxx_destruct]
  -[TUConversationManager createActivitySession:onConversation:]
  -[TUConversationManager conversationsChangedFromOldConversationsByGroupUUID:newConversationsByGroupUUID:]
  -[TUConversationManager conversationManagerDataSource:didChangeActivatedConversationLinks:]
  -[TUConversationManager setIgnoreLMIRequests:forConversation:]
  -[TUConversationManager updateConversationsNotBackedByGroupSessionWithCall:]
  -[TUConversationManager callsNotBackedByGroupSessionsPendingUpgrade]
  -[TUConversationManager shouldCreateConversationsForCallsNotBackedByGroupSessions]
  -[TUConversationManager remoteScreenShareEndedWithReason:]
  -[TUConversationManager conversationsChangedForDataSource:oldConversationsByGroupUUID:newConversationsByGroupUUID:creationQueue:]
  -[TUConversationManager launchApplicationForActivitySessionUUID:forceBackground:completionHandler:]
  -[TUConversationManager approvePendingMember:forConversation:]
  -[TUConversationManager activeConversationWithLinkForCall:]
  -[TUConversationManager fetchUpcomingNoticeWithCompletionHandler:]
  -[TUConversationManager conversation:requestedScreenShareForParticipant:]
  -[TUConversationManager setAutoSharePlayEnabled:]
  -[TUConversationManager launchApplicationForActivitySessionUUID:completionHandler:]
  -[TUConversationManager setDownlinkMuted:forRemoteParticipantsInConversation:]
  -[TUConversationManager dataSource]
  -[TUConversationManager conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:]
  -[TUConversationManager getMessagesGroupDetailsForConversationUUID:completionHandler:]
  -[TUConversationManager activateLink:completionHandler:]
  -[TUConversationManager activitySuggestions]
  -[TUConversationManager conversationsChangedForDataSource:oldConversationsByGroupUUID:]
  -[TUConversationManager init]
  -[TUConversationManager pendingConversationWithLink:]
  -[TUConversationManager refreshActiveConversations]
  -[TUConversationManager createConversationForCallNotBackedByGroupSession:]
  -[TUConversationManager activeConversations]
  -[TUConversationManager nonSessionBackedConversationCreationQueue]
  -[TUConversationManager setActivityAuthorization:forBundleIdentifier:]
  -[TUConversationManager delegateToQueue]
  -[TUConversationManager conversationManagerDataSource:conversation:appLaunchState:forActivitySession:]
  -[TUConversationManager launchApplicationForActivitySession:completionHandler:]
  -[TUConversationManager callPendingUpgradeInConversationsWithGroupUUID:]
  -[TUConversationManager generateLinkForConversation:completionHandler:]
  -[TUConversationManager setCallsNotBackedByGroupSessionsPendingUpgrade:]
  -[TUConversationManager conversationsNotBackedByGroupSessions]
  -[TUConversationManager serverDisconnectedForDataSource:oldConversationsByGroupUUID:oldActivitySuggestions:]
  -[TUConversationManager addInvitedMemberHandles:toConversationLink:completionHandler:]
  -[TUConversationManager conversation:participant:addedNotice:]
  -[TUConversationManager conversationUpdateMessagesGroupPhoto:]
  -[TUConversationManager incomingPendingConversations]
  -[TUConversationManager presentDismissalAlertForActivitySession:onConversation:]
  -[TUConversationManager registerWithCompletionHandler:]
  -[TUConversationManager callPropertiesChanged:]
  -[TUConversationManager setMessagesGroupProvider:]
  -[TUConversationManager activityAuthorizedBundleIdentifiers]
  -[TUConversationManager setNonSessionBackedConversationCreationMode:]
  -[TUConversationManager conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:]
  -[TUConversationManager getInactiveLinkWithCompletionHandler:]
  -[TUConversationManager setLinkName:forConversationLink:completionHandler:]
  -[TUConversationManager isScreenSharingAvailable]
  -[TUConversationManager activityAuthorizationsChangedForDataSource:oldActivityAuthorizedBundleIdentifiers:]
  -[TUConversationManager requestScreenShareFromMember:conversation:]
  -[TUConversationManager activeConversationWithGroupUUID:]
  -[TUConversationManager linkSyncStateIncludeLinks:WithCompletion:]
  -[TUConversationManager setConversationsNotBackedByGroupSessions:]
  -[TUConversationManager remoteScreenShareAttributesChanged:isLocallySharing:]
  -[TUConversationManager queue]
  -[TUConversationManager getLatestRemoteScreenShareAttributesWithCompletionHandler:]
  -[TUConversationManager kickMember:conversation:]
  -[TUConversationManager conversationsChangedForDataSource:updatedIncomingPendingConversationsByGroupUUID:]
  -[TUConversationManager pruneConversationsPendingUpgradeInConversationsWithGroupUUID:]
  -[TUConversationManager conversation:addedMembersLocally:]
  -[TUConversationManager dealloc]
  -[TUConversationManager isSharePlayAvailable]
  -[TUConversationManager activeConversationWithRemoteMembers:andLink:]
  -[TUConversationManager setShouldCreateConversationsForCallsNotBackedByGroupSessions:]
  -[TUConversationManager generateLinkWithInvitedMemberHandles:linkLifetimeScope:completionHandler:]
  -[TUConversationManager activitySuggestionsChangedForDataSource:oldActivitySuggestions:]
  -[TUConversationManager screenSharingAvailableChanged:]
  -[TUConversationManager setNonSessionBackedConversationCreationQueue:]
  -[TUConversationManager updateMessagesGroupName:onConversation:]
  -[TUConversationManager leaveActivitySession:onConversation:]
  -[TUConversationManager conversation:buzzedMember:]
  -[TUConversationManager conversation:didChangeStateForActivitySession:]
  -[TUConversationManager rejectPendingMember:forConversation:]
  -[TUConversationManager removeConversationNoticeWithUUID:]
  -[TUConversationManager conversationManagerDataSource:messagesGroupDetailsForMessagesGroupId:completionHandler:]
  -[TUConversationManager getActiveLinksWithCreatedOnly:completionHandler:]
  -[TUConversationManager addActivitySuggestion:]
  -[TUConversationManager renewLink:expirationDate:reason:completionHandler:]
  -[TUConversationManager setVideoEnabled:forRemoteParticipantWithIdentifier:conversation:]
  -[TUConversationManager addRemoteMembers:toConversation:]
  -[TUConversationManager nonSessionBackedConversationCreationMode]
  -[TUConversationManager updateConversationsNotBackedByGroupSessionWithCall:conversationsByGroupUUID:creationQueue:]


TUCloudCallingDevice : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *name
 @property  NSString *modelIdentifier
 @property  NSString *uniqueID
 @property  NSArray *linkedUserURIs
 @property  BOOL defaultPairedDevice
 @property  BOOL supportsRestrictingSecondaryCalling

  // class methods
  +[TUCloudCallingDevice supportsSecureCoding]

  // instance methods
  -[TUCloudCallingDevice modelIdentifier]
  -[TUCloudCallingDevice name]
  -[TUCloudCallingDevice initWithCoder:]
  -[TUCloudCallingDevice uniqueID]
  -[TUCloudCallingDevice setDefaultPairedDevice:]
  -[TUCloudCallingDevice .cxx_destruct]
  -[TUCloudCallingDevice setName:]
  -[TUCloudCallingDevice linkedUserURIs]
  -[TUCloudCallingDevice isEqual:]
  -[TUCloudCallingDevice setModelIdentifier:]
  -[TUCloudCallingDevice setUniqueID:]
  -[TUCloudCallingDevice copyWithZone:]
  -[TUCloudCallingDevice isDefaultPairedDevice]
  -[TUCloudCallingDevice encodeWithCoder:]
  -[TUCloudCallingDevice supportsRestrictingSecondaryCalling]
  -[TUCloudCallingDevice setLinkedUserURIs:]
  -[TUCloudCallingDevice setSupportsRestrictingSecondaryCalling:]


TUPrivacyManager : NSObject
 @property  NSArray *privacyRules

  // class methods
  +[TUPrivacyManager sharedPrivacyManager]

  // instance methods
  -[TUPrivacyManager removeRule:]
  -[TUPrivacyManager isIncomingCommunicationBlockedForPhoneNumber:]
  -[TUPrivacyManager setBlockIncomingCommunication:forPhoneNumber:]
  -[TUPrivacyManager isIncomingCommunicationBlockedForBusinessID:]
  -[TUPrivacyManager init]
  -[TUPrivacyManager _handleBlockListChanged:]
  -[TUPrivacyManager setBlockIncomingCommunication:forBusinessID:]
  -[TUPrivacyManager allBlacklistRules]
  -[TUPrivacyManager addRule:]
  -[TUPrivacyManager isIncomingCommunicationBlockedForEmailAddress:]
  -[TUPrivacyManager dealloc]
  -[TUPrivacyManager privacyRules]
  -[TUPrivacyManager setBlockIncomingCommunication:forEmailAddress:]
  -[TUPrivacyManager isIncomingCommunicationBlockedForHandle:]


TUPrivacyRule : NSObject <NSCoding>
 @property  int type
 @property  TUPhoneNumber *phoneNumber
 @property  NSString *email
 @property  NSString *businessID

  // class methods
  +[TUPrivacyRule ruleForPhoneNumber:]
  +[TUPrivacyRule ruleForEmail:]
  +[TUPrivacyRule ruleForBusinessID:]

  // instance methods
  -[TUPrivacyRule businessID]
  -[TUPrivacyRule initWithCoder:]
  -[TUPrivacyRule .cxx_destruct]
  -[TUPrivacyRule phoneNumber]
  -[TUPrivacyRule email]
  -[TUPrivacyRule isEqual:]
  -[TUPrivacyRule type]
  -[TUPrivacyRule encodeWithCoder:]
  -[TUPrivacyRule initForPhoneNumber:]
  -[TUPrivacyRule initForEmail:]
  -[TUPrivacyRule initForBusinessID:]


TUPhoneNumber : NSObject <NSCoding, NSSecureCoding>
 @property  ^{__CFPhoneNumber=} phoneNumberRef
 @property  NSString *digits
 @property  NSString *countryCode
 @property  NSString *formattedRepresentation
 @property  NSString *formattedInternationalRepresentation
 @property  NSString *unformattedInternationalRepresentation

  // class methods
  +[TUPhoneNumber supportsSecureCoding]
  +[TUPhoneNumber areDigits:equalToDigits:usingCountryCode:]
  +[TUPhoneNumber phoneNumberWithDigits:countryCode:]
  +[TUPhoneNumber phoneNumberWithCFPhoneNumberRef:]

  // instance methods
  -[TUPhoneNumber initWithDigits:countryCode:]
  -[TUPhoneNumber initWithCoder:]
  -[TUPhoneNumber countryCode]
  -[TUPhoneNumber formattedRepresentation]
  -[TUPhoneNumber isEqual:]
  -[TUPhoneNumber digits]
  -[TUPhoneNumber setPhoneNumberRef:]
  -[TUPhoneNumber initWithCFPhoneNumberRef:]
  -[TUPhoneNumber unformattedInternationalRepresentation]
  -[TUPhoneNumber phoneNumberRef]
  -[TUPhoneNumber formattedInternationalRepresentation]
  -[TUPhoneNumber dealloc]
  -[TUPhoneNumber encodeWithCoder:]


TUThumperCTCapabilitiesState : TUCTCapabilitiesState <NSSecureCoding, NSCopying, TUPubliclyAccessibleCopying>
 @property  BOOL approved
 @property  NSSet *approvedSecondaryDeviceIDs
 @property  NSString *accountID
 @property  BOOL associated
 @property  NSString *localDeviceID
 @property  BOOL supportsDefaultPairedDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUThumperCTCapabilitiesState supportsSecureCoding]
  +[TUThumperCTCapabilitiesState unarchivedObjectClasses]

  // instance methods
  -[TUThumperCTCapabilitiesState isApproved]
  -[TUThumperCTCapabilitiesState initWithCoder:]
  -[TUThumperCTCapabilitiesState accountID]
  -[TUThumperCTCapabilitiesState .cxx_destruct]
  -[TUThumperCTCapabilitiesState setAccountID:]
  -[TUThumperCTCapabilitiesState publiclyAccessibleCopy]
  -[TUThumperCTCapabilitiesState init]
  -[TUThumperCTCapabilitiesState isEqual:]
  -[TUThumperCTCapabilitiesState isAssociated]
  -[TUThumperCTCapabilitiesState localDeviceID]
  -[TUThumperCTCapabilitiesState publiclyAccessibleCopyWithZone:]
  -[TUThumperCTCapabilitiesState copyWithZone:]
  -[TUThumperCTCapabilitiesState setLocalDeviceID:]
  -[TUThumperCTCapabilitiesState encodeWithCoder:]
  -[TUThumperCTCapabilitiesState approvedSecondaryDeviceIDs]
  -[TUThumperCTCapabilitiesState supportsDefaultPairedDevice]
  -[TUThumperCTCapabilitiesState isEqualToCapabilitiesState:]
  -[TUThumperCTCapabilitiesState initWithCapabilityInfo:]
  -[TUThumperCTCapabilitiesState setApproved:]
  -[TUThumperCTCapabilitiesState setApprovedSecondaryDeviceIDs:]
  -[TUThumperCTCapabilitiesState setAssociated:]
  -[TUThumperCTCapabilitiesState setSupportsDefaultPairedDevice:]


TUDynamicCallDisplayContext : TUMutableCallDisplayContext
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  CXCallDirectoryManager *callDirectoryManager
 @property  <TUDynamicCallDisplayContextDelegate> *delegate

  // instance methods
  -[TUDynamicCallDisplayContext setSerialQueue:]
  -[TUDynamicCallDisplayContext initWithCoder:]
  -[TUDynamicCallDisplayContext .cxx_destruct]
  -[TUDynamicCallDisplayContext setDelegate:]
  -[TUDynamicCallDisplayContext serialQueue]
  -[TUDynamicCallDisplayContext init]
  -[TUDynamicCallDisplayContext delegate]
  -[TUDynamicCallDisplayContext callDirectoryManager]
  -[TUDynamicCallDisplayContext initWithCall:contactIdentifier:serialQueue:]
  -[TUDynamicCallDisplayContext initWithCall:contactIdentifier:serialQueue:contactsDataSource:]
  -[TUDynamicCallDisplayContext _initializeSynchronousStateWithCall:contactIdentifier:contactsDataProvider:]
  -[TUDynamicCallDisplayContext _initializeAsynchronousStateWithCall:]
  -[TUDynamicCallDisplayContext setCallDirectoryManager:]
  -[TUDynamicCallDisplayContext initWithDisplayContext:call:serialQueue:]


TUVideoDeviceControllerProvider : NSObject <AVConferencePreviewClientDelegate, TUVideoDeviceControllerProvider, TUVideoEffectsProvider>
 @property  AVConferencePreview *preview
 @property  BOOL previewRunning
 @property  NSString *localCameraUID
 @property  NSArray *inputDevices
 @property  VideoAttributes *localVideoAttributes
 @property  BOOL cinematicFramingEnabled
 @property  BOOL allowsCameraBlurToggling
 @property  BOOL cameraBlurEnabled
 @property  <TUVideoDeviceControllerProviderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  TUVideoEffect *currentVideoEffect
 @property  NSArray *availableVideoEffects

  // class methods
  +[TUVideoDeviceControllerProvider prewarm]

  // instance methods
  -[TUVideoDeviceControllerProvider setCinematicFramingEnabled:]
  -[TUVideoDeviceControllerProvider pausePreview]
  -[TUVideoDeviceControllerProvider preview]
  -[TUVideoDeviceControllerProvider stopPreview]
  -[TUVideoDeviceControllerProvider setLocalScreenAttributes:]
  -[TUVideoDeviceControllerProvider beginPIPToPreviewAnimation]
  -[TUVideoDeviceControllerProvider localScreenAttributesForVideoAttributes:]
  -[TUVideoDeviceControllerProvider .cxx_destruct]
  -[TUVideoDeviceControllerProvider setDelegate:]
  -[TUVideoDeviceControllerProvider startPreview]
  -[TUVideoDeviceControllerProvider init]
  -[TUVideoDeviceControllerProvider setLocalVideoAttributes:]
  -[TUVideoDeviceControllerProvider inputDevices]
  -[TUVideoDeviceControllerProvider delegate]
  -[TUVideoDeviceControllerProvider dealloc]
  -[TUVideoDeviceControllerProvider endPIPToPreviewAnimation]
  -[TUVideoDeviceControllerProvider isCinematicFramingEnabled]
  -[TUVideoDeviceControllerProvider localVideoAttributes]
  -[TUVideoDeviceControllerProvider endPreviewToPIPAnimation]
  -[TUVideoDeviceControllerProvider beginPreviewToPIPAnimation]
  -[TUVideoDeviceControllerProvider observeValueForKeyPath:ofObject:change:context:]
  -[TUVideoDeviceControllerProvider setCameraZoomFactor:]
  -[TUVideoDeviceControllerProvider localCameraUID]
  -[TUVideoDeviceControllerProvider setLocalCameraWithUID:]
  -[TUVideoDeviceControllerProvider isPreviewRunning]
  -[TUVideoDeviceControllerProvider localVideoLayer:]
  -[TUVideoDeviceControllerProvider setLocalVideoLayer:front:]
  -[TUVideoDeviceControllerProvider setCurrentVideoEffect:]
  -[TUVideoDeviceControllerProvider currentVideoEffect]
  -[TUVideoDeviceControllerProvider availableVideoEffects]
  -[TUVideoDeviceControllerProvider thumbnailImageForVideoEffectName:]
  -[TUVideoDeviceControllerProvider getSnapshot]
  -[TUVideoDeviceControllerProvider supportsCameraBlurForDevice:]
  -[TUVideoDeviceControllerProvider allowsCameraBlurToggling]
  -[TUVideoDeviceControllerProvider setAllowsCameraBlurToggling:]
  -[TUVideoDeviceControllerProvider isCameraBlurEnabled]
  -[TUVideoDeviceControllerProvider setCameraBlurEnabled:]
  -[TUVideoDeviceControllerProvider rampCameraZoomFactor:withRate:]
  -[TUVideoDeviceControllerProvider didStartPreview]
  -[TUVideoDeviceControllerProvider didPausePreview]
  -[TUVideoDeviceControllerProvider didStopPreview]
  -[TUVideoDeviceControllerProvider didReceiveFirstPreviewFrameFromCameraUniqueID:]
  -[TUVideoDeviceControllerProvider didChangeLocalVideoAttributes:]
  -[TUVideoDeviceControllerProvider didReceiveErrorFromCameraUniqueID:error:]
  -[TUVideoDeviceControllerProvider didGetSnapshot:]
  -[TUVideoDeviceControllerProvider cameraDidBecomeAvailableForUniqueID:]
  -[TUVideoDeviceControllerProvider cameraZoomAvailabilityDidChange:]
  -[TUVideoDeviceControllerProvider cameraCinematicFramingAvailabilityDidChange:]
  -[TUVideoDeviceControllerProvider captureDevicesChanged:]
  -[TUVideoDeviceControllerProvider queryAVCaptureDeviceIfNeeded]


TUConversationReport : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timebase
 @property  NSUUID *conversationID

  // class methods
  +[TUConversationReport supportsSecureCoding]

  // instance methods
  -[TUConversationReport conversationID]
  -[TUConversationReport initWithCoder:]
  -[TUConversationReport .cxx_destruct]
  -[TUConversationReport init]
  -[TUConversationReport timebase]
  -[TUConversationReport isEqual:]
  -[TUConversationReport copyWithZone:]
  -[TUConversationReport encodeWithCoder:]
  -[TUConversationReport initWithConversationID:timebase:]
  -[TUConversationReport isEqualToConversationReport:]


TUSearchModuleManager : NSObject
  // class methods
  +[TUSearchModuleManager recentsModuleClasses]
  +[TUSearchModuleManager searchModuleClasses]


TUAutocompleteResultPartitioner : NSObject
 @property  NSMutableArray *normalResultsArray
 @property  NSMutableArray *foundInMailResultsArray
 @property  NSMutableArray *foundOnServersResultsArray
 @property  TUSearchController *searchController

  // class methods
  +[TUAutocompleteResultPartitioner sourceTypeIsFoundInMail:]
  +[TUAutocompleteResultPartitioner sourceTypeIsFoundOnServers:]

  // instance methods
  -[TUAutocompleteResultPartitioner searchController]
  -[TUAutocompleteResultPartitioner setSearchController:]
  -[TUAutocompleteResultPartitioner .cxx_destruct]
  -[TUAutocompleteResultPartitioner init]
  -[TUAutocompleteResultPartitioner searchResults]
  -[TUAutocompleteResultPartitioner foundInMailResultsArray]
  -[TUAutocompleteResultPartitioner foundOnServersResultsArray]
  -[TUAutocompleteResultPartitioner normalResultsArray]
  -[TUAutocompleteResultPartitioner addResult:]
  -[TUAutocompleteResultPartitioner setNormalResultsArray:]
  -[TUAutocompleteResultPartitioner setFoundInMailResultsArray:]
  -[TUAutocompleteResultPartitioner setFoundOnServersResultsArray:]


TUSenderIdentity : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSUUID *accountUUID
 @property  TUHandle *handle
 @property  NSString *ISOCountryCode
 @property  NSString *localizedName
 @property  NSString *localizedShortName
 @property  NSString *localizedServiceName

  // class methods
  +[TUSenderIdentity supportsSecureCoding]

  // instance methods
  -[TUSenderIdentity localizedShortName]
  -[TUSenderIdentity localizedName]
  -[TUSenderIdentity UUID]
  -[TUSenderIdentity initWithCoder:]
  -[TUSenderIdentity .cxx_destruct]
  -[TUSenderIdentity initWithUUID:accountUUID:localizedName:localizedShortName:localizedServiceName:handle:]
  -[TUSenderIdentity isEqual:]
  -[TUSenderIdentity handle]
  -[TUSenderIdentity accountUUID]
  -[TUSenderIdentity copyWithZone:]
  -[TUSenderIdentity ISOCountryCode]
  -[TUSenderIdentity encodeWithCoder:]
  -[TUSenderIdentity initWithUUID:accountUUID:ISOCountryCode:localizedName:localizedShortName:localizedServiceName:handle:]
  -[TUSenderIdentity initWithSenderIdentity:]
  -[TUSenderIdentity localizedServiceName]
  -[TUSenderIdentity isEqualToSenderIdentity:]
  -[TUSenderIdentity initWithUUID:accountUUID:localizedName:localizedShortName:handle:]


TUConversationActivityEvent : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *sessionUUID
 @property  TUConversationParticipant *originator
 @property  long long type
 @property  long long queueItemType
 @property  NSString *item
 @property  NSString *localizedDescription
 @property  TUConversationActivitySession *session
 @property  NSURL *url

  // class methods
  +[TUConversationActivityEvent supportsSecureCoding]

  // instance methods
  -[TUConversationActivityEvent setSessionUUID:]
  -[TUConversationActivityEvent setItem:]
  -[TUConversationActivityEvent setOriginator:]
  -[TUConversationActivityEvent localizedDescription]
  -[TUConversationActivityEvent initWithCoder:]
  -[TUConversationActivityEvent originator]
  -[TUConversationActivityEvent url]
  -[TUConversationActivityEvent setType:]
  -[TUConversationActivityEvent .cxx_destruct]
  -[TUConversationActivityEvent setSession:]
  -[TUConversationActivityEvent item]
  -[TUConversationActivityEvent setUrl:]
  -[TUConversationActivityEvent sessionUUID]
  -[TUConversationActivityEvent isEqual:]
  -[TUConversationActivityEvent type]
  -[TUConversationActivityEvent copyWithZone:]
  -[TUConversationActivityEvent session]
  -[TUConversationActivityEvent encodeWithCoder:]
  -[TUConversationActivityEvent queueItemType]
  -[TUConversationActivityEvent setQueueItemType:]
  -[TUConversationActivityEvent isEqualToConversationActivityEvent:]
  -[TUConversationActivityEvent initWithSessionUUID:originator:type:]


TUCallProvider : NSObject <NSSecureCoding, NSCopying>
 @property  NSObject<OS_tcc_identity> *assumedIdentity
 @property  NSString *identifier
 @property  NSURL *bundleURL
 @property  NSString *bundleIdentifier
 @property  NSSet *supportedHandleTypes
 @property  NSArray *emergencyHandles
 @property  NSArray *emergencyLabeledHandles
 @property  NSArray *handoffIdentifiers
 @property  NSOrderedSet *prioritizedSenderIdentities
 @property  NSURL *ringtoneSoundURL
 @property  TUSandboxExtendedURL *sandboxExtendedRingtoneSoundURL
 @property  NSURL *originalRingtoneSoundURL
 @property  NSData *iconTemplateImageData
 @property  NSString *localizedName
 @property  unsigned long maximumCallGroups
 @property  unsigned long maximumCallsPerCallGroup
 @property  BOOL supportsAudioOnly
 @property  BOOL supportsAudioAndVideo
 @property  BOOL supportsEmergency
 @property  BOOL supportsVoicemail
 @property  BOOL supportsRecents
 @property  BOOL supportsCurrentPlatform
 @property  unsigned int audioSessionID
 @property  long long sandboxExtensionHandle
 @property  BOOL telephonyProvider
 @property  BOOL faceTimeProvider
 @property  BOOL superboxProvider

  // class methods
  +[TUCallProvider supportsSecureCoding]

  // instance methods
  -[TUCallProvider localizedName]
  -[TUCallProvider supportsCurrentPlatform]
  -[TUCallProvider initWithCoder:]
  -[TUCallProvider setLocalizedName:]
  -[TUCallProvider bundleIdentifier]
  -[TUCallProvider senderIdentityForAccountUUID:]
  -[TUCallProvider initWithIdentifier:]
  -[TUCallProvider sandboxExtensionHandle]
  -[TUCallProvider .cxx_destruct]
  -[TUCallProvider assumedIdentity]
  -[TUCallProvider setAudioSessionID:]
  -[TUCallProvider setBundleIdentifier:]
  -[TUCallProvider bundleURL]
  -[TUCallProvider prioritizedSenderIdentities]
  -[TUCallProvider setSandboxExtensionHandle:]
  -[TUCallProvider init]
  -[TUCallProvider isEqual:]
  -[TUCallProvider identifier]
  -[TUCallProvider setIdentifier:]
  -[TUCallProvider setBundleURL:]
  -[TUCallProvider copyWithZone:]
  -[TUCallProvider audioSessionID]
  -[TUCallProvider encodeWithCoder:]
  -[TUCallProvider isSystemProvider]
  -[TUCallProvider supportsAudioOnly]
  -[TUCallProvider supportsAudioAndVideo]
  -[TUCallProvider isTelephonyProvider]
  -[TUCallProvider isFaceTimeProvider]
  -[TUCallProvider setSupportsAudioOnly:]
  -[TUCallProvider setSupportsEmergency:]
  -[TUCallProvider setSupportsVoicemail:]
  -[TUCallProvider setSupportsRecents:]
  -[TUCallProvider setSupportedHandleTypes:]
  -[TUCallProvider setSupportsAudioAndVideo:]
  -[TUCallProvider sandboxExtendedRingtoneSoundURL]
  -[TUCallProvider originalRingtoneSoundURL]
  -[TUCallProvider iconTemplateImageData]
  -[TUCallProvider maximumCallGroups]
  -[TUCallProvider maximumCallsPerCallGroup]
  -[TUCallProvider supportsEmergency]
  -[TUCallProvider supportsVoicemail]
  -[TUCallProvider supportsRecents]
  -[TUCallProvider supportedHandleTypes]
  -[TUCallProvider emergencyHandles]
  -[TUCallProvider emergencyLabeledHandles]
  -[TUCallProvider handoffIdentifiers]
  -[TUCallProvider isSuperboxProvider]
  -[TUCallProvider isTinCanProvider]
  -[TUCallProvider setSandboxExtendedRingtoneSoundURL:]
  -[TUCallProvider setPrioritizedSenderIdentities:]
  -[TUCallProvider isEqualToCallProvider:]
  -[TUCallProvider setEmergencyHandles:]
  -[TUCallProvider setEmergencyLabeledHandles:]
  -[TUCallProvider setHandoffIdentifiers:]
  -[TUCallProvider setOriginalRingtoneSoundURL:]
  -[TUCallProvider setIconTemplateImageData:]
  -[TUCallProvider setMaximumCallGroups:]
  -[TUCallProvider setMaximumCallsPerCallGroup:]
  -[TUCallProvider setSupportsCurrentPlatform:]
  -[TUCallProvider supportsHandleType:]
  -[TUCallProvider supportsShowingInCallUI]
  -[TUCallProvider prefersShowingInCallUI]
  -[TUCallProvider hasRestrictionsInRetailEnvironment]
  -[TUCallProvider senderIdentityForUUID:]
  -[TUCallProvider senderIdentityForHandle:]
  -[TUCallProvider displayAppBundleIdentifier]
  -[TUCallProvider inCallUIBundleIdentifier]
  -[TUCallProvider ringtoneSoundURL]
  -[TUCallProvider setRingtoneSoundURL:]
  -[TUCallProvider setSenderIdentities:]
  -[TUCallProvider senderIdentities]


TUProxyCall : TUCall <AVCRemoteVideoClientDelegate, NSSecureCoding>
 @property  <TURemoteVideoClient> *localVideo
 @property  <TURemoteVideoClient> *remoteVideo
 @property  NSMutableDictionary *remoteVideoModeToLayer
 @property  NSMutableDictionary *localVideoModeToLayer
 @property  {CGSize=dd} remoteScreenPortraitAspectRatio
 @property  {CGSize=dd} remoteScreenLandscapeAspectRatio
 @property  long long remoteScreenOrientation
 @property  {CGSize=dd} remoteAspectRatio
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} remoteVideoContentRect
 @property  long long cameraType
 @property  long long remoteCameraOrientation
 @property  <TUCallServicesProxyCallActions> *proxyCallActionsDelegate
 @property  NSString *announceProviderIdentifier
 @property  TUHandle *handle
 @property  NSString *isoCountryCode
 @property  NSString *callUUID
 @property  int callStatus
 @property  BOOL hostedOnCurrentDevice
 @property  TUCallProvider *backingProvider
 @property  TUCallProvider *displayProvider
 @property  BOOL outgoing
 @property  BOOL voicemail
 @property  NSString *callerNameFromNetwork
 @property  BOOL isVideo
 @property  BOOL blocked
 @property  BOOL emergency
 @property  BOOL failureExpected
 @property  BOOL international
 @property  BOOL sos
 @property  BOOL usingBaseband
 @property  int ttyType
 @property  BOOL supportsTTYWithVoice
 @property  long long bluetoothAudioFormat
 @property  NSString *audioCategory
 @property  NSString *audioMode
 @property  BOOL needsManualInCallSounds
 @property  NSDictionary *endedReasonUserInfo
 @property  NSString *endedErrorString
 @property  NSString *endedReasonString
 @property  NSData *localFrequency
 @property  NSData *remoteFrequency
 @property  float remoteMeterLevel
 @property  float localMeterLevel
 @property  NSUUID *callGroupUUID
 @property  int callRelaySupport
 @property  BOOL mediaStalled
 @property  BOOL videoDegraded
 @property  BOOL videoPaused
 @property  BOOL videoMirrored
 @property  BOOL isSendingAudio
 @property  BOOL thirdPartyVideo
 @property  BOOL sharingScreen
 @property  long long videoStreamToken
 @property  long long inputAudioPowerSpectrumToken
 @property  long long outputAudioPowerSpectrumToken
 @property  NSDictionary *providerContext
 @property  TUCallDisplayContext *displayContext
 @property  NSSet *remoteParticipantHandles
 @property  BOOL prefersExclusiveAccessToCellularNetwork
 @property  BOOL remoteUplinkMuted
 @property  NSUUID *localSenderIdentityUUID
 @property  NSUUID *localSenderIdentityAccountUUID
 @property  BOOL shouldSuppressInCallUI
 @property  BOOL mutuallyExclusiveCall
 @property  BOOL wantsStagingArea
 @property  int originatingUIType
 @property  BOOL conversation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUProxyCall supportsSecureCoding]
  +[TUProxyCall proxyCallWithCall:]

  // instance methods
  -[TUProxyCall setAudioCategory:]
  -[TUProxyCall audioCategory]
  -[TUProxyCall isBlocked]
  -[TUProxyCall setVideoMirrored:]
  -[TUProxyCall setIsoCountryCode:]
  -[TUProxyCall isOutgoing]
  -[TUProxyCall isoCountryCode]
  -[TUProxyCall setHandle:]
  -[TUProxyCall isVideo]
  -[TUProxyCall initWithCoder:]
  -[TUProxyCall setUplinkMuted:]
  -[TUProxyCall isSOS]
  -[TUProxyCall setDownlinkMuted:]
  -[TUProxyCall .cxx_destruct]
  -[TUProxyCall ttyType]
  -[TUProxyCall isVideoMirrored]
  -[TUProxyCall setCameraType:]
  -[TUProxyCall cameraType]
  -[TUProxyCall disconnectWithReason:]
  -[TUProxyCall setCallStatus:]
  -[TUProxyCall setLocalSenderIdentityUUID:]
  -[TUProxyCall setEmergency:]
  -[TUProxyCall isUplinkMuted]
  -[TUProxyCall setSOS:]
  -[TUProxyCall answerWithRequest:]
  -[TUProxyCall isDownlinkMuted]
  -[TUProxyCall setIsVideo:]
  -[TUProxyCall callUUID]
  -[TUProxyCall handle]
  -[TUProxyCall callStatus]
  -[TUProxyCall displayContext]
  -[TUProxyCall setConversation:]
  -[TUProxyCall setTtyType:]
  -[TUProxyCall setDisplayContext:]
  -[TUProxyCall setBlocked:]
  -[TUProxyCall setOutgoing:]
  -[TUProxyCall encodeWithCoder:]
  -[TUProxyCall setRemoteParticipantHandles:]
  -[TUProxyCall remoteParticipantHandles]
  -[TUProxyCall backingProvider]
  -[TUProxyCall localSenderIdentityAccountUUID]
  -[TUProxyCall setMixesVoiceWithMedia:]
  -[TUProxyCall remoteCameraOrientation]
  -[TUProxyCall setRemoteCameraOrientation:]
  -[TUProxyCall isHostedOnCurrentDevice]
  -[TUProxyCall isConversation]
  -[TUProxyCall callGroupUUID]
  -[TUProxyCall callerNameFromNetwork]
  -[TUProxyCall isVoicemail]
  -[TUProxyCall isEmergency]
  -[TUProxyCall shouldSuppressInCallUI]
  -[TUProxyCall wantsStagingArea]
  -[TUProxyCall setShouldSuppressInCallUI:]
  -[TUProxyCall setWantsStagingArea:]
  -[TUProxyCall originatingUIType]
  -[TUProxyCall setOriginatingUIType:]
  -[TUProxyCall setWantsHoldMusic:]
  -[TUProxyCall updateWithCall:]
  -[TUProxyCall setProxyCallActionsDelegate:]
  -[TUProxyCall setCallDisconnectedDueToComponentCrash]
  -[TUProxyCall setBackingProvider:]
  -[TUProxyCall localSenderIdentityUUID]
  -[TUProxyCall setLocalSenderIdentityAccountUUID:]
  -[TUProxyCall setVoicemail:]
  -[TUProxyCall setHostedOnCurrentDevice:]
  -[TUProxyCall setEndpointOnCurrentDevice:]
  -[TUProxyCall setIsSendingVideo:]
  -[TUProxyCall isSendingVideo]
  -[TUProxyCall setRemoteFrequency:]
  -[TUProxyCall setLocalFrequency:]
  -[TUProxyCall setRemoteMeterLevel:]
  -[TUProxyCall setLocalMeterLevel:]
  -[TUProxyCall needsManualInCallSounds]
  -[TUProxyCall isUsingBaseband]
  -[TUProxyCall isSendingAudio]
  -[TUProxyCall isSharingScreen]
  -[TUProxyCall isThirdPartyVideo]
  -[TUProxyCall isMediaStalled]
  -[TUProxyCall isVideoDegraded]
  -[TUProxyCall isVideoPaused]
  -[TUProxyCall isFailureExpected]
  -[TUProxyCall audioMode]
  -[TUProxyCall supportsTTYWithVoice]
  -[TUProxyCall bluetoothAudioFormat]
  -[TUProxyCall remoteAspectRatio]
  -[TUProxyCall remoteVideoContentRect]
  -[TUProxyCall remoteScreenOrientation]
  -[TUProxyCall remoteScreenAspectRatio]
  -[TUProxyCall prefersExclusiveAccessToCellularNetwork]
  -[TUProxyCall isRemoteUplinkMuted]
  -[TUProxyCall providerContext]
  -[TUProxyCall videoStreamToken]
  -[TUProxyCall mixesVoiceWithMedia]
  -[TUProxyCall screenShareAttributes]
  -[TUProxyCall isInternational]
  -[TUProxyCall initWithUniqueProxyIdentifier:endpointOnCurrentDevice:]
  -[TUProxyCall announceProviderIdentifier]
  -[TUProxyCall displayProvider]
  -[TUProxyCall endedReasonUserInfo]
  -[TUProxyCall endedErrorString]
  -[TUProxyCall endedReasonString]
  -[TUProxyCall callRelaySupport]
  -[TUProxyCall localFrequency]
  -[TUProxyCall remoteFrequency]
  -[TUProxyCall localMeterLevel]
  -[TUProxyCall remoteMeterLevel]
  -[TUProxyCall isMutuallyExclusiveCall]
  -[TUProxyCall inputAudioPowerSpectrumToken]
  -[TUProxyCall outputAudioPowerSpectrumToken]
  -[TUProxyCall _updateVideoCallAttributes:]
  -[TUProxyCall _updateVideoStreamToken:]
  -[TUProxyCall proxyCallActionsDelegate]
  -[TUProxyCall setDisconnectedReason:]
  -[TUProxyCall updateProxyCallWithDaemon]
  -[TUProxyCall setShouldSuppressRingtone:]
  -[TUProxyCall setTransitionStatus:]
  -[TUProxyCall avcRemoteVideoModeForMode:]
  -[TUProxyCall remoteVideoModeToLayer]
  -[TUProxyCall setRemoteVideoModeToLayer:]
  -[TUProxyCall remoteVideo]
  -[TUProxyCall _synchronizeRemoteVideo]
  -[TUProxyCall localVideoModeToLayer]
  -[TUProxyCall setLocalVideoModeToLayer:]
  -[TUProxyCall localVideo]
  -[TUProxyCall _synchronizeLocalVideo]
  -[TUProxyCall setLocalVideo:]
  -[TUProxyCall setRemoteVideo:]
  -[TUProxyCall _createLocalVideoIfNecessary]
  -[TUProxyCall requiresRemoteVideo]
  -[TUProxyCall _createRemoteVideoIfNecessary]
  -[TUProxyCall setMediaStalled:]
  -[TUProxyCall setVideoDegraded:]
  -[TUProxyCall localAspectRatioForOrientation:]
  -[TUProxyCall remoteScreenPortraitAspectRatio]
  -[TUProxyCall remoteScreenLandscapeAspectRatio]
  -[TUProxyCall setVideoPaused:]
  -[TUProxyCall _orientationForVideoAttributesOrientation:]
  -[TUProxyCall setRemoteScreenOrientation:]
  -[TUProxyCall setRemoteScreenPortraitAspectRatio:]
  -[TUProxyCall setRemoteScreenLandscapeAspectRatio:]
  -[TUProxyCall setRemoteAspectRatio:]
  -[TUProxyCall setRemoteVideoContentRect:]
  -[TUProxyCall _cameraTypeForVideoAttributeCamera:]
  -[TUProxyCall remoteVideoClient:remoteVideoDidPause:]
  -[TUProxyCall remoteVideoClient:remoteMediaDidStall:]
  -[TUProxyCall remoteVideoClient:videoDidDegrade:]
  -[TUProxyCall remoteVideoClient:remoteScreenAttributesDidChange:]
  -[TUProxyCall remoteVideoClient:remoteVideoAttributesDidChange:]
  -[TUProxyCall playDTMFToneForKey:]
  -[TUProxyCall setSharingScreen:]
  -[TUProxyCall setSharingScreen:attributes:]
  -[TUProxyCall sendHardPauseDigits]
  -[TUProxyCall setRemoteVideoLayer:forMode:]
  -[TUProxyCall setLocalVideoLayer:forMode:]
  -[TUProxyCall setRequiresRemoteVideo:]
  -[TUProxyCall setRemoteVideoPresentationSize:]
  -[TUProxyCall setRemoteVideoPresentationState:]
  -[TUProxyCall setScreenShareAttributes:]
  -[TUProxyCall setBluetoothAudioFormat:]
  -[TUProxyCall setAnnounceProviderIdentifier:]
  -[TUProxyCall setCallUUID:]
  -[TUProxyCall setDisplayProvider:]
  -[TUProxyCall setCallerNameFromNetwork:]
  -[TUProxyCall setThirdPartyVideo:]
  -[TUProxyCall setIsSendingAudio:]
  -[TUProxyCall setFailureExpected:]
  -[TUProxyCall setInternational:]
  -[TUProxyCall setUsingBaseband:]
  -[TUProxyCall setSupportsTTYWithVoice:]
  -[TUProxyCall setAudioMode:]
  -[TUProxyCall setNeedsManualInCallSounds:]
  -[TUProxyCall setEndedReasonUserInfo:]
  -[TUProxyCall setEndedReasonString:]
  -[TUProxyCall setEndedErrorString:]
  -[TUProxyCall setCallRelaySupport:]
  -[TUProxyCall setVideoStreamToken:]
  -[TUProxyCall setInputAudioPowerSpectrumToken:]
  -[TUProxyCall setOutputAudioPowerSpectrumToken:]
  -[TUProxyCall setCallGroupUUID:]
  -[TUProxyCall setProviderContext:]
  -[TUProxyCall setPrefersExclusiveAccessToCellularNetwork:]
  -[TUProxyCall setRemoteUplinkMuted:]
  -[TUProxyCall setMutuallyExclusiveCall:]


TUHandle : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL hasSetISOCountryCode
 @property  NSString *isoCountryCode
 @property  NSString *normalizedValue
 @property  NSDictionary *dictionaryRepresentation
 @property  long long type
 @property  NSString *value

  // class methods
  +[TUHandle handlesForCHRecentCall:]
  +[TUHandle supportsSecureCoding]
  +[TUHandle normalizedEmailAddressHandleForValue:]
  +[TUHandle handleForCHRecentCall:validHandlesOnly:]
  +[TUHandle normalizedGenericHandleForValue:]
  +[TUHandle normalizedHandleWithDestinationID:]
  +[TUHandle handleForCHRecentCall:]
  +[TUHandle handleWithPersonHandle:]
  +[TUHandle handlesForCHRecentCall:validHandlesOnly:]
  +[TUHandle handleWithDictionaryRepresentation:]
  +[TUHandle handleWithDestinationID:]
  +[TUHandle normalizedPhoneNumberHandleForValue:isoCountryCode:]
  +[TUHandle handleTypeForCHHandle:]
  +[TUHandle stringForType:]

  // instance methods
  -[TUHandle setIsoCountryCode:]
  -[TUHandle isoCountryCode]
  -[TUHandle initWithCoder:]
  -[TUHandle initWithHandle:]
  -[TUHandle isEqualToHandle:]
  -[TUHandle initWithType:value:]
  -[TUHandle setType:]
  -[TUHandle .cxx_destruct]
  -[TUHandle normalizedValue]
  -[TUHandle initWithType:value:normalizedValue:]
  -[TUHandle personHandle]
  -[TUHandle isValidForISOCountryCode:]
  -[TUHandle dictionaryRepresentation]
  -[TUHandle init]
  -[TUHandle isEqual:]
  -[TUHandle setValue:]
  -[TUHandle hasSetISOCountryCode]
  -[TUHandle isCanonicallyEqualToHandle:isoCountryCode:]
  -[TUHandle value]
  -[TUHandle type]
  -[TUHandle initWithDestinationID:]
  -[TUHandle canonicalHandleForISOCountryCode:]
  -[TUHandle setHasSetISOCountryCode:]
  -[TUHandle isEquivalentToHandle:]
  -[TUHandle copyWithZone:]
  -[TUHandle encodeWithCoder:]


TUDialRequest : NSObject <TUCallRequest, TUVideoRequest, TUFilteredRequest, NSSecureCoding, NSCopying>
 @property  TUCallProvider *provider
 @property  TUCallProviderManager *providerManager
 @property  CNGeminiManager *contactGeminiManager
 @property  @? isEmergencyNumberBlock
 @property  @? isEmergencyNumberOrIsWhitelistedBlock
 @property  NSDate *dateDialed
 @property  TUSenderIdentityClient *senderIdentityClient
 @property  BOOL rttAvailable
 @property  BOOL ttyAvailable
 @property  BOOL hostOnCurrentDevice
 @property  BOOL endpointOnCurrentDevice
 @property  NSString *endpointIDSDestinationURI
 @property  IDSDestination *endpointIDSDestination
 @property  NSString *endpointRapportMediaSystemIdentifier
 @property  NSString *endpointRapportEffectiveIdentifier
 @property  TUSenderIdentity *localSenderIdentity
 @property  NSUUID *localSenderIdentityUUID
 @property  NSUUID *localSenderIdentityAccountUUID
 @property  int originatingUIType
 @property  BOOL sos
 @property  BOOL redial
 @property  BOOL shouldSuppressInCallUI
 @property  NSString *successNotification
 @property  NSString *failureNotification
 @property  BSProcessHandle *processHandle
 @property  int service
 @property  long long dialType
 @property  NSString *destinationID
 @property  TUHandle *handle
 @property  NSString *contactIdentifier
 @property  NSString *providerCustomIdentifier
 @property  BOOL video
 @property  NSString *audioSourceIdentifier
 @property  BOOL performDialAssist
 @property  BOOL performLocalDialAssist
 @property  BOOL dialAssisted
 @property  long long ttyType
 @property  BOOL useTTY
 @property  BOOL showUIPrompt
 @property  BOOL valid
 @property  NSURL *URL
 @property  NSUserActivity *userActivity
 @property  NSArray *validityErrors
 @property  NSString *uniqueProxyIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGSize=dd} localLandscapeAspectRatio
 @property  {CGSize=dd} localPortraitAspectRatio

  // class methods
  +[TUDialRequest contactStore]
  +[TUDialRequest setCallProviderManagerGeneratorBlock:]
  +[TUDialRequest legacyAddressBookIdentifierToContactIdentifierTransformBlock]
  +[TUDialRequest ttyTypeForIntentTTYType:]
  +[TUDialRequest supportsSecureCoding]
  +[TUDialRequest handleTypeForQueryItem:]
  +[TUDialRequest intentTTYTypeForTTYType:]
  +[TUDialRequest stringForDialType:]
  +[TUDialRequest dialRequestTTYTypeForCHRecentCallTTYType:]
  +[TUDialRequest providerForIntentPreferredCallProvider:recentCallProviderId:callCapability:providerManager:]
  +[TUDialRequest setLegacyAddressBookIdentifierToContactIdentifierTransformBlock:]
  +[TUDialRequest ttyTypeForString:]
  +[TUDialRequest stringForTTYType:]
  +[TUDialRequest stringForOriginatingUIType:]
  +[TUDialRequest dialRequestTypeForIntentDestinationType:]
  +[TUDialRequest callProviderManagerGeneratorBlock]
  +[TUDialRequest originatingUITypeForString:]

  // instance methods
  -[TUDialRequest setProvider:]
  -[TUDialRequest userActivity]
  -[TUDialRequest setHandle:]
  -[TUDialRequest isVideo]
  -[TUDialRequest initWithCoder:]
  -[TUDialRequest isSOS]
  -[TUDialRequest bundleIdentifier]
  -[TUDialRequest setVideo:]
  -[TUDialRequest isValid]
  -[TUDialRequest processHandle]
  -[TUDialRequest setContactIdentifier:]
  -[TUDialRequest initWithService:]
  -[TUDialRequest .cxx_destruct]
  -[TUDialRequest ttyType]
  -[TUDialRequest useTTY]
  -[TUDialRequest contactIdentifier]
  -[TUDialRequest initWithProvider:]
  -[TUDialRequest setDialType:]
  -[TUDialRequest setAudioSourceIdentifier:]
  -[TUDialRequest setPerformDialAssist:]
  -[TUDialRequest setLocalSenderIdentityUUID:]
  -[TUDialRequest localLandscapeAspectRatio]
  -[TUDialRequest localPortraitAspectRatio]
  -[TUDialRequest init]
  -[TUDialRequest setShowUIPrompt:]
  -[TUDialRequest isEqual:]
  -[TUDialRequest setSOS:]
  -[TUDialRequest URLHost]
  -[TUDialRequest setDestinationID:]
  -[TUDialRequest setLocalPortraitAspectRatio:]
  -[TUDialRequest setLocalLandscapeAspectRatio:]
  -[TUDialRequest handle]
  -[TUDialRequest URL]
  -[TUDialRequest service]
  -[TUDialRequest providerManager]
  -[TUDialRequest initWithUserActivity:]
  -[TUDialRequest destinationID]
  -[TUDialRequest dialType]
  -[TUDialRequest isRedial]
  -[TUDialRequest setTtyType:]
  -[TUDialRequest handles]
  -[TUDialRequest provider]
  -[TUDialRequest copyWithZone:]
  -[TUDialRequest encodeWithCoder:]
  -[TUDialRequest setProcessHandle:]
  -[TUDialRequest initWithURL:]
  -[TUDialRequest localSenderIdentityAccountUUID]
  -[TUDialRequest isDialAssisted]
  -[TUDialRequest performLocalDialAssist]
  -[TUDialRequest performDialAssist]
  -[TUDialRequest setDialAssisted:]
  -[TUDialRequest contactNamesByHandleWithContactsDataSource:]
  -[TUDialRequest uniqueProxyIdentifier]
  -[TUDialRequest shouldSuppressInCallUI]
  -[TUDialRequest showUIPrompt]
  -[TUDialRequest audioSourceIdentifier]
  -[TUDialRequest shouldSuppressInCallUIQueryItem]
  -[TUDialRequest setShouldSuppressInCallUI:]
  -[TUDialRequest originatingUIType]
  -[TUDialRequest setOriginatingUIType:]
  -[TUDialRequest endpointIDSDestination]
  -[TUDialRequest endpointRapportMediaSystemIdentifier]
  -[TUDialRequest endpointRapportEffectiveIdentifier]
  -[TUDialRequest setUniqueProxyIdentifier:]
  -[TUDialRequest setEndpointRapportMediaSystemIdentifier:]
  -[TUDialRequest setEndpointRapportEffectiveIdentifier:]
  -[TUDialRequest localSenderIdentityUUID]
  -[TUDialRequest setLocalSenderIdentityAccountUUID:]
  -[TUDialRequest hostOnCurrentDevice]
  -[TUDialRequest endpointOnCurrentDevice]
  -[TUDialRequest setEndpointOnCurrentDevice:]
  -[TUDialRequest senderIdentityClient]
  -[TUDialRequest isRTTAvailable]
  -[TUDialRequest isRTTAvailable]
  -[TUDialRequest isTTYAvailable]
  -[TUDialRequest isTTYAvailable]
  -[TUDialRequest callProviderFromURLComponents:video:]
  -[TUDialRequest handleFromURL:]
  -[TUDialRequest contactIdentifierFromURLComponents:]
  -[TUDialRequest legacyAddressBookIdentifierFromURLComponents:]
  -[TUDialRequest boolValueForQueryItemWithName:inURLComponents:]
  -[TUDialRequest initWithUserActivity:providerManager:]
  -[TUDialRequest initWithUserActivity:providerManager:contactsDataSource:senderIdentityClient:]
  -[TUDialRequest initWithDialIntent:providerManager:contactsDataSource:senderIdentityClient:]
  -[TUDialRequest _contactFromINPerson:contactsDataSource:bestGuessHandle:]
  -[TUDialRequest contactGeminiManager]
  -[TUDialRequest providerCustomIdentifier]
  -[TUDialRequest endpointIDSDestinationURI]
  -[TUDialRequest validityErrors]
  -[TUDialRequest destinationIDFromURL:]
  -[TUDialRequest legacyAddressBookIdentifierQueryItemName]
  -[TUDialRequest URLScheme]
  -[TUDialRequest URLQueryItems]
  -[TUDialRequest handleTypeURLQueryItem]
  -[TUDialRequest isVoicemailURLQueryItem]
  -[TUDialRequest providerCustomIdentifierURLQueryItem]
  -[TUDialRequest localSenderIdentityUUIDURLQueryItem]
  -[TUDialRequest localSenderIdentityAccountUUIDURLQueryItem]
  -[TUDialRequest contactIdentifierURLQueryItem]
  -[TUDialRequest audioSourceIdentifierURLQueryItem]
  -[TUDialRequest forceAssistURLQueryItem]
  -[TUDialRequest suppressAssistURLQueryItem]
  -[TUDialRequest dialAssistedURLQueryItem]
  -[TUDialRequest ttyTypeURLQueryItem]
  -[TUDialRequest originatingUIURLQueryItem]
  -[TUDialRequest noPromptURLQueryItem]
  -[TUDialRequest sosURLQueryItem]
  -[TUDialRequest redialURLQueryItem]
  -[TUDialRequest endpointIDSDestinationURIQueryItem]
  -[TUDialRequest endpointRapportMediaSystemIdentifierQueryItem]
  -[TUDialRequest endpointRapportEffectiveIdentifierQueryItem]
  -[TUDialRequest successNotificationQueryItem]
  -[TUDialRequest failureNotificationQueryItem]
  -[TUDialRequest successNotification]
  -[TUDialRequest failureNotification]
  -[TUDialRequest userActivityUsingDeprecatedCallingIntents:]
  -[TUDialRequest validityErrorForUnspecifiedProvider]
  -[TUDialRequest validityErrorForDestinationIDWithVoicemail]
  -[TUDialRequest validityErrorForNonNormalDialTypeWithoutTelephony]
  -[TUDialRequest validityErrorForEndpointNotOnCurrentDeviceForNonRelayableService]
  -[TUDialRequest validityErrorForEmergencyCall]
  -[TUDialRequest validityErrorForVideoUnsupported]
  -[TUDialRequest validityErrorForNormalDialTypeWithUnknownDestination]
  -[TUDialRequest validityErrorForUnsupportedHandleType]
  -[TUDialRequest validityErrorForSOS]
  -[TUDialRequest isEmergencyNumberOrIsWhitelistedBlock]
  -[TUDialRequest isEmergencyNumberBlock]
  -[TUDialRequest isEqualToDialRequest:]
  -[TUDialRequest dateDialed]
  -[TUDialRequest setProviderCustomIdentifier:]
  -[TUDialRequest setPerformLocalDialAssist:]
  -[TUDialRequest setHostOnCurrentDevice:]
  -[TUDialRequest setRedial:]
  -[TUDialRequest setEndpointIDSDestinationURI:]
  -[TUDialRequest setSuccessNotification:]
  -[TUDialRequest setFailureNotification:]
  -[TUDialRequest setDateDialed:]
  -[TUDialRequest localSenderIdentity]
  -[TUDialRequest dialRequestByReplacingProvider:]
  -[TUDialRequest setContactGeminiManager:]
  -[TUDialRequest setIsEmergencyNumberBlock:]
  -[TUDialRequest setIsEmergencyNumberOrIsWhitelistedBlock:]


TUAbstractScreenTimeObserver : NSObject
 @property  {os_unfair_lock_s=I} accessorLock
 @property  <TUScreenTimeStateDataSource> *screenTimeDataSource
 @property  TUDelegateController<TUAbstractScreenTimeObserverDelegate> *delegateController
 @property  BOOL screenTimeEnabled
 @property  <TUNotifyObserver> *notifyObserver

  // instance methods
  -[TUAbstractScreenTimeObserver removeDelegate:]
  -[TUAbstractScreenTimeObserver accessorLock]
  -[TUAbstractScreenTimeObserver addDelegate:queue:]
  -[TUAbstractScreenTimeObserver .cxx_destruct]
  -[TUAbstractScreenTimeObserver dealloc]
  -[TUAbstractScreenTimeObserver setScreenTimeEnabled:]
  -[TUAbstractScreenTimeObserver delegateController]
  -[TUAbstractScreenTimeObserver updateScreenTimeEnabled]
  -[TUAbstractScreenTimeObserver screenTimeDataSource]
  -[TUAbstractScreenTimeObserver initWithQueue:dataSource:notificationName:]
  -[TUAbstractScreenTimeObserver isScreenTimeEnabled]
  -[TUAbstractScreenTimeObserver notifyObserver]


TUSenderIdentityCapabilitiesState : NSObject <NSSecureCoding, NSCopying, TUPubliclyAccessibleCopying>
 @property  NSUUID *senderIdentityUUID
 @property  BOOL supportsSimultaneousVoiceAndData
 @property  TUCTCapabilitiesState *csCallingCapabilitiesState
 @property  TUCTCapabilitiesState *voLTECallingCapabilitiesState
 @property  TUCTCapabilitiesState *wiFiCallingCapabilitiesState
 @property  TUThumperCTCapabilitiesState *thumperCallingCapabilitiesState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUSenderIdentityCapabilitiesState supportsSecureCoding]

  // instance methods
  -[TUSenderIdentityCapabilitiesState initWithCoder:]
  -[TUSenderIdentityCapabilitiesState .cxx_destruct]
  -[TUSenderIdentityCapabilitiesState publiclyAccessibleCopy]
  -[TUSenderIdentityCapabilitiesState supportsSimultaneousVoiceAndData]
  -[TUSenderIdentityCapabilitiesState publiclyAccessibleCopyWithZone:]
  -[TUSenderIdentityCapabilitiesState copyWithZone:]
  -[TUSenderIdentityCapabilitiesState encodeWithCoder:]
  -[TUSenderIdentityCapabilitiesState csCallingCapabilitiesState]
  -[TUSenderIdentityCapabilitiesState voLTECallingCapabilitiesState]
  -[TUSenderIdentityCapabilitiesState wiFiCallingCapabilitiesState]
  -[TUSenderIdentityCapabilitiesState thumperCallingCapabilitiesState]
  -[TUSenderIdentityCapabilitiesState senderIdentityUUID]
  -[TUSenderIdentityCapabilitiesState initWithSenderIdentityUUID:]
  -[TUSenderIdentityCapabilitiesState setCsCallingCapabilitiesState:]
  -[TUSenderIdentityCapabilitiesState setVoLTECallingCapabilitiesState:]
  -[TUSenderIdentityCapabilitiesState setWiFiCallingCapabilitiesState:]
  -[TUSenderIdentityCapabilitiesState setThumperCallingCapabilitiesState:]
  -[TUSenderIdentityCapabilitiesState setSupportsSimultaneousVoiceAndData:]


TUScreenTimeObserver : TUAbstractScreenTimeObserver
  // instance methods
  -[TUScreenTimeObserver initWithQueue:]


TUCall : NSObject <NSSecureCoding>
 @property  NSString *uniqueProxyIdentifier
 @property  TUCallNotificationManager *callNotificationManager
 @property  TUProxyCall *comparativeCall
 @property  int filteredOutReason
 @property  BOOL supportsRecents
 @property  NSObject<OS_dispatch_queue> *queue
 @property  TUCallServicesInterface *callServicesInterface
 @property  BOOL prefersExclusiveAccessToCellularNetwork
 @property  TUVideoCallAttributes *videoCallAttributes
 @property  NSUUID *localSenderIdentityAccountUUID
 @property  NSDate *dateAnsweredOrDialed
 @property  NSDate *dateSentInvitation
 @property  NSDate *dateStartedConnecting
 @property  NSDate *dateConnected
 @property  NSDate *dateEnded
 @property  long long verificationStatus
 @property  long long priority
 @property  NSUUID *uniqueProxyIdentifierUUID
 @property  TUCallProvider *backingProvider
 @property  TUCallProvider *displayProvider
 @property  long long provisionalHoldStatus
 @property  int disconnectedReason
 @property  NSString *announceProviderIdentifier
 @property  NSString *sourceIdentifier
 @property  NSString *isoCountryCode
 @property  NSString *callHistoryIdentifier
 @property  int callStatus
 @property  int transitionStatus
 @property  int faceTimeIDStatus
 @property  BOOL hasUpdatedAudio
 @property  long long soundRegion
 @property  BOOL shouldDisplayLocationIfAvailable
 @property  NSString *reminderString
 @property  BOOL video
 @property  BOOL wantsHoldMusic
 @property  BOOL endpointOnCurrentDevice
 @property  BOOL sos
 @property  BOOL remoteUplinkMuted
 @property  float remoteMeterLevel
 @property  float localMeterLevel
 @property  NSUUID *localSenderIdentityUUID
 @property  TUSenderIdentity *localSenderIdentity
 @property  BOOL shouldSuppressRingtone
 @property  BOOL ringtoneSuppressedRemotely
 @property  BOOL wiFiCall
 @property  BOOL voipCall
 @property  NSDictionary *providerContext
 @property  long long faceTimeTransportType
 @property  NSDictionary *callStats
 @property  NSString *endedErrorString
 @property  NSString *endedReasonString
 @property  BOOL mediaStalled
 @property  BOOL videoDegraded
 @property  BOOL videoPaused
 @property  BOOL videoMirrored
 @property  long long videoStreamToken
 @property  long long inputAudioPowerSpectrumToken
 @property  long long outputAudioPowerSpectrumToken
 @property  BOOL requiresRemoteVideo
 @property  {CGSize=dd} remoteAspectRatio
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} remoteVideoContentRect
 @property  long long cameraType
 @property  long long remoteCameraOrientation
 @property  long long remoteScreenOrientation
 @property  {CGSize=dd} remoteScreenAspectRatio
 @property  int callRelaySupport
 @property  BOOL isSendingAudio
 @property  BOOL isSendingVideo
 @property  BOOL isActive
 @property  BOOL sharingScreen
 @property  BOOL mixesVoiceWithMedia
 @property  BOOL mediaPlaybackOnExternalDevice
 @property  BOOL thirdPartyVideo
 @property  NSDictionary *endedReasonUserInfo
 @property  double hostCreationTime
 @property  double hostMessageSendTime
 @property  double clientMessageReceiveTime
 @property  BOOL wasPulledToCurrentDevice
 @property  int hardPauseDigitsState
 @property  NSString *hardPauseDigits
 @property  NSString *hardPauseDigitsDisplayString
 @property  TUCallModel *model
 @property  TUCallDisplayContext *displayContext
 @property  BOOL shouldSuppressInCallUI
 @property  BOOL mutuallyExclusiveCall
 @property  BOOL conversation
 @property  NSSet *remoteParticipantHandles
 @property  BOOL wantsStagingArea
 @property  int ttyType
 @property  int originatingUIType
 @property  long long junkConfidence
 @property  long long identificationCategory
 @property  BOOL junk
 @property  BOOL fromSiri
 @property  BOOL isKnownCaller
 @property  BOOL joinedFromLink
 @property  long long bluetoothAudioFormat
 @property  TUCallScreenShareAttributes *screenShareAttributes
 @property  BOOL failureExpected
 @property  BOOL international
 @property  TUCallCenter *callCenter
 @property  NSString *suggestedDisplayName
 @property  BOOL wasDeclined
 @property  TUCallProvider *provider
 @property  int service
 @property  int status
 @property  BOOL statusIsProvisional
 @property  BOOL hostedOnCurrentDevice
 @property  BOOL shouldPlayDTMFTone
 @property  BOOL rtt
 @property  BOOL tty
 @property  BOOL supportsTTYWithVoice
 @property  NSString *audioCategory
 @property  NSString *audioMode
 @property  BOOL needsManualInCallSounds
 @property  BOOL voicemail
 @property  BOOL isOnHold
 @property  NSDate *dateCreated
 @property  BOOL hasSentInvitation
 @property  BOOL connecting
 @property  BOOL connected
 @property  BOOL outgoing
 @property  BOOL incoming
 @property  BOOL blocked
 @property  double startTime
 @property  NSUUID *callGroupUUID
 @property  BOOL conferenced
 @property  BOOL uplinkMuted
 @property  BOOL downlinkMuted
 @property  NSString *destinationID
 @property  NSString *contactIdentifier
 @property  NSArray *contactIdentifiers
 @property  TUHandle *handle
 @property  int abUID
 @property  NSString *callUUID
 @property  NSString *displayName
 @property  NSString *displayFirstName
 @property  NSString *companyName
 @property  NSString *callerNameFromNetwork
 @property  NSString *localizedLabel
 @property  double callDuration
 @property  NSString *callDurationString
 @property  BOOL wasDialAssisted
 @property  BOOL emergencyCall
 @property  BOOL emergency
 @property  BOOL usingBaseband
 @property  NSData *localFrequency
 @property  NSData *remoteFrequency
 @property  TUDialRequest *dialRequestForRedial
 @property  BOOL supportsDTMFTones

  // class methods
  +[TUCall supportsSecureCoding]
  +[TUCall supplementalDialTelephonyCallString]
  +[TUCall _supplementalDialTelephonyCallStringForLocString:destination:isPhoneNumber:includeFaceTimeAudio:]
  +[TUCall acceptableJunkConfidence]
  +[TUCall supplementalDialTelephonyCallStringForDestination:isPhoneNumber:]
  +[TUCall isJunkConfidenceLevelJunk:]
  +[TUCall faceTimeSupplementalDialTelephonyCallStringIncludingFTA:]
  +[TUCall maxJunkConfidence]

  // instance methods
  -[TUCall setMediaPlaybackOnExternalDevice:]
  -[TUCall audioCategory]
  -[TUCall isBlocked]
  -[TUCall setIsoCountryCode:]
  -[TUCall isOutgoing]
  -[TUCall setMuted:]
  -[TUCall isoCountryCode]
  -[TUCall isTTY]
  -[TUCall displayName]
  -[TUCall isMuted]
  -[TUCall isVideo]
  -[TUCall initWithCoder:]
  -[TUCall setUplinkMuted:]
  -[TUCall isConnected]
  -[TUCall verificationStatus]
  -[TUCall isSOS]
  -[TUCall setSourceIdentifier:]
  -[TUCall setDownlinkMuted:]
  -[TUCall setVideo:]
  -[TUCall isRTT]
  -[TUCall abUID]
  -[TUCall isActive]
  -[TUCall sourceIdentifier]
  -[TUCall .cxx_destruct]
  -[TUCall ttyType]
  -[TUCall isVideoMirrored]
  -[TUCall isJunk]
  -[TUCall unhold]
  -[TUCall cameraType]
  -[TUCall contactIdentifier]
  -[TUCall disconnectWithReason:]
  -[TUCall setPriority:]
  -[TUCall localizedLabel]
  -[TUCall init]
  -[TUCall setQueue:]
  -[TUCall isEqual:]
  -[TUCall isUplinkMuted]
  -[TUCall callDuration]
  -[TUCall ungroup]
  -[TUCall answerWithRequest:]
  -[TUCall isDownlinkMuted]
  -[TUCall startTime]
  -[TUCall callUUID]
  -[TUCall contactIdentifiers]
  -[TUCall dateCreated]
  -[TUCall handle]
  -[TUCall callStatus]
  -[TUCall callCenter]
  -[TUCall hold]
  -[TUCall setVerificationStatus:]
  -[TUCall model]
  -[TUCall priority]
  -[TUCall service]
  -[TUCall status]
  -[TUCall callServicesInterface]
  -[TUCall displayContext]
  -[TUCall isEndpointOnCurrentDevice]
  -[TUCall destinationID]
  -[TUCall isOnHold]
  -[TUCall setModel:]
  -[TUCall queue]
  -[TUCall callNotificationManager]
  -[TUCall setTtyType:]
  -[TUCall provider]
  -[TUCall dealloc]
  -[TUCall setCallServicesInterface:]
  -[TUCall companyName]
  -[TUCall isConnecting]
  -[TUCall isIncoming]
  -[TUCall encodeWithCoder:]
  -[TUCall setFilteredOutReason:]
  -[TUCall junkConfidence]
  -[TUCall remoteParticipantHandles]
  -[TUCall filteredOutReason]
  -[TUCall backingProvider]
  -[TUCall localSenderIdentityAccountUUID]
  -[TUCall setMixesVoiceWithMedia:]
  -[TUCall remoteCameraOrientation]
  -[TUCall isHostedOnCurrentDevice]
  -[TUCall isConferenced]
  -[TUCall dateConnected]
  -[TUCall isConversation]
  -[TUCall callGroupUUID]
  -[TUCall uniqueProxyIdentifier]
  -[TUCall initWithCall:]
  -[TUCall callerNameFromNetwork]
  -[TUCall isVoicemail]
  -[TUCall isEmergency]
  -[TUCall shouldSuppressInCallUI]
  -[TUCall wantsStagingArea]
  -[TUCall originatingUIType]
  -[TUCall initWithUniqueProxyIdentifier:]
  -[TUCall wantsHoldMusic]
  -[TUCall setUniqueProxyIdentifier:]
  -[TUCall setWantsHoldMusic:]
  -[TUCall disconnectedReason]
  -[TUCall joinedFromLink]
  -[TUCall dateSentInvitation]
  -[TUCall dateStartedConnecting]
  -[TUCall dateEnded]
  -[TUCall updateWithCall:]
  -[TUCall updateComparativeCall]
  -[TUCall comparativeCall]
  -[TUCall setComparativeCall:]
  -[TUCall localSenderIdentityUUID]
  -[TUCall setEndpointOnCurrentDevice:]
  -[TUCall setIsSendingVideo:]
  -[TUCall isSendingVideo]
  -[TUCall resetProvisionalState]
  -[TUCall soundRegion]
  -[TUCall displayFirstName]
  -[TUCall setSupportsRecents:]
  -[TUCall shouldSuppressRingtone]
  -[TUCall faceTimeIDStatus]
  -[TUCall hardPauseDigits]
  -[TUCall hardPauseDigitsState]
  -[TUCall needsManualInCallSounds]
  -[TUCall hasSentInvitation]
  -[TUCall isUsingBaseband]
  -[TUCall isSendingAudio]
  -[TUCall isSharingScreen]
  -[TUCall isThirdPartyVideo]
  -[TUCall isMediaStalled]
  -[TUCall isVideoDegraded]
  -[TUCall isVideoPaused]
  -[TUCall isFailureExpected]
  -[TUCall audioMode]
  -[TUCall supportsTTYWithVoice]
  -[TUCall bluetoothAudioFormat]
  -[TUCall remoteAspectRatio]
  -[TUCall remoteVideoContentRect]
  -[TUCall remoteScreenOrientation]
  -[TUCall remoteScreenAspectRatio]
  -[TUCall prefersExclusiveAccessToCellularNetwork]
  -[TUCall isRemoteUplinkMuted]
  -[TUCall providerContext]
  -[TUCall videoStreamToken]
  -[TUCall mixesVoiceWithMedia]
  -[TUCall screenShareAttributes]
  -[TUCall uniqueProxyIdentifierUUID]
  -[TUCall isInternational]
  -[TUCall supportsRecents]
  -[TUCall initWithUniqueProxyIdentifier:endpointOnCurrentDevice:]
  -[TUCall announceProviderIdentifier]
  -[TUCall displayProvider]
  -[TUCall endedReasonUserInfo]
  -[TUCall endedErrorString]
  -[TUCall endedReasonString]
  -[TUCall callRelaySupport]
  -[TUCall localFrequency]
  -[TUCall remoteFrequency]
  -[TUCall localMeterLevel]
  -[TUCall remoteMeterLevel]
  -[TUCall isMutuallyExclusiveCall]
  -[TUCall inputAudioPowerSpectrumToken]
  -[TUCall outputAudioPowerSpectrumToken]
  -[TUCall videoCallAttributes]
  -[TUCall setDisconnectedReason:]
  -[TUCall setShouldSuppressRingtone:]
  -[TUCall transitionStatus]
  -[TUCall setTransitionStatus:]
  -[TUCall setHardPauseDigitsState:]
  -[TUCall setHardPauseDigits:]
  -[TUCall setVideoCallAttributes:]
  -[TUCall requiresRemoteVideo]
  -[TUCall localAspectRatioForOrientation:]
  -[TUCall playDTMFToneForKey:]
  -[TUCall setSharingScreen:]
  -[TUCall setSharingScreen:attributes:]
  -[TUCall sendHardPauseDigits]
  -[TUCall setRemoteVideoLayer:forMode:]
  -[TUCall setLocalVideoLayer:forMode:]
  -[TUCall setRequiresRemoteVideo:]
  -[TUCall setRemoteVideoPresentationSize:]
  -[TUCall setRemoteVideoPresentationState:]
  -[TUCall setScreenShareAttributes:]
  -[TUCall setBluetoothAudioFormat:]
  -[TUCall setAnnounceProviderIdentifier:]
  -[TUCall setFailureExpected:]
  -[TUCall localSenderIdentity]
  -[TUCall _handleStatusChange]
  -[TUCall identificationCategory]
  -[TUCall isKnownCaller]
  -[TUCall resetWantsHoldMusic]
  -[TUCall provisionalHoldStatus]
  -[TUCall setProvisionalHoldStatus:]
  -[TUCall setRingtoneSuppressedRemotely:]
  -[TUCall suppressRingtone]
  -[TUCall wasDialAssisted]
  -[TUCall isEqualToCall:]
  -[TUCall dateAnsweredOrDialed]
  -[TUCall wasPulledToCurrentDevice]
  -[TUCall hostCreationTime]
  -[TUCall hostMessageSendTime]
  -[TUCall clientMessageReceiveTime]
  -[TUCall setIsOnHold:]
  -[TUCall hardPauseDigitsDisplayString]
  -[TUCall postNotificationsAfterUpdatesInBlock:]
  -[TUCall wasDeclined]
  -[TUCall suppressRingtoneDueToRemoteSuppression]
  -[TUCall isWiFiCall]
  -[TUCall isVoIPCall]
  -[TUCall faceTimeTransportType]
  -[TUCall dialRequestForRedial]
  -[TUCall groupWithOtherCall:]
  -[TUCall shouldDisplayLocationIfAvailable]
  -[TUCall callHistoryIdentifier]
  -[TUCall callDurationString]
  -[TUCall reminderString]
  -[TUCall statusIsProvisional]
  -[TUCall isEmergencyCall]
  -[TUCall isFromSiri]
  -[TUCall shouldPlayDTMFTone]
  -[TUCall supportsDTMFTones]
  -[TUCall suggestedDisplayName]
  -[TUCall hasRelaySupport:]
  -[TUCall serviceDisplayString]
  -[TUCall supplementalInCallString]
  -[TUCall errorAlertTitle]
  -[TUCall errorAlertMessage]
  -[TUCall callStats]
  -[TUCall isVideoUpgradeFromCall:]
  -[TUCall isDialRequestVideoUpgrade:]
  -[TUCall setFaceTimeIDStatus:]
  -[TUCall setDateAnsweredOrDialed:]
  -[TUCall setDateSentInvitation:]
  -[TUCall setDateStartedConnecting:]
  -[TUCall setDateConnected:]
  -[TUCall setDateEnded:]
  -[TUCall setWasDialAssisted:]
  -[TUCall hasUpdatedAudio]
  -[TUCall setHasUpdatedAudio:]
  -[TUCall setSoundRegion:]
  -[TUCall ringtoneSuppressedRemotely]
  -[TUCall mediaPlaybackOnExternalDevice]
  -[TUCall setHostCreationTime:]
  -[TUCall setHostMessageSendTime:]
  -[TUCall setClientMessageReceiveTime:]
  -[TUCall setWasPulledToCurrentDevice:]
  -[TUCall setJoinedFromLink:]


TUContactsAutocompleteSearchModule : NSObject <CNAutocompleteFetchDelegate, TUSearchModuleProtocol>
 @property  CNAutocompleteStore *autocompleteStore
 @property  <CNAutocompleteCancelable> *fetchRequest
 @property  TUAutocompleteResultPartitioner *autocompleteResultPartitioner
 @property  NSObject<OS_dispatch_queue> *queue
 @property  @? completion
 @property  BOOL searchComplete
 @property  BOOL cancelled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  TUSearchResults *searchResults
 @property  TUSearchController *searchController

  // instance methods
  -[TUContactsAutocompleteSearchModule _cleanup]
  -[TUContactsAutocompleteSearchModule completion]
  -[TUContactsAutocompleteSearchModule setCompletion:]
  -[TUContactsAutocompleteSearchModule searchController]
  -[TUContactsAutocompleteSearchModule setSearchController:]
  -[TUContactsAutocompleteSearchModule .cxx_destruct]
  -[TUContactsAutocompleteSearchModule setCancelled:]
  -[TUContactsAutocompleteSearchModule cancelSearch]
  -[TUContactsAutocompleteSearchModule fetchRequest]
  -[TUContactsAutocompleteSearchModule isCancelled]
  -[TUContactsAutocompleteSearchModule init]
  -[TUContactsAutocompleteSearchModule setQueue:]
  -[TUContactsAutocompleteSearchModule setFetchRequest:]
  -[TUContactsAutocompleteSearchModule autocompleteStore]
  -[TUContactsAutocompleteSearchModule autocompleteFetch:didReceiveResults:]
  -[TUContactsAutocompleteSearchModule autocompleteFetch:didFailWithError:]
  -[TUContactsAutocompleteSearchModule autocompleteFetchDidFinish:]
  -[TUContactsAutocompleteSearchModule setAutocompleteStore:]
  -[TUContactsAutocompleteSearchModule queue]
  -[TUContactsAutocompleteSearchModule searchResults]
  -[TUContactsAutocompleteSearchModule dealloc]
  -[TUContactsAutocompleteSearchModule setSearchComplete:]
  -[TUContactsAutocompleteSearchModule searchForString:completion:]
  -[TUContactsAutocompleteSearchModule isSearchComplete]
  -[TUContactsAutocompleteSearchModule autocompleteResultPartitioner]
  -[TUContactsAutocompleteSearchModule setAutocompleteResultPartitioner:]


TUCallHistoryManagerXPCClient : NSObject <TUCallHistoryManagerXPCClient, TUCallHistoryManagerDataSource>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCallHistoryManagerXPCClient setSynchronousServer:]
  +[TUCallHistoryManagerXPCClient synchronousServer]
  +[TUCallHistoryManagerXPCClient asynchronousServer]
  +[TUCallHistoryManagerXPCClient setAsynchronousServer:]
  +[TUCallHistoryManagerXPCClient callHistoryManagerAllowedClasses]
  +[TUCallHistoryManagerXPCClient callHistoryManagerServerXPCInterface]
  +[TUCallHistoryManagerXPCClient callHistoryManagerClientXPCInterface]

  // instance methods
  -[TUCallHistoryManagerXPCClient synchronousServerWithErrorHandler:]
  -[TUCallHistoryManagerXPCClient setXpcConnection:]
  -[TUCallHistoryManagerXPCClient xpcConnection]
  -[TUCallHistoryManagerXPCClient .cxx_destruct]
  -[TUCallHistoryManagerXPCClient updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:]
  -[TUCallHistoryManagerXPCClient init]
  -[TUCallHistoryManagerXPCClient handleServerDisconnect]
  -[TUCallHistoryManagerXPCClient serverWithErrorHandler:]
  -[TUCallHistoryManagerXPCClient setQueue:]
  -[TUCallHistoryManagerXPCClient queue]
  -[TUCallHistoryManagerXPCClient dealloc]
  -[TUCallHistoryManagerXPCClient invalidate]


TUContactsDataProviderFetchRequest : NSObject
 @property  BOOL voicemail
 @property  BOOL emergency
 @property  BOOL blocked
 @property  BOOL conversation
 @property  BOOL verified
 @property  BOOL incoming
 @property  NSString *callerNameFromNetwork
 @property  NSString *isoCountryCode
 @property  NSArray *handles
 @property  NSString *contactIdentifier
 @property  NSArray *auxiliaryKeysToFetch
 @property  NSString *phoneNumberPrefixHint
 @property  BOOL useNetworkCountryCode

  // instance methods
  -[TUContactsDataProviderFetchRequest isBlocked]
  -[TUContactsDataProviderFetchRequest isoCountryCode]
  -[TUContactsDataProviderFetchRequest initWithHandle:]
  -[TUContactsDataProviderFetchRequest setContactIdentifier:]
  -[TUContactsDataProviderFetchRequest isVerified]
  -[TUContactsDataProviderFetchRequest .cxx_destruct]
  -[TUContactsDataProviderFetchRequest contactIdentifier]
  -[TUContactsDataProviderFetchRequest init]
  -[TUContactsDataProviderFetchRequest handles]
  -[TUContactsDataProviderFetchRequest initWithHandles:]
  -[TUContactsDataProviderFetchRequest isIncoming]
  -[TUContactsDataProviderFetchRequest isConversation]
  -[TUContactsDataProviderFetchRequest initWithCall:]
  -[TUContactsDataProviderFetchRequest useNetworkCountryCode]
  -[TUContactsDataProviderFetchRequest auxiliaryKeysToFetch]
  -[TUContactsDataProviderFetchRequest callerNameFromNetwork]
  -[TUContactsDataProviderFetchRequest isVoicemail]
  -[TUContactsDataProviderFetchRequest isEmergency]
  -[TUContactsDataProviderFetchRequest phoneNumberPrefixHint]
  -[TUContactsDataProviderFetchRequest setAuxiliaryKeysToFetch:]
  -[TUContactsDataProviderFetchRequest setPhoneNumberPrefixHint:]
  -[TUContactsDataProviderFetchRequest setUseNetworkCountryCode:]


TUCallServicesClientCapabilities : NSObject <NSSecureCoding>
 @property  <TUCallServicesClientCapabilitiesActions> *delegate
 @property  BOOL wantsCallDisconnectionOnInvalidation
 @property  BOOL wantsCallStopStreamingOnInvalidation
 @property  BOOL wantsFrequencyChangeNotifications
 @property  BOOL wantsCallNotificationsDisabledWhileSuspended

  // class methods
  +[TUCallServicesClientCapabilities supportsSecureCoding]

  // instance methods
  -[TUCallServicesClientCapabilities wantsFrequencyChangeNotifications]
  -[TUCallServicesClientCapabilities initWithCoder:]
  -[TUCallServicesClientCapabilities save]
  -[TUCallServicesClientCapabilities .cxx_destruct]
  -[TUCallServicesClientCapabilities setDelegate:]
  -[TUCallServicesClientCapabilities setWantsCallDisconnectionOnInvalidation:]
  -[TUCallServicesClientCapabilities wantsCallStopStreamingOnInvalidation]
  -[TUCallServicesClientCapabilities setWantsCallNotificationsDisabledWhileSuspended:]
  -[TUCallServicesClientCapabilities delegate]
  -[TUCallServicesClientCapabilities wantsCallNotificationsDisabledWhileSuspended]
  -[TUCallServicesClientCapabilities setWantsCallStopStreamingOnInvalidation:]
  -[TUCallServicesClientCapabilities wantsCallDisconnectionOnInvalidation]
  -[TUCallServicesClientCapabilities encodeWithCoder:]
  -[TUCallServicesClientCapabilities setWantsFrequencyChangeNotifications:]


TUMomentsControllerXPCClient : NSObject <TUMomentsControllerXPCClient, TUMomentsControllerDataSource>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  int token
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <TUMomentsControllerDataSourceDelegate> *delegate
 @property  int processIdentifier
 @property  NSString *processName

  // class methods
  +[TUMomentsControllerXPCClient setSynchronousServer:]
  +[TUMomentsControllerXPCClient synchronousServer]
  +[TUMomentsControllerXPCClient asynchronousServer]
  +[TUMomentsControllerXPCClient setAsynchronousServer:]
  +[TUMomentsControllerXPCClient momentsControllerServerXPCInterface]
  +[TUMomentsControllerXPCClient momentsControllerClientXPCInterface]

  // instance methods
  -[TUMomentsControllerXPCClient synchronousServerWithErrorHandler:]
  -[TUMomentsControllerXPCClient setXpcConnection:]
  -[TUMomentsControllerXPCClient xpcConnection]
  -[TUMomentsControllerXPCClient .cxx_destruct]
  -[TUMomentsControllerXPCClient setDelegate:]
  -[TUMomentsControllerXPCClient processName]
  -[TUMomentsControllerXPCClient init]
  -[TUMomentsControllerXPCClient serverWithErrorHandler:]
  -[TUMomentsControllerXPCClient token]
  -[TUMomentsControllerXPCClient processIdentifier]
  -[TUMomentsControllerXPCClient delegate]
  -[TUMomentsControllerXPCClient queue]
  -[TUMomentsControllerXPCClient dealloc]
  -[TUMomentsControllerXPCClient invalidate]
  -[TUMomentsControllerXPCClient startRequestWithMediaType:forStreamToken:requesteeID:completion:]
  -[TUMomentsControllerXPCClient endRequestWithTransactionID:completion:]
  -[TUMomentsControllerXPCClient registerStreamToken:requesterID:remoteIDSDestinations:remoteMomentsAvailable:completion:]
  -[TUMomentsControllerXPCClient unregisterStreamToken:completion:]
  -[TUMomentsControllerXPCClient processBundleIdentifier]
  -[TUMomentsControllerXPCClient _registerConnection]
  -[TUMomentsControllerXPCClient requestSandboxExtensionForURL:reply:]
  -[TUMomentsControllerXPCClient didUpdateCapabilities:forVideoStreamToken:]
  -[TUMomentsControllerXPCClient willCaptureRemoteRequestFromRequesterID:]
  -[TUMomentsControllerXPCClient didReceiveLocallyRequestedMomentDescriptor:]


TUICFQueryResult : NSObject
 @property  BOOL allowCallForDestinationID
 @property  BOOL fromBlockList

  // instance methods
  -[TUICFQueryResult isFromBlockList]
  -[TUICFQueryResult allowCallForDestinationID]
  -[TUICFQueryResult setAllowCallForDestinationID:]
  -[TUICFQueryResult setFromBlockList:]


TUICFInterface : NSObject
  // class methods
  +[TUICFInterface allowCallForDestinationID:providerIdentifier:queue:completionHandler:]
  +[TUICFInterface allowCallForDestinationID:providerIdentifier:]


TUCallCenter : NSObject <TUCallContainer>
 @property  <TUFeatureFlags> *featureFlags
 @property  TUCallServicesInterface *callServicesInterface
 @property  TUAudioDeviceController *audioDeviceController
 @property  TUVideoDeviceController *videoDeviceController
 @property  TURouteController *routeController
 @property  TURouteController *pairedHostDeviceRouteController
 @property  TUCallFilterController *callFilterController
 @property  TUNeighborhoodActivityConduit *neighborhoodActivityConduit
 @property  CNContactStore *contactStore
 @property  TUCallProviderManager *providerManager
 @property  TUConversationManager *conversationManager
 @property  {CGSize=dd} localLandscapeAspectRatio
 @property  {CGSize=dd} localPortraitAspectRatio
 @property  NSObject<OS_dispatch_queue> *queue
 @property  {os_unfair_lock_s=I} accessorLock
 @property  @? disconnectCallPreflight
 @property  <TUCallContainerPrivate> *callContainer
 @property  @? launchAppForJoinRequestBlock
 @property  BOOL canMergeCalls
 @property  BOOL addCallAllowed
 @property  BOOL ambiguous
 @property  BOOL endAndAnswerAllowed
 @property  BOOL holdAndAnswerAllowed
 @property  NSArray *currentCalls
 @property  NSArray *currentVideoCalls
 @property  NSArray *currentAudioAndVideoCalls
 @property  NSArray *incomingCalls
 @property  NSArray *displayedCalls
 @property  NSArray *displayedAudioAndVideoCalls
 @property  NSArray *conferenceParticipantCalls
 @property  NSArray *callsHostedElsewhere
 @property  NSArray *callsWithAnEndpointElsewhere
 @property  NSArray *callsHostedOrAnEndpointElsewhere
 @property  NSArray *callsOnDefaultPairedDevice
 @property  TUCall *incomingCall
 @property  TUCall *incomingVideoCall
 @property  TUCall *activeVideoCall
 @property  TUCall *currentVideoCall
 @property  unsigned long currentCallCount
 @property  unsigned long currentVideoCallCount
 @property  unsigned long currentAudioAndVideoCallCount
 @property  unsigned long callCountOnDefaultPairedDevice
 @property  BOOL hasCurrentCalls
 @property  BOOL hasCurrentAudioCalls
 @property  BOOL hasCurrentVideoCalls
 @property  BOOL anyCallIsHostedOnCurrentDevice
 @property  BOOL anyCallIsEndpointOnCurrentDevice
 @property  NSArray *currentCallGroups
 @property  NSArray *currentAudioAndVideoCallGroups
 @property  NSArray *callGroupsOnDefaultPairedDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[TUCallCenter sharedInstance]
  +[TUCallCenter supportsJoiningConversationWithRequest:]
  +[TUCallCenter sharedContactStore]
  +[TUCallCenter sharedInstanceWithQueue:server:shouldRegister:]
  +[TUCallCenter callCenterWithQueue:server:shouldRegister:]
  +[TUCallCenter callCenterWithQueue:]

  // instance methods
  -[TUCallCenter currentAudioAndVideoCalls]
  -[TUCallCenter activeVideoCall]
  -[TUCallCenter currentCallGroups]
  -[TUCallCenter hasCurrentVideoCalls]
  -[TUCallCenter currentCallCount]
  -[TUCallCenter accessorLock]
  -[TUCallCenter existingCallsHaveMultipleProviders]
  -[TUCallCenter launchAppForDialRequest:completion:]
  -[TUCallCenter currentCalls]
  -[TUCallCenter callsOnDefaultPairedDevice]
  -[TUCallCenter displayedCalls]
  -[TUCallCenter contactStore]
  -[TUCallCenter callGroupsOnDefaultPairedDevice]
  -[TUCallCenter frontmostAudioOrVideoCall]
  -[TUCallCenter conferenceParticipantCalls]
  -[TUCallCenter callsHostedElsewhere]
  -[TUCallCenter callPassingTest:]
  -[TUCallCenter currentVideoCalls]
  -[TUCallCenter _allCalls]
  -[TUCallCenter setContactStore:]
  -[TUCallCenter anyCallIsHostedOnCurrentDevice]
  -[TUCallCenter hasCurrentCalls]
  -[TUCallCenter swapCalls]
  -[TUCallCenter currentVideoCall]
  -[TUCallCenter audioOrVideoCallWithStatus:]
  -[TUCallCenter anyCallPassesTest:]
  -[TUCallCenter currentAudioAndVideoCallGroups]
  -[TUCallCenter hasCurrentAudioCalls]
  -[TUCallCenter currentVideoCallCount]
  -[TUCallCenter callPassingTest:sortedUsingComparator:]
  -[TUCallCenter conferenceCall]
  -[TUCallCenter allCallsPassTest:]
  -[TUCallCenter currentAudioAndVideoCallCount]
  -[TUCallCenter callsPassingTest:]
  -[TUCallCenter isMergeable]
  -[TUCallCenter incomingVideoCall]
  -[TUCallCenter callsWithGroupUUID:]
  -[TUCallCenter displayedAudioAndVideoCalls]
  -[TUCallCenter fetchCurrentCalls]
  -[TUCallCenter anyCallIsEndpointOnCurrentDevice]
  -[TUCallCenter callsWithAnEndpointElsewhere]
  -[TUCallCenter callWithUniqueProxyIdentifier:]
  -[TUCallCenter videoCallWithStatus:]
  -[TUCallCenter allCallsAreOfService:]
  -[TUCallCenter callWithStatus:]
  -[TUCallCenter frontmostCall]
  -[TUCallCenter callsWithStatus:]
  -[TUCallCenter displayedCallFromCalls:]
  -[TUCallCenter incomingCalls]
  -[TUCallCenter incomingCall]
  -[TUCallCenter callWithCallUUID:]
  -[TUCallCenter handleHeadsetButtonPressForActiveCalls]
  -[TUCallCenter displayedCall]
  -[TUCallCenter audioAndVideoCallsWithStatus:]
  -[TUCallCenter countOfCallsPassingTest:]
  -[TUCallCenter callsHostedOrAnEndpointElsewhere]
  -[TUCallCenter callCountOnDefaultPairedDevice]
  -[TUCallCenter routeController]
  -[TUCallCenter enteredForegroundForCall:]
  -[TUCallCenter neighborhoodActivityConduit]
  -[TUCallCenter canMergeCalls]
  -[TUCallCenter pullCallFromClientUsingHandoffActivityUserInfo:completion:]
  -[TUCallCenter _dialWithRequest:completion:]
  -[TUCallCenter _callGroupCountForCall:withCall:]
  -[TUCallCenter updateCall:withAnswerRequest:]
  -[TUCallCenter _isCallingAvailableOnSecondaryDeviceWithRelayCallingAvailability:isProviderAvailable:isRelayAllowed:isEmergency:supportsBasebandCalling:shouldUseRelay:]
  -[TUCallCenter canDialWithRequest:]
  -[TUCallCenter sendFieldModeDigits:forProvider:]
  -[TUCallCenter willEnterBackgroundForAllCalls]
  -[TUCallCenter launchAppForJoinRequestBlock]
  -[TUCallCenter handleActionForWiredHeadsetMiddleButtonPress]
  -[TUCallCenter .cxx_destruct]
  -[TUCallCenter _shouldPreferRelayOverDirectSecondaryCallingForRelayingCallingAvailability:isRelayCallingSupported:isEmergencyCallbackPossible:]
  -[TUCallCenter disconnectCall:]
  -[TUCallCenter isAmbiguous]
  -[TUCallCenter setProviderManager:]
  -[TUCallCenter holdCall:]
  -[TUCallCenter setConversationManager:]
  -[TUCallCenter isRelayCallingSupportedForProvider:isVideo:]
  -[TUCallCenter pullHostedCallsFromPairedHostDevice]
  -[TUCallCenter disconnectCall:withReason:]
  -[TUCallCenter callContainer]
  -[TUCallCenter pickRouteForRapportDeviceWithMediaSystemIdentifier:effectiveIdentifier:]
  -[TUCallCenter disconnectDeviceFromSplitSessionUsingMediaRouteIdentifier:completion:]
  -[TUCallCenter requestVideoUpgradeForCall:]
  -[TUCallCenter shouldPreferRelayOverDirectSecondaryCallingForProvider:isVideo:]
  -[TUCallCenter reportLocalPreviewStoppedForCall:]
  -[TUCallCenter _isEmergencyDialRequest:]
  -[TUCallCenter featureFlags]
  -[TUCallCenter pushRelayingCallsToHostWithSourceIdentifier:]
  -[TUCallCenter _preflightDisconnectForCalls:withCompletion:]
  -[TUCallCenter disconnectAllCalls]
  -[TUCallCenter handleActionForWiredHeadsetMiddleButtonPressWithSourceIdentifier:allowBluetoothAnswerWithoutDowngrade:shouldForceDowngradeToAudio:]
  -[TUCallCenter isSendToVoicemailAllowed]
  -[TUCallCenter isTakingCallsPrivateAllowed]
  -[TUCallCenter ungroupCall:]
  -[TUCallCenter localLandscapeAspectRatio]
  -[TUCallCenter isEndAndAnswerAllowed]
  -[TUCallCenter localPortraitAspectRatio]
  -[TUCallCenter init]
  -[TUCallCenter joinConversationWithConversationRequest:]
  -[TUCallCenter _canDialWithRequest:shouldUseRelay:]
  -[TUCallCenter setCallFilterController:]
  -[TUCallCenter answerCall:withSourceIdentifier:wantsHoldMusic:]
  -[TUCallCenter dialWithRequest:]
  -[TUCallCenter launchAppForJoinRequest:]
  -[TUCallCenter callServicesClientCapabilities]
  -[TUCallCenter answerCallWithHoldMusic:]
  -[TUCallCenter answerWithRequest:]
  -[TUCallCenter initWithQueue:]
  -[TUCallCenter pairedHostDeviceRouteController]
  -[TUCallCenter groupCall:withOtherCall:]
  -[TUCallCenter pushHostedCallsToDestination:]
  -[TUCallCenter setLocalPortraitAspectRatio:]
  -[TUCallCenter disconnectCallPreflight]
  -[TUCallCenter setLaunchAppForJoinRequestBlock:]
  -[TUCallCenter resumeCall:]
  -[TUCallCenter setLocalLandscapeAspectRatio:]
  -[TUCallCenter endHeldAndAnswerCall:]
  -[TUCallCenter unholdCall:]
  -[TUCallCenter isHoldAllowed]
  -[TUCallCenter isHoldAndAnswerAllowed]
  -[TUCallCenter holdActiveAndAnswerCall:]
  -[TUCallCenter sendUserScoreToRTCReporting:withScore:]
  -[TUCallCenter joinConversationWithRequest:]
  -[TUCallCenter registerWithCompletionHandler:]
  -[TUCallCenter enteredBackgroundForAllCalls]
  -[TUCallCenter setNeighborhoodActivityConduit:]
  -[TUCallCenter isAddCallAllowed]
  -[TUCallCenter isHardPauseAvailable]
  -[TUCallCenter activateInCallUIWithActivityContinuationIdentifier:]
  -[TUCallCenter providerManager]
  -[TUCallCenter answerCall:withSourceIdentifier:]
  -[TUCallCenter callServicesInterface]
  -[TUCallCenter isDirectCallingCurrentlyAvailableForProvider:isVideo:]
  -[TUCallCenter pushRelayingCallsToHost]
  -[TUCallCenter _existingCallsAllowDialRequest:allowVoiceWithData:]
  -[TUCallCenter canGroupCall:withCall:]
  -[TUCallCenter queue]
  -[TUCallCenter _splitSessionErrorWithCode:underlyingError:]
  -[TUCallCenter setAudioDeviceController:]
  -[TUCallCenter setVideoDeviceController:]
  -[TUCallCenter answerOrJoinCall:]
  -[TUCallCenter shouldAllowRingingCallStatusIndicator:]
  -[TUCallCenter dealloc]
  -[TUCallCenter setTTYType:forCall:]
  -[TUCallCenter setPairedHostDeviceRouteController:]
  -[TUCallCenter createSplitSessionWithDeviceMediaRouteIdentifier:completion:]
  -[TUCallCenter disconnectCurrentCallAndActivateHeld]
  -[TUCallCenter pullRelayingCallsFromClient]
  -[TUCallCenter answerCall:]
  -[TUCallCenter activeConversationForCall:]
  -[TUCallCenter endActiveAndAnswerCall:]
  -[TUCallCenter setDisconnectCallPreflight:]
  -[TUCallCenter setRouteController:]
  -[TUCallCenter setCallServicesInterface:]
  -[TUCallCenter endActiveOrHeldAndAnswerCall:]
  -[TUCallCenter lastDaemonConnectTime]
  -[TUCallCenter conversationManager]
  -[TUCallCenter dialWithRequest:completion:]
  -[TUCallCenter applicationWillLaunchForStartCallInteraction:]
  -[TUCallCenter callFilterController]
  -[TUCallCenter isSwappable]
  -[TUCallCenter initWithQueue:featureFlags:]
  -[TUCallCenter videoDeviceController]
  -[TUCallCenter handleActionForWiredHeadsetMiddleButtonLongPress]
  -[TUCallCenter shouldSuppressInCallStatusBar:]
  -[TUCallCenter audioDeviceController]


TUScreenTimeDataSource : NSObject <TUScreenTimeStateDataSource>
 @property  STManagementState *screenTimeManagementState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUScreenTimeDataSource .cxx_destruct]
  -[TUScreenTimeDataSource screenTimeStateWithCompletionHandler:]
  -[TUScreenTimeDataSource init]
  -[TUScreenTimeDataSource screenTimeManagementState]


TUCallHistoryManager : NSObject
 @property  <TUCallHistoryManagerDataSource> *dataSource

  // instance methods
  -[TUCallHistoryManager initWithDataSource:]
  -[TUCallHistoryManager .cxx_destruct]
  -[TUCallHistoryManager dataSource]
  -[TUCallHistoryManager updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:]
  -[TUCallHistoryManager init]
  -[TUCallHistoryManager dealloc]
  -[TUCallHistoryManager updateOutgoingLocalParticipantUUID:forCallsWithLocalParticipantUUID:]


TUConfiguration : NSObject <TUConfiguration>
 @property  TUDelegateController *delegateController
 @property  unsigned long announceCalls
 @property  NSString *conversationLinkBaseURLString
 @property  NSURL *conversationLinkBaseURL
 @property  BOOL simulateFatalPersistentStoreError
 @property  BOOL simulateInternationalCall
 @property  <TUKeyValueDataSource><TUMutableKeyValueDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[TUConfiguration removeDelegate:]
  -[TUConfiguration addDelegate:queue:]
  -[TUConfiguration numberForKey:]
  -[TUConfiguration initWithDataSource:]
  -[TUConfiguration .cxx_destruct]
  -[TUConfiguration setAnnounceCalls:]
  -[TUConfiguration dataSource]
  -[TUConfiguration announceCalls]
  -[TUConfiguration delegateController]
  -[TUConfiguration conversationLinkBaseURLString]
  -[TUConfiguration conversationLinkBaseURL]
  -[TUConfiguration simulateFatalPersistentStoreError]
  -[TUConfiguration simulateInternationalCall]
  -[TUConfiguration setConversationLinkBaseURLString:]
  -[TUConfiguration setConversationLinkBaseURL:]
  -[TUConfiguration setSimulateFatalPersistentStoreError:]
  -[TUConfiguration setSimulateInternationalCall:]


TUIntentController : NSObject
 @property  <TUHandleContactProvider> *contactProvider

  // class methods
  +[TUIntentController tu_INPersonHandleForTUHandle:label:]
  +[TUIntentController tu_INPersonHandleTypeForTUHandleType:]

  // instance methods
  -[TUIntentController .cxx_destruct]
  -[TUIntentController contactProvider]
  -[TUIntentController startCallIntentByHandleForHandles:capability:destinationType:]
  -[TUIntentController personsByHandleForHandles:]
  -[TUIntentController initWithContactProvider:]
  -[TUIntentController voicemailStartCallIntentByHandleForHandles:]


TUConversationActivitySession : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  TUConversationActivity *activity
 @property  unsigned long state
 @property  NSXPCListenerEndpoint *endpoint
 @property  NSDate *timestamp
 @property  BOOL isLocallyInitiated
 @property  BOOL isLightweightPrimaryInitiated
 @property  BOOL isFirstJoin
 @property  BOOL permittedToJoin
 @property  NSSet *activeRemoteParticipants
 @property  unsigned long distributionCount
 @property  TUHandle *terminatingHandle

  // class methods
  +[TUConversationActivitySession supportsSecureCoding]

  // instance methods
  -[TUConversationActivitySession setActivity:]
  -[TUConversationActivitySession UUID]
  -[TUConversationActivitySession initWithCoder:]
  -[TUConversationActivitySession .cxx_destruct]
  -[TUConversationActivitySession setState:]
  -[TUConversationActivitySession isEqual:]
  -[TUConversationActivitySession activity]
  -[TUConversationActivitySession state]
  -[TUConversationActivitySession setEndpoint:]
  -[TUConversationActivitySession timestamp]
  -[TUConversationActivitySession endpoint]
  -[TUConversationActivitySession copyWithZone:]
  -[TUConversationActivitySession setTimestamp:]
  -[TUConversationActivitySession encodeWithCoder:]
  -[TUConversationActivitySession setUUID:]
  -[TUConversationActivitySession activeRemoteParticipants]
  -[TUConversationActivitySession initWithActivity:state:uuid:endpoint:locallyInitiated:timestamp:isFirstJoin:activeRemoteParticipants:]
  -[TUConversationActivitySession initWithActivity:uuid:locallyInitiated:timestamp:isFirstJoin:]
  -[TUConversationActivitySession isLocallyInitiated]
  -[TUConversationActivitySession isLightweightPrimaryInitiated]
  -[TUConversationActivitySession isFirstJoin]
  -[TUConversationActivitySession isPermittedToJoin]
  -[TUConversationActivitySession distributionCount]
  -[TUConversationActivitySession isEqualToConversationActivitySession:]
  -[TUConversationActivitySession setDistributionCount:]
  -[TUConversationActivitySession setIsLightweightPrimaryInitiated:]
  -[TUConversationActivitySession setPermittedToJoin:]
  -[TUConversationActivitySession initWithActivity:state:endpoint:locallyInitiated:timestamp:isFirstJoin:]
  -[TUConversationActivitySession initWithActivity:locallyInitiated:timestamp:isFirstJoin:]
  -[TUConversationActivitySession launchApplicationWithForcedURL:completion:]
  -[TUConversationActivitySession publicCopy]
  -[TUConversationActivitySession terminatingHandle]
  -[TUConversationActivitySession setTerminatingHandle:]


TUNearbyDeviceHandle : NSObject <NSSecureCoding, NSCopying>
 @property  NSDictionary *knownIdentifiersByHandleType
 @property  NSDictionary *plistRepresentation
 @property  NSString *name
 @property  long long deviceModel

  // class methods
  +[TUNearbyDeviceHandle supportsSecureCoding]

  // instance methods
  -[TUNearbyDeviceHandle deviceModel]
  -[TUNearbyDeviceHandle name]
  -[TUNearbyDeviceHandle initWithCoder:]
  -[TUNearbyDeviceHandle .cxx_destruct]
  -[TUNearbyDeviceHandle plistRepresentation]
  -[TUNearbyDeviceHandle isEqual:]
  -[TUNearbyDeviceHandle initWithType:identifier:name:]
  -[TUNearbyDeviceHandle identifierWithType:]
  -[TUNearbyDeviceHandle identifierDescription]
  -[TUNearbyDeviceHandle copyWithZone:]
  -[TUNearbyDeviceHandle encodeWithCoder:]
  -[TUNearbyDeviceHandle knownIdentifiersByHandleType]
  -[TUNearbyDeviceHandle initWithName:knownIdentifiers:deviceModel:]
  -[TUNearbyDeviceHandle initWithName:knownIdentifiers:]
  -[TUNearbyDeviceHandle isEquivalentToDeviceHandle:]
  -[TUNearbyDeviceHandle isEqualToDeviceHandle:]


TULocked : NSObject
  // instance methods
  -[TULocked initWithObject:]
  -[TULocked .cxx_destruct]
  -[TULocked performWhileLocked:]
  -[TULocked object]
  -[TULocked setObject:]
  -[TULocked unfairLockForTesting]


TUMomentsProvider : NSObject
 @property  long long streamToken
 @property  NSString *requesterID
 @property  NSDictionary *remoteIDSDestinations
 @property  BOOL remoteMomentsAvailable

  // instance methods
  -[TUMomentsProvider .cxx_destruct]
  -[TUMomentsProvider initWithConversation:]
  -[TUMomentsProvider requesterID]
  -[TUMomentsProvider isEqualToProvider:]
  -[TUMomentsProvider streamToken]
  -[TUMomentsProvider remoteIDSDestinations]
  -[TUMomentsProvider isRemoteMomentsAvailable]
  -[TUMomentsProvider initWithCall:]


TUConversationManagerXPCClient : NSObject <TUConversationManagerXPCClient, TUConversationManagerDataSource>
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *xpcConnection
 @property  BOOL hasRequestedInitialState
 @property  BOOL hasInitialState
 @property  int shouldConnectToken
 @property  BOOL shouldConnectToHost
 @property  NSDictionary *conversationsByGroupUUID
 @property  NSSet *activitySuggestions
 @property  NSDictionary *activityAuthorizedBundleIdentifiers
 @property  NSNumber *sharePlayAvailable
 @property  NSNumber *screenSharingAvailable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSDictionary *incomingPendingConversationsByGroupUUID
 @property  NSDictionary *pseudonymsByCallUUID
 @property  NSSet *activatedConversationLinks
 @property  BOOL autoSharePlayEnabled
 @property  BOOL isSharePlayAvailable
 @property  BOOL isScreenSharingAvailable
 @property  <TUConversationManagerDataSourceDelegate> *delegate
 @property  <TUConversationMediaControllerDataSourceDelegate> *mediaDelegate

  // class methods
  +[TUConversationManagerXPCClient setSynchronousServer:]
  +[TUConversationManagerXPCClient synchronousServer]
  +[TUConversationManagerXPCClient asynchronousServer]
  +[TUConversationManagerXPCClient setAsynchronousServer:]
  +[TUConversationManagerXPCClient conversationManagerServerXPCInterface]
  +[TUConversationManagerXPCClient conversationManagerClientXPCInterface]
  +[TUConversationManagerXPCClient conversationManagerAllowedClasses]

  // instance methods
  -[TUConversationManagerXPCClient synchronousServerWithErrorHandler:]
  -[TUConversationManagerXPCClient accessorLock]
  -[TUConversationManagerXPCClient conversation:receivedActivitySessionEvent:]
  -[TUConversationManagerXPCClient setXpcConnection:]
  -[TUConversationManagerXPCClient activateConversationNoticeWithActionURL:bundleIdentifier:]
  -[TUConversationManagerXPCClient _requestInitialStateWithCompletionHandler:]
  -[TUConversationManagerXPCClient xpcConnection]
  -[TUConversationManagerXPCClient setSharePlayAvailable:]
  -[TUConversationManagerXPCClient setShouldConnectToken:]
  -[TUConversationManagerXPCClient addRemoteMembers:otherInvitedHandles:toConversation:]
  -[TUConversationManagerXPCClient mediaDelegate]
  -[TUConversationManagerXPCClient scheduleConversationLinkCheckInInitial:]
  -[TUConversationManagerXPCClient invalidateLink:completionHandler:]
  -[TUConversationManagerXPCClient autoSharePlayEnabled]
  -[TUConversationManagerXPCClient buzzMember:conversation:]
  -[TUConversationManagerXPCClient activatedConversationLinks]
  -[TUConversationManagerXPCClient receivedTrackedPendingMember:forConversationLink:]
  -[TUConversationManagerXPCClient hasInitialState]
  -[TUConversationManagerXPCClient _invokeCompletionHandler:]
  -[TUConversationManagerXPCClient sharePlayAvailableChanged:]
  -[TUConversationManagerXPCClient setGridDisplayMode:conversation:]
  -[TUConversationManagerXPCClient checkLinkValidity:completionHandler:]
  -[TUConversationManagerXPCClient conversationUpdatedMessagesGroupPhoto:]
  -[TUConversationManagerXPCClient removeActivitySuggestion:]
  -[TUConversationManagerXPCClient setAudioEnabled:forRemoteParticipantWithIdentifier:conversation:]
  -[TUConversationManagerXPCClient .cxx_destruct]
  -[TUConversationManagerXPCClient createActivitySession:onConversation:]
  -[TUConversationManagerXPCClient shouldConnectToHost]
  -[TUConversationManagerXPCClient mediaPrioritiesChangedForConversation:]
  -[TUConversationManagerXPCClient updateIncomingPendingConversationsByGroupUUID:]
  -[TUConversationManagerXPCClient setShouldConnectToHost:]
  -[TUConversationManagerXPCClient sharePlayAvailable]
  -[TUConversationManagerXPCClient remoteScreenShareEndedWithReason:]
  -[TUConversationManagerXPCClient setConversationsByGroupUUID:]
  -[TUConversationManagerXPCClient asynchronousServerWithErrorHandler:]
  -[TUConversationManagerXPCClient launchApplicationForActivitySessionUUID:forceBackground:completionHandler:]
  -[TUConversationManagerXPCClient setDelegate:]
  -[TUConversationManagerXPCClient approvePendingMember:forConversation:]
  -[TUConversationManagerXPCClient fetchUpcomingNoticeWithCompletionHandler:]
  -[TUConversationManagerXPCClient conversation:requestedScreenShareForParticipant:]
  -[TUConversationManagerXPCClient setAutoSharePlayEnabled:]
  -[TUConversationManagerXPCClient launchApplicationForActivitySessionUUID:completionHandler:]
  -[TUConversationManagerXPCClient setDownlinkMuted:forRemoteParticipantsInConversation:]
  -[TUConversationManagerXPCClient setActivitySuggestions:]
  -[TUConversationManagerXPCClient updateActivitySuggestions:]
  -[TUConversationManagerXPCClient conversation:appLaunchState:forActivitySession:]
  -[TUConversationManagerXPCClient conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:]
  -[TUConversationManagerXPCClient getMessagesGroupDetailsForConversationUUID:completionHandler:]
  -[TUConversationManagerXPCClient activateLink:completionHandler:]
  -[TUConversationManagerXPCClient activitySuggestions]
  -[TUConversationManagerXPCClient init]
  -[TUConversationManagerXPCClient incomingPendingConversationsByGroupUUID]
  -[TUConversationManagerXPCClient handleServerDisconnect]
  -[TUConversationManagerXPCClient refreshActiveConversations]
  -[TUConversationManagerXPCClient setHasInitialState:]
  -[TUConversationManagerXPCClient setActivityAuthorization:forBundleIdentifier:]
  -[TUConversationManagerXPCClient conversationsByGroupUUID]
  -[TUConversationManagerXPCClient generateLinkForConversation:completionHandler:]
  -[TUConversationManagerXPCClient setIgnoreLetMeInRequests:forConversation:]
  -[TUConversationManagerXPCClient updateConversationsByGroupUUID:]
  -[TUConversationManagerXPCClient addInvitedMemberHandles:toConversationLink:completionHandler:]
  -[TUConversationManagerXPCClient conversation:participant:addedNotice:]
  -[TUConversationManagerXPCClient conversationUpdateMessagesGroupPhoto:]
  -[TUConversationManagerXPCClient updateActivityAuthorizedBundleIdentifierState:]
  -[TUConversationManagerXPCClient setHasRequestedInitialState:]
  -[TUConversationManagerXPCClient screenSharingAvailable]
  -[TUConversationManagerXPCClient setScreenSharingAvailable:]
  -[TUConversationManagerXPCClient presentDismissalAlertForActivitySession:onConversation:]
  -[TUConversationManagerXPCClient registerWithCompletionHandler:]
  -[TUConversationManagerXPCClient hasRequestedInitialState]
  -[TUConversationManagerXPCClient setActivityAuthorizedBundleIdentifiers:]
  -[TUConversationManagerXPCClient pseudonymsByCallUUID]
  -[TUConversationManagerXPCClient activityAuthorizedBundleIdentifiers]
  -[TUConversationManagerXPCClient conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:]
  -[TUConversationManagerXPCClient getInactiveLinkWithCompletionHandler:]
  -[TUConversationManagerXPCClient setLinkName:forConversationLink:completionHandler:]
  -[TUConversationManagerXPCClient getMessagesGroupDetailsForMessagesGroupUUID:completionHandler:]
  -[TUConversationManagerXPCClient isScreenSharingAvailable]
  -[TUConversationManagerXPCClient requestScreenShareFromMember:conversation:]
  -[TUConversationManagerXPCClient shouldConnectToken]
  -[TUConversationManagerXPCClient delegate]
  -[TUConversationManagerXPCClient updateConversationWithUUID:participantPresentationContexts:]
  -[TUConversationManagerXPCClient linkSyncStateIncludeLinks:WithCompletion:]
  -[TUConversationManagerXPCClient remoteScreenShareAttributesChanged:isLocallySharing:]
  -[TUConversationManagerXPCClient queue]
  -[TUConversationManagerXPCClient getLatestRemoteScreenShareAttributesWithCompletionHandler:]
  -[TUConversationManagerXPCClient kickMember:conversation:]
  -[TUConversationManagerXPCClient conversation:addedMembersLocally:]
  -[TUConversationManagerXPCClient dealloc]
  -[TUConversationManagerXPCClient isSharePlayAvailable]
  -[TUConversationManagerXPCClient setMediaDelegate:]
  -[TUConversationManagerXPCClient _requestInitialStateIfNecessary]
  -[TUConversationManagerXPCClient invalidate]
  -[TUConversationManagerXPCClient setSupportsMessagesGroupProviding:]
  -[TUConversationManagerXPCClient generateLinkWithInvitedMemberHandles:linkLifetimeScope:completionHandler:]
  -[TUConversationManagerXPCClient screenSharingAvailableChanged:]
  -[TUConversationManagerXPCClient updateMessagesGroupName:onConversation:]
  -[TUConversationManagerXPCClient leaveActivitySession:onConversation:]
  -[TUConversationManagerXPCClient conversation:buzzedMember:]
  -[TUConversationManagerXPCClient updateActivatedConversationLinks:]
  -[TUConversationManagerXPCClient conversation:didChangeStateForActivitySession:]
  -[TUConversationManagerXPCClient rejectPendingMember:forConversation:]
  -[TUConversationManagerXPCClient removeConversationNoticeWithUUID:]
  -[TUConversationManagerXPCClient getActiveLinksWithCreatedOnly:completionHandler:]
  -[TUConversationManagerXPCClient addActivitySuggestion:]
  -[TUConversationManagerXPCClient renewLink:expirationDate:reason:completionHandler:]
  -[TUConversationManagerXPCClient setVideoEnabled:forRemoteParticipantWithIdentifier:conversation:]


CNContactStoreConfiguration(TUConversation)
	// class methods
	+[CNContactStoreConfiguration(TUConversation) tu_contactStoreConfigurationForConversation:]
	+[CNContactStoreConfiguration(TUConversation) tu_contactStoreConfigurationForBundleIdentifier:]
	+[CNContactStoreConfiguration(TUConversation) tu_contactStoreConfigurationForCall:]

(QueryParameters)
	// class methods
	+[(QueryParameters) faceTimePromptURLWithURL:]
	+[(QueryParameters) telephonyURLWithDestinationID:promptUser:]
	+[(QueryParameters) faceTimeShowInCallUIURL]
	+[(QueryParameters) faceTimeShowSystemCallControlsURL]
	+[(QueryParameters) _faceTimeURLWithHandle:addressBookUID:audioOnly:]
	+[(QueryParameters) _faceTimeURLWithDestinationID:addressBookUID:audioOnly:]
	+[(QueryParameters) faceTimeURLWithDestinationID:addressBookUID:audioOnly:]
	+[(QueryParameters) faceTimeTelephonyURLWithPhoneNumber:showPrompt:]
	+[(QueryParameters) _applyFaceTimeScheme:toFaceTimeURL:]
	+[(QueryParameters) faceTimeUpdateForegroundAppURL]
	+[(QueryParameters) faceTimeAppViewLinkDetailsURL]
	+[(QueryParameters) faceTimeAppJoinConversationLinkURL]
	+[(QueryParameters) faceTimeURLWithDestinationID:]
	+[(QueryParameters) faceTimeURLWithDestinationID:addressBookUID:]
	+[(QueryParameters) faceTimeURLWithDestinationID:addressBookUID:forceAssist:suppressAssist:wasAssisted:audioOnly:]
	+[(QueryParameters) faceTimeTelephonyURLWithPhoneNumber:]
	+[(QueryParameters) faceTimeURLWithURL:]
	+[(QueryParameters) faceTimeLaunchForIncomingCallURL]
	+[(QueryParameters) faceTimeLaunchForOutgoingConversationURL]
	+[(QueryParameters) faceTimeShowCarPlayInCallUIURL]
	+[(QueryParameters) faceTimeUpdateForegroundAppURLForBundleIdentifier:applicationType:]
	+[(QueryParameters) faceTimeAnswerURLWithSourceIdentifier:]
	+[(QueryParameters) faceTimeAppViewLinkDetailsURLForPseudonym:]
	+[(QueryParameters) faceTimeAppJoinConversationURLForConversationLinkURL:]
	+[(QueryParameters) screenSharingAppURL]
	+[(QueryParameters) faceTimeURLWithPhoneNumber:addressBookUID:forceAssist:suppressAssist:wasAssisted:]
	+[(QueryParameters) faceTimeURLWithPhoneNumber:addressBookUID:audioOnly:forceAssist:suppressAssist:wasAssisted:]
	+[(QueryParameters) telephonyURLWithDestinationID:]
	+[(QueryParameters) telephonyURLWithDestinationID:addressBookUID:]
	+[(QueryParameters) telephonyURLWithDestinationID:addressBookUID:forceAssist:suppressAssist:wasAssisted:]
	+[(QueryParameters) telephonyURLForVoicemail]
	+[(QueryParameters) telephonyURLForTelEmergencyCall]
	+[(QueryParameters) URLWithTelephoneNumber:]
	+[(QueryParameters) URLWithTelephoneNumber:promptUser:]
	+[(QueryParameters) URLWithTelephoneNumber:addressBookUID:]
	+[(QueryParameters) URLWithTelephoneNumber:addressBookUID:forceAssist:suppressAssist:wasAssisted:]
	+[(QueryParameters) tu_defaultAllowedSchemes]

	// instance methods
	-[(QueryParameters) queryParameters]
	-[(QueryParameters) formattedPhoneNumber]
	-[(QueryParameters) isFaceTimeURL]
	-[(QueryParameters) isFaceTimeAudioURL]
	-[(QueryParameters) tuQueryParameters]
	-[(QueryParameters) phoneNumber]
	-[(QueryParameters) sanitizedCopy]
	-[(QueryParameters) hasTelephonyScheme]
	-[(QueryParameters) isTelephonyURL]
	-[(QueryParameters) sanitizedCopyWithZone:]
	-[(QueryParameters) URLBySettingQueryParameterValue:forKey:]
	-[(QueryParameters) URLByDeletingQueryParameterWithKey:]
	-[(QueryParameters) isFaceTimeAppViewLinkDetailsURL]
	-[(QueryParameters) isFaceTimeOpenLinkURL]
	-[(QueryParameters) isFaceTimeAppJoinConversationLinkURL]
	-[(QueryParameters) isFaceTimePromptURL]
	-[(QueryParameters) isFaceTimeAudioPromptURL]
	-[(QueryParameters) isLaunchForIncomingCallURL]
	-[(QueryParameters) isShowInCallUIURL]
	-[(QueryParameters) faceTimeDestinationAccount]
	-[(QueryParameters) _isPhoneNumberID:]
	-[(QueryParameters) isFaceTimeMultiwayURL]
	-[(QueryParameters) isSystemCallControlsURL]
	-[(QueryParameters) pseudonymForLinkDetailsView]
	-[(QueryParameters) conversationLinkURLForOpenLinkURL]
	-[(QueryParameters) conversationLinkURLForJoinConversation]
	-[(QueryParameters) hasNoPromptOption]
	-[(QueryParameters) isDialCallURL]
	-[(QueryParameters) isLaunchForOutgoingConversationURL]
	-[(QueryParameters) isShowCarPlayInCallUIURL]
	-[(QueryParameters) isShowSystemCallControlsURL]
	-[(QueryParameters) isShowScreenSharingURL]
	-[(QueryParameters) isUpdateForegroundAppURL]
	-[(QueryParameters) foregroundAppBundleIdentifier]
	-[(QueryParameters) foregroundAppApplicationType]
	-[(QueryParameters) isAnswerRequestURL]
	-[(QueryParameters) answerRequestSourceIdentifier]
	-[(QueryParameters) _destinationIDConvertingNumbersToLatin:]
	-[(QueryParameters) _mobilePhoneQueryParameters]
	-[(QueryParameters) isEmergencyCallURL]
	-[(QueryParameters) _dialAssistBooleanQueryParameterValueForKey:]
	-[(QueryParameters) _hasScheme:]
	-[(QueryParameters) isTelephonyPromptURL]
	-[(QueryParameters) isVoicemailURL]
	-[(QueryParameters) _mobilePhonePathParameters]
	-[(QueryParameters) addressBookUID]
	-[(QueryParameters) callService]
	-[(QueryParameters) originatingUIIdentifier]
	-[(QueryParameters) forceAssist]
	-[(QueryParameters) suppressAssist]
	-[(QueryParameters) wasAlreadyAssisted]
	-[(QueryParameters) numberQualifiedForAddressBook]
	-[(QueryParameters) isWebSafeTelephoneURL]
	-[(QueryParameters) webSafeTelephoneURL]
	-[(QueryParameters) isBasebandLogURL]
	-[(QueryParameters) isEmergencyURL]
	-[(QueryParameters) telephonyParameterDictionary]
	-[(QueryParameters) sanitizedCopyWithZone:allowedSchemes:]

(QueryParameterSupport)
	// instance methods
	-[(QueryParameterSupport) asQueryParameterString]

CNContact(TelephonyUtilities)
	// class methods
	+[CNContact(TelephonyUtilities) keysToFetchForFaceTime]
	+[CNContact(TelephonyUtilities) tu_contactHandlesForHandle:]

	// instance methods
	-[CNContact(TelephonyUtilities) isoCountryCode]
	-[CNContact(TelephonyUtilities) displayName]
	-[CNContact(TelephonyUtilities) personNameComponents]
	-[CNContact(TelephonyUtilities) callerId]
	-[CNContact(TelephonyUtilities) handles]
	-[CNContact(TelephonyUtilities) destinationId]
	-[CNContact(TelephonyUtilities) emailAddressStrings]
	-[CNContact(TelephonyUtilities) tu_labeledValueForEmailAddress:]
	-[CNContact(TelephonyUtilities) tu_labeledValueForSocialProfileWithUsername:]
	-[CNContact(TelephonyUtilities) tu_labeledValueForPhoneNumber:]
	-[CNContact(TelephonyUtilities) tuHandlesForPhoneNumbers]
	-[CNContact(TelephonyUtilities) tuHandlesForEmailAddresses]
	-[CNContact(TelephonyUtilities) tu_labeledValueForHandle:]
	-[CNContact(TelephonyUtilities) allTUHandles]
	-[CNContact(TelephonyUtilities) backingContact]
	-[CNContact(TelephonyUtilities) phoneNumberStrings]
	-[CNContact(TelephonyUtilities) anyDestinationID]
	-[CNContact(TelephonyUtilities) faceTimeQuicklookURL]
	-[CNContact(TelephonyUtilities) allIDSDestinations]
	-[CNContact(TelephonyUtilities) mostRecentCallType]
	-[CNContact(TelephonyUtilities) backingContactId]
	-[CNContact(TelephonyUtilities) backingContactIdentifier]
	-[CNContact(TelephonyUtilities) mostRecentCallWasMissed]
	-[CNContact(TelephonyUtilities) idsCanonicalDestinations]

NSPredicate(TUManagedConversationLinkDescriptor)
	// class methods
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithInvitedHandleValue:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithInvitedHandleNormalizedValue:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithInvitedHandleType:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithOriginatorHandleValue:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithOriginatorHandleNormalizedValue:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithOriginatorHandleType:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithActivated:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithCreationDate:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithExpirationDate:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithExpirationDateAfter:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithGroupUUID:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithInvitedHandle:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithOriginatorHandle:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithPseudonym:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithPublicKey:]
	+[NSPredicate(TUManagedConversationLinkDescriptor) tu_predicateForConversationLinkDescriptorsWithPrivateKey:]

NSCharacterSet(FTCallHistorySearchModuleAdditions)
	// class methods
	+[NSCharacterSet(FTCallHistorySearchModuleAdditions) phoneNumberSeparatorCharacterSet]
	+[NSCharacterSet(FTCallHistorySearchModuleAdditions) phoneNumberSeparatorCharacterSet]

NSURLComponents(TelephonyUtilities)
	// instance methods
	-[NSURLComponents(TelephonyUtilities) firstQueryItemWithName:]
	-[NSURLComponents(TelephonyUtilities) containsQueryItemWithName:]
	-[NSURLComponents(TelephonyUtilities) containsPercentEncodedQueryItemWithName:]

CNContactStore(TUSearchUtilities)
	// class methods
	+[CNContactStore(TUSearchUtilities) tu_contactStore]
	+[CNContactStore(TUSearchUtilities) tu_authorizationStatus]
	+[CNContactStore(TUSearchUtilities) tu_isAuthorized]

	// instance methods
	-[CNContactStore(TUSearchUtilities) contactForIdentifier:]
	-[CNContactStore(TUSearchUtilities) contactForIdentifier:keysToFetch:]
	-[CNContactStore(TUSearchUtilities) contactForDestinationId:keysToFetch:]
	-[CNContactStore(TUSearchUtilities) contactForDestinationId:]
	-[CNContactStore(TUSearchUtilities) tu_contactsForContactHandles:keyDescriptors:error:]
	-[CNContactStore(TUSearchUtilities) tu_contactsForHandles:keyDescriptors:error:]
	-[CNContactStore(TUSearchUtilities) tu_contactsByContactHandleForContactHandles:keyDescriptors:error:]
	-[CNContactStore(TUSearchUtilities) tu_contactsByHandleForHandles:keyDescriptors:error:]
	-[CNContactStore(TUSearchUtilities) tu_enumeratorForChangeHistoryFetchRequest:error:]
	-[CNContactStore(TUSearchUtilities) tu_contactsByConversationMemberForConversationMembers:keyDescriptors:error:]
	-[CNContactStore(TUSearchUtilities) tu_contactsByRemoteConversationMemberForConversations:keyDescriptors:error:]

NSUserActivity(TelephonyUtilities)
	// class methods
	+[NSUserActivity(TelephonyUtilities) _isActivityTypeAllowedForDialRequest:]
	+[NSUserActivity(TelephonyUtilities) _isActivityTypeAllowedForJoinRequest:]
	+[NSUserActivity(TelephonyUtilities) makeActivityWithIntent:dialRequestAttachment:]
	+[NSUserActivity(TelephonyUtilities) makeActivityWithIntent:joinRequestAttachment:]

	// instance methods
	-[NSUserActivity(TelephonyUtilities) dialRequestAttachment]
	-[NSUserActivity(TelephonyUtilities) joinRequestAttachment]

NSUserDefaults(TelephonyUtilities)
	// class methods
	+[NSUserDefaults(TelephonyUtilities) tu_defaults]

	// instance methods
	-[NSUserDefaults(TelephonyUtilities) boolForKey:withDefault:]

CNLabeledValue(TUAdditions)
NSURLQueryItem(TelephonyUtilities)
	// class methods
	+[NSURLQueryItem(TelephonyUtilities) queryItemForHandleType:]
	+[NSURLQueryItem(TelephonyUtilities) queryItemValueForHandleType:]

NSBundle(TelephonyUtilities)
	// class methods
	+[NSBundle(TelephonyUtilities) tu_assumedIdentityForBundleIdentifier:]

	// instance methods
	-[NSBundle(TelephonyUtilities) tu_assumedIdentity]

IDSIDQueryController(TUIDSLookupManager)
IDSBatchIDQueryController(TUIDSLookupManager)
(TelephonyUtilities)
	// instance methods
	-[(TelephonyUtilities) tu_containsObjectPassingTest:]
	-[(TelephonyUtilities) tu_anyObjectPassingTest:]

(TelephonyUtilities)
	// class methods
	+[(TelephonyUtilities) tu_stringWithTUConfigurationAnnounceCalls:]

	// instance methods
	-[(TelephonyUtilities) destinationIdIsEmailAddress]
	-[(TelephonyUtilities) destinationIdIsPhoneNumber]
	-[(TelephonyUtilities) IDSFormattedDestinationID]
	-[(TelephonyUtilities) normalizedDestination]
	-[(TelephonyUtilities) destinationIdIsPseudonym]
	-[(TelephonyUtilities) destinationIdIsTemporary]
	-[(TelephonyUtilities) destinationIdIsTokenURI]
	-[(TelephonyUtilities) normalizedTokenURI]
	-[(TelephonyUtilities) destinationIdIsCallControlCode]
	-[(TelephonyUtilities) formattedDisplayID]
	-[(TelephonyUtilities) destinationIdIsHardware]
	-[(TelephonyUtilities) LTRString]
	-[(TelephonyUtilities) RTLString]
	-[(TelephonyUtilities) tu_stringByStrippingBase64Padding]
	-[(TelephonyUtilities) tu_stringByAddingBase64Padding]

(TelephonyUtilitiesAdditions)
	// instance methods
	-[(TelephonyUtilitiesAdditions) tu_containsObjectPassingTest:]
	-[(TelephonyUtilitiesAdditions) tu_mapAndFilterObjectsUsingBlock:]
	-[(TelephonyUtilitiesAdditions) tu_mapObjectsUsingBlock:]
	-[(TelephonyUtilitiesAdditions) tu_firstObjectPassingTest:]

CTXPCServiceSubscriptionContext(TelephonyUtilities)
(TelephonyUtilities)
	// class methods
	+[(TelephonyUtilities) tu_dataForURLSafeBase64EncodedString:]
	+[(TelephonyUtilities) tu_dataForAuditToken:]
	+[(TelephonyUtilities) tu_dataForUUID:]

	// instance methods
	-[(TelephonyUtilities) tu_UUID]
	-[(TelephonyUtilities) tu_URLSafeBase64EncodedString]

NSUUID(TelephonyUtilities)
	// class methods
	+[NSUUID(TelephonyUtilities) tu_UUIDv5ForData:namespaceUUID:]
	+[NSUUID(TelephonyUtilities) tu_UUIDv5ForString:namespaceUUID:]

NSXPCConnection(TUAdditions)
	// class methods
	+[NSXPCConnection(TUAdditions) callServicesServerXPCInterface]
	+[NSXPCConnection(TUAdditions) callServicesClientXPCInterface]

	// instance methods
	-[NSXPCConnection(TUAdditions) processName]
	-[NSXPCConnection(TUAdditions) performBlockOnQueue:]
	-[NSXPCConnection(TUAdditions) tu_clientSandboxCanAccessFileURL:]
	-[NSXPCConnection(TUAdditions) processBundleIdentifier]

01 00 0700 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSProcessHandle 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFetchRequest 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFormatter 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStore 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStoreConfiguration 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNGeminiManager 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNLabeledValue 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNPhoneNumber 
01 00 0d00 /System/Library/Frameworks/Contacts.framework/Contacts: CNSocialProfile 
01 00 0f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTBundle 
01 00 0f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTXPCServiceSubscriptionContext 
01 00 0f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSBatchIDQueryController 
01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSDestination 
01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSIDQueryController 
01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSMessagingCapabilities 
01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSServerBag 
01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSServiceAvailabilityController 
01 00 1300 /System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation: IMLockdownManager 
01 00 1200 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 1700 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponents 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponentsFormatter 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSUserActivity 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCCoder 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListenerEndpoint 
01 00 0600 /System/Library/PrivateFrameworks/RTCReporting.framework/RTCReporting: RTCReporting 
01 00 0e00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDClientContext 
01 00 0e00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDContextualKeyPath 
01 00 0900 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKDiscoverabilitySignalsMetadataKey 
01 00 0900 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKEvent 
01 00 0900 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKKnowledgeStore 
01 00 0900 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKSource 
01 00 0900 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKSystemEventStreams 
01 00 1200 /System/Library/Frameworks/CoreServices.framework/CoreServices: _LSOpenConfiguration 
