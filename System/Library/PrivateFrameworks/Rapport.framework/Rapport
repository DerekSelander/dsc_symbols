|| __DATA.__common _gRPPrivateDaemon
|| __DATA.__objc_data _OBJC_CLASS_$_RPAppSignInService
|| __DATA.__objc_data _OBJC_CLASS_$_RPPrivateAdvertiser
|| __DATA.__objc_data _OBJC_CLASS_$_RPPrivateDiscovery
|| __DATA.__objc_data _OBJC_METACLASS_$_RPAppSignInService
|| __DATA.__objc_data _OBJC_METACLASS_$_RPPrivateAdvertiser
|| __DATA.__objc_data _OBJC_METACLASS_$_RPPrivateDiscovery
|| __DATA_CONST.__const _RPAppIDRemote
|| __DATA_CONST.__const _RPAssertionDuckAudio
|| __DATA_CONST.__const _RPAssertionImminentUse
|| __DATA_CONST.__const _RPAssertionKeepAlive
|| __DATA_CONST.__const _RPCloudServiceIDDuet
|| __DATA_CONST.__const _RPCloudServiceIDNearby
|| __DATA_CONST.__const _RPDestinationIdentifierActivePhone
|| __DATA_CONST.__const _RPDestinationIdentifierActiveWatch
|| __DATA_CONST.__const _RPDestinationIdentifierDirectPeer
|| __DATA_CONST.__const _RPDestinationIdentifierInterestedPeers
|| __DATA_CONST.__const _RPDestinationIdentifierPairedCompanion
|| __DATA_CONST.__const _RPDestinationIdentifierPersonalCompanion
|| __DATA_CONST.__const _RPDestinationIdentifierSameHome
|| __DATA_CONST.__const _RPDestinationIdentifierSameRoom
|| __DATA_CONST.__const _RPDestinationIdentifierSelf
|| __DATA_CONST.__const _RPDestinationIdentifierStereoCounterpart
|| __DATA_CONST.__const _RPDeviceRoleSolo
|| __DATA_CONST.__const _RPDeviceRoleStereoLeft
|| __DATA_CONST.__const _RPDeviceRoleStereoRight
|| __DATA_CONST.__const _RPErrorDomain
|| __DATA_CONST.__const _RPEventIDAny
|| __DATA_CONST.__const _RPLegacyServiceTypeMobileDevice
|| __DATA_CONST.__const _RPLegacyServiceTypeNearbyAction
|| __DATA_CONST.__const _RPLegacyServiceTypeNearbyInfo
|| __DATA_CONST.__const _RPLegacyServiceTypeProximityPairing
|| __DATA_CONST.__const _RPLegacyServiceTypeSystem
|| __DATA_CONST.__const _RPLegacyServiceTypeWACAirPlay
|| __DATA_CONST.__const _RPLegacyServiceTypeWACGeneric
|| __DATA_CONST.__const _RPMessageKeySpeakText
|| __DATA_CONST.__const _RPOptionAllowUnauthenticated
|| __DATA_CONST.__const _RPOptionDataLinkType
|| __DATA_CONST.__const _RPOptionEventID
|| __DATA_CONST.__const _RPOptionFailIfAsleep
|| __DATA_CONST.__const _RPOptionInterest
|| __DATA_CONST.__const _RPOptionLength
|| __DATA_CONST.__const _RPOptionMoreComing
|| __DATA_CONST.__const _RPOptionPeerAddressString
|| __DATA_CONST.__const _RPOptionRequestID
|| __DATA_CONST.__const _RPOptionSelfAddressString
|| __DATA_CONST.__const _RPOptionSenderID
|| __DATA_CONST.__const _RPOptionSenderIDSDeviceID
|| __DATA_CONST.__const _RPOptionStatusFlags
|| __DATA_CONST.__const _RPOptionTimeoutSeconds
|| __DATA_CONST.__const _RPOptionXID
|| __DATA_CONST.__const _RPProfileIDDuetSync
|| __DATA_CONST.__const _RPRequestIDAny
|| __DATA_CONST.__const _RPRequestIDIdentify
|| __DATA_CONST.__const _RPRequestIDSpeak
|| __DATA_CONST.__const _RPTopicNone
|| __DATA_CONST.__const _RPTopicNowPlayingArtwork
|| __DATA_CONST.__const _RPTopicNowPlayingProgress
|| __DATA_CONST.__const _RPTopicNowPlayingText
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPCompanionLinkAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPCompanionLinkClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPCompanionLinkDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPEventRegistration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPFileTransferItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPFileTransferProgress
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPFileTransferSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPHIDSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPHIDTouchEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPHIDTouchSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPLegacyDeviceDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPLegacyService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPLegacySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPMediaControlSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPPeopleDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPPerson
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPRemoteDisplayDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPRemoteDisplayDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPRemoteDisplayServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPRemoteDisplaySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPRequestRegistration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPSiriAudioSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPSiriSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPStreamServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPStreamSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_RPTextInputSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPCompanionLinkAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPCompanionLinkClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPCompanionLinkDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPEventRegistration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPFileTransferItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPFileTransferProgress
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPFileTransferSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPHIDSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPHIDTouchEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPHIDTouchSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPLegacyDeviceDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPLegacyService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPLegacySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPMediaControlSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPPeopleDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPPerson
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPRemoteDisplayDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPRemoteDisplayDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPRemoteDisplayServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPRemoteDisplaySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPRequestRegistration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPSiriAudioSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPSiriSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPStreamServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPStreamSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_RPTextInputSession
|| __TEXT.__text _RPBonjourFlagsUpdateWithRPCompanionLinkFlags
|| __TEXT.__text _RPCompanionLinkFlagsToShortString
|| __TEXT.__text _RPCompanionLinkFlagsWithUpdateBonjourFlags
|| __TEXT.__text _RPDecodeNSError
|| __TEXT.__text _RPEncodeNSError
|| __TEXT.__text _RPErrorF
|| __TEXT.__text _RPNestedErrorF
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDateGetTypeID
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFErrorGetTypeID
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: ___NSDictionary0__
__ CoreUtils: _BonjourAdvertiserCreate
__ CoreUtils: _BonjourAdvertiserSetDispatchQueue
__ CoreUtils: _BonjourAdvertiserSetPort
__ CoreUtils: _BonjourAdvertiserSetServiceType
__ CoreUtils: _BonjourAdvertiserSetTXTRecord
__ CoreUtils: _BonjourAdvertiserStart
__ CoreUtils: _BonjourAdvertiserStop
__ CoreUtils: _BonjourAdvertiserUpdate
__ CoreUtils: _BonjourBrowser_Create
__ CoreUtils: _BonjourBrowser_SetDispatchQueue
__ CoreUtils: _BonjourBrowser_SetEventHandlerBlock
__ CoreUtils: _BonjourBrowser_Start
__ CoreUtils: _BonjourBrowser_Stop
__ CoreUtils: _BonjourDevice_GetDeviceID
__ CoreUtils: _CFDictionaryGetCFDataOfLength
__ CoreUtils: _CFDictionaryGetDouble
__ CoreUtils: _CFDictionaryGetInt64
__ CoreUtils: _CFDictionaryGetInt64Ranged
__ CoreUtils: _CFDictionaryGetTypedValue
__ CoreUtils: _CFGetHardwareAddress
__ CoreUtils: _CFPrefs_GetInt64
__ CoreUtils: _CUDescriptionWithLevel
__ CoreUtils: _CUDispatchTimerSet
__ CoreUtils: _CUGetInterfaceAddresses
__ CoreUtils: _CUMetricsLogEx
__ CoreUtils: _CryptoHKDF
__ CoreUtils: _Curve25519MakeKeyPair
__ CoreUtils: _FatalErrorF
__ CoreUtils: _GestaltCopyAnswer
__ CoreUtils: _GestaltGetDeviceClass
__ CoreUtils: _GestaltProductTypeStringToDeviceClass
__ CoreUtils: _IsAppleInternalBuild
__ CoreUtils: _LogCategoryReplaceF
__ CoreUtils: _LogCategory_Remove
__ CoreUtils: _LogPrintF
__ CoreUtils: _NADyFF4UGjtVGBmEW6h
__ CoreUtils: _NSAppendPrintF
__ CoreUtils: _NSDecodeNSArrayOfClassIfPresent
__ CoreUtils: _NSDecodeNSSetOfClassIfPresent
__ CoreUtils: _NSDecodeObjectIfPresent
__ CoreUtils: _NSDecodeSInt64RangedIfPresent
__ CoreUtils: _NSDecodeStandardContainerIfPresent
__ CoreUtils: _NSDictionaryGetNSArrayOfClass
__ CoreUtils: _NSDictionaryGetNSUUID
__ CoreUtils: _NSErrorNestedV
__ CoreUtils: _NSErrorV
__ CoreUtils: _NSPrintF
__ CoreUtils: _NSRandomData
__ CoreUtils: _OBJC_CLASS_$_CUBLEConnection
__ CoreUtils: _OBJC_CLASS_$_CUBonjourAdvertiser
__ CoreUtils: _OBJC_CLASS_$_CUBonjourBrowser
__ CoreUtils: _OBJC_CLASS_$_CUCoalescer
__ CoreUtils: _OBJC_CLASS_$_CUKeychainItem
__ CoreUtils: _OBJC_CLASS_$_CUMobileDevice
__ CoreUtils: _OBJC_CLASS_$_CUMobileDeviceDiscovery
__ CoreUtils: _OBJC_CLASS_$_CUMobileDeviceSession
__ CoreUtils: _OBJC_CLASS_$_CUPairedPeer
__ CoreUtils: _OBJC_CLASS_$_CUPairingSession
__ CoreUtils: _OBJC_CLASS_$_CUPairingStream
__ CoreUtils: _OBJC_CLASS_$_CURangingMeasurement
__ CoreUtils: _OBJC_CLASS_$_CUReadRequest
__ CoreUtils: _OBJC_CLASS_$_CUTCPConnection
__ CoreUtils: _OBJC_CLASS_$_CUTCPServer
__ CoreUtils: _OBJC_CLASS_$_CUWiFiManager
__ CoreUtils: _OBJC_CLASS_$_CUWiFiScanner
__ CoreUtils: _OBJC_CLASS_$_CUWiFiTrafficPeer
__ CoreUtils: _OBJC_CLASS_$_CUWriteRequest
__ CoreUtils: _OPACKDecodeData
__ CoreUtils: _OPACKEncoderCreateData
__ CoreUtils: _OPACKEstimateEncodedSize
__ CoreUtils: _RandomBytes
__ CoreUtils: _SNPrintF
__ CoreUtils: _ServerSocketOpenEx2
__ CoreUtils: _ServerSocketPairOpen
__ CoreUtils: _SipHash
__ CoreUtils: _SockAddrCompareAddr
__ CoreUtils: _SockAddrConvertToIPv6
__ CoreUtils: _SockAddrGetPort
__ CoreUtils: _SockAddrGetSize
__ CoreUtils: _SockAddrSetPort
__ CoreUtils: _SockAddrSimplify
__ CoreUtils: _SockAddrToString
__ CoreUtils: _SocketGetInterfaceInfo
__ CoreUtils: _SourceVersionToCString
__ CoreUtils: _StringToSockAddr
__ CoreUtils: _TN6sBSnEP2
__ CoreUtils: _TXTRecordGetNextItem
__ CoreUtils: _TextToHardwareAddress
__ CoreUtils: _TextToHardwareAddressScalar
__ CoreUtils: _UpTicksToMilliseconds
__ CoreUtils: _UpTicksToSeconds
__ CoreUtils: _UpTicksToSecondsF
__ CoreUtils: __LogCategory_Initialize
__ CoreUtils: _cced25519_make_key_pair_compat
__ CoreUtils: _cced25519_sign_compat
__ CoreUtils: _cced25519_verify_compat
__ CoreUtils: _kCryptoHashDescriptor_SHA512
__ CoreUtils: _stristr
__ CoreUtils: _wInTP56r94EFs9NAAi
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSStringFromClass
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCCoder
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Init
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _TXTRecordCreate
__ libSystem.B.dylib: _TXTRecordDeallocate
__ libSystem.B.dylib: _TXTRecordGetBytesPtr
__ libSystem.B.dylib: _TXTRecordGetLength
__ libSystem.B.dylib: _TXTRecordSetValue
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___exp10f
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __xpc_type_fd
__ libSystem.B.dylib: _cccurve25519
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _connect
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeifaddrs
__ libSystem.B.dylib: _getifaddrs
__ libSystem.B.dylib: _getpeername
__ libSystem.B.dylib: _getsockname
__ libSystem.B.dylib: _if_nametoindex
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memset_s
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _read
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _write
__ libSystem.B.dylib: _xpc_fd_create
__ libSystem.B.dylib: _xpc_fd_dup
__ libSystem.B.dylib: dyld_stub_binder
__ libcompression.dylib: _compression_decode_buffer
__ libcompression.dylib: _compression_encode_buffer
__ libnetwork.dylib: __nw_parameters_configure_protocol_default_configuration
__ libnetwork.dylib: __nw_parameters_configure_protocol_disable
__ libnetwork.dylib: _nw_connection_cancel
__ libnetwork.dylib: _nw_endpoint_create_address
__ libnetwork.dylib: _nw_endpoint_create_address_with_ethernet
__ libnetwork.dylib: _nw_endpoint_get_address
__ libnetwork.dylib: _nw_error_copy_cf_error
__ libnetwork.dylib: _nw_interface_create_with_name
__ libnetwork.dylib: _nw_listener_cancel
__ libnetwork.dylib: _nw_listener_copy_local_endpoint
__ libnetwork.dylib: _nw_listener_create
__ libnetwork.dylib: _nw_listener_set_event_handler
__ libnetwork.dylib: _nw_listener_set_new_connection_handler
__ libnetwork.dylib: _nw_listener_set_queue
__ libnetwork.dylib: _nw_listener_start
__ libnetwork.dylib: _nw_parameters_copy_default_protocol_stack
__ libnetwork.dylib: _nw_parameters_create_legacy_tcp_socket
__ libnetwork.dylib: _nw_parameters_create_secure_udp
__ libnetwork.dylib: _nw_parameters_require_interface
__ libnetwork.dylib: _nw_parameters_set_allow_duplicate_state_updates
__ libnetwork.dylib: _nw_parameters_set_delegated_unique_pid
__ libnetwork.dylib: _nw_parameters_set_local_endpoint
__ libnetwork.dylib: _nw_parameters_set_reuse_local_address
__ libnetwork.dylib: _nw_path_create_evaluator_for_endpoint
__ libnetwork.dylib: _nw_path_evaluator_cancel
__ libnetwork.dylib: _nw_path_evaluator_get_client_id
__ libnetwork.dylib: _nw_protocol_stack_set_transport_protocol
__ libnetwork.dylib: _nw_udp_create_options
__ libnetwork.dylib: _nw_udp_options_set_no_metadata
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
RPAppSignInService : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *appName
 @property  NSString *appBundleID
 @property  NSArray *associatedDomains
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned int flags

  // instance methods
  -[RPAppSignInService init]
  -[RPAppSignInService _activate]
  -[RPAppSignInService invalidate]
  -[RPAppSignInService _invalidate]
  -[RPAppSignInService .cxx_destruct]
  -[RPAppSignInService flags]
  -[RPAppSignInService appBundleID]
  -[RPAppSignInService dispatchQueue]
  -[RPAppSignInService setDispatchQueue:]
  -[RPAppSignInService setFlags:]
  -[RPAppSignInService _invalidated]
  -[RPAppSignInService activate]
  -[RPAppSignInService associatedDomains]
  -[RPAppSignInService appName]
  -[RPAppSignInService setAppName:]
  -[RPAppSignInService setAssociatedDomains:]
  -[RPAppSignInService setAppBundleID:]


RPClient : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  unsigned int type

  // class methods
  +[RPClient primaryAccountSignedIn]
  +[RPClient primaryAccountSignedOut]

  // instance methods
  -[RPClient init]
  -[RPClient invalidate]
  -[RPClient type]
  -[RPClient setType:]
  -[RPClient .cxx_destruct]
  -[RPClient setInvalidationHandler:]
  -[RPClient setInterruptionHandler:]
  -[RPClient interruptionHandler]
  -[RPClient invalidationHandler]
  -[RPClient dispatchQueue]
  -[RPClient setDispatchQueue:]
  -[RPClient _invalidated]
  -[RPClient _interrupted]
  -[RPClient _ensureXPCStarted]
  -[RPClient getIdentitiesWithFlags:completion:]
  -[RPClient activateAssertionWithIdentifier:]
  -[RPClient diagnosticLogControl:completion:]
  -[RPClient primaryAccountSignedInWithCompletion:]
  -[RPClient primaryAccountSignedOutWithCompletion:]
  -[RPClient addOrUpdateIdentity:completion:]
  -[RPClient diagnosticCommand:params:completion:]
  -[RPClient diagnosticShow:level:completion:]
  -[RPClient getIdentitiesWithCompletion:]


RPEventRegistration : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *eventID
 @property  NSDictionary *options
 @property  @? handler

  // instance methods
  -[RPEventRegistration handler]
  -[RPEventRegistration options]
  -[RPEventRegistration .cxx_destruct]
  -[RPEventRegistration setHandler:]
  -[RPEventRegistration setOptions:]
  -[RPEventRegistration eventID]
  -[RPEventRegistration setEventID:]


RPRequestRegistration : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *requestID
 @property  NSDictionary *options
 @property  @? handler
 @property  @? cnxHandler

  // instance methods
  -[RPRequestRegistration handler]
  -[RPRequestRegistration options]
  -[RPRequestRegistration .cxx_destruct]
  -[RPRequestRegistration setHandler:]
  -[RPRequestRegistration setOptions:]
  -[RPRequestRegistration requestID]
  -[RPRequestRegistration setRequestID:]
  -[RPRequestRegistration cnxHandler]
  -[RPRequestRegistration setCnxHandler:]


RPCompanionLinkClient : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPCompanionLinkXPCClientInterface, RPAuthenticatable, RPMessageable>
 @property  unsigned int clientID
 @property  unsigned int internalAuthFlags
 @property  RPCompanionLinkDevice *localDevice
 @property  NSString *appID
 @property  NSString *cloudServiceID
 @property  unsigned long controlFlags
 @property  RPCompanionLinkDevice *destinationDevice
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned int flags
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSString *serviceType
 @property  NSArray *activeDevices
 @property  RPCompanionLinkDevice *activePersonalCompanion
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? deviceChangedHandler
 @property  @? localDeviceUpdatedHandler
 @property  NSDictionary *siriInfo
 @property  unsigned int pairSetupFlags
 @property  unsigned int pairVerifyFlags
 @property  NSString *password
 @property  int passwordType
 @property  int passwordTypeActual
 @property  @? authCompletionHandler
 @property  @? showPasswordHandler
 @property  @? hidePasswordHandler
 @property  @? promptForPasswordHandler

  // class methods
  +[RPCompanionLinkClient supportsSecureCoding]

  // instance methods
  -[RPCompanionLinkClient init]
  -[RPCompanionLinkClient invalidate]
  -[RPCompanionLinkClient encodeWithCoder:]
  -[RPCompanionLinkClient initWithCoder:]
  -[RPCompanionLinkClient password]
  -[RPCompanionLinkClient .cxx_destruct]
  -[RPCompanionLinkClient flags]
  -[RPCompanionLinkClient setInvalidationHandler:]
  -[RPCompanionLinkClient setInterruptionHandler:]
  -[RPCompanionLinkClient setPassword:]
  -[RPCompanionLinkClient interruptionHandler]
  -[RPCompanionLinkClient invalidationHandler]
  -[RPCompanionLinkClient dispatchQueue]
  -[RPCompanionLinkClient serviceType]
  -[RPCompanionLinkClient setDispatchQueue:]
  -[RPCompanionLinkClient controlFlags]
  -[RPCompanionLinkClient setControlFlags:]
  -[RPCompanionLinkClient setDeviceFoundHandler:]
  -[RPCompanionLinkClient setDeviceChangedHandler:]
  -[RPCompanionLinkClient setDeviceLostHandler:]
  -[RPCompanionLinkClient activateWithCompletion:]
  -[RPCompanionLinkClient registerRequestID:options:handler:]
  -[RPCompanionLinkClient registerProfileID:completion:]
  -[RPCompanionLinkClient activeDevices]
  -[RPCompanionLinkClient setDestinationDevice:]
  -[RPCompanionLinkClient destinationDevice]
  -[RPCompanionLinkClient sendRequestID:request:destinationID:options:responseHandler:]
  -[RPCompanionLinkClient setFlags:]
  -[RPCompanionLinkClient _invalidated]
  -[RPCompanionLinkClient _interrupted]
  -[RPCompanionLinkClient setClientID:]
  -[RPCompanionLinkClient clientID]
  -[RPCompanionLinkClient localDevice]
  -[RPCompanionLinkClient setLocalDevice:]
  -[RPCompanionLinkClient setServiceType:]
  -[RPCompanionLinkClient deviceFoundHandler]
  -[RPCompanionLinkClient deviceLostHandler]
  -[RPCompanionLinkClient deviceChangedHandler]
  -[RPCompanionLinkClient _lostAllDevices]
  -[RPCompanionLinkClient _ensureXPCStarted]
  -[RPCompanionLinkClient _invokeBlockActivateSafe:]
  -[RPCompanionLinkClient deregisterRequestID:]
  -[RPCompanionLinkClient setLocalDeviceUpdatedHandler:]
  -[RPCompanionLinkClient passwordType]
  -[RPCompanionLinkClient appID]
  -[RPCompanionLinkClient _activateWithCompletion:reactivate:]
  -[RPCompanionLinkClient companionLinkPromptForPasswordType:flags:throttleSeconds:]
  -[RPCompanionLinkClient companionLinkAuthCompleted:]
  -[RPCompanionLinkClient companionLinkFoundDevice:]
  -[RPCompanionLinkClient companionLinkLostDevice:]
  -[RPCompanionLinkClient companionLinkChangedDevice:changes:]
  -[RPCompanionLinkClient companionLinkLocalDeviceUpdated:]
  -[RPCompanionLinkClient companionLinkReceivedEventID:event:options:]
  -[RPCompanionLinkClient companionLinkReceivedRequestID:request:options:responseHandler:]
  -[RPCompanionLinkClient _reregisterAssertions]
  -[RPCompanionLinkClient _reregisterEvents]
  -[RPCompanionLinkClient _reregisterRequests]
  -[RPCompanionLinkClient _reregisterProfileIDs]
  -[RPCompanionLinkClient _registerEventID:options:reregister:]
  -[RPCompanionLinkClient sendEventID:event:destinationID:options:completion:]
  -[RPCompanionLinkClient _registerRequestID:options:reregister:]
  -[RPCompanionLinkClient _registerProfileID:reregister:completion:]
  -[RPCompanionLinkClient tryPassword:]
  -[RPCompanionLinkClient pairSetupFlags]
  -[RPCompanionLinkClient setPairSetupFlags:]
  -[RPCompanionLinkClient pairVerifyFlags]
  -[RPCompanionLinkClient setPairVerifyFlags:]
  -[RPCompanionLinkClient setPasswordType:]
  -[RPCompanionLinkClient passwordTypeActual]
  -[RPCompanionLinkClient authCompletionHandler]
  -[RPCompanionLinkClient setAuthCompletionHandler:]
  -[RPCompanionLinkClient showPasswordHandler]
  -[RPCompanionLinkClient setShowPasswordHandler:]
  -[RPCompanionLinkClient hidePasswordHandler]
  -[RPCompanionLinkClient setHidePasswordHandler:]
  -[RPCompanionLinkClient promptForPasswordHandler]
  -[RPCompanionLinkClient setPromptForPasswordHandler:]
  -[RPCompanionLinkClient registerEventID:options:handler:]
  -[RPCompanionLinkClient deregisterEventID:]
  -[RPCompanionLinkClient sendEventID:event:options:completion:]
  -[RPCompanionLinkClient sendRequestID:request:options:responseHandler:]
  -[RPCompanionLinkClient setSiriInfo:]
  -[RPCompanionLinkClient activateAssertionID:destinationID:options:completion:]
  -[RPCompanionLinkClient _invalidateAssertion:]
  -[RPCompanionLinkClient activePersonalCompanion]
  -[RPCompanionLinkClient shouldReportDevice:]
  -[RPCompanionLinkClient launchAppWithBundleID:destinationID:completion:]
  -[RPCompanionLinkClient launchAppWithURL:destinationID:completion:]
  -[RPCompanionLinkClient deregisterProfileID:completion:]
  -[RPCompanionLinkClient setAppID:]
  -[RPCompanionLinkClient cloudServiceID]
  -[RPCompanionLinkClient setCloudServiceID:]
  -[RPCompanionLinkClient localDeviceUpdatedHandler]
  -[RPCompanionLinkClient siriInfo]
  -[RPCompanionLinkClient internalAuthFlags]


RPCompanionLinkAssertion : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *assertionID
 @property  RPCompanionLinkClient *client
 @property  NSString *destinationID
 @property  NSString *identifier

  // class methods
  +[RPCompanionLinkAssertion supportsSecureCoding]

  // instance methods
  -[RPCompanionLinkAssertion invalidate]
  -[RPCompanionLinkAssertion encodeWithCoder:]
  -[RPCompanionLinkAssertion initWithCoder:]
  -[RPCompanionLinkAssertion .cxx_destruct]
  -[RPCompanionLinkAssertion identifier]
  -[RPCompanionLinkAssertion setIdentifier:]
  -[RPCompanionLinkAssertion client]
  -[RPCompanionLinkAssertion setClient:]
  -[RPCompanionLinkAssertion setAssertionID:]
  -[RPCompanionLinkAssertion assertionID]
  -[RPCompanionLinkAssertion destinationID]
  -[RPCompanionLinkAssertion setDestinationID:]


RPCompanionLinkDevice : RPEndpoint <NSSecureCoding>
 @property  BOOL changed
 @property  BOOL daemon
 @property  NSString *deviceColor
 @property  unsigned int flags
 @property  NSUUID *homeKitIdentifier
 @property  NSString *idsPersonalDeviceIdentifier
 @property  NSUUID *mediaSystemIdentifier
 @property  NSString *mediaSystemName
 @property  NSUUID *mediaSystemIdentifierEffective
 @property  int mediaSystemRole
 @property  int mediaSystemRoleEffective
 @property  int mediaSystemState
 @property  NSUUID *pairingIdentifier
 @property  NSString *password
 @property  BOOL personal
 @property  int personalDeviceState
 @property  int personalRequestsState
 @property  NSString *publicIdentifier
 @property  NSString *role
 @property  NSString *roomName
 @property  int serversChangedState
 @property  NSDictionary *siriInfo
 @property  BOOL uiTriggered
 @property  NSString *effectiveIdentifier

  // class methods
  +[RPCompanionLinkDevice supportsSecureCoding]

  // instance methods
  -[RPCompanionLinkDevice encodeWithCoder:]
  -[RPCompanionLinkDevice initWithCoder:]
  -[RPCompanionLinkDevice password]
  -[RPCompanionLinkDevice role]
  -[RPCompanionLinkDevice .cxx_destruct]
  -[RPCompanionLinkDevice flags]
  -[RPCompanionLinkDevice setPassword:]
  -[RPCompanionLinkDevice setFlags:]
  -[RPCompanionLinkDevice daemon]
  -[RPCompanionLinkDevice setRole:]
  -[RPCompanionLinkDevice setDaemon:]
  -[RPCompanionLinkDevice descriptionWithLevel:]
  -[RPCompanionLinkDevice updateWithBonjourDevice:]
  -[RPCompanionLinkDevice setRoomName:]
  -[RPCompanionLinkDevice roomName]
  -[RPCompanionLinkDevice deviceColor]
  -[RPCompanionLinkDevice setDeviceColor:]
  -[RPCompanionLinkDevice homeKitIdentifier]
  -[RPCompanionLinkDevice effectiveIdentifier]
  -[RPCompanionLinkDevice publicIdentifier]
  -[RPCompanionLinkDevice mediaSystemState]
  -[RPCompanionLinkDevice changed]
  -[RPCompanionLinkDevice pairingIdentifier]
  -[RPCompanionLinkDevice setPairingIdentifier:]
  -[RPCompanionLinkDevice mediaSystemIdentifier]
  -[RPCompanionLinkDevice setMediaSystemIdentifier:]
  -[RPCompanionLinkDevice setChanged:]
  -[RPCompanionLinkDevice isPersonal]
  -[RPCompanionLinkDevice setSiriInfo:]
  -[RPCompanionLinkDevice siriInfo]
  -[RPCompanionLinkDevice updateWithSFDevice:]
  -[RPCompanionLinkDevice setHomeKitIdentifier:]
  -[RPCompanionLinkDevice idsPersonalDeviceIdentifier]
  -[RPCompanionLinkDevice setIdsPersonalDeviceIdentifier:]
  -[RPCompanionLinkDevice mediaSystemName]
  -[RPCompanionLinkDevice setMediaSystemName:]
  -[RPCompanionLinkDevice mediaSystemRole]
  -[RPCompanionLinkDevice setMediaSystemRole:]
  -[RPCompanionLinkDevice setMediaSystemState:]
  -[RPCompanionLinkDevice setPersonal:]
  -[RPCompanionLinkDevice personalDeviceState]
  -[RPCompanionLinkDevice setPersonalDeviceState:]
  -[RPCompanionLinkDevice personalRequestsState]
  -[RPCompanionLinkDevice setPersonalRequestsState:]
  -[RPCompanionLinkDevice setPublicIdentifier:]
  -[RPCompanionLinkDevice mediaSystemIdentifierEffective]
  -[RPCompanionLinkDevice setMediaSystemIdentifierEffective:]
  -[RPCompanionLinkDevice mediaSystemRoleEffective]
  -[RPCompanionLinkDevice setMediaSystemRoleEffective:]
  -[RPCompanionLinkDevice serversChangedState]
  -[RPCompanionLinkDevice setServersChangedState:]
  -[RPCompanionLinkDevice uiTriggered]
  -[RPCompanionLinkDevice setUiTriggered:]


RPRequestEntry : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *options
 @property  NSString *requestID
 @property  @? responseHandler
 @property  unsigned long sendTicks
 @property  NSObject<OS_dispatch_source> *timer
 @property  unsigned int xpcID

  // instance methods
  -[RPRequestEntry options]
  -[RPRequestEntry .cxx_destruct]
  -[RPRequestEntry setOptions:]
  -[RPRequestEntry timer]
  -[RPRequestEntry setTimer:]
  -[RPRequestEntry setResponseHandler:]
  -[RPRequestEntry responseHandler]
  -[RPRequestEntry requestID]
  -[RPRequestEntry setRequestID:]
  -[RPRequestEntry sendTicks]
  -[RPRequestEntry setSendTicks:]
  -[RPRequestEntry xpcID]
  -[RPRequestEntry setXpcID:]


RPSendEntry : NSObject /usr/lib/libSystem.B.dylib
 @property  @? completion
 @property  NSData *eventData
 @property  NSString *eventID
 @property  NSDictionary *options
 @property  unsigned long queueTicks
 @property  NSString *requestID
 @property  NSDictionary *request
 @property  @? responseHandler
 @property  NSObject<OS_dispatch_source> *timer
 @property  unsigned int xid
 @property  NSNumber *xidObj
 @property  unsigned int xpcID

  // instance methods
  -[RPSendEntry options]
  -[RPSendEntry .cxx_destruct]
  -[RPSendEntry setOptions:]
  -[RPSendEntry timer]
  -[RPSendEntry setTimer:]
  -[RPSendEntry setRequest:]
  -[RPSendEntry setResponseHandler:]
  -[RPSendEntry request]
  -[RPSendEntry responseHandler]
  -[RPSendEntry setCompletion:]
  -[RPSendEntry completion]
  -[RPSendEntry requestID]
  -[RPSendEntry setRequestID:]
  -[RPSendEntry eventData]
  -[RPSendEntry setEventData:]
  -[RPSendEntry eventID]
  -[RPSendEntry setEventID:]
  -[RPSendEntry xpcID]
  -[RPSendEntry setXpcID:]
  -[RPSendEntry queueTicks]
  -[RPSendEntry setQueueTicks:]
  -[RPSendEntry xid]
  -[RPSendEntry setXid:]
  -[RPSendEntry xidObj]
  -[RPSendEntry setXidObj:]


RPConnection : NSObject /usr/lib/libSystem.B.dylib <RPAuthenticatable>
 @property  NSString *appID
 @property  NSDictionary *appInfoPeer
 @property  NSDictionary *appInfoSelf
 @property  CUBLEConnection *bleConnection
 @property  NSUUID *blePeerIdentifier
 @property  CUBonjourDevice *bonjourPeerDevice
 @property  CUBluetoothScalablePipe *btPipe
 @property  id client
 @property  BOOL clientMode
 @property  unsigned long controlFlags
 @property  NSString *destinationString
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned int flags
 @property  BOOL flowControlReadEnabled
 @property  @? flowControlWriteChangedHandler
 @property  int flowControlWriteState
 @property  RPIdentity *forcedPeerIdentity
 @property  RPIdentity *forcedSelfIdentity
 @property  CUHomeKitManager *homeKitManager
 @property  NSString *identifierOverride
 @property  RPIdentityDaemon *identityDaemon
 @property  RPIdentity *identityResolved
 @property  RPIdentity *identityVerified
 @property  BOOL invalidationHandled
 @property  @? invalidationHandler
 @property  int keepAliveSeconds
 @property  NSString *label
 @property  int linkType
 @property  RPCompanionLinkDevice *localDeviceInfo
 @property  CUNetLinkManager *netLinkManager
 @property  @? pairVerifyCompletion
 @property  RPCompanionLinkDevice *peerDeviceInfo
 @property  NSString *peerIdentifier
 @property  @? peerUpdatedHandler
 @property  BOOL preAuthEnabled
 @property  int preferredIdentityType
 @property  BOOL present
 @property  NSData *pskData
 @property  @? receivedEventHandler
 @property  @? receivedRequestHandler
 @property  @? sessionStartHandler
 @property  int state
 @property  @? stateChangedHandler
 @property  unsigned long statusFlags
 @property  CUTCPConnection *tcpConnection
 @property  unsigned int trafficFlags
 @property  unsigned int pairSetupFlags
 @property  unsigned int pairVerifyFlags
 @property  NSString *password
 @property  int passwordType
 @property  int passwordTypeActual
 @property  @? authCompletionHandler
 @property  @? showPasswordHandler
 @property  @? hidePasswordHandler
 @property  @? promptForPasswordHandler

  // instance methods
  -[RPConnection init]
  -[RPConnection dealloc]
  -[RPConnection invalidate]
  -[RPConnection _invalidate]
  -[RPConnection password]
  -[RPConnection .cxx_destruct]
  -[RPConnection flags]
  -[RPConnection setInvalidationHandler:]
  -[RPConnection state]
  -[RPConnection setPassword:]
  -[RPConnection client]
  -[RPConnection setClient:]
  -[RPConnection invalidationHandler]
  -[RPConnection setState:]
  -[RPConnection dispatchQueue]
  -[RPConnection setLabel:]
  -[RPConnection label]
  -[RPConnection setDispatchQueue:]
  -[RPConnection controlFlags]
  -[RPConnection setControlFlags:]
  -[RPConnection statusFlags]
  -[RPConnection setFlags:]
  -[RPConnection invalidateWithError:]
  -[RPConnection _invalidated]
  -[RPConnection present]
  -[RPConnection activate]
  -[RPConnection _run]
  -[RPConnection _idleTimerFired]
  -[RPConnection setTrafficFlags:]
  -[RPConnection _abortRequestsWithError:]
  -[RPConnection descriptionWithLevel:]
  -[RPConnection setPresent:]
  -[RPConnection peerIdentifier]
  -[RPConnection setPeerIdentifier:]
  -[RPConnection stateChangedHandler]
  -[RPConnection setStateChangedHandler:]
  -[RPConnection trafficFlags]
  -[RPConnection _invalidateWithError:]
  -[RPConnection appInfoPeer]
  -[RPConnection appInfoSelf]
  -[RPConnection setAppInfoSelf:]
  -[RPConnection destinationString]
  -[RPConnection setDestinationString:]
  -[RPConnection keepAliveSeconds]
  -[RPConnection setKeepAliveSeconds:]
  -[RPConnection netLinkManager]
  -[RPConnection setNetLinkManager:]
  -[RPConnection linkType]
  -[RPConnection setReceivedRequestHandler:]
  -[RPConnection _clientRun]
  -[RPConnection _clientStarted]
  -[RPConnection receivedRequestHandler]
  -[RPConnection _sendFrameType:unencryptedObject:]
  -[RPConnection passwordType]
  -[RPConnection appID]
  -[RPConnection tryPassword:]
  -[RPConnection pairSetupFlags]
  -[RPConnection setPairSetupFlags:]
  -[RPConnection pairVerifyFlags]
  -[RPConnection setPairVerifyFlags:]
  -[RPConnection setPasswordType:]
  -[RPConnection passwordTypeActual]
  -[RPConnection authCompletionHandler]
  -[RPConnection setAuthCompletionHandler:]
  -[RPConnection showPasswordHandler]
  -[RPConnection setShowPasswordHandler:]
  -[RPConnection hidePasswordHandler]
  -[RPConnection setHidePasswordHandler:]
  -[RPConnection promptForPasswordHandler]
  -[RPConnection setPromptForPasswordHandler:]
  -[RPConnection setAppID:]
  -[RPConnection _receiveStart:]
  -[RPConnection sendReachabilityProbe:]
  -[RPConnection _invalidateCore:]
  -[RPConnection _pairSetupInvalidate]
  -[RPConnection _pairVerifyInvalidate]
  -[RPConnection _identityProofsAdd:update:]
  -[RPConnection sendEncryptedEventID:event:options:completion:]
  -[RPConnection _identityProofsVerifyHomeKitSignature:identifier:]
  -[RPConnection _serverRun]
  -[RPConnection _clientConnectStart]
  -[RPConnection _clientPreAuthStart]
  -[RPConnection _clientPairSetupStart]
  -[RPConnection _clientPairVerifyStart]
  -[RPConnection _pskPrepare:]
  -[RPConnection _clientStartSession]
  -[RPConnection _processSends]
  -[RPConnection _clientError:]
  -[RPConnection _clientRetryStart]
  -[RPConnection _updateExternalState]
  -[RPConnection _clientConnectStartBLE]
  -[RPConnection _clientConnectStartBTPipe]
  -[RPConnection _clientConnectStartTCP]
  -[RPConnection _clientNetworkError:label:]
  -[RPConnection _clientConnectCompleted:]
  -[RPConnection _updateLinkInfo]
  -[RPConnection _clientPairSetupPromptWithFlags:throttleSeconds:handler:]
  -[RPConnection _clientPairSetupCompleted:]
  -[RPConnection _pairVerifySignData:flags:error:]
  -[RPConnection _pairVerifyVerifySignature:data:flags:error:]
  -[RPConnection _clientPairVerifyCompleted:]
  -[RPConnection _systeminfo]
  -[RPConnection _receivedSystemInfo:xid:]
  -[RPConnection _sendEncryptedRequestID:request:xpcID:options:sendEntry:responseHandler:]
  -[RPConnection _clientRetryFired]
  -[RPConnection _serverAccept]
  -[RPConnection _serverStarted]
  -[RPConnection _serverError:]
  -[RPConnection _serverAcceptBLE]
  -[RPConnection _serverAcceptBTPipe]
  -[RPConnection _serverAcceptTCP]
  -[RPConnection _serverNetworkError:label:]
  -[RPConnection _serverPairingAllowed]
  -[RPConnection _serverAllowMACAddresses]
  -[RPConnection _serverPairSetupCompleted:]
  -[RPConnection _serverPairVerifyCompleted:]
  -[RPConnection _sendEncryptedEventID:data:xid:options:completion:]
  -[RPConnection sendEncryptedEventID:data:xid:options:completion:]
  -[RPConnection _timeoutForSendEntry:]
  -[RPConnection _timeoutForXID:]
  -[RPConnection _sendFrameType:body:]
  -[RPConnection _receiveCompletion:]
  -[RPConnection _receivedHeader:body:ctx:]
  -[RPConnection _receivedHeader:encryptedObjectData:ctx:]
  -[RPConnection _serverPairSetupWithData:start:]
  -[RPConnection _clientPairSetupWithData:]
  -[RPConnection _serverPairVerifyWithData:start:]
  -[RPConnection _clientPairVerifyWithData:]
  -[RPConnection _serverPreAuthRequestWithData:]
  -[RPConnection _clientPreAuthResponseWithData:]
  -[RPConnection _receivedObject:ctx:]
  -[RPConnection _receivedEvent:ctx:]
  -[RPConnection _receivedRequest:ctx:]
  -[RPConnection _receivedResponse:ctx:]
  -[RPConnection _sendEncryptedResponse:error:xid:requestID:]
  -[RPConnection _identityProofDataClient]
  -[RPConnection _identityProofDataServer]
  -[RPConnection _identityProofsVerify:]
  -[RPConnection setFlowControlReadEnabled:]
  -[RPConnection flowControlWriteState]
  -[RPConnection homeKitIdentityUpdated]
  -[RPConnection sessionStopped:]
  -[RPConnection sendEncryptedRequestID:request:xpcID:options:responseHandler:]
  -[RPConnection _idleTimerStart:repeat:]
  -[RPConnection bleConnection]
  -[RPConnection setBleConnection:]
  -[RPConnection blePeerIdentifier]
  -[RPConnection setBlePeerIdentifier:]
  -[RPConnection bonjourPeerDevice]
  -[RPConnection setBonjourPeerDevice:]
  -[RPConnection btPipe]
  -[RPConnection setBtPipe:]
  -[RPConnection clientMode]
  -[RPConnection setClientMode:]
  -[RPConnection flowControlReadEnabled]
  -[RPConnection flowControlWriteChangedHandler]
  -[RPConnection setFlowControlWriteChangedHandler:]
  -[RPConnection forcedPeerIdentity]
  -[RPConnection setForcedPeerIdentity:]
  -[RPConnection forcedSelfIdentity]
  -[RPConnection setForcedSelfIdentity:]
  -[RPConnection homeKitManager]
  -[RPConnection setHomeKitManager:]
  -[RPConnection identifierOverride]
  -[RPConnection setIdentifierOverride:]
  -[RPConnection identityDaemon]
  -[RPConnection setIdentityDaemon:]
  -[RPConnection identityResolved]
  -[RPConnection setIdentityResolved:]
  -[RPConnection identityVerified]
  -[RPConnection invalidationHandled]
  -[RPConnection setInvalidationHandled:]
  -[RPConnection localDeviceInfo]
  -[RPConnection setLocalDeviceInfo:]
  -[RPConnection pairVerifyCompletion]
  -[RPConnection setPairVerifyCompletion:]
  -[RPConnection peerDeviceInfo]
  -[RPConnection peerUpdatedHandler]
  -[RPConnection setPeerUpdatedHandler:]
  -[RPConnection preAuthEnabled]
  -[RPConnection setPreAuthEnabled:]
  -[RPConnection preferredIdentityType]
  -[RPConnection setPreferredIdentityType:]
  -[RPConnection pskData]
  -[RPConnection setPskData:]
  -[RPConnection receivedEventHandler]
  -[RPConnection setReceivedEventHandler:]
  -[RPConnection sessionStartHandler]
  -[RPConnection setSessionStartHandler:]
  -[RPConnection tcpConnection]
  -[RPConnection setTcpConnection:]


RPDevice : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  SFDevice *bleDevice
 @property  NSString *identifier
 @property  CUMobileDevice *mobileDevice
 @property  NSString *name
 @property  CURangingMeasurement *relativeLocation
 @property  NSData *authTag
 @property  NSData *bleAdvertisementData
 @property  NSData *bleDeviceAddress
 @property  unsigned int blePairState
 @property  unsigned char deviceActionType
 @property  NSUUID *identifierUUID
 @property  BOOL needsSetup
 @property  CUPairedPeer *pairedPeer
 @property  NSUUID *pairingIdentifier
 @property  int rawRSSI
 @property  int smoothedRSSI
 @property  unsigned int systemPairState
 @property  NSData *txtData
 @property  NSDictionary *txtDictionary
 @property  NSString *udid
 @property  NSData *wifiAddress
 @property  NSData *wifiBSSID
 @property  NSData *wifiDeviceIEDeviceID
 @property  unsigned int wifiDeviceIEFlags
 @property  NSData *wifiDeviceIEName
 @property  NSData *wifiIEData
 @property  id wifiPlatformObject
 @property  NSString *wifiSSID
 @property  NSString *accountID
 @property  int activityLevel
 @property  NSData *bleAuthTag
 @property  NSString *contactID
 @property  unsigned int flags
 @property  NSString *idsDeviceIdentifier
 @property  NSString *model
 @property  int proximity

  // class methods
  +[RPDevice supportsSecureCoding]

  // instance methods
  -[RPDevice init]
  -[RPDevice name]
  -[RPDevice encodeWithCoder:]
  -[RPDevice initWithCoder:]
  -[RPDevice .cxx_destruct]
  -[RPDevice setName:]
  -[RPDevice identifier]
  -[RPDevice flags]
  -[RPDevice setIdentifier:]
  -[RPDevice model]
  -[RPDevice contactID]
  -[RPDevice idsDeviceIdentifier]
  -[RPDevice proximity]
  -[RPDevice needsSetup]
  -[RPDevice accountID]
  -[RPDevice relativeLocation]
  -[RPDevice setRelativeLocation:]
  -[RPDevice descriptionWithLevel:]
  -[RPDevice rawRSSI]
  -[RPDevice txtDictionary]
  -[RPDevice setIdentifierUUID:]
  -[RPDevice _updateTXTDictionary:]
  -[RPDevice txtData]
  -[RPDevice identifierUUID]
  -[RPDevice pairedPeer]
  -[RPDevice setPairedPeer:]
  -[RPDevice udid]
  -[RPDevice setUdid:]
  -[RPDevice wifiAddress]
  -[RPDevice setWifiAddress:]
  -[RPDevice updateWithBonjourDevice:]
  -[RPDevice deviceActionType]
  -[RPDevice smoothedRSSI]
  -[RPDevice bleDevice]
  -[RPDevice setBleDevice:]
  -[RPDevice systemPairState]
  -[RPDevice setSystemPairState:]
  -[RPDevice pairingIdentifier]
  -[RPDevice setPairingIdentifier:]
  -[RPDevice updateWithMobileDevice:]
  -[RPDevice updateWithSFDevice:changes:]
  -[RPDevice updateWithSystemInfo:]
  -[RPDevice updateWithWiFiDevice:changes:]
  -[RPDevice activityLevel]
  -[RPDevice bleAuthTag]
  -[RPDevice mobileDevice]
  -[RPDevice setMobileDevice:]
  -[RPDevice authTag]
  -[RPDevice bleAdvertisementData]
  -[RPDevice bleDeviceAddress]
  -[RPDevice blePairState]
  -[RPDevice wifiBSSID]
  -[RPDevice setWifiBSSID:]
  -[RPDevice wifiDeviceIEDeviceID]
  -[RPDevice setWifiDeviceIEDeviceID:]
  -[RPDevice wifiDeviceIEFlags]
  -[RPDevice wifiDeviceIEName]
  -[RPDevice setWifiDeviceIEName:]
  -[RPDevice wifiIEData]
  -[RPDevice setWifiIEData:]
  -[RPDevice wifiPlatformObject]
  -[RPDevice setWifiPlatformObject:]
  -[RPDevice wifiSSID]
  -[RPDevice setWifiSSID:]


RPDiscovery : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPCompanionLinkXPCClientInterface>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  BOOL targetUserSession
 @property  unsigned int changeFlags
 @property  unsigned long controlFlags
 @property  NSArray *discoveredEndpoints
 @property  @? foundHandler
 @property  @? lostHandler
 @property  @? changedHandler
 @property  NSString *serviceType

  // class methods
  +[RPDiscovery supportsSecureCoding]

  // instance methods
  -[RPDiscovery init]
  -[RPDiscovery dealloc]
  -[RPDiscovery invalidate]
  -[RPDiscovery encodeWithCoder:]
  -[RPDiscovery initWithCoder:]
  -[RPDiscovery .cxx_destruct]
  -[RPDiscovery setInvalidationHandler:]
  -[RPDiscovery setInterruptionHandler:]
  -[RPDiscovery interruptionHandler]
  -[RPDiscovery invalidationHandler]
  -[RPDiscovery dispatchQueue]
  -[RPDiscovery setLabel:]
  -[RPDiscovery label]
  -[RPDiscovery serviceType]
  -[RPDiscovery setDispatchQueue:]
  -[RPDiscovery controlFlags]
  -[RPDiscovery setControlFlags:]
  -[RPDiscovery activateWithCompletion:]
  -[RPDiscovery _invalidated]
  -[RPDiscovery _interrupted]
  -[RPDiscovery discoveredEndpoints]
  -[RPDiscovery setServiceType:]
  -[RPDiscovery setChangeFlags:]
  -[RPDiscovery changeFlags]
  -[RPDiscovery descriptionWithLevel:]
  -[RPDiscovery _ensureXPCStarted]
  -[RPDiscovery _lostAllEndpoints]
  -[RPDiscovery targetUserSession]
  -[RPDiscovery setTargetUserSession:]
  -[RPDiscovery changedHandler]
  -[RPDiscovery setChangedHandler:]
  -[RPDiscovery _activateWithCompletion:reactivate:]
  -[RPDiscovery xpcDiscoveryFoundEndpoint:]
  -[RPDiscovery xpcDiscoveryLostEndpoint:]
  -[RPDiscovery xpcDiscoveryChangedEndpoint:]
  -[RPDiscovery _scheduleRetry]
  -[RPDiscovery foundHandler]
  -[RPDiscovery setFoundHandler:]
  -[RPDiscovery lostHandler]
  -[RPDiscovery setLostHandler:]


RPEndpoint : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  SFDevice *bleDevice
 @property  CUBonjourDevice *bonjourDevice
 @property  IDSDevice *idsDevice
 @property  NSString *idsDeviceIdentifier
 @property  int linkType
 @property  NSString *mediaRemoteIdentifier
 @property  NSString *mediaRouteIdentifier
 @property  NSString *model
 @property  NSString *name
 @property  BOOL present
 @property  NSArray *serviceTypes
 @property  unsigned long statusFlags
 @property  NSString *sourceVersion
 @property  NSString *homeKitUserIdentifier
 @property  unsigned int hotspotInfo
 @property  NSString *identifier
 @property  int proximity
 @property  NSDictionary *serviceInfo
 @property  NSString *serviceType

  // class methods
  +[RPEndpoint supportsSecureCoding]
  +[RPEndpoint nullEndpoint]

  // instance methods
  -[RPEndpoint name]
  -[RPEndpoint encodeWithCoder:]
  -[RPEndpoint initWithCoder:]
  -[RPEndpoint .cxx_destruct]
  -[RPEndpoint setName:]
  -[RPEndpoint identifier]
  -[RPEndpoint setIdentifier:]
  -[RPEndpoint model]
  -[RPEndpoint setModel:]
  -[RPEndpoint serviceType]
  -[RPEndpoint setIdsDeviceIdentifier:]
  -[RPEndpoint idsDeviceIdentifier]
  -[RPEndpoint statusFlags]
  -[RPEndpoint proximity]
  -[RPEndpoint present]
  -[RPEndpoint sourceVersion]
  -[RPEndpoint setSourceVersion:]
  -[RPEndpoint descriptionWithLevel:]
  -[RPEndpoint setStatusFlags:]
  -[RPEndpoint setPresent:]
  -[RPEndpoint serviceInfo]
  -[RPEndpoint updateWithBonjourDevice:]
  -[RPEndpoint bonjourDevice]
  -[RPEndpoint setBonjourDevice:]
  -[RPEndpoint linkType]
  -[RPEndpoint setLinkType:]
  -[RPEndpoint bleDevice]
  -[RPEndpoint setBleDevice:]
  -[RPEndpoint hotspotInfo]
  -[RPEndpoint mediaRemoteIdentifier]
  -[RPEndpoint updateWithSFDevice:]
  -[RPEndpoint mediaRouteIdentifier]
  -[RPEndpoint serviceTypes]
  -[RPEndpoint setMediaRemoteIdentifier:]
  -[RPEndpoint setMediaRouteIdentifier:]
  -[RPEndpoint setServiceTypes:]
  -[RPEndpoint removeBonjourDevice:]
  -[RPEndpoint updateWithIDSDevice:]
  -[RPEndpoint removeIDSDevice]
  -[RPEndpoint removeSFDevice:]
  -[RPEndpoint homeKitUserIdentifier]
  -[RPEndpoint idsDevice]
  -[RPEndpoint setIdsDevice:]


RPFileTransferSmallFilesTask : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableArray *fileItems
 @property  BOOL needsRetry
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long taskID

  // instance methods
  -[RPFileTransferSmallFilesTask setQueue:]
  -[RPFileTransferSmallFilesTask queue]
  -[RPFileTransferSmallFilesTask .cxx_destruct]
  -[RPFileTransferSmallFilesTask taskID]
  -[RPFileTransferSmallFilesTask setTaskID:]
  -[RPFileTransferSmallFilesTask fileItems]
  -[RPFileTransferSmallFilesTask setFileItems:]
  -[RPFileTransferSmallFilesTask needsRetry]
  -[RPFileTransferSmallFilesTask setNeedsRetry:]


RPFileTransferLargeFileSendTask : NSObject /usr/lib/libSystem.B.dylib
 @property  int fileFD
 @property  RPFileTransferItem *fileItem
 @property  BOOL needsRetry
 @property  int outstandingSends
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long remainingSize
 @property  unsigned long taskID

  // instance methods
  -[RPFileTransferLargeFileSendTask setQueue:]
  -[RPFileTransferLargeFileSendTask queue]
  -[RPFileTransferLargeFileSendTask .cxx_destruct]
  -[RPFileTransferLargeFileSendTask taskID]
  -[RPFileTransferLargeFileSendTask setTaskID:]
  -[RPFileTransferLargeFileSendTask needsRetry]
  -[RPFileTransferLargeFileSendTask setNeedsRetry:]
  -[RPFileTransferLargeFileSendTask fileFD]
  -[RPFileTransferLargeFileSendTask setFileFD:]
  -[RPFileTransferLargeFileSendTask fileItem]
  -[RPFileTransferLargeFileSendTask setFileItem:]
  -[RPFileTransferLargeFileSendTask outstandingSends]
  -[RPFileTransferLargeFileSendTask setOutstandingSends:]
  -[RPFileTransferLargeFileSendTask remainingSize]
  -[RPFileTransferLargeFileSendTask setRemainingSize:]


RPFileTransferLargeFileReceiveTask : NSObject /usr/lib/libSystem.B.dylib
 @property  int fileFD
 @property  RPFileTransferItem *fileItem
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long taskID

  // instance methods
  -[RPFileTransferLargeFileReceiveTask setQueue:]
  -[RPFileTransferLargeFileReceiveTask queue]
  -[RPFileTransferLargeFileReceiveTask .cxx_destruct]
  -[RPFileTransferLargeFileReceiveTask taskID]
  -[RPFileTransferLargeFileReceiveTask setTaskID:]
  -[RPFileTransferLargeFileReceiveTask fileFD]
  -[RPFileTransferLargeFileReceiveTask setFileFD:]
  -[RPFileTransferLargeFileReceiveTask fileItem]
  -[RPFileTransferLargeFileReceiveTask setFileItem:]


RPFileTransferSession : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPMessageable>
 @property  NSData *selfPublicKey
 @property  NSData *selfSecretKey
 @property  @? completionHandler
 @property  unsigned long debugFlags
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned int flags
 @property  @? flowControlChangedHandler
 @property  int flowControlState
 @property  NSString *label
 @property  NSData *peerPublicKey
 @property  RPFileTransferProgress *progressCurrent
 @property  @? progressHandler
 @property  @? receivedItemHandler
 @property  @? receivedItemsHandler
 @property  NSString *targetID
 @property  NSURL *temporaryDirectoryURL

  // class methods
  +[RPFileTransferSession supportsSecureCoding]

  // instance methods
  -[RPFileTransferSession init]
  -[RPFileTransferSession dealloc]
  -[RPFileTransferSession invalidate]
  -[RPFileTransferSession _invalidate]
  -[RPFileTransferSession encodeWithCoder:]
  -[RPFileTransferSession initWithCoder:]
  -[RPFileTransferSession .cxx_destruct]
  -[RPFileTransferSession flags]
  -[RPFileTransferSession finish]
  -[RPFileTransferSession dispatchQueue]
  -[RPFileTransferSession setLabel:]
  -[RPFileTransferSession label]
  -[RPFileTransferSession setDispatchQueue:]
  -[RPFileTransferSession registerRequestID:options:handler:]
  -[RPFileTransferSession sendRequestID:request:destinationID:options:responseHandler:]
  -[RPFileTransferSession progressHandler]
  -[RPFileTransferSession setProgressHandler:]
  -[RPFileTransferSession completionHandler]
  -[RPFileTransferSession setCompletionHandler:]
  -[RPFileTransferSession setFlags:]
  -[RPFileTransferSession _invalidated]
  -[RPFileTransferSession addItem:]
  -[RPFileTransferSession activate]
  -[RPFileTransferSession addItems:]
  -[RPFileTransferSession setTargetID:]
  -[RPFileTransferSession targetID]
  -[RPFileTransferSession _updateIfNeededWithBlock:]
  -[RPFileTransferSession descriptionWithLevel:]
  -[RPFileTransferSession _reportProgressType:]
  -[RPFileTransferSession flowControlChangedHandler]
  -[RPFileTransferSession setFlowControlChangedHandler:]
  -[RPFileTransferSession flowControlState]
  -[RPFileTransferSession deregisterRequestID:]
  -[RPFileTransferSession prepareTemplateAndReturnError:]
  -[RPFileTransferSession setPeerPublicKey:]
  -[RPFileTransferSession selfPublicKey]
  -[RPFileTransferSession temporaryDirectoryURL]
  -[RPFileTransferSession setTemporaryDirectoryURL:]
  -[RPFileTransferSession sendEventID:event:destinationID:options:completion:]
  -[RPFileTransferSession registerEventID:options:handler:]
  -[RPFileTransferSession deregisterEventID:]
  -[RPFileTransferSession sendEventID:event:options:completion:]
  -[RPFileTransferSession sendRequestID:request:options:responseHandler:]
  -[RPFileTransferSession _debugUpdate]
  -[RPFileTransferSession _activateAndReturnError:]
  -[RPFileTransferSession _reportCompletion:]
  -[RPFileTransferSession _prefsChanged]
  -[RPFileTransferSession _debugSetup]
  -[RPFileTransferSession _activateTargetAndReturnError:]
  -[RPFileTransferSession _activateSourceAndReturnError:]
  -[RPFileTransferSession _completeItemDirect:error:]
  -[RPFileTransferSession _updateWiFi]
  -[RPFileTransferSession _receivedPeerUpdate:]
  -[RPFileTransferSession _smallFilesReceiveRequest:responseHandler:]
  -[RPFileTransferSession _largeFileReceiveRequest:responseHandler:]
  -[RPFileTransferSession _handleDevicesCoalesced]
  -[RPFileTransferSession _handleDeviceFound:]
  -[RPFileTransferSession _handleDeviceLost:]
  -[RPFileTransferSession _controlCnxStartIfNeeded]
  -[RPFileTransferSession _reportProgressControlState]
  -[RPFileTransferSession _controlCnxRetryIfNeeded]
  -[RPFileTransferSession _receivedEventID:event:options:]
  -[RPFileTransferSession _receivedRequestID:request:options:responseHandler:]
  -[RPFileTransferSession _scheduleItems]
  -[RPFileTransferSession _handleIncomingConnectionStarted:]
  -[RPFileTransferSession _handleIncomingConnectionEnded:]
  -[RPFileTransferSession _prepareItem:error:]
  -[RPFileTransferSession _metricAddFileSize:]
  -[RPFileTransferSession _smallFilesSendTaskRun:]
  -[RPFileTransferSession _largeFileSendTaskStart:]
  -[RPFileTransferSession _smallFilesSendTaskCreate]
  -[RPFileTransferSession _largeFileSendTaskCreate]
  -[RPFileTransferSession _processFinish]
  -[RPFileTransferSession _ioQueueDequeue]
  -[RPFileTransferSession _smallFilesSendTaskReadItem:error:]
  -[RPFileTransferSession _completeItem:error:]
  -[RPFileTransferSession _smallFilesSendTaskEnd:error:]
  -[RPFileTransferSession _encodeAndCompressObject:originalSize:error:]
  -[RPFileTransferSession _readPath:size:error:]
  -[RPFileTransferSession _ioQueueEnqueue:]
  -[RPFileTransferSession _decompressAndDecodeData:originalSize:error:]
  -[RPFileTransferSession _smallFilesReceiveTaskRun:responseHandler:]
  -[RPFileTransferSession _smallFilesReceiveTaskFileItem:error:]
  -[RPFileTransferSession _smallFilesReceiveTaskComplete:error:responseHandler:]
  -[RPFileTransferSession _openWriteFileItem:size:error:]
  -[RPFileTransferSession _writeFD:buffer:size:error:]
  -[RPFileTransferSession _processReceivedItems:responseHandler:]
  -[RPFileTransferSession _largeFileSendTaskFailed:error:]
  -[RPFileTransferSession _openReadPath:error:]
  -[RPFileTransferSession _largeFileSendTaskNext:xid:]
  -[RPFileTransferSession _readFD:size:error:]
  -[RPFileTransferSession _largeFileSendTaskSend:data:end:xid:]
  -[RPFileTransferSession _compressData:error:]
  -[RPFileTransferSession _largeFileSendTaskResponse:error:end:xid:]
  -[RPFileTransferSession _largeFileSendTaskEnd:error:]
  -[RPFileTransferSession _decompressData:originalSize:error:]
  -[RPFileTransferSession _largeFileReceiveTaskInvalidate:]
  -[RPFileTransferSession _largeFileReceiveTaskRun:data:sendFlags:responseHandler:]
  -[RPFileTransferSession _largeFileReceiveTaskRespond:error:complete:responseHandler:]
  -[RPFileTransferSession _processReceivedItem:responseHandler:]
  -[RPFileTransferSession _openWritePath:size:error:]
  -[RPFileTransferSession _readFD:buffer:size:error:]
  -[RPFileTransferSession setDebugFlags:]
  -[RPFileTransferSession debugFlags]
  -[RPFileTransferSession peerPublicKey]
  -[RPFileTransferSession progressCurrent]
  -[RPFileTransferSession receivedItemHandler]
  -[RPFileTransferSession setReceivedItemHandler:]
  -[RPFileTransferSession receivedItemsHandler]
  -[RPFileTransferSession setReceivedItemsHandler:]
  -[RPFileTransferSession setSelfPublicKey:]
  -[RPFileTransferSession selfSecretKey]
  -[RPFileTransferSession setSelfSecretKey:]


RPFileTransferItem : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL completed
 @property  NSError *error
 @property  unsigned long estimatedSize
 @property  NSData *fileData
 @property  unsigned long fileID
 @property  long long fileSize
 @property  unsigned long metadataSize
 @property  NSData *sha256HashData
 @property  @? completionHandler
 @property  NSString *filename
 @property  NSURL *itemURL
 @property  NSDictionary *metadata

  // instance methods
  -[RPFileTransferItem init]
  -[RPFileTransferItem .cxx_destruct]
  -[RPFileTransferItem error]
  -[RPFileTransferItem fileSize]
  -[RPFileTransferItem setError:]
  -[RPFileTransferItem filename]
  -[RPFileTransferItem setFilename:]
  -[RPFileTransferItem setMetadata:]
  -[RPFileTransferItem metadata]
  -[RPFileTransferItem completed]
  -[RPFileTransferItem completionHandler]
  -[RPFileTransferItem setCompletionHandler:]
  -[RPFileTransferItem setCompleted:]
  -[RPFileTransferItem setFileSize:]
  -[RPFileTransferItem fileID]
  -[RPFileTransferItem setFileID:]
  -[RPFileTransferItem descriptionWithLevel:]
  -[RPFileTransferItem fileData]
  -[RPFileTransferItem setFileData:]
  -[RPFileTransferItem itemURL]
  -[RPFileTransferItem setItemURL:]
  -[RPFileTransferItem metadataSize]
  -[RPFileTransferItem setMetadataSize:]
  -[RPFileTransferItem setEstimatedSize:]
  -[RPFileTransferItem estimatedSize]
  -[RPFileTransferItem setSha256HashData:]
  -[RPFileTransferItem sha256HashData]


RPFileTransferProgress : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  double bytesPerSecond
 @property  double remainingSeconds
 @property  double compressionRate
 @property  NSString *currentFilename
 @property  NSError *error
 @property  int linkType
 @property  long long transferredByteCount
 @property  long long totalByteCount
 @property  long long transferredFileCount
 @property  long long totalFileCount
 @property  int type

  // class methods
  +[RPFileTransferProgress supportsSecureCoding]

  // instance methods
  -[RPFileTransferProgress init]
  -[RPFileTransferProgress type]
  -[RPFileTransferProgress setType:]
  -[RPFileTransferProgress encodeWithCoder:]
  -[RPFileTransferProgress initWithCoder:]
  -[RPFileTransferProgress .cxx_destruct]
  -[RPFileTransferProgress error]
  -[RPFileTransferProgress setError:]
  -[RPFileTransferProgress descriptionWithLevel:]
  -[RPFileTransferProgress linkType]
  -[RPFileTransferProgress setLinkType:]
  -[RPFileTransferProgress setCompressionRate:]
  -[RPFileTransferProgress compressionRate]
  -[RPFileTransferProgress setBytesPerSecond:]
  -[RPFileTransferProgress setRemainingSeconds:]
  -[RPFileTransferProgress setCurrentFilename:]
  -[RPFileTransferProgress setTransferredByteCount:]
  -[RPFileTransferProgress setTotalByteCount:]
  -[RPFileTransferProgress setTransferredFileCount:]
  -[RPFileTransferProgress setTotalFileCount:]
  -[RPFileTransferProgress bytesPerSecond]
  -[RPFileTransferProgress remainingSeconds]
  -[RPFileTransferProgress currentFilename]
  -[RPFileTransferProgress transferredByteCount]
  -[RPFileTransferProgress totalByteCount]
  -[RPFileTransferProgress transferredFileCount]
  -[RPFileTransferProgress totalFileCount]


RPHIDSession : NSObject /usr/lib/libSystem.B.dylib
 @property  <RPMessageable> *messenger

  // instance methods
  -[RPHIDSession init]
  -[RPHIDSession invalidate]
  -[RPHIDSession .cxx_destruct]
  -[RPHIDSession activateWithCompletion:]
  -[RPHIDSession hidCommand:destinationID:completion:]
  -[RPHIDSession hidCommand:buttonState:destinationID:completion:]
  -[RPHIDSession messenger]
  -[RPHIDSession setMessenger:]


RPHIDTouchEvent : NSObject /usr/lib/libSystem.B.dylib
 @property  int finger
 @property  {CGPoint=dd} location
 @property  int phase
 @property  double timestampSeconds

  // instance methods
  -[RPHIDTouchEvent location]
  -[RPHIDTouchEvent setLocation:]
  -[RPHIDTouchEvent phase]
  -[RPHIDTouchEvent setPhase:]
  -[RPHIDTouchEvent setFinger:]
  -[RPHIDTouchEvent finger]
  -[RPHIDTouchEvent timestampSeconds]
  -[RPHIDTouchEvent setTimestampSeconds:]


RPHIDTouchSession : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned int flags
 @property  <RPMessageable> *messenger
 @property  {CGSize=dd} screenSize

  // instance methods
  -[RPHIDTouchSession init]
  -[RPHIDTouchSession invalidate]
  -[RPHIDTouchSession _invalidate]
  -[RPHIDTouchSession .cxx_destruct]
  -[RPHIDTouchSession flags]
  -[RPHIDTouchSession activateWithCompletion:]
  -[RPHIDTouchSession setFlags:]
  -[RPHIDTouchSession setScreenSize:]
  -[RPHIDTouchSession _activateWithCompletion:]
  -[RPHIDTouchSession screenSize]
  -[RPHIDTouchSession messenger]
  -[RPHIDTouchSession setMessenger:]
  -[RPHIDTouchSession sendTouchEvent:completion:]


RPIdentity : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSDate *dateAcknowledged
 @property  NSDate *dateAdded
 @property  NSDate *dateRemoved
 @property  NSDate *dateRequested
 @property  BOOL disabled
 @property  NSData *edSKData
 @property  unsigned long featureFlags
 @property  NSString *identifier
 @property  NSString *mediaRemoteID
 @property  NSString *mediaRouteID
 @property  BOOL present
 @property  unsigned int revisionID
 @property  NSArray *accessGroups
 @property  NSString *accountID
 @property  NSString *contactID
 @property  NSData *deviceIRKData
 @property  NSData *edPKData
 @property  NSString *idsDeviceID
 @property  NSString *model
 @property  NSString *name
 @property  NSString *sendersKnownAlias
 @property  int type
 @property  BOOL userAdded

  // class methods
  +[RPIdentity supportsSecureCoding]
  +[RPIdentity nullIdentity]

  // instance methods
  -[RPIdentity name]
  -[RPIdentity type]
  -[RPIdentity setType:]
  -[RPIdentity encodeWithCoder:]
  -[RPIdentity initWithCoder:]
  -[RPIdentity .cxx_destruct]
  -[RPIdentity setName:]
  -[RPIdentity identifier]
  -[RPIdentity setIdentifier:]
  -[RPIdentity model]
  -[RPIdentity initWithType:]
  -[RPIdentity setModel:]
  -[RPIdentity contactID]
  -[RPIdentity disabled]
  -[RPIdentity setDisabled:]
  -[RPIdentity present]
  -[RPIdentity accountID]
  -[RPIdentity setAccountID:]
  -[RPIdentity revisionID]
  -[RPIdentity setRevisionID:]
  -[RPIdentity signData:error:]
  -[RPIdentity descriptionWithLevel:]
  -[RPIdentity setPresent:]
  -[RPIdentity deviceIRKData]
  -[RPIdentity setContactID:]
  -[RPIdentity sendersKnownAlias]
  -[RPIdentity setSendersKnownAlias:]
  -[RPIdentity idsDeviceID]
  -[RPIdentity mediaRemoteID]
  -[RPIdentity mediaRouteID]
  -[RPIdentity dateAdded]
  -[RPIdentity setEdPKData:]
  -[RPIdentity verifySignature:data:error:]
  -[RPIdentity setEdSKData:]
  -[RPIdentity accessGroups]
  -[RPIdentity edPKData]
  -[RPIdentity edSKData]
  -[RPIdentity verifyAuthTagPtr:authTagLen:dataPtr:dataLen:type:error:]
  -[RPIdentity signDataPtr:dataLen:signatureBytes:error:]
  -[RPIdentity verifySignaturePtr:signatureLen:dataPtr:dataLen:error:]
  -[RPIdentity compareWithRPIdentity:]
  -[RPIdentity updateWithKeychainItem:error:]
  -[RPIdentity updateWithRPMessage:error:]
  -[RPIdentity authTagForData:type:error:]
  -[RPIdentity verifyAuthTag:data:type:error:]
  -[RPIdentity setAccessGroups:]
  -[RPIdentity setDateAdded:]
  -[RPIdentity dateRemoved]
  -[RPIdentity setDateRemoved:]
  -[RPIdentity setDeviceIRKData:]
  -[RPIdentity featureFlags]
  -[RPIdentity setFeatureFlags:]
  -[RPIdentity setIdsDeviceID:]
  -[RPIdentity setMediaRemoteID:]
  -[RPIdentity setMediaRouteID:]
  -[RPIdentity userAdded]
  -[RPIdentity setUserAdded:]
  -[RPIdentity dateAcknowledged]
  -[RPIdentity setDateAcknowledged:]
  -[RPIdentity dateRequested]
  -[RPIdentity setDateRequested:]


RPLegacySessionMessage : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *message
 @property  NSDictionary *options
 @property  NSString *requestID
 @property  @? responseHandler

  // instance methods
  -[RPLegacySessionMessage options]
  -[RPLegacySessionMessage .cxx_destruct]
  -[RPLegacySessionMessage setOptions:]
  -[RPLegacySessionMessage message]
  -[RPLegacySessionMessage setMessage:]
  -[RPLegacySessionMessage setResponseHandler:]
  -[RPLegacySessionMessage responseHandler]
  -[RPLegacySessionMessage requestID]
  -[RPLegacySessionMessage setRequestID:]


RPLegacyDeviceDiscovery : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned int changeFlags
 @property  unsigned char deviceActionType
 @property  NSSet *deviceFilter
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  int rssiThreshold
 @property  BOOL scanCache
 @property  unsigned int scanRate
 @property  unsigned int scanState
 @property  NSString *serviceType
 @property  BOOL targetUserSession
 @property  double timeout
 @property  unsigned int wifiScanFlags
 @property  NSString *wifiSSID
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? deviceChangedHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  @? scanStateChangedHandler
 @property  @? timeoutHandler

  // instance methods
  -[RPLegacyDeviceDiscovery init]
  -[RPLegacyDeviceDiscovery dealloc]
  -[RPLegacyDeviceDiscovery invalidate]
  -[RPLegacyDeviceDiscovery _invalidate]
  -[RPLegacyDeviceDiscovery .cxx_destruct]
  -[RPLegacyDeviceDiscovery setInvalidationHandler:]
  -[RPLegacyDeviceDiscovery setInterruptionHandler:]
  -[RPLegacyDeviceDiscovery interruptionHandler]
  -[RPLegacyDeviceDiscovery invalidationHandler]
  -[RPLegacyDeviceDiscovery dispatchQueue]
  -[RPLegacyDeviceDiscovery timeout]
  -[RPLegacyDeviceDiscovery setTimeout:]
  -[RPLegacyDeviceDiscovery serviceType]
  -[RPLegacyDeviceDiscovery setDispatchQueue:]
  -[RPLegacyDeviceDiscovery setDeviceFoundHandler:]
  -[RPLegacyDeviceDiscovery setDeviceChangedHandler:]
  -[RPLegacyDeviceDiscovery setDeviceLostHandler:]
  -[RPLegacyDeviceDiscovery activateWithCompletion:]
  -[RPLegacyDeviceDiscovery _cleanup]
  -[RPLegacyDeviceDiscovery _invalidated]
  -[RPLegacyDeviceDiscovery _interrupted]
  -[RPLegacyDeviceDiscovery setServiceType:]
  -[RPLegacyDeviceDiscovery setChangeFlags:]
  -[RPLegacyDeviceDiscovery rssiThreshold]
  -[RPLegacyDeviceDiscovery setRssiThreshold:]
  -[RPLegacyDeviceDiscovery setScanRate:]
  -[RPLegacyDeviceDiscovery changeFlags]
  -[RPLegacyDeviceDiscovery deviceFoundHandler]
  -[RPLegacyDeviceDiscovery deviceLostHandler]
  -[RPLegacyDeviceDiscovery deviceChangedHandler]
  -[RPLegacyDeviceDiscovery scanRate]
  -[RPLegacyDeviceDiscovery _activateWithCompletion:]
  -[RPLegacyDeviceDiscovery _lostAllDevices]
  -[RPLegacyDeviceDiscovery _bonjourStart]
  -[RPLegacyDeviceDiscovery _bonjourHandleEventType:info:]
  -[RPLegacyDeviceDiscovery _bonjourHandleAddOrUpdateDevice:]
  -[RPLegacyDeviceDiscovery _bonjourHandleRemoveDevice:]
  -[RPLegacyDeviceDiscovery setDeviceFilter:]
  -[RPLegacyDeviceDiscovery setDeviceActionType:]
  -[RPLegacyDeviceDiscovery targetUserSession]
  -[RPLegacyDeviceDiscovery setTargetUserSession:]
  -[RPLegacyDeviceDiscovery deviceActionType]
  -[RPLegacyDeviceDiscovery setScanCache:]
  -[RPLegacyDeviceDiscovery deviceFilter]
  -[RPLegacyDeviceDiscovery scanCache]
  -[RPLegacyDeviceDiscovery scanState]
  -[RPLegacyDeviceDiscovery scanStateChangedHandler]
  -[RPLegacyDeviceDiscovery setScanStateChangedHandler:]
  -[RPLegacyDeviceDiscovery timeoutHandler]
  -[RPLegacyDeviceDiscovery setTimeoutHandler:]
  -[RPLegacyDeviceDiscovery wifiSSID]
  -[RPLegacyDeviceDiscovery setWifiSSID:]
  -[RPLegacyDeviceDiscovery _bleStart]
  -[RPLegacyDeviceDiscovery _mdStart]
  -[RPLegacyDeviceDiscovery _wifiStart]
  -[RPLegacyDeviceDiscovery _bleHandleDeviceFound:]
  -[RPLegacyDeviceDiscovery _bleHandleDeviceLost:]
  -[RPLegacyDeviceDiscovery _bleHandleDeviceChanged:changes:]
  -[RPLegacyDeviceDiscovery _foundDevice:]
  -[RPLegacyDeviceDiscovery _lostDeviceByIdentifier:]
  -[RPLegacyDeviceDiscovery _mdHandleDeviceFound:]
  -[RPLegacyDeviceDiscovery _mdHandleDeviceLost:]
  -[RPLegacyDeviceDiscovery _mdHandleDeviceChanged:changes:]
  -[RPLegacyDeviceDiscovery _wifiHandleDeviceFound:]
  -[RPLegacyDeviceDiscovery _wifiHandleDeviceLost:]
  -[RPLegacyDeviceDiscovery _wifiHandleDeviceChanged:changes:]
  -[RPLegacyDeviceDiscovery setBLEPayloadFilterData:mask:]
  -[RPLegacyDeviceDiscovery wifiScanFlags]
  -[RPLegacyDeviceDiscovery setWifiScanFlags:]


RPDeviceContext : NSObject /usr/lib/libSystem.B.dylib
 @property  RPDevice *device
 @property  RPLegacyDeviceDiscovery *discovery
 @property  BOOL reported
 @property  RPLegacySession *session
 @property  int state

  // instance methods
  -[RPDeviceContext invalidate]
  -[RPDeviceContext .cxx_destruct]
  -[RPDeviceContext state]
  -[RPDeviceContext setState:]
  -[RPDeviceContext device]
  -[RPDeviceContext session]
  -[RPDeviceContext setSession:]
  -[RPDeviceContext reported]
  -[RPDeviceContext setDevice:]
  -[RPDeviceContext discovery]
  -[RPDeviceContext setDiscovery:]
  -[RPDeviceContext setReported:]
  -[RPDeviceContext pairVerify]
  -[RPDeviceContext systemInfoResponse:error:]


RPLegacyService : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned int advertiseRate
 @property  unsigned char deviceActionType
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *label
 @property  BOOL needsSetup
 @property  NSString *serviceType
 @property  NSDictionary *txtDictionary
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  @? sessionStartedHandler
 @property  @? sessionEndedHandler
 @property  @? showPINHandler
 @property  @? hidePINHandler

  // instance methods
  -[RPLegacyService init]
  -[RPLegacyService dealloc]
  -[RPLegacyService invalidate]
  -[RPLegacyService _invalidate]
  -[RPLegacyService .cxx_destruct]
  -[RPLegacyService setInvalidationHandler:]
  -[RPLegacyService setInterruptionHandler:]
  -[RPLegacyService setErrorHandler:]
  -[RPLegacyService errorHandler]
  -[RPLegacyService interruptionHandler]
  -[RPLegacyService invalidationHandler]
  -[RPLegacyService dispatchQueue]
  -[RPLegacyService setLabel:]
  -[RPLegacyService label]
  -[RPLegacyService serviceType]
  -[RPLegacyService setDispatchQueue:]
  -[RPLegacyService activateWithCompletion:]
  -[RPLegacyService registerRequestID:options:handler:]
  -[RPLegacyService _cleanup]
  -[RPLegacyService _invalidated]
  -[RPLegacyService needsSetup]
  -[RPLegacyService setServiceType:]
  -[RPLegacyService _activateWithCompletion:]
  -[RPLegacyService setTxtDictionary:]
  -[RPLegacyService txtDictionary]
  -[RPLegacyService setDeviceActionType:]
  -[RPLegacyService showPINHandler]
  -[RPLegacyService setShowPINHandler:]
  -[RPLegacyService hidePINHandler]
  -[RPLegacyService setHidePINHandler:]
  -[RPLegacyService setNeedsSetup:]
  -[RPLegacyService deviceActionType]
  -[RPLegacyService setAdvertiseRate:]
  -[RPLegacyService setSessionStartedHandler:]
  -[RPLegacyService setSessionEndedHandler:]
  -[RPLegacyService sessionStartedHandler]
  -[RPLegacyService sessionEndedHandler]
  -[RPLegacyService advertiseRate]
  -[RPLegacyService _tcpStart]
  -[RPLegacyService _bonjourUpdateService]
  -[RPLegacyService _bonjourUpdateTXT]


RPLegacySession : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *label
 @property  RPDevice *peerDevice
 @property  unsigned int securityFlags
 @property  NSString *serviceType
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  @? promptForPINHandler

  // instance methods
  -[RPLegacySession init]
  -[RPLegacySession dealloc]
  -[RPLegacySession invalidate]
  -[RPLegacySession _invalidate]
  -[RPLegacySession .cxx_destruct]
  -[RPLegacySession setInvalidationHandler:]
  -[RPLegacySession setInterruptionHandler:]
  -[RPLegacySession setErrorHandler:]
  -[RPLegacySession errorHandler]
  -[RPLegacySession interruptionHandler]
  -[RPLegacySession invalidationHandler]
  -[RPLegacySession dispatchQueue]
  -[RPLegacySession setLabel:]
  -[RPLegacySession label]
  -[RPLegacySession serviceType]
  -[RPLegacySession setDispatchQueue:]
  -[RPLegacySession activateWithCompletion:]
  -[RPLegacySession registerRequestID:options:handler:]
  -[RPLegacySession _cleanup]
  -[RPLegacySession _invalidated]
  -[RPLegacySession _sendMessage:]
  -[RPLegacySession _run]
  -[RPLegacySession setServiceType:]
  -[RPLegacySession _activateWithCompletion:]
  -[RPLegacySession sendRequestID:options:request:responseHandler:]
  -[RPLegacySession pairSetupWithFlags:completion:]
  -[RPLegacySession _pairSetupWithFlags:completion:]
  -[RPLegacySession pairSetupTryPIN:]
  -[RPLegacySession _pairSetupTryPIN:]
  -[RPLegacySession pairVerifyWithFlags:completion:]
  -[RPLegacySession _pairVerifyWithFlags:completion:]
  -[RPLegacySession unpairWithCompletion:]
  -[RPLegacySession _unpairWithCompletion:]
  -[RPLegacySession peerDevice]
  -[RPLegacySession setPeerDevice:]
  -[RPLegacySession promptForPINHandler]
  -[RPLegacySession setPromptForPINHandler:]
  -[RPLegacySession _runPairVerify]
  -[RPLegacySession setSecurityFlags:]
  -[RPLegacySession requestSystemInfoWithCompletion:]
  -[RPLegacySession _runMobileDeviceStart]
  -[RPLegacySession _sendQueuedMessages]
  -[RPLegacySession securityFlags]


RPMediaControlSession : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long mediaControlFlags
 @property  @? mediaControlFlagsChangedHandler
 @property  <RPMessageable> *messenger

  // instance methods
  -[RPMediaControlSession init]
  -[RPMediaControlSession invalidate]
  -[RPMediaControlSession _invalidate]
  -[RPMediaControlSession .cxx_destruct]
  -[RPMediaControlSession activateWithCompletion:]
  -[RPMediaControlSession _activateWithCompletion:]
  -[RPMediaControlSession messenger]
  -[RPMediaControlSession setMessenger:]
  -[RPMediaControlSession _handleMediaControlEvent:]
  -[RPMediaControlSession mediaCaptionSettingGetFromDestinationID:completion:]
  -[RPMediaControlSession mediaCaptionSettingSet:destinationID:completion:]
  -[RPMediaControlSession mediaCommand:destinationID:completion:]
  -[RPMediaControlSession mediaSkipBySeconds:destinationID:completion:]
  -[RPMediaControlSession mediaGetVolumeFromDestinationID:completion:]
  -[RPMediaControlSession mediaSetVolume:destinationID:completion:]
  -[RPMediaControlSession mediaControlFlags]
  -[RPMediaControlSession mediaControlFlagsChangedHandler]
  -[RPMediaControlSession setMediaControlFlagsChangedHandler:]


RPPeopleDiscovery : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPPeopleXPCClientInterface>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  BOOL targetUserSession
 @property  unsigned int changeFlags
 @property  unsigned int discoveryFlags
 @property  int discoveryMode
 @property  NSArray *discoveredPeople
 @property  int peopleDensity
 @property  @? peopleDensityChangedHandler
 @property  @? personFoundHandler
 @property  @? personLostHandler
 @property  @? personChangedHandler
 @property  NSSet *rangingPeople
 @property  @? statusChangedHandler
 @property  unsigned int statusFlags

  // class methods
  +[RPPeopleDiscovery supportsSecureCoding]

  // instance methods
  -[RPPeopleDiscovery init]
  -[RPPeopleDiscovery invalidate]
  -[RPPeopleDiscovery encodeWithCoder:]
  -[RPPeopleDiscovery initWithCoder:]
  -[RPPeopleDiscovery .cxx_destruct]
  -[RPPeopleDiscovery setInvalidationHandler:]
  -[RPPeopleDiscovery setInterruptionHandler:]
  -[RPPeopleDiscovery interruptionHandler]
  -[RPPeopleDiscovery invalidationHandler]
  -[RPPeopleDiscovery dispatchQueue]
  -[RPPeopleDiscovery setDispatchQueue:]
  -[RPPeopleDiscovery activateWithCompletion:]
  -[RPPeopleDiscovery statusFlags]
  -[RPPeopleDiscovery _invalidated]
  -[RPPeopleDiscovery _interrupted]
  -[RPPeopleDiscovery setDiscoveryMode:]
  -[RPPeopleDiscovery setChangeFlags:]
  -[RPPeopleDiscovery changeFlags]
  -[RPPeopleDiscovery descriptionWithLevel:]
  -[RPPeopleDiscovery _ensureXPCStarted]
  -[RPPeopleDiscovery discoveryFlags]
  -[RPPeopleDiscovery setDiscoveryFlags:]
  -[RPPeopleDiscovery targetUserSession]
  -[RPPeopleDiscovery setTargetUserSession:]
  -[RPPeopleDiscovery statusChangedHandler]
  -[RPPeopleDiscovery setStatusChangedHandler:]
  -[RPPeopleDiscovery _invokeBlockActivateSafe:]
  -[RPPeopleDiscovery discoveryMode]
  -[RPPeopleDiscovery _activateWithCompletion:reactivate:]
  -[RPPeopleDiscovery _scheduleRetry]
  -[RPPeopleDiscovery _updatePeopleDensity:]
  -[RPPeopleDiscovery xpcPeopleStatusChanged:]
  -[RPPeopleDiscovery xpcPersonFound:]
  -[RPPeopleDiscovery xpcPersonLost:]
  -[RPPeopleDiscovery xpcPersonChanged:changes:]
  -[RPPeopleDiscovery xpcPersonID:deviceID:updatedMeasurement:]
  -[RPPeopleDiscovery _lostAllPeople]
  -[RPPeopleDiscovery setRangingPeople:]
  -[RPPeopleDiscovery discoveredPeople]
  -[RPPeopleDiscovery addAppleID:completion:]
  -[RPPeopleDiscovery removeAppleID:completion:]
  -[RPPeopleDiscovery peopleDensity]
  -[RPPeopleDiscovery peopleDensityChangedHandler]
  -[RPPeopleDiscovery setPeopleDensityChangedHandler:]
  -[RPPeopleDiscovery personFoundHandler]
  -[RPPeopleDiscovery setPersonFoundHandler:]
  -[RPPeopleDiscovery personLostHandler]
  -[RPPeopleDiscovery setPersonLostHandler:]
  -[RPPeopleDiscovery personChangedHandler]
  -[RPPeopleDiscovery setPersonChangedHandler:]
  -[RPPeopleDiscovery rangingPeople]


RPPerson : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSMutableDictionary *deviceDict
 @property  NSString *identifier
 @property  CURangingMeasurement *relativeLocation
 @property  int activityLevel
 @property  NSString *contactID
 @property  NSArray *devices
 @property  unsigned int flags
 @property  NSString *name
 @property  int proximity

  // class methods
  +[RPPerson supportsSecureCoding]

  // instance methods
  -[RPPerson name]
  -[RPPerson encodeWithCoder:]
  -[RPPerson initWithCoder:]
  -[RPPerson .cxx_destruct]
  -[RPPerson identifier]
  -[RPPerson flags]
  -[RPPerson setIdentifier:]
  -[RPPerson contactID]
  -[RPPerson devices]
  -[RPPerson proximity]
  -[RPPerson relativeLocation]
  -[RPPerson setRelativeLocation:]
  -[RPPerson descriptionWithLevel:]
  -[RPPerson activityLevel]
  -[RPPerson _updateDeviceDerivedInfo]
  -[RPPerson removeRPDevice:]
  -[RPPerson updateWithRPDevice:]
  -[RPPerson deviceDict]
  -[RPPerson setDeviceDict:]


RPPrivateAdvertiser : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPPrivateDiscoveryXPCClientInterface>
 @property  unsigned int clientID
 @property  NSString *accessGroup
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  NSDictionary *serviceInfo
 @property  NSString *serviceType

  // class methods
  +[RPPrivateAdvertiser supportsSecureCoding]

  // instance methods
  -[RPPrivateAdvertiser init]
  -[RPPrivateAdvertiser dealloc]
  -[RPPrivateAdvertiser invalidate]
  -[RPPrivateAdvertiser encodeWithCoder:]
  -[RPPrivateAdvertiser initWithCoder:]
  -[RPPrivateAdvertiser .cxx_destruct]
  -[RPPrivateAdvertiser setInvalidationHandler:]
  -[RPPrivateAdvertiser _update]
  -[RPPrivateAdvertiser setInterruptionHandler:]
  -[RPPrivateAdvertiser setErrorHandler:]
  -[RPPrivateAdvertiser errorHandler]
  -[RPPrivateAdvertiser interruptionHandler]
  -[RPPrivateAdvertiser invalidationHandler]
  -[RPPrivateAdvertiser dispatchQueue]
  -[RPPrivateAdvertiser setLabel:]
  -[RPPrivateAdvertiser label]
  -[RPPrivateAdvertiser serviceType]
  -[RPPrivateAdvertiser setDispatchQueue:]
  -[RPPrivateAdvertiser _invalidated]
  -[RPPrivateAdvertiser _interrupted]
  -[RPPrivateAdvertiser activate]
  -[RPPrivateAdvertiser setClientID:]
  -[RPPrivateAdvertiser clientID]
  -[RPPrivateAdvertiser setServiceType:]
  -[RPPrivateAdvertiser _updateIfNeededWithBlock:]
  -[RPPrivateAdvertiser accessGroup]
  -[RPPrivateAdvertiser setAccessGroup:]
  -[RPPrivateAdvertiser _ensureXPCStarted]
  -[RPPrivateAdvertiser setServiceInfo:]
  -[RPPrivateAdvertiser serviceInfo]
  -[RPPrivateAdvertiser _activateDirect]
  -[RPPrivateAdvertiser _activateXPC:]
  -[RPPrivateAdvertiser xpcPrivateDiscoveryEndpointFound:]
  -[RPPrivateAdvertiser xpcPrivateDiscoveryEndpointLost:]
  -[RPPrivateAdvertiser xpcPrivateDiscoveryEndpointChanged:]
  -[RPPrivateAdvertiser _invalidateDirect]


RPPrivateDiscovery : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPPrivateDiscoveryXPCClientInterface>
 @property  unsigned int clientID
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? endpointFoundHandler
 @property  @? endpointLostHandler
 @property  @? endpointChangedHandler
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  NSString *serviceType

  // class methods
  +[RPPrivateDiscovery supportsSecureCoding]

  // instance methods
  -[RPPrivateDiscovery init]
  -[RPPrivateDiscovery dealloc]
  -[RPPrivateDiscovery invalidate]
  -[RPPrivateDiscovery encodeWithCoder:]
  -[RPPrivateDiscovery initWithCoder:]
  -[RPPrivateDiscovery .cxx_destruct]
  -[RPPrivateDiscovery setInvalidationHandler:]
  -[RPPrivateDiscovery _update]
  -[RPPrivateDiscovery setInterruptionHandler:]
  -[RPPrivateDiscovery setErrorHandler:]
  -[RPPrivateDiscovery errorHandler]
  -[RPPrivateDiscovery interruptionHandler]
  -[RPPrivateDiscovery invalidationHandler]
  -[RPPrivateDiscovery dispatchQueue]
  -[RPPrivateDiscovery setLabel:]
  -[RPPrivateDiscovery label]
  -[RPPrivateDiscovery serviceType]
  -[RPPrivateDiscovery setDispatchQueue:]
  -[RPPrivateDiscovery _invalidated]
  -[RPPrivateDiscovery _interrupted]
  -[RPPrivateDiscovery activate]
  -[RPPrivateDiscovery setClientID:]
  -[RPPrivateDiscovery clientID]
  -[RPPrivateDiscovery setServiceType:]
  -[RPPrivateDiscovery setEndpointFoundHandler:]
  -[RPPrivateDiscovery setEndpointLostHandler:]
  -[RPPrivateDiscovery setEndpointChangedHandler:]
  -[RPPrivateDiscovery _updateIfNeededWithBlock:]
  -[RPPrivateDiscovery _ensureXPCStarted]
  -[RPPrivateDiscovery endpointFoundHandler]
  -[RPPrivateDiscovery endpointLostHandler]
  -[RPPrivateDiscovery endpointChangedHandler]
  -[RPPrivateDiscovery _activateDirect]
  -[RPPrivateDiscovery _activateXPC:]
  -[RPPrivateDiscovery xpcPrivateDiscoveryEndpointFound:]
  -[RPPrivateDiscovery xpcPrivateDiscoveryEndpointLost:]
  -[RPPrivateDiscovery xpcPrivateDiscoveryEndpointChanged:]
  -[RPPrivateDiscovery _invalidateDirect]


RPRemoteDisplayDevice : RPEndpoint <NSSecureCoding>
 @property  NSString *persistentIdentifier
 @property  unsigned int flags

  // class methods
  +[RPRemoteDisplayDevice supportsSecureCoding]

  // instance methods
  -[RPRemoteDisplayDevice encodeWithCoder:]
  -[RPRemoteDisplayDevice initWithCoder:]
  -[RPRemoteDisplayDevice .cxx_destruct]
  -[RPRemoteDisplayDevice flags]
  -[RPRemoteDisplayDevice persistentIdentifier]
  -[RPRemoteDisplayDevice setPersistentIdentifier:]
  -[RPRemoteDisplayDevice descriptionWithLevel:]
  -[RPRemoteDisplayDevice updateWithEndpoint:]


RPRemoteDisplayDiscovery : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPRemoteDisplayXPCClientInterface>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  unsigned long controlFlags
 @property  NSArray *discoveredDevices
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? deviceChangedHandler
 @property  unsigned long errorFlags
 @property  @? errorFlagsChangedHandler

  // class methods
  +[RPRemoteDisplayDiscovery supportsSecureCoding]

  // instance methods
  -[RPRemoteDisplayDiscovery init]
  -[RPRemoteDisplayDiscovery invalidate]
  -[RPRemoteDisplayDiscovery encodeWithCoder:]
  -[RPRemoteDisplayDiscovery initWithCoder:]
  -[RPRemoteDisplayDiscovery .cxx_destruct]
  -[RPRemoteDisplayDiscovery setInvalidationHandler:]
  -[RPRemoteDisplayDiscovery setInterruptionHandler:]
  -[RPRemoteDisplayDiscovery interruptionHandler]
  -[RPRemoteDisplayDiscovery invalidationHandler]
  -[RPRemoteDisplayDiscovery dispatchQueue]
  -[RPRemoteDisplayDiscovery setDispatchQueue:]
  -[RPRemoteDisplayDiscovery controlFlags]
  -[RPRemoteDisplayDiscovery setControlFlags:]
  -[RPRemoteDisplayDiscovery setDeviceFoundHandler:]
  -[RPRemoteDisplayDiscovery setDeviceChangedHandler:]
  -[RPRemoteDisplayDiscovery setDeviceLostHandler:]
  -[RPRemoteDisplayDiscovery activateWithCompletion:]
  -[RPRemoteDisplayDiscovery _invalidated]
  -[RPRemoteDisplayDiscovery _interrupted]
  -[RPRemoteDisplayDiscovery deviceFoundHandler]
  -[RPRemoteDisplayDiscovery deviceLostHandler]
  -[RPRemoteDisplayDiscovery deviceChangedHandler]
  -[RPRemoteDisplayDiscovery _lostAllDevices]
  -[RPRemoteDisplayDiscovery _ensureXPCStarted]
  -[RPRemoteDisplayDiscovery discoveredDevices]
  -[RPRemoteDisplayDiscovery _activateWithCompletion:reactivate:]
  -[RPRemoteDisplayDiscovery shouldReportDevice:]
  -[RPRemoteDisplayDiscovery remoteDisplayFoundDevice:]
  -[RPRemoteDisplayDiscovery remoteDisplayLostDevice:]
  -[RPRemoteDisplayDiscovery remoteDisplayChangedDevice:changes:]
  -[RPRemoteDisplayDiscovery remoteDisplayUpdateErrorFlags:]
  -[RPRemoteDisplayDiscovery errorFlags]
  -[RPRemoteDisplayDiscovery setErrorFlags:]
  -[RPRemoteDisplayDiscovery errorFlagsChangedHandler]
  -[RPRemoteDisplayDiscovery setErrorFlagsChangedHandler:]


RPRemoteDisplayServer : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPAuthenticatable>
 @property  unsigned int internalAuthFlags
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  @? sessionStartHandler
 @property  @? sessionEndedHandler
 @property  unsigned int pairSetupFlags
 @property  unsigned int pairVerifyFlags
 @property  NSString *password
 @property  int passwordType
 @property  int passwordTypeActual
 @property  @? authCompletionHandler
 @property  @? showPasswordHandler
 @property  @? hidePasswordHandler
 @property  @? promptForPasswordHandler

  // class methods
  +[RPRemoteDisplayServer supportsSecureCoding]

  // instance methods
  -[RPRemoteDisplayServer init]
  -[RPRemoteDisplayServer invalidate]
  -[RPRemoteDisplayServer encodeWithCoder:]
  -[RPRemoteDisplayServer initWithCoder:]
  -[RPRemoteDisplayServer password]
  -[RPRemoteDisplayServer .cxx_destruct]
  -[RPRemoteDisplayServer setInvalidationHandler:]
  -[RPRemoteDisplayServer setInterruptionHandler:]
  -[RPRemoteDisplayServer setPassword:]
  -[RPRemoteDisplayServer interruptionHandler]
  -[RPRemoteDisplayServer invalidationHandler]
  -[RPRemoteDisplayServer dispatchQueue]
  -[RPRemoteDisplayServer setDispatchQueue:]
  -[RPRemoteDisplayServer activateWithCompletion:]
  -[RPRemoteDisplayServer _invalidated]
  -[RPRemoteDisplayServer _interrupted]
  -[RPRemoteDisplayServer _ensureXPCStarted]
  -[RPRemoteDisplayServer setSessionEndedHandler:]
  -[RPRemoteDisplayServer sessionEndedHandler]
  -[RPRemoteDisplayServer passwordType]
  -[RPRemoteDisplayServer _activateWithCompletion:reactivate:]
  -[RPRemoteDisplayServer tryPassword:]
  -[RPRemoteDisplayServer pairSetupFlags]
  -[RPRemoteDisplayServer setPairSetupFlags:]
  -[RPRemoteDisplayServer pairVerifyFlags]
  -[RPRemoteDisplayServer setPairVerifyFlags:]
  -[RPRemoteDisplayServer setPasswordType:]
  -[RPRemoteDisplayServer passwordTypeActual]
  -[RPRemoteDisplayServer authCompletionHandler]
  -[RPRemoteDisplayServer setAuthCompletionHandler:]
  -[RPRemoteDisplayServer showPasswordHandler]
  -[RPRemoteDisplayServer setShowPasswordHandler:]
  -[RPRemoteDisplayServer hidePasswordHandler]
  -[RPRemoteDisplayServer setHidePasswordHandler:]
  -[RPRemoteDisplayServer promptForPasswordHandler]
  -[RPRemoteDisplayServer setPromptForPasswordHandler:]
  -[RPRemoteDisplayServer internalAuthFlags]
  -[RPRemoteDisplayServer sessionStartHandler]
  -[RPRemoteDisplayServer setSessionStartHandler:]
  -[RPRemoteDisplayServer remoteDisplayShowPassword:flags:]
  -[RPRemoteDisplayServer remoteDisplayHidePasswordWithFlags:]
  -[RPRemoteDisplayServer remoteDisplayStartServerSessionID:device:completion:]
  -[RPRemoteDisplayServer remoteDisplaySessionEndedWithID:]
  -[RPRemoteDisplayServer remoteDisplayReceivedEventID:event:options:sessionID:]
  -[RPRemoteDisplayServer remoteDisplayReceivedRequestID:request:options:responseHandler:sessionID:]


RPRemoteDisplaySession : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPRemoteDisplayXPCClientInterface, RPAuthenticatable, RPMessageable>
 @property  CUBonjourDevice *bonjourDevice
 @property  RPRemoteDisplayDevice *daemonDevice
 @property  unsigned int internalAuthFlags
 @property  BOOL needsAWDL
 @property  RPRemoteDisplayServer *server
 @property  NSNumber *sessionID
 @property  NSXPCConnection *xpcCnx
 @property  unsigned long controlFlags
 @property  RPRemoteDisplayDevice *destinationDevice
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  unsigned int pairSetupFlags
 @property  unsigned int pairVerifyFlags
 @property  NSString *password
 @property  int passwordType
 @property  int passwordTypeActual
 @property  @? authCompletionHandler
 @property  @? showPasswordHandler
 @property  @? hidePasswordHandler
 @property  @? promptForPasswordHandler

  // class methods
  +[RPRemoteDisplaySession supportsSecureCoding]

  // instance methods
  -[RPRemoteDisplaySession init]
  -[RPRemoteDisplaySession invalidate]
  -[RPRemoteDisplaySession encodeWithCoder:]
  -[RPRemoteDisplaySession initWithCoder:]
  -[RPRemoteDisplaySession password]
  -[RPRemoteDisplaySession .cxx_destruct]
  -[RPRemoteDisplaySession setInvalidationHandler:]
  -[RPRemoteDisplaySession setInterruptionHandler:]
  -[RPRemoteDisplaySession setErrorHandler:]
  -[RPRemoteDisplaySession errorHandler]
  -[RPRemoteDisplaySession setPassword:]
  -[RPRemoteDisplaySession interruptionHandler]
  -[RPRemoteDisplaySession invalidationHandler]
  -[RPRemoteDisplaySession setServer:]
  -[RPRemoteDisplaySession dispatchQueue]
  -[RPRemoteDisplaySession server]
  -[RPRemoteDisplaySession setDispatchQueue:]
  -[RPRemoteDisplaySession controlFlags]
  -[RPRemoteDisplaySession setControlFlags:]
  -[RPRemoteDisplaySession activateWithCompletion:]
  -[RPRemoteDisplaySession registerRequestID:options:handler:]
  -[RPRemoteDisplaySession setDestinationDevice:]
  -[RPRemoteDisplaySession destinationDevice]
  -[RPRemoteDisplaySession sendRequestID:request:destinationID:options:responseHandler:]
  -[RPRemoteDisplaySession sessionID]
  -[RPRemoteDisplaySession _invalidated]
  -[RPRemoteDisplaySession _interrupted]
  -[RPRemoteDisplaySession setSessionID:]
  -[RPRemoteDisplaySession _ensureXPCStarted]
  -[RPRemoteDisplaySession setNeedsAWDL:]
  -[RPRemoteDisplaySession bonjourDevice]
  -[RPRemoteDisplaySession setBonjourDevice:]
  -[RPRemoteDisplaySession xpcCnx]
  -[RPRemoteDisplaySession needsAWDL]
  -[RPRemoteDisplaySession deregisterRequestID:]
  -[RPRemoteDisplaySession passwordType]
  -[RPRemoteDisplaySession _activateWithCompletion:reactivate:]
  -[RPRemoteDisplaySession sendEventID:event:destinationID:options:completion:]
  -[RPRemoteDisplaySession tryPassword:]
  -[RPRemoteDisplaySession pairSetupFlags]
  -[RPRemoteDisplaySession setPairSetupFlags:]
  -[RPRemoteDisplaySession pairVerifyFlags]
  -[RPRemoteDisplaySession setPairVerifyFlags:]
  -[RPRemoteDisplaySession setPasswordType:]
  -[RPRemoteDisplaySession passwordTypeActual]
  -[RPRemoteDisplaySession authCompletionHandler]
  -[RPRemoteDisplaySession setAuthCompletionHandler:]
  -[RPRemoteDisplaySession showPasswordHandler]
  -[RPRemoteDisplaySession setShowPasswordHandler:]
  -[RPRemoteDisplaySession hidePasswordHandler]
  -[RPRemoteDisplaySession setHidePasswordHandler:]
  -[RPRemoteDisplaySession promptForPasswordHandler]
  -[RPRemoteDisplaySession setPromptForPasswordHandler:]
  -[RPRemoteDisplaySession registerEventID:options:handler:]
  -[RPRemoteDisplaySession deregisterEventID:]
  -[RPRemoteDisplaySession sendEventID:event:options:completion:]
  -[RPRemoteDisplaySession sendRequestID:request:options:responseHandler:]
  -[RPRemoteDisplaySession internalAuthFlags]
  -[RPRemoteDisplaySession remoteDisplayPromptForPasswordWithFlags:throttleSeconds:]
  -[RPRemoteDisplaySession remoteDisplayAuthCompleted:]
  -[RPRemoteDisplaySession remoteDisplaySessionError:]
  -[RPRemoteDisplaySession remoteDisplayReceivedEventID:event:options:]
  -[RPRemoteDisplaySession remoteDisplayReceivedRequestID:request:options:responseHandler:]
  -[RPRemoteDisplaySession setXpcCnx:]
  -[RPRemoteDisplaySession _sendEventID:event:destinationID:options:completion:]
  -[RPRemoteDisplaySession _sendRequestID:request:destinationID:options:responseHandler:]
  -[RPRemoteDisplaySession daemonDevice]
  -[RPRemoteDisplaySession setDaemonDevice:]


RPServer : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPCompanionLinkXPCClientInterface, RPAuthenticatable>
 @property  unsigned int internalAuthFlags
 @property  @? acceptHandler
 @property  unsigned long controlFlags
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  NSString *serviceType
 @property  unsigned int pairSetupFlags
 @property  unsigned int pairVerifyFlags
 @property  NSString *password
 @property  int passwordType
 @property  int passwordTypeActual
 @property  @? authCompletionHandler
 @property  @? showPasswordHandler
 @property  @? hidePasswordHandler
 @property  @? promptForPasswordHandler

  // class methods
  +[RPServer supportsSecureCoding]

  // instance methods
  -[RPServer init]
  -[RPServer dealloc]
  -[RPServer invalidate]
  -[RPServer encodeWithCoder:]
  -[RPServer initWithCoder:]
  -[RPServer password]
  -[RPServer .cxx_destruct]
  -[RPServer setInvalidationHandler:]
  -[RPServer _update]
  -[RPServer setInterruptionHandler:]
  -[RPServer setErrorHandler:]
  -[RPServer errorHandler]
  -[RPServer setPassword:]
  -[RPServer interruptionHandler]
  -[RPServer invalidationHandler]
  -[RPServer dispatchQueue]
  -[RPServer setLabel:]
  -[RPServer label]
  -[RPServer serviceType]
  -[RPServer setDispatchQueue:]
  -[RPServer controlFlags]
  -[RPServer setControlFlags:]
  -[RPServer _invalidated]
  -[RPServer _interrupted]
  -[RPServer activate]
  -[RPServer setServiceType:]
  -[RPServer _updateIfNeededWithBlock:]
  -[RPServer descriptionWithLevel:]
  -[RPServer _ensureXPCStarted]
  -[RPServer passwordType]
  -[RPServer xpcServerAcceptSession:completion:]
  -[RPServer xpcServerShowPassword:flags:]
  -[RPServer xpcServerHidePassword:]
  -[RPServer tryPassword:]
  -[RPServer pairSetupFlags]
  -[RPServer setPairSetupFlags:]
  -[RPServer pairVerifyFlags]
  -[RPServer setPairVerifyFlags:]
  -[RPServer setPasswordType:]
  -[RPServer passwordTypeActual]
  -[RPServer authCompletionHandler]
  -[RPServer setAuthCompletionHandler:]
  -[RPServer showPasswordHandler]
  -[RPServer setShowPasswordHandler:]
  -[RPServer hidePasswordHandler]
  -[RPServer setHidePasswordHandler:]
  -[RPServer promptForPasswordHandler]
  -[RPServer setPromptForPasswordHandler:]
  -[RPServer internalAuthFlags]
  -[RPServer _activateWithReactivate:]
  -[RPServer acceptHandler]
  -[RPServer setAcceptHandler:]


RPSession : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, RPCompanionLinkXPCClientInterface, RPAuthenticatable, RPMessageable>
 @property  RPConnection *cnx
 @property  NSString *peerID
 @property  unsigned long sessionID
 @property  unsigned long startTicks
 @property  unsigned long controlFlags
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  RPEndpoint *peerEndpoint
 @property  NSString *serviceType
 @property  unsigned int pairSetupFlags
 @property  unsigned int pairVerifyFlags
 @property  NSString *password
 @property  int passwordType
 @property  int passwordTypeActual
 @property  @? authCompletionHandler
 @property  @? showPasswordHandler
 @property  @? hidePasswordHandler
 @property  @? promptForPasswordHandler

  // class methods
  +[RPSession supportsSecureCoding]

  // instance methods
  -[RPSession init]
  -[RPSession dealloc]
  -[RPSession invalidate]
  -[RPSession encodeWithCoder:]
  -[RPSession initWithCoder:]
  -[RPSession password]
  -[RPSession .cxx_destruct]
  -[RPSession setInvalidationHandler:]
  -[RPSession setInterruptionHandler:]
  -[RPSession setPassword:]
  -[RPSession interruptionHandler]
  -[RPSession invalidationHandler]
  -[RPSession dispatchQueue]
  -[RPSession setLabel:]
  -[RPSession label]
  -[RPSession serviceType]
  -[RPSession setDispatchQueue:]
  -[RPSession controlFlags]
  -[RPSession setControlFlags:]
  -[RPSession activateWithCompletion:]
  -[RPSession registerRequestID:options:handler:]
  -[RPSession sendRequestID:request:destinationID:options:responseHandler:]
  -[RPSession sessionID]
  -[RPSession _invalidated]
  -[RPSession _interrupted]
  -[RPSession setSessionID:]
  -[RPSession peerID]
  -[RPSession setPeerID:]
  -[RPSession setServiceType:]
  -[RPSession setPeerEndpoint:]
  -[RPSession peerEndpoint]
  -[RPSession descriptionWithLevel:]
  -[RPSession startTicks]
  -[RPSession setStartTicks:]
  -[RPSession _ensureXPCStarted]
  -[RPSession deregisterRequestID:]
  -[RPSession passwordType]
  -[RPSession _activateWithCompletion:reactivate:]
  -[RPSession sendEventID:event:destinationID:options:completion:]
  -[RPSession tryPassword:]
  -[RPSession pairSetupFlags]
  -[RPSession setPairSetupFlags:]
  -[RPSession pairVerifyFlags]
  -[RPSession setPairVerifyFlags:]
  -[RPSession setPasswordType:]
  -[RPSession passwordTypeActual]
  -[RPSession authCompletionHandler]
  -[RPSession setAuthCompletionHandler:]
  -[RPSession showPasswordHandler]
  -[RPSession setShowPasswordHandler:]
  -[RPSession hidePasswordHandler]
  -[RPSession setHidePasswordHandler:]
  -[RPSession promptForPasswordHandler]
  -[RPSession setPromptForPasswordHandler:]
  -[RPSession registerEventID:options:handler:]
  -[RPSession deregisterEventID:]
  -[RPSession sendEventID:event:options:completion:]
  -[RPSession sendRequestID:request:options:responseHandler:]
  -[RPSession cnx]
  -[RPSession setCnx:]


RPSiriAudioSession : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  NSString *sessionID

  // class methods
  +[RPSiriAudioSession supportsSecureCoding]

  // instance methods
  -[RPSiriAudioSession init]
  -[RPSiriAudioSession dealloc]
  -[RPSiriAudioSession invalidate]
  -[RPSiriAudioSession encodeWithCoder:]
  -[RPSiriAudioSession initWithCoder:]
  -[RPSiriAudioSession .cxx_destruct]
  -[RPSiriAudioSession setInvalidationHandler:]
  -[RPSiriAudioSession setInterruptionHandler:]
  -[RPSiriAudioSession interruptionHandler]
  -[RPSiriAudioSession invalidationHandler]
  -[RPSiriAudioSession dispatchQueue]
  -[RPSiriAudioSession setLabel:]
  -[RPSiriAudioSession label]
  -[RPSiriAudioSession setDispatchQueue:]
  -[RPSiriAudioSession activateWithCompletion:]
  -[RPSiriAudioSession sessionID]
  -[RPSiriAudioSession _invalidated]
  -[RPSiriAudioSession _interrupted]
  -[RPSiriAudioSession setSessionID:]
  -[RPSiriAudioSession _ensureXPCStarted]
  -[RPSiriAudioSession _activateWithCompletion:reactivate:]
  -[RPSiriAudioSession receivedSiriAudioEvent:]


RPSiriSession : NSObject /usr/lib/libSystem.B.dylib <AVVoiceControllerRecordDelegate>
 @property  NSString *destinationID
 @property  <RPMessageable> *messenger
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[RPSiriSession init]
  -[RPSiriSession invalidate]
  -[RPSiriSession _invalidate]
  -[RPSiriSession .cxx_destruct]
  -[RPSiriSession activateWithCompletion:]
  -[RPSiriSession _invalidated]
  -[RPSiriSession _activateWithCompletion:]
  -[RPSiriSession _activate2]
  -[RPSiriSession voiceControllerDidStartRecording:successfully:error:]
  -[RPSiriSession voiceControllerDidStopRecording:forReason:]
  -[RPSiriSession voiceControllerDidDetectStartpoint:]
  -[RPSiriSession voiceControllerDidDetectEndpoint:ofType:atTime:]
  -[RPSiriSession voiceControllerEncoderErrorDidOccur:error:]
  -[RPSiriSession voiceControllerMediaServicesWereReset:]
  -[RPSiriSession voiceControllerRecordBufferAvailable:buffer:]
  -[RPSiriSession destinationID]
  -[RPSiriSession setDestinationID:]
  -[RPSiriSession messenger]
  -[RPSiriSession setMessenger:]
  -[RPSiriSession _activateCompletedWithError:]
  -[RPSiriSession voiceControllerSetupAndReturnError:]
  -[RPSiriSession voiceControllerTearDown]


RPStreamServer : NSObject /usr/lib/libSystem.B.dylib
 @property  @? invalidationHandler
 @property  <RPMessageable> *messenger
 @property  @? streamAcceptHandler
 @property  unsigned int streamFlags
 @property  @? streamPrepareHandlerEx
 @property  @? streamPrepareHandler

  // instance methods
  -[RPStreamServer init]
  -[RPStreamServer invalidate]
  -[RPStreamServer _invalidate]
  -[RPStreamServer .cxx_destruct]
  -[RPStreamServer setInvalidationHandler:]
  -[RPStreamServer invalidationHandler]
  -[RPStreamServer activateWithCompletion:]
  -[RPStreamServer _invalidated]
  -[RPStreamServer _activateWithCompletion:]
  -[RPStreamServer messenger]
  -[RPStreamServer setMessenger:]
  -[RPStreamServer _handleStartRequest:options:responseHandler:]
  -[RPStreamServer _handleStopRequest:options:responseHandler:]
  -[RPStreamServer streamFlags]
  -[RPStreamServer setStreamFlags:]
  -[RPStreamServer setStreamAcceptHandler:]
  -[RPStreamServer streamAcceptHandler]
  -[RPStreamServer streamPrepareHandlerEx]
  -[RPStreamServer setStreamPrepareHandlerEx:]
  -[RPStreamServer streamPrepareHandler]
  -[RPStreamServer setStreamPrepareHandler:]


RPStreamSession : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *destinationString
 @property  NSUUID *nwClientID
 @property  NSData *pskData
 @property  BOOL serverMode
 @property  @? streamAcceptHandler
 @property  NSData *streamKey
 @property  int streamSocket
 @property  unsigned long delegatedProcessUPID
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  int flowControlState
 @property  @? invalidationHandler
 @property  <RPMessageable> *messenger
 @property  @? receivedEventHandler
 @property  @? receivedRequestHandler
 @property  @? statusChangedHandler
 @property  unsigned long statusFlags
 @property  unsigned int streamFlags
 @property  NSString *streamID
 @property  int streamType
 @property  unsigned int trafficFlags
 @property  NSString *trafficSessionID

  // class methods
  +[RPStreamSession supportsSecureCoding]

  // instance methods
  -[RPStreamSession init]
  -[RPStreamSession dealloc]
  -[RPStreamSession invalidate]
  -[RPStreamSession _invalidate]
  -[RPStreamSession encodeWithCoder:]
  -[RPStreamSession initWithCoder:]
  -[RPStreamSession .cxx_destruct]
  -[RPStreamSession setInvalidationHandler:]
  -[RPStreamSession invalidationHandler]
  -[RPStreamSession dispatchQueue]
  -[RPStreamSession setDispatchQueue:]
  -[RPStreamSession activateWithCompletion:]
  -[RPStreamSession statusFlags]
  -[RPStreamSession _invalidated]
  -[RPStreamSession setTrafficFlags:]
  -[RPStreamSession trafficFlags]
  -[RPStreamSession statusChangedHandler]
  -[RPStreamSession setStatusChangedHandler:]
  -[RPStreamSession _updateTrafficRegistration]
  -[RPStreamSession destinationString]
  -[RPStreamSession setDestinationString:]
  -[RPStreamSession flowControlState]
  -[RPStreamSession streamID]
  -[RPStreamSession setStreamID:]
  -[RPStreamSession setReceivedRequestHandler:]
  -[RPStreamSession receivedRequestHandler]
  -[RPStreamSession serverMode]
  -[RPStreamSession setServerMode:]
  -[RPStreamSession prepareWithCompletion:]
  -[RPStreamSession sendEventID:event:options:completion:]
  -[RPStreamSession sendRequestID:request:options:responseHandler:]
  -[RPStreamSession pskData]
  -[RPStreamSession setPskData:]
  -[RPStreamSession receivedEventHandler]
  -[RPStreamSession setReceivedEventHandler:]
  -[RPStreamSession messenger]
  -[RPStreamSession setMessenger:]
  -[RPStreamSession setStreamType:]
  -[RPStreamSession streamFlags]
  -[RPStreamSession setStreamFlags:]
  -[RPStreamSession startServerConnectionWithCompletion:]
  -[RPStreamSession setStreamAcceptHandler:]
  -[RPStreamSession acceptedByServer]
  -[RPStreamSession activateForServerRequest:options:responseHandler:]
  -[RPStreamSession streamAcceptHandler]
  -[RPStreamSession _clientUDPSocketStartWithCompletion:]
  -[RPStreamSession _startServerConnectionAndReturnError:]
  -[RPStreamSession _clientRPConnectionStartWithCompletion:]
  -[RPStreamSession _clientRPConnectionPrepareWithCompletion:]
  -[RPStreamSession _clientUDPNWPathStartWithCompletion:]
  -[RPStreamSession _serverUDPSocketStartRequest:options:responseHandler:]
  -[RPStreamSession _serverRPConnectionStartRequest:options:responseHandler:]
  -[RPStreamSession _serverUDPNWPathStartRequest:options:responseHandler:]
  -[RPStreamSession _lowLatencySelfAddressString:]
  -[RPStreamSession _clientUDPNWPathNextWithEndpoint:nwInterface:selfMACData:usb:completion:]
  -[RPStreamSession _clientUDPNWPathStartResponse:options:localEndpoint:nwInterface:selfIPString:usb:completion:]
  -[RPStreamSession _updateTrafficRegistrationForIP:]
  -[RPStreamSession _serverUDPNWPathNextWithEndpoint:nwInterface:selfMACData:peerIP:peerMACData:usb:responseHandler:]
  -[RPStreamSession _clientUDPSocketStartResponse:options:completion:]
  -[RPStreamSession _clientRPConnectionPrepareResponse:options:completion:]
  -[RPStreamSession _serverRPConnectionHandleConnectionAccepted:]
  -[RPStreamSession _serverRPConnectionHandleConnectionStarted:]
  -[RPStreamSession _getSockAddrInterfaceType:]
  -[RPStreamSession delegatedProcessUPID]
  -[RPStreamSession setDelegatedProcessUPID:]
  -[RPStreamSession nwClientID]
  -[RPStreamSession setNwClientID:]
  -[RPStreamSession streamKey]
  -[RPStreamSession setStreamKey:]
  -[RPStreamSession streamSocket]
  -[RPStreamSession setStreamSocket:]
  -[RPStreamSession streamType]
  -[RPStreamSession trafficSessionID]
  -[RPStreamSession setTrafficSessionID:]


RPTextInputSession : NSObject /usr/lib/libSystem.B.dylib <RTIInputSystemPayloadDelegate>
 @property  <RPMessageable> *messenger
 @property  RTIInputSystemSourceSession *rtiSession
 @property  @? rtiUpdatedHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[RPTextInputSession init]
  -[RPTextInputSession invalidate]
  -[RPTextInputSession _invalidate]
  -[RPTextInputSession .cxx_destruct]
  -[RPTextInputSession activateWithCompletion:]
  -[RPTextInputSession _activateWithCompletion:]
  -[RPTextInputSession handleTextActionPayload:]
  -[RPTextInputSession messenger]
  -[RPTextInputSession setMessenger:]
  -[RPTextInputSession _handleTextInputStarted:]
  -[RPTextInputSession _handleTextInputStopped:]
  -[RPTextInputSession _handleTextInputChange:started:]
  -[RPTextInputSession rtiSession]
  -[RPTextInputSession rtiUpdatedHandler]
  -[RPTextInputSession setRtiUpdatedHandler:]


CUKeychainItem(RPIdentity)
	// instance methods
	-[CUKeychainItem(RPIdentity) updateWithRPIdentity:revisionUpdate:error:]
	-[CUKeychainItem(RPIdentity) updateWithRPIdentity:error:]

01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBLEConnection 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBonjourAdvertiser 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBonjourBrowser 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUCoalescer 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUKeychainItem 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUMobileDevice 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUMobileDeviceDiscovery 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUMobileDeviceSession 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUPairedPeer 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUPairingSession 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUPairingStream 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CURangingMeasurement 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUReadRequest 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUTCPConnection 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUTCPServer 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUWiFiManager 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUWiFiScanner 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUWiFiTrafficPeer 
01 00 0300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUWriteRequest 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCCoder 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
