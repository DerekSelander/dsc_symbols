|| __DATA.__objc_data _OBJC_CLASS_$_NPTCellularCollector
|| __DATA.__objc_data _OBJC_CLASS_$_NPTTaskMetrics
|| __DATA.__objc_data _OBJC_CLASS_$_Ping
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTCellularCollector
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTTaskMetrics
|| __DATA.__objc_data _OBJC_METACLASS_$_Ping
|| __DATA_CONST.__const _BASE_URL
|| __DATA_CONST.__const _GET_URL
|| __DATA_CONST.__const _GET_URL_FORMAT_STRING
|| __DATA_CONST.__const _PING_URL
|| __DATA_CONST.__const _POST_URL
|| __DATA_CONST.__const _POST_URL_EXTENSION
|| __DATA_CONST.__const _TEMP_FILE_NAME
|| __DATA_CONST.__const _UNIQUE_QUERY_PARAM
|| __DATA_CONST.__const _USER_AGENT_FORMAT_STRING
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTDownload
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTFileSizeConverter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTMetadataCollector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTMetricResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTPerformanceTest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTPerformanceTestConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTPing
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTPingResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTResults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTSpeedMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTUpload
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SimplePing
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTDownload
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTFileSizeConverter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTMetadataCollector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTMetricResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTPerformanceTest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTPerformanceTestConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTPing
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTPingResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTResults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTSpeedMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTUpload
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SimplePing
|| __TEXT.__const _NPTKitVersionNumber
|| __TEXT.__const _NPTKitVersionString
|| __TEXT.__text _dataBearerTechnologyToString
|| __TEXT.__text _indicatorToString
|| __TEXT.__text _wirelessAccessTechnologyToString
__ CFNetwork: _CFHostCreateWithName
__ CFNetwork: _CFHostGetAddressing
__ CFNetwork: _CFHostScheduleWithRunLoop
__ CFNetwork: _CFHostSetClient
__ CFNetwork: _CFHostStartInfoResolution
__ CFNetwork: _CFHostUnscheduleFromRunLoop
__ CFNetwork: _OBJC_CLASS_$_NSMutableURLRequest
__ CFNetwork: _OBJC_CLASS_$_NSURLSession
__ CFNetwork: _OBJC_CLASS_$_NSURLSessionConfiguration
__ CFNetwork: _OBJC_CLASS_$_NSURLSessionTaskTransactionMetrics
__ CFNetwork: _kCFErrorDomainCFNetwork
__ CFNetwork: _kCFGetAddrInfoFailureKey
__ CFNetwork: _kCFStreamErrorDomainNetDB
__ CFNetwork: _kCFURLConnectionSuspensionThreshold
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFSocketCreateRunLoopSource
__ CoreFoundation: _CFSocketCreateWithNative
__ CoreFoundation: _CFSocketGetNative
__ CoreFoundation: _CFSocketGetSocketFlags
__ CoreFoundation: _CFSocketInvalidate
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreTelephony: _OBJC_CLASS_$_CTDataStatus
__ CoreTelephony: _OBJC_CLASS_$_CTServiceDescriptor
__ CoreTelephony: _OBJC_CLASS_$_CTTelephonyNetworkInfo
__ CoreTelephony: _OBJC_CLASS_$_CTXPCServiceSubscriptionContext
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreTelephony: _kCTCellMonitorCellType
__ CoreTelephony: _kCTCellMonitorCellTypeServing
__ CoreWiFi: _OBJC_CLASS_$_CWFInterface
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ IOKit: _IOPSDrawingUnlimitedPower
__ IOKit: _IOPSGetPercentRemaining
__ Network: _OBJC_CLASS_$_NWParameters
__ Network: _OBJC_CLASS_$_NWPathEvaluator
__ Security: _SecRandomCopyBytes
__ Security: _kSecRandomDefault
__ WiFiVelocity: _OBJC_CLASS_$_W5AWDLStatus
__ WiFiVelocity: _OBJC_CLASS_$_W5BluetoothStatus
__ WiFiVelocity: _OBJC_CLASS_$_W5Client
__ WiFiVelocity: _OBJC_CLASS_$_W5NetworkStatus
__ WiFiVelocity: _OBJC_CLASS_$_W5PowerStatus
__ WiFiVelocity: _OBJC_CLASS_$_W5WiFiStatus
__ WiFiVelocity: _W5DescriptionForAWDLScheduleState
__ WiFiVelocity: _W5DescriptionForAWDLSyncChannelSequence
__ WiFiVelocity: _W5DescriptionForAWDLSyncState
__ WiFiVelocity: _W5DescriptionForBTCMode
__ WiFiVelocity: _W5DescriptionForBatteryWarningLevel
__ WiFiVelocity: _W5DescriptionForChainAck
__ WiFiVelocity: _W5DescriptionForDesense
__ WiFiVelocity: _W5DescriptionForEAPOLControlMode
__ WiFiVelocity: _W5DescriptionForEAPOLSupplicantState
__ WiFiVelocity: _W5DescriptionForOpMode
__ WiFiVelocity: _W5DescriptionForPHYMode
__ WiFiVelocity: _W5DescriptionForPower
__ WiFiVelocity: _W5DescriptionForPowerSourceType
__ WiFiVelocity: _W5DescriptionForPowerStateCaps
__ WiFiVelocity: _W5DescriptionForSecurity
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_source_testcancel
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _recvfrom
__ libSystem.B.dylib: _sendto
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: dyld_stub_binder
__ libnetwork.dylib: _nw_activity_activate
__ libnetwork.dylib: _nw_activity_complete_with_reason
__ libnetwork.dylib: _nw_activity_create
__ libnetwork.dylib: _nw_activity_set_parent_activity
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
NPTTaskMetrics : NSObject /usr/lib/libnetwork.dylib
 @property  NSURLSessionDataTask *task
 @property  NPTMetricResult *results
 @property  NSURLSessionTaskMetrics *taskMetrics

  // instance methods
  -[NPTTaskMetrics taskMetrics]
  -[NPTTaskMetrics setResults:]
  -[NPTTaskMetrics init]
  -[NPTTaskMetrics results]
  -[NPTTaskMetrics setTaskMetrics:]
  -[NPTTaskMetrics .cxx_destruct]
  -[NPTTaskMetrics setTask:]
  -[NPTTaskMetrics task]


Ping : NSObject /usr/lib/libnetwork.dylib <NSSecureCoding, NSCopying>
 @property  NSDate *startTime
 @property  NSDate *endTime
 @property  double latency
 @property  BOOL wasSuccessful
 @property  NSDictionary *dictionary

  // class methods
  +[Ping supportsSecureCoding]

  // instance methods
  -[Ping endTime]
  -[Ping latency]
  -[Ping copyWithZone:]
  -[Ping setEndTime:]
  -[Ping setStartTime:]
  -[Ping init]
  -[Ping .cxx_destruct]
  -[Ping dictionary]
  -[Ping encodeWithCoder:]
  -[Ping wasSuccessful]
  -[Ping setWasSuccessful:]
  -[Ping initWithCoder:]
  -[Ping startTime]


NPTCellularCollector : NSObject /usr/lib/libnetwork.dylib <CoreTelephonyClientRegistrationDelegate, CoreTelephonyClientDataDelegate>
 @property  CoreTelephonyClient *ctClient
 @property  CTXPCServiceSubscriptionContext *context
 @property  NSNumber *slotID
 @property  CTDataStatus *dataStatus
 @property  NSMutableArray *mutableCellChanges
 @property  NSMutableArray *mutableDataStatusChanges
 @property  NSMutableDictionary *servingCellInfo
 @property  NSMutableDictionary *mutableMetadata
 @property  NSDictionary *metadata
 @property  NSArray *cellChanges
 @property  NSArray *dataStatusChanges
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NPTCellularCollector getPreferredDataSlot]
  +[NPTCellularCollector cellularCollectorForPreferredDataSlot]

  // instance methods
  -[NPTCellularCollector slotID]
  -[NPTCellularCollector context]
  -[NPTCellularCollector setMetadata:]
  -[NPTCellularCollector .cxx_destruct]
  -[NPTCellularCollector cellChanged:cell:]
  -[NPTCellularCollector dataStatus:dataStatusInfo:]
  -[NPTCellularCollector dataStatus]
  -[NPTCellularCollector setContext:]
  -[NPTCellularCollector setDataStatus:]
  -[NPTCellularCollector setSlotID:]
  -[NPTCellularCollector metadata]
  -[NPTCellularCollector ctClient]
  -[NPTCellularCollector setCtClient:]
  -[NPTCellularCollector initWithSlotID:]
  -[NPTCellularCollector mutableMetadata]
  -[NPTCellularCollector dualSimStatus]
  -[NPTCellularCollector getServingCellInfoForSlot:]
  -[NPTCellularCollector signalStrengthMeasurements]
  -[NPTCellularCollector setMutableMetadata:]
  -[NPTCellularCollector mutableDataStatusChanges]
  -[NPTCellularCollector servingCellInfo]
  -[NPTCellularCollector mutableCellChanges]
  -[NPTCellularCollector refreshMetadataWithCompletion:]
  -[NPTCellularCollector cellChanges]
  -[NPTCellularCollector dataStatusChanges]
  -[NPTCellularCollector setCellChanges:]
  -[NPTCellularCollector setDataStatusChanges:]
  -[NPTCellularCollector setMutableCellChanges:]
  -[NPTCellularCollector setMutableDataStatusChanges:]
  -[NPTCellularCollector setServingCellInfo:]


NPTUpload : NSObject /usr/lib/libnetwork.dylib <NSSecureCoding, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDelegate, NSCopying>
 @property  @? completion
 @property  id delegate
 @property  NPTMetricResult *results
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NPTUpload supportsSecureCoding]

  // instance methods
  -[NPTUpload copyWithZone:]
  -[NPTUpload setResults:]
  -[NPTUpload URLSession:task:didFinishCollectingMetrics:]
  -[NPTUpload completion]
  -[NPTUpload results]
  -[NPTUpload setCompletion:]
  -[NPTUpload URLSession:didBecomeInvalidWithError:]
  -[NPTUpload .cxx_destruct]
  -[NPTUpload URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]
  -[NPTUpload URLSession:task:didCompleteWithError:]
  -[NPTUpload encodeWithCoder:]
  -[NPTUpload cancel]
  -[NPTUpload setupTimer]
  -[NPTUpload setDelegate:]
  -[NPTUpload delegate]
  -[NPTUpload initWithCoder:]
  -[NPTUpload cleanUp]
  -[NPTUpload createRandomDataOfSize:]
  -[NPTUpload createHTTPBodyWithBoundary:usingData:withMimeType:withFileName:]
  -[NPTUpload setupNewUploadTask:suspensionThresholdEnum:]
  -[NPTUpload startTasks]
  -[NPTUpload cancelDispatchTimer]
  -[NPTUpload realTimeSpeedMetricOverall]
  -[NPTUpload checkAndReturnSpeedStablized:]
  -[NPTUpload isTimerCancelledError:]
  -[NPTUpload inTimedMode]
  -[NPTUpload determineSuspensionThreshold]
  -[NPTUpload kickOffNewUpload:suspensionThresholdEnum:]
  -[NPTUpload isLastTask]
  -[NPTUpload aggregateResults]
  -[NPTUpload minNonZeroValue:comparisonValue:]
  -[NPTUpload initWithNetworkActivityParent:concurrentStreams:timedUploadLength:endWhenStable:]
  -[NPTUpload startUploadWithSize:toURL:overInterfaceType:completion:]
  -[NPTUpload createTempFileWithData:named:]
  -[NPTUpload removeTempFileNamed:]
  -[NPTUpload finishedAllTasks]


NPTResults : NSObject /usr/lib/libnetwork.dylib <NSSecureCoding, NSCopying>
 @property  NPTMetricResult *downloadResults
 @property  NPTMetricResult *uploadResults
 @property  NPTPingResult *pingResults
 @property  NSDictionary *metadata
 @property  NSDictionary *asDictionary

  // class methods
  +[NPTResults supportsSecureCoding]

  // instance methods
  -[NPTResults copyWithZone:]
  -[NPTResults setMetadata:]
  -[NPTResults .cxx_destruct]
  -[NPTResults asDictionary]
  -[NPTResults encodeWithCoder:]
  -[NPTResults metadata]
  -[NPTResults initWithCoder:]
  -[NPTResults downloadResults]
  -[NPTResults uploadResults]
  -[NPTResults pingResults]
  -[NPTResults setDownloadResults:]
  -[NPTResults setUploadResults:]
  -[NPTResults setPingResults:]


NPTPerformanceTest : NSObject /usr/lib/libnetwork.dylib <NPTPingDelegate, NPTDownloadDelegate, NPTUploadDelegate, NSSecureCoding, NSCopying>
 @property  NPTResults *results
 @property  id delegate
 @property  NPTPerformanceTestConfiguration *configuration
 @property  NSDictionary *dictionary
 @property  NSDictionary *metadata
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NPTPerformanceTest supportsSecureCoding]
  +[NPTPerformanceTest performanceTestWithConfiguration:]
  +[NPTPerformanceTest performanceTestWithDefaultConfiguration]

  // instance methods
  -[NPTPerformanceTest copyWithZone:]
  -[NPTPerformanceTest setResults:]
  -[NPTPerformanceTest save]
  -[NPTPerformanceTest init]
  -[NPTPerformanceTest results]
  -[NPTPerformanceTest .cxx_destruct]
  -[NPTPerformanceTest dictionary]
  -[NPTPerformanceTest encodeWithCoder:]
  -[NPTPerformanceTest configuration]
  -[NPTPerformanceTest initWithConfiguration:]
  -[NPTPerformanceTest setDelegate:]
  -[NPTPerformanceTest metadata]
  -[NPTPerformanceTest delegate]
  -[NPTPerformanceTest initWithCoder:]
  -[NPTPerformanceTest setConfiguration:]
  -[NPTPerformanceTest startDownloadWithCompletion:]
  -[NPTPerformanceTest cancelAllNetworking]
  -[NPTPerformanceTest uploadWillStart]
  -[NPTPerformanceTest upload:didFinishWithError:]
  -[NPTPerformanceTest upload:didReceiveSpeedMetric:]
  -[NPTPerformanceTest upload:didFinishWithResults:]
  -[NPTPerformanceTest startUploadWithCompletion:]
  -[NPTPerformanceTest startPingWithCompletion:]
  -[NPTPerformanceTest getFlattenedDictionary]
  -[NPTPerformanceTest timestampMasked]
  -[NPTPerformanceTest convertDateToISO8601String:]
  -[NPTPerformanceTest timestampMaskedString]
  -[NPTPerformanceTest pingWillStartPinging]
  -[NPTPerformanceTest pingDidFinishWithResults:]
  -[NPTPerformanceTest pingDidFinishWithError:]
  -[NPTPerformanceTest downloadWillStart]
  -[NPTPerformanceTest download:didReceiveSpeedMetric:]
  -[NPTPerformanceTest download:didFinishWithResults:]
  -[NPTPerformanceTest download:didFinishWithError:]
  -[NPTPerformanceTest startTestWithCompletion:]


NPTSpeedMetric : NSObject /usr/lib/libnetwork.dylib <NSCopying>
 @property  NSDate *pointInTime
 @property  double timeSinceStart
 @property  long long bytesTransferred
 @property  long long totalBytesExpected

  // instance methods
  -[NPTSpeedMetric copyWithZone:]
  -[NPTSpeedMetric setTimeSinceStart:]
  -[NPTSpeedMetric timeSinceStart]
  -[NPTSpeedMetric speed]
  -[NPTSpeedMetric .cxx_destruct]
  -[NPTSpeedMetric setBytesTransferred:]
  -[NPTSpeedMetric bytesTransferred]
  -[NPTSpeedMetric initWithPointInTime:timeSinceStart:bytesTransferred:totalBytesExpected:]
  -[NPTSpeedMetric pointInTime]
  -[NPTSpeedMetric setPointInTime:]
  -[NPTSpeedMetric totalBytesExpected]
  -[NPTSpeedMetric setTotalBytesExpected:]


NPTDownload : NSObject /usr/lib/libnetwork.dylib <NSSecureCoding, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDelegate, NSCopying>
 @property  @? completion
 @property  id delegate
 @property  NPTMetricResult *results
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NPTDownload supportsSecureCoding]

  // instance methods
  -[NPTDownload copyWithZone:]
  -[NPTDownload setResults:]
  -[NPTDownload URLSession:dataTask:didReceiveData:]
  -[NPTDownload URLSession:task:didFinishCollectingMetrics:]
  -[NPTDownload completion]
  -[NPTDownload results]
  -[NPTDownload setCompletion:]
  -[NPTDownload .cxx_destruct]
  -[NPTDownload URLSession:task:didCompleteWithError:]
  -[NPTDownload encodeWithCoder:]
  -[NPTDownload cancel]
  -[NPTDownload setupTimer]
  -[NPTDownload setDelegate:]
  -[NPTDownload delegate]
  -[NPTDownload initWithCoder:]
  -[NPTDownload startTasks]
  -[NPTDownload cancelDispatchTimer]
  -[NPTDownload realTimeSpeedMetricOverall]
  -[NPTDownload checkAndReturnSpeedStablized:]
  -[NPTDownload isTimerCancelledError:]
  -[NPTDownload inTimedMode]
  -[NPTDownload isLastTask]
  -[NPTDownload aggregateResults]
  -[NPTDownload minNonZeroValue:comparisonValue:]
  -[NPTDownload finishedAllTasks]
  -[NPTDownload initWithNetworkActivityParent:concurrentStreams:timedDownloadLength:endWhenStable:]
  -[NPTDownload startDownloadUsingURL:overInterfaceType:completion:]
  -[NPTDownload setupNewDownloadTask]
  -[NPTDownload kickOffNewDownload]
  -[NPTDownload realTimeSpeedMetric:]
  -[NPTDownload overAllResultByTask:]


NPTPingResult : NSObject /usr/lib/libnetwork.dylib <NSSecureCoding, NSCopying>
 @property  NSArray *pings
 @property  double minLatency
 @property  double maxLatency
 @property  double meanLatency
 @property  double standardDeviation
 @property  double percentLost
 @property  NSString *address
 @property  NSDictionary *asDictionary

  // class methods
  +[NPTPingResult supportsSecureCoding]

  // instance methods
  -[NPTPingResult copyWithZone:]
  -[NPTPingResult setAddress:]
  -[NPTPingResult pings]
  -[NPTPingResult address]
  -[NPTPingResult standardDeviation]
  -[NPTPingResult .cxx_destruct]
  -[NPTPingResult asDictionary]
  -[NPTPingResult encodeWithCoder:]
  -[NPTPingResult setStandardDeviation:]
  -[NPTPingResult initWithCoder:]
  -[NPTPingResult setPings:]
  -[NPTPingResult populateFields]
  -[NPTPingResult setMinLatency:]
  -[NPTPingResult minLatency]
  -[NPTPingResult maxLatency]
  -[NPTPingResult setMaxLatency:]
  -[NPTPingResult setMeanLatency:]
  -[NPTPingResult setPercentLost:]
  -[NPTPingResult calculateStandardDeviation]
  -[NPTPingResult meanLatency]
  -[NPTPingResult percentLost]
  -[NPTPingResult initWithPings:usingAddress:]


NPTLogger : NSObject /usr/lib/libnetwork.dylib
  // class methods
  +[NPTLogger network]
  +[NPTLogger cellular]
  +[NPTLogger fileSystem]
  +[NPTLogger wifiVelocity]


NPTPerformanceTestConfiguration : NSObject /usr/lib/libnetwork.dylib <NSCopying>
 @property  NSString *interfaceName
 @property  BOOL forceWiFi
 @property  BOOL useSecureConnection
 @property  int downloadSize
 @property  int uploadSize
 @property  unsigned long pingCount
 @property  int pingAddressStyle
 @property  BOOL collectMetadata
 @property  long long concurrentStreams
 @property  NSURL *downloadURL
 @property  NSURL *uploadURL
 @property  NSString *pingHost
 @property  int interfaceType
 @property  NSString *clientName
 @property  NSString *uuid
 @property  unsigned long testDuration
 @property  BOOL endWhenStable

  // class methods
  +[NPTPerformanceTestConfiguration defaultConfiguration]
  +[NPTPerformanceTestConfiguration evaluateInterfaceName:]
  +[NPTPerformanceTestConfiguration interfaceServiceName:]
  +[NPTPerformanceTestConfiguration defaultConfigurationWiFi]
  +[NPTPerformanceTestConfiguration defaultConfigurationWiredEthernet]
  +[NPTPerformanceTestConfiguration defaultConfigurationCellular]

  // instance methods
  -[NPTPerformanceTestConfiguration copyWithZone:]
  -[NPTPerformanceTestConfiguration init]
  -[NPTPerformanceTestConfiguration interfaceType]
  -[NPTPerformanceTestConfiguration clientName]
  -[NPTPerformanceTestConfiguration downloadURL]
  -[NPTPerformanceTestConfiguration uuid]
  -[NPTPerformanceTestConfiguration .cxx_destruct]
  -[NPTPerformanceTestConfiguration downloadSize]
  -[NPTPerformanceTestConfiguration uploadURL]
  -[NPTPerformanceTestConfiguration setUuid:]
  -[NPTPerformanceTestConfiguration setUploadURL:]
  -[NPTPerformanceTestConfiguration testDuration]
  -[NPTPerformanceTestConfiguration setDownloadSize:]
  -[NPTPerformanceTestConfiguration interfaceName]
  -[NPTPerformanceTestConfiguration setInterfaceName:]
  -[NPTPerformanceTestConfiguration setUploadSize:]
  -[NPTPerformanceTestConfiguration uploadSize]
  -[NPTPerformanceTestConfiguration setDownloadURL:]
  -[NPTPerformanceTestConfiguration setClientName:]
  -[NPTPerformanceTestConfiguration setInterfaceType:]
  -[NPTPerformanceTestConfiguration setPingCount:]
  -[NPTPerformanceTestConfiguration pingCount]
  -[NPTPerformanceTestConfiguration setConcurrentStreams:]
  -[NPTPerformanceTestConfiguration concurrentStreams]
  -[NPTPerformanceTestConfiguration endWhenStable]
  -[NPTPerformanceTestConfiguration pingHost]
  -[NPTPerformanceTestConfiguration collectMetadata]
  -[NPTPerformanceTestConfiguration pingAddressStyle]
  -[NPTPerformanceTestConfiguration setUseSecureConnection:]
  -[NPTPerformanceTestConfiguration setPingAddressStyle:]
  -[NPTPerformanceTestConfiguration setCollectMetadata:]
  -[NPTPerformanceTestConfiguration setTestDuration:]
  -[NPTPerformanceTestConfiguration cdnUploadURL]
  -[NPTPerformanceTestConfiguration useSecureConnection]
  -[NPTPerformanceTestConfiguration cdnDownloadURL]
  -[NPTPerformanceTestConfiguration setPingHost:]
  -[NPTPerformanceTestConfiguration customURLSet]
  -[NPTPerformanceTestConfiguration forceWiFi]
  -[NPTPerformanceTestConfiguration setForceWiFi:]
  -[NPTPerformanceTestConfiguration setEndWhenStable:]


NPTMetricResult : NSObject /usr/lib/libnetwork.dylib <NSCopying, NSSecureCoding>
 @property  NSString *cdnpop
 @property  NSString *server
 @property  NSString *cdnuuid
 @property  unsigned long fileSize
 @property  NSString *fetchDate
 @property  NSString *protocolName
 @property  NSString *isReusedConnection
 @property  NSString *isProxyConnection
 @property  double domainLookupTime
 @property  double connectionTime
 @property  double secureConnectionTime
 @property  double requestTime
 @property  double requestToResponseTime
 @property  double responseTime
 @property  double speed
 @property  double stableSpeed
 @property  NSString *isCellular
 @property  NSString *isExpensive
 @property  NSString *isConstrained
 @property  NSString *isMultipath
 @property  NSString *localAddress
 @property  NSString *remoteAddress
 @property  NSNumber *negotiatedTLSCipherSuite
 @property  NSNumber *negotiatedTLSProtocolVersion
 @property  NSNumber *localPort
 @property  NSNumber *remotePort
 @property  NSString *interfaceServiceName
 @property  NSString *interfaceName
 @property  NSNumber *concurrentStreams
 @property  NSDictionary *asDictionary

  // class methods
  +[NPTMetricResult supportsSecureCoding]

  // instance methods
  -[NPTMetricResult requestTime]
  -[NPTMetricResult copyWithZone:]
  -[NPTMetricResult localPort]
  -[NPTMetricResult setSpeed:]
  -[NPTMetricResult setProtocolName:]
  -[NPTMetricResult localAddress]
  -[NPTMetricResult remotePort]
  -[NPTMetricResult setRequestTime:]
  -[NPTMetricResult setRemoteAddress:]
  -[NPTMetricResult speed]
  -[NPTMetricResult setLocalAddress:]
  -[NPTMetricResult negotiatedTLSProtocolVersion]
  -[NPTMetricResult isReusedConnection]
  -[NPTMetricResult .cxx_destruct]
  -[NPTMetricResult remoteAddress]
  -[NPTMetricResult asDictionary]
  -[NPTMetricResult isProxyConnection]
  -[NPTMetricResult isConstrained]
  -[NPTMetricResult negotiatedTLSCipherSuite]
  -[NPTMetricResult server]
  -[NPTMetricResult encodeWithCoder:]
  -[NPTMetricResult fileSize]
  -[NPTMetricResult cdnpop]
  -[NPTMetricResult interfaceName]
  -[NPTMetricResult setInterfaceName:]
  -[NPTMetricResult setServer:]
  -[NPTMetricResult setFileSize:]
  -[NPTMetricResult fetchDate]
  -[NPTMetricResult isExpensive]
  -[NPTMetricResult isEqual:]
  -[NPTMetricResult cdnuuid]
  -[NPTMetricResult setIsMultipath:]
  -[NPTMetricResult isCellular]
  -[NPTMetricResult isMultipath]
  -[NPTMetricResult setFetchDate:]
  -[NPTMetricResult protocolName]
  -[NPTMetricResult initWithCoder:]
  -[NPTMetricResult responseTime]
  -[NPTMetricResult setResponseTime:]
  -[NPTMetricResult connectionTime]
  -[NPTMetricResult setConnectionTime:]
  -[NPTMetricResult secureConnectionTime]
  -[NPTMetricResult populateWithMetrics:]
  -[NPTMetricResult populateWithURLResponse:]
  -[NPTMetricResult setConcurrentStreams:]
  -[NPTMetricResult domainLookupTime]
  -[NPTMetricResult setDomainLookupTime:]
  -[NPTMetricResult setSecureConnectionTime:]
  -[NPTMetricResult requestToResponseTime]
  -[NPTMetricResult setRequestToResponseTime:]
  -[NPTMetricResult setCdnpop:]
  -[NPTMetricResult setStableSpeed:]
  -[NPTMetricResult interfaceServiceName]
  -[NPTMetricResult concurrentStreams]
  -[NPTMetricResult stableSpeed]
  -[NPTMetricResult setIsReusedConnection:]
  -[NPTMetricResult setIsProxyConnection:]
  -[NPTMetricResult setCdnuuid:]
  -[NPTMetricResult setIsCellular:]
  -[NPTMetricResult setIsConstrained:]
  -[NPTMetricResult setIsExpensive:]
  -[NPTMetricResult setLocalPort:]
  -[NPTMetricResult setRemotePort:]
  -[NPTMetricResult setNegotiatedTLSCipherSuite:]
  -[NPTMetricResult setNegotiatedTLSProtocolVersion:]
  -[NPTMetricResult setInterfaceServiceName:]
  -[NPTMetricResult timeIntervalSinceDateWithLogging:startDate:nameToLog:]
  -[NPTMetricResult isEqualToMetricResult:]


NPTPing : NSObject /usr/lib/libnetwork.dylib <NSSecureCoding, SimplePingDelegate, NSCopying>
 @property  @? completion
 @property  id delegate
 @property  NPTPingResult *results
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NPTPing supportsSecureCoding]

  // instance methods
  -[NPTPing copyWithZone:]
  -[NPTPing setResults:]
  -[NPTPing completion]
  -[NPTPing results]
  -[NPTPing setCompletion:]
  -[NPTPing .cxx_destruct]
  -[NPTPing encodeWithCoder:]
  -[NPTPing stop]
  -[NPTPing cancel]
  -[NPTPing setDelegate:]
  -[NPTPing sendPing]
  -[NPTPing delegate]
  -[NPTPing initWithCoder:]
  -[NPTPing initWithNetworkActivityParent:]
  -[NPTPing initWithNetworkActivityParent:pingTarget:]
  -[NPTPing startWithNumberOfPings:forcingIPv4:forcingIPv6:completion:]
  -[NPTPing simplePing:didStartWithAddress:]
  -[NPTPing simplePing:didFailWithError:]
  -[NPTPing simplePing:didSendPacket:sequenceNumber:]
  -[NPTPing simplePing:didTimeOut:sequenceNumber:error:]
  -[NPTPing simplePing:didFailToSendPacket:sequenceNumber:error:]
  -[NPTPing simplePing:didReceivePingResponsePacket:sequenceNumber:]
  -[NPTPing simplePing:didReceiveUnexpectedPacket:]
  -[NPTPing startWithNumberOfPings:forcingIPv4:forcingIPv6:]


NPTFileSizeConverter : NSObject /usr/lib/libnetwork.dylib
  // class methods
  +[NPTFileSizeConverter getFileSizeInBytes:]
  +[NPTFileSizeConverter getFileSizeAsString:]
  +[NPTFileSizeConverter fileSizeFromInt:]


SimplePing : NSObject /usr/lib/libnetwork.dylib <NSCopying>
 @property  NSData *hostAddress
 @property  unsigned short nextSequenceNumber
 @property  BOOL nextSequenceNumberHasWrapped
 @property  ^{__CFHost=} host
 @property  ^{__CFSocket=} socket
 @property  NSString *hostName
 @property  <SimplePingDelegate> *delegate
 @property  long long addressStyle
 @property  unsigned char hostAddressFamily
 @property  unsigned short identifier

  // class methods
  +[SimplePing icmpHeaderOffsetInIPv4Packet:]

  // instance methods
  -[SimplePing host]
  -[SimplePing setHost:]
  -[SimplePing copyWithZone:]
  -[SimplePing hostName]
  -[SimplePing readData]
  -[SimplePing nextSequenceNumber]
  -[SimplePing socket]
  -[SimplePing dealloc]
  -[SimplePing .cxx_destruct]
  -[SimplePing identifier]
  -[SimplePing stop]
  -[SimplePing didFailWithError:]
  -[SimplePing setDelegate:]
  -[SimplePing delegate]
  -[SimplePing setSocket:]
  -[SimplePing start]
  -[SimplePing sendPingWithData:]
  -[SimplePing initWithHostName:]
  -[SimplePing setAddressStyle:]
  -[SimplePing hostAddress]
  -[SimplePing timeOutHandler:sequenceNumber:]
  -[SimplePing hostAddressFamily]
  -[SimplePing pingPacketWithType:payload:requiresChecksum:]
  -[SimplePing setupTimer:currentSequenceNumber:]
  -[SimplePing setNextSequenceNumber:]
  -[SimplePing setNextSequenceNumberHasWrapped:]
  -[SimplePing nextSequenceNumberHasWrapped]
  -[SimplePing validateSequenceNumber:]
  -[SimplePing validatePing4ResponsePacket:sequenceNumber:]
  -[SimplePing validatePing6ResponsePacket:sequenceNumber:]
  -[SimplePing validatePingResponsePacket:sequenceNumber:]
  -[SimplePing addressStyle]
  -[SimplePing setHostAddress:]
  -[SimplePing stopHostResolution]
  -[SimplePing startWithHostAddress]
  -[SimplePing didFailWithHostStreamError:]
  -[SimplePing stopSocket]
  -[SimplePing hostResolutionDone]


NPTMetadataCollector : NSObject /usr/lib/libnetwork.dylib
  // class methods
  +[NPTMetadataCollector fetch]
  +[NPTMetadataCollector fetchDeviceData]
  +[NPTMetadataCollector fetchCellularData]


W5NetworkStatus(Strings)
	// instance methods
	-[W5NetworkStatus(Strings) dictionary]
	-[W5NetworkStatus(Strings) isAppleReachableBool]

W5BluetoothStatus(Strings)
	// instance methods
	-[W5BluetoothStatus(Strings) dictionary]

CTDataStatus(Strings)
	// instance methods
	-[CTDataStatus(Strings) dictionary]
	-[CTDataStatus(Strings) indicatorString]
	-[CTDataStatus(Strings) indicatorOverrideString]
	-[CTDataStatus(Strings) radioTechnologyString]
	-[CTDataStatus(Strings) dataBearerTechnologyString]
	-[CTDataStatus(Strings) radioFrequencyString]
	-[CTDataStatus(Strings) radioCoverageString]

W5WiFiStatus(Strings)
	// instance methods
	-[W5WiFiStatus(Strings) dictionary]
	-[W5WiFiStatus(Strings) chainAckString]
	-[W5WiFiStatus(Strings) desenseString]
	-[W5WiFiStatus(Strings) powerString]

NSURLSessionTaskTransactionMetrics(InterfaceServiceName)
	// instance methods
	-[NSURLSessionTaskTransactionMetrics(InterfaceServiceName) interfaceName]
	-[NSURLSessionTaskTransactionMetrics(InterfaceServiceName) interfaceServiceName]

W5PowerStatus(Strings)
	// instance methods
	-[W5PowerStatus(Strings) dictionary]

W5AWDLStatus(Strings)
	// instance methods
	-[W5AWDLStatus(Strings) dictionary]
	-[W5AWDLStatus(Strings) awdlOpModeString]
	-[W5AWDLStatus(Strings) awdlScheduleString]
	-[W5AWDLStatus(Strings) awdlSyncChannelSequenceString]
	-[W5AWDLStatus(Strings) awdlMasterChannelString]
	-[W5AWDLStatus(Strings) awdlSecondaryMasterChannelString]
	-[W5AWDLStatus(Strings) awdlSyncStateString]
	-[W5AWDLStatus(Strings) awdlElectionParametersString]

01 00 0400 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTDataStatus 
01 00 0400 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTServiceDescriptor 
01 00 0400 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTTelephonyNetworkInfo 
01 00 0400 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTXPCServiceSubscriptionContext 
01 00 0600 /System/Library/PrivateFrameworks/CoreWiFi.framework/CoreWiFi: CWFInterface 
01 00 0400 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSMutableURLRequest 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0d00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 0500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLSession 
01 00 0a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLSessionConfiguration 
01 00 0a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLSessionTaskTransactionMetrics 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0300 /System/Library/Frameworks/Network.framework/Network: NWParameters 
01 00 0300 /System/Library/Frameworks/Network.framework/Network: NWPathEvaluator 
01 00 0b00 /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity: W5AWDLStatus 
01 00 0b00 /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity: W5BluetoothStatus 
01 00 0b00 /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity: W5Client 
01 00 0b00 /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity: W5NetworkStatus 
01 00 0b00 /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity: W5PowerStatus 
01 00 0b00 /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity: W5WiFiStatus 
