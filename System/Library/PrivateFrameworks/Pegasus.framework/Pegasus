|| __DATA.__objc_data _OBJC_CLASS_$_PGBackgroundPIPAuthorization
|| __DATA.__objc_data _OBJC_CLASS_$_PGCommand
|| __DATA.__objc_data _OBJC_CLASS_$_PGControlsViewModel
|| __DATA.__objc_data _OBJC_CLASS_$_PGControlsViewModelValues
|| __DATA.__objc_data _OBJC_CLASS_$_PGInterruptionAssistant
|| __DATA.__objc_data _OBJC_CLASS_$_PGMenuItem
|| __DATA.__objc_data _OBJC_CLASS_$_PGPictureInPictureApplication
|| __DATA.__objc_data _OBJC_CLASS_$_PGPictureInPictureController
|| __DATA.__objc_data _OBJC_CLASS_$_PGPlaybackState
|| __DATA.__objc_data _OBJC_CLASS_$_PGPlaybackStatePrerollAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_PGBackgroundPIPAuthorization
|| __DATA.__objc_data _OBJC_METACLASS_$_PGCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_PGControlsViewModel
|| __DATA.__objc_data _OBJC_METACLASS_$_PGControlsViewModelValues
|| __DATA.__objc_data _OBJC_METACLASS_$_PGInterruptionAssistant
|| __DATA.__objc_data _OBJC_METACLASS_$_PGMenuItem
|| __DATA.__objc_data _OBJC_METACLASS_$_PGPictureInPictureApplication
|| __DATA.__objc_data _OBJC_METACLASS_$_PGPictureInPictureController
|| __DATA.__objc_data _OBJC_METACLASS_$_PGPlaybackState
|| __DATA.__objc_data _OBJC_METACLASS_$_PGPlaybackStatePrerollAttributes
|| __DATA_CONST.__const _PGPegasusErrorDomain
|| __DATA_CONST.__const _PGPictureInPictureProxyPictureInPictureActiveChangedNotification
|| __DATA_CONST.__const _PGPictureInPictureViewControllerPrefersIdleTimerDisabledDidChangeNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PGPictureInPictureProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PGPictureInPictureViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PGPictureInPictureProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PGPictureInPictureViewController
|| __TEXT.__text _NSStringFromPGBackgroundPIPAuthorizationState
__ BackBoardServices: _BKSApplicationStateDisplayIDKey
__ BackBoardServices: _BKSTouchDeliveryPolicyServerGetProxyWithErrorHandler
__ BackBoardServices: _OBJC_CLASS_$_BKSAnimationFenceHandle
__ BackBoardServices: _OBJC_CLASS_$_BKSApplicationStateMonitor
__ BackBoardServices: _OBJC_CLASS_$_BKSTouchDeliveryPolicy
__ BackBoardServices: _OBJC_CLASS_$_BKSTouchDeliveryPolicyAssertion
__ BaseBoard: _BSDispatchMain
__ BaseBoard: _BSDispatchQueueAssertMain
__ BaseBoard: _BSDispatchQueueAssertNotMain
__ BaseBoard: _BSFloatGreaterThanFloat
__ BaseBoard: _BSFloatGreaterThanOrEqualToFloat
__ BaseBoard: _BSFloatIsZero
__ BaseBoard: _BSLogAddStateCaptureBlockWithTitle
__ BaseBoard: _OBJC_CLASS_$_BSDescriptionBuilder
__ BaseBoard: _OBJC_CLASS_$_BSHashBuilder
__ BaseBoard: _OBJC_CLASS_$_BSObjCProtocol
__ BaseBoard: _OBJC_CLASS_$_BSSimpleAssertion
__ BaseBoard: __BSSafeCast
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRunLoopAddObserver
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopObserverCreateWithHandler
__ CoreFoundation: _CFRunLoopObserverInvalidate
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformIsIdentity
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGFloatIsValid
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ Foundation: _NSClassFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: __NSFullMethodName
__ FrontBoardServices: _OBJC_CLASS_$_BSServiceConnection
__ FrontBoardServices: _OBJC_CLASS_$_BSServiceConnectionEndpoint
__ FrontBoardServices: _OBJC_CLASS_$_BSServiceConnectionListener
__ FrontBoardServices: _OBJC_CLASS_$_BSServiceInterface
__ FrontBoardServices: _OBJC_CLASS_$_BSServiceQuality
__ FrontBoardServices: _OBJC_CLASS_$_FBSOpenApplicationOptions
__ FrontBoardServices: _OBJC_CLASS_$_FBSOpenApplicationService
__ PrototypeTools: _OBJC_CLASS_$_PTButtonRow
__ PrototypeTools: _OBJC_CLASS_$_PTDomain
__ PrototypeTools: _OBJC_CLASS_$_PTModule
__ PrototypeTools: _OBJC_CLASS_$_PTRestoreDefaultSettingsRowAction
__ PrototypeTools: _OBJC_CLASS_$_PTSettings
__ PrototypeTools: _OBJC_CLASS_$_PTSliderRow
__ PrototypeTools: _OBJC_METACLASS_$_PTDomain
__ PrototypeTools: _OBJC_METACLASS_$_PTSettings
__ QuartzCore: _CAColorMatrixConcat
__ QuartzCore: _CAColorMatrixMakeColorSourceOver
__ QuartzCore: _CAColorMatrixMakeSaturation
__ QuartzCore: _OBJC_CLASS_$_CABackdropLayer
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAPortalLayer
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_METACLASS_$_CABackdropLayer
__ QuartzCore: _kCACornerCurveContinuous
__ QuartzCore: _kCAFilterAverageColor
__ QuartzCore: _kCAFilterColorMatrix
__ QuartzCore: _kCAFilterDestOut
__ QuartzCore: _kCAFilterGaussianBlur
__ QuartzCore: _kCAFilterPlusL
__ RunningBoardServices: _OBJC_CLASS_$_RBSAcquisitionCompletionAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSAssertion
__ RunningBoardServices: _OBJC_CLASS_$_RBSDomainAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSTarget
__ SoftLinking: __sl_dlopen
__ UIKit: _NSFontAttributeName
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneSettings
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIHoverGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UIMutableApplicationSceneSettings
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPointerHighlightEffect
__ UIKit: _OBJC_CLASS_$_UIPointerHoverEffect
__ UIKit: _OBJC_CLASS_$_UIPointerInteraction
__ UIKit: _OBJC_CLASS_$_UIPointerLiftEffect
__ UIKit: _OBJC_CLASS_$_UIPointerStyle
__ UIKit: _OBJC_CLASS_$_UIScene
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITargetedPreview
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$_UIWindowScene
__ UIKit: _OBJC_CLASS_$__UIHostedWindow
__ UIKit: _OBJC_CLASS_$__UIHostedWindowHostingHandle
__ UIKit: _OBJC_CLASS_$__UIRemoteView
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$__UIHostedWindow
__ UIKit: _OBJC_METACLASS_$__UIHostedWindowHostingHandle
__ UIKit: _UIAccessibilityIsReduceTransparencyEnabled
__ UIKit: _UIAccessibilityReduceTransparencyStatusDidChangeNotification
__ UIKit: _UIAnimationDragCoefficient
__ UIKit: _UIApp
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIFontDescriptorFeatureSettingsAttribute
__ UIKit: _UIFontDescriptorSizeAttribute
__ UIKit: _UIFontFeatureSelectorIdentifierKey
__ UIKit: _UIFontFeatureTypeIdentifierKey
__ UIKit: _UIFontWeightMedium
__ UIKit: _UIFontWeightSemibold
__ UIKit: _UIPointRoundToScale
__ UIKit: _UIPointRoundToViewScale
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRoundToViewScale
__ UIKit: _UISceneDidActivateNotification
__ UIKit: _UISceneDidDisconnectNotification
__ UIKit: _UISceneWillConnectNotification
__ UIKit: _UISizeRoundToScale
__ UIKit: _UISizeRoundToViewScale
__ UIKitServices: _UISOpenApplicationOptionKeySceneSessionPersistentIdentifier
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
PGPictureInPictureApplication : NSObject <NSCopying>
 @property  int processIdentifier
 @property  NSString *bundleIdentifier

  // class methods
  +[PGPictureInPictureApplication pictureInPictureApplicationWithProcessIdentifier:]

  // instance methods
  -[PGPictureInPictureApplication initWithProcessIdentifier:]
  -[PGPictureInPictureApplication bundleIdentifier]
  -[PGPictureInPictureApplication .cxx_destruct]
  -[PGPictureInPictureApplication init]
  -[PGPictureInPictureApplication isEqual:]
  -[PGPictureInPictureApplication processIdentifier]
  -[PGPictureInPictureApplication dealloc]
  -[PGPictureInPictureApplication copyWithZone:]
  -[PGPictureInPictureApplication isEqualToPGPictureInPictureApplication:]


PGGradientView : UIView
 @property  CAGradientLayer *layer

  // class methods
  +[PGGradientView layerClass]

  // instance methods
  -[PGGradientView hitTest:withEvent:]
  -[PGGradientView initWithFrame:]


PGProcessAssertion : NSObject
  // class methods
  +[PGProcessAssertion transientTaskDomainAttribute]
  +[PGProcessAssertion assertionWithDomainAttribute:forProcessWithIdentifier:explanation:]
  +[PGProcessAssertion pipVisibleDomainAttribute]
  +[PGProcessAssertion transientTaskAssertionForProcessWithIdentifier:explanation:]
  +[PGProcessAssertion pipVisibleAssertionForProcessWithIdentifier:explanation:]

  // instance methods
  -[PGProcessAssertion _isInvalidated]
  -[PGProcessAssertion .cxx_destruct]
  -[PGProcessAssertion initWithExplanation:]
  -[PGProcessAssertion dealloc]
  -[PGProcessAssertion invalidate]
  -[PGProcessAssertion acquireWithTarget:domainAttribute:]
  -[PGProcessAssertion _setInvalidated:]


PGPictureInPictureController : NSObject <NSXPCListenerDelegate, PGPictureInPictureRemoteObjectDelegate, PGBackgroundPIPServiceDelegate>
 @property  BOOL pictureInPictureActive
 @property  NSSet *pictureInPictureApplications
 @property  NSSet *activePictureInPictureApplications
 @property  PGPictureInPictureApplication *activePictureInPictureApplication
 @property  NSDictionary *activeSceneSessionIdentifiersByApplication
 @property  BOOL isStartingStoppingOrCancellingPictureInPicture
 @property  <PGPictureInPictureControllerDelegate> *delegate
 @property  <PGPictureInPictureAnalyticsDelegate> *analyticsDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PGPictureInPictureController isPictureInPictureSupported]

  // instance methods
  -[PGPictureInPictureController isPictureInPictureActive]
  -[PGPictureInPictureController .cxx_destruct]
  -[PGPictureInPictureController setDelegate:]
  -[PGPictureInPictureController init]
  -[PGPictureInPictureController setAnalyticsDelegate:]
  -[PGPictureInPictureController delegate]
  -[PGPictureInPictureController dealloc]
  -[PGPictureInPictureController analyticsDelegate]
  -[PGPictureInPictureController listener:shouldAcceptNewConnection:]
  -[PGPictureInPictureController isStartingStoppingOrCancellingPictureInPicture]
  -[PGPictureInPictureController initialFrameForInteractivePictureInPictureAnimationEnteringBackgroundForApplication:sceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController preferredContentSizeForInteractivelyEnteringBackgroundForApplication:sceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController shouldStartPictureInPictureForApplicationEnteringBackground:sceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController startPictureInPictureForApplicationEnteringBackground:sceneSessionPersistentIdentifier:animated:completionHandler:]
  -[PGPictureInPictureController stopPictureInPictureForApplication:sceneSessionPersistentIdentifier:animated:completionHandler:]
  -[PGPictureInPictureController cancelPictureInPictureForApplication:sceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController _remoteObjectForPictureInPictureApplication:sceneSessionPersistentIdentifier:error:]
  -[PGPictureInPictureController _remoteObjectThatShouldStartPictureInPictureEnteringBackgroundForPictureInPictureApplication:sceneSessionPersistentIdentifier:error:]
  -[PGPictureInPictureController _remoteObjectsForPictureInPictureApplication:]
  -[PGPictureInPictureController _remoteObjectForPictureInPictureApplication:passingTest:error:]
  -[PGPictureInPictureController _pictureInPictureRemoteObjects]
  -[PGPictureInPictureController _remoteObjectThatCanStopPictureInPictureApplication:sceneSessionPersistentIdentifier:error:]
  -[PGPictureInPictureController _remoteObjectThatCanEndTwoStageStopPictureInPictureApplication:error:]
  -[PGPictureInPictureController _remoteObjectThatCanCancelPictureInPictureApplication:sceneSessionPersistentIdentifier:error:]
  -[PGPictureInPictureController _remoteObjectForTestApplicationWithBundleIdentifier:]
  -[PGPictureInPictureController pictureInPictureInterruptionBeganWithReason:attribution:]
  -[PGPictureInPictureController pictureInPictureInterruptionEndedWithReason:attribution:]
  -[PGPictureInPictureController _faceTimeVideoCallRemoteObject]
  -[PGPictureInPictureController _hasActiveNonVideoCallRemoteObjectAuthorizedForBackgroundPIP]
  -[PGPictureInPictureController _removeRemoteObject:]
  -[PGPictureInPictureController _updateAllRemoteObjectsForPIPPossibleAndExemptAttributions]
  -[PGPictureInPictureController _addRemoteObject:]
  -[PGPictureInPictureController pictureInPictureRemoteObjectShouldAcceptSetupRequest:]
  -[PGPictureInPictureController pictureInPictureRemoteObjectShouldUpdateCancellationPolicyOnStart:]
  -[PGPictureInPictureController pictureInPictureRemoteObjectShouldCancelActivePictureInPictureOnStart:]
  -[PGPictureInPictureController pictureInPictureRemoteObject:didRequestPictureInPictureStopForViewController:sourceSceneSessionIdentifier:animated:]
  -[PGPictureInPictureController pictureInPictureRemoteObject:didCreatePictureInPictureViewController:]
  -[PGPictureInPictureController pictureInPictureRemoteObject:willShowPictureInPictureViewController:]
  -[PGPictureInPictureController pictureInPictureRemoteObject:didShowPictureInPictureViewController:]
  -[PGPictureInPictureController pictureInPictureRemoteObject:willHidePictureInPictureViewController:]
  -[PGPictureInPictureController pictureInPictureRemoteObject:didHidePictureInPictureViewController:]
  -[PGPictureInPictureController pictureInPictureRemoteObject:willDestroyPictureInPictureViewController:]
  -[PGPictureInPictureController pictureInPictureRemoteObjectNeedsActivationAndInterruptionPolicyUpdate:]
  -[PGPictureInPictureController pictureInPictureRemoteObjectHasBackgroundPIPAuthorization:]
  -[PGPictureInPictureController backgroundPIPService:canAuthorizeBackgroundPIPForActivitySessionWithIdentifier:appBundleIdentifier:]
  -[PGPictureInPictureController backgroundPIPService:didGrantBackgroundPIPAuthorizationForActivitySessionWithIdentifier:]
  -[PGPictureInPictureController backgroundPIPService:didRevokeBackgroundPIPAuthorizationForActivitySessionWithIdentifier:]
  -[PGPictureInPictureController initialFrameForInteractivePictureInPictureAnimationEnteringBackgroundForApplication:]
  -[PGPictureInPictureController preferredContentSizeForInteractivePictureInPictureAnimationEnteringBackgroundForApplication:]
  -[PGPictureInPictureController shouldStartPictureInPictureForApplicationEnteringBackground:]
  -[PGPictureInPictureController startPictureInPictureForApplicationEnteringBackground:animated:completionHandler:]
  -[PGPictureInPictureController stopPictureInPictureForApplication:animated:completionHandler:]
  -[PGPictureInPictureController cancelPictureInPictureForApplication:]
  -[PGPictureInPictureController contentTypePictureInPictureApplication:sceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController preferredContentSizeForActivePictureInPictureWithApplication:sceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController isStoppingOrCancellingPictureInPictureForApplication:sceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController tetheringModeForSceneSessionPersistentIdentifier:]
  -[PGPictureInPictureController beginTwoStageStopPictureInPictureForApplication:withSceneSessionPersistentIdentifier:animated:byRestoringUserInterfaceWithCompletionHandler:]
  -[PGPictureInPictureController endTwoStageStopPictureInPictureForApplication:withSceneSessionPersistentIdentifier:animated:completionHandler:]
  -[PGPictureInPictureController startPictureInPictureResourcesUsageReductionForApplication:requestingViewController:]
  -[PGPictureInPictureController stopPictureInPictureResourcesUsageReductionForApplication:requestingViewController:]
  -[PGPictureInPictureController startPictureInPictureTestActionForApplicationWithBundleIdentifier:]
  -[PGPictureInPictureController restorePictureInPictureTestActionForApplicationWithBundleIdentifier:]
  -[PGPictureInPictureController pictureInPictureInterruptionBegan]
  -[PGPictureInPictureController pictureInPictureInterruptionBeganWithReason:]
  -[PGPictureInPictureController pictureInPictureInterruptionEnded]
  -[PGPictureInPictureController pictureInPictureInterruptionEndedWithReason:]
  -[PGPictureInPictureController existingPictureInPictureApplicationForBundleIdentifier:]
  -[PGPictureInPictureController activePictureInPictureApplications]
  -[PGPictureInPictureController suspendedPictureInPictureApplication]
  -[PGPictureInPictureController activeSceneSessionIdentifiersByApplication]
  -[PGPictureInPictureController activateBackgroundPIPAuthorizationService]
  -[PGPictureInPictureController startMicroPIPIfPossibleForVideoCallWithScenePersistenceIdentifier:]
  -[PGPictureInPictureController pictureInPictureRemoteObjectInterruptionAssistant:]
  -[PGPictureInPictureController pictureInPictureApplications]
  -[PGPictureInPictureController activePictureInPictureApplication]


PGDisplayLink : NSObject <BSInvalidatable>
 @property  id owner
 @property  @? linkFired
 @property  unsigned long preferredFramesPerSecond
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PGDisplayLink .cxx_destruct]
  -[PGDisplayLink owner]
  -[PGDisplayLink setPreferredFramesPerSecond:]
  -[PGDisplayLink preferredFramesPerSecond]
  -[PGDisplayLink invalidate]
  -[PGDisplayLink linkFired]
  -[PGDisplayLink _linkFired:]
  -[PGDisplayLink initWithOwner:linkFired:]


PGHostedWindow : _UIHostedWindow
 @property  PGHostedWindowHostingHandle *hostedWindowHostingHandle

  // instance methods
  -[PGHostedWindow _canBecomeKeyWindow]
  -[PGHostedWindow hostedWindowHostingHandle]
  -[PGHostedWindow canBecomeFirstResponder]
  -[PGHostedWindow initWithFrame:]
  -[PGHostedWindow dealloc]


PGHostedWindowHostingHandle : _UIHostedWindowHostingHandle

_PGInterruption : NSObject <NSCopying>
 @property  long long reason
 @property  NSString *attribution

  // instance methods
  -[_PGInterruption attribution]
  -[_PGInterruption .cxx_destruct]
  -[_PGInterruption isEqual:]
  -[_PGInterruption reason]
  -[_PGInterruption copyWithZone:]
  -[_PGInterruption initWithReason:attribution:]


PGInterruptionAssistant : NSObject
 @property  BOOL interrupted
 @property  BOOL proxyActive
 @property  BOOL exemptFromUILockInterruptionsWhenActive
 @property  BOOL allowsResumingAfterInterruptionEnds

  // instance methods
  -[PGInterruptionAssistant isInterrupted]
  -[PGInterruptionAssistant exemptAttribution]
  -[PGInterruptionAssistant addReason:attribution:]
  -[PGInterruptionAssistant setExemptAttribution:]
  -[PGInterruptionAssistant setProxyActive:]
  -[PGInterruptionAssistant .cxx_destruct]
  -[PGInterruptionAssistant setExemptFromUILockInterruptionsWhenActive:]
  -[PGInterruptionAssistant isExemptFromUILockInterruptionsWhenActive]
  -[PGInterruptionAssistant init]
  -[PGInterruptionAssistant removeReason:attribution:]
  -[PGInterruptionAssistant noteDidNotifyProxyOfInterruptionEnded]
  -[PGInterruptionAssistant copyWithExemptAttribution:]
  -[PGInterruptionAssistant _interruptionsDescription]
  -[PGInterruptionAssistant cameraInterruptionAttributions]
  -[PGInterruptionAssistant isProxyActive]
  -[PGInterruptionAssistant noteDidNotifyProxyOfInterruptionBegan]
  -[PGInterruptionAssistant allowsResumingAfterInterruptionEnds]
  -[PGInterruptionAssistant hasInterruptionReason:]
  -[PGInterruptionAssistant dealloc]
  -[PGInterruptionAssistant _lock_calculateIsInterrupted]
  -[PGInterruptionAssistant shouldNotifyProxyOfInterruptionBegan]
  -[PGInterruptionAssistant shouldNotifyProxyOfInterruptionEnded]


PGCommand : NSObject
 @property  NSDictionary *dictionaryRepresentation
 @property  long long systemAction
 @property  long long faceTimeAction
 @property  long long playbackAction
 @property  BOOL associatedBoolValue
 @property  long long associatedIntegerValue
 @property  double associatedDoubleValue
 @property  long long testingAction

  // class methods
  +[PGCommand commandForPlaybackAction:associatedBoolValue:]
  +[PGCommand commandForPlaybackAction:]
  +[PGCommand commandForPlaybackAction:associatedDoubleValue:]
  +[PGCommand commandForSystemAction:]
  +[PGCommand commandForTestingAction:]
  +[PGCommand commandForFaceTimeAction:associatedBoolValue:]
  +[PGCommand commandForFaceTimeAction:]
  +[PGCommand commandForFaceTimeAction:associatedIntegerValue:]
  +[PGCommand commandForSetMuted:]
  +[PGCommand commandForSetPlaying:]
  +[PGCommand commandForSetSuspended:]
  +[PGCommand commandForBeginInterruption]
  +[PGCommand commandForEndInterruptionWithShouldResumeSuggestion:]
  +[PGCommand commandForSkipToLive]
  +[PGCommand commandForSkipPreroll]
  +[PGCommand commandForSkipByInterval:]
  +[PGCommand commandForEndOrLeaveActivityRequested]
  +[PGCommand commandForCancelPIP]
  +[PGCommand commandForRestoreFromPIP]
  +[PGCommand commandForToggleControlsVisibility]
  +[PGCommand commandForSendActionButtonTapped]
  +[PGCommand commandForToggleZoom]
  +[PGCommand commandForStartPIP]
  +[PGCommand commandForInvalidateFromProxy]
  +[PGCommand commandForTestStartPIP]
  +[PGCommand commandForSetCameraEnabled:]
  +[PGCommand commandForSetMicrophoneMuted:]
  +[PGCommand commandForSwitchCamera]
  +[PGCommand commandForMenuItemSelected:]
  +[PGCommand commandForShowHUD]

  // instance methods
  -[PGCommand .cxx_destruct]
  -[PGCommand dictionaryRepresentation]
  -[PGCommand succinctDescriptionBuilder]
  -[PGCommand descriptionBuilderWithMultilinePrefix:]
  -[PGCommand isEqual:]
  -[PGCommand descriptionWithMultilinePrefix:]
  -[PGCommand succinctDescription]
  -[PGCommand initWithDictionary:]
  -[PGCommand faceTimeAction]
  -[PGCommand playbackAction]
  -[PGCommand associatedDoubleValue]
  -[PGCommand associatedBoolValue]
  -[PGCommand testingAction]
  -[PGCommand appendDescriptionForKey:value:toBuilder:]
  -[PGCommand systemAction]
  -[PGCommand associatedIntegerValue]


PGLayerHostView : UIView
 @property  PGHostedWindowHostingHandle *hostedWindowHostingHandle
 @property  double cornerRadiusScale

  // instance methods
  -[PGLayerHostView hostedWindowHostingHandle]
  -[PGLayerHostView setHostedWindowHostingHandle:]
  -[PGLayerHostView .cxx_destruct]
  -[PGLayerHostView initWithFrame:]
  -[PGLayerHostView didMoveToWindow]
  -[PGLayerHostView dealloc]
  -[PGLayerHostView _manageSharingOfTouchesBetweenClientAndHostContext]
  -[PGLayerHostView cornerRadiusScale]
  -[PGLayerHostView setCornerRadiusScale:]


_PGBundle : NSObject
  // class methods
  +[_PGBundle bundle]


PGPortalView : UIView
 @property  UIView *sourceView

  // class methods
  +[PGPortalView layerClass]

  // instance methods
  -[PGPortalView setSourceView:]
  -[PGPortalView .cxx_destruct]
  -[PGPortalView sourceView]
  -[PGPortalView portalLayer]


PGPrerollIndicatorView : UIView <PGButtonViewDelegate>
 @property  PGControlsViewModel *viewModel
 @property  UILabel *contentTypeLabel
 @property  PGButtonView *skipPrerollButtonView
 @property  NSString *labelText
 @property  NSString *timeRemainingText
 @property  {CGSize=dd} labelSize
 @property  PGDisplayLink *displayLink
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PGPrerollIndicatorView preferredHeight]

  // instance methods
  -[PGPrerollIndicatorView hitTest:withEvent:]
  -[PGPrerollIndicatorView .cxx_destruct]
  -[PGPrerollIndicatorView layoutSubviews]
  -[PGPrerollIndicatorView viewModel]
  -[PGPrerollIndicatorView labelText]
  -[PGPrerollIndicatorView displayLink]
  -[PGPrerollIndicatorView labelSize]
  -[PGPrerollIndicatorView labelWidth]
  -[PGPrerollIndicatorView dealloc]
  -[PGPrerollIndicatorView setLabelSize:]
  -[PGPrerollIndicatorView setLabelText:]
  -[PGPrerollIndicatorView updateValues]
  -[PGPrerollIndicatorView setTimeRemainingText:]
  -[PGPrerollIndicatorView contentTypeLabel]
  -[PGPrerollIndicatorView _layoutContentTypeLabel]
  -[PGPrerollIndicatorView timeRemainingText]
  -[PGPrerollIndicatorView _layoutSkipPrerollButton]
  -[PGPrerollIndicatorView _subviewTransform]
  -[PGPrerollIndicatorView buttonViewDidReceiveTouchUpInside:]
  -[PGPrerollIndicatorView buttonView:imageRectForContentRect:proposedRect:]
  -[PGPrerollIndicatorView buttonView:titleRectForContentRect:proposedRect:]
  -[PGPrerollIndicatorView buttonView:contentEdgeInsetsForProposedInsets:]
  -[PGPrerollIndicatorView initWithFrame:viewModel:]
  -[PGPrerollIndicatorView skipPrerollButtonView]


PGProgressIndicator : PGMaterialView
 @property  double progress
 @property  UIColor *customElapsedTrackTintColor
 @property  BOOL includesWaitingToPlayIndicator

  // instance methods
  -[PGProgressIndicator hitTest:withEvent:]
  -[PGProgressIndicator .cxx_destruct]
  -[PGProgressIndicator setFrame:]
  -[PGProgressIndicator layoutSubviews]
  -[PGProgressIndicator progress]
  -[PGProgressIndicator _setCornerRadius:]
  -[PGProgressIndicator initWithFrame:]
  -[PGProgressIndicator setProgress:]
  -[PGProgressIndicator _updateElapsedTrackTintColor]
  -[PGProgressIndicator _performLayout]
  -[PGProgressIndicator _updatePulseAnimatorIfNeeded]
  -[PGProgressIndicator customElapsedTrackTintColor]
  -[PGProgressIndicator includesWaitingToPlayIndicator]
  -[PGProgressIndicator _transitionToPulseStateIfNeeded:]
  -[PGProgressIndicator _applyPulseState]
  -[PGProgressIndicator setCustomElapsedTrackTintColor:]
  -[PGProgressIndicator setIncludesWaitingToPlayIndicator:]


PGVibrantFillView : UIView
  // instance methods
  -[PGVibrantFillView hitTest:withEvent:]
  -[PGVibrantFillView tintColorDidChange]
  -[PGVibrantFillView initWithFrame:]
  -[PGVibrantFillView PG_updateVibrancyEffectForTintColor]


PGBackgroundPIPAuthorization : NSObject <PGBackgroundPIPServerToClientInterface>
 @property  @? stateTransitionHandler
 @property  long long state
 @property  NSString *activitySessionIdentifier
 @property  NSString *appBundleIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PGBackgroundPIPAuthorization appBundleIdentifier]
  -[PGBackgroundPIPAuthorization _transitionToState:]
  -[PGBackgroundPIPAuthorization .cxx_destruct]
  -[PGBackgroundPIPAuthorization revoke]
  -[PGBackgroundPIPAuthorization state]
  -[PGBackgroundPIPAuthorization transitionToState:]
  -[PGBackgroundPIPAuthorization dealloc]
  -[PGBackgroundPIPAuthorization activitySessionIdentifier]
  -[PGBackgroundPIPAuthorization stateTransitionHandler]
  -[PGBackgroundPIPAuthorization initWithActivitySessionIdentifier:appBundleIdentifier:stateTransitionHandler:]


PGControlsContainerView : UIView <PGControlsViewModelDelegate, UIGestureRecognizerDelegate>
 @property  <PGCommandHandler> *commandHandler
 @property  BOOL showsPictureInPictureUnavailableIndicator
 @property  BOOL showingControlsForHoverActive
 @property  BOOL interactivelyResizing
 @property  @? coordinatedAnimationsForControlsVisibiity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PGControlsContainerView gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[PGControlsContainerView _setContinuousCornerRadius:]
  -[PGControlsContainerView .cxx_destruct]
  -[PGControlsContainerView _handleDoubleTapGestureRecognizer:]
  -[PGControlsContainerView layoutSubviews]
  -[PGControlsContainerView viewModel]
  -[PGControlsContainerView gestureRecognizerShouldBegin:]
  -[PGControlsContainerView didMoveToWindow]
  -[PGControlsContainerView _invalidateTimer]
  -[PGControlsContainerView _handleHoverGestureRecognizer:]
  -[PGControlsContainerView initWithFrame:viewModel:]
  -[PGControlsContainerView _handleSingleTapGestureRecognizer:]
  -[PGControlsContainerView _handleDoubleDoubleTapGestureRecognizer:]
  -[PGControlsContainerView _updateVisibilityOfView:hidden:animated:existingAnimator:]
  -[PGControlsContainerView _setControlsHidden:animated:]
  -[PGControlsContainerView _setPrefersControlsHidden:animated:]
  -[PGControlsContainerView commandHandler]
  -[PGControlsContainerView _updateHideControlsAfterDelayTimer]
  -[PGControlsContainerView isShowingControlsForHoverActive]
  -[PGControlsContainerView setShowingControlsForHoverActive:]
  -[PGControlsContainerView _controlsShouldAutoHide]
  -[PGControlsContainerView _acquirePreventAutoHideOfControlsAssertionWithReason:]
  -[PGControlsContainerView coordinatedAnimationsForControlsVisibiity]
  -[PGControlsContainerView _performVisibilityTransitionAnimated:existingAnimator:animations:success:]
  -[PGControlsContainerView controlsViewModel:valuesChangedFromOldValue:]
  -[PGControlsContainerView controlsViewModel:didIssueCommand:]
  -[PGControlsContainerView setControlsContainerHidden:animated:]
  -[PGControlsContainerView setInteractivelyResizing:]
  -[PGControlsContainerView PG_acquireAssertionToPreventAutoHideOfControlsWithReason:]
  -[PGControlsContainerView setCommandHandler:]
  -[PGControlsContainerView showsPictureInPictureUnavailableIndicator]
  -[PGControlsContainerView setShowsPictureInPictureUnavailableIndicator:]
  -[PGControlsContainerView isInteractivelyResizing]
  -[PGControlsContainerView setCoordinatedAnimationsForControlsVisibiity:]


PGCABackdropLayerView : UIView
 @property  PGCABackdropLayer *layer
 @property  PGCABackdropLayerView *groupLeader
 @property  NSHashTable *dependents
 @property  UIColor *customBackgroundColor

  // class methods
  +[PGCABackdropLayerView layerClass]
  +[PGCABackdropLayerView reducedTransparencyColor]
  +[PGCABackdropLayerView materialFilters]

  // instance methods
  -[PGCABackdropLayerView hitTest:withEvent:]
  -[PGCABackdropLayerView groupLeader]
  -[PGCABackdropLayerView initWithCoder:]
  -[PGCABackdropLayerView dependents]
  -[PGCABackdropLayerView .cxx_destruct]
  -[PGCABackdropLayerView setCustomBackgroundColor:]
  -[PGCABackdropLayerView customBackgroundColor]
  -[PGCABackdropLayerView initWithFrame:]
  -[PGCABackdropLayerView pointInside:withEvent:]
  -[PGCABackdropLayerView didMoveToWindow]
  -[PGCABackdropLayerView dealloc]
  -[PGCABackdropLayerView setGroupLeader:]
  -[PGCABackdropLayerView _enumerateDependents:]
  -[PGCABackdropLayerView _preferredBackgroundColor]
  -[PGCABackdropLayerView _ensureDependents]
  -[PGCABackdropLayerView initWithFrame:captureOnly:]
  -[PGCABackdropLayerView updateEffects]
  -[PGCABackdropLayerView _preferredEffect]
  -[PGCABackdropLayerView _isCaptureOnly]
  -[PGCABackdropLayerView _hasAnyDependentsThatWantsCapturedBlur]
  -[PGCABackdropLayerView _removeDependent:]
  -[PGCABackdropLayerView _addDependent:]
  -[PGCABackdropLayerView _wantsCapturedBlur]
  -[PGCABackdropLayerView _isTransparentOrHasTransparentAncestor]


PGCABackdropLayer : CABackdropLayer
  // instance methods
  -[PGCABackdropLayer setScale:]
  -[PGCABackdropLayer setValue:forKeyPath:]


_PGBackgroundPIPServiceConnectionTarget : NSObject <PGBackgroundPIPClientToServerInterface>
 @property  <_PGBackgroundPIPServiceConnectionTargetDelegate> *delegate
 @property  NSString *bundleIdentifier
 @property  NSString *activitySessionIdentifier
 @property  long long state
 @property  BOOL connectionActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_PGBackgroundPIPServiceConnectionTarget bundleIdentifier]
  -[_PGBackgroundPIPServiceConnectionTarget .cxx_destruct]
  -[_PGBackgroundPIPServiceConnectionTarget initWithConnection:delegate:]
  -[_PGBackgroundPIPServiceConnectionTarget setDelegate:]
  -[_PGBackgroundPIPServiceConnectionTarget state]
  -[_PGBackgroundPIPServiceConnectionTarget delegate]
  -[_PGBackgroundPIPServiceConnectionTarget invalidate]
  -[_PGBackgroundPIPServiceConnectionTarget activitySessionIdentifier]
  -[_PGBackgroundPIPServiceConnectionTarget grantAuthorizationForActivitySessionWithIdentifier:bundleIdentifier:]
  -[_PGBackgroundPIPServiceConnectionTarget revokeAuthorization]
  -[_PGBackgroundPIPServiceConnectionTarget isConnectionActive]
  -[_PGBackgroundPIPServiceConnectionTarget transitionToStateIfPossible:]


PGRunLoopObserver : NSObject
 @property  ^{__CFRunLoopObserver=} runLoopObserver
 @property  @? actions

  // instance methods
  -[PGRunLoopObserver setActions:]
  -[PGRunLoopObserver .cxx_destruct]
  -[PGRunLoopObserver actions]
  -[PGRunLoopObserver runLoopObserver]
  -[PGRunLoopObserver dealloc]
  -[PGRunLoopObserver setRunLoopObserver:]


PGLayoutContainerView : UIView
  // instance methods
  -[PGLayoutContainerView hitTest:withEvent:]
  -[PGLayoutContainerView initWithFrame:]


PGControlsView : PGLayoutContainerView <PGButtonViewDelegate>
 @property  BOOL prefersControlsHidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PGControlsView hitTest:withEvent:]
  -[PGControlsView initWithCoder:]
  -[PGControlsView _setContinuousCornerRadius:]
  -[PGControlsView .cxx_destruct]
  -[PGControlsView layoutSubviews]
  -[PGControlsView didMoveToWindow]
  -[PGControlsView dealloc]
  -[PGControlsView updateProgress]
  -[PGControlsView buttonViewDidReceiveTouchUpInside:]
  -[PGControlsView buttonView:imageRectForContentRect:proposedRect:]
  -[PGControlsView buttonView:titleRectForContentRect:proposedRect:]
  -[PGControlsView buttonView:contentEdgeInsetsForProposedInsets:]
  -[PGControlsView initWithFrame:viewModel:]
  -[PGControlsView prefersControlsHidden]
  -[PGControlsView viewModelDidUpdateValuesFromOldValues:]
  -[PGControlsView setPrefersControlsHidden:]
  -[PGControlsView updateControlsAlpha]
  -[PGControlsView PG_backdropGroupLeader]
  -[PGControlsView PG_preferredVisibilityForView:]
  -[PGControlsView _progressIndicatorFrameWithScaling:]
  -[PGControlsView _showsGradientView]
  -[PGControlsView _prerollIndicatorFrameWithScaling:]
  -[PGControlsView updateControlsHidden]


PGPictureInPictureRemoteObject : NSObject <PGPictureInPictureRemoteObjectInterface, PGPictureInPictureViewControllerDelegate, PGCommandHandler>
 @property  PGPictureInPictureRemoteObject *tetheredRemoteObject
 @property  PGPictureInPictureRemoteObject *tetheringRemoteObject
 @property  NSXPCConnection *connection
 @property  NSObject<OS_dispatch_queue> *queue
 @property  PGPictureInPictureApplication *pictureInPictureApplication
 @property  PGPictureInPictureViewController *pictureInPictureViewController
 @property  long long contentType
 @property  <PGPictureInPictureRemoteObjectDelegate> *delegate
 @property  <PGPictureInPictureAnalyticsDelegate> *analyticsDelegate
 @property  BOOL shouldStartPictureInPictureEnteringBackground
 @property  BOOL canStopPictureInPicture
 @property  BOOL canCancelPictureInPicture
 @property  BOOL canEndTwoStageStopPictureInPicture
 @property  BOOL isStartingStoppingOrCancellingPictureInPicture
 @property  BOOL isStoppingOrCancellingPictureInPicture
 @property  long long currentState
 @property  BOOL pictureInPicturePossible
 @property  BOOL interrupted
 @property  BOOL videoCall
 @property  BOOL pipAllowedForCurrentContentType
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} initialLayerFrame
 @property  {CGSize=dd} preferredContentSize
 @property  NSString *sourceSceneSessionPersistentIdentifier
 @property  NSString *activitySessionIdentifier
 @property  BOOL canStartBackgroundPIPForCurrentActivitySessionIdentifier
 @property  NSString *exemptAttribution
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PGPictureInPictureRemoteObject tetherRemoteObject:toRemoteObject:mode:]

  // instance methods
  -[PGPictureInPictureRemoteObject isInterrupted]
  -[PGPictureInPictureRemoteObject exemptAttribution]
  -[PGPictureInPictureRemoteObject preferredContentSize]
  -[PGPictureInPictureRemoteObject suspend]
  -[PGPictureInPictureRemoteObject _setCurrentState:]
  -[PGPictureInPictureRemoteObject setExemptAttribution:]
  -[PGPictureInPictureRemoteObject .cxx_destruct]
  -[PGPictureInPictureRemoteObject setDelegate:]
  -[PGPictureInPictureRemoteObject init]
  -[PGPictureInPictureRemoteObject connection]
  -[PGPictureInPictureRemoteObject contentType]
  -[PGPictureInPictureRemoteObject currentState]
  -[PGPictureInPictureRemoteObject cancel]
  -[PGPictureInPictureRemoteObject setAnalyticsDelegate:]
  -[PGPictureInPictureRemoteObject delegate]
  -[PGPictureInPictureRemoteObject resume]
  -[PGPictureInPictureRemoteObject queue]
  -[PGPictureInPictureRemoteObject dealloc]
  -[PGPictureInPictureRemoteObject invalidate]
  -[PGPictureInPictureRemoteObject analyticsDelegate]
  -[PGPictureInPictureRemoteObject isPictureInPicturePossible]
  -[PGPictureInPictureRemoteObject pictureInPictureViewController]
  -[PGPictureInPictureRemoteObject activitySessionIdentifier]
  -[PGPictureInPictureRemoteObject setActivitySessionIdentifier:]
  -[PGPictureInPictureRemoteObject setPictureInPicturePossible:]
  -[PGPictureInPictureRemoteObject canStopPictureInPicture]
  -[PGPictureInPictureRemoteObject _canTransitionToState:]
  -[PGPictureInPictureRemoteObject sourceSceneSessionPersistentIdentifier]
  -[PGPictureInPictureRemoteObject matchesSceneSessionIdentifier:]
  -[PGPictureInPictureRemoteObject isStartingStoppingOrCancellingPictureInPicture]
  -[PGPictureInPictureRemoteObject initialLayerFrame]
  -[PGPictureInPictureRemoteObject pictureInPictureApplication]
  -[PGPictureInPictureRemoteObject isStoppingOrCancellingPictureInPicture]
  -[PGPictureInPictureRemoteObject supportsMicroPIP]
  -[PGPictureInPictureRemoteObject canTetherRemoteObjectAsMicroPIP:]
  -[PGPictureInPictureRemoteObject startPictureInPictureEnteringBackgroundAnimated:withCompletionHandler:]
  -[PGPictureInPictureRemoteObject stopPictureInPictureAnimated:withCompletionHandler:]
  -[PGPictureInPictureRemoteObject beginTwoStageStopPictureInPictureByRestoringUserInterfaceWithCompletionHandler:]
  -[PGPictureInPictureRemoteObject endTwoStageStopPictureInPictureWithCompletionBlock:]
  -[PGPictureInPictureRemoteObject setCurrentResourcesUsageReductionReasons:]
  -[PGPictureInPictureRemoteObject sendStartPictureInPictureTestAction]
  -[PGPictureInPictureRemoteObject pictureInPictureInterruptionBeganWithReason:attribution:]
  -[PGPictureInPictureRemoteObject pictureInPictureInterruptionEndedWithReason:attribution:]
  -[PGPictureInPictureRemoteObject shouldStartPictureInPictureEnteringBackground]
  -[PGPictureInPictureRemoteObject startPictureInPictureFromBackground]
  -[PGPictureInPictureRemoteObject canCancelPictureInPicture]
  -[PGPictureInPictureRemoteObject canEndTwoStageStopPictureInPicture]
  -[PGPictureInPictureRemoteObject isVideoCall]
  -[PGPictureInPictureRemoteObject isPIPAllowedForCurrentContentType]
  -[PGPictureInPictureRemoteObject canPreventOrSuspendRemoteObject:]
  -[PGPictureInPictureRemoteObject isAssociatedWithRemoteObject:]
  -[PGPictureInPictureRemoteObject canStartBackgroundPIPForCurrentActivitySessionIdentifier]
  -[PGPictureInPictureRemoteObject initWithConnection:interruptionAssistant:]
  -[PGPictureInPictureRemoteObject handleCommand:]
  -[PGPictureInPictureRemoteObject initializePictureInPictureWithControlsStyle:preferredContentSize:completionHandler:]
  -[PGPictureInPictureRemoteObject setupStartAnimated:hostedWindowHostingHandle:sceneSessionPersistentIdentifier:preferredContentSize:initialInterfaceOrientation:initialLayerFrame:completionHandler:]
  -[PGPictureInPictureRemoteObject startPictureInPictureAnimated:completionHandler:]
  -[PGPictureInPictureRemoteObject updateInitialLayerFrameForInteractiveTransitionAnimationUponBackgrounding:withCompletionHandler:]
  -[PGPictureInPictureRemoteObject updateSourceSceneSessionPersistentIdentifierForInteractiveTransitionAnimationUponBackgrounding:withCompletionHandler:]
  -[PGPictureInPictureRemoteObject updatePreferredContentSize:withCompletionHandler:]
  -[PGPictureInPictureRemoteObject checkActivePictureInPictureCancellationPolicyWithCompletion:]
  -[PGPictureInPictureRemoteObject rotateContentContainer:withCompletionHandler:]
  -[PGPictureInPictureRemoteObject setupStopAnimated:needsApplicationActivation:completionHandler:]
  -[PGPictureInPictureRemoteObject stopPictureInPictureAnimated:withFinalInterfaceOrientation:finalLayerFrame:completionHandler:]
  -[PGPictureInPictureRemoteObject cleanupWithCompletionHandler:]
  -[PGPictureInPictureRemoteObject setPictureInPictureShouldStartWhenEnteringBackground:completionHandler:]
  -[PGPictureInPictureRemoteObject updatePlaybackStateWithDiff:]
  -[PGPictureInPictureRemoteObject updateMenuItems:]
  -[PGPictureInPictureRemoteObject stopPictureInPictureAndRestoreUserInterface]
  -[PGPictureInPictureRemoteObject setScreenSharingTitle:avatar:]
  -[PGPictureInPictureRemoteObject _invalidateAllAssertions]
  -[PGPictureInPictureRemoteObject _isUnderLock]
  -[PGPictureInPictureRemoteObject isStartingPictureInPicture]
  -[PGPictureInPictureRemoteObject _isAppICS]
  -[PGPictureInPictureRemoteObject _invalidateForFailureToStartStopOrCancel]
  -[PGPictureInPictureRemoteObject _setUILockedResourcesUsageReductionReasons:]
  -[PGPictureInPictureRemoteObject _notifyProxyOfStashedOrUnderLock:]
  -[PGPictureInPictureRemoteObject _updateActiveProxyAndViewControllerOfInterruptionIfNeeded]
  -[PGPictureInPictureRemoteObject _stopTethering]
  -[PGPictureInPictureRemoteObject _finishCleanup]
  -[PGPictureInPictureRemoteObject _setResolvedResourcesUsageReductionReasons:]
  -[PGPictureInPictureRemoteObject _isICSVideoCall]
  -[PGPictureInPictureRemoteObject canStartMicroPIP]
  -[PGPictureInPictureRemoteObject _isAssociatedWithOtherObject:]
  -[PGPictureInPictureRemoteObject setTetheringRemoteObject:]
  -[PGPictureInPictureRemoteObject setTetheredRemoteObject:]
  -[PGPictureInPictureRemoteObject _invalidationTimerWithTimeout:block:]
  -[PGPictureInPictureRemoteObject _invalidateInterruptionBeganFinishTaskAssertion]
  -[PGPictureInPictureRemoteObject pictureInPictureViewController:didTransitionToStashed:]
  -[PGPictureInPictureRemoteObject _isInActivitySession]
  -[PGPictureInPictureRemoteObject setSourceSceneSessionPersistentIdentifier:]
  -[PGPictureInPictureRemoteObject pictureInPictureViewControllerDidRequestStop:]
  -[PGPictureInPictureRemoteObject _updatePreferredContentSize:withCompletionHandler:]
  -[PGPictureInPictureRemoteObject _acquireOrInvalidateProcessAssertionIfNeeded]
  -[PGPictureInPictureRemoteObject _queue_notifyProxyOfInterruptionBegan]
  -[PGPictureInPictureRemoteObject _queue_notifyProxyOfInterruptionEnded]
  -[PGPictureInPictureRemoteObject _currentStateAllowsProcessAssertion]
  -[PGPictureInPictureRemoteObject _wantsProcessAssertion]
  -[PGPictureInPictureRemoteObject pictureInPictureViewController:didReceiveCommand:]
  -[PGPictureInPictureRemoteObject pictureInPictureViewControllerDidRequestCancel:]
  -[PGPictureInPictureRemoteObject pictureInPictureViewController:updateHostedWindowSize:animationType:initialSpringVelocity:]
  -[PGPictureInPictureRemoteObject pictureInPictureViewControllerHostedWindowSizeChangeBegan:]
  -[PGPictureInPictureRemoteObject pictureInPictureViewControllerHostedWindowSizeChangeEnded:]
  -[PGPictureInPictureRemoteObject pictureInPictureViewControllerWantsStashTabSuppression:]
  -[PGPictureInPictureRemoteObject pictureInPictureViewControllerShouldHideTetheredViewControllerAlongsideControls:]
  -[PGPictureInPictureRemoteObject _invalidationTimerWithTimeout:]
  -[PGPictureInPictureRemoteObject tetheredRemoteObject]
  -[PGPictureInPictureRemoteObject tetheringRemoteObject]


PGMaterialView : PGLayoutContainerView
 @property  UIView *contentView
 @property  BOOL backdropHidden

  // instance methods
  -[PGMaterialView _cornerRadius]
  -[PGMaterialView backgroundColor]
  -[PGMaterialView _setContinuousCornerRadius:]
  -[PGMaterialView .cxx_destruct]
  -[PGMaterialView layoutSubviews]
  -[PGMaterialView addSubview:]
  -[PGMaterialView contentView]
  -[PGMaterialView _continuousCornerRadius]
  -[PGMaterialView _setCornerRadius:]
  -[PGMaterialView setBackgroundColor:]
  -[PGMaterialView initWithFrame:]
  -[PGMaterialView PG_preferredVisibilityForView:]
  -[PGMaterialView setBackdropHidden:]
  -[PGMaterialView isBackdropHidden]


PGBackgroundPIPServiceSpecification : NSObject
  // class methods
  +[PGBackgroundPIPServiceSpecification serviceQuality]
  +[PGBackgroundPIPServiceSpecification interface]
  +[PGBackgroundPIPServiceSpecification identifier]


_PGPictureInPictureContainerView : UIView
 @property  PGPictureInPictureViewController *vcForDebugging

  // instance methods
  -[_PGPictureInPictureContainerView willMoveToSuperview:]
  -[_PGPictureInPictureContainerView didMoveToSuperview]
  -[_PGPictureInPictureContainerView .cxx_destruct]
  -[_PGPictureInPictureContainerView vcForDebugging]
  -[_PGPictureInPictureContainerView setVcForDebugging:]


PGPictureInPictureViewControllerClippingView : UIView
 @property  BOOL ignoreCornerRadiusUpdates

  // instance methods
  -[PGPictureInPictureViewControllerClippingView _setContinuousCornerRadius:]
  -[PGPictureInPictureViewControllerClippingView ignoreCornerRadiusUpdates]
  -[PGPictureInPictureViewControllerClippingView setIgnoreCornerRadiusUpdates:]


PGPictureInPictureViewControllerBackgroundView : UIView

PGHitTestExtendableView : UIView
 @property  UIView *hitTestExtenderView

  // instance methods
  -[PGHitTestExtendableView .cxx_destruct]
  -[PGHitTestExtendableView pointInside:withEvent:]
  -[PGHitTestExtendableView hitTestExtenderView]
  -[PGHitTestExtendableView setHitTestExtenderView:]


PGPictureInPictureViewController : UIViewController <UIPointerInteractionDelegate, PGCommandHandler, PTSettingsKeyPathObserver, PGPlaybackStateDiffConsumer>
 @property  UIPointerInteraction *pointerInteraction
 @property  @? waitForUIFinalizationCompletionBlock
 @property  double currentContentCornerRadius
 @property  long long controlsStyle
 @property  PGHostedWindowHostingHandle *hostedWindowHostingHandle
 @property  {CGSize=dd} microPIPSize
 @property  PGHostedWindowHostingHandle *microPIPHostedWindowHostingHandle
 @property  NSArray *menuItems
 @property  <PGPictureInPictureViewControllerDelegate> *delegate
 @property  BOOL interrupted
 @property  PGControlsViewModel *viewModel
 @property  PGPictureInPictureApplication *application
 @property  NSString *sourceSceneSessionPersistentIdentifier
 @property  <PGPictureInPictureViewControllerContentContainer> *contentContainer
 @property  BOOL canStartShowingChrome
 @property  PGPictureInPictureViewController *tetheredViewController
 @property  PGPictureInPictureViewController *tetheringViewController
 @property  long long tetheringMode
 @property  long long contentType
 @property  UIView *contentContainerView
 @property  BOOL interactivelyResizing
 @property  double preferredMinimumWidth
 @property  {CGSize=dd} minimumStashTabSize
 @property  BOOL stashed
 @property  BOOL prefersStashTabSuppressed
 @property  BOOL wantsStashTabSuppression
 @property  BOOL isStashTabHidden
 @property  BOOL prefersIdleTimerDisabled
 @property  BOOL prefersHiddenFromClonedDisplay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PGPictureInPictureViewController tetherViewController:toViewController:mode:]
  +[PGPictureInPictureViewController defaultContentCornerRadius]
  +[PGPictureInPictureViewController animateViewWithAnimationType:initialSpringVelocity:animations:completion:]

  // instance methods
  -[PGPictureInPictureViewController settings:changedValueForKeyPath:]
  -[PGPictureInPictureViewController isInterrupted]
  -[PGPictureInPictureViewController setPointerInteraction:]
  -[PGPictureInPictureViewController preferredInterfaceOrientationForPresentation]
  -[PGPictureInPictureViewController pointerInteraction]
  -[PGPictureInPictureViewController hostedWindowHostingHandle]
  -[PGPictureInPictureViewController pointerInteraction:styleForRegion:]
  -[PGPictureInPictureViewController preferredContentSize]
  -[PGPictureInPictureViewController setHostedWindowHostingHandle:]
  -[PGPictureInPictureViewController application]
  -[PGPictureInPictureViewController initWithCoder:]
  -[PGPictureInPictureViewController viewWillLayoutSubviews]
  -[PGPictureInPictureViewController .cxx_destruct]
  -[PGPictureInPictureViewController viewDidLoad]
  -[PGPictureInPictureViewController setDelegate:]
  -[PGPictureInPictureViewController viewModel]
  -[PGPictureInPictureViewController initWithNibName:bundle:]
  -[PGPictureInPictureViewController shouldAutorotate]
  -[PGPictureInPictureViewController menuItems]
  -[PGPictureInPictureViewController contentType]
  -[PGPictureInPictureViewController _newShadowView]
  -[PGPictureInPictureViewController _updateCornerRadii]
  -[PGPictureInPictureViewController setPreferredContentSize:]
  -[PGPictureInPictureViewController stashed]
  -[PGPictureInPictureViewController delegate]
  -[PGPictureInPictureViewController dealloc]
  -[PGPictureInPictureViewController contentContainerView]
  -[PGPictureInPictureViewController setInterrupted:]
  -[PGPictureInPictureViewController loadView]
  -[PGPictureInPictureViewController setMenuItems:]
  -[PGPictureInPictureViewController controlsStyle]
  -[PGPictureInPictureViewController sourceSceneSessionPersistentIdentifier]
  -[PGPictureInPictureViewController handleCommand:]
  -[PGPictureInPictureViewController setInteractivelyResizing:]
  -[PGPictureInPictureViewController showsPictureInPictureUnavailableIndicator]
  -[PGPictureInPictureViewController setShowsPictureInPictureUnavailableIndicator:]
  -[PGPictureInPictureViewController isInteractivelyResizing]
  -[PGPictureInPictureViewController updatePlaybackStateWithDiff:]
  -[PGPictureInPictureViewController hostedWindowSizeChangeBegan]
  -[PGPictureInPictureViewController hostedWindowSizeChangeEnded]
  -[PGPictureInPictureViewController preferredMinimumWidth]
  -[PGPictureInPictureViewController deactivateAnalyticsSessionIfNeeded]
  -[PGPictureInPictureViewController notePictureInPictureStartedAutomatically:]
  -[PGPictureInPictureViewController flashControls]
  -[PGPictureInPictureViewController performSuspendAnimationWithCompletionHandler:]
  -[PGPictureInPictureViewController performResumeAnimationWithCompletionHandler:]
  -[PGPictureInPictureViewController notePictureInPictureWillStopForAppRequest:preferredFullScreenRestore:]
  -[PGPictureInPictureViewController performStopAnimated:withFinalInterfaceOrientation:finalLayerFrame:completionHandler:]
  -[PGPictureInPictureViewController initWithApplication:sourceSceneSessionPersistentIdentifier:controlsStyle:]
  -[PGPictureInPictureViewController setAnalyticsDelegate:analyticsSourceUUID:]
  -[PGPictureInPictureViewController prepareStartAnimationWithInitialInterfaceOrientation:initialLayerFrame:completionHandler:]
  -[PGPictureInPictureViewController performStartAnimated:withCompletionHandler:]
  -[PGPictureInPictureViewController performRotateAnimationWithRotation:completionHandler:]
  -[PGPictureInPictureViewController prepareStopAnimationWithCompletionHandler:]
  -[PGPictureInPictureViewController prefersIdleTimerDisabled]
  -[PGPictureInPictureViewController setStashProgress:]
  -[PGPictureInPictureViewController _handleTapWhileStashedGestureRecognizer:]
  -[PGPictureInPictureViewController _updatePrefersIdleTimerDisabled]
  -[PGPictureInPictureViewController acquireInterfaceOrientationLock]
  -[PGPictureInPictureViewController relinquishInterfaceOrientationLock]
  -[PGPictureInPictureViewController setStashed:]
  -[PGPictureInPictureViewController showChrome:animated:]
  -[PGPictureInPictureViewController _insertContentContainerViewIfNeeded]
  -[PGPictureInPictureViewController _resetStashTabViewsIfPossible]
  -[PGPictureInPictureViewController setMinimumStashTabSize:]
  -[PGPictureInPictureViewController setTetheredViewController:mode:]
  -[PGPictureInPictureViewController setTetheringViewController:mode:]
  -[PGPictureInPictureViewController _noteTetheringDidUpdate]
  -[PGPictureInPictureViewController _loadShadowViewIfNeeded]
  -[PGPictureInPictureViewController _loadTabShadowViewIfNeeded]
  -[PGPictureInPictureViewController currentContentCornerRadius]
  -[PGPictureInPictureViewController _updateStashTabStateWithBehavior:]
  -[PGPictureInPictureViewController _setStashedTabHidden:left:]
  -[PGPictureInPictureViewController _addMaskViewSubviewIfNeeded]
  -[PGPictureInPictureViewController _layoutStashTabViewsIfNeeded]
  -[PGPictureInPictureViewController _setPortalActive:left:]
  -[PGPictureInPictureViewController _setStashMaskActive:]
  -[PGPictureInPictureViewController _updateContentCornerRadiusForMaskActive:]
  -[PGPictureInPictureViewController _performStartAnimationWithCompletionHandler:]
  -[PGPictureInPictureViewController _performStopAnimationWithFinalInterfaceOrientation:finalLayerFrame:completionHandler:]
  -[PGPictureInPictureViewController tetheringViewController]
  -[PGPictureInPictureViewController _updatePointerEffect]
  -[PGPictureInPictureViewController _applyShadowSettingsToView:]
  -[PGPictureInPictureViewController canStartShowingChrome]
  -[PGPictureInPictureViewController setContentContainer:]
  -[PGPictureInPictureViewController setCanStartShowingChrome:]
  -[PGPictureInPictureViewController setContentCornerRadius:animated:]
  -[PGPictureInPictureViewController updateHostedWindowSize:]
  -[PGPictureInPictureViewController setPrefersStashTabSuppressed:]
  -[PGPictureInPictureViewController wantsStashTabSuppression]
  -[PGPictureInPictureViewController isStashTabHidden]
  -[PGPictureInPictureViewController setStashTabHidden:left:withSpringBehavior:]
  -[PGPictureInPictureViewController setContentViewHidden:]
  -[PGPictureInPictureViewController setCurrentContentCornerRadius:]
  -[PGPictureInPictureViewController contentContainer]
  -[PGPictureInPictureViewController tetheredViewController]
  -[PGPictureInPictureViewController tetheringMode]
  -[PGPictureInPictureViewController minimumStashTabSize]
  -[PGPictureInPictureViewController prefersStashTabSuppressed]
  -[PGPictureInPictureViewController prefersHiddenFromClonedDisplay]
  -[PGPictureInPictureViewController waitForUIFinalizationCompletionBlock]
  -[PGPictureInPictureViewController setWaitForUIFinalizationCompletionBlock:]
  -[PGPictureInPictureViewController microPIPSize]
  -[PGPictureInPictureViewController setMicroPIPSize:]
  -[PGPictureInPictureViewController microPIPHostedWindowHostingHandle]
  -[PGPictureInPictureViewController setMicroPIPHostedWindowHostingHandle:]


PGPlaybackState : NSObject <PGMutablePlaybackStateFaceTimeSupport, PGMutablePlaybackStateSecurityCameraSupport, PGPlaybackStateDiffConsumer, PGMutablePlaybackState, NSCopying>
 @property  BOOL supportsFaceTimeActions
 @property  BOOL cameraActive
 @property  BOOL canSwitchCamera
 @property  BOOL microphoneMuted
 @property  BOOL disablesLayerCloning
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL cameraHasMicrophone
 @property  BOOL disablesLayerCloning
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSMutableDictionary *mutableDictionary
 @property  NSDictionary *dictionaryRepresentation
 @property  BOOL supportsMicroPIP
 @property  long long contentType
 @property  double elapsedTime
 @property  double contentDuration
 @property  long long timeControlStatus
 @property  double playbackRate
 @property  BOOL muted
 @property  BOOL requiresLinearPlayback
 @property  BOOL hasInvalidTiming
 @property  BOOL routingVideoToHostedWindow
 @property  PGPlaybackStatePrerollAttributes *prerollAttributes
 @property  double normalizedProgress
 @property  long long backgroundAudioPolicy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PGPlaybackState defaultValueForKey:]
  +[PGPlaybackState keysForEqualityOfNumberValues]

  // instance methods
  -[PGPlaybackState _setBool:forKey:]
  -[PGPlaybackState _setInteger:forKey:]
  -[PGPlaybackState setMicrophoneMuted:]
  -[PGPlaybackState playbackRate]
  -[PGPlaybackState setMuted:]
  -[PGPlaybackState isMuted]
  -[PGPlaybackState elapsedTime]
  -[PGPlaybackState .cxx_destruct]
  -[PGPlaybackState dictionaryRepresentation]
  -[PGPlaybackState succinctDescriptionBuilder]
  -[PGPlaybackState setContentType:]
  -[PGPlaybackState mutableDictionary]
  -[PGPlaybackState descriptionBuilderWithMultilinePrefix:]
  -[PGPlaybackState contentDuration]
  -[PGPlaybackState isEqual:]
  -[PGPlaybackState descriptionWithMultilinePrefix:]
  -[PGPlaybackState contentType]
  -[PGPlaybackState _numberForKey:]
  -[PGPlaybackState _dictionaryForKey:]
  -[PGPlaybackState succinctDescription]
  -[PGPlaybackState setContentDuration:]
  -[PGPlaybackState initWithDictionary:]
  -[PGPlaybackState _stringForKey:]
  -[PGPlaybackState isMicrophoneMuted]
  -[PGPlaybackState _boolForKey:]
  -[PGPlaybackState copyWithZone:]
  -[PGPlaybackState timeControlStatus]
  -[PGPlaybackState _setStateValue:forKey:]
  -[PGPlaybackState prerollAttributes]
  -[PGPlaybackState requiresLinearPlayback]
  -[PGPlaybackState setRequiresLinearPlayback:]
  -[PGPlaybackState setPlaybackRate:elapsedTime:timeControlStatus:]
  -[PGPlaybackState setPrerollAttributes:]
  -[PGPlaybackState isRoutingVideoToHostedWindow]
  -[PGPlaybackState setRoutingVideoToHostedWindow:]
  -[PGPlaybackState setBackgroundAudioPolicy:]
  -[PGPlaybackState supportsMicroPIP]
  -[PGPlaybackState appendDescriptionForKey:value:toBuilder:]
  -[PGPlaybackState normalizedProgress]
  -[PGPlaybackState updatePlaybackStateWithDiff:]
  -[PGPlaybackState backgroundAudioPolicy]
  -[PGPlaybackState disablesLayerCloning]
  -[PGPlaybackState _ensureMutableDictionary]
  -[PGPlaybackState isEquivalentToPlaybackState:]
  -[PGPlaybackState hasInvalidTiming]
  -[PGPlaybackState _integerForKey:]
  -[PGPlaybackState _doubleForKey:]
  -[PGPlaybackState anchorContentTime]
  -[PGPlaybackState anchorWallTime]
  -[PGPlaybackState _setDouble:forKey:]
  -[PGPlaybackState _setDictionaryOrNotFound:forKey:]
  -[PGPlaybackState diffFromPlaybackState:]
  -[PGPlaybackState supportsFaceTimeActions]
  -[PGPlaybackState setSupportsFaceTimeActions:]
  -[PGPlaybackState isCameraActive]
  -[PGPlaybackState setCameraActive:]
  -[PGPlaybackState canSwitchCamera]
  -[PGPlaybackState setCanSwitchCamera:]
  -[PGPlaybackState setDisablesLayerCloning:]
  -[PGPlaybackState cameraHasMicrophone]
  -[PGPlaybackState setCameraHasMicrophone:]


PGPlaybackStatePrerollAttributes : NSObject
 @property  NSDictionary *dictionaryRepresentation
 @property  long long contentType
 @property  double requiredLinearPlaybackEndTime
 @property  UIColor *preferredTintColor

  // class methods
  +[PGPlaybackStatePrerollAttributes prerollAttributesForAdContentWithRequiredLinearPlaybackEndTime:preferredTintColor:]
  +[PGPlaybackStatePrerollAttributes prerollAttributesForSponsoredContentWithRequiredLinearPlaybackEndTime:preferredTintColor:]

  // instance methods
  -[PGPlaybackStatePrerollAttributes .cxx_destruct]
  -[PGPlaybackStatePrerollAttributes dictionaryRepresentation]
  -[PGPlaybackStatePrerollAttributes succinctDescriptionBuilder]
  -[PGPlaybackStatePrerollAttributes descriptionBuilderWithMultilinePrefix:]
  -[PGPlaybackStatePrerollAttributes isEqual:]
  -[PGPlaybackStatePrerollAttributes descriptionWithMultilinePrefix:]
  -[PGPlaybackStatePrerollAttributes contentType]
  -[PGPlaybackStatePrerollAttributes succinctDescription]
  -[PGPlaybackStatePrerollAttributes initWithDictionary:]
  -[PGPlaybackStatePrerollAttributes preferredTintColor]
  -[PGPlaybackStatePrerollAttributes requiredLinearPlaybackEndTime]
  -[PGPlaybackStatePrerollAttributes initWithRequiredLinearPlaybackEndTime:preferredTintColor:contentType:]
  -[PGPlaybackStatePrerollAttributes preferredTintColorDescription]


PGBackgroundPIPService : NSObject <BSServiceConnectionListenerDelegate, _PGBackgroundPIPServiceConnectionTargetDelegate>
 @property  <PGBackgroundPIPServiceDelegate> *delegate
 @property  NSSet *identifiersForAuthorizedActivitySessions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PGBackgroundPIPService listener:didReceiveConnection:withContext:]
  -[PGBackgroundPIPService .cxx_destruct]
  -[PGBackgroundPIPService setDelegate:]
  -[PGBackgroundPIPService init]
  -[PGBackgroundPIPService delegate]
  -[PGBackgroundPIPService dealloc]
  -[PGBackgroundPIPService startListener]
  -[PGBackgroundPIPService hasAcquiredAuthorizationForActivitySessionWithIdentifier:appBundleIdentifier:]
  -[PGBackgroundPIPService identifiersForAuthorizedActivitySessions]
  -[PGBackgroundPIPService revokeAuthorizationActivitySessionWithIdentifier:]
  -[PGBackgroundPIPService pipDidStartForRemoteObject:]
  -[PGBackgroundPIPService pipDidStopForRemoteObject:]
  -[PGBackgroundPIPService backgroundPIPTargetDidInvalidate:]
  -[PGBackgroundPIPService backgroundPIPTargetRequestsAuthorization:]
  -[PGBackgroundPIPService _handleInvalidatedTarget:]
  -[PGBackgroundPIPService _targetForIdentifier:]


PGStashedMaskView : UIView
 @property  UIView *tabShadowView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} tabViewBounds
 @property  {CGSize=dd} minimumStashTabSize

  // instance methods
  -[PGStashedMaskView _setContinuousCornerRadius:]
  -[PGStashedMaskView .cxx_destruct]
  -[PGStashedMaskView layoutSubviews]
  -[PGStashedMaskView _continuousCornerRadius]
  -[PGStashedMaskView initWithFrame:]
  -[PGStashedMaskView pointInside:withEvent:]
  -[PGStashedMaskView setMinimumStashTabSize:]
  -[PGStashedMaskView tabViewBounds]
  -[PGStashedMaskView setTabHidden:left:]
  -[PGStashedMaskView initWithFrame:minimumStashTabSize:]
  -[PGStashedMaskView setTabShadowView:]
  -[PGStashedMaskView minimumStashTabSize]
  -[PGStashedMaskView _mainBodyBounds]
  -[PGStashedMaskView tabShadowView]


PGPictureInPictureProxy : NSObject <PGPictureInPictureExportedInterface>
 @property  BOOL stashed
 @property  @? _pipStopUserInterfaceRestoreContinuationBlock
 @property  @? _pipStopFinalStageCompletionHandler
 @property  long long controlsStyle
 @property  BOOL readyForDisplay
 @property  UIViewController<PGPictureInPictureViewController> *viewController
 @property  <PGPictureInPictureProxyDelegate> *delegate
 @property  BOOL pictureInPicturePossible
 @property  BOOL pictureInPictureActive
 @property  BOOL pictureInPictureSuspended
 @property  BOOL pictureInPictureInterrupted
 @property  BOOL pictureInPictureShouldStartWhenEnteringBackground
 @property  BOOL pictureInPictureWasStartedWhenEnteringBackground
 @property  PGPlaybackState *playbackState
 @property  BOOL pictureInPictureStashedOrUnderLock
 @property  unsigned long resourcesUsageReductionReasons
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PGPictureInPictureProxy isPictureInPictureActive]
  +[PGPictureInPictureProxy isPictureInPictureSupported]
  +[PGPictureInPictureProxy pictureInPictureProxyWithControlsStyle:viewController:]
  +[PGPictureInPictureProxy _updatePictureInPictureActive:]

  // instance methods
  -[PGPictureInPictureProxy setMicrophoneMuted:]
  -[PGPictureInPictureProxy playbackProgress]
  -[PGPictureInPictureProxy playbackRate]
  -[PGPictureInPictureProxy playbackState]
  -[PGPictureInPictureProxy viewController]
  -[PGPictureInPictureProxy isReadyForDisplay]
  -[PGPictureInPictureProxy isPictureInPictureActive]
  -[PGPictureInPictureProxy setReadyForDisplay:]
  -[PGPictureInPictureProxy startPictureInPicture]
  -[PGPictureInPictureProxy pictureInPictureWasStartedWhenEnteringBackground]
  -[PGPictureInPictureProxy .cxx_destruct]
  -[PGPictureInPictureProxy _establishConnection]
  -[PGPictureInPictureProxy setDelegate:]
  -[PGPictureInPictureProxy loadedTimeRanges]
  -[PGPictureInPictureProxy init]
  -[PGPictureInPictureProxy menuItems]
  -[PGPictureInPictureProxy setLoadedTimeRanges:]
  -[PGPictureInPictureProxy _activationState]
  -[PGPictureInPictureProxy delegate]
  -[PGPictureInPictureProxy _isInactive]
  -[PGPictureInPictureProxy dealloc]
  -[PGPictureInPictureProxy isMicrophoneMuted]
  -[PGPictureInPictureProxy _updatePlaybackStateIfNeeded]
  -[PGPictureInPictureProxy _resetInternalState]
  -[PGPictureInPictureProxy isPictureInPicturePossible]
  -[PGPictureInPictureProxy isPictureInPictureInterrupted]
  -[PGPictureInPictureProxy observeValueForKeyPath:ofObject:change:context:]
  -[PGPictureInPictureProxy setMenuItems:]
  -[PGPictureInPictureProxy stopPictureInPictureAndRestoreUserInterface:]
  -[PGPictureInPictureProxy isPictureInPictureSuspended]
  -[PGPictureInPictureProxy setClientSessionIdentifier:]
  -[PGPictureInPictureProxy viewFrameForInteractiveTransitionAnimationWhenEnteringBackgroundDidChangeForViewController]
  -[PGPictureInPictureProxy setPictureInPictureShouldStartWhenEnteringBackground:]
  -[PGPictureInPictureProxy controlsStyle]
  -[PGPictureInPictureProxy setControlsStyle:]
  -[PGPictureInPictureProxy updatePlaybackStateUsingBlock:]
  -[PGPictureInPictureProxy initWithControlsStyle:viewController:]
  -[PGPictureInPictureProxy preferredContentSizeDidChangeForViewController]
  -[PGPictureInPictureProxy actionButtonTapped]
  -[PGPictureInPictureProxy _applicationDidBecomeActive]
  -[PGPictureInPictureProxy handleCommand:]
  -[PGPictureInPictureProxy rotateContentContainer:withCompletionHandler:]
  -[PGPictureInPictureProxy setScreenSharingTitle:avatar:]
  -[PGPictureInPictureProxy pictureInPictureStartRequestedAnimated:withCompletionHandler:]
  -[PGPictureInPictureProxy pictureInPictureStopRequestedAnimated:withCompletionHandler:]
  -[PGPictureInPictureProxy beginTwoStagePictureInPictureStopByRestoringUserInterfaceWithCompletionHandler:]
  -[PGPictureInPictureProxy endTwoStagePictureInPictureStopWithCompletionBlock:]
  -[PGPictureInPictureProxy pictureInPictureCancelRequestedAnimated:withCompletionHandler:]
  -[PGPictureInPictureProxy updatePictureInPicturePossible:]
  -[PGPictureInPictureProxy pictureInPictureInvalidated]
  -[PGPictureInPictureProxy updateHostedWindowSize:animationType:initialSpringVelocity:synchronizationFence:]
  -[PGPictureInPictureProxy hostedWindowSizeChangeBegan]
  -[PGPictureInPictureProxy hostedWindowSizeChangeEnded]
  -[PGPictureInPictureProxy setStashedOrUnderLock:]
  -[PGPictureInPictureProxy setResourcesUsageReductionReasons:]
  -[PGPictureInPictureProxy _sourceScene]
  -[PGPictureInPictureProxy setStashed:]
  -[PGPictureInPictureProxy disablesLayerCloning]
  -[PGPictureInPictureProxy isCameraActive]
  -[PGPictureInPictureProxy setCameraActive:]
  -[PGPictureInPictureProxy canSwitchCamera]
  -[PGPictureInPictureProxy setCanSwitchCamera:]
  -[PGPictureInPictureProxy setDisablesLayerCloning:]
  -[PGPictureInPictureProxy _initializeWithControlsStyle:viewController:reason:]
  -[PGPictureInPictureProxy _handleSceneConnectionChangedNotification:]
  -[PGPictureInPictureProxy _stopObservingWindowSceneActivationState]
  -[PGPictureInPictureProxy _isInCallService]
  -[PGPictureInPictureProxy _updatePlaybackStateContentTypeIfNeeded]
  -[PGPictureInPictureProxy _viewFrameForInteractiveTransitionAnimationWhenEnteringBackgroundDidChangeForViewControllerWithReason:]
  -[PGPictureInPictureProxy _updateAutoPIPSettingsAndNotifyRemoteObjectWithReason:]
  -[PGPictureInPictureProxy _updateIsInterruptedIfNeededForReason:]
  -[PGPictureInPictureProxy _updateScreenSharingInfoIfNeeded]
  -[PGPictureInPictureProxy _setResourcesUsageReductionReasons:]
  -[PGPictureInPictureProxy _setPictureInPicturePossible:]
  -[PGPictureInPictureProxy _setStashedOrUnderLock:reason:]
  -[PGPictureInPictureProxy _setInterruptedForDefaultReason:initiatedByRemoteObject:]
  -[PGPictureInPictureProxy _setActivationState:reason:]
  -[PGPictureInPictureProxy _updateAutoPIPSettingsAndNotifyRemoteObjectIfNeeded]
  -[PGPictureInPictureProxy _startBackgroundPIPWhilePrewarmingIfNeeded]
  -[PGPictureInPictureProxy _expectedScene]
  -[PGPictureInPictureProxy _viewFrameForTransitionAnimationAssumeApplicationActive:]
  -[PGPictureInPictureProxy _addWindowSceneActivationStateObserverIfNeeded:]
  -[PGPictureInPictureProxy _windowSceneForInteractiveTransitionAnimationWhenEnteringBackgroundDidChangeForViewControllerWithReason:]
  -[PGPictureInPictureProxy _bestKnownConnectedSceneSessionPersistentIdentifier]
  -[PGPictureInPictureProxy _startPictureInPictureAnimated:enteringBackground:reason:withCompletionHandler:]
  -[PGPictureInPictureProxy _cancelPrewarming]
  -[PGPictureInPictureProxy _invalidateConnectionForFailure]
  -[PGPictureInPictureProxy _stopPictureInPictureAnimated:restoreUserInterface:withCompletionHandler:]
  -[PGPictureInPictureProxy _updateFaceTimePlaybackStateUsingBlock:]
  -[PGPictureInPictureProxy clientSessionIdentifier]
  -[PGPictureInPictureProxy setControlsStyle:animated:withCompletionHandler:]
  -[PGPictureInPictureProxy _setMaybeNeedsUpdatePlaybackState]
  -[PGPictureInPictureProxy _removeViewControllerFromHostedWindowIfNeeded]
  -[PGPictureInPictureProxy __coordinateStartAnimated:withCompletionHandler:]
  -[PGPictureInPictureProxy __updateCancellationPolicyWithSuccessHandler:failureHandler:]
  -[PGPictureInPictureProxy _isViewControllerWindowSceneConsideredActive]
  -[PGPictureInPictureProxy __didStartWithAnimationType:completionHandler:]
  -[PGPictureInPictureProxy __actuallyStartWithAnimationType:successHandler:failureHandler:]
  -[PGPictureInPictureProxy __setupStartWithAnimationType:initialLayerFrame:successHandler:failureHandler:]
  -[PGPictureInPictureProxy _interfaceOrientationForTransitionAnimationAssumeApplicationActive:]
  -[PGPictureInPictureProxy _addViewControllerToHostedWindowIfNeeded]
  -[PGPictureInPictureProxy _setPictureInPictureActive:]
  -[PGPictureInPictureProxy __actuallyStopAnimated:reason:finalLayerFrame:finalInterfaceOrientation:completionHandler:]
  -[PGPictureInPictureProxy __restoreUserInterfaceAnimated:reason:completionHandler:]
  -[PGPictureInPictureProxy __setupStopAnimated:needsApplicationActivation:waitForApplicationActivation:successHandler:failureHandler:]
  -[PGPictureInPictureProxy __actuallyStopAnimated:reason:completionHandler:]
  -[PGPictureInPictureProxy __setupStopAnimated:needsApplicationActivation:successHandler:failureHandler:]
  -[PGPictureInPictureProxy __waitForApplicationActivationWithSuccessHandler:failureHandler:]
  -[PGPictureInPictureProxy _beginDeactivatingPictureInPictureWithAnimationType:stopReason:]
  -[PGPictureInPictureProxy _endDeactivatingPictureInPictureIfNeededWithAnimationType:stopReason:cleanupHandlerOrNil:]
  -[PGPictureInPictureProxy __cleanupWithCompletionHandler:]
  -[PGPictureInPictureProxy _executeDelegateCallbackBlock:assumeApplicationActive:]
  -[PGPictureInPictureProxy _isViewControllerWindowSceneActive]
  -[PGPictureInPictureProxy _deactivateIfNeededForInterruptedOrInvalidatedConnection]
  -[PGPictureInPictureProxy _generatePlaybackStateDiffAndMarkAsSent]
  -[PGPictureInPictureProxy _beginDeactivatingPictureInPicture]
  -[PGPictureInPictureProxy _endDeactivatingPictureInPictureIfNeededWithAnimationType:stopReason:]
  -[PGPictureInPictureProxy _updateIsInterruptedIfNeededForReason:initiatedByRemoteObject:]
  -[PGPictureInPictureProxy _legacyPictureInPictureInterruptionBegan]
  -[PGPictureInPictureProxy _legacyPictureInPictureInterruptionEnded]
  -[PGPictureInPictureProxy set_pipStopUserInterfaceRestoreContinuationBlock:]
  -[PGPictureInPictureProxy _twoStageStopForPictureInPictureRestoreWithContinueAfterUserInterfaceRestoreBlock:completionHandler:]
  -[PGPictureInPictureProxy set_pipStopFinalStageCompletionHandler:]
  -[PGPictureInPictureProxy _notifyActionButtonTapped]
  -[PGPictureInPictureProxy _prewarmAndStartAfterTimeout]
  -[PGPictureInPictureProxy _setPictureInPictureSuspended:]
  -[PGPictureInPictureProxy skipForwardButtonTappedWithTimeInterval:]
  -[PGPictureInPictureProxy pictureInPictureShouldStartWhenEnteringBackground]
  -[PGPictureInPictureProxy windowSceneForInteractiveTransitionAnimationWhenEnteringBackgroundDidChangeForViewController]
  -[PGPictureInPictureProxy setPlaybackProgress:playbackRate:]
  -[PGPictureInPictureProxy automaticallyInterruptsForLegacyFaceTimeBehaviors]
  -[PGPictureInPictureProxy setAutomaticallyInterruptsForLegacyFaceTimeBehaviors:]
  -[PGPictureInPictureProxy _canBeShownInMicroPIPMode]
  -[PGPictureInPictureProxy isPictureInPictureStashedOrUnderLock]
  -[PGPictureInPictureProxy resourcesUsageReductionReasons]
  -[PGPictureInPictureProxy isPictureInPictureStashed]
  -[PGPictureInPictureProxy _pipStopUserInterfaceRestoreContinuationBlock]
  -[PGPictureInPictureProxy _pipStopFinalStageCompletionHandler]


_PGPictureInPictureConnectionExportedObject : NSObject <PGPictureInPictureExportedInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_PGPictureInPictureConnectionExportedObject .cxx_destruct]
  -[_PGPictureInPictureConnectionExportedObject dealloc]
  -[_PGPictureInPictureConnectionExportedObject actionButtonTapped]
  -[_PGPictureInPictureConnectionExportedObject handleCommand:]
  -[_PGPictureInPictureConnectionExportedObject pictureInPictureStartRequestedAnimated:withCompletionHandler:]
  -[_PGPictureInPictureConnectionExportedObject pictureInPictureStopRequestedAnimated:withCompletionHandler:]
  -[_PGPictureInPictureConnectionExportedObject beginTwoStagePictureInPictureStopByRestoringUserInterfaceWithCompletionHandler:]
  -[_PGPictureInPictureConnectionExportedObject endTwoStagePictureInPictureStopWithCompletionBlock:]
  -[_PGPictureInPictureConnectionExportedObject pictureInPictureCancelRequestedAnimated:withCompletionHandler:]
  -[_PGPictureInPictureConnectionExportedObject updatePictureInPicturePossible:]
  -[_PGPictureInPictureConnectionExportedObject pictureInPictureInvalidated]
  -[_PGPictureInPictureConnectionExportedObject updateHostedWindowSize:animationType:initialSpringVelocity:synchronizationFence:]
  -[_PGPictureInPictureConnectionExportedObject hostedWindowSizeChangeBegan]
  -[_PGPictureInPictureConnectionExportedObject hostedWindowSizeChangeEnded]
  -[_PGPictureInPictureConnectionExportedObject setStashedOrUnderLock:]
  -[_PGPictureInPictureConnectionExportedObject setResourcesUsageReductionReasons:]
  -[_PGPictureInPictureConnectionExportedObject initWithPictureInPictureProxy:]


PGStashView : UIView
 @property  double blurProgress
 @property  double stashedTabWidth

  // instance methods
  -[PGStashView _setContinuousCornerRadius:]
  -[PGStashView .cxx_destruct]
  -[PGStashView blurProgress]
  -[PGStashView layoutSubviews]
  -[PGStashView setBlurProgress:]
  -[PGStashView initWithFrame:]
  -[PGStashView setStashedTabWidth:]
  -[PGStashView setChevronHidden:left:]
  -[PGStashView resetChevronState]
  -[PGStashView layoutStashChevrons]
  -[PGStashView stashedTabWidth]


__PGView : UIView
 @property  NSArray *animatedLayerProperties

  // instance methods
  -[__PGView setAnimatedLayerProperties:]
  -[__PGView animatedLayerProperties]
  -[__PGView .cxx_destruct]
  -[__PGView _shouldAnimatePropertyWithKey:]


_PGButton : UIButton
 @property  PGButtonView *buttonView

  // instance methods
  -[_PGButton setImage:forState:]
  -[_PGButton hitTest:withEvent:]
  -[_PGButton setTitle:forState:]
  -[_PGButton imageRectForContentRect:]
  -[_PGButton hitRect]
  -[_PGButton titleRectForContentRect:]
  -[_PGButton setButtonView:]
  -[_PGButton .cxx_destruct]
  -[_PGButton tintColorDidChange]
  -[_PGButton buttonView]


PGButtonView : PGMaterialView <UIPointerInteractionDelegate>
 @property  _PGButton *actualButton
 @property  BOOL highlighted
 @property  UIViewPropertyAnimator *highlightAnimator
 @property  UIPointerInteraction *pointerInteraction
 @property  <PGButtonViewDelegate> *delegate
 @property  NSString *systemImageName
 @property  UIImage *image
 @property  BOOL circular
 @property  NSString *text
 @property  UIFont *font
 @property  BOOL enabled
 @property  double glyphSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PGButtonView layerClass]
  +[PGButtonView buttonWithDelegate:]
  +[PGButtonView disabledTintColor]
  +[PGButtonView enabledTintColor]

  // instance methods
  -[PGButtonView setHighlighted:]
  -[PGButtonView setPointerInteraction:]
  -[PGButtonView pointerInteraction]
  -[PGButtonView hitTest:withEvent:]
  -[PGButtonView pointerInteraction:styleForRegion:]
  -[PGButtonView setCircular:]
  -[PGButtonView setText:]
  -[PGButtonView setFont:]
  -[PGButtonView image]
  -[PGButtonView .cxx_destruct]
  -[PGButtonView systemImageName]
  -[PGButtonView sizeToFit]
  -[PGButtonView layoutSubviews]
  -[PGButtonView glyphSize]
  -[PGButtonView setDelegate:]
  -[PGButtonView isHighlighted]
  -[PGButtonView font]
  -[PGButtonView _handleTouchDown:]
  -[PGButtonView _handleTouchUpInside:]
  -[PGButtonView setSystemImageName:]
  -[PGButtonView accessibilityIdentifier]
  -[PGButtonView isEnabled]
  -[PGButtonView pointInside:withEvent:]
  -[PGButtonView delegate]
  -[PGButtonView setImage:]
  -[PGButtonView didMoveToWindow]
  -[PGButtonView setAccessibilityIdentifier:]
  -[PGButtonView dealloc]
  -[PGButtonView setEnabled:]
  -[PGButtonView text]
  -[PGButtonView isCircular]
  -[PGButtonView setGlyphSize:]
  -[PGButtonView highlightAnimator]
  -[PGButtonView setHighlightAnimator:]
  -[PGButtonView _handleDragEnter:]
  -[PGButtonView _handleDragExit:]
  -[PGButtonView _handleTouchUpOrCancel:]
  -[PGButtonView actualButton]
  -[PGButtonView _updateGlyphConfigurationIfNeeded]
  -[PGButtonView _updateForCircularAppearanceIfNeeded]
  -[PGButtonView _shouldHitTest]
  -[PGButtonView setActualButton:]


PGMobilePIPSettingsDomain : PTDomain
  // class methods
  +[PGMobilePIPSettingsDomain domainGroupName]
  +[PGMobilePIPSettingsDomain rootSettings]
  +[PGMobilePIPSettingsDomain domainName]
  +[PGMobilePIPSettingsDomain rootSettingsClass]


PGMobilePIPSettings : PTSettings
 @property  double shadowOpacity
 @property  double shadowRadius
 @property  double shadowOffsetX
 @property  double shadowOffsetY
 @property  double shadowContinuousCornerRadius

  // class methods
  +[PGMobilePIPSettings settingsControllerModule]

  // instance methods
  -[PGMobilePIPSettings setShadowRadius:]
  -[PGMobilePIPSettings setDefaultValues]
  -[PGMobilePIPSettings shadowRadius]
  -[PGMobilePIPSettings shadowOpacity]
  -[PGMobilePIPSettings setShadowOpacity:]
  -[PGMobilePIPSettings shadowOffsetX]
  -[PGMobilePIPSettings shadowOffsetY]
  -[PGMobilePIPSettings shadowContinuousCornerRadius]
  -[PGMobilePIPSettings setShadowOffsetX:]
  -[PGMobilePIPSettings setShadowOffsetY:]
  -[PGMobilePIPSettings setShadowContinuousCornerRadius:]


PGMicroPIPButtonView : UIView
 @property  PGHostedWindowHostingHandle *hostedWindowHostingHandle

  // class methods
  +[PGMicroPIPButtonView button]

  // instance methods
  -[PGMicroPIPButtonView hostedWindowHostingHandle]
  -[PGMicroPIPButtonView setHostedWindowHostingHandle:]
  -[PGMicroPIPButtonView .cxx_destruct]
  -[PGMicroPIPButtonView layoutSubviews]


PGBackdropView : __PGView
 @property  NSString *groupName
 @property  double gaussianBlurRadius
 @property  double backdropScale

  // class methods
  +[PGBackdropView layerClass]

  // instance methods
  -[PGBackdropView setGroupName:]
  -[PGBackdropView .cxx_destruct]
  -[PGBackdropView _updateFilters]
  -[PGBackdropView groupName]
  -[PGBackdropView initWithFrame:]
  -[PGBackdropView backdropScale]
  -[PGBackdropView dealloc]
  -[PGBackdropView setGaussianBlurRadius:]
  -[PGBackdropView setBackdropScale:]
  -[PGBackdropView gaussianBlurRadius]


PGMenuItem : NSObject <BSDescriptionProviding>
 @property  NSDictionary *dictionaryRepresentation
 @property  long long identifier
 @property  NSString *title
 @property  NSString *symbolName
 @property  @? action
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PGMenuItem .cxx_destruct]
  -[PGMenuItem symbolName]
  -[PGMenuItem dictionaryRepresentation]
  -[PGMenuItem succinctDescriptionBuilder]
  -[PGMenuItem descriptionBuilderWithMultilinePrefix:]
  -[PGMenuItem action]
  -[PGMenuItem descriptionWithMultilinePrefix:]
  -[PGMenuItem identifier]
  -[PGMenuItem succinctDescription]
  -[PGMenuItem title]
  -[PGMenuItem initWithDictionary:action:]
  -[PGMenuItem invokeAction]
  -[PGMenuItem initWithTitle:symbolName:action:]


PGControlsViewModel : NSObject <PGPlaybackStateDiffConsumer>
 @property  <PGControlsViewModelDelegate> *delegate
 @property  PGPlaybackState *playbackState
 @property  BOOL interrupted
 @property  long long secondsUntilPrerollSkippable
 @property  BOOL isPrerollSkippable
 @property  BOOL inActivitySession
 @property  NSString *screenSharingTitle
 @property  UIImage *screenSharingAvatar
 @property  PGControlsViewModelValues *values
 @property  double preferredMinimumWidth
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PGControlsViewModel isInterrupted]
  -[PGControlsViewModel values]
  -[PGControlsViewModel playbackState]
  -[PGControlsViewModel .cxx_destruct]
  -[PGControlsViewModel setDelegate:]
  -[PGControlsViewModel init]
  -[PGControlsViewModel delegate]
  -[PGControlsViewModel setInterrupted:]
  -[PGControlsViewModel handleRestoreButtonTapped]
  -[PGControlsViewModel secondsUntilPrerollSkippable]
  -[PGControlsViewModel isPrerollSkippable]
  -[PGControlsViewModel handleSkipPrerollButtonTapped]
  -[PGControlsViewModel handleSingleTap]
  -[PGControlsViewModel handleDoubleTap]
  -[PGControlsViewModel handleDoubleDoubleTap]
  -[PGControlsViewModel updatePlaybackStateWithDiff:]
  -[PGControlsViewModel recommendedUpdateCadenceForProgressBarWithWidthInPixels:]
  -[PGControlsViewModel preferredMinimumWidth]
  -[PGControlsViewModel handleActionButtonTapped]
  -[PGControlsViewModel handleSkipBackButtonTapped]
  -[PGControlsViewModel handleSkipForwardButtonTapped]
  -[PGControlsViewModel handleCancelButtonTapped]
  -[PGControlsViewModel setInActivitySession:]
  -[PGControlsViewModel setScreenSharingTitle:]
  -[PGControlsViewModel setScreenSharingAvatar:]
  -[PGControlsViewModel _updateViewModelValues]
  -[PGControlsViewModel isInActivitySession]
  -[PGControlsViewModel screenSharingTitle]
  -[PGControlsViewModel screenSharingAvatar]


PGControlsViewModelValues : NSObject <NSCopying>
 @property  NSMutableDictionary *dictionaryRepresentation
 @property  BOOL includesContentLoadingIndicator
 @property  BOOL includesWaitingToPlayIndicator
 @property  BOOL includesRestoreButton
 @property  BOOL includesCancelButton
 @property  BOOL includesActionButton
 @property  BOOL includesSkipBackButton
 @property  BOOL includesSkipForwardButton
 @property  BOOL includesLiveIndicatorBadge
 @property  BOOL includesProgressBar
 @property  BOOL progressBarShouldUpdate
 @property  BOOL controlsShouldAutoHide
 @property  BOOL includesSingleTapGestureRecognizer
 @property  BOOL includesDoubleTapGestureRecognizer
 @property  BOOL includesDoubleDoubleTapGestureRecognizer
 @property  NSString *restoreButtonSystemImageName
 @property  NSString *cancelButtonSystemImageName
 @property  NSString *actionButtonSystemImageName
 @property  NSString *skipBackButtonSystemImageName
 @property  NSString *skipForwardButtonSystemImageName
 @property  NSString *restoreButtonAccessibilityIdentifier
 @property  NSString *cancelButtonAccessibilityIdentifier
 @property  NSString *actionButtonAccessibilityIdentifier
 @property  NSString *skipBackButtonAccessibilityIdentifier
 @property  NSString *skipForwardButtonAccessibilityIdentifier
 @property  NSString *cancelButtonCustomText
 @property  UIImage *cancelButtonCustomImage
 @property  UIColor *actionButtonImageTintColor
 @property  UIColor *actionButtonBackgroundTintColor
 @property  UIColor *skipBackButtonImageTintColor
 @property  UIColor *skipBackButtonBackgroundTintColor
 @property  UIColor *skipForwardButtonImageTintColor
 @property  UIColor *skipForwardButtonBackgroundTintColor
 @property  UIColor *cancelButtonImageTintColor
 @property  UIColor *cancelButtonBackgroundTintColor
 @property  BOOL actionButtonsWantBackground
 @property  BOOL isSkipBackButtonEnabled
 @property  BOOL isActionButtonEnabled
 @property  BOOL isSkipForwardButtonEnabled
 @property  PGPlaybackStatePrerollAttributes *prerollAttributes
 @property  BOOL isPrerollActive
 @property  UIColor *prerollTintColor

  // class methods
  +[PGControlsViewModelValues defaultPrerollTintColor]

  // instance methods
  -[PGControlsViewModelValues _objectForKey:]
  -[PGControlsViewModelValues setValue:forKey:]
  -[PGControlsViewModelValues initWithDictionaryRepresentation:]
  -[PGControlsViewModelValues .cxx_destruct]
  -[PGControlsViewModelValues dictionaryRepresentation]
  -[PGControlsViewModelValues init]
  -[PGControlsViewModelValues isEqual:]
  -[PGControlsViewModelValues _boolForKey:]
  -[PGControlsViewModelValues copyWithZone:]
  -[PGControlsViewModelValues prerollAttributes]
  -[PGControlsViewModelValues isPrerollActive]
  -[PGControlsViewModelValues prerollTintColor]
  -[PGControlsViewModelValues includesWaitingToPlayIndicator]
  -[PGControlsViewModelValues includesSingleTapGestureRecognizer]
  -[PGControlsViewModelValues includesDoubleTapGestureRecognizer]
  -[PGControlsViewModelValues includesDoubleDoubleTapGestureRecognizer]
  -[PGControlsViewModelValues controlsShouldAutoHide]
  -[PGControlsViewModelValues includesContentLoadingIndicator]
  -[PGControlsViewModelValues includesRestoreButton]
  -[PGControlsViewModelValues includesSkipBackButton]
  -[PGControlsViewModelValues includesActionButton]
  -[PGControlsViewModelValues includesSkipForwardButton]
  -[PGControlsViewModelValues includesCancelButton]
  -[PGControlsViewModelValues includesLiveIndicatorBadge]
  -[PGControlsViewModelValues isSkipBackButtonEnabled]
  -[PGControlsViewModelValues isActionButtonEnabled]
  -[PGControlsViewModelValues isSkipForwardButtonEnabled]
  -[PGControlsViewModelValues actionButtonsWantBackground]
  -[PGControlsViewModelValues cancelButtonImageTintColor]
  -[PGControlsViewModelValues cancelButtonBackgroundTintColor]
  -[PGControlsViewModelValues skipBackButtonImageTintColor]
  -[PGControlsViewModelValues skipBackButtonBackgroundTintColor]
  -[PGControlsViewModelValues skipForwardButtonImageTintColor]
  -[PGControlsViewModelValues skipForwardButtonBackgroundTintColor]
  -[PGControlsViewModelValues actionButtonImageTintColor]
  -[PGControlsViewModelValues actionButtonBackgroundTintColor]
  -[PGControlsViewModelValues cancelButtonSystemImageName]
  -[PGControlsViewModelValues restoreButtonSystemImageName]
  -[PGControlsViewModelValues skipBackButtonSystemImageName]
  -[PGControlsViewModelValues actionButtonSystemImageName]
  -[PGControlsViewModelValues skipForwardButtonSystemImageName]
  -[PGControlsViewModelValues cancelButtonAccessibilityIdentifier]
  -[PGControlsViewModelValues restoreButtonAccessibilityIdentifier]
  -[PGControlsViewModelValues skipBackButtonAccessibilityIdentifier]
  -[PGControlsViewModelValues actionButtonAccessibilityIdentifier]
  -[PGControlsViewModelValues skipForwardButtonAccessibilityIdentifier]
  -[PGControlsViewModelValues cancelButtonCustomImage]
  -[PGControlsViewModelValues includesProgressBar]
  -[PGControlsViewModelValues cancelButtonCustomText]
  -[PGControlsViewModelValues _integerForKey:]
  -[PGControlsViewModelValues progressBarShouldUpdate]


UIColor(PGVibrancyEffects)
	// instance methods
	-[UIColor(PGVibrancyEffects) PG_wantsVibrancyEffect]

UIImage(PGVibrancyEffects)
	// instance methods
	-[UIImage(PGVibrancyEffects) PG_wantsVibrancyEffect]

UIView(PGVibrancyEffects)
	// class methods
	+[UIView(PGVibrancyEffects) PG_animateUsingDefaultTimingWithAnimations:completion:]
	+[UIView(PGVibrancyEffects) PG_animateUsingDefaultDampedSpringWithInitialSpringVelocity:animations:completion:]
	+[UIView(PGVibrancyEffects) PG_animateUsingDefaultTimingWithOptions:animations:completion:]
	+[UIView(PGVibrancyEffects) PG_performWithoutRetargetingAnimation:]
	+[UIView(PGVibrancyEffects) PG_performWithoutAnimation:]

	// instance methods
	-[UIView(PGVibrancyEffects) PG_recursivelyDisallowGroupBlending]
	-[UIView(PGVibrancyEffects) PG_removeVibrancyEffect]
	-[UIView(PGVibrancyEffects) PG_updateVibrancyEffectForTintColor]
	-[UIView(PGVibrancyEffects) PG_acquireAssertionToPreventAutoHideOfControlsWithReason:]
	-[UIView(PGVibrancyEffects) PG_backdropGroupLeader]
	-[UIView(PGVibrancyEffects) PG_preferredVisibilityForView:]
	-[UIView(PGVibrancyEffects) PG_setAllowsEdgeAntialiasing:]
	-[UIView(PGVibrancyEffects) PG_allowsEdgeAntialiasing]
	-[UIView(PGVibrancyEffects) PG_allowsGroupBlending]
	-[UIView(PGVibrancyEffects) PG_setAllowsGroupBlending:]
	-[UIView(PGVibrancyEffects) PG_anchorPoint]
	-[UIView(PGVibrancyEffects) PG_setAnchorPoint:]
	-[UIView(PGVibrancyEffects) PG_compositingFilter]
	-[UIView(PGVibrancyEffects) PG_setCompositingFilter:]
	-[UIView(PGVibrancyEffects) PG_cornerRadius]
	-[UIView(PGVibrancyEffects) PG_disablesLayerCloning]

UILabel(PGVibrancyEffects)
	// instance methods
	-[UILabel(PGVibrancyEffects) PG_removeVibrancyEffect]
	-[UILabel(PGVibrancyEffects) PG_updateVibrancyEffectForTintColor]

UIImageView(PGVibrancyEffects)
	// instance methods
	-[UIImageView(PGVibrancyEffects) PG_updateVibrancyEffectForTintColor]

UIButton(PGVibrancyEffects)
	// instance methods
	-[UIButton(PGVibrancyEffects) PG_removeVibrancyEffect]
	-[UIButton(PGVibrancyEffects) PG_updateVibrancyEffectForTintColor]

NSLayoutConstraint(PGAdditions)
	// class methods
	+[NSLayoutConstraint(PGAdditions) PG_constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:priority:]

UIApplicationSceneSettings(PGTransientLocal)
	// instance methods
	-[UIApplicationSceneSettings(PGTransientLocal) pg_hasVisiblePIPContent]

UIMutableApplicationSceneSettings(PGTransientLocal)
	// instance methods
	-[UIMutableApplicationSceneSettings(PGTransientLocal) pg_hasVisiblePIPContent]
	-[UIMutableApplicationSceneSettings(PGTransientLocal) setPg_hasVisiblePIPContent:]

NSXPCConnection(PGAdditions)
	// instance methods
	-[NSXPCConnection(PGAdditions) PG_hasScreenSharingEntitlement]
	-[NSXPCConnection(PGAdditions) PG_appProxyWithDebugMethodAndPointerProem:]
	-[NSXPCConnection(PGAdditions) PG_hasMultitaskingCameraAccessEntitlement]
	-[NSXPCConnection(PGAdditions) PG_appProxyWithDebugMethodAndPointerProem:errorHandler:]
	-[NSXPCConnection(PGAdditions) PG_hasMenuItemProviderEntitlement]
	-[NSXPCConnection(PGAdditions) PG_remoteObjectWithDebugMethodAndPointerProem:]
	-[NSXPCConnection(PGAdditions) PG_remoteObjectWithDebugMethodAndPointerProem:errorHandler:]
	-[NSXPCConnection(PGAdditions) PG_remoteObjectProxyWithDebugMethodAndPointerProem:]
	-[NSXPCConnection(PGAdditions) PG_remoteObjectProxyWithDebugMethodAndPointerProem:errorHandler:]

01 00 0300 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSAnimationFenceHandle 
01 00 0300 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSApplicationStateMonitor 
01 00 0300 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSTouchDeliveryPolicy 
01 00 0300 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSTouchDeliveryPolicyAssertion 
01 00 0500 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSDescriptionBuilder 
01 00 0500 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSHashBuilder 
01 00 0500 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSObjCProtocol 
01 00 0800 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSServiceConnection 
01 00 0800 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSServiceConnectionEndpoint 
01 00 0800 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSServiceConnectionListener 
01 00 0800 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSServiceInterface 
01 00 0800 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSServiceQuality 
01 00 0500 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSSimpleAssertion 
01 00 0900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABackdropLayer 
01 00 0900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 0900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 0900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 0900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 0900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAPortalLayer 
01 00 0900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 0800 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSOpenApplicationOptions 
01 00 0800 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSOpenApplicationService 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0c00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTButtonRow 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDomain 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTModule 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRestoreDefaultSettingsRowAction 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSettings 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSliderRow 
01 00 0100 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSAcquisitionCompletionAttribute 
01 00 0100 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSAssertion 
01 00 0100 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSDomainAttribute 
01 00 0100 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTarget 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneSettings 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIHoverGestureRecognizer 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMutableApplicationSceneSettings 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerHighlightEffect 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerHoverEffect 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerInteraction 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerLiftEffect 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerStyle 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScene 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedPreview 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowScene 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHostedWindow 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHostedWindowHostingHandle 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteView 
