|| __DATA.__objc_data _OBJC_CLASS_$_SBKLoadDomainVersionRequestHandler
|| __DATA.__objc_data _OBJC_CLASS_$_SBKMutableStoreURLBagContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBKPullValueTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBKPushValueTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBKLoadDomainVersionRequestHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBKMutableStoreURLBagContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBKPullValueTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBKPushValueTransaction
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBKLogger._auxPath
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBKLogger._fileHandle
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBKLogger._filter
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBKLogger._pid
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBKLogger._procName
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBKLogger._runtimeOverride
|| __DATA_CONST.__const _SBKLogFilter
|| __DATA_CONST.__const _SBKLogRuntimeOverride
|| __DATA_CONST.__const _SBKLogRuntimeOverridePattern
|| __DATA_CONST.__const _SBKPreferencesDidChangeNotification
|| __DATA_CONST.__const _SBKSyncAnchorVersionBase
|| __DATA_CONST.__const _SBKSyncAnchorVersionMaximum
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyAlbumTitle
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyBookmarkTime
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyEntityType
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyHasBeenPlayed
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyItemArtist
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyMetadataTimestamp
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyPlayCount
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyPodcastGUID
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyPodcastURL
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyStoreID
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertySubscriptionStoreID
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionMediaItemPropertyTitle
|| __DATA_CONST.__const _SBKUniversalPlaybackPositionStoreDidSynchronizeNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKPreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKRequestHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKStoreAuthenticationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKStoreURLBagContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKSyncRequestHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKSyncTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKTransactionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKUniversalPlaybackPositionMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKUniversalPlaybackPositionStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKPreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKRequestHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKStoreAuthenticationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKStoreURLBagContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKSyncRequestHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKSyncTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKTransactionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKUniversalPlaybackPositionMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKUniversalPlaybackPositionStore
|| __TEXT.__text _SBKKeyValuePayloadPairWithPreferredClass
|| __TEXT.__text _SBKLogProductionKeyBag
|| __TEXT.__text _SBKStoreAccount
|| __TEXT.__text _SBKStoreAccountIdentifierFromDatabasePath
|| __TEXT.__text _SBKStoreAccountIdentifiers
|| __TEXT.__text _SBKStoreAccountLastFailedSyncIdentifier
|| __TEXT.__text _SBKStoreAccountLastSyncedIdentifier
|| __TEXT.__text _SBKTimeStamp
__ BackBoardServices: _OBJC_CLASS_$_BKSProcessAssertion
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFPropertyListCreateData
__ CoreFoundation: _CFPropertyListCreateWithData
__ CoreFoundation: _CFStringCreateWithBytes
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: _kCFAbsoluteTimeIntervalSince1904
__ CoreFoundation: _kCFBundleNameKey
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ Foundation: _NSClassFromString
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConditionLock
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHTTPURLResponse
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_METACLASS_$_NSError
__ MusicLibrary: _OBJC_CLASS_$_ML3MusicLibrary
__ StoreServices: _OBJC_CLASS_$_SSAccountStore
__ StoreServices: _OBJC_CLASS_$_SSMutableAuthenticationContext
__ StoreServices: _OBJC_CLASS_$_SSMutableURLRequestProperties
__ StoreServices: _OBJC_CLASS_$_SSURLBag
__ StoreServices: _OBJC_CLASS_$_SSURLBagContext
__ StoreServices: _SSAccountStoreChangedNotification
__ iTunesCloud: _OBJC_CLASS_$_ICUserIdentityStore
__ iTunesStore: _ISCopyDecompressedGZipDataForData
__ iTunesStore: _ISCopyGzippedDataForData
__ iTunesStore: _ISNetworkTypeChangedNotification
__ iTunesStore: _OBJC_CLASS_$_ISDevice
__ iTunesStore: _OBJC_CLASS_$_ISNetworkObserver
__ iTunesStore: _OBJC_CLASS_$_ISPropertyListProvider
__ iTunesStore: _OBJC_CLASS_$_ISStoreURLOperation
__ iTunesStore: _OBJC_IVAR_$_ISOperation._delegate
__ iTunesStore: _OBJC_METACLASS_$_ISStoreURLOperation
__ libSystem.B.dylib: _CC_MD5_Final
__ libSystem.B.dylib: _CC_MD5_Init
__ libSystem.B.dylib: _CC_MD5_Update
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _CC_SHA512_Final
__ libSystem.B.dylib: _CC_SHA512_Update
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _ldiv
__ libSystem.B.dylib: _lldiv
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _pthread_mach_thread_np
__ libSystem.B.dylib: _pthread_self
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libz.1.dylib: _deflate
__ libz.1.dylib: _deflateEnd
__ libz.1.dylib: _deflateInit2_
__ libz.1.dylib: _inflate
__ libz.1.dylib: _inflateEnd
__ libz.1.dylib: _inflateInit2_
SBKPullValueRequest : SBKRequest
  // class methods
  +[SBKPullValueRequest propertyListBodyWithTransaction:]
  +[SBKPullValueRequest requestForTransaction:]

  // instance methods
  -[SBKPullValueRequest canonicalResponseForResponse:]


SBKStoreClampsController : NSObject <NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSDictionary *transactionClamps
 @property  double accountIdentifierCheckTimestamp
 @property  double authenticationNeededTimestamp
 @property  double userAcceptedSyncTimestamp
 @property  double networkingBlockedUntil
 @property  double backOffUntil
 @property  double userCancelledSignInBackOffUntil
 @property  double nextUserCancelBackOffInterval
 @property  NSData *pendingUserDefaultArchivedData

  // class methods
  +[SBKStoreClampsController supportsSecureCoding]
  +[SBKStoreClampsController sharedClampsController]

  // instance methods
  -[SBKStoreClampsController initWithCoder:]
  -[SBKStoreClampsController .cxx_destruct]
  -[SBKStoreClampsController init]
  -[SBKStoreClampsController setQueue:]
  -[SBKStoreClampsController reset]
  -[SBKStoreClampsController saveToUserDefaults]
  -[SBKStoreClampsController queue]
  -[SBKStoreClampsController encodeWithCoder:]
  -[SBKStoreClampsController accessTransactionClampsWithBlock:]
  -[SBKStoreClampsController pendingUserDefaultArchivedData]
  -[SBKStoreClampsController setPendingUserDefaultArchivedData:]
  -[SBKStoreClampsController transactionClamps]
  -[SBKStoreClampsController _canScheduleTransactionBasedOfNetworkingBlocked:error:]
  -[SBKStoreClampsController _canScheduleTransactionBasedOnBackOff:error:]
  -[SBKStoreClampsController _canScheduleTransactionBasedOnUserCancelledSignIn:error:]
  -[SBKStoreClampsController _canScheduleTransactionBasedOnAccountIdentifierCheck:error:]
  -[SBKStoreClampsController _canScheduleTransactionBasedOnType:error:]
  -[SBKStoreClampsController clearAccountIdentifierCheckTimestamp]
  -[SBKStoreClampsController clearAuthenticationRequest]
  -[SBKStoreClampsController clearBackOff]
  -[SBKStoreClampsController clearNetworkingBlocked]
  -[SBKStoreClampsController clearUserAcceptedSyncTimestamp]
  -[SBKStoreClampsController clearUserCancelledSignIn]
  -[SBKStoreClampsController _keyForTransaction:]
  -[SBKStoreClampsController _rightNow]
  -[SBKStoreClampsController setAccountIdentifierCheckTimestamp:]
  -[SBKStoreClampsController setAuthenticationNeededTimestamp:]
  -[SBKStoreClampsController authenticationNeededTimestamp]
  -[SBKStoreClampsController setUserAcceptedSyncTimestamp:]
  -[SBKStoreClampsController userAcceptedSyncTimestamp]
  -[SBKStoreClampsController setUserCancelledSignInBackOffUntil:]
  -[SBKStoreClampsController setBackOffUntil:]
  -[SBKStoreClampsController setNetworkingBlockedUntil:]
  -[SBKStoreClampsController networkingBlockedUntil]
  -[SBKStoreClampsController clearTimestampForTransaction:]
  -[SBKStoreClampsController isNetworkingBlocked]
  -[SBKStoreClampsController accountIdentifierCheckTimestamp]
  -[SBKStoreClampsController backOffUntil]
  -[SBKStoreClampsController userCancelledSignInBackOffUntil]
  -[SBKStoreClampsController canScheduleTransaction:error:]
  -[SBKStoreClampsController setTimestampForTransaction:]
  -[SBKStoreClampsController setAccountIdentifierCheckTimestamp]
  -[SBKStoreClampsController setAuthenticationRequest]
  -[SBKStoreClampsController hasAuthenticatedTooRecentlyForTransaction:error:]
  -[SBKStoreClampsController setUserAcceptedSyncTimestamp]
  -[SBKStoreClampsController hasUserRecentlyAcceptedSync]
  -[SBKStoreClampsController setUserCancelledSignIn]
  -[SBKStoreClampsController backOffForTimeInterval:]
  -[SBKStoreClampsController setNetworkingBlocked]
  -[SBKStoreClampsController setTransactionClamps:]
  -[SBKStoreClampsController nextUserCancelBackOffInterval]
  -[SBKStoreClampsController setNextUserCancelBackOffInterval:]


SBKGenericKeyValuePair : NSObject <NSObject, NSSecureCoding>
 @property  NSString *kvsKey
 @property  NSData *kvsPayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBKGenericKeyValuePair supportsSecureCoding]
  +[SBKGenericKeyValuePair pairWithKVSKey:kvsPayload:]

  // instance methods
  -[SBKGenericKeyValuePair initWithCoder:]
  -[SBKGenericKeyValuePair .cxx_destruct]
  -[SBKGenericKeyValuePair timestamp]
  -[SBKGenericKeyValuePair encodeWithCoder:]
  -[SBKGenericKeyValuePair kvsKey]
  -[SBKGenericKeyValuePair initWithKVSKey:kvsPayload:]
  -[SBKGenericKeyValuePair kvsValueDescription]
  -[SBKGenericKeyValuePair kvsPayload]


SBKTransactionController : NSObject <SBKTransactionURLOperationDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSOperationQueue *operationQueue
 @property  NSMutableArray *pendingTransactions
 @property  SBKTransaction *currentTransaction
 @property  BOOL isResolvingError
 @property  SBKTaskAssertion *backgroundTaskAssertion
 @property  id networkTypeObserver
 @property  long long conflictResolutionAttempts
 @property  <SBKTransactionControllerDelegate> *delegate
 @property  NSString *domain
 @property  NSURL *requestURL
 @property  SSAccount *account
 @property  BOOL enabled
 @property  BOOL idle
 @property  SBKStoreAuthenticationController *authenticationController
 @property  BOOL shouldAuthenticateIfNecessary
 @property  NSNumber *metricsLoadURLSessionDuration
 @property  NSNumber *metricsLoadURLSamplingPercentage
 @property  NSNumber *metricsLoadURLSamplingPercentageCachedResponses
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBKTransactionController setOperationQueue:]
  -[SBKTransactionController operationQueue]
  -[SBKTransactionController currentTransaction]
  -[SBKTransactionController account]
  -[SBKTransactionController isIdle]
  -[SBKTransactionController setDomain:]
  -[SBKTransactionController authenticationController]
  -[SBKTransactionController .cxx_destruct]
  -[SBKTransactionController domain]
  -[SBKTransactionController setDelegate:]
  -[SBKTransactionController setPendingTransactions:]
  -[SBKTransactionController operation:failedWithError:]
  -[SBKTransactionController setQueue:]
  -[SBKTransactionController setAuthenticationController:]
  -[SBKTransactionController pendingTransactions]
  -[SBKTransactionController isEnabled]
  -[SBKTransactionController _endBackgroundTask]
  -[SBKTransactionController _beginBackgroundTask]
  -[SBKTransactionController delegate]
  -[SBKTransactionController queue]
  -[SBKTransactionController setCurrentTransaction:]
  -[SBKTransactionController dealloc]
  -[SBKTransactionController requestURL]
  -[SBKTransactionController setEnabled:]
  -[SBKTransactionController setRequestURL:]
  -[SBKTransactionController operation:didReceiveResponse:]
  -[SBKTransactionController operation:finishedWithOutput:]
  -[SBKTransactionController _networkTypeChangedNotification:]
  -[SBKTransactionController initWithDomain:requestURL:forAccount:]
  -[SBKTransactionController _onQueue_endBackgroundTask]
  -[SBKTransactionController _onQueue_clampsController]
  -[SBKTransactionController _onQueue_processPendingTransactions]
  -[SBKTransactionController _onQueue_cancelAllPendingTransactions:]
  -[SBKTransactionController _onQueue_isIdle]
  -[SBKTransactionController scheduleTransaction:]
  -[SBKTransactionController _delegateShouldScheduleTransaction:error:]
  -[SBKTransactionController _onQueue_scheduleTransaction:isRetry:]
  -[SBKTransactionController _onQueue_transactionDidFail:withError:]
  -[SBKTransactionController _onQueue_cancelTransaction:error:]
  -[SBKTransactionController _storeOperationDidComplete:]
  -[SBKTransactionController _onQueue_resolveError:resolution:]
  -[SBKTransactionController _onQueue_beginBackgroundTask]
  -[SBKTransactionController backgroundTaskAssertion]
  -[SBKTransactionController _onQueue_transactionDidCancel:withError:]
  -[SBKTransactionController _onQueue_processCurrentTransaction]
  -[SBKTransactionController _onQueue_authenticationCanProcessTransaction:error:]
  -[SBKTransactionController _enqueueStoreOperation:]
  -[SBKTransactionController _onQueue_canScheduleTransaction:error:]
  -[SBKTransactionController _onQueue_addPendingTransaction:]
  -[SBKTransactionController _onQueue_isEnabledForTransaction:error:]
  -[SBKTransactionController _onQueue_assertIsTransactionValid:error:]
  -[SBKTransactionController _onQueue_clampsCanScheduleTransaction:error:]
  -[SBKTransactionController _delegateTransactionDidFinish:]
  -[SBKTransactionController _delegateTransactionDidFail:withError:]
  -[SBKTransactionController _resolveError:resolution:]
  -[SBKTransactionController _delegateTransactionDidCancel:withError:]
  -[SBKTransactionController _onQueue_currentTransactionDidFinish]
  -[SBKTransactionController _processDataInResponse:]
  -[SBKTransactionController shouldAuthenticateIfNecessary]
  -[SBKTransactionController _onQueue_performRetryErrorHandlingForError:]
  -[SBKTransactionController _onQueue_performCancelErrorHandlingForError:]
  -[SBKTransactionController _onQueue_performDefaultErrorHandlingForError:]
  -[SBKTransactionController _sendFinishedBlockForTransaction:success:cancelled:error:handledAsFinishedBlock:]
  -[SBKTransactionController _onQueue_processOperationOutput:operation:operationAuthenticated:]
  -[SBKTransactionController initWithDomain:requestURL:]
  -[SBKTransactionController scheduleTransaction:withTransactionFinishedBlock:]
  -[SBKTransactionController cancelScheduledTransaction:]
  -[SBKTransactionController cancelAllTransactions]
  -[SBKTransactionController cancelAllTransactionsCancelCode:]
  -[SBKTransactionController setShouldAuthenticateIfNecessary:]
  -[SBKTransactionController isResolvingError]
  -[SBKTransactionController setIsResolvingError:]
  -[SBKTransactionController setBackgroundTaskAssertion:]
  -[SBKTransactionController networkTypeObserver]
  -[SBKTransactionController setNetworkTypeObserver:]
  -[SBKTransactionController conflictResolutionAttempts]
  -[SBKTransactionController setConflictResolutionAttempts:]


SBKSyncResponseData : NSObject
 @property  NSMutableDictionary *responseOpEntiesByKey
 @property  SBKSyncTransaction *transaction
 @property  NSString *syncAnchor
 @property  NSArray *updatedKeys
 @property  NSArray *conflictedKeys
 @property  NSArray *deletedKeys
 @property  NSArray *successfullyUpdatedKeys
 @property  NSArray *successfullyDeletedKeys

  // class methods
  +[SBKSyncResponseData deserializedResponseBodyWithTransaction:responseDictionary:response:]

  // instance methods
  -[SBKSyncResponseData syncAnchor]
  -[SBKSyncResponseData transaction]
  -[SBKSyncResponseData .cxx_destruct]
  -[SBKSyncResponseData updatedKeys]
  -[SBKSyncResponseData initWithTransaction:responseDictionary:response:]
  -[SBKSyncResponseData _deserializeResponseDictionary:response:]
  -[SBKSyncResponseData payloadDataForUpdateResponseKey:]
  -[SBKSyncResponseData conflictedKeys]
  -[SBKSyncResponseData deletedKeys]
  -[SBKSyncResponseData successfullyUpdatedKeys]
  -[SBKSyncResponseData successfullyDeletedKeys]
  -[SBKSyncResponseData responseOpEntiesByKey]
  -[SBKSyncResponseData setResponseOpEntiesByKey:]


SBKStoreError : NSError
 @property  SBKTransaction *transaction
 @property  BOOL isAuthenticationError
 @property  BOOL isAccountsChangedError
 @property  BOOL isRecoverableError
 @property  BOOL isClampError
 @property  BOOL isTransactionCancelledError
 @property  BOOL isTransactionMissingInformationError
 @property  NSString *previousStoreAccountName
 @property  NSString *currentStoreAccountName
 @property  double retrySeconds

  // class methods
  +[SBKStoreError userClampErrorWithTransaction:retrySeconds:underlyingError:]
  +[SBKStoreError serverClampErrorWithTransaction:retrySeconds:underlyingError:]
  +[SBKStoreError networkingBlockedErrorWithTransaction:underlyingError:]
  +[SBKStoreError keyValueStoreDisabledErrorWithTransaction:underlyingError:]
  +[SBKStoreError noStoreAccountErrorWithTransaction:underlyingError:]
  +[SBKStoreError transactionCancelledErrorWithTransaction:underlyingError:]
  +[SBKStoreError transactionCancelledErrorWithTransaction:code:underlyingError:]
  +[SBKStoreError storeGenericErrorWithTransaction:underlyingError:]
  +[SBKStoreError killSwitchErrorWithTransaction:underlyingError:]
  +[SBKStoreError storeValidationErrorWithTransaction:underlyingError:]
  +[SBKStoreError storeAccountSessionExpiredWithTransaction:underlyingError:]
  +[SBKStoreError unknownErrorWithTransaction:underlyingError:]
  +[SBKStoreError delegateCancelledErrorWithTransaction:underlyingError:]
  +[SBKStoreError userCancelledSignInErrorWithTransaction:underlyingError:]
  +[SBKStoreError userEnteredWrongCredentialsErrorWithTransaction:underlyingError:]
  +[SBKStoreError keyValueStoreErrorWithCode:localizedDescription:transaction:underlyingError:]
  +[SBKStoreError storeLoggedOutErrorWithPreviousStoreAccountName:transaction:underlyingError:]
  +[SBKStoreError storeAccountMismatchErrorWithPreviousStoreAccountName:currentStoreAccountName:transaction:underlyingError:]
  +[SBKStoreError transactionMissingDomainErrorWithTransaction:underlyingError:]
  +[SBKStoreError transactionMissingURLErrorWithTransaction:underlyingError:]
  +[SBKStoreError transactionTimeoutErrorWithTransaction:underlyingError:]

  // instance methods
  -[SBKStoreError transaction]
  -[SBKStoreError .cxx_destruct]
  -[SBKStoreError copyWithZone:]
  -[SBKStoreError setTransaction:]
  -[SBKStoreError isAuthenticationError]
  -[SBKStoreError isClampError]
  -[SBKStoreError retrySeconds]
  -[SBKStoreError isTransactionCancelledError]
  -[SBKStoreError isAccountsChangedError]
  -[SBKStoreError isRecoverableError]
  -[SBKStoreError isTransactionMissingInformationError]
  -[SBKStoreError previousStoreAccountName]
  -[SBKStoreError currentStoreAccountName]


SBKTransactionURLOperation : ISStoreURLOperation
 @property  BOOL shouldAuthenticate
 @property  SBKRequest *SBKRequest

  // class methods
  +[SBKTransactionURLOperation operationWithRequest:delegate:]

  // instance methods
  -[SBKTransactionURLOperation .cxx_destruct]
  -[SBKTransactionURLOperation setSBKRequest:]
  -[SBKTransactionURLOperation setShouldAuthenticate:]
  -[SBKTransactionURLOperation init]
  -[SBKTransactionURLOperation _init]
  -[SBKTransactionURLOperation shouldAuthenticate]
  -[SBKTransactionURLOperation SBKRequest]


SBKSyncRequestData : SBKRequestData
  // instance methods
  -[SBKSyncRequestData syncTransaction]
  -[SBKSyncRequestData _serializableUpdateItemPayloadDictionaryForKey:]
  -[SBKSyncRequestData _serializableDeleteItemPayloadDictionaryForKey:]
  -[SBKSyncRequestData _serializableConflictDetectionValue]
  -[SBKSyncRequestData _needsConflictDetection]
  -[SBKSyncRequestData _serializableConflictDetectionOrdinalForKey:]
  -[SBKSyncRequestData serializableRequestBodyPropertyList]


SBKStoreAuthenticationController : NSObject
 @property  SSAccount *storeAccount
 @property  BOOL shouldAuthenticate

  // class methods
  +[SBKStoreAuthenticationController lastSyncedAccountIdentifier]
  +[SBKStoreAuthenticationController lastSyncedAccountName]
  +[SBKStoreAuthenticationController clearLastSyncnedAccount]
  +[SBKStoreAuthenticationController lastFailedSyncAccountIdentifier]
  +[SBKStoreAuthenticationController lastFailedSyncAccountName]

  // instance methods
  -[SBKStoreAuthenticationController .cxx_destruct]
  -[SBKStoreAuthenticationController setShouldAuthenticate:]
  -[SBKStoreAuthenticationController shouldAuthenticate]
  -[SBKStoreAuthenticationController initWithStoreAccount:]
  -[SBKStoreAuthenticationController isAuthenticationValidForTransaction:error:]
  -[SBKStoreAuthenticationController saveAccountToLastSyncedDefaults]
  -[SBKStoreAuthenticationController saveAccountToLastFailedSyncDefaults]
  -[SBKStoreAuthenticationController storeAccount]
  -[SBKStoreAuthenticationController shouldForceAuthenticationForTransaction:]
  -[SBKStoreAuthenticationController authenticationErrorsForTransaction:]


SBKLogger : NSObject
 @property  NSString *filter
 @property  NSString *runtimeOverride

  // class methods
  +[SBKLogger verboseLoggingEnabled]
  +[SBKLogger sharedLogger]
  +[SBKLogger debugLoggingEnabled]

  // instance methods
  -[SBKLogger setFilter:]
  -[SBKLogger .cxx_destruct]
  -[SBKLogger init]
  -[SBKLogger filter]
  -[SBKLogger auxPath]
  -[SBKLogger dealloc]
  -[SBKLogger logString:]
  -[SBKLogger logFile:lineNumber:format:]
  -[SBKLogger setRuntimeOverride:]
  -[SBKLogger runtimeOverride]
  -[SBKLogger setAuxPath:]
  -[SBKLogger shouldOverrideCondition:file:]
  -[SBKLogger logFunction:format:]
  -[SBKLogger addRuntimeOverride:]
  -[SBKLogger removeRuntimeOverride:]
  -[SBKLogger _updateSettingsFromPreferences:]
  -[SBKLogger performLoggingBlock:]


SBKPushValueTransaction : SBKTransaction
 @property  <SBKKeyValuePayloadPair> *clientItemPayloadPair
 @property  NSString *clientItemVersionAnchor
 @property  <SBKKeyValuePayloadPair> *requestItemPayloadPair
 @property  NSString *requestItemVersionAnchor
 @property  BOOL success
 @property  <SBKKeyValuePayloadPair> *resultItemPayloadPair
 @property  NSString *resultItemVersionAnchor
 @property  NSString *resultDomainVersion

  // instance methods
  -[SBKPushValueTransaction success]
  -[SBKPushValueTransaction newRequest]
  -[SBKPushValueTransaction .cxx_destruct]
  -[SBKPushValueTransaction clientItemVersionAnchor]
  -[SBKPushValueTransaction clampsKey]
  -[SBKPushValueTransaction processDataInResponse:withCompletionHandler:]
  -[SBKPushValueTransaction _resolveConflictBetweenClientPayloadPair:andServerPayloadPair:]
  -[SBKPushValueTransaction initWithStoreBagContext:clientItemPayloadPair:clientItemVersionAnchor:]
  -[SBKPushValueTransaction clientItemPayloadPair]
  -[SBKPushValueTransaction requestItemPayloadPair]
  -[SBKPushValueTransaction requestItemVersionAnchor]
  -[SBKPushValueTransaction resultItemPayloadPair]
  -[SBKPushValueTransaction resultItemVersionAnchor]
  -[SBKPushValueTransaction resultDomainVersion]


SBKProcessAssertion : NSObject
 @property  unsigned long identifier
 @property  BKSProcessAssertion *bkProcessAssertion
 @property  id expirationObserver

  // instance methods
  -[SBKProcessAssertion .cxx_destruct]
  -[SBKProcessAssertion identifier]
  -[SBKProcessAssertion dealloc]
  -[SBKProcessAssertion invalidate]
  -[SBKProcessAssertion _expireBackgroundTask]
  -[SBKProcessAssertion setBkProcessAssertion:]
  -[SBKProcessAssertion setExpirationObserver:]
  -[SBKProcessAssertion _onQueueSetBkProcessAssertion:]
  -[SBKProcessAssertion initWithExpirationBlock:debugDescription:]
  -[SBKProcessAssertion bkProcessAssertion]
  -[SBKProcessAssertion expirationObserver]


SBKTaskAssertion : NSObject
  // class methods
  +[SBKTaskAssertion newBackgroundTaskWithExpirationHandler:debugInfo:]

  // instance methods
  -[SBKTaskAssertion .cxx_destruct]
  -[SBKTaskAssertion dealloc]
  -[SBKTaskAssertion invalidate]
  -[SBKTaskAssertion initWithExpirationHandler:debugInfo:]
  -[SBKTaskAssertion performExpirationHandler]


SBKPreferences : NSObject
  // class methods
  +[SBKPreferences storeBookkeeperPreferences]

  // instance methods
  -[SBKPreferences setObject:forKey:]
  -[SBKPreferences setBool:forKey:]
  -[SBKPreferences boolForKey:]
  -[SBKPreferences init]
  -[SBKPreferences dealloc]
  -[SBKPreferences objectForKey:withDefaultValue:]
  -[SBKPreferences registerDefaultsIfKeyNotSet:registrationBlock:]
  -[SBKPreferences _preferencesDidChange]


SBKSimpleTransactionRequestHandler : SBKRequestHandler
 @property  SBKTransactionController *transactionController
 @property  BOOL canceled

  // instance methods
  -[SBKSimpleTransactionRequestHandler .cxx_destruct]
  -[SBKSimpleTransactionRequestHandler initWithBagContext:]
  -[SBKSimpleTransactionRequestHandler timeout]
  -[SBKSimpleTransactionRequestHandler cancel]
  -[SBKSimpleTransactionRequestHandler canceled]
  -[SBKSimpleTransactionRequestHandler cancelWithError:]
  -[SBKSimpleTransactionRequestHandler transactionController]
  -[SBKSimpleTransactionRequestHandler scheduleTransaction:finishedBlock:]


SBKUniversalPlaybackPositionMetadata : NSObject <NSCopying, NSObject, NSSecureCoding>
 @property  NSString *itemIdentifier
 @property  double timestamp
 @property  double bookmarkTime
 @property  BOOL hasBeenPlayed
 @property  unsigned long playCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBKUniversalPlaybackPositionMetadata supportsSecureCoding]
  +[SBKUniversalPlaybackPositionMetadata pairWithKVSKey:kvsPayload:]
  +[SBKUniversalPlaybackPositionMetadata metadataWithItemIdentifier:keyValueStorePayload:failuresOkay:]
  +[SBKUniversalPlaybackPositionMetadata keyValueStoreItemIdentifierForItem:]
  +[SBKUniversalPlaybackPositionMetadata _testableMetadataItem_1]
  +[SBKUniversalPlaybackPositionMetadata keyValueStoreItemIdentifierForUniqueStoreID:itemTitle:albumName:itemArtistName:feedURL:feedGUID:]
  +[SBKUniversalPlaybackPositionMetadata metadataWithValuesFromDataSourceItem:]
  +[SBKUniversalPlaybackPositionMetadata metadataWithItemIdentifier:bookmarkTime:bookmarkTimestamp:hasBeenPlayed:playCount:]
  +[SBKUniversalPlaybackPositionMetadata metadataWithItemIdentifier:keyValueStorePayload:]

  // instance methods
  -[SBKUniversalPlaybackPositionMetadata playCount]
  -[SBKUniversalPlaybackPositionMetadata setItemIdentifier:]
  -[SBKUniversalPlaybackPositionMetadata itemIdentifier]
  -[SBKUniversalPlaybackPositionMetadata setPlayCount:]
  -[SBKUniversalPlaybackPositionMetadata initWithCoder:]
  -[SBKUniversalPlaybackPositionMetadata .cxx_destruct]
  -[SBKUniversalPlaybackPositionMetadata hasBeenPlayed]
  -[SBKUniversalPlaybackPositionMetadata setHasBeenPlayed:]
  -[SBKUniversalPlaybackPositionMetadata init]
  -[SBKUniversalPlaybackPositionMetadata isEqual:]
  -[SBKUniversalPlaybackPositionMetadata bookmarkTime]
  -[SBKUniversalPlaybackPositionMetadata setBookmarkTime:]
  -[SBKUniversalPlaybackPositionMetadata timestamp]
  -[SBKUniversalPlaybackPositionMetadata copyWithZone:]
  -[SBKUniversalPlaybackPositionMetadata setTimestamp:]
  -[SBKUniversalPlaybackPositionMetadata encodeWithCoder:]
  -[SBKUniversalPlaybackPositionMetadata kvsKey]
  -[SBKUniversalPlaybackPositionMetadata kvsValueDescription]
  -[SBKUniversalPlaybackPositionMetadata kvsPayload]
  -[SBKUniversalPlaybackPositionMetadata initAsTestableItem]
  -[SBKUniversalPlaybackPositionMetadata keyValueStorePayload]


SBKUniversalPlaybackPositionStore : NSObject
 @property  SBKAsynchronousTask *currentTask
 @property  SBKAsynchronousTask *lookupDomainVersionTask
 @property  SBKAsynchronousTask *bagLookupTask
 @property  SBKRequestHandler *currentTaskRequestHandler
 @property  NSDate *dateToFireNextTimer
 @property  NSTimer *timer
 @property  <SBKUniversalPlaybackPositionDataSource> *dataSource
 @property  unsigned long automaticSynchronizeOptions
 @property  BOOL hasLocalChangesToSync

  // class methods
  +[SBKUniversalPlaybackPositionStore keyValueStoreItemIdentifierForItem:]

  // instance methods
  -[SBKUniversalPlaybackPositionStore becomeActive]
  -[SBKUniversalPlaybackPositionStore resignActive]
  -[SBKUniversalPlaybackPositionStore .cxx_destruct]
  -[SBKUniversalPlaybackPositionStore dataSource]
  -[SBKUniversalPlaybackPositionStore init]
  -[SBKUniversalPlaybackPositionStore timer]
  -[SBKUniversalPlaybackPositionStore setTimer:]
  -[SBKUniversalPlaybackPositionStore _timerFired:]
  -[SBKUniversalPlaybackPositionStore dealloc]
  -[SBKUniversalPlaybackPositionStore setCurrentTask:]
  -[SBKUniversalPlaybackPositionStore currentTask]
  -[SBKUniversalPlaybackPositionStore initWithDomain:dataSource:automaticSynchronizeOptions:accountIdentifier:isActive:]
  -[SBKUniversalPlaybackPositionStore setDateToFireNextTimer:]
  -[SBKUniversalPlaybackPositionStore _updateAutorefreshRateSettingAndRestartTimer:]
  -[SBKUniversalPlaybackPositionStore _onQueueLoadBagContextWithCompletionHandler:]
  -[SBKUniversalPlaybackPositionStore _updateForStoreAccountsChange]
  -[SBKUniversalPlaybackPositionStore initWithInitialUpdateDelay:]
  -[SBKUniversalPlaybackPositionStore _onQueueStopTimer]
  -[SBKUniversalPlaybackPositionStore _onQueueStartNewTimerWithTimeIntervalSinceNow:]
  -[SBKUniversalPlaybackPositionStore bagLookupTask]
  -[SBKUniversalPlaybackPositionStore lookupDomainVersionTask]
  -[SBKUniversalPlaybackPositionStore _onQueueSuspendTimer]
  -[SBKUniversalPlaybackPositionStore _automaticallySynchronizeOnBecomeActive]
  -[SBKUniversalPlaybackPositionStore _onQueueResumeTimer]
  -[SBKUniversalPlaybackPositionStore _onQueueUpdateTimerForActiveChanges]
  -[SBKUniversalPlaybackPositionStore _automaticallySynchronizeLocalChangesOnResignActive]
  -[SBKUniversalPlaybackPositionStore _onQueueSynchronizeWithAutosynchronizeMask:withCompletionBlock:]
  -[SBKUniversalPlaybackPositionStore _onQueueUpdateTimerForAutomaticSyncOptionChanges]
  -[SBKUniversalPlaybackPositionStore automaticSynchronizeOptions]
  -[SBKUniversalPlaybackPositionStore setAutomaticSynchronizeOptions:]
  -[SBKUniversalPlaybackPositionStore _onQueueSynchronizeImmediatelyWithCompletionHandler:]
  -[SBKUniversalPlaybackPositionStore _onQueuePushMetadataItem:completionBlock:]
  -[SBKUniversalPlaybackPositionStore _onQueuePullMetadataItemWithItemIdentifier:completionBlock:]
  -[SBKUniversalPlaybackPositionStore _accountForSyncing]
  -[SBKUniversalPlaybackPositionStore _onQueueLoadRemoteDomainVersionWithCompletionBlock:]
  -[SBKUniversalPlaybackPositionStore _onQueueRunTaskWithName:taskCompletionHandler:runTaskBlock:]
  -[SBKUniversalPlaybackPositionStore _onQueueStartNewTimer]
  -[SBKUniversalPlaybackPositionStore _onQueueRunNextPendingTaskBlock]
  -[SBKUniversalPlaybackPositionStore _effectiveAutorefreshRate]
  -[SBKUniversalPlaybackPositionStore _updateSettingsFromLoadedBagContext:]
  -[SBKUniversalPlaybackPositionStore dateToFireNextTimer]
  -[SBKUniversalPlaybackPositionStore _timerIsStopped]
  -[SBKUniversalPlaybackPositionStore _onQueueScheduleTimer]
  -[SBKUniversalPlaybackPositionStore deprecated_setDataSource:]
  -[SBKUniversalPlaybackPositionStore initWithDomain:dataSource:automaticSynchronizeOptions:isActive:]
  -[SBKUniversalPlaybackPositionStore setHasLocalChangesToSync:]
  -[SBKUniversalPlaybackPositionStore hasLocalChangesToSync]
  -[SBKUniversalPlaybackPositionStore setAutomaticallySynchronizeLocalChangesOnResignActive:]
  -[SBKUniversalPlaybackPositionStore automaticallySynchronizeLocalChangesOnResignActive]
  -[SBKUniversalPlaybackPositionStore setAutomaticallySynchronizeOnBecomeActive:]
  -[SBKUniversalPlaybackPositionStore automaticallySynchronizeOnBecomeActive]
  -[SBKUniversalPlaybackPositionStore synchronizeImmediatelyWithCompletionHandler:]
  -[SBKUniversalPlaybackPositionStore pushMetadataItem:completionBlock:]
  -[SBKUniversalPlaybackPositionStore pullMetadataItemWithItemIdentifier:completionBlock:]
  -[SBKUniversalPlaybackPositionStore synchronizeImmediatelyWithCompletionBlock:]
  -[SBKUniversalPlaybackPositionStore checkForAvailabilityWithCompletionBlock:]
  -[SBKUniversalPlaybackPositionStore loadRemoteDomainVersionWithCompletionBlock:]
  -[SBKUniversalPlaybackPositionStore loadBagContextWithCompletionBlock:]
  -[SBKUniversalPlaybackPositionStore setLookupDomainVersionTask:]
  -[SBKUniversalPlaybackPositionStore setBagLookupTask:]
  -[SBKUniversalPlaybackPositionStore currentTaskRequestHandler]
  -[SBKUniversalPlaybackPositionStore setCurrentTaskRequestHandler:]


SBKPlaybackPositionSyncRequestHandler : SBKSyncRequestHandler <SBKTransactionControllerDelegate, SBKSyncTransactionProcessing>
 @property  SBKTransactionController *kvsController
 @property  <SBKUniversalPlaybackPositionDataSource> *dataSource
 @property  <SBKUniversalPlaybackPositionTransactionContext> *dataSourceTransactionContext
 @property  NSMutableDictionary *metadataItemsFromDataSource
 @property  NSDictionary *metadataItemsToCommitToDataSource
 @property  NSDictionary *metadataItemsToCommitToKVSStorage
 @property  NSMutableDictionary *responseMetadataItemsToCommitToDataSource
 @property  NSMutableDictionary *responseMetadataItemsMergedToCommitBackToKVSStorage
 @property  SBKSyncTransaction *currentKVSTransaction
 @property  BOOL syncInProgress
 @property  BOOL canceled
 @property  NSError *fatalSyncError
 @property  NSString *overrideSyncAnchor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBKPlaybackPositionSyncRequestHandler synchronizeWithCompletionHandler:]
  -[SBKPlaybackPositionSyncRequestHandler _shouldStop]
  -[SBKPlaybackPositionSyncRequestHandler setDataSource:]
  -[SBKPlaybackPositionSyncRequestHandler .cxx_destruct]
  -[SBKPlaybackPositionSyncRequestHandler dataSource]
  -[SBKPlaybackPositionSyncRequestHandler _synchronize:]
  -[SBKPlaybackPositionSyncRequestHandler timeout]
  -[SBKPlaybackPositionSyncRequestHandler setCanceled:]
  -[SBKPlaybackPositionSyncRequestHandler cancel]
  -[SBKPlaybackPositionSyncRequestHandler canceled]
  -[SBKPlaybackPositionSyncRequestHandler cancelWithError:]
  -[SBKPlaybackPositionSyncRequestHandler setSyncInProgress:]
  -[SBKPlaybackPositionSyncRequestHandler transactionController:transactionDidFail:error:]
  -[SBKPlaybackPositionSyncRequestHandler transactionController:transactionDidCancel:error:]
  -[SBKPlaybackPositionSyncRequestHandler transactionController:transactionDidFinish:]
  -[SBKPlaybackPositionSyncRequestHandler initWithDataSource:bagContext:accountIdentifier:]
  -[SBKPlaybackPositionSyncRequestHandler setMetadataItemsFromDataSource:]
  -[SBKPlaybackPositionSyncRequestHandler setMetadataItemsToCommitToDataSource:]
  -[SBKPlaybackPositionSyncRequestHandler setMetadataItemsToCommitToKVSStorage:]
  -[SBKPlaybackPositionSyncRequestHandler setResponseMetadataItemsToCommitToDataSource:]
  -[SBKPlaybackPositionSyncRequestHandler setResponseMetadataItemsMergedToCommitBackToKVSStorage:]
  -[SBKPlaybackPositionSyncRequestHandler setKvsController:]
  -[SBKPlaybackPositionSyncRequestHandler setDataSourceTransactionContext:]
  -[SBKPlaybackPositionSyncRequestHandler setCurrentKVSTransaction:]
  -[SBKPlaybackPositionSyncRequestHandler metadataItemsFromDataSource]
  -[SBKPlaybackPositionSyncRequestHandler responseMetadataItemsToCommitToDataSource]
  -[SBKPlaybackPositionSyncRequestHandler responseMetadataItemsMergedToCommitBackToKVSStorage]
  -[SBKPlaybackPositionSyncRequestHandler clearTransactionResponseData]
  -[SBKPlaybackPositionSyncRequestHandler dataSourceTransactionContext]
  -[SBKPlaybackPositionSyncRequestHandler syncInProgress]
  -[SBKPlaybackPositionSyncRequestHandler _dataSourceCancelTransaction]
  -[SBKPlaybackPositionSyncRequestHandler metadataItemsToCommitToKVSStorage]
  -[SBKPlaybackPositionSyncRequestHandler newKVSSyncTransactionWithUpdatedMetadataItemIdentifiers:processConflicts:]
  -[SBKPlaybackPositionSyncRequestHandler currentKVSTransaction]
  -[SBKPlaybackPositionSyncRequestHandler _synchronouslyRunKVSTransaction:]
  -[SBKPlaybackPositionSyncRequestHandler _mergeMetadataItemsFromSyncResponse]
  -[SBKPlaybackPositionSyncRequestHandler metadataItemsToCommitToDataSource]
  -[SBKPlaybackPositionSyncRequestHandler fatalSyncError]
  -[SBKPlaybackPositionSyncRequestHandler kvsController]
  -[SBKPlaybackPositionSyncRequestHandler _signalKVSTransactionCompletion:withError:]
  -[SBKPlaybackPositionSyncRequestHandler setFatalSyncError:]
  -[SBKPlaybackPositionSyncRequestHandler _signalKVSTransactionCompletion:]
  -[SBKPlaybackPositionSyncRequestHandler transaction:willProcessResponseData:]
  -[SBKPlaybackPositionSyncRequestHandler transaction:didProcessResponseData:]
  -[SBKPlaybackPositionSyncRequestHandler transaction:processUpdatedKey:data:conflict:isDirty:]
  -[SBKPlaybackPositionSyncRequestHandler _mergeConflictedItemFromSyncResponse:]
  -[SBKPlaybackPositionSyncRequestHandler transaction:processDeletedKey:isDirty:]
  -[SBKPlaybackPositionSyncRequestHandler transaction:keyValuePairForUpdatedKey:]
  -[SBKPlaybackPositionSyncRequestHandler transaction:syncAnchorForTransactionSyncAnchor:]
  -[SBKPlaybackPositionSyncRequestHandler transaction:conflictDetectionOrdinalForKey:]
  -[SBKPlaybackPositionSyncRequestHandler initWithDataSource:bagContext:]
  -[SBKPlaybackPositionSyncRequestHandler overrideSyncAnchor]
  -[SBKPlaybackPositionSyncRequestHandler setOverrideSyncAnchor:]


SBKStoreURLBagContext : NSObject <NSMutableCopying, NSCopying>
 @property  SSURLBag *bag
 @property  NSString *domain
 @property  NSURL *syncRequestURL
 @property  NSURL *pushKeyValueRequestURL
 @property  NSURL *pullKeyValueRequestURL
 @property  NSURL *pushAllKeyValueRequestURL
 @property  NSURL *pullAllKeyValueRequestURL
 @property  BOOL domainDisabled
 @property  double pollingIntervalInSeconds

  // class methods
  +[SBKStoreURLBagContext loadBagContextFromURLBag:domain:completionBlock:]
  +[SBKStoreURLBagContext _findFirstValueInBag:keyEnumerator:valueTransformer:defaultValue:completionBlock:]
  +[SBKStoreURLBagContext enumerateRequestURLBagKeysWithBlock:]
  +[SBKStoreURLBagContext UPPDomainIdentifier]
  +[SBKStoreURLBagContext ExtrasDomainIdentifier]

  // instance methods
  -[SBKStoreURLBagContext setDomain:]
  -[SBKStoreURLBagContext .cxx_destruct]
  -[SBKStoreURLBagContext bag]
  -[SBKStoreURLBagContext domain]
  -[SBKStoreURLBagContext init]
  -[SBKStoreURLBagContext mutableCopyWithZone:]
  -[SBKStoreURLBagContext setBag:]
  -[SBKStoreURLBagContext copyWithZone:]
  -[SBKStoreURLBagContext pushKeyValueRequestURL]
  -[SBKStoreURLBagContext syncRequestURL]
  -[SBKStoreURLBagContext domainDisabled]
  -[SBKStoreURLBagContext pollingIntervalInSeconds]
  -[SBKStoreURLBagContext initWithBag:domain:]
  -[SBKStoreURLBagContext _initWithDomain:syncRequestURL:domainDisabled:]
  -[SBKStoreURLBagContext setPollingIntervalInSeconds:]
  -[SBKStoreURLBagContext setSyncRequestURL:]
  -[SBKStoreURLBagContext setPushKeyValueRequestURL:]
  -[SBKStoreURLBagContext pullKeyValueRequestURL]
  -[SBKStoreURLBagContext setPullKeyValueRequestURL:]
  -[SBKStoreURLBagContext pushAllKeyValueRequestURL]
  -[SBKStoreURLBagContext setPushAllKeyValueRequestURL:]
  -[SBKStoreURLBagContext pullAllKeyValueRequestURL]
  -[SBKStoreURLBagContext setPullAllKeyValueRequestURL:]
  -[SBKStoreURLBagContext setDomainDisabled:]


SBKMutableStoreURLBagContext : SBKStoreURLBagContext
 @property  NSString *domain
 @property  NSURL *syncRequestURL
 @property  NSURL *pushKeyValueRequestURL
 @property  NSURL *pullKeyValueRequestURL
 @property  NSURL *pushAllKeyValueRequestURL
 @property  NSURL *pullAllKeyValueRequestURL
 @property  BOOL domainDisabled
 @property  double pollingIntervalInSeconds


SBKPullValueTransaction : SBKTransaction
 @property  NSString *requestedKey
 @property  <SBKKeyValuePayloadPair> *clientItemPayloadPair
 @property  NSString *clientItemVersionAnchor
 @property  BOOL success
 @property  <SBKKeyValuePayloadPair> *resultItemPayloadPair
 @property  NSString *resultItemVersionAnchor
 @property  NSString *resultDomainVersion

  // instance methods
  -[SBKPullValueTransaction success]
  -[SBKPullValueTransaction newRequest]
  -[SBKPullValueTransaction .cxx_destruct]
  -[SBKPullValueTransaction clientItemVersionAnchor]
  -[SBKPullValueTransaction requestedKey]
  -[SBKPullValueTransaction clampsKey]
  -[SBKPullValueTransaction processDataInResponse:withCompletionHandler:]
  -[SBKPullValueTransaction clientItemPayloadPair]
  -[SBKPullValueTransaction resultItemPayloadPair]
  -[SBKPullValueTransaction resultItemVersionAnchor]
  -[SBKPullValueTransaction resultDomainVersion]
  -[SBKPullValueTransaction initWithStoreBagContext:requestedKey:clientItemPayloadPair:clientItemVersionAnchor:]


SBKPushValueResponse : SBKResponse
 @property  NSString *domainVersion
 @property  NSData *conflictItemValuePayload
 @property  NSString *conflictItemKey
 @property  NSString *conflictItemVersionAnchor

  // class methods
  +[SBKPushValueResponse responseWithResponse:transaction:]

  // instance methods
  -[SBKPushValueResponse .cxx_destruct]
  -[SBKPushValueResponse domainVersion]
  -[SBKPushValueResponse conflictItemValuePayload]
  -[SBKPushValueResponse conflictItemKey]
  -[SBKPushValueResponse conflictItemVersionAnchor]
  -[SBKPushValueResponse deserializeResponseBodyWithTransaction:]


SBKRequestData : NSObject
 @property  SBKTransaction *transaction

  // class methods
  +[SBKRequestData propertyListBodyWithTransaction:]

  // instance methods
  -[SBKRequestData initWithTransaction:]
  -[SBKRequestData transaction]
  -[SBKRequestData .cxx_destruct]
  -[SBKRequestData setTransaction:]
  -[SBKRequestData serializableRequestBodyPropertyList]


SBKSyncResponse : SBKResponse
 @property  SBKSyncResponseData *syncResponseData

  // class methods
  +[SBKSyncResponse responseWithResponse:transaction:]

  // instance methods
  -[SBKSyncResponse .cxx_destruct]
  -[SBKSyncResponse deserializeResponseBodyWithTransaction:]
  -[SBKSyncResponse syncResponseData]


SBKSyncTransaction : SBKTransaction
 @property  long long type
 @property  long long conflictDetectionType
 @property  NSURL *syncRequestURL
 @property  NSString *syncAnchor
 @property  NSArray *keysToUpdate
 @property  NSArray *keysToDelete
 @property  <SBKSyncTransactionProcessing> *transactionProcessor

  // instance methods
  -[SBKSyncTransaction syncAnchor]
  -[SBKSyncTransaction newRequest]
  -[SBKSyncTransaction .cxx_destruct]
  -[SBKSyncTransaction domain]
  -[SBKSyncTransaction type]
  -[SBKSyncTransaction requestURL]
  -[SBKSyncTransaction clampsKey]
  -[SBKSyncTransaction processDataInResponse:withCompletionHandler:]
  -[SBKSyncTransaction keysToUpdate]
  -[SBKSyncTransaction keysToDelete]
  -[SBKSyncTransaction conflictDetectionType]
  -[SBKSyncTransaction conflictDetectionOrdinalForKey:]
  -[SBKSyncTransaction keyValuePairForUpdatedKey:]
  -[SBKSyncTransaction syncRequestURL]
  -[SBKSyncTransaction initWithStoreBagContext:syncAnchor:keysToUpdate:keysToDelete:conflictDetectionType:]
  -[SBKSyncTransaction setTransactionProcessor:]
  -[SBKSyncTransaction initWithSyncRequestURL:domain:syncAnchor:keysToUpdate:keysToDelete:conflictDetectionType:]
  -[SBKSyncTransaction transactionProcessor]
  -[SBKSyncTransaction _validateTransactionProcessor:]


SBKSyncResponseDataKeyEnumerator : NSObject
 @property  SBKSyncResponseData *responseData
 @property  SBKSyncTransaction *transaction
 @property  @? completionBlock
 @property  BOOL resolvedConflictsNeedSyncToServer
 @property  NSEnumerator *updatedKeysEnumerator
 @property  NSEnumerator *conflictedKeysEnumerator
 @property  NSEnumerator *deletedKeysEnumerator

  // instance methods
  -[SBKSyncResponseDataKeyEnumerator transaction]
  -[SBKSyncResponseDataKeyEnumerator .cxx_destruct]
  -[SBKSyncResponseDataKeyEnumerator responseData]
  -[SBKSyncResponseDataKeyEnumerator setResponseData:]
  -[SBKSyncResponseDataKeyEnumerator completionBlock]
  -[SBKSyncResponseDataKeyEnumerator setCompletionBlock:]
  -[SBKSyncResponseDataKeyEnumerator setTransaction:]
  -[SBKSyncResponseDataKeyEnumerator initWithResponseData:]
  -[SBKSyncResponseDataKeyEnumerator enumerateKeysInResponseForTransaction:completionBlock:]
  -[SBKSyncResponseDataKeyEnumerator _processNextKey]
  -[SBKSyncResponseDataKeyEnumerator _processUpdatedKey:isConflict:isDirty:]
  -[SBKSyncResponseDataKeyEnumerator _processDeletedKey:isDirty:]
  -[SBKSyncResponseDataKeyEnumerator resolvedConflictsNeedSyncToServer]
  -[SBKSyncResponseDataKeyEnumerator setResolvedConflictsNeedSyncToServer:]
  -[SBKSyncResponseDataKeyEnumerator updatedKeysEnumerator]
  -[SBKSyncResponseDataKeyEnumerator setUpdatedKeysEnumerator:]
  -[SBKSyncResponseDataKeyEnumerator conflictedKeysEnumerator]
  -[SBKSyncResponseDataKeyEnumerator setConflictedKeysEnumerator:]
  -[SBKSyncResponseDataKeyEnumerator deletedKeysEnumerator]
  -[SBKSyncResponseDataKeyEnumerator setDeletedKeysEnumerator:]


SBKAsynchronousTask : NSObject
 @property  id result
 @property  NSError *error
 @property  SBKTaskAssertion *taskAssertion
 @property  NSMutableArray *completions
 @property  @? finishedHandler
 @property  @? expirationHandler
 @property  int cancelType

  // instance methods
  -[SBKAsynchronousTask .cxx_destruct]
  -[SBKAsynchronousTask completions]
  -[SBKAsynchronousTask result]
  -[SBKAsynchronousTask setCompletions:]
  -[SBKAsynchronousTask setResult:]
  -[SBKAsynchronousTask _invalidateTimer]
  -[SBKAsynchronousTask dealloc]
  -[SBKAsynchronousTask invalidate]
  -[SBKAsynchronousTask setError:]
  -[SBKAsynchronousTask error]
  -[SBKAsynchronousTask setFinishedHandler:]
  -[SBKAsynchronousTask finishedHandler]
  -[SBKAsynchronousTask setExpirationHandler:]
  -[SBKAsynchronousTask expirationHandler]
  -[SBKAsynchronousTask setTaskAssertion:]
  -[SBKAsynchronousTask taskAssertion]
  -[SBKAsynchronousTask _invalidateAssertion:]
  -[SBKAsynchronousTask addTaskCompletionBlock:]
  -[SBKAsynchronousTask initWithHandlerQueue:timeout:debugDescription:]
  -[SBKAsynchronousTask invokeTaskCompletionBlocksWithBlock:]
  -[SBKAsynchronousTask finishTaskOperationWithResult:error:]
  -[SBKAsynchronousTask beginTaskOperation]
  -[SBKAsynchronousTask cancelType]
  -[SBKAsynchronousTask setCancelType:]
  -[SBKAsynchronousTask _onQueueFireExpirationHandlerIfNecesary]
  -[SBKAsynchronousTask endTaskOperation]


SBKLoadDomainVersionRequestHandler : SBKSyncRequestHandler <SBKSyncTransactionProcessing>
 @property  unsigned long itemCount
 @property  SBKSyncTransaction *transaction
 @property  BOOL loadsRemoteItemCount
 @property  unsigned long responseItemCount
 @property  NSString *responseDomainVersion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBKLoadDomainVersionRequestHandler conflictDetectionType]

  // instance methods
  -[SBKLoadDomainVersionRequestHandler transaction]
  -[SBKLoadDomainVersionRequestHandler .cxx_destruct]
  -[SBKLoadDomainVersionRequestHandler itemCount]
  -[SBKLoadDomainVersionRequestHandler runWithCompletionHandler:]
  -[SBKLoadDomainVersionRequestHandler setItemCount:]
  -[SBKLoadDomainVersionRequestHandler setTransaction:]
  -[SBKLoadDomainVersionRequestHandler loadsRemoteItemCount]
  -[SBKLoadDomainVersionRequestHandler setLoadsRemoteItemCount:]
  -[SBKLoadDomainVersionRequestHandler responseItemCount]


SBKSyncRequestHandler : SBKRequestHandler <SBKSyncTransactionProcessing>
 @property  SBKSyncResponseData *responseData
 @property  SBKTransactionController *transactionController
 @property  NSString *responseDomainVersion
 @property  NSArray *responseUpdatedKeys
 @property  NSArray *responseDeletedKeys
 @property  NSArray *responseConflictedKeys
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBKSyncRequestHandler conflictDetectionType]

  // instance methods
  -[SBKSyncRequestHandler .cxx_destruct]
  -[SBKSyncRequestHandler initWithBagContext:]
  -[SBKSyncRequestHandler responseData]
  -[SBKSyncRequestHandler transactionController]
  -[SBKSyncRequestHandler responseDomainVersion]
  -[SBKSyncRequestHandler initWithBagContext:accountIdentifier:]
  -[SBKSyncRequestHandler clearTransactionResponseData]
  -[SBKSyncRequestHandler transaction:willProcessResponseData:]
  -[SBKSyncRequestHandler transaction:didProcessResponseData:]
  -[SBKSyncRequestHandler transaction:processUpdatedKey:data:conflict:isDirty:]
  -[SBKSyncRequestHandler transaction:processDeletedKey:isDirty:]
  -[SBKSyncRequestHandler transaction:keyValuePairForUpdatedKey:]
  -[SBKSyncRequestHandler responseUpdatedKeys]
  -[SBKSyncRequestHandler startTransactionWithSyncAnchor:keysToUpdate:keysToDelete:finishedBlock:]
  -[SBKSyncRequestHandler _onQueue_clearTransactionResponseData]
  -[SBKSyncRequestHandler setResponseDomainVersion:]
  -[SBKSyncRequestHandler responseDeletedKeys]
  -[SBKSyncRequestHandler responseConflictedKeys]
  -[SBKSyncRequestHandler responseDataForResponseKey:]


SBKZipDeflateMemoryOutputStream : NSObject
  // class methods
  +[SBKZipDeflateMemoryOutputStream dataByDeflatingData:]

  // instance methods
  -[SBKZipDeflateMemoryOutputStream .cxx_destruct]
  -[SBKZipDeflateMemoryOutputStream close]
  -[SBKZipDeflateMemoryOutputStream dealloc]
  -[SBKZipDeflateMemoryOutputStream writeBuffer:size:]
  -[SBKZipDeflateMemoryOutputStream initWithBufferingSize:compressionType:]


SBKRequest : NSObject
 @property  SBKTransaction *transaction
 @property  BOOL concurrent
 @property  long long method
 @property  double timeoutInterval
 @property  BOOL shouldAuthenticate
 @property  BOOL includeDeviceGUID
 @property  NSData *bodyData
 @property  ISDataProvider *responseDataProvider

  // class methods
  +[SBKRequest requestWithRequestURL:]
  +[SBKRequest _methodStringForMethod:]
  +[SBKRequest bodyContentEncodingType]
  +[SBKRequest bodyContentType]
  +[SBKRequest _contentEncodingTypeStringForBodyContentEncodingType:]
  +[SBKRequest _contentTypeStringForBodyContentType:]

  // instance methods
  -[SBKRequest bodyData]
  -[SBKRequest isConcurrent]
  -[SBKRequest method]
  -[SBKRequest transaction]
  -[SBKRequest .cxx_destruct]
  -[SBKRequest setShouldAuthenticate:]
  -[SBKRequest timeoutInterval]
  -[SBKRequest setMethod:]
  -[SBKRequest shouldAuthenticate]
  -[SBKRequest setValue:forArgument:]
  -[SBKRequest setTransaction:]
  -[SBKRequest setBodyData:]
  -[SBKRequest setValue:forHeaderField:]
  -[SBKRequest acceptsGzipEncoding]
  -[SBKRequest canonicalResponseForResponse:]
  -[SBKRequest setBodyDataWithPropertyList:]
  -[SBKRequest setIncludeDeviceGUID:]
  -[SBKRequest newURLOperationWithDelegate:]
  -[SBKRequest copyRequestProperties]
  -[SBKRequest responseDataProvider]
  -[SBKRequest initWithRequestURL:]
  -[SBKRequest _defaultHeaderFields]
  -[SBKRequest setResponseDataProvider:]
  -[SBKRequest includeDeviceGUID]
  -[SBKRequest descriptionWithoutHeaderFields]
  -[SBKRequest newURLOperation]


SBKResponse : NSObject
 @property  NSString *MIMEType
 @property  SBKResponseStatus *responseStatus
 @property  unsigned long responseCode
 @property  NSDictionary *responseHeaderFields
 @property  NSDictionary *responseDictionary
 @property  NSError *error
 @property  long long statusCode
 @property  NSString *consoleDescription
 @property  NSError *requestError
 @property  BOOL isSuccess
 @property  BOOL isRecoverable
 @property  BOOL isError
 @property  BOOL shouldFileRadar
 @property  BOOL isGenericError
 @property  BOOL isUnsupportedClient
 @property  BOOL isAuthenticationError
 @property  BOOL isValidationError
 @property  BOOL isPuntedError
 @property  double retrySeconds

  // class methods
  +[SBKResponse responseWithResponse:]
  +[SBKResponse responseWithURLResponse:responseDictionary:]
  +[SBKResponse responseWithCode:headerFields:responseDictionary:MIMEType:error:]

  // instance methods
  -[SBKResponse responseStatus]
  -[SBKResponse responseCode]
  -[SBKResponse MIMEType]
  -[SBKResponse responseDictionary]
  -[SBKResponse .cxx_destruct]
  -[SBKResponse isError]
  -[SBKResponse statusCode]
  -[SBKResponse isSuccess]
  -[SBKResponse error]
  -[SBKResponse consoleDescription]
  -[SBKResponse isAuthenticationError]
  -[SBKResponse requestError]
  -[SBKResponse isRecoverable]
  -[SBKResponse responseHeaderFields]
  -[SBKResponse retrySeconds]
  -[SBKResponse isUnsupportedClient]
  -[SBKResponse isGenericError]
  -[SBKResponse isValidationError]
  -[SBKResponse initWithCode:headerFields:responseDictionary:MIMEType:error:]
  -[SBKResponse isPuntedError]
  -[SBKResponse initWithURLResponse:responseDictionary:]
  -[SBKResponse shouldFileRadar]


SBKResponseStatus : NSObject
 @property  long long statusCode
 @property  NSString *consoleDescription
 @property  NSError *requestError
 @property  BOOL isSuccess
 @property  BOOL isRecoverable
 @property  BOOL isError
 @property  BOOL shouldFileRadar
 @property  BOOL isGenericError
 @property  BOOL isUnsupportedClient
 @property  BOOL isAuthenticationError
 @property  BOOL isValidationError
 @property  BOOL isPuntedError

  // class methods
  +[SBKResponseStatus responseStatusForStatusCodeNumber:]

  // instance methods
  -[SBKResponseStatus .cxx_destruct]
  -[SBKResponseStatus isError]
  -[SBKResponseStatus statusCode]
  -[SBKResponseStatus isSuccess]
  -[SBKResponseStatus consoleDescription]
  -[SBKResponseStatus isAuthenticationError]
  -[SBKResponseStatus requestError]
  -[SBKResponseStatus isRecoverable]
  -[SBKResponseStatus isUnsupportedClient]
  -[SBKResponseStatus isGenericError]
  -[SBKResponseStatus isValidationError]
  -[SBKResponseStatus isPuntedError]
  -[SBKResponseStatus shouldFileRadar]
  -[SBKResponseStatus initWithStatus:isRecoverable:isError:consoleDescription:shouldFileRadar:]


SBKSyncRequest : SBKRequest
  // class methods
  +[SBKSyncRequest requestForTransaction:]

  // instance methods
  -[SBKSyncRequest canonicalResponseForResponse:]


SBKRequestHandler : NSObject
 @property  SBKStoreURLBagContext *bagContext

  // instance methods
  -[SBKRequestHandler .cxx_destruct]
  -[SBKRequestHandler initWithBagContext:]
  -[SBKRequestHandler timeout]
  -[SBKRequestHandler cancel]
  -[SBKRequestHandler bagContext]


SBKTransaction : NSObject
 @property  NSMutableDictionary *userInfo
 @property  NSString *domain
 @property  NSURL *requestURL
 @property  SBKRequest *activeRequest

  // instance methods
  -[SBKTransaction setUserInfo:]
  -[SBKTransaction newRequest]
  -[SBKTransaction .cxx_destruct]
  -[SBKTransaction domain]
  -[SBKTransaction init]
  -[SBKTransaction userInfo]
  -[SBKTransaction requestURL]
  -[SBKTransaction setRequestURL:]
  -[SBKTransaction activeRequest]
  -[SBKTransaction setActiveRequest:]
  -[SBKTransaction clampsKey]
  -[SBKTransaction setTransactionContext:forKey:]
  -[SBKTransaction processDataInResponse:withCompletionHandler:]
  -[SBKTransaction transactionContextForKey:]
  -[SBKTransaction initWithDomain:requestURL:]


SBKPullValueResponse : SBKResponse
 @property  NSString *itemKey
 @property  NSString *itemVersion
 @property  NSData *itemValuePayload
 @property  NSString *domainVersion

  // class methods
  +[SBKPullValueResponse responseWithResponse:transaction:]

  // instance methods
  -[SBKPullValueResponse .cxx_destruct]
  -[SBKPullValueResponse domainVersion]
  -[SBKPullValueResponse itemVersion]
  -[SBKPullValueResponse itemValuePayload]
  -[SBKPullValueResponse itemKey]
  -[SBKPullValueResponse deserializeResponseBodyWithTransaction:]


SBKPushValueRequest : SBKRequest
  // class methods
  +[SBKPushValueRequest propertyListBodyWithTransaction:]
  +[SBKPushValueRequest requestForTransaction:]

  // instance methods
  -[SBKPushValueRequest canonicalResponseForResponse:]


(SBKAdditions)
	// class methods
	+[(SBKAdditions) SBKStringFromDigestData:]
	+[(SBKAdditions) SBKStringByMD5HashingString:]

	// instance methods
	-[(SBKAdditions) _SBKDataByInflatingWithNoZipHeader]
	-[(SBKAdditions) _SBKDataByDeflatingWithNoZipHeaderWithCompression:]
	-[(SBKAdditions) SBKDataByInflatingWithNoZipHeader]
	-[(SBKAdditions) SBKDataByDeflatingWithNoZipHeader]
	-[(SBKAdditions) SBKDataByInflatingWithGZip]
	-[(SBKAdditions) SBKDataByDeflatingWithGZip]

01 00 0200 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSProcessAssertion 
01 00 0400 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserIdentityStore 
01 00 0500 /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore: ISDevice 
01 00 0500 /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore: ISNetworkObserver 
01 00 0500 /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore: ISPropertyListProvider 
01 00 0500 /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore: ISStoreURLOperation 
01 00 0700 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3MusicLibrary 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSConditionLock 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPURLResponse 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0a00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0800 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSAccountStore 
01 00 0800 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSMutableAuthenticationContext 
01 00 0800 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSMutableURLRequestProperties 
01 00 0800 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSURLBag 
01 00 0800 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSURLBagContext 
