|| __DATA.__objc_data _OBJC_CLASS_$_SKHandleInvitability
|| __DATA.__objc_data _OBJC_CLASS_$_SKInvitationPayload
|| __DATA.__objc_data _OBJC_CLASS_$_SKPublishedStatus
|| __DATA.__objc_data _OBJC_CLASS_$_SKStatusPayload
|| __DATA.__objc_data _OBJC_CLASS_$_SKStatusPublishRequest
|| __DATA.__objc_data _OBJC_CLASS_$_SKStatusPublishingDaemonConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_SKHandleInvitability
|| __DATA.__objc_data _OBJC_METACLASS_$_SKInvitationPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_SKPublishedStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_SKStatusPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_SKStatusPublishRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_SKStatusPublishingDaemonConnection
|| __DATA_CONST.__const _SKPresenceErrorDomain
|| __DATA_CONST.__const _SKStatusPublishingErrorDomain
|| __DATA_CONST.__const _SKStatusSubscriptionErrorDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKPresence
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKPresenceDaemonConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKPresentDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKStatusPublishingService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKStatusSubscription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKStatusSubscriptionDaemonConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKStatusSubscriptionMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKStatusSubscriptionService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SKSubscriptionValidationTokens
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKPresence
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKPresenceDaemonConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKPresentDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKStatusPublishingService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKStatusSubscription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKStatusSubscriptionDaemonConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKStatusSubscriptionMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKStatusSubscriptionService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SKSubscriptionValidationTokens
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x5
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
SKPublishedStatus : NSObject <NSSecureCoding>
 @property  SKStatusPayload *statusPayload
 @property  NSString *statusUniqueIdentifier
 @property  NSDate *datePublished
 @property  NSDate *dateCreated
 @property  NSDate *dateReceived
 @property  SKInvitationPayload *invitationPayload

  // class methods
  +[SKPublishedStatus supportsSecureCoding]

  // instance methods
  -[SKPublishedStatus encodeWithCoder:]
  -[SKPublishedStatus dateCreated]
  -[SKPublishedStatus .cxx_destruct]
  -[SKPublishedStatus dateReceived]
  -[SKPublishedStatus initWithCoder:]
  -[SKPublishedStatus datePublished]
  -[SKPublishedStatus statusUniqueIdentifier]
  -[SKPublishedStatus initWithStatusPayload:statusUniqueIdentifier:datePublished:dateCreated:dateReceived:invitationPayload:]
  -[SKPublishedStatus statusPayload]
  -[SKPublishedStatus invitationPayload]


SKSubscriptionValidationTokens : NSObject <NSSecureCoding>
 @property  NSString *subscriptionValidationToken
 @property  NSString *encryptionValidationToken

  // class methods
  +[SKSubscriptionValidationTokens supportsSecureCoding]

  // instance methods
  -[SKSubscriptionValidationTokens encodeWithCoder:]
  -[SKSubscriptionValidationTokens .cxx_destruct]
  -[SKSubscriptionValidationTokens isEqual:]
  -[SKSubscriptionValidationTokens initWithCoder:]
  -[SKSubscriptionValidationTokens initWithSubscriptionValidationToken:encryptionValidationToken:]
  -[SKSubscriptionValidationTokens subscriptionValidationToken]
  -[SKSubscriptionValidationTokens encryptionValidationToken]
  -[SKSubscriptionValidationTokens isEqualToSubscriptionValidationTokens:]


SKInvitationPayload : NSObject <NSSecureCoding>
 @property  NSDictionary *payloadDictionary
 @property  NSDictionary *cachedPayloadDictionary
 @property  NSData *payloadData
 @property  NSDate *dateCreated

  // class methods
  +[SKInvitationPayload supportsSecureCoding]
  +[SKInvitationPayload logger]

  // instance methods
  -[SKInvitationPayload encodeWithCoder:]
  -[SKInvitationPayload dateCreated]
  -[SKInvitationPayload .cxx_destruct]
  -[SKInvitationPayload initWithCoder:]
  -[SKInvitationPayload payloadData]
  -[SKInvitationPayload payloadDictionary]
  -[SKInvitationPayload initWithData:dateCreated:]
  -[SKInvitationPayload cachedPayloadDictionary]
  -[SKInvitationPayload setCachedPayloadDictionary:]
  -[SKInvitationPayload initWithDictionary:dateCreated:]


SKStatusSubscriptionMetadata : NSObject <NSSecureCoding>
 @property  NSString *subscriptionIdentifier
 @property  NSString *statusTypeIdentifier
 @property  BOOL personalStatusSubscription
 @property  SKPublishedStatus *currentStatus
 @property  NSArray *ownerHandles

  // class methods
  +[SKStatusSubscriptionMetadata supportsSecureCoding]

  // instance methods
  -[SKStatusSubscriptionMetadata subscriptionIdentifier]
  -[SKStatusSubscriptionMetadata currentStatus]
  -[SKStatusSubscriptionMetadata encodeWithCoder:]
  -[SKStatusSubscriptionMetadata .cxx_destruct]
  -[SKStatusSubscriptionMetadata statusTypeIdentifier]
  -[SKStatusSubscriptionMetadata initWithCoder:]
  -[SKStatusSubscriptionMetadata ownerHandles]
  -[SKStatusSubscriptionMetadata isPersonalStatusSubscription]
  -[SKStatusSubscriptionMetadata initWithSubscriptionIdentifier:statusTypeIdentifier:isPersonalStatusSubscription:currentStatus:ownerHandles:]


SKPresenceDaemonConnection : NSObject
 @property  NSXPCConnection *xpcConnection
 @property  {os_unfair_lock_s=I} lock
 @property  <SKPresenceDaemonDelegateProtocol> *presenceDaemonDelegate
 @property  <SKPresenceConnectionDelegateProtocol> *connectionDelegate

  // class methods
  +[SKPresenceDaemonConnection logger]
  +[SKPresenceDaemonConnection daemonXPCInterface]
  +[SKPresenceDaemonConnection daemonDelegateXPCInterface]

  // instance methods
  -[SKPresenceDaemonConnection connectionDelegate]
  -[SKPresenceDaemonConnection setConnectionDelegate:]
  -[SKPresenceDaemonConnection xpcConnection]
  -[SKPresenceDaemonConnection .cxx_destruct]
  -[SKPresenceDaemonConnection setXpcConnection:]
  -[SKPresenceDaemonConnection setLock:]
  -[SKPresenceDaemonConnection lock]
  -[SKPresenceDaemonConnection setXPCConnection:]
  -[SKPresenceDaemonConnection initWithPresenceDaemonDelegate:connectionDelegate:]
  -[SKPresenceDaemonConnection asynchronousRemoteDaemonWithErrorHandler:]
  -[SKPresenceDaemonConnection synchronousRemoteDaemonWithErrorHandler:]
  -[SKPresenceDaemonConnection _xpcConnectionOptions]
  -[SKPresenceDaemonConnection presenceDaemonDelegate]
  -[SKPresenceDaemonConnection setPresenceDaemonDelegate:]


SKStatusPublishingService : NSObject <SKStatusPublishingDaemonDelegateProtocol, SKStatusPublishingConnectionDelegateProtocol>
 @property  SKStatusPublishingDaemonConnection *daemonConnection
 @property  NSMapTable *delegates
 @property  BOOL registeredForDelegateCallbacks
 @property  NSObject<OS_dispatch_queue> *privateWorkQueue
 @property  NSString *statusTypeIdentifier
 @property  NSArray *invitedHandles
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SKStatusPublishingService logger]

  // instance methods
  -[SKStatusPublishingService _inviteHandles:fromSenderHandle:withInvitationPayload:completion:]
  -[SKStatusPublishingService setDaemonConnection:]
  -[SKStatusPublishingService delegates]
  -[SKStatusPublishingService addDelegate:queue:]
  -[SKStatusPublishingService daemonConnection]
  -[SKStatusPublishingService inviteHandleFromPrimaryAccountHandle:withInvitationPayload:completion:]
  -[SKStatusPublishingService publishStatusRequest:completion:]
  -[SKStatusPublishingService setDelegates:]
  -[SKStatusPublishingService fetchHandleInvitabilityFromPrimaryAccountHandle:completion:]
  -[SKStatusPublishingService publishingDaemonConnectionDidDisconnect:]
  -[SKStatusPublishingService removeInvitedHandle:completion:]
  -[SKStatusPublishingService _fetchHandleInvitability:fromSenderHandle:completion:]
  -[SKStatusPublishingService inviteHandle:withInvitationPayload:completion:]
  -[SKStatusPublishingService isHandleInvited:fromSenderHandle:]
  -[SKStatusPublishingService setPrivateWorkQueue:]
  -[SKStatusPublishingService _isHandleInvited:fromSenderHandle:]
  -[SKStatusPublishingService .cxx_destruct]
  -[SKStatusPublishingService invitedHandles]
  -[SKStatusPublishingService _simulateCrashIfNecessaryForError:]
  -[SKStatusPublishingService _delegatesPerformOnResponseQueueForGroup:block:]
  -[SKStatusPublishingService privateWorkQueue]
  -[SKStatusPublishingService removeDelegate:]
  -[SKStatusPublishingService inviteHandles:withInvitationPayload:completion:]
  -[SKStatusPublishingService _isHandleInvited:fromSenderHandle:completion:]
  -[SKStatusPublishingService inviteHandlesFromPrimaryAccountHandle:withInvitationPayload:completion:]
  -[SKStatusPublishingService removeInvitedHandles:completion:]
  -[SKStatusPublishingService _isHandleInvitable:fromSenderHandle:completion:]
  -[SKStatusPublishingService _registerForDelegateCallbacksIfNecessary]
  -[SKStatusPublishingService isHandleInvitableFromPrimaryAccountHandle:completion:]
  -[SKStatusPublishingService isHandleInvitable:completion:]
  -[SKStatusPublishingService registeredForDelegateCallbacks]
  -[SKStatusPublishingService isHandleInvited:completion:]
  -[SKStatusPublishingService inviteHandle:fromSenderHandle:withInvitationPayload:completion:]
  -[SKStatusPublishingService fetchHandleInvitability:fromSenderHandle:completion:]
  -[SKStatusPublishingService isHandleInvitedFromPrimaryAccountHandle:completion:]
  -[SKStatusPublishingService statusTypeIdentifier]
  -[SKStatusPublishingService isHandleInvited:fromSenderHandle:completion:]
  -[SKStatusPublishingService initWithStatusTypeIdentifier:]
  -[SKStatusPublishingService removeAllInvitedHandlesWithCompletion:]
  -[SKStatusPublishingService setRegisteredForDelegateCallbacks:]
  -[SKStatusPublishingService isHandleInvited:]
  -[SKStatusPublishingService inviteHandles:fromSenderHandle:withInvitationPayload:completion:]
  -[SKStatusPublishingService isHandleInvitedFromPrimaryAccountHandle:]
  -[SKStatusPublishingService isHandleInvitable:fromSenderHandle:completion:]
  -[SKStatusPublishingService _inviteHandle:fromSenderHandle:withInvitationPayload:completion:]


SKStatusPublishingDaemonConnection : NSObject
 @property  NSXPCConnection *xpcConnection
 @property  <SKStatusPublishingDaemonDelegateProtocol> *publishingDaemonDelegate
 @property  <SKStatusPublishingConnectionDelegateProtocol> *connectionDelegate

  // class methods
  +[SKStatusPublishingDaemonConnection logger]
  +[SKStatusPublishingDaemonConnection daemonXPCInterface]
  +[SKStatusPublishingDaemonConnection daemonDelegateXPCInterface]

  // instance methods
  -[SKStatusPublishingDaemonConnection connectionDelegate]
  -[SKStatusPublishingDaemonConnection setConnectionDelegate:]
  -[SKStatusPublishingDaemonConnection xpcConnection]
  -[SKStatusPublishingDaemonConnection .cxx_destruct]
  -[SKStatusPublishingDaemonConnection setXpcConnection:]
  -[SKStatusPublishingDaemonConnection setXPCConnection:]
  -[SKStatusPublishingDaemonConnection asynchronousRemoteDaemonWithErrorHandler:]
  -[SKStatusPublishingDaemonConnection synchronousRemoteDaemonWithErrorHandler:]
  -[SKStatusPublishingDaemonConnection _xpcConnectionOptions]
  -[SKStatusPublishingDaemonConnection initWithPublishingDaemonDelegate:connectionDelegate:]
  -[SKStatusPublishingDaemonConnection publishingDaemonDelegate]
  -[SKStatusPublishingDaemonConnection setPublishingDaemonDelegate:]


SKStatusPayload : NSObject <NSSecureCoding>
 @property  NSDictionary *payloadDictionary
 @property  NSDictionary *cachedPayloadDictionary
 @property  NSData *payloadData

  // class methods
  +[SKStatusPayload supportsSecureCoding]
  +[SKStatusPayload logger]

  // instance methods
  -[SKStatusPayload encodeWithCoder:]
  -[SKStatusPayload initWithDictionary:]
  -[SKStatusPayload .cxx_destruct]
  -[SKStatusPayload initWithData:]
  -[SKStatusPayload initWithCoder:]
  -[SKStatusPayload payloadData]
  -[SKStatusPayload payloadDictionary]
  -[SKStatusPayload cachedPayloadDictionary]
  -[SKStatusPayload setCachedPayloadDictionary:]


SKPresentDevice : NSObject <NSSecureCoding>
 @property  NSDate *publishTime
 @property  BOOL isSelfDevice
 @property  BOOL isSelfHandle
 @property  SKHandle *handle
 @property  NSString *deviceIdentifier

  // class methods
  +[SKPresentDevice supportsSecureCoding]
  +[SKPresentDevice logger]

  // instance methods
  -[SKPresentDevice deviceIdentifier]
  -[SKPresentDevice encodeWithCoder:]
  -[SKPresentDevice dealloc]
  -[SKPresentDevice handle]
  -[SKPresentDevice .cxx_destruct]
  -[SKPresentDevice isEqual:]
  -[SKPresentDevice initWithCoder:]
  -[SKPresentDevice initWithHandle:deviceIdentifier:publishTime:selfHandle:selfDevice:]
  -[SKPresentDevice isSelfDevice]
  -[SKPresentDevice isSelfHandle]
  -[SKPresentDevice publishTime]


SKStatusSubscription : NSObject
 @property  SKHandle *ownerHandle
 @property  SKStatusSubscriptionMetadata *subscriptionMetadata
 @property  SKStatusSubscriptionDaemonConnection *daemonConnection
 @property  SKPublishedStatus *currentStatus
 @property  NSString *subscriptionIdentifier
 @property  NSArray *ownerHandles
 @property  BOOL personalStatusSubscription

  // class methods
  +[SKStatusSubscription logger]

  // instance methods
  -[SKStatusSubscription subscriptionIdentifier]
  -[SKStatusSubscription currentStatus]
  -[SKStatusSubscription daemonConnection]
  -[SKStatusSubscription .cxx_destruct]
  -[SKStatusSubscription ownerHandles]
  -[SKStatusSubscription isPersonalStatusSubscription]
  -[SKStatusSubscription ownerHandle]
  -[SKStatusSubscription releaseTransientSubscriptionAssertionWithCompletion:]
  -[SKStatusSubscription retainTransientSubscriptionAssertionWithCompletion:]
  -[SKStatusSubscription initWithSubscriptionMetadata:daemonConnection:]
  -[SKStatusSubscription retainPersistentSubscriptionAssertionForApplicationIdentifier:completion:]
  -[SKStatusSubscription releasePersistentSubscriptionAssertionForApplicationIdentifier:completion:]
  -[SKStatusSubscription deleteSubscriptionWithCompletion:]
  -[SKStatusSubscription _ownerHandlesDescription]
  -[SKStatusSubscription subscriptionMetadata]


SKHandleInvitability : NSObject <NSSecureCoding>
 @property  BOOL isInvitable
 @property  BOOL wasRemoved

  // class methods
  +[SKHandleInvitability supportsSecureCoding]
  +[SKHandleInvitability logger]

  // instance methods
  -[SKHandleInvitability encodeWithCoder:]
  -[SKHandleInvitability initWithCoder:]
  -[SKHandleInvitability wasRemoved]
  -[SKHandleInvitability isInvitable]
  -[SKHandleInvitability initWithIsInvitable:wasRemoved:]


SKPresence : NSObject <SKPresenceDaemonDelegateProtocol, SKPresenceConnectionDelegateProtocol>
 @property  SKPresenceDaemonConnection *daemonConnection
 @property  NSMapTable *delegates
 @property  BOOL registeredForDelegateCallbacks
 @property  NSObject<OS_dispatch_queue> *privateWorkQueue
 @property  {os_unfair_lock_s=I} lock
 @property  {os_unfair_lock_s=I} delegateLock
 @property  NSString *presenceIdentifier
 @property  NSArray *presentDevices
 @property  NSArray *invitedHandles
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SKPresence _logger]

  // instance methods
  -[SKPresence setDaemonConnection:]
  -[SKPresence delegates]
  -[SKPresence addDelegate:queue:]
  -[SKPresence daemonConnection]
  -[SKPresence setDelegates:]
  -[SKPresence fetchHandleInvitabilityFromPrimaryAccountHandle:completion:]
  -[SKPresence removeInvitedHandle:completion:]
  -[SKPresence _fetchHandleInvitability:fromSenderHandle:completion:]
  -[SKPresence isHandleInvited:fromSenderHandle:]
  -[SKPresence setPrivateWorkQueue:]
  -[SKPresence _isHandleInvited:fromSenderHandle:]
  -[SKPresence .cxx_destruct]
  -[SKPresence invitedHandles]
  -[SKPresence _simulateCrashIfNecessaryForError:]
  -[SKPresence _delegatesPerformOnResponseQueueForGroup:block:]
  -[SKPresence privateWorkQueue]
  -[SKPresence removeDelegate:]
  -[SKPresence _isHandleInvited:fromSenderHandle:completion:]
  -[SKPresence removeInvitedHandles:completion:]
  -[SKPresence _registerForDelegateCallbacksIfNecessary]
  -[SKPresence setLock:]
  -[SKPresence registeredForDelegateCallbacks]
  -[SKPresence fetchHandleInvitability:fromSenderHandle:completion:]
  -[SKPresence isHandleInvitedFromPrimaryAccountHandle:completion:]
  -[SKPresence lock]
  -[SKPresence isHandleInvited:fromSenderHandle:completion:]
  -[SKPresence setRegisteredForDelegateCallbacks:]
  -[SKPresence delegateLock]
  -[SKPresence isHandleInvitedFromPrimaryAccountHandle:]
  -[SKPresence releaseTransientSubscriptionAssertionWithCompletion:]
  -[SKPresence retainTransientSubscriptionAssertionWithCompletion:]
  -[SKPresence setDelegateLock:]
  -[SKPresence fetchPresenceCapability:]
  -[SKPresence presentHandlesChangedForPresenceIdentifier:completion:]
  -[SKPresence invitedHandlesChangedForPresenceIdentifier:completion:]
  -[SKPresence presenceDaemonConnectionDidDisconnect:]
  -[SKPresence initWithPresenceIdentifier:]
  -[SKPresence assertPresenceWithCompletion:]
  -[SKPresence releasePresenceWithCompletion:]
  -[SKPresence presentDevices]
  -[SKPresence inviteHandle:fromSenderHandle:completion:]
  -[SKPresence inviteHandleFromPrimaryAccountHandle:completion:]
  -[SKPresence _inviteHandle:fromSenderHandle:completion:]
  -[SKPresence inviteHandles:fromSenderHandle:completion:]
  -[SKPresence inviteHandlesFromPrimaryAccountHandle:completion:]
  -[SKPresence _inviteHandles:fromSenderHandle:completion:]
  -[SKPresence presenceIdentifier]


SKStatusPublishRequest : NSObject <NSSecureCoding>
 @property  SKStatusPayload *statusPayload
 @property  BOOL isScheduledRequest
 @property  NSString *statusUniqueIdentifier
 @property  NSDate *dateCreated
 @property  BOOL isSecondaryDeviceRepublish

  // class methods
  +[SKStatusPublishRequest supportsSecureCoding]

  // instance methods
  -[SKStatusPublishRequest encodeWithCoder:]
  -[SKStatusPublishRequest dateCreated]
  -[SKStatusPublishRequest .cxx_destruct]
  -[SKStatusPublishRequest initWithCoder:]
  -[SKStatusPublishRequest setDateCreated:]
  -[SKStatusPublishRequest statusUniqueIdentifier]
  -[SKStatusPublishRequest setIsScheduledRequest:]
  -[SKStatusPublishRequest setIsSecondaryDeviceRepublish:]
  -[SKStatusPublishRequest statusPayload]
  -[SKStatusPublishRequest initWithStatusPayload:]
  -[SKStatusPublishRequest initWithStatusPayload:isScheduledRequest:]
  -[SKStatusPublishRequest isScheduledRequest]
  -[SKStatusPublishRequest setStatusUniqueIdentifier:]
  -[SKStatusPublishRequest isSecondaryDeviceRepublish]


SKStatusSubscriptionService : NSObject <SKStatusSubscriptionDaemonDelegateProtocol, SKStatusSubscriptionConnectionDelegateProtocol>
 @property  SKStatusSubscriptionDaemonConnection *daemonConnection
 @property  NSMapTable *delegates
 @property  BOOL registeredForDelegateCallbacks
 @property  NSObject<OS_dispatch_queue> *privateWorkQueue
 @property  NSString *statusTypeIdentifier
 @property  SKStatusSubscription *personalStatusSubscription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SKStatusSubscriptionService logger]

  // instance methods
  -[SKStatusSubscriptionService setDaemonConnection:]
  -[SKStatusSubscriptionService delegates]
  -[SKStatusSubscriptionService addDelegate:queue:]
  -[SKStatusSubscriptionService daemonConnection]
  -[SKStatusSubscriptionService setDelegates:]
  -[SKStatusSubscriptionService setPrivateWorkQueue:]
  -[SKStatusSubscriptionService .cxx_destruct]
  -[SKStatusSubscriptionService _simulateCrashIfNecessaryForError:]
  -[SKStatusSubscriptionService _delegatesPerformOnResponseQueueForGroup:block:]
  -[SKStatusSubscriptionService privateWorkQueue]
  -[SKStatusSubscriptionService removeDelegate:]
  -[SKStatusSubscriptionService _registerForDelegateCallbacksIfNecessary]
  -[SKStatusSubscriptionService registeredForDelegateCallbacks]
  -[SKStatusSubscriptionService statusTypeIdentifier]
  -[SKStatusSubscriptionService initWithStatusTypeIdentifier:]
  -[SKStatusSubscriptionService setRegisteredForDelegateCallbacks:]
  -[SKStatusSubscriptionService personalStatusSubscription]
  -[SKStatusSubscriptionService statusSubscriptionForHandle:completion:]
  -[SKStatusSubscriptionService statusSubscriptionForHandle:]
  -[SKStatusSubscriptionService subscriptionValidationTokenForHandle:completion:]
  -[SKStatusSubscriptionService subscriptionValidationTokensForHandle:completion:]
  -[SKStatusSubscriptionService validatePersonalStatusSubscriptionMatchesSubscriptionValidationToken:fromSender:completion:]
  -[SKStatusSubscriptionService validatePersonalStatusSubscriptionMatchesSubscriptionValidationTokens:fromSender:completion:]
  -[SKStatusSubscriptionService subscriptionStateChangedForSubscriptions:completion:]
  -[SKStatusSubscriptionService subscriptionReceivedStatusUpdate:completion:]
  -[SKStatusSubscriptionService subscriptionInvitationReceived:completion:]
  -[SKStatusSubscriptionService subscriptionDaemonConnectionDidDisconnect:]
  -[SKStatusSubscriptionService allStatusSubscriptions]
  -[SKStatusSubscriptionService allStatusSubscriptionsExceptPersonalSubscription]
  -[SKStatusSubscriptionService allStatusSubscriptionsWithActiveAssertions]
  -[SKStatusSubscriptionService allStatusSubscriptionsWithActiveSubscriptions]
  -[SKStatusSubscriptionService _allStatusSubscriptionsIncludingPersonalSubscription:]
  -[SKStatusSubscriptionService allStatusSubscriptionsWithPersistentSubscriptionAssertionForApplicationIdentifier:completion:]
  -[SKStatusSubscriptionService subscriptionValidationTokensForHandle:error:]
  -[SKStatusSubscriptionService subscriptionValidationTokenForHandle:error:]


SKHandle : NSObject <NSSecureCoding>
 @property  NSString *handleString

  // class methods
  +[SKHandle supportsSecureCoding]

  // instance methods
  -[SKHandle handleString]
  -[SKHandle encodeWithCoder:]
  -[SKHandle .cxx_destruct]
  -[SKHandle initWithString:]
  -[SKHandle isEqual:]
  -[SKHandle initWithCoder:]
  -[SKHandle isExactlyEqualToHandle:]
  -[SKHandle initWithString:mergeID:]


SKStatusSubscriptionDaemonConnection : NSObject
 @property  NSXPCConnection *xpcConnection
 @property  <SKStatusSubscriptionDaemonDelegateProtocol> *subscriptionDaemonDelegate
 @property  <SKStatusSubscriptionConnectionDelegateProtocol> *connectionDelegate

  // class methods
  +[SKStatusSubscriptionDaemonConnection logger]
  +[SKStatusSubscriptionDaemonConnection daemonXPCInterface]
  +[SKStatusSubscriptionDaemonConnection daemonDelegateXPCInterface]

  // instance methods
  -[SKStatusSubscriptionDaemonConnection connectionDelegate]
  -[SKStatusSubscriptionDaemonConnection setConnectionDelegate:]
  -[SKStatusSubscriptionDaemonConnection xpcConnection]
  -[SKStatusSubscriptionDaemonConnection .cxx_destruct]
  -[SKStatusSubscriptionDaemonConnection setXpcConnection:]
  -[SKStatusSubscriptionDaemonConnection setXPCConnection:]
  -[SKStatusSubscriptionDaemonConnection asynchronousRemoteDaemonWithErrorHandler:]
  -[SKStatusSubscriptionDaemonConnection synchronousRemoteDaemonWithErrorHandler:]
  -[SKStatusSubscriptionDaemonConnection _xpcConnectionOptions]
  -[SKStatusSubscriptionDaemonConnection initWithSubscriptionDaemonDelegate:connectionDelegate:]
  -[SKStatusSubscriptionDaemonConnection subscriptionDaemonDelegate]
  -[SKStatusSubscriptionDaemonConnection setSubscriptionDaemonDelegate:]


SKDelegateResponseQueue : NSObject
 @property  NSObject<OS_dispatch_queue> *dispatchQueue

  // instance methods
  -[SKDelegateResponseQueue .cxx_destruct]
  -[SKDelegateResponseQueue dispatchQueue]
  -[SKDelegateResponseQueue initWithQueue:]


01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0200 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
