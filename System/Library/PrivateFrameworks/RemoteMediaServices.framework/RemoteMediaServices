|| __DATA.__data _RMSControlSessionTimeout
|| __DATA.__data _RMSDiscoverySessionTimeout
|| __DATA.__data _RMSPairingSessionTimeout
|| __DATA.__objc_data _OBJC_CLASS_$_RMSControlSession
|| __DATA.__objc_data _OBJC_CLASS_$_RMSDiscoverySession
|| __DATA.__objc_data _OBJC_CLASS_$_RMSIDSServer
|| __DATA.__objc_data _OBJC_CLASS_$_RMSNowPlayingInfo
|| __DATA.__objc_data _OBJC_CLASS_$_RMSPairingCredentials
|| __DATA.__objc_data _OBJC_CLASS_$_RMSPairingRecordStore
|| __DATA.__objc_data _OBJC_CLASS_$_RMSPairingSession
|| __DATA.__objc_data _OBJC_CLASS_$_RMSService
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSControlSession
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSDiscoverySession
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSIDSServer
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSNowPlayingInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSPairingCredentials
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSPairingRecordStore
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSPairingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSService
|| __TEXT.__text _NSStringFromRMSMessageType
|| __TEXT.__text _NSStringFromRMSResponseCode
|| __TEXT.__text _generateRandomPasscode
__ CFNetwork: _CFHTTPMessageGetResponseStatusCode
__ CFNetwork: _CFHTTPMessageSetHeaderFieldValue
__ CFNetwork: __CFHTTPServerConnectionInvalidate
__ CFNetwork: __CFHTTPServerConnectionSetClient
__ CFNetwork: __CFHTTPServerConnectionSetDispatchQueue
__ CFNetwork: __CFHTTPServerCopyProperty
__ CFNetwork: __CFHTTPServerCreateService
__ CFNetwork: __CFHTTPServerInvalidate
__ CFNetwork: __CFHTTPServerRequestCopyProperty
__ CFNetwork: __CFHTTPServerRequestCreateResponseMessage
__ CFNetwork: __CFHTTPServerResponseCopyProperty
__ CFNetwork: __CFHTTPServerResponseCreateWithData
__ CFNetwork: __CFHTTPServerResponseEnqueue
__ CFNetwork: __CFHTTPServerSetDispatchQueue
__ CFNetwork: __kCFHTTPServerRequestHTTPVersion
__ CFNetwork: __kCFHTTPServerRequestMethod
__ CFNetwork: __kCFHTTPServerRequestURL
__ CFNetwork: __kCFHTTPServerResponseMessage
__ CFNetwork: __kCFHTTPServerServicePort
__ CFNetwork: _kCFHTTPVersion1_1
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFErrorGetCode
__ CoreFoundation: _CFErrorGetDomain
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFStreamCreatePairWithSocketToHost
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreGraphics: _CGContextDrawImage
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextScaleCTM
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextTranslateCTM
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSStringFromClass
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNetService
__ Foundation: _OBJC_CLASS_$_NSNetServiceBrowser
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSUUID
__ HomeSharing: _HSGroupIDDidChangeNotification
__ HomeSharing: _OBJC_CLASS_$_HSAccountStore
__ IDS: _IDSDefaultPairedDevice
__ IDS: _IDSMaxMessageTimeout
__ IDS: _IDSSendMessageOptionBypassDuetKey
__ IDS: _IDSSendMessageOptionEnforceRemoteTimeoutsKey
__ IDS: _IDSSendMessageOptionExpectsPeerResponseKey
__ IDS: _IDSSendMessageOptionFireAndForgetKey
__ IDS: _IDSSendMessageOptionLocalDeliveryKey
__ IDS: _IDSSendMessageOptionPeerResponseIdentifierKey
__ IDS: _IDSSendMessageOptionQueueOneIdentifierKey
__ IDS: _IDSSendMessageOptionTimeoutKey
__ IDS: _OBJC_CLASS_$_IDSProtobuf
__ IDS: _OBJC_CLASS_$_IDSService
__ IOKit: _IOPMAssertionCreateWithProperties
__ IOKit: _IOPMAssertionRelease
__ IOKit: _IOPMAssertionSetProperty
__ MediaRemote: _MRExternalDeviceConnect
__ MediaRemote: _MRExternalDeviceCopyCustomOrigin
__ MediaRemote: _MRExternalDeviceCopyDeviceInfo
__ MediaRemote: _MRExternalDeviceCopyName
__ MediaRemote: _MRExternalDeviceCopySystemBuildVersion
__ MediaRemote: _MRExternalDeviceCopyUniqueIdentifier
__ MediaRemote: _MRExternalDeviceDisconnect
__ MediaRemote: _MRExternalDeviceIsConnected
__ MediaRemote: _MRExternalDeviceIsPaired
__ MediaRemote: _MRExternalDeviceIsPairingAllowed
__ MediaRemote: _MRExternalDeviceSetConnectionStateCallback
__ MediaRemote: _MRExternalDeviceSetPairingCallback
__ MediaRemote: _MRExternalDeviceSetWantsNowPlayingArtworkUpdates
__ MediaRemote: _MRExternalDeviceSetWantsNowPlayingUpdates
__ MediaRemote: _MRExternalDeviceUnpair
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin
__ MediaRemote: _MRMediaRemoteGetNowPlayingInfoWithOptionalArtwork
__ MediaRemote: _MRMediaRemoteRegisterForNowPlayingNotifications
__ MediaRemote: _MRMediaRemoteUnregisterForNowPlayingNotifications
__ MediaRemote: _MRNowPlayingArtworkCopyImageData
__ MediaRemote: _MROriginEqualToOrigin
__ MediaRemote: _MRPairedDeviceCopyDeviceUID
__ MediaRemote: _MRTelevisionControllerBeginDiscovery
__ MediaRemote: _MRTelevisionControllerCreate
__ MediaRemote: _MRTelevisionControllerEndDiscovery
__ MediaRemote: _MRTelevisionControllerSetDiscoveryCallback
__ MediaRemote: _MRTelevisionControllerSetRemovalCallback
__ MediaRemote: _MRTelevisionGetCurrentTextEditingSession
__ MediaRemote: _MRTelevisionSendButtonEvent
__ MediaRemote: _MRTelevisionSetTextEditingCallback
__ MediaRemote: _MRTelevisionTextEditingSetText
__ MediaRemote: _kMRMediaRemoteErrorExternalDevicePairingLockOutDelayUserInfoKey
__ MediaRemote: _kMRMediaRemoteFrameworkErrorDomain
__ MediaRemote: _kMRMediaRemoteMediaTypeAudioBook
__ MediaRemote: _kMRMediaRemoteMediaTypeITunesU
__ MediaRemote: _kMRMediaRemoteMediaTypeMusic
__ MediaRemote: _kMRMediaRemoteMediaTypePodcast
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationPlaybackStateDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAlbum
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtist
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDuration
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoElapsedTime
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoMediaType
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTimestamp
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTitle
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoUniqueIdentifier
__ MediaRemote: _kMRMediaRemoteOriginNowPlayingInfoDidChangeNotification
__ MediaRemote: _kMRMediaRemoteOriginUserInfoKey
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ SystemConfiguration: _SCNetworkReachabilityCreateWithAddress
__ SystemConfiguration: _SCNetworkReachabilityCreateWithName
__ SystemConfiguration: _SCNetworkReachabilityGetFlags
__ SystemConfiguration: _SCNetworkReachabilityScheduleWithRunLoop
__ SystemConfiguration: _SCNetworkReachabilitySetCallback
__ SystemConfiguration: _SCNetworkReachabilityUnscheduleFromRunLoop
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIImageJPEGRepresentation
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: _CC_MD5
__ libSystem.B.dylib: _CC_MD5_Final
__ libSystem.B.dylib: _CC_MD5_Init
__ libSystem.B.dylib: _CC_MD5_Update
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _random
__ libSystem.B.dylib: _srandom
__ libSystem.B.dylib: _time
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
RMSDiscoverySessionProxy : RMSSessionProxy <RMSDiscoverySession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSDiscoverySessionDelegate> *delegate
 @property  long long discoveryTypes
 @property  NSArray *availableServices
 @property  BOOL networkAvailable
 @property  NSArray *pairedNetworkNames

  // instance methods
  -[RMSDiscoverySessionProxy init]
  -[RMSDiscoverySessionProxy dealloc]
  -[RMSDiscoverySessionProxy delegate]
  -[RMSDiscoverySessionProxy setDelegate:]
  -[RMSDiscoverySessionProxy .cxx_destruct]
  -[RMSDiscoverySessionProxy endDiscovery]
  -[RMSDiscoverySessionProxy beginDiscovery]
  -[RMSDiscoverySessionProxy isNetworkAvailable]
  -[RMSDiscoverySessionProxy availableServices]
  -[RMSDiscoverySessionProxy _availableServicesDidUpdateNotification:]
  -[RMSDiscoverySessionProxy _handleSessionDidEndNotification:]
  -[RMSDiscoverySessionProxy _companionAvailabilityDidChange:]
  -[RMSDiscoverySessionProxy _wifiAvailabilityDidChange:]
  -[RMSDiscoverySessionProxy _updateNetworkAvailability]
  -[RMSDiscoverySessionProxy discoveryTypes]
  -[RMSDiscoverySessionProxy setDiscoveryTypes:]
  -[RMSDiscoverySessionProxy pairedNetworkNames]
  -[RMSDiscoverySessionProxy setPairedNetworkNames:]
  -[RMSDiscoverySessionProxy heartbeatDidFail]


RMSNowPlayingInfoDidUpdateMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasNowPlayingInfo
 @property  RMSNowPlayingInfoMessage *nowPlayingInfo

  // instance methods
  -[RMSNowPlayingInfoDidUpdateMessage isEqual:]
  -[RMSNowPlayingInfoDidUpdateMessage copyWithZone:]
  -[RMSNowPlayingInfoDidUpdateMessage .cxx_destruct]
  -[RMSNowPlayingInfoDidUpdateMessage dictionaryRepresentation]
  -[RMSNowPlayingInfoDidUpdateMessage writeTo:]
  -[RMSNowPlayingInfoDidUpdateMessage mergeFrom:]
  -[RMSNowPlayingInfoDidUpdateMessage readFrom:]
  -[RMSNowPlayingInfoDidUpdateMessage copyTo:]
  -[RMSNowPlayingInfoDidUpdateMessage sessionIdentifier]
  -[RMSNowPlayingInfoDidUpdateMessage setSessionIdentifier:]
  -[RMSNowPlayingInfoDidUpdateMessage nowPlayingInfo]
  -[RMSNowPlayingInfoDidUpdateMessage setNowPlayingInfo:]
  -[RMSNowPlayingInfoDidUpdateMessage hasNowPlayingInfo]
  -[RMSNowPlayingInfoDidUpdateMessage hasSessionIdentifier]
  -[RMSNowPlayingInfoDidUpdateMessage setHasSessionIdentifier:]


RMSConnectToServiceMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasService
 @property  RMSServiceMessage *service
 @property  BOOL hasPairingGUID
 @property  NSString *pairingGUID
 @property  BOOL hasAllowPairing
 @property  BOOL allowPairing

  // instance methods
  -[RMSConnectToServiceMessage isEqual:]
  -[RMSConnectToServiceMessage copyWithZone:]
  -[RMSConnectToServiceMessage .cxx_destruct]
  -[RMSConnectToServiceMessage dictionaryRepresentation]
  -[RMSConnectToServiceMessage writeTo:]
  -[RMSConnectToServiceMessage mergeFrom:]
  -[RMSConnectToServiceMessage readFrom:]
  -[RMSConnectToServiceMessage copyTo:]
  -[RMSConnectToServiceMessage service]
  -[RMSConnectToServiceMessage setService:]
  -[RMSConnectToServiceMessage hasService]
  -[RMSConnectToServiceMessage setPairingGUID:]
  -[RMSConnectToServiceMessage hasPairingGUID]
  -[RMSConnectToServiceMessage setAllowPairing:]
  -[RMSConnectToServiceMessage setHasAllowPairing:]
  -[RMSConnectToServiceMessage hasAllowPairing]
  -[RMSConnectToServiceMessage pairingGUID]
  -[RMSConnectToServiceMessage allowPairing]


RMSFairPlaySession : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL handshakeComplete

  // instance methods
  -[RMSFairPlaySession dealloc]
  -[RMSFairPlaySession invalidate]
  -[RMSFairPlaySession _getHardwareInfo:]
  -[RMSFairPlaySession _hexStringForData:]
  -[RMSFairPlaySession handshakeIterationWithData:]
  -[RMSFairPlaySession handshakeData]
  -[RMSFairPlaySession headerForURL:]
  -[RMSFairPlaySession isHandshakeComplete]


RMSNavigationCommandMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasNavigationCommand
 @property  int navigationCommand
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSNavigationCommandMessage isEqual:]
  -[RMSNavigationCommandMessage copyWithZone:]
  -[RMSNavigationCommandMessage dictionaryRepresentation]
  -[RMSNavigationCommandMessage writeTo:]
  -[RMSNavigationCommandMessage mergeFrom:]
  -[RMSNavigationCommandMessage readFrom:]
  -[RMSNavigationCommandMessage copyTo:]
  -[RMSNavigationCommandMessage sessionIdentifier]
  -[RMSNavigationCommandMessage setSessionIdentifier:]
  -[RMSNavigationCommandMessage hasSessionIdentifier]
  -[RMSNavigationCommandMessage setHasSessionIdentifier:]
  -[RMSNavigationCommandMessage setNavigationCommand:]
  -[RMSNavigationCommandMessage setHasNavigationCommand:]
  -[RMSNavigationCommandMessage hasNavigationCommand]
  -[RMSNavigationCommandMessage navigationCommand]


RMSSendTextMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasText
 @property  NSString *text

  // instance methods
  -[RMSSendTextMessage isEqual:]
  -[RMSSendTextMessage copyWithZone:]
  -[RMSSendTextMessage .cxx_destruct]
  -[RMSSendTextMessage dictionaryRepresentation]
  -[RMSSendTextMessage writeTo:]
  -[RMSSendTextMessage text]
  -[RMSSendTextMessage setText:]
  -[RMSSendTextMessage mergeFrom:]
  -[RMSSendTextMessage readFrom:]
  -[RMSSendTextMessage copyTo:]
  -[RMSSendTextMessage hasText]
  -[RMSSendTextMessage sessionIdentifier]
  -[RMSSendTextMessage setSessionIdentifier:]
  -[RMSSendTextMessage hasSessionIdentifier]
  -[RMSSendTextMessage setHasSessionIdentifier:]


RMSPairingRecordStore : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[RMSPairingRecordStore sharedRecordStore]

  // instance methods
  -[RMSPairingRecordStore init]
  -[RMSPairingRecordStore .cxx_destruct]
  -[RMSPairingRecordStore _synchronizePreferences]
  -[RMSPairingRecordStore allPairingRecords]
  -[RMSPairingRecordStore pairedServiceNetworkNames]
  -[RMSPairingRecordStore pairingRecordForServiceWithNetworkName:]
  -[RMSPairingRecordStore savePairingRecord:forServiceWithNetworkName:]
  -[RMSPairingRecordStore removePairingRecordForServiceWithNetworkName:]


RMSSessionProxy : NSObject /usr/lib/libSystem.B.dylib
 @property  int sessionIdentifier

  // instance methods
  -[RMSSessionProxy init]
  -[RMSSessionProxy dealloc]
  -[RMSSessionProxy .cxx_destruct]
  -[RMSSessionProxy _applicationDidBecomeActive:]
  -[RMSSessionProxy sessionIdentifier]
  -[RMSSessionProxy setSessionIdentifier:]
  -[RMSSessionProxy _applicationWillResignActiveNotification:]
  -[RMSSessionProxy initWithTimeout:]
  -[RMSSessionProxy beginHeartbeat]
  -[RMSSessionProxy endHeartbeat]
  -[RMSSessionProxy sessionMatchesNotification:]
  -[RMSSessionProxy heartbeatDidFail]
  -[RMSSessionProxy heartbeatTime]
  -[RMSSessionProxy _sendHeartbeat:]


RMSAudioRouteMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasDisplayName
 @property  NSString *displayName
 @property  BOOL hasMacAddress
 @property  long long macAddress
 @property  BOOL hasSupportsVideo
 @property  BOOL supportsVideo
 @property  BOOL hasSelected
 @property  BOOL selected

  // instance methods
  -[RMSAudioRouteMessage isEqual:]
  -[RMSAudioRouteMessage copyWithZone:]
  -[RMSAudioRouteMessage .cxx_destruct]
  -[RMSAudioRouteMessage dictionaryRepresentation]
  -[RMSAudioRouteMessage displayName]
  -[RMSAudioRouteMessage writeTo:]
  -[RMSAudioRouteMessage mergeFrom:]
  -[RMSAudioRouteMessage readFrom:]
  -[RMSAudioRouteMessage copyTo:]
  -[RMSAudioRouteMessage setDisplayName:]
  -[RMSAudioRouteMessage macAddress]
  -[RMSAudioRouteMessage setSelected:]
  -[RMSAudioRouteMessage selected]
  -[RMSAudioRouteMessage hasDisplayName]
  -[RMSAudioRouteMessage supportsVideo]
  -[RMSAudioRouteMessage setSupportsVideo:]
  -[RMSAudioRouteMessage setMacAddress:]
  -[RMSAudioRouteMessage hasMacAddress]
  -[RMSAudioRouteMessage setHasMacAddress:]
  -[RMSAudioRouteMessage setHasSupportsVideo:]
  -[RMSAudioRouteMessage hasSupportsVideo]
  -[RMSAudioRouteMessage setHasSelected:]
  -[RMSAudioRouteMessage hasSelected]


RMSControlInterfaceMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSupportsSpeakerSelection
 @property  BOOL supportsSpeakerSelection
 @property  BOOL hasSupportsVolumeControl
 @property  BOOL supportsVolumeControl
 @property  BOOL hasSupportsDirectionalControl
 @property  BOOL supportsDirectionalControl

  // instance methods
  -[RMSControlInterfaceMessage isEqual:]
  -[RMSControlInterfaceMessage copyWithZone:]
  -[RMSControlInterfaceMessage dictionaryRepresentation]
  -[RMSControlInterfaceMessage writeTo:]
  -[RMSControlInterfaceMessage mergeFrom:]
  -[RMSControlInterfaceMessage readFrom:]
  -[RMSControlInterfaceMessage copyTo:]
  -[RMSControlInterfaceMessage supportsVolumeControl]
  -[RMSControlInterfaceMessage setSupportsSpeakerSelection:]
  -[RMSControlInterfaceMessage setHasSupportsSpeakerSelection:]
  -[RMSControlInterfaceMessage hasSupportsSpeakerSelection]
  -[RMSControlInterfaceMessage setSupportsVolumeControl:]
  -[RMSControlInterfaceMessage setHasSupportsVolumeControl:]
  -[RMSControlInterfaceMessage hasSupportsVolumeControl]
  -[RMSControlInterfaceMessage setSupportsDirectionalControl:]
  -[RMSControlInterfaceMessage setHasSupportsDirectionalControl:]
  -[RMSControlInterfaceMessage hasSupportsDirectionalControl]
  -[RMSControlInterfaceMessage supportsSpeakerSelection]
  -[RMSControlInterfaceMessage supportsDirectionalControl]


RMSSeekToPlaybackTimeMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasPlaybackTime
 @property  int playbackTime

  // instance methods
  -[RMSSeekToPlaybackTimeMessage isEqual:]
  -[RMSSeekToPlaybackTimeMessage copyWithZone:]
  -[RMSSeekToPlaybackTimeMessage dictionaryRepresentation]
  -[RMSSeekToPlaybackTimeMessage writeTo:]
  -[RMSSeekToPlaybackTimeMessage mergeFrom:]
  -[RMSSeekToPlaybackTimeMessage readFrom:]
  -[RMSSeekToPlaybackTimeMessage copyTo:]
  -[RMSSeekToPlaybackTimeMessage sessionIdentifier]
  -[RMSSeekToPlaybackTimeMessage setSessionIdentifier:]
  -[RMSSeekToPlaybackTimeMessage playbackTime]
  -[RMSSeekToPlaybackTimeMessage setPlaybackTime:]
  -[RMSSeekToPlaybackTimeMessage hasSessionIdentifier]
  -[RMSSeekToPlaybackTimeMessage setHasSessionIdentifier:]
  -[RMSSeekToPlaybackTimeMessage setHasPlaybackTime:]
  -[RMSSeekToPlaybackTimeMessage hasPlaybackTime]


_RMSMessageRecord : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned short messageType
 @property  id responseBlock

  // instance methods
  -[_RMSMessageRecord .cxx_destruct]
  -[_RMSMessageRecord messageType]
  -[_RMSMessageRecord setMessageType:]
  -[_RMSMessageRecord responseBlock]
  -[_RMSMessageRecord setResponseBlock:]


RMSIDSClient : NSObject /usr/lib/libSystem.B.dylib <IDSServiceDelegate>
 @property  BOOL companionAvailable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[RMSIDSClient sharedClient]

  // instance methods
  -[RMSIDSClient init]
  -[RMSIDSClient .cxx_destruct]
  -[RMSIDSClient isCompanionAvailable]
  -[RMSIDSClient setCompanionAvailable:]
  -[RMSIDSClient service:account:incomingUnhandledProtobuf:fromID:context:]
  -[RMSIDSClient service:devicesChanged:]
  -[RMSIDSClient service:account:identifier:didSendWithSuccess:error:]
  -[RMSIDSClient beginDiscoverySessionWithDiscoveryTypes:pairedNetworkNames:completionHandler:]
  -[RMSIDSClient updatePairedNetworkNames:sessionIdentifier:]
  -[RMSIDSClient endDiscoverySession:]
  -[RMSIDSClient sendHeartbeatWithSessionIdentifier:completionHandler:]
  -[RMSIDSClient _handleAvailableServicesDidUpdate:]
  -[RMSIDSClient _handlePairingChallengeRequest:]
  -[RMSIDSClient _handleNowPlayingInfoDidUpdate:]
  -[RMSIDSClient _handleNowPlayingArtworkAvailable:]
  -[RMSIDSClient _handleAudioRoutesDidUpdate:]
  -[RMSIDSClient _handleVolumeDidUpdate:]
  -[RMSIDSClient _handlePairingDidSucceed:]
  -[RMSIDSClient _handlePairingDidFail:]
  -[RMSIDSClient _handleSessionDidEnd:]
  -[RMSIDSClient _handleWifiAvailabilityDidChange:]
  -[RMSIDSClient _handleDidBeginEditingText:]
  -[RMSIDSClient _handleDidEndEditingText:]
  -[RMSIDSClient _handleBeginDiscoverySessionResponse:]
  -[RMSIDSClient _handleConnectToServiceResponse:]
  -[RMSIDSClient _handleNowPlayingArtworkDataResponse:]
  -[RMSIDSClient _handleBeginPairingSessionResponse:]
  -[RMSIDSClient _handleHeartbeatResponse:]
  -[RMSIDSClient _handlePickAudioRouteResponse:]
  -[RMSIDSClient _handleSetLikedStateResponse:]
  -[RMSIDSClient _handleBeginObservingNowPlayingResponse:]
  -[RMSIDSClient _handleSendTextResponse:]
  -[RMSIDSClient _handleUnpairServiceResponse:]
  -[RMSIDSClient _updateCompanionAvailability]
  -[RMSIDSClient _sendMessage:type:timeout:queueOneID:priority:responseBlock:]
  -[RMSIDSClient _invokeBeginDiscoveryResponseBlock:success:session:]
  -[RMSIDSClient _handleResponseCodeMessage:]
  -[RMSIDSClient _sendMessage:type:sendTimeout:responseTimeout:queueOneID:priority:responseBlock:]
  -[RMSIDSClient _invokeConnectToServiceResponseBlock:responseCode:responseData:controlInterface:session:]
  -[RMSIDSClient _sendMessage:type:timeout:queueOneID:priority:inResponseToProtobuf:]
  -[RMSIDSClient _invokeArtworkDataResponseBlock:artworkData:]
  -[RMSIDSClient _invokeBeginPairingResponseBlock:responseCode:session:]
  -[RMSIDSClient endPairingSession:]
  -[RMSIDSClient _invokeSetTextResponseBlock:responseCode:session:]
  -[RMSIDSClient _invokeResponseCodeResponseBlock:responseCode:]
  -[RMSIDSClient _sendMessage:type:sendTimeout:responseTimeout:queueOneID:priority:inResponseToProtobuf:responseBlock:]
  -[RMSIDSClient _handleTimeoutForMessageWithIdentifier:]
  -[RMSIDSClient _isCompanionAvailable]
  -[RMSIDSClient _isInMinimalConfiguration]
  -[RMSIDSClient connectToService:pairingGUID:allowPairing:completionHandler:]
  -[RMSIDSClient logoutWithSessionIdentifier:]
  -[RMSIDSClient _invokeCompletePairingChallengeResponseBlock:responseCode:controlInterface:]
  -[RMSIDSClient sendPlaybackCommand:sessionIdentifier:]
  -[RMSIDSClient setVolume:sessionIdentifier:]
  -[RMSIDSClient pickAudioRouteWithMacAddress:sessionIdentifier:completionHandler:]
  -[RMSIDSClient seekToPlaybackTime:sessionIdentifier:]
  -[RMSIDSClient setLikedState:itemID:databaseID:sessionIdentifier:completionHandler:]
  -[RMSIDSClient addToWishlist:databaseID:sessionIdentifier:completionHandler:]
  -[RMSIDSClient _handleAddToWishlistResponse:]
  -[RMSIDSClient beginObservingNowPlayingWithSessionIdentifier:completionHandler:]
  -[RMSIDSClient endObservingNowPlayingWithSessionIdentifier:]
  -[RMSIDSClient requestArtworkDataForNowPlayingInfo:width:height:compressionQuality:completionHandler:]
  -[RMSIDSClient sendTouchMoveWithDirection:repeatCount:sessionIdentifier:]
  -[RMSIDSClient sendTouchEndWithDirection:repeatCount:sessionIdentifier:]
  -[RMSIDSClient sendNavigationCommand:sessionIdentifier:]
  -[RMSIDSClient beginPairingSessionWithPasscode:appName:deviceName:deviceModel:completionHandler:]
  -[RMSIDSClient unpairService:sessionIdentifier:completionHandler:]
  -[RMSIDSClient sendText:sessionIdentifier:completionHandler:]


RMSHomeSharingServiceProvider : RMSBonjourServiceProvider
  // instance methods
  -[RMSHomeSharingServiceProvider searchType]
  -[RMSHomeSharingServiceProvider searchScope]
  -[RMSHomeSharingServiceProvider serviceDiscoverySource]


RMSService : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *displayName
 @property  NSString *networkName
 @property  NSString *hostName
 @property  int port
 @property  long long serviceType
 @property  long long serviceDiscoverySource
 @property  long long serviceFlags
 @property  NSString *homeSharingGroupKey
 @property  NSString *uniqueIdentifier

  // class methods
  +[RMSService servicesFromProtobufs:]
  +[RMSService protobufsFromServices:]

  // instance methods
  -[RMSService isEqual:]
  -[RMSService initWithData:]
  -[RMSService port]
  -[RMSService .cxx_destruct]
  -[RMSService data]
  -[RMSService setPort:]
  -[RMSService hostName]
  -[RMSService uniqueIdentifier]
  -[RMSService displayName]
  -[RMSService serviceType]
  -[RMSService setDisplayName:]
  -[RMSService setUniqueIdentifier:]
  -[RMSService setServiceType:]
  -[RMSService protobuf]
  -[RMSService isEqualToService:]
  -[RMSService setNetworkName:]
  -[RMSService networkName]
  -[RMSService initWithProtobuf:]
  -[RMSService setHostName:]
  -[RMSService serviceDiscoverySource]
  -[RMSService serviceFlags]
  -[RMSService homeSharingGroupKey]
  -[RMSService setServiceDiscoverySource:]
  -[RMSService setServiceFlags:]
  -[RMSService setHomeSharingGroupKey:]
  -[RMSService isLegacyAppleTV]
  -[RMSService isMediaRemoteSupported]


RMSTouchRemoteSocket : NSObject /usr/lib/libSystem.B.dylib <NSStreamDelegate>
 @property  <RMSTouchRemoteSocketDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[RMSTouchRemoteSocket dealloc]
  -[RMSTouchRemoteSocket delegate]
  -[RMSTouchRemoteSocket setDelegate:]
  -[RMSTouchRemoteSocket stream:handleEvent:]
  -[RMSTouchRemoteSocket .cxx_destruct]
  -[RMSTouchRemoteSocket disconnect]
  -[RMSTouchRemoteSocket connect]
  -[RMSTouchRemoteSocket _encryptData:]
  -[RMSTouchRemoteSocket initWithHost:port:encryptionKey:]
  -[RMSTouchRemoteSocket sendTouchCode:timeInMilliseconds:location:]


RMSPairingSession : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[RMSPairingSession localPairingSession]
  +[RMSPairingSession proxyPairingSession]


RMSTouchMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasDirection
 @property  int direction
 @property  BOOL hasRepeatCount
 @property  unsigned int repeatCount
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSTouchMessage isEqual:]
  -[RMSTouchMessage copyWithZone:]
  -[RMSTouchMessage dictionaryRepresentation]
  -[RMSTouchMessage writeTo:]
  -[RMSTouchMessage direction]
  -[RMSTouchMessage setDirection:]
  -[RMSTouchMessage mergeFrom:]
  -[RMSTouchMessage readFrom:]
  -[RMSTouchMessage copyTo:]
  -[RMSTouchMessage setRepeatCount:]
  -[RMSTouchMessage sessionIdentifier]
  -[RMSTouchMessage setSessionIdentifier:]
  -[RMSTouchMessage repeatCount]
  -[RMSTouchMessage hasDirection]
  -[RMSTouchMessage hasSessionIdentifier]
  -[RMSTouchMessage setHasDirection:]
  -[RMSTouchMessage hasRepeatCount]
  -[RMSTouchMessage setHasSessionIdentifier:]
  -[RMSTouchMessage setHasRepeatCount:]


RMSPairingSessionProxy : RMSSessionProxy <RMSPairingSession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSPairingSessionDelegate> *delegate
 @property  NSString *passcode
 @property  NSString *advertisedAppName
 @property  NSString *advertisedDeviceName
 @property  NSString *advertisedDeviceModel

  // instance methods
  -[RMSPairingSessionProxy init]
  -[RMSPairingSessionProxy dealloc]
  -[RMSPairingSessionProxy delegate]
  -[RMSPairingSessionProxy setDelegate:]
  -[RMSPairingSessionProxy .cxx_destruct]
  -[RMSPairingSessionProxy endPairing]
  -[RMSPairingSessionProxy passcode]
  -[RMSPairingSessionProxy setPasscode:]
  -[RMSPairingSessionProxy beginPairing]
  -[RMSPairingSessionProxy _handleSessionDidEndNotification:]
  -[RMSPairingSessionProxy heartbeatDidFail]
  -[RMSPairingSessionProxy _handleDidPairWithServiceNotification:]
  -[RMSPairingSessionProxy _handlePairingDidFailNotification:]
  -[RMSPairingSessionProxy _notifyDelegatePairingFailed]
  -[RMSPairingSessionProxy unpairService:completionHandler:]
  -[RMSPairingSessionProxy advertisedAppName]
  -[RMSPairingSessionProxy setAdvertisedAppName:]
  -[RMSPairingSessionProxy advertisedDeviceName]
  -[RMSPairingSessionProxy setAdvertisedDeviceName:]
  -[RMSPairingSessionProxy advertisedDeviceModel]
  -[RMSPairingSessionProxy setAdvertisedDeviceModel:]


RMSAvailableServicesDidUpdateMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  NSMutableArray *services

  // class methods
  +[RMSAvailableServicesDidUpdateMessage servicesType]

  // instance methods
  -[RMSAvailableServicesDidUpdateMessage isEqual:]
  -[RMSAvailableServicesDidUpdateMessage copyWithZone:]
  -[RMSAvailableServicesDidUpdateMessage .cxx_destruct]
  -[RMSAvailableServicesDidUpdateMessage dictionaryRepresentation]
  -[RMSAvailableServicesDidUpdateMessage writeTo:]
  -[RMSAvailableServicesDidUpdateMessage mergeFrom:]
  -[RMSAvailableServicesDidUpdateMessage readFrom:]
  -[RMSAvailableServicesDidUpdateMessage copyTo:]
  -[RMSAvailableServicesDidUpdateMessage sessionIdentifier]
  -[RMSAvailableServicesDidUpdateMessage setSessionIdentifier:]
  -[RMSAvailableServicesDidUpdateMessage services]
  -[RMSAvailableServicesDidUpdateMessage setServices:]
  -[RMSAvailableServicesDidUpdateMessage hasSessionIdentifier]
  -[RMSAvailableServicesDidUpdateMessage setHasSessionIdentifier:]
  -[RMSAvailableServicesDidUpdateMessage addServices:]
  -[RMSAvailableServicesDidUpdateMessage servicesCount]
  -[RMSAvailableServicesDidUpdateMessage clearServices]
  -[RMSAvailableServicesDidUpdateMessage servicesAtIndex:]


RMSConnectToServiceResponseMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasResponseCode
 @property  int responseCode
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasControlInterface
 @property  RMSControlInterfaceMessage *controlInterface
 @property  BOOL hasResponseData
 @property  int responseData

  // instance methods
  -[RMSConnectToServiceResponseMessage isEqual:]
  -[RMSConnectToServiceResponseMessage copyWithZone:]
  -[RMSConnectToServiceResponseMessage .cxx_destruct]
  -[RMSConnectToServiceResponseMessage dictionaryRepresentation]
  -[RMSConnectToServiceResponseMessage writeTo:]
  -[RMSConnectToServiceResponseMessage mergeFrom:]
  -[RMSConnectToServiceResponseMessage readFrom:]
  -[RMSConnectToServiceResponseMessage copyTo:]
  -[RMSConnectToServiceResponseMessage responseData]
  -[RMSConnectToServiceResponseMessage setResponseData:]
  -[RMSConnectToServiceResponseMessage sessionIdentifier]
  -[RMSConnectToServiceResponseMessage setSessionIdentifier:]
  -[RMSConnectToServiceResponseMessage responseCode]
  -[RMSConnectToServiceResponseMessage setResponseCode:]
  -[RMSConnectToServiceResponseMessage hasSessionIdentifier]
  -[RMSConnectToServiceResponseMessage setHasResponseCode:]
  -[RMSConnectToServiceResponseMessage hasResponseCode]
  -[RMSConnectToServiceResponseMessage hasResponseData]
  -[RMSConnectToServiceResponseMessage setHasSessionIdentifier:]
  -[RMSConnectToServiceResponseMessage controlInterface]
  -[RMSConnectToServiceResponseMessage setControlInterface:]
  -[RMSConnectToServiceResponseMessage hasControlInterface]
  -[RMSConnectToServiceResponseMessage setHasResponseData:]


RMSPlaybackCommandMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasPlaybackCommand
 @property  int playbackCommand
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSPlaybackCommandMessage isEqual:]
  -[RMSPlaybackCommandMessage copyWithZone:]
  -[RMSPlaybackCommandMessage dictionaryRepresentation]
  -[RMSPlaybackCommandMessage writeTo:]
  -[RMSPlaybackCommandMessage mergeFrom:]
  -[RMSPlaybackCommandMessage readFrom:]
  -[RMSPlaybackCommandMessage copyTo:]
  -[RMSPlaybackCommandMessage sessionIdentifier]
  -[RMSPlaybackCommandMessage setSessionIdentifier:]
  -[RMSPlaybackCommandMessage hasSessionIdentifier]
  -[RMSPlaybackCommandMessage playbackCommand]
  -[RMSPlaybackCommandMessage setPlaybackCommand:]
  -[RMSPlaybackCommandMessage setHasSessionIdentifier:]
  -[RMSPlaybackCommandMessage setHasPlaybackCommand:]
  -[RMSPlaybackCommandMessage hasPlaybackCommand]


RMSPairingServiceProvider : RMSBonjourServiceProvider
 @property  NSArray *pairedNetworkNames

  // instance methods
  -[RMSPairingServiceProvider init]
  -[RMSPairingServiceProvider dealloc]
  -[RMSPairingServiceProvider .cxx_destruct]
  -[RMSPairingServiceProvider netServiceBrowser:didFindService:moreComing:]
  -[RMSPairingServiceProvider searchType]
  -[RMSPairingServiceProvider pairedNetworkNames]
  -[RMSPairingServiceProvider setPairedNetworkNames:]
  -[RMSPairingServiceProvider serviceDiscoverySource]
  -[RMSPairingServiceProvider serviceFlagsFromTXTDictionary:]


RMSLocalPairingSession : NSObject /usr/lib/libSystem.B.dylib <NSNetServiceDelegate, RMSPairingServerDelegate, RMSPairingSession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSPairingSessionDelegate> *delegate
 @property  NSString *passcode
 @property  NSString *advertisedAppName
 @property  NSString *advertisedDeviceName
 @property  NSString *advertisedDeviceModel

  // instance methods
  -[RMSLocalPairingSession init]
  -[RMSLocalPairingSession dealloc]
  -[RMSLocalPairingSession delegate]
  -[RMSLocalPairingSession setDelegate:]
  -[RMSLocalPairingSession .cxx_destruct]
  -[RMSLocalPairingSession netService:didNotPublish:]
  -[RMSLocalPairingSession netServiceDidStop:]
  -[RMSLocalPairingSession netServiceDidPublish:]
  -[RMSLocalPairingSession endPairing]
  -[RMSLocalPairingSession passcode]
  -[RMSLocalPairingSession setPasscode:]
  -[RMSLocalPairingSession beginPairing]
  -[RMSLocalPairingSession unpairService:completionHandler:]
  -[RMSLocalPairingSession advertisedAppName]
  -[RMSLocalPairingSession setAdvertisedAppName:]
  -[RMSLocalPairingSession advertisedDeviceName]
  -[RMSLocalPairingSession setAdvertisedDeviceName:]
  -[RMSLocalPairingSession advertisedDeviceModel]
  -[RMSLocalPairingSession setAdvertisedDeviceModel:]
  -[RMSLocalPairingSession _generatePublicKey]
  -[RMSLocalPairingSession _expectedPasscodeHashForPasscode:publicKey:]
  -[RMSLocalPairingSession _startBonjourAdvertisingWithPublicKey:httpServerPort:]
  -[RMSLocalPairingSession _pairingNetServiceName]
  -[RMSLocalPairingSession pairingServer:didPairWithService:pairingGUID:]
  -[RMSLocalPairingSession pairingServerDidFail:]


RMSSetVolumeMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasVolume
 @property  float volume
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSSetVolumeMessage isEqual:]
  -[RMSSetVolumeMessage copyWithZone:]
  -[RMSSetVolumeMessage dictionaryRepresentation]
  -[RMSSetVolumeMessage writeTo:]
  -[RMSSetVolumeMessage mergeFrom:]
  -[RMSSetVolumeMessage readFrom:]
  -[RMSSetVolumeMessage copyTo:]
  -[RMSSetVolumeMessage sessionIdentifier]
  -[RMSSetVolumeMessage volume]
  -[RMSSetVolumeMessage setVolume:]
  -[RMSSetVolumeMessage setSessionIdentifier:]
  -[RMSSetVolumeMessage hasSessionIdentifier]
  -[RMSSetVolumeMessage setHasVolume:]
  -[RMSSetVolumeMessage hasVolume]
  -[RMSSetVolumeMessage setHasSessionIdentifier:]


RMSAddToWishlistMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasItemID
 @property  unsigned long itemID
 @property  BOOL hasDatabaseID
 @property  unsigned long databaseID
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSAddToWishlistMessage isEqual:]
  -[RMSAddToWishlistMessage copyWithZone:]
  -[RMSAddToWishlistMessage dictionaryRepresentation]
  -[RMSAddToWishlistMessage itemID]
  -[RMSAddToWishlistMessage writeTo:]
  -[RMSAddToWishlistMessage mergeFrom:]
  -[RMSAddToWishlistMessage readFrom:]
  -[RMSAddToWishlistMessage copyTo:]
  -[RMSAddToWishlistMessage setItemID:]
  -[RMSAddToWishlistMessage hasItemID]
  -[RMSAddToWishlistMessage sessionIdentifier]
  -[RMSAddToWishlistMessage setSessionIdentifier:]
  -[RMSAddToWishlistMessage databaseID]
  -[RMSAddToWishlistMessage setDatabaseID:]
  -[RMSAddToWishlistMessage hasSessionIdentifier]
  -[RMSAddToWishlistMessage setHasSessionIdentifier:]
  -[RMSAddToWishlistMessage setHasItemID:]
  -[RMSAddToWishlistMessage setHasDatabaseID:]
  -[RMSAddToWishlistMessage hasDatabaseID]


RMSAppleTVServiceProvider : RMSHomeSharingServiceProvider
  // instance methods
  -[RMSAppleTVServiceProvider searchType]
  -[RMSAppleTVServiceProvider serviceTypeFromTXTDictionary:]
  -[RMSAppleTVServiceProvider serviceFlagsFromTXTDictionary:]


RMSDAAPLoginManager : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[RMSDAAPLoginManager .cxx_destruct]
  -[RMSDAAPLoginManager _requestControlInterfaceWithCompletionHandler:]
  -[RMSDAAPLoginManager _requestFairPlayHandshake:]
  -[RMSDAAPLoginManager _requestLoginWithCompletionHandler:]
  -[RMSDAAPLoginManager _requestServerInfoWithCompletionHandler:]
  -[RMSDAAPLoginManager _isFairplayRequiredForServerInfo:]
  -[RMSDAAPLoginManager _continueFairPlayHandshakeWithData:completionHandler:]
  -[RMSDAAPLoginManager initWithRequestManager:]
  -[RMSDAAPLoginManager loginWithCompletionHandler:]


RMSDAAPEncoder : NSObject /usr/lib/libSystem.B.dylib
 @property  NSData *data

  // instance methods
  -[RMSDAAPEncoder init]
  -[RMSDAAPEncoder .cxx_destruct]
  -[RMSDAAPEncoder data]
  -[RMSDAAPEncoder encodeBytes:length:forCode:]
  -[RMSDAAPEncoder encodeInt32:forCode:]
  -[RMSDAAPEncoder encodeInt64:forCode:]
  -[RMSDAAPEncoder encodeString:forCode:]
  -[RMSDAAPEncoder encodeData:forCode:]


RMSServiceMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasDisplayName
 @property  NSString *displayName
 @property  BOOL hasNetworkName
 @property  NSString *networkName
 @property  BOOL hasHostName
 @property  NSString *hostName
 @property  BOOL hasPort
 @property  int port
 @property  BOOL hasServiceType
 @property  int serviceType
 @property  BOOL hasServiceDiscoverySource
 @property  int serviceDiscoverySource
 @property  BOOL hasServiceFlags
 @property  int serviceFlags
 @property  BOOL hasHomeSharingGroupKey
 @property  NSString *homeSharingGroupKey
 @property  BOOL hasUniqueIdentifier
 @property  NSString *uniqueIdentifier

  // instance methods
  -[RMSServiceMessage isEqual:]
  -[RMSServiceMessage copyWithZone:]
  -[RMSServiceMessage port]
  -[RMSServiceMessage .cxx_destruct]
  -[RMSServiceMessage setPort:]
  -[RMSServiceMessage dictionaryRepresentation]
  -[RMSServiceMessage hostName]
  -[RMSServiceMessage uniqueIdentifier]
  -[RMSServiceMessage displayName]
  -[RMSServiceMessage writeTo:]
  -[RMSServiceMessage serviceType]
  -[RMSServiceMessage mergeFrom:]
  -[RMSServiceMessage readFrom:]
  -[RMSServiceMessage copyTo:]
  -[RMSServiceMessage setDisplayName:]
  -[RMSServiceMessage setUniqueIdentifier:]
  -[RMSServiceMessage hasPort]
  -[RMSServiceMessage hasDisplayName]
  -[RMSServiceMessage hasUniqueIdentifier]
  -[RMSServiceMessage setServiceType:]
  -[RMSServiceMessage setHasServiceType:]
  -[RMSServiceMessage hasServiceType]
  -[RMSServiceMessage setNetworkName:]
  -[RMSServiceMessage networkName]
  -[RMSServiceMessage setHostName:]
  -[RMSServiceMessage hasNetworkName]
  -[RMSServiceMessage setHasPort:]
  -[RMSServiceMessage serviceDiscoverySource]
  -[RMSServiceMessage serviceFlags]
  -[RMSServiceMessage homeSharingGroupKey]
  -[RMSServiceMessage setServiceDiscoverySource:]
  -[RMSServiceMessage setServiceFlags:]
  -[RMSServiceMessage setHomeSharingGroupKey:]
  -[RMSServiceMessage hasHostName]
  -[RMSServiceMessage setHasServiceDiscoverySource:]
  -[RMSServiceMessage hasServiceDiscoverySource]
  -[RMSServiceMessage setHasServiceFlags:]
  -[RMSServiceMessage hasServiceFlags]
  -[RMSServiceMessage hasHomeSharingGroupKey]


RMSPairingChallengeRequestMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasPairingCredentials
 @property  RMSPairingCredentialsMessage *pairingCredentials

  // instance methods
  -[RMSPairingChallengeRequestMessage isEqual:]
  -[RMSPairingChallengeRequestMessage copyWithZone:]
  -[RMSPairingChallengeRequestMessage .cxx_destruct]
  -[RMSPairingChallengeRequestMessage dictionaryRepresentation]
  -[RMSPairingChallengeRequestMessage writeTo:]
  -[RMSPairingChallengeRequestMessage mergeFrom:]
  -[RMSPairingChallengeRequestMessage readFrom:]
  -[RMSPairingChallengeRequestMessage copyTo:]
  -[RMSPairingChallengeRequestMessage sessionIdentifier]
  -[RMSPairingChallengeRequestMessage setSessionIdentifier:]
  -[RMSPairingChallengeRequestMessage hasSessionIdentifier]
  -[RMSPairingChallengeRequestMessage setHasSessionIdentifier:]
  -[RMSPairingChallengeRequestMessage pairingCredentials]
  -[RMSPairingChallengeRequestMessage setPairingCredentials:]
  -[RMSPairingChallengeRequestMessage hasPairingCredentials]


RMSPairingServer : NSObject /usr/lib/libSystem.B.dylib
 @property  <RMSPairingServerDelegate> *delegate
 @property  unsigned short port

  // instance methods
  -[RMSPairingServer delegate]
  -[RMSPairingServer setDelegate:]
  -[RMSPairingServer port]
  -[RMSPairingServer .cxx_destruct]
  -[RMSPairingServer stopServer]
  -[RMSPairingServer startServerWithExpectedPasscodeHash:advertisedDeviceName:advertisedDeviceModel:]
  -[RMSPairingServer _parsedQueryParametersWithQueryString:]
  -[RMSPairingServer handleHTTPServerInvalidated]
  -[RMSPairingServer handleHTTPServerDidReceiveError:]
  -[RMSPairingServer handleHTTPServerDidOpenConnection:]
  -[RMSPairingServer handleHTTPServerDidCloseConnection:]
  -[RMSPairingServer handleHTTPServerConnectionInvalidated]
  -[RMSPairingServer handleHTTPServerConnectionDidReceiveError:]
  -[RMSPairingServer handleHTTPServerConnectionDidReceiveRequest:]
  -[RMSPairingServer handleHTTPServerConnectionDidReplyToRequest:withResponse:]
  -[RMSPairingServer handleHTTPServerConnectionDidFailToReplyToRequest:withResponse:]


RMSRunAssertion : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[RMSRunAssertion .cxx_destruct]
  -[RMSRunAssertion initWithDescription:]


RMSUnpairServiceMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasService
 @property  RMSServiceMessage *service

  // instance methods
  -[RMSUnpairServiceMessage isEqual:]
  -[RMSUnpairServiceMessage copyWithZone:]
  -[RMSUnpairServiceMessage .cxx_destruct]
  -[RMSUnpairServiceMessage dictionaryRepresentation]
  -[RMSUnpairServiceMessage writeTo:]
  -[RMSUnpairServiceMessage mergeFrom:]
  -[RMSUnpairServiceMessage readFrom:]
  -[RMSUnpairServiceMessage copyTo:]
  -[RMSUnpairServiceMessage service]
  -[RMSUnpairServiceMessage setService:]
  -[RMSUnpairServiceMessage hasService]


RMSWifiAvailabilityDidChangeMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasWifiAvailable
 @property  BOOL wifiAvailable

  // instance methods
  -[RMSWifiAvailabilityDidChangeMessage isEqual:]
  -[RMSWifiAvailabilityDidChangeMessage copyWithZone:]
  -[RMSWifiAvailabilityDidChangeMessage dictionaryRepresentation]
  -[RMSWifiAvailabilityDidChangeMessage writeTo:]
  -[RMSWifiAvailabilityDidChangeMessage mergeFrom:]
  -[RMSWifiAvailabilityDidChangeMessage readFrom:]
  -[RMSWifiAvailabilityDidChangeMessage copyTo:]
  -[RMSWifiAvailabilityDidChangeMessage sessionIdentifier]
  -[RMSWifiAvailabilityDidChangeMessage setSessionIdentifier:]
  -[RMSWifiAvailabilityDidChangeMessage hasSessionIdentifier]
  -[RMSWifiAvailabilityDidChangeMessage setHasSessionIdentifier:]
  -[RMSWifiAvailabilityDidChangeMessage wifiAvailable]
  -[RMSWifiAvailabilityDidChangeMessage setWifiAvailable:]
  -[RMSWifiAvailabilityDidChangeMessage setHasWifiAvailable:]
  -[RMSWifiAvailabilityDidChangeMessage hasWifiAvailable]


_RMSNowPlayingArtworkCacheItem : NSObject /usr/lib/libSystem.B.dylib <NSDiscardableContent>
 @property  NSString *artworkIdentifier
 @property  NSData *artworkData

  // instance methods
  -[_RMSNowPlayingArtworkCacheItem .cxx_destruct]
  -[_RMSNowPlayingArtworkCacheItem beginContentAccess]
  -[_RMSNowPlayingArtworkCacheItem endContentAccess]
  -[_RMSNowPlayingArtworkCacheItem discardContentIfPossible]
  -[_RMSNowPlayingArtworkCacheItem isContentDiscarded]
  -[_RMSNowPlayingArtworkCacheItem setArtworkIdentifier:]
  -[_RMSNowPlayingArtworkCacheItem artworkIdentifier]
  -[_RMSNowPlayingArtworkCacheItem artworkData]
  -[_RMSNowPlayingArtworkCacheItem setArtworkData:]


RMSNowPlayingArtworkCache : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[RMSNowPlayingArtworkCache sharedArtworkCache]

  // instance methods
  -[RMSNowPlayingArtworkCache init]
  -[RMSNowPlayingArtworkCache .cxx_destruct]
  -[RMSNowPlayingArtworkCache artworkDataForIdentifier:]
  -[RMSNowPlayingArtworkCache setArtworkData:forIdentifier:]
  -[RMSNowPlayingArtworkCache artworkDataForNowPlayingInfo:]
  -[RMSNowPlayingArtworkCache setArtworkData:forNowPlayingInfo:]


RMSControlSession : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[RMSControlSession daapControlSession]
  +[RMSControlSession localControlSession]
  +[RMSControlSession proxyControlSession]


RMSBeginPairingMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasAppName
 @property  NSString *appName
 @property  BOOL hasDeviceName
 @property  NSString *deviceName
 @property  BOOL hasDeviceModel
 @property  NSString *deviceModel
 @property  BOOL hasPasscode
 @property  NSString *passcode

  // instance methods
  -[RMSBeginPairingMessage isEqual:]
  -[RMSBeginPairingMessage copyWithZone:]
  -[RMSBeginPairingMessage .cxx_destruct]
  -[RMSBeginPairingMessage dictionaryRepresentation]
  -[RMSBeginPairingMessage writeTo:]
  -[RMSBeginPairingMessage mergeFrom:]
  -[RMSBeginPairingMessage readFrom:]
  -[RMSBeginPairingMessage copyTo:]
  -[RMSBeginPairingMessage setDeviceName:]
  -[RMSBeginPairingMessage deviceName]
  -[RMSBeginPairingMessage appName]
  -[RMSBeginPairingMessage setAppName:]
  -[RMSBeginPairingMessage deviceModel]
  -[RMSBeginPairingMessage setDeviceModel:]
  -[RMSBeginPairingMessage hasAppName]
  -[RMSBeginPairingMessage hasPasscode]
  -[RMSBeginPairingMessage passcode]
  -[RMSBeginPairingMessage setPasscode:]
  -[RMSBeginPairingMessage hasDeviceName]
  -[RMSBeginPairingMessage hasDeviceModel]


RMSDAAPNowPlayingManager : NSObject /usr/lib/libSystem.B.dylib
 @property  <RMSDAAPNowPlayingManagerDelegate> *delegate
 @property  RMSControlInterface *controlInterface
 @property  BOOL observing

  // instance methods
  -[RMSDAAPNowPlayingManager delegate]
  -[RMSDAAPNowPlayingManager setDelegate:]
  -[RMSDAAPNowPlayingManager .cxx_destruct]
  -[RMSDAAPNowPlayingManager isObserving]
  -[RMSDAAPNowPlayingManager controlInterface]
  -[RMSDAAPNowPlayingManager setControlInterface:]
  -[RMSDAAPNowPlayingManager initWithRequestManager:]
  -[RMSDAAPNowPlayingManager _requestArtworkDataIfNecessaryForNowPlayingInfo:]
  -[RMSDAAPNowPlayingManager _requestAudioRoutes]
  -[RMSDAAPNowPlayingManager _requestVolume]
  -[RMSDAAPNowPlayingManager _refreshNowPlayingInfoRequest]
  -[RMSDAAPNowPlayingManager _requestNowPlayingInfoWithCompletionHandler:]
  -[RMSDAAPNowPlayingManager _cancelArtworkRetryTimer]
  -[RMSDAAPNowPlayingManager beginObservingNowPlaying]
  -[RMSDAAPNowPlayingManager _scheduleArtworkRetryForNowPlayingInfo:delay:]
  -[RMSDAAPNowPlayingManager _audioRoutes:equalAudioRoutes:]
  -[RMSDAAPNowPlayingManager endObservingNowPlaying]


Reachability : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[Reachability reachabilityWithAddress:]
  +[Reachability reachabilityWithHostName:]
  +[Reachability reachabilityForInternetConnection]
  +[Reachability reachabilityForLocalWiFi]

  // instance methods
  -[Reachability dealloc]
  -[Reachability localWiFiStatusForFlags:]
  -[Reachability networkStatusForFlags:]
  -[Reachability connectionRequired]
  -[Reachability currentReachabilityStatus]
  -[Reachability stopNotifier]
  -[Reachability startNotifier]


RMSControlInterface : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL supportsSpeakerSelection
 @property  BOOL supportsVolumeControl
 @property  BOOL supportsDirectionalControl

  // instance methods
  -[RMSControlInterface protobuf]
  -[RMSControlInterface initWithProtobuf:]
  -[RMSControlInterface supportsVolumeControl]
  -[RMSControlInterface setSupportsSpeakerSelection:]
  -[RMSControlInterface setSupportsVolumeControl:]
  -[RMSControlInterface setSupportsDirectionalControl:]
  -[RMSControlInterface supportsSpeakerSelection]
  -[RMSControlInterface supportsDirectionalControl]


RMSMediaRemoteServiceProvider : NSObject /usr/lib/libSystem.B.dylib <RMSServiceProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSServiceProviderDelegate> *delegate

  // instance methods
  -[RMSMediaRemoteServiceProvider init]
  -[RMSMediaRemoteServiceProvider dealloc]
  -[RMSMediaRemoteServiceProvider delegate]
  -[RMSMediaRemoteServiceProvider setDelegate:]
  -[RMSMediaRemoteServiceProvider .cxx_destruct]
  -[RMSMediaRemoteServiceProvider endDiscovery]
  -[RMSMediaRemoteServiceProvider beginDiscovery]
  -[RMSMediaRemoteServiceProvider _didDiscoverTelevision:]
  -[RMSMediaRemoteServiceProvider _didRemoveTelevision:]
  -[RMSMediaRemoteServiceProvider _serviceWithTelevision:]


RMSDAAPParser : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[RMSDAAPParser sharedInstance]
  +[RMSDAAPParser objectWithData:error:]
  +[RMSDAAPParser objectWithData:]
  +[RMSDAAPParser typeForDRCPValueType:]

  // instance methods
  -[RMSDAAPParser processResponseCode:bytes:length:]
  -[RMSDAAPParser parseUTF8String:length:]
  -[RMSDAAPParser unknownChunk:]
  -[RMSDAAPParser enumerateDAAPChunksInBytes:length:usingBlock:]
  -[RMSDAAPParser setUInt32:size:inDict:forKey:]
  -[RMSDAAPParser setString:size:inDict:forKey:]
  -[RMSDAAPParser setUInt8:size:inDict:forKey:]
  -[RMSDAAPParser setUInt64:size:inDict:forKey:]
  -[RMSDAAPParser setBool:size:inDict:forKey:]
  -[RMSDAAPParser setUInt16:size:inDict:forKey:]
  -[RMSDAAPParser parseMACAddressListing:length:]
  -[RMSDAAPParser parseContentCollectionDict:length:]
  -[RMSDAAPParser parseListingItem:length:]
  -[RMSDAAPParser setDate:size:inDict:forKey:]
  -[RMSDAAPParser parseXMLContent:length:]
  -[RMSDAAPParser parseUnicodeCharacter:length:]
  -[RMSDAAPParser setSInt16:size:inDict:forKey:]
  -[RMSDAAPParser setSInt8:size:inDict:forKey:]
  -[RMSDAAPParser setFloat32:size:inDict:forKey:]
  -[RMSDAAPParser parseListingCollection:length:capacity:sectionHeaders:]
  -[RMSDAAPParser parseQueueSectionItems:length:]
  -[RMSDAAPParser parseDACPPropertyResponse:length:]
  -[RMSDAAPParser parseBrowseResults:length:]
  -[RMSDAAPParser parseControlPromptCollection:length:]
  -[RMSDAAPParser parseServerInfo:length:]
  -[RMSDAAPParser parseContentCodes:length:]
  -[RMSDAAPParser parseLogin:length:]
  -[RMSDAAPParser parseListingHeader:length:]
  -[RMSDAAPParser parseControlPromptResponse:length:]
  -[RMSDAAPParser parseGetSpeakersResponse:length:]


_RMSBonjourService : NSObject /usr/lib/libSystem.B.dylib
 @property  RMSService *service
 @property  NSNetService *netService
 @property  long long state
 @property  BOOL available

  // instance methods
  -[_RMSBonjourService .cxx_destruct]
  -[_RMSBonjourService state]
  -[_RMSBonjourService setState:]
  -[_RMSBonjourService isAvailable]
  -[_RMSBonjourService setAvailable:]
  -[_RMSBonjourService service]
  -[_RMSBonjourService setService:]
  -[_RMSBonjourService netService]
  -[_RMSBonjourService setNetService:]


RMSBonjourServiceProvider : NSObject /usr/lib/libSystem.B.dylib <RMSServiceProvider, NSNetServiceBrowserDelegate, NSNetServiceDelegate>
 @property  NSNetServiceBrowser *netServiceBrowser
 @property  NSString *searchType
 @property  NSString *searchDomain
 @property  NSString *searchScope
 @property  long long serviceDiscoverySource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSServiceProviderDelegate> *delegate

  // instance methods
  -[RMSBonjourServiceProvider init]
  -[RMSBonjourServiceProvider dealloc]
  -[RMSBonjourServiceProvider delegate]
  -[RMSBonjourServiceProvider setDelegate:]
  -[RMSBonjourServiceProvider .cxx_destruct]
  -[RMSBonjourServiceProvider _searchString]
  -[RMSBonjourServiceProvider netService:didNotResolve:]
  -[RMSBonjourServiceProvider netServiceDidResolveAddress:]
  -[RMSBonjourServiceProvider netService:didUpdateTXTRecordData:]
  -[RMSBonjourServiceProvider netServiceBrowser:didRemoveService:moreComing:]
  -[RMSBonjourServiceProvider netServiceBrowser:didFindService:moreComing:]
  -[RMSBonjourServiceProvider searchType]
  -[RMSBonjourServiceProvider endDiscovery]
  -[RMSBonjourServiceProvider beginDiscovery]
  -[RMSBonjourServiceProvider searchScope]
  -[RMSBonjourServiceProvider serviceDiscoverySource]
  -[RMSBonjourServiceProvider serviceTypeFromTXTDictionary:]
  -[RMSBonjourServiceProvider netServiceBrowser]
  -[RMSBonjourServiceProvider serviceFlagsFromTXTDictionary:]
  -[RMSBonjourServiceProvider _valueForTXTRecordKey:inTXTDictionary:]
  -[RMSBonjourServiceProvider searchDomain]
  -[RMSBonjourServiceProvider _identifierForNetService:]
  -[RMSBonjourServiceProvider _updateService:withNetService:txtData:]
  -[RMSBonjourServiceProvider _updateCacheWithService:identifier:]


RMSBeginPairingResponseMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasResponseCode
 @property  int responseCode

  // instance methods
  -[RMSBeginPairingResponseMessage isEqual:]
  -[RMSBeginPairingResponseMessage copyWithZone:]
  -[RMSBeginPairingResponseMessage dictionaryRepresentation]
  -[RMSBeginPairingResponseMessage writeTo:]
  -[RMSBeginPairingResponseMessage mergeFrom:]
  -[RMSBeginPairingResponseMessage readFrom:]
  -[RMSBeginPairingResponseMessage copyTo:]
  -[RMSBeginPairingResponseMessage sessionIdentifier]
  -[RMSBeginPairingResponseMessage setSessionIdentifier:]
  -[RMSBeginPairingResponseMessage responseCode]
  -[RMSBeginPairingResponseMessage setResponseCode:]
  -[RMSBeginPairingResponseMessage hasSessionIdentifier]
  -[RMSBeginPairingResponseMessage setHasResponseCode:]
  -[RMSBeginPairingResponseMessage hasResponseCode]
  -[RMSBeginPairingResponseMessage setHasSessionIdentifier:]


RMSDAAPRequestManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *hostName
 @property  NSString *pairingGUID
 @property  NSString *homeSharingGroupKey
 @property  long long sessionIdentifier
 @property  long long port
 @property  <RMSDAAPRequestManagerDelegate> *delegate
 @property  RMSFairPlaySession *fairPlaySession

  // instance methods
  -[RMSDAAPRequestManager init]
  -[RMSDAAPRequestManager delegate]
  -[RMSDAAPRequestManager setDelegate:]
  -[RMSDAAPRequestManager port]
  -[RMSDAAPRequestManager .cxx_destruct]
  -[RMSDAAPRequestManager setPort:]
  -[RMSDAAPRequestManager hostName]
  -[RMSDAAPRequestManager sessionIdentifier]
  -[RMSDAAPRequestManager setSessionIdentifier:]
  -[RMSDAAPRequestManager setHostName:]
  -[RMSDAAPRequestManager setPairingGUID:]
  -[RMSDAAPRequestManager pairingGUID]
  -[RMSDAAPRequestManager homeSharingGroupKey]
  -[RMSDAAPRequestManager setHomeSharingGroupKey:]
  -[RMSDAAPRequestManager setFairPlaySession:]
  -[RMSDAAPRequestManager requestWithPath:method:postData:queryArgs:completionHandler:]
  -[RMSDAAPRequestManager requestControlCommand:text:promptRevision:completionHandler:]
  -[RMSDAAPRequestManager fairPlaySession]


RMSPairingChallengeResponseMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasCode
 @property  NSString *code
 @property  BOOL hasUserCancelled
 @property  BOOL userCancelled

  // instance methods
  -[RMSPairingChallengeResponseMessage isEqual:]
  -[RMSPairingChallengeResponseMessage copyWithZone:]
  -[RMSPairingChallengeResponseMessage code]
  -[RMSPairingChallengeResponseMessage .cxx_destruct]
  -[RMSPairingChallengeResponseMessage dictionaryRepresentation]
  -[RMSPairingChallengeResponseMessage writeTo:]
  -[RMSPairingChallengeResponseMessage mergeFrom:]
  -[RMSPairingChallengeResponseMessage readFrom:]
  -[RMSPairingChallengeResponseMessage copyTo:]
  -[RMSPairingChallengeResponseMessage sessionIdentifier]
  -[RMSPairingChallengeResponseMessage setSessionIdentifier:]
  -[RMSPairingChallengeResponseMessage setCode:]
  -[RMSPairingChallengeResponseMessage hasSessionIdentifier]
  -[RMSPairingChallengeResponseMessage hasCode]
  -[RMSPairingChallengeResponseMessage userCancelled]
  -[RMSPairingChallengeResponseMessage setUserCancelled:]
  -[RMSPairingChallengeResponseMessage setHasSessionIdentifier:]
  -[RMSPairingChallengeResponseMessage setHasUserCancelled:]
  -[RMSPairingChallengeResponseMessage hasUserCancelled]


RMSUpdatePairedNetworNamesMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  NSMutableArray *pairedNetworkNames

  // class methods
  +[RMSUpdatePairedNetworNamesMessage pairedNetworkNamesType]

  // instance methods
  -[RMSUpdatePairedNetworNamesMessage isEqual:]
  -[RMSUpdatePairedNetworNamesMessage copyWithZone:]
  -[RMSUpdatePairedNetworNamesMessage .cxx_destruct]
  -[RMSUpdatePairedNetworNamesMessage dictionaryRepresentation]
  -[RMSUpdatePairedNetworNamesMessage writeTo:]
  -[RMSUpdatePairedNetworNamesMessage mergeFrom:]
  -[RMSUpdatePairedNetworNamesMessage readFrom:]
  -[RMSUpdatePairedNetworNamesMessage copyTo:]
  -[RMSUpdatePairedNetworNamesMessage sessionIdentifier]
  -[RMSUpdatePairedNetworNamesMessage setSessionIdentifier:]
  -[RMSUpdatePairedNetworNamesMessage hasSessionIdentifier]
  -[RMSUpdatePairedNetworNamesMessage pairedNetworkNames]
  -[RMSUpdatePairedNetworNamesMessage setPairedNetworkNames:]
  -[RMSUpdatePairedNetworNamesMessage setHasSessionIdentifier:]
  -[RMSUpdatePairedNetworNamesMessage addPairedNetworkNames:]
  -[RMSUpdatePairedNetworNamesMessage pairedNetworkNamesCount]
  -[RMSUpdatePairedNetworNamesMessage clearPairedNetworkNames]
  -[RMSUpdatePairedNetworNamesMessage pairedNetworkNamesAtIndex:]


RMSNowPlayingArtworkAvailableMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasArtworkIdentifier
 @property  NSString *artworkIdentifier

  // instance methods
  -[RMSNowPlayingArtworkAvailableMessage isEqual:]
  -[RMSNowPlayingArtworkAvailableMessage copyWithZone:]
  -[RMSNowPlayingArtworkAvailableMessage .cxx_destruct]
  -[RMSNowPlayingArtworkAvailableMessage dictionaryRepresentation]
  -[RMSNowPlayingArtworkAvailableMessage writeTo:]
  -[RMSNowPlayingArtworkAvailableMessage mergeFrom:]
  -[RMSNowPlayingArtworkAvailableMessage readFrom:]
  -[RMSNowPlayingArtworkAvailableMessage copyTo:]
  -[RMSNowPlayingArtworkAvailableMessage sessionIdentifier]
  -[RMSNowPlayingArtworkAvailableMessage setSessionIdentifier:]
  -[RMSNowPlayingArtworkAvailableMessage setArtworkIdentifier:]
  -[RMSNowPlayingArtworkAvailableMessage artworkIdentifier]
  -[RMSNowPlayingArtworkAvailableMessage hasArtworkIdentifier]
  -[RMSNowPlayingArtworkAvailableMessage hasSessionIdentifier]
  -[RMSNowPlayingArtworkAvailableMessage setHasSessionIdentifier:]


RMSSessionMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSSessionMessage isEqual:]
  -[RMSSessionMessage copyWithZone:]
  -[RMSSessionMessage dictionaryRepresentation]
  -[RMSSessionMessage writeTo:]
  -[RMSSessionMessage mergeFrom:]
  -[RMSSessionMessage readFrom:]
  -[RMSSessionMessage copyTo:]
  -[RMSSessionMessage sessionIdentifier]
  -[RMSSessionMessage setSessionIdentifier:]
  -[RMSSessionMessage hasSessionIdentifier]
  -[RMSSessionMessage setHasSessionIdentifier:]


RMSMediaRemoteDevice : NSObject /usr/lib/libSystem.B.dylib
 @property  ^v device

  // instance methods
  -[RMSMediaRemoteDevice dealloc]
  -[RMSMediaRemoteDevice device]
  -[RMSMediaRemoteDevice initWithTelevision:]


RMSMediaRemoteDeviceController : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[RMSMediaRemoteDeviceController sharedController]

  // instance methods
  -[RMSMediaRemoteDeviceController init]
  -[RMSMediaRemoteDeviceController .cxx_destruct]
  -[RMSMediaRemoteDeviceController addDevice:]
  -[RMSMediaRemoteDeviceController removeDevice:]
  -[RMSMediaRemoteDeviceController discoverDeviceWithUniqueIdentifier:timeout:completionHandler:]
  -[RMSMediaRemoteDeviceController _keyWithDevice:]
  -[RMSMediaRemoteDeviceController deviceForUniqueIdentifier:]


RMSIDSServer : NSObject /usr/lib/libSystem.B.dylib <IDSServiceDelegate, RMSSessionManagerDelegate, RMSDiscoverySessionDelegate, RMSPairingSessionDelegate, RMSControlSessionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[RMSIDSServer server]

  // instance methods
  -[RMSIDSServer init]
  -[RMSIDSServer .cxx_destruct]
  -[RMSIDSServer service:account:incomingUnhandledProtobuf:fromID:context:]
  -[RMSIDSServer discoverySessionDidUpdateAvailableServices:]
  -[RMSIDSServer discoverySessionNetworkAvailabilityDidChange:]
  -[RMSIDSServer pairingSessionDidFail:]
  -[RMSIDSServer pairingSession:didPairWithServiceNetworkName:pairingGUID:]
  -[RMSIDSServer _handleSessionHeartbeat:]
  -[RMSIDSServer _handleBeginDiscovery:]
  -[RMSIDSServer _handleEndDiscovery:]
  -[RMSIDSServer _handleUnpairService:]
  -[RMSIDSServer _handleConnectToService:]
  -[RMSIDSServer _handleLogout:]
  -[RMSIDSServer _handlePlaybackCommand:]
  -[RMSIDSServer _handlePickAudioRoute:]
  -[RMSIDSServer _handleSetVolume:]
  -[RMSIDSServer _handleTouchMove:]
  -[RMSIDSServer _handleTouchEnd:]
  -[RMSIDSServer _handleNavigationCommand:]
  -[RMSIDSServer _handleBeginObservingNowPlaying:]
  -[RMSIDSServer _handleEndObservingNowPlaying:]
  -[RMSIDSServer _handleNowPlayingArtworkRequest:]
  -[RMSIDSServer _handleBeginPairing:]
  -[RMSIDSServer _handleEndPairing:]
  -[RMSIDSServer _handleSetLikeState:]
  -[RMSIDSServer _handleAddToWishlist:]
  -[RMSIDSServer _handleSeekToPlaybackTime:]
  -[RMSIDSServer _handleUpdatePairedNetworkNames:]
  -[RMSIDSServer _handleSendText:]
  -[RMSIDSServer _handlePairingChallengeResponse:]
  -[RMSIDSServer _cleanupStaleSessions:]
  -[RMSIDSServer _sendData:type:timeout:queueOneID:inResponseTo:]
  -[RMSIDSServer _sendData:type:priority:timeout:queueOneID:inResponseTo:]
  -[RMSIDSServer sessionManager:sessionDidTimeout:withIdentifier:]
  -[RMSIDSServer controlSession:didReceivePairingChallengeRequestWithCredentials:completionHandler:]
  -[RMSIDSServer controlSession:didUpdateNowPlayingInfo:]
  -[RMSIDSServer controlSession:artworkDataDidBecomeAvailable:identifier:]
  -[RMSIDSServer controlSession:didUpdateAudioRoutes:]
  -[RMSIDSServer controlSession:didUpdateVolume:]
  -[RMSIDSServer controlSessionDidBeginEditingText:]
  -[RMSIDSServer controlSessionDidEndEditingText:]
  -[RMSIDSServer controlSessionDidEnd:]


RMSResponseCodeMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasResponseCode
 @property  int responseCode

  // instance methods
  -[RMSResponseCodeMessage isEqual:]
  -[RMSResponseCodeMessage copyWithZone:]
  -[RMSResponseCodeMessage dictionaryRepresentation]
  -[RMSResponseCodeMessage writeTo:]
  -[RMSResponseCodeMessage mergeFrom:]
  -[RMSResponseCodeMessage readFrom:]
  -[RMSResponseCodeMessage copyTo:]
  -[RMSResponseCodeMessage responseCode]
  -[RMSResponseCodeMessage setResponseCode:]
  -[RMSResponseCodeMessage setHasResponseCode:]
  -[RMSResponseCodeMessage hasResponseCode]


RMSAudioRoute : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *displayName
 @property  unsigned long macAddress
 @property  BOOL supportsVideo
 @property  BOOL selected

  // class methods
  +[RMSAudioRoute audioRoutesFromProtobufs:]
  +[RMSAudioRoute protobufsFromAudioRoutes:]

  // instance methods
  -[RMSAudioRoute .cxx_destruct]
  -[RMSAudioRoute displayName]
  -[RMSAudioRoute setDisplayName:]
  -[RMSAudioRoute isSelected]
  -[RMSAudioRoute macAddress]
  -[RMSAudioRoute setSelected:]
  -[RMSAudioRoute protobuf]
  -[RMSAudioRoute initWithProtobuf:]
  -[RMSAudioRoute supportsVideo]
  -[RMSAudioRoute setSupportsVideo:]
  -[RMSAudioRoute setMacAddress:]
  -[RMSAudioRoute isEqualToAudioRoute:]


RMSAudioRoutesDidUpdateMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  NSMutableArray *audioRoutes

  // class methods
  +[RMSAudioRoutesDidUpdateMessage audioRoutesType]

  // instance methods
  -[RMSAudioRoutesDidUpdateMessage isEqual:]
  -[RMSAudioRoutesDidUpdateMessage copyWithZone:]
  -[RMSAudioRoutesDidUpdateMessage .cxx_destruct]
  -[RMSAudioRoutesDidUpdateMessage dictionaryRepresentation]
  -[RMSAudioRoutesDidUpdateMessage writeTo:]
  -[RMSAudioRoutesDidUpdateMessage mergeFrom:]
  -[RMSAudioRoutesDidUpdateMessage readFrom:]
  -[RMSAudioRoutesDidUpdateMessage copyTo:]
  -[RMSAudioRoutesDidUpdateMessage sessionIdentifier]
  -[RMSAudioRoutesDidUpdateMessage setSessionIdentifier:]
  -[RMSAudioRoutesDidUpdateMessage hasSessionIdentifier]
  -[RMSAudioRoutesDidUpdateMessage clearAudioRoutes]
  -[RMSAudioRoutesDidUpdateMessage setHasSessionIdentifier:]
  -[RMSAudioRoutesDidUpdateMessage audioRoutes]
  -[RMSAudioRoutesDidUpdateMessage setAudioRoutes:]
  -[RMSAudioRoutesDidUpdateMessage addAudioRoutes:]
  -[RMSAudioRoutesDidUpdateMessage audioRoutesCount]
  -[RMSAudioRoutesDidUpdateMessage audioRoutesAtIndex:]


RMSNowPlayingInfoMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasItemID
 @property  unsigned long itemID
 @property  BOOL hasDatabaseID
 @property  unsigned long databaseID
 @property  BOOL hasTrackName
 @property  NSString *trackName
 @property  BOOL hasArtistName
 @property  NSString *artistName
 @property  BOOL hasAlbumName
 @property  NSString *albumName
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasTimeRemaining
 @property  double timeRemaining
 @property  BOOL hasTotalDuration
 @property  double totalDuration
 @property  BOOL hasRevisionNumber
 @property  unsigned int revisionNumber
 @property  BOOL hasMediaKind
 @property  int mediaKind
 @property  BOOL hasPlaybackState
 @property  int playbackState
 @property  BOOL hasLikedState
 @property  int likedState
 @property  BOOL hasScrubbableState
 @property  int scrubbableState
 @property  BOOL hasCanSkipNext
 @property  BOOL canSkipNext
 @property  BOOL hasCanSkipPrevious
 @property  BOOL canSkipPrevious
 @property  BOOL hasLikeable
 @property  BOOL likeable
 @property  BOOL hasCanWishlist
 @property  BOOL canWishlist
 @property  BOOL hasHasChapterData
 @property  BOOL hasChapterData

  // instance methods
  -[RMSNowPlayingInfoMessage isEqual:]
  -[RMSNowPlayingInfoMessage copyWithZone:]
  -[RMSNowPlayingInfoMessage .cxx_destruct]
  -[RMSNowPlayingInfoMessage dictionaryRepresentation]
  -[RMSNowPlayingInfoMessage timestamp]
  -[RMSNowPlayingInfoMessage itemID]
  -[RMSNowPlayingInfoMessage hasTimestamp]
  -[RMSNowPlayingInfoMessage setTimestamp:]
  -[RMSNowPlayingInfoMessage writeTo:]
  -[RMSNowPlayingInfoMessage mergeFrom:]
  -[RMSNowPlayingInfoMessage readFrom:]
  -[RMSNowPlayingInfoMessage copyTo:]
  -[RMSNowPlayingInfoMessage setItemID:]
  -[RMSNowPlayingInfoMessage hasItemID]
  -[RMSNowPlayingInfoMessage setHasTimestamp:]
  -[RMSNowPlayingInfoMessage totalDuration]
  -[RMSNowPlayingInfoMessage mediaKind]
  -[RMSNowPlayingInfoMessage setMediaKind:]
  -[RMSNowPlayingInfoMessage albumName]
  -[RMSNowPlayingInfoMessage setAlbumName:]
  -[RMSNowPlayingInfoMessage hasAlbumName]
  -[RMSNowPlayingInfoMessage artistName]
  -[RMSNowPlayingInfoMessage setArtistName:]
  -[RMSNowPlayingInfoMessage hasArtistName]
  -[RMSNowPlayingInfoMessage playbackState]
  -[RMSNowPlayingInfoMessage likedState]
  -[RMSNowPlayingInfoMessage setLikedState:]
  -[RMSNowPlayingInfoMessage databaseID]
  -[RMSNowPlayingInfoMessage setPlaybackState:]
  -[RMSNowPlayingInfoMessage setDatabaseID:]
  -[RMSNowPlayingInfoMessage setTimeRemaining:]
  -[RMSNowPlayingInfoMessage timeRemaining]
  -[RMSNowPlayingInfoMessage setHasPlaybackState:]
  -[RMSNowPlayingInfoMessage hasPlaybackState]
  -[RMSNowPlayingInfoMessage setHasLikedState:]
  -[RMSNowPlayingInfoMessage hasLikedState]
  -[RMSNowPlayingInfoMessage setHasChapterData:]
  -[RMSNowPlayingInfoMessage setHasHasChapterData:]
  -[RMSNowPlayingInfoMessage hasHasChapterData]
  -[RMSNowPlayingInfoMessage hasChapterData]
  -[RMSNowPlayingInfoMessage setTotalDuration:]
  -[RMSNowPlayingInfoMessage trackName]
  -[RMSNowPlayingInfoMessage setHasItemID:]
  -[RMSNowPlayingInfoMessage setHasDatabaseID:]
  -[RMSNowPlayingInfoMessage hasDatabaseID]
  -[RMSNowPlayingInfoMessage setRevisionNumber:]
  -[RMSNowPlayingInfoMessage revisionNumber]
  -[RMSNowPlayingInfoMessage setTrackName:]
  -[RMSNowPlayingInfoMessage setLikeable:]
  -[RMSNowPlayingInfoMessage setCanWishlist:]
  -[RMSNowPlayingInfoMessage setCanSkipPrevious:]
  -[RMSNowPlayingInfoMessage setCanSkipNext:]
  -[RMSNowPlayingInfoMessage setScrubbableState:]
  -[RMSNowPlayingInfoMessage hasTrackName]
  -[RMSNowPlayingInfoMessage setHasTimeRemaining:]
  -[RMSNowPlayingInfoMessage hasTimeRemaining]
  -[RMSNowPlayingInfoMessage setHasTotalDuration:]
  -[RMSNowPlayingInfoMessage hasTotalDuration]
  -[RMSNowPlayingInfoMessage setHasRevisionNumber:]
  -[RMSNowPlayingInfoMessage hasRevisionNumber]
  -[RMSNowPlayingInfoMessage setHasMediaKind:]
  -[RMSNowPlayingInfoMessage hasMediaKind]
  -[RMSNowPlayingInfoMessage setHasScrubbableState:]
  -[RMSNowPlayingInfoMessage hasScrubbableState]
  -[RMSNowPlayingInfoMessage setHasCanSkipNext:]
  -[RMSNowPlayingInfoMessage hasCanSkipNext]
  -[RMSNowPlayingInfoMessage setHasCanSkipPrevious:]
  -[RMSNowPlayingInfoMessage hasCanSkipPrevious]
  -[RMSNowPlayingInfoMessage setHasLikeable:]
  -[RMSNowPlayingInfoMessage hasLikeable]
  -[RMSNowPlayingInfoMessage setHasCanWishlist:]
  -[RMSNowPlayingInfoMessage hasCanWishlist]
  -[RMSNowPlayingInfoMessage scrubbableState]
  -[RMSNowPlayingInfoMessage canSkipNext]
  -[RMSNowPlayingInfoMessage canSkipPrevious]
  -[RMSNowPlayingInfoMessage likeable]
  -[RMSNowPlayingInfoMessage canWishlist]


RMSPairingSessionDidPairMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasServiceNetworkName
 @property  NSString *serviceNetworkName
 @property  BOOL hasPairingGUID
 @property  NSString *pairingGUID

  // instance methods
  -[RMSPairingSessionDidPairMessage isEqual:]
  -[RMSPairingSessionDidPairMessage copyWithZone:]
  -[RMSPairingSessionDidPairMessage .cxx_destruct]
  -[RMSPairingSessionDidPairMessage dictionaryRepresentation]
  -[RMSPairingSessionDidPairMessage writeTo:]
  -[RMSPairingSessionDidPairMessage mergeFrom:]
  -[RMSPairingSessionDidPairMessage readFrom:]
  -[RMSPairingSessionDidPairMessage copyTo:]
  -[RMSPairingSessionDidPairMessage sessionIdentifier]
  -[RMSPairingSessionDidPairMessage setSessionIdentifier:]
  -[RMSPairingSessionDidPairMessage hasSessionIdentifier]
  -[RMSPairingSessionDidPairMessage setHasSessionIdentifier:]
  -[RMSPairingSessionDidPairMessage setPairingGUID:]
  -[RMSPairingSessionDidPairMessage hasPairingGUID]
  -[RMSPairingSessionDidPairMessage pairingGUID]
  -[RMSPairingSessionDidPairMessage serviceNetworkName]
  -[RMSPairingSessionDidPairMessage setServiceNetworkName:]
  -[RMSPairingSessionDidPairMessage hasServiceNetworkName]


RMSVolumeDidUpdateMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasVolume
 @property  float volume

  // instance methods
  -[RMSVolumeDidUpdateMessage isEqual:]
  -[RMSVolumeDidUpdateMessage copyWithZone:]
  -[RMSVolumeDidUpdateMessage dictionaryRepresentation]
  -[RMSVolumeDidUpdateMessage writeTo:]
  -[RMSVolumeDidUpdateMessage mergeFrom:]
  -[RMSVolumeDidUpdateMessage readFrom:]
  -[RMSVolumeDidUpdateMessage copyTo:]
  -[RMSVolumeDidUpdateMessage sessionIdentifier]
  -[RMSVolumeDidUpdateMessage volume]
  -[RMSVolumeDidUpdateMessage setVolume:]
  -[RMSVolumeDidUpdateMessage setSessionIdentifier:]
  -[RMSVolumeDidUpdateMessage hasSessionIdentifier]
  -[RMSVolumeDidUpdateMessage setHasVolume:]
  -[RMSVolumeDidUpdateMessage hasVolume]
  -[RMSVolumeDidUpdateMessage setHasSessionIdentifier:]


RMSSendTextResponseMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier
 @property  BOOL hasResponseCode
 @property  int responseCode

  // instance methods
  -[RMSSendTextResponseMessage isEqual:]
  -[RMSSendTextResponseMessage copyWithZone:]
  -[RMSSendTextResponseMessage dictionaryRepresentation]
  -[RMSSendTextResponseMessage writeTo:]
  -[RMSSendTextResponseMessage mergeFrom:]
  -[RMSSendTextResponseMessage readFrom:]
  -[RMSSendTextResponseMessage copyTo:]
  -[RMSSendTextResponseMessage sessionIdentifier]
  -[RMSSendTextResponseMessage setSessionIdentifier:]
  -[RMSSendTextResponseMessage responseCode]
  -[RMSSendTextResponseMessage setResponseCode:]
  -[RMSSendTextResponseMessage hasSessionIdentifier]
  -[RMSSendTextResponseMessage setHasResponseCode:]
  -[RMSSendTextResponseMessage hasResponseCode]
  -[RMSSendTextResponseMessage setHasSessionIdentifier:]


RMSLegacyDAAPControlSession : NSObject /usr/lib/libSystem.B.dylib <RMSDAAPNowPlayingManagerDelegate, RMSDAAPRequestManagerDelegate, RMSDAAPTouchRemoteManagerDelegate, RMSControlSession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSControlSessionDelegate> *delegate
 @property  RMSService *service

  // instance methods
  -[RMSLegacyDAAPControlSession init]
  -[RMSLegacyDAAPControlSession dealloc]
  -[RMSLegacyDAAPControlSession delegate]
  -[RMSLegacyDAAPControlSession setDelegate:]
  -[RMSLegacyDAAPControlSession .cxx_destruct]
  -[RMSLegacyDAAPControlSession service]
  -[RMSLegacyDAAPControlSession logout]
  -[RMSLegacyDAAPControlSession sendText:completionHandler:]
  -[RMSLegacyDAAPControlSession connectToService:pairingGUID:allowPairing:completionHandler:]
  -[RMSLegacyDAAPControlSession nowPlayingManager:didUpdateNowPlayingInfo:]
  -[RMSLegacyDAAPControlSession beginObservingNowPlaying]
  -[RMSLegacyDAAPControlSession nowPlayingManager:artworkDataDidBecomeAvailable:identifier:]
  -[RMSLegacyDAAPControlSession nowPlayingManager:didUpdateAudioRoutes:]
  -[RMSLegacyDAAPControlSession nowPlayingManager:didUpdateVolume:]
  -[RMSLegacyDAAPControlSession endObservingNowPlaying]
  -[RMSLegacyDAAPControlSession requestManagerFailedWithUnknownError:]
  -[RMSLegacyDAAPControlSession requestManagerFailedWithUnauthorizedError:]
  -[RMSLegacyDAAPControlSession sendPlaybackCommand:completionHandler:]
  -[RMSLegacyDAAPControlSession pickAudioRoute:completionHandler:]
  -[RMSLegacyDAAPControlSession setVolume:completionHandler:]
  -[RMSLegacyDAAPControlSession seekToPlaybackTime:completionHandler:]
  -[RMSLegacyDAAPControlSession setLikedState:itemID:databaseID:completionHandler:]
  -[RMSLegacyDAAPControlSession addToWishlist:databaseID:completionHandler:]
  -[RMSLegacyDAAPControlSession sendTouchMoveWithDirection:repeatCount:]
  -[RMSLegacyDAAPControlSession sendTouchEndWithDirection:repeatCount:]
  -[RMSLegacyDAAPControlSession sendNavigationCommand:]
  -[RMSLegacyDAAPControlSession _initializeManagersWithControlInterface:completionHandler:]
  -[RMSLegacyDAAPControlSession _stringFromRMSPlaybackCommand:]
  -[RMSLegacyDAAPControlSession touchRemoteManagerDidDisconnect:]


RMSPairingCredentialsMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasRequirementType
 @property  int requirementType
 @property  BOOL hasCharacterCount
 @property  unsigned int characterCount

  // instance methods
  -[RMSPairingCredentialsMessage isEqual:]
  -[RMSPairingCredentialsMessage copyWithZone:]
  -[RMSPairingCredentialsMessage dictionaryRepresentation]
  -[RMSPairingCredentialsMessage writeTo:]
  -[RMSPairingCredentialsMessage mergeFrom:]
  -[RMSPairingCredentialsMessage readFrom:]
  -[RMSPairingCredentialsMessage copyTo:]
  -[RMSPairingCredentialsMessage characterCount]
  -[RMSPairingCredentialsMessage setCharacterCount:]
  -[RMSPairingCredentialsMessage setHasCharacterCount:]
  -[RMSPairingCredentialsMessage hasCharacterCount]
  -[RMSPairingCredentialsMessage setRequirementType:]
  -[RMSPairingCredentialsMessage setHasRequirementType:]
  -[RMSPairingCredentialsMessage hasRequirementType]
  -[RMSPairingCredentialsMessage requirementType]


RMSDAAPTouchRemoteManager : NSObject /usr/lib/libSystem.B.dylib <RMSTouchRemoteSocketDelegate>
 @property  <RMSDAAPTouchRemoteManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[RMSDAAPTouchRemoteManager delegate]
  -[RMSDAAPTouchRemoteManager setDelegate:]
  -[RMSDAAPTouchRemoteManager .cxx_destruct]
  -[RMSDAAPTouchRemoteManager touchRemoteSocketDidConnect:]
  -[RMSDAAPTouchRemoteManager touchRemoteSocketDidDisconnect:]
  -[RMSDAAPTouchRemoteManager initWithRequestManager:]
  -[RMSDAAPTouchRemoteManager sendTouchMoveWithDirection:repeatCount:]
  -[RMSDAAPTouchRemoteManager sendTouchEndWithDirection:repeatCount:]
  -[RMSDAAPTouchRemoteManager sendNavigationCommand:]
  -[RMSDAAPTouchRemoteManager initiateControlWithCompletionHandler:]
  -[RMSDAAPTouchRemoteManager _createSocket]
  -[RMSDAAPTouchRemoteManager _requestPromptUpdate:]
  -[RMSDAAPTouchRemoteManager _locationForDirection:repeatCount:]
  -[RMSDAAPTouchRemoteManager _timeForDirection:repeatCount:]
  -[RMSDAAPTouchRemoteManager _parsePortInfoItems:]
  -[RMSDAAPTouchRemoteManager _requestPortInfo]


RMSNowPlayingInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long itemID
 @property  unsigned long databaseID
 @property  NSString *trackName
 @property  NSString *artistName
 @property  NSString *albumName
 @property  double timestamp
 @property  double timeRemaining
 @property  double totalDuration
 @property  int revisionNumber
 @property  long long mediaKind
 @property  long long playbackState
 @property  long long likedState
 @property  long long scrubbableState
 @property  BOOL canSkipNext
 @property  BOOL canSkipPrevious
 @property  BOOL canWishlist
 @property  BOOL hasChapterData
 @property  BOOL likeable
 @property  BOOL playing
 @property  NSString *artworkIdentifier

  // instance methods
  -[RMSNowPlayingInfo .cxx_destruct]
  -[RMSNowPlayingInfo timestamp]
  -[RMSNowPlayingInfo itemID]
  -[RMSNowPlayingInfo setTimestamp:]
  -[RMSNowPlayingInfo setItemID:]
  -[RMSNowPlayingInfo isPlaying]
  -[RMSNowPlayingInfo totalDuration]
  -[RMSNowPlayingInfo protobuf]
  -[RMSNowPlayingInfo mediaKind]
  -[RMSNowPlayingInfo setMediaKind:]
  -[RMSNowPlayingInfo initWithProtobuf:]
  -[RMSNowPlayingInfo albumName]
  -[RMSNowPlayingInfo setAlbumName:]
  -[RMSNowPlayingInfo artistName]
  -[RMSNowPlayingInfo setArtistName:]
  -[RMSNowPlayingInfo playbackState]
  -[RMSNowPlayingInfo likedState]
  -[RMSNowPlayingInfo setLikedState:]
  -[RMSNowPlayingInfo databaseID]
  -[RMSNowPlayingInfo artworkIdentifier]
  -[RMSNowPlayingInfo setPlaybackState:]
  -[RMSNowPlayingInfo setDatabaseID:]
  -[RMSNowPlayingInfo setTimeRemaining:]
  -[RMSNowPlayingInfo timeRemaining]
  -[RMSNowPlayingInfo setHasChapterData:]
  -[RMSNowPlayingInfo hasChapterData]
  -[RMSNowPlayingInfo setTotalDuration:]
  -[RMSNowPlayingInfo trackName]
  -[RMSNowPlayingInfo setRevisionNumber:]
  -[RMSNowPlayingInfo revisionNumber]
  -[RMSNowPlayingInfo setTrackName:]
  -[RMSNowPlayingInfo setLikeable:]
  -[RMSNowPlayingInfo setCanWishlist:]
  -[RMSNowPlayingInfo setCanSkipPrevious:]
  -[RMSNowPlayingInfo setCanSkipNext:]
  -[RMSNowPlayingInfo setScrubbableState:]
  -[RMSNowPlayingInfo scrubbableState]
  -[RMSNowPlayingInfo canSkipNext]
  -[RMSNowPlayingInfo canSkipPrevious]
  -[RMSNowPlayingInfo canWishlist]
  -[RMSNowPlayingInfo isLikeable]


RMSMediaRemoteControlSession : NSObject /usr/lib/libSystem.B.dylib <RMSControlSession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSControlSessionDelegate> *delegate
 @property  RMSService *service

  // instance methods
  -[RMSMediaRemoteControlSession init]
  -[RMSMediaRemoteControlSession dealloc]
  -[RMSMediaRemoteControlSession delegate]
  -[RMSMediaRemoteControlSession setDelegate:]
  -[RMSMediaRemoteControlSession .cxx_destruct]
  -[RMSMediaRemoteControlSession service]
  -[RMSMediaRemoteControlSession _updateNowPlayingInfo]
  -[RMSMediaRemoteControlSession logout]
  -[RMSMediaRemoteControlSession sendText:completionHandler:]
  -[RMSMediaRemoteControlSession connectToService:pairingGUID:allowPairing:completionHandler:]
  -[RMSMediaRemoteControlSession beginObservingNowPlaying]
  -[RMSMediaRemoteControlSession endObservingNowPlaying]
  -[RMSMediaRemoteControlSession sendPlaybackCommand:completionHandler:]
  -[RMSMediaRemoteControlSession pickAudioRoute:completionHandler:]
  -[RMSMediaRemoteControlSession setVolume:completionHandler:]
  -[RMSMediaRemoteControlSession seekToPlaybackTime:completionHandler:]
  -[RMSMediaRemoteControlSession setLikedState:itemID:databaseID:completionHandler:]
  -[RMSMediaRemoteControlSession addToWishlist:databaseID:completionHandler:]
  -[RMSMediaRemoteControlSession sendTouchMoveWithDirection:repeatCount:]
  -[RMSMediaRemoteControlSession sendTouchEndWithDirection:repeatCount:]
  -[RMSMediaRemoteControlSession sendNavigationCommand:]
  -[RMSMediaRemoteControlSession _isSystemVersionSupported:]
  -[RMSMediaRemoteControlSession _isPairingAllowed:]
  -[RMSMediaRemoteControlSession _didReceivePairingCallbackWithCredentials:completion:]
  -[RMSMediaRemoteControlSession _didReceiveConnectionStateCallbackWithConnectionState:error:]
  -[RMSMediaRemoteControlSession _handleConnected]
  -[RMSMediaRemoteControlSession _endObservingTextEditingEvents]
  -[RMSMediaRemoteControlSession _handleMediaRemoteOriginNowPlayingInfoDidChangeNotification:]
  -[RMSMediaRemoteControlSession _handleMediaRemoteNowPlayingApplicationPlaybackStateDidChangeNotification:]
  -[RMSMediaRemoteControlSession _handleDisconnectedWithError:]
  -[RMSMediaRemoteControlSession _beginObservingTextEditingEvents]
  -[RMSMediaRemoteControlSession _unpairExternalDevice]
  -[RMSMediaRemoteControlSession _isExternalDeviceConnected]
  -[RMSMediaRemoteControlSession _disconnectExternalDevice]
  -[RMSMediaRemoteControlSession _didReceiveTextEditingCallbackWithSession:eventType:]
  -[RMSMediaRemoteControlSession _didGetTextEditingSession:error:]
  -[RMSMediaRemoteControlSession _handleDidBeginEditingWithSession:]
  -[RMSMediaRemoteControlSession _handleDidEndEditing]
  -[RMSMediaRemoteControlSession _nowPlayingInfoWithNowPlayingMetadata:]
  -[RMSMediaRemoteControlSession _artworkDataWithArtwork:]
  -[RMSMediaRemoteControlSession _updateNowPlayingInfo:withPlaybackState:]


RMSPowerAssertion : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[RMSPowerAssertion dealloc]
  -[RMSPowerAssertion initWithName:]
  -[RMSPowerAssertion refresh]


RMSBeginDiscoveryMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasDiscoveryTypes
 @property  int discoveryTypes
 @property  NSMutableArray *pairedNetworkNames
 @property  BOOL hasHasPairedNetworkNames
 @property  BOOL hasPairedNetworkNames

  // class methods
  +[RMSBeginDiscoveryMessage pairedNetworkNamesType]

  // instance methods
  -[RMSBeginDiscoveryMessage isEqual:]
  -[RMSBeginDiscoveryMessage copyWithZone:]
  -[RMSBeginDiscoveryMessage .cxx_destruct]
  -[RMSBeginDiscoveryMessage dictionaryRepresentation]
  -[RMSBeginDiscoveryMessage writeTo:]
  -[RMSBeginDiscoveryMessage mergeFrom:]
  -[RMSBeginDiscoveryMessage readFrom:]
  -[RMSBeginDiscoveryMessage copyTo:]
  -[RMSBeginDiscoveryMessage discoveryTypes]
  -[RMSBeginDiscoveryMessage setDiscoveryTypes:]
  -[RMSBeginDiscoveryMessage pairedNetworkNames]
  -[RMSBeginDiscoveryMessage setPairedNetworkNames:]
  -[RMSBeginDiscoveryMessage setHasPairedNetworkNames:]
  -[RMSBeginDiscoveryMessage addPairedNetworkNames:]
  -[RMSBeginDiscoveryMessage pairedNetworkNamesCount]
  -[RMSBeginDiscoveryMessage clearPairedNetworkNames]
  -[RMSBeginDiscoveryMessage pairedNetworkNamesAtIndex:]
  -[RMSBeginDiscoveryMessage hasPairedNetworkNames]
  -[RMSBeginDiscoveryMessage setHasDiscoveryTypes:]
  -[RMSBeginDiscoveryMessage hasDiscoveryTypes]
  -[RMSBeginDiscoveryMessage setHasHasPairedNetworkNames:]
  -[RMSBeginDiscoveryMessage hasHasPairedNetworkNames]


RMSControlSessionProxy : RMSSessionProxy <RMSControlSession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSControlSessionDelegate> *delegate
 @property  RMSService *service

  // instance methods
  -[RMSControlSessionProxy init]
  -[RMSControlSessionProxy dealloc]
  -[RMSControlSessionProxy delegate]
  -[RMSControlSessionProxy setDelegate:]
  -[RMSControlSessionProxy .cxx_destruct]
  -[RMSControlSessionProxy service]
  -[RMSControlSessionProxy logout]
  -[RMSControlSessionProxy sendText:completionHandler:]
  -[RMSControlSessionProxy _handleSessionDidEndNotification:]
  -[RMSControlSessionProxy heartbeatDidFail]
  -[RMSControlSessionProxy connectToService:pairingGUID:allowPairing:completionHandler:]
  -[RMSControlSessionProxy beginObservingNowPlaying]
  -[RMSControlSessionProxy endObservingNowPlaying]
  -[RMSControlSessionProxy sendPlaybackCommand:completionHandler:]
  -[RMSControlSessionProxy pickAudioRoute:completionHandler:]
  -[RMSControlSessionProxy setVolume:completionHandler:]
  -[RMSControlSessionProxy seekToPlaybackTime:completionHandler:]
  -[RMSControlSessionProxy setLikedState:itemID:databaseID:completionHandler:]
  -[RMSControlSessionProxy addToWishlist:databaseID:completionHandler:]
  -[RMSControlSessionProxy sendTouchMoveWithDirection:repeatCount:]
  -[RMSControlSessionProxy sendTouchEndWithDirection:repeatCount:]
  -[RMSControlSessionProxy sendNavigationCommand:]
  -[RMSControlSessionProxy _handleDidReceivePairingChallengeRequestNotification:]
  -[RMSControlSessionProxy _handleNowPlayingInfoDidUpdateNotification:]
  -[RMSControlSessionProxy _handleNowPlayingArtworkDidBecomeAvailableNotification:]
  -[RMSControlSessionProxy _handleAudioRoutesDidUpdateNotification:]
  -[RMSControlSessionProxy _handleVolumeDidUpdateNotification:]
  -[RMSControlSessionProxy _handleDidBeginEditingTextNotification:]
  -[RMSControlSessionProxy _handleDidEndEditingTextNotification:]
  -[RMSControlSessionProxy _notifyDelegateForArtworkChange]


RMSNowPlayingArtworkRequestMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasArtworkIdentifier
 @property  NSString *artworkIdentifier
 @property  BOOL hasWidth
 @property  unsigned int width
 @property  BOOL hasHeight
 @property  unsigned int height
 @property  BOOL hasCompressionQuality
 @property  float compressionQuality

  // instance methods
  -[RMSNowPlayingArtworkRequestMessage isEqual:]
  -[RMSNowPlayingArtworkRequestMessage copyWithZone:]
  -[RMSNowPlayingArtworkRequestMessage .cxx_destruct]
  -[RMSNowPlayingArtworkRequestMessage dictionaryRepresentation]
  -[RMSNowPlayingArtworkRequestMessage writeTo:]
  -[RMSNowPlayingArtworkRequestMessage width]
  -[RMSNowPlayingArtworkRequestMessage height]
  -[RMSNowPlayingArtworkRequestMessage setWidth:]
  -[RMSNowPlayingArtworkRequestMessage setHeight:]
  -[RMSNowPlayingArtworkRequestMessage mergeFrom:]
  -[RMSNowPlayingArtworkRequestMessage readFrom:]
  -[RMSNowPlayingArtworkRequestMessage copyTo:]
  -[RMSNowPlayingArtworkRequestMessage setHasWidth:]
  -[RMSNowPlayingArtworkRequestMessage hasWidth]
  -[RMSNowPlayingArtworkRequestMessage setHasHeight:]
  -[RMSNowPlayingArtworkRequestMessage hasHeight]
  -[RMSNowPlayingArtworkRequestMessage setArtworkIdentifier:]
  -[RMSNowPlayingArtworkRequestMessage artworkIdentifier]
  -[RMSNowPlayingArtworkRequestMessage compressionQuality]
  -[RMSNowPlayingArtworkRequestMessage setCompressionQuality:]
  -[RMSNowPlayingArtworkRequestMessage hasArtworkIdentifier]
  -[RMSNowPlayingArtworkRequestMessage setHasCompressionQuality:]
  -[RMSNowPlayingArtworkRequestMessage hasCompressionQuality]


_RMSSessionRecord : NSObject /usr/lib/libSystem.B.dylib
 @property  int refreshCount
 @property  int timeout
 @property  id session
 @property  RMSPowerAssertion *powerAssertion
 @property  RMSRunAssertion *runAssertion

  // instance methods
  -[_RMSSessionRecord .cxx_destruct]
  -[_RMSSessionRecord timeout]
  -[_RMSSessionRecord setTimeout:]
  -[_RMSSessionRecord session]
  -[_RMSSessionRecord setSession:]
  -[_RMSSessionRecord powerAssertion]
  -[_RMSSessionRecord setPowerAssertion:]
  -[_RMSSessionRecord refreshCount]
  -[_RMSSessionRecord setRefreshCount:]
  -[_RMSSessionRecord runAssertion]
  -[_RMSSessionRecord setRunAssertion:]


RMSSessionManager : NSObject /usr/lib/libSystem.B.dylib
 @property  <RMSSessionManagerDelegate> *delegate

  // instance methods
  -[RMSSessionManager init]
  -[RMSSessionManager delegate]
  -[RMSSessionManager setDelegate:]
  -[RMSSessionManager .cxx_destruct]
  -[RMSSessionManager sessionWithIdentifier:]
  -[RMSSessionManager persistedSessionIdentifiers]
  -[RMSSessionManager refreshSessionWithIdentifier:]
  -[RMSSessionManager beginSession:timeout:shouldTakePowerAssertion:completionHandler:]
  -[RMSSessionManager endSessionWithIdentifier:completionHandler:]
  -[RMSSessionManager identifierForSession:]
  -[RMSSessionManager _uniqueSessionIdentifier]
  -[RMSSessionManager _updatePersistedSessionIdentifiers]
  -[RMSSessionManager _scheduleSessionExpirationWithIdentifier:timeout:]


RMSSetLikeStateMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasLikeState
 @property  int likeState
 @property  BOOL hasItemID
 @property  unsigned long itemID
 @property  BOOL hasDatabaseID
 @property  unsigned long databaseID
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSSetLikeStateMessage isEqual:]
  -[RMSSetLikeStateMessage copyWithZone:]
  -[RMSSetLikeStateMessage dictionaryRepresentation]
  -[RMSSetLikeStateMessage itemID]
  -[RMSSetLikeStateMessage writeTo:]
  -[RMSSetLikeStateMessage mergeFrom:]
  -[RMSSetLikeStateMessage readFrom:]
  -[RMSSetLikeStateMessage copyTo:]
  -[RMSSetLikeStateMessage setItemID:]
  -[RMSSetLikeStateMessage hasItemID]
  -[RMSSetLikeStateMessage sessionIdentifier]
  -[RMSSetLikeStateMessage setSessionIdentifier:]
  -[RMSSetLikeStateMessage databaseID]
  -[RMSSetLikeStateMessage setDatabaseID:]
  -[RMSSetLikeStateMessage hasSessionIdentifier]
  -[RMSSetLikeStateMessage likeState]
  -[RMSSetLikeStateMessage setLikeState:]
  -[RMSSetLikeStateMessage setHasSessionIdentifier:]
  -[RMSSetLikeStateMessage setHasItemID:]
  -[RMSSetLikeStateMessage setHasDatabaseID:]
  -[RMSSetLikeStateMessage hasDatabaseID]
  -[RMSSetLikeStateMessage setHasLikeState:]
  -[RMSSetLikeStateMessage hasLikeState]


RMSPairingCredentials : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long requirementType
 @property  unsigned long characterCount

  // instance methods
  -[RMSPairingCredentials protobuf]
  -[RMSPairingCredentials initWithProtobuf:]
  -[RMSPairingCredentials characterCount]
  -[RMSPairingCredentials setCharacterCount:]
  -[RMSPairingCredentials setRequirementType:]
  -[RMSPairingCredentials requirementType]


RMSDiscoverySession : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[RMSDiscoverySession localDiscoverySession]
  +[RMSDiscoverySession proxyDiscoverySession]


RMSLocalDiscoverySession : NSObject /usr/lib/libSystem.B.dylib <RMSServiceProviderDelegate, RMSDiscoverySession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <RMSDiscoverySessionDelegate> *delegate
 @property  long long discoveryTypes
 @property  NSArray *availableServices
 @property  BOOL networkAvailable
 @property  NSArray *pairedNetworkNames

  // instance methods
  -[RMSLocalDiscoverySession init]
  -[RMSLocalDiscoverySession dealloc]
  -[RMSLocalDiscoverySession delegate]
  -[RMSLocalDiscoverySession setDelegate:]
  -[RMSLocalDiscoverySession .cxx_destruct]
  -[RMSLocalDiscoverySession endDiscovery]
  -[RMSLocalDiscoverySession beginDiscovery]
  -[RMSLocalDiscoverySession isNetworkAvailable]
  -[RMSLocalDiscoverySession availableServices]
  -[RMSLocalDiscoverySession discoveryTypes]
  -[RMSLocalDiscoverySession setDiscoveryTypes:]
  -[RMSLocalDiscoverySession pairedNetworkNames]
  -[RMSLocalDiscoverySession setPairedNetworkNames:]
  -[RMSLocalDiscoverySession serviceProvider:serviceDidBecomeAvailable:]
  -[RMSLocalDiscoverySession serviceProvider:serviceDidBecomeUnavailable:]
  -[RMSLocalDiscoverySession _handleHSGroupIDDidChangeNotification:]
  -[RMSLocalDiscoverySession _handleReachabilityChangedNotification:]
  -[RMSLocalDiscoverySession _enableProviders]
  -[RMSLocalDiscoverySession _updateWifiAvailability]
  -[RMSLocalDiscoverySession _providerForDiscoveryType:]


RMSPickAudioRouteMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasMacAddress
 @property  long long macAddress
 @property  BOOL hasSessionIdentifier
 @property  int sessionIdentifier

  // instance methods
  -[RMSPickAudioRouteMessage isEqual:]
  -[RMSPickAudioRouteMessage copyWithZone:]
  -[RMSPickAudioRouteMessage dictionaryRepresentation]
  -[RMSPickAudioRouteMessage writeTo:]
  -[RMSPickAudioRouteMessage mergeFrom:]
  -[RMSPickAudioRouteMessage readFrom:]
  -[RMSPickAudioRouteMessage copyTo:]
  -[RMSPickAudioRouteMessage macAddress]
  -[RMSPickAudioRouteMessage sessionIdentifier]
  -[RMSPickAudioRouteMessage setSessionIdentifier:]
  -[RMSPickAudioRouteMessage hasSessionIdentifier]
  -[RMSPickAudioRouteMessage setMacAddress:]
  -[RMSPickAudioRouteMessage hasMacAddress]
  -[RMSPickAudioRouteMessage setHasSessionIdentifier:]
  -[RMSPickAudioRouteMessage setHasMacAddress:]


NSURLComponents(RMSAdditions)
	// instance methods
	-[NSURLComponents(RMSAdditions) rms_componentsByAddingQueryParameters:]
	-[NSURLComponents(RMSAdditions) rms_componentsByAddingQueryParameters:]

UIImage(RMSAdditions)
	// instance methods
	-[UIImage(RMSAdditions) rms_jpegDataScaledToSize:compressionQuality:]

01 00 0d00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSAccountStore 
01 00 0700 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSProtobuf 
01 00 0700 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNetService 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNetServiceBrowser 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0f00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0800 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
