|| __DATA.__common __understandingOnDeviceAssetsAvailable
|| __DATA.__objc_data _OBJC_CLASS_$_SASOverriddenSystemState
|| __DATA.__objc_data _OBJC_CLASS_$_SiriActivationAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SiriActivationButtonEventListener
|| __DATA.__objc_data _OBJC_CLASS_$_SiriBluetoothDeviceSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriBluetoothKeyboardActivationSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriBreadcrumbSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriContinuitySource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriDirectActionSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriHearstLongPressButtonContext
|| __DATA.__objc_data _OBJC_CLASS_$_SiriRemotePresentationBringUpSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriSimpleActivationSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriSpotlightSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriTVActivationSource
|| __DATA.__objc_data _OBJC_CLASS_$_SiriTestingSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SASBluetoothEndpointUtility
|| __DATA.__objc_data _OBJC_METACLASS_$_SASOverriddenSystemState
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriActivationAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriActivationButtonEventListener
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriBluetoothDeviceSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriBluetoothKeyboardActivationSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriBreadcrumbSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriContinuitySource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriDirectActionSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriHearstLongPressButtonContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriRemotePresentationBringUpSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriSimpleActivationSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriSpotlightSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriTVActivationSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SiriTestingSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_SiriActivationSource._connection
|| __DATA.__objc_ivar _OBJC_IVAR_$_SiriActivationSource._lock
|| __DATA_CONST.__const _SASPPTDeltaKey
|| __DATA_CONST.__const _SASPPTIterationsKey
|| __DATA_CONST.__const _SASPPTSiriBringupTestPrefix
|| __DATA_CONST.__const _SASPPTSpeechFileKey
|| __DATA_CONST.__const _SASPPTTestNameKey
|| __DATA_CONST.__const _SASPPTTestNameSiriBringupTVSyntheticSpeechCapturedToSnippetResults
|| __DATA_CONST.__const _SASPPTTestNameSiriBringupTVSyntheticSpeechCapturedToSpeechRecording
|| __DATA_CONST.__const _SASPPTTestNameSiriBringupToCarPlayMessageReading
|| __DATA_CONST.__const _SASPPTTestNameSiriBringupToFlamesListening
|| __DATA_CONST.__const _SASPPTTestNameSiriBringupToInitialQuery
|| __DATA_CONST.__const _SASPPTTestNameSiriBringupToSiriProcessViewControllerAppeared
|| __DATA_CONST.__const _SASPPTTestNameSiriScrollTeamRoster
|| __DATA_CONST.__const _SASPPTTestOptionsKey
|| __DATA_CONST.__const _SASPresentationStateKey
|| __DATA_CONST.__const _SASTestingInputKey
|| __DATA_CONST.__const _SiriActivationServiceEntitlement
|| __DATA_CONST.__const _SiriContextOverrideKey
|| __DATA_CONST.__const _SiriPresentationOptionsKey
|| __DATA_CONST.__const _SiriTestingContextAudioInputKey
|| __DATA_CONST.__const _SiriTestingContextFailedTestIdentifierKey
|| __DATA_CONST.__const _SiriTestingContextFailedTestMessageKey
|| __DATA_CONST.__const _SiriTestingContextFailedTestNameKey
|| __DATA_CONST.__const _SiriTestingContextRecognitionStringKey
|| __DATA_CONST.__const _kSiriDirectActionContextAppBundleIdKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASActivationCondition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASActivationDecision
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASActivationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASBluetoothEndpointUtility
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASBoardServicesConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASBulletinCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASBulletinCacheNode
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASBulletinManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASButtonActvationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASButtonIdentifierTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASHeater
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASLockStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASLockStateTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASMyriadController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASPresentationConnectionListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASPresentationDecision
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASPresentationModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASPresentationServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASPresentationState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASRemoteRequestManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASRequestOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASRequestOptionsBuilder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASRequestTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASSignalConnectionListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASSignalServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASSiriPocketStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASSystemState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASTestingInput
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASTestingInputController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASTimeIntervalTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASTipKitSignalEmitter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASUnderstandingOnDeviceAssetsState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriActivationService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriActivationSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriActivityAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriBluetoothContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriContextOverride
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriContinuityContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriDirectActionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriDismissalOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriLongPressButtonConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriLongPressButtonConfigurationUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriLongPressButtonContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriLongPressButtonSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriPresentationActivationCancelReasonTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriPresentationIdentifierTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriPresentationOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriPunchoutRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriRemotePresentationBringUpContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriShortPressButtonContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriSpotlightContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriTVLongPressButtonContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriTestingContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SiriVoiceTriggerContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SASPresentationStateMutation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SASTestingInputMutation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SiriPresentationOptionsMutation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASActivationCondition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASActivationDecision
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASActivationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASBoardServicesConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASBulletinCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASBulletinCacheNode
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASBulletinManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASButtonActvationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASButtonIdentifierTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASHeater
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASLockStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASLockStateTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASMyriadController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASPresentationConnectionListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASPresentationDecision
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASPresentationModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASPresentationServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASPresentationState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASRemoteRequestManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASRequestOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASRequestOptionsBuilder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASRequestTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASSignalConnectionListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASSignalServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASSiriPocketStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASSystemState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASTestingInput
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASTestingInputController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASTimeIntervalTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASTipKitSignalEmitter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASUnderstandingOnDeviceAssetsState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriActivationService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriActivationSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriActivityAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriBluetoothContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriContextOverride
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriContinuityContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriDirectActionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriDismissalOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriLongPressButtonConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriLongPressButtonConfigurationUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriLongPressButtonContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriLongPressButtonSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriPresentationActivationCancelReasonTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriPresentationIdentifierTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriPresentationOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriPunchoutRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriRemotePresentationBringUpContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriShortPressButtonContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriSpotlightContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriTVLongPressButtonContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriTestingContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SiriVoiceTriggerContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SASPresentationStateMutation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SASTestingInputMutation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SiriPresentationOptionsMutation
|| __TEXT.__const _SiriActivationVersionNumber
|| __TEXT.__const _SiriActivationVersionString
|| __TEXT.__const _SiriHardwareButtonLongPressDefaultDuration
|| __TEXT.__const _SiriHardwareButtonLongPressExtendedForMitigationDuration
|| __TEXT.__const _SiriHardwareVoiceCommandLongPressButtonDuration
|| __TEXT.__text _AFDirectActionSourceFromSASRequestSource
|| __TEXT.__text _CARAutomaticFeatureStateGetName
|| __TEXT.__text _SASButtonEventTypeGetName
|| __TEXT.__text _SASCarPlayEnhancedSiriCharacteristicsContainsCharacteristic
|| __TEXT.__text _SASCarPlayEnhancedSiriCharacteristicsToString
|| __TEXT.__text _SASDismissalGetAnalyticsName
|| __TEXT.__text _SASDismissalGetName
|| __TEXT.__text _SASDismissalIsError
|| __TEXT.__text _SASDismissalReasonToSISchemaDismissalReason
|| __TEXT.__text _SASLockStateGetName
|| __TEXT.__text _SASMyriadUtilCurrentBoostForDecay
|| __TEXT.__text _SASPresentationManagerErrorGetName
|| __TEXT.__text _SASRemoteTypeFromSiriTVRemoteType
|| __TEXT.__text _SASRequestInputTypeGetDescription
|| __TEXT.__text _SASRequestSourceGetName
|| __TEXT.__text _SASRequestSourceIsHTT
|| __TEXT.__text _SASRequestStateGetName
|| __TEXT.__text _SASTestingInputTypeGetFromName
|| __TEXT.__text _SASTestingInputTypeGetIsValid
|| __TEXT.__text _SASTestingInputTypeGetIsValidAndSpecified
|| __TEXT.__text _SASTestingInputTypeGetName
|| __TEXT.__text _SiriInvokeOnMainQueue
|| __TEXT.__text _SiriPresentationRotationStyleGetFromName
|| __TEXT.__text _SiriPresentationRotationStyleGetIsValid
|| __TEXT.__text _SiriPresentationRotationStyleGetIsValidAndSpecified
|| __TEXT.__text _SiriPresentationRotationStyleGetName
|| __TEXT.__text _SiriSystemUpTimeFromCFAbsoluteCurrentTime
|| __TEXT.__text _SiriTVStringForRemoteType
__ AssistantServices: _AFAccessibilitySupportsAttentionAwareFeatures
__ AssistantServices: _AFActivationEventGetDescription
__ AssistantServices: _AFAnalyticsEventCreateCurrent
__ AssistantServices: _AFAssistantCapable
__ AssistantServices: _AFAssistantRestricted
__ AssistantServices: _AFCDAFaceDetection
__ AssistantServices: _AFDeviceSupportsAOP
__ AssistantServices: _AFDeviceSupportsZLL
__ AssistantServices: _AFDirectActionCreateRequestInfo
__ AssistantServices: _AFDirectActionEventGetName
__ AssistantServices: _AFIsATV
__ AssistantServices: _AFIsInternalInstall
__ AssistantServices: _AFIsPad
__ AssistantServices: _AFMachAbsoluteTimeGetTimeInterval
__ AssistantServices: _AFMyriadEmitSelfMetrics
__ AssistantServices: _AFPreferencesAlwaysEyesFreeEnabled
__ AssistantServices: _AFPreferencesLanguageIsSupported
__ AssistantServices: _AFPreferencesStreamingDictationEnabled
__ AssistantServices: _AFPreferencesTypeToSiriEnabled
__ AssistantServices: _AFRequestCancellationReasonGetName
__ AssistantServices: _AFSiriDeactivationOptionsGetNames
__ AssistantServices: _AFSiriDeactivationReasonGetName
__ AssistantServices: _AFSiriLogContextConnection
__ AssistantServices: _AFSiriXAssetDidChangeDarwinNotification
__ AssistantServices: _AFSpeechEventGetDescription
__ AssistantServices: _AFVoiceTriggerDuringPhoneCallCapable
__ AssistantServices: _OBJC_CLASS_$_AFAnalytics
__ AssistantServices: _OBJC_CLASS_$_AFApplicationContext
__ AssistantServices: _OBJC_CLASS_$_AFBulletin
__ AssistantServices: _OBJC_CLASS_$_AFFeatureFlags
__ AssistantServices: _OBJC_CLASS_$_AFMyriadCoordinator
__ AssistantServices: _OBJC_CLASS_$_AFNotifyObserver
__ AssistantServices: _OBJC_CLASS_$_AFPreferences
__ AssistantServices: _OBJC_CLASS_$_AFRemoteRequestWatcher
__ AssistantServices: _OBJC_CLASS_$_AFRequestInfo
__ AssistantServices: _OBJC_CLASS_$_AFSettingsConnection
__ AssistantServices: _OBJC_CLASS_$_AFSiriTether
__ AssistantServices: _OBJC_CLASS_$_AFSpeechRequestOptions
__ AssistantServices: _kAFPreferencesDidChangeDarwinNotification
__ AssistantServices: _kAssistantAudioCategory
__ AssistantServices: _kAssistantDirectActionEventKey
__ AssistantServices: _kAssistantDirectActionEventMessagesConversationGUIDKey
__ AssistantServices: _kAssistantDirectActionEventMessagesFullNameKey
__ AssistantServices: _kAssistantDirectActionEventMessagesPhoneAddressKey
__ BackBoardServices: _BKSHIDServicesIsSmartCoverClosed
__ BaseBoard: _OBJC_CLASS_$_BSObjCProtocol
__ BiomeStreams: _OBJC_CLASS_$_BMDiscoverabilitySignalEvent
__ BiomeStreams: _OBJC_CLASS_$_BMStreams
__ BluetoothManager: _OBJC_CLASS_$_BluetoothDevice
__ BluetoothManager: _OBJC_CLASS_$_BluetoothManager
__ BoardServices: _OBJC_CLASS_$_BSServiceConnection
__ BoardServices: _OBJC_CLASS_$_BSServiceConnectionEndpoint
__ BoardServices: _OBJC_CLASS_$_BSServiceConnectionListener
__ BoardServices: _OBJC_CLASS_$_BSServiceInterface
__ BoardServices: _OBJC_CLASS_$_BSServiceQuality
__ BulletinBoard: _BBBulletinContentTypeIncomingCall
__ BulletinBoard: _BBBulletinContentTypeIntercom
__ BulletinBoard: _BBBulletinContentTypeMessagingDirect
__ BulletinBoard: _BBBulletinContentTypeMessagingGroup
__ BulletinBoard: _BBBulletinContentTypeMissedCall
__ BulletinBoard: _BBBulletinContentTypeVoicemail
__ BulletinBoard: _OBJC_CLASS_$_BBBulletin
__ BulletinBoard: _OBJC_CLASS_$_BBObserver
__ CallKit: _OBJC_CLASS_$_CXCallObserver
__ CarKit: _CRIsPairedWithCertificateSerialNumber
__ CarKit: _CRPairedVehiclesDidChangeNotification
__ CarKit: _OBJC_CLASS_$_CARAutomaticDNDStatus
__ CarKit: _OBJC_CLASS_$_CARSessionStatus
__ CarKit: _OBJC_CLASS_$_CRCarPlayAppPolicyEvaluator
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: _kCFAllocatorDefault
__ CoreMotion: _OBJC_CLASS_$_CMMotionActivityManager
__ CoreMotion: _OBJC_CLASS_$_CMPocketStateManager
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSLog
__ Foundation: _NSMapGet
__ Foundation: _NSMapInsert
__ Foundation: _NSStringFromBOOL
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitor
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitorConfiguration
__ IAP: _IAPBluetoothDeviceMode
__ Intents: _INReadAnnouncementIntentIdentifier
__ Intents: _INSearchForMessagesIntentIdentifier
__ Intents: _INSendMessageIntentIdentifier
__ Intents: _OBJC_CLASS_$_INAppIntentDeliverer
__ MediaExperience: _AVSystemController_ActiveAudioRouteDidChangeNotification
__ MediaExperience: _AVSystemController_PickableRouteType_Wireless
__ MediaExperience: _AVSystemController_PickableRoutesDidChangeNotification
__ MediaExperience: _AVSystemController_RouteDescriptionKey_BTDetails_EndpointType
__ MediaExperience: _AVSystemController_RouteDescriptionKey_BTDetails_EndpointType_Unspecified
__ MediaExperience: _AVSystemController_RouteDescriptionKey_BTDetails_EndpointType_Vehicle
__ MediaExperience: _AVSystemController_RouteDescriptionKey_RouteCurrentlyPicked
__ MediaExperience: _AVSystemController_RouteDescriptionKey_RouteSubtype
__ MediaExperience: _AVSystemController_RouteDescriptionKey_RouteType
__ MediaExperience: _AVSystemController_ServerConnectionDiedNotification
__ MediaExperience: _AVSystemController_SubscribeToNotificationsAttribute
__ MediaExperience: _OBJC_CLASS_$_AVSystemController
__ MobileBluetooth: _BTDeviceAddressFromString
__ MobileBluetooth: _BTDeviceGetAddressString
__ MobileBluetooth: _BTDeviceIsTemporaryPaired
__ PowerLog: _PLLogRegisteredEvent
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ SAObjects: _OBJC_CLASS_$_SASPronunciationContext
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaCarPlayHeadUnitContext
__ SoftLinking: __sl_dlopen
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonHomeButton
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonKeyboard
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonLiftToWake
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonLockButton
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonSmartCover
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonTouch
__ UserNotifications: _OBJC_CLASS_$_UNNotification
__ UserNotifications: __UNNotificationContentTypeIncomingCall
__ UserNotifications: __UNNotificationContentTypeIntercom
__ UserNotifications: __UNNotificationContentTypeMessagingDirect
__ UserNotifications: __UNNotificationContentTypeMessagingGroup
__ UserNotifications: __UNNotificationContentTypeMissedCall
__ UserNotifications: __UNNotificationContentTypeVoicemail
__ libAccessibility.dylib: __AXSHomeButtonAssistant
__ libAccessibility.dylib: __AXSTripleClickCopyOptions
__ libAccessibility.dylib: _kAXSTripleHomeEnabledNotification
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _sysctlnametomib
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
SiriActivationSource : NSObject
 @property  NSString *identifier

  // instance methods
  -[SiriActivationSource identifier]
  -[SiriActivationSource dealloc]
  -[SiriActivationSource isActive]
  -[SiriActivationSource .cxx_destruct]
  -[SiriActivationSource setIdentifier:]
  -[SiriActivationSource invalidate]
  -[SiriActivationSource init]
  -[SiriActivationSource isEnabled]
  -[SiriActivationSource activeChangedTo:]


SiriPresentationOptions : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL wakeScreen
 @property  BOOL hideOtherWindowsDuringAppearance
 @property  long long rotationStyle
 @property  long long requestSource

  // class methods
  +[SiriPresentationOptions supportsSecureCoding]
  +[SiriPresentationOptions newWithBuilder:]

  // instance methods
  -[SiriPresentationOptions encodeWithCoder:]
  -[SiriPresentationOptions initWithBuilder:]
  -[SiriPresentationOptions mutatedCopyWithMutator:]
  -[SiriPresentationOptions requestSource]
  -[SiriPresentationOptions copyWithZone:]
  -[SiriPresentationOptions isEqual:]
  -[SiriPresentationOptions initWithCoder:]
  -[SiriPresentationOptions rotationStyle]
  -[SiriPresentationOptions hideOtherWindowsDuringAppearance]
  -[SiriPresentationOptions wakeScreen]
  -[SiriPresentationOptions initWithWakeScreen:hideOtherWindowsDuringAppearance:rotationStyle:requestSource:]


_SiriPresentationOptionsMutation : NSObject <SiriPresentationOptionsMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SiriPresentationOptionsMutation .cxx_destruct]
  -[_SiriPresentationOptionsMutation generate]
  -[_SiriPresentationOptionsMutation init]
  -[_SiriPresentationOptionsMutation setRequestSource:]
  -[_SiriPresentationOptionsMutation initWithBaseModel:]
  -[_SiriPresentationOptionsMutation setWakeScreen:]
  -[_SiriPresentationOptionsMutation setHideOtherWindowsDuringAppearance:]
  -[_SiriPresentationOptionsMutation setRotationStyle:]


SASRequestOptionsBuilder : NSObject
 @property  SASSystemState *systemState
 @property  long long presentationIdentifier

  // instance methods
  -[SASRequestOptionsBuilder setSystemState:]
  -[SASRequestOptionsBuilder setPresentationIdentifier:]
  -[SASRequestOptionsBuilder presentationIdentifier]
  -[SASRequestOptionsBuilder .cxx_destruct]
  -[SASRequestOptionsBuilder systemState]
  -[SASRequestOptionsBuilder _siriIsEnabled]
  -[SASRequestOptionsBuilder buildOptionsWithRequest:presentationIdentifier:dataSource:]
  -[SASRequestOptionsBuilder _createRequestOptionsForRequest:withDataSource:]


SASOverriddenSystemState : SASSystemState
 @property  SASSystemState *systemState
 @property  SiriContextOverride *contextOverride

  // instance methods
  -[SASOverriddenSystemState setLockStateMonitor:]
  -[SASOverriddenSystemState smartCoverClosed]
  -[SASOverriddenSystemState setSystemState:]
  -[SASOverriddenSystemState isConnectedToCarPlay]
  -[SASOverriddenSystemState deviceIsBlocked]
  -[SASOverriddenSystemState lockStateMonitor]
  -[SASOverriddenSystemState isPad]
  -[SASOverriddenSystemState pocketStateShouldPreventVoiceTrigger]
  -[SASOverriddenSystemState accessibilityShortcutEnabled]
  -[SASOverriddenSystemState .cxx_destruct]
  -[SASOverriddenSystemState carDNDActive]
  -[SASOverriddenSystemState currentSpokenLanguageCode]
  -[SASOverriddenSystemState deviceIsPasscodeLocked]
  -[SASOverriddenSystemState isConnectedToTrustedCarPlay]
  -[SASOverriddenSystemState siriIsEnabled]
  -[SASOverriddenSystemState setContextOverride:]
  -[SASOverriddenSystemState hasUnlockedSinceBoot]
  -[SASOverriddenSystemState systemState]
  -[SASOverriddenSystemState siriIsSupported]
  -[SASOverriddenSystemState siriIsRestricted]
  -[SASOverriddenSystemState initWithSystemState:contextOverride:]
  -[SASOverriddenSystemState contextOverride]


SASHeater : NSObject
 @property  double preparationStartTime
 @property  BOOL predictedRecordRouteIsZLL
 @property  NSTimer *preheatTimer
 @property  double preheatTimeInterval
 @property  <SASHeaterDelegate> *delegate

  // instance methods
  -[SASHeater setDelegate:]
  -[SASHeater preheatTimer]
  -[SASHeater delegate]
  -[SASHeater setPreheatTimeInterval:]
  -[SASHeater _suggestPreheat]
  -[SASHeater _preparationStartTime]
  -[SASHeater .cxx_destruct]
  -[SASHeater _convertVirtualAudioSubTypeToString:]
  -[SASHeater preheatTimeInterval]
  -[SASHeater updatePredictedRouteIsZLL]
  -[SASHeater cancelPreparationForButtonIdentifier:]
  -[SASHeater prepareForUseAfterTimeInterval:]
  -[SASHeater _cancelPreparation]
  -[SASHeater setPreheatTimer:]
  -[SASHeater _setPreparationStartTime:]
  -[SASHeater predictedRecordRouteIsZLL]
  -[SASHeater setPredictedRecordRouteIsZLL:]


SASSiriPocketStateManager : NSObject <CMPocketStateDelegate>
 @property  CMPocketStateManager *pocketStateManager
 @property  long long currentPocketState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SASSiriPocketStateManager new]
  +[SASSiriPocketStateManager sharedManager]

  // instance methods
  -[SASSiriPocketStateManager pocketStateShouldPreventVoiceTrigger]
  -[SASSiriPocketStateManager .cxx_destruct]
  -[SASSiriPocketStateManager pocketStateManager:didUpdateState:]
  -[SASSiriPocketStateManager _init]
  -[SASSiriPocketStateManager init]
  -[SASSiriPocketStateManager _pocketStateManager]
  -[SASSiriPocketStateManager queryForPocketStateWithCompletion:]
  -[SASSiriPocketStateManager pocketStateShouldPreventVoiceTriggerForActivationRequest:]
  -[SASSiriPocketStateManager _updateForPocketState:]
  -[SASSiriPocketStateManager _stringForPocketState:]
  -[SASSiriPocketStateManager _setPocketStateManager:]
  -[SASSiriPocketStateManager _currentPocketState]
  -[SASSiriPocketStateManager _setCurrentPocketState:]


SiriPunchoutRequest : NSObject <NSCopying>
 @property  NSString *bundleIdentifier
 @property  NSURL *url
 @property  long long punchoutStyle

  // instance methods
  -[SiriPunchoutRequest setUrl:]
  -[SiriPunchoutRequest .cxx_destruct]
  -[SiriPunchoutRequest setBundleIdentifier:]
  -[SiriPunchoutRequest bundleIdentifier]
  -[SiriPunchoutRequest copyWithZone:]
  -[SiriPunchoutRequest url]
  -[SiriPunchoutRequest init]
  -[SiriPunchoutRequest punchoutStyle]
  -[SiriPunchoutRequest setPunchoutStyle:]


SASAnalytics : NSObject
 @property  BOOL shouldLogAnalyticsEvents
 @property  NSMutableArray *pendingAnalyticsEventQueue

  // class methods
  +[SASAnalytics new]
  +[SASAnalytics analytics]

  // instance methods
  -[SASAnalytics .cxx_destruct]
  -[SASAnalytics _init]
  -[SASAnalytics init]
  -[SASAnalytics enqueueCurrentAnalyticsEventWithType:context:]
  -[SASAnalytics _enqueueAnalyticsEvent:]
  -[SASAnalytics flushPendingAnalyticsEventQueue]
  -[SASAnalytics shouldLogAnalyticsEvents]
  -[SASAnalytics setShouldLogAnalyticsEvents:]
  -[SASAnalytics pendingAnalyticsEventQueue]
  -[SASAnalytics setPendingAnalyticsEventQueue:]


SASMyriadController : NSObject <SASLockStateMonitorDelegate, AFMyriadDelegate>
 @property  BOOL canceledByMyriad
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SASMyriadController activateForInTaskRequest:isVisible:]
  -[SASMyriadController shouldContinue:]
  -[SASMyriadController _updateRaiseToWakeTimeForTransition:]
  -[SASMyriadController dealloc]
  -[SASMyriadController .cxx_destruct]
  -[SASMyriadController initWithDelegate:]
  -[SASMyriadController activateForRequest:withTimeout:visible:]
  -[SASMyriadController didChangeLockState:toState:]
  -[SASMyriadController canceledByMyriad]
  -[SASMyriadController setCanceledByMyriad:]
  -[SASMyriadController activateForRequest:visible:]
  -[SASMyriadController shouldAbortAnotherDeviceBetter:]
  -[SASMyriadController _configureMotionActivityManager]


SiriContextOverride : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *currentSpokenLanguageCode
 @property  NSNumber *unlockedSinceBoot
 @property  NSNumber *deviceIsBlocked
 @property  NSNumber *deviceIsPasscodeLocked
 @property  NSNumber *pocketStateShouldPreventVoiceTrigger
 @property  NSNumber *pad
 @property  NSNumber *smartCoverClosed
 @property  NSNumber *accessibilityShortcutEnabled
 @property  NSNumber *carDNDActive
 @property  NSNumber *connectedToCarPlay
 @property  NSNumber *connectedToTrustedCarPlay
 @property  NSNumber *siriIsEnabled
 @property  NSNumber *siriIsRestricted
 @property  NSNumber *siriIsSupported

  // class methods
  +[SiriContextOverride supportsSecureCoding]

  // instance methods
  -[SiriContextOverride smartCoverClosed]
  -[SiriContextOverride deviceIsBlocked]
  -[SiriContextOverride unlockedSinceBoot]
  -[SiriContextOverride pocketStateShouldPreventVoiceTrigger]
  -[SiriContextOverride encodeWithCoder:]
  -[SiriContextOverride accessibilityShortcutEnabled]
  -[SiriContextOverride .cxx_destruct]
  -[SiriContextOverride carDNDActive]
  -[SiriContextOverride currentSpokenLanguageCode]
  -[SiriContextOverride deviceIsPasscodeLocked]
  -[SiriContextOverride setSmartCoverClosed:]
  -[SiriContextOverride siriIsEnabled]
  -[SiriContextOverride copyWithZone:]
  -[SiriContextOverride setUnlockedSinceBoot:]
  -[SiriContextOverride siriIsSupported]
  -[SiriContextOverride siriIsRestricted]
  -[SiriContextOverride setAccessibilityShortcutEnabled:]
  -[SiriContextOverride initWithCoder:]
  -[SiriContextOverride setCarDNDActive:]
  -[SiriContextOverride overrideCurrentSpokenLanguageCode:]
  -[SiriContextOverride overrideHasUnlockedSinceBoot:]
  -[SiriContextOverride overrideDeviceIsBlocked:]
  -[SiriContextOverride overrideDeviceIsPasscodeLocked:]
  -[SiriContextOverride overridePocketStateShouldPreventVoiceTrigger:]
  -[SiriContextOverride overrideIsPad:]
  -[SiriContextOverride overrideSmartCoverClosed:]
  -[SiriContextOverride overrideAccessibilityShortcutEnabled:]
  -[SiriContextOverride overrideCarDNDActive:]
  -[SiriContextOverride overrideConnectedToTrustedCarPlay:]
  -[SiriContextOverride overrideConnectedToCarPlay:]
  -[SiriContextOverride overrideSiriIsEnabled:]
  -[SiriContextOverride overrideSiriIsRestricted:]
  -[SiriContextOverride overrideSiriIsSupported:]
  -[SiriContextOverride currentSpokenLanguageCodeForSystemState:]
  -[SiriContextOverride hasUnlockedSinceBootForSystemState:]
  -[SiriContextOverride deviceIsBlockedForSystemState:]
  -[SiriContextOverride deviceIsPasscodeLockedForSystemState:]
  -[SiriContextOverride pocketStateShouldPreventVoiceTriggerForSystemState:]
  -[SiriContextOverride isPadForSystemState:]
  -[SiriContextOverride smartCoverClosedForSystemState:]
  -[SiriContextOverride accessibilityShortcutEnabledForSystemState:]
  -[SiriContextOverride carDNDActiveForSystemState:]
  -[SiriContextOverride isConnectedToCarPlayForSystemState:]
  -[SiriContextOverride isConnectedToTrustedCarPlayForSystemState:]
  -[SiriContextOverride siriIsEnabledForSystemState:]
  -[SiriContextOverride siriIsRestrictedForSystemState:]
  -[SiriContextOverride siriIsSupportedForSystemState:]
  -[SiriContextOverride setCurrentSpokenLanguageCode:]
  -[SiriContextOverride setDeviceIsBlocked:]
  -[SiriContextOverride setDeviceIsPasscodeLocked:]
  -[SiriContextOverride setPocketStateShouldPreventVoiceTrigger:]
  -[SiriContextOverride pad]
  -[SiriContextOverride setPad:]
  -[SiriContextOverride connectedToCarPlay]
  -[SiriContextOverride setConnectedToCarPlay:]
  -[SiriContextOverride connectedToTrustedCarPlay]
  -[SiriContextOverride setConnectedToTrustedCarPlay:]
  -[SiriContextOverride setSiriIsEnabled:]
  -[SiriContextOverride setSiriIsRestricted:]
  -[SiriContextOverride setSiriIsSupported:]


SASPresentationServer : NSObject
 @property  BSServiceConnectionEndpointInjector *workspaceServiceInjector
 @property  BSServiceConnection<BSServiceConnectionHost> *connection
 @property  BOOL invalidated
 @property  NSMutableArray *waitForConnectBlocks
 @property  <SASPresentationServerDelegate> *weak_delegate
 @property  long long presentationIdentifier

  // class methods
  +[SASPresentationServer interface]
  +[SASPresentationServer serviceQuality]
  +[SASPresentationServer serverForConnection:]
  +[SASPresentationServer _unregisterConnection:]

  // instance methods
  -[SASPresentationServer bulletinsOnLockScreen]
  -[SASPresentationServer _setConnection:]
  -[SASPresentationServer speechRequestCancelledFromSiriOrb]
  -[SASPresentationServer unregisterPresentationIdentifier:]
  -[SASPresentationServer allBulletins]
  -[SASPresentationServer bulletinForIdentifier:]
  -[SASPresentationServer setInvalidated:]
  -[SASPresentationServer didUpdatePresentationState:]
  -[SASPresentationServer setPresentationIdentifier:]
  -[SASPresentationServer setWaitForConnectBlocks:]
  -[SASPresentationServer didDismiss]
  -[SASPresentationServer workspaceServiceInjector]
  -[SASPresentationServer invalidated]
  -[SASPresentationServer speechRequestStartedFromSiriOrb]
  -[SASPresentationServer weak_delegate]
  -[SASPresentationServer dealloc]
  -[SASPresentationServer presentationIdentifier]
  -[SASPresentationServer willDismiss]
  -[SASPresentationServer resetSiriToActive]
  -[SASPresentationServer .cxx_destruct]
  -[SASPresentationServer connection]
  -[SASPresentationServer setWeak_delegate:]
  -[SASPresentationServer pong]
  -[SASPresentationServer didPresentSiri]
  -[SASPresentationServer failedToPresentSiriWithError:]
  -[SASPresentationServer waitForConnectBlocks]
  -[SASPresentationServer registerPresentationIdentifier:]
  -[SASPresentationServer init]
  -[SASPresentationServer setWorkspaceServiceInjector:]
  -[SASPresentationServer setConnection:]


SiriTVActivationSource : SiriLongPressButtonSource
 @property  double longPressInterval
 @property  SiriLongPressButtonContext *context
 @property  NSString *deviceIdentifier
 @property  unsigned long remoteType

  // class methods
  +[SiriTVActivationSource activationSourceForIdentifier:]

  // instance methods
  -[SiriTVActivationSource longPressInterval]
  -[SiriTVActivationSource setDeviceIdentifier:]
  -[SiriTVActivationSource deviceIdentifier]
  -[SiriTVActivationSource setRemoteType:]
  -[SiriTVActivationSource .cxx_destruct]
  -[SiriTVActivationSource setPTTEligible:]
  -[SiriTVActivationSource _deviceIdentifier]
  -[SiriTVActivationSource setContext:]
  -[SiriTVActivationSource setLongPressInterval:]
  -[SiriTVActivationSource context]
  -[SiriTVActivationSource setListening:]
  -[SiriTVActivationSource remoteType]


SASBoardServicesConfiguration : NSObject
 @property  NSString *machServiceIdentifier
 @property  NSString *presentationDomain
 @property  NSString *presentationIdentifier
 @property  NSString *signalDomain
 @property  NSString *signalIdentifier

  // class methods
  +[SASBoardServicesConfiguration new]
  +[SASBoardServicesConfiguration configuration]

  // instance methods
  -[SASBoardServicesConfiguration setPresentationIdentifier:]
  -[SASBoardServicesConfiguration presentationIdentifier]
  -[SASBoardServicesConfiguration .cxx_destruct]
  -[SASBoardServicesConfiguration _init]
  -[SASBoardServicesConfiguration init]
  -[SASBoardServicesConfiguration domainForService:]
  -[SASBoardServicesConfiguration identifierForService:]
  -[SASBoardServicesConfiguration machServiceIdentifier]
  -[SASBoardServicesConfiguration setMachServiceIdentifier:]
  -[SASBoardServicesConfiguration presentationDomain]
  -[SASBoardServicesConfiguration setPresentationDomain:]
  -[SASBoardServicesConfiguration signalDomain]
  -[SASBoardServicesConfiguration setSignalDomain:]
  -[SASBoardServicesConfiguration signalIdentifier]
  -[SASBoardServicesConfiguration setSignalIdentifier:]


SiriVoiceTriggerContext : SiriContinuityContext
  // instance methods


SASTipKitSignalEmitter : NSObject
  // class methods
  +[SASTipKitSignalEmitter checkAndEmitSignalsForRequestOptions:]
  +[SASTipKitSignalEmitter _checkAndEmitSignalsWithSource:forRequestOptions:]


SiriActivationService : NSObject <SASRequestOptionsBuilderDataSource, SASHeaterDelegate, SASMyriadControllerDelegate, SASLockStateMonitorDelegate, SASBulletinManagerDelegate, SASStateChangeListener, SASPresentationManagerDelegate>
 @property  SASSystemState *systemState
 @property  AFPreferences *afPreferences
 @property  SASLockStateMonitor *lockStateMonitor
 @property  SASUnderstandingOnDeviceAssetsState *uodAssetsState
 @property  BOOL xcTestingActive
 @property  NSMutableDictionary *sources
 @property  NSMutableDictionary *activationAssertions
 @property  NSMutableDictionary *buttonEventListeners
 @property  SASHeater *heater
 @property  AFSiriTether *siriTether
 @property  BOOL siriTetherIsAttached
 @property  double activationTimestamp
 @property  BOOL voiceTriggerNotifyTokenIsValid
 @property  SASBulletinManager *bulletinManager
 @property  SASRemoteRequestManager *remoteRequestManager
 @property  SASTestingInputController *testingInputController
 @property  NSMutableDictionary *avExternalButtonEvents
 @property  BOOL buttonDownHasOccurredSinceActivation
 @property  BOOL canActivateFromDirectActionSource
 @property  BOOL pocketStateFetchingInProgressForHeadsetActivation
 @property  SASBluetoothEndpointUtility *bluetoothEndpointUtil
 @property  SASPresentationManager *presentationManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SiriActivationService new]
  +[SiriActivationService service]

  // instance methods
  -[SiriActivationService bulletinsOnLockScreen]
  -[SiriActivationService activationRequestFromSpotlightWithContext:]
  -[SiriActivationService setLockStateMonitor:]
  -[SiriActivationService setSystemState:]
  -[SiriActivationService activationRequestFromTestingWithContext:]
  -[SiriActivationService lockStateMonitor]
  -[SiriActivationService unregisterButtonEventListenerWithIdentifier:]
  -[SiriActivationService activationRequestFromBreadcrumb]
  -[SiriActivationService prewarmFromButtonIdentifier:longPressInterval:]
  -[SiriActivationService activationRequestFromDirectActionEventWithContext:completion:]
  -[SiriActivationService buttonLongPressFromButtonIdentifier:context:]
  -[SiriActivationService cancelPrewarmFromButtonIdentifier:]
  -[SiriActivationService buttonTapFromButtonIdentifier:]
  -[SiriActivationService setActivationAssertions:]
  -[SiriActivationService activationAssertions]
  -[SiriActivationService presentationManager]
  -[SiriActivationService allBulletins]
  -[SiriActivationService bulletinForIdentifier:]
  -[SiriActivationService _updateCanActivateFromDirectActionSource]
  -[SiriActivationService shouldContinue:]
  -[SiriActivationService unregisterActivationAssertionWithIdentifier:]
  -[SiriActivationService activationRequestFromContinuityWithContext:]
  -[SiriActivationService activationRequestFromSimpleActivation:]
  -[SiriActivationService _B188ActivationEvent:context:options:]
  -[SiriActivationService updatePredicatedRecordRoute]
  -[SiriActivationService _pocketStateFetchingInProgressForHeadsetActivation]
  -[SiriActivationService setRemoteRequestManager:]
  -[SiriActivationService _buttonIsTVMicrophoneButton:]
  -[SiriActivationService presentationsAreIdleAndQuiet]
  -[SiriActivationService buttonEventListeners]
  -[SiriActivationService didChangeLockState:]
  -[SiriActivationService setPresentationManager:]
  -[SiriActivationService unregisterActivationSourceIdentifier:]
  -[SiriActivationService requestOptionsBuilder:isAcousticIdAllowedWithActiviation:]
  -[SiriActivationService setXcTestingActive:]
  -[SiriActivationService setAfPreferences:]
  -[SiriActivationService _defrost]
  -[SiriActivationService buttonDownFromButtonIdentifier:timestamp:context:]
  -[SiriActivationService dismissSiriWithOptions:]
  -[SiriActivationService activationTimestamp]
  -[SiriActivationService _isVoiceActivationMaskNecessaryWithRequestOptions:]
  -[SiriActivationService _unregisterForVoiceTrigger]
  -[SiriActivationService siriPresentationDismissedWithIdentifier:]
  -[SiriActivationService activationRequestFromTestRunnerWithContext:]
  -[SiriActivationService _shouldHandlePocketStateFetchForRequestOptions:]
  -[SiriActivationService remoteRequestManager]
  -[SiriActivationService setVoiceTriggerNotifyTokenIsValid:]
  -[SiriActivationService isConnectedTo188]
  -[SiriActivationService dealloc]
  -[SiriActivationService shouldAbort:]
  -[SiriActivationService sources]
  -[SiriActivationService _attachToTether]
  -[SiriActivationService setSiriTether:]
  -[SiriActivationService _recordTimeIfNeededForButtonIdentifier:buttonDownTimestamp:]
  -[SiriActivationService presentationManager:didEncounterError:]
  -[SiriActivationService .cxx_destruct]
  -[SiriActivationService setButtonDownHasOccurredSinceActivation:]
  -[SiriActivationService requestOptionsBuilder:currentLockStateForActivation:]
  -[SiriActivationService requestOptionsBuilder:isRequestInitialWithActiviation:]
  -[SiriActivationService speechRequestStateDidChange:]
  -[SiriActivationService _cancelActivationPreparationForSetup]
  -[SiriActivationService _handlePocketStateFetchForScreenWakeForPresentationIdentifier:requestOptions:presentationOptions:]
  -[SiriActivationService _shouldRejectActivationWithButtonIdentifier:activationAssertions:]
  -[SiriActivationService activationRequestFromVoiceTrigger]
  -[SiriActivationService registerButtonEventListenerServer:identifier:]
  -[SiriActivationService setAvExternalButtonEvents:]
  -[SiriActivationService handleActivationRequest:]
  -[SiriActivationService requestOptionsBuilder:isPredictedRecordRouteIsZLLWithActiviation:]
  -[SiriActivationService siriPresentationDidUpdateState:]
  -[SiriActivationService heaterSuggestsPreheating:]
  -[SiriActivationService afPreferences]
  -[SiriActivationService _notifyListenersOfButtonUpWithButtonIdentifier:atTimestamp:]
  -[SiriActivationService _updateRequestOptionsWithTestingContextFromActivationRequest:requestOptions:]
  -[SiriActivationService bulletinManager]
  -[SiriActivationService _isInitialRequest]
  -[SiriActivationService _notifyListenersOfButtonDownWithButtonIdentifier:atTimestamp:]
  -[SiriActivationService presentationManager:didChangeShouldRejectNewActivationsTo:]
  -[SiriActivationService _shouldRejectNewActivations:]
  -[SiriActivationService activationRequestFromVoiceTriggerWithContext:]
  -[SiriActivationService _handleDesignModeRequest]
  -[SiriActivationService requestOptionsBuilder:uiPresentationIdentifierWithActivation:activationPresentation:]
  -[SiriActivationService registerSiriPresentation:withIdentifier:]
  -[SiriActivationService siriPresentationWillDismissWithIdentifier:]
  -[SiriActivationService buttonUpFromButtonIdentifier:deviceIdentifier:timestamp:context:]
  -[SiriActivationService bulletinManagerDidChangeBulletins:]
  -[SiriActivationService setHeater:]
  -[SiriActivationService setBulletinManager:]
  -[SiriActivationService buttonDownHasOccurredSinceActivation]
  -[SiriActivationService _notifySourcesOfActiveChange:]
  -[SiriActivationService testingInputController]
  -[SiriActivationService _notifyListenersOfButtonLongPressWithButtonIdentifier:atTimestamp:]
  -[SiriActivationService setSources:]
  -[SiriActivationService bluetoothEndpointUtil]
  -[SiriActivationService _registerForVoiceTrigger]
  -[SiriActivationService setActivationTimestamp:]
  -[SiriActivationService setTestingInputController:]
  -[SiriActivationService _requestState]
  -[SiriActivationService siriPresentationFailureWithIdentifier:error:]
  -[SiriActivationService _notifySourcesOfCanActivateFromDirectActionSourceChange:]
  -[SiriActivationService voiceTriggerNotifyTokenIsValid]
  -[SiriActivationService systemState]
  -[SiriActivationService _cancelPendingActivationEventWithReason:]
  -[SiriActivationService avExternalButtonEvents]
  -[SiriActivationService setCanActivateFromDirectActionSource:]
  -[SiriActivationService xcTestingActive]
  -[SiriActivationService setSiriTetherIsAttached:]
  -[SiriActivationService heater]
  -[SiriActivationService pongWithPresentationIdentifier:]
  -[SiriActivationService _siriIsEnabled]
  -[SiriActivationService requestOptionsBuilder:shouldRequestUseAutomaticEndpointingWithActiviation:]
  -[SiriActivationService heater:cancelledPreparationWithButtonIdentifier:duration:targetDuration:]
  -[SiriActivationService unregisterSiriPresentationIdentifier:]
  -[SiriActivationService activationRequestFromButtonIdentifier:context:]
  -[SiriActivationService _logActivationToPowerLogWithReason:]
  -[SiriActivationService uodAssetsState]
  -[SiriActivationService requestOptionsBuilder:optionsForOverriding:withActiviation:]
  -[SiriActivationService handleActivationRequest:systemState:]
  -[SiriActivationService activationRequestFromRemotePresentationBringUpWithContext:]
  -[SiriActivationService registerActivationAssertion:withIdentifier:]
  -[SiriActivationService siriPresentationDisplayedWithIdentifier:]
  -[SiriActivationService _preheatPresentation]
  -[SiriActivationService _activatePresentationWithIdentifier:requestOptions:analyticsContext:]
  -[SiriActivationService setBluetoothEndpointUtil:]
  -[SiriActivationService setButtonEventListeners:]
  -[SiriActivationService deactivationRequestFromButtonIdentifier:context:options:]
  -[SiriActivationService canActivateFromDirectActionSource]
  -[SiriActivationService _dismissSiri:]
  -[SiriActivationService _init]
  -[SiriActivationService registerActivationSource:withIdentifier:]
  -[SiriActivationService siriTether]
  -[SiriActivationService _buttonIsAVExternalButton:]
  -[SiriActivationService _handleTapSynthesisIfNeededForButtonIdentifier:buttonUpTimestamp:]
  -[SiriActivationService siriTetherIsAttached]
  -[SiriActivationService init]
  -[SiriActivationService activationRequestFromBluetoothKeyboardActivation:]
  -[SiriActivationService callStateChangedToIsActive:isOutgoing:]
  -[SiriActivationService setUodAssetsState:]
  -[SiriActivationService _setPocketStateFetchingInProgressForHeadsetActivation:]


SiriSpotlightSource : SiriActivationSource
  // instance methods
  -[SiriSpotlightSource configureConnection]
  -[SiriSpotlightSource init]
  -[SiriSpotlightSource activateWithContext:]


SiriDirectActionContext : SiriContext
 @property  NSDictionary *payload
 @property  BBBulletin *bulletin
 @property  UNNotification *notification

  // class methods
  +[SiriDirectActionContext supportsSecureCoding]
  +[SiriDirectActionContext messageComposeNewThreadDirectActionWithAppBundleId:fullName:phoneOrEmailAddress:]
  +[SiriDirectActionContext messageReadDirectActionWithAppBundleId:conversationGUID:]
  +[SiriDirectActionContext messageReplyDirectActionWithAppBundleId:conversationGUID:]
  +[SiriDirectActionContext messageAmbiguousDirectActionWithAppBundleId:]
  +[SiriDirectActionContext messageComposeDirectActionWithAppBundleId:]
  +[SiriDirectActionContext mapSearchDirectActionWithAppBundleId:]
  +[SiriDirectActionContext mapShareEtaDirectActionWithAppBundleId:]
  +[SiriDirectActionContext musicSearchDirectActionWithAppBundleId:]
  +[SiriDirectActionContext phoneAmbiguousDirectActionWithAppBundleId:]
  +[SiriDirectActionContext phoneCallDirectActionWithAppBundleId:]
  +[SiriDirectActionContext appLaunchDirectActionWithAppBundleId:]

  // instance methods
  -[SiriDirectActionContext bulletin]
  -[SiriDirectActionContext encodeWithCoder:]
  -[SiriDirectActionContext notification]
  -[SiriDirectActionContext payload]
  -[SiriDirectActionContext initWithPayload:]
  -[SiriDirectActionContext .cxx_destruct]
  -[SiriDirectActionContext bundleId]
  -[SiriDirectActionContext initWithCoder:]
  -[SiriDirectActionContext initWithUNNotification:]
  -[SiriDirectActionContext directActionEvent]
  -[SiriDirectActionContext initWithBBBulletin:]
  -[SiriDirectActionContext _intentIdentifiersFromBulletin:notification:]
  -[SiriDirectActionContext _directActionEventFromContentTypesOfBulletin:notification:]
  -[SiriDirectActionContext _directActionEventFromAppIdsAndIntentIdentifiersOfBulletin:notification:]
  -[SiriDirectActionContext _initWithDirectActionEvent:appBundleId:conversationGUID:fullName:phoneOrEmailAddress:]


SASPresentationManager : NSObject
 @property  NSMutableDictionary *presentations

  // class methods
  +[SASPresentationManager _canTransitionFromState:toState:]
  +[SASPresentationManager _canTransitionFromState:toState:presentationIdentifier:]
  +[SASPresentationManager _canTransitionToOffFromState:]
  +[SASPresentationManager _canTransitionToHeatedFromState:]
  +[SASPresentationManager _canTransitionToStartingFromState:]
  +[SASPresentationManager _canTransitionToStoppingFromState:]
  +[SASPresentationManager _canTransitionToActiveFromState:presentationIdentifier:]
  +[SASPresentationManager _shouldKeepPingingForRequestState:]

  // instance methods
  -[SASPresentationManager startingAndActiveAndStoppingPresentations_presentationDismissalRequestedWithOptions:]
  -[SASPresentationManager startingPresentations_cancelPendingActivationWithReason:]
  -[SASPresentationManager _forceAllPresentationsOff]
  -[SASPresentationManager _notifyDelegateOfShouldRejectNewActivationsChangeIfNecessary]
  -[SASPresentationManager _presentationsLock_nextPresentationToActivate]
  -[SASPresentationManager unregisterSiriPresentationWithIdentifier:]
  -[SASPresentationManager activePresentations_deviceWonMyriadElection]
  -[SASPresentationManager requestState]
  -[SASPresentationManager presentationWithPresentationIdentifierBecameOff:]
  -[SASPresentationManager _sendBlockToStartingPresentations:]
  -[SASPresentationManager _teardownPingTimerForPresentationIdentifier:]
  -[SASPresentationManager presentationWithPresentationIdentifierWakeScreenAfterActivation:reason:]
  -[SASPresentationManager .cxx_destruct]
  -[SASPresentationManager _sendBlockToStoppingPresentations:]
  -[SASPresentationManager _presentationsLock_cancelAllPreheatedPresentations]
  -[SASPresentationManager _presentationsLock_broadcastPresentationStateForIdentifier:presentationState:presentationIdentifiersToInform:]
  -[SASPresentationManager presentationWithPresentationIdentifierBecameActive:]
  -[SASPresentationManager activePresentationsAreIdleAndQuiet]
  -[SASPresentationManager _setupPingTimerForPresentationIdentifier:]
  -[SASPresentationManager sendButtonEventCompletionToPresentations:forButtonEventType:]
  -[SASPresentationManager presentationWithPresentationIdentifier:activationDeterminedShouldDeferWake:]
  -[SASPresentationManager presentations]
  -[SASPresentationManager presentationDidUpdateState:]
  -[SASPresentationManager registerSiriPresentation:withIdentifier:]
  -[SASPresentationManager cancelAllPreheatedPresentations]
  -[SASPresentationManager activePresentations_bulletinManagerDidChangeBulletins]
  -[SASPresentationManager activePresentations_handleRequestWithOptions:]
  -[SASPresentationManager pongWithPresentationIdentifier:]
  -[SASPresentationManager presentationWithPresentationIdentifierBeganStopping:]
  -[SASPresentationManager nextPresentationToActivate]
  -[SASPresentationManager activeAndStartingPresentations_updateCurrentLockState:]
  -[SASPresentationManager setPresentationManagerDelegate:]
  -[SASPresentationManager presentationRequestedWithPresentationIdentifier:presentationOptions:requestOptions:]
  -[SASPresentationManager _waitForPongFromPresentationWithPresentationIdentifier:]
  -[SASPresentationManager _transitionPresentationWithPresentationIdentifier:toState:]
  -[SASPresentationManager setPresentations:]
  -[SASPresentationManager presentationWithPresentationIdentifierBeganStarting:]
  -[SASPresentationManager _sendBlock:toPresentationWithPresentationIdentifier:]
  -[SASPresentationManager init]
  -[SASPresentationManager _sendBlockToActivePresentations:]
  -[SASPresentationManager _shouldRejectNewActivations]
  -[SASPresentationManager preheatNextPresentationToActivate]


SiriDismissalOptions : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long deactivationOptions
 @property  BOOL animated
 @property  long long reason
 @property  unsigned long dismissalReason
 @property  BOOL shouldTurnScreenOff

  // class methods
  +[SiriDismissalOptions supportsSecureCoding]

  // instance methods
  -[SiriDismissalOptions animated]
  -[SiriDismissalOptions encodeWithCoder:]
  -[SiriDismissalOptions reason]
  -[SiriDismissalOptions dismissalReason]
  -[SiriDismissalOptions copyWithZone:]
  -[SiriDismissalOptions initWithCoder:]
  -[SiriDismissalOptions initWithDeactivationOptions:animated:dismissalReason:]
  -[SiriDismissalOptions shouldTurnScreenOff]
  -[SiriDismissalOptions initWithDeactivationOptions:]
  -[SiriDismissalOptions initWithDeactivationOptions:animated:]
  -[SiriDismissalOptions initWithDeactivationOptions:animated:requestCancellationReason:]
  -[SiriDismissalOptions initWithDeactivationOptions:animated:requestCancellationReason:dismissalReason:]
  -[SiriDismissalOptions initWithDeactivationOptions:animated:requestCancellationReason:dismissalReason:shouldTurnScreenOff:]
  -[SiriDismissalOptions deactivationOptions]


SASPresentationDecision : NSObject
  // class methods
  +[SASPresentationDecision activationPresentationForPresentationIdentifiers:]


SiriRemotePresentationBringUpContext : SiriContext

SiriSimpleActivationSource : SiriActivationSource
  // instance methods
  -[SiriSimpleActivationSource configureConnection]
  -[SiriSimpleActivationSource init]
  -[SiriSimpleActivationSource activateFromSource:]


SiriTestingSource : SiriActivationSource
  // instance methods
  -[SiriTestingSource configureConnection]
  -[SiriTestingSource init]
  -[SiriTestingSource activateWithContext:]


SiriTestingContext : SiriContext
 @property  NSDictionary *testingContext
 @property  AFRequestInfo *testingRequestInfo

  // class methods
  +[SiriTestingContext supportsSecureCoding]

  // instance methods
  -[SiriTestingContext encodeWithCoder:]
  -[SiriTestingContext .cxx_destruct]
  -[SiriTestingContext initWithCoder:]
  -[SiriTestingContext testingContext]
  -[SiriTestingContext initWithPPTContext:]
  -[SiriTestingContext initWithPPTContext:siriContextOverride:]
  -[SiriTestingContext initWithRecognitionStrings:]
  -[SiriTestingContext initWithRecognitionStrings:siriContextOverride:]
  -[SiriTestingContext initWithAudioInput:]
  -[SiriTestingContext initWithAudioInput:siriContextOverride:]
  -[SiriTestingContext initWithRequestInfo:recognitionStrings:]
  -[SiriTestingContext initWithRequestInfo:recognitionStrings:siriContextOverride:]
  -[SiriTestingContext containsRecognitionStrings]
  -[SiriTestingContext containsAudioInput]
  -[SiriTestingContext testingRequestInfo]


SiriLongPressButtonSource : SiriActivationSource <SiriLongPressButtonConfigurationUpdateDelegate, SiriButtonSource>
 @property  long long buttonIdentifier
 @property  NSMutableArray *lock_activityAssertions
 @property  SiriLongPressButtonContext *context
 @property  @? currentTimeGenerator
 @property  SiriLongPressButtonConfiguration *configuration
 @property  SiriLongPressButtonConfigurationUpdateManager *updateManager
 @property  <SiriLongPressButtonSourceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SiriLongPressButtonSource new]
  +[SiriLongPressButtonSource longPressButtonForIdentifier:]

  // instance methods
  -[SiriLongPressButtonSource currentTimeGenerator]
  -[SiriLongPressButtonSource setUpdateManager:]
  -[SiriLongPressButtonSource _sourceSupportsAutomaticConfigurationUpdates]
  -[SiriLongPressButtonSource speechInteractionActivityWithTimestamp:]
  -[SiriLongPressButtonSource updateManager]
  -[SiriLongPressButtonSource longPressInterval]
  -[SiriLongPressButtonSource setCurrentTimeGenerator:]
  -[SiriLongPressButtonSource prepareForActivation]
  -[SiriLongPressButtonSource setConfiguration:]
  -[SiriLongPressButtonSource prepareForActivationWithTimestamp:]
  -[SiriLongPressButtonSource configurationUpdateManager:configurationDidUpdateForLongPressSource:]
  -[SiriLongPressButtonSource didRecognizeButtonSinglePressUp]
  -[SiriLongPressButtonSource setDelegate:]
  -[SiriLongPressButtonSource delegate]
  -[SiriLongPressButtonSource configuration]
  -[SiriLongPressButtonSource requestConfigurationUpdatesBasedOnDeviceSettings]
  -[SiriLongPressButtonSource .cxx_destruct]
  -[SiriLongPressButtonSource setLock_activityAssertions:]
  -[SiriLongPressButtonSource didRecognizeLongPress]
  -[SiriLongPressButtonSource _shouldReplaceSpeechInteractionActivityTimestampWithPrewarmTimestamp]
  -[SiriLongPressButtonSource _initWithButtonIdentifier:]
  -[SiriLongPressButtonSource _timestampForSpeechInteractionActivityWithTimestamp:]
  -[SiriLongPressButtonSource _deviceIdentifier]
  -[SiriLongPressButtonSource configureConnection]
  -[SiriLongPressButtonSource setContext:]
  -[SiriLongPressButtonSource stopConfigurationUpdates]
  -[SiriLongPressButtonSource lock_activityAssertions]
  -[SiriLongPressButtonSource context]
  -[SiriLongPressButtonSource init]
  -[SiriLongPressButtonSource setButtonIdentifier:]
  -[SiriLongPressButtonSource longPressBehavior]
  -[SiriLongPressButtonSource buttonIdentifier]


SiriActivityAssertion : NSObject <SiriAssertion>
 @property  NSString *identifier
 @property  NSString *reason
 @property  NSString *reference
 @property  double timestamp
 @property  BOOL valid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SiriActivityAssertion reference]
  -[SiriActivityAssertion identifier]
  -[SiriActivityAssertion dealloc]
  -[SiriActivityAssertion isValid]
  -[SiriActivityAssertion .cxx_destruct]
  -[SiriActivityAssertion initWithIdentifier:reference:reason:timestamp:invalidationBlock:]
  -[SiriActivityAssertion reason]
  -[SiriActivityAssertion invalidatedAtTimestamp:]
  -[SiriActivityAssertion invalidate]
  -[SiriActivityAssertion timestamp]


SASActivationRequest : NSObject
 @property  long long requestSource
 @property  long long activationType
 @property  long long activationEvent
 @property  SiriContext *context
 @property  double activationTime
 @property  double buttonDownTime

  // class methods
  +[SASActivationRequest requestSourceForButtonIdentifier:]

  // instance methods
  -[SASActivationRequest eventSource]
  -[SASActivationRequest .cxx_destruct]
  -[SASActivationRequest setContext:]
  -[SASActivationRequest requestSource]
  -[SASActivationRequest buttonDownTimestamp]
  -[SASActivationRequest context]
  -[SASActivationRequest init]
  -[SASActivationRequest longPressBehavior]
  -[SASActivationRequest setRequestSource:]
  -[SASActivationRequest activationType]
  -[SASActivationRequest setActivationType:]
  -[SASActivationRequest activationTime]
  -[SASActivationRequest setActivationTime:]
  -[SASActivationRequest activationEvent]
  -[SASActivationRequest setActivationEvent:]
  -[SASActivationRequest initWithButtonIdentifier:context:]
  -[SASActivationRequest initWithDirectActionContext:]
  -[SASActivationRequest initWithContinuityContext:]
  -[SASActivationRequest initWithVoiceTriggerContext:]
  -[SASActivationRequest initWithRemotePresentationBringUpContext:]
  -[SASActivationRequest initWithBreadcrumbRequest]
  -[SASActivationRequest initWithSimpleActivation:]
  -[SASActivationRequest initWithBluetoothKeyboardShortcutActivation:]
  -[SASActivationRequest initWithSpotlightContext:]
  -[SASActivationRequest initWithVoiceTriggerRequest]
  -[SASActivationRequest initWithTestingContext:]
  -[SASActivationRequest computedActivationTime]
  -[SASActivationRequest isVoiceRequest]
  -[SASActivationRequest isRemoteDisplayVoiceRequest]
  -[SASActivationRequest isHoldToTalkSource]
  -[SASActivationRequest isButtonRequest]
  -[SASActivationRequest isDeviceButtonRequest]
  -[SASActivationRequest isTestingRequest]
  -[SASActivationRequest isEyesFreeRequestSource]
  -[SASActivationRequest isUIFreeRequestSource]
  -[SASActivationRequest isDirectActionRequest]
  -[SASActivationRequest isContinuityRequest]
  -[SASActivationRequest isBluetoothRequest]
  -[SASActivationRequest isSpotlightRequest]
  -[SASActivationRequest isRemotePresentationBringUpRequest]
  -[SASActivationRequest buttonDownTime]
  -[SASActivationRequest setButtonDownTime:]


SASButtonActvationRequest : SASActivationRequest
 @property  long long buttonIdentifier

  // instance methods
  -[SASButtonActvationRequest setButtonIdentifier:]
  -[SASButtonActvationRequest buttonIdentifier]
  -[SASButtonActvationRequest isVoiceRequest]
  -[SASButtonActvationRequest isHoldToTalkSource]
  -[SASButtonActvationRequest isButtonRequest]
  -[SASButtonActvationRequest isDeviceButtonRequest]
  -[SASButtonActvationRequest isTestingRequest]


SASBulletinManager : NSObject <BBObserverDelegate>
 @property  <SASBulletinManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SASBulletinManager bulletinsOnLockScreen]
  -[SASBulletinManager _setupObserver]
  -[SASBulletinManager allBulletins]
  -[SASBulletinManager bulletinForIdentifier:]
  -[SASBulletinManager _bulletinsDidChange]
  -[SASBulletinManager observer:removeBulletin:forFeed:]
  -[SASBulletinManager setDelegate:]
  -[SASBulletinManager delegate]
  -[SASBulletinManager dealloc]
  -[SASBulletinManager observer:purgeReferencesToBulletinID:]
  -[SASBulletinManager .cxx_destruct]
  -[SASBulletinManager addBulletinCompletionWithBulletin:forFeed:]
  -[SASBulletinManager observer:removeBulletin:]
  -[SASBulletinManager observer:modifyBulletin:]
  -[SASBulletinManager observer:addBulletin:forFeed:]
  -[SASBulletinManager observer:noteInvalidatedBulletinIDs:]
  -[SASBulletinManager modifyBulletinCompletionWithBulletin:]
  -[SASBulletinManager _displayNameForBulletin:]
  -[SASBulletinManager init]


SASPresentationState : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *presentationIdentifier

  // class methods
  +[SASPresentationState supportsSecureCoding]
  +[SASPresentationState newWithBuilder:]

  // instance methods
  -[SASPresentationState encodeWithCoder:]
  -[SASPresentationState initWithBuilder:]
  -[SASPresentationState mutatedCopyWithMutator:]
  -[SASPresentationState presentationIdentifier]
  -[SASPresentationState .cxx_destruct]
  -[SASPresentationState copyWithZone:]
  -[SASPresentationState isEqual:]
  -[SASPresentationState initWithCoder:]
  -[SASPresentationState initWithPresentationIdentifier:]


_SASPresentationStateMutation : NSObject <SASPresentationStateMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SASPresentationStateMutation setPresentationIdentifier:]
  -[_SASPresentationStateMutation .cxx_destruct]
  -[_SASPresentationStateMutation generate]
  -[_SASPresentationStateMutation init]
  -[_SASPresentationStateMutation initWithBaseModel:]


SiriActivationButtonEventListener : SiriActivationSource
 @property  NSMutableDictionary *listeners

  // class methods
  +[SiriActivationButtonEventListener listener]

  // instance methods
  -[SiriActivationButtonEventListener setListeners:]
  -[SiriActivationButtonEventListener listeners]
  -[SiriActivationButtonEventListener .cxx_destruct]
  -[SiriActivationButtonEventListener connection]
  -[SiriActivationButtonEventListener invalidatedAtTimestamp:]
  -[SiriActivationButtonEventListener invalidate]
  -[SiriActivationButtonEventListener _init]
  -[SiriActivationButtonEventListener buttonDownWithButtonIdentifier:forListenerIdentifier:atTimestamp:]
  -[SiriActivationButtonEventListener buttonUpWithButtonIdentifier:forListenerIdentifier:atTimestamp:]
  -[SiriActivationButtonEventListener buttonLongPressWithButtonIdentifier:forListenerIdentifier:atTimestamp:]
  -[SiriActivationButtonEventListener registerWithListener:identifier:]
  -[SiriActivationButtonEventListener configureConnectionForIdentifier:]
  -[SiriActivationButtonEventListener unregisterListenerWithIdentifier:]
  -[SiriActivationButtonEventListener _registerListenerWithIdentifier:]


SiriActivationAssertion : SiriActivationSource
 @property  unsigned long reason

  // instance methods
  -[SiriActivationAssertion _setConnection:]
  -[SiriActivationAssertion dealloc]
  -[SiriActivationAssertion initWithIdentifier:reason:]
  -[SiriActivationAssertion connection]
  -[SiriActivationAssertion reason]
  -[SiriActivationAssertion invalidatedAtTimestamp:]
  -[SiriActivationAssertion configureConnection]
  -[SiriActivationAssertion invalidate]
  -[SiriActivationAssertion setReason:]


SiriBluetoothKeyboardActivationSource : SiriSimpleActivationSource
  // instance methods
  -[SiriBluetoothKeyboardActivationSource _setConnection:]
  -[SiriBluetoothKeyboardActivationSource activateFromSource:]


SiriRemotePresentationBringUpSource : SiriActivationSource
  // instance methods
  -[SiriRemotePresentationBringUpSource configureConnection]
  -[SiriRemotePresentationBringUpSource init]
  -[SiriRemotePresentationBringUpSource activateWithContext:]


SASButtonIdentifierTransport : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier

  // class methods
  +[SASButtonIdentifierTransport supportsSecureCoding]

  // instance methods
  -[SASButtonIdentifierTransport identifier]
  -[SASButtonIdentifierTransport encodeWithCoder:]
  -[SASButtonIdentifierTransport .cxx_destruct]
  -[SASButtonIdentifierTransport initWithString:]
  -[SASButtonIdentifierTransport setIdentifier:]
  -[SASButtonIdentifierTransport copyWithZone:]
  -[SASButtonIdentifierTransport initWithSiriButtonIdentifier:]
  -[SASButtonIdentifierTransport _identifierMatchesSiriButtonIdentifier:]
  -[SASButtonIdentifierTransport siriButtonIdentifier]
  -[SASButtonIdentifierTransport initWithCoder:]


SASTimeIntervalTransport : NSObject <NSCopying, NSSecureCoding>
 @property  NSNumber *transport

  // class methods
  +[SASTimeIntervalTransport supportsSecureCoding]

  // instance methods
  -[SASTimeIntervalTransport transport]
  -[SASTimeIntervalTransport setTransport:]
  -[SASTimeIntervalTransport timeInterval]
  -[SASTimeIntervalTransport encodeWithCoder:]
  -[SASTimeIntervalTransport .cxx_destruct]
  -[SASTimeIntervalTransport initWithTimeInterval:]
  -[SASTimeIntervalTransport copyWithZone:]
  -[SASTimeIntervalTransport initWithCoder:]


SiriPresentationIdentifierTransport : NSObject <NSCopying, NSSecureCoding>
 @property  NSNumber *identifier

  // class methods
  +[SiriPresentationIdentifierTransport supportsSecureCoding]

  // instance methods
  -[SiriPresentationIdentifierTransport initWithSiriPresentationIdentifier:]
  -[SiriPresentationIdentifierTransport identifier]
  -[SiriPresentationIdentifierTransport encodeWithCoder:]
  -[SiriPresentationIdentifierTransport .cxx_destruct]
  -[SiriPresentationIdentifierTransport setIdentifier:]
  -[SiriPresentationIdentifierTransport copyWithZone:]
  -[SiriPresentationIdentifierTransport siriPresentationIdentifier]
  -[SiriPresentationIdentifierTransport initWithCoder:]


SiriPresentationActivationCancelReasonTransport : NSObject <NSCopying, NSSecureCoding>
 @property  NSNumber *transport

  // class methods
  +[SiriPresentationActivationCancelReasonTransport supportsSecureCoding]

  // instance methods
  -[SiriPresentationActivationCancelReasonTransport transport]
  -[SiriPresentationActivationCancelReasonTransport setTransport:]
  -[SiriPresentationActivationCancelReasonTransport encodeWithCoder:]
  -[SiriPresentationActivationCancelReasonTransport .cxx_destruct]
  -[SiriPresentationActivationCancelReasonTransport copyWithZone:]
  -[SiriPresentationActivationCancelReasonTransport initWithCoder:]
  -[SiriPresentationActivationCancelReasonTransport cancelReason]
  -[SiriPresentationActivationCancelReasonTransport initWithSiriPresentationActivationCancelReason:]


SASLockStateTransport : NSObject <NSCopying, NSSecureCoding>
 @property  NSNumber *transport

  // class methods
  +[SASLockStateTransport supportsSecureCoding]

  // instance methods
  -[SASLockStateTransport transport]
  -[SASLockStateTransport setTransport:]
  -[SASLockStateTransport encodeWithCoder:]
  -[SASLockStateTransport SASLockState]
  -[SASLockStateTransport .cxx_destruct]
  -[SASLockStateTransport initWithSASLockState:]
  -[SASLockStateTransport copyWithZone:]
  -[SASLockStateTransport initWithCoder:]


SASRemoteRequestManager : NSObject
 @property  AFRemoteRequestWatcher *remoteRequestWatcher
 @property  INAppIntentDeliverer *currentAppIntentDeliverer
 @property  unsigned long currentVoiceTriggerRestriction
 @property  unsigned long pendingVoiceTriggerRestrictionCount
 @property  BOOL hasPendingVoiceTriggerActivation
 @property  AFRequestInfo *pendingVoiceTriggerActivationInfo
 @property  CMPocketStateManager *pocketStateManager
 @property  long long currentPocketState

  // class methods
  +[SASRemoteRequestManager new]
  +[SASRemoteRequestManager manager]

  // instance methods
  -[SASRemoteRequestManager setPocketStateManager:]
  -[SASRemoteRequestManager pocketStateManager]
  -[SASRemoteRequestManager .cxx_destruct]
  -[SASRemoteRequestManager _init]
  -[SASRemoteRequestManager init]
  -[SASRemoteRequestManager currentPocketState]
  -[SASRemoteRequestManager _handleRemotePrewarmWithInfo:]
  -[SASRemoteRequestManager _handleNewRemoteRequestWithInfo:]
  -[SASRemoteRequestManager _handleRequestWatcherVoiceTriggerRequestWithInfo:]
  -[SASRemoteRequestManager _processPendingVoiceTriggerActivationsWithInfo:delay:]
  -[SASRemoteRequestManager _handleRemoteRequestDismissalWithReason:options:analyticsContext:]
  -[SASRemoteRequestManager _handlePendingVoiceTriggerActivationsWithInfo:]
  -[SASRemoteRequestManager _startFetchingPocketStateUpdates]
  -[SASRemoteRequestManager _requestWatcherVoiceActivationEnabled]
  -[SASRemoteRequestManager _dismissalReasonForDeactivationReason:]
  -[SASRemoteRequestManager remoteRequestWatcher]
  -[SASRemoteRequestManager setRemoteRequestWatcher:]
  -[SASRemoteRequestManager currentAppIntentDeliverer]
  -[SASRemoteRequestManager setCurrentAppIntentDeliverer:]
  -[SASRemoteRequestManager currentVoiceTriggerRestriction]
  -[SASRemoteRequestManager setCurrentVoiceTriggerRestriction:]
  -[SASRemoteRequestManager pendingVoiceTriggerRestrictionCount]
  -[SASRemoteRequestManager setPendingVoiceTriggerRestrictionCount:]
  -[SASRemoteRequestManager hasPendingVoiceTriggerActivation]
  -[SASRemoteRequestManager setHasPendingVoiceTriggerActivation:]
  -[SASRemoteRequestManager pendingVoiceTriggerActivationInfo]
  -[SASRemoteRequestManager setPendingVoiceTriggerActivationInfo:]
  -[SASRemoteRequestManager setCurrentPocketState:]


SASRequestOptions : NSObject <NSCopying, NSSecureCoding>
 @property  long long requestSource
 @property  NSString *activationDeviceIdentifier
 @property  AFBulletin *bulletin
 @property  NSString *appBundleIdentifier
 @property  AFApplicationContext *directActionApplicationContext
 @property  long long directActionEvent
 @property  NSString *serverCommandId
 @property  BOOL pronunciationRequest
 @property  SASPronunciationContext *pronunciationContext
 @property  NSString *text
 @property  NSURL *speechFileURL
 @property  double expectedTimestamp
 @property  double timestamp
 @property  double buttonDownTimestamp
 @property  long long longPressBehavior
 @property  BOOL forStark
 @property  NSArray *currentCarPlaySupportedOEMAppIdList
 @property  BOOL isForCarDND
 @property  BOOL isConnectedToCarPlay
 @property  unsigned long carDNDStatus
 @property  BOOL rightHandDrive
 @property  BOOL isForAppleTV
 @property  BOOL isForEyesFree
 @property  BOOL isForBluetoothCar
 @property  BOOL isForUIFree
 @property  BOOL isRequestMadeWithPhysicalDeviceInteraction
 @property  BOOL userTypedInSiri
 @property  BOOL isInAutoPrompt
 @property  BOOL isVoiceTriggerRequest
 @property  long long inputType
 @property  BOOL initialBringUp
 @property  BOOL useAutomaticEndpointing
 @property  BOOL useStreamingDictation
 @property  NSNumber *homeButtonUpFromBeep
 @property  NSDictionary *continuityInfo
 @property  AFRequestInfo *requestInfo
 @property  AFSpeechRequestOptions *speechRequestOptions
 @property  BOOL acousticIdEnabled
 @property  BOOL releaseAudioSessionOnRecordingCompletion
 @property  BOOL predictedRecordRouteIsZLL
 @property  BOOL isRemotePresentationBringUp
 @property  NSString *uiPresentationIdentifier
 @property  NSMutableArray *instrumentationEvents
 @property  NSUUID *previousTurnIdentifier
 @property  NSArray *contextAppInfosForSiriViewController
 @property  NSDictionary *testingContext
 @property  unsigned long currentLockState
 @property  NSString *startRecordingSoundId
 @property  BOOL shortButtonPressAction
 @property  SASRequestOptions *originalRequestOptions
 @property  long long presentationMode
 @property  unsigned long tvRemoteType
 @property  BOOL isTVRemoteSourcePTTEligible

  // class methods
  +[SASRequestOptions supportsSecureCoding]

  // instance methods
  -[SASRequestOptions presentationMode]
  -[SASRequestOptions appBundleIdentifier]
  -[SASRequestOptions bulletin]
  -[SASRequestOptions isConnectedToCarPlay]
  -[SASRequestOptions carDNDStatus]
  -[SASRequestOptions setContinuityInfo:]
  -[SASRequestOptions setPresentationMode:]
  -[SASRequestOptions text]
  -[SASRequestOptions setSpeechRequestOptions:]
  -[SASRequestOptions setTimestamp:]
  -[SASRequestOptions encodeWithCoder:]
  -[SASRequestOptions setButtonDownTimestamp:]
  -[SASRequestOptions .cxx_destruct]
  -[SASRequestOptions setRightHandDrive:]
  -[SASRequestOptions setLongPressBehavior:]
  -[SASRequestOptions setCurrentCarPlaySupportedOEMAppIdList:]
  -[SASRequestOptions continuityInfo]
  -[SASRequestOptions setUseAutomaticEndpointing:]
  -[SASRequestOptions requestSource]
  -[SASRequestOptions copyWithZone:]
  -[SASRequestOptions isRightHandDrive]
  -[SASRequestOptions timestamp]
  -[SASRequestOptions currentCarPlaySupportedOEMAppIdList]
  -[SASRequestOptions buttonDownTimestamp]
  -[SASRequestOptions setAppBundleIdentifier:]
  -[SASRequestOptions useAutomaticEndpointing]
  -[SASRequestOptions init]
  -[SASRequestOptions predictedRecordRouteIsZLL]
  -[SASRequestOptions setText:]
  -[SASRequestOptions setPredictedRecordRouteIsZLL:]
  -[SASRequestOptions longPressBehavior]
  -[SASRequestOptions initWithCoder:]
  -[SASRequestOptions setBulletin:]
  -[SASRequestOptions setRequestSource:]
  -[SASRequestOptions setActivationDeviceIdentifier:]
  -[SASRequestOptions setReleaseAudioSessionOnRecordingCompletion:]
  -[SASRequestOptions setUseStreamingDictation:]
  -[SASRequestOptions inputType]
  -[SASRequestOptions requestInfo]
  -[SASRequestOptions initWithRequestSource:]
  -[SASRequestOptions speechRequestOptions]
  -[SASRequestOptions directActionEvent]
  -[SASRequestOptions setDirectActionEvent:]
  -[SASRequestOptions releaseAudioSessionOnRecordingCompletion]
  -[SASRequestOptions isForCarDND]
  -[SASRequestOptions isVoiceTriggerRequest]
  -[SASRequestOptions isRequestMadeWithPhysicalDeviceInteraction]
  -[SASRequestOptions userTypedInSiri]
  -[SASRequestOptions setIsForCarDND:]
  -[SASRequestOptions setIsConnectedToCarPlay:]
  -[SASRequestOptions activationDeviceIdentifier]
  -[SASRequestOptions serverCommandId]
  -[SASRequestOptions setServerCommandId:]
  -[SASRequestOptions useStreamingDictation]
  -[SASRequestOptions isInitialBringUp]
  -[SASRequestOptions homeButtonUpFromBeep]
  -[SASRequestOptions setHomeButtonUpFromBeep:]
  -[SASRequestOptions acousticIdEnabled]
  -[SASRequestOptions setAcousticIdEnabled:]
  -[SASRequestOptions testingContext]
  -[SASRequestOptions pronunciationContext]
  -[SASRequestOptions initWithRequestSource:uiPresentationIdentifier:]
  -[SASRequestOptions initWithRequestSource:uiPresentationIdentifier:systemState:]
  -[SASRequestOptions initWithRequestSource:uiPresentationIdentifier:buttonContext:]
  -[SASRequestOptions _configureStreamingDictationForSource:]
  -[SASRequestOptions _isForSpeechRequest]
  -[SASRequestOptions isForAppleTV]
  -[SASRequestOptions isForStark]
  -[SASRequestOptions isForEyesFree]
  -[SASRequestOptions isForBluetoothCar]
  -[SASRequestOptions isForUIFree]
  -[SASRequestOptions isInAutoPrompt]
  -[SASRequestOptions isH1Activation]
  -[SASRequestOptions isHTTRequestSource]
  -[SASRequestOptions isATVRemotePTTEligible]
  -[SASRequestOptions updateIfNeededWithSystemState:]
  -[SASRequestOptions _updateWithSystemState:forcefully:]
  -[SASRequestOptions _isTypeToSiriPermittedAndEnabledForRequestOptions]
  -[SASRequestOptions directActionApplicationContext]
  -[SASRequestOptions setDirectActionApplicationContext:]
  -[SASRequestOptions isPronunciationRequest]
  -[SASRequestOptions setPronunciationRequest:]
  -[SASRequestOptions setPronunciationContext:]
  -[SASRequestOptions speechFileURL]
  -[SASRequestOptions setSpeechFileURL:]
  -[SASRequestOptions expectedTimestamp]
  -[SASRequestOptions setExpectedTimestamp:]
  -[SASRequestOptions setCarDNDStatus:]
  -[SASRequestOptions setInitialBringUp:]
  -[SASRequestOptions setRequestInfo:]
  -[SASRequestOptions isRemotePresentationBringUp]
  -[SASRequestOptions uiPresentationIdentifier]
  -[SASRequestOptions setUiPresentationIdentifier:]
  -[SASRequestOptions instrumentationEvents]
  -[SASRequestOptions setInstrumentationEvents:]
  -[SASRequestOptions previousTurnIdentifier]
  -[SASRequestOptions setPreviousTurnIdentifier:]
  -[SASRequestOptions contextAppInfosForSiriViewController]
  -[SASRequestOptions setContextAppInfosForSiriViewController:]
  -[SASRequestOptions setTestingContext:]
  -[SASRequestOptions currentLockState]
  -[SASRequestOptions setCurrentLockState:]
  -[SASRequestOptions startRecordingSoundId]
  -[SASRequestOptions setStartRecordingSoundId:]
  -[SASRequestOptions isShortButtonPressAction]
  -[SASRequestOptions setShortButtonPressAction:]
  -[SASRequestOptions originalRequestOptions]
  -[SASRequestOptions setOriginalRequestOptions:]
  -[SASRequestOptions tvRemoteType]
  -[SASRequestOptions setTvRemoteType:]
  -[SASRequestOptions isTVRemoteSourcePTTEligible]
  -[SASRequestOptions setIsTVRemoteSourcePTTEligible:]


SiriBreadcrumbSource : SiriActivationSource
  // instance methods
  -[SiriBreadcrumbSource activate]
  -[SiriBreadcrumbSource configureConnection]
  -[SiriBreadcrumbSource init]


SiriLongPressButtonConfigurationUpdateManager : NSObject
 @property  long long currentLongPressBehavior
 @property  BOOL monitoringForUpdates
 @property  NSMapTable *delegatesBySource

  // instance methods
  -[SiriLongPressButtonConfigurationUpdateManager userDefaults]
  -[SiriLongPressButtonConfigurationUpdateManager startManagingConfigurationFromSource:withDelegate:]
  -[SiriLongPressButtonConfigurationUpdateManager currentLongPressBehavior]
  -[SiriLongPressButtonConfigurationUpdateManager dealloc]
  -[SiriLongPressButtonConfigurationUpdateManager monitoringForUpdates]
  -[SiriLongPressButtonConfigurationUpdateManager .cxx_destruct]
  -[SiriLongPressButtonConfigurationUpdateManager _addDelegate:forSource:]
  -[SiriLongPressButtonConfigurationUpdateManager _setupKVOMonitoring]
  -[SiriLongPressButtonConfigurationUpdateManager observeValueForKeyPath:ofObject:change:context:]
  -[SiriLongPressButtonConfigurationUpdateManager setMonitoringForUpdates:]
  -[SiriLongPressButtonConfigurationUpdateManager setDelegatesBySource:]
  -[SiriLongPressButtonConfigurationUpdateManager stopManagingAllConfigurations]
  -[SiriLongPressButtonConfigurationUpdateManager setCurrentLongPressBehavior:]
  -[SiriLongPressButtonConfigurationUpdateManager _stopKVOMonitoring]
  -[SiriLongPressButtonConfigurationUpdateManager delegatesBySource]
  -[SiriLongPressButtonConfigurationUpdateManager init]
  -[SiriLongPressButtonConfigurationUpdateManager stopManagingConfigurationFromSource:]


SiriContinuitySource : SiriActivationSource
  // instance methods
  -[SiriContinuitySource configureConnection]
  -[SiriContinuitySource init]
  -[SiriContinuitySource activateWithContext:]


SASLockStateMonitor : NSObject
 @property  unsigned long lockState
 @property  BOOL unlockedByTouchID
 @property  NSNumber *assistantIsEnabled
 @property  <SASLockStateMonitorDelegate> *delegate

  // instance methods
  -[SASLockStateMonitor isBlocked]
  -[SASLockStateMonitor isScreenOn]
  -[SASLockStateMonitor lockState]
  -[SASLockStateMonitor setUnlockedByTouchID:]
  -[SASLockStateMonitor setLockState:]
  -[SASLockStateMonitor setDelegate:]
  -[SASLockStateMonitor delegate]
  -[SASLockStateMonitor dealloc]
  -[SASLockStateMonitor assistantIsEnabled]
  -[SASLockStateMonitor .cxx_destruct]
  -[SASLockStateMonitor setAssistantIsEnabled:]
  -[SASLockStateMonitor _updateLockState]
  -[SASLockStateMonitor _lockStateDidChange:]
  -[SASLockStateMonitor _currentLockState]
  -[SASLockStateMonitor unlockedByTouchID]
  -[SASLockStateMonitor hasUnlockedSinceBoot]
  -[SASLockStateMonitor init]


SASSystemState : NSObject <SASEmptyProtocol, CXCallObserverDelegate, CARSessionObserving>
 @property  int carPlayConnectionState
 @property  BOOL accessibilityShortcutEnabled
 @property  CXCallObserver *callObserver
 @property  NSMutableSet *activeCalls
 @property  FBSDisplayLayoutMonitor *displayLayoutMonitor
 @property  BOOL liftToWakeDetected
 @property  NSArray *currentCarPlaySupportedOEMAppIdList
 @property  CARSessionStatus *carPlaySessionStatus
 @property  CARAutomaticDNDStatus *carAutomaticDNDStatus
 @property  NSString *vehicleName
 @property  NSString *vehicleModel
 @property  NSString *vehicleManufacturer
 @property  BOOL rightHandDrive
 @property  BOOL enabled
 @property  NSHashTable *listeners
 @property  AFNotifyObserver *observerWirelessSplitter
 @property  AFNotifyObserver *observerBluetoothGuestConnected
 @property  unsigned long carPlayEnhancedSiriCharacteristics
 @property  long long carPlayEnhancedVoiceTriggerMode
 @property  SASLockStateMonitor *lockStateMonitor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SASSystemState new]
  +[SASSystemState sharedSystemState]

  // instance methods
  -[SASSystemState setCallObserver:]
  -[SASSystemState setCarPlaySessionStatus:]
  -[SASSystemState _initForTesting]
  -[SASSystemState carPlaySessionStatus]
  -[SASSystemState hasIncomingCall]
  -[SASSystemState deviceLiftToWake]
  -[SASSystemState setLockStateMonitor:]
  -[SASSystemState smartCoverClosed]
  -[SASSystemState removeStateChangeListener:]
  -[SASSystemState setVehicleManufacturer:]
  -[SASSystemState setVehicleModel:]
  -[SASSystemState isGuestConnected]
  -[SASSystemState vehicleModel]
  -[SASSystemState isConnectedToCarPlay]
  -[SASSystemState setVehicleName:]
  -[SASSystemState setActiveCalls:]
  -[SASSystemState liftToWakeDetected]
  -[SASSystemState callObserver]
  -[SASSystemState deviceIsBlocked]
  -[SASSystemState lockStateMonitor]
  -[SASSystemState carDNDStatus]
  -[SASSystemState setObserverWirelessSplitter:]
  -[SASSystemState displayLayoutMonitor]
  -[SASSystemState isATV]
  -[SASSystemState sessionDidDisconnect:]
  -[SASSystemState setObserverBluetoothGuestConnected:]
  -[SASSystemState _setCarPlayConnectionState:]
  -[SASSystemState _fetchVehicleInformation]
  -[SASSystemState carPlayEnhancedVoiceTriggerMode]
  -[SASSystemState isPad]
  -[SASSystemState setListeners:]
  -[SASSystemState _enhancedVoiceTriggerModeFromConfiguration:]
  -[SASSystemState carPlayEnhancedSiriCharacteristics]
  -[SASSystemState carPlaySupportsEnhancedSiriCharacteristic:]
  -[SASSystemState _updateCarPlayConnectionState]
  -[SASSystemState carPlaySupportsAnyEnhancedSiriCharacteristics]
  -[SASSystemState listeners]
  -[SASSystemState carPlayConnectionState]
  -[SASSystemState setCarAutomaticDNDStatus:]
  -[SASSystemState accessibilityShortcutEnabled]
  -[SASSystemState _internalAlwaysEyesFreeEnabled]
  -[SASSystemState _pairedVehiclesDidChange:]
  -[SASSystemState observerWirelessSplitter]
  -[SASSystemState .cxx_destruct]
  -[SASSystemState isInActiveCall]
  -[SASSystemState setEnabled:]
  -[SASSystemState setRightHandDrive:]
  -[SASSystemState carDNDActive]
  -[SASSystemState monitorLockState]
  -[SASSystemState setCurrentCarPlaySupportedOEMAppIdList:]
  -[SASSystemState currentSpokenLanguageCode]
  -[SASSystemState carDNDActiveOrEyesFreeAndShouldHaveFullScreenPresentation:]
  -[SASSystemState callObserver:callChanged:]
  -[SASSystemState deviceIsPasscodeLocked]
  -[SASSystemState isConnectedToTrustedCarPlay]
  -[SASSystemState carAutomaticDNDStatus]
  -[SASSystemState siriIsEnabled]
  -[SASSystemState setCarPlayEnhancedSiriCharacteristics:]
  -[SASSystemState setDisplayLayoutMonitor:]
  -[SASSystemState _mapsAppIsVisibleOnLockscreen]
  -[SASSystemState activeCalls]
  -[SASSystemState vehicleName]
  -[SASSystemState isRightHandDrive]
  -[SASSystemState vehicleManufacturer]
  -[SASSystemState _deviceIsUnlocked]
  -[SASSystemState hasUnlockedSinceBoot]
  -[SASSystemState enabled]
  -[SASSystemState currentCarPlaySupportedOEMAppIdList]
  -[SASSystemState deviceScreenIsOn]
  -[SASSystemState siriIsSupported]
  -[SASSystemState siriIsRestricted]
  -[SASSystemState setLiftToWakeDetected:]
  -[SASSystemState _fetchOEMAppContext]
  -[SASSystemState rightHandDrive]
  -[SASSystemState monitorCarSessions]
  -[SASSystemState sessionDidConnect:]
  -[SASSystemState isWirelessSplitterOn]
  -[SASSystemState voiceTriggerDuringPhoneCallCapable]
  -[SASSystemState addStateChangeListener:]
  -[SASSystemState observerBluetoothGuestConnected]
  -[SASSystemState setAccessibilityShortcutEnabled:]
  -[SASSystemState setCarPlayEnhancedVoiceTriggerMode:]
  -[SASSystemState init]
  -[SASSystemState isConnectedToEyesFreeDevice]
  -[SASSystemState _updateAccessibilityState]
  -[SASSystemState setCarPlayConnectionState:]


SASActivationCondition : NSObject
 @property  SASActivationRequest *request
 @property  BOOL buttonTriggerStateActive
 @property  SASSystemState *systemState
 @property  SASSiriPocketStateManager *pocketStateManager
 @property  AFPreferences *preferences
 @property  NSDictionary *analyticsContext
 @property  long long requestState
 @property  SASUnderstandingOnDeviceAssetsState *uodAssetsState

  // instance methods
  -[SASActivationCondition setSystemState:]
  -[SASActivationCondition setPocketStateManager:]
  -[SASActivationCondition pocketStateManager]
  -[SASActivationCondition setRequest:]
  -[SASActivationCondition requestState]
  -[SASActivationCondition setPreferences:]
  -[SASActivationCondition .cxx_destruct]
  -[SASActivationCondition preferences]
  -[SASActivationCondition setRequestState:]
  -[SASActivationCondition systemState]
  -[SASActivationCondition uodAssetsState]
  -[SASActivationCondition request]
  -[SASActivationCondition setUodAssetsState:]
  -[SASActivationCondition buttonTriggerStateActive]
  -[SASActivationCondition setButtonTriggerStateActive:]
  -[SASActivationCondition analyticsContext]
  -[SASActivationCondition setAnalyticsContext:]


SASActivationDecision : NSObject
  // class methods
  +[SASActivationDecision canActivateForCondition:]
  +[SASActivationDecision _shouldSiriActivateForSiriSetupWithSystemState:]


SiriContext : NSObject <NSCopying, NSSecureCoding>
 @property  AFSpeechRequestOptions *speechRequestOptions
 @property  SiriContextOverride *contextOverride

  // class methods
  +[SiriContext supportsSecureCoding]

  // instance methods
  -[SiriContext initWithSpeechRequestOptions:]
  -[SiriContext encodeWithCoder:]
  -[SiriContext .cxx_destruct]
  -[SiriContext setContextOverride:]
  -[SiriContext copyWithZone:]
  -[SiriContext contextOverride]
  -[SiriContext initWithCoder:]
  -[SiriContext speechRequestOptions]
  -[SiriContext initWithContextOverride:]


SASRequestTrigger : NSObject
 @property  SASRequestOptions *options
 @property  long long state

  // instance methods
  -[SASRequestTrigger state]
  -[SASRequestTrigger .cxx_destruct]
  -[SASRequestTrigger options]
  -[SASRequestTrigger _updateState:]
  -[SASRequestTrigger initWithRequestOptions:updateHandle:]
  -[SASRequestTrigger addTriggerTarget:action:]
  -[SASRequestTrigger removeTriggerTarget:]


SiriSpotlightContext : SiriContext
 @property  NSString *utteranceText
 @property  long long source

  // class methods
  +[SiriSpotlightContext supportsSecureCoding]

  // instance methods
  -[SiriSpotlightContext source]
  -[SiriSpotlightContext setSource:]
  -[SiriSpotlightContext encodeWithCoder:]
  -[SiriSpotlightContext .cxx_destruct]
  -[SiriSpotlightContext initWithCoder:]
  -[SiriSpotlightContext setUtteranceText:]
  -[SiriSpotlightContext utteranceText]


SiriTVLongPressButtonContext : SiriLongPressButtonContext
 @property  BOOL isSourcePTTEligible
 @property  NSString *activeDeviceBluetoothIdentifier
 @property  unsigned long remoteType
 @property  BOOL isListening

  // class methods
  +[SiriTVLongPressButtonContext supportsSecureCoding]

  // instance methods
  -[SiriTVLongPressButtonContext encodeWithCoder:]
  -[SiriTVLongPressButtonContext setIsSourcePTTEligible:]
  -[SiriTVLongPressButtonContext setSourcePTTEligibility:]
  -[SiriTVLongPressButtonContext setRemoteType:]
  -[SiriTVLongPressButtonContext .cxx_destruct]
  -[SiriTVLongPressButtonContext setActiveDeviceBluetoothIdentifier:]
  -[SiriTVLongPressButtonContext isSourcePTTEligible]
  -[SiriTVLongPressButtonContext setIsListening:]
  -[SiriTVLongPressButtonContext isPTTEligible]
  -[SiriTVLongPressButtonContext activeDeviceBluetoothIdentifier]
  -[SiriTVLongPressButtonContext isListening]
  -[SiriTVLongPressButtonContext remoteType]
  -[SiriTVLongPressButtonContext initWithCoder:]


SiriShortPressButtonContext : SiriContext

SASTestingInputController : NSObject
 @property  SiriTestingContext *preloadedTestingInput

  // instance methods
  -[SASTestingInputController dealloc]
  -[SASTestingInputController .cxx_destruct]
  -[SASTestingInputController init]
  -[SASTestingInputController _testingStringsDidChange:]
  -[SASTestingInputController _testingAudioInputPathsDidChange:]
  -[SASTestingInputController _registerForTestingNotifications]
  -[SASTestingInputController dequeuePreloadedTestingContext]
  -[SASTestingInputController preloadedTestingInput]


SiriHearstLongPressButtonContext : SiriLongPressButtonContext
  // class methods
  +[SiriHearstLongPressButtonContext supportsSecureCoding]

  // instance methods
  -[SiriHearstLongPressButtonContext isTemporaryDevice]
  -[SiriHearstLongPressButtonContext initWithSpeechRequestOptions:]
  -[SiriHearstLongPressButtonContext encodeWithCoder:]
  -[SiriHearstLongPressButtonContext initWithCoder:]


SiriLongPressButtonConfiguration : NSObject <NSCopying>
 @property  NSString *uniqueIdentifier
 @property  long long buttonIdentifer
 @property  double longPressInterval
 @property  long long longPressBehavior

  // instance methods
  -[SiriLongPressButtonConfiguration longPressInterval]
  -[SiriLongPressButtonConfiguration buttonIdentifer]
  -[SiriLongPressButtonConfiguration .cxx_destruct]
  -[SiriLongPressButtonConfiguration setLongPressBehavior:]
  -[SiriLongPressButtonConfiguration initWithButtonIdentifier:]
  -[SiriLongPressButtonConfiguration copyWithZone:]
  -[SiriLongPressButtonConfiguration uniqueIdentifier]
  -[SiriLongPressButtonConfiguration longPressBehavior]


SASBulletinCacheNode : NSObject
 @property  AFBulletin *bulletin
 @property  SASBulletinCacheNode *previousNode
 @property  SASBulletinCacheNode *nextNode

  // instance methods
  -[SASBulletinCacheNode bulletin]
  -[SASBulletinCacheNode setPreviousNode:]
  -[SASBulletinCacheNode .cxx_destruct]
  -[SASBulletinCacheNode nextNode]
  -[SASBulletinCacheNode setNextNode:]
  -[SASBulletinCacheNode previousNode]
  -[SASBulletinCacheNode setBulletin:]


SASBulletinCache : NSObject
  // instance methods
  -[SASBulletinCache allBulletins]
  -[SASBulletinCache _findNodeForBulletinID:]
  -[SASBulletinCache .cxx_destruct]
  -[SASBulletinCache insertBulletin:fromFeed:]
  -[SASBulletinCache _deleteNode:]
  -[SASBulletinCache removeBulletinForID:]
  -[SASBulletinCache _isFeedRelevant:]
  -[SASBulletinCache cachedBulletinForID:]
  -[SASBulletinCache _purgeOldestNodes]
  -[SASBulletinCache init]


SASBluetoothEndpointUtility : NSObject
 @property  NSString *endpointType

  // instance methods
  -[SASBluetoothEndpointUtility dealloc]
  -[SASBluetoothEndpointUtility .cxx_destruct]
  -[SASBluetoothEndpointUtility _registerListenersAndSetEndpointTypeWithNotification:]
  -[SASBluetoothEndpointUtility isConnectedToBluetoothVehicle]
  -[SASBluetoothEndpointUtility _setEndpointType:]
  -[SASBluetoothEndpointUtility init]
  -[SASBluetoothEndpointUtility _endpointType]
  -[SASBluetoothEndpointUtility _setEndpointTypeWithNotification:]


SiriDirectActionSource : SiriActivationSource
 @property  <SiriDirectActionSourceDelegate> *delegate

  // instance methods
  -[SiriDirectActionSource setDelegate:]
  -[SiriDirectActionSource delegate]
  -[SiriDirectActionSource .cxx_destruct]
  -[SiriDirectActionSource initWithDelegate:]
  -[SiriDirectActionSource configureConnection]
  -[SiriDirectActionSource init]
  -[SiriDirectActionSource activateWithContext:]
  -[SiriDirectActionSource activateWithContext:completion:]
  -[SiriDirectActionSource canActivateChangedTo:]


SASUnderstandingOnDeviceAssetsState : NSObject
 @property  AFSettingsConnection *settingsConnection
 @property  NSObject<OS_dispatch_queue> *uodAssetsqueue
 @property  BOOL understandingOnDeviceAssetsAvailable

  // instance methods
  -[SASUnderstandingOnDeviceAssetsState dealloc]
  -[SASUnderstandingOnDeviceAssetsState .cxx_destruct]
  -[SASUnderstandingOnDeviceAssetsState settingsConnection]
  -[SASUnderstandingOnDeviceAssetsState updateState]
  -[SASUnderstandingOnDeviceAssetsState setUodAssetsqueue:]
  -[SASUnderstandingOnDeviceAssetsState understandingOnDeviceAssetsAvailable]
  -[SASUnderstandingOnDeviceAssetsState setSettingsConnection:]
  -[SASUnderstandingOnDeviceAssetsState _setUODAssetsAvailable:]
  -[SASUnderstandingOnDeviceAssetsState uodAssetsqueue]
  -[SASUnderstandingOnDeviceAssetsState init]


SASTestingInput : NSObject <NSCopying, NSSecureCoding>
 @property  long long type
 @property  NSString *text
 @property  NSURL *recordedSpeechURL

  // class methods
  +[SASTestingInput supportsSecureCoding]
  +[SASTestingInput newWithBuilder:]

  // instance methods
  -[SASTestingInput text]
  -[SASTestingInput encodeWithCoder:]
  -[SASTestingInput type]
  -[SASTestingInput initWithBuilder:]
  -[SASTestingInput mutatedCopyWithMutator:]
  -[SASTestingInput .cxx_destruct]
  -[SASTestingInput copyWithZone:]
  -[SASTestingInput isEqual:]
  -[SASTestingInput initWithCoder:]
  -[SASTestingInput initWithType:text:recordedSpeechURL:]
  -[SASTestingInput recordedSpeechURL]


_SASTestingInputMutation : NSObject <SASTestingInputMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SASTestingInputMutation .cxx_destruct]
  -[_SASTestingInputMutation setType:]
  -[_SASTestingInputMutation generate]
  -[_SASTestingInputMutation init]
  -[_SASTestingInputMutation setText:]
  -[_SASTestingInputMutation initWithBaseModel:]
  -[_SASTestingInputMutation setRecordedSpeechURL:]


SASSignalConnectionListener : NSObject <BSServiceConnectionListenerDelegate>
 @property  BSServiceConnectionListener *listener
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SASSignalConnectionListener new]
  +[SASSignalConnectionListener listener]

  // instance methods
  -[SASSignalConnectionListener .cxx_destruct]
  -[SASSignalConnectionListener setListener:]
  -[SASSignalConnectionListener listener]
  -[SASSignalConnectionListener _init]
  -[SASSignalConnectionListener init]
  -[SASSignalConnectionListener listener:didReceiveConnection:withContext:]


SiriLongPressButtonContext : SiriContext
 @property  double buttonDownTimestamp
 @property  long long longPressBehavior

  // class methods
  +[SiriLongPressButtonContext supportsSecureCoding]

  // instance methods
  -[SiriLongPressButtonContext encodeWithCoder:]
  -[SiriLongPressButtonContext setButtonDownTimestamp:]
  -[SiriLongPressButtonContext setLongPressBehavior:]
  -[SiriLongPressButtonContext buttonDownTimestamp]
  -[SiriLongPressButtonContext longPressBehavior]
  -[SiriLongPressButtonContext initWithCoder:]


SiriBluetoothDeviceSource : SiriLongPressButtonSource
 @property  long long buttonIdentifier
 @property  double longPressInterval
 @property  SiriBluetoothContext *context

  // class methods
  +[SiriBluetoothDeviceSource bluetoothDeviceForIdentifier:bluetoothDevice:]

  // instance methods
  -[SiriBluetoothDeviceSource longPressInterval]
  -[SiriBluetoothDeviceSource activate]
  -[SiriBluetoothDeviceSource deactivate]
  -[SiriBluetoothDeviceSource .cxx_destruct]
  -[SiriBluetoothDeviceSource setContext:]
  -[SiriBluetoothDeviceSource setLongPressInterval:]
  -[SiriBluetoothDeviceSource context]
  -[SiriBluetoothDeviceSource setButtonIdentifier:]
  -[SiriBluetoothDeviceSource buttonIdentifier]


SASSignalServer : NSObject
 @property  BSServiceConnectionEndpointInjector *workspaceServiceInjector
 @property  BSServiceConnection<BSServiceConnectionHost> *connection
 @property  BOOL invalidated
 @property  NSMutableArray *waitForConnectBlocks
 @property  <SASSignalServerDelegate> *weak_delegate
 @property  NSString *assertionClientIdentifier

  // class methods
  +[SASSignalServer interface]
  +[SASSignalServer serviceQuality]
  +[SASSignalServer serverForConnection:]
  +[SASSignalServer _unregisterConnection:]

  // instance methods
  -[SASSignalServer activationRequestFromSpotlightWithContext:]
  -[SASSignalServer _setConnection:]
  -[SASSignalServer activationRequestFromTestingWithContext:]
  -[SASSignalServer unregisterButtonEventListenerWithIdentifier:]
  -[SASSignalServer activationRequestFromBreadcrumb]
  -[SASSignalServer prewarmFromButtonIdentifier:longPressInterval:]
  -[SASSignalServer activationRequestFromDirectActionEventWithContext:completion:]
  -[SASSignalServer buttonLongPressFromButtonIdentifier:context:]
  -[SASSignalServer cancelPrewarmFromButtonIdentifier:]
  -[SASSignalServer buttonTapFromButtonIdentifier:]
  -[SASSignalServer activationRequestFromContinuityWithContext:]
  -[SASSignalServer setInvalidated:]
  -[SASSignalServer _unregisterSourceForIdentifier:]
  -[SASSignalServer activationRequestFromSimpleActivation:]
  -[SASSignalServer registerNonButtonSourceWithType:withUUID:]
  -[SASSignalServer setWaitForConnectBlocks:]
  -[SASSignalServer workspaceServiceInjector]
  -[SASSignalServer buttonDownFromButtonIdentifier:timestamp:context:]
  -[SASSignalServer invalidated]
  -[SASSignalServer weak_delegate]
  -[SASSignalServer .cxx_destruct]
  -[SASSignalServer _activationRequestFromDirectActionEventWithContext:completion:]
  -[SASSignalServer connection]
  -[SASSignalServer unregisterAssertionWithIdentifier:]
  -[SASSignalServer setWeak_delegate:]
  -[SASSignalServer assertionClientIdentifier]
  -[SASSignalServer unregisterButtonIdentifier:withUUID:]
  -[SASSignalServer prewarmFromButtonIdentifier:]
  -[SASSignalServer registerButtonEventListenerWithIdentifier:]
  -[SASSignalServer activationRequestFromDirectActionEventWithContext:]
  -[SASSignalServer buttonUpFromButtonIdentifier:deviceIdentifier:timestamp:context:]
  -[SASSignalServer activationRequestFromButtonIdentifier:context:]
  -[SASSignalServer registerButtonIdentifier:withUUID:]
  -[SASSignalServer unregisterNonButtonSourceWithType:withUUID:]
  -[SASSignalServer activationRequestFromRemotePresentationBringUpWithContext:]
  -[SASSignalServer registerAssertionWithIdentifier:reason:]
  -[SASSignalServer deactivationRequestFromButtonIdentifier:context:options:]
  -[SASSignalServer waitForConnectBlocks]
  -[SASSignalServer activationRequestFromBluetoothKeyboardActivation:]
  -[SASSignalServer setAssertionClientIdentifier:]
  -[SASSignalServer _registerSourceForIdentifier:]
  -[SASSignalServer setWorkspaceServiceInjector:]
  -[SASSignalServer setConnection:]


SASPresentationConnectionListener : NSObject <BSServiceConnectionListenerDelegate>
 @property  BSServiceConnectionListener *listener
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SASPresentationConnectionListener new]
  +[SASPresentationConnectionListener listener]

  // instance methods
  -[SASPresentationConnectionListener .cxx_destruct]
  -[SASPresentationConnectionListener setListener:]
  -[SASPresentationConnectionListener listener]
  -[SASPresentationConnectionListener _init]
  -[SASPresentationConnectionListener init]
  -[SASPresentationConnectionListener listener:didReceiveConnection:withContext:]


SASPresentationModel : NSObject
 @property  SASPresentationServer *presentationServer
 @property  long long requestState
 @property  NSMutableArray *enqueuedButtonEventCompletions
 @property  NSTimer *pingTimer
 @property  SASPresentationState *presentationState

  // instance methods
  -[SASPresentationModel presentationState]
  -[SASPresentationModel setPresentationState:]
  -[SASPresentationModel requestState]
  -[SASPresentationModel enqueuedButtonEventCompletions]
  -[SASPresentationModel pingTimer]
  -[SASPresentationModel .cxx_destruct]
  -[SASPresentationModel setPingTimer:]
  -[SASPresentationModel setRequestState:]
  -[SASPresentationModel flushEnqueuedButtonEventCompletions]
  -[SASPresentationModel setEnqueuedButtonEventCompletions:]
  -[SASPresentationModel presentationServer]
  -[SASPresentationModel initWithPresentationServer:]


SiriContinuityContext : SiriContext
 @property  AFRequestInfo *requestInfo
 @property  NSDictionary *userActivity

  // class methods
  +[SiriContinuityContext supportsSecureCoding]

  // instance methods
  -[SiriContinuityContext initWithUserActivity:]
  -[SiriContinuityContext isTemporaryDevice]
  -[SiriContinuityContext userActivity]
  -[SiriContinuityContext initWithSpeechRequestOptions:]
  -[SiriContinuityContext encodeWithCoder:]
  -[SiriContinuityContext .cxx_destruct]
  -[SiriContinuityContext initWithCoder:]
  -[SiriContinuityContext requestInfo]
  -[SiriContinuityContext initWithRequestInfo:]
  -[SiriContinuityContext speechRequestOptions]


SiriBluetoothContext : SiriContext
 @property  NSString *address

  // class methods
  +[SiriBluetoothContext supportsSecureCoding]

  // instance methods
  -[SiriBluetoothContext isTemporaryDevice]
  -[SiriBluetoothContext encodeWithCoder:]
  -[SiriBluetoothContext .cxx_destruct]
  -[SiriBluetoothContext address]
  -[SiriBluetoothContext initWithCoder:]
  -[SiriBluetoothContext isEyesFree]
  -[SiriBluetoothContext initWithBluetoothDevice:]


(SiriButtonIdentifier)
	// class methods
	+[(SiriButtonIdentifier) stringWithSiriHomeAffordanceSuppression:]
	+[(SiriButtonIdentifier) stringWithSiriButtonIdentifier:]
	+[(SiriButtonIdentifier) stringWithSiriPresentationIdentifier:]
	+[(SiriButtonIdentifier) stringWithSiriPresentationActivationCancelReason:]
	+[(SiriButtonIdentifier) stringWithSiriActivationEventType:]
	+[(SiriButtonIdentifier) stringWithSiriSpotlightContextSource:]

	// instance methods
	-[(SiriButtonIdentifier) siriPresentationIdentifier]
	-[(SiriButtonIdentifier) cancelReason]

BluetoothDevice(SiriClientAdditions)
	// instance methods
	-[BluetoothDevice(SiriClientAdditions) ac_isEyesFree]

01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAnalytics 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFApplicationContext 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFBulletin 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFFeatureFlags 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMyriadCoordinator 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFNotifyObserver 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFPreferences 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFRemoteRequestWatcher 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFRequestInfo 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSettingsConnection 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriTether 
01 00 0600 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSpeechRequestOptions 
01 00 0b40 /System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience: AVSystemController 
01 00 0a40 /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard: BBBulletin 
01 00 0a40 /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard: BBObserver 
01 00 1700 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMDiscoverabilitySignalEvent 
01 00 1700 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMStreams 
01 00 0800 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSObjCProtocol 
01 00 0900 /System/Library/PrivateFrameworks/BoardServices.framework/BoardServices: BSServiceConnection 
01 00 0900 /System/Library/PrivateFrameworks/BoardServices.framework/BoardServices: BSServiceConnectionEndpoint 
01 00 0900 /System/Library/PrivateFrameworks/BoardServices.framework/BoardServices: BSServiceConnectionListener 
01 00 0900 /System/Library/PrivateFrameworks/BoardServices.framework/BoardServices: BSServiceInterface 
01 00 0900 /System/Library/PrivateFrameworks/BoardServices.framework/BoardServices: BSServiceQuality 
01 00 0300 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothDevice 
01 00 0300 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothManager 
01 00 1840 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CARAutomaticDNDStatus 
01 00 1840 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CARSessionStatus 
01 00 0d00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMMotionActivityManager 
01 00 0d00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMPocketStateManager 
01 00 1840 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CRCarPlayAppPolicyEvaluator 
01 00 1a40 /System/Library/Frameworks/CallKit.framework/CallKit: CXCallObserver 
01 00 0e40 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitor 
01 00 0e40 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitorConfiguration 
01 00 1400 /System/Library/Frameworks/Intents.framework/Intents: INAppIntentDeliverer 
01 00 1940 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1e00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 2000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1640 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 1000 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SASPronunciationContext 
01 00 1500 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaCarPlayHeadUnitContext 
01 00 1240 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotification 
