|| __DATA_CONST.__const _kMotionStateBuffer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKAirplaneModeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKAppInstallMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKApplicationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKApplicationUsageMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKAssertionsPreventingRestartMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKAudioInputMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKAudioOutputMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKBacklightMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKBluetoothMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKCPUUsageMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKCalendarMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKCellNetworkingQualityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKDeviceActivityLevelMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKDoNotDisturbMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKInCarMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKLocationCoordinatesMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKLocationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKLowPowerModeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKMDCSWorkoutMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKMotionMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKNavigationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKNetworkQualityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKNotificationKeybagLockMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKNotificationScreenLockImputedMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKNotificationScreenLockMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKNotificationWatchNearbyMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKNowPlayingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKOrientationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKPeriod
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKPluggedInMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKScreenSharingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKStarkMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKSunriseSunsetMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKTemporalNumericState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKThermalPressureMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKUserIsFirstBacklightOnAfterWakeupMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKWakeRequestMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKWiFiConnectionMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKWifiNetworkQualityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__DKWiredNetworkQualityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKAirplaneModeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKAppInstallMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKApplicationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKApplicationUsageMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKAssertionsPreventingRestartMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKAudioInputMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKAudioOutputMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKBacklightMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKBluetoothMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKCPUUsageMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKCalendarMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKCellNetworkingQualityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKDeviceActivityLevelMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKDoNotDisturbMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKInCarMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKLocationCoordinatesMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKLocationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKLowPowerModeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKMDCSWorkoutMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKMotionMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKNavigationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKNetworkQualityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKNotificationKeybagLockMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKNotificationScreenLockImputedMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKNotificationScreenLockMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKNotificationWatchNearbyMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKNowPlayingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKOrientationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKPeriod
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKPluggedInMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKScreenSharingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKStarkMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKSunriseSunsetMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKTemporalNumericState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKThermalPressureMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKUserIsFirstBacklightOnAfterWakeupMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKWakeRequestMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKWiFiConnectionMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKWifiNetworkQualityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__DKWiredNetworkQualityMonitor
|| __TEXT.__const _KnowledgeMonitorVersionNumber
|| __TEXT.__const _KnowledgeMonitorVersionString
|| __TEXT.__const __DKMotionStateAny
|| __TEXT.__const __DKMotionStateAutomotive
|| __TEXT.__const __DKMotionStateAutomotiveStationary
|| __TEXT.__const __DKMotionStateCycling
|| __TEXT.__const __DKMotionStateRunning
|| __TEXT.__const __DKMotionStateStationary
|| __TEXT.__const __DKMotionStateWalking
|| __TEXT.__const _kDominantActivityInterval
|| __TEXT.__text _BiomeLibraryInternalNodeBridge
__ AVFAudio: _AVAudioSessionPortBuiltInMic
__ AVFAudio: _AVAudioSessionPortBuiltInReceiver
__ AVFAudio: _AVAudioSessionPortBuiltInSpeaker
__ AVFAudio: _AVAudioSessionRouteChangeNotification
__ AVFAudio: _AVAudioSessionRouteChangeReasonKey
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _AVOutputContextOutputDeviceDidChangeNotification
__ AVFoundation: _AVOutputContextOutputDevicesDidChangeNotification
__ AVFoundation: _OBJC_CLASS_$_AVOutputContext
__ AppSupport: _CPCopyBundleIdentifierAndTeamFromApplicationIdentifier
__ BackBoardServices: _BKSApplicationStateAppIsFrontmostKey
__ BackBoardServices: _BKSApplicationStateDisplayIDKey
__ BackBoardServices: _BKSApplicationStateExtensionKey
__ BackBoardServices: _BKSApplicationStateHostPIDKey
__ BackBoardServices: _BKSApplicationStateKey
__ BackBoardServices: _BKSHIDServicesLastUserEventTime
__ BackBoardServices: _OBJC_CLASS_$_BKSApplicationStateMonitor
__ BiomeLibrary: _BiomeLibrary
__ BiomeLibrary: _OBJC_CLASS_$_BMAudioRoute
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceAirplaneMode
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceBatteryLevel
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceBluetooth
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceInterfaceOrientation
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceKeybagLocked
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceLowPowerMode
__ BiomeLibrary: _OBJC_CLASS_$_BMDevicePluggedIn
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceScreenLocked
__ BiomeLibrary: _OBJC_CLASS_$_BMDeviceWiFi
__ BiomeLibrary: _OBJC_CLASS_$_BMFrontBoardDisplayLayout
__ BiomeLibrary: _OBJC_CLASS_$_BMFrontBoardDisplayLayoutDisplay
__ BiomeLibrary: _OBJC_CLASS_$_BMFrontBoardDisplayLayoutElement
__ BiomeLibrary: _OBJC_CLASS_$_BMLocationHashedCoordinates
__ BiomeStreams: _OBJC_CLASS_$_BMAppLaunchEvent
__ BiomeStreams: _OBJC_CLASS_$_BMNowPlayingEvent
__ BiomeStreams: _OBJC_CLASS_$_BMScreenSharingEvent
__ BiomeStreams: _OBJC_CLASS_$_BMScreenSharingStream
__ BiomeStreams: _OBJC_CLASS_$_BMSemanticLocationEvent
__ BiomeStreams: _OBJC_CLASS_$_BMSemanticLocationStream
__ BiomeStreams: _OBJC_CLASS_$_BMStreams
__ BluetoothManager: _BluetoothAccessoryInEarStatusNotification
__ BluetoothManager: _BluetoothDeviceConnectSuccessNotification
__ BluetoothManager: _BluetoothDeviceDisconnectSuccessNotification
__ BluetoothManager: _OBJC_CLASS_$_BluetoothManager
__ CarKit: _OBJC_CLASS_$_CARSessionStatus
__ CoreDuet: _OBJC_CLASS_$__CDDeviceInfo
__ CoreDuet: _OBJC_CLASS_$__CDLogging
__ CoreDuet: _OBJC_CLASS_$__CDSharedMemoryKeyValueStore
__ CoreDuet: _OBJC_CLASS_$__CDSleepForAutoSu
__ CoreDuet: _OBJC_CLASS_$__DKAnyIntegerCategory
__ CoreDuet: _OBJC_CLASS_$__DKAnyStringIdentifier
__ CoreDuet: _OBJC_CLASS_$__DKAppClipUsageMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKAppInstallMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKApplicationMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKAudioMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKAudioRouteCategory
__ CoreDuet: _OBJC_CLASS_$__DKBatteryPercentageQuantity
__ CoreDuet: _OBJC_CLASS_$__DKBluetoothMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKBoolCategory
__ CoreDuet: _OBJC_CLASS_$__DKBundleIdentifier
__ CoreDuet: _OBJC_CLASS_$__DKCalendarMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKDeviceBatteryPercentageMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKDeviceIsPluggedInMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKDigitalHealthMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKEvent
__ CoreDuet: _OBJC_CLASS_$__DKEventQuery
__ CoreDuet: _OBJC_CLASS_$__DKIdentifier
__ CoreDuet: _OBJC_CLASS_$__DKKnowledgeStore
__ CoreDuet: _OBJC_CLASS_$__DKMotionCategory
__ CoreDuet: _OBJC_CLASS_$__DKNowPlayingMetadataKey
__ CoreDuet: _OBJC_CLASS_$__DKPredictionTimeline
__ CoreDuet: _OBJC_CLASS_$__DKPrivacyMaintainer
__ CoreDuet: _OBJC_CLASS_$__DKQuery
__ CoreDuet: _OBJC_CLASS_$__DKSystemEventStreams
__ CoreDuet: _OBJC_CLASS_$__DKTitleIdentifier
__ CoreDuet: _OBJC_CLASS_$__DKUIOrientationCategory
__ CoreDuetContext: _OBJC_CLASS_$__CDClientContext
__ CoreDuetContext: _OBJC_CLASS_$__CDContextPredictionQueries
__ CoreDuetContext: _OBJC_CLASS_$__CDContextQueries
__ CoreDuetContext: _OBJC_CLASS_$__CDContextualChangeRegistration
__ CoreDuetContext: _OBJC_CLASS_$__CDContextualKeyPath
__ CoreDuetContext: _OBJC_CLASS_$__CDContextualPredicate
__ CoreDuetContext: _OBJC_CLASS_$__CDMDCSContextualPredicate
__ CoreDuetContext: _OBJC_CLASS_$__CDNetworkContext
__ CoreDuetContext: __CDInformativeContextualChangeNewValueKey
__ CoreDuetDaemonProtocol: __CDDComplicationChangeOverCloudNotificationString
__ CoreDuetDaemonProtocol: __CDDCurrentActiveComplications
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFUserNotificationDisplayAlert
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _NSSystemClockDidChangeNotification
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreLocation: _CLLocationCoordinate2DIsValid
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreLocation: _OBJC_CLASS_$_CLLocationManager
__ CoreLocation: _kCLLocationAccuracyThreeKilometers
__ CoreMotion: _OBJC_CLASS_$_CMMotionActivityManager
__ CoreRoutine: _OBJC_CLASS_$_RTRoutineManager
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSBundleRecord
__ CoreServices: _OBJC_CLASS_$_LSPlugInKitProxy
__ DoNotDisturb: _OBJC_CLASS_$_DNDStateService
__ EventKit: _EKEventStoreChangedNotification
__ EventKit: _OBJC_CLASS_$_EKEventStore
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSProcessInfoPowerStateDidChangeNotification
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutElement
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitor
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitorConfiguration
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayMonitor
__ GeoServices: _GEOAlmanacAltitudeCivilTwilight
__ GeoServices: _OBJC_CLASS_$_GEOAlmanac
__ IOKit: _IONotificationPortCreate
__ IOKit: _IONotificationPortDestroy
__ IOKit: _IONotificationPortSetDispatchQueue
__ IOKit: _IOObjectRelease
__ IOKit: _IOPMAssertionNotify
__ IOKit: _IOPMCopyDeviceRestartPreventers
__ IOKit: _IOPMCopyScheduledPowerEvents
__ IOKit: _IOPMCopySleepPreventersList
__ IOKit: _IOPMGetUserActivityLevel
__ IOKit: _IOPMScheduleUserActivityLevelNotificationWithTimeout
__ IOKit: _IOPMUnregisterNotification
__ IOKit: _IOPSCopyExternalPowerAdapterDetails
__ IOKit: _IOPSCopyPowerSourcesByType
__ IOKit: _IOPSCopyPowerSourcesInfo
__ IOKit: _IOPSCopyPowerSourcesList
__ IOKit: _IOPSDrawingUnlimitedPower
__ IOKit: _IOPSGetPercentRemaining
__ IOKit: _IOPSGetPowerSourceDescription
__ IOKit: _IOPSGetSupportedPowerSources
__ IOKit: _IOPSPowerSourceSupported
__ IOKit: _IORegistryEntryCreateCFProperties
__ IOKit: _IOServiceAddInterestNotification
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _kIOMasterPortDefault
__ MediaRemote: _MRMediaRemoteGetActiveOrigin
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationDisplayID
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationPlaybackState
__ MediaRemote: _MRMediaRemoteGetNowPlayingInfoWithOptionalArtwork
__ MediaRemote: _MRMediaRemoteSetWantsNowPlayingNotifications
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAlbum
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtist
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDuration
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoGenre
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoMediaType
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTitle
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTypeVideo
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoiTunesStoreIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoiTunesStoreSubscriptionAdamIdentifier
__ MediaRemote: _kMRMediaRemoteOriginUserInfoKey
__ MobileBluetooth: _BTDeviceAddressToString
__ MobileKeyBag: _MKBDeviceUnlockedSinceBoot
__ MobileKeyBag: _MKBGetDeviceLockState
__ MobileKeyBag: _kMobileKeyBagLockStatusNotifyToken
__ MobileWiFi: _WiFiDeviceClientCopyCurrentNetwork
__ MobileWiFi: _WiFiDeviceClientGetInterfaceRoleIndex
__ MobileWiFi: _WiFiManagerClientCopyInterfaces
__ MobileWiFi: _WiFiManagerClientCreate
__ MobileWiFi: _WiFiManagerClientRegisterPreferredNetworksChangedCallback
__ MobileWiFi: _WiFiManagerClientScheduleWithRunLoop
__ MobileWiFi: _WiFiNetworkGetSSID
__ MobileWiFi: _kWiFiNetworkChangeEventRemoveKey
__ NanoRegistry: _OBJC_CLASS_$_NRPairedDeviceRegistry
__ Network: _OBJC_CLASS_$_NWPathEvaluator
__ ProactiveSupport: _OBJC_CLASS_$__PASDeviceState
__ QuartzCore: _CACurrentMediaTime
__ Security: _SecRandomCopyBytes
__ Security: _kSecRandomDefault
__ SoftLinking: __sl_dlopen
__ SpringBoardServices: _SBSCreateLayoutServiceEndpointForExternalDisplay
__ SymptomPresentationFeed: _OBJC_CLASS_$_NWNetworkOfInterestManager
__ SystemConfiguration: _SCError
__ SystemConfiguration: _SCErrorString
__ SystemConfiguration: _SCPreferencesCreate
__ SystemConfiguration: _SCPreferencesGetValue
__ SystemConfiguration: _SCPreferencesLock
__ SystemConfiguration: _SCPreferencesSetCallback
__ SystemConfiguration: _SCPreferencesSetDispatchQueue
__ SystemConfiguration: _SCPreferencesSynchronize
__ SystemConfiguration: _SCPreferencesUnlock
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _host_statistics
__ libSystem.B.dylib: _kOSThermalNotificationPressureLevelName
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _mach_host_self
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x10
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x6
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
_DKMotionMonitor : _DKMonitor
 @property  BOOL monitoringActivity
 @property  BOOL shouldRecordMotion
 @property  long long lastReportedMotionState
 @property  CMMotionActivityManager *activityManager
 @property  NSOperationQueue *operationQueue
 @property  NSObject<OS_dispatch_source> *motionStateProcessingTimer
 @property  unsigned long currentDominantMotionState
 @property  double dominantActivityInterval
 @property  BOOL activateTimer

  // class methods
  +[_DKMotionMonitor eventStream]
  +[_DKMotionMonitor _eventWithState:startDate:endDate:]
  +[_DKMotionMonitor shouldMergeUnchangedEvents]
  +[_DKMotionMonitor entitlements]
  +[_DKMotionMonitor log]
  +[_DKMotionMonitor _activityTypeToMotionState:]

  // instance methods
  -[_DKMotionMonitor classesForSecureStateDecoding]
  -[_DKMotionMonitor activityManager]
  -[_DKMotionMonitor initForUnitTest:]
  -[_DKMotionMonitor setActivityManager:]
  -[_DKMotionMonitor addState:]
  -[_DKMotionMonitor operationQueue]
  -[_DKMotionMonitor synchronouslyReflectCurrentValue]
  -[_DKMotionMonitor setOperationQueue:]
  -[_DKMotionMonitor deactivate]
  -[_DKMotionMonitor motionStateProcessingTimer]
  -[_DKMotionMonitor dealloc]
  -[_DKMotionMonitor lastReportedMotionState]
  -[_DKMotionMonitor setMonitoringActivity:]
  -[_DKMotionMonitor .cxx_destruct]
  -[_DKMotionMonitor update]
  -[_DKMotionMonitor stop]
  -[_DKMotionMonitor shouldRecordMotion]
  -[_DKMotionMonitor activateTimer]
  -[_DKMotionMonitor setShouldRecordMotion:]
  -[_DKMotionMonitor monitoringActivity]
  -[_DKMotionMonitor setMotionStateProcessingTimer:]
  -[_DKMotionMonitor start]
  -[_DKMotionMonitor addMotionActivity:]
  -[_DKMotionMonitor currentDominantMotionState]
  -[_DKMotionMonitor setLastReportedMotionState:]
  -[_DKMotionMonitor init]
  -[_DKMotionMonitor computeDominantMotionState]
  -[_DKMotionMonitor dominantActivityInterval]


_DKBacklightMonitor : _DKMonitor
  // class methods
  +[_DKBacklightMonitor eventStream]
  +[_DKBacklightMonitor _eventWithState:]
  +[_DKBacklightMonitor shouldMergeUnchangedEvents]
  +[_DKBacklightMonitor entitlements]
  +[_DKBacklightMonitor setIsBacklit:]
  +[_DKBacklightMonitor indicatesScreenOnWithNotificationState:]

  // instance methods
  -[_DKBacklightMonitor obtainCurrentValue]
  -[_DKBacklightMonitor synchronouslyReflectCurrentValue]
  -[_DKBacklightMonitor deactivate]
  -[_DKBacklightMonitor dealloc]
  -[_DKBacklightMonitor .cxx_destruct]
  -[_DKBacklightMonitor stop]
  -[_DKBacklightMonitor start]
  -[_DKBacklightMonitor init]


_DKCPUUsageMonitor : _DKMonitor
 @property  NSObject<OS_dispatch_source> *timer
 @property  unsigned long lastUserTick
 @property  unsigned long lastIdleTick
 @property  unsigned long lastSysTick
 @property  unsigned long lastCPUUsageLevel

  // class methods
  +[_DKCPUUsageMonitor eventStream]
  +[_DKCPUUsageMonitor entitlements]

  // instance methods
  -[_DKCPUUsageMonitor saveState]
  -[_DKCPUUsageMonitor lastSysTick]
  -[_DKCPUUsageMonitor loadState]
  -[_DKCPUUsageMonitor getCPUTicksForUser:system:idle:]
  -[_DKCPUUsageMonitor synchronouslyReflectCurrentValue]
  -[_DKCPUUsageMonitor .cxx_destruct]
  -[_DKCPUUsageMonitor setTimer:]
  -[_DKCPUUsageMonitor stop]
  -[_DKCPUUsageMonitor timer]
  -[_DKCPUUsageMonitor getCPUUsageLevelFromPercentage:]
  -[_DKCPUUsageMonitor setLastSysTick:]
  -[_DKCPUUsageMonitor setCurrentCPUUsageLevel:]
  -[_DKCPUUsageMonitor updateCPUUsagePercentage:]
  -[_DKCPUUsageMonitor setLastCPUUsageLevel:]
  -[_DKCPUUsageMonitor lastIdleTick]
  -[_DKCPUUsageMonitor start]
  -[_DKCPUUsageMonitor lastUserTick]
  -[_DKCPUUsageMonitor setLastUserTick:]
  -[_DKCPUUsageMonitor getCurrentCPUUsageLevel]
  -[_DKCPUUsageMonitor setLastIdleTick:]
  -[_DKCPUUsageMonitor lastCPUUsageLevel]


_DKAirplaneModeMonitor : _DKMonitor
 @property  NSNumber *airplaneModeStatus
 @property  ^{__SCPreferences=} radioPrefs

  // class methods
  +[_DKAirplaneModeMonitor eventStream]
  +[_DKAirplaneModeMonitor _eventWithState:]
  +[_DKAirplaneModeMonitor _BMEventWithState:]

  // instance methods
  -[_DKAirplaneModeMonitor updateAirplaneModeStatus]
  -[_DKAirplaneModeMonitor deactivate]
  -[_DKAirplaneModeMonitor dealloc]
  -[_DKAirplaneModeMonitor .cxx_destruct]
  -[_DKAirplaneModeMonitor stop]
  -[_DKAirplaneModeMonitor radioPrefs]
  -[_DKAirplaneModeMonitor airplaneModeStatus]
  -[_DKAirplaneModeMonitor setRadioPrefs:]
  -[_DKAirplaneModeMonitor start]
  -[_DKAirplaneModeMonitor setAirplaneModeStatus:]


_DKMonitor : NSObject <_DKInstantMonitor, _DKHistoricalMonitor>
 @property  unsigned long machTimeAtLastClockChange
 @property  NSDate *dateAtLastClockChange
 @property  NSDate *lastUpdate
 @property  _DKEvent *currentEvent
 @property  NSObject<OS_dispatch_queue> *eventQueue
 @property  NSMutableDictionary *instantState
 @property  NSMutableDictionary *historicalState
 @property  @? eventComparator
 @property  @? filter
 @property  long long references
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSSet *classesForSecureStateDecoding
 @property  @? instantHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? historicalHandler
 @property  @? shutdownHandler

  // class methods
  +[_DKMonitor eventStream]
  +[_DKMonitor shouldMergeUnchangedEvents]
  +[_DKMonitor entitlements]

  // instance methods
  -[_DKMonitor lastUpdate]
  -[_DKMonitor setFilter:]
  -[_DKMonitor eventQueue]
  -[_DKMonitor saveState]
  -[_DKMonitor classesForSecureStateDecoding]
  -[_DKMonitor filter]
  -[_DKMonitor loadState]
  -[_DKMonitor setHistoricalHandler:]
  -[_DKMonitor synchronouslyReflectCurrentValue]
  -[_DKMonitor dealloc]
  -[_DKMonitor .cxx_destruct]
  -[_DKMonitor update]
  -[_DKMonitor stop]
  -[_DKMonitor references]
  -[_DKMonitor setLastUpdate:]
  -[_DKMonitor setCurrentEvent:]
  -[_DKMonitor currentEvent]
  -[_DKMonitor setInstantHandler:]
  -[_DKMonitor queue]
  -[_DKMonitor start]
  -[_DKMonitor invalidateInstantState]
  -[_DKMonitor init]
  -[_DKMonitor setShutdownHandler:]
  -[_DKMonitor setCurrentEvent:inferHistoricalState:]
  -[_DKMonitor instantHandler]
  -[_DKMonitor historicalHandler]
  -[_DKMonitor shutdownHandler]
  -[_DKMonitor instantMonitorNeedsActivation]
  -[_DKMonitor instantMonitorNeedsDeactivation]
  -[_DKMonitor systemClockDidChange:]
  -[_DKMonitor endCurrentEvent:]
  -[_DKMonitor historicalStateHasChanged:]
  -[_DKMonitor instantState]
  -[_DKMonitor historicalState]
  -[_DKMonitor eventComparator]
  -[_DKMonitor setEventComparator:]
  -[_DKMonitor machTimeAtLastClockChange]
  -[_DKMonitor setMachTimeAtLastClockChange:]
  -[_DKMonitor dateAtLastClockChange]
  -[_DKMonitor setDateAtLastClockChange:]


_DKApplicationUsageMonitor : _DKMonitor <FBSDisplayObserving>
 @property  FBSDisplayLayoutMonitor *monitor
 @property  NSSet *activeApplications
 @property  FBSDisplayLayoutMonitor *carPlayMonitor
 @property  NSSet *activeCarPlayApplications
 @property  FBSDisplayLayoutMonitor *externalMonitor
 @property  NSSet *activeExternalApplications
 @property  FBSDisplayMonitor *displayMonitor
 @property  NSDictionary *inUseApplicationEvents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKApplicationUsageMonitor eventStream]
  +[_DKApplicationUsageMonitor shouldMergeUnchangedEvents]
  +[_DKApplicationUsageMonitor _eventWithBundleIdentifier:startDate:usageType:usageTrusted:]

  // instance methods
  -[_DKApplicationUsageMonitor setMonitor:]
  -[_DKApplicationUsageMonitor monitor]
  -[_DKApplicationUsageMonitor displayMonitor:didConnectIdentity:withConfiguration:]
  -[_DKApplicationUsageMonitor setActiveApplications:]
  -[_DKApplicationUsageMonitor clearAppWebAndMediaUsageInContextStoreMatchingBundleIDs:clearAll:]
  -[_DKApplicationUsageMonitor obtainCurrentValue]
  -[_DKApplicationUsageMonitor setActiveExternalApplications:]
  -[_DKApplicationUsageMonitor synchronouslyReflectCurrentValue]
  -[_DKApplicationUsageMonitor platformSpecificStart]
  -[_DKApplicationUsageMonitor activeApplications]
  -[_DKApplicationUsageMonitor platformSpecificStop]
  -[_DKApplicationUsageMonitor displayMonitor]
  -[_DKApplicationUsageMonitor .cxx_destruct]
  -[_DKApplicationUsageMonitor stop]
  -[_DKApplicationUsageMonitor externalMonitor]
  -[_DKApplicationUsageMonitor updateInUseApplications:activeApplications:]
  -[_DKApplicationUsageMonitor setExternalMonitor:]
  -[_DKApplicationUsageMonitor activeCarPlayApplications]
  -[_DKApplicationUsageMonitor carPlayMonitor]
  -[_DKApplicationUsageMonitor setInUseApplicationEvents:]
  -[_DKApplicationUsageMonitor updateAppDataInContextStore]
  -[_DKApplicationUsageMonitor setDisplayMonitor:]
  -[_DKApplicationUsageMonitor inUseApplicationEvents]
  -[_DKApplicationUsageMonitor updateActiveApplicationsWithLayout:displayType:]
  -[_DKApplicationUsageMonitor setCarPlayMonitor:]
  -[_DKApplicationUsageMonitor activeExternalApplications]
  -[_DKApplicationUsageMonitor start]
  -[_DKApplicationUsageMonitor invalidateInstantState]
  -[_DKApplicationUsageMonitor setActiveCarPlayApplications:]
  -[_DKApplicationUsageMonitor init]


_DKBatteryMonitor : _DKMonitor
 @property  int immediateShutdownThreshold
 @property  BOOL hasInternalBattery
 @property  NSDictionary *previousBatteryState
 @property  double previousPercentage
 @property  BOOL previouslyFullyCharged

  // class methods
  +[_DKBatteryMonitor eventStream]
  +[_DKBatteryMonitor entitlements]
  +[_DKBatteryMonitor _BMEventWithBatteryPercentage:isFullyCharged:]
  +[_DKBatteryMonitor _eventWithBatteryPercentage:isFullyCharged:]
  +[_DKBatteryMonitor setCurrentBatteryPercentage:]

  // instance methods
  -[_DKBatteryMonitor currentBatteryPercentage]
  -[_DKBatteryMonitor completeStart]
  -[_DKBatteryMonitor newBatteryState:differsSignificantlyFromState:currentBatteryPercentage:previousBatteryPercentage:]
  -[_DKBatteryMonitor updateBatteryStateDictionary:currentBatteryPercentage:]
  -[_DKBatteryMonitor synchronouslyReflectCurrentValue]
  -[_DKBatteryMonitor setPreviouslyFullyCharged:]
  -[_DKBatteryMonitor deactivate]
  -[_DKBatteryMonitor previousPercentage]
  -[_DKBatteryMonitor dealloc]
  -[_DKBatteryMonitor setHasInternalBattery:]
  -[_DKBatteryMonitor temperature:differsFrom:]
  -[_DKBatteryMonitor .cxx_destruct]
  -[_DKBatteryMonitor isCharging:differsFrom:]
  -[_DKBatteryMonitor hasInternalBattery]
  -[_DKBatteryMonitor stop]
  -[_DKBatteryMonitor previouslyFullyCharged]
  -[_DKBatteryMonitor immediateShutdownThreshold]
  -[_DKBatteryMonitor batteryStateChangeHandler]
  -[_DKBatteryMonitor externalConnected:differsFrom:]
  -[_DKBatteryMonitor fullyCharged:differsFrom:]
  -[_DKBatteryMonitor previousBatteryState]
  -[_DKBatteryMonitor adapterType:differsFrom:]
  -[_DKBatteryMonitor voltage:differsFrom:]
  -[_DKBatteryMonitor setPreviousPercentage:]
  -[_DKBatteryMonitor postImminentShutdownNotification:]
  -[_DKBatteryMonitor setPreviousBatteryState:]
  -[_DKBatteryMonitor getBatteryProperties]
  -[_DKBatteryMonitor _handleBatteryNotification]
  -[_DKBatteryMonitor _queue_handleNotification]
  -[_DKBatteryMonitor batteryPercentageFromPowerSourceDictionary:]
  -[_DKBatteryMonitor start]
  -[_DKBatteryMonitor fullyChargedFromPowerSourceDictionary:]
  -[_DKBatteryMonitor percentage:differsFrom:]
  -[_DKBatteryMonitor setImmediateShutdownThreshold:]


_DKMDCSWorkoutMonitor : _DKMonitor
 @property  BMWorkoutStream *workoutStream

  // class methods
  +[_DKMDCSWorkoutMonitor eventStream]
  +[_DKMDCSWorkoutMonitor entitlements]

  // instance methods
  -[_DKMDCSWorkoutMonitor setWorkoutStream:]
  -[_DKMDCSWorkoutMonitor workoutStream]
  -[_DKMDCSWorkoutMonitor .cxx_destruct]
  -[_DKMDCSWorkoutMonitor stop]
  -[_DKMDCSWorkoutMonitor start]
  -[_DKMDCSWorkoutMonitor createWorkoutPredicate]
  -[_DKMDCSWorkoutMonitor init]


_DKWakeRequestMonitor : _DKMonitor
 @property  NSDate *nextUserVisibleWakeRequestDate
 @property  NSString *nextUserVisibleWakeRequestor
 @property  int wakeRequestToken
 @property  NSObject<OS_dispatch_source> *updateTimer

  // class methods
  +[_DKWakeRequestMonitor eventStream]
  +[_DKWakeRequestMonitor entitlements]

  // instance methods
  -[_DKWakeRequestMonitor saveState]
  -[_DKWakeRequestMonitor updateTimer]
  -[_DKWakeRequestMonitor setUpdateTimer:]
  -[_DKWakeRequestMonitor loadState]
  -[_DKWakeRequestMonitor synchronouslyReflectCurrentValue]
  -[_DKWakeRequestMonitor deactivate]
  -[_DKWakeRequestMonitor setNextUserVisibleWakeRequestDate:]
  -[_DKWakeRequestMonitor dealloc]
  -[_DKWakeRequestMonitor nextUserVisibleWakeRequestDate]
  -[_DKWakeRequestMonitor wakeRequestToken]
  -[_DKWakeRequestMonitor .cxx_destruct]
  -[_DKWakeRequestMonitor stop]
  -[_DKWakeRequestMonitor setNextUserVisibleWakeRequestor:]
  -[_DKWakeRequestMonitor nextUserVisibleWakeRequestor]
  -[_DKWakeRequestMonitor setWakeRequestToken:]
  -[_DKWakeRequestMonitor start]
  -[_DKWakeRequestMonitor obtainNextUserVisibleWakeRequest]


_DKWiFiConnectionMonitor : _DKMonitor <_DKHistoricalDeletingMonitor>
 @property  NWPathEvaluator *pathEvaluator
 @property  NSString *currentWirelessSSID
 @property  ^{__WiFiManagerClient=} wifiManager
 @property  BMPruner *pruner
 @property  @? historicalDeletingHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKWiFiConnectionMonitor _eventWithSSID:date:]
  +[_DKWiFiConnectionMonitor _BMEventWithSSID:starting:]

  // instance methods
  -[_DKWiFiConnectionMonitor pruner]
  -[_DKWiFiConnectionMonitor setHistoricalDeletingHandler:]
  -[_DKWiFiConnectionMonitor setWifiManager:]
  -[_DKWiFiConnectionMonitor wifiManager]
  -[_DKWiFiConnectionMonitor setPruner:]
  -[_DKWiFiConnectionMonitor .cxx_destruct]
  -[_DKWiFiConnectionMonitor historicalDeletingHandler]
  -[_DKWiFiConnectionMonitor stop]
  -[_DKWiFiConnectionMonitor observeValueForKeyPath:ofObject:change:context:]
  -[_DKWiFiConnectionMonitor setCurrentWirelessSSID:]
  -[_DKWiFiConnectionMonitor start]
  -[_DKWiFiConnectionMonitor setPathEvaluator:]
  -[_DKWiFiConnectionMonitor currentWirelessSSID]
  -[_DKWiFiConnectionMonitor pathEvaluator]


_DKDoNotDisturbMonitor : _DKMonitor <DNDStateUpdateListener>
 @property  DNDStateService *dndStateService
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKDoNotDisturbMonitor eventStream]
  +[_DKDoNotDisturbMonitor _eventWithState:]

  // instance methods
  -[_DKDoNotDisturbMonitor dndStateService]
  -[_DKDoNotDisturbMonitor setDndStateService:]
  -[_DKDoNotDisturbMonitor stateService:didReceiveDoNotDisturbStateUpdate:]
  -[_DKDoNotDisturbMonitor .cxx_destruct]
  -[_DKDoNotDisturbMonitor stop]
  -[_DKDoNotDisturbMonitor start]


_DKNotificationScreenLockMonitor : _DKMonitor <_DKNotificationReceiver, _DKInstantMonitor, _DKHistoricalMonitor>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? instantHandler
 @property  _DKEvent *currentEvent
 @property  @? historicalHandler
 @property  @? shutdownHandler
 @property  NSDate *lastUpdate

  // class methods
  +[_DKNotificationScreenLockMonitor eventStream]
  +[_DKNotificationScreenLockMonitor _eventWithState:]
  +[_DKNotificationScreenLockMonitor setIsLocked:]
  +[_DKNotificationScreenLockMonitor shouldMergeUnchangedEvents]
  +[_DKNotificationScreenLockMonitor entitlements]
  +[_DKNotificationScreenLockMonitor _BMEventWithState:]

  // instance methods
  -[_DKNotificationScreenLockMonitor receiveNotificationEvent:]
  -[_DKNotificationScreenLockMonitor synchronouslyReflectCurrentValue]
  -[_DKNotificationScreenLockMonitor deactivate]
  -[_DKNotificationScreenLockMonitor dealloc]
  -[_DKNotificationScreenLockMonitor .cxx_destruct]
  -[_DKNotificationScreenLockMonitor stop]
  -[_DKNotificationScreenLockMonitor start]


_DKNotificationScreenLockImputedMonitor : _DKMonitor <_DKNotificationReceiver, _DKInstantMonitor, _DKHistoricalMonitor>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? instantHandler
 @property  _DKEvent *currentEvent
 @property  @? historicalHandler
 @property  @? shutdownHandler
 @property  NSDate *lastUpdate

  // class methods
  +[_DKNotificationScreenLockImputedMonitor eventStream]
  +[_DKNotificationScreenLockImputedMonitor _eventWithState:]
  +[_DKNotificationScreenLockImputedMonitor setIsLocked:]
  +[_DKNotificationScreenLockImputedMonitor shouldMergeUnchangedEvents]
  +[_DKNotificationScreenLockImputedMonitor entitlements]

  // instance methods
  -[_DKNotificationScreenLockImputedMonitor receiveNotificationEvent:]
  -[_DKNotificationScreenLockImputedMonitor synchronouslyReflectCurrentValue]
  -[_DKNotificationScreenLockImputedMonitor deactivate]
  -[_DKNotificationScreenLockImputedMonitor dealloc]
  -[_DKNotificationScreenLockImputedMonitor stop]
  -[_DKNotificationScreenLockImputedMonitor setCurrentEventInInstantStateUsingLastKnowledgeStoreEvent]
  -[_DKNotificationScreenLockImputedMonitor fetchMostRecentScreenLockStateEventFromKnowledgeStore]
  -[_DKNotificationScreenLockImputedMonitor start]


_DKNotificationKeybagLockMonitor : _DKMonitor <_DKNotificationReceiver, _DKInstantMonitor, _DKHistoricalMonitor>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? instantHandler
 @property  _DKEvent *currentEvent
 @property  @? historicalHandler
 @property  @? shutdownHandler
 @property  NSDate *lastUpdate

  // class methods
  +[_DKNotificationKeybagLockMonitor eventStream]
  +[_DKNotificationKeybagLockMonitor _eventWithState:]
  +[_DKNotificationKeybagLockMonitor setIsLocked:]
  +[_DKNotificationKeybagLockMonitor shouldMergeUnchangedEvents]
  +[_DKNotificationKeybagLockMonitor entitlements]
  +[_DKNotificationKeybagLockMonitor getCurrentLockState]

  // instance methods
  -[_DKNotificationKeybagLockMonitor receiveNotificationEvent:]
  -[_DKNotificationKeybagLockMonitor synchronouslyReflectCurrentValue]
  -[_DKNotificationKeybagLockMonitor deactivate]
  -[_DKNotificationKeybagLockMonitor dealloc]
  -[_DKNotificationKeybagLockMonitor .cxx_destruct]
  -[_DKNotificationKeybagLockMonitor stop]
  -[_DKNotificationKeybagLockMonitor start]


_DKNotificationWatchNearbyMonitor : _DKMonitor <_DKNotificationReceiver, _DKInstantMonitor, _DKHistoricalMonitor>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? instantHandler
 @property  _DKEvent *currentEvent
 @property  @? historicalHandler
 @property  @? shutdownHandler
 @property  NSDate *lastUpdate

  // class methods
  +[_DKNotificationWatchNearbyMonitor eventStream]
  +[_DKNotificationWatchNearbyMonitor shouldMergeUnchangedEvents]
  +[_DKNotificationWatchNearbyMonitor entitlements]
  +[_DKNotificationWatchNearbyMonitor _eventWithNearbyDeviceCount:]
  +[_DKNotificationWatchNearbyMonitor setIsWatchNearby:]

  // instance methods
  -[_DKNotificationWatchNearbyMonitor receiveNotificationEvent:]
  -[_DKNotificationWatchNearbyMonitor synchronouslyReflectCurrentValue]
  -[_DKNotificationWatchNearbyMonitor deactivate]
  -[_DKNotificationWatchNearbyMonitor dealloc]
  -[_DKNotificationWatchNearbyMonitor setWatchIsNearby]
  -[_DKNotificationWatchNearbyMonitor stop]
  -[_DKNotificationWatchNearbyMonitor start]


_DKNowPlayingMonitor : _DKMonitor
 @property  unsigned int lastPlaybackState
 @property  AVOutputContext *outputContext

  // class methods
  +[_DKNowPlayingMonitor eventStream]
  +[_DKNowPlayingMonitor shouldMergeUnchangedEvents]
  +[_DKNowPlayingMonitor entitlements]
  +[_DKNowPlayingMonitor _eventWithBundleIdentifier:metadata:]
  +[_DKNowPlayingMonitor setPlaybackState:bundleId:track:outputDeviceIDs:mediaType:iTunesStoreIdentifier:iTunesSubscriptionIdentifier:]
  +[_DKNowPlayingMonitor _eventFilterBlock]

  // instance methods
  -[_DKNowPlayingMonitor lastPlaybackState]
  -[_DKNowPlayingMonitor setOutputContext:]
  -[_DKNowPlayingMonitor saveBMEventWithCurrent:outputDevices:]
  -[_DKNowPlayingMonitor synchronouslyReflectCurrentValue]
  -[_DKNowPlayingMonitor deactivate]
  -[_DKNowPlayingMonitor dealloc]
  -[_DKNowPlayingMonitor .cxx_destruct]
  -[_DKNowPlayingMonitor outputContext]
  -[_DKNowPlayingMonitor stop]
  -[_DKNowPlayingMonitor _nowPlayingInfoDidChange:outputDevices:]
  -[_DKNowPlayingMonitor outputDevicesDidChange:]
  -[_DKNowPlayingMonitor _registerForNowPlayingNotifications]
  -[_DKNowPlayingMonitor start]
  -[_DKNowPlayingMonitor setLastPlaybackState:]
  -[_DKNowPlayingMonitor _metadataFromInfo:outputDevices:]
  -[_DKNowPlayingMonitor init]


_DKInCarMonitor : _DKMonitor
 @property  BOOL enabled
 @property  BOOL connected
 @property  int connectedToken
 @property  int disconnectedToken

  // class methods
  +[_DKInCarMonitor eventStream]
  +[_DKInCarMonitor setIsConnected:]
  +[_DKInCarMonitor entitlements]

  // instance methods
  -[_DKInCarMonitor saveState]
  -[_DKInCarMonitor loadState]
  -[_DKInCarMonitor setConnected:]
  -[_DKInCarMonitor connected]
  -[_DKInCarMonitor synchronouslyReflectCurrentValue]
  -[_DKInCarMonitor deactivate]
  -[_DKInCarMonitor dealloc]
  -[_DKInCarMonitor connectedToken]
  -[_DKInCarMonitor setConnectedToken:]
  -[_DKInCarMonitor setEnabled:]
  -[_DKInCarMonitor stop]
  -[_DKInCarMonitor setConnectedStatus:]
  -[_DKInCarMonitor disconnectedToken]
  -[_DKInCarMonitor setDisconnectedToken:]
  -[_DKInCarMonitor enabled]
  -[_DKInCarMonitor start]


_DKNavigationMonitor : _DKMonitor
 @property  BOOL enabled
 @property  BOOL navigating
 @property  int startedToken
 @property  int stoppedToken

  // class methods
  +[_DKNavigationMonitor eventStream]
  +[_DKNavigationMonitor entitlements]
  +[_DKNavigationMonitor setIsNavigating:]

  // instance methods
  -[_DKNavigationMonitor navigating]
  -[_DKNavigationMonitor saveState]
  -[_DKNavigationMonitor setNavigating:]
  -[_DKNavigationMonitor setStartedToken:]
  -[_DKNavigationMonitor loadState]
  -[_DKNavigationMonitor synchronouslyReflectCurrentValue]
  -[_DKNavigationMonitor deactivate]
  -[_DKNavigationMonitor dealloc]
  -[_DKNavigationMonitor startedToken]
  -[_DKNavigationMonitor stoppedToken]
  -[_DKNavigationMonitor setEnabled:]
  -[_DKNavigationMonitor stop]
  -[_DKNavigationMonitor setStoppedToken:]
  -[_DKNavigationMonitor setNavigationStatus:]
  -[_DKNavigationMonitor enabled]
  -[_DKNavigationMonitor start]


_DKLowPowerModeMonitor : _DKMonitor
 @property  NSNumber *lowPowerModeStatus

  // class methods
  +[_DKLowPowerModeMonitor eventStream]
  +[_DKLowPowerModeMonitor shouldMergeUnchangedEvents]
  +[_DKLowPowerModeMonitor setLowPowerMode:]
  +[_DKLowPowerModeMonitor _eventWithLowPowerModeState:]
  +[_DKLowPowerModeMonitor _BMEventWithLowPowerModeState:]

  // instance methods
  -[_DKLowPowerModeMonitor synchronouslyReflectCurrentValue]
  -[_DKLowPowerModeMonitor lowPowerModeStateChanged:]
  -[_DKLowPowerModeMonitor .cxx_destruct]
  -[_DKLowPowerModeMonitor stop]
  -[_DKLowPowerModeMonitor start]
  -[_DKLowPowerModeMonitor lowPowerModeStatus]
  -[_DKLowPowerModeMonitor setLowPowerModeStatus:]
  -[_DKLowPowerModeMonitor updateLowPowerMode]


_DKUserIsFirstBacklightOnAfterWakeupMonitor : _DKMonitor <_DKNotificationReceiver, _DKInstantMonitor, _DKHistoricalMonitor>
 @property  BOOL FirstWakeUINotificationEnabled
 @property  BOOL SoftwareUpdateUINotificationEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? instantHandler
 @property  _DKEvent *currentEvent
 @property  @? historicalHandler
 @property  @? shutdownHandler
 @property  NSDate *lastUpdate

  // class methods
  +[_DKUserIsFirstBacklightOnAfterWakeupMonitor eventStream]
  +[_DKUserIsFirstBacklightOnAfterWakeupMonitor prettyPrintDateAsLocalTime:]
  +[_DKUserIsFirstBacklightOnAfterWakeupMonitor fetchMostRecentPastEventForStream:]
  +[_DKUserIsFirstBacklightOnAfterWakeupMonitor fetchMostRecentlyStoredScreenLockEventOnlyIfValueIsUnlocked]

  // instance methods
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor isInternalBuild]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor setInternalSettingsChangedNotficationHandler]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor receiveNotificationEvent:]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor firstWakeupEventWithValue:]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor registerHandleBacklightEvents]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor deactivate]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor dealloc]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor isFirstBacklightOn]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor didQualifyingScreenLockEndInEligibilityPeriod]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor showSoftwareUpdateUINotification]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor .cxx_destruct]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor convertUTCToLocalTimeString:]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor showUINotification:]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor eligibleForFirstWakeUINotification]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor stop]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor showFirstWakeupUINotification]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor handleBacklightTurnedOffEvent]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor unregisterHandleBacklightEvents]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor FirstWakeUINotificationEnabled]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor setFirstWakeUINotificationEnabled:]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor getNextSWUpdatePrediction]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor setSoftwareUpdateUINotificationEnabled:]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor setupNotificationEligiblityPeriod]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor handleScreenUnlockEvent]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor start]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor isUINotificationEnabledForKey:]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor setUINotificationEligibility]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor SoftwareUpdateUINotificationEnabled]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor handleBacklightTurnedOnEvent]
  -[_DKUserIsFirstBacklightOnAfterWakeupMonitor recordFirstWakeup:]


_DKLocationCoordinatesMonitor : _DKMonitor <CLLocationManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKLocationCoordinatesMonitor eventStream]
  +[_DKLocationCoordinatesMonitor entitlements]
  +[_DKLocationCoordinatesMonitor log]

  // instance methods
  -[_DKLocationCoordinatesMonitor locationManager:didFailWithError:]
  -[_DKLocationCoordinatesMonitor .cxx_destruct]
  -[_DKLocationCoordinatesMonitor stop]
  -[_DKLocationCoordinatesMonitor locationManagerDidChangeAuthorization:]
  -[_DKLocationCoordinatesMonitor start]
  -[_DKLocationCoordinatesMonitor locationManager:didUpdateLocations:]
  -[_DKLocationCoordinatesMonitor init]
  -[_DKLocationCoordinatesMonitor locationTypeFrom:]
  -[_DKLocationCoordinatesMonitor speedRangeFrom:]
  -[_DKLocationCoordinatesMonitor altitudeRangeFrom:]


_DKOrientationMonitor : _DKMonitor
  // class methods
  +[_DKOrientationMonitor eventStream]
  +[_DKOrientationMonitor _eventWithValue:]
  +[_DKOrientationMonitor entitlements]
  +[_DKOrientationMonitor _BMEventWithValue:]

  // instance methods
  -[_DKOrientationMonitor deactivate]
  -[_DKOrientationMonitor dealloc]
  -[_DKOrientationMonitor .cxx_destruct]
  -[_DKOrientationMonitor stop]
  -[_DKOrientationMonitor start]


_DKScreenSharingMonitor : _DKMonitor
 @property  AVOutputContext *outputContext
 @property  BMScreenSharingStream *screenSharingStream
 @property  long long currentMirroringDeviceCount

  // class methods
  +[_DKScreenSharingMonitor eventStream]
  +[_DKScreenSharingMonitor entitlements]

  // instance methods
  -[_DKScreenSharingMonitor setOutputContext:]
  -[_DKScreenSharingMonitor screenSharingStream]
  -[_DKScreenSharingMonitor deactivate]
  -[_DKScreenSharingMonitor .cxx_destruct]
  -[_DKScreenSharingMonitor outputContext]
  -[_DKScreenSharingMonitor stop]
  -[_DKScreenSharingMonitor currentMirroringDeviceCount]
  -[_DKScreenSharingMonitor mirroringDidChange:]
  -[_DKScreenSharingMonitor start]
  -[_DKScreenSharingMonitor registerForScreenMirroringNotifications]
  -[_DKScreenSharingMonitor setCurrentMirroringDeviceCount:]
  -[_DKScreenSharingMonitor setScreenSharingStream:]
  -[_DKScreenSharingMonitor init]


_DKAppInstallMonitor : _DKMonitor <LSApplicationWorkspaceObserverProtocol, _DKHistoricalDeletingMonitor>
 @property  LSApplicationWorkspace *appWorkspace
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? historicalDeletingHandler

  // class methods
  +[_DKAppInstallMonitor eventStream]
  +[_DKAppInstallMonitor entitlements]
  +[_DKAppInstallMonitor _metadataFromProxy:didInstall:]
  +[_DKAppInstallMonitor _identifierFromProxy:]
  +[_DKAppInstallMonitor _dateFromProxy:]
  +[_DKAppInstallMonitor _eventWithAppProxy:didInstall:]

  // instance methods
  -[_DKAppInstallMonitor applicationsDidInstall:]
  -[_DKAppInstallMonitor setHistoricalDeletingHandler:]
  -[_DKAppInstallMonitor appWorkspace]
  -[_DKAppInstallMonitor applicationsDidUninstall:]
  -[_DKAppInstallMonitor .cxx_destruct]
  -[_DKAppInstallMonitor historicalDeletingHandler]
  -[_DKAppInstallMonitor setAppWorkspace:]
  -[_DKAppInstallMonitor _applicationsDidChange:didInstall:]
  -[_DKAppInstallMonitor init]


_DKBluetoothMonitor : _DKMonitor <_DKNotificationReceiver, _DKHistoricalDeletingMonitor>
 @property  NSMutableDictionary *activeConnections
 @property  NSMutableDictionary *inactiveConnections
 @property  BMPruner *pruner
 @property  NSObject<OS_dispatch_queue> *batteryLevelPollingQueue
 @property  NSObject<OS_dispatch_source> *batteryLevelPollingTimer
 @property  NSDictionary *batteryLevels
 @property  NSLock *connectionUpdateLock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? historicalDeletingHandler

  // class methods
  +[_DKBluetoothMonitor eventStream]
  +[_DKBluetoothMonitor entitlements]
  +[_DKBluetoothMonitor log]
  +[_DKBluetoothMonitor audioProductsBatteryLevels]
  +[_DKBluetoothMonitor _eventWithState:name:address:type:isAppleAudioDevice:isUserWearing:productID:accessoryBatteryLevels:]
  +[_DKBluetoothMonitor BMDeviceBluetoothDeviceTypeFromBTDeviceType:]
  +[_DKBluetoothMonitor _BMEventFromDKEvent:starting:]
  +[_DKBluetoothMonitor contextValueForBluetoothConnectionStatus:name:address:deviceType:isAppleAudioDevice:isUserWearing:productID:]

  // instance methods
  -[_DKBluetoothMonitor pruner]
  -[_DKBluetoothMonitor setHistoricalDeletingHandler:]
  -[_DKBluetoothMonitor saveState]
  -[_DKBluetoothMonitor handleUnpairingEvent:]
  -[_DKBluetoothMonitor connectionUpdateLock]
  -[_DKBluetoothMonitor receiveNotificationEvent:]
  -[_DKBluetoothMonitor batteryLevelPollingTimer]
  -[_DKBluetoothMonitor setActiveConnections:]
  -[_DKBluetoothMonitor setBatteryLevelPollingTimer:]
  -[_DKBluetoothMonitor loadState]
  -[_DKBluetoothMonitor setPruner:]
  -[_DKBluetoothMonitor setBatteryLevelPollingQueue:]
  -[_DKBluetoothMonitor deactivate]
  -[_DKBluetoothMonitor activeConnections]
  -[_DKBluetoothMonitor dealloc]
  -[_DKBluetoothMonitor setConnectionUpdateLock:]
  -[_DKBluetoothMonitor .cxx_destruct]
  -[_DKBluetoothMonitor historicalDeletingHandler]
  -[_DKBluetoothMonitor batteryLevelPollingQueue]
  -[_DKBluetoothMonitor stop]
  -[_DKBluetoothMonitor _inEarStatusForDevice:]
  -[_DKBluetoothMonitor inactiveConnections]
  -[_DKBluetoothMonitor updateCurrentBatteryLevels]
  -[_DKBluetoothMonitor start]
  -[_DKBluetoothMonitor batteryLevels]
  -[_DKBluetoothMonitor setInactiveConnections:]
  -[_DKBluetoothMonitor init]
  -[_DKBluetoothMonitor setBatteryLevels:]


_DKNetworkQualityMonitor : _DKMonitor <NWNetworkOfInterestManagerDelegate>
 @property  NSArray *noiKeyPaths
 @property  NSObject<OS_dispatch_queue> *noiManagerQueue
 @property  NWNetworkOfInterestManager *noiManager
 @property  NWNetworkOfInterest *noi
 @property  long long previousQuality
 @property  long long interfaceType
 @property  _CDContextualKeyPath *qualityKeyPath
 @property  _CDContextualKeyPath *predictedQualityKeyPath
 @property  _CDContextualKeyPath *discretionaryInvitedKeyPath
 @property  _CDContextualKeyPath *statusKeyPath
 @property  NSMutableDictionary *statusDictionary
 @property  BOOL initialized
 @property  BOOL enabled

  // class methods
  +[_DKNetworkQualityMonitor entitlements]

  // instance methods
  -[_DKNetworkQualityMonitor initialized]
  -[_DKNetworkQualityMonitor interfaceType]
  -[_DKNetworkQualityMonitor saveState]
  -[_DKNetworkQualityMonitor setInitialized:]
  -[_DKNetworkQualityMonitor statusDictionary]
  -[_DKNetworkQualityMonitor loadState]
  -[_DKNetworkQualityMonitor didStopTrackingNOI:]
  -[_DKNetworkQualityMonitor synchronouslyReflectCurrentValue]
  -[_DKNetworkQualityMonitor deactivate]
  -[_DKNetworkQualityMonitor didStopTrackingAllNOIs:]
  -[_DKNetworkQualityMonitor dealloc]
  -[_DKNetworkQualityMonitor .cxx_destruct]
  -[_DKNetworkQualityMonitor setEnabled:]
  -[_DKNetworkQualityMonitor stop]
  -[_DKNetworkQualityMonitor observeValueForKeyPath:ofObject:change:context:]
  -[_DKNetworkQualityMonitor didStartTrackingNOI:]
  -[_DKNetworkQualityMonitor setInterfaceType:]
  -[_DKNetworkQualityMonitor enabled]
  -[_DKNetworkQualityMonitor start]
  -[_DKNetworkQualityMonitor initForInterfaceType:connectionStatusKeyPath:qualityKeyPath:predictedQualityKeyPath:discretionaryInvitedPath:]
  -[_DKNetworkQualityMonitor predictionTimelineFromNOIPredictions:]
  -[_DKNetworkQualityMonitor updatePredictionAsync]
  -[_DKNetworkQualityMonitor updateInstantQuality]
  -[_DKNetworkQualityMonitor updateDiscretionaryTrafficInvited]
  -[_DKNetworkQualityMonitor updatePowerCostDL]
  -[_DKNetworkQualityMonitor updatePowerCostUL]
  -[_DKNetworkQualityMonitor updateInterfaceClass]
  -[_DKNetworkQualityMonitor noiKeyPaths]
  -[_DKNetworkQualityMonitor setNoiKeyPaths:]
  -[_DKNetworkQualityMonitor noiManagerQueue]
  -[_DKNetworkQualityMonitor setNoiManagerQueue:]
  -[_DKNetworkQualityMonitor noiManager]
  -[_DKNetworkQualityMonitor setNoiManager:]
  -[_DKNetworkQualityMonitor noi]
  -[_DKNetworkQualityMonitor setNoi:]
  -[_DKNetworkQualityMonitor previousQuality]
  -[_DKNetworkQualityMonitor setPreviousQuality:]
  -[_DKNetworkQualityMonitor qualityKeyPath]
  -[_DKNetworkQualityMonitor setQualityKeyPath:]
  -[_DKNetworkQualityMonitor predictedQualityKeyPath]
  -[_DKNetworkQualityMonitor setPredictedQualityKeyPath:]
  -[_DKNetworkQualityMonitor discretionaryInvitedKeyPath]
  -[_DKNetworkQualityMonitor setDiscretionaryInvitedKeyPath:]
  -[_DKNetworkQualityMonitor statusKeyPath]
  -[_DKNetworkQualityMonitor setStatusKeyPath:]
  -[_DKNetworkQualityMonitor setStatusDictionary:]


_DKWiredNetworkQualityMonitor : _DKNetworkQualityMonitor
  // class methods
  +[_DKWiredNetworkQualityMonitor eventStream]

  // instance methods
  -[_DKWiredNetworkQualityMonitor init]


_DKWifiNetworkQualityMonitor : _DKNetworkQualityMonitor
  // class methods
  +[_DKWifiNetworkQualityMonitor eventStream]

  // instance methods
  -[_DKWifiNetworkQualityMonitor init]


_DKCellNetworkingQualityMonitor : _DKNetworkQualityMonitor
  // class methods
  +[_DKCellNetworkingQualityMonitor eventStream]

  // instance methods
  -[_DKCellNetworkingQualityMonitor init]


_DKTemporalNumericState : NSObject <NSSecureCoding>
 @property  NSNumber *state
 @property  NSDate *timestamp

  // class methods
  +[_DKTemporalNumericState supportsSecureCoding]

  // instance methods
  -[_DKTemporalNumericState setTimestamp:]
  -[_DKTemporalNumericState encodeWithCoder:]
  -[_DKTemporalNumericState state]
  -[_DKTemporalNumericState .cxx_destruct]
  -[_DKTemporalNumericState timestamp]
  -[_DKTemporalNumericState setState:]
  -[_DKTemporalNumericState initWithCoder:]
  -[_DKTemporalNumericState initWithState:timestamp:]


_DKApplicationMonitor : _DKMonitor <FBSDisplayLayoutObserver>
 @property  BMStream *layoutStream
 @property  BMSource *layoutSource
 @property  BMFrontBoardDisplayLayout *lastLayoutEvent
 @property  FBSDisplayLayoutMonitor *monitor
 @property  NSMutableArray *previouslyForegroundServices
 @property  BKSApplicationStateMonitor *bksMonitor
 @property  NSMutableDictionary *activeExtensions
 @property  NSSet *servicesOfInterestForWatchCommunication
 @property  BMAppLaunchStream *appLaunchStream
 @property  NSString *lastIdentifierSet
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKApplicationMonitor eventStream]
  +[_DKApplicationMonitor _defaultEvent]
  +[_DKApplicationMonitor entitlements]
  +[_DKApplicationMonitor debugCategory]
  +[_DKApplicationMonitor addServicesForeground:andRemoveServices:]
  +[_DKApplicationMonitor setFocalApplication:launchReason:]
  +[_DKApplicationMonitor _eventWithBundleIdentifier:launchReason:shortVersionString:exactBundleVersion:]
  +[_DKApplicationMonitor _eventFilterBlock]

  // instance methods
  -[_DKApplicationMonitor setMonitor:]
  -[_DKApplicationMonitor monitor]
  -[_DKApplicationMonitor layoutSource]
  -[_DKApplicationMonitor setLayoutSource:]
  -[_DKApplicationMonitor lastLayoutEvent]
  -[_DKApplicationMonitor setLastLayoutEvent:]
  -[_DKApplicationMonitor obtainCurrentValue]
  -[_DKApplicationMonitor synchronouslyReflectCurrentValue]
  -[_DKApplicationMonitor platformSpecificStart]
  -[_DKApplicationMonitor deactivate]
  -[_DKApplicationMonitor platformSpecificStop]
  -[_DKApplicationMonitor previouslyForegroundServices]
  -[_DKApplicationMonitor setLastIdentifierSet:]
  -[_DKApplicationMonitor dealloc]
  -[_DKApplicationMonitor servicesOfInterestForWatchCommunication]
  -[_DKApplicationMonitor appLaunchStream]
  -[_DKApplicationMonitor .cxx_destruct]
  -[_DKApplicationMonitor bksMonitor]
  -[_DKApplicationMonitor layoutStream]
  -[_DKApplicationMonitor stop]
  -[_DKApplicationMonitor layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[_DKApplicationMonitor donateDisplayLayout:withContext:]
  -[_DKApplicationMonitor setAppLaunchStream:]
  -[_DKApplicationMonitor setPreviouslyForegroundServices:]
  -[_DKApplicationMonitor currentActiveComplications]
  -[_DKApplicationMonitor setLayoutStream:]
  -[_DKApplicationMonitor lastIdentifierSet]
  -[_DKApplicationMonitor setServicesOfInterestForWatchCommunication:]
  -[_DKApplicationMonitor start]
  -[_DKApplicationMonitor setBksMonitor:]
  -[_DKApplicationMonitor activeExtensions]
  -[_DKApplicationMonitor setCurrentActiveComplications]
  -[_DKApplicationMonitor ignoreAppExtension:]
  -[_DKApplicationMonitor setActiveExtensions:]
  -[_DKApplicationMonitor init]
  -[_DKApplicationMonitor registerForActiveComplicationChangeNotifications]


_DKCalendarMonitor : _DKMonitor
  // class methods
  +[_DKCalendarMonitor eventStream]
  +[_DKCalendarMonitor entitlements]
  +[_DKCalendarMonitor _eventWithTitle:interaction:]

  // instance methods
  -[_DKCalendarMonitor deactivate]
  -[_DKCalendarMonitor dealloc]
  -[_DKCalendarMonitor _receiveDatabaseChangeNotification:]
  -[_DKCalendarMonitor update]
  -[_DKCalendarMonitor stop]
  -[_DKCalendarMonitor start]
  -[_DKCalendarMonitor init]


_DKLocationMonitor : _DKMonitor <CLLocationManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKLocationMonitor eventStream]
  +[_DKLocationMonitor entitlements]

  // instance methods
  -[_DKLocationMonitor _handleVisit:]
  -[_DKLocationMonitor .cxx_destruct]
  -[_DKLocationMonitor stop]
  -[_DKLocationMonitor locationManagerDidChangeAuthorization:]
  -[_DKLocationMonitor locationManager:didVisit:]
  -[_DKLocationMonitor start]
  -[_DKLocationMonitor _locationFromVisit:]
  -[_DKLocationMonitor placeTypeFromType:]
  -[_DKLocationMonitor init]
  -[_DKLocationMonitor userSpecificPlaceTypeFromType:]


_DKAudioOutputMonitor : _DKMonitor
  // class methods
  +[_DKAudioOutputMonitor eventStream]
  +[_DKAudioOutputMonitor entitlements]
  +[_DKAudioOutputMonitor _BMEventWithState:type:name:identifier:routeChangeReason:]
  +[_DKAudioOutputMonitor _eventWithState:type:name:identifier:routeChangeReason:]
  +[_DKAudioOutputMonitor contextValueForAudioOutputConnectionStatus:type:name:identifier:routeChangeReason:]

  // instance methods
  -[_DKAudioOutputMonitor deactivate]
  -[_DKAudioOutputMonitor dealloc]
  -[_DKAudioOutputMonitor onAudioRouteChangeNotification:]
  -[_DKAudioOutputMonitor .cxx_destruct]
  -[_DKAudioOutputMonitor stop]
  -[_DKAudioOutputMonitor start]
  -[_DKAudioOutputMonitor init]


_DKAudioInputMonitor : _DKMonitor
  // class methods
  +[_DKAudioInputMonitor eventStream]
  +[_DKAudioInputMonitor _BMEventWithState:type:name:identifier:routeChangeReason:]
  +[_DKAudioInputMonitor entitlement]
  +[_DKAudioInputMonitor _eventWithState:type:name:identifier:routeChangeReason:]

  // instance methods
  -[_DKAudioInputMonitor deactivate]
  -[_DKAudioInputMonitor dealloc]
  -[_DKAudioInputMonitor onAudioRouteChangeNotification:]
  -[_DKAudioInputMonitor .cxx_destruct]
  -[_DKAudioInputMonitor stop]
  -[_DKAudioInputMonitor start]


_DKAssertionsPreventingRestartMonitor : _DKMonitor
 @property  int userspaceAssertionsToken
 @property  int preventIdleSleepAssertionsToken
 @property  int systemAssertionsToken
 @property  int restartPreventerAssertionsToken
 @property  BOOL lastPreventingRestartAssertionsStatus

  // class methods
  +[_DKAssertionsPreventingRestartMonitor eventStream]
  +[_DKAssertionsPreventingRestartMonitor entitlements]

  // instance methods
  -[_DKAssertionsPreventingRestartMonitor saveState]
  -[_DKAssertionsPreventingRestartMonitor loadState]
  -[_DKAssertionsPreventingRestartMonitor setPreventIdleSleepAssertionsToken:]
  -[_DKAssertionsPreventingRestartMonitor systemAssertionsToken]
  -[_DKAssertionsPreventingRestartMonitor synchronouslyReflectCurrentValue]
  -[_DKAssertionsPreventingRestartMonitor deactivate]
  -[_DKAssertionsPreventingRestartMonitor dealloc]
  -[_DKAssertionsPreventingRestartMonitor setSystemAssertionsToken:]
  -[_DKAssertionsPreventingRestartMonitor restartPreventerAssertionsToken]
  -[_DKAssertionsPreventingRestartMonitor stop]
  -[_DKAssertionsPreventingRestartMonitor setRestartPreventerAssertionsToken:]
  -[_DKAssertionsPreventingRestartMonitor preventIdleSleepAssertionsToken]
  -[_DKAssertionsPreventingRestartMonitor userspaceAssertionsToken]
  -[_DKAssertionsPreventingRestartMonitor lastPreventingRestartAssertionsStatus]
  -[_DKAssertionsPreventingRestartMonitor start]
  -[_DKAssertionsPreventingRestartMonitor setLastPreventingRestartAssertionsStatus:]
  -[_DKAssertionsPreventingRestartMonitor areAssertionsPreventingRestart]
  -[_DKAssertionsPreventingRestartMonitor setUserspaceAssertionsToken:]


_DKSunriseSunsetMonitor : _DKMonitor <CLLocationManagerDelegate>
 @property  BOOL enabled
 @property  NSObject<OS_dispatch_source> *updateTimer
 @property  unsigned long updateInterval
 @property  CLLocationManager *manager
 @property  NSDictionary *previousDataDictionary
 @property  BOOL awaitingLocationAfterDisabledAirplaneMode
 @property  int authorizationStatus
 @property  NSObject<OS_os_log> *log
 @property  ^{__SCPreferences=} radioPrefs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKSunriseSunsetMonitor eventStream]
  +[_DKSunriseSunsetMonitor entitlements]

  // instance methods
  -[_DKSunriseSunsetMonitor isAirplaneModeEnabled]
  -[_DKSunriseSunsetMonitor setUpdateInterval:]
  -[_DKSunriseSunsetMonitor locationManager:didFailWithError:]
  -[_DKSunriseSunsetMonitor updateInterval]
  -[_DKSunriseSunsetMonitor saveState]
  -[_DKSunriseSunsetMonitor updateTimer]
  -[_DKSunriseSunsetMonitor setAwaitingLocationAfterDisabledAirplaneMode:]
  -[_DKSunriseSunsetMonitor setUpdateTimer:]
  -[_DKSunriseSunsetMonitor locationManager:didChangeAuthorizationStatus:]
  -[_DKSunriseSunsetMonitor loadState]
  -[_DKSunriseSunsetMonitor setManager:]
  -[_DKSunriseSunsetMonitor setPreviousDataDictionary:]
  -[_DKSunriseSunsetMonitor setAuthorizationStatus:]
  -[_DKSunriseSunsetMonitor deactivate]
  -[_DKSunriseSunsetMonitor dealloc]
  -[_DKSunriseSunsetMonitor authorizationStatus]
  -[_DKSunriseSunsetMonitor .cxx_destruct]
  -[_DKSunriseSunsetMonitor setEnabled:]
  -[_DKSunriseSunsetMonitor stop]
  -[_DKSunriseSunsetMonitor previousDataDictionary]
  -[_DKSunriseSunsetMonitor respondToTimeChange:]
  -[_DKSunriseSunsetMonitor currentSunriseSunsetTimes:differsFromPreviousTimes:byInterval:]
  -[_DKSunriseSunsetMonitor radioPrefs]
  -[_DKSunriseSunsetMonitor log]
  -[_DKSunriseSunsetMonitor unprotectedUpdateSunriseSunsetTime:]
  -[_DKSunriseSunsetMonitor manager]
  -[_DKSunriseSunsetMonitor enabled]
  -[_DKSunriseSunsetMonitor setRadioPrefs:]
  -[_DKSunriseSunsetMonitor start]
  -[_DKSunriseSunsetMonitor respondToAirplaneModeStatusChanged]
  -[_DKSunriseSunsetMonitor awaitingLocationAfterDisabledAirplaneMode]
  -[_DKSunriseSunsetMonitor locationManager:didUpdateLocations:]
  -[_DKSunriseSunsetMonitor setLog:]
  -[_DKSunriseSunsetMonitor init]
  -[_DKSunriseSunsetMonitor contextDictionaryWithGeoAlmanac:authorizationStatus:]
  -[_DKSunriseSunsetMonitor isAirplaneModeEnabledWithPreferences:]


_DKPluggedInMonitor : _DKMonitor
 @property  BOOL enabled
 @property  int pluggedInToken

  // class methods
  +[_DKPluggedInMonitor eventStream]
  +[_DKPluggedInMonitor shouldMergeUnchangedEvents]
  +[_DKPluggedInMonitor entitlements]
  +[_DKPluggedInMonitor setIsPluggedIn:]
  +[_DKPluggedInMonitor _eventWithState:adapterType:isWireless:]
  +[_DKPluggedInMonitor _BMEventWithState:adapterType:isWireless:]

  // instance methods
  -[_DKPluggedInMonitor pluggedInToken]
  -[_DKPluggedInMonitor synchronouslyReflectCurrentValue]
  -[_DKPluggedInMonitor deactivate]
  -[_DKPluggedInMonitor dealloc]
  -[_DKPluggedInMonitor .cxx_destruct]
  -[_DKPluggedInMonitor setEnabled:]
  -[_DKPluggedInMonitor stop]
  -[_DKPluggedInMonitor setCurrentState]
  -[_DKPluggedInMonitor enabled]
  -[_DKPluggedInMonitor start]
  -[_DKPluggedInMonitor setPluggedInToken:]


_DKStarkMonitor : _DKMonitor <CARSessionObserving>
 @property  CARSessionStatus *sessionStatus
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_DKStarkMonitor eventStream]
  +[_DKStarkMonitor _eventWithState:]
  +[_DKStarkMonitor entitlements]

  // instance methods
  -[_DKStarkMonitor sessionDidDisconnect:]
  -[_DKStarkMonitor sessionStatus]
  -[_DKStarkMonitor synchronouslyReflectCurrentValue]
  -[_DKStarkMonitor deactivate]
  -[_DKStarkMonitor dealloc]
  -[_DKStarkMonitor .cxx_destruct]
  -[_DKStarkMonitor updateCurrentState]
  -[_DKStarkMonitor stop]
  -[_DKStarkMonitor start]
  -[_DKStarkMonitor sessionDidConnect:]
  -[_DKStarkMonitor setSessionStatus:]


_DKDeviceActivityLevelMonitor : _DKMonitor
 @property  BOOL enabled
 @property  BOOL initialized
 @property  unsigned long lastInUseStatus
 @property  unsigned long currentInUseStatus
 @property  NSDate *lastSetActiveDate
 @property  <_CDLocalContext> *context
 @property  _CDContextualKeyPath *lastUseDate
 @property  _CDContextualKeyPath *inUseStatus
 @property  NSObject<OS_dispatch_source> *debounceTimer
 @property  unsigned long userActivityNotificationHandle
 @property  int siriToken
 @property  BOOL limitsImposed
 @property  BOOL limitsInitialized
 @property  _CDContextualKeyPath *keyPathForReducedPerfStateStatus
 @property  _CDContextualKeyPath *keyPathForDeviceToppingOff

  // class methods
  +[_DKDeviceActivityLevelMonitor eventStream]
  +[_DKDeviceActivityLevelMonitor _eventWithState:]
  +[_DKDeviceActivityLevelMonitor shouldMergeUnchangedEvents]
  +[_DKDeviceActivityLevelMonitor entitlements]
  +[_DKDeviceActivityLevelMonitor initialize]

  // instance methods
  -[_DKDeviceActivityLevelMonitor initialized]
  -[_DKDeviceActivityLevelMonitor userActivityNotificationHandle]
  -[_DKDeviceActivityLevelMonitor setInitialized:]
  -[_DKDeviceActivityLevelMonitor keyPathForReducedPerfStateStatus]
  -[_DKDeviceActivityLevelMonitor debounceTimer]
  -[_DKDeviceActivityLevelMonitor synchronouslyReflectCurrentValue]
  -[_DKDeviceActivityLevelMonitor deactivate]
  -[_DKDeviceActivityLevelMonitor dealloc]
  -[_DKDeviceActivityLevelMonitor setLastUseDate:]
  -[_DKDeviceActivityLevelMonitor lastInUseStatus]
  -[_DKDeviceActivityLevelMonitor .cxx_destruct]
  -[_DKDeviceActivityLevelMonitor setEnabled:]
  -[_DKDeviceActivityLevelMonitor stop]
  -[_DKDeviceActivityLevelMonitor setLastActivityDate:]
  -[_DKDeviceActivityLevelMonitor setCurrentInUseStatus:]
  -[_DKDeviceActivityLevelMonitor setSiriToken:]
  -[_DKDeviceActivityLevelMonitor setLastInUseStatus:]
  -[_DKDeviceActivityLevelMonitor setKeyPathForReducedPerfStateStatus:]
  -[_DKDeviceActivityLevelMonitor setLastSetActiveDate:]
  -[_DKDeviceActivityLevelMonitor setKeyPathForDeviceToppingOff:]
  -[_DKDeviceActivityLevelMonitor setDebounceTimer:]
  -[_DKDeviceActivityLevelMonitor setLimitsImposed:]
  -[_DKDeviceActivityLevelMonitor siriToken]
  -[_DKDeviceActivityLevelMonitor setContext:]
  -[_DKDeviceActivityLevelMonitor inUseStatus]
  -[_DKDeviceActivityLevelMonitor setLimitsInitialized:]
  -[_DKDeviceActivityLevelMonitor limitsImposed]
  -[_DKDeviceActivityLevelMonitor keyPathForDeviceToppingOff]
  -[_DKDeviceActivityLevelMonitor enabled]
  -[_DKDeviceActivityLevelMonitor start]
  -[_DKDeviceActivityLevelMonitor context]
  -[_DKDeviceActivityLevelMonitor limitsInitialized]
  -[_DKDeviceActivityLevelMonitor currentInUseStatus]
  -[_DKDeviceActivityLevelMonitor setInUseStatus:]
  -[_DKDeviceActivityLevelMonitor handleUserActivity:]
  -[_DKDeviceActivityLevelMonitor setUserActivityNotificationHandle:]
  -[_DKDeviceActivityLevelMonitor lastSetActiveDate]
  -[_DKDeviceActivityLevelMonitor updateActivityDateAndInUseState:]
  -[_DKDeviceActivityLevelMonitor lastUseDate]
  -[_DKDeviceActivityLevelMonitor updateActivityInUseState:]
  -[_DKDeviceActivityLevelMonitor updatePerformanceThrottleStatusWithLevel:]


_DKThermalPressureMonitor : _DKMonitor
 @property  BOOL initialized
 @property  int thermalPressureToken
 @property  int lastThermalPressureLevel
 @property  int peakPowerPressureToken
 @property  BOOL peakPowerPressureLevel

  // class methods
  +[_DKThermalPressureMonitor eventStream]
  +[_DKThermalPressureMonitor entitlements]

  // instance methods
  -[_DKThermalPressureMonitor initialized]
  -[_DKThermalPressureMonitor saveState]
  -[_DKThermalPressureMonitor setInitialized:]
  -[_DKThermalPressureMonitor loadState]
  -[_DKThermalPressureMonitor peakPowerPressureToken]
  -[_DKThermalPressureMonitor synchronouslyReflectCurrentValue]
  -[_DKThermalPressureMonitor deactivate]
  -[_DKThermalPressureMonitor setLastThermalPressureLevel:]
  -[_DKThermalPressureMonitor thermalPressureToken]
  -[_DKThermalPressureMonitor dealloc]
  -[_DKThermalPressureMonitor stop]
  -[_DKThermalPressureMonitor setThermalPressureToken:]
  -[_DKThermalPressureMonitor peakPowerPressureLevel]
  -[_DKThermalPressureMonitor lastThermalPressureLevel]
  -[_DKThermalPressureMonitor setCurrentThermalLevel:]
  -[_DKThermalPressureMonitor getPeakPowerPressureLevelWithToken:]
  -[_DKThermalPressureMonitor start]
  -[_DKThermalPressureMonitor setCurrentPeakPowerPressureLevel:]
  -[_DKThermalPressureMonitor setPeakPowerPressureLevel:]
  -[_DKThermalPressureMonitor getThermalPressureLevelWithToken:]
  -[_DKThermalPressureMonitor setPeakPowerPressureToken:]


_DKPeriod : NSObject <DKPeriodType>
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  double duration

  // class methods
  +[_DKPeriod periodWithStart:duration:]
  +[_DKPeriod periodWithStart:end:]
  +[_DKPeriod periodWithEnd:duration:]

  // instance methods
  -[_DKPeriod endDate]
  -[_DKPeriod contains:]
  -[_DKPeriod .cxx_destruct]
  -[_DKPeriod duration]
  -[_DKPeriod initWithStart:andEnd:]
  -[_DKPeriod startDate]


BMFrontBoardDisplayLayout(DKIsDuplicate)
	// instance methods
	-[BMFrontBoardDisplayLayout(DKIsDuplicate) dk_isDuplicateOf:]

CLLocation(LocationHash)
	// instance methods
	-[CLLocation(LocationHash) cd_locationHashWithLevel:]
	-[CLLocation(LocationHash) cd_privacyPreservingLocationHashWithLevel:]

_DKEvent(DKPeriodType)
	// instance methods
	-[_DKEvent(DKPeriodType) duration]

01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputContext 
01 00 0700 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSApplicationStateMonitor 
01 00 0400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMAppLaunchEvent 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMAudioRoute 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceAirplaneMode 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceBatteryLevel 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceBluetooth 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceInterfaceOrientation 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceKeybagLocked 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceLowPowerMode 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDevicePluggedIn 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceScreenLocked 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMDeviceWiFi 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMFrontBoardDisplayLayout 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMFrontBoardDisplayLayoutDisplay 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMFrontBoardDisplayLayoutElement 
01 00 2c00 /System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary: BMLocationHashedCoordinates 
01 00 0400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMNowPlayingEvent 
01 00 0400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMScreenSharingEvent 
01 00 0400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMScreenSharingStream 
01 00 0400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMSemanticLocationEvent 
01 00 0400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMSemanticLocationStream 
01 00 0400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMStreams 
01 00 0e00 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothManager 
01 00 1c00 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CARSessionStatus 
01 00 0d00 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 0d00 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationManager 
01 00 0c00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMMotionActivityManager 
01 00 1e00 /System/Library/PrivateFrameworks/DoNotDisturb.framework/DoNotDisturb: DNDStateService 
01 00 0f00 /System/Library/Frameworks/EventKit.framework/EventKit: EKEventStore 
01 00 1200 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutElement 
01 00 1200 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitor 
01 00 1200 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitorConfiguration 
01 00 1200 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayMonitor 
01 00 1600 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOAlmanac 
01 00 3100 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 3100 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 3100 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleRecord 
01 00 3100 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSPlugInKitProxy 
01 00 1a00 /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry: NRPairedDeviceRegistry 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 2d00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 2900 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0100 /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed: NWNetworkOfInterestManager 
01 00 3200 /System/Library/Frameworks/Network.framework/Network: NWPathEvaluator 
01 00 0a00 /System/Library/PrivateFrameworks/CoreRoutine.framework/CoreRoutine: RTRoutineManager 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDClientContext 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDContextPredictionQueries 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDContextQueries 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDContextualChangeRegistration 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDContextualKeyPath 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDContextualPredicate 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _CDDeviceInfo 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _CDLogging 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDMDCSContextualPredicate 
01 00 2b00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDNetworkContext 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _CDSharedMemoryKeyValueStore 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _CDSleepForAutoSu 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKAnyIntegerCategory 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKAnyStringIdentifier 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKAppClipUsageMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKAppInstallMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKApplicationMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKAudioMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKAudioRouteCategory 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKBatteryPercentageQuantity 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKBluetoothMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKBoolCategory 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKBundleIdentifier 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKCalendarMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKDeviceBatteryPercentageMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKDeviceIsPluggedInMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKDigitalHealthMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKEvent 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKEventQuery 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKIdentifier 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKKnowledgeStore 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKMotionCategory 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKNowPlayingMetadataKey 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKPredictionTimeline 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKPrivacyMaintainer 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKQuery 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKSystemEventStreams 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKTitleIdentifier 
01 00 2a00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKUIOrientationCategory 
01 00 2600 /System/Library/PrivateFrameworks/ProactiveSupport.framework/ProactiveSupport: _PASDeviceState 
