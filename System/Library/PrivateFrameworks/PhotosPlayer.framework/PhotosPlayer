|| __DATA.__objc_data _OBJC_CLASS_$_ISAnimatedImage
|| __DATA.__objc_data _OBJC_CLASS_$_ISAnimatedImagePlayer
|| __DATA.__objc_data _OBJC_CLASS_$_ISAnimatedImageView
|| __DATA.__objc_data _OBJC_METACLASS_$_ISAnimatedImage
|| __DATA.__objc_data _OBJC_METACLASS_$_ISAnimatedImagePlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_ISAnimatedImageView
|| __DATA_CONST.__const _PhotosPlayerErrorDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISAVPlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISAVPlayerLayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISBasePlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISBasePlayerUIView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISLivePhotoPlaybackFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISLivePhotoPlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISLivePhotoUIView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISLiveWallpaperPlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISLiveWallpaperUIView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISObservable
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISPlayerContent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISPlayerItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISPlayerItemChef
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISPlayerOutputContent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISPlayerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISRootSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISScrollViewVitalityController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISTouchLivePhotoPlaybackFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISTouchingGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISUIScrollViewVitalityController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISUIVisibilityOffsetHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISVideoPlayerUIView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISVisibilityOffsetHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISVitalitySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISWrappedAVAudioSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ISWrappedAVPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISAVPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISAVPlayerLayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISBasePlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISBasePlayerUIView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISLivePhotoPlaybackFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISLivePhotoPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISLivePhotoUIView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISLiveWallpaperPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISLiveWallpaperUIView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISObservable
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISPlayerContent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISPlayerItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISPlayerItemChef
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISPlayerOutputContent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISPlayerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISRootSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISScrollViewVitalityController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISTouchLivePhotoPlaybackFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISTouchingGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISUIScrollViewVitalityController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISUIVisibilityOffsetHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISVideoPlayerUIView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISVisibilityOffsetHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISVitalitySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISWrappedAVAudioSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ISWrappedAVPlayer
|| __TEXT.__text _ISCircularEaseOut
|| __TEXT.__text _ISCubicEaseOut
|| __TEXT.__text _ISQuadraticEaseOut
|| __TEXT.__text _ISQuarticEaseOut
|| __TEXT.__text _ISQuinticEaseOut
|| __TEXT.__text _ISSineEaseOut
|| __TEXT.__text _ISStringFromPlaybackState
|| __TEXT.__text _ISStringFromPlayerItemLoadingTarget
__ AVFAudio: _AVAudioSessionCategoryAmbient
__ AVFAudio: _AVAudioSessionCategoryPlayback
__ AVFAudio: _AVAudioSessionModeDefault
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _AVAssetImageGeneratorApertureModeProductionAperture
__ AVFoundation: _AVFoundationErrorDomain
__ AVFoundation: _AVLayerVideoGravityResize
__ AVFoundation: _AVLayerVideoGravityResizeAspect
__ AVFoundation: _AVLayerVideoGravityResizeAspectFill
__ AVFoundation: _AVMediaTypeAudio
__ AVFoundation: _AVMediaTypeVideo
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVVideoApertureModeCleanAperture
__ AVFoundation: _AVVideoApertureModeProductionAperture
__ AVFoundation: _OBJC_CLASS_$_AVAssetImageGenerator
__ AVFoundation: _OBJC_CLASS_$_AVMutableAudioMix
__ AVFoundation: _OBJC_CLASS_$_AVMutableAudioMixInputParameters
__ AVFoundation: _OBJC_CLASS_$_AVMutableComposition
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ AVFoundation: _OBJC_CLASS_$_AVPlayerLayer
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ AVFoundation: _OBJC_METACLASS_$_AVPlayer
__ AVFoundation: _OBJC_METACLASS_$_AVPlayerLayer
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFBooleanTrue
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGImageRetain
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreMedia: _CMTimeAdd
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeMaximum
__ CoreMedia: _CMTimeMinimum
__ CoreMedia: _CMTimeMultiplyByRatio
__ CoreMedia: _CMTimeRangeContainsTime
__ CoreMedia: _CMTimeRangeFromTimeToTime
__ CoreMedia: _CMTimeRangeGetEnd
__ CoreMedia: _CMTimeRangeGetUnion
__ CoreMedia: _CMTimeRangeMake
__ CoreMedia: _CMTimeSubtract
__ CoreMedia: _kCMTimeInvalid
__ CoreMedia: _kCMTimePositiveInfinity
__ CoreMedia: _kCMTimeRangeInvalid
__ CoreMedia: _kCMTimeZero
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSStringFromClass
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ MediaToolbox: _kFigPlaybackItemTrackEnhancementFilterOptionKey_ScaleMode
__ MediaToolbox: _kFigPlaybackItemTrackEnhancementFilterOptionKey_UseFilter
__ MediaToolbox: _kFigPlaybackItemTrackEnhancementFilterScaleMode_2x
__ PhotoLibraryServicesCore: _PLImageOrientationFromExifOrientation
__ PhotosFormats: _OBJC_CLASS_$_PFAnimatedImage
__ PhotosFormats: _OBJC_CLASS_$_PFVideoComplement
__ PhotosFormats: _OBJC_CLASS_$_PFVideoMetadata
__ PhotosFormats: _OBJC_METACLASS_$_PFAnimatedImage
__ PhotosFormats: _PFRectUnit
__ PhotosFormats: _PFSizeNull
__ PhotosFormats: _PFSizeWithAspectRatioFittingSize
__ PrototypeTools: _OBJC_CLASS_$_PTButtonRow
__ PrototypeTools: _OBJC_CLASS_$_PTChoiceRow
__ PrototypeTools: _OBJC_CLASS_$_PTDrillDownRow
__ PrototypeTools: _OBJC_CLASS_$_PTModule
__ PrototypeTools: _OBJC_CLASS_$_PTRestoreDefaultSettingsRowAction
__ PrototypeTools: _OBJC_CLASS_$_PTRow
__ PrototypeTools: _OBJC_CLASS_$_PTSettings
__ PrototypeTools: _OBJC_CLASS_$_PTSliderRow
__ PrototypeTools: _OBJC_CLASS_$_PTSwitchRow
__ PrototypeTools: _OBJC_METACLASS_$_PTSettings
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _kCAFilterGaussianBlur
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIImpactFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _UIAccessibilityIsReduceMotionEnabled
__ UIKit: _UIAccessibilityReduceMotionStatusDidChangeNotification
__ libMobileGestalt.dylib: _MGGetStringAnswer
__ libMobileGestalt.dylib: _MGIsDeviceOneOfType
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_variant_has_internal_diagnostics
__ libSystem.B.dylib: _os_variant_has_internal_ui
__ libSystem.B.dylib: _sin
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
ISAVPlayer : AVPlayer
 @property  NSObject<OS_dispatch_queue> *actualDispatchQueue

  // class methods
  +[ISAVPlayer isAppleInternal]
  +[ISAVPlayer isSpringBoard]

  // instance methods
  -[ISAVPlayer .cxx_destruct]
  -[ISAVPlayer init]
  -[ISAVPlayer setRate:]
  -[ISAVPlayer dispatchQueue]
  -[ISAVPlayer initWithDispatchQueue:]
  -[ISAVPlayer dealloc]
  -[ISAVPlayer playToTime:withInitialRate:overDuration:progressHandler:]
  -[ISAVPlayer _cancelRateCurveRequest]
  -[ISAVPlayer _setRate:]
  -[ISAVPlayer actualDispatchQueue]


ISRateCurveRequest : NSObject
 @property  {?=qiIq} targetTime
 @property  double duration
 @property  float initialRate
 @property  ISAVPlayer *avPlayer
 @property  @? progressHandler

  // instance methods
  -[ISRateCurveRequest .cxx_destruct]
  -[ISRateCurveRequest avPlayer]
  -[ISRateCurveRequest progressHandler]
  -[ISRateCurveRequest cancel]
  -[ISRateCurveRequest start]
  -[ISRateCurveRequest dealloc]
  -[ISRateCurveRequest duration]
  -[ISRateCurveRequest targetTime]
  -[ISRateCurveRequest initWithTargetTime:duration:initialRate:avPlayer:progressHandler:]
  -[ISRateCurveRequest _stepDownRate]
  -[ISRateCurveRequest _stopObservingPlayer]
  -[ISRateCurveRequest _didReachTargetTime]
  -[ISRateCurveRequest initialRate]


ISAVPlayerLayer : AVPlayerLayer
 @property  @? readyForDisplayChangeHandler

  // instance methods
  -[ISAVPlayerLayer setReadyForDisplayChangeHandler:]
  -[ISAVPlayerLayer deferredDealloc]
  -[ISAVPlayerLayer setWrappedPlayer:]
  -[ISAVPlayerLayer didChangeValueForKey:]
  -[ISAVPlayerLayer .cxx_destruct]
  -[ISAVPlayerLayer readyForDisplayChangeHandler]
  -[ISAVPlayerLayer setPlayer:]
  -[ISAVPlayerLayer init]
  -[ISAVPlayerLayer dealloc]
  -[ISAVPlayerLayer setBounds:]


ISAsset : NSObject
 @property  AVAsset *videoAsset
 @property  ^{CGImage=} photo
 @property  double photoTime
 @property  {?=qiIq} photoCMTime
 @property  int photoEXIFOrientation
 @property  unsigned long options
 @property  BOOL hasColorAdjustments

  // class methods
  +[ISAsset assetForURL:error:]

  // instance methods
  -[ISAsset initWithVideoAsset:UIImage:photoTime:photoEXIFOrientation:options:]
  -[ISAsset options]
  -[ISAsset .cxx_destruct]
  -[ISAsset photo]
  -[ISAsset init]
  -[ISAsset videoAsset]
  -[ISAsset photoTime]
  -[ISAsset photoEXIFOrientation]
  -[ISAsset dealloc]
  -[ISAsset photoCMTime]
  -[ISAsset initWithVideoAsset:photo:photoTime:photoEXIFOrientation:]
  -[ISAsset initWithVideoAsset:photo:photoTime:photoEXIFOrientation:options:]
  -[ISAsset initWithVideoAsset:photo:photoTime:options:]
  -[ISAsset initWithVideoAsset:photo:photoTime:]
  -[ISAsset resetAVObjects]
  -[ISAsset hasColorAdjustments]


ISBasePlayer : ISObservable <ISChangeObserver, ISWrappedAVPlayerDelegate>
 @property  ISBehavior *activeBehavior
 @property  id _videoWillPlayToEndObserver
 @property  id _videoWillPlayToPhotoObserver
 @property  ISPlayerState *lastAppliedLayoutInfo
 @property  ISPlayerOutputContent *_outputContent
 @property  double lastAppliedScale
 @property  long long status
 @property  {?=qiIq} _videoForwardPlaybackEndTime
 @property  NSError *error
 @property  ISPlayerItem *playerItem
 @property  float audioVolume
 @property  BOOL audioEnabled
 @property  <ISBasePlayerDelegate> *delegate
 @property  ISWrappedAVPlayer *videoPlayer
 @property  BOOL videoLayersReadyForDisplay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ISBasePlayer setAudioVolume:]
  -[ISBasePlayer _invalidateStatus]
  -[ISBasePlayer audioVolume]
  -[ISBasePlayer _setError:]
  -[ISBasePlayer _setStatus:]
  -[ISBasePlayer activeBehaviorDidChange]
  -[ISBasePlayer configurePlayerItem]
  -[ISBasePlayer removeOutput:]
  -[ISBasePlayer statusDidChange]
  -[ISBasePlayer didPerformChanges]
  -[ISBasePlayer mutableChangeObject]
  -[ISBasePlayer _updateIfNeeded]
  -[ISBasePlayer _invalidateVideoPlayer]
  -[ISBasePlayer _setVideoPlayer:]
  -[ISBasePlayer .cxx_destruct]
  -[ISBasePlayer setAudioEnabled:]
  -[ISBasePlayer playerItem]
  -[ISBasePlayer videoPlayer]
  -[ISBasePlayer apertureMode]
  -[ISBasePlayer setDelegate:]
  -[ISBasePlayer init]
  -[ISBasePlayer setPlayerItem:]
  -[ISBasePlayer _needsUpdate]
  -[ISBasePlayer initWithVideoPlayer:]
  -[ISBasePlayer videoWillPlayToPhotoInterval]
  -[ISBasePlayer activeBehavior]
  -[ISBasePlayer addOutput:]
  -[ISBasePlayer avPlayer:itemDidPlayToEnd:]
  -[ISBasePlayer setActiveBehavior:]
  -[ISBasePlayer status]
  -[ISBasePlayer playerItemDidChange]
  -[ISBasePlayer setApertureMode:]
  -[ISBasePlayer delegate]
  -[ISBasePlayer dealloc]
  -[ISBasePlayer _updateVideoPlayerIfNeeded]
  -[ISBasePlayer isAudioEnabled]
  -[ISBasePlayer observable:didChange:context:]
  -[ISBasePlayer lastAppliedScale]
  -[ISBasePlayer error]
  -[ISBasePlayer _updateStatusIfNeeded]
  -[ISBasePlayer _invalidateContentFromPlayerItem]
  -[ISBasePlayer _invalidateWillPlayToEndObserver]
  -[ISBasePlayer _invalidateWillPlayToPhotoObserver]
  -[ISBasePlayer _outputVideoReadyForDisplayDidChange:]
  -[ISBasePlayer didAddOutput:]
  -[ISBasePlayer willRemoveOutput:]
  -[ISBasePlayer videoLayersReadyForDisplay]
  -[ISBasePlayer _configureNewOutput:]
  -[ISBasePlayer _invalidateVideoPlayerVolume]
  -[ISBasePlayer _setLastAppliedScale:]
  -[ISBasePlayer applyScale:withTransitionOptions:completion:]
  -[ISBasePlayer enumerateOutputsWithBlock:]
  -[ISBasePlayer _setLastAppliedLayoutInfo:]
  -[ISBasePlayer _outputContent]
  -[ISBasePlayer lastAppliedLayoutInfo]
  -[ISBasePlayer _setOutputContent:]
  -[ISBasePlayer _videoForwardPlaybackEndTime]
  -[ISBasePlayer _videoWillPlayToEndObserver]
  -[ISBasePlayer videoWillPlayToEndInterval]
  -[ISBasePlayer _videoWillPlayToEnd]
  -[ISBasePlayer _setVideoWillPlayToEndObserver:]
  -[ISBasePlayer _videoWillPlayToPhotoObserver]
  -[ISBasePlayer _videoWillPlayToPhoto]
  -[ISBasePlayer _setVideoWillPlayToPhotoObserver:]
  -[ISBasePlayer _handleErrorsIfNeeded]
  -[ISBasePlayer _updateVideoPlayerVolumeIfNeeded]
  -[ISBasePlayer _updateContentFromPlayerItemIfNeeded]
  -[ISBasePlayer _updateWillPlayToEndObserverIfNeeded]
  -[ISBasePlayer _updateWillPlayToPhotoObserverIfNeeded]
  -[ISBasePlayer videoVolume]
  -[ISBasePlayer _mainQueue_handleMediaServicesReset]
  -[ISBasePlayer _mainQueue_resetAVObjectsWithResetCount:]
  -[ISBasePlayer applyOutputInfo:fromBehavior:withTransitionOptions:completion:]
  -[ISBasePlayer behavior:seekVideoPlayerToTime:toleranceBefore:toleranceAfter:completionHandler:]
  -[ISBasePlayer _setForwardPlaybackEndTime:]
  -[ISBasePlayer setVideoVolume:]
  -[ISBasePlayer _videoDidPlayToEnd]
  -[ISBasePlayer behaviorIsVideoReadyForDisplay:]
  -[ISBasePlayer behavior:didSetOutputInfo:withTransitionOptions:completion:]
  -[ISBasePlayer behavior:setVideoPlayRate:]
  -[ISBasePlayer videoPlayRate]
  -[ISBasePlayer behavior:seekVideoPlayerToTime:completionHandler:]
  -[ISBasePlayer behavior:prerollVideoAtRate:completionHandler:]
  -[ISBasePlayer behavior:setVideoForwardPlaybackEndTime:]
  -[ISBasePlayer behavior:setVideoVolume:]
  -[ISBasePlayer behavior:addBoundaryTimeObserverForTimes:queue:usingBlock:]
  -[ISBasePlayer behavior:removeTimeObserver:]
  -[ISBasePlayer behavior:playVideoToTime:initialRate:overDuration:progressHandler:]
  -[ISBasePlayer _setVideoForwardPlaybackEndTime:]


ISBasePlayerUIView : UIView <ISChangeObserver, ISBasePlayerOutput>
 @property  UIView *containerView
 @property  UIView *videoContainerView
 @property  ISWrappedAVAudioSession *wrappedAudioSession
 @property  <ISBasePlayerUIViewChangeObserver> *_changeObserver
 @property  ISVideoPlayerUIView *videoBlurView
 @property  UIImageView *photoView
 @property  ISVideoPlayerUIView *videoView
 @property  ISBasePlayer *player
 @property  {CGPoint=dd} scaleAnchorOffset
 @property  UIView *customPhotoView
 @property  UIImage *overrideImage
 @property  BOOL displayingPhoto
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentsRect
 @property  @? videoLayerReadyForDisplayChangeHandler
 @property  CAMeshTransform *videoTransform
 @property  CAFilter *videoFilter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isVideoReadyForDisplay

  // class methods
  +[ISBasePlayerUIView playerClass]

  // instance methods
  -[ISBasePlayerUIView unregisterChangeObserver:]
  -[ISBasePlayerUIView setContent:]
  -[ISBasePlayerUIView _setChangeObserver:]
  -[ISBasePlayerUIView initWithCoder:]
  -[ISBasePlayerUIView scaleAnchorOffset]
  -[ISBasePlayerUIView _changeObserver]
  -[ISBasePlayerUIView setCustomPhotoView:]
  -[ISBasePlayerUIView setVideoFilter:]
  -[ISBasePlayerUIView setContentsRect:]
  -[ISBasePlayerUIView containerView]
  -[ISBasePlayerUIView registerChangeObserver:]
  -[ISBasePlayerUIView .cxx_destruct]
  -[ISBasePlayerUIView layoutSubviews]
  -[ISBasePlayerUIView generateSnapshotImage]
  -[ISBasePlayerUIView setPlayer:]
  -[ISBasePlayerUIView contentsRect]
  -[ISBasePlayerUIView player]
  -[ISBasePlayerUIView setVideoLayerReadyForDisplayChangeHandler:]
  -[ISBasePlayerUIView setOverrideImage:]
  -[ISBasePlayerUIView isDisplayingPhoto]
  -[ISBasePlayerUIView _updatePhotoView]
  -[ISBasePlayerUIView overrideImage]
  -[ISBasePlayerUIView initWithFrame:]
  -[ISBasePlayerUIView _performCommonInitialization]
  -[ISBasePlayerUIView contentDidChange]
  -[ISBasePlayerUIView setContentMode:]
  -[ISBasePlayerUIView photoView]
  -[ISBasePlayerUIView videoLayerReadyForDisplayChangeHandler]
  -[ISBasePlayerUIView videoView]
  -[ISBasePlayerUIView observable:didChange:context:]
  -[ISBasePlayerUIView audioSessionDidChange]
  -[ISBasePlayerUIView setScaleAnchorOffset:]
  -[ISBasePlayerUIView playerDidChange]
  -[ISBasePlayerUIView customPhotoView]
  -[ISBasePlayerUIView isVideoReadyForDisplay]
  -[ISBasePlayerUIView applyScale:withTransitionOptions:completion:]
  -[ISBasePlayerUIView applyOutputInfo:withTransitionOptions:completion:]
  -[ISBasePlayerUIView _setWrappedAudioSession:]
  -[ISBasePlayerUIView _videoViewReadyForDisplayDidChange]
  -[ISBasePlayerUIView videoTransform]
  -[ISBasePlayerUIView videoBlurView]
  -[ISBasePlayerUIView videoContainerView]
  -[ISBasePlayerUIView _updateVideoViewsFrameWithContainerBounds:]
  -[ISBasePlayerUIView _updatePlayerAudioSession]
  -[ISBasePlayerUIView wrappedAudioSession]
  -[ISBasePlayerUIView _signalChange:withAnimationDuration:]
  -[ISBasePlayerUIView setVideoTransform:]
  -[ISBasePlayerUIView videoFilter]


ISBehavior : NSObject
 @property  BOOL active
 @property  <ISBehaviorDelegate> *delegate
 @property  ISPlayerState *initialLayoutInfo
 @property  long long behaviorType

  // instance methods
  -[ISBehavior becomeActive]
  -[ISBehavior resignActive]
  -[ISBehavior isActive]
  -[ISBehavior .cxx_destruct]
  -[ISBehavior setDelegate:]
  -[ISBehavior delegate]
  -[ISBehavior behaviorType]
  -[ISBehavior activeDidChange]
  -[ISBehavior videoReadyForDisplayDidChange]
  -[ISBehavior videoDidPlayToEnd]
  -[ISBehavior videoWillPlayToPhoto]
  -[ISBehavior videoWillPlayToEnd]
  -[ISBehavior setVideoVolume:]
  -[ISBehavior initWithInitialLayoutInfo:]
  -[ISBehavior videoPlayerItemDidChange]
  -[ISBehavior setOutputInfo:withTransitionOptions:completion:]
  -[ISBehavior setVideoPlayRate:]
  -[ISBehavior seekVideoPlayerToTime:completionHandler:]
  -[ISBehavior seekVideoPlayerToTime:toleranceBefore:toleranceAfter:completionHandler:]
  -[ISBehavior prerollVideoAtRate:completionHandler:]
  -[ISBehavior setVideoForwardPlaybackEndTime:]
  -[ISBehavior initialLayoutInfo]


ISDefaultBehavior : ISBehavior
  // instance methods
  -[ISDefaultBehavior _showPhoto]
  -[ISDefaultBehavior behaviorType]
  -[ISDefaultBehavior activeDidChange]


ISDeferredDealloc : NSObject
  // class methods
  +[ISDeferredDealloc sharedInstance]

  // instance methods
  -[ISDeferredDealloc init]
  -[ISDeferredDealloc _performDeferredDealloc:withDelay:]
  -[ISDeferredDealloc dealloc]
  -[ISDeferredDealloc _performDeferredDealloc:]


ISDisplayLink : NSObject
 @property  @? updateHandler
 @property  @? completionHandler
 @property  CADisplayLink *displayLink
 @property  long long preferredFramesPerSecond

  // instance methods
  -[ISDisplayLink setUpdateHandler:]
  -[ISDisplayLink updateHandler]
  -[ISDisplayLink setDisplayLink:]
  -[ISDisplayLink initWithUpdateHandler:completionHandler:]
  -[ISDisplayLink .cxx_destruct]
  -[ISDisplayLink stop]
  -[ISDisplayLink setPreferredFramesPerSecond:]
  -[ISDisplayLink displayLink]
  -[ISDisplayLink _update:]
  -[ISDisplayLink setCompletionHandler:]
  -[ISDisplayLink preferredFramesPerSecond]
  -[ISDisplayLink start]
  -[ISDisplayLink dealloc]
  -[ISDisplayLink completionHandler]
  -[ISDisplayLink _callUpdateHandler]


ISLivePhotoAutoplayVitalityFilter : ISLivePhotoVitalityFilter
 @property  long long _state
 @property  BOOL isVisible
 @property  double visibilityOffset
 @property  BOOL hasTargetVisibilityOffset
 @property  double targetVisibilityOffset
 @property  NSDate *estimatedScrollEndDate
 @property  BOOL isScrolling
 @property  BOOL isDecelerating

  // instance methods
  -[ISLivePhotoAutoplayVitalityFilter _setState:]
  -[ISLivePhotoAutoplayVitalityFilter _state]
  -[ISLivePhotoAutoplayVitalityFilter setVisible:]
  -[ISLivePhotoAutoplayVitalityFilter .cxx_destruct]
  -[ISLivePhotoAutoplayVitalityFilter isVisible]
  -[ISLivePhotoAutoplayVitalityFilter isScrolling]
  -[ISLivePhotoAutoplayVitalityFilter isDecelerating]
  -[ISLivePhotoAutoplayVitalityFilter setScrolling:]
  -[ISLivePhotoAutoplayVitalityFilter updateOutput]
  -[ISLivePhotoAutoplayVitalityFilter hasTargetVisibilityOffset]
  -[ISLivePhotoAutoplayVitalityFilter targetVisibilityOffset]
  -[ISLivePhotoAutoplayVitalityFilter visibilityOffset]
  -[ISLivePhotoAutoplayVitalityFilter setEstimatedScrollEndDate:]
  -[ISLivePhotoAutoplayVitalityFilter setDecelerating:]
  -[ISLivePhotoAutoplayVitalityFilter setTargetVisibilityOffset:]
  -[ISLivePhotoAutoplayVitalityFilter setHasTargetVisibilityOffset:]
  -[ISLivePhotoAutoplayVitalityFilter setVisibilityOffset:]
  -[ISLivePhotoAutoplayVitalityFilter estimatedScrollEndDate]


ISKVOProxyManager : NSObject
  // class methods
  +[ISKVOProxyManager sharedManager]

  // instance methods
  -[ISKVOProxyManager .cxx_destruct]
  -[ISKVOProxyManager init]
  -[ISKVOProxyManager addProxyWithTarget:queue:keyPaths:delegate:]
  -[ISKVOProxyManager removeProxyWithIdentifier:]


ISKVOProxy : NSObject
 @property  <ISKVOProxyDelegate> *delegate

  // instance methods
  -[ISKVOProxy .cxx_destruct]
  -[ISKVOProxy setDelegate:]
  -[ISKVOProxy delegate]
  -[ISKVOProxy dealloc]
  -[ISKVOProxy observeValueForKeyPath:ofObject:change:context:]
  -[ISKVOProxy initWithTarget:keyPaths:identifier:delegate:]
  -[ISKVOProxy startObservingTarget]
  -[ISKVOProxy stopObservingTarget]


ISKVOProxyRecord : NSObject
 @property  ISKVOProxy *proxy
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[ISKVOProxyRecord .cxx_destruct]
  -[ISKVOProxyRecord proxy]
  -[ISKVOProxyRecord queue]
  -[ISKVOProxyRecord initWithProxy:queue:]


ISLivePhotoPlaybackBehavior : ISBehavior
 @property  long long _currentPlaybackID
 @property  long long _readyToPlayPlaybackID
 @property  BOOL _videoReadyToPlay
 @property  BOOL _preparing
 @property  {?=qiIq} keyTime
 @property  {?={?=qiIq}{?=qiIq}} playbackTimeRange
 @property  double photoTransitionDuration
 @property  BOOL immediatelyShowsPhotoWhenPlaybackEnds
 @property  BOOL hasBlurryTransition
 @property  BOOL isTransitioningToPhoto
 @property  <ISLivePhotoPlaybackBehaviorDelegate> *delegate

  // instance methods
  -[ISLivePhotoPlaybackBehavior immediatelyShowsPhotoWhenPlaybackEnds]
  -[ISLivePhotoPlaybackBehavior setDelegate:]
  -[ISLivePhotoPlaybackBehavior keyTime]
  -[ISLivePhotoPlaybackBehavior behaviorType]
  -[ISLivePhotoPlaybackBehavior startPlayback]
  -[ISLivePhotoPlaybackBehavior activeDidChange]
  -[ISLivePhotoPlaybackBehavior playbackTimeRange]
  -[ISLivePhotoPlaybackBehavior _isPreparing]
  -[ISLivePhotoPlaybackBehavior videoDidPlayToEnd]
  -[ISLivePhotoPlaybackBehavior videoWillPlayToEnd]
  -[ISLivePhotoPlaybackBehavior _handleDidFinish]
  -[ISLivePhotoPlaybackBehavior _prepareVideoForPlaybackIfNeeded]
  -[ISLivePhotoPlaybackBehavior _setPreparing:]
  -[ISLivePhotoPlaybackBehavior _setVideoReadyToPlay:]
  -[ISLivePhotoPlaybackBehavior _currentPlaybackID]
  -[ISLivePhotoPlaybackBehavior _setCurrentPlaybackID:]
  -[ISLivePhotoPlaybackBehavior _isVideoReadyToPlay]
  -[ISLivePhotoPlaybackBehavior _startPlaybackWithPlaybackID:]
  -[ISLivePhotoPlaybackBehavior _setReadyToPlayPlaybackID:]
  -[ISLivePhotoPlaybackBehavior _handleDidSeekToBeginning]
  -[ISLivePhotoPlaybackBehavior _handleDidFinishPreroll]
  -[ISLivePhotoPlaybackBehavior _prerollWithCompletionHandler:]
  -[ISLivePhotoPlaybackBehavior _didFinishPreparing]
  -[ISLivePhotoPlaybackBehavior _readyToPlayPlaybackID]
  -[ISLivePhotoPlaybackBehavior _transitionToVideoWithPlaybackID:]
  -[ISLivePhotoPlaybackBehavior _showVideoWithPlaybackID:]
  -[ISLivePhotoPlaybackBehavior initWithInitialLayoutInfo:keyTime:playbackTimeRange:photoTransitionDuration:immediatelyShowsPhotoWhenPlaybackEnds:hasBlurryTransition:]
  -[ISLivePhotoPlaybackBehavior photoTransitionDuration]
  -[ISLivePhotoPlaybackBehavior hasBlurryTransition]
  -[ISLivePhotoPlaybackBehavior isTransitioningToPhoto]


ISLivePhotoPlaybackFilter : ISObservable
 @property  BOOL isPerformingInputChanges
 @property  BOOL playbackDisabled
 @property  NSMutableSet *_playbackDisabledReasons
 @property  double hintProgress
 @property  long long state
 @property  BOOL playIsSticky

  // instance methods
  -[ISLivePhotoPlaybackFilter _setState:]
  -[ISLivePhotoPlaybackFilter playIsSticky]
  -[ISLivePhotoPlaybackFilter mutableChangeObject]
  -[ISLivePhotoPlaybackFilter .cxx_destruct]
  -[ISLivePhotoPlaybackFilter setState:]
  -[ISLivePhotoPlaybackFilter init]
  -[ISLivePhotoPlaybackFilter reset]
  -[ISLivePhotoPlaybackFilter state]
  -[ISLivePhotoPlaybackFilter setPlayIsSticky:]
  -[ISLivePhotoPlaybackFilter _playbackDisabledReasons]
  -[ISLivePhotoPlaybackFilter setPlaybackDisabled:forReason:]
  -[ISLivePhotoPlaybackFilter isPlaybackDisabled]
  -[ISLivePhotoPlaybackFilter setHintProgress:]
  -[ISLivePhotoPlaybackFilter hintProgress]
  -[ISLivePhotoPlaybackFilter isPerformingInputChanges]
  -[ISLivePhotoPlaybackFilter _setPerformingInputChanges:]
  -[ISLivePhotoPlaybackFilter _setPlaybackDisabled:]


ISLivePhotoPlayer : ISBasePlayer <ISLivePhotoSettleBehaviorDelegate, ISChangeObserver>
 @property  long long currentPlaybackStyle
 @property  long long _styleToPlayWhenReady
 @property  BOOL isAttemptingToPlayback
 @property  BOOL _settleAutomaticallyWhenReady
 @property  BOOL _shouldPrepareForVitalityWhenReady
 @property  BOOL _shouldPlayVitalityWhenReady
 @property  BOOL _shouldPrepareForHintWhenReady
 @property  BOOL playingVitality
 @property  BOOL hinting
 @property  NSDate *_vitalityTimeoutDate
 @property  BOOL _canPlayVitality
 @property  NSSet *playbackFilters
 @property  ISLivePhotoVitalityFilter *vitalityFilter
 @property  BOOL immediatelyShowsPhotoWhenPlaybackEnds
 @property  BOOL playbackAllowed
 @property  long long targetReadiness
 @property  {?=qiIq} seekTime
 @property  {?={?=qiIq}{?=qiIq}} trimTimeRange
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ISLivePhotoPlayer activeBehaviorDidChange]
  -[ISLivePhotoPlayer configurePlayerItem]
  -[ISLivePhotoPlayer isAttemptingToPlayback]
  -[ISLivePhotoPlayer livePhotoPlaybackBehaviorWillTransitionToPhoto:]
  -[ISLivePhotoPlayer _setPlayingVitality:]
  -[ISLivePhotoPlayer _handlePlaybackFilterDidChange]
  -[ISLivePhotoPlayer stopPlayback]
  -[ISLivePhotoPlayer statusDidChange]
  -[ISLivePhotoPlayer _setHinting:]
  -[ISLivePhotoPlayer startPlaybackWithStyle:]
  -[ISLivePhotoPlayer didPerformChanges]
  -[ISLivePhotoPlayer setTargetReadiness:]
  -[ISLivePhotoPlayer _updateScaleIfNeeded]
  -[ISLivePhotoPlayer playHintWhenReady]
  -[ISLivePhotoPlayer _setStyleToPlayWhenReady:]
  -[ISLivePhotoPlayer immediatelyShowsPhotoWhenPlaybackEnds]
  -[ISLivePhotoPlayer _canPlayVitality]
  -[ISLivePhotoPlayer prepareForHintWhenReady]
  -[ISLivePhotoPlayer _shouldPrepareForVitalityWhenReady]
  -[ISLivePhotoPlayer seekTime]
  -[ISLivePhotoPlayer .cxx_destruct]
  -[ISLivePhotoPlayer startPlaybackWithStyle:settleAutomatically:]
  -[ISLivePhotoPlayer startPlaybackWithStyleWhenReady:settleAutomatically:]
  -[ISLivePhotoPlayer trimTimeRange]
  -[ISLivePhotoPlayer _setShouldPrepareForVitalityWhenReady:]
  -[ISLivePhotoPlayer _configurePlaybackFilters]
  -[ISLivePhotoPlayer _updateHintingAndVitality]
  -[ISLivePhotoPlayer _coalescedPlaybackFilterState]
  -[ISLivePhotoPlayer _setIsAttemptingToPlayback:]
  -[ISLivePhotoPlayer playVitality]
  -[ISLivePhotoPlayer prepareForVitality]
  -[ISLivePhotoPlayer livePhotoPlaybackBehaviorDidBeginPlaying:]
  -[ISLivePhotoPlayer _updateApertureModeIfNeeded]
  -[ISLivePhotoPlayer _updatePlayerItemLoadingTarget]
  -[ISLivePhotoPlayer vitalityBehaviorShouldEndPlayingAtPhoto:]
  -[ISLivePhotoPlayer init]
  -[ISLivePhotoPlayer _handleVitalityFilterDidChange:]
  -[ISLivePhotoPlayer isPlaybackAllowed]
  -[ISLivePhotoPlayer _resetPlaybackFilters]
  -[ISLivePhotoPlayer isPlayingVitality]
  -[ISLivePhotoPlayer _settleAutomaticallyWhenReady]
  -[ISLivePhotoPlayer setImmediatelyShowsPhotoWhenPlaybackEnds:]
  -[ISLivePhotoPlayer setIsAttemptingToPlayback:]
  -[ISLivePhotoPlayer _prepareForVitalityIfNeeded]
  -[ISLivePhotoPlayer removePlaybackFilter:]
  -[ISLivePhotoPlayer videoWillPlayToPhotoInterval]
  -[ISLivePhotoPlayer setTrimTimeRange:]
  -[ISLivePhotoPlayer vitalityBehaviorDidBeginPlaying:]
  -[ISLivePhotoPlayer vitalityBehaviorDidEndPlaying:]
  -[ISLivePhotoPlayer targetReadiness]
  -[ISLivePhotoPlayer _createVitalityBehavior]
  -[ISLivePhotoPlayer livePhotoPlaybackBehaviorDidFinish:]
  -[ISLivePhotoPlayer _setShouldPrepareForHintWhenReady:]
  -[ISLivePhotoPlayer livePhotoSettleBehaviorDidFinish:]
  -[ISLivePhotoPlayer playbackFilters]
  -[ISLivePhotoPlayer _invalidateApertureMode]
  -[ISLivePhotoPlayer setPlaybackAllowed:]
  -[ISLivePhotoPlayer _shouldPrepareForHintWhenReady]
  -[ISLivePhotoPlayer addPlaybackFilter:]
  -[ISLivePhotoPlayer playerItemDidChange]
  -[ISLivePhotoPlayer _styleToPlayWhenReady]
  -[ISLivePhotoPlayer _coalescedPlaybackFilterHintProgress]
  -[ISLivePhotoPlayer _shouldPlayVitalityWhenReady]
  -[ISLivePhotoPlayer setVitalityFilter:]
  -[ISLivePhotoPlayer _setVitalityTimeoutDate:]
  -[ISLivePhotoPlayer _vitalityTimeoutDate]
  -[ISLivePhotoPlayer _setShouldPlayVitalityWhenReady:]
  -[ISLivePhotoPlayer setSeekTime:completion:]
  -[ISLivePhotoPlayer isHinting]
  -[ISLivePhotoPlayer _playIfNeeded]
  -[ISLivePhotoPlayer stopPlaybackAnimated:]
  -[ISLivePhotoPlayer _fadeInAudio]
  -[ISLivePhotoPlayer vitalityFilter]
  -[ISLivePhotoPlayer _setCurrentPlaybackStyle:]
  -[ISLivePhotoPlayer _setSettleAutomaticallyWhenReady:]
  -[ISLivePhotoPlayer observable:didChange:context:]
  -[ISLivePhotoPlayer lastAppliedScale]
  -[ISLivePhotoPlayer _configurePlaybackFilter:]
  -[ISLivePhotoPlayer _photoTransitionDuration]
  -[ISLivePhotoPlayer currentPlaybackStyle]
  -[ISLivePhotoPlayer startPlaybackWithStyleWhenReady:]
  -[ISLivePhotoPlayer _invalidateScale]


ISLivePhotoSeekBehavior : ISBehavior
 @property  {?=qiIq} seekTime
 @property  @? seekCompletionHandler

  // instance methods
  -[ISLivePhotoSeekBehavior seekTime]
  -[ISLivePhotoSeekBehavior .cxx_destruct]
  -[ISLivePhotoSeekBehavior setSeekTime:]
  -[ISLivePhotoSeekBehavior behaviorType]
  -[ISLivePhotoSeekBehavior activeDidChange]
  -[ISLivePhotoSeekBehavior seekCompletionHandler]
  -[ISLivePhotoSeekBehavior setSeekCompletionHandler:]
  -[ISLivePhotoSeekBehavior initWithInitialLayoutInfo:seekTime:]
  -[ISLivePhotoSeekBehavior _seekIfNeeded]
  -[ISLivePhotoSeekBehavior _callSeekCompletionHandler:]
  -[ISLivePhotoSeekBehavior _handleDidSeekToSeekTime:]


ISLivePhotoSettleBehavior : ISBehavior
 @property  <ISLivePhotoSettleBehaviorDelegate> *delegate

  // instance methods
  -[ISLivePhotoSettleBehavior _didFinish]
  -[ISLivePhotoSettleBehavior settle:]
  -[ISLivePhotoSettleBehavior behaviorType]


ISLivePhotoUIView : ISBasePlayerUIView <UIGestureRecognizerDelegate, ISChangeObserver>
 @property  ISTouchLivePhotoPlaybackFilter *_playbackFilter
 @property  BOOL _playingVitality
 @property  UILabel *_overlayLabel
 @property  long long _overlayDismissalID
 @property  ISLivePhotoPlayer *player
 @property  UIGestureRecognizer *playbackGestureRecognizer
 @property  CAMeshTransform *vitalityTransform
 @property  <ISLivePhotoUIViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ISLivePhotoUIView _setPlayingVitality:]
  -[ISLivePhotoUIView initWithCoder:]
  -[ISLivePhotoUIView livePhotoPlayer]
  -[ISLivePhotoUIView gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[ISLivePhotoUIView _updateVideoTransform]
  -[ISLivePhotoUIView _dismissOverlayLabel:]
  -[ISLivePhotoUIView setVitalityTransform:]
  -[ISLivePhotoUIView _playerDidChangePlaybackStyle]
  -[ISLivePhotoUIView .cxx_destruct]
  -[ISLivePhotoUIView playbackGestureRecognizer]
  -[ISLivePhotoUIView _playbackFilter]
  -[ISLivePhotoUIView _playingVitality]
  -[ISLivePhotoUIView setDelegate:]
  -[ISLivePhotoUIView _showOverlayLabel]
  -[ISLivePhotoUIView _playerDidChangeHinting]
  -[ISLivePhotoUIView setPlayer:]
  -[ISLivePhotoUIView _updatePlaybackFilter]
  -[ISLivePhotoUIView _setOverlayDismissalID:]
  -[ISLivePhotoUIView vitalityTransform]
  -[ISLivePhotoUIView gestureRecognizerShouldBegin:]
  -[ISLivePhotoUIView _updateGestureRecognizerParameters]
  -[ISLivePhotoUIView _overlayDismissalID]
  -[ISLivePhotoUIView _ISLivePhotoUIViewCommonInitialization]
  -[ISLivePhotoUIView _overlayLabel]
  -[ISLivePhotoUIView _updatePlaybackFilterInput]
  -[ISLivePhotoUIView initWithFrame:]
  -[ISLivePhotoUIView contentDidChange]
  -[ISLivePhotoUIView delegate]
  -[ISLivePhotoUIView dealloc]
  -[ISLivePhotoUIView _setPlaybackFilter:]
  -[ISLivePhotoUIView observable:didChange:context:]
  -[ISLivePhotoUIView audioSessionDidChange]
  -[ISLivePhotoUIView _handlePlaybackRecognizer:]


ISLivePhotoVitalityBehavior : ISBehavior
 @property  BOOL prepared
 @property  BOOL preparing
 @property  BOOL playingBeyondPhoto
 @property  BOOL _shouldPlayAfterPreparation
 @property  {?=qiIq} playbackEndTime
 @property  {?=qiIq} playDuration
 @property  double photoTransitionDuration
 @property  BOOL pauseDuringTransition
 @property  unsigned long assetOptions
 @property  float playRate
 @property  BOOL playing
 @property  <ISLivePhotoVitalityBehaviorDelegate> *delegate

  // instance methods
  -[ISLivePhotoVitalityBehavior isPlaying]
  -[ISLivePhotoVitalityBehavior .cxx_destruct]
  -[ISLivePhotoVitalityBehavior playVitality]
  -[ISLivePhotoVitalityBehavior prepareForVitality]
  -[ISLivePhotoVitalityBehavior isPrepared]
  -[ISLivePhotoVitalityBehavior playRate]
  -[ISLivePhotoVitalityBehavior _setPrepared:]
  -[ISLivePhotoVitalityBehavior dealloc]
  -[ISLivePhotoVitalityBehavior behaviorType]
  -[ISLivePhotoVitalityBehavior activeDidChange]
  -[ISLivePhotoVitalityBehavior _startVideoPlayback]
  -[ISLivePhotoVitalityBehavior _isPreparing]
  -[ISLivePhotoVitalityBehavior videoReadyForDisplayDidChange]
  -[ISLivePhotoVitalityBehavior _setPreparing:]
  -[ISLivePhotoVitalityBehavior _handleDidFinishPreroll]
  -[ISLivePhotoVitalityBehavior photoTransitionDuration]
  -[ISLivePhotoVitalityBehavior isPlayingBeyondPhoto]
  -[ISLivePhotoVitalityBehavior initWithInitialLayoutInfo:playbackEndTime:playDuration:playRate:photoTransitionDuration:pauseDuringTransition:assetOptions:]
  -[ISLivePhotoVitalityBehavior cancelSettleToPhoto]
  -[ISLivePhotoVitalityBehavior _startObservingVideo]
  -[ISLivePhotoVitalityBehavior _stopObservingVideo]
  -[ISLivePhotoVitalityBehavior playbackEndTime]
  -[ISLivePhotoVitalityBehavior playDuration]
  -[ISLivePhotoVitalityBehavior _handleDidSeekToStartTime]
  -[ISLivePhotoVitalityBehavior _didReachTransitionTime]
  -[ISLivePhotoVitalityBehavior _didReachTransitionToPhotoTime]
  -[ISLivePhotoVitalityBehavior _shouldPlayAfterPreparation]
  -[ISLivePhotoVitalityBehavior _setShouldPlayAfterPreparation:]
  -[ISLivePhotoVitalityBehavior _setPlayingBeyondPhoto:]
  -[ISLivePhotoVitalityBehavior pauseDuringTransition]
  -[ISLivePhotoVitalityBehavior assetOptions]


ISLivePhotoVitalityFilter : NSObject
 @property  BOOL isPerformingInputChanges
 @property  BOOL _shouldUpdateOutput
 @property  <ISVitalitySettings> *settings
 @property  long long state
 @property  @? outputChangeHandler

  // instance methods
  -[ISLivePhotoVitalityFilter invalidateOutput]
  -[ISLivePhotoVitalityFilter .cxx_destruct]
  -[ISLivePhotoVitalityFilter setState:]
  -[ISLivePhotoVitalityFilter init]
  -[ISLivePhotoVitalityFilter initWithSettings:]
  -[ISLivePhotoVitalityFilter state]
  -[ISLivePhotoVitalityFilter settings]
  -[ISLivePhotoVitalityFilter updateOutput]
  -[ISLivePhotoVitalityFilter isPerformingInputChanges]
  -[ISLivePhotoVitalityFilter _setPerformingInputChanges:]
  -[ISLivePhotoVitalityFilter setOutputChangeHandler:]
  -[ISLivePhotoVitalityFilter outputChangeHandler]
  -[ISLivePhotoVitalityFilter _setShouldUpdateOutput:]
  -[ISLivePhotoVitalityFilter performInputChanges:]
  -[ISLivePhotoVitalityFilter _shouldUpdateOutput]


ISLiveWallpaperPlayer : ISBasePlayer
 @property  BOOL _active
 @property  ISDisplayLink *_displayLink
 @property  BOOL _seeking
 @property  float _playRate
 @property  BOOL touching
 @property  double force
 @property  BOOL playing

  // instance methods
  -[ISLiveWallpaperPlayer force]
  -[ISLiveWallpaperPlayer setForce:]
  -[ISLiveWallpaperPlayer _active]
  -[ISLiveWallpaperPlayer statusDidChange]
  -[ISLiveWallpaperPlayer isPlaying]
  -[ISLiveWallpaperPlayer didPerformChanges]
  -[ISLiveWallpaperPlayer _setActive:]
  -[ISLiveWallpaperPlayer setPlayerItem:]
  -[ISLiveWallpaperPlayer _update]
  -[ISLiveWallpaperPlayer isTouching]
  -[ISLiveWallpaperPlayer _setDisplayLink:]
  -[ISLiveWallpaperPlayer _displayLink]
  -[ISLiveWallpaperPlayer setTouching:]
  -[ISLiveWallpaperPlayer _isSeeking]
  -[ISLiveWallpaperPlayer _playRate]
  -[ISLiveWallpaperPlayer _setPlayRate:]
  -[ISLiveWallpaperPlayer _updatePlayer]
  -[ISLiveWallpaperPlayer _seekVideoToBeginning]
  -[ISLiveWallpaperPlayer _seekVideoToEnd]
  -[ISLiveWallpaperPlayer _setSeeking:]
  -[ISLiveWallpaperPlayer _handleDidFinishSeeking:]


ISLiveWallpaperUIView : ISBasePlayerUIView
 @property  BOOL touching
 @property  double force
 @property  NSTimer *updateTimer
 @property  ISLiveWallpaperPlayer *player
 @property  UIGestureRecognizer *playbackGestureRecognizer

  // instance methods
  -[ISLiveWallpaperUIView force]
  -[ISLiveWallpaperUIView setForce:]
  -[ISLiveWallpaperUIView initWithCoder:]
  -[ISLiveWallpaperUIView willMoveToWindow:]
  -[ISLiveWallpaperUIView setUpdateTimer:]
  -[ISLiveWallpaperUIView .cxx_destruct]
  -[ISLiveWallpaperUIView touching]
  -[ISLiveWallpaperUIView playbackGestureRecognizer]
  -[ISLiveWallpaperUIView initWithFrame:]
  -[ISLiveWallpaperUIView dealloc]
  -[ISLiveWallpaperUIView updateTimer]
  -[ISLiveWallpaperUIView _handlePlaybackRecognizer:]
  -[ISLiveWallpaperUIView setTouching:]
  -[ISLiveWallpaperUIView _updatePlayer]
  -[ISLiveWallpaperUIView _ISLiveWallpaperUIViewCommonInitialization]
  -[ISLiveWallpaperUIView _handleUpdateTimer]


ISAnimatedImagePlayer : NSObject <ISChangeObserver>
 @property  PFAnimatedImage *animatedImage
 @property  BOOL playing
 @property  unsigned long displayedFrameIndex
 @property  BOOL allowFrameDrops
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ISAnimatedImagePlayer setPlaying:]
  -[ISAnimatedImagePlayer isPlaying]
  -[ISAnimatedImagePlayer currentImage]
  -[ISAnimatedImagePlayer .cxx_destruct]
  -[ISAnimatedImagePlayer updateAnimation]
  -[ISAnimatedImagePlayer unregisterDestination:]
  -[ISAnimatedImagePlayer animationTimerFired:]
  -[ISAnimatedImagePlayer _shouldAnimate]
  -[ISAnimatedImagePlayer dealloc]
  -[ISAnimatedImagePlayer animatedImage]
  -[ISAnimatedImagePlayer observable:didChange:context:]
  -[ISAnimatedImagePlayer registerDestination:]
  -[ISAnimatedImagePlayer initWithAnimatedImage:]
  -[ISAnimatedImagePlayer setAllowFrameDrops:]
  -[ISAnimatedImagePlayer _seekToBeginning]
  -[ISAnimatedImagePlayer _setCurrentFrame:]
  -[ISAnimatedImagePlayer _resetAnimationState]
  -[ISAnimatedImagePlayer _notifyDestinationsOfFrameChange]
  -[ISAnimatedImagePlayer _anyDestinationIsReady]
  -[ISAnimatedImagePlayer _notifyDestinationsOfAnimationStart]
  -[ISAnimatedImagePlayer _notifyDestinationsOfAnimationEnd]
  -[ISAnimatedImagePlayer setDisplayedFrameIndex:]
  -[ISAnimatedImagePlayer displayedFrameIndex]
  -[ISAnimatedImagePlayer allowFrameDrops]


ISObservable : NSObject
 @property  BOOL hasObservers

  // instance methods
  -[ISObservable didPerformChanges]
  -[ISObservable performChanges:]
  -[ISObservable mutableChangeObject]
  -[ISObservable hasObservers]
  -[ISObservable .cxx_destruct]
  -[ISObservable enumerateObserversUsingBlock:]
  -[ISObservable signalChange:]
  -[ISObservable init]
  -[ISObservable didPublishChanges]
  -[ISObservable unregisterChangeObserver:context:]
  -[ISObservable registerChangeObserver:context:]
  -[ISObservable _publishChanges]
  -[ISObservable _willChange]
  -[ISObservable _didChange]
  -[ISObservable _observersQueue_copyChangeObserversForWriteIfNeeded]
  -[ISObservable _applyPendingChanges]
  -[ISObservable isPerformingChanges]
  -[ISObservable currentChanges]
  -[ISObservable _setHasObservers:]
  -[ISObservable hasObserversDidChange]
  -[ISObservable willPerformChanges]


ISPerformanceDiagnosticsSettings : ISSettings
 @property  BOOL shouldTracePerformance

  // class methods
  +[ISPerformanceDiagnosticsSettings sharedInstance]
  +[ISPerformanceDiagnosticsSettings settingsControllerModule]

  // instance methods
  -[ISPerformanceDiagnosticsSettings setDefaultValues]
  -[ISPerformanceDiagnosticsSettings shouldTracePerformance]
  -[ISPerformanceDiagnosticsSettings setShouldTracePerformance:]


ISPlayerContent : NSObject
 @property  ^{CGImage=} photo
 @property  int photoEXIFOrientation
 @property  {?=qiIq} photoTime
 @property  {?=qiIq} videoDuration
 @property  AVPlayerItem *videoPlayerItem
 @property  BOOL photoHasColorAdjustments
 @property  BOOL photoIsOriginal
 @property  BOOL supportsVitality
 @property  NSNumber *variationIdentifier

  // instance methods
  -[ISPlayerContent videoDuration]
  -[ISPlayerContent .cxx_destruct]
  -[ISPlayerContent photo]
  -[ISPlayerContent isEqual:]
  -[ISPlayerContent photoTime]
  -[ISPlayerContent photoEXIFOrientation]
  -[ISPlayerContent dealloc]
  -[ISPlayerContent photoIsOriginal]
  -[ISPlayerContent videoPlayerItem]
  -[ISPlayerContent variationIdentifier]
  -[ISPlayerContent supportsVitality]
  -[ISPlayerContent photoHasColorAdjustments]
  -[ISPlayerContent initWithPhoto:photoIsOriginal:photoEXIFOrientation:photoTime:videoDuration:photoHasColorAdjustments:videoPlayerItem:variationIdentifier:supportsVitality:]


ISPlayerItem : ISObservable
 @property  long long status
 @property  NSError *error
 @property  ISPlayerContent *playerContent
 @property  BOOL _loadingCancelled
 @property  long long _videoPlayerItemRequestID
 @property  NSNumber *_variationIdentifier
 @property  NSString *_minimumClientVersion
 @property  BOOL contentSupportsVitality
 @property  BOOL reversesMoreVideoFramesInMemory
 @property  BOOL aggressivelyCacheVideoFrames
 @property  BOOL decodesAllFramesDuringOrdinaryPlayback
 @property  ISAsset *asset
 @property  {CGSize=dd} targetSize
 @property  long long loadingTarget
 @property  AVVideoComposition *videoComposition

  // class methods
  +[ISPlayerItem playerItemWithAsset:targetSize:]
  +[ISPlayerItem currentClientVersion]

  // instance methods
  -[ISPlayerItem _invalidateStatus]
  -[ISPlayerItem cancelLoading]
  -[ISPlayerItem _setError:]
  -[ISPlayerItem _setStatus:]
  -[ISPlayerItem setReversesMoreVideoFramesInMemory:]
  -[ISPlayerItem setDecodesAllFramesDuringOrdinaryPlayback:]
  -[ISPlayerItem didPerformChanges]
  -[ISPlayerItem performChanges:]
  -[ISPlayerItem mutableChangeObject]
  -[ISPlayerItem _updateIfNeeded]
  -[ISPlayerItem targetSize]
  -[ISPlayerItem .cxx_destruct]
  -[ISPlayerItem setVideoComposition:]
  -[ISPlayerItem init]
  -[ISPlayerItem asset]
  -[ISPlayerItem _needsUpdate]
  -[ISPlayerItem status]
  -[ISPlayerItem dealloc]
  -[ISPlayerItem videoComposition]
  -[ISPlayerItem error]
  -[ISPlayerItem reversesMoreVideoFramesInMemory]
  -[ISPlayerItem decodesAllFramesDuringOrdinaryPlayback]
  -[ISPlayerItem _updateStatusIfNeeded]
  -[ISPlayerItem setLoadingTarget:]
  -[ISPlayerItem _cancelLoading]
  -[ISPlayerItem _invalidatePlayerContent]
  -[ISPlayerItem _updatePlayerContentIfNeeded]
  -[ISPlayerItem loadingTarget]
  -[ISPlayerItem initWithAsset:targetSize:]
  -[ISPlayerItem _performIvarWrite:]
  -[ISPlayerItem _performIvarRead:]
  -[ISPlayerItem _isOnIvarQueue]
  -[ISPlayerItem _videoPlayerItem]
  -[ISPlayerItem _minimumClientVersion]
  -[ISPlayerItem resetAVObjects]
  -[ISPlayerItem playerContent]
  -[ISPlayerItem discardContentBelowLoadingTarget]
  -[ISPlayerItem setAggressivelyCacheVideoFrames:]
  -[ISPlayerItem _variationIdentifier]
  -[ISPlayerItem _videoPlayerItemRequestID]
  -[ISPlayerItem _performWork:sync:]
  -[ISPlayerItem _invalidateVideoPlayerItem]
  -[ISPlayerItem _setVideoPlayerItem:videoDuration:]
  -[ISPlayerItem _reloadAllContent]
  -[ISPlayerItem _performWork:]
  -[ISPlayerItem aggressivelyCacheVideoFrames]
  -[ISPlayerItem _updateMinimumClientVersionIfNeeded]
  -[ISPlayerItem _updatePlaybackStyleIdentifierIfNeeded]
  -[ISPlayerItem _updateContentSupportsVitalityIfNeeded]
  -[ISPlayerItem _updateVideoPlayerItemIfNeeded]
  -[ISPlayerItem _isMinimumClientVersionValid]
  -[ISPlayerItem _setMinimumClientVersion:]
  -[ISPlayerItem _isPlaybackStyleIdentifierValid]
  -[ISPlayerItem _setVariationIdentifier:]
  -[ISPlayerItem _isContentSupportsVitalityValid]
  -[ISPlayerItem setContentSupportsVitality:]
  -[ISPlayerItem _isVideoPlayerItemValid]
  -[ISPlayerItem _handleVideoPlayerItemLoadResultWithSuccess:playerItem:videoDuration:error:]
  -[ISPlayerItem _setVideoPlayerItemRequestID:]
  -[ISPlayerItem _isPlayerContentValid]
  -[ISPlayerItem _setPlayerContent:]
  -[ISPlayerItem _isStatusVaild]
  -[ISPlayerItem _isOnWorkQueue]
  -[ISPlayerItem _invalidateMinimumClientVersion]
  -[ISPlayerItem _invalidatePlaybackStyleIdentifier]
  -[ISPlayerItem _invalidateContentSupportsVitality]
  -[ISPlayerItem contentSupportsVitality]
  -[ISPlayerItem _assertOnWorkQueue]
  -[ISPlayerItem _assertOnIvarQueue]
  -[ISPlayerItem _isLoadingCancelled]
  -[ISPlayerItem _setLoadingCancelled:]


ISPlayerItemChef : NSObject
 @property  NSOperationQueue *_operationQueue
 @property  NSObject<OS_dispatch_queue> *_isolationQueue
 @property  NSMutableDictionary *_operationsByRequestID
 @property  long long _currentRequestID

  // class methods
  +[ISPlayerItemChef defaultChef]

  // instance methods
  -[ISPlayerItemChef .cxx_destruct]
  -[ISPlayerItemChef _isolationQueue]
  -[ISPlayerItemChef init]
  -[ISPlayerItemChef _operationQueue]
  -[ISPlayerItemChef _currentRequestID]
  -[ISPlayerItemChef _operationsByRequestID]
  -[ISPlayerItemChef cancelPreparationOfIrisAssetWithRequestID:]
  -[ISPlayerItemChef prepareIrisVideoWithAsset:photoTime:trimmedTimeRange:completion:]
  -[ISPlayerItemChef prepareIrisPlayerItemWithAsset:trimmedTimeRange:photoTime:includeVideo:includeAudio:completion:]
  -[ISPlayerItemChef _setCurrentRequestID:]


_ISPlayerItemChefOperation : NSOperation
 @property  AVAsset *asset
 @property  {?={?=qiIq}{?=qiIq}} trimmedTimeRange
 @property  {?=qiIq} photoTime
 @property  BOOL includeVideo
 @property  BOOL includeAudio
 @property  @? resultHandler

  // instance methods
  -[_ISPlayerItemChefOperation resultHandler]
  -[_ISPlayerItemChefOperation main]
  -[_ISPlayerItemChefOperation .cxx_destruct]
  -[_ISPlayerItemChefOperation asset]
  -[_ISPlayerItemChefOperation photoTime]
  -[_ISPlayerItemChefOperation trimmedTimeRange]
  -[_ISPlayerItemChefOperation initWithAsset:trimmedTimeRange:photoTime:includeAudio:includeVideo:resultHandler:]
  -[_ISPlayerItemChefOperation _handleValuesDidLoad]
  -[_ISPlayerItemChefOperation _preparePlayerItem]
  -[_ISPlayerItemChefOperation includeAudio]
  -[_ISPlayerItemChefOperation includeVideo]


ISPlayerOutputContent : NSObject
 @property  ^{CGImage=} photo
 @property  BOOL photoIsOriginal
 @property  int photoEXIFOrientation
 @property  ISWrappedAVPlayer *videoPlayer
 @property  {CGSize=dd} videoSize

  // instance methods
  -[ISPlayerOutputContent initWithPhoto:photoIsOriginal:photoEXIFOrientation:videoPlayer:videoSize:]
  -[ISPlayerOutputContent .cxx_destruct]
  -[ISPlayerOutputContent videoPlayer]
  -[ISPlayerOutputContent photo]
  -[ISPlayerOutputContent photoEXIFOrientation]
  -[ISPlayerOutputContent dealloc]
  -[ISPlayerOutputContent photoIsOriginal]
  -[ISPlayerOutputContent videoSize]


ISPlayerOutputTransitionOptions : NSObject
 @property  double transitionDuration

  // instance methods
  -[ISPlayerOutputTransitionOptions setTransitionDuration:]
  -[ISPlayerOutputTransitionOptions transitionDuration]
  -[ISPlayerOutputTransitionOptions init]


ISPlayerSettings : ISSettings
 @property  BOOL easingEnabled
 @property  double vitalityEaseDuration
 @property  float vitalityEaseMinRate
 @property  long long startBehavior
 @property  BOOL scaleDuringPlayback
 @property  BOOL loopingEnabled
 @property  BOOL crossfadeEnabled
 @property  BOOL audioEnabled
 @property  BOOL playIsSticky
 @property  BOOL longExposureVitality
 @property  BOOL playDuringHint
 @property  BOOL showStateOverlay
 @property  BOOL prerollBeforePlaying
 @property  BOOL useDedicatedQueues
 @property  BOOL allowFrameBlending
 @property  BOOL allowVideoPreRoll
 @property  double forceScrubRewindFactor
 @property  double forceScrubMinRateChange
 @property  double forceScrubMinimumRate
 @property  double forceScrubMaximumInteractiveRate

  // class methods
  +[ISPlayerSettings sharedInstance]
  +[ISPlayerSettings settingsControllerModule]

  // instance methods
  -[ISPlayerSettings loopingEnabled]
  -[ISPlayerSettings playIsSticky]
  -[ISPlayerSettings startBehavior]
  -[ISPlayerSettings playDuringHint]
  -[ISPlayerSettings setAllowVideoPreRoll:]
  -[ISPlayerSettings setForceScrubMaximumInteractiveRate:]
  -[ISPlayerSettings setDefaultValues]
  -[ISPlayerSettings setAudioEnabled:]
  -[ISPlayerSettings setVitalityEaseMinRate:]
  -[ISPlayerSettings crossfadeEnabled]
  -[ISPlayerSettings forceScrubMaximumInteractiveRate]
  -[ISPlayerSettings setAllowFrameBlending:]
  -[ISPlayerSettings audioEnabled]
  -[ISPlayerSettings allowFrameBlending]
  -[ISPlayerSettings setForceScrubRewindFactor:]
  -[ISPlayerSettings showStateOverlay]
  -[ISPlayerSettings vitalityEaseMinRate]
  -[ISPlayerSettings prerollBeforePlaying]
  -[ISPlayerSettings easingEnabled]
  -[ISPlayerSettings setPlayIsSticky:]
  -[ISPlayerSettings allowVideoPreRoll]
  -[ISPlayerSettings setLongExposureVitality:]
  -[ISPlayerSettings setShowStateOverlay:]
  -[ISPlayerSettings setForceScrubMinimumRate:]
  -[ISPlayerSettings setLoopingEnabled:]
  -[ISPlayerSettings setScaleDuringPlayback:]
  -[ISPlayerSettings setForceScrubMinRateChange:]
  -[ISPlayerSettings setUseDedicatedQueues:]
  -[ISPlayerSettings forceScrubRewindFactor]
  -[ISPlayerSettings forceScrubMinRateChange]
  -[ISPlayerSettings setPrerollBeforePlaying:]
  -[ISPlayerSettings setEasingEnabled:]
  -[ISPlayerSettings longExposureVitality]
  -[ISPlayerSettings useDedicatedQueues]
  -[ISPlayerSettings setVitalityEaseDuration:]
  -[ISPlayerSettings setPlayDuringHint:]
  -[ISPlayerSettings setCrossfadeEnabled:]
  -[ISPlayerSettings scaleDuringPlayback]
  -[ISPlayerSettings vitalityEaseDuration]
  -[ISPlayerSettings setStartBehavior:]
  -[ISPlayerSettings forceScrubMinimumRate]


ISPlayerState : NSObject
 @property  NSString *diagnosticLabel
 @property  double photoBlurRadius
 @property  double videoAlpha
 @property  double videoBlurRadius

  // class methods
  +[ISPlayerState outputInfoWithPhotoBlurRadius:videoAlpha:videoBlurRadius:label:]

  // instance methods
  -[ISPlayerState diagnosticLabel]
  -[ISPlayerState .cxx_destruct]
  -[ISPlayerState initWithPhotoBlurRadius:videoAlpha:videoBlurRadius:label:]
  -[ISPlayerState videoBlurRadius]
  -[ISPlayerState videoAlpha]
  -[ISPlayerState photoBlurRadius]


ISPlayerView : UIView <ISChangeObserver, ISBasePlayerDelegate>
 @property  ISBasePlayerUIView *_playerView
 @property  ISWrappedAVPlayer *_videoPlayer
 @property  ISPlayerItem *_playerItem
 @property  UIGestureRecognizer *_gestureRecognizer
 @property  long long status
 @property  long long playbackState
 @property  BOOL readyForDisplay
 @property  NSMutableSet *_activeGestures
 @property  unsigned long playbackStyle
 @property  {CGSize=dd} dimensionsOfReservedVideoMemory
 @property  BOOL audioMuted
 @property  BOOL isReadyForDisplay
 @property  BOOL isInteracting
 @property  NSError *error
 @property  UIGestureRecognizer *gestureRecognizer
 @property  <ISPlayerViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ISPlayerView setAllowPlayerReuse:]

  // instance methods
  -[ISPlayerView _invalidateStatus]
  -[ISPlayerView _setStatus:]
  -[ISPlayerView playbackState]
  -[ISPlayerView _playerItem]
  -[ISPlayerView gestureRecognizer]
  -[ISPlayerView isReadyForDisplay]
  -[ISPlayerView _gestureRecognizer]
  -[ISPlayerView _updateIfNeeded]
  -[ISPlayerView .cxx_destruct]
  -[ISPlayerView _activeGestures]
  -[ISPlayerView setDelegate:]
  -[ISPlayerView isInteracting]
  -[ISPlayerView _invalidatePlaybackState]
  -[ISPlayerView setPlaybackStyle:]
  -[ISPlayerView _videoPlayer]
  -[ISPlayerView readyForDisplay]
  -[ISPlayerView _needsUpdate]
  -[ISPlayerView initWithVideoPlayer:]
  -[ISPlayerView playbackStyle]
  -[ISPlayerView status]
  -[ISPlayerView initWithFrame:]
  -[ISPlayerView _setGestureRecognizer:]
  -[ISPlayerView _playerView]
  -[ISPlayerView _setPlayerItem:]
  -[ISPlayerView delegate]
  -[ISPlayerView setContentMode:]
  -[ISPlayerView _updatePlaybackStateIfNeeded]
  -[ISPlayerView dimensionsOfReservedVideoMemory]
  -[ISPlayerView observable:didChange:context:]
  -[ISPlayerView setDimensionsOfReservedVideoMemory:]
  -[ISPlayerView error]
  -[ISPlayerView _updateStatusIfNeeded]
  -[ISPlayerView _invalidatePlayerItemLoadingTarget]
  -[ISPlayerView _updatePlayerItemLoadingTargetIfNeeded]
  -[ISPlayerView _setReadyForDisplay:]
  -[ISPlayerView _setInteracting:]
  -[ISPlayerView videoPlayerForPlayer:]
  -[ISPlayerView prepareWithPhoto:videoAsset:photoTime:photoEXIFOrientation:]
  -[ISPlayerView _handleGesture:]
  -[ISPlayerView setAudioMuted:]
  -[ISPlayerView audioMuted]
  -[ISPlayerView prepareWithPlayerItem:]
  -[ISPlayerView _invalidatePlayerView]
  -[ISPlayerView _invalidatePlayerMuted]
  -[ISPlayerView _invalidatePlayerPlayerItem]
  -[ISPlayerView _invalidateReadyForDisplay]
  -[ISPlayerView _updatePlayerViewIfNeeded]
  -[ISPlayerView _updatePlayerPlayerItemIfNeeded]
  -[ISPlayerView _updatePlayerMutedIfNeeded]
  -[ISPlayerView _updateReadyForDisplayIfNeeded]
  -[ISPlayerView _setPlayerView:]
  -[ISPlayerView _setPlaybackState:]


ISAnimatedImage : PFAnimatedImage

ISRootSettings : ISSettings
 @property  ISPlayerSettings *playerSettings
 @property  ISVitalitySettings *vitalitySettings
 @property  ISPerformanceDiagnosticsSettings *performanceDiagnosticsSettings

  // class methods
  +[ISRootSettings sharedInstance]
  +[ISRootSettings settingsControllerModule]
  +[ISRootSettings _defaultsKey]

  // instance methods
  -[ISRootSettings save]
  -[ISRootSettings vitalitySettings]
  -[ISRootSettings .cxx_destruct]
  -[ISRootSettings setDefaultValues]
  -[ISRootSettings performanceDiagnosticsSettings]
  -[ISRootSettings setPlayerSettings:]
  -[ISRootSettings setPerformanceDiagnosticsSettings:]
  -[ISRootSettings playerSettings]
  -[ISRootSettings setVitalitySettings:]


ISScrollViewVitalityController : NSObject
 @property  UIScrollView *_scrollView
 @property  NSHashTable *_playerViews
 @property  BOOL _isPerformingChanges
 @property  BOOL scrolling
 @property  BOOL decelerating
 @property  BOOL hasTargetContentOffset
 @property  {CGPoint=dd} targetContentOffset
 @property  NSDate *estimatedScrollEndDate
 @property  ISVisibilityOffsetHelper *visibilityOffsetHelper
 @property  BOOL canPerformVitality
 @property  BOOL enabled

  // instance methods
  -[ISScrollViewVitalityController _setPerformingChanges:]
  -[ISScrollViewVitalityController performChanges:]
  -[ISScrollViewVitalityController _isPerformingChanges]
  -[ISScrollViewVitalityController .cxx_destruct]
  -[ISScrollViewVitalityController _scrollView]
  -[ISScrollViewVitalityController _setScrollView:]
  -[ISScrollViewVitalityController init]
  -[ISScrollViewVitalityController targetContentOffset]
  -[ISScrollViewVitalityController isEnabled]
  -[ISScrollViewVitalityController visibilityOffsetHelper]
  -[ISScrollViewVitalityController isScrolling]
  -[ISScrollViewVitalityController setEnabled:]
  -[ISScrollViewVitalityController isDecelerating]
  -[ISScrollViewVitalityController setTargetContentOffset:]
  -[ISScrollViewVitalityController canPerformVitality]
  -[ISScrollViewVitalityController addPlayerView:]
  -[ISScrollViewVitalityController removePlayerView:]
  -[ISScrollViewVitalityController setScrolling:]
  -[ISScrollViewVitalityController setEstimatedScrollEndDate:]
  -[ISScrollViewVitalityController setDecelerating:]
  -[ISScrollViewVitalityController estimatedScrollEndDate]
  -[ISScrollViewVitalityController _playerViews]
  -[ISScrollViewVitalityController _updateVitalityFilters]
  -[ISScrollViewVitalityController hasTargetContentOffset]
  -[ISScrollViewVitalityController _newVitalityFilter]
  -[ISScrollViewVitalityController didLayoutPlayerViews]
  -[ISScrollViewVitalityController setHasTargetContentOffset:]
  -[ISScrollViewVitalityController canPerformVitalityDidChange]


ISAnimatedImageView : UIView <ISAnimatedImagePlayerDestination>
 @property  UIImageView *placeholderImageView
 @property  ISAnimatedImagePlayer *player
 @property  PFAnimatedImage *image
 @property  BOOL playing
 @property  unsigned long displayedFrameIndex
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ISAnimatedImageView setPlaying:]
  -[ISAnimatedImageView isPlaying]
  -[ISAnimatedImageView didMoveToSuperview]
  -[ISAnimatedImageView image]
  -[ISAnimatedImageView .cxx_destruct]
  -[ISAnimatedImageView setPlayer:]
  -[ISAnimatedImageView player]
  -[ISAnimatedImageView sizeThatFits:]
  -[ISAnimatedImageView setAlpha:]
  -[ISAnimatedImageView setPlaceholderImageView:]
  -[ISAnimatedImageView setImage:]
  -[ISAnimatedImageView displayLayer:]
  -[ISAnimatedImageView didMoveToWindow]
  -[ISAnimatedImageView dealloc]
  -[ISAnimatedImageView placeholderImageView]
  -[ISAnimatedImageView setHidden:]
  -[ISAnimatedImageView initWithAnimatedImage:]
  -[ISAnimatedImageView frameDidChange]
  -[ISAnimatedImageView didBeginAnimating]
  -[ISAnimatedImageView isReadyToDisplay]
  -[ISAnimatedImageView setDisplayedFrameIndex:]
  -[ISAnimatedImageView displayedFrameIndex]
  -[ISAnimatedImageView initWithAnimatedImagePlayer:]


ISSettings : PTSettings
  // class methods
  +[ISSettings sharedInstance]

  // instance methods
  -[ISSettings save]


ISTouchLivePhotoPlaybackFilter : ISLivePhotoPlaybackFilter
 @property  long long _playbackRequestID
 @property  ISDisplayLink *_displayLink
 @property  NSDate *_playbackStartDate
 @property  BOOL touchActive

  // instance methods
  -[ISTouchLivePhotoPlaybackFilter _nextPlaybackRequestID]
  -[ISTouchLivePhotoPlaybackFilter didPerformChanges]
  -[ISTouchLivePhotoPlaybackFilter isTouchActive]
  -[ISTouchLivePhotoPlaybackFilter .cxx_destruct]
  -[ISTouchLivePhotoPlaybackFilter _setPlaybackReaquestID:]
  -[ISTouchLivePhotoPlaybackFilter _setPlaybackStartDate:]
  -[ISTouchLivePhotoPlaybackFilter reset]
  -[ISTouchLivePhotoPlaybackFilter setTouchActive:]
  -[ISTouchLivePhotoPlaybackFilter _setDisplayLink:]
  -[ISTouchLivePhotoPlaybackFilter _playbackRequestID]
  -[ISTouchLivePhotoPlaybackFilter _handleDisplayLink]
  -[ISTouchLivePhotoPlaybackFilter _displayLink]
  -[ISTouchLivePhotoPlaybackFilter _playbackStartDate]


ISAnimatedImageTimer : ISObservable
 @property  double timestamp

  // class methods
  +[ISAnimatedImageTimer sharedTimer]

  // instance methods
  -[ISAnimatedImageTimer mutableChangeObject]
  -[ISAnimatedImageTimer .cxx_destruct]
  -[ISAnimatedImageTimer init]
  -[ISAnimatedImageTimer _updateDisplayLink]
  -[ISAnimatedImageTimer timestamp]
  -[ISAnimatedImageTimer dealloc]
  -[ISAnimatedImageTimer _setTimestamp:]
  -[ISAnimatedImageTimer hasObserversDidChange]
  -[ISAnimatedImageTimer _iosInitialization]
  -[ISAnimatedImageTimer _iosDealloc]
  -[ISAnimatedImageTimer _iosUpdateDisplayLink]
  -[ISAnimatedImageTimer _fireTimerWithInterval:]
  -[ISAnimatedImageTimer _iosAnimationTimerFired:]


_ISAnimatedImageTimerForwardingProxy : NSObject
 @property  ISAnimatedImageTimer *_forwardingTarget

  // instance methods
  -[_ISAnimatedImageTimerForwardingProxy .cxx_destruct]
  -[_ISAnimatedImageTimerForwardingProxy _displayLinkFire:]
  -[_ISAnimatedImageTimerForwardingProxy _forwardingTarget]
  -[_ISAnimatedImageTimerForwardingProxy _setForwardingTarget:]


ISTouchingGestureRecognizer : UIGestureRecognizer
 @property  unsigned long _touchCount
 @property  unsigned long _beginRequestID
 @property  {CGPoint=dd} _initialPointInView
 @property  double minimumTouchDuration
 @property  BOOL requireSingleTouch
 @property  double maximumTouchMovement
 @property  double distanceFromInitialPoint

  // instance methods
  -[ISTouchingGestureRecognizer maximumTouchMovement]
  -[ISTouchingGestureRecognizer _setBeginRequestID:]
  -[ISTouchingGestureRecognizer _incrementTouchesBy:]
  -[ISTouchingGestureRecognizer _touchCount]
  -[ISTouchingGestureRecognizer pressesChanged:withEvent:]
  -[ISTouchingGestureRecognizer distanceFromInitialPoint]
  -[ISTouchingGestureRecognizer _updateDistanceFromInitialPoint]
  -[ISTouchingGestureRecognizer _setInitialPointInView:]
  -[ISTouchingGestureRecognizer setMaximumTouchMovement:]
  -[ISTouchingGestureRecognizer initWithTarget:action:]
  -[ISTouchingGestureRecognizer minimumTouchDuration]
  -[ISTouchingGestureRecognizer _initialPointInView]
  -[ISTouchingGestureRecognizer touchesBegan:withEvent:]
  -[ISTouchingGestureRecognizer _decrementTouchesBy:]
  -[ISTouchingGestureRecognizer _beginRequestID]
  -[ISTouchingGestureRecognizer setMinimumTouchDuration:]
  -[ISTouchingGestureRecognizer touchesMoved:withEvent:]
  -[ISTouchingGestureRecognizer setRequireSingleTouch:]
  -[ISTouchingGestureRecognizer _beginWithRequestID:]
  -[ISTouchingGestureRecognizer _setTouchCount:]
  -[ISTouchingGestureRecognizer reset]
  -[ISTouchingGestureRecognizer touchesCancelled:withEvent:]
  -[ISTouchingGestureRecognizer pressesCancelled:withEvent:]
  -[ISTouchingGestureRecognizer pressesEnded:withEvent:]
  -[ISTouchingGestureRecognizer requireSingleTouch]
  -[ISTouchingGestureRecognizer setEnabled:]
  -[ISTouchingGestureRecognizer pressesBegan:withEvent:]
  -[ISTouchingGestureRecognizer touchesEnded:withEvent:]


ISTransitionApplier : NSObject <CAAnimationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ISTransitionApplier defaultApplier]

  // instance methods
  -[ISTransitionApplier applyScale:withTransitionOptions:toPhotoLayer:videoLayer:completion:]
  -[ISTransitionApplier animationDidStop:finished:]
  -[ISTransitionApplier setValue:forKeyPath:ofLayer:withTransitionOptions:completion:]
  -[ISTransitionApplier _applyScale:toLayer:withTransitionOptions:completion:]
  -[ISTransitionApplier applyOutputInfo:withTransitionOptions:toPhotoLayer:videoLayer:completion:]
  -[ISTransitionApplier _applyAlpha:blurRadius:toLayer:withTransitionOptions:completion:]


ISUIScrollViewVitalityController : ISScrollViewVitalityController <UIScrollViewDelegate>
 @property  UIScrollView *_scrollView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ISUIScrollViewVitalityController scrollViewWillBeginZooming:withView:]
  -[ISUIScrollViewVitalityController .cxx_destruct]
  -[ISUIScrollViewVitalityController scrollViewDidEndScrollingAnimation:]
  -[ISUIScrollViewVitalityController scrollViewDidScrollToTop:]
  -[ISUIScrollViewVitalityController scrollViewDidZoom:]
  -[ISUIScrollViewVitalityController _scrollView]
  -[ISUIScrollViewVitalityController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[ISUIScrollViewVitalityController scrollViewDidEndZooming:withView:atScale:]
  -[ISUIScrollViewVitalityController _setScrollView:]
  -[ISUIScrollViewVitalityController init]
  -[ISUIScrollViewVitalityController scrollViewDidEndDragging:willDecelerate:]
  -[ISUIScrollViewVitalityController scrollViewDidScroll:]
  -[ISUIScrollViewVitalityController _reduceMotionDidChange:]
  -[ISUIScrollViewVitalityController visibilityOffsetHelper]
  -[ISUIScrollViewVitalityController scrollViewWillBeginDragging:]
  -[ISUIScrollViewVitalityController scrollViewShouldScrollToTop:]
  -[ISUIScrollViewVitalityController scrollViewWillBeginDecelerating:]
  -[ISUIScrollViewVitalityController scrollViewDidEndDecelerating:]
  -[ISUIScrollViewVitalityController canPerformVitality]


ISUIVisibilityOffsetHelper : ISVisibilityOffsetHelper
  // instance methods
  -[ISUIVisibilityOffsetHelper boundsForView:inScrollView:]
  -[ISUIVisibilityOffsetHelper visibleRectForScrollView:]


ISVideoPlayerUIView : UIView
 @property  ISWrappedAVPlayer *videoPlayer
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentsRect
 @property  @? videoLayerReadyForDisplayChangeHandler
 @property  BOOL videoLayerReadyForDisplay

  // instance methods
  -[ISVideoPlayerUIView playerLayer]
  -[ISVideoPlayerUIView initWithCoder:]
  -[ISVideoPlayerUIView setContentsRect:]
  -[ISVideoPlayerUIView .cxx_destruct]
  -[ISVideoPlayerUIView videoLayerReadyForDisplay]
  -[ISVideoPlayerUIView _updateVideoGravity]
  -[ISVideoPlayerUIView videoPlayer]
  -[ISVideoPlayerUIView contentsRect]
  -[ISVideoPlayerUIView setVideoLayerReadyForDisplayChangeHandler:]
  -[ISVideoPlayerUIView setVideoPlayer:]
  -[ISVideoPlayerUIView initWithFrame:]
  -[ISVideoPlayerUIView setContentMode:]
  -[ISVideoPlayerUIView videoLayerReadyForDisplayChangeHandler]
  -[ISVideoPlayerUIView _ISVideoPlayerUIView_commonInitialization]


ISAVPlayerUIView : UIView
  // class methods
  +[ISAVPlayerUIView layerClass]

  // instance methods
  -[ISAVPlayerUIView playerLayer]


ISVisibilityOffsetHelper : NSObject <ISVisibilityOffsetComputer>
 @property  UIScrollView *_scrollView
 @property  {CGPoint=dd} _targetContentOffset
 @property  long long direction
 @property  double maximumDistance
 @property  double maximumDistanceLag

  // instance methods
  -[ISVisibilityOffsetHelper direction]
  -[ISVisibilityOffsetHelper setDirection:]
  -[ISVisibilityOffsetHelper .cxx_destruct]
  -[ISVisibilityOffsetHelper _scrollView]
  -[ISVisibilityOffsetHelper _setScrollView:]
  -[ISVisibilityOffsetHelper maximumDistance]
  -[ISVisibilityOffsetHelper _targetContentOffset]
  -[ISVisibilityOffsetHelper boundsForView:inScrollView:]
  -[ISVisibilityOffsetHelper setMaximumDistance:]
  -[ISVisibilityOffsetHelper visibleRectForScrollView:]
  -[ISVisibilityOffsetHelper getVisibility:offset:targetVisibilityOffset:forView:]
  -[ISVisibilityOffsetHelper computeVisibilityOffsetsInScrollView:withTargetContentOffset:usingBlock:]
  -[ISVisibilityOffsetHelper _setTargetContentOffset:]
  -[ISVisibilityOffsetHelper _updateDirectionIfNeeded]
  -[ISVisibilityOffsetHelper _visibilityRangeForRect:]
  -[ISVisibilityOffsetHelper maximumDistanceLag]
  -[ISVisibilityOffsetHelper setMaximumDistanceLag:]


ISVitalityConstantFilter : ISVitalityFilter

ISVitalityFilter : NSObject
 @property  BOOL _isPerformingInputChanges
 @property  BOOL _isPerformingOutputChanges
 @property  BOOL _outputDidChange
 @property  BOOL scrubbing
 @property  double scrubOffset
 @property  double playRate
 @property  <ISVitalitySettings> *settings
 @property  BOOL isVisible
 @property  double visibilityOffset
 @property  BOOL hasTargetVisibilityOffset
 @property  double targetVisibilityOffset
 @property  NSDate *estimatedScrollEndDate
 @property  BOOL isScrolling
 @property  BOOL isDecelerating
 @property  @? outputChangeHandler

  // instance methods
  -[ISVitalityFilter isScrubbing]
  -[ISVitalityFilter setVisible:]
  -[ISVitalityFilter .cxx_destruct]
  -[ISVitalityFilter init]
  -[ISVitalityFilter isVisible]
  -[ISVitalityFilter initWithSettings:]
  -[ISVitalityFilter playRate]
  -[ISVitalityFilter isScrolling]
  -[ISVitalityFilter _invalidateOutput]
  -[ISVitalityFilter isDecelerating]
  -[ISVitalityFilter settings]
  -[ISVitalityFilter setScrolling:]
  -[ISVitalityFilter setScrubbing:]
  -[ISVitalityFilter hasTargetVisibilityOffset]
  -[ISVitalityFilter targetVisibilityOffset]
  -[ISVitalityFilter visibilityOffset]
  -[ISVitalityFilter setEstimatedScrollEndDate:]
  -[ISVitalityFilter setDecelerating:]
  -[ISVitalityFilter setTargetVisibilityOffset:]
  -[ISVitalityFilter setHasTargetVisibilityOffset:]
  -[ISVitalityFilter setVisibilityOffset:]
  -[ISVitalityFilter estimatedScrollEndDate]
  -[ISVitalityFilter _setPerformingInputChanges:]
  -[ISVitalityFilter _isPerformingInputChanges]
  -[ISVitalityFilter setOutputChangeHandler:]
  -[ISVitalityFilter outputChangeHandler]
  -[ISVitalityFilter performInputChanges:]
  -[ISVitalityFilter inputDidChange]
  -[ISVitalityFilter _isPerformingOutputChanges]
  -[ISVitalityFilter _setPerformingOutputChanges:]
  -[ISVitalityFilter _outputDidChange]
  -[ISVitalityFilter _setOutputDidChange:]
  -[ISVitalityFilter performOutputChanges:]
  -[ISVitalityFilter setScrubOffset:]
  -[ISVitalityFilter setPlayRate:]
  -[ISVitalityFilter scrubOffset]


ISVitalitySettings : ISSettings <ISVitalitySettings>
 @property  BOOL useLegacyBehavior
 @property  ISVitalitySpecificSettings *oneUpSettings
 @property  ISVitalitySpecificSettings *shareViewSettings
 @property  ISVitalitySpecificSettings *activityViewSettings
 @property  ISVitalitySpecificSettings *orbPreviewSettings
 @property  BOOL shouldPreroll
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ISVitalitySettings sharedInstance]
  +[ISVitalitySettings settingsControllerModule]

  // instance methods
  -[ISVitalitySettings playbackRate]
  -[ISVitalitySettings setShareViewSettings:]
  -[ISVitalitySettings maxVitalityDelay]
  -[ISVitalitySettings preDuration]
  -[ISVitalitySettings orbPreviewSettings]
  -[ISVitalitySettings .cxx_destruct]
  -[ISVitalitySettings setDefaultValues]
  -[ISVitalitySettings useLegacyBehavior]
  -[ISVitalitySettings setActivityViewSettings:]
  -[ISVitalitySettings _defaultSettings]
  -[ISVitalitySettings setOrbPreviewSettings:]
  -[ISVitalitySettings behavior]
  -[ISVitalitySettings minimumVisibilityFactor]
  -[ISVitalitySettings shareViewSettings]
  -[ISVitalitySettings maximumDelayBeforePlayback]
  -[ISVitalitySettings oneUpSettings]
  -[ISVitalitySettings endTimeOffset]
  -[ISVitalitySettings setUseLegacyBehavior:]
  -[ISVitalitySettings postDuration]
  -[ISVitalitySettings activityViewSettings]
  -[ISVitalitySettings minimumPhotoTransitionDuration]
  -[ISVitalitySettings shouldPreroll]
  -[ISVitalitySettings setOneUpSettings:]
  -[ISVitalitySettings setShouldPreroll:]


ISVitalitySpecificSettings : ISSettings <ISVitalitySettings>
 @property  long long behavior
 @property  double preDuration
 @property  double postDuration
 @property  double startSeekTolerance
 @property  double playbackRate
 @property  double endTimeOffset
 @property  double minimumVisibilityFactor
 @property  double maximumDelayBeforePlayback
 @property  double maxVitalityDelay
 @property  double minimumPhotoTransitionDuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ISVitalitySpecificSettings sharedInstance]
  +[ISVitalitySpecificSettings settingsControllerModule]

  // instance methods
  -[ISVitalitySpecificSettings setPlaybackRate:]
  -[ISVitalitySpecificSettings setEndTimeOffset:]
  -[ISVitalitySpecificSettings playbackRate]
  -[ISVitalitySpecificSettings setMaxVitalityDelay:]
  -[ISVitalitySpecificSettings maxVitalityDelay]
  -[ISVitalitySpecificSettings preDuration]
  -[ISVitalitySpecificSettings setDefaultValues]
  -[ISVitalitySpecificSettings setPreDuration:]
  -[ISVitalitySpecificSettings setBehavior:]
  -[ISVitalitySpecificSettings behavior]
  -[ISVitalitySpecificSettings minimumVisibilityFactor]
  -[ISVitalitySpecificSettings setMinimumVisibilityFactor:]
  -[ISVitalitySpecificSettings maximumDelayBeforePlayback]
  -[ISVitalitySpecificSettings endTimeOffset]
  -[ISVitalitySpecificSettings startSeekTolerance]
  -[ISVitalitySpecificSettings setPostDuration:]
  -[ISVitalitySpecificSettings setStartSeekTolerance:]
  -[ISVitalitySpecificSettings postDuration]
  -[ISVitalitySpecificSettings minimumPhotoTransitionDuration]
  -[ISVitalitySpecificSettings setMinimumPhotoTransitionDuration:]
  -[ISVitalitySpecificSettings setMaximumDelayBeforePlayback:]


ISWrappedAVAudioSession : NSObject
 @property  AVAudioSession *audioSession
 @property  @? outputVolumeChangeHandler
 @property  NSString *category
 @property  float outputVolume

  // class methods
  +[ISWrappedAVAudioSession auxiliarySession]
  +[ISWrappedAVAudioSession sharedAmbientInstanceWithLoadHandler:]
  +[ISWrappedAVAudioSession sharedAmbientInstance]
  +[ISWrappedAVAudioSession sharedPlaybackInstance]
  +[ISWrappedAVAudioSession sharedPhotosOneUpInstance]
  +[ISWrappedAVAudioSession sharedPlaybackInstanceWithLoadHandler:]
  +[ISWrappedAVAudioSession sharedPhotosOneUpInstanceWithLoadHandler:]

  // instance methods
  -[ISWrappedAVAudioSession .cxx_destruct]
  -[ISWrappedAVAudioSession setCategory:options:error:]
  -[ISWrappedAVAudioSession outputVolume]
  -[ISWrappedAVAudioSession setActive:error:]
  -[ISWrappedAVAudioSession setCategory:error:]
  -[ISWrappedAVAudioSession setOutputVolumeChangeHandler:]
  -[ISWrappedAVAudioSession _endObservingOutputVolumeIfNeeded]
  -[ISWrappedAVAudioSession initWithAudioSession:]
  -[ISWrappedAVAudioSession dealloc]
  -[ISWrappedAVAudioSession _beginObservingOutputVolumeIfNeeded]
  -[ISWrappedAVAudioSession setCategory:mode:routeSharingPolicy:options:error:]
  -[ISWrappedAVAudioSession category]
  -[ISWrappedAVAudioSession outputVolumeChangeHandler]
  -[ISWrappedAVAudioSession observeValueForKeyPath:ofObject:change:context:]
  -[ISWrappedAVAudioSession audioSession]


ISWrappedAVPlayer : ISObservable <ISKVOProxyDelegate>
 @property  BOOL loopingEnabled
 @property  BOOL suppressesAudioRendering
 @property  <ISWrappedAVPlayerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ISWrappedAVPlayer observedAVPlayerKeys]
  +[ISWrappedAVPlayer observedAVPlayerItemKeys]

  // instance methods
  -[ISWrappedAVPlayer volume]
  -[ISWrappedAVPlayer rate]
  -[ISWrappedAVPlayer setVolume:]
  -[ISWrappedAVPlayer mutableChangeObject]
  -[ISWrappedAVPlayer addBoundaryTimeObserverForTimes:queue:usingBlock:]
  -[ISWrappedAVPlayer .cxx_destruct]
  -[ISWrappedAVPlayer setAudioEnabled:]
  -[ISWrappedAVPlayer setLoopTimeRange:]
  -[ISWrappedAVPlayer currentItem]
  -[ISWrappedAVPlayer setDelegate:]
  -[ISWrappedAVPlayer init]
  -[ISWrappedAVPlayer setAllowsExternalPlayback:]
  -[ISWrappedAVPlayer seekToTime:toleranceBefore:toleranceAfter:completionHandler:]
  -[ISWrappedAVPlayer pause]
  -[ISWrappedAVPlayer currentTime]
  -[ISWrappedAVPlayer setPreventsSleepDuringVideoPlayback:]
  -[ISWrappedAVPlayer setWrappedAudioSession:]
  -[ISWrappedAVPlayer setSuppressesAudioRendering:]
  -[ISWrappedAVPlayer setRate:]
  -[ISWrappedAVPlayer removeTimeObserver:]
  -[ISWrappedAVPlayer status]
  -[ISWrappedAVPlayer setLoopingEnabled:]
  -[ISWrappedAVPlayer setActionAtItemEnd:]
  -[ISWrappedAVPlayer addPeriodicTimeObserverForInterval:queue:usingBlock:]
  -[ISWrappedAVPlayer delegate]
  -[ISWrappedAVPlayer dealloc]
  -[ISWrappedAVPlayer suppressesAudioRendering]
  -[ISWrappedAVPlayer isAudioEnabled]
  -[ISWrappedAVPlayer replaceCurrentItemWithPlayerItem:]
  -[ISWrappedAVPlayer setRate:time:atHostTime:]
  -[ISWrappedAVPlayer prerollAtRate:completionHandler:]
  -[ISWrappedAVPlayer cancelPendingPrerolls]
  -[ISWrappedAVPlayer setDimensionsOfReservedVideoMemory:]
  -[ISWrappedAVPlayer loopTimeRange]
  -[ISWrappedAVPlayer error]
  -[ISWrappedAVPlayer currentItemDuration]
  -[ISWrappedAVPlayer setLoopingEnabled:withTemplateItem:]
  -[ISWrappedAVPlayer _performIvarWrite:]
  -[ISWrappedAVPlayer _performIvarRead:]
  -[ISWrappedAVPlayer attachToPlayerLayerIfNeeded:]
  -[ISWrappedAVPlayer currentItemError]
  -[ISWrappedAVPlayer _isOnIvarQueue]
  -[ISWrappedAVPlayer isLoopingEnabled]
  -[ISWrappedAVPlayer preventsSleepDuringVideoPlayback]
  -[ISWrappedAVPlayer currentItemStatus]
  -[ISWrappedAVPlayer currentItemIsLikelyToKeepUp]
  -[ISWrappedAVPlayer currentItemPlaybackBufferFull]
  -[ISWrappedAVPlayer currentItemPlaybackBufferEmpty]
  -[ISWrappedAVPlayer itemForwardPlaybackEndTime]
  -[ISWrappedAVPlayer playToTime:withInitialRate:overDuration:progressHandler:]
  -[ISWrappedAVPlayer _performPlayerTransaction:]
  -[ISWrappedAVPlayer setItemForwardEndPlaybackTime:]
  -[ISWrappedAVPlayer _initWithAVPlayer:]
  -[ISWrappedAVPlayer replaceCurrentItemWithPlayerItem:thenCall:]
  -[ISWrappedAVPlayer observeChangeforKVOProxyIdentifier:keyPath:change:]
  -[ISWrappedAVPlayer _assertOnIvarQueue]
  -[ISWrappedAVPlayer _playerQueue_avPlayer]
  -[ISWrappedAVPlayer _playerItemDidPlayToEnd:]
  -[ISWrappedAVPlayer _nextObserverUID]
  -[ISWrappedAVPlayer _nilOrValue:]
  -[ISWrappedAVPlayer _playerQueue_startObservingPlayerItem:]
  -[ISWrappedAVPlayer _playerQueue_updatePlayerItemAudioTracksEnabled]
  -[ISWrappedAVPlayer _playerQueue_stopObservingPlayerItem:]
  -[ISWrappedAVPlayer setItemBlendsVideoFrames:]
  -[ISWrappedAVPlayer currentItemVideoComposition]


AVPlayerItem(PhotosPlayer)
	// instance methods
	-[AVPlayerItem(PhotosPlayer) is_isHighFramerate]
	-[AVPlayerItem(PhotosPlayer) is_enableColorMatching]

CALayer(PhotosPlayer)
	// instance methods
	-[CALayer(PhotosPlayer) is_addBlurFilterIfNeeded]
	-[CALayer(PhotosPlayer) _is_blurFilter]
	-[CALayer(PhotosPlayer) _is_setBlurFilter:]
	-[CALayer(PhotosPlayer) is_setBlurRadius:]
	-[CALayer(PhotosPlayer) is_blurRadius]
	-[CALayer(PhotosPlayer) is_addFilter:]
	-[CALayer(PhotosPlayer) is_removeFilter:]
	-[CALayer(PhotosPlayer) _is_removeBlurFilterIfNeeded]

UIScrollView(ISScrollViewVitalityController)
	// instance methods
	-[UIScrollView(ISScrollViewVitalityController) is_didLayoutPlayerViews]
	-[UIScrollView(ISScrollViewVitalityController) is_vitalityControllerCreateIfNeeded:]
	-[UIScrollView(ISScrollViewVitalityController) is_scrollViewDelegate]
	-[UIScrollView(ISScrollViewVitalityController) is_vitalityController]

PTRow(PhotosPlayer)
	// instance methods
	-[PTRow(PhotosPlayer) is_increment:]

UIView(PhotosPlayer)
	// instance methods
	-[UIView(PhotosPlayer) is_setBlurRadius:]
	-[UIView(PhotosPlayer) is_blurRadius]
	-[UIView(PhotosPlayer) is_actionForKey:]

01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetImageGenerator 
01 00 0e00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableAudioMix 
01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableAudioMixInputParameters 
01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableComposition 
01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerLayer 
01 00 0600 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0c00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0900 /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats: PFAnimatedImage 
01 00 0900 /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats: PFVideoComplement 
01 00 0900 /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats: PFVideoMetadata 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTButtonRow 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTChoiceRow 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDrillDownRow 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTModule 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRestoreDefaultSettingsRowAction 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRow 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSettings 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSliderRow 
01 00 0200 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSwitchRow 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIGestureRecognizer 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIImpactFeedbackGenerator 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 0300 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
