|| __DATA.__common _NPFlowProperty
|| __DATA.__common _NPFlowPropertyFlag
|| __DATA.__common __ZN6Crypto7Session6sipkeyE
|| __DATA.__common _g_recordTimestamps
|| __DATA.__objc_data _OBJC_CLASS_$_NPAppProxyFlowBridge
|| __DATA.__objc_data _OBJC_CLASS_$_NPAverage
|| __DATA.__objc_data _OBJC_CLASS_$_NPDiagnosticReport
|| __DATA.__objc_data _OBJC_CLASS_$_NPFlowProperties
|| __DATA.__objc_data _OBJC_CLASS_$_NPKey
|| __DATA.__objc_data _OBJC_CLASS_$_NPResolver
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowDNS
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowHTTP
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowTelemetry
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowUDP
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelTuscany
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelTuscanyEndpoint
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelTuscanyLoopback
|| __DATA.__objc_data _OBJC_CLASS_$_NPTuscanyLoopbackConnection
|| __DATA.__objc_data _OBJC_CLASS_$_NPUsageReport
|| __DATA.__objc_data _OBJC_CLASS_$_NSPByteParser
|| __DATA.__objc_data _OBJC_CLASS_$_NSPConnectionInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDNSPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDNSQuery
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDNSResourceRecord
|| __DATA.__objc_data _OBJC_CLASS_$_NSPFlowDivertProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NSPKeyNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NSPServerClient
|| __DATA.__objc_data _OBJC_METACLASS_$_NPAppProxyFlowBridge
|| __DATA.__objc_data _OBJC_METACLASS_$_NPAverage
|| __DATA.__objc_data _OBJC_METACLASS_$_NPDiagnosticReport
|| __DATA.__objc_data _OBJC_METACLASS_$_NPFlowProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_NPKey
|| __DATA.__objc_data _OBJC_METACLASS_$_NPResolver
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowDNS
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowHTTP
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowTelemetry
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowUDP
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelTuscany
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelTuscanyEndpoint
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelTuscanyLoopback
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTuscanyLoopbackConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_NPUsageReport
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPByteParser
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPConnectionInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDNSPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDNSQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDNSResourceRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPFlowDivertProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPKeyNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPServerClient
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTunnel._protocol
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTunnelFlow._hasTunnel
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTunnelFlow._tunnelError
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTuscanyLoopbackConnection._blobSizes
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTuscanyLoopbackConnection._currentInputFrames
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTuscanyLoopbackConnection._protocol
|| __DATA_CONST.__const __ZTI13NPFrameStream
|| __DATA_CONST.__const __ZTV13NPFrameStream
|| __DATA_CONST.__const _kEdgeSelectionServiceAlpha
|| __DATA_CONST.__const _kEdgeSelectionServiceFairness
|| __DATA_CONST.__const _kEdgeSelectionServiceGoodness
|| __DATA_CONST.__const _kEdgeSelectionServiceIsSelected
|| __DATA_CONST.__const _kEdgeSelectionServiceLastUsedTimestamp
|| __DATA_CONST.__const _kEdgeSelectionServiceNoRTTCount
|| __DATA_CONST.__const _kEdgeSelectionServicePolicyMetric
|| __DATA_CONST.__const _kEdgeSelectionServiceRTT
|| __DATA_CONST.__const _kEdgeSelectionServiceRTTSamples
|| __DATA_CONST.__const _kEdgeSelectionServiceRank
|| __DATA_CONST.__const _kEdgeSelectionServiceRewardSampleMean
|| __DATA_CONST.__const _kEdgeSelectionServiceRewardSamples
|| __DATA_CONST.__const _kEdgeSelectionServiceSelectedEdgeLabel
|| __DATA_CONST.__const _kEdgeSelectionServiceSelectionCount
|| __DATA_CONST.__const _kEdgeSelectionServiceTrialCount
|| __DATA_CONST.__const _kEdgeSelectionServiceWindowSize
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EdgeSelection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPDirectFlow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPEdgeLatency
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPEdgeSelection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPKeyBag
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPNetworkInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTunnel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTunnelNSURLSessionDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTuscanyEdge
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPTuscanyOnRamp
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPWaldo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPAppRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPControlConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPFlowDivert
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPNetworkAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EdgeSelection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPDirectFlow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPEdgeLatency
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPEdgeSelection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPKeyBag
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPNetworkInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTunnel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTunnelNSURLSessionDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTuscanyEdge
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPTuscanyOnRamp
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPWaldo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPAppRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPControlConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPFlowDivert
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPNetworkAgent
|| __TEXT.__const _NetworkServiceProxyVersionNumber
|| __TEXT.__const _NetworkServiceProxyVersionString
|| __TEXT.__const __ZTS13NPFrameStream
|| __TEXT.__text _NPGetInternalQueue
|| __TEXT.__text _NetworkServiceProxyEnableForSessionTask
|| __TEXT.__text _NetworkServiceProxyEnableInParameters
|| __TEXT.__text _NetworkServiceProxyGetStatus
|| __TEXT.__text _NetworkServiceProxyIsEnabled
|| __TEXT.__text _NetworkServiceProxySetCurrentConfiguration
|| __TEXT.__text _NetworkServiceProxySetCurrentLocation
|| __TEXT.__text _NetworkServiceProxySetFallbackTimeout
|| __TEXT.__text _NetworkServiceProxySetRemoteAddressMapForSessionTask
|| __TEXT.__text _NetworkServiceProxySetRemoteEndpointsForSessionTask
|| __TEXT.__text _NetworkServiceProxySetServiceNameForConnection
|| __TEXT.__text _NetworkServiceProxySetServiceNameForTask
|| __TEXT.__text _NetworkServiceProxySetServiceNameInParameters
|| __TEXT.__text _NetworkServiceProxyStart
|| __TEXT.__text __ZN13NPFrameStream11initialDataEb
|| __TEXT.__text __ZN13NPFrameStream14amountToBeReadEv
|| __TEXT.__text __ZN13NPFrameStream14handleReadDataEP16nw_frame_array_s
|| __TEXT.__text __ZN13NPFrameStream15logCurrentStateEb
|| __TEXT.__text __ZN13NPFrameStream17takeCurrentPacketEv
|| __TEXT.__text __ZN13NPFrameStream25handleConnectionConnectedEv
|| __TEXT.__text __ZN13NPFrameStream5flushER3AIO
|| __TEXT.__text __ZN13NPFrameStream7disposeEPKcb
|| __TEXT.__text __ZN13NPFrameStreamC2ER3LogR6SocketR10BufferPoolj
|| __TEXT.__text _copyOSReleaseString
|| __TEXT.__text _copyOSTypeString
|| __TEXT.__text _copyOSVersionString
|| __TEXT.__text _copyProductTypeString
|| __TEXT.__text _createMetadataFromProperties
|| __TEXT.__text _createObjectsFromDictionary
|| __TEXT.__text _createPropertiesFromMetaData
|| __TEXT.__text _create_timestamps
|| __TEXT.__text _enable_timestamps
|| __TEXT.__text _geohashToLatitudeLongitude
|| __TEXT.__text _getDesignatedRequirement
|| __TEXT.__text _getRTTFromFrame
|| __TEXT.__text _getServerConnection
|| __TEXT.__text _getSigningIdentifier
|| __TEXT.__text _getWaldoURLQueryParameters
|| __TEXT.__text _get_interval_for_mach_times
|| __TEXT.__text _get_nsarray_from_xpc_object
|| __TEXT.__text _get_nsdata_from_xpc_object
|| __TEXT.__text _get_nsdictionary_from_xpc_object
|| __TEXT.__text _hchacha
|| __TEXT.__text _latitudeLongitudeToGeohash
|| __TEXT.__text _logHTTPRequestData
|| __TEXT.__text _myIsEqual
|| __TEXT.__text _np_direct_protocol_get_id
|| __TEXT.__text _np_flow_output_finished
|| __TEXT.__text _np_loopback_protocol_get_id
|| __TEXT.__text _np_tunnel_protocol_get_id
|| __TEXT.__text _nplog_app_proxy_obj
|| __TEXT.__text _nplog_fw_obj
|| __TEXT.__text _nplog_server_obj
|| __TEXT.__text _nplog_uea_obj
|| __TEXT.__text _serviceNameToID
|| __TEXT.__text _tuscanyClientCreate
|| __TEXT.__text _tuscanyClientCreateFakeDayPass
|| __TEXT.__text _tuscanyClientDestroy
|| __TEXT.__text _tuscanyClientGetAmountToRead
|| __TEXT.__text _tuscanyClientGetDataSize
|| __TEXT.__text _tuscanyClientGetDayPassHostID
|| __TEXT.__text _tuscanyClientGetDayPassOriginAddressString
|| __TEXT.__text _tuscanyClientGetDayPassPortID
|| __TEXT.__text _tuscanyClientGetDayPassSessionCount
|| __TEXT.__text _tuscanyClientGetExceptionCounts
|| __TEXT.__text _tuscanyClientGetHeaderSize
|| __TEXT.__text _tuscanyClientGetInitialData
|| __TEXT.__text _tuscanyClientGetInitialWindowSize
|| __TEXT.__text _tuscanyClientGetMaxDataSendSize
|| __TEXT.__text _tuscanyClientGetMaximumFrameSize
|| __TEXT.__text _tuscanyClientGetNameForException
|| __TEXT.__text _tuscanyClientHandleConnectionConnected
|| __TEXT.__text _tuscanyClientHandleReadData
|| __TEXT.__text _tuscanyClientSendAcknowledge
|| __TEXT.__text _tuscanyClientSendClose
|| __TEXT.__text _tuscanyClientSendData
|| __TEXT.__text _tuscanyClientSendException
|| __TEXT.__text _tuscanyClientSendPing
|| __TEXT.__text _tuscanyClientSetDayPassSessionCount
|| __TEXT.__text _tuscanyClientValidateDayPass
|| __TEXT.__text _tuscanyLoopbackClientCreate
|| __TEXT.__text _tuscanyWindowAddCredits
|| __TEXT.__text _tuscanyWindowCreate
|| __TEXT.__text _tuscanyWindowDestroy
|| __TEXT.__text _tuscanyWindowGetAmountToAck
|| __TEXT.__text _tuscanyWindowGetCredits
__ CFNetwork: _CFHTTPMessageCopySerializedMessage
__ CFNetwork: _CFHTTPMessageSetHeaderFieldValue
__ CFNetwork: _CFURLRequestCopyHTTPRequest
__ CFNetwork: __kCFStreamPropertyTCPConnectionMetadata
__ CFNetwork: _kCFStreamPropertySSLSettings
__ CFNetwork: _kCFStreamSSLPeerName
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyLocalizationForLocalizationInfo
__ CoreFoundation: _CFBundleGetLocalizationInfoForLocalization
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSInputStream
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFPreferencesCurrentApplication
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreTelephony: _OBJC_CLASS_$_CTTelephonyNetworkInfo
__ CoreUtils: _SipHash
__ CoreUtils: _chacha20_all_64x64
__ CoreUtils: _chacha20_final
__ CoreUtils: _chacha20_init_64x64
__ CoreUtils: _chacha20_update
__ CoreUtils: _poly1305
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSSelectorFromString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHTTPURLResponse
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLCredential
__ Foundation: _OBJC_CLASS_$_NSURLRequest
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Network: _OBJC_CLASS_$_NWAddressEndpoint
__ Network: _OBJC_CLASS_$_NWBonjourServiceEndpoint
__ Network: _OBJC_CLASS_$_NWEndpoint
__ Network: _OBJC_CLASS_$_NWHostEndpoint
__ Network: _OBJC_CLASS_$_NWNetworkAgentRegistration
__ Network: _OBJC_CLASS_$_NWParameters
__ Network: _OBJC_CLASS_$_NWPathEvaluator
__ Network: _OBJC_CLASS_$_NWResolver
__ Network: _OBJC_CLASS_$_NWTCPConnection
__ Network: _OBJC_CLASS_$_NWUDPSession
__ Network: _OBJC_METACLASS_$_NWEndpoint
__ Network: _OBJC_METACLASS_$_NWResolver
__ NetworkExtension: _OBJC_CLASS_$_NEAppProxyProvider
__ NetworkExtension: _OBJC_CLASS_$_NEAppProxyProviderContainer
__ NetworkExtension: _OBJC_CLASS_$_NEAppProxyTCPFlow
__ NetworkExtension: _OBJC_CLASS_$_NEAppProxyUDPFlow
__ NetworkExtension: _OBJC_CLASS_$_NEAppRule
__ NetworkExtension: _OBJC_CLASS_$_NEFileHandleMaintainer
__ NetworkExtension: _OBJC_CLASS_$_NEFlowDivertFileHandle
__ NetworkExtension: _OBJC_CLASS_$_NEHasher
__ NetworkExtension: _OBJC_CLASS_$_NENetworkAgentRegistrationFileHandle
__ NetworkExtension: _OBJC_CLASS_$_NEPolicy
__ NetworkExtension: _OBJC_CLASS_$_NEPolicyCondition
__ NetworkExtension: _OBJC_CLASS_$_NEPolicyResult
__ NetworkExtension: _OBJC_CLASS_$_NEPolicySession
__ NetworkExtension: _OBJC_CLASS_$_NEVPNApp
__ NetworkExtension: _OBJC_METACLASS_$_NEAppProxyProvider
__ NetworkExtension: _OBJC_METACLASS_$_NEAppProxyProviderContainer
__ NetworkExtension: _OBJC_METACLASS_$_NEAppRule
__ Security: _SecItemAdd
__ Security: _SecItemCopyMatching
__ Security: _SecItemDelete
__ Security: _SecItemUpdate
__ Security: _SecPolicyCreateAppleSSLPinned
__ Security: _SecPolicyCreateRevocation
__ Security: _SecPolicyCreateSSL
__ Security: _SecRandomCopyBytes
__ Security: _SecTaskCopySigningIdentifier
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTrustCopyResult
__ Security: _SecTrustEvaluateAsync
__ Security: _SecTrustSetPolicies
__ Security: _kSecAttrAccessible
__ Security: _kSecAttrAccessibleAlwaysThisDeviceOnly
__ Security: _kSecAttrAccount
__ Security: _kSecAttrService
__ Security: _kSecClass
__ Security: _kSecClassGenericPassword
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitAll
__ Security: _kSecMatchLimitOne
__ Security: _kSecRandomDefault
__ Security: _kSecReturnAttributes
__ Security: _kSecReturnData
__ Security: _kSecTrustExtendedValidation
__ Security: _kSecValueData
__ SymptomDiagnosticReporter: _OBJC_CLASS_$_SDRDiagnosticReporter
__ SymptomDiagnosticReporter: _kSymptomDiagnosticActionProbeDuration
__ SymptomDiagnosticReporter: _kSymptomDiagnosticActionProbePacketCapture
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignatureSubTypeContext
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _NEHelperCacheCopyAppUUIDMapping
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: __xpc_type_data
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_uuid
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _bind
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _connect
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_data_apply
__ libSystem.B.dylib: _dispatch_data_create
__ libSystem.B.dylib: _dispatch_data_create_concat
__ libSystem.B.dylib: _dispatch_data_create_map
__ libSystem.B.dylib: _dispatch_data_create_subrange
__ libSystem.B.dylib: _dispatch_data_get_size
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dup
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _getnameinfo
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getsockopt
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _if_indextoname
__ libSystem.B.dylib: _inet_ntop
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _kevent
__ libSystem.B.dylib: _listen
__ libSystem.B.dylib: _localtime_r
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _nwi_ifstate_get_flags
__ libSystem.B.dylib: _nwi_ifstate_get_signature
__ libSystem.B.dylib: _nwi_state_copy
__ libSystem.B.dylib: _nwi_state_get_ifstate
__ libSystem.B.dylib: _nwi_state_release
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_diagnostics
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _printf
__ libSystem.B.dylib: _proc_name
__ libSystem.B.dylib: _proc_pidinfo
__ libSystem.B.dylib: _proc_pidpath
__ libSystem.B.dylib: _puts
__ libSystem.B.dylib: _recv
__ libSystem.B.dylib: _send
__ libSystem.B.dylib: _sendto
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _shutdown
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: _sprintf
__ libSystem.B.dylib: _strcat
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _uuid_clear
__ libSystem.B.dylib: _uuid_copy
__ libSystem.B.dylib: _uuid_is_null
__ libSystem.B.dylib: _vsnprintf
__ libSystem.B.dylib: _xpc_array_apply
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_get_bytes_ptr
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_data
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_double
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_uuid_get_bytes
__ libSystem.B.dylib: dyld_stub_binder
__ libboringssl.dylib: _nw_protocol_boringssl_identifier
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv121__vmi_class_type_infoE
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___cxa_pure_virtual
__ libc++.1.dylib: ___gxx_personality_v0
__ libnetwork.dylib: __nw_connection_send_idempotent_content
__ libnetwork.dylib: __nw_connection_write_idempotent
__ libnetwork.dylib: __nw_content_context_default_stream
__ libnetwork.dylib: _freemptcpinfo
__ libnetwork.dylib: _nw_array_append
__ libnetwork.dylib: _nw_array_create
__ libnetwork.dylib: _nw_array_get_count
__ libnetwork.dylib: _nw_connection_cancel
__ libnetwork.dylib: _nw_connection_copy_metadata
__ libnetwork.dylib: _nw_connection_create
__ libnetwork.dylib: _nw_connection_read_multiple
__ libnetwork.dylib: _nw_connection_receive
__ libnetwork.dylib: _nw_connection_send
__ libnetwork.dylib: _nw_connection_set_cancel_handler
__ libnetwork.dylib: _nw_connection_set_event_handler
__ libnetwork.dylib: _nw_connection_set_queue
__ libnetwork.dylib: _nw_connection_set_read_close_handler
__ libnetwork.dylib: _nw_connection_set_write_close_handler
__ libnetwork.dylib: _nw_connection_start
__ libnetwork.dylib: _nw_connection_write_multiple
__ libnetwork.dylib: _nw_endpoint_copy_address_string
__ libnetwork.dylib: _nw_endpoint_copy_parent_endpoint
__ libnetwork.dylib: _nw_endpoint_copy_port_string
__ libnetwork.dylib: _nw_endpoint_create_host
__ libnetwork.dylib: _nw_endpoint_get_address
__ libnetwork.dylib: _nw_endpoint_get_description
__ libnetwork.dylib: _nw_endpoint_get_hostname
__ libnetwork.dylib: _nw_endpoint_get_type
__ libnetwork.dylib: _nw_error_copy_cf_error
__ libnetwork.dylib: _nw_error_get_error_code
__ libnetwork.dylib: _nw_error_get_error_domain
__ libnetwork.dylib: _nw_frame_array_append
__ libnetwork.dylib: _nw_frame_array_first
__ libnetwork.dylib: _nw_frame_array_foreach
__ libnetwork.dylib: _nw_frame_array_init
__ libnetwork.dylib: _nw_frame_array_is_empty
__ libnetwork.dylib: _nw_frame_array_next
__ libnetwork.dylib: _nw_frame_array_remove
__ libnetwork.dylib: _nw_frame_claim
__ libnetwork.dylib: _nw_frame_collapse
__ libnetwork.dylib: _nw_frame_create
__ libnetwork.dylib: _nw_frame_finalize
__ libnetwork.dylib: _nw_frame_get_buffer
__ libnetwork.dylib: _nw_frame_reset
__ libnetwork.dylib: _nw_frame_set_external_data
__ libnetwork.dylib: _nw_frame_unclaim
__ libnetwork.dylib: _nw_frame_unclaimed_bytes
__ libnetwork.dylib: _nw_frame_unclaimed_length
__ libnetwork.dylib: _nw_frame_uses_external_data
__ libnetwork.dylib: _nw_interface_create_with_index
__ libnetwork.dylib: _nw_interface_get_index
__ libnetwork.dylib: _nw_interface_get_name
__ libnetwork.dylib: _nw_interface_get_type
__ libnetwork.dylib: _nw_nat64_copy_prefixes
__ libnetwork.dylib: _nw_nat64_extract_v4
__ libnetwork.dylib: _nw_parameters_copy_context
__ libnetwork.dylib: _nw_parameters_copy_metadata
__ libnetwork.dylib: _nw_parameters_create
__ libnetwork.dylib: _nw_parameters_create_protocol_parameters
__ libnetwork.dylib: _nw_parameters_get_account_id
__ libnetwork.dylib: _nw_parameters_get_data_mode
__ libnetwork.dylib: _nw_parameters_get_effective_bundle_id
__ libnetwork.dylib: _nw_parameters_get_multipath
__ libnetwork.dylib: _nw_parameters_get_multipath_service
__ libnetwork.dylib: _nw_parameters_get_no_delay
__ libnetwork.dylib: _nw_parameters_get_tfo
__ libnetwork.dylib: _nw_parameters_get_tfo_no_cookie
__ libnetwork.dylib: _nw_parameters_get_tls
__ libnetwork.dylib: _nw_parameters_has_initial_data_payload
__ libnetwork.dylib: _nw_parameters_set_account_id
__ libnetwork.dylib: _nw_parameters_set_data_mode
__ libnetwork.dylib: _nw_parameters_set_effective_bundle_id
__ libnetwork.dylib: _nw_parameters_set_indefinite
__ libnetwork.dylib: _nw_parameters_set_metadata
__ libnetwork.dylib: _nw_parameters_set_no_delay
__ libnetwork.dylib: _nw_parameters_set_tfo
__ libnetwork.dylib: _nw_parameters_set_transform_array
__ libnetwork.dylib: _nw_path_copy_interface
__ libnetwork.dylib: _nw_path_get_mtu
__ libnetwork.dylib: _nw_path_has_ipv4
__ libnetwork.dylib: _nw_path_has_ipv6
__ libnetwork.dylib: _nw_protocol_register_extended
__ libnetwork.dylib: _nw_protocol_register_many_to_one
__ libnetwork.dylib: _nw_protocol_register_parameter_modifier
__ libnetwork.dylib: _nw_protocol_remove_instance
__ libnetwork.dylib: _nw_protocol_set_default_one_to_one_callbacks
__ libnetwork.dylib: _nw_protocol_transform_append_protocol
__ libnetwork.dylib: _nw_protocol_transform_create
__ libnetwork.dylib: _nw_protocol_transform_disable_protocol
__ libnetwork.dylib: _nw_protocol_transform_replace_endpoint
__ libnetwork.dylib: _nw_protocol_transform_set_fallback_mode
__ libnetwork.dylib: _nw_protocol_transform_set_multipath_service
__ libnetwork.dylib: _nw_protocol_transform_set_no_path_fallback
__ libnetwork.dylib: _nw_protocol_transform_set_no_proxy
__ libnetwork.dylib: _nw_protocol_transform_set_prohibit_direct
__ libnetwork.dylib: _nw_protocol_transform_set_tfo
__ libnetwork.dylib: _nw_protocol_transform_set_tfo_no_cookie
__ libnetwork.dylib: _nw_protocols_are_equal
__ libnetwork.dylib: _nw_queue_cancel_source
__ libnetwork.dylib: _nw_queue_context_async
__ libnetwork.dylib: _nw_queue_context_create_source
__ libnetwork.dylib: _nw_queue_resume_source
__ libnetwork.dylib: _nw_queue_set_timer_values
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
EdgeSelection : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSMutableDictionary *edgeAttributesDict
 @property  NSData *networkSignature
 @property  NSNumber *interfaceType
 @property  long long trialCount
 @property  double alpha
 @property  long long windowSize

  // class methods
  +[EdgeSelection supportsSecureCoding]

  // instance methods
  -[EdgeSelection interfaceType]
  -[EdgeSelection windowSize]
  -[EdgeSelection .cxx_destruct]
  -[EdgeSelection alpha]
  -[EdgeSelection encodeWithCoder:]
  -[EdgeSelection setWindowSize:]
  -[EdgeSelection setAlpha:]
  -[EdgeSelection setInterfaceType:]
  -[EdgeSelection initWithCoder:]
  -[EdgeSelection trialCount]
  -[EdgeSelection networkSignature]
  -[EdgeSelection edgeAttributesDict]
  -[EdgeSelection _stochasticRewardFromRTT:]
  -[EdgeSelection setTrialCount:]
  -[EdgeSelection initWithNetworkSignature:interfaceType:modelParams:]
  -[EdgeSelection trainEdgeSelectionModel:reply:]
  -[EdgeSelection getMinimumLatencyEdge:]
  -[EdgeSelection getAttributesForEdge:reply:]
  -[EdgeSelection setNetworkSignature:]
  -[EdgeSelection setEdgeAttributesDict:]


NPUsageReport : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *signingIdentifier
 @property  long long fallbackReason
 @property  NSUUID *dayPassUUID
 @property  unsigned long rtt
 @property  NSString *geohash
 @property  unsigned char addressFamily
 @property  unsigned int edgeIndex
 @property  unsigned int keybagGeneration
 @property  unsigned int waldoTimestamp

  // class methods
  +[NPUsageReport supportsSecureCoding]

  // instance methods
  -[NPUsageReport addressFamily]
  -[NPUsageReport signingIdentifier]
  -[NPUsageReport setAddressFamily:]
  -[NPUsageReport dayPassUUID]
  -[NPUsageReport .cxx_destruct]
  -[NPUsageReport setEdgeIndex:]
  -[NPUsageReport encodeWithCoder:]
  -[NPUsageReport rtt]
  -[NPUsageReport edgeIndex]
  -[NPUsageReport setDayPassUUID:]
  -[NPUsageReport setRtt:]
  -[NPUsageReport geohash]
  -[NPUsageReport initWithCoder:]
  -[NPUsageReport fallbackReason]
  -[NPUsageReport initWithSigningIdentifier:fallbackReason:]
  -[NPUsageReport setGeohash:]
  -[NPUsageReport keybagGeneration]
  -[NPUsageReport setKeybagGeneration:]
  -[NPUsageReport waldoTimestamp]
  -[NPUsageReport setWaldoTimestamp:]


NPTunnelFlowUDP : NPTunnelFlowProtocol
 @property  NSMutableArray *savedDirectData
 @property  unsigned long savedDataSize
 @property  NWUDPSession *directSession
 @property  NSDate *firstPacketDate
 @property  NWEndpoint *remoteEndpoint

  // instance methods
  -[NPTunnelFlowUDP .cxx_destruct]
  -[NPTunnelFlowUDP remoteEndpoint]
  -[NPTunnelFlowUDP observeValueForKeyPath:ofObject:change:context:]
  -[NPTunnelFlowUDP initWithTunnel:appRule:inputProtocol:extraProperties:]
  -[NPTunnelFlowUDP setFirstPacketDate:]
  -[NPTunnelFlowUDP handleAppData:]
  -[NPTunnelFlowUDP sendDataOnDirectSession:]
  -[NPTunnelFlowUDP setDirectSession:]
  -[NPTunnelFlowUDP directSession]
  -[NPTunnelFlowUDP setSavedDirectData:]
  -[NPTunnelFlowUDP handleIncomingData:andError:]
  -[NPTunnelFlowUDP savedDirectData]
  -[NPTunnelFlowUDP savedDataSize]
  -[NPTunnelFlowUDP setSavedDataSize:]
  -[NPTunnelFlowUDP startHandlingIncomingData]
  -[NPTunnelFlowUDP startDirectConnection]
  -[NPTunnelFlowUDP stopDirectConnection]
  -[NPTunnelFlowUDP firstPacketDate]


NPTuscanyLoopbackConnection : NSObject /usr/lib/libc++.1.dylib
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} protocol
 @property  unsigned long currentBlobSizeIndex
 @property  BOOL waitingForOutput

  // instance methods
  -[NPTuscanyLoopbackConnection protocol]
  -[NPTuscanyLoopbackConnection init]
  -[NPTuscanyLoopbackConnection currentBlobSizeIndex]
  -[NPTuscanyLoopbackConnection setCurrentBlobSizeIndex:]
  -[NPTuscanyLoopbackConnection handleDetachedFromProtocol]
  -[NPTuscanyLoopbackConnection handleOutputFrame:]
  -[NPTuscanyLoopbackConnection notifyInputHandler]
  -[NPTuscanyLoopbackConnection addOutputFramesToArray:maximumBytes:minimumBytes:maximumFrameCount:]
  -[NPTuscanyLoopbackConnection addInputFramesToArray:maximumBytes:minimumBytes:maximumFrameCount:]
  -[NPTuscanyLoopbackConnection dealloc]
  -[NPTuscanyLoopbackConnection waitingForOutput]
  -[NPTuscanyLoopbackConnection setWaitingForOutput:]


NPTunnelTuscanyLoopback : NPTunnelTuscany
 @property  ^v window
 @property  NPTunnelFlow *flow

  // instance methods
  -[NPTunnelTuscanyLoopback flow]
  -[NPTunnelTuscanyLoopback window]
  -[NPTunnelTuscanyLoopback maxFrameSize]
  -[NPTunnelTuscanyLoopback dealloc]
  -[NPTunnelTuscanyLoopback setWindow:]
  -[NPTunnelTuscanyLoopback .cxx_destruct]
  -[NPTunnelTuscanyLoopback removeFlow:]
  -[NPTunnelTuscanyLoopback write:]
  -[NPTunnelTuscanyLoopback setFlow:]
  -[NPTunnelTuscanyLoopback dayPassSessionCounter]
  -[NPTunnelTuscanyLoopback initialWindowSize]
  -[NPTunnelTuscanyLoopback cancelConnection]
  -[NPTunnelTuscanyLoopback initWithEndpoint:parameters:appRule:flowProperties:onRamp:delegate:]
  -[NPTunnelTuscanyLoopback addNewFlow:]
  -[NPTunnelTuscanyLoopback createTuscanyClient]
  -[NPTunnelTuscanyLoopback currentMTU]
  -[NPTunnelTuscanyLoopback selectBestEdge]
  -[NPTunnelTuscanyLoopback startConnectionTimer]
  -[NPTunnelTuscanyLoopback cancelConnectionTimer]
  -[NPTunnelTuscanyLoopback sendUsageReportWithRTT:geohash:fallbackReason:]
  -[NPTunnelTuscanyLoopback pingWithCompletionHandler:]


NPTunnelFlowDNS : NPTunnelFlowUDP
 @property  NSPDNSPacket *query
 @property  long long tunnelResult
 @property  NSPDNSPacket *tunnelDNSResponse
 @property  long long directResult
 @property  NSPDNSPacket *directDNSResponse
 @property  ^v tunnelResponseTimer
 @property  BOOL telemetryReported

  // instance methods
  -[NPTunnelFlowDNS setQuery:]
  -[NPTunnelFlowDNS .cxx_destruct]
  -[NPTunnelFlowDNS query]
  -[NPTunnelFlowDNS handleAppData:]
  -[NPTunnelFlowDNS sendDataToClient:fromTunnel:]
  -[NPTunnelFlowDNS closeFromDirectConnectionWithError:]
  -[NPTunnelFlowDNS shouldSendDataToClient:fromTunnel:]
  -[NPTunnelFlowDNS tunnelResult]
  -[NPTunnelFlowDNS setTunnelDNSResponse:]
  -[NPTunnelFlowDNS tunnelDNSResponse]
  -[NPTunnelFlowDNS setTunnelResult:]
  -[NPTunnelFlowDNS tunnelResponseTimer]
  -[NPTunnelFlowDNS setTunnelResponseTimer:]
  -[NPTunnelFlowDNS directResult]
  -[NPTunnelFlowDNS setDirectDNSResponse:]
  -[NPTunnelFlowDNS directDNSResponse]
  -[NPTunnelFlowDNS setDirectResult:]
  -[NPTunnelFlowDNS checkAndReportTelemetry]
  -[NPTunnelFlowDNS closeFromTunnel]
  -[NPTunnelFlowDNS telemetryReported]
  -[NPTunnelFlowDNS setTelemetryReported:]
  -[NPTunnelFlowDNS addDNSInfoToTelemetry:]
  -[NPTunnelFlowDNS resultToString:]
  -[NPTunnelFlowDNS createStateDictionaryWithResult:response:]
  -[NPTunnelFlowDNS handleTunnelConnected]
  -[NPTunnelFlowDNS cleanupLosingConnection:]


NPEdgeSelection : EdgeSelection
 @property  NSString *bestEdge
 @property  unsigned long bestEdgeRTT
 @property  unsigned long bestEdgeProbedRTT
 @property  NSString *nextBestEdge
 @property  unsigned long nextBestEdgeRTT
 @property  NSDate *probeDate
 @property  NPWaldo *waldoInfo

  // class methods
  +[NPEdgeSelection supportsSecureCoding]

  // instance methods
  -[NPEdgeSelection .cxx_destruct]
  -[NPEdgeSelection encodeWithCoder:]
  -[NPEdgeSelection copyEdgeSelectionTelemetry]
  -[NPEdgeSelection updateEdgeSelection:]
  -[NPEdgeSelection initWithCoder:]
  -[NPEdgeSelection bestEdge]
  -[NPEdgeSelection bestEdgeRTT]
  -[NPEdgeSelection bestEdgeProbedRTT]
  -[NPEdgeSelection nextBestEdge]
  -[NPEdgeSelection nextBestEdgeRTT]
  -[NPEdgeSelection trainEdgeSelection:edgeRank:rtt:]
  -[NPEdgeSelection setNextBestEdge:]
  -[NPEdgeSelection setNextBestEdgeRTT:]
  -[NPEdgeSelection waldoInfo]
  -[NPEdgeSelection getBestEdgeFromEdgeSelection]
  -[NPEdgeSelection shouldProbeForEdgeSelection:edgeRank:edgeIndex:bestEdgeLabel:]
  -[NPEdgeSelection setBestEdge:]
  -[NPEdgeSelection setBestEdgeRTT:]
  -[NPEdgeSelection setBestEdgeProbedRTT:]
  -[NPEdgeSelection probeDate]
  -[NPEdgeSelection setProbeDate:]
  -[NPEdgeSelection initWithWaldo:signature:interfaceType:]
  -[NPEdgeSelection setWaldoInfo:]


NPResolver : NWResolver /System/Library/Frameworks/Foundation.framework/Foundation
 @property  @? resolveCompletionHandler
 @property  NSObject<OS_dispatch_source> *resolveTimer

  // instance methods
  -[NPResolver .cxx_destruct]
  -[NPResolver resolveWithCompletionHandler:]
  -[NPResolver observeValueForKeyPath:ofObject:change:context:]
  -[NPResolver setResolveTimer:]
  -[NPResolver resolveTimer]
  -[NPResolver resolveCompletionHandler]
  -[NPResolver setResolveCompletionHandler:]


NPDirectFlow : NSObject /usr/lib/libc++.1.dylib
 @property  NSNumber *identifier
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} protocol
 @property  NSPConnectionInfo *connectionInfo
 @property  NSDate *startDate
 @property  NSDate *connectionStartDate
 @property  NSDate *firstTxByteTimestamp

  // class methods
  +[NPDirectFlow initializeProtocol]

  // instance methods
  -[NPDirectFlow protocol]
  -[NPDirectFlow connectionInfo]
  -[NPDirectFlow startDate]
  -[NPDirectFlow handleDetachedFromProtocol]
  -[NPDirectFlow .cxx_destruct]
  -[NPDirectFlow identifier]
  -[NPDirectFlow setConnectionInfo:]
  -[NPDirectFlow initWithParameters:]
  -[NPDirectFlow firstTxByteTimestamp]
  -[NPDirectFlow connectionStartDate]
  -[NPDirectFlow createConnectionInfo]
  -[NPDirectFlow setConnectionStartDate:]
  -[NPDirectFlow setFirstTxByteTimestamp:]


NPTunnelTuscanyEndpoint : NWEndpoint /System/Library/Frameworks/Foundation.framework/Foundation
 @property  NSData *hostsData
 @property  NSArray *hosts

  // class methods
  +[NPTunnelTuscanyEndpoint endpointType]
  +[NPTunnelTuscanyEndpoint supportsSecureCoding]
  +[NPTunnelTuscanyEndpoint encodeHosts:]
  +[NPTunnelTuscanyEndpoint supportsResolverCallback]

  // instance methods
  -[NPTunnelTuscanyEndpoint hosts]
  -[NPTunnelTuscanyEndpoint initWithEncodedData:]
  -[NPTunnelTuscanyEndpoint .cxx_destruct]
  -[NPTunnelTuscanyEndpoint resolveEndpointWithCompletionHandler:]
  -[NPTunnelTuscanyEndpoint copyHostsWithPort:]
  -[NPTunnelTuscanyEndpoint encodedData]
  -[NPTunnelTuscanyEndpoint hostsData]
  -[NPTunnelTuscanyEndpoint encodeWithCoder:]
  -[NPTunnelTuscanyEndpoint initWithHosts:]
  -[NPTunnelTuscanyEndpoint initWithCoder:]


NPUtilities : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[NPUtilities hexDumpBytes:length:]
  +[NPUtilities interfaceTypeOfInterface:]
  +[NPUtilities interfaceTypeOfNWInterface:]
  +[NPUtilities getHashForObject:]
  +[NPUtilities parseXHost:]
  +[NPUtilities copyItemIdentifiersFromKeychainWithAccountName:]
  +[NPUtilities copyDataHexString:]
  +[NPUtilities removeDataFromKeychainWithIdentifier:]
  +[NPUtilities protocolTypeFromPath:endpoint:]
  +[NPUtilities endpointFromString:defaultPortString:]
  +[NPUtilities timestampIdentifierToName:]
  +[NPUtilities compareAddressEndpoints:endpoint2:addressOnly:]
  +[NPUtilities stripWhitespace:]
  +[NPUtilities getInterfaceName:]
  +[NPUtilities hasPacketDrop:]
  +[NPUtilities parseXTimeout:hardTTLInSeconds:]
  +[NPUtilities saveDataToKeychain:withIdentifier:accountName:]
  +[NPUtilities getInterfaceTypeString:]
  +[NPUtilities rollDiceWithSuccessRatio:]
  +[NPUtilities parseXRTT:]
  +[NPUtilities copyDataFromKeychainWithIdentifier:accountName:]
  +[NPUtilities copyNetworkDescription:]
  +[NPUtilities copyCurrentNetworkCharacteristicsForPath:]
  +[NPUtilities fillOutConnectionInfo:withPath:interface:remoteEndpoint:parameters:outputHandler:]
  +[NPUtilities printDictionaryAsJson:debugName:]
  +[NPUtilities connectionInfoToDict:dictionary:]


NSPServerClient : NSObject /usr/lib/libc++.1.dylib <NSPServerCommands>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_xpc_object> *connection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NSPServerClient .cxx_destruct]
  -[NSPServerClient fetchStateForClient:withPeerEndpoint:completionHandler:]
  -[NSPServerClient setConnection:]
  -[NSPServerClient queue]
  -[NSPServerClient connection]
  -[NSPServerClient getConnection]
  -[NSPServerClient initWithCallbackQueue:]
  -[NSPServerClient setCurrentLatitude:longitude:timestamp:forClient:]
  -[NSPServerClient setEdgeSet:forIdentifier:completionHandler:]
  -[NSPServerClient setAppRule:forLabel:completionHandler:]
  -[NSPServerClient fetchAppRuleForLabel:completionHandler:]
  -[NSPServerClient fetchCurrentConfigurationWithCompletionHandler:]
  -[NSPServerClient setCurrentConfiguration:withCompletionHandler:]
  -[NSPServerClient fetchEdgeSetForIdentifier:completionHandler:]
  -[NSPServerClient establishTrustWithEdgeSetForIdentifier:completionHandler:]
  -[NSPServerClient refreshWaldoNowWithCompletionHandler:]
  -[NSPServerClient reportUsage:fromClient:]
  -[NSPServerClient setTestLatencyMap:completionHandler:]


NPTunnelFlowHTTP : NPTunnelFlow
 @property  @? postCompletionHandler
 @property  BOOL receivedHeaders
 @property  NSNumber *responseContentLength
 @property  BOOL responseSuccess
 @property  NSMutableData *responseData
 @property  NSURL *url

  // instance methods
  -[NPTunnelFlowHTTP responseData]
  -[NPTunnelFlowHTTP url]
  -[NPTunnelFlowHTTP .cxx_destruct]
  -[NPTunnelFlowHTTP postCompletionHandler]
  -[NPTunnelFlowHTTP setPostCompletionHandler:]
  -[NPTunnelFlowHTTP setUrl:]
  -[NPTunnelFlowHTTP setResponseData:]
  -[NPTunnelFlowHTTP responseSuccess]
  -[NPTunnelFlowHTTP sendDataToClient:fromTunnel:]
  -[NPTunnelFlowHTTP receivedHeaders]
  -[NPTunnelFlowHTTP setResponseSuccess:]
  -[NPTunnelFlowHTTP setResponseContentLength:]
  -[NPTunnelFlowHTTP setReceivedHeaders:]
  -[NPTunnelFlowHTTP responseContentLength]
  -[NPTunnelFlowHTTP initWithTunnel:URL:extraFlowProperties:]
  -[NPTunnelFlowHTTP postData:withCompletionHandler:]
  -[NPTunnelFlowHTTP closeClientFlowWithError:]
  -[NPTunnelFlowHTTP isClientFlowClosed]


NSPDNSResourceRecord : NSObject /usr/lib/libc++.1.dylib
 @property  long long type
 @property  NSString *name
 @property  long long recordClass
 @property  unsigned long timeToLive
 @property  unsigned long dataLength
 @property  NSString *resourceString

  // class methods
  +[NSPDNSResourceRecord typeToString:]

  // instance methods
  -[NSPDNSResourceRecord .cxx_destruct]
  -[NSPDNSResourceRecord timeToLive]
  -[NSPDNSResourceRecord name]
  -[NSPDNSResourceRecord dataLength]
  -[NSPDNSResourceRecord type]
  -[NSPDNSResourceRecord initFromByteParser:]
  -[NSPDNSResourceRecord recordClass]
  -[NSPDNSResourceRecord resourceString]
  -[NSPDNSResourceRecord copyStateDictionary]


NSPDNSQuery : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *name
 @property  long long recordType
 @property  long long recordClass

  // instance methods
  -[NSPDNSQuery .cxx_destruct]
  -[NSPDNSQuery name]
  -[NSPDNSQuery recordType]
  -[NSPDNSQuery recordClass]
  -[NSPDNSQuery initWithName:recordType:recordClass:]
  -[NSPDNSQuery copyStateDictionary]


NSPDNSPacket : NSObject /usr/lib/libc++.1.dylib
 @property  NSData *data
 @property  long long identifier
 @property  NSDate *timestamp
 @property  long long messageType
 @property  long long opCode
 @property  BOOL isAuthoritativeAnswer
 @property  BOOL isTruncated
 @property  BOOL isRecursionDesired
 @property  BOOL isRecursionAvailable
 @property  long long responseCode
 @property  NSString *responseCodeString
 @property  NSArray *queries
 @property  NSArray *answers
 @property  NSArray *authorities
 @property  NSArray *additionalRecords

  // instance methods
  -[NSPDNSPacket messageType]
  -[NSPDNSPacket answers]
  -[NSPDNSPacket isTruncated]
  -[NSPDNSPacket opCode]
  -[NSPDNSPacket .cxx_destruct]
  -[NSPDNSPacket timestamp]
  -[NSPDNSPacket identifier]
  -[NSPDNSPacket data]
  -[NSPDNSPacket responseCode]
  -[NSPDNSPacket queries]
  -[NSPDNSPacket initFromData:]
  -[NSPDNSPacket responseCodeString]
  -[NSPDNSPacket isAuthoritativeAnswer]
  -[NSPDNSPacket isRecursionDesired]
  -[NSPDNSPacket isRecursionAvailable]
  -[NSPDNSPacket authorities]
  -[NSPDNSPacket additionalRecords]


NPTunnelFlow : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_data> *savedData
 @property  ^v fallbackTimer
 @property  ^v telemetryTimer
 @property  double fallbackDelay
 @property  unsigned long hashKey
 @property  unsigned long identifier
 @property  NPTunnel *tunnel
 @property  long long state
 @property  NSPAppRule *appRule
 @property  NPFlowProperties *extraFlowProperties
 @property  long long fallbackReason
 @property  NSDate *firstTxByteTimestamp
 @property  NSDate *startDate
 @property  ^v window
 @property  unsigned long initialBytesLeftOver
 @property  BOOL isDirectConnectionViable
 @property  BOOL fallbackDisabled
 @property  BOOL enableDirectRace
 @property  BOOL isClientFlowClosed
 @property  BOOL isBestEffort
 @property  BOOL disconnectedByApp
 @property  BOOL shouldComposeIntialData

  // instance methods
  -[NPTunnelFlow window]
  -[NPTunnelFlow startDate]
  -[NPTunnelFlow dealloc]
  -[NPTunnelFlow .cxx_destruct]
  -[NPTunnelFlow closeWithError:]
  -[NPTunnelFlow setIdentifier:]
  -[NPTunnelFlow identifier]
  -[NPTunnelFlow tunnel]
  -[NPTunnelFlow appData]
  -[NPTunnelFlow enableDirectRace]
  -[NPTunnelFlow setFallbackDelay:]
  -[NPTunnelFlow setInitialBytesLeftOver:]
  -[NPTunnelFlow fallbackDelay]
  -[NPTunnelFlow initialBytesLeftOver]
  -[NPTunnelFlow appRule]
  -[NPTunnelFlow state]
  -[NPTunnelFlow hashKey]
  -[NPTunnelFlow setFallbackReason:]
  -[NPTunnelFlow fallbackReason]
  -[NPTunnelFlow reportMetrics]
  -[NPTunnelFlow setAppData:]
  -[NPTunnelFlow firstTxByteTimestamp]
  -[NPTunnelFlow handleAppData:]
  -[NPTunnelFlow isDirectConnectionViable]
  -[NPTunnelFlow setIsDirectConnectionViable:]
  -[NPTunnelFlow sendDataToClient:fromTunnel:]
  -[NPTunnelFlow closeFromDirectConnectionWithError:]
  -[NPTunnelFlow readDataFromClient]
  -[NPTunnelFlow fallbackDisabled]
  -[NPTunnelFlow setFallbackDisabled:]
  -[NPTunnelFlow startDirectConnection]
  -[NPTunnelFlow stopDirectConnection]
  -[NPTunnelFlow shouldSendDataToClient:fromTunnel:]
  -[NPTunnelFlow closeFromTunnel]
  -[NPTunnelFlow handleTunnelCanHandleMoreData]
  -[NPTunnelFlow reportTelemetry:withService:url:]
  -[NPTunnelFlow createTelemetryDataWithCompletionHandler:]
  -[NPTunnelFlow handleTunnelConnected]
  -[NPTunnelFlow cleanupLosingConnection:]
  -[NPTunnelFlow setFirstTxByteTimestamp:]
  -[NPTunnelFlow initWithTunnel:appRule:hashKey:extraFlowProperties:]
  -[NPTunnelFlow closeClientFlowWithError:]
  -[NPTunnelFlow isClientFlowClosed]
  -[NPTunnelFlow extraFlowProperties]
  -[NPTunnelFlow isBestEffort]
  -[NPTunnelFlow copyConnectionInfo]
  -[NPTunnelFlow processConnectionInfo:]
  -[NPTunnelFlow createFallbackConnectionInfoWithFallbackReason:]
  -[NPTunnelFlow disconnectedByApp]
  -[NPTunnelFlow combineStateInfo:andConnectionInfo:]
  -[NPTunnelFlow increaseWindowSize:]
  -[NPTunnelFlow handleTunnelDisconnected]
  -[NPTunnelFlow handleTunnelReadyForData]
  -[NPTunnelFlow setDisconnectedByApp:]
  -[NPTunnelFlow shouldComposeIntialData]
  -[NPTunnelFlow setShouldComposeIntialData:]
  -[NPTunnelFlow savedData]
  -[NPTunnelFlow setSavedData:]
  -[NPTunnelFlow fallbackTimer]
  -[NPTunnelFlow setFallbackTimer:]
  -[NPTunnelFlow telemetryTimer]
  -[NPTunnelFlow setTelemetryTimer:]


NPFlowProperties : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned int flags
 @property  unsigned long serviceID
 @property  unsigned int flowIdentifier
 @property  double fallbackTimeout
 @property  BOOL enableNSP
 @property  NSData *requestData
 @property  NPTunnelTuscanyEndpoint *replacementEndpoint
 @property  NSDictionary *replacementAddressMap
 @property  int dataMode
 @property  NWEndpoint *directEndpoint
 @property  BOOL isLoopback
 @property  ^Q timestamps
 @property  BOOL disableIdleTimeout

  // instance methods
  -[NPFlowProperties serviceID]
  -[NPFlowProperties setDisableIdleTimeout:]
  -[NPFlowProperties copyTLVData]
  -[NPFlowProperties setFallbackTimeout:]
  -[NPFlowProperties timestamps]
  -[NPFlowProperties disableIdleTimeout]
  -[NPFlowProperties setFlags:]
  -[NPFlowProperties dealloc]
  -[NPFlowProperties .cxx_destruct]
  -[NPFlowProperties setRequestData:]
  -[NPFlowProperties setTimestamps:]
  -[NPFlowProperties dataMode]
  -[NPFlowProperties setDataMode:]
  -[NPFlowProperties requestData]
  -[NPFlowProperties setFlowIdentifier:]
  -[NPFlowProperties flags]
  -[NPFlowProperties setServiceID:]
  -[NPFlowProperties replacementEndpoint]
  -[NPFlowProperties setReplacementEndpoint:]
  -[NPFlowProperties fallbackTimeout]
  -[NPFlowProperties flowIdentifier]
  -[NPFlowProperties initWithTLVData:]
  -[NPFlowProperties isLoopback]
  -[NPFlowProperties setEnableNSP:]
  -[NPFlowProperties setReplacementAddressMap:]
  -[NPFlowProperties directEndpoint]
  -[NPFlowProperties replacementAddressMap]
  -[NPFlowProperties enableNSP]
  -[NPFlowProperties setIsLoopback:]
  -[NPFlowProperties setDirectEndpoint:]


NSPNetworkAgent : NSObject /usr/lib/libc++.1.dylib <NWNetworkAgent>
 @property  NSData *agentData
 @property  NSPConfiguration *configuration
 @property  NSPAppRule *appRule
 @property  NSData *keybag
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[NSPNetworkAgent agentFromData:]
  +[NSPNetworkAgent agentDomain]
  +[NSPNetworkAgent agentType]

  // instance methods
  -[NSPNetworkAgent copyAgentData]
  -[NSPNetworkAgent setKernelActivated:]
  -[NSPNetworkAgent init]
  -[NSPNetworkAgent agentData]
  -[NSPNetworkAgent .cxx_destruct]
  -[NSPNetworkAgent isUserActivated]
  -[NSPNetworkAgent isKernelActivated]
  -[NSPNetworkAgent agentUUID]
  -[NSPNetworkAgent setAgentDescription:]
  -[NSPNetworkAgent setActive:]
  -[NSPNetworkAgent isActive]
  -[NSPNetworkAgent setUserActivated:]
  -[NSPNetworkAgent setAgentData:]
  -[NSPNetworkAgent setAgentUUID:]
  -[NSPNetworkAgent setKeybag:]
  -[NSPNetworkAgent configuration]
  -[NSPNetworkAgent isEqual:]
  -[NSPNetworkAgent setAppRule:]
  -[NSPNetworkAgent appRule]
  -[NSPNetworkAgent setVoluntary:]
  -[NSPNetworkAgent keybag]
  -[NSPNetworkAgent parseAgentData]
  -[NSPNetworkAgent isVoluntary]
  -[NSPNetworkAgent setConfiguration:]
  -[NSPNetworkAgent agentDescription]


NSPKeyNetworkAgent : NSPNetworkAgent
  // class methods
  +[NSPKeyNetworkAgent agentType]


NPDiagnosticReport : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[NPDiagnosticReport logInternalError:context:]
  +[NPDiagnosticReport logNSPDiagnosticReport:event:context:]


NPAverage : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSMutableArray *samples
 @property  unsigned long size
 @property  unsigned long average
 @property  BOOL isLastValid
 @property  BOOL isAnyValid

  // class methods
  +[NPAverage supportsSecureCoding]

  // instance methods
  -[NPAverage average]
  -[NPAverage copyWithZone:]
  -[NPAverage setSamples:]
  -[NPAverage addSamples:]
  -[NPAverage addSample:]
  -[NPAverage size]
  -[NPAverage .cxx_destruct]
  -[NPAverage encodeWithCoder:]
  -[NPAverage isLastValid]
  -[NPAverage shortDescription]
  -[NPAverage setSize:]
  -[NPAverage samples]
  -[NPAverage initWithSampleSize:]
  -[NPAverage isAnyValid]
  -[NPAverage initWithCoder:]


NPEdgeLatency : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  long long reprobeCount
 @property  NSObject<OS_dispatch_source> *probeTimer
 @property  NWTCPConnection *probeConnection
 @property  @? probeCompletionHandler
 @property  NSNumber *currentTimeout
 @property  BOOL needReprobe
 @property  BOOL isObserving
 @property  unsigned long edgeIndex
 @property  NWEndpoint *probeEndpoint
 @property  unsigned long roundTripTime
 @property  NPAverage *roundTripAverage
 @property  NPAverage *roundTripAverageObserved
 @property  NSNumber *addressFamily
 @property  long long interfaceType
 @property  BOOL probeTFO
 @property  BOOL probeNoTFOCookie
 @property  long long TFOStatus
 @property  NSString *addressFamilyString
 @property  NSString *TFOStatusString
 @property  NSString *connectionParametersString
 @property  BOOL isTFOEnabled
 @property  long long probeCount
 @property  NSDate *creationDate
 @property  BOOL passedReprobeThreshold

  // class methods
  +[NPEdgeLatency supportsSecureCoding]

  // instance methods
  -[NPEdgeLatency fillTestLatency]
  -[NPEdgeLatency copyWithZone:]
  -[NPEdgeLatency addressFamily]
  -[NPEdgeLatency isMatched:]
  -[NPEdgeLatency setAddressFamily:]
  -[NPEdgeLatency addRoundTripSampleObserved:]
  -[NPEdgeLatency measureLatencyWithTimeout:completionHandler:]
  -[NPEdgeLatency roundTripAverageObserved]
  -[NPEdgeLatency setProbeCompletionHandler:]
  -[NPEdgeLatency isComplete:]
  -[NPEdgeLatency setTFOStatus:]
  -[NPEdgeLatency interfaceType]
  -[NPEdgeLatency addressFamilyString]
  -[NPEdgeLatency setProbeTFO:]
  -[NPEdgeLatency setReprobeCount:]
  -[NPEdgeLatency creationDate]
  -[NPEdgeLatency setIsObserving:]
  -[NPEdgeLatency setRoundTripTime:]
  -[NPEdgeLatency probeCount]
  -[NPEdgeLatency connectionParametersString]
  -[NPEdgeLatency .cxx_destruct]
  -[NPEdgeLatency setEdgeIndex:]
  -[NPEdgeLatency initWithProbeEndpoint:probeTFO:]
  -[NPEdgeLatency needReprobe]
  -[NPEdgeLatency passedReprobeThreshold]
  -[NPEdgeLatency encodeWithCoder:]
  -[NPEdgeLatency currentTimeout]
  -[NPEdgeLatency setProbeConnection:]
  -[NPEdgeLatency reprobeCount]
  -[NPEdgeLatency probeTFO]
  -[NPEdgeLatency probeCompletionHandler]
  -[NPEdgeLatency setRoundTripAverageObserved:]
  -[NPEdgeLatency isObserving]
  -[NPEdgeLatency getRoundTripSample:]
  -[NPEdgeLatency roundTripTime]
  -[NPEdgeLatency probeTimer]
  -[NPEdgeLatency isMatched:parameters:]
  -[NPEdgeLatency observeValueForKeyPath:ofObject:change:context:]
  -[NPEdgeLatency setProbeCount:]
  -[NPEdgeLatency isTFOEnabled]
  -[NPEdgeLatency setRoundTripAverage:]
  -[NPEdgeLatency setProbeTimer:]
  -[NPEdgeLatency TFOStatus]
  -[NPEdgeLatency edgeIndex]
  -[NPEdgeLatency pingPong]
  -[NPEdgeLatency probeEndpoint]
  -[NPEdgeLatency roundTripAverage]
  -[NPEdgeLatency setProbeNoTFOCookie:]
  -[NPEdgeLatency setPassedReprobeThreshold:]
  -[NPEdgeLatency setInterfaceType:]
  -[NPEdgeLatency setCurrentTimeout:]
  -[NPEdgeLatency setCreationDate:]
  -[NPEdgeLatency addRoundTripSamples:]
  -[NPEdgeLatency setProbeEndpoint:]
  -[NPEdgeLatency initWithCoder:]
  -[NPEdgeLatency probeConnection]
  -[NPEdgeLatency setNeedReprobe:]
  -[NPEdgeLatency TFOStatusString]
  -[NPEdgeLatency probeNoTFOCookie]
  -[NPEdgeLatency addRoundTripSample:]


NSPAppRule : NEAppRule /System/Library/Frameworks/Network.framework/Network
 @property  NSPAppRule *defaults
 @property  NSPNetworkAgent *agent
 @property  NWNetworkAgentRegistration *agentRegistration
 @property  NSUUID *configurationIdentifier
 @property  NSDate *enableCheckDate
 @property  BOOL disabledByRatio
 @property  NSData *updateHash
 @property  NSNumber *disableFallback
 @property  NSNumber *enableDirectMultipath
 @property  NSNumber *enableDirectTFO
 @property  NSNumber *enableDirectExtendedValidation
 @property  NSArray *directTLSPorts
 @property  NSNumber *divertDNSOnly
 @property  NSNumber *noDNSDelegation
 @property  NSNumber *serviceID
 @property  NSNumber *enabled
 @property  NSNumber *fallbackTimeout
 @property  NSNumber *fallbackBufferLimit
 @property  NSNumber *fallbackCountBeforeImmediateFallback
 @property  NSString *proxyEvaluationPath
 @property  NSNumber *useCustomProtocol
 @property  NSNumber *useLocalFlowDivert
 @property  NSNumber *enableDirectRace
 @property  NSString *label
 @property  NSString *edgeSetIdentifier
 @property  NSNumber *connectionTimeout
 @property  NSNumber *connectionIdleTimeout
 @property  NSNumber *enableMultipath
 @property  NSNumber *enableTFO
 @property  NSNumber *requireTFO
 @property  NSNumber *enableNoTFOCookie
 @property  NSNumber *enableUDPRace
 @property  NSNumber *enableRatio
 @property  NSNumber *reenableInterval
 @property  NSNumber *telemetryRatio
 @property  NSNumber *shouldComposeInitialData
 @property  NSNumber *enableOptInPerTask
 @property  NSArray *matchEffectiveApplications
 @property  NSString *locationBundlePath
 @property  NSNumber *initialWindowSize

  // class methods
  +[NSPAppRule supportsSecureCoding]
  +[NSPAppRule copyUUIDsForSigningIdentifier:executablePath:]
  +[NSPAppRule validateRuleDictionary:]
  +[NSPAppRule loadAppRules:withCompletionHandler:]

  // instance methods
  -[NSPAppRule setAgent:]
  -[NSPAppRule requireTFO]
  -[NSPAppRule serviceID]
  -[NSPAppRule copyWithZone:]
  -[NSPAppRule updateNetworkAgent]
  -[NSPAppRule enableOptInPerTask]
  -[NSPAppRule setTelemetryRatio:]
  -[NSPAppRule setShouldComposeInitialData:]
  -[NSPAppRule setDisabledByRatio:]
  -[NSPAppRule defaults]
  -[NSPAppRule fallbackBufferLimit]
  -[NSPAppRule setNoDNSDelegation:]
  -[NSPAppRule connectionTimeout]
  -[NSPAppRule enabled]
  -[NSPAppRule copyTLVData]
  -[NSPAppRule agent]
  -[NSPAppRule enableMultipath]
  -[NSPAppRule enableRatio]
  -[NSPAppRule setFallbackTimeout:]
  -[NSPAppRule setEnableDirectRace:]
  -[NSPAppRule enableUDPRace]
  -[NSPAppRule updateHash]
  -[NSPAppRule copyMatchDomainConditions]
  -[NSPAppRule setConfigurationIdentifier:]
  -[NSPAppRule useCustomProtocol]
  -[NSPAppRule setDirectTLSPorts:]
  -[NSPAppRule copyAccountIdentifierConditions]
  -[NSPAppRule setRequireTFO:]
  -[NSPAppRule .cxx_destruct]
  -[NSPAppRule telemetryRatio]
  -[NSPAppRule divertDNSOnly]
  -[NSPAppRule setEnableUDPRace:]
  -[NSPAppRule label]
  -[NSPAppRule setInitialWindowSize:]
  -[NSPAppRule matchEffectiveApplications]
  -[NSPAppRule setUseCustomProtocol:]
  -[NSPAppRule setEnableDirectMultipath:]
  -[NSPAppRule directTLSPorts]
  -[NSPAppRule encodeWithCoder:]
  -[NSPAppRule setEnableMultipath:]
  -[NSPAppRule setUpdateHash:]
  -[NSPAppRule enableNoTFOCookie]
  -[NSPAppRule setEnableDirectExtendedValidation:]
  -[NSPAppRule enableDirectTFO]
  -[NSPAppRule setDefaults:]
  -[NSPAppRule setLocationBundlePath:]
  -[NSPAppRule shouldComposeInitialData]
  -[NSPAppRule setUseLocalFlowDivert:]
  -[NSPAppRule proxyEvaluationPath]
  -[NSPAppRule setEnableOptInPerTask:]
  -[NSPAppRule setFallbackBufferLimit:]
  -[NSPAppRule enableDirectMultipath]
  -[NSPAppRule disableFallback]
  -[NSPAppRule copyMatchEffectiveApplicationConditions]
  -[NSPAppRule enableDirectExtendedValidation]
  -[NSPAppRule reenableInterval]
  -[NSPAppRule setEdgeSetIdentifier:]
  -[NSPAppRule copyExecutableConditions]
  -[NSPAppRule locationBundlePath]
  -[NSPAppRule setMatchEffectiveApplications:]
  -[NSPAppRule edgeSetIdentifier]
  -[NSPAppRule isEqual:]
  -[NSPAppRule setProxyEvaluationPath:]
  -[NSPAppRule setLabel:]
  -[NSPAppRule setEnabled:]
  -[NSPAppRule initFromDictionary:]
  -[NSPAppRule enableDirectRace]
  -[NSPAppRule setEnableCheckDate:]
  -[NSPAppRule configurationIdentifier]
  -[NSPAppRule setEnableNoTFOCookie:]
  -[NSPAppRule setEnableDirectTFO:]
  -[NSPAppRule connectionIdleTimeout]
  -[NSPAppRule disabledByRatio]
  -[NSPAppRule setDivertDNSOnly:]
  -[NSPAppRule setFallbackCountBeforeImmediateFallback:]
  -[NSPAppRule setEnableRatio:]
  -[NSPAppRule setDisableFallback:]
  -[NSPAppRule setConnectionIdleTimeout:]
  -[NSPAppRule setServiceID:]
  -[NSPAppRule setConnectionTimeout:]
  -[NSPAppRule enableCheckDate]
  -[NSPAppRule merge:]
  -[NSPAppRule useLocalFlowDivert]
  -[NSPAppRule setEnableTFO:]
  -[NSPAppRule saveWithCompletionHandler:]
  -[NSPAppRule fallbackCountBeforeImmediateFallback]
  -[NSPAppRule setAgentRegistration:]
  -[NSPAppRule agentRegistration]
  -[NSPAppRule teardownNetworkAgent]
  -[NSPAppRule initFromTLVs:]
  -[NSPAppRule setReenableInterval:]
  -[NSPAppRule enableTFO]
  -[NSPAppRule initWithCoder:]
  -[NSPAppRule fallbackTimeout]
  -[NSPAppRule initialWindowSize]
  -[NSPAppRule noDNSDelegation]


NSPConnectionInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  long long pathType
 @property  long long fallbackReason
 @property  double fallbackDelay
 @property  long long edgeType
 @property  NSString *edgeAddress
 @property  BOOL isMultipath
 @property  unsigned long multipathSubflowCount
 @property  unsigned long multipathConnectedSubflowCount
 @property  unsigned long multipathPrimarySubflowInterfaceIndex
 @property  NSDictionary *multipathSubflowSwitchCounts
 @property  NSDictionary *TCPInfo
 @property  NSDate *firstTxByteTimeStamp
 @property  double firstTxByteDelay
 @property  double connectionDelay
 @property  BOOL TFOSucceeded
 @property  long long IPType
 @property  long long interfaceType
 @property  unsigned long minimumRTT
 @property  double timeIntervalSinceLastUsage
 @property  NSDictionary *exceptions
 @property  NSString *interfaceName
 @property  NSArray *timingIntervals
 @property  double timeToFirstByte
 @property  long long tunnelConnectionError
 @property  BOOL isTFOProbeSucceeded
 @property  unsigned long initialBytesLeftOver
 @property  long long fallbackReasonCategory

  // class methods
  +[NSPConnectionInfo supportsSecureCoding]
  +[NSPConnectionInfo getFallbackReasonDescription:]
  +[NSPConnectionInfo fallbackReasonToErrno:]
  +[NSPConnectionInfo shouldMoveToNextEdgeForFallbackReason:]
  +[NSPConnectionInfo shouldResolveForFallbackReason:]

  // instance methods
  -[NSPConnectionInfo copyDictionary]
  -[NSPConnectionInfo interfaceType]
  -[NSPConnectionInfo TCPInfo]
  -[NSPConnectionInfo IPType]
  -[NSPConnectionInfo .cxx_destruct]
  -[NSPConnectionInfo pathType]
  -[NSPConnectionInfo encodeWithCoder:]
  -[NSPConnectionInfo interfaceName]
  -[NSPConnectionInfo TFOSucceeded]
  -[NSPConnectionInfo setInterfaceName:]
  -[NSPConnectionInfo timeIntervalSinceLastUsage]
  -[NSPConnectionInfo edgeType]
  -[NSPConnectionInfo setPathType:]
  -[NSPConnectionInfo setFallbackDelay:]
  -[NSPConnectionInfo setEdgeAddress:]
  -[NSPConnectionInfo setIsMultipath:]
  -[NSPConnectionInfo setMultipathSubflowCount:]
  -[NSPConnectionInfo setMultipathConnectedSubflowCount:]
  -[NSPConnectionInfo setIPType:]
  -[NSPConnectionInfo setMultipathPrimarySubflowInterfaceIndex:]
  -[NSPConnectionInfo setFirstTxByteTimeStamp:]
  -[NSPConnectionInfo setFirstTxByteDelay:]
  -[NSPConnectionInfo setConnectionDelay:]
  -[NSPConnectionInfo setMinimumRTT:]
  -[NSPConnectionInfo setTimeIntervalSinceLastUsage:]
  -[NSPConnectionInfo setTimeToFirstByte:]
  -[NSPConnectionInfo setTunnelConnectionError:]
  -[NSPConnectionInfo setIsTFOProbeSucceeded:]
  -[NSPConnectionInfo setInitialBytesLeftOver:]
  -[NSPConnectionInfo fallbackReasonCategory]
  -[NSPConnectionInfo fallbackDelay]
  -[NSPConnectionInfo edgeAddress]
  -[NSPConnectionInfo multipathSubflowCount]
  -[NSPConnectionInfo multipathConnectedSubflowCount]
  -[NSPConnectionInfo multipathPrimarySubflowInterfaceIndex]
  -[NSPConnectionInfo firstTxByteTimeStamp]
  -[NSPConnectionInfo firstTxByteDelay]
  -[NSPConnectionInfo connectionDelay]
  -[NSPConnectionInfo minimumRTT]
  -[NSPConnectionInfo timeToFirstByte]
  -[NSPConnectionInfo tunnelConnectionError]
  -[NSPConnectionInfo isTFOProbeSucceeded]
  -[NSPConnectionInfo initialBytesLeftOver]
  -[NSPConnectionInfo multipathSubflowSwitchCounts]
  -[NSPConnectionInfo setMultipathSubflowSwitchCounts:]
  -[NSPConnectionInfo isMultipath]
  -[NSPConnectionInfo setInterfaceType:]
  -[NSPConnectionInfo exceptions]
  -[NSPConnectionInfo setEdgeType:]
  -[NSPConnectionInfo setFallbackReason:]
  -[NSPConnectionInfo initWithCoder:]
  -[NSPConnectionInfo fallbackReason]
  -[NSPConnectionInfo setExceptions:]
  -[NSPConnectionInfo setTCPInfo:]
  -[NSPConnectionInfo setTFOSucceeded:]
  -[NSPConnectionInfo timingIntervals]
  -[NSPConnectionInfo timingIntervalAtIndex:forKey:]
  -[NSPConnectionInfo setTimingIntervals:]


NPAppProxyFlowBridge : NSObject /usr/lib/libc++.1.dylib
 @property  NEAppProxyFlow *flow
 @property  NWEndpoint *remoteEndpoint
 @property  NSObject<OS_nw_connection> *connection
 @property  NSError *connectionError
 @property  int currentState
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[NPAppProxyFlowBridge setCurrentState:]
  -[NPAppProxyFlowBridge flow]
  -[NPAppProxyFlowBridge currentState]
  -[NPAppProxyFlowBridge startConnection]
  -[NPAppProxyFlowBridge setRemoteEndpoint:]
  -[NPAppProxyFlowBridge .cxx_destruct]
  -[NPAppProxyFlowBridge setConnectionError:]
  -[NPAppProxyFlowBridge connectionError]
  -[NPAppProxyFlowBridge setConnection:]
  -[NPAppProxyFlowBridge setQueue:]
  -[NPAppProxyFlowBridge setFlow:]
  -[NPAppProxyFlowBridge queue]
  -[NPAppProxyFlowBridge remoteEndpoint]
  -[NPAppProxyFlowBridge connection]
  -[NPAppProxyFlowBridge readDataFromClient]
  -[NPAppProxyFlowBridge readMultipleFromClient]
  -[NPAppProxyFlowBridge readMultipleFromConnection]
  -[NPAppProxyFlowBridge readDataFromConnection]
  -[NPAppProxyFlowBridge writeMultipleToConnection:count:]
  -[NPAppProxyFlowBridge writeDataToConnection:]
  -[NPAppProxyFlowBridge initWithAppProxyFlow:]


NPTunnelFlowProtocol : NPTunnelFlow
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} inputProtocol
 @property  BOOL waitingForOutput

  // instance methods
  -[NPTunnelFlowProtocol disconnect]
  -[NPTunnelFlowProtocol connect]
  -[NPTunnelFlowProtocol .cxx_destruct]
  -[NPTunnelFlowProtocol initWithTunnel:appRule:inputProtocol:extraProperties:]
  -[NPTunnelFlowProtocol handleAppData:]
  -[NPTunnelFlowProtocol sendDataToClient:fromTunnel:]
  -[NPTunnelFlowProtocol readDataFromClient]
  -[NPTunnelFlowProtocol waitingForOutput]
  -[NPTunnelFlowProtocol closeClientFlowWithError:]
  -[NPTunnelFlowProtocol isClientFlowClosed]
  -[NPTunnelFlowProtocol handleTunnelReadyForData]
  -[NPTunnelFlowProtocol notifyClientConnected]
  -[NPTunnelFlowProtocol addBufferToFrameArray:bufferSize:]
  -[NPTunnelFlowProtocol dropInputProtocol]
  -[NPTunnelFlowProtocol addInputFramesToArray:limitMinimumBytes:limitMaximumBytes:limitMaximumFrames:]
  -[NPTunnelFlowProtocol addOutputFramesToArray:limitMinimumBytes:limitMaximumBytes:limitMaximumFrames:]
  -[NPTunnelFlowProtocol handleOutputFrame:send:]
  -[NPTunnelFlowProtocol inputProtocol]


NPTunnelNSURLSessionDelegate : NSObject /usr/lib/libc++.1.dylib <NSURLSessionDelegate>
 @property  NSString *validationHostname
 @property  BOOL enableExtendedValidation
 @property  BOOL ignoreInvalidCerts
 @property  NSString *leafOID
 @property  BOOL revocationFailClosed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NPTunnelNSURLSessionDelegate setIgnoreInvalidCerts:]
  -[NPTunnelNSURLSessionDelegate URLSession:didReceiveChallenge:completionHandler:]
  -[NPTunnelNSURLSessionDelegate validationHostname]
  -[NPTunnelNSURLSessionDelegate setLeafOID:]
  -[NPTunnelNSURLSessionDelegate .cxx_destruct]
  -[NPTunnelNSURLSessionDelegate enableExtendedValidation]
  -[NPTunnelNSURLSessionDelegate revocationFailClosed]
  -[NPTunnelNSURLSessionDelegate ignoreInvalidCerts]
  -[NPTunnelNSURLSessionDelegate setValidationHostname:]
  -[NPTunnelNSURLSessionDelegate setRevocationFailClosed:]
  -[NPTunnelNSURLSessionDelegate leafOID]
  -[NPTunnelNSURLSessionDelegate setEnableExtendedValidation:]


NPTunnelTuscany : NPTunnel
 @property  @? pendingPingCompletionHandler
 @property  BOOL isFirstTunnel
 @property  unsigned int dayPassSessionCounter
 @property  unsigned long maxFrameSize
 @property  ^v clientRef
 @property  long long currentMTU
 @property  BOOL ignoreWaldoTimestamp
 @property  NSDate *dayPassCreationDate

  // instance methods
  -[NPTunnelTuscany maxFrameSize]
  -[NPTunnelTuscany dealloc]
  -[NPTunnelTuscany .cxx_destruct]
  -[NPTunnelTuscany isFirstTunnel]
  -[NPTunnelTuscany dayPassCreationDate]
  -[NPTunnelTuscany handleConnectionError]
  -[NPTunnelTuscany isTFOProbeSucceeded]
  -[NPTunnelTuscany dayPassSessionCounter]
  -[NPTunnelTuscany initialWindowSize]
  -[NPTunnelTuscany closeFlow:]
  -[NPTunnelTuscany start]
  -[NPTunnelTuscany destroyConnection]
  -[NPTunnelTuscany cancelConnection]
  -[NPTunnelTuscany initWithEndpoint:parameters:appRule:flowProperties:onRamp:delegate:]
  -[NPTunnelTuscany setClientRef:]
  -[NPTunnelTuscany clientRef]
  -[NPTunnelTuscany createTuscanyClient]
  -[NPTunnelTuscany currentMTU]
  -[NPTunnelTuscany startConnectionTimer]
  -[NPTunnelTuscany cancelConnectionTimer]
  -[NPTunnelTuscany sendUsageReportWithRTT:geohash:fallbackReason:]
  -[NPTunnelTuscany pingWithCompletionHandler:]
  -[NPTunnelTuscany createConnectionInfo]
  -[NPTunnelTuscany handleHelloAck:]
  -[NPTunnelTuscany handlePingResponseRTT:geohash:]
  -[NPTunnelTuscany flowIsFirstFlow:]
  -[NPTunnelTuscany acknowledgeData:sentToFlow:]
  -[NPTunnelTuscany sendData:forFlow:]
  -[NPTunnelTuscany handleFlowUsedTunnel]
  -[NPTunnelTuscany handleFallbackForFlow:]
  -[NPTunnelTuscany maxDataSendSizeForFlow:]
  -[NPTunnelTuscany handleConnected]
  -[NPTunnelTuscany handleDisconnected]
  -[NPTunnelTuscany canHandleMoreData]
  -[NPTunnelTuscany sendDataOnUDPSession:]
  -[NPTunnelTuscany setIgnoreWaldoTimestamp:]
  -[NPTunnelTuscany handleInputAvailable]
  -[NPTunnelTuscany handleReadData:]
  -[NPTunnelTuscany handleEOF]
  -[NPTunnelTuscany handleDataWrittenWithError:]
  -[NPTunnelTuscany writeInitialData]
  -[NPTunnelTuscany allocateFlowID]
  -[NPTunnelTuscany ignoreWaldoTimestamp]
  -[NPTunnelTuscany pendingPingCompletionHandler]
  -[NPTunnelTuscany setPendingPingCompletionHandler:]
  -[NPTunnelTuscany setIsFirstTunnel:]


NSPFlowDivertProvider : NEAppProxyProvider /System/Library/Frameworks/Network.framework/Network
 @property  NSPManager *manager

  // instance methods
  -[NSPFlowDivertProvider init]
  -[NSPFlowDivertProvider .cxx_destruct]
  -[NSPFlowDivertProvider manager]
  -[NSPFlowDivertProvider setManager:]
  -[NSPFlowDivertProvider handleNewFlow:]
  -[NSPFlowDivertProvider startProxyWithOptions:completionHandler:]
  -[NSPFlowDivertProvider stopProxyWithReason:completionHandler:]


NSPControlConnection : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long flowIdentifier

  // instance methods
  -[NSPControlConnection initFromNWConnection:]
  -[NSPControlConnection initFromStream:]
  -[NSPControlConnection fetchConnectionInfoWithCompletionHandler:]
  -[NSPControlConnection initFromMetadata:]
  -[NSPControlConnection initFromConnection:]
  -[NSPControlConnection initFromTask:]
  -[NSPControlConnection flowIdentifier]


NPTunnel : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL eof
 @property  NSObject<OS_nw_endpoint> *localEndpoint
 @property  NSObject<OS_nw_path> *path
 @property  BOOL handledDisconnected
 @property  BOOL disableIdleTimeout
 @property  long long connectionState
 @property  NSDate *connectionStartDate
 @property  int error
 @property  long long fallbackReason
 @property  double timeToFirstRequest
 @property  double timeToFirstByte
 @property  BOOL isCancelled
 @property  NSUUID *identifier
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} protocol
 @property  NSObject<OS_nw_parameters> *parameters
 @property  NSObject<OS_nw_endpoint> *endpoint
 @property  NSObject<OS_nw_interface> *outputInterface
 @property  <NPTunnelDelegate> *delegate
 @property  NSMutableDictionary *flows
 @property  NSPAppRule *appRule
 @property  BOOL canHandleMoreData
 @property  unsigned long initialWindowSize
 @property  BOOL isConnectionAlive
 @property  ^Q timestamps
 @property  BOOL isTFOProbeSucceeded
 @property  BOOL isReadyForData

  // class methods
  +[NPTunnel initializeProtocol]

  // instance methods
  -[NPTunnel protocol]
  -[NPTunnel connectionState]
  -[NPTunnel isCancelled]
  -[NPTunnel parameters]
  -[NPTunnel setConnectionState:]
  -[NPTunnel path]
  -[NPTunnel setDisableIdleTimeout:]
  -[NPTunnel eof]
  -[NPTunnel timestamps]
  -[NPTunnel setLocalEndpoint:]
  -[NPTunnel disableIdleTimeout]
  -[NPTunnel endpoint]
  -[NPTunnel dealloc]
  -[NPTunnel setError:]
  -[NPTunnel .cxx_destruct]
  -[NPTunnel flows]
  -[NPTunnel identifier]
  -[NPTunnel removeFlow:]
  -[NPTunnel write:]
  -[NPTunnel localEndpoint]
  -[NPTunnel error]
  -[NPTunnel setPath:]
  -[NPTunnel setTimeToFirstByte:]
  -[NPTunnel timeToFirstByte]
  -[NPTunnel isTFOProbeSucceeded]
  -[NPTunnel appRule]
  -[NPTunnel setEof:]
  -[NPTunnel delegate]
  -[NPTunnel setFallbackReason:]
  -[NPTunnel initialWindowSize]
  -[NPTunnel closeFlow:]
  -[NPTunnel fallbackReason]
  -[NPTunnel start]
  -[NPTunnel destroyConnection]
  -[NPTunnel setIsCancelled:]
  -[NPTunnel cancelConnection]
  -[NPTunnel addNewFlow:]
  -[NPTunnel hasFlow:]
  -[NPTunnel isConnectionAlive]
  -[NPTunnel connectionStartDate]
  -[NPTunnel createConnectionInfo]
  -[NPTunnel setConnectionStartDate:]
  -[NPTunnel handleFlowClosed:withFallbackReason:]
  -[NPTunnel sendData:toClientFlow:]
  -[NPTunnel increaseWindowSizeForFlow:byBytes:]
  -[NPTunnel flowIsFirstFlow:]
  -[NPTunnel acknowledgeData:sentToFlow:]
  -[NPTunnel sendData:forFlow:]
  -[NPTunnel handleFlowUsedTunnel]
  -[NPTunnel handleFallbackForFlow:]
  -[NPTunnel timeToFirstRequest]
  -[NPTunnel maxDataSendSizeForFlow:]
  -[NPTunnel isReadyForData]
  -[NPTunnel handleConnected]
  -[NPTunnel setTimeToFirstRequest:]
  -[NPTunnel handleDisconnected]
  -[NPTunnel readMinimumLength:maximumLength:]
  -[NPTunnel canHandleMoreData]
  -[NPTunnel handleCanHandleMoreData]
  -[NPTunnel initWithEndpoint:parameters:appRule:flowProperties:delegate:]
  -[NPTunnel outputInterface]
  -[NPTunnel handleReady]
  -[NPTunnel handleInputAvailable]
  -[NPTunnel handleReadData:]
  -[NPTunnel handleEOF]
  -[NPTunnel handleDataWrittenWithError:]
  -[NPTunnel writeInitialData]
  -[NPTunnel allocateFlowID]
  -[NPTunnel startIdleTimer]
  -[NPTunnel teardownOutputHandler]
  -[NPTunnel handleConnectionIsDisconnected]
  -[NPTunnel handleOutputAvailable]
  -[NPTunnel handledDisconnected]
  -[NPTunnel setHandledDisconnected:]


NPLocation : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL isValid
 @property  double latitude
 @property  double longtitude
 @property  NSDate *timestamp

  // class methods
  +[NPLocation supportsSecureCoding]

  // instance methods
  -[NPLocation copyWithZone:]
  -[NPLocation initWithLatitude:longtitude:timestamp:]
  -[NPLocation setLatitude:]
  -[NPLocation latitude]
  -[NPLocation .cxx_destruct]
  -[NPLocation timestamp]
  -[NPLocation setTimestamp:]
  -[NPLocation encodeWithCoder:]
  -[NPLocation isValid]
  -[NPLocation setLongtitude:]
  -[NPLocation longtitude]
  -[NPLocation initWithCoder:]


NPTuscanyOnRamp : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL isDayPassExpired
 @property  NWEndpoint *daypassEndpoint
 @property  NPTunnelTuscanyEndpoint *tuscanyEndpoint
 @property  NSDate *retryDate
 @property  NSUUID *dayPassUUID
 @property  NSData *dayPass
 @property  NSDate *dayPassCreationDate
 @property  unsigned int dayPassSessionCounter
 @property  double dayPassHardExpiry
 @property  NWNetworkAgentRegistration *agentRegistration
 @property  NSPKeyNetworkAgent *agent
 @property  NPWaldo *parentWaldo
 @property  BOOL dayPassFailed
 @property  NSURLSession *dayPassSession
 @property  BOOL dayPassRefreshAllowed
 @property  BOOL dayPassPending
 @property  long long TFOStatus
 @property  unsigned long maxFrameSize
 @property  unsigned long rtt
 @property  NSString *shortDescription
 @property  long long currentEdgeType
 @property  int error
 @property  BOOL isTFOEnabled
 @property  NSDictionary *descriptionDictionary

  // class methods
  +[NPTuscanyOnRamp supportsSecureCoding]

  // instance methods
  -[NPTuscanyOnRamp setAgent:]
  -[NPTuscanyOnRamp agent]
  -[NPTuscanyOnRamp setTFOStatus:]
  -[NPTuscanyOnRamp descriptionDictionary]
  -[NPTuscanyOnRamp maxFrameSize]
  -[NPTuscanyOnRamp currentEdgeType]
  -[NPTuscanyOnRamp setDayPassFailed:]
  -[NPTuscanyOnRamp setRetryDate:]
  -[NPTuscanyOnRamp setParentWaldo:]
  -[NPTuscanyOnRamp setError:]
  -[NPTuscanyOnRamp getTuscanyEndpoint:]
  -[NPTuscanyOnRamp dayPassUUID]
  -[NPTuscanyOnRamp .cxx_destruct]
  -[NPTuscanyOnRamp dayPass]
  -[NPTuscanyOnRamp retryDate]
  -[NPTuscanyOnRamp initWithEndpoint:]
  -[NPTuscanyOnRamp encodeWithCoder:]
  -[NPTuscanyOnRamp dayPassCreationDate]
  -[NPTuscanyOnRamp daypassEndpoint]
  -[NPTuscanyOnRamp setDayPassSessionCounter:]
  -[NPTuscanyOnRamp setDayPassCreationDate:]
  -[NPTuscanyOnRamp error]
  -[NPTuscanyOnRamp dayPassPending]
  -[NPTuscanyOnRamp shortDescription]
  -[NPTuscanyOnRamp dayPassHardExpiry]
  -[NPTuscanyOnRamp rtt]
  -[NPTuscanyOnRamp setDayPassPending:]
  -[NPTuscanyOnRamp isDayPassPastExpiry:]
  -[NPTuscanyOnRamp registerAgentWithKey:]
  -[NPTuscanyOnRamp tuscanyEndpoint]
  -[NPTuscanyOnRamp setTuscanyEndpoint:]
  -[NPTuscanyOnRamp setDayPassHardExpiry:]
  -[NPTuscanyOnRamp refreshDayPassWithWaldoDelegate:softExpiry:retryInterval:edge:completionHandler:]
  -[NPTuscanyOnRamp isEqual:]
  -[NPTuscanyOnRamp invalidateDayPass]
  -[NPTuscanyOnRamp isTFOEnabled]
  -[NPTuscanyOnRamp initWithKey:]
  -[NPTuscanyOnRamp TFOStatus]
  -[NPTuscanyOnRamp dayPassSession]
  -[NPTuscanyOnRamp resetParentWaldo:]
  -[NPTuscanyOnRamp parentWaldo]
  -[NPTuscanyOnRamp setDayPassUUID:]
  -[NPTuscanyOnRamp dayPassSessionCounter]
  -[NPTuscanyOnRamp updateSessionCounterFromKernel]
  -[NPTuscanyOnRamp getNextSessionCounter]
  -[NPTuscanyOnRamp dayPassRefreshAllowed]
  -[NPTuscanyOnRamp fillTestDaypass]
  -[NPTuscanyOnRamp setDayPass:]
  -[NPTuscanyOnRamp setAgentRegistration:]
  -[NPTuscanyOnRamp agentRegistration]
  -[NPTuscanyOnRamp unregisterAgent]
  -[NPTuscanyOnRamp dayPassFailed]
  -[NPTuscanyOnRamp copyValue:ofSize:fromOffset:base:totalLength:]
  -[NPTuscanyOnRamp isDayPassExpired]
  -[NPTuscanyOnRamp initWithCoder:]
  -[NPTuscanyOnRamp setDayPassSession:]


NPNetworkInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSArray *edgeLatencies
 @property  NSArray *currentLatencyMap
 @property  NSDate *probeRateLimit
 @property  NPEdgeSelection *edgeSelection
 @property  BOOL isProbeInProgress
 @property  NSDate *lastVisited
 @property  NSDate *lastUsed
 @property  NSString *lastVisitedDesc
 @property  NSString *lastUsedDesc
 @property  long long lastFallbackReason
 @property  BOOL hasIPv6

  // class methods
  +[NPNetworkInfo supportsSecureCoding]
  +[NPNetworkInfo failureReasonToFallbackReason:]

  // instance methods
  -[NPNetworkInfo hasIPv6]
  -[NPNetworkInfo isProbeInProgress]
  -[NPNetworkInfo resortEdgeLatenciesUsingComparator:]
  -[NPNetworkInfo setHasIPv6:]
  -[NPNetworkInfo setLastVisited:]
  -[NPNetworkInfo setProbeRateLimit:]
  -[NPNetworkInfo setLastFallbackReason:]
  -[NPNetworkInfo setCurrentLatencyMap:]
  -[NPNetworkInfo .cxx_destruct]
  -[NPNetworkInfo lastUsed]
  -[NPNetworkInfo lastVisitedDesc]
  -[NPNetworkInfo rebuildLatencyMapWithViewSize:edgeCount:parameters:]
  -[NPNetworkInfo edgeSelection]
  -[NPNetworkInfo encodeWithCoder:]
  -[NPNetworkInfo handleTFOFailedForAddressFamily:]
  -[NPNetworkInfo isLatency:qualifiedForLatencyMap:parameters:requireUniqueEdges:]
  -[NPNetworkInfo compareLastVisited:]
  -[NPNetworkInfo probeRateLimit]
  -[NPNetworkInfo setEdgeLatencies:]
  -[NPNetworkInfo currentLatencyMap]
  -[NPNetworkInfo setIsProbeInProgress:]
  -[NPNetworkInfo lastFallbackReason]
  -[NPNetworkInfo setEdgeSelection:]
  -[NPNetworkInfo edgeLatencies]
  -[NPNetworkInfo mergeNewLatencies:usingComparator:]
  -[NPNetworkInfo setLastUsed:]
  -[NPNetworkInfo lastUsedDesc]
  -[NPNetworkInfo lastVisited]
  -[NPNetworkInfo initWithCoder:]


NPTuscanyEdge : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSDictionary *onRampLists
 @property  NSDictionary *currentOnRampIndexList
 @property  NWEndpoint *probeEndpoint
 @property  NWEndpoint *onRampEndpoint
 @property  NSDate *lastUsed
 @property  NPWaldo *parentWaldo
 @property  NWEndpoint *savedEndpoint
 @property  BOOL reResolve
 @property  NSString *label
 @property  unsigned long index
 @property  NPLocation *location
 @property  double distance
 @property  BOOL probePending

  // class methods
  +[NPTuscanyEdge supportsSecureCoding]

  // instance methods
  -[NPTuscanyEdge distance]
  -[NPTuscanyEdge setDistance:]
  -[NPTuscanyEdge index]
  -[NPTuscanyEdge currentOnRampIndexList]
  -[NPTuscanyEdge reResolve]
  -[NPTuscanyEdge setIndex:]
  -[NPTuscanyEdge nextOnRampForLatency:outIndex:]
  -[NPTuscanyEdge setCurrentIndex:addressFamily:]
  -[NPTuscanyEdge setSavedEndpoint:]
  -[NPTuscanyEdge setParentWaldo:]
  -[NPTuscanyEdge setProbePending:]
  -[NPTuscanyEdge .cxx_destruct]
  -[NPTuscanyEdge lastUsed]
  -[NPTuscanyEdge setReResolve:]
  -[NPTuscanyEdge label]
  -[NPTuscanyEdge getPortFromEndpoint:defaultPort:]
  -[NPTuscanyEdge unsynthesizeAddresses:]
  -[NPTuscanyEdge getCurrentOnRamp:]
  -[NPTuscanyEdge encodeWithCoder:]
  -[NPTuscanyEdge onRampLists]
  -[NPTuscanyEdge resolveWithCompletionHandler:]
  -[NPTuscanyEdge initWithLabel:index:onRampEndpoint:probeEndpoint:location:]
  -[NPTuscanyEdge linkWithOnRampsRetainMissingAddressFamilies:]
  -[NPTuscanyEdge onRampEndpoint]
  -[NPTuscanyEdge isEqual:]
  -[NPTuscanyEdge savedEndpoint]
  -[NPTuscanyEdge currentIndex:]
  -[NPTuscanyEdge location]
  -[NPTuscanyEdge iterateOnRampsForAddressFamily:withBlock:]
  -[NPTuscanyEdge probePending]
  -[NPTuscanyEdge setOnRampLists:]
  -[NPTuscanyEdge parentWaldo]
  -[NPTuscanyEdge probeEndpoint]
  -[NPTuscanyEdge compareByDistance:]
  -[NPTuscanyEdge setLastUsed:]
  -[NPTuscanyEdge setCurrentOnRampIndexList:]
  -[NPTuscanyEdge getOnRamp:addressFamily:]
  -[NPTuscanyEdge initWithCoder:]


NPWaldo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  NSMutableDictionary *networkInformation
 @property  NSArray *allOnRamps
 @property  BOOL daypassRefreshInProgress
 @property  NSArray *currentEdges
 @property  long long currentEdgeIndex
 @property  NPTuscanyEdge *nextEdge
 @property  NSArray *currentEdgeList
 @property  BOOL reprocessCancelled
 @property  unsigned int generation
 @property  NSObject<OS_dispatch_source> *reprocessSamplingTimer
 @property  NWNetworkAgentRegistration *agentRegistration
 @property  NSUUID *configurationIdentifier
 @property  NSObject<OS_dispatch_queue> *reprocessQueue
 @property  @? latencyComparator
 @property  NSData *updateHash
 @property  BOOL reResolve
 @property  NSString *identifier
 @property  long long source
 @property  NSNumber *timestamp
 @property  NSNumber *version
 @property  NSString *dayPassHostname
 @property  NSNumber *dayPassHostnamePrependLabel
 @property  NSNumber *dayPassPort
 @property  NSNumber *dayPassRequestTimeout
 @property  NSString *dayPassLeafOID
 @property  NSNumber *dayPassRevocationFailClosed
 @property  NSNumber *dayPassExtendedValidation
 @property  NSNumber *dayPassEnableSessionTicket
 @property  NSArray *dayPassSoftExpiry
 @property  NSNumber *enableLatencyDerivation
 @property  NSNumber *latencyFactorA
 @property  NSNumber *latencyFactorB
 @property  NSNumber *latencyFactorX
 @property  NSNumber *edgeFairnessFactor
 @property  NSNumber *locationCheckInterval
 @property  NSNumber *locationTTL
 @property  NSNumber *locationToleranceDistance
 @property  NSNumber *viewSize
 @property  NSNumber *probePause
 @property  NSNumber *probeTFO
 @property  NSNumber *probeNoTFOCookie
 @property  NSNumber *probeTimeout
 @property  NSNumber *retryPause
 @property  NSNumber *signatureLimit
 @property  NSNumber *observedRTTSampleSize
 @property  NSNumber *reprocessSamplingInterval
 @property  NSNumber *reprocessSampleSize
 @property  NSNumber *connectionIdleTimeoutMaximum
 @property  NSString *tag
 @property  NSURL *telemetryURL
 @property  NSString *telemetryService
 @property  NSNumber *useGeohashFromServer
 @property  NSNumber *edgeSelectionEnabled
 @property  NSNumber *edgeSelectionAlpha
 @property  NSNumber *edgeSelectionWindowSize
 @property  NSNumber *enableIPv6
 @property  NSArray *edges
 @property  NSNumber *requireTFO
 @property  NSNumber *TFOLeeway
 @property  BOOL isIPv6Enabled
 @property  NSNumber *edgesGeneration
 @property  NSNumber *usedEdgesGeneration
 @property  NPTuscanyEdge *currentEdge
 @property  unsigned long edgeCount
 @property  BOOL hasEdges
 @property  long long dayPassFetchCount
 @property  NSDate *currentNetworkLastUsed
 @property  NSString *hostname
 @property  <NPWaldoDelegate> *delegate
 @property  BOOL shouldSave
 @property  NSDate *expirationDate
 @property  unsigned long probeSize
 @property  NPLocation *cachedLocation
 @property  NSDate *locationCheckTimestamp
 @property  NSDate *locationExpiration
 @property  NPWaldo *defaults
 @property  NSPNetworkAgent *agent
 @property  NPKeyBag *keybag
 @property  NPWaldoLocationManager *locationManager
 @property  BOOL reprocessPending

  // class methods
  +[NPWaldo supportsSecureCoding]
  +[NPWaldo createEndpointFromHostList:defaultPortString:allowIPv6:]

  // instance methods
  -[NPWaldo setAgent:]
  -[NPWaldo requireTFO]
  -[NPWaldo copyWithZone:]
  -[NPWaldo setDayPassRequestTimeout:]
  -[NPWaldo cachedLocation]
  -[NPWaldo setEnableIPv6:]
  -[NPWaldo hostname]
  -[NPWaldo removeFromKeychain]
  -[NPWaldo currentEdgeList]
  -[NPWaldo viewSize]
  -[NPWaldo merge:missingSettingsOnly:]
  -[NPWaldo probeSize]
  -[NPWaldo defaults]
  -[NPWaldo setLocationManager:]
  -[NPWaldo setDayPassHostnamePrependLabel:]
  -[NPWaldo enableIPv6]
  -[NPWaldo mergeEdgeList:forNetworkSignature:]
  -[NPWaldo locationManager]
  -[NPWaldo reprocessSampleSize]
  -[NPWaldo initFromKeychainWithIdentifier:]
  -[NPWaldo observedRTTSampleSize]
  -[NPWaldo reResolve]
  -[NPWaldo onRampForIndex:]
  -[NPWaldo logLatencyInfoToStdout:logAll:logEdgeSelection:]
  -[NPWaldo hasEdges]
  -[NPWaldo initWithIdentifier:timestamp:fromDictionary:source:]
  -[NPWaldo latencyComparator]
  -[NPWaldo signatureLimit]
  -[NPWaldo cancelProbes]
  -[NPWaldo daypassRefreshInProgress]
  -[NPWaldo setEdgeSelectionWindowSize:]
  -[NPWaldo init]
  -[NPWaldo agent]
  -[NPWaldo reprocessAdHocWithEdgeIndex:completionHandler:]
  -[NPWaldo networkInformation]
  -[NPWaldo setEdgesGeneration:]
  -[NPWaldo dayPassEnableSessionTicket]
  -[NPWaldo link]
  -[NPWaldo getCurrentNetworkInterfaceType]
  -[NPWaldo reprocessWithNewRTT:reProbe:]
  -[NPWaldo reprocessSamplingInterval]
  -[NPWaldo setTag:]
  -[NPWaldo updateHash]
  -[NPWaldo connectionIdleTimeoutMaximum]
  -[NPWaldo tag]
  -[NPWaldo locationExpiration]
  -[NPWaldo edgeAtIndex:]
  -[NPWaldo copyStateIncludeDistance:]
  -[NPWaldo dayPassRevocationFailClosed]
  -[NPWaldo isEndpointProbed:parameters:latencies:checkSampleSize:incompleteLatency:]
  -[NPWaldo setConfigurationIdentifier:]
  -[NPWaldo setProbeTFO:]
  -[NPWaldo currentEdgeIndex]
  -[NPWaldo resortEdgeListForCurrentNetworkSignature]
  -[NPWaldo isIPv6Enabled]
  -[NPWaldo telemetryService]
  -[NPWaldo setDayPassEnableSessionTicket:]
  -[NPWaldo setLatencyFactorX:]
  -[NPWaldo source]
  -[NPWaldo setLatencyFactorB:]
  -[NPWaldo setLocationCheckTimestamp:]
  -[NPWaldo dayPassHostnamePrependLabel]
  -[NPWaldo setObservedRTTSampleSize:]
  -[NPWaldo setRequireTFO:]
  -[NPWaldo updateMetaDataNeedProbe:refresh:push:minRTT:]
  -[NPWaldo setProbePause:]
  -[NPWaldo setAllOnRamps:]
  -[NPWaldo .cxx_destruct]
  -[NPWaldo timestampNetworkSignature:]
  -[NPWaldo copyEdgeListRTTAverage:observed:shortDescription:]
  -[NPWaldo setRetryPause:]
  -[NPWaldo setReResolve:]
  -[NPWaldo setReprocessCancelled:]
  -[NPWaldo timestamp]
  -[NPWaldo setCurrentEdgeIndex:]
  -[NPWaldo currentNetworkLastUsed]
  -[NPWaldo setHostname:]
  -[NPWaldo setTimestamp:]
  -[NPWaldo dayPassLeafOID]
  -[NPWaldo setDayPassHostname:]
  -[NPWaldo setConnectionIdleTimeoutMaximum:]
  -[NPWaldo handleUsageReport:]
  -[NPWaldo dayPassSoftExpiry]
  -[NPWaldo telemetryURL]
  -[NPWaldo currentEdge]
  -[NPWaldo locationCheckInterval]
  -[NPWaldo dayPassRequestTimeout]
  -[NPWaldo setTelemetryService:]
  -[NPWaldo setDayPassPort:]
  -[NPWaldo setUsedEdgesGeneration:]
  -[NPWaldo logEdgeList:debug:toStdout:]
  -[NPWaldo setVersion:]
  -[NPWaldo encodeWithCoder:]
  -[NPWaldo setProbeTimeout:]
  -[NPWaldo identifier]
  -[NPWaldo TFOLeeway]
  -[NPWaldo setTelemetryURL:]
  -[NPWaldo setUpdateHash:]
  -[NPWaldo edgesGeneration]
  -[NPWaldo setReprocessPending:]
  -[NPWaldo startProbingEdges:atIndex:doneCount:sampleCount:completionHandler:]
  -[NPWaldo edges]
  -[NPWaldo validateEdgeList:]
  -[NPWaldo edgeFairnessFactor]
  -[NPWaldo establishTrustWithCompletionHandler:]
  -[NPWaldo nextEdge]
  -[NPWaldo setDefaults:]
  -[NPWaldo removeDayPassesFromKernel]
  -[NPWaldo locationCheckTimestamp]
  -[NPWaldo probeTFO]
  -[NPWaldo setReprocessSampleSize:]
  -[NPWaldo edgeSelectionWindowSize]
  -[NPWaldo edgeCount]
  -[NPWaldo setViewSize:]
  -[NPWaldo resolveWithCompletionHandler:]
  -[NPWaldo getDayPassRTT]
  -[NPWaldo probeTimeout]
  -[NPWaldo setLocationTTL:]
  -[NPWaldo setCurrentNetworkCharacteristics:]
  -[NPWaldo edgeSelectionEnabled]
  -[NPWaldo setEdgeSelectionEnabled:]
  -[NPWaldo setLatencyFactorA:]
  -[NPWaldo latencyFactorA]
  -[NPWaldo reprocessPending]
  -[NPWaldo enableLatencyDerivation]
  -[NPWaldo retryPause]
  -[NPWaldo setGeneration:]
  -[NPWaldo locationTTL]
  -[NPWaldo setUseGeohashFromServer:]
  -[NPWaldo setDaypassRefreshInProgress:]
  -[NPWaldo edgeSelectionAlpha]
  -[NPWaldo setTFOLeeway:]
  -[NPWaldo updateNetworkAgentWithKeybag:networkInfo:]
  -[NPWaldo setLocationCheckInterval:]
  -[NPWaldo createEdgeLatenciesToProbeWithEdgeIndex:startSampleCount:]
  -[NPWaldo setKeybag:]
  -[NPWaldo dayPassPort]
  -[NPWaldo reprocessLatencies:sampleCount:completionHandler:]
  -[NPWaldo pushKeybagToKernel]
  -[NPWaldo copyEdgeSelectionTelemetry]
  -[NPWaldo isLatenciesCompleteForNetwork:]
  -[NPWaldo setDayPassRevocationFailClosed:]
  -[NPWaldo linkAllSignatures:]
  -[NPWaldo usedEdgesGeneration]
  -[NPWaldo updateEdgeSelection:]
  -[NPWaldo setEdges:]
  -[NPWaldo saveToKeychain]
  -[NPWaldo expirationDate]
  -[NPWaldo reprocessEdgeAtIndex:networkSignature:completionHandler:]
  -[NPWaldo incrementSessionCounters]
  -[NPWaldo linkLatenciesAllSignatures:]
  -[NPWaldo version]
  -[NPWaldo currentEdges]
  -[NPWaldo reprocessCancelled]
  -[NPWaldo reprocessWithCompletionHandler:]
  -[NPWaldo allOnRamps]
  -[NPWaldo configurationIdentifier]
  -[NPWaldo copyLatencyInfoDictionary:copyAll:]
  -[NPWaldo locationToleranceDistance]
  -[NPWaldo setLocationToleranceDistance:]
  -[NPWaldo setProbeNoTFOCookie:]
  -[NPWaldo shouldPerformDayPassRefresh]
  -[NPWaldo reprocessSamplingTimer]
  -[NPWaldo shouldSave]
  -[NPWaldo useGeohashFromServer]
  -[NPWaldo keybag]
  -[NPWaldo setReprocessSamplingInterval:]
  -[NPWaldo reprocessQueue]
  -[NPWaldo setDayPassExtendedValidation:]
  -[NPWaldo setDelegate:]
  -[NPWaldo setEdgeSelectionAlpha:]
  -[NPWaldo rebuildLatencyMapAllSignatures:]
  -[NPWaldo generation]
  -[NPWaldo latencyFactorB]
  -[NPWaldo getFallbackReasonForLatencies:]
  -[NPWaldo pushKeybagToKernelCanReuse:]
  -[NPWaldo dayPassFetchCount]
  -[NPWaldo setAgentRegistration:]
  -[NPWaldo ageOutLatencyMap]
  -[NPWaldo setDayPassLeafOID:]
  -[NPWaldo agentRegistration]
  -[NPWaldo shouldFetchWaldo]
  -[NPWaldo teardownNetworkAgent]
  -[NPWaldo refreshDayPassesWithCompletionHandler:]
  -[NPWaldo setEnableLatencyDerivation:]
  -[NPWaldo setReprocessSamplingTimer:]
  -[NPWaldo probePause]
  -[NPWaldo delegate]
  -[NPWaldo currentNetworkInfo]
  -[NPWaldo pushKeybagToKernelUpdateGeneration:]
  -[NPWaldo setShouldSave:]
  -[NPWaldo loadObservedRTTSamples:]
  -[NPWaldo cleanupStaleKeys]
  -[NPWaldo copyEdgeList:]
  -[NPWaldo setLocationExpiration:]
  -[NPWaldo dayPassHostname]
  -[NPWaldo setDayPassSoftExpiry:]
  -[NPWaldo edgeContainingOnRamp:]
  -[NPWaldo setNetworkInformation:]
  -[NPWaldo initWithCoder:]
  -[NPWaldo setCachedLocation:]
  -[NPWaldo initializeEdgeSelection]
  -[NPWaldo setSignatureLimit:]
  -[NPWaldo dayPassExtendedValidation]
  -[NPWaldo probeNoTFOCookie]
  -[NPWaldo latencyFactorX]
  -[NPWaldo setEdgeFairnessFactor:]
  -[NPWaldo indexOfBestEdge]


NPKey : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned int session_counter
 @property  int error
 @property  NSData *info
 @property  NSUUID *uuid
 @property  unsigned int flags
 @property  NSPNetworkAgent *agentForKey

  // instance methods
  -[NPKey setSession_counter:]
  -[NPKey setInfo:]
  -[NPKey setFlags:]
  -[NPKey info]
  -[NPKey uuid]
  -[NPKey setError:]
  -[NPKey .cxx_destruct]
  -[NPKey initWithData:]
  -[NPKey setUuid:]
  -[NPKey session_counter]
  -[NPKey data]
  -[NPKey error]
  -[NPKey flags]
  -[NPKey agentForKey]


NPKeyBag : NSObject /usr/lib/libc++.1.dylib
 @property  NSDictionary *onRampMap
 @property  NSArray *onRampList
 @property  NSPredicate *validOnRampPredicate
 @property  NSPredicate *validOnRampWithTFOPredicate
 @property  NSArray *keys
 @property  unsigned int index
 @property  long long fallbackReason
 @property  unsigned int generation
 @property  NSData *updateHash
 @property  long long TFOStatusOverride
 @property  double lastUsedTimestamp
 @property  double timeSinceLastUsed

  // instance methods
  -[NPKeyBag keys]
  -[NPKeyBag index]
  -[NPKeyBag copyUsableOnRamps:requireTFO:]
  -[NPKeyBag init]
  -[NPKeyBag onRampMap]
  -[NPKeyBag setIndex:]
  -[NPKeyBag updateHash]
  -[NPKeyBag updateHashMatchesEdgeSet:]
  -[NPKeyBag moveToNextOnRamp]
  -[NPKeyBag setKeys:]
  -[NPKeyBag .cxx_destruct]
  -[NPKeyBag initWithOnRamps:currentNetworkInfo:currentEdgeIndex:currentEdgeList:generation:identifier:updateHash:]
  -[NPKeyBag initWithData:]
  -[NPKeyBag TFOStatusOverride]
  -[NPKeyBag timeSinceLastUsed]
  -[NPKeyBag validOnRampPredicate]
  -[NPKeyBag setValidOnRampPredicate:]
  -[NPKeyBag removeIPv6Keys]
  -[NPKeyBag lastUsedTimestamp]
  -[NPKeyBag data]
  -[NPKeyBag setUpdateHash:]
  -[NPKeyBag setOnRampList:]
  -[NPKeyBag validOnRampWithTFOPredicate]
  -[NPKeyBag setGeneration:]
  -[NPKeyBag logWithMessage:identifier:]
  -[NPKeyBag onRampList]
  -[NPKeyBag getOnRampForEndpoint:]
  -[NPKeyBag moveToOnRamp:]
  -[NPKeyBag setValidOnRampWithTFOPredicate:]
  -[NPKeyBag generation]
  -[NPKeyBag createOnRamps]
  -[NPKeyBag setTFOStatusOverride:]
  -[NPKeyBag setFallbackReason:]
  -[NPKeyBag setOnRampMap:]
  -[NPKeyBag setLastUsedTimestamp:]
  -[NPKeyBag fallbackReason]


NSPFlowDivert : NEAppProxyProviderContainer /System/Library/Frameworks/Network.framework/Network
 @property  NEPolicySession *policySession
 @property  NEFlowDivertFileHandle *flowDivertControlHandle
 @property  NEFlowDivertFileHandle *flowDivertDataHandle
 @property  BOOL started
 @property  BOOL shouldResetPolicies
 @property  NSPConfiguration *configuration

  // instance methods
  -[NSPFlowDivert getAgentResults:]
  -[NSPFlowDivert started]
  -[NSPFlowDivert setStarted:]
  -[NSPFlowDivert didStartWithError:]
  -[NSPFlowDivert flowDivertDataHandle]
  -[NSPFlowDivert setPolicySession:]
  -[NSPFlowDivert setFlowDivertControlHandle:]
  -[NSPFlowDivert destroyFlowDivertSocketHandles]
  -[NSPFlowDivert shouldResetPolicies]
  -[NSPFlowDivert .cxx_destruct]
  -[NSPFlowDivert teardown]
  -[NSPFlowDivert initWithDelegate:providerClass:configuration:]
  -[NSPFlowDivert createPolicySession]
  -[NSPFlowDivert policySession]
  -[NSPFlowDivert shouldInstallFlowDivert:]
  -[NSPFlowDivert stop]
  -[NSPFlowDivert setFlowDivertDataHandle:]
  -[NSPFlowDivert getExecutableConditions:]
  -[NSPFlowDivert startWithOptions:completionHandler:]
  -[NSPFlowDivert getAgentResultsForSelf]
  -[NSPFlowDivert resetPolicies:]
  -[NSPFlowDivert didFailWithError:]
  -[NSPFlowDivert addPoliciesForDivertDNSOnly:domainConditions:divertResult:]
  -[NSPFlowDivert getEffectiveAppRules:]
  -[NSPFlowDivert createFlowDivertSocketHandles]
  -[NSPFlowDivert flowDivertControlHandle]
  -[NSPFlowDivert configuration]
  -[NSPFlowDivert destroyPolicySession]
  -[NSPFlowDivert addPolicy:]
  -[NSPFlowDivert setShouldResetPolicies:]
  -[NSPFlowDivert addPoliciesForAgent:conditions:]
  -[NSPFlowDivert setConfiguration:]


NSPConfiguration : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  long long diskVersion
 @property  NSPConfiguration *defaults
 @property  NSNumber *version
 @property  NSNumber *timestamp
 @property  NSNumber *enabled
 @property  NSDate *resurrectionDate
 @property  NSArray *appRules
 @property  NSNumber *waldoEnabled
 @property  NSString *waldoHost
 @property  NSNumber *waldoPort
 @property  NSString *waldoPath
 @property  NSNumber *waldoRequestTimeout
 @property  NSString *waldoLeafOID
 @property  NSNumber *waldoRevocationFailClosed
 @property  NSURLSession *waldoSession
 @property  BOOL ignoreInvalidCerts
 @property  NSDictionary *edgeSets
 @property  NSNumber *persistMetrics
 @property  NSDate *dayPassExpirationDate
 @property  NSDate *earliestEnableCheckDate
 @property  BOOL isDead

  // class methods
  +[NSPConfiguration supportsSecureCoding]
  +[NSPConfiguration defaultConfiguration]

  // instance methods
  -[NSPConfiguration copyWithZone:]
  -[NSPConfiguration initFromKeychain]
  -[NSPConfiguration setIgnoreInvalidCerts:]
  -[NSPConfiguration removeFromKeychain]
  -[NSPConfiguration createWaldoURLWithDomain:timestamp:]
  -[NSPConfiguration defaults]
  -[NSPConfiguration waldoPort]
  -[NSPConfiguration isDead]
  -[NSPConfiguration enabled]
  -[NSPConfiguration setWaldoLeafOID:]
  -[NSPConfiguration copyTLVData]
  -[NSPConfiguration edgeSets]
  -[NSPConfiguration setWaldoEnabled:]
  -[NSPConfiguration persistMetrics]
  -[NSPConfiguration setPersistMetrics:]
  -[NSPConfiguration setup]
  -[NSPConfiguration .cxx_destruct]
  -[NSPConfiguration timestamp]
  -[NSPConfiguration teardown]
  -[NSPConfiguration setWaldoRevocationFailClosed:]
  -[NSPConfiguration ignoreInvalidCerts]
  -[NSPConfiguration setWaldoHost:]
  -[NSPConfiguration getEdgeSetForSigningIdentifier:]
  -[NSPConfiguration setWaldoSession:]
  -[NSPConfiguration encodeWithCoder:]
  -[NSPConfiguration resurrectionDate]
  -[NSPConfiguration initWithTimestamp:fromDictionary:waldoSource:]
  -[NSPConfiguration appRules]
  -[NSPConfiguration waldoEnabled]
  -[NSPConfiguration setDefaults:]
  -[NSPConfiguration setAppRules:]
  -[NSPConfiguration getEdgeSetForAppRule:]
  -[NSPConfiguration dayPassExpirationDate]
  -[NSPConfiguration waldoLeafOID]
  -[NSPConfiguration setWaldoRequestTimeout:]
  -[NSPConfiguration setEnabled:]
  -[NSPConfiguration saveToKeychain]
  -[NSPConfiguration version]
  -[NSPConfiguration setResurrectionDate:]
  -[NSPConfiguration setEdgeSets:]
  -[NSPConfiguration setWaldoPort:]
  -[NSPConfiguration setWaldoPath:]
  -[NSPConfiguration updateNetworkAgents]
  -[NSPConfiguration earliestEnableCheckDate]
  -[NSPConfiguration evaluateEnableRatios]
  -[NSPConfiguration waldoPath]
  -[NSPConfiguration merge:]
  -[NSPConfiguration diskVersion]
  -[NSPConfiguration waldoHost]
  -[NSPConfiguration initFromTLVs:]
  -[NSPConfiguration waldoRevocationFailClosed]
  -[NSPConfiguration getCurrentKeyBagForAppRule:]
  -[NSPConfiguration copyAgentResultsForAppRule:]
  -[NSPConfiguration enumerateEdgeSetsWithBlock:]
  -[NSPConfiguration initWithCoder:]
  -[NSPConfiguration waldoRequestTimeout]
  -[NSPConfiguration loadBuiltinAppRulesFromDisk]
  -[NSPConfiguration incrementSessionCountersOnFirstLaunch]
  -[NSPConfiguration resetStaleEdgeSets]
  -[NSPConfiguration waldoSession]


NSPByteParser : NSObject /usr/lib/libc++.1.dylib <NSCopying>
 @property  NSData *data
 @property  r* bytes
 @property  r* cursor
 @property  unsigned long offset

  // instance methods
  -[NSPByteParser copyWithZone:]
  -[NSPByteParser bytes]
  -[NSPByteParser .cxx_destruct]
  -[NSPByteParser initWithData:]
  -[NSPByteParser setOffset:]
  -[NSPByteParser setCursor:]
  -[NSPByteParser data]
  -[NSPByteParser parse8Bits:]
  -[NSPByteParser advanceBy:andCopyTo:]
  -[NSPByteParser offset]
  -[NSPByteParser cursor]
  -[NSPByteParser parseDomainName]
  -[NSPByteParser parse16Bits:]
  -[NSPByteParser parse32Bits:]
  -[NSPByteParser parseAddressWithFamily:]
  -[NSPByteParser parseBytes:]


NPTunnelFlowTelemetry : NPTunnelFlowHTTP
  // instance methods
  -[NPTunnelFlowTelemetry handleTunnelConnected]
  -[NPTunnelFlowTelemetry isBestEffort]
  -[NPTunnelFlowTelemetry initWithTunnel:service:postURL:]
  -[NPTunnelFlowTelemetry reportTelemetry:]


NSPManager : NSObject /usr/lib/libc++.1.dylib <NPTunnelDelegate, NEAppProxyProviderContainerDelegate>
 @property  NWPathEvaluator *policyEvaluator
 @property  NSDictionary *appRules
 @property  NPKeyBag *keybag
 @property  NPKeyBag *inUseKeybag
 @property  NSPConfiguration *configuration
 @property  NSPFlowDivert *flowDivert
 @property  NSMutableDictionary *flowInfoMap
 @property  BOOL isObserving
 @property  NSArray *currentAgents
 @property  NSMutableDictionary *fallbackCounts
 @property  <NSPManagerDelegate> *delegate
 @property  NSString *signingIdentifier
 @property  NSPAppRule *matchingAppRule
 @property  NSMutableArray *knownFlows
 @property  @? pendingCancellationHandler
 @property  NSArray *testLatencyMap
 @property  BOOL testFetchDaypass
 @property  unsigned long testLatencyMapIndex
 @property  unsigned int nextFlowID
 @property  unsigned int tunnelCount
 @property  NSObject<OS_nw_endpoint> *currentTunnelEndpoint
 @property  NWPathEvaluator *pathEvaluator
 @property  BOOL currentNetworkHasProxies
 @property  BOOL isEnabled
 @property  @? changeHandler
 @property  @? connectionInfoSetHandler
 @property  @? tunnelConnectedHandler
 @property  double timeIntervalSinceLastUsage
 @property  BOOL disableIdleTimeout
 @property  BOOL isFirstTunnel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPManager sharedManager]

  // instance methods
  -[NSPManager pathEvaluator]
  -[NSPManager tunnelDidConnect:]
  -[NSPManager signingIdentifier]
  -[NSPManager useTestLatencyMap]
  -[NSPManager setDisableIdleTimeout:]
  -[NSPManager init]
  -[NSPManager tunnelCount]
  -[NSPManager tunnelIsReady:]
  -[NSPManager setConnectionInfoSetHandler:]
  -[NSPManager resetTestLatencyMapIndex:]
  -[NSPManager tunnelConnectedHandler]
  -[NSPManager container:didStartWithError:]
  -[NSPManager disableIdleTimeout]
  -[NSPManager handlePolicyUpdate]
  -[NSPManager waitForTunnelsToCancelWithCompletionHandler:]
  -[NSPManager changeHandler]
  -[NSPManager setIsObserving:]
  -[NSPManager sendUsageReport:]
  -[NSPManager setCurrentAgents:]
  -[NSPManager container:didRequestFlowDivertControlSocketWithCompletionHandler:]
  -[NSPManager .cxx_destruct]
  -[NSPManager matchingAppRule]
  -[NSPManager buildTestLatencyMap:]
  -[NSPManager createAppRuleMapWithRules:]
  -[NSPManager fetchStateForClient:withPeerEndpoint:completionHandler:]
  -[NSPManager container:didSetTunnelConfiguration:completionHandler:]
  -[NSPManager setMatchingAppRule:]
  -[NSPManager tunnel:flowDidFallbackWithReason:]
  -[NSPManager setFlowDivert:]
  -[NSPManager currentTunnelEndpoint]
  -[NSPManager setTunnelConnectedHandler:]
  -[NSPManager flowInfoMap]
  -[NSPManager createTransformsForEndpoint:parameters:]
  -[NSPManager isFirstTunnel]
  -[NSPManager getTestLatencyRTT:parameters:]
  -[NSPManager fallbackCounts]
  -[NSPManager appRules]
  -[NSPManager setTestLatencyMap:]
  -[NSPManager inUseKeybag]
  -[NSPManager setAppRules:]
  -[NSPManager isEnabled]
  -[NSPManager startWithConfiguration:appRules:delegate:]
  -[NSPManager setTestLatencyMapIndex:]
  -[NSPManager currentNetworkHasProxies]
  -[NSPManager isObserving]
  -[NSPManager setCurrentTunnelEndpoint:]
  -[NSPManager tunnelDidCancel:]
  -[NSPManager setConnectionInfo:forIdentifier:]
  -[NSPManager useTestDaypass]
  -[NSPManager instantiateFlowWithTunnel:inputProtocol:]
  -[NSPManager timeIntervalSinceLastUsage]
  -[NSPManager knownFlows]
  -[NSPManager setChangeHandler:]
  -[NSPManager observeValueForKeyPath:ofObject:change:context:]
  -[NSPManager setKeybag:]
  -[NSPManager configuration]
  -[NSPManager createReplacementEndpointForEndpoint:properties:]
  -[NSPManager testFetchDaypass]
  -[NSPManager testLatencyMap]
  -[NSPManager setInUseKeybag:]
  -[NSPManager setNextFlowID:]
  -[NSPManager instantiateTunnelWithEndpoint:parameters:]
  -[NSPManager container:didFailWithError:]
  -[NSPManager currentAgents]
  -[NSPManager setPendingCancellationHandler:]
  -[NSPManager keybag]
  -[NSPManager getAppRuleMatchingParameters:flowProperties:]
  -[NSPManager setFlowInfoMap:]
  -[NSPManager setDelegate:]
  -[NSPManager setTunnelCount:]
  -[NSPManager getConnectionInfoForIdentifier:]
  -[NSPManager flowDivert]
  -[NSPManager setTestFetchDaypass:]
  -[NSPManager ingestTestLatencyMap:local:completionHandler:]
  -[NSPManager connectionInfoSetHandler]
  -[NSPManager delegate]
  -[NSPManager nextFlowID]
  -[NSPManager stopWithCompletionHandler:]
  -[NSPManager testLatencyMapIndex]
  -[NSPManager pendingCancellationHandler]
  -[NSPManager setConfiguration:]
  -[NSPManager shouldSetConfigurationToAppRule:edgeSet:]
  -[NSPManager policyEvaluator]
  -[NSPManager start]


(PlatformSpecific)
	// instance methods
	-[(PlatformSpecific) objectForPlatformSpecificKey:]

NSMutableData(NSPTLV)
	// instance methods
	-[NSMutableData(NSPTLV) enumerateTLVsUsingBlock:]
	-[NSMutableData(NSPTLV) appendType:length:value:]

01 00 0500 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTTelephonyNetworkInfo 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppProxyProvider 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppProxyProviderContainer 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppProxyTCPFlow 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppProxyUDPFlow 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppRule 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEFileHandleMaintainer 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEFlowDivertFileHandle 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEHasher 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NENetworkAgentRegistrationFileHandle 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicy 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicyCondition 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicyResult 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicySession 
01 00 0800 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEVPNApp 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPURLResponse 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInputStream 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0c00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLCredential 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLRequest 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWAddressEndpoint 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWBonjourServiceEndpoint 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWEndpoint 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWHostEndpoint 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWNetworkAgentRegistration 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWParameters 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWPathEvaluator 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWResolver 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWTCPConnection 
01 00 0900 /System/Library/Frameworks/Network.framework/Network: NWUDPSession 
01 00 0200 /System/Library/PrivateFrameworks/SymptomDiagnosticReporter.framework/SymptomDiagnosticReporter: SDRDiagnosticReporter 
