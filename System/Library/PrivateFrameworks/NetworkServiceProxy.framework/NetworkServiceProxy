|| __DATA.__common _NPFlowProperty
|| __DATA.__common _NPFlowPropertyFlag
|| __DATA.__common __ZN6Crypto7Session6sipkeyE
|| __DATA.__common _anisette_validation_count
|| __DATA.__common _baa_validation_count
|| __DATA.__common _g_recordTimestamps
|| __DATA.__data _kPrivacyProxyServiceStatusDetailsRegionIDKey
|| __DATA.__data _ne_privacy_ingress_token_netagent_id
|| __DATA.__data _ne_privacy_multi_hop_fallback_proxy_netagent_id
|| __DATA.__data _ne_privacy_multi_hop_proxy_netagent_id
|| __DATA.__data _ne_privacy_single_hop_fallback_proxy_netagent_id
|| __DATA.__data _ne_privacy_single_hop_proxy_netagent_id
|| __DATA.__data _nsp_privacy_bootstrap_dns_netagent_id
|| __DATA.__objc_data _OBJC_CLASS_$_EdgeSelection
|| __DATA.__objc_data _OBJC_CLASS_$_NPAppProxyFlowBridge
|| __DATA.__objc_data _OBJC_CLASS_$_NPAverage
|| __DATA.__objc_data _OBJC_CLASS_$_NPDiagnosticReport
|| __DATA.__objc_data _OBJC_CLASS_$_NPDirectFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NPEdgeLatency
|| __DATA.__objc_data _OBJC_CLASS_$_NPEdgeSelection
|| __DATA.__objc_data _OBJC_CLASS_$_NPFlowProperties
|| __DATA.__objc_data _OBJC_CLASS_$_NPKey
|| __DATA.__objc_data _OBJC_CLASS_$_NPKeyBag
|| __DATA.__objc_data _OBJC_CLASS_$_NPLocation
|| __DATA.__objc_data _OBJC_CLASS_$_NPNetworkInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NPResolver
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnel
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowDNS
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowHTTP
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowTelemetry
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelFlowUDP
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelTuscany
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelTuscanyEndpoint
|| __DATA.__objc_data _OBJC_CLASS_$_NPTunnelTuscanyLoopback
|| __DATA.__objc_data _OBJC_CLASS_$_NPTuscanyEdge
|| __DATA.__objc_data _OBJC_CLASS_$_NPTuscanyLoopbackConnection
|| __DATA.__objc_data _OBJC_CLASS_$_NPTuscanyOnRamp
|| __DATA.__objc_data _OBJC_CLASS_$_NPUsageReport
|| __DATA.__objc_data _OBJC_CLASS_$_NPWaldo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPAnisette
|| __DATA.__objc_data _OBJC_CLASS_$_NSPBAA
|| __DATA.__objc_data _OBJC_CLASS_$_NSPBAA_Anisette
|| __DATA.__objc_data _OBJC_CLASS_$_NSPBadTokenInfoStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPByteParser
|| __DATA.__objc_data _OBJC_CLASS_$_NSPCandidateFallbackProxyPath
|| __DATA.__objc_data _OBJC_CLASS_$_NSPCandidateProxyPath
|| __DATA.__objc_data _OBJC_CLASS_$_NSPCandidateQuicProxyPath
|| __DATA.__objc_data _OBJC_CLASS_$_NSPCaptiveWiFiHandler
|| __DATA.__objc_data _OBJC_CLASS_$_NSPConfigurationFetchAnalytics
|| __DATA.__objc_data _OBJC_CLASS_$_NSPConfigurationSignatureInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPConfigurationStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPConnectionInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDNSPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDNSQuery
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDNSResourceRecord
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDeviceIdentityCertificate
|| __DATA.__objc_data _OBJC_CLASS_$_NSPDeviceIdentityStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPFallbackProxyPath
|| __DATA.__objc_data _OBJC_CLASS_$_NSPFlowDivertProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NSPKeyNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NSPNetworkStatusStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPOutageDurationStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPOutageReasonStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyAuthenticationInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyBAAValidation
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyBootstrapDNSAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyConfigAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyDNSAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyMultiHopFallbackNetworkRegistration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyMultiHopNetworkRegistration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyNetworkRegistration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyPolicySerialization
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyPolicyTierMap
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyProxyInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyProxyPathWeight
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyResolverInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxySignedConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxySingleHopFallbackNetworkRegistration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxySingleHopNetworkRegistration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyTokenActivationQuery
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyTokenActivationResponse
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyTokenAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyTokenInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyTokenRegistration
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivacyTokenManager
|| __DATA.__objc_data _OBJC_CLASS_$_NSPPrivateRelayIncompatibleNetworkStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProbeHTTPErrorCodeStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProbeStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProber
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProxyAgentNetworkStatistics
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProxyAgentStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProxyAnalytics
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProxyPath
|| __DATA.__objc_data _OBJC_CLASS_$_NSPProxyTokenInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NSPQuicProxyPath
|| __DATA.__objc_data _OBJC_CLASS_$_NSPServiceStatusManager
|| __DATA.__objc_data _OBJC_CLASS_$_NSPServiceStatusStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPSwitchEgressProxyStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPToggleStats
|| __DATA.__objc_data _OBJC_CLASS_$_NSPToken
|| __DATA.__objc_data _OBJC_CLASS_$_NSPTokenFetchAnalytics
|| __DATA.__objc_data _OBJC_CLASS_$_NSPUserNotification
|| __DATA.__objc_data _OBJC_CLASS_$_NSURLSessionDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_PrivacyProxyInfo
|| __DATA.__objc_data _OBJC_CLASS_$_PrivacyProxyNetworkStatusTime
|| __DATA.__objc_data _OBJC_CLASS_$_PrivacyProxyServiceStatusTime
|| __DATA.__objc_data _OBJC_CLASS_$_PrivacyProxyTokenInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_EdgeSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_NPAppProxyFlowBridge
|| __DATA.__objc_data _OBJC_METACLASS_$_NPAverage
|| __DATA.__objc_data _OBJC_METACLASS_$_NPDiagnosticReport
|| __DATA.__objc_data _OBJC_METACLASS_$_NPDirectFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NPEdgeLatency
|| __DATA.__objc_data _OBJC_METACLASS_$_NPEdgeSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_NPFlowProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_NPKey
|| __DATA.__objc_data _OBJC_METACLASS_$_NPKeyBag
|| __DATA.__objc_data _OBJC_METACLASS_$_NPLocation
|| __DATA.__objc_data _OBJC_METACLASS_$_NPNetworkInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NPResolver
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnel
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowDNS
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowHTTP
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowTelemetry
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelFlowUDP
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelTuscany
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelTuscanyEndpoint
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTunnelTuscanyLoopback
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTuscanyEdge
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTuscanyLoopbackConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_NPTuscanyOnRamp
|| __DATA.__objc_data _OBJC_METACLASS_$_NPUsageReport
|| __DATA.__objc_data _OBJC_METACLASS_$_NPWaldo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPAnisette
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPBAA
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPBAA_Anisette
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPBadTokenInfoStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPByteParser
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPCandidateFallbackProxyPath
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPCandidateProxyPath
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPCandidateQuicProxyPath
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPCaptiveWiFiHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPConfigurationFetchAnalytics
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPConfigurationSignatureInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPConfigurationStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPConnectionInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDNSPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDNSQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDNSResourceRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDeviceIdentityCertificate
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPDeviceIdentityStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPFallbackProxyPath
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPFlowDivertProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPKeyNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPNetworkStatusStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPOutageDurationStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPOutageReasonStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyAuthenticationInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyBAAValidation
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyBootstrapDNSAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyConfigAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyDNSAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyMultiHopFallbackNetworkRegistration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyMultiHopNetworkRegistration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyNetworkRegistration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyPolicySerialization
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyPolicyTierMap
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyProxyInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyProxyPathWeight
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyResolverInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxySignedConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxySingleHopFallbackNetworkRegistration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxySingleHopNetworkRegistration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyTokenActivationQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyTokenActivationResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyTokenAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyTokenInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyTokenRegistration
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivacyTokenManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPPrivateRelayIncompatibleNetworkStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProbeHTTPErrorCodeStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProbeStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProber
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProxyAgentNetworkStatistics
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProxyAgentStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProxyAnalytics
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProxyPath
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPProxyTokenInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPQuicProxyPath
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPServiceStatusManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPServiceStatusStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPSwitchEgressProxyStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPToggleStats
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPToken
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPTokenFetchAnalytics
|| __DATA.__objc_data _OBJC_METACLASS_$_NSPUserNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_NSURLSessionDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_PrivacyProxyInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_PrivacyProxyNetworkStatusTime
|| __DATA.__objc_data _OBJC_METACLASS_$_PrivacyProxyServiceStatusTime
|| __DATA.__objc_data _OBJC_METACLASS_$_PrivacyProxyTokenInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTunnel._protocol
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTunnelFlow._hasTunnel
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTunnelFlow._tunnelError
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTuscanyLoopbackConnection._blobSizes
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTuscanyLoopbackConnection._currentInputFrames
|| __DATA.__objc_ivar _OBJC_IVAR_$_NPTuscanyLoopbackConnection._protocol
|| __DATA_CONST.__const __ZTI13NPFrameStream
|| __DATA_CONST.__const __ZTV13NPFrameStream
|| __DATA_CONST.__const _kEdgeSelectionServiceAlpha
|| __DATA_CONST.__const _kEdgeSelectionServiceFairness
|| __DATA_CONST.__const _kEdgeSelectionServiceGoodness
|| __DATA_CONST.__const _kEdgeSelectionServiceIsSelected
|| __DATA_CONST.__const _kEdgeSelectionServiceLastUsedTimestamp
|| __DATA_CONST.__const _kEdgeSelectionServiceNoRTTCount
|| __DATA_CONST.__const _kEdgeSelectionServicePolicyMetric
|| __DATA_CONST.__const _kEdgeSelectionServiceRTT
|| __DATA_CONST.__const _kEdgeSelectionServiceRTTSamples
|| __DATA_CONST.__const _kEdgeSelectionServiceRank
|| __DATA_CONST.__const _kEdgeSelectionServiceRewardSampleMean
|| __DATA_CONST.__const _kEdgeSelectionServiceRewardSamples
|| __DATA_CONST.__const _kEdgeSelectionServiceSelectedEdgeLabel
|| __DATA_CONST.__const _kEdgeSelectionServiceSelectionCount
|| __DATA_CONST.__const _kEdgeSelectionServiceTrialCount
|| __DATA_CONST.__const _kEdgeSelectionServiceWindowSize
|| __DATA_CONST.__const _privacyProxyErrorDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NPUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPAppRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPConfigurationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPControlConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPFlowDivert
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPNetworkAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyAgentManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyLocationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPPrivacyProxyPolicyHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NSPServerClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PrivacyProxyClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PrivacyProxyNetworkStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PrivacyProxyServiceStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NPUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPAppRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPConfigurationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPControlConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPFlowDivert
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPNetworkAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyAgentManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyLocationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPPrivacyProxyPolicyHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NSPServerClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PrivacyProxyClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PrivacyProxyNetworkStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PrivacyProxyServiceStatus
|| __TEXT.__const _NetworkServiceProxyVersionNumber
|| __TEXT.__const _NetworkServiceProxyVersionString
|| __TEXT.__const __ZTS13NPFrameStream
|| __TEXT.__text _NPGetInternalQueue
|| __TEXT.__text _NSPPrivacyProxyAuthenticationInfoReadFrom
|| __TEXT.__text _NSPPrivacyProxyBAAValidationReadFrom
|| __TEXT.__text _NSPPrivacyProxyConfigurationReadFrom
|| __TEXT.__text _NSPPrivacyProxyPolicyReadFrom
|| __TEXT.__text _NSPPrivacyProxyPolicyTierMapReadFrom
|| __TEXT.__text _NSPPrivacyProxyProxyInfoReadFrom
|| __TEXT.__text _NSPPrivacyProxyProxyPathWeightReadFrom
|| __TEXT.__text _NSPPrivacyProxyResolverInfoReadFrom
|| __TEXT.__text _NSPPrivacyProxySignedConfigurationReadFrom
|| __TEXT.__text _NSPPrivacyProxyTokenActivationQueryReadFrom
|| __TEXT.__text _NSPPrivacyProxyTokenActivationResponseReadFrom
|| __TEXT.__text _NSPPrivacyProxyTokenInfoReadFrom
|| __TEXT.__text _NSPResourcesCopyDevicePreferredLocalizations
|| __TEXT.__text _NSPResourcesCopyImageURL
|| __TEXT.__text _NSPResourcesCopyLocalizedDeviceKey
|| __TEXT.__text _NSPResourcesCopyLocalizedNSString
|| __TEXT.__text _NSPResourcesCopyPreferredLanguages
|| __TEXT.__text _NSPResourcesSetPreferredLanguages
|| __TEXT.__text _NetworkServiceProxyEnableForSessionTask
|| __TEXT.__text _NetworkServiceProxyEnableInParameters
|| __TEXT.__text _NetworkServiceProxyGetStatus
|| __TEXT.__text _NetworkServiceProxyIsEnabled
|| __TEXT.__text _NetworkServiceProxySetCurrentConfiguration
|| __TEXT.__text _NetworkServiceProxySetCurrentLocation
|| __TEXT.__text _NetworkServiceProxySetFallbackTimeout
|| __TEXT.__text _NetworkServiceProxySetRemoteAddressMapForSessionTask
|| __TEXT.__text _NetworkServiceProxySetRemoteEndpointsForSessionTask
|| __TEXT.__text _NetworkServiceProxySetServiceNameForConnection
|| __TEXT.__text _NetworkServiceProxySetServiceNameForTask
|| __TEXT.__text _NetworkServiceProxySetServiceNameInParameters
|| __TEXT.__text _NetworkServiceProxyStart
|| __TEXT.__text __ZN13NPFrameStream11initialDataEb
|| __TEXT.__text __ZN13NPFrameStream14amountToBeReadEv
|| __TEXT.__text __ZN13NPFrameStream14handleReadDataEP16nw_frame_array_s
|| __TEXT.__text __ZN13NPFrameStream15logCurrentStateEb
|| __TEXT.__text __ZN13NPFrameStream17takeCurrentPacketEv
|| __TEXT.__text __ZN13NPFrameStream25handleConnectionConnectedEv
|| __TEXT.__text __ZN13NPFrameStream5flushER3AIO
|| __TEXT.__text __ZN13NPFrameStream7disposeEPKcb
|| __TEXT.__text __ZN13NPFrameStreamC2ER3LogR6SocketR10BufferPoolj
|| __TEXT.__text _copyOSBuildString
|| __TEXT.__text _copyOSNameString
|| __TEXT.__text _copyOSVersionString
|| __TEXT.__text _copyProductTypeString
|| __TEXT.__text _copySystemVersionDictionary
|| __TEXT.__text _createMetadataFromProperties
|| __TEXT.__text _createObjectsFromDictionary
|| __TEXT.__text _createPropertiesFromMetaData
|| __TEXT.__text _create_timestamps
|| __TEXT.__text _enable_timestamps
|| __TEXT.__text _geohashToLatitudeLongitude
|| __TEXT.__text _getDesignatedRequirement
|| __TEXT.__text _getRTTFromFrame
|| __TEXT.__text _getServerConnection
|| __TEXT.__text _getSigningIdentifier
|| __TEXT.__text _get_interval_for_mach_times
|| __TEXT.__text _get_nsarray_from_xpc_object
|| __TEXT.__text _get_nsdata_from_xpc_object
|| __TEXT.__text _get_nsdictionary_from_xpc_object
|| __TEXT.__text _hchacha
|| __TEXT.__text _latitudeLongitudeToGeohash
|| __TEXT.__text _logHTTPRequestData
|| __TEXT.__text _myIsEqual
|| __TEXT.__text _np_direct_protocol_get_id
|| __TEXT.__text _np_flow_output_finished
|| __TEXT.__text _np_loopback_protocol_get_id
|| __TEXT.__text _np_tunnel_protocol_get_id
|| __TEXT.__text _nplog_large_obj
|| __TEXT.__text _nplog_obj
|| __TEXT.__text _nsp_print_backtrace
|| __TEXT.__text _serviceNameToID
|| __TEXT.__text _tuscanyClientCreate
|| __TEXT.__text _tuscanyClientCreateFakeDayPass
|| __TEXT.__text _tuscanyClientDestroy
|| __TEXT.__text _tuscanyClientGetAmountToRead
|| __TEXT.__text _tuscanyClientGetDataSize
|| __TEXT.__text _tuscanyClientGetDayPassHostID
|| __TEXT.__text _tuscanyClientGetDayPassOriginAddressString
|| __TEXT.__text _tuscanyClientGetDayPassPortID
|| __TEXT.__text _tuscanyClientGetDayPassSessionCount
|| __TEXT.__text _tuscanyClientGetExceptionCounts
|| __TEXT.__text _tuscanyClientGetHeaderSize
|| __TEXT.__text _tuscanyClientGetInitialData
|| __TEXT.__text _tuscanyClientGetInitialWindowSize
|| __TEXT.__text _tuscanyClientGetMaxDataSendSize
|| __TEXT.__text _tuscanyClientGetMaximumFrameSize
|| __TEXT.__text _tuscanyClientGetNameForException
|| __TEXT.__text _tuscanyClientHandleConnectionConnected
|| __TEXT.__text _tuscanyClientHandleReadData
|| __TEXT.__text _tuscanyClientSendAcknowledge
|| __TEXT.__text _tuscanyClientSendClose
|| __TEXT.__text _tuscanyClientSendData
|| __TEXT.__text _tuscanyClientSendException
|| __TEXT.__text _tuscanyClientSendPing
|| __TEXT.__text _tuscanyClientSetDayPassSessionCount
|| __TEXT.__text _tuscanyClientValidateDayPass
|| __TEXT.__text _tuscanyLoopbackClientCreate
|| __TEXT.__text _tuscanyWindowAddCredits
|| __TEXT.__text _tuscanyWindowCreate
|| __TEXT.__text _tuscanyWindowDestroy
|| __TEXT.__text _tuscanyWindowGetAmountToAck
|| __TEXT.__text _tuscanyWindowGetCredits
__ AuthKit: _OBJC_CLASS_$_AKURLSession
__ CFNetwork: _CFHTTPMessageCopySerializedMessage
__ CFNetwork: _CFHTTPMessageSetHeaderFieldValue
__ CFNetwork: _CFURLRequestCopyHTTPRequest
__ CFNetwork: __kCFStreamPropertyPrefersNoProxy
__ CFNetwork: __kCFStreamPropertyTCPConnectionMetadata
__ CFNetwork: _kCFStreamPropertySSLSettings
__ CFNetwork: _kCFStreamSSLPeerName
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyLocalizationForLocalizationInfo
__ CoreFoundation: _CFBundleCopyLocalizedStringForLocalization
__ CoreFoundation: _CFBundleCreate
__ CoreFoundation: _CFBundleGetLocalizationInfoForLocalization
__ CoreFoundation: _CFCalendarCreateWithIdentifier
__ CoreFoundation: _CFCalendarDecomposeAbsoluteTime
__ CoreFoundation: _CFDateCompare
__ CoreFoundation: _CFDateCreate
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopRemoveSource
__ CoreFoundation: _CFURLCreateFromFileSystemRepresentation
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInputStream
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: __CFCopySystemVersionDictionary
__ CoreFoundation: __CFPreferencesSetFileProtectionClass
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFSystemVersionBuildVersionKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFGregorianCalendar
__ CoreFoundation: _kCFPreferencesCurrentApplication
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreFoundation: _kCFUserNotificationIconURLKey
__ CoreFoundation: _kCFUserNotificationOtherButtonTitleKey
__ CoreLocation: _OBJC_CLASS_$_CLGeocoder
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreLocation: _OBJC_CLASS_$_CLLocationManager
__ CoreLocation: _kCLLocationAccuracyReduced
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreUtils: _SipHash
__ CoreUtils: _chacha20_all_64x64
__ CoreUtils: _chacha20_final
__ CoreUtils: _chacha20_init_64x64
__ CoreUtils: _chacha20_update
__ CoreUtils: _poly1305
__ CryptoKitPrivate: _OBJC_CLASS_$_RSABSSATokenBlinder
__ DeviceIdentity: _DeviceIdentityIsSupported
__ DeviceIdentity: _DeviceIdentityIssueClientCertificateWithCompletion
__ DeviceIdentity: _MobileActivationErrorDomain
__ DeviceIdentity: _kMAOptionsBAADeleteDuplicateKeychainItems
__ DeviceIdentity: _kMAOptionsBAAIgnoreExistingKeychainItems
__ DeviceIdentity: _kMAOptionsBAAKeychainLabel
__ DeviceIdentity: _kMAOptionsBAANetworkTimeoutInterval
__ DeviceIdentity: _kMAOptionsBAAOIDDeviceIdentifiers
__ DeviceIdentity: _kMAOptionsBAAOIDDeviceOSInformation
__ DeviceIdentity: _kMAOptionsBAAOIDSToInclude
__ DeviceIdentity: _kMAOptionsBAASCRTAttestation
__ DeviceIdentity: _kMAOptionsBAAValidity
__ DeviceIdentity: _mobileactivationErrorHasDomainAndErrorCode
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSURLErrorDomain
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHTTPURLResponse
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLCredential
__ Foundation: _OBJC_CLASS_$_NSURLRequest
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Network: _NWNetworkAgentStartOptionClientUUID
__ Network: _OBJC_CLASS_$_NWAddressEndpoint
__ Network: _OBJC_CLASS_$_NWBonjourServiceEndpoint
__ Network: _OBJC_CLASS_$_NWEndpoint
__ Network: _OBJC_CLASS_$_NWHostEndpoint
__ Network: _OBJC_CLASS_$_NWNetworkAgentRegistration
__ Network: _OBJC_CLASS_$_NWParameters
__ Network: _OBJC_CLASS_$_NWPath
__ Network: _OBJC_CLASS_$_NWPathEvaluator
__ Network: _OBJC_CLASS_$_NWResolver
__ Network: _OBJC_CLASS_$_NWTCPConnection
__ Network: _OBJC_CLASS_$_NWUDPSession
__ Network: _OBJC_METACLASS_$_NWEndpoint
__ Network: _OBJC_METACLASS_$_NWResolver
__ NetworkExtension: _OBJC_CLASS_$_NEAppProxyProvider
__ NetworkExtension: _OBJC_CLASS_$_NEAppProxyProviderContainer
__ NetworkExtension: _OBJC_CLASS_$_NEAppProxyUDPFlow
__ NetworkExtension: _OBJC_CLASS_$_NEAppRule
__ NetworkExtension: _OBJC_CLASS_$_NEFileHandleMaintainer
__ NetworkExtension: _OBJC_CLASS_$_NEFlowDivertFileHandle
__ NetworkExtension: _OBJC_CLASS_$_NEHasher
__ NetworkExtension: _OBJC_CLASS_$_NENetworkAgentRegistrationFileHandle
__ NetworkExtension: _OBJC_CLASS_$_NEPolicy
__ NetworkExtension: _OBJC_CLASS_$_NEPolicyCondition
__ NetworkExtension: _OBJC_CLASS_$_NEPolicyResult
__ NetworkExtension: _OBJC_CLASS_$_NEPolicyRouteRule
__ NetworkExtension: _OBJC_CLASS_$_NEPolicySession
__ NetworkExtension: _OBJC_CLASS_$_NEPolicySessionFileHandle
__ NetworkExtension: _OBJC_CLASS_$_NEProcessInfo
__ NetworkExtension: _OBJC_METACLASS_$_NEAppProxyProvider
__ NetworkExtension: _OBJC_METACLASS_$_NEAppProxyProviderContainer
__ NetworkExtension: _OBJC_METACLASS_$_NEAppRule
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterPlaceMark
__ ProtocolBuffer: _PBDataWriterRecallMark
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ ProtocolBuffer: _PBRepeatedInt32Add
__ ProtocolBuffer: _PBRepeatedInt32Clear
__ ProtocolBuffer: _PBRepeatedInt32Copy
__ ProtocolBuffer: _PBRepeatedInt32Hash
__ ProtocolBuffer: _PBRepeatedInt32IsEqual
__ ProtocolBuffer: _PBRepeatedInt32Set
__ ProtocolBuffer: _PBRepeatedUInt32Add
__ ProtocolBuffer: _PBRepeatedUInt32Clear
__ ProtocolBuffer: _PBRepeatedUInt32Copy
__ ProtocolBuffer: _PBRepeatedUInt32Hash
__ ProtocolBuffer: _PBRepeatedUInt32IsEqual
__ ProtocolBuffer: _PBRepeatedUInt32NSArray
__ ProtocolBuffer: _PBRepeatedUInt32Set
__ RTCReporting: _OBJC_CLASS_$_RTCReporting
__ RTCReporting: _kRTCReportingSessionInfoBatchEvent
__ RTCReporting: _kRTCReportingSessionInfoClientType
__ RTCReporting: _kRTCReportingSessionInfoClientVersion
__ RTCReporting: _kRTCReportingSessionInfoContainsRealtimeEvents
__ RTCReporting: _kRTCReportingSessionInfoSessionID
__ RTCReporting: _kRTCReportingUserInfoClientName
__ RTCReporting: _kRTCReportingUserInfoServiceName
__ Security: _SecCertificateCopyData
__ Security: _SecCertificateCopySummaryProperties
__ Security: _SecCertificateCreateWithData
__ Security: _SecCertificateNotValidAfter
__ Security: _SecCertificateNotValidBefore
__ Security: _SecItemAdd
__ Security: _SecItemCopyMatching
__ Security: _SecItemDelete
__ Security: _SecItemUpdate
__ Security: _SecKeyCreateSignature
__ Security: _SecKeyVerifySignature
__ Security: _SecPolicyCreateApplePinned
__ Security: _SecPolicyCreateAppleSSLPinned
__ Security: _SecPolicyCreateRevocation
__ Security: _SecPolicyCreateSSL
__ Security: _SecRandomCopyBytes
__ Security: _SecTaskCopySigningIdentifier
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTrustCopyKey
__ Security: _SecTrustCopyResult
__ Security: _SecTrustCreateWithCertificates
__ Security: _SecTrustEvaluateAsyncWithError
__ Security: _SecTrustGetTrustResult
__ Security: _SecTrustSetPolicies
__ Security: _kSecAttrAccessible
__ Security: _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
__ Security: _kSecAttrAccount
__ Security: _kSecAttrService
__ Security: _kSecClass
__ Security: _kSecClassGenericPassword
__ Security: _kSecKeyAlgorithmECDSASignatureMessageX962SHA256
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitAll
__ Security: _kSecMatchLimitOne
__ Security: _kSecRandomDefault
__ Security: _kSecReturnAttributes
__ Security: _kSecReturnData
__ Security: _kSecTrustExtendedValidation
__ Security: _kSecValueData
__ SymptomDiagnosticReporter: _OBJC_CLASS_$_SDRDiagnosticReporter
__ SymptomDiagnosticReporter: _kSymptomDiagnosticActionProbeDuration
__ SymptomDiagnosticReporter: _kSymptomDiagnosticActionProbePacketCapture
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignatureSubTypeContext
__ UserNotifications: _OBJC_CLASS_$_UNMutableNotificationContent
__ UserNotifications: _OBJC_CLASS_$_UNNotificationRequest
__ UserNotifications: _OBJC_CLASS_$_UNUserNotificationCenter
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _NEHelperCacheClearUUIDs
__ libSystem.B.dylib: _NEHelperCacheCopyAppUUIDMapping
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: __xpc_type_data
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_uuid
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _backtrace
__ libSystem.B.dylib: _backtrace_symbols
__ libSystem.B.dylib: _bind
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _connect
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_data_apply
__ libSystem.B.dylib: _dispatch_data_create
__ libSystem.B.dylib: _dispatch_data_create_concat
__ libSystem.B.dylib: _dispatch_data_create_map
__ libSystem.B.dylib: _dispatch_data_create_subrange
__ libSystem.B.dylib: _dispatch_data_get_size
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dup
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _getnameinfo
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getsockopt
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _getuid
__ libSystem.B.dylib: _if_indextoname
__ libSystem.B.dylib: _inet_ntop
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _kevent
__ libSystem.B.dylib: _listen
__ libSystem.B.dylib: _localtime_r
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _ne_privacy_dns_netagent_id
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _nwi_ifstate_get_flags
__ libSystem.B.dylib: _nwi_ifstate_get_signature
__ libSystem.B.dylib: _nwi_state_copy
__ libSystem.B.dylib: _nwi_state_get_ifstate
__ libSystem.B.dylib: _nwi_state_release
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_allows_internal_security_policies
__ libSystem.B.dylib: _os_variant_has_internal_diagnostics
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _printf
__ libSystem.B.dylib: _proc_name
__ libSystem.B.dylib: _proc_pidinfo
__ libSystem.B.dylib: _proc_pidpath
__ libSystem.B.dylib: _puts
__ libSystem.B.dylib: _recv
__ libSystem.B.dylib: _send
__ libSystem.B.dylib: _sendto
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _shutdown
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: _sprintf
__ libSystem.B.dylib: _strcat
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _uuid_clear
__ libSystem.B.dylib: _uuid_copy
__ libSystem.B.dylib: _uuid_is_null
__ libSystem.B.dylib: _vsnprintf
__ libSystem.B.dylib: _xpc_array_apply
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_get_bytes_ptr
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_data
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_double
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_set_event
__ libSystem.B.dylib: _xpc_uuid_get_bytes
__ libboringssl.dylib: _nw_protocol_boringssl_identifier
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv121__vmi_class_type_infoE
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___cxa_pure_virtual
__ libc++.1.dylib: ___gxx_personality_v0
__ libnetwork.dylib: __nw_connection_send_idempotent_content
__ libnetwork.dylib: __nw_connection_write_idempotent
__ libnetwork.dylib: __nw_content_context_default_stream
__ libnetwork.dylib: _freemptcpinfo
__ libnetwork.dylib: _nw_array_append
__ libnetwork.dylib: _nw_array_create
__ libnetwork.dylib: _nw_array_get_count
__ libnetwork.dylib: _nw_connection_cancel
__ libnetwork.dylib: _nw_connection_copy_metadata
__ libnetwork.dylib: _nw_connection_create
__ libnetwork.dylib: _nw_connection_read_multiple
__ libnetwork.dylib: _nw_connection_receive
__ libnetwork.dylib: _nw_connection_send
__ libnetwork.dylib: _nw_connection_set_cancel_handler
__ libnetwork.dylib: _nw_connection_set_event_handler
__ libnetwork.dylib: _nw_connection_set_queue
__ libnetwork.dylib: _nw_connection_start
__ libnetwork.dylib: _nw_connection_write_multiple
__ libnetwork.dylib: _nw_endpoint_copy_address_string
__ libnetwork.dylib: _nw_endpoint_copy_parent_endpoint
__ libnetwork.dylib: _nw_endpoint_copy_port_string
__ libnetwork.dylib: _nw_endpoint_create_host
__ libnetwork.dylib: _nw_endpoint_create_url
__ libnetwork.dylib: _nw_endpoint_get_address
__ libnetwork.dylib: _nw_endpoint_get_description
__ libnetwork.dylib: _nw_endpoint_get_hostname
__ libnetwork.dylib: _nw_endpoint_get_type
__ libnetwork.dylib: _nw_error_copy_cf_error
__ libnetwork.dylib: _nw_error_get_error_code
__ libnetwork.dylib: _nw_error_get_error_domain
__ libnetwork.dylib: _nw_frame_array_append
__ libnetwork.dylib: _nw_frame_array_first
__ libnetwork.dylib: _nw_frame_array_foreach
__ libnetwork.dylib: _nw_frame_array_init
__ libnetwork.dylib: _nw_frame_array_is_empty
__ libnetwork.dylib: _nw_frame_array_next
__ libnetwork.dylib: _nw_frame_array_remove
__ libnetwork.dylib: _nw_frame_claim
__ libnetwork.dylib: _nw_frame_collapse
__ libnetwork.dylib: _nw_frame_create
__ libnetwork.dylib: _nw_frame_finalize
__ libnetwork.dylib: _nw_frame_get_buffer
__ libnetwork.dylib: _nw_frame_reset
__ libnetwork.dylib: _nw_frame_set_external_data
__ libnetwork.dylib: _nw_frame_unclaim
__ libnetwork.dylib: _nw_frame_unclaimed_bytes
__ libnetwork.dylib: _nw_frame_unclaimed_length
__ libnetwork.dylib: _nw_frame_uses_external_data
__ libnetwork.dylib: _nw_interface_create_with_index
__ libnetwork.dylib: _nw_interface_get_index
__ libnetwork.dylib: _nw_interface_get_name
__ libnetwork.dylib: _nw_interface_get_type
__ libnetwork.dylib: _nw_nat64_copy_prefixes
__ libnetwork.dylib: _nw_nat64_extract_v4
__ libnetwork.dylib: _nw_parameters_copy_context
__ libnetwork.dylib: _nw_parameters_copy_metadata
__ libnetwork.dylib: _nw_parameters_create
__ libnetwork.dylib: _nw_parameters_create_protocol_parameters
__ libnetwork.dylib: _nw_parameters_get_account_id
__ libnetwork.dylib: _nw_parameters_get_data_mode
__ libnetwork.dylib: _nw_parameters_get_effective_bundle_id
__ libnetwork.dylib: _nw_parameters_get_multipath
__ libnetwork.dylib: _nw_parameters_get_multipath_service
__ libnetwork.dylib: _nw_parameters_get_no_delay
__ libnetwork.dylib: _nw_parameters_get_tfo
__ libnetwork.dylib: _nw_parameters_get_tfo_no_cookie
__ libnetwork.dylib: _nw_parameters_get_tls
__ libnetwork.dylib: _nw_parameters_has_initial_data_payload
__ libnetwork.dylib: _nw_parameters_set_account_id
__ libnetwork.dylib: _nw_parameters_set_data_mode
__ libnetwork.dylib: _nw_parameters_set_e_proc_uuid
__ libnetwork.dylib: _nw_parameters_set_indefinite
__ libnetwork.dylib: _nw_parameters_set_metadata
__ libnetwork.dylib: _nw_parameters_set_no_delay
__ libnetwork.dylib: _nw_parameters_set_tfo
__ libnetwork.dylib: _nw_parameters_set_transform_array
__ libnetwork.dylib: _nw_path_copy_interface
__ libnetwork.dylib: _nw_path_get_mtu
__ libnetwork.dylib: _nw_path_has_ipv4
__ libnetwork.dylib: _nw_path_has_ipv6
__ libnetwork.dylib: _nw_protocol_register_extended
__ libnetwork.dylib: _nw_protocol_register_many_to_one
__ libnetwork.dylib: _nw_protocol_register_parameter_modifier
__ libnetwork.dylib: _nw_protocol_remove_instance
__ libnetwork.dylib: _nw_protocol_set_default_one_to_one_callbacks
__ libnetwork.dylib: _nw_protocol_transform_append_protocol
__ libnetwork.dylib: _nw_protocol_transform_create
__ libnetwork.dylib: _nw_protocol_transform_disable_protocol
__ libnetwork.dylib: _nw_protocol_transform_replace_endpoint
__ libnetwork.dylib: _nw_protocol_transform_set_fallback_mode
__ libnetwork.dylib: _nw_protocol_transform_set_multipath_service
__ libnetwork.dylib: _nw_protocol_transform_set_no_path_fallback
__ libnetwork.dylib: _nw_protocol_transform_set_no_proxy
__ libnetwork.dylib: _nw_protocol_transform_set_prohibit_direct
__ libnetwork.dylib: _nw_protocol_transform_set_tfo
__ libnetwork.dylib: _nw_protocol_transform_set_tfo_no_cookie
__ libnetwork.dylib: _nw_protocols_are_equal
__ libnetwork.dylib: _nw_proxy_config_copy_agent_data
__ libnetwork.dylib: _nw_proxy_config_create_default_privacy_proxy
__ libnetwork.dylib: _nw_proxy_config_create_fallback_privacy_proxy
__ libnetwork.dylib: _nw_proxy_config_create_with_agent_data
__ libnetwork.dylib: _nw_proxy_config_get_agent_domain
__ libnetwork.dylib: _nw_proxy_config_get_agent_type
__ libnetwork.dylib: _nw_proxy_config_set_fallback_proxy_agent
__ libnetwork.dylib: _nw_proxy_config_set_is_privacy_proxy
__ libnetwork.dylib: _nw_proxy_hop_add_extra_header
__ libnetwork.dylib: _nw_proxy_hop_add_server_raw_public_key
__ libnetwork.dylib: _nw_proxy_hop_add_token_header
__ libnetwork.dylib: _nw_proxy_hop_create_masque
__ libnetwork.dylib: _nw_queue_cancel_source
__ libnetwork.dylib: _nw_queue_context_async
__ libnetwork.dylib: _nw_queue_context_create_source
__ libnetwork.dylib: _nw_queue_resume_source
__ libnetwork.dylib: _nw_queue_set_timer_values
__ libnetwork.dylib: _nw_resolver_config_copy_plist_data
__ libnetwork.dylib: _nw_resolver_config_create
__ libnetwork.dylib: _nw_resolver_config_set_allow_failover
__ libnetwork.dylib: _nw_resolver_config_set_class
__ libnetwork.dylib: _nw_resolver_config_set_odoh_config
__ libnetwork.dylib: _nw_resolver_config_set_protocol
__ libnetwork.dylib: _nw_resolver_config_set_provider_name
__ libnetwork.dylib: _nw_resolver_config_set_provider_path
__ libnetwork.dylib: _nw_resolver_config_set_proxy_agent
__ libnetwork.dylib: _nw_settings_get_ddr_enabled
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
NSPPrivacyProxyResolverInfo : PBCodable <NSCopying>
 @property  BOOL hasDohURL
 @property  NSString *dohURL
 @property  BOOL hasObliviousDoHConfig
 @property  NSData *obliviousDoHConfig
 @property  BOOL hasWeight
 @property  unsigned int weight

  // instance methods
  -[NSPPrivacyProxyResolverInfo setWeight:]
  -[NSPPrivacyProxyResolverInfo mergeFrom:]
  -[NSPPrivacyProxyResolverInfo weight]
  -[NSPPrivacyProxyResolverInfo .cxx_destruct]
  -[NSPPrivacyProxyResolverInfo dictionaryRepresentation]
  -[NSPPrivacyProxyResolverInfo writeTo:]
  -[NSPPrivacyProxyResolverInfo hasDohURL]
  -[NSPPrivacyProxyResolverInfo isEqual:]
  -[NSPPrivacyProxyResolverInfo copyTo:]
  -[NSPPrivacyProxyResolverInfo dohURL]
  -[NSPPrivacyProxyResolverInfo readFrom:]
  -[NSPPrivacyProxyResolverInfo setDohURL:]
  -[NSPPrivacyProxyResolverInfo hasWeight]
  -[NSPPrivacyProxyResolverInfo copyWithZone:]
  -[NSPPrivacyProxyResolverInfo obliviousDoHConfig]
  -[NSPPrivacyProxyResolverInfo hasObliviousDoHConfig]
  -[NSPPrivacyProxyResolverInfo setHasWeight:]
  -[NSPPrivacyProxyResolverInfo setObliviousDoHConfig:]


NSPPrivacyProxyPolicyHandler : NSObject
 @property  NSPPrivacyProxyPolicy *policy
 @property  NEPolicySession *session
 @property  NEFlowDivertFileHandle *flowDivertHandle
 @property  NSString *ingressProxyURL
 @property  NSString *ingressFallbackProxyURL
 @property  NSArray *captivePluginBundleIDs
 @property  NSMutableArray *mainPolicyIDs
 @property  NSMutableSet *disabledInterfaces
 @property  BOOL wifiDisabled
 @property  BOOL cellularDisabled
 @property  NSMutableArray *interfacePolicyIDs
 @property  NSMutableArray *safariTechnologyPreviewPolicyIDs
 @property  NSMutableArray *safariBundlePolicyIDs
 @property  NSMutableArray *mailAppPolicyIDs
 @property  NSMutableArray *probePolicyIDs
 @property  NSMutableDictionary *domainFilterPolicyIDs
 @property  NSMutableDictionary *domainFilterIDs

  // class methods
  +[NSPPrivacyProxyPolicyHandler sharedHandler]

  // instance methods
  -[NSPPrivacyProxyPolicyHandler removePoliciesForSafariTechPreviewApp]
  -[NSPPrivacyProxyPolicyHandler removePoliciesForProbing]
  -[NSPPrivacyProxyPolicyHandler interfacePolicyIDs]
  -[NSPPrivacyProxyPolicyHandler mailAppPolicyIDs]
  -[NSPPrivacyProxyPolicyHandler machOUUIDsForBundleIdentifiers:]
  -[NSPPrivacyProxyPolicyHandler addPoliciesForSafariAppBundle]
  -[NSPPrivacyProxyPolicyHandler .cxx_destruct]
  -[NSPPrivacyProxyPolicyHandler addPoliciesForProbing]
  -[NSPPrivacyProxyPolicyHandler setMainPolicyIDs:]
  -[NSPPrivacyProxyPolicyHandler setWifiDisabled:]
  -[NSPPrivacyProxyPolicyHandler setPolicy:]
  -[NSPPrivacyProxyPolicyHandler createPolicySession]
  -[NSPPrivacyProxyPolicyHandler removePreferredProxy:apply:]
  -[NSPPrivacyProxyPolicyHandler replaceDisabledInterfaces:]
  -[NSPPrivacyProxyPolicyHandler remove]
  -[NSPPrivacyProxyPolicyHandler resetExceptionInterfacePolicy]
  -[NSPPrivacyProxyPolicyHandler addPoliciesForSafariTechPreviewApp]
  -[NSPPrivacyProxyPolicyHandler setMailAppPolicyIDs:]
  -[NSPPrivacyProxyPolicyHandler setSession:]
  -[NSPPrivacyProxyPolicyHandler removeMainPolicies]
  -[NSPPrivacyProxyPolicyHandler removePoliciesForMailApp]
  -[NSPPrivacyProxyPolicyHandler policy]
  -[NSPPrivacyProxyPolicyHandler addPolicies]
  -[NSPPrivacyProxyPolicyHandler disabledInterfaces]
  -[NSPPrivacyProxyPolicyHandler init]
  -[NSPPrivacyProxyPolicyHandler setProbePolicyIDs:]
  -[NSPPrivacyProxyPolicyHandler set:flowDivertHandle:ingressProxyURL:ingressFallbackProxyURL:captivePluginBundleIDs:]
  -[NSPPrivacyProxyPolicyHandler interface:disabled:]
  -[NSPPrivacyProxyPolicyHandler removePoliciesForSafariAppBundle]
  -[NSPPrivacyProxyPolicyHandler handleAppUninstallation:]
  -[NSPPrivacyProxyPolicyHandler domainFilterPolicyIDs]
  -[NSPPrivacyProxyPolicyHandler setIngressProxyURL:]
  -[NSPPrivacyProxyPolicyHandler setCellularDisabled:]
  -[NSPPrivacyProxyPolicyHandler ingressFallbackProxyURL]
  -[NSPPrivacyProxyPolicyHandler addPreferredProxy:agentUUID:withDomainFilter:]
  -[NSPPrivacyProxyPolicyHandler currentPolicy]
  -[NSPPrivacyProxyPolicyHandler isAppInstalled:]
  -[NSPPrivacyProxyPolicyHandler safariBundlePolicyIDs]
  -[NSPPrivacyProxyPolicyHandler captivePluginBundleIDs]
  -[NSPPrivacyProxyPolicyHandler cellularDisabled]
  -[NSPPrivacyProxyPolicyHandler removeDomainFilters]
  -[NSPPrivacyProxyPolicyHandler setSafariBundlePolicyIDs:]
  -[NSPPrivacyProxyPolicyHandler setInterfacePolicyIDs:]
  -[NSPPrivacyProxyPolicyHandler destroyPolicySession]
  -[NSPPrivacyProxyPolicyHandler setIngressFallbackProxyURL:]
  -[NSPPrivacyProxyPolicyHandler domainFilterIDs]
  -[NSPPrivacyProxyPolicyHandler ingressProxyURL]
  -[NSPPrivacyProxyPolicyHandler wifiDisabled:]
  -[NSPPrivacyProxyPolicyHandler wifiDisabled]
  -[NSPPrivacyProxyPolicyHandler handleAppInstallation:]
  -[NSPPrivacyProxyPolicyHandler setFlowDivertHandle:]
  -[NSPPrivacyProxyPolicyHandler addPoliciesForMailApp]
  -[NSPPrivacyProxyPolicyHandler invalidate]
  -[NSPPrivacyProxyPolicyHandler probePolicyIDs]
  -[NSPPrivacyProxyPolicyHandler setCaptivePluginBundleIDs:]
  -[NSPPrivacyProxyPolicyHandler mainPolicyIDs]
  -[NSPPrivacyProxyPolicyHandler setDomainFilterPolicyIDs:]
  -[NSPPrivacyProxyPolicyHandler cellularDisabled:]
  -[NSPPrivacyProxyPolicyHandler setDisabledInterfaces:]
  -[NSPPrivacyProxyPolicyHandler setSafariTechnologyPreviewPolicyIDs:]
  -[NSPPrivacyProxyPolicyHandler session]
  -[NSPPrivacyProxyPolicyHandler flowDivertHandle]
  -[NSPPrivacyProxyPolicyHandler setDomainFilterIDs:]
  -[NSPPrivacyProxyPolicyHandler safariTechnologyPreviewPolicyIDs]


NSPPrivacyProxyTokenActivationQuery : PBCodable <NSCopying>
 @property  int authType
 @property  BOOL hasBaaParameters
 @property  NSPPrivacyProxyBAAValidation *baaParameters
 @property  NSPPrivacyProxyTokenInfo *tokenInfo

  // instance methods
  -[NSPPrivacyProxyTokenActivationQuery baaParameters]
  -[NSPPrivacyProxyTokenActivationQuery mergeFrom:]
  -[NSPPrivacyProxyTokenActivationQuery hasBaaParameters]
  -[NSPPrivacyProxyTokenActivationQuery setAuthType:]
  -[NSPPrivacyProxyTokenActivationQuery .cxx_destruct]
  -[NSPPrivacyProxyTokenActivationQuery dictionaryRepresentation]
  -[NSPPrivacyProxyTokenActivationQuery writeTo:]
  -[NSPPrivacyProxyTokenActivationQuery StringAsAuthType:]
  -[NSPPrivacyProxyTokenActivationQuery setTokenInfo:]
  -[NSPPrivacyProxyTokenActivationQuery isEqual:]
  -[NSPPrivacyProxyTokenActivationQuery copyTo:]
  -[NSPPrivacyProxyTokenActivationQuery readFrom:]
  -[NSPPrivacyProxyTokenActivationQuery tokenInfo]
  -[NSPPrivacyProxyTokenActivationQuery authTypeAsString:]
  -[NSPPrivacyProxyTokenActivationQuery copyWithZone:]
  -[NSPPrivacyProxyTokenActivationQuery authType]
  -[NSPPrivacyProxyTokenActivationQuery setBaaParameters:]


EdgeSelection : NSObject <NSSecureCoding>
 @property  NSMutableDictionary *edgeAttributesDict
 @property  NSData *networkSignature
 @property  NSNumber *interfaceType
 @property  long long trialCount
 @property  double alpha
 @property  long long windowSize

  // class methods
  +[EdgeSelection supportsSecureCoding]

  // instance methods
  -[EdgeSelection setInterfaceType:]
  -[EdgeSelection interfaceType]
  -[EdgeSelection initWithCoder:]
  -[EdgeSelection .cxx_destruct]
  -[EdgeSelection setNetworkSignature:]
  -[EdgeSelection setAlpha:]
  -[EdgeSelection networkSignature]
  -[EdgeSelection setWindowSize:]
  -[EdgeSelection alpha]
  -[EdgeSelection windowSize]
  -[EdgeSelection encodeWithCoder:]
  -[EdgeSelection trialCount]
  -[EdgeSelection edgeAttributesDict]
  -[EdgeSelection _stochasticRewardFromRTT:]
  -[EdgeSelection setTrialCount:]
  -[EdgeSelection initWithNetworkSignature:interfaceType:modelParams:]
  -[EdgeSelection trainEdgeSelectionModel:reply:]
  -[EdgeSelection getMinimumLatencyEdge:]
  -[EdgeSelection getAttributesForEdge:reply:]
  -[EdgeSelection setEdgeAttributesDict:]


NPUsageReport : NSObject <NSSecureCoding>
 @property  NSString *signingIdentifier
 @property  long long fallbackReason
 @property  NSUUID *dayPassUUID
 @property  unsigned long rtt
 @property  NSString *geohash
 @property  unsigned char addressFamily
 @property  unsigned int edgeIndex
 @property  unsigned int keybagGeneration
 @property  unsigned int waldoTimestamp

  // class methods
  +[NPUsageReport supportsSecureCoding]

  // instance methods
  -[NPUsageReport rtt]
  -[NPUsageReport geohash]
  -[NPUsageReport initWithCoder:]
  -[NPUsageReport .cxx_destruct]
  -[NPUsageReport setGeohash:]
  -[NPUsageReport signingIdentifier]
  -[NPUsageReport fallbackReason]
  -[NPUsageReport setRtt:]
  -[NPUsageReport addressFamily]
  -[NPUsageReport encodeWithCoder:]
  -[NPUsageReport setAddressFamily:]
  -[NPUsageReport edgeIndex]
  -[NPUsageReport initWithSigningIdentifier:fallbackReason:]
  -[NPUsageReport dayPassUUID]
  -[NPUsageReport setDayPassUUID:]
  -[NPUsageReport setEdgeIndex:]
  -[NPUsageReport keybagGeneration]
  -[NPUsageReport setKeybagGeneration:]
  -[NPUsageReport waldoTimestamp]
  -[NPUsageReport setWaldoTimestamp:]


NSPUserNotification : NSObject
 @property  id notification
 @property  id notificationSource
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  @? callback

  // class methods
  +[NSPUserNotification executeOnMainLoop:]
  +[NSPUserNotification cancelCurrentNotificationWithDefaultResponse:queue:completionHandler:]
  +[NSPUserNotification showNotificationWithHeader:message:actionURL:callbackQueue:callbackHandler:]

  // instance methods
  -[NSPUserNotification notification]
  -[NSPUserNotification setCallback:]
  -[NSPUserNotification callback]
  -[NSPUserNotification .cxx_destruct]
  -[NSPUserNotification callbackQueue]
  -[NSPUserNotification setNotification:]
  -[NSPUserNotification setCallbackQueue:]
  -[NSPUserNotification postNotificationWithCallbackQueue:callbackHandler:]
  -[NSPUserNotification cancel]
  -[NSPUserNotification notificationSource]
  -[NSPUserNotification setNotificationSource:]
  -[NSPUserNotification initAndShowAlertWithHeader:message:alternateMessage:defaultMessage:iconName:noBoldDefault:callbackQueue:callbackHandler:]


NPTunnelFlowUDP : NPTunnelFlowProtocol
 @property  NSMutableArray *savedDirectData
 @property  unsigned long savedDataSize
 @property  NWUDPSession *directSession
 @property  NSDate *firstPacketDate
 @property  NWEndpoint *remoteEndpoint

  // instance methods
  -[NPTunnelFlowUDP .cxx_destruct]
  -[NPTunnelFlowUDP remoteEndpoint]
  -[NPTunnelFlowUDP observeValueForKeyPath:ofObject:change:context:]
  -[NPTunnelFlowUDP initWithTunnel:appRule:inputProtocol:extraProperties:]
  -[NPTunnelFlowUDP setFirstPacketDate:]
  -[NPTunnelFlowUDP handleAppData:]
  -[NPTunnelFlowUDP sendDataOnDirectSession:]
  -[NPTunnelFlowUDP setDirectSession:]
  -[NPTunnelFlowUDP directSession]
  -[NPTunnelFlowUDP setSavedDirectData:]
  -[NPTunnelFlowUDP handleIncomingData:andError:]
  -[NPTunnelFlowUDP savedDirectData]
  -[NPTunnelFlowUDP savedDataSize]
  -[NPTunnelFlowUDP setSavedDataSize:]
  -[NPTunnelFlowUDP startHandlingIncomingData]
  -[NPTunnelFlowUDP startDirectConnection]
  -[NPTunnelFlowUDP stopDirectConnection]
  -[NPTunnelFlowUDP firstPacketDate]


NSPPrivacyProxySignedConfiguration : PBCodable <NSCopying>
 @property  NSPPrivacyProxyConfiguration *configuration
 @property  NSData *signature
 @property  NSMutableArray *certificates
 @property  BOOL hasAlgorithm
 @property  int algorithm

  // class methods
  +[NSPPrivacyProxySignedConfiguration certificatesType]

  // instance methods
  -[NSPPrivacyProxySignedConfiguration certificates]
  -[NSPPrivacyProxySignedConfiguration setCertificates:]
  -[NSPPrivacyProxySignedConfiguration algorithm]
  -[NSPPrivacyProxySignedConfiguration mergeFrom:]
  -[NSPPrivacyProxySignedConfiguration addCertificates:]
  -[NSPPrivacyProxySignedConfiguration certificatesCount]
  -[NSPPrivacyProxySignedConfiguration clearCertificates]
  -[NSPPrivacyProxySignedConfiguration certificatesAtIndex:]
  -[NSPPrivacyProxySignedConfiguration setSignature:]
  -[NSPPrivacyProxySignedConfiguration algorithmAsString:]
  -[NSPPrivacyProxySignedConfiguration configuration]
  -[NSPPrivacyProxySignedConfiguration setAlgorithm:]
  -[NSPPrivacyProxySignedConfiguration .cxx_destruct]
  -[NSPPrivacyProxySignedConfiguration setHasAlgorithm:]
  -[NSPPrivacyProxySignedConfiguration dictionaryRepresentation]
  -[NSPPrivacyProxySignedConfiguration writeTo:]
  -[NSPPrivacyProxySignedConfiguration StringAsAlgorithm:]
  -[NSPPrivacyProxySignedConfiguration hasAlgorithm]
  -[NSPPrivacyProxySignedConfiguration isEqual:]
  -[NSPPrivacyProxySignedConfiguration copyTo:]
  -[NSPPrivacyProxySignedConfiguration readFrom:]
  -[NSPPrivacyProxySignedConfiguration signature]
  -[NSPPrivacyProxySignedConfiguration copyWithZone:]
  -[NSPPrivacyProxySignedConfiguration setConfiguration:]


NPTuscanyLoopbackConnection : NSObject
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} protocol
 @property  unsigned long currentBlobSizeIndex
 @property  BOOL waitingForOutput

  // instance methods
  -[NPTuscanyLoopbackConnection currentBlobSizeIndex]
  -[NPTuscanyLoopbackConnection setCurrentBlobSizeIndex:]
  -[NPTuscanyLoopbackConnection handleDetachedFromProtocol]
  -[NPTuscanyLoopbackConnection addOutputFramesToArray:maximumBytes:minimumBytes:maximumFrameCount:]
  -[NPTuscanyLoopbackConnection addInputFramesToArray:maximumBytes:minimumBytes:maximumFrameCount:]
  -[NPTuscanyLoopbackConnection handleOutputFrame:]
  -[NPTuscanyLoopbackConnection notifyInputHandler]
  -[NPTuscanyLoopbackConnection init]
  -[NPTuscanyLoopbackConnection dealloc]
  -[NPTuscanyLoopbackConnection protocol]
  -[NPTuscanyLoopbackConnection waitingForOutput]
  -[NPTuscanyLoopbackConnection setWaitingForOutput:]


NPTunnelTuscanyLoopback : NPTunnelTuscany
 @property  ^v window
 @property  NPTunnelFlow *flow

  // instance methods
  -[NPTunnelTuscanyLoopback initialWindowSize]
  -[NPTunnelTuscanyLoopback setWindow:]
  -[NPTunnelTuscanyLoopback write:]
  -[NPTunnelTuscanyLoopback flow]
  -[NPTunnelTuscanyLoopback .cxx_destruct]
  -[NPTunnelTuscanyLoopback setFlow:]
  -[NPTunnelTuscanyLoopback dealloc]
  -[NPTunnelTuscanyLoopback window]
  -[NPTunnelTuscanyLoopback removeFlow:]
  -[NPTunnelTuscanyLoopback cancelConnection]
  -[NPTunnelTuscanyLoopback maxFrameSize]
  -[NPTunnelTuscanyLoopback initWithEndpoint:parameters:appRule:flowProperties:onRamp:delegate:]
  -[NPTunnelTuscanyLoopback addNewFlow:]
  -[NPTunnelTuscanyLoopback createTuscanyClient]
  -[NPTunnelTuscanyLoopback dayPassSessionCounter]
  -[NPTunnelTuscanyLoopback currentMTU]
  -[NPTunnelTuscanyLoopback selectBestEdge]
  -[NPTunnelTuscanyLoopback startConnectionTimer]
  -[NPTunnelTuscanyLoopback cancelConnectionTimer]
  -[NPTunnelTuscanyLoopback sendUsageReportWithRTT:geohash:fallbackReason:]
  -[NPTunnelTuscanyLoopback pingWithCompletionHandler:]


NPTunnelFlowDNS : NPTunnelFlowUDP
 @property  NSPDNSPacket *query
 @property  long long tunnelResult
 @property  NSPDNSPacket *tunnelDNSResponse
 @property  long long directResult
 @property  NSPDNSPacket *directDNSResponse
 @property  ^v tunnelResponseTimer
 @property  BOOL telemetryReported

  // instance methods
  -[NPTunnelFlowDNS setQuery:]
  -[NPTunnelFlowDNS query]
  -[NPTunnelFlowDNS .cxx_destruct]
  -[NPTunnelFlowDNS handleAppData:]
  -[NPTunnelFlowDNS sendDataToClient:fromTunnel:]
  -[NPTunnelFlowDNS closeFromDirectConnectionWithError:]
  -[NPTunnelFlowDNS shouldSendDataToClient:fromTunnel:]
  -[NPTunnelFlowDNS tunnelResult]
  -[NPTunnelFlowDNS setTunnelDNSResponse:]
  -[NPTunnelFlowDNS tunnelDNSResponse]
  -[NPTunnelFlowDNS setTunnelResult:]
  -[NPTunnelFlowDNS tunnelResponseTimer]
  -[NPTunnelFlowDNS setTunnelResponseTimer:]
  -[NPTunnelFlowDNS directResult]
  -[NPTunnelFlowDNS setDirectDNSResponse:]
  -[NPTunnelFlowDNS directDNSResponse]
  -[NPTunnelFlowDNS setDirectResult:]
  -[NPTunnelFlowDNS checkAndReportTelemetry]
  -[NPTunnelFlowDNS closeFromTunnel]
  -[NPTunnelFlowDNS telemetryReported]
  -[NPTunnelFlowDNS setTelemetryReported:]
  -[NPTunnelFlowDNS addDNSInfoToTelemetry:]
  -[NPTunnelFlowDNS resultToString:]
  -[NPTunnelFlowDNS createStateDictionaryWithResult:response:]
  -[NPTunnelFlowDNS handleTunnelConnected]
  -[NPTunnelFlowDNS cleanupLosingConnection:]


NSPPrivacyProxyConfiguration : PBCodable <NSCopying>
 @property  unsigned int version
 @property  BOOL hasEnabled
 @property  BOOL enabled
 @property  BOOL hasDisableUntil
 @property  unsigned long disableUntil
 @property  NSPPrivacyProxyAuthenticationInfo *authInfo
 @property  NSMutableArray *policyTierMaps
 @property  NSMutableArray *proxies
 @property  NSMutableArray *pathWeights
 @property  NSMutableArray *resolvers
 @property  unsigned int maxTokenNum
 @property  NSMutableArray *fallbackPathWeights
 @property  BOOL hasRegionId
 @property  NSString *regionId
 @property  BOOL hasBootstrapResolver
 @property  NSPPrivacyProxyResolverInfo *bootstrapResolver
 @property  BOOL hasDnsProbe
 @property  NSString *dnsProbe

  // class methods
  +[NSPPrivacyProxyConfiguration pathWeightsType]
  +[NSPPrivacyProxyConfiguration policyTierMapType]
  +[NSPPrivacyProxyConfiguration proxiesType]
  +[NSPPrivacyProxyConfiguration resolversType]
  +[NSPPrivacyProxyConfiguration fallbackPathWeightsType]

  // instance methods
  -[NSPPrivacyProxyConfiguration addProxies:]
  -[NSPPrivacyProxyConfiguration resolvers]
  -[NSPPrivacyProxyConfiguration resolversAtIndex:]
  -[NSPPrivacyProxyConfiguration hasRegionId]
  -[NSPPrivacyProxyConfiguration mergeFrom:]
  -[NSPPrivacyProxyConfiguration setFallbackPathWeights:]
  -[NSPPrivacyProxyConfiguration dnsProbe]
  -[NSPPrivacyProxyConfiguration proxiesCount]
  -[NSPPrivacyProxyConfiguration setRegionId:]
  -[NSPPrivacyProxyConfiguration setDisableUntil:]
  -[NSPPrivacyProxyConfiguration pathWeightsCount]
  -[NSPPrivacyProxyConfiguration hasDnsProbe]
  -[NSPPrivacyProxyConfiguration policyTierMaps]
  -[NSPPrivacyProxyConfiguration authInfo]
  -[NSPPrivacyProxyConfiguration .cxx_destruct]
  -[NSPPrivacyProxyConfiguration clearResolvers]
  -[NSPPrivacyProxyConfiguration setHasDisableUntil:]
  -[NSPPrivacyProxyConfiguration policyTierMapsCount]
  -[NSPPrivacyProxyConfiguration dictionaryRepresentation]
  -[NSPPrivacyProxyConfiguration fallbackPathWeightsAtIndex:]
  -[NSPPrivacyProxyConfiguration writeTo:]
  -[NSPPrivacyProxyConfiguration enabled]
  -[NSPPrivacyProxyConfiguration clearFallbackPathWeights]
  -[NSPPrivacyProxyConfiguration setVersion:]
  -[NSPPrivacyProxyConfiguration isEqual:]
  -[NSPPrivacyProxyConfiguration copyTo:]
  -[NSPPrivacyProxyConfiguration disableUntil]
  -[NSPPrivacyProxyConfiguration readFrom:]
  -[NSPPrivacyProxyConfiguration bootstrapResolver]
  -[NSPPrivacyProxyConfiguration addFallbackPathWeights:]
  -[NSPPrivacyProxyConfiguration setHasEnabled:]
  -[NSPPrivacyProxyConfiguration setProxies:]
  -[NSPPrivacyProxyConfiguration hasDisableUntil]
  -[NSPPrivacyProxyConfiguration regionId]
  -[NSPPrivacyProxyConfiguration proxies]
  -[NSPPrivacyProxyConfiguration resolversCount]
  -[NSPPrivacyProxyConfiguration addPathWeights:]
  -[NSPPrivacyProxyConfiguration clearPathWeights]
  -[NSPPrivacyProxyConfiguration clearPolicyTierMaps]
  -[NSPPrivacyProxyConfiguration setBootstrapResolver:]
  -[NSPPrivacyProxyConfiguration setDnsProbe:]
  -[NSPPrivacyProxyConfiguration pathWeightsAtIndex:]
  -[NSPPrivacyProxyConfiguration addResolvers:]
  -[NSPPrivacyProxyConfiguration version]
  -[NSPPrivacyProxyConfiguration setMaxTokenNum:]
  -[NSPPrivacyProxyConfiguration fallbackPathWeightsCount]
  -[NSPPrivacyProxyConfiguration maxTokenNum]
  -[NSPPrivacyProxyConfiguration hasEnabled]
  -[NSPPrivacyProxyConfiguration setResolvers:]
  -[NSPPrivacyProxyConfiguration pathWeights]
  -[NSPPrivacyProxyConfiguration fallbackPathWeights]
  -[NSPPrivacyProxyConfiguration copyWithZone:]
  -[NSPPrivacyProxyConfiguration setPolicyTierMaps:]
  -[NSPPrivacyProxyConfiguration proxiesAtIndex:]
  -[NSPPrivacyProxyConfiguration setEnabled:]
  -[NSPPrivacyProxyConfiguration addPolicyTierMap:]
  -[NSPPrivacyProxyConfiguration policyTierMapAtIndex:]
  -[NSPPrivacyProxyConfiguration setPathWeights:]
  -[NSPPrivacyProxyConfiguration clearProxies]
  -[NSPPrivacyProxyConfiguration hasBootstrapResolver]
  -[NSPPrivacyProxyConfiguration setAuthInfo:]


NPEdgeSelection : EdgeSelection
 @property  NSString *bestEdge
 @property  unsigned long bestEdgeRTT
 @property  unsigned long bestEdgeProbedRTT
 @property  NSString *nextBestEdge
 @property  unsigned long nextBestEdgeRTT
 @property  NSDate *probeDate
 @property  NPWaldo *waldoInfo

  // class methods
  +[NPEdgeSelection supportsSecureCoding]

  // instance methods
  -[NPEdgeSelection initWithCoder:]
  -[NPEdgeSelection .cxx_destruct]
  -[NPEdgeSelection encodeWithCoder:]
  -[NPEdgeSelection bestEdge]
  -[NPEdgeSelection bestEdgeRTT]
  -[NPEdgeSelection bestEdgeProbedRTT]
  -[NPEdgeSelection nextBestEdge]
  -[NPEdgeSelection nextBestEdgeRTT]
  -[NPEdgeSelection trainEdgeSelection:edgeRank:rtt:]
  -[NPEdgeSelection setNextBestEdge:]
  -[NPEdgeSelection setNextBestEdgeRTT:]
  -[NPEdgeSelection waldoInfo]
  -[NPEdgeSelection getBestEdgeFromEdgeSelection]
  -[NPEdgeSelection shouldProbeForEdgeSelection:edgeRank:edgeIndex:bestEdgeLabel:]
  -[NPEdgeSelection setBestEdge:]
  -[NPEdgeSelection setBestEdgeRTT:]
  -[NPEdgeSelection setBestEdgeProbedRTT:]
  -[NPEdgeSelection probeDate]
  -[NPEdgeSelection setProbeDate:]
  -[NPEdgeSelection initWithWaldo:signature:interfaceType:]
  -[NPEdgeSelection updateEdgeSelection:]
  -[NPEdgeSelection copyEdgeSelectionTelemetry]
  -[NPEdgeSelection setWaldoInfo:]


NPResolver : NWResolver
 @property  @? resolveCompletionHandler
 @property  NSObject<OS_dispatch_source> *resolveTimer

  // instance methods
  -[NPResolver .cxx_destruct]
  -[NPResolver observeValueForKeyPath:ofObject:change:context:]
  -[NPResolver resolveWithCompletionHandler:]
  -[NPResolver setResolveTimer:]
  -[NPResolver resolveTimer]
  -[NPResolver resolveCompletionHandler]
  -[NPResolver setResolveCompletionHandler:]


NPDirectFlow : NSObject
 @property  NSNumber *identifier
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} protocol
 @property  NSPConnectionInfo *connectionInfo
 @property  NSDate *startDate
 @property  NSDate *connectionStartDate
 @property  NSDate *firstTxByteTimestamp

  // class methods
  +[NPDirectFlow initializeProtocol]

  // instance methods
  -[NPDirectFlow handleDetachedFromProtocol]
  -[NPDirectFlow .cxx_destruct]
  -[NPDirectFlow connectionInfo]
  -[NPDirectFlow identifier]
  -[NPDirectFlow initWithParameters:]
  -[NPDirectFlow startDate]
  -[NPDirectFlow setConnectionInfo:]
  -[NPDirectFlow protocol]
  -[NPDirectFlow firstTxByteTimestamp]
  -[NPDirectFlow connectionStartDate]
  -[NPDirectFlow createConnectionInfo]
  -[NPDirectFlow setConnectionStartDate:]
  -[NPDirectFlow setFirstTxByteTimestamp:]


PrivacyProxyNetworkStatus : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned long networkStatus
 @property  int networkType
 @property  NSString *networkName

  // class methods
  +[PrivacyProxyNetworkStatus supportsSecureCoding]

  // instance methods
  -[PrivacyProxyNetworkStatus setNetworkType:]
  -[PrivacyProxyNetworkStatus setNetworkName:]
  -[PrivacyProxyNetworkStatus networkType]
  -[PrivacyProxyNetworkStatus descriptionWithIndent:options:]
  -[PrivacyProxyNetworkStatus initWithCoder:]
  -[PrivacyProxyNetworkStatus .cxx_destruct]
  -[PrivacyProxyNetworkStatus initWithStatus:type:name:]
  -[PrivacyProxyNetworkStatus networkTypeString]
  -[PrivacyProxyNetworkStatus setNetworkStatus:]
  -[PrivacyProxyNetworkStatus serialize]
  -[PrivacyProxyNetworkStatus initWithData:]
  -[PrivacyProxyNetworkStatus networkStatusString]
  -[PrivacyProxyNetworkStatus copyWithZone:]
  -[PrivacyProxyNetworkStatus networkName]
  -[PrivacyProxyNetworkStatus networkStatus]
  -[PrivacyProxyNetworkStatus encodeWithCoder:]


PrivacyProxyServiceStatus : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned long serviceStatus
 @property  NSArray *networkStatuses
 @property  NSDictionary *details

  // class methods
  +[PrivacyProxyServiceStatus supportsSecureCoding]
  +[PrivacyProxyServiceStatus serviceStatusString:]

  // instance methods
  -[PrivacyProxyServiceStatus descriptionWithIndent:options:]
  -[PrivacyProxyServiceStatus initWithCoder:]
  -[PrivacyProxyServiceStatus .cxx_destruct]
  -[PrivacyProxyServiceStatus setDetails:]
  -[PrivacyProxyServiceStatus serviceStatus]
  -[PrivacyProxyServiceStatus setServiceStatus:]
  -[PrivacyProxyServiceStatus serialize]
  -[PrivacyProxyServiceStatus initWithData:]
  -[PrivacyProxyServiceStatus details]
  -[PrivacyProxyServiceStatus setNetworkStatuses:]
  -[PrivacyProxyServiceStatus copyWithZone:]
  -[PrivacyProxyServiceStatus networkStatuses]
  -[PrivacyProxyServiceStatus encodeWithCoder:]


PrivacyProxyServiceStatusTime : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned long serviceStatus
 @property  NSDate *serviceStatusStartTime
 @property  NSDate *serviceStatusEndTime

  // class methods
  +[PrivacyProxyServiceStatusTime supportsSecureCoding]

  // instance methods
  -[PrivacyProxyServiceStatusTime descriptionWithIndent:options:]
  -[PrivacyProxyServiceStatusTime initWithCoder:]
  -[PrivacyProxyServiceStatusTime serviceStatusStartTime]
  -[PrivacyProxyServiceStatusTime .cxx_destruct]
  -[PrivacyProxyServiceStatusTime serviceStatus]
  -[PrivacyProxyServiceStatusTime setServiceStatusStartTime:]
  -[PrivacyProxyServiceStatusTime setServiceStatus:]
  -[PrivacyProxyServiceStatusTime serviceStatusEndTime]
  -[PrivacyProxyServiceStatusTime copyWithZone:]
  -[PrivacyProxyServiceStatusTime diagnostics]
  -[PrivacyProxyServiceStatusTime encodeWithCoder:]
  -[PrivacyProxyServiceStatusTime setServiceStatusEndTime:]


NPTunnelTuscanyEndpoint : NWEndpoint
 @property  NSData *hostsData
 @property  NSArray *hosts

  // class methods
  +[NPTunnelTuscanyEndpoint endpointType]
  +[NPTunnelTuscanyEndpoint supportsSecureCoding]
  +[NPTunnelTuscanyEndpoint supportsResolverCallback]
  +[NPTunnelTuscanyEndpoint encodeHosts:]

  // instance methods
  -[NPTunnelTuscanyEndpoint encodedData]
  -[NPTunnelTuscanyEndpoint initWithCoder:]
  -[NPTunnelTuscanyEndpoint .cxx_destruct]
  -[NPTunnelTuscanyEndpoint hosts]
  -[NPTunnelTuscanyEndpoint encodeWithCoder:]
  -[NPTunnelTuscanyEndpoint initWithEncodedData:]
  -[NPTunnelTuscanyEndpoint resolveEndpointWithCompletionHandler:]
  -[NPTunnelTuscanyEndpoint initWithHosts:]
  -[NPTunnelTuscanyEndpoint copyHostsWithPort:]
  -[NPTunnelTuscanyEndpoint hostsData]


NPUtilities : NSObject
  // class methods
  +[NPUtilities fillOutConnectionInfo:withPath:interface:remoteEndpoint:parameters:outputHandler:]
  +[NPUtilities connectionInfoToDict:dictionary:]
  +[NPUtilities parseXHost:]
  +[NPUtilities machoUUIDFromPID:]
  +[NPUtilities saveDataToKeychain:withIdentifier:accountName:]
  +[NPUtilities parseXRTT:]
  +[NPUtilities copyDataHexString:]
  +[NPUtilities copyDataFromKeychainWithIdentifier:accountName:]
  +[NPUtilities timestampIdentifierToName:]
  +[NPUtilities getInterfaceName:]
  +[NPUtilities copyCurrentNetworkCharacteristicsForPath:]
  +[NPUtilities rollDiceWithSuccessRatio:]
  +[NPUtilities compareAddressEndpoints:endpoint2:addressOnly:]
  +[NPUtilities hexDumpBytes:length:]
  +[NPUtilities copyItemIdentifiersFromKeychainWithAccountName:]
  +[NPUtilities removeDataFromKeychainWithIdentifier:accountName:]
  +[NPUtilities stripWhitespace:]
  +[NPUtilities endpointFromString:defaultPortString:]
  +[NPUtilities getHashForObject:]
  +[NPUtilities protocolTypeFromPath:endpoint:]
  +[NPUtilities copyNetworkDescription:]
  +[NPUtilities stringFromLinkQualityValue:]
  +[NPUtilities interfaceTypeOfInterface:]
  +[NPUtilities getInterfaceTypeString:]
  +[NPUtilities pidFromAuditToken:]
  +[NPUtilities sharedEmphemeralSession]
  +[NPUtilities removeDataFromKeychainWithIdentifier:]
  +[NPUtilities certificateDateIsValid:]
  +[NPUtilities copyTrueClientIPAddressFromPreferences]
  +[NPUtilities parseXTimeout:hardTTLInSeconds:]
  +[NPUtilities interfaceTypeOfNWInterface:]
  +[NPUtilities postNotification:value:]
  +[NPUtilities hasPacketDrop:]
  +[NPUtilities printDictionaryAsJson:debugName:]


NSPPrivacyProxyBAAValidation : PBCodable <NSCopying>
 @property  NSData *baaSignature
 @property  NSData *leafCertificate
 @property  NSData *intermediateCertificate

  // instance methods
  -[NSPPrivacyProxyBAAValidation baaSignature]
  -[NSPPrivacyProxyBAAValidation mergeFrom:]
  -[NSPPrivacyProxyBAAValidation leafCertificate]
  -[NSPPrivacyProxyBAAValidation .cxx_destruct]
  -[NSPPrivacyProxyBAAValidation dictionaryRepresentation]
  -[NSPPrivacyProxyBAAValidation writeTo:]
  -[NSPPrivacyProxyBAAValidation setBaaSignature:]
  -[NSPPrivacyProxyBAAValidation isEqual:]
  -[NSPPrivacyProxyBAAValidation copyTo:]
  -[NSPPrivacyProxyBAAValidation readFrom:]
  -[NSPPrivacyProxyBAAValidation intermediateCertificate]
  -[NSPPrivacyProxyBAAValidation copyWithZone:]
  -[NSPPrivacyProxyBAAValidation setIntermediateCertificate:]
  -[NSPPrivacyProxyBAAValidation setLeafCertificate:]


NSPPrivacyProxyPolicySerialization : NSObject
  // class methods
  +[NSPPrivacyProxyPolicySerialization createUnencryptedPolicies:machOUUIDs:]
  +[NSPPrivacyProxyPolicySerialization safariBundleMachOUUIDsToInstall:]
  +[NSPPrivacyProxyPolicySerialization createPolicyWithOrder:policyResult:machOUUID:remotePort:protocol:otherPolicyConditions:uidRequired:]
  +[NSPPrivacyProxyPolicySerialization policiesWithProtoBuf:flowDivertHandle:ingressProxyURL:ingressFallbackProxyURL:captivePluginBundleIDs:]
  +[NSPPrivacyProxyPolicySerialization createTrackerPolicies:webContent:machOUUIDs:]
  +[NSPPrivacyProxyPolicySerialization machoUUIDFromSigningID:]
  +[NSPPrivacyProxyPolicySerialization addDNSPolicyWithOrder:toArray:machOUUID:]
  +[NSPPrivacyProxyPolicySerialization probePolicies]
  +[NSPPrivacyProxyPolicySerialization createRemovalPoliciesForCaptivePlugins:]
  +[NSPPrivacyProxyPolicySerialization propertyListWithProtoBuf:]
  +[NSPPrivacyProxyPolicySerialization policiesForSafariTechnologyPreview:]
  +[NSPPrivacyProxyPolicySerialization preferredProxyPoliciesForAgent:domainFilter:]
  +[NSPPrivacyProxyPolicySerialization protoBufWithPropertyList:]
  +[NSPPrivacyProxyPolicySerialization policyExceptionsForWiFi:cellular:interfaceNames:]
  +[NSPPrivacyProxyPolicySerialization policiesForMailApp:]
  +[NSPPrivacyProxyPolicySerialization createRemovalPoliciesForSystemComponents]
  +[NSPPrivacyProxyPolicySerialization policiesForSafariAppBundles:safariBundleMachOUUIDs:]
  +[NSPPrivacyProxyPolicySerialization createPoliciesFromPolicyMask:flowDivertHandle:ingressProxyURL:ingressFallbackProxyURL:captivePluginBundleIDs:]
  +[NSPPrivacyProxyPolicySerialization createAccountIDBasedPolicies:accountIdentifier:platformBinary:uidRequired:]
  +[NSPPrivacyProxyPolicySerialization createHTTPPolicies:skipUnencrypted:machOUUIDs:]
  +[NSPPrivacyProxyPolicySerialization createDNSPolicies:proxyHostnames:]
  +[NSPPrivacyProxyPolicySerialization createAllPolicies:machOUUIDs:exceptionAccount:]
  +[NSPPrivacyProxyPolicySerialization createBootstrapDNSPoliciesForProxyHostnames:]
  +[NSPPrivacyProxyPolicySerialization policyMaskFromProxyPolicy:]


NSPServerClient : NSObject <NSPServerCommands>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_xpc_object> *connection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPServerClient getErrorFromDict:]

  // instance methods
  -[NSPServerClient locationAuthorizationStatusWithCompletionHandler:]
  -[NSPServerClient setGeohashSharingPreference:completionHandler:]
  -[NSPServerClient overrideIngressProxy:fallbackProxy:key:completionHandler:]
  -[NSPServerClient setCurrentConfiguration:withCompletionHandler:]
  -[NSPServerClient initWithCallbackQueue:]
  -[NSPServerClient setCurrentLatitude:longitude:timestamp:forClient:]
  -[NSPServerClient setPrivacyProxyStatus:completionHandler:]
  -[NSPServerClient getPreferredResolverWithCompletionHandler:]
  -[NSPServerClient getPrivacyProxyServiceStatusWithCompletionHandler:]
  -[NSPServerClient getPreferredProxyWithCompletionHandler:]
  -[NSPServerClient getPrivacyProxyInfoWithCompletionHandler:]
  -[NSPServerClient .cxx_destruct]
  -[NSPServerClient reportPrivacyProxyServiceStatus:completionHandler:]
  -[NSPServerClient setLocationMonitorInterval:]
  -[NSPServerClient startLocationMonitor]
  -[NSPServerClient overridePreferredProxy:completionHandler:]
  -[NSPServerClient sendRTCReport:errorCode:url:completionHandler:]
  -[NSPServerClient setConnection:]
  -[NSPServerClient refreshWaldoNowWithCompletionHandler:]
  -[NSPServerClient removePrivacyProxyPolicy]
  -[NSPServerClient setForceFallback:completionHandler:]
  -[NSPServerClient getPrivacyProxyTrafficStateWithCompletionHandler:]
  -[NSPServerClient overridePreferredResolver:completionHandler:]
  -[NSPServerClient getPrivacyProxyPolicyWithCompletionHandler:]
  -[NSPServerClient getGeohashSharingPreferenceWithCompletionHandler:]
  -[NSPServerClient getPrivacyProxyAccountTypeWithCompletionHandler:]
  -[NSPServerClient stopLocationMonitor]
  -[NSPServerClient connection]
  -[NSPServerClient getPrivacyProxyUserTierWithCompletionHandler:]
  -[NSPServerClient reportPrivacyProxyNetworkStatus:completionHandler:]
  -[NSPServerClient setAppRule:forLabel:completionHandler:]
  -[NSPServerClient setTestLatencyMap:completionHandler:]
  -[NSPServerClient getOverrideIngressProxyWithCompletionHandler:]
  -[NSPServerClient mergePrivacyProxyPolicy:]
  -[NSPServerClient setPrivacyProxyConfiguration:completionHandler:]
  -[NSPServerClient fetchEdgeSetForIdentifier:completionHandler:]
  -[NSPServerClient setPrivacyProxyUserTier:completionHandler:]
  -[NSPServerClient queue]
  -[NSPServerClient getPrivacyProxyServiceStatusTimelineWithCompletionHandler:]
  -[NSPServerClient getPrivacyProxyStatusWithCompletionHandler:]
  -[NSPServerClient getPrivacyProxyEffectiveUserTierWithCompletionHandler:]
  -[NSPServerClient fetchStateForClient:withPeerEndpoint:completionHandler:]
  -[NSPServerClient setPrivacyProxyTrafficState:proxyTraffic:completionHandler:]
  -[NSPServerClient getPrivacyProxyConfiguration:]
  -[NSPServerClient setEdgeSet:forIdentifier:completionHandler:]
  -[NSPServerClient fetchCurrentConfigurationWithCompletionHandler:]
  -[NSPServerClient establishTrustWithEdgeSetForIdentifier:completionHandler:]
  -[NSPServerClient convertPrivacyProxyConfigurationWithCompletionHandler:completionHandler:]
  -[NSPServerClient setPrivacyProxyPolicy:completionHandler:]
  -[NSPServerClient getConnection]
  -[NSPServerClient setGeohashOverride:completionHandler:]
  -[NSPServerClient getForceFallbackWithCompletionHandler:]
  -[NSPServerClient reportUsage:fromClient:]
  -[NSPServerClient fetchAppRuleForLabel:completionHandler:]


NSPDeviceIdentityCertificate : NSObject <NSSecureCoding, NSCopying>
 @property  long long diskVersion
 @property  BOOL ignoreExistingKeychainIdentity
 @property  NSDate *deviceIdentityFetchDate

  // class methods
  +[NSPDeviceIdentityCertificate removeFromPreferences]
  +[NSPDeviceIdentityCertificate supportsSecureCoding]
  +[NSPDeviceIdentityCertificate deviceSupportsDeviceIdentityWithSerialNumber]
  +[NSPDeviceIdentityCertificate sharedDeviceIdentity]

  // instance methods
  -[NSPDeviceIdentityCertificate saveToPreferences]
  -[NSPDeviceIdentityCertificate diskVersion]
  -[NSPDeviceIdentityCertificate descriptionWithIndent:options:]
  -[NSPDeviceIdentityCertificate initWithCoder:]
  -[NSPDeviceIdentityCertificate fetchDeviceIdentityCertificate:]
  -[NSPDeviceIdentityCertificate .cxx_destruct]
  -[NSPDeviceIdentityCertificate deviceIdentityFetchDate]
  -[NSPDeviceIdentityCertificate setIgnoreExistingKeychainIdentity:]
  -[NSPDeviceIdentityCertificate generateDeviceIdentityFetchDate]
  -[NSPDeviceIdentityCertificate initFromPreferences]
  -[NSPDeviceIdentityCertificate setDeviceIdentityFetchDate:]
  -[NSPDeviceIdentityCertificate ignoreExistingKeychainIdentity]
  -[NSPDeviceIdentityCertificate resetDeviceIdentityInfo]
  -[NSPDeviceIdentityCertificate copyWithZone:]
  -[NSPDeviceIdentityCertificate encodeWithCoder:]
  -[NSPDeviceIdentityCertificate deviceIdentityAuthenticationFailed]


NPTunnelFlowHTTP : NPTunnelFlow
 @property  @? postCompletionHandler
 @property  BOOL receivedHeaders
 @property  NSNumber *responseContentLength
 @property  BOOL responseSuccess
 @property  NSMutableData *responseData
 @property  NSURL *url

  // instance methods
  -[NPTunnelFlowHTTP url]
  -[NPTunnelFlowHTTP .cxx_destruct]
  -[NPTunnelFlowHTTP setUrl:]
  -[NPTunnelFlowHTTP setPostCompletionHandler:]
  -[NPTunnelFlowHTTP responseData]
  -[NPTunnelFlowHTTP setResponseData:]
  -[NPTunnelFlowHTTP postCompletionHandler]
  -[NPTunnelFlowHTTP responseSuccess]
  -[NPTunnelFlowHTTP sendDataToClient:fromTunnel:]
  -[NPTunnelFlowHTTP receivedHeaders]
  -[NPTunnelFlowHTTP setResponseSuccess:]
  -[NPTunnelFlowHTTP setResponseContentLength:]
  -[NPTunnelFlowHTTP setReceivedHeaders:]
  -[NPTunnelFlowHTTP responseContentLength]
  -[NPTunnelFlowHTTP initWithTunnel:URL:extraFlowProperties:]
  -[NPTunnelFlowHTTP postData:withCompletionHandler:]
  -[NPTunnelFlowHTTP closeClientFlowWithError:]
  -[NPTunnelFlowHTTP isClientFlowClosed]


NSPPrivacyProxyLocationMonitor : NSObject <CLLocationManagerDelegate>
 @property  CLLocationManager *clLocationManager
 @property  CLLocation *latestLocation
 @property  NSString *latestCountryPlusTimezone
 @property  NSTimer *locationMonitorTimer
 @property  BOOL isMonitoringEnabled
 @property  double monitorTimeInterval
 @property  NSString *lastGeohash
 @property  <NSPPrivacyProxyLocationMonitorDelegate> *delegate
 @property  BOOL isAuthorized
 @property  NSString *currentCountryPlusTimezone
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPPrivacyProxyLocationMonitor sharedMonitor]

  // instance methods
  -[NSPPrivacyProxyLocationMonitor isAuthorized]
  -[NSPPrivacyProxyLocationMonitor clLocationManager]
  -[NSPPrivacyProxyLocationMonitor setClLocationManager:]
  -[NSPPrivacyProxyLocationMonitor geohashFromLocation:]
  -[NSPPrivacyProxyLocationMonitor setMonitorTimeInterval:]
  -[NSPPrivacyProxyLocationMonitor .cxx_destruct]
  -[NSPPrivacyProxyLocationMonitor checkSignificantLocationChange:]
  -[NSPPrivacyProxyLocationMonitor setUserEventAgentTimer]
  -[NSPPrivacyProxyLocationMonitor startLocationMonitor]
  -[NSPPrivacyProxyLocationMonitor setLastCountryPlusTimezone:]
  -[NSPPrivacyProxyLocationMonitor stop]
  -[NSPPrivacyProxyLocationMonitor locationManager:didFailWithError:]
  -[NSPPrivacyProxyLocationMonitor setDelegate:]
  -[NSPPrivacyProxyLocationMonitor setLocationMonitorTimer:]
  -[NSPPrivacyProxyLocationMonitor setLastGeohash:]
  -[NSPPrivacyProxyLocationMonitor init]
  -[NSPPrivacyProxyLocationMonitor stopLocationMonitor]
  -[NSPPrivacyProxyLocationMonitor handleLocationUpdate:]
  -[NSPPrivacyProxyLocationMonitor latestCountryPlusTimezone]
  -[NSPPrivacyProxyLocationMonitor setLatestLocation:]
  -[NSPPrivacyProxyLocationMonitor locationManagerDidChangeAuthorization:]
  -[NSPPrivacyProxyLocationMonitor locationManager:didUpdateLocations:]
  -[NSPPrivacyProxyLocationMonitor setIsMonitoringEnabled:]
  -[NSPPrivacyProxyLocationMonitor refreshCountryPlusTimezone:]
  -[NSPPrivacyProxyLocationMonitor delegate]
  -[NSPPrivacyProxyLocationMonitor isMonitoringEnabled]
  -[NSPPrivacyProxyLocationMonitor start]
  -[NSPPrivacyProxyLocationMonitor currentCountryPlusTimezone]
  -[NSPPrivacyProxyLocationMonitor latestLocation]
  -[NSPPrivacyProxyLocationMonitor isCoreWLANAuthorized]
  -[NSPPrivacyProxyLocationMonitor locationMonitorTimer]
  -[NSPPrivacyProxyLocationMonitor lastGeohash]
  -[NSPPrivacyProxyLocationMonitor setLatestCountryPlusTimezone:]
  -[NSPPrivacyProxyLocationMonitor monitorTimeInterval]


NSPDNSResourceRecord : NSObject
 @property  long long type
 @property  NSString *name
 @property  long long recordClass
 @property  unsigned long timeToLive
 @property  unsigned long dataLength
 @property  NSString *resourceString

  // class methods
  +[NSPDNSResourceRecord typeToString:]

  // instance methods
  -[NSPDNSResourceRecord name]
  -[NSPDNSResourceRecord initFromByteParser:]
  -[NSPDNSResourceRecord resourceString]
  -[NSPDNSResourceRecord .cxx_destruct]
  -[NSPDNSResourceRecord dataLength]
  -[NSPDNSResourceRecord type]
  -[NSPDNSResourceRecord recordClass]
  -[NSPDNSResourceRecord timeToLive]
  -[NSPDNSResourceRecord copyStateDictionary]


NSPDNSQuery : NSObject
 @property  NSString *name
 @property  long long recordType
 @property  long long recordClass

  // instance methods
  -[NSPDNSQuery recordType]
  -[NSPDNSQuery name]
  -[NSPDNSQuery initWithName:recordType:recordClass:]
  -[NSPDNSQuery .cxx_destruct]
  -[NSPDNSQuery recordClass]
  -[NSPDNSQuery copyStateDictionary]


NSPDNSPacket : NSObject
 @property  NSData *data
 @property  long long identifier
 @property  NSDate *timestamp
 @property  long long messageType
 @property  long long opCode
 @property  BOOL isAuthoritativeAnswer
 @property  BOOL isTruncated
 @property  BOOL isRecursionDesired
 @property  BOOL isRecursionAvailable
 @property  long long responseCode
 @property  NSString *responseCodeString
 @property  NSArray *queries
 @property  NSArray *answers
 @property  NSArray *authorities
 @property  NSArray *additionalRecords

  // instance methods
  -[NSPDNSPacket responseCode]
  -[NSPDNSPacket messageType]
  -[NSPDNSPacket opCode]
  -[NSPDNSPacket .cxx_destruct]
  -[NSPDNSPacket initFromData:]
  -[NSPDNSPacket responseCodeString]
  -[NSPDNSPacket isAuthoritativeAnswer]
  -[NSPDNSPacket isRecursionDesired]
  -[NSPDNSPacket isRecursionAvailable]
  -[NSPDNSPacket authorities]
  -[NSPDNSPacket additionalRecords]
  -[NSPDNSPacket data]
  -[NSPDNSPacket answers]
  -[NSPDNSPacket queries]
  -[NSPDNSPacket identifier]
  -[NSPDNSPacket isTruncated]
  -[NSPDNSPacket timestamp]


NSPPrivacyProxyProxyInfo : PBCodable <NSCopying>
 @property  int proxyHop
 @property  NSString *proxyURL
 @property  NSMutableArray *proxyKeyInfos
 @property  NSData *tokenKeyInfo
 @property  BOOL hasSupportsFallback
 @property  BOOL supportsFallback
 @property  BOOL hasVendor
 @property  NSString *vendor
 @property  BOOL hasTcpProxyFqdn
 @property  NSString *tcpProxyFqdn
 @property  BOOL hasPreferredPathConfigUri
 @property  NSString *preferredPathConfigUri

  // class methods
  +[NSPPrivacyProxyProxyInfo proxyKeyInfoType]

  // instance methods
  -[NSPPrivacyProxyProxyInfo vendor]
  -[NSPPrivacyProxyProxyInfo setVendor:]
  -[NSPPrivacyProxyProxyInfo hasVendor]
  -[NSPPrivacyProxyProxyInfo setProxyURL:]
  -[NSPPrivacyProxyProxyInfo proxyURL]
  -[NSPPrivacyProxyProxyInfo StringAsProxyHop:]
  -[NSPPrivacyProxyProxyInfo mergeFrom:]
  -[NSPPrivacyProxyProxyInfo hasSupportsFallback]
  -[NSPPrivacyProxyProxyInfo tcpProxyFqdn]
  -[NSPPrivacyProxyProxyInfo setProxyHop:]
  -[NSPPrivacyProxyProxyInfo .cxx_destruct]
  -[NSPPrivacyProxyProxyInfo proxyKeyInfos]
  -[NSPPrivacyProxyProxyInfo clearProxyKeyInfos]
  -[NSPPrivacyProxyProxyInfo dictionaryRepresentation]
  -[NSPPrivacyProxyProxyInfo tokenKeyInfo]
  -[NSPPrivacyProxyProxyInfo writeTo:]
  -[NSPPrivacyProxyProxyInfo proxyKeyInfosCount]
  -[NSPPrivacyProxyProxyInfo setPreferredPathConfigUri:]
  -[NSPPrivacyProxyProxyInfo preferredPathConfigUri]
  -[NSPPrivacyProxyProxyInfo setProxyKeyInfos:]
  -[NSPPrivacyProxyProxyInfo isEqual:]
  -[NSPPrivacyProxyProxyInfo copyTo:]
  -[NSPPrivacyProxyProxyInfo setTcpProxyFqdn:]
  -[NSPPrivacyProxyProxyInfo readFrom:]
  -[NSPPrivacyProxyProxyInfo hasTcpProxyFqdn]
  -[NSPPrivacyProxyProxyInfo addProxyKeyInfo:]
  -[NSPPrivacyProxyProxyInfo proxyHopAsString:]
  -[NSPPrivacyProxyProxyInfo setHasSupportsFallback:]
  -[NSPPrivacyProxyProxyInfo proxyHop]
  -[NSPPrivacyProxyProxyInfo proxyKeyInfoAtIndex:]
  -[NSPPrivacyProxyProxyInfo setSupportsFallback:]
  -[NSPPrivacyProxyProxyInfo copyWithZone:]
  -[NSPPrivacyProxyProxyInfo hasPreferredPathConfigUri]
  -[NSPPrivacyProxyProxyInfo supportsFallback]
  -[NSPPrivacyProxyProxyInfo setTokenKeyInfo:]


NSPPrivacyProxyProxyPathWeight : PBCodable <NSCopying>
 @property  unsigned int weight
 @property  unsigned long proxiesCount
 @property  ^I proxies

  // instance methods
  -[NSPPrivacyProxyProxyPathWeight addProxies:]
  -[NSPPrivacyProxyProxyPathWeight setWeight:]
  -[NSPPrivacyProxyProxyPathWeight mergeFrom:]
  -[NSPPrivacyProxyProxyPathWeight weight]
  -[NSPPrivacyProxyProxyPathWeight proxiesCount]
  -[NSPPrivacyProxyProxyPathWeight dictionaryRepresentation]
  -[NSPPrivacyProxyProxyPathWeight writeTo:]
  -[NSPPrivacyProxyProxyPathWeight isEqual:]
  -[NSPPrivacyProxyProxyPathWeight copyTo:]
  -[NSPPrivacyProxyProxyPathWeight readFrom:]
  -[NSPPrivacyProxyProxyPathWeight proxies]
  -[NSPPrivacyProxyProxyPathWeight setProxies:count:]
  -[NSPPrivacyProxyProxyPathWeight dealloc]
  -[NSPPrivacyProxyProxyPathWeight copyWithZone:]
  -[NSPPrivacyProxyProxyPathWeight proxiesAtIndex:]
  -[NSPPrivacyProxyProxyPathWeight clearProxies]


NPTunnelFlow : NSObject
 @property  NSObject<OS_dispatch_data> *savedData
 @property  ^v fallbackTimer
 @property  ^v telemetryTimer
 @property  double fallbackDelay
 @property  unsigned long hashKey
 @property  unsigned long identifier
 @property  NPTunnel *tunnel
 @property  long long state
 @property  NSPAppRule *appRule
 @property  NPFlowProperties *extraFlowProperties
 @property  long long fallbackReason
 @property  NSDate *firstTxByteTimestamp
 @property  NSDate *startDate
 @property  ^v window
 @property  unsigned long initialBytesLeftOver
 @property  BOOL isDirectConnectionViable
 @property  BOOL fallbackDisabled
 @property  BOOL enableDirectRace
 @property  BOOL isClientFlowClosed
 @property  BOOL isBestEffort
 @property  BOOL disconnectedByApp
 @property  BOOL shouldComposeIntialData

  // instance methods
  -[NPTunnelFlow closeWithError:]
  -[NPTunnelFlow hashKey]
  -[NPTunnelFlow .cxx_destruct]
  -[NPTunnelFlow enableDirectRace]
  -[NPTunnelFlow identifier]
  -[NPTunnelFlow state]
  -[NPTunnelFlow setIdentifier:]
  -[NPTunnelFlow appData]
  -[NPTunnelFlow fallbackReason]
  -[NPTunnelFlow setFallbackReason:]
  -[NPTunnelFlow startDate]
  -[NPTunnelFlow dealloc]
  -[NPTunnelFlow window]
  -[NPTunnelFlow tunnel]
  -[NPTunnelFlow appRule]
  -[NPTunnelFlow reportMetrics]
  -[NPTunnelFlow setAppData:]
  -[NPTunnelFlow fallbackTimer]
  -[NPTunnelFlow setFallbackTimer:]
  -[NPTunnelFlow firstTxByteTimestamp]
  -[NPTunnelFlow handleAppData:]
  -[NPTunnelFlow isDirectConnectionViable]
  -[NPTunnelFlow setIsDirectConnectionViable:]
  -[NPTunnelFlow sendDataToClient:fromTunnel:]
  -[NPTunnelFlow closeFromDirectConnectionWithError:]
  -[NPTunnelFlow readDataFromClient]
  -[NPTunnelFlow fallbackDisabled]
  -[NPTunnelFlow setFallbackDisabled:]
  -[NPTunnelFlow startDirectConnection]
  -[NPTunnelFlow stopDirectConnection]
  -[NPTunnelFlow shouldSendDataToClient:fromTunnel:]
  -[NPTunnelFlow closeFromTunnel]
  -[NPTunnelFlow handleTunnelCanHandleMoreData]
  -[NPTunnelFlow reportTelemetry:withService:url:]
  -[NPTunnelFlow createTelemetryDataWithCompletionHandler:]
  -[NPTunnelFlow handleTunnelConnected]
  -[NPTunnelFlow cleanupLosingConnection:]
  -[NPTunnelFlow setFirstTxByteTimestamp:]
  -[NPTunnelFlow fallbackDelay]
  -[NPTunnelFlow initWithTunnel:appRule:hashKey:extraFlowProperties:]
  -[NPTunnelFlow closeClientFlowWithError:]
  -[NPTunnelFlow isClientFlowClosed]
  -[NPTunnelFlow extraFlowProperties]
  -[NPTunnelFlow setInitialBytesLeftOver:]
  -[NPTunnelFlow isBestEffort]
  -[NPTunnelFlow copyConnectionInfo]
  -[NPTunnelFlow processConnectionInfo:]
  -[NPTunnelFlow createFallbackConnectionInfoWithFallbackReason:]
  -[NPTunnelFlow disconnectedByApp]
  -[NPTunnelFlow setFallbackDelay:]
  -[NPTunnelFlow combineStateInfo:andConnectionInfo:]
  -[NPTunnelFlow increaseWindowSize:]
  -[NPTunnelFlow handleTunnelDisconnected]
  -[NPTunnelFlow handleTunnelReadyForData]
  -[NPTunnelFlow initialBytesLeftOver]
  -[NPTunnelFlow setDisconnectedByApp:]
  -[NPTunnelFlow shouldComposeIntialData]
  -[NPTunnelFlow setShouldComposeIntialData:]
  -[NPTunnelFlow savedData]
  -[NPTunnelFlow setSavedData:]
  -[NPTunnelFlow telemetryTimer]
  -[NPTunnelFlow setTelemetryTimer:]


PrivacyProxyClient : NSObject
  // class methods
  +[PrivacyProxyClient getTrafficState:completionandler:]
  +[PrivacyProxyClient overridePreferredResolver:queue:completionHandler:]
  +[PrivacyProxyClient setUserTier:queue:completionHandler:]
  +[PrivacyProxyClient overridePreferredProxy:queue:completionHandler:]
  +[PrivacyProxyClient getStatus:completionHandler:]
  +[PrivacyProxyClient getGeohashSharingPreference:completionHandler:]
  +[PrivacyProxyClient getPrivacyProxyAccountType:completionHandler:]
  +[PrivacyProxyClient setEnabled:queue:completionHandler:]
  +[PrivacyProxyClient getPreferredResolver:completionHandler:]
  +[PrivacyProxyClient reportCellularNetworkStatus:networkName:queue:completionHandler:]
  +[PrivacyProxyClient getForceFallback:completionHandler:]
  +[PrivacyProxyClient setForceFallback:queue:completionHandler:]
  +[PrivacyProxyClient getServiceStatusTimeline:completionHandler:]
  +[PrivacyProxyClient getServerConnection]
  +[PrivacyProxyClient getOverriddeIngressProxy:completionHandler:]
  +[PrivacyProxyClient reportWiFiNetworkStatus:networkName:queue:completionHandler:]
  +[PrivacyProxyClient setTrafficState:proxyTraffic:queue:completionHandler:]
  +[PrivacyProxyClient getPreferredProxy:completionHandler:]
  +[PrivacyProxyClient getEffectiveUserTier:completionHandler:]
  +[PrivacyProxyClient overrideIngressProxy:fallbackProxy:key:queue:completionHandler:]
  +[PrivacyProxyClient getUserTier:completionHandler:]
  +[PrivacyProxyClient setGeohashSharingPreference:queue:completionHandler:]
  +[PrivacyProxyClient getServiceStatus:completionHandler:]


PrivacyProxyTokenInfo : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned long cachedTokens
 @property  unsigned long agentTokens
 @property  unsigned long agentLowWaterMark
 @property  unsigned long cacheLowWaterMark

  // class methods
  +[PrivacyProxyTokenInfo supportsSecureCoding]

  // instance methods
  -[PrivacyProxyTokenInfo descriptionWithIndent:options:]
  -[PrivacyProxyTokenInfo initWithCoder:]
  -[PrivacyProxyTokenInfo serialize]
  -[PrivacyProxyTokenInfo initWithData:]
  -[PrivacyProxyTokenInfo copyWithZone:]
  -[PrivacyProxyTokenInfo diagnostics]
  -[PrivacyProxyTokenInfo encodeWithCoder:]
  -[PrivacyProxyTokenInfo cachedTokens]
  -[PrivacyProxyTokenInfo agentTokens]
  -[PrivacyProxyTokenInfo cacheLowWaterMark]
  -[PrivacyProxyTokenInfo agentLowWaterMark]
  -[PrivacyProxyTokenInfo setCachedTokens:]
  -[PrivacyProxyTokenInfo setAgentTokens:]
  -[PrivacyProxyTokenInfo setCacheLowWaterMark:]
  -[PrivacyProxyTokenInfo setAgentLowWaterMark:]


PrivacyProxyInfo : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *egressProxyURL
 @property  NSString *ingressProxyURL
 @property  NSString *egressFallbackProxyURL
 @property  NSString *ingressFallbackProxyURL
 @property  NSDictionary *tokenCounts
 @property  unsigned long deviceIdentityValidationCount
 @property  unsigned long anisetteValidationCount
 @property  unsigned long unactivatedTokenCount
 @property  unsigned long activatedTokenCount
 @property  unsigned long requestedTokenCount
 @property  unsigned long proxyTokenFetchSuccessCount
 @property  unsigned long proxyTokenFetchFailedCount
 @property  unsigned long proxyTokenConsumedCount
 @property  unsigned long proxyTokenExpiredCount
 @property  unsigned long proxyAgentLowWaterMarkHitCount
 @property  unsigned long proxyCacheLowWaterMarkHitCount
 @property  unsigned long badTokenCount
 @property  unsigned long missingTokenCount
 @property  unsigned long networkProxiesRotated
 @property  unsigned long networkFallbackProxiesRotated
 @property  unsigned long proxiesRotated
 @property  unsigned long configFetchedSuccessCount
 @property  unsigned long configFetchedFailedCount

  // class methods
  +[PrivacyProxyInfo supportsSecureCoding]

  // instance methods
  -[PrivacyProxyInfo missingTokenCount]
  -[PrivacyProxyInfo badTokenCount]
  -[PrivacyProxyInfo descriptionWithIndent:options:]
  -[PrivacyProxyInfo requestedTokenCount]
  -[PrivacyProxyInfo initWithCoder:]
  -[PrivacyProxyInfo .cxx_destruct]
  -[PrivacyProxyInfo setMissingTokenCount:]
  -[PrivacyProxyInfo setProxiesRotated:]
  -[PrivacyProxyInfo networkProxiesRotated]
  -[PrivacyProxyInfo setIngressProxyURL:]
  -[PrivacyProxyInfo setRequestedTokenCount:]
  -[PrivacyProxyInfo ingressFallbackProxyURL]
  -[PrivacyProxyInfo serialize]
  -[PrivacyProxyInfo initWithData:]
  -[PrivacyProxyInfo setIngressFallbackProxyURL:]
  -[PrivacyProxyInfo ingressProxyURL]
  -[PrivacyProxyInfo proxiesRotated]
  -[PrivacyProxyInfo copyWithZone:]
  -[PrivacyProxyInfo diagnostics]
  -[PrivacyProxyInfo networkFallbackProxiesRotated]
  -[PrivacyProxyInfo setBadTokenCount:]
  -[PrivacyProxyInfo setNetworkFallbackProxiesRotated:]
  -[PrivacyProxyInfo encodeWithCoder:]
  -[PrivacyProxyInfo setNetworkProxiesRotated:]
  -[PrivacyProxyInfo tokenCounts]
  -[PrivacyProxyInfo egressProxyURL]
  -[PrivacyProxyInfo egressFallbackProxyURL]
  -[PrivacyProxyInfo unactivatedTokenCount]
  -[PrivacyProxyInfo activatedTokenCount]
  -[PrivacyProxyInfo deviceIdentityValidationCount]
  -[PrivacyProxyInfo anisetteValidationCount]
  -[PrivacyProxyInfo proxyTokenFetchSuccessCount]
  -[PrivacyProxyInfo proxyTokenFetchFailedCount]
  -[PrivacyProxyInfo proxyTokenConsumedCount]
  -[PrivacyProxyInfo proxyTokenExpiredCount]
  -[PrivacyProxyInfo proxyAgentLowWaterMarkHitCount]
  -[PrivacyProxyInfo proxyCacheLowWaterMarkHitCount]
  -[PrivacyProxyInfo configFetchedSuccessCount]
  -[PrivacyProxyInfo configFetchedFailedCount]
  -[PrivacyProxyInfo setEgressProxyURL:]
  -[PrivacyProxyInfo setEgressFallbackProxyURL:]
  -[PrivacyProxyInfo setTokenCounts:]
  -[PrivacyProxyInfo setDeviceIdentityValidationCount:]
  -[PrivacyProxyInfo setAnisetteValidationCount:]
  -[PrivacyProxyInfo setUnactivatedTokenCount:]
  -[PrivacyProxyInfo setActivatedTokenCount:]
  -[PrivacyProxyInfo setProxyTokenFetchSuccessCount:]
  -[PrivacyProxyInfo setProxyTokenFetchFailedCount:]
  -[PrivacyProxyInfo setProxyTokenConsumedCount:]
  -[PrivacyProxyInfo setProxyTokenExpiredCount:]
  -[PrivacyProxyInfo setProxyAgentLowWaterMarkHitCount:]
  -[PrivacyProxyInfo setProxyCacheLowWaterMarkHitCount:]
  -[PrivacyProxyInfo setConfigFetchedSuccessCount:]
  -[PrivacyProxyInfo setConfigFetchedFailedCount:]


NPFlowProperties : NSObject
 @property  unsigned int flags
 @property  unsigned long serviceID
 @property  unsigned int flowIdentifier
 @property  double fallbackTimeout
 @property  BOOL enableNSP
 @property  NSData *requestData
 @property  NPTunnelTuscanyEndpoint *replacementEndpoint
 @property  NSDictionary *replacementAddressMap
 @property  int dataMode
 @property  NWEndpoint *directEndpoint
 @property  BOOL isLoopback
 @property  ^Q timestamps
 @property  BOOL disableIdleTimeout

  // instance methods
  -[NPFlowProperties requestData]
  -[NPFlowProperties setFlags:]
  -[NPFlowProperties timestamps]
  -[NPFlowProperties setDataMode:]
  -[NPFlowProperties .cxx_destruct]
  -[NPFlowProperties setServiceID:]
  -[NPFlowProperties serviceID]
  -[NPFlowProperties flowIdentifier]
  -[NPFlowProperties isLoopback]
  -[NPFlowProperties setFallbackTimeout:]
  -[NPFlowProperties flags]
  -[NPFlowProperties setRequestData:]
  -[NPFlowProperties fallbackTimeout]
  -[NPFlowProperties dealloc]
  -[NPFlowProperties dataMode]
  -[NPFlowProperties copyTLVData]
  -[NPFlowProperties replacementEndpoint]
  -[NPFlowProperties setReplacementEndpoint:]
  -[NPFlowProperties setTimestamps:]
  -[NPFlowProperties setFlowIdentifier:]
  -[NPFlowProperties initWithTLVData:]
  -[NPFlowProperties setEnableNSP:]
  -[NPFlowProperties setReplacementAddressMap:]
  -[NPFlowProperties directEndpoint]
  -[NPFlowProperties replacementAddressMap]
  -[NPFlowProperties enableNSP]
  -[NPFlowProperties setIsLoopback:]
  -[NPFlowProperties disableIdleTimeout]
  -[NPFlowProperties setDisableIdleTimeout:]
  -[NPFlowProperties setDirectEndpoint:]


NSPNetworkAgent : NSObject <NWNetworkAgent>
 @property  NSData *agentData
 @property  NSPConfiguration *configuration
 @property  NSPAppRule *appRule
 @property  NSData *keybag
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[NSPNetworkAgent agentFromData:]
  +[NSPNetworkAgent agentType]
  +[NSPNetworkAgent agentDomain]

  // instance methods
  -[NSPNetworkAgent copyAgentData]
  -[NSPNetworkAgent setUserActivated:]
  -[NSPNetworkAgent setKernelActivated:]
  -[NSPNetworkAgent isActive]
  -[NSPNetworkAgent configuration]
  -[NSPNetworkAgent .cxx_destruct]
  -[NSPNetworkAgent keybag]
  -[NSPNetworkAgent agentUUID]
  -[NSPNetworkAgent agentDescription]
  -[NSPNetworkAgent isUserActivated]
  -[NSPNetworkAgent init]
  -[NSPNetworkAgent isEqual:]
  -[NSPNetworkAgent isKernelActivated]
  -[NSPNetworkAgent setAgentUUID:]
  -[NSPNetworkAgent setActive:]
  -[NSPNetworkAgent setAgentDescription:]
  -[NSPNetworkAgent setVoluntary:]
  -[NSPNetworkAgent setAgentData:]
  -[NSPNetworkAgent agentData]
  -[NSPNetworkAgent isVoluntary]
  -[NSPNetworkAgent appRule]
  -[NSPNetworkAgent setConfiguration:]
  -[NSPNetworkAgent setAppRule:]
  -[NSPNetworkAgent setKeybag:]
  -[NSPNetworkAgent parseAgentData]


NSPKeyNetworkAgent : NSPNetworkAgent
  // class methods
  +[NSPKeyNetworkAgent agentType]


NPDiagnosticReport : NSObject
  // class methods
  +[NPDiagnosticReport logInternalError:context:]
  +[NPDiagnosticReport logNSPDiagnosticReport:event:context:]


NPAverage : NSObject <NSSecureCoding>
 @property  NSMutableArray *samples
 @property  unsigned long size
 @property  unsigned long average
 @property  BOOL isLastValid
 @property  BOOL isAnyValid

  // class methods
  +[NPAverage supportsSecureCoding]

  // instance methods
  -[NPAverage addSample:]
  -[NPAverage addSamples:]
  -[NPAverage initWithCoder:]
  -[NPAverage .cxx_destruct]
  -[NPAverage setSamples:]
  -[NPAverage setSize:]
  -[NPAverage average]
  -[NPAverage samples]
  -[NPAverage shortDescription]
  -[NPAverage size]
  -[NPAverage copyWithZone:]
  -[NPAverage encodeWithCoder:]
  -[NPAverage initWithSampleSize:]
  -[NPAverage isLastValid]
  -[NPAverage isAnyValid]


NPEdgeLatency : NSObject <NSSecureCoding>
 @property  long long reprobeCount
 @property  NSObject<OS_dispatch_source> *probeTimer
 @property  NWTCPConnection *probeConnection
 @property  @? probeCompletionHandler
 @property  NSNumber *currentTimeout
 @property  BOOL needReprobe
 @property  BOOL isObserving
 @property  unsigned long edgeIndex
 @property  NWEndpoint *probeEndpoint
 @property  unsigned long roundTripTime
 @property  NPAverage *roundTripAverage
 @property  NPAverage *roundTripAverageObserved
 @property  NSNumber *addressFamily
 @property  long long interfaceType
 @property  BOOL probeTFO
 @property  BOOL probeNoTFOCookie
 @property  long long TFOStatus
 @property  NSString *addressFamilyString
 @property  NSString *TFOStatusString
 @property  NSString *connectionParametersString
 @property  BOOL isTFOEnabled
 @property  long long probeCount
 @property  NSDate *creationDate
 @property  BOOL passedReprobeThreshold

  // class methods
  +[NPEdgeLatency supportsSecureCoding]

  // instance methods
  -[NPEdgeLatency setInterfaceType:]
  -[NPEdgeLatency interfaceType]
  -[NPEdgeLatency initWithCoder:]
  -[NPEdgeLatency setCreationDate:]
  -[NPEdgeLatency setIsObserving:]
  -[NPEdgeLatency .cxx_destruct]
  -[NPEdgeLatency isObserving]
  -[NPEdgeLatency creationDate]
  -[NPEdgeLatency copyWithZone:]
  -[NPEdgeLatency addressFamily]
  -[NPEdgeLatency observeValueForKeyPath:ofObject:change:context:]
  -[NPEdgeLatency encodeWithCoder:]
  -[NPEdgeLatency setAddressFamily:]
  -[NPEdgeLatency edgeIndex]
  -[NPEdgeLatency roundTripTime]
  -[NPEdgeLatency setRoundTripTime:]
  -[NPEdgeLatency setEdgeIndex:]
  -[NPEdgeLatency roundTripAverageObserved]
  -[NPEdgeLatency initWithProbeEndpoint:probeTFO:]
  -[NPEdgeLatency roundTripAverage]
  -[NPEdgeLatency passedReprobeThreshold]
  -[NPEdgeLatency probeCount]
  -[NPEdgeLatency probeEndpoint]
  -[NPEdgeLatency TFOStatus]
  -[NPEdgeLatency probeTFO]
  -[NPEdgeLatency probeNoTFOCookie]
  -[NPEdgeLatency setRoundTripAverage:]
  -[NPEdgeLatency setRoundTripAverageObserved:]
  -[NPEdgeLatency setPassedReprobeThreshold:]
  -[NPEdgeLatency setProbeCount:]
  -[NPEdgeLatency setTFOStatus:]
  -[NPEdgeLatency setProbeTFO:]
  -[NPEdgeLatency setProbeEndpoint:]
  -[NPEdgeLatency setProbeNoTFOCookie:]
  -[NPEdgeLatency connectionParametersString]
  -[NPEdgeLatency TFOStatusString]
  -[NPEdgeLatency addRoundTripSample:]
  -[NPEdgeLatency probeConnection]
  -[NPEdgeLatency setCurrentTimeout:]
  -[NPEdgeLatency setNeedReprobe:]
  -[NPEdgeLatency setProbeTimer:]
  -[NPEdgeLatency probeTimer]
  -[NPEdgeLatency fillTestLatency]
  -[NPEdgeLatency setProbeCompletionHandler:]
  -[NPEdgeLatency setProbeConnection:]
  -[NPEdgeLatency reprobeCount]
  -[NPEdgeLatency setReprobeCount:]
  -[NPEdgeLatency pingPong]
  -[NPEdgeLatency probeCompletionHandler]
  -[NPEdgeLatency needReprobe]
  -[NPEdgeLatency currentTimeout]
  -[NPEdgeLatency measureLatencyWithTimeout:completionHandler:]
  -[NPEdgeLatency isMatched:parameters:]
  -[NPEdgeLatency addRoundTripSamples:]
  -[NPEdgeLatency getRoundTripSample:]
  -[NPEdgeLatency addRoundTripSampleObserved:]
  -[NPEdgeLatency addressFamilyString]
  -[NPEdgeLatency isTFOEnabled]
  -[NPEdgeLatency isMatched:]
  -[NPEdgeLatency isComplete:]


NSPAppRule : NEAppRule
 @property  NSPAppRule *defaults
 @property  NSPNetworkAgent *agent
 @property  NWNetworkAgentRegistration *agentRegistration
 @property  NSUUID *configurationIdentifier
 @property  NSDate *enableCheckDate
 @property  BOOL disabledByRatio
 @property  NSData *updateHash
 @property  NSNumber *disableFallback
 @property  NSNumber *enableDirectMultipath
 @property  NSNumber *enableDirectTFO
 @property  NSNumber *enableDirectExtendedValidation
 @property  NSArray *directTLSPorts
 @property  NSNumber *divertDNSOnly
 @property  NSNumber *noDNSDelegation
 @property  NSNumber *serviceID
 @property  NSNumber *enabled
 @property  NSNumber *fallbackTimeout
 @property  NSNumber *fallbackBufferLimit
 @property  NSNumber *fallbackCountBeforeImmediateFallback
 @property  NSString *proxyEvaluationPath
 @property  NSNumber *useCustomProtocol
 @property  NSNumber *useLocalFlowDivert
 @property  NSNumber *enableDirectRace
 @property  NSString *label
 @property  NSString *edgeSetIdentifier
 @property  NSNumber *connectionTimeout
 @property  NSNumber *connectionIdleTimeout
 @property  NSNumber *enableMultipath
 @property  NSNumber *enableTFO
 @property  NSNumber *requireTFO
 @property  NSNumber *enableNoTFOCookie
 @property  NSNumber *enableUDPRace
 @property  NSNumber *enableRatio
 @property  NSNumber *reenableInterval
 @property  NSNumber *telemetryRatio
 @property  NSNumber *shouldComposeInitialData
 @property  NSNumber *enableOptInPerTask
 @property  NSArray *matchEffectiveApplications
 @property  NSString *locationBundlePath
 @property  NSNumber *initialWindowSize

  // class methods
  +[NSPAppRule supportsSecureCoding]
  +[NSPAppRule loadAppRules:withCompletionHandler:]
  +[NSPAppRule copyUUIDsForSigningIdentifier:executablePath:]
  +[NSPAppRule validateRuleDictionary:]

  // instance methods
  -[NSPAppRule setInitialWindowSize:]
  -[NSPAppRule initialWindowSize]
  -[NSPAppRule merge:]
  -[NSPAppRule configurationIdentifier]
  -[NSPAppRule setAgent:]
  -[NSPAppRule agent]
  -[NSPAppRule initFromDictionary:]
  -[NSPAppRule enableTFO]
  -[NSPAppRule setEnableTFO:]
  -[NSPAppRule setEnableDirectExtendedValidation:]
  -[NSPAppRule label]
  -[NSPAppRule setDefaults:]
  -[NSPAppRule setUseCustomProtocol:]
  -[NSPAppRule defaults]
  -[NSPAppRule enableDirectTFO]
  -[NSPAppRule fallbackCountBeforeImmediateFallback]
  -[NSPAppRule initWithCoder:]
  -[NSPAppRule useLocalFlowDivert]
  -[NSPAppRule reenableInterval]
  -[NSPAppRule setReenableInterval:]
  -[NSPAppRule useCustomProtocol]
  -[NSPAppRule setEnableNoTFOCookie:]
  -[NSPAppRule setConnectionTimeout:]
  -[NSPAppRule setEnableOptInPerTask:]
  -[NSPAppRule .cxx_destruct]
  -[NSPAppRule enableDirectExtendedValidation]
  -[NSPAppRule setServiceID:]
  -[NSPAppRule serviceID]
  -[NSPAppRule connectionIdleTimeout]
  -[NSPAppRule setLocationBundlePath:]
  -[NSPAppRule shouldComposeInitialData]
  -[NSPAppRule telemetryRatio]
  -[NSPAppRule setConfigurationIdentifier:]
  -[NSPAppRule enabled]
  -[NSPAppRule setEdgeSetIdentifier:]
  -[NSPAppRule enableUDPRace]
  -[NSPAppRule setEnableMultipath:]
  -[NSPAppRule enableCheckDate]
  -[NSPAppRule setProxyEvaluationPath:]
  -[NSPAppRule enableDirectRace]
  -[NSPAppRule isEqual:]
  -[NSPAppRule proxyEvaluationPath]
  -[NSPAppRule setFallbackTimeout:]
  -[NSPAppRule agentRegistration]
  -[NSPAppRule setConnectionIdleTimeout:]
  -[NSPAppRule setFallbackBufferLimit:]
  -[NSPAppRule disableFallback]
  -[NSPAppRule setAgentRegistration:]
  -[NSPAppRule enableOptInPerTask]
  -[NSPAppRule saveWithCompletionHandler:]
  -[NSPAppRule enableNoTFOCookie]
  -[NSPAppRule updateHash]
  -[NSPAppRule matchEffectiveApplications]
  -[NSPAppRule setEnableDirectMultipath:]
  -[NSPAppRule setDivertDNSOnly:]
  -[NSPAppRule enableMultipath]
  -[NSPAppRule noDNSDelegation]
  -[NSPAppRule setDisableFallback:]
  -[NSPAppRule setTelemetryRatio:]
  -[NSPAppRule setEnableRatio:]
  -[NSPAppRule directTLSPorts]
  -[NSPAppRule copyMatchDomainConditions]
  -[NSPAppRule fallbackTimeout]
  -[NSPAppRule setDirectTLSPorts:]
  -[NSPAppRule setEnableDirectRace:]
  -[NSPAppRule setShouldComposeInitialData:]
  -[NSPAppRule setEnableUDPRace:]
  -[NSPAppRule edgeSetIdentifier]
  -[NSPAppRule setFallbackCountBeforeImmediateFallback:]
  -[NSPAppRule copyMatchEffectiveApplicationConditions]
  -[NSPAppRule enableDirectMultipath]
  -[NSPAppRule requireTFO]
  -[NSPAppRule setEnableCheckDate:]
  -[NSPAppRule setEnableDirectTFO:]
  -[NSPAppRule initFromTLVs:]
  -[NSPAppRule connectionTimeout]
  -[NSPAppRule setUpdateHash:]
  -[NSPAppRule copyAccountIdentifierConditions]
  -[NSPAppRule copyExecutableConditions]
  -[NSPAppRule setLabel:]
  -[NSPAppRule setMatchEffectiveApplications:]
  -[NSPAppRule copyWithZone:]
  -[NSPAppRule divertDNSOnly]
  -[NSPAppRule updateNetworkAgent]
  -[NSPAppRule setEnabled:]
  -[NSPAppRule setUseLocalFlowDivert:]
  -[NSPAppRule setRequireTFO:]
  -[NSPAppRule disabledByRatio]
  -[NSPAppRule enableRatio]
  -[NSPAppRule setDisabledByRatio:]
  -[NSPAppRule fallbackBufferLimit]
  -[NSPAppRule teardownNetworkAgent]
  -[NSPAppRule encodeWithCoder:]
  -[NSPAppRule copyTLVData]
  -[NSPAppRule locationBundlePath]
  -[NSPAppRule setNoDNSDelegation:]


NSPPrivacyProxyConfigAgent : NSObject <NWNetworkAgent>
 @property  NSObject<NSPPrivacyProxyConfigAgentDelegate> *delegate
 @property  NSObject<OS_nw_proxy_config> *proxyConfiguration
 @property  NSData *configurationHash
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[NSPPrivacyProxyConfigAgent agentFromData:]
  +[NSPPrivacyProxyConfigAgent agentType]
  +[NSPPrivacyProxyConfigAgent agentDomain]

  // instance methods
  -[NSPPrivacyProxyConfigAgent copyAgentData]
  -[NSPPrivacyProxyConfigAgent setProxyConfiguration:]
  -[NSPPrivacyProxyConfigAgent proxyConfiguration]
  -[NSPPrivacyProxyConfigAgent setUserActivated:]
  -[NSPPrivacyProxyConfigAgent setKernelActivated:]
  -[NSPPrivacyProxyConfigAgent isActive]
  -[NSPPrivacyProxyConfigAgent .cxx_destruct]
  -[NSPPrivacyProxyConfigAgent agentUUID]
  -[NSPPrivacyProxyConfigAgent setDelegate:]
  -[NSPPrivacyProxyConfigAgent agentDescription]
  -[NSPPrivacyProxyConfigAgent isUserActivated]
  -[NSPPrivacyProxyConfigAgent isKernelActivated]
  -[NSPPrivacyProxyConfigAgent setAgentUUID:]
  -[NSPPrivacyProxyConfigAgent setActive:]
  -[NSPPrivacyProxyConfigAgent delegate]
  -[NSPPrivacyProxyConfigAgent setAgentDescription:]
  -[NSPPrivacyProxyConfigAgent setVoluntary:]
  -[NSPPrivacyProxyConfigAgent reportError:withOptions:]
  -[NSPPrivacyProxyConfigAgent isVoluntary]
  -[NSPPrivacyProxyConfigAgent configurationHash]
  -[NSPPrivacyProxyConfigAgent initWithDelegate:uuid:agentDesc:]
  -[NSPPrivacyProxyConfigAgent setConfigurationHash:]


NSPPrivacyProxyTokenAgent : NSObject <NWNetworkAgent>
 @property  NSObject<NSPPrivacyProxyTokenAgentDelegate> *delegate
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[NSPPrivacyProxyTokenAgent agentFromData:]
  +[NSPPrivacyProxyTokenAgent agentType]
  +[NSPPrivacyProxyTokenAgent agentDomain]

  // instance methods
  -[NSPPrivacyProxyTokenAgent copyAgentData]
  -[NSPPrivacyProxyTokenAgent setUserActivated:]
  -[NSPPrivacyProxyTokenAgent setKernelActivated:]
  -[NSPPrivacyProxyTokenAgent isActive]
  -[NSPPrivacyProxyTokenAgent .cxx_destruct]
  -[NSPPrivacyProxyTokenAgent agentUUID]
  -[NSPPrivacyProxyTokenAgent setDelegate:]
  -[NSPPrivacyProxyTokenAgent agentDescription]
  -[NSPPrivacyProxyTokenAgent isUserActivated]
  -[NSPPrivacyProxyTokenAgent isKernelActivated]
  -[NSPPrivacyProxyTokenAgent setAgentUUID:]
  -[NSPPrivacyProxyTokenAgent setActive:]
  -[NSPPrivacyProxyTokenAgent delegate]
  -[NSPPrivacyProxyTokenAgent setAgentDescription:]
  -[NSPPrivacyProxyTokenAgent setVoluntary:]
  -[NSPPrivacyProxyTokenAgent reportError:withOptions:]
  -[NSPPrivacyProxyTokenAgent tokenLowWaterMarkReached]
  -[NSPPrivacyProxyTokenAgent isVoluntary]
  -[NSPPrivacyProxyTokenAgent initWithDelegate:uuid:agentDesc:]


NSPConnectionInfo : NSObject <NSSecureCoding>
 @property  long long pathType
 @property  long long fallbackReason
 @property  double fallbackDelay
 @property  long long edgeType
 @property  NSString *edgeAddress
 @property  BOOL isMultipath
 @property  unsigned long multipathSubflowCount
 @property  unsigned long multipathConnectedSubflowCount
 @property  unsigned long multipathPrimarySubflowInterfaceIndex
 @property  NSDictionary *multipathSubflowSwitchCounts
 @property  NSDictionary *TCPInfo
 @property  NSDate *firstTxByteTimeStamp
 @property  double firstTxByteDelay
 @property  double connectionDelay
 @property  BOOL TFOSucceeded
 @property  long long IPType
 @property  long long interfaceType
 @property  unsigned long minimumRTT
 @property  double timeIntervalSinceLastUsage
 @property  NSDictionary *exceptions
 @property  NSString *interfaceName
 @property  NSArray *timingIntervals
 @property  double timeToFirstByte
 @property  long long tunnelConnectionError
 @property  BOOL isTFOProbeSucceeded
 @property  unsigned long initialBytesLeftOver
 @property  long long fallbackReasonCategory

  // class methods
  +[NSPConnectionInfo supportsSecureCoding]
  +[NSPConnectionInfo getFallbackReasonDescription:]
  +[NSPConnectionInfo fallbackReasonToErrno:]
  +[NSPConnectionInfo shouldMoveToNextEdgeForFallbackReason:]
  +[NSPConnectionInfo shouldResolveForFallbackReason:]

  // instance methods
  -[NSPConnectionInfo setInterfaceType:]
  -[NSPConnectionInfo interfaceType]
  -[NSPConnectionInfo exceptions]
  -[NSPConnectionInfo initWithCoder:]
  -[NSPConnectionInfo .cxx_destruct]
  -[NSPConnectionInfo setIsMultipath:]
  -[NSPConnectionInfo interfaceName]
  -[NSPConnectionInfo setInterfaceName:]
  -[NSPConnectionInfo TCPInfo]
  -[NSPConnectionInfo isMultipath]
  -[NSPConnectionInfo setEdgeType:]
  -[NSPConnectionInfo fallbackReason]
  -[NSPConnectionInfo setFallbackReason:]
  -[NSPConnectionInfo IPType]
  -[NSPConnectionInfo copyDictionary]
  -[NSPConnectionInfo encodeWithCoder:]
  -[NSPConnectionInfo pathType]
  -[NSPConnectionInfo TFOSucceeded]
  -[NSPConnectionInfo multipathSubflowCount]
  -[NSPConnectionInfo multipathConnectedSubflowCount]
  -[NSPConnectionInfo multipathPrimarySubflowInterfaceIndex]
  -[NSPConnectionInfo multipathSubflowSwitchCounts]
  -[NSPConnectionInfo setExceptions:]
  -[NSPConnectionInfo edgeType]
  -[NSPConnectionInfo setPathType:]
  -[NSPConnectionInfo setConnectionDelay:]
  -[NSPConnectionInfo setFirstTxByteTimeStamp:]
  -[NSPConnectionInfo setFirstTxByteDelay:]
  -[NSPConnectionInfo setEdgeAddress:]
  -[NSPConnectionInfo setIPType:]
  -[NSPConnectionInfo setMultipathSubflowSwitchCounts:]
  -[NSPConnectionInfo setMultipathSubflowCount:]
  -[NSPConnectionInfo setMultipathConnectedSubflowCount:]
  -[NSPConnectionInfo setMultipathPrimarySubflowInterfaceIndex:]
  -[NSPConnectionInfo setTCPInfo:]
  -[NSPConnectionInfo setMinimumRTT:]
  -[NSPConnectionInfo setTFOSucceeded:]
  -[NSPConnectionInfo fallbackReasonCategory]
  -[NSPConnectionInfo fallbackDelay]
  -[NSPConnectionInfo edgeAddress]
  -[NSPConnectionInfo firstTxByteTimeStamp]
  -[NSPConnectionInfo isTFOProbeSucceeded]
  -[NSPConnectionInfo connectionDelay]
  -[NSPConnectionInfo firstTxByteDelay]
  -[NSPConnectionInfo timeToFirstByte]
  -[NSPConnectionInfo tunnelConnectionError]
  -[NSPConnectionInfo timeIntervalSinceLastUsage]
  -[NSPConnectionInfo timingIntervals]
  -[NSPConnectionInfo setInitialBytesLeftOver:]
  -[NSPConnectionInfo setTunnelConnectionError:]
  -[NSPConnectionInfo setFallbackDelay:]
  -[NSPConnectionInfo setIsTFOProbeSucceeded:]
  -[NSPConnectionInfo initialBytesLeftOver]
  -[NSPConnectionInfo minimumRTT]
  -[NSPConnectionInfo timingIntervalAtIndex:forKey:]
  -[NSPConnectionInfo setTimeIntervalSinceLastUsage:]
  -[NSPConnectionInfo setTimeToFirstByte:]
  -[NSPConnectionInfo setTimingIntervals:]


NPAppProxyFlowBridge : NSObject
 @property  NEAppProxyFlow *flow
 @property  NWEndpoint *remoteEndpoint
 @property  NSObject<OS_nw_connection> *connection
 @property  int currentState
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_os_transaction> *networkTransaction
 @property  NSError *connectionError
 @property  BOOL eofNW
 @property  BOOL eofFlow

  // instance methods
  -[NPAppProxyFlowBridge flow]
  -[NPAppProxyFlowBridge startConnection]
  -[NPAppProxyFlowBridge .cxx_destruct]
  -[NPAppProxyFlowBridge eofNW]
  -[NPAppProxyFlowBridge setConnection:]
  -[NPAppProxyFlowBridge setRemoteEndpoint:]
  -[NPAppProxyFlowBridge setQueue:]
  -[NPAppProxyFlowBridge connection]
  -[NPAppProxyFlowBridge connectionError]
  -[NPAppProxyFlowBridge setFlow:]
  -[NPAppProxyFlowBridge currentState]
  -[NPAppProxyFlowBridge setConnectionError:]
  -[NPAppProxyFlowBridge queue]
  -[NPAppProxyFlowBridge remoteEndpoint]
  -[NPAppProxyFlowBridge setCurrentState:]
  -[NPAppProxyFlowBridge eofFlow]
  -[NPAppProxyFlowBridge readDataFromClient]
  -[NPAppProxyFlowBridge closeAllWithError:]
  -[NPAppProxyFlowBridge startSendReceiveLoop]
  -[NPAppProxyFlowBridge readDataFromConnection]
  -[NPAppProxyFlowBridge closeFlowWithError:]
  -[NPAppProxyFlowBridge readMultipleFromClient]
  -[NPAppProxyFlowBridge readMultipleFromConnection]
  -[NPAppProxyFlowBridge handleDataWriteToFlowCompletion:]
  -[NPAppProxyFlowBridge writeDataToFlow:]
  -[NPAppProxyFlowBridge writeMultipleToConnection:count:]
  -[NPAppProxyFlowBridge writeDataToConnection:]
  -[NPAppProxyFlowBridge handleDataFromClient:readError:]
  -[NPAppProxyFlowBridge handleConnectionReady]
  -[NPAppProxyFlowBridge initWithAppProxyFlow:]
  -[NPAppProxyFlowBridge networkTransaction]
  -[NPAppProxyFlowBridge setNetworkTransaction:]
  -[NPAppProxyFlowBridge setEofNW:]
  -[NPAppProxyFlowBridge setEofFlow:]


NSPPrivacyProxyPolicyTierMap : PBCodable <NSCopying>
 @property  int tier
 @property  NSPPrivacyProxyPolicy *policy

  // instance methods
  -[NSPPrivacyProxyPolicyTierMap setTier:]
  -[NSPPrivacyProxyPolicyTierMap mergeFrom:]
  -[NSPPrivacyProxyPolicyTierMap StringAsTier:]
  -[NSPPrivacyProxyPolicyTierMap .cxx_destruct]
  -[NSPPrivacyProxyPolicyTierMap setPolicy:]
  -[NSPPrivacyProxyPolicyTierMap dictionaryRepresentation]
  -[NSPPrivacyProxyPolicyTierMap writeTo:]
  -[NSPPrivacyProxyPolicyTierMap policy]
  -[NSPPrivacyProxyPolicyTierMap tier]
  -[NSPPrivacyProxyPolicyTierMap isEqual:]
  -[NSPPrivacyProxyPolicyTierMap copyTo:]
  -[NSPPrivacyProxyPolicyTierMap readFrom:]
  -[NSPPrivacyProxyPolicyTierMap tierAsString:]
  -[NSPPrivacyProxyPolicyTierMap copyWithZone:]


NPTunnelFlowProtocol : NPTunnelFlow
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} inputProtocol
 @property  BOOL waitingForOutput

  // instance methods
  -[NPTunnelFlowProtocol connect]
  -[NPTunnelFlowProtocol disconnect]
  -[NPTunnelFlowProtocol .cxx_destruct]
  -[NPTunnelFlowProtocol initWithTunnel:appRule:inputProtocol:extraProperties:]
  -[NPTunnelFlowProtocol handleAppData:]
  -[NPTunnelFlowProtocol sendDataToClient:fromTunnel:]
  -[NPTunnelFlowProtocol readDataFromClient]
  -[NPTunnelFlowProtocol waitingForOutput]
  -[NPTunnelFlowProtocol closeClientFlowWithError:]
  -[NPTunnelFlowProtocol isClientFlowClosed]
  -[NPTunnelFlowProtocol handleTunnelReadyForData]
  -[NPTunnelFlowProtocol notifyClientConnected]
  -[NPTunnelFlowProtocol addBufferToFrameArray:bufferSize:]
  -[NPTunnelFlowProtocol dropInputProtocol]
  -[NPTunnelFlowProtocol addInputFramesToArray:limitMinimumBytes:limitMaximumBytes:limitMaximumFrames:]
  -[NPTunnelFlowProtocol addOutputFramesToArray:limitMinimumBytes:limitMaximumBytes:limitMaximumFrames:]
  -[NPTunnelFlowProtocol handleOutputFrame:send:]
  -[NPTunnelFlowProtocol inputProtocol]


PrivacyProxyNetworkStatusTime : NSObject <NSSecureCoding, NSCopying>
 @property  PrivacyProxyNetworkStatus *networkStatus
 @property  NSDate *networkStatusStartTime
 @property  NSDate *networkStatusEndTime

  // class methods
  +[PrivacyProxyNetworkStatusTime supportsSecureCoding]

  // instance methods
  -[PrivacyProxyNetworkStatusTime descriptionWithIndent:options:]
  -[PrivacyProxyNetworkStatusTime initWithCoder:]
  -[PrivacyProxyNetworkStatusTime .cxx_destruct]
  -[PrivacyProxyNetworkStatusTime setNetworkStatusEndTime:]
  -[PrivacyProxyNetworkStatusTime setNetworkStatusStartTime:]
  -[PrivacyProxyNetworkStatusTime setNetworkStatus:]
  -[PrivacyProxyNetworkStatusTime networkStatusStartTime]
  -[PrivacyProxyNetworkStatusTime copyWithZone:]
  -[PrivacyProxyNetworkStatusTime diagnostics]
  -[PrivacyProxyNetworkStatusTime networkStatus]
  -[PrivacyProxyNetworkStatusTime encodeWithCoder:]
  -[PrivacyProxyNetworkStatusTime networkStatusEndTime]


NSPServiceStatusManager : NSObject <NSSecureCoding, NSCopying>
 @property  NSObject<NSPServiceStatusManagerDelegate> *delegate
 @property  long long diskVersion
 @property  unsigned long generation
 @property  PrivacyProxyServiceStatus *serviceStatus
 @property  NSPUserNotification *userNotification
 @property  NSMutableArray *serviceStatusTimeline
 @property  NSMutableArray *networkStatusTimeline
 @property  unsigned long userTier
 @property  unsigned long effectiveTier
 @property  unsigned long lastOutageType

  // class methods
  +[NSPServiceStatusManager removeFromPreferences]
  +[NSPServiceStatusManager supportsSecureCoding]

  // instance methods
  -[NSPServiceStatusManager saveToPreferences]
  -[NSPServiceStatusManager diskVersion]
  -[NSPServiceStatusManager setUserTier:]
  -[NSPServiceStatusManager descriptionWithIndent:options:]
  -[NSPServiceStatusManager reportFraudAlert]
  -[NSPServiceStatusManager lastOutageType]
  -[NSPServiceStatusManager setGeneration:]
  -[NSPServiceStatusManager initWithCoder:]
  -[NSPServiceStatusManager postNotification]
  -[NSPServiceStatusManager reportServiceActive]
  -[NSPServiceStatusManager updateNetworkStatus:type:name:]
  -[NSPServiceStatusManager isServiceOutage]
  -[NSPServiceStatusManager reportDisabledOnWiFiName:]
  -[NSPServiceStatusManager reportActiveOnCellularName:]
  -[NSPServiceStatusManager .cxx_destruct]
  -[NSPServiceStatusManager serviceStatus]
  -[NSPServiceStatusManager reportActiveOnInterfaceName:displayName:type:]
  -[NSPServiceStatusManager setServiceStatus:]
  -[NSPServiceStatusManager reportBlockedOnCellularName:]
  -[NSPServiceStatusManager generation]
  -[NSPServiceStatusManager setDelegate:]
  -[NSPServiceStatusManager reportServiceOutageWithType:outageReasonStats:]
  -[NSPServiceStatusManager isEffectiveTierSubscriber]
  -[NSPServiceStatusManager reportDisabledOnCellularName:]
  -[NSPServiceStatusManager setEffectiveTier:]
  -[NSPServiceStatusManager effectiveTier]
  -[NSPServiceStatusManager userNotification]
  -[NSPServiceStatusManager reportSystemIncompatibility]
  -[NSPServiceStatusManager openiCloudSettings]
  -[NSPServiceStatusManager setServiceStatusOnTimeline:]
  -[NSPServiceStatusManager serviceStatusTimeline]
  -[NSPServiceStatusManager isServiceActive]
  -[NSPServiceStatusManager reportBlockedOnInterfaceName:displayName:type:]
  -[NSPServiceStatusManager reportActiveOnWiFiName:]
  -[NSPServiceStatusManager isNetworkOutage]
  -[NSPServiceStatusManager userTier]
  -[NSPServiceStatusManager initWithUserTier:effectiveUserTier:delegate:]
  -[NSPServiceStatusManager reportDisabledOnInterfaceName:displayName:type:]
  -[NSPServiceStatusManager setNetworkStatusTimeline:]
  -[NSPServiceStatusManager clearNetworkStatusForType:]
  -[NSPServiceStatusManager handleEffectiveUserTierChange:]
  -[NSPServiceStatusManager networkStatusTimeline]
  -[NSPServiceStatusManager setLastOutageType:]
  -[NSPServiceStatusManager reportServiceStatus:title:message:serviceStatusDetails:]
  -[NSPServiceStatusManager setUserNotification:]
  -[NSPServiceStatusManager delegate]
  -[NSPServiceStatusManager reportSubscriberUnsupportedRegion:]
  -[NSPServiceStatusManager queue]
  -[NSPServiceStatusManager setNetworkStatusOnTimeline:]
  -[NSPServiceStatusManager publishDailyServiceStatus]
  -[NSPServiceStatusManager copyWithZone:]
  -[NSPServiceStatusManager diagnostics]
  -[NSPServiceStatusManager reportServiceDisabled]
  -[NSPServiceStatusManager reportBlockedOnWiFiName:]
  -[NSPServiceStatusManager publishDailyNetworkStatus]
  -[NSPServiceStatusManager reportUnsupportedRegion:]
  -[NSPServiceStatusManager setServiceStatusTimeline:]
  -[NSPServiceStatusManager initFromPreferencesWithUserTier:effectiveUserTier:delegate:]
  -[NSPServiceStatusManager encodeWithCoder:]


NSURLSessionDelegate : NSObject <NSURLSessionDelegate>
 @property  NSString *validationHostname
 @property  BOOL enableExtendedValidation
 @property  BOOL ignoreInvalidCerts
 @property  NSString *leafOID
 @property  BOOL revocationFailClosed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NSURLSessionDelegate URLSession:didReceiveChallenge:completionHandler:]
  -[NSURLSessionDelegate .cxx_destruct]
  -[NSURLSessionDelegate leafOID]
  -[NSURLSessionDelegate ignoreInvalidCerts]
  -[NSURLSessionDelegate setLeafOID:]
  -[NSURLSessionDelegate setValidationHostname:]
  -[NSURLSessionDelegate validationHostname]
  -[NSURLSessionDelegate setEnableExtendedValidation:]
  -[NSURLSessionDelegate setIgnoreInvalidCerts:]
  -[NSURLSessionDelegate revocationFailClosed]
  -[NSURLSessionDelegate enableExtendedValidation]
  -[NSURLSessionDelegate setRevocationFailClosed:]


NSPPrivacyProxyNetworkRegistration : NSObject <NSPPrivacyProxyConfigAgentDelegate>
 @property  <NSPPrivacyProxyNetworkRegistrationDelegate> *delegate
 @property  NSPPrivacyProxyConfigAgent *proxyConfigAgent
 @property  NWNetworkAgentRegistration *proxyConfigAgentRegistration
 @property  NSObject<OS_nw_proxy_config> *proxyConfiguration
 @property  NSData *configurationHash
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NSPPrivacyProxyNetworkRegistration isRegistered]
  -[NSPPrivacyProxyNetworkRegistration setProxyConfiguration:]
  -[NSPPrivacyProxyNetworkRegistration proxyConfiguration]
  -[NSPPrivacyProxyNetworkRegistration .cxx_destruct]
  -[NSPPrivacyProxyNetworkRegistration setDelegate:]
  -[NSPPrivacyProxyNetworkRegistration resetError]
  -[NSPPrivacyProxyNetworkRegistration delegate]
  -[NSPPrivacyProxyNetworkRegistration configurationHash]
  -[NSPPrivacyProxyNetworkRegistration reportErrorForAgent:error:withOptions:]
  -[NSPPrivacyProxyNetworkRegistration setConfigurationHash:]
  -[NSPPrivacyProxyNetworkRegistration proxyConfigAgent]
  -[NSPPrivacyProxyNetworkRegistration proxyConfigAgentRegistration]
  -[NSPPrivacyProxyNetworkRegistration resetProxyConfigAgentFileHandle]
  -[NSPPrivacyProxyNetworkRegistration initWithAgentUUID:agentDescription:delegate:]
  -[NSPPrivacyProxyNetworkRegistration networkRegistrationDescription]
  -[NSPPrivacyProxyNetworkRegistration resetProxyAgent]
  -[NSPPrivacyProxyNetworkRegistration teardownProxyAgent]
  -[NSPPrivacyProxyNetworkRegistration proxyConfigurationHash]
  -[NSPPrivacyProxyNetworkRegistration setProxyConfigAgent:]
  -[NSPPrivacyProxyNetworkRegistration setProxyConfigAgentRegistration:]


NSPPrivacyProxyMultiHopNetworkRegistration : NSPPrivacyProxyNetworkRegistration
  // instance methods
  -[NSPPrivacyProxyMultiHopNetworkRegistration initWithAgentUUID:delegate:]
  -[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:ingressTokenAgentUUID:egressTokenAgentUUID:fallbackAgentUUID:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackProxyConfigHash:]


NSPPrivacyProxySingleHopNetworkRegistration : NSPPrivacyProxyNetworkRegistration
  // instance methods
  -[NSPPrivacyProxySingleHopNetworkRegistration initWithAgentUUID:delegate:]
  -[NSPPrivacyProxySingleHopNetworkRegistration setProxyAgentConfiguration:proxyKeyArray:tokenAgentUUID:fallbackAgentUUID:shouldFailOpen:fallbackProxyConfigHash:]


NSPPrivacyProxyMultiHopFallbackNetworkRegistration : NSPPrivacyProxyNetworkRegistration
  // instance methods
  -[NSPPrivacyProxyMultiHopFallbackNetworkRegistration initWithAgentUUID:delegate:]
  -[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:ingressTokenAgentUUID:egressTokenAgentUUID:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:]


NSPPrivacyProxySingleHopFallbackNetworkRegistration : NSPPrivacyProxyNetworkRegistration
  // instance methods
  -[NSPPrivacyProxySingleHopFallbackNetworkRegistration initWithAgentUUID:delegate:]
  -[NSPPrivacyProxySingleHopFallbackNetworkRegistration setProxyAgentConfiguration:proxyKeyArray:tokenAgentUUID:shouldFailOpen:]


NPTunnelTuscany : NPTunnel
 @property  @? pendingPingCompletionHandler
 @property  BOOL isFirstTunnel
 @property  unsigned int dayPassSessionCounter
 @property  unsigned long maxFrameSize
 @property  ^v clientRef
 @property  long long currentMTU
 @property  BOOL ignoreWaldoTimestamp
 @property  NSDate *dayPassCreationDate

  // instance methods
  -[NPTunnelTuscany initialWindowSize]
  -[NPTunnelTuscany .cxx_destruct]
  -[NPTunnelTuscany handleConnectionError]
  -[NPTunnelTuscany closeFlow:]
  -[NPTunnelTuscany start]
  -[NPTunnelTuscany dealloc]
  -[NPTunnelTuscany destroyConnection]
  -[NPTunnelTuscany cancelConnection]
  -[NPTunnelTuscany maxFrameSize]
  -[NPTunnelTuscany initWithEndpoint:parameters:appRule:flowProperties:onRamp:delegate:]
  -[NPTunnelTuscany setClientRef:]
  -[NPTunnelTuscany clientRef]
  -[NPTunnelTuscany createTuscanyClient]
  -[NPTunnelTuscany dayPassSessionCounter]
  -[NPTunnelTuscany currentMTU]
  -[NPTunnelTuscany startConnectionTimer]
  -[NPTunnelTuscany cancelConnectionTimer]
  -[NPTunnelTuscany sendUsageReportWithRTT:geohash:fallbackReason:]
  -[NPTunnelTuscany pingWithCompletionHandler:]
  -[NPTunnelTuscany createConnectionInfo]
  -[NPTunnelTuscany isTFOProbeSucceeded]
  -[NPTunnelTuscany handleHelloAck:]
  -[NPTunnelTuscany handlePingResponseRTT:geohash:]
  -[NPTunnelTuscany flowIsFirstFlow:]
  -[NPTunnelTuscany dayPassCreationDate]
  -[NPTunnelTuscany acknowledgeData:sentToFlow:]
  -[NPTunnelTuscany sendData:forFlow:]
  -[NPTunnelTuscany handleFlowUsedTunnel]
  -[NPTunnelTuscany handleFallbackForFlow:]
  -[NPTunnelTuscany maxDataSendSizeForFlow:]
  -[NPTunnelTuscany handleConnected]
  -[NPTunnelTuscany handleDisconnected]
  -[NPTunnelTuscany canHandleMoreData]
  -[NPTunnelTuscany isFirstTunnel]
  -[NPTunnelTuscany sendDataOnUDPSession:]
  -[NPTunnelTuscany setIgnoreWaldoTimestamp:]
  -[NPTunnelTuscany handleInputAvailable]
  -[NPTunnelTuscany handleReadData:]
  -[NPTunnelTuscany handleEOF]
  -[NPTunnelTuscany handleDataWrittenWithError:]
  -[NPTunnelTuscany writeInitialData]
  -[NPTunnelTuscany allocateFlowID]
  -[NPTunnelTuscany ignoreWaldoTimestamp]
  -[NPTunnelTuscany pendingPingCompletionHandler]
  -[NPTunnelTuscany setPendingPingCompletionHandler:]
  -[NPTunnelTuscany setIsFirstTunnel:]


NSPFlowDivertProvider : NEAppProxyProvider
 @property  NSPManager *manager

  // instance methods
  -[NSPFlowDivertProvider setManager:]
  -[NSPFlowDivertProvider .cxx_destruct]
  -[NSPFlowDivertProvider handleNewFlow:]
  -[NSPFlowDivertProvider startProxyWithOptions:completionHandler:]
  -[NSPFlowDivertProvider stopProxyWithReason:completionHandler:]
  -[NSPFlowDivertProvider init]
  -[NSPFlowDivertProvider manager]


NSPPrivacyProxyPolicy : PBCodable <NSCopying>
 @property  unsigned long conditionsCount
 @property  ^i conditions

  // instance methods
  -[NSPPrivacyProxyPolicy conditions]
  -[NSPPrivacyProxyPolicy addConditions:]
  -[NSPPrivacyProxyPolicy mergeFrom:]
  -[NSPPrivacyProxyPolicy clearConditions]
  -[NSPPrivacyProxyPolicy conditionsCount]
  -[NSPPrivacyProxyPolicy dictionaryRepresentation]
  -[NSPPrivacyProxyPolicy writeTo:]
  -[NSPPrivacyProxyPolicy isEqual:]
  -[NSPPrivacyProxyPolicy copyTo:]
  -[NSPPrivacyProxyPolicy readFrom:]
  -[NSPPrivacyProxyPolicy setConditions:count:]
  -[NSPPrivacyProxyPolicy conditionsAsString:]
  -[NSPPrivacyProxyPolicy StringAsConditions:]
  -[NSPPrivacyProxyPolicy conditionsAtIndex:]
  -[NSPPrivacyProxyPolicy dealloc]
  -[NSPPrivacyProxyPolicy copyWithZone:]


NSPControlConnection : NSObject
 @property  unsigned long flowIdentifier

  // instance methods
  -[NSPControlConnection flowIdentifier]
  -[NSPControlConnection initFromMetadata:]
  -[NSPControlConnection initFromStream:]
  -[NSPControlConnection initFromTask:]
  -[NSPControlConnection initFromConnection:]
  -[NSPControlConnection initFromNWConnection:]
  -[NSPControlConnection fetchConnectionInfoWithCompletionHandler:]


NSPConfigurationManager : NSObject
 @property  NSObject<NSPConfigurationManagerDelegate> *delegate
 @property  NSPConfiguration *configuration
 @property  NSTimer *resurrectionTimer
 @property  NSTimer *enableCheckTimer
 @property  BOOL isConfigFetchRequestPending
 @property  unsigned long generation
 @property  NWPath *path
 @property  NSObject<OS_dispatch_source> *configFetchRetryTimer
 @property  unsigned long configFetchRetryAttempt
 @property  BOOL configFetchOnNetworkChange
 @property  NSURLSession *configFetchSession
 @property  NSDate *configFetchRetryDate
 @property  BOOL useDefaultInterface
 @property  unsigned long configFetchSuccessCount
 @property  unsigned long configFetchFailedCount
 @property  unsigned long effectiveUserTier
 @property  NSString *trueClientIPAddress
 @property  NSDictionary *networkCharacteristics

  // class methods
  +[NSPConfigurationManager reasonToString:]

  // instance methods
  -[NSPConfigurationManager useDefaultInterface]
  -[NSPConfigurationManager setGeohashOverride:]
  -[NSPConfigurationManager setUseDefaultInterface:]
  -[NSPConfigurationManager setUserTier:]
  -[NSPConfigurationManager copyPolicyConditionsFromPrivacyProxyPolicy:]
  -[NSPConfigurationManager trueClientIPAddress]
  -[NSPConfigurationManager setEnableCheckTimer:]
  -[NSPConfigurationManager setConfigFetchRetryAttempt:]
  -[NSPConfigurationManager setGeneration:]
  -[NSPConfigurationManager setConfigFetchOnNetworkChange:]
  -[NSPConfigurationManager setPath:]
  -[NSPConfigurationManager cloudSubscriptionCheckChanged]
  -[NSPConfigurationManager proxiesInfoUpdated]
  -[NSPConfigurationManager userPreferredTierChanged]
  -[NSPConfigurationManager configurationSubscriberPoliciesCount]
  -[NSPConfigurationManager configuration]
  -[NSPConfigurationManager configurationRestart]
  -[NSPConfigurationManager fetchURL:interface:eTag:requestType:session:accessToken:reason:completionHandler:]
  -[NSPConfigurationManager .cxx_destruct]
  -[NSPConfigurationManager geohashSettingsChanged]
  -[NSPConfigurationManager configurationFetchFailure:error:]
  -[NSPConfigurationManager updateConfiguration:]
  -[NSPConfigurationManager configFetchRetryTimer]
  -[NSPConfigurationManager setupResurrectionTimer]
  -[NSPConfigurationManager setup]
  -[NSPConfigurationManager refreshConfigurationFetchWithReason:completionHandler:]
  -[NSPConfigurationManager setConfigurationFetchRetryTimer:]
  -[NSPConfigurationManager configuredPrivacyProxyPolicy]
  -[NSPConfigurationManager effectiveUserTierChanged]
  -[NSPConfigurationManager effectiveUserTier]
  -[NSPConfigurationManager generation]
  -[NSPConfigurationManager publishDailyConfigurationStats]
  -[NSPConfigurationManager setDelegate:]
  -[NSPConfigurationManager setConfigFetchSuccessCount:]
  -[NSPConfigurationManager setupTimers]
  -[NSPConfigurationManager isConfigFetchRequestPending]
  -[NSPConfigurationManager userTierChanged]
  -[NSPConfigurationManager effectiveTier]
  -[NSPConfigurationManager configFetchRetryDate]
  -[NSPConfigurationManager resetConfiguration]
  -[NSPConfigurationManager getGeohashSharingPreference]
  -[NSPConfigurationManager refreshConfigurationWithReason:completionHandler:]
  -[NSPConfigurationManager setupURLSession]
  -[NSPConfigurationManager setResurrectionTimer:]
  -[NSPConfigurationManager setupEnableCheckTimer]
  -[NSPConfigurationManager configurationFetched]
  -[NSPConfigurationManager resetTimers]
  -[NSPConfigurationManager checkConfigurationFetchRequired]
  -[NSPConfigurationManager setUserEventAgentConfigurationFetchParameters]
  -[NSPConfigurationManager resetConfigurationManager]
  -[NSPConfigurationManager mergeProxyTrafficStateWithCurrentPolicy]
  -[NSPConfigurationManager retryNetworkFetch]
  -[NSPConfigurationManager configFetchFailedCount]
  -[NSPConfigurationManager setProxyAccountType:]
  -[NSPConfigurationManager resetPendingFetches]
  -[NSPConfigurationManager enableCheckTimer]
  -[NSPConfigurationManager currentConfiguration]
  -[NSPConfigurationManager configurationEnabled:]
  -[NSPConfigurationManager configFetchSuccessCount]
  -[NSPConfigurationManager configurationUpdated]
  -[NSPConfigurationManager setTrueClientIPAddress:]
  -[NSPConfigurationManager path]
  -[NSPConfigurationManager delegate]
  -[NSPConfigurationManager setConfigFetchSession:]
  -[NSPConfigurationManager setConfigFetchRetryDate:]
  -[NSPConfigurationManager fetchPrivacyProxyConfigurationFile:interface:eTag:accessToken:reason:completionHandler:]
  -[NSPConfigurationManager configFetchRetryAttempt]
  -[NSPConfigurationManager resurrectionTimer]
  -[NSPConfigurationManager setEffectiveUserTier:]
  -[NSPConfigurationManager setConfigFetchFailedCount:]
  -[NSPConfigurationManager getPrivacyProxyAccountType]
  -[NSPConfigurationManager dealloc]
  -[NSPConfigurationManager configFetchOnNetworkChange]
  -[NSPConfigurationManager setProxyTrafficState:proxyTraffic:]
  -[NSPConfigurationManager diagnostics]
  -[NSPConfigurationManager handlePathChange:]
  -[NSPConfigurationManager setIsConfigFetchRequestPending:]
  -[NSPConfigurationManager configurationEnabledStateUpdated]
  -[NSPConfigurationManager trialConfigurationVersionChanged]
  -[NSPConfigurationManager setConfigFetchRetryTimer:]
  -[NSPConfigurationManager initWithDelegate:configuration:]
  -[NSPConfigurationManager setNetworkCharacteristics:]
  -[NSPConfigurationManager setConfigurationTrialVersion:]
  -[NSPConfigurationManager authenticationInfoUpdated]
  -[NSPConfigurationManager policiesUpdated:]
  -[NSPConfigurationManager setGeohashSharingPreference:]
  -[NSPConfigurationManager copyProxyInfo:]
  -[NSPConfigurationManager networkInterface]
  -[NSPConfigurationManager networkCharacteristics]
  -[NSPConfigurationManager resurrectionDateUpdated]
  -[NSPConfigurationManager cleanupURLSession]
  -[NSPConfigurationManager setConfiguration:]
  -[NSPConfigurationManager proxyTokenFetchStateUpdated]
  -[NSPConfigurationManager configFetchSession]


NPTunnel : NSObject
 @property  BOOL eof
 @property  NSObject<OS_nw_endpoint> *localEndpoint
 @property  NSObject<OS_nw_path> *path
 @property  BOOL handledDisconnected
 @property  BOOL disableIdleTimeout
 @property  long long connectionState
 @property  NSDate *connectionStartDate
 @property  int error
 @property  long long fallbackReason
 @property  double timeToFirstRequest
 @property  double timeToFirstByte
 @property  BOOL isCancelled
 @property  NSUUID *identifier
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} protocol
 @property  NSObject<OS_nw_parameters> *parameters
 @property  NSObject<OS_nw_endpoint> *endpoint
 @property  NSObject<OS_nw_interface> *outputInterface
 @property  <NPTunnelDelegate> *delegate
 @property  NSMutableDictionary *flows
 @property  NSPAppRule *appRule
 @property  BOOL canHandleMoreData
 @property  unsigned long initialWindowSize
 @property  BOOL isConnectionAlive
 @property  ^Q timestamps
 @property  BOOL isTFOProbeSucceeded
 @property  BOOL isReadyForData

  // class methods
  +[NPTunnel initializeProtocol]

  // instance methods
  -[NPTunnel connectionState]
  -[NPTunnel initialWindowSize]
  -[NPTunnel write:]
  -[NPTunnel setPath:]
  -[NPTunnel timestamps]
  -[NPTunnel eof]
  -[NPTunnel localEndpoint]
  -[NPTunnel .cxx_destruct]
  -[NPTunnel isCancelled]
  -[NPTunnel setLocalEndpoint:]
  -[NPTunnel setIsCancelled:]
  -[NPTunnel identifier]
  -[NPTunnel setConnectionState:]
  -[NPTunnel flows]
  -[NPTunnel closeFlow:]
  -[NPTunnel path]
  -[NPTunnel delegate]
  -[NPTunnel fallbackReason]
  -[NPTunnel setFallbackReason:]
  -[NPTunnel start]
  -[NPTunnel dealloc]
  -[NPTunnel endpoint]
  -[NPTunnel protocol]
  -[NPTunnel parameters]
  -[NPTunnel setError:]
  -[NPTunnel removeFlow:]
  -[NPTunnel error]
  -[NPTunnel appRule]
  -[NPTunnel setEof:]
  -[NPTunnel destroyConnection]
  -[NPTunnel cancelConnection]
  -[NPTunnel addNewFlow:]
  -[NPTunnel hasFlow:]
  -[NPTunnel isConnectionAlive]
  -[NPTunnel connectionStartDate]
  -[NPTunnel createConnectionInfo]
  -[NPTunnel setConnectionStartDate:]
  -[NPTunnel isTFOProbeSucceeded]
  -[NPTunnel timeToFirstByte]
  -[NPTunnel handleFlowClosed:withFallbackReason:]
  -[NPTunnel sendData:toClientFlow:]
  -[NPTunnel increaseWindowSizeForFlow:byBytes:]
  -[NPTunnel flowIsFirstFlow:]
  -[NPTunnel acknowledgeData:sentToFlow:]
  -[NPTunnel sendData:forFlow:]
  -[NPTunnel handleFlowUsedTunnel]
  -[NPTunnel handleFallbackForFlow:]
  -[NPTunnel timeToFirstRequest]
  -[NPTunnel disableIdleTimeout]
  -[NPTunnel setDisableIdleTimeout:]
  -[NPTunnel setTimeToFirstByte:]
  -[NPTunnel maxDataSendSizeForFlow:]
  -[NPTunnel isReadyForData]
  -[NPTunnel handleConnected]
  -[NPTunnel setTimeToFirstRequest:]
  -[NPTunnel handleDisconnected]
  -[NPTunnel readMinimumLength:maximumLength:]
  -[NPTunnel canHandleMoreData]
  -[NPTunnel handleCanHandleMoreData]
  -[NPTunnel initWithEndpoint:parameters:appRule:flowProperties:delegate:]
  -[NPTunnel outputInterface]
  -[NPTunnel handleReady]
  -[NPTunnel handleInputAvailable]
  -[NPTunnel handleReadData:]
  -[NPTunnel handleEOF]
  -[NPTunnel handleDataWrittenWithError:]
  -[NPTunnel writeInitialData]
  -[NPTunnel allocateFlowID]
  -[NPTunnel startIdleTimer]
  -[NPTunnel teardownOutputHandler]
  -[NPTunnel handleConnectionIsDisconnected]
  -[NPTunnel handleOutputAvailable]
  -[NPTunnel handledDisconnected]
  -[NPTunnel setHandledDisconnected:]


NSPPrivacyTokenManager : NSObject
 @property  Class authenticationClass
 @property  NSString *tokenFetchURL
 @property  NSURLSession *tokenFetchURLSession
 @property  unsigned long totalRequestedTokenCount
 @property  unsigned long totalUnactivatedTokenCount
 @property  unsigned long totalActivatedTokenCount
 @property  NSString *trueClientIPAddress

  // class methods
  +[NSPPrivacyTokenManager sharedTokenManager]

  // instance methods
  -[NSPPrivacyTokenManager trueClientIPAddress]
  -[NSPPrivacyTokenManager totalActivatedTokenCount]
  -[NSPPrivacyTokenManager tokenFetchURL]
  -[NSPPrivacyTokenManager fetchPrivacyTokensOnInterface:tierType:proxyURL:tokenVendor:tokenIssuancePublicKey:tokenCount:accessToken:retryAttempt:completionHandler:]
  -[NSPPrivacyTokenManager setTokenFetchURL:]
  -[NSPPrivacyTokenManager .cxx_destruct]
  -[NSPPrivacyTokenManager activateTokens:unactivatedListFromServer:]
  -[NSPPrivacyTokenManager setTokenFetchURLSession:]
  -[NSPPrivacyTokenManager generateTokensUsingTokenBlinder:tokenCount:]
  -[NSPPrivacyTokenManager copyTokenInfo:]
  -[NSPPrivacyTokenManager updateTokenFetchURL:authenticationType:ignoreInvalidCerts:]
  -[NSPPrivacyTokenManager setAuthenticationClass:]
  -[NSPPrivacyTokenManager setTotalRequestedTokenCount:]
  -[NSPPrivacyTokenManager authenticationClass]
  -[NSPPrivacyTokenManager setTrueClientIPAddress:]
  -[NSPPrivacyTokenManager setTotalActivatedTokenCount:]
  -[NSPPrivacyTokenManager dealloc]
  -[NSPPrivacyTokenManager totalUnactivatedTokenCount]
  -[NSPPrivacyTokenManager generateRandomTokens:]
  -[NSPPrivacyTokenManager setTotalUnactivatedTokenCount:]
  -[NSPPrivacyTokenManager totalRequestedTokenCount]
  -[NSPPrivacyTokenManager tokenFetchURLSession]


NSPPrivacyProxyAuthenticationInfo : PBCodable <NSCopying>
 @property  BOOL hasAuthType
 @property  int authType
 @property  NSString *authURL

  // instance methods
  -[NSPPrivacyProxyAuthenticationInfo mergeFrom:]
  -[NSPPrivacyProxyAuthenticationInfo setAuthType:]
  -[NSPPrivacyProxyAuthenticationInfo .cxx_destruct]
  -[NSPPrivacyProxyAuthenticationInfo dictionaryRepresentation]
  -[NSPPrivacyProxyAuthenticationInfo writeTo:]
  -[NSPPrivacyProxyAuthenticationInfo StringAsAuthType:]
  -[NSPPrivacyProxyAuthenticationInfo authURL]
  -[NSPPrivacyProxyAuthenticationInfo isEqual:]
  -[NSPPrivacyProxyAuthenticationInfo copyTo:]
  -[NSPPrivacyProxyAuthenticationInfo readFrom:]
  -[NSPPrivacyProxyAuthenticationInfo setAuthURL:]
  -[NSPPrivacyProxyAuthenticationInfo hasAuthType]
  -[NSPPrivacyProxyAuthenticationInfo authTypeAsString:]
  -[NSPPrivacyProxyAuthenticationInfo copyWithZone:]
  -[NSPPrivacyProxyAuthenticationInfo authType]
  -[NSPPrivacyProxyAuthenticationInfo setHasAuthType:]


NSPPrivacyProxyTokenInfo : PBCodable <NSCopying>
 @property  NSString *proxyURL
 @property  NSData *tokenKeyID
 @property  NSMutableArray *unactivatedTokenLists
 @property  BOOL hasVendor
 @property  NSString *vendor

  // class methods
  +[NSPPrivacyProxyTokenInfo unactivatedTokenListType]

  // instance methods
  -[NSPPrivacyProxyTokenInfo vendor]
  -[NSPPrivacyProxyTokenInfo setVendor:]
  -[NSPPrivacyProxyTokenInfo hasVendor]
  -[NSPPrivacyProxyTokenInfo setProxyURL:]
  -[NSPPrivacyProxyTokenInfo proxyURL]
  -[NSPPrivacyProxyTokenInfo mergeFrom:]
  -[NSPPrivacyProxyTokenInfo unactivatedTokenLists]
  -[NSPPrivacyProxyTokenInfo unactivatedTokenListsCount]
  -[NSPPrivacyProxyTokenInfo .cxx_destruct]
  -[NSPPrivacyProxyTokenInfo dictionaryRepresentation]
  -[NSPPrivacyProxyTokenInfo writeTo:]
  -[NSPPrivacyProxyTokenInfo setUnactivatedTokenLists:]
  -[NSPPrivacyProxyTokenInfo isEqual:]
  -[NSPPrivacyProxyTokenInfo copyTo:]
  -[NSPPrivacyProxyTokenInfo readFrom:]
  -[NSPPrivacyProxyTokenInfo setTokenKeyID:]
  -[NSPPrivacyProxyTokenInfo clearUnactivatedTokenLists]
  -[NSPPrivacyProxyTokenInfo copyWithZone:]
  -[NSPPrivacyProxyTokenInfo addUnactivatedTokenList:]
  -[NSPPrivacyProxyTokenInfo unactivatedTokenListAtIndex:]
  -[NSPPrivacyProxyTokenInfo tokenKeyID]


NSPToken : NSObject <NSSecureCoding, NSCopying>
 @property  NSMutableArray *tokens
 @property  NSDate *expirationDate

  // class methods
  +[NSPToken supportsSecureCoding]

  // instance methods
  -[NSPToken tokens]
  -[NSPToken descriptionWithIndent:options:]
  -[NSPToken initWithCoder:]
  -[NSPToken .cxx_destruct]
  -[NSPToken setExpirationDate:]
  -[NSPToken setTokens:]
  -[NSPToken initWithExpirationDate:]
  -[NSPToken copyWithZone:]
  -[NSPToken expirationDate]
  -[NSPToken encodeWithCoder:]


NSPProxyTokenInfo : NSObject <NSSecureCoding, NSCopying, NSPPrivacyProxyTokenRegistrationDelegate>
 @property  <NSPProxyTokenDelegate> *delegate
 @property  NSPPrivacyProxyProxyInfo *proxyInfo
 @property  unsigned long tokenCount
 @property  NSPPrivacyProxyTokenRegistration *tokenRegistration
 @property  NSUUID *tokenAgentUUID
 @property  NWPath *tokenPath
 @property  BOOL tokenRequestPending
 @property  NSObject<OS_dispatch_source> *tokenFetchRetryTimer
 @property  unsigned long tokenFetchRetryAttempt
 @property  BOOL tokenFetchRetryOnKeyOrNetworkChange
 @property  NSDate *tokenFetchRetryDate
 @property  BOOL useDefaultInterface
 @property  BOOL subscriber
 @property  BOOL reportTokenFetchOutage
 @property  unsigned long tokenFetchSuccessCount
 @property  unsigned long tokenConsumedCount
 @property  unsigned long tokenExpiredCount
 @property  unsigned long tokenFetchFailedCount
 @property  unsigned long agentLowWaterMarkHitCount
 @property  unsigned long cacheLowWaterMarkHitCount
 @property  unsigned long badTokenCount
 @property  unsigned long missingTokenCount
 @property  NSData *networkSignature
 @property  NSObject<OS_dispatch_source> *replenishTokenTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPProxyTokenInfo supportsSecureCoding]

  // instance methods
  -[NSPProxyTokenInfo useDefaultInterface]
  -[NSPProxyTokenInfo setSubscriber:]
  -[NSPProxyTokenInfo setAgentLowWaterMarkHitCount:]
  -[NSPProxyTokenInfo cacheLowWaterMarkHitCount]
  -[NSPProxyTokenInfo missingTokenCount]
  -[NSPProxyTokenInfo tokenExpiredCount]
  -[NSPProxyTokenInfo subscriber]
  -[NSPProxyTokenInfo removeExpiredTokens]
  -[NSPProxyTokenInfo tokenFetchSuccessCount]
  -[NSPProxyTokenInfo tokenConsumedCount]
  -[NSPProxyTokenInfo badTokenCount]
  -[NSPProxyTokenInfo setTokenConsumedCount:]
  -[NSPProxyTokenInfo setUseDefaultInterface:]
  -[NSPProxyTokenInfo descriptionWithIndent:options:]
  -[NSPProxyTokenInfo initWithCoder:]
  -[NSPProxyTokenInfo setTokenFetchRetryOnKeyOrNetworkChange:]
  -[NSPProxyTokenInfo tokenPath]
  -[NSPProxyTokenInfo tokenFetchActive]
  -[NSPProxyTokenInfo tokenRegistration]
  -[NSPProxyTokenInfo .cxx_destruct]
  -[NSPProxyTokenInfo reportTokenFetchOutage]
  -[NSPProxyTokenInfo setMissingTokenCount:]
  -[NSPProxyTokenInfo setup]
  -[NSPProxyTokenInfo checkCachedTokenCount]
  -[NSPProxyTokenInfo setTokenPath:]
  -[NSPProxyTokenInfo reportErrorForTokenRegistration:error:withOptions:]
  -[NSPProxyTokenInfo tokenFetchRetryOnKeyOrNetworkChange]
  -[NSPProxyTokenInfo flushProxyTokens]
  -[NSPProxyTokenInfo setDelegate:]
  -[NSPProxyTokenInfo tokensFromKeychain]
  -[NSPProxyTokenInfo proxyInfo]
  -[NSPProxyTokenInfo setReplenishTokenTimer:]
  -[NSPProxyTokenInfo setTokenFetchFailedCount:]
  -[NSPProxyTokenInfo requestTokensWithAccessToken:completionHandler:]
  -[NSPProxyTokenInfo addTokensToAgent]
  -[NSPProxyTokenInfo init]
  -[NSPProxyTokenInfo setNetworkSignature:]
  -[NSPProxyTokenInfo setTokenRegistration:]
  -[NSPProxyTokenInfo tierType]
  -[NSPProxyTokenInfo agentLowWaterMarkHitCount]
  -[NSPProxyTokenInfo setTokenFetchRetryDate:]
  -[NSPProxyTokenInfo cacheTokens:expirationTime:]
  -[NSPProxyTokenInfo setProxyInfo:]
  -[NSPProxyTokenInfo setTokenFetchRetryTimer:]
  -[NSPProxyTokenInfo saveTokensToKeychain:]
  -[NSPProxyTokenInfo setTokenRequestPending:]
  -[NSPProxyTokenInfo tokenCount]
  -[NSPProxyTokenInfo setReplenishTokenAgentTimer]
  -[NSPProxyTokenInfo setTokenFetchRetryAttempt:]
  -[NSPProxyTokenInfo networkSignature]
  -[NSPProxyTokenInfo tokenFetchFailedCount]
  -[NSPProxyTokenInfo tokenFetchRetryDate]
  -[NSPProxyTokenInfo tokenLowWaterMark]
  -[NSPProxyTokenInfo resetPendingFetches]
  -[NSPProxyTokenInfo retryIntervalFromHTTPResponse:]
  -[NSPProxyTokenInfo refreshTokenPool:]
  -[NSPProxyTokenInfo setTokenExpiredCount:]
  -[NSPProxyTokenInfo delegate]
  -[NSPProxyTokenInfo tokenFetchRetryAttempt]
  -[NSPProxyTokenInfo setCacheLowWaterMarkHitCount:]
  -[NSPProxyTokenInfo setTokenFetchRetryInterval:]
  -[NSPProxyTokenInfo setTokenAgentUUID:]
  -[NSPProxyTokenInfo dealloc]
  -[NSPProxyTokenInfo handleTierChange:]
  -[NSPProxyTokenInfo setTokenFetchSuccessCount:]
  -[NSPProxyTokenInfo copyWithZone:]
  -[NSPProxyTokenInfo tokenRequestPending]
  -[NSPProxyTokenInfo handlePathChange:]
  -[NSPProxyTokenInfo cleanupReplenishTokenAgentTimer]
  -[NSPProxyTokenInfo setBadTokenCount:]
  -[NSPProxyTokenInfo initWithDelegate:proxyInfo:path:subscriber:useDefaultInterface:]
  -[NSPProxyTokenInfo tokenFetchRetryTimer]
  -[NSPProxyTokenInfo setTokenCount:]
  -[NSPProxyTokenInfo tokenLowWaterMarkReached]
  -[NSPProxyTokenInfo replenishTokenTimer]
  -[NSPProxyTokenInfo encodeWithCoder:]
  -[NSPProxyTokenInfo removeTokensFromKeychain]
  -[NSPProxyTokenInfo networkInterface]
  -[NSPProxyTokenInfo tokenAgentUUID]
  -[NSPProxyTokenInfo retryTokenFetchOnNetworkOrTokenKeyChangeFetch]
  -[NSPProxyTokenInfo setReportTokenFetchOutage:]


NSPProxyAgentNetworkStatistics : NSObject <NSSecureCoding, NSCopying>
 @property  NSDictionary *networkCharacteristics
 @property  unsigned long proxyConnectionSuccess
 @property  unsigned long ingressProxyConnectionTimeout
 @property  unsigned long ingressProxyConnectionRefused
 @property  unsigned long ingressProxyConnectionHostDown
 @property  unsigned long ingressProxyConnectionHostUnreachable
 @property  unsigned long ingressProxyConnectionError
 @property  unsigned long ingressProxyConnectionDNSTimeout
 @property  unsigned long ingressProxyConnectionDNSBlocked
 @property  unsigned long ingressProxyConnectionCertError
 @property  unsigned long egressProxyConnectionError
 @property  unsigned long originProxyConnectionError
 @property  unsigned long egressProxyUnavailableError
 @property  unsigned long incompleteHandshakeStall
 @property  unsigned long postHandshakeStall

  // class methods
  +[NSPProxyAgentNetworkStatistics supportsSecureCoding]

  // instance methods
  -[NSPProxyAgentNetworkStatistics descriptionWithIndent:options:]
  -[NSPProxyAgentNetworkStatistics initWithCoder:]
  -[NSPProxyAgentNetworkStatistics setOriginProxyConnectionError:]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionHostUnreachable]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionDNSBlocked:]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionRefused]
  -[NSPProxyAgentNetworkStatistics .cxx_destruct]
  -[NSPProxyAgentNetworkStatistics proxyConnectionSuccess]
  -[NSPProxyAgentNetworkStatistics postHandshakeStall]
  -[NSPProxyAgentNetworkStatistics setProxyConnectionSuccess:]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionCertError:]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionHostDown]
  -[NSPProxyAgentNetworkStatistics egressProxyUnavailableError]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionError]
  -[NSPProxyAgentNetworkStatistics setEgressProxyUnavailableError:]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionRefused:]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionTimeout]
  -[NSPProxyAgentNetworkStatistics egressProxyConnectionError]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionDNSTimeout]
  -[NSPProxyAgentNetworkStatistics setEgressProxyConnectionError:]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionHostDown:]
  -[NSPProxyAgentNetworkStatistics incompleteHandshakeStall]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionTimeout:]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionHostUnreachable:]
  -[NSPProxyAgentNetworkStatistics setPostHandshakeStall:]
  -[NSPProxyAgentNetworkStatistics originProxyConnectionError]
  -[NSPProxyAgentNetworkStatistics copyWithZone:]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionCertError]
  -[NSPProxyAgentNetworkStatistics setNetworkCharacteristics:]
  -[NSPProxyAgentNetworkStatistics setIncompleteHandshakeStall:]
  -[NSPProxyAgentNetworkStatistics ingressProxyConnectionDNSBlocked]
  -[NSPProxyAgentNetworkStatistics encodeWithCoder:]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionError:]
  -[NSPProxyAgentNetworkStatistics networkCharacteristics]
  -[NSPProxyAgentNetworkStatistics resetStats]
  -[NSPProxyAgentNetworkStatistics setIngressProxyConnectionDNSTimeout:]


NSPProxyPath : NSObject <NSSecureCoding, NSCopying, NSPPrivacyProxyNetworkRegistrationDelegate>
 @property  <NSPProxyPathDelegate> *delegate
 @property  NSPProxyTokenInfo *ingressProxy
 @property  NSPProxyTokenInfo *egressProxy
 @property  unsigned long proxyPathWeight
 @property  BOOL allowFallback
 @property  BOOL fallbackToQUIC
 @property  BOOL forceFallback
 @property  BOOL allowFailOpen
 @property  BOOL singleHopRegistered
 @property  BOOL multiHopRegistered
 @property  BOOL geohashSharingEnabled
 @property  NSUUID *nonDefaultAgentUUID
 @property  NSPPrivacyProxyNetworkRegistration *singleHopRegistration
 @property  NSPPrivacyProxyNetworkRegistration *multiHopRegistration
 @property  NSPProxyAgentNetworkStatistics *networkSingleHopAgentStatistics
 @property  NSPProxyAgentNetworkStatistics *networkMultiHopAgentStatistics
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPProxyPath supportsSecureCoding]

  // instance methods
  -[NSPProxyPath descriptionWithIndent:options:]
  -[NSPProxyPath initWithCoder:]
  -[NSPProxyPath .cxx_destruct]
  -[NSPProxyPath geohashSharingEnabled]
  -[NSPProxyPath setDelegate:]
  -[NSPProxyPath setGeohashSharingEnabled:]
  -[NSPProxyPath resetError]
  -[NSPProxyPath setForceFallback:]
  -[NSPProxyPath delegate]
  -[NSPProxyPath forceFallback]
  -[NSPProxyPath dealloc]
  -[NSPProxyPath copyWithZone:]
  -[NSPProxyPath encodeWithCoder:]
  -[NSPProxyPath resetStats]
  -[NSPProxyPath reportErrorForNetworkRegistration:error:withOptions:]
  -[NSPProxyPath ingressProxy]
  -[NSPProxyPath egressProxy]
  -[NSPProxyPath allowFallback]
  -[NSPProxyPath fallbackToQUIC]
  -[NSPProxyPath allowFailOpen]
  -[NSPProxyPath nonDefaultAgentUUID]
  -[NSPProxyPath networkSingleHopAgentStatistics]
  -[NSPProxyPath networkMultiHopAgentStatistics]
  -[NSPProxyPath proxyPathWeight]
  -[NSPProxyPath setIngressProxy:]
  -[NSPProxyPath setEgressProxy:]
  -[NSPProxyPath setProxyPathWeight:]
  -[NSPProxyPath setAllowFallback:]
  -[NSPProxyPath setFallbackToQUIC:]
  -[NSPProxyPath setAllowFailOpen:]
  -[NSPProxyPath setNonDefaultAgentUUID:]
  -[NSPProxyPath singleHopRegistered]
  -[NSPProxyPath setSingleHopRegistered:]
  -[NSPProxyPath multiHopRegistered]
  -[NSPProxyPath setMultiHopRegistered:]
  -[NSPProxyPath singleHopRegistration]
  -[NSPProxyPath setSingleHopRegistration:]
  -[NSPProxyPath multiHopRegistration]
  -[NSPProxyPath setMultiHopRegistration:]
  -[NSPProxyPath setNetworkSingleHopAgentStatistics:]
  -[NSPProxyPath setNetworkMultiHopAgentStatistics:]
  -[NSPProxyPath resetSingleHopProxyAgent]
  -[NSPProxyPath resetMultiHopProxyAgent]
  -[NSPProxyPath initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:networkCharacteristics:]
  -[NSPProxyPath setupSingleHopProxyRegistrations]
  -[NSPProxyPath setupMultiHopProxyRegistrations]
  -[NSPProxyPath isMultiHopRegistered]
  -[NSPProxyPath isSingleHopRegistered]
  -[NSPProxyPath updateIngressProxy:egressProxy:proxyPathWeight:]
  -[NSPProxyPath enableFailOpen:]
  -[NSPProxyPath updateGeohashSharing:]
  -[NSPProxyPath proxyPathIsValid:proxyPathList:]
  -[NSPProxyPath matchIngress:]
  -[NSPProxyPath matchEgress:]
  -[NSPProxyPath handleNetworkCharacteristicsChange:]
  -[NSPProxyPath singleHopConfigurationHash]
  -[NSPProxyPath multiHopConfigurationHash]


NSPQuicProxyPath : NSPProxyPath
 @property  <NSPQUICProxyPathDelegate> *quicProxyPathDelegate

  // instance methods
  -[NSPQuicProxyPath .cxx_destruct]
  -[NSPQuicProxyPath resetSingleHopProxyAgent]
  -[NSPQuicProxyPath resetMultiHopProxyAgent]
  -[NSPQuicProxyPath initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:networkCharacteristics:]
  -[NSPQuicProxyPath setupSingleHopProxyRegistrations]
  -[NSPQuicProxyPath setupMultiHopProxyRegistrations]
  -[NSPQuicProxyPath proxyPathIsValid:proxyPathList:]
  -[NSPQuicProxyPath quicProxyPathDelegate]
  -[NSPQuicProxyPath enableFallback:]
  -[NSPQuicProxyPath setQuicProxyPathDelegate:]


NSPFallbackProxyPath : NSPProxyPath
  // instance methods
  -[NSPFallbackProxyPath resetSingleHopProxyAgent]
  -[NSPFallbackProxyPath resetMultiHopProxyAgent]
  -[NSPFallbackProxyPath setupSingleHopProxyRegistrations]
  -[NSPFallbackProxyPath setupMultiHopProxyRegistrations]
  -[NSPFallbackProxyPath proxyPathIsValid:proxyPathList:]


NSPCandidateProxyPath : NSObject <NSSecureCoding, NSCopying>
 @property  NSPProxyTokenInfo *ingressProxy
 @property  NSPProxyTokenInfo *egressProxy
 @property  unsigned long proxyPathWeight
 @property  NSString *preferredPathConfigURI
 @property  NSData *domainFilter

  // class methods
  +[NSPCandidateProxyPath supportsSecureCoding]

  // instance methods
  -[NSPCandidateProxyPath initWithCoder:]
  -[NSPCandidateProxyPath domainFilter]
  -[NSPCandidateProxyPath .cxx_destruct]
  -[NSPCandidateProxyPath setDomainFilter:]
  -[NSPCandidateProxyPath copyWithZone:]
  -[NSPCandidateProxyPath encodeWithCoder:]
  -[NSPCandidateProxyPath ingressProxy]
  -[NSPCandidateProxyPath egressProxy]
  -[NSPCandidateProxyPath proxyPathWeight]
  -[NSPCandidateProxyPath setIngressProxy:]
  -[NSPCandidateProxyPath setEgressProxy:]
  -[NSPCandidateProxyPath setProxyPathWeight:]
  -[NSPCandidateProxyPath matchIngress:]
  -[NSPCandidateProxyPath matchEgress:]
  -[NSPCandidateProxyPath preferredPathConfigURI]
  -[NSPCandidateProxyPath setPreferredPathConfigURI:]
  -[NSPCandidateProxyPath initWithIngressProxy:egressProxy:proxyPathWeight:preferredPathConfigURI:]
  -[NSPCandidateProxyPath proxyPathReady]
  -[NSPCandidateProxyPath fetchDomainFilter:]


NSPCandidateQuicProxyPath : NSPCandidateProxyPath
  // instance methods
  -[NSPCandidateQuicProxyPath proxyPathIsValid:proxyPathList:]


NSPCandidateFallbackProxyPath : NSPCandidateProxyPath
  // instance methods
  -[NSPCandidateFallbackProxyPath proxyPathIsValid:proxyPathList:]


NSPProber : NSObject <NSSecureCoding, NSCopying, NSURLSessionTaskDelegate>
 @property  <NSPProberDelegate> *delegate
 @property  NSString *name
 @property  NSURLSession *probeSession
 @property  NSURLSessionDataTask *dataTask
 @property  NSOperationQueue *operationQueue
 @property  NSObject<OS_dispatch_source> *probeRetryTimer
 @property  unsigned long probeCount
 @property  unsigned long probeConnectionTimeout
 @property  BOOL probingActive
 @property  BOOL probeOnNetworkChange
 @property  int linkQuality
 @property  NSDate *nextProbeDate
 @property  NWPath *path
 @property  BOOL probePending
 @property  unsigned long probeSuccessCount
 @property  unsigned long probeFailedCount
 @property  unsigned long probeRedirectedCount
 @property  unsigned long probeServerErrorCount
 @property  BOOL proxyProber
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPProber supportsSecureCoding]

  // instance methods
  -[NSPProber setOperationQueue:]
  -[NSPProber setDataTask:]
  -[NSPProber operationQueue]
  -[NSPProber descriptionWithIndent:options:]
  -[NSPProber name]
  -[NSPProber initWithCoder:]
  -[NSPProber setPath:]
  -[NSPProber dataTask]
  -[NSPProber handleLinkQualityChange:]
  -[NSPProber setLinkQuality:]
  -[NSPProber .cxx_destruct]
  -[NSPProber setup]
  -[NSPProber linkQuality]
  -[NSPProber setName:]
  -[NSPProber setDelegate:]
  -[NSPProber retryNetworkFetch]
  -[NSPProber resetPendingFetches]
  -[NSPProber path]
  -[NSPProber delegate]
  -[NSPProber startProbing]
  -[NSPProber dealloc]
  -[NSPProber copyWithZone:]
  -[NSPProber handlePathChange:]
  -[NSPProber encodeWithCoder:]
  -[NSPProber probePending]
  -[NSPProber setProbePending:]
  -[NSPProber probeCount]
  -[NSPProber setProbeCount:]
  -[NSPProber probingActive]
  -[NSPProber probeSuccessCount]
  -[NSPProber probeFailedCount]
  -[NSPProber probeRedirectedCount]
  -[NSPProber probeServerErrorCount]
  -[NSPProber proxyProber]
  -[NSPProber probeConnectionTimeout]
  -[NSPProber probeOnNetworkChange]
  -[NSPProber nextProbeDate]
  -[NSPProber setProxyProber:]
  -[NSPProber probeSession]
  -[NSPProber setProbeSession:]
  -[NSPProber probeRetryTimer]
  -[NSPProber setProbeRetryTimer:]
  -[NSPProber setProbeConnectionTimeout:]
  -[NSPProber setProbingActive:]
  -[NSPProber setProbeOnNetworkChange:]
  -[NSPProber setNextProbeDate:]
  -[NSPProber setProbeSuccessCount:]
  -[NSPProber setProbeFailedCount:]
  -[NSPProber setProbeRedirectedCount:]
  -[NSPProber setProbeServerErrorCount:]
  -[NSPProber setProbeRetryTimerWithRetryInterval:]
  -[NSPProber sendProbe:]
  -[NSPProber probeFailed]
  -[NSPProber probeSuccess]
  -[NSPProber probeRedirected]
  -[NSPProber probeServerError]
  -[NSPProber setProbeParametersForLinkQuality]
  -[NSPProber initWithDelegate:probeName:linkQuality:path:proxyProber:]


NSPPrivacyProxyAgentManager : NSObject <NSPProxyTokenDelegate, NSPProxyPathDelegate, NSPProberDelegate, NSPQUICProxyPathDelegate, NSSecureCoding, NSCopying>
 @property  <NSPPrivacyProxyAgentManagerDelegate> *delegate
 @property  NSArray *proxyArray
 @property  NSArray *proxyPathList
 @property  NSMutableArray *proxyPathCustomEnumerator
 @property  NSArray *fallbackProxyPathList
 @property  NSMutableArray *fallbackProxyPathCustomEnumerator
 @property  NSString *overridePreferredProxy
 @property  NSString *overrideIngressProxy
 @property  NSString *overrideFallbackIngressProxy
 @property  NSData *overrideIngressProxyKey
 @property  NSMutableDictionary *savedConfiguredProxies
 @property  NSMutableArray *savedConfiguredPreferredPaths
 @property  NSObject<OS_dispatch_source> *proxyPathEnumeratorRestoreTimer
 @property  unsigned long proxyPathRestoreIntervalSec
 @property  BOOL forceFallback
 @property  NSPQuicProxyPath *quicProxyPath
 @property  NSPFallbackProxyPath *fallbackProxyPath
 @property  NSPCandidateQuicProxyPath *candidateQuicProxyPath
 @property  NSPCandidateFallbackProxyPath *candidateFallbackProxyPath
 @property  NSPProber *proxyPathProber
 @property  NSPProber *directPathProber
 @property  NWInterface *proberInterface
 @property  NSDate *probeStartTime
 @property  NSDate *probeEndTime
 @property  NSDate *lastQuicProxySwitchedDate
 @property  NSDate *lastFallbackProxySwitchedDate
 @property  NSMutableDictionary *preferredQUICProxyPaths
 @property  NSMutableDictionary *candidatePreferredQUICProxyPaths
 @property  NSMutableArray *proxyTokenInfoArray
 @property  NSDate *tokenIssuanceRestrictedUntilDate
 @property  NSObject<OS_dispatch_source> *tokenIssuanceRestrictedUntilTimer
 @property  NWPath *path
 @property  NSDate *lastPathUnsatisfiedDate
 @property  NSDate *lastPrimaryInterfaceChangedDate
 @property  NSDictionary *networkCharacteristics
 @property  BOOL useDefaultInterface
 @property  BOOL subscriber
 @property  BOOL geohashSharingEnabled
 @property  BOOL proxyConnectivityCheckActive
 @property  int linkQuality
 @property  unsigned long tokenFetchSuccessCount
 @property  unsigned long tokenFetchFailedCount
 @property  unsigned long tokenConsumedCount
 @property  unsigned long tokenExpiredCount
 @property  unsigned long agentLowWaterMarkHitCount
 @property  unsigned long cacheLowWaterMarkHitCount
 @property  unsigned long badTokenCount
 @property  unsigned long missingTokenCount
 @property  unsigned long networkProxiesRotated
 @property  unsigned long networkFallbackProxiesRotated
 @property  unsigned long proxiesRotated
 @property  NSPOutageReasonStats *lastProxyOutageReasonStats
 @property  NSPOutageReasonStats *lastTokenOutageReasonStats
 @property  long long probingReason
 @property  BOOL reportedTokenOutage
 @property  NSPToggleStats *toggleStats
 @property  unsigned long generation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL dnsFilteringHintEnabled
 @property  NSString *geohashOverride

  // class methods
  +[NSPPrivacyProxyAgentManager copyFromPreferences]
  +[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]
  +[NSPPrivacyProxyAgentManager multiHopFallbackProxyAgentUUID]
  +[NSPPrivacyProxyAgentManager removeFromPreferences]
  +[NSPPrivacyProxyAgentManager supportsSecureCoding]
  +[NSPPrivacyProxyAgentManager removeUserEventAgentData]
  +[NSPPrivacyProxyAgentManager singleHopFallbackProxyAgentUUID]
  +[NSPPrivacyProxyAgentManager removeProxyInfoFromKeychain]
  +[NSPPrivacyProxyAgentManager copyUserEventAgentData]
  +[NSPPrivacyProxyAgentManager ingressTokenAgentUUID]
  +[NSPPrivacyProxyAgentManager proxyMatchProxyInfoArray:proxy:]
  +[NSPPrivacyProxyAgentManager copyProxyPathRestoreIntervalFromPreferences]
  +[NSPPrivacyProxyAgentManager singleHopProxyAgentUUID]
  +[NSPPrivacyProxyAgentManager proxiesMatch:proxyPathList:ingressProxy:egressProxy:pathWeight:supportsFallback:]
  +[NSPPrivacyProxyAgentManager multiHopProxyAgentUUID]

  // instance methods
  -[NSPPrivacyProxyAgentManager useDefaultInterface]
  -[NSPPrivacyProxyAgentManager setSubscriber:]
  -[NSPPrivacyProxyAgentManager setAgentLowWaterMarkHitCount:]
  -[NSPPrivacyProxyAgentManager cacheLowWaterMarkHitCount]
  -[NSPPrivacyProxyAgentManager missingTokenCount]
  -[NSPPrivacyProxyAgentManager tokenExpiredCount]
  -[NSPPrivacyProxyAgentManager setGeohashOverride:]
  -[NSPPrivacyProxyAgentManager subscriber]
  -[NSPPrivacyProxyAgentManager removeExpiredTokens]
  -[NSPPrivacyProxyAgentManager tokenFetchSuccessCount]
  -[NSPPrivacyProxyAgentManager tokenConsumedCount]
  -[NSPPrivacyProxyAgentManager badTokenCount]
  -[NSPPrivacyProxyAgentManager setTokenConsumedCount:]
  -[NSPPrivacyProxyAgentManager setUseDefaultInterface:]
  -[NSPPrivacyProxyAgentManager saveToPreferences]
  -[NSPPrivacyProxyAgentManager resetProxyErrors]
  -[NSPPrivacyProxyAgentManager singleHopAgentRegistered:]
  -[NSPPrivacyProxyAgentManager probingReason]
  -[NSPPrivacyProxyAgentManager failureReasonCodeFromErrorCode:]
  -[NSPPrivacyProxyAgentManager candidatePreferredQUICProxyPaths]
  -[NSPPrivacyProxyAgentManager descriptionWithIndent:options:]
  -[NSPPrivacyProxyAgentManager setUserEventAgentProberParameters]
  -[NSPPrivacyProxyAgentManager copyOverrideFallbackIngressProxyFromPreferences]
  -[NSPPrivacyProxyAgentManager setLastTokenOutageReasonStats:]
  -[NSPPrivacyProxyAgentManager probeServerError:]
  -[NSPPrivacyProxyAgentManager setGeneration:]
  -[NSPPrivacyProxyAgentManager startProbingForReason:]
  -[NSPPrivacyProxyAgentManager forceFallback:]
  -[NSPPrivacyProxyAgentManager reportedTokenOutage]
  -[NSPPrivacyProxyAgentManager setProxyPathList:]
  -[NSPPrivacyProxyAgentManager initWithCoder:]
  -[NSPPrivacyProxyAgentManager isMultiHopProxyAgentRegistered]
  -[NSPPrivacyProxyAgentManager setPath:]
  -[NSPPrivacyProxyAgentManager lastQuicProxySwitchedDate]
  -[NSPPrivacyProxyAgentManager updateDNSFilteringHint:]
  -[NSPPrivacyProxyAgentManager servicenameFromFailureType:]
  -[NSPPrivacyProxyAgentManager setOverrideIngressProxy:]
  -[NSPPrivacyProxyAgentManager tokenFetchOutage:]
  -[NSPPrivacyProxyAgentManager setProxyPathEnumeratorRestoreTimer:]
  -[NSPPrivacyProxyAgentManager setCandidateFallbackProxyPath:]
  -[NSPPrivacyProxyAgentManager isSingleHopFallbackProxyAgentRegistered]
  -[NSPPrivacyProxyAgentManager removeProxyURLFromProxyEnumerator:]
  -[NSPPrivacyProxyAgentManager egressProxyUnavailableProxyPath:interface:errorCode:]
  -[NSPPrivacyProxyAgentManager setupQuicProxyPath]
  -[NSPPrivacyProxyAgentManager savedConfiguredProxies]
  -[NSPPrivacyProxyAgentManager handleLinkQualityChange:]
  -[NSPPrivacyProxyAgentManager setProbeStartTime:]
  -[NSPPrivacyProxyAgentManager setLinkQuality:]
  -[NSPPrivacyProxyAgentManager reportTokenFetchFailure:statusCode:]
  -[NSPPrivacyProxyAgentManager setProxyArray:]
  -[NSPPrivacyProxyAgentManager overridePreferredProxy]
  -[NSPPrivacyProxyAgentManager setReportedTokenOutage:]
  -[NSPPrivacyProxyAgentManager isSingleHopProxyAgentRegistered]
  -[NSPPrivacyProxyAgentManager candidateFallbackProxyPath]
  -[NSPPrivacyProxyAgentManager proxyPathList]
  -[NSPPrivacyProxyAgentManager sendSwitchProxyStatsForProxy:fallback:]
  -[NSPPrivacyProxyAgentManager updateProxyInfo:proxyPathList:fallbackProxyPathList:]
  -[NSPPrivacyProxyAgentManager setTokenIssuanceLimitInterval:]
  -[NSPPrivacyProxyAgentManager failureReasonDescriptionFromReasonCode:]
  -[NSPPrivacyProxyAgentManager proxyPathEnumeratorRestoreTimer]
  -[NSPPrivacyProxyAgentManager setupCandidatePreferredQUICProxyPaths]
  -[NSPPrivacyProxyAgentManager .cxx_destruct]
  -[NSPPrivacyProxyAgentManager checkProxyConnectivityOnInterface:proxyConnectivityCheckType:]
  -[NSPPrivacyProxyAgentManager egressProxyErrorProxyPath:interface:errorCode:]
  -[NSPPrivacyProxyAgentManager setQuicProxyPath:]
  -[NSPPrivacyProxyAgentManager setLastPathUnsatisfiedDate:]
  -[NSPPrivacyProxyAgentManager lastProxyOutageReasonStats]
  -[NSPPrivacyProxyAgentManager geohashSharingEnabled]
  -[NSPPrivacyProxyAgentManager useDefaultNetworkInterface:]
  -[NSPPrivacyProxyAgentManager setFallbackProxyPathList:]
  -[NSPPrivacyProxyAgentManager updateGeohashSharingPreference:geohashOverride:]
  -[NSPPrivacyProxyAgentManager setLastFallbackProxySwitchedDate:]
  -[NSPPrivacyProxyAgentManager setupCandidateQuicProxyPath]
  -[NSPPrivacyProxyAgentManager setMissingTokenCount:]
  -[NSPPrivacyProxyAgentManager setFallbackProxyPath:]
  -[NSPPrivacyProxyAgentManager copyOverrideIngressProxyKeyFromPreferences]
  -[NSPPrivacyProxyAgentManager quicProxyPath]
  -[NSPPrivacyProxyAgentManager setupPreferredQUICProxyPathForVendor:]
  -[NSPPrivacyProxyAgentManager linkQuality]
  -[NSPPrivacyProxyAgentManager setDnsFilteringHintEnabled:]
  -[NSPPrivacyProxyAgentManager originProxyErrorProxyPath:interface:errorCode:]
  -[NSPPrivacyProxyAgentManager probeFailed:]
  -[NSPPrivacyProxyAgentManager lastTokenOutageReason]
  -[NSPPrivacyProxyAgentManager singleHopFallbackProxyConfigHash:]
  -[NSPPrivacyProxyAgentManager hostAndPortFromURL:]
  -[NSPPrivacyProxyAgentManager multiHopAgentUnregistered:]
  -[NSPPrivacyProxyAgentManager generation]
  -[NSPPrivacyProxyAgentManager setProxiesRotated:]
  -[NSPPrivacyProxyAgentManager savedConfiguredPreferredPaths]
  -[NSPPrivacyProxyAgentManager lastProxyOutageReason]
  -[NSPPrivacyProxyAgentManager updateProxyTokenInfoArray:]
  -[NSPPrivacyProxyAgentManager probingReasonToString]
  -[NSPPrivacyProxyAgentManager setDelegate:]
  -[NSPPrivacyProxyAgentManager setupWithPath:subscriber:geohashSharingEnabled:geohashOverride:linkQuality:]
  -[NSPPrivacyProxyAgentManager networkProxiesRotated]
  -[NSPPrivacyProxyAgentManager fallbackProxyPathList]
  -[NSPPrivacyProxyAgentManager dnsFilteringHintEnabled]
  -[NSPPrivacyProxyAgentManager lastPrimaryInterfaceChangedDate]
  -[NSPPrivacyProxyAgentManager multiHopAgentRegistered:]
  -[NSPPrivacyProxyAgentManager setGeohashSharingEnabled:]
  -[NSPPrivacyProxyAgentManager setSavedConfiguredProxies:]
  -[NSPPrivacyProxyAgentManager setTokenFetchFailedCount:]
  -[NSPPrivacyProxyAgentManager setProbeEndTime:]
  -[NSPPrivacyProxyAgentManager overrideIngressProxy]
  -[NSPPrivacyProxyAgentManager setupCandidateFallbackProxyPath]
  -[NSPPrivacyProxyAgentManager preferredQUICProxyPaths]
  -[NSPPrivacyProxyAgentManager candidateQuicProxyPath]
  -[NSPPrivacyProxyAgentManager pruneProxyTokenInfoArray]
  -[NSPPrivacyProxyAgentManager setSavedConfiguredPreferredPaths:]
  -[NSPPrivacyProxyAgentManager setLastQuicProxySwitchedDate:]
  -[NSPPrivacyProxyAgentManager outageReasonDescriptionFromOutageReasonSubType:]
  -[NSPPrivacyProxyAgentManager proxyPathCustomEnumerator]
  -[NSPPrivacyProxyAgentManager tokenInfoInvalid:]
  -[NSPPrivacyProxyAgentManager updateUserEventAgentData]
  -[NSPPrivacyProxyAgentManager singleHopQUICProxyConfigHash:]
  -[NSPPrivacyProxyAgentManager setProbingReason:]
  -[NSPPrivacyProxyAgentManager setFallbackProxyPathCustomEnumerator:]
  -[NSPPrivacyProxyAgentManager singleHopAgentUnregistered:]
  -[NSPPrivacyProxyAgentManager agentLowWaterMarkHitCount]
  -[NSPPrivacyProxyAgentManager createRTCReportPayloadWithCategory:errorCode:url:]
  -[NSPPrivacyProxyAgentManager sendRTCReportForServiceOutage:]
  -[NSPPrivacyProxyAgentManager lastPathUnsatisfiedDate]
  -[NSPPrivacyProxyAgentManager reportProxyError:interface:proxyPath:]
  -[NSPPrivacyProxyAgentManager alternateEgressProxyExists:proxyPathEnumerator:]
  -[NSPPrivacyProxyAgentManager tierString]
  -[NSPPrivacyProxyAgentManager sendRTCReportWithFailureType:errorCode:url:]
  -[NSPPrivacyProxyAgentManager ingressFallbackProxyURL]
  -[NSPPrivacyProxyAgentManager tokenAdded:]
  -[NSPPrivacyProxyAgentManager connectionRefusedProxyPath:interface:]
  -[NSPPrivacyProxyAgentManager proxyConnectivityCheckActive]
  -[NSPPrivacyProxyAgentManager mergeTokenStats:]
  -[NSPPrivacyProxyAgentManager setProxyPathProber:]
  -[NSPPrivacyProxyAgentManager tokenRateLimited:untilDate:]
  -[NSPPrivacyProxyAgentManager overrideIngressProxyKey]
  -[NSPPrivacyProxyAgentManager setProberInterface:]
  -[NSPPrivacyProxyAgentManager connectionTimeoutProxyPath:interface:]
  -[NSPPrivacyProxyAgentManager proxyArray]
  -[NSPPrivacyProxyAgentManager probeRedirected:]
  -[NSPPrivacyProxyAgentManager nextProxyPath:]
  -[NSPPrivacyProxyAgentManager overridePreferredProxy:]
  -[NSPPrivacyProxyAgentManager setCandidateQuicProxyPath:]
  -[NSPPrivacyProxyAgentManager tokenFetchFailedCount]
  -[NSPPrivacyProxyAgentManager setForceFallback:]
  -[NSPPrivacyProxyAgentManager connectionCertErrorProxyPath:interface:]
  -[NSPPrivacyProxyAgentManager reportProxySuccessOnInterface:proxyPath:]
  -[NSPPrivacyProxyAgentManager setupFallbackProxyPath]
  -[NSPPrivacyProxyAgentManager createRTCReportPayloadWithOutageStats:]
  -[NSPPrivacyProxyAgentManager tokenLowWaterMarkReached:]
  -[NSPPrivacyProxyAgentManager setProxyOutageReason:]
  -[NSPPrivacyProxyAgentManager setDirectPathProber:]
  -[NSPPrivacyProxyAgentManager switchProxy:]
  -[NSPPrivacyProxyAgentManager setOverrideFallbackIngressProxy:]
  -[NSPPrivacyProxyAgentManager setLastPrimaryInterfaceChangedDate:]
  -[NSPPrivacyProxyAgentManager isMultiHopFallbackProxyAgentRegistered]
  -[NSPPrivacyProxyAgentManager geohashOverride]
  -[NSPPrivacyProxyAgentManager setUserEventAgentTokenFetchParameters]
  -[NSPPrivacyProxyAgentManager setProxyTokenInfoArray:]
  -[NSPPrivacyProxyAgentManager multiHopFallbackProxyConfigHash:]
  -[NSPPrivacyProxyAgentManager path]
  -[NSPPrivacyProxyAgentManager setTokenExpiredCount:]
  -[NSPPrivacyProxyAgentManager setProxyPathEnumeratorRestoreTimerInterval]
  -[NSPPrivacyProxyAgentManager delegate]
  -[NSPPrivacyProxyAgentManager setOverridePreferredProxy:]
  -[NSPPrivacyProxyAgentManager forceFallback]
  -[NSPPrivacyProxyAgentManager errorDescriptionForRawErrorCode:]
  -[NSPPrivacyProxyAgentManager probeStartTime]
  -[NSPPrivacyProxyAgentManager handleConfigChange]
  -[NSPPrivacyProxyAgentManager nextProxyPathWithOverride]
  -[NSPPrivacyProxyAgentManager proberInterface]
  -[NSPPrivacyProxyAgentManager lastTokenOutageReasonStats]
  -[NSPPrivacyProxyAgentManager proxyTokenInfoArray]
  -[NSPPrivacyProxyAgentManager ingressProxyURL]
  -[NSPPrivacyProxyAgentManager setCacheLowWaterMarkHitCount:]
  -[NSPPrivacyProxyAgentManager setProxyPathRestoreIntervalSec:]
  -[NSPPrivacyProxyAgentManager proxiesRotated]
  -[NSPPrivacyProxyAgentManager overrideIngressProxy:fallbackProxy:key:]
  -[NSPPrivacyProxyAgentManager cleanupProbingInfo]
  -[NSPPrivacyProxyAgentManager fallbackProxyPathWithIngressProxyURL:egressProxyURL:]
  -[NSPPrivacyProxyAgentManager dnsTimeoutProxyPath:interface:]
  -[NSPPrivacyProxyAgentManager dnsBlockedProxyPath:interface:errorCode:]
  -[NSPPrivacyProxyAgentManager tokenIssuanceRestrictedUntilTimer]
  -[NSPPrivacyProxyAgentManager outageReasonCodeFromOutageReasonType:]
  -[NSPPrivacyProxyAgentManager copyOverrideIngressProxyFromPreferences]
  -[NSPPrivacyProxyAgentManager copyPreferredProxyFromPreferences]
  -[NSPPrivacyProxyAgentManager dealloc]
  -[NSPPrivacyProxyAgentManager handleTierChange:]
  -[NSPPrivacyProxyAgentManager connectionErrorsProxyPath:interface:errorCode:]
  -[NSPPrivacyProxyAgentManager setTokenFetchSuccessCount:]
  -[NSPPrivacyProxyAgentManager isProbingActive]
  -[NSPPrivacyProxyAgentManager multiHopQUICProxyConfigHash:]
  -[NSPPrivacyProxyAgentManager getForceFallbackFromPreferences]
  -[NSPPrivacyProxyAgentManager overrideFallbackIngressProxy]
  -[NSPPrivacyProxyAgentManager directPathProber]
  -[NSPPrivacyProxyAgentManager fallbackProxyPath]
  -[NSPPrivacyProxyAgentManager copyWithZone:]
  -[NSPPrivacyProxyAgentManager setOverrideIngressProxyKey:]
  -[NSPPrivacyProxyAgentManager getProxyTokenInfoForProxyInfo:]
  -[NSPPrivacyProxyAgentManager sendRTCReportForPrivacyProxyToggleState:]
  -[NSPPrivacyProxyAgentManager handlePathChange:]
  -[NSPPrivacyProxyAgentManager sendProbeStats]
  -[NSPPrivacyProxyAgentManager networkFallbackProxiesRotated]
  -[NSPPrivacyProxyAgentManager initWithDelegate:toggleStats:]
  -[NSPPrivacyProxyAgentManager setProxyConnectivityCheckActive:]
  -[NSPPrivacyProxyAgentManager setToggleStats:]
  -[NSPPrivacyProxyAgentManager setBadTokenCount:]
  -[NSPPrivacyProxyAgentManager setPreferredQUICProxyPaths:]
  -[NSPPrivacyProxyAgentManager requestAccessToken:]
  -[NSPPrivacyProxyAgentManager createRTCReportPayloadWithToggleState:]
  -[NSPPrivacyProxyAgentManager setLastProxyOutageReasonStats:]
  -[NSPPrivacyProxyAgentManager setCandidatePreferredQUICProxyPaths:]
  -[NSPPrivacyProxyAgentManager setProxyPathCustomEnumerator:]
  -[NSPPrivacyProxyAgentManager lastFallbackProxySwitchedDate]
  -[NSPPrivacyProxyAgentManager checkTokenFetchOutage]
  -[NSPPrivacyProxyAgentManager proxyPathRestoreIntervalSec]
  -[NSPPrivacyProxyAgentManager setNetworkCharacteristics:]
  -[NSPPrivacyProxyAgentManager toggleStats]
  -[NSPPrivacyProxyAgentManager removeProxyURLFromFallbackProxyEnumerator:]
  -[NSPPrivacyProxyAgentManager probeEndTime]
  -[NSPPrivacyProxyAgentManager setNetworkFallbackProxiesRotated:]
  -[NSPPrivacyProxyAgentManager proxyPathWithIngressProxyURL:egressProxyURL:]
  -[NSPPrivacyProxyAgentManager tokenIssuanceRestrictedUntilDate]
  -[NSPPrivacyProxyAgentManager fallbackProxyPathCustomEnumerator]
  -[NSPPrivacyProxyAgentManager probeSuccess:]
  -[NSPPrivacyProxyAgentManager encodeWithCoder:]
  -[NSPPrivacyProxyAgentManager copyProxyInfo:]
  -[NSPPrivacyProxyAgentManager setTokenIssuanceRestrictedUntilDate:]
  -[NSPPrivacyProxyAgentManager networkCharacteristics]
  -[NSPPrivacyProxyAgentManager setNetworkProxiesRotated:]
  -[NSPPrivacyProxyAgentManager proxyPathProber]
  -[NSPPrivacyProxyAgentManager fillInDomainFiltersFromPreferences]
  -[NSPPrivacyProxyAgentManager nextFallbackProxyPathWithOverride]
  -[NSPPrivacyProxyAgentManager setTokenIssuanceRestrictedUntilTimer:]


NPLocation : NSObject <NSSecureCoding>
 @property  BOOL isValid
 @property  double latitude
 @property  double longtitude
 @property  NSDate *timestamp

  // class methods
  +[NPLocation supportsSecureCoding]

  // instance methods
  -[NPLocation setLatitude:]
  -[NPLocation latitude]
  -[NPLocation initWithCoder:]
  -[NPLocation isValid]
  -[NPLocation .cxx_destruct]
  -[NPLocation timestamp]
  -[NPLocation copyWithZone:]
  -[NPLocation setTimestamp:]
  -[NPLocation encodeWithCoder:]
  -[NPLocation initWithLatitude:longtitude:timestamp:]
  -[NPLocation longtitude]
  -[NPLocation setLongtitude:]


NPTuscanyOnRamp : NSObject <NSSecureCoding>
 @property  BOOL isDayPassExpired
 @property  NWEndpoint *daypassEndpoint
 @property  NPTunnelTuscanyEndpoint *tuscanyEndpoint
 @property  NSDate *retryDate
 @property  NSUUID *dayPassUUID
 @property  NSData *dayPass
 @property  NSDate *dayPassCreationDate
 @property  unsigned int dayPassSessionCounter
 @property  double dayPassHardExpiry
 @property  NWNetworkAgentRegistration *agentRegistration
 @property  NSPKeyNetworkAgent *agent
 @property  NPWaldo *parentWaldo
 @property  BOOL dayPassFailed
 @property  NSURLSession *dayPassSession
 @property  BOOL dayPassRefreshAllowed
 @property  BOOL dayPassPending
 @property  long long TFOStatus
 @property  unsigned long maxFrameSize
 @property  unsigned long rtt
 @property  NSString *shortDescription
 @property  long long currentEdgeType
 @property  int error
 @property  BOOL isTFOEnabled
 @property  NSDictionary *descriptionDictionary

  // class methods
  +[NPTuscanyOnRamp supportsSecureCoding]

  // instance methods
  -[NPTuscanyOnRamp rtt]
  -[NPTuscanyOnRamp setAgent:]
  -[NPTuscanyOnRamp agent]
  -[NPTuscanyOnRamp initWithEndpoint:]
  -[NPTuscanyOnRamp initWithCoder:]
  -[NPTuscanyOnRamp .cxx_destruct]
  -[NPTuscanyOnRamp descriptionDictionary]
  -[NPTuscanyOnRamp isEqual:]
  -[NPTuscanyOnRamp agentRegistration]
  -[NPTuscanyOnRamp setAgentRegistration:]
  -[NPTuscanyOnRamp initWithKey:]
  -[NPTuscanyOnRamp shortDescription]
  -[NPTuscanyOnRamp setError:]
  -[NPTuscanyOnRamp encodeWithCoder:]
  -[NPTuscanyOnRamp error]
  -[NPTuscanyOnRamp dayPass]
  -[NPTuscanyOnRamp maxFrameSize]
  -[NPTuscanyOnRamp dayPassUUID]
  -[NPTuscanyOnRamp setDayPassUUID:]
  -[NPTuscanyOnRamp dayPassSessionCounter]
  -[NPTuscanyOnRamp dayPassCreationDate]
  -[NPTuscanyOnRamp TFOStatus]
  -[NPTuscanyOnRamp setTFOStatus:]
  -[NPTuscanyOnRamp isTFOEnabled]
  -[NPTuscanyOnRamp currentEdgeType]
  -[NPTuscanyOnRamp getNextSessionCounter]
  -[NPTuscanyOnRamp isDayPassExpired]
  -[NPTuscanyOnRamp parentWaldo]
  -[NPTuscanyOnRamp updateSessionCounterFromKernel]
  -[NPTuscanyOnRamp setDayPassSessionCounter:]
  -[NPTuscanyOnRamp tuscanyEndpoint]
  -[NPTuscanyOnRamp copyValue:ofSize:fromOffset:base:totalLength:]
  -[NPTuscanyOnRamp setDayPass:]
  -[NPTuscanyOnRamp setTuscanyEndpoint:]
  -[NPTuscanyOnRamp dayPassSession]
  -[NPTuscanyOnRamp setDayPassSession:]
  -[NPTuscanyOnRamp setParentWaldo:]
  -[NPTuscanyOnRamp retryDate]
  -[NPTuscanyOnRamp setRetryDate:]
  -[NPTuscanyOnRamp daypassEndpoint]
  -[NPTuscanyOnRamp fillTestDaypass]
  -[NPTuscanyOnRamp invalidateDayPass]
  -[NPTuscanyOnRamp dayPassHardExpiry]
  -[NPTuscanyOnRamp dayPassFailed]
  -[NPTuscanyOnRamp isDayPassPastExpiry:]
  -[NPTuscanyOnRamp unregisterAgent]
  -[NPTuscanyOnRamp registerAgentWithKey:]
  -[NPTuscanyOnRamp getTuscanyEndpoint:]
  -[NPTuscanyOnRamp resetParentWaldo:]
  -[NPTuscanyOnRamp dayPassRefreshAllowed]
  -[NPTuscanyOnRamp refreshDayPassWithWaldoDelegate:softExpiry:retryInterval:edge:completionHandler:]
  -[NPTuscanyOnRamp setDayPassCreationDate:]
  -[NPTuscanyOnRamp setDayPassHardExpiry:]
  -[NPTuscanyOnRamp setDayPassFailed:]
  -[NPTuscanyOnRamp dayPassPending]
  -[NPTuscanyOnRamp setDayPassPending:]


NPNetworkInfo : NSObject <NSSecureCoding>
 @property  NSArray *edgeLatencies
 @property  NSArray *currentLatencyMap
 @property  NSDate *probeRateLimit
 @property  NPEdgeSelection *edgeSelection
 @property  BOOL isProbeInProgress
 @property  NSDate *lastVisited
 @property  NSDate *lastUsed
 @property  NSString *lastVisitedDesc
 @property  NSString *lastUsedDesc
 @property  long long lastFallbackReason
 @property  BOOL hasIPv6

  // class methods
  +[NPNetworkInfo supportsSecureCoding]
  +[NPNetworkInfo failureReasonToFallbackReason:]

  // instance methods
  -[NPNetworkInfo initWithCoder:]
  -[NPNetworkInfo .cxx_destruct]
  -[NPNetworkInfo setLastUsed:]
  -[NPNetworkInfo lastUsed]
  -[NPNetworkInfo encodeWithCoder:]
  -[NPNetworkInfo hasIPv6]
  -[NPNetworkInfo lastVisited]
  -[NPNetworkInfo edgeSelection]
  -[NPNetworkInfo edgeLatencies]
  -[NPNetworkInfo probeRateLimit]
  -[NPNetworkInfo lastFallbackReason]
  -[NPNetworkInfo isProbeInProgress]
  -[NPNetworkInfo currentLatencyMap]
  -[NPNetworkInfo setEdgeLatencies:]
  -[NPNetworkInfo isLatency:qualifiedForLatencyMap:parameters:requireUniqueEdges:]
  -[NPNetworkInfo setCurrentLatencyMap:]
  -[NPNetworkInfo compareLastVisited:]
  -[NPNetworkInfo lastVisitedDesc]
  -[NPNetworkInfo lastUsedDesc]
  -[NPNetworkInfo resortEdgeLatenciesUsingComparator:]
  -[NPNetworkInfo rebuildLatencyMapWithViewSize:edgeCount:parameters:]
  -[NPNetworkInfo mergeNewLatencies:usingComparator:]
  -[NPNetworkInfo handleTFOFailedForAddressFamily:]
  -[NPNetworkInfo setLastVisited:]
  -[NPNetworkInfo setLastFallbackReason:]
  -[NPNetworkInfo setHasIPv6:]
  -[NPNetworkInfo setProbeRateLimit:]
  -[NPNetworkInfo setEdgeSelection:]
  -[NPNetworkInfo setIsProbeInProgress:]


NPTuscanyEdge : NSObject <NSSecureCoding>
 @property  NSDictionary *onRampLists
 @property  NSDictionary *currentOnRampIndexList
 @property  NWEndpoint *probeEndpoint
 @property  NWEndpoint *onRampEndpoint
 @property  NSDate *lastUsed
 @property  NPWaldo *parentWaldo
 @property  NWEndpoint *savedEndpoint
 @property  BOOL reResolve
 @property  NSString *label
 @property  unsigned long index
 @property  NPLocation *location
 @property  double distance
 @property  BOOL probePending

  // class methods
  +[NPTuscanyEdge supportsSecureCoding]

  // instance methods
  -[NPTuscanyEdge label]
  -[NPTuscanyEdge initWithCoder:]
  -[NPTuscanyEdge setIndex:]
  -[NPTuscanyEdge .cxx_destruct]
  -[NPTuscanyEdge isEqual:]
  -[NPTuscanyEdge setLastUsed:]
  -[NPTuscanyEdge location]
  -[NPTuscanyEdge index]
  -[NPTuscanyEdge setDistance:]
  -[NPTuscanyEdge lastUsed]
  -[NPTuscanyEdge distance]
  -[NPTuscanyEdge encodeWithCoder:]
  -[NPTuscanyEdge resolveWithCompletionHandler:]
  -[NPTuscanyEdge probePending]
  -[NPTuscanyEdge setProbePending:]
  -[NPTuscanyEdge probeEndpoint]
  -[NPTuscanyEdge parentWaldo]
  -[NPTuscanyEdge setParentWaldo:]
  -[NPTuscanyEdge initWithLabel:index:onRampEndpoint:probeEndpoint:location:]
  -[NPTuscanyEdge onRampLists]
  -[NPTuscanyEdge currentOnRampIndexList]
  -[NPTuscanyEdge onRampEndpoint]
  -[NPTuscanyEdge savedEndpoint]
  -[NPTuscanyEdge iterateOnRampsForAddressFamily:withBlock:]
  -[NPTuscanyEdge getOnRamp:addressFamily:]
  -[NPTuscanyEdge setCurrentOnRampIndexList:]
  -[NPTuscanyEdge currentIndex:]
  -[NPTuscanyEdge reResolve]
  -[NPTuscanyEdge setReResolve:]
  -[NPTuscanyEdge setSavedEndpoint:]
  -[NPTuscanyEdge unsynthesizeAddresses:]
  -[NPTuscanyEdge getPortFromEndpoint:defaultPort:]
  -[NPTuscanyEdge setOnRampLists:]
  -[NPTuscanyEdge getCurrentOnRamp:]
  -[NPTuscanyEdge nextOnRampForLatency:outIndex:]
  -[NPTuscanyEdge setCurrentIndex:addressFamily:]
  -[NPTuscanyEdge compareByDistance:]
  -[NPTuscanyEdge linkWithOnRampsRetainMissingAddressFamilies:]


NPWaldo : NSObject <NSSecureCoding, NSCopying>
 @property  NSMutableDictionary *networkInformation
 @property  NSArray *allOnRamps
 @property  BOOL daypassRefreshInProgress
 @property  NSArray *currentEdges
 @property  long long currentEdgeIndex
 @property  NPTuscanyEdge *nextEdge
 @property  NSArray *currentEdgeList
 @property  BOOL reprocessCancelled
 @property  unsigned int generation
 @property  NSObject<OS_dispatch_source> *reprocessSamplingTimer
 @property  NWNetworkAgentRegistration *agentRegistration
 @property  NSUUID *configurationIdentifier
 @property  NSObject<OS_dispatch_queue> *reprocessQueue
 @property  @? latencyComparator
 @property  NSData *updateHash
 @property  BOOL reResolve
 @property  NSString *identifier
 @property  long long source
 @property  NSNumber *timestamp
 @property  NSNumber *version
 @property  NSString *dayPassHostname
 @property  NSNumber *dayPassHostnamePrependLabel
 @property  NSNumber *dayPassPort
 @property  NSNumber *dayPassRequestTimeout
 @property  NSString *dayPassLeafOID
 @property  NSNumber *dayPassRevocationFailClosed
 @property  NSNumber *dayPassExtendedValidation
 @property  NSNumber *dayPassEnableSessionTicket
 @property  NSArray *dayPassSoftExpiry
 @property  NSNumber *enableLatencyDerivation
 @property  NSNumber *latencyFactorA
 @property  NSNumber *latencyFactorB
 @property  NSNumber *latencyFactorX
 @property  NSNumber *edgeFairnessFactor
 @property  NSNumber *locationCheckInterval
 @property  NSNumber *locationTTL
 @property  NSNumber *locationToleranceDistance
 @property  NSNumber *viewSize
 @property  NSNumber *probePause
 @property  NSNumber *probeTFO
 @property  NSNumber *probeNoTFOCookie
 @property  NSNumber *probeTimeout
 @property  NSNumber *retryPause
 @property  NSNumber *signatureLimit
 @property  NSNumber *observedRTTSampleSize
 @property  NSNumber *reprocessSamplingInterval
 @property  NSNumber *reprocessSampleSize
 @property  NSNumber *connectionIdleTimeoutMaximum
 @property  NSString *tag
 @property  NSURL *telemetryURL
 @property  NSString *telemetryService
 @property  NSNumber *useGeohashFromServer
 @property  NSNumber *edgeSelectionEnabled
 @property  NSNumber *edgeSelectionAlpha
 @property  NSNumber *edgeSelectionWindowSize
 @property  NSNumber *enableIPv6
 @property  NSArray *edges
 @property  NSNumber *requireTFO
 @property  NSNumber *TFOLeeway
 @property  BOOL isIPv6Enabled
 @property  NSNumber *edgesGeneration
 @property  NSNumber *usedEdgesGeneration
 @property  NPTuscanyEdge *currentEdge
 @property  unsigned long edgeCount
 @property  BOOL hasEdges
 @property  long long dayPassFetchCount
 @property  NSDate *currentNetworkLastUsed
 @property  NSString *hostname
 @property  <NPWaldoDelegate> *delegate
 @property  BOOL shouldSave
 @property  NSDate *expirationDate
 @property  unsigned long probeSize
 @property  NPLocation *cachedLocation
 @property  NSDate *locationCheckTimestamp
 @property  NSDate *locationExpiration
 @property  NPWaldo *defaults
 @property  NSPNetworkAgent *agent
 @property  NPKeyBag *keybag
 @property  NPWaldoLocationManager *locationManager
 @property  BOOL reprocessPending

  // class methods
  +[NPWaldo supportsSecureCoding]
  +[NPWaldo createEndpointFromHostList:defaultPortString:allowIPv6:]

  // instance methods
  -[NPWaldo configurationIdentifier]
  -[NPWaldo hostname]
  -[NPWaldo setAgent:]
  -[NPWaldo agent]
  -[NPWaldo setDefaults:]
  -[NPWaldo defaults]
  -[NPWaldo setGeneration:]
  -[NPWaldo initWithCoder:]
  -[NPWaldo setTag:]
  -[NPWaldo tag]
  -[NPWaldo .cxx_destruct]
  -[NPWaldo link]
  -[NPWaldo keybag]
  -[NPWaldo locationManager]
  -[NPWaldo setViewSize:]
  -[NPWaldo generation]
  -[NPWaldo setDelegate:]
  -[NPWaldo setConfigurationIdentifier:]
  -[NPWaldo cachedLocation]
  -[NPWaldo init]
  -[NPWaldo setVersion:]
  -[NPWaldo viewSize]
  -[NPWaldo agentRegistration]
  -[NPWaldo edgeCount]
  -[NPWaldo setAgentRegistration:]
  -[NPWaldo identifier]
  -[NPWaldo setCachedLocation:]
  -[NPWaldo updateHash]
  -[NPWaldo removeFromKeychain]
  -[NPWaldo setHostname:]
  -[NPWaldo delegate]
  -[NPWaldo version]
  -[NPWaldo timestamp]
  -[NPWaldo requireTFO]
  -[NPWaldo setUpdateHash:]
  -[NPWaldo copyWithZone:]
  -[NPWaldo saveToKeychain]
  -[NPWaldo setLocationManager:]
  -[NPWaldo setEdges:]
  -[NPWaldo setRequireTFO:]
  -[NPWaldo expirationDate]
  -[NPWaldo edges]
  -[NPWaldo setTimestamp:]
  -[NPWaldo teardownNetworkAgent]
  -[NPWaldo source]
  -[NPWaldo encodeWithCoder:]
  -[NPWaldo telemetryURL]
  -[NPWaldo resolveWithCompletionHandler:]
  -[NPWaldo setShouldSave:]
  -[NPWaldo shouldSave]
  -[NPWaldo currentNetworkInfo]
  -[NPWaldo edgeAtIndex:]
  -[NPWaldo initWithIdentifier:timestamp:fromDictionary:source:]
  -[NPWaldo edgeSelectionAlpha]
  -[NPWaldo edgeSelectionWindowSize]
  -[NPWaldo currentEdgeList]
  -[NPWaldo currentEdgeIndex]
  -[NPWaldo reprocessPending]
  -[NPWaldo probePause]
  -[NPWaldo logEdgeList:debug:toStdout:]
  -[NPWaldo reprocessAdHocWithEdgeIndex:completionHandler:]
  -[NPWaldo updateEdgeSelection:]
  -[NPWaldo copyEdgeSelectionTelemetry]
  -[NPWaldo setKeybag:]
  -[NPWaldo probeTFO]
  -[NPWaldo probeNoTFOCookie]
  -[NPWaldo setProbeTFO:]
  -[NPWaldo setProbeNoTFOCookie:]
  -[NPWaldo dayPassRequestTimeout]
  -[NPWaldo dayPassEnableSessionTicket]
  -[NPWaldo dayPassExtendedValidation]
  -[NPWaldo dayPassLeafOID]
  -[NPWaldo dayPassRevocationFailClosed]
  -[NPWaldo dayPassHostnamePrependLabel]
  -[NPWaldo dayPassHostname]
  -[NPWaldo dayPassPort]
  -[NPWaldo onRampForIndex:]
  -[NPWaldo reResolve]
  -[NPWaldo setReResolve:]
  -[NPWaldo isIPv6Enabled]
  -[NPWaldo allOnRamps]
  -[NPWaldo setAllOnRamps:]
  -[NPWaldo networkInformation]
  -[NPWaldo rebuildLatencyMapAllSignatures:]
  -[NPWaldo linkAllSignatures:]
  -[NPWaldo linkLatenciesAllSignatures:]
  -[NPWaldo indexOfBestEdge]
  -[NPWaldo setCurrentEdgeIndex:]
  -[NPWaldo retryPause]
  -[NPWaldo probeTimeout]
  -[NPWaldo dayPassSoftExpiry]
  -[NPWaldo enableLatencyDerivation]
  -[NPWaldo latencyFactorX]
  -[NPWaldo latencyFactorA]
  -[NPWaldo latencyFactorB]
  -[NPWaldo edgeFairnessFactor]
  -[NPWaldo observedRTTSampleSize]
  -[NPWaldo signatureLimit]
  -[NPWaldo reprocessSamplingInterval]
  -[NPWaldo reprocessSampleSize]
  -[NPWaldo connectionIdleTimeoutMaximum]
  -[NPWaldo locationCheckInterval]
  -[NPWaldo locationToleranceDistance]
  -[NPWaldo locationTTL]
  -[NPWaldo locationCheckTimestamp]
  -[NPWaldo telemetryService]
  -[NPWaldo useGeohashFromServer]
  -[NPWaldo edgeSelectionEnabled]
  -[NPWaldo enableIPv6]
  -[NPWaldo TFOLeeway]
  -[NPWaldo edgesGeneration]
  -[NPWaldo usedEdgesGeneration]
  -[NPWaldo setRetryPause:]
  -[NPWaldo setProbePause:]
  -[NPWaldo setProbeTimeout:]
  -[NPWaldo setDayPassRequestTimeout:]
  -[NPWaldo setDayPassSoftExpiry:]
  -[NPWaldo setEnableLatencyDerivation:]
  -[NPWaldo setLatencyFactorX:]
  -[NPWaldo setLatencyFactorA:]
  -[NPWaldo setLatencyFactorB:]
  -[NPWaldo setEdgeFairnessFactor:]
  -[NPWaldo setObservedRTTSampleSize:]
  -[NPWaldo setReprocessSamplingInterval:]
  -[NPWaldo setReprocessSampleSize:]
  -[NPWaldo setLocationCheckInterval:]
  -[NPWaldo setLocationToleranceDistance:]
  -[NPWaldo setLocationTTL:]
  -[NPWaldo setDayPassHostname:]
  -[NPWaldo setDayPassHostnamePrependLabel:]
  -[NPWaldo setDayPassExtendedValidation:]
  -[NPWaldo setDayPassEnableSessionTicket:]
  -[NPWaldo setDayPassLeafOID:]
  -[NPWaldo setDayPassRevocationFailClosed:]
  -[NPWaldo setTelemetryURL:]
  -[NPWaldo setTelemetryService:]
  -[NPWaldo setUseGeohashFromServer:]
  -[NPWaldo setEdgeSelectionEnabled:]
  -[NPWaldo setEdgeSelectionAlpha:]
  -[NPWaldo setEdgeSelectionWindowSize:]
  -[NPWaldo setEnableIPv6:]
  -[NPWaldo setTFOLeeway:]
  -[NPWaldo setEdgesGeneration:]
  -[NPWaldo setUsedEdgesGeneration:]
  -[NPWaldo setSignatureLimit:]
  -[NPWaldo setConnectionIdleTimeoutMaximum:]
  -[NPWaldo ageOutLatencyMap]
  -[NPWaldo isLatenciesCompleteForNetwork:]
  -[NPWaldo refreshDayPassesWithCompletionHandler:]
  -[NPWaldo pushKeybagToKernel]
  -[NPWaldo reprocessWithCompletionHandler:]
  -[NPWaldo pushKeybagToKernelCanReuse:]
  -[NPWaldo dayPassFetchCount]
  -[NPWaldo updateNetworkAgentWithKeybag:networkInfo:]
  -[NPWaldo isEndpointProbed:parameters:latencies:checkSampleSize:incompleteLatency:]
  -[NPWaldo cleanupStaleKeys]
  -[NPWaldo reprocessWithNewRTT:reProbe:]
  -[NPWaldo shouldPerformDayPassRefresh]
  -[NPWaldo updateMetaDataNeedProbe:refresh:push:minRTT:]
  -[NPWaldo setNetworkInformation:]
  -[NPWaldo cancelProbes]
  -[NPWaldo timestampNetworkSignature:]
  -[NPWaldo setReprocessCancelled:]
  -[NPWaldo reprocessSamplingTimer]
  -[NPWaldo setReprocessSamplingTimer:]
  -[NPWaldo mergeEdgeList:forNetworkSignature:]
  -[NPWaldo loadObservedRTTSamples:]
  -[NPWaldo reprocessEdgeAtIndex:networkSignature:completionHandler:]
  -[NPWaldo latencyComparator]
  -[NPWaldo reprocessQueue]
  -[NPWaldo createEdgeLatenciesToProbeWithEdgeIndex:startSampleCount:]
  -[NPWaldo setReprocessPending:]
  -[NPWaldo reprocessLatencies:sampleCount:completionHandler:]
  -[NPWaldo probeSize]
  -[NPWaldo reprocessCancelled]
  -[NPWaldo getFallbackReasonForLatencies:]
  -[NPWaldo startProbingEdges:atIndex:doneCount:sampleCount:completionHandler:]
  -[NPWaldo validateEdgeList:]
  -[NPWaldo currentEdge]
  -[NPWaldo resortEdgeListForCurrentNetworkSignature]
  -[NPWaldo getDayPassRTT]
  -[NPWaldo copyEdgeList:]
  -[NPWaldo copyEdgeListRTTAverage:observed:shortDescription:]
  -[NPWaldo merge:missingSettingsOnly:]
  -[NPWaldo initFromKeychainWithIdentifier:]
  -[NPWaldo establishTrustWithCompletionHandler:]
  -[NPWaldo pushKeybagToKernelUpdateGeneration:]
  -[NPWaldo removeDayPassesFromKernel]
  -[NPWaldo handleUsageReport:]
  -[NPWaldo setCurrentNetworkCharacteristics:]
  -[NPWaldo getCurrentNetworkInterfaceType]
  -[NPWaldo initializeEdgeSelection]
  -[NPWaldo shouldFetchWaldo]
  -[NPWaldo hasEdges]
  -[NPWaldo logLatencyInfoToStdout:logAll:logEdgeSelection:]
  -[NPWaldo copyLatencyInfoDictionary:copyAll:]
  -[NPWaldo currentNetworkLastUsed]
  -[NPWaldo edgeContainingOnRamp:]
  -[NPWaldo copyStateIncludeDistance:]
  -[NPWaldo incrementSessionCounters]
  -[NPWaldo setDayPassPort:]
  -[NPWaldo setLocationCheckTimestamp:]
  -[NPWaldo locationExpiration]
  -[NPWaldo setLocationExpiration:]
  -[NPWaldo daypassRefreshInProgress]
  -[NPWaldo setDaypassRefreshInProgress:]
  -[NPWaldo currentEdges]
  -[NPWaldo nextEdge]


NPKey : NSObject
 @property  unsigned int session_counter
 @property  int error
 @property  NSData *info
 @property  NSUUID *uuid
 @property  unsigned int flags
 @property  NSPNetworkAgent *agentForKey

  // instance methods
  -[NPKey setFlags:]
  -[NPKey setInfo:]
  -[NPKey .cxx_destruct]
  -[NPKey info]
  -[NPKey data]
  -[NPKey flags]
  -[NPKey initWithData:]
  -[NPKey uuid]
  -[NPKey setError:]
  -[NPKey setUuid:]
  -[NPKey error]
  -[NPKey session_counter]
  -[NPKey agentForKey]
  -[NPKey setSession_counter:]


NPKeyBag : NSObject
 @property  NSDictionary *onRampMap
 @property  NSArray *onRampList
 @property  NSPredicate *validOnRampPredicate
 @property  NSPredicate *validOnRampWithTFOPredicate
 @property  NSArray *keys
 @property  unsigned int index
 @property  long long fallbackReason
 @property  unsigned int generation
 @property  NSData *updateHash
 @property  long long TFOStatusOverride
 @property  double lastUsedTimestamp
 @property  double timeSinceLastUsed

  // instance methods
  -[NPKeyBag keys]
  -[NPKeyBag setGeneration:]
  -[NPKeyBag setKeys:]
  -[NPKeyBag setIndex:]
  -[NPKeyBag .cxx_destruct]
  -[NPKeyBag generation]
  -[NPKeyBag data]
  -[NPKeyBag init]
  -[NPKeyBag updateHash]
  -[NPKeyBag initWithData:]
  -[NPKeyBag fallbackReason]
  -[NPKeyBag setFallbackReason:]
  -[NPKeyBag index]
  -[NPKeyBag setUpdateHash:]
  -[NPKeyBag removeIPv6Keys]
  -[NPKeyBag setTFOStatusOverride:]
  -[NPKeyBag logWithMessage:identifier:]
  -[NPKeyBag initWithOnRamps:currentNetworkInfo:currentEdgeIndex:currentEdgeList:generation:identifier:updateHash:]
  -[NPKeyBag TFOStatusOverride]
  -[NPKeyBag onRampMap]
  -[NPKeyBag onRampList]
  -[NPKeyBag createOnRamps]
  -[NPKeyBag copyUsableOnRamps:requireTFO:]
  -[NPKeyBag moveToNextOnRamp]
  -[NPKeyBag timeSinceLastUsed]
  -[NPKeyBag updateHashMatchesEdgeSet:]
  -[NPKeyBag getOnRampForEndpoint:]
  -[NPKeyBag moveToOnRamp:]
  -[NPKeyBag lastUsedTimestamp]
  -[NPKeyBag setLastUsedTimestamp:]
  -[NPKeyBag setOnRampMap:]
  -[NPKeyBag setOnRampList:]
  -[NPKeyBag validOnRampPredicate]
  -[NPKeyBag setValidOnRampPredicate:]
  -[NPKeyBag validOnRampWithTFOPredicate]
  -[NPKeyBag setValidOnRampWithTFOPredicate:]


NSPFlowDivert : NEAppProxyProviderContainer
 @property  NEPolicySession *policySession
 @property  BOOL started
 @property  BOOL shouldResetPolicies
 @property  NSPConfiguration *configuration
 @property  NEFlowDivertFileHandle *flowDivertControlHandle

  // instance methods
  -[NSPFlowDivert setStarted:]
  -[NSPFlowDivert policySession]
  -[NSPFlowDivert destroyFlowDivertSocketHandles]
  -[NSPFlowDivert teardown]
  -[NSPFlowDivert started]
  -[NSPFlowDivert didStartWithError:]
  -[NSPFlowDivert initWithDelegate:providerClass:configuration:]
  -[NSPFlowDivert configuration]
  -[NSPFlowDivert getExecutableConditions:]
  -[NSPFlowDivert .cxx_destruct]
  -[NSPFlowDivert createPolicySession]
  -[NSPFlowDivert startWithOptions:completionHandler:]
  -[NSPFlowDivert resetPolicies:]
  -[NSPFlowDivert stop]
  -[NSPFlowDivert addPolicy:]
  -[NSPFlowDivert didFailWithError:]
  -[NSPFlowDivert flowDivertControlHandle]
  -[NSPFlowDivert addPoliciesForAgent:conditions:]
  -[NSPFlowDivert setFlowDivertControlHandle:]
  -[NSPFlowDivert setShouldResetPolicies:]
  -[NSPFlowDivert setPolicySession:]
  -[NSPFlowDivert addPoliciesForDivertDNSOnly:domainConditions:divertResult:]
  -[NSPFlowDivert shouldInstallFlowDivert:]
  -[NSPFlowDivert getEffectiveAppRules:]
  -[NSPFlowDivert createFlowDivertSocketHandle]
  -[NSPFlowDivert shouldResetPolicies]
  -[NSPFlowDivert getAgentResultsForSelf]
  -[NSPFlowDivert destroyPolicySession]
  -[NSPFlowDivert getAgentResults:]
  -[NSPFlowDivert setConfiguration:]


NSPPrivacyProxyTokenRegistration : NSObject <NSPPrivacyProxyTokenAgentDelegate>
 @property  <NSPPrivacyProxyTokenRegistrationDelegate> *delegate
 @property  NSPPrivacyProxyTokenAgent *tokenAgent
 @property  NWNetworkAgentRegistration *tokenAgentRegistration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NSPPrivacyProxyTokenRegistration flushTokens]
  -[NSPPrivacyProxyTokenRegistration .cxx_destruct]
  -[NSPPrivacyProxyTokenRegistration setDelegate:]
  -[NSPPrivacyProxyTokenRegistration tokenCount]
  -[NSPPrivacyProxyTokenRegistration delegate]
  -[NSPPrivacyProxyTokenRegistration setLowWaterMark:]
  -[NSPPrivacyProxyTokenRegistration addToken:]
  -[NSPPrivacyProxyTokenRegistration reportErrorForAgent:error:withOptions:]
  -[NSPPrivacyProxyTokenRegistration tokenLowWaterMarkReachedForAgent:]
  -[NSPPrivacyProxyTokenRegistration initWithAgentUUID:agentDescription:delegate:]
  -[NSPPrivacyProxyTokenRegistration teardownTokenAgent]
  -[NSPPrivacyProxyTokenRegistration registerTokenAgent:]
  -[NSPPrivacyProxyTokenRegistration tokenAgentRegistration]
  -[NSPPrivacyProxyTokenRegistration tokenAgent]
  -[NSPPrivacyProxyTokenRegistration resetTokenAgentFileHandle]
  -[NSPPrivacyProxyTokenRegistration setTokenAgent:]
  -[NSPPrivacyProxyTokenRegistration setTokenAgentRegistration:]


NSPCaptiveWiFiHandler : NSObject <NSURLSessionTaskDelegate>
 @property  NSString *interfaceName
 @property  NSURLSession *urlSession
 @property  NSOperationQueue *operationQueue
 @property  NSURLSessionDataTask *dataTask
 @property  @? completionHandler
 @property  BOOL isRunning
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPCaptiveWiFiHandler sharedHandler]

  // instance methods
  -[NSPCaptiveWiFiHandler setOperationQueue:]
  -[NSPCaptiveWiFiHandler setDataTask:]
  -[NSPCaptiveWiFiHandler operationQueue]
  -[NSPCaptiveWiFiHandler setIsRunning:]
  -[NSPCaptiveWiFiHandler cleanup]
  -[NSPCaptiveWiFiHandler dataTask]
  -[NSPCaptiveWiFiHandler .cxx_destruct]
  -[NSPCaptiveWiFiHandler isRunning]
  -[NSPCaptiveWiFiHandler URLSession:task:didFinishCollectingMetrics:]
  -[NSPCaptiveWiFiHandler abort]
  -[NSPCaptiveWiFiHandler interfaceName]
  -[NSPCaptiveWiFiHandler urlSession]
  -[NSPCaptiveWiFiHandler report:]
  -[NSPCaptiveWiFiHandler setInterfaceName:]
  -[NSPCaptiveWiFiHandler setUrlSession:]
  -[NSPCaptiveWiFiHandler setCompletionHandler:]
  -[NSPCaptiveWiFiHandler start]
  -[NSPCaptiveWiFiHandler completionHandler]
  -[NSPCaptiveWiFiHandler setup:completionHandler:]
  -[NSPCaptiveWiFiHandler isHTTPResponseStatusCodeOK:]
  -[NSPCaptiveWiFiHandler isHTTPResponseStatusCodeRedirect:]
  -[NSPCaptiveWiFiHandler evaluate:completionHandler:]


NSPPrivacyProxyDNSAgent : NSObject <NWNetworkAgent>
 @property  NSObject<NSPPrivacyProxyDNSAgentDelegate> *delegate
 @property  NSPPrivacyProxyResolverInfo *resolver
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[NSPPrivacyProxyDNSAgent dnsAgentUUID]
  +[NSPPrivacyProxyDNSAgent agentFromData:]
  +[NSPPrivacyProxyDNSAgent agentType]
  +[NSPPrivacyProxyDNSAgent agentDomain]

  // instance methods
  -[NSPPrivacyProxyDNSAgent copyAgentData]
  -[NSPPrivacyProxyDNSAgent setUserActivated:]
  -[NSPPrivacyProxyDNSAgent setKernelActivated:]
  -[NSPPrivacyProxyDNSAgent isActive]
  -[NSPPrivacyProxyDNSAgent .cxx_destruct]
  -[NSPPrivacyProxyDNSAgent agentUUID]
  -[NSPPrivacyProxyDNSAgent setDelegate:]
  -[NSPPrivacyProxyDNSAgent agentDescription]
  -[NSPPrivacyProxyDNSAgent isUserActivated]
  -[NSPPrivacyProxyDNSAgent isKernelActivated]
  -[NSPPrivacyProxyDNSAgent setAgentUUID:]
  -[NSPPrivacyProxyDNSAgent initWithDelegate:]
  -[NSPPrivacyProxyDNSAgent setActive:]
  -[NSPPrivacyProxyDNSAgent delegate]
  -[NSPPrivacyProxyDNSAgent resolver]
  -[NSPPrivacyProxyDNSAgent setAgentDescription:]
  -[NSPPrivacyProxyDNSAgent setVoluntary:]
  -[NSPPrivacyProxyDNSAgent reportError:withOptions:]
  -[NSPPrivacyProxyDNSAgent setResolver:]
  -[NSPPrivacyProxyDNSAgent isVoluntary]


NSPPrivacyProxyBootstrapDNSAgent : NSPPrivacyProxyDNSAgent
  // class methods
  +[NSPPrivacyProxyBootstrapDNSAgent dnsAgentUUID]


NSPAnisette : NSObject <NSPAuthentication>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPAnisette authenticationFailure]
  +[NSPAnisette sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandler:]


NSPBAA : NSObject <NSPAuthentication>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPBAA signData:completionHandler:]
  +[NSPBAA authenticationFailure]
  +[NSPBAA sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandler:]
  +[NSPBAA fetchRequest:session:completionHandler:]
  +[NSPBAA sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandlerWithDataSign:]


NSPBAA_Anisette : NSObject <NSPAuthentication>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPBAA_Anisette authenticationFailure]
  +[NSPBAA_Anisette sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandler:]


NSPPrivacyProxyTokenActivationResponse : PBCodable <NSCopying>
 @property  BOOL hasTokenExpiryTimestamp
 @property  unsigned long tokenExpiryTimestamp
 @property  NSMutableArray *activatedTokenLists

  // class methods
  +[NSPPrivacyProxyTokenActivationResponse activatedTokenListType]

  // instance methods
  -[NSPPrivacyProxyTokenActivationResponse activatedTokenListAtIndex:]
  -[NSPPrivacyProxyTokenActivationResponse setActivatedTokenLists:]
  -[NSPPrivacyProxyTokenActivationResponse mergeFrom:]
  -[NSPPrivacyProxyTokenActivationResponse .cxx_destruct]
  -[NSPPrivacyProxyTokenActivationResponse activatedTokenLists]
  -[NSPPrivacyProxyTokenActivationResponse hasTokenExpiryTimestamp]
  -[NSPPrivacyProxyTokenActivationResponse dictionaryRepresentation]
  -[NSPPrivacyProxyTokenActivationResponse tokenExpiryTimestamp]
  -[NSPPrivacyProxyTokenActivationResponse setTokenExpiryTimestamp:]
  -[NSPPrivacyProxyTokenActivationResponse writeTo:]
  -[NSPPrivacyProxyTokenActivationResponse isEqual:]
  -[NSPPrivacyProxyTokenActivationResponse copyTo:]
  -[NSPPrivacyProxyTokenActivationResponse clearActivatedTokenLists]
  -[NSPPrivacyProxyTokenActivationResponse readFrom:]
  -[NSPPrivacyProxyTokenActivationResponse activatedTokenListsCount]
  -[NSPPrivacyProxyTokenActivationResponse copyWithZone:]
  -[NSPPrivacyProxyTokenActivationResponse setHasTokenExpiryTimestamp:]
  -[NSPPrivacyProxyTokenActivationResponse addActivatedTokenList:]


NSPConfigurationSignatureInfo : NSObject <NSSecureCoding, NSCopying>
 @property  NSArray *certificates
 @property  NSData *signature
 @property  unsigned long signatureAlgorithm

  // class methods
  +[NSPConfigurationSignatureInfo removeFromPreferences]
  +[NSPConfigurationSignatureInfo supportsSecureCoding]

  // instance methods
  -[NSPConfigurationSignatureInfo certificates]
  -[NSPConfigurationSignatureInfo saveToPreferences]
  -[NSPConfigurationSignatureInfo setCertificates:]
  -[NSPConfigurationSignatureInfo initWithCoder:]
  -[NSPConfigurationSignatureInfo setSignature:]
  -[NSPConfigurationSignatureInfo .cxx_destruct]
  -[NSPConfigurationSignatureInfo initFromPreferences]
  -[NSPConfigurationSignatureInfo signature]
  -[NSPConfigurationSignatureInfo setSignatureAlgorithm:]
  -[NSPConfigurationSignatureInfo signatureAlgorithm]
  -[NSPConfigurationSignatureInfo copyWithZone:]
  -[NSPConfigurationSignatureInfo encodeWithCoder:]


NSPConfiguration : NSObject <NSSecureCoding, NSCopying>
 @property  long long diskVersion
 @property  NSNumber *version
 @property  NSPConfiguration *defaults
 @property  NSNumber *timestamp
 @property  NSNumber *enabled
 @property  NSString *etag
 @property  NSDate *resurrectionDate
 @property  NSArray *appRules
 @property  NSNumber *configServerEnabled
 @property  NSString *configServerHost
 @property  NSNumber *configServerPort
 @property  NSString *configServerPath
 @property  NSNumber *urlRequestTimeout
 @property  NSString *waldoLeafOID
 @property  NSNumber *waldoRevocationFailClosed
 @property  NSURLSession *privacyProxyURLSession
 @property  BOOL ignoreInvalidCerts
 @property  NSDictionary *edgeSets
 @property  NSNumber *persistMetrics
 @property  NSDate *dayPassExpirationDate
 @property  NSDate *earliestEnableCheckDate
 @property  BOOL isDead
 @property  NSPPrivacyProxyConfiguration *proxyConfiguration
 @property  NSNumber *userTier
 @property  NSNumber *proxyTrafficState
 @property  NSDate *configurationFetchDate
 @property  NSNumber *cloudSubscriptionCheckEnabled
 @property  NSNumber *geohashSharingEnabledStatus
 @property  NSString *geohashOverride
 @property  NSNumber *proxyAccountType
 @property  NSNumber *userPreferredTier
 @property  NSNumber *trialConfigVersion

  // class methods
  +[NSPConfiguration verifyConfigurationSignature:configuration:host:validateCert:completionHandler:]
  +[NSPConfiguration validatePrivacyProxyConfiguration:]
  +[NSPConfiguration supportsSecureCoding]
  +[NSPConfiguration proxyAccountTypeToString:]
  +[NSPConfiguration proxyTrafficStateToString:]
  +[NSPConfiguration validateSignature:publicKey:signedData:]
  +[NSPConfiguration defaultConfiguration]

  // instance methods
  -[NSPConfiguration setProxyConfiguration:]
  -[NSPConfiguration setGeohashOverride:]
  -[NSPConfiguration proxyConfiguration]
  -[NSPConfiguration merge:]
  -[NSPConfiguration saveToPreferences]
  -[NSPConfiguration diskVersion]
  -[NSPConfiguration setUserTier:]
  -[NSPConfiguration privacyProxyURLSession]
  -[NSPConfiguration setAppRules:]
  -[NSPConfiguration descriptionWithIndent:options:]
  -[NSPConfiguration appRules]
  -[NSPConfiguration setDefaults:]
  -[NSPConfiguration defaults]
  -[NSPConfiguration setProxyTrafficState:]
  -[NSPConfiguration initWithCoder:]
  -[NSPConfiguration setCloudSubscriptionCheckEnabled:]
  -[NSPConfiguration teardown]
  -[NSPConfiguration proxyAccountType]
  -[NSPConfiguration edgeSets]
  -[NSPConfiguration setPersistMetrics:]
  -[NSPConfiguration dayPassExpirationDate]
  -[NSPConfiguration setUserPreferredTier:]
  -[NSPConfiguration setResurrectionDate:]
  -[NSPConfiguration userPreferredTier]
  -[NSPConfiguration .cxx_destruct]
  -[NSPConfiguration setTrialConfigVersion:]
  -[NSPConfiguration geohashSharingEnabledStatus]
  -[NSPConfiguration createConfigFetchURLWithDomain:timestamp:]
  -[NSPConfiguration incrementSessionCountersOnFirstLaunch]
  -[NSPConfiguration setup]
  -[NSPConfiguration isDead]
  -[NSPConfiguration evaluateEnableRatios]
  -[NSPConfiguration etag]
  -[NSPConfiguration setGeohashSharingEnabledStatus:]
  -[NSPConfiguration setConfigServerEnabled:]
  -[NSPConfiguration setEdgeSets:]
  -[NSPConfiguration enabled]
  -[NSPConfiguration resurrectionDate]
  -[NSPConfiguration ignoreInvalidCerts]
  -[NSPConfiguration initFromPreferences]
  -[NSPConfiguration setConfigServerPath:]
  -[NSPConfiguration configServerEnabled]
  -[NSPConfiguration getEdgeSetForSigningIdentifier:]
  -[NSPConfiguration proxyTrafficState]
  -[NSPConfiguration setVersion:]
  -[NSPConfiguration configServerHost]
  -[NSPConfiguration configServerPath]
  -[NSPConfiguration cloudSubscriptionCheckEnabled]
  -[NSPConfiguration initWithTimestamp:fromDictionary:waldoSource:]
  -[NSPConfiguration setWaldoLeafOID:]
  -[NSPConfiguration setUrlRequestTimeout:]
  -[NSPConfiguration userTier]
  -[NSPConfiguration urlRequestTimeout]
  -[NSPConfiguration configServerPort]
  -[NSPConfiguration copyAgentResultsForAppRule:]
  -[NSPConfiguration setConfigurationFetchDate:]
  -[NSPConfiguration setEtag:]
  -[NSPConfiguration updateNetworkAgents]
  -[NSPConfiguration setProxyAccountType:]
  -[NSPConfiguration persistMetrics]
  -[NSPConfiguration resetStaleEdgeSets]
  -[NSPConfiguration waldoRevocationFailClosed]
  -[NSPConfiguration removeFromKeychain]
  -[NSPConfiguration geohashOverride]
  -[NSPConfiguration setIgnoreInvalidCerts:]
  -[NSPConfiguration version]
  -[NSPConfiguration loadBuiltinAppRulesFromDisk]
  -[NSPConfiguration timestamp]
  -[NSPConfiguration initFromTLVs:]
  -[NSPConfiguration getEdgeSetForAppRule:]
  -[NSPConfiguration setupNSURLSession]
  -[NSPConfiguration trialConfigVersion]
  -[NSPConfiguration copyWithZone:]
  -[NSPConfiguration getCurrentKeyBagForAppRule:]
  -[NSPConfiguration diagnostics]
  -[NSPConfiguration saveToKeychain]
  -[NSPConfiguration tierToString]
  -[NSPConfiguration setEnabled:]
  -[NSPConfiguration waldoLeafOID]
  -[NSPConfiguration setPrivacyProxyURLSession:]
  -[NSPConfiguration enumerateEdgeSetsWithBlock:]
  -[NSPConfiguration setConfigServerHost:]
  -[NSPConfiguration setTimestamp:]
  -[NSPConfiguration setWaldoRevocationFailClosed:]
  -[NSPConfiguration initFromKeychain]
  -[NSPConfiguration encodeWithCoder:]
  -[NSPConfiguration setConfigServerPort:]
  -[NSPConfiguration earliestEnableCheckDate]
  -[NSPConfiguration copyTLVData]
  -[NSPConfiguration configurationFetchDate]


NSPByteParser : NSObject <NSCopying>
 @property  NSData *data
 @property  r* bytes
 @property  r* cursor
 @property  unsigned long offset

  // instance methods
  -[NSPByteParser cursor]
  -[NSPByteParser bytes]
  -[NSPByteParser parse32Bits:]
  -[NSPByteParser parseAddressWithFamily:]
  -[NSPByteParser parseBytes:]
  -[NSPByteParser offset]
  -[NSPByteParser setCursor:]
  -[NSPByteParser .cxx_destruct]
  -[NSPByteParser data]
  -[NSPByteParser parse8Bits:]
  -[NSPByteParser initWithData:]
  -[NSPByteParser setOffset:]
  -[NSPByteParser copyWithZone:]
  -[NSPByteParser advanceBy:andCopyTo:]
  -[NSPByteParser parse16Bits:]
  -[NSPByteParser parseDomainName]


NPTunnelFlowTelemetry : NPTunnelFlowHTTP
  // instance methods
  -[NPTunnelFlowTelemetry handleTunnelConnected]
  -[NPTunnelFlowTelemetry isBestEffort]
  -[NPTunnelFlowTelemetry initWithTunnel:service:postURL:]
  -[NPTunnelFlowTelemetry reportTelemetry:]


NSPProxyAnalytics : NSObject
  // instance methods
  -[NSPProxyAnalytics analyticsDict]
  -[NSPProxyAnalytics eventName]
  -[NSPProxyAnalytics sendAnalytics]


NSPConfigurationFetchAnalytics : NSPProxyAnalytics
 @property  NSString *configFetchURL
 @property  long long httpCode
 @property  long long nsurlErrorCode
 @property  NSString *requestedServerUUID
 @property  double latency
 @property  NSString *reason

  // instance methods
  -[NSPConfigurationFetchAnalytics setNsurlErrorCode:]
  -[NSPConfigurationFetchAnalytics .cxx_destruct]
  -[NSPConfigurationFetchAnalytics latency]
  -[NSPConfigurationFetchAnalytics setHttpCode:]
  -[NSPConfigurationFetchAnalytics analyticsDict]
  -[NSPConfigurationFetchAnalytics eventName]
  -[NSPConfigurationFetchAnalytics httpCode]
  -[NSPConfigurationFetchAnalytics configFetchURL]
  -[NSPConfigurationFetchAnalytics nsurlErrorCode]
  -[NSPConfigurationFetchAnalytics reason]
  -[NSPConfigurationFetchAnalytics configFetchURLToIndex]
  -[NSPConfigurationFetchAnalytics setReason:]
  -[NSPConfigurationFetchAnalytics requestedServerUUID]
  -[NSPConfigurationFetchAnalytics setRequestedServerUUID:]
  -[NSPConfigurationFetchAnalytics setConfigFetchURL:]
  -[NSPConfigurationFetchAnalytics setLatency:]


NSPTokenFetchAnalytics : NSPProxyAnalytics
 @property  NSString *proxyURL
 @property  NSString *proxyVendor
 @property  NSString *tierType
 @property  NSString *authenticationType
 @property  NSString *requestedServerUUID
 @property  unsigned long requestedTokenCount
 @property  unsigned long activatedCount
 @property  long long httpCode
 @property  long long nsurlErrorCode
 @property  double latency

  // instance methods
  -[NSPTokenFetchAnalytics setProxyURL:]
  -[NSPTokenFetchAnalytics proxyURL]
  -[NSPTokenFetchAnalytics requestedTokenCount]
  -[NSPTokenFetchAnalytics setAuthenticationType:]
  -[NSPTokenFetchAnalytics setNsurlErrorCode:]
  -[NSPTokenFetchAnalytics .cxx_destruct]
  -[NSPTokenFetchAnalytics setActivatedCount:]
  -[NSPTokenFetchAnalytics latency]
  -[NSPTokenFetchAnalytics setHttpCode:]
  -[NSPTokenFetchAnalytics setTierType:]
  -[NSPTokenFetchAnalytics setProxyVendor:]
  -[NSPTokenFetchAnalytics analyticsDict]
  -[NSPTokenFetchAnalytics proxyVendor]
  -[NSPTokenFetchAnalytics eventName]
  -[NSPTokenFetchAnalytics authenticationType]
  -[NSPTokenFetchAnalytics tierType]
  -[NSPTokenFetchAnalytics httpCode]
  -[NSPTokenFetchAnalytics setRequestedTokenCount:]
  -[NSPTokenFetchAnalytics nsurlErrorCode]
  -[NSPTokenFetchAnalytics requestedServerUUID]
  -[NSPTokenFetchAnalytics setRequestedServerUUID:]
  -[NSPTokenFetchAnalytics setLatency:]
  -[NSPTokenFetchAnalytics activatedCount]


NSPConfigurationStats : NSPProxyAnalytics
 @property  unsigned long configurationVersion
 @property  BOOL configurationEnabled
 @property  BOOL tokenFetchEnabled
 @property  NSString *tierType
 @property  BOOL safariUnencryptedEnabled
 @property  BOOL safariDNSEnabled
 @property  BOOL safariTrackersEnabled
 @property  BOOL safariAllEnabled
 @property  BOOL safariHTTPEnabled
 @property  BOOL mailTrackersEnabled
 @property  BOOL unencryptedEnabled
 @property  BOOL dnsEnabled
 @property  BOOL knownTrackersEnabled
 @property  BOOL appTrackersEnabled
 @property  BOOL newsURLResolutionEnabled
 @property  BOOL exposureNotificationsEnabled

  // instance methods
  -[NSPConfigurationStats configurationVersion]
  -[NSPConfigurationStats .cxx_destruct]
  -[NSPConfigurationStats setTierType:]
  -[NSPConfigurationStats analyticsDict]
  -[NSPConfigurationStats eventName]
  -[NSPConfigurationStats tierType]
  -[NSPConfigurationStats setConfigurationVersion:]
  -[NSPConfigurationStats setDnsEnabled:]
  -[NSPConfigurationStats dnsEnabled]
  -[NSPConfigurationStats setConfigurationEnabled:]
  -[NSPConfigurationStats setTokenFetchEnabled:]
  -[NSPConfigurationStats setSafariUnencryptedEnabled:]
  -[NSPConfigurationStats setSafariDNSEnabled:]
  -[NSPConfigurationStats setSafariTrackersEnabled:]
  -[NSPConfigurationStats setSafariAllEnabled:]
  -[NSPConfigurationStats setSafariHTTPEnabled:]
  -[NSPConfigurationStats setMailTrackersEnabled:]
  -[NSPConfigurationStats setUnencryptedEnabled:]
  -[NSPConfigurationStats setKnownTrackersEnabled:]
  -[NSPConfigurationStats setAppTrackersEnabled:]
  -[NSPConfigurationStats setNewsURLResolutionEnabled:]
  -[NSPConfigurationStats setExposureNotificationsEnabled:]
  -[NSPConfigurationStats configurationEnabled]
  -[NSPConfigurationStats tokenFetchEnabled]
  -[NSPConfigurationStats safariUnencryptedEnabled]
  -[NSPConfigurationStats safariDNSEnabled]
  -[NSPConfigurationStats safariTrackersEnabled]
  -[NSPConfigurationStats safariAllEnabled]
  -[NSPConfigurationStats safariHTTPEnabled]
  -[NSPConfigurationStats mailTrackersEnabled]
  -[NSPConfigurationStats unencryptedEnabled]
  -[NSPConfigurationStats knownTrackersEnabled]
  -[NSPConfigurationStats appTrackersEnabled]
  -[NSPConfigurationStats newsURLResolutionEnabled]
  -[NSPConfigurationStats exposureNotificationsEnabled]


NSPServiceStatusStats : NSPProxyAnalytics
 @property  NSString *tierType
 @property  unsigned long serviceStatusDisabledCount
 @property  unsigned long serviceStatusActiveCount
 @property  unsigned long serviceStatusOutageCount
 @property  unsigned long serviceStatusFraudAlertCount
 @property  unsigned long serviceStatusUnsupportedRegionCount
 @property  unsigned long serviceStatusSystemIncompatibleCount
 @property  unsigned long serviceStatusSubscriberUnsupportedRegionCount
 @property  unsigned long serviceStatusNetworkOutageCount

  // instance methods
  -[NSPServiceStatusStats .cxx_destruct]
  -[NSPServiceStatusStats setTierType:]
  -[NSPServiceStatusStats analyticsDict]
  -[NSPServiceStatusStats eventName]
  -[NSPServiceStatusStats tierType]
  -[NSPServiceStatusStats serviceStatusDisabledCount]
  -[NSPServiceStatusStats setServiceStatusDisabledCount:]
  -[NSPServiceStatusStats serviceStatusActiveCount]
  -[NSPServiceStatusStats setServiceStatusActiveCount:]
  -[NSPServiceStatusStats serviceStatusFraudAlertCount]
  -[NSPServiceStatusStats setServiceStatusFraudAlertCount:]
  -[NSPServiceStatusStats serviceStatusOutageCount]
  -[NSPServiceStatusStats setServiceStatusOutageCount:]
  -[NSPServiceStatusStats serviceStatusUnsupportedRegionCount]
  -[NSPServiceStatusStats setServiceStatusUnsupportedRegionCount:]
  -[NSPServiceStatusStats serviceStatusSubscriberUnsupportedRegionCount]
  -[NSPServiceStatusStats setServiceStatusSubscriberUnsupportedRegionCount:]
  -[NSPServiceStatusStats serviceStatusSystemIncompatibleCount]
  -[NSPServiceStatusStats setServiceStatusSystemIncompatibleCount:]
  -[NSPServiceStatusStats serviceStatusNetworkOutageCount]
  -[NSPServiceStatusStats setServiceStatusNetworkOutageCount:]


NSPNetworkStatusStats : NSPProxyAnalytics
 @property  NSString *tierType
 @property  unsigned long wifiStatusBlockedCount
 @property  unsigned long wifiStatusDisabledCount
 @property  unsigned long wifiStatusActiveCount
 @property  unsigned long cellStatusBlockedCount
 @property  unsigned long cellStatusDisabledCount
 @property  unsigned long cellStatusActiveCount
 @property  unsigned long wiredStatusBlockedCount
 @property  unsigned long wiredStatusDisabledCount
 @property  unsigned long wiredStatusActiveCount

  // instance methods
  -[NSPNetworkStatusStats .cxx_destruct]
  -[NSPNetworkStatusStats setTierType:]
  -[NSPNetworkStatusStats analyticsDict]
  -[NSPNetworkStatusStats eventName]
  -[NSPNetworkStatusStats tierType]
  -[NSPNetworkStatusStats wifiStatusDisabledCount]
  -[NSPNetworkStatusStats setWifiStatusDisabledCount:]
  -[NSPNetworkStatusStats cellStatusDisabledCount]
  -[NSPNetworkStatusStats setCellStatusDisabledCount:]
  -[NSPNetworkStatusStats wiredStatusDisabledCount]
  -[NSPNetworkStatusStats setWiredStatusDisabledCount:]
  -[NSPNetworkStatusStats wifiStatusActiveCount]
  -[NSPNetworkStatusStats setWifiStatusActiveCount:]
  -[NSPNetworkStatusStats cellStatusActiveCount]
  -[NSPNetworkStatusStats setCellStatusActiveCount:]
  -[NSPNetworkStatusStats wiredStatusActiveCount]
  -[NSPNetworkStatusStats setWiredStatusActiveCount:]
  -[NSPNetworkStatusStats wifiStatusBlockedCount]
  -[NSPNetworkStatusStats setWifiStatusBlockedCount:]
  -[NSPNetworkStatusStats cellStatusBlockedCount]
  -[NSPNetworkStatusStats setCellStatusBlockedCount:]
  -[NSPNetworkStatusStats wiredStatusBlockedCount]
  -[NSPNetworkStatusStats setWiredStatusBlockedCount:]


NSPDeviceIdentityStats : NSPProxyAnalytics
 @property  BOOL success
 @property  NSString *errorDomain
 @property  long long errorCode

  // instance methods
  -[NSPDeviceIdentityStats setSuccess:]
  -[NSPDeviceIdentityStats errorDomain]
  -[NSPDeviceIdentityStats errorCode]
  -[NSPDeviceIdentityStats success]
  -[NSPDeviceIdentityStats .cxx_destruct]
  -[NSPDeviceIdentityStats analyticsDict]
  -[NSPDeviceIdentityStats setErrorCode:]
  -[NSPDeviceIdentityStats eventName]
  -[NSPDeviceIdentityStats setErrorDomain:]


NSPProxyAgentStats : NSPProxyAnalytics
 @property  NSString *tierType
 @property  unsigned long ingressProxyTokensAdded
 @property  unsigned long egressProxyTokensAdded
 @property  unsigned long ingressProxyLowWaterMarkHitCount
 @property  unsigned long egressProxyLowWaterMarkHitCount

  // instance methods
  -[NSPProxyAgentStats egressProxyLowWaterMarkHitCount]
  -[NSPProxyAgentStats .cxx_destruct]
  -[NSPProxyAgentStats setTierType:]
  -[NSPProxyAgentStats analyticsDict]
  -[NSPProxyAgentStats ingressProxyLowWaterMarkHitCount]
  -[NSPProxyAgentStats setEgressProxyLowWaterMarkHitCount:]
  -[NSPProxyAgentStats eventName]
  -[NSPProxyAgentStats tierType]
  -[NSPProxyAgentStats ingressProxyTokensAdded]
  -[NSPProxyAgentStats setIngressProxyLowWaterMarkHitCount:]
  -[NSPProxyAgentStats setIngressProxyTokensAdded:]
  -[NSPProxyAgentStats setEgressProxyTokensAdded:]
  -[NSPProxyAgentStats egressProxyTokensAdded]


NSPOutageReasonStats : NSPProxyAnalytics <NSSecureCoding, NSCopying>
 @property  NSString *tierType
 @property  NSString *outageReasonType
 @property  NSString *outageReasonSubType
 @property  NSString *primaryIngressProxy
 @property  NSString *primaryEgressProxy
 @property  NSString *fallbackIngressProxy
 @property  NSString *fallbackEgressProxy
 @property  NSString *odohProxy
 @property  NSString *tokenProxy

  // class methods
  +[NSPOutageReasonStats supportsSecureCoding]

  // instance methods
  -[NSPOutageReasonStats initWithCoder:]
  -[NSPOutageReasonStats .cxx_destruct]
  -[NSPOutageReasonStats setTierType:]
  -[NSPOutageReasonStats analyticsDict]
  -[NSPOutageReasonStats eventName]
  -[NSPOutageReasonStats tierType]
  -[NSPOutageReasonStats copyWithZone:]
  -[NSPOutageReasonStats encodeWithCoder:]
  -[NSPOutageReasonStats setOutageReasonType:]
  -[NSPOutageReasonStats setOutageReasonSubType:]
  -[NSPOutageReasonStats setTokenProxy:]
  -[NSPOutageReasonStats outageReasonType]
  -[NSPOutageReasonStats outageReasonSubType]
  -[NSPOutageReasonStats primaryIngressProxy]
  -[NSPOutageReasonStats primaryEgressProxy]
  -[NSPOutageReasonStats fallbackIngressProxy]
  -[NSPOutageReasonStats fallbackEgressProxy]
  -[NSPOutageReasonStats odohProxy]
  -[NSPOutageReasonStats tokenProxy]
  -[NSPOutageReasonStats setPrimaryIngressProxy:]
  -[NSPOutageReasonStats setPrimaryEgressProxy:]
  -[NSPOutageReasonStats setFallbackIngressProxy:]
  -[NSPOutageReasonStats setFallbackEgressProxy:]
  -[NSPOutageReasonStats setOdohProxy:]


NSPPrivateRelayIncompatibleNetworkStats : NSPProxyAnalytics
 @property  NSString *tierType
 @property  NSString *interfaceType

  // instance methods
  -[NSPPrivateRelayIncompatibleNetworkStats setInterfaceType:]
  -[NSPPrivateRelayIncompatibleNetworkStats interfaceType]
  -[NSPPrivateRelayIncompatibleNetworkStats .cxx_destruct]
  -[NSPPrivateRelayIncompatibleNetworkStats setTierType:]
  -[NSPPrivateRelayIncompatibleNetworkStats analyticsDict]
  -[NSPPrivateRelayIncompatibleNetworkStats eventName]
  -[NSPPrivateRelayIncompatibleNetworkStats tierType]


NSPBadTokenInfoStats : NSPProxyAnalytics
 @property  NSString *tierType
 @property  NSString *tokenProxy
 @property  unsigned long configAgeHours
 @property  NSString *configTag

  // instance methods
  -[NSPBadTokenInfoStats .cxx_destruct]
  -[NSPBadTokenInfoStats setTierType:]
  -[NSPBadTokenInfoStats analyticsDict]
  -[NSPBadTokenInfoStats eventName]
  -[NSPBadTokenInfoStats tierType]
  -[NSPBadTokenInfoStats setTokenProxy:]
  -[NSPBadTokenInfoStats tokenProxy]
  -[NSPBadTokenInfoStats configAgeHours]
  -[NSPBadTokenInfoStats configTag]
  -[NSPBadTokenInfoStats setConfigAgeHours:]
  -[NSPBadTokenInfoStats setConfigTag:]


NSPSwitchEgressProxyStats : NSPProxyAnalytics
 @property  NSString *tierType
 @property  NSString *vendor
 @property  BOOL primaryProxy
 @property  BOOL fallbackProxy

  // instance methods
  -[NSPSwitchEgressProxyStats vendor]
  -[NSPSwitchEgressProxyStats setVendor:]
  -[NSPSwitchEgressProxyStats .cxx_destruct]
  -[NSPSwitchEgressProxyStats setTierType:]
  -[NSPSwitchEgressProxyStats analyticsDict]
  -[NSPSwitchEgressProxyStats eventName]
  -[NSPSwitchEgressProxyStats tierType]
  -[NSPSwitchEgressProxyStats setPrimaryProxy:]
  -[NSPSwitchEgressProxyStats setFallbackProxy:]
  -[NSPSwitchEgressProxyStats primaryProxy]
  -[NSPSwitchEgressProxyStats fallbackProxy]


NSPProbeStats : NSPProxyAnalytics
 @property  NSString *tierType
 @property  long long probeReason
 @property  NSString *probeInterface
 @property  unsigned long probeDurationSec
 @property  unsigned long proxyProbeCount
 @property  unsigned long proxyProbeSuccessCount
 @property  unsigned long proxyProbeFailedCount
 @property  unsigned long proxyProbeRedirectedCount
 @property  unsigned long proxyProbeServerErrorCount
 @property  unsigned long directProbeCount
 @property  unsigned long directProbeSuccessCount
 @property  unsigned long directProbeFailedCount
 @property  unsigned long directProbeRedirectedCount
 @property  unsigned long directProbeServerErrorCount

  // instance methods
  -[NSPProbeStats .cxx_destruct]
  -[NSPProbeStats setTierType:]
  -[NSPProbeStats analyticsDict]
  -[NSPProbeStats eventName]
  -[NSPProbeStats tierType]
  -[NSPProbeStats setProbeReason:]
  -[NSPProbeStats setProbeInterface:]
  -[NSPProbeStats setProbeDurationSec:]
  -[NSPProbeStats setProxyProbeCount:]
  -[NSPProbeStats setProxyProbeSuccessCount:]
  -[NSPProbeStats setProxyProbeFailedCount:]
  -[NSPProbeStats setProxyProbeRedirectedCount:]
  -[NSPProbeStats setProxyProbeServerErrorCount:]
  -[NSPProbeStats setDirectProbeCount:]
  -[NSPProbeStats setDirectProbeSuccessCount:]
  -[NSPProbeStats setDirectProbeFailedCount:]
  -[NSPProbeStats setDirectProbeRedirectedCount:]
  -[NSPProbeStats setDirectProbeServerErrorCount:]
  -[NSPProbeStats probeReason]
  -[NSPProbeStats probeReasonToString]
  -[NSPProbeStats probeInterface]
  -[NSPProbeStats probeDurationSec]
  -[NSPProbeStats proxyProbeCount]
  -[NSPProbeStats proxyProbeSuccessCount]
  -[NSPProbeStats proxyProbeFailedCount]
  -[NSPProbeStats proxyProbeRedirectedCount]
  -[NSPProbeStats proxyProbeServerErrorCount]
  -[NSPProbeStats directProbeCount]
  -[NSPProbeStats directProbeSuccessCount]
  -[NSPProbeStats directProbeFailedCount]
  -[NSPProbeStats directProbeRedirectedCount]
  -[NSPProbeStats directProbeServerErrorCount]


NSPProbeHTTPErrorCodeStats : NSPProxyAnalytics
 @property  NSString *interfaceType
 @property  BOOL directPath
 @property  NSNumber *HTTPErrorCode

  // instance methods
  -[NSPProbeHTTPErrorCodeStats setInterfaceType:]
  -[NSPProbeHTTPErrorCodeStats interfaceType]
  -[NSPProbeHTTPErrorCodeStats .cxx_destruct]
  -[NSPProbeHTTPErrorCodeStats analyticsDict]
  -[NSPProbeHTTPErrorCodeStats eventName]
  -[NSPProbeHTTPErrorCodeStats setDirectPath:]
  -[NSPProbeHTTPErrorCodeStats setHTTPErrorCode:]
  -[NSPProbeHTTPErrorCodeStats HTTPErrorCode]
  -[NSPProbeHTTPErrorCodeStats directPath]


NSPOutageDurationStats : NSPProxyAnalytics
 @property  unsigned long outageType
 @property  unsigned long outageDurationSec

  // instance methods
  -[NSPOutageDurationStats analyticsDict]
  -[NSPOutageDurationStats eventName]
  -[NSPOutageDurationStats setOutageType:]
  -[NSPOutageDurationStats setOutageDurationSec:]
  -[NSPOutageDurationStats outageType]
  -[NSPOutageDurationStats outageTypeToString]
  -[NSPOutageDurationStats outageDurationSec]


NSPToggleStats : NSPProxyAnalytics
 @property  BOOL toggleState
 @property  unsigned long tokenOutageCount
 @property  unsigned long networkOutageCount
 @property  unsigned long networkRedirectOutageCount
 @property  unsigned long proxyOutageCount
 @property  unsigned long odohOutageCount
 @property  unsigned long systemIncompatibleCount
 @property  unsigned long fraudAlertCount
 @property  NSPProxyAgentNetworkStatistics *primaryPathStatistics
 @property  NSPProxyAgentNetworkStatistics *fallbackPathStatistics
 @property  unsigned long odohAuthFailureCount
 @property  unsigned long odohBadMessageCount

  // instance methods
  -[NSPToggleStats .cxx_destruct]
  -[NSPToggleStats analyticsDict]
  -[NSPToggleStats init]
  -[NSPToggleStats eventName]
  -[NSPToggleStats toggleState]
  -[NSPToggleStats setToggleState:]
  -[NSPToggleStats resetStats]
  -[NSPToggleStats primaryPathStatistics]
  -[NSPToggleStats fallbackPathStatistics]
  -[NSPToggleStats tokenOutageCount]
  -[NSPToggleStats networkOutageCount]
  -[NSPToggleStats networkRedirectOutageCount]
  -[NSPToggleStats proxyOutageCount]
  -[NSPToggleStats odohOutageCount]
  -[NSPToggleStats systemIncompatibleCount]
  -[NSPToggleStats fraudAlertCount]
  -[NSPToggleStats odohAuthFailureCount]
  -[NSPToggleStats odohBadMessageCount]
  -[NSPToggleStats addNetworkStatsToToggleStatsDict:networkStats:]
  -[NSPToggleStats setTokenOutageCount:]
  -[NSPToggleStats setNetworkOutageCount:]
  -[NSPToggleStats setNetworkRedirectOutageCount:]
  -[NSPToggleStats setProxyOutageCount:]
  -[NSPToggleStats setOdohOutageCount:]
  -[NSPToggleStats setSystemIncompatibleCount:]
  -[NSPToggleStats setFraudAlertCount:]
  -[NSPToggleStats setOdohAuthFailureCount:]
  -[NSPToggleStats setOdohBadMessageCount:]
  -[NSPToggleStats sendToggleOnStats]
  -[NSPToggleStats sendToggleOffStats]
  -[NSPToggleStats setPrimaryPathStatistics:]
  -[NSPToggleStats setFallbackPathStatistics:]


NSPManager : NSObject <NPTunnelDelegate, NEAppProxyProviderContainerDelegate>
 @property  NWPathEvaluator *policyEvaluator
 @property  NSDictionary *appRules
 @property  NPKeyBag *keybag
 @property  NPKeyBag *inUseKeybag
 @property  NSPConfiguration *configuration
 @property  NSPFlowDivert *flowDivert
 @property  NSMutableDictionary *flowInfoMap
 @property  BOOL isObserving
 @property  NSArray *currentAgents
 @property  NSMutableDictionary *fallbackCounts
 @property  <NSPManagerDelegate> *delegate
 @property  NSString *signingIdentifier
 @property  NSPAppRule *matchingAppRule
 @property  NSMutableArray *knownFlows
 @property  @? pendingCancellationHandler
 @property  NSArray *testLatencyMap
 @property  BOOL testFetchDaypass
 @property  unsigned long testLatencyMapIndex
 @property  unsigned int nextFlowID
 @property  unsigned int tunnelCount
 @property  NSObject<OS_nw_endpoint> *currentTunnelEndpoint
 @property  NWPathEvaluator *pathEvaluator
 @property  BOOL currentNetworkHasProxies
 @property  BOOL isEnabled
 @property  @? changeHandler
 @property  @? connectionInfoSetHandler
 @property  @? tunnelConnectedHandler
 @property  double timeIntervalSinceLastUsage
 @property  BOOL disableIdleTimeout
 @property  BOOL isFirstTunnel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NSPManager sharedManager]

  // instance methods
  -[NSPManager setAppRules:]
  -[NSPManager appRules]
  -[NSPManager configuration]
  -[NSPManager setIsObserving:]
  -[NSPManager .cxx_destruct]
  -[NSPManager keybag]
  -[NSPManager isObserving]
  -[NSPManager setDelegate:]
  -[NSPManager setChangeHandler:]
  -[NSPManager init]
  -[NSPManager container:didStartWithError:]
  -[NSPManager container:didRequestFlowDivertControlSocketWithCompletionHandler:]
  -[NSPManager pathEvaluator]
  -[NSPManager signingIdentifier]
  -[NSPManager isEnabled]
  -[NSPManager stopWithCompletionHandler:]
  -[NSPManager delegate]
  -[NSPManager start]
  -[NSPManager fetchStateForClient:withPeerEndpoint:completionHandler:]
  -[NSPManager changeHandler]
  -[NSPManager observeValueForKeyPath:ofObject:change:context:]
  -[NSPManager setConfiguration:]
  -[NSPManager flowDivert]
  -[NSPManager policyEvaluator]
  -[NSPManager currentNetworkHasProxies]
  -[NSPManager setConnectionInfo:forIdentifier:]
  -[NSPManager getConnectionInfoForIdentifier:]
  -[NSPManager timeIntervalSinceLastUsage]
  -[NSPManager disableIdleTimeout]
  -[NSPManager setDisableIdleTimeout:]
  -[NSPManager setKeybag:]
  -[NSPManager useTestLatencyMap]
  -[NSPManager getTestLatencyRTT:parameters:]
  -[NSPManager isFirstTunnel]
  -[NSPManager tunnel:flowDidFallbackWithReason:]
  -[NSPManager sendUsageReport:]
  -[NSPManager tunnelDidConnect:]
  -[NSPManager tunnelIsReady:]
  -[NSPManager tunnelDidCancel:]
  -[NSPManager instantiateFlowWithTunnel:inputProtocol:]
  -[NSPManager instantiateTunnelWithEndpoint:parameters:]
  -[NSPManager createTransformsForEndpoint:parameters:]
  -[NSPManager useTestDaypass]
  -[NSPManager resetTestLatencyMapIndex:]
  -[NSPManager setMatchingAppRule:]
  -[NSPManager createAppRuleMapWithRules:]
  -[NSPManager matchingAppRule]
  -[NSPManager setFlowDivert:]
  -[NSPManager handlePolicyUpdate]
  -[NSPManager inUseKeybag]
  -[NSPManager tunnelConnectedHandler]
  -[NSPManager setTunnelConnectedHandler:]
  -[NSPManager connectionInfoSetHandler]
  -[NSPManager createReplacementEndpointForEndpoint:properties:]
  -[NSPManager getAppRuleMatchingParameters:flowProperties:]
  -[NSPManager setInUseKeybag:]
  -[NSPManager buildTestLatencyMap:]
  -[NSPManager container:didFailWithError:]
  -[NSPManager container:didSetTunnelConfiguration:completionHandler:]
  -[NSPManager waitForTunnelsToCancelWithCompletionHandler:]
  -[NSPManager startWithConfiguration:appRules:delegate:]
  -[NSPManager shouldSetConfigurationToAppRule:edgeSet:]
  -[NSPManager ingestTestLatencyMap:local:completionHandler:]
  -[NSPManager setConnectionInfoSetHandler:]
  -[NSPManager flowInfoMap]
  -[NSPManager setFlowInfoMap:]
  -[NSPManager currentAgents]
  -[NSPManager setCurrentAgents:]
  -[NSPManager fallbackCounts]
  -[NSPManager knownFlows]
  -[NSPManager pendingCancellationHandler]
  -[NSPManager setPendingCancellationHandler:]
  -[NSPManager testLatencyMap]
  -[NSPManager setTestLatencyMap:]
  -[NSPManager testFetchDaypass]
  -[NSPManager setTestFetchDaypass:]
  -[NSPManager testLatencyMapIndex]
  -[NSPManager setTestLatencyMapIndex:]
  -[NSPManager nextFlowID]
  -[NSPManager setNextFlowID:]
  -[NSPManager tunnelCount]
  -[NSPManager setTunnelCount:]
  -[NSPManager currentTunnelEndpoint]
  -[NSPManager setCurrentTunnelEndpoint:]


<DEREK BUG Categories!>(NPPrettyPrint)
	// instance methods
	-[<DEREK BUG Categories!>(NPPrettyPrint) appendPrettyObject:withName:andIndent:options:]
	-[<DEREK BUG Categories!>(NPPrettyPrint) appendPrettyInt:withName:andIndent:options:]
	-[<DEREK BUG Categories!>(NPPrettyPrint) appendPrettyBOOL:withName:andIndent:options:]
	-[<DEREK BUG Categories!>(NPPrettyPrint) appendToStringAtColumnWithContent:column:content:appendAsNewLine:addNewLine:]

(PlatformSpecific)
	// instance methods
	-[(PlatformSpecific) objectForPlatformSpecificKey:]

<DEREK BUG Categories!>(NSPTLV)
	// instance methods
	-[<DEREK BUG Categories!>(NSPTLV) enumerateTLVsUsingBlock:]
	-[<DEREK BUG Categories!>(NSPTLV) appendType:length:value:]

01 00 0600 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKURLSession 
01 00 0500 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLGeocoder 
01 00 0500 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 0500 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationManager 
01 00 1900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppProxyProvider 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppProxyProviderContainer 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppProxyUDPFlow 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEAppRule 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEFileHandleMaintainer 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEFlowDivertFileHandle 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEHasher 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NENetworkAgentRegistrationFileHandle 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicy 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicyCondition 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicyResult 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicyRouteRule 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicySession 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEPolicySessionFileHandle 
01 00 1000 /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension: NEProcessInfo 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPURLResponse 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInputStream 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 1500 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLCredential 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLRequest 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 1200 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWAddressEndpoint 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWBonjourServiceEndpoint 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWEndpoint 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWHostEndpoint 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWNetworkAgentRegistration 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWParameters 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWPath 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWPathEvaluator 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWResolver 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWTCPConnection 
01 00 1100 /System/Library/Frameworks/Network.framework/Network: NWUDPSession 
01 00 0800 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0300 /System/Library/PrivateFrameworks/CryptoKitPrivate.framework/CryptoKitPrivate: RSABSSATokenBlinder 
01 00 0100 /System/Library/PrivateFrameworks/RTCReporting.framework/RTCReporting: RTCReporting 
01 00 0a00 /System/Library/PrivateFrameworks/SymptomDiagnosticReporter.framework/SymptomDiagnosticReporter: SDRDiagnosticReporter 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNMutableNotificationContent 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationRequest 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNUserNotificationCenter 
