|| __DATA.__common _g_inbound_connection
|| __DATA.__data _kMLAckFailNetworkHeaderEncoding
|| __DATA.__data _kMLAckSuccessNetworkHeaderEncoding
|| __DATA.__data _kMLCustomNetworkHeaderEncoding
|| __DATA.__data _kMLErrorNetworkHeaderEncoding
|| __DATA.__data _kMLIncomingDataNetworkHeaderEncoding
|| __DATA.__data _kMLLoadNetworkHeaderEncoding
|| __DATA.__data _kMLNetworkFamilyKey
|| __DATA.__data _kMLNetworkLocalAddrKey
|| __DATA.__data _kMLNetworkLocalPortKey
|| __DATA.__data _kMLNetworkNameIdentifierKey
|| __DATA.__data _kMLNetworkPortNumberKey
|| __DATA.__data _kMLNetworkPskKey
|| __DATA.__data _kMLNetworkUseAWDLKey
|| __DATA.__data _kMLNetworkUseBonjourKey
|| __DATA.__data _kMLNetworkUseTLSKey
|| __DATA.__data _kMLNetworkUseUDPKey
|| __DATA.__data _kMLPredictNetworkHeaderEncoding
|| __DATA.__data _kMLTextNetworkHeaderEncoding
|| __DATA.__data _kMLUnLoadNetworkHeaderEncoding
|| __DATA.__objc_data _OBJC_CLASS_$__MLLog
|| __DATA.__objc_data _OBJC_CLASS_$__MLNetworkHeaderEncoding
|| __DATA.__objc_data _OBJC_CLASS_$__MLNetworkOptions
|| __DATA.__objc_data _OBJC_CLASS_$__MLNetworkPacket
|| __DATA.__objc_data _OBJC_CLASS_$__MLNetworkUtilities
|| __DATA.__objc_data _OBJC_CLASS_$__MLNetworking
|| __DATA.__objc_data _OBJC_CLASS_$__MLRemoteConnection
|| __DATA.__objc_data _OBJC_CLASS_$__MLRemoteCoreMLErrors
|| __DATA.__objc_data _OBJC_CLASS_$__MLServer
|| __DATA.__objc_data _OBJC_METACLASS_$__MLLog
|| __DATA.__objc_data _OBJC_METACLASS_$__MLNetworkHeaderEncoding
|| __DATA.__objc_data _OBJC_METACLASS_$__MLNetworkOptions
|| __DATA.__objc_data _OBJC_METACLASS_$__MLNetworkPacket
|| __DATA.__objc_data _OBJC_METACLASS_$__MLNetworkUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$__MLNetworking
|| __DATA.__objc_data _OBJC_METACLASS_$__MLRemoteConnection
|| __DATA.__objc_data _OBJC_METACLASS_$__MLRemoteCoreMLErrors
|| __DATA.__objc_data _OBJC_METACLASS_$__MLServer
|| __TEXT.__const _RemoteCoreMLVersionNumber
|| __TEXT.__const _RemoteCoreMLVersionString
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: ___CFConstantStringClassReference
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSString
__ Security: _sec_protocol_options_add_pre_shared_key
__ Security: _sec_protocol_options_add_tls_ciphersuite
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_data_apply
__ libSystem.B.dylib: _dispatch_data_create
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: dyld_stub_binder
__ libnetwork.dylib: __nw_content_context_default_message
__ libnetwork.dylib: __nw_parameters_configure_protocol_default_configuration
__ libnetwork.dylib: __nw_parameters_configure_protocol_disable
__ libnetwork.dylib: _nw_advertise_descriptor_create_bonjour_service
__ libnetwork.dylib: _nw_connection_cancel
__ libnetwork.dylib: _nw_connection_copy_endpoint
__ libnetwork.dylib: _nw_connection_create
__ libnetwork.dylib: _nw_connection_receive
__ libnetwork.dylib: _nw_connection_send
__ libnetwork.dylib: _nw_connection_set_queue
__ libnetwork.dylib: _nw_connection_set_state_changed_handler
__ libnetwork.dylib: _nw_connection_start
__ libnetwork.dylib: _nw_content_context_get_is_final
__ libnetwork.dylib: _nw_endpoint_create_bonjour_service
__ libnetwork.dylib: _nw_endpoint_create_host
__ libnetwork.dylib: _nw_endpoint_get_bonjour_service_name
__ libnetwork.dylib: _nw_endpoint_get_hostname
__ libnetwork.dylib: _nw_endpoint_get_port
__ libnetwork.dylib: _nw_error_get_error_code
__ libnetwork.dylib: _nw_ip_options_set_version
__ libnetwork.dylib: _nw_listener_create
__ libnetwork.dylib: _nw_listener_get_port
__ libnetwork.dylib: _nw_listener_set_advertise_descriptor
__ libnetwork.dylib: _nw_listener_set_advertised_endpoint_changed_handler
__ libnetwork.dylib: _nw_listener_set_new_connection_handler
__ libnetwork.dylib: _nw_listener_set_queue
__ libnetwork.dylib: _nw_listener_set_state_changed_handler
__ libnetwork.dylib: _nw_listener_start
__ libnetwork.dylib: _nw_parameters_copy_default_protocol_stack
__ libnetwork.dylib: _nw_parameters_create_secure_tcp
__ libnetwork.dylib: _nw_parameters_create_secure_udp
__ libnetwork.dylib: _nw_parameters_set_include_peer_to_peer
__ libnetwork.dylib: _nw_parameters_set_local_endpoint
__ libnetwork.dylib: _nw_parameters_set_required_interface_subtype
__ libnetwork.dylib: _nw_parameters_set_required_interface_type
__ libnetwork.dylib: _nw_parameters_set_use_p2p
__ libnetwork.dylib: _nw_protocol_stack_copy_internet_protocol
__ libnetwork.dylib: _nw_tls_copy_sec_protocol_options
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
_MLNetworkUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[_MLNetworkUtilities configureTLS:]
  +[_MLNetworkUtilities createSecureConnectionParameter:useUDP:]
  +[_MLNetworkUtilities setProtocolStack:family:]
  +[_MLNetworkUtilities doInitNetwork:]
  +[_MLNetworkUtilities setupBonjour:name:useBonjour:useUDP:]
  +[_MLNetworkUtilities setupListenerStateChangeHandler:useUDP:]
  +[_MLNetworkUtilities setAWDL:useAWDL:]
  +[_MLNetworkUtilities bindEndPoints:localAddr:localPort:]


_MLNetworking : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_nw_connection> *connection
 @property  NSObject<OS_nw_listener> *listener
 @property  _MLNetworkOptions *nwOptions
 @property  NSObject<OS_nw_protocol_stack> *protocol_stack
 @property  NSObject<OS_nw_parameters> *parameters
 @property  BOOL isClient
 @property  NSObject<OS_os_log> *logType
 @property  NSObject<OS_dispatch_queue> *q

  // instance methods
  -[_MLNetworking listener]
  -[_MLNetworking .cxx_destruct]
  -[_MLNetworking stop]
  -[_MLNetworking connection]
  -[_MLNetworking setConnection:]
  -[_MLNetworking parameters]
  -[_MLNetworking q]
  -[_MLNetworking startConnection]
  -[_MLNetworking isClient]
  -[_MLNetworking sendData:]
  -[_MLNetworking logType]
  -[_MLNetworking initConnection:]
  -[_MLNetworking nwOptions]
  -[_MLNetworking receiveLoop:]
  -[_MLNetworking initListener:]
  -[_MLNetworking restartConnection]
  -[_MLNetworking setReceiveDataCallBack:]
  -[_MLNetworking setListenerReceiveDataCallBack:]
  -[_MLNetworking protocol_stack]


_MLRemoteConnection : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_nw_connection> *connection
 @property  _MLNetworking *nwObj
 @property  _MLNetworkOptions *nwOptions
 @property  _MLNetworkPacket *packet
 @property  NSMutableData *outputResult
 @property  unsigned long jobCount
 @property  NSObject<OS_dispatch_semaphore> *semaphore
 @property  NSObject<OS_dispatch_queue> *q

  // instance methods
  -[_MLRemoteConnection initWithOptions:]
  -[_MLRemoteConnection .cxx_destruct]
  -[_MLRemoteConnection connection]
  -[_MLRemoteConnection q]
  -[_MLRemoteConnection semaphore]
  -[_MLRemoteConnection loadFromURL:options:error:]
  -[_MLRemoteConnection packet]
  -[_MLRemoteConnection outputResult]
  -[_MLRemoteConnection jobCount]
  -[_MLRemoteConnection nwOptions]
  -[_MLRemoteConnection doReceive:context:isComplete:error:]
  -[_MLRemoteConnection nwObj]
  -[_MLRemoteConnection setOutputResult:]
  -[_MLRemoteConnection sendDataAndWaitForAcknowledgementOrTimeout:]
  -[_MLRemoteConnection predictionFromURL:features:output:options:error:]
  -[_MLRemoteConnection unloadFromURL:options:error:]
  -[_MLRemoteConnection send:options:]


_MLRemoteCoreMLErrors : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[_MLRemoteCoreMLErrors createErrorWithCode:description:]
  +[_MLRemoteCoreMLErrors clientTimeoutErrorForMethod:]


_MLServer : NSObject /usr/lib/libSystem.B.dylib
 @property  _MLNetworking *nwObj
 @property  _MLNetworkOptions *nwOptions
 @property  _MLNetworkPacket *packet
 @property  @? loadFunction
 @property  @? predictFunction
 @property  @? unLoadFunction
 @property  @? textFunction
 @property  NSObject<OS_dispatch_queue> *q

  // instance methods
  -[_MLServer initWithOptions:]
  -[_MLServer .cxx_destruct]
  -[_MLServer stop]
  -[_MLServer start]
  -[_MLServer q]
  -[_MLServer packet]
  -[_MLServer nwOptions]
  -[_MLServer doReceive:context:isComplete:error:]
  -[_MLServer nwObj]
  -[_MLServer loadFunction]
  -[_MLServer unLoadFunction]
  -[_MLServer predictFunction]
  -[_MLServer textFunction]
  -[_MLServer setLoadFunction:]
  -[_MLServer setPredictFunction:]
  -[_MLServer setUnLoadFunction:]
  -[_MLServer setTextFunction:]
  -[_MLServer setLoadCommand:]
  -[_MLServer setPredictCommand:]
  -[_MLServer setUnLoadCommand:]
  -[_MLServer setTextCommand:]


_MLLog : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[_MLLog common]
  +[_MLLog daemon]
  +[_MLLog tool]
  +[_MLLog clientFramework]
  +[_MLLog serverFramework]


_MLNetworkOptions : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *networkOptions
 @property  long long receiveTimeout

  // instance methods
  -[_MLNetworkOptions initWithOptions:]
  -[_MLNetworkOptions port]
  -[_MLNetworkOptions .cxx_destruct]
  -[_MLNetworkOptions localPort]
  -[_MLNetworkOptions family]
  -[_MLNetworkOptions useAWDL]
  -[_MLNetworkOptions psk]
  -[_MLNetworkOptions useUDP]
  -[_MLNetworkOptions useTLS]
  -[_MLNetworkOptions useBonjour]
  -[_MLNetworkOptions networkNameIdentifier]
  -[_MLNetworkOptions localAddr]
  -[_MLNetworkOptions receiveTimeoutValue]
  -[_MLNetworkOptions networkOptions]
  -[_MLNetworkOptions receiveTimeout]


_MLNetworkHeaderEncoding : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[_MLNetworkHeaderEncoding loadModel:]
  +[_MLNetworkHeaderEncoding getHeaderEncoding:]
  +[_MLNetworkHeaderEncoding getHeaderDataSize:]
  +[_MLNetworkHeaderEncoding isHeaderError:]
  +[_MLNetworkHeaderEncoding acknowledgeFailData]
  +[_MLNetworkHeaderEncoding getHeaderSize]
  +[_MLNetworkHeaderEncoding getHeaderEnd:]
  +[_MLNetworkHeaderEncoding getHeaderDataStart:]
  +[_MLNetworkHeaderEncoding isHeaderAcknowledgeSucessData:]
  +[_MLNetworkHeaderEncoding isHeaderPredictFeature:]
  +[_MLNetworkHeaderEncoding predictFeature:]
  +[_MLNetworkHeaderEncoding unLoadModel:]
  +[_MLNetworkHeaderEncoding textDebug:]
  +[_MLNetworkHeaderEncoding isHeaderLoad:]
  +[_MLNetworkHeaderEncoding isHeaderUnLoad:]
  +[_MLNetworkHeaderEncoding isHeaderText:]
  +[_MLNetworkHeaderEncoding acknowledgeSucessData]
  +[_MLNetworkHeaderEncoding constructDataPacket:HeaderEncoding:]
  +[_MLNetworkHeaderEncoding custom:]
  +[_MLNetworkHeaderEncoding isHeaderCustom:]
  +[_MLNetworkHeaderEncoding isHeaderAcknowledgeFailData:]
  +[_MLNetworkHeaderEncoding isHeaderIncomingData:]


_MLNetworkPacket : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableData *buffer
 @property  NSMutableData *doubleBuffer
 @property  unsigned long sizeOfPacket
 @property  unsigned long command

  // instance methods
  -[_MLNetworkPacket init]
  -[_MLNetworkPacket .cxx_destruct]
  -[_MLNetworkPacket reset]
  -[_MLNetworkPacket setBuffer:]
  -[_MLNetworkPacket buffer]
  -[_MLNetworkPacket setCommand:]
  -[_MLNetworkPacket command]
  -[_MLNetworkPacket resetMetadata]
  -[_MLNetworkPacket sizeOfPacket]
  -[_MLNetworkPacket setSizeOfPacket:]
  -[_MLNetworkPacket cleanupDoubleBuffer]
  -[_MLNetworkPacket setDoubleBuffer:]
  -[_MLNetworkPacket resetDoubleBuffer]
  -[_MLNetworkPacket doubleBuffer]


01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0500 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
