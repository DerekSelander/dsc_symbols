|| __DATA.__common _NviLogContextFacility
|| __DATA.__common __sampleRate
|| __DATA.__data __decimationCorrection
|| __DATA.__data __decimationFactor
|| __DATA.__data __overlapFactor
|| __DATA.__data _entitlementPrefix
|| __DATA.__data _entitlementPrefixOSX
|| __DATA.__data _kCSMockRemotePluginServiceName
|| __DATA.__data _kMetaFilenameWithPrefixActivation
|| __DATA.__data _kMetaFilenameWithPrefixAlmost
|| __DATA.__data _kMetaFilenameWithPrefixRejected
|| __DATA.__data _kMetaFilenameWithPrefixTriggered
|| __DATA.__data _kXPCEncodeKeyIsRemoteDevice
|| __DATA.__data _kXPCEncodeKeyPlaybackDeviceType
|| __DATA.__data _kXPCEncodeKeyPlaybackRoute
|| __DATA.__data _kXPCEncodeKeyRecordDeviceInfo
|| __DATA.__data _kXPCEncodeKeyRemoteDeviceProductIdentifier
|| __DATA.__data _kXPCEncodeKeyRemoteDeviceUID
|| __DATA.__data _kXPCEncodeKeyRemoteDeviceUIDString
|| __DATA.__data _kXPCEncodeKeyRoute
|| __DATA.__objc_data _OBJC_CLASS_$_CSAVCallConnectedMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAVVCRecordingClientMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAVVoiceTriggerClientManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSAccessorySiriClientBehaviorMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSActivationEventNotificationHandler
|| __DATA.__objc_data _OBJC_CLASS_$_CSAdBlockerAssetDecoderFactory
|| __DATA.__objc_data _OBJC_CLASS_$_CSAdBlockerAssetDecoderV1
|| __DATA.__objc_data _OBJC_CLASS_$_CSAdBlockerAssetDecoderV2
|| __DATA.__objc_data _OBJC_CLASS_$_CSAdBlockerAssetDecoderV3
|| __DATA.__objc_data _OBJC_CLASS_$_CSAdBlockerAssetDownloadMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAlertBehaviorPredictor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAlwaysDisabledPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_CSAlwaysEnabledPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_CSAlwaysOnProcessorStateMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAttSiriAttendingTriggerEventInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CSAttSiriAudioSessionStateClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSAttSiriMitigationAssetHandler
|| __DATA.__objc_data _OBJC_CLASS_$_CSAttSiriRequestContext
|| __DATA.__objc_data _OBJC_CLASS_$_CSAttSiriServiceClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSAttSiriStateMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioFileLog
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioFileReader
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionBuiltInEngine
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionDevice
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionEngine
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionEngineFactory
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionFileOption
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionHearstEngine
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionRemoraEngine
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionServices
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioInjectionTvRemoteEngine
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioPreprocessor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioRecordDeviceIndicator
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioRecorder
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioRecorderFactory
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioRouteChangeMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioRouteChangeMonitorImpl
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioRouteChangeMonitorImplWatch
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioSampleRateConverter
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioServerCrashMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioSessionInfoProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioSessionMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioStreamHolding
|| __DATA.__objc_data _OBJC_CLASS_$_CSAudioTandemStream
|| __DATA.__objc_data _OBJC_CLASS_$_CSAutomaticVolumeEnabledMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSBatteryMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSBenchmarkService
|| __DATA.__objc_data _OBJC_CLASS_$_CSBiometricMatchMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSBluetoothDeviceInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CSBluetoothManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSBluetoothWirelessSplitterInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CSBluetoothWirelessSplitterMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSBluetoothWirelessSplitterMonitorImpIOS
|| __DATA.__objc_data _OBJC_CLASS_$_CSBluetoothWirelessSplitterMonitorImplDarwin
|| __DATA.__objc_data _OBJC_CLASS_$_CSBuiltInVoiceTrigger
|| __DATA.__objc_data _OBJC_CLASS_$_CSBuiltInVoiceTriggerEnabledPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_CSBuiltinSpeakerStateMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSClamshellStateMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSCommandControlBehaviorMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSCommandControlListener
|| __DATA.__objc_data _OBJC_CLASS_$_CSCommandControlListenerOption
|| __DATA.__objc_data _OBJC_CLASS_$_CSCommandControlStreamEventMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSConnectionListener
|| __DATA.__objc_data _OBJC_CLASS_$_CSContinuousAudioFingerprintProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CSCoreSpeechServices
|| __DATA.__objc_data _OBJC_CLASS_$_CSDarkWakePowerAssertionMac
|| __DATA.__objc_data _OBJC_CLASS_$_CSDefaultAudioRouteChangeMonitorMac
|| __DATA.__objc_data _OBJC_CLASS_$_CSFallbackAudioSessionReleaseProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CSGestureDropEvent
|| __DATA.__objc_data _OBJC_CLASS_$_CSGestureMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSGestureMonitorPhone
|| __DATA.__objc_data _OBJC_CLASS_$_CSHearstSecondPassRequest
|| __DATA.__objc_data _OBJC_CLASS_$_CSHostLauncherDarwin
|| __DATA.__objc_data _OBJC_CLASS_$_CSHostPowerSourceMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSJarvisTriggerModeMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSKeywordAnalyzerNDEAPI
|| __DATA.__objc_data _OBJC_CLASS_$_CSKeywordAnalyzerNDEAPIResult
|| __DATA.__objc_data _OBJC_CLASS_$_CSKeywordAnalyzerQuasar
|| __DATA.__objc_data _OBJC_CLASS_$_CSKeywordDetector
|| __DATA.__objc_data _OBJC_CLASS_$_CSLanguageCodeUpdateMonitorImplDarwin
|| __DATA.__objc_data _OBJC_CLASS_$_CSLanguageDetector
|| __DATA.__objc_data _OBJC_CLASS_$_CSLanguageDetectorAssetMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSLanguageDetectorOption
|| __DATA.__objc_data _OBJC_CLASS_$_CSListeningEnabledPolicyWatch
|| __DATA.__objc_data _OBJC_CLASS_$_CSMSNExceptionManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSMacWakeSleepMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSMicUsageReporter
|| __DATA.__objc_data _OBJC_CLASS_$_CSMyriadNotifier
|| __DATA.__objc_data _OBJC_CLASS_$_CSMyriadPHash
|| __DATA.__objc_data _OBJC_CLASS_$_CSMyriadPHashFactors
|| __DATA.__objc_data _OBJC_CLASS_$_CSMyriadSelfTriggerCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_CSNNVADEndpointAnalyzer
|| __DATA.__objc_data _OBJC_CLASS_$_CSOpportuneSpeakBehaviorMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSOpportuneSpeakEventMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSOpportuneSpeakListener
|| __DATA.__objc_data _OBJC_CLASS_$_CSOpportuneSpeakListenerDeviceManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSOpportuneSpeakListenerOption
|| __DATA.__objc_data _OBJC_CLASS_$_CSOpportuneSpeakListnerTestService
|| __DATA.__objc_data _OBJC_CLASS_$_CSOtherAppRecordingStateMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSPhoneCallStateMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSPhraseSpotterEnabledMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSPostBuildInstallService
|| __DATA.__objc_data _OBJC_CLASS_$_CSPowerAssertionMac
|| __DATA.__objc_data _OBJC_CLASS_$_CSPreMyriadCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_CSPreMyriadVoiceTriggerMetaData
|| __DATA.__objc_data _OBJC_CLASS_$_CSRawAudioInjectionProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CSRemoraSecondPassAudioStreamHoldingContext
|| __DATA.__objc_data _OBJC_CLASS_$_CSRemoraSecondPassRequest
|| __DATA.__objc_data _OBJC_CLASS_$_CSRemoteControlClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSRemoteDarwinDeviceInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CSRemoteDeviceProtocolInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CSRemoteRecordClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSRemoteVADCircularBuffer
|| __DATA.__objc_data _OBJC_CLASS_$_CSSPGEndpointAnalyzer
|| __DATA.__objc_data _OBJC_CLASS_$_CSSRFUserSettingMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSSRXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSScreenLockMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSelfTriggerDetector
|| __DATA.__objc_data _OBJC_CLASS_$_CSSelfTriggerDetectorEnabledPolicyDarwin
|| __DATA.__objc_data _OBJC_CLASS_$_CSSelfTriggerDetectorEnabledPolicyFactory
|| __DATA.__objc_data _OBJC_CLASS_$_CSSelfTriggerDetectorEnabledPolicyGibraltar
|| __DATA.__objc_data _OBJC_CLASS_$_CSSelfTriggerDetectorEnabledPolicyIOS
|| __DATA.__objc_data _OBJC_CLASS_$_CSSelfTriggerDetectorEnabledPolicyMac
|| __DATA.__objc_data _OBJC_CLASS_$_CSShadowMicScoreCreator
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriAcousticFingerprinter
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriAssertionMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriAudioPlaybackSessionImplAVAudioPlayerBased
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriAudioPlaybackSessionImplAVPlayerBased
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriAudioRoute
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriAudioSession
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriBluetoothManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriDebugConnection
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriEnabledMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriFanInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriFanInfoManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriLauncher
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriMobileBluetoothDeviceDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriMobileBluetoothDeviceProxy
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriPreferences
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriQueueMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSiriRestrictionOnLockScreenMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSmartSiriVolume
|| __DATA.__objc_data _OBJC_CLASS_$_CSSmartSiriVolumeClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSSmartSiriVolumeController
|| __DATA.__objc_data _OBJC_CLASS_$_CSSmartSiriVolumeEnablePolicy
|| __DATA.__objc_data _OBJC_CLASS_$_CSSmartSiriVolumeEstimate
|| __DATA.__objc_data _OBJC_CLASS_$_CSSmartSiriVolumeManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSSmartSiriVolumeUserIntent
|| __DATA.__objc_data _OBJC_CLASS_$_CSSoftwareUpdateCheckingMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSpeakerRecognitionProxy
|| __DATA.__objc_data _OBJC_CLASS_$_CSSpeechDetectionDevicePresentMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSSpeechManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSSpringboardStartMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSStartOfSpeechDetector
|| __DATA.__objc_data _OBJC_CLASS_$_CSStateMachine
|| __DATA.__objc_data _OBJC_CLASS_$_CSSyncKeywordAnalyzerQuasar
|| __DATA.__objc_data _OBJC_CLASS_$_CSUserIdentityClassifier
|| __DATA.__objc_data _OBJC_CLASS_$_CSUserSessionActiveMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSVTSecondPassPhraseScore
|| __DATA.__objc_data _OBJC_CLASS_$_CSVTSecondPassScorer
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceIdXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceIdXPCConnection
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceProfileContext
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceProfileRetrainManager
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAOPModeEnabledPolicyFactory
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAOPModeEnabledPolicyIOS
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAlwaysOnProcessor
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAssetChangeMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAssetHandlerDarwin
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAwareZeroFilter
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerDataCollector
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEnabledMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEnabledPolicyAOP
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEnabledPolicyDarwin
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEnabledPolicyHorseman
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEnabledPolicyMac
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEnabledPolicyNonAOP
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEventInfoProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerEventsCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerFidesClient
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerFileLogger
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerFirstPassHearst
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerFirstPassHearstAP
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerFirstPassJarvis
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerFirstPassRemora
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerRTModel
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerSecondPass
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerStatAggregator
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerStatistics
|| __DATA.__objc_data _OBJC_CLASS_$_CSVoiceTriggerXPCServiceProxy
|| __DATA.__objc_data _OBJC_CLASS_$_CoreSpeechXPC
|| __DATA.__objc_data _OBJC_CLASS_$_CoreSpeechXPCFakeModelMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_NviAudioFileWriter
|| __DATA.__objc_data _OBJC_CLASS_$_NviCSAudioDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_NviConstants
|| __DATA.__objc_data _OBJC_CLASS_$_NviContext
|| __DATA.__objc_data _OBJC_CLASS_$_NviDataLogger
|| __DATA.__objc_data _OBJC_CLASS_$_NviDirectionalitySignalData
|| __DATA.__objc_data _OBJC_CLASS_$_NviDirectionalitySignalProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NviSignalData
|| __DATA.__objc_data _OBJC_CLASS_$_NviSignalProvidersController
|| __DATA.__objc_data _OBJC_CLASS_$_NviUtils
|| __DATA.__objc_data _OBJC_CLASS_$_RMSSample
|| __DATA.__objc_data _OBJC_CLASS_$__CSSiriQueueObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAVCallConnectedMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAVVCRecordingClientMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAVVoiceTriggerClientManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAccessorySiriClientBehaviorMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSActivationEventNotificationHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAdBlockerAssetDecoderFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAdBlockerAssetDecoderV1
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAdBlockerAssetDecoderV2
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAdBlockerAssetDecoderV3
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAdBlockerAssetDownloadMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAlertBehaviorPredictor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAlwaysDisabledPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAlwaysEnabledPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAlwaysOnProcessorStateMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAttSiriAttendingTriggerEventInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAttSiriAudioSessionStateClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAttSiriMitigationAssetHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAttSiriRequestContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAttSiriServiceClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAttSiriStateMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioFileLog
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioFileReader
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionBuiltInEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionEngineFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionFileOption
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionHearstEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionRemoraEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionServices
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioInjectionTvRemoteEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioPreprocessor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioRecordDeviceIndicator
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioRecorder
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioRecorderFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioRouteChangeMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioRouteChangeMonitorImpl
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioRouteChangeMonitorImplWatch
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioSampleRateConverter
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioServerCrashMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioSessionInfoProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioSessionMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioStreamHolding
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAudioTandemStream
|| __DATA.__objc_data _OBJC_METACLASS_$_CSAutomaticVolumeEnabledMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBatteryMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBenchmarkService
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBiometricMatchMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBluetoothDeviceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBluetoothManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBluetoothWirelessSplitterInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBluetoothWirelessSplitterMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBluetoothWirelessSplitterMonitorImpIOS
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBluetoothWirelessSplitterMonitorImplDarwin
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBuiltInVoiceTrigger
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBuiltInVoiceTriggerEnabledPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_CSBuiltinSpeakerStateMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSClamshellStateMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSCommandControlBehaviorMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSCommandControlListener
|| __DATA.__objc_data _OBJC_METACLASS_$_CSCommandControlListenerOption
|| __DATA.__objc_data _OBJC_METACLASS_$_CSCommandControlStreamEventMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSConnectionListener
|| __DATA.__objc_data _OBJC_METACLASS_$_CSContinuousAudioFingerprintProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CSCoreSpeechServices
|| __DATA.__objc_data _OBJC_METACLASS_$_CSDarkWakePowerAssertionMac
|| __DATA.__objc_data _OBJC_METACLASS_$_CSDefaultAudioRouteChangeMonitorMac
|| __DATA.__objc_data _OBJC_METACLASS_$_CSFallbackAudioSessionReleaseProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CSGestureDropEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_CSGestureMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSGestureMonitorPhone
|| __DATA.__objc_data _OBJC_METACLASS_$_CSHearstSecondPassRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_CSHostLauncherDarwin
|| __DATA.__objc_data _OBJC_METACLASS_$_CSHostPowerSourceMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSJarvisTriggerModeMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSKeywordAnalyzerNDEAPI
|| __DATA.__objc_data _OBJC_METACLASS_$_CSKeywordAnalyzerNDEAPIResult
|| __DATA.__objc_data _OBJC_METACLASS_$_CSKeywordAnalyzerQuasar
|| __DATA.__objc_data _OBJC_METACLASS_$_CSKeywordDetector
|| __DATA.__objc_data _OBJC_METACLASS_$_CSLanguageCodeUpdateMonitorImplDarwin
|| __DATA.__objc_data _OBJC_METACLASS_$_CSLanguageDetector
|| __DATA.__objc_data _OBJC_METACLASS_$_CSLanguageDetectorAssetMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSLanguageDetectorOption
|| __DATA.__objc_data _OBJC_METACLASS_$_CSListeningEnabledPolicyWatch
|| __DATA.__objc_data _OBJC_METACLASS_$_CSMSNExceptionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSMacWakeSleepMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSMicUsageReporter
|| __DATA.__objc_data _OBJC_METACLASS_$_CSMyriadNotifier
|| __DATA.__objc_data _OBJC_METACLASS_$_CSMyriadPHash
|| __DATA.__objc_data _OBJC_METACLASS_$_CSMyriadPHashFactors
|| __DATA.__objc_data _OBJC_METACLASS_$_CSMyriadSelfTriggerCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_CSNNVADEndpointAnalyzer
|| __DATA.__objc_data _OBJC_METACLASS_$_CSOpportuneSpeakBehaviorMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSOpportuneSpeakEventMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSOpportuneSpeakListener
|| __DATA.__objc_data _OBJC_METACLASS_$_CSOpportuneSpeakListenerDeviceManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSOpportuneSpeakListenerOption
|| __DATA.__objc_data _OBJC_METACLASS_$_CSOpportuneSpeakListnerTestService
|| __DATA.__objc_data _OBJC_METACLASS_$_CSOtherAppRecordingStateMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSPhoneCallStateMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSPhraseSpotterEnabledMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSPostBuildInstallService
|| __DATA.__objc_data _OBJC_METACLASS_$_CSPowerAssertionMac
|| __DATA.__objc_data _OBJC_METACLASS_$_CSPreMyriadCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_CSPreMyriadVoiceTriggerMetaData
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRawAudioInjectionProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRemoraSecondPassAudioStreamHoldingContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRemoraSecondPassRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRemoteControlClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRemoteDarwinDeviceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRemoteDeviceProtocolInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRemoteRecordClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSRemoteVADCircularBuffer
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSPGEndpointAnalyzer
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSRFUserSettingMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSSRXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSScreenLockMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSelfTriggerDetector
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSelfTriggerDetectorEnabledPolicyDarwin
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSelfTriggerDetectorEnabledPolicyFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSelfTriggerDetectorEnabledPolicyGibraltar
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSelfTriggerDetectorEnabledPolicyIOS
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSelfTriggerDetectorEnabledPolicyMac
|| __DATA.__objc_data _OBJC_METACLASS_$_CSShadowMicScoreCreator
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriAcousticFingerprinter
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriAssertionMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriAudioPlaybackSessionImplAVAudioPlayerBased
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriAudioPlaybackSessionImplAVPlayerBased
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriAudioRoute
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriAudioSession
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriBluetoothManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriDebugConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriEnabledMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriFanInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriFanInfoManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriLauncher
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriMobileBluetoothDeviceDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriMobileBluetoothDeviceProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriPreferences
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriQueueMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSiriRestrictionOnLockScreenMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSmartSiriVolume
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSmartSiriVolumeClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSmartSiriVolumeController
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSmartSiriVolumeEnablePolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSmartSiriVolumeEstimate
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSmartSiriVolumeManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSmartSiriVolumeUserIntent
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSoftwareUpdateCheckingMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSpeakerRecognitionProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSpeechDetectionDevicePresentMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSpeechManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSpringboardStartMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSStartOfSpeechDetector
|| __DATA.__objc_data _OBJC_METACLASS_$_CSStateMachine
|| __DATA.__objc_data _OBJC_METACLASS_$_CSSyncKeywordAnalyzerQuasar
|| __DATA.__objc_data _OBJC_METACLASS_$_CSUserIdentityClassifier
|| __DATA.__objc_data _OBJC_METACLASS_$_CSUserSessionActiveMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVTSecondPassPhraseScore
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVTSecondPassScorer
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceIdXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceIdXPCConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceProfileContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceProfileRetrainManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAOPModeEnabledPolicyFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAOPModeEnabledPolicyIOS
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAlwaysOnProcessor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAssetChangeMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAssetHandlerDarwin
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAwareZeroFilter
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerDataCollector
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEnabledMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEnabledPolicyAOP
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEnabledPolicyDarwin
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEnabledPolicyHorseman
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEnabledPolicyMac
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEnabledPolicyNonAOP
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEventInfoProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerEventsCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerFidesClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerFileLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerFirstPassHearst
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerFirstPassHearstAP
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerFirstPassJarvis
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerFirstPassRemora
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerRTModel
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerSecondPass
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerStatAggregator
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerStatistics
|| __DATA.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerXPCServiceProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_CoreSpeechXPC
|| __DATA.__objc_data _OBJC_METACLASS_$_CoreSpeechXPCFakeModelMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_NviAudioFileWriter
|| __DATA.__objc_data _OBJC_METACLASS_$_NviCSAudioDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_NviConstants
|| __DATA.__objc_data _OBJC_METACLASS_$_NviContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NviDataLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_NviDirectionalitySignalData
|| __DATA.__objc_data _OBJC_METACLASS_$_NviDirectionalitySignalProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NviSignalData
|| __DATA.__objc_data _OBJC_METACLASS_$_NviSignalProvidersController
|| __DATA.__objc_data _OBJC_METACLASS_$_NviUtils
|| __DATA.__objc_data _OBJC_METACLASS_$_RMSSample
|| __DATA.__objc_data _OBJC_METACLASS_$__CSSiriQueueObserver
|| __DATA_CONST.__const _CSAttSiriRequestSourceKey
|| __DATA_CONST.__const _CSErrorDomain
|| __DATA_CONST.__const _CSP2P_ADCoreSpeechRequestHandler
|| __DATA_CONST.__const _CSP2P_ADRequestHandlerType_Key
|| __DATA_CONST.__const _CSP2P_AcousticSLMetaContext_Key
|| __DATA_CONST.__const _CSP2P_CommandDict_Key
|| __DATA_CONST.__const _CSP2P_CommandType_Key
|| __DATA_CONST.__const _CSP2P_GradingBatchTransferID_Key
|| __DATA_CONST.__const _CSP2P_GradingDataTransferStatus_Key
|| __DATA_CONST.__const _CSP2P_IsDataCompressed_Key
|| __DATA_CONST.__const _CSP2P_MultiUserMetaContext_Key
|| __DATA_CONST.__const _CSP2P_ParallelRecordingCmd
|| __DATA_CONST.__const _CSP2P_PeerIdentifier_Key
|| __DATA_CONST.__const _CSP2P_RemoteHeySiriCmd
|| __DATA_CONST.__const _CSP2P_RemoteHeySiriEnable_Key
|| __DATA_CONST.__const _CSP2P_RemoteHeySiriStatus_Key
|| __DATA_CONST.__const _CSP2P_RemoteRecordingStart_Key
|| __DATA_CONST.__const _CSP2P_RemoteRecordingStatus_Key
|| __DATA_CONST.__const _CSP2P_SiriDebugUIRequestId
|| __DATA_CONST.__const _CSP2P_SmartSiriVolumeMetaContext_Key
|| __DATA_CONST.__const _CSP2P_SpeakerRecognitionMetaContext_Key
|| __DATA_CONST.__const _CSP2P_UncompressedDataSize_Key
|| __DATA_CONST.__const _CSP2P_VoiceDataToBeGraded_Key
|| __DATA_CONST.__const _CSP2P_VoiceFileNameToBeGraded_Key
|| __DATA_CONST.__const _CSP2P_VoiceGradingDataFetchCmd
|| __DATA_CONST.__const _CSP2P_VoiceGradingDataTransferCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileAppDomain_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileDataType_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileData_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileDeleteCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileFetchCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileFileName_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileHomeUserId_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileListQueryCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileLocale_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileOnboardTimeStamp_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileParallelRecordingTransferCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileParallelRecordingsFetchCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfilePeerName_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileProfileId_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileRecordedData_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileRelativeFilePath_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileRemoteFileName_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileRemoteRecordingDir
|| __DATA_CONST.__const _CSP2P_VoiceProfileReverseTransferCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileSegment_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileSiriProfileId_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileSpeakerName_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileStatus_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileTotalSegments_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileTransferCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileTransferCompleted_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileUpdateTriggerCmd
|| __DATA_CONST.__const _CSP2P_VoiceProfileiTunesPassword_Key
|| __DATA_CONST.__const _CSP2P_VoiceProfileiTunesUserID_Key
|| __DATA_CONST.__const _CSP2P_VoiceTriggerEventInfo_Key
|| __DATA_CONST.__const _CSSSmartSiriVolumeOverrideMediaVolumeKey
|| __DATA_CONST.__const _CSSiriAudioFileWriterErrorDomain
|| __DATA_CONST.__const _CSSiriAudioFileWriterExtAudioFileErrorDomain
|| __DATA_CONST.__const _CSSiriAudioSessionPortBluetoothA2DP
|| __DATA_CONST.__const _CSSiriAudioSessionPortBluetoothHFP
|| __DATA_CONST.__const _CSSiriAudioSessionPortBluetoothLE
|| __DATA_CONST.__const _CSSiriAudioSessionPortBuiltInMic
|| __DATA_CONST.__const _CSSiriAudioSessionPortBuiltInSpeaker
|| __DATA_CONST.__const _CSSiriAudioSessionPortHDMI
|| __DATA_CONST.__const _CSSiriAudioSessionPortHeadphones
|| __DATA_CONST.__const _CSSiriAudioSessionPortHeadsetMic
|| __DATA_CONST.__const _CSSiriAudioSessionPortLineIn
|| __DATA_CONST.__const _CSSiriAudioSessionPortOther
|| __DATA_CONST.__const _CSSiriAudioSessionPortUSBAudio
|| __DATA_CONST.__const _CSSiriDebug_RemoteNearMissGradingTrigger
|| __DATA_CONST.__const _CSSiriDebug_SpeakerGradingTrigger
|| __DATA_CONST.__const _CSSiriDebug_VoiceProfileAddedTrigger
|| __DATA_CONST.__const _CSSiriDebug_VoiceProfileSyncTrigger
|| __DATA_CONST.__const _CSSiriGlobalKeychainAccountIdentifier
|| __DATA_CONST.__const _CSSpeechRecordSettingsKey
|| __DATA_CONST.__const _NviErrorDomain
|| __DATA_CONST.__const _defaultButtonKey
|| __DATA_CONST.__const _defaultDistanceModelPathHorseman
|| __DATA_CONST.__const _defaultDistanceModelPathHorsemanJunior
|| __DATA_CONST.__const _defaultUserFarLabel
|| __DATA_CONST.__const _defaultUserMidLabel
|| __DATA_CONST.__const _defaultUserNearLabel
|| __DATA_CONST.__const _kAFPreferencesDidChangeDarwinNotification
|| __DATA_CONST.__const _kAFSiriInternalUserClassification
|| __DATA_CONST.__const _kAssistantPreferencesDomain
|| __DATA_CONST.__const _kAttendingTriggerEventInfo_DetectedToken
|| __DATA_CONST.__const _kAttendingTriggerEventInfo_RequestContext
|| __DATA_CONST.__const _kAttendingTriggerEventInfo_TriggerAbsStartSampleId
|| __DATA_CONST.__const _kAttendingTriggerEventInfo_TriggerMachTime
|| __DATA_CONST.__const _kCSAssetFootprintKey
|| __DATA_CONST.__const _kCSAssetLanguageKey
|| __DATA_CONST.__const _kCSAssetPremiumKey
|| __DATA_CONST.__const _kCSEnrollmentVersionFileName
|| __DATA_CONST.__const _kCSFirstPassEndSampleCount
|| __DATA_CONST.__const _kCSFirstPassGoodness
|| __DATA_CONST.__const _kCSFirstPassSampleCountFromHistoricalBuffer
|| __DATA_CONST.__const _kCSFirstPassStartSampleCount
|| __DATA_CONST.__const _kCSFirstPassTriggerEndTime
|| __DATA_CONST.__const _kCSMediaPlayStateKey
|| __DATA_CONST.__const _kCSMetaVersionFileName
|| __DATA_CONST.__const _kCSMusicVolumeKey
|| __DATA_CONST.__const _kCSPhraseSpotterEnabledDidChangeDarwinNotification
|| __DATA_CONST.__const _kCSSSVEstimatedTTSVolumeKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationAssetVersionKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationAudioProcessedDurationKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationKnownUserScoresKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationNonVTInvocationScoreThresholdingType
|| __DATA_CONST.__const _kCSSpeakerIdentificationNviDirectionalityArrKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationProfileVersionsKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationRawScoresKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationRecordPayloadAllowedKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationRecordUserAudioKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationScoreThresholdKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationScoreThresholdingTypeKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationScoresVersion
|| __DATA_CONST.__const _kCSSpeakerIdentificationUnknownUserScoreKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationUserClassifiedKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationUserIdentityClassificationKey
|| __DATA_CONST.__const _kCSSpeakerIdentificationVTInvocationScoreThresholdingType
|| __DATA_CONST.__const _kCSTotalSampleCount
|| __DATA_CONST.__const _kCSTriggerScore
|| __DATA_CONST.__const _kCSVoiceTriggerFirstPassTriggersPerDay
|| __DATA_CONST.__const _kCSVoiceTriggerNumExplicitUtt
|| __DATA_CONST.__const _kCSVoiceTriggerNumImplicitUtt
|| __DATA_CONST.__const _kRemoteRecordGibraltarDeviceId
|| __DATA_CONST.__const _kSSVCAAssetFilename
|| __DATA_CONST.__const _kSSVCAButtonKey
|| __DATA_CONST.__const _kSSVCADistanceModelPathHorseman
|| __DATA_CONST.__const _kSSVCADistanceModelPathHorsemanJunior
|| __DATA_CONST.__const _kSSVCAUserFarLabel
|| __DATA_CONST.__const _kSSVCAUserMidLabel
|| __DATA_CONST.__const _kSSVCAUserNearLabel
|| __DATA_CONST.__const _kSSVDebugLogPathKey
|| __DATA_CONST.__const _msnExceptionAnnounceMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSActivationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSActivationEventNotifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSActivationXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAdBlockerAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAlarmMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAssetController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAssetControllerFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAssetDownloadingOption
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAssetManagerEnablePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAssetManagerEnablePolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioConverter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioDeviceInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioRecordDeviceInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioSessionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioStartStreamOption
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioStream
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioStreamRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSAudioZeroCounter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSContinuousVoiceTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSCoreSpeechDaemonStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointDelayReporter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointLatencyInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointLoggingHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointerAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointerFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointerMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointerProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEndpointerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSEventMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSFirstUnlockMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSHybridEndpointAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSHybridEndpointer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSKeywordAnalyzerNDAPI
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSKeywordAnalyzerNDAPIResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSLanguageCodeUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSLanguageCodeUpdateMonitorImpl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSMediaPlayingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSNetworkAvailabilityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSNovDetector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSNovDetectorResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSP2PService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSPreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSACInfoMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSServerEndpointFeatures
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriAudioActivationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriAudioFileWriter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriAudioPlaybackService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriClientBehaviorMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriRecordingInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriSpeechRecorder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriSpeechRecordingContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSiriVibrationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSpeakerRecognitionAssetDownloadMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSpeakerRecognitionAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSpeechController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSpeechEndHostTimeEstimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSSpeechEndpointAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSStopRecordingOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSTimerMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSTrialAssetDownloadMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSTrialAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAssetDownloadMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAssetHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAssetHandlerMac
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVoiceTriggerAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVoiceTriggerHeartBeatMetricsProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVoiceTriggerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVoiceTriggerXPCService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSVolumeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CSXPCClientFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SpeechModelTrainingClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSActivationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSActivationEventNotifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSActivationXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAdBlockerAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAlarmMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAssetController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAssetControllerFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAssetDownloadingOption
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAssetManagerEnablePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAssetManagerEnablePolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioConverter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioDeviceInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioRecordDeviceInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioSessionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioStartStreamOption
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioStream
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioStreamRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSAudioZeroCounter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSContinuousVoiceTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSCoreSpeechDaemonStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointDelayReporter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointLatencyInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointLoggingHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointerAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointerFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointerMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointerProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEndpointerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSEventMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSFirstUnlockMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSHybridEndpointAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSHybridEndpointer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSKeywordAnalyzerNDAPI
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSKeywordAnalyzerNDAPIResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSLanguageCodeUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSLanguageCodeUpdateMonitorImpl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSMediaPlayingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSNetworkAvailabilityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSNovDetector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSNovDetectorResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSP2PService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSPreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSACInfoMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSServerEndpointFeatures
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriAudioActivationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriAudioFileWriter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriAudioPlaybackService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriClientBehaviorMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriRecordingInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriSpeechRecorder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriSpeechRecordingContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSiriVibrationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSpeakerRecognitionAssetDownloadMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSpeakerRecognitionAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSpeechController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSpeechEndHostTimeEstimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSSpeechEndpointAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSStopRecordingOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSTimerMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSTrialAssetDownloadMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSTrialAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAssetDownloadMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAssetHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAssetHandlerMac
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerAssetMetaUpdateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerHeartBeatMetricsProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVoiceTriggerXPCService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSVolumeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CSXPCClientFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SpeechModelTrainingClient
|| __TEXT.__const _NOISE_WEIGHT_MAX
|| __TEXT.__const _NOISE_WEIGHT_MIN
|| __TEXT.__const _NviInputSamplingRate
|| __TEXT.__const _defaultAnnouncementStatusFetchTimeoutMs
|| __TEXT.__const _defaultDBToTTSMaximumOutput
|| __TEXT.__const _defaultDBToTTSMinimumOutput
|| __TEXT.__const _defaultDBToTTSPostTransitionDC
|| __TEXT.__const _defaultDBToTTSPostTransitionMultiplier
|| __TEXT.__const _defaultDBToTTSPostTransitionOffset
|| __TEXT.__const _defaultDBToTTSPreTransitionMultiplier
|| __TEXT.__const _defaultDBToTTSPreTransitionOffset
|| __TEXT.__const _defaultDBToTTSTransitionPoint
|| __TEXT.__const _defaultDecibelToLinearLogBase
|| __TEXT.__const _defaultDefaultMusicStrength
|| __TEXT.__const _defaultDefaultOutputTTSVolume
|| __TEXT.__const _defaultDefaultSpeechStrength
|| __TEXT.__const _defaultDefaultZeroFloatingPointValue
|| __TEXT.__const _defaultDeviceDefaultASVOffMinTTSVolume
|| __TEXT.__const _defaultDeviceDefaultMaxTTSVolume
|| __TEXT.__const _defaultDeviceDefaultMicSensitivityOffset
|| __TEXT.__const _defaultDeviceDefaultMinTTSVolume
|| __TEXT.__const _defaultDeviceSimpleASVOffMinTTSVolume
|| __TEXT.__const _defaultDeviceSimpleDBToSystemVolSlope
|| __TEXT.__const _defaultDeviceSimpleMaxTTSVolume
|| __TEXT.__const _defaultDeviceSimpleMaxTargetDB
|| __TEXT.__const _defaultDeviceSimpleMicSensitivityOffset
|| __TEXT.__const _defaultDeviceSimpleMinTTSVolume
|| __TEXT.__const _defaultDeviceSimpleMinTargetDB
|| __TEXT.__const _defaultDeviceSimpleOutputMaxTargetDB
|| __TEXT.__const _defaultDeviceSimpleOutputMinTargetDB
|| __TEXT.__const _defaultDeviceSimpleOutputSlope
|| __TEXT.__const _defaultDeviceSimplePreTriggerSilenceSampleCount
|| __TEXT.__const _defaultDistanceChannelBitset
|| __TEXT.__const _defaultDistanceChannelBitsetHorsemanJunior
|| __TEXT.__const _defaultDistanceChannelBitsetTorpedo
|| __TEXT.__const _defaultDistanceInputBufferDurationSeconds
|| __TEXT.__const _defaultDistanceModelConfidenceThreshold
|| __TEXT.__const _defaultDistanceResultSampleCountTolerance
|| __TEXT.__const _defaultDistanceResultsBufferSize
|| __TEXT.__const _defaultDspCoefsCount
|| __TEXT.__const _defaultDspNumStages
|| __TEXT.__const _defaultEnergyBufferSize
|| __TEXT.__const _defaultExponentialDistanceHistoryDegradationFactor
|| __TEXT.__const _defaultHistoricalVolumeBufferSize
|| __TEXT.__const _defaultLKFSChannelBitset
|| __TEXT.__const _defaultLKFSChannelBitsetHorsemanJunior
|| __TEXT.__const _defaultLKFSChannelBitsetTorpedo
|| __TEXT.__const _defaultLKFSLowerPercentile
|| __TEXT.__const _defaultLKFSMicSensitivityOffset
|| __TEXT.__const _defaultLKFSTTSMappingInputRangeHigh
|| __TEXT.__const _defaultLKFSTTSMappingInputRangeLow
|| __TEXT.__const _defaultLKFSTTSMappingOutputRangeHigh
|| __TEXT.__const _defaultLKFSTTSMappingOutputRangeLow
|| __TEXT.__const _defaultLKFSTimeConstant
|| __TEXT.__const _defaultLKFSUpperPercentile
|| __TEXT.__const _defaultLinearToDecibelConstantMultiplier
|| __TEXT.__const _defaultListenPollingIntervalAtStartInSeconds
|| __TEXT.__const _defaultMaxFrameSize
|| __TEXT.__const _defaultMaxTTSSystemVolume
|| __TEXT.__const _defaultMaximumCompensatedSpeechLevelNearField
|| __TEXT.__const _defaultMaximumLinearSoundLevel
|| __TEXT.__const _defaultMinTTSSystemVolume
|| __TEXT.__const _defaultMinimumDistanceUpdateWaitPeriodSeconds
|| __TEXT.__const _defaultMinimumLinearSoundLevel
|| __TEXT.__const _defaultMusicHistoricalSamplesInSeconds
|| __TEXT.__const _defaultMusicResultsBufferSize
|| __TEXT.__const _defaultNoiseActivityCountThreshold
|| __TEXT.__const _defaultNoiseActivityHistoricalSampleCount
|| __TEXT.__const _defaultNoiseActivityThreshold
|| __TEXT.__const _defaultNoiseLevelChannelBitset
|| __TEXT.__const _defaultNoiseLevelChannelBitsetHorsemanJunior
|| __TEXT.__const _defaultNoiseLevelChannelBitsetTorpedo
|| __TEXT.__const _defaultNoiseLowerPercentile
|| __TEXT.__const _defaultNoiseMicSensitivityOffset
|| __TEXT.__const _defaultNoiseMicSensitivityOffsetDeviceSimple
|| __TEXT.__const _defaultNoiseResultsBufferSize
|| __TEXT.__const _defaultNoiseTTSMappingInputRangeHigh
|| __TEXT.__const _defaultNoiseTTSMappingInputRangeLow
|| __TEXT.__const _defaultNoiseTTSMappingOutputRangeHigh
|| __TEXT.__const _defaultNoiseTTSMappingOutputRangeLow
|| __TEXT.__const _defaultNoiseTimeConstant
|| __TEXT.__const _defaultNoiseUpperPercentile
|| __TEXT.__const _defaultNoiseWeight
|| __TEXT.__const _defaultSignalToSigmoidMusicDilationFactorDeviceDefault
|| __TEXT.__const _defaultSignalToSigmoidMusicDilationFactorDeviceSimple
|| __TEXT.__const _defaultSignalToSigmoidMusicHOffsetDeviceDefault
|| __TEXT.__const _defaultSignalToSigmoidMusicHOffsetDeviceSimple
|| __TEXT.__const _defaultSignalToSigmoidMusicSteepnessDeviceDefault
|| __TEXT.__const _defaultSignalToSigmoidMusicSteepnessDeviceSimple
|| __TEXT.__const _defaultSignalToSigmoidMusicVOffsetDeviceDefault
|| __TEXT.__const _defaultSignalToSigmoidMusicVOffsetDeviceSimple
|| __TEXT.__const _defaultSignalToSigmoidMusicVSpreadDeviceDefault
|| __TEXT.__const _defaultSignalToSigmoidMusicVSpreadDeviceSimple
|| __TEXT.__const _defaultSignalToSigmoidNoiseDilationFactor
|| __TEXT.__const _defaultSignalToSigmoidNoiseHOffset
|| __TEXT.__const _defaultSignalToSigmoidNoiseSteepness
|| __TEXT.__const _defaultSignalToSigmoidNoiseVOffset
|| __TEXT.__const _defaultSignalToSigmoidNoiseVSpread
|| __TEXT.__const _defaultSignalToSigmoidSpeechDilationFactor
|| __TEXT.__const _defaultSignalToSigmoidSpeechHOffset
|| __TEXT.__const _defaultSignalToSigmoidSpeechSteepness
|| __TEXT.__const _defaultSignalToSigmoidSpeechVOffset
|| __TEXT.__const _defaultSignalToSigmoidSpeechVSpread
|| __TEXT.__const _defaultSmartSiriVolumeSyncedMetricLogsToRetain
|| __TEXT.__const _defaultSmartSiriVolumeUnsyncedMetricLogsToRetain
|| __TEXT.__const _defaultSpeakerDistanceFarBoostFactor
|| __TEXT.__const _defaultSpeakerDistanceMidBoostFactor
|| __TEXT.__const _defaultSpeakerDistanceNearBoostFactor
|| __TEXT.__const _defaultTTSVolumeLowerLimitDB
|| __TEXT.__const _defaultTTSVolumeUpperLimitDB
|| __TEXT.__const _defaultUserIntentPermanentOffsetFactorDelta
|| __TEXT.__const _defaultUserIntentPermanentOffsetFactorLowerBound
|| __TEXT.__const _defaultUserIntentPermanentOffsetFactorUpperBound
|| __TEXT.__const _defaultUserIntentValidForSeconds
|| __TEXT.__const _defaultUserIntentVolumeDecreaseFactor
|| __TEXT.__const _defaultUserIntentVolumeIncreaseFactor
|| __TEXT.__const _defaultUserOffsetInputRangeHigh
|| __TEXT.__const _defaultUserOffsetInputRangeLow
|| __TEXT.__const _defaultUserOffsetOutputRangeHigh
|| __TEXT.__const _defaultUserOffsetOutputRangeLow
|| __TEXT.__const _defaultVoiceTriggerBasedTTSValidForSeconds
|| __TEXT.__const _defaultVoiceTriggerInitialSilenceDurationSeconds
|| __TEXT.__const _defaultVolumeHalfLifeSeconds
|| __TEXT.__const _kCSAssetValueLanguageAny
|| __TEXT.__const _kSSRMaxEnrollmentUtterancesDefault
|| __TEXT.__const _numSamplesFromFirstPassToVoiceTrigger
|| __TEXT.__text _AudioInjectionXPCGetInterface
|| __TEXT.__text _BenchmarkXPCGetInterface
|| __TEXT.__text _CSAnalyticsContextCreateWithRecordingInfo
|| __TEXT.__text _CSCopyKeychainBaseQueryDictionary
|| __TEXT.__text _CSFidesBorealisTriggerTypeAsString
|| __TEXT.__text _CSIsCarryDevice
|| __TEXT.__text _CSKeychainValueForAccountAndKey
|| __TEXT.__text _CSSiriAudioServiceGetWorkloop
|| __TEXT.__text _CSSiriRefreshDeviceExperimentGroup
|| __TEXT.__text _CSSiriSpeechRecordingGetUsesAutomaticEndpointingFromEndpointerOperationMode
|| __TEXT.__text _CSSiriSpeechRecordingGetUsesAutomaticEndpointingFromRequestOptions
|| __TEXT.__text _CSSiriSpeechRecordingGetUsesServerEndpointingFromRequestOptions
|| __TEXT.__text _CSSiriSpeechRecordingGetUsesShouldStopRecordingFromEndpointerStopRecordingMode
|| __TEXT.__text _CSSiriSpeechRecordingModeIsAcousticFingerprinting
|| __TEXT.__text _CSSiriSpeechRecordingModeIsDictation
|| __TEXT.__text _CSSiriSpeechRecordingModeIsOfflineOnly
|| __TEXT.__text _CSSiriSpeechRecordingModeIsSiri
|| __TEXT.__text _CSSiriSpeechRecordingRecordedAudioDirectoryPath
|| __TEXT.__text _CSSiriSpeechRecordingTrimmedAudioDirectoryPath
|| __TEXT.__text _CSSiriUserSupportBaseURL
|| __TEXT.__text _CoreSpeechServiceListenerInterface
|| __TEXT.__text _CoreSpeechXPCGetInterface
|| __TEXT.__text _GetNviPreferencesBoolValForKey
|| __TEXT.__text _GetVTPreferencesBoolValForKey
|| __TEXT.__text _InitNviLogging
|| __TEXT.__text _MockRemotePluginXPCGetInterface
|| __TEXT.__text _NviIsHorseman
|| __TEXT.__text _NviIsInternalBuild
|| __TEXT.__text _NviPreferencesKeyList
|| __TEXT.__text _NviPreferencesValueForKey
|| __TEXT.__text _SpeechModelTrainingGetInterface
|| __TEXT.__text __ZN15SmartSiriVolume10initializeEjjjjffjjf14CSSSVSoundType
|| __TEXT.__text __ZN15SmartSiriVolume14feedFloatAudioEPKfj
|| __TEXT.__text __ZN15SmartSiriVolume18estimateSoundLevelEv
|| __TEXT.__text __ZN15SmartSiriVolume19prepareEnergyBufferEf
|| __TEXT.__text __ZN15SmartSiriVolume23computeTimeDomainEnergyEf
|| __TEXT.__text __ZN15SmartSiriVolume25removeVoiceTriggerSamplesEyy
|| __TEXT.__text __ZN15SmartSiriVolume5resetEv
|| __TEXT.__text __ZN15SmartSiriVolumeC1Ev
|| __TEXT.__text __ZN15SmartSiriVolumeC2Ev
|| __TEXT.__text __ZN15SmartSiriVolumeD1Ev
|| __TEXT.__text __ZN15SmartSiriVolumeD2Ev
|| __TEXT.__text __ZN22NonlinearBeepCanceller7nl_initEjfffffffffjjjjjjj
|| __TEXT.__text __ZN22NonlinearBeepCanceller7nl_procEPK15AudioBufferListS2_PS0_S3_S3_S3_
|| __TEXT.__text __ZN22NonlinearBeepCancellerC1Ev
|| __TEXT.__text __ZN22NonlinearBeepCancellerC2Ev
|| __TEXT.__text _countZeroCrossings
|| __TEXT.__text _createFloatArray
|| __TEXT.__text _fftEnergies
|| __TEXT.__text _sumsegment
|| __TEXT.__text _vecsqrt
__ AVFAudio: _AVAudioSessionInterruptionNotification
__ AVFAudio: _AVAudioSessionInterruptionOptionKey
__ AVFAudio: _AVAudioSessionInterruptionTypeKey
__ AVFAudio: _AVAudioSessionInterruptorNameKey
__ AVFAudio: _AVAudioSessionMediaServicesWereResetNotification
__ AVFAudio: _AVAudioSessionPortBluetoothA2DP
__ AVFAudio: _AVAudioSessionPortBluetoothHFP
__ AVFAudio: _AVAudioSessionPortBluetoothLE
__ AVFAudio: _AVAudioSessionPortBuiltInMic
__ AVFAudio: _AVAudioSessionPortBuiltInReceiver
__ AVFAudio: _AVAudioSessionPortBuiltInSpeaker
__ AVFAudio: _AVAudioSessionPortCarAudio
__ AVFAudio: _AVAudioSessionPortDisplayPort
__ AVFAudio: _AVAudioSessionPortHDMI
__ AVFAudio: _AVAudioSessionPortHeadphones
__ AVFAudio: _AVAudioSessionPortHeadsetMic
__ AVFAudio: _AVAudioSessionPortLineIn
__ AVFAudio: _AVAudioSessionPortUSBAudio
__ AVFAudio: _AVAudioSessionRouteChangeNotification
__ AVFAudio: _AVEncoderBitRateKey
__ AVFAudio: _AVFormatIDKey
__ AVFAudio: _AVLinearPCMBitDepthKey
__ AVFAudio: _AVLinearPCMIsFloatKey
__ AVFAudio: _AVLinearPCMIsNonInterleaved
__ AVFAudio: _AVNumberOfChannelsKey
__ AVFAudio: _AVSampleRateConverterAlgorithmKey
__ AVFAudio: _AVSampleRateConverterAlgorithm_Mastering
__ AVFAudio: _AVSampleRateKey
__ AVFAudio: _AVVoiceActivationDeviceIDKey
__ AVFAudio: _AVVoiceActivationModeKey
__ AVFAudio: _AVVoiceControllerAlertBehavior
__ AVFAudio: _AVVoiceControllerBluetoothDoAPRoute
__ AVFAudio: _AVVoiceControllerMetricAudioSessionSetActiveTime
__ AVFAudio: _AVVoiceControllerMetricAudioSessionSetInactiveTime
__ AVFAudio: _AVVoiceControllerMetricDataBeginHostTime
__ AVFAudio: _AVVoiceControllerMetricDataEndHostTime
__ AVFAudio: _AVVoiceControllerRemoteInputJarvisRoute
__ AVFAudio: _AVVoiceControllerStartTimeKey
__ AVFAudio: _OBJC_CLASS_$_AVAudioChannelLayout
__ AVFAudio: _OBJC_CLASS_$_AVAudioFormat
__ AVFAudio: _OBJC_CLASS_$_AVAudioPCMBuffer
__ AVFAudio: _OBJC_CLASS_$_AVAudioPlayer
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFAudio: _OBJC_CLASS_$_AVAudioTime
__ AVFAudio: _OBJC_CLASS_$_AVVCAudioBuffer
__ AVFAudio: _OBJC_CLASS_$_AVVCConfigureAlertBehaviorSettings
__ AVFAudio: _OBJC_CLASS_$_AVVCContextSettings
__ AVFAudio: _OBJC_CLASS_$_AVVCDuckOverride
__ AVFAudio: _OBJC_CLASS_$_AVVCDuckSettings
__ AVFAudio: _OBJC_CLASS_$_AVVCPrepareRecordSettings
__ AVFAudio: _OBJC_CLASS_$_AVVCSessionFactory
__ AVFAudio: _OBJC_CLASS_$_AVVCStartRecordSettings
__ AVFAudio: _OBJC_CLASS_$_AVVoiceController
__ AVFAudio: _OBJC_CLASS_$_AVVoiceTriggerClient
__ AVFoundation: _AVFileTypeWAVE
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeErrorKey
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeNotification
__ AVFoundation: _OBJC_CLASS_$_AVAsset
__ AVFoundation: _OBJC_CLASS_$_AVExternalDevice
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ Accelerate: _vDSP_DFT_Execute
__ Accelerate: _vDSP_DFT_zrop_CreateSetup
__ Accelerate: _vDSP_biquadm
__ Accelerate: _vDSP_biquadm_CreateSetup
__ Accelerate: _vDSP_biquadm_DestroySetup
__ Accelerate: _vDSP_biquadm_ResetState
__ Accelerate: _vDSP_create_fftsetup
__ Accelerate: _vDSP_ctoz
__ Accelerate: _vDSP_destroy_fftsetup
__ Accelerate: _vDSP_fft_zip
__ Accelerate: _vDSP_hamm_window
__ Accelerate: _vDSP_meanv
__ Accelerate: _vDSP_rmsqv
__ Accelerate: _vDSP_svdiv
__ Accelerate: _vDSP_sve
__ Accelerate: _vDSP_svesq
__ Accelerate: _vDSP_vabs
__ Accelerate: _vDSP_vadd
__ Accelerate: _vDSP_vclip
__ Accelerate: _vDSP_vclr
__ Accelerate: _vDSP_vdiv
__ Accelerate: _vDSP_vflt16
__ Accelerate: _vDSP_vma
__ Accelerate: _vDSP_vmma
__ Accelerate: _vDSP_vmul
__ Accelerate: _vDSP_vsadd
__ Accelerate: _vDSP_vsma
__ Accelerate: _vDSP_vsmul
__ Accelerate: _vDSP_vsub
__ Accelerate: _vDSP_ztoc
__ Accelerate: _vDSP_zvcma
__ Accelerate: _vDSP_zvma
__ Accelerate: _vDSP_zvmags
__ Accelerate: _vDSP_zvmul
__ Accelerate: _vvsqrtf
__ AppSupport: _CPSharedResourcesDirectory
__ AssistantServices: _AFAddInterruptingAudioSessionInfoToAnalyticsContext
__ AssistantServices: _AFAudioPlaybackOptionsGetNames
__ AssistantServices: _AFAudioSessionAssertionGetCurrentAcquisitionService
__ AssistantServices: _AFBluetoothWirelessSplitterSessionStateGetName
__ AssistantServices: _AFDeviceRingerSwitchStateGetName
__ AssistantServices: _AFDeviceSupportsEchoCancellation
__ AssistantServices: _AFDeviceSupportsSiriUOD
__ AssistantServices: _AFDeviceSupportsZLL
__ AssistantServices: _AFHasHapticEngine
__ AssistantServices: _AFIsATV
__ AssistantServices: _AFIsHorseman
__ AssistantServices: _AFIsInternalInstall
__ AssistantServices: _AFIsMac
__ AssistantServices: _AFIsNano
__ AssistantServices: _AFKeyValueObservingCreate
__ AssistantServices: _AFLanguageCodeDidChangeDarwinNotification
__ AssistantServices: _AFMachAbsoluteTimeAddTimeInterval
__ AssistantServices: _AFMachAbsoluteTimeGetTimeInterval
__ AssistantServices: _AFOfflineDictationCapable
__ AssistantServices: _AFPlaybackRouteIsHandsFree
__ AssistantServices: _AFPreferencesAssistantEnabled
__ AssistantServices: _AFPreferencesMobileUserSessionLanguage
__ AssistantServices: _AFPreferencesStartAlertEnabled
__ AssistantServices: _AFSiriActivationContinuousVoiceTriggerDetected
__ AssistantServices: _AFSiriActivationHoneycombDeviceVoiceTrigger
__ AssistantServices: _AFSiriActivationServiceGetPort
__ AssistantServices: _AFSiriActivationUserInfoKey
__ AssistantServices: _AFSiriActivationVoiceKeywordDetected
__ AssistantServices: _AFSiriActivationVoiceTriggerActivate
__ AssistantServices: _AFSiriActivationVoiceTriggerPrewarm
__ AssistantServices: _AFSiriLogContextConnection
__ AssistantServices: _AFSiriLogContextDaemon
__ AssistantServices: _AFSiriLogContextSpeech
__ AssistantServices: _AFSoundIDGetIsValidAndSpecified
__ AssistantServices: _AFSoundIDGetName
__ AssistantServices: _AFSpeechEndpointerOperationModeGetIsValid
__ AssistantServices: _AFSpeechEndpointerOperationModeGetName
__ AssistantServices: _AFSpeechEventGetDescription
__ AssistantServices: _AFSpeechEventIsHardwareTrigger
__ AssistantServices: _AFSpeechEventIsTVRemote
__ AssistantServices: _AFSpeechEventIsVoiceTrigger
__ AssistantServices: _AFSpeechLogsDirectory
__ AssistantServices: _AFSpeechRecordingEventListenerGetXPCInterface
__ AssistantServices: _AFSupportsAudioSessionCoordination
__ AssistantServices: _AFSupportsSpeechExtraction
__ AssistantServices: _AFSupportsVibration
__ AssistantServices: _AFSupportsWirelessSplitter
__ AssistantServices: _AFTurnIdentifierGetString
__ AssistantServices: _AFUserSupportDirectoryPath
__ AssistantServices: _OBJC_CLASS_$_AFAccessibilityObserver
__ AssistantServices: _OBJC_CLASS_$_AFAnalytics
__ AssistantServices: _OBJC_CLASS_$_AFAssertionContext
__ AssistantServices: _OBJC_CLASS_$_AFAudioPlaybackRequest
__ AssistantServices: _OBJC_CLASS_$_AFBluetoothDeviceInfo
__ AssistantServices: _OBJC_CLASS_$_AFBluetoothWirelessSplitterSessionStateObserver
__ AssistantServices: _OBJC_CLASS_$_AFBundleResourceManager
__ AssistantServices: _OBJC_CLASS_$_AFDeviceRingerSwitchObserver
__ AssistantServices: _OBJC_CLASS_$_AFError
__ AssistantServices: _OBJC_CLASS_$_AFFeatureFlags
__ AssistantServices: _OBJC_CLASS_$_AFHeartBeat
__ AssistantServices: _OBJC_CLASS_$_AFInstanceContext
__ AssistantServices: _OBJC_CLASS_$_AFKeyValueObservingDeliveryOptions
__ AssistantServices: _OBJC_CLASS_$_AFMemoryPressureObserver
__ AssistantServices: _OBJC_CLASS_$_AFMultiUserConnection
__ AssistantServices: _OBJC_CLASS_$_AFMyriadContext
__ AssistantServices: _OBJC_CLASS_$_AFMyriadGoodnessScoreOverrideState
__ AssistantServices: _OBJC_CLASS_$_AFMyriadMonitor
__ AssistantServices: _OBJC_CLASS_$_AFMyriadPerceptualAudioHash
__ AssistantServices: _OBJC_CLASS_$_AFNotifyObserver
__ AssistantServices: _OBJC_CLASS_$_AFOneArgumentSafetyBlock
__ AssistantServices: _OBJC_CLASS_$_AFPreferences
__ AssistantServices: _OBJC_CLASS_$_AFSafetyBlock
__ AssistantServices: _OBJC_CLASS_$_AFSiriActivationConnection
__ AssistantServices: _OBJC_CLASS_$_AFSiriDebugUIRequest
__ AssistantServices: _OBJC_CLASS_$_AFSiriTaskmaster
__ AssistantServices: _OBJC_CLASS_$_AFUIApplicationSiriTaskDeliverer
__ AssistantServices: _OBJC_CLASS_$_AFWatchdogTimer
__ AssistantServices: __AFBackedUpPreferencesValueForKey
__ AssistantServices: __AFPreferencesDictationLanguageDetectorEnabled
__ AssistantServices: __AFPreferencesForceSpeexAudioRecording
__ AssistantServices: __AFPreferencesForceUncompressedAudioRecording
__ AssistantServices: __AFPreferencesKeepRecorededAudioFiles
__ AssistantServices: __AFPreferencesValueForKey
__ AssistantServices: __AFPreferencesValueForKeyWithContext
__ AssistantServices: _afLanguageDetectionUserContextKeys
__ AssistantServices: _kAFAssistantErrorDomain
__ AudioToolbox: _AudioConverterConvertComplexBuffer
__ AudioToolbox: _AudioConverterDispose
__ AudioToolbox: _AudioConverterFillComplexBuffer
__ AudioToolbox: _AudioConverterGetProperty
__ AudioToolbox: _AudioConverterNew
__ AudioToolbox: _AudioConverterReset
__ AudioToolbox: _AudioConverterSetProperty
__ AudioToolbox: _AudioFileClose
__ AudioToolbox: _AudioFileOpenURL
__ AudioToolbox: _AudioFormatGetProperty
__ AudioToolbox: _AudioServicesPlaySystemSoundWithCompletion
__ AudioToolbox: _ExtAudioFileCreateWithURL
__ AudioToolbox: _ExtAudioFileDispose
__ AudioToolbox: _ExtAudioFileGetProperty
__ AudioToolbox: _ExtAudioFileOpenURL
__ AudioToolbox: _ExtAudioFileRead
__ AudioToolbox: _ExtAudioFileSeek
__ AudioToolbox: _ExtAudioFileSetProperty
__ AudioToolbox: _ExtAudioFileWrapAudioFileID
__ AudioToolbox: _ExtAudioFileWrite
__ CallKit: _OBJC_CLASS_$_CXCallObserver
__ Celestial: _AVSystemController_ActiveAudioRouteDidChangeNotification
__ Celestial: _AVSystemController_AudioCategoryNotificationParameter
__ Celestial: _AVSystemController_AudioVolumeNotificationParameter
__ Celestial: _AVSystemController_CallIsActive
__ Celestial: _AVSystemController_CallIsActiveDidChangeNotification
__ Celestial: _AVSystemController_CarPlayAuxStreamSupportAttribute
__ Celestial: _AVSystemController_CarPlayAuxStreamSupportDidChangeNotification
__ Celestial: _AVSystemController_CarPlayIsConnectedAttribute
__ Celestial: _AVSystemController_CarPlayIsConnectedDidChangeNotification
__ Celestial: _AVSystemController_FullMuteAttribute
__ Celestial: _AVSystemController_PickableRoutesAttribute
__ Celestial: _AVSystemController_PickedRouteAttribute
__ Celestial: _AVSystemController_PreferredExternalRouteDidChangeNotification
__ Celestial: _AVSystemController_RecordingClientPIDsAttribute
__ Celestial: _AVSystemController_RecordingStateDidChangeNotification
__ Celestial: _AVSystemController_RouteDescriptionKey_AVAudioRouteName
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_SupportsDoAP
__ Celestial: _AVSystemController_RouteDescriptionKey_IsPreferredExternalRoute
__ Celestial: _AVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectSupported
__ Celestial: _AVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_IsActive
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteSubtype
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _AVSystemController_SpeechDetectionDevicePresentAttribute
__ Celestial: _AVSystemController_SpeechDetectionDevicePresentDidChangeNotification
__ Celestial: _AVSystemController_SubscribeToNotificationsAttribute
__ Celestial: _AVSystemController_SystemVolumeDidChangeNotification
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreAudio: _AudioDeviceGetProperty
__ CoreAudio: _AudioObjectAddPropertyListenerBlock
__ CoreAudio: _AudioObjectGetPropertyData
__ CoreAudio: _AudioObjectGetPropertyDataSize
__ CoreAudio: _AudioObjectRemovePropertyListenerBlock
__ CoreEmbeddedSpeechRecognition: _OBJC_CLASS_$_CESRTrialAssetManager
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyKeyList
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSURLCreationDateKey
__ CoreFoundation: _NSURLIsDirectoryKey
__ CoreFoundation: _NSURLNameKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSOutputStream
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreMedia: _kCMTimeZero
__ CoreSpeechFoundation: _CSHasAOP
__ CoreSpeechFoundation: _CSIsASMacWithAOP
__ CoreSpeechFoundation: _CSIsBridgeOS
__ CoreSpeechFoundation: _CSIsCommunalDevice
__ CoreSpeechFoundation: _CSIsHorseman
__ CoreSpeechFoundation: _CSIsHorsemanJunior
__ CoreSpeechFoundation: _CSIsIOS
__ CoreSpeechFoundation: _CSIsIPad
__ CoreSpeechFoundation: _CSIsIPhone
__ CoreSpeechFoundation: _CSIsInternalBuild
__ CoreSpeechFoundation: _CSIsMac
__ CoreSpeechFoundation: _CSIsOSX
__ CoreSpeechFoundation: _CSIsTV
__ CoreSpeechFoundation: _CSIsTorpedo
__ CoreSpeechFoundation: _CSIsWatch
__ CoreSpeechFoundation: _CSLogContextFacilityCoreSpeech
__ CoreSpeechFoundation: _CSLogInitIfNeeded
__ CoreSpeechFoundation: _CSMachAbsoluteTimeAddTimeInterval
__ CoreSpeechFoundation: _CSMachAbsoluteTimeGetTimeInterval
__ CoreSpeechFoundation: _CSMachAbsoluteTimeSubtractTimeInterval
__ CoreSpeechFoundation: _CSMachAbsoluteTimeToMachContinuousTime
__ CoreSpeechFoundation: _CSSupportsVibrator
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSADPPreventStandbyAssertion
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAsset
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioChunk
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioChunkForTV
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioCircularBuffer
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioDecoder
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioFileManager
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioPlayingAppMonitor
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioPowerMeter
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioRecordContext
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioTimeConverter
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioTimeConverterPool
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSAudioZeroFilter
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSBeepCanceller
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSConfig
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSDarwinVoiceTriggerEventInfoProvider
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSDiagnosticReporter
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSDispatchGroup
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSFAudioMetricsSelfLogger
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSFAudioStreamBasicDescriptionFactory
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSFLPCMTypeConverter
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSFPreferences
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSFTimeUtils
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSFVoiceTriggerEventInfoSelfLogger
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSOSTransaction
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSPlainAudioFileWriter
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSPolicy
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSPowerLogger
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSRemoteAssetManager
__ CoreSpeechFoundation: _OBJC_CLASS_$_CSUtils
__ CoreSpeechFoundation: _OBJC_METACLASS_$_CSPolicy
__ CoreSpeechFoundation: _SSRLogContextFacilityCoreSpeech
__ CoreSpeechFoundation: _kCSAudioSyncedFileSuffix
__ CoreSpeechFoundation: _kCSDiagnosticReporterAudioCodecError
__ CoreSpeechFoundation: _kCSDiagnosticReporterAudioDeliveryWatchDogFire
__ CoreSpeechFoundation: _kCSDiagnosticReporterAudioDidStartWatchDogFire
__ CoreSpeechFoundation: _kCSDiagnosticReporterAudioDidStopWatchDogFire
__ CoreSpeechFoundation: _kCSDiagnosticReporterAudioInsufficientPriority
__ CoreSpeechFoundation: _kCSDiagnosticReporterAudioResourceNotAvailable
__ CoreSpeechFoundation: _kCSDiagnosticReporterAudioSessionInterrupted
__ CoreSpeechFoundation: _kCSDiagnosticReporterConsectiveFalseFirstPassTriggers
__ CoreSpeechFoundation: _kCSDiagnosticReporterEndpointerModelVersionIsNil
__ CoreSpeechFoundation: _kCSDiagnosticReporterHardwareConfigurationChanged
__ CoreSpeechFoundation: _kCSDiagnosticReporterHardwareRemoved
__ CoreSpeechFoundation: _kCSDiagnosticReporterMixedAudioSessionInterrupted
__ CoreSpeechFoundation: _kCSDiagnosticReporterNoHardwareError
__ CoreSpeechFoundation: _kCSDiagnosticReporterNoRouteAvailable
__ CoreSpeechFoundation: _kCSDiagnosticReporterSpeechPrepareFailure
__ CoreSpeechFoundation: _kCSDiagnosticReporterSpeechStartFailure
__ CoreSpeechFoundation: _kCSDiagnosticReporterSpeechStopFailure
__ CoreSpeechFoundation: _kCSDiagnosticReporterTrialAssetFetchFailed
__ CoreSpeechFoundation: _kCSDiagnosticReporterTrialDownloadFailed
__ CoreSpeechFoundation: _kCSDiagnosticReporterVoiceTriggerAPLeak
__ CoreSpeechFoundation: _kCSDiagnosticReporterVoiceTriggerAPStuckInTransition
__ CoreSpeechFoundation: _kCSDiagnosticReporterVoiceTriggerLaunchSlow
__ CoreSpeechFoundation: _kCSDiagnosticReporterVoiceTriggerSecondPassCompleteWatchDogFire
__ CoreSpeechFoundation: _kCSPreferencesDomain
__ CoreSpeechFoundation: _kCSPreferencesJarvisTriggerModeDidChangeDarwinNotification
__ CrashReporterSupport: _WriteStackshotReport_async
__ DistributedEvaluation: _OBJC_CLASS_$_DESRecordStore
__ EmbeddedAcousticRecognition: _OBJC_CLASS_$_EARCaesuraSilencePosteriorGenerator
__ EmbeddedAcousticRecognition: _OBJC_CLASS_$__EAREndpointFeatures
__ EmbeddedAcousticRecognition: _OBJC_CLASS_$__EAREndpointer
__ EmbeddedAcousticRecognition: _OBJC_CLASS_$__EARLanguageDetector
__ EmbeddedAcousticRecognition: _OBJC_CLASS_$__EARLanguageDetectorRequestContext
__ EmbeddedAcousticRecognition: _OBJC_CLASS_$__EARSpeechRecognizer
__ EmbeddedAcousticRecognition: _OBJC_CLASS_$__EARSyncSpeechRecognizer
__ Foundation: _NSFileProtectionCompleteUnlessOpen
__ Foundation: _NSFileProtectionCompleteUntilFirstUserAuthentication
__ Foundation: _NSFileProtectionKey
__ Foundation: _NSHomeDirectoryForUser
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExpression
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ HealthKit: _OBJC_CLASS_$_HKHealthStore
__ IDS: __IDSCopyIDForDeviceUniqueID
__ IOKit: _IOHIDUserDeviceActivate
__ IOKit: _IOHIDUserDeviceCancel
__ IOKit: _IOHIDUserDeviceCreate
__ IOKit: _IOHIDUserDeviceHandleReport
__ IOKit: _IOHIDUserDeviceSetCancelHandler
__ IOKit: _IOHIDUserDeviceSetDispatchQueue
__ IOKit: _IOPSDrawingUnlimitedPower
__ LocalSpeechRecognitionBridge: _OBJC_CLASS_$_LBLocalSpeechRecognizerClient
__ ManagedConfiguration: _MCFeatureAssistantWhileLockedAllowed
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationPlaybackState
__ MediaRemote: _MRMediaRemoteRegisterForNowPlayingNotifications
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey
__ MobileAsset: _ASAttributeCompatibilityVersion
__ MobileAsset: _ASAttributeContentVersion
__ MobileAsset: _OBJC_CLASS_$_MAAsset
__ MobileAsset: _OBJC_CLASS_$_MAAssetQuery
__ MobileAsset: _OBJC_CLASS_$_MADownloadOptions
__ MobileAsset: __MACleanV1Repository
__ MobileBluetooth: _BTAccessoryManagerAddCallbacks
__ MobileBluetooth: _BTAccessoryManagerGetAnnounceCallsSupport
__ MobileBluetooth: _BTAccessoryManagerGetAnnounceMessagesSupport
__ MobileBluetooth: _BTAccessoryManagerGetDefault
__ MobileBluetooth: _BTAccessoryManagerGetFeatureCapability
__ MobileBluetooth: _BTAccessoryManagerRemoveCallbacks
__ MobileBluetooth: _BTDeviceAddressFromString
__ MobileBluetooth: _BTDeviceAddressToString
__ MobileBluetooth: _BTDeviceConnect
__ MobileBluetooth: _BTDeviceDisconnect
__ MobileBluetooth: _BTDeviceFromAddress
__ MobileBluetooth: _BTDeviceFromIdentifier
__ MobileBluetooth: _BTDeviceGetAddressString
__ MobileBluetooth: _BTDeviceGetDeviceId
__ MobileBluetooth: _BTDeviceIsAppleAudioDevice
__ MobileBluetooth: _BTDeviceIsTemporaryPairedNotInContacts
__ MobileBluetooth: _BTDeviceSupportsHS
__ MobileBluetooth: _BTLocalDeviceAddCallbacks
__ MobileBluetooth: _BTLocalDeviceGetDefault
__ MobileBluetooth: _BTLocalDeviceGetSharingAddresses
__ MobileBluetooth: _BTLocalDeviceIsSharingEnabled
__ MobileBluetooth: _BTLocalDeviceRemoveCallbacks
__ MobileBluetooth: _BTServiceAddCallbacks
__ MobileBluetooth: _BTServiceRemoveCallbacks
__ MobileBluetooth: _BTSessionAttachWithQueue
__ MobileBluetooth: _BTSessionDetachWithQueue
__ MobileKeyBag: _MKBDeviceUnlockedSinceBoot
__ MobileKeyBag: _MKBGetDeviceLockState
__ RemoteServiceDiscovery: _remote_device_cancel
__ RemoteServiceDiscovery: _remote_device_copy_device_with_uuid
__ RemoteServiceDiscovery: _remote_device_copy_property
__ RemoteServiceDiscovery: _remote_device_copy_service
__ RemoteServiceDiscovery: _remote_device_copy_unique_of_type
__ RemoteServiceDiscovery: _remote_device_copy_uuid
__ RemoteServiceDiscovery: _remote_device_get_type
__ RemoteServiceDiscovery: _remote_device_set_connected_callback
__ RemoteServiceDiscovery: _remote_device_set_disconnected_callback
__ RemoteServiceDiscovery: _remote_device_type_get_description
__ RemoteXPC: _xpc_remote_connection_activate
__ RemoteXPC: _xpc_remote_connection_cancel
__ RemoteXPC: _xpc_remote_connection_create_with_remote_service
__ RemoteXPC: _xpc_remote_connection_send_message
__ RemoteXPC: _xpc_remote_connection_send_message_with_reply
__ RemoteXPC: _xpc_remote_connection_set_event_handler
__ SAObjects: _SASCodecOPUS_Mono_16000HzValue
__ SAObjects: _SASCodecOPUS_Mono_8000HzValue
__ SAObjects: _SASCodecPCM_Mono_16Bit_11025HzValue
__ SAObjects: _SASCodecPCM_Mono_16Bit_16000HzValue
__ SAObjects: _SASCodecPCM_Mono_16Bit_22050HzValue
__ SAObjects: _SASCodecPCM_Mono_16Bit_32000HzValue
__ SAObjects: _SASCodecPCM_Mono_16Bit_8000HzValue
__ SAObjects: _SASCodecSpeex_NB_Quality7Value
__ SAObjects: _SASCodecSpeex_WB_Quality8Value
__ SAObjects: _SASStartSpeechAudioDestinationBluetoothA2DPDeviceValue
__ SAObjects: _SASStartSpeechAudioDestinationBluetoothHandsFreeDeviceValue
__ SAObjects: _SASStartSpeechAudioDestinationBluetoothLEDeviceValue
__ SAObjects: _SASStartSpeechAudioDestinationBuiltInReceiverValue
__ SAObjects: _SASStartSpeechAudioDestinationBuiltInSpeakerValue
__ SAObjects: _SASStartSpeechAudioDestinationCarAudioValue
__ SAObjects: _SASStartSpeechAudioDestinationHDMIValue
__ SAObjects: _SASStartSpeechAudioDestinationHeadphonesValue
__ SAObjects: _SASStartSpeechAudioDestinationOtherValue
__ SAObjects: _SASStartSpeechAudioDestinationUSBAudioValue
__ SAObjects: _SASStartSpeechAudioSourceBluetoothDoAPDeviceValue
__ SAObjects: _SASStartSpeechAudioSourceBluetoothHandsFreeDeviceValue
__ SAObjects: _SASStartSpeechAudioSourceBuiltInMicValue
__ SAObjects: _SASStartSpeechAudioSourceCarAudioValue
__ SAObjects: _SASStartSpeechAudioSourceCarJarvisDeviceValue
__ SAObjects: _SASStartSpeechAudioSourceLineInValue
__ SAObjects: _SASStartSpeechAudioSourceUsbAudioValue
__ SAObjects: _SASStartSpeechAudioSourceWiredHeadsetMicValue
__ SAObjects: _SASStartSpeechDspTypeNoiseCancellationValue
__ Security: _SecItemCopyMatching
__ Security: _kSecAttrAccessGroup
__ Security: _kSecAttrAccount
__ Security: _kSecAttrService
__ Security: _kSecClass
__ Security: _kSecClassGenericPassword
__ Security: _kSecReturnData
__ SiriAnalytics: _OBJC_CLASS_$_AssistantSiriAnalytics
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHCarplayLanguageMismatch
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHClientEvent
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHClientEventMetadata
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHEndpointDelayContext
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHEndpointDetected
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHEndpointFeaturesAtEndpoint
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHEndpointLatencyInfoReported
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHEndpointerTimeoutMetadata
__ SiriInstrumentation: _OBJC_CLASS_$_MHSchemaMHStatisticDistributionInfo
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaAudioFirstBufferRecorded
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaAudioStopRecording
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaAudioStopRecordingStarted
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaHardwareInterfaceIdentifier
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaRequestLink
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaRequestLinkInfo
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaSiriCue
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUEILaunchContext
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUEILaunchStarted
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUEIUserSpeakingContext
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUEIUserSpeakingEnded
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUEIUserSpeakingStarted
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUUID
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaVersion
__ SiriObservation: _OBJC_CLASS_$_SOClockAlarmObserver
__ SiriObservation: _OBJC_CLASS_$_SOClockTimerObserver
__ SiriObservation: _OBJC_CLASS_$_SOMediaNowPlayingObserver
__ SoftLinking: __sl_dlopen
__ SoundAnalysis: _OBJC_CLASS_$_SNAudioStreamAnalyzer
__ SoundAnalysis: _OBJC_CLASS_$_SNDetectSpeechUtteranceRequest
__ SoundAnalysis: _OBJC_CLASS_$_SNEstimateDirectionOfArrivalRequest
__ SpeakerRecognition: _OBJC_CLASS_$_SSRSpeakerRecognitionContext
__ SpeakerRecognition: _OBJC_CLASS_$_SSRSpeakerRecognitionController
__ SpeakerRecognition: _OBJC_CLASS_$_SSRUtils
__ SpeakerRecognition: _OBJC_CLASS_$_SSRVoiceProfileManager
__ SpeakerRecognition: _OBJC_CLASS_$_SSRVoiceProfileRetrainingContext
__ SpeakerRecognition: _SSRSpeakerRecognitionAssetArrayKey
__ SpeakerRecognition: _SSRSpeakerRecognitionAssetKey
__ SpeakerRecognition: _SSRSpeakerRecognitionEndpointId
__ SpeakerRecognition: _SSRSpeakerRecognitionLocaleKey
__ SpeakerRecognition: _SSRSpeakerRecognitionMaxAudioDurationSecs
__ SpeakerRecognition: _SSRSpeakerRecognitionOSTransactionRequired
__ SpeakerRecognition: _SSRSpeakerRecognitionProfileArrayKey
__ SpeakerRecognition: _SSRSpeakerRecognitionSiriAppDomain
__ SpeakerRecognition: _SSRSpeakerRecognitionSiriDebugAppDomain
__ SpeakerRecognition: _SSRSpeakerRecognitionStyleKey
__ SpeakerRecognition: _SSRSpeakerRecognitionUsePayloadProfileKey
__ SpeakerRecognition: _SSRSpeakerRecognitionVTEventInfoKey
__ SpeakerRecognition: _SSRVoiceRetrainingAssetKey
__ SpeakerRecognition: _SSRVoiceRetrainingFilterToVoiceTriggerUtterancesKey
__ SpeakerRecognition: _SSRVoiceRetrainingVoiceProfileKey
__ SpeakerRecognition: _kSSRSpeakerModelRetrainRequired
__ SpeakerRecognition: _kSSRSpeakerRecognitionCombinationWeight
__ SpeakerRecognition: _kSSRSpeakerRecognitionKnownUserPSRExpScoresKey
__ SpeakerRecognition: _kSSRSpeakerRecognitionKnownUserPSRScoresKey
__ SpeakerRecognition: _kSSRSpeakerRecognitionKnownUserSATExpScoresKey
__ SpeakerRecognition: _kSSRSpeakerRecognitionKnownUserSATScoresKey
__ SpeakerRecognition: _kSSRSpeakerRecognitionKnownUserScoresKey
__ SpeakerRecognition: _kSSRSpeakerRecognitionMetaFilePathKey
__ SpeakerRecognition: _kSSRSpeakerRecognitionNumEnrollmentUtterances
__ SpeakerRecognition: _kSSRSpeakerRecognitionNumExplicitUtt
__ SpeakerRecognition: _kSSRSpeakerRecognitionNumImplicitUtt
__ SpeakerRecognition: _kSSRSpeakerRecognitionNumSpeakerVector
__ SpeakerRecognition: _kSSRSpeakerRecognitionPSRAdditionalContextKey
__ SpeakerRecognition: _kSSRSpeakerRecognitionSATAdditionalContextKey
__ SpeakerRecognition: _kSSRSpeakerVoiceProfileSync
__ SpeechDetector: _OBJC_CLASS_$_OSDAnalyzer
__ SpeechDetector: _OBJC_CLASS_$_OSDFeatures
__ Trial: _OBJC_CLASS_$_TRIClient
__ TrialProto: _OBJC_CLASS_$_TRINamespace
__ VoiceTrigger: _OBJC_CLASS_$_VTBlobBuilder
__ VoiceTrigger: _OBJC_CLASS_$_VTPreferences
__ VoiceTrigger: _OBJC_CLASS_$_VTStateManager
__ VoiceTrigger: _OBJC_CLASS_$_VTUtilities
__ VoiceTrigger: _kNDEConfigDataMaxSizeBytes
__ VoiceTrigger: _kNDEStateBufferSizeBytes
__ VoiceTrigger: _nd_close
__ VoiceTrigger: _nd_create
__ VoiceTrigger: _nd_error
__ VoiceTrigger: _nd_getoption
__ VoiceTrigger: _nd_getphraseresults
__ VoiceTrigger: _nd_getresults
__ VoiceTrigger: _nd_getsupervector
__ VoiceTrigger: _nd_initialize
__ VoiceTrigger: _nd_phrasecount
__ VoiceTrigger: _nd_reset
__ VoiceTrigger: _nd_resetbest
__ VoiceTrigger: _nd_wavedata
__ VoiceTrigger: _nd_wavedataf
__ VoiceTrigger: _nde_create
__ VoiceTrigger: _nde_destroy
__ VoiceTrigger: _nde_enable_multiinstance
__ VoiceTrigger: _nde_process_v2
__ VoiceTrigger: _nde_reset
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRES_CLASS_C
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___exp10f
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: __xpc_error_connection_interrupted
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: __xpc_type_bool
__ libSystem.B.dylib: __xpc_type_data
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_double
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_int64
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: __xpc_type_uint64
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _cosf
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_async_and_wait
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_queue_get_label
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_workloop_create
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _expf
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fread
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fseek
__ libSystem.B.dylib: _getuid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _log10f
__ libSystem.B.dylib: _log2
__ libSystem.B.dylib: _log2f
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _nwi_ifstate_get_flags
__ libSystem.B.dylib: _nwi_state_copy
__ libSystem.B.dylib: _nwi_state_get_first_ifstate
__ libSystem.B.dylib: _nwi_state_get_notify_key
__ libSystem.B.dylib: _nwi_state_release
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: _xpc_activity_get_state
__ libSystem.B.dylib: _xpc_activity_register
__ libSystem.B.dylib: _xpc_activity_set_state
__ libSystem.B.dylib: _xpc_activity_should_defer
__ libSystem.B.dylib: _xpc_array_append_value
__ libSystem.B.dylib: _xpc_array_apply
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_bool_create
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_connection_activate
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_copy_clean_description
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_get_bytes_ptr
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_apply
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_create_reply
__ libSystem.B.dylib: _xpc_dictionary_get_array
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_dictionary
__ libSystem.B.dylib: _xpc_dictionary_get_double
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_double_create
__ libSystem.B.dylib: _xpc_double_get_value
__ libSystem.B.dylib: _xpc_file_transfer_create_with_path
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_int64_create
__ libSystem.B.dylib: _xpc_int64_get_value
__ libSystem.B.dylib: _xpc_string_create
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: _xpc_uint64_create
__ libSystem.B.dylib: _xpc_uint64_get_value
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt12out_of_rangeD1Ev
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTISt12out_of_range
__ libc++.1.dylib: __ZTISt9exception
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZTVSt12out_of_range
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libcompression.dylib: _compression_decode_buffer
__ libcompression.dylib: _compression_encode_buffer
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
CSGestureMonitor : CSEventMonitor
 @property  unsigned long wakeGestureTimestamp
 @property  unsigned long dismissalTimestamp

  // class methods
  +[CSGestureMonitor sharedInstance]

  // instance methods
  -[CSGestureMonitor _stopMonitoring]
  -[CSGestureMonitor _startMonitoringWithQueue:]
  -[CSGestureMonitor wakeGestureTimestamp]
  -[CSGestureMonitor dismissalTimestamp]
  -[CSGestureMonitor isTriggerHandheld]
  -[CSGestureMonitor setWakeGestureTimestamp:]
  -[CSGestureMonitor setDismissalTimestamp:]


CSBluetoothWirelessSplitterInfo : NSObject
 @property  BOOL splitterEnabled
 @property  BOOL shouldDisableSpeakerVerificationInSplitterMode

  // instance methods
  -[CSBluetoothWirelessSplitterInfo .cxx_destruct]
  -[CSBluetoothWirelessSplitterInfo shouldDisableSpeakerVerificationInSplitterMode]
  -[CSBluetoothWirelessSplitterInfo setSplitterEnabled:]
  -[CSBluetoothWirelessSplitterInfo addDeviceIntoSplitterDeviceList:]
  -[CSBluetoothWirelessSplitterInfo init]
  -[CSBluetoothWirelessSplitterInfo splitterEnabled]
  -[CSBluetoothWirelessSplitterInfo _hasDeviceTemporaryPairedNotInContacts]
  -[CSBluetoothWirelessSplitterInfo splitterState]
  -[CSBluetoothWirelessSplitterInfo splitterDeviceList]


CSAudioInjectionBuiltInEngine : CSAudioInjectionEngine <CSAudioInjectionEngineDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSAudioInjectionEngineDelegate> *delegate
 @property  CSKeywordAnalyzerNDEAPI *keywordAnalyzer
 @property  CSAudioCircularBuffer *circularBuffer
 @property  unsigned long lastForwardedSampleCount
 @property  NSMutableArray *hostTimeBuffer
 @property  NSUUID *uuid
 @property  BOOL voiceTriggerEnabled
 @property  CSAudioInjectionDevice *connectedDevice
 @property  BOOL isForwarding
 @property  unsigned long voiceTriggerSampleCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioInjectionBuiltInEngine isRecording]
  -[CSAudioInjectionBuiltInEngine setKeywordAnalyzer:]
  -[CSAudioInjectionBuiltInEngine .cxx_destruct]
  -[CSAudioInjectionBuiltInEngine stop]
  -[CSAudioInjectionBuiltInEngine setDelegate:]
  -[CSAudioInjectionBuiltInEngine setVoiceTriggerEnabled:]
  -[CSAudioInjectionBuiltInEngine setQueue:]
  -[CSAudioInjectionBuiltInEngine keywordAnalyzer]
  -[CSAudioInjectionBuiltInEngine uuid]
  -[CSAudioInjectionBuiltInEngine delegate]
  -[CSAudioInjectionBuiltInEngine queue]
  -[CSAudioInjectionBuiltInEngine start]
  -[CSAudioInjectionBuiltInEngine dealloc]
  -[CSAudioInjectionBuiltInEngine voiceTriggerEnabled]
  -[CSAudioInjectionBuiltInEngine setUuid:]
  -[CSAudioInjectionBuiltInEngine setCircularBuffer:]
  -[CSAudioInjectionBuiltInEngine circularBuffer]
  -[CSAudioInjectionBuiltInEngine initWithStreamHandleId:]
  -[CSAudioInjectionBuiltInEngine setConnectedDevice:]
  -[CSAudioInjectionBuiltInEngine isAlwaysOnVoiceTriggerAvailable]
  -[CSAudioInjectionBuiltInEngine setAlwaysOnVoiceTriggerEnabled:]
  -[CSAudioInjectionBuiltInEngine startAudioStreamWithOption:]
  -[CSAudioInjectionBuiltInEngine stopAudioStream]
  -[CSAudioInjectionBuiltInEngine injectAudio:]
  -[CSAudioInjectionBuiltInEngine injectAudio:withScaleFactor:playbackStarted:completion:]
  -[CSAudioInjectionBuiltInEngine getBestSampleCountWithOption:]
  -[CSAudioInjectionBuiltInEngine audioEngineDidStartRecord:audioStreamHandleId:successfully:error:]
  -[CSAudioInjectionBuiltInEngine audioEngineDidStopRecord:audioStreamHandleId:reason:]
  -[CSAudioInjectionBuiltInEngine audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:]
  -[CSAudioInjectionBuiltInEngine audioEngineAudioChunkForTvAvailable:audioChunk:]
  -[CSAudioInjectionBuiltInEngine alwaysOnVoiceTriggerEnabled]
  -[CSAudioInjectionBuiltInEngine attachDevice:]
  -[CSAudioInjectionBuiltInEngine lastForwardedSampleCount]
  -[CSAudioInjectionBuiltInEngine setLastForwardedSampleCount:]
  -[CSAudioInjectionBuiltInEngine hostTimeBuffer]
  -[CSAudioInjectionBuiltInEngine setHostTimeBuffer:]
  -[CSAudioInjectionBuiltInEngine connectedDevice]
  -[CSAudioInjectionBuiltInEngine isForwarding]
  -[CSAudioInjectionBuiltInEngine setIsForwarding:]
  -[CSAudioInjectionBuiltInEngine voiceTriggerSampleCount]
  -[CSAudioInjectionBuiltInEngine setVoiceTriggerSampleCount:]


NviDataLogger : NSObject <NSStreamDelegate>
 @property  NSOutputStream *oStream
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NviDataLogger .cxx_destruct]
  -[NviDataLogger oStream]
  -[NviDataLogger logData:]
  -[NviDataLogger stream:handleEvent:]
  -[NviDataLogger endRequest]
  -[NviDataLogger initWithFilePath:appendHdr:]
  -[NviDataLogger setOStream:]


CSMicUsageReporter : NSObject
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[CSMicUsageReporter .cxx_destruct]
  -[CSMicUsageReporter init]
  -[CSMicUsageReporter setQueue:]
  -[CSMicUsageReporter queue]
  -[CSMicUsageReporter _reportsDynamicActivityAttribute:bundleId:]
  -[CSMicUsageReporter reportMicUsage:]
  -[CSMicUsageReporter reportsDynamicActivityAttributeAsync:bundleId:]
  -[CSMicUsageReporter reportsDynamicActivityAttributeSync:bundleId:]


CSGestureMonitorPhone : CSGestureMonitor <CMWakeGestureDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSGestureMonitorPhone _stopMonitoring]
  -[CSGestureMonitorPhone .cxx_destruct]
  -[CSGestureMonitorPhone _startMonitoringWithQueue:]
  -[CSGestureMonitorPhone init]
  -[CSGestureMonitorPhone wakeGestureManager:didUpdateWakeGesture:]
  -[CSGestureMonitorPhone _didReceiveWakeGesture]
  -[CSGestureMonitorPhone _didReceiveSleepGesture]


CSVoiceTriggerAssetHandler : NSObject
 @property  NSHashTable *observers
 @property  NSObject<OS_dispatch_queue> *queue

  // class methods
  +[CSVoiceTriggerAssetHandler sharedHandler]

  // instance methods
  -[CSVoiceTriggerAssetHandler unregisterObserver:]
  -[CSVoiceTriggerAssetHandler registerObserver:]
  -[CSVoiceTriggerAssetHandler .cxx_destruct]
  -[CSVoiceTriggerAssetHandler setObservers:]
  -[CSVoiceTriggerAssetHandler init]
  -[CSVoiceTriggerAssetHandler setQueue:]
  -[CSVoiceTriggerAssetHandler notifyObservers:endpointId:]
  -[CSVoiceTriggerAssetHandler getVoiceTriggerAssetWithEndpointId:completion:]
  -[CSVoiceTriggerAssetHandler queue]
  -[CSVoiceTriggerAssetHandler observers]
  -[CSVoiceTriggerAssetHandler defaultFallbackModelIfNil:]


CSAudioSessionController : NSObject <CSAudioSessionInfoProvidingDelegate, CSXPCClientDelegate, CSCoreSpeechDaemonStateMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers
 @property  <CSAudioSessionInfoProviding> *sessionInfoProvider
 @property  CSXPCClient *xpcClient
 @property  BOOL shouldKeepConnection
 @property  NSUUID *endpointId
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAudioSessionController sharedInstance]

  // instance methods
  -[CSAudioSessionController endpointId]
  -[CSAudioSessionController setEndpointId:]
  -[CSAudioSessionController initWithEndpointId:]
  -[CSAudioSessionController _stopMonitoring]
  -[CSAudioSessionController CSXPCClient:didDisconnect:]
  -[CSAudioSessionController setXpcClient:]
  -[CSAudioSessionController unregisterObserver:]
  -[CSAudioSessionController _audioRouteChanged:]
  -[CSAudioSessionController _mediaServicesWereReset:]
  -[CSAudioSessionController registerObserver:]
  -[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]
  -[CSAudioSessionController getAudioSessionID]
  -[CSAudioSessionController .cxx_destruct]
  -[CSAudioSessionController _createXPCClientConnectionIfNeeded]
  -[CSAudioSessionController setShouldKeepConnection:]
  -[CSAudioSessionController xpcClient]
  -[CSAudioSessionController _registerInterruptionNotification]
  -[CSAudioSessionController _handleInterruption:]
  -[CSAudioSessionController setObservers:]
  -[CSAudioSessionController sessionInfoProvider]
  -[CSAudioSessionController coreSpeechDaemonStateMonitor:didReceiveStateChanged:]
  -[CSAudioSessionController init]
  -[CSAudioSessionController _mediaServicesWereLost:]
  -[CSAudioSessionController setQueue:]
  -[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:]
  -[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]
  -[CSAudioSessionController setSessionInfoProvider:]
  -[CSAudioSessionController _teardownXPCClientIfNeeded]
  -[CSAudioSessionController queue]
  -[CSAudioSessionController observers]
  -[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
  -[CSAudioSessionController dealloc]
  -[CSAudioSessionController shouldKeepConnection]
  -[CSAudioSessionController _registerAudioRouteChangeNotification]
  -[CSAudioSessionController _startMonitoring]
  -[CSAudioSessionController _getAudioSessionID]
  -[CSAudioSessionController getAudioSessionIDWithCompletion:]


CSSiriDebugConnection : NSObject
  // class methods
  +[CSSiriDebugConnection launchSiriDebugAppWithMessage:]


CSPhoneCallStateMonitor : CSEventMonitor <CXCallObserverDelegate>
 @property  CXCallObserver *callObserver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSPhoneCallStateMonitor sharedInstance]

  // instance methods
  -[CSPhoneCallStateMonitor callObserver]
  -[CSPhoneCallStateMonitor _stopMonitoring]
  -[CSPhoneCallStateMonitor phoneCallState]
  -[CSPhoneCallStateMonitor .cxx_destruct]
  -[CSPhoneCallStateMonitor _startMonitoringWithQueue:]
  -[CSPhoneCallStateMonitor setCallObserver:]
  -[CSPhoneCallStateMonitor callObserver:callChanged:]


CSCommandControlListenerOption : NSObject
  // class methods
  +[CSCommandControlListenerOption defaultOption]


CSMediaPlayingMonitor : CSEventMonitor
  // class methods
  +[CSMediaPlayingMonitor sharedInstance]

  // instance methods
  -[CSMediaPlayingMonitor _stopMonitoring]
  -[CSMediaPlayingMonitor mediaPlayingState]
  -[CSMediaPlayingMonitor _notifyObserver:mediaIsPlayingState:]
  -[CSMediaPlayingMonitor .cxx_destruct]
  -[CSMediaPlayingMonitor initializeMediaPlayingState]
  -[CSMediaPlayingMonitor mediaPlayingStateWithCompletion:]
  -[CSMediaPlayingMonitor _startMonitoringWithQueue:]
  -[CSMediaPlayingMonitor init]
  -[CSMediaPlayingMonitor _notePossiblePlayPausedStateChange:]


CSAudioInjectionFileOption : NSObject
 @property  NSURL *audioURL
 @property  {AudioStreamBasicDescription=dIIIIIIII} outASBD
 @property  ^{OpaqueExtAudioFile=} fFile
 @property  float scaleFactor

  // instance methods
  -[CSAudioInjectionFileOption scaleFactor]
  -[CSAudioInjectionFileOption fFile]
  -[CSAudioInjectionFileOption .cxx_destruct]
  -[CSAudioInjectionFileOption audioURL]
  -[CSAudioInjectionFileOption outASBD]
  -[CSAudioInjectionFileOption initWithAudioURL:withScaleFactor:outASBD:]
  -[CSAudioInjectionFileOption setOutASBD:]
  -[CSAudioInjectionFileOption setFFile:]


CSMSNExceptionManager : NSObject
 @property  NSMutableDictionary *announceMessageExceptions
 @property  NSObject<OS_dispatch_queue> *queue

  // class methods
  +[CSMSNExceptionManager sharedInstance]

  // instance methods
  -[CSMSNExceptionManager .cxx_destruct]
  -[CSMSNExceptionManager init]
  -[CSMSNExceptionManager setQueue:]
  -[CSMSNExceptionManager queue]
  -[CSMSNExceptionManager beginAnnounceMessageException:reason:]
  -[CSMSNExceptionManager endAnnounceMessageException:reason:]
  -[CSMSNExceptionManager announceMessageExceptions]
  -[CSMSNExceptionManager setAnnounceMessageExceptions:]


CSVolumeMonitor : CSEventMonitor
  // class methods
  +[CSVolumeMonitor sharedInstance]

  // instance methods
  -[CSVolumeMonitor alarmVolume]
  -[CSVolumeMonitor .cxx_destruct]
  -[CSVolumeMonitor _notifyObserver:volumeDidChanged:forAudioCategory:]
  -[CSVolumeMonitor _startObservingSystemControllerLifecycle]
  -[CSVolumeMonitor _fetchSystemVolumeForCategory:usingSystemController:volume:]
  -[CSVolumeMonitor systemControllerDied:]
  -[CSVolumeMonitor _startMonitoringWithQueue:]
  -[CSVolumeMonitor init]
  -[CSVolumeMonitor musicVolume]
  -[CSVolumeMonitor fetchVolumeFromAVSystemControllerForAudioCategory:]
  -[CSVolumeMonitor systemVolumeDidChange:]
  -[CSVolumeMonitor musicVolumeWithCompletion:]
  -[CSVolumeMonitor _supportAVSystemVolumeFetch]
  -[CSVolumeMonitor _getNewSystemVolumesWithNotification:category:]
  -[CSVolumeMonitor dealloc]
  -[CSVolumeMonitor startObservingSystemVolumes]


CSTimerMonitor : CSEventMonitor
  // class methods
  +[CSTimerMonitor sharedInstance]

  // instance methods
  -[CSTimerMonitor _stopMonitoring]
  -[CSTimerMonitor _timerDismissed:]
  -[CSTimerMonitor .cxx_destruct]
  -[CSTimerMonitor _notifyObserver:timerIsFiringState:]
  -[CSTimerMonitor _startMonitoringWithQueue:]
  -[CSTimerMonitor init]
  -[CSTimerMonitor _timerIsFiring:]
  -[CSTimerMonitor _isSleepTimer:]
  -[CSTimerMonitor _timerStateReset:]
  -[CSTimerMonitor initializeTimerState]
  -[CSTimerMonitor timerState]


CSAlarmMonitor : CSEventMonitor
  // class methods
  +[CSAlarmMonitor sharedInstance]

  // instance methods
  -[CSAlarmMonitor _stopMonitoring]
  -[CSAlarmMonitor _alarmStateReset:]
  -[CSAlarmMonitor .cxx_destruct]
  -[CSAlarmMonitor _alarmDismissed:]
  -[CSAlarmMonitor _startMonitoringWithQueue:]
  -[CSAlarmMonitor init]
  -[CSAlarmMonitor initializeAlarmState]
  -[CSAlarmMonitor _notifyObserver:alarmIsFiringState:]
  -[CSAlarmMonitor alarmState]
  -[CSAlarmMonitor _alarmIsFiring:]


CSAudioStreamHolding : NSObject
 @property  NSString *name

  // instance methods
  -[CSAudioStreamHolding name]
  -[CSAudioStreamHolding .cxx_destruct]
  -[CSAudioStreamHolding setName:]
  -[CSAudioStreamHolding dealloc]


CSUserIdentityClassifier : NSObject
  // class methods
  +[CSUserIdentityClassifier pickTopScoringProfileIdFromScores:]
  +[CSUserIdentityClassifier classifyUserIdentityFor:withScores:withAsset:]
  +[CSUserIdentityClassifier stringFromClassificationCategory:]


CSAssetManagerEnablePolicyFactory : NSObject
  // class methods
  +[CSAssetManagerEnablePolicyFactory assetManagerEnabledPolicy]


CSAttSiriServiceClient : NSObject <CSAttSiriServiceDelegate, CSAttSiriServiceProtocol>
 @property  NSXPCConnection *attSiriSvcConn
 @property  id remoteSvcProxy
 @property  <CSAttSiriServiceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAttSiriServiceClient .cxx_destruct]
  -[CSAttSiriServiceClient setDelegate:]
  -[CSAttSiriServiceClient init]
  -[CSAttSiriServiceClient delegate]
  -[CSAttSiriServiceClient dealloc]
  -[CSAttSiriServiceClient invalidate]
  -[CSAttSiriServiceClient _setupAttSiriSvcXpcConnection]
  -[CSAttSiriServiceClient startAttendingWithContext:]
  -[CSAttSiriServiceClient stopAttendingWithContext:]
  -[CSAttSiriServiceClient siriRequestProcessingCompleted]
  -[CSAttSiriServiceClient attSiriDidDetectAttendingTrigger:]
  -[CSAttSiriServiceClient attSiriSvcConn]
  -[CSAttSiriServiceClient setAttSiriSvcConn:]
  -[CSAttSiriServiceClient remoteSvcProxy]
  -[CSAttSiriServiceClient setRemoteSvcProxy:]


CSSiriFanInfoManager : NSObject
  // class methods
  +[CSSiriFanInfoManager sharedManager]

  // instance methods
  -[CSSiriFanInfoManager init]
  -[CSSiriFanInfoManager dealloc]
  -[CSSiriFanInfoManager getCurrentFanInfo:]


CSSiriFanInfo : NSObject
 @property  unsigned long fanId
 @property  long long currentSpeed
 @property  long long targetSpeed

  // instance methods
  -[CSSiriFanInfo fanId]
  -[CSSiriFanInfo currentSpeed]
  -[CSSiriFanInfo setFanId:]
  -[CSSiriFanInfo setCurrentSpeed:]
  -[CSSiriFanInfo targetSpeed]
  -[CSSiriFanInfo setTargetSpeed:]


CSBiometricMatchMonitor : CSEventMonitor <BKDeviceDelegate>
 @property  BKDevice *biometricDevice
 @property  <CSBiometricMatchMonitorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSBiometricMatchMonitor sharedInstance]

  // instance methods
  -[CSBiometricMatchMonitor _stopMonitoring]
  -[CSBiometricMatchMonitor startObserving]
  -[CSBiometricMatchMonitor .cxx_destruct]
  -[CSBiometricMatchMonitor setDelegate:]
  -[CSBiometricMatchMonitor _startMonitoringWithQueue:]
  -[CSBiometricMatchMonitor init]
  -[CSBiometricMatchMonitor delegate]
  -[CSBiometricMatchMonitor getLastBiometricMatchEvent:atTime:]
  -[CSBiometricMatchMonitor device:matchEventOccurred:]
  -[CSBiometricMatchMonitor getBiometricMatchResultForTriggerTimeStamp:]
  -[CSBiometricMatchMonitor biometricDevice]
  -[CSBiometricMatchMonitor setBiometricDevice:]


CSPreMyriadVoiceTriggerMetaData : NSObject
 @property  NSString *deviceId
 @property  BOOL isSecondPassRunning
 @property  float firstPassMyriadGoodnessScore

  // instance methods
  -[CSPreMyriadVoiceTriggerMetaData setDeviceId:]
  -[CSPreMyriadVoiceTriggerMetaData deviceId]
  -[CSPreMyriadVoiceTriggerMetaData .cxx_destruct]
  -[CSPreMyriadVoiceTriggerMetaData setIsSecondPassRunning:]
  -[CSPreMyriadVoiceTriggerMetaData init]
  -[CSPreMyriadVoiceTriggerMetaData isSecondPassRunning]
  -[CSPreMyriadVoiceTriggerMetaData firstPassMyriadGoodnessScore]
  -[CSPreMyriadVoiceTriggerMetaData setFirstPassMyriadGoodnessScore:]


CSPreMyriadCoordinator : NSObject <CSVoiceTriggerDelegate, CSSecondPassProgressDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  NSDictionary *pendingRemoraVoiceTriggerResult
 @property  NSString *pendingRemoraVoiceTriggerDeviceId
 @property  @? pendingRemoraVoiceTriggerCompletionBlk
 @property  unsigned long pendingRemoraVoiceTriggerDetectedTime
 @property  NSDictionary *pendingBuiltInVoiceTriggerResult
 @property  @? pendingBuiltInVoiceTriggerCompletionBlk
 @property  unsigned long pendingBuiltInVoiceTriggerDetectedTime
 @property  CSPreMyriadVoiceTriggerMetaData *builtInVoiceTriggerMetaData
 @property  NSMutableDictionary *accessoryVoiceTriggerMetaDataByDeviceId
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  <CSSecondPassProgressProviding> *builtInSeconPassProgressProvider
 @property  <CSSecondPassProgressProviding> *remoraSecondPassProgressProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSPreMyriadCoordinator targetQueue]
  -[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:]
  -[CSPreMyriadCoordinator setTargetQueue:]
  -[CSPreMyriadCoordinator .cxx_destruct]
  -[CSPreMyriadCoordinator raiseToSpeakDetected:]
  -[CSPreMyriadCoordinator setDelegate:]
  -[CSPreMyriadCoordinator setQueue:]
  -[CSPreMyriadCoordinator voiceTriggerDidRejected:deviceId:]
  -[CSPreMyriadCoordinator voiceTriggerDidDetectSpeakerReject:]
  -[CSPreMyriadCoordinator initWithTargetQueue:]
  -[CSPreMyriadCoordinator voiceTriggerGotSuperVector:]
  -[CSPreMyriadCoordinator delegate]
  -[CSPreMyriadCoordinator voiceTriggerDidDetectNearMiss:deviceId:]
  -[CSPreMyriadCoordinator queue]
  -[CSPreMyriadCoordinator keywordDetectorDidDetectKeyword]
  -[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]
  -[CSPreMyriadCoordinator _clearPendingRemoraVoiceTrigger]
  -[CSPreMyriadCoordinator _clearPendingBuiltInVoiceTrigger]
  -[CSPreMyriadCoordinator isBultInVoiceTriggerEvent:]
  -[CSPreMyriadCoordinator isRemoraVoiceTriggerEvent:]
  -[CSPreMyriadCoordinator handlePendingRemoraVoiceTriggerIfNeeded]
  -[CSPreMyriadCoordinator handlePendingBuiltInVoiceTriggerIfNeeded]
  -[CSPreMyriadCoordinator setBuiltInVoiceTriggerMetaData:]
  -[CSPreMyriadCoordinator accessoryVoiceTriggerMetaDataByDeviceId]
  -[CSPreMyriadCoordinator secondPassDidStartForClient:deviceId:withFirstPassEstimate:]
  -[CSPreMyriadCoordinator secondPassDidStopForClient:deviceId:]
  -[CSPreMyriadCoordinator _getHighestRemoraFirstPassGoodnessScore:]
  -[CSPreMyriadCoordinator _isRemoraSecondPassRunning]
  -[CSPreMyriadCoordinator builtInSeconPassProgressProvider]
  -[CSPreMyriadCoordinator setBuiltInSeconPassProgressProvider:]
  -[CSPreMyriadCoordinator remoraSecondPassProgressProvider]
  -[CSPreMyriadCoordinator setRemoraSecondPassProgressProvider:]
  -[CSPreMyriadCoordinator pendingRemoraVoiceTriggerResult]
  -[CSPreMyriadCoordinator setPendingRemoraVoiceTriggerResult:]
  -[CSPreMyriadCoordinator pendingRemoraVoiceTriggerDeviceId]
  -[CSPreMyriadCoordinator setPendingRemoraVoiceTriggerDeviceId:]
  -[CSPreMyriadCoordinator pendingRemoraVoiceTriggerCompletionBlk]
  -[CSPreMyriadCoordinator setPendingRemoraVoiceTriggerCompletionBlk:]
  -[CSPreMyriadCoordinator pendingRemoraVoiceTriggerDetectedTime]
  -[CSPreMyriadCoordinator setPendingRemoraVoiceTriggerDetectedTime:]
  -[CSPreMyriadCoordinator pendingBuiltInVoiceTriggerResult]
  -[CSPreMyriadCoordinator setPendingBuiltInVoiceTriggerResult:]
  -[CSPreMyriadCoordinator pendingBuiltInVoiceTriggerCompletionBlk]
  -[CSPreMyriadCoordinator setPendingBuiltInVoiceTriggerCompletionBlk:]
  -[CSPreMyriadCoordinator pendingBuiltInVoiceTriggerDetectedTime]
  -[CSPreMyriadCoordinator setPendingBuiltInVoiceTriggerDetectedTime:]
  -[CSPreMyriadCoordinator builtInVoiceTriggerMetaData]
  -[CSPreMyriadCoordinator setAccessoryVoiceTriggerMetaDataByDeviceId:]


CSAudioInjectionHearstEngine : CSAudioInjectionEngine <CSAudioInjectionEngineDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSAudioInjectionEngineDelegate> *delegate
 @property  CSKeywordAnalyzerNDAPI *keywordAnalyzer
 @property  CSAudioCircularBuffer *circularBuffer
 @property  unsigned long lastDetectedVoiceTriggerBeginSampleCount
 @property  unsigned long lastForwardedSampleCount
 @property  BOOL voiceTriggerEnabled
 @property  CSAudioInjectionDevice *connectedDevice
 @property  NSUUID *uuid
 @property  BOOL isForwarding
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioInjectionHearstEngine isRecording]
  -[CSAudioInjectionHearstEngine setKeywordAnalyzer:]
  -[CSAudioInjectionHearstEngine .cxx_destruct]
  -[CSAudioInjectionHearstEngine stop]
  -[CSAudioInjectionHearstEngine setDelegate:]
  -[CSAudioInjectionHearstEngine setVoiceTriggerEnabled:]
  -[CSAudioInjectionHearstEngine setQueue:]
  -[CSAudioInjectionHearstEngine keywordAnalyzer]
  -[CSAudioInjectionHearstEngine uuid]
  -[CSAudioInjectionHearstEngine delegate]
  -[CSAudioInjectionHearstEngine queue]
  -[CSAudioInjectionHearstEngine start]
  -[CSAudioInjectionHearstEngine dealloc]
  -[CSAudioInjectionHearstEngine voiceTriggerEnabled]
  -[CSAudioInjectionHearstEngine setUuid:]
  -[CSAudioInjectionHearstEngine setCircularBuffer:]
  -[CSAudioInjectionHearstEngine circularBuffer]
  -[CSAudioInjectionHearstEngine initWithStreamHandleId:]
  -[CSAudioInjectionHearstEngine setConnectedDevice:]
  -[CSAudioInjectionHearstEngine isAlwaysOnVoiceTriggerAvailable]
  -[CSAudioInjectionHearstEngine setAlwaysOnVoiceTriggerEnabled:]
  -[CSAudioInjectionHearstEngine startAudioStreamWithOption:]
  -[CSAudioInjectionHearstEngine stopAudioStream]
  -[CSAudioInjectionHearstEngine injectAudio:]
  -[CSAudioInjectionHearstEngine injectAudio:withScaleFactor:playbackStarted:completion:]
  -[CSAudioInjectionHearstEngine audioEngineDidStartRecord:audioStreamHandleId:successfully:error:]
  -[CSAudioInjectionHearstEngine audioEngineDidStopRecord:audioStreamHandleId:reason:]
  -[CSAudioInjectionHearstEngine audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:]
  -[CSAudioInjectionHearstEngine audioEngineAudioChunkForTvAvailable:audioChunk:]
  -[CSAudioInjectionHearstEngine alwaysOnVoiceTriggerEnabled]
  -[CSAudioInjectionHearstEngine attachDevice:]
  -[CSAudioInjectionHearstEngine lastForwardedSampleCount]
  -[CSAudioInjectionHearstEngine setLastForwardedSampleCount:]
  -[CSAudioInjectionHearstEngine connectedDevice]
  -[CSAudioInjectionHearstEngine isForwarding]
  -[CSAudioInjectionHearstEngine setIsForwarding:]
  -[CSAudioInjectionHearstEngine lastDetectedVoiceTriggerBeginSampleCount]
  -[CSAudioInjectionHearstEngine setLastDetectedVoiceTriggerBeginSampleCount:]


CSAudioZeroCounter : NSObject
  // instance methods
  -[CSAudioZeroCounter .cxx_destruct]
  -[CSAudioZeroCounter initWithToken:sampleRate:numChannels:]
  -[CSAudioZeroCounter resetWithSampleRate:]
  -[CSAudioZeroCounter getZeroStatisticsFromBuffer:entireSamples:]
  -[CSAudioZeroCounter stopReportZeroStatistics]


CSVoiceTriggerEnabledPolicyDarwin : CSPolicy
  // instance methods
  -[CSVoiceTriggerEnabledPolicyDarwin init]
  -[CSVoiceTriggerEnabledPolicyDarwin _subscribeEventMonitors]
  -[CSVoiceTriggerEnabledPolicyDarwin _addVoiceTriggerEnabledConditions]


CSAudioDeviceInfo : NSObject <NSCopying, NSSecureCoding>
 @property  CSAudioRecordDeviceInfo *recordDeviceInfo
 @property  NSString *playbackRoute
 @property  NSArray *playbackDeviceTypeList

  // class methods
  +[CSAudioDeviceInfo supportsSecureCoding]

  // instance methods
  -[CSAudioDeviceInfo xpcObject]
  -[CSAudioDeviceInfo initWithCoder:]
  -[CSAudioDeviceInfo initWithXPCObject:]
  -[CSAudioDeviceInfo .cxx_destruct]
  -[CSAudioDeviceInfo playbackRoute]
  -[CSAudioDeviceInfo recordDeviceInfo]
  -[CSAudioDeviceInfo copyWithZone:]
  -[CSAudioDeviceInfo encodeWithCoder:]
  -[CSAudioDeviceInfo initWithRecordDeviceInfo:playbackRoute:playbackDeviceTypeList:]
  -[CSAudioDeviceInfo playbackDeviceTypeList]


CSSpeakerRecognitionProxy : NSObject <CSSSRXPCClientDelegate>
 @property  CSSSRXPCClient *ssrXPCClient
 @property  <CSSpeakerRecognitionProxyProtocol> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSpeakerRecognitionProxy .cxx_destruct]
  -[CSSpeakerRecognitionProxy initWithDelegate:]
  -[CSSpeakerRecognitionProxy delegate]
  -[CSSpeakerRecognitionProxy dealloc]
  -[CSSpeakerRecognitionProxy didReceiveSpeakerRecognitionScoreCard:]
  -[CSSpeakerRecognitionProxy didFinishSpeakerRecognition:]
  -[CSSpeakerRecognitionProxy startXPCConnection]
  -[CSSpeakerRecognitionProxy invalidateXPCConnection]
  -[CSSpeakerRecognitionProxy ssrXPCClient]
  -[CSSpeakerRecognitionProxy setSsrXPCClient:]


CSVoiceTriggerXPCService : NSObject <CSVoiceTriggerXPCClientDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSVoiceTriggerXPCClient *xpcClient
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSVoiceTriggerXPCService sharedService]

  // instance methods
  -[CSVoiceTriggerXPCService setXpcClient:]
  -[CSVoiceTriggerXPCService notifyVoiceTriggeredSiriSessionCancelled]
  -[CSVoiceTriggerXPCService enableVoiceTrigger:withAssertion:]
  -[CSVoiceTriggerXPCService .cxx_destruct]
  -[CSVoiceTriggerXPCService setRaiseToSpeakBypassing:timeout:]
  -[CSVoiceTriggerXPCService xpcClient]
  -[CSVoiceTriggerXPCService init]
  -[CSVoiceTriggerXPCService setQueue:]
  -[CSVoiceTriggerXPCService _teardownXPCClientIfNeeded]
  -[CSVoiceTriggerXPCService queue]
  -[CSVoiceTriggerXPCService setPhraseSpotterBypassing:timeout:]
  -[CSVoiceTriggerXPCService _createXPCClientConnectionIfNeeded:]
  -[CSVoiceTriggerXPCService enableVoiceTrigger:withAssertion:xpcClient:]
  -[CSVoiceTriggerXPCService setPhraseSpotterBypassing:timeout:xpcClient:]
  -[CSVoiceTriggerXPCService setRaiseToSpeakBypassing:timeout:xpcClient:]
  -[CSVoiceTriggerXPCService notifyVoiceTriggeredSiriSessionCancelledWithXpcClient:]
  -[CSVoiceTriggerXPCService voiceTriggerXPCClient:didDisconnect:]
  -[CSVoiceTriggerXPCService fetchVoiceTriggerDailyStats]


CSVoiceTriggerAssetDownloadMonitor : CSEventMonitor
  // class methods
  +[CSVoiceTriggerAssetDownloadMonitor sharedInstance]

  // instance methods
  -[CSVoiceTriggerAssetDownloadMonitor _stopMonitoring]
  -[CSVoiceTriggerAssetDownloadMonitor _startMonitoringWithQueue:]
  -[CSVoiceTriggerAssetDownloadMonitor _notificationKey]
  -[CSVoiceTriggerAssetDownloadMonitor init]
  -[CSVoiceTriggerAssetDownloadMonitor _didInstalledNewVoiceTriggerAsset]
  -[CSVoiceTriggerAssetDownloadMonitor _notifyObserver:]


CSAudioPreprocessor : NSObject <CSVoiceTriggerAwareZeroFilterDelegate, CSBeepCancellerDelegate>
 @property  float sampleRate
 @property  CSAudioSampleRateConverter *upsampler
 @property  CSVoiceTriggerAwareZeroFilter *zeroFilter
 @property  CSBeepCanceller *beepCanceller
 @property  CSAudioZeroCounter *zeroCounter
 @property  int numChannels
 @property  <CSAudioPreprocessorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioPreprocessor sampleRate]
  -[CSAudioPreprocessor .cxx_destruct]
  -[CSAudioPreprocessor setDelegate:]
  -[CSAudioPreprocessor flush]
  -[CSAudioPreprocessor delegate]
  -[CSAudioPreprocessor setSampleRate:]
  -[CSAudioPreprocessor setZeroFilter:]
  -[CSAudioPreprocessor zeroFilter]
  -[CSAudioPreprocessor setNumChannels:]
  -[CSAudioPreprocessor resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:]
  -[CSAudioPreprocessor _isNarrowBand:]
  -[CSAudioPreprocessor upsampler]
  -[CSAudioPreprocessor setUpsampler:]
  -[CSAudioPreprocessor beepCanceller]
  -[CSAudioPreprocessor _reportMetrics]
  -[CSAudioPreprocessor _fetchCurrentMetrics]
  -[CSAudioPreprocessor zeroFilter:zeroFilteredBufferAvailable:atHostTime:]
  -[CSAudioPreprocessor beepCancellerDidCancelSamples:buffer:timestamp:]
  -[CSAudioPreprocessor initWithSampleRate:withNumberOfChannels:]
  -[CSAudioPreprocessor processBuffer:atTime:arrivalTimestampToAudioRecorder:]
  -[CSAudioPreprocessor willBeepWithRecordRoute:playbackRoute:]
  -[CSAudioPreprocessor reportMetricsForSiriRequestWithUUID:]
  -[CSAudioPreprocessor setBeepCanceller:]
  -[CSAudioPreprocessor zeroCounter]
  -[CSAudioPreprocessor setZeroCounter:]
  -[CSAudioPreprocessor numChannels]


CSOtherAppRecordingStateMonitor : CSEventMonitor
  // class methods
  +[CSOtherAppRecordingStateMonitor sharedInstance]

  // instance methods
  -[CSOtherAppRecordingStateMonitor _stopMonitoring]
  -[CSOtherAppRecordingStateMonitor _startObservingSystemControllerLifecycle]
  -[CSOtherAppRecordingStateMonitor _startMonitoringWithQueue:]
  -[CSOtherAppRecordingStateMonitor init]
  -[CSOtherAppRecordingStateMonitor _systemControllerDied:]
  -[CSOtherAppRecordingStateMonitor _startObservingOtherAppRecordingState]
  -[CSOtherAppRecordingStateMonitor isOtherAppRecording]
  -[CSOtherAppRecordingStateMonitor handleOtherAppRecordingStateChange:]


CSBenchmarkService : NSObject
  // class methods
  +[CSBenchmarkService createBenchamrkXPCConnection]
  +[CSBenchmarkService pingpong:completion:]
  +[CSBenchmarkService runLstmPhsModelWithConfig:withUrl:completion:]
  +[CSBenchmarkService runVTSecondPassModelWithConfig:locale:withUrl:completion:]
  +[CSBenchmarkService runOSDAnalyzerWithConfig:withUrl:completion:]


CSAssetDownloadingOption : NSObject
 @property  BOOL allowVoiceTriggerAssetDownloading
 @property  BOOL allowEndpointAssetDownloading
 @property  BOOL allowLanguageDetectorAssetDownloading
 @property  BOOL allowAdBlockerAssetDownloading
 @property  BOOL allowSpeakerRecognitionAssetDownloading
 @property  BOOL allowVoiceTriggerAccessoryAssetDownloading

  // instance methods
  -[CSAssetDownloadingOption setAllowVoiceTriggerAssetDownloading:]
  -[CSAssetDownloadingOption setAllowVoiceTriggerAccessoryAssetDownloading:]
  -[CSAssetDownloadingOption setAllowEndpointAssetDownloading:]
  -[CSAssetDownloadingOption allowLanguageDetectorAssetDownloading]
  -[CSAssetDownloadingOption allowVoiceTriggerAccessoryAssetDownloading]
  -[CSAssetDownloadingOption init]
  -[CSAssetDownloadingOption setAllowAdBlockerAssetDownloading:]
  -[CSAssetDownloadingOption allowVoiceTriggerAssetDownloading]
  -[CSAssetDownloadingOption setAllowSpeakerRecognitionAssetDownloading:]
  -[CSAssetDownloadingOption allowAdBlockerAssetDownloading]
  -[CSAssetDownloadingOption setAllowLanguageDetectorAssetDownloading:]
  -[CSAssetDownloadingOption allowEndpointAssetDownloading]
  -[CSAssetDownloadingOption allowSpeakerRecognitionAssetDownloading]


CSBluetoothManager : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers
 @property  ^{BTSessionImpl=} bluetoothSession
 @property  BOOL isAttachingBluetoothSession
 @property  ^{BTLocalDeviceImpl=} localDevice
 @property  NSArray *pairedDeviceAddresses
 @property  NSArray *connectedDeviceAddresses
 @property  NSObject<OS_dispatch_group> *bluetoothSessionSetupGroup

  // class methods
  +[CSBluetoothManager sharedInstance]

  // instance methods
  -[CSBluetoothManager localDevice]
  -[CSBluetoothManager _tearDownLocalDevice]
  -[CSBluetoothManager pairedDeviceAddresses]
  -[CSBluetoothManager _getWirelessSplitterInfoFromLocalDevice:]
  -[CSBluetoothManager setIsAttachingBluetoothSession:]
  -[CSBluetoothManager localDevice:event:result:]
  -[CSBluetoothManager getWirelessSplitterInfoWithCompletion:]
  -[CSBluetoothManager _sessionAttached:result:]
  -[CSBluetoothManager .cxx_destruct]
  -[CSBluetoothManager setConnectedDeviceAddresses:]
  -[CSBluetoothManager setPairedDeviceAddresses:]
  -[CSBluetoothManager _setUpLocalDevice]
  -[CSBluetoothManager _sessionTerminated:]
  -[CSBluetoothManager setObservers:]
  -[CSBluetoothManager init]
  -[CSBluetoothManager setQueue:]
  -[CSBluetoothManager setBluetoothSessionSetupGroup:]
  -[CSBluetoothManager isAttachingBluetoothSession]
  -[CSBluetoothManager getBTLocalDeviceWithCompletion:]
  -[CSBluetoothManager _detachBluetoothSession]
  -[CSBluetoothManager bluetoothSession]
  -[CSBluetoothManager connectedDeviceAddresses]
  -[CSBluetoothManager _attachBluetoothSession]
  -[CSBluetoothManager queue]
  -[CSBluetoothManager observers]
  -[CSBluetoothManager bluetoothSessionSetupGroup]
  -[CSBluetoothManager setLocalDevice:]
  -[CSBluetoothManager device:serviceMask:serviceEventType:serviceSpecificEvent:result:]
  -[CSBluetoothManager setBluetoothSession:]
  -[CSBluetoothManager _sessionDetached:]


CSRemoraSecondPassAudioStreamHoldingContext : NSObject
 @property  CSAudioStreamHolding *audioStreamHolding
 @property  CSAudioProvider *audioProvider

  // instance methods
  -[CSRemoraSecondPassAudioStreamHoldingContext .cxx_destruct]
  -[CSRemoraSecondPassAudioStreamHoldingContext setAudioProvider:]
  -[CSRemoraSecondPassAudioStreamHoldingContext audioProvider]
  -[CSRemoraSecondPassAudioStreamHoldingContext audioStreamHolding]
  -[CSRemoraSecondPassAudioStreamHoldingContext setAudioStreamHolding:]


CSRemoraSecondPassRequest : NSObject
 @property  NSString *firstPassDeviceID
 @property  CSVoiceTriggerSecondPass *voiceTriggerSecondPass
 @property  BOOL isSecondPassRunning
 @property  CSAudioStreamHolding *audioStreamHolding
 @property  CSAudioProvider *audioProvider
 @property  CSAsset *currentAsset
 @property  unsigned long timestamp
 @property  BOOL isCancelled
 @property  float goodnessScore
 @property  double firstPassTriggerEndTime

  // instance methods
  -[CSRemoraSecondPassRequest setVoiceTriggerSecondPass:]
  -[CSRemoraSecondPassRequest initWithDeviceID:]
  -[CSRemoraSecondPassRequest voiceTriggerSecondPass]
  -[CSRemoraSecondPassRequest setCurrentAsset:]
  -[CSRemoraSecondPassRequest .cxx_destruct]
  -[CSRemoraSecondPassRequest setIsSecondPassRunning:]
  -[CSRemoraSecondPassRequest setGoodnessScore:]
  -[CSRemoraSecondPassRequest isCancelled]
  -[CSRemoraSecondPassRequest setAsset:]
  -[CSRemoraSecondPassRequest setIsCancelled:]
  -[CSRemoraSecondPassRequest reset]
  -[CSRemoraSecondPassRequest setAudioProvider:]
  -[CSRemoraSecondPassRequest audioProvider]
  -[CSRemoraSecondPassRequest goodnessScore]
  -[CSRemoraSecondPassRequest isSecondPassRunning]
  -[CSRemoraSecondPassRequest currentAsset]
  -[CSRemoraSecondPassRequest timestamp]
  -[CSRemoraSecondPassRequest start]
  -[CSRemoraSecondPassRequest dealloc]
  -[CSRemoraSecondPassRequest cancelRequest]
  -[CSRemoraSecondPassRequest setTimestamp:]
  -[CSRemoraSecondPassRequest audioStreamHolding]
  -[CSRemoraSecondPassRequest setAudioStreamHolding:]
  -[CSRemoraSecondPassRequest _secondPassStateQueue]
  -[CSRemoraSecondPassRequest _secondPassWorkQueue]
  -[CSRemoraSecondPassRequest cancelAudioStreamHold]
  -[CSRemoraSecondPassRequest holdAudioStreamWithTimeout:]
  -[CSRemoraSecondPassRequest firstPassDeviceID]
  -[CSRemoraSecondPassRequest setFirstPassDeviceID:]
  -[CSRemoraSecondPassRequest firstPassTriggerEndTime]
  -[CSRemoraSecondPassRequest setFirstPassTriggerEndTime:]


CSVoiceTriggerFirstPassRemora : NSObject <CSActivationEventNotificationHandlerDelegate, CSAccessorySiriClientBehaviorMonitorDelegate, CSSecondPassProgressProviding>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableDictionary *remoraSecondPassRequests
 @property  NSMutableDictionary *accessoryFirstPassGoodnessScores
 @property  CSAsset *currentAsset
 @property  NSMutableDictionary *triggeredAudioStreamHoldingByAccessoryId
 @property  CSAudioProvider *triggeredAudioProvider
 @property  unsigned long secondChanceHotTillMachTime
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  <CSSecondPassProgressDelegate> *secondPassProgressDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerFirstPassRemora _reset]
  -[CSVoiceTriggerFirstPassRemora setCurrentAsset:]
  -[CSVoiceTriggerFirstPassRemora .cxx_destruct]
  -[CSVoiceTriggerFirstPassRemora secondPassProgressDelegate]
  -[CSVoiceTriggerFirstPassRemora setDelegate:]
  -[CSVoiceTriggerFirstPassRemora setQueue:]
  -[CSVoiceTriggerFirstPassRemora initWithQueue:]
  -[CSVoiceTriggerFirstPassRemora reset]
  -[CSVoiceTriggerFirstPassRemora pendingSecondPassTriggerWasClearedForClient:deviceId:]
  -[CSVoiceTriggerFirstPassRemora setSecondPassProgressDelegate:]
  -[CSVoiceTriggerFirstPassRemora delegate]
  -[CSVoiceTriggerFirstPassRemora currentAsset]
  -[CSVoiceTriggerFirstPassRemora queue]
  -[CSVoiceTriggerFirstPassRemora start]
  -[CSVoiceTriggerFirstPassRemora cancelSecondPassRunning]
  -[CSVoiceTriggerFirstPassRemora setSecondChanceHotTillMachTime:]
  -[CSVoiceTriggerFirstPassRemora activationEventNotificationHandler:event:completion:]
  -[CSVoiceTriggerFirstPassRemora secondChanceHotTillMachTime]
  -[CSVoiceTriggerFirstPassRemora _setDeviceIds:]
  -[CSVoiceTriggerFirstPassRemora accessoryFirstPassGoodnessScores]
  -[CSVoiceTriggerFirstPassRemora _handleRemoraTriggerEvent:secondPassRequest:completion:]
  -[CSVoiceTriggerFirstPassRemora _createSecondPassRequestIfNecessaryForActivationEvent:completion:]
  -[CSVoiceTriggerFirstPassRemora _cancelAudioStreamHoldingForAccessoryWithId:]
  -[CSVoiceTriggerFirstPassRemora _requestStartAudioStreamProviderWithContext:secondPassRequest:startStreamOption:completion:]
  -[CSVoiceTriggerFirstPassRemora _setIsSecondPassing:forDeviceId:]
  -[CSVoiceTriggerFirstPassRemora _handleSecondPassResult:secondPassRequest:voiceTriggerInfo:deviceId:secondChanceCandidate:error:completion:]
  -[CSVoiceTriggerFirstPassRemora triggeredAudioStreamHoldingByAccessoryId]
  -[CSVoiceTriggerFirstPassRemora accessorySiriClientBehaviorMonitor:willStartStreamWithContext:option:forAccessory:]
  -[CSVoiceTriggerFirstPassRemora accessorySiriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:forAccessory:]
  -[CSVoiceTriggerFirstPassRemora accessorySiriClientBehaviorMonitor:willStopStream:reason:forAccessory:]
  -[CSVoiceTriggerFirstPassRemora accessorySiriClientBehaviorMonitor:didStopStream:reason:withEventUUID:forAccessory:]
  -[CSVoiceTriggerFirstPassRemora setConnectedDeviceIds:]
  -[CSVoiceTriggerFirstPassRemora _cancelAllAudioStreamHoldings]
  -[CSVoiceTriggerFirstPassRemora remoraSecondPassRequests]
  -[CSVoiceTriggerFirstPassRemora setRemoraSecondPassRequests:]
  -[CSVoiceTriggerFirstPassRemora setAccessoryFirstPassGoodnessScores:]
  -[CSVoiceTriggerFirstPassRemora setTriggeredAudioStreamHoldingByAccessoryId:]
  -[CSVoiceTriggerFirstPassRemora triggeredAudioProvider]
  -[CSVoiceTriggerFirstPassRemora setTriggeredAudioProvider:]


CSHostLauncherDarwin : NSObject
  // class methods
  +[CSHostLauncherDarwin sharedInstance]
  +[CSHostLauncherDarwin propertyDictForDarwin]

  // instance methods
  -[CSHostLauncherDarwin .cxx_destruct]
  -[CSHostLauncherDarwin init]
  -[CSHostLauncherDarwin dealloc]
  -[CSHostLauncherDarwin wakeHostForVoiceTrigger]


CSSiriAssertionMonitor : CSEventMonitor <CSXPCConnectionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSSiriAssertionMonitor sharedInstance]

  // instance methods
  -[CSSiriAssertionMonitor _stopMonitoring]
  -[CSSiriAssertionMonitor .cxx_destruct]
  -[CSSiriAssertionMonitor _startMonitoringWithQueue:]
  -[CSSiriAssertionMonitor init]
  -[CSSiriAssertionMonitor isEnabled]
  -[CSSiriAssertionMonitor dealloc]
  -[CSSiriAssertionMonitor _notifyObserver:]
  -[CSSiriAssertionMonitor enableAssertionReceived]
  -[CSSiriAssertionMonitor disableAssertionReceived]


CSAccessorySiriClientBehaviorMonitor : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers

  // class methods
  +[CSAccessorySiriClientBehaviorMonitor sharedInstance]

  // instance methods
  -[CSAccessorySiriClientBehaviorMonitor unregisterObserver:]
  -[CSAccessorySiriClientBehaviorMonitor registerObserver:]
  -[CSAccessorySiriClientBehaviorMonitor .cxx_destruct]
  -[CSAccessorySiriClientBehaviorMonitor setObservers:]
  -[CSAccessorySiriClientBehaviorMonitor init]
  -[CSAccessorySiriClientBehaviorMonitor setQueue:]
  -[CSAccessorySiriClientBehaviorMonitor queue]
  -[CSAccessorySiriClientBehaviorMonitor _init]
  -[CSAccessorySiriClientBehaviorMonitor observers]
  -[CSAccessorySiriClientBehaviorMonitor notifyWillStartStreamWithContext:option:forAccessory:]
  -[CSAccessorySiriClientBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:withEventUUID:forAccessory:]
  -[CSAccessorySiriClientBehaviorMonitor notifyWillStopStream:reason:forAccessory:]
  -[CSAccessorySiriClientBehaviorMonitor notifyDidStopStream:reason:withEventUUID:forAccessory:]


CSSpeakerRecognitionAssetDownloadMonitor : CSEventMonitor <CSTrialAssetDownloadMonitorDelegate>
 @property  CSTrialAssetDownloadMonitor *trialAssetMonitor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSSpeakerRecognitionAssetDownloadMonitor sharedInstance]

  // instance methods
  -[CSSpeakerRecognitionAssetDownloadMonitor _stopMonitoring]
  -[CSSpeakerRecognitionAssetDownloadMonitor .cxx_destruct]
  -[CSSpeakerRecognitionAssetDownloadMonitor _startMonitoringWithQueue:]
  -[CSSpeakerRecognitionAssetDownloadMonitor _notificationKey]
  -[CSSpeakerRecognitionAssetDownloadMonitor init]
  -[CSSpeakerRecognitionAssetDownloadMonitor trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
  -[CSSpeakerRecognitionAssetDownloadMonitor _notifyObserver:]
  -[CSSpeakerRecognitionAssetDownloadMonitor _didInstalledNewAsset]
  -[CSSpeakerRecognitionAssetDownloadMonitor trialAssetMonitor]
  -[CSSpeakerRecognitionAssetDownloadMonitor setTrialAssetMonitor:]


CSPowerAssertionMac : NSObject
  // instance methods
  -[CSPowerAssertionMac initWithTimeout:]
  -[CSPowerAssertionMac init]
  -[CSPowerAssertionMac invalidate]


CSAudioFileReader : NSObject
 @property  <CSAudioFileReaderDelegate> *delegate

  // instance methods
  -[CSAudioFileReader .cxx_destruct]
  -[CSAudioFileReader setDelegate:]
  -[CSAudioFileReader delegate]
  -[CSAudioFileReader startRecording]
  -[CSAudioFileReader close]
  -[CSAudioFileReader dealloc]
  -[CSAudioFileReader stopRecording]
  -[CSAudioFileReader setRecordBufferDuration:]
  -[CSAudioFileReader initWithURL:]
  -[CSAudioFileReader _readAudioBufferAndFeed]
  -[CSAudioFileReader prepareRecording:]
  -[CSAudioFileReader readSamplesFromChannelIdx:]


CSContinuousVoiceTrigger : NSObject <CSKeywordAnalyzerNDAPIScoreDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAsset *currentAsset
 @property  CSKeywordAnalyzerNDAPI *keywordAnalyzer
 @property  float keywordThreshold
 @property  long long mode
 @property  unsigned long analyzedSampleCount
 @property  unsigned long triggerEndSampleCount
 @property  unsigned long twoShotDecisionWaitSamples
 @property  float twoShotThreshold
 @property  unsigned long activeChannel
 @property  float lastScore
 @property  CSAudioRecordContext *audioRecordContext
 @property  <CSContinuousVoiceTriggerDelegate> *delegate
 @property  CSAudioTimeConverter *audioTimeConverter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSContinuousVoiceTrigger setActiveChannel:]
  -[CSContinuousVoiceTrigger keywordAnalyzerNDAPI:hasResultAvailable:forChannel:]
  -[CSContinuousVoiceTrigger setAudioRecordContext:]
  -[CSContinuousVoiceTrigger audioRecordContext]
  -[CSContinuousVoiceTrigger lastScore]
  -[CSContinuousVoiceTrigger keywordThreshold]
  -[CSContinuousVoiceTrigger _reset]
  -[CSContinuousVoiceTrigger setKeywordAnalyzer:]
  -[CSContinuousVoiceTrigger startDetectTwoShot:]
  -[CSContinuousVoiceTrigger setCurrentAsset:]
  -[CSContinuousVoiceTrigger .cxx_destruct]
  -[CSContinuousVoiceTrigger setDelegate:]
  -[CSContinuousVoiceTrigger setAsset:]
  -[CSContinuousVoiceTrigger setTwoShotThreshold:]
  -[CSContinuousVoiceTrigger setKeywordThreshold:]
  -[CSContinuousVoiceTrigger twoShotDecisionWaitSamples]
  -[CSContinuousVoiceTrigger init]
  -[CSContinuousVoiceTrigger setQueue:]
  -[CSContinuousVoiceTrigger keywordAnalyzer]
  -[CSContinuousVoiceTrigger setAnalyzedSampleCount:]
  -[CSContinuousVoiceTrigger activeChannel]
  -[CSContinuousVoiceTrigger setLastScore:]
  -[CSContinuousVoiceTrigger setAudioTimeConverter:]
  -[CSContinuousVoiceTrigger analyzedSampleCount]
  -[CSContinuousVoiceTrigger audioTimeConverter]
  -[CSContinuousVoiceTrigger resetWithAudioRecordContext:]
  -[CSContinuousVoiceTrigger delegate]
  -[CSContinuousVoiceTrigger currentAsset]
  -[CSContinuousVoiceTrigger queue]
  -[CSContinuousVoiceTrigger start]
  -[CSContinuousVoiceTrigger setTwoShotDecisionWaitSamples:]
  -[CSContinuousVoiceTrigger setTriggerEndSampleCount:]
  -[CSContinuousVoiceTrigger setMode:]
  -[CSContinuousVoiceTrigger processAudioSamples:]
  -[CSContinuousVoiceTrigger twoShotThreshold]
  -[CSContinuousVoiceTrigger triggerEndSampleCount]
  -[CSContinuousVoiceTrigger mode]
  -[CSContinuousVoiceTrigger _setAsset:]
  -[CSContinuousVoiceTrigger _shotAnalyzerNDAPI:hasResultAvailable:forChannel:]
  -[CSContinuousVoiceTrigger _keywordAnalyzerNDAPI:hasResultAvailable:forChannel:]


CSAdBlockerAssetDownloadMonitor : CSEventMonitor <CSTrialAssetDownloadMonitorDelegate>
 @property  CSTrialAssetDownloadMonitor *monitor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAdBlockerAssetDownloadMonitor sharedInstance]

  // instance methods
  -[CSAdBlockerAssetDownloadMonitor _stopMonitoring]
  -[CSAdBlockerAssetDownloadMonitor setMonitor:]
  -[CSAdBlockerAssetDownloadMonitor monitor]
  -[CSAdBlockerAssetDownloadMonitor .cxx_destruct]
  -[CSAdBlockerAssetDownloadMonitor _startMonitoringWithQueue:]
  -[CSAdBlockerAssetDownloadMonitor _notificationKey]
  -[CSAdBlockerAssetDownloadMonitor init]
  -[CSAdBlockerAssetDownloadMonitor trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
  -[CSAdBlockerAssetDownloadMonitor _notifyObserver:]
  -[CSAdBlockerAssetDownloadMonitor _didInstalledNewAdBlockerAsset]


CSHearstSecondPassRequest : NSObject
 @property  NSString *firstPassDeviceID
 @property  CSVoiceTriggerSecondPass *voiceTriggerSecondPass
 @property  BOOL isSecondPassRunning
 @property  float remoteMicVADScore
 @property  CSAudioStreamHolding *audioStreamHolding
 @property  CSAudioProvider *audioProvider
 @property  CSSpeechManager *speechManager

  // instance methods
  -[CSHearstSecondPassRequest setVoiceTriggerSecondPass:]
  -[CSHearstSecondPassRequest initWithDeviceID:]
  -[CSHearstSecondPassRequest speechManager]
  -[CSHearstSecondPassRequest voiceTriggerSecondPass]
  -[CSHearstSecondPassRequest .cxx_destruct]
  -[CSHearstSecondPassRequest setIsSecondPassRunning:]
  -[CSHearstSecondPassRequest setAsset:]
  -[CSHearstSecondPassRequest setSpeechManager:]
  -[CSHearstSecondPassRequest reset]
  -[CSHearstSecondPassRequest setAudioProvider:]
  -[CSHearstSecondPassRequest audioProvider]
  -[CSHearstSecondPassRequest isSecondPassRunning]
  -[CSHearstSecondPassRequest start]
  -[CSHearstSecondPassRequest dealloc]
  -[CSHearstSecondPassRequest audioStreamHolding]
  -[CSHearstSecondPassRequest setAudioStreamHolding:]
  -[CSHearstSecondPassRequest cancelAudioStreamHold]
  -[CSHearstSecondPassRequest holdAudioStreamWithTimeout:]
  -[CSHearstSecondPassRequest firstPassDeviceID]
  -[CSHearstSecondPassRequest setFirstPassDeviceID:]
  -[CSHearstSecondPassRequest initWithDeviceID:speechManager:]
  -[CSHearstSecondPassRequest remoteMicVADScore]
  -[CSHearstSecondPassRequest setRemoteMicVADScore:]


CSVoiceTriggerFirstPassHearst : NSObject <CSActivationEventNotificationHandlerDelegate, CSSiriClientBehaviorMonitorDelegate, CSPhoneCallStateMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableDictionary *hearstSecondPassRequests
 @property  CSAsset *currentAsset
 @property  float remoteMicVADThreshold
 @property  float remoteMicVADMyriadThreshold
 @property  float minimumPhraseLengthForVADGating
 @property  CSAudioStreamHolding *triggeredAudioStreamHolding
 @property  CSAudioProvider *triggeredAudioProvider
 @property  unsigned long secondChanceHotTillMachTime
 @property  CSSpeechManager *speechManager
 @property  CSPhoneCallStateMonitor *phoneCallStateMonitor
 @property  unsigned long phoneCallState
 @property  CSSiriClientBehaviorMonitor *siriClientBehaviorMonitor
 @property  CSVoiceTriggerEnabledMonitor *voiceTriggerEnabledMonitor
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerFirstPassHearst phoneCallState]
  -[CSVoiceTriggerFirstPassHearst setPhoneCallState:]
  -[CSVoiceTriggerFirstPassHearst siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSVoiceTriggerFirstPassHearst speechManager]
  -[CSVoiceTriggerFirstPassHearst _reset]
  -[CSVoiceTriggerFirstPassHearst setCurrentAsset:]
  -[CSVoiceTriggerFirstPassHearst .cxx_destruct]
  -[CSVoiceTriggerFirstPassHearst siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSVoiceTriggerFirstPassHearst setDelegate:]
  -[CSVoiceTriggerFirstPassHearst siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSVoiceTriggerFirstPassHearst setAsset:]
  -[CSVoiceTriggerFirstPassHearst init]
  -[CSVoiceTriggerFirstPassHearst setQueue:]
  -[CSVoiceTriggerFirstPassHearst setSpeechManager:]
  -[CSVoiceTriggerFirstPassHearst reset]
  -[CSVoiceTriggerFirstPassHearst siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSVoiceTriggerFirstPassHearst delegate]
  -[CSVoiceTriggerFirstPassHearst CSPhoneCallStateMonitor:didRecievePhoneCallStateChange:]
  -[CSVoiceTriggerFirstPassHearst currentAsset]
  -[CSVoiceTriggerFirstPassHearst queue]
  -[CSVoiceTriggerFirstPassHearst start]
  -[CSVoiceTriggerFirstPassHearst setSecondChanceHotTillMachTime:]
  -[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]
  -[CSVoiceTriggerFirstPassHearst secondChanceHotTillMachTime]
  -[CSVoiceTriggerFirstPassHearst _setAsset:]
  -[CSVoiceTriggerFirstPassHearst _handleSecondPassResult:secondPassRequest:voiceTriggerInfo:deviceId:secondChanceCandidate:error:completion:]
  -[CSVoiceTriggerFirstPassHearst _cancelAllAudioStreamHoldings]
  -[CSVoiceTriggerFirstPassHearst triggeredAudioProvider]
  -[CSVoiceTriggerFirstPassHearst setTriggeredAudioProvider:]
  -[CSVoiceTriggerFirstPassHearst initWithSpeechManager:voiceTriggerEnabledMonitor:siriClientBehaviorMonitor:phoneCallStateMonitor:]
  -[CSVoiceTriggerFirstPassHearst _handleRemoteMicVoiceTriggerEvent:secondPassRequest:completion:]
  -[CSVoiceTriggerFirstPassHearst _handleRemoteMicVADEventWithSecondPassRequest:]
  -[CSVoiceTriggerFirstPassHearst _requestStartAudioStreamWitContext:secondPassRequest:startStreamOption:completion:]
  -[CSVoiceTriggerFirstPassHearst hearstSecondPassRequests]
  -[CSVoiceTriggerFirstPassHearst setHearstSecondPassRequests:]
  -[CSVoiceTriggerFirstPassHearst remoteMicVADThreshold]
  -[CSVoiceTriggerFirstPassHearst setRemoteMicVADThreshold:]
  -[CSVoiceTriggerFirstPassHearst remoteMicVADMyriadThreshold]
  -[CSVoiceTriggerFirstPassHearst setRemoteMicVADMyriadThreshold:]
  -[CSVoiceTriggerFirstPassHearst minimumPhraseLengthForVADGating]
  -[CSVoiceTriggerFirstPassHearst setMinimumPhraseLengthForVADGating:]
  -[CSVoiceTriggerFirstPassHearst triggeredAudioStreamHolding]
  -[CSVoiceTriggerFirstPassHearst setTriggeredAudioStreamHolding:]
  -[CSVoiceTriggerFirstPassHearst phoneCallStateMonitor]
  -[CSVoiceTriggerFirstPassHearst setPhoneCallStateMonitor:]
  -[CSVoiceTriggerFirstPassHearst siriClientBehaviorMonitor]
  -[CSVoiceTriggerFirstPassHearst setSiriClientBehaviorMonitor:]
  -[CSVoiceTriggerFirstPassHearst voiceTriggerEnabledMonitor]
  -[CSVoiceTriggerFirstPassHearst setVoiceTriggerEnabledMonitor:]


CSAudioRouteChangeMonitorImplWatch : CSAudioRouteChangeMonitor
  // instance methods
  -[CSAudioRouteChangeMonitorImplWatch _stopMonitoring]
  -[CSAudioRouteChangeMonitorImplWatch hearstConnected]
  -[CSAudioRouteChangeMonitorImplWatch getHearstConnected:]
  -[CSAudioRouteChangeMonitorImplWatch _notifyHearstConnectionState:]
  -[CSAudioRouteChangeMonitorImplWatch _fetchHearstConnectionState]
  -[CSAudioRouteChangeMonitorImplWatch .cxx_destruct]
  -[CSAudioRouteChangeMonitorImplWatch _startObservingSystemControllerLifecycle]
  -[CSAudioRouteChangeMonitorImplWatch _startMonitoringWithQueue:]
  -[CSAudioRouteChangeMonitorImplWatch init]
  -[CSAudioRouteChangeMonitorImplWatch _systemControllerDied:]
  -[CSAudioRouteChangeMonitorImplWatch getJarvisConnected:]
  -[CSAudioRouteChangeMonitorImplWatch _startObservingAudioRouteChange]
  -[CSAudioRouteChangeMonitorImplWatch jarvisConnected]
  -[CSAudioRouteChangeMonitorImplWatch activeAudioRouteDidChange:]


CSAudioSampleRateConverter : NSObject
  // class methods
  +[CSAudioSampleRateConverter upsampler]
  +[CSAudioSampleRateConverter downsampler]

  // instance methods
  -[CSAudioSampleRateConverter dealloc]
  -[CSAudioSampleRateConverter convertSampleRateOfBuffer:]
  -[CSAudioSampleRateConverter initWithInASBD:outASBD:]
  -[CSAudioSampleRateConverter _createSampleRateConverterWithInASBD:outASBD:]


CSLanguageDetectorAssetMonitor : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  int notifyToken
 @property  <CSLanguageDetectorAssetMonitorDelegate> *delegate

  // class methods
  +[CSLanguageDetectorAssetMonitor sharedInstance]

  // instance methods
  -[CSLanguageDetectorAssetMonitor notifyToken]
  -[CSLanguageDetectorAssetMonitor setNotifyToken:]
  -[CSLanguageDetectorAssetMonitor .cxx_destruct]
  -[CSLanguageDetectorAssetMonitor setDelegate:]
  -[CSLanguageDetectorAssetMonitor init]
  -[CSLanguageDetectorAssetMonitor setQueue:]
  -[CSLanguageDetectorAssetMonitor delegate]
  -[CSLanguageDetectorAssetMonitor queue]
  -[CSLanguageDetectorAssetMonitor _supportedLocale:]
  -[CSLanguageDetectorAssetMonitor startMonitor]
  -[CSLanguageDetectorAssetMonitor supportedLocale:]


CSSiriSpeechRecordingContext : NSObject
 @property  NSString *sessionUUID
 @property  BOOL wantsRecordedAudioBufferLogs

  // instance methods
  -[CSSiriSpeechRecordingContext .cxx_destruct]
  -[CSSiriSpeechRecordingContext sessionUUID]
  -[CSSiriSpeechRecordingContext resignCurrent]
  -[CSSiriSpeechRecordingContext dealloc]
  -[CSSiriSpeechRecordingContext becomeCurrent]
  -[CSSiriSpeechRecordingContext _finalizeAudioFileWriterWithCompletion:]
  -[CSSiriSpeechRecordingContext _removeRecordedAudio]
  -[CSSiriSpeechRecordingContext _didBecomeCurrent]
  -[CSSiriSpeechRecordingContext _didResignCurrent]
  -[CSSiriSpeechRecordingContext _initializeAudioFileWriterWithAudioStreamBasicDescription:]
  -[CSSiriSpeechRecordingContext _instrumentSiriCue:]
  -[CSSiriSpeechRecordingContext _createRequestLinkInfo:component:]
  -[CSSiriSpeechRecordingContext _donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:]
  -[CSSiriSpeechRecordingContext initWithSessionUUID:turnIdentifier:]
  -[CSSiriSpeechRecordingContext updateStartSpeechId:]
  -[CSSiriSpeechRecordingContext updateSelectedResultCandidateId:]
  -[CSSiriSpeechRecordingContext updateAccessToRecordedAudioForVoiceIdentificationTraining:forResultCandidateId:sharedUserId:]
  -[CSSiriSpeechRecordingContext getAudioRecordRouteAndDeviceIdentificationWithCompletion:]
  -[CSSiriSpeechRecordingContext acquireRecordedAudioWithHandler:]
  -[CSSiriSpeechRecordingContext updateAudioRecordContext:]
  -[CSSiriSpeechRecordingContext updateAudioRecordDeviceInfo:]
  -[CSSiriSpeechRecordingContext updateVoiceTriggerInfo:]
  -[CSSiriSpeechRecordingContext updateRecordingInfo:]
  -[CSSiriSpeechRecordingContext updateRecordingSettings:]
  -[CSSiriSpeechRecordingContext willPrepareAndStartRecordingWithAudioActivationInfo:]
  -[CSSiriSpeechRecordingContext didDetectTwoShotWithAudioActivationInfo:atTime:]
  -[CSSiriSpeechRecordingContext willStopRecordingAtHostTime:]
  -[CSSiriSpeechRecordingContext didStopRecordingWithError:]
  -[CSSiriSpeechRecordingContext relinquishAudioSessionAssertionsWithContext:]
  -[CSSiriSpeechRecordingContext relinquishAudioSessionAssertionsWithError:]
  -[CSSiriSpeechRecordingContext beginRecordingAudioWithAudioStreamBasicDescription:]
  -[CSSiriSpeechRecordingContext appendRecordedAudioBuffer:]
  -[CSSiriSpeechRecordingContext endRecordingAudio]
  -[CSSiriSpeechRecordingContext instrumentSiriCue:]
  -[CSSiriSpeechRecordingContext instrumentSiriCueForAlertType:]
  -[CSSiriSpeechRecordingContext instrumentStopRecordingForEndpointType:]
  -[CSSiriSpeechRecordingContext emitRequestLinkEventForMHUUID:]
  -[CSSiriSpeechRecordingContext wantsRecordedAudioBufferLogs]


CSSmartSiriVolumeClient : NSObject <CSSmartSiriVolumeServiceDelegate>
 @property  NSXPCConnection *ssvConnection
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSSmartSiriVolumeClientDelegate> *delegate

  // instance methods
  -[CSSmartSiriVolumeClient .cxx_destruct]
  -[CSSmartSiriVolumeClient setPermanentVolumeOffsetWithDirection:]
  -[CSSmartSiriVolumeClient setDelegate:]
  -[CSSmartSiriVolumeClient init]
  -[CSSmartSiriVolumeClient setQueue:]
  -[CSSmartSiriVolumeClient setSmartSiriVolumeDirection:]
  -[CSSmartSiriVolumeClient delegate]
  -[CSSmartSiriVolumeClient queue]
  -[CSSmartSiriVolumeClient dealloc]
  -[CSSmartSiriVolumeClient setSmartSiriVolumePercentage:]
  -[CSSmartSiriVolumeClient _getRemoteServiceProxyObject]
  -[CSSmartSiriVolumeClient _createClientConnection]
  -[CSSmartSiriVolumeClient didTTSVolumeChangeForReason:]
  -[CSSmartSiriVolumeClient ssvConnection]
  -[CSSmartSiriVolumeClient setSsvConnection:]
  -[CSSmartSiriVolumeClient getVolumeForTTSType:withContext:]


CSAudioInjectionProvider : CSAudioRecorder <CSAudioInjectionEngineDelegate>
 @property  NSHashTable *observers
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSUUID *uuid
 @property  NSMutableArray *connectedDevices
 @property  CSAudioInjectionDevice *builtInDevice
 @property  CSAudioInjectionDevice *bundleTvRemote
 @property  CSAudioInjectionEngine *builtInAudioInjectionEngine
 @property  NSMutableDictionary *audioInjectionEngines
 @property  unsigned long latestPluginStreamId
 @property  unsigned long activateStartTime
 @property  unsigned long activateEndTime
 @property  unsigned long deactivateStartTime
 @property  unsigned long deactivateEndTime
 @property  NSString *atvRemoteDeviceID
 @property  float didStartDelayInSeconds
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAudioInjectionProvider defaultInjectionProvider]
  +[CSAudioInjectionProvider createSharedAudioSession]

  // instance methods
  -[CSAudioInjectionProvider averagePowerForChannel:]
  -[CSAudioInjectionProvider unregisterObserver:]
  -[CSAudioInjectionProvider duckOthersOption]
  -[CSAudioInjectionProvider registerObserver:]
  -[CSAudioInjectionProvider setConnectedDevices:]
  -[CSAudioInjectionProvider setDuckOthersOption:]
  -[CSAudioInjectionProvider .cxx_destruct]
  -[CSAudioInjectionProvider stop]
  -[CSAudioInjectionProvider connectDevice:]
  -[CSAudioInjectionProvider disconnectDevice:]
  -[CSAudioInjectionProvider setObservers:]
  -[CSAudioInjectionProvider init]
  -[CSAudioInjectionProvider setQueue:]
  -[CSAudioInjectionProvider playbackRoute]
  -[CSAudioInjectionProvider enableMiniDucking:]
  -[CSAudioInjectionProvider peakPowerForChannel:]
  -[CSAudioInjectionProvider connectedDevices]
  -[CSAudioInjectionProvider deactivateAudioSession:error:]
  -[CSAudioInjectionProvider metrics]
  -[CSAudioInjectionProvider uuid]
  -[CSAudioInjectionProvider queue]
  -[CSAudioInjectionProvider observers]
  -[CSAudioInjectionProvider start]
  -[CSAudioInjectionProvider setAlertSoundFromURL:forType:]
  -[CSAudioInjectionProvider updateMeters]
  -[CSAudioInjectionProvider dealloc]
  -[CSAudioInjectionProvider setUuid:]
  -[CSAudioInjectionProvider alertStartTime]
  -[CSAudioInjectionProvider setMeteringEnabled:]
  -[CSAudioInjectionProvider audioEngineDidStartRecord:audioStreamHandleId:successfully:error:]
  -[CSAudioInjectionProvider audioEngineDidStopRecord:audioStreamHandleId:reason:]
  -[CSAudioInjectionProvider audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:]
  -[CSAudioInjectionProvider audioEngineAudioChunkForTvAvailable:audioChunk:]
  -[CSAudioInjectionProvider _createSpeechDetectionVADIfNeeded]
  -[CSAudioInjectionProvider _connectPluginDevice:]
  -[CSAudioInjectionProvider _tearDownSpeechDetectionVADIfNeeded]
  -[CSAudioInjectionProvider recordDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
  -[CSAudioInjectionProvider primaryInputDevice]
  -[CSAudioInjectionProvider willDestroy]
  -[CSAudioInjectionProvider setAudioServerCrashEventDelegate:]
  -[CSAudioInjectionProvider setAudioSessionEventDelegate:]
  -[CSAudioInjectionProvider setContext:completion:]
  -[CSAudioInjectionProvider setCurrentContext:streamHandleId:error:]
  -[CSAudioInjectionProvider prepareAudioStreamRecord:recordDeviceIndicator:error:]
  -[CSAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]
  -[CSAudioInjectionProvider stopAudioStreamWithRecordDeviceIndicator:error:]
  -[CSAudioInjectionProvider isRecordingWithRecordDeviceIndicator:]
  -[CSAudioInjectionProvider recordRouteWithRecordDeviceIndicator:]
  -[CSAudioInjectionProvider audioDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
  -[CSAudioInjectionProvider recordSettingsWithStreamHandleId:]
  -[CSAudioInjectionProvider recordingSampleRateWithStreamHandleId:]
  -[CSAudioInjectionProvider isNarrowBandWithStreamHandleId:]
  -[CSAudioInjectionProvider prewarmAudioSessionWithStreamHandleId:error:]
  -[CSAudioInjectionProvider activateAudioSessionWithReason:streamHandleId:error:]
  -[CSAudioInjectionProvider deactivateAudioSession:streamHandleId:error:]
  -[CSAudioInjectionProvider setRecordMode:streamHandleId:error:]
  -[CSAudioInjectionProvider playRecordStartingAlertAndResetEndpointerFromStream:]
  -[CSAudioInjectionProvider playAlertSoundForType:recordDevideIndicator:]
  -[CSAudioInjectionProvider isSessionCurrentlyActivated]
  -[CSAudioInjectionProvider voiceTriggerInfoWithRecordDeviceIndicator:]
  -[CSAudioInjectionProvider configureAlertBehavior:audioStreamHandleId:]
  -[CSAudioInjectionProvider didStartDelayInSeconds]
  -[CSAudioInjectionProvider setDidStartDelayInSeconds:]
  -[CSAudioInjectionProvider builtInDevice]
  -[CSAudioInjectionProvider setBuiltInDevice:]
  -[CSAudioInjectionProvider bundleTvRemote]
  -[CSAudioInjectionProvider setBundleTvRemote:]
  -[CSAudioInjectionProvider builtInAudioInjectionEngine]
  -[CSAudioInjectionProvider setBuiltInAudioInjectionEngine:]
  -[CSAudioInjectionProvider audioInjectionEngines]
  -[CSAudioInjectionProvider setAudioInjectionEngines:]
  -[CSAudioInjectionProvider latestPluginStreamId]
  -[CSAudioInjectionProvider setLatestPluginStreamId:]
  -[CSAudioInjectionProvider activateStartTime]
  -[CSAudioInjectionProvider setActivateStartTime:]
  -[CSAudioInjectionProvider activateEndTime]
  -[CSAudioInjectionProvider setActivateEndTime:]
  -[CSAudioInjectionProvider deactivateStartTime]
  -[CSAudioInjectionProvider setDeactivateStartTime:]
  -[CSAudioInjectionProvider deactivateEndTime]
  -[CSAudioInjectionProvider setDeactivateEndTime:]
  -[CSAudioInjectionProvider atvRemoteDeviceID]
  -[CSAudioInjectionProvider setAtvRemoteDeviceID:]


CSOpportuneSpeakListener : NSObject <CSAudioStreamProvidingDelegate, CSSPGEndpointAnalyzerDelegate>
 @property  CSAudioStream *audioStream
 @property  CSSPGEndpointAnalyzer *spgEndpointAnalyzer
 @property  int remoteVADSPGRatio
 @property  <CSAudioStreamProviding> *audioStreamProvider
 @property  <CSAudioSessionProviding> *audioSessionProvider
 @property  CSAudioRecordContext *latestContext
 @property  BOOL isMediaPlayingNow
 @property  NSMutableArray *remoteVADAlignBuffer
 @property  unsigned long remoteVADAlignCount
 @property  NSObject<OS_dispatch_queue> *alignBufferQueue
 @property  CSPlainAudioFileWriter *audioFileWriter
 @property  unsigned long runningSampleCount
 @property  CSAudioTimeConverter *audioTimeConverter
 @property  <CSOpportuneSpeakListenerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSOpportuneSpeakListener audioStreamProvider:didStopStreamUnexpectly:]
  -[CSOpportuneSpeakListener .cxx_destruct]
  -[CSOpportuneSpeakListener audioFileWriter]
  -[CSOpportuneSpeakListener setDelegate:]
  -[CSOpportuneSpeakListener init]
  -[CSOpportuneSpeakListener setAudioTimeConverter:]
  -[CSOpportuneSpeakListener audioTimeConverter]
  -[CSOpportuneSpeakListener delegate]
  -[CSOpportuneSpeakListener setAudioStream:]
  -[CSOpportuneSpeakListener audioStreamProvider:audioChunkForTVAvailable:]
  -[CSOpportuneSpeakListener setAudioFileWriter:]
  -[CSOpportuneSpeakListener audioStreamProvider:audioBufferAvailable:]
  -[CSOpportuneSpeakListener audioStream]
  -[CSOpportuneSpeakListener _resetAlignBuffer]
  -[CSOpportuneSpeakListener _startRequestWithCompletion:]
  -[CSOpportuneSpeakListener stopListenWithStateReset:completion:]
  -[CSOpportuneSpeakListener _addRemoteVADSignal:]
  -[CSOpportuneSpeakListener _shouldReportBoron]
  -[CSOpportuneSpeakListener _popRemoteVADSignal]
  -[CSOpportuneSpeakListener spgEndpointAnalyzer:hasSilenceScoreEstimate:clientProcessedAudioTimeMS:]
  -[CSOpportuneSpeakListener startListenWithOption:completion:]
  -[CSOpportuneSpeakListener stopListenWithCompletion:]
  -[CSOpportuneSpeakListener spgEndpointAnalyzer]
  -[CSOpportuneSpeakListener setSpgEndpointAnalyzer:]
  -[CSOpportuneSpeakListener remoteVADSPGRatio]
  -[CSOpportuneSpeakListener setRemoteVADSPGRatio:]
  -[CSOpportuneSpeakListener audioStreamProvider]
  -[CSOpportuneSpeakListener setAudioStreamProvider:]
  -[CSOpportuneSpeakListener audioSessionProvider]
  -[CSOpportuneSpeakListener setAudioSessionProvider:]
  -[CSOpportuneSpeakListener latestContext]
  -[CSOpportuneSpeakListener setLatestContext:]
  -[CSOpportuneSpeakListener isMediaPlayingNow]
  -[CSOpportuneSpeakListener setIsMediaPlayingNow:]
  -[CSOpportuneSpeakListener remoteVADAlignBuffer]
  -[CSOpportuneSpeakListener setRemoteVADAlignBuffer:]
  -[CSOpportuneSpeakListener remoteVADAlignCount]
  -[CSOpportuneSpeakListener setRemoteVADAlignCount:]
  -[CSOpportuneSpeakListener alignBufferQueue]
  -[CSOpportuneSpeakListener setAlignBufferQueue:]
  -[CSOpportuneSpeakListener runningSampleCount]
  -[CSOpportuneSpeakListener setRunningSampleCount:]


CSVoiceIdXPCClient : NSObject
 @property  NSObject<OS_xpc_object> *xpcConnection

  // instance methods
  -[CSVoiceIdXPCClient connect]
  -[CSVoiceIdXPCClient setXpcConnection:]
  -[CSVoiceIdXPCClient xpcConnection]
  -[CSVoiceIdXPCClient disconnect]
  -[CSVoiceIdXPCClient .cxx_destruct]
  -[CSVoiceIdXPCClient _handleListenerEvent:]
  -[CSVoiceIdXPCClient _handleListenerError:]
  -[CSVoiceIdXPCClient init]
  -[CSVoiceIdXPCClient _sendMessage:connection:completion:]
  -[CSVoiceIdXPCClient dealloc]
  -[CSVoiceIdXPCClient _decodeError:]
  -[CSVoiceIdXPCClient notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:]


CSVoiceTriggerFirstPassJarvis : NSObject <CSKeywordAnalyzerNDEAPIScoreDelegate, CSActivationEventNotificationHandlerDelegate, CSSPGEndpointAnalyzerDelegate, CSAudioStreamProvidingDelegate, CSSiriClientBehaviorMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAudioStream *audioStream
 @property  CSAudioProvider *audioProvider
 @property  CSAudioStreamHolding *audioStreamHolding
 @property  CSAsset *currentAsset
 @property  CSKeywordAnalyzerNDEAPI *keywordAnalyzerNDEAPI
 @property  BOOL hasReceivedNDEAPIResult
 @property  BOOL hasTriggerCandidate
 @property  unsigned long numProcessedSamples
 @property  unsigned long jarvisVoiceTriggerTimeout
 @property  unsigned long activeChannel
 @property  CSKeywordAnalyzerNDEAPIResult *jarvisTriggerResult
 @property  unsigned long earlyDetectFiredMachTime
 @property  long long latestTriggerMode
 @property  CSSPGEndpointAnalyzer *endpointAnalyzer
 @property  NSString *deviceId
 @property  CSVoiceTriggerRTModel *rtModel
 @property  CSPlainAudioFileWriter *audioFileWriter
 @property  CSVoiceTriggerSecondPass *voiceTriggerSecondPass
 @property  BOOL isSecondPassRunning
 @property  BOOL isSiriClientListening
 @property  unsigned long secondChanceHotTillMachTime
 @property  BOOL firstTimeAssetConfigured
 @property  NSMutableArray *assetConfigWaitingBuffer
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSVoiceTriggerFirstPassJarvis jarvisAudioLoggingFilePath]
  +[CSVoiceTriggerFirstPassJarvis jarvisAudioLogDirectory]
  +[CSVoiceTriggerFirstPassJarvis timeStampString]

  // instance methods
  -[CSVoiceTriggerFirstPassJarvis setActiveChannel:]
  -[CSVoiceTriggerFirstPassJarvis setDeviceId:]
  -[CSVoiceTriggerFirstPassJarvis siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSVoiceTriggerFirstPassJarvis firstTimeAssetConfigured]
  -[CSVoiceTriggerFirstPassJarvis setVoiceTriggerSecondPass:]
  -[CSVoiceTriggerFirstPassJarvis deviceId]
  -[CSVoiceTriggerFirstPassJarvis audioStreamProvider:didStopStreamUnexpectly:]
  -[CSVoiceTriggerFirstPassJarvis _reset]
  -[CSVoiceTriggerFirstPassJarvis voiceTriggerSecondPass]
  -[CSVoiceTriggerFirstPassJarvis setCurrentAsset:]
  -[CSVoiceTriggerFirstPassJarvis .cxx_destruct]
  -[CSVoiceTriggerFirstPassJarvis siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSVoiceTriggerFirstPassJarvis endpointAnalyzer]
  -[CSVoiceTriggerFirstPassJarvis setIsSecondPassRunning:]
  -[CSVoiceTriggerFirstPassJarvis audioFileWriter]
  -[CSVoiceTriggerFirstPassJarvis setDelegate:]
  -[CSVoiceTriggerFirstPassJarvis siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSVoiceTriggerFirstPassJarvis _handleAudioChunk:]
  -[CSVoiceTriggerFirstPassJarvis setAsset:]
  -[CSVoiceTriggerFirstPassJarvis init]
  -[CSVoiceTriggerFirstPassJarvis setQueue:]
  -[CSVoiceTriggerFirstPassJarvis setAssetConfigWaitingBuffer:]
  -[CSVoiceTriggerFirstPassJarvis activeChannel]
  -[CSVoiceTriggerFirstPassJarvis setFirstTimeAssetConfigured:]
  -[CSVoiceTriggerFirstPassJarvis reset]
  -[CSVoiceTriggerFirstPassJarvis siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSVoiceTriggerFirstPassJarvis rtModel]
  -[CSVoiceTriggerFirstPassJarvis assetConfigWaitingBuffer]
  -[CSVoiceTriggerFirstPassJarvis setIsSiriClientListening:]
  -[CSVoiceTriggerFirstPassJarvis setAudioProvider:]
  -[CSVoiceTriggerFirstPassJarvis audioProvider]
  -[CSVoiceTriggerFirstPassJarvis delegate]
  -[CSVoiceTriggerFirstPassJarvis isSecondPassRunning]
  -[CSVoiceTriggerFirstPassJarvis currentAsset]
  -[CSVoiceTriggerFirstPassJarvis queue]
  -[CSVoiceTriggerFirstPassJarvis start]
  -[CSVoiceTriggerFirstPassJarvis setAudioStream:]
  -[CSVoiceTriggerFirstPassJarvis audioStreamProvider:audioChunkForTVAvailable:]
  -[CSVoiceTriggerFirstPassJarvis setAudioFileWriter:]
  -[CSVoiceTriggerFirstPassJarvis setSecondChanceHotTillMachTime:]
  -[CSVoiceTriggerFirstPassJarvis isSiriClientListening]
  -[CSVoiceTriggerFirstPassJarvis activationEventNotificationHandler:event:completion:]
  -[CSVoiceTriggerFirstPassJarvis secondChanceHotTillMachTime]
  -[CSVoiceTriggerFirstPassJarvis audioStreamProvider:audioBufferAvailable:]
  -[CSVoiceTriggerFirstPassJarvis _setAsset:]
  -[CSVoiceTriggerFirstPassJarvis audioStream]
  -[CSVoiceTriggerFirstPassJarvis audioStreamHolding]
  -[CSVoiceTriggerFirstPassJarvis setAudioStreamHolding:]
  -[CSVoiceTriggerFirstPassJarvis spgEndpointAnalyzerDidDetectEndpoint:]
  -[CSVoiceTriggerFirstPassJarvis _clearTriggerCandidate]
  -[CSVoiceTriggerFirstPassJarvis _didStopAudioStream]
  -[CSVoiceTriggerFirstPassJarvis _notifyJarvisVoiceTriggerReject]
  -[CSVoiceTriggerFirstPassJarvis _reportJarvisVoiceTriggerFire]
  -[CSVoiceTriggerFirstPassJarvis _didDetectKeywordFromDeviceId:activationInfo:triggerHostTime:completion:]
  -[CSVoiceTriggerFirstPassJarvis _holdAudioStreamWithTimeout:]
  -[CSVoiceTriggerFirstPassJarvis _requestStartAudioStreamWitContext:startStreamOption:completion:]
  -[CSVoiceTriggerFirstPassJarvis _didStartAudioStream]
  -[CSVoiceTriggerFirstPassJarvis _handleJarvisVoiceTriggerFromDeviceId:activationInfo:triggerHostTime:completion:]
  -[CSVoiceTriggerFirstPassJarvis _cancelAudioStreamHold]
  -[CSVoiceTriggerFirstPassJarvis _createSecondPassIfNeeded]
  -[CSVoiceTriggerFirstPassJarvis _handleSecondPassResult:deviceId:voiceTriggerInfo:secondChanceCandidate:error:]
  -[CSVoiceTriggerFirstPassJarvis _teardownSecondPass]
  -[CSVoiceTriggerFirstPassJarvis keywordAnalyzerNDEAPI:hasResultAvailable:forChannel:]
  -[CSVoiceTriggerFirstPassJarvis keywordAnalyzerNDEAPI]
  -[CSVoiceTriggerFirstPassJarvis setKeywordAnalyzerNDEAPI:]
  -[CSVoiceTriggerFirstPassJarvis hasReceivedNDEAPIResult]
  -[CSVoiceTriggerFirstPassJarvis setHasReceivedNDEAPIResult:]
  -[CSVoiceTriggerFirstPassJarvis hasTriggerCandidate]
  -[CSVoiceTriggerFirstPassJarvis setHasTriggerCandidate:]
  -[CSVoiceTriggerFirstPassJarvis numProcessedSamples]
  -[CSVoiceTriggerFirstPassJarvis setNumProcessedSamples:]
  -[CSVoiceTriggerFirstPassJarvis jarvisVoiceTriggerTimeout]
  -[CSVoiceTriggerFirstPassJarvis setJarvisVoiceTriggerTimeout:]
  -[CSVoiceTriggerFirstPassJarvis jarvisTriggerResult]
  -[CSVoiceTriggerFirstPassJarvis setJarvisTriggerResult:]
  -[CSVoiceTriggerFirstPassJarvis earlyDetectFiredMachTime]
  -[CSVoiceTriggerFirstPassJarvis setEarlyDetectFiredMachTime:]
  -[CSVoiceTriggerFirstPassJarvis latestTriggerMode]
  -[CSVoiceTriggerFirstPassJarvis setLatestTriggerMode:]
  -[CSVoiceTriggerFirstPassJarvis setEndpointAnalyzer:]
  -[CSVoiceTriggerFirstPassJarvis setRtModel:]


CSSelfTriggerDetectorEnabledPolicyGibraltar : CSPolicy
 @property  CSPolicy *voiceTriggerEnabledPolicy

  // instance methods
  -[CSSelfTriggerDetectorEnabledPolicyGibraltar .cxx_destruct]
  -[CSSelfTriggerDetectorEnabledPolicyGibraltar init]
  -[CSSelfTriggerDetectorEnabledPolicyGibraltar _subscribeEventMonitors]
  -[CSSelfTriggerDetectorEnabledPolicyGibraltar _addSelfTriggerDetectorEnabledConditions]
  -[CSSelfTriggerDetectorEnabledPolicyGibraltar voiceTriggerEnabledPolicy]
  -[CSSelfTriggerDetectorEnabledPolicyGibraltar setVoiceTriggerEnabledPolicy:]


CSBluetoothWirelessSplitterMonitorImpIOS : CSBluetoothWirelessSplitterMonitor
  // instance methods
  -[CSBluetoothWirelessSplitterMonitorImpIOS _stopMonitoring]
  -[CSBluetoothWirelessSplitterMonitorImpIOS splitterState:]
  -[CSBluetoothWirelessSplitterMonitorImpIOS _startMonitoringWithQueue:]
  -[CSBluetoothWirelessSplitterMonitorImpIOS init]
  -[CSBluetoothWirelessSplitterMonitorImpIOS updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
  -[CSBluetoothWirelessSplitterMonitorImpIOS splitterState]
  -[CSBluetoothWirelessSplitterMonitorImpIOS _didReceiveWirelessSplitterStateChange]
  -[CSBluetoothWirelessSplitterMonitorImpIOS _notifyObserver:splitterState:shouldDisableSpeakerVerificationInSplitterMode:]


CSVoiceTriggerHeartBeatMetricsProvider : NSObject
  // class methods
  +[CSVoiceTriggerHeartBeatMetricsProvider fetchVoiceTriggerHeartBeatMetrics]


CSNNVADEndpointAnalyzer : NSObject <SNResultsObserving, CSEndpointAnalyzerImpl>
 @property  SNAudioStreamAnalyzer *snAudioStreamAnalyzer
 @property  unsigned long framePosition
 @property  unsigned long nnvadState
 @property  unsigned long numSamplesReceived
 @property  unsigned long numSamplesProcessedBeforeAnchorTime
 @property  unsigned long anchorMachAbsTime
 @property  BOOL isAnchorTimeBuffered
 @property  BOOL isRequestTimeout
 @property  unsigned long currentRequestSampleRate
 @property  AVAudioFormat *currentRequestAudioFormat
 @property  double vtEndInSecs
 @property  unsigned long vtEndInSampleCount
 @property  double vtExtraAudioAtStartInMs
 @property  double nnvadAudioOriginInMs
 @property  BOOL shouldDetectTwoShot
 @property  BOOL didEnterTwoshot
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSAudioFileWriter> *audioFileWriter
 @property  double firstAudioSampleSensorTimestamp
 @property  long long firstSampleId
 @property  unsigned long numSamplesSkippedForVT
 @property  BOOL finishedSkippingSamplesForVT
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <CSEndpointAnalyzerDelegate> *delegate
 @property  <CSEndpointAnalyzerImplDelegate> *implDelegate
 @property  BOOL canProcessCurrentRequest
 @property  unsigned long activeChannel
 @property  NSString *endpointerModelVersion
 @property  double elapsedTimeWithNoSpeech
 @property  long long endpointStyle
 @property  double delay
 @property  double startWaitTime
 @property  double automaticEndpointingSuspensionEndTime
 @property  double minimumDurationForEndpointer
 @property  double lastEndOfVoiceActivityTime
 @property  double lastStartOfVoiceActivityTime
 @property  double bypassSamples
 @property  long long endpointMode
 @property  double interspeechWaitTime
 @property  double endWaitTime
 @property  BOOL saveSamplesSeenInReset
 @property  NSString *mhId

  // class methods
  +[CSNNVADEndpointAnalyzer timeStampString]

  // instance methods
  -[CSNNVADEndpointAnalyzer mhId]
  -[CSNNVADEndpointAnalyzer setActiveChannel:]
  -[CSNNVADEndpointAnalyzer preheat]
  -[CSNNVADEndpointAnalyzer request:didFailWithError:]
  -[CSNNVADEndpointAnalyzer setStartWaitTime:]
  -[CSNNVADEndpointAnalyzer implDelegate]
  -[CSNNVADEndpointAnalyzer isAnchorTimeBuffered]
  -[CSNNVADEndpointAnalyzer setNumSamplesProcessedBeforeAnchorTime:]
  -[CSNNVADEndpointAnalyzer setIsAnchorTimeBuffered:]
  -[CSNNVADEndpointAnalyzer recordingStoppedForReason:]
  -[CSNNVADEndpointAnalyzer delay]
  -[CSNNVADEndpointAnalyzer setVtExtraAudioAtStartInMs:]
  -[CSNNVADEndpointAnalyzer setSaveSamplesSeenInReset:]
  -[CSNNVADEndpointAnalyzer currentRequestSampleRate]
  -[CSNNVADEndpointAnalyzer setDelay:]
  -[CSNNVADEndpointAnalyzer .cxx_destruct]
  -[CSNNVADEndpointAnalyzer minimumDurationForEndpointer]
  -[CSNNVADEndpointAnalyzer canProcessCurrentRequest]
  -[CSNNVADEndpointAnalyzer audioFileWriter]
  -[CSNNVADEndpointAnalyzer processAudioSamplesAsynchronously:]
  -[CSNNVADEndpointAnalyzer firstAudioSampleSensorTimestamp]
  -[CSNNVADEndpointAnalyzer setImplDelegate:]
  -[CSNNVADEndpointAnalyzer setDelegate:]
  -[CSNNVADEndpointAnalyzer vtExtraAudioAtStartInMs]
  -[CSNNVADEndpointAnalyzer startWaitTime]
  -[CSNNVADEndpointAnalyzer setAutomaticEndpointingSuspensionEndTime:]
  -[CSNNVADEndpointAnalyzer init]
  -[CSNNVADEndpointAnalyzer saveSamplesSeenInReset]
  -[CSNNVADEndpointAnalyzer setQueue:]
  -[CSNNVADEndpointAnalyzer endpointStyle]
  -[CSNNVADEndpointAnalyzer setEndpointMode:]
  -[CSNNVADEndpointAnalyzer activeChannel]
  -[CSNNVADEndpointAnalyzer isRequestTimeout]
  -[CSNNVADEndpointAnalyzer setVtEndInSampleCount:]
  -[CSNNVADEndpointAnalyzer stopEndpointer]
  -[CSNNVADEndpointAnalyzer reset]
  -[CSNNVADEndpointAnalyzer setAnchorMachAbsTime:]
  -[CSNNVADEndpointAnalyzer setCurrentRequestSampleRate:]
  -[CSNNVADEndpointAnalyzer setMinimumDurationForEndpointer:]
  -[CSNNVADEndpointAnalyzer setInterspeechWaitTime:]
  -[CSNNVADEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]
  -[CSNNVADEndpointAnalyzer setEndWaitTime:]
  -[CSNNVADEndpointAnalyzer setFirstAudioSampleSensorTimestamp:]
  -[CSNNVADEndpointAnalyzer anchorMachAbsTime]
  -[CSNNVADEndpointAnalyzer delegate]
  -[CSNNVADEndpointAnalyzer numSamplesProcessedBeforeAnchorTime]
  -[CSNNVADEndpointAnalyzer trailingSilenceDurationAtEndpoint]
  -[CSNNVADEndpointAnalyzer vtEndInSampleCount]
  -[CSNNVADEndpointAnalyzer queue]
  -[CSNNVADEndpointAnalyzer setMhId:]
  -[CSNNVADEndpointAnalyzer lastEndOfVoiceActivityTime]
  -[CSNNVADEndpointAnalyzer interspeechWaitTime]
  -[CSNNVADEndpointAnalyzer automaticEndpointingSuspensionEndTime]
  -[CSNNVADEndpointAnalyzer setAudioFileWriter:]
  -[CSNNVADEndpointAnalyzer endWaitTime]
  -[CSNNVADEndpointAnalyzer handleVoiceTriggerWithActivationInfo:]
  -[CSNNVADEndpointAnalyzer setIsRequestTimeout:]
  -[CSNNVADEndpointAnalyzer endpointMode]
  -[CSNNVADEndpointAnalyzer lastStartOfVoiceActivityTime]
  -[CSNNVADEndpointAnalyzer setEndpointStyle:]
  -[CSNNVADEndpointAnalyzer request:didProduceResult:]
  -[CSNNVADEndpointAnalyzer framePosition]
  -[CSNNVADEndpointAnalyzer setFramePosition:]
  -[CSNNVADEndpointAnalyzer _pcmBufferForAudioChunk:]
  -[CSNNVADEndpointAnalyzer _effectiveAudioTimeInSecsForSNObservation:]
  -[CSNNVADEndpointAnalyzer _reportStartpointAtTsInSecs:]
  -[CSNNVADEndpointAnalyzer _shouldEnterTwoShotAtAudioTimeInSecs:]
  -[CSNNVADEndpointAnalyzer _reportTwoShotAtTsInSecs:]
  -[CSNNVADEndpointAnalyzer _reportEndpointAtTsInSecs:]
  -[CSNNVADEndpointAnalyzer _checkSNObservationForStartpoint:]
  -[CSNNVADEndpointAnalyzer _checkSNObservationForEndpoint:]
  -[CSNNVADEndpointAnalyzer _emitEndpointDetectedEventWithEndpointTime:endpointBufferHostTime:]
  -[CSNNVADEndpointAnalyzer snAudioStreamAnalyzer]
  -[CSNNVADEndpointAnalyzer setSnAudioStreamAnalyzer:]
  -[CSNNVADEndpointAnalyzer nnvadState]
  -[CSNNVADEndpointAnalyzer setNnvadState:]
  -[CSNNVADEndpointAnalyzer numSamplesReceived]
  -[CSNNVADEndpointAnalyzer setNumSamplesReceived:]
  -[CSNNVADEndpointAnalyzer currentRequestAudioFormat]
  -[CSNNVADEndpointAnalyzer setCurrentRequestAudioFormat:]
  -[CSNNVADEndpointAnalyzer vtEndInSecs]
  -[CSNNVADEndpointAnalyzer setVtEndInSecs:]
  -[CSNNVADEndpointAnalyzer nnvadAudioOriginInMs]
  -[CSNNVADEndpointAnalyzer setNnvadAudioOriginInMs:]
  -[CSNNVADEndpointAnalyzer shouldDetectTwoShot]
  -[CSNNVADEndpointAnalyzer setShouldDetectTwoShot:]
  -[CSNNVADEndpointAnalyzer didEnterTwoshot]
  -[CSNNVADEndpointAnalyzer setDidEnterTwoshot:]
  -[CSNNVADEndpointAnalyzer firstSampleId]
  -[CSNNVADEndpointAnalyzer setFirstSampleId:]
  -[CSNNVADEndpointAnalyzer numSamplesSkippedForVT]
  -[CSNNVADEndpointAnalyzer setNumSamplesSkippedForVT:]
  -[CSNNVADEndpointAnalyzer finishedSkippingSamplesForVT]
  -[CSNNVADEndpointAnalyzer setFinishedSkippingSamplesForVT:]


CSBuiltInVoiceTriggerEnabledPolicy : NSObject
  // class methods
  +[CSBuiltInVoiceTriggerEnabledPolicy builtInVoiceTriggerEnabledPolicy]


CSActivationXPCClient : NSObject
 @property  NSObject<OS_xpc_object> *xpcConnection

  // instance methods
  -[CSActivationXPCClient connect]
  -[CSActivationXPCClient setXpcConnection:]
  -[CSActivationXPCClient xpcConnection]
  -[CSActivationXPCClient .cxx_destruct]
  -[CSActivationXPCClient _handleListenerEvent:]
  -[CSActivationXPCClient _handleListenerError:]
  -[CSActivationXPCClient init]
  -[CSActivationXPCClient _sendMessage:connection:completion:]
  -[CSActivationXPCClient notifyActivationEvent:completion:]
  -[CSActivationXPCClient dealloc]
  -[CSActivationXPCClient _decodeError:]


CSLanguageDetector : NSObject <_EARLanguageDetectorDelegate, CSStartOfSpeechDetectorDelegate>
 @property  _EARLanguageDetector *languageDetector
 @property  _EARLanguageDetectorAudioBuffer *audioBuffer
 @property  CSStartOfSpeechDetector *startOfSpeechDetector
 @property  CSAudioCircularBuffer *circBuffer
 @property  BOOL startOfSpeechDetected
 @property  BOOL needsToUpdateModel
 @property  long long currentState
 @property  int notifyToken
 @property  NSMutableArray *latestDetectedLanguages
 @property  unsigned long numLatestLanguages
 @property  NSString *languageDetectorAssetHash
 @property  CSAsset *currentAsset
 @property  NSString *interactionID
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSLanguageDetectorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSLanguageDetector notifyToken]
  -[CSLanguageDetector setNotifyToken:]
  -[CSLanguageDetector cancelCurrentRequest]
  -[CSLanguageDetector setLanguageDetector:]
  -[CSLanguageDetector languageDetector]
  -[CSLanguageDetector setCurrentAsset:]
  -[CSLanguageDetector .cxx_destruct]
  -[CSLanguageDetector setDelegate:]
  -[CSLanguageDetector init]
  -[CSLanguageDetector setQueue:]
  -[CSLanguageDetector endAudio]
  -[CSLanguageDetector currentState]
  -[CSLanguageDetector delegate]
  -[CSLanguageDetector currentAsset]
  -[CSLanguageDetector queue]
  -[CSLanguageDetector setAudioBuffer:]
  -[CSLanguageDetector dealloc]
  -[CSLanguageDetector audioBuffer]
  -[CSLanguageDetector setCurrentState:]
  -[CSLanguageDetector initWithModelURL:]
  -[CSLanguageDetector resetForNewRequest:]
  -[CSLanguageDetector addSamples:numSamples:]
  -[CSLanguageDetector _startMonitorLanguageDetectorAssetDownload]
  -[CSLanguageDetector _setNumLatestLangFromConfigFile:]
  -[CSLanguageDetector _constructLangPriors]
  -[CSLanguageDetector _initializeStartOfSpeechDetector:samplingRate:]
  -[CSLanguageDetector _resetStartOfSpeechDetector]
  -[CSLanguageDetector _setupLanguageDetectorWithOption:]
  -[CSLanguageDetector _readJsonDictionaryAt:]
  -[CSLanguageDetector _getDefaultValues]
  -[CSLanguageDetector _recordRecognitionLanguage:]
  -[CSLanguageDetector _logLanguageDetectorMetricsForLoggingInfo:]
  -[CSLanguageDetector _logSoSResult:toPath:]
  -[CSLanguageDetector languageDetectorDidCompleteProcessing:loggingInfo:]
  -[CSLanguageDetector languageDetector:result:]
  -[CSLanguageDetector startOfSpeechDetector:foundStartSampleAt:]
  -[CSLanguageDetector setInteractionIDforCurrentRequest:]
  -[CSLanguageDetector recordRecognitionLanguage:]
  -[CSLanguageDetector setMostRecentRecognitionLanguage:]
  -[CSLanguageDetector startOfSpeechDetector]
  -[CSLanguageDetector setStartOfSpeechDetector:]
  -[CSLanguageDetector circBuffer]
  -[CSLanguageDetector setCircBuffer:]
  -[CSLanguageDetector startOfSpeechDetected]
  -[CSLanguageDetector setStartOfSpeechDetected:]
  -[CSLanguageDetector needsToUpdateModel]
  -[CSLanguageDetector setNeedsToUpdateModel:]
  -[CSLanguageDetector latestDetectedLanguages]
  -[CSLanguageDetector setLatestDetectedLanguages:]
  -[CSLanguageDetector numLatestLanguages]
  -[CSLanguageDetector setNumLatestLanguages:]
  -[CSLanguageDetector languageDetectorAssetHash]
  -[CSLanguageDetector setLanguageDetectorAssetHash:]
  -[CSLanguageDetector interactionID]
  -[CSLanguageDetector setInteractionID:]


CSBluetoothWirelessSplitterMonitorImplDarwin : CSBluetoothWirelessSplitterMonitor
  // instance methods
  -[CSBluetoothWirelessSplitterMonitorImplDarwin _stopMonitoring]
  -[CSBluetoothWirelessSplitterMonitorImplDarwin splitterState:]
  -[CSBluetoothWirelessSplitterMonitorImplDarwin _startMonitoringWithQueue:]
  -[CSBluetoothWirelessSplitterMonitorImplDarwin init]
  -[CSBluetoothWirelessSplitterMonitorImplDarwin updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
  -[CSBluetoothWirelessSplitterMonitorImplDarwin splitterState]
  -[CSBluetoothWirelessSplitterMonitorImplDarwin _didReceiveWirelessSplitterStateChange]
  -[CSBluetoothWirelessSplitterMonitorImplDarwin _notifyObserver:splitterState:shouldDisableSpeakerVerificationInSplitterMode:]


CSStopRecordingOptions : NSObject
 @property  unsigned long stopRecordingReason
 @property  unsigned long expectedStopHostTime

  // instance methods
  -[CSStopRecordingOptions stopRecordingReason]
  -[CSStopRecordingOptions setStopRecordingReason:]
  -[CSStopRecordingOptions expectedStopHostTime]
  -[CSStopRecordingOptions setExpectedStopHostTime:]


CSMacWakeSleepMonitor : CSEventMonitor
  // class methods
  +[CSMacWakeSleepMonitor sharedInstance]

  // instance methods
  -[CSMacWakeSleepMonitor deviceIsInSleep]


CSMyriadSelfTriggerCoordinator : NSObject <CSSelfTriggerDetectorDelegate>
 @property  <CSMyriadSelfTriggerCoordinatorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSMyriadSelfTriggerCoordinator .cxx_destruct]
  -[CSMyriadSelfTriggerCoordinator setDelegate:]
  -[CSMyriadSelfTriggerCoordinator delegate]
  -[CSMyriadSelfTriggerCoordinator selfTriggerDetector:didDetectSelfTrigger:]


CSEndpointLoggingHelper : NSObject
  // class methods
  +[CSEndpointLoggingHelper getMHClientEventByMhUUID:]
  +[CSEndpointLoggingHelper getMHStatisticDistributionInfoFromDictionary:withScaleFactor:]
  +[CSEndpointLoggingHelper getMHStatisticDistributionInfoFromDictionary:]


CSEndpointLatencyInfo : NSObject
 @property  NSMutableArray *trailingPktSpeechLatencies
 @property  NSMutableArray *trailingPktLatencies
 @property  unsigned long numOfAudioPackets
 @property  unsigned long numOfValidTrailingPackets
 @property  unsigned long numOfValidTrailingSpeechPackets
 @property  double firstPktLatency

  // instance methods
  -[CSEndpointLatencyInfo .cxx_destruct]
  -[CSEndpointLatencyInfo init]
  -[CSEndpointLatencyInfo _emitMHEndpointLatencyInfo:withRequestMHUUID:]
  -[CSEndpointLatencyInfo addPktInfoWithTimestamp:arrivalTimestamp:currentMachTime:]
  -[CSEndpointLatencyInfo reportWithRequestMHUUID:]
  -[CSEndpointLatencyInfo firstPktLatency]
  -[CSEndpointLatencyInfo setFirstPktLatency:]
  -[CSEndpointLatencyInfo trailingPktSpeechLatencies]
  -[CSEndpointLatencyInfo setTrailingPktSpeechLatencies:]
  -[CSEndpointLatencyInfo trailingPktLatencies]
  -[CSEndpointLatencyInfo setTrailingPktLatencies:]
  -[CSEndpointLatencyInfo numOfAudioPackets]
  -[CSEndpointLatencyInfo setNumOfAudioPackets:]
  -[CSEndpointLatencyInfo numOfValidTrailingPackets]
  -[CSEndpointLatencyInfo setNumOfValidTrailingPackets:]
  -[CSEndpointLatencyInfo numOfValidTrailingSpeechPackets]
  -[CSEndpointLatencyInfo setNumOfValidTrailingSpeechPackets:]


CSCommandControlStreamEventMonitor : CSEventMonitor <CSCommandControlBehaviorMonitorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSCommandControlStreamEventMonitor sharedInstance]

  // instance methods
  -[CSCommandControlStreamEventMonitor _stopMonitoring]
  -[CSCommandControlStreamEventMonitor isStreaming]
  -[CSCommandControlStreamEventMonitor commandControlBehaviorMonitor:didStartStreamWithContext:successfully:option:]
  -[CSCommandControlStreamEventMonitor commandControlBehaviorMonitor:didStopStream:]
  -[CSCommandControlStreamEventMonitor _startMonitoringWithQueue:]
  -[CSCommandControlStreamEventMonitor init]
  -[CSCommandControlStreamEventMonitor commandControlBehaviorMonitor:willStopStream:]
  -[CSCommandControlStreamEventMonitor commandControlBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSCommandControlStreamEventMonitor _notifyStopCommandControl]


CSSelfTriggerDetectorEnabledPolicyFactory : CSPolicy
  // class methods
  +[CSSelfTriggerDetectorEnabledPolicyFactory selfTriggerDetectorEnabledPolicy]


CSAVVCRecordingClientMonitor : CSEventMonitor <CSAudioServerCrashMonitorDelegate>
 @property  AVVoiceTriggerClient *alwaysOnProcessorController
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long numOfAVVCRecordingClients
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAVVCRecordingClientMonitor sharedInstance]

  // instance methods
  -[CSAVVCRecordingClientMonitor _stopMonitoring]
  -[CSAVVCRecordingClientMonitor .cxx_destruct]
  -[CSAVVCRecordingClientMonitor CSAudioServerCrashMonitorDidReceiveServerCrash:]
  -[CSAVVCRecordingClientMonitor _startMonitoringWithQueue:]
  -[CSAVVCRecordingClientMonitor init]
  -[CSAVVCRecordingClientMonitor setQueue:]
  -[CSAVVCRecordingClientMonitor _didReceiveAVVCRecordingClientNumberChange:]
  -[CSAVVCRecordingClientMonitor alwaysOnProcessorController]
  -[CSAVVCRecordingClientMonitor setAlwaysOnProcessorController:]
  -[CSAVVCRecordingClientMonitor numOfAVVCRecordingClients]
  -[CSAVVCRecordingClientMonitor queue]


CSAudioSessionMonitor : CSEventMonitor <CSAudioServerCrashMonitorDelegate, CSAudioSessionEventProvidingDelegate>
 @property  unsigned long audioSessionState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAudioSessionMonitor sharedInstance]

  // instance methods
  -[CSAudioSessionMonitor _stopMonitoring]
  -[CSAudioSessionMonitor .cxx_destruct]
  -[CSAudioSessionMonitor CSAudioServerCrashMonitorDidReceiveServerCrash:]
  -[CSAudioSessionMonitor _startMonitoringWithQueue:]
  -[CSAudioSessionMonitor initWithCrashMonitor:]
  -[CSAudioSessionMonitor _notifyObserver:withAudioSessionState:]
  -[CSAudioSessionMonitor notifyAudioSessionStateChange:]
  -[CSAudioSessionMonitor audioSessionEventProvidingWillSetAudioSessionActive:]
  -[CSAudioSessionMonitor audioSessionEventProvidingDidSetAudioSessionActive:]
  -[CSAudioSessionMonitor getAudioSessionState]
  -[CSAudioSessionMonitor setAudioSessionState:]


CSSiriAudioFileWriter : NSObject
  // class methods
  +[CSSiriAudioFileWriter _savedAudioFilesDirectory]
  +[CSSiriAudioFileWriter _generateTemporaryFileURL]

  // instance methods
  -[CSSiriAudioFileWriter _close]
  -[CSSiriAudioFileWriter _delete]
  -[CSSiriAudioFileWriter .cxx_destruct]
  -[CSSiriAudioFileWriter init]
  -[CSSiriAudioFileWriter cancel]
  -[CSSiriAudioFileWriter dealloc]
  -[CSSiriAudioFileWriter flushWithCompletion:]
  -[CSSiriAudioFileWriter appendAudioData:]
  -[CSSiriAudioFileWriter initWithType:pathGenerator:priority:]
  -[CSSiriAudioFileWriter configureWithAudioStreamBasicDescription:]
  -[CSSiriAudioFileWriter _initWithType:pathGenerator:xorFileHandle:priority:]
  -[CSSiriAudioFileWriter initWithType:fileHandle:priority:]


CSCoreSpeechServices : NSObject
  // class methods
  +[CSCoreSpeechServices getCoreSpeechXPCConnection]
  +[CSCoreSpeechServices installedVoiceTriggerAssetForLanguageCode:completion:]
  +[CSCoreSpeechServices fetchRemoteVoiceTriggerAssetForLanguageCode:completion:]
  +[CSCoreSpeechServices getCoreSpeechServiceConnection]
  +[CSCoreSpeechServices getCurrentVoiceTriggerLocaleWithEndpointId:completion:]
  +[CSCoreSpeechServices voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:endpointId:downloadedModels:preinstalledModels:completion:]
  +[CSCoreSpeechServices voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]
  +[CSCoreSpeechServices voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:downloadedModels:preinstalledModels:completion:]
  +[CSCoreSpeechServices voiceTriggerRTModelForVersion:minorVersion:downloadedModels:preinstalledModels:completion:]
  +[CSCoreSpeechServices requestUpdatedSATAudio]
  +[CSCoreSpeechServices getFirstPassRunningMode]


CSAudioStreamRequest : NSObject <NSCopying>
 @property  NSObject<OS_xpc_object> *xpcObject
 @property  CSAudioRecordContext *recordContext
 @property  BOOL requiresHistoricalBuffer
 @property  BOOL useCustomizedRecordSettings
 @property  long long audioFormat
 @property  double sampleRate
 @property  unsigned int lpcmBitDepth
 @property  BOOL lpcmIsFloat
 @property  unsigned int numberOfChannels
 @property  unsigned int encoderBitRate
 @property  BOOL isSiri

  // class methods
  +[CSAudioStreamRequest defaultRequestWithContext:]
  +[CSAudioStreamRequest requestForLpcmRecordSettingsWithContext:]
  +[CSAudioStreamRequest requestForOpusRecordSettingsWithContext:]
  +[CSAudioStreamRequest requestForSpeexRecordSettingsWithContext:]

  // instance methods
  -[CSAudioStreamRequest sampleRate]
  -[CSAudioStreamRequest xpcObject]
  -[CSAudioStreamRequest initWithXPCObject:]
  -[CSAudioStreamRequest .cxx_destruct]
  -[CSAudioStreamRequest setAudioFormat:]
  -[CSAudioStreamRequest isSiri]
  -[CSAudioStreamRequest setRecordContext:]
  -[CSAudioStreamRequest recordContext]
  -[CSAudioStreamRequest audioFormat]
  -[CSAudioStreamRequest numberOfChannels]
  -[CSAudioStreamRequest copyWithZone:]
  -[CSAudioStreamRequest setSampleRate:]
  -[CSAudioStreamRequest setRequiresHistoricalBuffer:]
  -[CSAudioStreamRequest setEncoderBitRate:]
  -[CSAudioStreamRequest setNumberOfChannels:]
  -[CSAudioStreamRequest setLpcmBitDepth:]
  -[CSAudioStreamRequest setLpcmIsFloat:]
  -[CSAudioStreamRequest setUseCustomizedRecordSettings:]
  -[CSAudioStreamRequest requiresHistoricalBuffer]
  -[CSAudioStreamRequest useCustomizedRecordSettings]
  -[CSAudioStreamRequest lpcmBitDepth]
  -[CSAudioStreamRequest lpcmIsFloat]
  -[CSAudioStreamRequest encoderBitRate]
  -[CSAudioStreamRequest setIsSiri:]
  -[CSAudioStreamRequest initTandemWithRequest:]


CSSelfTriggerDetectorEnabledPolicyMac : CSPolicy
 @property  CSPolicy *voiceTriggerEnabledPolicy

  // instance methods
  -[CSSelfTriggerDetectorEnabledPolicyMac .cxx_destruct]
  -[CSSelfTriggerDetectorEnabledPolicyMac init]
  -[CSSelfTriggerDetectorEnabledPolicyMac _subscribeEventMonitors]
  -[CSSelfTriggerDetectorEnabledPolicyMac _addSelfTriggerDetectorEnabledConditions]
  -[CSSelfTriggerDetectorEnabledPolicyMac voiceTriggerEnabledPolicy]
  -[CSSelfTriggerDetectorEnabledPolicyMac setVoiceTriggerEnabledPolicy:]


CSOpportuneSpeakListenerDeviceManager : NSObject
 @property  NSString *deviceId

  // class methods
  +[CSOpportuneSpeakListenerDeviceManager sharedManager]

  // instance methods
  -[CSOpportuneSpeakListenerDeviceManager setDeviceId:]
  -[CSOpportuneSpeakListenerDeviceManager deviceId]
  -[CSOpportuneSpeakListenerDeviceManager .cxx_destruct]


CSAVVoiceTriggerClientManager : NSObject
  // class methods
  +[CSAVVoiceTriggerClientManager sharedVoiceTriggerClient]


CSSpeechManager : NSObject <CSAudioServerCrashMonitorDelegate, CSVoiceTriggerAssetHandlerDelegate, CSActivationEventNotificationHandlerDelegate, CSAudioRecorderDelegate, CSAudioProviderDelegate, CSOpportuneSpeakEventMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *assetQueryQueue
 @property  CSAudioRecorder *audioRecorder
 @property  NSMutableDictionary *audioProviders
 @property  CSFallbackAudioSessionReleaseProvider *fallbackAudioSessionReleaseProvider
 @property  <CSSpeechManagerDelegate> *clientController
 @property  NSObject<OS_dispatch_queue> *voiceTriggerQueue
 @property  NSObject<OS_dispatch_queue> *remoraTargetQueue
 @property  CSBuiltInVoiceTrigger *voiceTrigger
 @property  CSVoiceTriggerEventsCoordinator *voiceTriggerEventsCoordinator
 @property  CSPreMyriadCoordinator *preMyriadCoordinator
 @property  CSVoiceTriggerFileLogger *voiceTriggerFileLogger
 @property  CSSelfTriggerDetector *selfTriggerDetector
 @property  CSKeywordDetector *keywordDetector
 @property  CSMyriadPHash *myriad
 @property  CSMyriadSelfTriggerCoordinator *myriadSelfTriggerCoordinator
 @property  CSVoiceTriggerFidesClient *voiceTriggerFidesClient
 @property  CSVoiceTriggerFirstPassJarvis *voiceTriggerFirstPassJarvis
 @property  CSVoiceTriggerFirstPassHearst *voiceTriggerFirstPassHearst
 @property  CSVoiceTriggerFirstPassHearstAP *voiceTriggerFirstPassHearstAP
 @property  CSVoiceTriggerFirstPassRemora *voiceTriggerFirstPassRemora
 @property  CSVoiceProfileRetrainManager *voiceTriggerRetrainer
 @property  NSObject<OS_dispatch_source> *clearLoggingFileTimer
 @property  long long clearLoggingFileTimerCount
 @property  CSOpportuneSpeakListnerTestService *opportuneSpeakListnerTestService
 @property  CSPostBuildInstallService *postBuildInstallService
 @property  CSSmartSiriVolumeManager *ssvManager
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSSpeechManager sharedManager]
  +[CSSpeechManager sharedManagerForCoreSpeechDaemon]

  // instance methods
  -[CSSpeechManager _setupForBluetoothDeviceIfNeededWithDeviceType:prepareCompletion:completion:]
  -[CSSpeechManager clientController]
  -[CSSpeechManager setVoiceTriggerEventsCoordinator:]
  -[CSSpeechManager audioProviders]
  -[CSSpeechManager setAssetQueryQueue:]
  -[CSSpeechManager _setupForJarvisIfNeededWithPrepareCompletion:completion:]
  -[CSSpeechManager keywordDetector]
  -[CSSpeechManager opportuneSpeakEventMonitor:didStreamStateChanged:]
  -[CSSpeechManager CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSSpeechManager postBuildInstallService]
  -[CSSpeechManager setPostBuildInstallService:]
  -[CSSpeechManager setClearLoggingFileTimerCount:]
  -[CSSpeechManager setAudioProviders:]
  -[CSSpeechManager _prepareForBluetoothDeviceWithDeviceType:]
  -[CSSpeechManager clearLoggingFileTimer]
  -[CSSpeechManager voiceTriggerFirstPassHearstAP]
  -[CSSpeechManager _startForBluetoothDeviceWithDeviceType:asset:]
  -[CSSpeechManager voiceTriggerAssetHandler:endpointId:didChangeCachedAsset:]
  -[CSSpeechManager _updateBuiltInTriggerForPreMyriadIfNeeded:]
  -[CSSpeechManager setAudioRecorder:]
  -[CSSpeechManager .cxx_destruct]
  -[CSSpeechManager _startVoiceTrigger]
  -[CSSpeechManager setVoiceTriggerQueue:]
  -[CSSpeechManager assetQueryQueue]
  -[CSSpeechManager _startClearLoggingFilesTimer]
  -[CSSpeechManager setVoiceTriggerFidesClient:]
  -[CSSpeechManager _reinitializeSmartSiriVolumeWithAsset:]
  -[CSSpeechManager _prepareRemoraDeviceWithConnectedDeviceIds:]
  -[CSSpeechManager audioRecorderBufferAvailable:audioStreamHandleId:buffer:]
  -[CSSpeechManager voiceTriggerFirstPassRemora]
  -[CSSpeechManager voiceTriggerFirstPassJarvis]
  -[CSSpeechManager fetchFallbackAudioSessionReleaseProvider]
  -[CSSpeechManager myriadSelfTriggerCoordinator]
  -[CSSpeechManager audioProviderWithContext:error:]
  -[CSSpeechManager setVoiceTriggerFirstPassHearst:]
  -[CSSpeechManager setSsvManager:]
  -[CSSpeechManager init]
  -[CSSpeechManager setSelfTriggerDetector:]
  -[CSSpeechManager setQueue:]
  -[CSSpeechManager _setupVoiceTriggerWithCompletion:]
  -[CSSpeechManager voiceTriggerFirstPassHearst]
  -[CSSpeechManager selfTriggerDetector]
  -[CSSpeechManager setClientController:]
  -[CSSpeechManager setKeywordDetector:]
  -[CSSpeechManager _voiceTriggerFileLoggerCreateIfNeeded:]
  -[CSSpeechManager voiceTriggerFidesClient]
  -[CSSpeechManager setVoiceTriggerRetrainer:]
  -[CSSpeechManager _voiceTriggerEventNotifierCreateIfNeeded:]
  -[CSSpeechManager setVoiceTriggerFirstPassJarvis:]
  -[CSSpeechManager audioRecorderBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:]
  -[CSSpeechManager _setupForRemoraIfNeededWithCompletion:]
  -[CSSpeechManager fallbackAudioSessionReleaseProvider]
  -[CSSpeechManager audioProviderWithUUID:]
  -[CSSpeechManager _setupForHearstIfNeededWithPrepareCompletion:completion:]
  -[CSSpeechManager _handleClearLoggingFileTimer]
  -[CSSpeechManager _myriadSelfTriggerCoordinatorIfNeeded:]
  -[CSSpeechManager setMyriad:]
  -[CSSpeechManager audioProviderWithStreamID:]
  -[CSSpeechManager startManager]
  -[CSSpeechManager CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:]
  -[CSSpeechManager setFallbackAudioSessionReleaseProvider:]
  -[CSSpeechManager voiceTriggerEventsCoordinator]
  -[CSSpeechManager _getAudioRecorderWithError:]
  -[CSSpeechManager setRemoraTargetQueue:]
  -[CSSpeechManager queue]
  -[CSSpeechManager audioRecorder]
  -[CSSpeechManager setVoiceTriggerFirstPassRemora:]
  -[CSSpeechManager setPreMyriadCoordinator:]
  -[CSSpeechManager voiceTriggerQueue]
  -[CSSpeechManager _getVoiceTriggerAssetIfNeeded:]
  -[CSSpeechManager voiceTrigger]
  -[CSSpeechManager opportuneSpeakListnerTestService]
  -[CSSpeechManager _setupSpeakerRecognitionWithVTAsset:]
  -[CSSpeechManager voiceTriggerFileLogger]
  -[CSSpeechManager setOpportuneSpeakListnerTestService:]
  -[CSSpeechManager _createClearLoggingFileTimer]
  -[CSSpeechManager dealloc]
  -[CSSpeechManager _teardownForBluetoothDevice]
  -[CSSpeechManager audioProviderInvalidated:streamHandleId:]
  -[CSSpeechManager setMyriadSelfTriggerCoordinator:]
  -[CSSpeechManager audioFingerprintProvider]
  -[CSSpeechManager _startAllClients]
  -[CSSpeechManager preMyriadCoordinator]
  -[CSSpeechManager registerSiriClientProxy:]
  -[CSSpeechManager _reinitializeVoiceTriggerWithAsset:]
  -[CSSpeechManager activationEventNotificationHandler:event:completion:]
  -[CSSpeechManager setVoiceTrigger:]
  -[CSSpeechManager setVoiceTriggerFileLogger:]
  -[CSSpeechManager remoraTargetQueue]
  -[CSSpeechManager clearLoggingFileTimerCount]
  -[CSSpeechManager myriad]
  -[CSSpeechManager _reinitializeVoiceTriggerIfNeeded]
  -[CSSpeechManager ssvManager]
  -[CSSpeechManager setVoiceTriggerFirstPassHearstAP:]
  -[CSSpeechManager _preMyriadCoordinatorCreateIfNeeded:]
  -[CSSpeechManager setClearLoggingFileTimer:]
  -[CSSpeechManager voiceTriggerRetrainer]
  -[CSSpeechManager audioRecorderWillBeDestroyed:]
  -[CSSpeechManager registerSpeechController:]


CSSpeechEndHostTimeEstimator : NSObject
 @property  unsigned long numAudioSampleForwarded
 @property  unsigned long lastAudioChunkHostTime
 @property  BOOL endPointNotified
 @property  double trailingSilenceDurationAtEndpoint

  // instance methods
  -[CSSpeechEndHostTimeEstimator setLastAudioChunkHostTime:]
  -[CSSpeechEndHostTimeEstimator numAudioSampleForwarded]
  -[CSSpeechEndHostTimeEstimator lastAudioChunkHostTime]
  -[CSSpeechEndHostTimeEstimator setTrailingSilenceDurationAtEndpoint:]
  -[CSSpeechEndHostTimeEstimator init]
  -[CSSpeechEndHostTimeEstimator reset]
  -[CSSpeechEndHostTimeEstimator estimatedSpeechEndHostTime]
  -[CSSpeechEndHostTimeEstimator setNumAudioSampleForwarded:]
  -[CSSpeechEndHostTimeEstimator trailingSilenceDurationAtEndpoint]
  -[CSSpeechEndHostTimeEstimator notifyTrailingSilenceDurationAtEndpoint:]
  -[CSSpeechEndHostTimeEstimator endPointNotified]
  -[CSSpeechEndHostTimeEstimator setEndPointNotified:]
  -[CSSpeechEndHostTimeEstimator addNumSamples:hostTime:]


CSClamshellStateMonitor : CSEventMonitor
  // class methods
  +[CSClamshellStateMonitor sharedInstance]

  // instance methods
  -[CSClamshellStateMonitor _stopMonitoring]
  -[CSClamshellStateMonitor _startMonitoringWithQueue:]
  -[CSClamshellStateMonitor init]
  -[CSClamshellStateMonitor _notifyObserver:withClamshellState:]
  -[CSClamshellStateMonitor isClamshellClosed]
  -[CSClamshellStateMonitor _didReceiveClamshellStateChangeNotification:]


CSCommandControlListener : NSObject <CSAudioStreamProvidingDelegate, CSXPCClientDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSAudioStreamProviding> *audioStreamProvider
 @property  CSAudioStream *audioStream
 @property  CSXPCClient *xpcClient
 @property  <CSCommandControlListenerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSCommandControlListener CSXPCClient:didDisconnect:]
  -[CSCommandControlListener setXpcClient:]
  -[CSCommandControlListener audioStreamProvider:didStopStreamUnexpectly:]
  -[CSCommandControlListener .cxx_destruct]
  -[CSCommandControlListener audioStreamProvider:didHardwareConfigurationChange:]
  -[CSCommandControlListener xpcClient]
  -[CSCommandControlListener setDelegate:]
  -[CSCommandControlListener init]
  -[CSCommandControlListener setQueue:]
  -[CSCommandControlListener delegate]
  -[CSCommandControlListener queue]
  -[CSCommandControlListener setAudioStream:]
  -[CSCommandControlListener audioStreamProvider:audioChunkForTVAvailable:]
  -[CSCommandControlListener audioStreamProvider:audioBufferAvailable:]
  -[CSCommandControlListener audioStream]
  -[CSCommandControlListener _startRequestWithCompletion:]
  -[CSCommandControlListener startListenWithOption:completion:]
  -[CSCommandControlListener stopListenWithCompletion:]
  -[CSCommandControlListener audioStreamProvider]
  -[CSCommandControlListener setAudioStreamProvider:]


CSAssetManager : NSObject <CSVoiceTriggerAssetMetaUpdateMonitorDelegate, CSSpeechEndpointAssetMetaUpdateMonitorDelegate, CSAdBlockerMetaUpdateMonitorDelegate, CSAssetControllerDelegate, CSSpeakerRecognitionAssetMetaUpdateMonitorDelegate, CSLanguageCodeUpdateMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *currentLanguageCode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAssetManager sharedManager]

  // instance methods
  -[CSAssetManager installedAssetForCurrentLanguageOfType:completion:]
  -[CSAssetManager _fetchRemoteMetaData]
  -[CSAssetManager _stopPeriodicalDownload]
  -[CSAssetManager .cxx_destruct]
  -[CSAssetManager _createPeriodicalDownloadTimer]
  -[CSAssetManager CSSpeechEndpointAssetMetaUpdateMonitor:didReceiveNewSpeechEndpointAssetMetaData:]
  -[CSAssetManager assetForCurrentLanguageOfType:completion:]
  -[CSAssetManager setQueue:]
  -[CSAssetManager installedAssetOfType:language:completion:]
  -[CSAssetManager CSAdBlockerMetaUpdateMonitor:didReceiveNewAdBlockerAssetMetaData:]
  -[CSAssetManager allInstalledAssetsOfType:language:]
  -[CSAssetManager currentLanguageCode]
  -[CSAssetManager removeObserver:forAssetType:]
  -[CSAssetManager installedAssetForCurrentLanguageOfType:]
  -[CSAssetManager CSAssetController:didDownloadNewAssetForType:]
  -[CSAssetManager assetOfType:language:completion:]
  -[CSAssetManager queue]
  -[CSAssetManager assetOfType:language:compatibilityVersion:completion:]
  -[CSAssetManager installedAssetOfType:language:]
  -[CSAssetManager setAssetDownloadingOption:]
  -[CSAssetManager CSVoiceTriggerAssetMetaUpdateMonitor:didReceiveNewVoiceTriggerAssetMetaData:]
  -[CSAssetManager _canFetchRemoteAsset:]
  -[CSAssetManager initWithDownloadOption:]
  -[CSAssetManager assetOfType:language:]
  -[CSAssetManager CSSpeakerRecognitionAssetMetaUpdateMonitor:didReceiveNewSpeakerRecognitionAssetMetaData:]
  -[CSAssetManager assetOfType:providerType:language:completion:]
  -[CSAssetManager assetForCurrentLanguageOfType:]
  -[CSAssetManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
  -[CSAssetManager _startPeriodicalDownload]
  -[CSAssetManager addObserver:forAssetType:]


CSEndpointerXPCClient : CSEndpointerProxy <CSEndpointerXPCServiceDelegate>
 @property  NSXPCConnection *endpointerConnection
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  NSObject<OS_dispatch_queue> *xpcConnectionQueue
 @property  NSObject<OS_dispatch_queue> *xpcClientQueue
 @property  NSObject<OS_dispatch_queue> *xpcDelegateQueue
 @property  id remoteObjectProxy

  // instance methods
  -[CSEndpointerXPCClient setActiveChannel:]
  -[CSEndpointerXPCClient elapsedTimeWithNoSpeech]
  -[CSEndpointerXPCClient setStartWaitTime:]
  -[CSEndpointerXPCClient xpcConnectionQueue]
  -[CSEndpointerXPCClient targetQueue]
  -[CSEndpointerXPCClient recordingStoppedForReason:]
  -[CSEndpointerXPCClient setTargetQueue:]
  -[CSEndpointerXPCClient endpointerModelVersion]
  -[CSEndpointerXPCClient .cxx_destruct]
  -[CSEndpointerXPCClient processServerEndpointFeatures:]
  -[CSEndpointerXPCClient setRemoteObjectProxy:]
  -[CSEndpointerXPCClient processAudioSamplesAsynchronously:]
  -[CSEndpointerXPCClient remoteObjectProxy]
  -[CSEndpointerXPCClient shouldAcceptEagerResultForDuration:resultsCompletionHandler:]
  -[CSEndpointerXPCClient setAutomaticEndpointingSuspensionEndTime:]
  -[CSEndpointerXPCClient init]
  -[CSEndpointerXPCClient updateEndpointerThreshold:]
  -[CSEndpointerXPCClient setXpcClientQueue:]
  -[CSEndpointerXPCClient setXpcConnectionQueue:]
  -[CSEndpointerXPCClient setEndWaitTime:]
  -[CSEndpointerXPCClient setEndpointerDelegate:]
  -[CSEndpointerXPCClient trailingSilenceDurationAtEndpoint]
  -[CSEndpointerXPCClient updateEndpointerDelayedTrigger:]
  -[CSEndpointerXPCClient setEndpointerOperationMode:]
  -[CSEndpointerXPCClient dealloc]
  -[CSEndpointerXPCClient xpcClientQueue]
  -[CSEndpointerXPCClient _getRemoteServiceProxyObject]
  -[CSEndpointerXPCClient _createClientConnection]
  -[CSEndpointerXPCClient resetForVoiceTriggerTwoShotWithSampleRate:]
  -[CSEndpointerXPCClient didDetectStartpointAtTime:]
  -[CSEndpointerXPCClient didDetectHardEndpointAtTime:withMetrics:]
  -[CSEndpointerXPCClient didDetectHardEndpointAtTime:withTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:serverFeatureLatencyDistribution:additionalMetrics:]
  -[CSEndpointerXPCClient endpointerConnection]
  -[CSEndpointerXPCClient setEndpointerConnection:]
  -[CSEndpointerXPCClient endPointAnalyzerType]
  -[CSEndpointerXPCClient resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:]
  -[CSEndpointerXPCClient endpointerDelegate]
  -[CSEndpointerXPCClient xpcDelegateQueue]
  -[CSEndpointerXPCClient setXpcDelegateQueue:]


NviDirectionalitySignalProvider : NSObject <NviAudioDataReceiver, SNResultsObserving, NviSignalProvider>
 @property  <NviAudioDataSource> *dataSrc
 @property  <NviAssetsProvider> *assetsProvider
 @property  NviContext *nviCtx
 @property  NSHashTable *delegates
 @property  SNAudioStreamAnalyzer *snAudioStreamAnalyzer
 @property  float dirAzimuthEMAParam
 @property  long long currReqFirstSampleId
 @property  unsigned long currNumSamplesProcessed
 @property  float currEstimatedAzimuth
 @property  NviDirectionalitySignalData *dirSigData
 @property  NviDataLogger *sigDataWriter
 @property  BOOL doneProcessing
 @property  NviAudioFileWriter *audioFileWriter
 @property  NSMutableDictionary *azDistribution
 @property  NSObject<OS_dispatch_queue> *queue
 @property  BOOL receiveOnlyProcessedChannelData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long sigType

  // instance methods
  -[NviDirectionalitySignalProvider removeDelegate:]
  -[NviDirectionalitySignalProvider request:didFailWithError:]
  -[NviDirectionalitySignalProvider setDelegates:]
  -[NviDirectionalitySignalProvider doneProcessing]
  -[NviDirectionalitySignalProvider .cxx_destruct]
  -[NviDirectionalitySignalProvider delegates]
  -[NviDirectionalitySignalProvider audioFileWriter]
  -[NviDirectionalitySignalProvider nviCtx]
  -[NviDirectionalitySignalProvider setQueue:]
  -[NviDirectionalitySignalProvider reset]
  -[NviDirectionalitySignalProvider sigType]
  -[NviDirectionalitySignalProvider dataSrc]
  -[NviDirectionalitySignalProvider queue]
  -[NviDirectionalitySignalProvider dealloc]
  -[NviDirectionalitySignalProvider setAudioFileWriter:]
  -[NviDirectionalitySignalProvider addDelegate:]
  -[NviDirectionalitySignalProvider request:didProduceResult:]
  -[NviDirectionalitySignalProvider snAudioStreamAnalyzer]
  -[NviDirectionalitySignalProvider setSnAudioStreamAnalyzer:]
  -[NviDirectionalitySignalProvider dirAzimuthEMAParam]
  -[NviDirectionalitySignalProvider audioChunkAvailable:numChannels:numSamplesPerChannel:startSampleId:atAbsMachTimestamp:]
  -[NviDirectionalitySignalProvider receiveOnlyProcessedChannelData]
  -[NviDirectionalitySignalProvider initWithDataSource:assetsProvider:]
  -[NviDirectionalitySignalProvider startWithNviContext:didStartHandler:]
  -[NviDirectionalitySignalProvider stopWithDidStopHandler:]
  -[NviDirectionalitySignalProvider setDataSrc:]
  -[NviDirectionalitySignalProvider assetsProvider]
  -[NviDirectionalitySignalProvider setAssetsProvider:]
  -[NviDirectionalitySignalProvider setNviCtx:]
  -[NviDirectionalitySignalProvider setDirAzimuthEMAParam:]
  -[NviDirectionalitySignalProvider currReqFirstSampleId]
  -[NviDirectionalitySignalProvider setCurrReqFirstSampleId:]
  -[NviDirectionalitySignalProvider currNumSamplesProcessed]
  -[NviDirectionalitySignalProvider setCurrNumSamplesProcessed:]
  -[NviDirectionalitySignalProvider currEstimatedAzimuth]
  -[NviDirectionalitySignalProvider setCurrEstimatedAzimuth:]
  -[NviDirectionalitySignalProvider dirSigData]
  -[NviDirectionalitySignalProvider setDirSigData:]
  -[NviDirectionalitySignalProvider sigDataWriter]
  -[NviDirectionalitySignalProvider setSigDataWriter:]
  -[NviDirectionalitySignalProvider setDoneProcessing:]
  -[NviDirectionalitySignalProvider azDistribution]
  -[NviDirectionalitySignalProvider setAzDistribution:]


CSConnectionListener : NSObject <NSXPCListenerDelegate, CSConnectionServiceDelegate>
 @property  NSMutableArray *clientConnections
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *machServiceName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSConnectionListener machServiceName]
  -[CSConnectionListener resumeConnection]
  -[CSConnectionListener clientConnections]
  -[CSConnectionListener setMachServiceName:]
  -[CSConnectionListener .cxx_destruct]
  -[CSConnectionListener setClientConnections:]
  -[CSConnectionListener notifyClientsWithBlock:]
  -[CSConnectionListener setQueue:]
  -[CSConnectionListener initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:]
  -[CSConnectionListener queue]
  -[CSConnectionListener dealloc]
  -[CSConnectionListener listener:shouldAcceptNewConnection:]


CSAudioRecorderFactory : NSObject
  // class methods
  +[CSAudioRecorderFactory audioRecorderWithQueue:error:]


CSKeywordAnalyzerNDEAPIResult : NSObject
 @property  unsigned long samplesFed
 @property  unsigned long bestStart
 @property  unsigned long bestEnd
 @property  float bestScore
 @property  BOOL isSecondChance
 @property  BOOL isEarlyDetect
 @property  NSDictionary *dictionary

  // instance methods
  -[CSKeywordAnalyzerNDEAPIResult setBestScore:]
  -[CSKeywordAnalyzerNDEAPIResult dictionary]
  -[CSKeywordAnalyzerNDEAPIResult bestScore]
  -[CSKeywordAnalyzerNDEAPIResult init]
  -[CSKeywordAnalyzerNDEAPIResult bestEnd]
  -[CSKeywordAnalyzerNDEAPIResult isEarlyDetect]
  -[CSKeywordAnalyzerNDEAPIResult bestStart]
  -[CSKeywordAnalyzerNDEAPIResult initWithBlob:isEarlyDetected:]
  -[CSKeywordAnalyzerNDEAPIResult samplesFed]
  -[CSKeywordAnalyzerNDEAPIResult setSamplesFed:]
  -[CSKeywordAnalyzerNDEAPIResult setBestStart:]
  -[CSKeywordAnalyzerNDEAPIResult setBestEnd:]
  -[CSKeywordAnalyzerNDEAPIResult isSecondChance]
  -[CSKeywordAnalyzerNDEAPIResult setIsSecondChance:]
  -[CSKeywordAnalyzerNDEAPIResult setIsEarlyDetect:]


CSKeywordAnalyzerNDEAPI : NSObject
 @property  unsigned long activeChannel
 @property  <CSKeywordAnalyzerNDEAPIScoreDelegate> *delegate

  // instance methods
  -[CSKeywordAnalyzerNDEAPI setActiveChannel:]
  -[CSKeywordAnalyzerNDEAPI processAudioChunk:]
  -[CSKeywordAnalyzerNDEAPI .cxx_destruct]
  -[CSKeywordAnalyzerNDEAPI setDelegate:]
  -[CSKeywordAnalyzerNDEAPI activeChannel]
  -[CSKeywordAnalyzerNDEAPI reset]
  -[CSKeywordAnalyzerNDEAPI delegate]
  -[CSKeywordAnalyzerNDEAPI dealloc]
  -[CSKeywordAnalyzerNDEAPI initWithBlob:]
  -[CSKeywordAnalyzerNDEAPI checkForTriggerWithBytes:withNumberOfSamples:]
  -[CSKeywordAnalyzerNDEAPI processAudioBytes:withNumberOfSamples:]


CSSpeechController : NSObject <CSAudioConverterDelegate, CSSmartSiriVolumeControllerDelegate, CSAudioStreamProvidingDelegate, CSAudioAlertProvidingDelegate, CSAudioSessionControllerDelegate, CSAudioDecoderDelegate, CSEndpointAnalyzerImplDelegate, CSLanguageCodeUpdateMonitorDelegate, SOMediaNowPlayingListening, SOClockAlarmListening, SOClockTimerListening, CSSpeakerRecognitionProxyProtocol, SSRSpeakerRecognitionControllerDelegate, CSSpeakerRecognitionAssetDownloadMonitorDelegate, CSVoiceTriggerAssetHandlerDelegate, CSXPCClientDelegate, CSAudioSessionProvidingDelegate, CSSpeechManagerDelegate, CSContinuousVoiceTriggerDelegate>
 @property  BOOL supportPhatic
 @property  BOOL supportHearstVoiceTrigger
 @property  BOOL supportTriagleModeSessionActivationRetry
 @property  BOOL supportSessionActivateDelay
 @property  BOOL supportLazySessionActivtion
 @property  CSEndpointerProxy *endpointerProxy
 @property  CSAudioRecordContext *audioRecordContext
 @property  CSAudioStream *audioStream
 @property  <CSAudioStreamProviding> *streamProvider
 @property  <CSAudioSessionProviding> *sessionProvider
 @property  <CSAudioAlertProviding> *alertProvider
 @property  <CSAudioMeterProviding> *audioMeterProvider
 @property  <CSAudioMetricProviding> *audioMetricProvider
 @property  BOOL shouldDisableEncoding
 @property  BOOL isOpus
 @property  BOOL isSiriClientListening
 @property  BOOL isNarrowBand
 @property  CSPlainAudioFileWriter *audioFileWriter
 @property  CSSelectiveChannelAudioFileWriter *serverLoggingWriter
 @property  CSSmartSiriVolumeController *volumeController
 @property  NSString *recordEventUUID
 @property  BOOL isAudioSessionActivated
 @property  BOOL deviceRoleIsStereo
 @property  NSDictionary *speakerRecognitionScores
 @property  unsigned long activeChannel
 @property  BOOL twoShotNotificationEnabled
 @property  BOOL isMediaPlaying
 @property  BOOL isAlarmPlaying
 @property  BOOL isTimerPlaying
 @property  BOOL isSoundPlaying
 @property  BOOL isRemoteVADAvailableStream
 @property  BOOL myriadPreventingTwoShotFeedback
 @property  BOOL needsPostGain
 @property  CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator
 @property  NSString *bundleIdFromDictation
 @property  CSContinuousVoiceTrigger *continuousVoiceTrigger
 @property  CSLanguageDetector *languageDetector
 @property  BOOL shouldUseLanguageDetectorForCurrentRequest
 @property  NSUUID *pendingAudioSessionActivationToken
 @property  @? pendingAudioSessionActivationCompletion
 @property  unsigned long pendingAudioSessionActivationReason
 @property  double audioSessionActivationDelay
 @property  CSXPCClientFactory *xpcClientFactory
 @property  CSXPCClient *xpcClient
 @property  CSXPCClient *duckAudioXPCClient
 @property  float cachedAvgPower
 @property  float cachedPeakPower
 @property  CSAudioPowerMeter *powerMeter
 @property  BOOL didDeliverLastBuffer
 @property  BOOL didDeliverFirstSpeechPacket
 @property  NSString *requestMHUUID
 @property  BOOL canPerformDelayedStop
 @property  CSStopRecordingOptions *requestedStopRecordingOptions
 @property  unsigned long numTrailingSamplesAfterSchedulingStop
 @property  unsigned long maxAllowedTrailingSamplesAfterSchedulingStop
 @property  NSMutableDictionary *decodersForTV
 @property  unsigned long decoderProcessedSampleCountForTV
 @property  NSString *logEventUUID
 @property  CSSpeakerRecognitionProxy *speakerRecognitionProxy
 @property  SSRSpeakerRecognitionController *speakerRecognitionController
 @property  SSRVoiceProfileManager *voiceProfileManager
 @property  CSAsset *asset
 @property  NSArray *ssrAssets
 @property  NSString *ssvLogFilePath
 @property  NSObject<OS_dispatch_queue> *mediaPlayingObserverQueue
 @property  SOMediaNowPlayingObserver *mediaPlayingMonitor
 @property  SOClockAlarmObserver *alarmMonitor
 @property  SOClockTimerObserver *timerMonitor
 @property  CSVolumeMonitor *volumeMonitor
 @property  CSAudioDeviceInfo *audioDeviceInfo
 @property  NSUUID *endpointId
 @property  BOOL setupStarted
 @property  CSAudioSessionController *audioSessionController
 @property  CSSACInfoMonitor *sacInfoMonitor
 @property  <CSSpeechControllerDelegate> *delegate
 @property  <CSLanguageDetectorDelegate> *languageDetectorDelegate
 @property  <CSSpeakerIdentificationDelegate> *speakerIdDelegate
 @property  BOOL duckOthersOption
 @property  <CSEndpointAnalyzer> *endpointAnalyzer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSSpeechController sharedController]
  +[CSSpeechController isSmartSiriVolumeAvailable]

  // instance methods
  -[CSSpeechController endpointId]
  -[CSSpeechController setActiveChannel:]
  -[CSSpeechController initWithEndpointId:]
  -[CSSpeechController preheat]
  -[CSSpeechController CSXPCClient:didDisconnect:]
  -[CSSpeechController setXpcClient:]
  -[CSSpeechController isRecording]
  -[CSSpeechController _getSpeechIdentifier]
  -[CSSpeechController setAudioRecordContext:]
  -[CSSpeechController audioRecordContext]
  -[CSSpeechController clockTimerObserver:snapshotDidUpdateFrom:to:]
  -[CSSpeechController averagePowerForChannel:]
  -[CSSpeechController audioMetricProvider]
  -[CSSpeechController isMediaPlaying]
  -[CSSpeechController duckOthersOption]
  -[CSSpeechController releaseAudioSession:]
  -[CSSpeechController continuousVoiceTrigger:detectedSilenceAfterVoiceTriggerAt:]
  -[CSSpeechController _currentAudioRecorderSampleRate]
  -[CSSpeechController playAlertSoundForType:]
  -[CSSpeechController _activateAudioSessionWithReason:error:]
  -[CSSpeechController setVoiceProfileManager:]
  -[CSSpeechController _createAudioProviderFromXPCWithContext:]
  -[CSSpeechController continuousVoiceTrigger]
  -[CSSpeechController endWaitingForMyriadWithDecision:]
  -[CSSpeechController audioSessionActivationDelay]
  -[CSSpeechController _performPendingAudioSessionActivateForReason:]
  -[CSSpeechController clockAlarmObserver:alarmDidFire:]
  -[CSSpeechController audioSessionController]
  -[CSSpeechController _didStopForReason:]
  -[CSSpeechController supportPhatic]
  -[CSSpeechController setIsMediaPlaying:]
  -[CSSpeechController _createLanguageDetectorIfNeeded]
  -[CSSpeechController _isRecordRouteBuiltinMic]
  -[CSSpeechController getLPCMAudioStreamBasicDescription]
  -[CSSpeechController streamProvider]
  -[CSSpeechController setPendingAudioSessionActivationCompletion:]
  -[CSSpeechController _phaticPlaybackReason]
  -[CSSpeechController speechEndHostTimeEstimator]
  -[CSSpeechController speakerRecognitionFinishedProcessing:withFinalSpeakerInfo:]
  -[CSSpeechController setSupportSessionActivateDelay:]
  -[CSSpeechController audioStreamProvider:didStopStreamUnexpectly:]
  -[CSSpeechController setXpcClientFactory:]
  -[CSSpeechController shouldUseLanguageDetectorForCurrentRequest]
  -[CSSpeechController setLanguageDetector:]
  -[CSSpeechController audioAlertProvidingDidFinishAlertPlayback:ofType:error:]
  -[CSSpeechController audioSessionProviderBeginInterruption:withContext:]
  -[CSSpeechController releaseAudioSession]
  -[CSSpeechController setNumTrailingSamplesAfterSchedulingStop:]
  -[CSSpeechController _lazyActivateAudioSessionWithReason:error:]
  -[CSSpeechController duckAudioXPCClient]
  -[CSSpeechController startRecordingWithSettings:error:]
  -[CSSpeechController initializeRecordSessionWithRecordContext:]
  -[CSSpeechController _fetchMetricsAndLog]
  -[CSSpeechController voiceTriggerAssetHandler:endpointId:didChangeCachedAsset:]
  -[CSSpeechController myriadPreventingTwoShotFeedback]
  -[CSSpeechController setPendingAudioSessionActivationReason:]
  -[CSSpeechController deviceRoleIsStereo]
  -[CSSpeechController languageDetector]
  -[CSSpeechController _setMediaPlaybackState:isInterrupted:]
  -[CSSpeechController _logRecordingStopErrorIfNeeded:]
  -[CSSpeechController setDidDeliverLastBuffer:]
  -[CSSpeechController fetchAudioMetricsWithCompletion:]
  -[CSSpeechController supportSessionActivateDelay]
  -[CSSpeechController endpointerModelVersion]
  -[CSSpeechController setVolumeController:]
  -[CSSpeechController setDuckOthersOption:]
  -[CSSpeechController supportHearstVoiceTrigger]
  -[CSSpeechController .cxx_destruct]
  -[CSSpeechController audioSessionProvider:didSetAudioSessionActive:]
  -[CSSpeechController audioStreamProvider:didHardwareConfigurationChange:]
  -[CSSpeechController setLogEventUUID:]
  -[CSSpeechController setMediaPlayingMonitor:]
  -[CSSpeechController audioConverterDidConvertPackets:packets:durationInSec:timestamp:arrivalTimestampToAudioRecorder:]
  -[CSSpeechController setCachedAvgPower:]
  -[CSSpeechController _setupDownsamplerIfNeeded]
  -[CSSpeechController needsPostGain]
  -[CSSpeechController processServerEndpointFeatures:]
  -[CSSpeechController languageDetectorDelegate]
  -[CSSpeechController recordRoute]
  -[CSSpeechController resetEndpointer]
  -[CSSpeechController isTimerPlaying]
  -[CSSpeechController clockTimerObserver:timerDidFire:]
  -[CSSpeechController setIsNarrowBand:]
  -[CSSpeechController audioMeterProvider]
  -[CSSpeechController setServerLoggingWriter:]
  -[CSSpeechController setDeviceRoleIsStereo:]
  -[CSSpeechController endpointAnalyzer]
  -[CSSpeechController setPendingAudioSessionActivationToken:]
  -[CSSpeechController logEventUUID]
  -[CSSpeechController _scheduledPhaticDelay]
  -[CSSpeechController recordEventUUID]
  -[CSSpeechController setPermanentVolumeOffsetWithDirection:]
  -[CSSpeechController _activateAudioSessionWithReason:delay:delayRequested:error:]
  -[CSSpeechController setLanguageDetectorDelegate:]
  -[CSSpeechController _fetchAudioProviderWithContext:]
  -[CSSpeechController clockAlarmObserver:alarmDidDismiss:]
  -[CSSpeechController audioFileWriter]
  -[CSSpeechController supportTriagleModeSessionActivationRetry]
  -[CSSpeechController setLanguageDetectorInteractionID:]
  -[CSSpeechController _startPhaticDecision]
  -[CSSpeechController powerMeter]
  -[CSSpeechController cachedPeakPower]
  -[CSSpeechController xpcClient]
  -[CSSpeechController xpcClientFactory]
  -[CSSpeechController setAudioSessionController:]
  -[CSSpeechController maxAllowedTrailingSamplesAfterSchedulingStop]
  -[CSSpeechController alarmMonitor]
  -[CSSpeechController shouldAcceptEagerResultForDuration:resultsCompletionHandler:]
  -[CSSpeechController continuousVoiceTrigger:detectedVoiceTriggerResult:]
  -[CSSpeechController setDelegate:]
  -[CSSpeechController setSupportPhatic:]
  -[CSSpeechController _initializeTimerState]
  -[CSSpeechController twoShotNotificationEnabled]
  -[CSSpeechController _shouldSetStartSampleCount]
  -[CSSpeechController setAudioDeviceInfo:]
  -[CSSpeechController setAsset:]
  -[CSSpeechController setVolumeMonitor:]
  -[CSSpeechController shouldDisableEncoding]
  -[CSSpeechController _setupAudioConverter:isNarrowBand:]
  -[CSSpeechController isOpus]
  -[CSSpeechController averagePowerForOutputReference]
  -[CSSpeechController isAlarmPlaying]
  -[CSSpeechController bundleIdFromDictation]
  -[CSSpeechController mediaPlayingObserverQueue]
  -[CSSpeechController _shouldResetContextAtPrepare]
  -[CSSpeechController isRemoteVADAvailableStream]
  -[CSSpeechController audioDeviceInfo]
  -[CSSpeechController _cancelPendingAudioSessionActivateForReason:]
  -[CSSpeechController setTimerMonitor:]
  -[CSSpeechController timerMonitor]
  -[CSSpeechController setContinuousVoiceTrigger:]
  -[CSSpeechController init]
  -[CSSpeechController volumeController]
  -[CSSpeechController setIsAlarmPlaying:]
  -[CSSpeechController setSupportLazySessionActivtion:]
  -[CSSpeechController setBundleIdFromDictation:]
  -[CSSpeechController beginWaitingForMyriad]
  -[CSSpeechController asset]
  -[CSSpeechController setShouldUseLanguageDetectorForCurrentRequest:]
  -[CSSpeechController playRecordStartingAlertAndResetEndpointer]
  -[CSSpeechController clockTimerObserver:timerDidDismiss:]
  -[CSSpeechController setSpeakerRecognitionScores:]
  -[CSSpeechController setSpeechEndHostTimeEstimator:]
  -[CSSpeechController playbackRoute]
  -[CSSpeechController getVolumeForTTSType:]
  -[CSSpeechController _doActivateAudioSessionWithReason:error:]
  -[CSSpeechController volumeMonitor]
  -[CSSpeechController setIsAudioSessionActivated:]
  -[CSSpeechController serverLoggingWriter]
  -[CSSpeechController setSessionProvider:]
  -[CSSpeechController voiceTriggerInfo]
  -[CSSpeechController prewarmAudioSession]
  -[CSSpeechController alertProvider]
  -[CSSpeechController isNarrowBand]
  -[CSSpeechController activeChannel]
  -[CSSpeechController setDidDeliverFirstSpeechPacket:]
  -[CSSpeechController startRecording:]
  -[CSSpeechController setAudioSessionActivationDelay:]
  -[CSSpeechController _setTimerIsPlaying:]
  -[CSSpeechController _shouldSetStartSampleCountForRTS]
  -[CSSpeechController prepareRecordWithSettings:error:]
  -[CSSpeechController setIsSoundPlaying:]
  -[CSSpeechController peakPowerForChannel:]
  -[CSSpeechController _shouldSchedulePhaticAtStartRecording]
  -[CSSpeechController didDeliverFirstSpeechPacket]
  -[CSSpeechController updateEndpointerThreshold:]
  -[CSSpeechController stopEndpointer]
  -[CSSpeechController _fetchLastTriggerInfo]
  -[CSSpeechController setSpeakerIdDelegate:]
  -[CSSpeechController reset]
  -[CSSpeechController setupStarted]
  -[CSSpeechController isAudioSessionActivated]
  -[CSSpeechController getSmartSiriVolume]
  -[CSSpeechController setCanPerformDelayedStop:]
  -[CSSpeechController decoderProcessedSampleCountForTV]
  -[CSSpeechController setRequestedStopRecordingOptions:]
  -[CSSpeechController speakerRecognitionScores]
  -[CSSpeechController _setupSpeakerRecognitionController]
  -[CSSpeechController pendingAudioSessionActivationToken]
  -[CSSpeechController _fetchAudioDecoderForTV:]
  -[CSSpeechController audioSessionProvider:providerInvalidated:]
  -[CSSpeechController _teardownAudioProviderIfNeeded]
  -[CSSpeechController setSmartSiriVolumeDirection:]
  -[CSSpeechController setRequestMHUUID:]
  -[CSSpeechController _shouldFetchVoiceTriggerInfo]
  -[CSSpeechController setSynchronousCallbackEnabled:]
  -[CSSpeechController didDeliverLastBuffer]
  -[CSSpeechController audioSessionProviderBeginInterruption:]
  -[CSSpeechController speakerRecognitionController:hasSpeakerInfo:]
  -[CSSpeechController _contextToString:]
  -[CSSpeechController setSupportTriagleModeSessionActivationRetry:]
  -[CSSpeechController setIsRemoteVADAvailableStream:]
  -[CSSpeechController setSpeakerRecognitionController:]
  -[CSSpeechController pendingAudioSessionActivationCompletion]
  -[CSSpeechController _shouldFetchRaiseToSpeakInfo]
  -[CSSpeechController speakerRecognitionProxy]
  -[CSSpeechController outputReferenceChannel]
  -[CSSpeechController initWithEndpointId:xpcClientFactory:endpointer:continuousVoiceTrigger:siriVolumeController:mediaPlayingMonitor:alarmMonitor:timerMonitor:sacInfoMonitor:audioSessionController:supportPhatic:supportHearstVoiceTrigger:supportTriagleModeSessionActivationRetry:supportSessionActivateDelay:supportLazySessionActivtion:]
  -[CSSpeechController setMyriadPreventingTwoShotFeedback:]
  -[CSSpeechController _initializeMediaPlayingState]
  -[CSSpeechController setSsvLogFilePath:]
  -[CSSpeechController canPerformDelayedStop]
  -[CSSpeechController _processSpeakerRecognitionResult:]
  -[CSSpeechController _refreshSpeakerRecognitionAssets]
  -[CSSpeechController setIsSiriClientListening:]
  -[CSSpeechController setCurrentRecordContext:error:]
  -[CSSpeechController endpointerProxy]
  -[CSSpeechController _createTimerMonitor]
  -[CSSpeechController sacInfoMonitor]
  -[CSSpeechController cachedAvgPower]
  -[CSSpeechController audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
  -[CSSpeechController requestMHUUID]
  -[CSSpeechController isSmartSiriVolumeAvailable]
  -[CSSpeechController speakerIdDelegate]
  -[CSSpeechController recordDeviceInfo]
  -[CSSpeechController pendingAudioSessionActivationReason]
  -[CSSpeechController setAudioMetricProvider:]
  -[CSSpeechController speakerRecognitionController]
  -[CSSpeechController _languageDetectorOptionFromSettings:]
  -[CSSpeechController _createAudioPowerMeterIfNeeded]
  -[CSSpeechController requestedStopRecordingOptions]
  -[CSSpeechController _isDelayedDuckingSupportedContext]
  -[CSSpeechController setAlarmMonitor:]
  -[CSSpeechController delegate]
  -[CSSpeechController _scheduleActivateAudioSessionWithDelay:sessionActivateReason:scheduleReason:validator:completion:]
  -[CSSpeechController setDuckAudioXPCClient:]
  -[CSSpeechController _isDuckingAvailableRoute:]
  -[CSSpeechController ssrAssets]
  -[CSSpeechController stopRecordingWithOptions:]
  -[CSSpeechController _fetchFallbackAudioSessionReleaseProviding]
  -[CSSpeechController setAlertProvider:]
  -[CSSpeechController setMediaPlayingObserverQueue:]
  -[CSSpeechController audioSessionProvider:didChangeContext:]
  -[CSSpeechController setEndpointAnalyzerDelegate:]
  -[CSSpeechController updateEndpointerDelayedTrigger:]
  -[CSSpeechController audioSessionProviderEndInterruption:]
  -[CSSpeechController setStreamProvider:]
  -[CSSpeechController _deviceAudioLoggingWithFileWriter:]
  -[CSSpeechController setEndpointerProxy:]
  -[CSSpeechController setMaxAllowedTrailingSamplesAfterSchedulingStop:]
  -[CSSpeechController _mapScoresToSharedSiriId:]
  -[CSSpeechController setAlertSoundFromURL:forType:]
  -[CSSpeechController setSacInfoMonitor:]
  -[CSSpeechController setEndpointerOperationMode:]
  -[CSSpeechController updateMeters]
  -[CSSpeechController lastEndOfVoiceActivityTime]
  -[CSSpeechController setTwoShotNotificationEnabled:]
  -[CSSpeechController _shouldUseLanguageDetector:]
  -[CSSpeechController _createAlarmMonitor]
  -[CSSpeechController _setupAudioProviderFromXPC:]
  -[CSSpeechController ssvLogFilePath]
  -[CSSpeechController recordSettings]
  -[CSSpeechController setSetupStarted:]
  -[CSSpeechController setAudioStream:]
  -[CSSpeechController _canPlayPhaticDuringMediaPlayback]
  -[CSSpeechController nowPlayingObserver:playbackStateDidChangeFrom:to:lastPlayingDate:]
  -[CSSpeechController isSoundPlaying]
  -[CSSpeechController didReceiveSpeakerRecognitionScoreCard:]
  -[CSSpeechController audioStreamProvider:audioChunkForTVAvailable:]
  -[CSSpeechController setAudioFileWriter:]
  -[CSSpeechController setSsrAssets:]
  -[CSSpeechController _createMediaPlayingMonitor]
  -[CSSpeechController keywordDetectorDidDetectKeyword]
  -[CSSpeechController _initializeAlarmState]
  -[CSSpeechController CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:]
  -[CSSpeechController isSiriClientListening]
  -[CSSpeechController _setSoundPlayingState]
  -[CSSpeechController stopRecording]
  -[CSSpeechController audioSessionProvider:willSetAudioSessionActive:]
  -[CSSpeechController sessionProvider]
  -[CSSpeechController setSpeakerRecognitionProxy:]
  -[CSSpeechController _shouldTrackLaunchLatency]
  -[CSSpeechController clockAlarmObserver:snapshotDidUpdateFrom:to:]
  -[CSSpeechController setShouldDisableEncoding:]
  -[CSSpeechController endpointer:detectedTwoShotAtTime:]
  -[CSSpeechController numTrailingSamplesAfterSchedulingStop]
  -[CSSpeechController setIsOpus:]
  -[CSSpeechController didFinishSpeakerRecognition:]
  -[CSSpeechController getRecordBufferDuration]
  -[CSSpeechController setPowerMeter:]
  -[CSSpeechController setRecordEventUUID:]
  -[CSSpeechController setSmartSiriVolumePercentage:]
  -[CSSpeechController _updateRecordContextIfNeeded:]
  -[CSSpeechController setIsTimerPlaying:]
  -[CSSpeechController audioDecoderDidDecodePackets:audioStreamHandleId:buffer:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:]
  -[CSSpeechController setNeedsPostGain:]
  -[CSSpeechController audioStreamProvider:audioBufferAvailable:]
  -[CSSpeechController setDecoderProcessedSampleCountForTV:]
  -[CSSpeechController resetAudioSession]
  -[CSSpeechController _audioStreamProvdider:audioBufferAvailable:]
  -[CSSpeechController setRecordBufferDuration:]
  -[CSSpeechController setCachedPeakPower:]
  -[CSSpeechController _shouldReportEstimatedSpeechEndHostTime]
  -[CSSpeechController languageDetectorSetMostRecentRecognitionLanguage:]
  -[CSSpeechController startController]
  -[CSSpeechController audioStream]
  -[CSSpeechController setDecodersForTV:]
  -[CSSpeechController alertStartTime]
  -[CSSpeechController mediaPlayingMonitor]
  -[CSSpeechController CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
  -[CSSpeechController cancelCurrentLanguageDetectorRequest]
  -[CSSpeechController supportLazySessionActivtion]
  -[CSSpeechController setSupportHearstVoiceTrigger:]
  -[CSSpeechController decodersForTV]
  -[CSSpeechController peakPowerForOutputReference]
  -[CSSpeechController setMeteringEnabled:]
  -[CSSpeechController didTTSVolumeChange:forReason:]
  -[CSSpeechController _setAlarmIsPlaying:]
  -[CSSpeechController voiceProfileManager]
  -[CSSpeechController setAudioMeterProvider:]


CSSSRXPCClient : NSObject <CSSSRXPCServiceDelegate>
 @property  NSXPCConnection *ssrConnection
 @property  NSObject<OS_dispatch_queue> *queue
 @property  id remoteObjectProxy
 @property  <CSSSRXPCClientDelegate> *delegate

  // instance methods
  -[CSSSRXPCClient .cxx_destruct]
  -[CSSSRXPCClient setRemoteObjectProxy:]
  -[CSSSRXPCClient remoteObjectProxy]
  -[CSSSRXPCClient setDelegate:]
  -[CSSSRXPCClient init]
  -[CSSSRXPCClient setQueue:]
  -[CSSSRXPCClient delegate]
  -[CSSSRXPCClient queue]
  -[CSSSRXPCClient dealloc]
  -[CSSSRXPCClient didReceiveSpeakerRecognitionScoreCard:]
  -[CSSSRXPCClient invalidate]
  -[CSSSRXPCClient didFinishSpeakerRecognition:]
  -[CSSSRXPCClient startXPCConnection]
  -[CSSSRXPCClient _getRemoteServiceProxyObject]
  -[CSSSRXPCClient _createClientConnection]
  -[CSSSRXPCClient ssrConnection]
  -[CSSSRXPCClient setSsrConnection:]


CSAttSiriAttendingTriggerEventInfo : NSObject <NSSecureCoding>
 @property  CSAttSiriRequestContext *ctx
 @property  NSString *detectedToken
 @property  unsigned long triggerMachTime
 @property  unsigned long triggerAbsStartSampleId

  // class methods
  +[CSAttSiriAttendingTriggerEventInfo supportsSecureCoding]

  // instance methods
  -[CSAttSiriAttendingTriggerEventInfo ctx]
  -[CSAttSiriAttendingTriggerEventInfo initWithCoder:]
  -[CSAttSiriAttendingTriggerEventInfo .cxx_destruct]
  -[CSAttSiriAttendingTriggerEventInfo setCtx:]
  -[CSAttSiriAttendingTriggerEventInfo encodeWithCoder:]
  -[CSAttSiriAttendingTriggerEventInfo detectedToken]
  -[CSAttSiriAttendingTriggerEventInfo setDetectedToken:]
  -[CSAttSiriAttendingTriggerEventInfo triggerMachTime]
  -[CSAttSiriAttendingTriggerEventInfo setTriggerMachTime:]
  -[CSAttSiriAttendingTriggerEventInfo triggerAbsStartSampleId]
  -[CSAttSiriAttendingTriggerEventInfo setTriggerAbsStartSampleId:]


CSSiriAudioPlaybackSessionImplAVPlayerBased : NSObject <CSSiriAudioPlaybackSession>
 @property  AFAudioPlaybackRequest *request
 @property  unsigned long options
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased options]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased .cxx_destruct]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased request]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased _stop:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased playerItemDidPlayToEndTime:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased _prepareWithOptions:audioSession:completion:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased _handleBeginInterruption]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased _handleEndInterruption:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased _resetPlayerItem]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased _finalizeWithError:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased playerItemFailedToPlayToEndTime:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased initWithQueue:request:options:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased prepareWithOptions:audioSession:completion:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased stop:completion:]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased handleBeginInterruption]
  -[CSSiriAudioPlaybackSessionImplAVPlayerBased handleEndInterruption:]


SpeechModelTrainingClient : NSObject
  // class methods
  +[SpeechModelTrainingClient initialize]

  // instance methods
  -[SpeechModelTrainingClient initWithServiceName:]
  -[SpeechModelTrainingClient .cxx_destruct]
  -[SpeechModelTrainingClient init]
  -[SpeechModelTrainingClient dealloc]
  -[SpeechModelTrainingClient invalidate]
  -[SpeechModelTrainingClient _serviceProxyWithErrorHandler:]
  -[SpeechModelTrainingClient trainPersonalizedLMWithLanguage:configuration:asset:fides:activity:completion:]
  -[SpeechModelTrainingClient trainPersonalizedLMWithLanguage:configuration:asset:directory:completion:]
  -[SpeechModelTrainingClient trainPersonalizedLMWithLanguage:configuration:fides:activity:completion:]
  -[SpeechModelTrainingClient trainGlobalNNLMwithFidesSessionURL:completion:]
  -[SpeechModelTrainingClient buildPhoneticMatchWithLanguage:saveIntermediateFsts:completion:]
  -[SpeechModelTrainingClient generateAudioWithTexts:language:completion:]
  -[SpeechModelTrainingClient upperCaseString:completion:]
  -[SpeechModelTrainingClient trainPersonalizedLMWithLanguage:directory:completion:]


CSVoiceTriggerAssetHandlerDarwin : CSVoiceTriggerAssetHandler <CSRemoteAssetManagerDelegate, CSLanguageCodeUpdateMonitorDelegate>
 @property  CSAsset *cachedAsset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerAssetHandlerDarwin _getVoiceTriggerAssetFromAssetManager:]
  -[CSVoiceTriggerAssetHandlerDarwin cachedAsset]
  -[CSVoiceTriggerAssetHandlerDarwin .cxx_destruct]
  -[CSVoiceTriggerAssetHandlerDarwin setCachedAsset:]
  -[CSVoiceTriggerAssetHandlerDarwin init]
  -[CSVoiceTriggerAssetHandlerDarwin _checkNewAssetAvailablity]
  -[CSVoiceTriggerAssetHandlerDarwin getVoiceTriggerAssetWithEndpointId:completion:]
  -[CSVoiceTriggerAssetHandlerDarwin start]
  -[CSVoiceTriggerAssetHandlerDarwin CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
  -[CSVoiceTriggerAssetHandlerDarwin CSRemoteAssetManagerDidDownloadNewAsset:]


CSXPCClientFactory : NSObject
  // class methods
  +[CSXPCClientFactory defaultFactory]

  // instance methods
  -[CSXPCClientFactory clientForMacOSDuckAudioDevice]
  -[CSXPCClientFactory clientForSmartSiriVolumeProviding]
  -[CSXPCClientFactory clientForAudioSessionInfoProviding]
  -[CSXPCClientFactory clientForFallbackAudioSessionReleaseProviding]
  -[CSXPCClientFactory clientForAudioProviding]


NviSignalProvidersController : NSObject
 @property  <NviAssetsProvider> *assetsProvider
 @property  NSDictionary *dataSrcMap
 @property  NSMapTable *sigProvidersMap
 @property  NSHashTable *currActiveSigProvTypes
 @property  NSHashTable *currActiveDataSourceTypes

  // class methods
  +[NviSignalProvidersController initialize]

  // instance methods
  -[NviSignalProvidersController .cxx_destruct]
  -[NviSignalProvidersController stop]
  -[NviSignalProvidersController reset]
  -[NviSignalProvidersController dealloc]
  -[NviSignalProvidersController assetsProvider]
  -[NviSignalProvidersController setAssetsProvider:]
  -[NviSignalProvidersController _setupSignalProviders:]
  -[NviSignalProvidersController _startSignalProvidersWithContext:]
  -[NviSignalProvidersController _startDataSourcesWithContext:]
  -[NviSignalProvidersController _stopDataSources]
  -[NviSignalProvidersController _stopCurrentlyRunningSignalProviders]
  -[NviSignalProvidersController _iterateSignalMask:withHandler:]
  -[NviSignalProvidersController initWithAssetsProvider:dataSourceMap:signalProviderToDataSourceMap:]
  -[NviSignalProvidersController startWithNviContext:]
  -[NviSignalProvidersController registerSignalProviderDelegate:forSignalTypes:]
  -[NviSignalProvidersController unregisterSignalProviderDelegate:forSignalType:]
  -[NviSignalProvidersController registerSignalProviderDelegateForAllSignalTypes:]
  -[NviSignalProvidersController unregisterSignalProviderDelegateForAllSignalTypes:]
  -[NviSignalProvidersController dataSrcMap]
  -[NviSignalProvidersController setDataSrcMap:]
  -[NviSignalProvidersController sigProvidersMap]
  -[NviSignalProvidersController setSigProvidersMap:]
  -[NviSignalProvidersController currActiveSigProvTypes]
  -[NviSignalProvidersController setCurrActiveSigProvTypes:]
  -[NviSignalProvidersController currActiveDataSourceTypes]
  -[NviSignalProvidersController setCurrActiveDataSourceTypes:]


CSVoiceTriggerFirstPassHearstAP : NSObject <CSAudioStreamProvidingDelegate, CSKeywordAnalyzerNDAPIScoreDelegate, CSVoiceTriggerEnabledMonitorDelegate, CSSiriClientBehaviorMonitorDelegate, CSOpportuneSpeakEventMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAsset *currentAsset
 @property  CSKeywordAnalyzerNDAPI *keywordAnalyzerNDAPI
 @property  CSAudioStream *audioStream
 @property  NSObject<OS_dispatch_group> *recordingWillStartGroup
 @property  BOOL isAPHearstFirstPassEnabled
 @property  float keywordThreshold
 @property  CSVoiceTriggerSecondPass *voiceTriggerSecondPass
 @property  CSOSTransaction *secondPassTransaction
 @property  BOOL isSiriClientListening
 @property  BOOL isSecondPassRunning
 @property  unsigned long secondChanceHotTillMachTime
 @property  NSString *deviceId
 @property  CSAudioProvider *audioProvider
 @property  NSString *opportuneSpeakAudioProviderUUID
 @property  NSMutableArray *audioStreamHoldings
 @property  BOOL isVoiceTriggerEnabled
 @property  CSVoiceTriggerEnabledMonitor *voiceTriggerEnabledMonitor
 @property  CSSiriClientBehaviorMonitor *siriClientBehaviorMonitor
 @property  CSSpeechManager *speechManager
 @property  CSOpportuneSpeakEventMonitor *opportuneSpeakEventMonitor
 @property  CSPhoneCallStateMonitor *phoneCallStateMonitor
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerFirstPassHearstAP keywordAnalyzerNDAPI:hasResultAvailable:forChannel:]
  -[CSVoiceTriggerFirstPassHearstAP audioStreamHoldings]
  -[CSVoiceTriggerFirstPassHearstAP setDeviceId:]
  -[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSVoiceTriggerFirstPassHearstAP opportuneSpeakEventMonitor:didStreamStateChanged:]
  -[CSVoiceTriggerFirstPassHearstAP setVoiceTriggerSecondPass:]
  -[CSVoiceTriggerFirstPassHearstAP deviceId]
  -[CSVoiceTriggerFirstPassHearstAP keywordThreshold]
  -[CSVoiceTriggerFirstPassHearstAP audioStreamProvider:didStopStreamUnexpectly:]
  -[CSVoiceTriggerFirstPassHearstAP speechManager]
  -[CSVoiceTriggerFirstPassHearstAP _reset]
  -[CSVoiceTriggerFirstPassHearstAP voiceTriggerSecondPass]
  -[CSVoiceTriggerFirstPassHearstAP recordingWillStartGroup]
  -[CSVoiceTriggerFirstPassHearstAP setCurrentAsset:]
  -[CSVoiceTriggerFirstPassHearstAP .cxx_destruct]
  -[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSVoiceTriggerFirstPassHearstAP secondPassTransaction]
  -[CSVoiceTriggerFirstPassHearstAP setIsSecondPassRunning:]
  -[CSVoiceTriggerFirstPassHearstAP setDelegate:]
  -[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSVoiceTriggerFirstPassHearstAP setAsset:]
  -[CSVoiceTriggerFirstPassHearstAP setSecondPassTransaction:]
  -[CSVoiceTriggerFirstPassHearstAP _handleSecondPassResult:voiceTriggerInfo:deviceId:secondChanceCandidate:error:]
  -[CSVoiceTriggerFirstPassHearstAP setKeywordThreshold:]
  -[CSVoiceTriggerFirstPassHearstAP init]
  -[CSVoiceTriggerFirstPassHearstAP setQueue:]
  -[CSVoiceTriggerFirstPassHearstAP _cancelLastAudioStreamHold]
  -[CSVoiceTriggerFirstPassHearstAP setSpeechManager:]
  -[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSVoiceTriggerFirstPassHearstAP _addAudioStreamHold:]
  -[CSVoiceTriggerFirstPassHearstAP CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]
  -[CSVoiceTriggerFirstPassHearstAP setRecordingWillStartGroup:]
  -[CSVoiceTriggerFirstPassHearstAP setIsSiriClientListening:]
  -[CSVoiceTriggerFirstPassHearstAP setAudioProvider:]
  -[CSVoiceTriggerFirstPassHearstAP audioProvider]
  -[CSVoiceTriggerFirstPassHearstAP delegate]
  -[CSVoiceTriggerFirstPassHearstAP isSecondPassRunning]
  -[CSVoiceTriggerFirstPassHearstAP _stopListening]
  -[CSVoiceTriggerFirstPassHearstAP currentAsset]
  -[CSVoiceTriggerFirstPassHearstAP queue]
  -[CSVoiceTriggerFirstPassHearstAP start]
  -[CSVoiceTriggerFirstPassHearstAP setAudioStream:]
  -[CSVoiceTriggerFirstPassHearstAP setAudioStreamHoldings:]
  -[CSVoiceTriggerFirstPassHearstAP audioStreamProvider:audioChunkForTVAvailable:]
  -[CSVoiceTriggerFirstPassHearstAP setSecondChanceHotTillMachTime:]
  -[CSVoiceTriggerFirstPassHearstAP isSiriClientListening]
  -[CSVoiceTriggerFirstPassHearstAP secondChanceHotTillMachTime]
  -[CSVoiceTriggerFirstPassHearstAP audioStreamProvider:audioBufferAvailable:]
  -[CSVoiceTriggerFirstPassHearstAP _setAsset:]
  -[CSVoiceTriggerFirstPassHearstAP audioStream]
  -[CSVoiceTriggerFirstPassHearstAP phoneCallStateMonitor]
  -[CSVoiceTriggerFirstPassHearstAP setPhoneCallStateMonitor:]
  -[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor]
  -[CSVoiceTriggerFirstPassHearstAP setSiriClientBehaviorMonitor:]
  -[CSVoiceTriggerFirstPassHearstAP voiceTriggerEnabledMonitor]
  -[CSVoiceTriggerFirstPassHearstAP setVoiceTriggerEnabledMonitor:]
  -[CSVoiceTriggerFirstPassHearstAP _teardownSecondPass]
  -[CSVoiceTriggerFirstPassHearstAP initWithSpeechManager:voiceTriggerEnabledMonitor:siriClientBehaviorMonitor:opportuneSpeakEventMonitor:phoneCallStateMonitor:]
  -[CSVoiceTriggerFirstPassHearstAP _shouldProcessAudio]
  -[CSVoiceTriggerFirstPassHearstAP _createSecondPass]
  -[CSVoiceTriggerFirstPassHearstAP _startListenWithAudioProviderUUID:completion:]
  -[CSVoiceTriggerFirstPassHearstAP _shouldHearstAPModeEnabled]
  -[CSVoiceTriggerFirstPassHearstAP _transitHearstAPEnable:]
  -[CSVoiceTriggerFirstPassHearstAP shouldProcessAudio:]
  -[CSVoiceTriggerFirstPassHearstAP keywordAnalyzerNDAPI]
  -[CSVoiceTriggerFirstPassHearstAP setKeywordAnalyzerNDAPI:]
  -[CSVoiceTriggerFirstPassHearstAP isAPHearstFirstPassEnabled]
  -[CSVoiceTriggerFirstPassHearstAP setIsAPHearstFirstPassEnabled:]
  -[CSVoiceTriggerFirstPassHearstAP opportuneSpeakAudioProviderUUID]
  -[CSVoiceTriggerFirstPassHearstAP setOpportuneSpeakAudioProviderUUID:]
  -[CSVoiceTriggerFirstPassHearstAP isVoiceTriggerEnabled]
  -[CSVoiceTriggerFirstPassHearstAP setIsVoiceTriggerEnabled:]
  -[CSVoiceTriggerFirstPassHearstAP opportuneSpeakEventMonitor]
  -[CSVoiceTriggerFirstPassHearstAP setOpportuneSpeakEventMonitor:]


CSXPCClient : NSObject <CSAudioSessionProviding, CSFallbackAudioSessionReleaseProviding, CSAudioStreamProviding, CSAudioAlertProviding, CSAudioSessionInfoProviding, CSAudioMeterProviding, CSAudioMetricProviding, CSAudioTimeConversionProviding, CSTriggerInfoProviding>
 @property  NSObject<OS_xpc_object> *xpcConnection
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  NSObject<OS_dispatch_queue> *xpcReplyQueue
 @property  NSObject<OS_dispatch_queue> *xpcClientQueue
 @property  CSAudioStream *audioStream
 @property  NSMutableSet *activationAssertions
 @property  NSHashTable *audioSessionInfoObservers
 @property  unsigned long xpcClientType
 @property  <CSAudioSessionProvidingDelegate> *audioSessionProvidingDelegate
 @property  <CSAudioStreamProvidingDelegate> *audioStreamProvidingDelegate
 @property  <CSAudioAlertProvidingDelegate> *audioAlertProvidingDelegate
 @property  <CSXPCClientDelegate> *delegate
 @property  NSString *UUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSXPCClient createPrepareAudioStreamMessageWithRequest:]
  +[CSXPCClient createStartAudioStreamMessageWithOption:]
  +[CSXPCClient createStopAudioStreamMessage]
  +[CSXPCClient createAudioStreamMessageWithRequest:]

  // instance methods
  -[CSXPCClient connect]
  -[CSXPCClient isRecording]
  -[CSXPCClient _disconnect]
  -[CSXPCClient averagePowerForChannel:]
  -[CSXPCClient setXpcConnection:]
  -[CSXPCClient unregisterObserver:]
  -[CSXPCClient _handleSessionInfoProvidingDelegateMessageBody:]
  -[CSXPCClient duckOthersOption]
  -[CSXPCClient xpcConnection]
  -[CSXPCClient disconnect]
  -[CSXPCClient playAlertSoundForType:]
  -[CSXPCClient _handleSessionProvidingDelegateMessageBody:]
  -[CSXPCClient UUID]
  -[CSXPCClient initWithType:]
  -[CSXPCClient registerObserver:]
  -[CSXPCClient targetQueue]
  -[CSXPCClient reportsDynamicActivityAttribute:bundleId:]
  -[CSXPCClient isConnected]
  -[CSXPCClient setAudioAlertProvidingDelegate:]
  -[CSXPCClient _handleSessionProvidingDelegateBeginInterruption:]
  -[CSXPCClient _handleStreamProvidingDelegateChunkAvailable:]
  -[CSXPCClient _handleStreamProvidingDelegateMessageBody:]
  -[CSXPCClient enableSmartRoutingConsideration:]
  -[CSXPCClient setTargetQueue:]
  -[CSXPCClient setDuckOthersOption:]
  -[CSXPCClient .cxx_destruct]
  -[CSXPCClient recordRoute]
  -[CSXPCClient _handleListenerEvent:]
  -[CSXPCClient prewarmAudioSessionWithError:]
  -[CSXPCClient setCurrentContext:error:]
  -[CSXPCClient _handleAlertProvidingDelegateDidFinishAlertPlayback:]
  -[CSXPCClient setActivationAssertions:]
  -[CSXPCClient setDelegate:]
  -[CSXPCClient sendMessageAsync:completion:]
  -[CSXPCClient _handleListenerMessage:]
  -[CSXPCClient _handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:]
  -[CSXPCClient _handleAlertProvidingDelegateMessageBody:]
  -[CSXPCClient cancelAudioStreamHold:]
  -[CSXPCClient _handleListenerError:]
  -[CSXPCClient _handleSessionProvidingDelegateEndInterruption:]
  -[CSXPCClient audioDeviceInfo]
  -[CSXPCClient fallbackDeactivateAudioSession:error:]
  -[CSXPCClient prepareAudioStreamSync:request:error:]
  -[CSXPCClient xpcReplyQueue]
  -[CSXPCClient triggerInfoForContext:completion:]
  -[CSXPCClient startAudioStream:option:completion:]
  -[CSXPCClient _handleSessionInfoProvidingDelegateInterruptionNotification:]
  -[CSXPCClient playRecordStartingAlertAndResetEndpointer]
  -[CSXPCClient playbackRoute]
  -[CSXPCClient audioStreamWithRequest:streamName:completion:]
  -[CSXPCClient hostTimeFromSampleCount:]
  -[CSXPCClient isNarrowBand]
  -[CSXPCClient audioSessionIdForDeviceId:]
  -[CSXPCClient _handleStreamProvidingDelegateDidStopUnexpectly:]
  -[CSXPCClient audioSessionInfoObservers]
  -[CSXPCClient _handleSessionProvidingDelegateDidSetAudioSession:]
  -[CSXPCClient activateAudioSessionWithReason:dynamicAttribute:bundleID:error:]
  -[CSXPCClient prepareAudioProviderWithContext:clientType:error:]
  -[CSXPCClient setAudioSessionProvidingDelegate:]
  -[CSXPCClient activationAssertions]
  -[CSXPCClient enableMiniDucking:]
  -[CSXPCClient peakPowerForChannel:]
  -[CSXPCClient setXpcClientType:]
  -[CSXPCClient setXpcClientQueue:]
  -[CSXPCClient audioMetric]
  -[CSXPCClient audioStreamProvidingDelegate]
  -[CSXPCClient audioChunkToEndFrom:channelIdx:]
  -[CSXPCClient attachTandemStream:toPrimaryStream:completion:]
  -[CSXPCClient sampleCountFromHostTime:]
  -[CSXPCClient deactivateAudioSession:error:]
  -[CSXPCClient configureAlertBehavior:]
  -[CSXPCClient pingpong:]
  -[CSXPCClient recordDeviceInfo]
  -[CSXPCClient _sendXPCClientType]
  -[CSXPCClient _handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:]
  -[CSXPCClient _handleSessionProvidingDelegateBeginInterruptionWithContext:]
  -[CSXPCClient delegate]
  -[CSXPCClient audioStreamId]
  -[CSXPCClient _handleSessionInfoProvidingDelegateRouteChangeNotification:]
  -[CSXPCClient setAudioAlertDelegate:]
  -[CSXPCClient _handleSessionProvidingDelegateWillSetAudioSession:]
  -[CSXPCClient setAudioSessionInfoObservers:]
  -[CSXPCClient setAlertSoundFromURL:forType:]
  -[CSXPCClient updateMeters]
  -[CSXPCClient audioSessionProvidingDelegate]
  -[CSXPCClient recordSettings]
  -[CSXPCClient saveRecordingBufferToEndFrom:toURL:]
  -[CSXPCClient _sendMessageAsync:completion:]
  -[CSXPCClient audioAlertProvidingDelegate]
  -[CSXPCClient audioChunkFrom:to:channelIdx:]
  -[CSXPCClient dealloc]
  -[CSXPCClient setAudioStream:]
  -[CSXPCClient setAnnounceCallsEnabled:withStreamHandleID:]
  -[CSXPCClient prepareAudioStream:request:completion:]
  -[CSXPCClient xpcClientType]
  -[CSXPCClient xpcClientQueue]
  -[CSXPCClient _handleStreamProvidingDelegateChunkForTVAvailable:]
  -[CSXPCClient setAudioSessionDelegate:]
  -[CSXPCClient _decodeError:]
  -[CSXPCClient holdAudioStreamWithDescription:timeout:]
  -[CSXPCClient setAudioStreamProvidingDelegate:]
  -[CSXPCClient audioChunkToEndFrom:]
  -[CSXPCClient _handleListenerDisconnectedError:]
  -[CSXPCClient _handleSessionProvidingDelegateStreamHandleIdInvalidation:]
  -[CSXPCClient audioChunkFrom:to:]
  -[CSXPCClient saveRecordingBufferFrom:to:toURL:]
  -[CSXPCClient _handleSessionProvidingDelegateDidChangeContext:]
  -[CSXPCClient audioStreamWithRequest:streamName:error:]
  -[CSXPCClient _handleStreamProvidingDelegateHardwareConfigChange:]
  -[CSXPCClient audioStream]
  -[CSXPCClient alertStartTime]
  -[CSXPCClient sendMessageAndReplySync:error:]
  -[CSXPCClient stopAudioStream:option:completion:]
  -[CSXPCClient setMeteringEnabled:]
  -[CSXPCClient setXpcReplyQueue:]
  -[CSXPCClient acousticSLResultForContext:completion:]


CSStateMachine : NSObject
 @property  long long initialState
 @property  NSMutableDictionary *transitions
 @property  NSMutableDictionary *eventToStateTransitions
 @property  <CSStateMachineDelegate> *delegate
 @property  long long currentState

  // instance methods
  -[CSStateMachine setTransitions:]
  -[CSStateMachine initialState]
  -[CSStateMachine setInitialState:]
  -[CSStateMachine transitions]
  -[CSStateMachine .cxx_destruct]
  -[CSStateMachine performTransitionForEvent:]
  -[CSStateMachine setDelegate:]
  -[CSStateMachine addTransitionFromAnyStateTo:for:]
  -[CSStateMachine addTransitionFrom:to:for:]
  -[CSStateMachine reset]
  -[CSStateMachine currentState]
  -[CSStateMachine eventToStateTransitions]
  -[CSStateMachine setEventToStateTransitions:]
  -[CSStateMachine delegate]
  -[CSStateMachine initWithInitialState:]


CSEventMonitor : NSObject
  // instance methods
  -[CSEventMonitor _stopMonitoring]
  -[CSEventMonitor enumerateObservers:]
  -[CSEventMonitor .cxx_destruct]
  -[CSEventMonitor _startMonitoringWithQueue:]
  -[CSEventMonitor init]
  -[CSEventMonitor addObserver:]
  -[CSEventMonitor type]
  -[CSEventMonitor notifyObserver:]
  -[CSEventMonitor dealloc]
  -[CSEventMonitor removeObserver:]
  -[CSEventMonitor enumerateObserversInQueue:]


CSSmartSiriVolumeManager : NSObject <CSVoiceTriggerDelegate, CSAlarmMonitorDelegate, CSTimerMonitorDelegate, CSVolumeMonitorDelegate, CSAutomaticVolumeEnabledMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSSmartSiriVolumeProcessor> *smartSiriVolume
 @property  <CSConnectionServiceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSSmartSiriVolumeManager sharedInstance]

  // instance methods
  -[CSSmartSiriVolumeManager voiceTriggerDidDetectKeyword:deviceId:]
  -[CSSmartSiriVolumeManager .cxx_destruct]
  -[CSSmartSiriVolumeManager setPermanentVolumeOffsetWithDirection:]
  -[CSSmartSiriVolumeManager setDelegate:]
  -[CSSmartSiriVolumeManager setAsset:]
  -[CSSmartSiriVolumeManager setQueue:]
  -[CSSmartSiriVolumeManager setSmartSiriVolumeDirection:]
  -[CSSmartSiriVolumeManager delegate]
  -[CSSmartSiriVolumeManager queue]
  -[CSSmartSiriVolumeManager setSmartSiriVolumePercentage:]
  -[CSSmartSiriVolumeManager CSVolumeMonitor:didReceiveMusicVolumeChanged:]
  -[CSSmartSiriVolumeManager CSVolumeMonitor:didReceiveAlarmVolumeChanged:]
  -[CSSmartSiriVolumeManager CSTimerMonitor:didReceiveTimerChanged:]
  -[CSSmartSiriVolumeManager CSAlarmMonitor:didReceiveAlarmChanged:]
  -[CSSmartSiriVolumeManager startSmartSiriVolume]
  -[CSSmartSiriVolumeManager initWithSamplingRate:withAsset:]
  -[CSSmartSiriVolumeManager getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]
  -[CSSmartSiriVolumeManager CSAutomaticVolumeEnabledMonitor:didReceiveEnabled:]
  -[CSSmartSiriVolumeManager smartSiriVolume]
  -[CSSmartSiriVolumeManager setSmartSiriVolume:]


CSVoiceTriggerDataCollector : NSObject <CSSiriClientBehaviorMonitorDelegate, CSVoiceTriggerEnabledMonitorDelegate>
 @property  NSMutableArray *vteiList
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSDate *lastVTEnableDate
 @property  NSDate *lastVTDisableDate
 @property  NSArray *privacyApprovedFields
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSVoiceTriggerDataCollector sharedInstance]

  // instance methods
  -[CSVoiceTriggerDataCollector siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSVoiceTriggerDataCollector .cxx_destruct]
  -[CSVoiceTriggerDataCollector siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSVoiceTriggerDataCollector siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSVoiceTriggerDataCollector init]
  -[CSVoiceTriggerDataCollector setQueue:]
  -[CSVoiceTriggerDataCollector siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSVoiceTriggerDataCollector CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]
  -[CSVoiceTriggerDataCollector queue]
  -[CSVoiceTriggerDataCollector vteiList]
  -[CSVoiceTriggerDataCollector fetchVoiceTriggerHeartBeatMetrics]
  -[CSVoiceTriggerDataCollector _createAndSubmitRejectLoggingDictWithSource:withPHSAcceptInfo:]
  -[CSVoiceTriggerDataCollector _filteredVTEIArray]
  -[CSVoiceTriggerDataCollector _submitToggleReport]
  -[CSVoiceTriggerDataCollector addVTRejectEntry:truncateData:]
  -[CSVoiceTriggerDataCollector addVTAcceptEntryAndSubmit:]
  -[CSVoiceTriggerDataCollector setVteiList:]
  -[CSVoiceTriggerDataCollector lastVTEnableDate]
  -[CSVoiceTriggerDataCollector setLastVTEnableDate:]
  -[CSVoiceTriggerDataCollector lastVTDisableDate]
  -[CSVoiceTriggerDataCollector setLastVTDisableDate:]
  -[CSVoiceTriggerDataCollector privacyApprovedFields]
  -[CSVoiceTriggerDataCollector setPrivacyApprovedFields:]


CSAudioFileLog : NSObject
  // class methods
  +[CSAudioFileLog sharedInstance]

  // instance methods
  -[CSAudioFileLog .cxx_destruct]
  -[CSAudioFileLog _audioLogDirectory]
  -[CSAudioFileLog init]
  -[CSAudioFileLog _nowString]
  -[CSAudioFileLog startRecording]
  -[CSAudioFileLog dealloc]
  -[CSAudioFileLog stopRecording]
  -[CSAudioFileLog appendAudioData:]
  -[CSAudioFileLog _closeAudioFile]
  -[CSAudioFileLog _makeTimestampedAudioLogFilenameWithPrefix:suffix:]
  -[CSAudioFileLog _getOrCreateAudioLogDirectory]


CSVoiceTriggerFileLogger : NSObject <CSVoiceTriggerDelegate, CSSelfTriggerDetectorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSSpeechManager *speechManager
 @property  BOOL fileLoggingEnabled
 @property  BOOL geckoLoggingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerFileLogger voiceTriggerDidDetectKeyword:deviceId:]
  -[CSVoiceTriggerFileLogger speechManager]
  -[CSVoiceTriggerFileLogger _metaFilenameWithRootDir:prefix:deviceId:]
  -[CSVoiceTriggerFileLogger .cxx_destruct]
  -[CSVoiceTriggerFileLogger _timeStampString]
  -[CSVoiceTriggerFileLogger _audioLogDirectory]
  -[CSVoiceTriggerFileLogger geckoLoggingEnabled]
  -[CSVoiceTriggerFileLogger _shouldLogDeviceId:]
  -[CSVoiceTriggerFileLogger init]
  -[CSVoiceTriggerFileLogger setQueue:]
  -[CSVoiceTriggerFileLogger _logNearMissResult:metaFilePath:audioFilePath:completion:]
  -[CSVoiceTriggerFileLogger setFileLoggingEnabled:]
  -[CSVoiceTriggerFileLogger setSpeechManager:]
  -[CSVoiceTriggerFileLogger voiceTriggerDidDetectSpeakerReject:]
  -[CSVoiceTriggerFileLogger fileLoggingEnabled]
  -[CSVoiceTriggerFileLogger _clearOldGeckoLoggingFiles]
  -[CSVoiceTriggerFileLogger _shouldSkipLogging:]
  -[CSVoiceTriggerFileLogger _writeDictionary:toPath:]
  -[CSVoiceTriggerFileLogger voiceTriggerDidDetectNearMiss:deviceId:]
  -[CSVoiceTriggerFileLogger initWithSpeechManager:fileLoggingEnabled:geckoLoggingEnabled:]
  -[CSVoiceTriggerFileLogger queue]
  -[CSVoiceTriggerFileLogger _clearOldLoggingFiles]
  -[CSVoiceTriggerFileLogger _geckoLogDirectory]
  -[CSVoiceTriggerFileLogger selfTriggerDetector:didDetectSelfTrigger:]
  -[CSVoiceTriggerFileLogger setGeckoLoggingEnabled:]


CSActivationEvent : NSObject
 @property  NSString *UUID
 @property  unsigned long type
 @property  NSString *deviceId
 @property  NSDictionary *activationInfo
 @property  unsigned long hosttime
 @property  float vadScore
 @property  NSString *localizedDescription

  // class methods
  +[CSActivationEvent remoraVoiceTriggerEvent:activationInfo:hostTime:]
  +[CSActivationEvent jarvisVoiceTriggerEvent:activationInfo:hostTime:]
  +[CSActivationEvent remoraVoiceTriggerEvent:hostTime:]
  +[CSActivationEvent mediaserverdLaunchedEvent:]
  +[CSActivationEvent builtInMicVoiceTriggerEvent:hostTime:]
  +[CSActivationEvent remoteMicVADEvent:vadScore:hostTime:]
  +[CSActivationEvent remoteMicVoiceTriggerEvent:activationInfo:hostTime:]

  // instance methods
  -[CSActivationEvent initWithType:deviceId:activationInfo:hosttime:]
  -[CSActivationEvent xpcObject]
  -[CSActivationEvent UUID]
  -[CSActivationEvent localizedDescription]
  -[CSActivationEvent deviceId]
  -[CSActivationEvent initWithXPCObject:]
  -[CSActivationEvent .cxx_destruct]
  -[CSActivationEvent vadScore]
  -[CSActivationEvent hosttime]
  -[CSActivationEvent initWithType:deviceId:activationInfo:vadScore:hosttime:]
  -[CSActivationEvent _activationTypeString]
  -[CSActivationEvent type]
  -[CSActivationEvent activationInfo]


CoreSpeechXPCFakeModelMonitor : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  int fakeAssetRollNotificationRegistrationToken
 @property  NSString *lastFakeModelUsedHash
 @property  BOOL shouldRollFakeModel

  // instance methods
  -[CoreSpeechXPCFakeModelMonitor .cxx_destruct]
  -[CoreSpeechXPCFakeModelMonitor stop]
  -[CoreSpeechXPCFakeModelMonitor init]
  -[CoreSpeechXPCFakeModelMonitor setQueue:]
  -[CoreSpeechXPCFakeModelMonitor queue]
  -[CoreSpeechXPCFakeModelMonitor start]
  -[CoreSpeechXPCFakeModelMonitor _registerForFakeAssetRollNotification]
  -[CoreSpeechXPCFakeModelMonitor setShouldRollFakeModel:]
  -[CoreSpeechXPCFakeModelMonitor lastFakeModelUsedHash]
  -[CoreSpeechXPCFakeModelMonitor setLastFakeModelUsedHash:]
  -[CoreSpeechXPCFakeModelMonitor shouldRollFakeModel]
  -[CoreSpeechXPCFakeModelMonitor fakeAssetRollNotificationRegistrationToken]
  -[CoreSpeechXPCFakeModelMonitor setFakeAssetRollNotificationRegistrationToken:]


CSScreenLockMonitor : CSEventMonitor
  // class methods
  +[CSScreenLockMonitor sharedInstance]

  // instance methods
  -[CSScreenLockMonitor _stopMonitoring]
  -[CSScreenLockMonitor isScreenLocked]
  -[CSScreenLockMonitor _startMonitoringWithQueue:]
  -[CSScreenLockMonitor init]
  -[CSScreenLockMonitor screenLockStateChanged]
  -[CSScreenLockMonitor dealloc]
  -[CSScreenLockMonitor _notifyObserver:isScreenLocked:]
  -[CSScreenLockMonitor _queryIsScreenLocked]


CSSmartSiriVolumeUserIntent : NSObject
 @property  unsigned long userIntentType
 @property  unsigned long userIntentTime
 @property  unsigned long userIntentValidForSeconds
 @property  unsigned long latestVolumeTime
 @property  float userIntentVolume
 @property  float latestVolume
 @property  float permanentOffsetFactor
 @property  BOOL permanentOffsetIsEnabled

  // instance methods
  -[CSSmartSiriVolumeUserIntent setUserIntentValidForSeconds:]
  -[CSSmartSiriVolumeUserIntent applyLowerAndUpperBoundsToVolume:]
  -[CSSmartSiriVolumeUserIntent initWithStoredInformationAndAsset:]
  -[CSSmartSiriVolumeUserIntent increaseSiriVolumeBasedOnUserIntent]
  -[CSSmartSiriVolumeUserIntent decreaseSiriVolumeBasedOnUserIntent]
  -[CSSmartSiriVolumeUserIntent storeASVStateInformation]
  -[CSSmartSiriVolumeUserIntent applyLowerAndUpperBoundsToVolumeOffset:]
  -[CSSmartSiriVolumeUserIntent userIntentType]
  -[CSSmartSiriVolumeUserIntent setUserIntentType:]
  -[CSSmartSiriVolumeUserIntent userIntentTime]
  -[CSSmartSiriVolumeUserIntent setUserIntentTime:]
  -[CSSmartSiriVolumeUserIntent userIntentValidForSeconds]
  -[CSSmartSiriVolumeUserIntent latestVolumeTime]
  -[CSSmartSiriVolumeUserIntent setLatestVolumeTime:]
  -[CSSmartSiriVolumeUserIntent userIntentVolume]
  -[CSSmartSiriVolumeUserIntent setUserIntentVolume:]
  -[CSSmartSiriVolumeUserIntent latestVolume]
  -[CSSmartSiriVolumeUserIntent setLatestVolume:]
  -[CSSmartSiriVolumeUserIntent permanentOffsetFactor]
  -[CSSmartSiriVolumeUserIntent setPermanentOffsetFactor:]
  -[CSSmartSiriVolumeUserIntent permanentOffsetIsEnabled]
  -[CSSmartSiriVolumeUserIntent setPermanentOffsetIsEnabled:]


CSAssetController : NSObject <CSEventMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *assetsMigrationQueue
 @property  NSDictionary *csAssetsDictionary
 @property  NSMutableDictionary *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAssetController getVoiceTriggerAssetCurrentCompatibilityVersion]
  +[CSAssetController getEndpointAssetTypeString]
  +[CSAssetController getEndpointAssetCurrentCompatibilityVersion]
  +[CSAssetController getLanguageDetectorCurrentCompatibilityVersion]
  +[CSAssetController filteredAssetsForAssets:assetType:language:]
  +[CSAssetController getAssetTypeStringForType:]
  +[CSAssetController addKeyValuePairForQuery:assetType:]
  +[CSAssetController getSpeakerRecognitionAssetTypeString]
  +[CSAssetController sharedController]
  +[CSAssetController getVoiceTriggerAssetTypeString]
  +[CSAssetController getAdBlockerAssetTypeString]
  +[CSAssetController getAdBlockerCurrentCompatibilityVersion]
  +[CSAssetController getLanguageDetectorAssetTypeString]
  +[CSAssetController getSpeakerRecognitionCurrentCompatibilityVersion]
  +[CSAssetController filteredAssetsForFetchRemoteMetaDataForAssets:assetType:]

  // instance methods
  -[CSAssetController _fetchRemoteAssetOfType:withLanguage:completion:]
  -[CSAssetController installedAssetOfType:withLanguage:completion:]
  -[CSAssetController csAssetsDictionary]
  -[CSAssetController _installedAssetOfType:withLanguage:completion:]
  -[CSAssetController _isRetryRecommendedWithResult:]
  -[CSAssetController .cxx_destruct]
  -[CSAssetController _assetQueryForAssetType:]
  -[CSAssetController _installedAssetOfType:query:withLanguage:completion:]
  -[CSAssetController setObservers:]
  -[CSAssetController _defaultDownloadOptions]
  -[CSAssetController _downloadAssetCatalogForAssetType:complete:]
  -[CSAssetController init]
  -[CSAssetController setQueue:]
  -[CSAssetController installedAssetOfType:language:completion:]
  -[CSAssetController installedAssetOfType:withLanguage:]
  -[CSAssetController allInstalledAssetsOfType:language:]
  -[CSAssetController _fetchRemoteAssetOfType:withLanguage:query:completion:]
  -[CSAssetController _downloadAsset:withComplete:]
  -[CSAssetController fetchRemoteMetaOfType:allowRetry:]
  -[CSAssetController _findLatestInstalledAsset:]
  -[CSAssetController removeObserver:forAssetType:]
  -[CSAssetController fetchRemoteMetaOfType:]
  -[CSAssetController setCsAssetsDictionary:]
  -[CSAssetController assetsMigrationQueue]
  -[CSAssetController assetOfType:language:completion:]
  -[CSAssetController queue]
  -[CSAssetController observers]
  -[CSAssetController assetOfType:language:compatibilityVersion:completion:]
  -[CSAssetController _cleanUpMobileAssetV1Directory]
  -[CSAssetController installedAssetOfType:language:]
  -[CSAssetController _runAssetQuery:completion:]
  -[CSAssetController CSEventMonitorDidReceiveEvent:]
  -[CSAssetController assetOfType:language:]
  -[CSAssetController _installedAssetOfType:withLanguage:]
  -[CSAssetController _isReadyToUse]
  -[CSAssetController _startDownloadingAsset:progress:completion:]
  -[CSAssetController setAssetsMigrationQueue:]
  -[CSAssetController _updateFromRemoteToLocalAssets:forAssetType:completion:]
  -[CSAssetController addObserver:forAssetType:]


CSSyncKeywordAnalyzerQuasar : NSObject
 @property  double triggerConfidence
 @property  unsigned long activeChannel
 @property  NSDictionary *ctcKwdToPhraseIdMap
 @property  NSDictionary *phraseIdScores

  // class methods
  +[CSSyncKeywordAnalyzerQuasar dumpEARSpeechRecognitionResults:]

  // instance methods
  -[CSSyncKeywordAnalyzerQuasar setActiveChannel:]
  -[CSSyncKeywordAnalyzerQuasar processAudioChunk:]
  -[CSSyncKeywordAnalyzerQuasar .cxx_destruct]
  -[CSSyncKeywordAnalyzerQuasar activeChannel]
  -[CSSyncKeywordAnalyzerQuasar _calculateTriggerConfidence:]
  -[CSSyncKeywordAnalyzerQuasar _getConfidence:]
  -[CSSyncKeywordAnalyzerQuasar initWithConfigPath:triggerTokens:useKeywordSpotting:preventDuplicatedReset:]
  -[CSSyncKeywordAnalyzerQuasar resetWithLanguage:withFarField:withAudioSource:]
  -[CSSyncKeywordAnalyzerQuasar flushAudio]
  -[CSSyncKeywordAnalyzerQuasar phraseIdScores]
  -[CSSyncKeywordAnalyzerQuasar triggerConfidence]
  -[CSSyncKeywordAnalyzerQuasar setTriggerConfidence:]
  -[CSSyncKeywordAnalyzerQuasar ctcKwdToPhraseIdMap]
  -[CSSyncKeywordAnalyzerQuasar setCtcKwdToPhraseIdMap:]


CSAudioInjectionTvRemoteEngine : CSAudioInjectionEngine <CSAudioInjectionEngineDelegate, CSAudioConverterDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSAudioInjectionEngineDelegate> *delegate
 @property  NSUUID *uuid
 @property  CSAudioInjectionDevice *connectedDevice
 @property  CSAudioConverter *encoder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioInjectionTvRemoteEngine isRecording]
  -[CSAudioInjectionTvRemoteEngine setEncoder:]
  -[CSAudioInjectionTvRemoteEngine .cxx_destruct]
  -[CSAudioInjectionTvRemoteEngine audioConverterDidConvertPackets:packets:durationInSec:timestamp:arrivalTimestampToAudioRecorder:]
  -[CSAudioInjectionTvRemoteEngine stop]
  -[CSAudioInjectionTvRemoteEngine setDelegate:]
  -[CSAudioInjectionTvRemoteEngine setQueue:]
  -[CSAudioInjectionTvRemoteEngine uuid]
  -[CSAudioInjectionTvRemoteEngine delegate]
  -[CSAudioInjectionTvRemoteEngine queue]
  -[CSAudioInjectionTvRemoteEngine start]
  -[CSAudioInjectionTvRemoteEngine encoder]
  -[CSAudioInjectionTvRemoteEngine setUuid:]
  -[CSAudioInjectionTvRemoteEngine initWithStreamHandleId:]
  -[CSAudioInjectionTvRemoteEngine setConnectedDevice:]
  -[CSAudioInjectionTvRemoteEngine isAlwaysOnVoiceTriggerAvailable]
  -[CSAudioInjectionTvRemoteEngine setAlwaysOnVoiceTriggerEnabled:]
  -[CSAudioInjectionTvRemoteEngine startAudioStreamWithOption:]
  -[CSAudioInjectionTvRemoteEngine stopAudioStream]
  -[CSAudioInjectionTvRemoteEngine injectAudio:]
  -[CSAudioInjectionTvRemoteEngine injectAudio:withScaleFactor:playbackStarted:completion:]
  -[CSAudioInjectionTvRemoteEngine audioEngineDidStartRecord:audioStreamHandleId:successfully:error:]
  -[CSAudioInjectionTvRemoteEngine audioEngineDidStopRecord:audioStreamHandleId:reason:]
  -[CSAudioInjectionTvRemoteEngine audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:]
  -[CSAudioInjectionTvRemoteEngine audioEngineAudioChunkForTvAvailable:audioChunk:]
  -[CSAudioInjectionTvRemoteEngine alwaysOnVoiceTriggerEnabled]
  -[CSAudioInjectionTvRemoteEngine attachDevice:]
  -[CSAudioInjectionTvRemoteEngine connectedDevice]


CSSiriLauncher : NSObject
  // class methods
  +[CSSiriLauncher sharedLauncher]

  // instance methods
  -[CSSiriLauncher notifyCarPlayVoiceTriggerPrewarm:deviceId:completion:]
  -[CSSiriLauncher notifyBuiltInVoiceTriggerPrewarm:completion:]
  -[CSSiriLauncher notifyBuiltInVoiceTrigger:myriadPHash:completion:]
  -[CSSiriLauncher notifyWakeKeywordSpokenInBuiltInMic:]
  -[CSSiriLauncher notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:]
  -[CSSiriLauncher notifyWakeKeywordSpokenCarPlay:deviceId:]
  -[CSSiriLauncher notifyBluetoothDeviceVoiceTriggerPrewarm:deviceId:completion:]
  -[CSSiriLauncher notifyBluetoothDeviceVoiceTrigger:deviceId:completion:]
  -[CSSiriLauncher notifyWakeKeywordSpokenBluetoothDevice:deviceId:]
  -[CSSiriLauncher notifyRemoraVoiceTriggerPrewarm:deviceId:completion:]
  -[CSSiriLauncher notifyRemoraVoiceTrigger:myriadPHash:deviceId:completion:]
  -[CSSiriLauncher notifyWakeKeywordSpokenRemora:deviceId:]
  -[CSSiriLauncher deactivateSiriActivationConnectionWithReason:withOptions:withContext:]
  -[CSSiriLauncher notifyDarwinVoiceTriggerPrewarmWithCompletion:]
  -[CSSiriLauncher notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:]


CSAudioRouteChangeMonitor : CSEventMonitor
  // class methods
  +[CSAudioRouteChangeMonitor sharedInstance]

  // instance methods
  -[CSAudioRouteChangeMonitor _stopMonitoring]
  -[CSAudioRouteChangeMonitor hearstConnected]
  -[CSAudioRouteChangeMonitor getHearstConnected:]
  -[CSAudioRouteChangeMonitor _startMonitoringWithQueue:]
  -[CSAudioRouteChangeMonitor getJarvisConnected:]
  -[CSAudioRouteChangeMonitor jarvisConnected]


CSSmartSiriVolumeEnablePolicy : CSPolicy
  // instance methods
  -[CSSmartSiriVolumeEnablePolicy .cxx_destruct]
  -[CSSmartSiriVolumeEnablePolicy init]
  -[CSSmartSiriVolumeEnablePolicy _subscribeEventMonitors]
  -[CSSmartSiriVolumeEnablePolicy _addSmartSiriVolumeEnabledConditions]


CSAudioInjectionRemoraEngine : CSAudioInjectionEngine <CSAudioInjectionEngineDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSAudioInjectionEngineDelegate> *delegate
 @property  CSKeywordAnalyzerNDAPI *keywordAnalyzer
 @property  CSAudioCircularBuffer *circularBuffer
 @property  unsigned long lastDetectedVoiceTriggerBeginSampleCount
 @property  unsigned long lastForwardedSampleCount
 @property  BOOL voiceTriggerEnabled
 @property  CSAudioInjectionDevice *connectedDevice
 @property  NSUUID *uuid
 @property  BOOL isForwarding
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioInjectionRemoraEngine isRecording]
  -[CSAudioInjectionRemoraEngine setKeywordAnalyzer:]
  -[CSAudioInjectionRemoraEngine .cxx_destruct]
  -[CSAudioInjectionRemoraEngine stop]
  -[CSAudioInjectionRemoraEngine setDelegate:]
  -[CSAudioInjectionRemoraEngine setVoiceTriggerEnabled:]
  -[CSAudioInjectionRemoraEngine setQueue:]
  -[CSAudioInjectionRemoraEngine keywordAnalyzer]
  -[CSAudioInjectionRemoraEngine uuid]
  -[CSAudioInjectionRemoraEngine delegate]
  -[CSAudioInjectionRemoraEngine queue]
  -[CSAudioInjectionRemoraEngine start]
  -[CSAudioInjectionRemoraEngine dealloc]
  -[CSAudioInjectionRemoraEngine voiceTriggerEnabled]
  -[CSAudioInjectionRemoraEngine setUuid:]
  -[CSAudioInjectionRemoraEngine setCircularBuffer:]
  -[CSAudioInjectionRemoraEngine circularBuffer]
  -[CSAudioInjectionRemoraEngine initWithStreamHandleId:]
  -[CSAudioInjectionRemoraEngine setConnectedDevice:]
  -[CSAudioInjectionRemoraEngine isAlwaysOnVoiceTriggerAvailable]
  -[CSAudioInjectionRemoraEngine setAlwaysOnVoiceTriggerEnabled:]
  -[CSAudioInjectionRemoraEngine startAudioStreamWithOption:]
  -[CSAudioInjectionRemoraEngine stopAudioStream]
  -[CSAudioInjectionRemoraEngine injectAudio:]
  -[CSAudioInjectionRemoraEngine injectAudio:withScaleFactor:playbackStarted:completion:]
  -[CSAudioInjectionRemoraEngine audioEngineDidStartRecord:audioStreamHandleId:successfully:error:]
  -[CSAudioInjectionRemoraEngine audioEngineDidStopRecord:audioStreamHandleId:reason:]
  -[CSAudioInjectionRemoraEngine audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:]
  -[CSAudioInjectionRemoraEngine audioEngineAudioChunkForTvAvailable:audioChunk:]
  -[CSAudioInjectionRemoraEngine alwaysOnVoiceTriggerEnabled]
  -[CSAudioInjectionRemoraEngine attachDevice:]
  -[CSAudioInjectionRemoraEngine lastForwardedSampleCount]
  -[CSAudioInjectionRemoraEngine setLastForwardedSampleCount:]
  -[CSAudioInjectionRemoraEngine connectedDevice]
  -[CSAudioInjectionRemoraEngine isForwarding]
  -[CSAudioInjectionRemoraEngine setIsForwarding:]
  -[CSAudioInjectionRemoraEngine lastDetectedVoiceTriggerBeginSampleCount]
  -[CSAudioInjectionRemoraEngine setLastDetectedVoiceTriggerBeginSampleCount:]


CSAudioInjectionEngine : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CSAudioInjectionEngineDelegate> *delegate
 @property  unsigned long audioStreamHandleId
 @property  CSAudioInjectionFileOption *fileOption
 @property  NSObject<OS_dispatch_source> *audioFeedTimer
 @property  BOOL isRecording
 @property  {AudioStreamBasicDescription=dIIIIIIII} outASBD
 @property  double bufferDuration
 @property  NSMutableArray *injectionAudioFileList
 @property  NSMutableArray *injectionStartNotifyBlocks
 @property  NSMutableArray *injectionCompletionNotifyBlocks
 @property  NSUUID *uuid
 @property  ^{OpaqueAudioConverter=} deinterleaver
 @property  ^{AudioBufferList=I[1{AudioBuffer=II^v}]} pNonInterleavedABL
 @property  BOOL didSetScaleFactor
 @property  float scaleFactor

  // instance methods
  -[CSAudioInjectionEngine scaleFactor]
  -[CSAudioInjectionEngine isRecording]
  -[CSAudioInjectionEngine setScaleFactor:]
  -[CSAudioInjectionEngine .cxx_destruct]
  -[CSAudioInjectionEngine stop]
  -[CSAudioInjectionEngine setDelegate:]
  -[CSAudioInjectionEngine setQueue:]
  -[CSAudioInjectionEngine outASBD]
  -[CSAudioInjectionEngine uuid]
  -[CSAudioInjectionEngine delegate]
  -[CSAudioInjectionEngine queue]
  -[CSAudioInjectionEngine start]
  -[CSAudioInjectionEngine dealloc]
  -[CSAudioInjectionEngine setUuid:]
  -[CSAudioInjectionEngine setIsRecording:]
  -[CSAudioInjectionEngine initWithStreamHandleId:]
  -[CSAudioInjectionEngine isAlwaysOnVoiceTriggerAvailable]
  -[CSAudioInjectionEngine setAlwaysOnVoiceTriggerEnabled:]
  -[CSAudioInjectionEngine startAudioStreamWithOption:]
  -[CSAudioInjectionEngine stopAudioStream]
  -[CSAudioInjectionEngine injectAudio:]
  -[CSAudioInjectionEngine injectAudio:withScaleFactor:playbackStarted:completion:]
  -[CSAudioInjectionEngine audioStreamHandleId]
  -[CSAudioInjectionEngine alwaysOnVoiceTriggerEnabled]
  -[CSAudioInjectionEngine attachDevice:]
  -[CSAudioInjectionEngine setOutASBD:]
  -[CSAudioInjectionEngine _readAudioBufferAndFeed]
  -[CSAudioInjectionEngine _createDeInterleaverIfNeeded]
  -[CSAudioInjectionEngine _startAudioFeedingTimer]
  -[CSAudioInjectionEngine _deinterleaveBufferIfNeeded:]
  -[CSAudioInjectionEngine _compensateChannelDataIfNeeded:receivedNumChannels:]
  -[CSAudioInjectionEngine setFileOption:]
  -[CSAudioInjectionEngine _defaultOutASBD]
  -[CSAudioInjectionEngine injectAudio:withScaleFactor:outASBD:playbackStarted:completion:]
  -[CSAudioInjectionEngine setAudioStreamHandleId:]
  -[CSAudioInjectionEngine fileOption]
  -[CSAudioInjectionEngine audioFeedTimer]
  -[CSAudioInjectionEngine setAudioFeedTimer:]
  -[CSAudioInjectionEngine bufferDuration]
  -[CSAudioInjectionEngine setBufferDuration:]
  -[CSAudioInjectionEngine injectionAudioFileList]
  -[CSAudioInjectionEngine setInjectionAudioFileList:]
  -[CSAudioInjectionEngine injectionStartNotifyBlocks]
  -[CSAudioInjectionEngine setInjectionStartNotifyBlocks:]
  -[CSAudioInjectionEngine injectionCompletionNotifyBlocks]
  -[CSAudioInjectionEngine setInjectionCompletionNotifyBlocks:]
  -[CSAudioInjectionEngine deinterleaver]
  -[CSAudioInjectionEngine setDeinterleaver:]
  -[CSAudioInjectionEngine pNonInterleavedABL]
  -[CSAudioInjectionEngine setPNonInterleavedABL:]
  -[CSAudioInjectionEngine didSetScaleFactor]
  -[CSAudioInjectionEngine setDidSetScaleFactor:]


CSVoiceTriggerAssetChangeMonitor : NSObject
 @property  <CSVoiceTriggerAssetChangeDelegate> *delegate

  // class methods
  +[CSVoiceTriggerAssetChangeMonitor sharedMonitor]

  // instance methods
  -[CSVoiceTriggerAssetChangeMonitor startMonitoring]
  -[CSVoiceTriggerAssetChangeMonitor .cxx_destruct]
  -[CSVoiceTriggerAssetChangeMonitor setDelegate:]
  -[CSVoiceTriggerAssetChangeMonitor init]
  -[CSVoiceTriggerAssetChangeMonitor delegate]
  -[CSVoiceTriggerAssetChangeMonitor notifyVoiceTriggerAssetChanged]


CSAttSiriRequestContext : NSObject <NSSecureCoding>
 @property  unsigned long reqSrc

  // class methods
  +[CSAttSiriRequestContext supportsSecureCoding]

  // instance methods
  -[CSAttSiriRequestContext initWithCoder:]
  -[CSAttSiriRequestContext reqSrc]
  -[CSAttSiriRequestContext copyWithZone:]
  -[CSAttSiriRequestContext encodeWithCoder:]
  -[CSAttSiriRequestContext initWithRequestSource:]
  -[CSAttSiriRequestContext setReqSrc:]


NviAudioFileWriter : NSObject
 @property  NSURL *fileURL

  // instance methods
  -[NviAudioFileWriter fileURL]
  -[NviAudioFileWriter .cxx_destruct]
  -[NviAudioFileWriter endAudio]
  -[NviAudioFileWriter dealloc]
  -[NviAudioFileWriter addSamples:numSamples:]
  -[NviAudioFileWriter initWithURL:inputFormat:outputFormat:]


CSVoiceTriggerEnabledPolicyNonAOP : CSPolicy
  // instance methods
  -[CSVoiceTriggerEnabledPolicyNonAOP init]
  -[CSVoiceTriggerEnabledPolicyNonAOP _subscribeEventMonitors]
  -[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]


CSBluetoothWirelessSplitterMonitor : CSEventMonitor
  // class methods
  +[CSBluetoothWirelessSplitterMonitor sharedInstance]

  // instance methods
  -[CSBluetoothWirelessSplitterMonitor _stopMonitoring]
  -[CSBluetoothWirelessSplitterMonitor splitterState:]
  -[CSBluetoothWirelessSplitterMonitor _startMonitoringWithQueue:]
  -[CSBluetoothWirelessSplitterMonitor updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
  -[CSBluetoothWirelessSplitterMonitor splitterState]


CSSiriClientBehaviorMonitor : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers
 @property  BOOL isStreaming
 @property  CSAudioRecordContext *audioRecordContext

  // class methods
  +[CSSiriClientBehaviorMonitor sharedInstance]

  // instance methods
  -[CSSiriClientBehaviorMonitor isStreaming]
  -[CSSiriClientBehaviorMonitor setAudioRecordContext:]
  -[CSSiriClientBehaviorMonitor audioRecordContext]
  -[CSSiriClientBehaviorMonitor unregisterObserver:]
  -[CSSiriClientBehaviorMonitor registerObserver:]
  -[CSSiriClientBehaviorMonitor notifyWillStartStreamWithContext:option:]
  -[CSSiriClientBehaviorMonitor notifyReleaseAudioSession]
  -[CSSiriClientBehaviorMonitor .cxx_destruct]
  -[CSSiriClientBehaviorMonitor setIsStreaming:]
  -[CSSiriClientBehaviorMonitor notifyFetchedSiriClientAudioStream:successfully:]
  -[CSSiriClientBehaviorMonitor setObservers:]
  -[CSSiriClientBehaviorMonitor init]
  -[CSSiriClientBehaviorMonitor setQueue:]
  -[CSSiriClientBehaviorMonitor notifyWillStopStream:reason:]
  -[CSSiriClientBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSSiriClientBehaviorMonitor queue]
  -[CSSiriClientBehaviorMonitor observers]
  -[CSSiriClientBehaviorMonitor notifyDidStopStream:withEventUUID:]
  -[CSSiriClientBehaviorMonitor notifyPreparedSiriClientAudioStream:successfully:]


CSSpeechEndpointAssetMetaUpdateMonitor : CSEventMonitor
  // class methods
  +[CSSpeechEndpointAssetMetaUpdateMonitor sharedInstance]

  // instance methods
  -[CSSpeechEndpointAssetMetaUpdateMonitor _stopMonitoring]
  -[CSSpeechEndpointAssetMetaUpdateMonitor _startMonitoringWithQueue:]
  -[CSSpeechEndpointAssetMetaUpdateMonitor init]
  -[CSSpeechEndpointAssetMetaUpdateMonitor _didReceiveNewSpeechEndpointAssetMetaData]
  -[CSSpeechEndpointAssetMetaUpdateMonitor _notifyObserver:]


CSSmartSiriVolumeEstimate : NSObject <NSSecureCoding>
 @property  NSString *debugLogPath
 @property  float volumeEstimate

  // class methods
  +[CSSmartSiriVolumeEstimate supportsSecureCoding]

  // instance methods
  -[CSSmartSiriVolumeEstimate initWithCoder:]
  -[CSSmartSiriVolumeEstimate .cxx_destruct]
  -[CSSmartSiriVolumeEstimate encodeWithCoder:]
  -[CSSmartSiriVolumeEstimate debugLogPath]
  -[CSSmartSiriVolumeEstimate volumeEstimate]
  -[CSSmartSiriVolumeEstimate initWithVolumeEstimate:debugLogFile:]


CSVoiceTriggerAssetHandlerMac : CSVoiceTriggerAssetHandler <CSVoiceTriggerAssetDownloadMonitorDelegate, CSFirstUnlockMonitorDelegate, CSLanguageCodeUpdateMonitorDelegate, CSTrialAssetDownloadMonitorDelegate>
 @property  CSAsset *cachedAsset
 @property  NSMutableDictionary *cachedEndpointAssets
 @property  CSVoiceTriggerAssetDownloadMonitor *voiceTriggerAssetDownloadMonitor
 @property  CSLanguageCodeUpdateMonitor *languageCodeUpdateMonitor
 @property  CSFirstUnlockMonitor *firstUnlockMonitor
 @property  CSTrialAssetDownloadMonitor *trialAssetDownloadMonitor
 @property  CSAssetManager *assetManager
 @property  CSTrialAssetManager *trialAssetManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerAssetHandlerMac setAssetManager:]
  -[CSVoiceTriggerAssetHandlerMac assetManager]
  -[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManager:]
  -[CSVoiceTriggerAssetHandlerMac cachedAsset]
  -[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablityForEndpoint]
  -[CSVoiceTriggerAssetHandlerMac setVoiceTriggerAssetDownloadMonitor:]
  -[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:completion:]
  -[CSVoiceTriggerAssetHandlerMac .cxx_destruct]
  -[CSVoiceTriggerAssetHandlerMac CSVoiceTriggerAssetDownloadMonitor:didInstallNewAsset:]
  -[CSVoiceTriggerAssetHandlerMac languageCodeUpdateMonitor]
  -[CSVoiceTriggerAssetHandlerMac setCachedAsset:]
  -[CSVoiceTriggerAssetHandlerMac init]
  -[CSVoiceTriggerAssetHandlerMac setFirstUnlockMonitor:]
  -[CSVoiceTriggerAssetHandlerMac voiceTriggerAssetDownloadMonitor]
  -[CSVoiceTriggerAssetHandlerMac CSFirstUnlockMonitor:didReceiveFirstUnlock:]
  -[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablity]
  -[CSVoiceTriggerAssetHandlerMac setLanguageCodeUpdateMonitor:]
  -[CSVoiceTriggerAssetHandlerMac trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
  -[CSVoiceTriggerAssetHandlerMac getVoiceTriggerAssetWithEndpointId:completion:]
  -[CSVoiceTriggerAssetHandlerMac trialAssetDownloadMonitor]
  -[CSVoiceTriggerAssetHandlerMac setTrialAssetDownloadMonitor:]
  -[CSVoiceTriggerAssetHandlerMac setTrialAssetManager:]
  -[CSVoiceTriggerAssetHandlerMac trialAssetManager]
  -[CSVoiceTriggerAssetHandlerMac _handleEndpointVoiceTriggerAsset:completion:]
  -[CSVoiceTriggerAssetHandlerMac start]
  -[CSVoiceTriggerAssetHandlerMac setCachedEndpointAssets:]
  -[CSVoiceTriggerAssetHandlerMac firstUnlockMonitor]
  -[CSVoiceTriggerAssetHandlerMac cachedEndpointAssets]
  -[CSVoiceTriggerAssetHandlerMac CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
  -[CSVoiceTriggerAssetHandlerMac initWithVoiceTriggerAssetDownloadMonitor:languageCodeUpdateMonitor:firstUnlockMonitor:trialAssetDownloadMonitor:assetManager:trialAssetManager:]
  -[CSVoiceTriggerAssetHandlerMac _handleVoiceTriggerAssetWithCompletion:]


CSVoiceTriggerAOPModeEnabledPolicyIOS : CSPolicy <CSSiriClientBehaviorMonitorDelegate>
 @property  BOOL isSiriClientConsideredAsRecord
 @property  NSString *pendingRecordingStopUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS _isSpeechDetectionDevicePresent]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS _addConditionsForIOSAOP]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS setPendingRecordingStopUUID:]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS .cxx_destruct]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS _addConditionsForIOSBargeIn]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS init]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS siriClientBehaviorMonitor:didChangedRecordState:withEventUUID:withContext:]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS setIsSiriClientConsideredAsRecord:]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS pendingRecordingStopUUID]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS _subscribeEventMonitors]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS isSiriClientConsideredAsRecord]
  -[CSVoiceTriggerAOPModeEnabledPolicyIOS _addVoiceTriggerAOPModeEnabledConditions]


CSVoiceTriggerStatAggregator : NSObject
 @property  unsigned long numFalseWakeUp
 @property  unsigned long lastAggTimeFalseWakeUp

  // class methods
  +[CSVoiceTriggerStatAggregator sharedAggregator]

  // instance methods
  -[CSVoiceTriggerStatAggregator init]
  -[CSVoiceTriggerStatAggregator logAudioZeroRun:]
  -[CSVoiceTriggerStatAggregator logSecondPassResult:eventInfo:triggerAPWakeUp:]
  -[CSVoiceTriggerStatAggregator logAOPFirstPassTriggerWakeupLatency:]
  -[CSVoiceTriggerStatAggregator logFalseWakeUp:]
  -[CSVoiceTriggerStatAggregator logTriggerLengthSampleCountStatistics:withFirstPassDeterministicTriggerLengthSampleCount:]
  -[CSVoiceTriggerStatAggregator numFalseWakeUp]
  -[CSVoiceTriggerStatAggregator setNumFalseWakeUp:]
  -[CSVoiceTriggerStatAggregator lastAggTimeFalseWakeUp]
  -[CSVoiceTriggerStatAggregator setLastAggTimeFalseWakeUp:]


CSOpportuneSpeakBehaviorMonitor : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers

  // class methods
  +[CSOpportuneSpeakBehaviorMonitor sharedInstance]

  // instance methods
  -[CSOpportuneSpeakBehaviorMonitor unregisterObserver:]
  -[CSOpportuneSpeakBehaviorMonitor registerObserver:]
  -[CSOpportuneSpeakBehaviorMonitor .cxx_destruct]
  -[CSOpportuneSpeakBehaviorMonitor notifyWillStartStreamWithContext:audioProviderUUID:option:]
  -[CSOpportuneSpeakBehaviorMonitor notifyDidStartStreamWithContext:audioProviderUUID:successfully:option:]
  -[CSOpportuneSpeakBehaviorMonitor setObservers:]
  -[CSOpportuneSpeakBehaviorMonitor init]
  -[CSOpportuneSpeakBehaviorMonitor setQueue:]
  -[CSOpportuneSpeakBehaviorMonitor notifyDidStopStream:]
  -[CSOpportuneSpeakBehaviorMonitor queue]
  -[CSOpportuneSpeakBehaviorMonitor observers]
  -[CSOpportuneSpeakBehaviorMonitor notifyWillStopStream:]


CSMyriadPHashFactors : NSObject
 @property  unsigned short hashValue
 @property  unsigned char goodness
 @property  unsigned char confidence
 @property  unsigned long absTime
 @property  unsigned char frac

  // instance methods
  -[CSMyriadPHashFactors frac]
  -[CSMyriadPHashFactors absTime]
  -[CSMyriadPHashFactors confidence]
  -[CSMyriadPHashFactors goodness]
  -[CSMyriadPHashFactors hashValue]
  -[CSMyriadPHashFactors initWithHash:goodness:confidence:absTime:frac:]


CSMyriadPHash : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  short signalEstimate
 @property  unsigned char signalFractional

  // class methods
  +[CSMyriadPHash lastHash]
  +[CSMyriadPHash notifyHashlessTrigger:]
  +[CSMyriadPHash createHashResult:goodness:confidence:absTime:frac:]
  +[CSMyriadPHash writeHashResultIntoFile:]
  +[CSMyriadPHash notifyAudioHashNotification]
  +[CSMyriadPHash generateEmptyPHash:writeFile:]
  +[CSMyriadPHash notifyAudioHashlessNotification]
  +[CSMyriadPHash createRemoraHashResult:goodness:confidence:firstPassTriggerEndTime:frac:]
  +[CSMyriadPHash decodeWithMyriadPHash:]
  +[CSMyriadPHash createRemoraHashResultFromPHash:firstPassTriggerEndTime:]
  +[CSMyriadPHash setLastHash:]
  +[CSMyriadPHash overridePHash:withMachTime:]
  +[CSMyriadPHash writeHashlessResult:]
  +[CSMyriadPHash signalEstimateWithBuilder:]

  // instance methods
  -[CSMyriadPHash cachedHash]
  -[CSMyriadPHash .cxx_destruct]
  -[CSMyriadPHash _audioLogDirectory]
  -[CSMyriadPHash init]
  -[CSMyriadPHash setQueue:]
  -[CSMyriadPHash voiceTriggerDidDetectSpeakerReject:]
  -[CSMyriadPHash voiceTriggerDidDetectNearMiss:deviceId:]
  -[CSMyriadPHash queue]
  -[CSMyriadPHash dealloc]
  -[CSMyriadPHash _signalEstimate:length:]
  -[CSMyriadPHash _copyAudioDataInBuffer:bufferSize:copyLength:fromAudioData:]
  -[CSMyriadPHash pHash:length:]
  -[CSMyriadPHash signalEstimate]
  -[CSMyriadPHash signalFractional]
  -[CSMyriadPHash _generateMyriadInfo:writeFile:score:triggerSource:channel:audioProviderUUID:absoluteTime:]
  -[CSMyriadPHash generatePHashFromVoiceTriggerInfo:writeFile:]
  -[CSMyriadPHash setSignalEstimate:]
  -[CSMyriadPHash setSignalFractional:]


NviConstants : NSObject
  // class methods
  +[NviConstants inputRecordingBytesPerPacket]
  +[NviConstants inputRecordingSampleRate]
  +[NviConstants inputRecordingNumberOfChannels]
  +[NviConstants inputRecordingBytesPerFrame]
  +[NviConstants inputRecordingSampleByteDepth]
  +[NviConstants inputRecordingFramesPerPacket]
  +[NviConstants inputRecordingSampleBitDepth]
  +[NviConstants nviDirectionalityLpcmNonInterleavedASBD]
  +[NviConstants nviDirectionalityLpcmInterleavedASBD]
  +[NviConstants numChannelsForNviDirectionality]
  +[NviConstants nviDirectionalityStartingChannelId]
  +[NviConstants nviDirectionalityEndingChannelId]
  +[NviConstants monoChannelLpcmASBD]
  +[NviConstants allChannelsLpcmInterleavedASBD]
  +[NviConstants allChannelsLpcmNonInterleavedASBD]
  +[NviConstants nviLogsRootDir]


CSSiriAudioActivationInfo : NSObject
 @property  long long speechEvent
 @property  BOOL useBorealisBuffer
 @property  BOOL usePrelistening
 @property  long long audioAlertStyle
 @property  NSString *deviceIdentifier
 @property  double activationSystemUptime
 @property  unsigned long activationHostTime
 @property  unsigned long buttonDownHostTime
 @property  unsigned long voiceTriggerEndHostTime
 @property  long long speechRecordingMode
 @property  BOOL isOnPhoneCall
 @property  BOOL hasPlayedStartAlert
 @property  long long speechEndpointerOperationMode
 @property  long long speechEndpointerStopRecordingMode
 @property  AFSpeechRecordingAlertPolicy *speechRecordingAlertPolicy
 @property  long long presentationMode
 @property  BOOL isSpokenNotification
 @property  AFLanguageDetectionUserContext *languageDetectionUserContext
 @property  long long dictationInputOrigin
 @property  NSUUID *turnIdentifier
 @property  NSString *applicationDisplayName
 @property  NSString *applicationBundleIdentifier
 @property  unsigned long dictationVoiceTriggerAbsStartSampleId

  // instance methods
  -[CSSiriAudioActivationInfo applicationDisplayName]
  -[CSSiriAudioActivationInfo presentationMode]
  -[CSSiriAudioActivationInfo canPrepareWithoutInterruption]
  -[CSSiriAudioActivationInfo useBorealisBuffer]
  -[CSSiriAudioActivationInfo applicationBundleIdentifier]
  -[CSSiriAudioActivationInfo dateByAddingTimeIntervalSinceActivation:]
  -[CSSiriAudioActivationInfo audioSessionActivated]
  -[CSSiriAudioActivationInfo _alertBehaviorForRecordRoute:recordingInfo:playbackRoute:attemptsToUsePastDataBufferFrames:]
  -[CSSiriAudioActivationInfo turnIdentifier]
  -[CSSiriAudioActivationInfo shouldOverrideRecordingStartingAlertBehaviorForAlertStyle:]
  -[CSSiriAudioActivationInfo voiceTriggerEndHostTime]
  -[CSSiriAudioActivationInfo dictationVoiceTriggerAbsStartSampleId]
  -[CSSiriAudioActivationInfo setSpeechRequestOptions:currentActivationInfo:]
  -[CSSiriAudioActivationInfo startRecordingSettingsWithRecordRoute:recordingInfo:playbackRoute:]
  -[CSSiriAudioActivationInfo .cxx_destruct]
  -[CSSiriAudioActivationInfo dictationInputOrigin]
  -[CSSiriAudioActivationInfo _csAudioRecordTypeForSpeechEvent:currentClientConfiguration:]
  -[CSSiriAudioActivationInfo _eventIsVoiceTrigger]
  -[CSSiriAudioActivationInfo overrideStartingAlertBeepSoundID]
  -[CSSiriAudioActivationInfo beginUpdateToPostVoice]
  -[CSSiriAudioActivationInfo activationSystemUptime]
  -[CSSiriAudioActivationInfo shouldTreatTimeoutAsHardEndpoint]
  -[CSSiriAudioActivationInfo speechRecordingAlertPolicy]
  -[CSSiriAudioActivationInfo speechEndpointerOperationMode]
  -[CSSiriAudioActivationInfo isOnPhoneCall]
  -[CSSiriAudioActivationInfo hasPlayedStartAlert]
  -[CSSiriAudioActivationInfo audioSessionActivationTargetDate]
  -[CSSiriAudioActivationInfo needsUpdateToPostVoiceMode]
  -[CSSiriAudioActivationInfo audioAlertStyleForRecordRoute:recordingInfo:playbackRoute:]
  -[CSSiriAudioActivationInfo _csAudioRecordTypeForSpeechRequestOptions:useBorealisBuffer:currentClientConfiguration:]
  -[CSSiriAudioActivationInfo shouldUseVoiceTriggerAnalyzerStyle]
  -[CSSiriAudioActivationInfo usePrelistening]
  -[CSSiriAudioActivationInfo _isRequestFromSpokenNotification:]
  -[CSSiriAudioActivationInfo _isVibrationDisabledInAccessibility]
  -[CSSiriAudioActivationInfo shouldSuppressRecordingStopAlert]
  -[CSSiriAudioActivationInfo languageDetectionUserContext]
  -[CSSiriAudioActivationInfo _canUseZLL]
  -[CSSiriAudioActivationInfo isSpokenNotification]
  -[CSSiriAudioActivationInfo _eventIsTVRemote]
  -[CSSiriAudioActivationInfo canPrewarm]
  -[CSSiriAudioActivationInfo endUpdateToPostVoiceWithContext:success:]
  -[CSSiriAudioActivationInfo recordContext]
  -[CSSiriAudioActivationInfo audioAlertStyle]
  -[CSSiriAudioActivationInfo shouldExplicitlyPlayAlertOnStart]
  -[CSSiriAudioActivationInfo shouldPlayAlertIfNotPrelistening]
  -[CSSiriAudioActivationInfo requiresBorealisConsumerCheck]
  -[CSSiriAudioActivationInfo buttonDownHostTime]
  -[CSSiriAudioActivationInfo _activationMode]
  -[CSSiriAudioActivationInfo initWithSpeechRecordingMode:clientConfiguration:experimentContext:]
  -[CSSiriAudioActivationInfo canEnterTwoShot]
  -[CSSiriAudioActivationInfo deviceIdentifier]
  -[CSSiriAudioActivationInfo recordSettingsWithOptions:]
  -[CSSiriAudioActivationInfo canGetPCMStream]
  -[CSSiriAudioActivationInfo setClientConfiguration:]
  -[CSSiriAudioActivationInfo recordContextForSpeechEvent:]
  -[CSSiriAudioActivationInfo isVoiceOverTouchEnabled]
  -[CSSiriAudioActivationInfo _audioSessionActiveDelayCoreSpeechWithType:]
  -[CSSiriAudioActivationInfo shouldSuppressRecordingErrorAlert]
  -[CSSiriAudioActivationInfo _audioSessionActiveDelayServerConfiguration]
  -[CSSiriAudioActivationInfo speechEvent]
  -[CSSiriAudioActivationInfo speechRecordingMode]
  -[CSSiriAudioActivationInfo _audioAlertStyleForListenAfterSpeakingWithRecordRoute:playbackRoute:echoCancellation:useDeviceSpeakerForTTS:]
  -[CSSiriAudioActivationInfo activationHostTime]
  -[CSSiriAudioActivationInfo twoShotPromptTypeForRecordRoute:playbackRoute:]
  -[CSSiriAudioActivationInfo setSpeechRecordingMode:]
  -[CSSiriAudioActivationInfo _audioSessionActiveDelayUserPerceptionWithType:]
  -[CSSiriAudioActivationInfo _eventIsRaiseToSpeak]
  -[CSSiriAudioActivationInfo speechEndpointerStopRecordingMode]
  -[CSSiriAudioActivationInfo _appendDictationApplicationInfoSettings:]
  -[CSSiriAudioActivationInfo _audioSessionActiveDelayOverride]
  -[CSSiriAudioActivationInfo _csAudioRecordType]
  -[CSSiriAudioActivationInfo _isVoiceOverTouchEnabledInAccessibility]
  -[CSSiriAudioActivationInfo event]


NviUtils : NSObject
  // class methods
  +[NviUtils timeStampString]
  +[NviUtils strRepForNviSignalType:]
  +[NviUtils strRepForNviDataSourceType:]
  +[NviUtils isNviEnabled]
  +[NviUtils strRepForNviSignalMask:]
  +[NviUtils nviSignalTypeForStr:]
  +[NviUtils nviDataSourceTypeForStr:]
  +[NviUtils _createDirAtPath:]
  +[NviUtils getVoiceTriggerEndSampleCountFromVTEI:]
  +[NviUtils getVoiceTriggerEndSecsFromVTEI:]
  +[NviUtils readJsonDictionaryAt:]
  +[NviUtils getValueFromDictionaryOfDictionaries:keypath:]
  +[NviUtils createDirAtPath:]


CSVoiceTriggerFidesClient : NSObject <CSVoiceTriggerDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAudioCircularBuffer *audioBuffer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSVoiceTriggerFidesClient voiceTriggerDidDetectKeyword:deviceId:]
  -[CSVoiceTriggerFidesClient .cxx_destruct]
  -[CSVoiceTriggerFidesClient _lastTriggerDataWithResult:]
  -[CSVoiceTriggerFidesClient init]
  -[CSVoiceTriggerFidesClient setQueue:]
  -[CSVoiceTriggerFidesClient voiceTriggerDidDetectSpeakerReject:]
  -[CSVoiceTriggerFidesClient voiceTriggerGotSuperVector:]
  -[CSVoiceTriggerFidesClient _medicalIDName]
  -[CSVoiceTriggerFidesClient voiceTriggerDidDetectNearMiss:deviceId:]
  -[CSVoiceTriggerFidesClient queue]
  -[CSVoiceTriggerFidesClient setAudioBuffer:]
  -[CSVoiceTriggerFidesClient audioBuffer]
  -[CSVoiceTriggerFidesClient _logDESRecordWithType:result:]
  -[CSVoiceTriggerFidesClient _medicalIDAge]


CSHostPowerSourceMonitor : CSEventMonitor
  // class methods
  +[CSHostPowerSourceMonitor sharedInstance]

  // instance methods
  -[CSHostPowerSourceMonitor init]
  -[CSHostPowerSourceMonitor currentPowerSource]


CSAudioStartStreamOption : NSObject <NSCopying>
 @property  BOOL requestHistoricalAudioDataWithHostTime
 @property  BOOL requestHistoricalAudioDataSampleCount
 @property  unsigned long startRecordingHostTime
 @property  unsigned long startRecordingSampleCount
 @property  BOOL useOpportunisticZLL
 @property  long long startAlertBehavior
 @property  long long stopAlertBehavior
 @property  long long errorAlertBehavior
 @property  BOOL skipAlertBehavior
 @property  NSObject<OS_xpc_object> *xpcObject
 @property  NSString *localizedDescription
 @property  BOOL requireSingleChannelLookup
 @property  unsigned int selectedChannel
 @property  unsigned long estimatedStartHostTime
 @property  BOOL disableEndpointer
 @property  BOOL disableLocalSpeechRecognizer
 @property  BOOL disablePrewamLocalSpeechRecognizer
 @property  NSString *requestMHUUID
 @property  NSString *siriSessionUUID

  // class methods
  +[CSAudioStartStreamOption noAlertOption]

  // instance methods
  -[CSAudioStartStreamOption xpcObject]
  -[CSAudioStartStreamOption localizedDescription]
  -[CSAudioStartStreamOption initWithXPCObject:]
  -[CSAudioStartStreamOption .cxx_destruct]
  -[CSAudioStartStreamOption setRequestMHUUID:]
  -[CSAudioStartStreamOption requestMHUUID]
  -[CSAudioStartStreamOption copyWithZone:]
  -[CSAudioStartStreamOption requestHistoricalAudioDataWithHostTime]
  -[CSAudioStartStreamOption startRecordingHostTime]
  -[CSAudioStartStreamOption setRequestHistoricalAudioDataWithHostTime:]
  -[CSAudioStartStreamOption setStartRecordingHostTime:]
  -[CSAudioStartStreamOption setAVVCAlertBehavior:]
  -[CSAudioStartStreamOption setUseOpportunisticZLL:]
  -[CSAudioStartStreamOption setSiriSessionUUID:]
  -[CSAudioStartStreamOption setDisableEndpointer:]
  -[CSAudioStartStreamOption setDisableLocalSpeechRecognizer:]
  -[CSAudioStartStreamOption setDisablePrewamLocalSpeechRecognizer:]
  -[CSAudioStartStreamOption setRequestHistoricalAudioDataSampleCount:]
  -[CSAudioStartStreamOption setStartRecordingSampleCount:]
  -[CSAudioStartStreamOption setRequireSingleChannelLookup:]
  -[CSAudioStartStreamOption setSelectedChannel:]
  -[CSAudioStartStreamOption isAlertBehaviorOverridedBeep]
  -[CSAudioStartStreamOption avvcAlertBehavior]
  -[CSAudioStartStreamOption skipAlertBehavior]
  -[CSAudioStartStreamOption _alertBehaviorTypeFromAVVCOberrideType:]
  -[CSAudioStartStreamOption setStartAlertBehavior:]
  -[CSAudioStartStreamOption setStopAlertBehavior:]
  -[CSAudioStartStreamOption setErrorAlertBehavior:]
  -[CSAudioStartStreamOption startAlertBehavior]
  -[CSAudioStartStreamOption _avvcAlertOverrideType:]
  -[CSAudioStartStreamOption stopAlertBehavior]
  -[CSAudioStartStreamOption errorAlertBehavior]
  -[CSAudioStartStreamOption avvcStartRecordSettingsWithAudioStreamHandleId:]
  -[CSAudioStartStreamOption setSkipAlertBehavior:]
  -[CSAudioStartStreamOption requestHistoricalAudioDataSampleCount]
  -[CSAudioStartStreamOption startRecordingSampleCount]
  -[CSAudioStartStreamOption useOpportunisticZLL]
  -[CSAudioStartStreamOption requireSingleChannelLookup]
  -[CSAudioStartStreamOption selectedChannel]
  -[CSAudioStartStreamOption initTandemWithOption:]
  -[CSAudioStartStreamOption estimatedStartHostTime]
  -[CSAudioStartStreamOption setEstimatedStartHostTime:]
  -[CSAudioStartStreamOption disableEndpointer]
  -[CSAudioStartStreamOption disableLocalSpeechRecognizer]
  -[CSAudioStartStreamOption disablePrewamLocalSpeechRecognizer]
  -[CSAudioStartStreamOption siriSessionUUID]


CSAssetControllerFactory : NSObject
  // class methods
  +[CSAssetControllerFactory defaultController]


CSSiriAudioPlaybackSessionImplAVAudioPlayerBased : NSObject <AVAudioPlayerDelegate, CSSiriAudioPlaybackSession>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AFAudioPlaybackRequest *request
 @property  unsigned long options

  // instance methods
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased options]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased .cxx_destruct]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased request]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased audioPlayerDidFinishPlaying:successfully:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased audioPlayerDecodeErrorDidOccur:error:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _stop:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _handleBeginInterruption]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _handleEndInterruption:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _finalizeWithError:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased initWithQueue:request:options:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased prepareWithOptions:audioSession:completion:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased stop:completion:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased handleBeginInterruption]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased handleEndInterruption:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _prepareWithOptions:audioSession:error:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _didNotStartWithError:]
  -[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _didStopWithError:]


CSSelfTriggerDetectorEnabledPolicyIOS : CSPolicy
 @property  CSPolicy *voiceTriggerEnabledPolicy

  // instance methods
  -[CSSelfTriggerDetectorEnabledPolicyIOS .cxx_destruct]
  -[CSSelfTriggerDetectorEnabledPolicyIOS init]
  -[CSSelfTriggerDetectorEnabledPolicyIOS _subscribeEventMonitors]
  -[CSSelfTriggerDetectorEnabledPolicyIOS _addSelfTriggerDetectorEnabledConditions]
  -[CSSelfTriggerDetectorEnabledPolicyIOS voiceTriggerEnabledPolicy]
  -[CSSelfTriggerDetectorEnabledPolicyIOS setVoiceTriggerEnabledPolicy:]
  -[CSSelfTriggerDetectorEnabledPolicyIOS _deviceSupportMyriadFriendlySelfTrigger]
  -[CSSelfTriggerDetectorEnabledPolicyIOS _shouldEnableMyriadFriendlySelfTrigger]


CSVoiceTriggerXPCServiceProxy : NSObject
 @property  NSMutableSet *activationAssertions
 @property  BOOL isPhraseSpotterBypassed
 @property  BOOL isRaiseToSpeakBypassed
 @property  NSHashTable *observers
 @property  CSSiriAssertionMonitor *assertionMonitor

  // class methods
  +[CSVoiceTriggerXPCServiceProxy sharedInstance]

  // instance methods
  -[CSVoiceTriggerXPCServiceProxy unregisterObserver:]
  -[CSVoiceTriggerXPCServiceProxy notifyVoiceTriggeredSiriSessionCancelled]
  -[CSVoiceTriggerXPCServiceProxy registerObserver:]
  -[CSVoiceTriggerXPCServiceProxy isPhraseSpotterBypassed]
  -[CSVoiceTriggerXPCServiceProxy setAssertionMonitor:]
  -[CSVoiceTriggerXPCServiceProxy _fetchAssertionMonitor]
  -[CSVoiceTriggerXPCServiceProxy .cxx_destruct]
  -[CSVoiceTriggerXPCServiceProxy enableVoiceTrigger:withAssertion:timestamp:]
  -[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]
  -[CSVoiceTriggerXPCServiceProxy setActivationAssertions:]
  -[CSVoiceTriggerXPCServiceProxy setObservers:]
  -[CSVoiceTriggerXPCServiceProxy init]
  -[CSVoiceTriggerXPCServiceProxy activationAssertions]
  -[CSVoiceTriggerXPCServiceProxy notifyServiceConnectionLost]
  -[CSVoiceTriggerXPCServiceProxy assertionMonitor]
  -[CSVoiceTriggerXPCServiceProxy setIsRaiseToSpeakBypassed:]
  -[CSVoiceTriggerXPCServiceProxy isRaiseToSpeakBypassed]
  -[CSVoiceTriggerXPCServiceProxy observers]
  -[CSVoiceTriggerXPCServiceProxy fetchVoiceTriggerStats]
  -[CSVoiceTriggerXPCServiceProxy setIsPhraseSpotterBypassed:]
  -[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]
  -[CSVoiceTriggerXPCServiceProxy initWithAssertionMonitor:]


CSAdBlockerAssetDecoderV2 : NSObject
 @property  NSData *payloadData
 @property  float maxFingerprintBufferSize
 @property  NSMutableDictionary *shouldResetAdsDictionary
 @property  NSString *assetVersion

  // instance methods
  -[CSAdBlockerAssetDecoderV2 .cxx_destruct]
  -[CSAdBlockerAssetDecoderV2 assetVersion]
  -[CSAdBlockerAssetDecoderV2 payloadData]
  -[CSAdBlockerAssetDecoderV2 setPayloadData:]
  -[CSAdBlockerAssetDecoderV2 initWithData:]
  -[CSAdBlockerAssetDecoderV2 maxFingerprintBufferSize]
  -[CSAdBlockerAssetDecoderV2 shouldResetAdsDictionary]


CSSmartSiriVolumeController : NSObject <CSSmartSiriVolumeClientDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSSmartSiriVolumeClient *ssvClient
 @property  <CSSmartSiriVolumeControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSmartSiriVolumeController .cxx_destruct]
  -[CSSmartSiriVolumeController setPermanentVolumeOffsetWithDirection:]
  -[CSSmartSiriVolumeController setDelegate:]
  -[CSSmartSiriVolumeController init]
  -[CSSmartSiriVolumeController setQueue:]
  -[CSSmartSiriVolumeController setSmartSiriVolumeDirection:]
  -[CSSmartSiriVolumeController delegate]
  -[CSSmartSiriVolumeController queue]
  -[CSSmartSiriVolumeController setSmartSiriVolumePercentage:]
  -[CSSmartSiriVolumeController didSmartSiriVolumeChangeForReason:]
  -[CSSmartSiriVolumeController getVolumeForTTSType:withContext:]
  -[CSSmartSiriVolumeController _createSSVClientConnectionIfNeeded]
  -[CSSmartSiriVolumeController ssvClient]
  -[CSSmartSiriVolumeController setSsvClient:]


CSAudioTandemStream : CSAudioStream <CSAudioStreamProvidingDelegate>
 @property  CSAudioStream *primaryStream
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioTandemStream isStreaming]
  -[CSAudioTandemStream .cxx_destruct]
  -[CSAudioTandemStream startAudioStreamWithOption:completion:]
  -[CSAudioTandemStream stopAudioStreamWithOption:completion:]
  -[CSAudioTandemStream prepareAudioStreamSyncWithRequest:error:]
  -[CSAudioTandemStream setPrimaryStream:]
  -[CSAudioTandemStream primaryStream]
  -[CSAudioTandemStream initWithMasterAudioStream:name:]
  -[CSAudioTandemStream attachToPrimaryStreamWithCompletion:]
  -[CSAudioTandemStream prepareAudioStreamWithRequest:completion:]


CSBluetoothDeviceInfo : NSObject
 @property  NSString *address
 @property  BOOL supportDoAP
 @property  BOOL isTemporaryPairedNotInContacts

  // instance methods
  -[CSBluetoothDeviceInfo setAddress:]
  -[CSBluetoothDeviceInfo .cxx_destruct]
  -[CSBluetoothDeviceInfo address]
  -[CSBluetoothDeviceInfo supportDoAP]
  -[CSBluetoothDeviceInfo isTemporaryPairedNotInContacts]
  -[CSBluetoothDeviceInfo setSupportDoAP:]
  -[CSBluetoothDeviceInfo setIsTemporaryPairedNotInContacts:]


CSAttSiriStateMonitor : CSEventMonitor
 @property  unsigned long currentState

  // class methods
  +[CSAttSiriStateMonitor sharedInstance]

  // instance methods
  -[CSAttSiriStateMonitor _stopMonitoring]
  -[CSAttSiriStateMonitor _startMonitoringWithQueue:]
  -[CSAttSiriStateMonitor init]
  -[CSAttSiriStateMonitor currentState]
  -[CSAttSiriStateMonitor notifyUpdatedState:]
  -[CSAttSiriStateMonitor isInAttendingState]
  -[CSAttSiriStateMonitor setCurrentState:]


CSP2PService : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *lastCommunicatedPeer
 @property  NSString *voiceTriggerBatchId
 @property  NSString *voiceIdentificationBatchId
 @property  <CSADCompanionServiceProvider> *adCompanionServiceProvider

  // class methods
  +[CSP2PService sharedInstance]

  // instance methods
  -[CSP2PService .cxx_destruct]
  -[CSP2PService _sha1:]
  -[CSP2PService init]
  -[CSP2PService setQueue:]
  -[CSP2PService queue]
  -[CSP2PService sendCoreSpeechGradingDataToNearbyPeer]
  -[CSP2PService sendVTNearMissGradingDataToCompanion]
  -[CSP2PService isHeadlessDeviceDataCollectionModeEnabled]
  -[CSP2PService _processRemoteHeySiriCommandWithRequest:fromSenderID:withReply:]
  -[CSP2PService _processParallelRecordingCommandWithRequest:fromSenderID:withReply:]
  -[CSP2PService _receiveParallelRecordingFromPeerId:recordingInfo:withReply:]
  -[CSP2PService _receiveVoiceProfileFromPeerId:voiceProfileInfo:withReply:]
  -[CSP2PService _processGradingDataFetchCommandWithRequest:fromSenderID:withReply:]
  -[CSP2PService _processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:]
  -[CSP2PService _receiveVoiceGradingDataFromPeerId:requestInfo:withReply:]
  -[CSP2PService _processVoiceProfileListQueryCommandFromPeerId:requestInfo:withReply:]
  -[CSP2PService _processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:]
  -[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]
  -[CSP2PService _processVoiceProfileUpdateTriggerFromPeerId:requestInfo:withReply:]
  -[CSP2PService _sendCoreSpeechGradingDataToPeerId:]
  -[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]
  -[CSP2PService _sendVoiceProfileUpdateTriggerToPeerId:forLocale:]
  -[CSP2PService _sendAcousticGradingDataToPeerId:]
  -[CSP2PService isInternalWithoutProfile]
  -[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:]
  -[CSP2PService _compressFilesInDirectory:matchingPredicate:compressedFileAvailable:]
  -[CSP2PService _spIdSiriDebugVoiceProfileRootDirectoryForProfile:locale:]
  -[CSP2PService _spIdSiriDebugGradingDataRootDirectory]
  -[CSP2PService _createDirectoryIfDoesNotExist:]
  -[CSP2PService _getContentsOfDirectory:]
  -[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]
  -[CSP2PService _getHomeUserIdForSharedSiriId:withCompletion:]
  -[CSP2PService _sendVoiceProfile:toPeerId:]
  -[CSP2PService _spIdSiriDebugVoiceProfileCacheDirectoryForProfile:locale:]
  -[CSP2PService _spIdSiriDebugVTDataDirectory]
  -[CSP2PService _spIdSiriDebugVoiceProfileStoreRootDirectory]
  -[CSP2PService _spIdSiriDebugVoiceProfileStoreRootDirectoryForLocale:]
  -[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]
  -[CSP2PService sendVoiceProfileUpdatedMessageToNearbyPeerForLocale:]
  -[CSP2PService sendAcousticGradingDataToNearbyPeer]
  -[CSP2PService _speakerRecognitionAudioLogsGradingDir]
  -[CSP2PService _spIdSiriDebugTrainedUsersFilePathForLocale:]
  -[CSP2PService adCompanionServiceProvider]
  -[CSP2PService setAdCompanionServiceProvider:]
  -[CSP2PService lastCommunicatedPeer]
  -[CSP2PService setLastCommunicatedPeer:]
  -[CSP2PService voiceTriggerBatchId]
  -[CSP2PService setVoiceTriggerBatchId:]
  -[CSP2PService voiceIdentificationBatchId]
  -[CSP2PService setVoiceIdentificationBatchId:]


CSVoiceTriggerAwareZeroFilter : NSObject
 @property  float sampleRate
 @property  unsigned long vtEndInSampleCount
 @property  unsigned long numSamplesProcessed
 @property  CSAudioZeroFilter *zeroFilter
 @property  <CSVoiceTriggerAwareZeroFilterDelegate> *delegate

  // instance methods
  -[CSVoiceTriggerAwareZeroFilter sampleRate]
  -[CSVoiceTriggerAwareZeroFilter .cxx_destruct]
  -[CSVoiceTriggerAwareZeroFilter setDelegate:]
  -[CSVoiceTriggerAwareZeroFilter init]
  -[CSVoiceTriggerAwareZeroFilter flush]
  -[CSVoiceTriggerAwareZeroFilter setVtEndInSampleCount:]
  -[CSVoiceTriggerAwareZeroFilter metrics]
  -[CSVoiceTriggerAwareZeroFilter delegate]
  -[CSVoiceTriggerAwareZeroFilter vtEndInSampleCount]
  -[CSVoiceTriggerAwareZeroFilter setSampleRate:]
  -[CSVoiceTriggerAwareZeroFilter setZeroFilter:]
  -[CSVoiceTriggerAwareZeroFilter zeroFilter]
  -[CSVoiceTriggerAwareZeroFilter resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:]
  -[CSVoiceTriggerAwareZeroFilter processBuffer:atTime:]
  -[CSVoiceTriggerAwareZeroFilter numSamplesProcessed]
  -[CSVoiceTriggerAwareZeroFilter setNumSamplesProcessed:]


CSAlwaysDisabledPolicy : CSPolicy
  // instance methods
  -[CSAlwaysDisabledPolicy init]
  -[CSAlwaysDisabledPolicy _addDisabledConditions]


CSPostBuildInstallService : NSObject
  // class methods
  +[CSPostBuildInstallService sharedService]

  // instance methods
  -[CSPostBuildInstallService _cleanupVoiceProfiles]
  -[CSPostBuildInstallService _performPostBuildInstallWithCompletion:]
  -[CSPostBuildInstallService registerPostBuildInstallService]


CSContinuousAudioFingerprintProvider : NSObject <CSAudioStreamProvidingDelegate, CSAudioServerCrashMonitorDelegate>
 @property  NSHashTable *observers
 @property  CSAudioStream *audioStream
 @property  NSObject<OS_dispatch_queue> *queue
 @property  BOOL isListenPollingStarting
 @property  CSAudioCircularBuffer *audioLoggingBuffer
 @property  CSPlainAudioFileWriter *audioFileWriter
 @property  NSMutableDictionary *inUseServices
 @property  float currentMaximumBufferSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSContinuousAudioFingerprintProvider unregisterObserver:]
  -[CSContinuousAudioFingerprintProvider registerObserver:]
  -[CSContinuousAudioFingerprintProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSContinuousAudioFingerprintProvider audioStreamProvider:didStopStreamUnexpectly:]
  -[CSContinuousAudioFingerprintProvider _reset]
  -[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]
  -[CSContinuousAudioFingerprintProvider _startListenPollingWithInterval:completion:]
  -[CSContinuousAudioFingerprintProvider .cxx_destruct]
  -[CSContinuousAudioFingerprintProvider audioStreamProvider:didHardwareConfigurationChange:]
  -[CSContinuousAudioFingerprintProvider audioFileWriter]
  -[CSContinuousAudioFingerprintProvider setObservers:]
  -[CSContinuousAudioFingerprintProvider init]
  -[CSContinuousAudioFingerprintProvider setQueue:]
  -[CSContinuousAudioFingerprintProvider isListenPollingStarting]
  -[CSContinuousAudioFingerprintProvider reset]
  -[CSContinuousAudioFingerprintProvider _stopListening]
  -[CSContinuousAudioFingerprintProvider queue]
  -[CSContinuousAudioFingerprintProvider observers]
  -[CSContinuousAudioFingerprintProvider setAudioStream:]
  -[CSContinuousAudioFingerprintProvider audioStreamProvider:audioChunkForTVAvailable:]
  -[CSContinuousAudioFingerprintProvider setAudioFileWriter:]
  -[CSContinuousAudioFingerprintProvider setIsListenPollingStarting:]
  -[CSContinuousAudioFingerprintProvider audioStreamProvider:audioBufferAvailable:]
  -[CSContinuousAudioFingerprintProvider audioStream]
  -[CSContinuousAudioFingerprintProvider _setMaximumBufferSizeFromInUseServices]
  -[CSContinuousAudioFingerprintProvider _startListenPolling]
  -[CSContinuousAudioFingerprintProvider startWithUUID:withMaximumBufferSize:]
  -[CSContinuousAudioFingerprintProvider stopWithUUID:]
  -[CSContinuousAudioFingerprintProvider CSSiriEnabledMonitor:didReceiveEnabled:]
  -[CSContinuousAudioFingerprintProvider audioLoggingBuffer]
  -[CSContinuousAudioFingerprintProvider setAudioLoggingBuffer:]
  -[CSContinuousAudioFingerprintProvider inUseServices]
  -[CSContinuousAudioFingerprintProvider setInUseServices:]
  -[CSContinuousAudioFingerprintProvider currentMaximumBufferSize]
  -[CSContinuousAudioFingerprintProvider setCurrentMaximumBufferSize:]


CSKeywordAnalyzerNDAPIResult : NSObject
 @property  unsigned long phraseId
 @property  unsigned long samplesFed
 @property  unsigned long bestPhrase
 @property  unsigned long bestStart
 @property  unsigned long bestEnd
 @property  float bestScore
 @property  BOOL isEarlyWarning
 @property  BOOL isRescoring
 @property  unsigned long samplesAtFire
 @property  unsigned long startSampleCount
 @property  NSDictionary *dictionary

  // instance methods
  -[CSKeywordAnalyzerNDAPIResult setBestScore:]
  -[CSKeywordAnalyzerNDAPIResult dictionary]
  -[CSKeywordAnalyzerNDAPIResult bestScore]
  -[CSKeywordAnalyzerNDAPIResult init]
  -[CSKeywordAnalyzerNDAPIResult bestEnd]
  -[CSKeywordAnalyzerNDAPIResult phraseId]
  -[CSKeywordAnalyzerNDAPIResult bestStart]
  -[CSKeywordAnalyzerNDAPIResult startSampleCount]
  -[CSKeywordAnalyzerNDAPIResult samplesFed]
  -[CSKeywordAnalyzerNDAPIResult setSamplesFed:]
  -[CSKeywordAnalyzerNDAPIResult setBestStart:]
  -[CSKeywordAnalyzerNDAPIResult setBestEnd:]
  -[CSKeywordAnalyzerNDAPIResult samplesAtFire]
  -[CSKeywordAnalyzerNDAPIResult setPhraseId:]
  -[CSKeywordAnalyzerNDAPIResult bestPhrase]
  -[CSKeywordAnalyzerNDAPIResult setBestPhrase:]
  -[CSKeywordAnalyzerNDAPIResult isEarlyWarning]
  -[CSKeywordAnalyzerNDAPIResult setIsEarlyWarning:]
  -[CSKeywordAnalyzerNDAPIResult isRescoring]
  -[CSKeywordAnalyzerNDAPIResult setIsRescoring:]
  -[CSKeywordAnalyzerNDAPIResult setSamplesAtFire:]
  -[CSKeywordAnalyzerNDAPIResult setStartSampleCount:]


CSKeywordAnalyzerNDAPI : NSObject
 @property  unsigned long activeChannel
 @property  unsigned int activePhraseId
 @property  <CSKeywordAnalyzerNDAPIScoreDelegate> *delegate

  // instance methods
  -[CSKeywordAnalyzerNDAPI setActiveChannel:]
  -[CSKeywordAnalyzerNDAPI processAudioChunk:]
  -[CSKeywordAnalyzerNDAPI .cxx_destruct]
  -[CSKeywordAnalyzerNDAPI _resetStartAnalyzeTime]
  -[CSKeywordAnalyzerNDAPI initWithConfigPath:resourcePath:]
  -[CSKeywordAnalyzerNDAPI setDelegate:]
  -[CSKeywordAnalyzerNDAPI analyzeWavFloatData:numSamples:]
  -[CSKeywordAnalyzerNDAPI getLoggingThreshold]
  -[CSKeywordAnalyzerNDAPI activeChannel]
  -[CSKeywordAnalyzerNDAPI analyzeWavData:numSamples:]
  -[CSKeywordAnalyzerNDAPI reset]
  -[CSKeywordAnalyzerNDAPI getAnalyzedResult]
  -[CSKeywordAnalyzerNDAPI getThreshold]
  -[CSKeywordAnalyzerNDAPI getAnalyzedMpVtResults]
  -[CSKeywordAnalyzerNDAPI delegate]
  -[CSKeywordAnalyzerNDAPI getRejectLoggingThreshold]
  -[CSKeywordAnalyzerNDAPI getSuperVectorWithEndPoint:]
  -[CSKeywordAnalyzerNDAPI setActivePhraseId:]
  -[CSKeywordAnalyzerNDAPI _keywordAnalyzerNDAPIResultForPhraseId:withNovDetectorResult:]
  -[CSKeywordAnalyzerNDAPI activePhraseId]
  -[CSKeywordAnalyzerNDAPI _setStartAnalyzeTime:]
  -[CSKeywordAnalyzerNDAPI resetBest]


CSBuiltinSpeakerStateMonitor : CSEventMonitor <CSAudioServerCrashMonitorDelegate>
 @property  AVVoiceTriggerClient *alwaysOnProcessorController
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long builtInSpeakerState
 @property  BOOL isSpeakerMuted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSBuiltinSpeakerStateMonitor sharedInstance]

  // instance methods
  -[CSBuiltinSpeakerStateMonitor _stopMonitoring]
  -[CSBuiltinSpeakerStateMonitor CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSBuiltinSpeakerStateMonitor .cxx_destruct]
  -[CSBuiltinSpeakerStateMonitor _startMonitoringWithQueue:]
  -[CSBuiltinSpeakerStateMonitor init]
  -[CSBuiltinSpeakerStateMonitor setQueue:]
  -[CSBuiltinSpeakerStateMonitor alwaysOnProcessorController]
  -[CSBuiltinSpeakerStateMonitor setAlwaysOnProcessorController:]
  -[CSBuiltinSpeakerStateMonitor queue]
  -[CSBuiltinSpeakerStateMonitor currentBuiltinSpeakerState]
  -[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateMutedInfo]
  -[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateActiveInfo]
  -[CSBuiltinSpeakerStateMonitor _didReceiveSpeakerMuteStateChangeNotification:]
  -[CSBuiltinSpeakerStateMonitor _didReceiveBuiltinSpeakerStateChangeNotification:]
  -[CSBuiltinSpeakerStateMonitor _notifyObserver:withBuiltinSpeakerState:]
  -[CSBuiltinSpeakerStateMonitor _notifyObserver:isSpeakerMuted:]
  -[CSBuiltinSpeakerStateMonitor isBuiltinSpeakerMuted]
  -[CSBuiltinSpeakerStateMonitor setBuiltInSpeakerState:]
  -[CSBuiltinSpeakerStateMonitor builtInSpeakerState]
  -[CSBuiltinSpeakerStateMonitor isSpeakerMuted]
  -[CSBuiltinSpeakerStateMonitor setIsSpeakerMuted:]


NviDirectionalitySignalData : NviSignalData
 @property  unsigned long startSample
 @property  unsigned long endSample
 @property  float confidence
 @property  float azimuth
 @property  float estimatedAzimuth
 @property  double processedAudioDurMs
 @property  NSArray *spatialSpectrumData
 @property  NSDictionary *azDistribution
 @property  float mostSampledAzimuth

  // class methods
  +[NviDirectionalitySignalData headerString]

  // instance methods
  -[NviDirectionalitySignalData setConfidence:]
  -[NviDirectionalitySignalData .cxx_destruct]
  -[NviDirectionalitySignalData confidence]
  -[NviDirectionalitySignalData setAzimuth:]
  -[NviDirectionalitySignalData azimuth]
  -[NviDirectionalitySignalData setStartSample:]
  -[NviDirectionalitySignalData setEndSample:]
  -[NviDirectionalitySignalData setEstimatedAzimuth:]
  -[NviDirectionalitySignalData setProcessedAudioDurMs:]
  -[NviDirectionalitySignalData setSpatialSpectrumData:]
  -[NviDirectionalitySignalData stringForLogging]
  -[NviDirectionalitySignalData azDistribution]
  -[NviDirectionalitySignalData setAzDistribution:]
  -[NviDirectionalitySignalData initWithStartSample:endSample:confidence:azimuth:estimatedAzimuth:]
  -[NviDirectionalitySignalData mostSampledAzimuth]
  -[NviDirectionalitySignalData _spatialSpectrumLogStr]
  -[NviDirectionalitySignalData startSample]
  -[NviDirectionalitySignalData endSample]
  -[NviDirectionalitySignalData estimatedAzimuth]
  -[NviDirectionalitySignalData processedAudioDurMs]
  -[NviDirectionalitySignalData spatialSpectrumData]


CSEndpointerMetrics : NSObject
 @property  double totalAudioRecorded
 @property  unsigned long endpointBufferHostTime
 @property  NSArray *featuresAtEndpoint
 @property  long long endpointerType
 @property  NSDictionary *serverFeatureLatencyDistribution
 @property  NSDictionary *additionalMetrics

  // instance methods
  -[CSEndpointerMetrics additionalMetrics]
  -[CSEndpointerMetrics setAdditionalMetrics:]
  -[CSEndpointerMetrics .cxx_destruct]
  -[CSEndpointerMetrics featuresAtEndpoint]
  -[CSEndpointerMetrics setFeaturesAtEndpoint:]
  -[CSEndpointerMetrics serverFeatureLatencyDistribution]
  -[CSEndpointerMetrics setServerFeatureLatencyDistribution:]
  -[CSEndpointerMetrics totalAudioRecorded]
  -[CSEndpointerMetrics setTotalAudioRecorded:]
  -[CSEndpointerMetrics initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:serverFeatureLatencyDistribution:additionalMetrics:]
  -[CSEndpointerMetrics setEndpointerType:]
  -[CSEndpointerMetrics endpointBufferHostTime]
  -[CSEndpointerMetrics setEndpointBufferHostTime:]
  -[CSEndpointerMetrics endpointerType]


CSSmartSiriVolume : NSObject <CSMediaPlayingMonitorDelegate, CSAudioStreamProvidingDelegate, CSSiriEnabledMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSSiriClientBehaviorMonitorDelegate, CSSmartSiriVolumeProcessor>
 @property  CSAudioStream *audioStream
 @property  NSObject<OS_dispatch_source> *listenPollingTimer
 @property  long long listenPollingTimerCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSmartSiriVolume siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSSmartSiriVolume CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSSmartSiriVolume audioStreamProvider:didStopStreamUnexpectly:]
  -[CSSmartSiriVolume _reset]
  -[CSSmartSiriVolume _startListenWithCompletion:]
  -[CSSmartSiriVolume _startListenPollingWithInterval:completion:]
  -[CSSmartSiriVolume .cxx_construct]
  -[CSSmartSiriVolume .cxx_destruct]
  -[CSSmartSiriVolume _resetStartAnalyzeTime]
  -[CSSmartSiriVolume siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSSmartSiriVolume initializeMediaPlayingState]
  -[CSSmartSiriVolume setPermanentVolumeOffsetWithDirection:]
  -[CSSmartSiriVolume siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSSmartSiriVolume setAsset:]
  -[CSSmartSiriVolume reset]
  -[CSSmartSiriVolume siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSSmartSiriVolume initializeAlarmState]
  -[CSSmartSiriVolume setSmartSiriVolumeDirection:]
  -[CSSmartSiriVolume _stopListening]
  -[CSSmartSiriVolume setAudioStream:]
  -[CSSmartSiriVolume audioStreamProvider:audioChunkForTVAvailable:]
  -[CSSmartSiriVolume initializeTimerState]
  -[CSSmartSiriVolume setSmartSiriVolumePercentage:]
  -[CSSmartSiriVolume _setStartAnalyzeTime:]
  -[CSSmartSiriVolume audioStreamProvider:audioBufferAvailable:]
  -[CSSmartSiriVolume _setAsset:]
  -[CSSmartSiriVolume audioStream]
  -[CSSmartSiriVolume CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]
  -[CSSmartSiriVolume startSmartSiriVolume]
  -[CSSmartSiriVolume initWithSamplingRate:asset:]
  -[CSSmartSiriVolume getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]
  -[CSSmartSiriVolume didReceiveAlarmChanged:]
  -[CSSmartSiriVolume didReceiveTimerChanged:]
  -[CSSmartSiriVolume didReceiveMusicVolumeChanged:]
  -[CSSmartSiriVolume didReceiveAlarmVolumeChanged:]
  -[CSSmartSiriVolume didDetectKeywordWithResult:]
  -[CSSmartSiriVolume _startListenPolling]
  -[CSSmartSiriVolume CSSiriEnabledMonitor:didReceiveEnabled:]
  -[CSSmartSiriVolume _setDefaultParameters]
  -[CSSmartSiriVolume _convertDB2Mag:]
  -[CSSmartSiriVolume fetchInitSystemVolumes]
  -[CSSmartSiriVolume _resumeSSVProcessing]
  -[CSSmartSiriVolume _pauseSSVProcessing]
  -[CSSmartSiriVolume _getDevicedBFSForInputLinearVolume:]
  -[CSSmartSiriVolume _getFloatBufferData:]
  -[CSSmartSiriVolume _prepareSoundLevelBufferFromSamples:soundType:]
  -[CSSmartSiriVolume _processAudioChunk:soundType:]
  -[CSSmartSiriVolume _estimatedTTSVolume:lowerLimit:upperLimit:TTSmappingInputRangeLow:TTSmappingInputRangeHigh:TTSmappingOutputRangeLow:TTSmappingOutputRangeHigh:]
  -[CSSmartSiriVolume _getUserOffsetFromMusicVolumeDB:]
  -[CSSmartSiriVolume _combineResultsWithOptimalFromNoise:andOptimalFromLkfs:withUserOffset:]
  -[CSSmartSiriVolume _getDeviceSimpleOutputLinearVolumeFordBFSValue:]
  -[CSSmartSiriVolume _scaleInputWithInRangeOutRange:minIn:maxIn:minOut:maxOut:]
  -[CSSmartSiriVolume _getMusicVolumeDBCSSSVDeviceSimple:]
  -[CSSmartSiriVolume _getMusicVolumeDBCSSSVDeviceDefault:]
  -[CSSmartSiriVolume _deviceSpecificLinearVolumeToDBMappingCSSSVDeviceSimple:]
  -[CSSmartSiriVolume _deviceSpecificDBToLinearVolumeMappingCSSSVDeviceSimple:]
  -[CSSmartSiriVolume _getDeviceSimpledBFSForOutputLinearVolume:]
  -[CSSmartSiriVolume estimateSoundLevelbySoundType:]
  -[CSSmartSiriVolume estimatedTTSVolumeForNoiseLevelAndLKFS:LKFS:]
  -[CSSmartSiriVolume prepareSoundLevelBufferFromSamples:soundType:firedVoiceTriggerEvent:triggerStartTimeSampleOffset:triggerEndTimeSampleOffset:]
  -[CSSmartSiriVolume listenPollingTimer]
  -[CSSmartSiriVolume setListenPollingTimer:]
  -[CSSmartSiriVolume listenPollingTimerCount]
  -[CSSmartSiriVolume setListenPollingTimerCount:]


CSSACInfoMonitor : CSEventMonitor
  // class methods
  +[CSSACInfoMonitor sharedInstance]

  // instance methods
  -[CSSACInfoMonitor _stopMonitoring]
  -[CSSACInfoMonitor .cxx_destruct]
  -[CSSACInfoMonitor _startMonitoringWithQueue:]
  -[CSSACInfoMonitor init]
  -[CSSACInfoMonitor isDeviceRoleStereo]


CSVoiceTriggerRTModel : NSObject <NSSecureCoding, NSCopying>
 @property  NSData *modelData
 @property  NSString *modelLocale
 @property  NSString *modelHash
 @property  NSData *digest
 @property  NSData *signature
 @property  NSData *certificate

  // class methods
  +[CSVoiceTriggerRTModel supportsSecureCoding]

  // instance methods
  -[CSVoiceTriggerRTModel initWithCoder:]
  -[CSVoiceTriggerRTModel .cxx_destruct]
  -[CSVoiceTriggerRTModel digest]
  -[CSVoiceTriggerRTModel signature]
  -[CSVoiceTriggerRTModel modelHash]
  -[CSVoiceTriggerRTModel builtInRTModelDictionary]
  -[CSVoiceTriggerRTModel certificate]
  -[CSVoiceTriggerRTModel copyWithZone:]
  -[CSVoiceTriggerRTModel modelData]
  -[CSVoiceTriggerRTModel encodeWithCoder:]
  -[CSVoiceTriggerRTModel initWithData:hash:locale:]
  -[CSVoiceTriggerRTModel initWithData:hash:locale:digest:signature:certificate:]
  -[CSVoiceTriggerRTModel initWithHash:locale:]
  -[CSVoiceTriggerRTModel modelLocale]


CSSiriVibrationManager : NSObject
  // class methods
  +[CSSiriVibrationManager sharedManager]

  // instance methods
  -[CSSiriVibrationManager .cxx_destruct]
  -[CSSiriVibrationManager init]
  -[CSSiriVibrationManager dealloc]
  -[CSSiriVibrationManager vibratesForDeviceRingerSwitchState:]
  -[CSSiriVibrationManager _silentVibrationValue]
  -[CSSiriVibrationManager _ringVibrationValue]
  -[CSSiriVibrationManager _fetchRingVibrationValue]
  -[CSSiriVibrationManager _fetchSilentVibrationValue]
  -[CSSiriVibrationManager handleRingVibrationValueChange]
  -[CSSiriVibrationManager handleSilentVibrationValueChange]


CSAudioRouteChangeMonitorImpl : CSAudioRouteChangeMonitor
  // instance methods
  -[CSAudioRouteChangeMonitorImpl _stopMonitoring]
  -[CSAudioRouteChangeMonitorImpl hearstConnected]
  -[CSAudioRouteChangeMonitorImpl getHearstConnected:]
  -[CSAudioRouteChangeMonitorImpl preferredExternalRouteDidChange:]
  -[CSAudioRouteChangeMonitorImpl _notifyHearstConnectionState:]
  -[CSAudioRouteChangeMonitorImpl _fetchHearstConnectionState]
  -[CSAudioRouteChangeMonitorImpl .cxx_destruct]
  -[CSAudioRouteChangeMonitorImpl _startObservingSystemControllerLifecycle]
  -[CSAudioRouteChangeMonitorImpl _startMonitoringWithQueue:]
  -[CSAudioRouteChangeMonitorImpl init]
  -[CSAudioRouteChangeMonitorImpl _systemControllerDied:]
  -[CSAudioRouteChangeMonitorImpl getJarvisConnected:]
  -[CSAudioRouteChangeMonitorImpl _startObservingAudioRouteChange]
  -[CSAudioRouteChangeMonitorImpl carPlayIsConnectedDidChange:]
  -[CSAudioRouteChangeMonitorImpl carPlayConnected]
  -[CSAudioRouteChangeMonitorImpl _notifyJarvisConnectionState:]
  -[CSAudioRouteChangeMonitorImpl carPlayAuxStreamSupportDidChange:]
  -[CSAudioRouteChangeMonitorImpl _fetchJarvisConnectionState]
  -[CSAudioRouteChangeMonitorImpl jarvisConnected]


CSAutomaticVolumeEnabledMonitor : CSEventMonitor
  // class methods
  +[CSAutomaticVolumeEnabledMonitor sharedInstance]

  // instance methods
  -[CSAutomaticVolumeEnabledMonitor _stopMonitoring]
  -[CSAutomaticVolumeEnabledMonitor .cxx_destruct]
  -[CSAutomaticVolumeEnabledMonitor _startMonitoringWithQueue:]
  -[CSAutomaticVolumeEnabledMonitor init]
  -[CSAutomaticVolumeEnabledMonitor _notifyObserver:withEnabled:]
  -[CSAutomaticVolumeEnabledMonitor observeValueForKeyPath:ofObject:change:context:]
  -[CSAutomaticVolumeEnabledMonitor _didReceiveAutomaticVolumeToggled:]


CSSelfTriggerDetectorEnabledPolicyDarwin : CSPolicy
 @property  CSPolicy *voiceTriggerEnabledPolicy

  // instance methods
  -[CSSelfTriggerDetectorEnabledPolicyDarwin .cxx_destruct]
  -[CSSelfTriggerDetectorEnabledPolicyDarwin init]
  -[CSSelfTriggerDetectorEnabledPolicyDarwin _subscribeEventMonitors]
  -[CSSelfTriggerDetectorEnabledPolicyDarwin _addSelfTriggerDetectorEnabledConditions]
  -[CSSelfTriggerDetectorEnabledPolicyDarwin voiceTriggerEnabledPolicy]
  -[CSSelfTriggerDetectorEnabledPolicyDarwin setVoiceTriggerEnabledPolicy:]


CSSiriRecordingInfo : NSObject
 @property  BOOL isDictation
 @property  BOOL isFingerprintOnly
 @property  BOOL isSecureOfflineOnly
 @property  long long audioAlertStyle
 @property  NSString *codec
 @property  BOOL codecIsNarrowband
 @property  NSString *source
 @property  int mhSource
 @property  NSString *destination
 @property  NSString *route
 @property  CSAudioRecordDeviceInfo *deviceInfo
 @property  NSString *deviceIdentifier
 @property  NSString *modelName
 @property  NSString *dspStatus
 @property  NSString *headsetAddress
 @property  NSString *headsetName
 @property  NSDictionary *voiceTriggerEventInfo
 @property  BOOL isBluetooth
 @property  NSString *vendorId
 @property  NSString *productId
 @property  double activationAlertStartTimestamp
 @property  double startRecordingTimestamp
 @property  unsigned int audioSessionID
 @property  double firstBufferTimestamp
 @property  unsigned long firstBufferHostTime
 @property  unsigned long estimatedSpeechEndHostTime
 @property  BOOL isDucking
 @property  BOOL isEndAlertInfo
 @property  BOOL triggeredTwoShotBorealis
 @property  unsigned long audioSessionSetActiveEndHostTime
 @property  NSString *endpointerModelVersion
 @property  <AFBluetoothDevice> *bluetoothDevice
 @property  long long speechEvent

  // instance methods
  -[CSSiriRecordingInfo productId]
  -[CSSiriRecordingInfo codec]
  -[CSSiriRecordingInfo isBluetooth]
  -[CSSiriRecordingInfo vendorId]
  -[CSSiriRecordingInfo modelName]
  -[CSSiriRecordingInfo deviceInfo]
  -[CSSiriRecordingInfo route]
  -[CSSiriRecordingInfo endpointerModelVersion]
  -[CSSiriRecordingInfo isDucking]
  -[CSSiriRecordingInfo .cxx_destruct]
  -[CSSiriRecordingInfo destination]
  -[CSSiriRecordingInfo audioAlertStyle]
  -[CSSiriRecordingInfo estimatedSpeechEndHostTime]
  -[CSSiriRecordingInfo deviceIdentifier]
  -[CSSiriRecordingInfo voiceTriggerEventInfo]
  -[CSSiriRecordingInfo speechEvent]
  -[CSSiriRecordingInfo audioSessionID]
  -[CSSiriRecordingInfo mhSource]
  -[CSSiriRecordingInfo source]
  -[CSSiriRecordingInfo dspStatus]
  -[CSSiriRecordingInfo headsetAddress]
  -[CSSiriRecordingInfo headsetName]
  -[CSSiriRecordingInfo triggeredTwoShotBorealis]
  -[CSSiriRecordingInfo setTriggeredTwoShotBorealis:]
  -[CSSiriRecordingInfo isDictation]
  -[CSSiriRecordingInfo _fetchBTInfo]
  -[CSSiriRecordingInfo _bluetoothDeviceInfo]
  -[CSSiriRecordingInfo initWithDictation:fingerprintOnly:secureOfflineOnly:audioAlertStyle:recordSettings:endpointerModelVersion:recordRoute:recordDeviceInfo:playbackRoute:audioDeviceID:audioSessionID:voiceTriggerEventInfo:activationAlertStartTimestamp:startRecordingTimestamp:firstBufferTimestamp:firstBufferHostTime:estimatedSpeechEndHostTime:deviceIdentifier:includeBTInfo:speechEvent:]
  -[CSSiriRecordingInfo initWithDictation:codec:]
  -[CSSiriRecordingInfo codecIsNarrowband]
  -[CSSiriRecordingInfo isFingerprintOnly]
  -[CSSiriRecordingInfo isSecureOfflineOnly]
  -[CSSiriRecordingInfo activationAlertStartTimestamp]
  -[CSSiriRecordingInfo startRecordingTimestamp]
  -[CSSiriRecordingInfo firstBufferTimestamp]
  -[CSSiriRecordingInfo firstBufferHostTime]
  -[CSSiriRecordingInfo isEndAlertInfo]
  -[CSSiriRecordingInfo setIsEndAlertInfo:]
  -[CSSiriRecordingInfo audioSessionSetActiveEndHostTime]
  -[CSSiriRecordingInfo setAudioSessionSetActiveEndHostTime:]
  -[CSSiriRecordingInfo bluetoothDevice]


CSSpeakerRecognitionAssetMetaUpdateMonitor : CSEventMonitor
  // class methods
  +[CSSpeakerRecognitionAssetMetaUpdateMonitor sharedInstance]

  // instance methods
  -[CSSpeakerRecognitionAssetMetaUpdateMonitor _stopMonitoring]
  -[CSSpeakerRecognitionAssetMetaUpdateMonitor _asssetMetaUpdatedKey]
  -[CSSpeakerRecognitionAssetMetaUpdateMonitor _startMonitoringWithQueue:]
  -[CSSpeakerRecognitionAssetMetaUpdateMonitor init]
  -[CSSpeakerRecognitionAssetMetaUpdateMonitor _didReceiveSpeakerRecognitionAssetMetaData]
  -[CSSpeakerRecognitionAssetMetaUpdateMonitor _notifyObserver:]


CSVoiceProfileRetrainManager : NSObject <CSVoiceTriggerEnabledMonitorDelegate, CSSpeakerRecognitionAssetDownloadMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSVoiceProfileRetrainManager sharedInstance]

  // instance methods
  -[CSVoiceProfileRetrainManager triggerVoiceProfileRetrainingWithAsset:]
  -[CSVoiceProfileRetrainManager _speakerRecognitionModelRetrainCallback]
  -[CSVoiceProfileRetrainManager _speakerRecognitionCleanupDuplicatedProfilesCallback]
  -[CSVoiceProfileRetrainManager .cxx_destruct]
  -[CSVoiceProfileRetrainManager init]
  -[CSVoiceProfileRetrainManager setQueue:]
  -[CSVoiceProfileRetrainManager CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]
  -[CSVoiceProfileRetrainManager _runVoiceProfileRetrainerWithAsset:withLanguageCode:]
  -[CSVoiceProfileRetrainManager queue]
  -[CSVoiceProfileRetrainManager CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:]
  -[CSVoiceProfileRetrainManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]


CSVoiceTriggerEnabledMonitor : CSEventMonitor
  // class methods
  +[CSVoiceTriggerEnabledMonitor sharedInstance]

  // instance methods
  -[CSVoiceTriggerEnabledMonitor _stopMonitoring]
  -[CSVoiceTriggerEnabledMonitor _didReceiveVoiceTriggerSettingChangedInQueue:]
  -[CSVoiceTriggerEnabledMonitor _startMonitoringWithQueue:]
  -[CSVoiceTriggerEnabledMonitor init]
  -[CSVoiceTriggerEnabledMonitor _checkVoiceTriggerEnabled]
  -[CSVoiceTriggerEnabledMonitor _didReceiveVoiceTriggerSettingChanged:]
  -[CSVoiceTriggerEnabledMonitor isEnabled]
  -[CSVoiceTriggerEnabledMonitor _notifyObserver:withEnabled:]


CSHybridEndpointer : NSObject <CSEndpointerAssetManagerDelegate, CSEndpointAnalyzerImpl>
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  CSAsset *currentAsset
 @property  OSDFeatures *osdFeaturesAtEndpoint
 @property  BOOL canProcessCurrentRequest
 @property  _EAREndpointer *hybridClassifier
 @property  NSString *endpointerModelVersion
 @property  NSObject<OS_dispatch_queue> *serverFeaturesQueue
 @property  CSServerEndpointFeatures *lastKnownServerEPFeatures
 @property  OSDFeatures *lastKnownOSDFeatures
 @property  NSMutableArray *serverFeatureLatencies
 @property  double lastKnowServerFeaturesLatency
 @property  BOOL epResult
 @property  double serverFeaturesWarmupLatency
 @property  NSDate *lastServerFeatureTimestamp
 @property  BOOL didReceiveServerFeatures
 @property  double clientLagThresholdMs
 @property  double clampedSFLatencyMsForClientLag
 @property  BOOL useDefaultServerFeaturesOnClientLag
 @property  unsigned long extraDelayFrequency
 @property  NSDictionary *taskThresholdMap
 @property  NSObject<OS_dispatch_queue> *hybridClassifierQueue
 @property  double lastReportedEndpointTimeMs
 @property  double processedAudioInSeconds
 @property  float lastEndpointPosterior
 @property  NSObject<OS_dispatch_queue> *stateSerialQueue
 @property  BOOL didCommunicateEndpoint
 @property  unsigned long currentRequestSampleRate
 @property  double vtExtraAudioAtStartInMs
 @property  unsigned long vtEndInSampleCount
 @property  double hepAudioOriginInMs
 @property  CSAudioRecordContext *recordContext
 @property  BOOL speechEndpointDetected
 @property  NSDate *firstAudioPacketTimestamp
 @property  double firstAudioSampleSensorTimestamp
 @property  BOOL didTimestampFirstAudioPacket
 @property  unsigned long numSamplesProcessedBeforeAnchorTime
 @property  unsigned long anchorMachAbsTime
 @property  BOOL isAnchorTimeBuffered
 @property  BOOL isRequestTimeout
 @property  BOOL isASRFeatureFromServer
 @property  BOOL recordingDidStop
 @property  BOOL didDetectSpeech
 @property  double elapsedTimeWithNoSpeech
 @property  double trailingSilenceDurationAtEndpoint
 @property  long long endpointerOperationMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <CSEndpointAnalyzerDelegate> *delegate
 @property  <CSEndpointAnalyzerImplDelegate> *implDelegate
 @property  unsigned long activeChannel
 @property  long long endpointStyle
 @property  double delay
 @property  double startWaitTime
 @property  double automaticEndpointingSuspensionEndTime
 @property  double minimumDurationForEndpointer
 @property  double lastEndOfVoiceActivityTime
 @property  double lastStartOfVoiceActivityTime
 @property  double bypassSamples
 @property  long long endpointMode
 @property  double interspeechWaitTime
 @property  double endWaitTime
 @property  BOOL saveSamplesSeenInReset
 @property  NSString *mhId

  // instance methods
  -[CSHybridEndpointer mhId]
  -[CSHybridEndpointer setActiveChannel:]
  -[CSHybridEndpointer epResult]
  -[CSHybridEndpointer preheat]
  -[CSHybridEndpointer elapsedTimeWithNoSpeech]
  -[CSHybridEndpointer setLastKnownOSDFeatures:]
  -[CSHybridEndpointer setStartWaitTime:]
  -[CSHybridEndpointer implDelegate]
  -[CSHybridEndpointer isAnchorTimeBuffered]
  -[CSHybridEndpointer setNumSamplesProcessedBeforeAnchorTime:]
  -[CSHybridEndpointer setClampedSFLatencyMsForClientLag:]
  -[CSHybridEndpointer logFeaturesWithEvent:locale:]
  -[CSHybridEndpointer endpointerOperationMode]
  -[CSHybridEndpointer targetQueue]
  -[CSHybridEndpointer setIsAnchorTimeBuffered:]
  -[CSHybridEndpointer recordingStoppedForReason:]
  -[CSHybridEndpointer setCanProcessCurrentRequest:]
  -[CSHybridEndpointer fetchCurrentEndpointerOperationMode]
  -[CSHybridEndpointer delay]
  -[CSHybridEndpointer setVtExtraAudioAtStartInMs:]
  -[CSHybridEndpointer setSaveSamplesSeenInReset:]
  -[CSHybridEndpointer taskThresholdMap]
  -[CSHybridEndpointer setClientLagThresholdMs:]
  -[CSHybridEndpointer setLastKnowServerFeaturesLatency:]
  -[CSHybridEndpointer currentRequestSampleRate]
  -[CSHybridEndpointer setDidCommunicateEndpoint:]
  -[CSHybridEndpointer processFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:]
  -[CSHybridEndpointer setTargetQueue:]
  -[CSHybridEndpointer endpointerModelVersion]
  -[CSHybridEndpointer setCurrentAsset:]
  -[CSHybridEndpointer useDefaultServerFeaturesOnClientLag]
  -[CSHybridEndpointer setDelay:]
  -[CSHybridEndpointer .cxx_destruct]
  -[CSHybridEndpointer minimumDurationForEndpointer]
  -[CSHybridEndpointer lastEndpointPosterior]
  -[CSHybridEndpointer processedAudioInSeconds]
  -[CSHybridEndpointer lastKnownServerEPFeatures]
  -[CSHybridEndpointer canProcessCurrentRequest]
  -[CSHybridEndpointer processServerEndpointFeatures:]
  -[CSHybridEndpointer clientLagThresholdMs]
  -[CSHybridEndpointer isASRFeatureFromServer]
  -[CSHybridEndpointer hepAudioOriginInMs]
  -[CSHybridEndpointer setLastReportedEndpointTimeMs:]
  -[CSHybridEndpointer recordingDidStop]
  -[CSHybridEndpointer didTimestampFirstAudioPacket]
  -[CSHybridEndpointer serverFeaturesQueue]
  -[CSHybridEndpointer serverFeaturesWarmupLatency]
  -[CSHybridEndpointer _getCSHybridEndpointerConfigForAsset:]
  -[CSHybridEndpointer processAudioSamplesAsynchronously:]
  -[CSHybridEndpointer firstAudioSampleSensorTimestamp]
  -[CSHybridEndpointer setImplDelegate:]
  -[CSHybridEndpointer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]
  -[CSHybridEndpointer setDelegate:]
  -[CSHybridEndpointer serverFeatureLatencies]
  -[CSHybridEndpointer _shouldUsePhaticWithRecordContext]
  -[CSHybridEndpointer vtExtraAudioAtStartInMs]
  -[CSHybridEndpointer startWaitTime]
  -[CSHybridEndpointer processTaskString:]
  -[CSHybridEndpointer setAutomaticEndpointingSuspensionEndTime:]
  -[CSHybridEndpointer firstAudioPacketTimestamp]
  -[CSHybridEndpointer setHepAudioOriginInMs:]
  -[CSHybridEndpointer setTrailingSilenceDurationAtEndpoint:]
  -[CSHybridEndpointer init]
  -[CSHybridEndpointer setHybridClassifierQueue:]
  -[CSHybridEndpointer saveSamplesSeenInReset]
  -[CSHybridEndpointer didDetectSpeech]
  -[CSHybridEndpointer logAnchorMachAbsTime:numSamplesProcessedBeforeAnchorTime:isAnchorTimeBuffered:]
  -[CSHybridEndpointer endpointStyle]
  -[CSHybridEndpointer setServerFeaturesWarmupLatency:]
  -[CSHybridEndpointer setEndpointMode:]
  -[CSHybridEndpointer hybridClassifier]
  -[CSHybridEndpointer hybridClassifierQueue]
  -[CSHybridEndpointer setSpeechEndpointDetected:]
  -[CSHybridEndpointer activeChannel]
  -[CSHybridEndpointer isRequestTimeout]
  -[CSHybridEndpointer _emitEndpointDetectedEventWithEndpointTimeMs:endpointBufferHostTime:endpointerFeatures:endpointerDecisionLagInNs:extraDelayMs:endpointScore:asrFeatureLatencies:]
  -[CSHybridEndpointer lastServerFeatureTimestamp]
  -[CSHybridEndpointer setLastEndpointPosterior:]
  -[CSHybridEndpointer setEpResult:]
  -[CSHybridEndpointer setExtraDelayFrequency:]
  -[CSHybridEndpointer setRecordContext:]
  -[CSHybridEndpointer setIsASRFeatureFromServer:]
  -[CSHybridEndpointer terminateProcessing]
  -[CSHybridEndpointer setVtEndInSampleCount:]
  -[CSHybridEndpointer updateEndpointerThreshold:]
  -[CSHybridEndpointer stopEndpointer]
  -[CSHybridEndpointer reset]
  -[CSHybridEndpointer setAnchorMachAbsTime:]
  -[CSHybridEndpointer clampedSFLatencyMsForClientLag]
  -[CSHybridEndpointer setProcessedAudioInSeconds:]
  -[CSHybridEndpointer setServerFeatureLatencies:]
  -[CSHybridEndpointer recordContext]
  -[CSHybridEndpointer extraDelayFrequency]
  -[CSHybridEndpointer setRecordingDidStop:]
  -[CSHybridEndpointer didCommunicateEndpoint]
  -[CSHybridEndpointer setCurrentRequestSampleRate:]
  -[CSHybridEndpointer _updateEndpointerDelayedTriggerByMhId:]
  -[CSHybridEndpointer setUseDefaultServerFeaturesOnClientLag:]
  -[CSHybridEndpointer setStateSerialQueue:]
  -[CSHybridEndpointer setMinimumDurationForEndpointer:]
  -[CSHybridEndpointer setDidReceiveServerFeatures:]
  -[CSHybridEndpointer setElapsedTimeWithNoSpeech:]
  -[CSHybridEndpointer setInterspeechWaitTime:]
  -[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:]
  -[CSHybridEndpointer setEndWaitTime:]
  -[CSHybridEndpointer setOsdFeaturesAtEndpoint:]
  -[CSHybridEndpointer lastKnownOSDFeatures]
  -[CSHybridEndpointer setFirstAudioSampleSensorTimestamp:]
  -[CSHybridEndpointer endpointerAssetManagerDidUpdateAsset:]
  -[CSHybridEndpointer setServerFeaturesQueue:]
  -[CSHybridEndpointer anchorMachAbsTime]
  -[CSHybridEndpointer osdFeaturesAtEndpoint]
  -[CSHybridEndpointer delegate]
  -[CSHybridEndpointer currentAsset]
  -[CSHybridEndpointer numSamplesProcessedBeforeAnchorTime]
  -[CSHybridEndpointer setLastKnownServerEPFeatures:]
  -[CSHybridEndpointer endpointerAssetManagerDidUpdateOSDAsset:]
  -[CSHybridEndpointer trailingSilenceDurationAtEndpoint]
  -[CSHybridEndpointer vtEndInSampleCount]
  -[CSHybridEndpointer updateEndpointerDelayedTrigger:]
  -[CSHybridEndpointer setDidDetectSpeech:]
  -[CSHybridEndpointer processASRFeatures:fromServer:]
  -[CSHybridEndpointer setMhId:]
  -[CSHybridEndpointer setEndpointerOperationMode:]
  -[CSHybridEndpointer lastEndOfVoiceActivityTime]
  -[CSHybridEndpointer interspeechWaitTime]
  -[CSHybridEndpointer automaticEndpointingSuspensionEndTime]
  -[CSHybridEndpointer setDidTimestampFirstAudioPacket:]
  -[CSHybridEndpointer setTaskThresholdMap:]
  -[CSHybridEndpointer setHybridClassifier:]
  -[CSHybridEndpointer lastKnowServerFeaturesLatency]
  -[CSHybridEndpointer endWaitTime]
  -[CSHybridEndpointer handleVoiceTriggerWithActivationInfo:]
  -[CSHybridEndpointer stateSerialQueue]
  -[CSHybridEndpointer _readParametersFromHEPAsset:]
  -[CSHybridEndpointer setLastServerFeatureTimestamp:]
  -[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]
  -[CSHybridEndpointer didReceiveServerFeatures]
  -[CSHybridEndpointer setIsRequestTimeout:]
  -[CSHybridEndpointer endpointMode]
  -[CSHybridEndpointer speechEndpointDetected]
  -[CSHybridEndpointer lastReportedEndpointTimeMs]
  -[CSHybridEndpointer lastStartOfVoiceActivityTime]
  -[CSHybridEndpointer setEndpointerModelVersion:]
  -[CSHybridEndpointer setFirstAudioPacketTimestamp:]
  -[CSHybridEndpointer _multimodalEndpointerEnabled]
  -[CSHybridEndpointer setEndpointStyle:]


CSRemoteRecordClient : NSObject
 @property  OS_remote_device *device
 @property  <CSRemoteRecordClientDelegate> *delegate
 @property  unsigned long audioStreamHandleId
 @property  NSString *deviceId

  // instance methods
  -[CSRemoteRecordClient isRecording]
  -[CSRemoteRecordClient setDevice:]
  -[CSRemoteRecordClient deviceId]
  -[CSRemoteRecordClient isConnected]
  -[CSRemoteRecordClient .cxx_destruct]
  -[CSRemoteRecordClient stopRecording:]
  -[CSRemoteRecordClient setDelegate:]
  -[CSRemoteRecordClient init]
  -[CSRemoteRecordClient delegate]
  -[CSRemoteRecordClient voiceTriggerEventInfo]
  -[CSRemoteRecordClient dealloc]
  -[CSRemoteRecordClient device]
  -[CSRemoteRecordClient audioStreamHandleId]
  -[CSRemoteRecordClient didDeviceConnect:]
  -[CSRemoteRecordClient didDeviceDisconnect:]
  -[CSRemoteRecordClient initWithDeviceId:audioStreamHandleId:]
  -[CSRemoteRecordClient _handleServerEvent:]
  -[CSRemoteRecordClient _handleServerError:]
  -[CSRemoteRecordClient _handleServerMessage:]
  -[CSRemoteRecordClient _handleDidStartRecordingMessage:]
  -[CSRemoteRecordClient _handleTwoShotDetectedMessage:]
  -[CSRemoteRecordClient isRemoteDeviceGibraltar]
  -[CSRemoteRecordClient isRemoteDeviceDarwin]
  -[CSRemoteRecordClient waitingForConnection:error:]
  -[CSRemoteRecordClient startRecordingWithOptions:error:]
  -[CSRemoteRecordClient didPlayEndpointBeep]
  -[CSRemoteRecordClient hasPendingTwoShotBeep]


CSSiriEnabledMonitor : CSEventMonitor
  // class methods
  +[CSSiriEnabledMonitor sharedInstance]

  // instance methods
  -[CSSiriEnabledMonitor _stopMonitoring]
  -[CSSiriEnabledMonitor fetchIsEnabled]
  -[CSSiriEnabledMonitor _startMonitoringWithQueue:]
  -[CSSiriEnabledMonitor init]
  -[CSSiriEnabledMonitor isEnabled]
  -[CSSiriEnabledMonitor _notifyObserver:withEnabled:]
  -[CSSiriEnabledMonitor _didReceiveSiriSettingChanged:]


NviCSAudioDataSource : NSObject <CSAudioStreamProvidingDelegate, NviAudioDataSource>
 @property  NviContext *nviCtx
 @property  NSHashTable *receivers
 @property  CSAudioStream *audioStream
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long sampleRate
 @property  unsigned long numBytesPerSample
 @property  unsigned long type

  // instance methods
  -[NviCSAudioDataSource sampleRate]
  -[NviCSAudioDataSource audioStreamProvider:didStopStreamUnexpectly:]
  -[NviCSAudioDataSource .cxx_destruct]
  -[NviCSAudioDataSource receivers]
  -[NviCSAudioDataSource nviCtx]
  -[NviCSAudioDataSource init]
  -[NviCSAudioDataSource setQueue:]
  -[NviCSAudioDataSource removeReceiver:]
  -[NviCSAudioDataSource type]
  -[NviCSAudioDataSource addReceiver:]
  -[NviCSAudioDataSource queue]
  -[NviCSAudioDataSource setAudioStream:]
  -[NviCSAudioDataSource audioStreamProvider:audioChunkForTVAvailable:]
  -[NviCSAudioDataSource audioStreamProvider:audioBufferAvailable:]
  -[NviCSAudioDataSource audioStream]
  -[NviCSAudioDataSource startWithNviContext:didStartHandler:]
  -[NviCSAudioDataSource stopWithDidStopHandler:]
  -[NviCSAudioDataSource setNviCtx:]
  -[NviCSAudioDataSource _createAudioStreamWithCurrentNviContext]
  -[NviCSAudioDataSource numBytesPerSample]
  -[NviCSAudioDataSource audioStreamProvider:avBufferAvailable:]
  -[NviCSAudioDataSource setReceivers:]


CSAlertBehaviorPredictor : NSObject
  // class methods
  +[CSAlertBehaviorPredictor predictStartAlertBehaviorFor:avSystemController:hasAOP:supportVibrator:isiOS:isWatchOS:isHorseman:isBridgeOS:recordRoute:playbackRoute:]
  +[CSAlertBehaviorPredictor predictStartAlertBehaviorFor:recordRoute:playbackRoute:]


CSDefaultAudioRouteChangeMonitorMac : CSEventMonitor
  // class methods
  +[CSDefaultAudioRouteChangeMonitorMac sharedInstance]

  // instance methods
  -[CSDefaultAudioRouteChangeMonitorMac isDefaultInputBuiltInMic]
  -[CSDefaultAudioRouteChangeMonitorMac isDefaultOutputBultInSpeaker]
  -[CSDefaultAudioRouteChangeMonitorMac defaultOutputAudioDeviceID]


CSAudioInjectionEngineFactory : NSObject
  // class methods
  +[CSAudioInjectionEngineFactory engineWithDeviceType:streamHandleId:]


CSSiriBluetoothManager : NSObject
  // class methods
  +[CSSiriBluetoothManager sharedInstance]

  // instance methods
  -[CSSiriBluetoothManager .cxx_destruct]
  -[CSSiriBluetoothManager _init]
  -[CSSiriBluetoothManager deviceWithAddress:]
  -[CSSiriBluetoothManager deviceWithUID:]
  -[CSSiriBluetoothManager prewarmDeviceWithIdentifier:]


CSBuiltInVoiceTrigger : NSObject <CSKeywordAnalyzerNDAPIScoreDelegate, CSActivationEventNotificationHandlerDelegate, CSAudioStreamProvidingDelegate, CSSiriClientBehaviorMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSVoiceTriggerXPCServiceProxyDelegate, CSStateMachineDelegate, CSBluetoothWirelessSplitterMonitorDelegate, CSAudioRouteChangeMonitorDelegate, CSPhoneCallStateMonitorDelegate, CSVoiceTriggerEnabledMonitorDelegate, CSSelfTriggerDetectorDelegate, CSSecondPassProgressProviding>
 @property  CSPolicy *voiceTriggerStartPolicy
 @property  CSAudioStream *audioStream
 @property  BOOL voiceTriggerEnabled
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAsset *currentAsset
 @property  NSMutableArray *keywordAnalyzersNDAPI
 @property  BOOL hasTriggerPending
 @property  float firstPassThreshold
 @property  float bestScore
 @property  unsigned long bestChannel
 @property  CSKeywordAnalyzerNDAPIResult *onsetResult
 @property  CSKeywordAnalyzerNDAPIResult *lastTriggeredOnsetResult
 @property  unsigned long lastTriggeredBestChannel
 @property  unsigned long onsetChannel
 @property  unsigned long channelSelectionDelay
 @property  unsigned long delayInSamplesRequiredForChannelSelection
 @property  float masterChannelScoreBoost
 @property  NSDictionary *channelSelectionScores
 @property  unsigned long processingChunkSamples
 @property  unsigned long processingChannelsBitset
 @property  CSVoiceTriggerSecondPass *voiceTriggerSecondPass
 @property  BOOL isSecondPassRunning
 @property  BOOL isSecondPassCancelled
 @property  BOOL isSiriClientListening
 @property  BOOL isListenPollingStarting
 @property  CSAudioProvider *audioProvider
 @property  NSMutableArray *audioStreamHoldings
 @property  CSOSTransaction *secondPassTransaction
 @property  BOOL isPhraseSpotterBypassed
 @property  BOOL isExternalPhraseSpotterRunning
 @property  CSPolicy *voiceTriggerAOPModeStartPolicy
 @property  CSStateMachine *stateMachine
 @property  CSVoiceTriggerAlwaysOnProcessor *alwaysOnProcessorController
 @property  NSObject<OS_dispatch_group> *recordingWillStartGroup
 @property  unsigned long secondChanceHotTillMachTime
 @property  unsigned long currentSplitterState
 @property  BOOL shouldDisableOnSpeakerVerificationInSplitterMode
 @property  NSString *name
 @property  BOOL firstTimeAssetConfigured
 @property  NSMutableArray *assetConfigWaitingBuffer
 @property  NSObject<OS_dispatch_source> *validationTimer
 @property  NSNumber *firstPassMyriadGoodness
 @property  unsigned long phoneCallState
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  <CSSecondPassProgressDelegate> *secondPassProgressDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSBuiltInVoiceTrigger phoneCallState]
  -[CSBuiltInVoiceTrigger setPhoneCallState:]
  -[CSBuiltInVoiceTrigger keywordAnalyzerNDAPI:hasResultAvailable:forChannel:]
  -[CSBuiltInVoiceTrigger audioStreamHoldings]
  -[CSBuiltInVoiceTrigger _transitAOPModeAsync:]
  -[CSBuiltInVoiceTrigger siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSBuiltInVoiceTrigger _isBuiltInAOPVoiceTriggerEvent:]
  -[CSBuiltInVoiceTrigger firstTimeAssetConfigured]
  -[CSBuiltInVoiceTrigger isPhraseSpotterBypassed]
  -[CSBuiltInVoiceTrigger name]
  -[CSBuiltInVoiceTrigger keywordAnalyzerNDAPI:hasMpVtResultsAvailable:forChannel:]
  -[CSBuiltInVoiceTrigger setVoiceTriggerSecondPass:]
  -[CSBuiltInVoiceTrigger _setupStateMachine]
  -[CSBuiltInVoiceTrigger CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSBuiltInVoiceTrigger _currentState]
  -[CSBuiltInVoiceTrigger _firstPassVoiceTriggerSignalEstimate]
  -[CSBuiltInVoiceTrigger stateMachine]
  -[CSBuiltInVoiceTrigger audioStreamProvider:didStopStreamUnexpectly:]
  -[CSBuiltInVoiceTrigger _reset]
  -[CSBuiltInVoiceTrigger _startListenWithCompletion:]
  -[CSBuiltInVoiceTrigger _startListenPollingWithInterval:completion:]
  -[CSBuiltInVoiceTrigger setOnsetChannel:]
  -[CSBuiltInVoiceTrigger _shouldReuseBuiltInAudioProvider]
  -[CSBuiltInVoiceTrigger _transitAOPMode:]
  -[CSBuiltInVoiceTrigger setCurrentSplitterState:]
  -[CSBuiltInVoiceTrigger setProcessingChunkSamples:]
  -[CSBuiltInVoiceTrigger CSBluetoothWirelessSplitterMonitor:didReceiveSplitterStateChange:shouldDisableSpeakerVerificationInSplitterMode:]
  -[CSBuiltInVoiceTrigger voiceTriggerSecondPass]
  -[CSBuiltInVoiceTrigger recordingWillStartGroup]
  -[CSBuiltInVoiceTrigger onsetChannel]
  -[CSBuiltInVoiceTrigger setCurrentAsset:]
  -[CSBuiltInVoiceTrigger .cxx_destruct]
  -[CSBuiltInVoiceTrigger _startVoiceTriggerWithCompletion:]
  -[CSBuiltInVoiceTrigger firstPassMyriadGoodness]
  -[CSBuiltInVoiceTrigger setFirstPassMyriadGoodness:]
  -[CSBuiltInVoiceTrigger processingChunkSamples]
  -[CSBuiltInVoiceTrigger _stateName:]
  -[CSBuiltInVoiceTrigger siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSBuiltInVoiceTrigger secondPassTransaction]
  -[CSBuiltInVoiceTrigger setVoiceTriggerAOPModeStartPolicy:]
  -[CSBuiltInVoiceTrigger isSecondPassCancelled]
  -[CSBuiltInVoiceTrigger setShouldDisableOnSpeakerVerificationInSplitterMode:]
  -[CSBuiltInVoiceTrigger setIsSecondPassRunning:]
  -[CSBuiltInVoiceTrigger setMasterChannelScoreBoost:]
  -[CSBuiltInVoiceTrigger _cancelAllAudioStreamHold]
  -[CSBuiltInVoiceTrigger secondPassProgressDelegate]
  -[CSBuiltInVoiceTrigger _updateCurrentSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
  -[CSBuiltInVoiceTrigger setBestScore:]
  -[CSBuiltInVoiceTrigger setVoiceTriggerStartPolicy:]
  -[CSBuiltInVoiceTrigger setName:]
  -[CSBuiltInVoiceTrigger lastTriggeredBestChannel]
  -[CSBuiltInVoiceTrigger _transitAOPModeSync:]
  -[CSBuiltInVoiceTrigger setDelegate:]
  -[CSBuiltInVoiceTrigger siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSBuiltInVoiceTrigger _handleAudioChunk:]
  -[CSBuiltInVoiceTrigger onsetResult]
  -[CSBuiltInVoiceTrigger setVoiceTriggerEnabled:]
  -[CSBuiltInVoiceTrigger setAsset:]
  -[CSBuiltInVoiceTrigger setSecondPassTransaction:]
  -[CSBuiltInVoiceTrigger _handleSecondPassResult:voiceTriggerInfo:deviceId:secondChanceCandidate:error:]
  -[CSBuiltInVoiceTrigger CSAudioServerCrashMonitorDidReceiveServerCrash:]
  -[CSBuiltInVoiceTrigger didTransitFrom:to:by:]
  -[CSBuiltInVoiceTrigger setChannelSelectionScores:]
  -[CSBuiltInVoiceTrigger _stopAPVoiceTrigger]
  -[CSBuiltInVoiceTrigger _shouldHandleAOPVoiceTrigger]
  -[CSBuiltInVoiceTrigger bestScore]
  -[CSBuiltInVoiceTrigger bestChannel]
  -[CSBuiltInVoiceTrigger setStateMachine:]
  -[CSBuiltInVoiceTrigger _eventName:]
  -[CSBuiltInVoiceTrigger _createSecondPassIfNeededWithFirstPassSource:]
  -[CSBuiltInVoiceTrigger setLastTriggeredBestChannel:]
  -[CSBuiltInVoiceTrigger setQueue:]
  -[CSBuiltInVoiceTrigger _cancelLastAudioStreamHold]
  -[CSBuiltInVoiceTrigger processingChannelsBitset]
  -[CSBuiltInVoiceTrigger _setIsSecondPassRunning:]
  -[CSBuiltInVoiceTrigger lastTriggeredOnsetResult]
  -[CSBuiltInVoiceTrigger _startAOPVoiceTrigger]
  -[CSBuiltInVoiceTrigger setAssetConfigWaitingBuffer:]
  -[CSBuiltInVoiceTrigger _APModeValidationTimerFired]
  -[CSBuiltInVoiceTrigger _handleVoiceTriggerSecondPassWithSource:deviceId:audioProviderUUID:firstPassInfo:]
  -[CSBuiltInVoiceTrigger setKeywordAnalyzersNDAPI:]
  -[CSBuiltInVoiceTrigger didIgnoreEvent:from:]
  -[CSBuiltInVoiceTrigger keywordAnalyzersNDAPI]
  -[CSBuiltInVoiceTrigger isExternalPhraseSpotterRunning]
  -[CSBuiltInVoiceTrigger isListenPollingStarting]
  -[CSBuiltInVoiceTrigger shouldDisableOnSpeakerVerificationInSplitterMode]
  -[CSBuiltInVoiceTrigger _startAPVoiceTriggerWithCompletion:]
  -[CSBuiltInVoiceTrigger setFirstTimeAssetConfigured:]
  -[CSBuiltInVoiceTrigger reset]
  -[CSBuiltInVoiceTrigger _receivedHearstConnectionEvent:]
  -[CSBuiltInVoiceTrigger siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSBuiltInVoiceTrigger _addAudioStreamHold:]
  -[CSBuiltInVoiceTrigger CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]
  -[CSBuiltInVoiceTrigger pendingSecondPassTriggerWasClearedForClient:deviceId:]
  -[CSBuiltInVoiceTrigger setSecondPassProgressDelegate:]
  -[CSBuiltInVoiceTrigger hasTriggerPending]
  -[CSBuiltInVoiceTrigger setRecordingWillStartGroup:]
  -[CSBuiltInVoiceTrigger initWithTargetQueue:]
  -[CSBuiltInVoiceTrigger firstPassThreshold]
  -[CSBuiltInVoiceTrigger alwaysOnProcessorController]
  -[CSBuiltInVoiceTrigger assetConfigWaitingBuffer]
  -[CSBuiltInVoiceTrigger _shouldEnableAOPVoiceTrigger]
  -[CSBuiltInVoiceTrigger setIsSiriClientListening:]
  -[CSBuiltInVoiceTrigger channelSelectionDelay]
  -[CSBuiltInVoiceTrigger setAlwaysOnProcessorController:]
  -[CSBuiltInVoiceTrigger CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:]
  -[CSBuiltInVoiceTrigger setAudioProvider:]
  -[CSBuiltInVoiceTrigger audioProvider]
  -[CSBuiltInVoiceTrigger _hasHFPDuringPhoneCall]
  -[CSBuiltInVoiceTrigger delayInSamplesRequiredForChannelSelection]
  -[CSBuiltInVoiceTrigger masterChannelScoreBoost]
  -[CSBuiltInVoiceTrigger setIsExternalPhraseSpotterRunning:]
  -[CSBuiltInVoiceTrigger setFirstPassThreshold:]
  -[CSBuiltInVoiceTrigger voiceTriggerStartPolicy]
  -[CSBuiltInVoiceTrigger delegate]
  -[CSBuiltInVoiceTrigger setValidationTimer:]
  -[CSBuiltInVoiceTrigger CSPhoneCallStateMonitor:didRecievePhoneCallStateChange:]
  -[CSBuiltInVoiceTrigger isSecondPassRunning]
  -[CSBuiltInVoiceTrigger _stopListening]
  -[CSBuiltInVoiceTrigger currentAsset]
  -[CSBuiltInVoiceTrigger _shouldSecondPassKeepAlive]
  -[CSBuiltInVoiceTrigger queue]
  -[CSBuiltInVoiceTrigger _isVoiceTriggerStateTransitionEvent:]
  -[CSBuiltInVoiceTrigger start]
  -[CSBuiltInVoiceTrigger _shouldEnableAPVoiceTrigger]
  -[CSBuiltInVoiceTrigger currentSplitterState]
  -[CSBuiltInVoiceTrigger _transitVoiceTriggerStatus:force:]
  -[CSBuiltInVoiceTrigger _teardownSecondPassIfNeeded]
  -[CSBuiltInVoiceTrigger setLastTriggeredOnsetResult:]
  -[CSBuiltInVoiceTrigger CSVoiceTriggerXPCServiceProxy:bypassPhraseSpotter:]
  -[CSBuiltInVoiceTrigger setHasTriggerPending:]
  -[CSBuiltInVoiceTrigger setAudioStream:]
  -[CSBuiltInVoiceTrigger setIsPhraseSpotterBypassed:]
  -[CSBuiltInVoiceTrigger setAudioStreamHoldings:]
  -[CSBuiltInVoiceTrigger validationTimer]
  -[CSBuiltInVoiceTrigger CSVoiceTriggerXPCServiceProxy:bypassRaiseToSpeak:]
  -[CSBuiltInVoiceTrigger cancelSecondPassRunning]
  -[CSBuiltInVoiceTrigger channelSelectionScores]
  -[CSBuiltInVoiceTrigger audioStreamProvider:audioChunkForTVAvailable:]
  -[CSBuiltInVoiceTrigger setBestChannel:]
  -[CSBuiltInVoiceTrigger setChannelSelectionDelay:]
  -[CSBuiltInVoiceTrigger setSecondChanceHotTillMachTime:]
  -[CSBuiltInVoiceTrigger setDelayInSamplesRequiredForChannelSelection:]
  -[CSBuiltInVoiceTrigger isSiriClientListening]
  -[CSBuiltInVoiceTrigger setProcessingChannelsBitset:]
  -[CSBuiltInVoiceTrigger activationEventNotificationHandler:event:completion:]
  -[CSBuiltInVoiceTrigger voiceTriggerEnabled]
  -[CSBuiltInVoiceTrigger _stopAOPVoiceTrigger]
  -[CSBuiltInVoiceTrigger secondChanceHotTillMachTime]
  -[CSBuiltInVoiceTrigger voiceTriggerAOPModeStartPolicy]
  -[CSBuiltInVoiceTrigger setIsListenPollingStarting:]
  -[CSBuiltInVoiceTrigger _notifyEvent:]
  -[CSBuiltInVoiceTrigger audioStreamProvider:audioBufferAvailable:]
  -[CSBuiltInVoiceTrigger _setAsset:]
  -[CSBuiltInVoiceTrigger audioStream]
  -[CSBuiltInVoiceTrigger setIsSecondPassCancelled:]
  -[CSBuiltInVoiceTrigger _reportVoiceTriggerFirstPassFireFromAP]
  -[CSBuiltInVoiceTrigger setOnsetResult:]
  -[CSBuiltInVoiceTrigger selfTriggerDetector:didDetectSelfTrigger:]
  -[CSBuiltInVoiceTrigger _requestStartAudioStreamWithSource:context:completion:]
  -[CSBuiltInVoiceTrigger _keywordAnalyzerNDAPI:hasResultAvailable:forChannel:]


CSVoiceTriggerSecondPass : NSObject <CSKeywordAnalyzerNDEAPIScoreDelegate, CSVoiceTriggerEnabledMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSAudioStreamProvidingDelegate, CSMediaPlayingMonitorDelegate, CSVolumeMonitorDelegate, SSRSpeakerRecognitionControllerDelegate, CSSelfTriggerDetectorDelegate>
 @property  CSSpeechManager *speechManager
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAsset *currentAsset
 @property  CSAudioStream *audioStream
 @property  NSString *audioProviderUUID
 @property  CSKeywordAnalyzerNDAPI *syncKeywordAnalyzerNDAPI
 @property  CSKeywordAnalyzerNDEAPI *keywordAnalyzerNDEAPI
 @property  CSSyncKeywordAnalyzerQuasar *syncKeywordAnalyzerQuasar
 @property  SSRSpeakerRecognitionController *speakerRecognitionController
 @property  SSRSpeakerRecognitionContext *ssrContext
 @property  @? resultCompletion
 @property  BOOL hasReceivedNDEAPIResult
 @property  unsigned long secondPassTimeout
 @property  unsigned long numProcessedSamples
 @property  unsigned long numAnalyzedSamples
 @property  float referenceKeywordThreshold
 @property  float keywordThreshold
 @property  float keywordThresholdSecondChance
 @property  float effectiveKeywordThreshold
 @property  float keywordLoggingThreshold
 @property  float lastScore
 @property  BOOL isSecondChanceHot
 @property  float keywordRejectLoggingThreshold
 @property  float secondPassPrependingSec
 @property  float phsRejectLoggingThreshold
 @property  float phsThreshold
 @property  unsigned long extraSamplesAtStart
 @property  unsigned long analyzerPrependingSamples
 @property  unsigned long analyzerTrailingSamples
 @property  BOOL shouldUsePHS
 @property  unsigned long nearMissDelayTimeout
 @property  unsigned long nearMissCandidateDetectedSamples
 @property  BOOL hasPendingNearMiss
 @property  float recognizerScore
 @property  float recognizerScoreScaleFactor
 @property  float recognizerThresholdOffset
 @property  unsigned long earlyDetectFiredMachTime
 @property  unsigned long activeChannel
 @property  unsigned long selectedChannelFromFirstPass
 @property  unsigned long processedSampleCountsInPending
 @property  unsigned long firstPassTriggerStartSampleCount
 @property  unsigned long firstPassTriggerFireSampleCount
 @property  NSDictionary *firstPassChannelSelectionScores
 @property  float firstPassChannelSelectionDelaySeconds
 @property  float firstPassMasterChannelScoreBoost
 @property  float firstPassOnsetScore
 @property  unsigned long firstPassOnsetChannel
 @property  BOOL didWakeAP
 @property  BOOL hasTriggerCandidate
 @property  BOOL isStartSampleCountMarked
 @property  unsigned long secondPassAnalyzerStartSampleCount
 @property  unsigned long secondPassTriggerMachAbsTime
 @property  NSObject<OS_dispatch_queue> *stateSerialQueue
 @property  double lastAggTime
 @property  double cumulativeUptime
 @property  double cumulativeDowntime
 @property  CSAudioCircularBuffer *audioBuffer
 @property  unsigned long firstPassSource
 @property  NSString *firstPassDeviceId
 @property  unsigned long secondPassClient
 @property  NSString *currentLocale
 @property  float twoShotFeedbackDelay
 @property  float twoShotFeedbackDelayRemora
 @property  CSPlainAudioFileWriter *audioFileWriter
 @property  BOOL secondPassHasMadeDecision
 @property  long long mediaPlayingState
 @property  float mediaVolume
 @property  CSShadowMicScoreCreator *shadowMicScoreCreator
 @property  NSMutableData *dataBufferNDEAPI
 @property  unsigned long dataBufferPositionNDEAPI
 @property  unsigned char hasReceivedEarlyDetectNDEAPIResult
 @property  float shadowMicScoreThresholdForVAD
 @property  CSVTSecondPassScorer *secondPassScorer
 @property  NSUUID *secondPassCompleteWatchDogToken
 @property  BOOL firstTimeAssetConfigured
 @property  NSMutableArray *assetConfigWaitingBuffer
 @property  CSAudioTimeConverter *audioTimeConverter
 @property  NSMutableDictionary *storedFirstPassInfo
 @property  NSUUID *secondPassRejectionMHUUID
 @property  BOOL hasLoggedSecondPass
 @property  NSString *UUID
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  unsigned long secondChanceHotTillMachTime
 @property  float secondPassCompleteWatchDogTimeoutSec
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSVoiceTriggerSecondPass timeStampString]
  +[CSVoiceTriggerSecondPass secondPassAudioLoggingFilePathWithDeviceId:]
  +[CSVoiceTriggerSecondPass secondPassAudioLogDirectory]
  +[CSVoiceTriggerSecondPass stringForSecondPassResult:]

  // instance methods
  -[CSVoiceTriggerSecondPass setActiveChannel:]
  -[CSVoiceTriggerSecondPass lastScore]
  -[CSVoiceTriggerSecondPass mediaPlayingState]
  -[CSVoiceTriggerSecondPass currentLocale]
  -[CSVoiceTriggerSecondPass firstTimeAssetConfigured]
  -[CSVoiceTriggerSecondPass UUID]
  -[CSVoiceTriggerSecondPass CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSVoiceTriggerSecondPass cancelCurrentRequest]
  -[CSVoiceTriggerSecondPass keywordThreshold]
  -[CSVoiceTriggerSecondPass audioStreamProvider:didStopStreamUnexpectly:]
  -[CSVoiceTriggerSecondPass speechManager]
  -[CSVoiceTriggerSecondPass _reset]
  -[CSVoiceTriggerSecondPass setCurrentAsset:]
  -[CSVoiceTriggerSecondPass .cxx_destruct]
  -[CSVoiceTriggerSecondPass _resetStartAnalyzeTime]
  -[CSVoiceTriggerSecondPass setAudioProviderUUID:]
  -[CSVoiceTriggerSecondPass audioFileWriter]
  -[CSVoiceTriggerSecondPass setMediaPlayingState:]
  -[CSVoiceTriggerSecondPass setDelegate:]
  -[CSVoiceTriggerSecondPass _handleAudioChunk:]
  -[CSVoiceTriggerSecondPass setAsset:]
  -[CSVoiceTriggerSecondPass setKeywordThreshold:]
  -[CSVoiceTriggerSecondPass setQueue:]
  -[CSVoiceTriggerSecondPass setSpeechManager:]
  -[CSVoiceTriggerSecondPass setAssetConfigWaitingBuffer:]
  -[CSVoiceTriggerSecondPass activeChannel]
  -[CSVoiceTriggerSecondPass setLastScore:]
  -[CSVoiceTriggerSecondPass mediaVolume]
  -[CSVoiceTriggerSecondPass setFirstTimeAssetConfigured:]
  -[CSVoiceTriggerSecondPass reset]
  -[CSVoiceTriggerSecondPass setAudioTimeConverter:]
  -[CSVoiceTriggerSecondPass CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]
  -[CSVoiceTriggerSecondPass setSpeakerRecognitionController:]
  -[CSVoiceTriggerSecondPass audioTimeConverter]
  -[CSVoiceTriggerSecondPass setStateSerialQueue:]
  -[CSVoiceTriggerSecondPass _initializeMediaPlayingState]
  -[CSVoiceTriggerSecondPass assetConfigWaitingBuffer]
  -[CSVoiceTriggerSecondPass speakerRecognitionController]
  -[CSVoiceTriggerSecondPass delegate]
  -[CSVoiceTriggerSecondPass currentAsset]
  -[CSVoiceTriggerSecondPass setCurrentLocale:]
  -[CSVoiceTriggerSecondPass queue]
  -[CSVoiceTriggerSecondPass start]
  -[CSVoiceTriggerSecondPass setMediaVolume:]
  -[CSVoiceTriggerSecondPass setAudioBuffer:]
  -[CSVoiceTriggerSecondPass dealloc]
  -[CSVoiceTriggerSecondPass setAudioStream:]
  -[CSVoiceTriggerSecondPass audioProviderUUID]
  -[CSVoiceTriggerSecondPass audioStreamProvider:audioChunkForTVAvailable:]
  -[CSVoiceTriggerSecondPass setAudioFileWriter:]
  -[CSVoiceTriggerSecondPass setSecondChanceHotTillMachTime:]
  -[CSVoiceTriggerSecondPass audioBuffer]
  -[CSVoiceTriggerSecondPass stateSerialQueue]
  -[CSVoiceTriggerSecondPass secondChanceHotTillMachTime]
  -[CSVoiceTriggerSecondPass _setStartAnalyzeTime:]
  -[CSVoiceTriggerSecondPass audioStreamProvider:audioBufferAvailable:]
  -[CSVoiceTriggerSecondPass _setAsset:]
  -[CSVoiceTriggerSecondPass audioStream]
  -[CSVoiceTriggerSecondPass selfTriggerDetector:didDetectSelfTrigger:]
  -[CSVoiceTriggerSecondPass CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]
  -[CSVoiceTriggerSecondPass CSVolumeMonitor:didReceiveMusicVolumeChanged:]
  -[CSVoiceTriggerSecondPass initWithPHSEnabled:speechManager:stateQueue:secondPassQueue:]
  -[CSVoiceTriggerSecondPass setFirstPassSource:]
  -[CSVoiceTriggerSecondPass setSecondPassClient:]
  -[CSVoiceTriggerSecondPass setFirstPassDeviceId:]
  -[CSVoiceTriggerSecondPass handleVoiceTriggerSecondPassFrom:deviceId:audioProviderUUID:firstPassInfo:rejectionMHUUID:completion:]
  -[CSVoiceTriggerSecondPass _clearTriggerCandidate]
  -[CSVoiceTriggerSecondPass _didStopAudioStream]
  -[CSVoiceTriggerSecondPass initWithPHSEnabled:]
  -[CSVoiceTriggerSecondPass keywordAnalyzerNDEAPI:hasResultAvailable:forChannel:]
  -[CSVoiceTriggerSecondPass keywordAnalyzerNDEAPI]
  -[CSVoiceTriggerSecondPass setKeywordAnalyzerNDEAPI:]
  -[CSVoiceTriggerSecondPass hasReceivedNDEAPIResult]
  -[CSVoiceTriggerSecondPass setHasReceivedNDEAPIResult:]
  -[CSVoiceTriggerSecondPass hasTriggerCandidate]
  -[CSVoiceTriggerSecondPass setHasTriggerCandidate:]
  -[CSVoiceTriggerSecondPass numProcessedSamples]
  -[CSVoiceTriggerSecondPass setNumProcessedSamples:]
  -[CSVoiceTriggerSecondPass earlyDetectFiredMachTime]
  -[CSVoiceTriggerSecondPass setEarlyDetectFiredMachTime:]
  -[CSVoiceTriggerSecondPass _fetchSiriLocale]
  -[CSVoiceTriggerSecondPass _prepareStartAudioStream]
  -[CSVoiceTriggerSecondPass _didStartAudioStream:]
  -[CSVoiceTriggerSecondPass _shouldRequestSingleChannelFromAudioProvider]
  -[CSVoiceTriggerSecondPass _requestStartAudioStreamWitContext:audioProviderUUID:startStreamOption:completion:]
  -[CSVoiceTriggerSecondPass setResultCompletion:]
  -[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:deviceId:audioProviderUUID:firstPassInfo:rejectionMHUUID:completion:]
  -[CSVoiceTriggerSecondPass _handleResultCompletion:voiceTriggerInfo:error:]
  -[CSVoiceTriggerSecondPass _getFirstPassTriggerSourceAsString:]
  -[CSVoiceTriggerSecondPass _isBuiltInFirstPassSource:]
  -[CSVoiceTriggerSecondPass _clearSecondPassCompletionWatchDog]
  -[CSVoiceTriggerSecondPass _scheduleSecondPassCompletionWatchDog]
  -[CSVoiceTriggerSecondPass _getDidWakeAP:]
  -[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromAP:audioProviderUUID:completion:]
  -[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromHearst:deviceId:audioProviderUUID:firstPassInfo:completion:]
  -[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromHearstAP:deviceId:audioProviderUUID:firstPassInfo:completion:]
  -[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromRemora:deviceId:audioProviderUUID:firstPassInfo:completion:]
  -[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromJarvis:deviceId:audioProviderUUID:firstPassInfo:completion:]
  -[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromAOP:audioProviderUUID:completion:]
  -[CSVoiceTriggerSecondPass _addDeviceStatusInfoToDict:]
  -[CSVoiceTriggerSecondPass _logRejectionEventToSELF:result:]
  -[CSVoiceTriggerSecondPass _runRecognizersWithChunk:]
  -[CSVoiceTriggerSecondPass _mpAnalyzeForTriggerDetection:forceMaximized:]
  -[CSVoiceTriggerSecondPass _analyzeForKeywordDetection:forChannel:forceMaximized:]
  -[CSVoiceTriggerSecondPass _getVoiceTriggerInfoWithLastResult:withNumAnalyzedSamples:withKeywordScore:]
  -[CSVoiceTriggerSecondPass recognizerThresholdOffset]
  -[CSVoiceTriggerSecondPass recognizerScoreScaleFactor]
  -[CSVoiceTriggerSecondPass _getAudioTimeConverter]
  -[CSVoiceTriggerSecondPass _logUptimeWithVTSwitchChanged:VTEnabled:]
  -[CSVoiceTriggerSecondPass _shouldLogMediaplayState:]
  -[CSVoiceTriggerSecondPass _mpvtGetVoiceTriggerInfoWithLastResult:]
  -[CSVoiceTriggerSecondPass _handleSecondPassSuccess:]
  -[CSVoiceTriggerSecondPass _handlePHSResults:voiceTriggerEventInfo:]
  -[CSVoiceTriggerSecondPass _notifySecondPassReject:result:]
  -[CSVoiceTriggerSecondPass _computeEffectiveThreshold]
  -[CSVoiceTriggerSecondPass _markSecondPassTriggerMachAbsoluteTime:]
  -[CSVoiceTriggerSecondPass _supportTwoShotFeedbackDelay]
  -[CSVoiceTriggerSecondPass _resetUpTime]
  -[CSVoiceTriggerSecondPass _addPHSInfoToVTEI:fromSpeakerInfo:]
  -[CSVoiceTriggerSecondPass _addRejectStatsToDict:]
  -[CSVoiceTriggerSecondPass _logSecondPassResult:withVTEI:]
  -[CSVoiceTriggerSecondPass _scheduleDidStartSecondPassCompletionWatchDogWithToken:]
  -[CSVoiceTriggerSecondPass secondPassTriggerMachAbsTime]
  -[CSVoiceTriggerSecondPass secondPassCompleteWatchDogTimeoutSec]
  -[CSVoiceTriggerSecondPass setSecondPassCompleteWatchDogTimeoutSec:]
  -[CSVoiceTriggerSecondPass syncKeywordAnalyzerNDAPI]
  -[CSVoiceTriggerSecondPass setSyncKeywordAnalyzerNDAPI:]
  -[CSVoiceTriggerSecondPass syncKeywordAnalyzerQuasar]
  -[CSVoiceTriggerSecondPass setSyncKeywordAnalyzerQuasar:]
  -[CSVoiceTriggerSecondPass ssrContext]
  -[CSVoiceTriggerSecondPass setSsrContext:]
  -[CSVoiceTriggerSecondPass resultCompletion]
  -[CSVoiceTriggerSecondPass secondPassTimeout]
  -[CSVoiceTriggerSecondPass setSecondPassTimeout:]
  -[CSVoiceTriggerSecondPass numAnalyzedSamples]
  -[CSVoiceTriggerSecondPass setNumAnalyzedSamples:]
  -[CSVoiceTriggerSecondPass referenceKeywordThreshold]
  -[CSVoiceTriggerSecondPass setReferenceKeywordThreshold:]
  -[CSVoiceTriggerSecondPass keywordThresholdSecondChance]
  -[CSVoiceTriggerSecondPass setKeywordThresholdSecondChance:]
  -[CSVoiceTriggerSecondPass effectiveKeywordThreshold]
  -[CSVoiceTriggerSecondPass setEffectiveKeywordThreshold:]
  -[CSVoiceTriggerSecondPass keywordLoggingThreshold]
  -[CSVoiceTriggerSecondPass setKeywordLoggingThreshold:]
  -[CSVoiceTriggerSecondPass isSecondChanceHot]
  -[CSVoiceTriggerSecondPass setIsSecondChanceHot:]
  -[CSVoiceTriggerSecondPass keywordRejectLoggingThreshold]
  -[CSVoiceTriggerSecondPass setKeywordRejectLoggingThreshold:]
  -[CSVoiceTriggerSecondPass secondPassPrependingSec]
  -[CSVoiceTriggerSecondPass setSecondPassPrependingSec:]
  -[CSVoiceTriggerSecondPass phsRejectLoggingThreshold]
  -[CSVoiceTriggerSecondPass setPhsRejectLoggingThreshold:]
  -[CSVoiceTriggerSecondPass phsThreshold]
  -[CSVoiceTriggerSecondPass setPhsThreshold:]
  -[CSVoiceTriggerSecondPass extraSamplesAtStart]
  -[CSVoiceTriggerSecondPass setExtraSamplesAtStart:]
  -[CSVoiceTriggerSecondPass analyzerPrependingSamples]
  -[CSVoiceTriggerSecondPass setAnalyzerPrependingSamples:]
  -[CSVoiceTriggerSecondPass analyzerTrailingSamples]
  -[CSVoiceTriggerSecondPass setAnalyzerTrailingSamples:]
  -[CSVoiceTriggerSecondPass shouldUsePHS]
  -[CSVoiceTriggerSecondPass setShouldUsePHS:]
  -[CSVoiceTriggerSecondPass nearMissDelayTimeout]
  -[CSVoiceTriggerSecondPass setNearMissDelayTimeout:]
  -[CSVoiceTriggerSecondPass nearMissCandidateDetectedSamples]
  -[CSVoiceTriggerSecondPass setNearMissCandidateDetectedSamples:]
  -[CSVoiceTriggerSecondPass hasPendingNearMiss]
  -[CSVoiceTriggerSecondPass setHasPendingNearMiss:]
  -[CSVoiceTriggerSecondPass recognizerScore]
  -[CSVoiceTriggerSecondPass setRecognizerScore:]
  -[CSVoiceTriggerSecondPass setRecognizerScoreScaleFactor:]
  -[CSVoiceTriggerSecondPass setRecognizerThresholdOffset:]
  -[CSVoiceTriggerSecondPass selectedChannelFromFirstPass]
  -[CSVoiceTriggerSecondPass setSelectedChannelFromFirstPass:]
  -[CSVoiceTriggerSecondPass processedSampleCountsInPending]
  -[CSVoiceTriggerSecondPass setProcessedSampleCountsInPending:]
  -[CSVoiceTriggerSecondPass firstPassTriggerStartSampleCount]
  -[CSVoiceTriggerSecondPass setFirstPassTriggerStartSampleCount:]
  -[CSVoiceTriggerSecondPass firstPassTriggerFireSampleCount]
  -[CSVoiceTriggerSecondPass setFirstPassTriggerFireSampleCount:]
  -[CSVoiceTriggerSecondPass firstPassChannelSelectionScores]
  -[CSVoiceTriggerSecondPass setFirstPassChannelSelectionScores:]
  -[CSVoiceTriggerSecondPass firstPassChannelSelectionDelaySeconds]
  -[CSVoiceTriggerSecondPass setFirstPassChannelSelectionDelaySeconds:]
  -[CSVoiceTriggerSecondPass firstPassMasterChannelScoreBoost]
  -[CSVoiceTriggerSecondPass setFirstPassMasterChannelScoreBoost:]
  -[CSVoiceTriggerSecondPass firstPassOnsetScore]
  -[CSVoiceTriggerSecondPass setFirstPassOnsetScore:]
  -[CSVoiceTriggerSecondPass firstPassOnsetChannel]
  -[CSVoiceTriggerSecondPass setFirstPassOnsetChannel:]
  -[CSVoiceTriggerSecondPass didWakeAP]
  -[CSVoiceTriggerSecondPass setDidWakeAP:]
  -[CSVoiceTriggerSecondPass isStartSampleCountMarked]
  -[CSVoiceTriggerSecondPass setIsStartSampleCountMarked:]
  -[CSVoiceTriggerSecondPass secondPassAnalyzerStartSampleCount]
  -[CSVoiceTriggerSecondPass setSecondPassAnalyzerStartSampleCount:]
  -[CSVoiceTriggerSecondPass setSecondPassTriggerMachAbsTime:]
  -[CSVoiceTriggerSecondPass lastAggTime]
  -[CSVoiceTriggerSecondPass setLastAggTime:]
  -[CSVoiceTriggerSecondPass cumulativeUptime]
  -[CSVoiceTriggerSecondPass setCumulativeUptime:]
  -[CSVoiceTriggerSecondPass cumulativeDowntime]
  -[CSVoiceTriggerSecondPass setCumulativeDowntime:]
  -[CSVoiceTriggerSecondPass firstPassSource]
  -[CSVoiceTriggerSecondPass firstPassDeviceId]
  -[CSVoiceTriggerSecondPass secondPassClient]
  -[CSVoiceTriggerSecondPass twoShotFeedbackDelay]
  -[CSVoiceTriggerSecondPass setTwoShotFeedbackDelay:]
  -[CSVoiceTriggerSecondPass twoShotFeedbackDelayRemora]
  -[CSVoiceTriggerSecondPass setTwoShotFeedbackDelayRemora:]
  -[CSVoiceTriggerSecondPass secondPassHasMadeDecision]
  -[CSVoiceTriggerSecondPass setSecondPassHasMadeDecision:]
  -[CSVoiceTriggerSecondPass shadowMicScoreCreator]
  -[CSVoiceTriggerSecondPass setShadowMicScoreCreator:]
  -[CSVoiceTriggerSecondPass dataBufferNDEAPI]
  -[CSVoiceTriggerSecondPass setDataBufferNDEAPI:]
  -[CSVoiceTriggerSecondPass dataBufferPositionNDEAPI]
  -[CSVoiceTriggerSecondPass setDataBufferPositionNDEAPI:]
  -[CSVoiceTriggerSecondPass hasReceivedEarlyDetectNDEAPIResult]
  -[CSVoiceTriggerSecondPass setHasReceivedEarlyDetectNDEAPIResult:]
  -[CSVoiceTriggerSecondPass shadowMicScoreThresholdForVAD]
  -[CSVoiceTriggerSecondPass setShadowMicScoreThresholdForVAD:]
  -[CSVoiceTriggerSecondPass secondPassScorer]
  -[CSVoiceTriggerSecondPass setSecondPassScorer:]
  -[CSVoiceTriggerSecondPass secondPassCompleteWatchDogToken]
  -[CSVoiceTriggerSecondPass setSecondPassCompleteWatchDogToken:]
  -[CSVoiceTriggerSecondPass storedFirstPassInfo]
  -[CSVoiceTriggerSecondPass setStoredFirstPassInfo:]
  -[CSVoiceTriggerSecondPass secondPassRejectionMHUUID]
  -[CSVoiceTriggerSecondPass setSecondPassRejectionMHUUID:]
  -[CSVoiceTriggerSecondPass hasLoggedSecondPass]
  -[CSVoiceTriggerSecondPass setHasLoggedSecondPass:]


CSEndpointerAssetManager : NSObject <CSAssetManagerDelegate, CSFirstUnlockMonitorDelegate, CESRTrialAssetDelegate>
 @property  CSAsset *currentHEPAsset
 @property  CSAsset *currentOEPAsset
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSDictionary *asrDatapackInstallationStatus
 @property  NSHashTable *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSEndpointerAssetManager sharedManager]

  // instance methods
  -[CSEndpointerAssetManager setCurrentHEPAsset:]
  -[CSEndpointerAssetManager _notifyAssetsUpdate]
  -[CSEndpointerAssetManager .cxx_destruct]
  -[CSEndpointerAssetManager _updateAssetWithCurrentLanguageForAssetType:]
  -[CSEndpointerAssetManager setObservers:]
  -[CSEndpointerAssetManager setCurrentOEPAsset:]
  -[CSEndpointerAssetManager init]
  -[CSEndpointerAssetManager CSAssetManagerDidDownloadNewAsset:]
  -[CSEndpointerAssetManager setQueue:]
  -[CSEndpointerAssetManager _getOEPVersionFromPath:]
  -[CSEndpointerAssetManager checkFirstUnlocked]
  -[CSEndpointerAssetManager _getCurrentHEPAsset]
  -[CSEndpointerAssetManager addObserver:]
  -[CSEndpointerAssetManager CSFirstUnlockMonitor:didReceiveFirstUnlock:]
  -[CSEndpointerAssetManager currentHEPAsset]
  -[CSEndpointerAssetManager _updateAssetWithLanguage:assetType:]
  -[CSEndpointerAssetManager getCurrentOSDAsset]
  -[CSEndpointerAssetManager getCurrentEndpointerAsset]
  -[CSEndpointerAssetManager _getModelPathFromInstallationStatusString:]
  -[CSEndpointerAssetManager asrDatapackInstallationStatus]
  -[CSEndpointerAssetManager _isOSDIncludedInAsset:]
  -[CSEndpointerAssetManager queue]
  -[CSEndpointerAssetManager observers]
  -[CSEndpointerAssetManager _updateOEPAssetsWithLanguage:]
  -[CSEndpointerAssetManager currentOEPAsset]
  -[CSEndpointerAssetManager assetStatus:]
  -[CSEndpointerAssetManager removeObserver:]
  -[CSEndpointerAssetManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
  -[CSEndpointerAssetManager setAsrDatapackInstallationStatus:]


RMSSample : NSObject
 @property  double RMSScore
 @property  unsigned long lastSampleCount

  // instance methods
  -[RMSSample RMSScore]
  -[RMSSample initWithRMSScore:lastSampleCount:]
  -[RMSSample compareScoresDesc:]
  -[RMSSample setRMSScore:]
  -[RMSSample lastSampleCount]
  -[RMSSample setLastSampleCount:]


CSShadowMicScoreCreator : NSObject
 @property  NSMutableArray *rmsSamplesForEntireAudio
 @property  NSMutableData *audioBuffer
 @property  double speechVoiceLevel
 @property  unsigned long numberOfVoicingFrames
 @property  long long numberOfTotalFramesETFT
 @property  unsigned long bestStartDetectSample
 @property  unsigned long bestEarlyDetectSample
 @property  unsigned long bestEndDetectSample
 @property  double shadowMicScore

  // instance methods
  -[CSShadowMicScoreCreator .cxx_destruct]
  -[CSShadowMicScoreCreator init]
  -[CSShadowMicScoreCreator setAudioBuffer:]
  -[CSShadowMicScoreCreator audioBuffer]
  -[CSShadowMicScoreCreator addDataToBuffer:]
  -[CSShadowMicScoreCreator setBestEarlyDetectSample:]
  -[CSShadowMicScoreCreator setBestStartDetectSample:]
  -[CSShadowMicScoreCreator setBestEndDetectSample:]
  -[CSShadowMicScoreCreator calculateShadowMicScore]
  -[CSShadowMicScoreCreator shadowMicScore]
  -[CSShadowMicScoreCreator _calculateRMSWithFrameData:]
  -[CSShadowMicScoreCreator _calculateSpeechVoicingLevel]
  -[CSShadowMicScoreCreator _calculateNumberOfVoicingFrames]
  -[CSShadowMicScoreCreator numberOfVoicingFrames]
  -[CSShadowMicScoreCreator bestStartDetectSample]
  -[CSShadowMicScoreCreator bestEarlyDetectSample]
  -[CSShadowMicScoreCreator bestEndDetectSample]
  -[CSShadowMicScoreCreator setShadowMicScore:]
  -[CSShadowMicScoreCreator rmsSamplesForEntireAudio]
  -[CSShadowMicScoreCreator setRmsSamplesForEntireAudio:]
  -[CSShadowMicScoreCreator speechVoiceLevel]
  -[CSShadowMicScoreCreator setSpeechVoiceLevel:]
  -[CSShadowMicScoreCreator setNumberOfVoicingFrames:]
  -[CSShadowMicScoreCreator numberOfTotalFramesETFT]
  -[CSShadowMicScoreCreator setNumberOfTotalFramesETFT:]


CSEndpointDelayReporter : NSObject
 @property  double endpointTimeInMs
 @property  double userSpeakingStartedTimeInMs
 @property  double userSpeakingEndedTimeInMs
 @property  unsigned long endpointBufferHostTime
 @property  unsigned long userSpeakingStartedHostTime
 @property  unsigned long userSpeakingEndedHostTime
 @property  unsigned long stopRecordingHostTime
 @property  NSString *requestMHUUID
 @property  NSUUID *turnIdentifier
 @property  BOOL didReportEndpointDelay

  // instance methods
  -[CSEndpointDelayReporter turnIdentifier]
  -[CSEndpointDelayReporter .cxx_destruct]
  -[CSEndpointDelayReporter stopRecordingHostTime]
  -[CSEndpointDelayReporter setTurnIdentifier:]
  -[CSEndpointDelayReporter setStopRecordingHostTime:]
  -[CSEndpointDelayReporter reset]
  -[CSEndpointDelayReporter setRequestMHUUID:]
  -[CSEndpointDelayReporter requestMHUUID]
  -[CSEndpointDelayReporter endpointBufferHostTime]
  -[CSEndpointDelayReporter setEndpointBufferHostTime:]
  -[CSEndpointDelayReporter estimatedUserSpeakingStartedHostTime]
  -[CSEndpointDelayReporter estimatedUserSpeakingEndedHostTime]
  -[CSEndpointDelayReporter _reportUEIUserSpeakingContext]
  -[CSEndpointDelayReporter initWithRequestMHUUID:turnIdentifier:]
  -[CSEndpointDelayReporter setSpeechRecognizedContext:withEndpointerMetrics:]
  -[CSEndpointDelayReporter reportEndpointDelayIfNeed]
  -[CSEndpointDelayReporter endpointTimeInMs]
  -[CSEndpointDelayReporter setEndpointTimeInMs:]
  -[CSEndpointDelayReporter userSpeakingStartedTimeInMs]
  -[CSEndpointDelayReporter setUserSpeakingStartedTimeInMs:]
  -[CSEndpointDelayReporter userSpeakingEndedTimeInMs]
  -[CSEndpointDelayReporter setUserSpeakingEndedTimeInMs:]
  -[CSEndpointDelayReporter userSpeakingStartedHostTime]
  -[CSEndpointDelayReporter setUserSpeakingStartedHostTime:]
  -[CSEndpointDelayReporter userSpeakingEndedHostTime]
  -[CSEndpointDelayReporter setUserSpeakingEndedHostTime:]
  -[CSEndpointDelayReporter didReportEndpointDelay]
  -[CSEndpointDelayReporter setDidReportEndpointDelay:]


CSActivationEventNotifier : NSObject
 @property  NSObject<OS_dispatch_queue> *queue

  // class methods
  +[CSActivationEventNotifier sharedNotifier]

  // instance methods
  -[CSActivationEventNotifier .cxx_destruct]
  -[CSActivationEventNotifier _notifyActivationEvent:completion:]
  -[CSActivationEventNotifier init]
  -[CSActivationEventNotifier setQueue:]
  -[CSActivationEventNotifier notifyActivationEvent:completion:]
  -[CSActivationEventNotifier notifyActivationEvent:deviceId:activationInfo:completion:]
  -[CSActivationEventNotifier queue]
  -[CSActivationEventNotifier notifyActivationEventSynchronously:completion:]
  -[CSActivationEventNotifier _createXPCClientConnection]


CSLanguageCodeUpdateMonitorImpl : CSLanguageCodeUpdateMonitor
  // instance methods
  -[CSLanguageCodeUpdateMonitorImpl _stopMonitoring]
  -[CSLanguageCodeUpdateMonitorImpl notifySiriLanguageCodeChanged:]
  -[CSLanguageCodeUpdateMonitorImpl _notifyObserver:withLanguageCode:]
  -[CSLanguageCodeUpdateMonitorImpl _startMonitoringWithQueue:]
  -[CSLanguageCodeUpdateMonitorImpl init]
  -[CSLanguageCodeUpdateMonitorImpl _didReceiveLanguageCodeUpdate]


CSVoiceTriggerEventsCoordinator : NSObject <CSAudioRouteChangeMonitorDelegate, CSBluetoothWirelessSplitterMonitorDelegate, CSVoiceTriggerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSVoiceTriggerEventsCoordinator sharedInstance]

  // instance methods
  -[CSVoiceTriggerEventsCoordinator unregisterObserver:]
  -[CSVoiceTriggerEventsCoordinator _isVoiceTriggerFromHearst:]
  -[CSVoiceTriggerEventsCoordinator registerObserver:]
  -[CSVoiceTriggerEventsCoordinator _notifySuperVector:]
  -[CSVoiceTriggerEventsCoordinator voiceTriggerDidDetectKeyword:deviceId:]
  -[CSVoiceTriggerEventsCoordinator CSBluetoothWirelessSplitterMonitor:didReceiveSplitterStateChange:shouldDisableSpeakerVerificationInSplitterMode:]
  -[CSVoiceTriggerEventsCoordinator setTargetQueue:]
  -[CSVoiceTriggerEventsCoordinator voiceTriggerDidDetectKeyword:myriadHash:remoteTriggerType:remoteDeviceId:isTriggeredFromFullWake:completion:]
  -[CSVoiceTriggerEventsCoordinator .cxx_destruct]
  -[CSVoiceTriggerEventsCoordinator _notifySpeakerReject:]
  -[CSVoiceTriggerEventsCoordinator _shouldIgnoreVoiceTriggerEvent:]
  -[CSVoiceTriggerEventsCoordinator raiseToSpeakDetected:]
  -[CSVoiceTriggerEventsCoordinator _notifyNearMissEvent:deviceId:]
  -[CSVoiceTriggerEventsCoordinator init]
  -[CSVoiceTriggerEventsCoordinator voiceTriggerDidRejected:deviceId:]
  -[CSVoiceTriggerEventsCoordinator voiceTriggerDidDetectSpeakerReject:]
  -[CSVoiceTriggerEventsCoordinator _notifyKeywordReject:deviceId:]
  -[CSVoiceTriggerEventsCoordinator voiceTriggerGotSuperVector:]
  -[CSVoiceTriggerEventsCoordinator CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:]
  -[CSVoiceTriggerEventsCoordinator voiceTriggerDidDetectNearMiss:deviceId:]
  -[CSVoiceTriggerEventsCoordinator start]
  -[CSVoiceTriggerEventsCoordinator _notifyKeywordDetect]
  -[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:isTriggeredFromFullWake:completion:]
  -[CSVoiceTriggerEventsCoordinator keywordDetectorDidDetectKeyword]
  -[CSVoiceTriggerEventsCoordinator _notifyRaiseToSpeakTriggerEvent:]
  -[CSVoiceTriggerEventsCoordinator _notifyWakeKeywordSpokenEvent:deviceId:]
  -[CSVoiceTriggerEventsCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]
  -[CSVoiceTriggerEventsCoordinator _notifyTriggerEvent:deviceId:completion:]
  -[CSVoiceTriggerEventsCoordinator _createVoiceTriggerEventInfoString:]


CSSoftwareUpdateCheckingMonitor : CSEventMonitor
  // class methods
  +[CSSoftwareUpdateCheckingMonitor sharedInstance]

  // instance methods
  -[CSSoftwareUpdateCheckingMonitor _stopMonitoring]
  -[CSSoftwareUpdateCheckingMonitor _startMonitoringWithQueue:]
  -[CSSoftwareUpdateCheckingMonitor init]
  -[CSSoftwareUpdateCheckingMonitor isSoftwareUpdateCheckingRunning]
  -[CSSoftwareUpdateCheckingMonitor _checkSoftwareUpdateCheckingState]
  -[CSSoftwareUpdateCheckingMonitor _didReceiveSoftwareUpdateCheckingStateChanged:]
  -[CSSoftwareUpdateCheckingMonitor _softwareUpdateCheckingState]
  -[CSSoftwareUpdateCheckingMonitor _notifyObserver:withSoftwareUpdateCheckingRunning:]
  -[CSSoftwareUpdateCheckingMonitor _didReceiveSoftwareUpdateCheckingStateChangedInQueue:]


CSPreferences : NSObject
  // class methods
  +[CSPreferences sharedPreferences]

  // instance methods
  -[CSPreferences adaptiveSiriVolumePermanentOffset]
  -[CSPreferences getAttendingTimeoutConfig]
  -[CSPreferences enableAudioInjection:]
  -[CSPreferences voiceTriggerAudioLogDirectory]
  -[CSPreferences setFileLoggingIsEnabled:]
  -[CSPreferences adaptiveSiriVolumeRecentIntent]
  -[CSPreferences getStartOfSpeechAudioLogFilePath]
  -[CSPreferences twoShotNotificationEnabled]
  -[CSPreferences fileLoggingIsEnabled]
  -[CSPreferences trialBaseAssetDirectory]
  -[CSPreferences smartSiriVolumeContextAwareEnabled]
  -[CSPreferences isAdaptiveSiriVolumeTemporaryIntentValid]
  -[CSPreferences disableAdaptiveSiriVolume:]
  -[CSPreferences useSiriActivationSPIForHomePod]
  -[CSPreferences isAttentiveSiriAudioLoggingEnabled]
  -[CSPreferences setAudioInjectionFilePath:]
  -[CSPreferences isAdaptiveSiriVolumePermanentOffsetEnabled]
  -[CSPreferences voiceTriggerEnabled]
  -[CSPreferences isPHSSupported]
  -[CSPreferences isAttentiveSiriEnabled]


CSAssetManagerEnablePolicy : CSPolicy
  // instance methods
  -[CSAssetManagerEnablePolicy init]
  -[CSAssetManagerEnablePolicy _addAssetManagerEnabledConditions]
  -[CSAssetManagerEnablePolicy _subscribeEventMonitors]
  -[CSAssetManagerEnablePolicy _shouldCheckNetworkAvailability]


CSAttSiriAudioSessionStateClient : NSObject <AFNotifyObserverDelegate>
 @property  AFNotifyObserver *siriStateObserver
 @property  NSObject<OS_dispatch_queue> *stateNotificationQueue
 @property  BOOL isSpeaking
 @property  BOOL isListening
 @property  BOOL isActiveRequest
 @property  BOOL isActiveSession
 @property  <CSAttSiriSessionStateDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAttSiriAudioSessionStateClient notifyObserver:didChangeStateFrom:to:]
  -[CSAttSiriAudioSessionStateClient .cxx_destruct]
  -[CSAttSiriAudioSessionStateClient setIsSpeaking:]
  -[CSAttSiriAudioSessionStateClient setIsListening:]
  -[CSAttSiriAudioSessionStateClient initWithDelegate:]
  -[CSAttSiriAudioSessionStateClient delegate]
  -[CSAttSiriAudioSessionStateClient notifyObserver:didReceiveNotificationWithToken:]
  -[CSAttSiriAudioSessionStateClient isListening]
  -[CSAttSiriAudioSessionStateClient isSpeaking]
  -[CSAttSiriAudioSessionStateClient dispatchStateChangedFrom:to:]
  -[CSAttSiriAudioSessionStateClient siriStateObserver]
  -[CSAttSiriAudioSessionStateClient setSiriStateObserver:]
  -[CSAttSiriAudioSessionStateClient stateNotificationQueue]
  -[CSAttSiriAudioSessionStateClient setStateNotificationQueue:]
  -[CSAttSiriAudioSessionStateClient isActiveRequest]
  -[CSAttSiriAudioSessionStateClient setIsActiveRequest:]
  -[CSAttSiriAudioSessionStateClient isActiveSession]
  -[CSAttSiriAudioSessionStateClient setIsActiveSession:]


CSVoiceTriggerAOPModeEnabledPolicyFactory : NSObject
  // class methods
  +[CSVoiceTriggerAOPModeEnabledPolicyFactory voiceTriggerAOPModeEnabledPolicy]


CSBatteryMonitor : CSEventMonitor
  // class methods
  +[CSBatteryMonitor sharedInstance]

  // instance methods
  -[CSBatteryMonitor _stopMonitoring]
  -[CSBatteryMonitor _startMonitoringWithQueue:]
  -[CSBatteryMonitor init]
  -[CSBatteryMonitor batteryState]
  -[CSBatteryMonitor _checkBatteryState]
  -[CSBatteryMonitor _didReceiveBatteryStatusChanged:]
  -[CSBatteryMonitor _notifyObserver:withBatteryState:]
  -[CSBatteryMonitor _didReceiveBatteryStatusChangedInQueue:]


CSVoiceTriggerAssetMetaUpdateMonitor : CSEventMonitor
  // class methods
  +[CSVoiceTriggerAssetMetaUpdateMonitor sharedInstance]

  // instance methods
  -[CSVoiceTriggerAssetMetaUpdateMonitor _stopMonitoring]
  -[CSVoiceTriggerAssetMetaUpdateMonitor _asssetMetaUpdatedKey]
  -[CSVoiceTriggerAssetMetaUpdateMonitor _startMonitoringWithQueue:]
  -[CSVoiceTriggerAssetMetaUpdateMonitor init]
  -[CSVoiceTriggerAssetMetaUpdateMonitor notifyNewVoiceTriggerAssetMetaDataUpdated]
  -[CSVoiceTriggerAssetMetaUpdateMonitor _notifyObserver:]
  -[CSVoiceTriggerAssetMetaUpdateMonitor _didReceiveNewVoiceTriggerAssetMetaData]


CSAudioRecordDeviceIndicator : NSObject
 @property  CSAudioRecordContext *recordContext
 @property  NSString *deviceId
 @property  BOOL shouldUseRemoteRecorder
 @property  unsigned long streamHandleId

  // instance methods
  -[CSAudioRecordDeviceIndicator deviceId]
  -[CSAudioRecordDeviceIndicator .cxx_destruct]
  -[CSAudioRecordDeviceIndicator recordContext]
  -[CSAudioRecordDeviceIndicator streamHandleId]
  -[CSAudioRecordDeviceIndicator initWithRecordContext:deviceId:shouldUseRemoteRecorder:streamHandleId:]
  -[CSAudioRecordDeviceIndicator updateWithLatestRecordContext:]
  -[CSAudioRecordDeviceIndicator updateDeviceId:]
  -[CSAudioRecordDeviceIndicator shouldUseRemoteRecorder]


CSDarkWakePowerAssertionMac : NSObject
  // instance methods
  -[CSDarkWakePowerAssertionMac init]
  -[CSDarkWakePowerAssertionMac invalidate]
  -[CSDarkWakePowerAssertionMac initWithDescription:timeout:]


CSSiriQueueMonitor : NSObject
  // class methods
  +[CSSiriQueueMonitor sharedMonitor]

  // instance methods
  -[CSSiriQueueMonitor endMonitoring]
  -[CSSiriQueueMonitor .cxx_destruct]
  -[CSSiriQueueMonitor init]
  -[CSSiriQueueMonitor _beginMonitoring]
  -[CSSiriQueueMonitor beginMonitoring]
  -[CSSiriQueueMonitor _addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:]
  -[CSSiriQueueMonitor _removeQueue:]
  -[CSSiriQueueMonitor _endMonitoring]
  -[CSSiriQueueMonitor addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:]
  -[CSSiriQueueMonitor removeQueue:]


_CSSiriQueueObserver : NSObject
  // instance methods
  -[_CSSiriQueueObserver .cxx_destruct]
  -[_CSSiriQueueObserver stop]
  -[_CSSiriQueueObserver initWithQueue:heartBeatInterval:timeoutInterval:timeoutHandler:]
  -[_CSSiriQueueObserver startWithQueue:]
  -[_CSSiriQueueObserver heartBeatFiredWithQueue:]
  -[_CSSiriQueueObserver timeoutDetected]


CSAlwaysEnabledPolicy : CSPolicy
  // instance methods
  -[CSAlwaysEnabledPolicy init]
  -[CSAlwaysEnabledPolicy _addAlwaysEnabledCondition]


CSRemoteVADCircularBuffer : NSObject
 @property  unsigned long capacity
 @property  unsigned long size
 @property  unsigned long beginSampleCount

  // instance methods
  -[CSRemoteVADCircularBuffer capacity]
  -[CSRemoteVADCircularBuffer .cxx_construct]
  -[CSRemoteVADCircularBuffer .cxx_destruct]
  -[CSRemoteVADCircularBuffer reset]
  -[CSRemoteVADCircularBuffer size]
  -[CSRemoteVADCircularBuffer addSamples:numSamples:]
  -[CSRemoteVADCircularBuffer copySamplesFrom:to:]
  -[CSRemoteVADCircularBuffer initWithRecordingDuration:audioSamplesPerRemoteVAD:audioSampleRate:]
  -[CSRemoteVADCircularBuffer remoteVADSampleCount]
  -[CSRemoteVADCircularBuffer copySamplesFromAudioSampleCount:toAudioSampleCount:]
  -[CSRemoteVADCircularBuffer beginSampleCount]


CSAdBlockerAssetMetaUpdateMonitor : CSEventMonitor
  // class methods
  +[CSAdBlockerAssetMetaUpdateMonitor sharedInstance]

  // instance methods
  -[CSAdBlockerAssetMetaUpdateMonitor _stopMonitoring]
  -[CSAdBlockerAssetMetaUpdateMonitor _didReceiveNewAdBlockerAssetMetaData]
  -[CSAdBlockerAssetMetaUpdateMonitor _asssetMetaUpdatedKey]
  -[CSAdBlockerAssetMetaUpdateMonitor _startMonitoringWithQueue:]
  -[CSAdBlockerAssetMetaUpdateMonitor init]
  -[CSAdBlockerAssetMetaUpdateMonitor _notifyObserver:]


CSAudioStream : NSObject <CSAudioStreamProvidingDelegate>
 @property  BOOL streaming
 @property  NSUUID *streamingUUID
 @property  <CSAudioStreamProviding> *streamProvider
 @property  <CSAudioStreamProvidingDelegate> *delegate
 @property  unsigned long startSampleCount
 @property  unsigned long lastForwardedSampleCount
 @property  BOOL scheduledFutureSample
 @property  NSString *name
 @property  CSAudioStreamRequest *streamRequest
 @property  NSString *UUID
 @property  CSAudioStartStreamOption *startStreamOption
 @property  BOOL isWeakStream
 @property  NSHashTable *tandemStreams
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioStream isStreaming]
  -[CSAudioStream UUID]
  -[CSAudioStream name]
  -[CSAudioStream streamProvider]
  -[CSAudioStream audioStreamProvider:didStopStreamUnexpectly:]
  -[CSAudioStream streaming]
  -[CSAudioStream .cxx_destruct]
  -[CSAudioStream audioStreamProvider:didHardwareConfigurationChange:]
  -[CSAudioStream setName:]
  -[CSAudioStream setDelegate:]
  -[CSAudioStream isNarrowBand]
  -[CSAudioStream delegate]
  -[CSAudioStream setStreamProvider:]
  -[CSAudioStream recordSettings]
  -[CSAudioStream dealloc]
  -[CSAudioStream audioStreamProvider:audioChunkForTVAvailable:]
  -[CSAudioStream audioStreamProvider:audioBufferAvailable:]
  -[CSAudioStream setStreaming:]
  -[CSAudioStream lastForwardedSampleCount]
  -[CSAudioStream startAudioStreamWithOption:completion:]
  -[CSAudioStream stopAudioStreamWithOption:completion:]
  -[CSAudioStream startSampleCount]
  -[CSAudioStream prepareAudioStreamSyncWithRequest:error:]
  -[CSAudioStream initWithAudioStreamProvider:streamName:streamRequest:]
  -[CSAudioStream streamRequest]
  -[CSAudioStream prepareAudioStreamWithRequest:completion:]
  -[CSAudioStream setStreamRequest:]
  -[CSAudioStream setStreamingUUID:]
  -[CSAudioStream streamingUUID]
  -[CSAudioStream tandemStreams]
  -[CSAudioStream updateAudioStreamStartTimeInSampleCount:]
  -[CSAudioStream setStartStreamOption:]
  -[CSAudioStream setScheduledFutureSample:]
  -[CSAudioStream audioStreamProvider:audioBufferAvailable:lastForwardedSampleCount:]
  -[CSAudioStream scheduledFutureSample]
  -[CSAudioStream startStreamOption]
  -[CSAudioStream isWeakStream]
  -[CSAudioStream setIsWeakStream:]


CSSiriAudioSession : NSObject
  // class methods
  +[CSSiriAudioSession sharedSession]
  +[CSSiriAudioSession currentInputDeviceUIDArray]

  // instance methods
  -[CSSiriAudioSession .cxx_destruct]
  -[CSSiriAudioSession init]
  -[CSSiriAudioSession currentInputRoute]
  -[CSSiriAudioSession currentOutputRoute]


CSSiriAudioRoute : NSObject
 @property  NSString *deviceName
 @property  NSString *uid
 @property  BOOL isBluetooth
 @property  NSString *source
 @property  NSString *destination

  // instance methods
  -[CSSiriAudioRoute isBluetooth]
  -[CSSiriAudioRoute uid]
  -[CSSiriAudioRoute deviceName]
  -[CSSiriAudioRoute .cxx_destruct]
  -[CSSiriAudioRoute destination]
  -[CSSiriAudioRoute source]
  -[CSSiriAudioRoute initWithAudioDeviceID:]


CSServerEndpointFeatures : NSObject
 @property  long long wordCount
 @property  long long trailingSilenceDuration
 @property  double eosLikelihood
 @property  NSArray *pauseCounts
 @property  double silencePosterior
 @property  long long processedAudioDurationInMilliseconds
 @property  NSString *taskName

  // instance methods
  -[CSServerEndpointFeatures processedAudioDurationInMilliseconds]
  -[CSServerEndpointFeatures setProcessedAudioDurationInMilliseconds:]
  -[CSServerEndpointFeatures setSilencePosterior:]
  -[CSServerEndpointFeatures setEosLikelihood:]
  -[CSServerEndpointFeatures setTaskName:]
  -[CSServerEndpointFeatures .cxx_destruct]
  -[CSServerEndpointFeatures initWithWordCount:trailingSilenceFrames:endOfSilenceLikelihood:pauseCounts:silencePosterior:taskName:]
  -[CSServerEndpointFeatures dictionary]
  -[CSServerEndpointFeatures setWordCount:]
  -[CSServerEndpointFeatures setTrailingSilenceDuration:]
  -[CSServerEndpointFeatures taskName]
  -[CSServerEndpointFeatures silencePosterior]
  -[CSServerEndpointFeatures setPauseCounts:]
  -[CSServerEndpointFeatures trailingSilenceDuration]
  -[CSServerEndpointFeatures initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDurationInMilliseconds:]
  -[CSServerEndpointFeatures pauseCounts]
  -[CSServerEndpointFeatures eosLikelihood]
  -[CSServerEndpointFeatures wordCount]


CSActivationEventNotificationHandler : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMapTable *delegates
 @property  CSActivationEvent *pendingActivationEvent
 @property  @? pendingCompletion

  // class methods
  +[CSActivationEventNotificationHandler sharedInstance]

  // instance methods
  -[CSActivationEventNotificationHandler _stopMonitoring]
  -[CSActivationEventNotificationHandler setDelegates:]
  -[CSActivationEventNotificationHandler setDelegate:forType:]
  -[CSActivationEventNotificationHandler .cxx_destruct]
  -[CSActivationEventNotificationHandler delegates]
  -[CSActivationEventNotificationHandler stop]
  -[CSActivationEventNotificationHandler pendingActivationEvent]
  -[CSActivationEventNotificationHandler _notifyActivationEvent:completion:]
  -[CSActivationEventNotificationHandler init]
  -[CSActivationEventNotificationHandler setPendingActivationEvent:]
  -[CSActivationEventNotificationHandler setQueue:]
  -[CSActivationEventNotificationHandler setPendingCompletion:]
  -[CSActivationEventNotificationHandler _isVoiceTriggerEvent:]
  -[CSActivationEventNotificationHandler notifyActivationEvent:completion:]
  -[CSActivationEventNotificationHandler pendingCompletion]
  -[CSActivationEventNotificationHandler queue]
  -[CSActivationEventNotificationHandler start]
  -[CSActivationEventNotificationHandler dealloc]
  -[CSActivationEventNotificationHandler _startMonitoring]
  -[CSActivationEventNotificationHandler _hasPendingActivationForType:]


CoreSpeechXPC : NSObject <CoreSpeechXPCProtocol>
 @property  CoreSpeechXPCFakeModelMonitor *fakeAssetMonitor

  // class methods
  +[CoreSpeechXPC accessoryModelTypeToString:]
  +[CoreSpeechXPC logLanguageMismatchMetricWithJarvisSelectedLocale:jarvisTriggerMode:]

  // instance methods
  -[CoreSpeechXPC .cxx_destruct]
  -[CoreSpeechXPC installedVoiceTriggerAssetForLanguageCode:completion:]
  -[CoreSpeechXPC fetchRemoteVoiceTriggerAssetForLanguageCode:completion:]
  -[CoreSpeechXPC voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:locale:endpointId:downloadedModels:preinstalledModels:completion:]
  -[CoreSpeechXPC voiceTriggerRTModelForVersion:minorVersion:locale:downloadedModels:preinstalledModels:completion:]
  -[CoreSpeechXPC voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]
  -[CoreSpeechXPC _handleFakeHearstModelRequest:majorVersion:minorVersion:downloadedModels:preinstalledModels:completion:]
  -[CoreSpeechXPC getAccessoryFallbackLocalTable]
  -[CoreSpeechXPC selectFallbackModelForLocale:downloadedModels:preinstalledModels:rtLocaleMap:]
  -[CoreSpeechXPC _fetchVoiceTriggerInstalledAssetWithLanguage:completion:]
  -[CoreSpeechXPC voiceTriggerHearstRTModelForVersion:minorVersion:locale:downloadedModels:preinstalledModels:completion:]
  -[CoreSpeechXPC getAccessoryFallbackFamilyLocal:fromLocaleMap:]
  -[CoreSpeechXPC initWithFakeMonitor:]
  -[CoreSpeechXPC voiceTriggerRemoraRTModelForVersion:minorVersion:locale:endpointId:downloadedModels:preinstalledModels:completion:]
  -[CoreSpeechXPC fakeAssetMonitor]
  -[CoreSpeechXPC setFakeAssetMonitor:]


CSSiriRestrictionOnLockScreenMonitor : CSEventMonitor <MCProfileConnectionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSSiriRestrictionOnLockScreenMonitor sharedInstance]

  // instance methods
  -[CSSiriRestrictionOnLockScreenMonitor _stopMonitoring]
  -[CSSiriRestrictionOnLockScreenMonitor isRestricted]
  -[CSSiriRestrictionOnLockScreenMonitor _didReceiveRestrictionChangedInQueue:]
  -[CSSiriRestrictionOnLockScreenMonitor _startMonitoringWithQueue:]
  -[CSSiriRestrictionOnLockScreenMonitor init]
  -[CSSiriRestrictionOnLockScreenMonitor profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[CSSiriRestrictionOnLockScreenMonitor _didReceiveRestrictionChanged:]
  -[CSSiriRestrictionOnLockScreenMonitor _checkSiriRestrictedOnLockScreen]
  -[CSSiriRestrictionOnLockScreenMonitor _notifyObserver:withRestricted:]


CSRawAudioInjectionProvider : CSAudioRecorder
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers
 @property  NSObject<OS_dispatch_source> *audioFeedTimer
 @property  ^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq} fp

  // class methods
  +[CSRawAudioInjectionProvider createSharedAudioSession]

  // instance methods
  -[CSRawAudioInjectionProvider fp]
  -[CSRawAudioInjectionProvider averagePowerForChannel:]
  -[CSRawAudioInjectionProvider unregisterObserver:]
  -[CSRawAudioInjectionProvider duckOthersOption]
  -[CSRawAudioInjectionProvider registerObserver:]
  -[CSRawAudioInjectionProvider setDuckOthersOption:]
  -[CSRawAudioInjectionProvider .cxx_destruct]
  -[CSRawAudioInjectionProvider setFp:]
  -[CSRawAudioInjectionProvider setObservers:]
  -[CSRawAudioInjectionProvider init]
  -[CSRawAudioInjectionProvider setQueue:]
  -[CSRawAudioInjectionProvider playbackRoute]
  -[CSRawAudioInjectionProvider enableMiniDucking:]
  -[CSRawAudioInjectionProvider peakPowerForChannel:]
  -[CSRawAudioInjectionProvider metrics]
  -[CSRawAudioInjectionProvider queue]
  -[CSRawAudioInjectionProvider observers]
  -[CSRawAudioInjectionProvider setAlertSoundFromURL:forType:]
  -[CSRawAudioInjectionProvider updateMeters]
  -[CSRawAudioInjectionProvider dealloc]
  -[CSRawAudioInjectionProvider alertStartTime]
  -[CSRawAudioInjectionProvider setMeteringEnabled:]
  -[CSRawAudioInjectionProvider _readAudioBufferAndFeed]
  -[CSRawAudioInjectionProvider recordDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
  -[CSRawAudioInjectionProvider setAudioServerCrashEventDelegate:]
  -[CSRawAudioInjectionProvider setAudioSessionEventDelegate:]
  -[CSRawAudioInjectionProvider setContext:completion:]
  -[CSRawAudioInjectionProvider setCurrentContext:streamHandleId:error:]
  -[CSRawAudioInjectionProvider prepareAudioStreamRecord:recordDeviceIndicator:error:]
  -[CSRawAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]
  -[CSRawAudioInjectionProvider stopAudioStreamWithRecordDeviceIndicator:error:]
  -[CSRawAudioInjectionProvider isRecordingWithRecordDeviceIndicator:]
  -[CSRawAudioInjectionProvider recordRouteWithRecordDeviceIndicator:]
  -[CSRawAudioInjectionProvider audioDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
  -[CSRawAudioInjectionProvider recordSettingsWithStreamHandleId:]
  -[CSRawAudioInjectionProvider recordingSampleRateWithStreamHandleId:]
  -[CSRawAudioInjectionProvider isNarrowBandWithStreamHandleId:]
  -[CSRawAudioInjectionProvider prewarmAudioSessionWithStreamHandleId:error:]
  -[CSRawAudioInjectionProvider activateAudioSessionWithReason:streamHandleId:error:]
  -[CSRawAudioInjectionProvider deactivateAudioSession:streamHandleId:error:]
  -[CSRawAudioInjectionProvider setRecordMode:streamHandleId:error:]
  -[CSRawAudioInjectionProvider playRecordStartingAlertAndResetEndpointerFromStream:]
  -[CSRawAudioInjectionProvider playAlertSoundForType:recordDevideIndicator:]
  -[CSRawAudioInjectionProvider isSessionCurrentlyActivated]
  -[CSRawAudioInjectionProvider voiceTriggerInfoWithRecordDeviceIndicator:]
  -[CSRawAudioInjectionProvider configureAlertBehavior:audioStreamHandleId:]
  -[CSRawAudioInjectionProvider audioFeedTimer]
  -[CSRawAudioInjectionProvider setAudioFeedTimer:]
  -[CSRawAudioInjectionProvider enableSmartRoutingConsiderationForStream:enable:]


CSSpringboardStartMonitor : CSEventMonitor
  // class methods
  +[CSSpringboardStartMonitor sharedInstance]

  // instance methods
  -[CSSpringboardStartMonitor _stopMonitoring]
  -[CSSpringboardStartMonitor _didReceiveSpringboardStarted:]
  -[CSSpringboardStartMonitor _checkSpringBoardStarted]
  -[CSSpringboardStartMonitor _notifyObserver:withStarted:]
  -[CSSpringboardStartMonitor _startMonitoringWithQueue:]
  -[CSSpringboardStartMonitor isSpringboardStarted]
  -[CSSpringboardStartMonitor init]
  -[CSSpringboardStartMonitor _didReceiveSpringboardStartedInQueue:]


CSAudioProvider : NSObject <CSAudioRecorderDelegate, CSAudioServerCrashMonitorDelegate, CSAudioPreprocessorDelegate, CSAudioStreamProviding, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioAlertProviding, CSAudioMeterProviding, CSTriggerInfoProviding>
 @property  NSObject<OS_dispatch_queue> *recordQueue
 @property  NSObject<OS_dispatch_queue> *loggingQueue
 @property  NSObject<OS_dispatch_queue> *streamHandleQueue
 @property  CSAudioRecorder *audioRecorder
 @property  unsigned long streamState
 @property  NSHashTable *startPendingStreams
 @property  NSHashTable *startPendingOnStoppingStreams
 @property  NSHashTable *alertPlaybackFinishWaitingStreams
 @property  NSHashTable *streams
 @property  NSHashTable *stopPendingStreams
 @property  NSMutableArray *pendingStartCompletions
 @property  NSMutableArray *alertPlaybackFinishWaitingCompletions
 @property  NSMutableArray *pendingStopCompletions
 @property  NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict
 @property  <CSAudioProviderDelegate> *providerDelegate
 @property  <CSAudioSessionProvidingDelegate> *sessionDelegate
 @property  NSMutableArray *streamHolders
 @property  NSHashTable *historicalBufferRequestStreams
 @property  CSAudioCircularBuffer *circularBuffer
 @property  <CSAudioAlertProvidingDelegate> *alertDelegate
 @property  CSAudioRecordContext *lastAudioRecorderContext
 @property  BOOL audioSystemRecovering
 @property  CSAudioPreprocessor *audioPreprocessor
 @property  CSOSTransaction *recordingTransaction
 @property  NSObject<OS_dispatch_group> *recordingWillStartGroup
 @property  BOOL waitingForAlertFinish
 @property  unsigned long audioStreamHandleId
 @property  NSUUID *alertPlaybackFinishTimeoutToken
 @property  NSUUID *startRecordingWatchDogToken
 @property  NSUUID *stopRecordingWatchDogToken
 @property  NSObject<OS_dispatch_source> *audioPacketWatchdog
 @property  unsigned long circularBufferStartHostTime
 @property  unsigned long circularBufferStartSampleCount
 @property  CSAudioTimeConverter *audioTimeConverter
 @property  unsigned long estimatedStartHostTime
 @property  long long audioStreamType
 @property  CSAudioRecordDeviceIndicator *recordDeviceIndicator
 @property  CSMicUsageReporter *micUsageReporter
 @property  unsigned long audioPacketDeliveryCount
 @property  CSADPPreventStandbyAssertion *adpAssertion
 @property  NSString *UUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSAudioProvider isRecording]
  -[CSAudioProvider averagePowerForChannel:]
  -[CSAudioProvider duckOthersOption]
  -[CSAudioProvider playAlertSoundForType:]
  -[CSAudioProvider _activateAudioSessionWithReason:error:]
  -[CSAudioProvider UUID]
  -[CSAudioProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSAudioProvider reportsDynamicActivityAttribute:bundleId:]
  -[CSAudioProvider enableSmartRoutingConsideration:]
  -[CSAudioProvider loggingQueue]
  -[CSAudioProvider recordingWillStartGroup]
  -[CSAudioProvider setAudioRecorder:]
  -[CSAudioProvider setDuckOthersOption:]
  -[CSAudioProvider .cxx_destruct]
  -[CSAudioProvider recordRoute]
  -[CSAudioProvider prewarmAudioSessionWithError:]
  -[CSAudioProvider setCurrentContext:error:]
  -[CSAudioProvider audioRecorderBufferAvailable:audioStreamHandleId:buffer:]
  -[CSAudioProvider cancelAudioStreamHold:]
  -[CSAudioProvider CSAudioServerCrashMonitorDidReceiveServerCrash:]
  -[CSAudioProvider audioDeviceInfo]
  -[CSAudioProvider prepareAudioStreamSync:request:error:]
  -[CSAudioProvider triggerInfoForContext:completion:]
  -[CSAudioProvider startAudioStream:option:completion:]
  -[CSAudioProvider playRecordStartingAlertAndResetEndpointer]
  -[CSAudioProvider playbackRoute]
  -[CSAudioProvider recordQueue]
  -[CSAudioProvider audioStreamWithRequest:streamName:completion:]
  -[CSAudioProvider isNarrowBand]
  -[CSAudioProvider activateAudioSessionWithReason:dynamicAttribute:bundleID:error:]
  -[CSAudioProvider setSessionDelegate:]
  -[CSAudioProvider enableMiniDucking:]
  -[CSAudioProvider peakPowerForChannel:]
  -[CSAudioProvider audioMetric]
  -[CSAudioProvider setRecordQueue:]
  -[CSAudioProvider setAudioTimeConverter:]
  -[CSAudioProvider providerDelegate]
  -[CSAudioProvider audioChunkToEndFrom:channelIdx:]
  -[CSAudioProvider attachTandemStream:toPrimaryStream:completion:]
  -[CSAudioProvider audioRecorderBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:]
  -[CSAudioProvider setRecordingWillStartGroup:]
  -[CSAudioProvider audioTimeConverter]
  -[CSAudioProvider alertDelegate]
  -[CSAudioProvider deactivateAudioSession:error:]
  -[CSAudioProvider setAlertDelegate:]
  -[CSAudioProvider configureAlertBehavior:]
  -[CSAudioProvider recordDeviceInfo]
  -[CSAudioProvider setProviderDelegate:]
  -[CSAudioProvider sessionDelegate]
  -[CSAudioProvider audioStreamId]
  -[CSAudioProvider setAudioAlertDelegate:]
  -[CSAudioProvider audioRecorder]
  -[CSAudioProvider start]
  -[CSAudioProvider setAlertSoundFromURL:forType:]
  -[CSAudioProvider updateMeters]
  -[CSAudioProvider recordSettings]
  -[CSAudioProvider streams]
  -[CSAudioProvider saveRecordingBufferToEndFrom:toURL:]
  -[CSAudioProvider audioChunkFrom:to:channelIdx:]
  -[CSAudioProvider dealloc]
  -[CSAudioProvider setAnnounceCallsEnabled:withStreamHandleID:]
  -[CSAudioProvider prepareAudioStream:request:completion:]
  -[CSAudioProvider setAudioSessionDelegate:]
  -[CSAudioProvider holdAudioStreamWithDescription:timeout:]
  -[CSAudioProvider audioChunkToEndFrom:]
  -[CSAudioProvider audioChunkFrom:to:]
  -[CSAudioProvider saveRecordingBufferFrom:to:toURL:]
  -[CSAudioProvider audioStreamWithRequest:streamName:error:]
  -[CSAudioProvider setStreamState:]
  -[CSAudioProvider streamState]
  -[CSAudioProvider alertStartTime]
  -[CSAudioProvider audioRecorderWillBeDestroyed:]
  -[CSAudioProvider stopAudioStream:option:completion:]
  -[CSAudioProvider setMeteringEnabled:]
  -[CSAudioProvider setCircularBuffer:]
  -[CSAudioProvider circularBuffer]
  -[CSAudioProvider audioStreamHandleId]
  -[CSAudioProvider audioPreprocessor:hasAvailableBuffer:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:]
  -[CSAudioProvider audioRecorderStreamHandleIdInvalidated:]
  -[CSAudioProvider audioRecorderDidStartRecord:audioStreamHandleId:successfully:error:]
  -[CSAudioProvider audioRecorderDidStopRecord:audioStreamHandleId:reason:]
  -[CSAudioProvider setLatestRecordContext:streamType:]
  -[CSAudioProvider initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:]
  -[CSAudioProvider setAudioProviderDelegate:]
  -[CSAudioProvider audioRecorderRecordHardwareConfigurationDidChange:toConfiguration:]
  -[CSAudioProvider audioRecorderDidFinishAlertPlayback:ofType:error:]
  -[CSAudioProvider audioRecorderBeginRecordInterruption:]
  -[CSAudioProvider audioRecorderBeginRecordInterruption:withContext:]
  -[CSAudioProvider audioRecorderEndRecordInterruption:]
  -[CSAudioProvider audioRecorder:willSetAudioSessionActive:]
  -[CSAudioProvider audioRecorder:didSetAudioSessionActive:]
  -[CSAudioProvider audioRecorderDisconnected:]
  -[CSAudioProvider audioRecorderBuiltInAudioStreamInvalidated:error:]
  -[CSAudioProvider setAudioStreamHandleId:]
  -[CSAudioProvider estimatedStartHostTime]
  -[CSAudioProvider setEstimatedStartHostTime:]
  -[CSAudioProvider notifyProviderContextChanged]
  -[CSAudioProvider _holdRecordingExceptionIfNeeded:]
  -[CSAudioProvider _updateRemoteDeviceIdFromAVVCIfNeeded]
  -[CSAudioProvider _streamStateName:]
  -[CSAudioProvider _setLatestRecordContext:]
  -[CSAudioProvider recordDeviceIndicator]
  -[CSAudioProvider _canSetContext]
  -[CSAudioProvider _prepareAudioStreamSync:request:error:]
  -[CSAudioProvider historicalBufferRequestStreams]
  -[CSAudioProvider _audioStreamWithRequest:streamName:error:]
  -[CSAudioProvider _handleAudioSystemFailure]
  -[CSAudioProvider _startAudioStream:option:completion:]
  -[CSAudioProvider _prepareAudioStream:request:completion:]
  -[CSAudioProvider startPendingOnStoppingStreams]
  -[CSAudioProvider startPendingOnStoppingStreamToCompletionDict]
  -[CSAudioProvider _didPlayStartAlertSoundForSiri:audioStream:]
  -[CSAudioProvider alertPlaybackFinishWaitingStreams]
  -[CSAudioProvider alertPlaybackFinishWaitingCompletions]
  -[CSAudioProvider _scheduleAlertFinishTimeout:]
  -[CSAudioProvider _switchToRecordingMode]
  -[CSAudioProvider circularBufferStartHostTime]
  -[CSAudioProvider circularBufferStartSampleCount]
  -[CSAudioProvider startPendingStreams]
  -[CSAudioProvider pendingStartCompletions]
  -[CSAudioProvider _holdRecordingTransactionIfNeeded]
  -[CSAudioProvider _scheduleAudioPacketWatchDog]
  -[CSAudioProvider _scheduleDidStartRecordingDelegateWatchDog]
  -[CSAudioProvider _resetCircularBufferStartTime]
  -[CSAudioProvider setCircularBufferStartHostTime:]
  -[CSAudioProvider setCircularBufferStartSampleCount:]
  -[CSAudioProvider _deliverHistoricalAudioToStreamsWithRemoteVAD:]
  -[CSAudioProvider _cancelAudioPacketWatchDog]
  -[CSAudioProvider _clearDidStartRecordingDelegateWatchDog]
  -[CSAudioProvider _releaseRecordingTransactionIfNeeded]
  -[CSAudioProvider audioPreprocessor]
  -[CSAudioProvider _clearDidStopRecordingDelegateWatchDog]
  -[CSAudioProvider _preEpilogueAudioStream]
  -[CSAudioProvider stopPendingStreams]
  -[CSAudioProvider pendingStopCompletions]
  -[CSAudioProvider _postEpilogueAudioStream]
  -[CSAudioProvider _shouldHandleStartPendingOnStopping:withStopReason:]
  -[CSAudioProvider _stopAudioStream:option:completion:]
  -[CSAudioProvider _shouldStopRecording]
  -[CSAudioProvider _scheduleDidStopRecordingDelegateWatchDog]
  -[CSAudioProvider _switchToListeningMode]
  -[CSAudioProvider _audioChunkFrom:to:]
  -[CSAudioProvider _audioChunkFrom:to:channelIdx:]
  -[CSAudioProvider _saveRecordingBufferFrom:to:toURL:]
  -[CSAudioProvider streamHolders]
  -[CSAudioProvider _deactivateAudioSession:error:]
  -[CSAudioProvider _processAudioBuffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:]
  -[CSAudioProvider _handleDidStartAudioStreamWithResult:error:]
  -[CSAudioProvider _handleDidStopAudioStreamWithReason:]
  -[CSAudioProvider _fetchHistoricalAudioAndForwardToStream:remoteVAD:]
  -[CSAudioProvider _forwardAudioChunk:toStream:]
  -[CSAudioProvider _forwardAudioChunkForTV:toStream:]
  -[CSAudioProvider _didReceiveFinishStartAlertPlaybackAt:]
  -[CSAudioProvider _onAudioPacketWatchdogFire]
  -[CSAudioProvider _schduleDidStartRecordingDelegateWatchDogWithToken:]
  -[CSAudioProvider _scheduleDidStopRecordingDelegateWatchDog:]
  -[CSAudioProvider _tearDownCircularBufferIfNeeded]
  -[CSAudioProvider setLoggingQueue:]
  -[CSAudioProvider streamHandleQueue]
  -[CSAudioProvider setStreamHandleQueue:]
  -[CSAudioProvider setStartPendingStreams:]
  -[CSAudioProvider setStartPendingOnStoppingStreams:]
  -[CSAudioProvider setAlertPlaybackFinishWaitingStreams:]
  -[CSAudioProvider setStreams:]
  -[CSAudioProvider setStopPendingStreams:]
  -[CSAudioProvider setPendingStartCompletions:]
  -[CSAudioProvider setAlertPlaybackFinishWaitingCompletions:]
  -[CSAudioProvider setPendingStopCompletions:]
  -[CSAudioProvider setStartPendingOnStoppingStreamToCompletionDict:]
  -[CSAudioProvider setStreamHolders:]
  -[CSAudioProvider setHistoricalBufferRequestStreams:]
  -[CSAudioProvider lastAudioRecorderContext]
  -[CSAudioProvider setLastAudioRecorderContext:]
  -[CSAudioProvider audioSystemRecovering]
  -[CSAudioProvider setAudioSystemRecovering:]
  -[CSAudioProvider setAudioPreprocessor:]
  -[CSAudioProvider recordingTransaction]
  -[CSAudioProvider setRecordingTransaction:]
  -[CSAudioProvider waitingForAlertFinish]
  -[CSAudioProvider setWaitingForAlertFinish:]
  -[CSAudioProvider alertPlaybackFinishTimeoutToken]
  -[CSAudioProvider setAlertPlaybackFinishTimeoutToken:]
  -[CSAudioProvider startRecordingWatchDogToken]
  -[CSAudioProvider setStartRecordingWatchDogToken:]
  -[CSAudioProvider stopRecordingWatchDogToken]
  -[CSAudioProvider setStopRecordingWatchDogToken:]
  -[CSAudioProvider audioPacketWatchdog]
  -[CSAudioProvider setAudioPacketWatchdog:]
  -[CSAudioProvider audioStreamType]
  -[CSAudioProvider setAudioStreamType:]
  -[CSAudioProvider setRecordDeviceIndicator:]
  -[CSAudioProvider micUsageReporter]
  -[CSAudioProvider setMicUsageReporter:]
  -[CSAudioProvider audioPacketDeliveryCount]
  -[CSAudioProvider setAudioPacketDeliveryCount:]
  -[CSAudioProvider adpAssertion]
  -[CSAudioProvider setAdpAssertion:]


CSListeningEnabledPolicyWatch : CSPolicy
  // instance methods
  -[CSListeningEnabledPolicyWatch init]
  -[CSListeningEnabledPolicyWatch _subscribeEventMonitors]
  -[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]


CSAlwaysOnProcessorStateMonitor : CSEventMonitor
  // class methods
  +[CSAlwaysOnProcessorStateMonitor sharedInstance]

  // instance methods
  -[CSAlwaysOnProcessorStateMonitor _stopMonitoring]
  -[CSAlwaysOnProcessorStateMonitor _startMonitoringWithQueue:]
  -[CSAlwaysOnProcessorStateMonitor init]
  -[CSAlwaysOnProcessorStateMonitor isEnabled]
  -[CSAlwaysOnProcessorStateMonitor _didReceiveAOPListeningStateChange:]
  -[CSAlwaysOnProcessorStateMonitor _notifyObserver:withEnabled:]


CSAdBlockerAssetDecoderFactory : NSObject
  // class methods
  +[CSAdBlockerAssetDecoderFactory adBlockerAssetDecoderWithVersion:]


CSVoiceTriggerEnabledPolicyAOP : CSPolicy
  // instance methods
  -[CSVoiceTriggerEnabledPolicyAOP init]
  -[CSVoiceTriggerEnabledPolicyAOP _subscribeEventMonitors]
  -[CSVoiceTriggerEnabledPolicyAOP _addVoiceTriggerEnabledConditions]


CSMyriadNotifier : NSObject
  // class methods
  +[CSMyriadNotifier notifyInEarMyriadTrigger]


CSNovDetectorResult : NSObject
 @property  unsigned long sampleFed
 @property  unsigned long bestPhrase
 @property  unsigned long bestStart
 @property  unsigned long bestEnd
 @property  float bestScore
 @property  BOOL earlyWarning
 @property  BOOL isRescoring
 @property  NSDictionary *dictionary

  // instance methods
  -[CSNovDetectorResult initWithResult:]
  -[CSNovDetectorResult setBestScore:]
  -[CSNovDetectorResult dictionary]
  -[CSNovDetectorResult bestScore]
  -[CSNovDetectorResult bestEnd]
  -[CSNovDetectorResult bestStart]
  -[CSNovDetectorResult setBestStart:]
  -[CSNovDetectorResult setBestEnd:]
  -[CSNovDetectorResult bestPhrase]
  -[CSNovDetectorResult setBestPhrase:]
  -[CSNovDetectorResult isRescoring]
  -[CSNovDetectorResult setIsRescoring:]
  -[CSNovDetectorResult sampleFed]
  -[CSNovDetectorResult earlyWarning]
  -[CSNovDetectorResult setSampleFed:]
  -[CSNovDetectorResult setEarlyWarning:]


CSNovDetector : NSObject
  // instance methods
  -[CSNovDetector initWithConfigPath:resourcePath:]
  -[CSNovDetector numResultsAvailable]
  -[CSNovDetector analyzeWavFloatData:numSamples:]
  -[CSNovDetector getOptionValue:]
  -[CSNovDetector analyzeWavData:numSamples:]
  -[CSNovDetector reset]
  -[CSNovDetector getAnalyzedResultForPhraseId:]
  -[CSNovDetector dealloc]
  -[CSNovDetector getSuperVectorWithEndPoint:]
  -[CSNovDetector resetBest]


CSAdBlockerAssetDecoderV1 : NSObject
 @property  NSData *payloadData
 @property  float maxFingerprintBufferSize
 @property  NSMutableDictionary *shouldResetAdsDictionary
 @property  NSString *assetVersion

  // instance methods
  -[CSAdBlockerAssetDecoderV1 .cxx_destruct]
  -[CSAdBlockerAssetDecoderV1 assetVersion]
  -[CSAdBlockerAssetDecoderV1 payloadData]
  -[CSAdBlockerAssetDecoderV1 setPayloadData:]
  -[CSAdBlockerAssetDecoderV1 initWithData:]
  -[CSAdBlockerAssetDecoderV1 maxFingerprintBufferSize]
  -[CSAdBlockerAssetDecoderV1 shouldResetAdsDictionary]


CSAVCallConnectedMonitor : CSEventMonitor
  // class methods
  +[CSAVCallConnectedMonitor sharedInstance]

  // instance methods
  -[CSAVCallConnectedMonitor _stopMonitoring]
  -[CSAVCallConnectedMonitor _startObservingSystemControllerLifecycle]
  -[CSAVCallConnectedMonitor _startMonitoringWithQueue:]
  -[CSAVCallConnectedMonitor init]
  -[CSAVCallConnectedMonitor _systemControllerDied:]
  -[CSAVCallConnectedMonitor hasConnectedAVCall]
  -[CSAVCallConnectedMonitor _startObservingAVCallActiveChange]
  -[CSAVCallConnectedMonitor _handleCallActiveDidChangeNotification:]


CSUserSessionActiveMonitor : CSEventMonitor
  // class methods
  +[CSUserSessionActiveMonitor sharedInstance]

  // instance methods
  -[CSUserSessionActiveMonitor _stopMonitoring]
  -[CSUserSessionActiveMonitor _startMonitoringWithQueue:]
  -[CSUserSessionActiveMonitor isUserActive]


CSTrialAssetDownloadMonitor : CSEventMonitor
  // class methods
  +[CSTrialAssetDownloadMonitor sharedInstance]

  // instance methods
  -[CSTrialAssetDownloadMonitor .cxx_destruct]
  -[CSTrialAssetDownloadMonitor _startMonitoringWithQueue:]
  -[CSTrialAssetDownloadMonitor init]
  -[CSTrialAssetDownloadMonitor downloadAndNotifyTrialAssetsUpdateForNamespace:onQueue:]
  -[CSTrialAssetDownloadMonitor _notifyTrialAssetDownloadForAssetType:]
  -[CSTrialAssetDownloadMonitor _handleSiriAttAssetTrailDownloadForNamespace:]
  -[CSTrialAssetDownloadMonitor _trailStageDirectoryForAsset:]
  -[CSTrialAssetDownloadMonitor _validateDownloadedAssetForAssetType:]


CSRemoteDeviceProtocolInfo : NSObject
 @property  NSObject<OS_xpc_object> *xpcObject
 @property  unsigned long protocolVersion
 @property  NSString *buildVersion
 @property  NSString *deviceProductVersion
 @property  NSString *deviceProductType
 @property  unsigned long deviceCategory

  // class methods
  +[CSRemoteDeviceProtocolInfo defaultProtocolInfo]
  +[CSRemoteDeviceProtocolInfo localDeviceProtocolInfo]

  // instance methods
  -[CSRemoteDeviceProtocolInfo buildVersion]
  -[CSRemoteDeviceProtocolInfo deviceCategory]
  -[CSRemoteDeviceProtocolInfo xpcObject]
  -[CSRemoteDeviceProtocolInfo protocolVersion]
  -[CSRemoteDeviceProtocolInfo initWithXPCObject:]
  -[CSRemoteDeviceProtocolInfo .cxx_destruct]
  -[CSRemoteDeviceProtocolInfo deviceProductVersion]
  -[CSRemoteDeviceProtocolInfo deviceProductType]
  -[CSRemoteDeviceProtocolInfo initWithProtocolVersion:buildVersion:deviceProductVersion:deviceProductType:deviceCategory:]


CSHybridEndpointAnalyzer : NSObject <CSAssetManagerDelegate, CSFirstUnlockMonitorDelegate, OSDAnalyzerDelegate, CSEndpointAnalyzerImpl>
 @property  CSAsset *currentAsset
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  NSObject<OS_dispatch_queue> *apQueue
 @property  unsigned long numSamplesProcessed
 @property  unsigned long numSamplesProcessedBeforeAnchorTime
 @property  unsigned long anchorMachAbsTime
 @property  BOOL isAnchorTimeBuffered
 @property  BOOL isRequestTimeout
 @property  BOOL didAddAudio
 @property  OSDAnalyzer *osdAnalyzer
 @property  OSDFeatures *osdFeaturesAtEndpoint
 @property  BOOL canProcessCurrentRequest
 @property  _EAREndpointer *hybridClassifier
 @property  NSString *endpointerModelVersion
 @property  NSObject<OS_dispatch_queue> *serverFeaturesQueue
 @property  CSServerEndpointFeatures *lastKnownServerEPFeatures
 @property  OSDFeatures *lastKnownOSDFeatures
 @property  NSMutableArray *serverFeatureLatencies
 @property  double lastKnowServerFeaturesLatency
 @property  BOOL epResult
 @property  double serverFeaturesWarmupLatency
 @property  NSDate *lastServerFeatureTimestamp
 @property  BOOL didReceiveServerFeatures
 @property  double clientLagThresholdMs
 @property  double clampedSFLatencyMsForClientLag
 @property  BOOL useDefaultServerFeaturesOnClientLag
 @property  NSObject<OS_dispatch_queue> *hybridClassifierQueue
 @property  double lastReportedEndpointTimeMs
 @property  double processedAudioInSeconds
 @property  float lastEndpointPosterior
 @property  NSObject<OS_dispatch_queue> *stateSerialQueue
 @property  BOOL didCommunicateEndpoint
 @property  unsigned long currentRequestSampleRate
 @property  double vtExtraAudioAtStartInMs
 @property  unsigned long vtEndInSampleCount
 @property  double hepAudioOriginInMs
 @property  CSAudioRecordContext *recordContext
 @property  BOOL speechEndpointDetected
 @property  NSDate *firstAudioPacketTimestamp
 @property  double firstAudioSampleSensorTimestamp
 @property  BOOL didTimestampFirstAudioPacket
 @property  BOOL recordingDidStop
 @property  NSObject<OS_dispatch_queue> *osdQueue
 @property  BOOL didDetectSpeech
 @property  double elapsedTimeWithNoSpeech
 @property  double trailingSilenceDurationAtEndpoint
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <CSEndpointAnalyzerDelegate> *delegate
 @property  <CSEndpointAnalyzerImplDelegate> *implDelegate
 @property  unsigned long activeChannel
 @property  long long endpointStyle
 @property  double delay
 @property  double startWaitTime
 @property  double automaticEndpointingSuspensionEndTime
 @property  double minimumDurationForEndpointer
 @property  double lastEndOfVoiceActivityTime
 @property  double lastStartOfVoiceActivityTime
 @property  double bypassSamples
 @property  long long endpointMode
 @property  double interspeechWaitTime
 @property  double endWaitTime
 @property  BOOL saveSamplesSeenInReset
 @property  NSString *mhId

  // instance methods
  -[CSHybridEndpointAnalyzer mhId]
  -[CSHybridEndpointAnalyzer setActiveChannel:]
  -[CSHybridEndpointAnalyzer epResult]
  -[CSHybridEndpointAnalyzer preheat]
  -[CSHybridEndpointAnalyzer elapsedTimeWithNoSpeech]
  -[CSHybridEndpointAnalyzer setLastKnownOSDFeatures:]
  -[CSHybridEndpointAnalyzer setStartWaitTime:]
  -[CSHybridEndpointAnalyzer implDelegate]
  -[CSHybridEndpointAnalyzer isAnchorTimeBuffered]
  -[CSHybridEndpointAnalyzer setNumSamplesProcessedBeforeAnchorTime:]
  -[CSHybridEndpointAnalyzer setClampedSFLatencyMsForClientLag:]
  -[CSHybridEndpointAnalyzer logFeaturesWithEvent:locale:]
  -[CSHybridEndpointAnalyzer targetQueue]
  -[CSHybridEndpointAnalyzer setIsAnchorTimeBuffered:]
  -[CSHybridEndpointAnalyzer recordingStoppedForReason:]
  -[CSHybridEndpointAnalyzer setCanProcessCurrentRequest:]
  -[CSHybridEndpointAnalyzer fetchCurrentEndpointerOperationMode]
  -[CSHybridEndpointAnalyzer delay]
  -[CSHybridEndpointAnalyzer setVtExtraAudioAtStartInMs:]
  -[CSHybridEndpointAnalyzer setSaveSamplesSeenInReset:]
  -[CSHybridEndpointAnalyzer setClientLagThresholdMs:]
  -[CSHybridEndpointAnalyzer setLastKnowServerFeaturesLatency:]
  -[CSHybridEndpointAnalyzer currentRequestSampleRate]
  -[CSHybridEndpointAnalyzer setDidCommunicateEndpoint:]
  -[CSHybridEndpointAnalyzer setTargetQueue:]
  -[CSHybridEndpointAnalyzer endpointerModelVersion]
  -[CSHybridEndpointAnalyzer setCurrentAsset:]
  -[CSHybridEndpointAnalyzer useDefaultServerFeaturesOnClientLag]
  -[CSHybridEndpointAnalyzer setDelay:]
  -[CSHybridEndpointAnalyzer .cxx_destruct]
  -[CSHybridEndpointAnalyzer minimumDurationForEndpointer]
  -[CSHybridEndpointAnalyzer lastEndpointPosterior]
  -[CSHybridEndpointAnalyzer processedAudioInSeconds]
  -[CSHybridEndpointAnalyzer lastKnownServerEPFeatures]
  -[CSHybridEndpointAnalyzer canProcessCurrentRequest]
  -[CSHybridEndpointAnalyzer processServerEndpointFeatures:]
  -[CSHybridEndpointAnalyzer clientLagThresholdMs]
  -[CSHybridEndpointAnalyzer hepAudioOriginInMs]
  -[CSHybridEndpointAnalyzer setLastReportedEndpointTimeMs:]
  -[CSHybridEndpointAnalyzer recordingDidStop]
  -[CSHybridEndpointAnalyzer didTimestampFirstAudioPacket]
  -[CSHybridEndpointAnalyzer serverFeaturesQueue]
  -[CSHybridEndpointAnalyzer serverFeaturesWarmupLatency]
  -[CSHybridEndpointAnalyzer _getCSHybridEndpointerConfigForAsset:]
  -[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]
  -[CSHybridEndpointAnalyzer firstAudioSampleSensorTimestamp]
  -[CSHybridEndpointAnalyzer setImplDelegate:]
  -[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]
  -[CSHybridEndpointAnalyzer setDelegate:]
  -[CSHybridEndpointAnalyzer serverFeatureLatencies]
  -[CSHybridEndpointAnalyzer _shouldUsePhaticWithRecordContext]
  -[CSHybridEndpointAnalyzer vtExtraAudioAtStartInMs]
  -[CSHybridEndpointAnalyzer startWaitTime]
  -[CSHybridEndpointAnalyzer setAutomaticEndpointingSuspensionEndTime:]
  -[CSHybridEndpointAnalyzer firstAudioPacketTimestamp]
  -[CSHybridEndpointAnalyzer setHepAudioOriginInMs:]
  -[CSHybridEndpointAnalyzer setTrailingSilenceDurationAtEndpoint:]
  -[CSHybridEndpointAnalyzer init]
  -[CSHybridEndpointAnalyzer setHybridClassifierQueue:]
  -[CSHybridEndpointAnalyzer saveSamplesSeenInReset]
  -[CSHybridEndpointAnalyzer didDetectSpeech]
  -[CSHybridEndpointAnalyzer CSAssetManagerDidDownloadNewAsset:]
  -[CSHybridEndpointAnalyzer endpointStyle]
  -[CSHybridEndpointAnalyzer setServerFeaturesWarmupLatency:]
  -[CSHybridEndpointAnalyzer setEndpointMode:]
  -[CSHybridEndpointAnalyzer hybridClassifier]
  -[CSHybridEndpointAnalyzer hybridClassifierQueue]
  -[CSHybridEndpointAnalyzer setSpeechEndpointDetected:]
  -[CSHybridEndpointAnalyzer activeChannel]
  -[CSHybridEndpointAnalyzer isRequestTimeout]
  -[CSHybridEndpointAnalyzer _emitEndpointDetectedEventWithEndpointTimeMs:endpointBufferHostTime:endpointerFeatures:endpointerDecisionLagInNs:extraDelayMs:endpointScore:asrFeatureLatencies:]
  -[CSHybridEndpointAnalyzer lastServerFeatureTimestamp]
  -[CSHybridEndpointAnalyzer setLastEndpointPosterior:]
  -[CSHybridEndpointAnalyzer setEpResult:]
  -[CSHybridEndpointAnalyzer setRecordContext:]
  -[CSHybridEndpointAnalyzer terminateProcessing]
  -[CSHybridEndpointAnalyzer setVtEndInSampleCount:]
  -[CSHybridEndpointAnalyzer updateEndpointerThreshold:]
  -[CSHybridEndpointAnalyzer stopEndpointer]
  -[CSHybridEndpointAnalyzer reset]
  -[CSHybridEndpointAnalyzer setAnchorMachAbsTime:]
  -[CSHybridEndpointAnalyzer clampedSFLatencyMsForClientLag]
  -[CSHybridEndpointAnalyzer setProcessedAudioInSeconds:]
  -[CSHybridEndpointAnalyzer setServerFeatureLatencies:]
  -[CSHybridEndpointAnalyzer recordContext]
  -[CSHybridEndpointAnalyzer CSFirstUnlockMonitor:didReceiveFirstUnlock:]
  -[CSHybridEndpointAnalyzer setRecordingDidStop:]
  -[CSHybridEndpointAnalyzer didCommunicateEndpoint]
  -[CSHybridEndpointAnalyzer setCurrentRequestSampleRate:]
  -[CSHybridEndpointAnalyzer apQueue]
  -[CSHybridEndpointAnalyzer setUseDefaultServerFeaturesOnClientLag:]
  -[CSHybridEndpointAnalyzer setStateSerialQueue:]
  -[CSHybridEndpointAnalyzer setMinimumDurationForEndpointer:]
  -[CSHybridEndpointAnalyzer setDidReceiveServerFeatures:]
  -[CSHybridEndpointAnalyzer setElapsedTimeWithNoSpeech:]
  -[CSHybridEndpointAnalyzer setInterspeechWaitTime:]
  -[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]
  -[CSHybridEndpointAnalyzer setEndWaitTime:]
  -[CSHybridEndpointAnalyzer setOsdFeaturesAtEndpoint:]
  -[CSHybridEndpointAnalyzer lastKnownOSDFeatures]
  -[CSHybridEndpointAnalyzer setFirstAudioSampleSensorTimestamp:]
  -[CSHybridEndpointAnalyzer setServerFeaturesQueue:]
  -[CSHybridEndpointAnalyzer anchorMachAbsTime]
  -[CSHybridEndpointAnalyzer osdFeaturesAtEndpoint]
  -[CSHybridEndpointAnalyzer delegate]
  -[CSHybridEndpointAnalyzer currentAsset]
  -[CSHybridEndpointAnalyzer numSamplesProcessedBeforeAnchorTime]
  -[CSHybridEndpointAnalyzer setLastKnownServerEPFeatures:]
  -[CSHybridEndpointAnalyzer trailingSilenceDurationAtEndpoint]
  -[CSHybridEndpointAnalyzer vtEndInSampleCount]
  -[CSHybridEndpointAnalyzer updateEndpointerDelayedTrigger:]
  -[CSHybridEndpointAnalyzer setDidDetectSpeech:]
  -[CSHybridEndpointAnalyzer setMhId:]
  -[CSHybridEndpointAnalyzer setEndpointerOperationMode:]
  -[CSHybridEndpointAnalyzer lastEndOfVoiceActivityTime]
  -[CSHybridEndpointAnalyzer interspeechWaitTime]
  -[CSHybridEndpointAnalyzer automaticEndpointingSuspensionEndTime]
  -[CSHybridEndpointAnalyzer setDidTimestampFirstAudioPacket:]
  -[CSHybridEndpointAnalyzer setHybridClassifier:]
  -[CSHybridEndpointAnalyzer lastKnowServerFeaturesLatency]
  -[CSHybridEndpointAnalyzer endWaitTime]
  -[CSHybridEndpointAnalyzer handleVoiceTriggerWithActivationInfo:]
  -[CSHybridEndpointAnalyzer stateSerialQueue]
  -[CSHybridEndpointAnalyzer _readParametersFromHEPAsset:]
  -[CSHybridEndpointAnalyzer setLastServerFeatureTimestamp:]
  -[CSHybridEndpointAnalyzer didReceiveServerFeatures]
  -[CSHybridEndpointAnalyzer setIsRequestTimeout:]
  -[CSHybridEndpointAnalyzer osdQueue]
  -[CSHybridEndpointAnalyzer endpointMode]
  -[CSHybridEndpointAnalyzer speechEndpointDetected]
  -[CSHybridEndpointAnalyzer lastReportedEndpointTimeMs]
  -[CSHybridEndpointAnalyzer lastStartOfVoiceActivityTime]
  -[CSHybridEndpointAnalyzer setEndpointerModelVersion:]
  -[CSHybridEndpointAnalyzer CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
  -[CSHybridEndpointAnalyzer setFirstAudioPacketTimestamp:]
  -[CSHybridEndpointAnalyzer _multimodalEndpointerEnabled]
  -[CSHybridEndpointAnalyzer setEndpointStyle:]
  -[CSHybridEndpointAnalyzer numSamplesProcessed]
  -[CSHybridEndpointAnalyzer setNumSamplesProcessed:]
  -[CSHybridEndpointAnalyzer _loadAndSetupEndpointerAssetIfNecessary]
  -[CSHybridEndpointAnalyzer _updateAssetWithLanguage:]
  -[CSHybridEndpointAnalyzer _updateAssetWithCurrentLanguage]
  -[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]
  -[CSHybridEndpointAnalyzer setApQueue:]
  -[CSHybridEndpointAnalyzer didAddAudio]
  -[CSHybridEndpointAnalyzer setDidAddAudio:]
  -[CSHybridEndpointAnalyzer osdAnalyzer]
  -[CSHybridEndpointAnalyzer setOsdAnalyzer:]
  -[CSHybridEndpointAnalyzer setOsdQueue:]


CSOpportuneSpeakListenerOption : NSObject
 @property  NSString *deviceId
 @property  unsigned long opportuneSpeakListeningType

  // instance methods
  -[CSOpportuneSpeakListenerOption setDeviceId:]
  -[CSOpportuneSpeakListenerOption deviceId]
  -[CSOpportuneSpeakListenerOption .cxx_destruct]
  -[CSOpportuneSpeakListenerOption opportuneSpeakListeningType]
  -[CSOpportuneSpeakListenerOption setOpportuneSpeakListeningType:]


CSAudioInjectionDevice : NSObject
 @property  long long deviceType
 @property  NSString *deviceName
 @property  NSString *deviceID
 @property  NSUUID *deviceUID
 @property  NSString *productIdentifier
 @property  BOOL isConnected
 @property  BOOL isPluginDevice
 @property  BOOL enableAlwaysOnVoiceTrigger
 @property  CSAudioInjectionEngine *injectionEngine

  // instance methods
  -[CSAudioInjectionDevice setIsConnected:]
  -[CSAudioInjectionDevice deviceType]
  -[CSAudioInjectionDevice isConnected]
  -[CSAudioInjectionDevice deviceName]
  -[CSAudioInjectionDevice .cxx_destruct]
  -[CSAudioInjectionDevice deviceID]
  -[CSAudioInjectionDevice deviceUID]
  -[CSAudioInjectionDevice productIdentifier]
  -[CSAudioInjectionDevice enableAlwaysOnVoiceTrigger]
  -[CSAudioInjectionDevice initWithDeviceType:deviceName:deviceID:productID:]
  -[CSAudioInjectionDevice isPluginDevice]
  -[CSAudioInjectionDevice setInjectionEngine:]
  -[CSAudioInjectionDevice injectionEngine]
  -[CSAudioInjectionDevice speakAudio:]
  -[CSAudioInjectionDevice speakAudio:withScaleFactor:playbackStarted:completion:]
  -[CSAudioInjectionDevice speakAudio:withScaleFactor:outASBD:playbackStarted:completion:]
  -[CSAudioInjectionDevice setEnableAlwaysOnVoiceTrigger:]


CSVoiceTriggerEnabledPolicyMac : CSPolicy
  // instance methods
  -[CSVoiceTriggerEnabledPolicyMac init]
  -[CSVoiceTriggerEnabledPolicyMac _subscribeEventMonitors]
  -[CSVoiceTriggerEnabledPolicyMac _addVoiceTriggerEnabledConditions]


CSRemoteControlClient : NSObject <CSRemoteControlClientProtocolV1, CSRemoteControlClientProtocolV2>
 @property  unsigned int deviceType
 @property  OS_remote_device *device
 @property  NSString *deviceId
 @property  CSRemoteDeviceProtocolInfo *deviceProtocolInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSRemoteControlClient deviceType]
  -[CSRemoteControlClient deviceId]
  -[CSRemoteControlClient isConnected]
  -[CSRemoteControlClient .cxx_destruct]
  -[CSRemoteControlClient addObserver:]
  -[CSRemoteControlClient _invalidate]
  -[CSRemoteControlClient dealloc]
  -[CSRemoteControlClient invalidate]
  -[CSRemoteControlClient removeObserver:]
  -[CSRemoteControlClient device]
  -[CSRemoteControlClient getFirstPassRunningMode:]
  -[CSRemoteControlClient didDeviceConnect:]
  -[CSRemoteControlClient didDeviceDisconnect:]
  -[CSRemoteControlClient _handleServerEvent:]
  -[CSRemoteControlClient _handleServerError:]
  -[CSRemoteControlClient _handleServerMessage:]
  -[CSRemoteControlClient waitingForConnection:error:]
  -[CSRemoteControlClient getTriggerCount:]
  -[CSRemoteControlClient clearTriggerCount:]
  -[CSRemoteControlClient _getMyriadInfoFromServerMessage:]
  -[CSRemoteControlClient _transferFile:at:completion:]
  -[CSRemoteControlClient _transferAudioData:numSamples:remoteWavFilePath:completion:]
  -[CSRemoteControlClient _fetchDataFromAudioFileUrl:aesKey:encryptedAudioSampleBypeDepth:completion:]
  -[CSRemoteControlClient readVoiceTriggeredTokenWithCompletion:]
  -[CSRemoteControlClient readAndClearVoiceTriggeredTokenWithCompletion:]
  -[CSRemoteControlClient transferVoiceTriggerSpeakerModel:forAsset:]
  -[CSRemoteControlClient transferVoiceTriggerAsset:forLanguageCode:completion:]
  -[CSRemoteControlClient setVoiceTriggerEnable:withCompletion:]
  -[CSRemoteControlClient voiceTriggerEnabledWithCompletion:]
  -[CSRemoteControlClient invalidateInterstitialWithLevel:]
  -[CSRemoteControlClient transferInterstitialAudioFiles:interstitialLevel:completion:]
  -[CSRemoteControlClient notifyVoiceTriggerAssetChangeWithSiriLanguageCode:]
  -[CSRemoteControlClient exchangeRemoteDeviceProtocolInfo:]
  -[CSRemoteControlClient createRemoteVoiceProfileWithAudioFiles:aesKey:encryptedAudioSampleBypeDepth:languageCode:completion:]
  -[CSRemoteControlClient notifyBluetoothWirelessSplitterStateChanged:shouldDisableSpeakerVerificationInSplitterMode:]
  -[CSRemoteControlClient fetchAndClearCachedVoiceTriggerEventsWithCompletion:]
  -[CSRemoteControlClient initWithRemoteDevice:]
  -[CSRemoteControlClient isConnectedDeviceGibraltar]
  -[CSRemoteControlClient isConnectedDeviceDarwin]
  -[CSRemoteControlClient _dictionaryWithContentsOfXPCObject:]
  -[CSRemoteControlClient deviceProtocolInfo]


CSAudioSessionInfoProvider : NSObject <CSAudioSessionInfoProviding>
 @property  NSObject<OS_dispatch_queue> *sessionInfoQueue
 @property  NSHashTable *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAudioSessionInfoProvider sharedInstance]

  // instance methods
  -[CSAudioSessionInfoProvider _stopMonitoring]
  -[CSAudioSessionInfoProvider unregisterObserver:]
  -[CSAudioSessionInfoProvider _audioRouteChanged:]
  -[CSAudioSessionInfoProvider registerObserver:]
  -[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSAudioSessionInfoProvider _deregisterAudioSessionNotifications]
  -[CSAudioSessionInfoProvider _registerAudioSessionNotifications]
  -[CSAudioSessionInfoProvider .cxx_destruct]
  -[CSAudioSessionInfoProvider _registerInterruptionNotification]
  -[CSAudioSessionInfoProvider _handleInterruption:]
  -[CSAudioSessionInfoProvider setObservers:]
  -[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerCrash:]
  -[CSAudioSessionInfoProvider init]
  -[CSAudioSessionInfoProvider audioSessionIdForDeviceId:]
  -[CSAudioSessionInfoProvider sessionInfoQueue]
  -[CSAudioSessionInfoProvider setSessionInfoQueue:]
  -[CSAudioSessionInfoProvider observers]
  -[CSAudioSessionInfoProvider dealloc]
  -[CSAudioSessionInfoProvider _registerAudioRouteChangeNotification]
  -[CSAudioSessionInfoProvider _startMonitoring]


CSEndpointerProxy : NSObject <CSEndpointAnalyzerDelegate, CSEndpointAnalyzerImplDelegate, CSEndpointAnalyzer>
 @property  <CSEndpointAnalyzerImpl> *hybridEndpointer
 @property  <CSEndpointAnalyzerImpl> *nnvadEndpointer
 @property  <CSEndpointAnalyzerImpl> *activeEndpointer
 @property  CSAudioRecordContext *recordContext
 @property  BOOL recordingDidStop
 @property  <CSEndpointAnalyzerDelegate> *endpointerDelegate
 @property  <CSEndpointAnalyzerImplDelegate> *endpointerImplDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long endpointStyle
 @property  double delay
 @property  double startWaitTime
 @property  double automaticEndpointingSuspensionEndTime
 @property  double minimumDurationForEndpointer
 @property  double lastEndOfVoiceActivityTime
 @property  double lastStartOfVoiceActivityTime
 @property  double bypassSamples
 @property  long long endpointMode
 @property  double interspeechWaitTime
 @property  double endWaitTime
 @property  BOOL saveSamplesSeenInReset
 @property  NSString *mhId

  // instance methods
  -[CSEndpointerProxy setActiveChannel:]
  -[CSEndpointerProxy preheat]
  -[CSEndpointerProxy elapsedTimeWithNoSpeech]
  -[CSEndpointerProxy setStartWaitTime:]
  -[CSEndpointerProxy recordingStoppedForReason:]
  -[CSEndpointerProxy fetchCurrentEndpointerOperationMode]
  -[CSEndpointerProxy delay]
  -[CSEndpointerProxy setSaveSamplesSeenInReset:]
  -[CSEndpointerProxy processFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:]
  -[CSEndpointerProxy endpointerModelVersion]
  -[CSEndpointerProxy setDelay:]
  -[CSEndpointerProxy .cxx_destruct]
  -[CSEndpointerProxy minimumDurationForEndpointer]
  -[CSEndpointerProxy processServerEndpointFeatures:]
  -[CSEndpointerProxy recordingDidStop]
  -[CSEndpointerProxy processAudioSamplesAsynchronously:]
  -[CSEndpointerProxy shouldAcceptEagerResultForDuration:resultsCompletionHandler:]
  -[CSEndpointerProxy startWaitTime]
  -[CSEndpointerProxy processTaskString:]
  -[CSEndpointerProxy setAutomaticEndpointingSuspensionEndTime:]
  -[CSEndpointerProxy init]
  -[CSEndpointerProxy saveSamplesSeenInReset]
  -[CSEndpointerProxy logAnchorMachAbsTime:numSamplesProcessedBeforeAnchorTime:isAnchorTimeBuffered:]
  -[CSEndpointerProxy endpointStyle]
  -[CSEndpointerProxy setEndpointMode:]
  -[CSEndpointerProxy setRecordContext:]
  -[CSEndpointerProxy updateEndpointerThreshold:]
  -[CSEndpointerProxy stopEndpointer]
  -[CSEndpointerProxy reset]
  -[CSEndpointerProxy recordContext]
  -[CSEndpointerProxy setRecordingDidStop:]
  -[CSEndpointerProxy setRequestMHUUID:]
  -[CSEndpointerProxy endpointer:didDetectStartpointAtTime:]
  -[CSEndpointerProxy setMinimumDurationForEndpointer:]
  -[CSEndpointerProxy setInterspeechWaitTime:]
  -[CSEndpointerProxy setEndWaitTime:]
  -[CSEndpointerProxy setEndpointerDelegate:]
  -[CSEndpointerProxy trailingSilenceDurationAtEndpoint]
  -[CSEndpointerProxy updateEndpointerDelayedTrigger:]
  -[CSEndpointerProxy processASRFeatures:fromServer:]
  -[CSEndpointerProxy setEndpointerOperationMode:]
  -[CSEndpointerProxy lastEndOfVoiceActivityTime]
  -[CSEndpointerProxy interspeechWaitTime]
  -[CSEndpointerProxy automaticEndpointingSuspensionEndTime]
  -[CSEndpointerProxy endWaitTime]
  -[CSEndpointerProxy endpointer:detectedTwoShotAtTime:]
  -[CSEndpointerProxy processOSDFeatures:withFrameDurationMs:]
  -[CSEndpointerProxy endpointMode]
  -[CSEndpointerProxy lastStartOfVoiceActivityTime]
  -[CSEndpointerProxy endpointer:didDetectHardEndpointAtTime:withMetrics:]
  -[CSEndpointerProxy setEndpointStyle:]
  -[CSEndpointerProxy endpointer:reportEndpointBufferHostTime:firstBufferHostTime:]
  -[CSEndpointerProxy resetForVoiceTriggerTwoShotWithSampleRate:]
  -[CSEndpointerProxy endPointAnalyzerType]
  -[CSEndpointerProxy resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:]
  -[CSEndpointerProxy endpointerDelegate]
  -[CSEndpointerProxy setEndpointerImplDelegate:]
  -[CSEndpointerProxy initForSidekick]
  -[CSEndpointerProxy logHybridEndpointFeaturesWithEvent:locale:]
  -[CSEndpointerProxy _setupNNVADEndpointer]
  -[CSEndpointerProxy isWatchRTSTriggered]
  -[CSEndpointerProxy endpointerImplDelegate]
  -[CSEndpointerProxy hybridEndpointer]
  -[CSEndpointerProxy setHybridEndpointer:]
  -[CSEndpointerProxy nnvadEndpointer]
  -[CSEndpointerProxy setNnvadEndpointer:]
  -[CSEndpointerProxy activeEndpointer]
  -[CSEndpointerProxy setActiveEndpointer:]


CSVoiceTriggerStatistics : NSObject <CSVoiceTriggerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSVoiceTriggerStatistics sharedInstance]

  // instance methods
  -[CSVoiceTriggerStatistics clearFalseFirstPassTriggersPerHour]
  -[CSVoiceTriggerStatistics getLastPHSRejectTime]
  -[CSVoiceTriggerStatistics voiceTriggerDidDetectKeyword:deviceId:]
  -[CSVoiceTriggerStatistics incrementVTRejectCount]
  -[CSVoiceTriggerStatistics .cxx_destruct]
  -[CSVoiceTriggerStatistics clearFirstPassTriggerCount]
  -[CSVoiceTriggerStatistics firstPassTriggerCount]
  -[CSVoiceTriggerStatistics init]
  -[CSVoiceTriggerStatistics incrementFirstPassTriggerCount]
  -[CSVoiceTriggerStatistics voiceTriggerDidRejected:deviceId:]
  -[CSVoiceTriggerStatistics voiceTriggerDidDetectSpeakerReject:]
  -[CSVoiceTriggerStatistics incrementPHSRejectCount]
  -[CSVoiceTriggerStatistics increaseFalseFirstPassTriggersPerHour]
  -[CSVoiceTriggerStatistics resetPHSRejectCount]
  -[CSVoiceTriggerStatistics voiceTriggerDidDetectNearMiss:deviceId:]
  -[CSVoiceTriggerStatistics getVTRejectCount]
  -[CSVoiceTriggerStatistics increaseTriggerCount]
  -[CSVoiceTriggerStatistics triggerCount]
  -[CSVoiceTriggerStatistics getPHSRejectCount]
  -[CSVoiceTriggerStatistics clearTriggerCount]


CSSiriMobileBluetoothDeviceDataSource : NSObject <AFInvalidating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSiriMobileBluetoothDeviceDataSource _tearDownLocalDevice]
  -[CSSiriMobileBluetoothDeviceDataSource localDevice:event:result:]
  -[CSSiriMobileBluetoothDeviceDataSource _sessionAttached:result:]
  -[CSSiriMobileBluetoothDeviceDataSource .cxx_destruct]
  -[CSSiriMobileBluetoothDeviceDataSource _setUpLocalDevice]
  -[CSSiriMobileBluetoothDeviceDataSource _sessionTerminated:]
  -[CSSiriMobileBluetoothDeviceDataSource init]
  -[CSSiriMobileBluetoothDeviceDataSource getBTLocalDeviceWithCompletion:]
  -[CSSiriMobileBluetoothDeviceDataSource invalidate]
  -[CSSiriMobileBluetoothDeviceDataSource device:serviceMask:serviceEventType:serviceSpecificEvent:result:]
  -[CSSiriMobileBluetoothDeviceDataSource _sessionDetached:]
  -[CSSiriMobileBluetoothDeviceDataSource deviceWithAddress:]
  -[CSSiriMobileBluetoothDeviceDataSource deviceWithUID:]
  -[CSSiriMobileBluetoothDeviceDataSource _attachToSession]
  -[CSSiriMobileBluetoothDeviceDataSource _cleanUpDeviceProxies]
  -[CSSiriMobileBluetoothDeviceDataSource _detachFromSession]
  -[CSSiriMobileBluetoothDeviceDataSource _tearDownAccessoryManager]
  -[CSSiriMobileBluetoothDeviceDataSource _setUpAccessoryManager]
  -[CSSiriMobileBluetoothDeviceDataSource _deviceProxies]
  -[CSSiriMobileBluetoothDeviceDataSource _reloadForDevice:]
  -[CSSiriMobileBluetoothDeviceDataSource _deviceProxyWithAddress:createsIfAbsent:]
  -[CSSiriMobileBluetoothDeviceDataSource _deviceProxyWithUID:createsIfAbsent:]
  -[CSSiriMobileBluetoothDeviceDataSource accessoryManager:event:device:state:]
  -[CSSiriMobileBluetoothDeviceDataSource getBTDeviceWithAddress:completion:]
  -[CSSiriMobileBluetoothDeviceDataSource getBTDeviceWithDeviceUID:completion:]


CSSiriMobileBluetoothDeviceProxy : NSObject <AFBluetoothDevice, AFInvalidating>
 @property  NSString *address
 @property  NSUUID *deviceUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSiriMobileBluetoothDeviceProxy deviceInfo]
  -[CSSiriMobileBluetoothDeviceProxy connect:]
  -[CSSiriMobileBluetoothDeviceProxy .cxx_destruct]
  -[CSSiriMobileBluetoothDeviceProxy address]
  -[CSSiriMobileBluetoothDeviceProxy getDeviceInfo:]
  -[CSSiriMobileBluetoothDeviceProxy identifier]
  -[CSSiriMobileBluetoothDeviceProxy addObserver:]
  -[CSSiriMobileBluetoothDeviceProxy disconnect:]
  -[CSSiriMobileBluetoothDeviceProxy _invalidate]
  -[CSSiriMobileBluetoothDeviceProxy dealloc]
  -[CSSiriMobileBluetoothDeviceProxy invalidate]
  -[CSSiriMobileBluetoothDeviceProxy removeObserver:]
  -[CSSiriMobileBluetoothDeviceProxy _reload:]
  -[CSSiriMobileBluetoothDeviceProxy prewarm]
  -[CSSiriMobileBluetoothDeviceProxy deviceUID]
  -[CSSiriMobileBluetoothDeviceProxy reload]
  -[CSSiriMobileBluetoothDeviceProxy _enumerateObserversUsingBlock:]
  -[CSSiriMobileBluetoothDeviceProxy initWithAddress:dataSource:queue:]
  -[CSSiriMobileBluetoothDeviceProxy initWithDeviceUID:dataSource:queue:]
  -[CSSiriMobileBluetoothDeviceProxy _updateDeviceInfo:]
  -[CSSiriMobileBluetoothDeviceProxy _fetchDeviceInfoWithCompletion:]
  -[CSSiriMobileBluetoothDeviceProxy _getDeviceInfo:]
  -[CSSiriMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]
  -[CSSiriMobileBluetoothDeviceProxy getHeadphoneInEarDetectionState:]
  -[CSSiriMobileBluetoothDeviceProxy getHeadphoneListeningMode:]
  -[CSSiriMobileBluetoothDeviceProxy setHeadphoneListeningMode:completion:]
  -[CSSiriMobileBluetoothDeviceProxy updateDeviceInfo:]


CSFirstUnlockMonitor : CSEventMonitor
  // class methods
  +[CSFirstUnlockMonitor sharedInstance]

  // instance methods
  -[CSFirstUnlockMonitor _stopMonitoring]
  -[CSFirstUnlockMonitor _notifyObserver:withUnlocked:]
  -[CSFirstUnlockMonitor _didReceiveFirstUnlock:]
  -[CSFirstUnlockMonitor _didReceiveFirstUnlockInQueue:]
  -[CSFirstUnlockMonitor _startMonitoringWithQueue:]
  -[CSFirstUnlockMonitor init]
  -[CSFirstUnlockMonitor isFirstUnlocked]
  -[CSFirstUnlockMonitor _firstUnlockNotified]
  -[CSFirstUnlockMonitor _checkFirstUnlocked]


CSPhraseSpotterEnabledMonitor : CSEventMonitor
  // class methods
  +[CSPhraseSpotterEnabledMonitor sharedInstance]

  // instance methods
  -[CSPhraseSpotterEnabledMonitor _stopMonitoring]
  -[CSPhraseSpotterEnabledMonitor _phraseSpotterEnabledDidChange]
  -[CSPhraseSpotterEnabledMonitor _startMonitoringWithQueue:]
  -[CSPhraseSpotterEnabledMonitor init]
  -[CSPhraseSpotterEnabledMonitor isEnabled]
  -[CSPhraseSpotterEnabledMonitor _notifyObserver:withEnabled:]
  -[CSPhraseSpotterEnabledMonitor _checkPhraseSpotterEnabled]
  -[CSPhraseSpotterEnabledMonitor _didReceivePhraseSpotterSettingChangedInQueue:]


CSVoiceIdXPCConnection : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_xpc_object> *connection

  // instance methods
  -[CSVoiceIdXPCConnection .cxx_destruct]
  -[CSVoiceIdXPCConnection setConnection:]
  -[CSVoiceIdXPCConnection setQueue:]
  -[CSVoiceIdXPCConnection initWithConnection:]
  -[CSVoiceIdXPCConnection connection]
  -[CSVoiceIdXPCConnection queue]
  -[CSVoiceIdXPCConnection activateConnection]
  -[CSVoiceIdXPCConnection _handleClientEvent:]
  -[CSVoiceIdXPCConnection _handleClientMessage:client:]
  -[CSVoiceIdXPCConnection _handleClientError:client:]
  -[CSVoiceIdXPCConnection _sendReplyMessageWithResult:error:event:client:]


CSVoiceTriggerAlwaysOnProcessor : NSObject
  // instance methods
  -[CSVoiceTriggerAlwaysOnProcessor .cxx_destruct]
  -[CSVoiceTriggerAlwaysOnProcessor disableVoiceTriggerOnAlwaysOnProcessorWithCompletion:]
  -[CSVoiceTriggerAlwaysOnProcessor init]
  -[CSVoiceTriggerAlwaysOnProcessor enableVoiceTriggerOnAlwaysOnProcessorWithAsset:completion:]
  -[CSVoiceTriggerAlwaysOnProcessor _setBuiltInRTModelDictionary:]


CSSiriPreferences : NSObject
  // class methods
  +[CSSiriPreferences sharedPreferences]

  // instance methods
  -[CSSiriPreferences initWithInstanceContext:]
  -[CSSiriPreferences .cxx_destruct]
  -[CSSiriPreferences init]
  -[CSSiriPreferences internalUserClassification]
  -[CSSiriPreferences overrideAudioSessionActiveDelay]
  -[CSSiriPreferences serverMediaPlaybackVolumeThresholdForAudioSessionActivationDelay]
  -[CSSiriPreferences serverAudioSessionActivationDelayAboveMediaPlaybackVolumeThreshold]
  -[CSSiriPreferences serverAudioSessionActivationDelay]


CSVoiceTriggerInfo : NSObject
 @property  long long firstPassRunningMode

  // class methods
  +[CSVoiceTriggerInfo sharedInstance]

  // instance methods
  -[CSVoiceTriggerInfo init]
  -[CSVoiceTriggerInfo setFirstPassRunningMode:]
  -[CSVoiceTriggerInfo firstPassRunningMode]


CSFallbackAudioSessionReleaseProvider : NSObject <CSAudioRecorderDelegate, CSFallbackAudioSessionReleaseProviding>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAudioRecorder *audioRecorder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSFallbackAudioSessionReleaseProvider setAudioRecorder:]
  -[CSFallbackAudioSessionReleaseProvider .cxx_destruct]
  -[CSFallbackAudioSessionReleaseProvider audioRecorderBufferAvailable:audioStreamHandleId:buffer:]
  -[CSFallbackAudioSessionReleaseProvider fallbackDeactivateAudioSession:error:]
  -[CSFallbackAudioSessionReleaseProvider setQueue:]
  -[CSFallbackAudioSessionReleaseProvider audioRecorderBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:]
  -[CSFallbackAudioSessionReleaseProvider initWithAudioRecorder:]
  -[CSFallbackAudioSessionReleaseProvider queue]
  -[CSFallbackAudioSessionReleaseProvider audioRecorder]
  -[CSFallbackAudioSessionReleaseProvider audioRecorderWillBeDestroyed:]


CSSPGEndpointAnalyzer : NSObject <EARCaesuraSilencePosteriorGeneratorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  EARCaesuraSilencePosteriorGenerator *caesuraSPG
 @property  float endpointThreshold
 @property  BOOL hasReported
 @property  BOOL isAnalyzeMode
 @property  double lastSilencePosterior
 @property  <CSSPGEndpointAnalyzerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSPGEndpointAnalyzer .cxx_destruct]
  -[CSSPGEndpointAnalyzer stop]
  -[CSSPGEndpointAnalyzer setDelegate:]
  -[CSSPGEndpointAnalyzer init]
  -[CSSPGEndpointAnalyzer setQueue:]
  -[CSSPGEndpointAnalyzer reset]
  -[CSSPGEndpointAnalyzer delegate]
  -[CSSPGEndpointAnalyzer queue]
  -[CSSPGEndpointAnalyzer start]
  -[CSSPGEndpointAnalyzer dealloc]
  -[CSSPGEndpointAnalyzer addAudio:numSamples:]
  -[CSSPGEndpointAnalyzer clientSilenceFeaturesAvailable:]
  -[CSSPGEndpointAnalyzer silenceDurationEstimateAvailable:numEstimates:clientProcessedAudioMs:]
  -[CSSPGEndpointAnalyzer initWithAnalyzeMode]
  -[CSSPGEndpointAnalyzer getFrameDurationMs]
  -[CSSPGEndpointAnalyzer initWithEndpointThreshold:]
  -[CSSPGEndpointAnalyzer caesuraSPG]
  -[CSSPGEndpointAnalyzer setCaesuraSPG:]
  -[CSSPGEndpointAnalyzer endpointThreshold]
  -[CSSPGEndpointAnalyzer setEndpointThreshold:]
  -[CSSPGEndpointAnalyzer hasReported]
  -[CSSPGEndpointAnalyzer setHasReported:]
  -[CSSPGEndpointAnalyzer isAnalyzeMode]
  -[CSSPGEndpointAnalyzer setIsAnalyzeMode:]
  -[CSSPGEndpointAnalyzer lastSilencePosterior]
  -[CSSPGEndpointAnalyzer setLastSilencePosterior:]


CSSiriAcousticFingerprinter : NSObject
 @property  <CSSiriAcousticFingerprinterDelegate> *delegate

  // instance methods
  -[CSSiriAcousticFingerprinter _connection]
  -[CSSiriAcousticFingerprinter _serviceWithErrorHandler:]
  -[CSSiriAcousticFingerprinter .cxx_destruct]
  -[CSSiriAcousticFingerprinter setDelegate:]
  -[CSSiriAcousticFingerprinter init]
  -[CSSiriAcousticFingerprinter flush]
  -[CSSiriAcousticFingerprinter reset]
  -[CSSiriAcousticFingerprinter _cleanUpConnection]
  -[CSSiriAcousticFingerprinter delegate]
  -[CSSiriAcousticFingerprinter _service]
  -[CSSiriAcousticFingerprinter dealloc]
  -[CSSiriAcousticFingerprinter _connectionInvalidated]
  -[CSSiriAcousticFingerprinter setASBD:]
  -[CSSiriAcousticFingerprinter _connectionInterrupted]
  -[CSSiriAcousticFingerprinter _samplesPerInterval]
  -[CSSiriAcousticFingerprinter _configureWithCurrentASBD]
  -[CSSiriAcousticFingerprinter _needsConversion]
  -[CSSiriAcousticFingerprinter _convertPCMDataForFingerprinting:]
  -[CSSiriAcousticFingerprinter setFingerprintInterval:]
  -[CSSiriAcousticFingerprinter appendPCMData:]


CSLanguageDetectorOption : NSObject
 @property  float samplingRate
 @property  NSSet *dictationLanguages
 @property  NSString *currentKeyboard
 @property  BOOL wasLanguageToggled
 @property  NSArray *multilingualKeyboardLanguages
 @property  NSDictionary *keyboardConvoLanguagePriors
 @property  NSDictionary *keyboardGlobalLanguagePriors
 @property  NSString *previousMessageLanguage
 @property  NSString *globalLastKeyboardUsed
 @property  NSDictionary *dictationLanguagePriors
 @property  NSArray *conversationalMessages

  // instance methods
  -[CSLanguageDetectorOption setSamplingRate:]
  -[CSLanguageDetectorOption samplingRate]
  -[CSLanguageDetectorOption .cxx_destruct]
  -[CSLanguageDetectorOption setCurrentKeyboard:]
  -[CSLanguageDetectorOption setWasLanguageToggled:]
  -[CSLanguageDetectorOption setDictationLanguages:]
  -[CSLanguageDetectorOption currentKeyboard]
  -[CSLanguageDetectorOption dictationLanguages]
  -[CSLanguageDetectorOption setKeyboardGlobalLanguagePriors:]
  -[CSLanguageDetectorOption wasLanguageToggled]
  -[CSLanguageDetectorOption keyboardGlobalLanguagePriors]
  -[CSLanguageDetectorOption setDictationLanguagePriors:]
  -[CSLanguageDetectorOption languageDetectorRequestContext]
  -[CSLanguageDetectorOption setMultilingualKeyboardLanguages:]
  -[CSLanguageDetectorOption setKeyboardConvoLanguagePriors:]
  -[CSLanguageDetectorOption setPreviousMessageLanguage:]
  -[CSLanguageDetectorOption setGlobalLastKeyboardUsed:]
  -[CSLanguageDetectorOption setConversationalMessages:]
  -[CSLanguageDetectorOption multilingualKeyboardLanguages]
  -[CSLanguageDetectorOption keyboardConvoLanguagePriors]
  -[CSLanguageDetectorOption previousMessageLanguage]
  -[CSLanguageDetectorOption globalLastKeyboardUsed]
  -[CSLanguageDetectorOption dictationLanguagePriors]
  -[CSLanguageDetectorOption conversationalMessages]


CSSiriSpeechRecorder : NSObject <CSSiriAcousticFingerprinterDelegate, CSSpeechControllerDelegate, CSEndpointAnalyzerDelegate, CSLanguageDetectorDelegate, CSSpeakerIdentificationDelegate, CSAudioSessionControllerDelegate, CSSiriSpeechCapturing>
 @property  BOOL suppressInterruptionEndedNotifications
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSiriSpeechRecorder preheat]
  -[CSSiriSpeechRecorder speechController:willSetAudioSessionActive:]
  -[CSSiriSpeechRecorder acousticFingerprinter:hasFingerprint:duration:]
  -[CSSiriSpeechRecorder speechControllerLPCMRecordBufferAvailable:buffer:]
  -[CSSiriSpeechRecorder setIsDriving:]
  -[CSSiriSpeechRecorder _fingerprinter]
  -[CSSiriSpeechRecorder _resetSpeechController]
  -[CSSiriSpeechRecorder speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:]
  -[CSSiriSpeechRecorder speechControllerDidDeliverLastBuffer:forReason:estimatedSpeechEndHostTime:]
  -[CSSiriSpeechRecorder convertSISchemaAudioInputRouteToMHRoute:withRecordingInfo:]
  -[CSSiriSpeechRecorder _handleFakeTwoShotPromptCallbackWithUUID:timestamp:duration:error:]
  -[CSSiriSpeechRecorder fetchAudioDeviceInfo]
  -[CSSiriSpeechRecorder _audioDeviceID]
  -[CSSiriSpeechRecorder setFingerprintingEnabled:]
  -[CSSiriSpeechRecorder setSpeechWasRecognizedForElapsedTime:isFinal:]
  -[CSSiriSpeechRecorder releaseAudioSession]
  -[CSSiriSpeechRecorder _setupAudioFileWritingForSpeechController:info:context:]
  -[CSSiriSpeechRecorder _updateAudioContextToPostVoiceForReason:]
  -[CSSiriSpeechRecorder currentVTSatScore]
  -[CSSiriSpeechRecorder .cxx_destruct]
  -[CSSiriSpeechRecorder _stopRecordingForEndpointReason:]
  -[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionOwnerResetNotification:]
  -[CSSiriSpeechRecorder _setAudioDuckingEnabled:]
  -[CSSiriSpeechRecorder updateServerEndpointFeatures:]
  -[CSSiriSpeechRecorder prepareForMode:]
  -[CSSiriSpeechRecorder setAudioFileType:]
  -[CSSiriSpeechRecorder setSuppressInterruptionEndedNotifications:]
  -[CSSiriSpeechRecorder prepareSpeechCaptureWithOptions:error:]
  -[CSSiriSpeechRecorder _cancelExtendedEndpointTimer]
  -[CSSiriSpeechRecorder _updateAudioDeviceInfo:forReason:forcesUpdate:]
  -[CSSiriSpeechRecorder _updateAudioContextWithPendingInfoForReason:]
  -[CSSiriSpeechRecorder speechControllerRequestsOperation:forReason:]
  -[CSSiriSpeechRecorder _logVoiceTriggerInfo:withMHUUID:]
  -[CSSiriSpeechRecorder setSpeechRecognizedContext:]
  -[CSSiriSpeechRecorder startSpeechCaptureWithContext:willStartHandler:error:]
  -[CSSiriSpeechRecorder suspendAutomaticEndpointingInRange:]
  -[CSSiriSpeechRecorder _playStopAlertIfNecessaryForReason:endpointMode:error:]
  -[CSSiriSpeechRecorder setDelegate:]
  -[CSSiriSpeechRecorder getLastStartpointTimestampAndCurrentTime:]
  -[CSSiriSpeechRecorder speechControllerDidUpdateSmartSiriVolume:forReason:]
  -[CSSiriSpeechRecorder _speechControllerDidStartRecording:successfully:error:]
  -[CSSiriSpeechRecorder _performTwoShotPromptForType:atTime:]
  -[CSSiriSpeechRecorder _speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:atHostTime:mhUUID:]
  -[CSSiriSpeechRecorder _updateAudioContextWithInfo:reason:]
  -[CSSiriSpeechRecorder speechControllerRecordHardwareConfigurationDidChange:toConfiguration:]
  -[CSSiriSpeechRecorder _logAudioMetrics:mhUUID:]
  -[CSSiriSpeechRecorder _logFanState]
  -[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]
  -[CSSiriSpeechRecorder _currentMHUUID:]
  -[CSSiriSpeechRecorder _speechController]
  -[CSSiriSpeechRecorder initWithQueue:speechController:audioSessionController:audioPlaybackService:experimentContext:]
  -[CSSiriSpeechRecorder _getFanInfoArray]
  -[CSSiriSpeechRecorder _hardEndpointWasDetectedWithMetrics:atTime:]
  -[CSSiriSpeechRecorder playRecordingStartAlert]
  -[CSSiriSpeechRecorder speechControllerDidFinishAlertPlayback:ofType:error:]
  -[CSSiriSpeechRecorder _setAudioContextWithInfo:forReason:]
  -[CSSiriSpeechRecorder setEARLanguageDetectorSpeechRequestId:]
  -[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]
  -[CSSiriSpeechRecorder suppressUtteranceGradingIfRequired]
  -[CSSiriSpeechRecorder updateSpeechSynthesisRecord:]
  -[CSSiriSpeechRecorder _speechControllerWithError:]
  -[CSSiriSpeechRecorder _enforceEndpointHint]
  -[CSSiriSpeechRecorder setFingerprintWasRecognized]
  -[CSSiriSpeechRecorder disableSpeechPacketGeneration:]
  -[CSSiriSpeechRecorder speakerIdentificationDidDetectSpeakerWithScores:]
  -[CSSiriSpeechRecorder performBlockAfterAlerts:timeout:]
  -[CSSiriSpeechRecorder _speechRecordingEventListener]
  -[CSSiriSpeechRecorder speechControllerDidDetectVoiceTriggerTwoShot:atTime:]
  -[CSSiriSpeechRecorder _currentPlaybackRoute]
  -[CSSiriSpeechRecorder recordingInfoForPreheatWithEvent:]
  -[CSSiriSpeechRecorder speechControllerBeginRecordInterruption:withContext:]
  -[CSSiriSpeechRecorder setEndpointerThreshold:]
  -[CSSiriSpeechRecorder eagerlyInitializeAudioRecording]
  -[CSSiriSpeechRecorder _currentRecordDeviceInfo]
  -[CSSiriSpeechRecorder speechControllerDidStartRecording:audioDeviceInfo:successfully:error:]
  -[CSSiriSpeechRecorder _speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:errorCodeOverride:underlyingError:]
  -[CSSiriSpeechRecorder speechControllerRequestsOperation:forReason:completion:]
  -[CSSiriSpeechRecorder getAudioRouteInstrumentationWithRecordingInfo:]
  -[CSSiriSpeechRecorder endpointer:didDetectStartpointAtTime:]
  -[CSSiriSpeechRecorder _audioSessionID]
  -[CSSiriSpeechRecorder _setLanguageDetectorDelegateIfRequired]
  -[CSSiriSpeechRecorder convertVirtualAudioSubTypeToString:]
  -[CSSiriSpeechRecorder _setSpeechCapturingMode:]
  -[CSSiriSpeechRecorder _currentRecordingInfo]
  -[CSSiriSpeechRecorder _checkAudioLoggingLimits:]
  -[CSSiriSpeechRecorder _setEndpointerOperationMode:forceUpdate:]
  -[CSSiriSpeechRecorder setSpeechRecordingEventListeningEndpoint:]
  -[CSSiriSpeechRecorder _setAlertsIfNeeded]
  -[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
  -[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:]
  -[CSSiriSpeechRecorder languageDetectorDidDetectLanguageWithConfidence:confidence:isConfident:]
  -[CSSiriSpeechRecorder fetchRecordingInfo]
  -[CSSiriSpeechRecorder speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:audioDeviceInfo:]
  -[CSSiriSpeechRecorder _checkIfLastEndpointHintShouldBeAccepted]
  -[CSSiriSpeechRecorder setClientConfiguration:]
  -[CSSiriSpeechRecorder _shouldEmitInstrumentation]
  -[CSSiriSpeechRecorder speechController:didSetAudioSessionActive:]
  -[CSSiriSpeechRecorder _stopRecordingWithReason:hostTime:]
  -[CSSiriSpeechRecorder enforcePreviousEndpointHint]
  -[CSSiriSpeechRecorder fetchAudioSessionID]
  -[CSSiriSpeechRecorder _speechControllerRequestsOperation:forReason:completion:]
  -[CSSiriSpeechRecorder cancelSpeechCaptureSuppressingAlert:]
  -[CSSiriSpeechRecorder _playPhaticWithCompletion:]
  -[CSSiriSpeechRecorder _startAudioPlaybackRequest:options:completion:]
  -[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionOwnerLostNotification:]
  -[CSSiriSpeechRecorder updateEndpointHintForDuration:completion:]
  -[CSSiriSpeechRecorder dealloc]
  -[CSSiriSpeechRecorder speechControllerEndRecordInterruption:]
  -[CSSiriSpeechRecorder _scheduleExtendedEndpointTimer]
  -[CSSiriSpeechRecorder _recordingInfoForEvent:audioAlertStyle:includeBTInfo:includeRecordDeviceInfo:]
  -[CSSiriSpeechRecorder _logBluetoothStateWithMHUUID:]
  -[CSSiriSpeechRecorder suppressInterruptionEndedNotifications]
  -[CSSiriSpeechRecorder _setEndpointStyle:]
  -[CSSiriSpeechRecorder speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:]
  -[CSSiriSpeechRecorder _handleFakeTwoShotPromptTimeoutWithUUID:]
  -[CSSiriSpeechRecorder _updateRecordBufferDuration]
  -[CSSiriSpeechRecorder _setDictationAudioModeEnabled:]
  -[CSSiriSpeechRecorder _clearEndpointHint]
  -[CSSiriSpeechRecorder preheatWithOption:]
  -[CSSiriSpeechRecorder _mapInstrumentationEndpointTypeFromStopRecordingReason:]
  -[CSSiriSpeechRecorder _currentRecordRoute]
  -[CSSiriSpeechRecorder setEndpointerDelayedTrigger:]
  -[CSSiriSpeechRecorder _prepareSpeechControllerWithOptions:error:]
  -[CSSiriSpeechRecorder setAudioFileHandle:]
  -[CSSiriSpeechRecorder setSpeechRequestOptions:]
  -[CSSiriSpeechRecorder _disableEndpointer]
  -[CSSiriSpeechRecorder forceSuccessAudioAlertOnStop]
  -[CSSiriSpeechRecorder endpointer:didDetectHardEndpointAtTime:withMetrics:]
  -[CSSiriSpeechRecorder _playAudioAlert:]
  -[CSSiriSpeechRecorder _speechControllerDidReceiveLastAudioRecordBuffer:forReason:estimatedSpeechEndHostTime:isRecordingStopped:]
  -[CSSiriSpeechRecorder stopSpeechCaptureForEvent:suppressAlert:hostTime:]


CSSiriAudioPlaybackService : NSObject <AFMemoryPressureListening, CSAudioSessionControllerDelegate, AFAudioPlaybackService>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSSiriAudioPlaybackService sharedService]

  // instance methods
  -[CSSiriAudioPlaybackService removeListener:]
  -[CSSiriAudioPlaybackService _enumerateListenersUsingBlock:]
  -[CSSiriAudioPlaybackService _evictAllReusableSessionsForReason:]
  -[CSSiriAudioPlaybackService _stopAllRequests:completion:]
  -[CSSiriAudioPlaybackService stopRequest:immediately:]
  -[CSSiriAudioPlaybackService _stopAllRequestsSynchronously]
  -[CSSiriAudioPlaybackService _handleFinalizationForSession:error:]
  -[CSSiriAudioPlaybackService .cxx_destruct]
  -[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionOwnerResetNotification:]
  -[CSSiriAudioPlaybackService _prewarmRequest:completion:]
  -[CSSiriAudioPlaybackService _stopRequest:immediately:]
  -[CSSiriAudioPlaybackService _setAudioSessionID:]
  -[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]
  -[CSSiriAudioPlaybackService startRequest:options:preparationHandler:executionHandler:finalizationHandler:]
  -[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]
  -[CSSiriAudioPlaybackService _createAudioPlaybackSessionWithRequest:options:]
  -[CSSiriAudioPlaybackService memoryPressureObserver:didChangeFromCondition:toCondition:]
  -[CSSiriAudioPlaybackService removeAllListeners]
  -[CSSiriAudioPlaybackService _handleExecutionForSession:]
  -[CSSiriAudioPlaybackService prewarmRequest:completion:]
  -[CSSiriAudioPlaybackService _audioSessionID]
  -[CSSiriAudioPlaybackService _invalidate]
  -[CSSiriAudioPlaybackService stopAllRequests:completion:]
  -[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
  -[CSSiriAudioPlaybackService addListener:]
  -[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionOwnerLostNotification:]
  -[CSSiriAudioPlaybackService initWithAudioSessionController:]
  -[CSSiriAudioPlaybackService _audioSession]
  -[CSSiriAudioPlaybackService _startRequest:options:preparationHandler:executionHandler:finalizationHandler:]
  -[CSSiriAudioPlaybackService stopAllRequestsSynchronously]
  -[CSSiriAudioPlaybackService startRequest:options:completion:]
  -[CSSiriAudioPlaybackService _handlePreparationForSession:]


CSTrialAssetManager : NSObject
  // class methods
  +[CSTrialAssetManager sharedInstance]

  // instance methods
  -[CSTrialAssetManager .cxx_destruct]
  -[CSTrialAssetManager init]
  -[CSTrialAssetManager getInstalledAssetofType:forLocale:completion:]
  -[CSTrialAssetManager _getSiriAttAssetsForType:forLocale:completion:]


CSStartOfSpeechDetector : NSObject <EARCaesuraSilencePosteriorGeneratorDelegate>
 @property  EARCaesuraSilencePosteriorGenerator *caesuraSPG
 @property  NSString *configFile
 @property  BOOL startDetected
 @property  unsigned long minSpeechFrames
 @property  unsigned long curSpeechFrames
 @property  unsigned long numLeadingFrames
 @property  float prevAudioProcessedMs
 @property  unsigned long samplingRate
 @property  NSObject<OS_dispatch_queue> *spgQueue
 @property  NSObject<OS_dispatch_queue> *sosQueue
 @property  <CSStartOfSpeechDetectorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSStartOfSpeechDetector setSamplingRate:]
  -[CSStartOfSpeechDetector samplingRate]
  -[CSStartOfSpeechDetector .cxx_destruct]
  -[CSStartOfSpeechDetector setDelegate:]
  -[CSStartOfSpeechDetector endAudio]
  -[CSStartOfSpeechDetector delegate]
  -[CSStartOfSpeechDetector spgQueue]
  -[CSStartOfSpeechDetector sosQueue]
  -[CSStartOfSpeechDetector addAudio:numSamples:]
  -[CSStartOfSpeechDetector clientSilenceFeaturesAvailable:]
  -[CSStartOfSpeechDetector resetForNewRequest]
  -[CSStartOfSpeechDetector initWithConfig:samplingRate:minSpeechFrames:numLeadingFrames:delegate:]
  -[CSStartOfSpeechDetector caesuraSPG]
  -[CSStartOfSpeechDetector setCaesuraSPG:]
  -[CSStartOfSpeechDetector configFile]
  -[CSStartOfSpeechDetector setConfigFile:]
  -[CSStartOfSpeechDetector startDetected]
  -[CSStartOfSpeechDetector setStartDetected:]
  -[CSStartOfSpeechDetector minSpeechFrames]
  -[CSStartOfSpeechDetector setMinSpeechFrames:]
  -[CSStartOfSpeechDetector curSpeechFrames]
  -[CSStartOfSpeechDetector setCurSpeechFrames:]
  -[CSStartOfSpeechDetector numLeadingFrames]
  -[CSStartOfSpeechDetector setNumLeadingFrames:]
  -[CSStartOfSpeechDetector prevAudioProcessedMs]
  -[CSStartOfSpeechDetector setPrevAudioProcessedMs:]
  -[CSStartOfSpeechDetector setSpgQueue:]
  -[CSStartOfSpeechDetector setSosQueue:]


CSAudioServerCrashMonitor : CSEventMonitor <CSAudioServerCrashEventProvidingDelegate>
 @property  unsigned long serverState
 @property  AVVoiceTriggerClient *alwaysOnProcessorController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAudioServerCrashMonitor sharedInstance]

  // instance methods
  -[CSAudioServerCrashMonitor .cxx_destruct]
  -[CSAudioServerCrashMonitor _didReceiveMediaserverNotification:]
  -[CSAudioServerCrashMonitor serverState]
  -[CSAudioServerCrashMonitor _startMonitoringWithQueue:]
  -[CSAudioServerCrashMonitor init]
  -[CSAudioServerCrashMonitor audioServerCrashEventProvidingLostMediaserverd]
  -[CSAudioServerCrashMonitor alwaysOnProcessorController]
  -[CSAudioServerCrashMonitor setAlwaysOnProcessorController:]
  -[CSAudioServerCrashMonitor setServerState:]
  -[CSAudioServerCrashMonitor _notifyObserver:withMediaserverState:]
  -[CSAudioServerCrashMonitor _mediaserverdDidRestart]


CSVoiceTriggerXPCClient : NSObject
 @property  NSObject<OS_xpc_object> *xpcConnection
 @property  <CSVoiceTriggerXPCClientDelegate> *delegate

  // instance methods
  -[CSVoiceTriggerXPCClient connect]
  -[CSVoiceTriggerXPCClient setXpcConnection:]
  -[CSVoiceTriggerXPCClient xpcConnection]
  -[CSVoiceTriggerXPCClient notifyVoiceTriggeredSiriSessionCancelled]
  -[CSVoiceTriggerXPCClient .cxx_destruct]
  -[CSVoiceTriggerXPCClient enableVoiceTrigger:withAssertion:timestamp:]
  -[CSVoiceTriggerXPCClient _handleListenerEvent:]
  -[CSVoiceTriggerXPCClient setRaiseToSpeakBypassing:timeout:]
  -[CSVoiceTriggerXPCClient setDelegate:]
  -[CSVoiceTriggerXPCClient _handleListenerError:]
  -[CSVoiceTriggerXPCClient init]
  -[CSVoiceTriggerXPCClient _sendMessage:connection:completion:]
  -[CSVoiceTriggerXPCClient delegate]
  -[CSVoiceTriggerXPCClient fetchVoiceTriggerStats]
  -[CSVoiceTriggerXPCClient dealloc]
  -[CSVoiceTriggerXPCClient setPhraseSpotterBypassing:timeout:]
  -[CSVoiceTriggerXPCClient _handleListenerDisconnectedError:]


CSCoreSpeechDaemonStateMonitor : CSEventMonitor
  // class methods
  +[CSCoreSpeechDaemonStateMonitor sharedInstance]

  // instance methods
  -[CSCoreSpeechDaemonStateMonitor _stopMonitoring]
  -[CSCoreSpeechDaemonStateMonitor _notifyObserver:withDaemonState:]
  -[CSCoreSpeechDaemonStateMonitor notifyDaemonStateChanged:]
  -[CSCoreSpeechDaemonStateMonitor _startMonitoringWithQueue:]
  -[CSCoreSpeechDaemonStateMonitor init]
  -[CSCoreSpeechDaemonStateMonitor _didReceiveDaemonStateChanged:]


CSKeywordAnalyzerQuasar : NSObject <_EARSpeechRecognitionResultStream>
 @property  NSDictionary *ctcKwdToPhraseIdMap
 @property  double triggerConfidence
 @property  unsigned long activeChannel
 @property  <CSKeywordAnalyzerQuasarScoreDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSKeywordAnalyzerQuasar setActiveChannel:]
  -[CSKeywordAnalyzerQuasar processAudioChunk:]
  -[CSKeywordAnalyzerQuasar .cxx_destruct]
  -[CSKeywordAnalyzerQuasar setDelegate:]
  -[CSKeywordAnalyzerQuasar activeChannel]
  -[CSKeywordAnalyzerQuasar reset]
  -[CSKeywordAnalyzerQuasar endAudio]
  -[CSKeywordAnalyzerQuasar delegate]
  -[CSKeywordAnalyzerQuasar dealloc]
  -[CSKeywordAnalyzerQuasar speechRecognizer:didRecognizePartialResult:]
  -[CSKeywordAnalyzerQuasar speechRecognizer:didFinishRecognitionWithError:]
  -[CSKeywordAnalyzerQuasar speechRecognizer:didRecognizeFinalResults:]
  -[CSKeywordAnalyzerQuasar _getConfidence:]
  -[CSKeywordAnalyzerQuasar triggerConfidence]
  -[CSKeywordAnalyzerQuasar ctcKwdToPhraseIdMap]
  -[CSKeywordAnalyzerQuasar setCtcKwdToPhraseIdMap:]
  -[CSKeywordAnalyzerQuasar _recognizeWavData:length:]
  -[CSKeywordAnalyzerQuasar _phraseIdToCtcScoreMap]
  -[CSKeywordAnalyzerQuasar initWithConfigPath:triggerTokens:useKeywordSpotting:]
  -[CSKeywordAnalyzerQuasar runRecognition]


CSNetworkAvailabilityMonitor : CSEventMonitor
  // class methods
  +[CSNetworkAvailabilityMonitor sharedInstance]

  // instance methods
  -[CSNetworkAvailabilityMonitor _stopMonitoring]
  -[CSNetworkAvailabilityMonitor _availabilityChanged]
  -[CSNetworkAvailabilityMonitor _didReceivedNetworkAvailabilityChangedNotification:]
  -[CSNetworkAvailabilityMonitor isAvailable]
  -[CSNetworkAvailabilityMonitor _startMonitoringWithQueue:]
  -[CSNetworkAvailabilityMonitor init]
  -[CSNetworkAvailabilityMonitor _notifyObserver:withNetworkAvailability:]


CSSpeechDetectionDevicePresentMonitor : CSEventMonitor
  // class methods
  +[CSSpeechDetectionDevicePresentMonitor sharedInstance]

  // instance methods
  -[CSSpeechDetectionDevicePresentMonitor _stopMonitoring]
  -[CSSpeechDetectionDevicePresentMonitor isPresent]
  -[CSSpeechDetectionDevicePresentMonitor handleSpeechDetectionVADPresentChange:]
  -[CSSpeechDetectionDevicePresentMonitor _startObservingSystemControllerLifecycle]
  -[CSSpeechDetectionDevicePresentMonitor _startMonitoringWithQueue:]
  -[CSSpeechDetectionDevicePresentMonitor init]
  -[CSSpeechDetectionDevicePresentMonitor _systemControllerDied:]
  -[CSSpeechDetectionDevicePresentMonitor _startObservingSpeechDetectionVADPresence]


CSLanguageCodeUpdateMonitorImplDarwin : CSLanguageCodeUpdateMonitor
  // instance methods
  -[CSLanguageCodeUpdateMonitorImplDarwin _stopMonitoring]
  -[CSLanguageCodeUpdateMonitorImplDarwin notifySiriLanguageCodeChanged:]
  -[CSLanguageCodeUpdateMonitorImplDarwin .cxx_destruct]
  -[CSLanguageCodeUpdateMonitorImplDarwin _notifyObserver:withLanguageCode:]
  -[CSLanguageCodeUpdateMonitorImplDarwin _startMonitoringWithQueue:]
  -[CSLanguageCodeUpdateMonitorImplDarwin init]
  -[CSLanguageCodeUpdateMonitorImplDarwin _didReceiveLanguageCodeUpdate:]


CSAttSiriMitigationAssetHandler : NSObject <CSVoiceTriggerAssetHandlerDelegate, CSTrialAssetDownloadMonitorDelegate>
 @property  CSAsset *cachedAsset
 @property  CSAssetManager *assetManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAttSiriMitigationAssetHandler sharedHandler]

  // instance methods
  -[CSAttSiriMitigationAssetHandler setAssetManager:]
  -[CSAttSiriMitigationAssetHandler assetManager]
  -[CSAttSiriMitigationAssetHandler cachedAsset]
  -[CSAttSiriMitigationAssetHandler voiceTriggerAssetHandler:endpointId:didChangeCachedAsset:]
  -[CSAttSiriMitigationAssetHandler .cxx_destruct]
  -[CSAttSiriMitigationAssetHandler setCachedAsset:]
  -[CSAttSiriMitigationAssetHandler init]
  -[CSAttSiriMitigationAssetHandler trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
  -[CSAttSiriMitigationAssetHandler start]
  -[CSAttSiriMitigationAssetHandler _receivedNewAssetUpdate:]
  -[CSAttSiriMitigationAssetHandler getMitigationAssetWithEndpointId:completion:]


CSAudioRecordDeviceInfo : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *remoteDeviceUIDString
 @property  NSString *route
 @property  BOOL isRemoteDevice
 @property  NSUUID *remoteDeviceUID
 @property  NSString *remoteDeviceProductIdentifier

  // class methods
  +[CSAudioRecordDeviceInfo supportsSecureCoding]

  // instance methods
  -[CSAudioRecordDeviceInfo xpcObject]
  -[CSAudioRecordDeviceInfo initWithCoder:]
  -[CSAudioRecordDeviceInfo route]
  -[CSAudioRecordDeviceInfo initWithXPCObject:]
  -[CSAudioRecordDeviceInfo .cxx_destruct]
  -[CSAudioRecordDeviceInfo isRemoteDevice]
  -[CSAudioRecordDeviceInfo copyWithZone:]
  -[CSAudioRecordDeviceInfo encodeWithCoder:]
  -[CSAudioRecordDeviceInfo remoteDeviceUID]
  -[CSAudioRecordDeviceInfo initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:]
  -[CSAudioRecordDeviceInfo remoteDeviceUIDString]
  -[CSAudioRecordDeviceInfo initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:remoteDeviceUIDString:]
  -[CSAudioRecordDeviceInfo initWithAVVCRecordDeviceInfo:]
  -[CSAudioRecordDeviceInfo remoteDeviceProductIdentifier]


CSOpportuneSpeakListnerTestService : NSObject <CSOpportuneSpeakListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSOpportuneSpeakListnerTestService opportuneSpeakListener:didStopUnexpectly:]
  -[CSOpportuneSpeakListnerTestService .cxx_destruct]
  -[CSOpportuneSpeakListnerTestService opportuneSpeakListener:hasVADAvailable:]
  -[CSOpportuneSpeakListnerTestService init]
  -[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStart]
  -[CSOpportuneSpeakListnerTestService start]
  -[CSOpportuneSpeakListnerTestService opportuneSpeakListener:hasRemoteVADAvailable:]
  -[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStop]


CSAudioConverter : NSObject
 @property  <CSAudioConverterDelegate> *delegate

  // class methods
  +[CSAudioConverter narrowBandOpusConverter]
  +[CSAudioConverter opusConverter]
  +[CSAudioConverter speexConverter]

  // instance methods
  -[CSAudioConverter .cxx_destruct]
  -[CSAudioConverter setDelegate:]
  -[CSAudioConverter flush]
  -[CSAudioConverter reset]
  -[CSAudioConverter delegate]
  -[CSAudioConverter dealloc]
  -[CSAudioConverter initWithInASBD:outASBD:]
  -[CSAudioConverter addSamples:timestamp:arrivalTimestampToAudioRecorder:]
  -[CSAudioConverter _configureAudioConverter:]
  -[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]


CSLanguageCodeUpdateMonitor : CSEventMonitor
  // class methods
  +[CSLanguageCodeUpdateMonitor sharedInstance]

  // instance methods
  -[CSLanguageCodeUpdateMonitor _stopMonitoring]
  -[CSLanguageCodeUpdateMonitor notifySiriLanguageCodeChanged:]
  -[CSLanguageCodeUpdateMonitor _startMonitoringWithQueue:]


CSVoiceTriggerEventInfoProvider : NSObject
 @property  NSDictionary *rtsTriggerInfo
 @property  unsigned long triggerNotifiedMachTime

  // class methods
  +[CSVoiceTriggerEventInfoProvider sharedInstance]
  +[CSVoiceTriggerEventInfoProvider isVoiceTriggerInfoAvailableLocally:]

  // instance methods
  -[CSVoiceTriggerEventInfoProvider .cxx_destruct]
  -[CSVoiceTriggerEventInfoProvider init]
  -[CSVoiceTriggerEventInfoProvider setVoiceTriggerInfo:deviceId:]
  -[CSVoiceTriggerEventInfoProvider _isBuiltInDeviceFromDeviceId:]
  -[CSVoiceTriggerEventInfoProvider fetchVoiceTriggerInfoWithAudioContext:triggerInfoProviding:resultVoiceTriggerInfo:resultRTSTriggerInfo:]
  -[CSVoiceTriggerEventInfoProvider rtsTriggerInfo]
  -[CSVoiceTriggerEventInfoProvider setRtsTriggerInfo:]
  -[CSVoiceTriggerEventInfoProvider triggerNotifiedMachTime]
  -[CSVoiceTriggerEventInfoProvider setTriggerNotifiedMachTime:]


CSAudioInjectionServices : NSObject
  // class methods
  +[CSAudioInjectionServices audioInjectionEnabled]
  +[CSAudioInjectionServices pingpong:completion:]
  +[CSAudioInjectionServices createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:]
  +[CSAudioInjectionServices connectDeviceWithUUID:completion:]
  +[CSAudioInjectionServices disconnectDeviceWithUUID:completion:]
  +[CSAudioInjectionServices primaryInputDeviceUUIDWithCompletion:]
  +[CSAudioInjectionServices injectAudio:toDeviceWithUUID:completion:]
  +[CSAudioInjectionServices getAudioInjectionXPCConnection]
  +[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:]
  +[CSAudioInjectionServices setAudioInjectionMode:]


CSRemoteDarwinDeviceInfo : NSObject
 @property  NSMutableDictionary *deviceUIDMapTable
 @property  NSMutableOrderedSet *voiceTriggerEnabledDevices
 @property  NSObject<OS_dispatch_queue> *queue

  // class methods
  +[CSRemoteDarwinDeviceInfo sharedInstance]

  // instance methods
  -[CSRemoteDarwinDeviceInfo .cxx_destruct]
  -[CSRemoteDarwinDeviceInfo init]
  -[CSRemoteDarwinDeviceInfo setQueue:]
  -[CSRemoteDarwinDeviceInfo queue]
  -[CSRemoteDarwinDeviceInfo hasDarwinDeviceConnected]
  -[CSRemoteDarwinDeviceInfo hasDarwinDeviceHandleVoiceTrigger]
  -[CSRemoteDarwinDeviceInfo fetchDeviceUUIDStringFromUID:]
  -[CSRemoteDarwinDeviceInfo voiceTriggerEnabledDevices]
  -[CSRemoteDarwinDeviceInfo deviceUIDMapTable]
  -[CSRemoteDarwinDeviceInfo _isRemoteDarwinConnectedWithUUID:]
  -[CSRemoteDarwinDeviceInfo deviceConnectedWithUUID:]
  -[CSRemoteDarwinDeviceInfo notifyVoiceTriggerEnabledWithDeviceUUID:]
  -[CSRemoteDarwinDeviceInfo notifyVoiceTriggerDisabledWithDeviceUUID:]
  -[CSRemoteDarwinDeviceInfo deviceDisconnectedWithUUID:]
  -[CSRemoteDarwinDeviceInfo allDeviceDisconnected]
  -[CSRemoteDarwinDeviceInfo isPrimaryVoiceTriggerDeviceWithUUID:]
  -[CSRemoteDarwinDeviceInfo fetchRichDeviceUIDStringFromUUID:]
  -[CSRemoteDarwinDeviceInfo isRemoteDarwinConnectedWithUUID:]
  -[CSRemoteDarwinDeviceInfo addDeviceIDPairToMapTable:withDeviceUID:]
  -[CSRemoteDarwinDeviceInfo setDeviceUIDMapTable:]
  -[CSRemoteDarwinDeviceInfo setVoiceTriggerEnabledDevices:]


CSSelfTriggerDetector : NSObject <CSKeywordAnalyzerNDAPIScoreDelegate, CSAudioStreamProvidingDelegate, CSSiriClientBehaviorMonitorDelegate, CSAudioServerCrashMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers
 @property  CSSpeechManager *speechManager
 @property  CSAsset *currentAsset
 @property  CSKeywordAnalyzerNDAPI *keywordAnalyzer
 @property  float keywordThreshold
 @property  unsigned long outputAudioChannel
 @property  CSAudioStream *audioStream
 @property  CSPolicy *enablePolicy
 @property  BOOL isSiriClientListening
 @property  BOOL selfTriggerEnabled
 @property  BOOL isListenPollingStarting
 @property  NSString *audioProviderUUID
 @property  CSAudioTimeConverter *audioTimeConverter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSSelfTriggerDetector keywordAnalyzerNDAPI:hasResultAvailable:forChannel:]
  -[CSSelfTriggerDetector unregisterObserver:]
  -[CSSelfTriggerDetector siriClientBehaviorMonitor:didStopStream:withEventUUID:]
  -[CSSelfTriggerDetector registerObserver:]
  -[CSSelfTriggerDetector CSAudioServerCrashMonitorDidReceiveServerRestart:]
  -[CSSelfTriggerDetector keywordThreshold]
  -[CSSelfTriggerDetector audioStreamProvider:didStopStreamUnexpectly:]
  -[CSSelfTriggerDetector speechManager]
  -[CSSelfTriggerDetector _reset]
  -[CSSelfTriggerDetector _startListenWithCompletion:]
  -[CSSelfTriggerDetector _startListenPollingWithInterval:completion:]
  -[CSSelfTriggerDetector _shouldReuseBuiltInAudioProvider]
  -[CSSelfTriggerDetector setKeywordAnalyzer:]
  -[CSSelfTriggerDetector setCurrentAsset:]
  -[CSSelfTriggerDetector .cxx_destruct]
  -[CSSelfTriggerDetector setAudioProviderUUID:]
  -[CSSelfTriggerDetector siriClientBehaviorMonitor:willStopStream:reason:]
  -[CSSelfTriggerDetector siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]
  -[CSSelfTriggerDetector setAsset:]
  -[CSSelfTriggerDetector setObservers:]
  -[CSSelfTriggerDetector setKeywordThreshold:]
  -[CSSelfTriggerDetector setQueue:]
  -[CSSelfTriggerDetector keywordAnalyzer]
  -[CSSelfTriggerDetector setSpeechManager:]
  -[CSSelfTriggerDetector isListenPollingStarting]
  -[CSSelfTriggerDetector reset]
  -[CSSelfTriggerDetector setAudioTimeConverter:]
  -[CSSelfTriggerDetector siriClientBehaviorMonitor:willStartStreamWithContext:option:]
  -[CSSelfTriggerDetector initWithTargetQueue:]
  -[CSSelfTriggerDetector audioTimeConverter]
  -[CSSelfTriggerDetector setIsSiriClientListening:]
  -[CSSelfTriggerDetector _stopListening]
  -[CSSelfTriggerDetector currentAsset]
  -[CSSelfTriggerDetector queue]
  -[CSSelfTriggerDetector observers]
  -[CSSelfTriggerDetector start]
  -[CSSelfTriggerDetector setAudioStream:]
  -[CSSelfTriggerDetector audioProviderUUID]
  -[CSSelfTriggerDetector audioStreamProvider:audioChunkForTVAvailable:]
  -[CSSelfTriggerDetector isSiriClientListening]
  -[CSSelfTriggerDetector setIsListenPollingStarting:]
  -[CSSelfTriggerDetector audioStreamProvider:audioBufferAvailable:]
  -[CSSelfTriggerDetector _setAsset:]
  -[CSSelfTriggerDetector audioStream]
  -[CSSelfTriggerDetector _startListenPolling]
  -[CSSelfTriggerDetector enablePolicy]
  -[CSSelfTriggerDetector _handleEnablePolicyEvent:]
  -[CSSelfTriggerDetector outputAudioChannel]
  -[CSSelfTriggerDetector setOutputAudioChannel:]
  -[CSSelfTriggerDetector setEnablePolicy:]
  -[CSSelfTriggerDetector selfTriggerEnabled]
  -[CSSelfTriggerDetector setSelfTriggerEnabled:]


CSAdBlockerAssetDecoderV3 : NSObject
 @property  NSData *payloadData
 @property  float maxFingerprintBufferSize
 @property  NSMutableDictionary *shouldResetAdsDictionary
 @property  NSString *assetVersion

  // instance methods
  -[CSAdBlockerAssetDecoderV3 .cxx_destruct]
  -[CSAdBlockerAssetDecoderV3 assetVersion]
  -[CSAdBlockerAssetDecoderV3 payloadData]
  -[CSAdBlockerAssetDecoderV3 setPayloadData:]
  -[CSAdBlockerAssetDecoderV3 initWithData:]
  -[CSAdBlockerAssetDecoderV3 maxFingerprintBufferSize]
  -[CSAdBlockerAssetDecoderV3 shouldResetAdsDictionary]


CSGestureDropEvent : NSObject
 @property  double droppingPrediction
 @property  double droppedPrediction
 @property  double timestamp
 @property  NSObject<OS_xpc_object> *xpcObject

  // instance methods
  -[CSGestureDropEvent xpcObject]
  -[CSGestureDropEvent initWithXPCObject:]
  -[CSGestureDropEvent timestamp]
  -[CSGestureDropEvent toString]
  -[CSGestureDropEvent initWithDroppingPrediction:droppedPrediction:timestamp:]
  -[CSGestureDropEvent droppingPrediction]
  -[CSGestureDropEvent droppedPrediction]


CSVTSecondPassPhraseScore : NSObject
 @property  unsigned long phId
 @property  NSString *phStr
 @property  float threshold
 @property  float secondChanceThreshold
 @property  float loggingThreshold
 @property  BOOL useKwdSpotting
 @property  float recognizerScoreScaleFactor
 @property  float recognizerThresholdOffset
 @property  float satThreshold
 @property  float tdsrSatCombinedSATThreshold
 @property  float ndapiScore
 @property  float ctcCheckerScore
 @property  float combinedScore
 @property  BOOL isMaximized
 @property  CSKeywordAnalyzerNDAPIResult *ndapiResult

  // instance methods
  -[CSVTSecondPassPhraseScore threshold]
  -[CSVTSecondPassPhraseScore phId]
  -[CSVTSecondPassPhraseScore combinedScore]
  -[CSVTSecondPassPhraseScore phStr]
  -[CSVTSecondPassPhraseScore .cxx_destruct]
  -[CSVTSecondPassPhraseScore setCombinedScore:]
  -[CSVTSecondPassPhraseScore _update]
  -[CSVTSecondPassPhraseScore setThreshold:]
  -[CSVTSecondPassPhraseScore setPhId:]
  -[CSVTSecondPassPhraseScore ndapiResult]
  -[CSVTSecondPassPhraseScore effectiveThresholdWithSecondChanceEnabled:]
  -[CSVTSecondPassPhraseScore ctcCheckerScore]
  -[CSVTSecondPassPhraseScore recognizerThresholdOffset]
  -[CSVTSecondPassPhraseScore recognizerScoreScaleFactor]
  -[CSVTSecondPassPhraseScore dictionaryRepresentationWithSecondChanceEnabled:]
  -[CSVTSecondPassPhraseScore setRecognizerScoreScaleFactor:]
  -[CSVTSecondPassPhraseScore setRecognizerThresholdOffset:]
  -[CSVTSecondPassPhraseScore didTriggerWithSecondChanceEnabled:]
  -[CSVTSecondPassPhraseScore initWithPhraseInfoDict:useKeywordSpotting:]
  -[CSVTSecondPassPhraseScore updateWithNdapiResult:]
  -[CSVTSecondPassPhraseScore updateWithCtcScore:]
  -[CSVTSecondPassPhraseScore hasNearMissTriggerWithSecondChanceEnabled:]
  -[CSVTSecondPassPhraseScore setPhStr:]
  -[CSVTSecondPassPhraseScore secondChanceThreshold]
  -[CSVTSecondPassPhraseScore setSecondChanceThreshold:]
  -[CSVTSecondPassPhraseScore loggingThreshold]
  -[CSVTSecondPassPhraseScore setLoggingThreshold:]
  -[CSVTSecondPassPhraseScore useKwdSpotting]
  -[CSVTSecondPassPhraseScore setUseKwdSpotting:]
  -[CSVTSecondPassPhraseScore satThreshold]
  -[CSVTSecondPassPhraseScore setSatThreshold:]
  -[CSVTSecondPassPhraseScore tdsrSatCombinedSATThreshold]
  -[CSVTSecondPassPhraseScore setTdsrSatCombinedSATThreshold:]
  -[CSVTSecondPassPhraseScore ndapiScore]
  -[CSVTSecondPassPhraseScore setNdapiScore:]
  -[CSVTSecondPassPhraseScore setCtcCheckerScore:]
  -[CSVTSecondPassPhraseScore isMaximized]
  -[CSVTSecondPassPhraseScore setIsMaximized:]
  -[CSVTSecondPassPhraseScore setNdapiResult:]


CSVTSecondPassScorer : NSObject
 @property  CSVTSecondPassPhraseScore *triggeredPhrase
 @property  NSDictionary *phraseMap

  // instance methods
  -[CSVTSecondPassScorer .cxx_destruct]
  -[CSVTSecondPassScorer initWithAsset:firstPassSource:]
  -[CSVTSecondPassScorer dictionaryRepresentationWithSecondChanceEnabled:]
  -[CSVTSecondPassScorer updateWithNdapiResults:]
  -[CSVTSecondPassScorer updateWithCtcCheckerResults:]
  -[CSVTSecondPassScorer getTriggeredPhraseWithSecondChanceEnabled:]
  -[CSVTSecondPassScorer getNearMissPhraseWithSecondChanceEnabled:]
  -[CSVTSecondPassScorer bestScoringPhrase]
  -[CSVTSecondPassScorer phraseMap]
  -[CSVTSecondPassScorer setPhraseMap:]
  -[CSVTSecondPassScorer triggeredPhrase]
  -[CSVTSecondPassScorer setTriggeredPhrase:]


CSAudioRecorder : NSObject <AVVoiceControllerRecordDelegate, CSAudioDecoderDelegate, CSAudioFileReaderDelegate, CSRemoteRecordClientDelegate, CSUserSessionActiveMonitorDelegate, CSAudioServerCrashEventProviding, CSAudioSessionEventProviding>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *voiceControllerCreationQueue
 @property  NSHashTable *observers
 @property  <CSAudioServerCrashEventProvidingDelegate> *crashEventDelegate
 @property  <CSAudioSessionEventProvidingDelegate> *sessionEventDelegate
 @property  BOOL duckOthersOption
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSAudioRecorder createSharedAudioSession]
  +[CSAudioRecorder _convertDeactivateOption:]

  // instance methods
  -[CSAudioRecorder averagePowerForChannel:]
  -[CSAudioRecorder unregisterObserver:]
  -[CSAudioRecorder duckOthersOption]
  -[CSAudioRecorder registerObserver:]
  -[CSAudioRecorder setDuckOthersOption:]
  -[CSAudioRecorder .cxx_destruct]
  -[CSAudioRecorder setObservers:]
  -[CSAudioRecorder setQueue:]
  -[CSAudioRecorder playbackRoute]
  -[CSAudioRecorder enableMiniDucking:]
  -[CSAudioRecorder peakPowerForChannel:]
  -[CSAudioRecorder deactivateAudioSession:error:]
  -[CSAudioRecorder metrics]
  -[CSAudioRecorder voiceControllerEncoderErrorDidOccur:error:]
  -[CSAudioRecorder voiceControllerBeginRecordInterruption:]
  -[CSAudioRecorder queue]
  -[CSAudioRecorder voiceControllerDidFinishAlertPlayback:ofType:error:]
  -[CSAudioRecorder observers]
  -[CSAudioRecorder voiceControllerRecordHardwareConfigurationDidChange:toConfiguration:]
  -[CSAudioRecorder voiceControllerBeginRecordInterruption:withContext:]
  -[CSAudioRecorder setAlertSoundFromURL:forType:]
  -[CSAudioRecorder voiceControllerEndRecordInterruption:]
  -[CSAudioRecorder voiceControllerMediaServicesWereLost:]
  -[CSAudioRecorder voiceControllerMediaServicesWereReset:]
  -[CSAudioRecorder updateMeters]
  -[CSAudioRecorder voiceControllerWillSetAudioSessionActive:willActivate:]
  -[CSAudioRecorder voiceControllerDidSetAudioSessionActive:isActivated:]
  -[CSAudioRecorder dealloc]
  -[CSAudioRecorder voiceControllerDidStartRecording:forStream:successfully:error:]
  -[CSAudioRecorder voiceControllerDidStopRecording:forStream:forReason:]
  -[CSAudioRecorder voiceControllerAudioCallback:forStream:buffer:]
  -[CSAudioRecorder voiceControllerStreamInvalidated:forStream:]
  -[CSAudioRecorder setAnnounceCallsEnabled:withStreamHandleID:]
  -[CSAudioRecorder audioDecoderDidDecodePackets:audioStreamHandleId:buffer:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:]
  -[CSAudioRecorder alertStartTime]
  -[CSAudioRecorder setMeteringEnabled:]
  -[CSAudioRecorder audioFileReaderDidStartRecording:successfully:error:]
  -[CSAudioRecorder audioFileReaderBufferAvailable:buffer:atTime:]
  -[CSAudioRecorder audioFileReaderDidStopRecording:forReason:]
  -[CSAudioRecorder recordDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
  -[CSAudioRecorder willDestroy]
  -[CSAudioRecorder setAudioServerCrashEventDelegate:]
  -[CSAudioRecorder setAudioSessionEventDelegate:]
  -[CSAudioRecorder setContext:completion:]
  -[CSAudioRecorder setCurrentContext:streamHandleId:error:]
  -[CSAudioRecorder prepareAudioStreamRecord:recordDeviceIndicator:error:]
  -[CSAudioRecorder startAudioStreamWithOption:recordDeviceIndicator:error:]
  -[CSAudioRecorder stopAudioStreamWithRecordDeviceIndicator:error:]
  -[CSAudioRecorder isRecordingWithRecordDeviceIndicator:]
  -[CSAudioRecorder recordRouteWithRecordDeviceIndicator:]
  -[CSAudioRecorder audioDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
  -[CSAudioRecorder recordSettingsWithStreamHandleId:]
  -[CSAudioRecorder recordingSampleRateWithStreamHandleId:]
  -[CSAudioRecorder isNarrowBandWithStreamHandleId:]
  -[CSAudioRecorder prewarmAudioSessionWithStreamHandleId:error:]
  -[CSAudioRecorder activateAudioSessionWithReason:streamHandleId:error:]
  -[CSAudioRecorder deactivateAudioSession:streamHandleId:error:]
  -[CSAudioRecorder setRecordMode:streamHandleId:error:]
  -[CSAudioRecorder playRecordStartingAlertAndResetEndpointerFromStream:]
  -[CSAudioRecorder playAlertSoundForType:recordDevideIndicator:]
  -[CSAudioRecorder isSessionCurrentlyActivated]
  -[CSAudioRecorder voiceTriggerInfoWithRecordDeviceIndicator:]
  -[CSAudioRecorder configureAlertBehavior:audioStreamHandleId:]
  -[CSAudioRecorder initWithQueue:error:]
  -[CSAudioRecorder _compensateChannelDataIfNeeded:receivedNumChannels:]
  -[CSAudioRecorder remoteRecordConnectionDisconnected:]
  -[CSAudioRecorder remoteRecordDidStopRecordingWithWithStreamHandleId:error:]
  -[CSAudioRecorder remoteRecordLPCMBufferAvailable:streamHandleId:]
  -[CSAudioRecorder remoteRecordDidStartRecordingWithStreamHandleId:error:]
  -[CSAudioRecorder remoteRecordTwoShotDetectedAtTime:]
  -[CSAudioRecorder enableSmartRoutingConsiderationForStream:enable:]
  -[CSAudioRecorder setDuckOthersForStream:]
  -[CSAudioRecorder _voiceControllerWithError:]
  -[CSAudioRecorder _destroyVoiceController]
  -[CSAudioRecorder _audioRecorderDidStartRecordingSuccessfully:streamHandleID:error:]
  -[CSAudioRecorder _getRecordSettingsWithRequest:]
  -[CSAudioRecorder _fetchRemoteRecordClientWithDeviceId:streamHandleId:]
  -[CSAudioRecorder _logResourceNotAvailableErrorIfNeeded:]
  -[CSAudioRecorder _shouldInjectAudio]
  -[CSAudioRecorder _needResetAudioInjectionIndex:]
  -[CSAudioRecorder _hasLocalPendingTwoShot]
  -[CSAudioRecorder _startAudioStreamForAudioInjectionWithAVVCContext:]
  -[CSAudioRecorder _shouldLogResourceNotAvailableError]
  -[CSAudioRecorder _updateLanguageCodeForRemoteVTEIResult:]
  -[CSAudioRecorder _processAudioChain:audioStreamHandleId:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:]
  -[CSAudioRecorder _processAudioBuffer:audioStreamHandleId:arrivalTimestampToAudioRecorder:]
  -[CSAudioRecorder _audioRecorderDidStopRecordingForReason:streamHandleID:]
  -[CSAudioRecorder userSessionActivateMonitor:didReceivedUserSessionActiveHasChanged:]
  -[CSAudioRecorder setMixWithOthersForStream:]
  -[CSAudioRecorder _shouldUseRemoteBuiltInMic:]
  -[CSAudioRecorder _isDarwinDeviceId:]
  -[CSAudioRecorder voiceControllerCreationQueue]
  -[CSAudioRecorder setVoiceControllerCreationQueue:]
  -[CSAudioRecorder crashEventDelegate]
  -[CSAudioRecorder setCrashEventDelegate:]
  -[CSAudioRecorder sessionEventDelegate]
  -[CSAudioRecorder setSessionEventDelegate:]


CSCommandControlBehaviorMonitor : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *observers

  // class methods
  +[CSCommandControlBehaviorMonitor sharedInstance]

  // instance methods
  -[CSCommandControlBehaviorMonitor unregisterObserver:]
  -[CSCommandControlBehaviorMonitor registerObserver:]
  -[CSCommandControlBehaviorMonitor notifyWillStartStreamWithContext:option:]
  -[CSCommandControlBehaviorMonitor .cxx_destruct]
  -[CSCommandControlBehaviorMonitor setObservers:]
  -[CSCommandControlBehaviorMonitor init]
  -[CSCommandControlBehaviorMonitor setQueue:]
  -[CSCommandControlBehaviorMonitor notifyDidStopStream:]
  -[CSCommandControlBehaviorMonitor queue]
  -[CSCommandControlBehaviorMonitor observers]
  -[CSCommandControlBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:]
  -[CSCommandControlBehaviorMonitor notifyWillStopStream:]


CSVoiceProfileContext : NSObject
 @property  NSString *profileId
 @property  NSString *languageCode
 @property  NSString *productCategory
 @property  NSNumber *version
 @property  unsigned long onboardType
 @property  NSString *homeId
 @property  NSString *userName

  // instance methods
  -[CSVoiceProfileContext userName]
  -[CSVoiceProfileContext setLanguageCode:]
  -[CSVoiceProfileContext .cxx_destruct]
  -[CSVoiceProfileContext homeId]
  -[CSVoiceProfileContext languageCode]
  -[CSVoiceProfileContext setVersion:]
  -[CSVoiceProfileContext setUserName:]
  -[CSVoiceProfileContext version]
  -[CSVoiceProfileContext setHomeId:]
  -[CSVoiceProfileContext profileId]
  -[CSVoiceProfileContext initWithSharedSiriId:languageCode:productCategory:version:sharedHomeId:userName:]
  -[CSVoiceProfileContext setProfileId:]
  -[CSVoiceProfileContext productCategory]
  -[CSVoiceProfileContext setProductCategory:]
  -[CSVoiceProfileContext onboardType]
  -[CSVoiceProfileContext setOnboardType:]


NviContext : NSObject
 @property  NSDictionary *voiceTriggerInfo
 @property  BOOL requestHistoricalAudio
 @property  unsigned long reqStartAudioSampleId
 @property  unsigned long reqStartMachAbsTime
 @property  BOOL shouldLogRawSensorData
 @property  NSString *rootLogDir

  // instance methods
  -[NviContext .cxx_destruct]
  -[NviContext voiceTriggerInfo]
  -[NviContext rootLogDir]
  -[NviContext requestHistoricalAudio]
  -[NviContext reqStartAudioSampleId]
  -[NviContext setVoiceTriggerInfo:]
  -[NviContext setRequestHistoricalAudio:]
  -[NviContext setReqStartAudioSampleId:]
  -[NviContext reqStartMachAbsTime]
  -[NviContext setReqStartMachAbsTime:]
  -[NviContext shouldLogRawSensorData]
  -[NviContext setShouldLogRawSensorData:]
  -[NviContext setRootLogDir:]


CSEndpointerFactory : NSObject
  // class methods
  +[CSEndpointerFactory endpointerProxy]


CSJarvisTriggerModeMonitor : CSEventMonitor
  // class methods
  +[CSJarvisTriggerModeMonitor sharedInstance]
  +[CSJarvisTriggerModeMonitor triggerModeStringDescription:]

  // instance methods
  -[CSJarvisTriggerModeMonitor _stopMonitoring]
  -[CSJarvisTriggerModeMonitor _startMonitoringWithQueue:]
  -[CSJarvisTriggerModeMonitor init]
  -[CSJarvisTriggerModeMonitor getTriggerMode]
  -[CSJarvisTriggerModeMonitor setTriggerMode:]
  -[CSJarvisTriggerModeMonitor _fetchTriggerMode]
  -[CSJarvisTriggerModeMonitor _notifyObserver:withJarvisTriggerMode:]
  -[CSJarvisTriggerModeMonitor _notifyJarvisTriggerModeDidChanged]


CSOpportuneSpeakEventMonitor : CSEventMonitor <CSOpportuneSpeakBehaviorMonitorDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  BOOL isOpportuneSpeakListening
 @property  NSString *audioProviderUUID
 @property  CSAudioRecordContext *audioRecordContext
 @property  NSUUID *token
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CSOpportuneSpeakEventMonitor sharedInstance]

  // instance methods
  -[CSOpportuneSpeakEventMonitor _stopMonitoring]
  -[CSOpportuneSpeakEventMonitor isStreaming]
  -[CSOpportuneSpeakEventMonitor setAudioRecordContext:]
  -[CSOpportuneSpeakEventMonitor audioRecordContext]
  -[CSOpportuneSpeakEventMonitor setIsOpportuneSpeakListening:]
  -[CSOpportuneSpeakEventMonitor setToken:]
  -[CSOpportuneSpeakEventMonitor _notifyStopOpportuneSpeakWithDelay:]
  -[CSOpportuneSpeakEventMonitor opportuneSpeakBehaviorMonitor:didStartStreamWithContext:audioProviderUUID:successfully:option:]
  -[CSOpportuneSpeakEventMonitor opportuneSpeakBehaviorMonitor:willStopStream:]
  -[CSOpportuneSpeakEventMonitor .cxx_destruct]
  -[CSOpportuneSpeakEventMonitor setAudioProviderUUID:]
  -[CSOpportuneSpeakEventMonitor opportuneSpeakBehaviorMonitor:willStartStreamWithContext:audioProviderUUID:option:]
  -[CSOpportuneSpeakEventMonitor _startMonitoringWithQueue:]
  -[CSOpportuneSpeakEventMonitor init]
  -[CSOpportuneSpeakEventMonitor setQueue:]
  -[CSOpportuneSpeakEventMonitor token]
  -[CSOpportuneSpeakEventMonitor isOpportuneSpeakListening]
  -[CSOpportuneSpeakEventMonitor queue]
  -[CSOpportuneSpeakEventMonitor audioProviderUUID]
  -[CSOpportuneSpeakEventMonitor opportuneSpeakBehaviorMonitor:didStopStream:]


CSKeywordDetector : NSObject <CSKeywordAnalyzerQuasarScoreDelegate, CSSpeechManagerDelegate>
 @property  CSSpeechManager *speechManager
 @property  NSObject<OS_dispatch_queue> *queue
 @property  CSAsset *currentAsset
 @property  CSKeywordAnalyzerQuasar *keywordAnalyzer
 @property  float keywordThreshold
 @property  unsigned long analyzedSampleCount
 @property  unsigned long decisionWaitSampleCount
 @property  BOOL isRunningRecognizer
 @property  <CSVoiceTriggerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSKeywordDetector keywordThreshold]
  -[CSKeywordDetector speechManager]
  -[CSKeywordDetector _reset]
  -[CSKeywordDetector setKeywordAnalyzer:]
  -[CSKeywordDetector setCurrentAsset:]
  -[CSKeywordDetector .cxx_destruct]
  -[CSKeywordDetector setDelegate:]
  -[CSKeywordDetector setAsset:]
  -[CSKeywordDetector setKeywordThreshold:]
  -[CSKeywordDetector setQueue:]
  -[CSKeywordDetector keywordAnalyzer]
  -[CSKeywordDetector setAnalyzedSampleCount:]
  -[CSKeywordDetector setSpeechManager:]
  -[CSKeywordDetector reset]
  -[CSKeywordDetector analyzedSampleCount]
  -[CSKeywordDetector delegate]
  -[CSKeywordDetector currentAsset]
  -[CSKeywordDetector queue]
  -[CSKeywordDetector _setAsset:]
  -[CSKeywordDetector keywordAnalyzerQuasar:hasResultAvailable:forChannel:]
  -[CSKeywordDetector initWithManager:asset:]
  -[CSKeywordDetector startDetectKeyword:]
  -[CSKeywordDetector speechManagerRecordBufferAvailable:buffer:]
  -[CSKeywordDetector speechManagerLPCMRecordBufferAvailable:chunk:]
  -[CSKeywordDetector speechManagerDidStartForwarding:successfully:error:]
  -[CSKeywordDetector speechManagerDidStopForwarding:forReason:]
  -[CSKeywordDetector decisionWaitSampleCount]
  -[CSKeywordDetector setDecisionWaitSampleCount:]
  -[CSKeywordDetector isRunningRecognizer]
  -[CSKeywordDetector setIsRunningRecognizer:]


NviSignalData : NSObject <NSCoding>
 @property  unsigned long sigType
 @property  unsigned long sigGenTs

  // class methods
  +[NviSignalData headerString]

  // instance methods
  -[NviSignalData initWithCoder:]
  -[NviSignalData sigType]
  -[NviSignalData sigGenTs]
  -[NviSignalData encodeWithCoder:]
  -[NviSignalData initWithSignalType:timestamp:]
  -[NviSignalData setSigGenTs:]
  -[NviSignalData stringForLogging]
  -[NviSignalData setSigType:]


CSSRFUserSettingMonitor : CSEventMonitor
  // class methods
  +[CSSRFUserSettingMonitor sharedInstance]

  // instance methods
  -[CSSRFUserSettingMonitor init]
  -[CSSRFUserSettingMonitor isSiriRestrictedOnLockScreen]


CSVoiceTriggerEnabledPolicyHorseman : CSPolicy
  // instance methods
  -[CSVoiceTriggerEnabledPolicyHorseman init]
  -[CSVoiceTriggerEnabledPolicyHorseman _subscribeEventMonitors]
  -[CSVoiceTriggerEnabledPolicyHorseman _addVoiceTriggerEnabledConditions]


CSUtils(Statistics)
	// class methods
	+[CSUtils(Statistics) getAssetTypeForNamespace:]
	+[CSUtils(Statistics) distributionDictionary:]
	+[CSUtils(Statistics) getSiriLanguageWithFallback:]
	+[CSUtils(Statistics) getNumElementInBitset:]
	+[CSUtils(Statistics) _sharedDisposeLoggingQueue]
	+[CSUtils(Statistics) URLsInDirectory:matchingPattern:completion:]
	+[CSUtils(Statistics) _sortedURLsInDirectory:matchingPattern:completion:]
	+[CSUtils(Statistics) _contentsOfDirectoryAtURL:matchingPattern:includingPropertiesForKeys:error:]
	+[CSUtils(Statistics) removeLogFilesInDirectory:matchingPattern:beforeDays:]
	+[CSUtils(Statistics) clearLogFilesInDirectory:matchingPattern:exceedNumber:]
	+[CSUtils(Statistics) getSiriLanguageWithEndpointId:fallbackLanguage:]
	+[CSUtils(Statistics) xpcConnection:hasEntitlement:]
	+[CSUtils(Statistics) hasRemoteBuiltInMic]
	+[CSUtils(Statistics) isRemoteDarwinWithDeviceId:]
	+[CSUtils(Statistics) iterateBitset:block:]
	+[CSUtils(Statistics) readAudioChunksFrom:block:]
	+[CSUtils(Statistics) getTrialIdsForAssetType:withCompletion:]
	+[CSUtils(Statistics) isRecordContextBuiltInVoiceTrigger:]
	+[CSUtils(Statistics) isRecordContextHearstVoiceTrigger:]
	+[CSUtils(Statistics) isRecordContextJarvisVoiceTrigger:]
	+[CSUtils(Statistics) isRecordContextDarwinVoiceTrigger:]
	+[CSUtils(Statistics) isRecordContextRemoraVoiceTrigger:]
	+[CSUtils(Statistics) isRecordContextHearstDoubleTap:]
	+[CSUtils(Statistics) isRecordContextRaiseToSpeak:]
	+[CSUtils(Statistics) isRecordContextAutoPrompt:]
	+[CSUtils(Statistics) isRecordContextVoiceTrigger:]
	+[CSUtils(Statistics) isRecordContextHomeButtonPress:]
	+[CSUtils(Statistics) isRecordContextSpeakerIdTrainingTrigger:]
	+[CSUtils(Statistics) isRecordContextJarvisButtonPress:]
	+[CSUtils(Statistics) isValidRecordContext:]
	+[CSUtils(Statistics) recordContextString:]

CSAsset(AttSiri)
	// class methods
	+[CSAsset(AttSiri) SSVDefaultNoiseChannelCount]
	+[CSAsset(AttSiri) SSVDefaultLKFSChannelCount]
	+[CSAsset(AttSiri) SSVDefaultDistanceChannelCount]
	+[CSAsset(AttSiri) getSSVDeviceType]

	// instance methods
	-[CSAsset(AttSiri) _sha1:]
	-[CSAsset(AttSiri) _sha256:]
	-[CSAsset(AttSiri) RTModelWithFallbackLanguage:]
	-[CSAsset(AttSiri) mitigatonConfigFile]
	-[CSAsset(AttSiri) mitigationModelDefaultAFTMScore]
	-[CSAsset(AttSiri) nldaConfigFile]
	-[CSAsset(AttSiri) multiUserHighScoreThreshold]
	-[CSAsset(AttSiri) multiUserLowScoreThreshold]
	-[CSAsset(AttSiri) multiUserDeltaScoreThreshold]
	-[CSAsset(AttSiri) multiUserConfidentScoreThreshold]
	-[CSAsset(AttSiri) VTFirstPassConfigPathNDAPI]
	-[CSAsset(AttSiri) _getNumberFromASVDictionaryForKey:category:default:]
	-[CSAsset(AttSiri) _adaptiveSiriVolumeDictionary]
	-[CSAsset(AttSiri) SSVNoiseLevelChannelBitset]
	-[CSAsset(AttSiri) SSVLKFSChannelBitset]
	-[CSAsset(AttSiri) SSVEnergyBufferSize]
	-[CSAsset(AttSiri) SSVNoiseLowerPercentile]
	-[CSAsset(AttSiri) SSVNoiseUpperPercentile]
	-[CSAsset(AttSiri) SSVLKFSLowerPercentile]
	-[CSAsset(AttSiri) SSVLKFSUpperPercentile]
	-[CSAsset(AttSiri) SSVNoiseTimeConstant]
	-[CSAsset(AttSiri) SSVNoiseMicSensitivityOffset]
	-[CSAsset(AttSiri) SSVLKFSTimeConstant]
	-[CSAsset(AttSiri) SSVLKFSMicSensitivityOffset]
	-[CSAsset(AttSiri) SSVNoiseTTSMappingInputRangeLow]
	-[CSAsset(AttSiri) SSVNoiseTTSMappingInputRangeHigh]
	-[CSAsset(AttSiri) SSVNoiseTTSMappingOutputRangeLow]
	-[CSAsset(AttSiri) SSVNoiseTTSMappingOutputRangeHigh]
	-[CSAsset(AttSiri) SSVLKFSTTSMappingInputRangeLow]
	-[CSAsset(AttSiri) SSVLKFSTTSMappingInputRangeHigh]
	-[CSAsset(AttSiri) SSVLKFSTTSMappingOutputRangeLow]
	-[CSAsset(AttSiri) SSVLKFSTTSMappingOutputRangeHigh]
	-[CSAsset(AttSiri) SSVUserOffsetInputRangeLow]
	-[CSAsset(AttSiri) SSVUserOffsetInputRangeHigh]
	-[CSAsset(AttSiri) SSVUserOffsetOutputRangeLow]
	-[CSAsset(AttSiri) SSVUserOffsetOutputRangeHigh]
	-[CSAsset(AttSiri) SSVTTSVolumeLowerLimitDB]
	-[CSAsset(AttSiri) SSVTTSVolumeUpperLimitDB]
	-[CSAsset(AttSiri) SSVNoiseWeight]
	-[CSAsset(AttSiri) SSVDistanceChannelBitset]
	-[CSAsset(AttSiri) SSVNoiseMicSensitivityOffsetDeviceSimple]
	-[CSAsset(AttSiri) SSVCAMaxFrameSize]
	-[CSAsset(AttSiri) SSVCAVoiceTriggerBasedTTSValidForSeconds]
	-[CSAsset(AttSiri) SSVCASmartSiriVolumeUnsyncedMetricLogsToRetain]
	-[CSAsset(AttSiri) SSVCASmartSiriVolumeSyncedMetricLogsToRetain]
	-[CSAsset(AttSiri) SSVCAVoiceTriggerInitialSilenceDurationSeconds]
	-[CSAsset(AttSiri) SSVCADistanceInputBufferDurationSeconds]
	-[CSAsset(AttSiri) SSVCAListenPollingIntervalAtStartInSeconds]
	-[CSAsset(AttSiri) SSVCADefaultZeroFloatingPointValue]
	-[CSAsset(AttSiri) SSVCAAnnouncementStatusFetchTimeoutMs]
	-[CSAsset(AttSiri) SSVCADefaultOutputTTSVolume]
	-[CSAsset(AttSiri) SSVCANoiseActivityCountThreshold]
	-[CSAsset(AttSiri) SSVCASpeakerDistanceFarBoostFactor]
	-[CSAsset(AttSiri) SSVCASpeakerDistanceMidBoostFactor]
	-[CSAsset(AttSiri) SSVCASpeakerDistanceNearBoostFactor]
	-[CSAsset(AttSiri) SSVCADistanceModelConfidenceThreshold]
	-[CSAsset(AttSiri) SSVCAMinimumLinearSoundLevel]
	-[CSAsset(AttSiri) SSVCAMaximumLinearSoundLevel]
	-[CSAsset(AttSiri) SSVCALinearToDecibelConstantMultiplier]
	-[CSAsset(AttSiri) SSVCADecibelToLinearLogBase]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidNoiseDilationFactor]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicDilationFactorDeviceDefault]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicDilationFactorDeviceSimple]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidSpeechDilationFactor]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidNoiseVSpread]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicVSpreadDeviceDefault]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicVSpreadDeviceSimple]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidSpeechVSpread]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidNoiseVOffset]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicVOffsetDeviceDefault]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicVOffsetDeviceSimple]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidSpeechVOffset]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidNoiseHOffset]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicHOffsetDeviceDefault]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicHOffsetDeviceSimple]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidSpeechHOffset]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicSteepnessDeviceDefault]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidMusicSteepnessDeviceSimple]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidNoiseSteepness]
	-[CSAsset(AttSiri) SSVCASignalToSigmoidSpeechSteepness]
	-[CSAsset(AttSiri) SSVCADBToTTSMinimumOutput]
	-[CSAsset(AttSiri) SSVCADBToTTSMaximumOutput]
	-[CSAsset(AttSiri) SSVCADBToTTSTransitionPoint]
	-[CSAsset(AttSiri) SSVCADBToTTSPreTransitionOffset]
	-[CSAsset(AttSiri) SSVCADBToTTSPreTransitionMultiplier]
	-[CSAsset(AttSiri) SSVCADBToTTSPostTransitionOffset]
	-[CSAsset(AttSiri) SSVCADBToTTSPostTransitionDC]
	-[CSAsset(AttSiri) SSVCADBToTTSPostTransitionMultiplier]
	-[CSAsset(AttSiri) SSVCAMinimumDistanceUpdateWaitPeriodSeconds]
	-[CSAsset(AttSiri) SSVCANoiseActivityThreshold]
	-[CSAsset(AttSiri) SSVCANoiseResultsBufferSize]
	-[CSAsset(AttSiri) SSVCAMusicResultsBufferSize]
	-[CSAsset(AttSiri) SSVCADefaultSpeechStrength]
	-[CSAsset(AttSiri) SSVCADefaultMusicStrength]
	-[CSAsset(AttSiri) SSVCANoiseActivityHistoricalSampleCount]
	-[CSAsset(AttSiri) SSVCADspCoefsCount]
	-[CSAsset(AttSiri) SSVCADspNumStages]
	-[CSAsset(AttSiri) SSVCADistanceResultsBufferSize]
	-[CSAsset(AttSiri) SSVCAExponentialDistanceHistoryDegradationFactor]
	-[CSAsset(AttSiri) SSVCADistanceResultSampleCountTolerance]
	-[CSAsset(AttSiri) SSVCAMusicHistoricalSamplesInSeconds]
	-[CSAsset(AttSiri) SSVCADeviceSimpleOutputMinTargetDB]
	-[CSAsset(AttSiri) SSVCADeviceSimpleOutputMaxTargetDB]
	-[CSAsset(AttSiri) SSVCADeviceSimpleOutputSlope]
	-[CSAsset(AttSiri) SSVCADeviceSimpleMinTargetDB]
	-[CSAsset(AttSiri) SSVCADeviceSimpleMaxTargetDB]
	-[CSAsset(AttSiri) SSVCADeviceSimpleDBToSystemVolSlope]
	-[CSAsset(AttSiri) SSVCADeviceSimpleMicSensitivityOffset]
	-[CSAsset(AttSiri) SSVCADeviceSimplePreTriggerSilenceSampleCount]
	-[CSAsset(AttSiri) SSVCAMinTTSSystemVolume]
	-[CSAsset(AttSiri) SSVCAMaxTTSSystemVolume]
	-[CSAsset(AttSiri) SSVCAUserIntentValidForSeconds]
	-[CSAsset(AttSiri) SSVCAUserIntentVolumeIncreaseFactor]
	-[CSAsset(AttSiri) SSVCAUserIntentVolumeDecreaseFactor]
	-[CSAsset(AttSiri) SSVCAUserIntentPermanentOffsetFactorDelta]
	-[CSAsset(AttSiri) SSVCAUserIntentPermanentOffsetFactorLowerBound]
	-[CSAsset(AttSiri) SSVCAUserIntentPermanentOffsetFactorUpperBound]
	-[CSAsset(AttSiri) SSVCADeviceSimpleMinTTSVolume]
	-[CSAsset(AttSiri) SSVCADeviceSimpleMaxTTSVolume]
	-[CSAsset(AttSiri) SSVCADeviceDefaultMinTTSVolume]
	-[CSAsset(AttSiri) SSVCADeviceDefaultMaxTTSVolume]
	-[CSAsset(AttSiri) SSVCADeviceDefaultASVOffMinTTSVolume]
	-[CSAsset(AttSiri) SSVCADeviceSimpleASVOffMinTTSVolume]
	-[CSAsset(AttSiri) SSVCADeviceDefaultMicSensitivityOffset]
	-[CSAsset(AttSiri) SSVCAVolumeHalfLifeSeconds]
	-[CSAsset(AttSiri) SSVCAHistoricalVolumeBufferSize]
	-[CSAsset(AttSiri) SSVCAMaximumCompensatedSpeechLevelNearField]
	-[CSAsset(AttSiri) SSVParameterDirectionary]
	-[CSAsset(AttSiri) CVTConfigPathNDAPI]
	-[CSAsset(AttSiri) CVTThreshold]
	-[CSAsset(AttSiri) CVTTwoShotDecisionWaitTime]
	-[CSAsset(AttSiri) CVTTwoShotThreshold]
	-[CSAsset(AttSiri) VTSecondPassCategoryForFirstPassSource:]
	-[CSAsset(AttSiri) VTSecondPassRemoteVADThresholdFrom:]
	-[CSAsset(AttSiri) VTSecondPassRemoteVADMyriadThresholdFrom:]
	-[CSAsset(AttSiri) VTSecondPassMinimumPhraseLengthForVADGating:]
	-[CSAsset(AttSiri) languageDetectorSupportedLocale]
	-[CSAsset(AttSiri) languageDetectorConfigFile]
	-[CSAsset(AttSiri) startOfSpeechDetectorConfigFile]
	-[CSAsset(AttSiri) spgConfigFile]
	-[CSAsset(AttSiri) flexKwdConfigFile]
	-[CSAsset(AttSiri) flexKwdThresholdFile]
	-[CSAsset(AttSiri) _getCategoryKey]
	-[CSAsset(AttSiri) VTFirstPassThreshold]
	-[CSAsset(AttSiri) VTFirstPassDelaySecondsForChannelSelection]
	-[CSAsset(AttSiri) VTFirstPassMasterChannelScoreBoost]
	-[CSAsset(AttSiri) VTFirstPassProcessingChunkSeconds]
	-[CSAsset(AttSiri) VTFirstPassProcessingChannelsBitset]
	-[CSAsset(AttSiri) createRTModelWithLocale:]
	-[CSAsset(AttSiri) hearstRTModelWithMajorVersion:minorVersion:locale:]
	-[CSAsset(AttSiri) rtModelWithAccessoryRTModelType:majorVersion:minorVersion:locale:]
	-[CSAsset(AttSiri) localeMapWithName:]
	-[CSAsset(AttSiri) remoraRTModelLocaleMap]
	-[CSAsset(AttSiri) hearstRTModelLocaleMap]
	-[CSAsset(AttSiri) latestHearstRTModelForLocale:]
	-[CSAsset(AttSiri) remoraRTModelWithMajorVersion:minorVersion:locale:]
	-[CSAsset(AttSiri) jarvisRTModelLocaleMap]
	-[CSAsset(AttSiri) rtModelLocaleMapWithModelType:]
	-[CSAsset(AttSiri) VTSecondPassConfigPathNDAPIFrom:]
	-[CSAsset(AttSiri) VTSecondPassThresholdFrom:]
	-[CSAsset(AttSiri) VTSecondPass2ndChanceThresholdFrom:]
	-[CSAsset(AttSiri) VTSecondPassLoggingThresholdFrom:]
	-[CSAsset(AttSiri) VTSecondPassPreTriggerAudioTimeFrom:]
	-[CSAsset(AttSiri) VTSecondPassAnalyzerPrependingAudioTimeFrom:]
	-[CSAsset(AttSiri) VTSecondPassAnalyzerTrailingAudioTimeFrom:]
	-[CSAsset(AttSiri) VTSecondPassConfigPathRecognizerExistFrom:]
	-[CSAsset(AttSiri) VTSecondPassConfigPathRecognizerFrom:]
	-[CSAsset(AttSiri) VTSecondPassUseKeywordSpottingFrom:]
	-[CSAsset(AttSiri) VTSecondPassRecognizerThresholdOffsetFrom:]
	-[CSAsset(AttSiri) VTSecondPassRecognizerScoreScaleFactorFrom:]
	-[CSAsset(AttSiri) VTSecondPassRecognizerTokenFrom:]
	-[CSAsset(AttSiri) VTSecondPassTwoShotFeedbackDelayFrom:]
	-[CSAsset(AttSiri) VTSecondPassTwoShotFeedbackDelayRemoraFrom:]
	-[CSAsset(AttSiri) VTSecondPassShadowMicScoreThresholdForVADGating:]
	-[CSAsset(AttSiri) VTSecondPassRejectLoggingThresholdFrom:]
	-[CSAsset(AttSiri) assetsRequireSecondPass]
	-[CSAsset(AttSiri) VTSecondPassPHSRejectLoggingThresholdFrom:]
	-[CSAsset(AttSiri) VTSecondPassPHSThresholdFrom:]
	-[CSAsset(AttSiri) VTSecondPassPrependingTimeFrom:]
	-[CSAsset(AttSiri) supportedVTPhrasesInfoForCategory:]
	-[CSAsset(AttSiri) ctcKwdToPhraseIdMapForCategory:]
	-[CSAsset(AttSiri) satScoreThreshold]
	-[CSAsset(AttSiri) containsSpeakerRecognitionCategory]
	-[CSAsset(AttSiri) psrCombinationWeight]
	-[CSAsset(AttSiri) satImplicitProfileThreshold]
	-[CSAsset(AttSiri) satImplicitProfileDeltaThreshold]
	-[CSAsset(AttSiri) satVTImplicitThreshold]
	-[CSAsset(AttSiri) pruningExplicitUttThresholdSAT]
	-[CSAsset(AttSiri) pruningExplicitUttThresholdPSR]
	-[CSAsset(AttSiri) pruningThresholdSAT]
	-[CSAsset(AttSiri) pruningThresholdPSR]
	-[CSAsset(AttSiri) pruningNumRetentionUtterance]
	-[CSAsset(AttSiri) maxAllowedEnrollmentUtterances]
	-[CSAsset(AttSiri) voiceProfilePruningCookie]
	-[CSAsset(AttSiri) keywordDetectorQuasarConfigFilePath]
	-[CSAsset(AttSiri) keywordDetectorNDAPIConfigFilePath]
	-[CSAsset(AttSiri) satImplicitTrainingEnabled]
	-[CSAsset(AttSiri) containsMultiUserThresholds]
	-[CSAsset(AttSiri) keywordDetectorThreshold]
	-[CSAsset(AttSiri) keywordDetectorConfigPathRecognizer]
	-[CSAsset(AttSiri) keywordDetectorWaitTimeSinceVT]
	-[CSAsset(AttSiri) progCheckerConfigFile]
	-[CSAsset(AttSiri) _mapInputOriginFromAssetToCSAudioRecordType:]
	-[CSAsset(AttSiri) contConvConfigFile]
	-[CSAsset(AttSiri) supportedInputOrigins]
	-[CSAsset(AttSiri) checkerThresholds]
	-[CSAsset(AttSiri) progCheckerShadowMode]
	-[CSAsset(AttSiri) contConvThresholds]
	-[CSAsset(AttSiri) _getContinuousVoiceTriggerAssetCategory]

CSAudioRecordContext(AVVC)
	// instance methods
	-[CSAudioRecordContext(AVVC) avvcContextSettings]
	-[CSAudioRecordContext(AVVC) isPluginContext]

MAAsset(CSAsset)
	// instance methods
	-[MAAsset(CSAsset) _version]
	-[MAAsset(CSAsset) _footprint]
	-[MAAsset(CSAsset) path]
	-[MAAsset(CSAsset) isPremium]
	-[MAAsset(CSAsset) isDownloading]
	-[MAAsset(CSAsset) _compatibilityVersion]
	-[MAAsset(CSAsset) canBePurged]
	-[MAAsset(CSAsset) getCSAssetOfType:]
	-[MAAsset(CSAsset) isCSAssetInstalled]
	-[MAAsset(CSAsset) isLatestCompareTo:]

(XPCObject)
	// instance methods
	-[(XPCObject) _cs_initWithXPCObject:]
	-[(XPCObject) _cs_xpcObject]
	-[(XPCObject) shortFormForUUID]

NSMapTable(Indexing)
	// instance methods
	-[NSMapTable(Indexing) objectForKeyedSubscript:]
	-[NSMapTable(Indexing) setObject:forKeyedSubscript:]
	-[NSMapTable(Indexing) enumerateObjects:]

OSDFeatures(Logging)
	// instance methods
	-[OSDFeatures(Logging) dictionary]

CSAudioChunk(FidesRecordInfoHelper)
	// instance methods
	-[CSAudioChunk(FidesRecordInfoHelper) _fidesRecordInfo]

(XPCObject)
	// instance methods
	-[(XPCObject) _cs_initWithXPCObject:]
	-[(XPCObject) _cs_xpcObject]

(XPCObject)
	// instance methods
	-[(XPCObject) _cs_initWithXPCObject:]
	-[(XPCObject) _cs_xpcObject]

NSHashTable(Indexing)
	// instance methods
	-[NSHashTable(Indexing) _cs_isHashTableEmpty]

(Nvi)
	// instance methods
	-[(Nvi) _cs_initWithXPCObject:]
	-[(Nvi) _cs_xpcObject]
	-[(Nvi) rawMicChannelsDataWithNumSamplesPerChannel:]
	-[(Nvi) splitAudioDataToReachSampleCount:currSampleCount:numBytesPerSample:completionHandler:]
	-[(Nvi) strRepForFloatData]

(XPCObject)
	// instance methods
	-[(XPCObject) _cs_initWithXPCObject:]
	-[(XPCObject) _cs_xpcObject]

AVVCContextSettings(debugDescription)
	// instance methods
	-[AVVCContextSettings(debugDescription) debugDescription]

AVVCStartRecordSettings(debugDescription)
	// instance methods
	-[AVVCStartRecordSettings(debugDescription) debugDescription]

AVVCAudioBuffer(remoteVoiceActivityVADBuffer)
	// instance methods
	-[AVVCAudioBuffer(remoteVoiceActivityVADBuffer) remoteVoiceActivityVADBuffer]

01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAccessibilityObserver 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAnalytics 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAssertionContext 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAudioPlaybackRequest 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFBluetoothDeviceInfo 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFBluetoothWirelessSplitterSessionStateObserver 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFBundleResourceManager 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFDeviceRingerSwitchObserver 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFError 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFFeatureFlags 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFHeartBeat 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFInstanceContext 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFKeyValueObservingDeliveryOptions 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMemoryPressureObserver 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMultiUserConnection 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMyriadContext 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMyriadGoodnessScoreOverrideState 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMyriadMonitor 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMyriadPerceptualAudioHash 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFNotifyObserver 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFOneArgumentSafetyBlock 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFPreferences 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSafetyBlock 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriActivationConnection 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriDebugUIRequest 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriTaskmaster 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFUIApplicationSiriTaskDeliverer 
01 00 0500 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFWatchdogTimer 
01 00 0200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAsset 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioChannelLayout 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioFormat 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioPCMBuffer 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioPlayer 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioTime 
01 00 0200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVExternalDevice 
01 00 0200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 0200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 1f00 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCAudioBuffer 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCConfigureAlertBehaviorSettings 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCContextSettings 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCDuckOverride 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCDuckSettings 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCPrepareRecordSettings 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCSessionFactory 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVCStartRecordSettings 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVoiceController 
01 00 2f00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVVoiceTriggerClient 
01 00 1a40 /System/Library/PrivateFrameworks/SiriAnalytics.framework/SiriAnalytics: AssistantSiriAnalytics 
01 00 2640 /System/Library/PrivateFrameworks/CoreEmbeddedSpeechRecognition.framework/CoreEmbeddedSpeechRecognition: CESRTrialAssetManager 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSADPPreventStandbyAssertion 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAsset 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioChunk 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioChunkForTV 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioCircularBuffer 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioDecoder 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioFileManager 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioPlayingAppMonitor 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioPowerMeter 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioRecordContext 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioTimeConverter 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioTimeConverterPool 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSAudioZeroFilter 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSBeepCanceller 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSConfig 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSDarwinVoiceTriggerEventInfoProvider 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSDiagnosticReporter 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSDispatchGroup 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSFAudioMetricsSelfLogger 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSFAudioStreamBasicDescriptionFactory 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSFLPCMTypeConverter 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSFPreferences 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSFTimeUtils 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSFVoiceTriggerEventInfoSelfLogger 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSOSTransaction 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSPlainAudioFileWriter 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSPolicy 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSPowerLogger 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSRemoteAssetManager 
01 00 1000 /System/Library/PrivateFrameworks/CoreSpeechFoundation.framework/CoreSpeechFoundation: CSUtils 
01 00 2900 /System/Library/Frameworks/CallKit.framework/CallKit: CXCallObserver 
01 00 1c00 /System/Library/PrivateFrameworks/DistributedEvaluation.framework/DistributedEvaluation: DESRecordStore 
01 00 1b40 /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition: EARCaesuraSilencePosteriorGenerator 
01 00 2200 /System/Library/Frameworks/HealthKit.framework/HealthKit: HKHealthStore 
01 00 2300 /System/Library/PrivateFrameworks/LocalSpeechRecognitionBridge.framework/LocalSpeechRecognitionBridge: LBLocalSpeechRecognizerClient 
01 00 0600 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAsset 
01 00 0600 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAssetQuery 
01 00 0600 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MADownloadOptions 
01 00 2000 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHCarplayLanguageMismatch 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHClientEvent 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHClientEventMetadata 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHEndpointDelayContext 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHEndpointDetected 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHEndpointFeaturesAtEndpoint 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHEndpointLatencyInfoReported 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHEndpointerTimeoutMetadata 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: MHSchemaMHStatisticDistributionInfo 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSExpression 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 2c00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOutputStream 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 3000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 2540 /System/Library/PrivateFrameworks/SpeechDetector.framework/SpeechDetector: OSDAnalyzer 
01 00 2540 /System/Library/PrivateFrameworks/SpeechDetector.framework/SpeechDetector: OSDFeatures 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaAudioFirstBufferRecorded 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaAudioStopRecording 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaAudioStopRecordingStarted 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaHardwareInterfaceIdentifier 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaRequestLink 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaRequestLinkInfo 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaSiriCue 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUEILaunchContext 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUEILaunchStarted 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUEIUserSpeakingContext 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUEIUserSpeakingEnded 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUEIUserSpeakingStarted 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUUID 
01 00 1200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaVersion 
01 00 1900 /System/Library/Frameworks/SoundAnalysis.framework/SoundAnalysis: SNAudioStreamAnalyzer 
01 00 1900 /System/Library/Frameworks/SoundAnalysis.framework/SoundAnalysis: SNDetectSpeechUtteranceRequest 
01 00 1900 /System/Library/Frameworks/SoundAnalysis.framework/SoundAnalysis: SNEstimateDirectionOfArrivalRequest 
01 00 1540 /System/Library/PrivateFrameworks/SiriObservation.framework/SiriObservation: SOClockAlarmObserver 
01 00 1540 /System/Library/PrivateFrameworks/SiriObservation.framework/SiriObservation: SOClockTimerObserver 
01 00 1540 /System/Library/PrivateFrameworks/SiriObservation.framework/SiriObservation: SOMediaNowPlayingObserver 
01 00 0d40 /System/Library/PrivateFrameworks/SpeakerRecognition.framework/SpeakerRecognition: SSRSpeakerRecognitionContext 
01 00 0d40 /System/Library/PrivateFrameworks/SpeakerRecognition.framework/SpeakerRecognition: SSRSpeakerRecognitionController 
01 00 0d40 /System/Library/PrivateFrameworks/SpeakerRecognition.framework/SpeakerRecognition: SSRUtils 
01 00 0d40 /System/Library/PrivateFrameworks/SpeakerRecognition.framework/SpeakerRecognition: SSRVoiceProfileManager 
01 00 0d40 /System/Library/PrivateFrameworks/SpeakerRecognition.framework/SpeakerRecognition: SSRVoiceProfileRetrainingContext 
01 00 2700 /System/Library/PrivateFrameworks/Trial.framework/Trial: TRIClient 
01 00 2800 /System/Library/PrivateFrameworks/TrialProto.framework/TrialProto: TRINamespace 
01 00 1800 /System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger: VTBlobBuilder 
01 00 1800 /System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger: VTPreferences 
01 00 1800 /System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger: VTStateManager 
01 00 1800 /System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger: VTUtilities 
01 00 1b40 /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition: _EAREndpointFeatures 
01 00 1b40 /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition: _EAREndpointer 
01 00 1b40 /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition: _EARLanguageDetector 
01 00 1b40 /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition: _EARLanguageDetectorRequestContext 
01 00 1b40 /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition: _EARSpeechRecognizer 
01 00 1b40 /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition: _EARSyncSpeechRecognizer 
