|| __DATA.__data _VSSpeechSynthesizerNotificationSynthesisDone
|| __DATA.__objc_data _OBJC_CLASS_$_VSDurationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_VSLocalizedString
|| __DATA.__objc_data _OBJC_CLASS_$_VSPhonemeTool
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionAction
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionConfirmAction
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionDisambiguateAction
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionRecognizeAction
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionResult
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionSession
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionSpeakAction
|| __DATA.__objc_data _OBJC_CLASS_$_VSRecognitionURLAction
|| __DATA.__objc_data _OBJC_CLASS_$_VSSpeechCharacterSet
|| __DATA.__objc_data _OBJC_CLASS_$_VSTextPreProcessor
|| __DATA.__objc_data _OBJC_METACLASS_$_VSDurationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_VSLocalizedString
|| __DATA.__objc_data _OBJC_METACLASS_$_VSPhonemeTool
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionAction
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionConfirmAction
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionDisambiguateAction
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionRecognizeAction
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionResult
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionSession
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionSpeakAction
|| __DATA.__objc_data _OBJC_METACLASS_$_VSRecognitionURLAction
|| __DATA.__objc_data _OBJC_METACLASS_$_VSSpeechCharacterSet
|| __DATA.__objc_data _OBJC_METACLASS_$_VSTextPreProcessor
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSCacheUpdateListener._dataProviders
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSCacheUpdateListener._flushTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSCacheUpdateListener._isListening
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSCacheUpdateListener._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSCacheUpdateListener._updateRequestQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionConfirmAction._confirmFlags
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionConfirmAction._confirmedAction
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionConfirmAction._deniedAction
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionDisambiguateAction._ambiguousPhoneticValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionDisambiguateAction._ambiguousValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionDisambiguateAction._context
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionDisambiguateAction._knownPhoneticValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionDisambiguateAction._knownValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionDisambiguateAction._repeatedSpokenFeedbackString
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionDisambiguateAction._sequenceTag
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._audioInputPath
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._debugDumpPath
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._keywords
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._levelInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._modelIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._recognition
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._recognizeFlags
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionRecognizeAction._results
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionSpeakAction._shouldTerminate
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSRecognitionURLAction._url
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSTextPreProcessor._languageID
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSTextPreProcessor._rules
|| __DATA.__objc_ivar _OBJC_IVAR_$_VSTextPreProcessor._tokenizer
|| __DATA_CONST.__const _VSKeepAliveEntitlement
|| __DATA_CONST.__const _VSKeepAliveMachServiceName
|| __DATA_CONST.__const _VSLocalizedStringKeyNetworkStallRetryInterstitial
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriCapabilities
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriClock
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriClockPlankTimer
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriHome
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriMusic
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriNews
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriWeather
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBHeySiriWeather2
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBSiriCapabilities
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBSiriCapabilityClock
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBSiriCapabilityHome
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBSiriCapabilityMusic
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBSiriCapabilityNews
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBSiriCapabilityWeather
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBSiriIntro
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBTrySay0
|| __DATA_CONST.__const _VSLocalizedStringKeyOOBTrySay1
|| __DATA_CONST.__const _VSTTSEntitlement
|| __DATA_CONST.__const _VSTTSMachServiceName
|| __DATA_CONST.__const _VSVoiceResourceAssetConfigPlist
|| __DATA_CONST.__const _kVSErrorDomain
|| __DATA_CONST.__const _kVSFrameworkBundleIdentifier
|| __DATA_CONST.__const _kVSKeywordIndexDidChangeNotification
|| __DATA_CONST.__const _kVSLogBundlePlistExtension
|| __DATA_CONST.__const _kVSPreferencesLoggingDomain
|| __DATA_CONST.__const _kVSPreferencesLoggingLogLevelKey
|| __DATA_CONST.__const _kVSPreferencesLoggingOutputLevelKey
|| __DATA_CONST.__const _kVSPreferencesSpokenLanguageChangedNotification
|| __DATA_CONST.__const _kVSRecognitionAllDefaultModelIdentifier
|| __DATA_CONST.__const _kVSRecognitionSessionKeywordsDidChangeNotification
|| __DATA_CONST.__const _kVSServerDiedNotification
|| __DATA_CONST.__const _kVSServerRecognitionCancelledNotification
|| __DATA_CONST.__const _kVSServerRecognitionErrorCodeKey
|| __DATA_CONST.__const _kVSServerRecognitionErrorDescriptionKey
|| __DATA_CONST.__const _kVSServerRecognitionErrorNotification
|| __DATA_CONST.__const _kVSServerRecognitionPreparedNotification
|| __DATA_CONST.__const _kVSServerRecognitionResultsKey
|| __DATA_CONST.__const _kVSServerRecognitionResultsNotification
|| __DATA_CONST.__const _kVSServerRecognitionStartedNotification
|| __DATA_CONST.__const _kVSSpeechTextClassAttribute
|| __DATA_CONST.__const _kVSSpeechTextClassName
|| __DATA_CONST.__const _kVSSpeechTextClassTitle
|| __DATA_CONST.__const _kVSVocalizerResourceAssetInstalledNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSAssetBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSAudioData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSCacheUpdateListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSDownloadMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSDownloadOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSFeatureFlags
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSInstrumentMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSMappedData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSMobileAssetsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSNeuralTTSUtils
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSOpusDecoder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSOpusEncoder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSPreferencesInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSPresynthesizedAudioRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSSpeechEngine
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSSpeechInternalSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSSpeechRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSSpeechSynthesisCallbackResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSSpeechSynthesizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSSpeechSynthesizerPreference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSSpeechWordTimingInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSTrialService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSTrialVoice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSTrialVoiceResource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSVoiceAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSVoiceAssetSelection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSVoiceResourceAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSVoiceSubscription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VSWordTimingService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSAssetBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSAudioData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSCacheUpdateListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSDownloadMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSDownloadOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSFeatureFlags
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSInstrumentMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSMappedData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSMobileAssetsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSNeuralTTSUtils
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSOpusDecoder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSOpusEncoder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSPreferencesInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSPresynthesizedAudioRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSSpeechEngine
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSSpeechInternalSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSSpeechRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSSpeechSynthesisCallbackResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSSpeechSynthesizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSSpeechSynthesizerPreference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSSpeechWordTimingInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSTrialService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSTrialVoice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSTrialVoiceResource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSVoiceAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSVoiceAssetSelection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSVoiceResourceAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSVoiceSubscription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VSWordTimingService
|| __TEXT.__const _VSAudioFormat16khzPCM
|| __TEXT.__const _VSAudioFormat48khzOpus
|| __TEXT.__const _VSAudioFormat48khzPCM
|| __TEXT.__const _VSDefaultPitch
|| __TEXT.__const _VSDefaultRate
|| __TEXT.__const _VSDefaultVolume
|| __TEXT.__const _VSRecognitionModelMaximumClassValueWeight
|| __TEXT.__const _VSRecognitionModelMinimumClassValueWeight
|| __TEXT.__const _VSRecognitionModelNeutralClassValueWeight
|| __TEXT.__text _VSAbsoluteTimeToSecond
|| __TEXT.__text _VSAttributedStringCreateFromSerializedAttributes
|| __TEXT.__text _VSAttributedStringCreateSerializedAttributes
|| __TEXT.__text _VSCFArrayGetValueAtIndexIfType
|| __TEXT.__text _VSCFAttributedStringCreateStringByBracketingAttributeWithString
|| __TEXT.__text _VSCFAttributedStringGetAttributeAndLongestEffectiveRange
|| __TEXT.__text _VSCFDictionaryGetValueIfType
|| __TEXT.__text _VSCFPropertyListCreateBinaryXMLData
|| __TEXT.__text _VSCFPropertyListCreateFromBinaryXMLData
|| __TEXT.__text _VSCFSetCreateMutableArray
|| __TEXT.__text _VSCFSetSendDifferences
|| __TEXT.__text _VSCFURLDeleteDirectoryContents
|| __TEXT.__text _VSCopyContentsOfDirectoryAtURL
|| __TEXT.__text _VSCopyModificationDateForFileAtURL
|| __TEXT.__text _VSCopyUpdatableRecognitionModelDataProviderInfos
|| __TEXT.__text _VSCreate4CCString
|| __TEXT.__text _VSCreateDataFromContentsOfURL
|| __TEXT.__text _VSCreateDirectory
|| __TEXT.__text _VSCreateTemporaryDirectory
|| __TEXT.__text _VSCreateURLAndDirectory
|| __TEXT.__text _VSDeleteItemAtURL
|| __TEXT.__text _VSDirectoryExistsAtURL
|| __TEXT.__text _VSFileExistsAtURL
|| __TEXT.__text _VSGetLogDefault
|| __TEXT.__text _VSGetLogEvent
|| __TEXT.__text _VSKeywordIndexCopyDefaultURL
|| __TEXT.__text _VSKeywordIndexCopyKeywordsForModelIdentifier
|| __TEXT.__text _VSKeywordIndexCopyKeywordsForTopLevelModels
|| __TEXT.__text _VSKeywordIndexCreate
|| __TEXT.__text _VSKeywordIndexCreateWithURL
|| __TEXT.__text _VSKeywordIndexSaveToURL
|| __TEXT.__text _VSKeywordIndexSetKeywordsForClassIdentifier
|| __TEXT.__text _VSKeywordIndexSetKeywordsForModelIdentifier
|| __TEXT.__text _VSLogBundleCopyPath
|| __TEXT.__text _VSLogBundleCopyPathForFile
|| __TEXT.__text _VSLogBundleCopyURL
|| __TEXT.__text _VSLogBundleCopyURLForFile
|| __TEXT.__text _VSLogBundleCreate
|| __TEXT.__text _VSLogBundleCreateFromPath
|| __TEXT.__text _VSPluginRegistryRebuild
|| __TEXT.__text _VSPreferencesCopyAvailableLanguageIdentifiers
|| __TEXT.__text _VSPreferencesCopyAvailableOutputLanguageIdentifiers
|| __TEXT.__text _VSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences
|| __TEXT.__text _VSPreferencesCopyDefaultSpokenLanguageIdentifierForUserPreferences
|| __TEXT.__text _VSPreferencesCopySpokenLanguageIdentifier
|| __TEXT.__text _VSPreferencesCopySpokenLanguageIdentifierArray
|| __TEXT.__text _VSPreferencesCopyValueForKey
|| __TEXT.__text _VSPreferencesGetLogging
|| __TEXT.__text _VSPreferencesGetLoggingLevel
|| __TEXT.__text _VSPreferencesInitialize
|| __TEXT.__text _VSPreferencesSetLogging
|| __TEXT.__text _VSPreferencesSetLoggingLevel
|| __TEXT.__text _VSPreferencesSetSpokenLanguageIdentifier
|| __TEXT.__text _VSPreferencesSetValueForKey
|| __TEXT.__text _VSRecognitionBegin
|| __TEXT.__text _VSRecognitionCancel
|| __TEXT.__text _VSRecognitionConfigurationCacheUpdate
|| __TEXT.__text _VSRecognitionCopyDebugDumpPath
|| __TEXT.__text _VSRecognitionCopyResults
|| __TEXT.__text _VSRecognitionCreate
|| __TEXT.__text _VSRecognitionCreateForDisambiguation
|| __TEXT.__text _VSRecognitionDisambiguationContextCreate
|| __TEXT.__text _VSRecognitionDisambiguationContextCreateDictionaryRepresentation
|| __TEXT.__text _VSRecognitionDisambiguationContextCreateFromDictionaryRepresentation
|| __TEXT.__text _VSRecognitionDisambiguationContextGetAmbiguousClassValueAtIndex
|| __TEXT.__text _VSRecognitionDisambiguationContextGetAmbiguousClassValues
|| __TEXT.__text _VSRecognitionDisambiguationContextGetKnownClassValue
|| __TEXT.__text _VSRecognitionDisambiguationContextGetKnownClassValues
|| __TEXT.__text _VSRecognitionDisambiguationContextGetModelIdentifier
|| __TEXT.__text _VSRecognitionDisambiguationContextGetSequenceTag
|| __TEXT.__text _VSRecognitionDisambiguationContextGetTypeID
|| __TEXT.__text _VSRecognitionGetInputLevel
|| __TEXT.__text _VSRecognitionGetInputLevelDB
|| __TEXT.__text _VSRecognitionGetModelIdentifier
|| __TEXT.__text _VSRecognitionGetPreferredEngine
|| __TEXT.__text _VSRecognitionGetTypeID
|| __TEXT.__text _VSRecognitionIsActive
|| __TEXT.__text _VSRecognitionIsPrepared
|| __TEXT.__text _VSRecognitionModelCopyActiveLanguageIdentifier
|| __TEXT.__text _VSRecognitionModelCopyActiveLanguageIdentifierArray
|| __TEXT.__text _VSRecognitionModelCopyLanguageResourceURL
|| __TEXT.__text _VSRecognitionModelCopyResourceURL
|| __TEXT.__text _VSRecognitionModelCopyResourceURLForLanguage
|| __TEXT.__text _VSRecognitionModelDataProviderChanged
|| __TEXT.__text _VSRecognitionPluginInfoCreateString
|| __TEXT.__text _VSRecognitionPluginStringCopyInfo
|| __TEXT.__text _VSRecognitionPrepare
|| __TEXT.__text _VSRecognitionResultCopyClassIDsAndPhrases
|| __TEXT.__text _VSRecognitionResultCopyDescriptionWithIndent
|| __TEXT.__text _VSRecognitionResultCreate
|| __TEXT.__text _VSRecognitionResultCreateDictionaryRepresentation
|| __TEXT.__text _VSRecognitionResultCreateDictionaryRepresentationWithResultHandlerInfo
|| __TEXT.__text _VSRecognitionResultCreateFromDictionaryRepresentation
|| __TEXT.__text _VSRecognitionResultGetContext
|| __TEXT.__text _VSRecognitionResultGetHandlerInfoString
|| __TEXT.__text _VSRecognitionResultGetModelIdentifier
|| __TEXT.__text _VSRecognitionResultGetPhraseAtIndex
|| __TEXT.__text _VSRecognitionResultGetPhraseCount
|| __TEXT.__text _VSRecognitionResultGetTypeID
|| __TEXT.__text _VSRecognitionResultSetContext
|| __TEXT.__text _VSRecognitionSetAudioInputPath
|| __TEXT.__text _VSRecognitionSetBluetoothInputAllowed
|| __TEXT.__text _VSRecognitionSetDebugDumpPath
|| __TEXT.__text _VSRecognitionSetEngineResetRequired
|| __TEXT.__text _VSRecognitionSetInputLevelUpdateInterval
|| __TEXT.__text _VSRecognitionSetPreferredEngine
|| __TEXT.__text _VSVocalizerAssetExistsForLanguage
|| __TEXT.__text _VSVocalizerCopyDefaultAssetLanguage
|| __TEXT.__text _VSVocalizerCopyFileNameForToneName
|| __TEXT.__text _VSVocalizerCopyPathForBuiltInVoice
|| __TEXT.__text _VSVocalizerCopyPathForCommonResources
|| __TEXT.__text _VSVocalizerCopyPathForLocalizedResources
|| __TEXT.__text _VSVocalizerCopyPathForResources
|| __TEXT.__text _VSVocalizerCopyPathForTones
|| __TEXT.__text _VSVocalizerCopyURLForAssets
|| __TEXT.__text _VSVocalizerCopyVoiceEngineFormatVersionForLanguage
|| __TEXT.__text _VSVocalizerCopyVoiceEngineFormatVersions
|| __TEXT.__text _VSVocalizerDeleteAssetForLanguage
|| __TEXT.__text _VSVocalizerShouldUseAssetForLanguage
|| __TEXT.__text __VSBundleCopyResourceURL
|| __TEXT.__text __VSCopyAvailableLanguageIdentifiers
|| __TEXT.__text __VSCopyAvailableOutputLanguageIdentifiers
|| __TEXT.__text __VSCopyDefaultLanguageIdentifierFallbackMapURL
|| __TEXT.__text __VSCopyDefaultOutputLanguageIdentifierFallbackMapURL
|| __TEXT.__text __VSCopyFallbackLanguageIdentifierForLanguageIdentifier
|| __TEXT.__text __VSCopyFallbackLanguageIdentifierForLocale
|| __TEXT.__text __VSCopyLanguageArrayForLanguageIdentifier
|| __TEXT.__text __VSCopyLanguageCodeFromLanguageIdentifier
|| __TEXT.__text __VSCopyLanguageIdentifierForLocale
|| __TEXT.__text __VSCopyLocalizedString
|| __TEXT.__text __VSCopyQualifiedLanguageIdentifierForLanguageCode
|| __TEXT.__text __VSLanguageIdentifierIsLanguageOnly
__ AVFAudio: _OBJC_CLASS_$_AVAudioCompressedBuffer
__ AVFAudio: _OBJC_CLASS_$_AVAudioConverter
__ AVFAudio: _OBJC_CLASS_$_AVAudioFormat
__ AVFAudio: _OBJC_CLASS_$_AVAudioPCMBuffer
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AppSupport: _CPCreateMIGServerSourceWithContext
__ AppSupport: _CPGetContextForCalloutCurrentMIGServerSource
__ AudioToolbox: _AudioConverterDispose
__ AudioToolbox: _AudioConverterFillComplexBuffer
__ AudioToolbox: _AudioConverterNew
__ AudioToolbox: _AudioConverterReset
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendArray
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayApplyFunction
__ CoreFoundation: _CFArrayContainsValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayCreateMutableCopy
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetFirstIndexOfValue
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArraySortValues
__ CoreFoundation: _CFAttributedStringCreateMutable
__ CoreFoundation: _CFAttributedStringGetAttribute
__ CoreFoundation: _CFAttributedStringGetAttributeAndLongestEffectiveRange
__ CoreFoundation: _CFAttributedStringGetAttributesAndLongestEffectiveRange
__ CoreFoundation: _CFAttributedStringGetLength
__ CoreFoundation: _CFAttributedStringGetString
__ CoreFoundation: _CFAttributedStringReplaceString
__ CoreFoundation: _CFAttributedStringSetAttributes
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyBundleLocalizations
__ CoreFoundation: _CFBundleCopyLocalizationsForPreferences
__ CoreFoundation: _CFBundleCopyLocalizedString
__ CoreFoundation: _CFBundleCopyResourceURL
__ CoreFoundation: _CFBundleCopyResourceURLForLocalization
__ CoreFoundation: _CFBundleCopyResourceURLsOfType
__ CoreFoundation: _CFBundleGetBundleWithIdentifier
__ CoreFoundation: _CFCharacterSetGetPredefined
__ CoreFoundation: _CFCopyDescription
__ CoreFoundation: _CFCopyHomeDirectoryURLForUser
__ CoreFoundation: _CFDataAppendBytes
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateMutableCopy
__ CoreFoundation: _CFDataCreateWithBytesNoCopy
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetMutableBytePtr
__ CoreFoundation: _CFDateCompare
__ CoreFoundation: _CFDateFormatterCreate
__ CoreFoundation: _CFDateFormatterCreateStringWithAbsoluteTime
__ CoreFoundation: _CFDateFormatterSetFormat
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFErrorCreateWithUserInfoKeysAndValues
__ CoreFoundation: _CFErrorGetCode
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetRetainCount
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFHash
__ CoreFoundation: _CFLocaleCopyCurrent
__ CoreFoundation: _CFLocaleCopyPreferredLanguages
__ CoreFoundation: _CFLocaleCreate
__ CoreFoundation: _CFLocaleGetValue
__ CoreFoundation: _CFMachPortCreateWithPort
__ CoreFoundation: _CFMachPortGetPort
__ CoreFoundation: _CFMachPortInvalidate
__ CoreFoundation: _CFMachPortSetInvalidationCallBack
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFPropertyListCreateWithStream
__ CoreFoundation: _CFPropertyListWrite
__ CoreFoundation: _CFReadStreamClose
__ CoreFoundation: _CFReadStreamCreateWithBytesNoCopy
__ CoreFoundation: _CFReadStreamCreateWithFile
__ CoreFoundation: _CFReadStreamOpen
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopSourceCreate
__ CoreFoundation: _CFRunLoopSourceInvalidate
__ CoreFoundation: _CFRunLoopSourceSignal
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _CFSetAddValue
__ CoreFoundation: _CFSetApplyFunction
__ CoreFoundation: _CFSetContainsValue
__ CoreFoundation: _CFSetCreateMutable
__ CoreFoundation: _CFSetGetCount
__ CoreFoundation: _CFSetRemoveValue
__ CoreFoundation: _CFStringAppend
__ CoreFoundation: _CFStringAppendFormat
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCompareWithOptions
__ CoreFoundation: _CFStringCreateArrayBySeparatingStrings
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateMutable
__ CoreFoundation: _CFStringCreateMutableCopy
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithFileSystemRepresentation
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringCreateWithSubstring
__ CoreFoundation: _CFStringFind
__ CoreFoundation: _CFStringFindCharacterFromSet
__ CoreFoundation: _CFStringGetBytes
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetCStringPtr
__ CoreFoundation: _CFStringGetCharacterAtIndex
__ CoreFoundation: _CFStringGetCharacters
__ CoreFoundation: _CFStringGetCharactersPtr
__ CoreFoundation: _CFStringGetFileSystemRepresentation
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetMaximumSizeForEncoding
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFStringTokenizerAdvanceToNextToken
__ CoreFoundation: _CFStringTokenizerCreate
__ CoreFoundation: _CFStringTokenizerGetCurrentTokenRange
__ CoreFoundation: _CFStringTokenizerSetString
__ CoreFoundation: _CFURLCopyAbsoluteURL
__ CoreFoundation: _CFURLCopyFileSystemPath
__ CoreFoundation: _CFURLCopyLastPathComponent
__ CoreFoundation: _CFURLCopyPathExtension
__ CoreFoundation: _CFURLCreateCopyAppendingPathComponent
__ CoreFoundation: _CFURLCreateCopyDeletingPathExtension
__ CoreFoundation: _CFURLCreateWithFileSystemPath
__ CoreFoundation: _CFURLGetFileSystemRepresentation
__ CoreFoundation: _CFURLGetString
__ CoreFoundation: _CFURLHasDirectoryPath
__ CoreFoundation: _CFWriteStreamClose
__ CoreFoundation: _CFWriteStreamCopyProperty
__ CoreFoundation: _CFWriteStreamCreateWithAllocatedBuffers
__ CoreFoundation: _CFWriteStreamCreateWithFile
__ CoreFoundation: _CFWriteStreamOpen
__ CoreFoundation: _CFWriteStreamWrite
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _NSURLContentAccessDateKey
__ CoreFoundation: _NSURLFileAllocatedSizeKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: __CFPreferencesWriteManagedDomainForUser
__ CoreFoundation: __CFRuntimeBridgeClasses
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFAllocatorNull
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFErrorDescriptionKey
__ CoreFoundation: _kCFLocaleCountryCode
__ CoreFoundation: _kCFLocaleCurrentLocaleDidChangeNotification
__ CoreFoundation: _kCFNull
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFStreamPropertyDataWritten
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFTypeSetCallBacks
__ Foundation: _NSClassFromString
__ Foundation: _NSFileModificationDate
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSStringFromRange
__ Foundation: _NSTemporaryDirectory
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSAutoreleasePool
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConditionLock
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_CLASS_$_NSXPCListenerEndpoint
__ MobileAsset: _ASAttributeCompatibilityVersion
__ MobileAsset: _ASAttributeContentVersion
__ MobileAsset: _ASAttributeDownloadSize
__ MobileAsset: _ASAttributeMasteredVersion
__ MobileAsset: _ASAttributeUnarchivedSize
__ MobileAsset: _MAMigrateAssets
__ MobileAsset: _MAStringForMACancelDownloadResult
__ MobileAsset: _MAStringForMADownloadResult
__ MobileAsset: _MAStringForMAOperationResult
__ MobileAsset: _MAStringForMAPurgeResult
__ MobileAsset: _MAStringForMAQueryResult
__ MobileAsset: _OBJC_CLASS_$_MAAsset
__ MobileAsset: _OBJC_CLASS_$_MAAssetQuery
__ MobileAsset: _OBJC_CLASS_$_MADownloadOptions
__ SiriAnalytics: _OBJC_CLASS_$_AssistantSiriAnalytics
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUUID
__ SiriInstrumentation: _OBJC_CLASS_$_TTSSchemaTTSClientEvent
__ SiriInstrumentation: _OBJC_CLASS_$_TTSSchemaTTSClientEventMetadata
__ SiriInstrumentation: _OBJC_CLASS_$_TTSSchemaTTSClientSpeechContext
__ SiriInstrumentation: _OBJC_CLASS_$_TTSSchemaTTSSpeechFailed
__ SiriTTS: __ZN10Observable15remove_observerENSt3__110shared_ptrI8ObserverEE
__ SiriTTS: __ZN10Observable8on_eventEPKcNSt3__18functionIFvPKvEEE
__ SiriTTS: __ZN14NeuralTTSUtils16is_amx_availableEv
__ SiriTTS: __ZN14NeuralTTSUtils16is_ane_availableEv
__ SiriTTS: __ZN14NeuralTTSUtils17compile_ane_modelEPKc
__ SiriTTS: __ZN14NeuralTTSUtils17has_ota_ane_modelEPKc
__ SiriTTS: __ZN14NeuralTTSUtils20is_ane_only_platformEv
__ SiriTTS: __ZN14NeuralTTSUtils21is_ane_model_compiledEPKc
__ SiriTTS: __ZN14NeuralTTSUtils21is_neural_voice_readyEPKc
__ SiriTTS: __ZN14NeuralTTSUtils22is_neural_tts_platformEv
__ SiriTTS: __ZN14NeuralTTSUtils23should_use_neural_voiceEPKc
__ SiriTTS: __ZN14NeuralTTSUtils27has_compact_neural_fallbackEPKc
__ SiriTTS: __ZN14NeuralTTSUtils33check_thermal_critical_conditionsEv
__ SiriTTS: __ZN14TTSSynthesizer10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8_
__ SiriTTS: __ZN14TTSSynthesizer13get_event_busEv
__ SiriTTS: __ZN14TTSSynthesizer14stop_synthesisEv
__ SiriTTS: __ZN14TTSSynthesizer15set_neural_costENS_19NeuralComputingCostE
__ SiriTTS: __ZN14TTSSynthesizer15unload_resourceERKNSt3__110shared_ptrIN7SiriTTS13VoiceResourceEEE
__ SiriTTS: __ZN14TTSSynthesizer19load_voice_resourceERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_
__ SiriTTS: __ZN14TTSSynthesizer19set_global_propertyENS_14GlobalPropertyEf
__ SiriTTS: __ZN14TTSSynthesizer20has_phatic_responsesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ SiriTTS: __ZN14TTSSynthesizer20set_censor_plaintextEb
__ SiriTTS: __ZN14TTSSynthesizer21get_voice_descriptionEv
__ SiriTTS: __ZN14TTSSynthesizer22get_engine_descriptionEv
__ SiriTTS: __ZN14TTSSynthesizer34synthesize_text_with_markers_asyncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS0_6vectorIhNS4_IhEEEERNS9_INS_6MarkerENS4_ISD_EEEENS0_8functionIFiNS_15CallbackMessageEEEE
__ SiriTTS: __ZN14TTSSynthesizer7preheatEv
__ SiriTTS: __ZN14TTSSynthesizerC1Ev
__ SiriTTS: __ZN14TTSSynthesizerD1Ev
__ SiriTTS: __ZN7SiriTTS13TextToPhoneme15text_to_phonemeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
__ SiriTTS: __ZN7SiriTTS13TextToPhonemeC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_
__ SiriTTS: __ZN7SiriTTS16PhonemeSystemLHPE
__ SiriTTS: __ZN7SiriTTS19PhonemeSystemXSAMPAE
__ SiriTTS: __ZN7SiriTTS22PhonemeSystemNashvilleE
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSAudioData
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSAudioRequest
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSDaemonSession
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSInlineStreamingSignal
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSPhonemeRequest
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSSpeechRequest
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSSynthesisRequest
__ SiriTTSService: _OBJC_CLASS_$_SiriTTSSynthesisVoice
__ SoftLinking: __sl_dlopen
__ Trial: _OBJC_CLASS_$_TRIClient
__ Trial: _OBJC_CLASS_$_TRIDownloadOptions
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libMobileGestalt.dylib: _MGGetStringAnswer
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _NDR_record
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __DefaultRuneLocale
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___maskrune
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _bootstrap_look_up
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _ftruncate
__ libSystem.B.dylib: _geteuid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_destroy
__ libSystem.B.dylib: _mach_port_allocate
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_port_insert_right
__ libSystem.B.dylib: _mach_port_mod_refs
__ libSystem.B.dylib: _mach_port_set_attributes
__ libSystem.B.dylib: _mach_port_type
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _mig_dealloc_reply_port
__ libSystem.B.dylib: _mig_deallocate
__ libSystem.B.dylib: _mig_get_reply_port
__ libSystem.B.dylib: _mig_put_reply_port
__ libSystem.B.dylib: _mig_strncpy
__ libSystem.B.dylib: _mig_strncpy_zerofill
__ libSystem.B.dylib: _mkdir
__ libSystem.B.dylib: _mkdtemp
__ libSystem.B.dylib: _mmap
__ libSystem.B.dylib: _munmap
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _pthread_mutex_destroy
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _rand
__ libSystem.B.dylib: _random
__ libSystem.B.dylib: _rename
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _srandom
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _symlink
__ libSystem.B.dylib: _task_get_special_port
__ libSystem.B.dylib: _time
__ libSystem.B.dylib: _unlink
__ libSystem.B.dylib: _voucher_mach_msg_set
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
__ libc++.1.dylib: __ZNSt3__119__shared_weak_count14__release_weakEv
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTISt9exception
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv123__fundamental_type_infoE
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyCppObjectAtomic
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x10
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x5
__ libobjc.A.dylib: _objc_retain_x7
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
VSAssetBase : NSObject <NSSecureCoding>
 @property  NSString *bundleIdentifier
 @property  NSNumber *compatibilityVersion
 @property  NSNumber *contentVersion
 @property  NSString *masteredVersion
 @property  NSNumber *downloadSize
 @property  BOOL isPurgeable
 @property  long long storage

  // class methods
  +[VSAssetBase supportsSecureCoding]

  // instance methods
  -[VSAssetBase setStorage:]
  -[VSAssetBase contentVersion]
  -[VSAssetBase storage]
  -[VSAssetBase encodeWithCoder:]
  -[VSAssetBase setContentVersion:]
  -[VSAssetBase setDownloadSize:]
  -[VSAssetBase .cxx_destruct]
  -[VSAssetBase setCompatibilityVersion:]
  -[VSAssetBase setBundleIdentifier:]
  -[VSAssetBase masteredVersion]
  -[VSAssetBase compatibilityVersion]
  -[VSAssetBase bundleIdentifier]
  -[VSAssetBase setMasteredVersion:]
  -[VSAssetBase downloadSize]
  -[VSAssetBase initWithCoder:]
  -[VSAssetBase isPurgeable]
  -[VSAssetBase setIsPurgeable:]


VSInstrumentMetrics : NSObject <NSSecureCoding>
 @property  NSString *utterance
 @property  NSString *voiceAssetKey
 @property  NSString *voiceResourceAssetKey
 @property  NSString *audioOutputRoute
 @property  NSString *clientBundleIdentifier
 @property  NSString *experimentIdentifier
 @property  long long requestCreatedTimestamp
 @property  long long eagerRequestCreatedTimestampDiffs
 @property  long long synthesisBeginTimestamp
 @property  long long synthesisEndTimestamp
 @property  long long speechBeginTimestamp
 @property  long long speechEstimatedOutputBeginTimestamp
 @property  long long speechEndTimestamp
 @property  long long audioStartTimestampDiffs
 @property  long long serverFirstPacketTimestamp
 @property  long long serverLastPacketTimestamp
 @property  double serverStreamedAudioDuration
 @property  double audioDuration
 @property  BOOL isWarmStart
 @property  BOOL isServerTTS
 @property  BOOL isServerStreamTTS
 @property  BOOL isServerTimeout
 @property  BOOL isServerTTSRacing
 @property  BOOL canUseServerTTS
 @property  BOOL neuralAlignmentStall
 @property  BOOL neuralAudioClick
 @property  BOOL neuralFallback
 @property  long long promptCount
 @property  long long errorCode
 @property  long long sourceOfTTS
 @property  BOOL isSpeechRequest
 @property  BOOL isCacheHitFromDisk
 @property  BOOL isCacheHitFromMemory

  // class methods
  +[VSInstrumentMetrics supportsSecureCoding]
  +[VSInstrumentMetrics descriptionFormatter]
  +[VSInstrumentMetrics stringOfSourceOfTTS:]
  +[VSInstrumentMetrics vs_metricsFromSTSMetrics:]

  // instance methods
  -[VSInstrumentMetrics setErrorCode:]
  -[VSInstrumentMetrics errorCode]
  -[VSInstrumentMetrics setClientBundleIdentifier:]
  -[VSInstrumentMetrics clientBundleIdentifier]
  -[VSInstrumentMetrics encodeWithCoder:]
  -[VSInstrumentMetrics .cxx_destruct]
  -[VSInstrumentMetrics initWithCoder:]
  -[VSInstrumentMetrics utterance]
  -[VSInstrumentMetrics setUtterance:]
  -[VSInstrumentMetrics promptCount]
  -[VSInstrumentMetrics setPromptCount:]
  -[VSInstrumentMetrics audioDuration]
  -[VSInstrumentMetrics voiceAssetKey]
  -[VSInstrumentMetrics voiceResourceAssetKey]
  -[VSInstrumentMetrics audioOutputRoute]
  -[VSInstrumentMetrics setAudioOutputRoute:]
  -[VSInstrumentMetrics experimentIdentifier]
  -[VSInstrumentMetrics setExperimentIdentifier:]
  -[VSInstrumentMetrics serverStreamedAudioDuration]
  -[VSInstrumentMetrics setServerStreamedAudioDuration:]
  -[VSInstrumentMetrics setAudioDuration:]
  -[VSInstrumentMetrics isWarmStart]
  -[VSInstrumentMetrics setIsWarmStart:]
  -[VSInstrumentMetrics sourceOfTTS]
  -[VSInstrumentMetrics setSourceOfTTS:]
  -[VSInstrumentMetrics isServerTTSRacing]
  -[VSInstrumentMetrics setIsServerTTSRacing:]
  -[VSInstrumentMetrics neuralAlignmentStall]
  -[VSInstrumentMetrics setNeuralAlignmentStall:]
  -[VSInstrumentMetrics neuralAudioClick]
  -[VSInstrumentMetrics setNeuralAudioClick:]
  -[VSInstrumentMetrics neuralFallback]
  -[VSInstrumentMetrics setNeuralFallback:]
  -[VSInstrumentMetrics canUseServerTTS]
  -[VSInstrumentMetrics setCanUseServerTTS:]
  -[VSInstrumentMetrics isSpeechRequest]
  -[VSInstrumentMetrics timeToSpeakLatency]
  -[VSInstrumentMetrics setVoiceAssetKey:]
  -[VSInstrumentMetrics setVoiceResourceAssetKey:]
  -[VSInstrumentMetrics isSynthesisCached]
  -[VSInstrumentMetrics _clockFactor]
  -[VSInstrumentMetrics speechEstimatedOutputBeginTimestamp]
  -[VSInstrumentMetrics timeToPlaybackLatency]
  -[VSInstrumentMetrics audioQueueLatency]
  -[VSInstrumentMetrics ttsSynthesisLatency]
  -[VSInstrumentMetrics eagerRequestTimeGap]
  -[VSInstrumentMetrics realTimeFactor]
  -[VSInstrumentMetrics cappedRealTimeFactor]
  -[VSInstrumentMetrics serverStreamFirstPacketLatency]
  -[VSInstrumentMetrics serverStreamLastPacketLatency]
  -[VSInstrumentMetrics dictionaryMetrics]
  -[VSInstrumentMetrics requestCreatedTimestamp]
  -[VSInstrumentMetrics setRequestCreatedTimestamp:]
  -[VSInstrumentMetrics eagerRequestCreatedTimestampDiffs]
  -[VSInstrumentMetrics setEagerRequestCreatedTimestampDiffs:]
  -[VSInstrumentMetrics synthesisBeginTimestamp]
  -[VSInstrumentMetrics setSynthesisBeginTimestamp:]
  -[VSInstrumentMetrics synthesisEndTimestamp]
  -[VSInstrumentMetrics setSynthesisEndTimestamp:]
  -[VSInstrumentMetrics speechBeginTimestamp]
  -[VSInstrumentMetrics setSpeechBeginTimestamp:]
  -[VSInstrumentMetrics speechEndTimestamp]
  -[VSInstrumentMetrics setSpeechEndTimestamp:]
  -[VSInstrumentMetrics audioStartTimestampDiffs]
  -[VSInstrumentMetrics setAudioStartTimestampDiffs:]
  -[VSInstrumentMetrics serverFirstPacketTimestamp]
  -[VSInstrumentMetrics setServerFirstPacketTimestamp:]
  -[VSInstrumentMetrics serverLastPacketTimestamp]
  -[VSInstrumentMetrics setServerLastPacketTimestamp:]
  -[VSInstrumentMetrics isServerTTS]
  -[VSInstrumentMetrics setIsServerTTS:]
  -[VSInstrumentMetrics isServerStreamTTS]
  -[VSInstrumentMetrics setIsServerStreamTTS:]
  -[VSInstrumentMetrics isServerTimeout]
  -[VSInstrumentMetrics setIsServerTimeout:]
  -[VSInstrumentMetrics setIsSpeechRequest:]
  -[VSInstrumentMetrics isCacheHitFromDisk]
  -[VSInstrumentMetrics setIsCacheHitFromDisk:]
  -[VSInstrumentMetrics isCacheHitFromMemory]
  -[VSInstrumentMetrics setIsCacheHitFromMemory:]


VSVoiceAssetSelection : NSObject
 @property  VSVoiceAsset *voiceData
 @property  MAAsset *asset
 @property  VSTrialVoice *trialVoice
 @property  NSString *builtInVoicePath
 @property  NSString *voicePath
 @property  {_opaque_pthread_mutex_t=q[56c]} voicePathLock

  // instance methods
  -[VSVoiceAssetSelection voiceData]
  -[VSVoiceAssetSelection isInstalled]
  -[VSVoiceAssetSelection setBuiltInVoicePath:]
  -[VSVoiceAssetSelection voicePath]
  -[VSVoiceAssetSelection dealloc]
  -[VSVoiceAssetSelection setAsset:]
  -[VSVoiceAssetSelection .cxx_destruct]
  -[VSVoiceAssetSelection initWithTrialVoice:]
  -[VSVoiceAssetSelection voicePathLock]
  -[VSVoiceAssetSelection asset]
  -[VSVoiceAssetSelection size]
  -[VSVoiceAssetSelection setVoicePathLock:]
  -[VSVoiceAssetSelection preferenceScore]
  -[VSVoiceAssetSelection setVoiceData:]
  -[VSVoiceAssetSelection key]
  -[VSVoiceAssetSelection trialVoice]
  -[VSVoiceAssetSelection descriptiveKey]
  -[VSVoiceAssetSelection builtInVoicePath]
  -[VSVoiceAssetSelection isDownloading]
  -[VSVoiceAssetSelection init]
  -[VSVoiceAssetSelection setTrialVoice:]
  -[VSVoiceAssetSelection setVoicePath:]


VSMobileAssetsManager : NSObject
 @property  NSObject<OS_dispatch_queue> *assetQueryQueue
 @property  NSCache *cachedMAVoiceSelections
 @property  NSCache *cachedMAVoiceResources
 @property  VSTrialService *trialService

  // class methods
  +[VSMobileAssetsManager bundleIdentifierForVoiceType:]
  +[VSMobileAssetsManager typeFromBundleIdentifier:]
  +[VSMobileAssetsManager isVoiceAssetWellDefined:]
  +[VSMobileAssetsManager voiceResourceFromAsset:]
  +[VSMobileAssetsManager preinstallAssetsDirectory]
  +[VSMobileAssetsManager pickCorrectAssetFromLocalAssets:]
  +[VSMobileAssetsManager getLatestAssetFromArray:]
  +[VSMobileAssetsManager queryForLanguage:forType:voiceName:gender:footprint:returnTypes:]
  +[VSMobileAssetsManager sharedManager]
  +[VSMobileAssetsManager queryForVoiceResourceAsset:returnTypes:]
  +[VSMobileAssetsManager downloadOptionsWithBattery:]

  // instance methods
  -[VSMobileAssetsManager setCachedMAVoiceResources:]
  -[VSMobileAssetsManager downloadTrialVoiceResource:options:completion:]
  -[VSMobileAssetsManager _builtInVoiceForLanguage:]
  -[VSMobileAssetsManager removeVoiceAsset:completion:]
  -[VSMobileAssetsManager removeTrialVoice:completion:]
  -[VSMobileAssetsManager trialService]
  -[VSMobileAssetsManager definedVoicesForLanguage:voiceName:type:footprint:]
  -[VSMobileAssetsManager _removeTrialVoices:completion:]
  -[VSMobileAssetsManager installedLocalVoices]
  -[VSMobileAssetsManager migrateAssetsWithProgress:]
  -[VSMobileAssetsManager selectVoiceResourceAssetForLanguage:]
  -[VSMobileAssetsManager cachedMAVoiceSelections]
  -[VSMobileAssetsManager preferredDownloadForVoice:]
  -[VSMobileAssetsManager voiceDataFromAsset:]
  -[VSMobileAssetsManager _mobileAssetVoiceForLanguage:name:type:gender:footprint:]
  -[VSMobileAssetsManager _trialVoiceResourceWithLanguage:]
  -[VSMobileAssetsManager downloadVoiceAsset:options:progressUpdateHandler:]
  -[VSMobileAssetsManager preinstalledVoicesForLanguage:gender:name:]
  -[VSMobileAssetsManager cleanMobileAssetVoiceResourcesWithActiveLanguages:]
  -[VSMobileAssetsManager .cxx_destruct]
  -[VSMobileAssetsManager downloadVoiceResourceCatalogWithCompletion:]
  -[VSMobileAssetsManager downloadVoiceResource:options:completion:]
  -[VSMobileAssetsManager shouldDownloadTrialVoice:]
  -[VSMobileAssetsManager setTrialService:]
  -[VSMobileAssetsManager inactiveVoiceAssets]
  -[VSMobileAssetsManager assetQueryQueue]
  -[VSMobileAssetsManager removeMobileAssetVoiceResource:completion:]
  -[VSMobileAssetsManager candidateToDownloadForVoice:]
  -[VSMobileAssetsManager cachedMAVoiceResources]
  -[VSMobileAssetsManager downloadCatalog:options:completion:]
  -[VSMobileAssetsManager builtInVoices]
  -[VSMobileAssetsManager resetResourcesCache]
  -[VSMobileAssetsManager setAssetQueryQueue:]
  -[VSMobileAssetsManager resetCache]
  -[VSMobileAssetsManager _purgeMobileAsset:]
  -[VSMobileAssetsManager downloadCatalog:options:]
  -[VSMobileAssetsManager preinstallAssetsMetadata]
  -[VSMobileAssetsManager installedTrialVoicesForType:voiceName:language:footprint:]
  -[VSMobileAssetsManager installedTrialVoiceResources]
  -[VSMobileAssetsManager selectVoiceForLang:name:type:gender:footprint:]
  -[VSMobileAssetsManager shouldDownloadTrialResource:]
  -[VSMobileAssetsManager installedAssetsForType:voicename:language:gender:footprint:]
  -[VSMobileAssetsManager installedVoiceResources]
  -[VSMobileAssetsManager setCachedMAVoiceSelections:]
  -[VSMobileAssetsManager cancelDownloads:completion:]
  -[VSMobileAssetsManager _getResults:]
  -[VSMobileAssetsManager purgeAsset:]
  -[VSMobileAssetsManager voiceAssetsForSubscription:]
  -[VSMobileAssetsManager removeTrialVoiceResource:completion:]
  -[VSMobileAssetsManager cancelDownload:completion:]
  -[VSMobileAssetsManager activeVoiceAssets]
  -[VSMobileAssetsManager voiceAssetFromPreinstallMetadata:]
  -[VSMobileAssetsManager _mobileAssetVoiceResourceWithLanguage:]
  -[VSMobileAssetsManager removeVoiceResource:completion:]
  -[VSMobileAssetsManager _downloadAsset:options:progress:completion:]
  -[VSMobileAssetsManager downloadVoiceAsset:useBattery:progressUpdateHandler:]
  -[VSMobileAssetsManager voiceDataWithBundleIdentifier:attributes:voicePathCallback:]
  -[VSMobileAssetsManager _getVoiceAssetsForType:voiceName:language:gender:footprint:returnTypes:]
  -[VSMobileAssetsManager _trialVoiceWithLanguage:name:type:footprint:]
  -[VSMobileAssetsManager _localVoiceForLanguageAndNamePath:]
  -[VSMobileAssetsManager cleanOldMobileAssetVoiceResources]
  -[VSMobileAssetsManager init]
  -[VSMobileAssetsManager cleanUnusedAssets]
  -[VSMobileAssetsManager migrateAssetIfNeededWithAssetType:]
  -[VSMobileAssetsManager _installedVoiceResourceAssetForLanguage:]
  -[VSMobileAssetsManager selectPreinstalledVoiceForLanguage:gender:name:]
  -[VSMobileAssetsManager downloadVoiceResource:completion:]


VSSpeechInternalSettings : NSObject
 @property  NSUserDefaults *internalDefaults
 @property  BOOL enableAudioDump
 @property  BOOL logSensitiveText
 @property  BOOL disableCache
 @property  BOOL disableAssetCleaning
 @property  BOOL allowAnyAssetSubscriber
 @property  BOOL defaultToNonDiscretionaryDownloads
 @property  BOOL enableLocalVoices
 @property  float defaultVolume
 @property  float defaultPitch
 @property  float defaultRate
 @property  BOOL whisper
 @property  float serverTTSTimeout
 @property  float deviceTTSWaitTime
 @property  BOOL disableDeviceRacing
 @property  BOOL forceServerTTS
 @property  BOOL disableServerTTS
 @property  BOOL disableInlineStreamTTS
 @property  BOOL disableOspreyStreaming
 @property  float streamBufferDuration
 @property  BOOL useBetaVoice
 @property  NSString *ospreyEndpointURL
 @property  BOOL simulateNetworkStall
 @property  BOOL disableDeviceNeuralTTS
 @property  BOOL useSSMLInput
 @property  BOOL disableMobileAssetURLReset
 @property  BOOL ignorePowerAndThermalState
 @property  BOOL disableAssetUpdate

  // class methods
  +[VSSpeechInternalSettings standardInstance]

  // instance methods
  -[VSSpeechInternalSettings setDisableDeviceRacing:]
  -[VSSpeechInternalSettings disableCache]
  -[VSSpeechInternalSettings setWhisper:]
  -[VSSpeechInternalSettings setDisableCache:]
  -[VSSpeechInternalSettings defaultToNonDiscretionaryDownloads]
  -[VSSpeechInternalSettings whisper]
  -[VSSpeechInternalSettings setIgnorePowerAndThermalState:]
  -[VSSpeechInternalSettings logSensitiveText]
  -[VSSpeechInternalSettings setDisableDeviceNeuralTTS:]
  -[VSSpeechInternalSettings defaultVolume]
  -[VSSpeechInternalSettings disableDeviceNeuralTTS]
  -[VSSpeechInternalSettings ospreyEndpointURL]
  -[VSSpeechInternalSettings useSSMLInput]
  -[VSSpeechInternalSettings setForceServerTTS:]
  -[VSSpeechInternalSettings disableAssetCleaning]
  -[VSSpeechInternalSettings setDefaultToNonDiscretionaryDownloads:]
  -[VSSpeechInternalSettings enableLocalVoices]
  -[VSSpeechInternalSettings setInternalDefaults:]
  -[VSSpeechInternalSettings .cxx_destruct]
  -[VSSpeechInternalSettings setDeviceTTSWaitTime:]
  -[VSSpeechInternalSettings disableInlineStreamTTS]
  -[VSSpeechInternalSettings setDisableInlineStreamTTS:]
  -[VSSpeechInternalSettings forceServerTTS]
  -[VSSpeechInternalSettings disableMobileAssetURLReset]
  -[VSSpeechInternalSettings setDisableServerTTS:]
  -[VSSpeechInternalSettings setDefaultPitch:]
  -[VSSpeechInternalSettings deviceTTSWaitTime]
  -[VSSpeechInternalSettings simulateNetworkStall]
  -[VSSpeechInternalSettings ignorePowerAndThermalState]
  -[VSSpeechInternalSettings enableAudioDump]
  -[VSSpeechInternalSettings setEnableAudioDump:]
  -[VSSpeechInternalSettings setDisableOspreyStreaming:]
  -[VSSpeechInternalSettings setServerTTSTimeout:]
  -[VSSpeechInternalSettings serverTTSTimeout]
  -[VSSpeechInternalSettings allowAnyAssetSubscriber]
  -[VSSpeechInternalSettings disableAssetUpdate]
  -[VSSpeechInternalSettings setDisableAssetCleaning:]
  -[VSSpeechInternalSettings setLogSensitiveText:]
  -[VSSpeechInternalSettings disableDeviceRacing]
  -[VSSpeechInternalSettings setUseBetaVoice:]
  -[VSSpeechInternalSettings setAllowAnyAssetSubscriber:]
  -[VSSpeechInternalSettings disableOspreyStreaming]
  -[VSSpeechInternalSettings setDisableAssetUpdate:]
  -[VSSpeechInternalSettings disableServerTTS]
  -[VSSpeechInternalSettings defaultRate]
  -[VSSpeechInternalSettings setDefaultVolume:]
  -[VSSpeechInternalSettings setStreamBufferDuration:]
  -[VSSpeechInternalSettings streamBufferDuration]
  -[VSSpeechInternalSettings setSimulateNetworkStall:]
  -[VSSpeechInternalSettings useBetaVoice]
  -[VSSpeechInternalSettings init]
  -[VSSpeechInternalSettings setOspreyEndpointURL:]
  -[VSSpeechInternalSettings internalDefaults]
  -[VSSpeechInternalSettings setDefaultRate:]
  -[VSSpeechInternalSettings setEnableLocalVoices:]
  -[VSSpeechInternalSettings defaultPitch]


VSSpeechSynthesizerPreference : NSObject
  // class methods
  +[VSSpeechSynthesizerPreference fallbackLanguageForLanguage:]
  +[VSSpeechSynthesizerPreference availableLanguages]


VSDownloadMetrics : NSObject
 @property  NSString *voiceDownloadKey
 @property  long long downloadBeginTimestamp
 @property  long long downloadEndTimestamp
 @property  NSString *clientBundleIdentifier
 @property  BOOL isCellularAllowed
 @property  BOOL discretionary
 @property  NSNumber *downloadSize
 @property  float downloadProgress
 @property  long long errorCode
 @property  double setupTimeInterval

  // class methods
  +[VSDownloadMetrics _clockFactor]

  // instance methods
  -[VSDownloadMetrics setDiscretionary:]
  -[VSDownloadMetrics downloadProgress]
  -[VSDownloadMetrics setErrorCode:]
  -[VSDownloadMetrics errorCode]
  -[VSDownloadMetrics setDownloadProgress:]
  -[VSDownloadMetrics setClientBundleIdentifier:]
  -[VSDownloadMetrics clientBundleIdentifier]
  -[VSDownloadMetrics setDownloadSize:]
  -[VSDownloadMetrics .cxx_destruct]
  -[VSDownloadMetrics discretionary]
  -[VSDownloadMetrics downloadSize]
  -[VSDownloadMetrics isCellularAllowed]
  -[VSDownloadMetrics downloadDuration]
  -[VSDownloadMetrics setIsCellularAllowed:]
  -[VSDownloadMetrics dictionaryMetrics]
  -[VSDownloadMetrics initWithVoiceName:languageCode:gender:]
  -[VSDownloadMetrics endMetrics]
  -[VSDownloadMetrics setupTimeInterval]
  -[VSDownloadMetrics setSetupTimeInterval:]
  -[VSDownloadMetrics voiceDownloadKey]
  -[VSDownloadMetrics downloadBeginTimestamp]
  -[VSDownloadMetrics downloadEndTimestamp]


VSFeatureFlags : NSObject
  // class methods
  +[VSFeatureFlags isTrialEnabled]
  +[VSFeatureFlags isLowPowerDeviceNeuralEnabled]
  +[VSFeatureFlags useSiriTTSService]
  +[VSFeatureFlags lowInactiveMemory]


VSPhonemeTool : NSObject
  // class methods
  +[VSPhonemeTool generateTTSPhonemes:voicePath:phonemeSystem:error:]


VSUtilities : NSObject
  // class methods
  +[VSUtilities isInternalBuild]
  +[VSUtilities isWatch]
  +[VSUtilities isHomeHub]
  +[VSUtilities hasAMX]
  +[VSUtilities hasANE]
  +[VSUtilities isSeedBuild]
  +[VSUtilities isHomePod]
  +[VSUtilities isH12Platform]


VSPreviewRequest : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *languageCode
 @property  NSString *voiceName
 @property  long long previewType
 @property  unsigned long requestCreatedTimestamp

  // class methods
  +[VSPreviewRequest supportsSecureCoding]

  // instance methods
  -[VSPreviewRequest setLanguageCode:]
  -[VSPreviewRequest encodeWithCoder:]
  -[VSPreviewRequest .cxx_destruct]
  -[VSPreviewRequest languageCode]
  -[VSPreviewRequest copyWithZone:]
  -[VSPreviewRequest initWithCoder:]
  -[VSPreviewRequest voiceName]
  -[VSPreviewRequest setVoiceName:]
  -[VSPreviewRequest previewType]
  -[VSPreviewRequest setPreviewType:]
  -[VSPreviewRequest requestCreatedTimestamp]
  -[VSPreviewRequest setRequestCreatedTimestamp:]


VSSpeechEngineVoiceResource : NSObject
 @property  {shared_ptr<SiriTTS::VoiceResource>=^{VoiceResource}^{__shared_weak_count}} resource

  // instance methods
  -[VSSpeechEngineVoiceResource .cxx_construct]
  -[VSSpeechEngineVoiceResource .cxx_destruct]
  -[VSSpeechEngineVoiceResource resource]
  -[VSSpeechEngineVoiceResource setResource:]


VSSpeechSynthesisCallbackResult : NSObject
 @property  NSString *text
 @property  long long stopMark
 @property  @? callback
 @property  long long state
 @property  NSError *error
 @property  NSMutableArray *wordTimings
 @property  {AudioStreamBasicDescription=dIIIIIIII} asbd
 @property  unsigned long samplesProcessed
 @property  unsigned long lastUTF8Offset
 @property  unsigned long lastUTF16Offset
 @property  unsigned long numOfPromptsTriggered
 @property  BOOL neuralDidFallback
 @property  BOOL hasAlignmentStall
 @property  BOOL hasAudioClick

  // instance methods
  -[VSSpeechSynthesisCallbackResult callback]
  -[VSSpeechSynthesisCallbackResult setCallback:]
  -[VSSpeechSynthesisCallbackResult text]
  -[VSSpeechSynthesisCallbackResult error]
  -[VSSpeechSynthesisCallbackResult .cxx_construct]
  -[VSSpeechSynthesisCallbackResult state]
  -[VSSpeechSynthesisCallbackResult .cxx_destruct]
  -[VSSpeechSynthesisCallbackResult setError:]
  -[VSSpeechSynthesisCallbackResult sampleBuffer]
  -[VSSpeechSynthesisCallbackResult initWithCallback:]
  -[VSSpeechSynthesisCallbackResult setText:]
  -[VSSpeechSynthesisCallbackResult setState:]
  -[VSSpeechSynthesisCallbackResult asbd]
  -[VSSpeechSynthesisCallbackResult setAsbd:]
  -[VSSpeechSynthesisCallbackResult phonemes]
  -[VSSpeechSynthesisCallbackResult wordTimings]
  -[VSSpeechSynthesisCallbackResult setWordTimings:]
  -[VSSpeechSynthesisCallbackResult synthesisCallback:]
  -[VSSpeechSynthesisCallbackResult pcmData]
  -[VSSpeechSynthesisCallbackResult mutablePCMData]
  -[VSSpeechSynthesisCallbackResult markerBuffer]
  -[VSSpeechSynthesisCallbackResult utf8BytesForChar:]
  -[VSSpeechSynthesisCallbackResult utf16OffsetFromUTF8:]
  -[VSSpeechSynthesisCallbackResult processMarkerBuffer]
  -[VSSpeechSynthesisCallbackResult wordTimingInfos]
  -[VSSpeechSynthesisCallbackResult phonemeBuffer]
  -[VSSpeechSynthesisCallbackResult numOfPromptsTriggered]
  -[VSSpeechSynthesisCallbackResult setNumOfPromptsTriggered:]
  -[VSSpeechSynthesisCallbackResult neuralDidFallback]
  -[VSSpeechSynthesisCallbackResult setNeuralDidFallback:]
  -[VSSpeechSynthesisCallbackResult hasAlignmentStall]
  -[VSSpeechSynthesisCallbackResult setHasAlignmentStall:]
  -[VSSpeechSynthesisCallbackResult hasAudioClick]
  -[VSSpeechSynthesisCallbackResult setHasAudioClick:]
  -[VSSpeechSynthesisCallbackResult stopMark]
  -[VSSpeechSynthesisCallbackResult setStopMark:]
  -[VSSpeechSynthesisCallbackResult samplesProcessed]
  -[VSSpeechSynthesisCallbackResult setSamplesProcessed:]
  -[VSSpeechSynthesisCallbackResult lastUTF8Offset]
  -[VSSpeechSynthesisCallbackResult setLastUTF8Offset:]
  -[VSSpeechSynthesisCallbackResult lastUTF16Offset]
  -[VSSpeechSynthesisCallbackResult setLastUTF16Offset:]


VSSpeechEngine : NSObject
 @property  NSString *voicePath
 @property  ^v synthesizer
 @property  VSSpeechSynthesisCallbackResult *currentCallbackResult
 @property  NSLock *synthesisLock
 @property  unsigned long pcmBufferSize
 @property  {AudioStreamBasicDescription=dIIIIIIII} asbd
 @property  float rate
 @property  float pitch
 @property  float volume
 @property  long long powerProfile

  // class methods
  +[VSSpeechEngine engineCurrentCompatibility]
  +[VSSpeechEngine hasPhaticResponses:]
  +[VSSpeechEngine isUserCancelError:]
  +[VSSpeechEngine mimeForFileExtension:]
  +[VSSpeechEngine engineMinimumCompatibility]

  // instance methods
  -[VSSpeechEngine preheat]
  -[VSSpeechEngine rate]
  -[VSSpeechEngine setRate:]
  -[VSSpeechEngine voicePath]
  -[VSSpeechEngine dealloc]
  -[VSSpeechEngine .cxx_destruct]
  -[VSSpeechEngine pitch]
  -[VSSpeechEngine setVolume:]
  -[VSSpeechEngine setPitch:]
  -[VSSpeechEngine setPowerProfile:]
  -[VSSpeechEngine powerProfile]
  -[VSSpeechEngine volume]
  -[VSSpeechEngine setVoicePath:]
  -[VSSpeechEngine unloadResource:]
  -[VSSpeechEngine asbd]
  -[VSSpeechEngine synthesizer]
  -[VSSpeechEngine setSynthesizer:]
  -[VSSpeechEngine initWithVoicePath:resourcePath:]
  -[VSSpeechEngine initializeWithResourcePath:]
  -[VSSpeechEngine loadResourceAtPath:mimeType:error:]
  -[VSSpeechEngine loadResource:error:]
  -[VSSpeechEngine synthesizeText:loggable:callback:]
  -[VSSpeechEngine stopAtMarker:]
  -[VSSpeechEngine pcmBufferSize]
  -[VSSpeechEngine setPcmBufferSize:]
  -[VSSpeechEngine currentCallbackResult]
  -[VSSpeechEngine setCurrentCallbackResult:]
  -[VSSpeechEngine synthesisLock]
  -[VSSpeechEngine setSynthesisLock:]


VSWordTimingService : NSObject
 @property  NSDictionary *wordTimings

  // instance methods
  -[VSWordTimingService .cxx_destruct]
  -[VSWordTimingService wordTimings]
  -[VSWordTimingService setWordTimings:]
  -[VSWordTimingService timingInfosFrom:withText:]
  -[VSWordTimingService timingPlistForLanguage:]
  -[VSWordTimingService estimatedTTSWordTimingForText:withLanguage:voiceName:]


VSRecognitionResult : NSObject
  // class methods
  +[VSRecognitionResult initialize]
  +[VSRecognitionResult recognitionResultWithModelIdentifier:classIdentifiers:values:]

  // instance methods
  -[VSRecognitionResult retain]
  -[VSRecognitionResult modelIdentifier]
  -[VSRecognitionResult release]
  -[VSRecognitionResult retainCount]
  -[VSRecognitionResult isEqual:]
  -[VSRecognitionResult init]
  -[VSRecognitionResult elementCount]
  -[VSRecognitionResult recognitionResultByReplacingValueForClassIdentifier:withValue:]
  -[VSRecognitionResult getElementClassIdentifier:value:atIndex:]
  -[VSRecognitionResult valueOfFirstElementWithClassIdentifier:]
  -[VSRecognitionResult createHandler]
  -[VSRecognitionResult setRecognitionAction:]
  -[VSRecognitionResult recognitionAction]


VSVoiceSubscription : NSObject <NSSecureCoding>
 @property  NSString *clientID
 @property  NSString *accessoryID
 @property  VSVoiceAsset *voice

  // class methods
  +[VSVoiceSubscription supportsSecureCoding]

  // instance methods
  -[VSVoiceSubscription clientID]
  -[VSVoiceSubscription setClientID:]
  -[VSVoiceSubscription setVoice:]
  -[VSVoiceSubscription accessoryID]
  -[VSVoiceSubscription encodeWithCoder:]
  -[VSVoiceSubscription voice]
  -[VSVoiceSubscription .cxx_destruct]
  -[VSVoiceSubscription setAccessoryID:]
  -[VSVoiceSubscription initWithCoder:]
  -[VSVoiceSubscription initWithClient:accessory:voice:]


VSRecognitionSession : NSObject
  // instance methods
  -[VSRecognitionSession isBusy]
  -[VSRecognitionSession isFinished]
  -[VSRecognitionSession setDelegate:]
  -[VSRecognitionSession dealloc]
  -[VSRecognitionSession reset]
  -[VSRecognitionSession isValid]
  -[VSRecognitionSession _setAction:]
  -[VSRecognitionSession _init]
  -[VSRecognitionSession cancel]
  -[VSRecognitionSession init]
  -[VSRecognitionSession speechSynthesizer:didFinishSpeakingRequest:successfully:phonemesSpoken:withError:]
  -[VSRecognitionSession initWithModelIdentifier:]
  -[VSRecognitionSession isActivelyRecognizing]
  -[VSRecognitionSession setDebugDumpEnabled:]
  -[VSRecognitionSession setInputLevelUpdateInterval:]
  -[VSRecognitionSession setPerformRecognitionHandlerActions:]
  -[VSRecognitionSession cancelMaintainingKeepAlive:]
  -[VSRecognitionSession setKeywordPhase:]
  -[VSRecognitionSession hasDeferredAction]
  -[VSRecognitionSession keywordAtIndex:]
  -[VSRecognitionSession keywordCount]
  -[VSRecognitionSession displayResultString]
  -[VSRecognitionSession displayStatusString]
  -[VSRecognitionSession setBluetoothInputAllowed:]
  -[VSRecognitionSession beginNextAction]
  -[VSRecognitionSession beginSpeakingFeedbackString]
  -[VSRecognitionSession beginSpeakingString:]
  -[VSRecognitionSession nextActionWillRecognize]
  -[VSRecognitionSession nextActionWillTerminateSession]
  -[VSRecognitionSession setNextRecognitionAudioInputPath:]
  -[VSRecognitionSession inputLevelDB]
  -[VSRecognitionSession setNextRecognitionRequiresReset:]
  -[VSRecognitionSession setSensitiveActionsEnabled:]
  -[VSRecognitionSession isRecognizing]
  -[VSRecognitionSession sensitiveActionsEnabled]
  -[VSRecognitionSession _actionCompleted:nextAction:error:]
  -[VSRecognitionSession _actionStarted:]
  -[VSRecognitionSession _notifyDelegateActionStarted]
  -[VSRecognitionSession _notifyDelegateOpenURL:completion:]
  -[VSRecognitionSession _currentRecognizeAction]
  -[VSRecognitionSession _recognitionResultHandlingThread]
  -[VSRecognitionSession recognitionResultHandlingThread:didHandleResults:nextAction:]
  -[VSRecognitionSession spokenFeedbackString]
  -[VSRecognitionSession spokenFeedbackAttributedString]
  -[VSRecognitionSession inputLevel]
  -[VSRecognitionSession _createKeywordIndex]
  -[VSRecognitionSession _createPhaseSortedKeywordsFromArray:]
  -[VSRecognitionSession _topLevelKeywords]
  -[VSRecognitionSession _keywordsForModelIdentifier:]
  -[VSRecognitionSession _keywordIndexChanged]
  -[VSRecognitionSession _beginSpeakingAttributedString:]
  -[VSRecognitionSession _beginSpeakingString:attributedString:]
  -[VSRecognitionSession _notifyDelegateFinishedSpeakingWithError:]
  -[VSRecognitionSession debugDumpPath]
  -[VSRecognitionSession setPreferredEngine:]


VSOpusEncoder : NSObject
 @property  @? opusDataHandler
 @property  @? errorHandler
 @property  AVAudioFormat *fromFormat
 @property  AVAudioFormat *toFormat
 @property  AVAudioConverter *converter
 @property  AVAudioCompressedBuffer *outputBuffer
 @property  long long opusDataOffset

  // instance methods
  -[VSOpusEncoder errorHandler]
  -[VSOpusEncoder .cxx_destruct]
  -[VSOpusEncoder setErrorHandler:]
  -[VSOpusEncoder endEncoding]
  -[VSOpusEncoder converter]
  -[VSOpusEncoder outputBuffer]
  -[VSOpusEncoder setOutputBuffer:]
  -[VSOpusEncoder initWithSourceASBD:]
  -[VSOpusEncoder setOpusDataHandler:]
  -[VSOpusEncoder beginEncoding]
  -[VSOpusEncoder encodeChunk:]
  -[VSOpusEncoder opusDataHandler]
  -[VSOpusEncoder fromFormat]
  -[VSOpusEncoder setFromFormat:]
  -[VSOpusEncoder toFormat]
  -[VSOpusEncoder setToFormat:]
  -[VSOpusEncoder setConverter:]
  -[VSOpusEncoder opusDataOffset]
  -[VSOpusEncoder setOpusDataOffset:]


VSOpusDecoder : NSObject
  // class methods
  +[VSOpusDecoder sharedInstance]

  // instance methods
  -[VSOpusDecoder dealloc]
  -[VSOpusDecoder _opusDecoder:]
  -[VSOpusDecoder decodeChunks:streamDescription:outError:]
  -[VSOpusDecoder beginChunkDecoderForStreamDescription:]
  -[VSOpusDecoder endChunkDecoding]
  -[VSOpusDecoder decodeChunk:outError:]


VSRecognitionAction : NSObject
  // instance methods
  -[VSRecognitionAction dealloc]
  -[VSRecognitionAction perform]
  -[VSRecognitionAction cancel]
  -[VSRecognitionAction _session]
  -[VSRecognitionAction completionType]
  -[VSRecognitionAction _setSession:]
  -[VSRecognitionAction sensitiveActionsEnabled]
  -[VSRecognitionAction spokenFeedbackString]
  -[VSRecognitionAction spokenFeedbackAttributedString]
  -[VSRecognitionAction resultDisplayString]
  -[VSRecognitionAction setResultDisplayString:]
  -[VSRecognitionAction statusDisplayString]
  -[VSRecognitionAction setStatusDisplayString:]
  -[VSRecognitionAction setSpokenFeedbackString:]
  -[VSRecognitionAction setSpokenFeedbackAttributedString:]
  -[VSRecognitionAction completeWithNextAction:error:]
  -[VSRecognitionAction _hasDeferredStartCallback]
  -[VSRecognitionAction _continueAfterDeferredStart]


VSLocalizedString : NSObject
  // class methods
  +[VSLocalizedString localizedStringForKey:language:table:]
  +[VSLocalizedString predefinedStringForKey:language:table:]
  +[VSLocalizedString appendRandomizationKey:withCount:]
  +[VSLocalizedString localizedInterstitialStringForKey:language:]
  +[VSLocalizedString localizedOOBStringForKey:language:]
  +[VSLocalizedString localizedOOBStringForKey:language:gender:]


VSRecognitionDisambiguateAction : VSRecognitionRecognizeAction
  // instance methods
  -[VSRecognitionDisambiguateAction setKeywords:]
  -[VSRecognitionDisambiguateAction dealloc]
  -[VSRecognitionDisambiguateAction _keywords]
  -[VSRecognitionDisambiguateAction completionType]
  -[VSRecognitionDisambiguateAction _disambiguationContext]
  -[VSRecognitionDisambiguateAction _keywordIndexChanged]
  -[VSRecognitionDisambiguateAction setRepeatedSpokenFeedbackString:]
  -[VSRecognitionDisambiguateAction repeatedSpokenFeedbackString]
  -[VSRecognitionDisambiguateAction sequenceTag]
  -[VSRecognitionDisambiguateAction setSequenceTag:]
  -[VSRecognitionDisambiguateAction knownValueForClassIdentifier:]
  -[VSRecognitionDisambiguateAction setKnownValue:phoneticValue:forClassIdentifier:]
  -[VSRecognitionDisambiguateAction knownValuesForClassIdentifier:]
  -[VSRecognitionDisambiguateAction setKnownValues:phoneticValues:forClassIdentifier:]
  -[VSRecognitionDisambiguateAction ambiguousValuesForClassIdentifier:]
  -[VSRecognitionDisambiguateAction setAmbiguousValues:phoneticValues:forClassIdentifier:]
  -[VSRecognitionDisambiguateAction _createRecognitionInstanceWithCallbacks:info:]
  -[VSRecognitionDisambiguateAction _actionForEmptyResults]


VSSpeechCharacterSet : NSObject
 @property  NSCharacterSet *characterSet

  // class methods
  +[VSSpeechCharacterSet languageMapping]

  // instance methods
  -[VSSpeechCharacterSet characterSet]
  -[VSSpeechCharacterSet .cxx_destruct]
  -[VSSpeechCharacterSet setCharacterSet:]
  -[VSSpeechCharacterSet initWithLanguage:]
  -[VSSpeechCharacterSet unspeakableRangeOfText:]


VSRecognitionRecognizeAction : VSRecognitionAction
  // instance methods
  -[VSRecognitionRecognizeAction _reset]
  -[VSRecognitionRecognizeAction modelIdentifier]
  -[VSRecognitionRecognizeAction dealloc]
  -[VSRecognitionRecognizeAction perform]
  -[VSRecognitionRecognizeAction cancel]
  -[VSRecognitionRecognizeAction _keywords]
  -[VSRecognitionRecognizeAction _setResults:]
  -[VSRecognitionRecognizeAction completionType]
  -[VSRecognitionRecognizeAction initWithModelIdentifier:]
  -[VSRecognitionRecognizeAction _keywordIndexChanged]
  -[VSRecognitionRecognizeAction _debugDumpPath]
  -[VSRecognitionRecognizeAction _hasDeferredStartCallback]
  -[VSRecognitionRecognizeAction _continueAfterDeferredStart]
  -[VSRecognitionRecognizeAction _createRecognitionInstanceWithCallbacks:info:]
  -[VSRecognitionRecognizeAction _actionForEmptyResults]
  -[VSRecognitionRecognizeAction _isRecognizing]
  -[VSRecognitionRecognizeAction _isActivelyRecognizing]
  -[VSRecognitionRecognizeAction _setBluetoothInputAllowed:]
  -[VSRecognitionRecognizeAction _setInputLevelUpdateInterval:]
  -[VSRecognitionRecognizeAction _inputLevel]
  -[VSRecognitionRecognizeAction _inputLevelDB]
  -[VSRecognitionRecognizeAction _keywordAtIndex:]
  -[VSRecognitionRecognizeAction _keywordCount]
  -[VSRecognitionRecognizeAction _setDebugDumpEnabled:dumpPath:]
  -[VSRecognitionRecognizeAction _setDebugDumpEnabled:]
  -[VSRecognitionRecognizeAction _setDebugDumpPath:]
  -[VSRecognitionRecognizeAction _setPreferredEngine:]
  -[VSRecognitionRecognizeAction _setAudioInputPath:]
  -[VSRecognitionRecognizeAction _setEngineResetRequired:]
  -[VSRecognitionRecognizeAction _configureNewRecognitionInstance]
  -[VSRecognitionRecognizeAction _releaseFromPrepare]
  -[VSRecognitionRecognizeAction _handleRecognitionPrepared:]
  -[VSRecognitionRecognizeAction _handleRecognitionStarted:]
  -[VSRecognitionRecognizeAction _handleRecognitionCompleted:withResults:error:]
  -[VSRecognitionRecognizeAction _handledThreadedResults:nextAction:]


VSAnalytics : NSObject
  // class methods
  +[VSAnalytics reportEvent:payload:]
  +[VSAnalytics reportInstrumentMetrics:]
  +[VSAnalytics reportDownloadMetrics:]


VSVoiceResourceAsset : VSAssetBase <NSSecureCoding>
 @property  NSDictionary *voiceConfig
 @property  float rate
 @property  float pitch
 @property  float volume
 @property  NSDictionary *vocalizerConfig
 @property  NSArray *languages
 @property  NSArray *resourceList
 @property  NSDictionary *resourceMimeTypes
 @property  NSURL *searchPathURL

  // class methods
  +[VSVoiceResourceAsset supportsSecureCoding]
  +[VSVoiceResourceAsset resourceFromTrial:]

  // instance methods
  -[VSVoiceResourceAsset rate]
  -[VSVoiceResourceAsset languages]
  -[VSVoiceResourceAsset setLanguages:]
  -[VSVoiceResourceAsset encodeWithCoder:]
  -[VSVoiceResourceAsset setSearchPathURL:]
  -[VSVoiceResourceAsset setRate:]
  -[VSVoiceResourceAsset .cxx_destruct]
  -[VSVoiceResourceAsset pitch]
  -[VSVoiceResourceAsset setVolume:]
  -[VSVoiceResourceAsset setPitch:]
  -[VSVoiceResourceAsset volume]
  -[VSVoiceResourceAsset resourceList]
  -[VSVoiceResourceAsset defaultVoice]
  -[VSVoiceResourceAsset key]
  -[VSVoiceResourceAsset setResourceList:]
  -[VSVoiceResourceAsset setVoiceConfig:]
  -[VSVoiceResourceAsset voiceConfig]
  -[VSVoiceResourceAsset searchPathURL]
  -[VSVoiceResourceAsset initWithCoder:]
  -[VSVoiceResourceAsset vocalizerConfig]
  -[VSVoiceResourceAsset resourceMimeTypes]
  -[VSVoiceResourceAsset _defaultVoices]
  -[VSVoiceResourceAsset defaultVoiceGender]
  -[VSVoiceResourceAsset defaultVoiceNameForGender:]
  -[VSVoiceResourceAsset defaultVoiceType]
  -[VSVoiceResourceAsset setVocalizerConfig:]
  -[VSVoiceResourceAsset setResourceMimeTypes:]


VSSpeechWordTimingInfo : NSObject <NSSecureCoding, NSCopying>
 @property  double startTime
 @property  {_NSRange=QQ} textRange

  // class methods
  +[VSSpeechWordTimingInfo supportsSecureCoding]
  +[VSSpeechWordTimingInfo adjustWordTimingInfo:forContext:]
  +[VSSpeechWordTimingInfo utf16TimingInfoWithUTF8Range:withText:]
  +[VSSpeechWordTimingInfo extraBytesFromUTF8ToUTF16With:totalLength:begin:end:]
  +[VSSpeechWordTimingInfo wordTimingInfoFrom:timestamps:]

  // instance methods
  -[VSSpeechWordTimingInfo startTime]
  -[VSSpeechWordTimingInfo encodeWithCoder:]
  -[VSSpeechWordTimingInfo setStartTime:]
  -[VSSpeechWordTimingInfo textRange]
  -[VSSpeechWordTimingInfo copyWithZone:]
  -[VSSpeechWordTimingInfo isEqual:]
  -[VSSpeechWordTimingInfo initWithCoder:]
  -[VSSpeechWordTimingInfo setTextRange:]


VSCacheUpdateListener : NSObject
  // class methods
  +[VSCacheUpdateListener sharedListenerIfExists]
  +[VSCacheUpdateListener sharedListener]

  // instance methods
  -[VSCacheUpdateListener startListening]
  -[VSCacheUpdateListener stopListening]
  -[VSCacheUpdateListener _initShared]
  -[VSCacheUpdateListener _flush]
  -[VSCacheUpdateListener dealloc]
  -[VSCacheUpdateListener _enqueueRequest:]
  -[VSCacheUpdateListener _spokenLanguageChanged:]
  -[VSCacheUpdateListener performUpdateForModelIdentifier:classIdentifier:]
  -[VSCacheUpdateListener init]


VSCacheUpdateRequest : NSObject
  // instance methods
  -[VSCacheUpdateRequest modelIdentifier]
  -[VSCacheUpdateRequest dealloc]
  -[VSCacheUpdateRequest classIdentifier]
  -[VSCacheUpdateRequest initWithModelIdentifier:classIdentifier:]
  -[VSCacheUpdateRequest coalescedRequest:]


VSRecognitionConfirmAction : VSRecognitionRecognizeAction
  // instance methods
  -[VSRecognitionConfirmAction dealloc]
  -[VSRecognitionConfirmAction init]
  -[VSRecognitionConfirmAction completionType]
  -[VSRecognitionConfirmAction initWithModelIdentifier:]
  -[VSRecognitionConfirmAction _setConfirmed:]
  -[VSRecognitionConfirmAction setConfirmedAction:]
  -[VSRecognitionConfirmAction confirmedAction]
  -[VSRecognitionConfirmAction setDeniedAction:]
  -[VSRecognitionConfirmAction deniedAction]


VSRecognitionURLAction : VSRecognitionAction
  // instance methods
  -[VSRecognitionURLAction setURL:]
  -[VSRecognitionURLAction dealloc]
  -[VSRecognitionURLAction perform]
  -[VSRecognitionURLAction URL]
  -[VSRecognitionURLAction completionType]


VSRecognitionSpeakAction : VSRecognitionAction
  // instance methods
  -[VSRecognitionSpeakAction perform]
  -[VSRecognitionSpeakAction completionType]
  -[VSRecognitionSpeakAction initWithSpokenFeedbackString:willTerminate:]


VSPresynthesizedAudioRequest : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *clientBundleIdentifier
 @property  NSUUID *accessoryID
 @property  unsigned long pcmDataSize
 @property  @? stopHandler
 @property  unsigned int audioSessionID
 @property  NSData *audioData
 @property  {AudioStreamBasicDescription=dIIIIIIII} decoderStreamDescription
 @property  {AudioStreamBasicDescription=dIIIIIIII} playerStreamDescription
 @property  BOOL enqueue
 @property  NSString *text
 @property  NSString *identifier
 @property  NSUUID *siriRequestId
 @property  unsigned long requestCreatedTimestamp

  // class methods
  +[VSPresynthesizedAudioRequest supportsSecureCoding]

  // instance methods
  -[VSPresynthesizedAudioRequest setClientBundleIdentifier:]
  -[VSPresynthesizedAudioRequest identifier]
  -[VSPresynthesizedAudioRequest text]
  -[VSPresynthesizedAudioRequest audioSessionID]
  -[VSPresynthesizedAudioRequest accessoryID]
  -[VSPresynthesizedAudioRequest clientBundleIdentifier]
  -[VSPresynthesizedAudioRequest enqueue]
  -[VSPresynthesizedAudioRequest setAudioSessionID:]
  -[VSPresynthesizedAudioRequest encodeWithCoder:]
  -[VSPresynthesizedAudioRequest .cxx_destruct]
  -[VSPresynthesizedAudioRequest initWithIdentifier:]
  -[VSPresynthesizedAudioRequest setIdentifier:]
  -[VSPresynthesizedAudioRequest copyWithZone:]
  -[VSPresynthesizedAudioRequest setAccessoryID:]
  -[VSPresynthesizedAudioRequest logText]
  -[VSPresynthesizedAudioRequest init]
  -[VSPresynthesizedAudioRequest setText:]
  -[VSPresynthesizedAudioRequest initWithCoder:]
  -[VSPresynthesizedAudioRequest audioData]
  -[VSPresynthesizedAudioRequest siriRequestId]
  -[VSPresynthesizedAudioRequest setSiriRequestId:]
  -[VSPresynthesizedAudioRequest decoderStreamDescription]
  -[VSPresynthesizedAudioRequest playerStreamDescription]
  -[VSPresynthesizedAudioRequest requestCreatedTimestamp]
  -[VSPresynthesizedAudioRequest setRequestCreatedTimestamp:]
  -[VSPresynthesizedAudioRequest initWithAudioData:playerStreamDescription:]
  -[VSPresynthesizedAudioRequest initWithAudioData:decoderStreamDescription:playerStreamDescription:]
  -[VSPresynthesizedAudioRequest hasValidAudio]
  -[VSPresynthesizedAudioRequest canLogRequestText]
  -[VSPresynthesizedAudioRequest setEnqueue:]
  -[VSPresynthesizedAudioRequest pcmDataSize]
  -[VSPresynthesizedAudioRequest setPcmDataSize:]
  -[VSPresynthesizedAudioRequest stopHandler]
  -[VSPresynthesizedAudioRequest setStopHandler:]


VSRecognitionResultHandlingThread : NSObject
  // instance methods
  -[VSRecognitionResultHandlingThread setDelegate:]
  -[VSRecognitionResultHandlingThread dealloc]
  -[VSRecognitionResultHandlingThread invalidate]
  -[VSRecognitionResultHandlingThread init]
  -[VSRecognitionResultHandlingThread _handleRequests]
  -[VSRecognitionResultHandlingThread _notifyRequestHandled:]
  -[VSRecognitionResultHandlingThread handleResults:withHandler:]


VSRecognitionResultHandlingRequest : NSObject
  // instance methods
  -[VSRecognitionResultHandlingRequest dealloc]
  -[VSRecognitionResultHandlingRequest handler]
  -[VSRecognitionResultHandlingRequest results]
  -[VSRecognitionResultHandlingRequest nextAction]
  -[VSRecognitionResultHandlingRequest initWithHandler:results:]
  -[VSRecognitionResultHandlingRequest setNextAction:]


VSTextPreProcessor : NSObject
  // instance methods
  -[VSTextPreProcessor dealloc]
  -[VSTextPreProcessor initWithContentsOfPath:languageIdentifier:]
  -[VSTextPreProcessor processedTextFromString:]


VSTextPreProcessorRule : NSObject
  // instance methods
  -[VSTextPreProcessorRule dealloc]
  -[VSTextPreProcessorRule initWithDictionaryRepresentation:]
  -[VSTextPreProcessorRule matchedString:forTokenInRange:]


VSFormatArgument : NSObject
  // instance methods
  -[VSFormatArgument dealloc]


VSSpeechRequest : NSObject <NSSecureCoding, NSCopying>
 @property  NSAttributedString *attributedText
 @property  BOOL shouldStreamAudioData
 @property  NSString *utterance
 @property  NSString *clientBundleIdentifier
 @property  NSUUID *accessoryID
 @property  unsigned long requestCreatedTimestamp
 @property  @? stopHandler
 @property  @? pauseHandler
 @property  long long pointer
 @property  NSString *text
 @property  NSString *languageCode
 @property  NSString *voiceName
 @property  long long footprint
 @property  long long voiceType
 @property  long long gender
 @property  NSURL *outputPath
 @property  BOOL shouldWaitCurrentSpeaking
 @property  BOOL disableDeviceRacing
 @property  BOOL shouldCache
 @property  double rate
 @property  double pitch
 @property  double volume
 @property  BOOL shouldWhisper
 @property  NSDictionary *contextInfo
 @property  BOOL disableCompactVoiceFallback
 @property  unsigned int audioSessionID
 @property  BOOL forceServerTTS
 @property  BOOL canUseServerTTS
 @property  BOOL retryDeviceOnNetworkStall
 @property  long long powerProfile
 @property  NSURL *resourceListURL
 @property  NSURL *resourceSearchPathURL
 @property  NSArray *customResourceURLs
 @property  NSUUID *siriRequestId

  // class methods
  +[VSSpeechRequest supportsSecureCoding]

  // instance methods
  -[VSSpeechRequest footprint]
  -[VSSpeechRequest setLanguageCode:]
  -[VSSpeechRequest setDisableDeviceRacing:]
  -[VSSpeechRequest setClientBundleIdentifier:]
  -[VSSpeechRequest rate]
  -[VSSpeechRequest text]
  -[VSSpeechRequest audioSessionID]
  -[VSSpeechRequest accessoryID]
  -[VSSpeechRequest clientBundleIdentifier]
  -[VSSpeechRequest setAudioSessionID:]
  -[VSSpeechRequest encodeWithCoder:]
  -[VSSpeechRequest setRate:]
  -[VSSpeechRequest setForceServerTTS:]
  -[VSSpeechRequest pointer]
  -[VSSpeechRequest gender]
  -[VSSpeechRequest .cxx_destruct]
  -[VSSpeechRequest pitch]
  -[VSSpeechRequest setAttributedText:]
  -[VSSpeechRequest setVolume:]
  -[VSSpeechRequest setFootprint:]
  -[VSSpeechRequest setPitch:]
  -[VSSpeechRequest languageCode]
  -[VSSpeechRequest attributedText]
  -[VSSpeechRequest setPowerProfile:]
  -[VSSpeechRequest powerProfile]
  -[VSSpeechRequest volume]
  -[VSSpeechRequest forceServerTTS]
  -[VSSpeechRequest shouldCache]
  -[VSSpeechRequest voiceType]
  -[VSSpeechRequest copyWithZone:]
  -[VSSpeechRequest setGender:]
  -[VSSpeechRequest setAccessoryID:]
  -[VSSpeechRequest disableDeviceRacing]
  -[VSSpeechRequest setVoiceType:]
  -[VSSpeechRequest logText]
  -[VSSpeechRequest setShouldCache:]
  -[VSSpeechRequest init]
  -[VSSpeechRequest setText:]
  -[VSSpeechRequest initWithCoder:]
  -[VSSpeechRequest utterance]
  -[VSSpeechRequest setUtterance:]
  -[VSSpeechRequest voiceName]
  -[VSSpeechRequest setVoiceName:]
  -[VSSpeechRequest contextInfo]
  -[VSSpeechRequest setContextInfo:]
  -[VSSpeechRequest siriRequestId]
  -[VSSpeechRequest setSiriRequestId:]
  -[VSSpeechRequest customResourceURLs]
  -[VSSpeechRequest setCustomResourceURLs:]
  -[VSSpeechRequest outputPath]
  -[VSSpeechRequest setOutputPath:]
  -[VSSpeechRequest canUseServerTTS]
  -[VSSpeechRequest setCanUseServerTTS:]
  -[VSSpeechRequest pauseHandler]
  -[VSSpeechRequest setPauseHandler:]
  -[VSSpeechRequest requestCreatedTimestamp]
  -[VSSpeechRequest setRequestCreatedTimestamp:]
  -[VSSpeechRequest canLogRequestText]
  -[VSSpeechRequest stopHandler]
  -[VSSpeechRequest setStopHandler:]
  -[VSSpeechRequest logUtterance]
  -[VSSpeechRequest isSimilarTo:]
  -[VSSpeechRequest contextInfoString]
  -[VSSpeechRequest shouldWaitCurrentSpeaking]
  -[VSSpeechRequest setShouldWaitCurrentSpeaking:]
  -[VSSpeechRequest shouldWhisper]
  -[VSSpeechRequest setShouldWhisper:]
  -[VSSpeechRequest disableCompactVoiceFallback]
  -[VSSpeechRequest setDisableCompactVoiceFallback:]
  -[VSSpeechRequest retryDeviceOnNetworkStall]
  -[VSSpeechRequest setRetryDeviceOnNetworkStall:]
  -[VSSpeechRequest resourceListURL]
  -[VSSpeechRequest setResourceListURL:]
  -[VSSpeechRequest resourceSearchPathURL]
  -[VSSpeechRequest setResourceSearchPathURL:]
  -[VSSpeechRequest shouldStreamAudioData]
  -[VSSpeechRequest setShouldStreamAudioData:]
  -[VSSpeechRequest setPointer:]


VSMappedData : NSObject
 @property  NSString *filePath
 @property  unsigned long totalLength
 @property  ^v mmappedData
 @property  unsigned long mappedLength
 @property  NSMutableData *fallbackInMemoryData
 @property  BOOL shouldCleanFile

  // instance methods
  -[VSMappedData setFilePath:]
  -[VSMappedData filePath]
  -[VSMappedData dealloc]
  -[VSMappedData .cxx_destruct]
  -[VSMappedData appendData:]
  -[VSMappedData init]
  -[VSMappedData setTotalLength:]
  -[VSMappedData totalLength]
  -[VSMappedData initWithFilePath:initialSize:]
  -[VSMappedData _appendToFallbackMemory:]
  -[VSMappedData _convertToFallbackMemory]
  -[VSMappedData _appendToMappedMemory:]
  -[VSMappedData bytesAtOffset:]
  -[VSMappedData mmappedData]
  -[VSMappedData setMmappedData:]
  -[VSMappedData mappedLength]
  -[VSMappedData setMappedLength:]
  -[VSMappedData fallbackInMemoryData]
  -[VSMappedData setFallbackInMemoryData:]
  -[VSMappedData shouldCleanFile]
  -[VSMappedData setShouldCleanFile:]


VSDurationRequest : NSObject
 @property  @? completion

  // instance methods
  -[VSDurationRequest completion]
  -[VSDurationRequest setCompletion:]
  -[VSDurationRequest .cxx_destruct]


VSSpeechSynthesizer : NSObject <VSSpeechConnectionDelegate, AFAudioPowerProviding>
 @property  NSString *language
 @property  NSUUID *accessoryID
 @property  NSMutableDictionary *durationRequests
 @property  SiriTTSDaemonSession *proxySession
 @property  NSMutableDictionary *stsRequestMapping
 @property  NSObject<OS_dispatch_queue> *audioPowerUpdaterQueue
 @property  AFAudioPowerUpdater *audioPowerUpdater
 @property  BOOL isPlayingPreview
 @property  AFAudioPowerXPCProvider *previewAudioPowerXPCProvider
 @property  <VSSpeechSynthesizerDelegate> *delegate
 @property  BOOL keepActive
 @property  float rate
 @property  float pitch
 @property  float volume
 @property  NSString *voice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VSSpeechSynthesizer sharedInstance]
  +[VSSpeechSynthesizer playVoicePreviewForLanguageCode:voiceName:previewType:completion:]
  +[VSSpeechSynthesizer stopPlayingVoicePreview]
  +[VSSpeechSynthesizer errorWithReason:]
  +[VSSpeechSynthesizer validatePrewarmRequest:]
  +[VSSpeechSynthesizer validateRequest:]
  +[VSSpeechSynthesizer validateAudioRequest:]
  +[VSSpeechSynthesizer validateAudioCachingRequest:]
  +[VSSpeechSynthesizer characterClassCountForUtterance:language:]

  // instance methods
  -[VSSpeechSynthesizer stopSpeakingPresynthesizedAudioSynchronously:error:]
  -[VSSpeechSynthesizer setStsRequestMapping:]
  -[VSSpeechSynthesizer _setDelegate:]
  -[VSSpeechSynthesizer endAudioPowerUpdate]
  -[VSSpeechSynthesizer initForInputFeedback]
  -[VSSpeechSynthesizer connection:speechRequestDidPause:]
  -[VSSpeechSynthesizer rate]
  -[VSSpeechSynthesizer killDaemon]
  -[VSSpeechSynthesizer playVoicePreviewForLanguageCode:voiceName:previewType:completion:]
  -[VSSpeechSynthesizer cachePresynthesizedAudioRequest:]
  -[VSSpeechSynthesizer setLanguage:]
  -[VSSpeechSynthesizer _stopSpeakingRequest:atNextBoundary:synchronously:]
  -[VSSpeechSynthesizer errorFromSTSError:]
  -[VSSpeechSynthesizer connection:speechRequest:didStopAtEnd:phonemesSpoken:error:]
  -[VSSpeechSynthesizer setVoice:]
  -[VSSpeechSynthesizer accessoryID]
  -[VSSpeechSynthesizer setDelegate:]
  -[VSSpeechSynthesizer triggerCellularDownloadedVoiceAssets:]
  -[VSSpeechSynthesizer getVoiceInfoForLanguageCode:name:footprint:gender:type:reply:]
  -[VSSpeechSynthesizer proxySession]
  -[VSSpeechSynthesizer stsRequestMapping]
  -[VSSpeechSynthesizer setKeepActive:]
  -[VSSpeechSynthesizer queryPhaticCapability:]
  -[VSSpeechSynthesizer minimumRate]
  -[VSSpeechSynthesizer STS_forwardStreamObject:]
  -[VSSpeechSynthesizer stopPlayingVoicePreview]
  -[VSSpeechSynthesizer setAutoDownloadedVoiceAssets:]
  -[VSSpeechSynthesizer startSpeakingPresynthesizedAudioRequest:]
  -[VSSpeechSynthesizer setRate:]
  -[VSSpeechSynthesizer delegate]
  -[VSSpeechSynthesizer audioPowerUpdater]
  -[VSSpeechSynthesizer connection:presynthesizedAudioRequestDidStart:]
  -[VSSpeechSynthesizer setAudioPowerUpdater:]
  -[VSSpeechSynthesizer STS_isSpeaking]
  -[VSSpeechSynthesizer isSystemSpeaking]
  -[VSSpeechSynthesizer availableLanguageCodes]
  -[VSSpeechSynthesizer connection:speechRequestDidStart:]
  -[VSSpeechSynthesizer STS_textToPhonemesWithRequest:phonemeSystem:completion:]
  -[VSSpeechSynthesizer connection:presynthesizedAudioRequest:didStopAtEnd:error:]
  -[VSSpeechSynthesizer voice]
  -[VSSpeechSynthesizer .cxx_destruct]
  -[VSSpeechSynthesizer stopSpeakingAtNextBoundary:synchronously:error:]
  -[VSSpeechSynthesizer didEndAccessPower]
  -[VSSpeechSynthesizer pitch]
  -[VSSpeechSynthesizer initWithAccessoryID:]
  -[VSSpeechSynthesizer cancelAudioRequest:]
  -[VSSpeechSynthesizer STS_startSpeakingAudioRequest:]
  -[VSSpeechSynthesizer startSynthesizingRequest:]
  -[VSSpeechSynthesizer setVolume:]
  -[VSSpeechSynthesizer getVoiceInfoForLanguageCode:name:type:footprint:reply:]
  -[VSSpeechSynthesizer _continueSpeakingRequest]
  -[VSSpeechSynthesizer setPitch:]
  -[VSSpeechSynthesizer cancelRequest:]
  -[VSSpeechSynthesizer prewarmIfNeededWithRequest:]
  -[VSSpeechSynthesizer previewAudioPowerXPCProvider]
  -[VSSpeechSynthesizer durationRequests]
  -[VSSpeechSynthesizer _pauseSpeakingRequestAtNextBoundary:synchronously:]
  -[VSSpeechSynthesizer getAutoDownloadedVoiceAssets:]
  -[VSSpeechSynthesizer isPlayingPreview]
  -[VSSpeechSynthesizer volume]
  -[VSSpeechSynthesizer estimateDurationOfRequest:completion:]
  -[VSSpeechSynthesizer availableFootprintsForVoice:languageCode:]
  -[VSSpeechSynthesizer setAudioPowerUpdaterQueue:]
  -[VSSpeechSynthesizer connection:previewRequestDidStartPlaying:]
  -[VSSpeechSynthesizer speechString]
  -[VSSpeechSynthesizer setPreviewAudioPowerXPCProvider:]
  -[VSSpeechSynthesizer estimateDurationOfRequest:]
  -[VSSpeechSynthesizer willBeginAccessPower]
  -[VSSpeechSynthesizer connection:speechRequest:didReceiveTimingInfo:]
  -[VSSpeechSynthesizer STS_cancelRequest:]
  -[VSSpeechSynthesizer connection:speechRequest:willSpeakMark:inRange:]
  -[VSSpeechSynthesizer STS_prewarmRequest:]
  -[VSSpeechSynthesizer getVoiceResourceForLanguage:reply:]
  -[VSSpeechSynthesizer STS_signalInlineStreaming:]
  -[VSSpeechSynthesizer setDurationRequests:]
  -[VSSpeechSynthesizer setProxySession:]
  -[VSSpeechSynthesizer connection:invalidatedWithError:]
  -[VSSpeechSynthesizer getLocalVoiceResources:]
  -[VSSpeechSynthesizer setAccessoryID:]
  -[VSSpeechSynthesizer language]
  -[VSSpeechSynthesizer connection:speechRequest:didGenerateAudioChunk:]
  -[VSSpeechSynthesizer pauseSpeakingAtNextBoundary:synchronously:error:]
  -[VSSpeechSynthesizer connection:speechRequest:successWithInstrumentMetrics:]
  -[VSSpeechSynthesizer connection:synthesisRequest:didFinishWithInstrumentMetrics:error:]
  -[VSSpeechSynthesizer audioPowerUpdaterQueue]
  -[VSSpeechSynthesizer invokeDaemon:]
  -[VSSpeechSynthesizer _stopSpeakingPresynthesizedAudioRequest:synchronously:]
  -[VSSpeechSynthesizer STS_startSynthesizingRequest:]
  -[VSSpeechSynthesizer cleanUnusedAssets:]
  -[VSSpeechSynthesizer getAveragePower:andPeakPower:]
  -[VSSpeechSynthesizer getLocalVoiceAssets:]
  -[VSSpeechSynthesizer availableVoicesForLanguageCode:]
  -[VSSpeechSynthesizer STS_cancelAudioRequest:]
  -[VSSpeechSynthesizer startSpeakingRequest:]
  -[VSSpeechSynthesizer textToPhonemesWithRequest:phonemeSystem:completion:]
  -[VSSpeechSynthesizer isSpeaking]
  -[VSSpeechSynthesizer getLocalVoiceAssetsForLanguage:reply:]
  -[VSSpeechSynthesizer connection:presynthesizedAudioRequest:successWithInstrumentMetrics:error:]
  -[VSSpeechSynthesizer getAllAutoDownloadedVoiceAssets:]
  -[VSSpeechSynthesizer continueSpeakingWithError:]
  -[VSSpeechSynthesizer setIsPlayingPreview:]
  -[VSSpeechSynthesizer keepActive]
  -[VSSpeechSynthesizer connection:speechRequestDidContinue:]
  -[VSSpeechSynthesizer init]
  -[VSSpeechSynthesizer beginAudioPowerUpdateWithReply:]
  -[VSSpeechSynthesizer STS_startSpeakingRequest:]
  -[VSSpeechSynthesizer forwardStreamObject:]
  -[VSSpeechSynthesizer maximumRate]


VSPreferencesInterface : NSObject
 @property  NSUserDefaults *defaults
 @property  {_opaque_pthread_mutex_t=q[56c]} lock
 @property  NSDate *OOBTriggeredDate
 @property  BOOL OOBNeedsToBeMeasured
 @property  NSDate *lastTTSRequestDate
 @property  NSString *deviceUUID

  // class methods
  +[VSPreferencesInterface defaultInstance]
  +[VSPreferencesInterface dictionaryRepresentationOfVoices:]

  // instance methods
  -[VSPreferencesInterface defaults]
  -[VSPreferencesInterface setDefaults:]
  -[VSPreferencesInterface lastTTSRequestDate]
  -[VSPreferencesInterface dealloc]
  -[VSPreferencesInterface subscribedVoicesForClientID:accessoryID:]
  -[VSPreferencesInterface initWithSuiteName:]
  -[VSPreferencesInterface .cxx_destruct]
  -[VSPreferencesInterface setSubscribedVoices:forClientID:accessoryID:]
  -[VSPreferencesInterface setOOBTriggeredDate:]
  -[VSPreferencesInterface migrateDefaults]
  -[VSPreferencesInterface setLastTTSRequestDate:]
  -[VSPreferencesInterface removeSubscriptionsForAccessory:]
  -[VSPreferencesInterface setLock:]
  -[VSPreferencesInterface setOOBNeedsToBeMeasured:]
  -[VSPreferencesInterface OOBNeedsToBeMeasured]
  -[VSPreferencesInterface lock]
  -[VSPreferencesInterface deviceUUID]
  -[VSPreferencesInterface OOBTriggeredDate]


VSKeepAlive : NSObject
 @property  long long audioType
 @property  BOOL active
 @property  BOOL keepAudioSessionActive

  // instance methods
  -[VSKeepAlive active]
  -[VSKeepAlive _serverConnection]
  -[VSKeepAlive dealloc]
  -[VSKeepAlive .cxx_destruct]
  -[VSKeepAlive setActive:]
  -[VSKeepAlive audioType]
  -[VSKeepAlive setAudioType:]
  -[VSKeepAlive _remoteKeepAlive]
  -[VSKeepAlive setKeepAudioSessionActive:]
  -[VSKeepAlive _ensureKeepAliveMaintenance]
  -[VSKeepAlive keepAudioSessionActive]


VSSpeechConnection : NSObject
 @property  NSXPCConnection *xpcConnection
 @property  VSSpeechConnectionDelegateWrapper *delegateWrapper
 @property  NSObject<OS_dispatch_queue> *threadSafeQueue
 @property  NSString *identifier
 @property  BOOL keepActive
 @property  <VSSpeechConnectionDelegate> *delegate

  // instance methods
  -[VSSpeechConnection endAudioPowerUpdate]
  -[VSSpeechConnection startSynthesisRequest:]
  -[VSSpeechConnection identifier]
  -[VSSpeechConnection killDaemon]
  -[VSSpeechConnection cachePresynthesizedAudioRequest:]
  -[VSSpeechConnection _connectionInvalidated]
  -[VSSpeechConnection currentRequest]
  -[VSSpeechConnection setDelegate:]
  -[VSSpeechConnection xpcConnection]
  -[VSSpeechConnection getVoiceInfoForLanguageCode:name:footprint:gender:type:reply:]
  -[VSSpeechConnection setKeepActive:]
  -[VSSpeechConnection estimateDurationWithRequest:reply:]
  -[VSSpeechConnection delegate]
  -[VSSpeechConnection startVoicePreviewRequest:reply:]
  -[VSSpeechConnection stopPresynthesizedAudioRequest:]
  -[VSSpeechConnection isSystemSpeaking]
  -[VSSpeechConnection getSubscribedVoiceAssetsWithClientID:forAccessoryID:reply:]
  -[VSSpeechConnection dealloc]
  -[VSSpeechConnection setDelegateWrapper:]
  -[VSSpeechConnection stopVoicePreview]
  -[VSSpeechConnection .cxx_destruct]
  -[VSSpeechConnection _remoteObjectWithErrorHandler:]
  -[VSSpeechConnection startPhonemesRequest:phonemeSystem:reply:]
  -[VSSpeechConnection setSubscribedVoiceAssets:withClientID:forAccessoryID:]
  -[VSSpeechConnection currentAudioRequest]
  -[VSSpeechConnection _remoteObjectSync]
  -[VSSpeechConnection setXpcConnection:]
  -[VSSpeechConnection availableFootprintsForVoice:languageCode:]
  -[VSSpeechConnection stopSpeechRequest:atMark:]
  -[VSSpeechConnection startSpeechRequest:]
  -[VSSpeechConnection setIdentifier:]
  -[VSSpeechConnection getVoiceResourceForLanguage:reply:]
  -[VSSpeechConnection getAllVoiceSubscriptionsWithReply:]
  -[VSSpeechConnection delegateWrapper]
  -[VSSpeechConnection getLocalVoiceResources:]
  -[VSSpeechConnection _remoteObject]
  -[VSSpeechConnection threadSafeQueue]
  -[VSSpeechConnection pauseSpeechRequest:atMark:]
  -[VSSpeechConnection invokeDaemon:]
  -[VSSpeechConnection triggerCellularDownloadedVoiceAssets:withClientID:]
  -[VSSpeechConnection cleanUnusedAssets:]
  -[VSSpeechConnection continueSpeechRequest:]
  -[VSSpeechConnection availableVoicesForLanguageCode:]
  -[VSSpeechConnection startPresynthesizedAudioRequest:]
  -[VSSpeechConnection setThreadSafeQueue:]
  -[VSSpeechConnection getLocalVoiceAssetsForLanguage:reply:]
  -[VSSpeechConnection updateWithConnectionIdentifier:keepActive:]
  -[VSSpeechConnection isSystemSpeakingOnBehalfOfCurrentConnection]
  -[VSSpeechConnection keepActive]
  -[VSSpeechConnection queryPhaticCapabilityWithRequest:]
  -[VSSpeechConnection init]
  -[VSSpeechConnection beginAudioPowerUpdateWithReply:]
  -[VSSpeechConnection prewarmIfNeededWithRequest:reply:]
  -[VSSpeechConnection forwardStreamObject:]


VSSpeechConnectionDelegateWrapper : NSObject <VSSpeechServiceDelegate>
 @property  <VSSpeechConnectionDelegate> *delegate
 @property  VSSpeechRequest *currentRequest
 @property  NSMutableArray *requests
 @property  NSMutableDictionary *concurrentSynthesisRequests
 @property  VSPresynthesizedAudioRequest *currentAudioRequest
 @property  NSMutableArray *audioRequests
 @property  NSMutableArray *previewRequests
 @property  VSSpeechConnection *connection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VSSpeechConnectionDelegateWrapper requests]
  -[VSSpeechConnectionDelegateWrapper setCurrentRequest:]
  -[VSSpeechConnectionDelegateWrapper getLocalPreviewRequest:]
  -[VSSpeechConnectionDelegateWrapper concurrentSynthesisRequests]
  -[VSSpeechConnectionDelegateWrapper currentRequest]
  -[VSSpeechConnectionDelegateWrapper setDelegate:]
  -[VSSpeechConnectionDelegateWrapper setAudioRequests:]
  -[VSSpeechConnectionDelegateWrapper audioRequest:didReportInstrumentMetrics:error:]
  -[VSSpeechConnectionDelegateWrapper delegate]
  -[VSSpeechConnectionDelegateWrapper audioRequestDidStart:]
  -[VSSpeechConnectionDelegateWrapper speechRequest:didStartWithMark:forRange:]
  -[VSSpeechConnectionDelegateWrapper .cxx_destruct]
  -[VSSpeechConnectionDelegateWrapper connection]
  -[VSSpeechConnectionDelegateWrapper speechRequest:didStopWithSuccess:phonemesSpoken:error:]
  -[VSSpeechConnectionDelegateWrapper speechRequest:didReportInstrumentMetrics:]
  -[VSSpeechConnectionDelegateWrapper currentAudioRequest]
  -[VSSpeechConnectionDelegateWrapper previewRequests]
  -[VSSpeechConnectionDelegateWrapper setRequests:]
  -[VSSpeechConnectionDelegateWrapper getLocalRequest:]
  -[VSSpeechConnectionDelegateWrapper audioRequest:didStopAtEnd:error:]
  -[VSSpeechConnectionDelegateWrapper speechRequest:didReceiveTimingInfo:]
  -[VSSpeechConnectionDelegateWrapper speechRequestDidPause:]
  -[VSSpeechConnectionDelegateWrapper getLocalAudioRequest:]
  -[VSSpeechConnectionDelegateWrapper setConcurrentSynthesisRequests:]
  -[VSSpeechConnectionDelegateWrapper setCurrentAudioRequest:]
  -[VSSpeechConnectionDelegateWrapper speechRequestDidContinue:]
  -[VSSpeechConnectionDelegateWrapper previewRequestDidStartPlaying:]
  -[VSSpeechConnectionDelegateWrapper setPreviewRequests:]
  -[VSSpeechConnectionDelegateWrapper audioRequests]
  -[VSSpeechConnectionDelegateWrapper synthesisRequest:didGenerateAudioChunk:]
  -[VSSpeechConnectionDelegateWrapper synthesisRequest:didFinishWithInstrumentMetrics:error:]
  -[VSSpeechConnectionDelegateWrapper synthesisRequest:didReceiveTimingInfo:]
  -[VSSpeechConnectionDelegateWrapper speechRequestDidStart:]
  -[VSSpeechConnectionDelegateWrapper init]
  -[VSSpeechConnectionDelegateWrapper setConnection:]


VSAudioData : NSObject <NSCopying, NSSecureCoding>
 @property  NSMutableData *mutableAudioData
 @property  NSMutableData *mutableDescription
 @property  NSData *audioData
 @property  {AudioStreamBasicDescription=dIIIIIIII} asbd
 @property  long long packetCount
 @property  NSData *packetDescriptions

  // class methods
  +[VSAudioData supportsSecureCoding]

  // instance methods
  -[VSAudioData encodeWithCoder:]
  -[VSAudioData .cxx_destruct]
  -[VSAudioData duration]
  -[VSAudioData copyWithZone:]
  -[VSAudioData init]
  -[VSAudioData initWithCoder:]
  -[VSAudioData packetDescriptions]
  -[VSAudioData setPacketCount:]
  -[VSAudioData packetCount]
  -[VSAudioData setPacketDescriptions:]
  -[VSAudioData asbd]
  -[VSAudioData setAsbd:]
  -[VSAudioData audioData]
  -[VSAudioData setAudioData:]
  -[VSAudioData totalFrames]
  -[VSAudioData concatenateWithAudio:]
  -[VSAudioData mutableAudioData]
  -[VSAudioData setMutableAudioData:]
  -[VSAudioData mutableDescription]
  -[VSAudioData setMutableDescription:]


VSVoiceAsset : VSAssetBase <NSSecureCoding>
 @property  NSString *name
 @property  NSArray *languages
 @property  long long gender
 @property  long long footprint
 @property  long long type
 @property  BOOL isInstalled
 @property  BOOL isBuiltInVoice
 @property  BOOL isVoiceReadyToUse

  // class methods
  +[VSVoiceAsset supportsSecureCoding]
  +[VSVoiceAsset typeStringFromType:]
  +[VSVoiceAsset compatibilityVersionFromMobileAssetAttributes:]
  +[VSVoiceAsset footprintStringFromFootprint:]
  +[VSVoiceAsset genderFromString:]
  +[VSVoiceAsset typeFromString:]
  +[VSVoiceAsset genderStringFromGender:]
  +[VSVoiceAsset languagesFromMobileAssetAttributes:]
  +[VSVoiceAsset footprintFromString:]

  // instance methods
  -[VSVoiceAsset isInstalled]
  -[VSVoiceAsset footprint]
  -[VSVoiceAsset languages]
  -[VSVoiceAsset setLanguages:]
  -[VSVoiceAsset encodeWithCoder:]
  -[VSVoiceAsset type]
  -[VSVoiceAsset gender]
  -[VSVoiceAsset .cxx_destruct]
  -[VSVoiceAsset isBuiltInVoice]
  -[VSVoiceAsset initWithDictionaryRepresentation:]
  -[VSVoiceAsset setFootprint:]
  -[VSVoiceAsset setType:]
  -[VSVoiceAsset setIsInstalled:]
  -[VSVoiceAsset dictionaryRepresentation]
  -[VSVoiceAsset setName:]
  -[VSVoiceAsset setGender:]
  -[VSVoiceAsset name]
  -[VSVoiceAsset descriptiveKey]
  -[VSVoiceAsset initWithCoder:]
  -[VSVoiceAsset nameKey]
  -[VSVoiceAsset setIsBuiltInVoice:]
  -[VSVoiceAsset initFromMobileAssetAttributes:]
  -[VSVoiceAsset amendNameVersionAndSizeWithMobileAssetAttributes:]
  -[VSVoiceAsset voiceKey]
  -[VSVoiceAsset isVoiceReadyToUse]
  -[VSVoiceAsset setIsVoiceReadyToUse:]


VSGenericUpdateEndpoint : NSObject <NSXPCListenerDelegate, NSSecureCoding>
 @property  NSXPCListenerEndpoint *endpoint
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCListener *listener
 @property  @? handler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VSGenericUpdateEndpoint supportsSecureCoding]
  +[VSGenericUpdateEndpoint configuredEndpointWithUpdateHandler:withConnection:]
  +[VSGenericUpdateEndpoint remoteUpdateHanderForEndpoint:]

  // instance methods
  -[VSGenericUpdateEndpoint setEndpoint:]
  -[VSGenericUpdateEndpoint setHandler:]
  -[VSGenericUpdateEndpoint encodeWithCoder:]
  -[VSGenericUpdateEndpoint endpoint]
  -[VSGenericUpdateEndpoint dealloc]
  -[VSGenericUpdateEndpoint .cxx_destruct]
  -[VSGenericUpdateEndpoint setListener:]
  -[VSGenericUpdateEndpoint setQueue:]
  -[VSGenericUpdateEndpoint handler]
  -[VSGenericUpdateEndpoint invalidate]
  -[VSGenericUpdateEndpoint queue]
  -[VSGenericUpdateEndpoint listener]
  -[VSGenericUpdateEndpoint listener:shouldAcceptNewConnection:]
  -[VSGenericUpdateEndpoint initWithCoder:]


VSGenericBlockHolder : NSObject <VSGenericUpdate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VSGenericBlockHolder .cxx_destruct]
  -[VSGenericBlockHolder initWithBlock:]
  -[VSGenericBlockHolder invokeUpdateWithObject:]


VSNeuralTTSUtils : NSObject
  // class methods
  +[VSNeuralTTSUtils hasAMX]
  +[VSNeuralTTSUtils hasANE]
  +[VSNeuralTTSUtils shouldUseNeuralVoice:]
  +[VSNeuralTTSUtils isANEModelCompiled:]
  +[VSNeuralTTSUtils isNeuralVoiceReady:]
  +[VSNeuralTTSUtils hasCompactNeuralFallback:]
  +[VSNeuralTTSUtils isNeuralFallbackCondition]
  +[VSNeuralTTSUtils hasOTAANEModel:]
  +[VSNeuralTTSUtils compileANEModel:]
  +[VSNeuralTTSUtils isNeuralTTSPlatform]
  +[VSNeuralTTSUtils isANECompilationPlatform]


VSTrialVoice : NSObject
 @property  NSString *path
 @property  NSString *language
 @property  NSString *name
 @property  long long type
 @property  long long footprint
 @property  long long gender
 @property  unsigned long version
 @property  unsigned long assetSize
 @property  long long compatibilityVersion

  // instance methods
  -[VSTrialVoice footprint]
  -[VSTrialVoice setLanguage:]
  -[VSTrialVoice setAssetSize:]
  -[VSTrialVoice assetSize]
  -[VSTrialVoice path]
  -[VSTrialVoice type]
  -[VSTrialVoice gender]
  -[VSTrialVoice .cxx_destruct]
  -[VSTrialVoice setPath:]
  -[VSTrialVoice setFootprint:]
  -[VSTrialVoice setCompatibilityVersion:]
  -[VSTrialVoice setType:]
  -[VSTrialVoice version]
  -[VSTrialVoice compatibilityVersion]
  -[VSTrialVoice setName:]
  -[VSTrialVoice preferenceScore]
  -[VSTrialVoice setGender:]
  -[VSTrialVoice language]
  -[VSTrialVoice name]
  -[VSTrialVoice initWithFactorLevel:]
  -[VSTrialVoice initWithFactorName:]
  -[VSTrialVoice setVersion:]
  -[VSTrialVoice isLocal]
  -[VSTrialVoice initWithLanguage:name:]
  -[VSTrialVoice factorName]


VSDownloadOptions : NSObject
 @property  BOOL allowCellularData
 @property  BOOL allowDiscretionary

  // instance methods
  -[VSDownloadOptions allowCellularData]
  -[VSDownloadOptions setAllowCellularData:]
  -[VSDownloadOptions allowDiscretionary]
  -[VSDownloadOptions setAllowDiscretionary:]


VSTrialVoiceResource : NSObject
 @property  NSString *path
 @property  NSString *language
 @property  unsigned long version

  // instance methods
  -[VSTrialVoiceResource setLanguage:]
  -[VSTrialVoiceResource path]
  -[VSTrialVoiceResource .cxx_destruct]
  -[VSTrialVoiceResource setPath:]
  -[VSTrialVoiceResource version]
  -[VSTrialVoiceResource language]
  -[VSTrialVoiceResource initWithLanguage:]
  -[VSTrialVoiceResource initWithFactorLevel:]
  -[VSTrialVoiceResource initWithFactorName:]
  -[VSTrialVoiceResource setVersion:]
  -[VSTrialVoiceResource isLocal]
  -[VSTrialVoiceResource factorName]


VSTrialService : NSObject
 @property  TRIClient *triClient
 @property  NSArray *cachedVoices
 @property  NSArray *cachedResources
 @property  <TRINotificationToken> *trialNotificationToken
 @property  NSObject<OS_dispatch_queue> *downloadQueue
 @property  NSLock *clientRefreshLock

  // class methods
  +[VSTrialService sharedService]
  +[VSTrialService versionFactorNameWithFactorName:]
  +[VSTrialService defaultDownloadOptions]

  // instance methods
  -[VSTrialService triClient]
  -[VSTrialService definedVoiceResourcesWithLanguage:]
  -[VSTrialService removeVoice:completion:]
  -[VSTrialService definedVoicesWithAssets:]
  -[VSTrialService setClientRefreshLock:]
  -[VSTrialService setCachedResources:]
  -[VSTrialService definedVoicesWithLanguage:name:type:footprint:]
  -[VSTrialService selectVoiceResourceWithLanguage:]
  -[VSTrialService _fileOfFactorName:]
  -[VSTrialService selectVoiceWithLanguage:name:type:footprint:]
  -[VSTrialService downloadVoiceResource:withOptions:progress:completion:]
  -[VSTrialService dealloc]
  -[VSTrialService refreshTrialClient]
  -[VSTrialService .cxx_destruct]
  -[VSTrialService _definedVoicesWithLanguage:name:type:footprint:]
  -[VSTrialService clientRefreshLock]
  -[VSTrialService setDownloadQueue:]
  -[VSTrialService trialNotificationToken]
  -[VSTrialService downloadVoice:withOptions:progress:completion:]
  -[VSTrialService _removeAssetWithFactorName:completion:]
  -[VSTrialService _downloadFactorName:withOptions:progress:completion:]
  -[VSTrialService downloadNamespaceImmediatelyIfNeededWithOption:completion:]
  -[VSTrialService cachedVoices]
  -[VSTrialService setCachedVoices:]
  -[VSTrialService setTrialNotificationToken:]
  -[VSTrialService _directoryOfFactorName:]
  -[VSTrialService removeVoiceResource:completion:]
  -[VSTrialService setTriClient:]
  -[VSTrialService cachedResources]
  -[VSTrialService downloadQueue]
  -[VSTrialService init]


NSFileManager(VoiceServices)
	// instance methods
	-[NSFileManager(VoiceServices) directorySize:]
	-[NSFileManager(VoiceServices) removeDirectory:]
	-[NSFileManager(VoiceServices) cleanDirectory:withLRULimit:]
	-[NSFileManager(VoiceServices) cleanDirectory:withDateOlderThan:]

(VSSpeechService)
	// class methods
	+[(VSSpeechService) vs_markerStringForContext:]
	+[(VSSpeechService) _vs_countPhoneticSyllables_lhp:]
	+[(VSSpeechService) _vs_countPhoneticSyllables_xsampa:]
	+[(VSSpeechService) vs_isCJKCharacter:]
	+[(VSSpeechService) vs_stringFrom4CC:]

	// instance methods
	-[(VSSpeechService) vs_textifyEmojiWithLanguage:]
	-[(VSSpeechService) vs_substituteAudioWithLocalPath]
	-[(VSSpeechService) vs_insertContextInfo:]
	-[(VSSpeechService) vs_measurePauses]
	-[(VSSpeechService) vs_countPhoneticSyllables]
	-[(VSSpeechService) vs_removePhonetics]
	-[(VSSpeechService) vs_removeSpeechTags]
	-[(VSSpeechService) vs_hasCJKCharacter]
	-[(VSSpeechService) vs_convertToSSML]
	-[(VSSpeechService) sha256hex]
	-[(VSSpeechService) preinstalledAudioHashForLanguage:name:]

(VSRecognitionSessionKeywords)
	// instance methods
	-[(VSRecognitionSessionKeywords) _scrambledKeywordsAndAddToSet:]
	-[(VSRecognitionSessionKeywords) _nextKeywordUsingCursors:]

NSAttributedString(VSSpeechAdditions)
	// class methods
	+[NSAttributedString(VSSpeechAdditions) attributedStringWithFormatAndAttributes:]

NSMutableAttributedString(VSSpeechAdditions)
	// instance methods
	-[NSMutableAttributedString(VSSpeechAdditions) appendString:withAttributes:]

01 00 1300 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioCompressedBuffer 
01 00 1300 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioConverter 
01 00 1300 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioFormat 
01 00 1300 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioPCMBuffer 
01 00 1300 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0300 /System/Library/PrivateFrameworks/SiriAnalytics.framework/SiriAnalytics: AssistantSiriAnalytics 
01 00 0a00 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAsset 
01 00 0a00 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAssetQuery 
01 00 0a00 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MADownloadOptions 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAutoreleasePool 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConditionLock 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 1100 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListenerEndpoint 
01 00 0200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUUID 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSAudioData 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSAudioRequest 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSDaemonSession 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSInlineStreamingSignal 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSPhonemeRequest 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSSpeechRequest 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSSynthesisRequest 
01 00 0140 /System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService: SiriTTSSynthesisVoice 
01 00 0440 /System/Library/PrivateFrameworks/Trial.framework/Trial: TRIClient 
01 00 0440 /System/Library/PrivateFrameworks/Trial.framework/Trial: TRIDownloadOptions 
01 00 0200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: TTSSchemaTTSClientEvent 
01 00 0200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: TTSSchemaTTSClientEventMetadata 
01 00 0200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: TTSSchemaTTSClientSpeechContext 
01 00 0200 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: TTSSchemaTTSSpeechFailed 
