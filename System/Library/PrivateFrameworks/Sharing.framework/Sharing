|| __DATA.__common _gSDAppleIDAgent
|| __DATA.__common _gSDSetupAgent
|| __DATA.__common _gSFNearbyAgent
|| __DATA.__common _gSFRunningInSharingD
|| __DATA.__data _SFAppleIDIdentityDidChangeNotification
|| __DATA.__data _SFAppleIDValidationRecordDidChangeNotification
|| __DATA.__data _SFPasswordSharingAvailabilityNotification
|| __DATA.__objc_data _OBJC_CLASS_$_SFAccessibilityClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFAccountManager
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropAction
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropBrowser
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropClassroomTransferManager
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropNode
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropTransfer
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropTransferItem
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropTransferMetaData
|| __DATA.__objc_data _OBJC_CLASS_$_SFAirDropTransferObserver
|| __DATA.__objc_data _OBJC_CLASS_$_SFAnnounceMessagesEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SFAppleIDAccount
|| __DATA.__objc_data _OBJC_CLASS_$_SFAppleIDClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFAppleIDContactInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFAppleIDIdentity
|| __DATA.__objc_data _OBJC_CLASS_$_SFAppleIDPersonInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFAppleIDValidationRecord
|| __DATA.__objc_data _OBJC_CLASS_$_SFApproveDiscovery
|| __DATA.__objc_data _OBJC_CLASS_$_SFAuthenticateAccountInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFAuthenticateAccountsService
|| __DATA.__objc_data _OBJC_CLASS_$_SFAuthenticateAccountsSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFAutoUnlockManager
|| __DATA.__objc_data _OBJC_CLASS_$_SFBLEAdvertiser
|| __DATA.__objc_data _OBJC_CLASS_$_SFBLEClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFBLEConnection
|| __DATA.__objc_data _OBJC_CLASS_$_SFBLEData
|| __DATA.__objc_data _OBJC_CLASS_$_SFBLEPipe
|| __DATA.__objc_data _OBJC_CLASS_$_SFBLERecorder
|| __DATA.__objc_data _OBJC_CLASS_$_SFBLEScanner
|| __DATA.__objc_data _OBJC_CLASS_$_SFBluetoothPairingSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFBubbleEstimator
|| __DATA.__objc_data _OBJC_CLASS_$_SFChargingUICoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_SFClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFContinuityRemoteSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceAssetManager
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceAssetQuery
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceAssetRequestConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceOperationCDPSetup
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceOperationHandlerCDPSetup
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceOperationHandlerWiFiSetup
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceOperationHomeKitSetup
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceOperationWiFiSetup
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceRepairService
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceRepairSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupAppleTVService
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupAppleTVSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupB238Service
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupB238Session
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupServiceiOS
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupSessioniOS
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupTVLatencyService
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupTVLatencySession
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupWHAService
|| __DATA.__objc_data _OBJC_CLASS_$_SFDeviceSetupWHASession
|| __DATA.__objc_data _OBJC_CLASS_$_SFDiagnostics
|| __DATA.__objc_data _OBJC_CLASS_$_SFMagicHeadSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SFMessageSessionRequestEntry
|| __DATA.__objc_data _OBJC_CLASS_$_SFNFCTagReaderUIController
|| __DATA.__objc_data _OBJC_CLASS_$_SFNotificationError
|| __DATA.__objc_data _OBJC_CLASS_$_SFNotificationInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFPINPairSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFPasswordSharingInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFPasswordSharingService
|| __DATA.__objc_data _OBJC_CLASS_$_SFPasswordSharingSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFPowerSource
|| __DATA.__objc_data _OBJC_CLASS_$_SFPowerSourceLEDInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFPowerSourceMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_SFProxCardSessionClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFProxCardSessionServer
|| __DATA.__objc_data _OBJC_CLASS_$_SFProxHandoffService
|| __DATA.__objc_data _OBJC_CLASS_$_SFProximityClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFProximityEstimator
|| __DATA.__objc_data _OBJC_CLASS_$_SFRemoteAutoFillScanAction
|| __DATA.__objc_data _OBJC_CLASS_$_SFRemoteAutoFillService
|| __DATA.__objc_data _OBJC_CLASS_$_SFRemoteAutoFillSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFRemoteAutoFillSessionHelper
|| __DATA.__objc_data _OBJC_CLASS_$_SFRemoteHotspotSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFRemoteInteractionSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFRemoteTextInputClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFService
|| __DATA.__objc_data _OBJC_CLASS_$_SFSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFSessionCache
|| __DATA.__objc_data _OBJC_CLASS_$_SFSessionRequestInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SFSettingsDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SFShareAudioService
|| __DATA.__objc_data _OBJC_CLASS_$_SFShareAudioSessionClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFSiriClient
|| __DATA.__objc_data _OBJC_CLASS_$_SFSiriDeviceSetupGreetingDetails
|| __DATA.__objc_data _OBJC_CLASS_$_SFSiriWordTimingInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFSiriWordTimingPlayer
|| __DATA.__objc_data _OBJC_CLASS_$_SFSystemService
|| __DATA.__objc_data _OBJC_CLASS_$_SFSystemSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFTRSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFTokenBucket
|| __DATA.__objc_data _OBJC_CLASS_$_SFTokenBucketWithDups
|| __DATA.__objc_data _OBJC_CLASS_$_SFUnlockManager
|| __DATA.__objc_data _OBJC_CLASS_$_SFUserAlert
|| __DATA.__objc_data _OBJC_CLASS_$_SFWiFiHealthMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_SFWirelessSettingsController
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAccessibilityClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAccountManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropAction
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropBrowser
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropClassroomTransferManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropNode
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropTransfer
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropTransferItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropTransferMetaData
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAirDropTransferObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAnnounceMessagesEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAppleIDAccount
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAppleIDClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAppleIDContactInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAppleIDIdentity
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAppleIDPersonInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAppleIDValidationRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_SFApproveDiscovery
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAuthenticateAccountInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAuthenticateAccountsService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAuthenticateAccountsSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAutoUnlockManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBLEAdvertiser
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBLEClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBLEConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBLEData
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBLEPipe
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBLERecorder
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBLEScanner
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBluetoothPairingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBubbleEstimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SFChargingUICoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_SFClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFContinuityRemoteSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceAssetManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceAssetQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceAssetRequestConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceOperationCDPSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceOperationHandlerCDPSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceOperationHandlerWiFiSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceOperationHomeKitSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceOperationWiFiSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceRepairService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceRepairSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupAppleTVService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupAppleTVSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupB238Service
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupB238Session
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupServiceiOS
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupSessioniOS
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupTVLatencyService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupTVLatencySession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupWHAService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDeviceSetupWHASession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFDiagnostics
|| __DATA.__objc_data _OBJC_METACLASS_$_SFMagicHeadSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SFMessageSessionRequestEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_SFNFCTagReaderUIController
|| __DATA.__objc_data _OBJC_METACLASS_$_SFNotificationError
|| __DATA.__objc_data _OBJC_METACLASS_$_SFNotificationInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPINPairSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPasswordSharingInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPasswordSharingService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPasswordSharingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPowerSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPowerSourceLEDInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPowerSourceMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_SFProxCardSessionClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFProxCardSessionServer
|| __DATA.__objc_data _OBJC_METACLASS_$_SFProxHandoffService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFProximityEstimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SFRemoteAutoFillScanAction
|| __DATA.__objc_data _OBJC_METACLASS_$_SFRemoteAutoFillService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFRemoteAutoFillSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFRemoteAutoFillSessionHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_SFRemoteHotspotSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFRemoteInteractionSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFRemoteTextInputClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSessionCache
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSessionRequestInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSettingsDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SFShareAudioService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFShareAudioSessionClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSiriClient
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSiriDeviceSetupGreetingDetails
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSiriWordTimingInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSiriWordTimingPlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSystemService
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSystemSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFTRSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFTokenBucket
|| __DATA.__objc_data _OBJC_METACLASS_$_SFTokenBucketWithDups
|| __DATA.__objc_data _OBJC_METACLASS_$_SFUnlockManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SFUserAlert
|| __DATA.__objc_data _OBJC_METACLASS_$_SFWiFiHealthMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_SFWirelessSettingsController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._dispatchQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._encryptionReadAEAD
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._encryptionReadNonce
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._encryptionWriteAEAD
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._encryptionWriteNonce
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._fixedPIN
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._fragmentData
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._fragmentLastIndex
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._heartbeatLastTicks
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._heartbeatTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._peer
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._peerAppleID
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._requestHandlers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._requestMap
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._serviceType
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._sessionFlags
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._sessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._sharingSourceVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._transaction
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._ucatCore
|| __DATA.__objc_ivar _OBJC_IVAR_$_SFSession._ucatCrypto
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricAWDLBringUpKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricAWDLPeerFoundKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricAWDLRangingKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricAttemptTypeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothAWDLExchangeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothConfirmationKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothKeyConnectionKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothKeyDeviceDiscoveryKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothKeyRequestExchangeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothPeerDiscoveryKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothProxyConnectionKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothProxyDeviceDiscoveryKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothTokenExchangeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricBluetoothTotalKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricCancelReasonKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricCancelTimeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricClamshellWaitKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricDeviceIDKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricDisplayWaitKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricDistanceKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricErrorCodeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricErrorDomainKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricErrorStringKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricErrorTypeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricKeyDeviceModelKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricKeyDeviceRSSIKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricLastSleepTypeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricProxyDeviceModelKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricProxyDeviceRSSIKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricSuccessKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricTimeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricTimeSinceLastWakeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricUsingProxyDeviceKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricUsingToolKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricWatchBuildVersionKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricWatchOSVersionKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricWiFiResultsKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricWithinRangeKey
|| __DATA_CONST.__const _SDAutoUnlockManagerMetricsKey
|| __DATA_CONST.__const _SFAccessibilityServiceName
|| __DATA_CONST.__const _SFActivityAdvertiserOptionFlagCopyPasteKey
|| __DATA_CONST.__const _SFActivityAdvertiserOptionMinorVersionKey
|| __DATA_CONST.__const _SFActivityAdvertiserOptionVersionKey
|| __DATA_CONST.__const _SFAdjustmentsKeyBias
|| __DATA_CONST.__const _SFAdjustmentsKeyDark
|| __DATA_CONST.__const _SFAdjustmentsKeyLight
|| __DATA_CONST.__const _SFAdjustmentsKeyMatrix
|| __DATA_CONST.__const _SFAppleAccountSignedInNotification
|| __DATA_CONST.__const _SFAppleAccountSignedOutNotification
|| __DATA_CONST.__const _SFAppleIDErrorDomain
|| __DATA_CONST.__const _SFAppleIDErrorUserInfoRetryDelaySecondsKey
|| __DATA_CONST.__const _SFAutoUnlockDynamicStoreEnabledKey
|| __DATA_CONST.__const _SFAutoUnlockDynamicStoreEnabledPath
|| __DATA_CONST.__const _SFAutoUnlockDynamicStoreInProgressKey
|| __DATA_CONST.__const _SFAutoUnlockDynamicStoreInProgressPath
|| __DATA_CONST.__const _SFAutoUnlockDynamicStoreSharingDomainKey
|| __DATA_CONST.__const _SFAutoUnlockErrorDomain
|| __DATA_CONST.__const _SFAutoUnlockManagerAttemptFailedNotification
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoUnlockAuthorizationTestModeDefault
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoUnlockTestModeDefault
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoUnlockTestModeDictionary
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoUnlockTestModeDuration
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoUnlockTestModeFailureString
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoUnlockTestModePassword
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoUnlockTestModeShouldFail
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoolOptionKey
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoolOptionRadarNotificationKey
|| __DATA_CONST.__const _SFAutoUnlockManagerAutoolUserName
|| __DATA_CONST.__const _SFAutoUnlockManagerDevicesChangedNotification
|| __DATA_CONST.__const _SFAutoUnlockManagerErrorBodyKey
|| __DATA_CONST.__const _SFAutoUnlockManagerErrorTitleKey
|| __DATA_CONST.__const _SFAutoUnlockStateChangedNotification
|| __DATA_CONST.__const _SFBluetoothNotificationKeyConnectStart
|| __DATA_CONST.__const _SFBluetoothNotificationKeyConnectTime
|| __DATA_CONST.__const _SFBluetoothNotificationKeyPeerDevice
|| __DATA_CONST.__const _SFBluetoothNotificationKeyState
|| __DATA_CONST.__const _SFBluetoothNotificationNameConnected
|| __DATA_CONST.__const _SFBluetoothNotificationNameDisconnected
|| __DATA_CONST.__const _SFBluetoothNotificationNameStateChanged
|| __DATA_CONST.__const _SFDeviceAssetAttributeColorKey
|| __DATA_CONST.__const _SFDeviceAssetAttributeH264Key
|| __DATA_CONST.__const _SFDeviceAssetAttributeProductTypeKey
|| __DATA_CONST.__const _SFDeviceAssetAttributeVariantNameKey
|| __DATA_CONST.__const _SFDeviceAssetNameAdjustments
|| __DATA_CONST.__const _SFDeviceAssetNameFeatures
|| __DATA_CONST.__const _SFDeviceAssetNameImageCaseClosed
|| __DATA_CONST.__const _SFDeviceAssetNameImageCaseClosedCharged
|| __DATA_CONST.__const _SFDeviceAssetNameImageCaseClosedCharging
|| __DATA_CONST.__const _SFDeviceAssetNameImageLeft
|| __DATA_CONST.__const _SFDeviceAssetNameImageRight
|| __DATA_CONST.__const _SFDeviceAssetNameMovieConnectIntro
|| __DATA_CONST.__const _SFDeviceAssetNameMovieConnectLoop
|| __DATA_CONST.__const _SFDeviceAssetNameMovieFeatures
|| __DATA_CONST.__const _SFDeviceAssetNameMovieLoop
|| __DATA_CONST.__const _SFDeviceAssetNameMovieRepairLoop
|| __DATA_CONST.__const _SFDeviceAssetNameMovieStatusLoopCharged
|| __DATA_CONST.__const _SFDeviceAssetNameMovieStatusLoopCharging
|| __DATA_CONST.__const _SFDeviceAssetQueryModernProductTypeSuffix
|| __DATA_CONST.__const _SFDeviceAssetsAssetType
|| __DATA_CONST.__const _SFFeaturesKeyDuration
|| __DATA_CONST.__const _SFFeaturesKeyStartTime
|| __DATA_CONST.__const _SFNotificationKeyConnectionState
|| __DATA_CONST.__const _SFNotificationNamePipeConnectionStateChanged
|| __DATA_CONST.__const _SFPairedUnlockStateChangedNotification
|| __DATA_CONST.__const _SFServiceIdentifierAirPlay
|| __DATA_CONST.__const _SFServiceIdentifierApplePay
|| __DATA_CONST.__const _SFServiceIdentifierApplePayLegacy
|| __DATA_CONST.__const _SFServiceIdentifierAppleTVSetup
|| __DATA_CONST.__const _SFServiceIdentifierAudioTuning
|| __DATA_CONST.__const _SFServiceIdentifierAuthenticateAccounts
|| __DATA_CONST.__const _SFServiceIdentifierAutoUnlock
|| __DATA_CONST.__const _SFServiceIdentifierCompanionLinkProx
|| __DATA_CONST.__const _SFServiceIdentifierConfigurator
|| __DATA_CONST.__const _SFServiceIdentifierContinuityRemote
|| __DATA_CONST.__const _SFServiceIdentifierControl
|| __DATA_CONST.__const _SFServiceIdentifierDebug
|| __DATA_CONST.__const _SFServiceIdentifierDeviceDiagnostics
|| __DATA_CONST.__const _SFServiceIdentifierInternetRelay
|| __DATA_CONST.__const _SFServiceIdentifierPINPair
|| __DATA_CONST.__const _SFServiceIdentifierPasswordGranting
|| __DATA_CONST.__const _SFServiceIdentifierPasswordSharing
|| __DATA_CONST.__const _SFServiceIdentifierProxHandoff
|| __DATA_CONST.__const _SFServiceIdentifierRemoteApp
|| __DATA_CONST.__const _SFServiceIdentifierRemoteAutoFill
|| __DATA_CONST.__const _SFServiceIdentifierRemoteAutoFillPong
|| __DATA_CONST.__const _SFServiceIdentifierRemoteDisplay
|| __DATA_CONST.__const _SFServiceIdentifierRemoteManagement
|| __DATA_CONST.__const _SFServiceIdentifierRepair
|| __DATA_CONST.__const _SFServiceIdentifierSetup
|| __DATA_CONST.__const _SFServiceIdentifierSetup2
|| __DATA_CONST.__const _SFServiceIdentifierShareAudio
|| __DATA_CONST.__const _SFServiceIdentifierSystem
|| __DATA_CONST.__const _SFServiceIdentifierWHASetup
|| __DATA_CONST.__const _SFServiceIdentifieriOSSetup
|| __DATA_CONST.__const _SFUnlockErrorDomian
|| __DATA_CONST.__const _SFViewServiceAirDropItemsKey
|| __DATA_CONST.__const _SFViewServiceSandboxExceptionsKey
|| __DATA_CONST.__const _SFWiFiPasswordSharingAdvertisingBegan
|| __DATA_CONST.__const _SFWiFiPasswordSharingAdvertisingEnded
|| __DATA_CONST.__const _kCFErrorDomainSFOperation
|| __DATA_CONST.__const _kSFAppleIDClientAccountInfoAppleIDCFKey
|| __DATA_CONST.__const _kSFAppleIDClientAccountInfoCertificateExpirationDateCFKey
|| __DATA_CONST.__const _kSFAppleIDClientAccountInfoCertificateSerialNumberCFKey
|| __DATA_CONST.__const _kSFAppleIDClientAccountInfoFirstNameCFKey
|| __DATA_CONST.__const _kSFAppleIDClientAccountInfoLastNameCFKey
|| __DATA_CONST.__const _kSFAppleIDClientAccountInfoVerifiedEmailAddressesCFKey
|| __DATA_CONST.__const _kSFAppleIDClientAccountInfoVerifiedPhoneNumbersCFKey
|| __DATA_CONST.__const _kSFAppleIDClientCertificateInfoCertificateCFKey
|| __DATA_CONST.__const _kSFAppleIDClientCertificateInfoCertificateSerialNumberCFKey
|| __DATA_CONST.__const _kSFAppleIDClientCertificateInfoEncDSIDCFKey
|| __DATA_CONST.__const _kSFAppleIDClientCertificateInfoValidationRecordDataCFKey
|| __DATA_CONST.__const _kSFAppleIDClientPersonInfoAccountIdentifierCFKey
|| __DATA_CONST.__const _kSFAppleIDClientPersonInfoAltDSIDCFKey
|| __DATA_CONST.__const _kSFAppleIDClientPersonInfoCertificateStatusCFKey
|| __DATA_CONST.__const _kSFAppleIDClientPersonInfoMatchedValueCFKey
|| __DATA_CONST.__const _kSFBrowserKindAirDrop
|| __DATA_CONST.__const _kSFBrowserKindNetwork
|| __DATA_CONST.__const _kSFBrowserKindPrinter
|| __DATA_CONST.__const _kSFBrowserKindRemoteDisc
|| __DATA_CONST.__const _kSFBrowserOptionsBundleIDKey
|| __DATA_CONST.__const _kSFBrowserOptionsPhotosAssetIDsKey
|| __DATA_CONST.__const _kSFBrowserOptionsURLsBeingSharedKey
|| __DATA_CONST.__const _kSFBrowserPreferencesAllEnabled
|| __DATA_CONST.__const _kSFBrowserPreferencesBackToMyMacEnabled
|| __DATA_CONST.__const _kSFBrowserPreferencesBonjourEnabled
|| __DATA_CONST.__const _kSFBrowserPreferencesConnectedEnabled
|| __DATA_CONST.__const _kSFCompanionAdvertiserDateKey
|| __DATA_CONST.__const _kSFCompanionAdvertiserIdentifierKey
|| __DATA_CONST.__const _kSFCompanionAdvertiserServiceTypeKey
|| __DATA_CONST.__const _kSFCompanionAdvertiserStatusKey
|| __DATA_CONST.__const _kSFCompanionServiceAuthorDataKey
|| __DATA_CONST.__const _kSFCompanionServiceBonjourNameKey
|| __DATA_CONST.__const _kSFCompanionServiceClientIDKey
|| __DATA_CONST.__const _kSFCompanionServiceManagerIDKey
|| __DATA_CONST.__const _kSFCompanionServiceMessageVersionKey
|| __DATA_CONST.__const _kSFCompanionServiceUniqueIDKey
|| __DATA_CONST.__const _kSFNodeKindADisk
|| __DATA_CONST.__const _kSFNodeKindAirDrop
|| __DATA_CONST.__const _kSFNodeKindAll
|| __DATA_CONST.__const _kSFNodeKindAutoFS
|| __DATA_CONST.__const _kSFNodeKindBonjour
|| __DATA_CONST.__const _kSFNodeKindClassroom
|| __DATA_CONST.__const _kSFNodeKindClassroomCourse
|| __DATA_CONST.__const _kSFNodeKindClassroomGroup
|| __DATA_CONST.__const _kSFNodeKindConnected
|| __DATA_CONST.__const _kSFNodeKindDisabled
|| __DATA_CONST.__const _kSFNodeKindDomain
|| __DATA_CONST.__const _kSFNodeKindManaged
|| __DATA_CONST.__const _kSFNodeKindMe
|| __DATA_CONST.__const _kSFNodeKindMonogram
|| __DATA_CONST.__const _kSFNodeKindMyMac
|| __DATA_CONST.__const _kSFNodeKindODisk
|| __DATA_CONST.__const _kSFNodeKindPerson
|| __DATA_CONST.__const _kSFNodeKindPrinter
|| __DATA_CONST.__const _kSFNodeKindRapport
|| __DATA_CONST.__const _kSFNodeKindRecent
|| __DATA_CONST.__const _kSFNodeKindRoot
|| __DATA_CONST.__const _kSFNodeKindSuggestion
|| __DATA_CONST.__const _kSFNodeKindUnknown
|| __DATA_CONST.__const _kSFNodeKindVolume
|| __DATA_CONST.__const _kSFNodeKindWindows
|| __DATA_CONST.__const _kSFNodeKindWorkgroup
|| __DATA_CONST.__const _kSFNodeProtocolADisk
|| __DATA_CONST.__const _kSFNodeProtocolAFP
|| __DATA_CONST.__const _kSFNodeProtocolAirDrop
|| __DATA_CONST.__const _kSFNodeProtocolAutoFS
|| __DATA_CONST.__const _kSFNodeProtocolFTP
|| __DATA_CONST.__const _kSFNodeProtocolFTPS
|| __DATA_CONST.__const _kSFNodeProtocolFile
|| __DATA_CONST.__const _kSFNodeProtocolHTTP
|| __DATA_CONST.__const _kSFNodeProtocolHTTPS
|| __DATA_CONST.__const _kSFNodeProtocolNFS
|| __DATA_CONST.__const _kSFNodeProtocolNWNode
|| __DATA_CONST.__const _kSFNodeProtocolNetBIOS
|| __DATA_CONST.__const _kSFNodeProtocolODisk
|| __DATA_CONST.__const _kSFNodeProtocolSMB
|| __DATA_CONST.__const _kSFNodeProtocolVNC
|| __DATA_CONST.__const _kSFNodeProtocolWebDAV
|| __DATA_CONST.__const _kSFNodeProtocolWebDAVS
|| __DATA_CONST.__const _kSFNodeProtocolWorkgroups
|| __DATA_CONST.__const _kSFOperationAirDropEnabledKey
|| __DATA_CONST.__const _kSFOperationAirplaneModeEnabledKey
|| __DATA_CONST.__const _kSFOperationAutoAcceptKey
|| __DATA_CONST.__const _kSFOperationBlockerCompositeNameKey
|| __DATA_CONST.__const _kSFOperationBlockerComputerNameKey
|| __DATA_CONST.__const _kSFOperationBlockerFirstNameKey
|| __DATA_CONST.__const _kSFOperationBlockerLastNameKey
|| __DATA_CONST.__const _kSFOperationBluetoothEnabledKey
|| __DATA_CONST.__const _kSFOperationBundleIDKey
|| __DATA_CONST.__const _kSFOperationBytesCopiedKey
|| __DATA_CONST.__const _kSFOperationComputerToComputerKey
|| __DATA_CONST.__const _kSFOperationContactsOnlyKey
|| __DATA_CONST.__const _kSFOperationConvertMediaFormatsKey
|| __DATA_CONST.__const _kSFOperationDestinationURLKey
|| __DATA_CONST.__const _kSFOperationDeviceSupportsWAPIKey
|| __DATA_CONST.__const _kSFOperationDiscoverableModeContactsOnly
|| __DATA_CONST.__const _kSFOperationDiscoverableModeDisabled
|| __DATA_CONST.__const _kSFOperationDiscoverableModeEveryone
|| __DATA_CONST.__const _kSFOperationDiscoverableModeKey
|| __DATA_CONST.__const _kSFOperationDiscoverableModeOff
|| __DATA_CONST.__const _kSFOperationErrorKey
|| __DATA_CONST.__const _kSFOperationExtractLivePhotoImagesKey
|| __DATA_CONST.__const _kSFOperationExtractPhotosBundleMediaKey
|| __DATA_CONST.__const _kSFOperationFileBomPathKey
|| __DATA_CONST.__const _kSFOperationFileIconKey
|| __DATA_CONST.__const _kSFOperationFileIsDirectoryKey
|| __DATA_CONST.__const _kSFOperationFileNameKey
|| __DATA_CONST.__const _kSFOperationFileSizeKey
|| __DATA_CONST.__const _kSFOperationFileTypeKey
|| __DATA_CONST.__const _kSFOperationFilesCopiedKey
|| __DATA_CONST.__const _kSFOperationFilesKey
|| __DATA_CONST.__const _kSFOperationFlagsKey
|| __DATA_CONST.__const _kSFOperationHTTPServerConnectionKey
|| __DATA_CONST.__const _kSFOperationHideProgressKey
|| __DATA_CONST.__const _kSFOperationItemsDescriptionKey
|| __DATA_CONST.__const _kSFOperationItemsKey
|| __DATA_CONST.__const _kSFOperationKindController
|| __DATA_CONST.__const _kSFOperationKindEjecter
|| __DATA_CONST.__const _kSFOperationKindInformation
|| __DATA_CONST.__const _kSFOperationKindKey
|| __DATA_CONST.__const _kSFOperationKindListener
|| __DATA_CONST.__const _kSFOperationKindLogger
|| __DATA_CONST.__const _kSFOperationKindReceiver
|| __DATA_CONST.__const _kSFOperationKindResolver
|| __DATA_CONST.__const _kSFOperationKindSender
|| __DATA_CONST.__const _kSFOperationKindStatus
|| __DATA_CONST.__const _kSFOperationLegacyDeviceKey
|| __DATA_CONST.__const _kSFOperationLegacyModeEnabledKey
|| __DATA_CONST.__const _kSFOperationLegacyModeSettableKey
|| __DATA_CONST.__const _kSFOperationNodeKey
|| __DATA_CONST.__const _kSFOperationPercentConvertedKey
|| __DATA_CONST.__const _kSFOperationProtocolKey
|| __DATA_CONST.__const _kSFOperationReceiverCompositeNameKey
|| __DATA_CONST.__const _kSFOperationReceiverComputerNameKey
|| __DATA_CONST.__const _kSFOperationReceiverDeviceIRKDataKey
|| __DATA_CONST.__const _kSFOperationReceiverEdPKDataKey
|| __DATA_CONST.__const _kSFOperationReceiverEmailHashKey
|| __DATA_CONST.__const _kSFOperationReceiverEmailKey
|| __DATA_CONST.__const _kSFOperationReceiverFirstNameKey
|| __DATA_CONST.__const _kSFOperationReceiverIDKey
|| __DATA_CONST.__const _kSFOperationReceiverIDSDeviceIDKey
|| __DATA_CONST.__const _kSFOperationReceiverIconHashKey
|| __DATA_CONST.__const _kSFOperationReceiverIconKey
|| __DATA_CONST.__const _kSFOperationReceiverKey
|| __DATA_CONST.__const _kSFOperationReceiverLastNameKey
|| __DATA_CONST.__const _kSFOperationReceiverMediaCapabilitiesKey
|| __DATA_CONST.__const _kSFOperationReceiverModelNameKey
|| __DATA_CONST.__const _kSFOperationReceiverPhoneHashKey
|| __DATA_CONST.__const _kSFOperationReceiverRecordDataKey
|| __DATA_CONST.__const _kSFOperationRunLoopKey
|| __DATA_CONST.__const _kSFOperationRunLoopModeKey
|| __DATA_CONST.__const _kSFOperationSenderCompositeNameKey
|| __DATA_CONST.__const _kSFOperationSenderComputerNameKey
|| __DATA_CONST.__const _kSFOperationSenderEmailHashKey
|| __DATA_CONST.__const _kSFOperationSenderEmailKey
|| __DATA_CONST.__const _kSFOperationSenderFirstNameKey
|| __DATA_CONST.__const _kSFOperationSenderIDKey
|| __DATA_CONST.__const _kSFOperationSenderIconHashKey
|| __DATA_CONST.__const _kSFOperationSenderIconKey
|| __DATA_CONST.__const _kSFOperationSenderIsMeKey
|| __DATA_CONST.__const _kSFOperationSenderLastNameKey
|| __DATA_CONST.__const _kSFOperationSenderModelNameKey
|| __DATA_CONST.__const _kSFOperationSenderNodeKey
|| __DATA_CONST.__const _kSFOperationSenderPhoneHashKey
|| __DATA_CONST.__const _kSFOperationSenderRecordDataKey
|| __DATA_CONST.__const _kSFOperationSendersKnownAliasKey
|| __DATA_CONST.__const _kSFOperationSessionIDKey
|| __DATA_CONST.__const _kSFOperationSmallFileIconKey
|| __DATA_CONST.__const _kSFOperationTimeRemainingKey
|| __DATA_CONST.__const _kSFOperationTotalBytesKey
|| __DATA_CONST.__const _kSFOperationUltraWideBandEnabledKey
|| __DATA_CONST.__const _kSFOperationUsePKZip
|| __DATA_CONST.__const _kSFOperationVerifiableIdentityKey
|| __DATA_CONST.__const _kSFOperationWirelessAccessPointKey
|| __DATA_CONST.__const _kSFOperationWirelessCarPlayKey
|| __DATA_CONST.__const _kSFOperationWirelessEnabledKey
|| __DATA_CONST.__const _kSFOperationtFileSubTypeKey
|| __DATA_CONST.__const _kSFPowerChargingMonitoringLevelKeys
|| __DATA_CONST.__const _kSFPowerSourceStatusDomain
|| __DATA_CONST.__const _kSFPowerSourceStatusFeatureKey
|| __DATA_CONST.__const _kSFPowerSourceStatusNotificationFromWatch
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFActivityAdvertisement
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFActivityAdvertiser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFActivityScanner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFAutoUnlockDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFBLEDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFBatteryInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFClientGetDeviceAssetsParams
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFClientGetDeviceAssetsResults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFClientSubCredentialParams
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFCompanionAdvertiser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFCompanionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFCompanionService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFCompanionXPCManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFContactInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFCoordinatedAlertRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFDeviceDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFEventMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFPeerDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFPeopleSuggesterParams
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFPeopleSuggesterResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFRemoteHotspotDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFRemoteHotspotInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFRemoteTextSessionInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFRequestMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFResponseMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFUnlockState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFActivityAdvertisement
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFActivityAdvertiser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFActivityScanner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFAutoUnlockDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFBLEDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFBatteryInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFClientGetDeviceAssetsParams
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFClientGetDeviceAssetsResults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFClientSubCredentialParams
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFCompanionAdvertiser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFCompanionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFCompanionService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFCompanionXPCManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFContactInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFCoordinatedAlertRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFDeviceDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFEventMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFPeerDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFPeopleSuggesterParams
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFPeopleSuggesterResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFProximityClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFRemoteHotspotDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFRemoteHotspotInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFRemoteTextSessionInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFRequestMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFResponseMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFUnlockState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFXPCClient
|| __TEXT.__const _SFRemoteHotspotNetworkTypeHSDPA
|| __TEXT.__text _NSDataFromHexString
|| __TEXT.__text _NSStringLooksLikeBTAddress
|| __TEXT.__text _RPCompanionLinkDeviceIsEqualToSFDevice
|| __TEXT.__text _SFAWDEnsureInitialized
|| __TEXT.__text _SFAWDSubmit
|| __TEXT.__text _SFActivityScanTypesToString
|| __TEXT.__text _SFAddSuffixForCurrentDeviceClass
|| __TEXT.__text _SFAddSuffixForDeviceClass
|| __TEXT.__text _SFAdvertismentDescriptionFromPayloadData
|| __TEXT.__text _SFAirDropTransferFailureReasonToString
|| __TEXT.__text _SFAirDropTransferStateToString
|| __TEXT.__text _SFAirDropTransferTypesToString
|| __TEXT.__text _SFAirDropTransferUserResponseToString
|| __TEXT.__text _SFAirDropUrlSchemeIsSupported
|| __TEXT.__text _SFAppleIDAddCertificateToKeychain
|| __TEXT.__text _SFAppleIDAddKeyToKeychain
|| __TEXT.__text _SFAppleIDCertificateAndKeyCounts
|| __TEXT.__text _SFAppleIDClientCopyCertificate
|| __TEXT.__text _SFAppleIDClientCopyCertificateInfo
|| __TEXT.__text _SFAppleIDClientCopyIdentity
|| __TEXT.__text _SFAppleIDClientCopyMyAccountInfo
|| __TEXT.__text _SFAppleIDClientCopyMyAppleID
|| __TEXT.__text _SFAppleIDClientCopyPersonInfo
|| __TEXT.__text _SFAppleIDCommonNameForCertificate
|| __TEXT.__text _SFAppleIDCopyCertificateFromKeychainForReference
|| __TEXT.__text _SFAppleIDCopyKeyFromKeychainForReference
|| __TEXT.__text _SFAppleIDCopyKeychainReferenceForCertificate
|| __TEXT.__text _SFAppleIDCopyKeychainReferenceForKey
|| __TEXT.__text _SFAppleIDCreateCertificateRequestPEMStringForKeyPair
|| __TEXT.__text _SFAppleIDCreateCertificateWithPEMString
|| __TEXT.__text _SFAppleIDCreateKeyPair
|| __TEXT.__text _SFAppleIDCreationDateForKey
|| __TEXT.__text _SFAppleIDExpirationDateForCertificate
|| __TEXT.__text _SFAppleIDParseValidationRecordData
|| __TEXT.__text _SFAppleIDRemoveAllCertificatesFromKeychain
|| __TEXT.__text _SFAppleIDRemoveAllKeysFromKeychain
|| __TEXT.__text _SFAppleIDRemoveCertificateFromKeychain
|| __TEXT.__text _SFAppleIDRemoveKeyFromKeychain
|| __TEXT.__text _SFAppleIDSerialNumberForCertificate
|| __TEXT.__text _SFAppleIDSignedHashForData
|| __TEXT.__text _SFAppleIDVerifyCertificateChain
|| __TEXT.__text _SFAppleIDVerifyCertificateChainSync
|| __TEXT.__text _SFAppleIDVerifySignedHashForData
|| __TEXT.__text _SFBase64StringFromHexString
|| __TEXT.__text _SFBrowserAddNode
|| __TEXT.__text _SFBrowserCloseNode
|| __TEXT.__text _SFBrowserCopyChildren
|| __TEXT.__text _SFBrowserCopyNodeForURL
|| __TEXT.__text _SFBrowserCopySidebarChildren
|| __TEXT.__text _SFBrowserCreate
|| __TEXT.__text _SFBrowserGetRootNode
|| __TEXT.__text _SFBrowserGetTypeID
|| __TEXT.__text _SFBrowserInvalidate
|| __TEXT.__text _SFBrowserOpenNode
|| __TEXT.__text _SFBrowserRemoveNode
|| __TEXT.__text _SFBrowserScheduleWithRunLoop
|| __TEXT.__text _SFBrowserSetClient
|| __TEXT.__text _SFBrowserSetDispatchQueue
|| __TEXT.__text _SFBrowserSetMode
|| __TEXT.__text _SFBrowserSetOptions
|| __TEXT.__text _SFCombinedHashFromArray
|| __TEXT.__text _SFCompactStringFromCollection
|| __TEXT.__text _SFContentTypes
|| __TEXT.__text _SFCreateCGImageFromData
|| __TEXT.__text _SFCreateLivePhotoBundle
|| __TEXT.__text _SFDashboardLog
|| __TEXT.__text _SFDashboardLogJSON
|| __TEXT.__text _SFDataFromCGImage
|| __TEXT.__text _SFDataFromHexString
|| __TEXT.__text _SFDateToStringRFC3339
|| __TEXT.__text _SFDecryptData
|| __TEXT.__text _SFDeviceClassCodeGet
|| __TEXT.__text _SFDeviceColorCodeGet
|| __TEXT.__text _SFDeviceHomeButtonType
|| __TEXT.__text _SFDeviceModel
|| __TEXT.__text _SFDeviceModelCodeGet
|| __TEXT.__text _SFDeviceSetupAppleTVLocationAuthorizationInfo
|| __TEXT.__text _SFDeviceSetupDeviceInfo
|| __TEXT.__text _SFDeviceSetupHomeKitInfo
|| __TEXT.__text _SFDeviceSetupSiriInfo
|| __TEXT.__text _SFDeviceSupportsAWDL
|| __TEXT.__text _SFDeviceSupportsAirDrop
|| __TEXT.__text _SFDeviceSupportsAutoUnlock
|| __TEXT.__text _SFDeviceSupportsContinuity
|| __TEXT.__text _SFDeviceSupportsForceTouch
|| __TEXT.__text _SFDeviceSupportsLegacyAirDrop
|| __TEXT.__text _SFDeviceSupportsRanging
|| __TEXT.__text _SFDeviceSupportsRemoteDisc
|| __TEXT.__text _SFDeviceSupportsTVAudio
|| __TEXT.__text _SFDeviceToRPCompanionLinkDevice
|| __TEXT.__text _SFDispatchTimerSet
|| __TEXT.__text _SFDownloadsURL
|| __TEXT.__text _SFEncryptData
|| __TEXT.__text _SFErrorF
|| __TEXT.__text _SFFakeFilesAndItemsArrayForURLs
|| __TEXT.__text _SFFilesAppAvailable
|| __TEXT.__text _SFFullTextFromRTIDataPayload
|| __TEXT.__text _SFGenerateFileInfoForURL
|| __TEXT.__text _SFHexStringForBase64EncodedString
|| __TEXT.__text _SFHexStringForData
|| __TEXT.__text _SFHexStringForDataEx
|| __TEXT.__text _SFHighPriorityQueue
|| __TEXT.__text _SFHomePodDisplayNameForDeviceName
|| __TEXT.__text _SFHotspotNetworkTypeString
|| __TEXT.__text _SFHotspotResponseAdvertisementString
|| __TEXT.__text _SFHotspotTypeStringToType
|| __TEXT.__text _SFIsAppStoreLink
|| __TEXT.__text _SFIsAppleApp
|| __TEXT.__text _SFIsBluetoothEnabled
|| __TEXT.__text _SFIsCalendarEvent
|| __TEXT.__text _SFIsContact
|| __TEXT.__text _SFIsCoreType
|| __TEXT.__text _SFIsCredential
|| __TEXT.__text _SFIsDeviceAppleTV
|| __TEXT.__text _SFIsDeviceAudioAccessory
|| __TEXT.__text _SFIsDevicePhone
|| __TEXT.__text _SFIsFMFAllowed
|| __TEXT.__text _SFIsFindMyFriendsLink
|| __TEXT.__text _SFIsGreenTeaDevice
|| __TEXT.__text _SFIsHEIF
|| __TEXT.__text _SFIsIPA
|| __TEXT.__text _SFIsImage
|| __TEXT.__text _SFIsKeynoteLive
|| __TEXT.__text _SFIsKeynoteLiveLink
|| __TEXT.__text _SFIsLivePhotos
|| __TEXT.__text _SFIsManagedConfigurationType
|| __TEXT.__text _SFIsMapLink
|| __TEXT.__text _SFIsMusicLink
|| __TEXT.__text _SFIsMusicStoreLink
|| __TEXT.__text _SFIsNote
|| __TEXT.__text _SFIsPDF
|| __TEXT.__text _SFIsPass
|| __TEXT.__text _SFIsPhoneLink
|| __TEXT.__text _SFIsPhotosApp
|| __TEXT.__text _SFIsPhotosAssetBundle
|| __TEXT.__text _SFIsPlainText
|| __TEXT.__text _SFIsPlaygroundItem
|| __TEXT.__text _SFIsPodcastsLink
|| __TEXT.__text _SFIsRangingSupported
|| __TEXT.__text _SFIsSharediCloudDocumentsLink
|| __TEXT.__text _SFIsVideo
|| __TEXT.__text _SFIsVoiceMemo
|| __TEXT.__text _SFIsWebLink
|| __TEXT.__text _SFIsWiFiEnabled
|| __TEXT.__text _SFIsePub
|| __TEXT.__text _SFIsiBooksLink
|| __TEXT.__text _SFIsiCloudDriveEnabled
|| __TEXT.__text _SFIsiCloudFamilyLink
|| __TEXT.__text _SFIsiTunesULink
|| __TEXT.__text _SFIsiWorkLink
|| __TEXT.__text _SFJoinDataChunks
|| __TEXT.__text _SFLocalizePhoneNumber
|| __TEXT.__text _SFLocalizedNameForBluetoothProductID
|| __TEXT.__text _SFLocalizedStringEx
|| __TEXT.__text _SFLocalizedStringForKey
|| __TEXT.__text _SFLocalizedStringForKeyInStringsFileNamed
|| __TEXT.__text _SFLostMode
|| __TEXT.__text _SFMainQueue
|| __TEXT.__text _SFMeasureCPUDuration
|| __TEXT.__text _SFMetricsLog
|| __TEXT.__text _SFMetricsLogUnexpectedEvent
|| __TEXT.__text _SFMyAltDSID
|| __TEXT.__text _SFNestedErrorF
|| __TEXT.__text _SFNilEqual
|| __TEXT.__text _SFNodeAddBonjourProtocol
|| __TEXT.__text _SFNodeAddDomain
|| __TEXT.__text _SFNodeAddKind
|| __TEXT.__text _SFNodeAddWorkgroup
|| __TEXT.__text _SFNodeCanAcceptDrop
|| __TEXT.__text _SFNodeCancel
|| __TEXT.__text _SFNodeCopyAccessRights
|| __TEXT.__text _SFNodeCopyAppleID
|| __TEXT.__text _SFNodeCopyBonjourProtocols
|| __TEXT.__text _SFNodeCopyColor
|| __TEXT.__text _SFNodeCopyComputerName
|| __TEXT.__text _SFNodeCopyContactIdentifier
|| __TEXT.__text _SFNodeCopyDiskType
|| __TEXT.__text _SFNodeCopyDisplayName
|| __TEXT.__text _SFNodeCopyDomain
|| __TEXT.__text _SFNodeCopyDomains
|| __TEXT.__text _SFNodeCopyEmailHash
|| __TEXT.__text _SFNodeCopyFirstName
|| __TEXT.__text _SFNodeCopyFlags
|| __TEXT.__text _SFNodeCopyHandles
|| __TEXT.__text _SFNodeCopyHostName
|| __TEXT.__text _SFNodeCopyIDSDeviceIdentifier
|| __TEXT.__text _SFNodeCopyIconData
|| __TEXT.__text _SFNodeCopyIconHash
|| __TEXT.__text _SFNodeCopyKindString
|| __TEXT.__text _SFNodeCopyKinds
|| __TEXT.__text _SFNodeCopyLastName
|| __TEXT.__text _SFNodeCopyMediaCapabilities
|| __TEXT.__text _SFNodeCopyModel
|| __TEXT.__text _SFNodeCopyModelIdentifier
|| __TEXT.__text _SFNodeCopyMountPoint
|| __TEXT.__text _SFNodeCopyNetbiosName
|| __TEXT.__text _SFNodeCopyNickName
|| __TEXT.__text _SFNodeCopyParentIdentifier
|| __TEXT.__text _SFNodeCopyPassword
|| __TEXT.__text _SFNodeCopyPath
|| __TEXT.__text _SFNodeCopyPhoneHash
|| __TEXT.__text _SFNodeCopyProtocols
|| __TEXT.__text _SFNodeCopyRangingData
|| __TEXT.__text _SFNodeCopyRealName
|| __TEXT.__text _SFNodeCopySecondaryName
|| __TEXT.__text _SFNodeCopyServiceName
|| __TEXT.__text _SFNodeCopySharePointBrowserID
|| __TEXT.__text _SFNodeCopySiblingNodes
|| __TEXT.__text _SFNodeCopyTransportBundleID
|| __TEXT.__text _SFNodeCopyTypeIdentifier
|| __TEXT.__text _SFNodeCopyURL
|| __TEXT.__text _SFNodeCopyURLForProtocol
|| __TEXT.__text _SFNodeCopyURLs
|| __TEXT.__text _SFNodeCopyUserName
|| __TEXT.__text _SFNodeCopyWorkgroup
|| __TEXT.__text _SFNodeCopyWorkgroups
|| __TEXT.__text _SFNodeCreate
|| __TEXT.__text _SFNodeCreateCopy
|| __TEXT.__text _SFNodeEject
|| __TEXT.__text _SFNodeGetConnectionState
|| __TEXT.__text _SFNodeGetDisplayName
|| __TEXT.__text _SFNodeGetPortNumber
|| __TEXT.__text _SFNodeGetPriority
|| __TEXT.__text _SFNodeGetSelectionReason
|| __TEXT.__text _SFNodeGetSupportedMedia
|| __TEXT.__text _SFNodeGetTypeID
|| __TEXT.__text _SFNodeIsAutoFS
|| __TEXT.__text _SFNodeIsContainer
|| __TEXT.__text _SFNodeIsDropBox
|| __TEXT.__text _SFNodeIsMounted
|| __TEXT.__text _SFNodeIsNeighborhood
|| __TEXT.__text _SFNodeIsRemovable
|| __TEXT.__text _SFNodeIsRoot
|| __TEXT.__text _SFNodeIsServer
|| __TEXT.__text _SFNodeIsSharePoint
|| __TEXT.__text _SFNodeRemoveBonjourProtocol
|| __TEXT.__text _SFNodeRemoveDomain
|| __TEXT.__text _SFNodeRemoveKind
|| __TEXT.__text _SFNodeRemoveWorkgroup
|| __TEXT.__text _SFNodeResolve
|| __TEXT.__text _SFNodeSetAccessRights
|| __TEXT.__text _SFNodeSetAppleID
|| __TEXT.__text _SFNodeSetBonjourProtocols
|| __TEXT.__text _SFNodeSetColor
|| __TEXT.__text _SFNodeSetComputerName
|| __TEXT.__text _SFNodeSetConnectionState
|| __TEXT.__text _SFNodeSetContactIdentifier
|| __TEXT.__text _SFNodeSetDiskType
|| __TEXT.__text _SFNodeSetDisplayName
|| __TEXT.__text _SFNodeSetDomain
|| __TEXT.__text _SFNodeSetEmailHash
|| __TEXT.__text _SFNodeSetFirstName
|| __TEXT.__text _SFNodeSetFlags
|| __TEXT.__text _SFNodeSetHandles
|| __TEXT.__text _SFNodeSetHostName
|| __TEXT.__text _SFNodeSetIDSDeviceIdentifier
|| __TEXT.__text _SFNodeSetIconData
|| __TEXT.__text _SFNodeSetIconHash
|| __TEXT.__text _SFNodeSetKinds
|| __TEXT.__text _SFNodeSetLastName
|| __TEXT.__text _SFNodeSetMediaCapabilities
|| __TEXT.__text _SFNodeSetModel
|| __TEXT.__text _SFNodeSetModelIdentifier
|| __TEXT.__text _SFNodeSetMountPoint
|| __TEXT.__text _SFNodeSetNetbiosName
|| __TEXT.__text _SFNodeSetNickName
|| __TEXT.__text _SFNodeSetParentIdentifier
|| __TEXT.__text _SFNodeSetPassword
|| __TEXT.__text _SFNodeSetPath
|| __TEXT.__text _SFNodeSetPhoneHash
|| __TEXT.__text _SFNodeSetPortNumber
|| __TEXT.__text _SFNodeSetRangingData
|| __TEXT.__text _SFNodeSetRealName
|| __TEXT.__text _SFNodeSetSecondaryName
|| __TEXT.__text _SFNodeSetSelectionReason
|| __TEXT.__text _SFNodeSetServiceName
|| __TEXT.__text _SFNodeSetSharePointBrowserID
|| __TEXT.__text _SFNodeSetSiblingNodes
|| __TEXT.__text _SFNodeSetSupportedMedia
|| __TEXT.__text _SFNodeSetTransportBundleID
|| __TEXT.__text _SFNodeSetURL
|| __TEXT.__text _SFNodeSetUserName
|| __TEXT.__text _SFNodeSetWorkgroup
|| __TEXT.__text _SFNodeSetWorkgroups
|| __TEXT.__text _SFNodeSupportsAskToUse
|| __TEXT.__text _SFNodeSupportsCredentials
|| __TEXT.__text _SFNodeSupportsFMF
|| __TEXT.__text _SFNodeSupportsFileSharing
|| __TEXT.__text _SFNodeSupportsIris
|| __TEXT.__text _SFNodeSupportsMixedTypes
|| __TEXT.__text _SFNodeSupportsPasses
|| __TEXT.__text _SFNodeSupportsScreenSharing
|| __TEXT.__text _SFNodeSupportsUWB
|| __TEXT.__text _SFNonBreakingStringFromDeviceName
|| __TEXT.__text _SFNonLocalizedString
|| __TEXT.__text _SFNormalizeEmailAddress
|| __TEXT.__text _SFNormalizePhoneNumber
|| __TEXT.__text _SFNormalizedUserIdentifiersForContactIdentifier
|| __TEXT.__text _SFNormalizedUserIdentifiersForContactIdentifierEx
|| __TEXT.__text _SFOperationCancel
|| __TEXT.__text _SFOperationCopyProperty
|| __TEXT.__text _SFOperationCreate
|| __TEXT.__text _SFOperationGetTypeID
|| __TEXT.__text _SFOperationResume
|| __TEXT.__text _SFOperationSetClient
|| __TEXT.__text _SFOperationSetDispatchQueue
|| __TEXT.__text _SFOperationSetProperty
|| __TEXT.__text _SFPlaygroundsAppAvailable
|| __TEXT.__text _SFPowerLogEvent
|| __TEXT.__text _SFRTIDataPayloadForData
|| __TEXT.__text _SFRealpathForFileURL
|| __TEXT.__text _SFRemoteTextInputPayloadFromLegacyAPI
|| __TEXT.__text _SFRemoteTextInputPayloadToLegacyAPI
|| __TEXT.__text _SFRemovableSystemAppAvailable
|| __TEXT.__text _SFServiceIdentifierToType
|| __TEXT.__text _SFServiceIdentifierToUUID
|| __TEXT.__text _SFServiceTypeToUUID
|| __TEXT.__text _SFSharablePasswordAirDropURLEncryptedString
|| __TEXT.__text _SFSharablePasswordForEncryptedAirDropURL
|| __TEXT.__text _SFSharablePasswordForURL
|| __TEXT.__text _SFShareablePasswordForSSID
|| __TEXT.__text _SFSharediCloudDocumentsLinkToAppName
|| __TEXT.__text _SFSharediCloudDocumentsLinkToFileName
|| __TEXT.__text _SFShouldShowRepairProxCard
|| __TEXT.__text _SFShouldShowWirelessSplitterProxCard
|| __TEXT.__text _SFSplitDataChunks
|| __TEXT.__text _SFStoreDemoMode
|| __TEXT.__text _SFStringComponentsFromTimeInterval
|| __TEXT.__text _SFStringContainsOnlyPhoneNumberCharacters
|| __TEXT.__text _SFStringFromTimeInterval
|| __TEXT.__text _SFStringIsJSON
|| __TEXT.__text _SFStringToDateRFC3339
|| __TEXT.__text _SFTestFlagsFromString
|| __TEXT.__text _SFTextInputDataForRTIDataPayload
|| __TEXT.__text _SFTextInputDataLogString
|| __TEXT.__text _SFUpTicksDiffFromNowToString
|| __TEXT.__text _SFVoiceMemosAppAvailable
|| __TEXT.__text _SFWalletAppAvailable
|| __TEXT.__text _SFWiFiChannelToIndex
|| __TEXT.__text _SFWiFiIndexToChannel
|| __TEXT.__text _SFiTunesStoreLinkType
|| __TEXT.__text __SFIsWiFiEnabled
|| __TEXT.__text __SFNodeCreateWithXPCObject
|| __TEXT.__text __SFNodeUpdateCachedChildNode
|| __TEXT.__text __SFNodeUpdateCachedParentNode
|| __TEXT.__text __SFNodeXPCObjectCreate
|| __TEXT.__text _airdrop_log
|| __TEXT.__text _airdrop_ui_log
|| __TEXT.__text _asset_log
|| __TEXT.__text _asset_metadata_log
|| __TEXT.__text _auto_unlock_log
|| __TEXT.__text _b332_log
|| __TEXT.__text _browser_log
|| __TEXT.__text _charging_events_log
|| __TEXT.__text _charging_log
|| __TEXT.__text _createSFNodeArrayForXPCArray
|| __TEXT.__text _createXPCArrayForSFNodeArray
|| __TEXT.__text _daemon_log
|| __TEXT.__text _framework_log
|| __TEXT.__text _handoff_log
|| __TEXT.__text _log_submit_log
|| __TEXT.__text _magic_head_log
|| __TEXT.__text _paired_unlock_log
|| __TEXT.__text _remote_log
|| __TEXT.__text _share_sheet_log
|| __TEXT.__text _sharingXPCHelperLog
|| __TEXT.__text _streams_log
|| __TEXT.__text _tethering_log
|| __TEXT.__text _utilities_log
__ Accounts: _ACAccountTypeIdentifierGameCenter
__ Accounts: _OBJC_CLASS_$_ACAccount
__ Accounts: _OBJC_CLASS_$_ACAccountCredential
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ Accounts: _kACRenewCredentialsShouldAvoidUIKey
__ Accounts: _kAccountDataclassHome
__ AppSupport: _CFPhoneNumberCreate
__ AppSupport: _CFPhoneNumberCreateString
__ AppSupport: _CPPhoneNumberCopyActiveCountryCode
__ AppSupport: _PNCopyBestGuessNormalizedNumberForCountry
__ AppleIDSSOAuthentication: _AIDAServiceTypeCloud
__ AppleIDSSOAuthentication: _OBJC_CLASS_$_AIDAMutableServiceContext
__ AppleIDSSOAuthentication: _OBJC_CLASS_$_AIDAServiceOwnersManager
__ AuthKit: _OBJC_CLASS_$_AKAppleIDAuthenticationController
__ BluetoothManager: _OBJC_CLASS_$_BluetoothManager
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendArray
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayContainsValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateCopy
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetFirstIndexOfValue
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayGetValues
__ CoreFoundation: _CFArrayRemoveAllValues
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFArraySetValueAtIndex
__ CoreFoundation: _CFArraySortValues
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFBagAddValue
__ CoreFoundation: _CFBagCreateCopy
__ CoreFoundation: _CFBagCreateMutable
__ CoreFoundation: _CFBagCreateMutableCopy
__ CoreFoundation: _CFBagGetCount
__ CoreFoundation: _CFBagGetTypeID
__ CoreFoundation: _CFBagGetValues
__ CoreFoundation: _CFBagRemoveValue
__ CoreFoundation: _CFBagSetValue
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyLocalizedString
__ CoreFoundation: _CFBundleCreate
__ CoreFoundation: _CFBundleGetBundleWithIdentifier
__ CoreFoundation: _CFCopyDescription
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateCopy
__ CoreFoundation: _CFDataCreateMutable
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDateGetTypeID
__ CoreFoundation: _CFDictionaryAddValue
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryRemoveAllValues
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFErrorCreate
__ CoreFoundation: _CFErrorGetCode
__ CoreFoundation: _CFErrorGetTypeID
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFHash
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFReadStreamSetProperty
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopAddTimer
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopRemoveSource
__ CoreFoundation: _CFRunLoopTimerCreate
__ CoreFoundation: _CFRunLoopTimerInvalidate
__ CoreFoundation: _CFSetContainsValue
__ CoreFoundation: _CFSetCreateCopy
__ CoreFoundation: _CFSetCreateMutable
__ CoreFoundation: _CFSetCreateMutableCopy
__ CoreFoundation: _CFSetGetCount
__ CoreFoundation: _CFSetGetTypeID
__ CoreFoundation: _CFSetGetValues
__ CoreFoundation: _CFSetRemoveValue
__ CoreFoundation: _CFSetSetValue
__ CoreFoundation: _CFStreamCreatePairWithSocket
__ CoreFoundation: _CFStringAppend
__ CoreFoundation: _CFStringAppendFormat
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateMutable
__ CoreFoundation: _CFStringCreateMutableCopy
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringCreateWithSubstring
__ CoreFoundation: _CFStringFindAndReplace
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetIntValue
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFStringHasPrefix
__ CoreFoundation: _CFStringHasSuffix
__ CoreFoundation: _CFURLCopyAbsoluteURL
__ CoreFoundation: _CFURLCopyFileSystemPath
__ CoreFoundation: _CFURLCopyHostName
__ CoreFoundation: _CFURLCopyScheme
__ CoreFoundation: _CFURLCreateStringByAddingPercentEscapes
__ CoreFoundation: _CFURLCreateWithFileSystemPath
__ CoreFoundation: _CFURLCreateWithString
__ CoreFoundation: _CFURLGetString
__ CoreFoundation: _CFURLGetTypeID
__ CoreFoundation: _CFURLSetResourcePropertyForKey
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _CFUserNotificationGetResponseDictionary
__ CoreFoundation: _CFUserNotificationGetResponseValue
__ CoreFoundation: _CFUserNotificationUpdate
__ CoreFoundation: _CFWriteStreamSetProperty
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleTemperatureUnit
__ CoreFoundation: _NSURLIsDirectoryKey
__ CoreFoundation: _NSURLIsPackageKey
__ CoreFoundation: _NSURLIsReadableKey
__ CoreFoundation: _NSURLNameKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: __CFURLIsFileURL
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFCopyStringDictionaryKeyCallBacks
__ CoreFoundation: _kCFCopyStringSetCallBacks
__ CoreFoundation: _kCFErrorLocalizedDescriptionKey
__ CoreFoundation: _kCFPreferencesAnyApplication
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFStreamPropertyShouldCloseNativeSocket
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeBagCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFTypeSetCallBacks
__ CoreFoundation: _kCFURLIsDirectoryKey
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreFoundation: _kCFUserNotificationOtherButtonTitleKey
__ CoreFoundation: _kCFUserNotificationTextFieldTitlesKey
__ CoreFoundation: _kCFUserNotificationTextFieldValuesKey
__ CoreGraphics: _CGColorSpaceCopyName
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceCreateWithName
__ CoreGraphics: _CGDataProviderCopyData
__ CoreGraphics: _CGDataProviderCreateWithCFData
__ CoreGraphics: _CGImageCreate
__ CoreGraphics: _CGImageGetBitmapInfo
__ CoreGraphics: _CGImageGetBitsPerComponent
__ CoreGraphics: _CGImageGetBitsPerPixel
__ CoreGraphics: _CGImageGetBytesPerRow
__ CoreGraphics: _CGImageGetColorSpace
__ CoreGraphics: _CGImageGetDataProvider
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetRenderingIntent
__ CoreGraphics: _CGImageGetShouldInterpolate
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _kCGColorSpaceSRGB
__ CoreServices: _OBJC_CLASS_$_LSAppLink
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _UTTypeConformsTo
__ CoreServices: _UTTypeCopyDeclaringBundleURL
__ CoreServices: _UTTypeCreatePreferredIdentifierForTag
__ CoreServices: _UTTypeIsDynamic
__ CoreServices: __CSCopyLocalHostnameForComputerName
__ CoreServices: _kUTTagClassFilenameExtension
__ CoreServices: _kUTTypeData
__ CoreServices: _kUTTypeElectronicPublication
__ CoreServices: _kUTTypeImage
__ CoreServices: _kUTTypeJPEG2000
__ CoreServices: _kUTTypeLivePhoto
__ CoreServices: _kUTTypeMovie
__ CoreServices: _kUTTypePDF
__ CoreServices: _kUTTypePlainText
__ CoreServices: _kUTTypeVCard
__ CoreUtils: _ASPrintF
__ CoreUtils: _CFAppendPrintF
__ CoreUtils: _CFDictionaryGetCFDataOfLength
__ CoreUtils: _CFDictionaryGetDouble
__ CoreUtils: _CFDictionaryGetHardwareAddress
__ CoreUtils: _CFDictionaryGetInt64
__ CoreUtils: _CFDictionaryGetInt64Ranged
__ CoreUtils: _CFDictionaryGetTypedValue
__ CoreUtils: _CFDictionarySetInt64
__ CoreUtils: _CFGetInt64
__ CoreUtils: _CFPrefs_CopyTypedValue
__ CoreUtils: _CFPrefs_GetDouble
__ CoreUtils: _CFPrefs_GetInt64
__ CoreUtils: _CFPrefs_SetDouble
__ CoreUtils: _CFPrefs_SetInt64
__ CoreUtils: _CFPrefs_SetValue
__ CoreUtils: _CUDispatchTimerSet
__ CoreUtils: _CUMainQueue
__ CoreUtils: _CryptoAEADCreate
__ CoreUtils: _CryptoAEADDecryptMessage
__ CoreUtils: _CryptoAEADEncryptMessage
__ CoreUtils: _DataToHexCStringEx
__ CoreUtils: _DebugGetErrorString
__ CoreUtils: _FPrintF
__ CoreUtils: _FatalErrorF
__ CoreUtils: _GestaltCopyAnswer
__ CoreUtils: _GestaltGetDeviceClass
__ CoreUtils: _IsAppleInternalBuild
__ CoreUtils: _LogCategoryCreateEx
__ CoreUtils: _LogCategoryReplaceF
__ CoreUtils: _LogCategory_Remove
__ CoreUtils: _LogPrintF
__ CoreUtils: _NSAppendPrintF
__ CoreUtils: _NSDataCompress
__ CoreUtils: _NSDataDecompress
__ CoreUtils: _NSDecodeNSArrayOfClassIfPresent
__ CoreUtils: _NSDecodeNSDictionaryOfClassesIfPresent
__ CoreUtils: _NSDecodeObjectIfPresent
__ CoreUtils: _NSDecodeSInt64RangedIfPresent
__ CoreUtils: _NSDecodeStandardContainerIfPresent
__ CoreUtils: _NSDictionaryGetNSNumber
__ CoreUtils: _NSErrorF
__ CoreUtils: _NSErrorNestedF
__ CoreUtils: _NSErrorNestedV
__ CoreUtils: _NSErrorToOSStatus
__ CoreUtils: _NSErrorV
__ CoreUtils: _NSErrorWithOSStatusF
__ CoreUtils: _NSPrintF
__ CoreUtils: _NSRandomData
__ CoreUtils: _NSStringWithMACAddress
__ CoreUtils: _NormalizePath
__ CoreUtils: _OBJC_CLASS_$_CUAppleIDClient
__ CoreUtils: _OBJC_CLASS_$_CUAudioPlayer
__ CoreUtils: _OBJC_CLASS_$_CUBluetoothClient
__ CoreUtils: _OBJC_CLASS_$_CUBonjourAdvertiser
__ CoreUtils: _OBJC_CLASS_$_CUBonjourBrowser
__ CoreUtils: _OBJC_CLASS_$_CUCoalescer
__ CoreUtils: _OBJC_CLASS_$_CUDashboardClient
__ CoreUtils: _OBJC_CLASS_$_CUKeychainItem
__ CoreUtils: _OBJC_CLASS_$_CUKeychainManager
__ CoreUtils: _OBJC_CLASS_$_CUMessageSessionServer
__ CoreUtils: _OBJC_CLASS_$_CUPairingSession
__ CoreUtils: _OBJC_CLASS_$_CURangingMeasurement
__ CoreUtils: _OBJC_CLASS_$_CUReachabilityMonitor
__ CoreUtils: _OBJC_CLASS_$_CURetrier
__ CoreUtils: _OBJC_CLASS_$_CUSystemMonitor
__ CoreUtils: _OBJC_CLASS_$_CUXPCAgent
__ CoreUtils: _OPACKDecodeData
__ CoreUtils: _OPACKEncoderCreateData
__ CoreUtils: _OPACKEncoderCreateDataMutable
__ CoreUtils: _PairingSessionCopyPairedPeer
__ CoreUtils: _PairingSessionCreate
__ CoreUtils: _PairingSessionDeriveKey
__ CoreUtils: _PairingSessionExchange
__ CoreUtils: _PairingSessionSetACL
__ CoreUtils: _PairingSessionSetFlags
__ CoreUtils: _PairingSessionSetLogging
__ CoreUtils: _PairingSessionSetMyAppleID
__ CoreUtils: _PairingSessionSetMyAppleIDInfoClient
__ CoreUtils: _PairingSessionSetPeerAppleID
__ CoreUtils: _PairingSessionSetPeerAppleIDs
__ CoreUtils: _PairingSessionSetSetupCode
__ CoreUtils: _RandomBytes
__ CoreUtils: _RandomString
__ CoreUtils: _SNPrintF
__ CoreUtils: _SNPrintF_Add
__ CoreUtils: _SecondsToUpTicksF
__ CoreUtils: _SipHash
__ CoreUtils: _StringToUUIDEx
__ CoreUtils: _TextSep
__ CoreUtils: _TextToSourceVersion
__ CoreUtils: _UUIDGet
__ CoreUtils: _UpTicksToMilliseconds
__ CoreUtils: _UpTicksToSeconds
__ CoreUtils: _UpTicksToSecondsF
__ CoreUtils: _WiFiCopyCurrentNetworkInfo
__ CoreUtils: _WiFiCopyCurrentNetworkInfoEx
__ CoreUtils: _WiFiJoinNetwork_b
__ CoreUtils: _WiFiScan_b
__ CoreUtils: __LogCategory_Initialize
__ CoreUtils: _kCryptoAEADDescriptorChaCha20Poly1305
__ CoreUtils: _mkpath
__ CoreUtils: _strnicmp_prefix
__ CoreUtils: _strnicmpx
__ Foundation: _NSFileProtectionNone
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSProgressEstimatedTimeRemainingKey
__ Foundation: _NSProgressFileCompletedCountKey
__ Foundation: _NSProgressFileOperationKindKey
__ Foundation: _NSProgressFileOperationKindReceiving
__ Foundation: _NSProgressFileTotalCountKey
__ Foundation: _NSProgressFileURLKey
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnimplemented_
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponents
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: __NSMethodExceptionProem
__ IOKit: _IOPMConnectionGetSystemCapabilities
__ IOKit: _IOPMIsASleep
__ IOKit: _IOPSCopyExternalPowerAdapterDetails
__ IOKit: _IOPSCopyPowerSourcesByType
__ IOKit: _IOPSCopyPowerSourcesList
__ IOKit: _IOPSCreatePowerSource
__ IOKit: _IOPSGetPowerSourceDescription
__ IOKit: _IOPSReleasePowerSource
__ IOKit: _IOPSSetPowerSourceDetails
__ ImageIO: _CGImageCreateByMatchingToColorSpace
__ ImageIO: _CGImageCreateThumb
__ ImageIO: _CGImageDestinationAddImage
__ ImageIO: _CGImageDestinationCreateWithData
__ ImageIO: _CGImageDestinationFinalize
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateWithData
__ ImageIO: _CGImageSourceCreateWithURL
__ ImageIO: _CGImageSourceGetCount
__ ImageIO: _CGImageSourceGetType
__ ImageIO: _kCGImageDestinationLossyCompressionQuality
__ ImageIO: _kCGImageDestinationRequestedFileSize
__ ImageIO: _kCGImageSourceTypeIdentifierHint
__ ManagedConfiguration: _MCFeatureAppAnalyticsAllowed
__ ManagedConfiguration: _MCFeatureDiagnosticsSubmissionAllowed
__ ManagedConfiguration: _MCFeatureExplicitContentAllowed
__ ManagedConfiguration: _MCFeatureNewsAllowed
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MobileActivation: _MAGetActivationState
__ MobileWiFi: _WiFiDeviceClientRegisterAutoJoinNotificationCallback
__ MobileWiFi: _WiFiDeviceClientRegisterRemovalCallback
__ MobileWiFi: _WiFiManagerClientCopyDevices
__ MobileWiFi: _WiFiManagerClientCopyNetworks
__ MobileWiFi: _WiFiManagerClientCreate
__ MobileWiFi: _WiFiManagerClientDisable
__ MobileWiFi: _WiFiManagerClientEnable
__ MobileWiFi: _WiFiManagerClientGetPowerExt
__ MobileWiFi: _WiFiManagerClientRegisterDeviceAttachmentCallback
__ MobileWiFi: _WiFiManagerClientRegisterServerRestartCallback
__ MobileWiFi: _WiFiManagerClientScheduleWithRunLoop
__ MobileWiFi: _WiFiManagerClientUnscheduleFromRunLoop
__ MobileWiFi: _WiFiNetworkCopyShareablePassword
__ MobileWiFi: _WiFiNetworkGetSSID
__ MobileWiFi: _WiFiNetworkGetShareMode
__ MobileWiFi: _kWiFiAutoJoinStatusAssociationFailure
__ MobileWiFi: _kWiFiAutoJoinStatusEAPNeedsUserFix
__ MobileWiFi: _kWiFiAutoJoinStatusKey
__ MobileWiFi: _kWiFiAutoJoinStatusNetworkNotFound
__ MobileWiFi: _kWiFiAutoJoinStatusNotPermitted
__ MobileWiFi: _kWiFiAutoJoinStatusSuccess
__ PrototypeTools: _OBJC_CLASS_$_PTButtonRow
__ PrototypeTools: _OBJC_CLASS_$_PTDomain
__ PrototypeTools: _OBJC_CLASS_$_PTDrillDownRow
__ PrototypeTools: _OBJC_CLASS_$_PTEditFloatRow
__ PrototypeTools: _OBJC_CLASS_$_PTModule
__ PrototypeTools: _OBJC_CLASS_$_PTRestoreDefaultSettingsRowAction
__ PrototypeTools: _OBJC_CLASS_$_PTSettings
__ PrototypeTools: _OBJC_CLASS_$_PTSliderRow
__ PrototypeTools: _OBJC_CLASS_$_PTSwitchRow
__ PrototypeTools: _OBJC_METACLASS_$_PTDomain
__ PrototypeTools: _OBJC_METACLASS_$_PTSettings
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkClient
__ Rapport: _OBJC_CLASS_$_RPFileTransferSession
__ Security: _SOSCCIsHomeKitSyncing
__ Security: _SecASN1PrintableString
__ Security: _SecCMSVerifyCopyDataAndAttributes
__ Security: _SecCertificateCopyCommonNames
__ Security: _SecCertificateCopyKey
__ Security: _SecCertificateCopySerialNumberData
__ Security: _SecCertificateCreateWithData
__ Security: _SecCertificateGetTypeID
__ Security: _SecCertificateNotValidAfter
__ Security: _SecGenerateCertificateRequestWithParameters
__ Security: _SecIdentityCreate
__ Security: _SecItemAdd
__ Security: _SecItemCopyMatching
__ Security: _SecItemDelete
__ Security: _SecItemUpdate
__ Security: _SecKeyCopyMatchingPrivateKey
__ Security: _SecKeyCopyPublicKey
__ Security: _SecKeyCreateDecryptedData
__ Security: _SecKeyCreateEncryptedData
__ Security: _SecKeyCreateRandomKey
__ Security: _SecKeyCreateSignature
__ Security: _SecKeyGetAlgorithmId
__ Security: _SecKeyGetBlockSize
__ Security: _SecKeyGetTypeID
__ Security: _SecKeyVerifySignature
__ Security: _SecPolicyCreateAppleIDAuthorityPolicy
__ Security: _SecPolicyCreateAppleIDValidationRecordSigningPolicy
__ Security: _SecTrustCreateWithCertificates
__ Security: _SecTrustEvaluateAsync
__ Security: _SecTrustEvaluateWithError
__ Security: _kSecAttrAccessGroup
__ Security: _kSecAttrAccessible
__ Security: _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
__ Security: _kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate
__ Security: _kSecAttrCreationDate
__ Security: _kSecAttrIsPermanent
__ Security: _kSecAttrKeyClass
__ Security: _kSecAttrKeyClassPrivate
__ Security: _kSecAttrKeyClassPublic
__ Security: _kSecAttrKeySizeInBits
__ Security: _kSecAttrKeyType
__ Security: _kSecAttrKeyTypeRSA
__ Security: _kSecAttrLabel
__ Security: _kSecAttrSynchronizable
__ Security: _kSecCertificateKeyUsage
__ Security: _kSecClass
__ Security: _kSecClassCertificate
__ Security: _kSecClassKey
__ Security: _kSecKeyAlgorithmRSAEncryptionOAEPSHA512
__ Security: _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitAll
__ Security: _kSecOidCommonName
__ Security: _kSecOidCountryName
__ Security: _kSecOidOrganization
__ Security: _kSecPrivateKeyAttrs
__ Security: _kSecPublicKeyAttrs
__ Security: _kSecReturnAttributes
__ Security: _kSecReturnPersistentRef
__ Security: _kSecReturnRef
__ Security: _kSecUseDataProtectionKeychain
__ Security: _kSecValuePersistentRef
__ Security: _kSecValueRef
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertConfigurationContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandle
__ SystemConfiguration: _SCError
__ SystemConfiguration: _SCPreferencesApplyChanges
__ SystemConfiguration: _SCPreferencesCommitChanges
__ SystemConfiguration: _SCPreferencesCreateWithAuthorization
__ SystemConfiguration: _SCPreferencesSetComputerName
__ SystemConfiguration: _SCPreferencesSetHostName
__ SystemConfiguration: _SCPreferencesSetLocalHostName
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __DefaultRuneLocale
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___maskrune
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___stdoutp
__ libSystem.B.dylib: ___strlcat_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dispatch_source_type_write
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_connection_interrupted
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_pthread_root_queue_create
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dup
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getprogname
__ libSystem.B.dylib: _getrusage
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _localtime_r
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memset_s
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_channel_advance_slot
__ libSystem.B.dylib: _os_channel_get_fd
__ libSystem.B.dylib: _os_channel_get_next_slot
__ libSystem.B.dylib: _os_channel_ring_id
__ libSystem.B.dylib: _os_channel_rx_ring
__ libSystem.B.dylib: _os_channel_set_slot_properties
__ libSystem.B.dylib: _os_channel_sync
__ libSystem.B.dylib: _os_channel_tx_ring
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_release
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _pthread_attr_destroy
__ libSystem.B.dylib: _pthread_attr_init
__ libSystem.B.dylib: _pthread_attr_set_qos_class_np
__ libSystem.B.dylib: _pthread_mutex_destroy
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_set_fixedpriority_self
__ libSystem.B.dylib: _qsort
__ libSystem.B.dylib: _realpath$DARWIN_EXTSN
__ libSystem.B.dylib: _reboot3
__ libSystem.B.dylib: _sandbox_extension_issue_file
__ libSystem.B.dylib: _setlinebuf
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _strtoul
__ libSystem.B.dylib: _xpc_array_append_value
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_array_get_count
__ libSystem.B.dylib: _xpc_array_get_int64
__ libSystem.B.dylib: _xpc_array_get_value
__ libSystem.B.dylib: _xpc_array_set_int64
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_get_context
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_barrier
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_set_context
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_finalizer_f
__ libSystem.B.dylib: _xpc_dictionary_apply
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_release
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: dyld_stub_binder
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___gxx_personality_v0
__ liblockdown.dylib: _kLockdownUserPreferencesDomainKey
__ liblockdown.dylib: _kLockdownUserSetLanguageKey
__ liblockdown.dylib: _kLockdownUserSetLocaleKey
__ liblockdown.dylib: _lockdown_connect
__ liblockdown.dylib: _lockdown_disconnect
__ liblockdown.dylib: _lockdown_set_value
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libutil.dylib: _tzlink
SFAirDropTransferObserver : SFXPCClient <SFAirDropTransferObserverProtocol>
 @property  NSMutableDictionary *transferIdentifierToTransfer
 @property  <SFAirDropTransferObserverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAirDropTransferObserver init]
  -[SFAirDropTransferObserver activate]
  -[SFAirDropTransferObserver .cxx_destruct]
  -[SFAirDropTransferObserver remoteObjectInterface]
  -[SFAirDropTransferObserver updatedTransfer:]
  -[SFAirDropTransferObserver exportedInterface]
  -[SFAirDropTransferObserver _getRemoteObjectProxyOnQueue:]
  -[SFAirDropTransferObserver observeForLocalOnlyPropertiesOnTransfer:]
  -[SFAirDropTransferObserver updateActionHandlersOnTransfer:]
  -[SFAirDropTransferObserver removedTransfer:]
  -[SFAirDropTransferObserver observeValueForKeyPath:ofObject:change:context:]
  -[SFAirDropTransferObserver machServiceName]
  -[SFAirDropTransferObserver setTransferIdentifierToTransfer:]
  -[SFAirDropTransferObserver transferIdentifierToTransfer]
  -[SFAirDropTransferObserver removeObserverForLocalOnlyPropertiesOnTransfer:]
  -[SFAirDropTransferObserver setDelegate:]
  -[SFAirDropTransferObserver invalidate]
  -[SFAirDropTransferObserver delegate]
  -[SFAirDropTransferObserver shouldEscapeXpcTryCatch]


SFAirDropTransferItem : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *type
 @property  NSString *subtype
 @property  long long count
 @property  BOOL isFile

  // class methods
  +[SFAirDropTransferItem supportsSecureCoding]

  // instance methods
  -[SFAirDropTransferItem subtype]
  -[SFAirDropTransferItem init]
  -[SFAirDropTransferItem isFile]
  -[SFAirDropTransferItem incrementCount]
  -[SFAirDropTransferItem .cxx_destruct]
  -[SFAirDropTransferItem encodeWithCoder:]
  -[SFAirDropTransferItem type]
  -[SFAirDropTransferItem isEqual:]
  -[SFAirDropTransferItem count]
  -[SFAirDropTransferItem initWithType:isFile:]
  -[SFAirDropTransferItem initWithType:subtype:isFile:]
  -[SFAirDropTransferItem initWithCoder:]


SFPeerDevice : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *uniqueID
 @property  NSString *modelIdentifier
 @property  NSString *productName
 @property  NSString *productVersion
 @property  NSString *productBuildVersion
 @property  NSString *name
 @property  NSString *deviceColor
 @property  NSString *enclosureColor
 @property  BOOL defaultPairedDevice
 @property  BOOL validKey
 @property  long long keyCounter

  // class methods
  +[SFPeerDevice supportsSecureCoding]

  // instance methods
  -[SFPeerDevice setProductName:]
  -[SFPeerDevice productVersion]
  -[SFPeerDevice deviceColor]
  -[SFPeerDevice productName]
  -[SFPeerDevice productBuildVersion]
  -[SFPeerDevice modelIdentifier]
  -[SFPeerDevice setDeviceColor:]
  -[SFPeerDevice .cxx_destruct]
  -[SFPeerDevice name]
  -[SFPeerDevice setEnclosureColor:]
  -[SFPeerDevice setProductVersion:]
  -[SFPeerDevice encodeWithCoder:]
  -[SFPeerDevice uniqueID]
  -[SFPeerDevice setUniqueID:]
  -[SFPeerDevice validKey]
  -[SFPeerDevice enclosureColor]
  -[SFPeerDevice isEqual:]
  -[SFPeerDevice setProductBuildVersion:]
  -[SFPeerDevice setDefaultPairedDevice:]
  -[SFPeerDevice setValidKey:]
  -[SFPeerDevice keyCounter]
  -[SFPeerDevice setKeyCounter:]
  -[SFPeerDevice setName:]
  -[SFPeerDevice isDefaultPairedDevice]
  -[SFPeerDevice setModelIdentifier:]
  -[SFPeerDevice initWithCoder:]


SFAppleIDValidationRecord : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *altDSID
 @property  NSData *data
 @property  NSString *identifier
 @property  BOOL isInvalid
 @property  BOOL needsUpdate
 @property  NSDate *nextCheckDate
 @property  unsigned long suggestedValidDuration
 @property  NSArray *validatedEmailHashes
 @property  NSArray *validatedPhoneHashes
 @property  NSDate *validStartDate
 @property  NSNumber *version

  // class methods
  +[SFAppleIDValidationRecord supportsSecureCoding]

  // instance methods
  -[SFAppleIDValidationRecord copyWithZone:]
  -[SFAppleIDValidationRecord altDSID]
  -[SFAppleIDValidationRecord setData:]
  -[SFAppleIDValidationRecord setAltDSID:]
  -[SFAppleIDValidationRecord isInvalid]
  -[SFAppleIDValidationRecord .cxx_destruct]
  -[SFAppleIDValidationRecord setIdentifier:]
  -[SFAppleIDValidationRecord setVersion:]
  -[SFAppleIDValidationRecord encodeWithCoder:]
  -[SFAppleIDValidationRecord identifier]
  -[SFAppleIDValidationRecord validStartDate]
  -[SFAppleIDValidationRecord data]
  -[SFAppleIDValidationRecord initWithDictionary:]
  -[SFAppleIDValidationRecord needsUpdate]
  -[SFAppleIDValidationRecord isEqual:]
  -[SFAppleIDValidationRecord suggestedValidDuration]
  -[SFAppleIDValidationRecord isEqualToValidationRecord:]
  -[SFAppleIDValidationRecord nextCheckDate]
  -[SFAppleIDValidationRecord validatedEmailHashes]
  -[SFAppleIDValidationRecord validatedPhoneHashes]
  -[SFAppleIDValidationRecord setNextCheckDate:]
  -[SFAppleIDValidationRecord setSuggestedValidDuration:]
  -[SFAppleIDValidationRecord setValidatedEmailHashes:]
  -[SFAppleIDValidationRecord setValidatedPhoneHashes:]
  -[SFAppleIDValidationRecord setValidStartDate:]
  -[SFAppleIDValidationRecord expirationDate]
  -[SFAppleIDValidationRecord version]
  -[SFAppleIDValidationRecord initWithCoder:]


SFAirDropBrowser : NSObject /usr/lib/libc++.1.dylib
 @property  <SFAirDropBrowserDiffableDelegate> *diffableDelegate
 @property  NSMutableDictionary *nodeIDToNode
 @property  NSString *sessionID
 @property  NSArray *people
 @property  <SFAirDropBrowserDelegate> *delegate
 @property  <SFAirDropBrowserBatchDelegate> *batchDelegate
 @property  NSString *sendingAppBundleID
 @property  NSArray *urlsBeingShared
 @property  NSArray *photosAssetIDs

  // instance methods
  -[SFAirDropBrowser setSessionID:]
  -[SFAirDropBrowser sessionID]
  -[SFAirDropBrowser people]
  -[SFAirDropBrowser pause]
  -[SFAirDropBrowser init]
  -[SFAirDropBrowser resume]
  -[SFAirDropBrowser dealloc]
  -[SFAirDropBrowser .cxx_destruct]
  -[SFAirDropBrowser stop]
  -[SFAirDropBrowser updateDiscoveredPeople]
  -[SFAirDropBrowser handleBrowserCallBack]
  -[SFAirDropBrowser getChangedIndexesForClientPeopleList:withCompletion:]
  -[SFAirDropBrowser batchDelegate]
  -[SFAirDropBrowser nodeIDToNode]
  -[SFAirDropBrowser setBatchDelegate:]
  -[SFAirDropBrowser sendingAppBundleID]
  -[SFAirDropBrowser setSendingAppBundleID:]
  -[SFAirDropBrowser urlsBeingShared]
  -[SFAirDropBrowser setUrlsBeingShared:]
  -[SFAirDropBrowser photosAssetIDs]
  -[SFAirDropBrowser setPhotosAssetIDs:]
  -[SFAirDropBrowser diffableDelegate]
  -[SFAirDropBrowser setDiffableDelegate:]
  -[SFAirDropBrowser setDelegate:]
  -[SFAirDropBrowser delegate]
  -[SFAirDropBrowser start]


SFAutoUnlockDevice : SFPeerDevice <NSSecureCoding>
 @property  NSString *modelDescription
 @property  BOOL unlockEnabled
 @property  BOOL bluetoothCloudPaired
 @property  NSUUID *bluetoothID
 @property  NSUUID *proxyBluetoothID
 @property  long long type
 @property  NSString *modelName
 @property  NSDictionary *results
 @property  NSData *hintToken
 @property  BOOL placeholder
 @property  BOOL supportsAlwaysDirect
 @property  BOOL supportsApproveWithWatch
 @property  BOOL supportsApproveIcon
 @property  BOOL supportsEncryption
 @property  BOOL supportsAdvertisingUnlocked
 @property  BOOL supportsConnectionCache
 @property  BOOL supportsHEIC
 @property  long long majorOSVersion
 @property  BOOL keyExists

  // class methods
  +[SFAutoUnlockDevice supportsSecureCoding]

  // instance methods
  -[SFAutoUnlockDevice setResults:]
  -[SFAutoUnlockDevice placeholder]
  -[SFAutoUnlockDevice init]
  -[SFAutoUnlockDevice results]
  -[SFAutoUnlockDevice .cxx_destruct]
  -[SFAutoUnlockDevice setUnlockEnabled:]
  -[SFAutoUnlockDevice setBluetoothID:]
  -[SFAutoUnlockDevice encodeWithCoder:]
  -[SFAutoUnlockDevice bluetoothID]
  -[SFAutoUnlockDevice setPlaceholder:]
  -[SFAutoUnlockDevice type]
  -[SFAutoUnlockDevice modelName]
  -[SFAutoUnlockDevice modelDescription]
  -[SFAutoUnlockDevice isEqual:]
  -[SFAutoUnlockDevice keyExists]
  -[SFAutoUnlockDevice bluetoothCloudPaired]
  -[SFAutoUnlockDevice setModelDescription:]
  -[SFAutoUnlockDevice setKeyExists:]
  -[SFAutoUnlockDevice setBluetoothCloudPaired:]
  -[SFAutoUnlockDevice supportsApproveWithWatch]
  -[SFAutoUnlockDevice setSupportsApproveWithWatch:]
  -[SFAutoUnlockDevice proxyBluetoothID]
  -[SFAutoUnlockDevice setProxyBluetoothID:]
  -[SFAutoUnlockDevice setModelName:]
  -[SFAutoUnlockDevice setHintToken:]
  -[SFAutoUnlockDevice supportsAlwaysDirect]
  -[SFAutoUnlockDevice setSupportsAlwaysDirect:]
  -[SFAutoUnlockDevice supportsApproveIcon]
  -[SFAutoUnlockDevice setSupportsApproveIcon:]
  -[SFAutoUnlockDevice supportsEncryption]
  -[SFAutoUnlockDevice setSupportsEncryption:]
  -[SFAutoUnlockDevice supportsAdvertisingUnlocked]
  -[SFAutoUnlockDevice supportsHEIC]
  -[SFAutoUnlockDevice setSupportsAdvertisingUnlocked:]
  -[SFAutoUnlockDevice supportsConnectionCache]
  -[SFAutoUnlockDevice setSupportsConnectionCache:]
  -[SFAutoUnlockDevice setSupportsHEIC:]
  -[SFAutoUnlockDevice majorOSVersion]
  -[SFAutoUnlockDevice setMajorOSVersion:]
  -[SFAutoUnlockDevice initWithCoder:]
  -[SFAutoUnlockDevice unlockEnabled]
  -[SFAutoUnlockDevice hintToken]


SFMagicHeadSettings : PTSettings /System/Library/PrivateFrameworks/Rapport.framework/Rapport
 @property  BOOL showRangingValues
 @property  BOOL showSelectionGateLock
 @property  BOOL showSelectionMarkers
 @property  BOOL selectionDisabled
 @property  double tapDarkeningAlpha
 @property  double circlesFadeInDurationS
 @property  double circlesFadeOutDurationS
 @property  BOOL rollEnabled
 @property  double rollMaxDegrees
 @property  double rollRubberbandingStretchiness
 @property  BOOL guidanceEnabled
 @property  double guidanceGoodAngleThreshold
 @property  double guidanceWorstAngleDegreesDelta
 @property  double guidanceDipSpeed
 @property  double guidanceRubberbandingStretchiness
 @property  double guidanceFadeHeadDegrees
 @property  double guidanceRestoreHeadDegreesDelta
 @property  double guidanceTooFarDegrees
 @property  double guidanceRecoveredDegreesDelta
 @property  double guidanceTiltedTooFarAlpha
 @property  double guidanceSuppressHapticsEnabled
 @property  double guidanceSuppressHapticsDurationS
 @property  double guidanceContractDotsHapticEnabled
 @property  double guidanceExpandDotsHapticEnabled
 @property  BOOL rotationGatedSelectionEnabled
 @property  double rotationGateThresholdDegrees
 @property  long long rotationStartGatingResponsiveness
 @property  long long rotationStopGatingResponsiveness
 @property  long long rotationStartBigHeadGatingResponsiveness
 @property  long long rotationStopBigHeadGatingResponsiveness
 @property  double selectionScaleFriction
 @property  double selectionAlphaFriction
 @property  double selectionPositionFriction
 @property  double dismissScaleFriction
 @property  double dismissAlphaFriction
 @property  double dismissPositionFriction
 @property  BOOL hapticForCozyUpSelectionEnabled
 @property  BOOL cozyUpAnimationEnabled
 @property  double cozyUpSelectDurationS
 @property  BOOL selectedPulseEnabled
 @property  double selectedPulseScaleAmount
 @property  double selectedPulseDurationS

  // class methods
  +[SFMagicHeadSettings settingsControllerModule]

  // instance methods
  -[SFMagicHeadSettings setDefaultValues]
  -[SFMagicHeadSettings setShowRangingValues:]
  -[SFMagicHeadSettings setShowSelectionGateLock:]
  -[SFMagicHeadSettings setShowSelectionMarkers:]
  -[SFMagicHeadSettings setSelectionDisabled:]
  -[SFMagicHeadSettings setTapDarkeningAlpha:]
  -[SFMagicHeadSettings setCirclesFadeInDurationS:]
  -[SFMagicHeadSettings setCirclesFadeOutDurationS:]
  -[SFMagicHeadSettings setRollEnabled:]
  -[SFMagicHeadSettings setRollMaxDegrees:]
  -[SFMagicHeadSettings setRollRubberbandingStretchiness:]
  -[SFMagicHeadSettings setGuidanceEnabled:]
  -[SFMagicHeadSettings setGuidanceGoodAngleThreshold:]
  -[SFMagicHeadSettings setGuidanceWorstAngleDegreesDelta:]
  -[SFMagicHeadSettings setGuidanceDipSpeed:]
  -[SFMagicHeadSettings setGuidanceRubberbandingStretchiness:]
  -[SFMagicHeadSettings setGuidanceFadeHeadDegrees:]
  -[SFMagicHeadSettings setGuidanceRestoreHeadDegreesDelta:]
  -[SFMagicHeadSettings showRangingValues]
  -[SFMagicHeadSettings setGuidanceTooFarDegrees:]
  -[SFMagicHeadSettings setGuidanceRecoveredDegreesDelta:]
  -[SFMagicHeadSettings setGuidanceTiltedTooFarAlpha:]
  -[SFMagicHeadSettings setGuidanceSuppressHapticsEnabled:]
  -[SFMagicHeadSettings setGuidanceSuppressHapticsDurationS:]
  -[SFMagicHeadSettings setGuidanceContractDotsHapticEnabled:]
  -[SFMagicHeadSettings setGuidanceExpandDotsHapticEnabled:]
  -[SFMagicHeadSettings setRotationGatedSelectionEnabled:]
  -[SFMagicHeadSettings setRotationGateThresholdDegrees:]
  -[SFMagicHeadSettings setRotationStartGatingResponsiveness:]
  -[SFMagicHeadSettings setRotationStopGatingResponsiveness:]
  -[SFMagicHeadSettings setRotationStartBigHeadGatingResponsiveness:]
  -[SFMagicHeadSettings setRotationStopBigHeadGatingResponsiveness:]
  -[SFMagicHeadSettings setSelectionScaleFriction:]
  -[SFMagicHeadSettings setSelectionAlphaFriction:]
  -[SFMagicHeadSettings setSelectionPositionFriction:]
  -[SFMagicHeadSettings setDismissScaleFriction:]
  -[SFMagicHeadSettings setDismissAlphaFriction:]
  -[SFMagicHeadSettings setDismissPositionFriction:]
  -[SFMagicHeadSettings setHapticForCozyUpSelectionEnabled:]
  -[SFMagicHeadSettings setCozyUpAnimationEnabled:]
  -[SFMagicHeadSettings setCozyUpSelectDurationS:]
  -[SFMagicHeadSettings setSelectedPulseEnabled:]
  -[SFMagicHeadSettings setSelectedPulseDurationS:]
  -[SFMagicHeadSettings setSelectedPulseScaleAmount:]
  -[SFMagicHeadSettings showSelectionGateLock]
  -[SFMagicHeadSettings showSelectionMarkers]
  -[SFMagicHeadSettings selectionDisabled]
  -[SFMagicHeadSettings rollEnabled]
  -[SFMagicHeadSettings tapDarkeningAlpha]
  -[SFMagicHeadSettings circlesFadeInDurationS]
  -[SFMagicHeadSettings circlesFadeOutDurationS]
  -[SFMagicHeadSettings rollMaxDegrees]
  -[SFMagicHeadSettings rollRubberbandingStretchiness]
  -[SFMagicHeadSettings guidanceEnabled]
  -[SFMagicHeadSettings guidanceGoodAngleThreshold]
  -[SFMagicHeadSettings guidanceDipSpeed]
  -[SFMagicHeadSettings guidanceWorstAngleDegreesDelta]
  -[SFMagicHeadSettings guidanceRubberbandingStretchiness]
  -[SFMagicHeadSettings guidanceFadeHeadDegrees]
  -[SFMagicHeadSettings guidanceRestoreHeadDegreesDelta]
  -[SFMagicHeadSettings guidanceTooFarDegrees]
  -[SFMagicHeadSettings guidanceRecoveredDegreesDelta]
  -[SFMagicHeadSettings guidanceTiltedTooFarAlpha]
  -[SFMagicHeadSettings guidanceSuppressHapticsEnabled]
  -[SFMagicHeadSettings guidanceSuppressHapticsDurationS]
  -[SFMagicHeadSettings guidanceContractDotsHapticEnabled]
  -[SFMagicHeadSettings guidanceExpandDotsHapticEnabled]
  -[SFMagicHeadSettings selectionScaleFriction]
  -[SFMagicHeadSettings rotationGatedSelectionEnabled]
  -[SFMagicHeadSettings rotationGateThresholdDegrees]
  -[SFMagicHeadSettings rotationStartGatingResponsiveness]
  -[SFMagicHeadSettings rotationStopGatingResponsiveness]
  -[SFMagicHeadSettings rotationStartBigHeadGatingResponsiveness]
  -[SFMagicHeadSettings rotationStopBigHeadGatingResponsiveness]
  -[SFMagicHeadSettings selectionAlphaFriction]
  -[SFMagicHeadSettings selectionPositionFriction]
  -[SFMagicHeadSettings dismissScaleFriction]
  -[SFMagicHeadSettings dismissAlphaFriction]
  -[SFMagicHeadSettings dismissPositionFriction]
  -[SFMagicHeadSettings cozyUpAnimationEnabled]
  -[SFMagicHeadSettings hapticForCozyUpSelectionEnabled]
  -[SFMagicHeadSettings cozyUpSelectDurationS]
  -[SFMagicHeadSettings selectedPulseEnabled]
  -[SFMagicHeadSettings selectedPulseScaleAmount]
  -[SFMagicHeadSettings selectedPulseDurationS]


SFSettings : PTSettings /System/Library/PrivateFrameworks/Rapport.framework/Rapport
 @property  SFMagicHeadSettings *magicHeadSettings

  // class methods
  +[SFSettings settingsControllerModule]

  // instance methods
  -[SFSettings .cxx_destruct]
  -[SFSettings magicHeadSettings]
  -[SFSettings setMagicHeadSettings:]


SFSettingsDomain : PTDomain /System/Library/PrivateFrameworks/Rapport.framework/Rapport
  // class methods
  +[SFSettingsDomain domainName]
  +[SFSettingsDomain rootSettings]
  +[SFSettingsDomain rootSettingsClass]
  +[SFSettingsDomain domainGroupName]


SFAirDropNode : NSObject /usr/lib/libc++.1.dylib
 @property  NSDate *discoveryDate
 @property  id node
 @property  NSString *contactIdentifier
 @property  NSString *realName
 @property  ^{CGImage=} displayIcon
 @property  NSString *displayName
 @property  NSString *secondaryName
 @property  NSString *model
 @property  NSString *transportBundleID
 @property  NSSet *formattedHandles
 @property  NSSet *actualHandles
 @property  NSUUID *nodeIdentifier
 @property  CURangingMeasurement *rangingMeasurement
 @property  NSNumber *suggestionIndex
 @property  NSSet *contactIDs
 @property  NSString *derivedIntentIdentifier
 @property  BOOL disabled
 @property  BOOL me
 @property  BOOL known
 @property  BOOL unknown
 @property  BOOL monogram
 @property  BOOL classroom
 @property  BOOL classroomGroup
 @property  BOOL classroomCourse
 @property  BOOL suggestion
 @property  BOOL rapport
 @property  BOOL ultraWideBindCapable
 @property  long long selectionReason
 @property  BOOL supportsCredentials
 @property  BOOL supportsFMF
 @property  BOOL supportsPasses
 @property  BOOL supportsMixedTypes

  // class methods
  +[SFAirDropNode nodeWithSFNode:]

  // instance methods
  -[SFAirDropNode isMe]
  -[SFAirDropNode isDisabled]
  -[SFAirDropNode setDisabled:]
  -[SFAirDropNode init]
  -[SFAirDropNode node]
  -[SFAirDropNode nodeIdentifier]
  -[SFAirDropNode isUnknown]
  -[SFAirDropNode contactIDs]
  -[SFAirDropNode dealloc]
  -[SFAirDropNode setNode:]
  -[SFAirDropNode derivedIntentIdentifier]
  -[SFAirDropNode contactIdentifier]
  -[SFAirDropNode .cxx_destruct]
  -[SFAirDropNode setModel:]
  -[SFAirDropNode setUnknown:]
  -[SFAirDropNode setSecondaryName:]
  -[SFAirDropNode setDisplayName:]
  -[SFAirDropNode realName]
  -[SFAirDropNode transportBundleID]
  -[SFAirDropNode isEqual:]
  -[SFAirDropNode setNodeIdentifier:]
  -[SFAirDropNode updateWithSFNode:]
  -[SFAirDropNode isSuggestion]
  -[SFAirDropNode isClassroom]
  -[SFAirDropNode isClassroomCourse]
  -[SFAirDropNode discoveryDate]
  -[SFAirDropNode setContactIDs:]
  -[SFAirDropNode setContactIdentifier:]
  -[SFAirDropNode isKnown]
  -[SFAirDropNode cancelSend]
  -[SFAirDropNode displayIcon]
  -[SFAirDropNode model]
  -[SFAirDropNode secondaryName]
  -[SFAirDropNode isMonogram]
  -[SFAirDropNode displayName]
  -[SFAirDropNode setRealName:]
  -[SFAirDropNode setDisplayIcon:]
  -[SFAirDropNode setTransportBundleID:]
  -[SFAirDropNode setActualHandles:]
  -[SFAirDropNode rangingMeasurement]
  -[SFAirDropNode updateDisplayName]
  -[SFAirDropNode setRangingMeasurement:]
  -[SFAirDropNode appendDiscoveryInfoToDisplayName:]
  -[SFAirDropNode displayNameForLocale:]
  -[SFAirDropNode startSendForBundleID:sessionID:items:description:previewImage:]
  -[SFAirDropNode handleOperationCallback:event:withResults:]
  -[SFAirDropNode formattedHandles]
  -[SFAirDropNode setDerivedIntentIdentifier:]
  -[SFAirDropNode setFormattedHandles:]
  -[SFAirDropNode actualHandles]
  -[SFAirDropNode suggestionIndex]
  -[SFAirDropNode setSuggestionIndex:]
  -[SFAirDropNode setMonogram:]
  -[SFAirDropNode setClassroom:]
  -[SFAirDropNode isclassroomGroup]
  -[SFAirDropNode setClassroomGroup:]
  -[SFAirDropNode setClassroomCourse:]
  -[SFAirDropNode setSuggestion:]
  -[SFAirDropNode setRapport:]
  -[SFAirDropNode isUltraWideBindCapable]
  -[SFAirDropNode setUltraWideBindCapable:]
  -[SFAirDropNode selectionReason]
  -[SFAirDropNode setSelectionReason:]
  -[SFAirDropNode supportsCredentials]
  -[SFAirDropNode supportsFMF]
  -[SFAirDropNode supportsPasses]
  -[SFAirDropNode supportsMixedTypes]
  -[SFAirDropNode isRapport]
  -[SFAirDropNode setMe:]


SFChargingUICoordinator : SFXPCClient
 @property  long long defaultDuration

  // instance methods
  -[SFChargingUICoordinator defaultDuration]
  -[SFChargingUICoordinator _initialViewControllerDidDisappear]
  -[SFChargingUICoordinator _requestToDismissUIHandler:]
  -[SFChargingUICoordinator initialViewControllerDidDisappear]
  -[SFChargingUICoordinator activate]
  -[SFChargingUICoordinator sendDismissUIWithReason:]
  -[SFChargingUICoordinator setDefaultDuration:]
  -[SFChargingUICoordinator onqueue_connectionEstablished]
  -[SFChargingUICoordinator onqueue_connectionInterrupted]
  -[SFChargingUICoordinator _timingInvalidateMinTimer]
  -[SFChargingUICoordinator .cxx_destruct]
  -[SFChargingUICoordinator requestToStartAnimationAtDate:]
  -[SFChargingUICoordinator remoteObjectInterface]
  -[SFChargingUICoordinator _timingRestartMinTimer]
  -[SFChargingUICoordinator exportedInterface]
  -[SFChargingUICoordinator _activate]
  -[SFChargingUICoordinator _invalidate]
  -[SFChargingUICoordinator initialViewControllerDidAppear]
  -[SFChargingUICoordinator machServiceName]
  -[SFChargingUICoordinator _requestToStartAnimationAtDate:]
  -[SFChargingUICoordinator requestAnimationDateWithCompletion:]
  -[SFChargingUICoordinator _initialViewControllerDidAppear]
  -[SFChargingUICoordinator requestToDismissUIHandler:]
  -[SFChargingUICoordinator _dismissUI]
  -[SFChargingUICoordinator invalidate]
  -[SFChargingUICoordinator onqueue_connectionInvalidated]
  -[SFChargingUICoordinator shouldEscapeXpcTryCatch]
  -[SFChargingUICoordinator requestToShowUIWithHandler:]
  -[SFChargingUICoordinator _sendDismissUIWithReason:]


SFSessionCache : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned long capacity
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  NSUUID *identifier
 @property  NSString *serviceIdentifier

  // class methods
  +[SFSessionCache supportsSecureCoding]

  // instance methods
  -[SFSessionCache setCapacity:]
  -[SFSessionCache capacity]
  -[SFSessionCache _ensureStarted]
  -[SFSessionCache serviceIdentifier]
  -[SFSessionCache init]
  -[SFSessionCache activate]
  -[SFSessionCache setServiceIdentifier:]
  -[SFSessionCache errorHandler]
  -[SFSessionCache setErrorHandler:]
  -[SFSessionCache .cxx_destruct]
  -[SFSessionCache dispatchQueue]
  -[SFSessionCache clearCache]
  -[SFSessionCache encodeWithCoder:]
  -[SFSessionCache identifier]
  -[SFSessionCache setDispatchQueue:]
  -[SFSessionCache activeSessions]
  -[SFSessionCache invalidate]
  -[SFSessionCache _ensureStopped]
  -[SFSessionCache _sessionWasInterrupted:]
  -[SFSessionCache _sessionWasInvalidated:]
  -[SFSessionCache _sessionWithDevice:activate:withCompletion:]
  -[SFSessionCache sendRequestWithFlags:object:responseHandler:toDevice:]
  -[SFSessionCache sendWithFlags:object:toDevice:]
  -[SFSessionCache sessionWithDevice:activate:withCompletion:]
  -[SFSessionCache activePeerDeviceIDs]
  -[SFSessionCache initWithCoder:]
  -[SFSessionCache cacheFull]
  -[SFSessionCache _popCache]


SFWirelessSettingsController : NSObject /usr/lib/libc++.1.dylib
 @property  <SFWirelessSettingsControllerDelegate> *delegate
 @property  BOOL airplaneModeEnabled
 @property  BOOL bluetoothEnabled
 @property  BOOL wifiEnabled
 @property  unsigned long ultraWideBandStatus
 @property  BOOL wirelessAccessPointEnabled
 @property  BOOL wirelessCarPlayEnabled
 @property  BOOL deviceSupportsWAPI

  // instance methods
  -[SFWirelessSettingsController isWifiEnabled]
  -[SFWirelessSettingsController isWirelessCarPlayEnabled]
  -[SFWirelessSettingsController isAirplaneModeEnabled]
  -[SFWirelessSettingsController init]
  -[SFWirelessSettingsController dealloc]
  -[SFWirelessSettingsController .cxx_destruct]
  -[SFWirelessSettingsController setAirplaneModeEnabled:]
  -[SFWirelessSettingsController setDelegate:]
  -[SFWirelessSettingsController invalidate]
  -[SFWirelessSettingsController handleOperationCallback:event:withResults:]
  -[SFWirelessSettingsController delegate]
  -[SFWirelessSettingsController setWifiEnabled:]
  -[SFWirelessSettingsController setBluetoothEnabled:]
  -[SFWirelessSettingsController isBluetoothEnabled]
  -[SFWirelessSettingsController deviceSupportsWAPI]
  -[SFWirelessSettingsController isWirelessAccessPointEnabled]
  -[SFWirelessSettingsController setWirelessAccessPointEnabled:]
  -[SFWirelessSettingsController ultraWideBandStatus]


SFAppleIDAccount : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *altDSID
 @property  NSString *appleID
 @property  NSString *certificateToken
 @property  NSDate *certificateTokenCreationDate
 @property  SFAppleIDContactInfo *contactInfo
 @property  NSDate *creationDate
 @property  SFAppleIDIdentity *identity
 @property  NSData *privateKeyPersistentReference
 @property  SFAppleIDValidationRecord *validationRecord

  // class methods
  +[SFAppleIDAccount supportsSecureCoding]

  // instance methods
  -[SFAppleIDAccount copyWithZone:]
  -[SFAppleIDAccount altDSID]
  -[SFAppleIDAccount isEqualToAccount:]
  -[SFAppleIDAccount setAltDSID:]
  -[SFAppleIDAccount appleID]
  -[SFAppleIDAccount contactInfo]
  -[SFAppleIDAccount identity]
  -[SFAppleIDAccount creationDate]
  -[SFAppleIDAccount setIdentity:]
  -[SFAppleIDAccount .cxx_destruct]
  -[SFAppleIDAccount encodeWithCoder:]
  -[SFAppleIDAccount initWithDictionary:]
  -[SFAppleIDAccount isEqual:]
  -[SFAppleIDAccount initWithCoder:]
  -[SFAppleIDAccount certificateToken]
  -[SFAppleIDAccount certificateTokenCreationDate]
  -[SFAppleIDAccount privateKeyPersistentReference]
  -[SFAppleIDAccount validationRecord]
  -[SFAppleIDAccount initWithAppleID:]
  -[SFAppleIDAccount setCertificateToken:]
  -[SFAppleIDAccount setCertificateTokenCreationDate:]
  -[SFAppleIDAccount setContactInfo:]
  -[SFAppleIDAccount setPrivateKeyPersistentReference:]
  -[SFAppleIDAccount setValidationRecord:]


SFTokenBucket : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[SFTokenBucket init]
  -[SFTokenBucket initWithBucketSize:tokenDurationTicks:]
  -[SFTokenBucket acquireToken]
  -[SFTokenBucket initWithBucketSize:tokenDurationSec:]
  -[SFTokenBucket initWithBucketSize:tokensPerSec:]


SFTokenBucketWithDups : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[SFTokenBucketWithDups init]
  -[SFTokenBucketWithDups dealloc]
  -[SFTokenBucketWithDups .cxx_destruct]
  -[SFTokenBucketWithDups acquireTokenForIdentifier:]
  -[SFTokenBucketWithDups initWithBucket:dupHistoryLength:]


SFProximityClient : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  @? deviceUpdateHandler
 @property  BOOL wantsUpdates
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  BOOL shouldAdvertise
 @property  @? deviceEnteredImmediateHandler
 @property  @? deviceExitedImmediateHandler
 @property  @? deviceEnteredNearbyHandler
 @property  @? deviceExitedNearbyHandler
 @property  @? deviceWasSelectedHandler
 @property  @? deviceWillTriggerHandler
 @property  @? deviceDidUntriggerHandler
 @property  @? deviceWasDismissedHandlerEx
 @property  @? deviceWasDismissedHandler

  // class methods
  +[SFProximityClient supportsSecureCoding]

  // instance methods
  -[SFProximityClient _activateWithCompletion:]
  -[SFProximityClient _ensureXPCStarted]
  -[SFProximityClient deviceEnteredImmediateHandler]
  -[SFProximityClient _dismissContentForDevice:completion:]
  -[SFProximityClient _provideContent:forDevice:force:completion:]
  -[SFProximityClient _updateContent:forDevice:completion:]
  -[SFProximityClient dismissContentForDevice:completion:]
  -[SFProximityClient requestScannerTimerReset]
  -[SFProximityClient provideContent:forDevice:force:completion:]
  -[SFProximityClient updateContent:forDevice:completion:]
  -[SFProximityClient setDeviceEnteredImmediateHandler:]
  -[SFProximityClient deviceExitedImmediateHandler]
  -[SFProximityClient setDeviceExitedImmediateHandler:]
  -[SFProximityClient init]
  -[SFProximityClient _invokeBlockActivateSafe:]
  -[SFProximityClient deviceEnteredNearbyHandler]
  -[SFProximityClient setDeviceEnteredNearbyHandler:]
  -[SFProximityClient deviceExitedNearbyHandler]
  -[SFProximityClient setDeviceExitedNearbyHandler:]
  -[SFProximityClient deviceWasSelectedHandler]
  -[SFProximityClient setDeviceWasSelectedHandler:]
  -[SFProximityClient deviceWillTriggerHandler]
  -[SFProximityClient setDeviceWillTriggerHandler:]
  -[SFProximityClient deviceDidUntriggerHandler]
  -[SFProximityClient setDeviceDidUntriggerHandler:]
  -[SFProximityClient deviceWasDismissedHandlerEx]
  -[SFProximityClient setDeviceWasDismissedHandlerEx:]
  -[SFProximityClient wantsUpdates]
  -[SFProximityClient deviceWasDismissedHandler]
  -[SFProximityClient setDeviceWasDismissedHandler:]
  -[SFProximityClient deviceUpdateHandler]
  -[SFProximityClient setDeviceUpdateHandler:]
  -[SFProximityClient dealloc]
  -[SFProximityClient .cxx_destruct]
  -[SFProximityClient dispatchQueue]
  -[SFProximityClient setInvalidationHandler:]
  -[SFProximityClient encodeWithCoder:]
  -[SFProximityClient _invalidate]
  -[SFProximityClient setDispatchQueue:]
  -[SFProximityClient setInterruptionHandler:]
  -[SFProximityClient interruptionHandler]
  -[SFProximityClient _invalidated]
  -[SFProximityClient invalidationHandler]
  -[SFProximityClient _interrupted]
  -[SFProximityClient invalidate]
  -[SFProximityClient activateWithCompletion:]
  -[SFProximityClient setShouldAdvertise:]
  -[SFProximityClient shouldAdvertise]
  -[SFProximityClient initWithCoder:]
  -[SFProximityClient proximityClientDeviceEnteredImmediate:]
  -[SFProximityClient proximityClientDeviceExitedImmediate:]
  -[SFProximityClient proximityClientDeviceEnteredNearby:]
  -[SFProximityClient proximityClientDeviceExitedNearby:]
  -[SFProximityClient proximityClientDeviceWasDismissedHandler:reason:]
  -[SFProximityClient proximityClientDeviceWasSelectedHandler:]
  -[SFProximityClient proximityClientDeviceWillTriggerHandler:]
  -[SFProximityClient proximityClientDeviceDidUntriggerHandler:]
  -[SFProximityClient proximityClientDeviceUpdated:rssi:state:]
  -[SFProximityClient setWantsUpdates:]


SFRemoteAutoFillSessionHelper : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, SFXPCInterface>
 @property  SDAutoFillAgent *agent
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  @? dismissUserNotificationHandler
 @property  @? pairingResponseHandler
 @property  @? promptForPINHandler

  // class methods
  +[SFRemoteAutoFillSessionHelper supportsSecureCoding]

  // instance methods
  -[SFRemoteAutoFillSessionHelper setAgent:]
  -[SFRemoteAutoFillSessionHelper _activateWithCompletion:]
  -[SFRemoteAutoFillSessionHelper _ensureXPCStarted]
  -[SFRemoteAutoFillSessionHelper init]
  -[SFRemoteAutoFillSessionHelper agent]
  -[SFRemoteAutoFillSessionHelper promptForPINHandler]
  -[SFRemoteAutoFillSessionHelper setPromptForPINHandler:]
  -[SFRemoteAutoFillSessionHelper serverDidPickUsername:password:error:]
  -[SFRemoteAutoFillSessionHelper serverUserNotificationDidActivate:]
  -[SFRemoteAutoFillSessionHelper serverUserNotificationDidDismiss:]
  -[SFRemoteAutoFillSessionHelper clientDismissUserNotification]
  -[SFRemoteAutoFillSessionHelper clientPairingSucceeded:completion:]
  -[SFRemoteAutoFillSessionHelper clientPromptForPIN:throttleSeconds:]
  -[SFRemoteAutoFillSessionHelper dismissUserNotificationHandler]
  -[SFRemoteAutoFillSessionHelper setDismissUserNotificationHandler:]
  -[SFRemoteAutoFillSessionHelper pairingResponseHandler]
  -[SFRemoteAutoFillSessionHelper setPairingResponseHandler:]
  -[SFRemoteAutoFillSessionHelper .cxx_destruct]
  -[SFRemoteAutoFillSessionHelper dispatchQueue]
  -[SFRemoteAutoFillSessionHelper setInvalidationHandler:]
  -[SFRemoteAutoFillSessionHelper encodeWithCoder:]
  -[SFRemoteAutoFillSessionHelper _invalidate]
  -[SFRemoteAutoFillSessionHelper setDispatchQueue:]
  -[SFRemoteAutoFillSessionHelper setInterruptionHandler:]
  -[SFRemoteAutoFillSessionHelper interruptionHandler]
  -[SFRemoteAutoFillSessionHelper _invalidated]
  -[SFRemoteAutoFillSessionHelper invalidationHandler]
  -[SFRemoteAutoFillSessionHelper _interrupted]
  -[SFRemoteAutoFillSessionHelper invalidate]
  -[SFRemoteAutoFillSessionHelper activateWithCompletion:]
  -[SFRemoteAutoFillSessionHelper initWithCoder:]
  -[SFRemoteAutoFillSessionHelper autoFillDismissUserNotification]
  -[SFRemoteAutoFillSessionHelper autoFillPairingSucceeded:completion:]
  -[SFRemoteAutoFillSessionHelper autoFillPromptForPIN:throttleSeconds:]
  -[SFRemoteAutoFillSessionHelper serverTryPIN:]


SFAutoUnlockManager : NSObject /usr/lib/libc++.1.dylib <SFUnlockClientProtocol>
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <SFAutoUnlockManagerDelegate> *delegate
 @property  double spinnerDelay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFAutoUnlockManager autoUnlockSupported]
  +[SFAutoUnlockManager autoUnlockEnabled:]
  +[SFAutoUnlockManager bluetoothAndWiFiEnabled]
  +[SFAutoUnlockManager enableBluetoothAndWiFi]

  // instance methods
  -[SFAutoUnlockManager init]
  -[SFAutoUnlockManager setDelegateQueue:]
  -[SFAutoUnlockManager repairCloudPairing]
  -[SFAutoUnlockManager eligibleAutoUnlockDevicesWithCompletionHandler:]
  -[SFAutoUnlockManager onDelegateQueue_notifyDelegateOfEnableError:device:]
  -[SFAutoUnlockManager cancelEnablingAutoUnlockForDevice:]
  -[SFAutoUnlockManager disableAutoUnlockForDevice:completionHandler:]
  -[SFAutoUnlockManager onDelegateQueue_notifyDelegateOfAttemptError:]
  -[SFAutoUnlockManager delegateQueue]
  -[SFAutoUnlockManager cancelAutoUnlock]
  -[SFAutoUnlockManager autoUnlockStateWithCompletionHandler:]
  -[SFAutoUnlockManager authPromptInfoWithCompletionHandler:]
  -[SFAutoUnlockManager keyDeviceLocked:]
  -[SFAutoUnlockManager enabledDevice:]
  -[SFAutoUnlockManager failedToEnableDevice:error:]
  -[SFAutoUnlockManager beganAttemptWithDevice:]
  -[SFAutoUnlockManager completedUnlockWithDevice:]
  -[SFAutoUnlockManager failedUnlockWithError:]
  -[SFAutoUnlockManager spinnerDelay]
  -[SFAutoUnlockManager enableAutoUnlockWithDevice:passcode:]
  -[SFAutoUnlockManager attemptAutoUnlock]
  -[SFAutoUnlockManager .cxx_destruct]
  -[SFAutoUnlockManager setDelegate:]
  -[SFAutoUnlockManager delegate]


SFUnlockManager : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[SFUnlockManager sharedUnlockManager]

  // instance methods
  -[SFUnlockManager init]
  -[SFUnlockManager enableUnlockWithDevice:fromKey:withPasscode:completionHandler:]
  -[SFUnlockManager unlockEnabledWithDevice:completionHandler:]
  -[SFUnlockManager cancelStateRequestTimer]
  -[SFUnlockManager establishStashBagWithCompletionHandler:]
  -[SFUnlockManager establishStashBagWithManifest:completionHandler:]
  -[SFUnlockManager timerWithBlock:]
  -[SFUnlockManager unlockStateForDevice:completionHandler:]
  -[SFUnlockManager disableUnlockWithDevice:]
  -[SFUnlockManager .cxx_destruct]


SFAppleIDContactInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *firstName
 @property  NSString *lastName
 @property  NSArray *validatedEmailAddresses
 @property  NSArray *validatedPhoneNumbers

  // class methods
  +[SFAppleIDContactInfo supportsSecureCoding]

  // instance methods
  -[SFAppleIDContactInfo lastName]
  -[SFAppleIDContactInfo copyWithZone:]
  -[SFAppleIDContactInfo setLastName:]
  -[SFAppleIDContactInfo setFirstName:]
  -[SFAppleIDContactInfo firstName]
  -[SFAppleIDContactInfo isEqualToContactInfo:]
  -[SFAppleIDContactInfo validatedEmailAddresses]
  -[SFAppleIDContactInfo validatedPhoneNumbers]
  -[SFAppleIDContactInfo setValidatedEmailAddresses:]
  -[SFAppleIDContactInfo setValidatedPhoneNumbers:]
  -[SFAppleIDContactInfo .cxx_destruct]
  -[SFAppleIDContactInfo encodeWithCoder:]
  -[SFAppleIDContactInfo initWithDictionary:]
  -[SFAppleIDContactInfo isEqual:]
  -[SFAppleIDContactInfo initWithCoder:]


SFAirDropTransfer : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  NSURL *customDestinationURL
 @property  NSString *identifier
 @property  SFAirDropTransferMetaData *metaData
 @property  unsigned long userResponse
 @property  unsigned long transferState
 @property  unsigned long failureReason
 @property  NSError *error
 @property  NSProgress *transferProgress
 @property  id progressToken
 @property  NSString *contentsTitle
 @property  NSString *contentsDescription
 @property  SFAirDropAction *selectedAction
 @property  NSArray *possibleActions
 @property  SFAirDropAction *cancelAction
 @property  NSArray *completedURLs
 @property  BOOL needsAction

  // class methods
  +[SFAirDropTransfer supportsSecureCoding]
  +[SFAirDropTransfer keyPathsForValuesAffectingNeedsAction]
  +[SFAirDropTransfer automaticallyNotifiesObserversOfFailureReason]
  +[SFAirDropTransfer automaticallyNotifiesObserversOfTransferState]
  +[SFAirDropTransfer automaticallyNotifiesObserversOfUserResponse]

  // instance methods
  -[SFAirDropTransfer copyWithZone:]
  -[SFAirDropTransfer setFailureReason:]
  -[SFAirDropTransfer contentsDescription]
  -[SFAirDropTransfer setSelectedAction:]
  -[SFAirDropTransfer transferState]
  -[SFAirDropTransfer dealloc]
  -[SFAirDropTransfer setError:]
  -[SFAirDropTransfer progressToken]
  -[SFAirDropTransfer setUserResponse:]
  -[SFAirDropTransfer .cxx_destruct]
  -[SFAirDropTransfer setUpProgressToBroadcast:]
  -[SFAirDropTransfer setTransferProgress:]
  -[SFAirDropTransfer setProgressToken:]
  -[SFAirDropTransfer updateUsingCoder:]
  -[SFAirDropTransfer needsAction]
  -[SFAirDropTransfer contentsTitle]
  -[SFAirDropTransfer setContentsTitle:]
  -[SFAirDropTransfer setContentsDescription:]
  -[SFAirDropTransfer setPossibleActions:]
  -[SFAirDropTransfer completedURLs]
  -[SFAirDropTransfer setCompletedURLs:]
  -[SFAirDropTransfer initWithIdentifier:initialInformation:]
  -[SFAirDropTransfer transferProgress]
  -[SFAirDropTransfer customDestinationURL]
  -[SFAirDropTransfer setCustomDestinationURL:]
  -[SFAirDropTransfer possibleActions]
  -[SFAirDropTransfer setIdentifier:]
  -[SFAirDropTransfer metaData]
  -[SFAirDropTransfer encodeWithCoder:]
  -[SFAirDropTransfer identifier]
  -[SFAirDropTransfer setMetaData:]
  -[SFAirDropTransfer cancelAction]
  -[SFAirDropTransfer error]
  -[SFAirDropTransfer setTransferState:]
  -[SFAirDropTransfer isEqual:]
  -[SFAirDropTransfer setUpProgress]
  -[SFAirDropTransfer updateWithTransfer:]
  -[SFAirDropTransfer updateWithInformation:]
  -[SFAirDropTransfer setCancelAction:]
  -[SFAirDropTransfer userResponse]
  -[SFAirDropTransfer failureReason]
  -[SFAirDropTransfer selectedAction]
  -[SFAirDropTransfer initWithCoder:]


SFAppleIDClient : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler

  // instance methods
  -[SFAppleIDClient _ensureXPCStarted]
  -[SFAppleIDClient init]
  -[SFAppleIDClient dealloc]
  -[SFAppleIDClient .cxx_destruct]
  -[SFAppleIDClient ensureSyncXPCStarted]
  -[SFAppleIDClient myAccountWithCompletion:]
  -[SFAppleIDClient personInfoWithEmailOrPhone:completion:]
  -[SFAppleIDClient requestWithInfo:completion:]
  -[SFAppleIDClient statusInfoWithCompletion:]
  -[SFAppleIDClient dispatchQueue]
  -[SFAppleIDClient _copyCertificateForAppleID:withCompletion:]
  -[SFAppleIDClient _copyIdentityForAppleID:withCompletion:]
  -[SFAppleIDClient syncRemoteProxyWithError:]
  -[SFAppleIDClient _myAccountWithCompletion:]
  -[SFAppleIDClient _personInfoWithEmailOrPhone:completion:]
  -[SFAppleIDClient _ensureAuthXPCStarted]
  -[SFAppleIDClient authenticateAccountWithAppleID:password:completion:]
  -[SFAppleIDClient copyCertificateForAppleID:withCompletion:]
  -[SFAppleIDClient copyIdentityForAppleID:withCompletion:]
  -[SFAppleIDClient myAccountWithError:]
  -[SFAppleIDClient setInvalidationHandler:]
  -[SFAppleIDClient copyIdentityForAppleID:error:]
  -[SFAppleIDClient _invalidate]
  -[SFAppleIDClient setDispatchQueue:]
  -[SFAppleIDClient setInterruptionHandler:]
  -[SFAppleIDClient interruptionHandler]
  -[SFAppleIDClient _invalidated]
  -[SFAppleIDClient invalidationHandler]
  -[SFAppleIDClient _interrupted]
  -[SFAppleIDClient invalidate]


SFRemoteHotspotDevice : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL supportsCompanionLink
 @property  BOOL hasDuplicates
 @property  NSData *advertisementData
 @property  NSString *deviceName
 @property  NSString *deviceIdentifier
 @property  NSNumber *batteryLife
 @property  unsigned char networkType
 @property  NSNumber *signalStrength
 @property  NSString *model
 @property  BOOL osSupportsAutoHotspot
 @property  long long group

  // class methods
  +[SFRemoteHotspotDevice supportsSecureCoding]

  // instance methods
  -[SFRemoteHotspotDevice group]
  -[SFRemoteHotspotDevice setNetworkType:]
  -[SFRemoteHotspotDevice advertisementData]
  -[SFRemoteHotspotDevice networkType]
  -[SFRemoteHotspotDevice deviceName]
  -[SFRemoteHotspotDevice setSignalStrength:]
  -[SFRemoteHotspotDevice setGroup:]
  -[SFRemoteHotspotDevice setDeviceIdentifier:]
  -[SFRemoteHotspotDevice deviceIdentifier]
  -[SFRemoteHotspotDevice .cxx_destruct]
  -[SFRemoteHotspotDevice setModel:]
  -[SFRemoteHotspotDevice networkTypeForIncomingType:]
  -[SFRemoteHotspotDevice batteryLife]
  -[SFRemoteHotspotDevice batteryLifeFromInfo:]
  -[SFRemoteHotspotDevice networkTypeFromInfo:]
  -[SFRemoteHotspotDevice signalStrengthFromInfo:]
  -[SFRemoteHotspotDevice initWithName:identifier:advertisement:]
  -[SFRemoteHotspotDevice componentsAreEqualTo:]
  -[SFRemoteHotspotDevice updateWithHotspotInfo:]
  -[SFRemoteHotspotDevice setBatteryLife:]
  -[SFRemoteHotspotDevice osSupportsAutoHotspot]
  -[SFRemoteHotspotDevice setOsSupportsAutoHotspot:]
  -[SFRemoteHotspotDevice supportsCompanionLink]
  -[SFRemoteHotspotDevice setSupportsCompanionLink:]
  -[SFRemoteHotspotDevice hasDuplicates]
  -[SFRemoteHotspotDevice setHasDuplicates:]
  -[SFRemoteHotspotDevice encodeWithCoder:]
  -[SFRemoteHotspotDevice setDeviceName:]
  -[SFRemoteHotspotDevice isEqual:]
  -[SFRemoteHotspotDevice signalStrength]
  -[SFRemoteHotspotDevice model]
  -[SFRemoteHotspotDevice initWithCoder:]


SFRemoteHotspotSession : NSObject /usr/lib/libc++.1.dylib <SFRemoteHotspotClient, SFCompanionXPCManagerObserver>
 @property  BOOL browsing
 @property  <SFRemoteHotspotProtocol> *connectionProxy
 @property  <SFRemoteHotspotSessionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFRemoteHotspotSession init]
  -[SFRemoteHotspotSession setBrowsing:]
  -[SFRemoteHotspotSession stopBrowsing]
  -[SFRemoteHotspotSession updatedFoundDeviceList:]
  -[SFRemoteHotspotSession .cxx_destruct]
  -[SFRemoteHotspotSession connectionProxy]
  -[SFRemoteHotspotSession enableHotspotForDevice:withCompletionHandler:]
  -[SFRemoteHotspotSession xpcManagerConnectionInterrupted]
  -[SFRemoteHotspotSession setConnectionProxy:]
  -[SFRemoteHotspotSession browsing]
  -[SFRemoteHotspotSession startBrowsing]
  -[SFRemoteHotspotSession setDelegate:]
  -[SFRemoteHotspotSession enableRemoteHotspotForDevice:withCompletionHandler:]
  -[SFRemoteHotspotSession delegate]


SFAuthenticateAccountsService : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned int targetedAccountTypes
 @property  <SFAuthenticateAccountsServiceDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? progressHandler

  // instance methods
  -[SFAuthenticateAccountsService init]
  -[SFAuthenticateAccountsService activate]
  -[SFAuthenticateAccountsService .cxx_destruct]
  -[SFAuthenticateAccountsService dispatchQueue]
  -[SFAuthenticateAccountsService setProgressHandler:]
  -[SFAuthenticateAccountsService progressHandler]
  -[SFAuthenticateAccountsService _handleSessionEnded:]
  -[SFAuthenticateAccountsService _handleRequest:flags:session:responseHandler:]
  -[SFAuthenticateAccountsService _activate]
  -[SFAuthenticateAccountsService _handleInfoExchange:responseHandler:]
  -[SFAuthenticateAccountsService _handleTRCompanionAuthenticationRequest:responseHandler:]
  -[SFAuthenticateAccountsService _handleTRProxyDeviceRequest:responseHandler:]
  -[SFAuthenticateAccountsService _handleTRProxyAuthenticationRequest:responseHandler:]
  -[SFAuthenticateAccountsService _shouldSignInAccountsInInfoRequest:]
  -[SFAuthenticateAccountsService _nextServiceTypeForTRAccountServices:]
  -[SFAuthenticateAccountsService _authenticateWithServiceTypes:authResults:completion:]
  -[SFAuthenticateAccountsService _authenticateAccount:serviceType:companionDevice:anisetteDataProvider:completion:]
  -[SFAuthenticateAccountsService _saveRemoteVerifiedAccount:completion:]
  -[SFAuthenticateAccountsService _authenticateAccount:serviceType:password:completion:]
  -[SFAuthenticateAccountsService _nextTRServiceTypeForTRAccountServices:]
  -[SFAuthenticateAccountsService _accountTypeForTRAccountService:]
  -[SFAuthenticateAccountsService _authenticateiCloudWithAuthResults:completion:]
  -[SFAuthenticateAccountsService _authenticateWithServiceType:authResults:completion:]
  -[SFAuthenticateAccountsService _authenticateiTunesWithAuthResults:completion:]
  -[SFAuthenticateAccountsService _authenticateGameCenterWithAuthResults:completion:]
  -[SFAuthenticateAccountsService __runAuthenticateiCloudWithAuthResults:completion:]
  -[SFAuthenticateAccountsService targetedAccountTypes]
  -[SFAuthenticateAccountsService setTargetedAccountTypes:]
  -[SFAuthenticateAccountsService _cleanup]
  -[SFAuthenticateAccountsService _invalidate]
  -[SFAuthenticateAccountsService setDispatchQueue:]
  -[SFAuthenticateAccountsService _sfServiceStart]
  -[SFAuthenticateAccountsService setDelegate:]
  -[SFAuthenticateAccountsService invalidate]
  -[SFAuthenticateAccountsService _saveAccount:completion:]
  -[SFAuthenticateAccountsService _handleSessionStarted:]
  -[SFAuthenticateAccountsService delegate]


SFAuthenticateAccountInfo : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned int type
 @property  NSString *altDSID

  // instance methods
  -[SFAuthenticateAccountInfo altDSID]
  -[SFAuthenticateAccountInfo .cxx_destruct]
  -[SFAuthenticateAccountInfo initWithType:altDSID:]
  -[SFAuthenticateAccountInfo type]


SFAirDropTransferMetaData : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  long long transferTypes
 @property  NSSet *items
 @property  BOOL didAutoAccept
 @property  BOOL canAutoAccept
 @property  BOOL verifiableIdentity
 @property  BOOL senderIsMe
 @property  NSString *contactIdentifier
 @property  NSString *senderBundleID
 @property  NSString *senderComputerName
 @property  NSString *senderEmail
 @property  NSString *senderEmailHash
 @property  NSString *senderCompositeName
 @property  NSString *senderFirstName
 @property  NSString *senderLastName
 @property  NSString *senderID
 @property  id senderIcon
 @property  id smallPreviewImage
 @property  id previewImage
 @property  NSString *itemsDescription
 @property  NSDictionary *itemsDescriptionAdvanced
 @property  NSArray *rawFiles

  // class methods
  +[SFAirDropTransferMetaData supportsSecureCoding]

  // instance methods
  -[SFAirDropTransferMetaData setItems:]
  -[SFAirDropTransferMetaData senderID]
  -[SFAirDropTransferMetaData items]
  -[SFAirDropTransferMetaData rawFiles]
  -[SFAirDropTransferMetaData contactIdentifier]
  -[SFAirDropTransferMetaData .cxx_destruct]
  -[SFAirDropTransferMetaData initWithInformation:]
  -[SFAirDropTransferMetaData updateUsingCoder:]
  -[SFAirDropTransferMetaData canAutoAccept]
  -[SFAirDropTransferMetaData encodeWithCoder:]
  -[SFAirDropTransferMetaData didAutoAccept]
  -[SFAirDropTransferMetaData senderIsMe]
  -[SFAirDropTransferMetaData setItemsDescription:]
  -[SFAirDropTransferMetaData senderBundleID]
  -[SFAirDropTransferMetaData setDidAutoAccept:]
  -[SFAirDropTransferMetaData isVerifiableIdentity]
  -[SFAirDropTransferMetaData senderComputerName]
  -[SFAirDropTransferMetaData senderEmail]
  -[SFAirDropTransferMetaData senderEmailHash]
  -[SFAirDropTransferMetaData senderIcon]
  -[SFAirDropTransferMetaData senderCompositeName]
  -[SFAirDropTransferMetaData senderFirstName]
  -[SFAirDropTransferMetaData senderLastName]
  -[SFAirDropTransferMetaData smallPreviewImage]
  -[SFAirDropTransferMetaData itemsDescription]
  -[SFAirDropTransferMetaData itemsDescriptionAdvanced]
  -[SFAirDropTransferMetaData previewImage]
  -[SFAirDropTransferMetaData transferTypes]
  -[SFAirDropTransferMetaData setTransferTypes:]
  -[SFAirDropTransferMetaData isEqual:]
  -[SFAirDropTransferMetaData initWithCoder:]


SFActivityAdvertisement : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  long long advertisementVersion
 @property  NSData *advertisementPayload
 @property  NSDictionary *options
 @property  SFPeerDevice *device

  // class methods
  +[SFActivityAdvertisement supportsSecureCoding]

  // instance methods
  -[SFActivityAdvertisement device]
  -[SFActivityAdvertisement .cxx_destruct]
  -[SFActivityAdvertisement options]
  -[SFActivityAdvertisement encodeWithCoder:]
  -[SFActivityAdvertisement initWithAdvertisementVersion:advertisementPayload:options:device:]
  -[SFActivityAdvertisement advertisementVersion]
  -[SFActivityAdvertisement advertisementPayload]
  -[SFActivityAdvertisement initWithCoder:]


SFContinuityScanManager : SFXPCClient <SFContinuityScannerClient>
 @property  NSMutableSet *foundDevices
 @property  NSHashTable *observers
 @property  unsigned long scanTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFContinuityScanManager sharedManager]

  // instance methods
  -[SFContinuityScanManager scanForTypes:]
  -[SFContinuityScanManager init]
  -[SFContinuityScanManager scanTypes]
  -[SFContinuityScanManager setScanTypes:]
  -[SFContinuityScanManager setObservers:]
  -[SFContinuityScanManager onqueue_connectionEstablished]
  -[SFContinuityScanManager onqueue_connectionInterrupted]
  -[SFContinuityScanManager foundDeviceWithDevice:]
  -[SFContinuityScanManager .cxx_destruct]
  -[SFContinuityScanManager remoteObjectInterface]
  -[SFContinuityScanManager exportedInterface]
  -[SFContinuityScanManager foundDevices]
  -[SFContinuityScanManager observers]
  -[SFContinuityScanManager _getRemoteObjectProxyOnQueue:]
  -[SFContinuityScanManager pairedDevicesChanged:]
  -[SFContinuityScanManager receivedAdvertisement:]
  -[SFContinuityScanManager machServiceName]
  -[SFContinuityScanManager removeObserver:]
  -[SFContinuityScanManager addObserver:]
  -[SFContinuityScanManager lostDeviceWithDevice:]
  -[SFContinuityScanManager setFoundDevices:]
  -[SFContinuityScanManager activityPayloadFromDeviceUniqueID:forAdvertisementPayload:command:timeout:withCompletionHandler:]
  -[SFContinuityScanManager shouldEscapeXpcTryCatch]


SFActivityScanner : NSObject /usr/lib/libc++.1.dylib <SFContinuityScanManagerObserver>
 @property  NSUUID *identifier
 @property  <SFActivityScannerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFActivityScanner initWithDelegate:]
  -[SFActivityScanner scanForTypes:]
  -[SFActivityScanner init]
  -[SFActivityScanner dealloc]
  -[SFActivityScanner .cxx_destruct]
  -[SFActivityScanner scanManager:foundDeviceWithDevice:]
  -[SFActivityScanner scanManager:lostDeviceWithDevice:]
  -[SFActivityScanner setIdentifier:]
  -[SFActivityScanner identifier]
  -[SFActivityScanner scanManager:receivedAdvertisement:]
  -[SFActivityScanner scanManager:pairedDevicesChanged:]
  -[SFActivityScanner activityPayloadFromDevice:forAdvertisementPayload:command:timeout:withCompletionHandler:]
  -[SFActivityScanner delegate]


SFCompanionAdvertiser : NSObject /usr/lib/libc++.1.dylib
 @property  <SFCompanionAdvertiserDelegate> *delegate
 @property  BOOL supportsStreams
 @property  NSString *serviceType
 @property  NSData *serviceEndpointData

  // instance methods
  -[SFCompanionAdvertiser initWithServiceType:]
  -[SFCompanionAdvertiser dealloc]
  -[SFCompanionAdvertiser .cxx_destruct]
  -[SFCompanionAdvertiser serviceType]
  -[SFCompanionAdvertiser supportsStreams]
  -[SFCompanionAdvertiser stop]
  -[SFCompanionAdvertiser setSupportsStreams:]
  -[SFCompanionAdvertiser serviceEndpointData]
  -[SFCompanionAdvertiser getContinuationStreamsWithEndpointData:completionHandler:]
  -[SFCompanionAdvertiser setDelegate:]
  -[SFCompanionAdvertiser delegate]
  -[SFCompanionAdvertiser start]


SFRemoteAutoFillService : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL needsSetup
 @property  BOOL unitTesting
 @property  NSArray *associatedDomains
 @property  NSString *bundleID
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *fixedPIN
 @property  NSString *localizedAppName
 @property  NSString *unlocalizedAppName
 @property  NSString *urlString
 @property  @? errorHandler
 @property  @? hidePINHandler
 @property  @? receivedCredentialsHandler
 @property  @? sessionStartedHandler
 @property  @? sessionEndedHandler
 @property  @? showPINHandlerEx
 @property  unsigned long discoveredDevices
 @property  @? discoveredDevicesChanged
 @property  @? urlForVisualScanningChanged

  // instance methods
  -[SFRemoteAutoFillService setUnitTesting:]
  -[SFRemoteAutoFillService _activateWithCompletion:]
  -[SFRemoteAutoFillService fixedPIN]
  -[SFRemoteAutoFillService unitTesting]
  -[SFRemoteAutoFillService setShowPINHandlerEx:]
  -[SFRemoteAutoFillService needsSetup]
  -[SFRemoteAutoFillService setBundleID:]
  -[SFRemoteAutoFillService hidePINHandler]
  -[SFRemoteAutoFillService init]
  -[SFRemoteAutoFillService _activated]
  -[SFRemoteAutoFillService errorHandler]
  -[SFRemoteAutoFillService dealloc]
  -[SFRemoteAutoFillService setErrorHandler:]
  -[SFRemoteAutoFillService discoveredDevices]
  -[SFRemoteAutoFillService .cxx_destruct]
  -[SFRemoteAutoFillService dispatchQueue]
  -[SFRemoteAutoFillService setUrlString:]
  -[SFRemoteAutoFillService showPINHandlerEx]
  -[SFRemoteAutoFillService urlString]
  -[SFRemoteAutoFillService _cleanup]
  -[SFRemoteAutoFillService _systemMonitorStart]
  -[SFRemoteAutoFillService _serviceStart]
  -[SFRemoteAutoFillService _discoveryStart]
  -[SFRemoteAutoFillService _discoveryFound:]
  -[SFRemoteAutoFillService _readyForAutoFillRequest]
  -[SFRemoteAutoFillService updateURLForVisualScanning]
  -[SFRemoteAutoFillService _discoveryLost:]
  -[SFRemoteAutoFillService _discoveryChanged:]
  -[SFRemoteAutoFillService _completedWithError:]
  -[SFRemoteAutoFillService _serviceHidePIN]
  -[SFRemoteAutoFillService _serviceHandleReceivedRequest:handler:]
  -[SFRemoteAutoFillService unlocalizedAppName]
  -[SFRemoteAutoFillService _serviceSessionStarted:]
  -[SFRemoteAutoFillService _serviceSessionEnded:withError:]
  -[SFRemoteAutoFillService _serviceHandleReceivedContextRequest:handler:]
  -[SFRemoteAutoFillService _serviceHandleReceivedCredentialRequest:handler:]
  -[SFRemoteAutoFillService _bluetoothAddressChanged]
  -[SFRemoteAutoFillService localizedAppName]
  -[SFRemoteAutoFillService setDispatchQueue:]
  -[SFRemoteAutoFillService startRequestingAutoFill]
  -[SFRemoteAutoFillService stopRequestingAutoFill]
  -[SFRemoteAutoFillService urlForVisualScanning]
  -[SFRemoteAutoFillService setUnlocalizedAppName:]
  -[SFRemoteAutoFillService receivedCredentialsHandler]
  -[SFRemoteAutoFillService setReceivedCredentialsHandler:]
  -[SFRemoteAutoFillService discoveredDevicesChanged]
  -[SFRemoteAutoFillService setDiscoveredDevicesChanged:]
  -[SFRemoteAutoFillService urlForVisualScanningChanged]
  -[SFRemoteAutoFillService setUrlForVisualScanningChanged:]
  -[SFRemoteAutoFillService setHidePINHandler:]
  -[SFRemoteAutoFillService sessionStartedHandler]
  -[SFRemoteAutoFillService setSessionEndedHandler:]
  -[SFRemoteAutoFillService setSessionStartedHandler:]
  -[SFRemoteAutoFillService associatedDomains]
  -[SFRemoteAutoFillService invalidate]
  -[SFRemoteAutoFillService activateWithCompletion:]
  -[SFRemoteAutoFillService sessionEndedHandler]
  -[SFRemoteAutoFillService setFixedPIN:]
  -[SFRemoteAutoFillService bundleID]
  -[SFRemoteAutoFillService setLocalizedAppName:]
  -[SFRemoteAutoFillService setAssociatedDomains:]


SFRemoteAutoFillScanAction : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *message
 @property  NSString *title
 @property  NSURL *url

  // class methods
  +[SFRemoteAutoFillScanAction actionForURL:completion:]

  // instance methods
  -[SFRemoteAutoFillScanAction message]
  -[SFRemoteAutoFillScanAction url]
  -[SFRemoteAutoFillScanAction setMessage:]
  -[SFRemoteAutoFillScanAction .cxx_destruct]
  -[SFRemoteAutoFillScanAction setTitle:]
  -[SFRemoteAutoFillScanAction setUrl:]
  -[SFRemoteAutoFillScanAction title]
  -[SFRemoteAutoFillScanAction performWithCompletion:]


SFCompanionXPCManager : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *xpcSetupQueue
 @property  int listenerResumedToken
 @property  BOOL interrupted
 @property  NSXPCConnection *connection
 @property  NSMutableArray *observers
 @property  BOOL invalid

  // class methods
  +[SFCompanionXPCManager initialize]
  +[SFCompanionXPCManager hotspotInterface]
  +[SFCompanionXPCManager xpcManagerInterface]
  +[SFCompanionXPCManager serviceManagerClientInterface]
  +[SFCompanionXPCManager unlockInterface]
  +[SFCompanionXPCManager serviceManagerInterface]
  +[SFCompanionXPCManager hotspotClientInterface]
  +[SFCompanionXPCManager sharedManager]

  // instance methods
  -[SFCompanionXPCManager remoteHotspotSessionForClient:withCompletionHandler:]
  -[SFCompanionXPCManager setInterrupted:]
  -[SFCompanionXPCManager isInvalid]
  -[SFCompanionXPCManager unregisterObserver:]
  -[SFCompanionXPCManager init]
  -[SFCompanionXPCManager registerObserver:]
  -[SFCompanionXPCManager setObservers:]
  -[SFCompanionXPCManager setupConnection]
  -[SFCompanionXPCManager listenerResumedToken]
  -[SFCompanionXPCManager dealloc]
  -[SFCompanionXPCManager .cxx_destruct]
  -[SFCompanionXPCManager xpcSetupQueue]
  -[SFCompanionXPCManager serviceManagerProxyForIdentifier:client:withCompletionHandler:]
  -[SFCompanionXPCManager setConnection:]
  -[SFCompanionXPCManager setXpcSetupQueue:]
  -[SFCompanionXPCManager observers]
  -[SFCompanionXPCManager appleAccountSignedIn]
  -[SFCompanionXPCManager streamsForMessage:withCompletionHandler:]
  -[SFCompanionXPCManager unlockManagerWithCompletionHandler:]
  -[SFCompanionXPCManager notifyOfResume]
  -[SFCompanionXPCManager notifyOfInvalidation]
  -[SFCompanionXPCManager setInvalid:]
  -[SFCompanionXPCManager setListenerResumedToken:]
  -[SFCompanionXPCManager connection]
  -[SFCompanionXPCManager notifyOfInterruption]
  -[SFCompanionXPCManager interrupted]
  -[SFCompanionXPCManager appleAccountSignedOut]


SFProxCardSessionClient : NSObject /usr/lib/libc++.1.dylib <NSXPCListenerDelegate, SBSRemoteAlertHandleObserver, SFProxCardXPCClientInterface>
 @property  <SFProxCardXPCClientInterface> *delegate
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  NSDictionary *userInfo
 @property  NSString *viewControllerClassName
 @property  NSString *viewServiceName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFProxCardSessionClient _activateWithCompletion:]
  -[SFProxCardSessionClient remoteAlertHandleDidActivate:]
  -[SFProxCardSessionClient init]
  -[SFProxCardSessionClient setUserInfo:]
  -[SFProxCardSessionClient errorHandler]
  -[SFProxCardSessionClient setViewControllerClassName:]
  -[SFProxCardSessionClient dealloc]
  -[SFProxCardSessionClient setErrorHandler:]
  -[SFProxCardSessionClient .cxx_destruct]
  -[SFProxCardSessionClient dispatchQueue]
  -[SFProxCardSessionClient label]
  -[SFProxCardSessionClient setInvalidationHandler:]
  -[SFProxCardSessionClient _invalidate]
  -[SFProxCardSessionClient _reportError:]
  -[SFProxCardSessionClient listener:shouldAcceptNewConnection:]
  -[SFProxCardSessionClient setDispatchQueue:]
  -[SFProxCardSessionClient _xpcCheckinTimerFired]
  -[SFProxCardSessionClient xpcCheckinWithCompletion:]
  -[SFProxCardSessionClient viewServiceName]
  -[SFProxCardSessionClient setViewServiceName:]
  -[SFProxCardSessionClient xpcPerformAction:completion:]
  -[SFProxCardSessionClient userInfo]
  -[SFProxCardSessionClient remoteAlertHandle:didInvalidateWithError:]
  -[SFProxCardSessionClient setLabel:]
  -[SFProxCardSessionClient _invalidated]
  -[SFProxCardSessionClient setDelegate:]
  -[SFProxCardSessionClient viewControllerClassName]
  -[SFProxCardSessionClient invalidationHandler]
  -[SFProxCardSessionClient invalidate]
  -[SFProxCardSessionClient remoteAlertHandleDidDeactivate:]
  -[SFProxCardSessionClient activateWithCompletion:]
  -[SFProxCardSessionClient delegate]
  -[SFProxCardSessionClient _xpcConnectionInvalidated:]


SFBLERecorder : NSObject /usr/lib/libc++.1.dylib
 @property  long long payloadType
 @property  <SFBLERecorderReplayDelegate> *replayDelegate

  // instance methods
  -[SFBLERecorder .cxx_destruct]
  -[SFBLERecorder payloadType]
  -[SFBLERecorder replayDelegate]
  -[SFBLERecorder initWithPayloadType:]
  -[SFBLERecorder initWithRecordingURL:]
  -[SFBLERecorder recordDevice:data:rssi:info:error:]
  -[SFBLERecorder replayNextRecording]
  -[SFBLERecorder setReplayDelegate:]
  -[SFBLERecorder saveToDirectory:]


SFAnnounceMessagesEvent : NSObject /usr/lib/libc++.1.dylib <SFCoreAnalyticsEvent>
 @property  BOOL allowsSiriWhenLocked
 @property  BOOL announceMessagesAlreadyEnabled
 @property  long long pairingExitView
 @property  BOOL skippedTutorialCards
 @property  BOOL userAutomaticallyEnrolled
 @property  BOOL userExplicitlyOptedIn
 @property  BOOL userExplicitlyOptedOut
 @property  NSDictionary *eventPayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFAnnounceMessagesEvent eventName]
  +[SFAnnounceMessagesEvent stringForExitView:]

  // instance methods
  -[SFAnnounceMessagesEvent eventPayload]
  -[SFAnnounceMessagesEvent allowsSiriWhenLocked]
  -[SFAnnounceMessagesEvent announceMessagesAlreadyEnabled]
  -[SFAnnounceMessagesEvent pairingExitView]
  -[SFAnnounceMessagesEvent skippedTutorialCards]
  -[SFAnnounceMessagesEvent userAutomaticallyEnrolled]
  -[SFAnnounceMessagesEvent userExplicitlyOptedIn]
  -[SFAnnounceMessagesEvent userExplicitlyOptedOut]
  -[SFAnnounceMessagesEvent submitEvent]
  -[SFAnnounceMessagesEvent setAllowsSiriWhenLocked:]
  -[SFAnnounceMessagesEvent setAnnounceMessagesAlreadyEnabled:]
  -[SFAnnounceMessagesEvent setPairingExitView:]
  -[SFAnnounceMessagesEvent setSkippedTutorialCards:]
  -[SFAnnounceMessagesEvent setUserAutomaticallyEnrolled:]
  -[SFAnnounceMessagesEvent setUserExplicitlyOptedIn:]
  -[SFAnnounceMessagesEvent setUserExplicitlyOptedOut:]


SFCompanionManager : NSObject /usr/lib/libc++.1.dylib <SFCompanionServiceManagerClient, SFCompanionXPCManagerObserver>
 @property  NSString *identifier
 @property  <SFCompanionServiceManagerProtocol> *managerProxy
 @property  NSString *deviceID
 @property  NSString *deviceIP
 @property  NSString *deviceName
 @property  NSMutableDictionary *services
 @property  NSMutableDictionary *streamHandlers
 @property  NSObject<OS_dispatch_queue> *serviceIdentifierQueue
 @property  NSObject<OS_dispatch_semaphore> *managerSemaphore
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFCompanionManager serviceManager]

  // instance methods
  -[SFCompanionManager services]
  -[SFCompanionManager deviceName]
  -[SFCompanionManager setDeviceID:]
  -[SFCompanionManager init]
  -[SFCompanionManager setServices:]
  -[SFCompanionManager serviceForIdentifier:]
  -[SFCompanionManager dealloc]
  -[SFCompanionManager .cxx_destruct]
  -[SFCompanionManager xpcManagerDidInvalidate:]
  -[SFCompanionManager setIdentifier:]
  -[SFCompanionManager deviceIP]
  -[SFCompanionManager identifier]
  -[SFCompanionManager streamDataForIdentifier:]
  -[SFCompanionManager getStreamsForData:withStreamHandler:]
  -[SFCompanionManager supportStreamsWithIdentifier:withStreamHandler:]
  -[SFCompanionManager disableStreamSupportForIdentifier:]
  -[SFCompanionManager deviceID]
  -[SFCompanionManager streamToService:withFileHandle:acceptReply:]
  -[SFCompanionManager xpcManagerConnectionInterrupted]
  -[SFCompanionManager managerProxy]
  -[SFCompanionManager retrieveManagerProxy]
  -[SFCompanionManager signalSemaphore]
  -[SFCompanionManager serviceIdentifierQueue]
  -[SFCompanionManager setServiceIdentifierQueue:]
  -[SFCompanionManager setManagerProxy:]
  -[SFCompanionManager setDeviceIP:]
  -[SFCompanionManager streamsFromFileHandle:withCompletionHandler:]
  -[SFCompanionManager streamHandlers]
  -[SFCompanionManager setStreamHandlers:]
  -[SFCompanionManager managerSemaphore]
  -[SFCompanionManager setManagerSemaphore:]
  -[SFCompanionManager setDeviceName:]


SFRemoteHotspotInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *name
 @property  NSString *password
 @property  NSNumber *channel

  // class methods
  +[SFRemoteHotspotInfo supportsSecureCoding]

  // instance methods
  -[SFRemoteHotspotInfo password]
  -[SFRemoteHotspotInfo channel]
  -[SFRemoteHotspotInfo setPassword:]
  -[SFRemoteHotspotInfo setChannel:]
  -[SFRemoteHotspotInfo .cxx_destruct]
  -[SFRemoteHotspotInfo name]
  -[SFRemoteHotspotInfo encodeWithCoder:]
  -[SFRemoteHotspotInfo initWithName:password:channel:]
  -[SFRemoteHotspotInfo setName:]
  -[SFRemoteHotspotInfo initWithCoder:]


SFAirDropAction : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *transferIdentifier
 @property  unsigned long minRequiredTransferState
 @property  unsigned long maxTransferState
 @property  BOOL requiresUnlockedUI
 @property  BOOL shouldUpdateUserResponse
 @property  NSString *localizedTitle
 @property  NSString *singleItemLocalizedTitle
 @property  @? actionHandler
 @property  NSString *actionIdentifier

  // class methods
  +[SFAirDropAction supportsSecureCoding]

  // instance methods
  -[SFAirDropAction actionHandler]
  -[SFAirDropAction setActionHandler:]
  -[SFAirDropAction .cxx_destruct]
  -[SFAirDropAction actionIdentifier]
  -[SFAirDropAction localizedTitle]
  -[SFAirDropAction triggerAction]
  -[SFAirDropAction encodeWithCoder:]
  -[SFAirDropAction setLocalizedTitle:]
  -[SFAirDropAction initWithTransferIdentifier:actionIdentifier:title:singleItemTitle:]
  -[SFAirDropAction singleItemLocalizedTitle]
  -[SFAirDropAction setSingleItemLocalizedTitle:]
  -[SFAirDropAction minRequiredTransferState]
  -[SFAirDropAction setMinRequiredTransferState:]
  -[SFAirDropAction maxTransferState]
  -[SFAirDropAction setMaxTransferState:]
  -[SFAirDropAction requiresUnlockedUI]
  -[SFAirDropAction setRequiresUnlockedUI:]
  -[SFAirDropAction shouldUpdateUserResponse]
  -[SFAirDropAction setShouldUpdateUserResponse:]
  -[SFAirDropAction isEqual:]
  -[SFAirDropAction transferIdentifier]
  -[SFAirDropAction initWithCoder:]


SFDefaults : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[SFDefaults siriNotificationsPrompted]
  +[SFDefaults setSiriNotificationsPrompted:]


SFPasswordSharingSession : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *deviceName
 @property  NSString *hashedEmail
 @property  NSString *hashedPhone
 @property  NSString *hotspotPSK
 @property  SFDevice *peerDevice
 @property  @? progressHandler
 @property  @? promptForPINHandler

  // instance methods
  -[SFPasswordSharingSession _run]
  -[SFPasswordSharingSession deviceName]
  -[SFPasswordSharingSession init]
  -[SFPasswordSharingSession promptForPINHandler]
  -[SFPasswordSharingSession setPromptForPINHandler:]
  -[SFPasswordSharingSession activate]
  -[SFPasswordSharingSession setPeerDevice:]
  -[SFPasswordSharingSession dealloc]
  -[SFPasswordSharingSession .cxx_destruct]
  -[SFPasswordSharingSession dispatchQueue]
  -[SFPasswordSharingSession setProgressHandler:]
  -[SFPasswordSharingSession progressHandler]
  -[SFPasswordSharingSession tryPIN:]
  -[SFPasswordSharingSession _runPair]
  -[SFPasswordSharingSession _cleanup]
  -[SFPasswordSharingSession _completedWithError:]
  -[SFPasswordSharingSession setDispatchQueue:]
  -[SFPasswordSharingSession hotspotPSK]
  -[SFPasswordSharingSession _runSFSessionStart]
  -[SFPasswordSharingSession _runPasswordShare]
  -[SFPasswordSharingSession setDeviceName:]
  -[SFPasswordSharingSession _receivedObject:flags:]
  -[SFPasswordSharingSession _runPasswordShareSendInfo]
  -[SFPasswordSharingSession _runPasswordShareReceiveResponse:]
  -[SFPasswordSharingSession hashedEmail]
  -[SFPasswordSharingSession setHashedEmail:]
  -[SFPasswordSharingSession hashedPhone]
  -[SFPasswordSharingSession setHashedPhone:]
  -[SFPasswordSharingSession setHotspotPSK:]
  -[SFPasswordSharingSession peerDevice]
  -[SFPasswordSharingSession invalidate]


SFAuthenticateAccountsSession : NSObject /usr/lib/libc++.1.dylib <AAUIGenericTermsRemoteUIDelegate>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFDevice *peerDevice
 @property  UIViewController *presentingViewController
 @property  @? progressHandler
 @property  @? promptForPINHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAuthenticateAccountsSession _run]
  -[SFAuthenticateAccountsSession init]
  -[SFAuthenticateAccountsSession pairSetupTryPIN:]
  -[SFAuthenticateAccountsSession promptForPINHandler]
  -[SFAuthenticateAccountsSession setPromptForPINHandler:]
  -[SFAuthenticateAccountsSession activate]
  -[SFAuthenticateAccountsSession setPeerDevice:]
  -[SFAuthenticateAccountsSession dealloc]
  -[SFAuthenticateAccountsSession setPresentingViewController:]
  -[SFAuthenticateAccountsSession presentingViewController]
  -[SFAuthenticateAccountsSession .cxx_destruct]
  -[SFAuthenticateAccountsSession dispatchQueue]
  -[SFAuthenticateAccountsSession setProgressHandler:]
  -[SFAuthenticateAccountsSession progressHandler]
  -[SFAuthenticateAccountsSession _cleanup]
  -[SFAuthenticateAccountsSession _reportError:]
  -[SFAuthenticateAccountsSession setDispatchQueue:]
  -[SFAuthenticateAccountsSession _runSFSessionStart]
  -[SFAuthenticateAccountsSession _validateAccounts]
  -[SFAuthenticateAccountsSession _validateiCloudAccountTerms]
  -[SFAuthenticateAccountsSession _runPairVerify]
  -[SFAuthenticateAccountsSession _runPairSetup]
  -[SFAuthenticateAccountsSession _runInfoExchange]
  -[SFAuthenticateAccountsSession _runTRSessionStart]
  -[SFAuthenticateAccountsSession _runTRAuthentication]
  -[SFAuthenticateAccountsSession _handleShowTermsUI:responseHandler:]
  -[SFAuthenticateAccountsSession _runInfoExchangeRequest]
  -[SFAuthenticateAccountsSession _availableAccountsToSignIn]
  -[SFAuthenticateAccountsSession _runInfoExchangeResponse:error:]
  -[SFAuthenticateAccountsSession _trTargetedServices]
  -[SFAuthenticateAccountsSession _presentiCloudTermsUIWithAccount:]
  -[SFAuthenticateAccountsSession genericTermsRemoteUI:didFinishWithSuccess:]
  -[SFAuthenticateAccountsSession __runFinishWithSFSession:]
  -[SFAuthenticateAccountsSession __validateAccountsWithAccountStore:]
  -[SFAuthenticateAccountsSession peerDevice]
  -[SFAuthenticateAccountsSession _runFinish]
  -[SFAuthenticateAccountsSession invalidate]


SFUnlockState : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSNumber *unlockEnabled
 @property  NSNumber *remotePasscodeEnabled

  // class methods
  +[SFUnlockState supportsSecureCoding]

  // instance methods
  -[SFUnlockState .cxx_destruct]
  -[SFUnlockState encodeWithCoder:]
  -[SFUnlockState remotePasscodeEnabled]
  -[SFUnlockState initWithUnlockEnabled:remotePasscodeEnabled:]
  -[SFUnlockState initWithCoder:]
  -[SFUnlockState unlockEnabled]


SFCompanionService : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  NSString *deviceID
 @property  NSString *deviceName
 @property  NSString *serviceType
 @property  NSString *managerID
 @property  NSString *ipAddress
 @property  NSString *identifier
 @property  NSNumber *nsxpcVersion

  // class methods
  +[SFCompanionService supportsSecureCoding]
  +[SFCompanionService serviceFromDictionary:]
  +[SFCompanionService serviceFromAuthorData:]

  // instance methods
  -[SFCompanionService copyWithZone:]
  -[SFCompanionService deviceName]
  -[SFCompanionService initWithServiceName:]
  -[SFCompanionService setDeviceID:]
  -[SFCompanionService setServiceType:]
  -[SFCompanionService .cxx_destruct]
  -[SFCompanionService serviceType]
  -[SFCompanionService setIdentifier:]
  -[SFCompanionService encodeWithCoder:]
  -[SFCompanionService identifier]
  -[SFCompanionService deviceID]
  -[SFCompanionService setManagerID:]
  -[SFCompanionService setDeviceName:]
  -[SFCompanionService nsxpcVersion]
  -[SFCompanionService isEqualToService:]
  -[SFCompanionService setNsxpcVersion:]
  -[SFCompanionService isEqual:]
  -[SFCompanionService ipAddress]
  -[SFCompanionService setIpAddress:]
  -[SFCompanionService initWithCoder:]
  -[SFCompanionService managerID]
  -[SFCompanionService messageData]


SFAccountManager : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[SFAccountManager appleAccountSignedIn]
  +[SFAccountManager appleAccountSignedOut]


SFAirDropClassroomTransferManager : SFXPCClient <SFAirDropClassroomTransferManagerProtocol>
 @property  <SFAirDropClassroomTransferDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAirDropClassroomTransferManager activate]
  -[SFAirDropClassroomTransferManager .cxx_destruct]
  -[SFAirDropClassroomTransferManager remoteObjectInterface]
  -[SFAirDropClassroomTransferManager exportedInterface]
  -[SFAirDropClassroomTransferManager _getRemoteObjectProxyOnQueue:]
  -[SFAirDropClassroomTransferManager machServiceName]
  -[SFAirDropClassroomTransferManager setDelegate:]
  -[SFAirDropClassroomTransferManager invalidate]
  -[SFAirDropClassroomTransferManager transferWithIdentifierWasAccepted:]
  -[SFAirDropClassroomTransferManager transferWithIdentifierWasDeclined:withFailureReason:]
  -[SFAirDropClassroomTransferManager delegate]
  -[SFAirDropClassroomTransferManager updateTransferWithIdentifier:withState:information:completionHandler:]
  -[SFAirDropClassroomTransferManager shouldEscapeXpcTryCatch]


SFXPCClient : NSObject /usr/lib/libc++.1.dylib <NSXPCConnectionDelegate>
 @property  NSXPCConnection *connection
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFXPCClient getRemoteObjectProxyOnQueue:]
  -[SFXPCClient onqueue_ensureConnectionEstablished]
  -[SFXPCClient init]
  -[SFXPCClient onqueue_connectionEstablished]
  -[SFXPCClient onqueue_connectionInterrupted]
  -[SFXPCClient connection:handleInvocation:isReply:]
  -[SFXPCClient dealloc]
  -[SFXPCClient .cxx_destruct]
  -[SFXPCClient dispatchQueue]
  -[SFXPCClient remoteObjectInterface]
  -[SFXPCClient exportedInterface]
  -[SFXPCClient _activate]
  -[SFXPCClient setConnection:]
  -[SFXPCClient _invalidate]
  -[SFXPCClient invalidated]
  -[SFXPCClient setDispatchQueue:]
  -[SFXPCClient onqueue_getRemoteObjectProxyOnQueue:]
  -[SFXPCClient onqueue_interrupted]
  -[SFXPCClient machServiceName]
  -[SFXPCClient onqueue_ensureXPCStarted]
  -[SFXPCClient connectionEstablished]
  -[SFXPCClient onqueue_activate]
  -[SFXPCClient onqueue_invalidated]
  -[SFXPCClient connection]
  -[SFXPCClient onqueue_invalidate]
  -[SFXPCClient onqueue_connectionInvalidated]
  -[SFXPCClient shouldEscapeXpcTryCatch]
  -[SFXPCClient interrupted]


SFDeviceQueryParameters : NSObject /usr/lib/libc++.1.dylib
 @property  MAAssetQuery *maQuery
 @property  BOOL installedOnly
 @property  BOOL imperfectMatch
 @property  BOOL fallback
 @property  NSString *queryType

  // instance methods
  -[SFDeviceQueryParameters installedOnly]
  -[SFDeviceQueryParameters maQuery]
  -[SFDeviceQueryParameters fallback]
  -[SFDeviceQueryParameters .cxx_destruct]
  -[SFDeviceQueryParameters imperfectMatch]
  -[SFDeviceQueryParameters initWithDeviceAssetQuery:installedOnly:imperfectMatch:fallback:]
  -[SFDeviceQueryParameters maAssetQueryDescription]
  -[SFDeviceQueryParameters isEqual:]
  -[SFDeviceQueryParameters queryType]


SFDeviceAssetTask : NSObject /usr/lib/libc++.1.dylib
 @property  SFDeviceAssetQuery *deviceAssetQuery
 @property  SFDeviceAssetRequestConfiguration *configuration
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL useProcessLocalCache
 @property  NSMutableArray *deviceQueryParameters
 @property  NSObject<OS_dispatch_source> *timer
 @property  NSBundle *matchBundle
 @property  NSBundle *imperfectMatchBundle
 @property  NSBundle *fallbackBundle
 @property  NSBundle *cachedBundle
 @property  NSError *error
 @property  BOOL queryResultCalled
 @property  BOOL downloadCompletionCalled

  // instance methods
  -[SFDeviceAssetTask timer]
  -[SFDeviceAssetTask .cxx_destruct]
  -[SFDeviceAssetTask dispatchQueue]
  -[SFDeviceAssetTask useProcessLocalCache]
  -[SFDeviceAssetTask error]
  -[SFDeviceAssetTask deviceAssetQuery]
  -[SFDeviceAssetTask completeIfPossible]
  -[SFDeviceAssetTask createQueryParameters]
  -[SFDeviceAssetTask completeWithBundle:isFallback:isCached:]
  -[SFDeviceAssetTask bundleURLFromAssetURL:]
  -[SFDeviceAssetTask updateTaskWithAssetBundleURL:error:isFallback:isImperfectMatch:isCached:]
  -[SFDeviceAssetTask bundleAtURL:error:]
  -[SFDeviceAssetTask matchBundle]
  -[SFDeviceAssetTask fallbackBundle]
  -[SFDeviceAssetTask updateTaskWithBundle:error:isFallback:isImperfectMatch:isCached:]
  -[SFDeviceAssetTask imperfectMatchBundle]
  -[SFDeviceAssetTask cachedBundle]
  -[SFDeviceAssetTask queryResultCalled]
  -[SFDeviceAssetTask setQueryResultCalled:]
  -[SFDeviceAssetTask cancelTimeout]
  -[SFDeviceAssetTask downloadCompletionCalled]
  -[SFDeviceAssetTask initWithDeviceQuery:requestConfiguration:dispatchQueue:useProcessLocalCache:]
  -[SFDeviceAssetTask deviceQueryParameters]
  -[SFDeviceAssetTask setDownloadCompletionCalled:]
  -[SFDeviceAssetTask updateTaskWithAssetURL:error:isFallback:isImperfectMatch:isCached:]
  -[SFDeviceAssetTask configuration]


SFDeviceAssetManager : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *networkStatus
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL useProcessLocalCache

  // instance methods
  -[SFDeviceAssetManager getAssetBundleForDeviceQuery:withRequestConfiguration:]
  -[SFDeviceAssetManager clearQueryResultFromLocalCache:]
  -[SFDeviceAssetManager onqueue_mappedProductTypeForProductType:]
  -[SFDeviceAssetManager purgeAssetsMatchingQuery:]
  -[SFDeviceAssetManager localCacheWithFileName:]
  -[SFDeviceAssetManager cacheDirectory]
  -[SFDeviceAssetManager init]
  -[SFDeviceAssetManager activate]
  -[SFDeviceAssetManager onqueue_updateMetaDataWithCompletionHandler:]
  -[SFDeviceAssetManager onqueue_executeNextMAQueryForTask:]
  -[SFDeviceAssetManager onqueue_sharingManagementAsset]
  -[SFDeviceAssetManager pathInLocalCache:]
  -[SFDeviceAssetManager .cxx_destruct]
  -[SFDeviceAssetManager logNetworkStatus]
  -[SFDeviceAssetManager dispatchQueue]
  -[SFDeviceAssetManager locallyCachedQueryResults]
  -[SFDeviceAssetManager onqueue_validateProductTypeInQuery:]
  -[SFDeviceAssetManager canUseMobileAssetSPI]
  -[SFDeviceAssetManager useProcessLocalCache]
  -[SFDeviceAssetManager setUseProcessLocalCache:]
  -[SFDeviceAssetManager locallyCachedProductMappings]
  -[SFDeviceAssetManager hardcodedMappedProducts]
  -[SFDeviceAssetManager setDispatchQueue:]
  -[SFDeviceAssetManager onqueue_findAssetBundleForAssetQuery:ucat:queryType:fallback:retryAttempt:withCompletionHandler:]
  -[SFDeviceAssetManager addQueryResultToLocalCache:url:isFallback:]
  -[SFDeviceAssetManager mappedProductTypeForProductType:completionHandler:]
  -[SFDeviceAssetManager onqueue_getAssetBundleForDeviceQuery:withRequestConfiguration:]
  -[SFDeviceAssetManager onqueue_assetMappedProductTypeForProductType:]
  -[SFDeviceAssetManager onqueue_variantsMatchingQuery:completionHandler:]
  -[SFDeviceAssetManager setNetworkStatus:]
  -[SFDeviceAssetManager storeEntries:inLocalCacheWithFileName:]
  -[SFDeviceAssetManager networkStatus]
  -[SFDeviceAssetManager onqueue_downloadAsset:ucat:queryLogString:withCompletionHandler:]
  -[SFDeviceAssetManager onqueue_activate]
  -[SFDeviceAssetManager onqueue_manuallyFindFallbackAssetBundleMatchingQuery:withCompletionHandler:]
  -[SFDeviceAssetManager onqueue_getCachedAssetBundleForTask:]
  -[SFDeviceAssetManager invalidate]
  -[SFDeviceAssetManager onqueue_invalidate]
  -[SFDeviceAssetManager onqueue_updateSharingManagementAssetIfNecessary]
  -[SFDeviceAssetManager onqueue_purgeAssetsMatchingQuery:]
  -[SFDeviceAssetManager storeProductMappingsInLocalCache:]
  -[SFDeviceAssetManager variantsMatchingQuery:completionHandler:]


SFPowerSourceMonitor : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned int changeFlags
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL skipCoalescing
 @property  @? invalidationHandler
 @property  @? powerSourcesFoundHandler
 @property  @? powerSourcesLostHandler
 @property  @? powerSourcesChangedHandler

  // instance methods
  -[SFPowerSourceMonitor init]
  -[SFPowerSourceMonitor setChangeFlags:]
  -[SFPowerSourceMonitor setPowerSourcesChangedHandler:]
  -[SFPowerSourceMonitor dealloc]
  -[SFPowerSourceMonitor powerSourcesFoundHandler]
  -[SFPowerSourceMonitor .cxx_destruct]
  -[SFPowerSourceMonitor _removePowerSources:]
  -[SFPowerSourceMonitor dispatchQueue]
  -[SFPowerSourceMonitor _handlePowerSourcesLost:]
  -[SFPowerSourceMonitor setInvalidationHandler:]
  -[SFPowerSourceMonitor _handlePowerSourcesChanged:changes:]
  -[SFPowerSourceMonitor _handlePowerSourcesFound:]
  -[SFPowerSourceMonitor _cleanup]
  -[SFPowerSourceMonitor powerSourcesLostHandler]
  -[SFPowerSourceMonitor setDispatchQueue:]
  -[SFPowerSourceMonitor _updatePowerSourcesWithInfo:sources:sourcesCount:]
  -[SFPowerSourceMonitor changeFlags]
  -[SFPowerSourceMonitor _update]
  -[SFPowerSourceMonitor _triggerUpdatePowerSources]
  -[SFPowerSourceMonitor setSkipCoalescing:]
  -[SFPowerSourceMonitor _updatePowerSource:desc:adapterDesc:]
  -[SFPowerSourceMonitor _updatePowerSources]
  -[SFPowerSourceMonitor _foundPowerSource:desc:adapterDesc:]
  -[SFPowerSourceMonitor powerSourcesListWithOutInfo:outSources:outSourcesCount:]
  -[SFPowerSourceMonitor invalidationHandler]
  -[SFPowerSourceMonitor invalidate]
  -[SFPowerSourceMonitor activateWithCompletion:]
  -[SFPowerSourceMonitor setPowerSourcesLostHandler:]
  -[SFPowerSourceMonitor powerSourcesChangedHandler]
  -[SFPowerSourceMonitor skipCoalescing]
  -[SFPowerSourceMonitor setPowerSourcesFoundHandler:]


SFPowerSource : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSDictionary *ioKitAdapterDescription
 @property  NSDictionary *ioKitDescription
 @property  BOOL added
 @property  BOOL present
 @property  unsigned int changes
 @property  NSString *accessoryCategory
 @property  NSString *accessoryID
 @property  NSData *batteryCaseAddress
 @property  BOOL charging
 @property  double chargeLevel
 @property  long long color
 @property  long long familyCode
 @property  NSString *groupID
 @property  NSArray *LEDs
 @property  BOOL lowPowerModeEnabled
 @property  double lowWarnLevel
 @property  BOOL internal
 @property  double maxCapacity
 @property  NSString *name
 @property  NSString *partID
 @property  NSString *partName
 @property  int powerState
 @property  long long productID
 @property  int role
 @property  BOOL showChargingUI
 @property  long long sourceID
 @property  NSString *state
 @property  long long temperature
 @property  NSString *transportType
 @property  NSString *type
 @property  long long vendorID
 @property  BOOL wirelessCharging
 @property  long long adapterErrorFlags
 @property  long long adapterFamilyCode
 @property  NSString *adapterName
 @property  BOOL adapterSharedSource
 @property  long long adapterSourceID
 @property  long long matID

  // class methods
  +[SFPowerSource supportsSecureCoding]

  // instance methods
  -[SFPowerSource changes]
  -[SFPowerSource isInternal]
  -[SFPowerSource detailedDescription]
  -[SFPowerSource startLowPowerMonitoringIfAppropriate]
  -[SFPowerSource setAdapterErrorFlags:]
  -[SFPowerSource powerState]
  -[SFPowerSource setGroupID:]
  -[SFPowerSource temperature]
  -[SFPowerSource setPartID:]
  -[SFPowerSource setLEDs:]
  -[SFPowerSource lowPowerModeChanged:]
  -[SFPowerSource init]
  -[SFPowerSource setAdapterSharedSource:]
  -[SFPowerSource setCharging:]
  -[SFPowerSource setVendorID:]
  -[SFPowerSource setPartName:]
  -[SFPowerSource setChanges:]
  -[SFPowerSource setAdapterFamilyCode:]
  -[SFPowerSource setAccessoryCategory:]
  -[SFPowerSource setIoKitAdapterDescription:]
  -[SFPowerSource adapterErrorFlags]
  -[SFPowerSource setBatteryCaseAddress:]
  -[SFPowerSource setAdded:]
  -[SFPowerSource dealloc]
  -[SFPowerSource setIoKitDescription:]
  -[SFPowerSource setTemperature:]
  -[SFPowerSource setState:]
  -[SFPowerSource setType:]
  -[SFPowerSource .cxx_destruct]
  -[SFPowerSource setAccessoryID:]
  -[SFPowerSource name]
  -[SFPowerSource partID]
  -[SFPowerSource adapterName]
  -[SFPowerSource updateWithPowerSource:]
  -[SFPowerSource publish]
  -[SFPowerSource isLowPowerModeEnabled]
  -[SFPowerSource adapterSharedSource]
  -[SFPowerSource setRole:]
  -[SFPowerSource setLowWarnLevel:]
  -[SFPowerSource color]
  -[SFPowerSource encodeWithCoder:]
  -[SFPowerSource adapterSourceID]
  -[SFPowerSource adapterFamilyCode]
  -[SFPowerSource transportType]
  -[SFPowerSource wirelessCharging]
  -[SFPowerSource present]
  -[SFPowerSource groupID]
  -[SFPowerSource setPresent:]
  -[SFPowerSource type]
  -[SFPowerSource updateWithPowerSourceDescription:]
  -[SFPowerSource _updateWithCoder:]
  -[SFPowerSource setFamilyCode:]
  -[SFPowerSource partName]
  -[SFPowerSource LEDs]
  -[SFPowerSource accessoryID]
  -[SFPowerSource chargeLevel]
  -[SFPowerSource updateWithPowerAdapterDetails:]
  -[SFPowerSource vendorID]
  -[SFPowerSource lowWarnLevel]
  -[SFPowerSource setPowerState:]
  -[SFPowerSource isEqual:]
  -[SFPowerSource setAdapterName:]
  -[SFPowerSource setAdapterSourceID:]
  -[SFPowerSource setChargeLevel:]
  -[SFPowerSource sourceID]
  -[SFPowerSource showChargingUI]
  -[SFPowerSource accessoryCategory]
  -[SFPowerSource setColor:]
  -[SFPowerSource role]
  -[SFPowerSource ioKitDescription]
  -[SFPowerSource state]
  -[SFPowerSource productID]
  -[SFPowerSource matID]
  -[SFPowerSource maxCapacity]
  -[SFPowerSource setMaxCapacity:]
  -[SFPowerSource setShowChargingUI:]
  -[SFPowerSource invalidate]
  -[SFPowerSource familyCode]
  -[SFPowerSource ioKitAdapterDescription]
  -[SFPowerSource setName:]
  -[SFPowerSource setSourceID:]
  -[SFPowerSource setTransportType:]
  -[SFPowerSource added]
  -[SFPowerSource batteryCaseAddress]
  -[SFPowerSource charging]
  -[SFPowerSource initWithCoder:]
  -[SFPowerSource setProductID:]


SFPowerSourceLEDInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  int LEDColor
 @property  int LEDState

  // class methods
  +[SFPowerSourceLEDInfo supportsSecureCoding]

  // instance methods
  -[SFPowerSourceLEDInfo encodeWithCoder:]
  -[SFPowerSourceLEDInfo LEDColor]
  -[SFPowerSourceLEDInfo LEDState]
  -[SFPowerSourceLEDInfo isEqual:]
  -[SFPowerSourceLEDInfo setLEDColor:]
  -[SFPowerSourceLEDInfo setLEDState:]
  -[SFPowerSourceLEDInfo initWithCoder:]


SFAppleIDIdentity : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *accountIdentifier
 @property  NSString *altDSID
 @property  NSString *appleID
 @property  NSDate *certificateExpirationDate
 @property  BOOL certificateExpired
 @property  NSData *certificatePersistentReference
 @property  BOOL needsRenewal
 @property  NSDate *intermediateCertificateExpirationDate
 @property  BOOL intermediateCertificateExpired
 @property  NSString *intermediateCertificateSerialNumber
 @property  NSData *intermediateCertificatePersistentReference
 @property  BOOL isInvalid
 @property  NSDate *lastValidationAttemptDate
 @property  NSDate *lastValidationDate
 @property  BOOL linkedToCurrentUser
 @property  NSDate *modificationDate
 @property  NSData *privateKeyPersistentReference
 @property  NSString *serialNumber

  // class methods
  +[SFAppleIDIdentity supportsSecureCoding]

  // instance methods
  -[SFAppleIDIdentity copyWithZone:]
  -[SFAppleIDIdentity altDSID]
  -[SFAppleIDIdentity removeFromKeychain]
  -[SFAppleIDIdentity isInvalid]
  -[SFAppleIDIdentity serialNumber]
  -[SFAppleIDIdentity appleID]
  -[SFAppleIDIdentity isEqualToIdentity:]
  -[SFAppleIDIdentity accountIdentifier]
  -[SFAppleIDIdentity copyCertificate]
  -[SFAppleIDIdentity .cxx_destruct]
  -[SFAppleIDIdentity certificateExpirationDate]
  -[SFAppleIDIdentity copyIdentity]
  -[SFAppleIDIdentity encodeWithCoder:]
  -[SFAppleIDIdentity setModificationDate:]
  -[SFAppleIDIdentity initWithDictionary:]
  -[SFAppleIDIdentity needsRenewal]
  -[SFAppleIDIdentity certificatePersistentReference]
  -[SFAppleIDIdentity lastValidationAttemptDate]
  -[SFAppleIDIdentity isEqual:]
  -[SFAppleIDIdentity intermediateCertificateExpirationDate]
  -[SFAppleIDIdentity intermediateCertificatePersistentReference]
  -[SFAppleIDIdentity lastValidationDate]
  -[SFAppleIDIdentity linkedToCurrentUser]
  -[SFAppleIDIdentity intermediateCertificateSerialNumber]
  -[SFAppleIDIdentity copyCertificateWithType:]
  -[SFAppleIDIdentity isDateInThePast:]
  -[SFAppleIDIdentity copyIntermediateCertificate]
  -[SFAppleIDIdentity certificateExpired]
  -[SFAppleIDIdentity intermediateCertificateExpired]
  -[SFAppleIDIdentity copyPrivateKey]
  -[SFAppleIDIdentity verifyKeys]
  -[SFAppleIDIdentity setCertificateExpirationDate:]
  -[SFAppleIDIdentity setLastValidationAttemptDate:]
  -[SFAppleIDIdentity initWithAppleID:altDSID:]
  -[SFAppleIDIdentity setCertificatePersistentReference:]
  -[SFAppleIDIdentity setIntermediateCertificateExpirationDate:]
  -[SFAppleIDIdentity setIntermediateCertificatePersistentReference:]
  -[SFAppleIDIdentity setLastValidationDate:]
  -[SFAppleIDIdentity setLinkedToCurrentUser:]
  -[SFAppleIDIdentity setSerialNumber:]
  -[SFAppleIDIdentity setAccountIdentifier:]
  -[SFAppleIDIdentity initWithCoder:]
  -[SFAppleIDIdentity modificationDate]
  -[SFAppleIDIdentity privateKeyPersistentReference]
  -[SFAppleIDIdentity setPrivateKeyPersistentReference:]


SFUserAlert : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  @? responseHandler
 @property  @? textResponseHandler
 @property  @? dictionaryResponseHandler
 @property  NSDictionary *additionalInfo
 @property  BOOL asBanner
 @property  NSURL *iconURL
 @property  NSString *message
 @property  NSURL *soundURL
 @property  BOOL textInput
 @property  NSString *textInputTitle
 @property  double timeout
 @property  NSString *title
 @property  BOOL hasDefaultButton
 @property  NSString *defaultButtonTitle
 @property  NSString *alternateButtonTitle
 @property  NSString *otherButtonTitle

  // class methods
  +[SFUserAlert supportsSecureCoding]

  // instance methods
  -[SFUserAlert setIconURL:]
  -[SFUserAlert _ensureXPCStarted]
  -[SFUserAlert message]
  -[SFUserAlert additionalInfo]
  -[SFUserAlert init]
  -[SFUserAlert timeout]
  -[SFUserAlert setTimeout:]
  -[SFUserAlert otherButtonTitle]
  -[SFUserAlert errorHandler]
  -[SFUserAlert setMessage:]
  -[SFUserAlert dealloc]
  -[SFUserAlert setErrorHandler:]
  -[SFUserAlert .cxx_destruct]
  -[SFUserAlert dispatchQueue]
  -[SFUserAlert setTitle:]
  -[SFUserAlert encodeWithCoder:]
  -[SFUserAlert _invalidate]
  -[SFUserAlert present]
  -[SFUserAlert setAlternateButtonTitle:]
  -[SFUserAlert title]
  -[SFUserAlert setDispatchQueue:]
  -[SFUserAlert responseHandler]
  -[SFUserAlert textInput]
  -[SFUserAlert _present]
  -[SFUserAlert alternateButtonTitle]
  -[SFUserAlert asBanner]
  -[SFUserAlert soundURL]
  -[SFUserAlert _mergedDict]
  -[SFUserAlert _presentBanner]
  -[SFUserAlert createNotification]
  -[SFUserAlert _defaultDictionary]
  -[SFUserAlert _handleResponseForNotification:flags:]
  -[SFUserAlert _invalidated]
  -[SFUserAlert _updateNotification]
  -[SFUserAlert textResponseHandler]
  -[SFUserAlert setTextResponseHandler:]
  -[SFUserAlert dictionaryResponseHandler]
  -[SFUserAlert setDictionaryResponseHandler:]
  -[SFUserAlert setAsBanner:]
  -[SFUserAlert setSoundURL:]
  -[SFUserAlert textInputTitle]
  -[SFUserAlert setTextInputTitle:]
  -[SFUserAlert setOtherButtonTitle:]
  -[SFUserAlert hasDefaultButton]
  -[SFUserAlert setHasDefaultButton:]
  -[SFUserAlert defaultButtonTitle]
  -[SFUserAlert _postNotification:]
  -[SFUserAlert setDefaultButtonTitle:]
  -[SFUserAlert _interrupted]
  -[SFUserAlert setAdditionalInfo:]
  -[SFUserAlert invalidate]
  -[SFUserAlert iconURL]
  -[SFUserAlert setTextInput:]
  -[SFUserAlert initWithCoder:]
  -[SFUserAlert setResponseHandler:]
  -[SFUserAlert userNotificationError:]
  -[SFUserAlert userNotificationResponse:]
  -[SFUserAlert userNotificationTextResponse:]
  -[SFUserAlert userNotificationDictionaryResponse:]


SFRemoteTextInputClient : NSObject /usr/lib/libc++.1.dylib <RTIInputSystemClientDelegate, RTIInputSystemDelegate, RTIInputSystemPayloadDelegate, RTIInputSystemSessionDelegate>
 @property  NSDictionary *currentPayload
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? eventHandler
 @property  RTIInputSystemSourceSession *sourceSession
 @property  @? textInputDidBegin
 @property  @? textInputDidEnd
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFRemoteTextInputClient eventHandler]
  -[SFRemoteTextInputClient performTextOperations:]
  -[SFRemoteTextInputClient setEventHandler:]
  -[SFRemoteTextInputClient init]
  -[SFRemoteTextInputClient handleTextActionPayload:]
  -[SFRemoteTextInputClient activate]
  -[SFRemoteTextInputClient inputSystemService:inputSessionDidDie:]
  -[SFRemoteTextInputClient flushOperations]
  -[SFRemoteTextInputClient inputSystemService:inputSessionDidBegin:]
  -[SFRemoteTextInputClient sourceSession]
  -[SFRemoteTextInputClient dealloc]
  -[SFRemoteTextInputClient setTextInputDidBegin:]
  -[SFRemoteTextInputClient .cxx_destruct]
  -[SFRemoteTextInputClient currentPayload]
  -[SFRemoteTextInputClient inputSystemService:inputSessionDocumentDidChange:]
  -[SFRemoteTextInputClient dispatchQueue]
  -[SFRemoteTextInputClient _handleSessionEvent:forSession:]
  -[SFRemoteTextInputClient textInputDidBegin]
  -[SFRemoteTextInputClient _cleanup]
  -[SFRemoteTextInputClient setDispatchQueue:]
  -[SFRemoteTextInputClient _fireEventHandlerWithPayload:]
  -[SFRemoteTextInputClient handleTextInputData:]
  -[SFRemoteTextInputClient inputSystemService:didCreateInputSession:]
  -[SFRemoteTextInputClient setTextInputDidEnd:]
  -[SFRemoteTextInputClient textInputDidEnd]
  -[SFRemoteTextInputClient inputSystemService:inputSessionDidPause:withReason:]
  -[SFRemoteTextInputClient handleUsername:password:]
  -[SFRemoteTextInputClient inputSystemService:inputSessionDidUnpause:withReason:]
  -[SFRemoteTextInputClient inputSystemService:inputSessionDidEnd:]
  -[SFRemoteTextInputClient invalidate]
  -[SFRemoteTextInputClient fireEventHandlerWithPayload:]


SFAppleIDPersonInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSDate *validUntilDate
 @property  NSString *accountIdentifier
 @property  NSString *altDSID
 @property  long long certificateStatus
 @property  BOOL didMatchEmail
 @property  BOOL didMatchPhone
 @property  BOOL isStale
 @property  NSString *matchedValue

  // class methods
  +[SFAppleIDPersonInfo supportsSecureCoding]

  // instance methods
  -[SFAppleIDPersonInfo copyWithZone:]
  -[SFAppleIDPersonInfo altDSID]
  -[SFAppleIDPersonInfo accountIdentifier]
  -[SFAppleIDPersonInfo .cxx_destruct]
  -[SFAppleIDPersonInfo matchedValue]
  -[SFAppleIDPersonInfo certificateStatus]
  -[SFAppleIDPersonInfo encodeWithCoder:]
  -[SFAppleIDPersonInfo isStale]
  -[SFAppleIDPersonInfo initWithDictionary:]
  -[SFAppleIDPersonInfo isEqual:]
  -[SFAppleIDPersonInfo isEqualToPersonInfo:]
  -[SFAppleIDPersonInfo didMatchEmail]
  -[SFAppleIDPersonInfo didMatchPhone]
  -[SFAppleIDPersonInfo validUntilDate]
  -[SFAppleIDPersonInfo initWithCoder:]


SFApproveDiscovery : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *devices
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? invalidationHandler

  // instance methods
  -[SFApproveDiscovery _activateWithCompletion:]
  -[SFApproveDiscovery setDevices:]
  -[SFApproveDiscovery init]
  -[SFApproveDiscovery deviceFoundHandler]
  -[SFApproveDiscovery .cxx_destruct]
  -[SFApproveDiscovery devices]
  -[SFApproveDiscovery dispatchQueue]
  -[SFApproveDiscovery setDeviceFoundHandler:]
  -[SFApproveDiscovery setInvalidationHandler:]
  -[SFApproveDiscovery setDeviceLostHandler:]
  -[SFApproveDiscovery setDispatchQueue:]
  -[SFApproveDiscovery deviceLostHandler]
  -[SFApproveDiscovery _invalidated]
  -[SFApproveDiscovery _discoveryEnsureStarted]
  -[SFApproveDiscovery _discoveryEnsureStopped]
  -[SFApproveDiscovery _discoveryFoundDevice:]
  -[SFApproveDiscovery _discoveryLostDevice:]
  -[SFApproveDiscovery _discoveryDeviceChanged:]
  -[SFApproveDiscovery _activatedWithError:]
  -[SFApproveDiscovery invalidationHandler]
  -[SFApproveDiscovery invalidate]
  -[SFApproveDiscovery activateWithCompletion:]


SFBLEAdvertiser : NSObject /usr/lib/libc++.1.dylib <WPNearbyDelegate>
 @property  NSArray *lePipeDevices
 @property  long long advertiseRate
 @property  @? advertiseStateChangedHandler
 @property  @? bluetoothStateChangedHandler
 @property  @? connectionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFBLEAdvertiser _activateWithCompletion:]
  -[SFBLEAdvertiser nearby:didDeferAdvertisingType:]
  -[SFBLEAdvertiser bluetoothStateChangedHandler]
  -[SFBLEAdvertiser setAdvertiseRate:]
  -[SFBLEAdvertiser setBluetoothStateChangedHandler:]
  -[SFBLEAdvertiser dealloc]
  -[SFBLEAdvertiser initWithType:]
  -[SFBLEAdvertiser .cxx_destruct]
  -[SFBLEAdvertiser dispatchQueue]
  -[SFBLEAdvertiser advertiseRate]
  -[SFBLEAdvertiser setInvalidationHandler:]
  -[SFBLEAdvertiser _invalidate]
  -[SFBLEAdvertiser setDispatchQueue:]
  -[SFBLEAdvertiser setPayloadData:]
  -[SFBLEAdvertiser _restartIfNeeded:]
  -[SFBLEAdvertiser setConnectionHandler:]
  -[SFBLEAdvertiser nearby:didFailToStartAdvertisingOfType:withError:]
  -[SFBLEAdvertiser nearby:didStopAdvertisingType:withError:]
  -[SFBLEAdvertiser lePipeDevices]
  -[SFBLEAdvertiser _preparePayload:]
  -[SFBLEAdvertiser _preparePayloadNearbyAction:]
  -[SFBLEAdvertiser _preparePayloadNearbyInfo:]
  -[SFBLEAdvertiser setLePipeDevices:]
  -[SFBLEAdvertiser setPayloadFields:]
  -[SFBLEAdvertiser advertiseStateChangedHandler]
  -[SFBLEAdvertiser setAdvertiseStateChangedHandler:]
  -[SFBLEAdvertiser connectionHandler]
  -[SFBLEAdvertiser invalidationHandler]
  -[SFBLEAdvertiser nearby:didConnectToPeer:transport:error:]
  -[SFBLEAdvertiser invalidate]
  -[SFBLEAdvertiser activateWithCompletion:]
  -[SFBLEAdvertiser nearbyDidUpdateState:]
  -[SFBLEAdvertiser nearby:didStartAdvertisingType:]


SFBLEClient : NSObject /usr/lib/libc++.1.dylib <WPAWDLDelegate, WPNearbyDelegate, WPPairingDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFBLEClient sharedClient]

  // instance methods
  -[SFBLEClient nearby:didDeferAdvertisingType:]
  -[SFBLEClient init]
  -[SFBLEClient removeNearbyDelegate:]
  -[SFBLEClient pairing:failedToStartScanningWithError:]
  -[SFBLEClient pairing:foundDevice:payload:rssi:peerInfo:]
  -[SFBLEClient .cxx_destruct]
  -[SFBLEClient awdlStartedScanning:]
  -[SFBLEClient awdl:foundDevice:rssi:]
  -[SFBLEClient nearbyDidChangeBluetoothBandwidthState:]
  -[SFBLEClient nearby:didFailToStartScanningForType:WithError:]
  -[SFBLEClient removePairingDelegate:]
  -[SFBLEClient nearby:didSendData:toPeer:error:]
  -[SFBLEClient pairingStoppedScanning:]
  -[SFBLEClient addAirDropDelegate:]
  -[SFBLEClient pairingStartedScanning:]
  -[SFBLEClient nearby:didDisconnectFromPeer:error:]
  -[SFBLEClient addNearbyDelegate:]
  -[SFBLEClient nearby:didLosePeer:type:]
  -[SFBLEClient nearby:didFailToStartAdvertisingOfType:withError:]
  -[SFBLEClient nearby:didStopAdvertisingType:withError:]
  -[SFBLEClient nearby:didReceiveData:fromPeer:]
  -[SFBLEClient awdl:failedToStartAdvertisingWithError:]
  -[SFBLEClient addPairingDelegate:]
  -[SFBLEClient awdl:failedToStartScanningWithError:]
  -[SFBLEClient awdlStartedAdvertising:]
  -[SFBLEClient removeAirDropDelegate:]
  -[SFBLEClient nearby:didConnectToPeer:transport:error:]
  -[SFBLEClient nearbyDidUpdateState:]
  -[SFBLEClient pairingDidUpdateState:]
  -[SFBLEClient nearby:didDiscoverType:withData:fromPeer:peerInfo:]
  -[SFBLEClient awdlAdvertisingPending:]
  -[SFBLEClient awdlDidUpdateState:]
  -[SFBLEClient nearby:didStartScanningForType:]
  -[SFBLEClient nearby:didStartAdvertisingType:]


SFBLEConnection : NSObject /usr/lib/libc++.1.dylib <WPNearbyDelegate>
 @property  BOOL bleEncrypted
 @property  BOOL latencyCritical
 @property  BOOL lePipeCapable
 @property  SFBLEDevice *peerDevice
 @property  BOOL acceptor
 @property  @? bluetoothBandwidthChangedHandler
 @property  @? bluetoothStateChangedHandler
 @property  long long connectionState
 @property  @? connectionStateChangedHandler
 @property  @? dataHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  unsigned int sessionFlags
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFBLEConnection connectionState]
  -[SFBLEConnection removeClient:]
  -[SFBLEConnection addClient:]
  -[SFBLEConnection bluetoothStateChangedHandler]
  -[SFBLEConnection activate]
  -[SFBLEConnection setBluetoothStateChangedHandler:]
  -[SFBLEConnection setPeerDevice:]
  -[SFBLEConnection setSessionFlags:]
  -[SFBLEConnection dataHandler]
  -[SFBLEConnection dealloc]
  -[SFBLEConnection .cxx_destruct]
  -[SFBLEConnection dispatchQueue]
  -[SFBLEConnection setInvalidationHandler:]
  -[SFBLEConnection nearbyDidChangeBluetoothBandwidthState:]
  -[SFBLEConnection _activate]
  -[SFBLEConnection _invalidate]
  -[SFBLEConnection setDispatchQueue:]
  -[SFBLEConnection _connectIfNeeded]
  -[SFBLEConnection setDataHandler:]
  -[SFBLEConnection nearby:didSendData:toPeer:error:]
  -[SFBLEConnection connectionStateChangedHandler]
  -[SFBLEConnection setConnectionStateChangedHandler:]
  -[SFBLEConnection nearby:didDisconnectFromPeer:error:]
  -[SFBLEConnection acceptor]
  -[SFBLEConnection peerDevice]
  -[SFBLEConnection _processQueuedData]
  -[SFBLEConnection _cleanupQueuedData:]
  -[SFBLEConnection setAcceptor:]
  -[SFBLEConnection nearby:didReceiveData:fromPeer:]
  -[SFBLEConnection sendDataDirect:completion:]
  -[SFBLEConnection initWithDevice:acceptor:]
  -[SFBLEConnection activateDirect]
  -[SFBLEConnection sendData:completion:]
  -[SFBLEConnection bluetoothBandwidthChangedHandler]
  -[SFBLEConnection setBluetoothBandwidthChangedHandler:]
  -[SFBLEConnection bleEncrypted]
  -[SFBLEConnection setBleEncrypted:]
  -[SFBLEConnection latencyCritical]
  -[SFBLEConnection setLatencyCritical:]
  -[SFBLEConnection lePipeCapable]
  -[SFBLEConnection setLePipeCapable:]
  -[SFBLEConnection sessionFlags]
  -[SFBLEConnection invalidationHandler]
  -[SFBLEConnection nearby:didConnectToPeer:transport:error:]
  -[SFBLEConnection invalidate]
  -[SFBLEConnection nearbyDidUpdateState:]


SFBLEDevice : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSData *advertisementData
 @property  NSDictionary *advertisementFields
 @property  NSData *bluetoothAddress
 @property  SFProximityEstimator *closeProximityEstimatorSmall
 @property  SFProximityEstimator *closeProximityEstimatorMedium
 @property  unsigned int connectedServices
 @property  NSUUID *counterpartIdentifier
 @property  long long distance
 @property  unsigned long foundTicks
 @property  NSUUID *identifier
 @property  SFProximityEstimator *infoProximityEstimator
 @property  BOOL insideBubble
 @property  BOOL insideSmallBubble
 @property  BOOL insideMediumBubble
 @property  NSString *name
 @property  double lastSeen
 @property  double pairCheckTime
 @property  BOOL paired
 @property  unsigned int productID2
 @property  SFProximityEstimator *proxPairProximityEstimator
 @property  SFProximityEstimator *setupProximityEstimator
 @property  RPIdentity *rpIdentity
 @property  long long rssi
 @property  long long rssiCeiling
 @property  int rssiEstimate
 @property  long long rssiFloor
 @property  long long smoothedRSSI
 @property  BOOL tempPaired
 @property  BOOL triggered

  // class methods
  +[SFBLEDevice supportsSecureCoding]
  +[SFBLEDevice setRSSIEstimatorInfo:]

  // instance methods
  -[SFBLEDevice paired]
  -[SFBLEDevice copyWithZone:]
  -[SFBLEDevice distance]
  -[SFBLEDevice setDistance:]
  -[SFBLEDevice advertisementData]
  -[SFBLEDevice counterpartIdentifier]
  -[SFBLEDevice rssiCeiling]
  -[SFBLEDevice setAdvertisementFields:]
  -[SFBLEDevice setRssiEstimate:]
  -[SFBLEDevice pairCheckTime]
  -[SFBLEDevice setInsideMediumBubble:]
  -[SFBLEDevice proxPairProximityEstimator]
  -[SFBLEDevice tempPaired]
  -[SFBLEDevice setConnectedServices:]
  -[SFBLEDevice setBluetoothAddress:]
  -[SFBLEDevice setPairCheckTime:]
  -[SFBLEDevice foundTicks]
  -[SFBLEDevice setSetupProximityEstimator:]
  -[SFBLEDevice setupProximityEstimator]
  -[SFBLEDevice advertisementFields]
  -[SFBLEDevice setTriggered:]
  -[SFBLEDevice .cxx_destruct]
  -[SFBLEDevice name]
  -[SFBLEDevice setTempPaired:]
  -[SFBLEDevice bluetoothAddress]
  -[SFBLEDevice rssiEstimate]
  -[SFBLEDevice setLastSeen:]
  -[SFBLEDevice setProxPairProximityEstimator:]
  -[SFBLEDevice setRssiCeiling:]
  -[SFBLEDevice smoothedRSSI]
  -[SFBLEDevice setAdvertisementData:]
  -[SFBLEDevice rpIdentity]
  -[SFBLEDevice setIdentifier:]
  -[SFBLEDevice setInsideSmallBubble:]
  -[SFBLEDevice productID2]
  -[SFBLEDevice encodeWithCoder:]
  -[SFBLEDevice identifier]
  -[SFBLEDevice rssi]
  -[SFBLEDevice setCloseProximityEstimatorSmall:]
  -[SFBLEDevice insideBubble]
  -[SFBLEDevice setRssi:]
  -[SFBLEDevice setPaired:]
  -[SFBLEDevice insideMediumBubble]
  -[SFBLEDevice insideSmallBubble]
  -[SFBLEDevice updateRSSI:]
  -[SFBLEDevice closeProximityEstimatorSmall]
  -[SFBLEDevice setCounterpartIdentifier:]
  -[SFBLEDevice triggered]
  -[SFBLEDevice setInfoProximityEstimator:]
  -[SFBLEDevice setRpIdentity:]
  -[SFBLEDevice closeProximityEstimatorMedium]
  -[SFBLEDevice rssiFloor]
  -[SFBLEDevice setProductID2:]
  -[SFBLEDevice connectedServices]
  -[SFBLEDevice lastSeen]
  -[SFBLEDevice setName:]
  -[SFBLEDevice setRssiFloor:]
  -[SFBLEDevice setSmoothedRSSI:]
  -[SFBLEDevice setInsideBubble:]
  -[SFBLEDevice setCloseProximityEstimatorMedium:]
  -[SFBLEDevice setFoundTicks:]
  -[SFBLEDevice initWithCoder:]
  -[SFBLEDevice infoProximityEstimator]


SFBLEPipe : NSObject /usr/lib/libc++.1.dylib <CBCentralManagerDelegate, CBScalablePipeManagerDelegate>
 @property  @? bluetoothStateChangedHandler
 @property  long long connectionState
 @property  @? connectionStateChangedHandler
 @property  @? frameHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *identifier
 @property  @? invalidationHandler
 @property  BOOL manualConnect
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFBLEPipe connectionState]
  -[SFBLEPipe scalablePipeManager:pipeDidDisconnect:error:]
  -[SFBLEPipe scalablePipeManager:didUnregisterEndpoint:]
  -[SFBLEPipe centralManager:didConnectPeripheral:]
  -[SFBLEPipe centralManager:didFailToConnectPeripheral:error:]
  -[SFBLEPipe _tearDownPipe]
  -[SFBLEPipe scalablePipeManagerDidUpdateState:]
  -[SFBLEPipe init]
  -[SFBLEPipe bluetoothStateChangedHandler]
  -[SFBLEPipe scalablePipeManager:pipeDidConnect:]
  -[SFBLEPipe activate]
  -[SFBLEPipe setBluetoothStateChangedHandler:]
  -[SFBLEPipe scalablePipeManager:didRegisterEndpoint:error:]
  -[SFBLEPipe setFrameHandler:]
  -[SFBLEPipe centralManager:didDisconnectPeripheral:error:]
  -[SFBLEPipe dealloc]
  -[SFBLEPipe _defaultPairedDeviceBluetoothIdentifier]
  -[SFBLEPipe _writeHandler]
  -[SFBLEPipe .cxx_destruct]
  -[SFBLEPipe dispatchQueue]
  -[SFBLEPipe centralManagerDidUpdateState:]
  -[SFBLEPipe _setupPipe:]
  -[SFBLEPipe _setupIfNeeded]
  -[SFBLEPipe setInvalidationHandler:]
  -[SFBLEPipe _activate]
  -[SFBLEPipe setIdentifier:]
  -[SFBLEPipe identifier]
  -[SFBLEPipe _invalidate]
  -[SFBLEPipe setDispatchQueue:]
  -[SFBLEPipe frameHandler]
  -[SFBLEPipe setManualConnect:]
  -[SFBLEPipe sendFrameType:payload:completion:]
  -[SFBLEPipe connectionStateChangedHandler]
  -[SFBLEPipe setConnectionStateChangedHandler:]
  -[SFBLEPipe manualConnect]
  -[SFBLEPipe _readHandler]
  -[SFBLEPipe addFrameHandlerForType:handler:]
  -[SFBLEPipe invalidationHandler]
  -[SFBLEPipe removeFrameHandlerForType:]
  -[SFBLEPipe _sendFrameType:payload:completion:]
  -[SFBLEPipe invalidate]
  -[SFBLEPipe _frameHandler:data:]


SFBLEScanner : NSObject /usr/lib/libc++.1.dylib <CBCentralManagerDelegate, WPAWDLDelegate, WPNearbyDelegate>
 @property  @? bluetoothStateChangedHandler
 @property  unsigned int changeFlags
 @property  NSArray *deviceFilter
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? deviceChangedHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  NSData *payloadFilterData
 @property  NSData *payloadFilterMask
 @property  double rescanInterval
 @property  BOOL rssiLog
 @property  BOOL rssiLogStdOut
 @property  SFBLERecorder *recorder
 @property  long long rssiThreshold
 @property  BOOL scanCache
 @property  long long scanInterval
 @property  long long scanRate
 @property  long long scanState
 @property  @? scanStateChangedHandler
 @property  long long scanWindow
 @property  double timeout
 @property  @? timeoutHandler
 @property  NSSet *trackedPeers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFBLEScanner _activateWithCompletion:]
  -[SFBLEScanner scanState]
  -[SFBLEScanner setRssiThreshold:]
  -[SFBLEScanner statusToHeadsetStatus:forProductID:]
  -[SFBLEScanner scanCache]
  -[SFBLEScanner rssiThreshold]
  -[SFBLEScanner setTrackedPeers:]
  -[SFBLEScanner rssiLog]
  -[SFBLEScanner setScanCache:]
  -[SFBLEScanner setScanStateChangedHandler:]
  -[SFBLEScanner bluetoothStateChangedHandler]
  -[SFBLEScanner pairing:failedToStartScanningWithError:]
  -[SFBLEScanner _invokeBlockActivateSafe:]
  -[SFBLEScanner setBluetoothStateChangedHandler:]
  -[SFBLEScanner timeout]
  -[SFBLEScanner deviceFoundHandler]
  -[SFBLEScanner _watchSetupParseName:fields:]
  -[SFBLEScanner _rescanLostFired]
  -[SFBLEScanner setRssiLog:]
  -[SFBLEScanner setDeviceChangedHandler:]
  -[SFBLEScanner parseStatus3:productID:caseLEDColor:caseLEDStatus:]
  -[SFBLEScanner rescanInterval]
  -[SFBLEScanner foundNearbyDevice:data:peerInfo:]
  -[SFBLEScanner setTimeout:]
  -[SFBLEScanner _needActiveScan]
  -[SFBLEScanner setChangeFlags:]
  -[SFBLEScanner payloadFilterData]
  -[SFBLEScanner payloadFilterMask]
  -[SFBLEScanner pairing:foundDevice:payload:rssi:peerInfo:]
  -[SFBLEScanner dealloc]
  -[SFBLEScanner setDeviceFilter:]
  -[SFBLEScanner _btSessionUsable]
  -[SFBLEScanner initWithType:]
  -[SFBLEScanner .cxx_destruct]
  -[SFBLEScanner foundAWDLDevice:rssi:]
  -[SFBLEScanner scanRate]
  -[SFBLEScanner pairingUpdatePairedInfo:fields:bleDevice:]
  -[SFBLEScanner setRssiLogStdOut:]
  -[SFBLEScanner deviceChangedHandler]
  -[SFBLEScanner _updateCounterpart:]
  -[SFBLEScanner _foundDevice:advertisementData:rssi:fields:]
  -[SFBLEScanner dispatchQueue]
  -[SFBLEScanner centralManagerDidUpdateState:]
  -[SFBLEScanner setDeviceFoundHandler:]
  -[SFBLEScanner awdlStartedScanning:]
  -[SFBLEScanner awdl:foundDevice:rssi:]
  -[SFBLEScanner _poweredOff]
  -[SFBLEScanner foundPairingDevice:payload:rssi:peerInfo:]
  -[SFBLEScanner _recordDevice:data:rssi:info:]
  -[SFBLEScanner setInvalidationHandler:]
  -[SFBLEScanner pairingParsePayload:identifier:bleDevice:]
  -[SFBLEScanner pairingUpdatePairedInfoMB:fields:bleDevice:]
  -[SFBLEScanner nearby:didFailToStartScanningForType:WithError:]
  -[SFBLEScanner setRescanInterval:]
  -[SFBLEScanner setDeviceLostHandler:]
  -[SFBLEScanner _startTimeoutIfNeeded]
  -[SFBLEScanner _invalidate]
  -[SFBLEScanner scanStateChangedHandler]
  -[SFBLEScanner _nearbyParseNearbyInfoPtr:end:fields:]
  -[SFBLEScanner setDispatchQueue:]
  -[SFBLEScanner deviceLostHandler]
  -[SFBLEScanner setScanInterval:]
  -[SFBLEScanner _rssiLogOpen]
  -[SFBLEScanner changeFlags]
  -[SFBLEScanner _restartIfNeeded:]
  -[SFBLEScanner _needDups]
  -[SFBLEScanner performUpdate:]
  -[SFBLEScanner _restartIfNeeded]
  -[SFBLEScanner _btSessionEnsureStopped]
  -[SFBLEScanner scanInterval]
  -[SFBLEScanner timeoutHandler]
  -[SFBLEScanner _removeAllDevicesWithReason:]
  -[SFBLEScanner rssiLogStdOut]
  -[SFBLEScanner scanWindow]
  -[SFBLEScanner _poweredOn]
  -[SFBLEScanner trackedPeers]
  -[SFBLEScanner pairingStartedScanning:]
  -[SFBLEScanner _rssiLogClose]
  -[SFBLEScanner nearby:didLosePeer:type:]
  -[SFBLEScanner deviceFilter]
  -[SFBLEScanner _updateTrackedPeers]
  -[SFBLEScanner setRecorder:]
  -[SFBLEScanner _nearbyParseManufacturerData:fields:]
  -[SFBLEScanner recorder]
  -[SFBLEScanner setScanRate:]
  -[SFBLEScanner modelWithProductID:]
  -[SFBLEScanner centralManager:didDiscoverPeripheral:advertisementData:RSSI:]
  -[SFBLEScanner awdl:failedToStartScanningWithError:]
  -[SFBLEScanner _btSessionEnsureStarted]
  -[SFBLEScanner invalidationHandler]
  -[SFBLEScanner setTimeoutHandler:]
  -[SFBLEScanner foundPeripheralDevice:advertisementData:RSSI:]
  -[SFBLEScanner invalidate]
  -[SFBLEScanner setScanWindow:]
  -[SFBLEScanner activateWithCompletion:]
  -[SFBLEScanner _updateRescanTimer]
  -[SFBLEScanner nearbyDidUpdateState:]
  -[SFBLEScanner pairingDidUpdateState:]
  -[SFBLEScanner setPayloadFilterData:mask:]
  -[SFBLEScanner nearby:didDiscoverType:withData:fromPeer:peerInfo:]
  -[SFBLEScanner _rescanTimerFired]
  -[SFBLEScanner _timeoutTimerFired]
  -[SFBLEScanner awdlDidUpdateState:]
  -[SFBLEScanner nearby:didStartScanningForType:]
  -[SFBLEScanner _nearbyParseNearbyActionPtr:end:fields:]


SFBluetoothPairingSession : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL aggregate
 @property  @? completionHandler
 @property  BOOL connectOnly
 @property  NSString *deviceAddress
 @property  unsigned int deviceVersion
 @property  BOOL disconnectOnly
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *guestAddress
 @property  NSData *guestKey
 @property  BOOL guestMode
 @property  NSString *name
 @property  BOOL softwareVolume
 @property  BOOL userNotInContacts

  // instance methods
  -[SFBluetoothPairingSession deviceVersion]
  -[SFBluetoothPairingSession init]
  -[SFBluetoothPairingSession activate]
  -[SFBluetoothPairingSession dealloc]
  -[SFBluetoothPairingSession .cxx_destruct]
  -[SFBluetoothPairingSession name]
  -[SFBluetoothPairingSession dispatchQueue]
  -[SFBluetoothPairingSession setGuestMode:]
  -[SFBluetoothPairingSession _activate]
  -[SFBluetoothPairingSession _invalidate]
  -[SFBluetoothPairingSession setDispatchQueue:]
  -[SFBluetoothPairingSession _btEnsureStarted]
  -[SFBluetoothPairingSession _completed:]
  -[SFBluetoothPairingSession guestKey]
  -[SFBluetoothPairingSession setAggregate:]
  -[SFBluetoothPairingSession deviceAddress]
  -[SFBluetoothPairingSession setDeviceAddress:]
  -[SFBluetoothPairingSession completionHandler]
  -[SFBluetoothPairingSession _btDeletePairingAndRetry]
  -[SFBluetoothPairingSession connectOnly]
  -[SFBluetoothPairingSession setConnectOnly:]
  -[SFBluetoothPairingSession disconnectOnly]
  -[SFBluetoothPairingSession setDisconnectOnly:]
  -[SFBluetoothPairingSession guestAddress]
  -[SFBluetoothPairingSession setGuestAddress:]
  -[SFBluetoothPairingSession setGuestKey:]
  -[SFBluetoothPairingSession softwareVolume]
  -[SFBluetoothPairingSession userNotInContacts]
  -[SFBluetoothPairingSession setUserNotInContacts:]
  -[SFBluetoothPairingSession invalidate]
  -[SFBluetoothPairingSession setCompletionHandler:]
  -[SFBluetoothPairingSession aggregate]
  -[SFBluetoothPairingSession _btEnsureStopped]
  -[SFBluetoothPairingSession guestMode]


SFProxHandoffService : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue

  // instance methods
  -[SFProxHandoffService _activateWithCompletion:]
  -[SFProxHandoffService init]
  -[SFProxHandoffService _activated]
  -[SFProxHandoffService dealloc]
  -[SFProxHandoffService .cxx_destruct]
  -[SFProxHandoffService dispatchQueue]
  -[SFProxHandoffService _cleanup]
  -[SFProxHandoffService _serviceStart]
  -[SFProxHandoffService _completedWithError:]
  -[SFProxHandoffService setDispatchQueue:]
  -[SFProxHandoffService invalidate]
  -[SFProxHandoffService activateWithCompletion:]


SFClientSubCredentialParams : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *adamID
 @property  NSArray *adamIDs
 @property  NSString *title
 @property  NSString *subtitle
 @property  NSString *issuerID

  // class methods
  +[SFClientSubCredentialParams supportsSecureCoding]

  // instance methods
  -[SFClientSubCredentialParams setSubtitle:]
  -[SFClientSubCredentialParams .cxx_destruct]
  -[SFClientSubCredentialParams adamIDs]
  -[SFClientSubCredentialParams setTitle:]
  -[SFClientSubCredentialParams encodeWithCoder:]
  -[SFClientSubCredentialParams setAdamID:]
  -[SFClientSubCredentialParams title]
  -[SFClientSubCredentialParams issuerID]
  -[SFClientSubCredentialParams adamID]
  -[SFClientSubCredentialParams subtitle]
  -[SFClientSubCredentialParams setAdamIDs:]
  -[SFClientSubCredentialParams setIssuerID:]
  -[SFClientSubCredentialParams initWithCoder:]


SFClientGetDeviceAssetsParams : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned short bluetoothProductID
 @property  unsigned int colorCode
 @property  NSString *model
 @property  double timeoutSeconds

  // class methods
  +[SFClientGetDeviceAssetsParams supportsSecureCoding]

  // instance methods
  -[SFClientGetDeviceAssetsParams timeoutSeconds]
  -[SFClientGetDeviceAssetsParams setColorCode:]
  -[SFClientGetDeviceAssetsParams setTimeoutSeconds:]
  -[SFClientGetDeviceAssetsParams .cxx_destruct]
  -[SFClientGetDeviceAssetsParams setModel:]
  -[SFClientGetDeviceAssetsParams encodeWithCoder:]
  -[SFClientGetDeviceAssetsParams colorCode]
  -[SFClientGetDeviceAssetsParams model]
  -[SFClientGetDeviceAssetsParams bluetoothProductID]
  -[SFClientGetDeviceAssetsParams setBluetoothProductID:]
  -[SFClientGetDeviceAssetsParams initWithCoder:]


SFClientGetDeviceAssetsResults : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *assetBundlePath

  // class methods
  +[SFClientGetDeviceAssetsResults supportsSecureCoding]

  // instance methods
  -[SFClientGetDeviceAssetsResults .cxx_destruct]
  -[SFClientGetDeviceAssetsResults encodeWithCoder:]
  -[SFClientGetDeviceAssetsResults assetBundlePath]
  -[SFClientGetDeviceAssetsResults setAssetBundlePath:]
  -[SFClientGetDeviceAssetsResults initWithCoder:]


SFContactInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *contactIdentifier
 @property  NSString *emailAddress
 @property  NSString *phoneNumber

  // class methods
  +[SFContactInfo supportsSecureCoding]

  // instance methods
  -[SFContactInfo setEmailAddress:]
  -[SFContactInfo phoneNumber]
  -[SFContactInfo setPhoneNumber:]
  -[SFContactInfo contactIdentifier]
  -[SFContactInfo .cxx_destruct]
  -[SFContactInfo encodeWithCoder:]
  -[SFContactInfo setContactIdentifier:]
  -[SFContactInfo emailAddress]
  -[SFContactInfo initWithCoder:]


SFPeopleSuggesterParams : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSArray *contactIDs
 @property  unsigned int flags
 @property  unsigned int maxPeople

  // class methods
  +[SFPeopleSuggesterParams supportsSecureCoding]

  // instance methods
  -[SFPeopleSuggesterParams setMaxPeople:]
  -[SFPeopleSuggesterParams maxPeople]
  -[SFPeopleSuggesterParams setFlags:]
  -[SFPeopleSuggesterParams contactIDs]
  -[SFPeopleSuggesterParams .cxx_destruct]
  -[SFPeopleSuggesterParams encodeWithCoder:]
  -[SFPeopleSuggesterParams setContactIDs:]
  -[SFPeopleSuggesterParams flags]
  -[SFPeopleSuggesterParams initWithCoder:]


SFPeopleSuggesterResult : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *contactID
 @property  unsigned int flags
 @property  NSArray *handles
 @property  NSString *sendersKnownAlias

  // class methods
  +[SFPeopleSuggesterResult supportsSecureCoding]

  // instance methods
  -[SFPeopleSuggesterResult setHandles:]
  -[SFPeopleSuggesterResult handles]
  -[SFPeopleSuggesterResult setSendersKnownAlias:]
  -[SFPeopleSuggesterResult setFlags:]
  -[SFPeopleSuggesterResult .cxx_destruct]
  -[SFPeopleSuggesterResult encodeWithCoder:]
  -[SFPeopleSuggesterResult setContactID:]
  -[SFPeopleSuggesterResult contactID]
  -[SFPeopleSuggesterResult sendersKnownAlias]
  -[SFPeopleSuggesterResult flags]
  -[SFPeopleSuggesterResult initWithCoder:]


SFClient : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler

  // instance methods
  -[SFClient retriggerProximityPairing:]
  -[SFClient _ensureXPCStarted]
  -[SFClient reenableProxCardType:completion:]
  -[SFClient init]
  -[SFClient triggerProximityAutoFillDetectedWithURL:completion:]
  -[SFClient contactIDForEmailHash:phoneHash:completion:]
  -[SFClient triggerHomeKitDeviceDetectedWithURL:completion:]
  -[SFClient getDeviceAssets:completion:]
  -[SFClient showDevicePickerWithInfo:completion:]
  -[SFClient dealloc]
  -[SFClient .cxx_destruct]
  -[SFClient dispatchQueue]
  -[SFClient testContinuityKeyboardBegin:]
  -[SFClient setInvalidationHandler:]
  -[SFClient preventExitForLocaleReason:]
  -[SFClient wifiPasswordSharingAvailabilityWithCompletion:]
  -[SFClient _invalidate]
  -[SFClient setDispatchQueue:]
  -[SFClient displayStringForContactIdentifier:deviceIdentifier:completion:]
  -[SFClient setInterruptionHandler:]
  -[SFClient openSetupURL:completion:]
  -[SFClient displayNameForEmailHash:phoneHash:completion:]
  -[SFClient setupDevice:home:completion:]
  -[SFClient interruptionHandler]
  -[SFClient repairDevice:flags:completion:]
  -[SFClient retriggerProximitySetup:]
  -[SFClient startProxCardTransactionWithOptions:completion:]
  -[SFClient subCredentialPresentCardWithParams:completion:]
  -[SFClient activateAssertionWithIdentifier:]
  -[SFClient _invalidated]
  -[SFClient appleIDInfoWithCompletion:]
  -[SFClient getPeopleSuggestions:completion:]
  -[SFClient activityStateWithCompletion:]
  -[SFClient invalidationHandler]
  -[SFClient _interrupted]
  -[SFClient repairDevice:completion:]
  -[SFClient invalidate]
  -[SFClient broadwayPresentCardWithCode:options:completion:]
  -[SFClient findContact:completion:]
  -[SFClient setAudioRoutingScore:completion:]


SFBatteryInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  double batteryLevel
 @property  long long batteryState
 @property  long long batteryType

  // class methods
  +[SFBatteryInfo supportsSecureCoding]

  // instance methods
  -[SFBatteryInfo batteryLevel]
  -[SFBatteryInfo encodeWithCoder:]
  -[SFBatteryInfo setBatteryLevel:]
  -[SFBatteryInfo batteryType]
  -[SFBatteryInfo setBatteryState:]
  -[SFBatteryInfo setBatteryType:]
  -[SFBatteryInfo batteryState]
  -[SFBatteryInfo initWithCoder:]


SFNotificationError : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  NSString *errorDescription

  // class methods
  +[SFNotificationError supportsSecureCoding]

  // instance methods
  -[SFNotificationError copyWithZone:]
  -[SFNotificationError setErrorDescription:]
  -[SFNotificationError errorDescription]
  -[SFNotificationError .cxx_destruct]
  -[SFNotificationError encodeWithCoder:]
  -[SFNotificationError initWithCoder:]


SFNotificationInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  SFNotificationInfo *mediumBubbleVersion
 @property  unsigned int notificationType
 @property  NSURL *attachmentURL
 @property  NSString *body
 @property  unsigned char deviceClass
 @property  SFNotificationError *error
 @property  NSString *header
 @property  unsigned char interactionBehavior
 @property  unsigned char interactionDirection
 @property  NSString *title

  // class methods
  +[SFNotificationInfo supportsSecureCoding]

  // instance methods
  -[SFNotificationInfo header]
  -[SFNotificationInfo copyWithZone:]
  -[SFNotificationInfo interactionDirection]
  -[SFNotificationInfo deviceClass]
  -[SFNotificationInfo notificationType]
  -[SFNotificationInfo setDeviceClass:]
  -[SFNotificationInfo setNotificationType:]
  -[SFNotificationInfo setError:]
  -[SFNotificationInfo .cxx_destruct]
  -[SFNotificationInfo setHeader:]
  -[SFNotificationInfo setBody:]
  -[SFNotificationInfo setTitle:]
  -[SFNotificationInfo encodeWithCoder:]
  -[SFNotificationInfo title]
  -[SFNotificationInfo body]
  -[SFNotificationInfo error]
  -[SFNotificationInfo attachmentURL]
  -[SFNotificationInfo setAttachmentURL:]
  -[SFNotificationInfo interactionBehavior]
  -[SFNotificationInfo setInteractionBehavior:]
  -[SFNotificationInfo setInteractionDirection:]
  -[SFNotificationInfo mediumBubbleVersion]
  -[SFNotificationInfo initWithCoder:]


SFBLEData : NSObject /usr/lib/libc++.1.dylib
 @property  NSData *data
 @property  @? completion

  // instance methods
  -[SFBLEData setData:]
  -[SFBLEData completion]
  -[SFBLEData setCompletion:]
  -[SFBLEData .cxx_destruct]
  -[SFBLEData data]


SFMessageSessionRequestEntry : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL allowUnencrypted
 @property  @? handler
 @property  NSDictionary *options

  // instance methods
  -[SFMessageSessionRequestEntry .cxx_destruct]
  -[SFMessageSessionRequestEntry options]
  -[SFMessageSessionRequestEntry handler]
  -[SFMessageSessionRequestEntry setOptions:]
  -[SFMessageSessionRequestEntry setHandler:]
  -[SFMessageSessionRequestEntry allowUnencrypted]
  -[SFMessageSessionRequestEntry setAllowUnencrypted:]


SFSessionRequestInfo : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *requestID
 @property  NSDictionary *options
 @property  NSDictionary *request
 @property  @? responseHandler

  // instance methods
  -[SFSessionRequestInfo requestID]
  -[SFSessionRequestInfo setRequestID:]
  -[SFSessionRequestInfo setRequest:]
  -[SFSessionRequestInfo .cxx_destruct]
  -[SFSessionRequestInfo options]
  -[SFSessionRequestInfo responseHandler]
  -[SFSessionRequestInfo setOptions:]
  -[SFSessionRequestInfo request]
  -[SFSessionRequestInfo setResponseHandler:]


SFContinuityRemoteSession : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  SFDevice *peerDevice

  // instance methods
  -[SFContinuityRemoteSession _run]
  -[SFContinuityRemoteSession init]
  -[SFContinuityRemoteSession setPeerDevice:]
  -[SFContinuityRemoteSession dealloc]
  -[SFContinuityRemoteSession .cxx_destruct]
  -[SFContinuityRemoteSession dispatchQueue]
  -[SFContinuityRemoteSession setInvalidationHandler:]
  -[SFContinuityRemoteSession _cleanup]
  -[SFContinuityRemoteSession setDispatchQueue:]
  -[SFContinuityRemoteSession setInterruptionHandler:]
  -[SFContinuityRemoteSession interruptionHandler]
  -[SFContinuityRemoteSession peerDevice]
  -[SFContinuityRemoteSession invalidationHandler]
  -[SFContinuityRemoteSession _sfSessionStart]
  -[SFContinuityRemoteSession _sendQueuedMesssages]
  -[SFContinuityRemoteSession sendCommand:]
  -[SFContinuityRemoteSession _sendCommand:options:]
  -[SFContinuityRemoteSession sendCommand:options:]
  -[SFContinuityRemoteSession invalidate]
  -[SFContinuityRemoteSession activateWithCompletion:]


SFCoordinatedAlertRequest : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, SFXPCInterface>
 @property  @? completionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  double timeout
 @property  long long type

  // class methods
  +[SFCoordinatedAlertRequest supportsSecureCoding]

  // instance methods
  -[SFCoordinatedAlertRequest _start]
  -[SFCoordinatedAlertRequest _ensureXPCStarted]
  -[SFCoordinatedAlertRequest init]
  -[SFCoordinatedAlertRequest timeout]
  -[SFCoordinatedAlertRequest setTimeout:]
  -[SFCoordinatedAlertRequest dealloc]
  -[SFCoordinatedAlertRequest setType:]
  -[SFCoordinatedAlertRequest .cxx_destruct]
  -[SFCoordinatedAlertRequest dispatchQueue]
  -[SFCoordinatedAlertRequest setInvalidationHandler:]
  -[SFCoordinatedAlertRequest encodeWithCoder:]
  -[SFCoordinatedAlertRequest _invalidate]
  -[SFCoordinatedAlertRequest setDispatchQueue:]
  -[SFCoordinatedAlertRequest type]
  -[SFCoordinatedAlertRequest _invalidated]
  -[SFCoordinatedAlertRequest _timeoutFired]
  -[SFCoordinatedAlertRequest completionHandler]
  -[SFCoordinatedAlertRequest invalidationHandler]
  -[SFCoordinatedAlertRequest _interrupted]
  -[SFCoordinatedAlertRequest invalidate]
  -[SFCoordinatedAlertRequest setCompletionHandler:]
  -[SFCoordinatedAlertRequest initWithCoder:]
  -[SFCoordinatedAlertRequest start]


SFAccessibilityClient : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[SFAccessibilityClient requestLabelForActivityWithSlotID:completionHandler:]


SFDevice : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *accountID
 @property  int audioRoutingScore
 @property  NSArray *batteryInfo
 @property  SFBLEDevice *bleDevice
 @property  NSString *contactIdentifier
 @property  unsigned char deviceActionType
 @property  unsigned char deviceClassCode
 @property  unsigned int deviceFlags
 @property  unsigned char deviceModelCode
 @property  long long distance
 @property  BOOL hasProblem
 @property  unsigned int hotspotInfo
 @property  NSString *idsIdentifier
 @property  BOOL idsIdentifierConflictDetected
 @property  NSString *model
 @property  NSString *name
 @property  BOOL needsSetup
 @property  unsigned char osVersion
 @property  BOOL paired
 @property  NSString *requestSSID
 @property  BOOL testMode
 @property  BOOL wakeDevice
 @property  BOOL autoUnlockEnabled
 @property  BOOL autoUnlockWatch
 @property  long long deviceType
 @property  BOOL duetSync
 @property  NSUUID *identifier
 @property  NSString *mediaRemoteID
 @property  NSString *mediaRouteID
 @property  BOOL needsAWDL
 @property  BOOL needsKeyboard
 @property  BOOL needsKeyboardOnly
 @property  unsigned long problemFlags
 @property  NSString *rapportIdentifier
 @property  unsigned int systemPairState
 @property  BOOL watchLocked
 @property  BOOL wifiP2P

  // class methods
  +[SFDevice supportsSecureCoding]

  // instance methods
  -[SFDevice deviceActionType]
  -[SFDevice paired]
  -[SFDevice duetSync]
  -[SFDevice setTestMode:]
  -[SFDevice wakeDevice]
  -[SFDevice setWatchLocked:]
  -[SFDevice testMode]
  -[SFDevice needsKeyboard]
  -[SFDevice hasProblem]
  -[SFDevice setOsVersion:]
  -[SFDevice distance]
  -[SFDevice requestSSID]
  -[SFDevice watchLocked]
  -[SFDevice autoUnlockEnabled]
  -[SFDevice needsSetup]
  -[SFDevice problemFlags]
  -[SFDevice setAutoUnlockWatch:]
  -[SFDevice autoUnlockWatch]
  -[SFDevice rapportIdentifier]
  -[SFDevice setSystemPairState:]
  -[SFDevice needsAWDL]
  -[SFDevice setDistance:]
  -[SFDevice setDeviceClassCode:]
  -[SFDevice deviceModelCode]
  -[SFDevice updateWithPairedPeer:]
  -[SFDevice audioRoutingScore]
  -[SFDevice wifiP2P]
  -[SFDevice osVersion]
  -[SFDevice updateWithBLEDevice:]
  -[SFDevice setWakeDevice:]
  -[SFDevice init]
  -[SFDevice setHotspotInfo:]
  -[SFDevice mediaRemoteID]
  -[SFDevice deviceFlags]
  -[SFDevice setAccountID:]
  -[SFDevice mediaRouteID]
  -[SFDevice deviceType]
  -[SFDevice setNeedsSetup:]
  -[SFDevice contactIdentifier]
  -[SFDevice .cxx_destruct]
  -[SFDevice name]
  -[SFDevice setModel:]
  -[SFDevice idsIdentifierConflictDetected]
  -[SFDevice deviceClassCode]
  -[SFDevice setIdentifier:]
  -[SFDevice encodeWithCoder:]
  -[SFDevice identifier]
  -[SFDevice systemPairState]
  -[SFDevice batteryInfo]
  -[SFDevice setDeviceActionType:]
  -[SFDevice needsKeyboardOnly]
  -[SFDevice setBatteryInfo:]
  -[SFDevice setPaired:]
  -[SFDevice hotspotInfo]
  -[SFDevice updateWithRPIdentity:]
  -[SFDevice setHasProblem:]
  -[SFDevice setAudioRoutingScore:]
  -[SFDevice setBleDevice:]
  -[SFDevice setContactIdentifier:]
  -[SFDevice setDeviceModelCode:]
  -[SFDevice setDeviceFlags:]
  -[SFDevice model]
  -[SFDevice idsIdentifier]
  -[SFDevice setIdsIdentifier:]
  -[SFDevice bleDevice]
  -[SFDevice accountID]
  -[SFDevice setName:]
  -[SFDevice setAutoUnlockEnabled:]
  -[SFDevice initWithCoder:]
  -[SFDevice setRequestSSID:]


SFDeviceDiscovery : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, SFXPCInterface>
 @property  long long scanRateOverride
 @property  @? scanStateChangedHandler
 @property  unsigned int changeFlags
 @property  NSSet *deviceFilter
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? deviceChangedHandler
 @property  unsigned long discoveryFlags
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  long long fastScanMode
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  BOOL overrideScreenOff
 @property  NSString *purpose
 @property  long long rssiThreshold
 @property  BOOL scanCache
 @property  long long scanRate
 @property  long long scanState
 @property  BOOL targetUserSession
 @property  double timeout
 @property  @? timeoutHandler
 @property  BOOL trackPeers

  // class methods
  +[SFDeviceDiscovery supportsSecureCoding]

  // instance methods
  -[SFDeviceDiscovery _activateWithCompletion:]
  -[SFDeviceDiscovery scanState]
  -[SFDeviceDiscovery setRssiThreshold:]
  -[SFDeviceDiscovery scanCache]
  -[SFDeviceDiscovery rssiThreshold]
  -[SFDeviceDiscovery setPurpose:]
  -[SFDeviceDiscovery setScanCache:]
  -[SFDeviceDiscovery _ensureXPCStarted]
  -[SFDeviceDiscovery setFastScanMode:]
  -[SFDeviceDiscovery setScanStateChangedHandler:]
  -[SFDeviceDiscovery init]
  -[SFDeviceDiscovery _invokeBlockActivateSafe:]
  -[SFDeviceDiscovery timeout]
  -[SFDeviceDiscovery deviceFoundHandler]
  -[SFDeviceDiscovery setDeviceChangedHandler:]
  -[SFDeviceDiscovery setTimeout:]
  -[SFDeviceDiscovery setChangeFlags:]
  -[SFDeviceDiscovery dealloc]
  -[SFDeviceDiscovery targetUserSession]
  -[SFDeviceDiscovery setDeviceFilter:]
  -[SFDeviceDiscovery purpose]
  -[SFDeviceDiscovery .cxx_destruct]
  -[SFDeviceDiscovery scanRate]
  -[SFDeviceDiscovery setOverrideScreenOff:]
  -[SFDeviceDiscovery deviceDiscoveryLostDevice:]
  -[SFDeviceDiscovery deviceChangedHandler]
  -[SFDeviceDiscovery dispatchQueue]
  -[SFDeviceDiscovery setDeviceFoundHandler:]
  -[SFDeviceDiscovery setInvalidationHandler:]
  -[SFDeviceDiscovery setDeviceLostHandler:]
  -[SFDeviceDiscovery encodeWithCoder:]
  -[SFDeviceDiscovery _startTimeoutIfNeeded]
  -[SFDeviceDiscovery scanStateChangedHandler]
  -[SFDeviceDiscovery setDispatchQueue:]
  -[SFDeviceDiscovery deviceLostHandler]
  -[SFDeviceDiscovery scanRateOverride]
  -[SFDeviceDiscovery setInterruptionHandler:]
  -[SFDeviceDiscovery changeFlags]
  -[SFDeviceDiscovery interruptionHandler]
  -[SFDeviceDiscovery setTargetUserSession:]
  -[SFDeviceDiscovery timeoutHandler]
  -[SFDeviceDiscovery deviceDiscoveryDeviceChanged:changes:]
  -[SFDeviceDiscovery discoveryFlags]
  -[SFDeviceDiscovery overrideScreenOff]
  -[SFDeviceDiscovery deviceFilter]
  -[SFDeviceDiscovery _invalidated]
  -[SFDeviceDiscovery setTrackPeers:]
  -[SFDeviceDiscovery _retryConsole]
  -[SFDeviceDiscovery fastScanMode]
  -[SFDeviceDiscovery setScanRate:]
  -[SFDeviceDiscovery fastScanTrigger:]
  -[SFDeviceDiscovery deviceDiscoveryScanStateChanged:]
  -[SFDeviceDiscovery invalidationHandler]
  -[SFDeviceDiscovery _interrupted]
  -[SFDeviceDiscovery setTimeoutHandler:]
  -[SFDeviceDiscovery deviceDiscoveryFoundDevice:]
  -[SFDeviceDiscovery invalidate]
  -[SFDeviceDiscovery fastScanCancel:]
  -[SFDeviceDiscovery activateWithCompletion:]
  -[SFDeviceDiscovery setDiscoveryFlags:]
  -[SFDeviceDiscovery setScanRateOverride:]
  -[SFDeviceDiscovery initWithCoder:]
  -[SFDeviceDiscovery _timeoutTimerFired]
  -[SFDeviceDiscovery trackPeers]


SFDeviceOperationCDPSetup : NSObject /usr/lib/libc++.1.dylib <CDPUIDelegate>
 @property  @? completionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  double metricSeconds
 @property  id presentingViewController
 @property  SFSession *sfSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFDeviceOperationCDPSetup _run]
  -[SFDeviceOperationCDPSetup init]
  -[SFDeviceOperationCDPSetup activate]
  -[SFDeviceOperationCDPSetup setPresentingViewController:]
  -[SFDeviceOperationCDPSetup presentingViewController]
  -[SFDeviceOperationCDPSetup .cxx_destruct]
  -[SFDeviceOperationCDPSetup dispatchQueue]
  -[SFDeviceOperationCDPSetup _activate]
  -[SFDeviceOperationCDPSetup setDispatchQueue:]
  -[SFDeviceOperationCDPSetup completionHandler]
  -[SFDeviceOperationCDPSetup invalidate]
  -[SFDeviceOperationCDPSetup _runCDPApprovalServerStart]
  -[SFDeviceOperationCDPSetup _runCDPSetupRequest]
  -[SFDeviceOperationCDPSetup uiController:didPresentRootViewController:]
  -[SFDeviceOperationCDPSetup metricSeconds]
  -[SFDeviceOperationCDPSetup setSfSession:]
  -[SFDeviceOperationCDPSetup setCompletionHandler:]
  -[SFDeviceOperationCDPSetup sfSession]
  -[SFDeviceOperationCDPSetup _complete:]


SFDeviceOperationHandlerCDPSetup : NSObject /usr/lib/libc++.1.dylib <CDPStateUIProvider>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL failIfCDPNotEnabled
 @property  SFSession *sfSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFDeviceOperationHandlerCDPSetup init]
  -[SFDeviceOperationHandlerCDPSetup activate]
  -[SFDeviceOperationHandlerCDPSetup .cxx_destruct]
  -[SFDeviceOperationHandlerCDPSetup dispatchQueue]
  -[SFDeviceOperationHandlerCDPSetup _activate]
  -[SFDeviceOperationHandlerCDPSetup setDispatchQueue:]
  -[SFDeviceOperationHandlerCDPSetup invalidate]
  -[SFDeviceOperationHandlerCDPSetup setSfSession:]
  -[SFDeviceOperationHandlerCDPSetup _handleCDPSetupRequest:responseHandler:]
  -[SFDeviceOperationHandlerCDPSetup failIfCDPNotEnabled]
  -[SFDeviceOperationHandlerCDPSetup cdpContext:promptForAdoptionOfMultipleICSC:]
  -[SFDeviceOperationHandlerCDPSetup cdpContext:promptForRemoteSecretWithDevices:offeringRemoteApproval:validator:]
  -[SFDeviceOperationHandlerCDPSetup cdpContext:promptForICSCWithIsNumeric:numericLength:isRandom:validator:]
  -[SFDeviceOperationHandlerCDPSetup cdpContext:promptForInteractiveAuthenticationWithCompletion:]
  -[SFDeviceOperationHandlerCDPSetup cdpContext:promptForLocalSecretWithCompletion:]
  -[SFDeviceOperationHandlerCDPSetup setFailIfCDPNotEnabled:]
  -[SFDeviceOperationHandlerCDPSetup sfSession]


SFDeviceOperationHomeKitSetup : NSObject /usr/lib/libc++.1.dylib <HMAccessoryBrowserDelegate, HMHomeManagerDelegate, HMHomeManagerDelegatePrivate>
 @property  NSDictionary *appDataSelf
 @property  @? completionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL userInteractive
 @property  BOOL hasHomePod
 @property  BOOL hasMultipleUsers
 @property  HMHome *homeKitSelectedHome
 @property  NSString *homeKitSelectedRoomName
 @property  NSString *iTunesAccountID
 @property  ACAccount *iTunesAccount
 @property  BOOL keyExchangeOnly
 @property  double metricNonUserSeconds
 @property  double metricUserSeconds
 @property  BOOL pauseAfterUserInput
 @property  @? pauseHandler
 @property  BOOL personalRequestsEnabled
 @property  @? promptForHomeHandler
 @property  @? promptForRoomHandler
 @property  @? promptToInstallHomeAppHandler
 @property  HMAccessory *stereoCounterpart
 @property  int stereoRole
 @property  TRSession *trSession
 @property  double timeoutInSeconds
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFDeviceOperationHomeKitSetup _run]
  -[SFDeviceOperationHomeKitSetup homeManagerDidUpdateHomes:]
  -[SFDeviceOperationHomeKitSetup init]
  -[SFDeviceOperationHomeKitSetup activate]
  -[SFDeviceOperationHomeKitSetup resume]
  -[SFDeviceOperationHomeKitSetup iTunesAccount]
  -[SFDeviceOperationHomeKitSetup .cxx_destruct]
  -[SFDeviceOperationHomeKitSetup dispatchQueue]
  -[SFDeviceOperationHomeKitSetup userInteractive]
  -[SFDeviceOperationHomeKitSetup homeManager:didUpdateStatus:]
  -[SFDeviceOperationHomeKitSetup _completeWithError:]
  -[SFDeviceOperationHomeKitSetup _cleanup]
  -[SFDeviceOperationHomeKitSetup setDispatchQueue:]
  -[SFDeviceOperationHomeKitSetup setITunesAccount:]
  -[SFDeviceOperationHomeKitSetup _normalizedString:]
  -[SFDeviceOperationHomeKitSetup _runInit]
  -[SFDeviceOperationHomeKitSetup _isOwnerOfHome:]
  -[SFDeviceOperationHomeKitSetup completionHandler]
  -[SFDeviceOperationHomeKitSetup invalidate]
  -[SFDeviceOperationHomeKitSetup selectHome:]
  -[SFDeviceOperationHomeKitSetup setCompletionHandler:]
  -[SFDeviceOperationHomeKitSetup _restoreHomeApp]
  -[SFDeviceOperationHomeKitSetup _startTimeout:]
  -[SFDeviceOperationHomeKitSetup _runHomeKitAutoSelectHome:]
  -[SFDeviceOperationHomeKitSetup _updateHomeStats]
  -[SFDeviceOperationHomeKitSetup _runHomeKitSelectRoom]
  -[SFDeviceOperationHomeKitSetup _runHomeKitDeviceSetup]
  -[SFDeviceOperationHomeKitSetup _runHomeKitAddAccessory]
  -[SFDeviceOperationHomeKitSetup _runHomeKitSetupRoom]
  -[SFDeviceOperationHomeKitSetup _runHomeKitAssignRoom]
  -[SFDeviceOperationHomeKitSetup _runHomeKitAddAppData]
  -[SFDeviceOperationHomeKitSetup _runHomeKitConfigureStereoPairAndReturnError:]
  -[SFDeviceOperationHomeKitSetup _runPersonalRequestsStart]
  -[SFDeviceOperationHomeKitSetup _runHomeKitAddHome]
  -[SFDeviceOperationHomeKitSetup _removeSimilarRoomNames:home:]
  -[SFDeviceOperationHomeKitSetup _updateAccount]
  -[SFDeviceOperationHomeKitSetup _mediaSystemForAccessory:]
  -[SFDeviceOperationHomeKitSetup homeManagerDidUpdateDataSyncState:]
  -[SFDeviceOperationHomeKitSetup accessoryBrowser:didFindNewAccessory:]
  -[SFDeviceOperationHomeKitSetup accessoryBrowser:didRemoveNewAccessory:]
  -[SFDeviceOperationHomeKitSetup homeAppInstallChoice:]
  -[SFDeviceOperationHomeKitSetup timeoutInSeconds]
  -[SFDeviceOperationHomeKitSetup reselectHome]
  -[SFDeviceOperationHomeKitSetup selectRoom:]
  -[SFDeviceOperationHomeKitSetup findStereoCounterpartsWithSupportedVersions:]
  -[SFDeviceOperationHomeKitSetup appDataSelf]
  -[SFDeviceOperationHomeKitSetup setAppDataSelf:]
  -[SFDeviceOperationHomeKitSetup setUserInteractive:]
  -[SFDeviceOperationHomeKitSetup hasHomePod]
  -[SFDeviceOperationHomeKitSetup hasMultipleUsers]
  -[SFDeviceOperationHomeKitSetup homeKitSelectedHome]
  -[SFDeviceOperationHomeKitSetup iTunesAccountID]
  -[SFDeviceOperationHomeKitSetup homeKitSelectedRoomName]
  -[SFDeviceOperationHomeKitSetup setITunesAccountID:]
  -[SFDeviceOperationHomeKitSetup keyExchangeOnly]
  -[SFDeviceOperationHomeKitSetup setKeyExchangeOnly:]
  -[SFDeviceOperationHomeKitSetup metricNonUserSeconds]
  -[SFDeviceOperationHomeKitSetup metricUserSeconds]
  -[SFDeviceOperationHomeKitSetup pauseAfterUserInput]
  -[SFDeviceOperationHomeKitSetup setPauseAfterUserInput:]
  -[SFDeviceOperationHomeKitSetup pauseHandler]
  -[SFDeviceOperationHomeKitSetup setPauseHandler:]
  -[SFDeviceOperationHomeKitSetup personalRequestsEnabled]
  -[SFDeviceOperationHomeKitSetup setPersonalRequestsEnabled:]
  -[SFDeviceOperationHomeKitSetup promptForHomeHandler]
  -[SFDeviceOperationHomeKitSetup setPromptForHomeHandler:]
  -[SFDeviceOperationHomeKitSetup promptForRoomHandler]
  -[SFDeviceOperationHomeKitSetup setPromptForRoomHandler:]
  -[SFDeviceOperationHomeKitSetup stereoCounterpart]
  -[SFDeviceOperationHomeKitSetup promptToInstallHomeAppHandler]
  -[SFDeviceOperationHomeKitSetup setPromptToInstallHomeAppHandler:]
  -[SFDeviceOperationHomeKitSetup setStereoCounterpart:]
  -[SFDeviceOperationHomeKitSetup stereoRole]
  -[SFDeviceOperationHomeKitSetup setStereoRole:]
  -[SFDeviceOperationHomeKitSetup setTrSession:]
  -[SFDeviceOperationHomeKitSetup setTimeoutInSeconds:]
  -[SFDeviceOperationHomeKitSetup trSession]


SFDeviceOperationWiFiSetup : NSObject /usr/lib/libc++.1.dylib
 @property  int bonjourTestState
 @property  @? completionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  double metricBonjourTestSeconds
 @property  double metricTotalSeconds
 @property  double metricWiFiSetupSeconds
 @property  unsigned int repairFlags
 @property  unsigned int setupFlags
 @property  SFSession *sfSession

  // instance methods
  -[SFDeviceOperationWiFiSetup init]
  -[SFDeviceOperationWiFiSetup activate]
  -[SFDeviceOperationWiFiSetup .cxx_destruct]
  -[SFDeviceOperationWiFiSetup dispatchQueue]
  -[SFDeviceOperationWiFiSetup _activate]
  -[SFDeviceOperationWiFiSetup setDispatchQueue:]
  -[SFDeviceOperationWiFiSetup completionHandler]
  -[SFDeviceOperationWiFiSetup setupFlags]
  -[SFDeviceOperationWiFiSetup setSetupFlags:]
  -[SFDeviceOperationWiFiSetup invalidate]
  -[SFDeviceOperationWiFiSetup setSfSession:]
  -[SFDeviceOperationWiFiSetup setCompletionHandler:]
  -[SFDeviceOperationWiFiSetup _activate2]
  -[SFDeviceOperationWiFiSetup _setupResponse:]
  -[SFDeviceOperationWiFiSetup _bonjourTestFoundDevice:]
  -[SFDeviceOperationWiFiSetup _bonjourTestTimeout]
  -[SFDeviceOperationWiFiSetup _bonjourTestStart]
  -[SFDeviceOperationWiFiSetup bonjourTestState]
  -[SFDeviceOperationWiFiSetup metricBonjourTestSeconds]
  -[SFDeviceOperationWiFiSetup metricTotalSeconds]
  -[SFDeviceOperationWiFiSetup metricWiFiSetupSeconds]
  -[SFDeviceOperationWiFiSetup repairFlags]
  -[SFDeviceOperationWiFiSetup setRepairFlags:]
  -[SFDeviceOperationWiFiSetup sfSession]
  -[SFDeviceOperationWiFiSetup _complete:]


SFDeviceOperationHandlerWiFiSetup : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFSession *sfSession

  // instance methods
  -[SFDeviceOperationHandlerWiFiSetup _run]
  -[SFDeviceOperationHandlerWiFiSetup init]
  -[SFDeviceOperationHandlerWiFiSetup activate]
  -[SFDeviceOperationHandlerWiFiSetup .cxx_destruct]
  -[SFDeviceOperationHandlerWiFiSetup dispatchQueue]
  -[SFDeviceOperationHandlerWiFiSetup _activate]
  -[SFDeviceOperationHandlerWiFiSetup setDispatchQueue:]
  -[SFDeviceOperationHandlerWiFiSetup invalidate]
  -[SFDeviceOperationHandlerWiFiSetup setSfSession:]
  -[SFDeviceOperationHandlerWiFiSetup sfSession]
  -[SFDeviceOperationHandlerWiFiSetup _handleRequestBonjourTestStart:responseHandler:]
  -[SFDeviceOperationHandlerWiFiSetup _handleRequestBonjourTestDone:responseHandler:]
  -[SFDeviceOperationHandlerWiFiSetup _handleWiFiSetupRequest:responseHandler:]
  -[SFDeviceOperationHandlerWiFiSetup _runScanStart:]
  -[SFDeviceOperationHandlerWiFiSetup _runJoinStart:]
  -[SFDeviceOperationHandlerWiFiSetup _runReachabilityStart]
  -[SFDeviceOperationHandlerWiFiSetup _completeError:]
  -[SFDeviceOperationHandlerWiFiSetup _runScanResults:error:channel:]


SFDeviceAssetQuery : NSObject /usr/lib/libc++.1.dylib
 @property  ^{LogCategory=ii*I**i^{LogCategory}^{LogOutput}^{LogOutput}QQII*^{LogCategoryPrivate}} ucat
 @property  NSString *stringIdentifier
 @property  NSString *variantIdentifier
 @property  NSString *assetType
 @property  BOOL h264
 @property  unsigned long version
 @property  NSString *productType
 @property  NSString *mappedProductType
 @property  NSString *effectiveProductType
 @property  NSString *color
 @property  NSDictionary *additionalQueryParameters
 @property  BOOL legacyAsset

  // class methods
  +[SFDeviceAssetQuery deviceWantsH264]

  // instance methods
  -[SFDeviceAssetQuery assetType]
  -[SFDeviceAssetQuery ucat]
  -[SFDeviceAssetQuery h264]
  -[SFDeviceAssetQuery productType]
  -[SFDeviceAssetQuery dealloc]
  -[SFDeviceAssetQuery .cxx_destruct]
  -[SFDeviceAssetQuery color]
  -[SFDeviceAssetQuery stringIdentifier]
  -[SFDeviceAssetQuery effectiveProductType]
  -[SFDeviceAssetQuery legacyAsset]
  -[SFDeviceAssetQuery setMappedProductType:]
  -[SFDeviceAssetQuery additionalQueryParameters]
  -[SFDeviceAssetQuery isEqual:]
  -[SFDeviceAssetQuery setH264:]
  -[SFDeviceAssetQuery version]
  -[SFDeviceAssetQuery variantIdentifier]
  -[SFDeviceAssetQuery initWithAssetType:productType:]
  -[SFDeviceAssetQuery loggingProductType]
  -[SFDeviceAssetQuery mappedProductType]
  -[SFDeviceAssetQuery initWithHomePodColor:]
  -[SFDeviceAssetQuery initWithBluetoothProductIdentifier:color:]
  -[SFDeviceAssetQuery initWithProductType:additionalQueryParameters:]
  -[SFDeviceAssetQuery setLegacyAsset:]


SFDeviceRepairService : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned long problemFlags
 @property  @? progressHandler

  // instance methods
  -[SFDeviceRepairService problemFlags]
  -[SFDeviceRepairService init]
  -[SFDeviceRepairService activate]
  -[SFDeviceRepairService .cxx_destruct]
  -[SFDeviceRepairService dispatchQueue]
  -[SFDeviceRepairService setProgressHandler:]
  -[SFDeviceRepairService setProblemFlags:]
  -[SFDeviceRepairService progressHandler]
  -[SFDeviceRepairService _handleSessionEnded:]
  -[SFDeviceRepairService _handleTRCompanionAuthenticationRequest:responseHandler:]
  -[SFDeviceRepairService _handleTRProxyDeviceRequest:responseHandler:]
  -[SFDeviceRepairService _handleTRProxyAuthenticationRequest:responseHandler:]
  -[SFDeviceRepairService _nextServiceTypeForTRAccountServices:]
  -[SFDeviceRepairService _authenticateWithServiceTypes:authResults:completion:]
  -[SFDeviceRepairService _authenticateAccount:serviceType:companionDevice:anisetteDataProvider:completion:]
  -[SFDeviceRepairService _saveRemoteVerifiedAccount:completion:]
  -[SFDeviceRepairService _authenticateAccount:serviceType:password:completion:]
  -[SFDeviceRepairService _nextTRServiceTypeForTRAccountServices:]
  -[SFDeviceRepairService _authenticateiCloudWithAuthResults:completion:]
  -[SFDeviceRepairService _authenticateWithServiceType:authResults:completion:]
  -[SFDeviceRepairService _authenticateiTunesWithAuthResults:completion:]
  -[SFDeviceRepairService _invalidate]
  -[SFDeviceRepairService setDispatchQueue:]
  -[SFDeviceRepairService invalidateWithFlags:]
  -[SFDeviceRepairService _sfServiceStart]
  -[SFDeviceRepairService invalidate]
  -[SFDeviceRepairService _saveAccount:completion:]
  -[SFDeviceRepairService _handleSessionStarted:]
  -[SFDeviceRepairService _handleGetProblemsRequest:responseHandler:]
  -[SFDeviceRepairService _handleFinishRequest:responseHandler:]


SFDeviceRepairSession : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *idsIdentifier
 @property  SFDevice *peerDevice
 @property  UIViewController *presentingViewController
 @property  @? progressHandler
 @property  unsigned int repairFlags
 @property  unsigned long triggerMs

  // instance methods
  -[SFDeviceRepairSession _run]
  -[SFDeviceRepairSession _runPreflightWiFiEarly]
  -[SFDeviceRepairSession _runGetProblems]
  -[SFDeviceRepairSession _runPreflightWiFiFull]
  -[SFDeviceRepairSession _runWiFiSetup]
  -[SFDeviceRepairSession _runCDPSetup]
  -[SFDeviceRepairSession _runHomeKitSetup]
  -[SFDeviceRepairSession setTriggerMs:]
  -[SFDeviceRepairSession init]
  -[SFDeviceRepairSession activate]
  -[SFDeviceRepairSession setPeerDevice:]
  -[SFDeviceRepairSession dealloc]
  -[SFDeviceRepairSession setPresentingViewController:]
  -[SFDeviceRepairSession presentingViewController]
  -[SFDeviceRepairSession .cxx_destruct]
  -[SFDeviceRepairSession dispatchQueue]
  -[SFDeviceRepairSession setProgressHandler:]
  -[SFDeviceRepairSession progressHandler]
  -[SFDeviceRepairSession _cleanup]
  -[SFDeviceRepairSession _reportError:]
  -[SFDeviceRepairSession setDispatchQueue:]
  -[SFDeviceRepairSession _runSFSessionStart]
  -[SFDeviceRepairSession _runPairVerify]
  -[SFDeviceRepairSession _runTRSessionStart]
  -[SFDeviceRepairSession _runTRAuthentication]
  -[SFDeviceRepairSession peerDevice]
  -[SFDeviceRepairSession _runFinish]
  -[SFDeviceRepairSession idsIdentifier]
  -[SFDeviceRepairSession invalidate]
  -[SFDeviceRepairSession repairFlags]
  -[SFDeviceRepairSession setRepairFlags:]
  -[SFDeviceRepairSession triggerMs]


SFDeviceSetupAppleTVService : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? progressHandler

  // instance methods
  -[SFDeviceSetupAppleTVService init]
  -[SFDeviceSetupAppleTVService _handlePreAuthRequest:responseHandler:]
  -[SFDeviceSetupAppleTVService _handleBasicConfigRequest:responseHandler:]
  -[SFDeviceSetupAppleTVService _handleTVLatencyProgressEvent:info:]
  -[SFDeviceSetupAppleTVService _handleTVLatencyRequest:responseHandler:]
  -[SFDeviceSetupAppleTVService _reportProgress:info:]
  -[SFDeviceSetupAppleTVService activate]
  -[SFDeviceSetupAppleTVService dealloc]
  -[SFDeviceSetupAppleTVService .cxx_destruct]
  -[SFDeviceSetupAppleTVService dispatchQueue]
  -[SFDeviceSetupAppleTVService setProgressHandler:]
  -[SFDeviceSetupAppleTVService progressHandler]
  -[SFDeviceSetupAppleTVService _handleSessionEnded:]
  -[SFDeviceSetupAppleTVService _activate]
  -[SFDeviceSetupAppleTVService _cleanup]
  -[SFDeviceSetupAppleTVService _invalidate]
  -[SFDeviceSetupAppleTVService setDispatchQueue:]
  -[SFDeviceSetupAppleTVService _sfServiceStart]
  -[SFDeviceSetupAppleTVService invalidate]
  -[SFDeviceSetupAppleTVService _handleSessionStarted:]
  -[SFDeviceSetupAppleTVService _handleFinishRequest:responseHandler:]


SFDeviceSetupAppleTVSession : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFDevice *peerDevice
 @property  unsigned long peerFeatureFlags
 @property  UIViewController *presentingViewController
 @property  @? progressHandler
 @property  @? promptForHomeHandler
 @property  @? promptForHomeiCloudHandler
 @property  @? promptForPINHandler
 @property  @? promptForRoomHandler

  // instance methods
  -[SFDeviceSetupAppleTVSession _run]
  -[SFDeviceSetupAppleTVSession _runCDPSetup]
  -[SFDeviceSetupAppleTVSession _runHomeKitSetup]
  -[SFDeviceSetupAppleTVSession init]
  -[SFDeviceSetupAppleTVSession pairSetupTryPIN:]
  -[SFDeviceSetupAppleTVSession promptForPINHandler]
  -[SFDeviceSetupAppleTVSession setPromptForPINHandler:]
  -[SFDeviceSetupAppleTVSession _reportProgress:info:]
  -[SFDeviceSetupAppleTVSession _runFinish:]
  -[SFDeviceSetupAppleTVSession _runPreflightWiFi]
  -[SFDeviceSetupAppleTVSession _runPreflightiTunes]
  -[SFDeviceSetupAppleTVSession _runPreflightHomeKit]
  -[SFDeviceSetupAppleTVSession _runPreAuth]
  -[SFDeviceSetupAppleTVSession activate]
  -[SFDeviceSetupAppleTVSession _runHomeKitUserInput]
  -[SFDeviceSetupAppleTVSession _runBasicConfig]
  -[SFDeviceSetupAppleTVSession _runTRSetupConfiguration]
  -[SFDeviceSetupAppleTVSession _runTRNetwork]
  -[SFDeviceSetupAppleTVSession _runTRActivation]
  -[SFDeviceSetupAppleTVSession _runTVLatencySetup]
  -[SFDeviceSetupAppleTVSession _runTRCompletion]
  -[SFDeviceSetupAppleTVSession _reportError:label:]
  -[SFDeviceSetupAppleTVSession _homeKitUpdateiCloudSwitchState:]
  -[SFDeviceSetupAppleTVSession _runPreAuthRequest]
  -[SFDeviceSetupAppleTVSession _runPreAuthResponse:error:]
  -[SFDeviceSetupAppleTVSession _runBasicConfigRequest]
  -[SFDeviceSetupAppleTVSession _videoSubscriberAccountData]
  -[SFDeviceSetupAppleTVSession _runBasicConfigResponse:error:]
  -[SFDeviceSetupAppleTVSession _verifyiCloudMatch:error:]
  -[SFDeviceSetupAppleTVSession _runTVLatencySetupRequest]
  -[SFDeviceSetupAppleTVSession _runTVLatencySetupEstimate]
  -[SFDeviceSetupAppleTVSession _runTVLatencySetupProgressEvent:info:]
  -[SFDeviceSetupAppleTVSession homeiCloudEnable]
  -[SFDeviceSetupAppleTVSession _runTVLatencySetupEnded:]
  -[SFDeviceSetupAppleTVSession homeKitSelectHome:]
  -[SFDeviceSetupAppleTVSession homeKitSelectRoom:]
  -[SFDeviceSetupAppleTVSession peerFeatureFlags]
  -[SFDeviceSetupAppleTVSession setPeerFeatureFlags:]
  -[SFDeviceSetupAppleTVSession promptForHomeiCloudHandler]
  -[SFDeviceSetupAppleTVSession setPromptForHomeiCloudHandler:]
  -[SFDeviceSetupAppleTVSession setPeerDevice:]
  -[SFDeviceSetupAppleTVSession dealloc]
  -[SFDeviceSetupAppleTVSession setPresentingViewController:]
  -[SFDeviceSetupAppleTVSession presentingViewController]
  -[SFDeviceSetupAppleTVSession .cxx_destruct]
  -[SFDeviceSetupAppleTVSession dispatchQueue]
  -[SFDeviceSetupAppleTVSession setProgressHandler:]
  -[SFDeviceSetupAppleTVSession progressHandler]
  -[SFDeviceSetupAppleTVSession _cleanup]
  -[SFDeviceSetupAppleTVSession setDispatchQueue:]
  -[SFDeviceSetupAppleTVSession _runSFSessionStart]
  -[SFDeviceSetupAppleTVSession _runPairSetup]
  -[SFDeviceSetupAppleTVSession _runTRSessionStart]
  -[SFDeviceSetupAppleTVSession _runTRAuthentication]
  -[SFDeviceSetupAppleTVSession peerDevice]
  -[SFDeviceSetupAppleTVSession invalidate]
  -[SFDeviceSetupAppleTVSession promptForHomeHandler]
  -[SFDeviceSetupAppleTVSession setPromptForHomeHandler:]
  -[SFDeviceSetupAppleTVSession promptForRoomHandler]
  -[SFDeviceSetupAppleTVSession setPromptForRoomHandler:]


SFDeviceAssetRequestConfiguration : NSObject /usr/lib/libc++.1.dylib
 @property  @? queryResultHandler
 @property  double timeout
 @property  @? downloadCompletionHandler

  // instance methods
  -[SFDeviceAssetRequestConfiguration timeout]
  -[SFDeviceAssetRequestConfiguration initWithQueryResultHandler:]
  -[SFDeviceAssetRequestConfiguration setDownloadCompletionHandler:]
  -[SFDeviceAssetRequestConfiguration setTimeout:]
  -[SFDeviceAssetRequestConfiguration .cxx_destruct]
  -[SFDeviceAssetRequestConfiguration queryResultHandler]
  -[SFDeviceAssetRequestConfiguration downloadCompletionHandler]


SFRSSIQueue : NSObject /usr/lib/libc++.1.dylib
 @property  double velocity
 @property  double velocitySmoothed

  // instance methods
  -[SFRSSIQueue velocityFromA:toB:]
  -[SFRSSIQueue addSample:atTicks:]
  -[SFRSSIQueue velocitySmoothed]
  -[SFRSSIQueue velocity]
  -[SFRSSIQueue .cxx_destruct]


SFBubbleEstimator : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL insideBubble
 @property  BOOL insideBubbleWithThreshold
 @property  BOOL preventBoost
 @property  long long rssiEnter
 @property  long long rssiExit
 @property  double thresholdSeconds
 @property  double velocity
 @property  double velocitySmoothed

  // class methods
  +[SFBubbleEstimator estimatorWithEnter:exit:]
  +[SFBubbleEstimator estimatorWithEnter:exit:threshold:]

  // instance methods
  -[SFBubbleEstimator rssiExit]
  -[SFBubbleEstimator velocitySmoothed]
  -[SFBubbleEstimator setRssiEnter:]
  -[SFBubbleEstimator setRssiExit:]
  -[SFBubbleEstimator setThresholdSeconds:]
  -[SFBubbleEstimator shouldExpandBubble]
  -[SFBubbleEstimator updateWithRSSI:]
  -[SFBubbleEstimator insideBubbleWithThreshold]
  -[SFBubbleEstimator preventBoost]
  -[SFBubbleEstimator setPreventBoost:]
  -[SFBubbleEstimator thresholdSeconds]
  -[SFBubbleEstimator velocity]
  -[SFBubbleEstimator .cxx_destruct]
  -[SFBubbleEstimator insideBubble]
  -[SFBubbleEstimator reset]
  -[SFBubbleEstimator rssiEnter]


SFDeviceSetupB238Service : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? progressHandler

  // instance methods
  -[SFDeviceSetupB238Service init]
  -[SFDeviceSetupB238Service _handlePreAuthRequest:responseHandler:]
  -[SFDeviceSetupB238Service activate]
  -[SFDeviceSetupB238Service _handleSiriDialogIdentifier:]
  -[SFDeviceSetupB238Service _handleRawRequest:flags:responseHandler:]
  -[SFDeviceSetupB238Service _playReadyToSetupSound]
  -[SFDeviceSetupB238Service _handleAuthActionRequest:responseHandler:]
  -[SFDeviceSetupB238Service _handlePlaySoundRequest:responseHandler:]
  -[SFDeviceSetupB238Service _handleAuthActionSiriInit]
  -[SFDeviceSetupB238Service _handleAuthActionAudioPasscodeInit:response:]
  -[SFDeviceSetupB238Service _handleAuthActionAudioPasscodeStartWithResponse:]
  -[SFDeviceSetupB238Service _handleAuthActionSiriStart:response:responseHandler:]
  -[SFDeviceSetupB238Service _handleFinishApply:responseHandler:]
  -[SFDeviceSetupB238Service _setSystemName:hostname:]
  -[SFDeviceSetupB238Service _setSiriInfo]
  -[SFDeviceSetupB238Service _handleFinishDone:responseHandler:]
  -[SFDeviceSetupB238Service _handleFinishDone2Ready]
  -[SFDeviceSetupB238Service _handleFinishDone2:responseHandler:]
  -[SFDeviceSetupB238Service _siriGreetingStart:]
  -[SFDeviceSetupB238Service _handleBasicConfigRequest:]
  -[SFDeviceSetupB238Service _handleBasicConfigResponse:]
  -[SFDeviceSetupB238Service _siriGreetingDialogBStart]
  -[SFDeviceSetupB238Service _siriGreetingIntroStart]
  -[SFDeviceSetupB238Service _siriGreetingIntroPhrase:error:]
  -[SFDeviceSetupB238Service _siriGreetingDialogA]
  -[SFDeviceSetupB238Service _siriGreetingDialogBPhrase:localizedText:error:]
  -[SFDeviceSetupB238Service _siriGreetingDialogCStart]
  -[SFDeviceSetupB238Service _siriGreetingDialogCPhrase:error:]
  -[SFDeviceSetupB238Service _speakLocalizedKey:event:]
  -[SFDeviceSetupB238Service dealloc]
  -[SFDeviceSetupB238Service .cxx_destruct]
  -[SFDeviceSetupB238Service dispatchQueue]
  -[SFDeviceSetupB238Service setProgressHandler:]
  -[SFDeviceSetupB238Service progressHandler]
  -[SFDeviceSetupB238Service _handleSessionEnded:]
  -[SFDeviceSetupB238Service _activate]
  -[SFDeviceSetupB238Service _cleanup]
  -[SFDeviceSetupB238Service _invalidate]
  -[SFDeviceSetupB238Service setDispatchQueue:]
  -[SFDeviceSetupB238Service _sfServiceStart]
  -[SFDeviceSetupB238Service invalidate]
  -[SFDeviceSetupB238Service _handleSessionStarted:]
  -[SFDeviceSetupB238Service _handleFinishRequest:responseHandler:]


SFDeviceSetupB238Session : NSObject /usr/lib/libc++.1.dylib <AVAudioPlayerDelegate>
 @property  NSDictionary *preAuthResponse
 @property  NSDictionary *additionalMetrics
 @property  int bonjourTestState
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL hasMultipleUsers
 @property  BOOL liveOn
 @property  BOOL pauseAfterPreAuth
 @property  SFDevice *peerDevice
 @property  unsigned long peerFeatureFlags
 @property  UIViewController *presentingViewController
 @property  HMHome *selectedHome
 @property  NSString *selectedSiriLanguage
 @property  unsigned char stereoCounterpartColor
 @property  BOOL siriDataSharingEnabled
 @property  unsigned long testFlags
 @property  BOOL touchRemoteEnabled
 @property  @? preAuthHandler
 @property  @? progressHandler
 @property  @? promptForAppleMusicHandler
 @property  @? promptForHomeHandler
 @property  @? promptForHomeiCloudHandler
 @property  @? promptForiTunesSignInHandler
 @property  @? promptForLocationEnableHandler
 @property  @? promptForPersonalRequestsHandler
 @property  @? promptForPINHandler
 @property  @? promptForRoomHandler
 @property  @? promptForSiriEnableHandler
 @property  @? promptForTermsHandler
 @property  @? promptToInstallHomeAppHandler
 @property  @? promptToShareSettingsHandler
 @property  @? promptForSiriLanguageHandler
 @property  @? promptForStereoRoleHandler
 @property  @? promptForStereoMultipleHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFDeviceSetupB238Session setAdditionalMetrics:]
  -[SFDeviceSetupB238Session _run]
  -[SFDeviceSetupB238Session disconnect]
  -[SFDeviceSetupB238Session _runWiFiSetup]
  -[SFDeviceSetupB238Session _runHomeKitSetup]
  -[SFDeviceSetupB238Session init]
  -[SFDeviceSetupB238Session pairSetupTryPIN:]
  -[SFDeviceSetupB238Session promptForPINHandler]
  -[SFDeviceSetupB238Session setPromptForPINHandler:]
  -[SFDeviceSetupB238Session _runPreflightWiFi]
  -[SFDeviceSetupB238Session _runPreflightiTunes]
  -[SFDeviceSetupB238Session _runPreAuth]
  -[SFDeviceSetupB238Session activate]
  -[SFDeviceSetupB238Session _runHomeKitUserInput]
  -[SFDeviceSetupB238Session _runBasicConfig]
  -[SFDeviceSetupB238Session _runTRSetupConfiguration]
  -[SFDeviceSetupB238Session _runTRActivation]
  -[SFDeviceSetupB238Session _reportError:label:]
  -[SFDeviceSetupB238Session _homeKitUpdateiCloudSwitchState:]
  -[SFDeviceSetupB238Session preflight]
  -[SFDeviceSetupB238Session _runPreAuthRequest]
  -[SFDeviceSetupB238Session _runPreAuthResponse:error:]
  -[SFDeviceSetupB238Session homeiCloudEnable]
  -[SFDeviceSetupB238Session homeKitSelectHome:]
  -[SFDeviceSetupB238Session homeKitSelectRoom:]
  -[SFDeviceSetupB238Session peerFeatureFlags]
  -[SFDeviceSetupB238Session setPeerFeatureFlags:]
  -[SFDeviceSetupB238Session promptForHomeiCloudHandler]
  -[SFDeviceSetupB238Session setPromptForHomeiCloudHandler:]
  -[SFDeviceSetupB238Session setPeerDevice:]
  -[SFDeviceSetupB238Session _cleanupSession]
  -[SFDeviceSetupB238Session _runAudioPasscodeCleanup:]
  -[SFDeviceSetupB238Session _setupAudio]
  -[SFDeviceSetupB238Session _preflightAppleMusic]
  -[SFDeviceSetupB238Session _runCDPSetup:]
  -[SFDeviceSetupB238Session dealloc]
  -[SFDeviceSetupB238Session _preflightAppleMusicCompleted:]
  -[SFDeviceSetupB238Session _speakPasscodeWithInstructions:languageCode:completion:]
  -[SFDeviceSetupB238Session _runAudioPasscodeInitRequest]
  -[SFDeviceSetupB238Session _runPreflightiCloud]
  -[SFDeviceSetupB238Session _runStereoPairUserInput]
  -[SFDeviceSetupB238Session _runAppleMusic]
  -[SFDeviceSetupB238Session _runSiriLanguage]
  -[SFDeviceSetupB238Session _runRecognizeVoice]
  -[SFDeviceSetupB238Session _runPersonalRequests]
  -[SFDeviceSetupB238Session _runSiriForEveryone]
  -[SFDeviceSetupB238Session _runPreflightMisc]
  -[SFDeviceSetupB238Session _runCheckAccount]
  -[SFDeviceSetupB238Session _runShareSettings]
  -[SFDeviceSetupB238Session _runAuthKitTrustStartIfNeeded]
  -[SFDeviceSetupB238Session _runAudioPasscode]
  -[SFDeviceSetupB238Session _runLEDPassCodeAlignment]
  -[SFDeviceSetupB238Session _runSiriPasscode]
  -[SFDeviceSetupB238Session _runAuthKitTrustFinish]
  -[SFDeviceSetupB238Session _runMultiUserEnable]
  -[SFDeviceSetupB238Session _runFinishStart]
  -[SFDeviceSetupB238Session _promptForPINWithFlags:throttleSeconds:]
  -[SFDeviceSetupB238Session _handlePeerEvent:flags:]
  -[SFDeviceSetupB238Session _peerDeviceSupportedStereoPairVersions]
  -[SFDeviceSetupB238Session _runStereoPairUserInputPickColors:]
  -[SFDeviceSetupB238Session _runRecognizeVoiceCheckLanguageStart]
  -[SFDeviceSetupB238Session _runRecognizeVoiceCheckVoiceProfileStart]
  -[SFDeviceSetupB238Session _recognizeVoiceAlreadyEnabled]
  -[SFDeviceSetupB238Session liveOn]
  -[SFDeviceSetupB238Session setPresentingViewController:]
  -[SFDeviceSetupB238Session _runMultiUserEnableEnableSettingStart:privateSettings:]
  -[SFDeviceSetupB238Session _runRecognizeVoiceCheckLanguageResponse:error:]
  -[SFDeviceSetupB238Session _runRecognizeVoiceCheckVoiceProfileResponse:error:]
  -[SFDeviceSetupB238Session presentingViewController]
  -[SFDeviceSetupB238Session _runAudioPasscodeStartRequest]
  -[SFDeviceSetupB238Session _runAudioPasscodeLogMetrics]
  -[SFDeviceSetupB238Session _runAudioPasscodeInitResponse:error:]
  -[SFDeviceSetupB238Session _runAudioPasscodeHandleData:]
  -[SFDeviceSetupB238Session _runAudioPasscodeStartResponse:error:]
  -[SFDeviceSetupB238Session _runAudioPasscodeTimeout]
  -[SFDeviceSetupB238Session _runMultiUserEnableHome]
  -[SFDeviceSetupB238Session .cxx_destruct]
  -[SFDeviceSetupB238Session _runAudioPasscodeStopRequest]
  -[SFDeviceSetupB238Session _runSiriPasscodeInitRequest]
  -[SFDeviceSetupB238Session _runSiriPasscodeStartPairSetup]
  -[SFDeviceSetupB238Session _runSiriPasscodeInitResponse:error:]
  -[SFDeviceSetupB238Session _runBasicConfigSendRequest]
  -[SFDeviceSetupB238Session _logMetrics]
  -[SFDeviceSetupB238Session _runBasicConfigReceiveResponse:error:]
  -[SFDeviceSetupB238Session _homeKitFindSettingsWithKeyPath:group:]
  -[SFDeviceSetupB238Session _runFinishRequest]
  -[SFDeviceSetupB238Session _runFinishResponse:error:]
  -[SFDeviceSetupB238Session _playLocalSoundID:remoteSoundID:completion:]
  -[SFDeviceSetupB238Session appleMusicNext]
  -[SFDeviceSetupB238Session homeKitReselectHome]
  -[SFDeviceSetupB238Session ledPasscodeMatched]
  -[SFDeviceSetupB238Session locationEnable:]
  -[SFDeviceSetupB238Session personalRequestsEnabled:]
  -[SFDeviceSetupB238Session siriEnable]
  -[SFDeviceSetupB238Session playAudioPasscodeAgain]
  -[SFDeviceSetupB238Session recognizeVoiceAnswered:]
  -[SFDeviceSetupB238Session selectedSiriLanguage]
  -[SFDeviceSetupB238Session shareSettingsAgreed]
  -[SFDeviceSetupB238Session siriDataSharingEnabled]
  -[SFDeviceSetupB238Session siriForEveryoneAnswered]
  -[SFDeviceSetupB238Session siriLanguagePicked:]
  -[SFDeviceSetupB238Session skipAudioPasscode]
  -[SFDeviceSetupB238Session setLiveOn:]
  -[SFDeviceSetupB238Session skipiTunesSignIn]
  -[SFDeviceSetupB238Session speakPasscodeWithCompletion:]
  -[SFDeviceSetupB238Session speakPasscodeWithLanguageCode:completion:]
  -[SFDeviceSetupB238Session speakPasscodeWithInstructions:completion:]
  -[SFDeviceSetupB238Session stereoRolePicked:]
  -[SFDeviceSetupB238Session stereoMultiplePicked:]
  -[SFDeviceSetupB238Session termsAgreed]
  -[SFDeviceSetupB238Session speakPasscodeWithInstructions:languageCode:completion:]
  -[SFDeviceSetupB238Session _playLocalSoundID:remoteSoundID:]
  -[SFDeviceSetupB238Session pauseAfterPreAuth]
  -[SFDeviceSetupB238Session setPauseAfterPreAuth:]
  -[SFDeviceSetupB238Session preAuthResponse]
  -[SFDeviceSetupB238Session setPreAuthResponse:]
  -[SFDeviceSetupB238Session setTestFlags:]
  -[SFDeviceSetupB238Session stereoCounterpartColor]
  -[SFDeviceSetupB238Session preAuthHandler]
  -[SFDeviceSetupB238Session setPreAuthHandler:]
  -[SFDeviceSetupB238Session promptForAppleMusicHandler]
  -[SFDeviceSetupB238Session setPromptForAppleMusicHandler:]
  -[SFDeviceSetupB238Session promptForiTunesSignInHandler]
  -[SFDeviceSetupB238Session setPromptForiTunesSignInHandler:]
  -[SFDeviceSetupB238Session promptForLocationEnableHandler]
  -[SFDeviceSetupB238Session setPromptForLocationEnableHandler:]
  -[SFDeviceSetupB238Session promptForPersonalRequestsHandler]
  -[SFDeviceSetupB238Session setPromptForPersonalRequestsHandler:]
  -[SFDeviceSetupB238Session promptForSiriEnableHandler]
  -[SFDeviceSetupB238Session dispatchQueue]
  -[SFDeviceSetupB238Session setPromptForSiriEnableHandler:]
  -[SFDeviceSetupB238Session promptForTermsHandler]
  -[SFDeviceSetupB238Session setPromptForTermsHandler:]
  -[SFDeviceSetupB238Session promptToShareSettingsHandler]
  -[SFDeviceSetupB238Session setPromptToShareSettingsHandler:]
  -[SFDeviceSetupB238Session promptForSiriLanguageHandler]
  -[SFDeviceSetupB238Session setPromptForSiriLanguageHandler:]
  -[SFDeviceSetupB238Session promptForStereoRoleHandler]
  -[SFDeviceSetupB238Session setPromptForStereoRoleHandler:]
  -[SFDeviceSetupB238Session promptForStereoMultipleHandler]
  -[SFDeviceSetupB238Session setPromptForStereoMultipleHandler:]
  -[SFDeviceSetupB238Session setProgressHandler:]
  -[SFDeviceSetupB238Session audioPlayerDidFinishPlaying:successfully:]
  -[SFDeviceSetupB238Session progressHandler]
  -[SFDeviceSetupB238Session _activate]
  -[SFDeviceSetupB238Session _cleanup]
  -[SFDeviceSetupB238Session _invalidate]
  -[SFDeviceSetupB238Session setDispatchQueue:]
  -[SFDeviceSetupB238Session _runSFSessionStart]
  -[SFDeviceSetupB238Session _runPairSetup]
  -[SFDeviceSetupB238Session _runTRSessionStart]
  -[SFDeviceSetupB238Session _runTRAuthentication]
  -[SFDeviceSetupB238Session audioSessionInterrupted:]
  -[SFDeviceSetupB238Session selectedHome]
  -[SFDeviceSetupB238Session peerDevice]
  -[SFDeviceSetupB238Session setTouchRemoteEnabled:]
  -[SFDeviceSetupB238Session touchRemoteEnabled]
  -[SFDeviceSetupB238Session invalidate]
  -[SFDeviceSetupB238Session audioPlayerDecodeErrorDidOccur:error:]
  -[SFDeviceSetupB238Session homeAppInstallChoice:]
  -[SFDeviceSetupB238Session hasMultipleUsers]
  -[SFDeviceSetupB238Session promptForHomeHandler]
  -[SFDeviceSetupB238Session setPromptForHomeHandler:]
  -[SFDeviceSetupB238Session promptForRoomHandler]
  -[SFDeviceSetupB238Session setPromptForRoomHandler:]
  -[SFDeviceSetupB238Session promptToInstallHomeAppHandler]
  -[SFDeviceSetupB238Session setPromptToInstallHomeAppHandler:]
  -[SFDeviceSetupB238Session additionalMetrics]
  -[SFDeviceSetupB238Session bonjourTestState]
  -[SFDeviceSetupB238Session _runTerms]
  -[SFDeviceSetupB238Session testFlags]


SFProxCardSessionServer : NSObject /usr/lib/libc++.1.dylib
 @property  <SFProxCardXPCServerInterface> *delegate
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  @? invalidationHandler
 @property  NSString *label
 @property  NSXPCListenerEndpoint *xpcEndpoint

  // instance methods
  -[SFProxCardSessionServer _activateWithCompletion:]
  -[SFProxCardSessionServer xpcEndpoint]
  -[SFProxCardSessionServer setXpcEndpoint:]
  -[SFProxCardSessionServer init]
  -[SFProxCardSessionServer errorHandler]
  -[SFProxCardSessionServer dealloc]
  -[SFProxCardSessionServer setErrorHandler:]
  -[SFProxCardSessionServer .cxx_destruct]
  -[SFProxCardSessionServer dispatchQueue]
  -[SFProxCardSessionServer label]
  -[SFProxCardSessionServer setInvalidationHandler:]
  -[SFProxCardSessionServer performAction:completion:]
  -[SFProxCardSessionServer _invalidate]
  -[SFProxCardSessionServer _reportError:]
  -[SFProxCardSessionServer setDispatchQueue:]
  -[SFProxCardSessionServer setLabel:]
  -[SFProxCardSessionServer _invalidated]
  -[SFProxCardSessionServer setDelegate:]
  -[SFProxCardSessionServer invalidationHandler]
  -[SFProxCardSessionServer invalidate]
  -[SFProxCardSessionServer activateWithCompletion:]
  -[SFProxCardSessionServer delegate]


SFDeviceSetupServiceiOS : NSObject /usr/lib/libc++.1.dylib
 @property  @? completionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  RPFileTransferSession *fileTransferSessionTemplate
 @property  @? showPINHandlerEx
 @property  @? showPINHandler
 @property  @? hidePINHandler
 @property  @? progressHandlerEx
 @property  @? receivedObjectHandler

  // instance methods
  -[SFDeviceSetupServiceiOS _run]
  -[SFDeviceSetupServiceiOS setShowPINHandlerEx:]
  -[SFDeviceSetupServiceiOS hidePINHandler]
  -[SFDeviceSetupServiceiOS init]
  -[SFDeviceSetupServiceiOS activate]
  -[SFDeviceSetupServiceiOS showPINHandler]
  -[SFDeviceSetupServiceiOS receivedObjectHandler]
  -[SFDeviceSetupServiceiOS dealloc]
  -[SFDeviceSetupServiceiOS .cxx_destruct]
  -[SFDeviceSetupServiceiOS setShowPINHandler:]
  -[SFDeviceSetupServiceiOS dispatchQueue]
  -[SFDeviceSetupServiceiOS showPINHandlerEx]
  -[SFDeviceSetupServiceiOS _runResumeIfNeeded]
  -[SFDeviceSetupServiceiOS _handleSessionSecured:]
  -[SFDeviceSetupServiceiOS _handleConfigRequestReceived:]
  -[SFDeviceSetupServiceiOS _handleAppEventReceived:]
  -[SFDeviceSetupServiceiOS _handleSetupActionRequest:responseHandler:]
  -[SFDeviceSetupServiceiOS sendObject:]
  -[SFDeviceSetupServiceiOS _handleSetupActionSuspend]
  -[SFDeviceSetupServiceiOS _handleSetupActionResume]
  -[SFDeviceSetupServiceiOS sendSetupAction:info:responseHandler:]
  -[SFDeviceSetupServiceiOS fileTransferSessionTemplate]
  -[SFDeviceSetupServiceiOS progressHandlerEx]
  -[SFDeviceSetupServiceiOS setProgressHandlerEx:]
  -[SFDeviceSetupServiceiOS _handleSessionEnded:]
  -[SFDeviceSetupServiceiOS _cleanup]
  -[SFDeviceSetupServiceiOS setDispatchQueue:]
  -[SFDeviceSetupServiceiOS setHidePINHandler:]
  -[SFDeviceSetupServiceiOS _receivedObject:flags:]
  -[SFDeviceSetupServiceiOS _completed:]
  -[SFDeviceSetupServiceiOS setReceivedObjectHandler:]
  -[SFDeviceSetupServiceiOS _sfServiceStart]
  -[SFDeviceSetupServiceiOS _invalidated]
  -[SFDeviceSetupServiceiOS completionHandler]
  -[SFDeviceSetupServiceiOS invalidate]
  -[SFDeviceSetupServiceiOS _handleSessionStarted:]
  -[SFDeviceSetupServiceiOS setCompletionHandler:]


SFDeviceSetupSessioniOS : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  RPFileTransferSession *fileTransferSessionTemplate
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  unsigned int pairFlags
 @property  SFDevice *peerDevice
 @property  @? progressHandler
 @property  @? promptForPINHandler
 @property  @? receivedObjectHandler

  // instance methods
  -[SFDeviceSetupSessioniOS _run]
  -[SFDeviceSetupSessioniOS init]
  -[SFDeviceSetupSessioniOS promptForPINHandler]
  -[SFDeviceSetupSessioniOS setPromptForPINHandler:]
  -[SFDeviceSetupSessioniOS activate]
  -[SFDeviceSetupSessioniOS receivedObjectHandler]
  -[SFDeviceSetupSessioniOS setPeerDevice:]
  -[SFDeviceSetupSessioniOS dealloc]
  -[SFDeviceSetupSessioniOS .cxx_destruct]
  -[SFDeviceSetupSessioniOS dispatchQueue]
  -[SFDeviceSetupSessioniOS setProgressHandler:]
  -[SFDeviceSetupSessioniOS setInvalidationHandler:]
  -[SFDeviceSetupSessioniOS progressHandler]
  -[SFDeviceSetupSessioniOS tryPIN:]
  -[SFDeviceSetupSessioniOS _handleSetupActionRequest:responseHandler:]
  -[SFDeviceSetupSessioniOS fileTransferSessionTemplate]
  -[SFDeviceSetupSessioniOS _runPreAuthPairSetup]
  -[SFDeviceSetupSessioniOS _sendPreAuthInfo]
  -[SFDeviceSetupSessioniOS _runESIMSetup]
  -[SFDeviceSetupSessioniOS _runCoreCDPSetup]
  -[SFDeviceSetupSessioniOS _sendConfigInfo]
  -[SFDeviceSetupSessioniOS _runResume]
  -[SFDeviceSetupSessioniOS _startBuddySession]
  -[SFDeviceSetupSessioniOS setFileTransferSessionTemplate:]
  -[SFDeviceSetupSessioniOS _runSFSessionActivated]
  -[SFDeviceSetupSessioniOS _handleBuddyProgress:]
  -[SFDeviceSetupSessioniOS _handleSetupActionSoftwareUpdate]
  -[SFDeviceSetupSessioniOS _handleSetupPeerSuspended]
  -[SFDeviceSetupSessioniOS _handleSetupResumeFoundDevice:]
  -[SFDeviceSetupSessioniOS _receivedConfigResponse:]
  -[SFDeviceSetupSessioniOS setPairFlags:]
  -[SFDeviceSetupSessioniOS sendAppEvent:]
  -[SFDeviceSetupSessioniOS _cleanup]
  -[SFDeviceSetupSessioniOS _completedWithError:]
  -[SFDeviceSetupSessioniOS setDispatchQueue:]
  -[SFDeviceSetupSessioniOS setInterruptionHandler:]
  -[SFDeviceSetupSessioniOS interruptionHandler]
  -[SFDeviceSetupSessioniOS _runSFSessionStart]
  -[SFDeviceSetupSessioniOS _receivedObject:flags:]
  -[SFDeviceSetupSessioniOS setReceivedObjectHandler:]
  -[SFDeviceSetupSessioniOS peerDevice]
  -[SFDeviceSetupSessioniOS invalidationHandler]
  -[SFDeviceSetupSessioniOS invalidate]
  -[SFDeviceSetupSessioniOS pairFlags]


SFActivityAdvertiser : SFXPCClient <SFActivityAdvertiserClient>
 @property  <SFActivityAdvertiserDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFActivityAdvertiser sharedAdvertiser]

  // instance methods
  -[SFActivityAdvertiser init]
  -[SFActivityAdvertiser remoteObjectInterface]
  -[SFActivityAdvertiser exportedInterface]
  -[SFActivityAdvertiser _getRemoteObjectProxyOnQueue:]
  -[SFActivityAdvertiser pairedDevicesChanged:]
  -[SFActivityAdvertiser machServiceName]
  -[SFActivityAdvertiser activityPayloadForAdvertisementPayload:command:requestedByDevice:withCompletionHandler:]
  -[SFActivityAdvertiser advertiseAdvertisementPayload:options:]
  -[SFActivityAdvertiser didSendPayloadForActivityIdentifier:toDevice:error:]
  -[SFActivityAdvertiser setDelegate:]
  -[SFActivityAdvertiser fetchLoginIDWithCompletionHandler:]
  -[SFActivityAdvertiser fetchPeerForUUID:withCompletionHandler:]
  -[SFActivityAdvertiser delegate]
  -[SFActivityAdvertiser fetchSFPeerDevicesWithCompletionHandler:]
  -[SFActivityAdvertiser shouldEscapeXpcTryCatch]


SFDeviceSetupTVLatencyService : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? progressHandler

  // instance methods
  -[SFDeviceSetupTVLatencyService init]
  -[SFDeviceSetupTVLatencyService _handleTVLatencyProgressEvent:info:]
  -[SFDeviceSetupTVLatencyService _handleTVLatencyRequest:responseHandler:]
  -[SFDeviceSetupTVLatencyService _reportProgress:info:]
  -[SFDeviceSetupTVLatencyService activate]
  -[SFDeviceSetupTVLatencyService .cxx_destruct]
  -[SFDeviceSetupTVLatencyService dispatchQueue]
  -[SFDeviceSetupTVLatencyService setProgressHandler:]
  -[SFDeviceSetupTVLatencyService progressHandler]
  -[SFDeviceSetupTVLatencyService sendSetupAction:info:responseHandler:]
  -[SFDeviceSetupTVLatencyService _handleSessionEnded:]
  -[SFDeviceSetupTVLatencyService _invalidate]
  -[SFDeviceSetupTVLatencyService setDispatchQueue:]
  -[SFDeviceSetupTVLatencyService _sfServiceStart]
  -[SFDeviceSetupTVLatencyService invalidate]
  -[SFDeviceSetupTVLatencyService _handleSessionStarted:]
  -[SFDeviceSetupTVLatencyService _handleFinishRequest:responseHandler:]


SFDeviceSetupTVLatencySession : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFDevice *peerDevice
 @property  @? progressHandler
 @property  @? promptForPINHandler
 @property  unsigned long triggerMs

  // instance methods
  -[SFDeviceSetupTVLatencySession _run]
  -[SFDeviceSetupTVLatencySession setTriggerMs:]
  -[SFDeviceSetupTVLatencySession init]
  -[SFDeviceSetupTVLatencySession pairSetupTryPIN:]
  -[SFDeviceSetupTVLatencySession promptForPINHandler]
  -[SFDeviceSetupTVLatencySession setPromptForPINHandler:]
  -[SFDeviceSetupTVLatencySession activate]
  -[SFDeviceSetupTVLatencySession _runTVLatencySetup]
  -[SFDeviceSetupTVLatencySession _runTVLatencySetupRequest]
  -[SFDeviceSetupTVLatencySession _runTVLatencySetupEstimate]
  -[SFDeviceSetupTVLatencySession _runTVLatencySetupProgressEvent:info:]
  -[SFDeviceSetupTVLatencySession setPeerDevice:]
  -[SFDeviceSetupTVLatencySession .cxx_destruct]
  -[SFDeviceSetupTVLatencySession dispatchQueue]
  -[SFDeviceSetupTVLatencySession setProgressHandler:]
  -[SFDeviceSetupTVLatencySession progressHandler]
  -[SFDeviceSetupTVLatencySession _handleSetupActionRequest:responseHandler:]
  -[SFDeviceSetupTVLatencySession tryAgain]
  -[SFDeviceSetupTVLatencySession _runSFSessionActivated]
  -[SFDeviceSetupTVLatencySession _runPairVerify:]
  -[SFDeviceSetupTVLatencySession _cleanup]
  -[SFDeviceSetupTVLatencySession _reportError:]
  -[SFDeviceSetupTVLatencySession setDispatchQueue:]
  -[SFDeviceSetupTVLatencySession _runSFSessionStart]
  -[SFDeviceSetupTVLatencySession _runPairSetup]
  -[SFDeviceSetupTVLatencySession peerDevice]
  -[SFDeviceSetupTVLatencySession _runFinish]
  -[SFDeviceSetupTVLatencySession invalidate]
  -[SFDeviceSetupTVLatencySession triggerMs]


SFDeviceSetupWHAService : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL needsCDPRepair
 @property  @? progressHandler

  // instance methods
  -[SFDeviceSetupWHAService init]
  -[SFDeviceSetupWHAService activate]
  -[SFDeviceSetupWHAService dealloc]
  -[SFDeviceSetupWHAService .cxx_destruct]
  -[SFDeviceSetupWHAService dispatchQueue]
  -[SFDeviceSetupWHAService setProgressHandler:]
  -[SFDeviceSetupWHAService progressHandler]
  -[SFDeviceSetupWHAService _handleSessionEnded:]
  -[SFDeviceSetupWHAService _handleRequest:flags:session:responseHandler:]
  -[SFDeviceSetupWHAService _handleInfoExchange:responseHandler:]
  -[SFDeviceSetupWHAService needsCDPRepair]
  -[SFDeviceSetupWHAService setNeedsCDPRepair:]
  -[SFDeviceSetupWHAService _cleanup]
  -[SFDeviceSetupWHAService setDispatchQueue:]
  -[SFDeviceSetupWHAService _sfServiceStart]
  -[SFDeviceSetupWHAService invalidate]
  -[SFDeviceSetupWHAService _handleSessionStarted:]


SFDeviceSetupWHASession : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFDevice *peerDevice
 @property  UIViewController *presentingViewController
 @property  @? progressHandler
 @property  @? promptForHomeHandler
 @property  @? promptForPINHandler
 @property  @? promptForRoomHandler

  // instance methods
  -[SFDeviceSetupWHASession _run]
  -[SFDeviceSetupWHASession _runCDPSetup]
  -[SFDeviceSetupWHASession _runHomeKitSetup]
  -[SFDeviceSetupWHASession init]
  -[SFDeviceSetupWHASession pairSetupTryPIN:]
  -[SFDeviceSetupWHASession promptForPINHandler]
  -[SFDeviceSetupWHASession setPromptForPINHandler:]
  -[SFDeviceSetupWHASession activate]
  -[SFDeviceSetupWHASession _runTRSetupConfiguration]
  -[SFDeviceSetupWHASession _verifyiCloudMatch:error:]
  -[SFDeviceSetupWHASession homeKitSelectHome:]
  -[SFDeviceSetupWHASession homeKitSelectRoom:]
  -[SFDeviceSetupWHASession setPeerDevice:]
  -[SFDeviceSetupWHASession dealloc]
  -[SFDeviceSetupWHASession setPresentingViewController:]
  -[SFDeviceSetupWHASession presentingViewController]
  -[SFDeviceSetupWHASession .cxx_destruct]
  -[SFDeviceSetupWHASession dispatchQueue]
  -[SFDeviceSetupWHASession setProgressHandler:]
  -[SFDeviceSetupWHASession progressHandler]
  -[SFDeviceSetupWHASession _cleanup]
  -[SFDeviceSetupWHASession _reportError:]
  -[SFDeviceSetupWHASession setDispatchQueue:]
  -[SFDeviceSetupWHASession _runSFSessionStart]
  -[SFDeviceSetupWHASession _runPairVerify]
  -[SFDeviceSetupWHASession _runPairSetup]
  -[SFDeviceSetupWHASession _runInfoExchange]
  -[SFDeviceSetupWHASession _runTRSessionStart]
  -[SFDeviceSetupWHASession _runTRAuthentication]
  -[SFDeviceSetupWHASession _runInfoExchangeRequest]
  -[SFDeviceSetupWHASession _runInfoExchangeResponse:error:]
  -[SFDeviceSetupWHASession peerDevice]
  -[SFDeviceSetupWHASession _runFinish]
  -[SFDeviceSetupWHASession invalidate]
  -[SFDeviceSetupWHASession promptForHomeHandler]
  -[SFDeviceSetupWHASession setPromptForHomeHandler:]
  -[SFDeviceSetupWHASession promptForRoomHandler]
  -[SFDeviceSetupWHASession setPromptForRoomHandler:]


SFDiagnostics : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler

  // instance methods
  -[SFDiagnostics _ensureXPCStarted]
  -[SFDiagnostics init]
  -[SFDiagnostics dealloc]
  -[SFDiagnostics .cxx_destruct]
  -[SFDiagnostics dispatchQueue]
  -[SFDiagnostics setInvalidationHandler:]
  -[SFDiagnostics bluetoothUserInteraction]
  -[SFDiagnostics diagnosticMock:device:completion:]
  -[SFDiagnostics diagnosticMockStart:]
  -[SFDiagnostics diagnosticMockStop:]
  -[SFDiagnostics _logControl:completion:]
  -[SFDiagnostics _show:completion:]
  -[SFDiagnostics logControl:completion:]
  -[SFDiagnostics show:completion:]
  -[SFDiagnostics unlockTestServer]
  -[SFDiagnostics unlockTestClientWithDevice:]
  -[SFDiagnostics diagnosticControl:completion:]
  -[SFDiagnostics _invalidate]
  -[SFDiagnostics setDispatchQueue:]
  -[SFDiagnostics setInterruptionHandler:]
  -[SFDiagnostics interruptionHandler]
  -[SFDiagnostics _invalidated]
  -[SFDiagnostics invalidationHandler]
  -[SFDiagnostics _interrupted]
  -[SFDiagnostics invalidate]
  -[SFDiagnostics diagnosticBLEModeWithCompletion:]


SFMessage : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSSet *deviceIDs
 @property  NSUUID *identifier
 @property  SFSession *session
 @property  NSData *bodyData
 @property  @? completionHandler
 @property  BOOL expectsResponse
 @property  NSDictionary *headerFields
 @property  SFDevice *peerDevice

  // class methods
  +[SFMessage supportsSecureCoding]

  // instance methods
  -[SFMessage deviceIDs]
  -[SFMessage bodyData]
  -[SFMessage setSession:]
  -[SFMessage session]
  -[SFMessage setPeerDevice:]
  -[SFMessage setBodyData:]
  -[SFMessage .cxx_destruct]
  -[SFMessage setIdentifier:]
  -[SFMessage encodeWithCoder:]
  -[SFMessage identifier]
  -[SFMessage expectsResponse]
  -[SFMessage setExpectsResponse:]
  -[SFMessage setHeaderFields:]
  -[SFMessage headerFields]
  -[SFMessage peerDevice]
  -[SFMessage completionHandler]
  -[SFMessage invalidate]
  -[SFMessage setCompletionHandler:]
  -[SFMessage initWithCoder:]
  -[SFMessage setDeviceIDs:]


SFEventMessage : SFMessage

SFRequestMessage : SFMessage
 @property  @? responseHandler

  // instance methods
  -[SFRequestMessage .cxx_destruct]
  -[SFRequestMessage responseHandler]
  -[SFRequestMessage invalidate]
  -[SFRequestMessage setResponseHandler:]


SFResponseMessage : SFMessage
  // instance methods
  -[SFResponseMessage initWithRequestMessage:]


SFNFCTagReaderUIController : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  long long mode
 @property  NSString *purpose

  // instance methods
  -[SFNFCTagReaderUIController _activateWithCompletion:]
  -[SFNFCTagReaderUIController setPurpose:]
  -[SFNFCTagReaderUIController mode]
  -[SFNFCTagReaderUIController _ensureXPCStarted]
  -[SFNFCTagReaderUIController init]
  -[SFNFCTagReaderUIController purpose]
  -[SFNFCTagReaderUIController .cxx_destruct]
  -[SFNFCTagReaderUIController dispatchQueue]
  -[SFNFCTagReaderUIController setInvalidationHandler:]
  -[SFNFCTagReaderUIController nfcTagScannedCount:]
  -[SFNFCTagReaderUIController uiActivatedWithCompletion:]
  -[SFNFCTagReaderUIController uiInvalidatedWithCompletion:]
  -[SFNFCTagReaderUIController _nfcTagScannedCount]
  -[SFNFCTagReaderUIController nfcTagScanned]
  -[SFNFCTagReaderUIController setMode:]
  -[SFNFCTagReaderUIController setDispatchQueue:]
  -[SFNFCTagReaderUIController _invalidated]
  -[SFNFCTagReaderUIController invalidationHandler]
  -[SFNFCTagReaderUIController _interrupted]
  -[SFNFCTagReaderUIController invalidate]
  -[SFNFCTagReaderUIController activateWithCompletion:]


SFPasswordSharingService : NSObject /usr/lib/libc++.1.dylib
 @property  <SFPasswordSharingServiceDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  NSString *networkName

  // class methods
  +[SFPasswordSharingService passwordSharingAvailability]

  // instance methods
  -[SFPasswordSharingService _run]
  -[SFPasswordSharingService networkName]
  -[SFPasswordSharingService init]
  -[SFPasswordSharingService activate]
  -[SFPasswordSharingService dealloc]
  -[SFPasswordSharingService .cxx_destruct]
  -[SFPasswordSharingService dispatchQueue]
  -[SFPasswordSharingService disabledViaConfig]
  -[SFPasswordSharingService _runServiceStart]
  -[SFPasswordSharingService _sendPasswordReceived]
  -[SFPasswordSharingService _passInfoToDelegate:]
  -[SFPasswordSharingService _sendPasswordDeclinedWithError:]
  -[SFPasswordSharingService _handleReceivedPassword:]
  -[SFPasswordSharingService _handleUserNotificationResponse:]
  -[SFPasswordSharingService _promptUserWithInfo:message:]
  -[SFPasswordSharingService messageForDisplayName:deviceName:info:]
  -[SFPasswordSharingService __activateCalled]
  -[SFPasswordSharingService __invalidateCalled]
  -[SFPasswordSharingService __testReceivedObject:withFlags:]
  -[SFPasswordSharingService _cleanup]
  -[SFPasswordSharingService setDispatchQueue:]
  -[SFPasswordSharingService setNetworkName:]
  -[SFPasswordSharingService _receivedObject:flags:]
  -[SFPasswordSharingService setDelegate:]
  -[SFPasswordSharingService invalidate]
  -[SFPasswordSharingService _handleSessionStarted:]
  -[SFPasswordSharingService delegate]


SFPasswordSharingInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSNumber *channel
 @property  NSString *networkName
 @property  NSString *psk

  // class methods
  +[SFPasswordSharingInfo supportsSecureCoding]

  // instance methods
  -[SFPasswordSharingInfo psk]
  -[SFPasswordSharingInfo networkName]
  -[SFPasswordSharingInfo channel]
  -[SFPasswordSharingInfo setPsk:]
  -[SFPasswordSharingInfo setChannel:]
  -[SFPasswordSharingInfo .cxx_destruct]
  -[SFPasswordSharingInfo encodeWithCoder:]
  -[SFPasswordSharingInfo setNetworkName:]
  -[SFPasswordSharingInfo initWithCoder:]


SFPINPairSession : NSObject /usr/lib/libc++.1.dylib
 @property  @? completionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFDevice *peerDevice
 @property  SFService *sfService
 @property  @? promptForPINHandler
 @property  @? showPINHandler
 @property  @? hidePINHandler

  // instance methods
  -[SFPINPairSession hidePINHandler]
  -[SFPINPairSession init]
  -[SFPINPairSession promptForPINHandler]
  -[SFPINPairSession setPromptForPINHandler:]
  -[SFPINPairSession activate]
  -[SFPINPairSession showPINHandler]
  -[SFPINPairSession setPeerDevice:]
  -[SFPINPairSession dealloc]
  -[SFPINPairSession .cxx_destruct]
  -[SFPINPairSession setShowPINHandler:]
  -[SFPINPairSession dispatchQueue]
  -[SFPINPairSession _activate]
  -[SFPINPairSession _hearbeatTimer]
  -[SFPINPairSession _clientRun]
  -[SFPINPairSession _clientHeartbeatSend]
  -[SFPINPairSession _clientSFSessionStart]
  -[SFPINPairSession _clientPairVerify:start:]
  -[SFPINPairSession _clientPairSetup:start:]
  -[SFPINPairSession _clientTryPIN:]
  -[SFPINPairSession _handleServerRequest:]
  -[SFPINPairSession handleServerHeartbeat:]
  -[SFPINPairSession handleServerPairVerify:reset:]
  -[SFPINPairSession _cleanup]
  -[SFPINPairSession handleServerPairSetup:reset:]
  -[SFPINPairSession clientTryPIN:]
  -[SFPINPairSession handleServerRequest:]
  -[SFPINPairSession setSfService:]
  -[SFPINPairSession _invalidate]
  -[SFPINPairSession setDispatchQueue:]
  -[SFPINPairSession setHidePINHandler:]
  -[SFPINPairSession _completed:]
  -[SFPINPairSession peerDevice]
  -[SFPINPairSession completionHandler]
  -[SFPINPairSession invalidate]
  -[SFPINPairSession setCompletionHandler:]
  -[SFPINPairSession sfService]


SFProximityEstimator : NSObject /usr/lib/libc++.1.dylib
 @property  int estimatedRSSI

  // class methods
  +[SFProximityEstimator proximityEstimatorWithProximityInfo:]

  // instance methods
  -[SFProximityEstimator descriptionParams]
  -[SFProximityEstimator updateWithSFBLEDevice:]
  -[SFProximityEstimator estimatedRSSI]
  -[SFProximityEstimator _estimateRSSIForSFBLEDevice:]
  -[SFProximityEstimator initWithProximityInfo:]


SFProximityEstimatorChannelMedian : SFProximityEstimator
  // instance methods
  -[SFProximityEstimatorChannelMedian _estimateRSSIForSFBLEDevice:]


SFProximityEstimatorMaxOfMean : SFProximityEstimator
  // instance methods
  -[SFProximityEstimatorMaxOfMean dealloc]
  -[SFProximityEstimatorMaxOfMean _estimateRSSIForSFBLEDevice:]
  -[SFProximityEstimatorMaxOfMean initWithProximityInfo:]


SFRemoteAutoFillSession : NSObject /usr/lib/libc++.1.dylib
 @property  @? completedHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFDevice *peerDevice
 @property  @? pairingFinishedHandler
 @property  @? promptForPINHandler
 @property  @? promptForPickerHandler

  // instance methods
  -[SFRemoteAutoFillSession _run]
  -[SFRemoteAutoFillSession init]
  -[SFRemoteAutoFillSession promptForPINHandler]
  -[SFRemoteAutoFillSession setPromptForPINHandler:]
  -[SFRemoteAutoFillSession activate]
  -[SFRemoteAutoFillSession setPeerDevice:]
  -[SFRemoteAutoFillSession dealloc]
  -[SFRemoteAutoFillSession .cxx_destruct]
  -[SFRemoteAutoFillSession dispatchQueue]
  -[SFRemoteAutoFillSession tryPIN:]
  -[SFRemoteAutoFillSession _runPair]
  -[SFRemoteAutoFillSession _cleanup]
  -[SFRemoteAutoFillSession _runSessionStart]
  -[SFRemoteAutoFillSession _runContextRequest]
  -[SFRemoteAutoFillSession _runPasswordPicker]
  -[SFRemoteAutoFillSession _runSendCredentials]
  -[SFRemoteAutoFillSession _runPairHomeKit]
  -[SFRemoteAutoFillSession _runPairContacts]
  -[SFRemoteAutoFillSession _runPairVisual]
  -[SFRemoteAutoFillSession _runPairPIN]
  -[SFRemoteAutoFillSession _handleContextRequestResponse:error:]
  -[SFRemoteAutoFillSession _handlePasswordPickerResponse:password:error:]
  -[SFRemoteAutoFillSession _handleSendCredentialsResponse:error:]
  -[SFRemoteAutoFillSession completedHandler]
  -[SFRemoteAutoFillSession setCompletedHandler:]
  -[SFRemoteAutoFillSession pairingFinishedHandler]
  -[SFRemoteAutoFillSession setPairingFinishedHandler:]
  -[SFRemoteAutoFillSession promptForPickerHandler]
  -[SFRemoteAutoFillSession setPromptForPickerHandler:]
  -[SFRemoteAutoFillSession _completedWithError:]
  -[SFRemoteAutoFillSession setDispatchQueue:]
  -[SFRemoteAutoFillSession _receivedObject:flags:]
  -[SFRemoteAutoFillSession _runPairVerify]
  -[SFRemoteAutoFillSession peerDevice]
  -[SFRemoteAutoFillSession invalidate]


SFRemoteInteractionSession : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, SFXPCInterface>
 @property  SDRemoteInteractionAgent *agent
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  SFDevice *peerDevice
 @property  @? remoteTextEventHandler
 @property  @? textSessionDidBegin
 @property  @? textSessionDidEnd
 @property  @? textSessionDidChange

  // class methods
  +[SFRemoteInteractionSession supportsSecureCoding]

  // instance methods
  -[SFRemoteInteractionSession setAgent:]
  -[SFRemoteInteractionSession _activateWithCompletion:]
  -[SFRemoteInteractionSession _ensureXPCStarted]
  -[SFRemoteInteractionSession init]
  -[SFRemoteInteractionSession agent]
  -[SFRemoteInteractionSession setPeerDevice:]
  -[SFRemoteInteractionSession .cxx_destruct]
  -[SFRemoteInteractionSession dispatchQueue]
  -[SFRemoteInteractionSession setInvalidationHandler:]
  -[SFRemoteInteractionSession encodeWithCoder:]
  -[SFRemoteInteractionSession _invalidate]
  -[SFRemoteInteractionSession _sessionHandleEvent:]
  -[SFRemoteInteractionSession _sessionStart]
  -[SFRemoteInteractionSession _sessionSendPayload:]
  -[SFRemoteInteractionSession sendPayload:]
  -[SFRemoteInteractionSession remoteTextEventHandler]
  -[SFRemoteInteractionSession setRemoteTextEventHandler:]
  -[SFRemoteInteractionSession textSessionDidBegin]
  -[SFRemoteInteractionSession setTextSessionDidBegin:]
  -[SFRemoteInteractionSession textSessionDidEnd]
  -[SFRemoteInteractionSession setTextSessionDidEnd:]
  -[SFRemoteInteractionSession textSessionDidChange]
  -[SFRemoteInteractionSession setTextSessionDidChange:]
  -[SFRemoteInteractionSession setDispatchQueue:]
  -[SFRemoteInteractionSession setInterruptionHandler:]
  -[SFRemoteInteractionSession interruptionHandler]
  -[SFRemoteInteractionSession peerDevice]
  -[SFRemoteInteractionSession _invalidated]
  -[SFRemoteInteractionSession invalidationHandler]
  -[SFRemoteInteractionSession _interrupted]
  -[SFRemoteInteractionSession invalidate]
  -[SFRemoteInteractionSession activateWithCompletion:]
  -[SFRemoteInteractionSession initWithCoder:]
  -[SFRemoteInteractionSession remoteInteractionSessionRemoteTextEvent:]
  -[SFRemoteInteractionSession remoteInteractionSessionTextSessionDidBegin:]
  -[SFRemoteInteractionSession remoteInteractionSessionTextSessionDidEnd:]
  -[SFRemoteInteractionSession remoteInteractionSessionTextSessionDidChange:]


SFRemoteTextSessionInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *identifier
 @property  long long keyboardType
 @property  NSString *prompt
 @property  long long returnKeyType
 @property  NSDictionary *rtiPayload
 @property  BOOL secureTextEntry
 @property  NSString *text
 @property  NSString *title

  // class methods
  +[SFRemoteTextSessionInfo supportsSecureCoding]

  // instance methods
  -[SFRemoteTextSessionInfo setSecureTextEntry:]
  -[SFRemoteTextSessionInfo setPrompt:]
  -[SFRemoteTextSessionInfo keyboardType]
  -[SFRemoteTextSessionInfo prompt]
  -[SFRemoteTextSessionInfo setReturnKeyType:]
  -[SFRemoteTextSessionInfo returnKeyType]
  -[SFRemoteTextSessionInfo setKeyboardType:]
  -[SFRemoteTextSessionInfo text]
  -[SFRemoteTextSessionInfo .cxx_destruct]
  -[SFRemoteTextSessionInfo setTitle:]
  -[SFRemoteTextSessionInfo setIdentifier:]
  -[SFRemoteTextSessionInfo encodeWithCoder:]
  -[SFRemoteTextSessionInfo identifier]
  -[SFRemoteTextSessionInfo initWithRTIPayload:]
  -[SFRemoteTextSessionInfo rtiPayload]
  -[SFRemoteTextSessionInfo setRtiPayload:]
  -[SFRemoteTextSessionInfo title]
  -[SFRemoteTextSessionInfo initWithDictionary:]
  -[SFRemoteTextSessionInfo secureTextEntry]
  -[SFRemoteTextSessionInfo dictionaryRepresentation]
  -[SFRemoteTextSessionInfo setText:]
  -[SFRemoteTextSessionInfo initWithCoder:]


SFService : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, SFXPCInterface>
 @property  NSData *authTagOverride
 @property  BOOL autoUnlockEnabled
 @property  BOOL autoUnlockWatch
 @property  unsigned char deviceClassCode
 @property  unsigned char deviceColorCode
 @property  unsigned char deviceModelCode
 @property  @? pairSetupCompletionHandler
 @property  @? peerDisconnectedHandler
 @property  unsigned long problemFlags
 @property  @? receivedFramePeerHandler
 @property  NSString *requestSSID
 @property  @? responseMessageInternalHandler
 @property  @? sendFramePeerHandler
 @property  unsigned char serviceType
 @property  NSUUID *serviceUUID
 @property  NSXPCListenerEndpoint *testListenerEndpoint
 @property  BOOL touchRemoteEnabled
 @property  BOOL watchLocked
 @property  BOOL wifiP2P
 @property  long long advertiseRate
 @property  unsigned char deviceActionType
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  BOOL duetSync
 @property  NSString *fixedPIN
 @property  NSString *identifier
 @property  NSString *label
 @property  BOOL needsAWDL
 @property  BOOL needsKeyboard
 @property  BOOL needsSetup
 @property  BOOL overrideScreenOff
 @property  NSDictionary *pairSetupACL
 @property  BOOL pairSetupDisabled
 @property  NSDictionary *pairVerifyACL
 @property  unsigned int pinType
 @property  unsigned int sessionFlags
 @property  NSString *myAppleID
 @property  CUAppleIDClient *myAppleIDInfoClient
 @property  NSString *peerAppleID
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  @? showPINHandlerEx
 @property  @? showPINHandler
 @property  @? hidePINHandler
 @property  @? receivedObjectHandler
 @property  @? receivedRequestHandler
 @property  @? sessionStartedHandler
 @property  @? sessionEndedHandler
 @property  @? sessionSecuredHandler
 @property  @? errorHandler
 @property  @? eventMessageHandler
 @property  BOOL hasProblem
 @property  @? requestMessageHandler
 @property  BOOL supportsAirPlayReceiver
 @property  BOOL wakeDevice

  // class methods
  +[SFService supportsSecureCoding]

  // instance methods
  -[SFService deviceActionType]
  -[SFService setTestListenerEndpoint:]
  -[SFService duetSync]
  -[SFService serviceError:]
  -[SFService _activateWithCompletion:]
  -[SFService fixedPIN]
  -[SFService testListenerEndpoint]
  -[SFService wakeDevice]
  -[SFService setWatchLocked:]
  -[SFService needsKeyboard]
  -[SFService hasProblem]
  -[SFService setShowPINHandlerEx:]
  -[SFService requestSSID]
  -[SFService watchLocked]
  -[SFService autoUnlockEnabled]
  -[SFService needsSetup]
  -[SFService problemFlags]
  -[SFService setAutoUnlockWatch:]
  -[SFService autoUnlockWatch]
  -[SFService needsAWDL]
  -[SFService _performActivateSafeChange:]
  -[SFService setDeviceClassCode:]
  -[SFService deviceModelCode]
  -[SFService setWifiP2P:]
  -[SFService wifiP2P]
  -[SFService setDuetSync:]
  -[SFService _ensureXPCStarted]
  -[SFService setPeerAppleID:]
  -[SFService setWakeDevice:]
  -[SFService sendFramePeerHandler]
  -[SFService hidePINHandler]
  -[SFService pairSetupCompletionHandler]
  -[SFService init]
  -[SFService setServiceUUID:]
  -[SFService setAdvertiseRate:]
  -[SFService pairVerifyACL]
  -[SFService showPINHandler]
  -[SFService sendToPeer:type:data:]
  -[SFService sendResponse:]
  -[SFService _activated]
  -[SFService setResponseMessageInternalHandler:]
  -[SFService errorHandler]
  -[SFService receivedObjectHandler]
  -[SFService setDeviceColorCode:]
  -[SFService setNeedsSetup:]
  -[SFService setSessionFlags:]
  -[SFService serviceReceivedFrameType:data:peer:]
  -[SFService dealloc]
  -[SFService setEncryptionReadKey:readKeyLen:writeKey:writeKeyLen:peer:]
  -[SFService setErrorHandler:]
  -[SFService myAppleIDInfoClient]
  -[SFService setServiceType:]
  -[SFService .cxx_destruct]
  -[SFService eventMessageHandler]
  -[SFService setOverrideScreenOff:]
  -[SFService pinType]
  -[SFService setNeedsAWDL:]
  -[SFService sendRequest:]
  -[SFService setShowPINHandler:]
  -[SFService dispatchQueue]
  -[SFService requestMessageHandler]
  -[SFService label]
  -[SFService setEventMessageHandler:]
  -[SFService advertiseRate]
  -[SFService setProblemFlags:]
  -[SFService setInvalidationHandler:]
  -[SFService serviceType]
  -[SFService showPINHandlerEx]
  -[SFService receivedFramePeerHandler]
  -[SFService responseMessageInternalHandler]
  -[SFService deviceClassCode]
  -[SFService updateWithService:]
  -[SFService _sendToPeer:type:unencryptedObject:]
  -[SFService setIdentifier:]
  -[SFService encodeWithCoder:]
  -[SFService identifier]
  -[SFService _cleanup]
  -[SFService sendEvent:]
  -[SFService setPairVerifyACL:]
  -[SFService setDispatchQueue:]
  -[SFService peerDisconnectedHandler]
  -[SFService setInterruptionHandler:]
  -[SFService setHidePINHandler:]
  -[SFService setDeviceActionType:]
  -[SFService sessionStartedHandler]
  -[SFService setSessionEndedHandler:]
  -[SFService interruptionHandler]
  -[SFService sendToPeer:flags:object:]
  -[SFService pairSetupACL]
  -[SFService serviceReceivedEvent:]
  -[SFService deviceColorCode]
  -[SFService setPeerDisconnectedHandler:]
  -[SFService setReceivedObjectHandler:]
  -[SFService receivedRequestHandler]
  -[SFService authTagOverride]
  -[SFService setAuthTagOverride:]
  -[SFService setSendFramePeerHandler:]
  -[SFService setNeedsKeyboard:]
  -[SFService serviceSessionFailed:error:]
  -[SFService setRequestMessageHandler:]
  -[SFService setLabel:]
  -[SFService setPairSetupACL:]
  -[SFService setHasProblem:]
  -[SFService overrideScreenOff]
  -[SFService serviceUUID]
  -[SFService _invalidated]
  -[SFService setTouchRemoteEnabled:]
  -[SFService setPinType:]
  -[SFService setDeviceModelCode:]
  -[SFService clearEncryptionInfoForPeer:]
  -[SFService pairSetupDisabled]
  -[SFService setSessionSecuredHandler:]
  -[SFService setSessionStartedHandler:]
  -[SFService servicePeerDisconnected:error:]
  -[SFService touchRemoteEnabled]
  -[SFService sessionFlags]
  -[SFService invalidationHandler]
  -[SFService supportsAirPlayReceiver]
  -[SFService _interrupted]
  -[SFService setMyAppleIDInfoClient:]
  -[SFService invalidate]
  -[SFService activateWithCompletion:]
  -[SFService sessionEndedHandler]
  -[SFService setFixedPIN:]
  -[SFService serviceReceivedRequest:]
  -[SFService setSupportsAirPlayReceiver:]
  -[SFService setMyAppleID:]
  -[SFService setPairSetupCompletionHandler:]
  -[SFService setAutoUnlockEnabled:]
  -[SFService serviceReceivedResponse:]
  -[SFService _sendToPeer:type:data:]
  -[SFService initWithCoder:]
  -[SFService setPairSetupDisabled:]
  -[SFService setReceivedFramePeerHandler:]
  -[SFService peerAppleID]
  -[SFService myAppleID]
  -[SFService sessionSecuredHandler]
  -[SFService setReceivedRequestHandler:]
  -[SFService setRequestSSID:]


SFServiceSession : SFSession
 @property  unsigned long sendLastTicks
 @property  SFService *service

  // instance methods
  -[SFServiceSession init]
  -[SFServiceSession pairingDeriveKeyForIdentifier:keyLength:]
  -[SFServiceSession activate]
  -[SFServiceSession setService:]
  -[SFServiceSession dealloc]
  -[SFServiceSession .cxx_destruct]
  -[SFServiceSession _hearbeatTimer]
  -[SFServiceSession setEncryptionReadKey:readKeyLen:writeKey:writeKeyLen:]
  -[SFServiceSession clearEncryptionInfo]
  -[SFServiceSession sendEncryptedObject:]
  -[SFServiceSession receivedStartRequest:]
  -[SFServiceSession setSendLastTicks:]
  -[SFServiceSession sendLastTicks]
  -[SFServiceSession pairSetup:start:]
  -[SFServiceSession pairVerify:start:]
  -[SFServiceSession _receivedRequestID:object:flags:]
  -[SFServiceSession _receivedResponseID:object:flags:]
  -[SFServiceSession _sendFrameType:data:]
  -[SFServiceSession _sendRequestWithFlags:object:responseHandler:]
  -[SFServiceSession _sendWithFlags:object:]
  -[SFServiceSession _sendFrameType:unencryptedObject:]
  -[SFServiceSession receivedEncryptedData:type:]
  -[SFServiceSession receivedUnencryptedData:type:]
  -[SFServiceSession _pairSetupCompleted:]
  -[SFServiceSession _pairVerifyCompleted:]
  -[SFServiceSession sendFrameType:data:]
  -[SFServiceSession pairingContainsACL:]
  -[SFServiceSession service]
  -[SFServiceSession _receivedObject:flags:]
  -[SFServiceSession invalidate]
  -[SFServiceSession sendRequestWithFlags:object:responseHandler:]
  -[SFServiceSession sendWithFlags:object:]
  -[SFServiceSession sessionReceivedFrameType:data:]


SFShareAudioSessionClient : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? progressHandler

  // class methods
  +[SFShareAudioSessionClient supportsSecureCoding]

  // instance methods
  -[SFShareAudioSessionClient _ensureXPCStarted]
  -[SFShareAudioSessionClient init]
  -[SFShareAudioSessionClient activate]
  -[SFShareAudioSessionClient .cxx_destruct]
  -[SFShareAudioSessionClient dispatchQueue]
  -[SFShareAudioSessionClient setProgressHandler:]
  -[SFShareAudioSessionClient progressHandler]
  -[SFShareAudioSessionClient encodeWithCoder:]
  -[SFShareAudioSessionClient _activate:]
  -[SFShareAudioSessionClient setDispatchQueue:]
  -[SFShareAudioSessionClient userConfirmed]
  -[SFShareAudioSessionClient _invalidated]
  -[SFShareAudioSessionClient _interrupted]
  -[SFShareAudioSessionClient invalidate]
  -[SFShareAudioSessionClient initWithCoder:]
  -[SFShareAudioSessionClient shareAudioProgressEvent:info:]


SFSession : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, SFXPCInterface>
 @property  NSUUID *identifier
 @property  unsigned long heartbeatLastTicks
 @property  NSUUID *peer
 @property  @? receivedFrameHandler
 @property  NSMutableDictionary *requestHandlers
 @property  @? responseMessageInternalHandler
 @property  @? sendFrameHandler
 @property  unsigned char serviceType
 @property  NSUUID *serviceUUID
 @property  unsigned int sessionID
 @property  unsigned int sharingSourceVersion
 @property  NSXPCListenerEndpoint *testListenerEndpoint
 @property  BOOL touchRemoteEnabled
 @property  TRSession *trSession
 @property  long long bluetoothState
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? errorHandler
 @property  NSString *fixedPIN
 @property  NSString *label
 @property  CUMessageSession *messageSessionTemplate
 @property  SFDevice *peerDevice
 @property  NSString *serviceIdentifier
 @property  unsigned int sessionFlags
 @property  double timeout
 @property  NSString *myAppleID
 @property  CUAppleIDClient *myAppleIDInfoClient
 @property  NSString *peerAppleID
 @property  NSString *peerContactIdentifier
 @property  SDStatusMonitor *statusMonitor
 @property  @? bluetoothStateChangedHandler
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  NSDictionary *pairSetupACL
 @property  NSDictionary *pairVerifyACL
 @property  @? promptForPINHandler
 @property  @? receivedObjectHandler
 @property  @? receivedRequestHandler
 @property  @? sessionStartedHandler
 @property  @? timeoutHandler
 @property  @? eventMessageHandler
 @property  @? requestMessageHandler

  // class methods
  +[SFSession supportsSecureCoding]

  // instance methods
  -[SFSession setTestListenerEndpoint:]
  -[SFSession _activateWithCompletion:]
  -[SFSession fixedPIN]
  -[SFSession setPeer:]
  -[SFSession testListenerEndpoint]
  -[SFSession setSessionID:]
  -[SFSession sessionID]
  -[SFSession _ensureXPCStarted]
  -[SFSession setPeerAppleID:]
  -[SFSession peer]
  -[SFSession serviceIdentifier]
  -[SFSession init]
  -[SFSession pairSetupWithFlags:completion:]
  -[SFSession _pairSetupWithFlags:completion:]
  -[SFSession pairSetupTryPIN:]
  -[SFSession _pairSetupTryPIN:]
  -[SFSession pairVerifyWithFlags:completion:]
  -[SFSession _pairVerifyWithFlags:completion:]
  -[SFSession promptForPINHandler]
  -[SFSession setPromptForPINHandler:]
  -[SFSession pairingDeriveKeyForIdentifier:keyLength:]
  -[SFSession bluetoothStateChangedHandler]
  -[SFSession setServiceUUID:]
  -[SFSession setServiceIdentifier:]
  -[SFSession setBluetoothStateChangedHandler:]
  -[SFSession timeout]
  -[SFSession pairVerifyACL]
  -[SFSession sendResponse:]
  -[SFSession _activated]
  -[SFSession setTimeout:]
  -[SFSession setResponseMessageInternalHandler:]
  -[SFSession bluetoothState]
  -[SFSession errorHandler]
  -[SFSession receivedObjectHandler]
  -[SFSession setPeerDevice:]
  -[SFSession setSessionFlags:]
  -[SFSession dealloc]
  -[SFSession setErrorHandler:]
  -[SFSession myAppleIDInfoClient]
  -[SFSession setServiceType:]
  -[SFSession .cxx_destruct]
  -[SFSession eventMessageHandler]
  -[SFSession sendRequest:]
  -[SFSession dispatchQueue]
  -[SFSession setBluetoothState:]
  -[SFSession requestMessageHandler]
  -[SFSession label]
  -[SFSession setEventMessageHandler:]
  -[SFSession setInvalidationHandler:]
  -[SFSession serviceType]
  -[SFSession responseMessageInternalHandler]
  -[SFSession setIdentifier:]
  -[SFSession encodeWithCoder:]
  -[SFSession identifier]
  -[SFSession _startTimeoutIfNeeded]
  -[SFSession _hearbeatTimer]
  -[SFSession _cleanup]
  -[SFSession sendEvent:]
  -[SFSession setEncryptionReadKey:readKeyLen:writeKey:writeKeyLen:]
  -[SFSession setHeartbeatLastTicks:]
  -[SFSession setPairVerifyACL:]
  -[SFSession setDispatchQueue:]
  -[SFSession setInterruptionHandler:]
  -[SFSession _setupMessageSession]
  -[SFSession _setupTouchRemote]
  -[SFSession _tearDownMessageSession]
  -[SFSession _tearDownTouchRemote]
  -[SFSession sessionStartedHandler]
  -[SFSession _sessionReceivedRegisteredRequestID:flags:xidKey:xidValue:]
  -[SFSession _sessionReceivedEvent:flags:]
  -[SFSession _sessionReceivedRequest:flags:responseHandler:]
  -[SFSession _sendRequestWithFlags:object:responseHandler:]
  -[SFSession sessionReceivedFragmentData:last:]
  -[SFSession _pairSetupCompleted:]
  -[SFSession _pairVerifyCompleted:]
  -[SFSession sendFrameType:data:]
  -[SFSession pairingContainsACL:]
  -[SFSession _fetchInfo]
  -[SFSession _activatedIfReady:]
  -[SFSession _deregisterRequestID:]
  -[SFSession _pairSetup:start:]
  -[SFSession sendFrameType:object:]
  -[SFSession _pairVerify:start:]
  -[SFSession _appleIDAddProof:error:]
  -[SFSession _sendFrameType:object:]
  -[SFSession _appleIDVerifyProof:error:]
  -[SFSession _sendEncryptedObject:]
  -[SFSession _sessionReceivedEncryptedData:type:]
  -[SFSession _sessionReceivedUnencryptedData:type:]
  -[SFSession _sessionReceivedStartAck:]
  -[SFSession interruptionHandler]
  -[SFSession setStatusMonitor:]
  -[SFSession _sessionReceivedObject:flags:]
  -[SFSession _sessionReceivedResponseID:object:flags:]
  -[SFSession _sessionReceivedRequestID:object:flags:]
  -[SFSession requestHandlers]
  -[SFSession appleIDAddProof:dispatchQueue:completion:]
  -[SFSession appleIDVerifyProof:dispatchQueue:completion:]
  -[SFSession peerContactIdentifier]
  -[SFSession heartbeatLastTicks]
  -[SFSession receivedFrameHandler]
  -[SFSession setReceivedFrameHandler:]
  -[SFSession sendFrameHandler]
  -[SFSession setSendFrameHandler:]
  -[SFSession setSharingSourceVersion:]
  -[SFSession setPeerContactIdentifier:]
  -[SFSession pairSetupACL]
  -[SFSession timeoutHandler]
  -[SFSession setReceivedObjectHandler:]
  -[SFSession receivedRequestHandler]
  -[SFSession setRequestMessageHandler:]
  -[SFSession setLabel:]
  -[SFSession setPairSetupACL:]
  -[SFSession peerDevice]
  -[SFSession serviceUUID]
  -[SFSession _invalidated]
  -[SFSession setTouchRemoteEnabled:]
  -[SFSession statusMonitor]
  -[SFSession setSessionStartedHandler:]
  -[SFSession touchRemoteEnabled]
  -[SFSession sessionFlags]
  -[SFSession invalidationHandler]
  -[SFSession _interrupted]
  -[SFSession setTimeoutHandler:]
  -[SFSession deregisterRequestID:]
  -[SFSession setMyAppleIDInfoClient:]
  -[SFSession invalidate]
  -[SFSession messageSessionTemplate]
  -[SFSession activateWithCompletion:]
  -[SFSession registerRequestID:options:handler:]
  -[SFSession setFixedPIN:]
  -[SFSession setMyAppleID:]
  -[SFSession _registerRequestID:options:handler:]
  -[SFSession sendRequestID:options:request:responseHandler:]
  -[SFSession _sendRequestID:options:request:responseHandler:]
  -[SFSession sendRequestWithFlags:object:responseHandler:]
  -[SFSession sendWithFlags:object:]
  -[SFSession initWithCoder:]
  -[SFSession setTrSession:]
  -[SFSession _timeoutTimerFired]
  -[SFSession peerAppleID]
  -[SFSession myAppleID]
  -[SFSession setReceivedRequestHandler:]
  -[SFSession trSession]
  -[SFSession sessionReceivedEvent:]
  -[SFSession sharingSourceVersion]
  -[SFSession sessionError:]
  -[SFSession sessionBluetoothStateChanged:]
  -[SFSession sessionReceivedFrameType:data:]
  -[SFSession sessionReceivedRequest:]
  -[SFSession sessionReceivedResponse:]


SFShareAudioService : NSObject /usr/lib/libc++.1.dylib <SFProxCardXPCClientInterface>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SDStatusMonitor *statusMonitor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFShareAudioService init]
  -[SFShareAudioService _handleShareAudioSearchTimeout]
  -[SFShareAudioService activate]
  -[SFShareAudioService .cxx_destruct]
  -[SFShareAudioService dispatchQueue]
  -[SFShareAudioService _handleShareAudioFoundDevice:]
  -[SFShareAudioService _handleShareAudioRequest2:contact:responseHandler:]
  -[SFShareAudioService _handleShareAudioPairingCompleted:error:]
  -[SFShareAudioService _handleShareAudioResponse:error:]
  -[SFShareAudioService _invalidate]
  -[SFShareAudioService setDispatchQueue:]
  -[SFShareAudioService xpcPerformAction:completion:]
  -[SFShareAudioService _handleSessionEnded:error:]
  -[SFShareAudioService setStatusMonitor:]
  -[SFShareAudioService _sfServiceStart]
  -[SFShareAudioService statusMonitor]
  -[SFShareAudioService _handleShareAudioRequest:responseHandler:]
  -[SFShareAudioService invalidate]
  -[SFShareAudioService _handleSessionStarted:]


SFSiriDeviceSetupGreetingDetails : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *introWordTimings
 @property  NSString *dialogAText
 @property  NSArray *dialogAWordTimings
 @property  NSArray *dialogBPhraseTimings
 @property  NSArray *dialogCPhraseTimings

  // instance methods
  -[SFSiriDeviceSetupGreetingDetails dialogAText]
  -[SFSiriDeviceSetupGreetingDetails introWordTimings]
  -[SFSiriDeviceSetupGreetingDetails dialogAWordTimings]
  -[SFSiriDeviceSetupGreetingDetails dialogBPhraseTimings]
  -[SFSiriDeviceSetupGreetingDetails dialogCPhraseTimings]
  -[SFSiriDeviceSetupGreetingDetails .cxx_destruct]
  -[SFSiriDeviceSetupGreetingDetails setIntroWordTimings:]
  -[SFSiriDeviceSetupGreetingDetails setDialogAText:]
  -[SFSiriDeviceSetupGreetingDetails setDialogAWordTimings:]
  -[SFSiriDeviceSetupGreetingDetails setDialogBPhraseTimings:]
  -[SFSiriDeviceSetupGreetingDetails setDialogCPhraseTimings:]


SFSiriRequest : NSObject /usr/lib/libc++.1.dylib
 @property  double delaySecs
 @property  unsigned int flags
 @property  id owner
 @property  @? speechCompletion
 @property  VSSpeechRequest *speechRequest
 @property  @? speechStartHandler
 @property  unsigned long startTicks
 @property  BOOL synthesizing

  // instance methods
  -[SFSiriRequest setOwner:]
  -[SFSiriRequest owner]
  -[SFSiriRequest setSpeechRequest:]
  -[SFSiriRequest setFlags:]
  -[SFSiriRequest .cxx_destruct]
  -[SFSiriRequest startTicks]
  -[SFSiriRequest setStartTicks:]
  -[SFSiriRequest speechRequest]
  -[SFSiriRequest delaySecs]
  -[SFSiriRequest setDelaySecs:]
  -[SFSiriRequest speechCompletion]
  -[SFSiriRequest setSpeechCompletion:]
  -[SFSiriRequest speechStartHandler]
  -[SFSiriRequest setSpeechStartHandler:]
  -[SFSiriRequest synthesizing]
  -[SFSiriRequest setSynthesizing:]
  -[SFSiriRequest flags]


SFSiriClient : NSObject /usr/lib/libc++.1.dylib <VSSpeechSynthesizerDelegate, SVXClientSessionServiceDelegate>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  @? siriDialogHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFSiriClient init]
  -[SFSiriClient activate]
  -[SFSiriClient setSiriDialogHandler:]
  -[SFSiriClient deviceSetupEnd]
  -[SFSiriClient speakPasscode:instructions:languageCode:flags:completion:]
  -[SFSiriClient deviceSetupBegin:]
  -[SFSiriClient stopSpeaking]
  -[SFSiriClient deviceSetupPlayGreetingID:completion:]
  -[SFSiriClient deviceSetupPrepareGreeting:]
  -[SFSiriClient speechSynthesizer:didStartSpeakingRequest:]
  -[SFSiriClient speechSynthesizer:withRequest:didReceiveTimingInfo:]
  -[SFSiriClient speechSynthesizer:didFinishSpeakingRequest:successfully:phonemesSpoken:withError:]
  -[SFSiriClient speakText:flags:rate:delay:startHandler:completion:]
  -[SFSiriClient _processQueuedRequests]
  -[SFSiriClient _completeAllRequestsWithError:]
  -[SFSiriClient .cxx_destruct]
  -[SFSiriClient speechSynthesizer:didFinishSpeakingRequest:successfully:withError2:]
  -[SFSiriClient dispatchQueue]
  -[SFSiriClient setInvalidationHandler:]
  -[SFSiriClient _activate]
  -[SFSiriClient _invalidate]
  -[SFSiriClient setDispatchQueue:]
  -[SFSiriClient speechSynthesizer:didFinishSynthesisRequest:withInstrumentMetrics:error:]
  -[SFSiriClient _deviceSetupEnd]
  -[SFSiriClient _speakPasscode:instructions:languageCode:flags:completion:]
  -[SFSiriClient speakText:rate:completion:]
  -[SFSiriClient _speakText:languageCode:flags:rate:delay:startHandler:completion:]
  -[SFSiriClient _deviceSetupPrepareGreetingFlow:error:completion:]
  -[SFSiriClient _deviceSetupSaveIntroTimings:details:]
  -[SFSiriClient _deviceSetupSaveDialogATimings:details:]
  -[SFSiriClient _deviceSetupSaveDialogBTimings:details:]
  -[SFSiriClient _deviceSetupSaveDialogCTimings:details:]
  -[SFSiriClient _deviceSetupPlayGreetingID:completion:]
  -[SFSiriClient siriDialogHandler]
  -[SFSiriClient speechSynthesizer:withRequest:didReceiveTimingInfo2:]
  -[SFSiriClient speechSynthesizer:didFinishSynthesisRequest:withInstrumentMetrics:error2:]
  -[SFSiriClient startDelayedRequest:]
  -[SFSiriClient speakText:completion:]
  -[SFSiriClient preWarmDeviceSetupWelcomePhaseWithCompletion:]
  -[SFSiriClient speakDeviceSetupWelcomePhaseWithCompletion:]
  -[SFSiriClient speakText:languageCode:completion:]
  -[SFSiriClient invalidateWithFlags:]
  -[SFSiriClient _completeRequest:error:]
  -[SFSiriClient sessionService:willChangeStateFrom:to:]
  -[SFSiriClient sessionService:didChangeStateFrom:to:]
  -[SFSiriClient sessionService:willPresentFeedbackWithDialogIdentifier:]
  -[SFSiriClient sessionService:willStartSoundWithID:]
  -[SFSiriClient sessionService:didStartSoundWithID:]
  -[SFSiriClient sessionService:didStopSoundWithID:error:]
  -[SFSiriClient sessionService:willBecomeActiveWithActivationContext:]
  -[SFSiriClient sessionService:didBecomeActiveWithActivationContext:]
  -[SFSiriClient sessionService:willResignActiveWithOptions:duration:]
  -[SFSiriClient sessionService:didResignActiveWithDeactivationContext:]
  -[SFSiriClient sessionService:didNotStartSoundWithID:error:]
  -[SFSiriClient invalidationHandler]
  -[SFSiriClient invalidate]


SFSiriWordTimingInfo : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *localizedText
 @property  double timeOffset
 @property  {_NSRange=QQ} textRange
 @property  NSString *wordID

  // class methods
  +[SFSiriWordTimingInfo serializableArrayWithTimingInfoArray:]
  +[SFSiriWordTimingInfo timingInfoArrayWithSerializableArray:]

  // instance methods
  -[SFSiriWordTimingInfo timeOffset]
  -[SFSiriWordTimingInfo wordID]
  -[SFSiriWordTimingInfo .cxx_destruct]
  -[SFSiriWordTimingInfo localizedText]
  -[SFSiriWordTimingInfo setLocalizedText:]
  -[SFSiriWordTimingInfo dictionary]
  -[SFSiriWordTimingInfo setTextRange:]
  -[SFSiriWordTimingInfo initWithDictionary:]
  -[SFSiriWordTimingInfo setWordID:]
  -[SFSiriWordTimingInfo textRange]
  -[SFSiriWordTimingInfo setTimeOffset:]


SFSiriWordTimingPlayer : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned int flags
 @property  double startTime
 @property  NSString *text
 @property  @? wordHandler
 @property  NSArray *wordTimings

  // instance methods
  -[SFSiriWordTimingPlayer setStartTime:]
  -[SFSiriWordTimingPlayer init]
  -[SFSiriWordTimingPlayer activate]
  -[SFSiriWordTimingPlayer setFlags:]
  -[SFSiriWordTimingPlayer setWordTimings:]
  -[SFSiriWordTimingPlayer setWordHandler:]
  -[SFSiriWordTimingPlayer text]
  -[SFSiriWordTimingPlayer .cxx_destruct]
  -[SFSiriWordTimingPlayer dispatchQueue]
  -[SFSiriWordTimingPlayer setDispatchQueue:]
  -[SFSiriWordTimingPlayer _processNextWord]
  -[SFSiriWordTimingPlayer _processWord]
  -[SFSiriWordTimingPlayer wordHandler]
  -[SFSiriWordTimingPlayer wordTimings]
  -[SFSiriWordTimingPlayer flags]
  -[SFSiriWordTimingPlayer invalidate]
  -[SFSiriWordTimingPlayer setText:]
  -[SFSiriWordTimingPlayer startTime]


SFSystemService : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue

  // instance methods
  -[SFSystemService init]
  -[SFSystemService activate]
  -[SFSystemService .cxx_destruct]
  -[SFSystemService dispatchQueue]
  -[SFSystemService _handleSessionEnded:]
  -[SFSystemService setDispatchQueue:]
  -[SFSystemService _handleGetSystemInfoRequest:responseHandler:]
  -[SFSystemService _handleRebootSystemForSession:request:responseHandler:]
  -[SFSystemService _handleProfilesGetForSession:request:responseHandler:]
  -[SFSystemService _handleProfileInstallForSession:request:responseHandler:]
  -[SFSystemService _handleProfileRemoveForSession:request:responseHandler:]
  -[SFSystemService _sfServiceStart]
  -[SFSystemService invalidate]
  -[SFSystemService _handleSessionStarted:]


SFSystemSession : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL allowUnencrypted
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFDevice *peerDevice

  // instance methods
  -[SFSystemSession _run]
  -[SFSystemSession init]
  -[SFSystemSession _processRequests]
  -[SFSystemSession activate]
  -[SFSystemSession setPeerDevice:]
  -[SFSystemSession .cxx_destruct]
  -[SFSystemSession dispatchQueue]
  -[SFSystemSession removeProfileWithIdentifier:completion:]
  -[SFSystemSession _cleanup]
  -[SFSystemSession setDispatchQueue:]
  -[SFSystemSession _runSFSessionStart]
  -[SFSystemSession _runPairVerifyStart]
  -[SFSystemSession _processRequestsWithError:]
  -[SFSystemSession getProfilesResponse:error:completion:]
  -[SFSystemSession installProfileResponse:error:completion:]
  -[SFSystemSession installProfileWithData:completion:]
  -[SFSystemSession getSystemInfoWithCompletion:]
  -[SFSystemSession getProfilesWithCompletion:]
  -[SFSystemSession installProfileWithURL:completion:]
  -[SFSystemSession rebootSystemWithCompletion:]
  -[SFSystemSession peerDevice]
  -[SFSystemSession allowUnencrypted]
  -[SFSystemSession setAllowUnencrypted:]
  -[SFSystemSession invalidate]


SFTRSession : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  SFSession *session
 @property  TRSession *trSession
 @property  BOOL connected
 @property  @? disconnectHandler
 @property  @? sendEventImpHandler
 @property  @? sendRequestImpHandler

  // instance methods
  -[SFTRSession disconnect]
  -[SFTRSession isConnected]
  -[SFTRSession setConnected:]
  -[SFTRSession setSession:]
  -[SFTRSession init]
  -[SFTRSession setDisconnectHandler:]
  -[SFTRSession activate]
  -[SFTRSession session]
  -[SFTRSession dealloc]
  -[SFTRSession .cxx_destruct]
  -[SFTRSession dispatchQueue]
  -[SFTRSession setRequestHandler:forRequestClass:]
  -[SFTRSession _cleanup]
  -[SFTRSession sendEvent:]
  -[SFTRSession setDispatchQueue:]
  -[SFTRSession handleEvent:flags:]
  -[SFTRSession handleRequest:flags:responseHandler:]
  -[SFTRSession setEventHandler:forEventClass:]
  -[SFTRSession _decodeTRMessageData:kindOfClass:]
  -[SFTRSession disconnectHandler]
  -[SFTRSession sendEventImpHandler]
  -[SFTRSession setSendEventImpHandler:]
  -[SFTRSession sendRequestImpHandler]
  -[SFTRSession setSendRequestImpHandler:]
  -[SFTRSession invalidate]
  -[SFTRSession trSession]
  -[SFTRSession sendRequest:withResponseHandler:]


SFWiFiHealthMonitor : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  @? statusHandler

  // instance methods
  -[SFWiFiHealthMonitor init]
  -[SFWiFiHealthMonitor activate]
  -[SFWiFiHealthMonitor .cxx_destruct]
  -[SFWiFiHealthMonitor dispatchQueue]
  -[SFWiFiHealthMonitor setInvalidationHandler:]
  -[SFWiFiHealthMonitor _activate]
  -[SFWiFiHealthMonitor _invalidate]
  -[SFWiFiHealthMonitor setDispatchQueue:]
  -[SFWiFiHealthMonitor _update]
  -[SFWiFiHealthMonitor _wifiEnsureStarted]
  -[SFWiFiHealthMonitor reset]
  -[SFWiFiHealthMonitor _wifiStatusChangedInternal:]
  -[SFWiFiHealthMonitor _wifiStatusChangedExternal:]
  -[SFWiFiHealthMonitor statusHandler]
  -[SFWiFiHealthMonitor setStatusHandler:]
  -[SFWiFiHealthMonitor _wifiEnsureStopped]
  -[SFWiFiHealthMonitor _wifiAutoJoinNotification:]
  -[SFWiFiHealthMonitor invalidationHandler]
  -[SFWiFiHealthMonitor invalidate]


(MyersDiff)
	// instance methods
	-[(MyersDiff) sf_differencesFromArray:usingComparator:removedIndexes:insertedIndexes:]
	-[(MyersDiff) sf_differencesFromArray:removedIndexes:insertedIndexes:]

01 00 0400 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccount 
01 00 0400 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountCredential 
01 00 0400 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 0600 /System/Library/PrivateFrameworks/AppleIDSSOAuthentication.framework/AppleIDSSOAuthentication: AIDAMutableServiceContext 
01 00 0600 /System/Library/PrivateFrameworks/AppleIDSSOAuthentication.framework/AppleIDSSOAuthentication: AIDAServiceOwnersManager 
01 00 0800 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKAppleIDAuthenticationController 
01 00 0900 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothManager 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUAppleIDClient 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUAudioPlayer 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBluetoothClient 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBonjourAdvertiser 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBonjourBrowser 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUCoalescer 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUDashboardClient 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUKeychainItem 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUKeychainManager 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUMessageSessionServer 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUPairingSession 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CURangingMeasurement 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUReachabilityMonitor 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CURetrier 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUSystemMonitor 
01 00 0c00 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUXPCAgent 
01 00 0b00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSAppLink 
01 00 0b00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 0b00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 1200 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponents 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponentsFormatter 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTButtonRow 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDomain 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDrillDownRow 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTEditFloatRow 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTModule 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRestoreDefaultSettingsRowAction 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSettings 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSliderRow 
01 00 1300 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSwitchRow 
01 00 1400 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkClient 
01 00 1400 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPFileTransferSession 
01 00 1600 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertConfigurationContext 
01 00 1600 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertDefinition 
01 00 1600 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandle 
