|| __DATA.__common _g_iBWEstLogLevel_gck
|| __DATA.__objc_data _OBJC_CLASS_$_CDXClient
|| __DATA.__objc_data _OBJC_CLASS_$_CDXClientSession
|| __DATA.__objc_data _OBJC_CLASS_$_GCKEventItem
|| __DATA.__objc_data _OBJC_CLASS_$_GCKOOBMessage
|| __DATA.__objc_data _OBJC_CLASS_$_GKAsyncSocket
|| __DATA.__objc_data _OBJC_CLASS_$_GKAutoPeerIDTable
|| __DATA.__objc_data _OBJC_CLASS_$_GKBluetoothSupport
|| __DATA.__objc_data _OBJC_CLASS_$_GKConnection
|| __DATA.__objc_data _OBJC_CLASS_$_GKDiscoveryBonjourResolveContainer
|| __DATA.__objc_data _OBJC_CLASS_$_GKDiscoveryPeer
|| __DATA.__objc_data _OBJC_CLASS_$_GKDiscoveryPeerConnection
|| __DATA.__objc_data _OBJC_CLASS_$_GKInterface
|| __DATA.__objc_data _OBJC_CLASS_$_GKInterfacePrioritizer
|| __DATA.__objc_data _OBJC_CLASS_$_GKList
|| __DATA.__objc_data _OBJC_CLASS_$_GKOOBMessage
|| __DATA.__objc_data _OBJC_CLASS_$_GKOOBMessageFactory
|| __DATA.__objc_data _OBJC_CLASS_$_GKPeerInternal
|| __DATA.__objc_data _OBJC_CLASS_$_GKRWLock
|| __DATA.__objc_data _OBJC_CLASS_$_GKSessionGlobals
|| __DATA.__objc_data _OBJC_CLASS_$_GKSessionInternal
|| __DATA.__objc_data _OBJC_CLASS_$_GKSimpleTimer
|| __DATA.__objc_data _OBJC_CLASS_$_GKTable
|| __DATA.__objc_data _OBJC_CLASS_$_GKVoiceChatDictionary
|| __DATA.__objc_data _OBJC_CLASS_$_GKVoiceChatServiceFocus
|| __DATA.__objc_data _OBJC_CLASS_$_GKVoiceChatServicePrivate
|| __DATA.__objc_data _OBJC_CLASS_$_GKVoiceChatSession
|| __DATA.__objc_data _OBJC_CLASS_$_GKVoiceChatSessionInternal
|| __DATA.__objc_data _OBJC_CLASS_$_GKVoiceChatSessionListener
|| __DATA.__objc_data _OBJC_CLASS_$_GKVoiceChatSessionMessage
|| __DATA.__objc_data _OBJC_CLASS_$_VoiceChatSessionBeaconState
|| __DATA.__objc_data _OBJC_CLASS_$_VoiceChatSessionRoster
|| __DATA.__objc_data _OBJC_METACLASS_$_CDXClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CDXClientSession
|| __DATA.__objc_data _OBJC_METACLASS_$_GCKEventItem
|| __DATA.__objc_data _OBJC_METACLASS_$_GCKOOBMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_GKAsyncSocket
|| __DATA.__objc_data _OBJC_METACLASS_$_GKAutoPeerIDTable
|| __DATA.__objc_data _OBJC_METACLASS_$_GKBluetoothSupport
|| __DATA.__objc_data _OBJC_METACLASS_$_GKConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_GKDiscoveryBonjourResolveContainer
|| __DATA.__objc_data _OBJC_METACLASS_$_GKDiscoveryPeer
|| __DATA.__objc_data _OBJC_METACLASS_$_GKDiscoveryPeerConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_GKInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_GKInterfacePrioritizer
|| __DATA.__objc_data _OBJC_METACLASS_$_GKList
|| __DATA.__objc_data _OBJC_METACLASS_$_GKOOBMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_GKOOBMessageFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_GKPeerInternal
|| __DATA.__objc_data _OBJC_METACLASS_$_GKRWLock
|| __DATA.__objc_data _OBJC_METACLASS_$_GKSessionGlobals
|| __DATA.__objc_data _OBJC_METACLASS_$_GKSessionInternal
|| __DATA.__objc_data _OBJC_METACLASS_$_GKSimpleTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_GKTable
|| __DATA.__objc_data _OBJC_METACLASS_$_GKVoiceChatDictionary
|| __DATA.__objc_data _OBJC_METACLASS_$_GKVoiceChatServiceFocus
|| __DATA.__objc_data _OBJC_METACLASS_$_GKVoiceChatServicePrivate
|| __DATA.__objc_data _OBJC_METACLASS_$_GKVoiceChatSession
|| __DATA.__objc_data _OBJC_METACLASS_$_GKVoiceChatSessionInternal
|| __DATA.__objc_data _OBJC_METACLASS_$_GKVoiceChatSessionListener
|| __DATA.__objc_data _OBJC_METACLASS_$_GKVoiceChatSessionMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_VoiceChatSessionBeaconState
|| __DATA.__objc_data _OBJC_METACLASS_$_VoiceChatSessionRoster
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCKOOBMessage.band
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCKOOBMessage.data
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCKOOBMessage.type
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKOOBMessage._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.chatMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.client
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.clientLock
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.conf
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.curCallID
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.currentConnResult
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.focus
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.forceNoICE
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.incomingCallDict
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.inputMeteringEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.microphoneMuted
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.outgoingCallDict
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.outputMeteringEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.state
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.stateLock
|| __DATA.__objc_ivar _OBJC_IVAR_$_GKVoiceChatServicePrivate.wrapperService
|| __DATA_CONST.__const _CDXClientDidUpdatePreblobNotification
|| __DATA_CONST.__const _CDXClientErrorNotification
|| __DATA_CONST.__const _GKBluetoothPowerStatusChangedNotification
|| __DATA_CONST.__const _GKDiscoveryBonjourGameKitServiceType
|| __DATA_CONST.__const _GKDiscoveryBonjourLocalDomain
|| __DATA_CONST.__const _GKSNetworkStatisticsBytesReceived
|| __DATA_CONST.__const _GKSNetworkStatisticsBytesSent
|| __DATA_CONST.__const _GKSNetworkStatisticsCurrentReceiveRate
|| __DATA_CONST.__const _GKSNetworkStatisticsCurrentSendRate
|| __DATA_CONST.__const _GKSNetworkStatisticsEstimatedReceiveBandwidth
|| __DATA_CONST.__const _GKSNetworkStatisticsEstimatedSendBandwidth
|| __DATA_CONST.__const _GKSNetworkStatisticsInterfaces
|| __DATA_CONST.__const _GKSNetworkStatisticsLinks
|| __DATA_CONST.__const _GKSNetworkStatisticsRTT
|| __DATA_CONST.__const _GKSNetworkStatisticsReceivePacketLossRate
|| __DATA_CONST.__const _GKSNetworkStatisticsSendPacketLossRate
|| __DATA_CONST.__const _GKSNetworkStatisticsUpTime
|| __DATA_CONST.__const _GKSRelayInitiateInfo
|| __DATA_CONST.__const _GKSRelayUpdateInfo
|| __DATA_CONST.__const _GKSSessionTicketData
|| __DATA_CONST.__const _GKSSessionTokenData
|| __DATA_CONST.__const _associationSetCallBacks
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GKDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GKDiscoveryBonjour
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GKDiscoveryManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GKDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GKDiscoveryBonjour
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GKDiscoveryManager
|| __TEXT.__const _GameKitServicesVersionNumber
|| __TEXT.__const _GameKitServicesVersionString
|| __TEXT.__text _AGPSessionBroadcast
|| __TEXT.__text _AGPSessionCreate
|| __TEXT.__text _AGPSessionEvent
|| __TEXT.__text _AGPSessionRelease
|| __TEXT.__text _AGPSessionSendAudioTo
|| __TEXT.__text _AGPSessionSendTo
|| __TEXT.__text _BWEUpdateFilterType
|| __TEXT.__text _BWEstCheckIfLargeFrameNeeded
|| __TEXT.__text _CDXGetPreblobLength
|| __TEXT.__text _CDXVendorCreate
|| __TEXT.__text _CDXVendorCreateTicket
|| __TEXT.__text _CDXVendorCreateWithSingleKey
|| __TEXT.__text _CDXVendorRelease
|| __TEXT.__text _CDXVerifyPreblob
|| __TEXT.__text _CalcChecksum
|| __TEXT.__text _GCKGameConnectivityKitBundle
|| __TEXT.__text _GCKSessionBroadcast
|| __TEXT.__text _GCKSessionCancelConnectToLocalService
|| __TEXT.__text _GCKSessionConnectToLocalService
|| __TEXT.__text _GCKSessionCreate
|| __TEXT.__text _GCKSessionCreateUniqueID
|| __TEXT.__text _GCKSessionDecodeChannelStatistics
|| __TEXT.__text _GCKSessionDisposeAllConnections
|| __TEXT.__text _GCKSessionDisposeConnection
|| __TEXT.__text _GCKSessionEstablishConnection
|| __TEXT.__text _GCKSessionEstablishConnectionWithRelayInfo
|| __TEXT.__text _GCKSessionGetLocalServicePort
|| __TEXT.__text _GCKSessionInitiateRelay
|| __TEXT.__text _GCKSessionIsParticipantConnected
|| __TEXT.__text _GCKSessionPrepareConnection
|| __TEXT.__text _GCKSessionPrepareConnectionWithRelayInfo
|| __TEXT.__text _GCKSessionReceiveDOOB
|| __TEXT.__text _GCKSessionRegisterReliableTransportCallback
|| __TEXT.__text _GCKSessionRelease
|| __TEXT.__text _GCKSessionRespondToInvitation
|| __TEXT.__text _GCKSessionSendAudioTo
|| __TEXT.__text _GCKSessionSendTo
|| __TEXT.__text _GCKSessionSetDisconnectTimeout
|| __TEXT.__text _GCKSessionSetEventCallback
|| __TEXT.__text _GCKSessionSetHeartbeatDuration
|| __TEXT.__text _GCKSessionSetLocalName
|| __TEXT.__text _GCKSessionSetReportingAgent
|| __TEXT.__text _GCKSessionSetWifiEnabled
|| __TEXT.__text _GCKSessionStartEventCallbacks
|| __TEXT.__text _GCKSessionUpdateRelay
|| __TEXT.__text _GCK_BWE_CalcRxEstimate
|| __TEXT.__text _GCK_BWE_CloseHandle
|| __TEXT.__text _GCK_BWE_CreateHandle
|| __TEXT.__text _GCK_BWE_GetProbeSeqSize
|| __TEXT.__text _GCK_BWE_TrackLargeFrameState
|| __TEXT.__text _OSPFAddDynamicOptions
|| __TEXT.__text _OSPFGetLength
|| __TEXT.__text _OSPFMakeAudio
|| __TEXT.__text _OSPFMakeDD
|| __TEXT.__text _OSPFMakeData
|| __TEXT.__text _OSPFMakeHeartbeat
|| __TEXT.__text _OSPFMakeHello
|| __TEXT.__text _OSPFMakeLSA
|| __TEXT.__text _OSPFMakeLSAACK
|| __TEXT.__text _OSPFParse
|| __TEXT.__text _OSPFParse_ParsePacketHeader
|| __TEXT.__text _OSPFProcessDynamicOption
|| __TEXT.__text _OSPFReadTimeval
|| __TEXT.__text _OSPFWriteTimeval
|| __TEXT.__text _PostEventCallback
|| __TEXT.__text _ServiceWaitEventCallbacks
|| __TEXT.__text _StartEventCallbackThread
|| __TEXT.__text _StopEventCallbackThread
|| __TEXT.__text _TimingLog
|| __TEXT.__text _UpdateRTO
|| __TEXT.__text _UpdateRxEstimate
|| __TEXT.__text _WaitEventCallback
|| __TEXT.__text __OSPFParse_ParseDecompress
|| __TEXT.__text __OSPFParse_ParseExtractOptions
|| __TEXT.__text __Z15checkSendingSetPKvPv
|| __TEXT.__text __Z17monitorSendingSetPKvPv
|| __TEXT.__text __Z18AGPSessionRecvFromP4CAGPjP15GCKSessionEvent
|| __TEXT.__text __Z20AGPTransportCallbackPvPjiPhiS1_ihhh
|| __TEXT.__text __Z26associationSetElementEqualPKvS0_
|| __TEXT.__text __Z27retainAssociationSetElementPK13__CFAllocatorPKv
|| __TEXT.__text __Z28releaseAssociationSetElementPK13__CFAllocatorPKv
|| __TEXT.__text __Z29associationSetElementHashCodePKv
|| __TEXT.__text __Z3kdfPvPA4_A4_hhi
|| __TEXT.__text __ZN20AGPSendingSetElement6bufferEPhihhh
|| __TEXT.__text __ZN20AGPSendingSetElement6removeEh
|| __TEXT.__text __ZN20AGPSendingSetElement6searchEj
|| __TEXT.__text _copyAGPSessionStatistics
|| __TEXT.__text _copysockaddr
|| __TEXT.__text _gckHandleRetryICEEnforced
|| __TEXT.__text _gckHandleRetryICEForce
|| __TEXT.__text _gckHandleRetryICEInit
|| __TEXT.__text _gckHandleRetryICEPreparation
|| __TEXT.__text _gckHandleRetryICEReport
|| __TEXT.__text _gckHandleRetryICERequest
|| __TEXT.__text _gckHandleRetryICEResponse
|| __TEXT.__text _gckHandleRetryICEValidate
|| __TEXT.__text _gckHandleRetryICEValidationTimeout
|| __TEXT.__text _gckHandleRetryICEViable
|| __TEXT.__text _gkQueryRecordCallback
|| __TEXT.__text _rijndaelDecrypt
|| __TEXT.__text _rijndaelEncrypt
|| __TEXT.__text _rijndaelKeySetupDec
|| __TEXT.__text _rijndaelKeySetupEnc
|| __TEXT.__text _uhash
|| __TEXT.__text _uhash_final
|| __TEXT.__text _uhash_free
|| __TEXT.__text _uhash_reset
|| __TEXT.__text _uhash_update
|| __TEXT.__text _umac
|| __TEXT.__text _umac_delete
|| __TEXT.__text _umac_final
|| __TEXT.__text _umac_new
|| __TEXT.__text _umac_reset
|| __TEXT.__text _umac_update
__ BluetoothManager: _BluetoothPowerChangedNotification
__ BluetoothManager: _OBJC_CLASS_$_BluetoothManager
__ BluetoothManager: _OBJC_IVAR_$_BluetoothManager._localDevice
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFCopyDescription
__ CoreFoundation: _CFDataAppendBytes
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateMutable
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValueIfPresent
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPropertyListCreateData
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopSourceInvalidate
__ CoreFoundation: _CFSetAddValue
__ CoreFoundation: _CFSetApplyFunction
__ CoreFoundation: _CFSetCreateMutable
__ CoreFoundation: _CFSetGetValueIfPresent
__ CoreFoundation: _CFSetRemoveValue
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringGetBytes
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetCStringPtr
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetMaximumSizeForEncoding
__ CoreFoundation: _CFStringHasPrefix
__ CoreFoundation: _CFStringHasSuffix
__ CoreFoundation: _CFUUIDCreate
__ CoreFoundation: _CFUUIDCreateString
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ Foundation: _NSAllocateObject
__ Foundation: _NSClassFromString
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _OBJC_CLASS_$_NSArchiver
__ Foundation: _OBJC_CLASS_$_NSAutoreleasePool
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRecursiveLock
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUnarchiver
__ Foundation: _OBJC_CLASS_$_NSValue
__ ICE: _FreeLocalInterfaceList
__ ICE: _GetLocalIFIndexForBoundSocket
__ ICE: _GetLocalInterfaceListWithOptions
__ ICE: _ICEAddOneInterface
__ ICE: _ICECloseHandle
__ ICE: _ICECreateHandle
__ ICE: _ICEDiscardRelayBinding
__ ICE: _ICEGetCallInfoForConnectionData
__ ICE: _ICEGetCandidates
__ ICE: _ICERefreshRelayBinding
__ ICE: _ICERemoveOneInterface
__ ICE: _ICEStartConnectivityCheck
__ ICE: _ICEStartConnectivityCheckN
__ ICE: _ICEStopConnectivityCheck
__ ICE: _ICEUpdateNAT64FlagForInterface
__ ICE: _ICEUpdateRole
__ ICE: _IPPORTToSA
__ ICE: _IPPORTToSA6
__ ICE: _IPPORTToStringWithSize
__ ICE: _IPToString
__ ICE: _IsIPPORTValid
__ ICE: _SAToIPPORT
__ IOKit: _IONotificationPortDestroy
__ MobileBluetooth: _BTLocalDeviceSupportsService
__ SystemConfiguration: _SCDynamicStoreCopyMultiple
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreCreateRunLoopSource
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemConfiguration: _SCNetworkInterfaceCopyAll
__ SystemConfiguration: _SCNetworkInterfaceGetBSDName
__ SystemConfiguration: _SCNetworkInterfaceGetInterfaceType
__ SystemConfiguration: __SCNetworkInterfaceIsBluetoothP2P
__ SystemConfiguration: __SCNetworkInterfaceIsBluetoothPAN
__ SystemConfiguration: __SCNetworkInterfaceIsBluetoothPAN_NAP
__ SystemConfiguration: _kSCNetworkInterfaceTypeBluetooth
__ SystemConfiguration: _kSCNetworkInterfaceTypeEthernet
__ SystemConfiguration: _kSCNetworkInterfaceTypeIEEE80211
__ TCC: _TCCAccessRequest
__ TCC: _kTCCServiceMicrophone
__ ViceroyTrace: _OBJC_CLASS_$_TimingCollection
__ ViceroyTrace: _VRTraceErrorLogLevelToCSTR
__ ViceroyTrace: _VRTraceGetErrorLogLevelForModule
__ ViceroyTrace: _VRTraceIsOSFaultDisabled
__ ViceroyTrace: _VRTracePrintLoggingInfo
__ ViceroyTrace: _VRTraceReset
__ ViceroyTrace: _VRTraceSetErrorLogLevel
__ ViceroyTrace: _VRTraceVariable_
__ ViceroyTrace: _connectingGKLog
__ ViceroyTrace: _gVRTraceErrorLogLevel
__ ViceroyTrace: _gVRTraceModuleFilterEnabled
__ ViceroyTrace: _gVRTraceOSLog
__ ViceroyTrace: _perfTimerStart
__ ViceroyTrace: _perfTimerStop
__ ViceroyTrace: _reportingGKAppInfo
__ ViceroyTrace: _reportingGKLog
__ _AVConferenceInviteDataConnectionBlob 
__ _CheckInHandleDebug 
__ _CheckOutHandleDebug 
__ _CreateHandle 
__ _GKSCDXServerAddress 
__ _GKSConnectivitySettings_GetICETimeout 
__ _GKSKeepAliveTimeoutCarrierSpecific 
__ _GKSLocalGamingDiscoveryHeartbeat 
__ _GKSLocalGamingDiscoveryTimeout 
__ _GKSRelayParameter_ClientData 
__ _GKSRelayParameter_ConnectionID 
__ _GKSRelayParameter_PeerBlob 
__ _GKSRelayParameter_PeerExternalAddr 
__ _GKSRelayParameter_PeerNatType 
__ _GKSRelayParameter_PeerRelayIP 
__ _GKSRelayParameter_PeerRelayPort 
__ _GKSRelayParameter_SelfBlob 
__ _GKSRelayParameter_SelfExternalAddr 
__ _GKSRelayParameter_SelfNatType 
__ _GKSRelayParameter_SelfRelayIP 
__ _GKSRelayParameter_SelfRelayNatIP 
__ _GKSRelayParameter_SelfRelayPort 
__ _GKSRelayParameter_Token 
__ _GKSRelayParameter_TransactionID 
__ _GKSRelayType 
__ _GKVoiceChatServiceErrorDomain 
__ _OBJC_CLASS_$_GKInterfaceListener 
__ _OBJC_CLASS_$_GKSConnectivitySettings 
__ _OBJC_CLASS_$_VCCapabilities 
__ _OBJC_CLASS_$_VideoConference 
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: _CCCrypt
__ libSystem.B.dylib: _CCHmac
__ libSystem.B.dylib: _CC_MD5
__ libSystem.B.dylib: _CC_MD5_Final
__ libSystem.B.dylib: _CC_MD5_Init
__ libSystem.B.dylib: _CC_MD5_Update
__ libSystem.B.dylib: _DNSServiceBrowse
__ libSystem.B.dylib: _DNSServiceConstructFullName
__ libSystem.B.dylib: _DNSServiceCreateConnection
__ libSystem.B.dylib: _DNSServiceGetAddrInfo
__ libSystem.B.dylib: _DNSServiceProcessResult
__ libSystem.B.dylib: _DNSServiceQueryRecord
__ libSystem.B.dylib: _DNSServiceRefDeallocate
__ libSystem.B.dylib: _DNSServiceRefSockFD
__ libSystem.B.dylib: _DNSServiceRegister
__ libSystem.B.dylib: _DNSServiceResolve
__ libSystem.B.dylib: _DNSServiceSetDispatchQueue
__ libSystem.B.dylib: _DNSServiceUpdateRecord
__ libSystem.B.dylib: _TXTRecordContainsKey
__ libSystem.B.dylib: _TXTRecordCreate
__ libSystem.B.dylib: _TXTRecordDeallocate
__ libSystem.B.dylib: _TXTRecordGetBytesPtr
__ libSystem.B.dylib: _TXTRecordGetCount
__ libSystem.B.dylib: _TXTRecordGetItemAtIndex
__ libSystem.B.dylib: _TXTRecordGetLength
__ libSystem.B.dylib: _TXTRecordGetValuePtr
__ libSystem.B.dylib: _TXTRecordSetValue
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __DefaultRuneLocale
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___darwin_check_fd_set_overflow
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___maskrune
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___memmove_chk
__ libSystem.B.dylib: ___sprintf_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___strlcat_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dispatch_source_type_write
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _accept
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _bind
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _connect
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_source_testcancel
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dup
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeaddrinfo
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _gai_strerror
__ libSystem.B.dylib: _getaddrinfo
__ libSystem.B.dylib: _gethostbyname2
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getsockname
__ libSystem.B.dylib: _getsockopt
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _h_errno
__ libSystem.B.dylib: _if_indextoname
__ libSystem.B.dylib: _if_nametoindex
__ libSystem.B.dylib: _in6addr_any
__ libSystem.B.dylib: _inet_addr
__ libSystem.B.dylib: _inet_ntop
__ libSystem.B.dylib: _listen
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _pthread_attr_destroy
__ libSystem.B.dylib: _pthread_attr_init
__ libSystem.B.dylib: _pthread_attr_setdetachstate
__ libSystem.B.dylib: _pthread_cond_broadcast
__ libSystem.B.dylib: _pthread_cond_destroy
__ libSystem.B.dylib: _pthread_cond_init
__ libSystem.B.dylib: _pthread_cond_signal
__ libSystem.B.dylib: _pthread_cond_timedwait_relative_np
__ libSystem.B.dylib: _pthread_cond_wait
__ libSystem.B.dylib: _pthread_create
__ libSystem.B.dylib: _pthread_join
__ libSystem.B.dylib: _pthread_mutex_destroy
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_mutexattr_destroy
__ libSystem.B.dylib: _pthread_mutexattr_init
__ libSystem.B.dylib: _pthread_mutexattr_settype
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_tryrdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _pthread_setname_np
__ libSystem.B.dylib: _random
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _recv
__ libSystem.B.dylib: _recvfrom
__ libSystem.B.dylib: _recvmsg
__ libSystem.B.dylib: _select
__ libSystem.B.dylib: _send
__ libSystem.B.dylib: _sendmsg
__ libSystem.B.dylib: _sendto
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _shutdown
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: _sscanf
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncasecmp
__ libSystem.B.dylib: _strtoull
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _time
__ libSystem.B.dylib: _uuid_generate
__ libSystem.B.dylib: _xdr_float
__ libSystem.B.dylib: _xdr_int64_t
__ libSystem.B.dylib: _xdr_pointer
__ libSystem.B.dylib: _xdr_u_int16_t
__ libSystem.B.dylib: _xdr_u_int32_t
__ libSystem.B.dylib: _xdr_u_int64_t
__ libSystem.B.dylib: _xdrmem_create
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___gxx_personality_v0
__ libnetwork.dylib: _nw_nat64_copy_prefixes
__ libnetwork.dylib: _nw_nat64_synthesize_v6
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_EHTYPE_id
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_loadWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _sel_getName
__ libz.1.dylib: _compress2
__ libz.1.dylib: _compressBound
__ libz.1.dylib: _crc32
__ libz.1.dylib: _uncompress
CDXClientSession : NSObject
 @property  CDXClient *CDXClient
 @property  <CDXClientSessionDelegate> *delegate
 @property  NSData *ticket
 @property  NSData *sessionKey
 @property  NSIndexSet *participantsInFlight
 @property  @? inboundHandler

  // instance methods
  -[CDXClientSession ticket]
  -[CDXClientSession sendData:]
  -[CDXClientSession setDelegate:]
  -[CDXClientSession delegate]
  -[CDXClientSession sessionKey]
  -[CDXClientSession setTicket:]
  -[CDXClientSession dealloc]
  -[CDXClientSession invalidate]
  -[CDXClientSession encrypt:]
  -[CDXClientSession stopRetransmitTimer]
  -[CDXClientSession sendRaw:toParticipants:]
  -[CDXClientSession retransmitEvent]
  -[CDXClientSession CDXClient]
  -[CDXClientSession sendData:toParticipants:]
  -[CDXClientSession resetRetransmitTimer]
  -[CDXClientSession decrypt:ticket:]
  -[CDXClientSession initWithCDXClient:ticket:sessionKey:]
  -[CDXClientSession recvRaw:ticket:]
  -[CDXClientSession participantsInFlight]
  -[CDXClientSession inboundHandler]
  -[CDXClientSession setInboundHandler:]


CDXClient : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  @? preblobCallback
 @property  <CDXClientDelegate> *delegate
 @property  NSData *preblob
 @property  NSError *error

  // class methods
  +[CDXClient sharedClient]

  // instance methods
  -[CDXClient restart]
  -[CDXClient initWithOptions:delegate:]
  -[CDXClient setDelegate:]
  -[CDXClient delegate]
  -[CDXClient queue]
  -[CDXClient start]
  -[CDXClient dealloc]
  -[CDXClient invalidate]
  -[CDXClient setError:]
  -[CDXClient preblob]
  -[CDXClient error]
  -[CDXClient networkDidChange]
  -[CDXClient invalidateSession:]
  -[CDXClient sendRaw:]
  -[CDXClient stopListeningOnSockets]
  -[CDXClient stopHolePunchTimer]
  -[CDXClient currentSockAddr]
  -[CDXClient currentSockAddrLen]
  -[CDXClient sendHolePunch]
  -[CDXClient setPreblob:]
  -[CDXClient resetHolepunchTimer]
  -[CDXClient handleFDEvent]
  -[CDXClient mapIPv4AddrToIPv6:]
  -[CDXClient startListeningOnSockets]
  -[CDXClient handleHolePunchEvent]
  -[CDXClient createSessionWithTicket:sessionKey:]
  -[CDXClient preblobCallback]
  -[CDXClient setPreblobCallback:]


GKBluetoothSupport : NSObject
  // class methods
  +[GKBluetoothSupport cleanup]
  +[GKBluetoothSupport _determineBluetoothStatus]
  +[GKBluetoothSupport _btPowerStateChanged:]
  +[GKBluetoothSupport _bluetoothManagerClass]
  +[GKBluetoothSupport bluetoothStatus]
  +[GKBluetoothSupport turnBluetoothOn]
  +[GKBluetoothSupport _directBTStatus]


GCKEventItem : NSObject
 @property  ^{?=i*iI} event
 @property  unsigned int pid

  // instance methods
  -[GCKEventItem setPid:]
  -[GCKEventItem init]
  -[GCKEventItem setEvent:]
  -[GCKEventItem pid]
  -[GCKEventItem dealloc]
  -[GCKEventItem event]
  -[GCKEventItem initWithEvent:remotePeer:]


GKConnection : NSObject
 @property  id eventDelegate
 @property  ^{opaqueRTCReporting=} reportingAgent

  // class methods
  +[GKConnection allocWithZone:]
  +[GKConnection externalAddressForSelfConnectionData:]
  +[GKConnection isRelayEnabled]
  +[GKConnection externalAddressForCDXSelfConnectionData:]

  // instance methods
  -[GKConnection connect]
  -[GKConnection gckPID]
  -[GKConnection initWithParticipantID:]
  -[GKConnection getLocalConnectionDataWithCompletionHandler:]
  -[GKConnection getLocalConnectionDataForLocalGaming]
  -[GKConnection connectParticipantsWithConnectionData:withSessionInfo:]
  -[GKConnection convertPeerID:toParticipantID:]
  -[GKConnection convertParticipantID:toPeerID:]
  -[GKConnection initiateRelayWithParticipant:withConnectionData:withRelayInfo:didInitiate:]
  -[GKConnection updateRelayWithParticipant:withConnectionData:withRelayInfo:didInitiate:]
  -[GKConnection networkStatistics]
  -[GKConnection reportingAgent]
  -[GKConnection setReportingAgent:]
  -[GKConnection gckSession]
  -[GKConnection eventDelegate]
  -[GKConnection setEventDelegate:]
  -[GKConnection preRelease]
  -[GKConnection setParticipantID:forPeerID:]
  -[GKConnection cancelConnectParticipant:]
  -[GKConnection networkStatisticsDictionaryForGCKStats:]


GKConnectionInternal : GKConnection <CDXClientDelegate, CDXClientSessionDelegate>
 @property  CDXClient *cdxClient
 @property  NSMutableDictionary *cdxSessions
 @property  NSMutableDictionary *pidToConnectTimeoutSource

  // instance methods
  -[GKConnectionInternal timerQueue]
  -[GKConnectionInternal dealloc]
  -[GKConnectionInternal gckPID]
  -[GKConnectionInternal initWithParticipantID:]
  -[GKConnectionInternal getLocalConnectionDataWithCompletionHandler:]
  -[GKConnectionInternal getLocalConnectionDataForLocalGaming]
  -[GKConnectionInternal connectParticipantsWithConnectionData:withSessionInfo:]
  -[GKConnectionInternal convertPeerID:toParticipantID:]
  -[GKConnectionInternal convertParticipantID:toPeerID:]
  -[GKConnectionInternal initiateRelayWithParticipant:withConnectionData:withRelayInfo:didInitiate:]
  -[GKConnectionInternal updateRelayWithParticipant:withConnectionData:withRelayInfo:didInitiate:]
  -[GKConnectionInternal networkStatistics]
  -[GKConnectionInternal reportingAgent]
  -[GKConnectionInternal setReportingAgent:]
  -[GKConnectionInternal gckSession]
  -[GKConnectionInternal eventDelegate]
  -[GKConnectionInternal setEventDelegate:]
  -[GKConnectionInternal CDXClientSession:receivedData:from:]
  -[GKConnectionInternal CDXClient:error:]
  -[GKConnectionInternal CDXClient:preblob:]
  -[GKConnectionInternal preRelease]
  -[GKConnectionInternal setParticipantID:forPeerID:]
  -[GKConnectionInternal cancelConnectParticipant:]
  -[GKConnectionInternal networkStatisticsDictionaryForGCKStats:]
  -[GKConnectionInternal setCdxSessions:]
  -[GKConnectionInternal setCdxClient:]
  -[GKConnectionInternal cdxSessions]
  -[GKConnectionInternal cdxClient]
  -[GKConnectionInternal setPidToConnectTimeoutSource:]
  -[GKConnectionInternal asyncWorkQueue]
  -[GKConnectionInternal createInsecureTicketUsingSortedConnectionsFromList:]
  -[GKConnectionInternal shouldWeInitiateRelayWithPID:]
  -[GKConnectionInternal localGamingReceiveDataHandler:data:time:error:]
  -[GKConnectionInternal addEvent:remotePeer:]
  -[GKConnectionInternal pidToConnectTimeoutSource]
  -[GKConnectionInternal createInitiateRelayDictionaryForParticipant:remotePeerID:]
  -[GKConnectionInternal internal_setRemoteConnectionData:fromParticipantID:pendingConnectionPIDList:]
  -[GKConnectionInternal connectPendingConnectionsFromList:sessionInfo:]
  -[GKConnectionInternal extractBlobUsingData:withSourcePID:destPID:]
  -[GKConnectionInternal internalInitiateRelayWithParticipant:withConnectionData:withRelayInfo:didInitiate:]
  -[GKConnectionInternal internalUpdateRelayWithParticipant:withConnectionData:withRelayInfo:didInitiate:]
  -[GKConnectionInternal newRelayUpdateDictionaryForParticipant:didInitiate:]
  -[GKConnectionInternal doRelayCheckForRemotePeerID:]
  -[GKConnectionInternal localGamingCheckEstablishConnection:connectionData:]
  -[GKConnectionInternal startListeningForLocalGamingCDX]


GKOOBMessage : NSObject
 @property  unsigned short type

  // instance methods
  -[GKOOBMessage initWithBytes:length:]
  -[GKOOBMessage data]
  -[GKOOBMessage type]
  -[GKOOBMessage initWithMessageType:]
  -[GKOOBMessage _checkType:]
  -[GKOOBMessage _checkSize:]


GKOOBMessageFactory : NSObject
  // class methods
  +[GKOOBMessageFactory newMessageFromData:]


GKRWLock : NSObject
  // instance methods
  -[GKRWLock unlock]
  -[GKRWLock init]
  -[GKRWLock wrlock]
  -[GKRWLock rdlock]
  -[GKRWLock dealloc]
  -[GKRWLock tryrdlock]


GCKOOBMessage : NSObject <NSSecureCoding>
  // class methods
  +[GCKOOBMessage supportsSecureCoding]

  // instance methods
  -[GCKOOBMessage initWithCoder:]
  -[GCKOOBMessage band]
  -[GCKOOBMessage data]
  -[GCKOOBMessage init]
  -[GCKOOBMessage type]
  -[GCKOOBMessage dealloc]
  -[GCKOOBMessage encodeWithCoder:]


GKList : NSObject
 @property  unsigned long count

  // instance methods
  -[GKList unlock]
  -[GKList count]
  -[GKList initWithSize:]
  -[GKList init]
  -[GKList dealloc]
  -[GKList lock]
  -[GKList addID:]
  -[GKList hasID:]
  -[GKList print]
  -[GKList copyItemsInto:]
  -[GKList addIDsFromList:]
  -[GKList removeID:]
  -[GKList removeAllIDs]
  -[GKList allMatchingObjectsFromTable:]


GKTable : NSObject
 @property  unsigned long count

  // instance methods
  -[GKTable unlock]
  -[GKTable objectForKey:]
  -[GKTable removeAllObjects]
  -[GKTable setObject:forKey:]
  -[GKTable count]
  -[GKTable removeObjectForKey:]
  -[GKTable makeObjectsPerformSelector:]
  -[GKTable initWithSize:]
  -[GKTable init]
  -[GKTable dealloc]
  -[GKTable allObjects]
  -[GKTable lock]
  -[GKTable makeObjectsPerformSelector:withObject:]
  -[GKTable print]
  -[GKTable touchObject:]
  -[GKTable touchObjectForKey:]


GKAutoPeerIDTable : GKTable
  // instance methods
  -[GKAutoPeerIDTable objectForKey:]
  -[GKAutoPeerIDTable setObject:forKey:]


GKSessionInternal : NSObject
 @property  ^{OpaqueGCKSession=} sessionRef
 @property  ^{OpaqueAGPSession=} agpSessionRef
 @property  NSString *domain
 @property  NSString *serviceType
 @property  unsigned long maxPeers
 @property  unsigned long port
 @property  GKConnection *connection
 @property  id dataReceiveHandler
 @property  <GKSessionDelegate> *delegate
 @property  NSString *sessionID
 @property  NSString *displayName
 @property  unsigned int sessionMode
 @property  NSString *peerID
 @property  double disconnectTimeout
 @property  BOOL available
 @property  <GKSessionPrivateDelegate> *privateDelegate
 @property  BOOL busy
 @property  BOOL wifiEnabled

  // instance methods
  -[GKSessionInternal sessionID]
  -[GKSessionInternal isShuttingDown]
  -[GKSessionInternal peerID]
  -[GKSessionInternal unlock]
  -[GKSessionInternal displayName]
  -[GKSessionInternal publish]
  -[GKSessionInternal serviceName]
  -[GKSessionInternal sessionRef]
  -[GKSessionInternal setSessionRef:]
  -[GKSessionInternal setDomain:]
  -[GKSessionInternal port]
  -[GKSessionInternal setServiceType:]
  -[GKSessionInternal setAvailable:]
  -[GKSessionInternal isAvailable]
  -[GKSessionInternal browse]
  -[GKSessionInternal domain]
  -[GKSessionInternal setDelegate:]
  -[GKSessionInternal connection]
  -[GKSessionInternal reset]
  -[GKSessionInternal setPrivateDelegate:]
  -[GKSessionInternal setWifiEnabled:]
  -[GKSessionInternal delegate]
  -[GKSessionInternal wifiEnabled]
  -[GKSessionInternal setBusy:]
  -[GKSessionInternal setPort:]
  -[GKSessionInternal dealloc]
  -[GKSessionInternal privateDelegate]
  -[GKSessionInternal lock]
  -[GKSessionInternal isBusy]
  -[GKSessionInternal serviceType]
  -[GKSessionInternal initWithSessionID:displayName:session:sessionMode:]
  -[GKSessionInternal initWithConnection:session:delegate:]
  -[GKSessionInternal setDisconnectTimeout:]
  -[GKSessionInternal disconnectTimeout]
  -[GKSessionInternal displayNameForPeer:]
  -[GKSessionInternal sendData:toPeers:withDataMode:error:]
  -[GKSessionInternal sendDataToAllPeers:withDataMode:error:]
  -[GKSessionInternal setDataReceiveHandler:withContext:]
  -[GKSessionInternal connectToPeer:withTimeout:]
  -[GKSessionInternal cancelConnectToPeer:]
  -[GKSessionInternal acceptConnectionFromPeer:error:]
  -[GKSessionInternal denyConnectionFromPeer:]
  -[GKSessionInternal disconnectPeerFromAllPeers:]
  -[GKSessionInternal disconnectFromAllPeers]
  -[GKSessionInternal peersWithConnectionState:]
  -[GKSessionInternal sessionMode]
  -[GKSessionInternal isPeerBusy:]
  -[GKSessionInternal maxPeers]
  -[GKSessionInternal setMaxPeers:]
  -[GKSessionInternal sendCallbacksToDelegate:remotePeer:]
  -[GKSessionInternal receiveDOOB:fromPeer:inSession:context:]
  -[GKSessionInternal dataReceiveHandler]
  -[GKSessionInternal tellDelegate_sessionDidFailWithError:]
  -[GKSessionInternal stopResolvingAllPeers]
  -[GKSessionInternal newNSErrorFromHRESULT:description:reason:]
  -[GKSessionInternal newNSErrorFromGKSessionError:description:reason:]
  -[GKSessionInternal printDictionaries]
  -[GKSessionInternal setDisplayName:forPeer:]
  -[GKSessionInternal tellDelegate_didConnectPeer:]
  -[GKSessionInternal tellDelegate_didDisconnectPeer:]
  -[GKSessionInternal tellDelegate_isConnectingPeer:]
  -[GKSessionInternal tellDelegate_peerDidBecomeAvailable:]
  -[GKSessionInternal tellDelegate_peerDidBecomeUnavailable:]
  -[GKSessionInternal tellDelegate_didReceiveBand_RetryICE:]
  -[GKSessionInternal tellDelegate_didReceiveData:]
  -[GKSessionInternal tellDelegate_gotInvited:]
  -[GKSessionInternal tellDelegate_connectionRequestToPeerFailed:]
  -[GKSessionInternal tellDelegate_peerDidBecomeBusy:]
  -[GKSessionInternal tellDelegate_initiateRelay:]
  -[GKSessionInternal tellDelegate_updateRelay:]
  -[GKSessionInternal tellDelegate_networkStatisticsChanged:]
  -[GKSessionInternal parseServiceName:intoDisplayName:pid:state:]
  -[GKSessionInternal didPublishWithError:]
  -[GKSessionInternal stringForGCKID:]
  -[GKSessionInternal sendData:toPeers:withDataMode:enableOOB:error:]
  -[GKSessionInternal setDOOBReceiveHandler:withContext:inBand:]
  -[GKSessionInternal passesSendDataSanityCheck:toPeers:withDataMode:error:]
  -[GKSessionInternal checkDNSConnection]
  -[GKSessionInternal handleEvents]
  -[GKSessionInternal filterService:withPID:]
  -[GKSessionInternal processTXTRecordForPeer:txtLen:txtRecord:]
  -[GKSessionInternal cleanupExAvailablePeers]
  -[GKSessionInternal didUpdateTXTRecordForPeer:fromIF:txtLen:txtRecord:withError:moreComing:]
  -[GKSessionInternal tryConnectToPeer:]
  -[GKSessionInternal sendAudioData:toPeers:withDataMode:error:]
  -[GKSessionInternal timeoutConnectToPeer:]
  -[GKSessionInternal stopOldService]
  -[GKSessionInternal didFindService:fromIF:withError:moreComing:]
  -[GKSessionInternal didRemoveService:fromIF:withError:moreComing:]
  -[GKSessionInternal didLookupHostname:forPeer:hostName:address:interface:withError:moreComing:]
  -[GKSessionInternal didResolveService:forPeer:hostName:port:interface:txtLen:txtRecord:withError:moreComing:]
  -[GKSessionInternal voiceChatSessionListener]
  -[GKSessionInternal agpSessionRef]
  -[GKSessionInternal setAgpSessionRef:]


GKPeerInternal : NSObject <GKTableCleanupWhenRemoved>
 @property  unsigned int pid
 @property  NSString *displayName
 @property  NSString *serviceName
 @property  BOOL busy
 @property  int serviceCount
 @property  ^{_DNSServiceRef_t=} resolveService
 @property  ^{_DNSServiceRef_t=} txtRecordService
 @property  unsigned int servicePort
 @property  BOOL moreResolvesComing
 @property  GKSessionInternal *session
 @property  double connectTimeout
 @property  BOOL needsToTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GKPeerInternal freeLookupList:andAddrList:andInterfaceList:count:]

  // instance methods
  -[GKPeerInternal displayName]
  -[GKPeerInternal serviceName]
  -[GKPeerInternal setSession:]
  -[GKPeerInternal pid]
  -[GKPeerInternal servicePort]
  -[GKPeerInternal setBusy:]
  -[GKPeerInternal dealloc]
  -[GKPeerInternal session]
  -[GKPeerInternal isBusy]
  -[GKPeerInternal cleanupForGKTable:]
  -[GKPeerInternal tryDetruncateDisplayName:]
  -[GKPeerInternal clearResolving]
  -[GKPeerInternal setNeedsToTimeout:]
  -[GKPeerInternal stopResolving]
  -[GKPeerInternal stopTXTRecordMonitoring]
  -[GKPeerInternal connectTimeout]
  -[GKPeerInternal needsToTimeout]
  -[GKPeerInternal setConnectTimeout:]
  -[GKPeerInternal setResolveService:]
  -[GKPeerInternal serviceCount]
  -[GKPeerInternal setServiceCount:]
  -[GKPeerInternal initWithPID:displayName:serviceName:]
  -[GKPeerInternal setTxtRecordService:]
  -[GKPeerInternal usableAddrs]
  -[GKPeerInternal removeAndReturnLookupList:andAddrList:andInterfaceList:count:]
  -[GKPeerInternal containsLookupService:]
  -[GKPeerInternal setAddr:interface:forLookupService:]
  -[GKPeerInternal resolveService]
  -[GKPeerInternal setServicePort:]
  -[GKPeerInternal addLookup:]
  -[GKPeerInternal copyLookupList:count:]
  -[GKPeerInternal txtRecordService]
  -[GKPeerInternal moreResolvesComing]
  -[GKPeerInternal setMoreResolvesComing:]


GKSessionGlobals : NSObject
  // instance methods
  -[GKSessionGlobals unlock]
  -[GKSessionGlobals init]
  -[GKSessionGlobals lock]
  -[GKSessionGlobals unregisterPID:]
  -[GKSessionGlobals registerPID:]
  -[GKSessionGlobals hasActivePID:]


GKVoiceChatDictionary : NSObject
 @property  unsigned int callID
 @property  unsigned int originalCallID
 @property  long long nonce

  // class methods
  +[GKVoiceChatDictionary validateDictionary:]
  +[GKVoiceChatDictionary validateInvite:]
  +[GKVoiceChatDictionary validateReply:]
  +[GKVoiceChatDictionary validateCancel:]
  +[GKVoiceChatDictionary validateFocus:]
  +[GKVoiceChatDictionary inviteDictionaryToParticipantID:fromParticipantID:connectionData:callID:focus:]
  +[GKVoiceChatDictionary dictionaryFromData:]

  // instance methods
  -[GKVoiceChatDictionary callID]
  -[GKVoiceChatDictionary setCallID:]
  -[GKVoiceChatDictionary initWithCoder:]
  -[GKVoiceChatDictionary response]
  -[GKVoiceChatDictionary setFocus:]
  -[GKVoiceChatDictionary type]
  -[GKVoiceChatDictionary isFocus]
  -[GKVoiceChatDictionary version]
  -[GKVoiceChatDictionary setNonce:]
  -[GKVoiceChatDictionary participantID]
  -[GKVoiceChatDictionary dealloc]
  -[GKVoiceChatDictionary nonce]
  -[GKVoiceChatDictionary encodeWithCoder:]
  -[GKVoiceChatDictionary connectionData]
  -[GKVoiceChatDictionary fromParticipantID]
  -[GKVoiceChatDictionary remoteVCPartyID]
  -[GKVoiceChatDictionary localVCPartyID]
  -[GKVoiceChatDictionary matchesNonce:]
  -[GKVoiceChatDictionary originalCallID]
  -[GKVoiceChatDictionary replyDictionary:connectionData:callID:focus:]
  -[GKVoiceChatDictionary cancelDictionary]
  -[GKVoiceChatDictionary focusDictionary:]
  -[GKVoiceChatDictionary isInviteDictionary]
  -[GKVoiceChatDictionary isCancelDictionary]
  -[GKVoiceChatDictionary isReplyDictionary]
  -[GKVoiceChatDictionary isFocusDictionary]
  -[GKVoiceChatDictionary matchesResponse:]
  -[GKVoiceChatDictionary setFromParticipantID:]
  -[GKVoiceChatDictionary createBlob]
  -[GKVoiceChatDictionary setLocalVCPartyID:]
  -[GKVoiceChatDictionary setRemoteVCPartyID:]


GKVoiceChatServiceFocus : GKVoiceChatServicePrivate
 @property  NSString *currentFocus
 @property  int packetsPerBundle
 @property  BOOL hasMic

  // class methods
  +[GKVoiceChatServiceFocus defaultVoiceChatService]

  // instance methods
  -[GKVoiceChatServiceFocus videoConference:didStartSession:withCallID:error:]
  -[GKVoiceChatServiceFocus init]
  -[GKVoiceChatServiceFocus hasMic]
  -[GKVoiceChatServiceFocus setFocus:]
  -[GKVoiceChatServiceFocus dealloc]
  -[GKVoiceChatServiceFocus startVoiceChatWithParticipantID:error:]
  -[GKVoiceChatServiceFocus acceptCallID:error:]
  -[GKVoiceChatServiceFocus denyCallID:]
  -[GKVoiceChatServiceFocus receivedData:fromParticipantID:]
  -[GKVoiceChatServiceFocus remoteVideoLayer]
  -[GKVoiceChatServiceFocus setRemoteVideoLayer:]
  -[GKVoiceChatServiceFocus videoConference:didStopWithCallID:error:]
  -[GKVoiceChatServiceFocus setPacketsPerBundle:]
  -[GKVoiceChatServiceFocus packetsPerBundle]
  -[GKVoiceChatServiceFocus setQualityDelegate:]
  -[GKVoiceChatServiceFocus setShouldTimeoutPackets:]
  -[GKVoiceChatServiceFocus setChatMode:]
  -[GKVoiceChatServiceFocus setIsUsingSuppression:]
  -[GKVoiceChatServiceFocus setCurrentFocus:]
  -[GKVoiceChatServiceFocus updatedMutedPeers:forParticipantID:]
  -[GKVoiceChatServiceFocus updatedConnectedPeers:]
  -[GKVoiceChatServiceFocus setHasMic:]
  -[GKVoiceChatServiceFocus currentFocus]
  -[GKVoiceChatServiceFocus setSpeakingDelegate:]
  -[GKVoiceChatServiceFocus setTalkingPeersLimit:]
  -[GKVoiceChatServiceFocus remoteCancelledProc:]
  -[GKVoiceChatServiceFocus stopVoiceChatProc:participantDidCancel:]
  -[GKVoiceChatServiceFocus openOutgoingDictionaryForParticipantID:]
  -[GKVoiceChatServiceFocus dictionaryForCallID:isIncomingDictonary:]
  -[GKVoiceChatServiceFocus processInviteDictionary:fromParticipantID:]
  -[GKVoiceChatServiceFocus processReplyDict:]
  -[GKVoiceChatServiceFocus processCancelDict:]
  -[GKVoiceChatServiceFocus processFocusDict:fromParticipantID:]
  -[GKVoiceChatServiceFocus processInviteDictionaryForTie:fromParticipantID:]
  -[GKVoiceChatServiceFocus dictionaryForParticipantID:isIncomingDictonary:]
  -[GKVoiceChatServiceFocus dictionaryForNonce:participantID:isIncomingDictonary:]
  -[GKVoiceChatServiceFocus incomingDictionaryMatchingOriginalCallID:participantID:]
  -[GKVoiceChatServiceFocus processFocusChange:fromParticipantID:]
  -[GKVoiceChatServiceFocus remoteCancelled:]
  -[GKVoiceChatServiceFocus stopVoiceChatProc:]
  -[GKVoiceChatServiceFocus sendFocusChange:]
  -[GKVoiceChatServiceFocus setLocalVideoLayer:]
  -[GKVoiceChatServiceFocus localVideoLayer]
  -[GKVoiceChatServiceFocus localFramerate]
  -[GKVoiceChatServiceFocus localBitrate]
  -[GKVoiceChatServiceFocus remoteFramerate]
  -[GKVoiceChatServiceFocus remoteBitrate]
  -[GKVoiceChatServiceFocus localDisplayNameForCallID:]
  -[GKVoiceChatServiceFocus remoteDisplayNameForCallID:]
  -[GKVoiceChatServiceFocus isAudioPausedToParticipantID:]
  -[GKVoiceChatServiceFocus pauseAudio:toParticipantID:]


GKVoiceChatServicePrivate : NSObject <VideoConferenceDelegate>
 @property  int state
 @property  int chatMode
 @property  GKVoiceChatService *wrapperService
 @property  id client
 @property  BOOL microphoneMuted
 @property  float remoteParticipantVolume
 @property  BOOL outputMeteringEnabled
 @property  BOOL inputMeteringEnabled
 @property  float outputMeterLevel
 @property  float inputMeterLevel
 @property  BOOL focus
 @property  ^v localVideoLayer
 @property  ^v remoteVideoLayer
 @property  double localFramerate
 @property  double localBitrate
 @property  double remoteFramerate
 @property  double remoteBitrate
 @property  long long outputAudioPowerSpectrumToken

  // class methods
  +[GKVoiceChatServicePrivate defaultVoiceChatService]

  // instance methods
  -[GKVoiceChatServicePrivate resetState]
  -[GKVoiceChatServicePrivate setMicrophoneMuted:]
  -[GKVoiceChatServicePrivate cleanup]
  -[GKVoiceChatServicePrivate videoConference:didStartSession:withCallID:error:]
  -[GKVoiceChatServicePrivate setClient:]
  -[GKVoiceChatServicePrivate setState:]
  -[GKVoiceChatServicePrivate init]
  -[GKVoiceChatServicePrivate state]
  -[GKVoiceChatServicePrivate client]
  -[GKVoiceChatServicePrivate setFocus:]
  -[GKVoiceChatServicePrivate isFocus]
  -[GKVoiceChatServicePrivate dealloc]
  -[GKVoiceChatServicePrivate isMicrophoneMuted]
  -[GKVoiceChatServicePrivate outputAudioPowerSpectrumToken]
  -[GKVoiceChatServicePrivate setWrapperService:]
  -[GKVoiceChatServicePrivate startVoiceChatWithParticipantID:error:]
  -[GKVoiceChatServicePrivate stopVoiceChatWithParticipantID:]
  -[GKVoiceChatServicePrivate acceptCallID:error:]
  -[GKVoiceChatServicePrivate denyCallID:]
  -[GKVoiceChatServicePrivate receivedData:fromParticipantID:]
  -[GKVoiceChatServicePrivate remoteParticipantVolume]
  -[GKVoiceChatServicePrivate setRemoteParticipantVolume:]
  -[GKVoiceChatServicePrivate isOutputMeteringEnabled]
  -[GKVoiceChatServicePrivate setOutputMeteringEnabled:]
  -[GKVoiceChatServicePrivate isInputMeteringEnabled]
  -[GKVoiceChatServicePrivate setInputMeteringEnabled:]
  -[GKVoiceChatServicePrivate outputMeterLevel]
  -[GKVoiceChatServicePrivate inputMeterLevel]
  -[GKVoiceChatServicePrivate remoteVideoLayer]
  -[GKVoiceChatServicePrivate setRemoteVideoLayer:]
  -[GKVoiceChatServicePrivate videoConference:didStopWithCallID:error:]
  -[GKVoiceChatServicePrivate setChatMode:]
  -[GKVoiceChatServicePrivate forceNoICE:]
  -[GKVoiceChatServicePrivate chatMode]
  -[GKVoiceChatServicePrivate getNSError:code:description:reason:]
  -[GKVoiceChatServicePrivate createInvite:toParticipant:callID:]
  -[GKVoiceChatServicePrivate createReplyUsingDictionary:replyCode:error:]
  -[GKVoiceChatServicePrivate startICEConnectionCheck:isCaller:withCallID:]
  -[GKVoiceChatServicePrivate informClientVoiceChatDidNotStart:]
  -[GKVoiceChatServicePrivate informClientOfInviteFromParticipant:]
  -[GKVoiceChatServicePrivate informClientVoiceChatDidStart:]
  -[GKVoiceChatServicePrivate informClientVoiceChatDidStop:]
  -[GKVoiceChatServicePrivate stopVoiceChatProc:]
  -[GKVoiceChatServicePrivate setLocalVideoLayer:]
  -[GKVoiceChatServicePrivate localVideoLayer]
  -[GKVoiceChatServicePrivate localFramerate]
  -[GKVoiceChatServicePrivate localBitrate]
  -[GKVoiceChatServicePrivate remoteFramerate]
  -[GKVoiceChatServicePrivate remoteBitrate]
  -[GKVoiceChatServicePrivate localDisplayNameForCallID:]
  -[GKVoiceChatServicePrivate remoteDisplayNameForCallID:]
  -[GKVoiceChatServicePrivate startICEConnectionCheck:isCaller:]
  -[GKVoiceChatServicePrivate informClientVoiceChatDidStartMainSelector:]
  -[GKVoiceChatServicePrivate informClientVoiceChatDidNotStartMainSelector:]
  -[GKVoiceChatServicePrivate inviteIsValid:]
  -[GKVoiceChatServicePrivate getNSError:code:description:hResult:]
  -[GKVoiceChatServicePrivate wrapperService]


GKVoiceChatSession : NSObject
 @property  <GKVoiceChatSessionDelegate> *delegate
 @property  NSString *sessionName
 @property  NSArray *peerList
 @property  BOOL activeSession
 @property  float inputMeter
 @property  float sessionVolume

  // instance methods
  -[GKVoiceChatSession sessionName]
  -[GKVoiceChatSession setDelegate:]
  -[GKVoiceChatSession startSession]
  -[GKVoiceChatSession delegate]
  -[GKVoiceChatSession dealloc]
  -[GKVoiceChatSession stopSession]
  -[GKVoiceChatSession peerList]
  -[GKVoiceChatSession setActiveSession:]
  -[GKVoiceChatSession isActiveSession]
  -[GKVoiceChatSession initWithGKSession:sessionName:]
  -[GKVoiceChatSession setMute:forPeer:]
  -[GKVoiceChatSession setSessionVolume:]
  -[GKVoiceChatSession sessionVolume]
  -[GKVoiceChatSession inputMeter]
  -[GKVoiceChatSession getMuteStateForPeer:]
  -[GKVoiceChatSession outputMeterForPeer:]


GKVoiceChatSessionInternal : NSObject <GKSessionVoiceChatDelegate, GKVoiceChatClient, VideoConferenceSpeakingDelegate, InterfaceListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <GKVoiceChatSessionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *sessionName
 @property  unsigned int conferenceID
 @property  NSArray *peerList
 @property  BOOL activeSession
 @property  float sessionVolume
 @property  unsigned int talkingPeersLimit
 @property  BOOL isUsingSuppression

  // class methods
  +[GKVoiceChatSessionInternal brokenHash:response:]

  // instance methods
  -[GKVoiceChatSessionInternal sessionName]
  -[GKVoiceChatSessionInternal cleanup]
  -[GKVoiceChatSessionInternal setDelegate:]
  -[GKVoiceChatSessionInternal isEqual:]
  -[GKVoiceChatSessionInternal session:peer:didChangeState:]
  -[GKVoiceChatSessionInternal startSession]
  -[GKVoiceChatSessionInternal delegate]
  -[GKVoiceChatSessionInternal participantID]
  -[GKVoiceChatSessionInternal dealloc]
  -[GKVoiceChatSessionInternal stopSession]
  -[GKVoiceChatSessionInternal peerList]
  -[GKVoiceChatSessionInternal setActiveSession:]
  -[GKVoiceChatSessionInternal isActiveSession]
  -[GKVoiceChatSessionInternal setMute:forPeer:]
  -[GKVoiceChatSessionInternal setSessionVolume:]
  -[GKVoiceChatSessionInternal sessionVolume]
  -[GKVoiceChatSessionInternal interfaceStateDidChangeWithWifiUp:cellUp:]
  -[GKVoiceChatSessionInternal networkStateDidChange]
  -[GKVoiceChatSessionInternal conferenceID]
  -[GKVoiceChatSessionInternal lossRate:forParticipantID:]
  -[GKVoiceChatSessionInternal didStartSpeaking:]
  -[GKVoiceChatSessionInternal didStopSpeaking:]
  -[GKVoiceChatSessionInternal setIsUsingSuppression:]
  -[GKVoiceChatSessionInternal updatedConnectedPeers:]
  -[GKVoiceChatSessionInternal isUsingSuppression]
  -[GKVoiceChatSessionInternal talkingPeersLimit]
  -[GKVoiceChatSessionInternal setTalkingPeersLimit:]
  -[GKVoiceChatSessionInternal cleanupProc:]
  -[GKVoiceChatSessionInternal voiceChatService:sendData:toParticipantID:]
  -[GKVoiceChatSessionInternal informClientVoiceChatDidStart:]
  -[GKVoiceChatSessionInternal informClientVoiceChatDidStop:]
  -[GKVoiceChatSessionInternal voiceChatService:didReceiveInvitationFromParticipantID:callID:]
  -[GKVoiceChatSessionInternal voiceChatService:didStartWithParticipantID:]
  -[GKVoiceChatSessionInternal voiceChatService:didNotStartWithParticipantID:error:]
  -[GKVoiceChatSessionInternal voiceChatService:didStopWithParticipantID:error:]
  -[GKVoiceChatSessionInternal initWithGKSession:publicWrapper:sessionName:]
  -[GKVoiceChatSessionInternal getMuteStateForPeer:]
  -[GKVoiceChatSessionInternal startSessionInternal]
  -[GKVoiceChatSessionInternal stopSessionInternal]
  -[GKVoiceChatSessionInternal calculateConferenceID]
  -[GKVoiceChatSessionInternal encodePeerID:]
  -[GKVoiceChatSessionInternal updatedMutedPeers:forPeer:]
  -[GKVoiceChatSessionInternal sendMutedPeers]
  -[GKVoiceChatSessionInternal updatedSubscribedBeaconList:]
  -[GKVoiceChatSessionInternal sendConnectedPeers]
  -[GKVoiceChatSessionInternal informClientVoiceChatConnecting:]
  -[GKVoiceChatSessionInternal handlePeerDisconnected:]
  -[GKVoiceChatSessionInternal unPauseAll]
  -[GKVoiceChatSessionInternal updatedFocusPeers:]
  -[GKVoiceChatSessionInternal informClientVoiceChatFocusChange:]
  -[GKVoiceChatSessionInternal addPeerToFocusPausedList:]
  -[GKVoiceChatSessionInternal goodChannels]
  -[GKVoiceChatSessionInternal decodePeerID:]
  -[GKVoiceChatSessionInternal updatedFocusID:]
  -[GKVoiceChatSessionInternal parseMutedPeers:forPeer:]
  -[GKVoiceChatSessionInternal pauseAll]
  -[GKVoiceChatSessionInternal pruneBadLinks]
  -[GKVoiceChatSessionInternal removeFromFocusPausedList:]
  -[GKVoiceChatSessionInternal parseConnectedPeers:]
  -[GKVoiceChatSessionInternal peerCount]
  -[GKVoiceChatSessionInternal session:didReceiveAudioPacket:fromPeerID:]
  -[GKVoiceChatSessionInternal session:didReceiveOOBAudioPacket:fromPeerID:]
  -[GKVoiceChatSessionInternal informClientVoiceChatCouldNotConnect:]
  -[GKVoiceChatSessionInternal informClientVoiceChatSpeaking:]
  -[GKVoiceChatSessionInternal informClientVoiceChatSilent:]
  -[GKVoiceChatSessionInternal calculateChannelQualities]


VoiceChatSessionBeaconState : NSObject
 @property  unsigned int sentState
 @property  unsigned int receivedState
 @property  BOOL needsSend
 @property  unsigned int typeToSend

  // instance methods
  -[VoiceChatSessionBeaconState init]
  -[VoiceChatSessionBeaconState dealloc]
  -[VoiceChatSessionBeaconState needsSend]
  -[VoiceChatSessionBeaconState lastReceivedBeacon]
  -[VoiceChatSessionBeaconState setLastReceivedBeacon:]
  -[VoiceChatSessionBeaconState sentState]
  -[VoiceChatSessionBeaconState setSentState:]
  -[VoiceChatSessionBeaconState receivedState]
  -[VoiceChatSessionBeaconState setReceivedState:]
  -[VoiceChatSessionBeaconState setNeedsSend:]
  -[VoiceChatSessionBeaconState typeToSend]
  -[VoiceChatSessionBeaconState setTypeToSend:]


VoiceChatSessionRoster : NSObject
  // instance methods
  -[VoiceChatSessionRoster cleanup]
  -[VoiceChatSessionRoster dealloc]
  -[VoiceChatSessionRoster hasFocus]
  -[VoiceChatSessionRoster focusID]
  -[VoiceChatSessionRoster initWithGKSession:peerID:voiceChatSession:sendQueue:]
  -[VoiceChatSessionRoster startBeaconWrapper:]
  -[VoiceChatSessionRoster subscribedPeers]
  -[VoiceChatSessionRoster stopBeacon]
  -[VoiceChatSessionRoster peer:didChangeState:]
  -[VoiceChatSessionRoster receivedBeacon:fromPeer:]
  -[VoiceChatSessionRoster recalculateFocusRating]
  -[VoiceChatSessionRoster updateBeacon]
  -[VoiceChatSessionRoster configureDeviceRating]
  -[VoiceChatSessionRoster startBeacon]
  -[VoiceChatSessionRoster sendBeacons]
  -[VoiceChatSessionRoster calculateFocus:]
  -[VoiceChatSessionRoster sendBeacon:ToPeer:]
  -[VoiceChatSessionRoster processSubscribeBeacon:beaconState:fromPeer:]
  -[VoiceChatSessionRoster processUnsubscribeBeacon:beaconState:fromPeer:]


GKVoiceChatSessionListener : NSObject
  // instance methods
  -[GKVoiceChatSessionListener initWithSession:]
  -[GKVoiceChatSessionListener removeSession:]
  -[GKVoiceChatSessionListener session:peer:didChangeState:]
  -[GKVoiceChatSessionListener dealloc]
  -[GKVoiceChatSessionListener receivedNewVoiceChatOOBMessage:fromPeerID:]
  -[GKVoiceChatSessionListener registerNewGKVoiceChatSession:]
  -[GKVoiceChatSessionListener currentSessions]


GKVoiceChatSessionMessage : GKOOBMessage
  // instance methods
  -[GKVoiceChatSessionMessage initWithBytes:length:]
  -[GKVoiceChatSessionMessage payload]
  -[GKVoiceChatSessionMessage data]
  -[GKVoiceChatSessionMessage init]
  -[GKVoiceChatSessionMessage dealloc]
  -[GKVoiceChatSessionMessage subtype]
  -[GKVoiceChatSessionMessage conferenceID]
  -[GKVoiceChatSessionMessage _checkType:]
  -[GKVoiceChatSessionMessage _checkSize:]
  -[GKVoiceChatSessionMessage initWithPayload:conferenceID:subtype:]


GKDiscoveryPeer : NSObject <GKSimpleTimerDelegate>
 @property  NSString *serviceName
 @property  NSString *playerID
 @property  NSString *deviceID
 @property  GKSimpleTimer *resolveTimer
 @property  @? resolveTimeoutHandler
 @property  NSMutableSet *interfaces
 @property  NSMutableArray *orderedInterfaces
 @property  NSMutableArray *attemptedInterfaces
 @property  NSNumber *chosenInterface
 @property  GKDiscoveryPeerConnection *trialConnection
 @property  BOOL shouldSignalDiscovery
 @property  double discoveryTimeStamp
 @property  NSMutableArray *sendDataBuffer
 @property  int state
 @property  GKDiscoveryPeerConnection *connection
 @property  NSObject<OS_dispatch_queue> *syncQueue

  // instance methods
  -[GKDiscoveryPeer setServiceName:]
  -[GKDiscoveryPeer initWithServiceName:]
  -[GKDiscoveryPeer serviceName]
  -[GKDiscoveryPeer syncQueue]
  -[GKDiscoveryPeer interfaces]
  -[GKDiscoveryPeer deviceID]
  -[GKDiscoveryPeer stringForState:]
  -[GKDiscoveryPeer setConnection:]
  -[GKDiscoveryPeer setState:]
  -[GKDiscoveryPeer connection]
  -[GKDiscoveryPeer setInterfaces:]
  -[GKDiscoveryPeer state]
  -[GKDiscoveryPeer setDeviceID:]
  -[GKDiscoveryPeer dealloc]
  -[GKDiscoveryPeer invalidate]
  -[GKDiscoveryPeer setPlayerID:]
  -[GKDiscoveryPeer playerID]
  -[GKDiscoveryPeer timeout:]
  -[GKDiscoveryPeer sendData:withCompletionHandler:]
  -[GKDiscoveryPeer flushDataBuffer]
  -[GKDiscoveryPeer trialConnection]
  -[GKDiscoveryPeer setTrialConnection:]
  -[GKDiscoveryPeer sendDataBuffer]
  -[GKDiscoveryPeer setSendDataBuffer:]
  -[GKDiscoveryPeer parseServiceNameForInit:]
  -[GKDiscoveryPeer shouldSignalDiscovery]
  -[GKDiscoveryPeer chosenInterface]
  -[GKDiscoveryPeer setResolveTimeoutHandler:]
  -[GKDiscoveryPeer setResolveTimer:]
  -[GKDiscoveryPeer resolveTimer]
  -[GKDiscoveryPeer cleanUpForBrowse]
  -[GKDiscoveryPeer nextInterfaceIndex]
  -[GKDiscoveryPeer startResolveTimerWithHandler:]
  -[GKDiscoveryPeer stopResolveTimer]
  -[GKDiscoveryPeer didLoseInterface:]
  -[GKDiscoveryPeer orderedInterfaces]
  -[GKDiscoveryPeer setOrderedInterfaces:]
  -[GKDiscoveryPeer attemptedInterfaces]
  -[GKDiscoveryPeer setAttemptedInterfaces:]
  -[GKDiscoveryPeer setChosenInterface:]
  -[GKDiscoveryPeer setShouldSignalDiscovery:]
  -[GKDiscoveryPeer discoveryTimeStamp]
  -[GKDiscoveryPeer setDiscoveryTimeStamp:]
  -[GKDiscoveryPeer resolveTimeoutHandler]


GKDiscovery : NSObject
 @property  GKDiscoveryManager *manager
 @property  @? playerFoundHandler
 @property  @? playerLostHandler
 @property  @? receiveDataHandler

  // instance methods
  -[GKDiscovery stopAdvertising]
  -[GKDiscovery setReceiveDataHandler:]
  -[GKDiscovery setManager:]
  -[GKDiscovery playerFoundHandler]
  -[GKDiscovery startAdvertisingLocalPlayer:discoveryInfo:]
  -[GKDiscovery setPlayerFoundHandler:]
  -[GKDiscovery receiveDataHandler]
  -[GKDiscovery init]
  -[GKDiscovery stopBrowsing]
  -[GKDiscovery playerLostHandler]
  -[GKDiscovery startBrowsingLocalPlayer:]
  -[GKDiscovery manager]
  -[GKDiscovery dealloc]
  -[GKDiscovery forgetParticipant:deviceID:]
  -[GKDiscovery setPlayerLostHandler:]
  -[GKDiscovery initWithDomain:type:]
  -[GKDiscovery sendDataToParticipant:deviceID:data:withCompletionHandler:]


GKDiscoveryManager : NSObject
 @property  NSString *playerID
 @property  NSString *deviceID
 @property  NSMutableDictionary *peers
 @property  GKDiscoveryBonjour *bonjour
 @property  @? playerFoundHandler
 @property  @? playerLostHandler
 @property  @? receiveDataHandler

  // class methods
  +[GKDiscoveryManager parseDeviceIDFromServiceName:]

  // instance methods
  -[GKDiscoveryManager stopAdvertising]
  -[GKDiscoveryManager setReceiveDataHandler:]
  -[GKDiscoveryManager didLosePeer:]
  -[GKDiscoveryManager peers]
  -[GKDiscoveryManager connectToSockAddr:port:forPeer:]
  -[GKDiscoveryManager deviceID]
  -[GKDiscoveryManager playerFoundHandler]
  -[GKDiscoveryManager setBonjour:]
  -[GKDiscoveryManager startAdvertisingLocalPlayer:discoveryInfo:]
  -[GKDiscoveryManager setPlayerFoundHandler:]
  -[GKDiscoveryManager receiveDataHandler]
  -[GKDiscoveryManager serviceNameforDeviceID:playerID:]
  -[GKDiscoveryManager init]
  -[GKDiscoveryManager stopBrowsing]
  -[GKDiscoveryManager bonjour]
  -[GKDiscoveryManager peersList]
  -[GKDiscoveryManager playerLostHandler]
  -[GKDiscoveryManager startBrowsingLocalPlayer:]
  -[GKDiscoveryManager addInterface:withDiscoveryInfo:forPeerWithServiceName:]
  -[GKDiscoveryManager passDataToGKLayer:fromPeer:]
  -[GKDiscoveryManager generateDeviceID]
  -[GKDiscoveryManager cleanUpPeersForBrowse]
  -[GKDiscoveryManager setDeviceID:]
  -[GKDiscoveryManager dealloc]
  -[GKDiscoveryManager forgetParticipant:deviceID:]
  -[GKDiscoveryManager setPlayerLostHandler:]
  -[GKDiscoveryManager setPlayerID:]
  -[GKDiscoveryManager processEvent:forPeer:withUserInfo:]
  -[GKDiscoveryManager initWithDomain:type:]
  -[GKDiscoveryManager setPeers:]
  -[GKDiscoveryManager playerID]
  -[GKDiscoveryManager localServiceName]
  -[GKDiscoveryManager resolveForPeer:]
  -[GKDiscoveryManager removeInterface:forPeerWithServiceName:]
  -[GKDiscoveryManager sendDataToParticipant:deviceID:data:withCompletionHandler:]


GKDiscoveryBonjourResolveContainer : NSObject
 @property  NSMutableArray *serviceRefList
 @property  GKDiscoveryBonjour *context
 @property  @? resolveCompletionHandler

  // instance methods
  -[GKDiscoveryBonjourResolveContainer init]
  -[GKDiscoveryBonjourResolveContainer setContext:]
  -[GKDiscoveryBonjourResolveContainer dealloc]
  -[GKDiscoveryBonjourResolveContainer context]
  -[GKDiscoveryBonjourResolveContainer serviceRefList]
  -[GKDiscoveryBonjourResolveContainer setServiceRefList:]
  -[GKDiscoveryBonjourResolveContainer resolveCompletionHandler]
  -[GKDiscoveryBonjourResolveContainer setResolveCompletionHandler:]


GKDiscoveryBonjour : NSObject
 @property  NSString *serviceType
 @property  NSString *serviceDomain
 @property  ^{_DNSServiceRef_t=} browseRef
 @property  ^{_DNSServiceRef_t=} advertiseRef
 @property  NSMutableArray *launchdSources
 @property  NSMutableDictionary *resolveContainers
 @property  NSObject<OS_dispatch_queue> *resolveContainersSyncQueue
 @property  @? browseCallback
 @property  @? connectionCallback
 @property  @? serviceNameCollisionCallback

  // instance methods
  -[GKDiscoveryBonjour stopAdvertising]
  -[GKDiscoveryBonjour resolveContainersSyncQueue]
  -[GKDiscoveryBonjour setAdvertiseRef:]
  -[GKDiscoveryBonjour closeListeningSockets]
  -[GKDiscoveryBonjour stopResolve:]
  -[GKDiscoveryBonjour ipV4Socket]
  -[GKDiscoveryBonjour setServiceType:]
  -[GKDiscoveryBonjour serviceNameCollisionCallback]
  -[GKDiscoveryBonjour resolveName:onIndex:withCompletionHandler:]
  -[GKDiscoveryBonjour setupListeningSockets]
  -[GKDiscoveryBonjour ipV6Socket]
  -[GKDiscoveryBonjour startBrowsing:]
  -[GKDiscoveryBonjour init]
  -[GKDiscoveryBonjour stopBrowsing]
  -[GKDiscoveryBonjour sendBonjourRegistrationEvent:discoveryInfo:]
  -[GKDiscoveryBonjour connectionCallback]
  -[GKDiscoveryBonjour advertiseRef]
  -[GKDiscoveryBonjour setLaunchdSources:]
  -[GKDiscoveryBonjour setBrowseCallback:]
  -[GKDiscoveryBonjour launchdSources]
  -[GKDiscoveryBonjour serviceDomain]
  -[GKDiscoveryBonjour setResolveContainersSyncQueue:]
  -[GKDiscoveryBonjour createDispatchEventWithSocket:]
  -[GKDiscoveryBonjour browseCallback]
  -[GKDiscoveryBonjour startAdvertisingServiceName:discoveryInfo:]
  -[GKDiscoveryBonjour setConnectionCallback:]
  -[GKDiscoveryBonjour setResolveContainers:]
  -[GKDiscoveryBonjour resolveContainers]
  -[GKDiscoveryBonjour dealloc]
  -[GKDiscoveryBonjour isAppleTV]
  -[GKDiscoveryBonjour setServiceDomain:]
  -[GKDiscoveryBonjour setupBothListeningSockets]
  -[GKDiscoveryBonjour initWithDomain:type:]
  -[GKDiscoveryBonjour setServiceNameCollisionCallback:]
  -[GKDiscoveryBonjour browseRef]
  -[GKDiscoveryBonjour setBrowseRef:]
  -[GKDiscoveryBonjour serviceType]


GKAsyncSocket : NSObject
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  @? receiveDataHandler
 @property  @? connectedHandler
 @property  id socketName

  // class methods
  +[GKAsyncSocket allocWithZone:]

  // instance methods
  -[GKAsyncSocket setReceiveDataHandler:]
  -[GKAsyncSocket targetQueue]
  -[GKAsyncSocket setSyncQueue:]
  -[GKAsyncSocket syncQueue]
  -[GKAsyncSocket setTargetQueue:]
  -[GKAsyncSocket receiveDataHandler]
  -[GKAsyncSocket invalidate]
  -[GKAsyncSocket sendData:withCompletionHandler:]
  -[GKAsyncSocket connectedHandler]
  -[GKAsyncSocket setConnectedHandler:]
  -[GKAsyncSocket setSocketName:]
  -[GKAsyncSocket tcpConnectSockAddr:port:]
  -[GKAsyncSocket socketName]
  -[GKAsyncSocket tcpAttachSocketDescriptor:]


GKAsyncSocketInternal : GKAsyncSocket
 @property  NSObject<OS_dispatch_queue> *targetQueue

  // instance methods
  -[GKAsyncSocketInternal setReceiveDataHandler:]
  -[GKAsyncSocketInternal targetQueue]
  -[GKAsyncSocketInternal setTargetQueue:]
  -[GKAsyncSocketInternal receiveDataHandler]
  -[GKAsyncSocketInternal init]
  -[GKAsyncSocketInternal dealloc]
  -[GKAsyncSocketInternal invalidate]
  -[GKAsyncSocketInternal sendData:withCompletionHandler:]
  -[GKAsyncSocketInternal connectedHandler]
  -[GKAsyncSocketInternal setConnectedHandler:]
  -[GKAsyncSocketInternal sendData]
  -[GKAsyncSocketInternal setSocketName:]
  -[GKAsyncSocketInternal tcpConnectSockAddr:port:]
  -[GKAsyncSocketInternal socketName]
  -[GKAsyncSocketInternal tcpAttachSocketDescriptor:]
  -[GKAsyncSocketInternal receiveData]
  -[GKAsyncSocketInternal setupSourcesWithSocket:receiveEventHandler:sendEventHandler:]
  -[GKAsyncSocketInternal closeConnectionNow]


GKDiscoveryPeerConnection : NSObject <GKSimpleTimerDelegate>
 @property  NSString *remoteServiceName
 @property  NSString *localServiceName
 @property  @? receiveDataHandler
 @property  @? connectedHandler
 @property  NSObject<OS_dispatch_queue> *syncQueue
 @property  NSObject<OS_dispatch_queue> *targetQueue

  // class methods
  +[GKDiscoveryPeerConnection receiveDataLimit]
  +[GKDiscoveryPeerConnection sendDataLimit]
  +[GKDiscoveryPeerConnection checkConstants]

  // instance methods
  -[GKDiscoveryPeerConnection setReceiveDataHandler:]
  -[GKDiscoveryPeerConnection targetQueue]
  -[GKDiscoveryPeerConnection setSyncQueue:]
  -[GKDiscoveryPeerConnection syncQueue]
  -[GKDiscoveryPeerConnection setTargetQueue:]
  -[GKDiscoveryPeerConnection receiveDataHandler]
  -[GKDiscoveryPeerConnection dealloc]
  -[GKDiscoveryPeerConnection invalidate]
  -[GKDiscoveryPeerConnection localServiceName]
  -[GKDiscoveryPeerConnection timeout:]
  -[GKDiscoveryPeerConnection setLocalServiceName:]
  -[GKDiscoveryPeerConnection remoteServiceName]
  -[GKDiscoveryPeerConnection syncSendHello]
  -[GKDiscoveryPeerConnection syncCloseConnectionNow]
  -[GKDiscoveryPeerConnection syncSendMessage:data:withCompletionHandler:]
  -[GKDiscoveryPeerConnection setRemoteServiceName:]
  -[GKDiscoveryPeerConnection shouldDecideAboutConnection]
  -[GKDiscoveryPeerConnection syncSendMessageReceipt:sequenceNumber:]
  -[GKDiscoveryPeerConnection syncSendAccept]
  -[GKDiscoveryPeerConnection syncAcceptedConnection]
  -[GKDiscoveryPeerConnection syncProcessMessage:data:sequenceNumber:]
  -[GKDiscoveryPeerConnection syncReceivedData:error:]
  -[GKDiscoveryPeerConnection initWithLocalServiceName:]
  -[GKDiscoveryPeerConnection sendData:withCompletionHandler:]
  -[GKDiscoveryPeerConnection connectedHandler]
  -[GKDiscoveryPeerConnection setConnectedHandler:]
  -[GKDiscoveryPeerConnection connectToSockAddr:port:]
  -[GKDiscoveryPeerConnection attachSocketDescriptor:]
  -[GKDiscoveryPeerConnection syncConnected:]
  -[GKDiscoveryPeerConnection syncSetupNewSocket]


GKInterface : NSObject
 @property  NSNumber *index
 @property  NSString *bsdName
 @property  NSString *type
 @property  unsigned int priority

  // class methods
  +[GKInterface bsdNameForIndex:]
  +[GKInterface interfaceWithInterfaceIndex:]

  // instance methods
  -[GKInterface bsdName]
  -[GKInterface setType:]
  -[GKInterface setIndex:]
  -[GKInterface setPriority:]
  -[GKInterface priority]
  -[GKInterface type]
  -[GKInterface index]
  -[GKInterface dealloc]
  -[GKInterface setBsdName:]


GKInterfacePrioritizer : NSObject
  // class methods
  +[GKInterfacePrioritizer initialize]
  +[GKInterfacePrioritizer prioritizeLocalInterfaces:]
  +[GKInterfacePrioritizer bsdNameToInterfaceTypeMap]


GKSimpleTimer : NSObject
 @property  <GKSimpleTimerDelegate> *delegate
 @property  double interval

  // instance methods
  -[GKSimpleTimer interval]
  -[GKSimpleTimer setDelegate:]
  -[GKSimpleTimer init]
  -[GKSimpleTimer setTimer:]
  -[GKSimpleTimer delegate]
  -[GKSimpleTimer dealloc]
  -[GKSimpleTimer invalidate]
  -[GKSimpleTimer fireIn:fromNow:]


(CDXTicket)
	// class methods
	+[(CDXTicket) dataWithSockAddr:]

	// instance methods
	-[(CDXTicket) CDXTicketIsReflected]
	-[(CDXTicket) CDXTicketIsHolePunch]
	-[(CDXTicket) CDXTicketRevision]
	-[(CDXTicket) CDXTicketPID]
	-[(CDXTicket) CDXTicketPCNT]
	-[(CDXTicket) CDXTicketExpirationDate]
	-[(CDXTicket) CDXTicket]
	-[(CDXTicket) mutableCDXTicket]
	-[(CDXTicket) CDXTicketSID]
	-[(CDXTicket) CDXTicketIsStub]
	-[(CDXTicket) CDXTicketTrimmed]
	-[(CDXTicket) CDXTicketWellFormed]
	-[(CDXTicket) CDXTicketIsRelatedToTicket:]
	-[(CDXTicket) sockAddr]

BluetoothManager(BluetoothManagerGKExtensions)
	// instance methods
	-[BluetoothManager(BluetoothManagerGKExtensions) localDeviceSupportsService:]

01 00 0500 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothManager 
01 00 0000 GKInterfaceListener 
01 00 0000 GKSConnectivitySettings 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSArchiver 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAutoreleasePool 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1200 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRecursiveLock 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnarchiver 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0800 /System/Library/PrivateFrameworks/AVConference.framework/Frameworks/ViceroyTrace.framework/ViceroyTrace: TimingCollection 
01 00 0000 VCCapabilities 
01 00 0000 VideoConference 
