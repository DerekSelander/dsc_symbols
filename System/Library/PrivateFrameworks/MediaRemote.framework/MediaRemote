|| __DATA.__data _MRExternalDeviceAuthenticatedConnectionTimeout
|| __DATA.__data _kMRMediaRemoteProactiveSystemEndpointDidStartPlayingNotifyName
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVClusterOutputDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVConcreteEndpoint
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVDistantExternalDeviceMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVEndpointObserver
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVMutableDistantExternalDeviceMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVOutputContextModification
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVOutputDeviceDescription
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVOutputDeviceTransport
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVReconnaissanceSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVVirtualOutputDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MRAVXPCPipeTransport
|| __DATA.__objc_data _OBJC_CLASS_$_MRAirPlayTransportConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRAudioBuffer
|| __DATA.__objc_data _OBJC_CLASS_$_MRAudioFadeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRAudioFadeResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRCommandResult
|| __DATA.__objc_data _OBJC_CLASS_$_MRCompanionLinkClient
|| __DATA.__objc_data _OBJC_CLASS_$_MRCompositeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRConcreteEndpoint
|| __DATA.__objc_data _OBJC_CLASS_$_MRContentItemMetadataAudioFormat
|| __DATA.__objc_data _OBJC_CLASS_$_MRContentItemMetadataAudioRoute
|| __DATA.__objc_data _OBJC_CLASS_$_MRCoreUtilsPairingSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRCoreUtilsSystemPairingSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRCreateHostedEndpointRequestMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRCreateHostedEndpointResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRCryptoPairingIdentity
|| __DATA.__objc_data _OBJC_CLASS_$_MRCryptoPairingMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRCryptoPairingSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRCryptoPairingSessionBlockDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_MRDeviceInfoMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRDeviceInfoOutputDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MRDeviceInfoUpdateMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRDiscoveryUpdateEndpointsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRDiscoveryUpdateOutputDevicesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRDistantExternalDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MREmulatedGameController
|| __DATA.__objc_data _OBJC_CLASS_$_MRExternalClientConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRExternalDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MRExternalDevicePairingSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRExternalDeviceTransportConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRExternalJSONClientConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRExternalOutputContextDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MRGameControllerDaemonProxy
|| __DATA.__objc_data _OBJC_CLASS_$_MRGameControllerMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGameControllerPropertiesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGenericMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGetKeyboardSessionMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGetVoiceInputDevicesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGetVoiceInputDevicesResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGetVolumeControlCapabilitiesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGetVolumeControlCapabilitiesResultMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGetVolumeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRGetVolumeResultMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRIDSClientConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRIDSConnectivityManager
|| __DATA.__objc_data _OBJC_CLASS_$_MRIDSDiscoverySession
|| __DATA.__objc_data _OBJC_CLASS_$_MRIDSMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRIDSTransport
|| __DATA.__objc_data _OBJC_CLASS_$_MRIDSTransportConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRJSONTransportExternalDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MRKeyboardMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRLegacyController
|| __DATA.__objc_data _OBJC_CLASS_$_MRLegacySendHIDEventMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRLegacyVolumeControlCapabilitiesDidChangeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRLogBuffer
|| __DATA.__objc_data _OBJC_CLASS_$_MRMediaSuggestionController
|| __DATA.__objc_data _OBJC_CLASS_$_MRModifyOutputContextRequestMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRMutableTextEditingAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_MRMutableTextEditingSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRNotification
|| __DATA.__objc_data _OBJC_CLASS_$_MRNotificationMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingArtwork
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingArtworkImage
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingAudioFormatContentInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingAudioFormatController
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingControllerDestination
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingControllerHelper
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingPlayerResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MRNowPlayingState
|| __DATA.__objc_data _OBJC_CLASS_$_MROSTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_MROriginClientPropertiesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPasscodeCredentials
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackQueueClient
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackQueueRequestMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionMigrateBeginMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionMigrateEndMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionMigrateRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionMigrateRequestMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionMigrateResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionRequestMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlaybackSessionResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPlayerClientPropertiesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPresentRouteAuthorizationStatusMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPromptForRouteAuthorizationMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRPromptForRouteAuthorizationResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRProtobufSerialization
|| __DATA.__objc_data _OBJC_CLASS_$_MRProtocolClientConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRProtocolMessageLogger
|| __DATA.__objc_data _OBJC_CLASS_$_MRProtocolMessageOptions
|| __DATA.__objc_data _OBJC_CLASS_$_MRProximityProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MRRapportTransport
|| __DATA.__objc_data _OBJC_CLASS_$_MRRapportTransportConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRRegisterForGameControllerEventsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRegisterGameControllerMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRegisterGameControllerResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRegisterHIDDeviceMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRegisterHIDDeviceResultMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRegisterVoiceInputDeviceMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRegisterVoiceInputDeviceResponseMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRemoteTextInputMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRemoveClientMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRemoveEndpointsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRemoveFromParentGroupMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRemoveOutputDevicesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRRemovePlayerMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendCommandHandlerDialog
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendCommandHandlerDialogAction
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendCommandHandlerEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendCommandMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendCommandResultMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendCommandResultStatus
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendLyricsEventMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSendVoiceInputMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetArtworkMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetConnectionStateMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetDefaultSupportedCommandsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetDiscoveryModeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetHiliteModeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetNowPlayingClientMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetNowPlayingPlayerMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetReadyStateMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetRecordingStateMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRSetStateMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRStreamTransportConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MRSupportedProtocolMessages
|| __DATA.__objc_data _OBJC_CLASS_$_MRTextEditingAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_MRTextEditingSession
|| __DATA.__objc_data _OBJC_CLASS_$_MRTextInputMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRTransactionDestination
|| __DATA.__objc_data _OBJC_CLASS_$_MRTransactionMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRTransactionPacket
|| __DATA.__objc_data _OBJC_CLASS_$_MRTransactionPacketizer
|| __DATA.__objc_data _OBJC_CLASS_$_MRTransactionSource
|| __DATA.__objc_data _OBJC_CLASS_$_MRTransportExternalDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MRUnregisterGameControllerMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRUpdateActiveSystemEndpointResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MRUpdateClientMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRUpdateContentItemArtworkMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRUpdateContentItemMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRUpdateEndpointsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRUpdateOutputDevicesMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRUpdatePlayerMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRV1NowPlayingController
|| __DATA.__objc_data _OBJC_CLASS_$_MRV2NowPlayingController
|| __DATA.__objc_data _OBJC_CLASS_$_MRV3NowPlayingController
|| __DATA.__objc_data _OBJC_CLASS_$_MRVirtualOutputContext
|| __DATA.__objc_data _OBJC_CLASS_$_MRVirtualVoiceInputDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MRVolumeControlCapabilitiesDidChangeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRVolumeDidChangeMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MRWakeDeviceMessage
|| __DATA.__objc_data _OBJC_CLASS_$__MRCommandOptionsProtobuf
|| __DATA.__objc_data _OBJC_CLASS_$__MRMRNowPlayingAudioFormatContentInfoProtobuf
|| __DATA.__objc_data _OBJC_CLASS_$__MRNowPlayingInfoProtobuf
|| __DATA.__objc_data _OBJC_CLASS_$__MRReceivedCommandProtobuf
|| __DATA.__objc_data _OBJC_CLASS_$__MRSendCommandResultMessageProtobuf
|| __DATA.__objc_data _OBJC_CLASS_$__MRTransactionKeyProtobuf
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVClusterOutputDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVConcreteEndpoint
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVDistantExternalDeviceMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVEndpointObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVMutableDistantExternalDeviceMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVOutputContextModification
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVOutputDeviceDescription
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVOutputDeviceTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVReconnaissanceSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVVirtualOutputDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAVXPCPipeTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAirPlayTransportConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAudioBuffer
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAudioFadeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRAudioFadeResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCommandResult
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCompanionLinkClient
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCompositeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRConcreteEndpoint
|| __DATA.__objc_data _OBJC_METACLASS_$_MRContentItemMetadataAudioFormat
|| __DATA.__objc_data _OBJC_METACLASS_$_MRContentItemMetadataAudioRoute
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCoreUtilsPairingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCoreUtilsSystemPairingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCreateHostedEndpointRequestMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCreateHostedEndpointResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCryptoPairingIdentity
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCryptoPairingMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCryptoPairingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRCryptoPairingSessionBlockDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_MRDeviceInfoMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRDeviceInfoOutputDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MRDeviceInfoUpdateMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRDiscoveryUpdateEndpointsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRDiscoveryUpdateOutputDevicesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRDistantExternalDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MREmulatedGameController
|| __DATA.__objc_data _OBJC_METACLASS_$_MRExternalClientConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRExternalDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MRExternalDevicePairingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRExternalDeviceTransportConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRExternalJSONClientConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRExternalOutputContextDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGameControllerDaemonProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGameControllerMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGameControllerPropertiesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGenericMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGetKeyboardSessionMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGetVoiceInputDevicesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGetVoiceInputDevicesResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGetVolumeControlCapabilitiesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGetVolumeControlCapabilitiesResultMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGetVolumeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRGetVolumeResultMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRIDSClientConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRIDSConnectivityManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MRIDSDiscoverySession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRIDSMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRIDSTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_MRIDSTransportConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRJSONTransportExternalDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MRKeyboardMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRLegacyController
|| __DATA.__objc_data _OBJC_METACLASS_$_MRLegacySendHIDEventMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRLegacyVolumeControlCapabilitiesDidChangeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRLogBuffer
|| __DATA.__objc_data _OBJC_METACLASS_$_MRMediaSuggestionController
|| __DATA.__objc_data _OBJC_METACLASS_$_MRModifyOutputContextRequestMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRMutableTextEditingAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_MRMutableTextEditingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNotificationMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingArtwork
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingArtworkImage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingAudioFormatContentInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingAudioFormatController
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingControllerDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingControllerHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingPlayerResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MRNowPlayingState
|| __DATA.__objc_data _OBJC_METACLASS_$_MROSTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_MROriginClientPropertiesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPasscodeCredentials
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackQueueClient
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackQueueRequestMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionMigrateBeginMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionMigrateEndMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionMigrateRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionMigrateRequestMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionMigrateResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionRequestMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlaybackSessionResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPlayerClientPropertiesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPresentRouteAuthorizationStatusMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPromptForRouteAuthorizationMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRPromptForRouteAuthorizationResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRProtobufSerialization
|| __DATA.__objc_data _OBJC_METACLASS_$_MRProtocolClientConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRProtocolMessageLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_MRProtocolMessageOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_MRProximityProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRapportTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRapportTransportConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRegisterForGameControllerEventsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRegisterGameControllerMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRegisterGameControllerResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRegisterHIDDeviceMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRegisterHIDDeviceResultMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRegisterVoiceInputDeviceMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRegisterVoiceInputDeviceResponseMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRemoteTextInputMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRemoveClientMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRemoveEndpointsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRemoveFromParentGroupMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRemoveOutputDevicesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRRemovePlayerMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendCommandHandlerDialog
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendCommandHandlerDialogAction
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendCommandHandlerEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendCommandMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendCommandResultMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendCommandResultStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendLyricsEventMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSendVoiceInputMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetArtworkMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetConnectionStateMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetDefaultSupportedCommandsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetDiscoveryModeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetHiliteModeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetNowPlayingClientMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetNowPlayingPlayerMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetReadyStateMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetRecordingStateMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSetStateMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRStreamTransportConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MRSupportedProtocolMessages
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTextEditingAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTextEditingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTextInputMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTransactionDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTransactionMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTransactionPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTransactionPacketizer
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTransactionSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MRTransportExternalDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUnregisterGameControllerMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUpdateActiveSystemEndpointResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUpdateClientMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUpdateContentItemArtworkMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUpdateContentItemMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUpdateEndpointsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUpdateOutputDevicesMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUpdatePlayerMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRV1NowPlayingController
|| __DATA.__objc_data _OBJC_METACLASS_$_MRV2NowPlayingController
|| __DATA.__objc_data _OBJC_METACLASS_$_MRV3NowPlayingController
|| __DATA.__objc_data _OBJC_METACLASS_$_MRVirtualOutputContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MRVirtualVoiceInputDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MRVolumeControlCapabilitiesDidChangeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRVolumeDidChangeMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MRWakeDeviceMessage
|| __DATA.__objc_data _OBJC_METACLASS_$__MRCommandOptionsProtobuf
|| __DATA.__objc_data _OBJC_METACLASS_$__MRMRNowPlayingAudioFormatContentInfoProtobuf
|| __DATA.__objc_data _OBJC_METACLASS_$__MRNowPlayingInfoProtobuf
|| __DATA.__objc_data _OBJC_METACLASS_$__MRReceivedCommandProtobuf
|| __DATA.__objc_data _OBJC_METACLASS_$__MRSendCommandResultMessageProtobuf
|| __DATA.__objc_data _OBJC_METACLASS_$__MRTransactionKeyProtobuf
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._MACAddress
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._accessSerialQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._airPlayGroupID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._avOutputDevice
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._firmwareVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._logicalDeviceID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._modelID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._modelSpecificInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._overrideGroupID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._overrideUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._playingPairedDeviceName
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._sourceInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVConcreteOutputDevice._uid
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVDistantExternalDeviceMetadata._deviceInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVDistantExternalDeviceMetadata._hostName
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVDistantExternalDeviceMetadata._hostPort
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVDistantExternalDeviceMetadata._name
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVDistantExternalDeviceMetadata._supportedMessages
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRAVDistantExternalDeviceMetadata._usingSystemPairing
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRApplicationActivity._creatorProcessID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRApplicationActivity._primaryApplicationDisplayID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRApplicationActivity._secondaryApplicationDisplayID
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRApplicationActivity._status
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRApplicationActivity._uniqueIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRTextEditingAttributes._inputTraits
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRTextEditingAttributes._prompt
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRTextEditingAttributes._title
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRTextEditingSession._attributes
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRTextEditingSession._editing
|| __DATA.__objc_ivar _OBJC_IVAR_$_MRTextEditingSession._text
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._canModifyGroupMembership
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._connectionType
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._designatedGroupLeader
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._instanceIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._isLocalEndpoint
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._isProxyGroupPlayer
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._name
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._outputDevices
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._personalOutputDevices
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVEndpointDescriptorProtobuf._uniqueIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._airPlayGroupID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._availableBluetoothListeningModes
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._batteryLevel
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._bluetoothID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._canAccessAppleMusic
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._canAccessRemoteAssets
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._canAccessiCloudMusicLibrary
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._canFetchMediaDataFromSender
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._canPlayEncryptedProgressiveDownloadAssets
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._canRelayCommunicationChannel
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._clusterCompositions
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._clusterType
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._configuredClusterSize
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._currentBluetoothListeningMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._deviceSubType
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._deviceType
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._firmwareVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._groupContainsGroupLeader
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._groupID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._hostDeviceClass
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isAddedToHomeKit
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isAirPlayReceiverSessionActive
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isDeviceGroupable
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isGroupLeader
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isGroupable
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isLocalDevice
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isProxyGroupPlayer
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isRemoteControllable
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._isVolumeControlAvailable
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._logicalDeviceID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._macAddress
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._modelID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._modelSpecificInfoData
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._name
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._parentGroupContainsDiscoverableLeader
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._parentGroupIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._primaryUID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._producesLowFidelityAudio
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._requiresAuthorization
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._shouldForceRemoteControlabillity
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._sourceInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._supportsBufferedAirPlay
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._supportsExternalScreen
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._supportsHAP
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._supportsMultiplayer
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._supportsRapportRemoteControlTransport
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._supportsSharePlayHandoff
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._uniqueIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._usingJSONProtocol
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._volume
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRAVOutputDeviceDescriptorProtobuf._volumeCapabilities
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._alwaysIgnoreDuringCall
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._alwaysIgnoreDuringSharePlay
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._assistantCommandSendTimestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._assistantTTSEndTimestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._beginSeek
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._commandID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._commandSequenceUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._commandTimeout
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._contentItemID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._contextID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._desiredSessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._destinationAppDisplayID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._destinationDeviceUIDs
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._endSeek
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._eventNoticeIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._eventNoticeType
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._externalPlayerCommand
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._homeKitUserIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._insertAfterContentItemID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._insertBeforeContentItemID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._languageOption
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._mediaType
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._negative
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._nowPlayingContentItemID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._originatedFromRemoteDevice
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._originatingDeviceUID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackAuthorizationToken
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackPosition
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackQueueContext
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackQueueDestinationOffset
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackQueueInsertionPosition
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackQueueOffset
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackRate
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackSession
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackSessionFilePath
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackSessionIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackSessionMetadata
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackSessionPriority
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackSessionRevision
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._playbackSessionType
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._preservesQueueEndAction
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._preservesRepeatMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._preservesShuffleMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._queueEndAction
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._radioStationHash
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._radioStationID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._rating
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._remoteControlInterface
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._repeatMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._replaceIntent
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._requestDefermentToPlaybackQueuePosition
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._sendOptions
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._senderID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._sharedPlaybackSessionIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._shouldBeginRadioPlayback
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._shouldOverrideManuallyCuratedQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._shuffleMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._skipInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._sourceID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._stationURL
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._systemAppPlaybackQueueData
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._trackID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._trueCompletion
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._userIdentityData
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRCommandOptionsProtobuf._verifySupportedCommands
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRDiagnosticProtobuf._dateGenerated
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRDiagnosticProtobuf._diagnosticInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRDiagnosticProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._audioFormat
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._audioSessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._bestAvailableContent
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._bundleID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._channelCount
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._eligibleForSpatialization
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRMRNowPlayingAudioFormatContentInfoProtobuf._spatialized
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._bundleIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._displayName
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._extendedBundleIdentifierHierarchys
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._iconURL
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._isEmptyDeprecated
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._nowPlayingVisibility
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._parentApplicationBundleIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._processIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._processUserIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingClientProtobuf._tintColor
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._album
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._artist
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._artworkDataDigest
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._elapsedTime
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._isAdvertisement
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._isAlwaysLive
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._isExplicitTrack
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._isMusicApp
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._playbackRate
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._radioStationHash
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._radioStationIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._radioStationName
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._repeatMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._shuffleMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._title
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingInfoProtobuf._uniqueIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingPlayerPathProtobuf._client
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingPlayerPathProtobuf._origin
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRNowPlayingPlayerPathProtobuf._player
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._appOptions
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._command
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._destinationAppDisplayID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._destinationAppProcessID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._options
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._originUID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._playerPath
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._remoteControlInterfaceID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRReceivedCommandProtobuf._senderAppDisplayID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRSendCommandResultMessageProtobuf._commandID
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRSendCommandResultMessageProtobuf._commandResult
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRSendCommandResultMessageProtobuf._handlerReturnStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRSendCommandResultMessageProtobuf._handlerReturnStatusDatas
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRSendCommandResultMessageProtobuf._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRSendCommandResultMessageProtobuf._playerPath
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRSendCommandResultMessageProtobuf._sendError
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRTransactionKeyProtobuf._identifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__MRTransactionKeyProtobuf._userData
|| __DATA_CONST.__const _MRAVEndpointDidAddOutputDeviceNotification
|| __DATA_CONST.__const _MRAVEndpointDidChangeOutputDeviceNotification
|| __DATA_CONST.__const _MRAVEndpointDidRemoveOutputDeviceNotification
|| __DATA_CONST.__const _MRAVEndpointOutputDeviceDataUserInfoKey
|| __DATA_CONST.__const _MRAVEndpointOutputDeviceUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextDidAddLocalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextDidAddOutputDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextDidAddPersonalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextDidBeginModificationNotification
|| __DATA_CONST.__const _MRAVOutputContextDidChangeNotification
|| __DATA_CONST.__const _MRAVOutputContextDidFinishModificationNotification
|| __DATA_CONST.__const _MRAVOutputContextDidRemoveLocalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextDidRemoveOutputDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextDidRemovePersonalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextManagerLocalDeviceDidChangeOutputContextNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationErrorUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextModificationIdentifierUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextModificationInitiatorUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextModificationRequestToAddLocalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationRequestToAddOutputDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationRequestToRemoveLocalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationRequestToRemoveOutputDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationTypeUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextModificationWillAddLocalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationWillAddOutputDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationWillRemoveLocalDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextModificationWillRemoveOutputDeviceNotification
|| __DATA_CONST.__const _MRAVOutputContextOutputDeviceDidChangeNotification
|| __DATA_CONST.__const _MRAVOutputContextOutputDeviceUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextOutputDevicesDidChangeNotification
|| __DATA_CONST.__const _MRAVOutputContextVolumeControlCapabilitiesDidChangeNotification
|| __DATA_CONST.__const _MRAVOutputContextVolumeControlCapabilitiesUserInfoKey
|| __DATA_CONST.__const _MRAVOutputContextVolumeDidChangeNotification
|| __DATA_CONST.__const _MRAVOutputContextVolumeUserInfoKey
|| __DATA_CONST.__const _MRCompanionLinkClientActiveSystemEndpointUIDUserInfoKey
|| __DATA_CONST.__const _MRCompanionLinkClientEventAirplayActiveChanged
|| __DATA_CONST.__const _MRCompanionLinkClientEventIsPlaying
|| __DATA_CONST.__const _MRCompanionLinkClientEventOutputContextChanged
|| __DATA_CONST.__const _MRCompanionLinkClientEventPlaybackSessionChanged
|| __DATA_CONST.__const _MRCompanionLinkClientEventUpdateActiveSystemEndpoint
|| __DATA_CONST.__const _MRCompanionLinkClientRequestNowPlayingState
|| __DATA_CONST.__const _MRCompanionLinkClientRequestPlaybackSession
|| __DATA_CONST.__const _MREndpointConnectionCorrelationIDUserInfoKey
|| __DATA_CONST.__const _MREndpointConnectionReasonUserInfoKey
|| __DATA_CONST.__const _MRExternalDeviceConnectionCorrelationIDUserInfoKey
|| __DATA_CONST.__const _MRExternalDeviceConnectionReasonUserInfoKey
|| __DATA_CONST.__const _MRExternalDeviceTransportConnectOptionsUserInfoKey
|| __DATA_CONST.__const _MRGenericMessageSetNameKey
|| __DATA_CONST.__const _MRIDSConnectivityManagerDeviceDidConnect
|| __DATA_CONST.__const _MRIDSConnectivityManagerDeviceDidDisconnect
|| __DATA_CONST.__const _MRIDSServiceMessageTypeConnectRemoteControl
|| __DATA_CONST.__const _MRIDSServiceMessageTypeDisconnectRemoteControl
|| __DATA_CONST.__const _MRIDSServiceMessageTypeDiscovery
|| __DATA_CONST.__const _MRIDSServiceMessageTypeProtobuf
|| __DATA_CONST.__const _MRIDSServiceMessageTypeRemoteControl
|| __DATA_CONST.__const _MRNowPlayingSessionManagerActiveSessionWillBeHijackedByNativePlayback
|| __DATA_CONST.__const _MRNowPlayingSessionManagerIsSilentPrimaryDidChange
|| __DATA_CONST.__const _MRNowPlayingSessionManagerLocalDeviceRoutingContextIDDidChange
|| __DATA_CONST.__const _MROutputContextDataSourceDidAddOutputDeviceNotification
|| __DATA_CONST.__const _MROutputContextDataSourceDidChangeOutputDeviceNotification
|| __DATA_CONST.__const _MROutputContextDataSourceDidReloadNotification
|| __DATA_CONST.__const _MROutputContextDataSourceDidRemoveOutputDeviceNotification
|| __DATA_CONST.__const _MROutputContextDataSourceOutputDeviceDidChangeVolumeControlCapabilitiesNotification
|| __DATA_CONST.__const _MROutputContextDataSourceOutputDeviceDidChangeVolumeNotification
|| __DATA_CONST.__const _MROutputContextDataSourceOutputDeviceUserInfoKey
|| __DATA_CONST.__const _MROutputContextDataSourceVolumeCapabilitiesUserInfoKey
|| __DATA_CONST.__const _MROutputContextDataSourceVolumeUserInfoKey
|| __DATA_CONST.__const _MRSuggestionContextHome
|| __DATA_CONST.__const _MRSuggestionContextHomeScreen
|| __DATA_CONST.__const _MRUpdateActiveSystemEndpointRequestUserInfoKey
|| __DATA_CONST.__const __MRAVEndpointNameUserInfoKey
|| __DATA_CONST.__const __MRAVEndpointOutputDeviceNameUserInfoKey
|| __DATA_CONST.__const __MRDeviceInfoDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemoteActiveOriginDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemoteActivePlayerDidChange
|| __DATA_CONST.__const __MRMediaRemoteActiveSystemEndpointDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemoteApplicationClientStateDidChange
|| __DATA_CONST.__const __MRMediaRemoteApplicationDidForegroundNotification
|| __DATA_CONST.__const __MRMediaRemoteApplicationDisplayNameDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemoteApplicationHasDefaultSupportedCommandsUserInfoKey
|| __DATA_CONST.__const __MRMediaRemoteDefaultSupportedCommandsDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemoteIsImplicitNowPlayingNotificationUserInfoKey
|| __DATA_CONST.__const __MRMediaRemoteIsImplicitPlayerNotificationUserInfoKey
|| __DATA_CONST.__const __MRMediaRemoteNowPlayingApplicationDidRegister
|| __DATA_CONST.__const __MRMediaRemoteNowPlayingApplicationDidUnregister
|| __DATA_CONST.__const __MRMediaRemoteNowPlayingPlayerDidRegister
|| __DATA_CONST.__const __MRMediaRemoteNowPlayingPlayerDidUnregister
|| __DATA_CONST.__const __MRMediaRemoteOriginDidRegisterNotification
|| __DATA_CONST.__const __MRMediaRemoteOriginDidUnregisterNotification
|| __DATA_CONST.__const __MRMediaRemoteOriginLastPlayingTimestampUserInfoKey
|| __DATA_CONST.__const __MRMediaRemoteOriginNowPlayingApplicationDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemotePickedRouteVolumeControlAvailabilityDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemotePickedRouteVolumeDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemotePlayerIsPlayingDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemotePlayerNowPlayingInfoDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemotePlayerPlaybackStateDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemotePlayerStateDidChange
|| __DATA_CONST.__const __MRMediaRemotePlayerSupportedCommandsDidChangeNotification
|| __DATA_CONST.__const __MRMediaRemoteWillSendCommandToPlayerNotification
|| __DATA_CONST.__const __MRNowPlayingPlaybackQueueChangedNotification
|| __DATA_CONST.__const __MRPlayerPlaybackQueueContentItemArtworkChangedNotification
|| __DATA_CONST.__const __MRPlayerPlaybackQueueContentItemsChangedNotification
|| __DATA_CONST.__const __kMRMediaRemotePlaybackErrorDataUserInfoKey
|| __DATA_CONST.__const __kMRPlaybackQueueRequestIDUserInfoKey
|| __DATA_CONST.__const _kMRAVEndpointExternalDeviceInvalidatedNotification
|| __DATA_CONST.__const _kMRAVEndpointIdentifierUserInfoKey
|| __DATA_CONST.__const _kMRAVEndpointOutputDeviceIdentifierUserInfoKey
|| __DATA_CONST.__const _kMRAVEndpointOutputDevicesDidChangeNotification
|| __DATA_CONST.__const _kMRAVEndpointTopologyModificationFailureReasonUserInfoKey
|| __DATA_CONST.__const _kMRAVEndpointVolumeControlCapabilitiesDidChangeNotification
|| __DATA_CONST.__const _kMRAVEndpointVolumeControlCapabilitiesUserInfoKey
|| __DATA_CONST.__const _kMRAVEndpointVolumeDidChangeNotification
|| __DATA_CONST.__const _kMRAVEndpointVolumeUserInfoKey
|| __DATA_CONST.__const _kMRAVOutputContextDevicesDidChangeNotification
|| __DATA_CONST.__const _kMRAVOutputContextIdentifierUserInfoKey
|| __DATA_CONST.__const _kMRAVOutputContextOutputDeviceIdentifierUserInfoKey
|| __DATA_CONST.__const _kMRAVOutputContextPredictedOutputDeviceDidChangeNotification
|| __DATA_CONST.__const _kMRAVOutputContextPredictedOutputDeviceUserInfoKey
|| __DATA_CONST.__const _kMRActiveDeviceInfoDidChangeNotification
|| __DATA_CONST.__const _kMRActiveNowPlayingPlayerPathDataUserInfoKey
|| __DATA_CONST.__const _kMRActiveNowPlayingPlayerPathUserInfoKey
|| __DATA_CONST.__const _kMRApplicationActivityHasBegunNotification
|| __DATA_CONST.__const _kMRApplicationActivityHasEndedNotification
|| __DATA_CONST.__const _kMRApplicationActivityStatusDidChangeNotification
|| __DATA_CONST.__const _kMRApplicationActivityUserInfoDataKey
|| __DATA_CONST.__const _kMRApplicationActivityUserInfoKey
|| __DATA_CONST.__const _kMRApplicationDidReportPlaybackErrorDistributedNotificationName
|| __DATA_CONST.__const _kMRChangeActiveSystemEndpointChangeTypeKey
|| __DATA_CONST.__const _kMRChangeActiveSystemEndpointClientKey
|| __DATA_CONST.__const _kMRChangeActiveSystemEndpointIsLocalKey
|| __DATA_CONST.__const _kMRChangeActiveSystemEndpointReasonKey
|| __DATA_CONST.__const _kMRChangeActiveSystemEndpointTimeSinceLastChangeKey
|| __DATA_CONST.__const _kMRChangeActiveSystemEndpointTypeKey
|| __DATA_CONST.__const _kMRChangeActiveSystemReasonExternalDevice
|| __DATA_CONST.__const _kMRChangeActiveSystemReasonFallbackCouldNotResolve
|| __DATA_CONST.__const _kMRChangeActiveSystemReasonInvalidRoute
|| __DATA_CONST.__const _kMRChangeActiveSystemReasonMigrate
|| __DATA_CONST.__const _kMRConnectionAllowAuthenticationPromptKey
|| __DATA_CONST.__const _kMRConnectionCreateIOStreamsDurationKey
|| __DATA_CONST.__const _kMRConnectionFailureReasonKey
|| __DATA_CONST.__const _kMRConnectionIsRetryKey
|| __DATA_CONST.__const _kMRConnectionLoadDeviceInfoDurationKey
|| __DATA_CONST.__const _kMRConnectionOpenSecuritySessionDurationKey
|| __DATA_CONST.__const _kMRConnectionReasonKey
|| __DATA_CONST.__const _kMRConnectionRegisterCustomOriginDurationKey
|| __DATA_CONST.__const _kMRConnectionSyncClientStateDurationKey
|| __DATA_CONST.__const _kMRCredentialRequirementCharacterCountUserInfoKey
|| __DATA_CONST.__const _kMRCredentialRequirementTypeUserInfoKey
|| __DATA_CONST.__const _kMRDeviceInfoDidChangeNotification
|| __DATA_CONST.__const _kMRDisconnectionRetryCount
|| __DATA_CONST.__const _kMRDisconnectionWillAttemptReconnection
|| __DATA_CONST.__const _kMREventAppBundleKey
|| __DATA_CONST.__const _kMREventChangeActiveSystemEndpoint
|| __DATA_CONST.__const _kMREventConnection
|| __DATA_CONST.__const _kMREventDestinationCountKey
|| __DATA_CONST.__const _kMREventDestinationKey
|| __DATA_CONST.__const _kMREventDisconnection
|| __DATA_CONST.__const _kMREventDurationKey
|| __DATA_CONST.__const _kMREventErrorCodeKey
|| __DATA_CONST.__const _kMREventErrorDescriptionKey
|| __DATA_CONST.__const _kMREventInformationalErrorCodeKey
|| __DATA_CONST.__const _kMREventOriginatorKey
|| __DATA_CONST.__const _kMREventQueueMigrate
|| __DATA_CONST.__const _kMREventSendMRCommand
|| __DATA_CONST.__const _kMREventTopologyModification
|| __DATA_CONST.__const _kMREventVolumeModuleANCValueChanged
|| __DATA_CONST.__const _kMREventVolumeModuleExpand
|| __DATA_CONST.__const _kMREventVolumeModuleNewValueKey
|| __DATA_CONST.__const _kMREventVolumeModuleOutputContextDescriptionKey
|| __DATA_CONST.__const _kMREventVolumeModulePreviousValueKey
|| __DATA_CONST.__const _kMREventVolumeModuleSpatialValueChanged
|| __DATA_CONST.__const _kMRExternalDeviceAllowPairingTXTRecordKey
|| __DATA_CONST.__const _kMRExternalDeviceBluetoothAddressTXTRecordKey
|| __DATA_CONST.__const _kMRExternalDeviceBonjourTypeGeneric
|| __DATA_CONST.__const _kMRExternalDeviceBonjourTypeTelevision
|| __DATA_CONST.__const _kMRExternalDeviceConnectionStateDidChangeNotification
|| __DATA_CONST.__const _kMRExternalDeviceConnectionStateUserInfoKey
|| __DATA_CONST.__const _kMRExternalDeviceEndpointDidChangeNotification
|| __DATA_CONST.__const _kMRExternalDeviceEndpointUserInfoKeyEndpoint
|| __DATA_CONST.__const _kMRExternalDeviceLocalAirPlayReceiverPairingIdentityKey
|| __DATA_CONST.__const _kMRExternalDeviceModelNameTXTRecordKey
|| __DATA_CONST.__const _kMRExternalDeviceNameTXTRecordKey
|| __DATA_CONST.__const _kMRExternalDeviceRemoteNowPlayingArtworkChanged
|| __DATA_CONST.__const _kMRExternalDeviceSystemBuildVersionTXTRecordKey
|| __DATA_CONST.__const _kMRExternalDeviceUniqueIdentifierTXTRecordKey
|| __DATA_CONST.__const _kMRExternalManagedConfigDeviceIDKey
|| __DATA_CONST.__const _kMRGameControllerDaemonProxyGameControllerDidChangeNotification
|| __DATA_CONST.__const _kMRGameControllerDaemonProxyGameControllerPropertiesUserInfoKey
|| __DATA_CONST.__const _kMRGameControllerDaemonProxyInterrupted
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicContainsOnlyForcedSubtitles
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicDescribesMusicAndSound
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicDescribesVideo
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicDubbedTranslation
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicEasyToRead
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicIsAuxiliaryContent
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicIsMainProgramContent
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicLanguageTranslation
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicTranscribesSpokenDialog
|| __DATA_CONST.__const _kMRLanguageOptionCharacteristicVoiceOverTranslation
|| __DATA_CONST.__const _kMRMediaRemoteActiveEndpointChangeTypeUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteActiveEndpointReasonUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteActiveEndpointTypeUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteActiveOriginDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteActivePlayerDidChange
|| __DATA_CONST.__const _kMRMediaRemoteActivePlayerPathsDidChange
|| __DATA_CONST.__const _kMRMediaRemoteActiveSystemEndpointDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteApplicationClientStateDidChange
|| __DATA_CONST.__const _kMRMediaRemoteApplicationDidForegroundNotification
|| __DATA_CONST.__const _kMRMediaRemoteApplicationDidReportPlaybackErrorNotification
|| __DATA_CONST.__const _kMRMediaRemoteApplicationDisplayNameDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteApplicationFinishedLoadingContentNotification
|| __DATA_CONST.__const _kMRMediaRemoteApplicationForegroundUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteApplicationInitiatedPlaybackOfContentItemNotification
|| __DATA_CONST.__const _kMRMediaRemoteApplicationInvalidatedBrowsableContentDataSourceNotification
|| __DATA_CONST.__const _kMRMediaRemoteAudioFormatContentInfoDidChange
|| __DATA_CONST.__const _kMRMediaRemoteAvailableOriginsDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteBrowsableContentAPIChangedNotification
|| __DATA_CONST.__const _kMRMediaRemoteBrowsableContentBundleIdentifierUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteBrowsableContentEndpointChangedNotification
|| __DATA_CONST.__const _kMRMediaRemoteBrowsableContentErrorCodeKey
|| __DATA_CONST.__const _kMRMediaRemoteBrowsableContentErrorDomainKey
|| __DATA_CONST.__const _kMRMediaRemoteBrowsableContentErrorLocalizedDescriptionKey
|| __DATA_CONST.__const _kMRMediaRemoteBrowsableContentNowPlayingIdentifiersUpdatedNotification
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoCanBeControlledByScrubbingKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoCurrentPlaybackSessionTypes
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoCurrentQueueEndAction
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoDisabledReason
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoDoNotProxy
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoDoNotSync
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoIsActiveKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoLocalizedShortTitleKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoLocalizedTitleKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoMaximumRatingKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoMinimumRatingKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoNumberOfAvailableSkips
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPlaybackQueueType
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPlaybackSessionIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPlaybackSessionPriority
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPlaybackSessionRevision
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPreferredIntervalsKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPreferredPlaybackRate
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPresentationStyleKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPreservesQueueEndActionKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPreservesRepeatModeKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPreservesShuffleModeKey
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoPurchaseCommandState
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoRepeatMode
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoShuffleMode
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSkipFrequency
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSkipInterval
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSpecializedQueues
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedCustomPlaybackQueueIdentifiers
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedInsertionPositions
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedPlaybackQueueTypes
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedPlaybackRates
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedPlaybackSessionIdentifiers
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedQueueEndActions
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedRepeatModes
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportedShuffleModes
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoSupportsSharedQueue
|| __DATA_CONST.__const _kMRMediaRemoteCommandInfoUpNextItemCount
|| __DATA_CONST.__const _kMRMediaRemoteContentItemsUpdatedNotification
|| __DATA_CONST.__const _kMRMediaRemoteElectedPlayerDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteElectedPlayerReasonUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteErrorExternalDevicePairingLockOutDelayUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteErrorTelevisionPairingLockOutDelayUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteExternalScreenTypeDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteExternalScreenTypeUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteFrameworkBundleIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteFrameworkErrorDomain
|| __DATA_CONST.__const _kMRMediaRemoteIndexPathDataUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteLocalPlaybackDidTimeoutNotification
|| __DATA_CONST.__const _kMRMediaRemoteLockScreenControlsDidActivateNotification
|| __DATA_CONST.__const _kMRMediaRemoteLockScreenControlsDidAppearNotification
|| __DATA_CONST.__const _kMRMediaRemoteLockScreenControlsDidDeactivateNotification
|| __DATA_CONST.__const _kMRMediaRemoteLockScreenControlsDidDisappearNotification
|| __DATA_CONST.__const _kMRMediaRemoteLockScreenControlsPlayerPathDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteMediaControlsConfigurationKey
|| __DATA_CONST.__const _kMRMediaRemoteMediaControlsLanguageOptionsCenterKey
|| __DATA_CONST.__const _kMRMediaRemoteMediaControlsLanguageOptionsRouteUIDKey
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypeAudio
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypeAudioBook
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypeITunesRadio
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypeITunesU
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypeImage
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypeMusic
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypePodcast
|| __DATA_CONST.__const _kMRMediaRemoteMediaTypeVideo
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationClientStateDidChange
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDidForegroundNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDidRegister
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDidRegisterCanBeNowPlaying
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDidUnregister
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDidUnregisterCanBeNowPlaying
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDisplayNameDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationDisplayNameUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationPIDUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingApplicationPlaybackStateDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingCollectionInfoCollectionTypeAlbum
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingCollectionInfoCollectionTypePlaylist
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingCollectionInfoCollectionTypeRadio
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingCollectionInfoKeyCollectionType
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingCollectionInfoKeyTitle
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingExternalTouchBarInvocationNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoAlbum
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoAlbumiTunesStoreAdamIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoAppMetrics
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtist
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtistiTunesStoreAdamIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtworkData
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtworkDataHeight
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtworkDataWidth
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtworkIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtworkMIMEType
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoArtworkURL
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoAssetURL
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoAvailableLanguageOptionsData
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoBrandIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoCalculatedElapsedTime
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoChapterNumber
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoClientPropertiesData
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoCollectionIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoCollectionInfo
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoComposer
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoContentItemIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoCurrentLanguageOptionsData
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoCurrentPlaybackDate
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoDefaultPlaybackRate
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoDiscNumber
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoDownloadProgress
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoDownloadState
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoDuration
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoElapsedTime
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoExternalContentIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoExternalProfileIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoGenre
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsAdvertisement
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsAlwaysLive
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsBanned
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsExplicitTrack
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsInWishList
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsLiked
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsLoading
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsMusicApp
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsSharable
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsSteerable
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoIsVideosApp
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoMediaType
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoPlaybackProgress
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoPlaybackRate
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoPlaylistGlobalIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoProhibitsSkip
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoPurchaseInfoData
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoQueueIndex
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoRadioStationHash
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoRadioStationIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoRadioStationName
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoRadioStationStringIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoRepeatMode
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoServiceIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoShuffleMode
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoStartTime
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoSupportsFastForward15Seconds
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoSupportsIsBanned
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoSupportsIsLiked
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoSupportsRewind15Seconds
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoSupportsWishlisting
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTimestamp
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTitle
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTotalChapterCount
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTotalDiscCount
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTotalQueueCount
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTotalTrackCount
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTrackNumber
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTypeAudio
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoTypeVideo
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoUniqueIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoUserInfo
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoiTunesStoreIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingInfoiTunesStoreSubscriptionAdamIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingPlaybackQueueDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingPlayerDidChange
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingPlayerDidRegister
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingPlayerDidRegisterCanBeNowPlaying
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingPlayerDidUnregister
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingPlayerDidUnregisterCanBeNowPlaying
|| __DATA_CONST.__const _kMRMediaRemoteNowPlayingPlayerStateDidChange
|| __DATA_CONST.__const _kMRMediaRemoteOptionAffiliateIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteOptionAlwaysIgnoreDuringCall
|| __DATA_CONST.__const _kMRMediaRemoteOptionAlwaysIgnoreDuringSharePlay
|| __DATA_CONST.__const _kMRMediaRemoteOptionAssistantCommandSendTimestamp
|| __DATA_CONST.__const _kMRMediaRemoteOptionAssistantSetQueueTrueCompletion
|| __DATA_CONST.__const _kMRMediaRemoteOptionAssistantTTSEndTimestamp
|| __DATA_CONST.__const _kMRMediaRemoteOptionBeginSeek
|| __DATA_CONST.__const _kMRMediaRemoteOptionBookmarkiTunesDestination
|| __DATA_CONST.__const _kMRMediaRemoteOptionChangeLanguageOptionSetting
|| __DATA_CONST.__const _kMRMediaRemoteOptionCommandBroadcasted
|| __DATA_CONST.__const _kMRMediaRemoteOptionCommandID
|| __DATA_CONST.__const _kMRMediaRemoteOptionCommandSequenceUUID
|| __DATA_CONST.__const _kMRMediaRemoteOptionCommandTimeout
|| __DATA_CONST.__const _kMRMediaRemoteOptionCommandType
|| __DATA_CONST.__const _kMRMediaRemoteOptionContentItemID
|| __DATA_CONST.__const _kMRMediaRemoteOptionContextID
|| __DATA_CONST.__const _kMRMediaRemoteOptionDesiredSessionID
|| __DATA_CONST.__const _kMRMediaRemoteOptionDestinationAppDisplayID
|| __DATA_CONST.__const _kMRMediaRemoteOptionDestinationDeviceUIDs
|| __DATA_CONST.__const _kMRMediaRemoteOptionDirectUserInteraction
|| __DATA_CONST.__const _kMRMediaRemoteOptionDisableFallbackContent
|| __DATA_CONST.__const _kMRMediaRemoteOptionDisableImplicitAppLaunchBehaviors
|| __DATA_CONST.__const _kMRMediaRemoteOptionEndSeek
|| __DATA_CONST.__const _kMRMediaRemoteOptionEventNoticeIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteOptionEventNoticeType
|| __DATA_CONST.__const _kMRMediaRemoteOptionHomeKitUserIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteOptionInsertAfterContentItemID
|| __DATA_CONST.__const _kMRMediaRemoteOptionInsertBeforeContentItemID
|| __DATA_CONST.__const _kMRMediaRemoteOptionInterruptionEvent
|| __DATA_CONST.__const _kMRMediaRemoteOptionIsExternalPlayerCommand
|| __DATA_CONST.__const _kMRMediaRemoteOptionIsNegative
|| __DATA_CONST.__const _kMRMediaRemoteOptionIsRedirectingCommand
|| __DATA_CONST.__const _kMRMediaRemoteOptionLanguageOptionData
|| __DATA_CONST.__const _kMRMediaRemoteOptionMediaType
|| __DATA_CONST.__const _kMRMediaRemoteOptionNowPlayingContentItemID
|| __DATA_CONST.__const _kMRMediaRemoteOptionOriginatedFromRemoteDevice
|| __DATA_CONST.__const _kMRMediaRemoteOptionOriginatingDeviceUID
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackAuthorizationToken
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackPosition
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackProgress
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackQueueDestinationOffset
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackQueueInsertionPosition
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackQueueOffset
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackRate
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackSessionData
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackSessionFilePath
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackSessionIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackSessionMetadata
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackSessionPriority
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackSessionRevision
|| __DATA_CONST.__const _kMRMediaRemoteOptionPlaybackSessionType
|| __DATA_CONST.__const _kMRMediaRemoteOptionPredefinedPlaybackRate
|| __DATA_CONST.__const _kMRMediaRemoteOptionPrivateListeningEnabled
|| __DATA_CONST.__const _kMRMediaRemoteOptionQueueEndAction
|| __DATA_CONST.__const _kMRMediaRemoteOptionRating
|| __DATA_CONST.__const _kMRMediaRemoteOptionRemoteControlInterfaceIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteOptionRepeatMode
|| __DATA_CONST.__const _kMRMediaRemoteOptionRequestDefermentToPlaybackQueuePosition
|| __DATA_CONST.__const _kMRMediaRemoteOptionSandboxExtensionToken
|| __DATA_CONST.__const _kMRMediaRemoteOptionSendOptionsNumber
|| __DATA_CONST.__const _kMRMediaRemoteOptionSenderID
|| __DATA_CONST.__const _kMRMediaRemoteOptionSharedPlaybackSessionIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteOptionShouldBeginRadioPlayback
|| __DATA_CONST.__const _kMRMediaRemoteOptionShuffleMode
|| __DATA_CONST.__const _kMRMediaRemoteOptionSkipInterval
|| __DATA_CONST.__const _kMRMediaRemoteOptionSourceID
|| __DATA_CONST.__const _kMRMediaRemoteOptionStationHash
|| __DATA_CONST.__const _kMRMediaRemoteOptionStationID
|| __DATA_CONST.__const _kMRMediaRemoteOptionStationURL
|| __DATA_CONST.__const _kMRMediaRemoteOptionSystemAppPlaybackQueueData
|| __DATA_CONST.__const _kMRMediaRemoteOptionTrackID
|| __DATA_CONST.__const _kMRMediaRemoteOptionUserIdentityData
|| __DATA_CONST.__const _kMRMediaRemoteOptionVerifySupportedCommands
|| __DATA_CONST.__const _kMRMediaRemoteOriginDataUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteOriginDidRegisterNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginDidUnregisterNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingApplicationClientStateDidChange
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingApplicationDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingApplicationDidForegroundNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingApplicationDisplayNameDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingApplicationIsPlayingDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingApplicationPlaybackStateDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingInfoDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingPlayerDidChange
|| __DATA_CONST.__const _kMRMediaRemoteOriginNowPlayingPlayerStateDidChange
|| __DATA_CONST.__const _kMRMediaRemoteOriginSupportedCommandsDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteOriginUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePickableRoutesDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemotePickedRouteVolumeControlAvailabilityDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemotePickedRouteVolumeControlAvailabilityUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePickedRouteVolumeControlCapabilitiesUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePickedRouteVolumeDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemotePickedRouteVolumeUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePlaybackErrorApplicationUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePlaybackErrorReasonUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePlaybackErrorUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePlaybackStateUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePlayerIsPlayingDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemotePlayerNowPlayingInfoDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemotePlayerPictureInPictureDidChange
|| __DATA_CONST.__const _kMRMediaRemotePlayerPictureInPictureEnabledUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemotePlayerPlaybackStateDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemotePlayerStateDidChange
|| __DATA_CONST.__const _kMRMediaRemotePlayerSupportedCommandsDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteRouteDescriptionUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteRouteIsLocalDeviceRouteKey
|| __DATA_CONST.__const _kMRMediaRemoteRouteStatusDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteRouteStatusUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteServiceDidResetDistributedNotification
|| __DATA_CONST.__const _kMRMediaRemoteSupportedCommandsDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteSystemAppDidSkipTrackNotification
|| __DATA_CONST.__const _kMRMediaRemoteSystemBooksApplicationDisplayIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteSystemClassicalRoomApplicationDisplayIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteSystemMediaApplicationDisplayIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteSystemPodcastApplicationDisplayIdentifier
|| __DATA_CONST.__const _kMRMediaRemoteTelevisionPairingExtendedInfoIdentifierKey
|| __DATA_CONST.__const _kMRMediaRemoteTelevisionPairingExtendedInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteTelevisionPairingExtendedInfoNameKey
|| __DATA_CONST.__const _kMRMediaRemoteUpdatedContentItemsDataUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteUpdatedContentItemsUserInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteUpdatedNowPlayingIdentifiersInfoKey
|| __DATA_CONST.__const _kMRMediaRemoteVirtualDevicesDidChangeNotification
|| __DATA_CONST.__const _kMRMediaRemoteWillPresentRouteAuthenticationPromptNotification
|| __DATA_CONST.__const _kMRMigrateInitiatorProximity
|| __DATA_CONST.__const _kMRMigrateInitiatorRoutePicker
|| __DATA_CONST.__const _kMRMigrateInitiatorShortcuts
|| __DATA_CONST.__const _kMRNowPlayingActivePlayerPathDidChangeDistributedNotificationName
|| __DATA_CONST.__const _kMRNowPlayingActivePlayersIsPlayingDidChangeDistributedNotificationName
|| __DATA_CONST.__const _kMRNowPlayingAppIsPlayingDidChangeDistributedNotificationName
|| __DATA_CONST.__const _kMRNowPlayingClientDataUserInfoKey
|| __DATA_CONST.__const _kMRNowPlayingClientUserInfoKey
|| __DATA_CONST.__const _kMRNowPlayingPlaybackQueueChangedNotification
|| __DATA_CONST.__const _kMRNowPlayingPlayerDataUserInfoKey
|| __DATA_CONST.__const _kMRNowPlayingPlayerPathDataUserInfoKey
|| __DATA_CONST.__const _kMRNowPlayingPlayerPathUserInfoKey
|| __DATA_CONST.__const _kMRNowPlayingPlayerUserInfoKey
|| __DATA_CONST.__const _kMROriginActiveNowPlayingPlayerPathDataUserInfoKey
|| __DATA_CONST.__const _kMROriginActiveNowPlayingPlayerPathUserInfoKey
|| __DATA_CONST.__const _kMROriginNowPlayingPlaybackQueueChangedNotification
|| __DATA_CONST.__const _kMROriginPlaybackQueueContentItemArtworkChangedNotification
|| __DATA_CONST.__const _kMROriginPlaybackQueueContentItemsChangedNotification
|| __DATA_CONST.__const _kMRPairedDeviceUserInfoDataKey
|| __DATA_CONST.__const _kMRPairedDeviceUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackQueueCapabilitiesChangedNotification
|| __DATA_CONST.__const _kMRPlaybackQueueCapabilitiesUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackQueueContentItemArtworkChangedNotification
|| __DATA_CONST.__const _kMRPlaybackQueueContentItemsChangedNotification
|| __DATA_CONST.__const _kMRPlaybackQueueDataUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackQueueRequestDataUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackQueueRequestUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackQueueUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackSessionRequestDataUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackSessionRequestUserInfoKey
|| __DATA_CONST.__const _kMRPlaybackSessionUserInfoKey
|| __DATA_CONST.__const _kMRPlayerPlaybackQueueChangedNotification
|| __DATA_CONST.__const _kMRPlayerPlaybackQueueContentItemArtworkChangedNotification
|| __DATA_CONST.__const _kMRPlayerPlaybackQueueContentItemsChangedNotification
|| __DATA_CONST.__const _kMRPreviousPairedDeviceUserInfoDataKey
|| __DATA_CONST.__const _kMRPreviousPairedDeviceUserInfoKey
|| __DATA_CONST.__const _kMRQueueMigrateErrorStepKey
|| __DATA_CONST.__const _kMRQueueMigrateEventTypeKey
|| __DATA_CONST.__const _kMRQueueMigrateFailedPlayingAudioKey
|| __DATA_CONST.__const _kMRQueueMigrateFallbackErrorKey
|| __DATA_CONST.__const _kMRQueueMigrateFallbackReasonKey
|| __DATA_CONST.__const _kMRQueueMigrateFallbackStatusError
|| __DATA_CONST.__const _kMRQueueMigrateFallbackStatusKey
|| __DATA_CONST.__const _kMRQueueMigrateFallbackStatusPolicy
|| __DATA_CONST.__const _kMRQueueMigrateInitiatorKey
|| __DATA_CONST.__const _kMRQueueMigrateQueueSizeKey
|| __DATA_CONST.__const _kMRQueueMigrateSendPlaybackSessionThroughputKey
|| __DATA_CONST.__const _kMRSendMRCommandDescriptionKey
|| __DATA_CONST.__const _kMRSendMRCommandIsLocalAppKey
|| __DATA_CONST.__const _kMRSendMRCommandIsLocalDeviceKey
|| __DATA_CONST.__const _kMRSendMRCommandReturnStatusesKey
|| __DATA_CONST.__const _kMRSupportedCommandsDataUserInfoKey
|| __DATA_CONST.__const _kMRSupportedCommandsUserInfoKey
|| __DATA_CONST.__const _kMRSystemAppPlaybackQueueReplaceIntentKey
|| __DATA_CONST.__const _kMRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueueKey
|| __DATA_CONST.__const _kMRTelevisionServiceIsPairingAllowedDidChangeNotification
|| __DATA_CONST.__const _kMRTelevisionServicePairedDevicesDidChangeNotification
|| __DATA_CONST.__const _kMRTopologyModificationChangeSetSizeKey
|| __DATA_CONST.__const _kMRTopologyModificationInitialGroupSizeKey
|| __DATA_CONST.__const _kMRTopologyModificationInitiatorKey
|| __DATA_CONST.__const _kMRTopologyModificationIsLocalKey
|| __DATA_CONST.__const _kMRTopologyModificationLeaderCompositionKey
|| __DATA_CONST.__const _kMRTopologyModificationTypeAdd
|| __DATA_CONST.__const _kMRTopologyModificationTypeKey
|| __DATA_CONST.__const _kMRTopologyModificationTypeRemove
|| __DATA_CONST.__const _kMRTopologyModificationTypeSet
|| __DATA_CONST.__const _kMRVirtualVoiceInputDeviceIDUserInfoKey
|| __DATA_CONST.__const _kMRVirtualVoiceInputRecordingStateDidChangeNotification
|| __DATA_CONST.__const _kMRVirtualVoiceInputRecordingStateUserInfoKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVClusterController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVConcreteOutputContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVConcreteOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVConcreteRoutingDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVDistantEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVDistantOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVDistantRoutingDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVLightweightReconnaissanceSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVLocalEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVOutputContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVOutputContextEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVOutputDeviceSourceInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVRoutingDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRAVRoutingDiscoverySessionConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRApplicationActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRArtwork
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRBlockGuard
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRColorComponents
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRCommandInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRContentItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRContentItemMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRDestinationResolver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRDeviceInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRDeviceInfoRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRExpanseManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRLanguageOption
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRLanguageOptionGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRMediaRemoteServiceClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRMediaSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRMediaSuggestionPreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRMediaSuggestionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRMutableApplicationActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNotificationClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNotificationServiceClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingControllerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingOriginClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingOriginClientManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingOriginClientRequests
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingPlayerClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRNowPlayingRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MROrigin
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MROutputContextController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MROutputContextDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRPlaybackQueue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRPlaybackQueueRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRPlaybackQueueSubscriptionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRPlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRPlayerPath
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRProtocolMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRSharedSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUpdateActiveSystemEndpointMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUpdateActiveSystemEndpointRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUserSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRWeakProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRXPCConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__MRAVEndpointDescriptorProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__MRAVOutputDeviceDescriptorProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__MRDiagnosticProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__MRNowPlayingClientProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__MRNowPlayingPlayerPathProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVClusterController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVConcreteOutputContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVConcreteOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVConcreteRoutingDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVDistantEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVDistantOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVDistantRoutingDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVLightweightReconnaissanceSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVLocalEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVOutputContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVOutputContextEndpoint
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVOutputDeviceSourceInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVRoutingDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRAVRoutingDiscoverySessionConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRApplicationActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRArtwork
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRBlockGuard
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRColorComponents
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRCommandInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRContentItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRContentItemMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRDestinationResolver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRDeviceInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRDeviceInfoRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRExpanseManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRLanguageOption
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRLanguageOptionGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRMediaRemoteServiceClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRMediaSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRMediaSuggestionPreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRMediaSuggestionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRMutableApplicationActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNotificationClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNotificationServiceClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingControllerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingOriginClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingOriginClientManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingOriginClientRequests
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingPlayerClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRNowPlayingRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MROrigin
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MROutputContextController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MROutputContextDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRPlaybackQueue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRPlaybackQueueRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRPlaybackQueueSubscriptionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRPlayerPath
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRProtocolMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRSharedSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUpdateActiveSystemEndpointMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUpdateActiveSystemEndpointRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUserSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRWeakProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRXPCConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__MRAVEndpointDescriptorProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__MRAVOutputDeviceDescriptorProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__MRDiagnosticProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__MRNowPlayingClientProtobuf
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__MRNowPlayingPlayerPathProtobuf
|| __TEXT.__const _MRColorNull
|| __TEXT.__text _MRAVAirPlaySecuritySettingsCreate
|| __TEXT.__text _MRAVAirPlaySecuritySettingsCreateExternalRepresentation
|| __TEXT.__text _MRAVAirPlaySecuritySettingsCreateFromExternalRepresentation
|| __TEXT.__text _MRAVAirPlaySecuritySettingsGetPassword
|| __TEXT.__text _MRAVAirPlaySecuritySettingsGetSecurityMode
|| __TEXT.__text _MRAVCopyOutputDevicesSubstitutingLocalDevice
|| __TEXT.__text _MRAVEndpointAddOutputDevices
|| __TEXT.__text _MRAVEndpointAddOutputDevicesToGroup
|| __TEXT.__text _MRAVEndpointAddOutputDevicesToGroupFromSource
|| __TEXT.__text _MRAVEndpointAddOutputDevicesWithInitiator
|| __TEXT.__text _MRAVEndpointCanModifyGroupMembership
|| __TEXT.__text _MRAVEndpointCopyDesignatedGroupLeader
|| __TEXT.__text _MRAVEndpointCopyLocalizedName
|| __TEXT.__text _MRAVEndpointCopyOrigin
|| __TEXT.__text _MRAVEndpointCopyOutputDevices
|| __TEXT.__text _MRAVEndpointCopyPersonalOutputDevices
|| __TEXT.__text _MRAVEndpointCopyUniqueIdentifier
|| __TEXT.__text _MRAVEndpointCreateUniqueIdentifier
|| __TEXT.__text _MRAVEndpointCreateWithDevices
|| __TEXT.__text _MRAVEndpointCreateWithDevicesAsync
|| __TEXT.__text _MRAVEndpointForceEnableRemoteControllability
|| __TEXT.__text _MRAVEndpointGetActiveSystemEndpointUID
|| __TEXT.__text _MRAVEndpointGetClass
|| __TEXT.__text _MRAVEndpointGetConnectionType
|| __TEXT.__text _MRAVEndpointGetDesignatedGroupLeader
|| __TEXT.__text _MRAVEndpointGetExternalDevice
|| __TEXT.__text _MRAVEndpointGetLocalEndpoint
|| __TEXT.__text _MRAVEndpointGetLocalizedName
|| __TEXT.__text _MRAVEndpointGetMyGroupLeaderWithTimeout
|| __TEXT.__text _MRAVEndpointGetOutputDeviceUIDVolume
|| __TEXT.__text _MRAVEndpointGetOutputDeviceUIDVolumeControlCapabilities
|| __TEXT.__text _MRAVEndpointGetOutputDeviceVolume
|| __TEXT.__text _MRAVEndpointGetOutputDeviceVolumeControlCapabilities
|| __TEXT.__text _MRAVEndpointGetUniqueIdentifier
|| __TEXT.__text _MRAVEndpointGetVolume
|| __TEXT.__text _MRAVEndpointGetVolumeControlCapabilities
|| __TEXT.__text _MRAVEndpointGroupDevicesAndSendCommand
|| __TEXT.__text _MRAVEndpointGroupDevicesAndSendCommandWithResult
|| __TEXT.__text _MRAVEndpointIsLocalEndpoint
|| __TEXT.__text _MRAVEndpointIsOutputDeviceVolumeControlAvailable
|| __TEXT.__text _MRAVEndpointIsProxyGroupPlayer
|| __TEXT.__text _MRAVEndpointMigrate
|| __TEXT.__text _MRAVEndpointMoveOutputGroupToDevices
|| __TEXT.__text _MRAVEndpointMoveOutputGroupToDevicesFromSource
|| __TEXT.__text _MRAVEndpointObserverAddEndpointChangedCallback
|| __TEXT.__text _MRAVEndpointObserverBegin
|| __TEXT.__text _MRAVEndpointObserverCreateWithOutputDeviceUID
|| __TEXT.__text _MRAVEndpointObserverEnd
|| __TEXT.__text _MRAVEndpointPredictGroupLeader
|| __TEXT.__text _MRAVEndpointRemoveOutputDevices
|| __TEXT.__text _MRAVEndpointRemoveOutputDevicesFromGroup
|| __TEXT.__text _MRAVEndpointRemoveOutputDevicesFromGroupFromSource
|| __TEXT.__text _MRAVEndpointRemoveOutputDevicesWithInitiator
|| __TEXT.__text _MRAVEndpointResolveActiveSystemEndpoint
|| __TEXT.__text _MRAVEndpointResolveActiveSystemEndpointWithTimeout
|| __TEXT.__text _MRAVEndpointResolveActiveSystemEndpointWithType
|| __TEXT.__text _MRAVEndpointSetOutputDeviceUIDVolume
|| __TEXT.__text _MRAVEndpointSetOutputDeviceVolume
|| __TEXT.__text _MRAVEndpointSetOutputDevices
|| __TEXT.__text _MRAVEndpointSetOutputDevicesWithInitiator
|| __TEXT.__text _MRAVEndpointSetVolume
|| __TEXT.__text _MRAVEndpointUpdateActiveSystemEndpoint
|| __TEXT.__text _MRAVEndpointUpdateActiveSystemEndpointForOutputDeviceUIDWithChangeType
|| __TEXT.__text _MRAVEndpointUpdateActiveSystemEndpointForOutputDeviceUIDWithReason
|| __TEXT.__text _MRAVEndpointUpdateActiveSystemEndpointWithReason
|| __TEXT.__text _MRAVOutputContextAddOutputDevice
|| __TEXT.__text _MRAVOutputContextAddOutputDeviceWithInitiator
|| __TEXT.__text _MRAVOutputContextAddOutputDevices
|| __TEXT.__text _MRAVOutputContextAddOutputDevicesWithInitiator
|| __TEXT.__text _MRAVOutputContextCopyOutputDevices
|| __TEXT.__text _MRAVOutputContextCopyPredictedOutputDevice
|| __TEXT.__text _MRAVOutputContextCopyUniqueIdentifier
|| __TEXT.__text _MRAVOutputContextCreateRoutingContext
|| __TEXT.__text _MRAVOutputContextCreateiTunesAudioContext
|| __TEXT.__text _MRAVOutputContextGetSharedAudioPresentationContext
|| __TEXT.__text _MRAVOutputContextGetSharedSystemAudioContext
|| __TEXT.__text _MRAVOutputContextGetSharedSystemScreenContext
|| __TEXT.__text _MRAVOutputContextGetType
|| __TEXT.__text _MRAVOutputContextGetUniqueIdentifier
|| __TEXT.__text _MRAVOutputContextRemoveAllDevices
|| __TEXT.__text _MRAVOutputContextRemoveOutputDevice
|| __TEXT.__text _MRAVOutputContextRemoveOutputDeviceWithInitiator
|| __TEXT.__text _MRAVOutputContextRemoveOutputDevices
|| __TEXT.__text _MRAVOutputContextRemoveOutputDevicesWithInitiator
|| __TEXT.__text _MRAVOutputContextResetPredictedOutputDevice
|| __TEXT.__text _MRAVOutputContextSetOutputDevice
|| __TEXT.__text _MRAVOutputContextSetOutputDeviceWithInitiator
|| __TEXT.__text _MRAVOutputContextSetOutputDeviceWithPassword
|| __TEXT.__text _MRAVOutputContextSetOutputDevices
|| __TEXT.__text _MRAVOutputContextSetOutputDevicesWithInitiator
|| __TEXT.__text _MRAVOutputContextSupportsMultipleBluetoothOutputDevices
|| __TEXT.__text _MRAVOutputContextTypeCopyDescription
|| __TEXT.__text _MRAVOutputDeviceAllowsHeadTrackedSpatialAudio
|| __TEXT.__text _MRAVOutputDeviceCanAccessAppleMusic
|| __TEXT.__text _MRAVOutputDeviceCanAccessRemoteAssets
|| __TEXT.__text _MRAVOutputDeviceCanFetchMediaDataFromSender
|| __TEXT.__text _MRAVOutputDeviceCanPlayEncryptedProgressiveDownloadAssets
|| __TEXT.__text _MRAVOutputDeviceCanRelayCommunicationChannel
|| __TEXT.__text _MRAVOutputDeviceCopyAvailableBluetoothListeningMode
|| __TEXT.__text _MRAVOutputDeviceCopyBluetoothID
|| __TEXT.__text _MRAVOutputDeviceCopyCurrentBluetoothListeningMode
|| __TEXT.__text _MRAVOutputDeviceCopyFirmwareVersion
|| __TEXT.__text _MRAVOutputDeviceCopyGroupIdentifier
|| __TEXT.__text _MRAVOutputDeviceCopyHeadTrackedSpatialAudioMode
|| __TEXT.__text _MRAVOutputDeviceCopyLocalDeviceLocalizedName
|| __TEXT.__text _MRAVOutputDeviceCopyLogicalDeviceID
|| __TEXT.__text _MRAVOutputDeviceCopyMACAddress
|| __TEXT.__text _MRAVOutputDeviceCopyModelID
|| __TEXT.__text _MRAVOutputDeviceCopyModelSpecificInformation
|| __TEXT.__text _MRAVOutputDeviceCopyName
|| __TEXT.__text _MRAVOutputDeviceCopyPlayingPairedDeviceName
|| __TEXT.__text _MRAVOutputDeviceCopySourceInfo
|| __TEXT.__text _MRAVOutputDeviceCopyUniqueIdentifier
|| __TEXT.__text _MRAVOutputDeviceCreateFromAVOutputDevice
|| __TEXT.__text _MRAVOutputDeviceCreateLocalDevice
|| __TEXT.__text _MRAVOutputDeviceGetAVOutputDevice
|| __TEXT.__text _MRAVOutputDeviceGetBatteryLevel
|| __TEXT.__text _MRAVOutputDeviceGetEndpoint
|| __TEXT.__text _MRAVOutputDeviceGetGroupIdentifier
|| __TEXT.__text _MRAVOutputDeviceGetMACAddress
|| __TEXT.__text _MRAVOutputDeviceGetModelID
|| __TEXT.__text _MRAVOutputDeviceGetModelSpecificInformation
|| __TEXT.__text _MRAVOutputDeviceGetName
|| __TEXT.__text _MRAVOutputDeviceGetRecentAVOutputDeviceUIDs
|| __TEXT.__text _MRAVOutputDeviceGetSubtype
|| __TEXT.__text _MRAVOutputDeviceGetType
|| __TEXT.__text _MRAVOutputDeviceGetUniqueIdentifier
|| __TEXT.__text _MRAVOutputDeviceGroupContainsGroupLeader
|| __TEXT.__text _MRAVOutputDeviceHasBatteryLevel
|| __TEXT.__text _MRAVOutputDeviceHeadTrackedSpatialAudioActive
|| __TEXT.__text _MRAVOutputDeviceIsAddedToHomeKit
|| __TEXT.__text _MRAVOutputDeviceIsGroupLeader
|| __TEXT.__text _MRAVOutputDeviceIsGroupable
|| __TEXT.__text _MRAVOutputDeviceIsLocalDevice
|| __TEXT.__text _MRAVOutputDeviceIsPickedOnPairedDevice
|| __TEXT.__text _MRAVOutputDeviceIsProxyGroupPlayer
|| __TEXT.__text _MRAVOutputDeviceIsRemoteControllable
|| __TEXT.__text _MRAVOutputDeviceIsVolumeControlAvailable
|| __TEXT.__text _MRAVOutputDeviceParentGroupContainsDiscoverableLeader
|| __TEXT.__text _MRAVOutputDeviceParentGroupIdentifier
|| __TEXT.__text _MRAVOutputDevicePresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
|| __TEXT.__text _MRAVOutputDeviceRemoveFromParentGroup
|| __TEXT.__text _MRAVOutputDeviceRequiresAuthorization
|| __TEXT.__text _MRAVOutputDeviceSetAllowsHeadTrackedSpatialAudio
|| __TEXT.__text _MRAVOutputDeviceSetCurrentBluetoothListeningMode
|| __TEXT.__text _MRAVOutputDeviceSetRecentAVOutputDeviceUID
|| __TEXT.__text _MRAVOutputDeviceSourceInfoCopyRoutingContextUID
|| __TEXT.__text _MRAVOutputDeviceSourceInfoMultipleBuiltInDevices
|| __TEXT.__text _MRAVOutputDeviceSubstituteLocalDevice
|| __TEXT.__text _MRAVOutputDeviceSubtypeCopyDescription
|| __TEXT.__text _MRAVOutputDeviceSupportsBluetoothSharing
|| __TEXT.__text _MRAVOutputDeviceSupportsBufferedAirPlay
|| __TEXT.__text _MRAVOutputDeviceSupportsExternalScreen
|| __TEXT.__text _MRAVOutputDeviceSupportsHAP
|| __TEXT.__text _MRAVOutputDeviceSupportsHeadTrackedSpatialAudio
|| __TEXT.__text _MRAVOutputDeviceSupportsRapport
|| __TEXT.__text _MRAVOutputDeviceTypeCopyDescription
|| __TEXT.__text _MRAVOutputDeviceisAirPlayReceiverSessionActive
|| __TEXT.__text _MRAVReconnaissanceSessionBeginEndpointsSearch
|| __TEXT.__text _MRAVReconnaissanceSessionBeginSearch
|| __TEXT.__text _MRAVReconnaissanceSessionCancelSearch
|| __TEXT.__text _MRAVReconnaissanceSessionCreate
|| __TEXT.__text _MRAVReconnaissanceSessionCreateWithEndpointFeatures
|| __TEXT.__text _MRAVReconnaissanceSessionCreateWithMatchingLogicalDeviceIDs
|| __TEXT.__text _MRAVReconnaissanceSessionCreateWithMatchingOutputGroupID
|| __TEXT.__text _MRAVReconnaissanceSessionCreateWithMatchingOutputGroupIDFeatures
|| __TEXT.__text _MRAVReconnaissanceSessionGetMatchingOutputDeviceUIDs
|| __TEXT.__text _MRAVReconnaissanceSessionSetExpectedLogicalDevices
|| __TEXT.__text _MRAVReconnaissanceSessionSetReturnPartialResults
|| __TEXT.__text _MRAVReconnaissanceSessionSetTargetAudioSessionID
|| __TEXT.__text _MRAVReconnaissanceSessionSetUseWeakMatching
|| __TEXT.__text _MRAVReconnaissanceSessionSetWaitForCompleteClusters
|| __TEXT.__text _MRAVReconnaissanceSessionSetWaitForUnanimousEndpoints
|| __TEXT.__text _MRAVReconnaissanceSessionUseWeakMatching
|| __TEXT.__text _MRAVReconnaissanceSessionWaitForCompleteClusters
|| __TEXT.__text _MRAVRouteQueryCreate
|| __TEXT.__text _MRAVRouteQueryCreateExternalRepresentation
|| __TEXT.__text _MRAVRouteQueryCreateFromExternalRepresentation
|| __TEXT.__text _MRAVRouteQueryGetRouteUID
|| __TEXT.__text _MRAVRouteQuerySetRouteUID
|| __TEXT.__text _MRAVRoutingDiscoverySessionAddEndpointsChangedCallback
|| __TEXT.__text _MRAVRoutingDiscoverySessionAddOutputDevicesChangedCallback
|| __TEXT.__text _MRAVRoutingDiscoverySessionAlwaysAllowUpdates
|| __TEXT.__text _MRAVRoutingDiscoverySessionCopyAvailableEndpoints
|| __TEXT.__text _MRAVRoutingDiscoverySessionCopyAvailableOutputDevices
|| __TEXT.__text _MRAVRoutingDiscoverySessionCopyRoutingContextUID
|| __TEXT.__text _MRAVRoutingDiscoverySessionCreate
|| __TEXT.__text _MRAVRoutingDiscoverySessionCreateRemoteControlThrottled
|| __TEXT.__text _MRAVRoutingDiscoverySessionDevicePresenceDetected
|| __TEXT.__text _MRAVRoutingDiscoverySessionGetDiscoveryMode
|| __TEXT.__text _MRAVRoutingDiscoverySessionGetEndpointFeatures
|| __TEXT.__text _MRAVRoutingDiscoverySessionGetTargetAudioSessionID
|| __TEXT.__text _MRAVRoutingDiscoverySessionHasAvailableEndpoints
|| __TEXT.__text _MRAVRoutingDiscoverySessionRemoveEndpointsChangedCallback
|| __TEXT.__text _MRAVRoutingDiscoverySessionRemoveOutputDevicesChangedCallback
|| __TEXT.__text _MRAVRoutingDiscoverySessionSetAlwaysAllowUpdates
|| __TEXT.__text _MRAVRoutingDiscoverySessionSetDiscoveryMode
|| __TEXT.__text _MRAVRoutingDiscoverySessionSetRoutingContextUID
|| __TEXT.__text _MRAVRoutingDiscoverySessionSetTargetAudioSessionID
|| __TEXT.__text _MRAddApplicationActivityToXPCMessage
|| __TEXT.__text _MRAddArrayToXPCMessage
|| __TEXT.__text _MRAddClientErrorToXPCMessage
|| __TEXT.__text _MRAddClientToXPCMessage
|| __TEXT.__text _MRAddCommandResultToXPCMessage
|| __TEXT.__text _MRAddContentItemsToUserInfo
|| __TEXT.__text _MRAddContentItemsToXPCMessage
|| __TEXT.__text _MRAddDataToXPCMessage
|| __TEXT.__text _MRAddDeviceInfoToUserInfo
|| __TEXT.__text _MRAddDeviceInfoToXPCMessage
|| __TEXT.__text _MRAddDiagnosticToXPCMessage
|| __TEXT.__text _MRAddDistantEndpointToXPCMessage
|| __TEXT.__text _MRAddEndpointUIDToXPCMessage
|| __TEXT.__text _MRAddErrorToXPCMessage
|| __TEXT.__text _MRAddNowPlayingStateToXPCMessage
|| __TEXT.__text _MRAddOriginToXPCMessage
|| __TEXT.__text _MRAddOriginsToXPCMessage
|| __TEXT.__text _MRAddPlaybackQueueCapabilitiesToXPCMessage
|| __TEXT.__text _MRAddPlaybackQueueRequestToXPCMessage
|| __TEXT.__text _MRAddPlaybackQueueToXPCMessage
|| __TEXT.__text _MRAddPlaybackSessionToXPCMessage
|| __TEXT.__text _MRAddPlayerPathToUserInfo
|| __TEXT.__text _MRAddPlayerPathToXPCMessage
|| __TEXT.__text _MRAddPlayerToXPCMessage
|| __TEXT.__text _MRAddPropertyListToXPCMessage
|| __TEXT.__text _MRAddProtobufToXPCMessage
|| __TEXT.__text _MRAddSendCommandToXPCMessage
|| __TEXT.__text _MRAddStringToXPCMessage
|| __TEXT.__text _MRAddSupportedCommandsDataToXPCMessage
|| __TEXT.__text _MRAddSupportedCommandsToXPCMessage
|| __TEXT.__text _MRAddTransactionComingToXPCMessage
|| __TEXT.__text _MRAddVideoThumbnailRequestToXPCMessage
|| __TEXT.__text _MRAddVideoThumbnailsToXPCMessage
|| __TEXT.__text _MRAnalyticsCompositionForDeviceClass
|| __TEXT.__text _MRAnalyticsCompositionForDeviceInfo
|| __TEXT.__text _MRAnalyticsCompositionForEndpoint
|| __TEXT.__text _MRAnalyticsCompositionForLocalDevice
|| __TEXT.__text _MRAnalyticsCompositionForOutputDevice
|| __TEXT.__text _MRAnalyticsCompositionForOutputDevices
|| __TEXT.__text _MRAnalyticsDeviceCompositionDescription
|| __TEXT.__text _MRAnalyticsSendEvent
|| __TEXT.__text _MRApplicationActivityBegin
|| __TEXT.__text _MRApplicationActivityCopyPrimaryAppDisplayID
|| __TEXT.__text _MRApplicationActivityCopySecondaryAppDisplayID
|| __TEXT.__text _MRApplicationActivityCopyUniqueIdentifier
|| __TEXT.__text _MRApplicationActivityCreate
|| __TEXT.__text _MRApplicationActivityEnd
|| __TEXT.__text _MRApplicationActivityGetCreatorProcessID
|| __TEXT.__text _MRApplicationActivityGetCurrentActivity
|| __TEXT.__text _MRApplicationActivityGetStatus
|| __TEXT.__text _MRApplicationActivitySetShouldPrepareAppPlaybackQueue
|| __TEXT.__text _MRApplicationActivityShouldPrepareAppPlaybackQueue
|| __TEXT.__text _MRApplicationActivityStatusCopyDescription
|| __TEXT.__text _MRArrayCopySingleLineDescription
|| __TEXT.__text _MRAudioBufferCreate
|| __TEXT.__text _MRAudioBufferGetFormatSettings
|| __TEXT.__text _MRAudioBufferGetMutableContentsPtr
|| __TEXT.__text _MRAudioBufferGetMutablePacketDescriptionsArrayPtr
|| __TEXT.__text _MRAudioBufferGetPacketCapacity
|| __TEXT.__text _MRAudioBufferGetPacketCount
|| __TEXT.__text _MRAudioBufferSetPacketCount
|| __TEXT.__text _MRAudioDataBlockCreate
|| __TEXT.__text _MRAudioDataBlockCreateExternalRepresentation
|| __TEXT.__text _MRAudioDataBlockCreateFromExternalRepresentation
|| __TEXT.__text _MRAudioDataBlockGetBuffer
|| __TEXT.__text _MRAudioDataBlockGetGain
|| __TEXT.__text _MRAudioDataBlockGetTimestamp
|| __TEXT.__text _MRAudioDataBlockSetBuffer
|| __TEXT.__text _MRAudioDataBlockSetGain
|| __TEXT.__text _MRAudioDataBlockSetTimestamp
|| __TEXT.__text _MRBroadcastCommandResponseGetBundleIdentifier
|| __TEXT.__text _MRBroadcastCommandResponseGetPID
|| __TEXT.__text _MRCFErrorCreateExternalRepresentation
|| __TEXT.__text _MRClassSwizzleMethod
|| __TEXT.__text _MRColorCopyDescription
|| __TEXT.__text _MRColorFromXPCMessage
|| __TEXT.__text _MRColorIsEqual
|| __TEXT.__text _MRColorIsNull
|| __TEXT.__text _MRComputeBaseGroupID
|| __TEXT.__text _MRComputeBaseRouteUID
|| __TEXT.__text _MRComputeGroupContextID
|| __TEXT.__text _MRConnectionStateFromProtobuf
|| __TEXT.__text _MRContentItemArtworkSatisfiesRequest
|| __TEXT.__text _MRContentItemCalculatedPlaybackPositionIsEqual
|| __TEXT.__text _MRContentItemCopy
|| __TEXT.__text _MRContentItemCopyAlbumYear
|| __TEXT.__text _MRContentItemCopyAppMetrics
|| __TEXT.__text _MRContentItemCopyAuxiliaryNowPlayingInfo
|| __TEXT.__text _MRContentItemCopyCollectionInfo
|| __TEXT.__text _MRContentItemCopyDeviceSpecificUserInfo
|| __TEXT.__text _MRContentItemCopyExtractedIdentifierFromNowPlayingInfo
|| __TEXT.__text _MRContentItemCopyMinimalReadableDescription
|| __TEXT.__text _MRContentItemCopyNowPlayingInfo
|| __TEXT.__text _MRContentItemCopyReadableDescription
|| __TEXT.__text _MRContentItemCopyUserInfo
|| __TEXT.__text _MRContentItemCopyWithIdentifier
|| __TEXT.__text _MRContentItemCreate
|| __TEXT.__text _MRContentItemCreateExternalRepresentation
|| __TEXT.__text _MRContentItemCreateFromExternalRepresentation
|| __TEXT.__text _MRContentItemCreateFromNowPlayingInfo
|| __TEXT.__text _MRContentItemCreateFromRequest
|| __TEXT.__text _MRContentItemCreateMergedItem
|| __TEXT.__text _MRContentItemCreateSkeletonFrom
|| __TEXT.__text _MRContentItemEqualToItem
|| __TEXT.__text _MRContentItemGetAlbumArtistName
|| __TEXT.__text _MRContentItemGetAlbumName
|| __TEXT.__text _MRContentItemGetAncestorIdentifier
|| __TEXT.__text _MRContentItemGetAppMetrics
|| __TEXT.__text _MRContentItemGetArtworkData
|| __TEXT.__text _MRContentItemGetArtworkDataHeight
|| __TEXT.__text _MRContentItemGetArtworkDataWidth
|| __TEXT.__text _MRContentItemGetArtworkIdentifier
|| __TEXT.__text _MRContentItemGetArtworkMIMEType
|| __TEXT.__text _MRContentItemGetArtworkURL
|| __TEXT.__text _MRContentItemGetArtworkURLTemplates
|| __TEXT.__text _MRContentItemGetAssetURL
|| __TEXT.__text _MRContentItemGetAvailableLanguageOptions
|| __TEXT.__text _MRContentItemGetBrandIdentifier
|| __TEXT.__text _MRContentItemGetCalculatedPlaybackPosition
|| __TEXT.__text _MRContentItemGetCollectionIdentifier
|| __TEXT.__text _MRContentItemGetCollectionInfo
|| __TEXT.__text _MRContentItemGetComposer
|| __TEXT.__text _MRContentItemGetContentIdentifier
|| __TEXT.__text _MRContentItemGetCurrentLanguageOptions
|| __TEXT.__text _MRContentItemGetCurrentPlaybackDate
|| __TEXT.__text _MRContentItemGetDefaultPlaybackRate
|| __TEXT.__text _MRContentItemGetDeviceSpecificUserInfo
|| __TEXT.__text _MRContentItemGetDirectorName
|| __TEXT.__text _MRContentItemGetDiscNumber
|| __TEXT.__text _MRContentItemGetDownloadProgress
|| __TEXT.__text _MRContentItemGetDownloadState
|| __TEXT.__text _MRContentItemGetDuration
|| __TEXT.__text _MRContentItemGetEditingStyleFlags
|| __TEXT.__text _MRContentItemGetElapsedTime
|| __TEXT.__text _MRContentItemGetElapsedTimeTimestamp
|| __TEXT.__text _MRContentItemGetEpisodeNumber
|| __TEXT.__text _MRContentItemGetEpisodeType
|| __TEXT.__text _MRContentItemGetGenre
|| __TEXT.__text _MRContentItemGetHasArtworkData
|| __TEXT.__text _MRContentItemGetHasDuration
|| __TEXT.__text _MRContentItemGetHasElapsedTime
|| __TEXT.__text _MRContentItemGetHasInfo
|| __TEXT.__text _MRContentItemGetHasLanguageOptions
|| __TEXT.__text _MRContentItemGetHasLyrics
|| __TEXT.__text _MRContentItemGetHasMetadata
|| __TEXT.__text _MRContentItemGetITunesStoreAlbumIdentifier
|| __TEXT.__text _MRContentItemGetITunesStoreArtistIdentifier
|| __TEXT.__text _MRContentItemGetITunesStoreIdentifier
|| __TEXT.__text _MRContentItemGetITunesStoreSubscriptionIdentifier
|| __TEXT.__text _MRContentItemGetIdentifier
|| __TEXT.__text _MRContentItemGetInferredTimestamp
|| __TEXT.__text _MRContentItemGetInfo
|| __TEXT.__text _MRContentItemGetIsAdvertisement
|| __TEXT.__text _MRContentItemGetIsAlwaysLive
|| __TEXT.__text _MRContentItemGetIsContainer
|| __TEXT.__text _MRContentItemGetIsCurrentlyPlaying
|| __TEXT.__text _MRContentItemGetIsExplicitItem
|| __TEXT.__text _MRContentItemGetIsInWishList
|| __TEXT.__text _MRContentItemGetIsLiked
|| __TEXT.__text _MRContentItemGetIsLoading
|| __TEXT.__text _MRContentItemGetIsPlayable
|| __TEXT.__text _MRContentItemGetIsSharable
|| __TEXT.__text _MRContentItemGetIsSteerable
|| __TEXT.__text _MRContentItemGetIsStreamingContent
|| __TEXT.__text _MRContentItemGetLegacyUniqueIdentifier
|| __TEXT.__text _MRContentItemGetLocalizedContentRating
|| __TEXT.__text _MRContentItemGetLocalizedDurationString
|| __TEXT.__text _MRContentItemGetLyrics
|| __TEXT.__text _MRContentItemGetLyricsURL
|| __TEXT.__text _MRContentItemGetMediaSubType
|| __TEXT.__text _MRContentItemGetMediaType
|| __TEXT.__text _MRContentItemGetNowPlayingInfo
|| __TEXT.__text _MRContentItemGetNumberOfSections
|| __TEXT.__text _MRContentItemGetParentIdentifier
|| __TEXT.__text _MRContentItemGetPlayCount
|| __TEXT.__text _MRContentItemGetPlaybackProgress
|| __TEXT.__text _MRContentItemGetPlaybackRate
|| __TEXT.__text _MRContentItemGetPlaylistType
|| __TEXT.__text _MRContentItemGetProfileIdentifier
|| __TEXT.__text _MRContentItemGetPurchaseInfoData
|| __TEXT.__text _MRContentItemGetRadioStationIdentifier
|| __TEXT.__text _MRContentItemGetRadioStationName
|| __TEXT.__text _MRContentItemGetRadioStationString
|| __TEXT.__text _MRContentItemGetRadioStationType
|| __TEXT.__text _MRContentItemGetReleaseDate
|| __TEXT.__text _MRContentItemGetRequestIdentifier
|| __TEXT.__text _MRContentItemGetSeasonNumber
|| __TEXT.__text _MRContentItemGetSections
|| __TEXT.__text _MRContentItemGetSeriesName
|| __TEXT.__text _MRContentItemGetServiceIdentifier
|| __TEXT.__text _MRContentItemGetStartTime
|| __TEXT.__text _MRContentItemGetSubtitle
|| __TEXT.__text _MRContentItemGetTitle
|| __TEXT.__text _MRContentItemGetTotalDiscCount
|| __TEXT.__text _MRContentItemGetTotalTrackCount
|| __TEXT.__text _MRContentItemGetTrackArtistName
|| __TEXT.__text _MRContentItemGetTrackNumber
|| __TEXT.__text _MRContentItemGetUserInfo
|| __TEXT.__text _MRContentItemHasPlaybackRate
|| __TEXT.__text _MRContentItemIdentifierIsEqual
|| __TEXT.__text _MRContentItemIsEmpty
|| __TEXT.__text _MRContentItemMerge
|| __TEXT.__text _MRContentItemSetAlbumArtistName
|| __TEXT.__text _MRContentItemSetAlbumName
|| __TEXT.__text _MRContentItemSetAlbumYear
|| __TEXT.__text _MRContentItemSetAncestorIdentifier
|| __TEXT.__text _MRContentItemSetAppMetrics
|| __TEXT.__text _MRContentItemSetArtworkData
|| __TEXT.__text _MRContentItemSetArtworkDataSize
|| __TEXT.__text _MRContentItemSetArtworkFileURL
|| __TEXT.__text _MRContentItemSetArtworkIdentifier
|| __TEXT.__text _MRContentItemSetArtworkMIMEType
|| __TEXT.__text _MRContentItemSetArtworkURL
|| __TEXT.__text _MRContentItemSetArtworkURLTemplates
|| __TEXT.__text _MRContentItemSetAssetURL
|| __TEXT.__text _MRContentItemSetAvailableLanguageOptions
|| __TEXT.__text _MRContentItemSetBrandIdentifier
|| __TEXT.__text _MRContentItemSetCollectionIdentifier
|| __TEXT.__text _MRContentItemSetCollectionInfo
|| __TEXT.__text _MRContentItemSetComposer
|| __TEXT.__text _MRContentItemSetContentIdentifier
|| __TEXT.__text _MRContentItemSetCurrentLanguageOptions
|| __TEXT.__text _MRContentItemSetCurrentPlaybackDate
|| __TEXT.__text _MRContentItemSetDefaultPlaybackRate
|| __TEXT.__text _MRContentItemSetDeviceSpecificUserInfo
|| __TEXT.__text _MRContentItemSetDirectorName
|| __TEXT.__text _MRContentItemSetDiscNumber
|| __TEXT.__text _MRContentItemSetDownloadProgress
|| __TEXT.__text _MRContentItemSetDownloadState
|| __TEXT.__text _MRContentItemSetDuration
|| __TEXT.__text _MRContentItemSetEditingStyleFlags
|| __TEXT.__text _MRContentItemSetElapsedTime
|| __TEXT.__text _MRContentItemSetElapsedTimeTimestamp
|| __TEXT.__text _MRContentItemSetEpisodeNumber
|| __TEXT.__text _MRContentItemSetEpisodeType
|| __TEXT.__text _MRContentItemSetExplicitItem
|| __TEXT.__text _MRContentItemSetGenre
|| __TEXT.__text _MRContentItemSetHasArtworkData
|| __TEXT.__text _MRContentItemSetHasInfo
|| __TEXT.__text _MRContentItemSetHasLanguageOptions
|| __TEXT.__text _MRContentItemSetHasLyrics
|| __TEXT.__text _MRContentItemSetITunesStoreAlbumIdentifier
|| __TEXT.__text _MRContentItemSetITunesStoreArtistIdentifier
|| __TEXT.__text _MRContentItemSetITunesStoreIdentifier
|| __TEXT.__text _MRContentItemSetITunesStoreSubscriptionIdentifier
|| __TEXT.__text _MRContentItemSetInferredTimestamp
|| __TEXT.__text _MRContentItemSetInfo
|| __TEXT.__text _MRContentItemSetIsAdvertisement
|| __TEXT.__text _MRContentItemSetIsAlwaysLive
|| __TEXT.__text _MRContentItemSetIsContainer
|| __TEXT.__text _MRContentItemSetIsCurrentlyPlaying
|| __TEXT.__text _MRContentItemSetIsInWishList
|| __TEXT.__text _MRContentItemSetIsLiked
|| __TEXT.__text _MRContentItemSetIsLoading
|| __TEXT.__text _MRContentItemSetIsSharable
|| __TEXT.__text _MRContentItemSetIsSteerable
|| __TEXT.__text _MRContentItemSetIsStreamingContent
|| __TEXT.__text _MRContentItemSetLegacyUniqueIdentifier
|| __TEXT.__text _MRContentItemSetLocalizedContentRating
|| __TEXT.__text _MRContentItemSetLocalizedDurationString
|| __TEXT.__text _MRContentItemSetLyrics
|| __TEXT.__text _MRContentItemSetLyricsURL
|| __TEXT.__text _MRContentItemSetMediaSubType
|| __TEXT.__text _MRContentItemSetMediaType
|| __TEXT.__text _MRContentItemSetNowPlayingInfo
|| __TEXT.__text _MRContentItemSetNumberOfSections
|| __TEXT.__text _MRContentItemSetParentIdentifier
|| __TEXT.__text _MRContentItemSetPlayCount
|| __TEXT.__text _MRContentItemSetPlayable
|| __TEXT.__text _MRContentItemSetPlaybackProgress
|| __TEXT.__text _MRContentItemSetPlaybackRate
|| __TEXT.__text _MRContentItemSetPlaylistType
|| __TEXT.__text _MRContentItemSetProfileIdentifier
|| __TEXT.__text _MRContentItemSetPurchaseInfoData
|| __TEXT.__text _MRContentItemSetRadioStationIdentifier
|| __TEXT.__text _MRContentItemSetRadioStationName
|| __TEXT.__text _MRContentItemSetRadioStationString
|| __TEXT.__text _MRContentItemSetRadioStationType
|| __TEXT.__text _MRContentItemSetReleaseDate
|| __TEXT.__text _MRContentItemSetRequestIdentifier
|| __TEXT.__text _MRContentItemSetSeasonNumber
|| __TEXT.__text _MRContentItemSetSections
|| __TEXT.__text _MRContentItemSetSeriesName
|| __TEXT.__text _MRContentItemSetServiceIdentifier
|| __TEXT.__text _MRContentItemSetStartTime
|| __TEXT.__text _MRContentItemSetSubtitle
|| __TEXT.__text _MRContentItemSetTitle
|| __TEXT.__text _MRContentItemSetTotalDiscCount
|| __TEXT.__text _MRContentItemSetTotalTrackCount
|| __TEXT.__text _MRContentItemSetTrackArtistName
|| __TEXT.__text _MRContentItemSetTrackNumber
|| __TEXT.__text _MRContentItemSetUserInfo
|| __TEXT.__text _MRContentItemsCopyIdentifiers
|| __TEXT.__text _MRContentItemsCopyMinimalReadableDescription
|| __TEXT.__text _MRContentItemsCopyReadableDescription
|| __TEXT.__text _MRContentItemsCreateExternalRepresentation
|| __TEXT.__text _MRContentItemsCreateFromExternalRepresentation
|| __TEXT.__text _MRContentItemsCreateFromRequest
|| __TEXT.__text _MRCopyDeviceInfoPath
|| __TEXT.__text _MRCopyMediaRemoteLibraryDirectory
|| __TEXT.__text _MRCopyRegisteredTransactionDescriptions
|| __TEXT.__text _MRCreateASCIIRepresentationFromImageData
|| __TEXT.__text _MRCreateAllowedNowPlayingInfo
|| __TEXT.__text _MRCreateAppActivityFromXPCMessage
|| __TEXT.__text _MRCreateArrayFomXPCMessage
|| __TEXT.__text _MRCreateArrayFromData
|| __TEXT.__text _MRCreateClientArrayFromXPCMessage
|| __TEXT.__text _MRCreateClientErrorFromExternalRepresentation
|| __TEXT.__text _MRCreateClientErrorFromXPCMessage
|| __TEXT.__text _MRCreateClientFromXPCMessage
|| __TEXT.__text _MRCreateCommandResultFromXPCMessage
|| __TEXT.__text _MRCreateContentItemsFromXPCMessage
|| __TEXT.__text _MRCreateCryptoError
|| __TEXT.__text _MRCreateDataFromArray
|| __TEXT.__text _MRCreateDataFromObject
|| __TEXT.__text _MRCreateDataFromXPCMessage
|| __TEXT.__text _MRCreateDecodedUserInfo
|| __TEXT.__text _MRCreateDeviceInfoFromXPCMessage
|| __TEXT.__text _MRCreateDiagnosticFromXPCMessage
|| __TEXT.__text _MRCreateDistantEndpointFromXPCMessage
|| __TEXT.__text _MRCreateDistantExternalDeviceFromXPCMessage
|| __TEXT.__text _MRCreateDonatedQosBlock
|| __TEXT.__text _MRCreateDurationStringRepresentation
|| __TEXT.__text _MRCreateEncodedUserInfo
|| __TEXT.__text _MRCreateFormattedDebugDescriptionFromClass
|| __TEXT.__text _MRCreateFromData
|| __TEXT.__text _MRCreateIndentedDebugDescriptionFromArray
|| __TEXT.__text _MRCreateIndentedDebugDescriptionFromObject
|| __TEXT.__text _MRCreateNowPlayingInfoFromProtobuf
|| __TEXT.__text _MRCreateNowPlayingStateFromXPCMessage
|| __TEXT.__text _MRCreateOriginArrayFromXPCMessage
|| __TEXT.__text _MRCreateOriginFromXPCMessage
|| __TEXT.__text _MRCreatePlaybackQueueCapabilitiesFromXPCMessage
|| __TEXT.__text _MRCreatePlaybackQueueFromXPCMessage
|| __TEXT.__text _MRCreatePlaybackQueueRequestFromXPCMessage
|| __TEXT.__text _MRCreatePlaybackSessionFromXPCMessage
|| __TEXT.__text _MRCreatePlayerArrayFromXPCMessage
|| __TEXT.__text _MRCreatePlayerFromXPCMessage
|| __TEXT.__text _MRCreatePlayerPathArrayFromXPCMessage
|| __TEXT.__text _MRCreatePlayerPathFromXPCMessage
|| __TEXT.__text _MRCreatePropertyListFromXPCMessage
|| __TEXT.__text _MRCreateProtobufFromNowPlayingInfo
|| __TEXT.__text _MRCreateProtobufFromSupportedCommands
|| __TEXT.__text _MRCreateProtobufFromXPCMessage
|| __TEXT.__text _MRCreateStringFromXPCMessage
|| __TEXT.__text _MRCreateSupportedCommandsDataFromXPCMessage
|| __TEXT.__text _MRCreateSupportedCommandsFromProtobuf
|| __TEXT.__text _MRCreateSupportedCommandsFromXPCMessage
|| __TEXT.__text _MRCreateUserInfoFromXPCMessage
|| __TEXT.__text _MRCreateVideoThumbnailsFromXPCMessage
|| __TEXT.__text _MRCreateXPCMessage
|| __TEXT.__text _MRDataCreateStringRepresentation
|| __TEXT.__text _MRDeviceSupportsExternalTouchBarUI
|| __TEXT.__text _MRDiagnosticCopyDateCreated
|| __TEXT.__text _MRDiagnosticCopyInfo
|| __TEXT.__text _MRDiagnosticCreate
|| __TEXT.__text _MRDiagnosticCreateExternalRepresentation
|| __TEXT.__text _MRDiagnosticCreateFromExternalRepresentation
|| __TEXT.__text _MRDictionaryCalculateDeltas
|| __TEXT.__text _MRErrorCopyDescription
|| __TEXT.__text _MRErrorFromXPCMessage
|| __TEXT.__text _MRExternalDeviceConnect
|| __TEXT.__text _MRExternalDeviceConnectEx
|| __TEXT.__text _MRExternalDeviceConnectOptionsCopyDescription
|| __TEXT.__text _MRExternalDeviceConnectionStateCopyDescription
|| __TEXT.__text _MRExternalDeviceCopyCustomOrigin
|| __TEXT.__text _MRExternalDeviceCopyDeviceInfo
|| __TEXT.__text _MRExternalDeviceCopyHostName
|| __TEXT.__text _MRExternalDeviceCopyName
|| __TEXT.__text _MRExternalDeviceCopySystemBuildVersion
|| __TEXT.__text _MRExternalDeviceCopyUniqueIdentifier
|| __TEXT.__text _MRExternalDeviceDeletePairedDevice
|| __TEXT.__text _MRExternalDeviceDisconnect
|| __TEXT.__text _MRExternalDeviceGetConnectionState
|| __TEXT.__text _MRExternalDeviceGetNetworkPort
|| __TEXT.__text _MRExternalDeviceGetOutputDeviceUIDVolume
|| __TEXT.__text _MRExternalDeviceGetOutputDeviceVolume
|| __TEXT.__text _MRExternalDeviceGetPairedDevices
|| __TEXT.__text _MRExternalDeviceGetVolume
|| __TEXT.__text _MRExternalDeviceIsConnected
|| __TEXT.__text _MRExternalDeviceIsPaired
|| __TEXT.__text _MRExternalDeviceIsPairingAllowed
|| __TEXT.__text _MRExternalDeviceIsValid
|| __TEXT.__text _MRExternalDevicePing
|| __TEXT.__text _MRExternalDeviceRequestOutputContextModification
|| __TEXT.__text _MRExternalDeviceSendButtonEvent
|| __TEXT.__text _MRExternalDeviceSendCustomData
|| __TEXT.__text _MRExternalDeviceSetConnectionStateCallback
|| __TEXT.__text _MRExternalDeviceSetCustomDataCallback
|| __TEXT.__text _MRExternalDeviceSetName
|| __TEXT.__text _MRExternalDeviceSetNameCallback
|| __TEXT.__text _MRExternalDeviceSetOutputDeviceUIDVolume
|| __TEXT.__text _MRExternalDeviceSetOutputDeviceVolume
|| __TEXT.__text _MRExternalDeviceSetPairingAllowedCallback
|| __TEXT.__text _MRExternalDeviceSetPairingCallback
|| __TEXT.__text _MRExternalDeviceSetVolume
|| __TEXT.__text _MRExternalDeviceSetVolumeChangedCallback
|| __TEXT.__text _MRExternalDeviceSetWantsNowPlayingArtworkUpdates
|| __TEXT.__text _MRExternalDeviceSetWantsNowPlayingUpdates
|| __TEXT.__text _MRExternalDeviceSetWantsOutputDeviceUpdates
|| __TEXT.__text _MRExternalDeviceSetWantsVolumeUpdates
|| __TEXT.__text _MRExternalDeviceUnpair
|| __TEXT.__text _MRGameControllerAccelerationCopy
|| __TEXT.__text _MRGameControllerAccelerationCopyF
|| __TEXT.__text _MRGameControllerAccelerationCreate
|| __TEXT.__text _MRGameControllerAccelerationCreate4
|| __TEXT.__text _MRGameControllerAccelerationCreate4F
|| __TEXT.__text _MRGameControllerAccelerationCreateDescription
|| __TEXT.__text _MRGameControllerAccelerationCreateF
|| __TEXT.__text _MRGameControllerAccelerationCreateWithLegacyAcceleration
|| __TEXT.__text _MRGameControllerAccelerationGetW
|| __TEXT.__text _MRGameControllerAccelerationGetX
|| __TEXT.__text _MRGameControllerAccelerationGetY
|| __TEXT.__text _MRGameControllerAccelerationGetZ
|| __TEXT.__text _MRGameControllerAccelerationMake
|| __TEXT.__text _MRGameControllerButtonsCreate
|| __TEXT.__text _MRGameControllerButtonsCreateDescription
|| __TEXT.__text _MRGameControllerButtonsCreateWithLegacyButtons
|| __TEXT.__text _MRGameControllerButtonsExtendedCreateDescription
|| __TEXT.__text _MRGameControllerButtonsExtendedMake
|| __TEXT.__text _MRGameControllerButtonsGetA
|| __TEXT.__text _MRGameControllerButtonsGetB
|| __TEXT.__text _MRGameControllerButtonsGetDPadX
|| __TEXT.__text _MRGameControllerButtonsGetDPadY
|| __TEXT.__text _MRGameControllerButtonsGetLeftShoulder
|| __TEXT.__text _MRGameControllerButtonsGetLeftThumbstickX
|| __TEXT.__text _MRGameControllerButtonsGetLeftThumbstickY
|| __TEXT.__text _MRGameControllerButtonsGetLeftTrigger
|| __TEXT.__text _MRGameControllerButtonsGetPause
|| __TEXT.__text _MRGameControllerButtonsGetRightShoulder
|| __TEXT.__text _MRGameControllerButtonsGetRightThumbstickX
|| __TEXT.__text _MRGameControllerButtonsGetRightThumbstickY
|| __TEXT.__text _MRGameControllerButtonsGetRightTrigger
|| __TEXT.__text _MRGameControllerButtonsGetX
|| __TEXT.__text _MRGameControllerButtonsGetY
|| __TEXT.__text _MRGameControllerButtonsMake
|| __TEXT.__text _MRGameControllerButtonsSetA
|| __TEXT.__text _MRGameControllerButtonsSetB
|| __TEXT.__text _MRGameControllerButtonsSetDPadX
|| __TEXT.__text _MRGameControllerButtonsSetDPadY
|| __TEXT.__text _MRGameControllerButtonsSetLeftShoulder
|| __TEXT.__text _MRGameControllerButtonsSetLeftThumbstickX
|| __TEXT.__text _MRGameControllerButtonsSetLeftThumbstickY
|| __TEXT.__text _MRGameControllerButtonsSetLeftTrigger
|| __TEXT.__text _MRGameControllerButtonsSetPause
|| __TEXT.__text _MRGameControllerButtonsSetRightShoulder
|| __TEXT.__text _MRGameControllerButtonsSetRightThumbstickX
|| __TEXT.__text _MRGameControllerButtonsSetRightThumbstickY
|| __TEXT.__text _MRGameControllerButtonsSetRightTrigger
|| __TEXT.__text _MRGameControllerButtonsSetX
|| __TEXT.__text _MRGameControllerButtonsSetY
|| __TEXT.__text _MRGameControllerDigitizerCreate
|| __TEXT.__text _MRGameControllerDigitizerCreateDescription
|| __TEXT.__text _MRGameControllerDigitizerCreateWithHIDTouchEvent
|| __TEXT.__text _MRGameControllerDigitizerCreateWithLegacyDigitizer
|| __TEXT.__text _MRGameControllerDigitizerGetTimestamp
|| __TEXT.__text _MRGameControllerDigitizerGetTouchDown
|| __TEXT.__text _MRGameControllerDigitizerGetX
|| __TEXT.__text _MRGameControllerDigitizerGetY
|| __TEXT.__text _MRGameControllerDigitizerMake
|| __TEXT.__text _MRGameControllerDigitizerSetTimestamp
|| __TEXT.__text _MRGameControllerDigitizerSetTouchDown
|| __TEXT.__text _MRGameControllerDigitizerSetX
|| __TEXT.__text _MRGameControllerDigitizerSetY
|| __TEXT.__text _MRGameControllerEventCreateDescription
|| __TEXT.__text _MRGameControllerEventCreateWithButtons
|| __TEXT.__text _MRGameControllerEventCreateWithDigitizer
|| __TEXT.__text _MRGameControllerEventCreateWithLegacyEvent
|| __TEXT.__text _MRGameControllerEventCreateWithMotion
|| __TEXT.__text _MRGameControllerEventMake
|| __TEXT.__text _MRGameControllerEventTypeCreateDescription
|| __TEXT.__text _MRGameControllerInputModeCreateDescription
|| __TEXT.__text _MRGameControllerInputModeFromProtobuf
|| __TEXT.__text _MRGameControllerMotionCopy
|| __TEXT.__text _MRGameControllerMotionCopyF
|| __TEXT.__text _MRGameControllerMotionCreate
|| __TEXT.__text _MRGameControllerMotionCreateDescription
|| __TEXT.__text _MRGameControllerMotionCreateWithLegacyMotion
|| __TEXT.__text _MRGameControllerMotionGetAttitude
|| __TEXT.__text _MRGameControllerMotionGetGravity
|| __TEXT.__text _MRGameControllerMotionGetRotation
|| __TEXT.__text _MRGameControllerMotionGetUserAcceleration
|| __TEXT.__text _MRGameControllerMotionMake
|| __TEXT.__text _MRGameControllerMotionSetAttitude
|| __TEXT.__text _MRGameControllerMotionSetGravity
|| __TEXT.__text _MRGameControllerMotionSetRotation
|| __TEXT.__text _MRGameControllerMotionSetUserAcceleration
|| __TEXT.__text _MRGameControllerPlayerIndexCreateDescription
|| __TEXT.__text _MRGameControllerProfileFromProtobuf
|| __TEXT.__text _MRGameControllerPropertiesCopyVendorName
|| __TEXT.__text _MRGameControllerPropertiesCreate
|| __TEXT.__text _MRGameControllerPropertiesGetButtonAUpDelay
|| __TEXT.__text _MRGameControllerPropertiesGetPlayerIndex
|| __TEXT.__text _MRGameControllerPropertiesGetProfile
|| __TEXT.__text _MRGameControllerPropertiesGetSupportsExtendedMotion
|| __TEXT.__text _MRGameControllerPropertiesSetButtonAUpDelay
|| __TEXT.__text _MRGameControllerPropertiesSetPlayerIndex
|| __TEXT.__text _MRGameControllerPropertiesSetProfile
|| __TEXT.__text _MRGameControllerPropertiesSetSupportsExtendedMotion
|| __TEXT.__text _MRGameControllerPropertiesSetVendorName
|| __TEXT.__text _MRGameControllerServerGetRemoteInputMode
|| __TEXT.__text _MRGameControllerServerSetRemoteInputMode
|| __TEXT.__text _MRGetClientFromUserInfo
|| __TEXT.__text _MRGetContentItemsFromUserInfo
|| __TEXT.__text _MRGetDeviceInfoFromUserInfo
|| __TEXT.__text _MRGetDiscoveryDebugEnabled
|| __TEXT.__text _MRGetOriginFromUserInfo
|| __TEXT.__text _MRGetPlayerFromUserInfo
|| __TEXT.__text _MRGetPlayerPathFromUserInfo
|| __TEXT.__text _MRGetSharedService
|| __TEXT.__text _MRGetTransactionComingFromXPCMessage
|| __TEXT.__text _MRHIDButtonEventCopyDescription
|| __TEXT.__text _MRHIDTouchEventCopyDescription
|| __TEXT.__text _MRHIDTouchPhaseCopyDescription
|| __TEXT.__text _MRInvalidateTransactions
|| __TEXT.__text _MRIsObjectOfClass
|| __TEXT.__text _MRLanguageOptionCopyCharacteristics
|| __TEXT.__text _MRLanguageOptionCopyDisplayName
|| __TEXT.__text _MRLanguageOptionCopyIdentifier
|| __TEXT.__text _MRLanguageOptionCopyLanguageTag
|| __TEXT.__text _MRLanguageOptionCreate
|| __TEXT.__text _MRLanguageOptionCreateAutomaticLanguageOptionForType
|| __TEXT.__text _MRLanguageOptionCreateExternalRepresentation
|| __TEXT.__text _MRLanguageOptionCreateFromExternalRepresentation
|| __TEXT.__text _MRLanguageOptionGetType
|| __TEXT.__text _MRLanguageOptionGroupCopyLanguageOptions
|| __TEXT.__text _MRLanguageOptionGroupCreate
|| __TEXT.__text _MRLanguageOptionGroupCreateExternalRepresentation
|| __TEXT.__text _MRLanguageOptionGroupCreateFromExternalRepresentation
|| __TEXT.__text _MRLanguageOptionGroupGetAllowEmptySelection
|| __TEXT.__text _MRLanguageOptionGroupGetDefaultLanguageOption
|| __TEXT.__text _MRLanguageOptionGroupsCreateExternalRepresentation
|| __TEXT.__text _MRLanguageOptionGroupsCreateFromExternalRepresentation
|| __TEXT.__text _MRLanguageOptionIsAutomaticLanguageOptionForType
|| __TEXT.__text _MRLanguageOptionIsEqualToLanguageOption
|| __TEXT.__text _MRLanguageOptionTypeCopyDescription
|| __TEXT.__text _MRLanguageOptionsCreateExternalRepresentation
|| __TEXT.__text _MRLanguageOptionsCreateFromExternalRepresentation
|| __TEXT.__text _MRLocalizedString
|| __TEXT.__text _MRLogCategoryConnections
|| __TEXT.__text _MRLogCategoryDiscovery
|| __TEXT.__text _MRLogCategoryDiscoveryOversize
|| __TEXT.__text _MRLogCategoryMigrationOversize
|| __TEXT.__text _MRLyricsEventCreateBegin
|| __TEXT.__text _MRLyricsEventCreateEnd
|| __TEXT.__text _MRLyricsEventCreateExternalRepresentation
|| __TEXT.__text _MRLyricsEventCreateFromExternalRepresentation
|| __TEXT.__text _MRLyricsEventGetEndDate
|| __TEXT.__text _MRLyricsEventGetStartDate
|| __TEXT.__text _MRLyricsEventGetToken
|| __TEXT.__text _MRLyricsItemCreate
|| __TEXT.__text _MRLyricsItemGetLyrics
|| __TEXT.__text _MRLyricsItemGetToken
|| __TEXT.__text _MRLyricsItemIsUserProvided
|| __TEXT.__text _MRLyricsItemTokenCreate
|| __TEXT.__text _MRLyricsItemTokenCreateExternalRepresentation
|| __TEXT.__text _MRLyricsItemTokenCreateFromExternalRepresentation
|| __TEXT.__text _MRLyricsItemTokenCreateWithData
|| __TEXT.__text _MRLyricsItemTokenGetIdentifier
|| __TEXT.__text _MRLyricsItemTokenGetUserInfo
|| __TEXT.__text _MRMediaRemoteAVOutputDeviceIsLocalForAirPlay
|| __TEXT.__text _MRMediaRemoteActiveEndpointChangeTypeCopyDescription
|| __TEXT.__text _MRMediaRemoteActiveEndpointOperationCopyDescription
|| __TEXT.__text _MRMediaRemoteActiveEndpointTypeCopyDescription
|| __TEXT.__text _MRMediaRemoteAddAsyncCommandHandlerBlock
|| __TEXT.__text _MRMediaRemoteAddAsyncCommandHandlerBlockForOrigin
|| __TEXT.__text _MRMediaRemoteAddAsyncCommandHandlerBlockForPlayer
|| __TEXT.__text _MRMediaRemoteAddCommandHandlerBlock
|| __TEXT.__text _MRMediaRemoteAddCommandHandlerBlockForOrigin
|| __TEXT.__text _MRMediaRemoteAddCommandHandlerBlockForPlayer
|| __TEXT.__text _MRMediaRemoteAddCommandHandlerForPlayer
|| __TEXT.__text _MRMediaRemoteAddPlayerPathInvalidationHandler
|| __TEXT.__text _MRMediaRemoteAddVirtualOutputDevice
|| __TEXT.__text _MRMediaRemoteAdjustMediaPlaybackVolume
|| __TEXT.__text _MRMediaRemoteAgentNotifyCallChanged
|| __TEXT.__text _MRMediaRemoteAgentSetEndpoint
|| __TEXT.__text _MRMediaRemoteAirPlayReceiverCopyAirPlayGroupIdentity
|| __TEXT.__text _MRMediaRemoteAirPlayReceiverCopyGroupIdentity
|| __TEXT.__text _MRMediaRemoteAirPlayReceiverCopyPairingIdentity
|| __TEXT.__text _MRMediaRemoteAirPlayReceiverGetIsGroupLeader
|| __TEXT.__text _MRMediaRemoteApplicationIsAirPlayReceiver
|| __TEXT.__text _MRMediaRemoteApplicationIsSystemAppleTVApplication
|| __TEXT.__text _MRMediaRemoteApplicationIsSystemApplication
|| __TEXT.__text _MRMediaRemoteApplicationIsSystemBooksApplication
|| __TEXT.__text _MRMediaRemoteApplicationIsSystemClassicalRoomApplication
|| __TEXT.__text _MRMediaRemoteApplicationIsSystemMediaApplication
|| __TEXT.__text _MRMediaRemoteApplicationIsSystemPodcastApplication
|| __TEXT.__text _MRMediaRemoteApplicationSupportsBrowsableContent
|| __TEXT.__text _MRMediaRemoteApplicationSupportsImmediatePlayback
|| __TEXT.__text _MRMediaRemoteApplicationSupportsSectionedBrowsing
|| __TEXT.__text _MRMediaRemoteBeginLoadingBrowsableContent
|| __TEXT.__text _MRMediaRemoteBroadcastCommand
|| __TEXT.__text _MRMediaRemoteBrowsableContentGetNowPlayingContentIdentifiers
|| __TEXT.__text _MRMediaRemoteBrowsableContentSupportsPlaybackProgress
|| __TEXT.__text _MRMediaRemoteBundle
|| __TEXT.__text _MRMediaRemoteCanBecomeActivePlayer
|| __TEXT.__text _MRMediaRemoteClearAllAVRoutePasswords
|| __TEXT.__text _MRMediaRemoteCollectClientDiagnostics
|| __TEXT.__text _MRMediaRemoteCollectDiagnostic
|| __TEXT.__text _MRMediaRemoteCommandCreateDescription
|| __TEXT.__text _MRMediaRemoteCommandCreateExternalRepresentation
|| __TEXT.__text _MRMediaRemoteCommandFromExternalRepresentation
|| __TEXT.__text _MRMediaRemoteCommandFromProtobuf
|| __TEXT.__text _MRMediaRemoteCommandInfoCopyOptions
|| __TEXT.__text _MRMediaRemoteCommandInfoCopySupportedCommandsWithPredicate
|| __TEXT.__text _MRMediaRemoteCommandInfoCopyValueForKey
|| __TEXT.__text _MRMediaRemoteCommandInfoCreate
|| __TEXT.__text _MRMediaRemoteCommandInfoCreateExternalRepresentation
|| __TEXT.__text _MRMediaRemoteCommandInfoCreateFromExternalRepresentation
|| __TEXT.__text _MRMediaRemoteCommandInfoEnumerateSupportedCommandsWithHandler
|| __TEXT.__text _MRMediaRemoteCommandInfoGetBooleanValueForKey
|| __TEXT.__text _MRMediaRemoteCommandInfoGetCommand
|| __TEXT.__text _MRMediaRemoteCommandInfoGetEnabled
|| __TEXT.__text _MRMediaRemoteCommandInfoGetIntegerValueForKey
|| __TEXT.__text _MRMediaRemoteCommandInfoSetCommand
|| __TEXT.__text _MRMediaRemoteCommandInfoSetEnabled
|| __TEXT.__text _MRMediaRemoteCommandInfoSetOptions
|| __TEXT.__text _MRMediaRemoteCommandInfoSupportedCommandIsEnabled
|| __TEXT.__text _MRMediaRemoteCommandIsContextual
|| __TEXT.__text _MRMediaRemoteCommandIsLegacy
|| __TEXT.__text _MRMediaRemoteCommandIsNavigational
|| __TEXT.__text _MRMediaRemoteCommandOptionsFromProtobuf
|| __TEXT.__text _MRMediaRemoteCommandOptionsToProtobuf
|| __TEXT.__text _MRMediaRemoteCommandRequiresDestinationPositionOption
|| __TEXT.__text _MRMediaRemoteCommandRequiresOptions
|| __TEXT.__text _MRMediaRemoteCommandRequiresSourcePositionOption
|| __TEXT.__text _MRMediaRemoteCommandToProtobuf
|| __TEXT.__text _MRMediaRemoteCopyAirPlayGroupUID
|| __TEXT.__text _MRMediaRemoteCopyApplicationEntitlements
|| __TEXT.__text _MRMediaRemoteCopyBrowsableContentAPIMaskDescription
|| __TEXT.__text _MRMediaRemoteCopyCachedDeviceInfo
|| __TEXT.__text _MRMediaRemoteCopyClientVisibilityDescription
|| __TEXT.__text _MRMediaRemoteCopyCommandDescription
|| __TEXT.__text _MRMediaRemoteCopyCommandHandlerStatusDescription
|| __TEXT.__text _MRMediaRemoteCopyCommandHandlerStatusesDescription
|| __TEXT.__text _MRMediaRemoteCopyCommandsDescription
|| __TEXT.__text _MRMediaRemoteCopyDeviceInfo
|| __TEXT.__text _MRMediaRemoteCopyDeviceUID
|| __TEXT.__text _MRMediaRemoteCopyEntitlements
|| __TEXT.__text _MRMediaRemoteCopyGroupUID
|| __TEXT.__text _MRMediaRemoteCopyHardwareRemoteBehaviorDescription
|| __TEXT.__text _MRMediaRemoteCopyLocalAirPlayGroupName
|| __TEXT.__text _MRMediaRemoteCopyLocalAirPlayReceiverClusterType
|| __TEXT.__text _MRMediaRemoteCopyLocalAirPlayReceiverTightSyncIdentity
|| __TEXT.__text _MRMediaRemoteCopyLocalAirPlaySenderDefaultGroupIdentity
|| __TEXT.__text _MRMediaRemoteCopyLocalClusterID
|| __TEXT.__text _MRMediaRemoteCopyLocalClusterLeaderIdentity
|| __TEXT.__text _MRMediaRemoteCopyLocalDeviceAirPlayReceiverBundleID
|| __TEXT.__text _MRMediaRemoteCopyLocalDeviceAirPlayReceiverDisplayID
|| __TEXT.__text _MRMediaRemoteCopyLocalDeviceSystemAppleTVApplicationDisplayID
|| __TEXT.__text _MRMediaRemoteCopyLocalDeviceSystemBooksApplicationDisplayID
|| __TEXT.__text _MRMediaRemoteCopyLocalDeviceSystemClassicalRoomApplicationDisplayID
|| __TEXT.__text _MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID
|| __TEXT.__text _MRMediaRemoteCopyLocalDeviceSystemPodcastApplicationDisplayID
|| __TEXT.__text _MRMediaRemoteCopyNowPlayingNotifications
|| __TEXT.__text _MRMediaRemoteCopyNowPlayingVisibilityDescription
|| __TEXT.__text _MRMediaRemoteCopyPendingCommands
|| __TEXT.__text _MRMediaRemoteCopyPickableRoutes
|| __TEXT.__text _MRMediaRemoteCopyPickableRoutesForCategory
|| __TEXT.__text _MRMediaRemoteCopyPickableRoutesForCategory_Async
|| __TEXT.__text _MRMediaRemoteCopyPickableRoutes_Async
|| __TEXT.__text _MRMediaRemoteCopyPlaybackQueueInsertionPositionDescription
|| __TEXT.__text _MRMediaRemoteCopyPlaybackStateDescription
|| __TEXT.__text _MRMediaRemoteCopyReadableDictionaryDescription
|| __TEXT.__text _MRMediaRemoteCopyRepeatModeDescription
|| __TEXT.__text _MRMediaRemoteCopyRouteDiscoveryModeDescription
|| __TEXT.__text _MRMediaRemoteCopySendCommandErrorDescription
|| __TEXT.__text _MRMediaRemoteCopySenderDefaultGroupUID
|| __TEXT.__text _MRMediaRemoteCopySetPickedRouteOptionsDescription
|| __TEXT.__text _MRMediaRemoteCopyShuffleModeDescription
|| __TEXT.__text _MRMediaRemoteCopySupportedCommands
|| __TEXT.__text _MRMediaRemoteCopySupportedCommandsForOrigin
|| __TEXT.__text _MRMediaRemoteCopySystemMediaApplicationDefaultSetPlaybackQueueCommandOptions
|| __TEXT.__text _MRMediaRemoteCopySystemMediaApplicationDefaultSupportedCommands
|| __TEXT.__text _MRMediaRemoteCopySystemMediaApplicationDefaultSupportedCommandsData
|| __TEXT.__text _MRMediaRemoteCreateError
|| __TEXT.__text _MRMediaRemoteCreateErrorExternalRepresentation
|| __TEXT.__text _MRMediaRemoteCreateErrorFromExternalRepresentation
|| __TEXT.__text _MRMediaRemoteCreateErrorWithDescription
|| __TEXT.__text _MRMediaRemoteCreateErrorWithUserInfo
|| __TEXT.__text _MRMediaRemoteCreatePasscodeHash
|| __TEXT.__text _MRMediaRemoteCurrentApplicationIsAirPlayReceiver
|| __TEXT.__text _MRMediaRemoteDismissMediaControlsCommand
|| __TEXT.__text _MRMediaRemoteEndpointFeaturesDescription
|| __TEXT.__text _MRMediaRemoteErrorCodeIsInformational
|| __TEXT.__text _MRMediaRemoteErrorCopyDescription
|| __TEXT.__text _MRMediaRemoteErrorFromCommandStatuses
|| __TEXT.__text _MRMediaRemoteErrorIsInformational
|| __TEXT.__text _MRMediaRemoteFindAndPickRoute
|| __TEXT.__text _MRMediaRemoteFinishedPlaybackInitialization
|| __TEXT.__text _MRMediaRemoteGetActiveOrigin
|| __TEXT.__text _MRMediaRemoteGetActivePlayerPathsForOrigin
|| __TEXT.__text _MRMediaRemoteGetAnyApplicationIsPlaying
|| __TEXT.__text _MRMediaRemoteGetAnyApplicationIsPlayingForOrigin
|| __TEXT.__text _MRMediaRemoteGetAppsSupportingBrowsableContentAPIs
|| __TEXT.__text _MRMediaRemoteGetAvailableOrigins
|| __TEXT.__text _MRMediaRemoteGetBrowsableContentChildItems
|| __TEXT.__text _MRMediaRemoteGetClientProperties
|| __TEXT.__text _MRMediaRemoteGetContentItemsForIdentifiers
|| __TEXT.__text _MRMediaRemoteGetCountOfBrowsableContentChildItems
|| __TEXT.__text _MRMediaRemoteGetDefaultNowPlayingPlayer
|| __TEXT.__text _MRMediaRemoteGetDeviceInfo
|| __TEXT.__text _MRMediaRemoteGetDeviceUIDWithRetryIntervals
|| __TEXT.__text _MRMediaRemoteGetElectedPlayerPath
|| __TEXT.__text _MRMediaRemoteGetExternalScreenType
|| __TEXT.__text _MRMediaRemoteGetIsAirPlayActive
|| __TEXT.__text _MRMediaRemoteGetIsGroupLeader
|| __TEXT.__text _MRMediaRemoteGetLocalDeviceIsGroupLeader
|| __TEXT.__text _MRMediaRemoteGetLocalGroupContainsDiscoverableGroupLeader
|| __TEXT.__text _MRMediaRemoteGetLocalIsProxyGroupPlayer
|| __TEXT.__text _MRMediaRemoteGetLocalNowPlayingClient
|| __TEXT.__text _MRMediaRemoteGetLocalNowPlayingPlayerPath
|| __TEXT.__text _MRMediaRemoteGetLocalOrigin
|| __TEXT.__text _MRMediaRemoteGetLocalReceiverGroupingIdentity
|| __TEXT.__text _MRMediaRemoteGetLocalReceiverPairingIdentity
|| __TEXT.__text _MRMediaRemoteGetLocalVolumeControlCapabilities
|| __TEXT.__text _MRMediaRemoteGetMediaAppIsInstalled
|| __TEXT.__text _MRMediaRemoteGetMediaPlaybackVolume
|| __TEXT.__text _MRMediaRemoteGetNowPlayingApplicationDisplayID
|| __TEXT.__text _MRMediaRemoteGetNowPlayingApplicationDisplayIDForOrigin
|| __TEXT.__text _MRMediaRemoteGetNowPlayingApplicationDisplayName
|| __TEXT.__text _MRMediaRemoteGetNowPlayingApplicationIsPlaying
|| __TEXT.__text _MRMediaRemoteGetNowPlayingApplicationPID
|| __TEXT.__text _MRMediaRemoteGetNowPlayingApplicationPlaybackState
|| __TEXT.__text _MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin
|| __TEXT.__text _MRMediaRemoteGetNowPlayingArtwork
|| __TEXT.__text _MRMediaRemoteGetNowPlayingClient
|| __TEXT.__text _MRMediaRemoteGetNowPlayingClientForOrigin
|| __TEXT.__text _MRMediaRemoteGetNowPlayingClients
|| __TEXT.__text _MRMediaRemoteGetNowPlayingClientsForOrigin
|| __TEXT.__text _MRMediaRemoteGetNowPlayingInfo
|| __TEXT.__text _MRMediaRemoteGetNowPlayingInfoForApp
|| __TEXT.__text _MRMediaRemoteGetNowPlayingInfoForClient
|| __TEXT.__text _MRMediaRemoteGetNowPlayingInfoForOrigin
|| __TEXT.__text _MRMediaRemoteGetNowPlayingInfoForPlayer
|| __TEXT.__text _MRMediaRemoteGetNowPlayingInfoWithOptionalArtwork
|| __TEXT.__text _MRMediaRemoteGetNowPlayingPlayer
|| __TEXT.__text _MRMediaRemoteGetNowPlayingPlayerForClient
|| __TEXT.__text _MRMediaRemoteGetParentGroupContainsDiscoverableGroupLeader
|| __TEXT.__text _MRMediaRemoteGetPickedRouteHasVolumeControl
|| __TEXT.__text _MRMediaRemoteGetPickedRouteHasVolumeControlForOrigin
|| __TEXT.__text _MRMediaRemoteGetPickedRoutedVolumeControlCapabilities
|| __TEXT.__text _MRMediaRemoteGetPictureInPictureStatusForPlayer
|| __TEXT.__text _MRMediaRemoteGetPlaybackStateForClient
|| __TEXT.__text _MRMediaRemoteGetPlaybackStateForPlayer
|| __TEXT.__text _MRMediaRemoteGetPlayerPathForMXSessionIDFromLocalClient
|| __TEXT.__text _MRMediaRemoteGetPlayerProperties
|| __TEXT.__text _MRMediaRemoteGetPlayers
|| __TEXT.__text _MRMediaRemoteGetPlayersForClient
|| __TEXT.__text _MRMediaRemoteGetProxiableSupportedCommandsForPlayer
|| __TEXT.__text _MRMediaRemoteGetReceiverAirPlaySecuritySettings
|| __TEXT.__text _MRMediaRemoteGetSavedAVRoutePassword
|| __TEXT.__text _MRMediaRemoteGetSupportedBrowsableContentAPIs
|| __TEXT.__text _MRMediaRemoteGetSupportedCommands
|| __TEXT.__text _MRMediaRemoteGetSupportedCommandsForApp
|| __TEXT.__text _MRMediaRemoteGetSupportedCommandsForClient
|| __TEXT.__text _MRMediaRemoteGetSupportedCommandsForOrigin
|| __TEXT.__text _MRMediaRemoteGetSupportedCommandsForPlayer
|| __TEXT.__text _MRMediaRemoteGetSyncableSupportedCommandsForPlayer
|| __TEXT.__text _MRMediaRemoteIndexPathCopyDescription
|| __TEXT.__text _MRMediaRemoteInsertSystemAppPlaybackQueue
|| __TEXT.__text _MRMediaRemoteInsertSystemAppPlaybackQueueForApp
|| __TEXT.__text _MRMediaRemoteInsertSystemAppPlaybackQueueForPlayer
|| __TEXT.__text _MRMediaRemoteInsertSystemAppPlaybackQueueWithOptions
|| __TEXT.__text _MRMediaRemoteInvalidateBrowsableContent
|| __TEXT.__text _MRMediaRemoteIsBooksAppInstalled
|| __TEXT.__text _MRMediaRemoteIsMediaAppInstalled
|| __TEXT.__text _MRMediaRemoteIsMusicAppInstalled
|| __TEXT.__text _MRMediaRemoteNowPlayingBless
|| __TEXT.__text _MRMediaRemoteNowPlayingCopyResolvedPlayerPath
|| __TEXT.__text _MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal
|| __TEXT.__text _MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocalSync
|| __TEXT.__text _MRMediaRemoteNowPlayingInfoIsEmpty
|| __TEXT.__text _MRMediaRemoteNowPlayingInfoIsEqual
|| __TEXT.__text _MRMediaRemoteNowPlayingPing
|| __TEXT.__text _MRMediaRemoteNowPlayingPlaybackQueueContentItemsChanged
|| __TEXT.__text _MRMediaRemoteNowPlayingPlayerPathCreateError
|| __TEXT.__text _MRMediaRemoteNowPlayingResolvePlayerPath
|| __TEXT.__text _MRMediaRemoteNowPlayingWakePlayerServiceProcess
|| __TEXT.__text _MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemArtworkCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemArtworkCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemInfoCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemInfoCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemLanguageOptionsCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemLanguageOptionsCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemLyricsCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemLyricsCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemMetadataCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddContentItemMetadataCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreateChildContentItemCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreateChildContentItemCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemForIdentifierCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreateParticipantsCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreateParticipantsCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreatePlaybackQueueForRequestCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceAddCreatePlaybackQueueForRequestCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemChanged
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemChangedForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemChangedWithRequest
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemChangedWithRequestForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemsChanged
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequest
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequestForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceInvalidate
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceInvalidateForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceInvalidateWithNowPlayingContentItemForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceInvalidateWithPlaybackQueueForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceRemoveCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceRemoveCallbackForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceSendContentItemsChangedForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceSetRequestCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceSetTransactionCallback
|| __TEXT.__text _MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList
|| __TEXT.__text _MRMediaRemotePlaybackQueueResetRequestsWithDataForPlayer
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigrate
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigrateEndpointOptionsCopyDescription
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigrateEndpointOptionsGetDefault
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigrateForDevice
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigrateForOrigin
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigrateForOriginWithRequest
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigratePlayerOptionsCopyDescription
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigratePlayerOptionsGetDefault
|| __TEXT.__text _MRMediaRemotePlaybackSessionMigrateWithRequest
|| __TEXT.__text _MRMediaRemotePlaybackSessionRequest
|| __TEXT.__text _MRMediaRemotePlaybackSessionRequestSupportedType
|| __TEXT.__text _MRMediaRemotePlaybackSessionRequestSupportedTypeForOrigin
|| __TEXT.__text _MRMediaRemotePlaybackSessionSetMigrateBeginCallback
|| __TEXT.__text _MRMediaRemotePlaybackSessionSetMigrateBeginCallbackForOrigin
|| __TEXT.__text _MRMediaRemotePlaybackSessionSetMigrateEndCallback
|| __TEXT.__text _MRMediaRemotePlaybackSessionSetMigrateEndCallbackForOrigin
|| __TEXT.__text _MRMediaRemotePlaybackSessionSetRequestCallback
|| __TEXT.__text _MRMediaRemotePlaybackSessionSetRequestCallbackForOrigin
|| __TEXT.__text _MRMediaRemotePlaybackStateIsAdvancing
|| __TEXT.__text _MRMediaRemotePostBrowsableContentNotification
|| __TEXT.__text _MRMediaRemotePostClientNotification
|| __TEXT.__text _MRMediaRemotePostDelayedNotification
|| __TEXT.__text _MRMediaRemotePostOriginClientNotification
|| __TEXT.__text _MRMediaRemotePostPlaybackQueueRequestAsyncContentItemNotifications
|| __TEXT.__text _MRMediaRemotePostPlayerClientNotification
|| __TEXT.__text _MRMediaRemotePresentMediaControlsCommand
|| __TEXT.__text _MRMediaRemotePresentMediaControlsLanguageOptionsCommand
|| __TEXT.__text _MRMediaRemotePrewarmMediaControlsCommand
|| __TEXT.__text _MRMediaRemoteReRegisterCustomOriginWithDeviceInfo
|| __TEXT.__text _MRMediaRemoteRegisterCustomOrigin
|| __TEXT.__text _MRMediaRemoteRegisterCustomOriginWithDeviceInfo
|| __TEXT.__text _MRMediaRemoteRegisterForElapsedTimeChangesWithHandler
|| __TEXT.__text _MRMediaRemoteRegisterForNowPlayingNotifications
|| __TEXT.__text _MRMediaRemoteRegisterForPlaybackSpeedChangesWithHandler
|| __TEXT.__text _MRMediaRemoteRegisterForRepeatModeChangesWithHandler
|| __TEXT.__text _MRMediaRemoteRegisterForShuffleModeChangesWithHandler
|| __TEXT.__text _MRMediaRemoteRegisterWantsSystemAppDidSkipTrackNotifications
|| __TEXT.__text _MRMediaRemoteRemoteSendLyricsEvent
|| __TEXT.__text _MRMediaRemoteRemoteSendLyricsEventForPlayer
|| __TEXT.__text _MRMediaRemoteRemoveClientForOrigin
|| __TEXT.__text _MRMediaRemoteRemoveCommandHandlerBlock
|| __TEXT.__text _MRMediaRemoteRemoveCommandHandlerBlockForOrigin
|| __TEXT.__text _MRMediaRemoteRemoveCommandHandlerBlockForPlayer
|| __TEXT.__text _MRMediaRemoteRemoveCustomOrigin
|| __TEXT.__text _MRMediaRemoteRemovePlayer
|| __TEXT.__text _MRMediaRemoteRemovePlayerPathInvalidationHandler
|| __TEXT.__text _MRMediaRemoteRepeatModeFromProtobuf
|| __TEXT.__text _MRMediaRemoteRepeatModeToProtobuf
|| __TEXT.__text _MRMediaRemoteReportPlaybackError
|| __TEXT.__text _MRMediaRemoteRequestAirPlayGroupUID
|| __TEXT.__text _MRMediaRemoteRequestAudioAmplitudeSamples
|| __TEXT.__text _MRMediaRemoteRequestAudioAmplitudeSamplesForPlayer
|| __TEXT.__text _MRMediaRemoteRequestDeviceUID
|| __TEXT.__text _MRMediaRemoteRequestGroupUID
|| __TEXT.__text _MRMediaRemoteRequestIsGroupLeader
|| __TEXT.__text _MRMediaRemoteRequestNowPlayingPlaybackQueue
|| __TEXT.__text _MRMediaRemoteRequestNowPlayingPlaybackQueueCapabilities
|| __TEXT.__text _MRMediaRemoteRequestNowPlayingPlaybackQueueCapabilitiesForPlayer
|| __TEXT.__text _MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer
|| __TEXT.__text _MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync
|| __TEXT.__text _MRMediaRemoteRequestNowPlayingPlaybackQueueSync
|| __TEXT.__text _MRMediaRemoteRequestPendingCommands
|| __TEXT.__text _MRMediaRemoteRequestPlaybackInitialization
|| __TEXT.__text _MRMediaRemoteRequestSenderDefaultGroupUID
|| __TEXT.__text _MRMediaRemoteRequestVideoThumbnails
|| __TEXT.__text _MRMediaRemoteRequestVideoThumbnailsForPlayer
|| __TEXT.__text _MRMediaRemoteResolveCommandOptions
|| __TEXT.__text _MRMediaRemoteSelectSourceWithID
|| __TEXT.__text _MRMediaRemoteSendCommand
|| __TEXT.__text _MRMediaRemoteSendCommandForOrigin
|| __TEXT.__text _MRMediaRemoteSendCommandForOriginWithReply
|| __TEXT.__text _MRMediaRemoteSendCommandToApp
|| __TEXT.__text _MRMediaRemoteSendCommandToClient
|| __TEXT.__text _MRMediaRemoteSendCommandToPlayer
|| __TEXT.__text _MRMediaRemoteSendCommandToPlayerWithResult
|| __TEXT.__text _MRMediaRemoteSendCommandWithReply
|| __TEXT.__text _MRMediaRemoteSendImplicitCommandsForOptions
|| __TEXT.__text _MRMediaRemoteSendPlaybackSession
|| __TEXT.__text _MRMediaRemoteSendPlaybackSessionMigrateBegin
|| __TEXT.__text _MRMediaRemoteSendPlaybackSessionMigrateEnd
|| __TEXT.__text _MRMediaRemoteSetAVAudioSessionOpaqueSessionIDForPlayer
|| __TEXT.__text _MRMediaRemoteSetActiveOrigin
|| __TEXT.__text _MRMediaRemoteSetAppPlaybackQueue
|| __TEXT.__text _MRMediaRemoteSetAppPlaybackQueueForPlayer
|| __TEXT.__text _MRMediaRemoteSetAppPlaybackQueueWithContext
|| __TEXT.__text _MRMediaRemoteSetApplicationPickedRoutes
|| __TEXT.__text _MRMediaRemoteSetAudioAmplitudeSamplesRequestCallback
|| __TEXT.__text _MRMediaRemoteSetAudioAmplitudeSamplesRequestCallbackForPlayer
|| __TEXT.__text _MRMediaRemoteSetBeginLyricsEventCallback
|| __TEXT.__text _MRMediaRemoteSetBeginLyricsEventCallbackForPlayer
|| __TEXT.__text _MRMediaRemoteSetBrowsableContentEndpoint
|| __TEXT.__text _MRMediaRemoteSetCanBeNowPlayingApplication
|| __TEXT.__text _MRMediaRemoteSetCanBeNowPlayingForPlayer
|| __TEXT.__text _MRMediaRemoteSetClientProperties
|| __TEXT.__text _MRMediaRemoteSetCommandHandler
|| __TEXT.__text _MRMediaRemoteSetCommandHandlerBlock
|| __TEXT.__text _MRMediaRemoteSetCommandHandlerBlockForOrigin
|| __TEXT.__text _MRMediaRemoteSetCommandHandlerBlockForPlayer
|| __TEXT.__text _MRMediaRemoteSetCommandHandlerCallback
|| __TEXT.__text _MRMediaRemoteSetCommandHandlerCallbackForOrigin
|| __TEXT.__text _MRMediaRemoteSetDefaultSupportedCommands
|| __TEXT.__text _MRMediaRemoteSetDefaultSupportedCommandsForClient
|| __TEXT.__text _MRMediaRemoteSetDisplayNameForClient
|| __TEXT.__text _MRMediaRemoteSetElapsedTime
|| __TEXT.__text _MRMediaRemoteSetEndLyricsEventCallback
|| __TEXT.__text _MRMediaRemoteSetEndLyricsEventCallbackForPlayer
|| __TEXT.__text _MRMediaRemoteSetHardwareRemoteBehavior
|| __TEXT.__text _MRMediaRemoteSetMXSessionIDForPlayer
|| __TEXT.__text _MRMediaRemoteSetMediaPlaybackVolume
|| __TEXT.__text _MRMediaRemoteSetNearbyDevice
|| __TEXT.__text _MRMediaRemoteSetNowPlayingApplicationOverrideEnabled
|| __TEXT.__text _MRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin
|| __TEXT.__text _MRMediaRemoteSetNowPlayingClientForOrigin
|| __TEXT.__text _MRMediaRemoteSetNowPlayingInfo
|| __TEXT.__text _MRMediaRemoteSetNowPlayingInfoForOrigin
|| __TEXT.__text _MRMediaRemoteSetNowPlayingInfoForOriginWithMergePolicy
|| __TEXT.__text _MRMediaRemoteSetNowPlayingInfoForPlayer
|| __TEXT.__text _MRMediaRemoteSetNowPlayingInfoWithMergePolicy
|| __TEXT.__text _MRMediaRemoteSetNowPlayingPlayer
|| __TEXT.__text _MRMediaRemoteSetNowPlayingPlayerIfPossible
|| __TEXT.__text _MRMediaRemoteSetNowPlayingTintColor
|| __TEXT.__text _MRMediaRemoteSetNowPlayingVisibility
|| __TEXT.__text _MRMediaRemoteSetOverriddenNowPlayingApplication
|| __TEXT.__text _MRMediaRemoteSetParentApplication
|| __TEXT.__text _MRMediaRemoteSetPickedRouteHasVolumeControlForOrigin
|| __TEXT.__text _MRMediaRemoteSetPickedRouteVolumeControlCapabilities
|| __TEXT.__text _MRMediaRemoteSetPickedRouteWithPassword
|| __TEXT.__text _MRMediaRemoteSetPickedRouteWithPasswordAndOptions
|| __TEXT.__text _MRMediaRemoteSetPictureInPictureStatusForPlayer
|| __TEXT.__text _MRMediaRemoteSetPlaybackQueue
|| __TEXT.__text _MRMediaRemoteSetPlaybackQueueCapabilities
|| __TEXT.__text _MRMediaRemoteSetPlaybackSpeed
|| __TEXT.__text _MRMediaRemoteSetPlaybackStateForClient
|| __TEXT.__text _MRMediaRemoteSetPlaybackStateForPlayer
|| __TEXT.__text _MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp
|| __TEXT.__text _MRMediaRemoteSetPlayerProperties
|| __TEXT.__text _MRMediaRemoteSetRepeatMode
|| __TEXT.__text _MRMediaRemoteSetRouteDiscoveryMode
|| __TEXT.__text _MRMediaRemoteSetSavedAVRoutePassword
|| __TEXT.__text _MRMediaRemoteSetShuffleMode
|| __TEXT.__text _MRMediaRemoteSetSupportedBrowsableContentAPIs
|| __TEXT.__text _MRMediaRemoteSetSupportedCommands
|| __TEXT.__text _MRMediaRemoteSetSupportedCommandsForClient
|| __TEXT.__text _MRMediaRemoteSetSupportedCommandsForPlayer
|| __TEXT.__text _MRMediaRemoteSetSystemAppPlaybackQueue
|| __TEXT.__text _MRMediaRemoteSetSystemAppPlaybackQueueWithContext
|| __TEXT.__text _MRMediaRemoteSetVideoThumbnailsRequestCallback
|| __TEXT.__text _MRMediaRemoteSetVideoThumbnailsRequestCallbackForPlayer
|| __TEXT.__text _MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications
|| __TEXT.__text _MRMediaRemoteSetWantsNowPlayingNotifications
|| __TEXT.__text _MRMediaRemoteSetWantsOriginChangeNotifications
|| __TEXT.__text _MRMediaRemoteSetWantsPlaybackErrorNotifications
|| __TEXT.__text _MRMediaRemoteSetWantsRouteChangeNotifications
|| __TEXT.__text _MRMediaRemoteSetWantsSupportedCommandsChangedNotifications
|| __TEXT.__text _MRMediaRemoteSetWantsVolumeControlNotifications
|| __TEXT.__text _MRMediaRemoteSetWantsWakingNowPlayingNotifications
|| __TEXT.__text _MRMediaRemoteShouldWakeSystemForCommand
|| __TEXT.__text _MRMediaRemoteShuffleModeFromProtobuf
|| __TEXT.__text _MRMediaRemoteShuffleModeToProtobuf
|| __TEXT.__text _MRMediaRemoteSupportedCommandsCreateExternalRepresentation
|| __TEXT.__text _MRMediaRemoteSupportedCommandsCreateFromExternalRepresentation
|| __TEXT.__text _MRMediaRemoteSupportedCommandsHaveChanged
|| __TEXT.__text _MRMediaRemoteSupportedCommandsHaveChangedForOrigin
|| __TEXT.__text _MRMediaRemoteSupportsCommand
|| __TEXT.__text _MRMediaRemoteSyncClientProperties
|| __TEXT.__text _MRMediaRemoteSystemMediaApplicationIsRunning
|| __TEXT.__text _MRMediaRemoteSystemMediaApplicationWake
|| __TEXT.__text _MRMediaRemoteUnpickAirPlayAVRoutes
|| __TEXT.__text _MRMediaRemoteUnregisterForElapsedTimeChanges
|| __TEXT.__text _MRMediaRemoteUnregisterForNowPlayingNotifications
|| __TEXT.__text _MRMediaRemoteUnregisterForPlaybackSpeedChanges
|| __TEXT.__text _MRMediaRemoteUnregisterForRepeatModeChanges
|| __TEXT.__text _MRMediaRemoteUnregisterForShuffleModeChanges
|| __TEXT.__text _MRMediaRemoteUpdateBrowsableContentItems
|| __TEXT.__text _MRMediaRemoteUpdateClientProperties
|| __TEXT.__text _MRMediaRemoteUpdateDeviceInfo
|| __TEXT.__text _MRMediaRemoteUpdateNowPlayingIdentifiers
|| __TEXT.__text _MRMediaRemoteUpdatePlayerProperties
|| __TEXT.__text _MRMediaRemoteValidateIncomingCommandOptions
|| __TEXT.__text _MRMediaRemoteValidateOutgoingCommandOptions
|| __TEXT.__text _MRNotificationServiceClientPostNotificationCallback
|| __TEXT.__text _MRNowPlayingArtworkCopyIOSurface
|| __TEXT.__text _MRNowPlayingArtworkCopyImageData
|| __TEXT.__text _MRNowPlayingArtworkCreateWithImageData
|| __TEXT.__text _MRNowPlayingArtworkGetType
|| __TEXT.__text _MRNowPlayingBestAvailableAudioFormatDescription
|| __TEXT.__text _MRNowPlayingClientAppendBundleIdentifier
|| __TEXT.__text _MRNowPlayingClientCopy
|| __TEXT.__text _MRNowPlayingClientCopyAppIconURL
|| __TEXT.__text _MRNowPlayingClientCopyBundleIdentifierExtendedHierarchy
|| __TEXT.__text _MRNowPlayingClientCopyBundleIdentifierHierarchy
|| __TEXT.__text _MRNowPlayingClientCreate
|| __TEXT.__text _MRNowPlayingClientCreateExternalRepresentation
|| __TEXT.__text _MRNowPlayingClientCreateFromExternalRepresentation
|| __TEXT.__text _MRNowPlayingClientCreateSkeletonFrom
|| __TEXT.__text _MRNowPlayingClientEqualToClient
|| __TEXT.__text _MRNowPlayingClientGetBundleIdentifier
|| __TEXT.__text _MRNowPlayingClientGetDisplayName
|| __TEXT.__text _MRNowPlayingClientGetHasAuxillaryProperties
|| __TEXT.__text _MRNowPlayingClientGetNowPlayingVisibility
|| __TEXT.__text _MRNowPlayingClientGetParentAppBundleIdentifier
|| __TEXT.__text _MRNowPlayingClientGetProcessIdentifier
|| __TEXT.__text _MRNowPlayingClientGetTintColor
|| __TEXT.__text _MRNowPlayingClientGetUserIdentifier
|| __TEXT.__text _MRNowPlayingClientHasPlaceholder
|| __TEXT.__text _MRNowPlayingClientMerge
|| __TEXT.__text _MRNowPlayingClientSetAppIconURL
|| __TEXT.__text _MRNowPlayingClientSetBundleIdentifier
|| __TEXT.__text _MRNowPlayingClientSetDisplayName
|| __TEXT.__text _MRNowPlayingClientSetNowPlayingVisibility
|| __TEXT.__text _MRNowPlayingClientSetParentAppBundleIdentifier
|| __TEXT.__text _MRNowPlayingClientSetProcessIdentifier
|| __TEXT.__text _MRNowPlayingClientSetTintColor
|| __TEXT.__text _MRNowPlayingClientSetUserIdentifier
|| __TEXT.__text _MRNowPlayingPlayerAudioSessionTypeCopyDescription
|| __TEXT.__text _MRNowPlayingPlayerCopy
|| __TEXT.__text _MRNowPlayingPlayerCreate
|| __TEXT.__text _MRNowPlayingPlayerCreateExternalRepresentation
|| __TEXT.__text _MRNowPlayingPlayerCreateFromExternalRepresentation
|| __TEXT.__text _MRNowPlayingPlayerCreateSkeletonFrom
|| __TEXT.__text _MRNowPlayingPlayerEqualToPlayer
|| __TEXT.__text _MRNowPlayingPlayerGetAudioSessionType
|| __TEXT.__text _MRNowPlayingPlayerGetDisplayName
|| __TEXT.__text _MRNowPlayingPlayerGetHasAuxillaryProperties
|| __TEXT.__text _MRNowPlayingPlayerGetIdentifier
|| __TEXT.__text _MRNowPlayingPlayerMerge
|| __TEXT.__text _MRNowPlayingPlayerPathClientEqualToPlayerPathClient
|| __TEXT.__text _MRNowPlayingPlayerPathCopy
|| __TEXT.__text _MRNowPlayingPlayerPathCopyStringRepresentation
|| __TEXT.__text _MRNowPlayingPlayerPathCreate
|| __TEXT.__text _MRNowPlayingPlayerPathCreateExternalRepresentation
|| __TEXT.__text _MRNowPlayingPlayerPathCreateFromExternalRepresentation
|| __TEXT.__text _MRNowPlayingPlayerPathCreateSkeletonFrom
|| __TEXT.__text _MRNowPlayingPlayerPathEqualToPlayerPath
|| __TEXT.__text _MRNowPlayingPlayerPathGetClient
|| __TEXT.__text _MRNowPlayingPlayerPathGetIsResolved
|| __TEXT.__text _MRNowPlayingPlayerPathGetIsSystemMediaApplication
|| __TEXT.__text _MRNowPlayingPlayerPathGetOrigin
|| __TEXT.__text _MRNowPlayingPlayerPathGetPlayer
|| __TEXT.__text _MRNowPlayingPlayerPathIsLocal
|| __TEXT.__text _MRNowPlayingPlayerPathResolveExternalDevicePlayerPath
|| __TEXT.__text _MRNowPlayingPlayerPathSetClient
|| __TEXT.__text _MRNowPlayingPlayerPathSetOrigin
|| __TEXT.__text _MRNowPlayingPlayerPathSetPlayer
|| __TEXT.__text _MRNowPlayingPlayerSetAudioSessionType
|| __TEXT.__text _MRNowPlayingPlayerSetDisplayName
|| __TEXT.__text _MRNowPlayingPlayerSetIdentifier
|| __TEXT.__text _MRNowPlayingSessionManagerDataSourceGenerateSetGeneratePlayerIDCallback
|| __TEXT.__text _MRNowPlayingSessionManagerDataSourceSetCreatePlayerCallback
|| __TEXT.__text _MRNowPlayingSessionManagerDataSourceSetDestroyPlayerCallback
|| __TEXT.__text _MRNowPlayingSessionManagerIsSilentPrimary
|| __TEXT.__text _MRNowPlayingSessionManagerLocalDeviceRoutingContextID
|| __TEXT.__text _MRNowPlayingSessionManagerStartSession
|| __TEXT.__text _MRNowPlayingSessionManagerStopSession
|| __TEXT.__text _MROriginCopy
|| __TEXT.__text _MROriginCreateExternalRepresentation
|| __TEXT.__text _MROriginCreateFromExternalRepresentation
|| __TEXT.__text _MROriginCreateSkeletonFrom
|| __TEXT.__text _MROriginEqualToOrigin
|| __TEXT.__text _MROriginGetDisplayName
|| __TEXT.__text _MROriginGetOriginType
|| __TEXT.__text _MROriginGetUniqueIdentifier
|| __TEXT.__text _MROriginIsLocalOrigin
|| __TEXT.__text _MROutputDeviceIsAVOutputDeviceLocal
|| __TEXT.__text _MRPairedDeviceCopyAirPlayReceivers
|| __TEXT.__text _MRPairedDeviceCopyBluetoothAddress
|| __TEXT.__text _MRPairedDeviceCopyBuildVersion
|| __TEXT.__text _MRPairedDeviceCopyBundleIdentifier
|| __TEXT.__text _MRPairedDeviceCopyBundleVersion
|| __TEXT.__text _MRPairedDeviceCopyDeltaDescription
|| __TEXT.__text _MRPairedDeviceCopyDeltaMinimalDescription
|| __TEXT.__text _MRPairedDeviceCopyDescription
|| __TEXT.__text _MRPairedDeviceCopyDeviceUID
|| __TEXT.__text _MRPairedDeviceCopyGroupName
|| __TEXT.__text _MRPairedDeviceCopyGroupUID
|| __TEXT.__text _MRPairedDeviceCopyGroupedDevices
|| __TEXT.__text _MRPairedDeviceCopyIdentifier
|| __TEXT.__text _MRPairedDeviceCopyLinkAgent
|| __TEXT.__text _MRPairedDeviceCopyLocalReceiverPairingIdentity
|| __TEXT.__text _MRPairedDeviceCopyLocalizedModelName
|| __TEXT.__text _MRPairedDeviceCopyManagedConfigDeviceID
|| __TEXT.__text _MRPairedDeviceCopyMinimalDescription
|| __TEXT.__text _MRPairedDeviceCopyName
|| __TEXT.__text _MRPairedDeviceCopySenderDefaultGroupUID
|| __TEXT.__text _MRPairedDeviceCopySystemMediaApplication
|| __TEXT.__text _MRPairedDeviceCopyTightSyncUID
|| __TEXT.__text _MRPairedDeviceCreate
|| __TEXT.__text _MRPairedDeviceCreateCopy
|| __TEXT.__text _MRPairedDeviceCreateExternalRepresentation
|| __TEXT.__text _MRPairedDeviceCreateFromExternalRepresentation
|| __TEXT.__text _MRPairedDeviceCreateSkeletonFrom
|| __TEXT.__text _MRPairedDeviceEqualToPairedDevice
|| __TEXT.__text _MRPairedDeviceGetDeviceClass
|| __TEXT.__text _MRPairedDeviceGetGroupLogicalDeviceCount
|| __TEXT.__text _MRPairedDeviceGetIsAirPlayActive
|| __TEXT.__text _MRPairedDeviceGetIsGroupLeader
|| __TEXT.__text _MRPairedDeviceGetProtocolVersion
|| __TEXT.__text _MRPairedDeviceGetSharedQueueVersion
|| __TEXT.__text _MRPairedDeviceIsConnected
|| __TEXT.__text _MRPairedDeviceIsPairingAllowed
|| __TEXT.__text _MRPairedDeviceIsProxyGroupPlayer
|| __TEXT.__text _MRPairedDeviceIsTightlySyncedGroup
|| __TEXT.__text _MRPairedDeviceMerge
|| __TEXT.__text _MRPairedDeviceSetAirPlayReceivers
|| __TEXT.__text _MRPairedDeviceSetBluetoothAddress
|| __TEXT.__text _MRPairedDeviceSetBuildVersion
|| __TEXT.__text _MRPairedDeviceSetBundleIdentifier
|| __TEXT.__text _MRPairedDeviceSetBundleVersion
|| __TEXT.__text _MRPairedDeviceSetDeviceClass
|| __TEXT.__text _MRPairedDeviceSetDeviceUID
|| __TEXT.__text _MRPairedDeviceSetGroupLogicalDeviceCount
|| __TEXT.__text _MRPairedDeviceSetGroupName
|| __TEXT.__text _MRPairedDeviceSetGroupUID
|| __TEXT.__text _MRPairedDeviceSetGroupedDevices
|| __TEXT.__text _MRPairedDeviceSetIdentifier
|| __TEXT.__text _MRPairedDeviceSetIsAirPlayActive
|| __TEXT.__text _MRPairedDeviceSetIsConnected
|| __TEXT.__text _MRPairedDeviceSetIsGroupLeader
|| __TEXT.__text _MRPairedDeviceSetIsPairingAllowed
|| __TEXT.__text _MRPairedDeviceSetIsProxyGroupPlayer
|| __TEXT.__text _MRPairedDeviceSetLocalizedModelName
|| __TEXT.__text _MRPairedDeviceSetManagedConfigDeviceID
|| __TEXT.__text _MRPairedDeviceSetName
|| __TEXT.__text _MRPairedDeviceSetProtocolVersion
|| __TEXT.__text _MRPairedDeviceSetSenderDefaultGroupUID
|| __TEXT.__text _MRPairedDeviceSetSharedQueueVersion
|| __TEXT.__text _MRPairedDeviceSetSupportsACL
|| __TEXT.__text _MRPairedDeviceSetSupportsExtendedMotion
|| __TEXT.__text _MRPairedDeviceSetSupportsSharedQueue
|| __TEXT.__text _MRPairedDeviceSetSupportsSystemPairing
|| __TEXT.__text _MRPairedDeviceSetSystemMediaApplication
|| __TEXT.__text _MRPairedDeviceSetSystemPodcastApplication
|| __TEXT.__text _MRPairedDeviceSetTightSyncUID
|| __TEXT.__text _MRPairedDeviceSupportsACL
|| __TEXT.__text _MRPairedDeviceSupportsExtendedMotion
|| __TEXT.__text _MRPairedDeviceSupportsSharedQueue
|| __TEXT.__text _MRPairedDeviceSupportsSystemPairing
|| __TEXT.__text _MRPairedDevicesCopyDescription
|| __TEXT.__text _MRPairedDevicesCopyMinimalDescription
|| __TEXT.__text _MRPairedDevicesCreateExternalRepresentation
|| __TEXT.__text _MRPairedDevicesCreateFromExternalRepresentation
|| __TEXT.__text _MRPerformAsyncOperationsUntilError
|| __TEXT.__text _MRPlaybackQueueCapabilitiesCopyDescription
|| __TEXT.__text _MRPlaybackQueueCapabilitiesCreateExternalRepresentation
|| __TEXT.__text _MRPlaybackQueueCapabilitiesFromExternalRepresentation
|| __TEXT.__text _MRPlaybackQueueCopy
|| __TEXT.__text _MRPlaybackQueueCopyContentItemIdentifiers
|| __TEXT.__text _MRPlaybackQueueCopyContentItems
|| __TEXT.__text _MRPlaybackQueueCopyMinimalReadableDescription
|| __TEXT.__text _MRPlaybackQueueCopyReadableDescription
|| __TEXT.__text _MRPlaybackQueueCreate
|| __TEXT.__text _MRPlaybackQueueCreateEmpty
|| __TEXT.__text _MRPlaybackQueueCreateExternalRepresentation
|| __TEXT.__text _MRPlaybackQueueCreateFromCache
|| __TEXT.__text _MRPlaybackQueueCreateFromExternalRepresentation
|| __TEXT.__text _MRPlaybackQueueCreateFromNowPlayingInfo
|| __TEXT.__text _MRPlaybackQueueCreateFromRequest
|| __TEXT.__text _MRPlaybackQueueCreateWithContentItem
|| __TEXT.__text _MRPlaybackQueueCreateWithContentItems
|| __TEXT.__text _MRPlaybackQueueCreateWithNowPlayingContentItem
|| __TEXT.__text _MRPlaybackQueueGetContentItemAtOffset
|| __TEXT.__text _MRPlaybackQueueGetContentItemForIdentifier
|| __TEXT.__text _MRPlaybackQueueGetContentItemsCount
|| __TEXT.__text _MRPlaybackQueueGetQueueID
|| __TEXT.__text _MRPlaybackQueueGetRange
|| __TEXT.__text _MRPlaybackQueueGetRequestID
|| __TEXT.__text _MRPlaybackQueueGetResolvedPlayerPath
|| __TEXT.__text _MRPlaybackQueueHasRange
|| __TEXT.__text _MRPlaybackQueueQueueIsEqualToPlaybackQueue
|| __TEXT.__text _MRPlaybackQueueRequestContainsNonDefaultAssets
|| __TEXT.__text _MRPlaybackQueueRequestCopy
|| __TEXT.__text _MRPlaybackQueueRequestCopyDescription
|| __TEXT.__text _MRPlaybackQueueRequestCopyWithCurrentState
|| __TEXT.__text _MRPlaybackQueueRequestCopyWithRange
|| __TEXT.__text _MRPlaybackQueueRequestCreate
|| __TEXT.__text _MRPlaybackQueueRequestCreateAssetsFrom
|| __TEXT.__text _MRPlaybackQueueRequestCreateDefault
|| __TEXT.__text _MRPlaybackQueueRequestCreateDefaultWithRange
|| __TEXT.__text _MRPlaybackQueueRequestCreateExternalRepresentation
|| __TEXT.__text _MRPlaybackQueueRequestCreateFromExternalRepresentation
|| __TEXT.__text _MRPlaybackQueueRequestCreateFromTransactionName
|| __TEXT.__text _MRPlaybackQueueRequestCreateMergedRequest
|| __TEXT.__text _MRPlaybackQueueRequestCreateSkeletonFrom
|| __TEXT.__text _MRPlaybackQueueRequestCreateWithCurrentState
|| __TEXT.__text _MRPlaybackQueueRequestCreateWithIdentifiers
|| __TEXT.__text _MRPlaybackQueueRequestGetArtworkHeight
|| __TEXT.__text _MRPlaybackQueueRequestGetArtworkWidth
|| __TEXT.__text _MRPlaybackQueueRequestGetCachingPolicy
|| __TEXT.__text _MRPlaybackQueueRequestGetIncludeArtwork
|| __TEXT.__text _MRPlaybackQueueRequestGetIncludeInfo
|| __TEXT.__text _MRPlaybackQueueRequestGetIncludeLanguageOptions
|| __TEXT.__text _MRPlaybackQueueRequestGetIncludeLyrics
|| __TEXT.__text _MRPlaybackQueueRequestGetIncludeMetadata
|| __TEXT.__text _MRPlaybackQueueRequestGetIncludeSections
|| __TEXT.__text _MRPlaybackQueueRequestGetIsLegacyNowPlayingInfoRequest
|| __TEXT.__text _MRPlaybackQueueRequestGetLabel
|| __TEXT.__text _MRPlaybackQueueRequestGetRange
|| __TEXT.__text _MRPlaybackQueueRequestGetRequestID
|| __TEXT.__text _MRPlaybackQueueRequestGetRequestedIdentifiers
|| __TEXT.__text _MRPlaybackQueueRequestGetReturnContentItemAssetsInUserCompletion
|| __TEXT.__text _MRPlaybackQueueRequestHasRange
|| __TEXT.__text _MRPlaybackQueueRequestIsExactMatch
|| __TEXT.__text _MRPlaybackQueueRequestMatch
|| __TEXT.__text _MRPlaybackQueueRequestMerge
|| __TEXT.__text _MRPlaybackQueueRequestRangeContainsNowPlayingItem
|| __TEXT.__text _MRPlaybackQueueRequestSetCachingPolicy
|| __TEXT.__text _MRPlaybackQueueRequestSetIdentifiers
|| __TEXT.__text _MRPlaybackQueueRequestSetIncludeArtwork
|| __TEXT.__text _MRPlaybackQueueRequestSetIncludeInfo
|| __TEXT.__text _MRPlaybackQueueRequestSetIncludeLanguageOptions
|| __TEXT.__text _MRPlaybackQueueRequestSetIncludeLyrics
|| __TEXT.__text _MRPlaybackQueueRequestSetIncludeMetadata
|| __TEXT.__text _MRPlaybackQueueRequestSetIncludeSections
|| __TEXT.__text _MRPlaybackQueueRequestSetIsLegacyNowPlayingInfoRequest
|| __TEXT.__text _MRPlaybackQueueRequestSetLabel
|| __TEXT.__text _MRPlaybackQueueRequestSetRequestID
|| __TEXT.__text _MRPlaybackQueueRequestSetReturnContentItemAssetsInUserCompletion
|| __TEXT.__text _MRPlaybackQueueRequestShouldRequestItem
|| __TEXT.__text _MRPlaybackQueueRequestShouldRequestItemNotConsideringMetadata
|| __TEXT.__text _MRPlaybackQueueSetQueueID
|| __TEXT.__text _MRPlaybackQueueSetRequestID
|| __TEXT.__text _MRPlaybackQueueSetResolvedPlayerPath
|| __TEXT.__text _MRPlaybackSessionCopyIdentifier
|| __TEXT.__text _MRPlaybackSessionCopyPlaybackSessionData
|| __TEXT.__text _MRPlaybackSessionCopyType
|| __TEXT.__text _MRPlaybackSessionCreate
|| __TEXT.__text _MRPlaybackSessionCreateExternalRepresentation
|| __TEXT.__text _MRPlaybackSessionCreateFromExternalRepresentation
|| __TEXT.__text _MRPlaybackSessionMigrateCopyCorrespondingPlayerPath
|| __TEXT.__text _MRPlaybackSessionMigrateCopyCurrentTypes
|| __TEXT.__text _MRPlaybackSessionMigrateCopySupportedTypeMatch
|| __TEXT.__text _MRPlaybackSessionMigrateCopySupportedTypes
|| __TEXT.__text _MRPlaybackSessionMigrateFallbackReasonFromMRMediaRemoteError
|| __TEXT.__text _MRPlaybackSessionRequestCopyDescription
|| __TEXT.__text _MRPlaybackSessionRequestCopyIdentifier
|| __TEXT.__text _MRPlaybackSessionRequestCopyRequestID
|| __TEXT.__text _MRPlaybackSessionRequestCopyType
|| __TEXT.__text _MRPlaybackSessionRequestCreate
|| __TEXT.__text _MRPlaybackSessionRequestCreateExternalRepresentation
|| __TEXT.__text _MRPlaybackSessionRequestCreateFromExternalRepresentation
|| __TEXT.__text _MRProcessIsMediaRemoteDaemon
|| __TEXT.__text _MRProcessIsMediaServerDaemon
|| __TEXT.__text _MRProtobufFromConnectionState
|| __TEXT.__text _MRProtobufFromGameControllerInputMode
|| __TEXT.__text _MRProtobufFromGameControllerProfile
|| __TEXT.__text _MRProtobufFromSendCommandAppOptions
|| __TEXT.__text _MRRegisterTransaction
|| __TEXT.__text _MRSendCommandAppOptionsFromProtobuf
|| __TEXT.__text _MRServiceClientRemoteCommandCallback
|| __TEXT.__text _MRServiceClientRemotePlayerPathCommandCallback
|| __TEXT.__text _MRShouldUseLegacyMusicApplicationAsSystemMediaApp
|| __TEXT.__text _MRSupportsMediaControlReceiver
|| __TEXT.__text _MRSwizzleClassMethod
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyCustomData
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyCustomDataIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyDescription
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyFeatureName
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyGenericTrackIdentifiers
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyGeniusSeedTrack
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyRadioStationStringIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyTracklistStoreIDs
|| __TEXT.__text _MRSystemAppPlaybackQueueCopyTypeDescription
|| __TEXT.__text _MRSystemAppPlaybackQueueCreate
|| __TEXT.__text _MRSystemAppPlaybackQueueCreateExternalRepresentation
|| __TEXT.__text _MRSystemAppPlaybackQueueCreateFromExternalRepresentation
|| __TEXT.__text _MRSystemAppPlaybackQueueDestroy
|| __TEXT.__text _MRSystemAppPlaybackQueueGetFirstItemGenericTrackIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueGetLocalQueryData
|| __TEXT.__text _MRSystemAppPlaybackQueueGetLocalQueryEncodingType
|| __TEXT.__text _MRSystemAppPlaybackQueueGetLocalQueryFirstItemMultiverseIDData
|| __TEXT.__text _MRSystemAppPlaybackQueueGetLocalQueryFirstItemPID
|| __TEXT.__text _MRSystemAppPlaybackQueueGetLocalQueryRepeatMode
|| __TEXT.__text _MRSystemAppPlaybackQueueGetLocalQueryShuffleMode
|| __TEXT.__text _MRSystemAppPlaybackQueueGetRadioStationIDType
|| __TEXT.__text _MRSystemAppPlaybackQueueGetRadioStationIntegerPID
|| __TEXT.__text _MRSystemAppPlaybackQueueGetReplaceIntent
|| __TEXT.__text _MRSystemAppPlaybackQueueGetSiriAssetInfo
|| __TEXT.__text _MRSystemAppPlaybackQueueGetSiriRecommendationIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueGetSiriWHAMetricsInfo
|| __TEXT.__text _MRSystemAppPlaybackQueueGetTracklistCollectionIdentifierSetData
|| __TEXT.__text _MRSystemAppPlaybackQueueGetTracklistRepeatMode
|| __TEXT.__text _MRSystemAppPlaybackQueueGetTracklistShuffleMode
|| __TEXT.__text _MRSystemAppPlaybackQueueGetType
|| __TEXT.__text _MRSystemAppPlaybackQueueGetUserInfo
|| __TEXT.__text _MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback
|| __TEXT.__text _MRSystemAppPlaybackQueueIsRequestingImmediatePlayback
|| __TEXT.__text _MRSystemAppPlaybackQueueSetCustomData
|| __TEXT.__text _MRSystemAppPlaybackQueueSetCustomDataIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueSetFeatureName
|| __TEXT.__text _MRSystemAppPlaybackQueueSetFirstItemGenericTrackIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueSetGenericTrackIdentifiers
|| __TEXT.__text _MRSystemAppPlaybackQueueSetGeniusSeedTrack
|| __TEXT.__text _MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback
|| __TEXT.__text _MRSystemAppPlaybackQueueSetLocalQueryData
|| __TEXT.__text _MRSystemAppPlaybackQueueSetLocalQueryFirstItemMultiverseIDData
|| __TEXT.__text _MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID
|| __TEXT.__text _MRSystemAppPlaybackQueueSetLocalQueryRepeatMode
|| __TEXT.__text _MRSystemAppPlaybackQueueSetLocalQueryShuffleMode
|| __TEXT.__text _MRSystemAppPlaybackQueueSetRadioStationIDType
|| __TEXT.__text _MRSystemAppPlaybackQueueSetRadioStationIntegerPID
|| __TEXT.__text _MRSystemAppPlaybackQueueSetRadioStationStringIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueSetReplaceIntent
|| __TEXT.__text _MRSystemAppPlaybackQueueSetShouldOverrideManuallyCuratedQueue
|| __TEXT.__text _MRSystemAppPlaybackQueueSetSiriAssetInfo
|| __TEXT.__text _MRSystemAppPlaybackQueueSetSiriRecommendationIdentifier
|| __TEXT.__text _MRSystemAppPlaybackQueueSetSiriWHAMetricsInfo
|| __TEXT.__text _MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData
|| __TEXT.__text _MRSystemAppPlaybackQueueSetTracklistRepeatMode
|| __TEXT.__text _MRSystemAppPlaybackQueueSetTracklistShuffleMode
|| __TEXT.__text _MRSystemAppPlaybackQueueSetTracklistStoreIDs
|| __TEXT.__text _MRSystemAppPlaybackQueueSetUserInfo
|| __TEXT.__text _MRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueue
|| __TEXT.__text _MRTelevisionConnect
|| __TEXT.__text _MRTelevisionControllerBeginDiscovery
|| __TEXT.__text _MRTelevisionControllerCreate
|| __TEXT.__text _MRTelevisionControllerEndDiscovery
|| __TEXT.__text _MRTelevisionControllerIsDiscoveringDevices
|| __TEXT.__text _MRTelevisionControllerSetDiscoveryCallback
|| __TEXT.__text _MRTelevisionControllerSetRemovalCallback
|| __TEXT.__text _MRTelevisionCopyCustomOrigin
|| __TEXT.__text _MRTelevisionCopyHostName
|| __TEXT.__text _MRTelevisionCopyName
|| __TEXT.__text _MRTelevisionCopySystemBuildVersion
|| __TEXT.__text _MRTelevisionCopyUniqueIdentifier
|| __TEXT.__text _MRTelevisionDeletePairedDevice
|| __TEXT.__text _MRTelevisionDisconnect
|| __TEXT.__text _MRTelevisionGetConnectionState
|| __TEXT.__text _MRTelevisionGetCurrentRTISourceSession
|| __TEXT.__text _MRTelevisionGetCurrentTextEditingSession
|| __TEXT.__text _MRTelevisionGetGameControllerInputMode
|| __TEXT.__text _MRTelevisionGetHiliteMode
|| __TEXT.__text _MRTelevisionGetNetworkPort
|| __TEXT.__text _MRTelevisionGetPairedTelevisions
|| __TEXT.__text _MRTelevisionGetVoiceRecordingState
|| __TEXT.__text _MRTelevisionIsConnected
|| __TEXT.__text _MRTelevisionIsPaired
|| __TEXT.__text _MRTelevisionIsPairingAllowed
|| __TEXT.__text _MRTelevisionPing
|| __TEXT.__text _MRTelevisionProcessVirtualVoiceInputAudioData
|| __TEXT.__text _MRTelevisionRegisterGameController
|| __TEXT.__text _MRTelevisionRegisterGameControllerWithProperties
|| __TEXT.__text _MRTelevisionRegisterVirtualTouchDevice
|| __TEXT.__text _MRTelevisionRegisterVirtualVoiceInputDevice
|| __TEXT.__text _MRTelevisionRequestHiliteModeExit
|| __TEXT.__text _MRTelevisionSendButtonEvent
|| __TEXT.__text _MRTelevisionSendCustomData
|| __TEXT.__text _MRTelevisionSendGameControllerEvent
|| __TEXT.__text _MRTelevisionSendGameControllerEventV2
|| __TEXT.__text _MRTelevisionSendHIDEvent
|| __TEXT.__text _MRTelevisionSendVirtualTouchEvent
|| __TEXT.__text _MRTelevisionServiceDeletePairedDevice
|| __TEXT.__text _MRTelevisionServiceDeletePairingIdentity
|| __TEXT.__text _MRTelevisionServiceGetEndpoint
|| __TEXT.__text _MRTelevisionServiceGetPairedDevices
|| __TEXT.__text _MRTelevisionServiceSendCustomData
|| __TEXT.__text _MRTelevisionServiceSetCustomDataCallback
|| __TEXT.__text _MRTelevisionServiceSetEndpoint
|| __TEXT.__text _MRTelevisionServiceSetMessageLogging
|| __TEXT.__text _MRTelevisionSetConnectionStateCallback
|| __TEXT.__text _MRTelevisionSetCustomDataCallback
|| __TEXT.__text _MRTelevisionSetGameControllerInputModeCallback
|| __TEXT.__text _MRTelevisionSetGameControllerPropertiesCallback
|| __TEXT.__text _MRTelevisionSetHiliteModeCallback
|| __TEXT.__text _MRTelevisionSetName
|| __TEXT.__text _MRTelevisionSetNameCallback
|| __TEXT.__text _MRTelevisionSetPairingAllowedCallback
|| __TEXT.__text _MRTelevisionSetPairingCallback
|| __TEXT.__text _MRTelevisionSetPinPairingCallback
|| __TEXT.__text _MRTelevisionSetRTICallback
|| __TEXT.__text _MRTelevisionSetTextEditingCallback
|| __TEXT.__text _MRTelevisionSetVoiceRecordingStateCallback
|| __TEXT.__text _MRTelevisionSetWantsNowPlayingArtworkUpdates
|| __TEXT.__text _MRTelevisionSetWantsNowPlayingUpdates
|| __TEXT.__text _MRTelevisionSetWantsVolumeControlAvailabilityUpdates
|| __TEXT.__text _MRTelevisionTextEditingClearText
|| __TEXT.__text _MRTelevisionTextEditingDeleteBackward
|| __TEXT.__text _MRTelevisionTextEditingInsert
|| __TEXT.__text _MRTelevisionTextEditingSetText
|| __TEXT.__text _MRTelevisionUnpair
|| __TEXT.__text _MRTelevisionUnregisterGameController
|| __TEXT.__text _MRTelevisionWake
|| __TEXT.__text _MRTextEditingAttributesCreate
|| __TEXT.__text _MRTextEditingAttributesGetInputTraits
|| __TEXT.__text _MRTextEditingAttributesGetPrompt
|| __TEXT.__text _MRTextEditingAttributesGetTitle
|| __TEXT.__text _MRTextEditingAttributesSetInputTraits
|| __TEXT.__text _MRTextEditingSessionCreate
|| __TEXT.__text _MRTextEditingSessionGetAttributes
|| __TEXT.__text _MRTextEditingSessionGetText
|| __TEXT.__text _MRTextEditingSessionGetUniqueIdentifier
|| __TEXT.__text _MRTextEditingSessionIsEditing
|| __TEXT.__text _MRTimeUtilitiesGetProcessorTimeScale
|| __TEXT.__text _MRTimeUtilsGetCurrentMilliseconds
|| __TEXT.__text _MRTimeUtilsGetCurrentNanoseconds
|| __TEXT.__text _MRTimeUtilsGetCurrentSeconds
|| __TEXT.__text _MRTransactionNameGetDescription
|| __TEXT.__text _MRTransactionPacketsCreateExternalRepresentation
|| __TEXT.__text _MRTransactionPacketsCreateFromExternalRepresentation
|| __TEXT.__text _MRTransactionPacketsGetKeys
|| __TEXT.__text _MRTransactionPacketsGetShallowCopy
|| __TEXT.__text _MRTypeAuditNowPlayingInfoDictionary
|| __TEXT.__text _MRUniversalTrackIdentifierBaseIDIntegerFromURL
|| __TEXT.__text _MRUniversalTrackIdentifierCopyBaseIDFromURL
|| __TEXT.__text _MRUniversalTrackIdentifierCopyTypeDescription
|| __TEXT.__text _MRUniversalTrackIdentifierCreateURL
|| __TEXT.__text _MRUniversalTrackIdentifierCreateURLWithIntegerBaseID
|| __TEXT.__text _MRUniversalTrackIdentifierTypeFromURL
|| __TEXT.__text _MRVideoThumbnailCreate
|| __TEXT.__text _MRVideoThumbnailCreateExternalRepresentation
|| __TEXT.__text _MRVideoThumbnailCreateFromExternalRepresentation
|| __TEXT.__text _MRVideoThumbnailGetImageData
|| __TEXT.__text _MRVideoThumbnailGetTime
|| __TEXT.__text _MRVideoThumbnailRequestFromXPCMessage
|| __TEXT.__text _MRVirtualTouchDeviceDescriptorCreate
|| __TEXT.__text _MRVirtualTouchDeviceDescriptorGetScreenSize
|| __TEXT.__text _MRVirtualTouchDeviceDescriptorIsAbsolute
|| __TEXT.__text _MRVirtualTouchDeviceDescriptorIsDisplayIntegrated
|| __TEXT.__text _MRVirtualTouchDeviceDescriptorSetDisplayIntegrated
|| __TEXT.__text _MRVirtualTouchDeviceDescriptorSetIsAbsolute
|| __TEXT.__text _MRVirtualTouchDeviceDescriptorSetScreenSize
|| __TEXT.__text _MRVirtualVoiceInputDeviceCreate
|| __TEXT.__text _MRVirtualVoiceInputDeviceCreateExternalRepresentation
|| __TEXT.__text _MRVirtualVoiceInputDeviceCreateWithExternalRepresentation
|| __TEXT.__text _MRVirtualVoiceInputDeviceDescriptorCopyDefaultFormat
|| __TEXT.__text _MRVirtualVoiceInputDeviceDescriptorCopySupportedFormats
|| __TEXT.__text _MRVirtualVoiceInputDeviceDescriptorCreate
|| __TEXT.__text _MRVirtualVoiceInputDeviceDescriptorCreateExternalRepresentation
|| __TEXT.__text _MRVirtualVoiceInputDeviceDescriptorCreateFromExternalRepresentation
|| __TEXT.__text _MRVirtualVoiceInputDeviceDescriptorSetDefaultAudioFormat
|| __TEXT.__text _MRVirtualVoiceInputDeviceDescriptorSetSupportedFormats
|| __TEXT.__text _MRVirtualVoiceInputDeviceGetDescriptor
|| __TEXT.__text _MRVirtualVoiceInputDeviceGetRecordingState
|| __TEXT.__text _MRVirtualVoiceInputDeviceGetUniqueIdentifier
|| __TEXT.__text _MRVirtualVoiceInputGetDevices
|| __TEXT.__text _MRVirtualVoiceInputProcessAudioData
|| __TEXT.__text _MRVirtualVoiceInputRegisterDevice
|| __TEXT.__text _MRVirtualVoiceInputSetRecordingEndpoint
|| __TEXT.__text _MRVirtualVoiceInputSetRecordingState
|| __TEXT.__text _MRVirtualVoiceInputSetRecordingStateCallback
|| __TEXT.__text _MRVirtualVoiceInputUnregisterDevice
|| __TEXT.__text _MRVoiceRecordingStateCopyDescription
|| __TEXT.__text _NSStringFromMRAVDistantExternalDeviceCallbackFlags
|| __TEXT.__text _NSStringFromMRAVDistantExternalDeviceNotificationFlags
|| __TEXT.__text _NSStringFromMRAVEndpointConnectionType
|| __TEXT.__text _NSStringFromMRClientVisibility
|| __TEXT.__text _NSStringFromMROriginType
|| __TEXT.__text _NSStringFromMRPlayerAudioSessionType
|| __TEXT.__text __MRAVEndpointDescriptorProtobufReadFrom
|| __TEXT.__text __MRAVOutputDeviceDescriptorProtobufReadFrom
|| __TEXT.__text __MRApplicationActivityCreateExternalRepresentation
|| __TEXT.__text __MRApplicationActivityCreateWithExternalRepresentation
|| __TEXT.__text __MRApplicationActivitySetStatus
|| __TEXT.__text __MRCommandOptionsProtobufReadFrom
|| __TEXT.__text __MRDiagnosticProtobufReadFrom
|| __TEXT.__text __MRLogForCategory
|| __TEXT.__text __MRMRNowPlayingAudioFormatContentInfoProtobufReadFrom
|| __TEXT.__text __MRMediaRemoteRegisterForNowPlayingNotificationsEx
|| __TEXT.__text __MRNowPlayingClientProtobufReadFrom
|| __TEXT.__text __MRNowPlayingInfoProtobufReadFrom
|| __TEXT.__text __MRNowPlayingPlayerPathProtobufReadFrom
|| __TEXT.__text __MROriginCreate
|| __TEXT.__text __MROriginCreateExternalRepresentation
|| __TEXT.__text __MROriginCreateFromExternalRepresentation
|| __TEXT.__text __MROriginCreateStaticInstance
|| __TEXT.__text __MRPlaybackQueueCapabilitiesCreateProtobuf
|| __TEXT.__text __MRPlaybackQueueCapabilitiesFromProto
|| __TEXT.__text __MRReceivedCommandProtobufReadFrom
|| __TEXT.__text __MRSendCommandResultMessageProtobufReadFrom
|| __TEXT.__text __MRTransactionKeyProtobufReadFrom
|| __TEXT.__text __onQueue_MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer
__ CFNetwork: _OBJC_CLASS_$_NSNetService
__ CFNetwork: _OBJC_CLASS_$_NSNetServiceBrowser
__ CFNetwork: _OBJC_CLASS_$_NSURLSession
__ CFNetwork: __kCFStreamSocketSetNoDelay
__ CFNetwork: _kCFStreamPropertyIndefiniteConnection
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAllocatorAllocate
__ CoreFoundation: _CFAllocatorDeallocate
__ CoreFoundation: _CFArrayCreateCopy
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFCopyTypeIDDescription
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateMutable
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDateCreate
__ CoreFoundation: _CFDateGetAbsoluteTime
__ CoreFoundation: _CFDateGetTypeID
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFErrorCopyDescription
__ CoreFoundation: _CFErrorCopyUserInfo
__ CoreFoundation: _CFErrorCreate
__ CoreFoundation: _CFErrorGetCode
__ CoreFoundation: _CFErrorGetDomain
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPropertyListCreateData
__ CoreFoundation: _CFPropertyListCreateWithData
__ CoreFoundation: _CFPropertyListIsValid
__ CoreFoundation: _CFReadStreamCopyProperty
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFStringAppend
__ CoreFoundation: _CFStringAppendFormat
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateMutable
__ CoreFoundation: _CFStringCreateWithBytes
__ CoreFoundation: _CFStringCreateWithBytesNoCopy
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFURLCopyLastPathComponent
__ CoreFoundation: _CFURLCreateWithString
__ CoreFoundation: _CFURLGetBaseURL
__ CoreFoundation: _CFURLGetString
__ CoreFoundation: _CFURLGetTypeID
__ CoreFoundation: _CFUUIDCreateFromString
__ CoreFoundation: _CFWriteStreamCopyProperty
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInputStream
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSOutputStream
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSStream
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __NSIsNSDictionary
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleVersionKey
__ CoreFoundation: _kCFStreamPropertySocketNativeHandle
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextGetBytesPerRow
__ CoreGraphics: _CGBitmapContextGetData
__ CoreGraphics: _CGColorSpaceCreateDeviceGray
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextDrawImage
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSBundleProxy
__ CoreServices: _OBJC_CLASS_$_LSBundleRecord
__ CoreUtils: _TextToHardwareAddress
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSMultipleUnderlyingErrorsKey
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDecimalNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSProxy
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCCoder
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListenerEndpoint
__ Foundation: _OBJC_METACLASS_$_NSProxy
__ IDS: _IDSDefaultPairedDevice
__ IDS: _IDSMaxMessageTimeout
__ IDS: _IDSSendMessageOptionFireAndForgetKey
__ IDS: _IDSSendMessageOptionForceLocalDeliveryKey
__ IDS: _IDSSendMessageOptionNonWakingKey
__ IDS: _IDSSendMessageOptionTimeoutKey
__ IDS: _OBJC_CLASS_$_IDSService
__ IOKit: _IOHIDEventCreateData
__ ImageIO: _CGImageDestinationCreateWithData
__ ImageIO: _CGImageDestinationFinalize
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateWithData
__ ManagedConfiguration: _MCFeatureTVRemoteAllowedTVs
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MediaServices: _MSVArchivedDataWithRootObject
__ MediaServices: _MSVCopyDeviceName
__ MediaServices: _MSVCopyLocalizedModelName
__ MediaServices: _MSVDeviceIsAppleTV
__ MediaServices: _MSVDeviceIsAudioAccessory
__ MediaServices: _MSVDeviceOSIsInternalInstall
__ MediaServices: _MSVImageUtilitiesResizeSourceImageToDestination
__ MediaServices: _MSVMobileHomeDirectory
__ MediaServices: _MSVPropertyListDataClasses
__ MediaServices: _MSVUnarchivedObjectOfClass
__ MediaServices: _MSVUnarchivedObjectOfClasses
__ MediaServices: _MSVWeakLinkClass
__ MediaServices: _MSVWeakLinkSymbol
__ MediaServices: _OBJC_CLASS_$_MSVBlockGuard
__ MediaServices: _OBJC_CLASS_$_MSVBloomFilter
__ MediaServices: _OBJC_CLASS_$_MSVCallback
__ MediaServices: _OBJC_CLASS_$_MSVMessageParser
__ MediaServices: _OBJC_CLASS_$_MSVMultiCallback
__ MediaServices: _OBJC_CLASS_$_MSVMutableBidirectionalDictionary
__ MediaServices: _OBJC_CLASS_$_MSVPair
__ MediaServices: _OBJC_CLASS_$_MSVTimer
__ MediaServices: _OBJC_CLASS_$_MSVVariableIntervalTimer
__ MediaServices: _OBJC_METACLASS_$_MSVBlockGuard
__ MediaServices: _msv_dispatch_async_on_queue
__ MediaServices: _msv_dispatch_sync_on_queue
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ ProtocolBuffer: _PBRepeatedDoubleAdd
__ ProtocolBuffer: _PBRepeatedDoubleClear
__ ProtocolBuffer: _PBRepeatedDoubleCopy
__ ProtocolBuffer: _PBRepeatedDoubleHash
__ ProtocolBuffer: _PBRepeatedDoubleIsEqual
__ ProtocolBuffer: _PBRepeatedDoubleNSArray
__ ProtocolBuffer: _PBRepeatedDoubleSet
__ ProtocolBuffer: _PBRepeatedFloatAdd
__ ProtocolBuffer: _PBRepeatedFloatClear
__ ProtocolBuffer: _PBRepeatedFloatCopy
__ ProtocolBuffer: _PBRepeatedFloatHash
__ ProtocolBuffer: _PBRepeatedFloatIsEqual
__ ProtocolBuffer: _PBRepeatedFloatNSArray
__ ProtocolBuffer: _PBRepeatedFloatSet
__ ProtocolBuffer: _PBRepeatedInt32Add
__ ProtocolBuffer: _PBRepeatedInt32Clear
__ ProtocolBuffer: _PBRepeatedInt32Copy
__ ProtocolBuffer: _PBRepeatedInt32Hash
__ ProtocolBuffer: _PBRepeatedInt32IsEqual
__ ProtocolBuffer: _PBRepeatedInt32NSArray
__ ProtocolBuffer: _PBRepeatedInt32Set
__ ProtocolBuffer: _PBRepeatedInt64Add
__ ProtocolBuffer: _PBRepeatedInt64Clear
__ ProtocolBuffer: _PBRepeatedInt64Copy
__ ProtocolBuffer: _PBRepeatedInt64Hash
__ ProtocolBuffer: _PBRepeatedInt64IsEqual
__ ProtocolBuffer: _PBRepeatedInt64NSArray
__ ProtocolBuffer: _PBRepeatedInt64Set
__ ProtocolBuffer: _PBRepeatedUInt32Add
__ ProtocolBuffer: _PBRepeatedUInt32Clear
__ ProtocolBuffer: _PBRepeatedUInt32Copy
__ ProtocolBuffer: _PBRepeatedUInt32Hash
__ ProtocolBuffer: _PBRepeatedUInt32IsEqual
__ ProtocolBuffer: _PBRepeatedUInt32NSArray
__ ProtocolBuffer: _PBRepeatedUInt32Set
__ ProtocolBuffer: _PBRepeatedUInt64Add
__ ProtocolBuffer: _PBRepeatedUInt64Clear
__ ProtocolBuffer: _PBRepeatedUInt64Copy
__ ProtocolBuffer: _PBRepeatedUInt64Hash
__ ProtocolBuffer: _PBRepeatedUInt64IsEqual
__ ProtocolBuffer: _PBRepeatedUInt64NSArray
__ ProtocolBuffer: _PBRepeatedUInt64Set
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkClient
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkDevice
__ Rapport: _RPDestinationIdentifierPersonalCompanion
__ Rapport: _RPDestinationIdentifierSameHome
__ Rapport: _RPOptionSenderID
__ RemoteTextInput: _OBJC_CLASS_$_RTIDataPayload
__ RemoteTextInput: _OBJC_CLASS_$_RTIInputSystemSourceSession
__ Security: _SecRandomCopyBytes
__ Security: _SecTaskCopyValuesForEntitlements
__ Security: _SecTaskCreateFromSelf
__ Security: _kSecRandomDefault
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _CC_MD5_Final
__ libSystem.B.dylib: _CC_MD5_Init
__ libSystem.B.dylib: _CC_MD5_Update
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _CC_SHA512_Final
__ libSystem.B.dylib: _CC_SHA512_Update
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_connection_interrupted
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_async_and_wait
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_queue_get_label
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _ldiv
__ libSystem.B.dylib: _lldiv
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_is_valid_token
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _qos_class_self
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_release
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_get_euid
__ libSystem.B.dylib: _xpc_connection_get_pid
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_context
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_copy_description
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_create_reply
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_data
__ libSystem.B.dylib: _xpc_dictionary_get_double
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_remote_connection
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_data
__ libSystem.B.dylib: _xpc_dictionary_set_double
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_addMethod
__ libobjc.A.dylib: _class_getClassMethod
__ libobjc.A.dylib: _class_getInstanceMethod
__ libobjc.A.dylib: _class_getName
__ libobjc.A.dylib: _class_replaceMethod
__ libobjc.A.dylib: _method_exchangeImplementations
__ libobjc.A.dylib: _method_getImplementation
__ libobjc.A.dylib: _method_getTypeEncoding
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_moveWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _object_getClass
__ libobjc.A.dylib: _protocol_getMethodDescription
_MRVideoThumbnailRequestProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVideoThumbnailRequestProtobuf dictionaryRepresentation]
  -[_MRVideoThumbnailRequestProtobuf writeTo:]
  -[_MRVideoThumbnailRequestProtobuf isEqual:]
  -[_MRVideoThumbnailRequestProtobuf readFrom:]
  -[_MRVideoThumbnailRequestProtobuf dealloc]
  -[_MRVideoThumbnailRequestProtobuf copyWithZone:]


MRLegacyController : NSObject <MRProtocolClientConnectionDelegate>
 @property  NSString *outputDeviceUID
 @property  MRExternalDevice *externalDevice
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <MRLegacyControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRLegacyController connect]
  -[MRLegacyController setupExternalDevice]
  -[MRLegacyController initWithExternalDevice:outputDeviceUID:]
  -[MRLegacyController modifyTopologyAddingDevices:removingDevices:settingDevices:completion:]
  -[MRLegacyController setOutputDeviceUID:]
  -[MRLegacyController initWithAVOutputDevice:]
  -[MRLegacyController handleVolumeCapabilitiesDidChangeNotification:]
  -[MRLegacyController addOutputDeviceIDs:completion:]
  -[MRLegacyController removeOutputDeviceIDs:completion:]
  -[MRLegacyController setOutputDeviceIDs:completion:]
  -[MRLegacyController getMasterVolumeWithCompletion:]
  -[MRLegacyController getOutputDeviceVolume:completion:]
  -[MRLegacyController getMasterVolumeCapabilitiesWithCompletion:]
  -[MRLegacyController getOutputDeviceVolumeCapabilities:completion:]
  -[MRLegacyController setMasterVolume:completion:]
  -[MRLegacyController setVolume:forOutputDeviceID:completion:]
  -[MRLegacyController tearDown]
  -[MRLegacyController initWithOutputDeviceUID:]
  -[MRLegacyController .cxx_destruct]
  -[MRLegacyController outputDeviceUID]
  -[MRLegacyController externalDevice]
  -[MRLegacyController setDelegate:]
  -[MRLegacyController setExternalDevice:]
  -[MRLegacyController setQueue:]
  -[MRLegacyController delegate]
  -[MRLegacyController queue]
  -[MRLegacyController dealloc]
  -[MRLegacyController initWithOutputDevice:]


_MRPlaybackQueueRequestProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackQueueRequestProtobuf .cxx_destruct]
  -[_MRPlaybackQueueRequestProtobuf dictionaryRepresentation]
  -[_MRPlaybackQueueRequestProtobuf writeTo:]
  -[_MRPlaybackQueueRequestProtobuf isEqual:]
  -[_MRPlaybackQueueRequestProtobuf readFrom:]
  -[_MRPlaybackQueueRequestProtobuf copyWithZone:]


MRPlaybackSession : NSObject
 @property  _MRPlaybackSessionProtobuf *protobuf
 @property  NSString *identifier
 @property  NSString *type
 @property  NSData *playbackSessionData
 @property  NSData *data
 @property  NSString *revision
 @property  NSData *metadata

  // instance methods
  -[MRPlaybackSession initWithIdentifier:type:playbackSessionData:revision:metadata:]
  -[MRPlaybackSession setPlaybackSessionData:]
  -[MRPlaybackSession setType:]
  -[MRPlaybackSession .cxx_destruct]
  -[MRPlaybackSession dictionaryRepresentation]
  -[MRPlaybackSession data]
  -[MRPlaybackSession isEqual:]
  -[MRPlaybackSession identifier]
  -[MRPlaybackSession protobuf]
  -[MRPlaybackSession metadata]
  -[MRPlaybackSession initWithProtobuf:]
  -[MRPlaybackSession initWithData:]
  -[MRPlaybackSession revision]
  -[MRPlaybackSession type]
  -[MRPlaybackSession setIdentifier:]
  -[MRPlaybackSession playbackSessionData]


_MRGameControllerPropertiesMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGameControllerPropertiesMessageProtobuf .cxx_destruct]
  -[_MRGameControllerPropertiesMessageProtobuf dictionaryRepresentation]
  -[_MRGameControllerPropertiesMessageProtobuf writeTo:]
  -[_MRGameControllerPropertiesMessageProtobuf isEqual:]
  -[_MRGameControllerPropertiesMessageProtobuf readFrom:]
  -[_MRGameControllerPropertiesMessageProtobuf copyWithZone:]


MRClientUpdatesConfigMessage : MRProtocolMessage
 @property  NSArray *subscribedPlayerPaths
 @property  BOOL nowPlayingUpdates
 @property  BOOL artworkUpdates
 @property  BOOL volumeUpdates
 @property  BOOL keyboardUpdates
 @property  BOOL outputDeviceUpdates
 @property  BOOL systemEndpointUpdates

  // instance methods
  -[MRClientUpdatesConfigMessage nowPlayingUpdates]
  -[MRClientUpdatesConfigMessage artworkUpdates]
  -[MRClientUpdatesConfigMessage initWithNowPlayingUpdates:artworkUpdates:volumeUpdates:keyboardUpdates:outputDeviceUpdates:systemEndpointUpdates:subscribedPlayerPaths:]
  -[MRClientUpdatesConfigMessage volumeUpdates]
  -[MRClientUpdatesConfigMessage keyboardUpdates]
  -[MRClientUpdatesConfigMessage outputDeviceUpdates]
  -[MRClientUpdatesConfigMessage systemEndpointUpdates]
  -[MRClientUpdatesConfigMessage subscribedPlayerPaths]
  -[MRClientUpdatesConfigMessage setSubscribedPlayerPaths:]
  -[MRClientUpdatesConfigMessage .cxx_destruct]
  -[MRClientUpdatesConfigMessage initWithUnderlyingCodableMessage:error:]
  -[MRClientUpdatesConfigMessage type]


MRAVOutputDeviceDescription : NSObject
 @property  _MRAVOutputDeviceDescriptorProtobuf *descriptor
 @property  unsigned int deviceType
 @property  unsigned int deviceSubtype
 @property  NSString *uid
 @property  NSString *name
 @property  NSString *composedTypeDescription
 @property  NSString *modelID

  // instance methods
  -[MRAVOutputDeviceDescription composedTypeDescription]
  -[MRAVOutputDeviceDescription deviceSubtype]
  -[MRAVOutputDeviceDescription uid]
  -[MRAVOutputDeviceDescription name]
  -[MRAVOutputDeviceDescription deviceType]
  -[MRAVOutputDeviceDescription initWithDeviceType:deviceSubtype:uid:name:]
  -[MRAVOutputDeviceDescription initWithDeviceType:deviceSubtype:uid:name:modelID:]
  -[MRAVOutputDeviceDescription modelID]
  -[MRAVOutputDeviceDescription .cxx_destruct]
  -[MRAVOutputDeviceDescription descriptor]
  -[MRAVOutputDeviceDescription isEqual:]
  -[MRAVOutputDeviceDescription initWithDeviceType:deviceSubtype:uid:]


_MRLyricsEventProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRLyricsEventProtobuf .cxx_destruct]
  -[_MRLyricsEventProtobuf dictionaryRepresentation]
  -[_MRLyricsEventProtobuf writeTo:]
  -[_MRLyricsEventProtobuf isEqual:]
  -[_MRLyricsEventProtobuf readFrom:]
  -[_MRLyricsEventProtobuf copyWithZone:]


_MRAudioDataBlockProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioDataBlockProtobuf .cxx_destruct]
  -[_MRAudioDataBlockProtobuf dictionaryRepresentation]
  -[_MRAudioDataBlockProtobuf writeTo:]
  -[_MRAudioDataBlockProtobuf isEqual:]
  -[_MRAudioDataBlockProtobuf readFrom:]
  -[_MRAudioDataBlockProtobuf copyWithZone:]


MRCoreUtilsSystemPairingSession : MRCoreUtilsPairingSession
  // class methods
  +[MRCoreUtilsSystemPairingSession pairingManager]
  +[MRCoreUtilsSystemPairingSession systemPairingAvailable]

  // instance methods
  -[MRCoreUtilsSystemPairingSession pairedPeerDevices]
  -[MRCoreUtilsSystemPairingSession mediaRemotePairedDevices]
  -[MRCoreUtilsSystemPairingSession initializePairingSession:]
  -[MRCoreUtilsSystemPairingSession shouldAutoRetryPairingExchange:]
  -[MRCoreUtilsSystemPairingSession pairedPeerDevice]
  -[MRCoreUtilsSystemPairingSession addPeer]
  -[MRCoreUtilsSystemPairingSession removePeer]
  -[MRCoreUtilsSystemPairingSession updatePeer]


_MRSetNowPlayingPlayerMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetNowPlayingPlayerMessageProtobuf .cxx_destruct]
  -[_MRSetNowPlayingPlayerMessageProtobuf dictionaryRepresentation]
  -[_MRSetNowPlayingPlayerMessageProtobuf writeTo:]
  -[_MRSetNowPlayingPlayerMessageProtobuf isEqual:]
  -[_MRSetNowPlayingPlayerMessageProtobuf readFrom:]
  -[_MRSetNowPlayingPlayerMessageProtobuf copyWithZone:]


_MRGetVolumeControlCapabilitiesMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetVolumeControlCapabilitiesMessageProtobuf .cxx_destruct]
  -[_MRGetVolumeControlCapabilitiesMessageProtobuf dictionaryRepresentation]
  -[_MRGetVolumeControlCapabilitiesMessageProtobuf writeTo:]
  -[_MRGetVolumeControlCapabilitiesMessageProtobuf isEqual:]
  -[_MRGetVolumeControlCapabilitiesMessageProtobuf readFrom:]
  -[_MRGetVolumeControlCapabilitiesMessageProtobuf copyWithZone:]


MRModifyOutputContextRequestMessage : MRProtocolMessage
 @property  NSArray *addingOutputDeviceUIDs
 @property  NSArray *removingOutputDeviceUIDs
 @property  NSArray *settingOutputDeviceUIDs

  // instance methods
  -[MRModifyOutputContextRequestMessage contextType]
  -[MRModifyOutputContextRequestMessage removingOutputDeviceUIDs]
  -[MRModifyOutputContextRequestMessage settingOutputDeviceUIDs]
  -[MRModifyOutputContextRequestMessage initWithAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:clusterAwareAddingOutputDeviceUIDs:clusterAwareRemovingOutputDeviceUIDs:clusterAwareSettingOutputDeviceUIDs:]
  -[MRModifyOutputContextRequestMessage addingOutputDeviceUIDs]
  -[MRModifyOutputContextRequestMessage type]


MRUpdateOutputDevicesMessage : MRProtocolMessage
 @property  NSArray *outputDevices

  // instance methods
  -[MRUpdateOutputDevicesMessage .cxx_destruct]
  -[MRUpdateOutputDevicesMessage outputDevices]
  -[MRUpdateOutputDevicesMessage type]
  -[MRUpdateOutputDevicesMessage initWithOutputDevices:]


MRRemoveOutputDevicesMessage : MRProtocolMessage
 @property  NSArray *outputDeviceUIDs

  // instance methods
  -[MRRemoveOutputDevicesMessage outputDeviceUIDs]
  -[MRRemoveOutputDevicesMessage initWithOutputDeviceUIDs:]
  -[MRRemoveOutputDevicesMessage type]


MRRemoveFromParentGroupMessage : MRRemoveOutputDevicesMessage
  // instance methods
  -[MRRemoveFromParentGroupMessage type]


MRUpdateActiveSystemEndpointMessage : MRProtocolMessage
 @property  MRUpdateActiveSystemEndpointRequest *request

  // instance methods
  -[MRUpdateActiveSystemEndpointMessage initWithRequest:]
  -[MRUpdateActiveSystemEndpointMessage .cxx_destruct]
  -[MRUpdateActiveSystemEndpointMessage initWithUnderlyingCodableMessage:error:]
  -[MRUpdateActiveSystemEndpointMessage request]
  -[MRUpdateActiveSystemEndpointMessage type]


MRUpdateEndpointsMessage : MRProtocolMessage
 @property  NSArray *endpoints
 @property  unsigned int features

  // instance methods
  -[MRUpdateEndpointsMessage features]
  -[MRUpdateEndpointsMessage endpoints]
  -[MRUpdateEndpointsMessage initWithEndpoints:endpointFeature:]
  -[MRUpdateEndpointsMessage .cxx_destruct]
  -[MRUpdateEndpointsMessage type]


MRRemoveEndpointsMessage : MRProtocolMessage
 @property  NSArray *endpointUIDs

  // instance methods
  -[MRRemoveEndpointsMessage endpointUIDs]
  -[MRRemoveEndpointsMessage initWithEndpointUIDs:]
  -[MRRemoveEndpointsMessage type]


MRRapportTransport : MRExternalDeviceTransport
 @property  NSString *sessionUID
 @property  MRExternalDeviceTransportConnection *connection
 @property  RPCompanionLinkDevice *targetDevice

  // class methods
  +[MRRapportTransport _writeConnectionRecordsToDisk:]
  +[MRRapportTransport resetPersistedConnections]
  +[MRRapportTransport userDefaults]
  +[MRRapportTransport _readConnectionRecordsFromDisk]

  // instance methods
  -[MRRapportTransport hostname]
  -[MRRapportTransport targetDevice]
  -[MRRapportTransport deviceInfo]
  -[MRRapportTransport uid]
  -[MRRapportTransport name]
  -[MRRapportTransport port]
  -[MRRapportTransport initWithOutputDevice:proxyOutputDevice:]
  -[MRRapportTransport _generateSessionUID]
  -[MRRapportTransport setSessionUID:]
  -[MRRapportTransport _persistConnectionRecordToDisk]
  -[MRRapportTransport _removeConnectionRecordFromDisk]
  -[MRRapportTransport shouldUseSystemAuthenticationPrompt]
  -[MRRapportTransport setShouldUseSystemAuthenticationPrompt:]
  -[MRRapportTransport createConnectionWithUserInfo:]
  -[MRRapportTransport .cxx_destruct]
  -[MRRapportTransport resetWithError:]
  -[MRRapportTransport setConnection:]
  -[MRRapportTransport setTargetDevice:]
  -[MRRapportTransport connection]
  -[MRRapportTransport dealloc]
  -[MRRapportTransport initWithOutputDevice:]
  -[MRRapportTransport sessionUID]
  -[MRRapportTransport setError:]
  -[MRRapportTransport error]


MRRapportTransportConfiguration : NSObject <NSSecureCoding>
 @property  NSString *deviceUID
 @property  NSString *sessionUID
 @property  NSString *name

  // class methods
  +[MRRapportTransportConfiguration supportsSecureCoding]

  // instance methods
  -[MRRapportTransportConfiguration name]
  -[MRRapportTransportConfiguration initWithCoder:]
  -[MRRapportTransportConfiguration setSessionUID:]
  -[MRRapportTransportConfiguration .cxx_destruct]
  -[MRRapportTransportConfiguration setName:]
  -[MRRapportTransportConfiguration setDeviceUID:]
  -[MRRapportTransportConfiguration sessionUID]
  -[MRRapportTransportConfiguration encodeWithCoder:]
  -[MRRapportTransportConfiguration deviceUID]


MRConcreteEndpoint : MRAVEndpoint
 @property  NSArray *outputDevices

  // instance methods
  -[MRConcreteEndpoint designatedGroupLeader]
  -[MRConcreteEndpoint connectionType]
  -[MRConcreteEndpoint canModifyGroupMembership]
  -[MRConcreteEndpoint isProxyGroupPlayer]
  -[MRConcreteEndpoint initWithDesignatedGroupLeader:outputDevices:preferredSuffix:]
  -[MRConcreteEndpoint uniqueIdentifier]
  -[MRConcreteEndpoint .cxx_destruct]
  -[MRConcreteEndpoint externalDevice]
  -[MRConcreteEndpoint setExternalDevice:]
  -[MRConcreteEndpoint setOutputDevices:]
  -[MRConcreteEndpoint outputDevices]
  -[MRConcreteEndpoint initWithDesignatedGroupLeader:outputDevices:preferredSuffix:connectionType:]


MRMediaSuggestionController : NSObject <LSApplicationWorkspaceObserverProtocol>
 @property  <MRMediaSuggestionControllerDelegate> *delegate
 @property  MRMediaSuggestionRequest *request
 @property  NSDictionary *suggestions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRMediaSuggestionController applicationsDidUninstall:]
  -[MRMediaSuggestionController applicationsDidInstall:]
  -[MRMediaSuggestionController initWithRequest:]
  -[MRMediaSuggestionController .cxx_destruct]
  -[MRMediaSuggestionController stop]
  -[MRMediaSuggestionController setDelegate:]
  -[MRMediaSuggestionController suggestions]
  -[MRMediaSuggestionController request]
  -[MRMediaSuggestionController delegate]
  -[MRMediaSuggestionController start]
  -[MRMediaSuggestionController dealloc]


MRAudioBuffer : NSObject
 @property  AVAudioCompressedBuffer *buffer
 @property  NSDictionary *formatSettings

  // instance methods
  -[MRAudioBuffer formatSettings]
  -[MRAudioBuffer .cxx_destruct]
  -[MRAudioBuffer initWithFormatSettings:packetCapacity:maximumPacketSize:]
  -[MRAudioBuffer buffer]


_MRPromptForRouteAuthorizationMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPromptForRouteAuthorizationMessageProtobuf .cxx_destruct]
  -[_MRPromptForRouteAuthorizationMessageProtobuf dictionaryRepresentation]
  -[_MRPromptForRouteAuthorizationMessageProtobuf writeTo:]
  -[_MRPromptForRouteAuthorizationMessageProtobuf isEqual:]
  -[_MRPromptForRouteAuthorizationMessageProtobuf readFrom:]
  -[_MRPromptForRouteAuthorizationMessageProtobuf copyWithZone:]


_MRSupportedCommandsProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSupportedCommandsProtobuf .cxx_destruct]
  -[_MRSupportedCommandsProtobuf dictionaryRepresentation]
  -[_MRSupportedCommandsProtobuf writeTo:]
  -[_MRSupportedCommandsProtobuf isEqual:]
  -[_MRSupportedCommandsProtobuf readFrom:]
  -[_MRSupportedCommandsProtobuf copyWithZone:]


MRSetStateMessage : MRProtocolMessage
 @property  MRNowPlayingState *state

  // instance methods
  -[MRSetStateMessage .cxx_destruct]
  -[MRSetStateMessage initWithNowPlayingState:]
  -[MRSetStateMessage initWithUnderlyingCodableMessage:error:]
  -[MRSetStateMessage state]
  -[MRSetStateMessage type]


MRSetReadyStateMessage : MRProtocolMessage
  // instance methods
  -[MRSetReadyStateMessage type]


MRSetConnectionStateMessage : MRProtocolMessage
 @property  unsigned int state

  // instance methods
  -[MRSetConnectionStateMessage initWithConnectionState:]
  -[MRSetConnectionStateMessage encryptionType]
  -[MRSetConnectionStateMessage state]
  -[MRSetConnectionStateMessage type]


MRSetHiliteModeMessage : MRProtocolMessage
 @property  BOOL hiliteMode

  // instance methods
  -[MRSetHiliteModeMessage hiliteMode]
  -[MRSetHiliteModeMessage initWithHiliteMode:]
  -[MRSetHiliteModeMessage type]


MRWakeDeviceMessage : MRProtocolMessage
  // instance methods
  -[MRWakeDeviceMessage init]
  -[MRWakeDeviceMessage type]


MRSetNowPlayingClientMessage : MRProtocolMessage
 @property  MRClient *client

  // instance methods
  -[MRSetNowPlayingClientMessage client]
  -[MRSetNowPlayingClientMessage type]
  -[MRSetNowPlayingClientMessage initWithClient:]


MRSetNowPlayingPlayerMessage : MRProtocolMessage
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRSetNowPlayingPlayerMessage playerPath]
  -[MRSetNowPlayingPlayerMessage initWithPlayerPath:]
  -[MRSetNowPlayingPlayerMessage type]


MRRemoveClientMessage : MRProtocolMessage
 @property  MRClient *client

  // instance methods
  -[MRRemoveClientMessage client]
  -[MRRemoveClientMessage type]
  -[MRRemoveClientMessage initWithClient:]


MRRemovePlayerMessage : MRProtocolMessage
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRRemovePlayerMessage playerPath]
  -[MRRemovePlayerMessage initWithPlayerPath:]
  -[MRRemovePlayerMessage type]


MRUpdateClientMessage : MRProtocolMessage
 @property  MRClient *client

  // instance methods
  -[MRUpdateClientMessage client]
  -[MRUpdateClientMessage type]
  -[MRUpdateClientMessage initWithClient:]


MRUpdatePlayerMessage : MRProtocolMessage
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRUpdatePlayerMessage playerPath]
  -[MRUpdatePlayerMessage initWithPlayerPath:]
  -[MRUpdatePlayerMessage type]


MRUpdateContentItemMessage : MRProtocolMessage
 @property  MRPlayerPath *playerPath
 @property  NSArray *contentItems

  // instance methods
  -[MRUpdateContentItemMessage playerPath]
  -[MRUpdateContentItemMessage contentItems]
  -[MRUpdateContentItemMessage initWithContentItems:forPlayerPath:]
  -[MRUpdateContentItemMessage type]


MRUpdateContentItemArtworkMessage : MRProtocolMessage
 @property  MRPlayerPath *playerPath
 @property  NSArray *contentItems

  // instance methods
  -[MRUpdateContentItemArtworkMessage playerPath]
  -[MRUpdateContentItemArtworkMessage contentItems]
  -[MRUpdateContentItemArtworkMessage initWithContentItems:forPlayerPath:]
  -[MRUpdateContentItemArtworkMessage type]


MRSetDefaultSupportedCommandsMessage : MRProtocolMessage
 @property  NSArray *supportedCommands
 @property  NSString *bundleID

  // instance methods
  -[MRSetDefaultSupportedCommandsMessage supportedCommands]
  -[MRSetDefaultSupportedCommandsMessage bundleID]
  -[MRSetDefaultSupportedCommandsMessage .cxx_destruct]
  -[MRSetDefaultSupportedCommandsMessage initWithDefaultSupportedCommands:forPlayerPath:]
  -[MRSetDefaultSupportedCommandsMessage initWithUnderlyingCodableMessage:error:]
  -[MRSetDefaultSupportedCommandsMessage type]


_MRSetStateMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetStateMessageProtobuf .cxx_destruct]
  -[_MRSetStateMessageProtobuf dictionaryRepresentation]
  -[_MRSetStateMessageProtobuf writeTo:]
  -[_MRSetStateMessageProtobuf isEqual:]
  -[_MRSetStateMessageProtobuf readFrom:]
  -[_MRSetStateMessageProtobuf copyWithZone:]


MRAVOutputDeviceTransport : MRExternalDeviceTransport
  // class methods
  +[MRAVOutputDeviceTransport _createConnectionWith:groupID:connectionType:shouldUseSystemAuthenticationPrompt:userInfo:]

  // instance methods
  -[MRAVOutputDeviceTransport hostname]
  -[MRAVOutputDeviceTransport deviceInfo]
  -[MRAVOutputDeviceTransport uid]
  -[MRAVOutputDeviceTransport name]
  -[MRAVOutputDeviceTransport port]
  -[MRAVOutputDeviceTransport shouldUseSystemAuthenticationPrompt]
  -[MRAVOutputDeviceTransport setShouldUseSystemAuthenticationPrompt:]
  -[MRAVOutputDeviceTransport createConnectionWithUserInfo:]
  -[MRAVOutputDeviceTransport .cxx_destruct]
  -[MRAVOutputDeviceTransport resetWithError:]
  -[MRAVOutputDeviceTransport initWithOutputDevice:groupID:connectionType:]
  -[MRAVOutputDeviceTransport requiresCustomPairing]
  -[MRAVOutputDeviceTransport setError:]
  -[MRAVOutputDeviceTransport error]


_MRLanguageOptionProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRLanguageOptionProtobuf .cxx_destruct]
  -[_MRLanguageOptionProtobuf dictionaryRepresentation]
  -[_MRLanguageOptionProtobuf writeTo:]
  -[_MRLanguageOptionProtobuf isEqual:]
  -[_MRLanguageOptionProtobuf readFrom:]
  -[_MRLanguageOptionProtobuf copyWithZone:]


_MRCreateHostedEndpointResponseProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRCreateHostedEndpointResponseProtobuf .cxx_destruct]
  -[_MRCreateHostedEndpointResponseProtobuf dictionaryRepresentation]
  -[_MRCreateHostedEndpointResponseProtobuf writeTo:]
  -[_MRCreateHostedEndpointResponseProtobuf isEqual:]
  -[_MRCreateHostedEndpointResponseProtobuf readFrom:]
  -[_MRCreateHostedEndpointResponseProtobuf copyWithZone:]


_MRNowPlayingInfoProtobuf : PBCodable <NSCopying>
 @property  BOOL hasAlbum
 @property  NSString *album
 @property  BOOL hasArtist
 @property  NSString *artist
 @property  BOOL hasDuration
 @property  double duration
 @property  BOOL hasElapsedTime
 @property  double elapsedTime
 @property  BOOL hasPlaybackRate
 @property  float playbackRate
 @property  BOOL hasRepeatMode
 @property  int repeatMode
 @property  BOOL hasShuffleMode
 @property  int shuffleMode
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasTitle
 @property  NSString *title
 @property  BOOL hasUniqueIdentifier
 @property  unsigned long uniqueIdentifier
 @property  BOOL hasIsExplicitTrack
 @property  BOOL isExplicitTrack
 @property  BOOL hasIsMusicApp
 @property  BOOL isMusicApp
 @property  BOOL hasRadioStationIdentifier
 @property  long long radioStationIdentifier
 @property  BOOL hasRadioStationHash
 @property  NSString *radioStationHash
 @property  BOOL hasRadioStationName
 @property  NSString *radioStationName
 @property  BOOL hasArtworkDataDigest
 @property  NSData *artworkDataDigest
 @property  BOOL hasIsAlwaysLive
 @property  BOOL isAlwaysLive
 @property  BOOL hasIsAdvertisement
 @property  BOOL isAdvertisement

  // instance methods
  -[_MRNowPlayingInfoProtobuf hasUniqueIdentifier]
  -[_MRNowPlayingInfoProtobuf setPlaybackRate:]
  -[_MRNowPlayingInfoProtobuf setUniqueIdentifier:]
  -[_MRNowPlayingInfoProtobuf isAdvertisement]
  -[_MRNowPlayingInfoProtobuf playbackRate]
  -[_MRNowPlayingInfoProtobuf setRadioStationName:]
  -[_MRNowPlayingInfoProtobuf album]
  -[_MRNowPlayingInfoProtobuf radioStationName]
  -[_MRNowPlayingInfoProtobuf setElapsedTime:]
  -[_MRNowPlayingInfoProtobuf isAlwaysLive]
  -[_MRNowPlayingInfoProtobuf mergeFrom:]
  -[_MRNowPlayingInfoProtobuf setShuffleMode:]
  -[_MRNowPlayingInfoProtobuf uniqueIdentifier]
  -[_MRNowPlayingInfoProtobuf artist]
  -[_MRNowPlayingInfoProtobuf hasTitle]
  -[_MRNowPlayingInfoProtobuf elapsedTime]
  -[_MRNowPlayingInfoProtobuf setHasDuration:]
  -[_MRNowPlayingInfoProtobuf setTitle:]
  -[_MRNowPlayingInfoProtobuf shuffleMode]
  -[_MRNowPlayingInfoProtobuf setRadioStationIdentifier:]
  -[_MRNowPlayingInfoProtobuf .cxx_destruct]
  -[_MRNowPlayingInfoProtobuf hasRepeatMode]
  -[_MRNowPlayingInfoProtobuf hasShuffleMode]
  -[_MRNowPlayingInfoProtobuf setHasRepeatMode:]
  -[_MRNowPlayingInfoProtobuf setDuration:]
  -[_MRNowPlayingInfoProtobuf setArtist:]
  -[_MRNowPlayingInfoProtobuf setArtworkDataDigest:]
  -[_MRNowPlayingInfoProtobuf repeatModeAsString:]
  -[_MRNowPlayingInfoProtobuf StringAsRepeatMode:]
  -[_MRNowPlayingInfoProtobuf shuffleModeAsString:]
  -[_MRNowPlayingInfoProtobuf StringAsShuffleMode:]
  -[_MRNowPlayingInfoProtobuf setIsExplicitTrack:]
  -[_MRNowPlayingInfoProtobuf setHasIsExplicitTrack:]
  -[_MRNowPlayingInfoProtobuf hasIsExplicitTrack]
  -[_MRNowPlayingInfoProtobuf setIsMusicApp:]
  -[_MRNowPlayingInfoProtobuf setHasIsMusicApp:]
  -[_MRNowPlayingInfoProtobuf hasIsMusicApp]
  -[_MRNowPlayingInfoProtobuf hasRadioStationHash]
  -[_MRNowPlayingInfoProtobuf hasRadioStationName]
  -[_MRNowPlayingInfoProtobuf hasArtworkDataDigest]
  -[_MRNowPlayingInfoProtobuf setHasIsAlwaysLive:]
  -[_MRNowPlayingInfoProtobuf hasIsAlwaysLive]
  -[_MRNowPlayingInfoProtobuf setIsAdvertisement:]
  -[_MRNowPlayingInfoProtobuf setHasIsAdvertisement:]
  -[_MRNowPlayingInfoProtobuf hasIsAdvertisement]
  -[_MRNowPlayingInfoProtobuf isMusicApp]
  -[_MRNowPlayingInfoProtobuf artworkDataDigest]
  -[_MRNowPlayingInfoProtobuf dictionaryRepresentation]
  -[_MRNowPlayingInfoProtobuf writeTo:]
  -[_MRNowPlayingInfoProtobuf setAlbum:]
  -[_MRNowPlayingInfoProtobuf isEqual:]
  -[_MRNowPlayingInfoProtobuf copyTo:]
  -[_MRNowPlayingInfoProtobuf isExplicitTrack]
  -[_MRNowPlayingInfoProtobuf readFrom:]
  -[_MRNowPlayingInfoProtobuf radioStationIdentifier]
  -[_MRNowPlayingInfoProtobuf radioStationHash]
  -[_MRNowPlayingInfoProtobuf setRadioStationHash:]
  -[_MRNowPlayingInfoProtobuf setIsAlwaysLive:]
  -[_MRNowPlayingInfoProtobuf hasTimestamp]
  -[_MRNowPlayingInfoProtobuf repeatMode]
  -[_MRNowPlayingInfoProtobuf title]
  -[_MRNowPlayingInfoProtobuf setHasElapsedTime:]
  -[_MRNowPlayingInfoProtobuf setHasUniqueIdentifier:]
  -[_MRNowPlayingInfoProtobuf hasAlbum]
  -[_MRNowPlayingInfoProtobuf hasArtist]
  -[_MRNowPlayingInfoProtobuf timestamp]
  -[_MRNowPlayingInfoProtobuf copyWithZone:]
  -[_MRNowPlayingInfoProtobuf setHasTimestamp:]
  -[_MRNowPlayingInfoProtobuf hasElapsedTime]
  -[_MRNowPlayingInfoProtobuf setHasRadioStationIdentifier:]
  -[_MRNowPlayingInfoProtobuf hasRadioStationIdentifier]
  -[_MRNowPlayingInfoProtobuf setRepeatMode:]
  -[_MRNowPlayingInfoProtobuf setHasPlaybackRate:]
  -[_MRNowPlayingInfoProtobuf setHasShuffleMode:]
  -[_MRNowPlayingInfoProtobuf hasPlaybackRate]
  -[_MRNowPlayingInfoProtobuf setTimestamp:]
  -[_MRNowPlayingInfoProtobuf duration]
  -[_MRNowPlayingInfoProtobuf hasDuration]


_MRAudioTimeProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioTimeProtobuf dictionaryRepresentation]
  -[_MRAudioTimeProtobuf writeTo:]
  -[_MRAudioTimeProtobuf isEqual:]
  -[_MRAudioTimeProtobuf readFrom:]
  -[_MRAudioTimeProtobuf copyWithZone:]


MRMediaSuggestion : NSObject
 @property  NSString *identifier
 @property  NSString *bundleID
 @property  NSString *title
 @property  NSString *artist
 @property  MRArtwork *artwork

  // instance methods
  -[MRMediaSuggestion artwork]
  -[MRMediaSuggestion bundleID]
  -[MRMediaSuggestion artist]
  -[MRMediaSuggestion .cxx_destruct]
  -[MRMediaSuggestion playWithCompletion:]
  -[MRMediaSuggestion playOnDeviceWithUID:completion:]
  -[MRMediaSuggestion playOnEndpoint:completion:]
  -[MRMediaSuggestion initWithIntent:]
  -[MRMediaSuggestion isEqual:]
  -[MRMediaSuggestion identifier]
  -[MRMediaSuggestion title]


_MRReceivedCommandProtobuf : PBCodable <NSCopying>
 @property  BOOL hasCommand
 @property  int command
 @property  BOOL hasOptions
 @property  _MRCommandOptionsProtobuf *options
 @property  BOOL hasOriginUID
 @property  int originUID
 @property  BOOL hasSenderAppDisplayID
 @property  NSString *senderAppDisplayID
 @property  BOOL hasDestinationAppDisplayID
 @property  NSString *destinationAppDisplayID
 @property  BOOL hasDestinationAppProcessID
 @property  long long destinationAppProcessID
 @property  BOOL hasRemoteControlInterfaceID
 @property  NSString *remoteControlInterfaceID
 @property  BOOL hasAppOptions
 @property  _MRReceivedCommandAppOptionsProtobuf *appOptions
 @property  BOOL hasPlayerPath
 @property  _MRNowPlayingPlayerPathProtobuf *playerPath

  // instance methods
  -[_MRReceivedCommandProtobuf playerPath]
  -[_MRReceivedCommandProtobuf mergeFrom:]
  -[_MRReceivedCommandProtobuf setCommand:]
  -[_MRReceivedCommandProtobuf options]
  -[_MRReceivedCommandProtobuf setOptions:]
  -[_MRReceivedCommandProtobuf setPlayerPath:]
  -[_MRReceivedCommandProtobuf .cxx_destruct]
  -[_MRReceivedCommandProtobuf dictionaryRepresentation]
  -[_MRReceivedCommandProtobuf hasCommand]
  -[_MRReceivedCommandProtobuf setAppOptions:]
  -[_MRReceivedCommandProtobuf setSenderAppDisplayID:]
  -[_MRReceivedCommandProtobuf setDestinationAppDisplayID:]
  -[_MRReceivedCommandProtobuf setRemoteControlInterfaceID:]
  -[_MRReceivedCommandProtobuf setHasCommand:]
  -[_MRReceivedCommandProtobuf commandAsString:]
  -[_MRReceivedCommandProtobuf StringAsCommand:]
  -[_MRReceivedCommandProtobuf setOriginUID:]
  -[_MRReceivedCommandProtobuf setHasOriginUID:]
  -[_MRReceivedCommandProtobuf hasOriginUID]
  -[_MRReceivedCommandProtobuf hasSenderAppDisplayID]
  -[_MRReceivedCommandProtobuf hasDestinationAppDisplayID]
  -[_MRReceivedCommandProtobuf setDestinationAppProcessID:]
  -[_MRReceivedCommandProtobuf setHasDestinationAppProcessID:]
  -[_MRReceivedCommandProtobuf hasAppOptions]
  -[_MRReceivedCommandProtobuf appOptions]
  -[_MRReceivedCommandProtobuf hasDestinationAppProcessID]
  -[_MRReceivedCommandProtobuf hasRemoteControlInterfaceID]
  -[_MRReceivedCommandProtobuf hasPlayerPath]
  -[_MRReceivedCommandProtobuf senderAppDisplayID]
  -[_MRReceivedCommandProtobuf destinationAppDisplayID]
  -[_MRReceivedCommandProtobuf destinationAppProcessID]
  -[_MRReceivedCommandProtobuf remoteControlInterfaceID]
  -[_MRReceivedCommandProtobuf command]
  -[_MRReceivedCommandProtobuf writeTo:]
  -[_MRReceivedCommandProtobuf isEqual:]
  -[_MRReceivedCommandProtobuf copyTo:]
  -[_MRReceivedCommandProtobuf readFrom:]
  -[_MRReceivedCommandProtobuf originUID]
  -[_MRReceivedCommandProtobuf hasOptions]
  -[_MRReceivedCommandProtobuf copyWithZone:]


MRGameControllerMessage : MRProtocolMessage
 @property  _MRGameControllerMessageProtobuf *event
 @property  unsigned long controllerID

  // instance methods
  -[MRGameControllerMessage controllerID]
  -[MRGameControllerMessage initWithGameControllerEvent:controllerID:]
  -[MRGameControllerMessage type]
  -[MRGameControllerMessage shouldLog]
  -[MRGameControllerMessage event]


MRGameControllerPropertiesMessage : MRProtocolMessage
 @property  _MRGameControllerPropertiesProtobuf *properties
 @property  unsigned long controllerID

  // instance methods
  -[MRGameControllerPropertiesMessage properties]
  -[MRGameControllerPropertiesMessage controllerID]
  -[MRGameControllerPropertiesMessage initWithGameControllerProperties:controllerID:]
  -[MRGameControllerPropertiesMessage type]


MRRegisterGameControllerMessage : MRProtocolMessage
 @property  _MRGameControllerPropertiesProtobuf *properties

  // instance methods
  -[MRRegisterGameControllerMessage initWithProperties:]
  -[MRRegisterGameControllerMessage properties]
  -[MRRegisterGameControllerMessage type]


MRRegisterGameControllerResponseMessage : MRProtocolMessage
 @property  unsigned long controllerID

  // instance methods
  -[MRRegisterGameControllerResponseMessage controllerID]
  -[MRRegisterGameControllerResponseMessage initWithControllerID:]
  -[MRRegisterGameControllerResponseMessage type]


MRUnregisterGameControllerMessage : MRProtocolMessage
 @property  unsigned long controllerID

  // instance methods
  -[MRUnregisterGameControllerMessage controllerID]
  -[MRUnregisterGameControllerMessage initWithControllerID:]
  -[MRUnregisterGameControllerMessage type]


MRRegisterForGameControllerEventsMessage : MRProtocolMessage
 @property  unsigned int inputMode

  // instance methods
  -[MRRegisterForGameControllerEventsMessage inputMode]
  -[MRRegisterForGameControllerEventsMessage initWithInputMode:]
  -[MRRegisterForGameControllerEventsMessage type]


_MRGetKeyboardSessionProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetKeyboardSessionProtobuf dictionaryRepresentation]
  -[_MRGetKeyboardSessionProtobuf writeTo:]
  -[_MRGetKeyboardSessionProtobuf isEqual:]
  -[_MRGetKeyboardSessionProtobuf readFrom:]
  -[_MRGetKeyboardSessionProtobuf copyWithZone:]


_MRContentItemProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRContentItemProtobuf .cxx_destruct]
  -[_MRContentItemProtobuf dictionaryRepresentation]
  -[_MRContentItemProtobuf writeTo:]
  -[_MRContentItemProtobuf isEqual:]
  -[_MRContentItemProtobuf readFrom:]
  -[_MRContentItemProtobuf copyWithZone:]


MRStreamTransportConnection : MRExternalDeviceTransportConnection <NSStreamDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRStreamTransportConnection setRunLoop:]
  -[MRStreamTransportConnection runLoop]
  -[MRStreamTransportConnection isValid]
  -[MRStreamTransportConnection .cxx_destruct]
  -[MRStreamTransportConnection _openStream:]
  -[MRStreamTransportConnection _closeAllStreams]
  -[MRStreamTransportConnection _stream:handleEvent:]
  -[MRStreamTransportConnection _setQOSPropertiesOnStream:]
  -[MRStreamTransportConnection _closeStream:]
  -[MRStreamTransportConnection initWithInputStream:outputStream:]
  -[MRStreamTransportConnection sendTransportData:options:]
  -[MRStreamTransportConnection close]
  -[MRStreamTransportConnection stream:handleEvent:]


MRContentItemMetadata : NSObject <NSCopying>
 @property  double elapsedTimeTimestamp
 @property  BOOL hasElapsedTimeTimestamp
 @property  double inferredTimestamp
 @property  BOOL hasInferredTimestamp
 @property  _MRContentItemMetadataProtobuf *protobuf
 @property  BOOL container
 @property  BOOL hasContainer
 @property  BOOL playable
 @property  BOOL hasPlayable
 @property  BOOL explicitItem
 @property  BOOL hasExplicitItem
 @property  BOOL streamingContent
 @property  BOOL hasStreamingContent
 @property  BOOL currentlyPlaying
 @property  BOOL hasCurrentlyPlaying
 @property  BOOL alwaysLive
 @property  BOOL hasAlwaysLive
 @property  BOOL sharable
 @property  BOOL hasSharable
 @property  BOOL liked
 @property  BOOL hasLiked
 @property  BOOL inWishList
 @property  BOOL hasInWishList
 @property  BOOL advertisement
 @property  BOOL hasAdvertisement
 @property  BOOL steerable
 @property  BOOL hasSteerable
 @property  BOOL loading
 @property  BOOL hasLoading
 @property  BOOL artworkAvailable
 @property  BOOL hasArtworkAvailable
 @property  BOOL infoAvailable
 @property  BOOL hasInfoAvailable
 @property  BOOL languageOptionsAvailable
 @property  BOOL hasLanguageOptionsAvailable
 @property  BOOL lyricsAvailable
 @property  BOOL hasLyricsAvailable
 @property  float playbackProgress
 @property  BOOL hasPlaybackProgress
 @property  float playbackRate
 @property  BOOL hasPlaybackRate
 @property  float defaultPlaybackRate
 @property  BOOL hasDefaultPlaybackRate
 @property  float downloadProgress
 @property  BOOL hasDownloadProgress
 @property  long long playlistType
 @property  BOOL hasPlaylistType
 @property  long long radioStationType
 @property  BOOL hasRadioStationType
 @property  long long editingStyleFlags
 @property  BOOL hasEditingStyleFlags
 @property  long long mediaType
 @property  BOOL hasMediaType
 @property  long long mediaSubType
 @property  BOOL hasMediaSubType
 @property  long long episodeType
 @property  BOOL hasEpisodeType
 @property  long long playCount
 @property  BOOL hasPlayCount
 @property  long long numberOfSections
 @property  BOOL hasNumberOfSections
 @property  long long chapterCount
 @property  BOOL hasChapterCount
 @property  long long totalDiscCount
 @property  BOOL hasTotalDiscCount
 @property  long long totalTrackCount
 @property  BOOL hasTotalTrackCount
 @property  long long downloadState
 @property  BOOL hasDownloadState
 @property  double duration
 @property  BOOL hasDuration
 @property  double startTime
 @property  BOOL hasStartTime
 @property  double elapsedTime
 @property  BOOL hasElapsedTime
 @property  long long seasonNumber
 @property  BOOL hasSeasonNumber
 @property  long long episodeNumber
 @property  BOOL hasEpisodeNumber
 @property  long long discNumber
 @property  BOOL hasDiscNumber
 @property  long long trackNumber
 @property  BOOL hasTrackNumber
 @property  long long radioStationIdentifier
 @property  BOOL hasRadioStationIdentifier
 @property  long long iTunesStoreIdentifier
 @property  BOOL hasITunesStoreIdentifier
 @property  long long iTunesStoreSubscriptionIdentifier
 @property  BOOL hasITunesStoreSubscriptionIdentifier
 @property  long long iTunesStoreArtistIdentifier
 @property  BOOL hasITunesStoreArtistIdentifier
 @property  long long iTunesStoreAlbumIdentifier
 @property  BOOL hasITunesStoreAlbumIdentifier
 @property  long long legacyUniqueIdentifier
 @property  BOOL hasLegacyUniqueIdentifier
 @property  NSData *purchaseInfoData
 @property  NSDictionary *appMetrics
 @property  NSDictionary *nowPlayingInfo
 @property  NSDictionary *userInfo
 @property  NSDictionary *deviceSpecificUserInfo
 @property  NSDictionary *collectionInfo
 @property  NSDate *releaseDate
 @property  NSDate *currentPlaybackDate
 @property  NSString *title
 @property  NSString *subtitle
 @property  NSString *albumName
 @property  NSString *trackArtistName
 @property  NSString *albumArtistName
 @property  NSString *directorName
 @property  NSString *localizedContentRating
 @property  NSString *collectionIdentifier
 @property  NSString *profileIdentifier
 @property  NSURL *assetURL
 @property  NSString *composer
 @property  NSString *genre
 @property  NSString *contentIdentifier
 @property  NSString *radioStationName
 @property  NSString *radioStationString
 @property  NSString *seriesName
 @property  NSURL *lyricsURL
 @property  NSString *serviceIdentifier
 @property  NSString *brandIdentifier
 @property  NSString *localizedDurationString
 @property  NSString *artworkIdentifier
 @property  NSString *artworkMIMEType
 @property  NSURL *artworkURL
 @property  NSURL *artworkFileURL
 @property  NSArray *artworkURLTemplates
 @property  NSString *albumYear
 @property  NSString *participantName
 @property  NSString *participantIdentifier
 @property  unsigned long songTraits
 @property  BOOL hasSongTraits
 @property  unsigned long albumTraits
 @property  BOOL hasAlbumTraits
 @property  unsigned long playlistTraits
 @property  BOOL hasPlaylistTraits
 @property  MRContentItemMetadataAudioFormat *preferredFormat
 @property  MRContentItemMetadataAudioFormat *activeFormat
 @property  long long activeFormatJustification
 @property  BOOL hasActiveFormatJustification
 @property  unsigned long formatTierPreference
 @property  BOOL hasFormatTierPreference
 @property  MRContentItemMetadataAudioRoute *audioRoute
 @property  NSArray *alternativeFormats
 @property  NSData *data
 @property  long long artworkDataWidthDeprecated
 @property  BOOL hasArtworkDataWidthDeprecated
 @property  long long artworkDataHeightDeprecated
 @property  BOOL hasArtworkDataHeightDeprecated
 @property  NSString *localizedTitle
 @property  BOOL hasLoadingPlaceholderTitle
 @property  double calculatedPlaybackPosition
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[MRContentItemMetadata setHasNumberOfSections:]
  -[MRContentItemMetadata isLiked]
  -[MRContentItemMetadata setLocalizedContentRating:]
  -[MRContentItemMetadata setSongTraits:]
  -[MRContentItemMetadata setArtworkIdentifier:]
  -[MRContentItemMetadata nowPlayingInfo]
  -[MRContentItemMetadata albumTraits]
  -[MRContentItemMetadata setReleaseDate:]
  -[MRContentItemMetadata downloadProgress]
  -[MRContentItemMetadata songTraits]
  -[MRContentItemMetadata collectionInfo]
  -[MRContentItemMetadata localizedDurationString]
  -[MRContentItemMetadata setITunesStoreIdentifier:]
  -[MRContentItemMetadata setLocalizedDurationString:]
  -[MRContentItemMetadata setCurrentPlaybackDate:]
  -[MRContentItemMetadata releaseDate]
  -[MRContentItemMetadata setPlaybackRate:]
  -[MRContentItemMetadata deviceSpecificUserInfo]
  -[MRContentItemMetadata setNowPlayingInfo:]
  -[MRContentItemMetadata radioStationType]
  -[MRContentItemMetadata localizedTitle]
  -[MRContentItemMetadata setMediaType:]
  -[MRContentItemMetadata hasStartTime]
  -[MRContentItemMetadata albumName]
  -[MRContentItemMetadata setSeriesName:]
  -[MRContentItemMetadata playbackProgress]
  -[MRContentItemMetadata playlistType]
  -[MRContentItemMetadata setDownloadProgress:]
  -[MRContentItemMetadata collectionIdentifier]
  -[MRContentItemMetadata setEpisodeType:]
  -[MRContentItemMetadata setPlaylistType:]
  -[MRContentItemMetadata artworkURL]
  -[MRContentItemMetadata artworkIdentifier]
  -[MRContentItemMetadata alternativeFormats]
  -[MRContentItemMetadata setPreferredFormat:]
  -[MRContentItemMetadata trackArtistName]
  -[MRContentItemMetadata setTotalTrackCount:]
  -[MRContentItemMetadata setPlaylistTraits:]
  -[MRContentItemMetadata isAdvertisement]
  -[MRContentItemMetadata playbackRate]
  -[MRContentItemMetadata isSteerable]
  -[MRContentItemMetadata setParticipantIdentifier:]
  -[MRContentItemMetadata setRadioStationName:]
  -[MRContentItemMetadata setEpisodeNumber:]
  -[MRContentItemMetadata setAlternativeFormats:]
  -[MRContentItemMetadata preferredFormat]
  -[MRContentItemMetadata setAlbumYear:]
  -[MRContentItemMetadata setHasStartTime:]
  -[MRContentItemMetadata setActiveFormat:]
  -[MRContentItemMetadata playCount]
  -[MRContentItemMetadata setTrackArtistName:]
  -[MRContentItemMetadata discNumber]
  -[MRContentItemMetadata editingStyleFlags]
  -[MRContentItemMetadata formatTierPreference]
  -[MRContentItemMetadata episodeType]
  -[MRContentItemMetadata setDefaultPlaybackRate:]
  -[MRContentItemMetadata setExplicitItem:]
  -[MRContentItemMetadata setDeviceSpecificUserInfo:]
  -[MRContentItemMetadata seriesName]
  -[MRContentItemMetadata currentPlaybackDate]
  -[MRContentItemMetadata setSteerable:]
  -[MRContentItemMetadata setCollectionInfo:]
  -[MRContentItemMetadata setDirectorName:]
  -[MRContentItemMetadata setTotalDiscCount:]
  -[MRContentItemMetadata isExplicitItem]
  -[MRContentItemMetadata setActiveFormatJustification:]
  -[MRContentItemMetadata setCollectionIdentifier:]
  -[MRContentItemMetadata audioRoute]
  -[MRContentItemMetadata setArtworkURLTemplates:]
  -[MRContentItemMetadata setAlbumTraits:]
  -[MRContentItemMetadata radioStationName]
  -[MRContentItemMetadata setElapsedTime:]
  -[MRContentItemMetadata albumYear]
  -[MRContentItemMetadata hasInfoAvailable]
  -[MRContentItemMetadata albumArtistName]
  -[MRContentItemMetadata hasAlbumTraits]
  -[MRContentItemMetadata totalDiscCount]
  -[MRContentItemMetadata defaultPlaybackRate]
  -[MRContentItemMetadata playlistTraits]
  -[MRContentItemMetadata setAdvertisement:]
  -[MRContentItemMetadata localizedContentRating]
  -[MRContentItemMetadata activeFormatJustification]
  -[MRContentItemMetadata hasNumberOfSections]
  -[MRContentItemMetadata setArtworkURL:]
  -[MRContentItemMetadata setSeasonNumber:]
  -[MRContentItemMetadata iTunesStoreArtistIdentifier]
  -[MRContentItemMetadata setAlbumArtistName:]
  -[MRContentItemMetadata setUserInfo:]
  -[MRContentItemMetadata elapsedTimeTimestamp]
  -[MRContentItemMetadata setLyricsURL:]
  -[MRContentItemMetadata setProfileIdentifier:]
  -[MRContentItemMetadata episodeNumber]
  -[MRContentItemMetadata artworkURLTemplates]
  -[MRContentItemMetadata setLoading:]
  -[MRContentItemMetadata isAlwaysLive]
  -[MRContentItemMetadata activeFormat]
  -[MRContentItemMetadata mergeFrom:]
  -[MRContentItemMetadata setTrackNumber:]
  -[MRContentItemMetadata directorName]
  -[MRContentItemMetadata setAlbumName:]
  -[MRContentItemMetadata setAudioRoute:]
  -[MRContentItemMetadata setPlayCount:]
  -[MRContentItemMetadata setRadioStationType:]
  -[MRContentItemMetadata setEditingStyleFlags:]
  -[MRContentItemMetadata setFormatTierPreference:]
  -[MRContentItemMetadata setDiscNumber:]
  -[MRContentItemMetadata totalTrackCount]
  -[MRContentItemMetadata trackNumber]
  -[MRContentItemMetadata hasITunesStoreIdentifier]
  -[MRContentItemMetadata hasLegacyUniqueIdentifier]
  -[MRContentItemMetadata setGenre:]
  -[MRContentItemMetadata hasAlwaysLive]
  -[MRContentItemMetadata hasMediaType]
  -[MRContentItemMetadata genre]
  -[MRContentItemMetadata calculatedPlaybackPosition]
  -[MRContentItemMetadata elapsedTime]
  -[MRContentItemMetadata iTunesStoreIdentifier]
  -[MRContentItemMetadata setArtworkFileURL:]
  -[MRContentItemMetadata setDownloadState:]
  -[MRContentItemMetadata hasSongTraits]
  -[MRContentItemMetadata setHasInferredTimestamp:]
  -[MRContentItemMetadata setHasDuration:]
  -[MRContentItemMetadata setHasTotalDiscCount:]
  -[MRContentItemMetadata setServiceIdentifier:]
  -[MRContentItemMetadata appMetrics]
  -[MRContentItemMetadata setTitle:]
  -[MRContentItemMetadata serviceIdentifier]
  -[MRContentItemMetadata seasonNumber]
  -[MRContentItemMetadata setStartTime:]
  -[MRContentItemMetadata setHasTrackNumber:]
  -[MRContentItemMetadata setHasITunesStoreSubscriptionIdentifier:]
  -[MRContentItemMetadata lyricsURL]
  -[MRContentItemMetadata setParticipantName:]
  -[MRContentItemMetadata hasLyricsAvailable]
  -[MRContentItemMetadata hasTrackNumber]
  -[MRContentItemMetadata setAppMetrics:]
  -[MRContentItemMetadata setHasInfoAvailable:]
  -[MRContentItemMetadata setHasDiscNumber:]
  -[MRContentItemMetadata isContainer]
  -[MRContentItemMetadata isLoading]
  -[MRContentItemMetadata setHasLegacyUniqueIdentifier:]
  -[MRContentItemMetadata setRadioStationIdentifier:]
  -[MRContentItemMetadata numberOfSections]
  -[MRContentItemMetadata setHasSeasonNumber:]
  -[MRContentItemMetadata .cxx_destruct]
  -[MRContentItemMetadata setInferredTimestamp:]
  -[MRContentItemMetadata setHasChapterCount:]
  -[MRContentItemMetadata hasElapsedTimeTimestamp]
  -[MRContentItemMetadata setHasAdvertisement:]
  -[MRContentItemMetadata setStreamingContent:]
  -[MRContentItemMetadata setDuration:]
  -[MRContentItemMetadata profileIdentifier]
  -[MRContentItemMetadata dictionaryRepresentation]
  -[MRContentItemMetadata composer]
  -[MRContentItemMetadata setHasStreamingContent:]
  -[MRContentItemMetadata setHasSongTraits:]
  -[MRContentItemMetadata setAssetURL:]
  -[MRContentItemMetadata setArtworkDataWidthDeprecated:]
  -[MRContentItemMetadata hasDownloadProgress]
  -[MRContentItemMetadata purchaseInfoData]
  -[MRContentItemMetadata setLanguageOptionsAvailable:]
  -[MRContentItemMetadata setSubtitle:]
  -[MRContentItemMetadata artworkDataWidthDeprecated]
  -[MRContentItemMetadata hasPlaylistTraits]
  -[MRContentItemMetadata setComposer:]
  -[MRContentItemMetadata inferredTimestamp]
  -[MRContentItemMetadata hasEditingStyleFlags]
  -[MRContentItemMetadata hasDefaultPlaybackRate]
  -[MRContentItemMetadata isInWishList]
  -[MRContentItemMetadata brandIdentifier]
  -[MRContentItemMetadata hasActiveFormatJustification]
  -[MRContentItemMetadata setHasRadioStationType:]
  -[MRContentItemMetadata setMediaSubType:]
  -[MRContentItemMetadata data]
  -[MRContentItemMetadata hasSteerable]
  -[MRContentItemMetadata setHasExplicitItem:]
  -[MRContentItemMetadata setHasLiked:]
  -[MRContentItemMetadata setLyricsAvailable:]
  -[MRContentItemMetadata setHasITunesStoreArtistIdentifier:]
  -[MRContentItemMetadata hasExplicitItem]
  -[MRContentItemMetadata artworkFileURL]
  -[MRContentItemMetadata setHasContainer:]
  -[MRContentItemMetadata mediaSubType]
  -[MRContentItemMetadata isCurrentlyPlaying]
  -[MRContentItemMetadata hasTotalDiscCount]
  -[MRContentItemMetadata setContainer:]
  -[MRContentItemMetadata setHasDownloadProgress:]
  -[MRContentItemMetadata setHasPlaylistTraits:]
  -[MRContentItemMetadata hasITunesStoreAlbumIdentifier]
  -[MRContentItemMetadata isEqual:]
  -[MRContentItemMetadata hasITunesStoreArtistIdentifier]
  -[MRContentItemMetadata setHasActiveFormatJustification:]
  -[MRContentItemMetadata setHasTotalTrackCount:]
  -[MRContentItemMetadata hasLoadingPlaceholderTitle]
  -[MRContentItemMetadata hasInWishList]
  -[MRContentItemMetadata hasArtworkDataWidthDeprecated]
  -[MRContentItemMetadata setHasPlayable:]
  -[MRContentItemMetadata setHasArtworkAvailable:]
  -[MRContentItemMetadata setHasElapsedTimeTimestamp:]
  -[MRContentItemMetadata setHasEpisodeType:]
  -[MRContentItemMetadata setArtworkDataHeightDeprecated:]
  -[MRContentItemMetadata protobuf]
  -[MRContentItemMetadata radioStationIdentifier]
  -[MRContentItemMetadata participantIdentifier]
  -[MRContentItemMetadata iTunesStoreSubscriptionIdentifier]
  -[MRContentItemMetadata subtitle]
  -[MRContentItemMetadata startTime]
  -[MRContentItemMetadata setHasCurrentlyPlaying:]
  -[MRContentItemMetadata setLiked:]
  -[MRContentItemMetadata setHasPlaylistType:]
  -[MRContentItemMetadata languageOptionsAvailable]
  -[MRContentItemMetadata setElapsedTimeTimestamp:]
  -[MRContentItemMetadata setITunesStoreSubscriptionIdentifier:]
  -[MRContentItemMetadata setPurchaseInfoData:]
  -[MRContentItemMetadata hasChapterCount]
  -[MRContentItemMetadata hasITunesStoreSubscriptionIdentifier]
  -[MRContentItemMetadata hasMediaSubType]
  -[MRContentItemMetadata hasLiked]
  -[MRContentItemMetadata initWithProtobuf:]
  -[MRContentItemMetadata setHasSteerable:]
  -[MRContentItemMetadata artworkDataHeightDeprecated]
  -[MRContentItemMetadata hasPlayCount]
  -[MRContentItemMetadata contentIdentifier]
  -[MRContentItemMetadata hasRadioStationType]
  -[MRContentItemMetadata setHasPlayCount:]
  -[MRContentItemMetadata hasStreamingContent]
  -[MRContentItemMetadata title]
  -[MRContentItemMetadata initWithData:]
  -[MRContentItemMetadata setAlwaysLive:]
  -[MRContentItemMetadata setHasPlaybackProgress:]
  -[MRContentItemMetadata setHasElapsedTime:]
  -[MRContentItemMetadata hasLoading]
  -[MRContentItemMetadata setCurrentlyPlaying:]
  -[MRContentItemMetadata hasCurrentlyPlaying]
  -[MRContentItemMetadata setHasLanguageOptionsAvailable:]
  -[MRContentItemMetadata hasEpisodeType]
  -[MRContentItemMetadata radioStationString]
  -[MRContentItemMetadata isStreamingContent]
  -[MRContentItemMetadata calculatedPlaybackPositionFromDate:]
  -[MRContentItemMetadata legacyUniqueIdentifier]
  -[MRContentItemMetadata setHasSharable:]
  -[MRContentItemMetadata setHasAlbumTraits:]
  -[MRContentItemMetadata setContentIdentifier:]
  -[MRContentItemMetadata setHasMediaSubType:]
  -[MRContentItemMetadata hasLanguageOptionsAvailable]
  -[MRContentItemMetadata hasArtworkDataHeightDeprecated]
  -[MRContentItemMetadata iTunesStoreAlbumIdentifier]
  -[MRContentItemMetadata hasArtworkAvailable]
  -[MRContentItemMetadata hasPlayable]
  -[MRContentItemMetadata setHasDownloadState:]
  -[MRContentItemMetadata hasSharable]
  -[MRContentItemMetadata mediaType]
  -[MRContentItemMetadata hasTotalTrackCount]
  -[MRContentItemMetadata hasPlaybackProgress]
  -[MRContentItemMetadata hasPlaylistType]
  -[MRContentItemMetadata setPlaybackProgress:]
  -[MRContentItemMetadata hasInferredTimestamp]
  -[MRContentItemMetadata hasEpisodeNumber]
  -[MRContentItemMetadata hasContainer]
  -[MRContentItemMetadata userInfo]
  -[MRContentItemMetadata setChapterCount:]
  -[MRContentItemMetadata setLegacyUniqueIdentifier:]
  -[MRContentItemMetadata setHasEditingStyleFlags:]
  -[MRContentItemMetadata setHasAlwaysLive:]
  -[MRContentItemMetadata setHasLoading:]
  -[MRContentItemMetadata setNumberOfSections:]
  -[MRContentItemMetadata participantName]
  -[MRContentItemMetadata setHasEpisodeNumber:]
  -[MRContentItemMetadata setHasITunesStoreAlbumIdentifier:]
  -[MRContentItemMetadata setHasMediaType:]
  -[MRContentItemMetadata setArtworkMIMEType:]
  -[MRContentItemMetadata lyricsAvailable]
  -[MRContentItemMetadata isSharable]
  -[MRContentItemMetadata copyWithZone:]
  -[MRContentItemMetadata setHasFormatTierPreference:]
  -[MRContentItemMetadata setBrandIdentifier:]
  -[MRContentItemMetadata setHasInWishList:]
  -[MRContentItemMetadata setHasITunesStoreIdentifier:]
  -[MRContentItemMetadata downloadState]
  -[MRContentItemMetadata hasElapsedTime]
  -[MRContentItemMetadata artworkMIMEType]
  -[MRContentItemMetadata setInWishList:]
  -[MRContentItemMetadata setPlayable:]
  -[MRContentItemMetadata setArtworkAvailable:]
  -[MRContentItemMetadata hasDownloadState]
  -[MRContentItemMetadata chapterCount]
  -[MRContentItemMetadata setHasLyricsAvailable:]
  -[MRContentItemMetadata setHasRadioStationIdentifier:]
  -[MRContentItemMetadata hasRadioStationIdentifier]
  -[MRContentItemMetadata setITunesStoreArtistIdentifier:]
  -[MRContentItemMetadata setHasPlaybackRate:]
  -[MRContentItemMetadata setITunesStoreAlbumIdentifier:]
  -[MRContentItemMetadata hasSeasonNumber]
  -[MRContentItemMetadata hasAdvertisement]
  -[MRContentItemMetadata infoAvailable]
  -[MRContentItemMetadata hasPlaybackRate]
  -[MRContentItemMetadata setInfoAvailable:]
  -[MRContentItemMetadata hasDiscNumber]
  -[MRContentItemMetadata isPlayable]
  -[MRContentItemMetadata duration]
  -[MRContentItemMetadata setHasDefaultPlaybackRate:]
  -[MRContentItemMetadata hasDuration]
  -[MRContentItemMetadata setSharable:]
  -[MRContentItemMetadata artworkAvailable]
  -[MRContentItemMetadata hasFormatTierPreference]
  -[MRContentItemMetadata assetURL]
  -[MRContentItemMetadata setRadioStationString:]


_MRReceivedCommandAppOptionsProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRReceivedCommandAppOptionsProtobuf dictionaryRepresentation]
  -[_MRReceivedCommandAppOptionsProtobuf writeTo:]
  -[_MRReceivedCommandAppOptionsProtobuf isEqual:]
  -[_MRReceivedCommandAppOptionsProtobuf readFrom:]
  -[_MRReceivedCommandAppOptionsProtobuf copyWithZone:]


MRCreateHostedEndpointRequestMessage : MRProtocolMessage
 @property  NSArray *outputDeviceUIDs

  // instance methods
  -[MRCreateHostedEndpointRequestMessage outputDeviceUIDs]
  -[MRCreateHostedEndpointRequestMessage initWithOutputDeviceUIDs:]
  -[MRCreateHostedEndpointRequestMessage type]


MRConfigureConnectionMessage : MRProtocolMessage
 @property  NSString *groupID

  // instance methods
  -[MRConfigureConnectionMessage groupID]
  -[MRConfigureConnectionMessage setGroupID:]
  -[MRConfigureConnectionMessage initWithGroupID:]
  -[MRConfigureConnectionMessage initWithUnderlyingCodableMessage:error:]
  -[MRConfigureConnectionMessage type]


MRAVExternalRoutingDiscoverySession : MRAVRoutingDiscoverySession <MREndpointObserver>
 @property  MRAVEndpoint *destination
 @property  MRExternalDevice *externalDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRAVExternalRoutingDiscoverySession availableOutputDevices]
  -[MRAVExternalRoutingDiscoverySession availableEndpoints]
  -[MRAVExternalRoutingDiscoverySession setDestination:]
  -[MRAVExternalRoutingDiscoverySession devicePresenceDetected]
  -[MRAVExternalRoutingDiscoverySession .cxx_destruct]
  -[MRAVExternalRoutingDiscoverySession discoveryMode]
  -[MRAVExternalRoutingDiscoverySession endpointDidDisconnect:]
  -[MRAVExternalRoutingDiscoverySession externalDevice]
  -[MRAVExternalRoutingDiscoverySession destination]
  -[MRAVExternalRoutingDiscoverySession endpointFeatures]
  -[MRAVExternalRoutingDiscoverySession setExternalDevice:]
  -[MRAVExternalRoutingDiscoverySession setDiscoveryMode:]
  -[MRAVExternalRoutingDiscoverySession initWithConfiguration:]


MRAVLocalEndpoint : MRAVOutputContextEndpoint
 @property  MRAVRoutingDiscoverySession *audioDiscoverySession

  // class methods
  +[MRAVLocalEndpoint sharedLocalEndpointForRoutingContextWithUID:]
  +[MRAVLocalEndpoint sharedLocalEndpoint]

  // instance methods
  -[MRAVLocalEndpoint setAllowsHeadTrackedSpatialAudio:outputDeviceUID:queue:completion:]
  -[MRAVLocalEndpoint groupLeader]
  -[MRAVLocalEndpoint setListeningMode:outputDeviceUID:queue:completion:]
  -[MRAVLocalEndpoint setHeadTrackedSpatialAudioMode:outputDeviceUID:queue:completion:]
  -[MRAVLocalEndpoint audioDiscoverySession]


MRAVDistantOutputDevice : MRAVOutputDevice <NSSecureCoding>
 @property  _MRAVOutputDeviceDescriptorProtobuf *protobuf

  // class methods
  +[MRAVDistantOutputDevice supportsSecureCoding]

  // instance methods
  -[MRAVDistantOutputDevice clusterType]
  -[MRAVDistantOutputDevice isAddedToHomeKit]
  -[MRAVDistantOutputDevice supportsRapportRemoteControlTransport]
  -[MRAVDistantOutputDevice supportsSharePlayHandoff]
  -[MRAVDistantOutputDevice parentGroupContainsDiscoverableLeader]
  -[MRAVDistantOutputDevice canRelayCommunicationChannel]
  -[MRAVDistantOutputDevice primaryID]
  -[MRAVDistantOutputDevice bluetoothID]
  -[MRAVDistantOutputDevice isLocalDevice]
  -[MRAVDistantOutputDevice isAirPlayReceiverSessionActive]
  -[MRAVDistantOutputDevice batteryLevel]
  -[MRAVDistantOutputDevice hostDeviceClass]
  -[MRAVDistantOutputDevice configuredClusterSize]
  -[MRAVDistantOutputDevice canAccessAppleMusic]
  -[MRAVDistantOutputDevice MACAddress]
  -[MRAVDistantOutputDevice hasBatteryLevel]
  -[MRAVDistantOutputDevice deviceSubtype]
  -[MRAVDistantOutputDevice currentBluetoothListeningMode]
  -[MRAVDistantOutputDevice isDeviceGroupable]
  -[MRAVDistantOutputDevice presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[MRAVDistantOutputDevice logicalDeviceID]
  -[MRAVDistantOutputDevice requiresAuthorization]
  -[MRAVDistantOutputDevice groupContainsGroupLeader]
  -[MRAVDistantOutputDevice canAccessiCloudMusicLibrary]
  -[MRAVDistantOutputDevice groupID]
  -[MRAVDistantOutputDevice producesLowFidelityAudio]
  -[MRAVDistantOutputDevice canFetchMediaDataFromSender]
  -[MRAVDistantOutputDevice modelSpecificInfo]
  -[MRAVDistantOutputDevice sourceInfo]
  -[MRAVDistantOutputDevice availableBluetoothListeningModes]
  -[MRAVDistantOutputDevice airPlayGroupID]
  -[MRAVDistantOutputDevice supportsMultiplayer]
  -[MRAVDistantOutputDevice isRemoteControllable]
  -[MRAVDistantOutputDevice canAccessRemoteAssets]
  -[MRAVDistantOutputDevice clusterComposition]
  -[MRAVDistantOutputDevice parentGroupIdentifier]
  -[MRAVDistantOutputDevice initWithDescriptor:]
  -[MRAVDistantOutputDevice supportsHAP]
  -[MRAVDistantOutputDevice supportsBufferedAirPlay]
  -[MRAVDistantOutputDevice isGroupable]
  -[MRAVDistantOutputDevice canPlayEncryptedProgressiveDownloadAssets]
  -[MRAVDistantOutputDevice isGroupLeader]
  -[MRAVDistantOutputDevice supportsExternalScreen]
  -[MRAVDistantOutputDevice isUsingJSONProtocol]
  -[MRAVDistantOutputDevice uid]
  -[MRAVDistantOutputDevice name]
  -[MRAVDistantOutputDevice volume]
  -[MRAVDistantOutputDevice isProxyGroupPlayer]
  -[MRAVDistantOutputDevice deviceType]
  -[MRAVDistantOutputDevice volumeCapabilities]
  -[MRAVDistantOutputDevice initWithCoder:]
  -[MRAVDistantOutputDevice isVolumeControlAvailable]
  -[MRAVDistantOutputDevice modelID]
  -[MRAVDistantOutputDevice firmwareVersion]
  -[MRAVDistantOutputDevice .cxx_destruct]
  -[MRAVDistantOutputDevice descriptor]
  -[MRAVDistantOutputDevice initWithSkeleton:]
  -[MRAVDistantOutputDevice protobuf]
  -[MRAVDistantOutputDevice encodeWithCoder:]


MRAVRoutingDiscoverySessionWrapper : NSProxy
 @property  MRAVRoutingDiscoverySessionConfiguration *configuration
 @property  MRAVRoutingDiscoverySession *sharedSession

  // instance methods
  -[MRAVRoutingDiscoverySessionWrapper sharedSession]
  -[MRAVRoutingDiscoverySessionWrapper setTargetAudioSessionID:]
  -[MRAVRoutingDiscoverySessionWrapper removeOutputDevicesModifiedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper removeEndpointsAddedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper initWithSession:configuration:]
  -[MRAVRoutingDiscoverySessionWrapper methodSignatureForSelector:]
  -[MRAVRoutingDiscoverySessionWrapper configuration]
  -[MRAVRoutingDiscoverySessionWrapper removeEndpointsChangedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper addOutputDevicesRemovedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper setRoutingContextUID:]
  -[MRAVRoutingDiscoverySessionWrapper .cxx_destruct]
  -[MRAVRoutingDiscoverySessionWrapper discoveryMode]
  -[MRAVRoutingDiscoverySessionWrapper removeEndpointsRemovedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper transferCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper removeEndpointsModifiedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper addEndpointsChangedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper addEndpointsAddedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper setSharedSession:]
  -[MRAVRoutingDiscoverySessionWrapper addOutputDevicesAddedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper addEndpointsRemovedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper transferOutputDevicesChangedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper setPopulatesExternalDevice:]
  -[MRAVRoutingDiscoverySessionWrapper removeOutputDevicesRemovedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper removeOutputDevicesChangedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper reevaluateDiscoveryModeForSession:]
  -[MRAVRoutingDiscoverySessionWrapper addOutputDevicesModifiedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper setAlwaysAllowUpdates:]
  -[MRAVRoutingDiscoverySessionWrapper addEndpointsModifiedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper addOutputDevicesChangedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper removeOutputDevicesAddedCallback:]
  -[MRAVRoutingDiscoverySessionWrapper transferOutputDevicesModifiedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper transferEndpointsRemovedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper setDiscoveryMode:]
  -[MRAVRoutingDiscoverySessionWrapper updateObserversWithPreviousSession:]
  -[MRAVRoutingDiscoverySessionWrapper transferEndpointsModifiedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper updateSharedSession]
  -[MRAVRoutingDiscoverySessionWrapper dealloc]
  -[MRAVRoutingDiscoverySessionWrapper transferEndpointsAddedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper transferEndpointsChangedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper transferOutputDevicesRemovedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper transferOutputDevicesAddedCallbacksFromSession:toSession:]
  -[MRAVRoutingDiscoverySessionWrapper forwardInvocation:]
  -[MRAVRoutingDiscoverySessionWrapper setConfiguration:]


_MRSetRecordingStateMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetRecordingStateMessageProtobuf dictionaryRepresentation]
  -[_MRSetRecordingStateMessageProtobuf writeTo:]
  -[_MRSetRecordingStateMessageProtobuf isEqual:]
  -[_MRSetRecordingStateMessageProtobuf readFrom:]
  -[_MRSetRecordingStateMessageProtobuf copyWithZone:]


_MRAVRouteQueryProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAVRouteQueryProtobuf .cxx_destruct]
  -[_MRAVRouteQueryProtobuf dictionaryRepresentation]
  -[_MRAVRouteQueryProtobuf writeTo:]
  -[_MRAVRouteQueryProtobuf isEqual:]
  -[_MRAVRouteQueryProtobuf readFrom:]
  -[_MRAVRouteQueryProtobuf copyWithZone:]


_MRGetVolumeResultMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetVolumeResultMessageProtobuf dictionaryRepresentation]
  -[_MRGetVolumeResultMessageProtobuf writeTo:]
  -[_MRGetVolumeResultMessageProtobuf isEqual:]
  -[_MRGetVolumeResultMessageProtobuf readFrom:]
  -[_MRGetVolumeResultMessageProtobuf copyWithZone:]


_MRUpdateActiveSystemEndpointMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdateActiveSystemEndpointMessageProtobuf .cxx_destruct]
  -[_MRUpdateActiveSystemEndpointMessageProtobuf dictionaryRepresentation]
  -[_MRUpdateActiveSystemEndpointMessageProtobuf writeTo:]
  -[_MRUpdateActiveSystemEndpointMessageProtobuf isEqual:]
  -[_MRUpdateActiveSystemEndpointMessageProtobuf readFrom:]
  -[_MRUpdateActiveSystemEndpointMessageProtobuf copyWithZone:]


MRCompanionLinkClientEvent : NSObject
 @property  NSString *eventID
 @property  NSDictionary *userInfo
 @property  NSString *destination
 @property  NSString *uid

  // instance methods
  -[MRCompanionLinkClientEvent uid]
  -[MRCompanionLinkClientEvent setUserInfo:]
  -[MRCompanionLinkClientEvent setDestination:]
  -[MRCompanionLinkClientEvent .cxx_destruct]
  -[MRCompanionLinkClientEvent destination]
  -[MRCompanionLinkClientEvent setEventID:]
  -[MRCompanionLinkClientEvent eventID]
  -[MRCompanionLinkClientEvent userInfo]
  -[MRCompanionLinkClientEvent setUid:]


MRCompanionLinkClientRequest : MRCompanionLinkClientEvent
 @property  NSDate *date
 @property  @? callback

  // instance methods
  -[MRCompanionLinkClientRequest setCallback:]
  -[MRCompanionLinkClientRequest callback]
  -[MRCompanionLinkClientRequest .cxx_destruct]
  -[MRCompanionLinkClientRequest setDate:]
  -[MRCompanionLinkClientRequest date]


MRCompanionLinkClient : NSObject
 @property  RPCompanionLinkClient *connection
 @property  NSMutableDictionary *eventCallbacks
 @property  NSMutableDictionary *requestCallbacks
 @property  NSArray *companionLinkDevices

  // class methods
  +[MRCompanionLinkClient rapportCompanionLinkClient:]
  +[MRCompanionLinkClient sharedIDSCompanionLinkClient]
  +[MRCompanionLinkClient sharedCompanionLinkClient]

  // instance methods
  -[MRCompanionLinkClient nameForUID:]
  -[MRCompanionLinkClient eventCallbacks]
  -[MRCompanionLinkClient sendEventToCompanion:userInfo:]
  -[MRCompanionLinkClient _sendRequest:userInfo:destination:uid:date:response:]
  -[MRCompanionLinkClient setEventCallbacks:]
  -[MRCompanionLinkClient .cxx_destruct]
  -[MRCompanionLinkClient initWithOptions:]
  -[MRCompanionLinkClient companionLinkDevices]
  -[MRCompanionLinkClient setConnection:]
  -[MRCompanionLinkClient _registerRequest:]
  -[MRCompanionLinkClient sendEventToHome:userInfo:]
  -[MRCompanionLinkClient registerRequest:callback:]
  -[MRCompanionLinkClient connection]
  -[MRCompanionLinkClient sendEvent:toDevicesOfHomeUser:userInfo:]
  -[MRCompanionLinkClient _resolveEventID:]
  -[MRCompanionLinkClient rapportUIDForDeviceUID:]
  -[MRCompanionLinkClient setRequestCallbacks:]
  -[MRCompanionLinkClient requestCallbacks]
  -[MRCompanionLinkClient _handleEventID:event:options:]
  -[MRCompanionLinkClient sendEvent:destination:userInfo:]
  -[MRCompanionLinkClient _registerEvent:]
  -[MRCompanionLinkClient registerEvent:callback:]
  -[MRCompanionLinkClient deviceUIDForRapportUID:]
  -[MRCompanionLinkClient removeCallback:]
  -[MRCompanionLinkClient sendRequest:destination:userInfo:timeout:response:]
  -[MRCompanionLinkClient _enqueueEvent:userInfo:destination:uid:]
  -[MRCompanionLinkClient _enqueueRequest:userInfo:destination:uid:date:response:]
  -[MRCompanionLinkClient _handleRequestID:request:options:response:]
  -[MRCompanionLinkClient _sendEvent:userInfo:destination:uid:]


_MRVolumeControlCapabilitiesDidChangeMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVolumeControlCapabilitiesDidChangeMessageProtobuf .cxx_destruct]
  -[_MRVolumeControlCapabilitiesDidChangeMessageProtobuf dictionaryRepresentation]
  -[_MRVolumeControlCapabilitiesDidChangeMessageProtobuf writeTo:]
  -[_MRVolumeControlCapabilitiesDidChangeMessageProtobuf isEqual:]
  -[_MRVolumeControlCapabilitiesDidChangeMessageProtobuf readFrom:]
  -[_MRVolumeControlCapabilitiesDidChangeMessageProtobuf copyWithZone:]


_MRSendVirtualTouchEventMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendVirtualTouchEventMessageProtobuf .cxx_destruct]
  -[_MRSendVirtualTouchEventMessageProtobuf dictionaryRepresentation]
  -[_MRSendVirtualTouchEventMessageProtobuf writeTo:]
  -[_MRSendVirtualTouchEventMessageProtobuf isEqual:]
  -[_MRSendVirtualTouchEventMessageProtobuf readFrom:]
  -[_MRSendVirtualTouchEventMessageProtobuf copyWithZone:]


MRContentItemMetadataAudioRoute : NSObject <NSCopying>
 @property  _MRAudioRouteProtobuf *protobuf
 @property  BOOL hasType
 @property  long long type
 @property  NSString *name
 @property  BOOL hasSupportsSpatialization
 @property  BOOL supportsSpatialization
 @property  BOOL hasSpatializationEnabled
 @property  BOOL spatializationEnabled
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[MRContentItemMetadataAudioRoute name]
  -[MRContentItemMetadataAudioRoute setType:]
  -[MRContentItemMetadataAudioRoute .cxx_destruct]
  -[MRContentItemMetadataAudioRoute dictionaryRepresentation]
  -[MRContentItemMetadataAudioRoute setName:]
  -[MRContentItemMetadataAudioRoute setHasType:]
  -[MRContentItemMetadataAudioRoute hasType]
  -[MRContentItemMetadataAudioRoute isEqual:]
  -[MRContentItemMetadataAudioRoute protobuf]
  -[MRContentItemMetadataAudioRoute initWithProtobuf:]
  -[MRContentItemMetadataAudioRoute supportsSpatialization]
  -[MRContentItemMetadataAudioRoute setSpatializationEnabled:]
  -[MRContentItemMetadataAudioRoute setSupportsSpatialization:]
  -[MRContentItemMetadataAudioRoute hasSupportsSpatialization]
  -[MRContentItemMetadataAudioRoute hasSpatializationEnabled]
  -[MRContentItemMetadataAudioRoute isSpatializationEnabled]
  -[MRContentItemMetadataAudioRoute setHasSupportsSpatialization:]
  -[MRContentItemMetadataAudioRoute setHasSpatializationEnabled:]
  -[MRContentItemMetadataAudioRoute type]
  -[MRContentItemMetadataAudioRoute copyWithZone:]


MRAVOutputDevice : NSObject
 @property  NSString *airPlayGroupID
 @property  NSString *groupContextID
 @property  NSString *parentGroupIdentifier
 @property  NSString *baseParentGroupID
 @property  NSString *primaryID
 @property  float volume
 @property  BOOL supportsRapportRemoteControlTransport
 @property  BOOL supportsSharePlayHandoff
 @property  MRAVEndpoint *endpoint
 @property  MRAVOutputDeviceSourceInfo *sourceInfo
 @property  _MRAVOutputDeviceDescriptorProtobuf *descriptor
 @property  NSString *logicalDeviceID
 @property  BOOL supportsRapport
 @property  BOOL isAddedToHomeKit
 @property  BOOL auxiliary
 @property  NSString *currentBluetoothListeningMode
 @property  NSArray *availableBluetoothListeningModes
 @property  BOOL supportsHeadTrackedSpatialAudio
 @property  BOOL allowsHeadTrackedSpatialAudio
 @property  BOOL headTrackedSpatialAudioActive
 @property  NSString *headTrackedSpatialAudioMode
 @property  BOOL primaryLocalDevice
 @property  NSString *name
 @property  NSString *uid
 @property  NSString *modelID
 @property  NSString *firmwareVersion
 @property  NSString *groupID
 @property  NSString *baseGroupID
 @property  NSData *MACAddress
 @property  NSDictionary *modelSpecificInfo
 @property  NSString *playingPairedDeviceName
 @property  BOOL canAccessRemoteAssets
 @property  BOOL canAccessAppleMusic
 @property  BOOL canAccessiCloudMusicLibrary
 @property  BOOL canPlayEncryptedProgressiveDownloadAssets
 @property  BOOL canFetchMediaDataFromSender
 @property  BOOL presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL remoteControllable
 @property  BOOL groupLeader
 @property  BOOL groupContainsGroupLeader
 @property  BOOL airPlayReceiverSessionActive
 @property  BOOL groupable
 @property  BOOL supportsBluetoothSharing
 @property  BOOL proxyGroupPlayer
 @property  BOOL canRelayCommunicationChannel
 @property  BOOL supportsBufferedAirPlay
 @property  BOOL canProxyEndpoint
 @property  BOOL supportsMultiplayer
 @property  BOOL eligibleForWHAPlayback
 @property  BOOL shouldBeLocallyHosted
 @property  BOOL supportsMigration
 @property  BOOL deviceGroupable
 @property  BOOL pickedOnPairedDevice
 @property  unsigned int deviceType
 @property  unsigned int deviceSubtype
 @property  long long hostDeviceClass
 @property  NSArray *clusterComposition
 @property  unsigned long configuredClusterSize
 @property  unsigned int clusterType
 @property  float batteryLevel
 @property  BOOL hasBatteryLevel
 @property  BOOL localDevice
 @property  BOOL supportsExternalScreen
 @property  BOOL requiresAuthorization
 @property  BOOL parentGroupContainsDiscoverableLeader
 @property  BOOL volumeControlAvailable
 @property  unsigned int volumeCapabilities
 @property  BOOL isPersonalRoute
 @property  BOOL producesLowFidelityAudio
 @property  NSString *bluetoothID
 @property  NSString *debugName
 @property  BOOL usingJSONProtocol
 @property  BOOL supportsHAP
 @property  NSString *capabilitiesDescription
 @property  NSString *composedTypeDescription
 @property  NSString *roleDescription
 @property  NSDictionary *jsonEncodableDictionaryRepresentation

  // class methods
  +[MRAVOutputDevice localDeviceLocalizedName]
  +[MRAVOutputDevice localDeviceUID]

  // instance methods
  -[MRAVOutputDevice headTrackedSpatialAudioMode]
  -[MRAVOutputDevice clusterType]
  -[MRAVOutputDevice groupContextID]
  -[MRAVOutputDevice isAddedToHomeKit]
  -[MRAVOutputDevice supportsRapportRemoteControlTransport]
  -[MRAVOutputDevice supportsSharePlayHandoff]
  -[MRAVOutputDevice parentGroupContainsDiscoverableLeader]
  -[MRAVOutputDevice roleDescription]
  -[MRAVOutputDevice isEligibleForWHAPlayback]
  -[MRAVOutputDevice canRelayCommunicationChannel]
  -[MRAVOutputDevice supportsHeadTrackedSpatialAudio]
  -[MRAVOutputDevice containsUID:]
  -[MRAVOutputDevice supportsMigration]
  -[MRAVOutputDevice composedTypeDescription]
  -[MRAVOutputDevice primaryID]
  -[MRAVOutputDevice bluetoothID]
  -[MRAVOutputDevice shouldBeLocallyHosted]
  -[MRAVOutputDevice isLocalDevice]
  -[MRAVOutputDevice jsonEncodableDictionaryRepresentation]
  -[MRAVOutputDevice isAirPlayReceiverSessionActive]
  -[MRAVOutputDevice batteryLevel]
  -[MRAVOutputDevice hostDeviceClass]
  -[MRAVOutputDevice setPrimaryID:]
  -[MRAVOutputDevice configuredClusterSize]
  -[MRAVOutputDevice canAccessAppleMusic]
  -[MRAVOutputDevice MACAddress]
  -[MRAVOutputDevice hasBatteryLevel]
  -[MRAVOutputDevice supportsBluetoothSharing]
  -[MRAVOutputDevice deviceSubtype]
  -[MRAVOutputDevice baseGroupID]
  -[MRAVOutputDevice allowsHeadTrackedSpatialAudio]
  -[MRAVOutputDevice isAuxiliary]
  -[MRAVOutputDevice currentBluetoothListeningMode]
  -[MRAVOutputDevice supportsRapport]
  -[MRAVOutputDevice isDeviceGroupable]
  -[MRAVOutputDevice presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[MRAVOutputDevice logicalDeviceID]
  -[MRAVOutputDevice baseParentGroupID]
  -[MRAVOutputDevice requiresAuthorization]
  -[MRAVOutputDevice groupContainsGroupLeader]
  -[MRAVOutputDevice canAccessiCloudMusicLibrary]
  -[MRAVOutputDevice setParentGroupIdentifier:]
  -[MRAVOutputDevice playingPairedDeviceName]
  -[MRAVOutputDevice groupID]
  -[MRAVOutputDevice isPersonalRoute]
  -[MRAVOutputDevice producesLowFidelityAudio]
  -[MRAVOutputDevice canFetchMediaDataFromSender]
  -[MRAVOutputDevice modelSpecificInfo]
  -[MRAVOutputDevice sourceInfo]
  -[MRAVOutputDevice availableBluetoothListeningModes]
  -[MRAVOutputDevice airPlayGroupID]
  -[MRAVOutputDevice debugName]
  -[MRAVOutputDevice supportsMultiplayer]
  -[MRAVOutputDevice isRemoteControllable]
  -[MRAVOutputDevice isEqualToOutputDevice:]
  -[MRAVOutputDevice canAccessRemoteAssets]
  -[MRAVOutputDevice clusterComposition]
  -[MRAVOutputDevice isPrimaryLocalDevice]
  -[MRAVOutputDevice parentGroupIdentifier]
  -[MRAVOutputDevice capabilitiesDescription]
  -[MRAVOutputDevice isPickedOnPairedDevice]
  -[MRAVOutputDevice supportsHAP]
  -[MRAVOutputDevice supportsBufferedAirPlay]
  -[MRAVOutputDevice setAirPlayGroupID:]
  -[MRAVOutputDevice isGroupable]
  -[MRAVOutputDevice canPlayEncryptedProgressiveDownloadAssets]
  -[MRAVOutputDevice canProxyEndpoint]
  -[MRAVOutputDevice isGroupLeader]
  -[MRAVOutputDevice supportsExternalScreen]
  -[MRAVOutputDevice isUsingJSONProtocol]
  -[MRAVOutputDevice isHeadTrackedSpatialAudioActive]
  -[MRAVOutputDevice uid]
  -[MRAVOutputDevice name]
  -[MRAVOutputDevice volume]
  -[MRAVOutputDevice isProxyGroupPlayer]
  -[MRAVOutputDevice deviceType]
  -[MRAVOutputDevice setDescriptor:]
  -[MRAVOutputDevice volumeCapabilities]
  -[MRAVOutputDevice isVolumeControlAvailable]
  -[MRAVOutputDevice setVolume:]
  -[MRAVOutputDevice modelID]
  -[MRAVOutputDevice firmwareVersion]
  -[MRAVOutputDevice .cxx_destruct]
  -[MRAVOutputDevice descriptor]
  -[MRAVOutputDevice isEqual:]
  -[MRAVOutputDevice setEndpoint:]
  -[MRAVOutputDevice endpoint]


MRExpanseManager : NSObject <TUConversationManagerDelegate, TUNeighborhoodActivityConduitDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *notifyQueue
 @property  NSHashTable *observers
 @property  TUConversationManager *conversationManager
 @property  TUNeighborhoodActivityConduit *conduit
 @property  AVAudioSession *auxiliaryPlaybackAudioSession
 @property  BOOL expanseSessionActive
 @property  BOOL expanseSessionHasActiveActivity
 @property  BOOL expanseSessionHasRemoteActivity
 @property  BOOL expanseHandoffSupported
 @property  NSString *activeTelevisionRouteID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRExpanseManager sharedManager]

  // instance methods
  -[MRExpanseManager notifyQueue]
  -[MRExpanseManager .cxx_destruct]
  -[MRExpanseManager conduit]
  -[MRExpanseManager conversationManager:stateChangedForConversation:]
  -[MRExpanseManager activeActivityExistsForBundle:]
  -[MRExpanseManager initWithQueue:]
  -[MRExpanseManager addObserver:]
  -[MRExpanseManager activeConversation]
  -[MRExpanseManager activeTelevisionRouteID]
  -[MRExpanseManager auxiliaryPlaybackAudioSession]
  -[MRExpanseManager setAuxiliaryPlaybackAudioSession:]
  -[MRExpanseManager _notifyObserversThatExpanseSessionJoined]
  -[MRExpanseManager _notifyObserversThatExpanseSessionLeft]
  -[MRExpanseManager expanseSessionActive]
  -[MRExpanseManager _handleExpanseSessionJoined]
  -[MRExpanseManager _handleExpanseSessionLeft]
  -[MRExpanseManager queue]
  -[MRExpanseManager _handleConversationStateChanged]
  -[MRExpanseManager expanseSessionHasRemoteActivity]
  -[MRExpanseManager _notifyObserversThatTelevisionJoinedSession]
  -[MRExpanseManager expanseSessionHasActiveActivity]
  -[MRExpanseManager _notifyObserversThatTelevisionLeftSession]
  -[MRExpanseManager observers]
  -[MRExpanseManager serverDisconnectedForConversationManager:]
  -[MRExpanseManager dealloc]
  -[MRExpanseManager expanseHandoffSupported]
  -[MRExpanseManager removeObserver:]
  -[MRExpanseManager deviceIsActiveTelevision:]
  -[MRExpanseManager neighborhoodActivityConduit:tvDeviceAppeared:]
  -[MRExpanseManager neighborhoodActivityConduit:tvDeviceDisappeared:]
  -[MRExpanseManager neighborhoodActivityConduit:splitSessionStarted:]
  -[MRExpanseManager neighborhoodActivityConduit:splitSessionEnded:]
  -[MRExpanseManager addTelevisionWithRouteIdentifierToSession:completion:]
  -[MRExpanseManager removeTelevisionWithRouteIdentifierFromSession:completion:]
  -[MRExpanseManager conversationManager]


MRAVDistantExternalDeviceMetadata : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  NSString *name
 @property  NSString *hostName
 @property  long long hostPort
 @property  MRDeviceInfo *deviceInfo
 @property  MRSupportedProtocolMessages *supportedMessages
 @property  BOOL usingSystemPairing

  // class methods
  +[MRAVDistantExternalDeviceMetadata supportsSecureCoding]

  // instance methods
  -[MRAVDistantExternalDeviceMetadata deviceInfo]
  -[MRAVDistantExternalDeviceMetadata name]
  -[MRAVDistantExternalDeviceMetadata initWithCoder:]
  -[MRAVDistantExternalDeviceMetadata hostName]
  -[MRAVDistantExternalDeviceMetadata .cxx_destruct]
  -[MRAVDistantExternalDeviceMetadata hostPort]
  -[MRAVDistantExternalDeviceMetadata mutableCopyWithZone:]
  -[MRAVDistantExternalDeviceMetadata supportedMessages]
  -[MRAVDistantExternalDeviceMetadata copyWithZone:]
  -[MRAVDistantExternalDeviceMetadata usingSystemPairing]
  -[MRAVDistantExternalDeviceMetadata encodeWithCoder:]


MRAVMutableDistantExternalDeviceMetadata : MRAVDistantExternalDeviceMetadata
 @property  NSString *name
 @property  NSString *hostName
 @property  long long hostPort
 @property  MRSupportedProtocolMessages *supportedMessages
 @property  MRDeviceInfo *deviceInfo
 @property  BOOL usingSystemPairing

  // instance methods
  -[MRAVMutableDistantExternalDeviceMetadata setDeviceInfo:]
  -[MRAVMutableDistantExternalDeviceMetadata setName:]
  -[MRAVMutableDistantExternalDeviceMetadata setHostName:]
  -[MRAVMutableDistantExternalDeviceMetadata setHostPort:]
  -[MRAVMutableDistantExternalDeviceMetadata setSupportedMessages:]
  -[MRAVMutableDistantExternalDeviceMetadata setUsingSystemPairing:]


MRDistantExternalDevice : MRExternalDevice <MRAVDistantExternalDeviceClientProtocol>
 @property  @? connectionStateCallback
 @property  NSObject<OS_dispatch_queue> *connectionStateCallbackQueue
 @property  @? nameCallback
 @property  NSObject<OS_dispatch_queue> *nameCallbackQueue
 @property  @? customDataCallback
 @property  NSObject<OS_dispatch_queue> *customDataCallbackQueue
 @property  @? volumeCallback
 @property  NSObject<OS_dispatch_queue> *volumeCallbackQueue
 @property  NSXPCListenerEndpoint *listenerEndpoint
 @property  BOOL hasEverAttemptedToConnect
 @property  unsigned long callbacks
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRDistantExternalDevice clientInterface]
  +[MRDistantExternalDevice serviceInterface]

  // instance methods
  -[MRDistantExternalDevice isPaired]
  -[MRDistantExternalDevice connectionState]
  -[MRDistantExternalDevice listenerEndpoint]
  -[MRDistantExternalDevice deviceInfo]
  -[MRDistantExternalDevice outputDeviceVolumeControlCapabilities:queue:completion:]
  -[MRDistantExternalDevice uid]
  -[MRDistantExternalDevice setListeningMode:outputDeviceUID:queue:completion:]
  -[MRDistantExternalDevice setOutputDeviceVolume:outputDeviceUID:queue:completion:]
  -[MRDistantExternalDevice setWantsVolumeNotifications:]
  -[MRDistantExternalDevice setWantsOutputDeviceNotifications:]
  -[MRDistantExternalDevice setWantsNowPlayingArtworkNotifications:]
  -[MRDistantExternalDevice setWantsNowPlayingNotifications:]
  -[MRDistantExternalDevice modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterAwareDeviceUIDs:removingClusterAwareDeviceUIDs:settingClusterAwareDeviceUIDs:withReplyQueue:completion:]
  -[MRDistantExternalDevice setVolumeCallback:withQueue:]
  -[MRDistantExternalDevice name]
  -[MRDistantExternalDevice setConnectionStateCallback:withQueue:]
  -[MRDistantExternalDevice outputDeviceVolume:queue:completion:]
  -[MRDistantExternalDevice unpair]
  -[MRDistantExternalDevice createHostedEndpointWithOutputDeviceUIDs:queue:completion:]
  -[MRDistantExternalDevice subscribedPlayerPaths]
  -[MRDistantExternalDevice setSubscribedPlayerPaths:]
  -[MRDistantExternalDevice hostName]
  -[MRDistantExternalDevice personalOutputDevices]
  -[MRDistantExternalDevice port]
  -[MRDistantExternalDevice isValid]
  -[MRDistantExternalDevice .cxx_destruct]
  -[MRDistantExternalDevice setDiscoveryMode:forConfiguration:]
  -[MRDistantExternalDevice setDiscoveryOutputDevicesChangedCallback:]
  -[MRDistantExternalDevice disconnect:]
  -[MRDistantExternalDevice nameCallback]
  -[MRDistantExternalDevice volumeCallback]
  -[MRDistantExternalDevice supportedMessages]
  -[MRDistantExternalDevice dealloc]
  -[MRDistantExternalDevice customOrigin]
  -[MRDistantExternalDevice sendCustomData:withName:]
  -[MRDistantExternalDevice callbacks]
  -[MRDistantExternalDevice hostedExternalDeviceNameDidChange:]
  -[MRDistantExternalDevice hostedExternalDeviceConnectionStateDidChange:withError:]
  -[MRDistantExternalDevice hostedExternalDeviceDidReceiveCustomData:withName:]
  -[MRDistantExternalDevice hostedExternalDeviceEndpointDidChange:]
  -[MRDistantExternalDevice hostedExternalDeviceEndpoint:didAddOutputDevice:]
  -[MRDistantExternalDevice hostedExternalDeviceEndpoint:volumeCapabilitiesDidChange:forOutputDevice:]
  -[MRDistantExternalDevice hostedExternalDeviceEndpoint:volumeDidChange:forOutputDevice:]
  -[MRDistantExternalDevice hostedExternalDeviceEndpoint:didChangeOutputDevice:]
  -[MRDistantExternalDevice hostedExternalDeviceEndpoint:didRemoveOutputDevice:]
  -[MRDistantExternalDevice discoveryOutputDevicesChanged:forConfiguration:]
  -[MRDistantExternalDevice _handleDeviceInfoDidChange:]
  -[MRDistantExternalDevice connectionStateCallback]
  -[MRDistantExternalDevice setConnectionStateCallback:]
  -[MRDistantExternalDevice setConnectionStateCallbackQueue:]
  -[MRDistantExternalDevice setNameCallback:]
  -[MRDistantExternalDevice setNameCallbackQueue:]
  -[MRDistantExternalDevice customDataCallback]
  -[MRDistantExternalDevice setCustomDataCallback:]
  -[MRDistantExternalDevice setCustomDataCallbackQueue:]
  -[MRDistantExternalDevice setVolumeCallback:]
  -[MRDistantExternalDevice setVolumeCallbackQueue:]
  -[MRDistantExternalDevice connectionStateCallbackQueue]
  -[MRDistantExternalDevice nameCallbackQueue]
  -[MRDistantExternalDevice customDataCallbackQueue]
  -[MRDistantExternalDevice volumeCallbackQueue]
  -[MRDistantExternalDevice initWithExternalDeviceListenerEndpoint:]
  -[MRDistantExternalDevice wantsNowPlayingNotifications]
  -[MRDistantExternalDevice wantsVolumeNotifications]
  -[MRDistantExternalDevice wantsNowPlayingArtworkNotifications]
  -[MRDistantExternalDevice wantsOutputDeviceNotifications]
  -[MRDistantExternalDevice wantsEndpointChangeNotifications]
  -[MRDistantExternalDevice setWantsEndpointChangeNotifications:]
  -[MRDistantExternalDevice wantsSystemEndpointNotifications]
  -[MRDistantExternalDevice isUsingSystemPairing]
  -[MRDistantExternalDevice setWantsSystemEndpointNotifications:]
  -[MRDistantExternalDevice connectWithOptions:clientBundleIdentifier:userInfo:]
  -[MRDistantExternalDevice setPairingCallback:withQueue:]
  -[MRDistantExternalDevice setNameCallback:withQueue:]
  -[MRDistantExternalDevice setPairingAllowedCallback:withQueue:]
  -[MRDistantExternalDevice setCustomDataCallback:withQueue:]
  -[MRDistantExternalDevice ping:callback:withQueue:]
  -[MRDistantExternalDevice sendButtonEvent:]
  -[MRDistantExternalDevice hasEverAttemptedToConnect]


MRLanguageOption : NSObject <NSCopying, NSSecureCoding>
 @property  _MRLanguageOptionProtobuf *protobuf
 @property  unsigned int type
 @property  BOOL hasType
 @property  NSString *languageTag
 @property  NSArray *characteristics
 @property  NSString *displayName
 @property  NSString *identifier
 @property  NSData *data
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[MRLanguageOption automaticLanguageOptionWithType:]
  +[MRLanguageOption supportsSecureCoding]

  // instance methods
  -[MRLanguageOption characteristics]
  -[MRLanguageOption setCharacteristics:]
  -[MRLanguageOption displayName]
  -[MRLanguageOption isAutomaticLanguageOptionWithType:]
  -[MRLanguageOption setLanguageTag:]
  -[MRLanguageOption initWithCoder:]
  -[MRLanguageOption initWithType:languageTag:characteristics:displayName:identifier:]
  -[MRLanguageOption setType:]
  -[MRLanguageOption languageTag]
  -[MRLanguageOption .cxx_destruct]
  -[MRLanguageOption dictionaryRepresentation]
  -[MRLanguageOption setHasType:]
  -[MRLanguageOption data]
  -[MRLanguageOption hasType]
  -[MRLanguageOption isEqual:]
  -[MRLanguageOption identifier]
  -[MRLanguageOption protobuf]
  -[MRLanguageOption setDisplayName:]
  -[MRLanguageOption initWithProtobuf:]
  -[MRLanguageOption initWithData:]
  -[MRLanguageOption type]
  -[MRLanguageOption setIdentifier:]
  -[MRLanguageOption copyWithZone:]
  -[MRLanguageOption encodeWithCoder:]


_MRContentItemMetadataProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRContentItemMetadataProtobuf .cxx_destruct]
  -[_MRContentItemMetadataProtobuf dictionaryRepresentation]
  -[_MRContentItemMetadataProtobuf writeTo:]
  -[_MRContentItemMetadataProtobuf isEqual:]
  -[_MRContentItemMetadataProtobuf readFrom:]
  -[_MRContentItemMetadataProtobuf copyWithZone:]


_MRDiagnosticProtobuf : PBCodable <NSCopying>
 @property  BOOL hasDateGenerated
 @property  double dateGenerated
 @property  BOOL hasDiagnosticInfo
 @property  NSString *diagnosticInfo

  // instance methods
  -[_MRDiagnosticProtobuf mergeFrom:]
  -[_MRDiagnosticProtobuf setDiagnosticInfo:]
  -[_MRDiagnosticProtobuf setDateGenerated:]
  -[_MRDiagnosticProtobuf setHasDateGenerated:]
  -[_MRDiagnosticProtobuf hasDateGenerated]
  -[_MRDiagnosticProtobuf hasDiagnosticInfo]
  -[_MRDiagnosticProtobuf dateGenerated]
  -[_MRDiagnosticProtobuf .cxx_destruct]
  -[_MRDiagnosticProtobuf dictionaryRepresentation]
  -[_MRDiagnosticProtobuf writeTo:]
  -[_MRDiagnosticProtobuf isEqual:]
  -[_MRDiagnosticProtobuf copyTo:]
  -[_MRDiagnosticProtobuf readFrom:]
  -[_MRDiagnosticProtobuf copyWithZone:]
  -[_MRDiagnosticProtobuf diagnosticInfo]


MRDeviceInfoMessage : MRProtocolMessage
 @property  MRDeviceInfo *deviceInfo
 @property  MRSupportedProtocolMessages *supportedProtocolMessages

  // instance methods
  -[MRDeviceInfoMessage deviceInfo]
  -[MRDeviceInfoMessage initWithDeviceInfo:]
  -[MRDeviceInfoMessage supportedProtocolMessages]
  -[MRDeviceInfoMessage .cxx_destruct]
  -[MRDeviceInfoMessage encryptionType]
  -[MRDeviceInfoMessage type]


MRDeviceInfoUpdateMessage : MRDeviceInfoMessage
  // instance methods
  -[MRDeviceInfoUpdateMessage type]


MRQHONowPlayingController : NSObject
 @property  MRNowPlayingPlayerResponse *response
 @property  id playerPathInvalidationObserver
 @property  MRAVEndpointObserver *endpointObserver
 @property  NSString *endpointObserverGroupUID
 @property  NSMutableArray *deferredContentItemsToMerge
 @property  BOOL registeredForNotifications
 @property  BOOL registeredForEndpointChanges
 @property  BOOL registeredForPlayerPathInvalidations
 @property  BOOL updateLoadingEnabled
 @property  BOOL requestingQueue
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSString *cachedNowPlayingArtworkIdentifier
 @property  MRArtwork *cachedNowPlayingArtwork
 @property  NSString *uid
 @property  MRClient *client
 @property  MRPlayer *player
 @property  <MRQHONowPlayingControllerDelegate> *delegate
 @property  MRPlayerPath *unresolvedPlayerPath
 @property  MRPlayerPath *resolvedPlayerPath
 @property  MRAVEndpoint *endpoint

  // class methods
  +[MRQHONowPlayingController proactiveEndpointController]
  +[MRQHONowPlayingController localRouteController]

  // instance methods
  -[MRQHONowPlayingController uid]
  -[MRQHONowPlayingController setRegisteredForEndpointChanges:]
  -[MRQHONowPlayingController delegateQueue]
  -[MRQHONowPlayingController initWithUID:]
  -[MRQHONowPlayingController initWithUID:client:player:]
  -[MRQHONowPlayingController _unregisterForPlayerPathInvalidations]
  -[MRQHONowPlayingController updateLoadingEnabled]
  -[MRQHONowPlayingController setUpdateLoadingEnabled:]
  -[MRQHONowPlayingController _onQueue_updateByReplacingWithNewResponse:]
  -[MRQHONowPlayingController _notifyDelegateOfError:]
  -[MRQHONowPlayingController _notifyDelegateOfNewResponse:]
  -[MRQHONowPlayingController setDelegateQueue:]
  -[MRQHONowPlayingController _loadNowPlayingStateForUID:client:player:completion:]
  -[MRQHONowPlayingController _unregisterForEndpointChanges]
  -[MRQHONowPlayingController _unregisterNotificationHandlers]
  -[MRQHONowPlayingController _onQueue_clearState]
  -[MRQHONowPlayingController _loadNowPlayingStateForEndpoint:client:player:completion:]
  -[MRQHONowPlayingController _registerForEndpointChangesIfNeeded]
  -[MRQHONowPlayingController _onQueue_retrieveEndpointForUID:completion:]
  -[MRQHONowPlayingController setUnresolvedPlayerPath:]
  -[MRQHONowPlayingController _registerForPlayerPathInvalidationsIfNeeded]
  -[MRQHONowPlayingController _registerNotificationHandlersIfNeeded]
  -[MRQHONowPlayingController _loadNowPlayingStateForPlayerPath:error:]
  -[MRQHONowPlayingController _resolvePlayerPath:completion:]
  -[MRQHONowPlayingController _createPlayerPathForEndpoint:client:player:completion:]
  -[MRQHONowPlayingController _requestSupportedCommandsForPlayerPath:queue:completion:]
  -[MRQHONowPlayingController _onQueue_requestAndUpdateArtworkForContentItems:forPlayerPath:withReason:]
  -[MRQHONowPlayingController _onQueue_requestPlaybackQueueForPlayerPath:includeArtwork:queue:completion:]
  -[MRQHONowPlayingController setRequestingQueue:]
  -[MRQHONowPlayingController _requestPlayerLastPlayingDateForPlayerPath:queue:completion:]
  -[MRQHONowPlayingController deferredContentItemsToMerge]
  -[MRQHONowPlayingController cachedNowPlayingArtworkIdentifier]
  -[MRQHONowPlayingController setCachedNowPlayingArtwork:]
  -[MRQHONowPlayingController requestingQueue]
  -[MRQHONowPlayingController setCachedNowPlayingArtworkIdentifier:]
  -[MRQHONowPlayingController _onQueue_updateByMergingContentItemChanges:]
  -[MRQHONowPlayingController _notifyDelegateOfUpdatedArtwork:]
  -[MRQHONowPlayingController cachedNowPlayingArtwork]
  -[MRQHONowPlayingController _downloadContentItemArtwork:queue:completion:]
  -[MRQHONowPlayingController _requestContentItemArtwork:forPlayerPath:queue:completion:]
  -[MRQHONowPlayingController _notifyDelegateOfInvalidation]
  -[MRQHONowPlayingController unresolvedPlayerPath]
  -[MRQHONowPlayingController _handlePlaybackQueueChangedNotification:]
  -[MRQHONowPlayingController _handlePlaybackQueueContentItemsChangedNotification:]
  -[MRQHONowPlayingController _handlePlaybackQueueContentItemsArtworkChangedNotification:]
  -[MRQHONowPlayingController _handlePlaybackStateChangedNotification:]
  -[MRQHONowPlayingController _handleSupportedCommandsChangedNotification:]
  -[MRQHONowPlayingController _onQueue_updateWithNewPlaybackQueue:]
  -[MRQHONowPlayingController _notifyDelegateOfPlaybackQueueChangeFromOldQueue:toNewQueue:]
  -[MRQHONowPlayingController _notifyDelegateOfUpdatedContentItems:]
  -[MRQHONowPlayingController _onQueue_updateWithNewPlaybackState:]
  -[MRQHONowPlayingController _notifyDelegateOfPlaybackStateChangeFromOldState:toNewState:]
  -[MRQHONowPlayingController _onQueue_updateWithNewPlayerLastPlayingDate:]
  -[MRQHONowPlayingController _notifyDelegateOfUpdatedPlayerLastPlayingDate:]
  -[MRQHONowPlayingController _onQueue_updateWithNewSupportedCommands:]
  -[MRQHONowPlayingController _notifyDelegateOfSupportedCommandsChangeFromOldCommands:toNewCommands:]
  -[MRQHONowPlayingController _reloadForCompleteInvalidation]
  -[MRQHONowPlayingController _reloadForPlayerPathInvalidation]
  -[MRQHONowPlayingController beginLoadingUpdates]
  -[MRQHONowPlayingController _handleActiveSystemEndpointChangedNotification:]
  -[MRQHONowPlayingController endLoadingUpdates]
  -[MRQHONowPlayingController _onQueue_updateWithNewDeviceLastPlayingDate:]
  -[MRQHONowPlayingController _notifyDelegateOfUpdatedDeviceLastPlayingDate:]
  -[MRQHONowPlayingController setDeferredContentItemsToMerge:]
  -[MRQHONowPlayingController .cxx_destruct]
  -[MRQHONowPlayingController setRegisteredForNotifications:]
  -[MRQHONowPlayingController registeredForPlayerPathInvalidations]
  -[MRQHONowPlayingController setDelegate:]
  -[MRQHONowPlayingController setQueue:]
  -[MRQHONowPlayingController player]
  -[MRQHONowPlayingController resolvedPlayerPath]
  -[MRQHONowPlayingController registeredForEndpointChanges]
  -[MRQHONowPlayingController response]
  -[MRQHONowPlayingController client]
  -[MRQHONowPlayingController endpointObserver]
  -[MRQHONowPlayingController setEndpoint:]
  -[MRQHONowPlayingController delegate]
  -[MRQHONowPlayingController playerPathInvalidationObserver]
  -[MRQHONowPlayingController queue]
  -[MRQHONowPlayingController registeredForNotifications]
  -[MRQHONowPlayingController dealloc]
  -[MRQHONowPlayingController endpoint]
  -[MRQHONowPlayingController setEndpointObserverGroupUID:]
  -[MRQHONowPlayingController endpointObserverGroupUID]
  -[MRQHONowPlayingController setResolvedPlayerPath:]
  -[MRQHONowPlayingController setPlayerPathInvalidationObserver:]
  -[MRQHONowPlayingController setRegisteredForPlayerPathInvalidations:]
  -[MRQHONowPlayingController setEndpointObserver:]
  -[MRQHONowPlayingController setResponse:]


_MRSendCommandResultMessageProtobuf : PBCodable <NSCopying>
 @property  BOOL hasSendError
 @property  int sendError
 @property  unsigned long handlerReturnStatusCount
 @property  ^i handlerReturnStatus
 @property  NSMutableArray *handlerReturnStatusDatas
 @property  BOOL hasCommandID
 @property  NSString *commandID
 @property  BOOL hasPlayerPath
 @property  _MRNowPlayingPlayerPathProtobuf *playerPath
 @property  BOOL hasCommandResult
 @property  _MRSendCommandResultProtobuf *commandResult

  // class methods
  +[_MRSendCommandResultMessageProtobuf handlerReturnStatusDataType]

  // instance methods
  -[_MRSendCommandResultMessageProtobuf playerPath]
  -[_MRSendCommandResultMessageProtobuf mergeFrom:]
  -[_MRSendCommandResultMessageProtobuf sendError]
  -[_MRSendCommandResultMessageProtobuf setCommandID:]
  -[_MRSendCommandResultMessageProtobuf setCommandResult:]
  -[_MRSendCommandResultMessageProtobuf setPlayerPath:]
  -[_MRSendCommandResultMessageProtobuf addHandlerReturnStatus:]
  -[_MRSendCommandResultMessageProtobuf setSendError:]
  -[_MRSendCommandResultMessageProtobuf addHandlerReturnStatusData:]
  -[_MRSendCommandResultMessageProtobuf handlerReturnStatusCount]
  -[_MRSendCommandResultMessageProtobuf clearHandlerReturnStatus]
  -[_MRSendCommandResultMessageProtobuf handlerReturnStatusAtIndex:]
  -[_MRSendCommandResultMessageProtobuf handlerReturnStatusDatasCount]
  -[_MRSendCommandResultMessageProtobuf clearHandlerReturnStatusDatas]
  -[_MRSendCommandResultMessageProtobuf .cxx_destruct]
  -[_MRSendCommandResultMessageProtobuf handlerReturnStatusDataAtIndex:]
  -[_MRSendCommandResultMessageProtobuf setHasSendError:]
  -[_MRSendCommandResultMessageProtobuf hasSendError]
  -[_MRSendCommandResultMessageProtobuf sendErrorAsString:]
  -[_MRSendCommandResultMessageProtobuf StringAsSendError:]
  -[_MRSendCommandResultMessageProtobuf handlerReturnStatus]
  -[_MRSendCommandResultMessageProtobuf setHandlerReturnStatus:count:]
  -[_MRSendCommandResultMessageProtobuf handlerReturnStatusAsString:]
  -[_MRSendCommandResultMessageProtobuf hasCommandID]
  -[_MRSendCommandResultMessageProtobuf StringAsHandlerReturnStatus:]
  -[_MRSendCommandResultMessageProtobuf hasCommandResult]
  -[_MRSendCommandResultMessageProtobuf handlerReturnStatusDatas]
  -[_MRSendCommandResultMessageProtobuf setHandlerReturnStatusDatas:]
  -[_MRSendCommandResultMessageProtobuf commandResult]
  -[_MRSendCommandResultMessageProtobuf dictionaryRepresentation]
  -[_MRSendCommandResultMessageProtobuf hasPlayerPath]
  -[_MRSendCommandResultMessageProtobuf writeTo:]
  -[_MRSendCommandResultMessageProtobuf isEqual:]
  -[_MRSendCommandResultMessageProtobuf copyTo:]
  -[_MRSendCommandResultMessageProtobuf readFrom:]
  -[_MRSendCommandResultMessageProtobuf commandID]
  -[_MRSendCommandResultMessageProtobuf dealloc]
  -[_MRSendCommandResultMessageProtobuf copyWithZone:]


MRMediaRemoteService : NSObject
 @property  MRXPCConnection *mrXPCConnection
 @property  NSObject<OS_xpc_object> *connection
 @property  NSObject<OS_dispatch_queue> *connectionQueue
 @property  NSObject<OS_dispatch_queue> *clientCallbackQueue
 @property  NSObject<OS_dispatch_queue> *clientCallbackPriorityQueue
 @property  NSObject<OS_dispatch_queue> *browsableContentQueue
 @property  NSObject<OS_dispatch_queue> *voiceInputQueue
 @property  NSObject<OS_dispatch_queue> *televisionQueue
 @property  NSObject<OS_dispatch_queue> *agentQueue
 @property  BOOL isRunning

  // instance methods
  -[MRMediaRemoteService connectionQueue]
  -[MRMediaRemoteService setConnectionQueue:]
  -[MRMediaRemoteService clientCallbackQueue]
  -[MRMediaRemoteService setIsRunning:]
  -[MRMediaRemoteService setVoiceInputQueue:]
  -[MRMediaRemoteService agentQueue]
  -[MRMediaRemoteService setClientCallbackQueue:]
  -[MRMediaRemoteService .cxx_destruct]
  -[MRMediaRemoteService setTelevisionQueue:]
  -[MRMediaRemoteService isRunning]
  -[MRMediaRemoteService clientCallbackPriorityQueue]
  -[MRMediaRemoteService browsableContentQueue]
  -[MRMediaRemoteService setBrowsableContentQueue:]
  -[MRMediaRemoteService setConnection:]
  -[MRMediaRemoteService connection]
  -[MRMediaRemoteService setMrXPCConnection:]
  -[MRMediaRemoteService voiceInputQueue]
  -[MRMediaRemoteService resolvePlayerPath:queue:completion:]
  -[MRMediaRemoteService mrXPCConnection]
  -[MRMediaRemoteService televisionQueue]
  -[MRMediaRemoteService setClientCallbackPriorityQueue:]
  -[MRMediaRemoteService setAgentQueue:]
  -[MRMediaRemoteService getDeviceInfoForPlayerPath:queue:completion:]


MRSetVolumeMessage : MRProtocolMessage
 @property  NSString *outputDeviceUID
 @property  float volume

  // instance methods
  -[MRSetVolumeMessage volume]
  -[MRSetVolumeMessage outputDeviceUID]
  -[MRSetVolumeMessage initWithVolume:outputDeviceUID:]
  -[MRSetVolumeMessage initWithVolume:]
  -[MRSetVolumeMessage type]


MRGetKeyboardSessionMessage : MRProtocolMessage
  // instance methods
  -[MRGetKeyboardSessionMessage init]
  -[MRGetKeyboardSessionMessage type]


_MRGetStateMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetStateMessageProtobuf dictionaryRepresentation]
  -[_MRGetStateMessageProtobuf writeTo:]
  -[_MRGetStateMessageProtobuf isEqual:]
  -[_MRGetStateMessageProtobuf readFrom:]
  -[_MRGetStateMessageProtobuf copyWithZone:]


_MRPlayerClientPropertiesMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlayerClientPropertiesMessageProtobuf .cxx_destruct]
  -[_MRPlayerClientPropertiesMessageProtobuf dictionaryRepresentation]
  -[_MRPlayerClientPropertiesMessageProtobuf writeTo:]
  -[_MRPlayerClientPropertiesMessageProtobuf isEqual:]
  -[_MRPlayerClientPropertiesMessageProtobuf readFrom:]
  -[_MRPlayerClientPropertiesMessageProtobuf copyWithZone:]


MRAVDiscoverySessionHelper : NSObject
  // instance methods
  -[MRAVDiscoverySessionHelper initWithFeatures:]
  -[MRAVDiscoverySessionHelper searchAVOutputDeviceForUID:timeout:identifier:reason:completion:]
  -[MRAVDiscoverySessionHelper createDiscoverySession]


_MRVoiceInputDeviceDescriptorProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVoiceInputDeviceDescriptorProtobuf .cxx_destruct]
  -[_MRVoiceInputDeviceDescriptorProtobuf dictionaryRepresentation]
  -[_MRVoiceInputDeviceDescriptorProtobuf writeTo:]
  -[_MRVoiceInputDeviceDescriptorProtobuf isEqual:]
  -[_MRVoiceInputDeviceDescriptorProtobuf readFrom:]
  -[_MRVoiceInputDeviceDescriptorProtobuf copyWithZone:]


MRAVOutputContextModification : NSObject <NSSecureCoding>
 @property  unsigned long modificationType
 @property  NSArray *concreteOutputDevices
 @property  NSArray *outputDevices
 @property  NSArray *outputDeviceUIDs
 @property  NSArray *avOutputDevices
 @property  NSString *password
 @property  NSString *initiator
 @property  BOOL shouldFadeAudio

  // class methods
  +[MRAVOutputContextModification supportsSecureCoding]

  // instance methods
  -[MRAVOutputContextModification outputDeviceUIDs]
  -[MRAVOutputContextModification setInitiator:]
  -[MRAVOutputContextModification initWithCoder:]
  -[MRAVOutputContextModification password]
  -[MRAVOutputContextModification concreteOutputDevices]
  -[MRAVOutputContextModification .cxx_destruct]
  -[MRAVOutputContextModification modificationType]
  -[MRAVOutputContextModification shouldFadeAudio]
  -[MRAVOutputContextModification initWithType:devices:]
  -[MRAVOutputContextModification setShouldFadeAudio:]
  -[MRAVOutputContextModification modifyWithOutputContext:queue:completion:]
  -[MRAVOutputContextModification avOutputDevices]
  -[MRAVOutputContextModification outputDevices]
  -[MRAVOutputContextModification initiator]
  -[MRAVOutputContextModification setPassword:]
  -[MRAVOutputContextModification encodeWithCoder:]


MROrigin : NSObject <NSSecureCoding, NSCopying>
 @property  BOOL locallyHosted
 @property  _MROriginProtobuf *protobuf
 @property  int identifier
 @property  long long type
 @property  NSString *displayName
 @property  BOOL local
 @property  MROrigin *skeleton
 @property  NSData *data
 @property  BOOL hosted

  // class methods
  +[MROrigin anyOrigin]
  +[MROrigin localOrigin]
  +[MROrigin supportsSecureCoding]

  // instance methods
  -[MROrigin skeleton]
  -[MROrigin displayName]
  -[MROrigin initWithCoder:]
  -[MROrigin setType:]
  -[MROrigin initWithIdentifier:type:displayName:]
  -[MROrigin .cxx_destruct]
  -[MROrigin setLocal:]
  -[MROrigin setLocallyHosted:]
  -[MROrigin isLocal]
  -[MROrigin data]
  -[MROrigin isEqual:]
  -[MROrigin identifier]
  -[MROrigin protobuf]
  -[MROrigin setDisplayName:]
  -[MROrigin initWithProtobuf:]
  -[MROrigin initWithData:]
  -[MROrigin type]
  -[MROrigin setIdentifier:]
  -[MROrigin isLocallyHosted]
  -[MROrigin copyWithZone:]
  -[MROrigin isHosted]
  -[MROrigin encodeWithCoder:]


_MRAudioBufferProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioBufferProtobuf .cxx_destruct]
  -[_MRAudioBufferProtobuf dictionaryRepresentation]
  -[_MRAudioBufferProtobuf writeTo:]
  -[_MRAudioBufferProtobuf isEqual:]
  -[_MRAudioBufferProtobuf readFrom:]
  -[_MRAudioBufferProtobuf copyWithZone:]


MRIDSMessage : NSObject
 @property  NSNumber *messageID
 @property  NSData *data

  // instance methods
  -[MRIDSMessage messageID]
  -[MRIDSMessage .cxx_destruct]
  -[MRIDSMessage initWithID:data:]
  -[MRIDSMessage replyWithData:priority:]
  -[MRIDSMessage data]


MRIDSConnectivityManager : NSObject <IDSServiceDelegate>
 @property  IDSDevice *device
 @property  MRDeviceInfo *deviceInfo
 @property  BOOL isConnected
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRIDSConnectivityManager sharedManager]

  // instance methods
  -[MRIDSConnectivityManager service:account:incomingMessage:fromID:context:]
  -[MRIDSConnectivityManager resetConnection]
  -[MRIDSConnectivityManager deviceInfo]
  -[MRIDSConnectivityManager setDevice:]
  -[MRIDSConnectivityManager service:devicesChanged:]
  -[MRIDSConnectivityManager setMessageHandler:forType:destination:session:]
  -[MRIDSConnectivityManager name]
  -[MRIDSConnectivityManager initializeService]
  -[MRIDSConnectivityManager isConnected]
  -[MRIDSConnectivityManager .cxx_destruct]
  -[MRIDSConnectivityManager setMessageHandler:forType:]
  -[MRIDSConnectivityManager handleDidReceiveResetConnectionRequest]
  -[MRIDSConnectivityManager _configurationFromDestination:session:]
  -[MRIDSConnectivityManager init]
  -[MRIDSConnectivityManager sendMessage:type:destination:session:options:priority:response:]
  -[MRIDSConnectivityManager deviceDebugName]
  -[MRIDSConnectivityManager sendMessage:type:destination:session:options:priority:]
  -[MRIDSConnectivityManager _sendMessage:type:destination:session:options:priority:replyID:response:]
  -[MRIDSConnectivityManager _generateMessageID]
  -[MRIDSConnectivityManager service:connectedDevicesChanged:]
  -[MRIDSConnectivityManager removeMessageHandlerForType:destination:session:]
  -[MRIDSConnectivityManager _maybeDeviceConnectionStatusChanged]
  -[MRIDSConnectivityManager removeMessageHandlerForType:]
  -[MRIDSConnectivityManager device]


MRArtwork : NSObject <NSCopying>
 @property  NSData *imageData
 @property  long long height
 @property  long long width
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[MRArtwork width]
  -[MRArtwork setWidth:]
  -[MRArtwork setImageData:]
  -[MRArtwork .cxx_destruct]
  -[MRArtwork imageData]
  -[MRArtwork dictionaryRepresentation]
  -[MRArtwork setHeight:]
  -[MRArtwork height]
  -[MRArtwork isEqual:]
  -[MRArtwork initWithImageData:height:width:]
  -[MRArtwork initWithProtobuf:]
  -[MRArtwork copyWithZone:]


_MRAudioFadeResponseMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioFadeResponseMessageProtobuf dictionaryRepresentation]
  -[_MRAudioFadeResponseMessageProtobuf writeTo:]
  -[_MRAudioFadeResponseMessageProtobuf isEqual:]
  -[_MRAudioFadeResponseMessageProtobuf readFrom:]
  -[_MRAudioFadeResponseMessageProtobuf copyWithZone:]


MRMediaSuggestionRequest : NSObject <NSCopying>
 @property  unsigned long maxResults
 @property  BOOL includeArtwork
 @property  NSUUID *requestIdentifier
 @property  BOOL useDirectAccess

  // class methods
  +[MRMediaSuggestionRequest defaultRequest]
  +[MRMediaSuggestionRequest defaultRequestWithArtwork]

  // instance methods
  -[MRMediaSuggestionRequest setRequestIdentifier:]
  -[MRMediaSuggestionRequest requestIdentifier]
  -[MRMediaSuggestionRequest useDirectAccess]
  -[MRMediaSuggestionRequest .cxx_destruct]
  -[MRMediaSuggestionRequest performWithCompletion:]
  -[MRMediaSuggestionRequest setMaxResults:]
  -[MRMediaSuggestionRequest setIncludeArtwork:]
  -[MRMediaSuggestionRequest performWithPreferences:completion:]
  -[MRMediaSuggestionRequest setUseDirectAccess:]
  -[MRMediaSuggestionRequest copyWithZone:]
  -[MRMediaSuggestionRequest includeArtwork]
  -[MRMediaSuggestionRequest maxResults]


_MRAVOutputDeviceSourceInfoProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAVOutputDeviceSourceInfoProtobuf .cxx_destruct]
  -[_MRAVOutputDeviceSourceInfoProtobuf dictionaryRepresentation]
  -[_MRAVOutputDeviceSourceInfoProtobuf writeTo:]
  -[_MRAVOutputDeviceSourceInfoProtobuf isEqual:]
  -[_MRAVOutputDeviceSourceInfoProtobuf readFrom:]
  -[_MRAVOutputDeviceSourceInfoProtobuf copyWithZone:]


_MRMRNowPlayingAudioFormatContentInfoProtobuf : PBCodable <NSCopying>
 @property  BOOL hasBundleID
 @property  NSString *bundleID
 @property  BOOL hasAudioSessionID
 @property  unsigned long audioSessionID
 @property  BOOL hasAudioFormat
 @property  unsigned long audioFormat
 @property  BOOL hasChannelCount
 @property  unsigned long channelCount
 @property  BOOL hasBestAvailableContent
 @property  NSString *bestAvailableContent
 @property  BOOL hasEligibleForSpatialization
 @property  BOOL eligibleForSpatialization
 @property  BOOL hasSpatialized
 @property  BOOL spatialized

  // instance methods
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf bundleID]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf mergeFrom:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf channelCount]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf hasBundleID]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf .cxx_destruct]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setAudioSessionID:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf dictionaryRepresentation]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setBestAvailableContent:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setHasAudioSessionID:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf hasAudioSessionID]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setAudioFormat:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf writeTo:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setHasAudioFormat:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf hasAudioFormat]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setChannelCount:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setHasChannelCount:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf hasChannelCount]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf hasBestAvailableContent]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setEligibleForSpatialization:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setHasEligibleForSpatialization:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setHasSpatialized:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf hasEligibleForSpatialization]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf hasSpatialized]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf bestAvailableContent]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf eligibleForSpatialization]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf isEqual:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf copyTo:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf readFrom:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf audioFormat]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setBundleID:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf setSpatialized:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf spatialized]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf copyWithZone:]
  -[_MRMRNowPlayingAudioFormatContentInfoProtobuf audioSessionID]


MRProtobufSerialization : NSObject
 @property  NSDictionary *dictionaryKeyToProtobufKeyMapping
 @property  Class protobufClass
 @property  @? dictionaryValueToProtobufValueTransformer
 @property  @? protobufValueToDictionaryValueTransformer

  // instance methods
  -[MRProtobufSerialization .cxx_destruct]
  -[MRProtobufSerialization setDictionaryKeyToProtobufKeyMapping:]
  -[MRProtobufSerialization createDictionaryFromProtobuf:]
  -[MRProtobufSerialization createProtobufFromDictionary:]
  -[MRProtobufSerialization dictionaryKeyToProtobufKeyMapping]
  -[MRProtobufSerialization protobufClass]
  -[MRProtobufSerialization setProtobufClass:]
  -[MRProtobufSerialization dictionaryValueToProtobufValueTransformer]
  -[MRProtobufSerialization setDictionaryValueToProtobufValueTransformer:]
  -[MRProtobufSerialization protobufValueToDictionaryValueTransformer]
  -[MRProtobufSerialization setProtobufValueToDictionaryValueTransformer:]


_MRPlaybackQueueCapabilitiesProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackQueueCapabilitiesProtobuf dictionaryRepresentation]
  -[_MRPlaybackQueueCapabilitiesProtobuf writeTo:]
  -[_MRPlaybackQueueCapabilitiesProtobuf isEqual:]
  -[_MRPlaybackQueueCapabilitiesProtobuf readFrom:]
  -[_MRPlaybackQueueCapabilitiesProtobuf copyWithZone:]


MRGetVoiceInputDevicesMessage : MRProtocolMessage
  // instance methods
  -[MRGetVoiceInputDevicesMessage type]


MRGetVoiceInputDevicesResponseMessage : MRProtocolMessage
 @property  NSArray *deviceIDs
 @property  long long errorCode

  // instance methods
  -[MRGetVoiceInputDevicesResponseMessage errorCode]
  -[MRGetVoiceInputDevicesResponseMessage initWithDeviceIDs:errorCode:]
  -[MRGetVoiceInputDevicesResponseMessage type]
  -[MRGetVoiceInputDevicesResponseMessage deviceIDs]


MRRegisterVoiceInputDeviceMessage : MRProtocolMessage
 @property  MRVirtualVoiceInputDeviceDescriptor *descriptor

  // instance methods
  -[MRRegisterVoiceInputDeviceMessage initWithDescriptor:]
  -[MRRegisterVoiceInputDeviceMessage .cxx_destruct]
  -[MRRegisterVoiceInputDeviceMessage descriptor]
  -[MRRegisterVoiceInputDeviceMessage type]


MRRegisterVoiceInputDeviceResponseMessage : MRProtocolMessage
 @property  unsigned int deviceID
 @property  long long errorCode

  // instance methods
  -[MRRegisterVoiceInputDeviceResponseMessage errorCode]
  -[MRRegisterVoiceInputDeviceResponseMessage deviceID]
  -[MRRegisterVoiceInputDeviceResponseMessage initWithDeviceID:errorCode:]
  -[MRRegisterVoiceInputDeviceResponseMessage type]


MRSetRecordingStateMessage : MRProtocolMessage
 @property  unsigned int state

  // instance methods
  -[MRSetRecordingStateMessage initWithRecordingState:]
  -[MRSetRecordingStateMessage state]
  -[MRSetRecordingStateMessage type]


MRSendVoiceInputMessage : MRProtocolMessage
 @property  MRAudioBuffer *buffer
 @property  {?=dd} time
 @property  float gain

  // instance methods
  -[MRSendVoiceInputMessage gain]
  -[MRSendVoiceInputMessage .cxx_destruct]
  -[MRSendVoiceInputMessage _initializeDataIfNecessary]
  -[MRSendVoiceInputMessage initWithBuffer:time:gain:]
  -[MRSendVoiceInputMessage time]
  -[MRSendVoiceInputMessage type]
  -[MRSendVoiceInputMessage buffer]


_MROriginClientPropertiesMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MROriginClientPropertiesMessageProtobuf dictionaryRepresentation]
  -[_MROriginClientPropertiesMessageProtobuf writeTo:]
  -[_MROriginClientPropertiesMessageProtobuf isEqual:]
  -[_MROriginClientPropertiesMessageProtobuf readFrom:]
  -[_MROriginClientPropertiesMessageProtobuf copyWithZone:]


MROutputContextDataSource : NSObject
 @property  float volume
 @property  BOOL isAirPlaying
 @property  unsigned int volumeControlCapabilities
 @property  NSArray *outputDevices
 @property  NSString *uniqueIdentifier

  // instance methods
  -[MROutputContextDataSource isAirPlaying]
  -[MROutputContextDataSource volume]
  -[MROutputContextDataSource uniqueIdentifier]
  -[MROutputContextDataSource .cxx_destruct]
  -[MROutputContextDataSource outputDeviceForUID:]
  -[MROutputContextDataSource outputDevices]
  -[MROutputContextDataSource volumeControlCapabilities]


MRExternalOutputContextDataSource : MROutputContextDataSource
  // instance methods
  -[MRExternalOutputContextDataSource updateVolume:outputDeviceUID:]
  -[MRExternalOutputContextDataSource volume]
  -[MRExternalOutputContextDataSource uniqueIdentifier]
  -[MRExternalOutputContextDataSource updateOutputDevices:]
  -[MRExternalOutputContextDataSource .cxx_destruct]
  -[MRExternalOutputContextDataSource initWithUniqueIdentifier:]
  -[MRExternalOutputContextDataSource removeOutputDevices:]
  -[MRExternalOutputContextDataSource updateVolumeControlCapabilities:outputDeviceUID:]
  -[MRExternalOutputContextDataSource outputDevices]
  -[MRExternalOutputContextDataSource volumeControlCapabilities]
  -[MRExternalOutputContextDataSource removeAllOutputDevices]


MROutputContextController : MROutputContextDataSource
 @property  float localVolume
 @property  unsigned int localVolumeControlCapabilities
 @property  NSString *localDeviceUID

  // class methods
  +[MROutputContextController sharedOutputContextController]

  // instance methods
  -[MROutputContextController _handleLocalDeviceVolumeControlCapabilitiesDidChangeNotification:]
  -[MROutputContextController volume]
  -[MROutputContextController uniqueIdentifier]
  -[MROutputContextController _handleOutputDeviceVolumeControlCapabilitiesDidChangeNotification:]
  -[MROutputContextController initWithOutputContext:]
  -[MROutputContextController .cxx_destruct]
  -[MROutputContextController setLocalVolume:]
  -[MROutputContextController _handleOutputDeviceRemovedNotification:]
  -[MROutputContextController localVolumeControlCapabilities]
  -[MROutputContextController setVolume:outputDeviceUID:]
  -[MROutputContextController localDeviceUID]
  -[MROutputContextController setLocalVolumeControlCapabilities:]
  -[MROutputContextController outputDevices]
  -[MROutputContextController _handleOutputDeviceAddedNotification:]
  -[MROutputContextController volumeControlCapabilities]
  -[MROutputContextController _handleOutputDevicesReloadedNotification:]
  -[MROutputContextController volumeControlCapabilitiesForOutputDeviceUID:error:]
  -[MROutputContextController _handleLocalDeviceVolumeDidChangeNotification:]
  -[MROutputContextController volumeForOutputDeviceUID:error:]
  -[MROutputContextController dealloc]
  -[MROutputContextController _handleOutputDeviceVolumeDidChangeNotification:]
  -[MROutputContextController localVolume]
  -[MROutputContextController _handleOutputDeviceDidChangeNotification:]


MRNowPlayingState : NSObject <NSCopying>
 @property  _MRSetStateMessageProtobuf *protobuf
 @property  NSDictionary *nowPlayingInfo
 @property  NSArray *supportedCommands
 @property  MRPlaybackQueue *playbackQueue
 @property  NSString *displayID
 @property  NSString *displayName
 @property  MRPlayerPath *playerPath
 @property  MRPlaybackQueueRequest *request
 @property  BOOL hasPlaybackState
 @property  unsigned int playbackState
 @property  BOOL hasPlaybackStateTimestamp
 @property  double playbackStateTimestamp
 @property  BOOL containsArtwork
 @property  unsigned long playbackQueueCapabilities
 @property  NSData *data

  // instance methods
  -[MRNowPlayingState setSupportedCommands:]
  -[MRNowPlayingState nowPlayingInfo]
  -[MRNowPlayingState setNowPlayingInfo:]
  -[MRNowPlayingState displayID]
  -[MRNowPlayingState supportedCommands]
  -[MRNowPlayingState playerPath]
  -[MRNowPlayingState setRequest:]
  -[MRNowPlayingState playbackState]
  -[MRNowPlayingState initWithPlayerPath:]
  -[MRNowPlayingState displayName]
  -[MRNowPlayingState setPlaybackState:]
  -[MRNowPlayingState setPlayerPath:]
  -[MRNowPlayingState .cxx_destruct]
  -[MRNowPlayingState dictionaryRepresentation]
  -[MRNowPlayingState setPlaybackQueue:]
  -[MRNowPlayingState data]
  -[MRNowPlayingState setDisplayID:]
  -[MRNowPlayingState playbackQueueCapabilities]
  -[MRNowPlayingState playbackStateTimestamp]
  -[MRNowPlayingState hasPlaybackStateTimestamp]
  -[MRNowPlayingState setPlaybackQueueCapabilities:]
  -[MRNowPlayingState setPlaybackStateTimestamp:]
  -[MRNowPlayingState setHasPlaybackStateTimestamp:]
  -[MRNowPlayingState containsArtwork]
  -[MRNowPlayingState copyWithoutArtwork]
  -[MRNowPlayingState request]
  -[MRNowPlayingState protobuf]
  -[MRNowPlayingState setDisplayName:]
  -[MRNowPlayingState initWithProtobuf:]
  -[MRNowPlayingState initWithData:]
  -[MRNowPlayingState playbackQueue]
  -[MRNowPlayingState setHasPlaybackState:]
  -[MRNowPlayingState hasPlaybackState]
  -[MRNowPlayingState copyWithZone:]


MRAVConcreteOutputContext : MRAVOutputContext
 @property  AVOutputContext *avOutputContext
 @property  NSArray *concreteOutputDevices
 @property  BOOL isVolumeControlAvailable

  // class methods
  +[MRAVConcreteOutputContext createOutputContextWithUniqueIdentifier:]
  +[MRAVConcreteOutputContext outputContextForLocalDevice]
  +[MRAVConcreteOutputContext sharedAudioPresentationContext]
  +[MRAVConcreteOutputContext sharedSystemScreenContext]
  +[MRAVConcreteOutputContext outputContextForLocalDeviceDataSource]
  +[MRAVConcreteOutputContext sharedSystemAudioContext]
  +[MRAVConcreteOutputContext setOutputContextForLocalDeviceDataSource:]
  +[MRAVConcreteOutputContext iTunesContext]

  // instance methods
  -[MRAVConcreteOutputContext setConcreteOutputDevices:]
  -[MRAVConcreteOutputContext _handleOutputContextSupportsVolumeDidChangeNotification:]
  -[MRAVConcreteOutputContext volume]
  -[MRAVConcreteOutputContext uniqueIdentifier]
  -[MRAVConcreteOutputContext resetPredictedOutputDevice]
  -[MRAVConcreteOutputContext isVolumeControlAvailable]
  -[MRAVConcreteOutputContext setVolume:]
  -[MRAVConcreteOutputContext contextID]
  -[MRAVConcreteOutputContext concreteOutputDevices]
  -[MRAVConcreteOutputContext .cxx_destruct]
  -[MRAVConcreteOutputContext removeAllOutputDevicesWithCallbackQueue:block:]
  -[MRAVConcreteOutputContext supportsVolumeControl]
  -[MRAVConcreteOutputContext _handlePredictedOutputDeviceDidChangeNotification:]
  -[MRAVConcreteOutputContext attemptLogicalDeviceRecovery]
  -[MRAVConcreteOutputContext setAvOutputContext:]
  -[MRAVConcreteOutputContext initWithAVOutputContext:type:]
  -[MRAVConcreteOutputContext _handleOutputDevicesDidChangeNotification:]
  -[MRAVConcreteOutputContext type]
  -[MRAVConcreteOutputContext setOutputDevices:initiator:password:fadeAudio:withCallbackQueue:block:]
  -[MRAVConcreteOutputContext _handleLocalDeviceDidChangeOutputContextNotification:]
  -[MRAVConcreteOutputContext _handleOutputDeviceCanSetVolumeDidChangeNotification:]
  -[MRAVConcreteOutputContext dealloc]
  -[MRAVConcreteOutputContext avOutputContext]
  -[MRAVConcreteOutputContext removeOutputDevices:initiator:fadeAudio:withCallbackQueue:block:]
  -[MRAVConcreteOutputContext addOutputDevices:initiator:fadeAudio:withCallbackQueue:block:]
  -[MRAVConcreteOutputContext _outputContextChangeInitiatedNotification:]
  -[MRAVConcreteOutputContext setIsVolumeControlAvailable:]
  -[MRAVConcreteOutputContext _handleOutputDeviceVolumeDidChangeNotification:]
  -[MRAVConcreteOutputContext _reloadOutputDevices]
  -[MRAVConcreteOutputContext _handleOutputDeviceDidChangeNotification:]
  -[MRAVConcreteOutputContext predictedOutputDevice]
  -[MRAVConcreteOutputContext supportsMultipleBluetoothOutputDevices]


MRDeviceInfo : NSObject <NSCopying>
 @property  _MRDeviceInfoMessageProtobuf *protobuf
 @property  BOOL companion
 @property  BOOL gizmo
 @property  NSString *WHAIdentifier
 @property  BOOL supportsImplicitChangeShuffleAndRepeatModeInSetPlaybackQueueCommandOptions
 @property  long long deviceClass
 @property  BOOL hasDeviceClass
 @property  unsigned long protocolVersion
 @property  BOOL hasProtocolVersion
 @property  unsigned long groupedDeviceCount
 @property  BOOL hasGroupedDeviceCount
 @property  unsigned long sharedQueueVersion
 @property  BOOL hasSharedQueueVersion
 @property  unsigned long groupLogicalDeviceCount
 @property  BOOL hasGroupLogicalDeviceCount
 @property  BOOL supportsSystemPairing
 @property  BOOL hasSupportsSystemPairing
 @property  BOOL supportsACL
 @property  BOOL hasSupportsACL
 @property  BOOL supportsSharedQueue
 @property  BOOL hasSupportsSharedQueue
 @property  BOOL supportsExtendedMotion
 @property  BOOL hasSupportsExtendedMotion
 @property  BOOL tightSyncGroup
 @property  BOOL hasTightSyncGroup
 @property  BOOL pairingAllowed
 @property  BOOL hasPairingAllowed
 @property  BOOL proxyGroupPlayer
 @property  BOOL hasProxyGroupPlayer
 @property  BOOL connected
 @property  BOOL hasConnected
 @property  BOOL groupLeader
 @property  BOOL hasGroupLeader
 @property  BOOL airPlayActive
 @property  BOOL hasAirPlayActive
 @property  BOOL supportsMultiplayer
 @property  BOOL hasSupportsMultiplayer
 @property  NSString *name
 @property  NSString *identifier
 @property  NSString *localizedModelName
 @property  NSString *buildVersion
 @property  NSString *bundleIdentifier
 @property  NSString *bundleVersion
 @property  NSString *systemMediaApplication
 @property  NSString *systemPodcastApplication
 @property  NSString *systemBooksApplication
 @property  NSString *deviceUID
 @property  NSString *localReceiverPairingIdentity
 @property  NSString *managedConfigurationDeviceIdentifier
 @property  NSString *tightSyncUID
 @property  NSString *groupUID
 @property  NSString *airPlayGroupUID
 @property  NSString *groupName
 @property  NSString *senderDefaultGroupUID
 @property  NSData *bluetoothAddress
 @property  NSArray *groupedDevices
 @property  NSArray *airPlayReceivers
 @property  NSString *linkAgent
 @property  NSString *clusterID
 @property  NSString *clusterLeaderID
 @property  unsigned int clusterType
 @property  BOOL clusterAware
 @property  NSString *modelID
 @property  NSString *routingContextID
 @property  NSData *data
 @property  NSDictionary *dictionaryRepresentation
 @property  NSString *minimalDescription
 @property  MRDeviceInfo *skeleton

  // class methods
  +[MRDeviceInfo deviceInfosFromData:]
  +[MRDeviceInfo deviceClass]
  +[MRDeviceInfo dataFromDeviceInfos:]

  // instance methods
  -[MRDeviceInfo clusterType]
  -[MRDeviceInfo setBuildVersion:]
  -[MRDeviceInfo groupUID]
  -[MRDeviceInfo bundleVersion]
  -[MRDeviceInfo hasDeviceClass]
  -[MRDeviceInfo bluetoothAddress]
  -[MRDeviceInfo isAirPlayActive]
  -[MRDeviceInfo sharedQueueVersion]
  -[MRDeviceInfo setBundleVersion:]
  -[MRDeviceInfo supportsMultiplayer]
  -[MRDeviceInfo buildVersion]
  -[MRDeviceInfo skeleton]
  -[MRDeviceInfo airPlayReceivers]
  -[MRDeviceInfo setLocalReceiverPairingIdentity:]
  -[MRDeviceInfo isCompanion]
  -[MRDeviceInfo isGroupLeader]
  -[MRDeviceInfo hasSupportsMultiplayer]
  -[MRDeviceInfo setProxyGroupPlayer:]
  -[MRDeviceInfo hasProtocolVersion]
  -[MRDeviceInfo setGroupName:]
  -[MRDeviceInfo mergeFrom:]
  -[MRDeviceInfo name]
  -[MRDeviceInfo isProxyGroupPlayer]
  -[MRDeviceInfo setDeviceClass:]
  -[MRDeviceInfo hasSupportsSystemPairing]
  -[MRDeviceInfo localReceiverPairingIdentity]
  -[MRDeviceInfo setBluetoothAddress:]
  -[MRDeviceInfo isConnected]
  -[MRDeviceInfo setHasProtocolVersion:]
  -[MRDeviceInfo setClusterAware:]
  -[MRDeviceInfo modelID]
  -[MRDeviceInfo hasGroupLogicalDeviceCount]
  -[MRDeviceInfo bundleIdentifier]
  -[MRDeviceInfo setHasAirPlayActive:]
  -[MRDeviceInfo protocolVersion]
  -[MRDeviceInfo hasSupportsSharedQueue]
  -[MRDeviceInfo supportsSystemPairing]
  -[MRDeviceInfo setAirPlayGroupUID:]
  -[MRDeviceInfo hasSharedQueueVersion]
  -[MRDeviceInfo setLocalizedModelName:]
  -[MRDeviceInfo supportsSharedQueue]
  -[MRDeviceInfo setAirPlayActive:]
  -[MRDeviceInfo supportsACL]
  -[MRDeviceInfo .cxx_destruct]
  -[MRDeviceInfo isPairingAllowed]
  -[MRDeviceInfo supportsImplicitChangeShuffleAndRepeatModeInSetPlaybackQueueCommandOptions]
  -[MRDeviceInfo setSupportsACL:]
  -[MRDeviceInfo setProtocolVersion:]
  -[MRDeviceInfo WHAIdentifier]
  -[MRDeviceInfo deviceClass]
  -[MRDeviceInfo dictionaryRepresentation]
  -[MRDeviceInfo setSupportsExtendedMotion:]
  -[MRDeviceInfo setGroupedDeviceCount:]
  -[MRDeviceInfo hasSupportsExtendedMotion]
  -[MRDeviceInfo localizedModelName]
  -[MRDeviceInfo hasSupportsACL]
  -[MRDeviceInfo setTightSyncGroup:]
  -[MRDeviceInfo systemBooksApplication]
  -[MRDeviceInfo setModelID:]
  -[MRDeviceInfo setName:]
  -[MRDeviceInfo setHasProxyGroupPlayer:]
  -[MRDeviceInfo setBundleIdentifier:]
  -[MRDeviceInfo data]
  -[MRDeviceInfo setClusterLeaderID:]
  -[MRDeviceInfo routingContextID]
  -[MRDeviceInfo supportsExtendedMotion]
  -[MRDeviceInfo setHasTightSyncGroup:]
  -[MRDeviceInfo setSupportsSystemPairing:]
  -[MRDeviceInfo setSystemPodcastApplication:]
  -[MRDeviceInfo setHasSupportsSharedQueue:]
  -[MRDeviceInfo setHasSupportsACL:]
  -[MRDeviceInfo setClusterType:]
  -[MRDeviceInfo systemPodcastApplication]
  -[MRDeviceInfo isEqual:]
  -[MRDeviceInfo deltaDescriptionFromDeviceInfo:minimal:]
  -[MRDeviceInfo minimalDescription]
  -[MRDeviceInfo setPairingAllowed:]
  -[MRDeviceInfo linkAgent]
  -[MRDeviceInfo setConnected:]
  -[MRDeviceInfo isClusterAware]
  -[MRDeviceInfo setGroupUID:]
  -[MRDeviceInfo deltaDescriptionFromDeviceInfo:]
  -[MRDeviceInfo identifier]
  -[MRDeviceInfo protobuf]
  -[MRDeviceInfo airPlayGroupUID]
  -[MRDeviceInfo groupName]
  -[MRDeviceInfo setHasConnected:]
  -[MRDeviceInfo groupedDeviceCount]
  -[MRDeviceInfo setSystemBooksApplication:]
  -[MRDeviceInfo setManagedConfigurationDeviceIdentifier:]
  -[MRDeviceInfo hasTightSyncGroup]
  -[MRDeviceInfo initWithProtobuf:]
  -[MRDeviceInfo clusterLeaderID]
  -[MRDeviceInfo managedConfigurationDeviceIdentifier]
  -[MRDeviceInfo setHasSupportsSystemPairing:]
  -[MRDeviceInfo setHasSupportsMultiplayer:]
  -[MRDeviceInfo setGroupLogicalDeviceCount:]
  -[MRDeviceInfo setSupportsSharedQueue:]
  -[MRDeviceInfo setGroupedDevices:]
  -[MRDeviceInfo initWithData:]
  -[MRDeviceInfo setLinkAgent:]
  -[MRDeviceInfo setTightSyncUID:]
  -[MRDeviceInfo setRoutingContextID:]
  -[MRDeviceInfo hasGroupLeader]
  -[MRDeviceInfo setSharedQueueVersion:]
  -[MRDeviceInfo setHasPairingAllowed:]
  -[MRDeviceInfo setDeviceUID:]
  -[MRDeviceInfo setClusterID:]
  -[MRDeviceInfo setIdentifier:]
  -[MRDeviceInfo minimalDeltaDescriptionFromDeviceInfo:]
  -[MRDeviceInfo hasGroupedDeviceCount]
  -[MRDeviceInfo senderDefaultGroupUID]
  -[MRDeviceInfo setHasGroupLogicalDeviceCount:]
  -[MRDeviceInfo hasAirPlayActive]
  -[MRDeviceInfo groupedDevices]
  -[MRDeviceInfo setHasSupportsExtendedMotion:]
  -[MRDeviceInfo initWithOutputDevice:]
  -[MRDeviceInfo groupLogicalDeviceCount]
  -[MRDeviceInfo isGizmo]
  -[MRDeviceInfo setSenderDefaultGroupUID:]
  -[MRDeviceInfo setHasSharedQueueVersion:]
  -[MRDeviceInfo systemMediaApplication]
  -[MRDeviceInfo copyWithZone:]
  -[MRDeviceInfo setGroupLeader:]
  -[MRDeviceInfo hasPairingAllowed]
  -[MRDeviceInfo setHasDeviceClass:]
  -[MRDeviceInfo setHasGroupLeader:]
  -[MRDeviceInfo setAirPlayReceivers:]
  -[MRDeviceInfo tightSyncUID]
  -[MRDeviceInfo isTightSyncGroup]
  -[MRDeviceInfo setHasGroupedDeviceCount:]
  -[MRDeviceInfo setSupportsMultiplayer:]
  -[MRDeviceInfo setSystemMediaApplication:]
  -[MRDeviceInfo hasConnected]
  -[MRDeviceInfo deviceUID]
  -[MRDeviceInfo clusterID]
  -[MRDeviceInfo hasProxyGroupPlayer]


MRAirPlayTransportConnection : MRExternalDeviceTransportConnection <AVOutputDeviceCommunicationChannelDelegate>
 @property  BOOL channelClosed
 @property  NSDate *dateCreated
 @property  NSDate *mostRecentMessageSentDate
 @property  unsigned long totalMessagesSentCount
 @property  unsigned long totalBytesSentCount
 @property  NSDate *mostRecentMessageReceivedDate
 @property  unsigned long totalMessagesReceivedCount
 @property  unsigned long totalBytesReceivedCount
 @property  MROSTransaction *transaction
 @property  id effectiveChannel
 @property  APReceiverMediaRemoteCommunicationChannel *apCommunicationChannel
 @property  AVOutputContextCommunicationChannel *outputContextCommunicationChannel
 @property  AVOutputDeviceCommunicationChannel *outputDeviceCommunicationChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRAirPlayTransportConnection closeWithError:]
  -[MRAirPlayTransportConnection isValid]
  -[MRAirPlayTransportConnection transaction]
  -[MRAirPlayTransportConnection .cxx_destruct]
  -[MRAirPlayTransportConnection initWithOutputDeviceCommunicationChannel:]
  -[MRAirPlayTransportConnection effectiveChannel]
  -[MRAirPlayTransportConnection _sendTransportData:]
  -[MRAirPlayTransportConnection apCommunicationChannel]
  -[MRAirPlayTransportConnection initWithAPCommunicationChannel:]
  -[MRAirPlayTransportConnection initWithOutputContextCommunicationChannel:outputContext:]
  -[MRAirPlayTransportConnection outputContextCommunicationChannel]
  -[MRAirPlayTransportConnection outputDeviceCommunicationChannel]
  -[MRAirPlayTransportConnection channelClosed]
  -[MRAirPlayTransportConnection setChannelClosed:]
  -[MRAirPlayTransportConnection mostRecentMessageSentDate]
  -[MRAirPlayTransportConnection setMostRecentMessageSentDate:]
  -[MRAirPlayTransportConnection totalMessagesSentCount]
  -[MRAirPlayTransportConnection setTotalMessagesSentCount:]
  -[MRAirPlayTransportConnection totalBytesSentCount]
  -[MRAirPlayTransportConnection setTotalBytesSentCount:]
  -[MRAirPlayTransportConnection mostRecentMessageReceivedDate]
  -[MRAirPlayTransportConnection setMostRecentMessageReceivedDate:]
  -[MRAirPlayTransportConnection totalMessagesReceivedCount]
  -[MRAirPlayTransportConnection setTotalMessagesReceivedCount:]
  -[MRAirPlayTransportConnection totalBytesReceivedCount]
  -[MRAirPlayTransportConnection setTotalBytesReceivedCount:]
  -[MRAirPlayTransportConnection sendTransportData:options:]
  -[MRAirPlayTransportConnection dateCreated]
  -[MRAirPlayTransportConnection communicationChannel:didReceiveData:]
  -[MRAirPlayTransportConnection communicationChannelDidClose:]
  -[MRAirPlayTransportConnection _init]
  -[MRAirPlayTransportConnection ingestData:]
  -[MRAirPlayTransportConnection setTransaction:]
  -[MRAirPlayTransportConnection setDateCreated:]


MRExternalJSONClientConnection : MRExternalClientConnection
  // instance methods
  -[MRExternalJSONClientConnection .cxx_destruct]
  -[MRExternalJSONClientConnection initWithConnection:]
  -[MRExternalJSONClientConnection _encodeDeviceInfo:]
  -[MRExternalJSONClientConnection _processSetState:]
  -[MRExternalJSONClientConnection _encodeVolumeDidChange:]
  -[MRExternalJSONClientConnection _processDeviceInfo:]
  -[MRExternalJSONClientConnection _createProtocolMessage:underlyingCodableMessage:]
  -[MRExternalJSONClientConnection dataForMessage:]
  -[MRExternalJSONClientConnection _protocolMessageFromData:]


MRSetDiscoveryModeMessage : MRProtocolMessage
 @property  unsigned int mode
 @property  MRAVRoutingDiscoverySessionConfiguration *configuration

  // instance methods
  -[MRSetDiscoveryModeMessage configuration]
  -[MRSetDiscoveryModeMessage .cxx_destruct]
  -[MRSetDiscoveryModeMessage initWithUnderlyingCodableMessage:error:]
  -[MRSetDiscoveryModeMessage initWithMode:configuration:]
  -[MRSetDiscoveryModeMessage initWithMode:features:]
  -[MRSetDiscoveryModeMessage type]
  -[MRSetDiscoveryModeMessage mode]


MRDiscoveryUpdateEndpointsMessage : MRProtocolMessage
 @property  NSArray *endpoints
 @property  MRAVRoutingDiscoverySessionConfiguration *configuration

  // instance methods
  -[MRDiscoveryUpdateEndpointsMessage endpoints]
  -[MRDiscoveryUpdateEndpointsMessage configuration]
  -[MRDiscoveryUpdateEndpointsMessage .cxx_destruct]
  -[MRDiscoveryUpdateEndpointsMessage initWithUnderlyingCodableMessage:error:]
  -[MRDiscoveryUpdateEndpointsMessage initWithEndpoints:configuration:]
  -[MRDiscoveryUpdateEndpointsMessage type]


MRDiscoveryUpdateOutputDevicesMessage : MRProtocolMessage
 @property  NSArray *outputDevices
 @property  MRAVRoutingDiscoverySessionConfiguration *configuration

  // instance methods
  -[MRDiscoveryUpdateOutputDevicesMessage configuration]
  -[MRDiscoveryUpdateOutputDevicesMessage .cxx_destruct]
  -[MRDiscoveryUpdateOutputDevicesMessage outputDevices]
  -[MRDiscoveryUpdateOutputDevicesMessage initWithUnderlyingCodableMessage:error:]
  -[MRDiscoveryUpdateOutputDevicesMessage initWithOutputDevices:configuration:]
  -[MRDiscoveryUpdateOutputDevicesMessage type]


_MRSetDiscoveryModeProtobufMessage : PBCodable <NSCopying>
  // instance methods
  -[_MRSetDiscoveryModeProtobufMessage .cxx_destruct]
  -[_MRSetDiscoveryModeProtobufMessage dictionaryRepresentation]
  -[_MRSetDiscoveryModeProtobufMessage writeTo:]
  -[_MRSetDiscoveryModeProtobufMessage isEqual:]
  -[_MRSetDiscoveryModeProtobufMessage readFrom:]
  -[_MRSetDiscoveryModeProtobufMessage copyWithZone:]


MRV2NowPlayingController : NSObject <MREndpointObserver, MRNowPlayingControllerImpl>
 @property  MRNowPlayingControllerDestination *destination
 @property  MRNowPlayingControllerConfiguration *configuration
 @property  id playerPathInvalidationObserver
 @property  MRAVEndpointObserver *endpointObserver
 @property  NSMutableArray *deferredContentItemsToMerge
 @property  BOOL registeredForNotifications
 @property  BOOL registeredForEndpointChanges
 @property  BOOL registeredForEndpointInvalidations
 @property  BOOL registeredForPlayerPathInvalidations
 @property  BOOL updateLoadingEnabled
 @property  BOOL endpointChanged
 @property  BOOL endpointInvalidated
 @property  BOOL playerPathInvalidated
 @property  BOOL beginLoadingInvalidated
 @property  BOOL needsImmediateReload
 @property  NSString *needsImmediateReloadReason
 @property  BOOL shouldObserveInvalidations
 @property  BOOL loading
 @property  BOOL requestingQueue
 @property  MRNowPlayingControllerDestination *pendingDestination
 @property  MSVVariableIntervalTimer *loadRetryTimer
 @property  int incrementingRequestID
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MRNowPlayingControllerHelper *helper

  // instance methods
  -[MRV2NowPlayingController helper]
  -[MRV2NowPlayingController registeredForEndpointInvalidations]
  -[MRV2NowPlayingController setLoading:]
  -[MRV2NowPlayingController setRegisteredForEndpointChanges:]
  -[MRV2NowPlayingController _unregisterForPlayerPathInvalidations]
  -[MRV2NowPlayingController updateLoadingEnabled]
  -[MRV2NowPlayingController setUpdateLoadingEnabled:]
  -[MRV2NowPlayingController _notifyDelegateOfError:]
  -[MRV2NowPlayingController _notifyDelegateOfNewResponse:]
  -[MRV2NowPlayingController _unregisterForEndpointChanges]
  -[MRV2NowPlayingController _unregisterNotificationHandlers]
  -[MRV2NowPlayingController setDestination:]
  -[MRV2NowPlayingController _onQueue_retrieveEndpointForUID:completion:]
  -[MRV2NowPlayingController _loadNowPlayingStateForPlayerPath:error:]
  -[MRV2NowPlayingController _resolvePlayerPath:completion:]
  -[MRV2NowPlayingController _requestSupportedCommandsForPlayerPath:queue:completion:]
  -[MRV2NowPlayingController setRequestingQueue:]
  -[MRV2NowPlayingController _requestPlayerLastPlayingDateForPlayerPath:queue:completion:]
  -[MRV2NowPlayingController deferredContentItemsToMerge]
  -[MRV2NowPlayingController requestingQueue]
  -[MRV2NowPlayingController _notifyDelegateOfUpdatedArtwork:]
  -[MRV2NowPlayingController _requestContentItemArtwork:forPlayerPath:queue:completion:]
  -[MRV2NowPlayingController _notifyDelegateOfInvalidation]
  -[MRV2NowPlayingController _handlePlaybackQueueChangedNotification:]
  -[MRV2NowPlayingController _handlePlaybackQueueContentItemsChangedNotification:]
  -[MRV2NowPlayingController _handlePlaybackQueueContentItemsArtworkChangedNotification:]
  -[MRV2NowPlayingController _handlePlaybackStateChangedNotification:]
  -[MRV2NowPlayingController _handleSupportedCommandsChangedNotification:]
  -[MRV2NowPlayingController _notifyDelegateOfUpdatedPlayerLastPlayingDate:]
  -[MRV2NowPlayingController configuration]
  -[MRV2NowPlayingController beginLoadingUpdates]
  -[MRV2NowPlayingController _handleActiveSystemEndpointChangedNotification:]
  -[MRV2NowPlayingController endLoadingUpdates]
  -[MRV2NowPlayingController setDeferredContentItemsToMerge:]
  -[MRV2NowPlayingController isLoading]
  -[MRV2NowPlayingController .cxx_destruct]
  -[MRV2NowPlayingController setRegisteredForNotifications:]
  -[MRV2NowPlayingController endpointDidDisconnect:]
  -[MRV2NowPlayingController registeredForPlayerPathInvalidations]
  -[MRV2NowPlayingController destination]
  -[MRV2NowPlayingController setIsLoading:]
  -[MRV2NowPlayingController setQueue:]
  -[MRV2NowPlayingController _reloadWithReason:]
  -[MRV2NowPlayingController _onQueue_clearAllState]
  -[MRV2NowPlayingController _resolveForConfiguration:requestID:completion:]
  -[MRV2NowPlayingController needsImmediateReloadReason]
  -[MRV2NowPlayingController _configureReloadTimerForError:]
  -[MRV2NowPlayingController _loadNowPlayingStateForConfiguration:requestID:completion:]
  -[MRV2NowPlayingController _loadNowPlayingStateForResolvedPlayerPath:requestID:completion:]
  -[MRV2NowPlayingController _resolveForUnresolvedPlayerPath:requestID:completion:]
  -[MRV2NowPlayingController _resolveForEndpoint:client:player:requestID:completion:]
  -[MRV2NowPlayingController _resolveForOutputDeviceUID:client:player:requestID:completion:]
  -[MRV2NowPlayingController _registerForEndpointChangesForOutputDeviceUID:]
  -[MRV2NowPlayingController _registerForEndpointInvalidations:]
  -[MRV2NowPlayingController _onQueue_clearStateForEndpoint]
  -[MRV2NowPlayingController _createUnresolvedPlayerPathForEndpoint:client:player:completion:]
  -[MRV2NowPlayingController _registerForPlayerPathInvalidationsForUnresolvedPlayerPath:]
  -[MRV2NowPlayingController _onQueue_clearStateForUnresolvedPlayerPath]
  -[MRV2NowPlayingController _registerNotificationHandlersForResolvedPlayerPath:]
  -[MRV2NowPlayingController shouldDeferArtworkRequestForConfiguration:]
  -[MRV2NowPlayingController _requestPlaybackQueueArtworkForIdentifiers:]
  -[MRV2NowPlayingController effectivePlaybackQueueRequest]
  -[MRV2NowPlayingController _requestPlaybackQueueForPlayerPath:request:queue:completion:]
  -[MRV2NowPlayingController _requestClientPropertiesForPlayerPath:queue:completion:]
  -[MRV2NowPlayingController _onQueue_clearStateForOutputDeviceUID]
  -[MRV2NowPlayingController _unregisterForEndpointInvalidations]
  -[MRV2NowPlayingController _onQueue_clearStateForResolvedPlayerPath]
  -[MRV2NowPlayingController _notifyDelegateOfPlayerPathChange:]
  -[MRV2NowPlayingController _notifyDelegateOfPlaybackQueueChange:]
  -[MRV2NowPlayingController _notifyDelegateOfUpdatedContentItemsWithContentItems:]
  -[MRV2NowPlayingController _notifyDelegateOfPlaybackStateChange:]
  -[MRV2NowPlayingController _notifyDelegateOfSupportedCommandsChange:]
  -[MRV2NowPlayingController _handleEndpointChanged]
  -[MRV2NowPlayingController _handleEndpointInvalidated]
  -[MRV2NowPlayingController shouldObserveInvalidations]
  -[MRV2NowPlayingController _handleEndpointChangedToEndpoint:]
  -[MRV2NowPlayingController _handlePlayerPathInvalidatedWithPlayerPath:]
  -[MRV2NowPlayingController setEndpointChanged:]
  -[MRV2NowPlayingController pendingDestination]
  -[MRV2NowPlayingController setEndpointInvalidated:]
  -[MRV2NowPlayingController setPlayerPathInvalidated:]
  -[MRV2NowPlayingController loadRetryTimer]
  -[MRV2NowPlayingController registeredForEndpointChanges]
  -[MRV2NowPlayingController _handleRetryTimerElapsed]
  -[MRV2NowPlayingController setLoadRetryTimer:]
  -[MRV2NowPlayingController needsImmediateReload]
  -[MRV2NowPlayingController endpointChanged]
  -[MRV2NowPlayingController endpointInvalidated]
  -[MRV2NowPlayingController playerPathInvalidated]
  -[MRV2NowPlayingController beginLoadingInvalidated]
  -[MRV2NowPlayingController setBeginLoadingInvalidated:]
  -[MRV2NowPlayingController destinationWithCompletion:]
  -[MRV2NowPlayingController _notifyDelegateOfUpdatedClientProperties:]
  -[MRV2NowPlayingController setPendingDestination:]
  -[MRV2NowPlayingController incrementingRequestID]
  -[MRV2NowPlayingController setIncrementingRequestID:]
  -[MRV2NowPlayingController setHelper:]
  -[MRV2NowPlayingController initWithConfiguration:]
  -[MRV2NowPlayingController endpointObserver]
  -[MRV2NowPlayingController playerPathInvalidationObserver]
  -[MRV2NowPlayingController queue]
  -[MRV2NowPlayingController registeredForNotifications]
  -[MRV2NowPlayingController onQueue_setResolvedPlayerPath:]
  -[MRV2NowPlayingController setRegisteredForEndpointInvalidations:]
  -[MRV2NowPlayingController dealloc]
  -[MRV2NowPlayingController setPlayerPathInvalidationObserver:]
  -[MRV2NowPlayingController setRegisteredForPlayerPathInvalidations:]
  -[MRV2NowPlayingController setEndpointObserver:]
  -[MRV2NowPlayingController setConfiguration:]


MRRegisterHIDDeviceResultMessage : MRProtocolMessage
 @property  long long errorCode
 @property  unsigned long deviceIdentifier

  // instance methods
  -[MRRegisterHIDDeviceResultMessage errorCode]
  -[MRRegisterHIDDeviceResultMessage initWithErrorCode:deviceIdentifier:]
  -[MRRegisterHIDDeviceResultMessage deviceIdentifier]
  -[MRRegisterHIDDeviceResultMessage type]


MRTransactionMessage : MRProtocolMessage
 @property  unsigned long name
 @property  NSArray *packets
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRTransactionMessage playerPath]
  -[MRTransactionMessage name]
  -[MRTransactionMessage .cxx_destruct]
  -[MRTransactionMessage initWithContentItems:forPlayerPath:]
  -[MRTransactionMessage packets]
  -[MRTransactionMessage initWithName:packets:playerPath:]
  -[MRTransactionMessage initWithPlaybackQueue:forPlayerPath:]
  -[MRTransactionMessage type]


_MRSendCommandResultHandlerDialogActionProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendCommandResultHandlerDialogActionProtobuf .cxx_destruct]
  -[_MRSendCommandResultHandlerDialogActionProtobuf dictionaryRepresentation]
  -[_MRSendCommandResultHandlerDialogActionProtobuf writeTo:]
  -[_MRSendCommandResultHandlerDialogActionProtobuf isEqual:]
  -[_MRSendCommandResultHandlerDialogActionProtobuf readFrom:]
  -[_MRSendCommandResultHandlerDialogActionProtobuf copyWithZone:]


MRExternalDeviceManager : NSObject
 @property  NSArray *allDevices

  // class methods
  +[MRExternalDeviceManager sharedManager]

  // instance methods
  -[MRExternalDeviceManager .cxx_destruct]
  -[MRExternalDeviceManager deviceWithIdentifier:]
  -[MRExternalDeviceManager registerDevice:]
  -[MRExternalDeviceManager clearDevices]
  -[MRExternalDeviceManager allDevices]
  -[MRExternalDeviceManager init]


_MRRemoveClientMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRemoveClientMessageProtobuf .cxx_destruct]
  -[_MRRemoveClientMessageProtobuf dictionaryRepresentation]
  -[_MRRemoveClientMessageProtobuf writeTo:]
  -[_MRRemoveClientMessageProtobuf isEqual:]
  -[_MRRemoveClientMessageProtobuf readFrom:]
  -[_MRRemoveClientMessageProtobuf copyWithZone:]


MRPlaybackSessionMigrateRequest : NSObject <NSCopying>
 @property  unsigned int destinationTypes
 @property  long long playerOptions
 @property  long long endpointOptions
 @property  NSString *requestID
 @property  NSString *appBundleIdentifier
 @property  NSString *initiator
 @property  unsigned long requestType
 @property  unsigned long fallbackReason
 @property  double playbackPosition
 @property  double playbackRate
 @property  long long playbackSessionSize
 @property  unsigned int playbackState
 @property  MRContentItem *contentItem
 @property  unsigned int originatorType
 @property  double duration
 @property  NSString *report
 @property  MRPlaybackSessionRequest *playbackSessionRequest
 @property  BOOL allowFadeTransition
 @property  _MRPlaybackSessionMigrateRequestProtobuf *protobuf
 @property  NSData *protobufData

  // instance methods
  -[MRPlaybackSessionMigrateRequest setPlaybackRate:]
  -[MRPlaybackSessionMigrateRequest merge:]
  -[MRPlaybackSessionMigrateRequest appBundleIdentifier]
  -[MRPlaybackSessionMigrateRequest requestID]
  -[MRPlaybackSessionMigrateRequest playbackRate]
  -[MRPlaybackSessionMigrateRequest playbackState]
  -[MRPlaybackSessionMigrateRequest setInitiator:]
  -[MRPlaybackSessionMigrateRequest setPlaybackState:]
  -[MRPlaybackSessionMigrateRequest setRequestType:]
  -[MRPlaybackSessionMigrateRequest finalize]
  -[MRPlaybackSessionMigrateRequest protobufData]
  -[MRPlaybackSessionMigrateRequest .cxx_destruct]
  -[MRPlaybackSessionMigrateRequest setAppBundleIdentifier:]
  -[MRPlaybackSessionMigrateRequest report]
  -[MRPlaybackSessionMigrateRequest endEvent:]
  -[MRPlaybackSessionMigrateRequest init]
  -[MRPlaybackSessionMigrateRequest contentItem]
  -[MRPlaybackSessionMigrateRequest playbackPosition]
  -[MRPlaybackSessionMigrateRequest requestType]
  -[MRPlaybackSessionMigrateRequest setPlaybackPosition:]
  -[MRPlaybackSessionMigrateRequest protobuf]
  -[MRPlaybackSessionMigrateRequest playerOptions]
  -[MRPlaybackSessionMigrateRequest initWithProtobuf:]
  -[MRPlaybackSessionMigrateRequest initWithData:]
  -[MRPlaybackSessionMigrateRequest endEvent:withError:]
  -[MRPlaybackSessionMigrateRequest initiator]
  -[MRPlaybackSessionMigrateRequest playbackSessionRequest]
  -[MRPlaybackSessionMigrateRequest setPlayerOptions:]
  -[MRPlaybackSessionMigrateRequest setPlaybackSessionSize:]
  -[MRPlaybackSessionMigrateRequest setContentItem:]
  -[MRPlaybackSessionMigrateRequest setAllowFadeTransition:]
  -[MRPlaybackSessionMigrateRequest setEndpointOptions:]
  -[MRPlaybackSessionMigrateRequest allowFadeTransition]
  -[MRPlaybackSessionMigrateRequest setPlaybackSessionRequest:]
  -[MRPlaybackSessionMigrateRequest endpointOptions]
  -[MRPlaybackSessionMigrateRequest originatorType]
  -[MRPlaybackSessionMigrateRequest destinationTypes]
  -[MRPlaybackSessionMigrateRequest playbackSessionSize]
  -[MRPlaybackSessionMigrateRequest addDestinationType:]
  -[MRPlaybackSessionMigrateRequest setOriginatorTypeFromDevice:]
  -[MRPlaybackSessionMigrateRequest addDestinationTypesFromDevices:]
  -[MRPlaybackSessionMigrateRequest setOriginatorType:]
  -[MRPlaybackSessionMigrateRequest setDestinationTypes:]
  -[MRPlaybackSessionMigrateRequest fallbackReason]
  -[MRPlaybackSessionMigrateRequest setFallbackReason:]
  -[MRPlaybackSessionMigrateRequest setRequestID:]
  -[MRPlaybackSessionMigrateRequest startEvent:]
  -[MRPlaybackSessionMigrateRequest copyWithZone:]
  -[MRPlaybackSessionMigrateRequest duration]


_MRRemoveOutputDevicesMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRemoveOutputDevicesMessageProtobuf .cxx_destruct]
  -[_MRRemoveOutputDevicesMessageProtobuf dictionaryRepresentation]
  -[_MRRemoveOutputDevicesMessageProtobuf writeTo:]
  -[_MRRemoveOutputDevicesMessageProtobuf isEqual:]
  -[_MRRemoveOutputDevicesMessageProtobuf readFrom:]
  -[_MRRemoveOutputDevicesMessageProtobuf copyWithZone:]


MRAVXPCPipeTransport : MRExternalDeviceTransport <NSStreamDelegate, MRVirtualDevicePipeProtocol>
 @property  MRAVOutputDevice *outputDevice
 @property  NSXPCListenerEndpoint *pipeEndpoint
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRAVXPCPipeTransport hostname]
  -[MRAVXPCPipeTransport deviceInfo]
  -[MRAVXPCPipeTransport uid]
  -[MRAVXPCPipeTransport name]
  -[MRAVXPCPipeTransport port]
  -[MRAVXPCPipeTransport sendData:]
  -[MRAVXPCPipeTransport shouldUseSystemAuthenticationPrompt]
  -[MRAVXPCPipeTransport setShouldUseSystemAuthenticationPrompt:]
  -[MRAVXPCPipeTransport createConnectionWithUserInfo:]
  -[MRAVXPCPipeTransport .cxx_destruct]
  -[MRAVXPCPipeTransport requiresCustomPairing]
  -[MRAVXPCPipeTransport outputDevice]
  -[MRAVXPCPipeTransport reset]
  -[MRAVXPCPipeTransport pipeEndpoint]
  -[MRAVXPCPipeTransport getInputStream:outputStream:userInfo:]
  -[MRAVXPCPipeTransport _onQueue_resetStreams]
  -[MRAVXPCPipeTransport initWithOutputDevice:pipeEndpoint:]
  -[MRAVXPCPipeTransport dealloc]
  -[MRAVXPCPipeTransport stream:handleEvent:]
  -[MRAVXPCPipeTransport error]


MRAVOutputDeviceSourceInfo : NSObject
 @property  NSString *routingContextUID
 @property  BOOL multipleBuiltInDevices

  // instance methods
  -[MRAVOutputDeviceSourceInfo .cxx_destruct]
  -[MRAVOutputDeviceSourceInfo initWithRoutingContextUID:multipleBuiltInDevices:]
  -[MRAVOutputDeviceSourceInfo routingContextUID]
  -[MRAVOutputDeviceSourceInfo isEqual:]
  -[MRAVOutputDeviceSourceInfo multipleBuiltInDevices]


MRPlayerPath : NSObject <NSCopying, NSSecureCoding>
 @property  _MRNowPlayingPlayerPathProtobuf *protobuf
 @property  MROrigin *origin
 @property  MRClient *client
 @property  MRPlayer *player
 @property  MRPlayerPath *localResolvedPlayerPath
 @property  BOOL local
 @property  MRPlayerPath *skeleton
 @property  NSData *data
 @property  BOOL resolved
 @property  BOOL systemMediaApplication
 @property  BOOL systemPodcastsApplication
 @property  BOOL systemBooksApplication
 @property  BOOL homepodDemoApplication

  // class methods
  +[MRPlayerPath supportsSecureCoding]
  +[MRPlayerPath anyPlayerPath]
  +[MRPlayerPath localResolvedPlayerPathFromPlayerPath:]
  +[MRPlayerPath localPlayerPath]

  // instance methods
  -[MRPlayerPath skeleton]
  -[MRPlayerPath isResolved]
  -[MRPlayerPath isSystemPodcastsApplication]
  -[MRPlayerPath initWithCoder:]
  -[MRPlayerPath origin]
  -[MRPlayerPath setOrigin:]
  -[MRPlayerPath playerPathByLocalizingWithOrigin:]
  -[MRPlayerPath .cxx_destruct]
  -[MRPlayerPath isLocal]
  -[MRPlayerPath data]
  -[MRPlayerPath setClient:]
  -[MRPlayerPath isSystemMediaApplication]
  -[MRPlayerPath setPlayer:]
  -[MRPlayerPath localResolvedPlayerPath]
  -[MRPlayerPath playerPathByRedirectingToOrigin:]
  -[MRPlayerPath isEqual:]
  -[MRPlayerPath player]
  -[MRPlayerPath protobuf]
  -[MRPlayerPath isHomepodDemoApplication]
  -[MRPlayerPath initWithProtobuf:]
  -[MRPlayerPath initWithData:]
  -[MRPlayerPath initWithOrigin:client:player:]
  -[MRPlayerPath client]
  -[MRPlayerPath isSystemBooksApplication]
  -[MRPlayerPath copyWithZone:]
  -[MRPlayerPath encodeWithCoder:]


MRNetServiceTransport : MRExternalDeviceTransport
 @property  NSNetService *netService
 @property  BOOL requiresCustomPairing

  // class methods
  +[MRNetServiceTransport createDeviceInfoFromTXTRecord:]
  +[MRNetServiceTransport createDeviceInfoFromNetService:]

  // instance methods
  -[MRNetServiceTransport hostname]
  -[MRNetServiceTransport connectionType]
  -[MRNetServiceTransport deviceInfo]
  -[MRNetServiceTransport name]
  -[MRNetServiceTransport port]
  -[MRNetServiceTransport shouldUseSystemAuthenticationPrompt]
  -[MRNetServiceTransport setShouldUseSystemAuthenticationPrompt:]
  -[MRNetServiceTransport createConnectionWithUserInfo:]
  -[MRNetServiceTransport .cxx_destruct]
  -[MRNetServiceTransport resetWithError:]
  -[MRNetServiceTransport requiresCustomPairing]
  -[MRNetServiceTransport netService]
  -[MRNetServiceTransport getInputStream:outputStream:userInfo:]
  -[MRNetServiceTransport updateDeviceInfoWithTXTRecord:]
  -[MRNetServiceTransport setNetService:]
  -[MRNetServiceTransport setRequiresCustomPairing:]
  -[MRNetServiceTransport dealloc]
  -[MRNetServiceTransport initWithNetService:]
  -[MRNetServiceTransport error]


_MRCryptoPairingMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRCryptoPairingMessageProtobuf .cxx_destruct]
  -[_MRCryptoPairingMessageProtobuf dictionaryRepresentation]
  -[_MRCryptoPairingMessageProtobuf writeTo:]
  -[_MRCryptoPairingMessageProtobuf isEqual:]
  -[_MRCryptoPairingMessageProtobuf readFrom:]
  -[_MRCryptoPairingMessageProtobuf copyWithZone:]


_MRAVEndpointDescriptorProtobuf : PBCodable <NSCopying>
 @property  BOOL hasName
 @property  NSString *name
 @property  BOOL hasUniqueIdentifier
 @property  NSString *uniqueIdentifier
 @property  NSMutableArray *outputDevices
 @property  BOOL hasDesignatedGroupLeader
 @property  _MRAVOutputDeviceDescriptorProtobuf *designatedGroupLeader
 @property  BOOL hasIsLocalEndpoint
 @property  BOOL isLocalEndpoint
 @property  BOOL hasInstanceIdentifier
 @property  NSString *instanceIdentifier
 @property  BOOL hasIsProxyGroupPlayer
 @property  BOOL isProxyGroupPlayer
 @property  BOOL hasConnectionType
 @property  int connectionType
 @property  BOOL hasCanModifyGroupMembership
 @property  BOOL canModifyGroupMembership
 @property  NSMutableArray *personalOutputDevices

  // class methods
  +[_MRAVEndpointDescriptorProtobuf outputDevicesType]
  +[_MRAVEndpointDescriptorProtobuf personalOutputDevicesType]

  // instance methods
  -[_MRAVEndpointDescriptorProtobuf hasUniqueIdentifier]
  -[_MRAVEndpointDescriptorProtobuf designatedGroupLeader]
  -[_MRAVEndpointDescriptorProtobuf setUniqueIdentifier:]
  -[_MRAVEndpointDescriptorProtobuf hasIsProxyGroupPlayer]
  -[_MRAVEndpointDescriptorProtobuf setIsProxyGroupPlayer:]
  -[_MRAVEndpointDescriptorProtobuf connectionType]
  -[_MRAVEndpointDescriptorProtobuf setHasIsProxyGroupPlayer:]
  -[_MRAVEndpointDescriptorProtobuf hasDesignatedGroupLeader]
  -[_MRAVEndpointDescriptorProtobuf isLocalEndpoint]
  -[_MRAVEndpointDescriptorProtobuf mergeFrom:]
  -[_MRAVEndpointDescriptorProtobuf canModifyGroupMembership]
  -[_MRAVEndpointDescriptorProtobuf StringAsConnectionType:]
  -[_MRAVEndpointDescriptorProtobuf name]
  -[_MRAVEndpointDescriptorProtobuf connectionTypeAsString:]
  -[_MRAVEndpointDescriptorProtobuf isProxyGroupPlayer]
  -[_MRAVEndpointDescriptorProtobuf uniqueIdentifier]
  -[_MRAVEndpointDescriptorProtobuf setHasConnectionType:]
  -[_MRAVEndpointDescriptorProtobuf personalOutputDevices]
  -[_MRAVEndpointDescriptorProtobuf hasInstanceIdentifier]
  -[_MRAVEndpointDescriptorProtobuf hasConnectionType]
  -[_MRAVEndpointDescriptorProtobuf setConnectionType:]
  -[_MRAVEndpointDescriptorProtobuf .cxx_destruct]
  -[_MRAVEndpointDescriptorProtobuf setCanModifyGroupMembership:]
  -[_MRAVEndpointDescriptorProtobuf hasName]
  -[_MRAVEndpointDescriptorProtobuf dictionaryRepresentation]
  -[_MRAVEndpointDescriptorProtobuf writeTo:]
  -[_MRAVEndpointDescriptorProtobuf setName:]
  -[_MRAVEndpointDescriptorProtobuf setPersonalOutputDevices:]
  -[_MRAVEndpointDescriptorProtobuf outputDevicesCount]
  -[_MRAVEndpointDescriptorProtobuf setDesignatedGroupLeader:]
  -[_MRAVEndpointDescriptorProtobuf setOutputDevices:]
  -[_MRAVEndpointDescriptorProtobuf isEqual:]
  -[_MRAVEndpointDescriptorProtobuf outputDevices]
  -[_MRAVEndpointDescriptorProtobuf copyTo:]
  -[_MRAVEndpointDescriptorProtobuf readFrom:]
  -[_MRAVEndpointDescriptorProtobuf clearOutputDevices]
  -[_MRAVEndpointDescriptorProtobuf outputDevicesAtIndex:]
  -[_MRAVEndpointDescriptorProtobuf setHasCanModifyGroupMembership:]
  -[_MRAVEndpointDescriptorProtobuf addOutputDevices:]
  -[_MRAVEndpointDescriptorProtobuf clearPersonalOutputDevices]
  -[_MRAVEndpointDescriptorProtobuf hasCanModifyGroupMembership]
  -[_MRAVEndpointDescriptorProtobuf copyWithZone:]
  -[_MRAVEndpointDescriptorProtobuf addPersonalOutputDevices:]
  -[_MRAVEndpointDescriptorProtobuf setHasIsLocalEndpoint:]
  -[_MRAVEndpointDescriptorProtobuf personalOutputDevicesCount]
  -[_MRAVEndpointDescriptorProtobuf setIsLocalEndpoint:]
  -[_MRAVEndpointDescriptorProtobuf instanceIdentifier]
  -[_MRAVEndpointDescriptorProtobuf personalOutputDevicesAtIndex:]
  -[_MRAVEndpointDescriptorProtobuf hasIsLocalEndpoint]
  -[_MRAVEndpointDescriptorProtobuf setInstanceIdentifier:]


MRWeakProxy : NSObject
 @property  id object
 @property  Protocol *protocol

  // class methods
  +[MRWeakProxy weakProxyWithObject:protocol:]

  // instance methods
  -[MRWeakProxy methodSignatureForSelector:]
  -[MRWeakProxy .cxx_destruct]
  -[MRWeakProxy setProtocol:]
  -[MRWeakProxy isEqual:]
  -[MRWeakProxy object]
  -[MRWeakProxy protocol]
  -[MRWeakProxy setObject:]
  -[MRWeakProxy forwardInvocation:]


_MRPromptForRouteAuthorizationResponseMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPromptForRouteAuthorizationResponseMessageProtobuf .cxx_destruct]
  -[_MRPromptForRouteAuthorizationResponseMessageProtobuf dictionaryRepresentation]
  -[_MRPromptForRouteAuthorizationResponseMessageProtobuf writeTo:]
  -[_MRPromptForRouteAuthorizationResponseMessageProtobuf isEqual:]
  -[_MRPromptForRouteAuthorizationResponseMessageProtobuf readFrom:]
  -[_MRPromptForRouteAuthorizationResponseMessageProtobuf copyWithZone:]


MRMigrationDevice : NSObject <MRQHONowPlayingControllerDelegate>
 @property  MRQHONowPlayingController *controller
 @property  unsigned long deviceState
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSError *prepareError
 @property  BOOL preparedForAirPlay
 @property  NSString *uid
 @property  MRAVEndpoint *endpoint
 @property  BOOL isPrepared
 @property  MRNowPlayingPlayerResponse *playerState
 @property  <MRMigrationDeviceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRMigrationDevice proactiveDevice]

  // instance methods
  -[MRMigrationDevice setController:]
  -[MRMigrationDevice prepareError]
  -[MRMigrationDevice uid]
  -[MRMigrationDevice initWithUID:]
  -[MRMigrationDevice controller:didLoadResponse:]
  -[MRMigrationDevice controller]
  -[MRMigrationDevice controller:didUpdateResponse:]
  -[MRMigrationDevice .cxx_destruct]
  -[MRMigrationDevice dictionaryRepresentation]
  -[MRMigrationDevice setDelegate:]
  -[MRMigrationDevice setQueue:]
  -[MRMigrationDevice isPrepared]
  -[MRMigrationDevice setDeviceState:]
  -[MRMigrationDevice deviceState]
  -[MRMigrationDevice playerState]
  -[MRMigrationDevice delegate]
  -[MRMigrationDevice queue]
  -[MRMigrationDevice controller:didFailWithError:]
  -[MRMigrationDevice preparedForAirPlay]
  -[MRMigrationDevice _checkIfAirPlayPossible]
  -[MRMigrationDevice setPreparedForAirPlay:]
  -[MRMigrationDevice _notifyDelegateOfStateChange]
  -[MRMigrationDevice _notifyDelegateOfPlayerStateChange]
  -[MRMigrationDevice dealloc]
  -[MRMigrationDevice endpoint]
  -[MRMigrationDevice prepare]
  -[MRMigrationDevice setPrepareError:]
  -[MRMigrationDevice controllerWillReloadForInvalidation:]


_MRDiscoveryUpdateOutputDevicesProtobufMessage : PBCodable <NSCopying>
  // instance methods
  -[_MRDiscoveryUpdateOutputDevicesProtobufMessage .cxx_destruct]
  -[_MRDiscoveryUpdateOutputDevicesProtobufMessage dictionaryRepresentation]
  -[_MRDiscoveryUpdateOutputDevicesProtobufMessage writeTo:]
  -[_MRDiscoveryUpdateOutputDevicesProtobufMessage isEqual:]
  -[_MRDiscoveryUpdateOutputDevicesProtobufMessage readFrom:]
  -[_MRDiscoveryUpdateOutputDevicesProtobufMessage copyWithZone:]


MRSendCommandHandlerEvent : NSObject <NSCopying>
 @property  _MRSendCommandMessageProtobuf *protobuf
 @property  unsigned int command
 @property  NSString *commandDescription
 @property  NSDictionary *options

  // class methods
  +[MRSendCommandHandlerEvent eventWithCommand:options:]

  // instance methods
  -[MRSendCommandHandlerEvent options]
  -[MRSendCommandHandlerEvent .cxx_destruct]
  -[MRSendCommandHandlerEvent command]
  -[MRSendCommandHandlerEvent protobuf]
  -[MRSendCommandHandlerEvent initWithProtobuf:]
  -[MRSendCommandHandlerEvent initWithCommand:options:]
  -[MRSendCommandHandlerEvent commandDescription]
  -[MRSendCommandHandlerEvent copyWithZone:]


MRSendCommandHandlerDialogAction : NSObject <NSCopying>
 @property  _MRSendCommandResultHandlerDialogActionProtobuf *protobuf
 @property  NSString *title
 @property  MRSendCommandHandlerEvent *event
 @property  long long type

  // class methods
  +[MRSendCommandHandlerDialogAction actionWithTitle:type:commandEvent:]

  // instance methods
  -[MRSendCommandHandlerDialogAction .cxx_destruct]
  -[MRSendCommandHandlerDialogAction protobuf]
  -[MRSendCommandHandlerDialogAction initWithProtobuf:]
  -[MRSendCommandHandlerDialogAction title]
  -[MRSendCommandHandlerDialogAction type]
  -[MRSendCommandHandlerDialogAction initWithTitle:type:commandEvent:]
  -[MRSendCommandHandlerDialogAction copyWithZone:]
  -[MRSendCommandHandlerDialogAction event]


MRSendCommandHandlerDialog : NSObject <NSCopying>
 @property  _MRSendCommandResultHandlerDialogProtobuf *protobuf
 @property  NSString *localizedTitle
 @property  NSString *localizedMessage
 @property  NSArray *actions

  // class methods
  +[MRSendCommandHandlerDialog dialogWithTitle:message:]

  // instance methods
  -[MRSendCommandHandlerDialog localizedTitle]
  -[MRSendCommandHandlerDialog addAction:]
  -[MRSendCommandHandlerDialog .cxx_destruct]
  -[MRSendCommandHandlerDialog actions]
  -[MRSendCommandHandlerDialog initWithTitle:message:]
  -[MRSendCommandHandlerDialog setLocalizedTitle:]
  -[MRSendCommandHandlerDialog protobuf]
  -[MRSendCommandHandlerDialog localizedMessage]
  -[MRSendCommandHandlerDialog initWithProtobuf:]
  -[MRSendCommandHandlerDialog copyWithZone:]
  -[MRSendCommandHandlerDialog setLocalizedMessage:]


_MRGenericMessageProtobuf : PBCodable <NSCopying>
 @property  BOOL hasData
 @property  NSData *data

  // instance methods
  -[_MRGenericMessageProtobuf hasData]
  -[_MRGenericMessageProtobuf .cxx_destruct]
  -[_MRGenericMessageProtobuf dictionaryRepresentation]
  -[_MRGenericMessageProtobuf writeTo:]
  -[_MRGenericMessageProtobuf data]
  -[_MRGenericMessageProtobuf isEqual:]
  -[_MRGenericMessageProtobuf readFrom:]
  -[_MRGenericMessageProtobuf setData:]
  -[_MRGenericMessageProtobuf copyWithZone:]


_MRTextInputMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRTextInputMessageProtobuf .cxx_destruct]
  -[_MRTextInputMessageProtobuf dictionaryRepresentation]
  -[_MRTextInputMessageProtobuf writeTo:]
  -[_MRTextInputMessageProtobuf isEqual:]
  -[_MRTextInputMessageProtobuf readFrom:]
  -[_MRTextInputMessageProtobuf copyWithZone:]


MRNowPlayingRequest : NSObject
 @property  MRDestination *destination

  // instance methods
  -[MRNowPlayingRequest initWithPlayerPath:]
  -[MRNowPlayingRequest triggerAudioFadeInWithReplyQueue:completion:]
  -[MRNowPlayingRequest sendCommand:options:appOptions:queue:completion:]
  -[MRNowPlayingRequest initWithOrigin:]
  -[MRNowPlayingRequest .cxx_destruct]
  -[MRNowPlayingRequest requestShuffleAndRepeatModeOnQueue:completion:]
  -[MRNowPlayingRequest requestSupportedCommandsOnQueue:completion:]
  -[MRNowPlayingRequest triggerAudioFadeOutForNowPlayingApplicationWithReplyQueue:completion:]
  -[MRNowPlayingRequest destination]
  -[MRNowPlayingRequest requestClientPropertiesOnQueue:completion:]
  -[MRNowPlayingRequest init]
  -[MRNowPlayingRequest requestDeviceLastPlayingDateOnQueue:completion:]
  -[MRNowPlayingRequest requestNowPlayingItemArtworkOnQueue:completion:]
  -[MRNowPlayingRequest requestLastPlayingDateOnQueue:completion:]
  -[MRNowPlayingRequest requestNowPlayingItemMetadataOnQueue:completion:]
  -[MRNowPlayingRequest requestNowPlayingInfoOnQueue:completion:]
  -[MRNowPlayingRequest initWithDestination:]
  -[MRNowPlayingRequest sendCommand:options:queue:completion:]
  -[MRNowPlayingRequest requestPlaybackStateOnQueue:completion:]
  -[MRNowPlayingRequest requestNowPlayingItemLanguageOptionsOnQueue:completion:]
  -[MRNowPlayingRequest requestProxiableSupportedCommandsOnQueue:completion:]
  -[MRNowPlayingRequest nowPlayingPlayerPathOnQueue:completion:]


MRTelevisionDevice : MRTransportExternalDevice <RTIInputSystemPayloadDelegate>
 @property  @? gameControllerInputModeCallback
 @property  unsigned int gameControllerInputMode
 @property  NSObject<OS_dispatch_queue> *gameControllerInputModeCallbackQueue
 @property  @? gameControllerPropertiesCallback
 @property  NSObject<OS_dispatch_queue> *gameControllerPropertiesCallbackQueue
 @property  @? recordingStateCallback
 @property  NSObject<OS_dispatch_queue> *recordingStateCallbackQueue
 @property  @? textInputCallback
 @property  NSObject<OS_dispatch_queue> *textInputCallbackQueue
 @property  @? rtiCallback
 @property  NSObject<OS_dispatch_queue> *rtiCallbackQueue
 @property  RTIInputSystemSourceSession *rtiSourceSession
 @property  @? hiliteModeCallback
 @property  NSObject<OS_dispatch_queue> *hiliteModeCallbackQueue
 @property  BOOL hiliteMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRTelevisionDevice wake]
  -[MRTelevisionDevice .cxx_destruct]
  -[MRTelevisionDevice hiliteMode]
  -[MRTelevisionDevice handleTextActionPayload:]
  -[MRTelevisionDevice rtiCallback]
  -[MRTelevisionDevice initWithTransport:]
  -[MRTelevisionDevice setRtiCallback:]
  -[MRTelevisionDevice setGameControllerInputModeCallback:]
  -[MRTelevisionDevice setTextInputCallback:]
  -[MRTelevisionDevice setGameControllerInputModeCallbackQueue:]
  -[MRTelevisionDevice setGameControllerPropertiesCallback:]
  -[MRTelevisionDevice setGameControllerPropertiesCallbackQueue:]
  -[MRTelevisionDevice setTextInputCallbackQueue:]
  -[MRTelevisionDevice textInputCallback]
  -[MRTelevisionDevice setRtiCallbackQueue:]
  -[MRTelevisionDevice setRecordingStateCallback:]
  -[MRTelevisionDevice setRecordingStateCallbackQueue:]
  -[MRTelevisionDevice setHiliteModeCallback:]
  -[MRTelevisionDevice setHiliteModeCallbackQueue:]
  -[MRTelevisionDevice setGameControllerInputMode:]
  -[MRTelevisionDevice setRtiSourceSession:]
  -[MRTelevisionDevice rtiCallbackQueue]
  -[MRTelevisionDevice setGameControllerInputModeCallback:withQueue:]
  -[MRTelevisionDevice setGameControllerPropertiesCallback:withQueue:]
  -[MRTelevisionDevice setRTICallback:withQueue:]
  -[MRTelevisionDevice setTextEditingCallback:withQueue:]
  -[MRTelevisionDevice setVoiceRecordingStateCallback:withQueue:]
  -[MRTelevisionDevice setHiliteModeCallback:withQueue:]
  -[MRTelevisionDevice currentClientUpdatesConfigMessage]
  -[MRTelevisionDevice sendTouchEvent:toVirtualDeviceWithID:]
  -[MRTelevisionDevice exitHiliteMode]
  -[MRTelevisionDevice registerTouchDeviceWithDescriptor:replyQueue:completion:]
  -[MRTelevisionDevice getTextEditingSessionWithReplyQueue:completion:]
  -[MRTelevisionDevice insertTextIntoActiveTextEditingSessionWithText:]
  -[MRTelevisionDevice setTextOnActiveTextEditingSessionWithText:]
  -[MRTelevisionDevice deleteBackwardInActiveTextEditingSession]
  -[MRTelevisionDevice clearActiveTextEditingSessionData]
  -[MRTelevisionDevice getRTISessionWithReplyQueue:completion:]
  -[MRTelevisionDevice registerGameControllerWithProperties:queue:completion:]
  -[MRTelevisionDevice unregisterGameController:]
  -[MRTelevisionDevice sendGameControllerEvent:controllerID:]
  -[MRTelevisionDevice registerVoiceInputDeviceWithDescriptor:replyQueue:completion:]
  -[MRTelevisionDevice processVoiceInputAudioDataForDeviceID:withBuffer:time:gain:]
  -[MRTelevisionDevice gameControllerInputModeCallback]
  -[MRTelevisionDevice gameControllerInputMode]
  -[MRTelevisionDevice gameControllerInputModeCallbackQueue]
  -[MRTelevisionDevice gameControllerPropertiesCallback]
  -[MRTelevisionDevice gameControllerPropertiesCallbackQueue]
  -[MRTelevisionDevice recordingStateCallback]
  -[MRTelevisionDevice recordingStateCallbackQueue]
  -[MRTelevisionDevice textInputCallbackQueue]
  -[MRTelevisionDevice rtiSourceSession]
  -[MRTelevisionDevice hiliteModeCallback]
  -[MRTelevisionDevice hiliteModeCallbackQueue]
  -[MRTelevisionDevice clientConnection:didReceiveMessage:]


MRGetVolumeMessage : MRProtocolMessage
 @property  NSString *outputDeviceUID

  // instance methods
  -[MRGetVolumeMessage initWithOutputDeviceUID:]
  -[MRGetVolumeMessage outputDeviceUID]
  -[MRGetVolumeMessage init]
  -[MRGetVolumeMessage type]


MRGetVolumeResultMessage : MRProtocolMessage
 @property  float volume

  // instance methods
  -[MRGetVolumeResultMessage volume]
  -[MRGetVolumeResultMessage initWithVolume:]
  -[MRGetVolumeResultMessage type]


MRVolumeDidChangeMessage : MRProtocolMessage
 @property  float volume
 @property  NSString *endpointUID
 @property  NSString *outputDeviceUID

  // instance methods
  -[MRVolumeDidChangeMessage volume]
  -[MRVolumeDidChangeMessage outputDeviceUID]
  -[MRVolumeDidChangeMessage type]
  -[MRVolumeDidChangeMessage initWithVolume:endpointUID:outputDeviceUID:]
  -[MRVolumeDidChangeMessage endpointUID]


MRGetVolumeControlCapabilitiesMessage : MRProtocolMessage
 @property  NSString *outputDeviceUID

  // instance methods
  -[MRGetVolumeControlCapabilitiesMessage initWithOutputDeviceUID:]
  -[MRGetVolumeControlCapabilitiesMessage outputDeviceUID]
  -[MRGetVolumeControlCapabilitiesMessage type]


MRGetVolumeControlCapabilitiesResultMessage : MRProtocolMessage
 @property  unsigned int capabilities

  // instance methods
  -[MRGetVolumeControlCapabilitiesResultMessage capabilities]
  -[MRGetVolumeControlCapabilitiesResultMessage type]
  -[MRGetVolumeControlCapabilitiesResultMessage initWithCapabilities:]


MRLegacyVolumeControlCapabilitiesDidChangeMessage : MRProtocolMessage
 @property  unsigned int capabilities

  // instance methods
  -[MRLegacyVolumeControlCapabilitiesDidChangeMessage capabilities]
  -[MRLegacyVolumeControlCapabilitiesDidChangeMessage type]
  -[MRLegacyVolumeControlCapabilitiesDidChangeMessage initWithCapabilities:]


MRVolumeControlCapabilitiesDidChangeMessage : MRProtocolMessage
 @property  unsigned int capabilities
 @property  NSString *endpointUID
 @property  NSString *outputDeviceUID

  // instance methods
  -[MRVolumeControlCapabilitiesDidChangeMessage capabilities]
  -[MRVolumeControlCapabilitiesDidChangeMessage outputDeviceUID]
  -[MRVolumeControlCapabilitiesDidChangeMessage type]
  -[MRVolumeControlCapabilitiesDidChangeMessage initWithCapabilities:endpointUID:outputDeviceUID:]
  -[MRVolumeControlCapabilitiesDidChangeMessage endpointUID]


_MRVirtualTouchDeviceDescriptorProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVirtualTouchDeviceDescriptorProtobuf dictionaryRepresentation]
  -[_MRVirtualTouchDeviceDescriptorProtobuf writeTo:]
  -[_MRVirtualTouchDeviceDescriptorProtobuf isEqual:]
  -[_MRVirtualTouchDeviceDescriptorProtobuf readFrom:]
  -[_MRVirtualTouchDeviceDescriptorProtobuf copyWithZone:]


MRRemoteControl : NSObject
  // class methods
  +[MRRemoteControl sharedRemoteControl]


MROSTransaction : NSObject
 @property  NSString *transactionName

  // instance methods
  -[MROSTransaction .cxx_destruct]
  -[MROSTransaction initWithName:]
  -[MROSTransaction invalidateTransaction]
  -[MROSTransaction transactionName]


_MRUpdateContentItemMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdateContentItemMessageProtobuf .cxx_destruct]
  -[_MRUpdateContentItemMessageProtobuf dictionaryRepresentation]
  -[_MRUpdateContentItemMessageProtobuf writeTo:]
  -[_MRUpdateContentItemMessageProtobuf isEqual:]
  -[_MRUpdateContentItemMessageProtobuf readFrom:]
  -[_MRUpdateContentItemMessageProtobuf copyWithZone:]


MRAVEndpointObserver : NSObject
 @property  @? endpointChangedCallback
 @property  NSString *outputDeviceUID
 @property  MRAVEndpoint *endpoint
 @property  NSString *label

  // instance methods
  -[MRAVEndpointObserver begin]
  -[MRAVEndpointObserver label]
  -[MRAVEndpointObserver initWithOutputDeviceUID:]
  -[MRAVEndpointObserver setEndpointChangedCallback:]
  -[MRAVEndpointObserver .cxx_destruct]
  -[MRAVEndpointObserver outputDeviceUID]
  -[MRAVEndpointObserver end]
  -[MRAVEndpointObserver initWithOutputDeviceUID:label:callback:]
  -[MRAVEndpointObserver dealloc]
  -[MRAVEndpointObserver endpoint]
  -[MRAVEndpointObserver _handleOutputContextDidChangeNotification]
  -[MRAVEndpointObserver endpointChangedCallback]


MRDestinationResolver : NSObject <MREndpointObserver>
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  MRDestinationResolverDependencies *dependencies
 @property  BOOL resolving
 @property  BOOL registeredForNotifications
 @property  BOOL registeredForEndpointChanges
 @property  BOOL registeredForEndpointInvalidations
 @property  BOOL registeredForPlayerPathInvalidations
 @property  id playerPathInvalidationObserver
 @property  MRAVEndpointObserver *endpointObserver
 @property  NSString *endpointObserverGroupUID
 @property  MRDestination *originalDestination
 @property  MRAVEndpoint *delegateEndpoint
 @property  MROrigin *delegateOrigin
 @property  MRPlayerPath *delegatePlayerPath
 @property  MRAVEndpoint *resolvingEndpoint
 @property  MRPlayerPath *resolvingPlayerPath
 @property  MSVVariableIntervalTimer *reconRetryTimer
 @property  MSVVariableIntervalTimer *connectionRetryTimer
 @property  <MRDestinationResolverDelegate> *delegate
 @property  MRDestination *destination
 @property  NSString *label
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRDestinationResolver resolvePartialDestination:level:timeout:dependencies:completion:]
  +[MRDestinationResolver resolveDestination:level:timeout:completion:]
  +[MRDestinationResolver resolveDestination:timeout:completion:]
  +[MRDestinationResolver resolvePartialDestination:level:timeout:completion:]

  // instance methods
  -[MRDestinationResolver notifyDelegateOfOriginChange:]
  -[MRDestinationResolver label]
  -[MRDestinationResolver notifyDelegateOfPlayerPathChange:]
  -[MRDestinationResolver resolve]
  -[MRDestinationResolver resolveForResolvedPlayerPath:]
  -[MRDestinationResolver setSerialQueue:]
  -[MRDestinationResolver setResolving:]
  -[MRDestinationResolver setResolvingEndpoint:]
  -[MRDestinationResolver registeredForEndpointInvalidations]
  -[MRDestinationResolver onQueue_registerForEndpointInvalidations:]
  -[MRDestinationResolver setRegisteredForEndpointChanges:]
  -[MRDestinationResolver delegateQueue]
  -[MRDestinationResolver setOriginalDestination:]
  -[MRDestinationResolver handlePlayerPathInvalidatedWithPlayerPath:]
  -[MRDestinationResolver setDelegateQueue:]
  -[MRDestinationResolver beginResolving]
  -[MRDestinationResolver onQueue_clearStateForPlayerPath]
  -[MRDestinationResolver initWithDestination:label:]
  -[MRDestinationResolver delegateOrigin]
  -[MRDestinationResolver isDynamicEndpoint]
  -[MRDestinationResolver .cxx_destruct]
  -[MRDestinationResolver setRegisteredForNotifications:]
  -[MRDestinationResolver onQueue_clearStateForEndpoint]
  -[MRDestinationResolver dependencies]
  -[MRDestinationResolver endpointDidDisconnect:]
  -[MRDestinationResolver isProactiveEndpoint]
  -[MRDestinationResolver setResolvingPlayerPath:]
  -[MRDestinationResolver registeredForPlayerPathInvalidations]
  -[MRDestinationResolver unregisterForEndpointInvalidations]
  -[MRDestinationResolver destination]
  -[MRDestinationResolver setDelegate:]
  -[MRDestinationResolver setDelegateOrigin:]
  -[MRDestinationResolver resolvingPlayerPath]
  -[MRDestinationResolver serialQueue]
  -[MRDestinationResolver setDependencies:]
  -[MRDestinationResolver setConnectionRetryTimer:]
  -[MRDestinationResolver resolveForUnresolvedPlayerPath:]
  -[MRDestinationResolver isUserSelectedEndpoint]
  -[MRDestinationResolver handleEndpointInvalidated]
  -[MRDestinationResolver onQueue_clearStateForOutputDeviceUID]
  -[MRDestinationResolver onQueue_setOrigin:]
  -[MRDestinationResolver reconRetryTimer]
  -[MRDestinationResolver setDelegateEndpoint:]
  -[MRDestinationResolver notifyDelegateOfEndpointChange:]
  -[MRDestinationResolver createPlayerPathForEndpoint:client:player:completion:]
  -[MRDestinationResolver registeredForEndpointChanges]
  -[MRDestinationResolver connectionRetryTimer]
  -[MRDestinationResolver resolvingEndpoint]
  -[MRDestinationResolver setReconRetryTimer:]
  -[MRDestinationResolver endpointObserver]
  -[MRDestinationResolver delegate]
  -[MRDestinationResolver playerPathInvalidationObserver]
  -[MRDestinationResolver onQueue_registerForPlayerPathInvalidationsForUnresolvedPlayerPath:]
  -[MRDestinationResolver setDelegatePlayerPath:]
  -[MRDestinationResolver registeredForNotifications]
  -[MRDestinationResolver delegateEndpoint]
  -[MRDestinationResolver onQueue_setResolvedPlayerPath:]
  -[MRDestinationResolver setRegisteredForEndpointInvalidations:]
  -[MRDestinationResolver dealloc]
  -[MRDestinationResolver resolving]
  -[MRDestinationResolver resolveForEndpoint:client:player:]
  -[MRDestinationResolver registerForEndpointChangesForOutputDeviceUID:]
  -[MRDestinationResolver notifyDelegateOfInvalidation]
  -[MRDestinationResolver initWithDestination:label:dependencies:]
  -[MRDestinationResolver unregisterForPlayerPathInvalidations]
  -[MRDestinationResolver onQueue_setEndpoint:]
  -[MRDestinationResolver setEndpointObserverGroupUID:]
  -[MRDestinationResolver endpointObserverGroupUID]
  -[MRDestinationResolver onQueue_retrieveEndpointForUID:completion:]
  -[MRDestinationResolver delegatePlayerPath]
  -[MRDestinationResolver resolveForOutputDeviceUID:client:player:]
  -[MRDestinationResolver setPlayerPathInvalidationObserver:]
  -[MRDestinationResolver setRegisteredForPlayerPathInvalidations:]
  -[MRDestinationResolver setEndpointObserver:]
  -[MRDestinationResolver onQueue_setUnresolvedPlayerPath:]
  -[MRDestinationResolver handleActiveSystemEndpointChangedNotification:]
  -[MRDestinationResolver originalDestination]
  -[MRDestinationResolver notifyDelegateOfError:]
  -[MRDestinationResolver unregisterForEndpointChanges]
  -[MRDestinationResolver handleEndpointChanged]
  -[MRDestinationResolver resolvePlayerPath:completion:]


MRDestinationResolverDependencies : NSObject
  // class methods
  +[MRDestinationResolverDependencies defaultDependencies]

  // instance methods
  -[MRDestinationResolverDependencies retrieveEndpointForUID:endpointGroupUID:queue:completion:]
  -[MRDestinationResolverDependencies removePlayerPathInvalidationHandler:]
  -[MRDestinationResolverDependencies retrieveOutputDeviceUIDForOrigin:queue:completion:]
  -[MRDestinationResolverDependencies resolvePlayerPath:queue:completion:]
  -[MRDestinationResolverDependencies createPlayerPathForEndpoint:client:player:queue:completion:]
  -[MRDestinationResolverDependencies createEndpointObserverWithUID:]
  -[MRDestinationResolverDependencies addPlayerPathInvalidationHandler:queue:handler:]


MRDestinationResolverHelper : NSObject <MRDestinationResolverDelegate>
 @property  long long level
 @property  @? callback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRDestinationResolverHelper setLevel:]
  -[MRDestinationResolverHelper level]
  -[MRDestinationResolverHelper setCallback:]
  -[MRDestinationResolverHelper destinationResolver:endpointDidChange:]
  -[MRDestinationResolverHelper callback]
  -[MRDestinationResolverHelper destinationResolver:playerPathDidChange:]
  -[MRDestinationResolverHelper .cxx_destruct]
  -[MRDestinationResolverHelper destinationResolverDestinationDidInvalidate:]
  -[MRDestinationResolverHelper destinationResolver:originDidChange:]
  -[MRDestinationResolverHelper destinationResolver:didFailWithError:]


MRCryptoPairingSession : NSObject
 @property  MRDeviceInfo *device
 @property  unsigned long role
 @property  BOOL valid
 @property  BOOL paired
 @property  NSArray *pairedDevices
 @property  <MRCryptoPairingSessionDelegate> *delegate

  // class methods
  +[MRCryptoPairingSession allocWithZone:]

  // instance methods
  -[MRCryptoPairingSession isPaired]
  -[MRCryptoPairingSession initWithRole:device:]
  -[MRCryptoPairingSession isValid]
  -[MRCryptoPairingSession .cxx_destruct]
  -[MRCryptoPairingSession setDelegate:]
  -[MRCryptoPairingSession init]
  -[MRCryptoPairingSession pairedDevices]
  -[MRCryptoPairingSession role]
  -[MRCryptoPairingSession delegate]
  -[MRCryptoPairingSession removePeer]
  -[MRCryptoPairingSession close]
  -[MRCryptoPairingSession updatePeer]
  -[MRCryptoPairingSession open]
  -[MRCryptoPairingSession handlePairingFailureWithStatus:]
  -[MRCryptoPairingSession handlePairingExchangeData:completion:]
  -[MRCryptoPairingSession encryptData:withError:]
  -[MRCryptoPairingSession decryptData:withError:]
  -[MRCryptoPairingSession deleteIdentityWithError:]
  -[MRCryptoPairingSession device]


MRAVDistantRoutingDiscoverySession : MRAVRoutingDiscoverySession <MRAVDistantRoutingDiscoveryClientProtocol>
 @property  NSXPCConnection *hostedRoutingSessionConnection
 @property  NSArray *distantEndpoints
 @property  NSArray *distantOutputDevices
 @property  NSMutableDictionary *distantExternalDevices
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRAVDistantRoutingDiscoverySession clientInterface]
  +[MRAVDistantRoutingDiscoverySession serviceInterface]

  // instance methods
  -[MRAVDistantRoutingDiscoverySession availableOutputDevices]
  -[MRAVDistantRoutingDiscoverySession availableEndpointsDidChange:]
  -[MRAVDistantRoutingDiscoverySession availableEndpoints]
  -[MRAVDistantRoutingDiscoverySession _shouldAddLocalEndpoint]
  -[MRAVDistantRoutingDiscoverySession _reloadAvailableDistantEndpoints]
  -[MRAVDistantRoutingDiscoverySession devicePresenceDetected]
  -[MRAVDistantRoutingDiscoverySession setDistantOutputDevices:]
  -[MRAVDistantRoutingDiscoverySession setRoutingContextUID:]
  -[MRAVDistantRoutingDiscoverySession .cxx_destruct]
  -[MRAVDistantRoutingDiscoverySession discoveryMode]
  -[MRAVDistantRoutingDiscoverySession routingContextUID]
  -[MRAVDistantRoutingDiscoverySession setHostedRoutingSessionConnection:]
  -[MRAVDistantRoutingDiscoverySession distantExternalDevices]
  -[MRAVDistantRoutingDiscoverySession endpointFeatures]
  -[MRAVDistantRoutingDiscoverySession _reloadAvailableDistantEndpointsWithEndpoints:]
  -[MRAVDistantRoutingDiscoverySession availableOutputDevicesDidChange:]
  -[MRAVDistantRoutingDiscoverySession setDistantEndpoints:]
  -[MRAVDistantRoutingDiscoverySession _reloadAvailableDistantOutputDevicesWithOutputDevices:]
  -[MRAVDistantRoutingDiscoverySession _hostedRoutingConnection]
  -[MRAVDistantRoutingDiscoverySession setDiscoveryMode:]
  -[MRAVDistantRoutingDiscoverySession _reloadHostedRoutingServiceDiscoveryMode]
  -[MRAVDistantRoutingDiscoverySession initWithConfiguration:]
  -[MRAVDistantRoutingDiscoverySession _reloadAvailableDistantOutputDevices]
  -[MRAVDistantRoutingDiscoverySession dealloc]
  -[MRAVDistantRoutingDiscoverySession setDistantExternalDevices:]
  -[MRAVDistantRoutingDiscoverySession distantOutputDevices]
  -[MRAVDistantRoutingDiscoverySession distantEndpoints]
  -[MRAVDistantRoutingDiscoverySession _initializeHostedRoutingConnectionWithCompletion:]
  -[MRAVDistantRoutingDiscoverySession hostedRoutingSessionConnection]


_MRPlaybackSessionMigrateRequestProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionMigrateRequestProtobuf .cxx_destruct]
  -[_MRPlaybackSessionMigrateRequestProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionMigrateRequestProtobuf writeTo:]
  -[_MRPlaybackSessionMigrateRequestProtobuf isEqual:]
  -[_MRPlaybackSessionMigrateRequestProtobuf readFrom:]
  -[_MRPlaybackSessionMigrateRequestProtobuf copyWithZone:]


MRPlayerClientPropertiesMessage : MRProtocolMessage
 @property  NSDate *lastPlayingDate
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRPlayerClientPropertiesMessage playerPath]
  -[MRPlayerClientPropertiesMessage lastPlayingDate]
  -[MRPlayerClientPropertiesMessage type]
  -[MRPlayerClientPropertiesMessage initWithPlayerPath:lastPlayingDate:]


MROriginClientPropertiesMessage : MRProtocolMessage
 @property  NSDate *lastPlayingDate

  // instance methods
  -[MROriginClientPropertiesMessage lastPlayingDate]
  -[MROriginClientPropertiesMessage type]
  -[MROriginClientPropertiesMessage initWithLastPlayingDate:]


MRExternalDevice : NSObject
 @property  MRSupportedProtocolMessages *supportedMessages
 @property  BOOL usingSystemPairing
 @property  long long connectionRecoveryBehavior
 @property  NSString *name
 @property  NSString *hostName
 @property  long long port
 @property  MROrigin *customOrigin
 @property  NSString *uid
 @property  MRDeviceInfo *deviceInfo
 @property  NSArray *personalOutputDevices
 @property  BOOL wantsNowPlayingNotifications
 @property  BOOL wantsNowPlayingArtworkNotifications
 @property  BOOL wantsVolumeNotifications
 @property  BOOL wantsOutputDeviceNotifications
 @property  BOOL wantsSystemEndpointNotifications
 @property  BOOL wantsEndpointChangeNotifications
 @property  NSArray *subscribedPlayerPaths
 @property  BOOL valid
 @property  unsigned int connectionState
 @property  BOOL paired

  // instance methods
  -[MRExternalDevice isPaired]
  -[MRExternalDevice connectionState]
  -[MRExternalDevice deviceInfo]
  -[MRExternalDevice outputDeviceVolumeControlCapabilities:queue:completion:]
  -[MRExternalDevice uid]
  -[MRExternalDevice setListeningMode:outputDeviceUID:queue:completion:]
  -[MRExternalDevice setOutputDeviceVolume:outputDeviceUID:queue:completion:]
  -[MRExternalDevice setWantsVolumeNotifications:]
  -[MRExternalDevice setWantsOutputDeviceNotifications:]
  -[MRExternalDevice setWantsNowPlayingArtworkNotifications:]
  -[MRExternalDevice setWantsNowPlayingNotifications:]
  -[MRExternalDevice modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterAwareDeviceUIDs:removingClusterAwareDeviceUIDs:settingClusterAwareDeviceUIDs:withReplyQueue:completion:]
  -[MRExternalDevice setVolumeCallback:withQueue:]
  -[MRExternalDevice name]
  -[MRExternalDevice setConnectionStateCallback:withQueue:]
  -[MRExternalDevice outputDeviceVolume:queue:completion:]
  -[MRExternalDevice unpair]
  -[MRExternalDevice createHostedEndpointWithOutputDeviceUIDs:queue:completion:]
  -[MRExternalDevice subscribedPlayerPaths]
  -[MRExternalDevice setSubscribedPlayerPaths:]
  -[MRExternalDevice hostName]
  -[MRExternalDevice personalOutputDevices]
  -[MRExternalDevice port]
  -[MRExternalDevice isValid]
  -[MRExternalDevice .cxx_destruct]
  -[MRExternalDevice setDiscoveryMode:forConfiguration:]
  -[MRExternalDevice setDiscoveryOutputDevicesChangedCallback:]
  -[MRExternalDevice disconnect:]
  -[MRExternalDevice connectWithOptions:userInfo:]
  -[MRExternalDevice _init]
  -[MRExternalDevice supportedMessages]
  -[MRExternalDevice sendClientUpdatesConfigMessage]
  -[MRExternalDevice errorForCurrentState]
  -[MRExternalDevice currentClientUpdatesConfigMessage]
  -[MRExternalDevice customOrigin]
  -[MRExternalDevice setUsingSystemPairing:]
  -[MRExternalDevice sendCustomData:withName:]
  -[MRExternalDevice setOutputDevicesUpdatedCallback:withQueue:]
  -[MRExternalDevice setOutputDevicesRemovedCallback:withQueue:]
  -[MRExternalDevice setVolumeChangedCallback:withQueue:]
  -[MRExternalDevice setVolumeControlCapabilitiesCallback:withQueue:]
  -[MRExternalDevice removeFromParentGroup:queue:completion:]
  -[MRExternalDevice connectWithOptions:]
  -[MRExternalDevice connectionRecoveryBehavior]
  -[MRExternalDevice setConnectionRecoveryBehavior:]
  -[MRExternalDevice wantsNowPlayingNotifications]
  -[MRExternalDevice wantsVolumeNotifications]
  -[MRExternalDevice wantsNowPlayingArtworkNotifications]
  -[MRExternalDevice wantsOutputDeviceNotifications]
  -[MRExternalDevice wantsEndpointChangeNotifications]
  -[MRExternalDevice setWantsEndpointChangeNotifications:]
  -[MRExternalDevice wantsSystemEndpointNotifications]
  -[MRExternalDevice isUsingSystemPairing]
  -[MRExternalDevice setWantsSystemEndpointNotifications:]
  -[MRExternalDevice connectWithOptions:clientBundleIdentifier:userInfo:]
  -[MRExternalDevice setPairingCallback:withQueue:]
  -[MRExternalDevice setNameCallback:withQueue:]
  -[MRExternalDevice setPairingAllowedCallback:withQueue:]
  -[MRExternalDevice setCustomDataCallback:withQueue:]
  -[MRExternalDevice ping:callback:withQueue:]
  -[MRExternalDevice sendButtonEvent:]


_MRRemovePlayerMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRemovePlayerMessageProtobuf .cxx_destruct]
  -[_MRRemovePlayerMessageProtobuf dictionaryRepresentation]
  -[_MRRemovePlayerMessageProtobuf writeTo:]
  -[_MRRemovePlayerMessageProtobuf isEqual:]
  -[_MRRemovePlayerMessageProtobuf readFrom:]
  -[_MRRemovePlayerMessageProtobuf copyWithZone:]


_MRSendLyricsEventMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendLyricsEventMessageProtobuf .cxx_destruct]
  -[_MRSendLyricsEventMessageProtobuf dictionaryRepresentation]
  -[_MRSendLyricsEventMessageProtobuf writeTo:]
  -[_MRSendLyricsEventMessageProtobuf isEqual:]
  -[_MRSendLyricsEventMessageProtobuf readFrom:]
  -[_MRSendLyricsEventMessageProtobuf copyWithZone:]


MRMediaSuggestionPreferences : NSObject
 @property  @? userDisplayPreferencesDidChangeCallback
 @property  NSArray *allContexts

  // instance methods
  -[MRMediaSuggestionPreferences .cxx_destruct]
  -[MRMediaSuggestionPreferences init]
  -[MRMediaSuggestionPreferences suggestionsDisabledInContext:]
  -[MRMediaSuggestionPreferences allContexts]
  -[MRMediaSuggestionPreferences setUserDisplayPreferencesDidChangeCallback:]
  -[MRMediaSuggestionPreferences disabledBundleIdentifiersInContext:]
  -[MRMediaSuggestionPreferences dealloc]
  -[MRMediaSuggestionPreferences userDisplayPreferencesDidChangeCallback]


_MRVolumeControlAvailabilityProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVolumeControlAvailabilityProtobuf dictionaryRepresentation]
  -[_MRVolumeControlAvailabilityProtobuf writeTo:]
  -[_MRVolumeControlAvailabilityProtobuf isEqual:]
  -[_MRVolumeControlAvailabilityProtobuf readFrom:]
  -[_MRVolumeControlAvailabilityProtobuf copyWithZone:]


_MRSendCommandMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendCommandMessageProtobuf .cxx_destruct]
  -[_MRSendCommandMessageProtobuf dictionaryRepresentation]
  -[_MRSendCommandMessageProtobuf writeTo:]
  -[_MRSendCommandMessageProtobuf isEqual:]
  -[_MRSendCommandMessageProtobuf readFrom:]
  -[_MRSendCommandMessageProtobuf copyWithZone:]


_MRSendHIDReportMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendHIDReportMessageProtobuf .cxx_destruct]
  -[_MRSendHIDReportMessageProtobuf dictionaryRepresentation]
  -[_MRSendHIDReportMessageProtobuf writeTo:]
  -[_MRSendHIDReportMessageProtobuf isEqual:]
  -[_MRSendHIDReportMessageProtobuf readFrom:]
  -[_MRSendHIDReportMessageProtobuf copyWithZone:]


MRSendCommandMessage : MRProtocolMessage
 @property  unsigned int command
 @property  NSDictionary *options
 @property  NSDate *serializationDate
 @property  MRPlayerPath *playerPath
 @property  unsigned int appOptions

  // instance methods
  -[MRSendCommandMessage playerPath]
  -[MRSendCommandMessage options]
  -[MRSendCommandMessage .cxx_destruct]
  -[MRSendCommandMessage appOptions]
  -[MRSendCommandMessage command]
  -[MRSendCommandMessage type]
  -[MRSendCommandMessage serializationDate]
  -[MRSendCommandMessage initWithCommand:options:playerPath:]


_MRTextEditingAttributesProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRTextEditingAttributesProtobuf .cxx_destruct]
  -[_MRTextEditingAttributesProtobuf dictionaryRepresentation]
  -[_MRTextEditingAttributesProtobuf writeTo:]
  -[_MRTextEditingAttributesProtobuf isEqual:]
  -[_MRTextEditingAttributesProtobuf readFrom:]
  -[_MRTextEditingAttributesProtobuf copyWithZone:]


_MRClientUpdatesConfigurationProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRClientUpdatesConfigurationProtobuf .cxx_destruct]
  -[_MRClientUpdatesConfigurationProtobuf dictionaryRepresentation]
  -[_MRClientUpdatesConfigurationProtobuf writeTo:]
  -[_MRClientUpdatesConfigurationProtobuf isEqual:]
  -[_MRClientUpdatesConfigurationProtobuf readFrom:]
  -[_MRClientUpdatesConfigurationProtobuf copyWithZone:]


MRExternalDeviceMessageMetrics : NSObject
  // instance methods
  -[MRExternalDeviceMessageMetrics initWithPath:]
  -[MRExternalDeviceMessageMetrics .cxx_destruct]
  -[MRExternalDeviceMessageMetrics write]
  -[MRExternalDeviceMessageMetrics dealloc]
  -[MRExternalDeviceMessageMetrics addMessage:data:]


MRExternalDeviceMessageMetricsEntry : NSObject
 @property  unsigned long avg
 @property  unsigned long min
 @property  unsigned long max
 @property  unsigned long total
 @property  NSMutableArray *values

  // instance methods
  -[MRExternalDeviceMessageMetricsEntry avg]
  -[MRExternalDeviceMessageMetricsEntry values]
  -[MRExternalDeviceMessageMetricsEntry max]
  -[MRExternalDeviceMessageMetricsEntry setValues:]
  -[MRExternalDeviceMessageMetricsEntry total]
  -[MRExternalDeviceMessageMetricsEntry setTotal:]
  -[MRExternalDeviceMessageMetricsEntry .cxx_destruct]
  -[MRExternalDeviceMessageMetricsEntry setAvg:]
  -[MRExternalDeviceMessageMetricsEntry init]
  -[MRExternalDeviceMessageMetricsEntry setMax:]
  -[MRExternalDeviceMessageMetricsEntry updateWithValue:]
  -[MRExternalDeviceMessageMetricsEntry setMin:]
  -[MRExternalDeviceMessageMetricsEntry min]


_MRUpdateContentItemArtworkMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdateContentItemArtworkMessageProtobuf .cxx_destruct]
  -[_MRUpdateContentItemArtworkMessageProtobuf dictionaryRepresentation]
  -[_MRUpdateContentItemArtworkMessageProtobuf writeTo:]
  -[_MRUpdateContentItemArtworkMessageProtobuf isEqual:]
  -[_MRUpdateContentItemArtworkMessageProtobuf readFrom:]
  -[_MRUpdateContentItemArtworkMessageProtobuf copyWithZone:]


MRPromptForRouteAuthorizationMessage : MRProtocolMessage
 @property  MRAVOutputDevice *route
 @property  long long inputType

  // instance methods
  -[MRPromptForRouteAuthorizationMessage route]
  -[MRPromptForRouteAuthorizationMessage .cxx_destruct]
  -[MRPromptForRouteAuthorizationMessage inputType]
  -[MRPromptForRouteAuthorizationMessage type]
  -[MRPromptForRouteAuthorizationMessage initWithRoute:inputType:]


MRPromptForRouteAuthorizationResponseMessage : MRProtocolMessage
 @property  NSString *response

  // instance methods
  -[MRPromptForRouteAuthorizationResponseMessage initWithResponse:]
  -[MRPromptForRouteAuthorizationResponseMessage response]
  -[MRPromptForRouteAuthorizationResponseMessage type]


MRPresentRouteAuthorizationStatusMessage : MRProtocolMessage
 @property  MRAVOutputDevice *route
 @property  int status

  // instance methods
  -[MRPresentRouteAuthorizationStatusMessage route]
  -[MRPresentRouteAuthorizationStatusMessage .cxx_destruct]
  -[MRPresentRouteAuthorizationStatusMessage status]
  -[MRPresentRouteAuthorizationStatusMessage type]
  -[MRPresentRouteAuthorizationStatusMessage initWithRoute:status:]


MRSendVirtualTouchEventMessage : MRProtocolMessage
 @property  {_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI} event
 @property  unsigned long virtualDeviceID

  // instance methods
  -[MRSendVirtualTouchEventMessage type]
  -[MRSendVirtualTouchEventMessage initWithTouchEvent:virtualDeviceID:]
  -[MRSendVirtualTouchEventMessage virtualDeviceID]
  -[MRSendVirtualTouchEventMessage event]


MRSendPackedVirtualTouchEventMessage : MRProtocolMessage
 @property  {_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI} event
 @property  unsigned long virtualDeviceID

  // instance methods
  -[MRSendPackedVirtualTouchEventMessage type]
  -[MRSendPackedVirtualTouchEventMessage initWithTouchEvent:virtualDeviceID:]
  -[MRSendPackedVirtualTouchEventMessage virtualDeviceID]
  -[MRSendPackedVirtualTouchEventMessage event]


_MRTransactionMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRTransactionMessageProtobuf .cxx_destruct]
  -[_MRTransactionMessageProtobuf dictionaryRepresentation]
  -[_MRTransactionMessageProtobuf writeTo:]
  -[_MRTransactionMessageProtobuf isEqual:]
  -[_MRTransactionMessageProtobuf readFrom:]
  -[_MRTransactionMessageProtobuf copyWithZone:]


MRContentItemMetadataAudioFormat : NSObject <NSCopying>
 @property  _MRAudioFormatProtobuf *protobuf
 @property  long long tier
 @property  long long bitrate
 @property  long long sampleRate
 @property  long long bitDepth
 @property  unsigned int codec
 @property  BOOL spatialized
 @property  BOOL multiChannel
 @property  unsigned int channelLayout
 @property  NSString *audioChannelLayoutDescription
 @property  NSString *groupID
 @property  NSString *stableVariantID
 @property  BOOL hasTier
 @property  BOOL hasBitrate
 @property  BOOL hasSampleRate
 @property  BOOL hasBitDepth
 @property  BOOL hasCodec
 @property  BOOL hasSpatialized
 @property  BOOL hasMultiChannel
 @property  BOOL hasChannelLayout
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[MRContentItemMetadataAudioFormat setTier:]
  -[MRContentItemMetadataAudioFormat codec]
  -[MRContentItemMetadataAudioFormat setCodec:]
  -[MRContentItemMetadataAudioFormat groupID]
  -[MRContentItemMetadataAudioFormat sampleRate]
  -[MRContentItemMetadataAudioFormat setGroupID:]
  -[MRContentItemMetadataAudioFormat hasCodec]
  -[MRContentItemMetadataAudioFormat .cxx_destruct]
  -[MRContentItemMetadataAudioFormat dictionaryRepresentation]
  -[MRContentItemMetadataAudioFormat bitrate]
  -[MRContentItemMetadataAudioFormat hasSpatialized]
  -[MRContentItemMetadataAudioFormat hasTier]
  -[MRContentItemMetadataAudioFormat tier]
  -[MRContentItemMetadataAudioFormat isEqual:]
  -[MRContentItemMetadataAudioFormat protobuf]
  -[MRContentItemMetadataAudioFormat setBitDepth:]
  -[MRContentItemMetadataAudioFormat initWithProtobuf:]
  -[MRContentItemMetadataAudioFormat bitDepth]
  -[MRContentItemMetadataAudioFormat setBitrate:]
  -[MRContentItemMetadataAudioFormat stableVariantID]
  -[MRContentItemMetadataAudioFormat setStableVariantID:]
  -[MRContentItemMetadataAudioFormat isSpatialized]
  -[MRContentItemMetadataAudioFormat setSpatialized:]
  -[MRContentItemMetadataAudioFormat isMultiChannel]
  -[MRContentItemMetadataAudioFormat setMultiChannel:]
  -[MRContentItemMetadataAudioFormat setChannelLayout:]
  -[MRContentItemMetadataAudioFormat audioChannelLayoutDescription]
  -[MRContentItemMetadataAudioFormat setAudioChannelLayoutDescription:]
  -[MRContentItemMetadataAudioFormat copyWithZone:]
  -[MRContentItemMetadataAudioFormat setSampleRate:]
  -[MRContentItemMetadataAudioFormat channelLayout]
  -[MRContentItemMetadataAudioFormat hasBitrate]
  -[MRContentItemMetadataAudioFormat hasSampleRate]
  -[MRContentItemMetadataAudioFormat hasBitDepth]
  -[MRContentItemMetadataAudioFormat hasMultiChannel]
  -[MRContentItemMetadataAudioFormat hasChannelLayout]


MRNowPlayingOriginClientRequests : NSObject <MRNowPlayingClientState>
 @property  MROrigin *origin
 @property  MRPlayerPath *playerPath
 @property  NSArray *nowPlayingClientRequests
 @property  MRDeviceInfo *deviceInfo
 @property  NSNumber *volumeCapabilities
 @property  NSNumber *volume
 @property  NSDate *lastPlayingDate

  // instance methods
  -[MRNowPlayingOriginClientRequests restoreNowPlayingClientState]
  -[MRNowPlayingOriginClientRequests setVolumeCapabilities:]
  -[MRNowPlayingOriginClientRequests playerPath]
  -[MRNowPlayingOriginClientRequests deviceInfo]
  -[MRNowPlayingOriginClientRequests removeAllClients]
  -[MRNowPlayingOriginClientRequests volume]
  -[MRNowPlayingOriginClientRequests volumeCapabilities]
  -[MRNowPlayingOriginClientRequests setDeviceInfo:]
  -[MRNowPlayingOriginClientRequests removeClient:]
  -[MRNowPlayingOriginClientRequests setVolume:]
  -[MRNowPlayingOriginClientRequests origin]
  -[MRNowPlayingOriginClientRequests initWithOrigin:]
  -[MRNowPlayingOriginClientRequests handleVolumeRequestWithCompletion:]
  -[MRNowPlayingOriginClientRequests .cxx_destruct]
  -[MRNowPlayingOriginClientRequests existingNowPlayingClientRequestsForPlayerPath:]
  -[MRNowPlayingOriginClientRequests handleVolumeCapabilitiesRequestWithCompletion:]
  -[MRNowPlayingOriginClientRequests lastPlayingDate]
  -[MRNowPlayingOriginClientRequests nowPlayingClientRequests]
  -[MRNowPlayingOriginClientRequests handleLastPlayingDateRequestWithCompletion:]
  -[MRNowPlayingOriginClientRequests setLastPlayingDate:]
  -[MRNowPlayingOriginClientRequests setTransactionCallback:forName:]
  -[MRNowPlayingOriginClientRequests nowPlayingClientRequestsForPlayerPath:]
  -[MRNowPlayingOriginClientRequests transactionCallbackForName:]
  -[MRNowPlayingOriginClientRequests handleDeviceInfoRequestWithCompletion:]


MRNowPlayingClientRequests : NSObject <MRNowPlayingClientState>
 @property  MRClient *client
 @property  NSArray *nowPlayingClients

  // instance methods
  -[MRNowPlayingClientRequests restoreNowPlayingClientState]
  -[MRNowPlayingClientRequests nowPlayingPlayerClientRequestsForPlayerPath:]
  -[MRNowPlayingClientRequests nowPlayingClients]
  -[MRNowPlayingClientRequests .cxx_destruct]
  -[MRNowPlayingClientRequests removePlayer:]
  -[MRNowPlayingClientRequests client]
  -[MRNowPlayingClientRequests existingNowPlayingPlayerClientRequestsForPlayerPath:]
  -[MRNowPlayingClientRequests initWithClient:]


_MRGameControllerDigitizerProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGameControllerDigitizerProtobuf dictionaryRepresentation]
  -[_MRGameControllerDigitizerProtobuf writeTo:]
  -[_MRGameControllerDigitizerProtobuf isEqual:]
  -[_MRGameControllerDigitizerProtobuf readFrom:]
  -[_MRGameControllerDigitizerProtobuf copyWithZone:]


_MRAVModifyOutputContextRequestProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAVModifyOutputContextRequestProtobuf .cxx_destruct]
  -[_MRAVModifyOutputContextRequestProtobuf dictionaryRepresentation]
  -[_MRAVModifyOutputContextRequestProtobuf writeTo:]
  -[_MRAVModifyOutputContextRequestProtobuf isEqual:]
  -[_MRAVModifyOutputContextRequestProtobuf readFrom:]
  -[_MRAVModifyOutputContextRequestProtobuf copyWithZone:]


MRNowPlayingAudioFormatContentInfo : NSObject
 @property  NSNumber *audioSessionID
 @property  NSNumber *audioFormat
 @property  NSNumber *channelCount
 @property  NSString *bestAvailableContent
 @property  NSData *data
 @property  _MRMRNowPlayingAudioFormatContentInfoProtobuf *protobuf
 @property  NSString *bundleID
 @property  NSString *audioFormatDescription
 @property  NSString *bestAvailableAudioFormatDescription
 @property  long long bestAvailableAudioFormat
 @property  BOOL multichannel
 @property  BOOL eligibleForSpatialization
 @property  BOOL spatialized

  // instance methods
  -[MRNowPlayingAudioFormatContentInfo bundleID]
  -[MRNowPlayingAudioFormatContentInfo channelCount]
  -[MRNowPlayingAudioFormatContentInfo bestAvailableAudioFormat]
  -[MRNowPlayingAudioFormatContentInfo isEligibleForSpatialization]
  -[MRNowPlayingAudioFormatContentInfo isMultichannel]
  -[MRNowPlayingAudioFormatContentInfo initWithBundleID:audioSessionID:audioFormat:channelCount:bestAvailableContent:isEligibleForSpatialization:isSpatialized:]
  -[MRNowPlayingAudioFormatContentInfo bestAvailableAudioFormatDescription]
  -[MRNowPlayingAudioFormatContentInfo .cxx_destruct]
  -[MRNowPlayingAudioFormatContentInfo bestAvailableContent]
  -[MRNowPlayingAudioFormatContentInfo data]
  -[MRNowPlayingAudioFormatContentInfo isEqual:]
  -[MRNowPlayingAudioFormatContentInfo protobuf]
  -[MRNowPlayingAudioFormatContentInfo audioFormatDescription]
  -[MRNowPlayingAudioFormatContentInfo audioFormat]
  -[MRNowPlayingAudioFormatContentInfo initWithProtobuf:]
  -[MRNowPlayingAudioFormatContentInfo initWithData:]
  -[MRNowPlayingAudioFormatContentInfo isSpatialized]
  -[MRNowPlayingAudioFormatContentInfo audioSessionID]


MRLegacySendHIDEventMessage : MRProtocolMessage
 @property  {_MRHIDButtonEvent=IIB} buttonEvent

  // instance methods
  -[MRLegacySendHIDEventMessage buttonEvent]
  -[MRLegacySendHIDEventMessage type]
  -[MRLegacySendHIDEventMessage dealloc]
  -[MRLegacySendHIDEventMessage initWithHIDEvent:]


MRAudioFadeMessage : MRProtocolMessage
 @property  MRPlayerPath *playerPath
 @property  long long fadeType

  // instance methods
  -[MRAudioFadeMessage playerPath]
  -[MRAudioFadeMessage initWithPlayerPath:fadeType:]
  -[MRAudioFadeMessage fadeType]
  -[MRAudioFadeMessage type]


MRAudioFadeResponseMessage : MRProtocolMessage
 @property  long long fadeDuration

  // instance methods
  -[MRAudioFadeResponseMessage initWithFadeDuration:error:]
  -[MRAudioFadeResponseMessage type]
  -[MRAudioFadeResponseMessage fadeDuration]


MRCoreUtilsPairingSession : MRCryptoPairingSession
 @property  NSData *inputKey
 @property  NSMutableData *inputNonce
 @property  NSData *outputKey
 @property  NSMutableData *outputNonce
 @property  MRDeviceInfo *pairedPeerDevice
 @property  NSArray *pairedPeerDevices
 @property  NSMutableDictionary *mediaRemotePairedDevices
 @property  NSString *peerIdentifier
 @property  unsigned long state
 @property  BOOL hasExchangedMessage
 @property  unsigned int pairingFlags

  // instance methods
  -[MRCoreUtilsPairingSession isPaired]
  -[MRCoreUtilsPairingSession outputKey]
  -[MRCoreUtilsPairingSession setPairingFlags:]
  -[MRCoreUtilsPairingSession initWithRole:device:]
  -[MRCoreUtilsPairingSession pairedPeerDevices]
  -[MRCoreUtilsPairingSession mediaRemotePairedDevices]
  -[MRCoreUtilsPairingSession isValid]
  -[MRCoreUtilsPairingSession initializePairingSession:]
  -[MRCoreUtilsPairingSession shouldAutoRetryPairingExchange:]
  -[MRCoreUtilsPairingSession pairedPeerDevice]
  -[MRCoreUtilsPairingSession addPeer]
  -[MRCoreUtilsPairingSession .cxx_destruct]
  -[MRCoreUtilsPairingSession openInState:]
  -[MRCoreUtilsPairingSession setInputKey:]
  -[MRCoreUtilsPairingSession setInputNonce:]
  -[MRCoreUtilsPairingSession setOutputNonce:]
  -[MRCoreUtilsPairingSession hasExchangedMessage]
  -[MRCoreUtilsPairingSession pairingFlags]
  -[MRCoreUtilsPairingSession inputNonce]
  -[MRCoreUtilsPairingSession outputNonce]
  -[MRCoreUtilsPairingSession peerIdentifier]
  -[MRCoreUtilsPairingSession inputKey]
  -[MRCoreUtilsPairingSession state]
  -[MRCoreUtilsPairingSession pairedDevices]
  -[MRCoreUtilsPairingSession setOutputKey:]
  -[MRCoreUtilsPairingSession removePeer]
  -[MRCoreUtilsPairingSession close]
  -[MRCoreUtilsPairingSession dealloc]
  -[MRCoreUtilsPairingSession updatePeer]
  -[MRCoreUtilsPairingSession open]
  -[MRCoreUtilsPairingSession handlePairingFailureWithStatus:]
  -[MRCoreUtilsPairingSession handlePairingExchangeData:completion:]
  -[MRCoreUtilsPairingSession encryptData:withError:]
  -[MRCoreUtilsPairingSession decryptData:withError:]
  -[MRCoreUtilsPairingSession deleteIdentityWithError:]


MRIDSTransport : MRExternalDeviceTransport
 @property  NSString *sessionUID

  // instance methods
  -[MRIDSTransport hostname]
  -[MRIDSTransport deviceInfo]
  -[MRIDSTransport uid]
  -[MRIDSTransport name]
  -[MRIDSTransport port]
  -[MRIDSTransport _handleDeviceConnected:]
  -[MRIDSTransport _generateSessionUID]
  -[MRIDSTransport setSessionUID:]
  -[MRIDSTransport shouldUseSystemAuthenticationPrompt]
  -[MRIDSTransport setShouldUseSystemAuthenticationPrompt:]
  -[MRIDSTransport createConnectionWithUserInfo:]
  -[MRIDSTransport .cxx_destruct]
  -[MRIDSTransport resetWithError:]
  -[MRIDSTransport _handleDeviceDisconnected:]
  -[MRIDSTransport _synchronized_setSessionUID:]
  -[MRIDSTransport initWithOutputDevice:]
  -[MRIDSTransport sessionUID]
  -[MRIDSTransport error]


MRAVOutputContext : NSObject
 @property  NSArray *outputDevices
 @property  NSString *uniqueIdentifier
 @property  NSString *contextID
 @property  unsigned int type
 @property  NSArray *outputDevicesSnapshot
 @property  NSArray *outputDeviceUIDs
 @property  BOOL containsLocalDevice
 @property  NSArray *personalDevices
 @property  NSArray *personalDeviceUIDs
 @property  BOOL volumeControlAvailable
 @property  BOOL supportsVolumeControl
 @property  MRAVOutputDevice *predictedOutputDevice
 @property  float volume
 @property  BOOL supportsMultipleBluetoothOutputDevices

  // class methods
  +[MRAVOutputContext notificationQueue]
  +[MRAVOutputContext sharedAudioPresentationContext]
  +[MRAVOutputContext sharedSystemScreenContext]
  +[MRAVOutputContext sharedSystemAudioContext]
  +[MRAVOutputContext iTunesContext]

  // instance methods
  -[MRAVOutputContext outputDeviceUIDs]
  -[MRAVOutputContext volume]
  -[MRAVOutputContext uniqueIdentifier]
  -[MRAVOutputContext resetPredictedOutputDevice]
  -[MRAVOutputContext isVolumeControlAvailable]
  -[MRAVOutputContext setVolume:]
  -[MRAVOutputContext contextID]
  -[MRAVOutputContext setOutputDevices:withCallbackQueue:block:]
  -[MRAVOutputContext setOutputDevices:initiator:withCallbackQueue:block:]
  -[MRAVOutputContext setOutputDevices:withPassword:withCallbackQueue:block:]
  -[MRAVOutputContext addOutputDevices:withCallbackQueue:block:]
  -[MRAVOutputContext removeOutputDevices:withCallbackQueue:block:]
  -[MRAVOutputContext addOutputDevices:initiator:withCallbackQueue:block:]
  -[MRAVOutputContext removeOutputDevices:initiator:withCallbackQueue:block:]
  -[MRAVOutputContext .cxx_destruct]
  -[MRAVOutputContext personalDevices]
  -[MRAVOutputContext removeAllOutputDevicesWithCallbackQueue:block:]
  -[MRAVOutputContext containsOutputDeviceUID:]
  -[MRAVOutputContext outputDevicesSnapshot]
  -[MRAVOutputContext _notifyChangesInOutputDevicesWithAdded:removed:updated:existing:newDevices:]
  -[MRAVOutputContext personalDeviceUIDs]
  -[MRAVOutputContext containsOutputDevice:]
  -[MRAVOutputContext containsLocalDevice]
  -[MRAVOutputContext supportsVolumeControl]
  -[MRAVOutputContext _scheduleOutputContextDidChangeNotification]
  -[MRAVOutputContext _scheduleOutputContextDeviceDidChangeNotification]
  -[MRAVOutputContext _scheduleOutputContextDevicesDidChangeNotification]
  -[MRAVOutputContext _reloadWithOutputDevices:]
  -[MRAVOutputContext setOutputDevices:]
  -[MRAVOutputContext outputDevices]
  -[MRAVOutputContext type]
  -[MRAVOutputContext setOutputDevices:initiator:password:fadeAudio:withCallbackQueue:block:]
  -[MRAVOutputContext removeOutputDevices:initiator:fadeAudio:withCallbackQueue:block:]
  -[MRAVOutputContext addOutputDevices:initiator:fadeAudio:withCallbackQueue:block:]
  -[MRAVOutputContext _reloadOutputDevices]
  -[MRAVOutputContext predictedOutputDevice]
  -[MRAVOutputContext supportsMultipleBluetoothOutputDevices]


MRAVClusterController : NSObject
 @property  BOOL needsCommandRedirection
 @property  unsigned long clusterStatus
 @property  unsigned int clusterType
 @property  NSString *clusterLeaderUID
 @property  NSString *clusterUID

  // class methods
  +[MRAVClusterController canBeClusterMember]
  +[MRAVClusterController getClusterType]
  +[MRAVClusterController getClusterLeaderUID]
  +[MRAVClusterController getClusterUID]
  +[MRAVClusterController sharedController]

  // instance methods
  -[MRAVClusterController clusterType]
  -[MRAVClusterController unregisterObserver:]
  -[MRAVClusterController registerObserver:]
  -[MRAVClusterController .cxx_destruct]
  -[MRAVClusterController needsCommandRedirection]
  -[MRAVClusterController onQueue_notifyObserversWithClusterType:]
  -[MRAVClusterController onQueue_computeClusterStatus]
  -[MRAVClusterController onQueue_setClusterType:]
  -[MRAVClusterController updateClusterInformation]
  -[MRAVClusterController init]
  -[MRAVClusterController onQueue_setClusterStatus:]
  -[MRAVClusterController getClusterStatus:]
  -[MRAVClusterController deviceInfoDidChangeNotification:]
  -[MRAVClusterController clusterLeaderUID]
  -[MRAVClusterController getClusterLeaderEndpoint:]
  -[MRAVClusterController clusterStatus]
  -[MRAVClusterController onQueue_notifyObserversWithClusterStatus:]
  -[MRAVClusterController clusterUID]


MRExternalDeviceTransportConnection : NSObject
 @property  NSString *label
 @property  NSString *destinationOutputDeviceUID
 @property  NSString *destinationGroupUID
 @property  unsigned int options
 @property  BOOL isValid
 @property  NSError *error
 @property  <MRExternalDeviceTransportConnectionDelegate> *delegate

  // instance methods
  -[MRExternalDeviceTransportConnection closeWithError:]
  -[MRExternalDeviceTransportConnection label]
  -[MRExternalDeviceTransportConnection isValid]
  -[MRExternalDeviceTransportConnection options]
  -[MRExternalDeviceTransportConnection setOptions:]
  -[MRExternalDeviceTransportConnection .cxx_destruct]
  -[MRExternalDeviceTransportConnection exportEndpoints:]
  -[MRExternalDeviceTransportConnection exportOutputDevices:endpoint:]
  -[MRExternalDeviceTransportConnection destinationOutputDeviceUID]
  -[MRExternalDeviceTransportConnection destinationGroupUID]
  -[MRExternalDeviceTransportConnection setDestinationGroupUID:]
  -[MRExternalDeviceTransportConnection setDelegate:]
  -[MRExternalDeviceTransportConnection _notifyDelegateDidReceiveData:]
  -[MRExternalDeviceTransportConnection _notifyDelegateHasSpaceAvailable]
  -[MRExternalDeviceTransportConnection _notifyDelegateDidCloseWithError:]
  -[MRExternalDeviceTransportConnection exportEndpoint:]
  -[MRExternalDeviceTransportConnection setDestinationOutputDeviceUID:]
  -[MRExternalDeviceTransportConnection sendTransportData:options:]
  -[MRExternalDeviceTransportConnection exportOutputDevice:endpoint:]
  -[MRExternalDeviceTransportConnection delegate]
  -[MRExternalDeviceTransportConnection close]
  -[MRExternalDeviceTransportConnection setLabel:]
  -[MRExternalDeviceTransportConnection error]


MRCryptoPairingIdentity : NSObject
 @property  NSString *identifier
 @property  NSData *publicKey
 @property  NSData *privateKey

  // instance methods
  -[MRCryptoPairingIdentity publicKey]
  -[MRCryptoPairingIdentity privateKey]
  -[MRCryptoPairingIdentity .cxx_destruct]
  -[MRCryptoPairingIdentity initWithIdentifier:publicKey:privateKey:]
  -[MRCryptoPairingIdentity init]
  -[MRCryptoPairingIdentity identifier]


MRCompanionConnectionController : NSObject
 @property  MRAVEndpoint *companionEndpoint
 @property  <MRCompanionConnectionControllerDelegate> *delegate

  // instance methods
  -[MRCompanionConnectionController .cxx_destruct]
  -[MRCompanionConnectionController companionEndpoint]
  -[MRCompanionConnectionController _handleCompanionDeviceConnectedNotification:]
  -[MRCompanionConnectionController _handleExternalDeviceConnectionStateDidChangeNotification:]
  -[MRCompanionConnectionController _maybeAttemptToDiscoverAndConnectToCompanionWithReason:]
  -[MRCompanionConnectionController setCompanionEndpoint:]
  -[MRCompanionConnectionController _shouldAttemptToDiscoverAndConnectToCompanion]
  -[MRCompanionConnectionController setDelegate:]
  -[MRCompanionConnectionController init]
  -[MRCompanionConnectionController delegate]


MRVirtualVoiceInputDevice : NSObject
 @property  unsigned int deviceID
 @property  MRVirtualVoiceInputDeviceDescriptor *descriptor
 @property  unsigned int recordingState
 @property  NSData *data

  // instance methods
  -[MRVirtualVoiceInputDevice setDescriptor:]
  -[MRVirtualVoiceInputDevice initWithDeviceID:]
  -[MRVirtualVoiceInputDevice .cxx_destruct]
  -[MRVirtualVoiceInputDevice deviceID]
  -[MRVirtualVoiceInputDevice descriptor]
  -[MRVirtualVoiceInputDevice recordingState]
  -[MRVirtualVoiceInputDevice setRecordingState:]
  -[MRVirtualVoiceInputDevice data]
  -[MRVirtualVoiceInputDevice initWithData:]


_MRSetArtworkMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetArtworkMessageProtobuf .cxx_destruct]
  -[_MRSetArtworkMessageProtobuf dictionaryRepresentation]
  -[_MRSetArtworkMessageProtobuf writeTo:]
  -[_MRSetArtworkMessageProtobuf isEqual:]
  -[_MRSetArtworkMessageProtobuf readFrom:]
  -[_MRSetArtworkMessageProtobuf copyWithZone:]


MRXPCConnection : NSObject
 @property  NSObject<OS_xpc_object> *connection
 @property  @? messageHandler
 @property  @? invalidationHandler
 @property  int pid
 @property  unsigned int uid

  // instance methods
  -[MRXPCConnection messageHandler]
  -[MRXPCConnection uid]
  -[MRXPCConnection setMessageHandler:]
  -[MRXPCConnection .cxx_destruct]
  -[MRXPCConnection initWithConnection:queue:defaultReplyQueue:]
  -[MRXPCConnection connection]
  -[MRXPCConnection setInvalidationHandler:]
  -[MRXPCConnection pid]
  -[MRXPCConnection removeCustomXPCHandler:]
  -[MRXPCConnection sendSyncMessage:error:]
  -[MRXPCConnection dealloc]
  -[MRXPCConnection sendSyncMessageWithType:error:]
  -[MRXPCConnection addCustomXPCHandler:forKey:]
  -[MRXPCConnection invalidationHandler]
  -[MRXPCConnection sendMessage:queue:reply:]
  -[MRXPCConnection sendMessageWithType:queue:reply:]


MRAudioDataBlock : NSObject <NSMutableCopying>
 @property  MRAudioBuffer *buffer
 @property  {?=dd} time
 @property  float gain
 @property  _MRAudioDataBlockProtobuf *protobuf
 @property  NSData *data

  // instance methods
  -[MRAudioDataBlock gain]
  -[MRAudioDataBlock .cxx_destruct]
  -[MRAudioDataBlock _parseGain:]
  -[MRAudioDataBlock _parseBuffer:]
  -[MRAudioDataBlock _parseTimestamp:]
  -[MRAudioDataBlock _copyWithZone:usingConcreteClass:]
  -[MRAudioDataBlock data]
  -[MRAudioDataBlock time]
  -[MRAudioDataBlock protobuf]
  -[MRAudioDataBlock initWithProtobuf:]
  -[MRAudioDataBlock initWithData:]
  -[MRAudioDataBlock mutableCopyWithZone:]
  -[MRAudioDataBlock copyWithZone:]
  -[MRAudioDataBlock buffer]


MRMutableAudioDataBlock : MRAudioDataBlock
 @property  MRAudioBuffer *buffer
 @property  {?=dd} time
 @property  float gain

  // instance methods
  -[MRMutableAudioDataBlock setTime:]
  -[MRMutableAudioDataBlock setGain:]
  -[MRMutableAudioDataBlock setBuffer:]


MRExternalDevicePairingSession : MRCryptoPairingSession
 @property  MRCoreUtilsPairingSession *pairingSession
 @property  MRCryptoPairingSessionBlockDelegate *pairingDelegate
 @property  BOOL hasExchangedMessage
 @property  BOOL usingSystemPairing
 @property  unsigned long state

  // instance methods
  -[MRExternalDevicePairingSession isPaired]
  -[MRExternalDevicePairingSession initWithDevice:]
  -[MRExternalDevicePairingSession setPairingDelegate:]
  -[MRExternalDevicePairingSession isValid]
  -[MRExternalDevicePairingSession .cxx_destruct]
  -[MRExternalDevicePairingSession hasExchangedMessage]
  -[MRExternalDevicePairingSession setDelegate:]
  -[MRExternalDevicePairingSession setPairingSession:]
  -[MRExternalDevicePairingSession pairingSession]
  -[MRExternalDevicePairingSession state]
  -[MRExternalDevicePairingSession pairedDevices]
  -[MRExternalDevicePairingSession removePeer]
  -[MRExternalDevicePairingSession close]
  -[MRExternalDevicePairingSession updatePeer]
  -[MRExternalDevicePairingSession open]
  -[MRExternalDevicePairingSession pairingDelegate]
  -[MRExternalDevicePairingSession handlePairingFailureWithStatus:]
  -[MRExternalDevicePairingSession handlePairingExchangeData:completion:]
  -[MRExternalDevicePairingSession encryptData:withError:]
  -[MRExternalDevicePairingSession decryptData:withError:]
  -[MRExternalDevicePairingSession deleteIdentityWithError:]
  -[MRExternalDevicePairingSession isUsingSystemPairing]


MRMediaRemoteServiceClient : NSObject
 @property  MRMediaRemoteService *service
 @property  MRNotificationClient *notificationClient
 @property  NSArray *registeredOrigins
 @property  NSObject<OS_dispatch_queue> *workerQueue
 @property  NSObject<OS_dispatch_queue> *playbackQueueDispatchQueue
 @property  MRPlayerPath *activePlayerPath
 @property  MRPlayerPath *currentSessionPlayerPath

  // class methods
  +[MRMediaRemoteServiceClient sharedServiceClient]

  // instance methods
  -[MRMediaRemoteServiceClient removeInvalidationHandler:]
  -[MRMediaRemoteServiceClient notificationClient]
  -[MRMediaRemoteServiceClient .cxx_destruct]
  -[MRMediaRemoteServiceClient fetchPickableRoutesWithCategory:completion:]
  -[MRMediaRemoteServiceClient processPlayerPathInvalidationHandlersWithInvalidOrigin:]
  -[MRMediaRemoteServiceClient workerQueue]
  -[MRMediaRemoteServiceClient init]
  -[MRMediaRemoteServiceClient addEndpointObserver:]
  -[MRMediaRemoteServiceClient addPlayerPathInvalidationHandler:]
  -[MRMediaRemoteServiceClient removeEndpointObserver:]
  -[MRMediaRemoteServiceClient removeNowPlayingController:]
  -[MRMediaRemoteServiceClient service]
  -[MRMediaRemoteServiceClient registeredOrigins]
  -[MRMediaRemoteServiceClient registerOrigin:withDeviceInfo:completion:]
  -[MRMediaRemoteServiceClient unregisterAllOriginsWithCompletion:]
  -[MRMediaRemoteServiceClient activePlayerPath]
  -[MRMediaRemoteServiceClient dealloc]
  -[MRMediaRemoteServiceClient processPlayerPathInvalidationHandlersWithBlock:]
  -[MRMediaRemoteServiceClient addNowPlayingController:]
  -[MRMediaRemoteServiceClient setCurrentSessionPlayerPath:]
  -[MRMediaRemoteServiceClient setPlaybackQueueDispatchQueue:]
  -[MRMediaRemoteServiceClient currentSessionPlayerPath]
  -[MRMediaRemoteServiceClient setActivePlayerPath:]
  -[MRMediaRemoteServiceClient isOriginRegistered:]
  -[MRMediaRemoteServiceClient playbackQueueDispatchQueue]
  -[MRMediaRemoteServiceClient unregisterOrigin:withCompletion:]


_MRLyricsTokenProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRLyricsTokenProtobuf .cxx_destruct]
  -[_MRLyricsTokenProtobuf dictionaryRepresentation]
  -[_MRLyricsTokenProtobuf writeTo:]
  -[_MRLyricsTokenProtobuf isEqual:]
  -[_MRLyricsTokenProtobuf readFrom:]
  -[_MRLyricsTokenProtobuf copyWithZone:]


MRSendButtonEventMessage : MRProtocolMessage
 @property  {_MRHIDButtonEvent=IIB} buttonEvent

  // instance methods
  -[MRSendButtonEventMessage buttonEvent]
  -[MRSendButtonEventMessage initWithButtonEvent:]
  -[MRSendButtonEventMessage type]


MRAVDistantEndpoint : MRAVEndpoint <NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *externalDeviceQueue
 @property  NSArray *distantOutputDevices
 @property  NSArray *distantPersonalOutputDevices
 @property  MRAVDistantOutputDevice *distantGroupLeader
 @property  MRDistantExternalDevice *distantExternalDevice
 @property  NSXPCListenerEndpoint *externalDeviceListenerEndpoint

  // class methods
  +[MRAVDistantEndpoint supportsSecureCoding]

  // instance methods
  -[MRAVDistantEndpoint designatedGroupLeader]
  -[MRAVDistantEndpoint localizedName]
  -[MRAVDistantEndpoint setUniqueIdentifier:]
  -[MRAVDistantEndpoint initWithDescriptor:]
  -[MRAVDistantEndpoint connectionType]
  -[MRAVDistantEndpoint canModifyGroupMembership]
  -[MRAVDistantEndpoint externalDeviceQueue]
  -[MRAVDistantEndpoint isProxyGroupPlayer]
  -[MRAVDistantEndpoint uniqueIdentifier]
  -[MRAVDistantEndpoint initWithCoder:]
  -[MRAVDistantEndpoint setLocalizedName:]
  -[MRAVDistantEndpoint personalOutputDevices]
  -[MRAVDistantEndpoint setDistantOutputDevices:]
  -[MRAVDistantEndpoint .cxx_destruct]
  -[MRAVDistantEndpoint setDistantPersonalOutputDevices:]
  -[MRAVDistantEndpoint distantGroupLeader]
  -[MRAVDistantEndpoint distantExternalDevice]
  -[MRAVDistantEndpoint externalDevice]
  -[MRAVDistantEndpoint externalDeviceListenerEndpoint]
  -[MRAVDistantEndpoint outputDevices]
  -[MRAVDistantEndpoint setExternalDeviceQueue:]
  -[MRAVDistantEndpoint setDistantGroupLeader:]
  -[MRAVDistantEndpoint setExternalDeviceListenerEndpoint:]
  -[MRAVDistantEndpoint distantPersonalOutputDevices]
  -[MRAVDistantEndpoint distantOutputDevices]
  -[MRAVDistantEndpoint setDistantExternalDevice:]
  -[MRAVDistantEndpoint encodeWithCoder:]


_MRSetHiliteModeMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetHiliteModeMessageProtobuf dictionaryRepresentation]
  -[_MRSetHiliteModeMessageProtobuf writeTo:]
  -[_MRSetHiliteModeMessageProtobuf isEqual:]
  -[_MRSetHiliteModeMessageProtobuf readFrom:]
  -[_MRSetHiliteModeMessageProtobuf copyWithZone:]


MRNowPlayingAudioFormatController : NSObject
 @property  BOOL isUpdating
 @property  BOOL pendingUpdate
 @property  <MRNowPlayingAudioFormatControllerDelegate> *delegate
 @property  MRNowPlayingAudioFormatContentInfo *audioFormatContentInfo
 @property  NSString *bundleID
 @property  NSString *displayName
 @property  BOOL hasNowPlayingApp
 @property  NSString *audioFormatDescription
 @property  NSString *bestAvailableAudioFormatDescription
 @property  BOOL multichannel
 @property  long long bestAvailableAudioFormat
 @property  BOOL eligibleForSpatialization

  // instance methods
  -[MRNowPlayingAudioFormatController bundleID]
  -[MRNowPlayingAudioFormatController displayName]
  -[MRNowPlayingAudioFormatController setIsUpdating:]
  -[MRNowPlayingAudioFormatController setPendingUpdate:]
  -[MRNowPlayingAudioFormatController bestAvailableAudioFormat]
  -[MRNowPlayingAudioFormatController isEligibleForSpatialization]
  -[MRNowPlayingAudioFormatController isMultichannel]
  -[MRNowPlayingAudioFormatController bestAvailableAudioFormatDescription]
  -[MRNowPlayingAudioFormatController .cxx_destruct]
  -[MRNowPlayingAudioFormatController setDelegate:]
  -[MRNowPlayingAudioFormatController updateNotifications]
  -[MRNowPlayingAudioFormatController updateAudioFormatWithReason:]
  -[MRNowPlayingAudioFormatController sourceFormatDidChange:]
  -[MRNowPlayingAudioFormatController updateAudioFormatContentInfo:client:reason:]
  -[MRNowPlayingAudioFormatController hasNowPlayingApp]
  -[MRNowPlayingAudioFormatController audioFormatContentInfo]
  -[MRNowPlayingAudioFormatController init]
  -[MRNowPlayingAudioFormatController audioFormatDescription]
  -[MRNowPlayingAudioFormatController pendingUpdate]
  -[MRNowPlayingAudioFormatController isUpdating]
  -[MRNowPlayingAudioFormatController delegate]


_MRCommandInfoProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRCommandInfoProtobuf .cxx_destruct]
  -[_MRCommandInfoProtobuf dictionaryRepresentation]
  -[_MRCommandInfoProtobuf writeTo:]
  -[_MRCommandInfoProtobuf isEqual:]
  -[_MRCommandInfoProtobuf readFrom:]
  -[_MRCommandInfoProtobuf dealloc]
  -[_MRCommandInfoProtobuf copyWithZone:]


_MRSendButtonEventMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendButtonEventMessageProtobuf dictionaryRepresentation]
  -[_MRSendButtonEventMessageProtobuf writeTo:]
  -[_MRSendButtonEventMessageProtobuf isEqual:]
  -[_MRSendButtonEventMessageProtobuf readFrom:]
  -[_MRSendButtonEventMessageProtobuf copyWithZone:]


MRGetRemoteTextInputSessionMessage : MRProtocolMessage
  // instance methods
  -[MRGetRemoteTextInputSessionMessage init]
  -[MRGetRemoteTextInputSessionMessage type]


_MROriginProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MROriginProtobuf .cxx_destruct]
  -[_MROriginProtobuf dictionaryRepresentation]
  -[_MROriginProtobuf writeTo:]
  -[_MROriginProtobuf isEqual:]
  -[_MROriginProtobuf readFrom:]
  -[_MROriginProtobuf copyWithZone:]


_MRKeyboardMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRKeyboardMessageProtobuf .cxx_destruct]
  -[_MRKeyboardMessageProtobuf dictionaryRepresentation]
  -[_MRKeyboardMessageProtobuf writeTo:]
  -[_MRKeyboardMessageProtobuf isEqual:]
  -[_MRKeyboardMessageProtobuf readFrom:]
  -[_MRKeyboardMessageProtobuf copyWithZone:]


_MRPlaybackSessionRequestProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionRequestProtobuf .cxx_destruct]
  -[_MRPlaybackSessionRequestProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionRequestProtobuf writeTo:]
  -[_MRPlaybackSessionRequestProtobuf isEqual:]
  -[_MRPlaybackSessionRequestProtobuf readFrom:]
  -[_MRPlaybackSessionRequestProtobuf copyWithZone:]


_MRPlaybackSessionProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionProtobuf .cxx_destruct]
  -[_MRPlaybackSessionProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionProtobuf writeTo:]
  -[_MRPlaybackSessionProtobuf isEqual:]
  -[_MRPlaybackSessionProtobuf readFrom:]
  -[_MRPlaybackSessionProtobuf copyWithZone:]


MRPlaybackQueueRequestMessage : MRProtocolMessage
 @property  MRPlaybackQueueRequest *request
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRPlaybackQueueRequestMessage playerPath]
  -[MRPlaybackQueueRequestMessage initWithRequest:forPlayerPath:]
  -[MRPlaybackQueueRequestMessage request]
  -[MRPlaybackQueueRequestMessage type]


_MRAVOutputDeviceDescriptorProtobuf : PBCodable <NSCopying>
 @property  BOOL hasName
 @property  NSString *name
 @property  BOOL hasUniqueIdentifier
 @property  NSString *uniqueIdentifier
 @property  BOOL hasGroupID
 @property  NSString *groupID
 @property  BOOL hasModelID
 @property  NSString *modelID
 @property  BOOL hasMacAddress
 @property  NSData *macAddress
 @property  BOOL hasCanAccessRemoteAssets
 @property  BOOL canAccessRemoteAssets
 @property  BOOL hasIsRemoteControllable
 @property  BOOL isRemoteControllable
 @property  BOOL hasIsGroupLeader
 @property  BOOL isGroupLeader
 @property  BOOL hasIsGroupable
 @property  BOOL isGroupable
 @property  BOOL hasDeviceType
 @property  int deviceType
 @property  BOOL hasDeviceSubType
 @property  int deviceSubType
 @property  BOOL hasModelSpecificInfoData
 @property  NSData *modelSpecificInfoData
 @property  BOOL hasBatteryLevel
 @property  float batteryLevel
 @property  BOOL hasIsLocalDevice
 @property  BOOL isLocalDevice
 @property  BOOL hasSupportsExternalScreen
 @property  BOOL supportsExternalScreen
 @property  BOOL hasRequiresAuthorization
 @property  BOOL requiresAuthorization
 @property  BOOL hasShouldForceRemoteControlabillity
 @property  BOOL shouldForceRemoteControlabillity
 @property  BOOL hasSourceInfo
 @property  _MRAVOutputDeviceSourceInfoProtobuf *sourceInfo
 @property  BOOL hasIsDeviceGroupable
 @property  BOOL isDeviceGroupable
 @property  BOOL hasCanRelayCommunicationChannel
 @property  BOOL canRelayCommunicationChannel
 @property  BOOL hasLogicalDeviceID
 @property  NSString *logicalDeviceID
 @property  BOOL hasIsProxyGroupPlayer
 @property  BOOL isProxyGroupPlayer
 @property  BOOL hasFirmwareVersion
 @property  NSString *firmwareVersion
 @property  BOOL hasVolume
 @property  float volume
 @property  BOOL hasIsVolumeControlAvailable
 @property  BOOL isVolumeControlAvailable
 @property  BOOL hasCanAccessAppleMusic
 @property  BOOL canAccessAppleMusic
 @property  BOOL hasCanAccessiCloudMusicLibrary
 @property  BOOL canAccessiCloudMusicLibrary
 @property  BOOL hasGroupContainsGroupLeader
 @property  BOOL groupContainsGroupLeader
 @property  BOOL hasSupportsBufferedAirPlay
 @property  BOOL supportsBufferedAirPlay
 @property  BOOL hasCanPlayEncryptedProgressiveDownloadAssets
 @property  BOOL canPlayEncryptedProgressiveDownloadAssets
 @property  BOOL hasCanFetchMediaDataFromSender
 @property  BOOL canFetchMediaDataFromSender
 @property  BOOL hasPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL hasIsAirPlayReceiverSessionActive
 @property  BOOL isAirPlayReceiverSessionActive
 @property  BOOL hasParentGroupIdentifier
 @property  NSString *parentGroupIdentifier
 @property  BOOL hasParentGroupContainsDiscoverableLeader
 @property  BOOL parentGroupContainsDiscoverableLeader
 @property  BOOL hasIsAddedToHomeKit
 @property  BOOL isAddedToHomeKit
 @property  BOOL hasVolumeCapabilities
 @property  int volumeCapabilities
 @property  BOOL hasBluetoothID
 @property  NSString *bluetoothID
 @property  BOOL hasSupportsHAP
 @property  BOOL supportsHAP
 @property  BOOL hasUsingJSONProtocol
 @property  BOOL usingJSONProtocol
 @property  NSMutableArray *clusterCompositions
 @property  BOOL hasClusterType
 @property  unsigned int clusterType
 @property  BOOL hasPrimaryUID
 @property  NSString *primaryUID
 @property  BOOL hasConfiguredClusterSize
 @property  unsigned int configuredClusterSize
 @property  BOOL hasSupportsRapportRemoteControlTransport
 @property  BOOL supportsRapportRemoteControlTransport
 @property  BOOL hasCurrentBluetoothListeningMode
 @property  NSString *currentBluetoothListeningMode
 @property  NSMutableArray *availableBluetoothListeningModes
 @property  BOOL hasSupportsMultiplayer
 @property  BOOL supportsMultiplayer
 @property  BOOL hasProducesLowFidelityAudio
 @property  BOOL producesLowFidelityAudio
 @property  BOOL hasHostDeviceClass
 @property  int hostDeviceClass
 @property  BOOL hasAirPlayGroupID
 @property  NSString *airPlayGroupID
 @property  BOOL hasSupportsSharePlayHandoff
 @property  BOOL supportsSharePlayHandoff

  // class methods
  +[_MRAVOutputDeviceDescriptorProtobuf clusterCompositionType]
  +[_MRAVOutputDeviceDescriptorProtobuf availableBluetoothListeningModesType]

  // instance methods
  -[_MRAVOutputDeviceDescriptorProtobuf clusterType]
  -[_MRAVOutputDeviceDescriptorProtobuf isAddedToHomeKit]
  -[_MRAVOutputDeviceDescriptorProtobuf supportsRapportRemoteControlTransport]
  -[_MRAVOutputDeviceDescriptorProtobuf supportsSharePlayHandoff]
  -[_MRAVOutputDeviceDescriptorProtobuf hasUniqueIdentifier]
  -[_MRAVOutputDeviceDescriptorProtobuf parentGroupContainsDiscoverableLeader]
  -[_MRAVOutputDeviceDescriptorProtobuf canRelayCommunicationChannel]
  -[_MRAVOutputDeviceDescriptorProtobuf setVolumeCapabilities:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHostDeviceClass:]
  -[_MRAVOutputDeviceDescriptorProtobuf bluetoothID]
  -[_MRAVOutputDeviceDescriptorProtobuf isLocalDevice]
  -[_MRAVOutputDeviceDescriptorProtobuf isAirPlayReceiverSessionActive]
  -[_MRAVOutputDeviceDescriptorProtobuf batteryLevel]
  -[_MRAVOutputDeviceDescriptorProtobuf hostDeviceClass]
  -[_MRAVOutputDeviceDescriptorProtobuf hasUsingJSONProtocol]
  -[_MRAVOutputDeviceDescriptorProtobuf configuredClusterSize]
  -[_MRAVOutputDeviceDescriptorProtobuf canAccessAppleMusic]
  -[_MRAVOutputDeviceDescriptorProtobuf hasBatteryLevel]
  -[_MRAVOutputDeviceDescriptorProtobuf hasRequiresAuthorization]
  -[_MRAVOutputDeviceDescriptorProtobuf setUniqueIdentifier:]
  -[_MRAVOutputDeviceDescriptorProtobuf currentBluetoothListeningMode]
  -[_MRAVOutputDeviceDescriptorProtobuf hasParentGroupIdentifier]
  -[_MRAVOutputDeviceDescriptorProtobuf isDeviceGroupable]
  -[_MRAVOutputDeviceDescriptorProtobuf presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsProxyGroupPlayer]
  -[_MRAVOutputDeviceDescriptorProtobuf logicalDeviceID]
  -[_MRAVOutputDeviceDescriptorProtobuf requiresAuthorization]
  -[_MRAVOutputDeviceDescriptorProtobuf groupContainsGroupLeader]
  -[_MRAVOutputDeviceDescriptorProtobuf canAccessiCloudMusicLibrary]
  -[_MRAVOutputDeviceDescriptorProtobuf setParentGroupIdentifier:]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsProxyGroupPlayer:]
  -[_MRAVOutputDeviceDescriptorProtobuf groupID]
  -[_MRAVOutputDeviceDescriptorProtobuf producesLowFidelityAudio]
  -[_MRAVOutputDeviceDescriptorProtobuf canFetchMediaDataFromSender]
  -[_MRAVOutputDeviceDescriptorProtobuf sourceInfo]
  -[_MRAVOutputDeviceDescriptorProtobuf availableBluetoothListeningModes]
  -[_MRAVOutputDeviceDescriptorProtobuf airPlayGroupID]
  -[_MRAVOutputDeviceDescriptorProtobuf supportsMultiplayer]
  -[_MRAVOutputDeviceDescriptorProtobuf isRemoteControllable]
  -[_MRAVOutputDeviceDescriptorProtobuf canAccessRemoteAssets]
  -[_MRAVOutputDeviceDescriptorProtobuf parentGroupIdentifier]
  -[_MRAVOutputDeviceDescriptorProtobuf supportsHAP]
  -[_MRAVOutputDeviceDescriptorProtobuf supportsBufferedAirPlay]
  -[_MRAVOutputDeviceDescriptorProtobuf setAirPlayGroupID:]
  -[_MRAVOutputDeviceDescriptorProtobuf isGroupable]
  -[_MRAVOutputDeviceDescriptorProtobuf setGroupID:]
  -[_MRAVOutputDeviceDescriptorProtobuf canPlayEncryptedProgressiveDownloadAssets]
  -[_MRAVOutputDeviceDescriptorProtobuf isGroupLeader]
  -[_MRAVOutputDeviceDescriptorProtobuf supportsExternalScreen]
  -[_MRAVOutputDeviceDescriptorProtobuf setCanAccessAppleMusic:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsProxyGroupPlayer:]
  -[_MRAVOutputDeviceDescriptorProtobuf setGroupContainsGroupLeader:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasSupportsMultiplayer]
  -[_MRAVOutputDeviceDescriptorProtobuf setCanAccessRemoteAssets:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasSupportsRapportRemoteControlTransport:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasCanPlayEncryptedProgressiveDownloadAssets]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasConfiguredClusterSize:]
  -[_MRAVOutputDeviceDescriptorProtobuf setCanFetchMediaDataFromSender:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasCanRelayCommunicationChannel]
  -[_MRAVOutputDeviceDescriptorProtobuf mergeFrom:]
  -[_MRAVOutputDeviceDescriptorProtobuf name]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasCanAccessiCloudMusicLibrary:]
  -[_MRAVOutputDeviceDescriptorProtobuf volume]
  -[_MRAVOutputDeviceDescriptorProtobuf isProxyGroupPlayer]
  -[_MRAVOutputDeviceDescriptorProtobuf deviceType]
  -[_MRAVOutputDeviceDescriptorProtobuf uniqueIdentifier]
  -[_MRAVOutputDeviceDescriptorProtobuf volumeCapabilities]
  -[_MRAVOutputDeviceDescriptorProtobuf isVolumeControlAvailable]
  -[_MRAVOutputDeviceDescriptorProtobuf setVolume:]
  -[_MRAVOutputDeviceDescriptorProtobuf setFirmwareVersion:]
  -[_MRAVOutputDeviceDescriptorProtobuf modelID]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsRemoteControllable:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasCanAccessAppleMusic:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasUsingJSONProtocol:]
  -[_MRAVOutputDeviceDescriptorProtobuf setCanAccessiCloudMusicLibrary:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsLocalDevice]
  -[_MRAVOutputDeviceDescriptorProtobuf setAvailableBluetoothListeningModes:]
  -[_MRAVOutputDeviceDescriptorProtobuf setSupportsHAP:]
  -[_MRAVOutputDeviceDescriptorProtobuf setModelSpecificInfoData:]
  -[_MRAVOutputDeviceDescriptorProtobuf modelSpecificInfoData]
  -[_MRAVOutputDeviceDescriptorProtobuf hasCanAccessAppleMusic]
  -[_MRAVOutputDeviceDescriptorProtobuf hasGroupID]
  -[_MRAVOutputDeviceDescriptorProtobuf firmwareVersion]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasCanPlayEncryptedProgressiveDownloadAssets:]
  -[_MRAVOutputDeviceDescriptorProtobuf setRequiresAuthorization:]
  -[_MRAVOutputDeviceDescriptorProtobuf StringAsHostDeviceClass:]
  -[_MRAVOutputDeviceDescriptorProtobuf .cxx_destruct]
  -[_MRAVOutputDeviceDescriptorProtobuf addAvailableBluetoothListeningModes:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasDeviceSubType]
  -[_MRAVOutputDeviceDescriptorProtobuf clearClusterCompositions]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsAddedToHomeKit:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasName]
  -[_MRAVOutputDeviceDescriptorProtobuf setBatteryLevel:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasRequiresAuthorization:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasHostDeviceClass:]
  -[_MRAVOutputDeviceDescriptorProtobuf dictionaryRepresentation]
  -[_MRAVOutputDeviceDescriptorProtobuf hasCanAccessiCloudMusicLibrary]
  -[_MRAVOutputDeviceDescriptorProtobuf hostDeviceClassAsString:]
  -[_MRAVOutputDeviceDescriptorProtobuf shouldForceRemoteControlabillity]
  -[_MRAVOutputDeviceDescriptorProtobuf writeTo:]
  -[_MRAVOutputDeviceDescriptorProtobuf setModelID:]
  -[_MRAVOutputDeviceDescriptorProtobuf setName:]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsAirPlayReceiverSessionActive:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[_MRAVOutputDeviceDescriptorProtobuf hasProducesLowFidelityAudio]
  -[_MRAVOutputDeviceDescriptorProtobuf deviceSubTypeAsString:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasSupportsSharePlayHandoff]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasClusterType:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasDeviceType:]
  -[_MRAVOutputDeviceDescriptorProtobuf clusterCompositionsCount]
  -[_MRAVOutputDeviceDescriptorProtobuf setSupportsExternalScreen:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasCanFetchMediaDataFromSender:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsAirPlayReceiverSessionActive]
  -[_MRAVOutputDeviceDescriptorProtobuf setLogicalDeviceID:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsVolumeControlAvailable]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsDeviceGroupable:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasSupportsExternalScreen]
  -[_MRAVOutputDeviceDescriptorProtobuf hasSupportsRapportRemoteControlTransport]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasSupportsExternalScreen:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsGroupable:]
  -[_MRAVOutputDeviceDescriptorProtobuf setSupportsRapportRemoteControlTransport:]
  -[_MRAVOutputDeviceDescriptorProtobuf setClusterType:]
  -[_MRAVOutputDeviceDescriptorProtobuf isEqual:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsGroupLeader:]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsLocalDevice:]
  -[_MRAVOutputDeviceDescriptorProtobuf clusterCompositions]
  -[_MRAVOutputDeviceDescriptorProtobuf hasBluetoothID]
  -[_MRAVOutputDeviceDescriptorProtobuf copyTo:]
  -[_MRAVOutputDeviceDescriptorProtobuf primaryUID]
  -[_MRAVOutputDeviceDescriptorProtobuf setShouldForceRemoteControlabillity:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsAddedToHomeKit]
  -[_MRAVOutputDeviceDescriptorProtobuf setUsingJSONProtocol:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasGroupContainsGroupLeader:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasShouldForceRemoteControlabillity]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsGroupable:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasDeviceSubType:]
  -[_MRAVOutputDeviceDescriptorProtobuf setPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets:]
  -[_MRAVOutputDeviceDescriptorProtobuf setDeviceType:]
  -[_MRAVOutputDeviceDescriptorProtobuf deviceTypeAsString:]
  -[_MRAVOutputDeviceDescriptorProtobuf readFrom:]
  -[_MRAVOutputDeviceDescriptorProtobuf setParentGroupContainsDiscoverableLeader:]
  -[_MRAVOutputDeviceDescriptorProtobuf setSupportsSharePlayHandoff:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasCanRelayCommunicationChannel:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsGroupLeader]
  -[_MRAVOutputDeviceDescriptorProtobuf hasCanAccessRemoteAssets]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsDeviceGroupable]
  -[_MRAVOutputDeviceDescriptorProtobuf hasModelID]
  -[_MRAVOutputDeviceDescriptorProtobuf setBluetoothID:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasCanFetchMediaDataFromSender]
  -[_MRAVOutputDeviceDescriptorProtobuf hasDeviceType]
  -[_MRAVOutputDeviceDescriptorProtobuf StringAsDeviceSubType:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasProducesLowFidelityAudio:]
  -[_MRAVOutputDeviceDescriptorProtobuf addClusterComposition:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsVolumeControlAvailable:]
  -[_MRAVOutputDeviceDescriptorProtobuf StringAsDeviceType:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasSupportsMultiplayer:]
  -[_MRAVOutputDeviceDescriptorProtobuf setDeviceSubType:]
  -[_MRAVOutputDeviceDescriptorProtobuf setSourceInfo:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasSupportsBufferedAirPlay]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasShouldForceRemoteControlabillity:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasSourceInfo]
  -[_MRAVOutputDeviceDescriptorProtobuf hasAirPlayGroupID]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsAirPlayReceiverSessionActive:]
  -[_MRAVOutputDeviceDescriptorProtobuf setMacAddress:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsGroupable]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasVolumeCapabilities:]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsDeviceGroupable:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasLogicalDeviceID]
  -[_MRAVOutputDeviceDescriptorProtobuf hasGroupContainsGroupLeader]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasSupportsHAP:]
  -[_MRAVOutputDeviceDescriptorProtobuf setCanRelayCommunicationChannel:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasVolume:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasCurrentBluetoothListeningMode]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasSupportsBufferedAirPlay:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasVolume]
  -[_MRAVOutputDeviceDescriptorProtobuf clearAvailableBluetoothListeningModes]
  -[_MRAVOutputDeviceDescriptorProtobuf hasPrimaryUID]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasSupportsSharePlayHandoff:]
  -[_MRAVOutputDeviceDescriptorProtobuf setCurrentBluetoothListeningMode:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasSupportsHAP]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsGroupLeader:]
  -[_MRAVOutputDeviceDescriptorProtobuf availableBluetoothListeningModesCount]
  -[_MRAVOutputDeviceDescriptorProtobuf deviceSubType]
  -[_MRAVOutputDeviceDescriptorProtobuf copyWithZone:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasClusterType]
  -[_MRAVOutputDeviceDescriptorProtobuf availableBluetoothListeningModesAtIndex:]
  -[_MRAVOutputDeviceDescriptorProtobuf setConfiguredClusterSize:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasIsRemoteControllable]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsRemoteControllable:]
  -[_MRAVOutputDeviceDescriptorProtobuf setCanPlayEncryptedProgressiveDownloadAssets:]
  -[_MRAVOutputDeviceDescriptorProtobuf setIsVolumeControlAvailable:]
  -[_MRAVOutputDeviceDescriptorProtobuf setClusterCompositions:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasFirmwareVersion]
  -[_MRAVOutputDeviceDescriptorProtobuf hasMacAddress]
  -[_MRAVOutputDeviceDescriptorProtobuf clusterCompositionAtIndex:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasModelSpecificInfoData]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasParentGroupContainsDiscoverableLeader:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasHostDeviceClass]
  -[_MRAVOutputDeviceDescriptorProtobuf setPrimaryUID:]
  -[_MRAVOutputDeviceDescriptorProtobuf hasVolumeCapabilities]
  -[_MRAVOutputDeviceDescriptorProtobuf hasConfiguredClusterSize]
  -[_MRAVOutputDeviceDescriptorProtobuf hasParentGroupContainsDiscoverableLeader]
  -[_MRAVOutputDeviceDescriptorProtobuf setProducesLowFidelityAudio:]
  -[_MRAVOutputDeviceDescriptorProtobuf usingJSONProtocol]
  -[_MRAVOutputDeviceDescriptorProtobuf setSupportsMultiplayer:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsLocalDevice:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasIsAddedToHomeKit:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasCanAccessRemoteAssets:]
  -[_MRAVOutputDeviceDescriptorProtobuf setSupportsBufferedAirPlay:]
  -[_MRAVOutputDeviceDescriptorProtobuf setHasBatteryLevel:]
  -[_MRAVOutputDeviceDescriptorProtobuf macAddress]


_MRMediaRemoteMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRMediaRemoteMessageProtobuf .cxx_destruct]
  -[_MRMediaRemoteMessageProtobuf dictionaryRepresentation]
  -[_MRMediaRemoteMessageProtobuf writeTo:]
  -[_MRMediaRemoteMessageProtobuf isEqual:]
  -[_MRMediaRemoteMessageProtobuf readFrom:]
  -[_MRMediaRemoteMessageProtobuf copyWithZone:]


_MRRegisterVoiceInputDeviceMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRegisterVoiceInputDeviceMessageProtobuf .cxx_destruct]
  -[_MRRegisterVoiceInputDeviceMessageProtobuf dictionaryRepresentation]
  -[_MRRegisterVoiceInputDeviceMessageProtobuf writeTo:]
  -[_MRRegisterVoiceInputDeviceMessageProtobuf isEqual:]
  -[_MRRegisterVoiceInputDeviceMessageProtobuf readFrom:]
  -[_MRRegisterVoiceInputDeviceMessageProtobuf copyWithZone:]


_MRVirtualTouchEventProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVirtualTouchEventProtobuf dictionaryRepresentation]
  -[_MRVirtualTouchEventProtobuf writeTo:]
  -[_MRVirtualTouchEventProtobuf isEqual:]
  -[_MRVirtualTouchEventProtobuf readFrom:]
  -[_MRVirtualTouchEventProtobuf copyWithZone:]


MRPlaybackSessionRequest : NSObject
 @property  _MRPlaybackSessionRequestProtobuf *protobuf
 @property  NSString *requestIdentifier
 @property  NSString *identifier
 @property  NSString *type
 @property  unsigned long location
 @property  BOOL hasLocation
 @property  unsigned long length
 @property  BOOL hasLength
 @property  NSData *data
 @property  {_NSRange=QQ} range

  // instance methods
  -[MRPlaybackSessionRequest setRequestIdentifier:]
  -[MRPlaybackSessionRequest hasLength]
  -[MRPlaybackSessionRequest range]
  -[MRPlaybackSessionRequest requestIdentifier]
  -[MRPlaybackSessionRequest setHasLength:]
  -[MRPlaybackSessionRequest setType:]
  -[MRPlaybackSessionRequest .cxx_destruct]
  -[MRPlaybackSessionRequest setLocation:]
  -[MRPlaybackSessionRequest data]
  -[MRPlaybackSessionRequest length]
  -[MRPlaybackSessionRequest isEqual:]
  -[MRPlaybackSessionRequest hasLocation]
  -[MRPlaybackSessionRequest setLength:]
  -[MRPlaybackSessionRequest identifier]
  -[MRPlaybackSessionRequest protobuf]
  -[MRPlaybackSessionRequest initWithIdentifier:range:]
  -[MRPlaybackSessionRequest location]
  -[MRPlaybackSessionRequest setHasLocation:]
  -[MRPlaybackSessionRequest initWithProtobuf:]
  -[MRPlaybackSessionRequest initWithData:]
  -[MRPlaybackSessionRequest type]
  -[MRPlaybackSessionRequest setIdentifier:]
  -[MRPlaybackSessionRequest initWithIdentifier:type:]


_MRRegisterGameControllerMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRegisterGameControllerMessageProtobuf .cxx_destruct]
  -[_MRRegisterGameControllerMessageProtobuf dictionaryRepresentation]
  -[_MRRegisterGameControllerMessageProtobuf writeTo:]
  -[_MRRegisterGameControllerMessageProtobuf isEqual:]
  -[_MRRegisterGameControllerMessageProtobuf readFrom:]
  -[_MRRegisterGameControllerMessageProtobuf copyWithZone:]


_MRNowPlayingClientProtobuf : PBCodable <NSCopying>
 @property  BOOL hasProcessIdentifier
 @property  int processIdentifier
 @property  BOOL hasBundleIdentifier
 @property  NSString *bundleIdentifier
 @property  BOOL hasParentApplicationBundleIdentifier
 @property  NSString *parentApplicationBundleIdentifier
 @property  BOOL hasProcessUserIdentifier
 @property  int processUserIdentifier
 @property  BOOL hasNowPlayingVisibility
 @property  int nowPlayingVisibility
 @property  BOOL hasTintColor
 @property  _MRColorProtobuf *tintColor
 @property  BOOL hasDisplayName
 @property  NSString *displayName
 @property  NSMutableArray *extendedBundleIdentifierHierarchys
 @property  BOOL hasIsEmptyDeprecated
 @property  BOOL isEmptyDeprecated
 @property  BOOL hasIconURL
 @property  NSString *iconURL

  // class methods
  +[_MRNowPlayingClientProtobuf extendedBundleIdentifierHierarchyType]

  // instance methods
  -[_MRNowPlayingClientProtobuf tintColor]
  -[_MRNowPlayingClientProtobuf setProcessIdentifier:]
  -[_MRNowPlayingClientProtobuf displayName]
  -[_MRNowPlayingClientProtobuf mergeFrom:]
  -[_MRNowPlayingClientProtobuf iconURL]
  -[_MRNowPlayingClientProtobuf extendedBundleIdentifierHierarchysCount]
  -[_MRNowPlayingClientProtobuf hasBundleIdentifier]
  -[_MRNowPlayingClientProtobuf bundleIdentifier]
  -[_MRNowPlayingClientProtobuf setIconURL:]
  -[_MRNowPlayingClientProtobuf .cxx_destruct]
  -[_MRNowPlayingClientProtobuf dictionaryRepresentation]
  -[_MRNowPlayingClientProtobuf hasNowPlayingVisibility]
  -[_MRNowPlayingClientProtobuf hasIsEmptyDeprecated]
  -[_MRNowPlayingClientProtobuf writeTo:]
  -[_MRNowPlayingClientProtobuf setBundleIdentifier:]
  -[_MRNowPlayingClientProtobuf setHasNowPlayingVisibility:]
  -[_MRNowPlayingClientProtobuf hasDisplayName]
  -[_MRNowPlayingClientProtobuf hasTintColor]
  -[_MRNowPlayingClientProtobuf isEqual:]
  -[_MRNowPlayingClientProtobuf copyTo:]
  -[_MRNowPlayingClientProtobuf addExtendedBundleIdentifierHierarchy:]
  -[_MRNowPlayingClientProtobuf extendedBundleIdentifierHierarchyAtIndex:]
  -[_MRNowPlayingClientProtobuf readFrom:]
  -[_MRNowPlayingClientProtobuf setParentApplicationBundleIdentifier:]
  -[_MRNowPlayingClientProtobuf setTintColor:]
  -[_MRNowPlayingClientProtobuf setDisplayName:]
  -[_MRNowPlayingClientProtobuf extendedBundleIdentifierHierarchys]
  -[_MRNowPlayingClientProtobuf StringAsNowPlayingVisibility:]
  -[_MRNowPlayingClientProtobuf nowPlayingVisibilityAsString:]
  -[_MRNowPlayingClientProtobuf setIsEmptyDeprecated:]
  -[_MRNowPlayingClientProtobuf clearExtendedBundleIdentifierHierarchys]
  -[_MRNowPlayingClientProtobuf hasIconURL]
  -[_MRNowPlayingClientProtobuf isEmptyDeprecated]
  -[_MRNowPlayingClientProtobuf setHasProcessUserIdentifier:]
  -[_MRNowPlayingClientProtobuf setHasProcessIdentifier:]
  -[_MRNowPlayingClientProtobuf processIdentifier]
  -[_MRNowPlayingClientProtobuf hasParentApplicationBundleIdentifier]
  -[_MRNowPlayingClientProtobuf setExtendedBundleIdentifierHierarchys:]
  -[_MRNowPlayingClientProtobuf setProcessUserIdentifier:]
  -[_MRNowPlayingClientProtobuf copyWithZone:]
  -[_MRNowPlayingClientProtobuf hasProcessUserIdentifier]
  -[_MRNowPlayingClientProtobuf hasProcessIdentifier]
  -[_MRNowPlayingClientProtobuf nowPlayingVisibility]
  -[_MRNowPlayingClientProtobuf setHasIsEmptyDeprecated:]
  -[_MRNowPlayingClientProtobuf setNowPlayingVisibility:]
  -[_MRNowPlayingClientProtobuf processUserIdentifier]
  -[_MRNowPlayingClientProtobuf parentApplicationBundleIdentifier]


MRNotificationClient : NSObject <MRNowPlayingClientState>
 @property  NSObject<OS_dispatch_queue> *notificationQueue
 @property  BOOL registeredForNowPlayingNotifications
 @property  BOOL receivesExternalScreenTypeChangedNotifications
 @property  BOOL receivesSupportedCommandsNotifications
 @property  BOOL receivesRoutesChangedNotifications
 @property  BOOL receivesVolumeControlNotifications
 @property  BOOL receivesOriginChangedNotifications
 @property  BOOL receivesPlaybackErrorNotifications
 @property  BOOL receivesVoiceInputRecordingStateNotifications

  // class methods
  +[MRNotificationClient nowPlayingNotifications]

  // instance methods
  -[MRNotificationClient restoreNowPlayingClientState]
  -[MRNotificationClient notificationQueue]
  -[MRNotificationClient dispatchNotification:userInfo:object:]
  -[MRNotificationClient setReceivesSupportedCommandsNotifications:]
  -[MRNotificationClient setReceivesExternalScreenTypeChangedNotifications:]
  -[MRNotificationClient receivesExternalScreenTypeChangedNotifications]
  -[MRNotificationClient setReceivesOriginChangedNotifications:]
  -[MRNotificationClient receivesPlaybackErrorNotifications]
  -[MRNotificationClient isRegisteredForNowPlayingNotifications]
  -[MRNotificationClient setReceivesRoutesChangedNotifications:]
  -[MRNotificationClient unregisterForNowPlayingNotifications]
  -[MRNotificationClient .cxx_destruct]
  -[MRNotificationClient registerForNowPlayingNotificationsWithQueue:]
  -[MRNotificationClient _postNotification:userInfo:object:withHandler:]
  -[MRNotificationClient receivesOriginChangedNotifications]
  -[MRNotificationClient init]
  -[MRNotificationClient _syncWakingPlayerPathsWithReplyQueue:completion:]
  -[MRNotificationClient postNotification:userInfo:object:]
  -[MRNotificationClient receivesRoutesChangedNotifications]
  -[MRNotificationClient receivesSupportedCommandsNotifications]
  -[MRNotificationClient setReceivesVoiceInputRecordingStateNotifications:]
  -[MRNotificationClient registerForWakingNowPlayingNotificationsForPlayerPath:replyQueue:completion:]
  -[MRNotificationClient unregisterForWakingNowPlayingNotificationsForPlayerPath:replyQueue:completion:]
  -[MRNotificationClient receivesVoiceInputRecordingStateNotifications]
  -[MRNotificationClient receivesVolumeControlNotifications]
  -[MRNotificationClient registerForNowPlayingNotificationsWithQueue:force:]
  -[MRNotificationClient _processAlwaysNeedsNowPlayingNotifications]
  -[MRNotificationClient setReceivesPlaybackErrorNotifications:]
  -[MRNotificationClient setReceivesVolumeControlNotifications:]


MRNotification : NSObject
 @property  NSString *notification
 @property  NSDictionary *userInfo
 @property  NSObject<OS_xpc_object> *xpcMessage

  // instance methods
  -[MRNotification notification]
  -[MRNotification .cxx_destruct]
  -[MRNotification xpcMessage]
  -[MRNotification initWithNotification:userInfo:]
  -[MRNotification userInfo]
  -[MRNotification setXpcMessage:]


MRUserSettings : NSObject
 @property  BOOL usePeerToPeerExternalDeviceConnections
 @property  BOOL useNoDelayOptionForExternalDeviceSockets
 @property  BOOL useDebugAVRouteWithoutVolumeControl
 @property  BOOL useAPSyncAPI
 @property  BOOL useClusterDevices
 @property  BOOL shouldInitializeTelevisionBonjourService
 @property  BOOL shouldInitializeGenericBonjourService
 @property  BOOL shouldInitializeRapportService
 @property  BOOL shouldLogPairingSetupCode
 @property  BOOL shouldLogArtwork
 @property  BOOL verboseProtocolMessageLogging
 @property  BOOL shouldWakeDeviceForRemoteControlCommands
 @property  BOOL verboseHostedDiscoverySessionLogging
 @property  BOOL verboseHostedExternalDeviceClientLogging
 @property  BOOL verboseMRDMediaRemoteClientLogging
 @property  BOOL verboseConnectionMonitorLogging
 @property  BOOL verboseNowPlayingControllerLogging
 @property  BOOL verboseOriginForwarderLogging
 @property  BOOL hasExternalDeviceSocketQOSLevelSet
 @property  long long externalDeviceSocketQOSLevel
 @property  BOOL externalDevicePairingAllowed
 @property  double externalDeviceTimeoutDuration
 @property  double externalDeviceNowPlayingInfoCoalesceDuration
 @property  double externalDeviceNowPlayingInfoArtworkCoalesceDuration
 @property  double externalDeviceDisconnectWaitDuration
 @property  double externalDeviceDisconnectSleepDuration
 @property  double externalDeviceSleepAssertionOnClientConnectDuration
 @property  double bluetoothDeviceResumeDuration
 @property  double broadcastCommandWaitDuration
 @property  double airPlayOutputContextInitTimeoutDuration
 @property  double wakingPlayerPathAssetionDuration
 @property  unsigned long checkXPCConnectionStatusDefaultInterval
 @property  double checkXPCConnectionStatusDefaultResponseTimeout
 @property  BOOL useExternalDeviceSystemPairing
 @property  long long maxTransactionMemorySize
 @property  double transactionWaitDurationOnOutOfMemory
 @property  double transactionWaitDurationOnXpcSend
 @property  double transactionWaitDurationOnNetworkSend
 @property  BOOL useSystemAudioContextForAirPlayTransport
 @property  BOOL useGenericTransportForHostedEndpoints
 @property  NSArray *connectedClientAuditTokens
 @property  NSArray *expectedClientAuditTokens
 @property  double queuedCommandsTimeoutInterval
 @property  BOOL computeNowPlayingApplication
 @property  double nowPlayingApplicationTimeout
 @property  BOOL takelockScreenAssertion
 @property  BOOL useProactiveEndpoint
 @property  BOOL connectToEndpointWhenBeginsPlayback
 @property  BOOL notifyDevicesInHomeThatPlaybackStarted
 @property  BOOL connectToAllEndpointsWhenAnyEndpointBeginsPlayback
 @property  BOOL connectToUserSelectedEndpoint
 @property  double discoverEndpointTimeoutInterval
 @property  BOOL needNowPlayingForegroundState
 @property  double deviceRecentlyUsedInterval
 @property  double mediaRecentlyPlayedInterval
 @property  double endpointRecentlyUserSelectedInterval
 @property  double remoteDeviceIdleDisconnectionInterval
 @property  BOOL remoteDeviceIdleDisconnection
 @property  double launchApplicationTimeoutInterval
 @property  BOOL supportProximityMigration
 @property  BOOL supportMigration
 @property  BOOL supportNewMigrationBehaviorForProximity
 @property  BOOL supportNewMigrationArchitecture
 @property  BOOL supportProximityMigrationV2
 @property  BOOL supportExpanseMigration
 @property  BOOL supportOutOfProcessMigration
 @property  BOOL forceFadeForEveryHandoff
 @property  BOOL supportLastPlayingDevice
 @property  BOOL supportRapportRemoteControlTransport
 @property  BOOL supportRapportRemoteControlConnection
 @property  BOOL sendLastPlayingDeviceToHome
 @property  BOOL connectToAllEndpointsWhenInProximityToAnyDevice
 @property  double lastPlayingDeviceThresholdInterval
 @property  double sendPlaybackSessionUpdateToCompanionCoalesceInterval
 @property  BOOL forceEnableCECVolume
 @property  BOOL supportLockscreenPlatterDisplayForPersonalDevice
 @property  double personalDeviceLockScreenTimeout
 @property  NSDictionary *personalDeviceState
 @property  unsigned long maximumNumberOfMediaSuggestions
 @property  BOOL supportProactiveSuggestion
 @property  BOOL visuallyIdentifyProactiveSuggestion
 @property  double activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval
 @property  BOOL supportNanoLinkAgent
 @property  BOOL discoverCompanionDevices
 @property  BOOL supportMultiplayerHost
 @property  BOOL multiplayerAware
 @property  BOOL canHostMultiplayerStream
 @property  BOOL removeLocalDevice
 @property  BOOL showUncommitedDevices
 @property  BOOL supportNowPlayingPIP
 @property  BOOL supportCoordinatedVolume
 @property  BOOL supportNanoStandalone
 @property  unsigned long maxStreamCapacity
 @property  BOOL reserveSlotForLocal
 @property  BOOL forceDeviceInfoDiscovery
 @property  BOOL homepodDemoMode
 @property  NSArray *jsonClientUIDs
 @property  NSString *lastBootUUID
 @property  NSArray *remoteControlDiscoveryDenyList
 @property  NSArray *remoteControlDiscoveryAllowList
 @property  NSArray *destinationResolverReconRetryIntervals
 @property  int nowPlayingControllerVersion

  // class methods
  +[MRUserSettings currentSettings]

  // instance methods
  -[MRUserSettings connectedClientAuditTokens]
  -[MRUserSettings verboseOriginForwarderLogging]
  -[MRUserSettings showUncommitedDevices]
  -[MRUserSettings useProactiveEndpoint]
  -[MRUserSettings supportProactiveSuggestion]
  -[MRUserSettings useSystemAudioContextForAirPlayTransport]
  -[MRUserSettings bluetoothDeviceResumeDuration]
  -[MRUserSettings connectToEndpointWhenBeginsPlayback]
  -[MRUserSettings removeLocalDevice]
  -[MRUserSettings verboseHostedExternalDeviceClientLogging]
  -[MRUserSettings forceFadeForEveryHandoff]
  -[MRUserSettings forceEnableCECVolume]
  -[MRUserSettings launchApplicationTimeoutInterval]
  -[MRUserSettings supportRapportRemoteControlTransport]
  -[MRUserSettings localPlaybackState]
  -[MRUserSettings discoverEndpointTimeoutInterval]
  -[MRUserSettings setLastBootUUID:]
  -[MRUserSettings visuallyIdentifyProactiveSuggestion]
  -[MRUserSettings supportNowPlayingPIP]
  -[MRUserSettings lastBootUUID]
  -[MRUserSettings externalDeviceNowPlayingInfoCoalesceDuration]
  -[MRUserSettings updateDefaultSupportedCommandsData:forClient:]
  -[MRUserSettings maximumNumberOfMediaSuggestions]
  -[MRUserSettings supportProximityMigrationV2]
  -[MRUserSettings transactionWaitDurationOnOutOfMemory]
  -[MRUserSettings .cxx_destruct]
  -[MRUserSettings useClusterDevices]
  -[MRUserSettings deviceRecentlyUsedInterval]
  -[MRUserSettings verboseProtocolMessageLogging]
  -[MRUserSettings canHostMultiplayerStream]
  -[MRUserSettings externalDeviceDisconnectWaitDuration]
  -[MRUserSettings setExternalDevicePairingAllowed:]
  -[MRUserSettings supportLockscreenPlatterDisplayForPersonalDevice]
  -[MRUserSettings supportMultiplayerHost]
  -[MRUserSettings activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval]
  -[MRUserSettings connectToAllEndpointsWhenAnyEndpointBeginsPlayback]
  -[MRUserSettings expectedClientAuditTokens]
  -[MRUserSettings useExternalDeviceSystemPairing]
  -[MRUserSettings checkXPCConnectionStatusDefaultInterval]
  -[MRUserSettings shouldInitializeTelevisionBonjourService]
  -[MRUserSettings useGenericTransportForHostedEndpoints]
  -[MRUserSettings setLocalLastPlayingDate:]
  -[MRUserSettings takelockScreenAssertion]
  -[MRUserSettings externalDeviceTimeoutDuration]
  -[MRUserSettings notifyDevicesInHomeThatPlaybackStarted]
  -[MRUserSettings discoverCompanionDevices]
  -[MRUserSettings externalDeviceSleepAssertionOnClientConnectDuration]
  -[MRUserSettings externalDeviceSocketQOSLevel]
  -[MRUserSettings destinationResolverReconRetryIntervals]
  -[MRUserSettings init]
  -[MRUserSettings setHomepodDemoMode:]
  -[MRUserSettings checkXPCConnectionStatusDefaultResponseTimeout]
  -[MRUserSettings lastPlayingDeviceThresholdInterval]
  -[MRUserSettings jsonClientUIDs]
  -[MRUserSettings sendLastPlayingDeviceToHome]
  -[MRUserSettings supportNanoStandalone]
  -[MRUserSettings mediaRecentlyPlayedInterval]
  -[MRUserSettings connectToAllEndpointsWhenInProximityToAnyDevice]
  -[MRUserSettings useDebugAVRouteWithoutVolumeControl]
  -[MRUserSettings broadcastCommandWaitDuration]
  -[MRUserSettings supportRapportRemoteControlConnection]
  -[MRUserSettings forceDeviceInfoDiscovery]
  -[MRUserSettings setPersonalDeviceState:]
  -[MRUserSettings useAPSyncAPI]
  -[MRUserSettings hasExternalDeviceSocketQOSLevelSet]
  -[MRUserSettings remoteControlDiscoveryDenyList]
  -[MRUserSettings verboseHostedDiscoverySessionLogging]
  -[MRUserSettings personalDeviceState]
  -[MRUserSettings computeNowPlayingApplication]
  -[MRUserSettings verboseMRDMediaRemoteClientLogging]
  -[MRUserSettings supportNewMigrationArchitecture]
  -[MRUserSettings airPlayOutputContextInitTimeoutDuration]
  -[MRUserSettings shouldWakeDeviceForRemoteControlCommands]
  -[MRUserSettings homepodDemoMode]
  -[MRUserSettings externalDeviceNowPlayingInfoArtworkCoalesceDuration]
  -[MRUserSettings maxStreamCapacity]
  -[MRUserSettings connectToUserSelectedEndpoint]
  -[MRUserSettings useNoDelayOptionForExternalDeviceSockets]
  -[MRUserSettings defaultSupportedCommandsData]
  -[MRUserSettings shouldInitializeGenericBonjourService]
  -[MRUserSettings supportExpanseMigration]
  -[MRUserSettings remoteDeviceIdleDisconnection]
  -[MRUserSettings defaultSupportedCommandsDataForClient:]
  -[MRUserSettings localLastPlayingDate]
  -[MRUserSettings transactionWaitDurationOnXpcSend]
  -[MRUserSettings supportMigration]
  -[MRUserSettings verboseNowPlayingControllerLogging]
  -[MRUserSettings setExpectedClientAuditTokens:]
  -[MRUserSettings supportNanoLinkAgent]
  -[MRUserSettings setConnectedClientAuditTokens:]
  -[MRUserSettings shouldLogArtwork]
  -[MRUserSettings shouldLogPairingSetupCode]
  -[MRUserSettings supportOutOfProcessMigration]
  -[MRUserSettings remoteControlDiscoveryAllowList]
  -[MRUserSettings supportNewMigrationBehaviorForProximity]
  -[MRUserSettings supportCoordinatedVolume]
  -[MRUserSettings setLocalPlaybackState:]
  -[MRUserSettings maxTransactionMemorySize]
  -[MRUserSettings sendPlaybackSessionUpdateToCompanionCoalesceInterval]
  -[MRUserSettings wakingPlayerPathAssetionDuration]
  -[MRUserSettings supportProximityMigration]
  -[MRUserSettings isMultiplayerAware]
  -[MRUserSettings shouldInitializeRapportService]
  -[MRUserSettings remoteDeviceIdleDisconnectionInterval]
  -[MRUserSettings nowPlayingControllerVersion]
  -[MRUserSettings nowPlayingApplicationTimeout]
  -[MRUserSettings supportLastPlayingDevice]
  -[MRUserSettings queuedCommandsTimeoutInterval]
  -[MRUserSettings externalDeviceDisconnectSleepDuration]
  -[MRUserSettings endpointRecentlyUserSelectedInterval]
  -[MRUserSettings reserveSlotForLocal]
  -[MRUserSettings needNowPlayingForegroundState]
  -[MRUserSettings personalDeviceLockScreenTimeout]
  -[MRUserSettings isExternalDevicePairingAllowed]
  -[MRUserSettings usePeerToPeerExternalDeviceConnections]
  -[MRUserSettings verboseConnectionMonitorLogging]
  -[MRUserSettings transactionWaitDurationOnNetworkSend]


MRPlaybackQueueRequest : NSObject <NSCopying, NSSecureCoding>
 @property  long long location
 @property  BOOL hasLocation
 @property  long long length
 @property  BOOL hasLength
 @property  BOOL hasIncludeMetadata
 @property  BOOL hasArtworkWidth
 @property  BOOL hasArtworkHeight
 @property  BOOL hasIncludeLyrics
 @property  BOOL hasIncludeSections
 @property  BOOL hasIncludeInfo
 @property  BOOL hasIncludeLanguageOptions
 @property  BOOL hasIncludeParticipants
 @property  BOOL returnContentItemAssetsInUserCompletion
 @property  BOOL hasReturnContentItemAssetsInUserCompletion
 @property  NSArray *contentItemIdentifiers
 @property  BOOL legacyNowPlayingInfoRequest
 @property  BOOL hasLegacyNowPlayingInfoRequest
 @property  unsigned int cachingPolicy
 @property  BOOL hasCachingPolicy
 @property  _MRPlaybackQueueRequestProtobuf *protobuf
 @property  MRPlayerPath *playerPath
 @property  BOOL rangeContainsNowPlayingItem
 @property  BOOL shouldRequestItem
 @property  BOOL shouldRequestItemNotConsideringMetadata
 @property  BOOL containsNonDefaultAssets
 @property  MRPlaybackQueueRequest *skeleton
 @property  NSData *data
 @property  BOOL includeMetadata
 @property  BOOL includeLyrics
 @property  BOOL includeSections
 @property  BOOL includeInfo
 @property  BOOL includeLanguageOptions
 @property  BOOL includeParticipants
 @property  double artworkWidth
 @property  double artworkHeight
 @property  NSString *requestIdentifier
 @property  NSString *label
 @property  NSDictionary *dictionaryRepresentation
 @property  {_NSRange=QQ} range
 @property  BOOL hasRange
 @property  BOOL includeArtwork

  // class methods
  +[MRPlaybackQueueRequest defaultArtworkWidth]
  +[MRPlaybackQueueRequest supportsSecureCoding]
  +[MRPlaybackQueueRequest defaultArtwortHeight]
  +[MRPlaybackQueueRequest defaultPlaybackQueueRequest]
  +[MRPlaybackQueueRequest defaultPlaybackQueueRequestWithRange:]
  +[MRPlaybackQueueRequest requestWithCurrentState:range:]

  // instance methods
  -[MRPlaybackQueueRequest setRequestIdentifier:]
  -[MRPlaybackQueueRequest hasLength]
  -[MRPlaybackQueueRequest range]
  -[MRPlaybackQueueRequest requestIdentifier]
  -[MRPlaybackQueueRequest playerPath]
  -[MRPlaybackQueueRequest setHasLength:]
  -[MRPlaybackQueueRequest contentItemIdentifiers]
  -[MRPlaybackQueueRequest hasIncludeParticipants]
  -[MRPlaybackQueueRequest skeleton]
  -[MRPlaybackQueueRequest label]
  -[MRPlaybackQueueRequest hasLegacyNowPlayingInfoRequest]
  -[MRPlaybackQueueRequest initWithIdentifiers:]
  -[MRPlaybackQueueRequest hasIncludeLyrics]
  -[MRPlaybackQueueRequest includeLanguageOptions]
  -[MRPlaybackQueueRequest mergeFrom:]
  -[MRPlaybackQueueRequest initWithCoder:]
  -[MRPlaybackQueueRequest includeLyrics]
  -[MRPlaybackQueueRequest setHasIncludeLanguageOptions:]
  -[MRPlaybackQueueRequest setHasArtworkWidth:]
  -[MRPlaybackQueueRequest initWithIdentifiers:range:]
  -[MRPlaybackQueueRequest cachingPolicy]
  -[MRPlaybackQueueRequest initWithRange:]
  -[MRPlaybackQueueRequest hasReturnContentItemAssetsInUserCompletion]
  -[MRPlaybackQueueRequest hasArtworkHeight]
  -[MRPlaybackQueueRequest setHasReturnContentItemAssetsInUserCompletion:]
  -[MRPlaybackQueueRequest setPlayerPath:]
  -[MRPlaybackQueueRequest .cxx_destruct]
  -[MRPlaybackQueueRequest containsNonDefaultAssets]
  -[MRPlaybackQueueRequest includeSections]
  -[MRPlaybackQueueRequest setHasCachingPolicy:]
  -[MRPlaybackQueueRequest dictionaryRepresentation]
  -[MRPlaybackQueueRequest setLocation:]
  -[MRPlaybackQueueRequest artworkHeight]
  -[MRPlaybackQueueRequest includeParticipants]
  -[MRPlaybackQueueRequest setContentItemIdentifiers:]
  -[MRPlaybackQueueRequest data]
  -[MRPlaybackQueueRequest exactMatch:]
  -[MRPlaybackQueueRequest artworkWidth]
  -[MRPlaybackQueueRequest match:]
  -[MRPlaybackQueueRequest setIncludeMetadata:]
  -[MRPlaybackQueueRequest length]
  -[MRPlaybackQueueRequest hasRange]
  -[MRPlaybackQueueRequest setHasIncludeSections:]
  -[MRPlaybackQueueRequest isEqual:]
  -[MRPlaybackQueueRequest hasLocation]
  -[MRPlaybackQueueRequest setIncludeLyrics:]
  -[MRPlaybackQueueRequest setLength:]
  -[MRPlaybackQueueRequest requestByRemovingArtwork]
  -[MRPlaybackQueueRequest protobuf]
  -[MRPlaybackQueueRequest hasCachingPolicy]
  -[MRPlaybackQueueRequest location]
  -[MRPlaybackQueueRequest setReturnContentItemAssetsInUserCompletion:]
  -[MRPlaybackQueueRequest setHasLocation:]
  -[MRPlaybackQueueRequest setIncludeParticipants:]
  -[MRPlaybackQueueRequest hasArtworkWidth]
  -[MRPlaybackQueueRequest setArtworkWidth:]
  -[MRPlaybackQueueRequest initWithProtobuf:]
  -[MRPlaybackQueueRequest initWithData:]
  -[MRPlaybackQueueRequest rangeContainsNowPlayingItem]
  -[MRPlaybackQueueRequest shouldRequestItem]
  -[MRPlaybackQueueRequest includeMetadata]
  -[MRPlaybackQueueRequest hasIncludeLanguageOptions]
  -[MRPlaybackQueueRequest setHasLegacyNowPlayingInfoRequest:]
  -[MRPlaybackQueueRequest isLegacyNowPlayingInfoRequest]
  -[MRPlaybackQueueRequest hasIncludeMetadata]
  -[MRPlaybackQueueRequest setHasIncludeParticipants:]
  -[MRPlaybackQueueRequest returnContentItemAssetsInUserCompletion]
  -[MRPlaybackQueueRequest setIncludeSections:]
  -[MRPlaybackQueueRequest setIncludeLanguageOptions:]
  -[MRPlaybackQueueRequest setCachingPolicy:]
  -[MRPlaybackQueueRequest setLabel:]
  -[MRPlaybackQueueRequest copyWithZone:]
  -[MRPlaybackQueueRequest shouldRequestItemNotConsideringMetadata]
  -[MRPlaybackQueueRequest hasIncludeSections]
  -[MRPlaybackQueueRequest setLegacyNowPlayingInfoRequest:]
  -[MRPlaybackQueueRequest performRequestForDestination:completion:]
  -[MRPlaybackQueueRequest setArtworkHeight:]
  -[MRPlaybackQueueRequest setIncludeInfo:]
  -[MRPlaybackQueueRequest setHasArtworkHeight:]
  -[MRPlaybackQueueRequest hasIncludeInfo]
  -[MRPlaybackQueueRequest includeArtwork]
  -[MRPlaybackQueueRequest encodeWithCoder:]
  -[MRPlaybackQueueRequest includeInfo]
  -[MRPlaybackQueueRequest setHasIncludeInfo:]
  -[MRPlaybackQueueRequest initFromTransactionName:]
  -[MRPlaybackQueueRequest setHasIncludeLyrics:]
  -[MRPlaybackQueueRequest setHasIncludeMetadata:]


_MRAVAirPlaySecuritySettingsProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAVAirPlaySecuritySettingsProtobuf .cxx_destruct]
  -[_MRAVAirPlaySecuritySettingsProtobuf dictionaryRepresentation]
  -[_MRAVAirPlaySecuritySettingsProtobuf writeTo:]
  -[_MRAVAirPlaySecuritySettingsProtobuf isEqual:]
  -[_MRAVAirPlaySecuritySettingsProtobuf readFrom:]
  -[_MRAVAirPlaySecuritySettingsProtobuf copyWithZone:]


_MRGameControllerPropertiesProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGameControllerPropertiesProtobuf .cxx_destruct]
  -[_MRGameControllerPropertiesProtobuf dictionaryRepresentation]
  -[_MRGameControllerPropertiesProtobuf writeTo:]
  -[_MRGameControllerPropertiesProtobuf isEqual:]
  -[_MRGameControllerPropertiesProtobuf readFrom:]
  -[_MRGameControllerPropertiesProtobuf copyWithZone:]


MRCommandResult : NSObject <NSCopying>
 @property  NSArray *resultStatuses
 @property  unsigned int sendError
 @property  NSError *error
 @property  NSString *sendErrorDescription
 @property  MRPlayerPath *playerPath
 @property  NSArray *handlerReturnStatuses

  // class methods
  +[MRCommandResult commandResultWithSendError:]

  // instance methods
  -[MRCommandResult playerPath]
  -[MRCommandResult sendError]
  -[MRCommandResult setPlayerPath:]
  -[MRCommandResult setSendError:]
  -[MRCommandResult .cxx_destruct]
  -[MRCommandResult resultStatuses]
  -[MRCommandResult data]
  -[MRCommandResult copyWithPlayerPath:]
  -[MRCommandResult initWithWithSendError:description:]
  -[MRCommandResult protobuf]
  -[MRCommandResult initWithProtobuf:]
  -[MRCommandResult initWithData:]
  -[MRCommandResult setSendErrorDescription:]
  -[MRCommandResult setResultStatuses:]
  -[MRCommandResult sendErrorDescription]
  -[MRCommandResult copyWithZone:]
  -[MRCommandResult handlerReturnStatuses]
  -[MRCommandResult initWithHandlerStatuses:sendError:]
  -[MRCommandResult setError:]
  -[MRCommandResult error]
  -[MRCommandResult initWithResultStatuses:sendError:playerPath:]


MRContentItemRequest : NSObject <NSSecureCoding>
 @property  MRContentItem *item
 @property  MRPlaybackQueueRequest *request

  // class methods
  +[MRContentItemRequest supportsSecureCoding]

  // instance methods
  -[MRContentItemRequest setItem:]
  -[MRContentItemRequest setRequest:]
  -[MRContentItemRequest initWithCoder:]
  -[MRContentItemRequest .cxx_destruct]
  -[MRContentItemRequest item]
  -[MRContentItemRequest request]
  -[MRContentItemRequest initWithItem:request:]
  -[MRContentItemRequest encodeWithCoder:]


_MRSendPackedVirtualTouchEventMessageProtobuf : PBCodable <NSCopying>
 @property  BOOL hasData
 @property  NSData *data

  // instance methods
  -[_MRSendPackedVirtualTouchEventMessageProtobuf hasData]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf .cxx_destruct]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf dictionaryRepresentation]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf writeTo:]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf data]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf isEqual:]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf readFrom:]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf setData:]
  -[_MRSendPackedVirtualTouchEventMessageProtobuf copyWithZone:]


_MRAudioStreamPacketDescriptionProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioStreamPacketDescriptionProtobuf dictionaryRepresentation]
  -[_MRAudioStreamPacketDescriptionProtobuf writeTo:]
  -[_MRAudioStreamPacketDescriptionProtobuf isEqual:]
  -[_MRAudioStreamPacketDescriptionProtobuf readFrom:]
  -[_MRAudioStreamPacketDescriptionProtobuf copyWithZone:]


MRExternalDeviceController : NSObject <NSNetServiceBrowserDelegate, NSNetServiceDelegate>
 @property  <MRExternalDeviceControllerDelegate> *delegate
 @property  NSString *bonjourServiceType
 @property  BOOL discovering
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRExternalDeviceController externalDeviceClass]

  // instance methods
  -[MRExternalDeviceController isDiscovering]
  -[MRExternalDeviceController netService:didUpdateTXTRecordData:]
  -[MRExternalDeviceController .cxx_destruct]
  -[MRExternalDeviceController netServiceBrowser:didFindService:moreComing:]
  -[MRExternalDeviceController netServiceDidResolveAddress:]
  -[MRExternalDeviceController setDelegate:]
  -[MRExternalDeviceController endDiscovery]
  -[MRExternalDeviceController beginDiscovery]
  -[MRExternalDeviceController netServiceBrowser:didRemoveService:moreComing:]
  -[MRExternalDeviceController _isManagedConfigIDAllowed:]
  -[MRExternalDeviceController initWithBonjourServiceType:]
  -[MRExternalDeviceController bonjourServiceType]
  -[MRExternalDeviceController delegate]
  -[MRExternalDeviceController dealloc]


_MRPlaybackSessionMigrateRequestMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionMigrateRequestMessageProtobuf .cxx_destruct]
  -[_MRPlaybackSessionMigrateRequestMessageProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionMigrateRequestMessageProtobuf writeTo:]
  -[_MRPlaybackSessionMigrateRequestMessageProtobuf isEqual:]
  -[_MRPlaybackSessionMigrateRequestMessageProtobuf readFrom:]
  -[_MRPlaybackSessionMigrateRequestMessageProtobuf copyWithZone:]


MRExternalDeviceTransport : NSObject
 @property  MRDeviceInfo *deviceInfo
 @property  NSString *uid
 @property  NSString *name
 @property  NSString *hostname
 @property  long long port
 @property  BOOL requiresCustomPairing
 @property  BOOL shouldUseSystemAuthenticationPrompt
 @property  NSError *error
 @property  long long connectionType
 @property  BOOL isValid

  // instance methods
  -[MRExternalDeviceTransport hostname]
  -[MRExternalDeviceTransport connectionType]
  -[MRExternalDeviceTransport deviceInfo]
  -[MRExternalDeviceTransport uid]
  -[MRExternalDeviceTransport name]
  -[MRExternalDeviceTransport port]
  -[MRExternalDeviceTransport isValid]
  -[MRExternalDeviceTransport shouldUseSystemAuthenticationPrompt]
  -[MRExternalDeviceTransport setShouldUseSystemAuthenticationPrompt:]
  -[MRExternalDeviceTransport createConnectionWithUserInfo:]
  -[MRExternalDeviceTransport .cxx_destruct]
  -[MRExternalDeviceTransport resetWithError:]
  -[MRExternalDeviceTransport requiresCustomPairing]
  -[MRExternalDeviceTransport error]


_MRPreloadedPlaybackSessionInfo : PBCodable <NSCopying>
  // instance methods
  -[_MRPreloadedPlaybackSessionInfo .cxx_destruct]
  -[_MRPreloadedPlaybackSessionInfo dictionaryRepresentation]
  -[_MRPreloadedPlaybackSessionInfo writeTo:]
  -[_MRPreloadedPlaybackSessionInfo isEqual:]
  -[_MRPreloadedPlaybackSessionInfo readFrom:]
  -[_MRPreloadedPlaybackSessionInfo copyWithZone:]


_MRRegisterHIDDeviceResultMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRegisterHIDDeviceResultMessageProtobuf dictionaryRepresentation]
  -[_MRRegisterHIDDeviceResultMessageProtobuf writeTo:]
  -[_MRRegisterHIDDeviceResultMessageProtobuf isEqual:]
  -[_MRRegisterHIDDeviceResultMessageProtobuf readFrom:]
  -[_MRRegisterHIDDeviceResultMessageProtobuf copyWithZone:]


MRNotificationServiceClient : NSObject
  // instance methods
  -[MRNotificationServiceClient _handleDeviceInfoDidChangeNotification:]
  -[MRNotificationServiceClient _handlePlayerNowPlayingInfoDidChangeNotification:]
  -[MRNotificationServiceClient _handleActivePlayerDidChangeNotification:]
  -[MRNotificationServiceClient _processActiveApplicationInvalidationHandlersForNotification:]
  -[MRNotificationServiceClient .cxx_destruct]
  -[MRNotificationServiceClient _handleApplicationDidRegisterNotification:]
  -[MRNotificationServiceClient _handlePlayerStateDidChangeNotification:]
  -[MRNotificationServiceClient _handleVolumeControlCapabilitiesDidChangeNotification:]
  -[MRNotificationServiceClient _handleActiveApplicationDidChangeNotification:]
  -[MRNotificationServiceClient _handlePlayerContentItemsDidChangeNotification:]
  -[MRNotificationServiceClient _shouldPostNotifications]
  -[MRNotificationServiceClient _handleApplicationDidForegroundNotification:]
  -[MRNotificationServiceClient _notificationFired:clientNotification:originNotification:nowPlayingNotification:]
  -[MRNotificationServiceClient _processPlayerInvalidationHandlersForNotification:]
  -[MRNotificationServiceClient _handleApplicationDidUnregisterNotification:]
  -[MRNotificationServiceClient _processNeedsNonPlayerPathBasedNotificationsForBackwardCompatabilitySupport]
  -[MRNotificationServiceClient _processActivePlayerInvalidationHandlersForNotification:]
  -[MRNotificationServiceClient _handleApplicationDisplayNameDidChangeNotification:]
  -[MRNotificationServiceClient _handlePlayerContentItemArtworkDidChangeNotification:]
  -[MRNotificationServiceClient _processOriginInvalidationHandlersForNotification:]
  -[MRNotificationServiceClient _processActiveOriginInvalidationHandlersForNotification:]
  -[MRNotificationServiceClient _handleActiveOriginDidChangeNotification:]
  -[MRNotificationServiceClient _processApplicationInvalidationHandlersForNotification:]
  -[MRNotificationServiceClient _handleActiveSystemEndpointDidChangeNotification:]
  -[MRNotificationServiceClient _notificationFired:playerPathNotifcation:originNotification:nowPlayingNotification:]
  -[MRNotificationServiceClient _postDefaultPlayerNotificationsWithUserInfo:object:]
  -[MRNotificationServiceClient _handlePlayerPlaybackQueueDidChangeNotification:]
  -[MRNotificationServiceClient _postDefaultAppilicationNotifications:]
  -[MRNotificationServiceClient _handleOriginDidRegisterNotification:]
  -[MRNotificationServiceClient _handlePlayerDidUnregisterNotification:]
  -[MRNotificationServiceClient _handlePlayerDidRegisterNotification:]
  -[MRNotificationServiceClient _handleVolumeDidChangeNotification:]
  -[MRNotificationServiceClient registerCallbacks]
  -[MRNotificationServiceClient initWithServiceClient:]
  -[MRNotificationServiceClient _handleApplicationClientStateDidChangeNotification:]
  -[MRNotificationServiceClient _handleOriginDidUnregisterNotification:]
  -[MRNotificationServiceClient _postDefaultOriginNotifications:]
  -[MRNotificationServiceClient _handlePlayerPlaybackStateDidChangeNotification:]
  -[MRNotificationServiceClient _handlePlayerIsPlayingDidChangeNotification:]
  -[MRNotificationServiceClient _notificationFired:originNotification:nowPlayingNotification:]
  -[MRNotificationServiceClient _handlePlayerSupportedCommandsDidChangeNotification:]


_MRPlaybackSessionMigrateEndMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionMigrateEndMessageProtobuf .cxx_destruct]
  -[_MRPlaybackSessionMigrateEndMessageProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionMigrateEndMessageProtobuf writeTo:]
  -[_MRPlaybackSessionMigrateEndMessageProtobuf isEqual:]
  -[_MRPlaybackSessionMigrateEndMessageProtobuf readFrom:]
  -[_MRPlaybackSessionMigrateEndMessageProtobuf copyWithZone:]


_MRSetListeningModeMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetListeningModeMessageProtobuf .cxx_destruct]
  -[_MRSetListeningModeMessageProtobuf dictionaryRepresentation]
  -[_MRSetListeningModeMessageProtobuf writeTo:]
  -[_MRSetListeningModeMessageProtobuf isEqual:]
  -[_MRSetListeningModeMessageProtobuf readFrom:]
  -[_MRSetListeningModeMessageProtobuf copyWithZone:]


_MRCreateHostedEndpointRequestProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRCreateHostedEndpointRequestProtobuf .cxx_destruct]
  -[_MRCreateHostedEndpointRequestProtobuf dictionaryRepresentation]
  -[_MRCreateHostedEndpointRequestProtobuf writeTo:]
  -[_MRCreateHostedEndpointRequestProtobuf isEqual:]
  -[_MRCreateHostedEndpointRequestProtobuf readFrom:]
  -[_MRCreateHostedEndpointRequestProtobuf copyWithZone:]


_MRUpdatePlayerMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdatePlayerMessageProtobuf .cxx_destruct]
  -[_MRUpdatePlayerMessageProtobuf dictionaryRepresentation]
  -[_MRUpdatePlayerMessageProtobuf writeTo:]
  -[_MRUpdatePlayerMessageProtobuf isEqual:]
  -[_MRUpdatePlayerMessageProtobuf readFrom:]
  -[_MRUpdatePlayerMessageProtobuf copyWithZone:]


_MRGameControllerAccelerationProtobuf : PBCodable <NSCopying>
 @property  BOOL hasData
 @property  NSData *data

  // instance methods
  -[_MRGameControllerAccelerationProtobuf hasData]
  -[_MRGameControllerAccelerationProtobuf .cxx_destruct]
  -[_MRGameControllerAccelerationProtobuf dictionaryRepresentation]
  -[_MRGameControllerAccelerationProtobuf writeTo:]
  -[_MRGameControllerAccelerationProtobuf data]
  -[_MRGameControllerAccelerationProtobuf isEqual:]
  -[_MRGameControllerAccelerationProtobuf readFrom:]
  -[_MRGameControllerAccelerationProtobuf setData:]
  -[_MRGameControllerAccelerationProtobuf copyWithZone:]


_MRVolumeDidChangeMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVolumeDidChangeMessageProtobuf .cxx_destruct]
  -[_MRVolumeDidChangeMessageProtobuf dictionaryRepresentation]
  -[_MRVolumeDidChangeMessageProtobuf writeTo:]
  -[_MRVolumeDidChangeMessageProtobuf isEqual:]
  -[_MRVolumeDidChangeMessageProtobuf readFrom:]
  -[_MRVolumeDidChangeMessageProtobuf copyWithZone:]


_MRPlaybackSessionResponseMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionResponseMessageProtobuf .cxx_destruct]
  -[_MRPlaybackSessionResponseMessageProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionResponseMessageProtobuf writeTo:]
  -[_MRPlaybackSessionResponseMessageProtobuf isEqual:]
  -[_MRPlaybackSessionResponseMessageProtobuf readFrom:]
  -[_MRPlaybackSessionResponseMessageProtobuf copyWithZone:]


_MRTelevisionControllerBlockCallback : NSObject
 @property  @? callbackBlock
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[_MRTelevisionControllerBlockCallback .cxx_destruct]
  -[_MRTelevisionControllerBlockCallback initWithCallbackBlock:queue:]
  -[_MRTelevisionControllerBlockCallback queue]
  -[_MRTelevisionControllerBlockCallback callbackBlock]


MRTelevisionController : MRExternalDeviceController <MRExternalDeviceControllerDelegate>
 @property  _MRTelevisionControllerBlockCallback *discoveryCallback
 @property  _MRTelevisionControllerBlockCallback *removalCallback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRTelevisionController externalDeviceClass]

  // instance methods
  -[MRTelevisionController .cxx_destruct]
  -[MRTelevisionController init]
  -[MRTelevisionController externalDeviceController:didRemoveDevice:]
  -[MRTelevisionController externalDeviceController:didDiscoverDevice:]
  -[MRTelevisionController discoveryCallback]
  -[MRTelevisionController setDiscoveryCallback:]
  -[MRTelevisionController removalCallback]
  -[MRTelevisionController setRemovalCallback:]


_MRErrorProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRErrorProtobuf .cxx_destruct]
  -[_MRErrorProtobuf dictionaryRepresentation]
  -[_MRErrorProtobuf writeTo:]
  -[_MRErrorProtobuf isEqual:]
  -[_MRErrorProtobuf readFrom:]
  -[_MRErrorProtobuf copyWithZone:]


MRCommandInfo : NSObject
 @property  _MRCommandInfoProtobuf *protobuf
 @property  unsigned int command
 @property  BOOL enabled
 @property  NSDictionary *options
 @property  NSData *data
 @property  NSData *propertyListData
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[MRCommandInfo commandInfosFromData:]
  +[MRCommandInfo dataFromCommandInfos:]
  +[MRCommandInfo isCommandActuallySupportedEvenWhenDisabled:]

  // instance methods
  -[MRCommandInfo initWithPropertyListData:]
  -[MRCommandInfo setCommand:]
  -[MRCommandInfo options]
  -[MRCommandInfo setOptions:]
  -[MRCommandInfo .cxx_destruct]
  -[MRCommandInfo dictionaryRepresentation]
  -[MRCommandInfo command]
  -[MRCommandInfo data]
  -[MRCommandInfo isEqual:]
  -[MRCommandInfo protobuf]
  -[MRCommandInfo initWithProtobuf:]
  -[MRCommandInfo isEnabled]
  -[MRCommandInfo initWithData:]
  -[MRCommandInfo propertyListData]
  -[MRCommandInfo setEnabled:]


_MRConfigureConnectionMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRConfigureConnectionMessageProtobuf .cxx_destruct]
  -[_MRConfigureConnectionMessageProtobuf dictionaryRepresentation]
  -[_MRConfigureConnectionMessageProtobuf writeTo:]
  -[_MRConfigureConnectionMessageProtobuf isEqual:]
  -[_MRConfigureConnectionMessageProtobuf readFrom:]
  -[_MRConfigureConnectionMessageProtobuf copyWithZone:]


_MRSetReadyStateMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetReadyStateMessageProtobuf dictionaryRepresentation]
  -[_MRSetReadyStateMessageProtobuf writeTo:]
  -[_MRSetReadyStateMessageProtobuf isEqual:]
  -[_MRSetReadyStateMessageProtobuf readFrom:]
  -[_MRSetReadyStateMessageProtobuf copyWithZone:]


_MRPlaybackSessionMigrateResponseMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionMigrateResponseMessageProtobuf .cxx_destruct]
  -[_MRPlaybackSessionMigrateResponseMessageProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionMigrateResponseMessageProtobuf writeTo:]
  -[_MRPlaybackSessionMigrateResponseMessageProtobuf isEqual:]
  -[_MRPlaybackSessionMigrateResponseMessageProtobuf readFrom:]
  -[_MRPlaybackSessionMigrateResponseMessageProtobuf copyWithZone:]


MRIDSTransportConnection : MRExternalDeviceTransportConnection <NSStreamDelegate>
 @property  NSString *type
 @property  NSString *destination
 @property  NSString *session
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRIDSTransportConnection setRunLoop:]
  -[MRIDSTransportConnection runLoop]
  -[MRIDSTransportConnection closeWithError:]
  -[MRIDSTransportConnection isValid]
  -[MRIDSTransportConnection .cxx_destruct]
  -[MRIDSTransportConnection destination]
  -[MRIDSTransportConnection exportEndpoint:]
  -[MRIDSTransportConnection initWithConnection:type:destination:session:]
  -[MRIDSTransportConnection _idsPriorityFromPriority:]
  -[MRIDSTransportConnection sendTransportData:options:]
  -[MRIDSTransportConnection exportOutputDevice:endpoint:]
  -[MRIDSTransportConnection type]
  -[MRIDSTransportConnection dealloc]
  -[MRIDSTransportConnection ingestData:]
  -[MRIDSTransportConnection _exportDescriptorForOutputDevice:endpoint:remoteControl:]
  -[MRIDSTransportConnection session]
  -[MRIDSTransportConnection error]


_MRRemoteTextInputMessageProtobuf : PBCodable <NSCopying>
 @property  BOOL hasData
 @property  NSData *data

  // instance methods
  -[_MRRemoteTextInputMessageProtobuf hasData]
  -[_MRRemoteTextInputMessageProtobuf .cxx_destruct]
  -[_MRRemoteTextInputMessageProtobuf dictionaryRepresentation]
  -[_MRRemoteTextInputMessageProtobuf writeTo:]
  -[_MRRemoteTextInputMessageProtobuf data]
  -[_MRRemoteTextInputMessageProtobuf isEqual:]
  -[_MRRemoteTextInputMessageProtobuf readFrom:]
  -[_MRRemoteTextInputMessageProtobuf setData:]
  -[_MRRemoteTextInputMessageProtobuf copyWithZone:]


MRAVRoutingDiscoverySessionConfiguration : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL populatesExternalDevice
 @property  NSString *outputDeviceUID
 @property  _MRDiscoverySessionConfigurationProtobuf *protobuf
 @property  unsigned int features
 @property  NSString *routingContextUID
 @property  BOOL enableThrottling
 @property  BOOL alwaysAllowUpdates
 @property  unsigned int targetAudioSessionID

  // class methods
  +[MRAVRoutingDiscoverySessionConfiguration supportsSecureCoding]
  +[MRAVRoutingDiscoverySessionConfiguration configurationWithEndpointFeatures:]

  // instance methods
  -[MRAVRoutingDiscoverySessionConfiguration targetAudioSessionID]
  -[MRAVRoutingDiscoverySessionConfiguration setTargetAudioSessionID:]
  -[MRAVRoutingDiscoverySessionConfiguration features]
  -[MRAVRoutingDiscoverySessionConfiguration setOutputDeviceUID:]
  -[MRAVRoutingDiscoverySessionConfiguration initWithCoder:]
  -[MRAVRoutingDiscoverySessionConfiguration enableThrottling]
  -[MRAVRoutingDiscoverySessionConfiguration setRoutingContextUID:]
  -[MRAVRoutingDiscoverySessionConfiguration .cxx_destruct]
  -[MRAVRoutingDiscoverySessionConfiguration outputDeviceUID]
  -[MRAVRoutingDiscoverySessionConfiguration routingContextUID]
  -[MRAVRoutingDiscoverySessionConfiguration setPopulatesExternalDevice:]
  -[MRAVRoutingDiscoverySessionConfiguration initWithEndpointFeatures:]
  -[MRAVRoutingDiscoverySessionConfiguration isEqual:]
  -[MRAVRoutingDiscoverySessionConfiguration populatesExternalDevice]
  -[MRAVRoutingDiscoverySessionConfiguration setAlwaysAllowUpdates:]
  -[MRAVRoutingDiscoverySessionConfiguration protobuf]
  -[MRAVRoutingDiscoverySessionConfiguration initWithProtobuf:]
  -[MRAVRoutingDiscoverySessionConfiguration alwaysAllowUpdates]
  -[MRAVRoutingDiscoverySessionConfiguration setEnableThrottling:]
  -[MRAVRoutingDiscoverySessionConfiguration copyWithZone:]
  -[MRAVRoutingDiscoverySessionConfiguration encodeWithCoder:]


MRAVRoutingDiscoverySession : NSObject
 @property  NSMutableDictionary *endpointsChangedCallbacks
 @property  NSMutableDictionary *endpointsAddedCallbacks
 @property  NSMutableDictionary *endpointsRemovedCallbacks
 @property  NSMutableDictionary *endpointsModifiedCallbacks
 @property  NSMutableDictionary *outputDevicesChangedCallbacks
 @property  NSMutableDictionary *outputDevicesAddedCallbacks
 @property  NSMutableDictionary *outputDevicesRemovedCallbacks
 @property  NSMutableDictionary *outputDevicesModifiedCallbacks
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSObject<OS_dispatch_queue> *calloutQueue
 @property  NSMapTable *clientDiscoveryStates
 @property  NSArray *endpoints
 @property  NSArray *outputDevices
 @property  BOOL populatesExternalDevice
 @property  unsigned int endpointFeatures
 @property  BOOL devicePresenceDetected
 @property  NSArray *availableEndpoints
 @property  NSArray *availableOutputDevices
 @property  unsigned int discoveryMode
 @property  BOOL alwaysAllowUpdates
 @property  unsigned int targetAudioSessionID
 @property  NSString *routingContextUID
 @property  MRAVOutputDevice *unclusteredLocalOutputDevice
 @property  NSArray *unclusteredOutputDevices

  // class methods
  +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:enableThrottling:]
  +[MRAVRoutingDiscoverySession discoverySessionWithConfiguration:]
  +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:]
  +[MRAVRoutingDiscoverySession sharedDiscoverySessionForClass:configuration:]

  // instance methods
  -[MRAVRoutingDiscoverySession clientDiscoveryStates]
  -[MRAVRoutingDiscoverySession outputDevicesModifiedCallbacks]
  -[MRAVRoutingDiscoverySession removeOutputDevicesModifiedCallback:]
  -[MRAVRoutingDiscoverySession logOutputDevicesChanged:oldOutputDevices:]
  -[MRAVRoutingDiscoverySession setEndpoints:]
  -[MRAVRoutingDiscoverySession removeEndpointsAddedCallback:]
  -[MRAVRoutingDiscoverySession endpoints]
  -[MRAVRoutingDiscoverySession endpointsAddedCallbacks]
  -[MRAVRoutingDiscoverySession calloutQueue]
  -[MRAVRoutingDiscoverySession logEndpointsChanged:oldEndpoints:]
  -[MRAVRoutingDiscoverySession setEndpointsRemovedCallbacks:]
  -[MRAVRoutingDiscoverySession setOutputDevicesRemovedCallbacks:]
  -[MRAVRoutingDiscoverySession initWithFeatures:]
  -[MRAVRoutingDiscoverySession removeEndpointsChangedCallback:]
  -[MRAVRoutingDiscoverySession endpointsModifiedCallbacks]
  -[MRAVRoutingDiscoverySession addOutputDevicesRemovedCallback:]
  -[MRAVRoutingDiscoverySession .cxx_destruct]
  -[MRAVRoutingDiscoverySession setOutputDevicesModifiedCallbacks:]
  -[MRAVRoutingDiscoverySession setEndpointsModifiedCallbacks:]
  -[MRAVRoutingDiscoverySession setOutputDevicesChangedCallbacks:]
  -[MRAVRoutingDiscoverySession setEndpointsAddedCallbacks:]
  -[MRAVRoutingDiscoverySession notifyEndpointsChanged:]
  -[MRAVRoutingDiscoverySession removeEndpointsRemovedCallback:]
  -[MRAVRoutingDiscoverySession removeEndpointsModifiedCallback:]
  -[MRAVRoutingDiscoverySession unclusteredLocalOutputDevice]
  -[MRAVRoutingDiscoverySession addEndpointsChangedCallback:]
  -[MRAVRoutingDiscoverySession addEndpointsAddedCallback:]
  -[MRAVRoutingDiscoverySession outputDevicesAddedCallbacks]
  -[MRAVRoutingDiscoverySession addOutputDevicesAddedCallback:]
  -[MRAVRoutingDiscoverySession addEndpointsRemovedCallback:]
  -[MRAVRoutingDiscoverySession setEndpointsChangedCallbacks:]
  -[MRAVRoutingDiscoverySession setPopulatesExternalDevice:]
  -[MRAVRoutingDiscoverySession notifyOutputDevicesChanged:]
  -[MRAVRoutingDiscoverySession removeOutputDevicesRemovedCallback:]
  -[MRAVRoutingDiscoverySession serialQueue]
  -[MRAVRoutingDiscoverySession removeOutputDevicesChangedCallback:]
  -[MRAVRoutingDiscoverySession endpointsChangedCallbacks]
  -[MRAVRoutingDiscoverySession endpointsRemovedCallbacks]
  -[MRAVRoutingDiscoverySession outputDevicesRemovedCallbacks]
  -[MRAVRoutingDiscoverySession setOutputDevices:]
  -[MRAVRoutingDiscoverySession populatesExternalDevice]
  -[MRAVRoutingDiscoverySession outputDevices]
  -[MRAVRoutingDiscoverySession addOutputDevicesModifiedCallback:]
  -[MRAVRoutingDiscoverySession unclusteredOutputDevices]
  -[MRAVRoutingDiscoverySession outputDevicesChangedCallbacks]
  -[MRAVRoutingDiscoverySession setAlwaysAllowUpdates:]
  -[MRAVRoutingDiscoverySession addEndpointsModifiedCallback:]
  -[MRAVRoutingDiscoverySession setOutputDevicesAddedCallbacks:]
  -[MRAVRoutingDiscoverySession addOutputDevicesChangedCallback:]
  -[MRAVRoutingDiscoverySession setClientDiscoveryStates:]
  -[MRAVRoutingDiscoverySession removeOutputDevicesAddedCallback:]
  -[MRAVRoutingDiscoverySession initWithConfiguration:]
  -[MRAVRoutingDiscoverySession alwaysAllowUpdates]


_MRAudioRouteProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioRouteProtobuf .cxx_destruct]
  -[_MRAudioRouteProtobuf dictionaryRepresentation]
  -[_MRAudioRouteProtobuf writeTo:]
  -[_MRAudioRouteProtobuf isEqual:]
  -[_MRAudioRouteProtobuf readFrom:]
  -[_MRAudioRouteProtobuf copyWithZone:]


_MRSendCommandResultStatusProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendCommandResultStatusProtobuf .cxx_destruct]
  -[_MRSendCommandResultStatusProtobuf dictionaryRepresentation]
  -[_MRSendCommandResultStatusProtobuf writeTo:]
  -[_MRSendCommandResultStatusProtobuf isEqual:]
  -[_MRSendCommandResultStatusProtobuf readFrom:]
  -[_MRSendCommandResultStatusProtobuf copyWithZone:]


MRCompositeMessage : MRProtocolMessage
 @property  NSArray *messages

  // instance methods
  -[MRCompositeMessage setTransportOptions:]
  -[MRCompositeMessage .cxx_destruct]
  -[MRCompositeMessage init]
  -[MRCompositeMessage addMessage:]
  -[MRCompositeMessage messages]
  -[MRCompositeMessage transportOptions]


_MRTransactionPacketProtobuf : PBCodable <NSCopying>
  // class methods
  +[_MRTransactionPacketProtobuf initialize]

  // instance methods
  -[_MRTransactionPacketProtobuf customDictionaryRepresentation]
  -[_MRTransactionPacketProtobuf .cxx_destruct]
  -[_MRTransactionPacketProtobuf dictionaryRepresentation]
  -[_MRTransactionPacketProtobuf writeTo:]
  -[_MRTransactionPacketProtobuf isEqual:]
  -[_MRTransactionPacketProtobuf readFrom:]
  -[_MRTransactionPacketProtobuf copyWithZone:]


_MRPlaybackQueueContextProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackQueueContextProtobuf .cxx_destruct]
  -[_MRPlaybackQueueContextProtobuf dictionaryRepresentation]
  -[_MRPlaybackQueueContextProtobuf writeTo:]
  -[_MRPlaybackQueueContextProtobuf isEqual:]
  -[_MRPlaybackQueueContextProtobuf readFrom:]
  -[_MRPlaybackQueueContextProtobuf copyWithZone:]


MRSharedSettings : NSObject
 @property  BOOL multiplayerAware
 @property  BOOL multiplayerHost
 @property  BOOL canHostMultiplayerStream
 @property  BOOL supportNowPlayingSessionDataSource

  // class methods
  +[MRSharedSettings currentSettings]

  // instance methods
  -[MRSharedSettings canHostMultiplayerStream]
  -[MRSharedSettings isMultiplayerHost]
  -[MRSharedSettings supportNowPlayingSessionDataSource]
  -[MRSharedSettings isMultiplayerAware]


_MRSendCommandResultHandlerDialogProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendCommandResultHandlerDialogProtobuf .cxx_destruct]
  -[_MRSendCommandResultHandlerDialogProtobuf dictionaryRepresentation]
  -[_MRSendCommandResultHandlerDialogProtobuf writeTo:]
  -[_MRSendCommandResultHandlerDialogProtobuf isEqual:]
  -[_MRSendCommandResultHandlerDialogProtobuf readFrom:]
  -[_MRSendCommandResultHandlerDialogProtobuf copyWithZone:]


_MRGetVolumeControlCapabilitiesResultMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetVolumeControlCapabilitiesResultMessageProtobuf .cxx_destruct]
  -[_MRGetVolumeControlCapabilitiesResultMessageProtobuf dictionaryRepresentation]
  -[_MRGetVolumeControlCapabilitiesResultMessageProtobuf writeTo:]
  -[_MRGetVolumeControlCapabilitiesResultMessageProtobuf isEqual:]
  -[_MRGetVolumeControlCapabilitiesResultMessageProtobuf readFrom:]
  -[_MRGetVolumeControlCapabilitiesResultMessageProtobuf copyWithZone:]


_MRSetConnectionStateMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetConnectionStateMessageProtobuf dictionaryRepresentation]
  -[_MRSetConnectionStateMessageProtobuf writeTo:]
  -[_MRSetConnectionStateMessageProtobuf isEqual:]
  -[_MRSetConnectionStateMessageProtobuf readFrom:]
  -[_MRSetConnectionStateMessageProtobuf copyWithZone:]


_MRGetRemoteTextInputSessionProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetRemoteTextInputSessionProtobuf dictionaryRepresentation]
  -[_MRGetRemoteTextInputSessionProtobuf writeTo:]
  -[_MRGetRemoteTextInputSessionProtobuf isEqual:]
  -[_MRGetRemoteTextInputSessionProtobuf readFrom:]
  -[_MRGetRemoteTextInputSessionProtobuf copyWithZone:]


MRAVRoutingClientController : NSObject
 @property  MRMediaRemoteService *mediaRemoteService

  // instance methods
  -[MRAVRoutingClientController .cxx_destruct]
  -[MRAVRoutingClientController init]
  -[MRAVRoutingClientController mediaRemoteService]
  -[MRAVRoutingClientController _pickableRoutesDidChangeNotification:]
  -[MRAVRoutingClientController fetchPickableRoutesForCategory:completion:]
  -[MRAVRoutingClientController dealloc]
  -[MRAVRoutingClientController initWithMediaRemoteService:]


_MRAudioFormatSettingsProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioFormatSettingsProtobuf .cxx_destruct]
  -[_MRAudioFormatSettingsProtobuf dictionaryRepresentation]
  -[_MRAudioFormatSettingsProtobuf writeTo:]
  -[_MRAudioFormatSettingsProtobuf isEqual:]
  -[_MRAudioFormatSettingsProtobuf readFrom:]
  -[_MRAudioFormatSettingsProtobuf copyWithZone:]


MRIDSDiscoverySession : MRAVRoutingDiscoverySession <MRProtocolClientConnectionDelegate>
 @property  MRProtocolClientConnection *discoveryChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRIDSDiscoverySession availableOutputDevices]
  -[MRIDSDiscoverySession setDiscoveryChannel:]
  -[MRIDSDiscoverySession devicePresenceDetected]
  -[MRIDSDiscoverySession discoveryChannel]
  -[MRIDSDiscoverySession .cxx_destruct]
  -[MRIDSDiscoverySession discoveryMode]
  -[MRIDSDiscoverySession endpointFeatures]
  -[MRIDSDiscoverySession _handleCompanionDeviceDidConnectNotification:]
  -[MRIDSDiscoverySession _onIDSQueue_connectDiscoveryChannel:]
  -[MRIDSDiscoverySession setDiscoveryMode:]
  -[MRIDSDiscoverySession initWithConfiguration:]
  -[MRIDSDiscoverySession _handleCompanionDeviceDisconnectedNotification:]
  -[MRIDSDiscoverySession handleUpdateOutputDevicesMessage:forClient:]
  -[MRIDSDiscoverySession _onIDSQueue_initializeDiscoveryChannel]
  -[MRIDSDiscoverySession _onIDSQueue_disconnectDiscoveryChannel:]
  -[MRIDSDiscoverySession clientConnection:didReceiveMessage:]
  -[MRIDSDiscoverySession _syncClientStateToConnection:]


_MRCommandOptionsProtobuf : PBCodable <NSCopying>
 @property  BOOL hasSourceID
 @property  NSString *sourceID
 @property  BOOL hasMediaType
 @property  NSString *mediaType
 @property  BOOL hasExternalPlayerCommand
 @property  BOOL externalPlayerCommand
 @property  BOOL hasSkipInterval
 @property  float skipInterval
 @property  BOOL hasPlaybackRate
 @property  float playbackRate
 @property  BOOL hasRating
 @property  float rating
 @property  BOOL hasNegative
 @property  BOOL negative
 @property  BOOL hasPlaybackPosition
 @property  double playbackPosition
 @property  BOOL hasRepeatMode
 @property  int repeatMode
 @property  BOOL hasShuffleMode
 @property  int shuffleMode
 @property  BOOL hasContextID
 @property  NSString *contextID
 @property  BOOL hasTrackID
 @property  unsigned long trackID
 @property  BOOL hasRadioStationID
 @property  long long radioStationID
 @property  BOOL hasRadioStationHash
 @property  NSString *radioStationHash
 @property  BOOL hasSystemAppPlaybackQueueData
 @property  NSData *systemAppPlaybackQueueData
 @property  BOOL hasDestinationAppDisplayID
 @property  NSString *destinationAppDisplayID
 @property  BOOL hasSendOptions
 @property  int sendOptions
 @property  BOOL hasRequestDefermentToPlaybackQueuePosition
 @property  BOOL requestDefermentToPlaybackQueuePosition
 @property  BOOL hasShouldOverrideManuallyCuratedQueue
 @property  BOOL shouldOverrideManuallyCuratedQueue
 @property  BOOL hasStationURL
 @property  NSString *stationURL
 @property  BOOL hasShouldBeginRadioPlayback
 @property  BOOL shouldBeginRadioPlayback
 @property  BOOL hasPlaybackQueueInsertionPosition
 @property  int playbackQueueInsertionPosition
 @property  BOOL hasContentItemID
 @property  NSString *contentItemID
 @property  BOOL hasPlaybackQueueOffset
 @property  int playbackQueueOffset
 @property  BOOL hasPlaybackQueueDestinationOffset
 @property  int playbackQueueDestinationOffset
 @property  BOOL hasLanguageOption
 @property  NSData *languageOption
 @property  BOOL hasPlaybackQueueContext
 @property  NSData *playbackQueueContext
 @property  BOOL hasInsertAfterContentItemID
 @property  NSString *insertAfterContentItemID
 @property  BOOL hasNowPlayingContentItemID
 @property  NSString *nowPlayingContentItemID
 @property  BOOL hasReplaceIntent
 @property  int replaceIntent
 @property  BOOL hasCommandID
 @property  NSString *commandID
 @property  BOOL hasSenderID
 @property  NSString *senderID
 @property  BOOL hasRemoteControlInterface
 @property  NSString *remoteControlInterface
 @property  BOOL hasBeginSeek
 @property  BOOL beginSeek
 @property  BOOL hasEndSeek
 @property  BOOL endSeek
 @property  BOOL hasPlaybackSession
 @property  NSData *playbackSession
 @property  BOOL hasUserIdentityData
 @property  NSData *userIdentityData
 @property  BOOL hasInsertBeforeContentItemID
 @property  NSString *insertBeforeContentItemID
 @property  BOOL hasQueueEndAction
 @property  int queueEndAction
 @property  BOOL hasPreservesRepeatMode
 @property  BOOL preservesRepeatMode
 @property  BOOL hasPreservesShuffleMode
 @property  BOOL preservesShuffleMode
 @property  BOOL hasPreservesQueueEndAction
 @property  BOOL preservesQueueEndAction
 @property  BOOL hasHomeKitUserIdentifier
 @property  NSString *homeKitUserIdentifier
 @property  BOOL hasVerifySupportedCommands
 @property  BOOL verifySupportedCommands
 @property  BOOL hasPlaybackSessionIdentifier
 @property  NSString *playbackSessionIdentifier
 @property  BOOL hasPlaybackSessionPriority
 @property  int playbackSessionPriority
 @property  BOOL hasPlaybackSessionFilePath
 @property  NSString *playbackSessionFilePath
 @property  BOOL hasPlaybackSessionRevision
 @property  NSString *playbackSessionRevision
 @property  BOOL hasPlaybackSessionMetadata
 @property  NSData *playbackSessionMetadata
 @property  BOOL hasPlaybackSessionType
 @property  NSString *playbackSessionType
 @property  BOOL hasTrueCompletion
 @property  BOOL trueCompletion
 @property  BOOL hasPlaybackAuthorizationToken
 @property  NSString *playbackAuthorizationToken
 @property  BOOL hasEventNoticeType
 @property  NSString *eventNoticeType
 @property  BOOL hasEventNoticeIdentifier
 @property  NSString *eventNoticeIdentifier
 @property  BOOL hasSharedPlaybackSessionIdentifier
 @property  NSString *sharedPlaybackSessionIdentifier
 @property  BOOL hasCommandTimeout
 @property  double commandTimeout
 @property  BOOL hasAssistantTTSEndTimestamp
 @property  double assistantTTSEndTimestamp
 @property  BOOL hasAssistantCommandSendTimestamp
 @property  double assistantCommandSendTimestamp
 @property  BOOL hasOriginatingDeviceUID
 @property  NSString *originatingDeviceUID
 @property  BOOL hasDestinationDeviceUIDs
 @property  NSData *destinationDeviceUIDs
 @property  BOOL hasDesiredSessionID
 @property  NSString *desiredSessionID
 @property  BOOL hasAlwaysIgnoreDuringCall
 @property  BOOL alwaysIgnoreDuringCall
 @property  BOOL hasAlwaysIgnoreDuringSharePlay
 @property  BOOL alwaysIgnoreDuringSharePlay
 @property  BOOL hasCommandSequenceUUID
 @property  NSString *commandSequenceUUID
 @property  BOOL hasOriginatedFromRemoteDevice
 @property  BOOL originatedFromRemoteDevice

  // instance methods
  -[_MRCommandOptionsProtobuf setContextID:]
  -[_MRCommandOptionsProtobuf setPlaybackRate:]
  -[_MRCommandOptionsProtobuf setMediaType:]
  -[_MRCommandOptionsProtobuf playbackRate]
  -[_MRCommandOptionsProtobuf setSourceID:]
  -[_MRCommandOptionsProtobuf mergeFrom:]
  -[_MRCommandOptionsProtobuf setShuffleMode:]
  -[_MRCommandOptionsProtobuf hasMediaType]
  -[_MRCommandOptionsProtobuf hasRating]
  -[_MRCommandOptionsProtobuf contextID]
  -[_MRCommandOptionsProtobuf shuffleMode]
  -[_MRCommandOptionsProtobuf setCommandID:]
  -[_MRCommandOptionsProtobuf setQueueEndAction:]
  -[_MRCommandOptionsProtobuf playbackSessionIdentifier]
  -[_MRCommandOptionsProtobuf setSenderID:]
  -[_MRCommandOptionsProtobuf playbackSessionType]
  -[_MRCommandOptionsProtobuf homeKitUserIdentifier]
  -[_MRCommandOptionsProtobuf .cxx_destruct]
  -[_MRCommandOptionsProtobuf hasCommandID]
  -[_MRCommandOptionsProtobuf hasRepeatMode]
  -[_MRCommandOptionsProtobuf hasShuffleMode]
  -[_MRCommandOptionsProtobuf setHasRepeatMode:]
  -[_MRCommandOptionsProtobuf sourceID]
  -[_MRCommandOptionsProtobuf playbackSession]
  -[_MRCommandOptionsProtobuf repeatModeAsString:]
  -[_MRCommandOptionsProtobuf StringAsRepeatMode:]
  -[_MRCommandOptionsProtobuf shuffleModeAsString:]
  -[_MRCommandOptionsProtobuf StringAsShuffleMode:]
  -[_MRCommandOptionsProtobuf hasRadioStationHash]
  -[_MRCommandOptionsProtobuf hasSourceID]
  -[_MRCommandOptionsProtobuf dictionaryRepresentation]
  -[_MRCommandOptionsProtobuf setDestinationAppDisplayID:]
  -[_MRCommandOptionsProtobuf hasDestinationAppDisplayID]
  -[_MRCommandOptionsProtobuf destinationAppDisplayID]
  -[_MRCommandOptionsProtobuf trackID]
  -[_MRCommandOptionsProtobuf writeTo:]
  -[_MRCommandOptionsProtobuf rating]
  -[_MRCommandOptionsProtobuf negative]
  -[_MRCommandOptionsProtobuf beginSeek]
  -[_MRCommandOptionsProtobuf senderID]
  -[_MRCommandOptionsProtobuf isEqual:]
  -[_MRCommandOptionsProtobuf contentItemID]
  -[_MRCommandOptionsProtobuf copyTo:]
  -[_MRCommandOptionsProtobuf setRating:]
  -[_MRCommandOptionsProtobuf playbackPosition]
  -[_MRCommandOptionsProtobuf setContentItemID:]
  -[_MRCommandOptionsProtobuf readFrom:]
  -[_MRCommandOptionsProtobuf setPlaybackPosition:]
  -[_MRCommandOptionsProtobuf setHomeKitUserIdentifier:]
  -[_MRCommandOptionsProtobuf playbackAuthorizationToken]
  -[_MRCommandOptionsProtobuf radioStationHash]
  -[_MRCommandOptionsProtobuf setRadioStationHash:]
  -[_MRCommandOptionsProtobuf radioStationID]
  -[_MRCommandOptionsProtobuf setRadioStationID:]
  -[_MRCommandOptionsProtobuf endSeek]
  -[_MRCommandOptionsProtobuf hasTrackID]
  -[_MRCommandOptionsProtobuf repeatMode]
  -[_MRCommandOptionsProtobuf commandID]
  -[_MRCommandOptionsProtobuf setNegative:]
  -[_MRCommandOptionsProtobuf setStationURL:]
  -[_MRCommandOptionsProtobuf hasNegative]
  -[_MRCommandOptionsProtobuf mediaType]
  -[_MRCommandOptionsProtobuf hasSkipInterval]
  -[_MRCommandOptionsProtobuf setSystemAppPlaybackQueueData:]
  -[_MRCommandOptionsProtobuf setLanguageOption:]
  -[_MRCommandOptionsProtobuf setReplaceIntent:]
  -[_MRCommandOptionsProtobuf replaceIntent]
  -[_MRCommandOptionsProtobuf setPlaybackQueueContext:]
  -[_MRCommandOptionsProtobuf setInsertAfterContentItemID:]
  -[_MRCommandOptionsProtobuf setNowPlayingContentItemID:]
  -[_MRCommandOptionsProtobuf setRemoteControlInterface:]
  -[_MRCommandOptionsProtobuf setPlaybackSession:]
  -[_MRCommandOptionsProtobuf setUserIdentityData:]
  -[_MRCommandOptionsProtobuf setInsertBeforeContentItemID:]
  -[_MRCommandOptionsProtobuf setSkipInterval:]
  -[_MRCommandOptionsProtobuf setPlaybackSessionIdentifier:]
  -[_MRCommandOptionsProtobuf setPlaybackSessionFilePath:]
  -[_MRCommandOptionsProtobuf setPlaybackSessionRevision:]
  -[_MRCommandOptionsProtobuf setPlaybackSessionMetadata:]
  -[_MRCommandOptionsProtobuf setPlaybackSessionType:]
  -[_MRCommandOptionsProtobuf setEventNoticeType:]
  -[_MRCommandOptionsProtobuf setEventNoticeIdentifier:]
  -[_MRCommandOptionsProtobuf hasContextID]
  -[_MRCommandOptionsProtobuf shouldOverrideManuallyCuratedQueue]
  -[_MRCommandOptionsProtobuf setShouldOverrideManuallyCuratedQueue:]
  -[_MRCommandOptionsProtobuf setSharedPlaybackSessionIdentifier:]
  -[_MRCommandOptionsProtobuf setOriginatingDeviceUID:]
  -[_MRCommandOptionsProtobuf setDestinationDeviceUIDs:]
  -[_MRCommandOptionsProtobuf setDesiredSessionID:]
  -[_MRCommandOptionsProtobuf setCommandSequenceUUID:]
  -[_MRCommandOptionsProtobuf setExternalPlayerCommand:]
  -[_MRCommandOptionsProtobuf setHasExternalPlayerCommand:]
  -[_MRCommandOptionsProtobuf hasExternalPlayerCommand]
  -[_MRCommandOptionsProtobuf setHasSkipInterval:]
  -[_MRCommandOptionsProtobuf setHasRating:]
  -[_MRCommandOptionsProtobuf setHasNegative:]
  -[_MRCommandOptionsProtobuf setHasPlaybackPosition:]
  -[_MRCommandOptionsProtobuf hasPlaybackPosition]
  -[_MRCommandOptionsProtobuf setHasTrackID:]
  -[_MRCommandOptionsProtobuf setHasRadioStationID:]
  -[_MRCommandOptionsProtobuf hasRadioStationID]
  -[_MRCommandOptionsProtobuf sendOptions]
  -[_MRCommandOptionsProtobuf hasEndSeek]
  -[_MRCommandOptionsProtobuf hasSystemAppPlaybackQueueData]
  -[_MRCommandOptionsProtobuf setSendOptions:]
  -[_MRCommandOptionsProtobuf setHasSendOptions:]
  -[_MRCommandOptionsProtobuf hasSendOptions]
  -[_MRCommandOptionsProtobuf sendOptionsAsString:]
  -[_MRCommandOptionsProtobuf StringAsSendOptions:]
  -[_MRCommandOptionsProtobuf setRequestDefermentToPlaybackQueuePosition:]
  -[_MRCommandOptionsProtobuf setShouldBeginRadioPlayback:]
  -[_MRCommandOptionsProtobuf setTrackID:]
  -[_MRCommandOptionsProtobuf setHasRequestDefermentToPlaybackQueuePosition:]
  -[_MRCommandOptionsProtobuf hasRequestDefermentToPlaybackQueuePosition]
  -[_MRCommandOptionsProtobuf setHasShouldOverrideManuallyCuratedQueue:]
  -[_MRCommandOptionsProtobuf hasShouldOverrideManuallyCuratedQueue]
  -[_MRCommandOptionsProtobuf hasStationURL]
  -[_MRCommandOptionsProtobuf hasSenderID]
  -[_MRCommandOptionsProtobuf setHasShouldBeginRadioPlayback:]
  -[_MRCommandOptionsProtobuf hasShouldBeginRadioPlayback]
  -[_MRCommandOptionsProtobuf setPlaybackQueueInsertionPosition:]
  -[_MRCommandOptionsProtobuf setHasPlaybackQueueInsertionPosition:]
  -[_MRCommandOptionsProtobuf hasPlaybackQueueInsertionPosition]
  -[_MRCommandOptionsProtobuf hasContentItemID]
  -[_MRCommandOptionsProtobuf hasBeginSeek]
  -[_MRCommandOptionsProtobuf setPlaybackQueueOffset:]
  -[_MRCommandOptionsProtobuf setHasPlaybackQueueOffset:]
  -[_MRCommandOptionsProtobuf hasPlaybackQueueOffset]
  -[_MRCommandOptionsProtobuf setPlaybackQueueDestinationOffset:]
  -[_MRCommandOptionsProtobuf setHasPlaybackQueueDestinationOffset:]
  -[_MRCommandOptionsProtobuf hasPlaybackQueueDestinationOffset]
  -[_MRCommandOptionsProtobuf setBeginSeek:]
  -[_MRCommandOptionsProtobuf hasLanguageOption]
  -[_MRCommandOptionsProtobuf hasPlaybackQueueContext]
  -[_MRCommandOptionsProtobuf hasInsertAfterContentItemID]
  -[_MRCommandOptionsProtobuf hasNowPlayingContentItemID]
  -[_MRCommandOptionsProtobuf setHasReplaceIntent:]
  -[_MRCommandOptionsProtobuf hasReplaceIntent]
  -[_MRCommandOptionsProtobuf replaceIntentAsString:]
  -[_MRCommandOptionsProtobuf StringAsReplaceIntent:]
  -[_MRCommandOptionsProtobuf setEndSeek:]
  -[_MRCommandOptionsProtobuf hasRemoteControlInterface]
  -[_MRCommandOptionsProtobuf setHasBeginSeek:]
  -[_MRCommandOptionsProtobuf setHasEndSeek:]
  -[_MRCommandOptionsProtobuf hasPlaybackSession]
  -[_MRCommandOptionsProtobuf hasUserIdentityData]
  -[_MRCommandOptionsProtobuf hasInsertBeforeContentItemID]
  -[_MRCommandOptionsProtobuf setHasQueueEndAction:]
  -[_MRCommandOptionsProtobuf hasQueueEndAction]
  -[_MRCommandOptionsProtobuf queueEndActionAsString:]
  -[_MRCommandOptionsProtobuf StringAsQueueEndAction:]
  -[_MRCommandOptionsProtobuf setPreservesRepeatMode:]
  -[_MRCommandOptionsProtobuf setHasPreservesRepeatMode:]
  -[_MRCommandOptionsProtobuf hasPreservesRepeatMode]
  -[_MRCommandOptionsProtobuf setPreservesShuffleMode:]
  -[_MRCommandOptionsProtobuf setHasPreservesShuffleMode:]
  -[_MRCommandOptionsProtobuf hasPreservesShuffleMode]
  -[_MRCommandOptionsProtobuf setTrueCompletion:]
  -[_MRCommandOptionsProtobuf setPreservesQueueEndAction:]
  -[_MRCommandOptionsProtobuf setHasPreservesQueueEndAction:]
  -[_MRCommandOptionsProtobuf hasPreservesQueueEndAction]
  -[_MRCommandOptionsProtobuf hasHomeKitUserIdentifier]
  -[_MRCommandOptionsProtobuf setVerifySupportedCommands:]
  -[_MRCommandOptionsProtobuf setHasVerifySupportedCommands:]
  -[_MRCommandOptionsProtobuf hasVerifySupportedCommands]
  -[_MRCommandOptionsProtobuf hasPlaybackSessionIdentifier]
  -[_MRCommandOptionsProtobuf playbackSessionPriority]
  -[_MRCommandOptionsProtobuf setPlaybackSessionPriority:]
  -[_MRCommandOptionsProtobuf setHasPlaybackSessionPriority:]
  -[_MRCommandOptionsProtobuf hasPlaybackSessionPriority]
  -[_MRCommandOptionsProtobuf playbackSessionPriorityAsString:]
  -[_MRCommandOptionsProtobuf hasPlaybackSessionType]
  -[_MRCommandOptionsProtobuf StringAsPlaybackSessionPriority:]
  -[_MRCommandOptionsProtobuf hasPlaybackSessionFilePath]
  -[_MRCommandOptionsProtobuf hasPlaybackSessionRevision]
  -[_MRCommandOptionsProtobuf hasPlaybackSessionMetadata]
  -[_MRCommandOptionsProtobuf setHasTrueCompletion:]
  -[_MRCommandOptionsProtobuf hasTrueCompletion]
  -[_MRCommandOptionsProtobuf hasPlaybackAuthorizationToken]
  -[_MRCommandOptionsProtobuf skipInterval]
  -[_MRCommandOptionsProtobuf copyWithZone:]
  -[_MRCommandOptionsProtobuf hasEventNoticeType]
  -[_MRCommandOptionsProtobuf hasEventNoticeIdentifier]
  -[_MRCommandOptionsProtobuf hasSharedPlaybackSessionIdentifier]
  -[_MRCommandOptionsProtobuf setCommandTimeout:]
  -[_MRCommandOptionsProtobuf setHasCommandTimeout:]
  -[_MRCommandOptionsProtobuf hasCommandTimeout]
  -[_MRCommandOptionsProtobuf setAssistantTTSEndTimestamp:]
  -[_MRCommandOptionsProtobuf hasAssistantTTSEndTimestamp]
  -[_MRCommandOptionsProtobuf setHasAssistantTTSEndTimestamp:]
  -[_MRCommandOptionsProtobuf setAssistantCommandSendTimestamp:]
  -[_MRCommandOptionsProtobuf setHasAssistantCommandSendTimestamp:]
  -[_MRCommandOptionsProtobuf hasAssistantCommandSendTimestamp]
  -[_MRCommandOptionsProtobuf hasOriginatingDeviceUID]
  -[_MRCommandOptionsProtobuf hasDestinationDeviceUIDs]
  -[_MRCommandOptionsProtobuf hasDesiredSessionID]
  -[_MRCommandOptionsProtobuf setAlwaysIgnoreDuringCall:]
  -[_MRCommandOptionsProtobuf setHasAlwaysIgnoreDuringCall:]
  -[_MRCommandOptionsProtobuf hasAlwaysIgnoreDuringCall]
  -[_MRCommandOptionsProtobuf setAlwaysIgnoreDuringSharePlay:]
  -[_MRCommandOptionsProtobuf setHasAlwaysIgnoreDuringSharePlay:]
  -[_MRCommandOptionsProtobuf hasCommandSequenceUUID]
  -[_MRCommandOptionsProtobuf hasAlwaysIgnoreDuringSharePlay]
  -[_MRCommandOptionsProtobuf setOriginatedFromRemoteDevice:]
  -[_MRCommandOptionsProtobuf setHasOriginatedFromRemoteDevice:]
  -[_MRCommandOptionsProtobuf hasOriginatedFromRemoteDevice]
  -[_MRCommandOptionsProtobuf externalPlayerCommand]
  -[_MRCommandOptionsProtobuf systemAppPlaybackQueueData]
  -[_MRCommandOptionsProtobuf playbackQueueContext]
  -[_MRCommandOptionsProtobuf requestDefermentToPlaybackQueuePosition]
  -[_MRCommandOptionsProtobuf shouldBeginRadioPlayback]
  -[_MRCommandOptionsProtobuf playbackQueueInsertionPosition]
  -[_MRCommandOptionsProtobuf playbackQueueDestinationOffset]
  -[_MRCommandOptionsProtobuf nowPlayingContentItemID]
  -[_MRCommandOptionsProtobuf remoteControlInterface]
  -[_MRCommandOptionsProtobuf userIdentityData]
  -[_MRCommandOptionsProtobuf stationURL]
  -[_MRCommandOptionsProtobuf setRepeatMode:]
  -[_MRCommandOptionsProtobuf insertBeforeContentItemID]
  -[_MRCommandOptionsProtobuf verifySupportedCommands]
  -[_MRCommandOptionsProtobuf playbackSessionFilePath]
  -[_MRCommandOptionsProtobuf playbackSessionRevision]
  -[_MRCommandOptionsProtobuf playbackSessionMetadata]
  -[_MRCommandOptionsProtobuf trueCompletion]
  -[_MRCommandOptionsProtobuf eventNoticeType]
  -[_MRCommandOptionsProtobuf eventNoticeIdentifier]
  -[_MRCommandOptionsProtobuf commandTimeout]
  -[_MRCommandOptionsProtobuf sharedPlaybackSessionIdentifier]
  -[_MRCommandOptionsProtobuf assistantTTSEndTimestamp]
  -[_MRCommandOptionsProtobuf assistantCommandSendTimestamp]
  -[_MRCommandOptionsProtobuf originatingDeviceUID]
  -[_MRCommandOptionsProtobuf destinationDeviceUIDs]
  -[_MRCommandOptionsProtobuf desiredSessionID]
  -[_MRCommandOptionsProtobuf alwaysIgnoreDuringCall]
  -[_MRCommandOptionsProtobuf commandSequenceUUID]
  -[_MRCommandOptionsProtobuf setHasPlaybackRate:]
  -[_MRCommandOptionsProtobuf setHasShuffleMode:]
  -[_MRCommandOptionsProtobuf alwaysIgnoreDuringSharePlay]
  -[_MRCommandOptionsProtobuf originatedFromRemoteDevice]
  -[_MRCommandOptionsProtobuf hasPlaybackRate]
  -[_MRCommandOptionsProtobuf setPlaybackAuthorizationToken:]
  -[_MRCommandOptionsProtobuf playbackQueueOffset]
  -[_MRCommandOptionsProtobuf preservesRepeatMode]
  -[_MRCommandOptionsProtobuf preservesShuffleMode]
  -[_MRCommandOptionsProtobuf languageOption]
  -[_MRCommandOptionsProtobuf insertAfterContentItemID]
  -[_MRCommandOptionsProtobuf queueEndAction]
  -[_MRCommandOptionsProtobuf preservesQueueEndAction]


MRSendCommandResultMessage : MRProtocolMessage
 @property  MRCommandResult *commandResult

  // instance methods
  -[MRSendCommandResultMessage sendError]
  -[MRSendCommandResultMessage .cxx_destruct]
  -[MRSendCommandResultMessage commandResult]
  -[MRSendCommandResultMessage type]
  -[MRSendCommandResultMessage initWithCommandID:commandResult:]


_MRPlaybackSessionMigrateRequestEventProtobuf : PBCodable <NSCopying>
 @property  NSError *error

  // instance methods
  -[_MRPlaybackSessionMigrateRequestEventProtobuf .cxx_destruct]
  -[_MRPlaybackSessionMigrateRequestEventProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionMigrateRequestEventProtobuf writeTo:]
  -[_MRPlaybackSessionMigrateRequestEventProtobuf isEqual:]
  -[_MRPlaybackSessionMigrateRequestEventProtobuf readFrom:]
  -[_MRPlaybackSessionMigrateRequestEventProtobuf calculatedDuration]
  -[_MRPlaybackSessionMigrateRequestEventProtobuf copyWithZone:]
  -[_MRPlaybackSessionMigrateRequestEventProtobuf error]


_MRUpdateActiveSystemEndpointRequestProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdateActiveSystemEndpointRequestProtobuf .cxx_destruct]
  -[_MRUpdateActiveSystemEndpointRequestProtobuf dictionaryRepresentation]
  -[_MRUpdateActiveSystemEndpointRequestProtobuf writeTo:]
  -[_MRUpdateActiveSystemEndpointRequestProtobuf isEqual:]
  -[_MRUpdateActiveSystemEndpointRequestProtobuf readFrom:]
  -[_MRUpdateActiveSystemEndpointRequestProtobuf copyWithZone:]


MRBlockGuard : MSVBlockGuard
  // instance methods
  -[MRBlockGuard initWithTimeout:reason:handler:]
  -[MRBlockGuard initWithTimeout:reason:queue:handler:]


MRCryptoPairingSessionBlockDelegate : NSObject <MRCryptoPairingSessionDelegate>
 @property  @? dataExchangeBlock
 @property  @? showSetupCodeBlock
 @property  @? hideSetupCodeBlock
 @property  @? promptForSetupCodeBlock
 @property  @? exchangeCompleteBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRCryptoPairingSessionBlockDelegate .cxx_destruct]
  -[MRCryptoPairingSessionBlockDelegate pairingSession:didPrepareExchangeData:]
  -[MRCryptoPairingSessionBlockDelegate pairingSession:showSetupCode:]
  -[MRCryptoPairingSessionBlockDelegate pairingSessionHideSetupCode:]
  -[MRCryptoPairingSessionBlockDelegate pairingSession:promptForSetupCodeWithDelay:completion:]
  -[MRCryptoPairingSessionBlockDelegate pairingSession:didCompleteExchangeWithError:]
  -[MRCryptoPairingSessionBlockDelegate setDataExchangeBlock:]
  -[MRCryptoPairingSessionBlockDelegate setShowSetupCodeBlock:]
  -[MRCryptoPairingSessionBlockDelegate setHideSetupCodeBlock:]
  -[MRCryptoPairingSessionBlockDelegate setPromptForSetupCodeBlock:]
  -[MRCryptoPairingSessionBlockDelegate setExchangeCompleteBlock:]
  -[MRCryptoPairingSessionBlockDelegate pairingSession:promptForSetupCodeWithCompletion:]
  -[MRCryptoPairingSessionBlockDelegate dataExchangeBlock]
  -[MRCryptoPairingSessionBlockDelegate showSetupCodeBlock]
  -[MRCryptoPairingSessionBlockDelegate hideSetupCodeBlock]
  -[MRCryptoPairingSessionBlockDelegate promptForSetupCodeBlock]
  -[MRCryptoPairingSessionBlockDelegate exchangeCompleteBlock]


_MRPresentRouteAuthorizationStatusMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPresentRouteAuthorizationStatusMessageProtobuf .cxx_destruct]
  -[_MRPresentRouteAuthorizationStatusMessageProtobuf dictionaryRepresentation]
  -[_MRPresentRouteAuthorizationStatusMessageProtobuf writeTo:]
  -[_MRPresentRouteAuthorizationStatusMessageProtobuf isEqual:]
  -[_MRPresentRouteAuthorizationStatusMessageProtobuf readFrom:]
  -[_MRPresentRouteAuthorizationStatusMessageProtobuf copyWithZone:]


_MRPlaybackSessionMigrateBeginMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionMigrateBeginMessageProtobuf .cxx_destruct]
  -[_MRPlaybackSessionMigrateBeginMessageProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionMigrateBeginMessageProtobuf writeTo:]
  -[_MRPlaybackSessionMigrateBeginMessageProtobuf isEqual:]
  -[_MRPlaybackSessionMigrateBeginMessageProtobuf readFrom:]
  -[_MRPlaybackSessionMigrateBeginMessageProtobuf copyWithZone:]


MRAVVirtualOutputDevice : MRAVOutputDevice
 @property  NSXPCListenerEndpoint *pipeEndpoint
 @property  NSData *jsonDeviceDefinition

  // instance methods
  -[MRAVVirtualOutputDevice isAddedToHomeKit]
  -[MRAVVirtualOutputDevice parentGroupContainsDiscoverableLeader]
  -[MRAVVirtualOutputDevice canRelayCommunicationChannel]
  -[MRAVVirtualOutputDevice bluetoothID]
  -[MRAVVirtualOutputDevice isLocalDevice]
  -[MRAVVirtualOutputDevice isAirPlayReceiverSessionActive]
  -[MRAVVirtualOutputDevice batteryLevel]
  -[MRAVVirtualOutputDevice canAccessAppleMusic]
  -[MRAVVirtualOutputDevice MACAddress]
  -[MRAVVirtualOutputDevice hasBatteryLevel]
  -[MRAVVirtualOutputDevice supportsBluetoothSharing]
  -[MRAVVirtualOutputDevice deviceSubtype]
  -[MRAVVirtualOutputDevice currentBluetoothListeningMode]
  -[MRAVVirtualOutputDevice supportsRapport]
  -[MRAVVirtualOutputDevice isDeviceGroupable]
  -[MRAVVirtualOutputDevice presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[MRAVVirtualOutputDevice logicalDeviceID]
  -[MRAVVirtualOutputDevice requiresAuthorization]
  -[MRAVVirtualOutputDevice groupContainsGroupLeader]
  -[MRAVVirtualOutputDevice canAccessiCloudMusicLibrary]
  -[MRAVVirtualOutputDevice playingPairedDeviceName]
  -[MRAVVirtualOutputDevice groupID]
  -[MRAVVirtualOutputDevice canFetchMediaDataFromSender]
  -[MRAVVirtualOutputDevice modelSpecificInfo]
  -[MRAVVirtualOutputDevice sourceInfo]
  -[MRAVVirtualOutputDevice availableBluetoothListeningModes]
  -[MRAVVirtualOutputDevice isRemoteControllable]
  -[MRAVVirtualOutputDevice canAccessRemoteAssets]
  -[MRAVVirtualOutputDevice parentGroupIdentifier]
  -[MRAVVirtualOutputDevice isPickedOnPairedDevice]
  -[MRAVVirtualOutputDevice supportsBufferedAirPlay]
  -[MRAVVirtualOutputDevice isGroupable]
  -[MRAVVirtualOutputDevice canPlayEncryptedProgressiveDownloadAssets]
  -[MRAVVirtualOutputDevice isGroupLeader]
  -[MRAVVirtualOutputDevice supportsExternalScreen]
  -[MRAVVirtualOutputDevice isUsingJSONProtocol]
  -[MRAVVirtualOutputDevice uid]
  -[MRAVVirtualOutputDevice name]
  -[MRAVVirtualOutputDevice volume]
  -[MRAVVirtualOutputDevice isProxyGroupPlayer]
  -[MRAVVirtualOutputDevice deviceType]
  -[MRAVVirtualOutputDevice isVolumeControlAvailable]
  -[MRAVVirtualOutputDevice setVolume:]
  -[MRAVVirtualOutputDevice modelID]
  -[MRAVVirtualOutputDevice initWithJSONData:pipeEndpoint:]
  -[MRAVVirtualOutputDevice firmwareVersion]
  -[MRAVVirtualOutputDevice .cxx_destruct]
  -[MRAVVirtualOutputDevice pipeEndpoint]
  -[MRAVVirtualOutputDevice jsonDeviceDefinition]


_MRGetVolumeMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetVolumeMessageProtobuf .cxx_destruct]
  -[_MRGetVolumeMessageProtobuf dictionaryRepresentation]
  -[_MRGetVolumeMessageProtobuf writeTo:]
  -[_MRGetVolumeMessageProtobuf isEqual:]
  -[_MRGetVolumeMessageProtobuf readFrom:]
  -[_MRGetVolumeMessageProtobuf copyWithZone:]


MRContentItem : NSObject <NSCopying>
 @property  _MRContentItemProtobuf *protobuf
 @property  NSString *identifier
 @property  MRContentItemMetadata *metadata
 @property  NSString *info
 @property  NSArray *availableLanguageOptions
 @property  NSArray *currentLanguageOptions
 @property  NSArray *sections
 @property  NSString *parentIdentifier
 @property  NSString *ancestorIdentifier
 @property  NSString *associatedParticipantIdentifier
 @property  NSString *queueIdentifier
 @property  NSString *requestIdentifier
 @property  MRArtwork *artwork
 @property  MRContentItem *skeleton
 @property  NSData *data
 @property  NSDictionary *dictionaryRepresentation
 @property  NSDictionary *nowPlayingInfo

  // class methods
  +[MRContentItem extractedIdentifierFromNowPlayingInfo:]
  +[MRContentItem mergeContentItems:]

  // instance methods
  -[MRContentItem setRequestIdentifier:]
  -[MRContentItem nowPlayingInfo]
  -[MRContentItem artwork]
  -[MRContentItem setQueueIdentifier:]
  -[MRContentItem queueIdentifier]
  -[MRContentItem requestIdentifier]
  -[MRContentItem setArtwork:]
  -[MRContentItem skeleton]
  -[MRContentItem availableLanguageOptions]
  -[MRContentItem setSections:]
  -[MRContentItem mergeFrom:]
  -[MRContentItem setAvailableLanguageOptions:]
  -[MRContentItem sections]
  -[MRContentItem setAncestorIdentifier:]
  -[MRContentItem initWithIdentifier:]
  -[MRContentItem setInfo:]
  -[MRContentItem .cxx_destruct]
  -[MRContentItem dictionaryRepresentation]
  -[MRContentItem info]
  -[MRContentItem data]
  -[MRContentItem isEqual:]
  -[MRContentItem setCurrentLanguageOptions:]
  -[MRContentItem identifier]
  -[MRContentItem protobuf]
  -[MRContentItem metadata]
  -[MRContentItem initWithProtobuf:]
  -[MRContentItem ancestorIdentifier]
  -[MRContentItem initWithData:]
  -[MRContentItem setMetadata:]
  -[MRContentItem parentIdentifier]
  -[MRContentItem initWithNowPlayingInfo:]
  -[MRContentItem setIdentifier:]
  -[MRContentItem setNowPlayingInfo:policy:request:]
  -[MRContentItem setParentIdentifier:]
  -[MRContentItem setAssociatedParticipantIdentifier:]
  -[MRContentItem copyWithZone:]
  -[MRContentItem currentLanguageOptions]
  -[MRContentItem associatedParticipantIdentifier]


_MRNotificationMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRNotificationMessageProtobuf .cxx_destruct]
  -[_MRNotificationMessageProtobuf dictionaryRepresentation]
  -[_MRNotificationMessageProtobuf writeTo:]
  -[_MRNotificationMessageProtobuf isEqual:]
  -[_MRNotificationMessageProtobuf readFrom:]
  -[_MRNotificationMessageProtobuf copyWithZone:]


MRTransactionPacket : NSObject <NSCopying>
 @property  NSData *data
 @property  _MRTransactionKeyProtobuf *key
 @property  _MRTransactionPacketProtobuf *protobuf
 @property  unsigned long writeLength
 @property  unsigned long writePosition
 @property  NSString *identifier
 @property  unsigned long actualLength
 @property  unsigned long totalLength
 @property  unsigned long totalWritePosition
 @property  BOOL readComplete
 @property  BOOL writeComplete

  // instance methods
  -[MRTransactionPacket writeComplete]
  -[MRTransactionPacket setWriteLength:]
  -[MRTransactionPacket isWriteComplete]
  -[MRTransactionPacket writeLength]
  -[MRTransactionPacket writePosition]
  -[MRTransactionPacket totalWritePosition]
  -[MRTransactionPacket .cxx_destruct]
  -[MRTransactionPacket data]
  -[MRTransactionPacket identifier]
  -[MRTransactionPacket protobuf]
  -[MRTransactionPacket initWithProtobuf:]
  -[MRTransactionPacket initWithData:forKey:]
  -[MRTransactionPacket isComplete]
  -[MRTransactionPacket key]
  -[MRTransactionPacket copyWithZone:]
  -[MRTransactionPacket totalLength]
  -[MRTransactionPacket isReadComplete]
  -[MRTransactionPacket actualLength]
  -[MRTransactionPacket initWithPackets:]


MRTransactionPacketAccumulator : NSObject
  // instance methods
  -[MRTransactionPacketAccumulator mergePacket:]
  -[MRTransactionPacketAccumulator .cxx_destruct]
  -[MRTransactionPacketAccumulator init]


MRTransactionPacketizer : NSObject
  // instance methods
  -[MRTransactionPacketizer packetize:packageSize:completion:]
  -[MRTransactionPacketizer unpacketize:completion:]
  -[MRTransactionPacketizer isEmpty]
  -[MRTransactionPacketizer .cxx_destruct]


MRTransactionSource : NSObject
 @property  unsigned long name
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRTransactionSource playerPath]
  -[MRTransactionSource _begin]
  -[MRTransactionSource name]
  -[MRTransactionSource initWithName:playerPath:packets:delegate:]
  -[MRTransactionSource .cxx_destruct]
  -[MRTransactionSource _processMessage:]


MRTransactionDestination : NSObject
 @property  unsigned long name
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRTransactionDestination playerPath]
  -[MRTransactionDestination name]
  -[MRTransactionDestination unpacketize:completion:]
  -[MRTransactionDestination initWithName:playerPath:]
  -[MRTransactionDestination packetsFromMessage:completion:]
  -[MRTransactionDestination .cxx_destruct]


_MRAudioFadeMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioFadeMessageProtobuf .cxx_destruct]
  -[_MRAudioFadeMessageProtobuf dictionaryRepresentation]
  -[_MRAudioFadeMessageProtobuf writeTo:]
  -[_MRAudioFadeMessageProtobuf isEqual:]
  -[_MRAudioFadeMessageProtobuf readFrom:]
  -[_MRAudioFadeMessageProtobuf copyWithZone:]


MRClient : NSObject <NSCopying>
 @property  _MRNowPlayingClientProtobuf *protobuf
 @property  int processIdentifier
 @property  unsigned int processUserIdentifier
 @property  long long visibility
 @property  MRColorComponents *tintColor
 @property  NSString *bundleIdentifier
 @property  NSString *parentApplicationBundleIdentifier
 @property  NSString *displayName
 @property  NSString *representedBundleID
 @property  NSArray *extendedBundleIdentifierHierarchy
 @property  NSURL *appIcon
 @property  BOOL hasPlaceholder
 @property  BOOL hasAuxiliaryProperties
 @property  BOOL systemMediaApplication
 @property  BOOL systemPodcastsApplication
 @property  BOOL systemBooksApplication
 @property  MRClient *skeleton
 @property  NSData *data
 @property  NSArray *bundleIdentifierHierarchy
 @property  BOOL local

  // class methods
  +[MRClient anyClient]
  +[MRClient localClient]

  // instance methods
  -[MRClient tintColor]
  -[MRClient hasAuxiliaryProperties]
  -[MRClient skeleton]
  -[MRClient setProcessIdentifier:]
  -[MRClient displayName]
  -[MRClient appIcon]
  -[MRClient isSystemPodcastsApplication]
  -[MRClient mergeFrom:]
  -[MRClient bundleIdentifier]
  -[MRClient visibility]
  -[MRClient bundleIdentifierHierarchy]
  -[MRClient .cxx_destruct]
  -[MRClient setVisibility:]
  -[MRClient isLocal]
  -[MRClient setBundleIdentifier:]
  -[MRClient data]
  -[MRClient isSystemMediaApplication]
  -[MRClient initWithProcessIdentifier:bundleIdentifier:]
  -[MRClient resolvePlaceholdersForDeviceInfo:]
  -[MRClient isEqual:]
  -[MRClient extendedBundleIdentifierHierarchy]
  -[MRClient hasPlaceholder]
  -[MRClient setParentApplicationBundleIdentifier:]
  -[MRClient protobuf]
  -[MRClient setTintColor:]
  -[MRClient setDisplayName:]
  -[MRClient initWithProtobuf:]
  -[MRClient initWithData:]
  -[MRClient initWithBundleIdentifier:]
  -[MRClient isSystemBooksApplication]
  -[MRClient processIdentifier]
  -[MRClient setAppIcon:]
  -[MRClient setProcessUserIdentifier:]
  -[MRClient copyWithZone:]
  -[MRClient representedBundleID]
  -[MRClient setExtendedBundleIdentifierHierarchy:]
  -[MRClient processUserIdentifier]
  -[MRClient parentApplicationBundleIdentifier]


_MRSendCommandResultProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendCommandResultProtobuf .cxx_destruct]
  -[_MRSendCommandResultProtobuf dictionaryRepresentation]
  -[_MRSendCommandResultProtobuf writeTo:]
  -[_MRSendCommandResultProtobuf isEqual:]
  -[_MRSendCommandResultProtobuf readFrom:]
  -[_MRSendCommandResultProtobuf copyWithZone:]


MRNotificationMessage : MRProtocolMessage
 @property  NSString *notification
 @property  NSDictionary *userInfo
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRNotificationMessage playerPath]
  -[MRNotificationMessage notification]
  -[MRNotificationMessage type]
  -[MRNotificationMessage userInfo]
  -[MRNotificationMessage initWithNotification:]


MRSetArtworkMessage : MRProtocolMessage
 @property  NSData *artworkData

  // instance methods
  -[MRSetArtworkMessage initWithArtworkData:]
  -[MRSetArtworkMessage type]
  -[MRSetArtworkMessage artworkData]


MRProtocolMessageOptions : NSObject
 @property  long long priority
 @property  BOOL waking

  // instance methods
  -[MRProtocolMessageOptions setPriority:]
  -[MRProtocolMessageOptions isWaking]
  -[MRProtocolMessageOptions priority]
  -[MRProtocolMessageOptions setWaking:]


MRProtocolMessage : NSObject
 @property  PBCodable *underlyingCodableMessage
 @property  NSString *replyIdentifier
 @property  NSString *uniqueIdentifier
 @property  unsigned long timestamp
 @property  NSError *error
 @property  MRProtocolClientConnection *clientConnection
 @property  BOOL isIncomingReply
 @property  BOOL isOutgoingReply
 @property  NSData *protobufData
 @property  unsigned long encryptionType
 @property  unsigned long type
 @property  NSString *description
 @property  BOOL shouldLog
 @property  MRProtocolMessageOptions *transportOptions

  // class methods
  +[MRProtocolMessage currentProtocolVersion]
  +[MRProtocolMessage protocolMessageWithProtobufData:error:]

  // instance methods
  -[MRProtocolMessage setUniqueIdentifier:]
  -[MRProtocolMessage setClientConnection:]
  -[MRProtocolMessage uniqueIdentifier]
  -[MRProtocolMessage setIsOutgoingReply:]
  -[MRProtocolMessage replyWithMessage:]
  -[MRProtocolMessage setUnderlyingCodableMessage:]
  -[MRProtocolMessage underlyingCodableMessage]
  -[MRProtocolMessage isIncomingReply]
  -[MRProtocolMessage isOutgoingReply]
  -[MRProtocolMessage setTransportOptions:]
  -[MRProtocolMessage replyIdentifier]
  -[MRProtocolMessage protobufData]
  -[MRProtocolMessage .cxx_destruct]
  -[MRProtocolMessage reply]
  -[MRProtocolMessage init]
  -[MRProtocolMessage initWithUnderlyingCodableMessage:error:]
  -[MRProtocolMessage clientConnection]
  -[MRProtocolMessage encryptionType]
  -[MRProtocolMessage setReplyIdentifier:]
  -[MRProtocolMessage setIsIncomingReply:]
  -[MRProtocolMessage type]
  -[MRProtocolMessage timestamp]
  -[MRProtocolMessage transportOptions]
  -[MRProtocolMessage dealloc]
  -[MRProtocolMessage shouldLog]
  -[MRProtocolMessage setTimestamp:]
  -[MRProtocolMessage setError:]
  -[MRProtocolMessage error]


MRSupportedProtocolMessages : NSObject <NSSecureCoding>
 @property  unsigned long lastSupportedMessageType

  // class methods
  +[MRSupportedProtocolMessages supportsSecureCoding]

  // instance methods
  -[MRSupportedProtocolMessages initWithCoder:]
  -[MRSupportedProtocolMessages initWithLastSupportedMessageType:]
  -[MRSupportedProtocolMessages initWithAllSupportedMessages]
  -[MRSupportedProtocolMessages isSupported:]
  -[MRSupportedProtocolMessages encodeWithCoder:]
  -[MRSupportedProtocolMessages lastSupportedMessageType]


_MRUpdateClientMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdateClientMessageProtobuf .cxx_destruct]
  -[_MRUpdateClientMessageProtobuf dictionaryRepresentation]
  -[_MRUpdateClientMessageProtobuf writeTo:]
  -[_MRUpdateClientMessageProtobuf isEqual:]
  -[_MRUpdateClientMessageProtobuf readFrom:]
  -[_MRUpdateClientMessageProtobuf copyWithZone:]


_MRTransactionPacketsProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRTransactionPacketsProtobuf .cxx_destruct]
  -[_MRTransactionPacketsProtobuf dictionaryRepresentation]
  -[_MRTransactionPacketsProtobuf writeTo:]
  -[_MRTransactionPacketsProtobuf isEqual:]
  -[_MRTransactionPacketsProtobuf readFrom:]
  -[_MRTransactionPacketsProtobuf copyWithZone:]


_MRDeviceInfoMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRDeviceInfoMessageProtobuf .cxx_destruct]
  -[_MRDeviceInfoMessageProtobuf dictionaryRepresentation]
  -[_MRDeviceInfoMessageProtobuf writeTo:]
  -[_MRDeviceInfoMessageProtobuf isEqual:]
  -[_MRDeviceInfoMessageProtobuf readFrom:]
  -[_MRDeviceInfoMessageProtobuf copyWithZone:]


MRRegisterHIDDeviceMessage : MRProtocolMessage
 @property  MRVirtualTouchDeviceDescriptor *deviceDescriptor

  // instance methods
  -[MRRegisterHIDDeviceMessage deviceDescriptor]
  -[MRRegisterHIDDeviceMessage .cxx_destruct]
  -[MRRegisterHIDDeviceMessage type]
  -[MRRegisterHIDDeviceMessage initWithDeviceDescriptor:]


MRSendLyricsEventMessage : MRProtocolMessage
 @property  _MRLyricsEventProtobuf *event

  // instance methods
  -[MRSendLyricsEventMessage type]
  -[MRSendLyricsEventMessage initWithEvent:]
  -[MRSendLyricsEventMessage event]


_MRDiscoverySessionConfigurationProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRDiscoverySessionConfigurationProtobuf .cxx_destruct]
  -[_MRDiscoverySessionConfigurationProtobuf dictionaryRepresentation]
  -[_MRDiscoverySessionConfigurationProtobuf writeTo:]
  -[_MRDiscoverySessionConfigurationProtobuf isEqual:]
  -[_MRDiscoverySessionConfigurationProtobuf readFrom:]
  -[_MRDiscoverySessionConfigurationProtobuf copyWithZone:]


_MRDiscoveryUpdateEndpointsProtobufMessage : PBCodable <NSCopying>
  // instance methods
  -[_MRDiscoveryUpdateEndpointsProtobufMessage .cxx_destruct]
  -[_MRDiscoveryUpdateEndpointsProtobufMessage dictionaryRepresentation]
  -[_MRDiscoveryUpdateEndpointsProtobufMessage writeTo:]
  -[_MRDiscoveryUpdateEndpointsProtobufMessage isEqual:]
  -[_MRDiscoveryUpdateEndpointsProtobufMessage readFrom:]
  -[_MRDiscoveryUpdateEndpointsProtobufMessage copyWithZone:]


_MRSendHIDEventMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendHIDEventMessageProtobuf .cxx_destruct]
  -[_MRSendHIDEventMessageProtobuf dictionaryRepresentation]
  -[_MRSendHIDEventMessageProtobuf writeTo:]
  -[_MRSendHIDEventMessageProtobuf isEqual:]
  -[_MRSendHIDEventMessageProtobuf readFrom:]
  -[_MRSendHIDEventMessageProtobuf copyWithZone:]


MRPlaybackSessionRequestMessage : MRProtocolMessage
 @property  MRPlaybackSessionRequest *request
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRPlaybackSessionRequestMessage playerPath]
  -[MRPlaybackSessionRequestMessage initWithRequest:forPlayerPath:]
  -[MRPlaybackSessionRequestMessage request]
  -[MRPlaybackSessionRequestMessage type]


MRPlaybackSessionResponseMessage : MRProtocolMessage
 @property  MRPlaybackSession *playbackSession

  // instance methods
  -[MRPlaybackSessionResponseMessage playbackSession]
  -[MRPlaybackSessionResponseMessage initWithPlaybackSession:]
  -[MRPlaybackSessionResponseMessage type]


MRPlaybackSessionMigrateRequestMessage : MRProtocolMessage
 @property  MRPlaybackSession *playbackSession
 @property  MRPlaybackSessionMigrateRequest *request
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRPlaybackSessionMigrateRequestMessage playerPath]
  -[MRPlaybackSessionMigrateRequestMessage playbackSession]
  -[MRPlaybackSessionMigrateRequestMessage request]
  -[MRPlaybackSessionMigrateRequestMessage initWithPlaybackSession:request:forPlayerPath:]
  -[MRPlaybackSessionMigrateRequestMessage type]


MRPlaybackSessionMigrateResponseMessage : MRProtocolMessage
 @property  MRPlaybackSessionMigrateRequest *request

  // instance methods
  -[MRPlaybackSessionMigrateResponseMessage initWithRequest:]
  -[MRPlaybackSessionMigrateResponseMessage request]
  -[MRPlaybackSessionMigrateResponseMessage type]


MRPlaybackSessionMigrateBeginMessage : MRProtocolMessage
 @property  MRPlaybackSessionRequest *request
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRPlaybackSessionMigrateBeginMessage playerPath]
  -[MRPlaybackSessionMigrateBeginMessage request]
  -[MRPlaybackSessionMigrateBeginMessage type]
  -[MRPlaybackSessionMigrateBeginMessage initWithRequest:playerPath:]


MRPlaybackSessionMigrateEndMessage : MRProtocolMessage
 @property  MRPlaybackSessionRequest *request
 @property  NSError *error
 @property  MRPlayerPath *playerPath

  // instance methods
  -[MRPlaybackSessionMigrateEndMessage playerPath]
  -[MRPlaybackSessionMigrateEndMessage request]
  -[MRPlaybackSessionMigrateEndMessage type]
  -[MRPlaybackSessionMigrateEndMessage initWithRequest:error:playerPath:]
  -[MRPlaybackSessionMigrateEndMessage error]


MRRemoteTextInputMessage : MRProtocolMessage
 @property  unsigned long version
 @property  NSData *data

  // instance methods
  -[MRRemoteTextInputMessage data]
  -[MRRemoteTextInputMessage type]
  -[MRRemoteTextInputMessage version]
  -[MRRemoteTextInputMessage initWithVersion:data:]


_MRTextInputTraitsProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRTextInputTraitsProtobuf dictionaryRepresentation]
  -[_MRTextInputTraitsProtobuf writeTo:]
  -[_MRTextInputTraitsProtobuf isEqual:]
  -[_MRTextInputTraitsProtobuf readFrom:]
  -[_MRTextInputTraitsProtobuf dealloc]
  -[_MRTextInputTraitsProtobuf copyWithZone:]


MRDestination : NSObject <NSCopying>
 @property  NSString *outputDeviceUID
 @property  MRAVEndpoint *endpoint
 @property  MRPlayerPath *playerPath
 @property  MROrigin *origin
 @property  BOOL isLocal
 @property  BOOL isProactive
 @property  BOOL isUserSelected
 @property  MRClient *client
 @property  MRPlayer *player

  // class methods
  +[MRDestination userSelectedDestination]
  +[MRDestination localDestination]
  +[MRDestination proactiveDestination]

  // instance methods
  -[MRDestination playerPath]
  -[MRDestination initWithEndpoint:]
  -[MRDestination initWithPlayerPath:]
  -[MRDestination setOutputDeviceUID:]
  -[MRDestination origin]
  -[MRDestination initWithOrigin:]
  -[MRDestination setOrigin:]
  -[MRDestination initWithOutputDeviceUID:]
  -[MRDestination setPlayerPath:]
  -[MRDestination .cxx_destruct]
  -[MRDestination outputDeviceUID]
  -[MRDestination isProactive]
  -[MRDestination isLocal]
  -[MRDestination setClient:]
  -[MRDestination setPlayer:]
  -[MRDestination player]
  -[MRDestination client]
  -[MRDestination setEndpoint:]
  -[MRDestination _init]
  -[MRDestination isUserSelected]
  -[MRDestination populatePlayerPathIfNeeded]
  -[MRDestination endpoint]
  -[MRDestination copyWithZone:]


MRV1NowPlayingController : NSObject <MRNowPlayingControllerImpl>
 @property  MRNowPlayingControllerDestination *destination
 @property  MRNowPlayingControllerConfiguration *configuration
 @property  MRNowPlayingPlayerResponse *response
 @property  id playerPathInvalidationObserver
 @property  MRAVEndpointObserver *endpointObserver
 @property  NSString *endpointObserverGroupUID
 @property  NSMutableArray *deferredContentItemsToMerge
 @property  BOOL registeredForNotifications
 @property  BOOL registeredForEndpointChanges
 @property  BOOL registeredForPlayerPathInvalidations
 @property  BOOL updateLoadingEnabled
 @property  BOOL requestingQueue
 @property  NSObject<OS_dispatch_queue> *queue
 @property  MSVVariableIntervalTimer *retryTimer
 @property  MRNowPlayingControllerHelper *helper
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRV1NowPlayingController helper]
  -[MRV1NowPlayingController setRetryTimer:]
  -[MRV1NowPlayingController retryTimer]
  -[MRV1NowPlayingController setRegisteredForEndpointChanges:]
  -[MRV1NowPlayingController _unregisterForPlayerPathInvalidations]
  -[MRV1NowPlayingController updateLoadingEnabled]
  -[MRV1NowPlayingController setUpdateLoadingEnabled:]
  -[MRV1NowPlayingController _notifyDelegateOfError:]
  -[MRV1NowPlayingController _notifyDelegateOfNewResponse:]
  -[MRV1NowPlayingController _loadNowPlayingStateForUID:client:player:completion:]
  -[MRV1NowPlayingController _unregisterForEndpointChanges]
  -[MRV1NowPlayingController _unregisterNotificationHandlers]
  -[MRV1NowPlayingController _onQueue_clearState]
  -[MRV1NowPlayingController _loadNowPlayingStateForEndpoint:client:player:completion:]
  -[MRV1NowPlayingController setDestination:]
  -[MRV1NowPlayingController _registerForEndpointChangesIfNeeded]
  -[MRV1NowPlayingController _onQueue_retrieveEndpointForUID:completion:]
  -[MRV1NowPlayingController _registerForPlayerPathInvalidationsIfNeeded]
  -[MRV1NowPlayingController _registerNotificationHandlersIfNeeded]
  -[MRV1NowPlayingController _loadNowPlayingStateForPlayerPath:error:]
  -[MRV1NowPlayingController _resolvePlayerPath:completion:]
  -[MRV1NowPlayingController _createPlayerPathForEndpoint:client:player:completion:]
  -[MRV1NowPlayingController _requestSupportedCommandsForPlayerPath:queue:completion:]
  -[MRV1NowPlayingController setRequestingQueue:]
  -[MRV1NowPlayingController _requestPlayerLastPlayingDateForPlayerPath:queue:completion:]
  -[MRV1NowPlayingController deferredContentItemsToMerge]
  -[MRV1NowPlayingController requestingQueue]
  -[MRV1NowPlayingController _notifyDelegateOfUpdatedArtwork:]
  -[MRV1NowPlayingController _requestContentItemArtwork:forPlayerPath:queue:completion:]
  -[MRV1NowPlayingController _notifyDelegateOfInvalidation]
  -[MRV1NowPlayingController _handlePlaybackQueueChangedNotification:]
  -[MRV1NowPlayingController _handlePlaybackQueueContentItemsChangedNotification:]
  -[MRV1NowPlayingController _handlePlaybackQueueContentItemsArtworkChangedNotification:]
  -[MRV1NowPlayingController _handlePlaybackStateChangedNotification:]
  -[MRV1NowPlayingController _handleSupportedCommandsChangedNotification:]
  -[MRV1NowPlayingController _notifyDelegateOfUpdatedPlayerLastPlayingDate:]
  -[MRV1NowPlayingController configuration]
  -[MRV1NowPlayingController _requestPlaybackQueueForPlayerPath:includeArtwork:queue:completion:]
  -[MRV1NowPlayingController _reloadForCompleteInvalidation]
  -[MRV1NowPlayingController _reloadForPlayerPathInvalidation]
  -[MRV1NowPlayingController beginLoadingUpdates]
  -[MRV1NowPlayingController _handleActiveSystemEndpointChangedNotification:]
  -[MRV1NowPlayingController endLoadingUpdates]
  -[MRV1NowPlayingController setDeferredContentItemsToMerge:]
  -[MRV1NowPlayingController .cxx_destruct]
  -[MRV1NowPlayingController setRegisteredForNotifications:]
  -[MRV1NowPlayingController registeredForPlayerPathInvalidations]
  -[MRV1NowPlayingController destination]
  -[MRV1NowPlayingController setQueue:]
  -[MRV1NowPlayingController _notifyDelegateOfPlayerPathChange:]
  -[MRV1NowPlayingController _notifyDelegateOfPlaybackQueueChange:]
  -[MRV1NowPlayingController _notifyDelegateOfUpdatedContentItemsWithContentItems:]
  -[MRV1NowPlayingController _notifyDelegateOfPlaybackStateChange:]
  -[MRV1NowPlayingController _notifyDelegateOfSupportedCommandsChange:]
  -[MRV1NowPlayingController registeredForEndpointChanges]
  -[MRV1NowPlayingController destinationWithCompletion:]
  -[MRV1NowPlayingController _notifyDelegateOfUpdatedClientProperties:]
  -[MRV1NowPlayingController response]
  -[MRV1NowPlayingController setHelper:]
  -[MRV1NowPlayingController initWithConfiguration:]
  -[MRV1NowPlayingController endpointObserver]
  -[MRV1NowPlayingController playerPathInvalidationObserver]
  -[MRV1NowPlayingController queue]
  -[MRV1NowPlayingController registeredForNotifications]
  -[MRV1NowPlayingController dealloc]
  -[MRV1NowPlayingController setEndpointObserverGroupUID:]
  -[MRV1NowPlayingController endpointObserverGroupUID]
  -[MRV1NowPlayingController setPlayerPathInvalidationObserver:]
  -[MRV1NowPlayingController setRegisteredForPlayerPathInvalidations:]
  -[MRV1NowPlayingController setEndpointObserver:]
  -[MRV1NowPlayingController setConfiguration:]
  -[MRV1NowPlayingController setResponse:]


MRSetListeningModeMessage : MRProtocolMessage
 @property  NSString *listeningMode
 @property  NSString *outputDeviceUID

  // instance methods
  -[MRSetListeningModeMessage initWithListeningMode:outputDeviceUID:]
  -[MRSetListeningModeMessage listeningMode]
  -[MRSetListeningModeMessage .cxx_destruct]
  -[MRSetListeningModeMessage outputDeviceUID]
  -[MRSetListeningModeMessage initWithUnderlyingCodableMessage:error:]
  -[MRSetListeningModeMessage type]


MRNowPlayingPlayerClientCallbacks : NSObject
 @property  MRPlayerPath *playerPath
 @property  BOOL hasPlaybackQueueCallbacks
 @property  unsigned long capabilities
 @property  MSVMultiCallback *createPlaybackQueueForRequestCallbacks
 @property  MSVMultiCallback *createItemForOffsetCallbacks
 @property  MSVMultiCallback *createItemForIdentifierCallbacks
 @property  MSVMultiCallback *createChildItemCallbacks
 @property  MSVMultiCallback *createParticipantsCallbacks
 @property  MSVMultiCallback *metadataCallbacks
 @property  MSVMultiCallback *languageOptionsCallbacks
 @property  MSVMultiCallback *infoCallbacks
 @property  MSVMultiCallback *lyricsCallbacks
 @property  MSVMultiCallback *artworkCallbacks
 @property  @? playbackSessionCallback
 @property  @? playbackSessionMigrateBeginCallback
 @property  @? playbackSessionMigrateEndCallback
 @property  @? playbackSessionMigrateRequestCallback
 @property  @? beginLyricsEventCallback
 @property  @? endLyricsEventCallback
 @property  @? videoThumbnailsCallback
 @property  @? audioAmplitudeSamplesCallback
 @property  NSArray *commandHandlerBlocks

  // instance methods
  -[MRNowPlayingPlayerClientCallbacks playbackSessionMigrateEndCallback]
  -[MRNowPlayingPlayerClientCallbacks playbackSessionMigrateBeginCallback]
  -[MRNowPlayingPlayerClientCallbacks playerPath]
  -[MRNowPlayingPlayerClientCallbacks playbackSessionMigrateRequestCallback]
  -[MRNowPlayingPlayerClientCallbacks setPlaybackSessionMigrateRequestCallback:]
  -[MRNowPlayingPlayerClientCallbacks setBeginLyricsEventCallback:]
  -[MRNowPlayingPlayerClientCallbacks setPlaybackSessionCallback:]
  -[MRNowPlayingPlayerClientCallbacks playbackSessionCallback]
  -[MRNowPlayingPlayerClientCallbacks endLyricsEventCallback]
  -[MRNowPlayingPlayerClientCallbacks registerNowPlayingInfoArtworkAssetCallback:]
  -[MRNowPlayingPlayerClientCallbacks setEndLyricsEventCallback:]
  -[MRNowPlayingPlayerClientCallbacks beginLyricsEventCallback]
  -[MRNowPlayingPlayerClientCallbacks setPlaybackSessionMigrateBeginCallback:]
  -[MRNowPlayingPlayerClientCallbacks setPlaybackSessionMigrateEndCallback:]
  -[MRNowPlayingPlayerClientCallbacks audioAmplitudeSamplesCallback]
  -[MRNowPlayingPlayerClientCallbacks registerNowPlayingInfoCallbacks:]
  -[MRNowPlayingPlayerClientCallbacks languageOptionsCallbacks]
  -[MRNowPlayingPlayerClientCallbacks registerNowPlayingInfoBackedPlaybackQueueDataSourceCallbacks]
  -[MRNowPlayingPlayerClientCallbacks capabilities]
  -[MRNowPlayingPlayerClientCallbacks .cxx_destruct]
  -[MRNowPlayingPlayerClientCallbacks createItemForOffsetCallbacks]
  -[MRNowPlayingPlayerClientCallbacks videoThumbnailsCallback]
  -[MRNowPlayingPlayerClientCallbacks removePlaybackQueueDataSourceCallback:]
  -[MRNowPlayingPlayerClientCallbacks initWithPlayerPath:queue:]
  -[MRNowPlayingPlayerClientCallbacks lyricsCallbacks]
  -[MRNowPlayingPlayerClientCallbacks createParticipantsCallbacks]
  -[MRNowPlayingPlayerClientCallbacks removeCommandHandlerBlockForKey:]
  -[MRNowPlayingPlayerClientCallbacks hasPlaybackQueueCallbacks]
  -[MRNowPlayingPlayerClientCallbacks registerNowPlayingInfoAssetCallbacks:]
  -[MRNowPlayingPlayerClientCallbacks createChildItemCallbacks]
  -[MRNowPlayingPlayerClientCallbacks createItemForIdentifierCallbacks]
  -[MRNowPlayingPlayerClientCallbacks commandHandlerBlocks]
  -[MRNowPlayingPlayerClientCallbacks createPlaybackQueueForRequestCallbacks]
  -[MRNowPlayingPlayerClientCallbacks setVideoThumbnailsCallback:]
  -[MRNowPlayingPlayerClientCallbacks setAudioAmplitudeSamplesCallback:]
  -[MRNowPlayingPlayerClientCallbacks infoCallbacks]
  -[MRNowPlayingPlayerClientCallbacks metadataCallbacks]
  -[MRNowPlayingPlayerClientCallbacks artworkCallbacks]
  -[MRNowPlayingPlayerClientCallbacks _onQueue_capabilities]
  -[MRNowPlayingPlayerClientCallbacks addCommandHandlerBlock:forKey:]


MRUpdateActiveSystemEndpointResponse : NSObject
 @property  NSError *error

  // instance methods
  -[MRUpdateActiveSystemEndpointResponse .cxx_destruct]
  -[MRUpdateActiveSystemEndpointResponse initWithError:]
  -[MRUpdateActiveSystemEndpointResponse error]


MRUpdateActiveSystemEndpointRequest : NSObject <NSCopying>
 @property  NSString *clientBundleIdentifier
 @property  BOOL pairedDeviceSync
 @property  _MRUpdateActiveSystemEndpointRequestProtobuf *protobuf
 @property  NSString *outputDeviceUID
 @property  NSString *reason
 @property  long long changeType

  // instance methods
  -[MRUpdateActiveSystemEndpointRequest setClientBundleIdentifier:]
  -[MRUpdateActiveSystemEndpointRequest changeType]
  -[MRUpdateActiveSystemEndpointRequest setOutputDeviceUID:]
  -[MRUpdateActiveSystemEndpointRequest initWithOutputDeviceUID:reason:]
  -[MRUpdateActiveSystemEndpointRequest .cxx_destruct]
  -[MRUpdateActiveSystemEndpointRequest outputDeviceUID]
  -[MRUpdateActiveSystemEndpointRequest perform:completion:]
  -[MRUpdateActiveSystemEndpointRequest setChangeType:]
  -[MRUpdateActiveSystemEndpointRequest protobuf]
  -[MRUpdateActiveSystemEndpointRequest reason]
  -[MRUpdateActiveSystemEndpointRequest initWithProtobuf:]
  -[MRUpdateActiveSystemEndpointRequest clientBundleIdentifier]
  -[MRUpdateActiveSystemEndpointRequest setReason:]
  -[MRUpdateActiveSystemEndpointRequest copyWithZone:]
  -[MRUpdateActiveSystemEndpointRequest isPairedDeviceSync]
  -[MRUpdateActiveSystemEndpointRequest setPairedDeviceSync:]


MRNowPlayingPlayerPathInvalidationHandler : NSObject
 @property  MRPlayerPath *playerPath
 @property  NSObject<OS_dispatch_queue> *queue
 @property  @? callback

  // instance methods
  -[MRNowPlayingPlayerPathInvalidationHandler playerPath]
  -[MRNowPlayingPlayerPathInvalidationHandler callback]
  -[MRNowPlayingPlayerPathInvalidationHandler .cxx_destruct]
  -[MRNowPlayingPlayerPathInvalidationHandler initWithPlayerPath:queue:invalidationCallback:]
  -[MRNowPlayingPlayerPathInvalidationHandler queue]


_MRRegisterGameControllerResponseMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRegisterGameControllerResponseMessageProtobuf dictionaryRepresentation]
  -[_MRRegisterGameControllerResponseMessageProtobuf writeTo:]
  -[_MRRegisterGameControllerResponseMessageProtobuf isEqual:]
  -[_MRRegisterGameControllerResponseMessageProtobuf readFrom:]
  -[_MRRegisterGameControllerResponseMessageProtobuf copyWithZone:]


MRVirtualOutputContextManager : NSObject
 @property  NSArray *outputContext

  // class methods
  +[MRVirtualOutputContextManager sharedManager]

  // instance methods
  -[MRVirtualOutputContextManager outputContext]
  -[MRVirtualOutputContextManager removeOutputContext:]
  -[MRVirtualOutputContextManager fetchForUID:]
  -[MRVirtualOutputContextManager .cxx_destruct]
  -[MRVirtualOutputContextManager addOutputContext:]


MRVirtualOutputContext : MRAVOutputContext
  // instance methods
  -[MRVirtualOutputContext volume]
  -[MRVirtualOutputContext uniqueIdentifier]
  -[MRVirtualOutputContext resetPredictedOutputDevice]
  -[MRVirtualOutputContext initWithUID:]
  -[MRVirtualOutputContext isVolumeControlAvailable]
  -[MRVirtualOutputContext setVolume:]
  -[MRVirtualOutputContext contextID]
  -[MRVirtualOutputContext setOutputDevices:initiator:withCallbackQueue:block:]
  -[MRVirtualOutputContext setOutputDevices:withPassword:withCallbackQueue:block:]
  -[MRVirtualOutputContext addOutputDevices:initiator:withCallbackQueue:block:]
  -[MRVirtualOutputContext removeOutputDevices:initiator:withCallbackQueue:block:]
  -[MRVirtualOutputContext .cxx_destruct]
  -[MRVirtualOutputContext removeAllOutputDevicesWithCallbackQueue:block:]
  -[MRVirtualOutputContext supportsVolumeControl]
  -[MRVirtualOutputContext outputDevices]
  -[MRVirtualOutputContext type]
  -[MRVirtualOutputContext predictedOutputDevice]
  -[MRVirtualOutputContext supportsMultipleBluetoothOutputDevices]


MRLogBuffer : NSObject
 @property  NSArray *history
 @property  {os_unfair_lock_s=I} lock
 @property  long long capacity
 @property  NSObject<OS_os_log> *category
 @property  NSString *prefix

  // class methods
  +[MRLogBuffer bufferWithCapacity:category:loggingPrefix:]

  // instance methods
  -[MRLogBuffer log:]
  -[MRLogBuffer capacity]
  -[MRLogBuffer history]
  -[MRLogBuffer prefix]
  -[MRLogBuffer .cxx_destruct]
  -[MRLogBuffer initWithCapacity:category:prefix:]
  -[MRLogBuffer log:withType:capture:]
  -[MRLogBuffer logWithoutCapture:]
  -[MRLogBuffer logInfoWithoutCapture:]
  -[MRLogBuffer logDebugWithoutCapture:]
  -[MRLogBuffer logErrorWithoutCapture:]
  -[MRLogBuffer logFaultWithoutCapture:]
  -[MRLogBuffer logInfo:]
  -[MRLogBuffer logError:]
  -[MRLogBuffer logFault:]
  -[MRLogBuffer setHistory:]
  -[MRLogBuffer category]
  -[MRLogBuffer logDebug:]
  -[MRLogBuffer lock]


MRIDSClientConnection : MRProtocolClientConnection
 @property  unsigned int discoveryMode

  // instance methods
  -[MRIDSClientConnection discoveryMode]
  -[MRIDSClientConnection initWithConnection:]
  -[MRIDSClientConnection setDiscoveryMode:]


MRColorComponents : NSObject <NSCopying>
 @property  _MRColorProtobuf *protobuf
 @property  float red
 @property  float green
 @property  float blue
 @property  float alpha

  // instance methods
  -[MRColorComponents green]
  -[MRColorComponents red]
  -[MRColorComponents isEqual:]
  -[MRColorComponents blue]
  -[MRColorComponents setGreen:]
  -[MRColorComponents setAlpha:]
  -[MRColorComponents protobuf]
  -[MRColorComponents initWithProtobuf:]
  -[MRColorComponents setBlue:]
  -[MRColorComponents alpha]
  -[MRColorComponents copyWithZone:]
  -[MRColorComponents setRed:]


MRAVEndpoint : NSObject
 @property  NSString *localizedName
 @property  NSString *uniqueIdentifier
 @property  MRExternalDevice *externalDevice
 @property  _MRAVEndpointDescriptorProtobuf *descriptor
 @property  NSArray *outputDevices
 @property  NSArray *personalOutputDevices
 @property  NSArray *outputDeviceUIDs
 @property  unsigned long logicalOutputDeviceCount
 @property  MRAVOutputDevice *designatedGroupLeader
 @property  MRAVOutputDevice *groupLeader
 @property  long long connectionType
 @property  NSString *debugName
 @property  BOOL proxyGroupPlayer
 @property  BOOL canModifyGroupMembership
 @property  NSString *shortDescription
 @property  NSDictionary *jsonEncodableDictionaryRepresentation
 @property  BOOL localEndpoint
 @property  BOOL companionEndpoint
 @property  MROrigin *origin
 @property  BOOL connected

  // class methods
  +[MRAVEndpoint hostedEndpointForOutputDeviceUIDs:queue:completion:]
  +[MRAVEndpoint createEndpointWithOutputDeviceUIDs:options:queue:completion:]
  +[MRAVEndpoint directEndpointForOutputDeviceUIDs:queue:completion:]
  +[MRAVEndpoint createEndpointWithOutputDeviceUIDs:queue:completion:]
  +[MRAVEndpoint _notificationSerialQueue]

  // instance methods
  -[MRAVEndpoint designatedGroupLeader]
  -[MRAVEndpoint setAllowsHeadTrackedSpatialAudio:outputDeviceUID:queue:completion:]
  -[MRAVEndpoint jsonEncodableDictionaryRepresentation]
  -[MRAVEndpoint canMigrateToEndpoint:queue:completion:]
  -[MRAVEndpoint localizedName]
  -[MRAVEndpoint setUniqueIdentifier:]
  -[MRAVEndpoint _willStartingPlaybackToOutputDeviceInterruptPlayback:duration:requestID:queue:completion:]
  -[MRAVEndpoint removeOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVEndpoint connectToExternalDeviceWithOptions:userInfo:completion:]
  -[MRAVEndpoint debugName]
  -[MRAVEndpoint containsOutputDeviceWithUID:]
  -[MRAVEndpoint outputDeviceWithUID:]
  -[MRAVEndpoint connectionType]
  -[MRAVEndpoint groupLeader]
  -[MRAVEndpoint performMigrationToEndpoint:request:queue:completion:]
  -[MRAVEndpoint removeOutputDevices:initiator:fadeAudio:withReplyQueue:completion:]
  -[MRAVEndpoint outputDeviceUIDs]
  -[MRAVEndpoint outputDevicesMatchingPredicate:]
  -[MRAVEndpoint setOutputDeviceVolume:outputDevice:queue:completion:]
  -[MRAVEndpoint setListeningMode:outputDeviceUID:queue:completion:]
  -[MRAVEndpoint isLocalEndpoint]
  -[MRAVEndpoint volumeControlCapabilitiesForOutputDevice:queue:completion:]
  -[MRAVEndpoint canModifyGroupMembership]
  -[MRAVEndpoint scheduleEndpointOutputDevicesDidChangeNotification]
  -[MRAVEndpoint performMigrationToOutputDevices:request:initiator:queue:completion:]
  -[MRAVEndpoint discoverySessionWithConfiguration:]
  -[MRAVEndpoint isProxyGroupPlayer]
  -[MRAVEndpoint outputDeviceUIDsMatchingPredicate:]
  -[MRAVEndpoint _externalDeviceConnectionStateDidChangeNotification:]
  -[MRAVEndpoint uniqueIdentifier]
  -[MRAVEndpoint outputDeviceVolume:queue:completion:]
  -[MRAVEndpoint willStartingPlaybackToOutputDeviceInterruptPlayback:duration:queue:completion:]
  -[MRAVEndpoint _initiatorStringWithInitiator:uid:]
  -[MRAVEndpoint migrateToOrSetOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVEndpoint createHostedEndpointWithOutputDeviceUIDs:queue:completion:]
  -[MRAVEndpoint migrateToOutputDevice:request:initiator:queue:completion:]
  -[MRAVEndpoint connectToExternalDeviceWithUserInfo:completion:]
  -[MRAVEndpoint isEqualToEndpoint:]
  -[MRAVEndpoint migrateToOrAddOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVEndpoint isVolumeControlAvailable]
  -[MRAVEndpoint setOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVEndpoint _callAllCompletionHandlersWithError:]
  -[MRAVEndpoint isConnected]
  -[MRAVEndpoint setOutputDevices:initiator:fadeAudio:withReplyQueue:completion:]
  -[MRAVEndpoint setLocalizedName:]
  -[MRAVEndpoint migrateToEndpoint:request:queue:completion:]
  -[MRAVEndpoint effectivelyEqual:]
  -[MRAVEndpoint personalOutputDevices]
  -[MRAVEndpoint setHeadTrackedSpatialAudioMode:outputDeviceUID:queue:completion:]
  -[MRAVEndpoint origin]
  -[MRAVEndpoint logicalOutputDeviceCount]
  -[MRAVEndpoint removeOutputDeviceFromParentGroup:queue:completion:]
  -[MRAVEndpoint translateClusterUIDIfNeeded:]
  -[MRAVEndpoint addOutputDevices:initiator:fadeAudio:withReplyQueue:completion:]
  -[MRAVEndpoint isCompanionEndpoint]
  -[MRAVEndpoint _prepareToMigrateToEndpoint:queue:completion:]
  -[MRAVEndpoint migrateToOutputDevices:request:initiator:queue:completion:]
  -[MRAVEndpoint addOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVEndpoint .cxx_destruct]
  -[MRAVEndpoint descriptor]
  -[MRAVEndpoint externalDevice]
  -[MRAVEndpoint setExternalDevice:]
  -[MRAVEndpoint isEqual:]
  -[MRAVEndpoint outputDevices]
  -[MRAVEndpoint addObserver:]
  -[MRAVEndpoint _requestSharedAudioPresentationOutputContextModificationWithAddingDevices:removingDevices:settingDevices:replyQueue:completion:]
  -[MRAVEndpoint _init]
  -[MRAVEndpoint shortDescription]
  -[MRAVEndpoint dealloc]
  -[MRAVEndpoint removeObserver:]


MRPlaybackQueueSubscriptionController : NSObject <NSSecureCoding>
 @property  MRPlayerPath *playerPath

  // class methods
  +[MRPlaybackQueueSubscriptionController supportsSecureCoding]

  // instance methods
  -[MRPlaybackQueueSubscriptionController addRequest:]
  -[MRPlaybackQueueSubscriptionController playerPath]
  -[MRPlaybackQueueSubscriptionController initWithPlayerPath:]
  -[MRPlaybackQueueSubscriptionController initWithCoder:]
  -[MRPlaybackQueueSubscriptionController .cxx_destruct]
  -[MRPlaybackQueueSubscriptionController contentItemIdentifierForOffset:]
  -[MRPlaybackQueueSubscriptionController augmentCommandOptions:forCommand:]
  -[MRPlaybackQueueSubscriptionController restoreStateFromController:]
  -[MRPlaybackQueueSubscriptionController offsetForIdentifier:]
  -[MRPlaybackQueueSubscriptionController hasRequest:]
  -[MRPlaybackQueueSubscriptionController subscribeToPlaybackQueue:forRequest:]
  -[MRPlaybackQueueSubscriptionController removeRequest:]
  -[MRPlaybackQueueSubscriptionController enumerateFilteredContentItemsBySubscriptionsForContentItems:block:]
  -[MRPlaybackQueueSubscriptionController requestForSubscribedContentItemIdentifier:]
  -[MRPlaybackQueueSubscriptionController invalidate]
  -[MRPlaybackQueueSubscriptionController filteredContentItemsBySubscriptionsForContentItems:]
  -[MRPlaybackQueueSubscriptionController encodeWithCoder:]


MRPlaybackQueueClient : NSObject
  // instance methods
  -[MRPlaybackQueueClient _handlePlayerPathRemovedNotification:]
  -[MRPlaybackQueueClient .cxx_destruct]
  -[MRPlaybackQueueClient initWithQueue:]
  -[MRPlaybackQueueClient _handleApplicationRemovedNotification:]
  -[MRPlaybackQueueClient _handleOriginRemovedNotification:]
  -[MRPlaybackQueueClient dealloc]
  -[MRPlaybackQueueClient subscriptionControllerForPlayerPath:]


MRAVConcreteOutputDevice : MRAVOutputDevice
 @property  AVOutputDevice *avOutputDevice
 @property  MRAVOutputDeviceSourceInfo *sourceInfo

  // instance methods
  -[MRAVConcreteOutputDevice headTrackedSpatialAudioMode]
  -[MRAVConcreteOutputDevice clusterType]
  -[MRAVConcreteOutputDevice isAddedToHomeKit]
  -[MRAVConcreteOutputDevice supportsRapportRemoteControlTransport]
  -[MRAVConcreteOutputDevice supportsSharePlayHandoff]
  -[MRAVConcreteOutputDevice parentGroupContainsDiscoverableLeader]
  -[MRAVConcreteOutputDevice canRelayCommunicationChannel]
  -[MRAVConcreteOutputDevice supportsHeadTrackedSpatialAudio]
  -[MRAVConcreteOutputDevice bluetoothID]
  -[MRAVConcreteOutputDevice isLocalDevice]
  -[MRAVConcreteOutputDevice isAirPlayReceiverSessionActive]
  -[MRAVConcreteOutputDevice batteryLevel]
  -[MRAVConcreteOutputDevice configuredClusterSize]
  -[MRAVConcreteOutputDevice canAccessAppleMusic]
  -[MRAVConcreteOutputDevice MACAddress]
  -[MRAVConcreteOutputDevice hasBatteryLevel]
  -[MRAVConcreteOutputDevice supportsBluetoothSharing]
  -[MRAVConcreteOutputDevice deviceSubtype]
  -[MRAVConcreteOutputDevice allowsHeadTrackedSpatialAudio]
  -[MRAVConcreteOutputDevice currentBluetoothListeningMode]
  -[MRAVConcreteOutputDevice supportsRapport]
  -[MRAVConcreteOutputDevice isDeviceGroupable]
  -[MRAVConcreteOutputDevice presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[MRAVConcreteOutputDevice logicalDeviceID]
  -[MRAVConcreteOutputDevice requiresAuthorization]
  -[MRAVConcreteOutputDevice groupContainsGroupLeader]
  -[MRAVConcreteOutputDevice canAccessiCloudMusicLibrary]
  -[MRAVConcreteOutputDevice playingPairedDeviceName]
  -[MRAVConcreteOutputDevice producesLowFidelityAudio]
  -[MRAVConcreteOutputDevice canFetchMediaDataFromSender]
  -[MRAVConcreteOutputDevice modelSpecificInfo]
  -[MRAVConcreteOutputDevice sourceInfo]
  -[MRAVConcreteOutputDevice availableBluetoothListeningModes]
  -[MRAVConcreteOutputDevice airPlayGroupID]
  -[MRAVConcreteOutputDevice supportsMultiplayer]
  -[MRAVConcreteOutputDevice isRemoteControllable]
  -[MRAVConcreteOutputDevice canAccessRemoteAssets]
  -[MRAVConcreteOutputDevice clusterComposition]
  -[MRAVConcreteOutputDevice parentGroupIdentifier]
  -[MRAVConcreteOutputDevice isPickedOnPairedDevice]
  -[MRAVConcreteOutputDevice supportsHAP]
  -[MRAVConcreteOutputDevice supportsBufferedAirPlay]
  -[MRAVConcreteOutputDevice setAirPlayGroupID:]
  -[MRAVConcreteOutputDevice isGroupable]
  -[MRAVConcreteOutputDevice canPlayEncryptedProgressiveDownloadAssets]
  -[MRAVConcreteOutputDevice isGroupLeader]
  -[MRAVConcreteOutputDevice supportsExternalScreen]
  -[MRAVConcreteOutputDevice isHeadTrackedSpatialAudioActive]
  -[MRAVConcreteOutputDevice uid]
  -[MRAVConcreteOutputDevice name]
  -[MRAVConcreteOutputDevice volume]
  -[MRAVConcreteOutputDevice isProxyGroupPlayer]
  -[MRAVConcreteOutputDevice deviceType]
  -[MRAVConcreteOutputDevice volumeCapabilities]
  -[MRAVConcreteOutputDevice isVolumeControlAvailable]
  -[MRAVConcreteOutputDevice setVolume:]
  -[MRAVConcreteOutputDevice modelID]
  -[MRAVConcreteOutputDevice firmwareVersion]
  -[MRAVConcreteOutputDevice .cxx_destruct]
  -[MRAVConcreteOutputDevice avOutputDevice]
  -[MRAVConcreteOutputDevice initWithAVOutputDevice:sourceInfo:]
  -[MRAVConcreteOutputDevice setSourceInfo:]
  -[MRAVConcreteOutputDevice setAVOutputDevice:]
  -[MRAVConcreteOutputDevice setCurrentBluetoothListeningMode:error:]
  -[MRAVConcreteOutputDevice setHeadTrackedSpatialAudioMode:error:]
  -[MRAVConcreteOutputDevice setAllowsHeadTrackedSpatialAudio:error:]


MRAVClusterOutputDevice : MRAVConcreteOutputDevice
 @property  NSArray *memberOutputDevices

  // instance methods
  -[MRAVClusterOutputDevice primaryID]
  -[MRAVClusterOutputDevice isLocalDevice]
  -[MRAVClusterOutputDevice deviceSubtype]
  -[MRAVClusterOutputDevice clusterComposition]
  -[MRAVClusterOutputDevice uid]
  -[MRAVClusterOutputDevice deviceType]
  -[MRAVClusterOutputDevice .cxx_destruct]
  -[MRAVClusterOutputDevice initWithPrimaryOutputDevice:members:sourceInfo:]
  -[MRAVClusterOutputDevice anyDeviceSupportsMultiplayer]
  -[MRAVClusterOutputDevice initWithDevices:sourceInfo:]
  -[MRAVClusterOutputDevice memberOutputDevices]


MRPowerLogger : NSObject
 @property  NSObject<OS_dispatch_queue> *queue

  // class methods
  +[MRPowerLogger sharedLogger]

  // instance methods
  -[MRPowerLogger .cxx_destruct]
  -[MRPowerLogger logEvent:withInfo:]
  -[MRPowerLogger initWithQueue:]
  -[MRPowerLogger queue]


MRNowPlayingPlayerResponse : NSObject <NSCopying>
 @property  MRPlayerPath *playerPath
 @property  NSArray *supportedCommands
 @property  MRPlaybackQueue *playbackQueue
 @property  unsigned int playbackState
 @property  MRClient *clientProperties
 @property  NSDate *deviceLastPlayingDate
 @property  NSDate *playerLastPlayingDate
 @property  NSArray *proxiableSupportedCommands
 @property  BOOL deviceHasPlayedRecently
 @property  BOOL playerHasPlayedRecently
 @property  NSDate *lastPlayingDate
 @property  BOOL hasPlayedRecently

  // instance methods
  -[MRNowPlayingPlayerResponse setSupportedCommands:]
  -[MRNowPlayingPlayerResponse supportedCommands]
  -[MRNowPlayingPlayerResponse playerPath]
  -[MRNowPlayingPlayerResponse playbackState]
  -[MRNowPlayingPlayerResponse setPlaybackState:]
  -[MRNowPlayingPlayerResponse setDeviceLastPlayingDate:]
  -[MRNowPlayingPlayerResponse setPlayerLastPlayingDate:]
  -[MRNowPlayingPlayerResponse setPlayerPath:]
  -[MRNowPlayingPlayerResponse .cxx_destruct]
  -[MRNowPlayingPlayerResponse deviceLastPlayingDate]
  -[MRNowPlayingPlayerResponse playerLastPlayingDate]
  -[MRNowPlayingPlayerResponse hasPlayedRecently]
  -[MRNowPlayingPlayerResponse debugDictionaryRepresentation]
  -[MRNowPlayingPlayerResponse deviceHasPlayedRecently]
  -[MRNowPlayingPlayerResponse dictionaryRepresentation]
  -[MRNowPlayingPlayerResponse setPlaybackQueue:]
  -[MRNowPlayingPlayerResponse lastPlayingDate]
  -[MRNowPlayingPlayerResponse setClientProperties:]
  -[MRNowPlayingPlayerResponse playbackQueue]
  -[MRNowPlayingPlayerResponse playerHasPlayedRecently]
  -[MRNowPlayingPlayerResponse proxiableSupportedCommands]
  -[MRNowPlayingPlayerResponse clientProperties]
  -[MRNowPlayingPlayerResponse copyWithZone:]


MRNowPlayingControllerDestination : MRDestination
 @property  MRPlayerPath *unresolvedPlayerPath
 @property  MRPlayerPath *resolvedPlayerPath
 @property  BOOL isEndpointSet

  // instance methods
  -[MRNowPlayingControllerDestination setUnresolvedPlayerPath:]
  -[MRNowPlayingControllerDestination unresolvedPlayerPath]
  -[MRNowPlayingControllerDestination .cxx_destruct]
  -[MRNowPlayingControllerDestination isEndpointSet]
  -[MRNowPlayingControllerDestination resolvedPlayerPath]
  -[MRNowPlayingControllerDestination setIsEndpointSet:]
  -[MRNowPlayingControllerDestination initWithConfiguration:]
  -[MRNowPlayingControllerDestination setEndpoint:]
  -[MRNowPlayingControllerDestination copyWithZone:]
  -[MRNowPlayingControllerDestination setResolvedPlayerPath:]


MRNowPlayingController : NSObject
 @property  <MRNowPlayingControllerImpl> *impl
 @property  MRNowPlayingPlayerResponse *response
 @property  MRNowPlayingControllerConfiguration *configuration
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSError *lastError
 @property  NSDate *allocationDate
 @property  NSDate *beginDate
 @property  NSDate *endDate
 @property  NSDate *lastInitialLoadDate
 @property  NSDate *lastInvalidationDate
 @property  NSDate *lastErrorDate
 @property  NSDate *lastUpdateDate
 @property  <MRNowPlayingControllerDelegate> *delegate
 @property  MRDestination *destination

  // class methods
  +[MRNowPlayingController proactiveEndpointController]
  +[MRNowPlayingController performRequest:withCompletion:]
  +[MRNowPlayingController localRouteController]

  // instance methods
  -[MRNowPlayingController playerPath]
  -[MRNowPlayingController lastUpdateDate]
  -[MRNowPlayingController delegateQueue]
  -[MRNowPlayingController initWithUID:]
  -[MRNowPlayingController _notifyDelegateOfError:]
  -[MRNowPlayingController _notifyDelegateOfNewResponse:]
  -[MRNowPlayingController setDelegateQueue:]
  -[MRNowPlayingController _notifyDelegateOfUpdatedArtwork:]
  -[MRNowPlayingController setEndDate:]
  -[MRNowPlayingController _notifyDelegateOfInvalidation]
  -[MRNowPlayingController _notifyDelegateOfUpdatedPlayerLastPlayingDate:]
  -[MRNowPlayingController configuration]
  -[MRNowPlayingController beginLoadingUpdates]
  -[MRNowPlayingController endLoadingUpdates]
  -[MRNowPlayingController _notifyDelegateOfUpdatedDeviceLastPlayingDate:]
  -[MRNowPlayingController lastError]
  -[MRNowPlayingController .cxx_destruct]
  -[MRNowPlayingController createImplWithConfiguration:]
  -[MRNowPlayingController allocationDate]
  -[MRNowPlayingController lastInitialLoadDate]
  -[MRNowPlayingController lastInvalidationDate]
  -[MRNowPlayingController beginDate]
  -[MRNowPlayingController _notifyDelegateOfUpdate]
  -[MRNowPlayingController setAllocationDate:]
  -[MRNowPlayingController setLastInitialLoadDate:]
  -[MRNowPlayingController setLastInvalidationDate:]
  -[MRNowPlayingController destination]
  -[MRNowPlayingController setDelegate:]
  -[MRNowPlayingController setImpl:]
  -[MRNowPlayingController _notifyDelegateOfPlayerPathChange:]
  -[MRNowPlayingController lastErrorDate]
  -[MRNowPlayingController _notifyDelegateOfPlaybackQueueChange:]
  -[MRNowPlayingController _notifyDelegateOfUpdatedContentItemsWithContentItems:]
  -[MRNowPlayingController _notifyDelegateOfPlaybackStateChange:]
  -[MRNowPlayingController _notifyDelegateOfSupportedCommandsChange:]
  -[MRNowPlayingController _notifyDelegateOfUpdatedClientProperties:]
  -[MRNowPlayingController response]
  -[MRNowPlayingController initWithConfiguration:]
  -[MRNowPlayingController initWithDestination:]
  -[MRNowPlayingController setBeginDate:]
  -[MRNowPlayingController delegate]
  -[MRNowPlayingController setLastErrorDate:]
  -[MRNowPlayingController setLastError:]
  -[MRNowPlayingController performRequestWithCompletion:]
  -[MRNowPlayingController dealloc]
  -[MRNowPlayingController sendCommand:options:appOptions:completion:]
  -[MRNowPlayingController impl]
  -[MRNowPlayingController setLastUpdateDate:]
  -[MRNowPlayingController sendCommand:options:completion:]
  -[MRNowPlayingController endDate]
  -[MRNowPlayingController setConfiguration:]
  -[MRNowPlayingController setResponse:]


MRNowPlayingControllerHelper : NSObject <MRNowPlayingControllerDelegate>
 @property  @? didLoadResponse
 @property  @? playbackStateDidChange
 @property  @? playbackQueueDidChange
 @property  @? contentItemsDidUpdate
 @property  @? contentItemsDidLoadArtwork
 @property  @? supportedCommandsDidChange
 @property  @? playerLastPlayingDateDidChange
 @property  @? clientPropertiesDidChange
 @property  @? playerPathDidChange
 @property  @? didInvalidate
 @property  @? didFailWithError
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRNowPlayingControllerHelper controller:didLoadResponse:]
  -[MRNowPlayingControllerHelper didInvalidate]
  -[MRNowPlayingControllerHelper controller:playbackQueueDidChangeFrom:to:]
  -[MRNowPlayingControllerHelper controller:didLoadArtworkForContentItems:]
  -[MRNowPlayingControllerHelper controller:supportedCommandsDidChangeFrom:to:]
  -[MRNowPlayingControllerHelper controller:playerLastPlayingDateDidChange:]
  -[MRNowPlayingControllerHelper .cxx_destruct]
  -[MRNowPlayingControllerHelper setDidLoadResponse:]
  -[MRNowPlayingControllerHelper setPlaybackStateDidChange:]
  -[MRNowPlayingControllerHelper setPlaybackQueueDidChange:]
  -[MRNowPlayingControllerHelper setContentItemsDidUpdate:]
  -[MRNowPlayingControllerHelper setContentItemsDidLoadArtwork:]
  -[MRNowPlayingControllerHelper setSupportedCommandsDidChange:]
  -[MRNowPlayingControllerHelper setPlayerLastPlayingDateDidChange:]
  -[MRNowPlayingControllerHelper setDidFailWithError:]
  -[MRNowPlayingControllerHelper setClientPropertiesDidChange:]
  -[MRNowPlayingControllerHelper setPlayerPathDidChange:]
  -[MRNowPlayingControllerHelper controller:contentItemsDidUpdateWithContentItemChanges:]
  -[MRNowPlayingControllerHelper controller:playerPathDidChange:]
  -[MRNowPlayingControllerHelper controller:clientPropertiesDidChangeFrom:to:]
  -[MRNowPlayingControllerHelper controller:playbackStateDidChangeFrom:to:]
  -[MRNowPlayingControllerHelper didLoadResponse]
  -[MRNowPlayingControllerHelper playbackStateDidChange]
  -[MRNowPlayingControllerHelper playbackQueueDidChange]
  -[MRNowPlayingControllerHelper contentItemsDidUpdate]
  -[MRNowPlayingControllerHelper contentItemsDidLoadArtwork]
  -[MRNowPlayingControllerHelper supportedCommandsDidChange]
  -[MRNowPlayingControllerHelper playerLastPlayingDateDidChange]
  -[MRNowPlayingControllerHelper clientPropertiesDidChange]
  -[MRNowPlayingControllerHelper playerPathDidChange]
  -[MRNowPlayingControllerHelper didFailWithError]
  -[MRNowPlayingControllerHelper controller:didFailWithError:]
  -[MRNowPlayingControllerHelper controllerWillReloadForInvalidation:]
  -[MRNowPlayingControllerHelper setDidInvalidate:]


MRNowPlayingControllerConfiguration : NSObject <NSCopying>
 @property  BOOL singleShot
 @property  MRPlaybackQueueRequest *playbackQueueRequest
 @property  MRDestination *destination
 @property  BOOL requestSupportedCommands
 @property  BOOL requestPlaybackState
 @property  BOOL requestLastPlayingDate
 @property  BOOL requestClientProperties
 @property  BOOL requestPlaybackQueue
 @property  NSString *label

  // instance methods
  -[MRNowPlayingControllerConfiguration initWithEndpoint:]
  -[MRNowPlayingControllerConfiguration label]
  -[MRNowPlayingControllerConfiguration setDestination:]
  -[MRNowPlayingControllerConfiguration initWithOrigin:]
  -[MRNowPlayingControllerConfiguration initWithOutputDeviceUID:]
  -[MRNowPlayingControllerConfiguration .cxx_destruct]
  -[MRNowPlayingControllerConfiguration setRequestPlaybackQueue:]
  -[MRNowPlayingControllerConfiguration setSingleShot:]
  -[MRNowPlayingControllerConfiguration requestPlaybackQueue]
  -[MRNowPlayingControllerConfiguration setRequestLastPlayingDate:]
  -[MRNowPlayingControllerConfiguration destination]
  -[MRNowPlayingControllerConfiguration requestSupportedCommands]
  -[MRNowPlayingControllerConfiguration requestPlaybackState]
  -[MRNowPlayingControllerConfiguration playbackQueueRequest]
  -[MRNowPlayingControllerConfiguration requestLastPlayingDate]
  -[MRNowPlayingControllerConfiguration requestClientProperties]
  -[MRNowPlayingControllerConfiguration isSingleShot]
  -[MRNowPlayingControllerConfiguration initWithDestination:]
  -[MRNowPlayingControllerConfiguration setRequestPlaybackState:]
  -[MRNowPlayingControllerConfiguration setPlaybackQueueRequest:]
  -[MRNowPlayingControllerConfiguration setRequestSupportedCommands:]
  -[MRNowPlayingControllerConfiguration setRequestClientProperties:]
  -[MRNowPlayingControllerConfiguration setLabel:]
  -[MRNowPlayingControllerConfiguration copyWithZone:]


MRPlayer : NSObject <NSCopying>
 @property  NSString *identifier
 @property  NSString *displayName
 @property  NSURL *appIcon
 @property  long long audioSessionType
 @property  NSSet *mxSessionIDs
 @property  unsigned int audioSessionID
 @property  BOOL hasAuxiliaryProperties
 @property  MRPlayer *skeleton
 @property  NSData *data
 @property  BOOL defaultPlayer

  // class methods
  +[MRPlayer anyPlayer]
  +[MRPlayer defaultPlayer]

  // instance methods
  -[MRPlayer hasAuxiliaryProperties]
  -[MRPlayer skeleton]
  -[MRPlayer displayName]
  -[MRPlayer appIcon]
  -[MRPlayer mergeFrom:]
  -[MRPlayer audioSessionType]
  -[MRPlayer isDefaultPlayer]
  -[MRPlayer .cxx_destruct]
  -[MRPlayer initWithIdentifier:displayName:]
  -[MRPlayer setAudioSessionID:]
  -[MRPlayer data]
  -[MRPlayer mxSessionIDs]
  -[MRPlayer isEqual:]
  -[MRPlayer setAudioSessionType:]
  -[MRPlayer identifier]
  -[MRPlayer setDisplayName:]
  -[MRPlayer initWithData:]
  -[MRPlayer setIdentifier:]
  -[MRPlayer setMxSessionIDs:]
  -[MRPlayer setAppIcon:]
  -[MRPlayer copyWithZone:]
  -[MRPlayer audioSessionID]


_MRRegisterForGameControllerEventsMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRegisterForGameControllerEventsMessageProtobuf dictionaryRepresentation]
  -[_MRRegisterForGameControllerEventsMessageProtobuf writeTo:]
  -[_MRRegisterForGameControllerEventsMessageProtobuf isEqual:]
  -[_MRRegisterForGameControllerEventsMessageProtobuf readFrom:]
  -[_MRRegisterForGameControllerEventsMessageProtobuf copyWithZone:]


_MRRemoveEndpointsMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRemoveEndpointsMessageProtobuf .cxx_destruct]
  -[_MRRemoveEndpointsMessageProtobuf dictionaryRepresentation]
  -[_MRRemoveEndpointsMessageProtobuf writeTo:]
  -[_MRRemoveEndpointsMessageProtobuf isEqual:]
  -[_MRRemoveEndpointsMessageProtobuf readFrom:]
  -[_MRRemoveEndpointsMessageProtobuf copyWithZone:]


_MRGameControllerButtonsProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGameControllerButtonsProtobuf dictionaryRepresentation]
  -[_MRGameControllerButtonsProtobuf writeTo:]
  -[_MRGameControllerButtonsProtobuf isEqual:]
  -[_MRGameControllerButtonsProtobuf readFrom:]
  -[_MRGameControllerButtonsProtobuf copyWithZone:]


MRNowPlayingPlayerClientRequests : NSObject <MRNowPlayingClientState>
 @property  MRPlayerPath *playerPath
 @property  MRPlaybackQueueSubscriptionController *subscriptionController
 @property  unsigned int playbackState
 @property  MRPlaybackQueue *playbackQueue
 @property  NSArray *supportedCommands
 @property  MRPlayer *playerProperties

  // instance methods
  -[MRNowPlayingPlayerClientRequests setSupportedCommands:]
  -[MRNowPlayingPlayerClientRequests restoreNowPlayingClientState]
  -[MRNowPlayingPlayerClientRequests supportedCommands]
  -[MRNowPlayingPlayerClientRequests playerPath]
  -[MRNowPlayingPlayerClientRequests subscriptionController]
  -[MRNowPlayingPlayerClientRequests playbackState]
  -[MRNowPlayingPlayerClientRequests initWithPlayerPath:]
  -[MRNowPlayingPlayerClientRequests enqueuePlaybackQueueRequest:completion:]
  -[MRNowPlayingPlayerClientRequests setPlaybackState:]
  -[MRNowPlayingPlayerClientRequests updateContentItems:]
  -[MRNowPlayingPlayerClientRequests transactionCallbacksForName:]
  -[MRNowPlayingPlayerClientRequests handleSupportedCommandsRequestWithCompletion:]
  -[MRNowPlayingPlayerClientRequests .cxx_destruct]
  -[MRNowPlayingPlayerClientRequests setPlaybackQueue:]
  -[MRNowPlayingPlayerClientRequests addTransactionCallback:forName:]
  -[MRNowPlayingPlayerClientRequests updateContentItemArtwork:]
  -[MRNowPlayingPlayerClientRequests setPlayerProperties:]
  -[MRNowPlayingPlayerClientRequests removePlaybackQueueCompletionForRequest:]
  -[MRNowPlayingPlayerClientRequests receiveTransaction:fromMessage:]
  -[MRNowPlayingPlayerClientRequests playbackQueue]
  -[MRNowPlayingPlayerClientRequests addPlaybackQueueCompletion:forRequest:]
  -[MRNowPlayingPlayerClientRequests dealloc]
  -[MRNowPlayingPlayerClientRequests handlePlaybackStateRequestWithCompletion:]
  -[MRNowPlayingPlayerClientRequests playerProperties]
  -[MRNowPlayingPlayerClientRequests handlePlayerPropertiesRequestWithCompletion:]


MRNowPlayingArtwork : NSObject
 @property  unsigned int type
 @property  BOOL hasArtworkData

  // instance methods
  -[MRNowPlayingArtwork copyImageData]
  -[MRNowPlayingArtwork hasArtworkData]
  -[MRNowPlayingArtwork type]


MRNowPlayingArtworkImage : MRNowPlayingArtwork
 @property  NSData *imageData
 @property  NSString *mimeType

  // instance methods
  -[MRNowPlayingArtworkImage copyImageData]
  -[MRNowPlayingArtworkImage .cxx_destruct]
  -[MRNowPlayingArtworkImage imageData]
  -[MRNowPlayingArtworkImage initWithImageData:mimeType:]
  -[MRNowPlayingArtworkImage hasArtworkData]
  -[MRNowPlayingArtworkImage mimeType]
  -[MRNowPlayingArtworkImage isEqual:]
  -[MRNowPlayingArtworkImage type]


MRTransportExternalDevice : MRExternalDevice <MRProtocolClientConnectionDelegate>
 @property  MRExternalClientConnection *clientConnection
 @property  MROrigin *customOrigin
 @property  MRDeviceInfo *deviceInfo
 @property  NSData *nowPlayingArtwork
 @property  NSDictionary *nowPlayingInfo
 @property  MRContentItem *nowPlayingItem
 @property  MRPlayerPath *playerPath
 @property  @? pairingCallback
 @property  NSObject<OS_dispatch_queue> *pairingCallbackQueue
 @property  @? connectionStateCallback
 @property  NSObject<OS_dispatch_queue> *connectionStateCallbackQueue
 @property  @? nameCallback
 @property  NSObject<OS_dispatch_queue> *nameCallbackQueue
 @property  @? pairingAllowedCallback
 @property  NSObject<OS_dispatch_queue> *pairingAllowedCallbackQueue
 @property  @? customDataCallback
 @property  NSObject<OS_dispatch_queue> *customDataCallbackQueue
 @property  @? outputDevicesUpdatedCallback
 @property  NSObject<OS_dispatch_queue> *outputDevicesUpdatedCallbackQueue
 @property  @? outputDevicesRemovedCallback
 @property  NSObject<OS_dispatch_queue> *outputDevicesRemovedCallbackQueue
 @property  @? volumeCallback
 @property  NSObject<OS_dispatch_queue> *volumeCallbackQueue
 @property  @? volumeControlCapabilitiesCallback
 @property  NSObject<OS_dispatch_queue> *volumeControlCapabilitiesCallbackQueue
 @property  NSObject<OS_dispatch_queue> *outputContextCallbackQueue
 @property  NSObject<OS_dispatch_queue> *workerQueue
 @property  MRExternalDeviceTransport *transport
 @property  BOOL isCallingClientCallback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRTransportExternalDevice nowPlayingInfo]
  -[MRTransportExternalDevice isPaired]
  -[MRTransportExternalDevice connectionState]
  -[MRTransportExternalDevice setNowPlayingInfo:]
  -[MRTransportExternalDevice playerPath]
  -[MRTransportExternalDevice transport]
  -[MRTransportExternalDevice deviceInfo]
  -[MRTransportExternalDevice outputDeviceVolumeControlCapabilities:queue:completion:]
  -[MRTransportExternalDevice uid]
  -[MRTransportExternalDevice setListeningMode:outputDeviceUID:queue:completion:]
  -[MRTransportExternalDevice setOutputDeviceVolume:outputDeviceUID:queue:completion:]
  -[MRTransportExternalDevice setWantsVolumeNotifications:]
  -[MRTransportExternalDevice setWantsOutputDeviceNotifications:]
  -[MRTransportExternalDevice setWantsNowPlayingArtworkNotifications:]
  -[MRTransportExternalDevice setWantsNowPlayingNotifications:]
  -[MRTransportExternalDevice setClientConnection:]
  -[MRTransportExternalDevice modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterAwareDeviceUIDs:removingClusterAwareDeviceUIDs:settingClusterAwareDeviceUIDs:withReplyQueue:completion:]
  -[MRTransportExternalDevice name]
  -[MRTransportExternalDevice setConnectionStateCallback:withQueue:]
  -[MRTransportExternalDevice clientDidDisconnect:error:]
  -[MRTransportExternalDevice outputDeviceVolume:queue:completion:]
  -[MRTransportExternalDevice unpair]
  -[MRTransportExternalDevice createHostedEndpointWithOutputDeviceUIDs:queue:completion:]
  -[MRTransportExternalDevice setDeviceInfo:]
  -[MRTransportExternalDevice subscribedPlayerPaths]
  -[MRTransportExternalDevice setSubscribedPlayerPaths:]
  -[MRTransportExternalDevice hostName]
  -[MRTransportExternalDevice personalOutputDevices]
  -[MRTransportExternalDevice port]
  -[MRTransportExternalDevice isValid]
  -[MRTransportExternalDevice setNowPlayingArtwork:]
  -[MRTransportExternalDevice setPlayerPath:]
  -[MRTransportExternalDevice .cxx_destruct]
  -[MRTransportExternalDevice nowPlayingItem]
  -[MRTransportExternalDevice setNowPlayingItem:]
  -[MRTransportExternalDevice _localDeviceInfoDidChangeNotification:]
  -[MRTransportExternalDevice _transportDeviceInfoDidChangeNotification:]
  -[MRTransportExternalDevice _contentItemUpdatedNotification:]
  -[MRTransportExternalDevice _activeSystemEndpointDidChangeNotification:]
  -[MRTransportExternalDevice _handleDeviceInfoChange:oldDevice:]
  -[MRTransportExternalDevice setName:]
  -[MRTransportExternalDevice _cleanUpWithReason:error:]
  -[MRTransportExternalDevice _onSerialQueue_registerOriginCallbacks]
  -[MRTransportExternalDevice _updateNowPlayingInfo]
  -[MRTransportExternalDevice _callClientConnectionStateCallback:previousConnectionState:error:]
  -[MRTransportExternalDevice setPairingCallback:]
  -[MRTransportExternalDevice setPairingCallbackQueue:]
  -[MRTransportExternalDevice workerQueue]
  -[MRTransportExternalDevice setPairingAllowedCallback:]
  -[MRTransportExternalDevice setPairingAllowedCallbackQueue:]
  -[MRTransportExternalDevice setOutputDevicesUpdatedCallback:]
  -[MRTransportExternalDevice setOutputDevicesUpdatedCallbackQueue:]
  -[MRTransportExternalDevice setOutputDevicesRemovedCallback:]
  -[MRTransportExternalDevice _cleanUpStreamsWithReason:error:]
  -[MRTransportExternalDevice setOutputDevicesRemovedCallbackQueue:]
  -[MRTransportExternalDevice setVolumeControlCapabilitiesCallback:]
  -[MRTransportExternalDevice setVolumeControlCapabilitiesCallbackQueue:]
  -[MRTransportExternalDevice _onWorkerQueue_initializeConnectionWithOptions:userInfo:]
  -[MRTransportExternalDevice setCustomOrigin:]
  -[MRTransportExternalDevice _onWorkerQueue_loadDeviceInfoWithUserInfo:]
  -[MRTransportExternalDevice _onWorkerQueue_openSecuritySessionWithUserInfo:]
  -[MRTransportExternalDevice _onWorkerQueue_registerCustomOriginWithUserInfo:]
  -[MRTransportExternalDevice _onWorkerQueue_reRegisterCustomOriginWithUserInfo:]
  -[MRTransportExternalDevice _onWorkerQueue_syncClientStateWithUserInfo:]
  -[MRTransportExternalDevice setConnectionState:error:]
  -[MRTransportExternalDevice _onWorkerQueue_connectWithOptions:isRetry:clientBundleIdentifier:userInfo:]
  -[MRTransportExternalDevice _onWorkerQueue_disconnect:]
  -[MRTransportExternalDevice _handleSetStateMessage:]
  -[MRTransportExternalDevice _onSerialQueue_prepareToConnectWithOptions:clientBundleIdentifier:userInfo:]
  -[MRTransportExternalDevice _onSerialQueue_prepareToDisconnect:]
  -[MRTransportExternalDevice sendClientUpdatesConfigMessageWithCompletion:]
  -[MRTransportExternalDevice _handleCryptoPairingMessage:]
  -[MRTransportExternalDevice _handleNotificationMessage:]
  -[MRTransportExternalDevice _handleSetArtworkMessage:]
  -[MRTransportExternalDevice _handleTransactionMessage:]
  -[MRTransportExternalDevice _handleDeviceInfoUpdateMessage:]
  -[MRTransportExternalDevice _handleSetConnectionStateMessage:]
  -[MRTransportExternalDevice _handleGenericMessage:]
  -[MRTransportExternalDevice _handleSetNowPlayingClientMessage:]
  -[MRTransportExternalDevice _handleSetNowPlayingPlayerMessage:]
  -[MRTransportExternalDevice _handleRemoveClientMessage:]
  -[MRTransportExternalDevice _handleRemovePlayerMessage:]
  -[MRTransportExternalDevice _handleUpdateClientMessage:]
  -[MRTransportExternalDevice _handleUpdateContentItemsMessage:]
  -[MRTransportExternalDevice _handleUpdateContentItemArtworkMessage:]
  -[MRTransportExternalDevice _handleUpdatePlayerMessage:]
  -[MRTransportExternalDevice _handlePromptForRouteAuthorizationMessage:]
  -[MRTransportExternalDevice _handlePresentRouteAuthorizationStatusMessage:]
  -[MRTransportExternalDevice _handleVolumeDidChangeMessage:]
  -[MRTransportExternalDevice _handleVolumeControlCapabilitiesDidChangeMessage:]
  -[MRTransportExternalDevice _handleLegacyVolumeControlCapabilitiesDidChangeMessage:]
  -[MRTransportExternalDevice _handleOutputDevicesUpdatedMessage:]
  -[MRTransportExternalDevice _handleOutputDevicesRemovedMessage:]
  -[MRTransportExternalDevice _handleSetDefaultSupportedCommandsMessage:]
  -[MRTransportExternalDevice _handleUpdateActiveSystemEndpoint:]
  -[MRTransportExternalDevice _handleSetPlayerClientPropertiesMessage:]
  -[MRTransportExternalDevice _handleSetOriginClientPropertiesMessage:]
  -[MRTransportExternalDevice _handleDiscoveryUpdateOutputDevicesMessage:]
  -[MRTransportExternalDevice _onWorkerQueue_createClientConnectionWithTransport:]
  -[MRTransportExternalDevice _callClientPairingCallback:]
  -[MRTransportExternalDevice _handleRemoteCommand:withOptions:playerPath:completion:]
  -[MRTransportExternalDevice _handlePlaybackQueueRequest:forPlayer:completion:]
  -[MRTransportExternalDevice _handlePlaybackSessionRequest:forPlayerPath:completion:]
  -[MRTransportExternalDevice _handlePlaybackSessionMigrateRequest:request:forPlayerPath:completion:]
  -[MRTransportExternalDevice _handlePlaybackSessionMigrateBeginRequest:forPlayerPath:completion:]
  -[MRTransportExternalDevice _sendClientMessage:completion:]
  -[MRTransportExternalDevice _createPlaybackQueue:]
  -[MRTransportExternalDevice _handlePlaybackSessionMigrateEndRequest:error:forPlayerPath:completion:]
  -[MRTransportExternalDevice _handleLegacyPlaybackQueueRequestWithCompletion:]
  -[MRTransportExternalDevice _handlePlaybackQueueResponse:completion:]
  -[MRTransportExternalDevice _callClientNameCallback]
  -[MRTransportExternalDevice veirfyConnectionStatusAndMaybeDisconnect:]
  -[MRTransportExternalDevice _handleSetStateMessageModern:]
  -[MRTransportExternalDevice _handleNotificationMessageModern:]
  -[MRTransportExternalDevice _handleNotificationMessageLegacy:]
  -[MRTransportExternalDevice _callOutputDevicesUpdatedCallbackWithOutputDevices:]
  -[MRTransportExternalDevice _callOutputDevicesRemovedCallbackWithOutputDeviceUIDs:]
  -[MRTransportExternalDevice _callVolumeCallback:outputDeviceUID:]
  -[MRTransportExternalDevice _callVolumeControlCapabilitiesCallback:outputDeviceUID:]
  -[MRTransportExternalDevice _callClientAllowsPairingCallback]
  -[MRTransportExternalDevice pairingCallback]
  -[MRTransportExternalDevice _callClientCustomDataCallback:name:]
  -[MRTransportExternalDevice isCallingClientCallback]
  -[MRTransportExternalDevice pairingCallbackQueue]
  -[MRTransportExternalDevice pairingAllowedCallback]
  -[MRTransportExternalDevice pairingAllowedCallbackQueue]
  -[MRTransportExternalDevice outputDevicesUpdatedCallback]
  -[MRTransportExternalDevice outputDevicesUpdatedCallbackQueue]
  -[MRTransportExternalDevice clientConnection]
  -[MRTransportExternalDevice outputDevicesRemovedCallback]
  -[MRTransportExternalDevice outputDevicesRemovedCallbackQueue]
  -[MRTransportExternalDevice volumeControlCapabilitiesCallback]
  -[MRTransportExternalDevice volumeControlCapabilitiesCallbackQueue]
  -[MRTransportExternalDevice outputContextCallbackQueue]
  -[MRTransportExternalDevice setOutputContextCallbackQueue:]
  -[MRTransportExternalDevice setWorkerQueue:]
  -[MRTransportExternalDevice initWithTransport:]
  -[MRTransportExternalDevice setDiscoveryMode:forConfiguration:]
  -[MRTransportExternalDevice setDiscoveryOutputDevicesChangedCallback:]
  -[MRTransportExternalDevice disconnect:]
  -[MRTransportExternalDevice connectWithOptions:userInfo:]
  -[MRTransportExternalDevice nameCallback]
  -[MRTransportExternalDevice volumeCallback]
  -[MRTransportExternalDevice supportedMessages]
  -[MRTransportExternalDevice nowPlayingArtwork]
  -[MRTransportExternalDevice dealloc]
  -[MRTransportExternalDevice sendClientUpdatesConfigMessage]
  -[MRTransportExternalDevice errorForCurrentState]
  -[MRTransportExternalDevice setIsCallingClientCallback:]
  -[MRTransportExternalDevice currentClientUpdatesConfigMessage]
  -[MRTransportExternalDevice customOrigin]
  -[MRTransportExternalDevice clientConnection:didReceiveMessage:]
  -[MRTransportExternalDevice setUsingSystemPairing:]
  -[MRTransportExternalDevice sendCustomData:withName:]
  -[MRTransportExternalDevice setOutputDevicesUpdatedCallback:withQueue:]
  -[MRTransportExternalDevice setOutputDevicesRemovedCallback:withQueue:]
  -[MRTransportExternalDevice setVolumeChangedCallback:withQueue:]
  -[MRTransportExternalDevice setVolumeControlCapabilitiesCallback:withQueue:]
  -[MRTransportExternalDevice removeFromParentGroup:queue:completion:]
  -[MRTransportExternalDevice connectionRecoveryBehavior]
  -[MRTransportExternalDevice setConnectionRecoveryBehavior:]
  -[MRTransportExternalDevice connectionStateCallback]
  -[MRTransportExternalDevice setConnectionStateCallback:]
  -[MRTransportExternalDevice setConnectionStateCallbackQueue:]
  -[MRTransportExternalDevice setNameCallback:]
  -[MRTransportExternalDevice setNameCallbackQueue:]
  -[MRTransportExternalDevice customDataCallback]
  -[MRTransportExternalDevice setCustomDataCallback:]
  -[MRTransportExternalDevice setCustomDataCallbackQueue:]
  -[MRTransportExternalDevice setVolumeCallback:]
  -[MRTransportExternalDevice setVolumeCallbackQueue:]
  -[MRTransportExternalDevice connectionStateCallbackQueue]
  -[MRTransportExternalDevice nameCallbackQueue]
  -[MRTransportExternalDevice customDataCallbackQueue]
  -[MRTransportExternalDevice volumeCallbackQueue]
  -[MRTransportExternalDevice wantsNowPlayingNotifications]
  -[MRTransportExternalDevice wantsVolumeNotifications]
  -[MRTransportExternalDevice wantsNowPlayingArtworkNotifications]
  -[MRTransportExternalDevice wantsOutputDeviceNotifications]
  -[MRTransportExternalDevice wantsEndpointChangeNotifications]
  -[MRTransportExternalDevice setWantsEndpointChangeNotifications:]
  -[MRTransportExternalDevice wantsSystemEndpointNotifications]
  -[MRTransportExternalDevice isUsingSystemPairing]
  -[MRTransportExternalDevice setWantsSystemEndpointNotifications:]
  -[MRTransportExternalDevice connectWithOptions:clientBundleIdentifier:userInfo:]
  -[MRTransportExternalDevice setPairingCallback:withQueue:]
  -[MRTransportExternalDevice setNameCallback:withQueue:]
  -[MRTransportExternalDevice setPairingAllowedCallback:withQueue:]
  -[MRTransportExternalDevice setCustomDataCallback:withQueue:]
  -[MRTransportExternalDevice ping:callback:withQueue:]
  -[MRTransportExternalDevice sendButtonEvent:]


MRJSONTransportExternalDevice : MRTransportExternalDevice <MRProtocolClientConnectionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRJSONTransportExternalDevice isPaired]
  -[MRJSONTransportExternalDevice _handleSetStateMessage:]
  -[MRJSONTransportExternalDevice _onWorkerQueue_createClientConnectionWithTransport:]


MRNowPlayingClientCommandQueueEntry : NSObject
 @property  unsigned int command
 @property  NSMutableDictionary *options
 @property  MRPlayerPath *playerPath
 @property  NSDate *dateCreated
 @property  @? commandCompletion

  // instance methods
  -[MRNowPlayingClientCommandQueueEntry playerPath]
  -[MRNowPlayingClientCommandQueueEntry setCommand:]
  -[MRNowPlayingClientCommandQueueEntry options]
  -[MRNowPlayingClientCommandQueueEntry setOptions:]
  -[MRNowPlayingClientCommandQueueEntry setPlayerPath:]
  -[MRNowPlayingClientCommandQueueEntry .cxx_destruct]
  -[MRNowPlayingClientCommandQueueEntry command]
  -[MRNowPlayingClientCommandQueueEntry commandCompletion]
  -[MRNowPlayingClientCommandQueueEntry setCommandCompletion:]
  -[MRNowPlayingClientCommandQueueEntry dateCreated]
  -[MRNowPlayingClientCommandQueueEntry setDateCreated:]


MRNowPlayingOriginClient : NSObject <MRNowPlayingClientState>
 @property  MROrigin *origin
 @property  BOOL overrideApp
 @property  NSString *overrideAppBundleID
 @property  unsigned int hardwareRemoteBehavior
 @property  unsigned int routeDiscoveryMode
 @property  NSArray *applicationPickedRoutes
 @property  unsigned int inputMode
 @property  unsigned int volumeCapabilities
 @property  float volume
 @property  MRApplicationActivity *activity
 @property  MRDeviceInfo *deviceInfo
 @property  @? playbackQueueCallback
 @property  @? playbackQueueTransactionCallback
 @property  @? commandCallback
 @property  @? playbackSessionCallback
 @property  @? playbackSessionMigrateBeginCallback
 @property  @? playbackSessionMigrateEndCallback
 @property  @? playbackSessionMigrateRequestCallback
 @property  @? beginLyricsEventCallback
 @property  @? endLyricsEventCallback
 @property  @? clientMessageCallback
 @property  MRClient *activeNowPlayingClient
 @property  NSArray *nowPlayingClients

  // instance methods
  -[MRNowPlayingOriginClient restoreNowPlayingClientState]
  -[MRNowPlayingOriginClient setVolumeCapabilities:]
  -[MRNowPlayingOriginClient playbackSessionMigrateEndCallback]
  -[MRNowPlayingOriginClient playbackSessionMigrateBeginCallback]
  -[MRNowPlayingOriginClient _handleDeviceInfoDidChangeNotification:]
  -[MRNowPlayingOriginClient playbackSessionMigrateRequestCallback]
  -[MRNowPlayingOriginClient setPlaybackSessionMigrateRequestCallback:]
  -[MRNowPlayingOriginClient setActivity:]
  -[MRNowPlayingOriginClient deviceInfo]
  -[MRNowPlayingOriginClient setBeginLyricsEventCallback:]
  -[MRNowPlayingOriginClient setPlaybackSessionCallback:]
  -[MRNowPlayingOriginClient playbackSessionCallback]
  -[MRNowPlayingOriginClient activeNowPlayingClient]
  -[MRNowPlayingOriginClient removeAllClients]
  -[MRNowPlayingOriginClient volume]
  -[MRNowPlayingOriginClient inputMode]
  -[MRNowPlayingOriginClient endLyricsEventCallback]
  -[MRNowPlayingOriginClient nowPlayingClients]
  -[MRNowPlayingOriginClient volumeCapabilities]
  -[MRNowPlayingOriginClient setEndLyricsEventCallback:]
  -[MRNowPlayingOriginClient beginLyricsEventCallback]
  -[MRNowPlayingOriginClient setDeviceInfo:]
  -[MRNowPlayingOriginClient removeClient:]
  -[MRNowPlayingOriginClient setVolume:]
  -[MRNowPlayingOriginClient setPlaybackSessionMigrateBeginCallback:]
  -[MRNowPlayingOriginClient origin]
  -[MRNowPlayingOriginClient setPlaybackSessionMigrateEndCallback:]
  -[MRNowPlayingOriginClient initWithOrigin:]
  -[MRNowPlayingOriginClient setInputMode:]
  -[MRNowPlayingOriginClient _prepareToRestoreClientStateWithCompletion:]
  -[MRNowPlayingOriginClient existingNowPlayingClientForPlayerPath:]
  -[MRNowPlayingOriginClient isOverrideApp]
  -[MRNowPlayingOriginClient .cxx_destruct]
  -[MRNowPlayingOriginClient _restoreNowPlayingClientState]
  -[MRNowPlayingOriginClient commandCallback]
  -[MRNowPlayingOriginClient setPlaybackQueueTransactionCallback:]
  -[MRNowPlayingOriginClient setActiveNowPlayingClient:]
  -[MRNowPlayingOriginClient activity]
  -[MRNowPlayingOriginClient playbackQueueCallback]
  -[MRNowPlayingOriginClient applicationPickedRoutes]
  -[MRNowPlayingOriginClient setHardwareRemoteBehavior:]
  -[MRNowPlayingOriginClient setRouteDiscoveryMode:]
  -[MRNowPlayingOriginClient setOverrideAppBundleID:]
  -[MRNowPlayingOriginClient clientMessageCallback]
  -[MRNowPlayingOriginClient overrideAppBundleID]
  -[MRNowPlayingOriginClient setApplicationPickedRoutes:]
  -[MRNowPlayingOriginClient hardwareRemoteBehavior]
  -[MRNowPlayingOriginClient overrideApp]
  -[MRNowPlayingOriginClient setOverrideApp:]
  -[MRNowPlayingOriginClient routeDiscoveryMode]
  -[MRNowPlayingOriginClient nowPlayingClientForPlayerPath:]
  -[MRNowPlayingOriginClient playbackQueueTransactionCallback]
  -[MRNowPlayingOriginClient setIsOverrideApp:]
  -[MRNowPlayingOriginClient setClientMessageCallback:]
  -[MRNowPlayingOriginClient setCommandCallback:]
  -[MRNowPlayingOriginClient setPlaybackQueueCallback:]


MRNowPlayingClient : NSObject <MRNowPlayingClientState>
 @property  BOOL canBeNowPlaying
 @property  BOOL perPlayerCanBeNowPlaying
 @property  MRPlayerPath *playerPath
 @property  MRClient *client
 @property  MRPlayerPath *activePlayerPath
 @property  NSArray *playerClients
 @property  BOOL useMediaRemoteActivePlayerHeuristic

  // instance methods
  -[MRNowPlayingClient restoreNowPlayingClientState]
  -[MRNowPlayingClient playerPath]
  -[MRNowPlayingClient initWithPlayerPath:]
  -[MRNowPlayingClient setUseMediaRemoteActivePlayerHeuristic:]
  -[MRNowPlayingClient applicationWillEnterForeground]
  -[MRNowPlayingClient setPlayerPath:]
  -[MRNowPlayingClient .cxx_destruct]
  -[MRNowPlayingClient setPerPlayerCanBeNowPlaying:]
  -[MRNowPlayingClient setClient:]
  -[MRNowPlayingClient canBeNowPlaying]
  -[MRNowPlayingClient removePlayer:]
  -[MRNowPlayingClient setCanBeNowPlaying:]
  -[MRNowPlayingClient useMediaRemoteActivePlayerHeuristic]
  -[MRNowPlayingClient playerClients]
  -[MRNowPlayingClient perPlayerCanBeNowPlaying]
  -[MRNowPlayingClient requestActiveForPlayerPath:completion:]
  -[MRNowPlayingClient sendQueuedCommandsWithReason:]
  -[MRNowPlayingClient updateActivePlayerPath:completion:]
  -[MRNowPlayingClient reevaluateActivePlayerWithReason:completion:]
  -[MRNowPlayingClient _avSessionMediaServicesResetNotification:]
  -[MRNowPlayingClient nowPlayingPlayerClientForPlayerPath:]
  -[MRNowPlayingClient canBeNowPlayingForPlayer:]
  -[MRNowPlayingClient client]
  -[MRNowPlayingClient activePlayerPath]
  -[MRNowPlayingClient dealloc]
  -[MRNowPlayingClient mergeClient:]
  -[MRNowPlayingClient applicationDidEnterBackground]
  -[MRNowPlayingClient setActivePlayerPath:reason:completion:]
  -[MRNowPlayingClient enqueueCommand:options:playerPath:commandCompletion:]


_MRPlaybackSessionRequestMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackSessionRequestMessageProtobuf .cxx_destruct]
  -[_MRPlaybackSessionRequestMessageProtobuf dictionaryRepresentation]
  -[_MRPlaybackSessionRequestMessageProtobuf writeTo:]
  -[_MRPlaybackSessionRequestMessageProtobuf isEqual:]
  -[_MRPlaybackSessionRequestMessageProtobuf readFrom:]
  -[_MRPlaybackSessionRequestMessageProtobuf copyWithZone:]


MRCreateHostedEndpointResponseMessage : MRProtocolMessage
 @property  NSString *groupUID

  // instance methods
  -[MRCreateHostedEndpointResponseMessage groupUID]
  -[MRCreateHostedEndpointResponseMessage initWithGroupUID:]
  -[MRCreateHostedEndpointResponseMessage type]


MRGenericMessage : MRProtocolMessage
 @property  NSString *key
 @property  NSData *data

  // instance methods
  -[MRGenericMessage initWithKey:data:]
  -[MRGenericMessage data]
  -[MRGenericMessage type]
  -[MRGenericMessage key]


MRVVIClient : NSObject
  // class methods
  +[MRVVIClient sharedClient]

  // instance methods
  -[MRVVIClient .cxx_destruct]
  -[MRVVIClient init]
  -[MRVVIClient setRecordingStateCallback:forDeviceID:]
  -[MRVVIClient _recordingStateChangedNotification:]
  -[MRVVIClient dealloc]


MRGameControllerDaemonProxy : NSObject <GameControllerDaemonListener>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRGameControllerDaemonProxy defaultGameControllerDaemonProxy]

  // instance methods
  -[MRGameControllerDaemonProxy addController:]
  -[MRGameControllerDaemonProxy microControllerWithDigitizerX:withY:withTimeStamp:touchDown:]
  -[MRGameControllerDaemonProxy controllerWithUDID:setValue:forElement:]
  -[MRGameControllerDaemonProxy removeController:]
  -[MRGameControllerDaemonProxy controllerWithUDID:setData:]
  -[MRGameControllerDaemonProxy microControllerWithUDID:setDigitizerX:digitizerY:withTimeStamp:touchDown:]
  -[MRGameControllerDaemonProxy .cxx_destruct]
  -[MRGameControllerDaemonProxy _openConnection]
  -[MRGameControllerDaemonProxy replyConnectedHosts:]
  -[MRGameControllerDaemonProxy _delayEvent:setValue:forElement:withUpDelay:]
  -[MRGameControllerDaemonProxy controllerID:setValue:forElement:]
  -[MRGameControllerDaemonProxy removeEmulatedController:]
  -[MRGameControllerDaemonProxy addEmulatedControllerWithProperties:]
  -[MRGameControllerDaemonProxy controllerID:setValue:forElement:withUpDelay:]
  -[MRGameControllerDaemonProxy controllerID:setDigitizerX:digitizerY:withTimeStamp:touchDown:]
  -[MRGameControllerDaemonProxy controllerID:setArrayValueX:y:z:w:forElement:]


MRGameControllerDelayedEvents : NSObject
  // instance methods
  -[MRGameControllerDelayedEvents .cxx_destruct]
  -[MRGameControllerDelayedEvents invokeEventsForController:beacuseElement:]
  -[MRGameControllerDelayedEvents eventForController:element:]


MRGameControllerDelayedEvent : NSObject
 @property  unsigned long lastDownEvent
 @property  @? sendEventBlock

  // instance methods
  -[MRGameControllerDelayedEvent send]
  -[MRGameControllerDelayedEvent .cxx_destruct]
  -[MRGameControllerDelayedEvent sendEventBlock]
  -[MRGameControllerDelayedEvent setLastDownEvent:]
  -[MRGameControllerDelayedEvent lastDownEvent]
  -[MRGameControllerDelayedEvent setSendEventBlock:]


MRNowPlayingPlayerClient : NSObject <MRNowPlayingClientState, MRTransactionSourceDelegate>
 @property  BOOL invalidatingPlaybackQueue
 @property  MRPlayerPath *playerPath
 @property  BOOL canBeNowPlayingPlayer
 @property  NSArray *supportedCommands
 @property  NSDictionary *nowPlayingInfo
 @property  MRNowPlayingArtwork *nowPlayingArtwork
 @property  unsigned int playbackState
 @property  double invalidatationTimestamp
 @property  MRPlaybackQueue *playbackQueue
 @property  unsigned long capabilities
 @property  MRContentItem *nowPlayingContentItem
 @property  BOOL hasReceivedCommandRecently
 @property  BOOL pictureInPictureEnabled
 @property  NSDate *activeRequestedDate
 @property  MRPlaybackQueueSubscriptionController *subscriptionController
 @property  MRNowPlayingPlayerClientCallbacks *clientCallbacks

  // instance methods
  -[MRNowPlayingPlayerClient setSupportedCommands:]
  -[MRNowPlayingPlayerClient nowPlayingInfo]
  -[MRNowPlayingPlayerClient restoreNowPlayingClientState]
  -[MRNowPlayingPlayerClient setNowPlayingInfo:]
  -[MRNowPlayingPlayerClient supportedCommands]
  -[MRNowPlayingPlayerClient playerPath]
  -[MRNowPlayingPlayerClient setCanBeNowPlayingPlayer:]
  -[MRNowPlayingPlayerClient updatePlayer:]
  -[MRNowPlayingPlayerClient subscriptionController]
  -[MRNowPlayingPlayerClient setCapabilities:]
  -[MRNowPlayingPlayerClient invalidatingPlaybackQueue]
  -[MRNowPlayingPlayerClient playbackState]
  -[MRNowPlayingPlayerClient initWithPlayerPath:]
  -[MRNowPlayingPlayerClient addPendingRequest:]
  -[MRNowPlayingPlayerClient setPictureInPictureEnabled:]
  -[MRNowPlayingPlayerClient capabilities]
  -[MRNowPlayingPlayerClient invalidatationTimestamp]
  -[MRNowPlayingPlayerClient setNowPlayingArtwork:]
  -[MRNowPlayingPlayerClient setPlayerPath:]
  -[MRNowPlayingPlayerClient .cxx_destruct]
  -[MRNowPlayingPlayerClient isPictureInPictureEnabled]
  -[MRNowPlayingPlayerClient setPlaybackQueue:]
  -[MRNowPlayingPlayerClient resolveCommandOptions:options:]
  -[MRNowPlayingPlayerClient updatePlaybackQueueWithCachedUpdates:forPendingRequest:]
  -[MRNowPlayingPlayerClient removePendingPlaybackSessionMigrateEvent:]
  -[MRNowPlayingPlayerClient canBeNowPlayingPlayer]
  -[MRNowPlayingPlayerClient flushPendingPlaybackSessionMigrateEvents:]
  -[MRNowPlayingPlayerClient setInvalidatingPlaybackQueue:]
  -[MRNowPlayingPlayerClient clearCachedContentItemArtworkForItems:]
  -[MRNowPlayingPlayerClient activeRequestedDate]
  -[MRNowPlayingPlayerClient invalidatePlaybackQueue]
  -[MRNowPlayingPlayerClient startCachingContentItemUpdatesForItem:forPendingRequest:]
  -[MRNowPlayingPlayerClient transactionDidEnd:]
  -[MRNowPlayingPlayerClient invalidatePlaybackQueueWithPlaybackQueue:]
  -[MRNowPlayingPlayerClient playbackQueue]
  -[MRNowPlayingPlayerClient sendContentItemChanges:]
  -[MRNowPlayingPlayerClient addPendingPlaybackSessionMigrateEvent:]
  -[MRNowPlayingPlayerClient nowPlayingContentItem]
  -[MRNowPlayingPlayerClient updatePlaybackState:date:]
  -[MRNowPlayingPlayerClient nowPlayingArtwork]
  -[MRNowPlayingPlayerClient resolveCommand:]
  -[MRNowPlayingPlayerClient endSendingTransactions]
  -[MRNowPlayingPlayerClient setInvalidatationTimestamp:]
  -[MRNowPlayingPlayerClient setActiveRequestedDate:]
  -[MRNowPlayingPlayerClient sendTransaction:withPackets:]
  -[MRNowPlayingPlayerClient beginSendingTransactions]
  -[MRNowPlayingPlayerClient hasReceivedCommandRecently]
  -[MRNowPlayingPlayerClient clientCallbacks]


MRMessageReplyIdentifier : NSObject
 @property  unsigned long messageNumber
 @property  @? reply

  // instance methods
  -[MRMessageReplyIdentifier .cxx_destruct]
  -[MRMessageReplyIdentifier reply]
  -[MRMessageReplyIdentifier setReply:]
  -[MRMessageReplyIdentifier messageNumber]
  -[MRMessageReplyIdentifier setMessageNumber:]


MRProtocolClientConnection : NSObject <MSVMessageParserDelegate, MRExternalDeviceTransportConnectionDelegate>
 @property  NSError *error
 @property  MRDeviceInfo *deviceInfo
 @property  MRSupportedProtocolMessages *supportedMessages
 @property  NSString *label
 @property  BOOL isValid
 @property  BOOL disconnected
 @property  MRExternalDeviceTransportConnection *connection
 @property  <MRProtocolClientConnectionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRProtocolClientConnection label]
  -[MRProtocolClientConnection deviceInfo]
  -[MRProtocolClientConnection setDeviceInfo:]
  -[MRProtocolClientConnection isValid]
  -[MRProtocolClientConnection .cxx_destruct]
  -[MRProtocolClientConnection transportDidClose:error:]
  -[MRProtocolClientConnection transport:didReceiveData:]
  -[MRProtocolClientConnection sendMessage:]
  -[MRProtocolClientConnection setDelegate:]
  -[MRProtocolClientConnection sendMessage:expectedMessage:timeout:queue:reply:]
  -[MRProtocolClientConnection decryptData:error:]
  -[MRProtocolClientConnection disconnected]
  -[MRProtocolClientConnection sendMessage:timeout:queue:reply:]
  -[MRProtocolClientConnection initWithConnection:]
  -[MRProtocolClientConnection connection]
  -[MRProtocolClientConnection dataForMessage:]
  -[MRProtocolClientConnection encryptDataForMessage:]
  -[MRProtocolClientConnection parser:didParseMessage:]
  -[MRProtocolClientConnection delegate]
  -[MRProtocolClientConnection supportedMessages]
  -[MRProtocolClientConnection dealloc]
  -[MRProtocolClientConnection setLabel:]
  -[MRProtocolClientConnection disconnectWithError:]
  -[MRProtocolClientConnection sendMessage:queue:reply:]
  -[MRProtocolClientConnection setSupportedMessages:]
  -[MRProtocolClientConnection setError:]
  -[MRProtocolClientConnection error]


MRAVConcreteEndpoint : MRConcreteEndpoint
  // class methods
  +[MRAVConcreteEndpoint errorWithChangeResult:outputDevice:]

  // instance methods
  -[MRAVConcreteEndpoint registerVolumeNotifications]
  -[MRAVConcreteEndpoint removeOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVConcreteEndpoint setOutputDeviceVolume:outputDevice:queue:completion:]
  -[MRAVConcreteEndpoint handleVolumeChangedNotification:]
  -[MRAVConcreteEndpoint volumeControlCapabilitiesForOutputDevice:queue:completion:]
  -[MRAVConcreteEndpoint outputDeviceVolume:queue:completion:]
  -[MRAVConcreteEndpoint setOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVConcreteEndpoint addOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVConcreteEndpoint .cxx_destruct]
  -[MRAVConcreteEndpoint setExternalDevice:]
  -[MRAVConcreteEndpoint volumeForOutputDevice:error:]
  -[MRAVConcreteEndpoint initWithDesignatedGroupLeader:outputDevices:]
  -[MRAVConcreteEndpoint initWithOutputDeviceGroup:groupLeader:outputDevices:]
  -[MRAVConcreteEndpoint handleVolumeCapabilityChangedNotification:]


_MRGetVoiceInputDevicesResponseMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetVoiceInputDevicesResponseMessageProtobuf dictionaryRepresentation]
  -[_MRGetVoiceInputDevicesResponseMessageProtobuf writeTo:]
  -[_MRGetVoiceInputDevicesResponseMessageProtobuf isEqual:]
  -[_MRGetVoiceInputDevicesResponseMessageProtobuf readFrom:]
  -[_MRGetVoiceInputDevicesResponseMessageProtobuf dealloc]
  -[_MRGetVoiceInputDevicesResponseMessageProtobuf copyWithZone:]


MRKeyboardMessage : MRProtocolMessage
 @property  unsigned long state
 @property  NSData *encryptedTextCyphertext
 @property  MRTextEditingAttributes *attributes

  // class methods
  +[MRKeyboardMessage encryptedMessageWithState:text:attributes:usingCryptoSession:]

  // instance methods
  -[MRKeyboardMessage .cxx_destruct]
  -[MRKeyboardMessage state]
  -[MRKeyboardMessage initWithState:encryptedTextCyphertext:attributes:]
  -[MRKeyboardMessage encryptedTextCyphertext]
  -[MRKeyboardMessage type]
  -[MRKeyboardMessage attributes]
  -[MRKeyboardMessage decryptedTextUsingCryptoSession:]


_MRWakeDeviceMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRWakeDeviceMessageProtobuf dictionaryRepresentation]
  -[_MRWakeDeviceMessageProtobuf writeTo:]
  -[_MRWakeDeviceMessageProtobuf isEqual:]
  -[_MRWakeDeviceMessageProtobuf readFrom:]
  -[_MRWakeDeviceMessageProtobuf copyWithZone:]


MRMigrationBehaviorResult : NSObject
 @property  NSString *sourceUID
 @property  NSString *destinationUID
 @property  long long action
 @property  NSString *reason
 @property  NSError *error

  // instance methods
  -[MRMigrationBehaviorResult .cxx_destruct]
  -[MRMigrationBehaviorResult dictionaryRepresentation]
  -[MRMigrationBehaviorResult setAction:]
  -[MRMigrationBehaviorResult action]
  -[MRMigrationBehaviorResult isEqual:]
  -[MRMigrationBehaviorResult sourceUID]
  -[MRMigrationBehaviorResult reason]
  -[MRMigrationBehaviorResult destinationUID]
  -[MRMigrationBehaviorResult setSourceUID:]
  -[MRMigrationBehaviorResult setDestinationUID:]
  -[MRMigrationBehaviorResult setReason:]
  -[MRMigrationBehaviorResult setError:]
  -[MRMigrationBehaviorResult error]


MRProximityProvider : NSObject <MRMigrationDeviceDelegate, PCProvider>
 @property  NSMutableDictionary *remoteDevices
 @property  NSMutableSet *providingDevices
 @property  NSMutableDictionary *behaviorResults
 @property  MRMigrationDevice *proactiveDevice
 @property  NSString *migratingDevice
 @property  @? behaviorCallback
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? displayContextHandler
 @property  @? progressEventHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRProximityProvider supportsSecureCoding]
  +[MRProximityProvider _migrate:destinationEndpoint:destinationUID:outputDevice:label:completion:]

  // instance methods
  -[MRProximityProvider initWithCoder:]
  -[MRProximityProvider _endProvidingDisplayContextIfNeeded:]
  -[MRProximityProvider contentToDisplayForDevice:]
  -[MRProximityProvider .cxx_destruct]
  -[MRProximityProvider _provideDisplayContextForDevice:]
  -[MRProximityProvider dictionaryRepresentation]
  -[MRProximityProvider _migrateForDevice:completion:]
  -[MRProximityProvider setProvidingDevices:]
  -[MRProximityProvider _nameForDevice:inEndpoint:]
  -[MRProximityProvider receiveEvent:]
  -[MRProximityProvider init]
  -[MRProximityProvider setDisplayContextHandler:]
  -[MRProximityProvider device:playerStateDidChange:]
  -[MRProximityProvider _recalculateMigrationBehaviorAndProvideUpdatedDisplayContextForDevice:]
  -[MRProximityProvider behaviorResults]
  -[MRProximityProvider _deviceForUID:]
  -[MRProximityProvider migratingDevice]
  -[MRProximityProvider remoteDevices]
  -[MRProximityProvider _beginProvidingDisplayContextIfNeeded:]
  -[MRProximityProvider setMigratingDevice:]
  -[MRProximityProvider dispatchQueue]
  -[MRProximityProvider endpointForDevice:]
  -[MRProximityProvider progressEventHandler]
  -[MRProximityProvider _effectivePlayerStateForDevice:]
  -[MRProximityProvider displayContextHandler]
  -[MRProximityProvider device:stateDidChange:]
  -[MRProximityProvider setRemoteDevices:]
  -[MRProximityProvider providingDevices]
  -[MRProximityProvider _addDeviceIfNeeded:]
  -[MRProximityProvider _migrationBehaviorForRemoteDevice:proactiveDevice:completion:]
  -[MRProximityProvider _displayContextForDevice:withRemotePlayerState:proactivePlayerState:migrationBehavior:]
  -[MRProximityProvider behaviorCallback]
  -[MRProximityProvider _outputDeviceWithUID:fromSource:andDestination:]
  -[MRProximityProvider _migrationBehaviorForRemoteDevice:completion:]
  -[MRProximityProvider _removeDeviceIfNeeded:]
  -[MRProximityProvider _persistArtworkData:forDevice:]
  -[MRProximityProvider setBehaviorCallback:]
  -[MRProximityProvider setProgressEventHandler:]
  -[MRProximityProvider migrationActionForProactivePlayer:proactiveEndpoint:remotePlayer:remoteEndpoint:reason:]
  -[MRProximityProvider setBehaviorResults:]
  -[MRProximityProvider _displayStringForContentItem:]
  -[MRProximityProvider setDispatchQueue:]
  -[MRProximityProvider setProactiveDevice:]
  -[MRProximityProvider encodeWithCoder:]
  -[MRProximityProvider proactiveDevice]


MREmulatedGameController : NSObject
 @property  GCController *controller
 @property  int profile
 @property  double buttonAUpDelay
 @property  <MREmulatedGameControllerDelegate> *delegate

  // instance methods
  -[MREmulatedGameController setController:]
  -[MREmulatedGameController initWithProperties:]
  -[MREmulatedGameController controller]
  -[MREmulatedGameController .cxx_destruct]
  -[MREmulatedGameController setDelegate:]
  -[MREmulatedGameController profile]
  -[MREmulatedGameController buttonAUpDelay]
  -[MREmulatedGameController _handleGameControllerDidChange:]
  -[MREmulatedGameController sendGameControllerEvent:]
  -[MREmulatedGameController setButtonAUpDelay:]
  -[MREmulatedGameController delegate]
  -[MREmulatedGameController dealloc]


MRV3NowPlayingController : NSObject <MRDestinationResolverDelegate, MRNowPlayingControllerImpl>
 @property  MRDestinationResolver *destinationResolver
 @property  MRNowPlayingPlayerResponse *response
 @property  MRNowPlayingControllerConfiguration *configuration
 @property  NSMutableArray *deferredContentItemsToMerge
 @property  BOOL registeredForNotifications
 @property  BOOL isUpdating
 @property  BOOL isResolving
 @property  BOOL requestingQueue
 @property  NSDate *lastQueueRequestDate
 @property  NSObject<OS_dispatch_queue> *queue
 @property  MSVVariableIntervalTimer *loadRetryTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MRNowPlayingControllerHelper *helper
 @property  MRNowPlayingControllerDestination *destination

  // instance methods
  -[MRV3NowPlayingController helper]
  -[MRV3NowPlayingController _notifyDelegateOfError:]
  -[MRV3NowPlayingController _notifyDelegateOfNewResponse:]
  -[MRV3NowPlayingController _unregisterNotificationHandlers]
  -[MRV3NowPlayingController setIsUpdating:]
  -[MRV3NowPlayingController _loadNowPlayingStateForPlayerPath:error:]
  -[MRV3NowPlayingController _requestSupportedCommandsForPlayerPath:queue:completion:]
  -[MRV3NowPlayingController setRequestingQueue:]
  -[MRV3NowPlayingController beginResolving]
  -[MRV3NowPlayingController _requestPlayerLastPlayingDateForPlayerPath:queue:completion:]
  -[MRV3NowPlayingController deferredContentItemsToMerge]
  -[MRV3NowPlayingController requestingQueue]
  -[MRV3NowPlayingController _notifyDelegateOfUpdatedArtwork:]
  -[MRV3NowPlayingController _requestContentItemArtwork:forPlayerPath:queue:completion:]
  -[MRV3NowPlayingController _notifyDelegateOfInvalidation]
  -[MRV3NowPlayingController _handlePlaybackQueueChangedNotification:]
  -[MRV3NowPlayingController _handlePlaybackQueueContentItemsChangedNotification:]
  -[MRV3NowPlayingController _handlePlaybackQueueContentItemsArtworkChangedNotification:]
  -[MRV3NowPlayingController _handlePlaybackStateChangedNotification:]
  -[MRV3NowPlayingController _handleSupportedCommandsChangedNotification:]
  -[MRV3NowPlayingController _notifyDelegateOfUpdatedPlayerLastPlayingDate:]
  -[MRV3NowPlayingController configuration]
  -[MRV3NowPlayingController beginLoadingUpdates]
  -[MRV3NowPlayingController endLoadingUpdates]
  -[MRV3NowPlayingController setDeferredContentItemsToMerge:]
  -[MRV3NowPlayingController destinationResolver:playerPathDidChange:]
  -[MRV3NowPlayingController .cxx_destruct]
  -[MRV3NowPlayingController setRegisteredForNotifications:]
  -[MRV3NowPlayingController destination]
  -[MRV3NowPlayingController setQueue:]
  -[MRV3NowPlayingController _reloadWithReason:]
  -[MRV3NowPlayingController destinationResolverDestinationDidInvalidate:]
  -[MRV3NowPlayingController _registerNotificationHandlersForResolvedPlayerPath:]
  -[MRV3NowPlayingController _requestPlaybackQueueForPlayerPath:request:queue:completion:]
  -[MRV3NowPlayingController _requestClientPropertiesForPlayerPath:queue:completion:]
  -[MRV3NowPlayingController _onQueue_clearStateForResolvedPlayerPath]
  -[MRV3NowPlayingController _notifyDelegateOfPlayerPathChange:]
  -[MRV3NowPlayingController _notifyDelegateOfPlaybackQueueChange:]
  -[MRV3NowPlayingController _notifyDelegateOfUpdatedContentItemsWithContentItems:]
  -[MRV3NowPlayingController _notifyDelegateOfPlaybackStateChange:]
  -[MRV3NowPlayingController destinationResolver:didFailWithError:]
  -[MRV3NowPlayingController isResolving]
  -[MRV3NowPlayingController _notifyDelegateOfSupportedCommandsChange:]
  -[MRV3NowPlayingController loadRetryTimer]
  -[MRV3NowPlayingController setLoadRetryTimer:]
  -[MRV3NowPlayingController destinationWithCompletion:]
  -[MRV3NowPlayingController _notifyDelegateOfUpdatedClientProperties:]
  -[MRV3NowPlayingController response]
  -[MRV3NowPlayingController setHelper:]
  -[MRV3NowPlayingController initWithConfiguration:]
  -[MRV3NowPlayingController isUpdating]
  -[MRV3NowPlayingController destinationResolver]
  -[MRV3NowPlayingController setDestinationResolver:]
  -[MRV3NowPlayingController lastQueueRequestDate]
  -[MRV3NowPlayingController setLastQueueRequestDate:]
  -[MRV3NowPlayingController _handleClientPropertiesDidChange:]
  -[MRV3NowPlayingController setIsResolving:]
  -[MRV3NowPlayingController queue]
  -[MRV3NowPlayingController registeredForNotifications]
  -[MRV3NowPlayingController dealloc]
  -[MRV3NowPlayingController sendCommand:options:appOptions:completion:]
  -[MRV3NowPlayingController setConfiguration:]
  -[MRV3NowPlayingController setResponse:]


MRSendCommandResultStatus : NSObject <NSCopying>
 @property  _MRSendCommandResultStatusProtobuf *protobuf
 @property  unsigned int statusCode
 @property  long long statusType
 @property  MRSendCommandHandlerDialog *dialog
 @property  NSError *commandError
 @property  NSData *customData
 @property  NSString *customDataType

  // class methods
  +[MRSendCommandResultStatus successStatus]
  +[MRSendCommandResultStatus statusWithCode:]
  +[MRSendCommandResultStatus statusWithCode:error:]
  +[MRSendCommandResultStatus statusWithCode:dialog:]
  +[MRSendCommandResultStatus statusWithCode:customData:type:]

  // instance methods
  -[MRSendCommandResultStatus dialog]
  -[MRSendCommandResultStatus statusType]
  -[MRSendCommandResultStatus .cxx_destruct]
  -[MRSendCommandResultStatus customData]
  -[MRSendCommandResultStatus commandError]
  -[MRSendCommandResultStatus customDataType]
  -[MRSendCommandResultStatus protobuf]
  -[MRSendCommandResultStatus initWithProtobuf:]
  -[MRSendCommandResultStatus initWithStatusType:statusCode:dialog:customData:customDataType:error:]
  -[MRSendCommandResultStatus statusCode]
  -[MRSendCommandResultStatus copyWithZone:]


_MRLyricsItemProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRLyricsItemProtobuf .cxx_destruct]
  -[_MRLyricsItemProtobuf dictionaryRepresentation]
  -[_MRLyricsItemProtobuf writeTo:]
  -[_MRLyricsItemProtobuf isEqual:]
  -[_MRLyricsItemProtobuf readFrom:]
  -[_MRLyricsItemProtobuf copyWithZone:]


MRPlaybackQueue : NSObject <NSCopying>
 @property  long long location
 @property  BOOL hasLocation
 @property  BOOL sendingPlaybackQueueTransaction
 @property  BOOL hasSendingPlaybackQueueTransaction
 @property  NSString *requestIdentifier
 @property  NSString *queueIdentifier
 @property  NSArray *contentItems
 @property  NSArray *participants
 @property  MRPlayerPath *resolvedPlayerPath
 @property  NSData *data
 @property  NSDictionary *dictionaryRepresentation
 @property  NSArray *contentItemIdentifiers
 @property  {_NSRange=QQ} range
 @property  NSString *minimalReadableDescription

  // instance methods
  -[MRPlaybackQueue setRequestIdentifier:]
  -[MRPlaybackQueue range]
  -[MRPlaybackQueue setQueueIdentifier:]
  -[MRPlaybackQueue queueIdentifier]
  -[MRPlaybackQueue initWithContentItems:location:]
  -[MRPlaybackQueue requestIdentifier]
  -[MRPlaybackQueue participants]
  -[MRPlaybackQueue setParticipants:]
  -[MRPlaybackQueue contentItemIdentifiers]
  -[MRPlaybackQueue contentItems]
  -[MRPlaybackQueue mergeFrom:]
  -[MRPlaybackQueue contentItemWithOffset:]
  -[MRPlaybackQueue setHasSendingPlaybackQueueTransaction:]
  -[MRPlaybackQueue .cxx_destruct]
  -[MRPlaybackQueue sendingPlaybackQueueTransaction]
  -[MRPlaybackQueue dictionaryRepresentation]
  -[MRPlaybackQueue setLocation:]
  -[MRPlaybackQueue hasSendingPlaybackQueueTransaction]
  -[MRPlaybackQueue contentItemForIdentifier:]
  -[MRPlaybackQueue data]
  -[MRPlaybackQueue minimalReadableDescription]
  -[MRPlaybackQueue isEqual:]
  -[MRPlaybackQueue hasLocation]
  -[MRPlaybackQueue setSendingPlaybackQueueTransaction:]
  -[MRPlaybackQueue participantForIdentifier:]
  -[MRPlaybackQueue location]
  -[MRPlaybackQueue setHasLocation:]
  -[MRPlaybackQueue initWithContentItems:]
  -[MRPlaybackQueue resolvedPlayerPath]
  -[MRPlaybackQueue initWithData:]
  -[MRPlaybackQueue setContentItems:]
  -[MRPlaybackQueue initWithContentItem:]
  -[MRPlaybackQueue copyWithZone:]
  -[MRPlaybackQueue setResolvedPlayerPath:]


MRExternalClientConnection : MRProtocolClientConnection
 @property  NSArray *subscribedPlayerPaths
 @property  BOOL registeredToNowPlayingUpdates
 @property  BOOL registeredToVolumeUpdates
 @property  BOOL registeredKeyboardUpdates
 @property  BOOL registeredToOutputDeviceUpdates
 @property  BOOL registeredToSystemEndpointUpdates
 @property  unsigned int voiceRecordingState
 @property  MRCryptoPairingSession *cryptoSession
 @property  BOOL cryptoEnabled

  // instance methods
  -[MRExternalClientConnection subscribedPlayerPaths]
  -[MRExternalClientConnection setSubscribedPlayerPaths:]
  -[MRExternalClientConnection .cxx_destruct]
  -[MRExternalClientConnection setCryptoEnabled:]
  -[MRExternalClientConnection setCryptoSession:]
  -[MRExternalClientConnection initWithConnection:]
  -[MRExternalClientConnection registeredToVolumeUpdates]
  -[MRExternalClientConnection registeredToNowPlayingUpdates]
  -[MRExternalClientConnection setRegisteredToNowPlayingUpdates:]
  -[MRExternalClientConnection setRegisteredToVolumeUpdates:]
  -[MRExternalClientConnection registeredKeyboardUpdates]
  -[MRExternalClientConnection setRegisteredKeyboardUpdates:]
  -[MRExternalClientConnection registeredToOutputDeviceUpdates]
  -[MRExternalClientConnection cryptoEnabled]
  -[MRExternalClientConnection setRegisteredToOutputDeviceUpdates:]
  -[MRExternalClientConnection registeredToSystemEndpointUpdates]
  -[MRExternalClientConnection setRegisteredToSystemEndpointUpdates:]
  -[MRExternalClientConnection cryptoSession]
  -[MRExternalClientConnection voiceRecordingState]
  -[MRExternalClientConnection setVoiceRecordingState:]


MRTextInputMessage : MRProtocolMessage
 @property  unsigned long actionType
 @property  NSString *text

  // instance methods
  -[MRTextInputMessage actionType]
  -[MRTextInputMessage type]
  -[MRTextInputMessage initWithActionType:text:]
  -[MRTextInputMessage text]


_MRLanguageOptionGroupProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRLanguageOptionGroupProtobuf .cxx_destruct]
  -[_MRLanguageOptionGroupProtobuf dictionaryRepresentation]
  -[_MRLanguageOptionGroupProtobuf writeTo:]
  -[_MRLanguageOptionGroupProtobuf isEqual:]
  -[_MRLanguageOptionGroupProtobuf readFrom:]
  -[_MRLanguageOptionGroupProtobuf copyWithZone:]


_MRSetVolumeMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetVolumeMessageProtobuf .cxx_destruct]
  -[_MRSetVolumeMessageProtobuf dictionaryRepresentation]
  -[_MRSetVolumeMessageProtobuf writeTo:]
  -[_MRSetVolumeMessageProtobuf isEqual:]
  -[_MRSetVolumeMessageProtobuf readFrom:]
  -[_MRSetVolumeMessageProtobuf copyWithZone:]


_MRVoiceInputDevice : PBCodable <NSCopying>
  // instance methods
  -[_MRVoiceInputDevice .cxx_destruct]
  -[_MRVoiceInputDevice dictionaryRepresentation]
  -[_MRVoiceInputDevice writeTo:]
  -[_MRVoiceInputDevice isEqual:]
  -[_MRVoiceInputDevice readFrom:]
  -[_MRVoiceInputDevice copyWithZone:]


MRNowPlayingOriginClientManager : NSObject <MRNowPlayingClientState>
 @property  @? createNewPlayerCallback
 @property  @? destroyPlayerCallback
 @property  @? generatePlayerIDCallback
 @property  NSArray *originClients

  // class methods
  +[MRNowPlayingOriginClientManager sharedManager]

  // instance methods
  -[MRNowPlayingOriginClientManager restoreNowPlayingClientState]
  -[MRNowPlayingOriginClientManager existingPlayerClientRequestsForPlayerPath:]
  -[MRNowPlayingOriginClientManager setDestroyPlayerCallback:]
  -[MRNowPlayingOriginClientManager setGeneratePlayerIDCallback:]
  -[MRNowPlayingOriginClientManager .cxx_destruct]
  -[MRNowPlayingOriginClientManager playerClientRequestsForPlayerPath:]
  -[MRNowPlayingOriginClientManager activeSystemEndpointOutputDeviceUIDForType:]
  -[MRNowPlayingOriginClientManager clientForPlayerPath:]
  -[MRNowPlayingOriginClientManager createNewPlayerCallback]
  -[MRNowPlayingOriginClientManager removeOriginRequests:]
  -[MRNowPlayingOriginClientManager destroyPlayerCallback]
  -[MRNowPlayingOriginClientManager removeOrigin:]
  -[MRNowPlayingOriginClientManager existingClientRequestsForPlayerPath:]
  -[MRNowPlayingOriginClientManager originClientRequestsForPlayerPath:]
  -[MRNowPlayingOriginClientManager init]
  -[MRNowPlayingOriginClientManager originClientForOrigin:]
  -[MRNowPlayingOriginClientManager originClients]
  -[MRNowPlayingOriginClientManager createCustomOriginClientForOrigin:]
  -[MRNowPlayingOriginClientManager handleActiveSystemEndpointOutputDeviceUIDForType:completion:]
  -[MRNowPlayingOriginClientManager setCreateNewPlayerCallback:]
  -[MRNowPlayingOriginClientManager playerClientForPlayerPath:]
  -[MRNowPlayingOriginClientManager originClientForPlayerPath:]
  -[MRNowPlayingOriginClientManager generatePlayerIDCallback]
  -[MRNowPlayingOriginClientManager localOriginClient]
  -[MRNowPlayingOriginClientManager updateActiveSystemEndpointOutputDeviceUID:forType:]
  -[MRNowPlayingOriginClientManager clientRequestsForPlayerPath:]
  -[MRNowPlayingOriginClientManager existingOriginClientRequestsForPlayerPath:]


MRLanguageOptionGroup : NSObject <NSCopying, NSSecureCoding>
 @property  _MRLanguageOptionGroupProtobuf *protobuf
 @property  BOOL allowsEmptySelection
 @property  BOOL hasAllowsEmptySelection
 @property  NSArray *languageOptions
 @property  MRLanguageOption *defaultLanguageOption
 @property  NSData *data
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[MRLanguageOptionGroup supportsSecureCoding]

  // instance methods
  -[MRLanguageOptionGroup initWithCoder:]
  -[MRLanguageOptionGroup setLanguageOptions:]
  -[MRLanguageOptionGroup setDefaultLanguageOption:]
  -[MRLanguageOptionGroup setAllowsEmptySelection:]
  -[MRLanguageOptionGroup allowsEmptySelection]
  -[MRLanguageOptionGroup .cxx_destruct]
  -[MRLanguageOptionGroup dictionaryRepresentation]
  -[MRLanguageOptionGroup data]
  -[MRLanguageOptionGroup defaultLanguageOption]
  -[MRLanguageOptionGroup isEqual:]
  -[MRLanguageOptionGroup protobuf]
  -[MRLanguageOptionGroup initWithProtobuf:]
  -[MRLanguageOptionGroup initWithData:]
  -[MRLanguageOptionGroup hasAllowsEmptySelection]
  -[MRLanguageOptionGroup initWithLanguageOptions:defaultLanguageOption:allowsEmptySelection:]
  -[MRLanguageOptionGroup setHasAllowsEmptySelection:]
  -[MRLanguageOptionGroup copyWithZone:]
  -[MRLanguageOptionGroup languageOptions]
  -[MRLanguageOptionGroup encodeWithCoder:]


_MRColorProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRColorProtobuf dictionaryRepresentation]
  -[_MRColorProtobuf writeTo:]
  -[_MRColorProtobuf isEqual:]
  -[_MRColorProtobuf readFrom:]
  -[_MRColorProtobuf copyWithZone:]


_MRRegisterVoiceInputDeviceResponseMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRegisterVoiceInputDeviceResponseMessageProtobuf dictionaryRepresentation]
  -[_MRRegisterVoiceInputDeviceResponseMessageProtobuf writeTo:]
  -[_MRRegisterVoiceInputDeviceResponseMessageProtobuf isEqual:]
  -[_MRRegisterVoiceInputDeviceResponseMessageProtobuf readFrom:]
  -[_MRRegisterVoiceInputDeviceResponseMessageProtobuf copyWithZone:]


_MRUpdateOutputDevicesMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdateOutputDevicesMessageProtobuf .cxx_destruct]
  -[_MRUpdateOutputDevicesMessageProtobuf dictionaryRepresentation]
  -[_MRUpdateOutputDevicesMessageProtobuf writeTo:]
  -[_MRUpdateOutputDevicesMessageProtobuf isEqual:]
  -[_MRUpdateOutputDevicesMessageProtobuf readFrom:]
  -[_MRUpdateOutputDevicesMessageProtobuf copyWithZone:]


_MRSetNowPlayingClientMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSetNowPlayingClientMessageProtobuf .cxx_destruct]
  -[_MRSetNowPlayingClientMessageProtobuf dictionaryRepresentation]
  -[_MRSetNowPlayingClientMessageProtobuf writeTo:]
  -[_MRSetNowPlayingClientMessageProtobuf isEqual:]
  -[_MRSetNowPlayingClientMessageProtobuf readFrom:]
  -[_MRSetNowPlayingClientMessageProtobuf copyWithZone:]


MRClientDiagnosticsDataSource : NSObject
 @property  NSMutableDictionary *map
 @property  {os_unfair_lock_s=I} lock
 @property  NSString *diagnostic

  // class methods
  +[MRClientDiagnosticsDataSource sharedDataSource]

  // instance methods
  -[MRClientDiagnosticsDataSource map]
  -[MRClientDiagnosticsDataSource remove:]
  -[MRClientDiagnosticsDataSource add:]
  -[MRClientDiagnosticsDataSource .cxx_destruct]
  -[MRClientDiagnosticsDataSource init]
  -[MRClientDiagnosticsDataSource lock]
  -[MRClientDiagnosticsDataSource diagnostic]


_MRUpdateEndpointsMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUpdateEndpointsMessageProtobuf .cxx_destruct]
  -[_MRUpdateEndpointsMessageProtobuf dictionaryRepresentation]
  -[_MRUpdateEndpointsMessageProtobuf writeTo:]
  -[_MRUpdateEndpointsMessageProtobuf isEqual:]
  -[_MRUpdateEndpointsMessageProtobuf readFrom:]
  -[_MRUpdateEndpointsMessageProtobuf copyWithZone:]


MRCryptoPairingMessage : MRProtocolMessage
 @property  NSData *pairingData
 @property  int status
 @property  BOOL retrying
 @property  BOOL usingSystemPairing
 @property  unsigned long state

  // instance methods
  -[MRCryptoPairingMessage initWithPairingData:status:isRetrying:isUsingSystemPairing:state:]
  -[MRCryptoPairingMessage pairingData]
  -[MRCryptoPairingMessage encryptionType]
  -[MRCryptoPairingMessage state]
  -[MRCryptoPairingMessage status]
  -[MRCryptoPairingMessage type]
  -[MRCryptoPairingMessage isRetrying]
  -[MRCryptoPairingMessage initWithPairingData:status:]
  -[MRCryptoPairingMessage isUsingSystemPairing]


_MRGetVoiceInputDevicesMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGetVoiceInputDevicesMessageProtobuf dictionaryRepresentation]
  -[_MRGetVoiceInputDevicesMessageProtobuf writeTo:]
  -[_MRGetVoiceInputDevicesMessageProtobuf isEqual:]
  -[_MRGetVoiceInputDevicesMessageProtobuf readFrom:]
  -[_MRGetVoiceInputDevicesMessageProtobuf copyWithZone:]


_MRNowPlayingPlayerProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRNowPlayingPlayerProtobuf .cxx_destruct]
  -[_MRNowPlayingPlayerProtobuf dictionaryRepresentation]
  -[_MRNowPlayingPlayerProtobuf writeTo:]
  -[_MRNowPlayingPlayerProtobuf isEqual:]
  -[_MRNowPlayingPlayerProtobuf readFrom:]
  -[_MRNowPlayingPlayerProtobuf dealloc]
  -[_MRNowPlayingPlayerProtobuf copyWithZone:]


MRDeviceInfoOutputDevice : MRAVOutputDevice
 @property  MRDeviceInfo *deviceInfo

  // instance methods
  -[MRDeviceInfoOutputDevice shouldBeLocallyHosted]
  -[MRDeviceInfoOutputDevice isLocalDevice]
  -[MRDeviceInfoOutputDevice hostDeviceClass]
  -[MRDeviceInfoOutputDevice canAccessAppleMusic]
  -[MRDeviceInfoOutputDevice deviceSubtype]
  -[MRDeviceInfoOutputDevice logicalDeviceID]
  -[MRDeviceInfoOutputDevice canAccessiCloudMusicLibrary]
  -[MRDeviceInfoOutputDevice groupID]
  -[MRDeviceInfoOutputDevice supportsMultiplayer]
  -[MRDeviceInfoOutputDevice isRemoteControllable]
  -[MRDeviceInfoOutputDevice canAccessRemoteAssets]
  -[MRDeviceInfoOutputDevice isGroupable]
  -[MRDeviceInfoOutputDevice deviceInfo]
  -[MRDeviceInfoOutputDevice uid]
  -[MRDeviceInfoOutputDevice name]
  -[MRDeviceInfoOutputDevice deviceType]
  -[MRDeviceInfoOutputDevice initWithDeviceInfo:]
  -[MRDeviceInfoOutputDevice modelID]
  -[MRDeviceInfoOutputDevice .cxx_destruct]
  -[MRDeviceInfoOutputDevice avOutputDevice]


_MRUnregisterGameControllerMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRUnregisterGameControllerMessageProtobuf dictionaryRepresentation]
  -[_MRUnregisterGameControllerMessageProtobuf writeTo:]
  -[_MRUnregisterGameControllerMessageProtobuf isEqual:]
  -[_MRUnregisterGameControllerMessageProtobuf readFrom:]
  -[_MRUnregisterGameControllerMessageProtobuf copyWithZone:]


MRVirtualTouchDeviceDescriptor : NSObject <NSCopying, NSMutableCopying>
 @property  BOOL absolute
 @property  BOOL integratedDisplay
 @property  (_MRHIDSize={?=ff}[2f]) screenSize

  // instance methods
  -[MRVirtualTouchDeviceDescriptor isIntegratedDisplay]
  -[MRVirtualTouchDeviceDescriptor mutableCopyWithZone:]
  -[MRVirtualTouchDeviceDescriptor copyWithZone:]
  -[MRVirtualTouchDeviceDescriptor screenSize]
  -[MRVirtualTouchDeviceDescriptor isAbsolute]


MRMutableVirtualTouchDeviceDescriptor : MRVirtualTouchDeviceDescriptor
 @property  BOOL absolute
 @property  BOOL integratedDisplay
 @property  (_MRHIDSize={?=ff}[2f]) screenSize

  // instance methods
  -[MRMutableVirtualTouchDeviceDescriptor setAbsolute:]
  -[MRMutableVirtualTouchDeviceDescriptor setIntegratedDisplay:]
  -[MRMutableVirtualTouchDeviceDescriptor setScreenSize:]


MRDeviceInfoRequest : NSObject
  // class methods
  +[MRDeviceInfoRequest deviceInfoForOrigin:]
  +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:]
  +[MRDeviceInfoRequest cachedDeviceInfoForOrigin:]
  +[MRDeviceInfoRequest deviceInfoForUID:queue:completion:]


MRTextEditingAttributes : NSObject <NSCopying, NSMutableCopying>
 @property  NSString *title
 @property  NSString *prompt
 @property  {_MRTextInputTraits=IIIII{?=qq}BB[10q]Q} inputTraits

  // instance methods
  -[MRTextEditingAttributes .cxx_destruct]
  -[MRTextEditingAttributes prompt]
  -[MRTextEditingAttributes inputTraits]
  -[MRTextEditingAttributes title]
  -[MRTextEditingAttributes initWithTitle:prompt:]
  -[MRTextEditingAttributes mutableCopyWithZone:]
  -[MRTextEditingAttributes copyWithZone:]


MRMutableTextEditingAttributes : MRTextEditingAttributes
 @property  NSString *title
 @property  NSString *prompt
 @property  {_MRTextInputTraits=IIIII{?=qq}BB[10q]Q} inputTraits

  // instance methods
  -[MRMutableTextEditingAttributes setPrompt:]
  -[MRMutableTextEditingAttributes setTitle:]
  -[MRMutableTextEditingAttributes setInputTraits:]


MRTextEditingSession : NSObject <NSCopying, NSMutableCopying>
 @property  unsigned long uniqueIdentifier
 @property  NSString *text
 @property  BOOL editing
 @property  MRTextEditingAttributes *attributes

  // instance methods
  -[MRTextEditingSession uniqueIdentifier]
  -[MRTextEditingSession .cxx_destruct]
  -[MRTextEditingSession init]
  -[MRTextEditingSession isEditing]
  -[MRTextEditingSession mutableCopyWithZone:]
  -[MRTextEditingSession attributes]
  -[MRTextEditingSession initWithText:attributes:]
  -[MRTextEditingSession copyWithZone:]
  -[MRTextEditingSession text]


MRMutableTextEditingSession : MRTextEditingSession
 @property  NSString *text
 @property  BOOL editing
 @property  MRTextEditingAttributes *attributes

  // instance methods
  -[MRMutableTextEditingSession setText:]
  -[MRMutableTextEditingSession setEditing:]
  -[MRMutableTextEditingSession setAttributes:]


MRRapportTransportConnection : MRExternalDeviceTransportConnection
 @property  NSString *sessionUID
 @property  NSString *eventID
 @property  RPCompanionLinkClient *connection

  // instance methods
  -[MRRapportTransportConnection setRunLoop:]
  -[MRRapportTransportConnection runLoop]
  -[MRRapportTransportConnection closeWithError:]
  -[MRRapportTransportConnection isValid]
  -[MRRapportTransportConnection initWithDeviceUID:sessionUID:targetDevice:error:]
  -[MRRapportTransportConnection .cxx_destruct]
  -[MRRapportTransportConnection setConnection:]
  -[MRRapportTransportConnection connection]
  -[MRRapportTransportConnection sendTransportData:options:]
  -[MRRapportTransportConnection eventID]
  -[MRRapportTransportConnection _registerCallbacks]
  -[MRRapportTransportConnection _targetDeviceMatch:deviceUID:]
  -[MRRapportTransportConnection initWithCompanionLinkClient:device:sessionUID:]
  -[MRRapportTransportConnection sessionUID]


_MRAudioFormatProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRAudioFormatProtobuf .cxx_destruct]
  -[_MRAudioFormatProtobuf dictionaryRepresentation]
  -[_MRAudioFormatProtobuf writeTo:]
  -[_MRAudioFormatProtobuf isEqual:]
  -[_MRAudioFormatProtobuf readFrom:]
  -[_MRAudioFormatProtobuf copyWithZone:]


MRAVReconnaissanceSession : NSObject
 @property  NSArray *matchingOutputDeviceUIDs
 @property  NSString *matchingOutputDeviceGroupID
 @property  unsigned int endpointFeatures
 @property  MRAVRoutingDiscoverySession *discoverySession
 @property  BOOL useWeakMatching
 @property  BOOL returnPartialResults
 @property  BOOL waitForCompleteClusters
 @property  NSArray *matchingLogicalDeviceIDs

  // instance methods
  -[MRAVReconnaissanceSession discoverySession]
  -[MRAVReconnaissanceSession .cxx_destruct]
  -[MRAVReconnaissanceSession beginSearchWithTimeout:endpointsCompletion:]
  -[MRAVReconnaissanceSession initWithOutputDeviceUIDs:outputDeviceGroupID:features:]
  -[MRAVReconnaissanceSession beginSearchWithTimeout:completion:]
  -[MRAVReconnaissanceSession cancelSearch]
  -[MRAVReconnaissanceSession endpointFeatures]
  -[MRAVReconnaissanceSession setMatchingLogicalDeviceIDs:]
  -[MRAVReconnaissanceSession setReturnPartialResults:]
  -[MRAVReconnaissanceSession useWeakMatching]
  -[MRAVReconnaissanceSession beginSearchWithTimeout:mapCompletion:]
  -[MRAVReconnaissanceSession waitForCompleteClusters]
  -[MRAVReconnaissanceSession matchingOutputDeviceUIDs]
  -[MRAVReconnaissanceSession matchingOutputDeviceGroupID]
  -[MRAVReconnaissanceSession setUseWeakMatching:]
  -[MRAVReconnaissanceSession returnPartialResults]
  -[MRAVReconnaissanceSession setWaitForCompleteClusters:]
  -[MRAVReconnaissanceSession matchingLogicalDeviceIDs]
  -[MRAVReconnaissanceSession dealloc]


MRAVLightweightReconnaissanceSession : NSObject
  // instance methods
  -[MRAVLightweightReconnaissanceSession searchEndpointsForLeaderOutputDeviceUID:timeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchEndpointsForRoutingContextUID:timeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchEndpointsWithPredicate:timeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchEndpointsForCompanionWithTimeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchEndpointsForString:timeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchEndpointsForGroupUID:timeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchForLogicalOutputDeviceUID:timeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchForOutputDeviceUID:timeout:reason:queue:completion:]
  -[MRAVLightweightReconnaissanceSession searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:]


_MRGameControllerMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGameControllerMessageProtobuf .cxx_destruct]
  -[_MRGameControllerMessageProtobuf dictionaryRepresentation]
  -[_MRGameControllerMessageProtobuf writeTo:]
  -[_MRGameControllerMessageProtobuf isEqual:]
  -[_MRGameControllerMessageProtobuf readFrom:]
  -[_MRGameControllerMessageProtobuf copyWithZone:]


_MRSendVoiceInputMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRSendVoiceInputMessageProtobuf .cxx_destruct]
  -[_MRSendVoiceInputMessageProtobuf dictionaryRepresentation]
  -[_MRSendVoiceInputMessageProtobuf writeTo:]
  -[_MRSendVoiceInputMessageProtobuf isEqual:]
  -[_MRSendVoiceInputMessageProtobuf readFrom:]
  -[_MRSendVoiceInputMessageProtobuf copyWithZone:]


MRNowPlayingSessionServiceClient : NSObject
  // instance methods
  -[MRNowPlayingSessionServiceClient _handleDestroyPlayersForOrigin:]
  -[MRNowPlayingSessionServiceClient initWithService:]
  -[MRNowPlayingSessionServiceClient .cxx_destruct]
  -[MRNowPlayingSessionServiceClient _existingPlayerPathForOrigin:]
  -[MRNowPlayingSessionServiceClient _handleCreatePlayerForOrigin:deviceInfo:completion:]
  -[MRNowPlayingSessionServiceClient _generatePlayerPathForOrigin:]
  -[MRNowPlayingSessionServiceClient mediaServicesResetNotification:]
  -[MRNowPlayingSessionServiceClient _generatePlayerID]


_MRPlaybackQueueProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRPlaybackQueueProtobuf .cxx_destruct]
  -[_MRPlaybackQueueProtobuf dictionaryRepresentation]
  -[_MRPlaybackQueueProtobuf writeTo:]
  -[_MRPlaybackQueueProtobuf isEqual:]
  -[_MRPlaybackQueueProtobuf readFrom:]
  -[_MRPlaybackQueueProtobuf copyWithZone:]


_MRVideoThumbnailProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRVideoThumbnailProtobuf .cxx_destruct]
  -[_MRVideoThumbnailProtobuf dictionaryRepresentation]
  -[_MRVideoThumbnailProtobuf writeTo:]
  -[_MRVideoThumbnailProtobuf isEqual:]
  -[_MRVideoThumbnailProtobuf readFrom:]
  -[_MRVideoThumbnailProtobuf copyWithZone:]


MRAVConcreteRoutingDiscoverySession : MRAVRoutingDiscoverySession <MRCompanionConnectionControllerDelegate, MRExpanseManagerObserver>
 @property  NSArray *availableEndpoints
 @property  NSArray *availableOutputDevices
 @property  NSArray *unclusteredOutputDevices
 @property  MRAVOutputDevice *unclusteredLocalOutputDevice
 @property  NSArray *virtualOutputDevices
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRAVConcreteRoutingDiscoverySession daemonVirtualDevices]
  +[MRAVConcreteRoutingDiscoverySession setDaemonVirtualDevices:]

  // instance methods
  -[MRAVConcreteRoutingDiscoverySession targetAudioSessionID]
  -[MRAVConcreteRoutingDiscoverySession availableOutputDevices]
  -[MRAVConcreteRoutingDiscoverySession setTargetAudioSessionID:]
  -[MRAVConcreteRoutingDiscoverySession _onQueue_reloadAvailableOutputDevicesFromDiscovery:]
  -[MRAVConcreteRoutingDiscoverySession availableEndpoints]
  -[MRAVConcreteRoutingDiscoverySession _scheduleAvailableOutputDevicesReload]
  -[MRAVConcreteRoutingDiscoverySession _onQueue_reloadAvailableOutputDevices]
  -[MRAVConcreteRoutingDiscoverySession devicePresenceDetected]
  -[MRAVConcreteRoutingDiscoverySession setRoutingContextUID:]
  -[MRAVConcreteRoutingDiscoverySession .cxx_destruct]
  -[MRAVConcreteRoutingDiscoverySession discoveryMode]
  -[MRAVConcreteRoutingDiscoverySession routingContextUID]
  -[MRAVConcreteRoutingDiscoverySession unclusteredLocalOutputDevice]
  -[MRAVConcreteRoutingDiscoverySession expanseManagerDidJoinExpanseSession:]
  -[MRAVConcreteRoutingDiscoverySession expanseManagerDidLeaveExpanseSession:]
  -[MRAVConcreteRoutingDiscoverySession setAvailableOutputDevices:]
  -[MRAVConcreteRoutingDiscoverySession endpointFeatures]
  -[MRAVConcreteRoutingDiscoverySession unclusteredOutputDevices]
  -[MRAVConcreteRoutingDiscoverySession shouldUseDeviceInfoForLocalDevice]
  -[MRAVConcreteRoutingDiscoverySession _scheduleReload]
  -[MRAVConcreteRoutingDiscoverySession setDiscoveryMode:]
  -[MRAVConcreteRoutingDiscoverySession _handleDidJoinExpanse]
  -[MRAVConcreteRoutingDiscoverySession initWithConfiguration:]
  -[MRAVConcreteRoutingDiscoverySession _shouldCreateClusterOutputDevices]
  -[MRAVConcreteRoutingDiscoverySession setUnclusteredLocalOutputDevice:]
  -[MRAVConcreteRoutingDiscoverySession _deviceInfoDidChange:]
  -[MRAVConcreteRoutingDiscoverySession controllerDidUndiscoverCompanion:]
  -[MRAVConcreteRoutingDiscoverySession controller:didDiscoverCompanion:]
  -[MRAVConcreteRoutingDiscoverySession virtualOutputDevices]
  -[MRAVConcreteRoutingDiscoverySession _availableOutputDevicesDidChangeNotification:]
  -[MRAVConcreteRoutingDiscoverySession setUnclusteredOutputDevices:]
  -[MRAVConcreteRoutingDiscoverySession _onQueue_reload]
  -[MRAVConcreteRoutingDiscoverySession _setTargetAudioSessionID:]


MRApplicationActivity : NSObject <NSSecureCoding, NSMutableCopying, NSCopying>
 @property  NSUUID *uniqueIdentifier
 @property  NSString *primaryApplicationDisplayID
 @property  NSString *secondaryApplicationDisplayID
 @property  int status
 @property  int creatorProcessID

  // class methods
  +[MRApplicationActivity supportsSecureCoding]

  // instance methods
  -[MRApplicationActivity uniqueIdentifier]
  -[MRApplicationActivity initWithCoder:]
  -[MRApplicationActivity .cxx_destruct]
  -[MRApplicationActivity isEqual:]
  -[MRApplicationActivity status]
  -[MRApplicationActivity mutableCopyWithZone:]
  -[MRApplicationActivity initWithPrimaryAppDisplayID:secondaryAppDisplayID:]
  -[MRApplicationActivity primaryApplicationDisplayID]
  -[MRApplicationActivity creatorProcessID]
  -[MRApplicationActivity secondaryApplicationDisplayID]
  -[MRApplicationActivity copyWithZone:]
  -[MRApplicationActivity encodeWithCoder:]


MRMutableApplicationActivity : MRApplicationActivity <NSSecureCoding>
 @property  NSString *primaryApplicationDisplayID
 @property  NSString *secondaryApplicationDisplayID
 @property  int status

  // class methods
  +[MRMutableApplicationActivity supportsSecureCoding]

  // instance methods
  -[MRMutableApplicationActivity setPrimaryApplicationDisplayID:]
  -[MRMutableApplicationActivity setStatus:]
  -[MRMutableApplicationActivity setSecondaryApplicationDisplayID:]


_MRRegisterHIDDeviceMessageProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRRegisterHIDDeviceMessageProtobuf .cxx_destruct]
  -[_MRRegisterHIDDeviceMessageProtobuf dictionaryRepresentation]
  -[_MRRegisterHIDDeviceMessageProtobuf writeTo:]
  -[_MRRegisterHIDDeviceMessageProtobuf isEqual:]
  -[_MRRegisterHIDDeviceMessageProtobuf readFrom:]
  -[_MRRegisterHIDDeviceMessageProtobuf copyWithZone:]


_MRTransactionKeyProtobuf : PBCodable <NSCopying>
 @property  BOOL hasIdentifier
 @property  NSString *identifier
 @property  BOOL hasUserData
 @property  NSData *userData

  // instance methods
  -[_MRTransactionKeyProtobuf setUserData:]
  -[_MRTransactionKeyProtobuf userData]
  -[_MRTransactionKeyProtobuf mergeFrom:]
  -[_MRTransactionKeyProtobuf .cxx_destruct]
  -[_MRTransactionKeyProtobuf dictionaryRepresentation]
  -[_MRTransactionKeyProtobuf writeTo:]
  -[_MRTransactionKeyProtobuf isEqual:]
  -[_MRTransactionKeyProtobuf copyTo:]
  -[_MRTransactionKeyProtobuf readFrom:]
  -[_MRTransactionKeyProtobuf identifier]
  -[_MRTransactionKeyProtobuf hasUserData]
  -[_MRTransactionKeyProtobuf setIdentifier:]
  -[_MRTransactionKeyProtobuf hasIdentifier]
  -[_MRTransactionKeyProtobuf copyWithZone:]


_MRNowPlayingPlayerPathProtobuf : PBCodable <NSCopying>
 @property  BOOL hasOrigin
 @property  _MROriginProtobuf *origin
 @property  BOOL hasClient
 @property  _MRNowPlayingClientProtobuf *client
 @property  BOOL hasPlayer
 @property  _MRNowPlayingPlayerProtobuf *player

  // instance methods
  -[_MRNowPlayingPlayerPathProtobuf mergeFrom:]
  -[_MRNowPlayingPlayerPathProtobuf origin]
  -[_MRNowPlayingPlayerPathProtobuf setOrigin:]
  -[_MRNowPlayingPlayerPathProtobuf hasOrigin]
  -[_MRNowPlayingPlayerPathProtobuf hasPlayer]
  -[_MRNowPlayingPlayerPathProtobuf .cxx_destruct]
  -[_MRNowPlayingPlayerPathProtobuf dictionaryRepresentation]
  -[_MRNowPlayingPlayerPathProtobuf writeTo:]
  -[_MRNowPlayingPlayerPathProtobuf setClient:]
  -[_MRNowPlayingPlayerPathProtobuf setPlayer:]
  -[_MRNowPlayingPlayerPathProtobuf isEqual:]
  -[_MRNowPlayingPlayerPathProtobuf player]
  -[_MRNowPlayingPlayerPathProtobuf copyTo:]
  -[_MRNowPlayingPlayerPathProtobuf readFrom:]
  -[_MRNowPlayingPlayerPathProtobuf client]
  -[_MRNowPlayingPlayerPathProtobuf copyWithZone:]
  -[_MRNowPlayingPlayerPathProtobuf hasClient]


_MRGameControllerMotionProtobuf : PBCodable <NSCopying>
  // instance methods
  -[_MRGameControllerMotionProtobuf .cxx_destruct]
  -[_MRGameControllerMotionProtobuf dictionaryRepresentation]
  -[_MRGameControllerMotionProtobuf writeTo:]
  -[_MRGameControllerMotionProtobuf isEqual:]
  -[_MRGameControllerMotionProtobuf readFrom:]
  -[_MRGameControllerMotionProtobuf copyWithZone:]


MRAVOutputContextEndpoint : MRAVEndpoint <NSSecureCoding>
 @property  NSArray *outputDevices
 @property  MRAVConcreteOutputContext *outputContext
 @property  MROutputContextController *outputContextController
 @property  MROrigin *origin
 @property  BOOL realized

  // class methods
  +[MRAVOutputContextEndpoint supportsSecureCoding]

  // instance methods
  -[MRAVOutputContextEndpoint designatedGroupLeader]
  -[MRAVOutputContextEndpoint outputContext]
  -[MRAVOutputContextEndpoint outputContextDataSourceDidChangeOutputDevice:]
  -[MRAVOutputContextEndpoint removeOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVOutputContextEndpoint connectToExternalDeviceWithOptions:userInfo:completion:]
  -[MRAVOutputContextEndpoint connectionType]
  -[MRAVOutputContextEndpoint outputContextDataSourceDidRemoveOutputDevice:]
  -[MRAVOutputContextEndpoint setOutputContext:]
  -[MRAVOutputContextEndpoint setOutputDeviceVolume:outputDevice:queue:completion:]
  -[MRAVOutputContextEndpoint initWithOutputContext:uniqueIdentifier:]
  -[MRAVOutputContextEndpoint volumeControlCapabilitiesForOutputDevice:queue:completion:]
  -[MRAVOutputContextEndpoint outputContextDataSourceReloaded:]
  -[MRAVOutputContextEndpoint canModifyGroupMembership]
  -[MRAVOutputContextEndpoint outputContextDataSourceOutputDeviceDidChangeVolume:]
  -[MRAVOutputContextEndpoint isProxyGroupPlayer]
  -[MRAVOutputContextEndpoint outputContextDataSourceOutputDeviceDidChangeVolumeControlCapabilities:]
  -[MRAVOutputContextEndpoint uniqueIdentifier]
  -[MRAVOutputContextEndpoint outputDeviceVolume:queue:completion:]
  -[MRAVOutputContextEndpoint isRealized]
  -[MRAVOutputContextEndpoint initWithCoder:]
  -[MRAVOutputContextEndpoint setOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVOutputContextEndpoint isConnected]
  -[MRAVOutputContextEndpoint setOutputDevices:initiator:fadeAudio:withReplyQueue:completion:]
  -[MRAVOutputContextEndpoint personalOutputDevices]
  -[MRAVOutputContextEndpoint outputContextController]
  -[MRAVOutputContextEndpoint origin]
  -[MRAVOutputContextEndpoint outputContextDataSourceDidAddOutputDevice:]
  -[MRAVOutputContextEndpoint removeOutputDeviceFromParentGroup:queue:completion:]
  -[MRAVOutputContextEndpoint setOutputContextController:]
  -[MRAVOutputContextEndpoint addOutputDevices:initiator:withReplyQueue:completion:]
  -[MRAVOutputContextEndpoint setOrigin:]
  -[MRAVOutputContextEndpoint .cxx_destruct]
  -[MRAVOutputContextEndpoint setOutputDevices:]
  -[MRAVOutputContextEndpoint outputDevices]
  -[MRAVOutputContextEndpoint dealloc]
  -[MRAVOutputContextEndpoint encodeWithCoder:]


MRPasscodeCredentials : NSObject
 @property  unsigned int type
 @property  unsigned long characterCount
 @property  NSString *passcode

  // class methods
  +[MRPasscodeCredentials standardCredentials]

  // instance methods
  -[MRPasscodeCredentials setType:]
  -[MRPasscodeCredentials .cxx_destruct]
  -[MRPasscodeCredentials passcode]
  -[MRPasscodeCredentials type]
  -[MRPasscodeCredentials characterCount]
  -[MRPasscodeCredentials setCharacterCount:]
  -[MRPasscodeCredentials setPasscode:]


MRProtocolMessageLogger : NSObject
 @property  BOOL shouldLog
 @property  BOOL shouldVerboselyLog

  // class methods
  +[MRProtocolMessageLogger sharedLogger]

  // instance methods
  -[MRProtocolMessageLogger init]
  -[MRProtocolMessageLogger logMessage:client:protocolMessage:]
  -[MRProtocolMessageLogger setShouldLog:]
  -[MRProtocolMessageLogger setShouldVerboselyLog:]
  -[MRProtocolMessageLogger shouldVerboselyLog]
  -[MRProtocolMessageLogger shouldLog]


MRVirtualVoiceInputDeviceDescriptor : NSObject <NSMutableCopying>
 @property  NSArray *supportedFormats
 @property  NSDictionary *defaultFormat
 @property  NSData *data
 @property  _MRVoiceInputDeviceDescriptorProtobuf *protobuf

  // instance methods
  -[MRVirtualVoiceInputDeviceDescriptor .cxx_destruct]
  -[MRVirtualVoiceInputDeviceDescriptor _copyWithZone:usingConcreteClass:]
  -[MRVirtualVoiceInputDeviceDescriptor data]
  -[MRVirtualVoiceInputDeviceDescriptor defaultFormat]
  -[MRVirtualVoiceInputDeviceDescriptor protobuf]
  -[MRVirtualVoiceInputDeviceDescriptor initWithProtobuf:]
  -[MRVirtualVoiceInputDeviceDescriptor supportedFormats]
  -[MRVirtualVoiceInputDeviceDescriptor initWithData:]
  -[MRVirtualVoiceInputDeviceDescriptor mutableCopyWithZone:]
  -[MRVirtualVoiceInputDeviceDescriptor copyWithZone:]


MRMutableVirtualVoiceInputDeviceDescriptor : MRVirtualVoiceInputDeviceDescriptor
 @property  NSArray *supportedFormats
 @property  NSDictionary *defaultFormat

  // instance methods
  -[MRMutableVirtualVoiceInputDeviceDescriptor setDefaultFormat:]
  -[MRMutableVirtualVoiceInputDeviceDescriptor setSupportedFormats:]


RPCompanionLinkDevice(MRRapportTransportAdditions)
	// instance methods
	-[RPCompanionLinkDevice(MRRapportTransportAdditions) mrDeviceInfo]

PBCodable(MRAdditions)
	// instance methods
	-[PBCodable(MRAdditions) mr_valueForPotentiallyUndefinedKey:]

NSNotification(MRSerializationAdditions)
	// instance methods
	-[NSNotification(MRSerializationAdditions) playerPath]

(MRAdditions)
	// instance methods
	-[(MRAdditions) MR_isEqualToNowPlayingInfo:]

(MRAVAdditions)
	// instance methods
	-[(MRAVAdditions) mr_map:]
	-[(MRAVAdditions) mr_compactMap:]
	-[(MRAVAdditions) mr_all:]
	-[(MRAVAdditions) mr_first:]
	-[(MRAVAdditions) mr_filter:]
	-[(MRAVAdditions) mr_any:]
	-[(MRAVAdditions) mr_isCommandSupported:]
	-[(MRAVAdditions) mr_isCommandSupportedAndEnabled:]
	-[(MRAVAdditions) mr_ifDisabledWhyDisabled:]
	-[(MRAVAdditions) mr_containsAnyOf:]
	-[(MRAVAdditions) mr_flatMap:]
	-[(MRAVAdditions) mr_isEqualToOutputDevicesArray:]
	-[(MRAVAdditions) mr_arrayByRemovingLocalEndpoint]
	-[(MRAVAdditions) changeDescriptionTo:keyBlock:isUpdatedBlock:descriptionBlock:]

IDSService(MRAdditions)
	// class methods
	+[IDSService(MRAdditions) sharedIDSService]
	+[IDSService(MRAdditions) mediaRemoteServiceName]

(MRAdditions)
	// instance methods
	-[(MRAdditions) initWithMRError:description:]
	-[(MRAdditions) initWithMRError:format:]
	-[(MRAdditions) initWithMRError:]
	-[(MRAdditions) initWithMRError:userInfo:]
	-[(MRAdditions) recursiveUnderlyingError]
	-[(MRAdditions) mr_protobuf]
	-[(MRAdditions) mr_initWithProtobuf:]
	-[(MRAdditions) mr_errorByEnvelopingWithMRError:]

(MRContentItemAdditions)
	// instance methods
	-[(MRContentItemAdditions) _BoolValue]

(MRAVReconnaissanceSessionAdditions)
	// instance methods
	-[(MRAVReconnaissanceSessionAdditions) mr_containsObjectUsingWeakMatching:]

01 00 1100 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 0200 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 0200 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 0200 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleProxy 
01 00 0200 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleRecord 
01 00 0400 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVBlockGuard 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVBloomFilter 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVCallback 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVMessageParser 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVMultiCallback 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVMutableBidirectionalDictionary 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVPair 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVTimer 
01 00 0c00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVVariableIntervalTimer 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSDecimalNumber 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInputStream 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0100 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSNetService 
01 00 0100 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSNetServiceBrowser 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 1300 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOutputStream 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSProxy 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSStream 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0100 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLSession 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCCoder 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 1000 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListenerEndpoint 
01 00 0e00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0600 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkClient 
01 00 0600 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkDevice 
01 00 0500 /System/Library/PrivateFrameworks/RemoteTextInput.framework/RemoteTextInput: RTIDataPayload 
01 00 0500 /System/Library/PrivateFrameworks/RemoteTextInput.framework/RemoteTextInput: RTIInputSystemSourceSession 
