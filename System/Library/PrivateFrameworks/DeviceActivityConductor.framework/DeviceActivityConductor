|| __DATA.__objc_data _OBJC_CLASS_$_DACActivityDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_DACActivityList
|| __DATA.__objc_data _OBJC_CLASS_$_DACDeviceRole
|| __DATA.__objc_data _OBJC_CLASS_$_DACLifecycleManager
|| __DATA.__objc_data _OBJC_CLASS_$_DACRoleManager
|| __DATA.__objc_data _OBJC_CLASS_$_DACUnknownActivityPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_DACActivityDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_DACActivityList
|| __DATA.__objc_data _OBJC_METACLASS_$_DACDeviceRole
|| __DATA.__objc_data _OBJC_METACLASS_$_DACLifecycleManager
|| __DATA.__objc_data _OBJC_METACLASS_$_DACRoleManager
|| __DATA.__objc_data _OBJC_METACLASS_$_DACUnknownActivityPolicy
|| __DATA_CONST.__const _DACLifecycleServiceResetNotificationName
|| __DATA_CONST.__const _DACLifecycleServiceServiceName
|| __DATA_CONST.__const _DACRoleServiceResetNotificationName
|| __DATA_CONST.__const _DACRoleServiceServiceName
|| __TEXT.__const _DeviceActivityConductorVersionNumber
|| __TEXT.__const _DeviceActivityConductorVersionString
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: ___CFConstantStringClassReference
__ Foundation: _NSStringFromClass
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSString
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_is_valid_token
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_assert_owner
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
DACUnknownActivityPolicy : NSObject <NSSecureCoding>
 @property  unsigned long options
 @property  NSString *audioSessionCategory
 @property  NSString *audioSessionMode
 @property  unsigned long audioSessionOptions

  // class methods
  +[DACUnknownActivityPolicy supportsSecureCoding]
  +[DACUnknownActivityPolicy policyWithOptions:]
  +[DACUnknownActivityPolicy audioPolicyWithOptions:audioSessionCategory:audioSessionMode:audioSessionOptions:]

  // instance methods
  -[DACUnknownActivityPolicy encodeWithCoder:]
  -[DACUnknownActivityPolicy .cxx_destruct]
  -[DACUnknownActivityPolicy options]
  -[DACUnknownActivityPolicy audioSessionCategory]
  -[DACUnknownActivityPolicy isEqual:]
  -[DACUnknownActivityPolicy audioSessionOptions]
  -[DACUnknownActivityPolicy initWithCoder:]
  -[DACUnknownActivityPolicy audioSessionMode]
  -[DACUnknownActivityPolicy _initWithOptions:audioSessionCategory:audioSessionMode:audioSessionOptions:]
  -[DACUnknownActivityPolicy isEqualToUnknownActivityPolicy:]


DACActivityDescriptor : NSObject <NSSecureCoding>
 @property  NSString *identifier
 @property  unsigned long priority
 @property  DACUnknownActivityPolicy *policy
 @property  BOOL localOnly

  // class methods
  +[DACActivityDescriptor comparator]
  +[DACActivityDescriptor supportsSecureCoding]
  +[DACActivityDescriptor activityDescriptorWithIdentifier:priority:policy:]
  +[DACActivityDescriptor localOnlyActivityDescriptorWithIdentifier:priority:policy:]

  // instance methods
  -[DACActivityDescriptor identifier]
  -[DACActivityDescriptor encodeWithCoder:]
  -[DACActivityDescriptor .cxx_destruct]
  -[DACActivityDescriptor priority]
  -[DACActivityDescriptor isEqual:]
  -[DACActivityDescriptor policy]
  -[DACActivityDescriptor initWithCoder:]
  -[DACActivityDescriptor isLocalOnly]
  -[DACActivityDescriptor _initWithIdentifier:priority:policy:localOnly:]
  -[DACActivityDescriptor isEqualToActivityDescriptor:]


DACDeviceRole : NSObject <NSSecureCoding>
 @property  unsigned long flags

  // class methods
  +[DACDeviceRole supportsSecureCoding]
  +[DACDeviceRole unknownRole]

  // instance methods
  -[DACDeviceRole isPrimary]
  -[DACDeviceRole encodeWithCoder:]
  -[DACDeviceRole flags]
  -[DACDeviceRole isEqual:]
  -[DACDeviceRole initWithCoder:]
  -[DACDeviceRole isUnknown]
  -[DACDeviceRole satisfiesRole:]
  -[DACDeviceRole _initWithRoleFlags:]
  -[DACDeviceRole _isEqualToRole:]


DACActivityListEntry : NSObject <NSSecureCoding, NSCopying>
 @property  DACActivityDescriptor *activity
 @property  NSDate *date
 @property  unsigned long reason
 @property  DACActivityDescriptor *origin

  // class methods
  +[DACActivityListEntry comparator]
  +[DACActivityListEntry supportsSecureCoding]

  // instance methods
  -[DACActivityListEntry origin]
  -[DACActivityListEntry encodeWithCoder:]
  -[DACActivityListEntry date]
  -[DACActivityListEntry .cxx_destruct]
  -[DACActivityListEntry reason]
  -[DACActivityListEntry activity]
  -[DACActivityListEntry copyWithZone:]
  -[DACActivityListEntry isEqualToEntry:]
  -[DACActivityListEntry isEqual:]
  -[DACActivityListEntry initWithCoder:]
  -[DACActivityListEntry _initWithActivity:date:reason:origin:]
  -[DACActivityListEntry initWithActivity:reason:origin:]
  -[DACActivityListEntry entryWithUpdatedReason:]


DACActivityList : NSObject <NSSecureCoding, NSCopying>
 @property  NSMutableArray *activeActivities
 @property  NSDate *lastModified

  // class methods
  +[DACActivityList supportsSecureCoding]

  // instance methods
  -[DACActivityList lastModified]
  -[DACActivityList encodeWithCoder:]
  -[DACActivityList .cxx_destruct]
  -[DACActivityList _updateModificationDate]
  -[DACActivityList copyWithZone:]
  -[DACActivityList _withLock:]
  -[DACActivityList isEqual:]
  -[DACActivityList init]
  -[DACActivityList initWithCoder:]
  -[DACActivityList isEqualToActivityList:]
  -[DACActivityList isEqualIgnoringLastModified:]
  -[DACActivityList activityCount]
  -[DACActivityList stateOfActivity:]
  -[DACActivityList enumerateList:]
  -[DACActivityList addActivity:requester:]
  -[DACActivityList removeActivity:requester:]
  -[DACActivityList listWithMerge:]
  -[DACActivityList splitLocalOnly:]
  -[DACActivityList changesFromList:info:]
  -[DACActivityList _indexOfActivity:]
  -[DACActivityList _stateOfActivity:]
  -[DACActivityList _stateOfActivityAtIndex:]
  -[DACActivityList _addActivityEntry:]
  -[DACActivityList _removeActivity:origin:]
  -[DACActivityList _insertionIndex:]
  -[DACActivityList _reconcileReasons]
  -[DACActivityList _updateReason:atIndex:]
  -[DACActivityList _entryOfActivity:]
  -[DACActivityList _activityDeltaFromList:completion:]
  -[DACActivityList activeActivities]


DACRoleManager : NSObject <DACRoleClientInterface>
 @property  <DACRoleManagerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSDate *lastLeaderAt
 @property  DACDeviceRole *role
 @property  NSXPCConnection *currentConnection
 @property  BOOL shouldAttemptReconnect
 @property  BOOL connected
 @property  int resetNotifyToken
 @property  NSString *cluster
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[DACRoleManager _lostConnectionToService]
  -[DACRoleManager isConnected]
  -[DACRoleManager setConnected:]
  -[DACRoleManager role]
  -[DACRoleManager currentConnection]
  -[DACRoleManager delegate]
  -[DACRoleManager dealloc]
  -[DACRoleManager .cxx_destruct]
  -[DACRoleManager delegateQueue]
  -[DACRoleManager cluster]
  -[DACRoleManager setRole:]
  -[DACRoleManager _notifyDelegate]
  -[DACRoleManager queue]
  -[DACRoleManager _serviceConnection]
  -[DACRoleManager _remoteInterfaceWithErrorHandler:]
  -[DACRoleManager roleChanged:]
  -[DACRoleManager initWithDelegate:lastLeaderAt:cluster:queue:]
  -[DACRoleManager requestSpeakerGroupLeaderRole]
  -[DACRoleManager _conductordResetOnQueue]
  -[DACRoleManager lastLeaderAt]
  -[DACRoleManager setLastLeaderAt:]
  -[DACRoleManager setCurrentConnection:]
  -[DACRoleManager shouldAttemptReconnect]
  -[DACRoleManager setShouldAttemptReconnect:]
  -[DACRoleManager resetNotifyToken]
  -[DACRoleManager setResetNotifyToken:]


DACLifecycleManager : NSObject <DACLifecycleClientInterface>
 @property  <DACLifecycleManagerDelegate> *delegate
 @property  NSString *cluster
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  DACDeviceRole *role
 @property  DACActivityList *activityList
 @property  NSXPCConnection *currentConnection
 @property  NSMutableSet *registeredActivities
 @property  BOOL shouldAttemptReconnect
 @property  BOOL connected
 @property  int resetNotifyToken
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[DACLifecycleManager _lostConnectionToService]
  -[DACLifecycleManager unregisterActivity:]
  -[DACLifecycleManager registerActivity:]
  -[DACLifecycleManager isConnected]
  -[DACLifecycleManager setConnected:]
  -[DACLifecycleManager role]
  -[DACLifecycleManager currentConnection]
  -[DACLifecycleManager delegate]
  -[DACLifecycleManager dealloc]
  -[DACLifecycleManager .cxx_destruct]
  -[DACLifecycleManager delegateQueue]
  -[DACLifecycleManager cluster]
  -[DACLifecycleManager setRole:]
  -[DACLifecycleManager queue]
  -[DACLifecycleManager _serviceConnection]
  -[DACLifecycleManager registeredActivities]
  -[DACLifecycleManager _remoteInterfaceWithErrorHandler:]
  -[DACLifecycleManager roleChanged:]
  -[DACLifecycleManager _conductordResetOnQueue]
  -[DACLifecycleManager setCurrentConnection:]
  -[DACLifecycleManager shouldAttemptReconnect]
  -[DACLifecycleManager setShouldAttemptReconnect:]
  -[DACLifecycleManager resetNotifyToken]
  -[DACLifecycleManager setResetNotifyToken:]
  -[DACLifecycleManager activityListChanged:]
  -[DACLifecycleManager initWithDelegate:cluster:queue:]
  -[DACLifecycleManager lifecycleStateOfActivity:result:]
  -[DACLifecycleManager enumerateLifecycleInfo:]
  -[DACLifecycleManager requestActivationOfActivity:requester:]
  -[DACLifecycleManager requestDeactivationOfActivity:requester:]
  -[DACLifecycleManager activityList]
  -[DACLifecycleManager setActivityList:]
  -[DACLifecycleManager setRegisteredActivities:]


DACLifecycleManagerMediator : NSObject <DACLifecycleClientInterface>
 @property  DACLifecycleManager *manager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[DACLifecycleManagerMediator .cxx_destruct]
  -[DACLifecycleManagerMediator manager]
  -[DACLifecycleManagerMediator roleChanged:]
  -[DACLifecycleManagerMediator activityListChanged:]
  -[DACLifecycleManagerMediator initWithLifecycleManager:]


01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0200 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0400 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
