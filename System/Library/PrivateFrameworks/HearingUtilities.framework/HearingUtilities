|| __DATA.__data _AXHASoundDetectionTypeApplianceBeeps
|| __DATA.__data _AXHASoundDetectionTypeApplianceBellDings
|| __DATA.__data _AXHASoundDetectionTypeApplianceBuzzes
|| __DATA.__data _AXHASoundDetectionTypeCarHorns
|| __DATA.__data _AXHASoundDetectionTypeCatMeows
|| __DATA.__data _AXHASoundDetectionTypeDistressedBaby
|| __DATA.__data _AXHASoundDetectionTypeDogBarks
|| __DATA.__data _AXHASoundDetectionTypeDoorKnocks
|| __DATA.__data _AXHASoundDetectionTypeDoorbells
|| __DATA.__data _AXHASoundDetectionTypeFireAlarms
|| __DATA.__data _AXHASoundDetectionTypePersonShouting
|| __DATA.__data _AXHASoundDetectionTypeSirenAlarms
|| __DATA.__data _AXHASoundDetectionTypeSmokeAlarms
|| __DATA.__data _AXHASoundDetectionTypeWaterRunning
|| __DATA.__data _kAXSNoisePreferenceDomain
|| __DATA.__objc_data _OBJC_CLASS_$_AXFakeHearingAidDevice
|| __DATA.__objc_data _OBJC_CLASS_$_AXFakePSAPDevice
|| __DATA.__objc_data _OBJC_CLASS_$_AXHADetectionResult
|| __DATA.__objc_data _OBJC_CLASS_$_AXHADetectorManager
|| __DATA.__objc_data _OBJC_CLASS_$_AXHAListenEngine
|| __DATA.__objc_data _OBJC_CLASS_$_AXHAListenerHelper
|| __DATA.__objc_data _OBJC_CLASS_$_AXHALiveListenController
|| __DATA.__objc_data _OBJC_CLASS_$_AXHAResultsCollector
|| __DATA.__objc_data _OBJC_CLASS_$_AXHARingBuffer
|| __DATA.__objc_data _OBJC_CLASS_$_AXHAServer
|| __DATA.__objc_data _OBJC_CLASS_$_AXHASoundDetectionController
|| __DATA.__objc_data _OBJC_CLASS_$_AXHATimeStamp
|| __DATA.__objc_data _OBJC_CLASS_$_AXHATimedAudioBuffer
|| __DATA.__objc_data _OBJC_CLASS_$_AXHAUltronController
|| __DATA.__objc_data _OBJC_CLASS_$_AXHearingAidDevice
|| __DATA.__objc_data _OBJC_CLASS_$_AXPSAPDevice
|| __DATA.__objc_data _OBJC_CLASS_$_AXRemoteHearingAidDevice
|| __DATA.__objc_data _OBJC_CLASS_$_AXUltronModelAssetManager
|| __DATA.__objc_data _OBJC_CLASS_$_HANanoSettings
|| __DATA.__objc_data _OBJC_CLASS_$_HUFakeXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_HUNearbyDevice
|| __DATA.__objc_data _OBJC_CLASS_$_HUNoiseController
|| __DATA.__objc_data _OBJC_CLASS_$_HUNoiseSample
|| __DATA.__objc_data _OBJC_METACLASS_$_AXFakeHearingAidDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_AXFakePSAPDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHADetectionResult
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHADetectorManager
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHAListenEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHAListenerHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHALiveListenController
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHAResultsCollector
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHARingBuffer
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHAServer
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHASoundDetectionController
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHATimeStamp
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHATimedAudioBuffer
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHAUltronController
|| __DATA.__objc_data _OBJC_METACLASS_$_AXHearingAidDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_AXPSAPDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_AXRemoteHearingAidDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_AXUltronModelAssetManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HANanoSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_HUFakeXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_HUNearbyDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_HUNoiseController
|| __DATA.__objc_data _OBJC_METACLASS_$_HUNoiseSample
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXFakeHearingAidDevice._leftFakePrograms
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXFakeHearingAidDevice._rightFakePrograms
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXFakePSAPDevice._leftFakePrograms
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXFakePSAPDevice._rightFakePrograms
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXHALiveListenController._debugAudioFile
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXHALiveListenController._exportsLiveListenToFile
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXHALiveListenController._mixerUnit
|| __DATA.__objc_ivar _OBJC_IVAR_$_AXHALiveListenController._rioUnit
|| __DATA_CONST.__const _AXHATrustChainReady
|| __DATA_CONST.__const _AXHearingAidAudioRoutesChangedNotification
|| __DATA_CONST.__const _AXHearingAidControlCenterBundleID
|| __DATA_CONST.__const _AXHearingAidControlCenterPath
|| __DATA_CONST.__const _AXLEHIAuthServiceUUIDString
|| __DATA_CONST.__const _AXLEHIAuthVersionCharacteristicUUIDString
|| __DATA_CONST.__const _AXLEHIDISFirmwareVersionCharacteristicUUIDString
|| __DATA_CONST.__const _AXLEHIDISHardwareVersionCharacteristicUUIDString
|| __DATA_CONST.__const _AXLEHIDISManufacturerCharacteristicUUIDString
|| __DATA_CONST.__const _AXLEHIDISModelNumberCharacteristicUUIDString
|| __DATA_CONST.__const _AXLEHIDISServiceUUIDString
|| __DATA_CONST.__const _AXLEHIServiceUUIDString
|| __DATA_CONST.__const _HUAudioTransferAvailabilityDidChangeNotification
|| __DATA_CONST.__const _HUEDEnabledIdentifier
|| __DATA_CONST.__const _HUEDFastLeqIdentifier
|| __DATA_CONST.__const _HUEDOnboardingNotificationID
|| __DATA_CONST.__const _HUEDSlowLeqIdentifier
|| __DATA_CONST.__const _HUEDThresholdCrossedIdentifier
|| __DATA_CONST.__const _HUEDThresholdNotificationID
|| __DATA_CONST.__const _HUHearingUIAvailabilityDidChangeNotification
|| __DATA_CONST.__const _HUNearbyDevicesDidChangeNotification
|| __DATA_CONST.__const _HUPSAPServiceUUIDString
|| __DATA_CONST.__const _HUUserLevelSetupAvailableNotification
|| __DATA_CONST.__const _HUUserRequestedAudioTransferCompleteNotification
|| __DATA_CONST.__const _HUUserRequestedAudioTransferNotification
|| __DATA_CONST.__const _kAXSEnabledSoundDetectionStatePreference
|| __DATA_CONST.__const _kAXSEnabledSoundDetectionTypesPreference
|| __DATA_CONST.__const _kAXSSoundDetectionSnoozeDictionary
|| __DATA_CONST.__const _kAXSSoundDetectionSupportedTypes
|| __DATA_CONST.__const _kAXSUltronEnabledPreference
|| __DATA_CONST.__const _kAXSUltronRunningStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXHAController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXHAMessageHandlerContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXHASettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXHASettingsListenerHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXHeardController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXHearingAidDeviceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXHearingAidMode
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HUDeviceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HUHeadphoneLevelController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HUNearbyController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HUNoiseSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HUNoiseSettingsListenerHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HUUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXHAController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXHAMessageHandlerContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXHASettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXHASettingsListenerHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXHeardController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXHearingAidDeviceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXHearingAidMode
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HUDeviceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HUHeadphoneLevelController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HUNearbyController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HUNoiseSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HUNoiseSettingsListenerHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HUUtilities
|| __TEXT.__const _HearingUtilitiesVersionNumber
|| __TEXT.__const _HearingUtilitiesVersionString
|| __TEXT.__text _AHXASoundDetectionSnoozeNotificationsFor
|| __TEXT.__text _AXHACHearingAidCapabilities
|| __TEXT.__text _AXHACHearingAidComplianceEnabled
|| __TEXT.__text _AXHACHearingAidComplianceSetEnabled
|| __TEXT.__text _AXHASoundDetectionGenerateUserNotificationForDetectionType
|| __TEXT.__text _AXHASoundDetectionRequestNotificationAuthorization
|| __TEXT.__text _HUNoiseLocString
|| __TEXT.__text __SoundDetectionLocStringForType
|| __TEXT.__text __accessibilityHWModel
|| __TEXT.__text __accessibilitySDSupportBundle
|| __TEXT.__text _accessibilityHearingAidSupportBundle
|| __TEXT.__text _cloudHearingAidDescriptionForDescription
|| __TEXT.__text _compoundAttributeByAddingAttribute
|| __TEXT.__text _compoundAttributeByRemovingAttribute
|| __TEXT.__text _compoundAttributeContainsAttribute
|| __TEXT.__text _hearingAidReceivingAudio
|| __TEXT.__text _hearingAidStreamAvailable
|| __TEXT.__text _hearingAidStreamSelected
|| __TEXT.__text _hearingConnectionStatusDescription
|| __TEXT.__text _hearingDeamonShouldBeRunning
|| __TEXT.__text _hearingEarFromInputOption
|| __TEXT.__text _hearingInputRouteStringForOption
|| __TEXT.__text _hearingLocString
|| __TEXT.__text _hearingPropertyDescription
|| __TEXT.__text _hearingUIShouldBeAvailable
|| __TEXT.__text _inputOptionFromHearingEar
|| __TEXT.__text _liveListenStreamSelected
|| __TEXT.__text _nameForComplicationPreferredDisplayMode
|| __TEXT.__text _nameOfHearingDeviceReachableForAudioHandoff
|| __TEXT.__text _propertyContainsProperty
|| __TEXT.__text _propertyIsDependentOnProperty
|| __TEXT.__text _subPropertiesOfProperty
|| __TEXT.__text _supportsBinauralStreamingForHearingAid
__ AVFoundation: _AVAudioEngineConfigurationChangeNotification
__ AVFoundation: _AVAudioSessionCategoryPlayAndRecord
__ AVFoundation: _AVAudioSessionInterruptionNotification
__ AVFoundation: _AVAudioSessionInterruptionOptionKey
__ AVFoundation: _AVAudioSessionInterruptionTypeKey
__ AVFoundation: _AVAudioSessionMediaServicesWereResetNotification
__ AVFoundation: _AVAudioSessionModeDefault
__ AVFoundation: _AVAudioSessionModeHearingAccessibility
__ AVFoundation: _AVAudioSessionRouteChangeNotification
__ AVFoundation: _AVFormatIDKey
__ AVFoundation: _AVLinearPCMBitDepthKey
__ AVFoundation: _AVLinearPCMIsFloatKey
__ AVFoundation: _AVNumberOfChannelsKey
__ AVFoundation: _AVSampleRateKey
__ AVFoundation: _OBJC_CLASS_$_AVAudioEngine
__ AVFoundation: _OBJC_CLASS_$_AVAudioFile
__ AVFoundation: _OBJC_CLASS_$_AVAudioFormat
__ AVFoundation: _OBJC_CLASS_$_AVAudioSession
__ AXAssetLoader: _OBJC_CLASS_$_AXAsset
__ AXAssetLoader: _OBJC_CLASS_$_AXAssetController
__ AXAssetLoader: _OBJC_CLASS_$_AXUltronModelAssetPolicy
__ AXCoreUtilities: _AXLogRTT
__ AXCoreUtilities: _AXLogUltron
__ AXCoreUtilities: _AXPerformBlockAsynchronouslyOnMainThread
__ AXCoreUtilities: _AXPerformBlockOnMainThread
__ AXCoreUtilities: _AXPerformBlockOnMainThreadAfterDelay
__ AXCoreUtilities: _AXPerformBlockSynchronouslyOnMainThread
__ AXCoreUtilities: _OBJC_CLASS_$_AXAccessQueue
__ AXCoreUtilities: _OBJC_CLASS_$_AXDispatchTimer
__ AXCoreUtilities: _OBJC_CLASS_$_AXXPCUtilities
__ AXCoreUtilities: __AXAssertIsMainThread
__ Accounts: _ACAccountStoreDidChangeNotification
__ Accounts: _ACAccountTypeIdentifierAppleAccount
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ AudioToolbox: _AudioComponentFindNext
__ AudioToolbox: _AudioComponentInstanceDispose
__ AudioToolbox: _AudioComponentInstanceNew
__ AudioToolbox: _AudioOutputUnitStart
__ AudioToolbox: _AudioOutputUnitStop
__ AudioToolbox: _AudioUnitGetParameter
__ AudioToolbox: _AudioUnitInitialize
__ AudioToolbox: _AudioUnitRender
__ AudioToolbox: _AudioUnitSetParameter
__ AudioToolbox: _AudioUnitSetProperty
__ AudioToolbox: _ExtAudioFileCreateWithURL
__ AudioToolbox: _ExtAudioFileDispose
__ AudioToolbox: _ExtAudioFileSetProperty
__ AudioToolbox: _ExtAudioFileWriteAsync
__ Celestial: _AVController_PickableRouteType_Default
__ Celestial: _AVController_RouteDescriptionKey_AVAudioRouteName
__ Celestial: _AVController_RouteDescriptionKey_RouteCurrentlyPicked
__ Celestial: _AVController_RouteDescriptionKey_RouteType
__ Celestial: _AVController_RouteDescriptionKey_RouteUID
__ Celestial: _AVSystemController_ActiveAudioRouteDidChangeNotification
__ Celestial: _AVSystemController_AudioIsPlayingSomewhereAttribute
__ Celestial: _AVSystemController_CarPlayIsConnectedAttribute
__ Celestial: _AVSystemController_CarPlayIsConnectedDidChangeNotification
__ Celestial: _AVSystemController_CarPlayIsConnectedNotificationParameter
__ Celestial: _AVSystemController_NowPlayingAppIsPlayingAttribute
__ Celestial: _AVSystemController_NowPlayingAppIsPlayingDidChangeNotification
__ Celestial: _AVSystemController_PickableRoutesAttribute
__ Celestial: _AVSystemController_PickableRoutesDidChangeNotification
__ Celestial: _AVSystemController_PickedRouteAttribute
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_SupportsLiveListen
__ Celestial: _AVSystemController_RouteDescriptionKey_IsPreferredExternalRoute
__ Celestial: _AVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_IsActive
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteCurrentlyPicked
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreBluetooth: _CBAdvertisementDataServiceUUIDsKey
__ CoreBluetooth: _CBCancelPeripheralConnectionOptionDoNotAutoConnectBuiltInServices
__ CoreBluetooth: _CBCancelPeripheralConnectionOptionForce
__ CoreBluetooth: _CBCentralManagerOptionReceiveSystemEvents
__ CoreBluetooth: _CBCentralManagerScanOptionAllowDuplicatesKey
__ CoreBluetooth: _CBConnectPeripheralOptionNotifyOnDisconnectionKey
__ CoreBluetooth: _CBManagerIsPrivilegedDaemonKey
__ CoreBluetooth: _OBJC_CLASS_$_CBCentralManager
__ CoreBluetooth: _OBJC_CLASS_$_CBPeripheral
__ CoreBluetooth: _OBJC_CLASS_$_CBUUID
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreML: _OBJC_CLASS_$_MLModel
__ Foundation: _NSFileCreationDate
__ Foundation: _NSFileSize
__ Foundation: _NSFileSystemFreeSize
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUbiquitousKeyValueStoreDidChangeExternallyNotification
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUbiquitousKeyValueStore
__ HearingCore: _AXHAMessageKeyIdentifier
__ HearingCore: _AXHAMessageKeyPayload
__ HearingCore: _AXHANULL
__ HearingCore: _AXHearingAidServerName
__ HearingCore: _HAEngineeringLog
__ HearingCore: _HAInitializeLogging
__ HearingCore: _HCMessageDeviceNameKey
__ HearingCore: _HCPerformSafeBlock
__ HearingCore: _OBJC_CLASS_$_HCServer
__ HearingCore: _OBJC_CLASS_$_HCUtilities
__ HearingCore: _OBJC_CLASS_$_HCXPCClient
__ HearingCore: _OBJC_CLASS_$_HCXPCMessage
__ HearingCore: _OBJC_METACLASS_$_HCServer
__ HearingCore: _OBJC_METACLASS_$_HCXPCClient
__ HearingCore: _PAEngineeringLog
__ HearingCore: _PAInitializeLogging
__ IOKit: _IOPSCreatePowerSource
__ IOKit: _IOPSReleasePowerSource
__ IOKit: _IOPSSetPowerSourceDetails
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin
__ MediaRemote: _MRMediaRemoteSendCommandToApp
__ MobileKeyBag: _MKBDeviceFormattedForContentProtection
__ MobileKeyBag: _kMobileKeyBagLockStatusNotifyToken
__ NanoPreferencesSync: _OBJC_CLASS_$_NPSDomainAccessor
__ NanoPreferencesSync: _OBJC_CLASS_$_NPSManager
__ NanoRegistry: _NRPairedDeviceRegistryDeviceDidBecomeActive
__ NanoRegistry: _NRPairedDeviceRegistryDeviceDidUnpairNotification
__ RTTUtilities: _OBJC_CLASS_$_RTTController
__ RTTUtilities: _OBJC_CLASS_$_RTTSettings
__ RTTUtilities: _OBJC_CLASS_$_RTTTelephonyUtilities
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkClient
__ Rapport: _RPDestinationIdentifierDirectPeer
__ Rapport: _RPOptionSenderID
__ Rapport: _RPOptionSenderIDSDeviceID
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTaskCreateWithAuditToken
__ SoftLinking: __sl_dlopen_audited
__ SoundAnalysis: _OBJC_CLASS_$_SNAudioFileAnalyzer
__ SoundAnalysis: _OBJC_CLASS_$_SNAudioStreamAnalyzer
__ SoundAnalysis: _OBJC_CLASS_$_SNDetectSoundRequest
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarStyleOverridesAssertion
__ TelephonyUtilities: _TUCallCenterCallStatusChangedNotification
__ UserNotifications: _OBJC_CLASS_$_UNMutableNotificationContent
__ UserNotifications: _OBJC_CLASS_$_UNNotificationAction
__ UserNotifications: _OBJC_CLASS_$_UNNotificationCategory
__ UserNotifications: _OBJC_CLASS_$_UNNotificationRequest
__ UserNotifications: _OBJC_CLASS_$_UNNotificationSound
__ UserNotifications: _OBJC_CLASS_$_UNUserNotificationCenter
__ libAccessibility.dylib: __AXSAccessibilityPreferenceDomain
__ libAccessibility.dylib: __AXSClosedCaptionsEnabled
__ libAccessibility.dylib: __AXSEarpieceNoiseCancellationEnabled
__ libAccessibility.dylib: __AXSHearingAidComplianceEnabled
__ libAccessibility.dylib: __AXSHearingAidComplianceSetEnabled
__ libAccessibility.dylib: __AXSHearingAidsSetPaired
__ libAccessibility.dylib: __AXSHearingDevicePairedEars
__ libAccessibility.dylib: __AXSHearingSetDevicePairedEars
__ libAccessibility.dylib: __AXSInUnitTestMode
__ libAccessibility.dylib: __AXSLeftRightAudioBalance
__ libAccessibility.dylib: __AXSMonoAudioEnabled
__ libAccessibility.dylib: __AXSSetAccessibilityEnabled
__ libAccessibility.dylib: __AXSSetTripleClickOptions
__ libAccessibility.dylib: __AXSTripleClickContainsOption
__ libAccessibility.dylib: __AXSTripleClickCopyOptions
__ libAccessibility.dylib: __AXSVisualAlertEnabled
__ libAccessibility.dylib: __AXSVoiceOverTouchEnabled
__ libAccessibility.dylib: _kAXSHearingAidsPreferenceDomain
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___exp10
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _strtoull
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_get_audit_token
__ libSystem.B.dylib: _xpc_connection_get_name
__ libSystem.B.dylib: _xpc_connection_get_pid
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
HUHeadphoneLevelController : NSObject /usr/lib/libSystem.B.dylib <ADAMAudioDataReceiverDelegate>
 @property  ADAMAudioDataReceiver *receiver
 @property  AXDispatchTimer *adamSuspendedTimer
 @property  NSObject<OS_dispatch_queue> *dataQueue
 @property  float slowLeq
 @property  float fastLeq
 @property  BOOL measurementEnabled
 @property  unsigned long thresholdLevel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HUHeadphoneLevelController sharedController]

  // instance methods
  -[HUHeadphoneLevelController receiveAudioSample:]
  -[HUHeadphoneLevelController init]
  -[HUHeadphoneLevelController receiver]
  -[HUHeadphoneLevelController setDataQueue:]
  -[HUHeadphoneLevelController slowLeq]
  -[HUHeadphoneLevelController setReceiver:]
  -[HUHeadphoneLevelController adamSuspendedTimer]
  -[HUHeadphoneLevelController registerForHeadphoneLevelUpdates:]
  -[HUHeadphoneLevelController dealloc]
  -[HUHeadphoneLevelController .cxx_destruct]
  -[HUHeadphoneLevelController restartADAMTimer]
  -[HUHeadphoneLevelController pushValues]
  -[HUHeadphoneLevelController isMeasurementEnabled]
  -[HUHeadphoneLevelController setSlowLeq:]
  -[HUHeadphoneLevelController setThresholdLevel:]
  -[HUHeadphoneLevelController setAdamSuspendedTimer:]
  -[HUHeadphoneLevelController setMeasurementEnabled:]
  -[HUHeadphoneLevelController fastLeq]
  -[HUHeadphoneLevelController thresholdLevel]
  -[HUHeadphoneLevelController dataQueue]
  -[HUHeadphoneLevelController setFastLeq:]


AXUltronModelAssetManager : NSObject /usr/lib/libSystem.B.dylib <AXAssetControllerObserver>
 @property  long long previousReportedSize
 @property  long long expectedDownloadSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXUltronModelAssetManager sharedInstance]

  // instance methods
  -[AXUltronModelAssetManager refresh]
  -[AXUltronModelAssetManager _reset]
  -[AXUltronModelAssetManager run]
  -[AXUltronModelAssetManager init]
  -[AXUltronModelAssetManager .cxx_destruct]
  -[AXUltronModelAssetManager downloadAssets]
  -[AXUltronModelAssetManager removeObserver:]
  -[AXUltronModelAssetManager addObserver:]
  -[AXUltronModelAssetManager assetController:didFinishRefreshingAssets:wasSuccessful:error:]
  -[AXUltronModelAssetManager assetController:asset:downloadProgressTotalWritten:totalExpected:isStalled:expectedTimeRemaining:]
  -[AXUltronModelAssetManager assetController:didFinishDownloadingAsset:wasSuccessful:error:hasRemainingDownloads:]
  -[AXUltronModelAssetManager assetController:didFinishPurgingAssets:wasSuccessful:error:]
  -[AXUltronModelAssetManager initializeModelMap]
  -[AXUltronModelAssetManager assetStatus]
  -[AXUltronModelAssetManager notifyAssetsNotReady]
  -[AXUltronModelAssetManager totalBytesOfAllAssetsWritten]
  -[AXUltronModelAssetManager totalExpectedTimeOfAllAssets]
  -[AXUltronModelAssetManager isAssetDownloadStalled]
  -[AXUltronModelAssetManager notifyDownloadProgress:totalSizeExpected:totalRemainingTime:isStalled:]
  -[AXUltronModelAssetManager notifyAssetsReady]
  -[AXUltronModelAssetManager notifyAssetsState]
  -[AXUltronModelAssetManager soundDetectionTypeForString:]
  -[AXUltronModelAssetManager setExpectedDownloadSize:]
  -[AXUltronModelAssetManager expectedDownloadSize]
  -[AXUltronModelAssetManager cacheAsset:]
  -[AXUltronModelAssetManager updateDownloadingAsset:totalBytesWritten:isStalled:expectedTimeRemaining:]
  -[AXUltronModelAssetManager localURLForDetector:]
  -[AXUltronModelAssetManager totalSizeOccupied]
  -[AXUltronModelAssetManager totalSizeExpected]
  -[AXUltronModelAssetManager previousReportedSize]
  -[AXUltronModelAssetManager setPreviousReportedSize:]


HUDeviceController : NSObject /usr/lib/libSystem.B.dylib <AXHARemoteUpdateProtocol>
 @property  NSObject<OS_dispatch_queue> *deviceUpdatesQueue
 @property  NSMutableDictionary *deviceUpdatesDescription
 @property  NSMutableArray *updateDeviceBlocks
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HUDeviceController writeValue:forProperty:andDeviceID:]
  -[HUDeviceController init]
  -[HUDeviceController hearingAidForDeviceID:]
  -[HUDeviceController .cxx_destruct]
  -[HUDeviceController representsLocalDevices]
  -[HUDeviceController updateProperty:forDeviceID:]
  -[HUDeviceController setDeviceUpdatesQueue:]
  -[HUDeviceController setUpdateDeviceBlocks:]
  -[HUDeviceController updateDeviceBlocks]
  -[HUDeviceController deviceUpdatesDescription]
  -[HUDeviceController deviceUpdatesQueue]
  -[HUDeviceController setDeviceUpdatesDescription:]
  -[HUDeviceController device:didUpdateProperty:]
  -[HUDeviceController registerForPropertyUpdates:]
  -[HUDeviceController stopPropertyUpdates]


AXFakePSAPDevice : AXPSAPDevice
 @property  BOOL connected
 @property  NSString *name
 @property  NSArray *manufacturer
 @property  NSArray *model
 @property  NSString *leftUUID
 @property  NSString *rightUUID
 @property  BOOL isConnecting
 @property  NSString *leftFirmwareVersion
 @property  NSString *rightFirmwareVersion
 @property  NSString *leftHardwareVersion
 @property  NSString *rightHardwareVersion
 @property  unsigned long deviceType
 @property  unsigned long type
 @property  unsigned long excludedProperties
 @property  CBPeripheral *leftPeripheral
 @property  CBPeripheral *rightPeripheral

  // instance methods
  -[AXFakePSAPDevice disconnect]
  -[AXFakePSAPDevice isConnected]
  -[AXFakePSAPDevice connect]
  -[AXFakePSAPDevice setConnected:]
  -[AXFakePSAPDevice manufacturer]
  -[AXFakePSAPDevice setDeviceType:]
  -[AXFakePSAPDevice deviceType]
  -[AXFakePSAPDevice valueForProperty:]
  -[AXFakePSAPDevice dealloc]
  -[AXFakePSAPDevice setType:]
  -[AXFakePSAPDevice .cxx_destruct]
  -[AXFakePSAPDevice name]
  -[AXFakePSAPDevice connected]
  -[AXFakePSAPDevice setModel:]
  -[AXFakePSAPDevice setManufacturer:]
  -[AXFakePSAPDevice type]
  -[AXFakePSAPDevice persist]
  -[AXFakePSAPDevice isPersistent]
  -[AXFakePSAPDevice initWithDeviceType:]
  -[AXFakePSAPDevice isConnecting]
  -[AXFakePSAPDevice model]
  -[AXFakePSAPDevice setValue:forProperty:]
  -[AXFakePSAPDevice setName:]
  -[AXFakePSAPDevice manufacturerForType]
  -[AXFakePSAPDevice modelForType]
  -[AXFakePSAPDevice setLeftUUID:]
  -[AXFakePSAPDevice setRightUUID:]
  -[AXFakePSAPDevice leftAvailable]
  -[AXFakePSAPDevice setLeftFirmwareVersion:]
  -[AXFakePSAPDevice setLeftHardwareVersion:]
  -[AXFakePSAPDevice rightAvailable]
  -[AXFakePSAPDevice setRightFirmwareVersion:]
  -[AXFakePSAPDevice setRightHardwareVersion:]
  -[AXFakePSAPDevice createPrograms]
  -[AXFakePSAPDevice excludedProperties]
  -[AXFakePSAPDevice availablePropertiesForPeripheral:]
  -[AXFakePSAPDevice programsListsAreEqual]
  -[AXFakePSAPDevice leftPrograms]
  -[AXFakePSAPDevice rightPrograms]
  -[AXFakePSAPDevice persistentRepresentation]
  -[AXFakePSAPDevice isLeftConnected]
  -[AXFakePSAPDevice isRightConnected]
  -[AXFakePSAPDevice hasConnection]
  -[AXFakePSAPDevice deviceSupportsProperty:]
  -[AXFakePSAPDevice propertyIsAvailable:forEar:]
  -[AXFakePSAPDevice showCombinedPrograms]
  -[AXFakePSAPDevice writeInt:toEar:forProperty:]
  -[AXFakePSAPDevice writeSignedInt:toEar:forProperty:]
  -[AXFakePSAPDevice didLoadBasicProperties]
  -[AXFakePSAPDevice didLoadRequiredProperties]
  -[AXFakePSAPDevice registerWriteBlock:]
  -[AXFakePSAPDevice setNewName:]
  -[AXFakePSAPDevice isFakeDevice]
  -[AXFakePSAPDevice leftUUID]
  -[AXFakePSAPDevice rightUUID]
  -[AXFakePSAPDevice setIsConnecting:]
  -[AXFakePSAPDevice leftFirmwareVersion]
  -[AXFakePSAPDevice rightFirmwareVersion]
  -[AXFakePSAPDevice leftHardwareVersion]
  -[AXFakePSAPDevice rightHardwareVersion]
  -[AXFakePSAPDevice leftPeripheral]
  -[AXFakePSAPDevice setLeftPeripheral:]
  -[AXFakePSAPDevice rightPeripheral]
  -[AXFakePSAPDevice setRightPeripheral:]
  -[AXFakePSAPDevice setExcludedProperties:]


HUNoiseSample : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDate *sampleDate
 @property  float splValue
 @property  float sampleDuration

  // instance methods
  -[HUNoiseSample .cxx_destruct]
  -[HUNoiseSample setSampleDate:]
  -[HUNoiseSample setSplValue:]
  -[HUNoiseSample setSampleDuration:]
  -[HUNoiseSample initWithSampleDate:splValue:andDuration:]
  -[HUNoiseSample sampleDate]
  -[HUNoiseSample splValue]
  -[HUNoiseSample sampleDuration]


AXPSAPDevice : AXHearingAidDevice
  // class methods
  +[AXPSAPDevice characteristicsUUIDs]

  // instance methods
  -[AXPSAPDevice deviceType]
  -[AXPSAPDevice serviceUUID]
  -[AXPSAPDevice requiredProperties]
  -[AXPSAPDevice persistentRepresentation]


AXHAServer : HCServer /System/Library/Frameworks/Foundation.framework/Foundation <AXHARemoteUpdateProtocol>
 @property  NSArray *availableHearingAids
 @property  NSArray *availableControllers
 @property  BOOL hearingAidConnectedOrReachable
 @property  BOOL hearingAidReachableForAudioTransfer
 @property  NSString *hearingDeviceName
 @property  NSString *connectedDeviceName
 @property  NSMutableDictionary *updates
 @property  BOOL hearingAidReachable
 @property  <AXHAServerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXHAServer sharedInstance]

  // instance methods
  -[AXHAServer writeValue:forProperty:andDeviceID:]
  -[AXHAServer init]
  -[AXHAServer registerResponseBlock:forUUID:]
  -[AXHAServer .cxx_destruct]
  -[AXHAServer resetConnection]
  -[AXHAServer handleMessageWithPayload:forIdentifier:]
  -[AXHAServer shouldRestartOnInterruption]
  -[AXHAServer setUpdates:]
  -[AXHAServer connectToControllerWithID:]
  -[AXHAServer updates]
  -[AXHAServer updateProperty:forDeviceID:]
  -[AXHAServer startServerWithDelegate:]
  -[AXHAServer availableHearingAids]
  -[AXHAServer availableDevicesDidUpdate:]
  -[AXHAServer deviceDidUpdateProperty:]
  -[AXHAServer liveListenDidUpdate:]
  -[AXHAServer setAvailableControllers:]
  -[AXHAServer setHearingDeviceName:]
  -[AXHAServer setHearingAidReachableForAudioTransfer:]
  -[AXHAServer hearingAidConnectedOrReachable]
  -[AXHAServer setConnectedDeviceName:]
  -[AXHAServer setHearingAidConnectedOrReachable:]
  -[AXHAServer environmentalDosimetryDidUpdate:]
  -[AXHAServer headphoneLevelDidUpdate:]
  -[AXHAServer setAvailableHearingAids:]
  -[AXHAServer registerUpdateBlock:forIdentier:withListener:]
  -[AXHAServer _registerListener:forAvailableDeviceHandler:beginSearching:]
  -[AXHAServer unregisterUpdateListener:]
  -[AXHAServer registerListener:forAvailableDeviceHandler:]
  -[AXHAServer registerPassiveListener:forAvailableDeviceHandler:]
  -[AXHAServer registerListener:forPropertyUpdateHandler:]
  -[AXHAServer requestHearingAidConnectionWithReason:]
  -[AXHAServer cancelHearingAidConnectionRequest]
  -[AXHAServer hearingAidReachable]
  -[AXHAServer registerListener:forLiveListenLevelsHandler:]
  -[AXHAServer startLiveListen]
  -[AXHAServer stopLiveListen]
  -[AXHAServer registerListener:forLiveDosimetryUpdates:withDoseHandler:]
  -[AXHAServer unregisterDoseHandler:]
  -[AXHAServer registerListener:forLiveHeadphoneLevelHandler:]
  -[AXHAServer unregisterLiveHeadphoneLevelHandler:]
  -[AXHAServer availableControllers]
  -[AXHAServer hearingAidReachableForAudioTransfer]
  -[AXHAServer hearingDeviceName]
  -[AXHAServer connectedDeviceName]


AXHAListenerHelper : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[AXHAListenerHelper dealloc]
  -[AXHAListenerHelper .cxx_destruct]
  -[AXHAListenerHelper initWithListenerAddress:]


AXHearingAidDevice : NSObject /usr/lib/libSystem.B.dylib <CBPeripheralDelegate, AXHADeviceProtocol>
 @property  NSString *name
 @property  NSMutableArray *manufacturer
 @property  NSMutableArray *model
 @property  NSString *leftFirmwareVersion
 @property  NSString *rightFirmwareVersion
 @property  NSString *leftHardwareVersion
 @property  NSString *rightHardwareVersion
 @property  NSString *leftUUID
 @property  NSString *rightUUID
 @property  NSString *leftPeripheralUUID
 @property  NSString *rightPeripheralUUID
 @property  double rightBatteryLevel
 @property  double leftBatteryLevel
 @property  NSArray *rightPrograms
 @property  NSArray *leftPrograms
 @property  CBPeripheral *leftPeripheral
 @property  CBPeripheral *rightPeripheral
 @property  short leftMicrophoneVolumeSteps
 @property  short rightMicrophoneVolumeSteps
 @property  short leftStreamVolumeSteps
 @property  short rightStreamVolumeSteps
 @property  short leftSensitivitySteps
 @property  short rightSensitivitySteps
 @property  short leftMixedVolumeSteps
 @property  short rightMixedVolumeSteps
 @property  BOOL supportsBinauralStreaming
 @property  BOOL supportsCombinedPresets
 @property  BOOL supportsCombinedVolumes
 @property  AXHearingAidMode *currentRightStreamingProgram
 @property  AXHearingAidMode *currentLeftStreamingProgram
 @property  AXHearingAidMode *currentRightProgram
 @property  AXHearingAidMode *currentLeftProgram
 @property  BOOL isConnecting
 @property  unsigned long leftLoadedProperties
 @property  unsigned long rightLoadedProperties
 @property  unsigned long leftWriteRequestProperties
 @property  unsigned long rightWriteRequestProperties
 @property  unsigned long leftWriteResponseProperties
 @property  unsigned long rightWriteResponseProperties
 @property  NSMutableDictionary *leftPropertiesLoadCount
 @property  NSMutableDictionary *rightPropertiesLoadCount
 @property  unsigned int leftProgramVersion
 @property  unsigned int rightProgramVersion
 @property  NSDate *leftBatteryLowDate
 @property  NSDate *rightBatteryLowDate
 @property  int availableInputEars
 @property  int earsSupportingWatch
 @property  BOOL leftPeripheralPaired
 @property  BOOL rightPeripheralPaired
 @property  BOOL isPaired
 @property  BOOL keepInSync
 @property  BOOL isPersistent
 @property  double rightMicrophoneVolume
 @property  double leftMicrophoneVolume
 @property  double rightStreamVolume
 @property  double leftStreamVolume
 @property  AXHearingAidMode *leftSelectedProgram
 @property  AXHearingAidMode *rightSelectedProgram
 @property  AXHearingAidMode *leftSelectedStreamingProgram
 @property  AXHearingAidMode *rightSelectedStreamingProgram
 @property  unsigned int leftPresetBitmask
 @property  unsigned int rightPresetBitmask
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  int availableEars
 @property  double rightSensitivity
 @property  double leftSensitivity
 @property  double rightMixedVolume
 @property  double leftMixedVolume
 @property  BOOL rightTreble
 @property  BOOL leftTreble
 @property  BOOL rightBass
 @property  BOOL leftBass
 @property  NSString *deviceUUID

  // class methods
  +[AXHearingAidDevice characteristicsUUIDs]
  +[AXHearingAidDevice deviceIDFromLeftID:andRightID:]

  // instance methods
  -[AXHearingAidDevice deviceUUID]
  -[AXHearingAidDevice setAvailableInputEars:]
  -[AXHearingAidDevice isConnected]
  -[AXHearingAidDevice connect]
  -[AXHearingAidDevice setEarsSupportingWatch:]
  -[AXHearingAidDevice rightBatteryLevel]
  -[AXHearingAidDevice manufacturer]
  -[AXHearingAidDevice leftBatteryLevel]
  -[AXHearingAidDevice updateName]
  -[AXHearingAidDevice isPaired]
  -[AXHearingAidDevice deviceType]
  -[AXHearingAidDevice valueForProperty:]
  -[AXHearingAidDevice dealloc]
  -[AXHearingAidDevice .cxx_destruct]
  -[AXHearingAidDevice name]
  -[AXHearingAidDevice setModel:]
  -[AXHearingAidDevice setManufacturer:]
  -[AXHearingAidDevice _init]
  -[AXHearingAidDevice earsSupportingWatch]
  -[AXHearingAidDevice isPersistent]
  -[AXHearingAidDevice setIsPersistent:]
  -[AXHearingAidDevice deviceDescription]
  -[AXHearingAidDevice serviceUUID]
  -[AXHearingAidDevice requiredProperties]
  -[AXHearingAidDevice peripheralDidUpdateName:]
  -[AXHearingAidDevice peripheral:didModifyServices:]
  -[AXHearingAidDevice peripheral:didDiscoverServices:]
  -[AXHearingAidDevice peripheral:didDiscoverCharacteristicsForService:error:]
  -[AXHearingAidDevice peripheral:didUpdateValueForCharacteristic:error:]
  -[AXHearingAidDevice peripheral:didWriteValueForCharacteristic:error:]
  -[AXHearingAidDevice isConnecting]
  -[AXHearingAidDevice model]
  -[AXHearingAidDevice setValue:forProperty:]
  -[AXHearingAidDevice setName:]
  -[AXHearingAidDevice availableInputEars]
  -[AXHearingAidDevice initWithPeripheral:]
  -[AXHearingAidDevice setLeftUUID:]
  -[AXHearingAidDevice setRightUUID:]
  -[AXHearingAidDevice leftAvailable]
  -[AXHearingAidDevice setLeftMicrophoneVolume:]
  -[AXHearingAidDevice setLeftStreamVolume:]
  -[AXHearingAidDevice setLeftFirmwareVersion:]
  -[AXHearingAidDevice setLeftHardwareVersion:]
  -[AXHearingAidDevice availableEars]
  -[AXHearingAidDevice setAvailableEars:]
  -[AXHearingAidDevice rightAvailable]
  -[AXHearingAidDevice setRightMicrophoneVolume:]
  -[AXHearingAidDevice setRightFirmwareVersion:]
  -[AXHearingAidDevice setRightHardwareVersion:]
  -[AXHearingAidDevice programs]
  -[AXHearingAidDevice selectProgram:forEar:]
  -[AXHearingAidDevice setLeftPresetBitmask:]
  -[AXHearingAidDevice setRightPresetBitmask:]
  -[AXHearingAidDevice availablePropertiesForPeripheral:]
  -[AXHearingAidDevice supportsCombinedPresets]
  -[AXHearingAidDevice leftPrograms]
  -[AXHearingAidDevice rightPrograms]
  -[AXHearingAidDevice leftSelectedProgram]
  -[AXHearingAidDevice rightSelectedProgram]
  -[AXHearingAidDevice leftSelectedStreamingProgram]
  -[AXHearingAidDevice rightSelectedStreamingProgram]
  -[AXHearingAidDevice persistentRepresentation]
  -[AXHearingAidDevice hasConnection]
  -[AXHearingAidDevice deviceSupportsProperty:]
  -[AXHearingAidDevice writeInt:toEar:forProperty:]
  -[AXHearingAidDevice writeSignedInt:toEar:forProperty:]
  -[AXHearingAidDevice didLoadBasicProperties]
  -[AXHearingAidDevice didLoadRequiredProperties]
  -[AXHearingAidDevice isFakeDevice]
  -[AXHearingAidDevice leftUUID]
  -[AXHearingAidDevice rightUUID]
  -[AXHearingAidDevice setIsConnecting:]
  -[AXHearingAidDevice leftFirmwareVersion]
  -[AXHearingAidDevice rightFirmwareVersion]
  -[AXHearingAidDevice leftHardwareVersion]
  -[AXHearingAidDevice rightHardwareVersion]
  -[AXHearingAidDevice leftPeripheral]
  -[AXHearingAidDevice setLeftPeripheral:]
  -[AXHearingAidDevice rightPeripheral]
  -[AXHearingAidDevice setRightPeripheral:]
  -[AXHearingAidDevice containsPeripheralWithUUID:]
  -[AXHearingAidDevice setRightPrograms:]
  -[AXHearingAidDevice setLeftPrograms:]
  -[AXHearingAidDevice setLeftPropertiesLoadCount:]
  -[AXHearingAidDevice setRightPropertiesLoadCount:]
  -[AXHearingAidDevice setCurrentLeftProgram:]
  -[AXHearingAidDevice setCurrentRightProgram:]
  -[AXHearingAidDevice setCurrentLeftStreamingProgram:]
  -[AXHearingAidDevice setCurrentRightStreamingProgram:]
  -[AXHearingAidDevice setSupportsBinauralStreaming:]
  -[AXHearingAidDevice setSupportsCombinedPresets:]
  -[AXHearingAidDevice setSupportsCombinedVolumes:]
  -[AXHearingAidDevice setLeftMicrophoneVolumeSteps:]
  -[AXHearingAidDevice setLeftSensitivitySteps:]
  -[AXHearingAidDevice setLeftStreamVolumeSteps:]
  -[AXHearingAidDevice setLeftMixedVolumeSteps:]
  -[AXHearingAidDevice setRightMicrophoneVolumeSteps:]
  -[AXHearingAidDevice setRightSensitivitySteps:]
  -[AXHearingAidDevice setRightStreamVolumeSteps:]
  -[AXHearingAidDevice setRightMixedVolumeSteps:]
  -[AXHearingAidDevice setLeftPeripheralUUID:]
  -[AXHearingAidDevice peripheral:didUpdateCharacteristic:]
  -[AXHearingAidDevice setRightPeripheralUUID:]
  -[AXHearingAidDevice leftPeripheralUUID]
  -[AXHearingAidDevice rightPeripheralUUID]
  -[AXHearingAidDevice setIsPaired:]
  -[AXHearingAidDevice leftMicrophoneVolume]
  -[AXHearingAidDevice setLeftBatteryLevel:]
  -[AXHearingAidDevice currentLeftProgram]
  -[AXHearingAidDevice leftLoadedProperties]
  -[AXHearingAidDevice setLeftLoadedProperties:]
  -[AXHearingAidDevice leftStreamVolumeSteps]
  -[AXHearingAidDevice leftSensitivitySteps]
  -[AXHearingAidDevice leftSensitivity]
  -[AXHearingAidDevice setLeftSensitivity:]
  -[AXHearingAidDevice leftMicrophoneVolumeSteps]
  -[AXHearingAidDevice leftTreble]
  -[AXHearingAidDevice setLeftTreble:]
  -[AXHearingAidDevice leftBass]
  -[AXHearingAidDevice setLeftBass:]
  -[AXHearingAidDevice leftMixedVolume]
  -[AXHearingAidDevice setLeftMixedVolume:]
  -[AXHearingAidDevice leftMixedVolumeSteps]
  -[AXHearingAidDevice rightMicrophoneVolume]
  -[AXHearingAidDevice setRightBatteryLevel:]
  -[AXHearingAidDevice currentRightProgram]
  -[AXHearingAidDevice rightLoadedProperties]
  -[AXHearingAidDevice setRightLoadedProperties:]
  -[AXHearingAidDevice rightStreamVolumeSteps]
  -[AXHearingAidDevice rightSensitivitySteps]
  -[AXHearingAidDevice rightSensitivity]
  -[AXHearingAidDevice setRightSensitivity:]
  -[AXHearingAidDevice rightMicrophoneVolumeSteps]
  -[AXHearingAidDevice rightTreble]
  -[AXHearingAidDevice setRightTreble:]
  -[AXHearingAidDevice rightBass]
  -[AXHearingAidDevice setRightBass:]
  -[AXHearingAidDevice rightMixedVolume]
  -[AXHearingAidDevice setRightMixedVolume:]
  -[AXHearingAidDevice rightMixedVolumeSteps]
  -[AXHearingAidDevice currentRightStreamingProgram]
  -[AXHearingAidDevice currentLeftStreamingProgram]
  -[AXHearingAidDevice supportsBinauralStreaming]
  -[AXHearingAidDevice supportsCombinedVolumes]
  -[AXHearingAidDevice disconnectAndUnpair:]
  -[AXHearingAidDevice loadRequiredProperties]
  -[AXHearingAidDevice setLeftBatteryLowDate:]
  -[AXHearingAidDevice setRightBatteryLowDate:]
  -[AXHearingAidDevice rightPropertiesLoadCount]
  -[AXHearingAidDevice leftPropertiesLoadCount]
  -[AXHearingAidDevice setNotify:forPeripheral:]
  -[AXHearingAidDevice loadProperties:forPeripheral:withRetryPeriod:]
  -[AXHearingAidDevice loadBasicProperties]
  -[AXHearingAidDevice checkPairingStatusWithCompletion:]
  -[AXHearingAidDevice updateInputTagsAndReset:]
  -[AXHearingAidDevice peripheral:characteristicForProperty:]
  -[AXHearingAidDevice peripheral:didLoadProperty:]
  -[AXHearingAidDevice didLoadOptionalBasicProperties]
  -[AXHearingAidDevice peripheral:propertyForCharacteristic:]
  -[AXHearingAidDevice loadFailedProperties]
  -[AXHearingAidDevice readValueForCharacteristic:fromPeripheral:]
  -[AXHearingAidDevice updateNameWithAdvertisingData:]
  -[AXHearingAidDevice volumeValueForProperty:andPeripheral:]
  -[AXHearingAidDevice signedValueForProperty:andPeripheral:]
  -[AXHearingAidDevice writeValueForProperty:]
  -[AXHearingAidDevice keepInSync]
  -[AXHearingAidDevice _sendDelayedWrites]
  -[AXHearingAidDevice leftWriteResponseProperties]
  -[AXHearingAidDevice setLeftWriteResponseProperties:]
  -[AXHearingAidDevice rightWriteResponseProperties]
  -[AXHearingAidDevice setRightWriteResponseProperties:]
  -[AXHearingAidDevice setLeftSelectedStreamingProgram:]
  -[AXHearingAidDevice setLeftSelectedProgram:]
  -[AXHearingAidDevice setRightSelectedStreamingProgram:]
  -[AXHearingAidDevice setRightSelectedProgram:]
  -[AXHearingAidDevice delayWriteProperty:forPeripheral:]
  -[AXHearingAidDevice setRightStreamVolume:]
  -[AXHearingAidDevice setMixedVolume:forLeft:]
  -[AXHearingAidDevice setTreble:forLeft:]
  -[AXHearingAidDevice setBass:forLeft:]
  -[AXHearingAidDevice leftStreamVolume]
  -[AXHearingAidDevice rightStreamVolume]
  -[AXHearingAidDevice leftBatteryLowDate]
  -[AXHearingAidDevice rightBatteryLowDate]
  -[AXHearingAidDevice updateBatteryServiceForPeripheral:]
  -[AXHearingAidDevice mateWithDevice:]
  -[AXHearingAidDevice rightPresetBitmask]
  -[AXHearingAidDevice leftPresetBitmask]
  -[AXHearingAidDevice readProperty:fromPeripheral:]
  -[AXHearingAidDevice rightProgramVersion]
  -[AXHearingAidDevice leftProgramVersion]
  -[AXHearingAidDevice setLeftPeripheralPaired:]
  -[AXHearingAidDevice setRightPeripheralPaired:]
  -[AXHearingAidDevice peripheral:characteristicForUUID:]
  -[AXHearingAidDevice pairingDidCompleteForPeripheral:]
  -[AXHearingAidDevice initWithPersistentRepresentation:]
  -[AXHearingAidDevice selectedPrograms]
  -[AXHearingAidDevice selectedProgramIndexes]
  -[AXHearingAidDevice setKeepInSync:]
  -[AXHearingAidDevice initWithLeftDevice:andRightDevice:]
  -[AXHearingAidDevice connectionDidChange]
  -[AXHearingAidDevice didLoadPersistentProperties]
  -[AXHearingAidDevice connectedEars]
  -[AXHearingAidDevice watchWristOrientationDidChange:]
  -[AXHearingAidDevice peripheral:didInvalidateServices:]
  -[AXHearingAidDevice peripheral:didFinishPairingWithResult:]
  -[AXHearingAidDevice peripheralDidUnpair:]
  -[AXHearingAidDevice addPeripheral:]
  -[AXHearingAidDevice addPeripheral:asLeft:]
  -[AXHearingAidDevice leftWriteRequestProperties]
  -[AXHearingAidDevice setLeftWriteRequestProperties:]
  -[AXHearingAidDevice rightWriteRequestProperties]
  -[AXHearingAidDevice setRightWriteRequestProperties:]
  -[AXHearingAidDevice setLeftProgramVersion:]
  -[AXHearingAidDevice setRightProgramVersion:]
  -[AXHearingAidDevice leftPeripheralPaired]
  -[AXHearingAidDevice rightPeripheralPaired]


AXHAController : NSObject /usr/lib/libSystem.B.dylib <HUNearbyControllerDelegate, AXHALiveListenDelegate>
 @property  NSObject<OS_os_transaction> *transaction
 @property  NSString *pairedDeviceUUID
 @property  NSDictionary *availableDevicesDescription
 @property  HCXPCMessage *liveListenMessage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXHAController sharedController]

  // instance methods
  -[AXHAController registerForLiveListenUpdates:]
  -[AXHAController availableRemoteControllersDidChange]
  -[AXHAController willSwitchUser]
  -[AXHAController init]
  -[AXHAController setTransaction:]
  -[AXHAController transaction]
  -[AXHAController writeDeviceProperty:]
  -[AXHAController dealloc]
  -[AXHAController readAvailableControllers:]
  -[AXHAController .cxx_destruct]
  -[AXHAController liveListenMessage]
  -[AXHAController sendUpdatesForProperties:excludingClient:]
  -[AXHAController registerForAvailableDevicesUpdates:]
  -[AXHAController setLiveListenMessage:]
  -[AXHAController updateNearbyDeviceAvailability]
  -[AXHAController liveListenController]
  -[AXHAController readDeviceProperty:]
  -[AXHAController availableDevicesDescription]
  -[AXHAController liveListenControllerStateDidChange]
  -[AXHAController disconnectAndForceSlave:]
  -[AXHAController connectToControllerWithID:]
  -[AXHAController setAvailableDevicesDescription:]
  -[AXHAController hearingAidsPaired]
  -[AXHAController setListenForAvailableDeviceUpdates:]
  -[AXHAController setPairedDeviceUUID:]
  -[AXHAController readLiveListenLevels]
  -[AXHAController setPairedHearingAid:]
  -[AXHAController toggleLiveListen:]
  -[AXHAController transitionToPeer]
  -[AXHAController pairedDeviceUUID]
  -[AXHAController readAvailableDevices:]
  -[AXHAController connectToPairedDevice]
  -[AXHAController currentDeviceController]
  -[AXHAController registerForDeviceUpdates:]


AXHASettingsListenerHelper : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[AXHASettingsListenerHelper addSelectorKey:]
  -[AXHASettingsListenerHelper dealloc]
  -[AXHASettingsListenerHelper .cxx_destruct]
  -[AXHASettingsListenerHelper initWithListenerAddress:]


AXHASettings : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableSet *registeredNotifications
 @property  NSMutableSet *synchronizePreferences
 @property  NSMutableDictionary *updateBlocks
 @property  NSObject<OS_dispatch_queue> *icloudInitializationQueue
 @property  NSDictionary *pairedHearingAids
 @property  NSDictionary *knownPeripheralUUIDs
 @property  BOOL independentHearingAidSettings
 @property  BOOL allowHearingAidControlOnLockScreen
 @property  BOOL shouldStreamToLeftAid
 @property  BOOL shouldStreamToRightAid
 @property  long long callAudioRoute
 @property  long long mediaAudioRoute
 @property  BOOL multideviceSettingsEnabled
 @property  BOOL multideviceAudioEnabled
 @property  BOOL shouldStreamSystemSounds
 @property  long long complicationPreferredDisplayMode
 @property  int availableInputEars
 @property  int earsSupportingWatch
 @property  int preferredInputEar
 @property  NSString *availableHearingDeviceName
 @property  unsigned long usedHearingFeatures
 @property  BOOL exportsLiveListenToFile
 @property  BOOL ultronSupportEnabled
 @property  BOOL ultronIsRunning
 @property  int soundDetectionState
 @property  BOOL soundDetectionEnabled
 @property  NSArray *enabledSoundDetectionTypes
 @property  NSMutableDictionary *soundDetectionSnoozeDictionary
 @property  NSArray *supportedSoundDetectionTypes
 @property  BOOL liveHeadphoneLevelEnabled

  // class methods
  +[AXHASettings sharedInstance]
  +[AXHASettings initialize]
  +[AXHASettings stringForSoundDetectionState:]

  // instance methods
  -[AXHASettings registeredNotifications]
  -[AXHASettings registerUpdateBlock:forRetrieveSelector:withListener:]
  -[AXHASettings setShouldStreamToLeftAid:]
  -[AXHASettings isiCloudPaired]
  -[AXHASettings setAvailableInputEars:]
  -[AXHASettings _notificationForPreferenceKey:]
  -[AXHASettings allowHearingAidControlOnLockScreen]
  -[AXHASettings setAllowHearingAidControlOnLockScreen:]
  -[AXHASettings deviceIDForPairingInformation:]
  -[AXHASettings _synchronizeIfNecessary:]
  -[AXHASettings soundDetectionEnabled]
  -[AXHASettings _setValue:forPreferenceKey:]
  -[AXHASettings _valueForPreferenceKey:]
  -[AXHASettings setUpdateBlocks:]
  -[AXHASettings shouldStreamToRightAid]
  -[AXHASettings shouldStreamToLeftAid]
  -[AXHASettings iCloudAccountDidChange:]
  -[AXHASettings setIndependentHearingAidSettings:]
  -[AXHASettings setRegisteredNotifications:]
  -[AXHASettings setShouldStreamToRightAid:]
  -[AXHASettings _handlePreferenceChanged:]
  -[AXHASettings independentHearingAidSettings]
  -[AXHASettings setEarsSupportingWatch:]
  -[AXHASettings _preferenceKeyForSelector:]
  -[AXHASettings _registerForNotification:]
  -[AXHASettings setSynchronizePreferences:]
  -[AXHASettings updateBlocks]
  -[AXHASettings synchronizePreferences]
  -[AXHASettings liveHeadphoneLevelEnabled]
  -[AXHASettings setLiveHeadphoneLevelEnabled:]
  -[AXHASettings init]
  -[AXHASettings setExportsLiveListenToFile:]
  -[AXHASettings preferredInputEar]
  -[AXHASettings setLocalHearingAidsFromiCloud:]
  -[AXHASettings removeAllSoundDetectionTypes]
  -[AXHASettings icloudInitializationQueue]
  -[AXHASettings exportsLiveListenToFile]
  -[AXHASettings pairedHearingAids]
  -[AXHASettings dealloc]
  -[AXHASettings soundDetectionSnoozeDictionary]
  -[AXHASettings .cxx_destruct]
  -[AXHASettings usedHearingFeatures]
  -[AXHASettings callAudioRoute]
  -[AXHASettings convertPersistentRepresentation:fromVersion:toVersion:]
  -[AXHASettings pushLocalHearingAidsToiCloud]
  -[AXHASettings setMultideviceAudioEnabled:]
  -[AXHASettings enabledSoundDetectionTypes]
  -[AXHASettings setShouldStreamSystemSounds:]
  -[AXHASettings ultronSupportEnabled]
  -[AXHASettings shouldUseiCloud]
  -[AXHASettings soundDetectionState]
  -[AXHASettings addSoundDetectionType:]
  -[AXHASettings removeDeviceIDFromCloudBlacklist:]
  -[AXHASettings setMultideviceSettingsEnabled:]
  -[AXHASettings multideviceSettingsEnabled]
  -[AXHASettings ultronIsRunning]
  -[AXHASettings setSupportedSoundDetectionTypes:]
  -[AXHASettings setAvailableHearingDeviceName:]
  -[AXHASettings setIcloudInitializationQueue:]
  -[AXHASettings setMediaAudioRoute:]
  -[AXHASettings setEnabledSoundDetectionTypes:]
  -[AXHASettings earsSupportingWatch]
  -[AXHASettings icloudHearingSettingsDidChange:]
  -[AXHASettings setUltronIsRunning:]
  -[AXHASettings supportedSoundDetectionTypes]
  -[AXHASettings _updateTripleClickOptionsForPairedAids:]
  -[AXHASettings addDeviceIDToCloudBlacklist:]
  -[AXHASettings setPairedHearingAids:]
  -[AXHASettings isDeviceIDOnCloudBlacklist:]
  -[AXHASettings availableHearingDeviceName]
  -[AXHASettings setUltronSupportEnabled:]
  -[AXHASettings setSoundDetectionState:]
  -[AXHASettings domainNameForPreferenceKey:]
  -[AXHASettings setCallAudioRoute:]
  -[AXHASettings _initializeICloudSetup]
  -[AXHASettings shouldPushLocalAidsToiCloud]
  -[AXHASettings complicationPreferredDisplayMode]
  -[AXHASettings removeSoundDetectionType:]
  -[AXHASettings setPreferredInputEar:]
  -[AXHASettings isPairedWithRealHearingAids]
  -[AXHASettings knownPeripheralUUIDs]
  -[AXHASettings setUsedHearingFeatures:]
  -[AXHASettings isPairedWithFakeHearingAids]
  -[AXHASettings multideviceAudioEnabled]
  -[AXHASettings addSnoozeDateToSnoozeDictionary:forKey:]
  -[AXHASettings mediaAudioRoute]
  -[AXHASettings setKnownPeripheralUUIDs:]
  -[AXHASettings availableInputEars]
  -[AXHASettings setComplicationPreferredDisplayMode:]
  -[AXHASettings shouldStreamSystemSounds]
  -[AXHASettings setSoundDetectionSnoozeDictionary:]


HANanoSettings : AXHASettings
 @property  NPSDomainAccessor *domainAccessor
 @property  NPSDomainAccessor *globalDomainAccessor

  // class methods
  +[HANanoSettings sharedInstance]

  // instance methods
  -[HANanoSettings setDomainAccessor:]
  -[HANanoSettings setGlobalDomainAccessor:]
  -[HANanoSettings currentLocale]
  -[HANanoSettings _setValue:forPreferenceKey:]
  -[HANanoSettings nanoDomainAccessor]
  -[HANanoSettings _valueForPreferenceKey:]
  -[HANanoSettings globalDomainAccessor]
  -[HANanoSettings domainAccessor]
  -[HANanoSettings init]
  -[HANanoSettings dealloc]
  -[HANanoSettings .cxx_destruct]
  -[HANanoSettings shouldUseiCloud]
  -[HANanoSettings pairedWatchDidChange:]


HUNearbyController : HUDeviceController <HUNearbyDeviceDelegate>
 @property  NSArray *availableDevices
 @property  SFDeviceDiscovery *deviceDiscovery
 @property  RPCompanionLinkClient *client
 @property  AXRemoteHearingAidDevice *localDevice
 @property  BOOL searching
 @property  NSObject<OS_dispatch_queue> *mediaQueue
 @property  AXDispatchTimer *sendConnectionToCompanionTimer
 @property  BOOL holdingMediaForConnection
 @property  BOOL holdingPhoneForConnection
 @property  long long state
 @property  <HUNearbyControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HUNearbyController sharedInstance]

  // instance methods
  -[HUNearbyController mediaServerDied]
  -[HUNearbyController setClient:]
  -[HUNearbyController isSearching]
  -[HUNearbyController client]
  -[HUNearbyController writeValue:forProperty:andDeviceID:]
  -[HUNearbyController init]
  -[HUNearbyController callStatusDidChange:]
  -[HUNearbyController hearingAidForDeviceID:]
  -[HUNearbyController checkConnectionToHearingDevice:]
  -[HUNearbyController sendConnectionToCompanionTimer]
  -[HUNearbyController getConnectedPeer:]
  -[HUNearbyController requestConnectionForReason:]
  -[HUNearbyController mediaQueue]
  -[HUNearbyController deviceWithIdentifier:didReceiveMessage:]
  -[HUNearbyController requestHandoffForMedia]
  -[HUNearbyController shouldRelinquishConnectionForReason:]
  -[HUNearbyController availableDevices]
  -[HUNearbyController setState:]
  -[HUNearbyController updateState]
  -[HUNearbyController .cxx_destruct]
  -[HUNearbyController addDeviceWithIdentifier:]
  -[HUNearbyController sendConnectionUpdateToPeers]
  -[HUNearbyController relinquishConnectionForReason:]
  -[HUNearbyController shouldRequestAudioConnectionForCall:withCompletion:]
  -[HUNearbyController setAvailableDevices:]
  -[HUNearbyController writeValue:forProperty:andDeviceID:toDevices:]
  -[HUNearbyController sendWrite:toDevices:]
  -[HUNearbyController setMediaQueue:]
  -[HUNearbyController currentConnectionStatus]
  -[HUNearbyController setSendConnectionToCompanionTimer:]
  -[HUNearbyController registerMediaNotifications]
  -[HUNearbyController stop]
  -[HUNearbyController setLocalDevice:]
  -[HUNearbyController setSearching:]
  -[HUNearbyController routesDidChange:]
  -[HUNearbyController sendMessageToAllDevices:]
  -[HUNearbyController nearbyDeviceWithIdentifier:]
  -[HUNearbyController setDeviceDiscovery:]
  -[HUNearbyController hearingDevice]
  -[HUNearbyController setHoldingPhoneForConnection:]
  -[HUNearbyController holdingMediaForConnection]
  -[HUNearbyController deviceDiscovery]
  -[HUNearbyController updateStateOnDeviceQueue]
  -[HUNearbyController checkConnectionPeers:]
  -[HUNearbyController sendWriteToAllDevices:]
  -[HUNearbyController sendMessage:toDevices:]
  -[HUNearbyController mediaPlaybackDidChange:]
  -[HUNearbyController checkPairedPeerExists:]
  -[HUNearbyController setHoldingMediaForConnection:]
  -[HUNearbyController unregisterMediaNotifications]
  -[HUNearbyController representsLocalDevices]
  -[HUNearbyController setDelegate:]
  -[HUNearbyController state]
  -[HUNearbyController nearbyDeviceWithPeerDevice:]
  -[HUNearbyController updateProperty:forDeviceID:]
  -[HUNearbyController holdingPhoneForConnection]
  -[HUNearbyController delegate]
  -[HUNearbyController localDevice]
  -[HUNearbyController hasConnectionToHearingDevice]
  -[HUNearbyController sendConnectionToCompanionIfPossible]
  -[HUNearbyController sendConnectionToCompanionIfPossible:]
  -[HUNearbyController connectedPeer]
  -[HUNearbyController start]


AXHASoundDetectionController : NSObject /usr/lib/libSystem.B.dylib <AXHAListenEngineDelegate, AXHADetectorManagerDelegate, AXHAUltronModelAssetManagerDelegate>
 @property  NSSet *currentDetectionTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXHASoundDetectionController sharedInstance]

  // instance methods
  -[AXHASoundDetectionController stopListening]
  -[AXHASoundDetectionController init]
  -[AXHASoundDetectionController startListening]
  -[AXHASoundDetectionController .cxx_destruct]
  -[AXHASoundDetectionController assetsReadyForUltronManager:]
  -[AXHASoundDetectionController assetsNotReadyForUltronManager:]
  -[AXHASoundDetectionController assets:totalSizeExpected:downloadProgressTotalWritten:remainingTimeExpected:isStalled:]
  -[AXHASoundDetectionController _queueListenType:]
  -[AXHASoundDetectionController _dequeueListenType:]
  -[AXHASoundDetectionController currentDetectionTypes]
  -[AXHASoundDetectionController removeAllListenTypes]
  -[AXHASoundDetectionController receivedBuffer:atTime:]
  -[AXHASoundDetectionController listenEngineDidStartWithInputFormat:]
  -[AXHASoundDetectionController listenEngineFailedToStartWithError:]
  -[AXHASoundDetectionController receivedObservation:forDetector:]
  -[AXHASoundDetectionController receivedCompletion:]
  -[AXHASoundDetectionController receivedError:fromDetector:]
  -[AXHASoundDetectionController addListenType:]
  -[AXHASoundDetectionController removeListenType:]


AXHearingAidDeviceController : HUDeviceController <CBCentralManagerDelegate, AXHADeviceControllerProtocol>
 @property  NSMutableArray *availablePeripherals
 @property  NSMutableArray *loadedDevices
 @property  NSMutableArray *connectedDevices
 @property  NSMutableArray *persistentDevices
 @property  NSMutableArray *updateDeviceBlocks
 @property  NSMutableArray *centralRequestBlocks
 @property  NSMutableArray *availableSearchBlocks
 @property  NSMutableArray *connectedSearchBlocks
 @property  BOOL shouldActiveScan
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXHearingAidDeviceController sharedController]

  // instance methods
  -[AXHearingAidDeviceController isConnected]
  -[AXHearingAidDeviceController centralManager:didConnectPeripheral:]
  -[AXHearingAidDeviceController centralManager:didFailToConnectPeripheral:error:]
  -[AXHearingAidDeviceController init]
  -[AXHearingAidDeviceController hearingAidForDeviceID:]
  -[AXHearingAidDeviceController isScanning]
  -[AXHearingAidDeviceController centralManager:didDisconnectPeripheral:error:]
  -[AXHearingAidDeviceController isPaired]
  -[AXHearingAidDeviceController dealloc]
  -[AXHearingAidDeviceController .cxx_destruct]
  -[AXHearingAidDeviceController centralManagerDidUpdateState:]
  -[AXHearingAidDeviceController connectedDevices]
  -[AXHearingAidDeviceController pairingAgent:peerDidCompletePairing:]
  -[AXHearingAidDeviceController stopSearching]
  -[AXHearingAidDeviceController centralManager:didRetrievePeripherals:]
  -[AXHearingAidDeviceController centralManager:didRetrieveConnectedPeripherals:]
  -[AXHearingAidDeviceController forgetDevice:]
  -[AXHearingAidDeviceController centralManager:didDiscoverPeripheral:advertisementData:RSSI:]
  -[AXHearingAidDeviceController representsLocalDevices]
  -[AXHearingAidDeviceController pairingAgent:peerDidUnpair:]
  -[AXHearingAidDeviceController pairingAgent:peerDidFailToCompletePairing:error:]
  -[AXHearingAidDeviceController setConnectedDevices:]
  -[AXHearingAidDeviceController setUpdateDeviceBlocks:]
  -[AXHearingAidDeviceController updateDeviceBlocks]
  -[AXHearingAidDeviceController connectToPeripheral:]
  -[AXHearingAidDeviceController disconnectFromPeripheral:]
  -[AXHearingAidDeviceController unpairPeripheralWithUUID:]
  -[AXHearingAidDeviceController resetConnectionToPeripheral:]
  -[AXHearingAidDeviceController mergeDevice:withDevice:]
  -[AXHearingAidDeviceController replaceDevice:withDevice:]
  -[AXHearingAidDeviceController checkPeripheralPaired:withCompletion:]
  -[AXHearingAidDeviceController hearingAidsForUUID:]
  -[AXHearingAidDeviceController deviceDidFinishLoading:]
  -[AXHearingAidDeviceController checkPartiallyPairedWithCompletion:]
  -[AXHearingAidDeviceController searchForAvailableDevicesWithCompletion:]
  -[AXHearingAidDeviceController disconnectFromHearingAidWithDeviceUUID:]
  -[AXHearingAidDeviceController cancelPendingConnections]
  -[AXHearingAidDeviceController shouldActiveScan]
  -[AXHearingAidDeviceController setShouldActiveScan:]
  -[AXHearingAidDeviceController valueForProperty:forDeviceID:]
  -[AXHearingAidDeviceController isPartiallyConnected]
  -[AXHearingAidDeviceController persistPairedHearingAids]
  -[AXHearingAidDeviceController isBluetoothAvailable]
  -[AXHearingAidDeviceController shouldRelinquishForPartialConnection:]
  -[AXHearingAidDeviceController persistentDevices]
  -[AXHearingAidDeviceController availablePeripherals]
  -[AXHearingAidDeviceController loadedDevices]
  -[AXHearingAidDeviceController availableSearchBlocks]
  -[AXHearingAidDeviceController connectedSearchBlocks]
  -[AXHearingAidDeviceController searchForAvailableDevices]
  -[AXHearingAidDeviceController setAvailablePeripherals:]
  -[AXHearingAidDeviceController setLoadedDevices:]
  -[AXHearingAidDeviceController setCentralRequestBlocks:]
  -[AXHearingAidDeviceController setPersistentDevices:]
  -[AXHearingAidDeviceController pairedHearingAidsDidChange]
  -[AXHearingAidDeviceController setAvailableSearchBlocks:]
  -[AXHearingAidDeviceController setConnectedSearchBlocks:]
  -[AXHearingAidDeviceController removeLoadedDevice:]
  -[AXHearingAidDeviceController removeAvailableDevice:]
  -[AXHearingAidDeviceController clearMissingHearingAids]
  -[AXHearingAidDeviceController sendRequestToCentralManager:]
  -[AXHearingAidDeviceController loadedDevicesDidChange]
  -[AXHearingAidDeviceController hearingAidForPeripheral:]
  -[AXHearingAidDeviceController centralRequestBlocks]
  -[AXHearingAidDeviceController removeConnectedDevice:]
  -[AXHearingAidDeviceController addConnectedDevice:]
  -[AXHearingAidDeviceController addLoadedDevice:]
  -[AXHearingAidDeviceController addAvailableDevice:]
  -[AXHearingAidDeviceController clearAvailableDevices]
  -[AXHearingAidDeviceController clearConnectedDevices]
  -[AXHearingAidDeviceController clearLoadedDevices]
  -[AXHearingAidDeviceController hearingAidsForPeripheral:]
  -[AXHearingAidDeviceController searchForConnectedDevices]


HUUtilities : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_dispatch_queue> *routingQueue
 @property  BOOL takingConnection

  // class methods
  +[HUUtilities sharedUtilities]
  +[HUUtilities objectFromXDCObject:]
  +[HUUtilities XDCObjectFromObject:]

  // instance methods
  -[HUUtilities mediaServerDied]
  -[HUUtilities init]
  -[HUUtilities currentPickableAudioRoutes]
  -[HUUtilities routingQueue]
  -[HUUtilities dealloc]
  -[HUUtilities takingConnection]
  -[HUUtilities .cxx_destruct]
  -[HUUtilities pauseNowPlaying:withQueue:andCompletion:]
  -[HUUtilities checkAudioPlayingWithQueue:andCompletion:]
  -[HUUtilities oldRoutes:equalToNewRoutes:]
  -[HUUtilities currentPickableAudioRoutesIfExist]
  -[HUUtilities setRoutingQueue:]
  -[HUUtilities hearingAidRouteAvailable]
  -[HUUtilities addHearingFeatureUsage:]
  -[HUUtilities registerNotifications]
  -[HUUtilities updateHearingFeatureUsage]
  -[HUUtilities wirelessSplitterEnabled]
  -[HUUtilities pickableAudioRoutesDidChange:]
  -[HUUtilities liveListenRouteSelected]
  -[HUUtilities updateWirelessSplitterState]
  -[HUUtilities setTakingConnection:]
  -[HUUtilities hearingAidStreamSelected]
  -[HUUtilities clearAudioRoutes]


HUFakeXPCClient : HCXPCClient /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[HUFakeXPCClient sendMessage:errorBlock:]
  -[HUFakeXPCClient .cxx_destruct]
  -[HUFakeXPCClient registerMessageBlock:]
  -[HUFakeXPCClient wantsUpdatesForIdentifier:]


AXHATimedAudioBuffer : NSObject /usr/lib/libSystem.B.dylib
 @property  AVAudioPCMBuffer *buffer
 @property  AVAudioTime *time

  // instance methods
  -[AXHATimedAudioBuffer setBuffer:]
  -[AXHATimedAudioBuffer buffer]
  -[AXHATimedAudioBuffer .cxx_destruct]
  -[AXHATimedAudioBuffer time]
  -[AXHATimedAudioBuffer setTime:]
  -[AXHATimedAudioBuffer initWithBuffer:atTime:]


AXHARingBuffer : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long count

  // instance methods
  -[AXHARingBuffer content]
  -[AXHARingBuffer .cxx_destruct]
  -[AXHARingBuffer reset]
  -[AXHARingBuffer initWithCount:]
  -[AXHARingBuffer count]
  -[AXHARingBuffer addObject:]


AXRemoteHearingAidDevice : NSObject /usr/lib/libSystem.B.dylib <AXHADeviceProtocol>
 @property  BOOL isPaired
 @property  BOOL isConnecting
 @property  BOOL leftConnected
 @property  BOOL rightConnected
 @property  unsigned long deviceType
 @property  NSString *name
 @property  NSMutableArray *manufacturer
 @property  NSMutableArray *model
 @property  NSString *leftFirmwareVersion
 @property  NSString *rightFirmwareVersion
 @property  NSString *leftHardwareVersion
 @property  NSString *rightHardwareVersion
 @property  NSString *rightUUID
 @property  NSString *leftUUID
 @property  NSString *leftPeripheralUUID
 @property  NSString *rightPeripheralUUID
 @property  double rightBatteryLevel
 @property  double leftBatteryLevel
 @property  NSDate *leftBatteryLowDate
 @property  NSDate *rightBatteryLowDate
 @property  short leftMicrophoneVolumeSteps
 @property  short rightMicrophoneVolumeSteps
 @property  short leftStreamVolumeSteps
 @property  short rightStreamVolumeSteps
 @property  short leftSensitivitySteps
 @property  short rightSensitivitySteps
 @property  short leftMixedVolumeSteps
 @property  short rightMixedVolumeSteps
 @property  BOOL supportsBinauralStreaming
 @property  BOOL supportsCombinedPresets
 @property  BOOL supportsCombinedVolumes
 @property  NSArray *rightPrograms
 @property  NSArray *leftPrograms
 @property  AXHearingAidMode *leftSelectedProgram
 @property  AXHearingAidMode *rightSelectedProgram
 @property  AXHearingAidMode *leftSelectedStreamingProgram
 @property  AXHearingAidMode *rightSelectedStreamingProgram
 @property  NSString *deviceUUID
 @property  unsigned long requiredProperties
 @property  unsigned long loadedProperties
 @property  unsigned long pendingPropertyWrites
 @property  unsigned long leftAvailableProperties
 @property  unsigned long rightAvailableProperties
 @property  int availableInputEars
 @property  int earsSupportingWatch
 @property  BOOL isBluetoothPaired
 @property  <AXHARemoteUpdateProtocol> *updateDelegate
 @property  BOOL keepInSync
 @property  int availableEars
 @property  double rightMicrophoneVolume
 @property  double leftMicrophoneVolume
 @property  double rightStreamVolume
 @property  double leftStreamVolume
 @property  double rightSensitivity
 @property  double leftSensitivity
 @property  double rightMixedVolume
 @property  double leftMixedVolume
 @property  BOOL rightTreble
 @property  BOOL leftTreble
 @property  BOOL rightBass
 @property  BOOL leftBass
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AXRemoteHearingAidDevice deviceUUID]
  -[AXRemoteHearingAidDevice setAvailableInputEars:]
  -[AXRemoteHearingAidDevice isConnected]
  -[AXRemoteHearingAidDevice connect]
  -[AXRemoteHearingAidDevice setEarsSupportingWatch:]
  -[AXRemoteHearingAidDevice init]
  -[AXRemoteHearingAidDevice rightBatteryLevel]
  -[AXRemoteHearingAidDevice manufacturer]
  -[AXRemoteHearingAidDevice leftBatteryLevel]
  -[AXRemoteHearingAidDevice setDeviceType:]
  -[AXRemoteHearingAidDevice isPaired]
  -[AXRemoteHearingAidDevice deviceType]
  -[AXRemoteHearingAidDevice valueForProperty:]
  -[AXRemoteHearingAidDevice dealloc]
  -[AXRemoteHearingAidDevice .cxx_destruct]
  -[AXRemoteHearingAidDevice name]
  -[AXRemoteHearingAidDevice setModel:]
  -[AXRemoteHearingAidDevice setManufacturer:]
  -[AXRemoteHearingAidDevice setDeviceUUID:]
  -[AXRemoteHearingAidDevice earsSupportingWatch]
  -[AXRemoteHearingAidDevice requiredProperties]
  -[AXRemoteHearingAidDevice isConnecting]
  -[AXRemoteHearingAidDevice model]
  -[AXRemoteHearingAidDevice setValue:forProperty:]
  -[AXRemoteHearingAidDevice updateDelegate]
  -[AXRemoteHearingAidDevice setUpdateDelegate:]
  -[AXRemoteHearingAidDevice setName:]
  -[AXRemoteHearingAidDevice availableInputEars]
  -[AXRemoteHearingAidDevice _valueForProperty:]
  -[AXRemoteHearingAidDevice setLeftUUID:]
  -[AXRemoteHearingAidDevice setRightUUID:]
  -[AXRemoteHearingAidDevice leftAvailable]
  -[AXRemoteHearingAidDevice setLeftMicrophoneVolume:]
  -[AXRemoteHearingAidDevice setLeftStreamVolume:]
  -[AXRemoteHearingAidDevice setLeftFirmwareVersion:]
  -[AXRemoteHearingAidDevice setLeftHardwareVersion:]
  -[AXRemoteHearingAidDevice availableEars]
  -[AXRemoteHearingAidDevice setAvailableEars:]
  -[AXRemoteHearingAidDevice rightAvailable]
  -[AXRemoteHearingAidDevice setRightMicrophoneVolume:]
  -[AXRemoteHearingAidDevice setRightFirmwareVersion:]
  -[AXRemoteHearingAidDevice setRightHardwareVersion:]
  -[AXRemoteHearingAidDevice programs]
  -[AXRemoteHearingAidDevice selectProgram:forEar:]
  -[AXRemoteHearingAidDevice supportsCombinedPresets]
  -[AXRemoteHearingAidDevice programsListsAreEqual]
  -[AXRemoteHearingAidDevice leftPrograms]
  -[AXRemoteHearingAidDevice rightPrograms]
  -[AXRemoteHearingAidDevice leftSelectedProgram]
  -[AXRemoteHearingAidDevice rightSelectedProgram]
  -[AXRemoteHearingAidDevice leftSelectedStreamingProgram]
  -[AXRemoteHearingAidDevice rightSelectedStreamingProgram]
  -[AXRemoteHearingAidDevice isLeftConnected]
  -[AXRemoteHearingAidDevice isRightConnected]
  -[AXRemoteHearingAidDevice hasConnection]
  -[AXRemoteHearingAidDevice propertyIsAvailable:forEar:]
  -[AXRemoteHearingAidDevice showCombinedPrograms]
  -[AXRemoteHearingAidDevice didLoadBasicProperties]
  -[AXRemoteHearingAidDevice didLoadRequiredProperties]
  -[AXRemoteHearingAidDevice leftUUID]
  -[AXRemoteHearingAidDevice rightUUID]
  -[AXRemoteHearingAidDevice setIsConnecting:]
  -[AXRemoteHearingAidDevice leftFirmwareVersion]
  -[AXRemoteHearingAidDevice rightFirmwareVersion]
  -[AXRemoteHearingAidDevice leftHardwareVersion]
  -[AXRemoteHearingAidDevice rightHardwareVersion]
  -[AXRemoteHearingAidDevice containsPeripheralWithUUID:]
  -[AXRemoteHearingAidDevice initWithRemoteRepresentation:andDeviceID:]
  -[AXRemoteHearingAidDevice setRightPrograms:]
  -[AXRemoteHearingAidDevice setLeftPrograms:]
  -[AXRemoteHearingAidDevice setSupportsBinauralStreaming:]
  -[AXRemoteHearingAidDevice setSupportsCombinedPresets:]
  -[AXRemoteHearingAidDevice setSupportsCombinedVolumes:]
  -[AXRemoteHearingAidDevice setLeftMicrophoneVolumeSteps:]
  -[AXRemoteHearingAidDevice setLeftSensitivitySteps:]
  -[AXRemoteHearingAidDevice setLeftStreamVolumeSteps:]
  -[AXRemoteHearingAidDevice setLeftMixedVolumeSteps:]
  -[AXRemoteHearingAidDevice setRightMicrophoneVolumeSteps:]
  -[AXRemoteHearingAidDevice setRightSensitivitySteps:]
  -[AXRemoteHearingAidDevice setRightStreamVolumeSteps:]
  -[AXRemoteHearingAidDevice setRightMixedVolumeSteps:]
  -[AXRemoteHearingAidDevice setLeftPeripheralUUID:]
  -[AXRemoteHearingAidDevice setRightPeripheralUUID:]
  -[AXRemoteHearingAidDevice leftPeripheralUUID]
  -[AXRemoteHearingAidDevice rightPeripheralUUID]
  -[AXRemoteHearingAidDevice setIsPaired:]
  -[AXRemoteHearingAidDevice leftMicrophoneVolume]
  -[AXRemoteHearingAidDevice setLeftBatteryLevel:]
  -[AXRemoteHearingAidDevice leftStreamVolumeSteps]
  -[AXRemoteHearingAidDevice leftSensitivitySteps]
  -[AXRemoteHearingAidDevice leftSensitivity]
  -[AXRemoteHearingAidDevice setLeftSensitivity:]
  -[AXRemoteHearingAidDevice leftMicrophoneVolumeSteps]
  -[AXRemoteHearingAidDevice leftTreble]
  -[AXRemoteHearingAidDevice setLeftTreble:]
  -[AXRemoteHearingAidDevice leftBass]
  -[AXRemoteHearingAidDevice setLeftBass:]
  -[AXRemoteHearingAidDevice leftMixedVolume]
  -[AXRemoteHearingAidDevice setLeftMixedVolume:]
  -[AXRemoteHearingAidDevice leftMixedVolumeSteps]
  -[AXRemoteHearingAidDevice rightMicrophoneVolume]
  -[AXRemoteHearingAidDevice setRightBatteryLevel:]
  -[AXRemoteHearingAidDevice rightStreamVolumeSteps]
  -[AXRemoteHearingAidDevice rightSensitivitySteps]
  -[AXRemoteHearingAidDevice rightSensitivity]
  -[AXRemoteHearingAidDevice setRightSensitivity:]
  -[AXRemoteHearingAidDevice rightMicrophoneVolumeSteps]
  -[AXRemoteHearingAidDevice rightTreble]
  -[AXRemoteHearingAidDevice setRightTreble:]
  -[AXRemoteHearingAidDevice rightBass]
  -[AXRemoteHearingAidDevice setRightBass:]
  -[AXRemoteHearingAidDevice rightMixedVolume]
  -[AXRemoteHearingAidDevice setRightMixedVolume:]
  -[AXRemoteHearingAidDevice rightMixedVolumeSteps]
  -[AXRemoteHearingAidDevice supportsBinauralStreaming]
  -[AXRemoteHearingAidDevice supportsCombinedVolumes]
  -[AXRemoteHearingAidDevice disconnectAndUnpair:]
  -[AXRemoteHearingAidDevice loadRequiredProperties]
  -[AXRemoteHearingAidDevice setLeftBatteryLowDate:]
  -[AXRemoteHearingAidDevice setRightBatteryLowDate:]
  -[AXRemoteHearingAidDevice keepInSync]
  -[AXRemoteHearingAidDevice setLeftSelectedStreamingProgram:]
  -[AXRemoteHearingAidDevice setLeftSelectedProgram:]
  -[AXRemoteHearingAidDevice setRightSelectedStreamingProgram:]
  -[AXRemoteHearingAidDevice setRightSelectedProgram:]
  -[AXRemoteHearingAidDevice setRightStreamVolume:]
  -[AXRemoteHearingAidDevice leftStreamVolume]
  -[AXRemoteHearingAidDevice rightStreamVolume]
  -[AXRemoteHearingAidDevice leftBatteryLowDate]
  -[AXRemoteHearingAidDevice rightBatteryLowDate]
  -[AXRemoteHearingAidDevice initWithPersistentRepresentation:]
  -[AXRemoteHearingAidDevice selectedPrograms]
  -[AXRemoteHearingAidDevice selectedProgramIndexes]
  -[AXRemoteHearingAidDevice setKeepInSync:]
  -[AXRemoteHearingAidDevice didLoadRequiredPeerProperties]
  -[AXRemoteHearingAidDevice setRequiredProperties:]
  -[AXRemoteHearingAidDevice leftConnected]
  -[AXRemoteHearingAidDevice rightConnected]
  -[AXRemoteHearingAidDevice loadedProperties]
  -[AXRemoteHearingAidDevice checkDidLoadProperties:]
  -[AXRemoteHearingAidDevice didLoadProperty:]
  -[AXRemoteHearingAidDevice leftAvailableProperties]
  -[AXRemoteHearingAidDevice rightAvailableProperties]
  -[AXRemoteHearingAidDevice pendingPropertyWrites]
  -[AXRemoteHearingAidDevice setPendingPropertyWrites:]
  -[AXRemoteHearingAidDevice _delayWriteProperties]
  -[AXRemoteHearingAidDevice writeVolumesForProperty:]
  -[AXRemoteHearingAidDevice supportsCombinedVolumesForProperty:]
  -[AXRemoteHearingAidDevice _updateSelectedProgramsProperties]
  -[AXRemoteHearingAidDevice _writeAllProgramSelectionsToPeripheral]
  -[AXRemoteHearingAidDevice setLoadedProperties:]
  -[AXRemoteHearingAidDevice setLeftConnected:]
  -[AXRemoteHearingAidDevice setRightConnected:]
  -[AXRemoteHearingAidDevice setIsBluetoothPaired:]
  -[AXRemoteHearingAidDevice setLeftAvailableProperties:]
  -[AXRemoteHearingAidDevice setRightAvailableProperties:]
  -[AXRemoteHearingAidDevice isBluetoothPaired]
  -[AXRemoteHearingAidDevice programAtIndex:forEar:]
  -[AXRemoteHearingAidDevice shouldDisplayCombinedVolume]
  -[AXRemoteHearingAidDevice shouldOnlyShowIndividualVolumesForProperty:]
  -[AXRemoteHearingAidDevice combinedPrograms]
  -[AXRemoteHearingAidDevice combinedVolumeForProperty:]


HUNoiseSettingsListenerHelper : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[HUNoiseSettingsListenerHelper addSelectorKey:]
  -[HUNoiseSettingsListenerHelper dealloc]
  -[HUNoiseSettingsListenerHelper .cxx_destruct]
  -[HUNoiseSettingsListenerHelper initWithListenerAddress:]


HUNoiseSettings : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableSet *registeredNotifications
 @property  NSMutableSet *synchronizePreferences
 @property  NSMutableDictionary *updateBlocks
 @property  NPSDomainAccessor *domainAccessor
 @property  BOOL noiseEnabled
 @property  BOOL onboardingCompleted
 @property  BOOL notificationsEnabled
 @property  unsigned long notificationThreshold
 @property  NSDate *notificationMuteDate
 @property  double currentLeq
 @property  NSDate *leqTimestamp
 @property  double leqDuration
 @property  BOOL migratedThreshold
 @property  unsigned long thresholdVersion
 @property  NSString *launchNoiseOnboardingTitle
 @property  NSString *environmentalMeasurementsTitleDescription
 @property  NSString *environmentalMeasurementsFooterDescription
 @property  NSString *noiseThresholdSectionTitle
 @property  NSString *noiseThresholdTitleDescription
 @property  NSAttributedString *noiseThresholdFooterDescriptionWithLink
 @property  NSString *noiseThresholdFooterDescription
 @property  NSString *noiseThresholdFooterLinkTitle
 @property  NSURL *noiseThresholdFooterLinkURL
 @property  NSString *noiseThresholdValueFooterDescription
 @property  long long noiseThresholdMinutesThreshold
 @property  long long noiseThresholdCurrentValue
 @property  NSArray *noiseThresholdOptions
 @property  NSNumber *notificationsEnabledOverride
 @property  NSNumber *notificationsThreshholdOverride

  // class methods
  +[HUNoiseSettings sharedInstance]

  // instance methods
  -[HUNoiseSettings setNotificationsEnabled:]
  -[HUNoiseSettings registeredNotifications]
  -[HUNoiseSettings notificationsEnabled]
  -[HUNoiseSettings registerUpdateBlock:forRetrieveSelector:withListener:]
  -[HUNoiseSettings setDomainAccessor:]
  -[HUNoiseSettings _synchronizeIfNecessary:]
  -[HUNoiseSettings _setValue:forPreferenceKey:]
  -[HUNoiseSettings _valueForPreferenceKey:]
  -[HUNoiseSettings setUpdateBlocks:]
  -[HUNoiseSettings domainAccessor]
  -[HUNoiseSettings setRegisteredNotifications:]
  -[HUNoiseSettings _handlePreferenceChanged:]
  -[HUNoiseSettings _preferenceKeyForSelector:]
  -[HUNoiseSettings _registerForNotification:]
  -[HUNoiseSettings setSynchronizePreferences:]
  -[HUNoiseSettings updateBlocks]
  -[HUNoiseSettings synchronizePreferences]
  -[HUNoiseSettings init]
  -[HUNoiseSettings dealloc]
  -[HUNoiseSettings .cxx_destruct]
  -[HUNoiseSettings pairedWatchDidChange:]
  -[HUNoiseSettings notificationForPreferenceKey:]
  -[HUNoiseSettings noiseEnabled]
  -[HUNoiseSettings onboardingCompleted]
  -[HUNoiseSettings notificationThreshold]
  -[HUNoiseSettings notificationMuteDate]
  -[HUNoiseSettings currentLeq]
  -[HUNoiseSettings leqTimestamp]
  -[HUNoiseSettings leqDuration]
  -[HUNoiseSettings migratedThreshold]
  -[HUNoiseSettings thresholdVersion]
  -[HUNoiseSettings notificationsEnabledOverride]
  -[HUNoiseSettings notificationsThreshholdOverride]
  -[HUNoiseSettings noiseThresholdFooterDescription]
  -[HUNoiseSettings noiseThresholdFooterLinkURL]
  -[HUNoiseSettings noiseThresholdFooterLinkTitle]
  -[HUNoiseSettings noiseThresholdCurrentValue]
  -[HUNoiseSettings noiseThresholdMinutesThreshold]
  -[HUNoiseSettings preferenceIsSetForRetrieveSelector:]
  -[HUNoiseSettings setNoiseEnabled:]
  -[HUNoiseSettings setOnboardingCompleted:]
  -[HUNoiseSettings setNotificationThreshold:]
  -[HUNoiseSettings setNotificationMuteDate:]
  -[HUNoiseSettings setCurrentLeq:]
  -[HUNoiseSettings setLeqTimestamp:]
  -[HUNoiseSettings setLeqDuration:]
  -[HUNoiseSettings setMigratedThreshold:]
  -[HUNoiseSettings setThresholdVersion:]
  -[HUNoiseSettings launchNoiseOnboardingTitle]
  -[HUNoiseSettings environmentalMeasurementsTitleDescription]
  -[HUNoiseSettings environmentalMeasurementsFooterDescription]
  -[HUNoiseSettings noiseThresholdSectionTitle]
  -[HUNoiseSettings noiseThresholdTitleDescription]
  -[HUNoiseSettings noiseThresholdFooterDescriptionWithLink]
  -[HUNoiseSettings noiseThresholdOptions]
  -[HUNoiseSettings localizedNoiseThresholdValue:]
  -[HUNoiseSettings localizedNoiseThresholdDetailValue:]
  -[HUNoiseSettings noiseThresholdValueFooterDescription]
  -[HUNoiseSettings setNotificationsEnabledOverride:]
  -[HUNoiseSettings setNotificationsThreshholdOverride:]


AXHearingAidMode : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *name
 @property  long long category
 @property  unsigned char index
 @property  BOOL isSelected
 @property  int ear
 @property  int syncAttempts

  // class methods
  +[AXHearingAidMode supportsSecureCoding]

  // instance methods
  -[AXHearingAidMode ear]
  -[AXHearingAidMode index]
  -[AXHearingAidMode setIsSelected:]
  -[AXHearingAidMode category]
  -[AXHearingAidMode setIndex:]
  -[AXHearingAidMode dealloc]
  -[AXHearingAidMode .cxx_destruct]
  -[AXHearingAidMode name]
  -[AXHearingAidMode isSelected]
  -[AXHearingAidMode encodeWithCoder:]
  -[AXHearingAidMode setEar:]
  -[AXHearingAidMode isEqual:]
  -[AXHearingAidMode initWithRepresentation:]
  -[AXHearingAidMode setCategory:]
  -[AXHearingAidMode setName:]
  -[AXHearingAidMode initWithCoder:]
  -[AXHearingAidMode isStreamOrMixingStream]
  -[AXHearingAidMode transportRepresentation]
  -[AXHearingAidMode syncAttempts]
  -[AXHearingAidMode setSyncAttempts:]
  -[AXHearingAidMode isMixingStream]
  -[AXHearingAidMode isStream]


AXHAMessageHandlerContext : NSObject /usr/lib/libSystem.B.dylib
 @property  id target
 @property  @? block

  // instance methods
  -[AXHAMessageHandlerContext target]
  -[AXHAMessageHandlerContext .cxx_destruct]
  -[AXHAMessageHandlerContext block]
  -[AXHAMessageHandlerContext initWithTarget:block:]


AXHeardController : NSObject /usr/lib/libSystem.B.dylib <HCHeardControllerProtocol, UNUserNotificationCenterDelegate>
 @property  NSArray *clients
 @property  NSDictionary *handlers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXHeardController entitlementsForMessageID:]
  +[AXHeardController sharedServer]

  // instance methods
  -[AXHeardController handlers]
  -[AXHeardController clients]
  -[AXHeardController sendClientsMessageWithPayload:excluding:]
  -[AXHeardController init]
  -[AXHeardController sendUpdateMessage:forIdentifier:]
  -[AXHeardController dealloc]
  -[AXHeardController .cxx_destruct]
  -[AXHeardController countOfClientsListeningForIdentifier:]
  -[AXHeardController sendMessage:withError:]
  -[AXHeardController handleMessage:forIdentifier:]
  -[AXHeardController registerFakeClient:]
  -[AXHeardController connection:hasEntitlementForMessage:]
  -[AXHeardController updatePersonalAudioSettingsOnAccessories]
  -[AXHeardController addHandler:andBlock:forMessageIdentifier:]
  -[AXHeardController setClients:]
  -[AXHeardController continueSetup]
  -[AXHeardController setHandlers:]
  -[AXHeardController userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]
  -[AXHeardController handleNewConnection:]
  -[AXHeardController startServer]


AXHADetectorManager : NSObject /usr/lib/libSystem.B.dylib <SNResultsObserving>
 @property  <AXHADetectorManagerDelegate> *delegate
 @property  NSArray *currentDetectors
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXHADetectorManager initializeModelMap]
  +[AXHADetectorManager detectorRequestForDetectionType:]
  +[AXHADetectorManager modelPathForURL:detectionType:]
  +[AXHADetectorManager setTestBundle:]

  // instance methods
  -[AXHADetectorManager init]
  -[AXHADetectorManager .cxx_destruct]
  -[AXHADetectorManager request:didProduceResult:]
  -[AXHADetectorManager requestDidComplete:]
  -[AXHADetectorManager setDelegate:]
  -[AXHADetectorManager request:didFailWithError:]
  -[AXHADetectorManager delegate]
  -[AXHADetectorManager currentDetectors]
  -[AXHADetectorManager addDetector:]
  -[AXHADetectorManager removeDetector:]
  -[AXHADetectorManager removeAllDetectors]
  -[AXHADetectorManager stopDetection]
  -[AXHADetectorManager startDetectionWithFormat:]
  -[AXHADetectorManager processAudioBuffer:atTime:]
  -[AXHADetectorManager streamAnalyzerIsRunning]
  -[AXHADetectorManager addAllDetectors]
  -[AXHADetectorManager _testAudioFile:]


AXHAUltronController : NSObject /usr/lib/libSystem.B.dylib <AXHADetectorManagerDelegate, AXHAListenEngineDelegate, AXUIClientDelegate, AXHAUltronModelAssetManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXHAUltronController sharedInstance]

  // instance methods
  -[AXHAUltronController isListening]
  -[AXHAUltronController init]
  -[AXHAUltronController connectionWithServiceWasInterruptedForUserInterfaceClient:]
  -[AXHAUltronController dealloc]
  -[AXHAUltronController .cxx_destruct]
  -[AXHAUltronController enroll]
  -[AXHAUltronController hearingUIClient]
  -[AXHAUltronController _processResult:]
  -[AXHAUltronController directory]
  -[AXHAUltronController assetsReadyForUltronManager:]
  -[AXHAUltronController assetsNotReadyForUltronManager:]
  -[AXHAUltronController receivedBuffer:atTime:]
  -[AXHAUltronController listenEngineDidStartWithInputFormat:]
  -[AXHAUltronController listenEngineFailedToStartWithError:]
  -[AXHAUltronController receivedObservation:forDetector:]
  -[AXHAUltronController receivedCompletion:]
  -[AXHAUltronController receivedError:fromDetector:]
  -[AXHAUltronController isEnrolled]
  -[AXHAUltronController _setupDetectorManager]
  -[AXHAUltronController _startRecording]
  -[AXHAUltronController retrieveFilesOlderThan:]
  -[AXHAUltronController cleanupUltronFiles:]
  -[AXHAUltronController reduceFileDirectorySize]
  -[AXHAUltronController stopUltron]
  -[AXHAUltronController _recordResultToFile:]
  -[AXHAUltronController recorderSettings]
  -[AXHAUltronController getDictionaryForListenType]
  -[AXHAUltronController unenroll]
  -[AXHAUltronController startUltron]
  -[AXHAUltronController cleanupUltron]


AXHAListenEngine : NSObject /usr/lib/libSystem.B.dylib
 @property  AVAudioEngine *audioEngine
 @property  AVAudioSession *audioSession
 @property  unsigned long bufferSize
 @property  BOOL isListening

  // class methods
  +[AXHAListenEngine sharedInstance]
  +[AXHAListenEngine _stringForState:]
  +[AXHAListenEngine _stateIsNotListening:]

  // instance methods
  -[AXHAListenEngine _mediaServicesWereReset:]
  -[AXHAListenEngine isListening]
  -[AXHAListenEngine audioEngine]
  -[AXHAListenEngine init]
  -[AXHAListenEngine audioSession]
  -[AXHAListenEngine dealloc]
  -[AXHAListenEngine .cxx_destruct]
  -[AXHAListenEngine _setState:]
  -[AXHAListenEngine setAudioSession:]
  -[AXHAListenEngine bufferSize]
  -[AXHAListenEngine addListenDelegate:]
  -[AXHAListenEngine removeListenDelegate:]
  -[AXHAListenEngine _activateNotifications]
  -[AXHAListenEngine _notListeningForAnyReason]
  -[AXHAListenEngine _startIfPossibleAndNotify]
  -[AXHAListenEngine notifyListeningStartedWithError:]
  -[AXHAListenEngine _stopListeningAndTransitionToState:]
  -[AXHAListenEngine _setupAudioInputWithError:shouldInterrupt:]
  -[AXHAListenEngine _handleBuffer:atTime:]
  -[AXHAListenEngine _carPlayIsConnectedDidChange:]
  -[AXHAListenEngine _handleAudioSessionInterruption:]
  -[AXHAListenEngine _handleConfigurationChangeNotification:]
  -[AXHAListenEngine _startListeningWithError:]
  -[AXHAListenEngine _handleInterruptionRequestingState:]
  -[AXHAListenEngine _restartSoundRecognitionIfNecesary]
  -[AXHAListenEngine setAudioEngine:]


AXHALiveListenController : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL didInitializeAudioUnit
 @property  BOOL exportsLiveListenToFile
 @property  <AXHALiveListenDelegate> *delegate
 @property  ^{OpaqueAudioComponentInstance=} rioUnit
 @property  ^{OpaqueAudioComponentInstance=} mixerUnit
 @property  BOOL isListening

  // instance methods
  -[AXHALiveListenController isListening]
  -[AXHALiveListenController init]
  -[AXHALiveListenController setExportsLiveListenToFile:]
  -[AXHALiveListenController exportsLiveListenToFile]
  -[AXHALiveListenController setIsListening:]
  -[AXHALiveListenController dealloc]
  -[AXHALiveListenController startListeningWithError:]
  -[AXHALiveListenController .cxx_destruct]
  -[AXHALiveListenController rioUnit]
  -[AXHALiveListenController setDelegate:]
  -[AXHALiveListenController delegate]
  -[AXHALiveListenController audioLevel]
  -[AXHALiveListenController audioSessionWasInterrupted:]
  -[AXHALiveListenController stopListeningWithError:]
  -[AXHALiveListenController mediaServicesWereReset:]
  -[AXHALiveListenController audioRouteDidChange:]
  -[AXHALiveListenController didInitializeAudioUnit]
  -[AXHALiveListenController setDidInitializeAudioUnit:]
  -[AXHALiveListenController debugAudioFile]
  -[AXHALiveListenController mixerUnit]


HUNoiseController : NSObject /usr/lib/libSystem.B.dylib
 @property  AXDispatchTimer *edDummyDataTimer
 @property  AXDispatchTimer *adamSuspendedTimer
 @property  NSMutableArray *leqBuffer
 @property  float slowLeq
 @property  float fastLeq
 @property  BOOL measurementEnabled
 @property  unsigned long thresholdLevel
 @property  NSDate *timeNotified
 @property  float sampleDuration
 @property  BOOL notified
 @property  BOOL muted
 @property  NSMutableArray *leqBuffer80Threshold
 @property  NSMutableArray *leqBuffer85Threshold
 @property  NSMutableArray *leqBuffer90Threshold
 @property  BOOL notified80
 @property  BOOL notified85
 @property  BOOL notified90
 @property  NSDate *timeNotified80
 @property  NSDate *timeNotified85
 @property  NSDate *timeNotified90
 @property  NSObject<OS_dispatch_queue> *dataQueue
 @property  ADAMAudioDataReceiver *edDataReceiver
 @property  HKHealthStore *healthStore
 @property  HKCategorySample *notificationSample
 @property  UNUserNotificationCenter *userNotificationCenter

  // class methods
  +[HUNoiseController sharedController]
  +[HUNoiseController deviceSupportsEnvironmentalDosimetry]

  // instance methods
  -[HUNoiseController healthStore]
  -[HUNoiseController setMuted:]
  -[HUNoiseController init]
  -[HUNoiseController setDataQueue:]
  -[HUNoiseController slowLeq]
  -[HUNoiseController adamSuspendedTimer]
  -[HUNoiseController dealloc]
  -[HUNoiseController isMuted]
  -[HUNoiseController .cxx_destruct]
  -[HUNoiseController restartADAMTimer]
  -[HUNoiseController userNotificationCenter]
  -[HUNoiseController isMeasurementEnabled]
  -[HUNoiseController setHealthStore:]
  -[HUNoiseController setSlowLeq:]
  -[HUNoiseController setThresholdLevel:]
  -[HUNoiseController setAdamSuspendedTimer:]
  -[HUNoiseController setMeasurementEnabled:]
  -[HUNoiseController fastLeq]
  -[HUNoiseController _clearCachedValues]
  -[HUNoiseController thresholdLevel]
  -[HUNoiseController dataQueue]
  -[HUNoiseController setFastLeq:]
  -[HUNoiseController setSampleDuration:]
  -[HUNoiseController sampleDuration]
  -[HUNoiseController registerForEnvironmentalDosimetryUpdates:]
  -[HUNoiseController _logNoiseEnabledStateToPowerlog:]
  -[HUNoiseController edDataReceiver]
  -[HUNoiseController measurementConfigurationWithDuration:period:config:]
  -[HUNoiseController measurementConfigurationWithDuration:period:]
  -[HUNoiseController subscribeToSharedNotifications]
  -[HUNoiseController _sendUpdateMessageForCurrentValues]
  -[HUNoiseController _stopReceivingAudioDosageSamples]
  -[HUNoiseController applyNotificationLogicForSPL:withDuration:]
  -[HUNoiseController applyAnalyticsNotificationLogicForSPL:withDuration:]
  -[HUNoiseController isNotified]
  -[HUNoiseController setNotified:]
  -[HUNoiseController checkToResetNotificationsForSPL:withDuration:andBuffer:forTime:]
  -[HUNoiseController checkToSurfaceNotificationForSPL:withDuration:andBuffer:forTime:]
  -[HUNoiseController maintainCircularBuffer:forTime:]
  -[HUNoiseController calculateLeqForBuffer:]
  -[HUNoiseController alertTypeFromLevel:]
  -[HUNoiseController showNotificationForAlertType:]
  -[HUNoiseController setTimeNotified:]
  -[HUNoiseController writeNotificationSampleToHKWithSPL:startDate:endDate:]
  -[HUNoiseController isNotified80]
  -[HUNoiseController checkToResetAnalyticsNotificationsForSPL:withDuration:andBuffer:forTime:andThreshold:]
  -[HUNoiseController checkToSurfaceAnalyticsNotificationForSPL:withDuration:andBuffer:forTime:andThreshold:]
  -[HUNoiseController isNotified85]
  -[HUNoiseController isNotified90]
  -[HUNoiseController setNotified80:]
  -[HUNoiseController setNotified85:]
  -[HUNoiseController setNotified90:]
  -[HUNoiseController setTimeNotified80:]
  -[HUNoiseController setTimeNotified85:]
  -[HUNoiseController setTimeNotified90:]
  -[HUNoiseController readEnvironmentalDosimetryLevels]
  -[HUNoiseController edDummyDataTimer]
  -[HUNoiseController setEdDummyDataTimer:]
  -[HUNoiseController leqBuffer]
  -[HUNoiseController setLeqBuffer:]
  -[HUNoiseController timeNotified]
  -[HUNoiseController leqBuffer80Threshold]
  -[HUNoiseController setLeqBuffer80Threshold:]
  -[HUNoiseController leqBuffer85Threshold]
  -[HUNoiseController setLeqBuffer85Threshold:]
  -[HUNoiseController leqBuffer90Threshold]
  -[HUNoiseController setLeqBuffer90Threshold:]
  -[HUNoiseController timeNotified80]
  -[HUNoiseController timeNotified85]
  -[HUNoiseController timeNotified90]
  -[HUNoiseController setEdDataReceiver:]
  -[HUNoiseController notificationSample]
  -[HUNoiseController setNotificationSample:]


AXHATimeStamp : NSObject /usr/lib/libSystem.B.dylib
 @property  double duration
 @property  double time

  // instance methods
  -[AXHATimeStamp initWithResult:]
  -[AXHATimeStamp time]
  -[AXHATimeStamp duration]
  -[AXHATimeStamp initWithTime:andDuration:]


AXHADetectionResult : NSObject /usr/lib/libSystem.B.dylib
 @property  AXHATimeStamp *timestamp
 @property  NSString *identifier
 @property  double confidence
 @property  NSString *debug

  // instance methods
  -[AXHADetectionResult initWithResult:]
  -[AXHADetectionResult .cxx_destruct]
  -[AXHADetectionResult timestamp]
  -[AXHADetectionResult confidence]
  -[AXHADetectionResult identifier]
  -[AXHADetectionResult debug]
  -[AXHADetectionResult initWithTimeStamp:identifier:confidence:]


AXHAResultsCollector : NSObject /usr/lib/libSystem.B.dylib <AXHADetectorManagerDelegate>
 @property  NSArray *results
 @property  BOOL didFinish
 @property  NSError *error
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AXHAResultsCollector init]
  -[AXHAResultsCollector results]
  -[AXHAResultsCollector .cxx_destruct]
  -[AXHAResultsCollector error]
  -[AXHAResultsCollector didFinish]
  -[AXHAResultsCollector receivedObservation:forDetector:]
  -[AXHAResultsCollector receivedCompletion:]
  -[AXHAResultsCollector receivedError:fromDetector:]


AXFakeHearingAidDevice : AXHearingAidDevice
 @property  int type
 @property  BOOL connected
 @property  NSString *name
 @property  NSArray *manufacturer
 @property  NSArray *model
 @property  NSString *leftUUID
 @property  NSString *rightUUID
 @property  double rightBatteryLevel
 @property  double leftBatteryLevel
 @property  BOOL isConnecting
 @property  NSString *leftFirmwareVersion
 @property  NSString *rightFirmwareVersion
 @property  NSString *leftHardwareVersion
 @property  NSString *rightHardwareVersion
 @property  NSDate *leftBatteryLowDate
 @property  NSDate *rightBatteryLowDate
 @property  short leftMicrophoneVolumeSteps
 @property  short rightMicrophoneVolumeSteps
 @property  unsigned long excludedProperties
 @property  CBPeripheral *leftPeripheral
 @property  CBPeripheral *rightPeripheral

  // instance methods
  -[AXFakeHearingAidDevice disconnect]
  -[AXFakeHearingAidDevice isConnected]
  -[AXFakeHearingAidDevice connect]
  -[AXFakeHearingAidDevice setConnected:]
  -[AXFakeHearingAidDevice rightBatteryLevel]
  -[AXFakeHearingAidDevice manufacturer]
  -[AXFakeHearingAidDevice leftBatteryLevel]
  -[AXFakeHearingAidDevice valueForProperty:]
  -[AXFakeHearingAidDevice dealloc]
  -[AXFakeHearingAidDevice setType:]
  -[AXFakeHearingAidDevice .cxx_destruct]
  -[AXFakeHearingAidDevice name]
  -[AXFakeHearingAidDevice connected]
  -[AXFakeHearingAidDevice setModel:]
  -[AXFakeHearingAidDevice setManufacturer:]
  -[AXFakeHearingAidDevice type]
  -[AXFakeHearingAidDevice persist]
  -[AXFakeHearingAidDevice isPersistent]
  -[AXFakeHearingAidDevice initWithDeviceType:]
  -[AXFakeHearingAidDevice isConnecting]
  -[AXFakeHearingAidDevice model]
  -[AXFakeHearingAidDevice setValue:forProperty:]
  -[AXFakeHearingAidDevice setName:]
  -[AXFakeHearingAidDevice manufacturerForType]
  -[AXFakeHearingAidDevice modelForType]
  -[AXFakeHearingAidDevice setLeftUUID:]
  -[AXFakeHearingAidDevice setRightUUID:]
  -[AXFakeHearingAidDevice leftAvailable]
  -[AXFakeHearingAidDevice setLeftFirmwareVersion:]
  -[AXFakeHearingAidDevice setLeftHardwareVersion:]
  -[AXFakeHearingAidDevice rightAvailable]
  -[AXFakeHearingAidDevice setRightFirmwareVersion:]
  -[AXFakeHearingAidDevice setRightHardwareVersion:]
  -[AXFakeHearingAidDevice createPrograms]
  -[AXFakeHearingAidDevice excludedProperties]
  -[AXFakeHearingAidDevice availablePropertiesForPeripheral:]
  -[AXFakeHearingAidDevice programsListsAreEqual]
  -[AXFakeHearingAidDevice leftPrograms]
  -[AXFakeHearingAidDevice rightPrograms]
  -[AXFakeHearingAidDevice persistentRepresentation]
  -[AXFakeHearingAidDevice isLeftConnected]
  -[AXFakeHearingAidDevice isRightConnected]
  -[AXFakeHearingAidDevice hasConnection]
  -[AXFakeHearingAidDevice deviceSupportsProperty:]
  -[AXFakeHearingAidDevice propertyIsAvailable:forEar:]
  -[AXFakeHearingAidDevice showCombinedPrograms]
  -[AXFakeHearingAidDevice writeInt:toEar:forProperty:]
  -[AXFakeHearingAidDevice writeSignedInt:toEar:forProperty:]
  -[AXFakeHearingAidDevice didLoadBasicProperties]
  -[AXFakeHearingAidDevice didLoadRequiredProperties]
  -[AXFakeHearingAidDevice registerWriteBlock:]
  -[AXFakeHearingAidDevice setNewName:]
  -[AXFakeHearingAidDevice isFakeDevice]
  -[AXFakeHearingAidDevice leftUUID]
  -[AXFakeHearingAidDevice rightUUID]
  -[AXFakeHearingAidDevice setIsConnecting:]
  -[AXFakeHearingAidDevice leftFirmwareVersion]
  -[AXFakeHearingAidDevice rightFirmwareVersion]
  -[AXFakeHearingAidDevice leftHardwareVersion]
  -[AXFakeHearingAidDevice rightHardwareVersion]
  -[AXFakeHearingAidDevice leftPeripheral]
  -[AXFakeHearingAidDevice setLeftPeripheral:]
  -[AXFakeHearingAidDevice rightPeripheral]
  -[AXFakeHearingAidDevice setRightPeripheral:]
  -[AXFakeHearingAidDevice setExcludedProperties:]
  -[AXFakeHearingAidDevice setLeftMicrophoneVolumeSteps:]
  -[AXFakeHearingAidDevice setRightMicrophoneVolumeSteps:]
  -[AXFakeHearingAidDevice setLeftBatteryLevel:]
  -[AXFakeHearingAidDevice leftMicrophoneVolumeSteps]
  -[AXFakeHearingAidDevice setRightBatteryLevel:]
  -[AXFakeHearingAidDevice rightMicrophoneVolumeSteps]
  -[AXFakeHearingAidDevice setLeftBatteryLowDate:]
  -[AXFakeHearingAidDevice setRightBatteryLowDate:]
  -[AXFakeHearingAidDevice leftBatteryLowDate]
  -[AXFakeHearingAidDevice rightBatteryLowDate]


HUNearbyDevice : NSObject /usr/lib/libSystem.B.dylib
 @property  RPCompanionLinkClient *client
 @property  BOOL activating
 @property  BOOL shouldTrack
 @property  NSMutableDictionary *previousMessageCache
 @property  NSSet *cachableKeys
 @property  RPCompanionLinkDevice *device
 @property  unsigned long connectionStatus

  // class methods
  +[HUNearbyDevice nearbyDeviceWithPeerDevice:]

  // instance methods
  -[HUNearbyDevice setClient:]
  -[HUNearbyDevice client]
  -[HUNearbyDevice sendMessage:]
  -[HUNearbyDevice device]
  -[HUNearbyDevice dealloc]
  -[HUNearbyDevice .cxx_destruct]
  -[HUNearbyDevice name]
  -[HUNearbyDevice identifier]
  -[HUNearbyDevice shouldTrack]
  -[HUNearbyDevice stop]
  -[HUNearbyDevice setDevice:]
  -[HUNearbyDevice reset]
  -[HUNearbyDevice isEqual:]
  -[HUNearbyDevice connectionStatus]
  -[HUNearbyDevice setConnectionStatus:]
  -[HUNearbyDevice representsPeerDevice:]
  -[HUNearbyDevice purgeMessageCache]
  -[HUNearbyDevice representsAWatch]
  -[HUNearbyDevice initWithPeerDevice:]
  -[HUNearbyDevice setShouldTrack:]
  -[HUNearbyDevice setupSessionIfNecessary]
  -[HUNearbyDevice setCachableKeys:]
  -[HUNearbyDevice setActivating:]
  -[HUNearbyDevice isActivating]
  -[HUNearbyDevice cachableKeys]
  -[HUNearbyDevice previousMessageCache]
  -[HUNearbyDevice setPreviousMessageCache:]


(_AX_HA_)
	// instance methods
	-[(_AX_HA_) unsignedLongLongValue]

(_AX_HA_PROGRAMS_ARRAY_)
	// instance methods
	-[(_AX_HA_PROGRAMS_ARRAY_) programThatMatchesProgram:]
	-[(_AX_HA_PROGRAMS_ARRAY_) setProgram:withOtherSidePrograms:selected:]

(_AX_HA_DEPENDENT_ENUMERATION_)
	// instance methods
	-[(_AX_HA_DEPENDENT_ENUMERATION_) enumerateKeysAndObjectsInDependentOrderUsingBlock:]

CBPeripheral(_AX_HA_)
	// instance methods
	-[CBPeripheral(_AX_HA_) axTag:]
	-[CBPeripheral(_AX_HA_) axUntag:]

NSMutableDictionary(AXHAUltronController)
	// instance methods
	-[NSMutableDictionary(AXHAUltronController) setSafeObject:forKey:]

01 00 1600 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 0a00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAudioEngine 
01 00 0a00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAudioFile 
01 00 0a00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAudioFormat 
01 00 0a00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAudioSession 
01 00 0e00 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 1700 /System/Library/PrivateFrameworks/AXCoreUtilities.framework/AXCoreUtilities: AXAccessQueue 
01 00 1100 /System/Library/PrivateFrameworks/AXAssetLoader.framework/AXAssetLoader: AXAsset 
01 00 1100 /System/Library/PrivateFrameworks/AXAssetLoader.framework/AXAssetLoader: AXAssetController 
01 00 1700 /System/Library/PrivateFrameworks/AXCoreUtilities.framework/AXCoreUtilities: AXDispatchTimer 
01 00 1100 /System/Library/PrivateFrameworks/AXAssetLoader.framework/AXAssetLoader: AXUltronModelAssetPolicy 
01 00 1700 /System/Library/PrivateFrameworks/AXCoreUtilities.framework/AXCoreUtilities: AXXPCUtilities 
01 00 1300 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBCentralManager 
01 00 1300 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBPeripheral 
01 00 1300 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBUUID 
01 00 1900 /System/Library/PrivateFrameworks/HearingCore.framework/HearingCore: HCServer 
01 00 1900 /System/Library/PrivateFrameworks/HearingCore.framework/HearingCore: HCUtilities 
01 00 1900 /System/Library/PrivateFrameworks/HearingCore.framework/HearingCore: HCXPCClient 
01 00 1900 /System/Library/PrivateFrameworks/HearingCore.framework/HearingCore: HCXPCMessage 
01 00 0800 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 0c00 /System/Library/Frameworks/CoreML.framework/CoreML: MLModel 
01 00 0700 /System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync: NPSDomainAccessor 
01 00 0700 /System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync: NPSManager 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateComponentsFormatter 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 1c00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUbiquitousKeyValueStore 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1200 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkClient 
01 00 1800 /System/Library/PrivateFrameworks/RTTUtilities.framework/RTTUtilities: RTTController 
01 00 1800 /System/Library/PrivateFrameworks/RTTUtilities.framework/RTTUtilities: RTTSettings 
01 00 1800 /System/Library/PrivateFrameworks/RTTUtilities.framework/RTTUtilities: RTTTelephonyUtilities 
01 00 0500 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarStyleOverridesAssertion 
01 00 0900 /System/Library/Frameworks/SoundAnalysis.framework/SoundAnalysis: SNAudioFileAnalyzer 
01 00 0900 /System/Library/Frameworks/SoundAnalysis.framework/SoundAnalysis: SNAudioStreamAnalyzer 
01 00 0900 /System/Library/Frameworks/SoundAnalysis.framework/SoundAnalysis: SNDetectSoundRequest 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNMutableNotificationContent 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationAction 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationCategory 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationRequest 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationSound 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNUserNotificationCenter 
