|| __DATA.__data _EMContentRepresentationNetworkTransportKey
|| __DATA.__data _EMListUnsubscribeSuggestionTrailingComparator
|| __DATA.__objc_data _OBJC_CLASS_$_EMAccountAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_EMCertificateTrustInformation
|| __DATA.__objc_data _OBJC_CLASS_$_EMCreateMailboxChangeAction
|| __DATA.__objc_data _OBJC_CLASS_$_EMDeleteMailboxChangeAction
|| __DATA.__objc_data _OBJC_CLASS_$_EMListUnsubscribeMessageGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_EMListUnsubscribeSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$_EMMailToURLComponents
|| __DATA.__objc_data _OBJC_CLASS_$_EMMessageDeleteAction
|| __DATA.__objc_data _OBJC_CLASS_$_EMMessageDeleteAllAction
|| __DATA.__objc_data _OBJC_CLASS_$_EMMessageInternalID
|| __DATA.__objc_data _OBJC_CLASS_$_EMMoveMailboxChangeAction
|| __DATA.__objc_data _OBJC_CLASS_$_EMRenameMailboxChangeAction
|| __DATA.__objc_data _OBJC_CLASS_$_EMSearchableIndexSchema
|| __DATA.__objc_data _OBJC_CLASS_$_EMSearchableIndexTopHitsQuery
|| __DATA.__objc_data _OBJC_CLASS_$_EMSearchableIndexTopHitsQueryResult
|| __DATA.__objc_data _OBJC_CLASS_$__EMComparisionQueryGenerator
|| __DATA.__objc_data _OBJC_CLASS_$__EMCompoundQueryGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_EMAccountAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_EMCertificateTrustInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_EMCreateMailboxChangeAction
|| __DATA.__objc_data _OBJC_METACLASS_$_EMDeleteMailboxChangeAction
|| __DATA.__objc_data _OBJC_METACLASS_$_EMListUnsubscribeMessageGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_EMListUnsubscribeSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$_EMMailToURLComponents
|| __DATA.__objc_data _OBJC_METACLASS_$_EMMessageDeleteAction
|| __DATA.__objc_data _OBJC_METACLASS_$_EMMessageDeleteAllAction
|| __DATA.__objc_data _OBJC_METACLASS_$_EMMessageInternalID
|| __DATA.__objc_data _OBJC_METACLASS_$_EMMoveMailboxChangeAction
|| __DATA.__objc_data _OBJC_METACLASS_$_EMRenameMailboxChangeAction
|| __DATA.__objc_data _OBJC_METACLASS_$_EMSearchableIndexSchema
|| __DATA.__objc_data _OBJC_METACLASS_$_EMSearchableIndexTopHitsQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_EMSearchableIndexTopHitsQueryResult
|| __DATA.__objc_data _OBJC_METACLASS_$__EMComparisionQueryGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$__EMCompoundQueryGenerator
|| __DATA_CONST.__const _EMAccountsChangedNotification
|| __DATA_CONST.__const _EMAccountsChangedNotificationAccountsKey
|| __DATA_CONST.__const _EMActivityFetchStateKey
|| __DATA_CONST.__const _EMActivityKindFetch
|| __DATA_CONST.__const _EMActivityLastSuccessfulUpdateKey
|| __DATA_CONST.__const _EMActivityMailboxObjectIDKey
|| __DATA_CONST.__const _EMAppleMailForwardURLScheme
|| __DATA_CONST.__const _EMAppleMailHandoffPayloadURLScheme
|| __DATA_CONST.__const _EMAppleMailReplyURLScheme
|| __DATA_CONST.__const _EMAppleMailShowVIPMessagesURLScheme
|| __DATA_CONST.__const _EMAppleMailShowVIPSettingsURLScheme
|| __DATA_CONST.__const _EMAppleMailURLScheme
|| __DATA_CONST.__const _EMAppleMailboxURLScheme
|| __DATA_CONST.__const _EMBlockedSenderManagerBlockedListDidChangeNotification
|| __DATA_CONST.__const _EMBlockedSenderManagerBlockedSendersKey
|| __DATA_CONST.__const _EMBlockedSenderManagerIsBlockedSenderEnabledKey
|| __DATA_CONST.__const _EMBlockedSenderOptionsDidChangeNotification
|| __DATA_CONST.__const _EMContactStoreErrorDomain
|| __DATA_CONST.__const _EMContactStoreErrorKeyAddress
|| __DATA_CONST.__const _EMContentRepresentationTypeEmailMessage
|| __DATA_CONST.__const _EMContentRepresentationTypeHTML
|| __DATA_CONST.__const _EMContentRepresentationTypePlainText
|| __DATA_CONST.__const _EMContentRepresentationTypeRaw
|| __DATA_CONST.__const _EMDaemonServiceAvailabilityNotification
|| __DATA_CONST.__const _EMDaemonServiceName
|| __DATA_CONST.__const _EMDirectoryNameMail
|| __DATA_CONST.__const _EMErrorDomain
|| __DATA_CONST.__const _EMMailDropBannerClass
|| __DATA_CONST.__const _EMMailDropImageArchiveName
|| __DATA_CONST.__const _EMMailDropItemClass
|| __DATA_CONST.__const _EMMailDropMetadataClass
|| __DATA_CONST.__const _EMMailDropMetadataExpiration
|| __DATA_CONST.__const _EMMailDropMetadataFilename
|| __DATA_CONST.__const _EMMailDropMetadataSize
|| __DATA_CONST.__const _EMMailDropMetadataURL
|| __DATA_CONST.__const _EMMailDropThumbnailClass
|| __DATA_CONST.__const _EMMailToURLScheme
|| __DATA_CONST.__const _EMMailboxObjectIDURLSchemeEphemeral
|| __DATA_CONST.__const _EMMessageIDURLScheme
|| __DATA_CONST.__const _EMMessageListAddedItemsExtraInfoKeyUnreadMessageIDs
|| __DATA_CONST.__const _EMMessageListItemKeyPathBccAddress
|| __DATA_CONST.__const _EMMessageListItemKeyPathBccDisplayName
|| __DATA_CONST.__const _EMMessageListItemKeyPathCCList
|| __DATA_CONST.__const _EMMessageListItemKeyPathCcAddress
|| __DATA_CONST.__const _EMMessageListItemKeyPathCcDisplayName
|| __DATA_CONST.__const _EMMessageListItemKeyPathConversationID
|| __DATA_CONST.__const _EMMessageListItemKeyPathConversationNotificationLevel
|| __DATA_CONST.__const _EMMessageListItemKeyPathCount
|| __DATA_CONST.__const _EMMessageListItemKeyPathDate
|| __DATA_CONST.__const _EMMessageListItemKeyPathDisplayMessageItemID
|| __DATA_CONST.__const _EMMessageListItemKeyPathFlagColors
|| __DATA_CONST.__const _EMMessageListItemKeyPathFlags
|| __DATA_CONST.__const _EMMessageListItemKeyPathHasAttachments
|| __DATA_CONST.__const _EMMessageListItemKeyPathHasUnflagged
|| __DATA_CONST.__const _EMMessageListItemKeyPathIsBlocked
|| __DATA_CONST.__const _EMMessageListItemKeyPathIsCCMe
|| __DATA_CONST.__const _EMMessageListItemKeyPathIsToMe
|| __DATA_CONST.__const _EMMessageListItemKeyPathIsVIP
|| __DATA_CONST.__const _EMMessageListItemKeyPathMailboxAccountID
|| __DATA_CONST.__const _EMMessageListItemKeyPathMailboxObjectIDs
|| __DATA_CONST.__const _EMMessageListItemKeyPathMailboxObjectIDsURLAbsoluteString
|| __DATA_CONST.__const _EMMessageListItemKeyPathMailboxType
|| __DATA_CONST.__const _EMMessageListItemKeyPathMailboxes
|| __DATA_CONST.__const _EMMessageListItemKeyPathMessageFlagColor
|| __DATA_CONST.__const _EMMessageListItemKeyPathMessageFlagFlagged
|| __DATA_CONST.__const _EMMessageListItemKeyPathMessageFlagRead
|| __DATA_CONST.__const _EMMessageListItemKeyPathSenderList
|| __DATA_CONST.__const _EMMessageListItemKeyPathSubject
|| __DATA_CONST.__const _EMMessageListItemKeyPathSummary
|| __DATA_CONST.__const _EMMessageListItemKeyPathToAddress
|| __DATA_CONST.__const _EMMessageListItemKeyPathToDisplayName
|| __DATA_CONST.__const _EMMessageListItemKeyPathToList
|| __DATA_CONST.__const _EMPredicateAccountKeyPathName
|| __DATA_CONST.__const _EMPredicateMailboxKeyPathAccount
|| __DATA_CONST.__const _EMPredicateMailboxKeyPathIsSmartMailbox
|| __DATA_CONST.__const _EMPredicateMailboxKeyPathIsTopLevelMailbox
|| __DATA_CONST.__const _EMPredicateMailboxKeyPathMailboxChildren
|| __DATA_CONST.__const _EMPredicateMailboxKeyPathName
|| __DATA_CONST.__const _EMPredicateMailboxKeyPathType
|| __DATA_CONST.__const _EMPredicateMessageKeyPathFrom
|| __DATA_CONST.__const _EMPredicateMessageKeyPathInternalID
|| __DATA_CONST.__const _EMPredicateMessageKeyPathObjectID
|| __DATA_CONST.__const _EMPredicateMessageKeyPathSubject
|| __DATA_CONST.__const _EMPromptUserForBlockedSenderKey
|| __DATA_CONST.__const _EMUserDefaultAdditionalCursorInteractions
|| __DATA_CONST.__const _EMUserDefaultAlwaysBCCSelf
|| __DATA_CONST.__const _EMUserDefaultBlockedSenderAction
|| __DATA_CONST.__const _EMUserDefaultBlockedSenderEnabled
|| __DATA_CONST.__const _EMUserDefaultDisableInitialMessageSelection
|| __DATA_CONST.__const _EMUserDefaultDisableSnapshotInvalidation
|| __DATA_CONST.__const _EMUserDefaultDisableStateRestoration
|| __DATA_CONST.__const _EMUserDefaultFavoriteFlagColorMailbox
|| __DATA_CONST.__const _EMUserDefaultFilesMarkedPurgeable
|| __DATA_CONST.__const _EMUserDefaultForceAccountIsManaged
|| __DATA_CONST.__const _EMUserDefaultForceInMemoryThreading
|| __DATA_CONST.__const _EMUserDefaultInteractionEventLogDebug
|| __DATA_CONST.__const _EMUserDefaultMutedThreadActionDidChangeNotification
|| __DATA_CONST.__const _EMUserDefaultMutedThreadActionKey
|| __DATA_CONST.__const _EMUserDefaultMutedThreadActionMarkAsRead
|| __DATA_CONST.__const _EMUserDefaultMutedThreadActionMoveToArchiveOrDelete
|| __DATA_CONST.__const _EMUserDefaultNewFilterCardEnabled
|| __DATA_CONST.__const _EMUserDefaultNewQueryResults
|| __DATA_CONST.__const _EMUserDefaultPrototypeUIEnabled
|| __DATA_CONST.__const _EMUserDefaultProxyServerURL
|| __DATA_CONST.__const _EMUserDefaultQueryResultComparison
|| __DATA_CONST.__const _EMUserDefaultRemoteContentRequestShortInterval
|| __DATA_CONST.__const _EMUserDefaultSearchFlagColors
|| __DATA_CONST.__const _EMUserDefaultSharingFromSafariUI
|| __DATA_CONST.__const _EMUserDefaultShowDebugInfo
|| __DATA_CONST.__const _EMUserDefaultSkipRequestingAllRemoteContent
|| __DATA_CONST.__const _EMUserDefaultUseLegacyMessageIDHashFormat
|| __DATA_CONST.__const _EMUserDefaultsDidChangeNotification
|| __DATA_CONST.__const _EMUserDefaultsMailAppGroup
|| __DATA_CONST.__const _EMVIPsDidChangeNotification
|| __DATA_CONST.__const _EMVIPsRemovedKey
|| __DATA_CONST.__const _EMVIPsUpdatedKey
|| __DATA_CONST.__const _kEMSearchableIndexAttachmentIdentifierPrefix
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMAccount
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMAccountRepository
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMActivityObjectID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMActivityRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMBlockedSenderManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMCachingContactStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMClientState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMCollection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMCollectionItemIDStateCapturer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMContentRepresentation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMContentRequestOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMDaemonBooster
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMDaemonInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMDaemonInterfaceRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMDeliveryAccount
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMFetchController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMInteractionLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMInternalFeaturePreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMListUnsubscribeCommand
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMListUnsubscribeCommandMessageHeaders
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMListUnsubscribeDetector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMailDropMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMailbox
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMailboxChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMailboxCollection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMailboxObjectID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMailboxRepository
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMailboxScope
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageCollectionItemID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageConversationFlagChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageDeliveryResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageFlagChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageFlagChangeAllAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageHeaders
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageList
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageListChangeObserverHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageListItemChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageListItemPredicates
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageObjectID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageRepository
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageSigner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageTransferAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMMessageTransferAllAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMObject
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMObjectID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMOutgoingMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMOutgoingMessageRepository
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMPersistenceLayoutManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMReceivingAccount
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMRemoteConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMRemoteConnectionRecoveryAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMRepository
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMRepositoryObject
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMSearchableIndex
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMSearchableIndexQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMSearchableIndexQueryExpression
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMSecurityInformation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMSmartMailbox
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMStatusUpdateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMThread
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMThreadCollectionItemID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMThreadObjectID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMThreadScope
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMUbiquitouslyPersistedDictionary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMUndoIndividualAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMUndoMessageAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMUserProfileProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMVIP
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_EMVIPManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__EMAttachmentContentItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__EMMessageRepositoryMailboxPredictionObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__EMSpecialMailboxScope
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__EMUserActionState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMAccount
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMAccountRepository
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMActivityObjectID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMActivityRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMBlockedSenderManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMCachingContactStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMClientState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMCollection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMCollectionItemIDStateCapturer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMContentRepresentation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMContentRequestOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMDaemonBooster
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMDaemonInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMDaemonInterfaceRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMDeliveryAccount
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMFetchController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMInteractionLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMInternalFeaturePreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMListUnsubscribeCommand
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMListUnsubscribeCommandMessageHeaders
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMListUnsubscribeDetector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMailDropMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMailbox
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMailboxChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMailboxCollection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMailboxObjectID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMailboxRepository
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMailboxScope
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageCollectionItemID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageConversationFlagChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageDeliveryResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageFlagChangeAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageFlagChangeAllAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageHeaders
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageList
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageListChangeObserverHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageListItemChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageListItemPredicates
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageObjectID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageRepository
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageSigner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageTransferAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMMessageTransferAllAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMObject
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMObjectID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMOutgoingMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMOutgoingMessageRepository
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMPersistenceLayoutManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMReceivingAccount
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMRemoteConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMRemoteConnectionRecoveryAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMRepository
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMRepositoryObject
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMSearchableIndex
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMSearchableIndexQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMSearchableIndexQueryExpression
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMSecurityInformation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMSmartMailbox
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMStatusUpdateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMThread
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMThreadCollectionItemID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMThreadObjectID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMThreadScope
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMUbiquitouslyPersistedDictionary
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMUndoIndividualAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMUndoMessageAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMUserProfileProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMVIP
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_EMVIPManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__EMAttachmentContentItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__EMMessageRepositoryMailboxPredictionObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__EMSpecialMailboxScope
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__EMUserActionState
|| __TEXT.__const _EMCollectionLoadBatchSize
|| __TEXT.__const _EMCollectionLoadFirstBatchSize
|| __TEXT.__const _EMDatabaseIDUndefined
|| __TEXT.__const _EMFetchTypeAlternateAccountSettings
|| __TEXT.__const _EMFetchTypeBackground
|| __TEXT.__const _EMFetchTypeCompacting
|| __TEXT.__const _EMFetchTypeForced
|| __TEXT.__const _EMFetchTypeForcedAll
|| __TEXT.__const _EMFetchTypeLaunch
|| __TEXT.__const _EMFetchTypeLaunchSuspended
|| __TEXT.__const _EMFetchTypeMallUpdate
|| __TEXT.__const _EMFetchTypePasswordEntered
|| __TEXT.__const _EMFetchTypePowernap
|| __TEXT.__const _EMFetchTypePush
|| __TEXT.__const _EMFetchTypeResume
|| __TEXT.__const _EMFetchTypeResumeWhileSuspendedEventsOnly
|| __TEXT.__const _EMFetchTypeScheduled
|| __TEXT.__const _EMFetchTypeStandardAccountList
|| __TEXT.__const _EMFetchTypeStandardMailbox
|| __TEXT.__const _EMFetchTypeUnlock
|| __TEXT.__const _EMFetchTypeUserInitiatedMailbox
|| __TEXT.__const _EMInvalidCount
|| __TEXT.__const _EMTopHitsQueryDefaultLimit
|| __TEXT.__text _EMContentRepresentationLog
|| __TEXT.__text _EMInteractionLoggerShouldLog
|| __TEXT.__text _combineSets
|| __TEXT.__text _hasMailboxPredicates
|| __TEXT.__text _isExclusionPredicate
|| __TEXT.__text _mailboxObjectIDForConstantValue
|| __TEXT.__text _mailboxScopeForComparisonPredicate
|| __TEXT.__text _mailboxScopeForCompoundPredicate
|| __TEXT.__text _mailboxScopeForMailboxObjectIDValue
|| __TEXT.__text _mailboxScopeForMailboxTypeValue
|| __TEXT.__text _mailboxScopeForMessageObjectIDConstantValue
|| __TEXT.__text _mailboxScopeForNotPredicate
|| __TEXT.__text _mailboxScopeForPredicate
|| __TEXT.__text _mailboxScopeForThreadWithPredicate
|| __TEXT.__text _normalizedForNotCompoundPredicate
|| __TEXT.__text _predicateFromComparisonPredicateIgnoringKeyPaths
|| __TEXT.__text _predicateFromCompoundPredicateIgnoringKeyPaths
|| __TEXT.__text _predicateFromPredicateIgnoringKeyPaths
|| __TEXT.__text _resolveSetsForAnd
|| __TEXT.__text _resolveSetsForOr
|| __TEXT.__text _simplifyPredicate
__ Accounts: _OBJC_CLASS_$_ACAccountCredential
__ CommunicationsFilter: _CMFBlockListAddItemForAllServices
__ CommunicationsFilter: _CMFBlockListCopyItemsForAllServicesService
__ CommunicationsFilter: _CMFBlockListRemoveItemFromAllServices
__ CommunicationsFilter: _CMFBlockListUpdatedNotification
__ CommunicationsFilter: _CMFItemCopyEmailAddress
__ CommunicationsFilter: _CMFItemCreateWithEmailAddress
__ CommunicationsFilter: _CMFItemGetType
__ CommunicationsFilter: _CreateCMFItemFromString
__ Contacts: _CNContactEmailAddressesKey
__ Contacts: _CNContactStoreDidChangeNotification
__ Contacts: _CNLabelOther
__ Contacts: _OBJC_CLASS_$_CNContact
__ Contacts: _OBJC_CLASS_$_CNContactFormatter
__ Contacts: _OBJC_CLASS_$_CNContactStore
__ Contacts: _OBJC_CLASS_$_CNLabeledValue
__ Contacts: _OBJC_CLASS_$_CNMutableContact
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreGraphics: _CGDataProviderCreateWithCFData
__ CoreGraphics: _CGDataProviderRelease
__ CoreGraphics: _CGPDFDocumentCreateWithProvider
__ CoreGraphics: _CGPDFDocumentGetNumberOfPages
__ CoreGraphics: _CGPDFDocumentGetPage
__ CoreGraphics: _CGPDFDocumentIsUnlocked
__ CoreGraphics: _CGPDFDocumentRelease
__ CoreServices: _kUTTypeEmailMessage
__ CoreServices: _kUTTypePDF
__ CoreSpotlight: _CSSearchQueryErrorDomain
__ CoreSpotlight: _MDItemAuthorEmailAddresses
__ CoreSpotlight: _MDItemAuthors
__ CoreSpotlight: _MDItemRecipientEmailAddresses
__ CoreSpotlight: _MDItemRecipients
__ CoreSpotlight: _MDItemRelatedUniqueIdentifier
__ CoreSpotlight: _MDItemSubject
__ CoreSpotlight: _MDItemTextContent
__ CoreSpotlight: _MDMailConversationID
__ CoreSpotlight: _MDMailDateReceived
__ CoreSpotlight: _OBJC_CLASS_$_CSSearchQuery
__ CoreSpotlight: _OBJC_CLASS_$_CSSearchQueryContext
__ CoreSpotlight: _OBJC_CLASS_$_CSSearchableItem
__ CoreSpotlight: _OBJC_CLASS_$_CSTopHitSearchQuery
__ EmailAddressing: _OBJC_CLASS_$_EAEmailAddressLists
__ EmailAddressing: _OBJC_CLASS_$_EAEmailAddressParser
__ EmailAddressing: _OBJC_CLASS_$_EAEmailAddressSet
__ EmailCore: _ECAllowNetworkActivityButLog
__ EmailCore: _ECMailAccountsDidChangeNotification
__ EmailCore: _ECMessageHeaderKeyAutoSubmitted
__ EmailCore: _ECMessageHeaderKeyBCC
__ EmailCore: _ECMessageHeaderKeyCC
__ EmailCore: _ECMessageHeaderKeyDate
__ EmailCore: _ECMessageHeaderKeyListID
__ EmailCore: _ECMessageHeaderKeySubject
__ EmailCore: _ECMessageHeaderKeyTo
__ EmailCore: _ECMessageHeaderKeyXAppleUnsubscribe
__ EmailCore: _ECNSStringFromMailboxMailboxType
__ EmailCore: _OBJC_CLASS_$_ECEmailAddress
__ EmailCore: _OBJC_CLASS_$_ECEmailAddressFormatter
__ EmailCore: _OBJC_CLASS_$_ECMessageFlagChange
__ EmailCore: _OBJC_CLASS_$_ECMessageFlags
__ EmailCore: _OBJC_CLASS_$_ECSecureMIMETrustEvaluation
__ EmailCore: _OBJC_CLASS_$_ECSubject
__ EmailFoundation: _EFArraysAreEqual
__ EmailFoundation: _EFDecodeCacheableInstance
__ EmailFoundation: _EFDefaultsKeyLogWithPII
__ EmailFoundation: _EFEmailMessageUTType
__ EmailFoundation: _EFEncodeCacheableInstance
__ EmailFoundation: _EFIsNotNull
__ EmailFoundation: _EFIsSeedBuild
__ EmailFoundation: _EFLogRegisterStateCaptureBlock
__ EmailFoundation: _EFMurmurHash3Mix
__ EmailFoundation: _EFNonContainerizedHomeDirectory
__ EmailFoundation: _EFObjectsAreEqual
__ EmailFoundation: _EFProtectedDataAvailable
__ EmailFoundation: _EFRegisterContentProtectionObserver
__ EmailFoundation: _EFSetsAreEqual
__ EmailFoundation: _EFStringWithInt64
__ EmailFoundation: _EFUnregisterContentProtectionObserver
__ EmailFoundation: _OBJC_CLASS_$_EFCancelationToken
__ EmailFoundation: _OBJC_CLASS_$_EFDevice
__ EmailFoundation: _OBJC_CLASS_$_EFFuture
__ EmailFoundation: _OBJC_CLASS_$_EFInvocationToken
__ EmailFoundation: _OBJC_CLASS_$_EFLazyCache
__ EmailFoundation: _OBJC_CLASS_$_EFObservable
__ EmailFoundation: _OBJC_CLASS_$_EFPair
__ EmailFoundation: _OBJC_CLASS_$_EFPrivacy
__ EmailFoundation: _OBJC_CLASS_$_EFPromise
__ EmailFoundation: _OBJC_CLASS_$_EFQuery
__ EmailFoundation: _OBJC_CLASS_$_EFSandboxedURLWrapper
__ EmailFoundation: _OBJC_CLASS_$_EFScheduler
__ EmailFoundation: _OBJC_CLASS_$_EFSearchableIndexObjectPropertyMapper
__ EmailFoundation: _OBJC_CLASS_$_EFSortDescriptor
__ EmailFoundation: _OBJC_CLASS_$_EFStringHash
__ EmailFoundation: __EFLocalizedString
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSFileProtectionComplete
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSStringFromBOOL
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromProtocol
__ Foundation: _NSStringFromSelector
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSUbiquitousKeyValueStoreChangeReasonKey
__ Foundation: _NSUbiquitousKeyValueStoreChangedKeysKey
__ Foundation: _NSUbiquitousKeyValueStoreDidChangeExternallyNotification
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSByteCountFormatter
__ Foundation: _OBJC_CLASS_$_NSComparisonPredicate
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExpression
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUbiquitousKeyValueStore
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Security: _SecCertificateCopyCommonNames
__ Security: _SecCertificateCopyRFC822Names
__ Security: _SecTrustDeserialize
__ Security: _SecTrustGetCertificateAtIndex
__ Security: _SecTrustSerialize
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_async_and_wait
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_EHTYPE_id
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: __protocol_getMethodTypeEncoding
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _protocol_conformsToProtocol
__ libobjc.A.dylib: _protocol_getMethodDescription
_EMAttachmentContentItem : EMObject <EFPubliclyDescribable, EMMutableContentItem, NSSecureCoding>
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *availableRepresentations
 @property  BOOL isAvailableLocally
 @property  NSString *displayName
 @property  NSString *contentID
 @property  NSString *UTType
 @property  BOOL isSinglePagePDF
 @property  long long dataTransferByteCount
 @property  long long storageByteCount
 @property  EMMailDropMetadata *mailDropMetadata
 @property  int exchangeEventUID
 @property  @? loaderBlock
 @property  EMObjectID *objectID

  // class methods
  +[_EMAttachmentContentItem supportsSecureCoding]

  // instance methods
  -[_EMAttachmentContentItem UTType]
  -[_EMAttachmentContentItem ef_publicDescription]
  -[_EMAttachmentContentItem init]
  -[_EMAttachmentContentItem setUTType:]
  -[_EMAttachmentContentItem .cxx_destruct]
  -[_EMAttachmentContentItem setIsAvailableLocally:]
  -[_EMAttachmentContentItem setDataTransferByteCount:]
  -[_EMAttachmentContentItem setStorageByteCount:]
  -[_EMAttachmentContentItem setExchangeEventUID:]
  -[_EMAttachmentContentItem setAvailableRepresentations:]
  -[_EMAttachmentContentItem exchangeEventUID]
  -[_EMAttachmentContentItem setLoaderBlock:]
  -[_EMAttachmentContentItem encodeWithCoder:]
  -[_EMAttachmentContentItem requestRepresentationWithOptions:completionHandler:]
  -[_EMAttachmentContentItem setContentID:]
  -[_EMAttachmentContentItem setDisplayName:]
  -[_EMAttachmentContentItem mailDropMetadata]
  -[_EMAttachmentContentItem setMailDropMetadata:]
  -[_EMAttachmentContentItem contentID]
  -[_EMAttachmentContentItem displayName]
  -[_EMAttachmentContentItem initWithCoder:]
  -[_EMAttachmentContentItem availableRepresentations]
  -[_EMAttachmentContentItem isAvailableLocally]
  -[_EMAttachmentContentItem isSinglePagePDF]
  -[_EMAttachmentContentItem dataTransferByteCount]
  -[_EMAttachmentContentItem storageByteCount]
  -[_EMAttachmentContentItem requestRepresentationWithOptions:delegate:completionHandler:]
  -[_EMAttachmentContentItem loaderBlock]
  -[_EMAttachmentContentItem _isSinglePagePDFWithContentURL:]
  -[_EMAttachmentContentItem setIsSinglePagePDF:]


EMAccount : EMObject
 @property  NSString *name
 @property  NSString *username
 @property  NSString *hostname
 @property  BOOL primaryiCloudAccount

  // class methods
  +[EMAccount supportsSecureCoding]
  +[EMAccount predicateForReceivingAccounts]
  +[EMAccount predicateForDeliveryAccounts]
  +[EMAccount sortDescriptorForNameAscending:]

  // instance methods
  -[EMAccount hostname]
  -[EMAccount ef_publicDescription]
  -[EMAccount username]
  -[EMAccount .cxx_destruct]
  -[EMAccount name]
  -[EMAccount isEqual:]
  -[EMAccount isPrimaryiCloudAccount]


EMAccountAuthentication : NSObject /usr/lib/libSystem.B.dylib
 @property  <EDAccountFactory> *accountFactory

  // class methods
  +[EMAccountAuthentication log]

  // instance methods
  -[EMAccountAuthentication .cxx_destruct]
  -[EMAccountAuthentication accountFactory]
  -[EMAccountAuthentication _updateDeliveryAccountCredentialIfNecessaryForAccountWithAccount:]
  -[EMAccountAuthentication _updateDeliveryAccountCredentialIfNecessaryForReceivingAccount:]
  -[EMAccountAuthentication _shouldAutoUpdateDeliveryAccount:forChangedReceivingAccount:]
  -[EMAccountAuthentication _hostnamesHaveSameTopLevelDomain:deliveryAccount:]
  -[EMAccountAuthentication initWithAccountFactory:]
  -[EMAccountAuthentication updateDeliveryAccountCredentialIfNecessaryForAccountWithSystemAccount:]
  -[EMAccountAuthentication updateDeliveryAccountCredentialIfNecessaryForAccountWithIdentifier:]


EMAccountRepository : EMRepository <EFLoggable, EMAccountRepositoryObserver>
 @property  NSArray *allAccounts
 @property  NSArray *receivingAccounts
 @property  NSArray *deliveryAccounts
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMAccountRepository remoteInterface]
  +[EMAccountRepository log]

  // instance methods
  -[EMAccountRepository initInternal]
  -[EMAccountRepository deliveryAccounts]
  -[EMAccountRepository accountForIdentifier:]
  -[EMAccountRepository initWithRemoteConnection:]
  -[EMAccountRepository accountsAdded:]
  -[EMAccountRepository allAccounts]
  -[EMAccountRepository didEndObserving]
  -[EMAccountRepository dealloc]
  -[EMAccountRepository didBeginObserving]
  -[EMAccountRepository .cxx_destruct]
  -[EMAccountRepository _currentAccountsByObjectIDMap]
  -[EMAccountRepository requestAccounts]
  -[EMAccountRepository accountsRemoved:]
  -[EMAccountRepository _fetchAccountsAndObserveChanges]
  -[EMAccountRepository receivingAccounts]
  -[EMAccountRepository accountsChanged:]
  -[EMAccountRepository _postAccountChangedNotification]
  -[EMAccountRepository accountForAccountIdentifier:]


EMActivityObjectID : EMObjectID
  // class methods
  +[EMActivityObjectID supportsSecureCoding]

  // instance methods
  -[EMActivityObjectID init]
  -[EMActivityObjectID encodeWithCoder:]
  -[EMActivityObjectID initWithCoder:]


EMActivity : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, NSSecureCoding>
 @property  NSDictionary *userInfo
 @property  NSProgress *progress
 @property  double fractionCompleted
 @property  EMActivityObjectID *objectID
 @property  BOOL needsPersistentHistory
 @property  long long activityType
 @property  NSDate *started
 @property  NSDate *finished
 @property  NSString *localizedDescription
 @property  NSError *error
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMActivity supportsSecureCoding]
  +[EMActivity log]
  +[EMActivity keyPathsForValuesAffectingLocalizedDescription]

  // instance methods
  -[EMActivity finishWithError:]
  -[EMActivity finished]
  -[EMActivity activityType]
  -[EMActivity started]
  -[EMActivity initWithActivityType:userInfo:]
  -[EMActivity isEqualToActivityWithType:userInfo:]
  -[EMActivity setCompletedCount:totalCount:]
  -[EMActivity needsPersistentHistory]
  -[EMActivity setUserInfo:]
  -[EMActivity setFractionCompleted:]
  -[EMActivity dealloc]
  -[EMActivity .cxx_destruct]
  -[EMActivity setUserInfoObject:forKey:]
  -[EMActivity encodeWithCoder:]
  -[EMActivity error]
  -[EMActivity userInfo]
  -[EMActivity fractionCompleted]
  -[EMActivity setProgress:]
  -[EMActivity localizedDescription]
  -[EMActivity progress]
  -[EMActivity objectID]
  -[EMActivity initWithCoder:]
  -[EMActivity _observeProgress]
  -[EMActivity _localizedDescriptionForFetchState:]


_EMActivityRegistryObserverWrapper : NSObject /usr/lib/libSystem.B.dylib <EFCancelable, EMActivityObserver_xpc>
 @property  EMRemoteConnection *connection
 @property  EMActivityRegistry *registry
 @property  <EMActivityObserver> *observer
 @property  NSArray *activities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_EMActivityRegistryObserverWrapper _resetWithCancelable:]
  -[_EMActivityRegistryObserverWrapper _startObservingIfNecessary]
  -[_EMActivityRegistryObserverWrapper activityWithObjectID:]
  -[_EMActivityRegistryObserverWrapper startedActivity:]
  -[_EMActivityRegistryObserverWrapper activityWithID:finishedWithError:]
  -[_EMActivityRegistryObserverWrapper activities]
  -[_EMActivityRegistryObserverWrapper activityWithID:setUserInfoObject:forKey:]
  -[_EMActivityRegistryObserverWrapper activityWithID:setCompletedCount:totalCount:]
  -[_EMActivityRegistryObserverWrapper removedActivityWithID:]
  -[_EMActivityRegistryObserverWrapper initWithConnection:registry:observer:]
  -[_EMActivityRegistryObserverWrapper dealloc]
  -[_EMActivityRegistryObserverWrapper .cxx_destruct]
  -[_EMActivityRegistryObserverWrapper setActivities:]
  -[_EMActivityRegistryObserverWrapper setConnection:]
  -[_EMActivityRegistryObserverWrapper setRegistry:]
  -[_EMActivityRegistryObserverWrapper cancel]
  -[_EMActivityRegistryObserverWrapper setObserver:]
  -[_EMActivityRegistryObserverWrapper registry]
  -[_EMActivityRegistryObserverWrapper _recover]
  -[_EMActivityRegistryObserverWrapper connection]
  -[_EMActivityRegistryObserverWrapper observer]


EMActivityRegistry : NSObject /usr/lib/libSystem.B.dylib
 @property  EMRemoteConnection *connection

  // class methods
  +[EMActivityRegistry remoteInterface]
  +[EMActivityRegistry observerInterface]

  // instance methods
  -[EMActivityRegistry initWithRemoteConnection:]
  -[EMActivityRegistry .cxx_destruct]
  -[EMActivityRegistry registerActivityObserver:]
  -[EMActivityRegistry setConnection:]
  -[EMActivityRegistry connection]


EMBlockedSenderManager : NSObject /usr/lib/libSystem.B.dylib <EMBlockedSenderReader>
 @property  NSSet *blockedSenderCache
 @property  <EFScheduler> *resetScheduler
 @property  NSObject<OS_dispatch_queue> *cacheQueue
 @property  BOOL moveToTrashEnabled
 @property  BOOL blockedSenderEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMBlockedSenderManager shouldPromptForBlockedSender]
  +[EMBlockedSenderManager setPromptForBlockedSender:]
  +[EMBlockedSenderManager shouldMoveToTrashForMailboxType:]

  // instance methods
  -[EMBlockedSenderManager test_tearDown]
  -[EMBlockedSenderManager _blockedSenderListDidChange:]
  -[EMBlockedSenderManager init]
  -[EMBlockedSenderManager _blockContact:block:]
  -[EMBlockedSenderManager dealloc]
  -[EMBlockedSenderManager unblockContact:]
  -[EMBlockedSenderManager resetScheduler]
  -[EMBlockedSenderManager .cxx_destruct]
  -[EMBlockedSenderManager _unblockPhoneNumber:]
  -[EMBlockedSenderManager isContactBlocked:]
  -[EMBlockedSenderManager blockContact:]
  -[EMBlockedSenderManager blockEmailAddress:]
  -[EMBlockedSenderManager unblockTokenAddress:]
  -[EMBlockedSenderManager blockedSenderCache]
  -[EMBlockedSenderManager cacheQueue]
  -[EMBlockedSenderManager isTokenAddressIsBlocked:]
  -[EMBlockedSenderManager unblockEmailAddress:]
  -[EMBlockedSenderManager setBlockedSenderCache:]
  -[EMBlockedSenderManager _resetBlockedSenderCache]
  -[EMBlockedSenderManager blockEmailAddresses:]
  -[EMBlockedSenderManager setResetScheduler:]
  -[EMBlockedSenderManager areAnyEmailAddressesBlocked:]
  -[EMBlockedSenderManager unblockEmailAddresses:]
  -[EMBlockedSenderManager setCacheQueue:]
  -[EMBlockedSenderManager blockTokenAddress:]
  -[EMBlockedSenderManager _postBlockedSenderListDidChangeNotificationBasedOnBlockedSenderEnabledState]
  -[EMBlockedSenderManager setBlockedSenderEnabled:]
  -[EMBlockedSenderManager isMoveToTrashEnabled]
  -[EMBlockedSenderManager _removeObserversIfNeeded]
  -[EMBlockedSenderManager isBlockedSenderEnabled]
  -[EMBlockedSenderManager _blockPhoneNumber:]
  -[EMBlockedSenderManager isEmailAddressBlocked:]
  -[EMBlockedSenderManager setMoveToTrashEnabled:]
  -[EMBlockedSenderManager _isEmailAddressBlocked:]


EMCachingContactStore : NSObject /usr/lib/libSystem.B.dylib
 @property  EFLazyCache *displayNameCache
 @property  CNContactStore *cnStore

  // instance methods
  -[EMCachingContactStore initWithStore:]
  -[EMCachingContactStore init]
  -[EMCachingContactStore _invalidateDisplayNameCache]
  -[EMCachingContactStore displayNameForEmailAddress:abbreviated:]
  -[EMCachingContactStore displayNameCache]
  -[EMCachingContactStore _fetchDisplayNameForEmailAddress:abbreviated:]
  -[EMCachingContactStore displayNameForEmailAddress:]
  -[EMCachingContactStore setDisplayNameCache:]
  -[EMCachingContactStore .cxx_destruct]
  -[EMCachingContactStore cnStore]


EMCertificateTrustInformation : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, NSSecureCoding>
 @property  ^{__SecTrust=} trust
 @property  unsigned long certificateType
 @property  ECSecureMIMETrustEvaluation *trustEvaluation
 @property  NSString *sender
 @property  BOOL _forceNetworkAccessAllowed
 @property  <ECEmailAddressConvertible> *emailAddress
 @property  NSString *commonName
 @property  ^{__SecCertificate=} certificate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMCertificateTrustInformation supportsSecureCoding]
  +[EMCertificateTrustInformation log]

  // instance methods
  -[EMCertificateTrustInformation trust]
  -[EMCertificateTrustInformation evaluateTrustWithOptions:]
  -[EMCertificateTrustInformation reevaluateTrustWithNetworkAccessAllowed]
  -[EMCertificateTrustInformation setTrustEvaluation:]
  -[EMCertificateTrustInformation _forceNetworkAccessAllowed]
  -[EMCertificateTrustInformation set_forceNetworkAccessAllowed:]
  -[EMCertificateTrustInformation sender]
  -[EMCertificateTrustInformation certificateType]
  -[EMCertificateTrustInformation setSender:]
  -[EMCertificateTrustInformation dealloc]
  -[EMCertificateTrustInformation .cxx_destruct]
  -[EMCertificateTrustInformation commonName]
  -[EMCertificateTrustInformation encodeWithCoder:]
  -[EMCertificateTrustInformation certificate]
  -[EMCertificateTrustInformation emailAddress]
  -[EMCertificateTrustInformation setCertificateType:]
  -[EMCertificateTrustInformation trustEvaluation]
  -[EMCertificateTrustInformation initWithTrust:certificateType:sender:]
  -[EMCertificateTrustInformation setTrust:]
  -[EMCertificateTrustInformation initWithCoder:]


EMClientState : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  EMRemoteConnection *connection
 @property  BOOL isForeground
 @property  EFObservable<EFObserver> *foregroundObservable
 @property  BOOL isRunningTests
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMClientState remoteInterface]
  +[EMClientState log]

  // instance methods
  -[EMClientState initWithRemoteConnection:]
  -[EMClientState setIsForeground:]
  -[EMClientState .cxx_destruct]
  -[EMClientState setIsRunningTests:]
  -[EMClientState setConnection:]
  -[EMClientState daemonBoosterWithDescription:]
  -[EMClientState setCurrentlyVisibleMailboxes:]
  -[EMClientState _handleApplicationDidEnterBackground]
  -[EMClientState setForegroundObservable:]
  -[EMClientState isRunningTests]
  -[EMClientState _handleApplicationWillEnterForeground]
  -[EMClientState isForeground]
  -[EMClientState connection]
  -[EMClientState foregroundObservable]
  -[EMClientState _performAsyncUpdate:]


EMCollection : EMRepositoryObject <EFLoggable, EFSignpostable>
 @property  <EFCancelable> *cancelationToken
 @property  NSHashTable *changeObservers
 @property  <EFScheduler> *queryScheduler
 @property  <EFScheduler> *observerScheduler
 @property  EFQuery *query
 @property  EFFuture *allItemIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long signpostID

  // class methods
  +[EMCollection supportsSecureCoding]
  +[EMCollection log]
  +[EMCollection signpostLog]

  // instance methods
  -[EMCollection signpostID]
  -[EMCollection enumerateObserversWithBlock:]
  -[EMCollection cancelationToken]
  -[EMCollection _commonInitWithQuery:]
  -[EMCollection _firstExistingItemIDForItemID:inReverse:]
  -[EMCollection _iterateItemIDsStartingAtItemID:inReverse:includeStartingItem:withBlock:]
  -[EMCollection firstExistingItemIDAfterItemID:]
  -[EMCollection firstExistingItemIDBeforeItemID:]
  -[EMCollection _performQueryIfNeeded]
  -[EMCollection _cancelQuery]
  -[EMCollection _performQuery]
  -[EMCollection notifyChangeObserverAboutStockedItemIDs:]
  -[EMCollection isRecovering]
  -[EMCollection insertItemIDs:before:]
  -[EMCollection insertItemIDs:after:]
  -[EMCollection removeItemIDs:]
  -[EMCollection notifyChangeObserversAboutAddedItemIDs:before:extraInfo:]
  -[EMCollection _filterAndTransformObjectIDs:before:existingObjectID:batchBlock:]
  -[EMCollection notifyChangeObserversAboutAddedItemIDs:after:extraInfo:]
  -[EMCollection _itemIDsForObjectIDs:]
  -[EMCollection itemIDForObjectID:]
  -[EMCollection notifyChangeObserversAboutChangesByItemIDs:]
  -[EMCollection finishRecovery]
  -[EMCollection _cancelQueryIfNeeded]
  -[EMCollection objectIDBelongsToCollection:]
  -[EMCollection containsItemID:includeRecovery:]
  -[EMCollection notifyChangeObserver:stockedItemIDs:]
  -[EMCollection objectIDForItemID:]
  -[EMCollection iterateItemIDsStartingAtItemID:inReverse:withBlock:]
  -[EMCollection queryDidStartRecovery]
  -[EMCollection queryMatchedAddedObjectIDs:before:extraInfo:]
  -[EMCollection queryMatchedAddedObjectIDs:after:extraInfo:]
  -[EMCollection queryMatchedMovedObjectIDs:before:]
  -[EMCollection queryMatchedMovedObjectIDs:after:]
  -[EMCollection queryMatchedChangesByObjectIDs:]
  -[EMCollection queryAnticipatesDeletedObjectIDs:]
  -[EMCollection queryMatchedDeletedObjectIDs:]
  -[EMCollection queryDidFinishInitialLoad]
  -[EMCollection queryDidFinishRemoteSearch]
  -[EMCollection observerContainsObjectID:]
  -[EMCollection queryReplacedObjectID:withNewObjectID:]
  -[EMCollection dealloc]
  -[EMCollection .cxx_destruct]
  -[EMCollection query]
  -[EMCollection stopObserving:]
  -[EMCollection encodeWithCoder:]
  -[EMCollection beginObserving:]
  -[EMCollection initWithObjectID:query:]
  -[EMCollection initWithQuery:repository:]
  -[EMCollection setChangeObservers:]
  -[EMCollection observerScheduler]
  -[EMCollection initWithCoder:]
  -[EMCollection allItemIDs]
  -[EMCollection changeObservers]
  -[EMCollection queryScheduler]
  -[EMCollection setCancelationToken:]


EMCollectionItemIDStateCapturer : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_dispatch_queue> *stateCaptureQueue
 @property  <EFCancelable> *stateCaptureCancelable

  // instance methods
  -[EMCollectionItemIDStateCapturer stateCaptureCancelable]
  -[EMCollectionItemIDStateCapturer initWithTitle:delegate:]
  -[EMCollectionItemIDStateCapturer stateCaptureQueue]
  -[EMCollectionItemIDStateCapturer dealloc]
  -[EMCollectionItemIDStateCapturer .cxx_destruct]


EMContentRepresentation : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, EFPubliclyDescribable>
 @property  EFSandboxedURLWrapper *urlWrapper
 @property  <EMContentItem> *contentItem
 @property  <_EMDistantContentRepresentation> *distantContentRepresentation
 @property  NSURL *publicMessageURL
 @property  NSArray *replyToList
 @property  EMMessage *contentMessage
 @property  NSArray *relatedContentItems
 @property  EMSecurityInformation *securityInformation
 @property  CSSearchableItem *searchableItem
 @property  EMListUnsubscribeCommand *unsubscribeCommand
 @property  BOOL hasMoreContent
 @property  long long remainingByteCount
 @property  long long transportType
 @property  EMMessageHeaders *requestedHeaders
 @property  @? requestMoreContentBlock
 @property  @? listUnsubscribeBlock
 @property  NSURL *contentURL
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMContentRepresentation supportsSecureCoding]
  +[EMContentRepresentation temporaryURLWithData:clientIdentifier:preferredFilename:pathExtension:cleanupInvocable:error:]
  +[EMContentRepresentation distantContentRepresentationInterface]
  +[EMContentRepresentation contentRequestDelegateInterface]

  // instance methods
  -[EMContentRepresentation ef_publicDescription]
  -[EMContentRepresentation setContentItem:]
  -[EMContentRepresentation performUnsubscribeAction:completion:]
  -[EMContentRepresentation _initWithRelatedItems:securityInformation:]
  -[EMContentRepresentation _initWithSandboxedURLWrapper:relatedItems:securityInformation:]
  -[EMContentRepresentation contentMessage]
  -[EMContentRepresentation remainingByteCount]
  -[EMContentRepresentation replyToList]
  -[EMContentRepresentation requestedHeaders]
  -[EMContentRepresentation distantContentRepresentation]
  -[EMContentRepresentation setDistantContentRepresentation:]
  -[EMContentRepresentation _distantLoaderBlockForContentItem:]
  -[EMContentRepresentation setSecurityInformation:]
  -[EMContentRepresentation listUnsubscribeBlock]
  -[EMContentRepresentation initWithData:clientIdentifier:extension:relatedItems:securityInformation:]
  -[EMContentRepresentation requestAdditionalContentWithCompletion:]
  -[EMContentRepresentation setContentMessage:]
  -[EMContentRepresentation contentURL]
  -[EMContentRepresentation setSearchableItem:]
  -[EMContentRepresentation dealloc]
  -[EMContentRepresentation .cxx_destruct]
  -[EMContentRepresentation relatedContentItems]
  -[EMContentRepresentation setRelatedContentItems:]
  -[EMContentRepresentation publicMessageURL]
  -[EMContentRepresentation setPublicMessageURL:]
  -[EMContentRepresentation urlWrapper]
  -[EMContentRepresentation setReplyToList:]
  -[EMContentRepresentation initWithData:clientIdentifier:preferredFilename:extension:relatedItems:securityInformation:]
  -[EMContentRepresentation setRemainingByteCount:]
  -[EMContentRepresentation requestMoreContentBlock]
  -[EMContentRepresentation setHasMoreContent:]
  -[EMContentRepresentation initWithContentURL:relatedItems:securityInformation:]
  -[EMContentRepresentation mergeUpdatedRepresentation:]
  -[EMContentRepresentation setRequestMoreContentBlock:]
  -[EMContentRepresentation unsubscribeCommand]
  -[EMContentRepresentation setListUnsubscribeBlock:]
  -[EMContentRepresentation setUnsubscribeCommand:]
  -[EMContentRepresentation setRequestedHeaders:]
  -[EMContentRepresentation initWithContentMessage:data:clientIdentifier:preferredFilename:extension:]
  -[EMContentRepresentation encodeWithCoder:]
  -[EMContentRepresentation hasMoreContent]
  -[EMContentRepresentation securityInformation]
  -[EMContentRepresentation transportType]
  -[EMContentRepresentation setUrlWrapper:]
  -[EMContentRepresentation contentItem]
  -[EMContentRepresentation invalidate]
  -[EMContentRepresentation searchableItem]
  -[EMContentRepresentation setTransportType:]
  -[EMContentRepresentation addInvalidationHandler:]
  -[EMContentRepresentation initWithCoder:]


EMContentRequestOptions : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying, EMContentRequestOptionsBuilder>
 @property  NSString *requestedRepresentation
 @property  long long networkUsage
 @property  BOOL includeSuggestionItems
 @property  NSArray *requestedHeaderKeys
 @property  BOOL requestAllHeaders

  // class methods
  +[EMContentRequestOptions supportsSecureCoding]
  +[EMContentRequestOptions optionsWithRequestedRepresentationType:networkUsage:includeSuggestionItems:]
  +[EMContentRequestOptions optionsWithRequestedRepresentationType:networkUsage:]

  // instance methods
  -[EMContentRequestOptions copyWithZone:]
  -[EMContentRequestOptions init]
  -[EMContentRequestOptions setRequestedRepresentation:]
  -[EMContentRequestOptions setIncludeSuggestionItems:]
  -[EMContentRequestOptions setRequestAllHeaders:]
  -[EMContentRequestOptions setRequestedHeaderKeys:]
  -[EMContentRequestOptions networkUsage]
  -[EMContentRequestOptions .cxx_destruct]
  -[EMContentRequestOptions requestedRepresentation]
  -[EMContentRequestOptions includeSuggestionItems]
  -[EMContentRequestOptions requestedHeaderKeys]
  -[EMContentRequestOptions requestAllHeaders]
  -[EMContentRequestOptions encodeWithCoder:]
  -[EMContentRequestOptions setNetworkUsage:]
  -[EMContentRequestOptions copyWithBuilder:]
  -[EMContentRequestOptions initWithBuilder:]
  -[EMContentRequestOptions initWithCoder:]


EMCreateMailboxChangeAction : EMMailboxChangeAction
 @property  NSString *name

  // class methods
  +[EMCreateMailboxChangeAction supportsSecureCoding]

  // instance methods
  -[EMCreateMailboxChangeAction initWithMailboxName:parentMailboxID:]
  -[EMCreateMailboxChangeAction initWithMailboxName:parentMailbox:]
  -[EMCreateMailboxChangeAction .cxx_destruct]
  -[EMCreateMailboxChangeAction name]
  -[EMCreateMailboxChangeAction encodeWithCoder:]
  -[EMCreateMailboxChangeAction initWithCoder:]


EMDaemonBooster : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  EMRemoteConnection *connection
 @property  NSString *loggingDescription
 @property  NSProgress *remoteBoost
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMDaemonBooster log]

  // instance methods
  -[EMDaemonBooster initWithConnection:description:]
  -[EMDaemonBooster _newRemoteBoost]
  -[EMDaemonBooster remoteBoost]
  -[EMDaemonBooster setRemoteBoost:]
  -[EMDaemonBooster setLoggingDescription:]
  -[EMDaemonBooster dealloc]
  -[EMDaemonBooster .cxx_destruct]
  -[EMDaemonBooster setConnection:]
  -[EMDaemonBooster connection]
  -[EMDaemonBooster loggingDescription]


EMDaemonInterface : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  NSXPCConnection *test_connection
 @property  EMSearchableIndex *searchableIndex
 @property  <NSXPCProxyCreating> *proxyCreator
 @property  EMMessageRepository *messageRepository
 @property  EMOutgoingMessageRepository *outgoingMessageRepository
 @property  EMMailboxRepository *mailboxRepository
 @property  EMAccountRepository *accountRepository
 @property  EMFetchController *fetchController
 @property  EMClientState *clientState
 @property  EMInteractionLogger *interactionLogger
 @property  EMDonationController *donationController
 @property  EMActivityRegistry *activityRegistry
 @property  <EMVIPManager> *vipManager
 @property  EMBlockedSenderManager *blockedSenderManager
 @property  BOOL allowsBackgroundResume
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMDaemonInterface log]
  +[EMDaemonInterface setCachedMailAppIsInstalled:]
  +[EMDaemonInterface remoteObjectInterface]
  +[EMDaemonInterface cachedMailAppIsInstalled]
  +[EMDaemonInterface _mailUninstalledFile]

  // instance methods
  -[EMDaemonInterface searchableIndex]
  -[EMDaemonInterface initWithListenerEndpoint:]
  -[EMDaemonInterface test_tearDown]
  -[EMDaemonInterface vipManager]
  -[EMDaemonInterface mailboxRepository]
  -[EMDaemonInterface initForTesting]
  -[EMDaemonInterface connectionForProtocol:]
  -[EMDaemonInterface resetProtocolConnections]
  -[EMDaemonInterface _connectionForProtocol:error:]
  -[EMDaemonInterface init]
  -[EMDaemonInterface handleDaemonAvailability]
  -[EMDaemonInterface proxyCreator]
  -[EMDaemonInterface _initByAdoptingConnection:]
  -[EMDaemonInterface setAllowsBackgroundResume:]
  -[EMDaemonInterface dealloc]
  -[EMDaemonInterface .cxx_destruct]
  -[EMDaemonInterface interactionLogger]
  -[EMDaemonInterface clientState]
  -[EMDaemonInterface _invalidate]
  -[EMDaemonInterface messageRepository]
  -[EMDaemonInterface outgoingMessageRepository]
  -[EMDaemonInterface test_connection]
  -[EMDaemonInterface blockedSenderManager]
  -[EMDaemonInterface donationController]
  -[EMDaemonInterface launchDaemon]
  -[EMDaemonInterface activityRegistry]
  -[EMDaemonInterface accountRepository]
  -[EMDaemonInterface fetchController]
  -[EMDaemonInterface allowsBackgroundResume]


EMDaemonInterfaceRequest : NSObject /usr/lib/libSystem.B.dylib <EFSignpostable>
 @property  unsigned long signpostID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMDaemonInterfaceRequest systemScopeSignpostLog]
  +[EMDaemonInterfaceRequest uniqueRequestID]
  +[EMDaemonInterfaceRequest signpostLog]

  // instance methods
  -[EMDaemonInterfaceRequest signpostID]


EMDeleteMailboxChangeAction : EMMailboxChangeAction

EMDeliveryAccount : EMAccount <EMDeliveryAccountBuilder>
 @property  unsigned long maximumMessageBytes
 @property  NSString *username
 @property  NSString *hostname
 @property  BOOL primaryiCloudAccount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMDeliveryAccount supportsSecureCoding]

  // instance methods
  -[EMDeliveryAccount setUsername:]
  -[EMDeliveryAccount hostname]
  -[EMDeliveryAccount username]
  -[EMDeliveryAccount .cxx_destruct]
  -[EMDeliveryAccount name]
  -[EMDeliveryAccount setPrimaryiCloudAccount:]
  -[EMDeliveryAccount _commonInitName:hostname:builder:]
  -[EMDeliveryAccount initWithObjectID:name:hostname:builder:]
  -[EMDeliveryAccount setHostname:]
  -[EMDeliveryAccount encodeWithCoder:]
  -[EMDeliveryAccount initWithCoder:]
  -[EMDeliveryAccount maximumMessageBytes]
  -[EMDeliveryAccount setMaximumMessageBytes:]
  -[EMDeliveryAccount isPrimaryiCloudAccount]


EMFetchController : NSObject /usr/lib/libSystem.B.dylib
 @property  EMRemoteConnection *connection

  // class methods
  +[EMFetchController remoteInterface]

  // instance methods
  -[EMFetchController performFetchOfType:]
  -[EMFetchController initWithRemoteConnection:]
  -[EMFetchController .cxx_destruct]
  -[EMFetchController diagnosticInformation]
  -[EMFetchController setConnection:]
  -[EMFetchController performFetchOfType:accounts:]
  -[EMFetchController setCurrentSuppressionContexts:suppressedContexts:]
  -[EMFetchController connection]
  -[EMFetchController performFetchOfType:mailboxes:]


_EMUserActionState : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDate *viewingStarted
 @property  EMMessageObjectID *messageObjectID
 @property  BOOL scrolledToEnd
 @property  EMObjectID *key
 @property  NSString *cellStyle
 @property  NSString *messageListType
 @property  long long row
 @property  EMMailboxScope *mailboxScope

  // instance methods
  -[_EMUserActionState mailboxScope]
  -[_EMUserActionState row]
  -[_EMUserActionState .cxx_destruct]
  -[_EMUserActionState viewingStarted]
  -[_EMUserActionState setViewingStarted:]
  -[_EMUserActionState messageObjectID]
  -[_EMUserActionState setMessageObjectID:]
  -[_EMUserActionState scrolledToEnd]
  -[_EMUserActionState setScrolledToEnd:]
  -[_EMUserActionState messageListType]
  -[_EMUserActionState setMessageListType:]
  -[_EMUserActionState setMailboxScope:]
  -[_EMUserActionState setRow:]
  -[_EMUserActionState setKey:]
  -[_EMUserActionState key]
  -[_EMUserActionState cellStyle]
  -[_EMUserActionState setCellStyle:]


EMInteractionLogger : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  EMRemoteConnection *connection
 @property  NSObject<OS_dispatch_queue> *stateTrackingQueue
 @property  NSMutableDictionary *viewedMessages
 @property  NSMutableDictionary *messageListMessages
 @property  {_NSRange=QQ} messageListVisibleRows
 @property  BOOL appLaunched
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMInteractionLogger remoteInterface]
  +[EMInteractionLogger log]

  // instance methods
  -[EMInteractionLogger initWithRemoteConnection:]
  -[EMInteractionLogger viewingEndedForMessage:]
  -[EMInteractionLogger appLaunched]
  -[EMInteractionLogger messageListDisplayEndedForAllListItems]
  -[EMInteractionLogger _viewingEndedForAllMessages]
  -[EMInteractionLogger setViewedMessages:]
  -[EMInteractionLogger .cxx_destruct]
  -[EMInteractionLogger _stateForObjectID:container:]
  -[EMInteractionLogger composeReplyStartedForMessage:]
  -[EMInteractionLogger messageListDisplayEndedForListItem:cellStyle:]
  -[EMInteractionLogger _xpcLogEvent:date:data:]
  -[EMInteractionLogger messageListMessages]
  -[EMInteractionLogger setStateTrackingQueue:]
  -[EMInteractionLogger viewedMessages]
  -[EMInteractionLogger _xpcLogEvent:date:messageID:data:]
  -[EMInteractionLogger messageListDisplayStartedForListItem:messageListType:row:cellStyle:]
  -[EMInteractionLogger _appDidEnterBackground]
  -[EMInteractionLogger setConnection:]
  -[EMInteractionLogger composeFowardStartedForMessage:]
  -[EMInteractionLogger _appWillEnterForeground]
  -[EMInteractionLogger messageListVisibleRows]
  -[EMInteractionLogger scrolledToEndOfMessage:]
  -[EMInteractionLogger _logMessageListDisplayStartedMessageID:now:type:row:cellStyle:]
  -[EMInteractionLogger viewingStartedForMessage:messageListScope:]
  -[EMInteractionLogger setMessageListMessages:]
  -[EMInteractionLogger messageListTypeForMailboxes:]
  -[EMInteractionLogger clickedLinkInMessage:scheme:]
  -[EMInteractionLogger connection]
  -[EMInteractionLogger stateTrackingQueue]
  -[EMInteractionLogger applicationLaunched]
  -[EMInteractionLogger _logMessageListDisplayEndedForState:now:]
  -[EMInteractionLogger setMessageListVisibleRows:]
  -[EMInteractionLogger setAppLaunched:]
  -[EMInteractionLogger _rescopedMessageObjectID:]


EMInternalFeaturePreferences : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMInternalFeaturePreferences log]
  +[EMInternalFeaturePreferences _featureEnabled:]
  +[EMInternalFeaturePreferences setFeature:enabled:]
  +[EMInternalFeaturePreferences _setUserDefaultEnabled:forKey:]
  +[EMInternalFeaturePreferences defaultForFeature:]
  +[EMInternalFeaturePreferences _hasUserDefaultValueForKey:expectedValue:]
  +[EMInternalFeaturePreferences _registerForDefaultChanges]
  +[EMInternalFeaturePreferences observeValueForKeyPath:ofObject:change:context:]
  +[EMInternalFeaturePreferences observeChangesForFeature:usingBlock:]
  +[EMInternalFeaturePreferences _userDefaultEnabledForKey:defaultValue:]
  +[EMInternalFeaturePreferences featureEnabled:]


EMListUnsubscribeCommand : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *address
 @property  NSString *subject
 @property  NSString *body
 @property  <EDReceivingAccount> *account
 @property  EMListUnsubscribeCommandMessageHeaders *originalMessageHeaders

  // class methods
  +[EMListUnsubscribeCommand supportsSecureCoding]
  +[EMListUnsubscribeCommand accountFinderBlock]
  +[EMListUnsubscribeCommand setAccountFinderBlock:]

  // instance methods
  -[EMListUnsubscribeCommand originalMessageHeaders]
  -[EMListUnsubscribeCommand init]
  -[EMListUnsubscribeCommand _accountWithIdentifier:]
  -[EMListUnsubscribeCommand address]
  -[EMListUnsubscribeCommand account]
  -[EMListUnsubscribeCommand .cxx_destruct]
  -[EMListUnsubscribeCommand _commonInitWithAddress:subject:body:]
  -[EMListUnsubscribeCommand initWithAddress:subject:body:account:headers:]
  -[EMListUnsubscribeCommand encodeWithCoder:]
  -[EMListUnsubscribeCommand subject]
  -[EMListUnsubscribeCommand body]
  -[EMListUnsubscribeCommand isEqual:]
  -[EMListUnsubscribeCommand initWithCoder:]


EMListUnsubscribeCommandMessageHeaders : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *firstRecipient
 @property  NSString *subject
 @property  NSString *firstSenderAddress
 @property  NSString *listID

  // class methods
  +[EMListUnsubscribeCommandMessageHeaders supportsSecureCoding]

  // instance methods
  -[EMListUnsubscribeCommandMessageHeaders firstRecipient]
  -[EMListUnsubscribeCommandMessageHeaders listID]
  -[EMListUnsubscribeCommandMessageHeaders .cxx_destruct]
  -[EMListUnsubscribeCommandMessageHeaders initWithHeaders:]
  -[EMListUnsubscribeCommandMessageHeaders firstSenderAddress]
  -[EMListUnsubscribeCommandMessageHeaders encodeWithCoder:]
  -[EMListUnsubscribeCommandMessageHeaders subject]
  -[EMListUnsubscribeCommandMessageHeaders initWithCoder:]


EMListUnsubscribeDetector : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[EMListUnsubscribeDetector receivingAccountFromMessage:]

  // instance methods
  -[EMListUnsubscribeDetector init]
  -[EMListUnsubscribeDetector .cxx_destruct]
  -[EMListUnsubscribeDetector commandForMessage:]
  -[EMListUnsubscribeDetector _shouldIgnoreMessageWithHeaders:]
  -[EMListUnsubscribeDetector _persistentKeyForHeaders:]
  -[EMListUnsubscribeDetector _normalizedAddress:]
  -[EMListUnsubscribeDetector _listIDString:]
  -[EMListUnsubscribeDetector _senderString:]
  -[EMListUnsubscribeDetector acceptCommand:]
  -[EMListUnsubscribeDetector ignoreCommand:]
  -[EMListUnsubscribeDetector removeAllPersistedCommands]
  -[EMListUnsubscribeDetector initWithMutableDictionary:]


EMListUnsubscribeMessageGenerator : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[EMListUnsubscribeMessageGenerator dateString]
  +[EMListUnsubscribeMessageGenerator messageHeadersWithCommand:headersFactory:]
  +[EMListUnsubscribeMessageGenerator localizedBodyForCommand:]
  +[EMListUnsubscribeMessageGenerator senderForCommand:]


EMListUnsubscribeSuggestion : NSObject /usr/lib/libSystem.B.dylib <SGSuggestion, SGSuggestionCategory>
 @property  EMListUnsubscribeCommand *listUnsubscribeCommand
 @property  SGSuggestionPresenter *suggestionPresenter
 @property  <SGSuggestion> *suggestion
 @property  <SGSuggestionDelegate> *suggestionDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMListUnsubscribeSuggestion suggestionPrimaryActionString]
  +[EMListUnsubscribeSuggestion suggestionDismissActionTitle]
  +[EMListUnsubscribeSuggestion unsubscribeTitleAlertString]
  +[EMListUnsubscribeSuggestion unsubscribeMessageAlertString]

  // instance methods
  -[EMListUnsubscribeSuggestion unsubscribe]
  -[EMListUnsubscribeSuggestion ignore]
  -[EMListUnsubscribeSuggestion .cxx_destruct]
  -[EMListUnsubscribeSuggestion suggestion]
  -[EMListUnsubscribeSuggestion listUnsubscribeCommand]
  -[EMListUnsubscribeSuggestion suggestionCategoryTitle]
  -[EMListUnsubscribeSuggestion suggestionTitle]
  -[EMListUnsubscribeSuggestion suggestionPresenter]
  -[EMListUnsubscribeSuggestion suggestionCategory]
  -[EMListUnsubscribeSuggestion suggestionPrimaryAction]
  -[EMListUnsubscribeSuggestion suggestionDismissAction]
  -[EMListUnsubscribeSuggestion suggestionCategoryId]
  -[EMListUnsubscribeSuggestion suggestionCategoryImage]
  -[EMListUnsubscribeSuggestion suggestionCategoryTitleForItems:]
  -[EMListUnsubscribeSuggestion suggestionCategorySubtitleForItems:]
  -[EMListUnsubscribeSuggestion suggestionCategoryLocalizedCountOfItems:]
  -[EMListUnsubscribeSuggestion suggestionComparator]
  -[EMListUnsubscribeSuggestion setListUnsubscribeCommand:]
  -[EMListUnsubscribeSuggestion setSuggestionPresenter:]
  -[EMListUnsubscribeSuggestion isEqual:]
  -[EMListUnsubscribeSuggestion suggestionDelegate]
  -[EMListUnsubscribeSuggestion setSuggestionDelegate:]


EMMailbox : EMRepositoryObject <EMMailboxBuilder, NSSecureCoding, EFPubliclyDescribable>
 @property  EMMailbox *parent
 @property  EMMailboxObjectID *parentID
 @property  EMMailboxCollection *children
 @property  NSString *name
 @property  long long type
 @property  BOOL canContainMessages
 @property  BOOL canArchive
 @property  EMMailboxRepository *repository
 @property  EMReceivingAccount *account
 @property  EMObjectID *accountIdentifier
 @property  NSString *redactedName
 @property  BOOL isTopLevelMailbox
 @property  BOOL isSmartMailbox
 @property  BOOL isInboxMailbox
 @property  BOOL isOutgoingMailbox
 @property  BOOL isSentMailbox
 @property  BOOL supportsSelectAll
 @property  BOOL shouldArchiveByDefault
 @property  BOOL descriptionUsesRealName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *ef_publicDescription

  // class methods
  +[EMMailbox supportsSecureCoding]
  +[EMMailbox typeIsValidTransferDestination:]
  +[EMMailbox deleteMovesToTrashForMailboxes:]
  +[EMMailbox supportsArchivingForMailboxes:]
  +[EMMailbox shouldArchiveByDefaultForMailboxes:]
  +[EMMailbox supportsSelectAllForMailboxes:]
  +[EMMailbox _isOutgoingMailboxType:]
  +[EMMailbox predicateForMailboxAccount:topLevelOnly:]
  +[EMMailbox predicateForMailboxChildren:]
  +[EMMailbox predicateForTopLevelMailboxes]
  +[EMMailbox predicateForMailboxType:]
  +[EMMailbox _predicateForSmartMailboxes:]
  +[EMMailbox predicateForMailboxName:]
  +[EMMailbox predicateForMailboxAccount:]
  +[EMMailbox predicateForPrimaryMailboxWithAccount:]
  +[EMMailbox predicateForSmartMailboxes]
  +[EMMailbox predicateForRegularMailboxes]
  +[EMMailbox sortDescriptorForNameAscending:]

  // instance methods
  -[EMMailbox parent]
  -[EMMailbox copyWithZone:]
  -[EMMailbox parentID]
  -[EMMailbox ef_publicDescription]
  -[EMMailbox setParent:]
  -[EMMailbox canContainMessages]
  -[EMMailbox setCanContainMessages:]
  -[EMMailbox initWithObjectID:repository:name:accountIdentifier:type:builder:]
  -[EMMailbox children]
  -[EMMailbox accountIdentifier]
  -[EMMailbox canArchive]
  -[EMMailbox account]
  -[EMMailbox setType:]
  -[EMMailbox .cxx_destruct]
  -[EMMailbox name]
  -[EMMailbox isSmartMailbox]
  -[EMMailbox supportsSelectAll]
  -[EMMailbox isInboxMailbox]
  -[EMMailbox _commonInitName:accountIdentifier:type:canContainMessages:children:parentID:builder:]
  -[EMMailbox _canArchiveForMailboxType:]
  -[EMMailbox descriptionUsesRealName]
  -[EMMailbox _shouldArchiveByDefault]
  -[EMMailbox setDescriptionUsesRealName:]
  -[EMMailbox initWithObjectID:name:accountIdentifier:type:builder:]
  -[EMMailbox setParentFromMailboxes:]
  -[EMMailbox isTopLevelMailbox]
  -[EMMailbox isOutgoingMailbox]
  -[EMMailbox isSentMailbox]
  -[EMMailbox redactedName]
  -[EMMailbox setCanArchive:]
  -[EMMailbox encodeWithCoder:]
  -[EMMailbox type]
  -[EMMailbox setChildren:]
  -[EMMailbox setRepository:]
  -[EMMailbox initWithObjectID:]
  -[EMMailbox setName:]
  -[EMMailbox shouldArchiveByDefault]
  -[EMMailbox initWithCoder:]
  -[EMMailbox repository]


EMMailboxChangeAction : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  EMMailboxObjectID *mailboxObjectID

  // class methods
  +[EMMailboxChangeAction supportsSecureCoding]

  // instance methods
  -[EMMailboxChangeAction initWithMailboxObjectID:]
  -[EMMailboxChangeAction .cxx_destruct]
  -[EMMailboxChangeAction mailboxObjectID]
  -[EMMailboxChangeAction encodeWithCoder:]
  -[EMMailboxChangeAction initWithMailbox:]
  -[EMMailboxChangeAction initWithCoder:]


EMMailboxCollection : EMCollection <NSSecureCoding>
 @property  EMMailboxRepository *repository

  // class methods
  +[EMMailboxCollection supportsSecureCoding]

  // instance methods
  -[EMMailboxCollection encodeWithCoder:]
  -[EMMailboxCollection initWithMailbox:repository:]
  -[EMMailboxCollection initWithObjectID:query:]
  -[EMMailboxCollection setRepository:]
  -[EMMailboxCollection initWithAccount:topLevelOnly:repository:]
  -[EMMailboxCollection initWithAccount:topLevelOnly:]
  -[EMMailboxCollection initWithMailbox:]
  -[EMMailboxCollection initWithCoder:]
  -[EMMailboxCollection repository]


EMMailboxObjectID : EMObjectID <EFPubliclyDescribable>
 @property  NSURL *url
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMMailboxObjectID supportsSecureCoding]

  // instance methods
  -[EMMailboxObjectID copyWithZone:]
  -[EMMailboxObjectID ef_publicDescription]
  -[EMMailboxObjectID init]
  -[EMMailboxObjectID url]
  -[EMMailboxObjectID initWithURL:]
  -[EMMailboxObjectID .cxx_destruct]
  -[EMMailboxObjectID encodeWithCoder:]
  -[EMMailboxObjectID isEqual:]
  -[EMMailboxObjectID initWithCoder:]


EMMailboxRepository : EMRepository <EFLoggable, EMMailboxChangeObserver, EMMailboxTypeResolver>
 @property  EMRemoteConnection *connection
 @property  <EFCancelable> *registrationCancelable
 @property  NSOrderedSet *mailboxesIfAvailable
 @property  EFPromise *mailboxesPromise
 @property  NSMapTable *observerMap
 @property  EMAccountRepository *accountRepository
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *allMailboxObjectIDs

  // class methods
  +[EMMailboxRepository remoteInterface]
  +[EMMailboxRepository log]

  // instance methods
  -[EMMailboxRepository initInternal]
  -[EMMailboxRepository initForTesting]
  -[EMMailboxRepository _restartObservingMailboxChangesIfNecessary]
  -[EMMailboxRepository _filterIDsFromMailbox:withQuery:]
  -[EMMailboxRepository mailboxesIfAvailable]
  -[EMMailboxRepository setRegistrationCancelable:]
  -[EMMailboxRepository _mailboxesFuture]
  -[EMMailboxRepository dealloc]
  -[EMMailboxRepository mailboxesPromise]
  -[EMMailboxRepository .cxx_destruct]
  -[EMMailboxRepository mailboxForObjectID:]
  -[EMMailboxRepository mailboxesForObjectIDs:]
  -[EMMailboxRepository setConnection:]
  -[EMMailboxRepository _prepareMailboxes:]
  -[EMMailboxRepository initWithRemoteConnection:accountRepository:]
  -[EMMailboxRepository allMailboxObjectIDs]
  -[EMMailboxRepository remoteMailboxObjectIDsForMailboxType:]
  -[EMMailboxRepository initForTestingWithAccountRepository:]
  -[EMMailboxRepository observerMap]
  -[EMMailboxRepository registrationCancelable]
  -[EMMailboxRepository remoteMailboxTypeForMailboxObjectID:]
  -[EMMailboxRepository setObserverMap:]
  -[EMMailboxRepository performMailboxChangeAction:]
  -[EMMailboxRepository remoteAllMailboxObjectIDs]
  -[EMMailboxRepository performQuery:withObserver:]
  -[EMMailboxRepository performQuery:completionHandler:]
  -[EMMailboxRepository mailboxObjectIDsForMailboxType:]
  -[EMMailboxRepository mailboxListChanged:]
  -[EMMailboxRepository connection]
  -[EMMailboxRepository _startObservingMailboxChangesIfNecessary]
  -[EMMailboxRepository _commonInitWithAccountRepository:]
  -[EMMailboxRepository accountRepository]
  -[EMMailboxRepository mailboxTypeForMailboxObjectID:]
  -[EMMailboxRepository refreshMailboxList]
  -[EMMailboxRepository setMailboxesPromise:]


EMMailboxScope : NSObject /usr/lib/libSystem.B.dylib <EFCacheable, EFPubliclyDescribable, NSCopying, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *mailboxTypes
 @property  BOOL excludeTypes
 @property  NSSet *mailboxObjectIDs
 @property  BOOL excludeMailboxes
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMMailboxScope supportsSecureCoding]
  +[EMMailboxScope mailboxScopeForMailboxObjectIDs:forExclusion:]
  +[EMMailboxScope allMailboxesScope]
  +[EMMailboxScope mailboxScopeForMailboxTypes:forExclusion:]
  +[EMMailboxScope mailboxScopeForMailboxType:forExclusion:]
  +[EMMailboxScope noMailboxesScope]

  // instance methods
  -[EMMailboxScope copyWithZone:]
  -[EMMailboxScope ef_publicDescription]
  -[EMMailboxScope _mailboxTypesDescription]
  -[EMMailboxScope init]
  -[EMMailboxScope cachedSelf]
  -[EMMailboxScope excludeMailboxes]
  -[EMMailboxScope _mailboxObjectIDsDescriptionIsDebug:]
  -[EMMailboxScope _mailboxObjectIDsForTypesWithMailboxTypeResolver:]
  -[EMMailboxScope .cxx_destruct]
  -[EMMailboxScope _calculateHash]
  -[EMMailboxScope mailboxTypes]
  -[EMMailboxScope encodeWithCoder:]
  -[EMMailboxScope mailboxScopeByRemovingMailboxes:]
  -[EMMailboxScope initWithMailboxTypes:excludeTypes:mailboxObjectIDs:excludeMailboxes:]
  -[EMMailboxScope _scopeContainsMailboxWithObjectID:mailboxTypeBlock:]
  -[EMMailboxScope excludeTypes]
  -[EMMailboxScope isEqual:]
  -[EMMailboxScope allMailboxObjectIDsWithMailboxTypeResolver:forExclusion:]
  -[EMMailboxScope scopeContainsMailbox:]
  -[EMMailboxScope initWithMailboxTypes:excludeTypes:mailboxObjectIDs:excludeMailboxes:cached:]
  -[EMMailboxScope mailboxScopeByAddingMailboxes:]
  -[EMMailboxScope mailboxObjectIDs]
  -[EMMailboxScope scopeContainsMailboxObjectID:mailboxTypeResolver:]
  -[EMMailboxScope initWithCoder:]


_EMSpecialMailboxScope : EMMailboxScope <EFCacheable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *identifier

  // class methods
  +[_EMSpecialMailboxScope supportsSecureCoding]

  // instance methods
  -[_EMSpecialMailboxScope ef_publicDescription]
  -[_EMSpecialMailboxScope cachedSelf]
  -[_EMSpecialMailboxScope excludeMailboxes]
  -[_EMSpecialMailboxScope .cxx_destruct]
  -[_EMSpecialMailboxScope mailboxTypes]
  -[_EMSpecialMailboxScope initWithIdentifier:]
  -[_EMSpecialMailboxScope encodeWithCoder:]
  -[_EMSpecialMailboxScope mailboxScopeByRemovingMailboxes:]
  -[_EMSpecialMailboxScope identifier]
  -[_EMSpecialMailboxScope excludeTypes]
  -[_EMSpecialMailboxScope isEqual:]
  -[_EMSpecialMailboxScope allMailboxObjectIDsWithMailboxTypeResolver:forExclusion:]
  -[_EMSpecialMailboxScope scopeContainsMailbox:]
  -[_EMSpecialMailboxScope mailboxScopeByAddingMailboxes:]
  -[_EMSpecialMailboxScope mailboxObjectIDs]
  -[_EMSpecialMailboxScope scopeContainsMailboxObjectID:mailboxTypeResolver:]
  -[_EMSpecialMailboxScope initWithCoder:]


EMMailDropMetadata : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSString *fileName
 @property  long long fileSize
 @property  NSString *mimeType
 @property  BOOL autoArchive
 @property  NSURL *directUrl
 @property  NSURL *wrappedUrl
 @property  NSDate *expiration
 @property  unsigned long flags
 @property  NSString *UUID
 @property  BOOL isInvalid

  // class methods
  +[EMMailDropMetadata supportsSecureCoding]
  +[EMMailDropMetadata mailDropMetadata]

  // instance methods
  -[EMMailDropMetadata copyWithZone:]
  -[EMMailDropMetadata isInvalid]
  -[EMMailDropMetadata fileName]
  -[EMMailDropMetadata setAutoArchive:]
  -[EMMailDropMetadata setWrappedUrl:]
  -[EMMailDropMetadata setDirectUrl:]
  -[EMMailDropMetadata setFileName:]
  -[EMMailDropMetadata setIsInvalid:]
  -[EMMailDropMetadata isBanner]
  -[EMMailDropMetadata setFlags:]
  -[EMMailDropMetadata wrappedUrl]
  -[EMMailDropMetadata .cxx_destruct]
  -[EMMailDropMetadata mimeType]
  -[EMMailDropMetadata autoArchive]
  -[EMMailDropMetadata isBannerWithMultiple]
  -[EMMailDropMetadata encodeWithCoder:]
  -[EMMailDropMetadata fileSize]
  -[EMMailDropMetadata isExpired]
  -[EMMailDropMetadata setFileSize:]
  -[EMMailDropMetadata setUUID:]
  -[EMMailDropMetadata UUID]
  -[EMMailDropMetadata isEqual:]
  -[EMMailDropMetadata directUrl]
  -[EMMailDropMetadata directUrlString]
  -[EMMailDropMetadata isPhotoArchive]
  -[EMMailDropMetadata wrappedUrlString]
  -[EMMailDropMetadata flags]
  -[EMMailDropMetadata expiration]
  -[EMMailDropMetadata merge:]
  -[EMMailDropMetadata setExpiration:]
  -[EMMailDropMetadata setMimeType:]
  -[EMMailDropMetadata initWithCoder:]


EMMailToURLComponents : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *toRecipients
 @property  NSArray *ccRecipients
 @property  NSArray *bccRecipients
 @property  NSString *subject
 @property  NSString *body

  // class methods
  +[EMMailToURLComponents componentsWithURL:]

  // instance methods
  -[EMMailToURLComponents init]
  -[EMMailToURLComponents initWithURL:]
  -[EMMailToURLComponents .cxx_destruct]
  -[EMMailToURLComponents subject]
  -[EMMailToURLComponents toRecipients]
  -[EMMailToURLComponents ccRecipients]
  -[EMMailToURLComponents bccRecipients]
  -[EMMailToURLComponents _decomposeURL:]
  -[EMMailToURLComponents body]


EMMessage : EMRepositoryObject <EFLoggable, EMMessageBuilder, EMExtendedContentItem, EMMutableMessageListItem, EMMessageListItem, EMContentItem>
 @property  EMMessageRepository *repository
 @property  <ECEmailAddressConvertible> *senderAddress
 @property  NSArray *bccList
 @property  NSUUID *documentID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *availableRepresentations
 @property  BOOL isAvailableLocally
 @property  NSString *displayName
 @property  NSString *contentID
 @property  NSString *UTType
 @property  BOOL isSinglePagePDF
 @property  long long dataTransferByteCount
 @property  long long storageByteCount
 @property  EMMailDropMetadata *mailDropMetadata
 @property  int exchangeEventUID
 @property  @? loaderBlock
 @property  EMObjectID *objectID
 @property  NSString *ef_publicDescription
 @property  NSDate *date
 @property  ECSubject *subject
 @property  NSString *summary
 @property  NSArray *senderList
 @property  NSArray *toList
 @property  NSArray *ccList
 @property  BOOL isToMe
 @property  BOOL isCCMe
 @property  ECMessageFlags *flags
 @property  BOOL hasUnflagged
 @property  NSIndexSet *flagColors
 @property  BOOL isVIP
 @property  BOOL isBlocked
 @property  BOOL hasAttachments
 @property  long long conversationNotificationLevel
 @property  unsigned long count
 @property  long long conversationID
 @property  NSArray *mailboxObjectIDs
 @property  NSArray *mailboxes
 @property  <EMCollectionItemID> *displayMessageItemID
 @property  long long _internalID
 @property  EMObjectID *displayMessageObjectID
 @property  EFFuture *displayMessage
 @property  BOOL deleteMovesToTrash
 @property  BOOL supportsArchiving
 @property  BOOL shouldArchiveByDefault
 @property  BOOL isEditable
 @property  <EMCollectionItemID> *itemID

  // class methods
  +[EMMessage UTType]
  +[EMMessage supportsSecureCoding]
  +[EMMessage isMessageURL:]
  +[EMMessage log]
  +[EMMessage predicateForMessageWithObjectID:]
  +[EMMessage predicateForExcludingMessageWithObjectID:]
  +[EMMessage messageIDHeaderFromMessageURL:]
  +[EMMessage predicateForExcludingMessagesWithObjectIDs:]
  +[EMMessage combinedFlagsForMessageListItems:forDisplay:]
  +[EMMessage _predicateForMessagesWithObjectIDConstantValue:operatorType:]
  +[EMMessage internalIDFromInternalMessageURL:]
  +[EMMessage isInternalMessageURL:]
  +[EMMessage predicateForMessageWithItemID:mailboxPredicate:mailboxTypeResolver:]
  +[EMMessage predicateForMessageWithInternalID:]
  +[EMMessage combinedFlagsForMessageListItems:]
  +[EMMessage combinedFlagsForMessageListItemFlags:forDisplay:]
  +[EMMessage predicateForMessagesWithObjectIDs:]
  +[EMMessage externalDataTypeIdentifiers]

  // instance methods
  -[EMMessage isEditable]
  -[EMMessage summary]
  -[EMMessage UTType]
  -[EMMessage isVIP]
  -[EMMessage setMailboxes:]
  -[EMMessage isBlocked]
  -[EMMessage ef_publicDescription]
  -[EMMessage bccList]
  -[EMMessage setCount:]
  -[EMMessage setUTType:]
  -[EMMessage toList]
  -[EMMessage setIsVIP:]
  -[EMMessage supportsArchiving]
  -[EMMessage setFlags:]
  -[EMMessage ccList]
  -[EMMessage hasAttachments]
  -[EMMessage displayMessage]
  -[EMMessage .cxx_destruct]
  -[EMMessage date]
  -[EMMessage isToMe]
  -[EMMessage isCCMe]
  -[EMMessage setSummary:]
  -[EMMessage displayMessageObjectID]
  -[EMMessage setDate:]
  -[EMMessage setIsAvailableLocally:]
  -[EMMessage setDataTransferByteCount:]
  -[EMMessage setStorageByteCount:]
  -[EMMessage setExchangeEventUID:]
  -[EMMessage setAvailableRepresentations:]
  -[EMMessage exchangeEventUID]
  -[EMMessage setLoaderBlock:]
  -[EMMessage setConversationID:]
  -[EMMessage encodeWithCoder:]
  -[EMMessage subject]
  -[EMMessage setSubject:]
  -[EMMessage senderList]
  -[EMMessage setHasAttachments:]
  -[EMMessage setConversationNotificationLevel:]
  -[EMMessage set_internalID:]
  -[EMMessage setIsToMe:]
  -[EMMessage setIsCCMe:]
  -[EMMessage initWithObjectID:builder:]
  -[EMMessage setToList:]
  -[EMMessage setSenderList:]
  -[EMMessage setCcList:]
  -[EMMessage setBccList:]
  -[EMMessage _commonInitWithBuilder:]
  -[EMMessage conversationNotificationLevel]
  -[EMMessage setMailboxObjectIDs:]
  -[EMMessage hasUnflagged]
  -[EMMessage flagColors]
  -[EMMessage displayMessageItemID]
  -[EMMessage deleteMovesToTrash]
  -[EMMessage setHasUnflagged:]
  -[EMMessage setFlagColors:]
  -[EMMessage requestRepresentationWithOptions:completionHandler:]
  -[EMMessage setDisplayMessageItemID:]
  -[EMMessage setCachedMetadata:forKey:]
  -[EMMessage cachedMetadataOfClass:forKey:]
  -[EMMessage isInManagedAccountWithSourceMailboxScope:]
  -[EMMessage _internalID]
  -[EMMessage setIsBlocked:]
  -[EMMessage setContentID:]
  -[EMMessage setDisplayName:]
  -[EMMessage itemID]
  -[EMMessage setRepository:]
  -[EMMessage count]
  -[EMMessage mailDropMetadata]
  -[EMMessage documentID]
  -[EMMessage setDocumentID:]
  -[EMMessage flags]
  -[EMMessage setMailDropMetadata:]
  -[EMMessage initWithObjectID:]
  -[EMMessage contentID]
  -[EMMessage mailboxObjectIDs]
  -[EMMessage conversationID]
  -[EMMessage displayName]
  -[EMMessage shouldArchiveByDefault]
  -[EMMessage mailboxes]
  -[EMMessage initWithCoder:]
  -[EMMessage availableRepresentations]
  -[EMMessage setSenderAddress:]
  -[EMMessage isAvailableLocally]
  -[EMMessage isSinglePagePDF]
  -[EMMessage dataTransferByteCount]
  -[EMMessage storageByteCount]
  -[EMMessage requestRepresentationWithOptions:delegate:completionHandler:]
  -[EMMessage loaderBlock]
  -[EMMessage setIsSinglePagePDF:]
  -[EMMessage repository]
  -[EMMessage senderAddress]


EMMessageChangeAction : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSArray *objectIDs
 @property  long long signpostType

  // class methods
  +[EMMessageChangeAction supportsSecureCoding]

  // instance methods
  -[EMMessageChangeAction objectIDs]
  -[EMMessageChangeAction .cxx_destruct]
  -[EMMessageChangeAction encodeWithCoder:]
  -[EMMessageChangeAction initWithMessageListItems:]
  -[EMMessageChangeAction signpostType]
  -[EMMessageChangeAction initWithCoder:]


EMMessageConversationFlagChangeAction : EMMessageChangeAction
 @property  long long conversationNotificationLevel
 @property  long long originalConversationNotificationLevel
 @property  long long conversationID

  // class methods
  +[EMMessageConversationFlagChangeAction supportsSecureCoding]

  // instance methods
  -[EMMessageConversationFlagChangeAction setConversationID:]
  -[EMMessageConversationFlagChangeAction encodeWithCoder:]
  -[EMMessageConversationFlagChangeAction conversationNotificationLevel]
  -[EMMessageConversationFlagChangeAction initWithConversationID:conversationNotificationLevel:originalConversationNotificationLevel:]
  -[EMMessageConversationFlagChangeAction initWithMessage:conversationNotificationLevel:]
  -[EMMessageConversationFlagChangeAction originalConversationNotificationLevel]
  -[EMMessageConversationFlagChangeAction conversationID]
  -[EMMessageConversationFlagChangeAction signpostType]
  -[EMMessageConversationFlagChangeAction initWithCoder:]


EMMessageDeleteAction : EMMessageChangeAction
  // class methods
  +[EMMessageDeleteAction supportsSecureCoding]

  // instance methods
  -[EMMessageDeleteAction signpostType]


EMMessageDeleteAllAction : EMMessageChangeAction
 @property  NSArray *mailboxObjectIDs

  // class methods
  +[EMMessageDeleteAllAction supportsSecureCoding]

  // instance methods
  -[EMMessageDeleteAllAction .cxx_destruct]
  -[EMMessageDeleteAllAction encodeWithCoder:]
  -[EMMessageDeleteAllAction initWithMailboxes:messageListItemsToExclude:]
  -[EMMessageDeleteAllAction mailboxObjectIDs]
  -[EMMessageDeleteAllAction signpostType]
  -[EMMessageDeleteAllAction initWithCoder:]


EMMessageFlagChangeAction : EMMessageChangeAction
 @property  ECMessageFlagChange *flagChange

  // class methods
  +[EMMessageFlagChangeAction supportsSecureCoding]

  // instance methods
  -[EMMessageFlagChangeAction .cxx_destruct]
  -[EMMessageFlagChangeAction encodeWithCoder:]
  -[EMMessageFlagChangeAction initWithMessageListItems:flagChange:]
  -[EMMessageFlagChangeAction flagChange]
  -[EMMessageFlagChangeAction signpostType]
  -[EMMessageFlagChangeAction initWithCoder:]


EMMessageFlagChangeAllAction : EMMessageFlagChangeAction
 @property  NSArray *mailboxObjectIDs

  // class methods
  +[EMMessageFlagChangeAllAction supportsSecureCoding]

  // instance methods
  -[EMMessageFlagChangeAllAction .cxx_destruct]
  -[EMMessageFlagChangeAllAction encodeWithCoder:]
  -[EMMessageFlagChangeAllAction initWithMailboxes:messageListItemsToExclude:flagChange:]
  -[EMMessageFlagChangeAllAction mailboxObjectIDs]
  -[EMMessageFlagChangeAllAction signpostType]
  -[EMMessageFlagChangeAllAction initWithCoder:]


EMMessageHeaders : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSDictionary *headers
 @property  NSArray *headerKeys

  // class methods
  +[EMMessageHeaders supportsSecureCoding]

  // instance methods
  -[EMMessageHeaders .cxx_destruct]
  -[EMMessageHeaders initWithHeaders:]
  -[EMMessageHeaders firstHeaderForKey:]
  -[EMMessageHeaders headersForKey:]
  -[EMMessageHeaders encodeWithCoder:]
  -[EMMessageHeaders headerKeys]
  -[EMMessageHeaders headers]
  -[EMMessageHeaders setHeaders:]
  -[EMMessageHeaders initWithCoder:]


EMMessageList : EMCollection <EFContentProtectionObserver, EFLoggable, EMCollectionChangeObserver, EMCollectionItemIDStateCapturerDelegate, EMMessageListQueryResultsObserver>
 @property  EMMessageRepository *repository
 @property  EMMailboxScope *mailboxScope
 @property  EMThreadScope *threadScope
 @property  EFLazyCache *cache
 @property  <EFScheduler> *observerScheduler
 @property  NSObject<OS_dispatch_queue> *contentProtectionQueue
 @property  EMMessageList *unfilteredMessageList
 @property  NSSet *recentlyCollapsedItemIDs
 @property  EMCollectionItemIDStateCapturer *stateCapturer
 @property  BOOL isThreaded
 @property  NSSet *expandedThreadItemIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  EMObjectID *objectID

  // class methods
  +[EMMessageList log]
  +[EMMessageList threadedMessageListForMailboxes:withRepository:shouldTrackOldestItems:]
  +[EMMessageList simpleMessageListForMailboxes:withRepository:shouldTrackOldestItems:]

  // instance methods
  -[EMMessageList ef_publicDescription]
  -[EMMessageList mailboxScope]
  -[EMMessageList removeItemIDs:]
  -[EMMessageList notifyChangeObserversAboutAddedItemIDs:before:extraInfo:]
  -[EMMessageList notifyChangeObserversAboutAddedItemIDs:after:extraInfo:]
  -[EMMessageList itemIDForObjectID:]
  -[EMMessageList notifyChangeObserversAboutChangesByItemIDs:]
  -[EMMessageList finishRecovery]
  -[EMMessageList objectIDBelongsToCollection:]
  -[EMMessageList notifyChangeObserver:stockedItemIDs:]
  -[EMMessageList objectIDForItemID:]
  -[EMMessageList queryMatchedMovedObjectIDs:before:]
  -[EMMessageList queryMatchedMovedObjectIDs:after:]
  -[EMMessageList queryMatchedChangesByObjectIDs:]
  -[EMMessageList labelForStateCapture]
  -[EMMessageList itemIDsForStateCaptureWithErrorString:]
  -[EMMessageList contentProtectionQueue]
  -[EMMessageList dealloc]
  -[EMMessageList threadScope]
  -[EMMessageList .cxx_destruct]
  -[EMMessageList cache]
  -[EMMessageList stopObserving:]
  -[EMMessageList initWithMailboxes:repository:targetClass:shouldTrackOldestItems:labelPrefix:]
  -[EMMessageList _commonInitWithRepository:]
  -[EMMessageList isThreaded]
  -[EMMessageList expandThread:]
  -[EMMessageList _unreadItemIDsFromExtraInfo:]
  -[EMMessageList setUnfilteredMessageList:]
  -[EMMessageList messageListItemsForItemIDs:]
  -[EMMessageList setRecentlyCollapsedItemIDs:]
  -[EMMessageList recentlyCollapsedItemIDs]
  -[EMMessageList messageListItemForItemID:ifAvailable:]
  -[EMMessageList messageListItemsForItemIDs:ifAvailable:]
  -[EMMessageList _availableMessageListItemsForItemIDs:]
  -[EMMessageList _attemptToFinishRetryingPromisesByItemID:]
  -[EMMessageList _threadIsExpanded:]
  -[EMMessageList _nextThreadItemIDAfterThreadItemID:]
  -[EMMessageList _expandedObjectIDsForObjectIDs:]
  -[EMMessageList collapseThread:]
  -[EMMessageList _threadIsExpandedForItemID:]
  -[EMMessageList itemIDOfMessageListItemWithDisplayMessage:]
  -[EMMessageList queryMatchedOldestItemsUpdatedForMailboxesObjectIDs:]
  -[EMMessageList initWithObjectID:query:repository:]
  -[EMMessageList filteredMessageListWithPredicate:]
  -[EMMessageList unfilteredMessageList]
  -[EMMessageList expandedThreadItemIDs]
  -[EMMessageList expandThreadsFromThreadItemIDs:]
  -[EMMessageList anyExpandedThreadContainsItemID:]
  -[EMMessageList recentlyCollapsedThreadContainsItemID:]
  -[EMMessageList clearRecentlyCollapsedThread]
  -[EMMessageList invalidateCacheForItemIDs:]
  -[EMMessageList collection:changedItemIDs:itemIDsWithCountChanges:]
  -[EMMessageList itemIDOfFirstMessageListItemMatchingPredicate:]
  -[EMMessageList stateCapturer]
  -[EMMessageList initWithQuery:repository:]
  -[EMMessageList messageListItemForItemID:]
  -[EMMessageList collection:addedItemIDs:before:]
  -[EMMessageList collection:addedItemIDs:after:]
  -[EMMessageList collection:movedItemIDs:before:]
  -[EMMessageList collection:movedItemIDs:after:]
  -[EMMessageList collection:changedItemIDs:]
  -[EMMessageList collection:deletedItemIDs:]
  -[EMMessageList collectionDidFinishInitialLoad:]
  -[EMMessageList collection:replacedExistingItemID:withNewItemID:]
  -[EMMessageList setRepository:]
  -[EMMessageList contentProtectionStateChanged:previousState:]
  -[EMMessageList observerScheduler]
  -[EMMessageList repository]


EMMessageListChangeObserverHelper : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[EMMessageListChangeObserverHelper collection:notifyChangeObserversAboutChangesByItemIDs:]
  +[EMMessageListChangeObserverHelper collection:notifyChangeObserversAboutChangedItemIDs:itemIDsWithCountChanges:]


EMMessageListItemChange : NSObject /usr/lib/libSystem.B.dylib <EFPubliclyDescribable, NSSecureCoding>
 @property  NSDate *date
 @property  <EMMessageListItemChangeSubject> *subject
 @property  <EMMessageListItemChangeSummary> *summary
 @property  NSArray *senderList
 @property  NSArray *toList
 @property  NSArray *ccList
 @property  BOOL isToMe
 @property  BOOL isCCMe
 @property  ECMessageFlags *flags
 @property  NSNumber *hasUnflagged
 @property  <EMMessageListItemChangeFlagColors> *flagColors
 @property  NSNumber *isVIP
 @property  NSNumber *isBlocked
 @property  NSNumber *hasAttachments
 @property  NSNumber *conversationNotificationLevel
 @property  NSNumber *count
 @property  NSNumber *conversationID
 @property  NSArray *mailboxObjectIDs
 @property  NSArray *mailboxes
 @property  <EMCollectionItemID> *displayMessageItemID
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMMessageListItemChange supportsSecureCoding]
  +[EMMessageListItemChange changeForKeyPaths:ofItem:]
  +[EMMessageListItemChange changesForKeyPaths:ofItems:]
  +[EMMessageListItemChange changeFrom:to:]

  // instance methods
  -[EMMessageListItemChange summary]
  -[EMMessageListItemChange isVIP]
  -[EMMessageListItemChange setMailboxes:]
  -[EMMessageListItemChange isBlocked]
  -[EMMessageListItemChange ef_publicDescription]
  -[EMMessageListItemChange setCount:]
  -[EMMessageListItemChange toList]
  -[EMMessageListItemChange setIsVIP:]
  -[EMMessageListItemChange setFlags:]
  -[EMMessageListItemChange ccList]
  -[EMMessageListItemChange hasAttachments]
  -[EMMessageListItemChange .cxx_destruct]
  -[EMMessageListItemChange date]
  -[EMMessageListItemChange isToMe]
  -[EMMessageListItemChange isCCMe]
  -[EMMessageListItemChange setSummary:]
  -[EMMessageListItemChange setDate:]
  -[EMMessageListItemChange setConversationID:]
  -[EMMessageListItemChange encodeWithCoder:]
  -[EMMessageListItemChange subject]
  -[EMMessageListItemChange setSubject:]
  -[EMMessageListItemChange senderList]
  -[EMMessageListItemChange setHasAttachments:]
  -[EMMessageListItemChange setConversationNotificationLevel:]
  -[EMMessageListItemChange setIsToMe:]
  -[EMMessageListItemChange setIsCCMe:]
  -[EMMessageListItemChange setToList:]
  -[EMMessageListItemChange setSenderList:]
  -[EMMessageListItemChange setCcList:]
  -[EMMessageListItemChange conversationNotificationLevel]
  -[EMMessageListItemChange setMailboxObjectIDs:]
  -[EMMessageListItemChange hasUnflagged]
  -[EMMessageListItemChange flagColors]
  -[EMMessageListItemChange displayMessageItemID]
  -[EMMessageListItemChange setHasUnflagged:]
  -[EMMessageListItemChange setFlagColors:]
  -[EMMessageListItemChange setDisplayMessageItemID:]
  -[EMMessageListItemChange setIsBlocked:]
  -[EMMessageListItemChange _descriptionForInternal:useDebugDescriptions:]
  -[EMMessageListItemChange _changeDescriptionsForInternal:useDebugDescriptions:]
  -[EMMessageListItemChange applyToMessageListItem:]
  -[EMMessageListItemChange addChange:]
  -[EMMessageListItemChange isEqual:]
  -[EMMessageListItemChange count]
  -[EMMessageListItemChange flags]
  -[EMMessageListItemChange mailboxObjectIDs]
  -[EMMessageListItemChange conversationID]
  -[EMMessageListItemChange mailboxes]
  -[EMMessageListItemChange initWithCoder:]


EMMessageListItemPredicates : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMMessageListItemPredicates predicateForMessagesInMailboxesWithTypes:]
  +[EMMessageListItemPredicates predicateForExcludingMessagesInMailboxesWithObjectIDs:]
  +[EMMessageListItemPredicates predicateForExcludingMessagesInMailboxesWithTypes:]
  +[EMMessageListItemPredicates predicateForMessagesInConversation:]
  +[EMMessageListItemPredicates log]
  +[EMMessageListItemPredicates _keyPathsForFlagChange:]
  +[EMMessageListItemPredicates predicateForVIPMessages]
  +[EMMessageListItemPredicates predicateForMessagesWithSender:]
  +[EMMessageListItemPredicates predicateForNotifyMessages]
  +[EMMessageListItemPredicates predicateForAccount:]
  +[EMMessageListItemPredicates predicateForFlagColor:]
  +[EMMessageListItemPredicates predicateForMessagesWithThreadScope:]
  +[EMMessageListItemPredicates predicateForExcludingMessagesInMailboxObjectID:]
  +[EMMessageListItemPredicates predicateForUnflaggedMessages]
  +[EMMessageListItemPredicates _spotlightPredicateForPredicate:]
  +[EMMessageListItemPredicates predicateForTodayMessages]
  +[EMMessageListItemPredicates _predicateForMessagesInMailboxWithURL:]
  +[EMMessageListItemPredicates predicateForMessagesInMailboxes:]
  +[EMMessageListItemPredicates mailboxURLsForPredicate:]
  +[EMMessageListItemPredicates predicate:appliesToFlagChange:]
  +[EMMessageListItemPredicates predicateForMessagesInMailboxesWithObjectIDs:]
  +[EMMessageListItemPredicates predicateFromPredicate:ignoringKeyPaths:]
  +[EMMessageListItemPredicates predicateForMessagesInMailbox:]
  +[EMMessageListItemPredicates predicateForMessagesWithMailboxScope:]
  +[EMMessageListItemPredicates predicateForExcludingMessagesInMailboxWithType:]
  +[EMMessageListItemPredicates mailboxScopeForPredicate:withMailboxTypeResolver:]
  +[EMMessageListItemPredicates predicateForMuteMessages]
  +[EMMessageListItemPredicates predicateForFlaggedMessages]
  +[EMMessageListItemPredicates predicateForToMeMessages]
  +[EMMessageListItemPredicates _predicateForKeyPath:value:]
  +[EMMessageListItemPredicates sortDescriptorForDateAscending:]
  +[EMMessageListItemPredicates _predicateForMessagesInMailboxWithType:]
  +[EMMessageListItemPredicates predicateForIncludesMeMessages]
  +[EMMessageListItemPredicates predicateForExcludingMessagesInMailboxes:]
  +[EMMessageListItemPredicates predicateForMessagesNewerThanDate:]
  +[EMMessageListItemPredicates predicateForExcludingMessagesInMailbox:]
  +[EMMessageListItemPredicates spotlightPredicateForPredicate:]
  +[EMMessageListItemPredicates predicateForCCMeMessages]
  +[EMMessageListItemPredicates predicateForExcludingMessagesInMailboxWithURL:]
  +[EMMessageListItemPredicates predicateForMessagesWithAttachments]
  +[EMMessageListItemPredicates predicateForMessagesInMailboxWithType:]
  +[EMMessageListItemPredicates predicateForReadMessages]
  +[EMMessageListItemPredicates predicateForMessagesInMailboxWithObjectID:]
  +[EMMessageListItemPredicates dateSortOrderFromSortDescriptors:]
  +[EMMessageListItemPredicates threadScopeForPredicate:]
  +[EMMessageListItemPredicates predicateForUnreadMessages]


EMMessageObjectID : EMObjectID
 @property  EMMessageCollectionItemID *collectionItemID
 @property  long long globalMessageID
 @property  EMMailboxScope *mailboxScope

  // class methods
  +[EMMessageObjectID new]
  +[EMMessageObjectID supportsSecureCoding]

  // instance methods
  -[EMMessageObjectID copyWithZone:]
  -[EMMessageObjectID init]
  -[EMMessageObjectID mailboxScope]
  -[EMMessageObjectID .cxx_destruct]
  -[EMMessageObjectID encodeWithCoder:]
  -[EMMessageObjectID initWithCollectionItemID:predicate:mailboxTypeResolver:]
  -[EMMessageObjectID globalMessageID]
  -[EMMessageObjectID isEqual:]
  -[EMMessageObjectID initWithGlobalMessageID:mailboxScope:]
  -[EMMessageObjectID collectionItemID]
  -[EMMessageObjectID initWithCollectionItemID:mailboxScope:]
  -[EMMessageObjectID initWithCoder:]


EMMessageCollectionItemID : NSObject /usr/lib/libSystem.B.dylib <EFCacheable, EMCollectionItemID>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long globalMessageID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMMessageCollectionItemID supportsSecureCoding]

  // instance methods
  -[EMMessageCollectionItemID copyWithZone:]
  -[EMMessageCollectionItemID init]
  -[EMMessageCollectionItemID cachedSelf]
  -[EMMessageCollectionItemID encodeWithCoder:]
  -[EMMessageCollectionItemID initWithGlobalMessageID:]
  -[EMMessageCollectionItemID globalMessageID]
  -[EMMessageCollectionItemID isEqual:]
  -[EMMessageCollectionItemID initWithCoder:]


EMMessageRepository : EMRepository <EFFutureDelegate, EFLoggable>
 @property  EMRemoteConnection *connection
 @property  NSArray *currentObservers
 @property  <EMVIPManager> *vipManager
 @property  EMBlockedSenderManager *blockedSenderManager
 @property  NSCache *queryCountCache
 @property  NSURL *cacheURL
 @property  EFPromise *remoteContentCachePromise
 @property  EMMailboxRepository *mailboxRepository
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMMessageRepository remoteInterface]
  +[EMMessageRepository log]
  +[EMMessageRepository signpostLog]

  // instance methods
  -[EMMessageRepository initInternal]
  -[EMMessageRepository vipManager]
  -[EMMessageRepository mailboxRepository]
  -[EMMessageRepository signpostID]
  -[EMMessageRepository _updateObserversForFlagChangeAction:]
  -[EMMessageRepository _updateObserversForAction:]
  -[EMMessageRepository didStartBlockingMainThreadForFuture:]
  -[EMMessageRepository messageForObjectID:]
  -[EMMessageRepository setCachedMetadataJSON:forKey:messageID:]
  -[EMMessageRepository remoteContentCachePromise]
  -[EMMessageRepository performCountQuery:completionHandler:]
  -[EMMessageRepository dealloc]
  -[EMMessageRepository requestRepresentationForMessageWithID:requestID:options:delegate:completionHandler:]
  -[EMMessageRepository setRemoteContentCachePromise:]
  -[EMMessageRepository messageObjectIDsForSearchableItemIdentifiers:]
  -[EMMessageRepository loadOlderMessagesForMailboxes:]
  -[EMMessageRepository .cxx_destruct]
  -[EMMessageRepository predictMailboxForMovingMessages:completionHandler:]
  -[EMMessageRepository _existingObservedItemForObjectID:]
  -[EMMessageRepository _anyObserver:containsObjectID:]
  -[EMMessageRepository _applyChangesToCachedObjects:]
  -[EMMessageRepository messageListItemsForObjectIDs:observationIdentifier:]
  -[EMMessageRepository messageForSearchableItemIdentifier:]
  -[EMMessageRepository _broadcastMessageListItemChangesToObservers:]
  -[EMMessageRepository setCacheURL:]
  -[EMMessageRepository setConnection:]
  -[EMMessageRepository startCountingQuery:includingServerCountsForMailboxScope:withObserver:]
  -[EMMessageRepository resetPrecomputedThreadScopesForMailboxType:]
  -[EMMessageRepository performQuery:limit:completionHandler:]
  -[EMMessageRepository cachedMetadataJSONForKey:messageID:]
  -[EMMessageRepository didFinishBlockingMainThreadForFuture:]
  -[EMMessageRepository _updateObserversForDeletedObjectIDs:]
  -[EMMessageRepository messageListItemsForObjectIDs:]
  -[EMMessageRepository predictMailboxForMovingMessagesWithIDs:completionHandler:]
  -[EMMessageRepository requestRepresentationForMessageWithID:options:delegate:completionHandler:]
  -[EMMessageRepository _vipsDidChange:]
  -[EMMessageRepository _blockedSendersDidChange:]
  -[EMMessageRepository cacheURL]
  -[EMMessageRepository setQueryCountCache:]
  -[EMMessageRepository setQueryCount:forQueryIdentifier:]
  -[EMMessageRepository performMessageChangeActionReturningUndoAction:]
  -[EMMessageRepository blockedSenderManager]
  -[EMMessageRepository performQuery:withObserver:]
  -[EMMessageRepository resetAllPrecomputedThreadScopes]
  -[EMMessageRepository _notifyRecoverableObservers]
  -[EMMessageRepository _cachedItemForItem:observers:validationBlock:]
  -[EMMessageRepository performMessageChangeAction:]
  -[EMMessageRepository messageObjectIDForURL:]
  -[EMMessageRepository resetPrecomputedThreadScopesForMailboxObjectID:]
  -[EMMessageRepository connection]
  -[EMMessageRepository _detectChangesForMatchedAddedObjectIDs:observerationIdentifier:matchedChangesHandler:]
  -[EMMessageRepository currentObservers]
  -[EMMessageRepository initWithRemoteConnection:mailboxRepository:vipManager:blockedSenderManager:]
  -[EMMessageRepository queryCountCache]
  -[EMMessageRepository _undoActionForConversationAction:]


_EMMessageRepositoryQueryObserver : NSObject /usr/lib/libSystem.B.dylib <EMMessageListItemQueryResultsObserver, EMRecoverableObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_EMMessageRepositoryQueryObserver dealloc]
  -[_EMMessageRepositoryQueryObserver .cxx_destruct]
  -[_EMMessageRepositoryQueryObserver cancel]
  -[_EMMessageRepositoryQueryObserver observer:wasUpdated:]
  -[_EMMessageRepositoryQueryObserver observer:matchedAddedObjectIDs:before:extraInfo:]
  -[_EMMessageRepositoryQueryObserver observer:matchedAddedObjectIDs:after:extraInfo:]
  -[_EMMessageRepositoryQueryObserver observer:matchedMovedObjectIDs:before:]
  -[_EMMessageRepositoryQueryObserver observer:matchedMovedObjectIDs:after:]
  -[_EMMessageRepositoryQueryObserver observer:matchedChangesForObjectIDs:]
  -[_EMMessageRepositoryQueryObserver observer:matchedDeletedObjectIDs:]
  -[_EMMessageRepositoryQueryObserver observerDidFinishInitialLoad:]
  -[_EMMessageRepositoryQueryObserver observer:replacedExistingObjectID:withNewObjectID:]
  -[_EMMessageRepositoryQueryObserver observer:matchedOldestItemsUpdatedForMailboxes:]
  -[_EMMessageRepositoryQueryObserver observerWillRestart:]
  -[_EMMessageRepositoryQueryObserver observerDidFinishRemoteSearch:]
  -[_EMMessageRepositoryQueryObserver recoverQueryWithRemoteConnection:]
  -[_EMMessageRepositoryQueryObserver initWithRepository:query:observer:]
  -[_EMMessageRepositoryQueryObserver performQueryWithRemoteConnection:]
  -[_EMMessageRepositoryQueryObserver _performQueryWithRemoteConnection:forRecovery:]


_EMMessageRepositoryCountingQueryObserver : NSObject /usr/lib/libSystem.B.dylib <EMMessageRepositoryCountQueryObserver_xpc, EMRecoverableObserver>
 @property  EFPair *queryIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_EMMessageRepositoryCountingQueryObserver dealloc]
  -[_EMMessageRepositoryCountingQueryObserver .cxx_destruct]
  -[_EMMessageRepositoryCountingQueryObserver cancel]
  -[_EMMessageRepositoryCountingQueryObserver countDidChange:acknowledgementToken:]
  -[_EMMessageRepositoryCountingQueryObserver recoverQueryWithRemoteConnection:]
  -[_EMMessageRepositoryCountingQueryObserver performQueryWithRemoteConnection:]
  -[_EMMessageRepositoryCountingQueryObserver initWithRepository:queryIdentifier:includingServerCountsForMailboxScope:observer:]
  -[_EMMessageRepositoryCountingQueryObserver _performQueryWithRemoteConnection:forRecovery:]
  -[_EMMessageRepositoryCountingQueryObserver queryIdentifier]


_EMMessageRepositoryMailboxPredictionObserver : NSObject /usr/lib/libSystem.B.dylib <EMMessageRepositoryMailboxPredictionObserver_xpc, EMRecoverableObserver>
 @property  NSArray *messageObjectIDs
 @property  @? completionHandler
 @property  EFCancelationToken *cancelationToken
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_EMMessageRepositoryMailboxPredictionObserver cancelationToken]
  -[_EMMessageRepositoryMailboxPredictionObserver dealloc]
  -[_EMMessageRepositoryMailboxPredictionObserver .cxx_destruct]
  -[_EMMessageRepositoryMailboxPredictionObserver cancel]
  -[_EMMessageRepositoryMailboxPredictionObserver mailboxWasPredicted:]
  -[_EMMessageRepositoryMailboxPredictionObserver recoverQueryWithRemoteConnection:]
  -[_EMMessageRepositoryMailboxPredictionObserver performQueryWithRemoteConnection:]
  -[_EMMessageRepositoryMailboxPredictionObserver initWithMessageObjectIDs:completionHandler:]
  -[_EMMessageRepositoryMailboxPredictionObserver _performQueryWithRemoteConnection:forRecovery:]
  -[_EMMessageRepositoryMailboxPredictionObserver messageObjectIDs]
  -[_EMMessageRepositoryMailboxPredictionObserver completionHandler]


EMMessageSigner : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  EMCertificateTrustInformation *signingCertificateTrustInfo
 @property  EMCertificateTrustInformation *encryptionCertificateTrustInfo
 @property  NSError *error
 @property  BOOL hasSeparateSigningAndEncryptionCertificates

  // class methods
  +[EMMessageSigner supportsSecureCoding]

  // instance methods
  -[EMMessageSigner reevaluateTrustWithNetworkAccessAllowed]
  -[EMMessageSigner setError:]
  -[EMMessageSigner .cxx_destruct]
  -[EMMessageSigner encodeWithCoder:]
  -[EMMessageSigner initWithSigningTrust:encryptionTrust:]
  -[EMMessageSigner error]
  -[EMMessageSigner hasSeparateSigningAndEncryptionCertificates]
  -[EMMessageSigner evaluateTrustsWithOptions:]
  -[EMMessageSigner setSigningCertificateTrustInfo:]
  -[EMMessageSigner setEncryptionCertificateTrustInfo:]
  -[EMMessageSigner signingCertificateTrustInfo]
  -[EMMessageSigner encryptionCertificateTrustInfo]
  -[EMMessageSigner initWithCoder:]


EMMessageTransferAction : EMMessageChangeAction
 @property  NSURL *destinationMailboxURL
 @property  long long specialDestinationMailboxType
 @property  ECMessageFlagChange *flagChange
 @property  BOOL copyMessages

  // class methods
  +[EMMessageTransferAction supportsSecureCoding]

  // instance methods
  -[EMMessageTransferAction initWithMessageListItems:specialDestinationMailboxType:flagChange:copyMessages:]
  -[EMMessageTransferAction .cxx_destruct]
  -[EMMessageTransferAction encodeWithCoder:]
  -[EMMessageTransferAction copyMessages]
  -[EMMessageTransferAction specialDestinationMailboxType]
  -[EMMessageTransferAction initWithMessageListItems:destinationMailbox:copyMessages:]
  -[EMMessageTransferAction flagChange]
  -[EMMessageTransferAction signpostType]
  -[EMMessageTransferAction initWithCoder:]
  -[EMMessageTransferAction destinationMailboxURL]


EMMessageTransferAllAction : EMMessageTransferAction
 @property  NSArray *mailboxObjectIDs

  // class methods
  +[EMMessageTransferAllAction supportsSecureCoding]

  // instance methods
  -[EMMessageTransferAllAction .cxx_destruct]
  -[EMMessageTransferAllAction encodeWithCoder:]
  -[EMMessageTransferAllAction initWithMailboxes:messageListItemsToExclude:destinationMailbox:copyMessages:]
  -[EMMessageTransferAllAction initWithMailboxes:messageListItemsToExclude:specialDestinationMailboxType:flagChange:copyMessages:]
  -[EMMessageTransferAllAction mailboxObjectIDs]
  -[EMMessageTransferAllAction signpostType]
  -[EMMessageTransferAllAction initWithCoder:]


EMMessageInternalID : NSObject /usr/lib/libSystem.B.dylib
 @property  long long databaseID
 @property  NSString *externalID

  // instance methods
  -[EMMessageInternalID databaseID]
  -[EMMessageInternalID .cxx_destruct]
  -[EMMessageInternalID initWithDatabaseID:externalID:]
  -[EMMessageInternalID externalID]


EMMoveMailboxChangeAction : EMMailboxChangeAction
 @property  EMMailboxObjectID *parentMailboxID

  // class methods
  +[EMMoveMailboxChangeAction supportsSecureCoding]

  // instance methods
  -[EMMoveMailboxChangeAction .cxx_destruct]
  -[EMMoveMailboxChangeAction encodeWithCoder:]
  -[EMMoveMailboxChangeAction initWithMailboxObjectID:newParentMailboxID:]
  -[EMMoveMailboxChangeAction initWithMailbox:newParent:]
  -[EMMoveMailboxChangeAction parentMailboxID]
  -[EMMoveMailboxChangeAction initWithCoder:]


EMObject : NSObject /usr/lib/libSystem.B.dylib <EMObject, NSSecureCoding, EFPubliclyDescribable>
 @property  EMObjectID *objectID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *ef_publicDescription

  // class methods
  +[EMObject supportsSecureCoding]

  // instance methods
  -[EMObject ef_publicDescription]
  -[EMObject setObjectID:]
  -[EMObject .cxx_destruct]
  -[EMObject encodeWithCoder:]
  -[EMObject _commonInitWithObjectID:]
  -[EMObject isEqual:]
  -[EMObject initWithObjectID:]
  -[EMObject objectID]
  -[EMObject initWithCoder:]


EMObjectID : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, EFCacheable, NSSecureCoding, NSCopying>
 @property  <NSObject><NSSecureCoding><NSCopying> *representedObjectID
 @property  BOOL ephemeral
 @property  EFStringHash *stringHash
 @property  NSData *serializedRepresentation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMObjectID supportsSecureCoding]
  +[EMObjectID log]
  +[EMObjectID addDecodableClass:]
  +[EMObjectID _decodableClasses]
  +[EMObjectID objectIDFromSerializedRepresentation:]

  // instance methods
  -[EMObjectID copyWithZone:]
  -[EMObjectID initAsEphemeralID:representedObjectID:]
  -[EMObjectID initAsEphemeralID:]
  -[EMObjectID initWithRepresentedObjectID:]
  -[EMObjectID isEphemeral]
  -[EMObjectID _commonInitAsEphemeralID:representedObjectID:]
  -[EMObjectID cachedSelf]
  -[EMObjectID representedObjectID]
  -[EMObjectID serializedRepresentation]
  -[EMObjectID .cxx_destruct]
  -[EMObjectID encodeWithCoder:]
  -[EMObjectID stringHash]
  -[EMObjectID isEqual:]
  -[EMObjectID initWithCoder:]


EMOutgoingMessage : NSObject /usr/lib/libSystem.B.dylib <EMOutgoingMessageBuilder, NSSecureCoding, EFPubliclyDescribable>
 @property  NSData *messageData
 @property  long long action
 @property  BOOL shouldSign
 @property  BOOL shouldEncrypt
 @property  long long conversationNotificationLevel
 @property  EMMessageObjectID *originalMessageID
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMOutgoingMessage supportsSecureCoding]

  // instance methods
  -[EMOutgoingMessage ef_publicDescription]
  -[EMOutgoingMessage setAction:]
  -[EMOutgoingMessage .cxx_destruct]
  -[EMOutgoingMessage action]
  -[EMOutgoingMessage setShouldSign:]
  -[EMOutgoingMessage setShouldEncrypt:]
  -[EMOutgoingMessage encodeWithCoder:]
  -[EMOutgoingMessage setConversationNotificationLevel:]
  -[EMOutgoingMessage conversationNotificationLevel]
  -[EMOutgoingMessage setOriginalMessageID:]
  -[EMOutgoingMessage originalMessageID]
  -[EMOutgoingMessage initWithMessageData:]
  -[EMOutgoingMessage shouldEncrypt]
  -[EMOutgoingMessage initWithBuilder:]
  -[EMOutgoingMessage shouldSign]
  -[EMOutgoingMessage initWithCoder:]
  -[EMOutgoingMessage messageData]
  -[EMOutgoingMessage setMessageData:]


EMMessageDeliveryResult : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  long long status
 @property  NSError *error

  // class methods
  +[EMMessageDeliveryResult supportsSecureCoding]

  // instance methods
  -[EMMessageDeliveryResult .cxx_destruct]
  -[EMMessageDeliveryResult encodeWithCoder:]
  -[EMMessageDeliveryResult error]
  -[EMMessageDeliveryResult initWithStatus:error:]
  -[EMMessageDeliveryResult status]
  -[EMMessageDeliveryResult initWithCoder:]


EMOutgoingMessageRepository : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, EMOutgoingMessageRepositoryInterfaceObserver>
 @property  EMRemoteConnection *connection
 @property  <EFCancelable> *registrationCancelable
 @property  <EFScheduler> *scheduler
 @property  NSMutableArray *observers
 @property  NSNumber *pendingMessages
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMOutgoingMessageRepository remoteInterface]
  +[EMOutgoingMessageRepository log]
  +[EMOutgoingMessageRepository signpostLog]

  // instance methods
  -[EMOutgoingMessageRepository scheduler]
  -[EMOutgoingMessageRepository signpostID]
  -[EMOutgoingMessageRepository suspendDeliveryQueue]
  -[EMOutgoingMessageRepository initWithRemoteConnection:]
  -[EMOutgoingMessageRepository numberOfPendingMessages]
  -[EMOutgoingMessageRepository setRegistrationCancelable:]
  -[EMOutgoingMessageRepository deliverMessage:usingMailDrop:]
  -[EMOutgoingMessageRepository dealloc]
  -[EMOutgoingMessageRepository .cxx_destruct]
  -[EMOutgoingMessageRepository _startObservingUnsentChangesIfNecessary]
  -[EMOutgoingMessageRepository processAllQueuedMessages]
  -[EMOutgoingMessageRepository setScheduler:]
  -[EMOutgoingMessageRepository deleteDraftsInMailbox:documentID:previousDraftObjectID:]
  -[EMOutgoingMessageRepository setConnection:]
  -[EMOutgoingMessageRepository observers]
  -[EMOutgoingMessageRepository setPendingMessages:]
  -[EMOutgoingMessageRepository _restartObservingUnsentChangesIfNecessary]
  -[EMOutgoingMessageRepository resumeDeliveryQueue]
  -[EMOutgoingMessageRepository updateObservers]
  -[EMOutgoingMessageRepository registrationCancelable]
  -[EMOutgoingMessageRepository outboxContainsMessageFromAccount:]
  -[EMOutgoingMessageRepository removeObserver:]
  -[EMOutgoingMessageRepository isProcessing]
  -[EMOutgoingMessageRepository numberOfPendingMessagesChanged:]
  -[EMOutgoingMessageRepository connection]
  -[EMOutgoingMessageRepository addObserver:]
  -[EMOutgoingMessageRepository saveDraftMessage:mailboxObjectID:previousDraftObjectID:]
  -[EMOutgoingMessageRepository pendingMessages]


EMPersistenceLayoutManager : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMPersistenceLayoutManager mailAccountDirectory]
  +[EMPersistenceLayoutManager log]
  +[EMPersistenceLayoutManager baseMailDirectoryPath]
  +[EMPersistenceLayoutManager mailAccountDirectoryPath]
  +[EMPersistenceLayoutManager _nonContainerizedBaseMailDirectoryPathCreated:]
  +[EMPersistenceLayoutManager mailDataDirectory]
  +[EMPersistenceLayoutManager mailDataDirectoryPath]
  +[EMPersistenceLayoutManager baseMailDirectory]


EMReceivingAccount : EMAccount <EMReceivingAccountBuilder>
 @property  EMDeliveryAccount *deliveryAccount
 @property  NSArray *emailAddresses
 @property  BOOL sourceIsManaged
 @property  BOOL shouldArchiveByDefault
 @property  NSString *statisticsKind
 @property  NSString *username
 @property  NSString *hostname
 @property  BOOL primaryiCloudAccount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMReceivingAccount supportsSecureCoding]

  // instance methods
  -[EMReceivingAccount setUsername:]
  -[EMReceivingAccount hostname]
  -[EMReceivingAccount setEmailAddresses:]
  -[EMReceivingAccount sourceIsManaged]
  -[EMReceivingAccount emailAddresses]
  -[EMReceivingAccount username]
  -[EMReceivingAccount .cxx_destruct]
  -[EMReceivingAccount name]
  -[EMReceivingAccount setPrimaryiCloudAccount:]
  -[EMReceivingAccount _commonInitName:hostname:builder:]
  -[EMReceivingAccount initWithObjectID:name:hostname:builder:]
  -[EMReceivingAccount setHostname:]
  -[EMReceivingAccount encodeWithCoder:]
  -[EMReceivingAccount setStatisticsKind:]
  -[EMReceivingAccount setShouldArchiveByDefault:]
  -[EMReceivingAccount statisticsKind]
  -[EMReceivingAccount deliveryAccount]
  -[EMReceivingAccount setDeliveryAccount:]
  -[EMReceivingAccount setSourceIsManaged:]
  -[EMReceivingAccount shouldArchiveByDefault]
  -[EMReceivingAccount initWithCoder:]
  -[EMReceivingAccount isPrimaryiCloudAccount]


EMRemoteConnectionRecoveryAssertion : NSObject /usr/lib/libSystem.B.dylib
 @property  <EMRemoteConnectionRecoveryAssertionDelegate> *delegate

  // instance methods
  -[EMRemoteConnectionRecoveryAssertion dealloc]
  -[EMRemoteConnectionRecoveryAssertion .cxx_destruct]
  -[EMRemoteConnectionRecoveryAssertion initWithConnection:]
  -[EMRemoteConnectionRecoveryAssertion setDelegate:]
  -[EMRemoteConnectionRecoveryAssertion invalidate]
  -[EMRemoteConnectionRecoveryAssertion delegate]


_EMRemoteInterfaceDistantObjectReattempt : NSObject /usr/lib/libSystem.B.dylib
 @property  NSInvocation *invocation
 @property  NSError *error

  // class methods
  +[_EMRemoteInterfaceDistantObjectReattempt recordedAttemptWithOriginalInvocation:target:error:]

  // instance methods
  -[_EMRemoteInterfaceDistantObjectReattempt perform]
  -[_EMRemoteInterfaceDistantObjectReattempt .cxx_destruct]
  -[_EMRemoteInterfaceDistantObjectReattempt error]
  -[_EMRemoteInterfaceDistantObjectReattempt initWithOriginalInvocation:target:error:]
  -[_EMRemoteInterfaceDistantObjectReattempt invocation]


EMRemoteConnection : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, EMRemoteConnectionRecoveryAssertionDelegate, EMXPCProxyCreating>
 @property  Protocol *protocol
 @property  id reattemptingRemoteObjectProxy
 @property  id remoteObjectProxy
 @property  BOOL prefersImmediateActivity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMRemoteConnection log]

  // instance methods
  -[EMRemoteConnection protocol]
  -[EMRemoteConnection synchronousRemoteObjectProxyWithErrorHandler:]
  -[EMRemoteConnection _sendInvocation:withProxy:]
  -[EMRemoteConnection voucherInvalidated]
  -[EMRemoteConnection proxy]
  -[EMRemoteConnection remoteObjectProxyWithErrorHandler:]
  -[EMRemoteConnection .cxx_destruct]
  -[EMRemoteConnection initWithProtocol:proxyGenerator:]
  -[EMRemoteConnection _respondsToRemoteSelector:]
  -[EMRemoteConnection requestRecoveryAssertion]
  -[EMRemoteConnection remoteObjectProxy]
  -[EMRemoteConnection reattemptingRemoteObjectProxy]
  -[EMRemoteConnection prefersImmediateActivity]
  -[EMRemoteConnection proxyCreator:]
  -[EMRemoteConnection addRecoveryHandler:]
  -[EMRemoteConnection reset]
  -[EMRemoteConnection _reattemptInvocation:withProxy:originalError:]
  -[EMRemoteConnection addResetHandler:]
  -[EMRemoteConnection recover]
  -[EMRemoteConnection reattemptingRemoteObjectProxyWithReattemptHandler:]
  -[EMRemoteConnection _methodSignatureForRemoteSelector:]
  -[EMRemoteConnection voucherInitialized]


_EMRemoteInterfaceDistantObject : NSObject /usr/lib/libSystem.B.dylib <EMXPCProxyCreating>
 @property  EMRemoteConnection *remoteInterface
 @property  @? reattemptHandler
 @property  BOOL synchronous

  // instance methods
  -[_EMRemoteInterfaceDistantObject synchronousRemoteObjectProxyWithErrorHandler:]
  -[_EMRemoteInterfaceDistantObject remoteInterface]
  -[_EMRemoteInterfaceDistantObject forwardInvocation:]
  -[_EMRemoteInterfaceDistantObject methodSignatureForSelector:]
  -[_EMRemoteInterfaceDistantObject conformsToProtocol:]
  -[_EMRemoteInterfaceDistantObject isSynchronous]
  -[_EMRemoteInterfaceDistantObject remoteObjectProxyWithErrorHandler:]
  -[_EMRemoteInterfaceDistantObject respondsToSelector:]
  -[_EMRemoteInterfaceDistantObject .cxx_destruct]
  -[_EMRemoteInterfaceDistantObject reattemptHandler]
  -[_EMRemoteInterfaceDistantObject remoteObjectProxy]
  -[_EMRemoteInterfaceDistantObject reattemptingRemoteObjectProxy]
  -[_EMRemoteInterfaceDistantObject _forwardStackInvocation:]
  -[_EMRemoteInterfaceDistantObject reattemptingRemoteObjectProxyWithReattemptHandler:]
  -[_EMRemoteInterfaceDistantObject initWithRemoteInterface:synchronous:reattemptHandler:]


EMRenameMailboxChangeAction : EMMailboxChangeAction
 @property  NSString *name

  // class methods
  +[EMRenameMailboxChangeAction supportsSecureCoding]

  // instance methods
  -[EMRenameMailboxChangeAction .cxx_destruct]
  -[EMRenameMailboxChangeAction name]
  -[EMRenameMailboxChangeAction encodeWithCoder:]
  -[EMRenameMailboxChangeAction initWithMailboxObjectID:newName:]
  -[EMRenameMailboxChangeAction initWithMailbox:newName:]
  -[EMRenameMailboxChangeAction initWithCoder:]


EMRepository : NSObject /usr/lib/libSystem.B.dylib
 @property  <EFScheduler> *observerScheduler
 @property  Protocol *interfaceProtocol
 @property  EFFuture *interfaceFuture

  // instance methods
  -[EMRepository initInternal]
  -[EMRepository interfaceProtocol]
  -[EMRepository .cxx_destruct]
  -[EMRepository setObserverScheduler:]
  -[EMRepository trampoliningObserverForObserver:]
  -[EMRepository prepareRepositoryObjects:]
  -[EMRepository interfaceFuture]
  -[EMRepository performQuery:withObserver:]
  -[EMRepository observerScheduler]


EMRepositoryObject : EMObject <EMRepositoryObject>
 @property  EMRepository *repository
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[EMRepositoryObject .cxx_destruct]
  -[EMRepositoryObject setRepository:]
  -[EMRepositoryObject repository]


EMSearchableIndex : NSObject /usr/lib/libSystem.B.dylib <EFLoggable>
 @property  EMRemoteConnection *connection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMSearchableIndex remoteInterface]
  +[EMSearchableIndex log]
  +[EMSearchableIndex attachmentPersistentIDFromItemIdentifier:]

  // instance methods
  -[EMSearchableIndex initWithRemoteConnection:]
  -[EMSearchableIndex reindexSearchableItemsWithIdentifiers:acknowledgementHandler:]
  -[EMSearchableIndex .cxx_destruct]
  -[EMSearchableIndex setConnection:]
  -[EMSearchableIndex reindexAllSearchableItemsWithAcknowledgementHandler:]
  -[EMSearchableIndex connection]


EMSearchableIndexQuery : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, EMSearchableIndexQueryBuilder, EFSignpostable, EFCancelable, NSProgressReporting>
 @property  NSString *logPrefixString
 @property  NSString *queryStatus
 @property  BOOL queryDidMoveToFinishedState
 @property  BOOL liveQueryDidGather
 @property  long long count
 @property  NSError *simulatedFailedQueryError
 @property  CSSearchQuery *query
 @property  BOOL isCancelled
 @property  EMSearchableIndexQueryExpression *expression
 @property  BOOL isFinished
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *bundleIdentifier
 @property  @? resultsBlock
 @property  @? completionBlock
 @property  @? failureBlock
 @property  @? gatheredBlock
 @property  @? changedItemsBlock
 @property  @? removedItemsBlock
 @property  @? countChangedBlock
 @property  NSArray *fetchAttributes
 @property  NSArray *protectionClasses
 @property  NSArray *rankingQueries
 @property  long long maxCount
 @property  BOOL live
 @property  BOOL counting
 @property  NSString *logIdentifier
 @property  unsigned long signpostID
 @property  NSProgress *progress

  // class methods
  +[EMSearchableIndexQuery queryStringByJoiningQueries:withOperand:]
  +[EMSearchableIndexQuery searchWordsForPhrase:languages:]
  +[EMSearchableIndexQuery log]
  +[EMSearchableIndexQuery intervalForSpotlightFailureSimulation]
  +[EMSearchableIndexQuery queryWithExpression:builder:]
  +[EMSearchableIndexQuery _operandStringForOperand:]
  +[EMSearchableIndexQuery _queryStringForPhrase:attributes:modifiers:phraseMatchFormatString:comparisonOperator:]
  +[EMSearchableIndexQuery _modifierStringFromModifiers:]
  +[EMSearchableIndexQuery _queryStringForPhrase:attributes:modifiers:phraseMatchFormatString:]
  +[EMSearchableIndexQuery queryStringForPhrase:attributes:modifiers:languages:]
  +[EMSearchableIndexQuery queryStringForPhrase:attributes:modifiers:languages:phraseMatchFormatString:comparisonOperator:]
  +[EMSearchableIndexQuery signpostLog]

  // instance methods
  -[EMSearchableIndexQuery isCancelled]
  -[EMSearchableIndexQuery setMaxCount:]
  -[EMSearchableIndexQuery maxCount]
  -[EMSearchableIndexQuery signpostID]
  -[EMSearchableIndexQuery _completed]
  -[EMSearchableIndexQuery logIdentifier]
  -[EMSearchableIndexQuery setCount:]
  -[EMSearchableIndexQuery init]
  -[EMSearchableIndexQuery live]
  -[EMSearchableIndexQuery setProtectionClasses:]
  -[EMSearchableIndexQuery setQuery:]
  -[EMSearchableIndexQuery _cancelQuery]
  -[EMSearchableIndexQuery protectionClasses]
  -[EMSearchableIndexQuery dealloc]
  -[EMSearchableIndexQuery setLive:]
  -[EMSearchableIndexQuery fetchAttributes]
  -[EMSearchableIndexQuery .cxx_destruct]
  -[EMSearchableIndexQuery query]
  -[EMSearchableIndexQuery _gathered]
  -[EMSearchableIndexQuery counting]
  -[EMSearchableIndexQuery rankingQueries]
  -[EMSearchableIndexQuery _cancel]
  -[EMSearchableIndexQuery isFinished]
  -[EMSearchableIndexQuery setRankingQueries:]
  -[EMSearchableIndexQuery setCompletionBlock:]
  -[EMSearchableIndexQuery completionBlock]
  -[EMSearchableIndexQuery cancel]
  -[EMSearchableIndexQuery setBundleIdentifier:]
  -[EMSearchableIndexQuery initWithExpression:builder:]
  -[EMSearchableIndexQuery _searchQueryDidFailWithError:]
  -[EMSearchableIndexQuery resultsBlock]
  -[EMSearchableIndexQuery gatheredBlock]
  -[EMSearchableIndexQuery setResultsBlock:]
  -[EMSearchableIndexQuery _removeResultsBlock]
  -[EMSearchableIndexQuery _removeAllLiveUpdatesBlocks]
  -[EMSearchableIndexQuery logPrefixString]
  -[EMSearchableIndexQuery _searchQueryDidFindItems:]
  -[EMSearchableIndexQuery simulatedFailedQueryError]
  -[EMSearchableIndexQuery liveQueryDidGather]
  -[EMSearchableIndexQuery _searchQueryDidComplete]
  -[EMSearchableIndexQuery _searchQueryGatherDidEnd]
  -[EMSearchableIndexQuery _searchQueryDidChangeItems:]
  -[EMSearchableIndexQuery _searchQueryDidRemoveIdentifiers:]
  -[EMSearchableIndexQuery removedItemsBlock]
  -[EMSearchableIndexQuery changedItemsBlock]
  -[EMSearchableIndexQuery _searchQueryDidChangeCount:]
  -[EMSearchableIndexQuery countChangedBlock]
  -[EMSearchableIndexQuery queryStatus]
  -[EMSearchableIndexQuery _isFinishedQueryStatus:]
  -[EMSearchableIndexQuery queryDidMoveToFinishedState]
  -[EMSearchableIndexQuery setQueryDidMoveToFinishedState:]
  -[EMSearchableIndexQuery _logSignpostForSearchQueryDidFinishWithStatus:]
  -[EMSearchableIndexQuery setQueryStatus:]
  -[EMSearchableIndexQuery _logSignpostForSearchQueryDidReceiveFirstResultsWithItemCount:]
  -[EMSearchableIndexQuery setLiveQueryDidGather:]
  -[EMSearchableIndexQuery _isCancellationError:]
  -[EMSearchableIndexQuery _failedWithError:]
  -[EMSearchableIndexQuery _logSignpostForSearchQueryStart]
  -[EMSearchableIndexQuery setSimulatedFailedQueryError:]
  -[EMSearchableIndexQuery setGatheredBlock:]
  -[EMSearchableIndexQuery setChangedItemsBlock:]
  -[EMSearchableIndexQuery setCountChangedBlock:]
  -[EMSearchableIndexQuery setRemovedItemsBlock:]
  -[EMSearchableIndexQuery _foundItems:]
  -[EMSearchableIndexQuery _performClientWork:]
  -[EMSearchableIndexQuery _changedItems:]
  -[EMSearchableIndexQuery _removedItems:]
  -[EMSearchableIndexQuery _changeCount:]
  -[EMSearchableIndexQuery setLogIdentifier:]
  -[EMSearchableIndexQuery simulateFailedQueryWithError:]
  -[EMSearchableIndexQuery setLogPrefixString:]
  -[EMSearchableIndexQuery count]
  -[EMSearchableIndexQuery progress]
  -[EMSearchableIndexQuery failureBlock]
  -[EMSearchableIndexQuery bundleIdentifier]
  -[EMSearchableIndexQuery setCounting:]
  -[EMSearchableIndexQuery expression]
  -[EMSearchableIndexQuery setFetchAttributes:]
  -[EMSearchableIndexQuery setFailureBlock:]
  -[EMSearchableIndexQuery start]


EMSearchableIndexQueryExpression : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *queryString
 @property  BOOL valid

  // class methods
  +[EMSearchableIndexQueryExpression expressionWithQueryString:]

  // instance methods
  -[EMSearchableIndexQueryExpression copyWithZone:]
  -[EMSearchableIndexQueryExpression init]
  -[EMSearchableIndexQueryExpression setQueryString:]
  -[EMSearchableIndexQueryExpression .cxx_destruct]
  -[EMSearchableIndexQueryExpression queryString]
  -[EMSearchableIndexQueryExpression isValid]
  -[EMSearchableIndexQueryExpression initWithQueryString:]


_EMComparisionQueryGenerator : NSObject /usr/lib/libSystem.B.dylib <EMSearchableIndexQueryGenerator>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_EMComparisionQueryGenerator _modifiersForPredicate:]
  -[_EMComparisionQueryGenerator _attributesForPredicate:propertyMapper:]
  -[_EMComparisionQueryGenerator _comparisonOperatorForPredicate:]
  -[_EMComparisionQueryGenerator _patternMatchStringForPredicate:]
  -[_EMComparisionQueryGenerator queryExpressionFromPredicate:propertyMapper:languages:]


_EMCompoundQueryGenerator : NSObject /usr/lib/libSystem.B.dylib <EMSearchableIndexQueryGenerator>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_EMCompoundQueryGenerator queryExpressionFromPredicate:propertyMapper:languages:]
  -[_EMCompoundQueryGenerator operandFromPredicate:]


EMSearchableIndexSchema : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[EMSearchableIndexSchema propertyMapper]


EMSearchableIndexTopHitsQueryResult : NSObject /usr/lib/libSystem.B.dylib
 @property  CSTopHitSearchQuery *topHitSearchQuery
 @property  NSArray *foundItems
 @property  NSArray *searchableItemIdentifiers

  // instance methods
  -[EMSearchableIndexTopHitsQueryResult setSearchableItemIdentifiers:]
  -[EMSearchableIndexTopHitsQueryResult searchableItemIdentifiers]
  -[EMSearchableIndexTopHitsQueryResult .cxx_destruct]
  -[EMSearchableIndexTopHitsQueryResult foundItems]
  -[EMSearchableIndexTopHitsQueryResult topHitSearchQuery]
  -[EMSearchableIndexTopHitsQueryResult rankingIndexForMessageLibraryID:]
  -[EMSearchableIndexTopHitsQueryResult rankingIndexForConversationID:]
  -[EMSearchableIndexTopHitsQueryResult initWithTopHitSearchQuery:foundItems:]
  -[EMSearchableIndexTopHitsQueryResult userDidInteractWithLibraryIdentifier:]
  -[EMSearchableIndexTopHitsQueryResult userDidInteractWithConversationID:]
  -[EMSearchableIndexTopHitsQueryResult setTopHitSearchQuery:]
  -[EMSearchableIndexTopHitsQueryResult setFoundItems:]


EMSearchableIndexTopHitsQuery : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, EFCancelable, NSProgressReporting>
 @property  CSTopHitSearchQuery *topHitSearchQuery
 @property  NSMutableArray *foundItems
 @property  EFPromise *spotlightTopHitsQueryResultPromise
 @property  NSProgress *progress
 @property  NSProgress *internalProgress
 @property  NSString *logPrefix
 @property  NSLock *lock
 @property  NSString *searchString
 @property  NSArray *filterQueries
 @property  NSString *keyboardLanguage
 @property  unsigned long limit
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMSearchableIndexTopHitsQuery log]

  // instance methods
  -[EMSearchableIndexTopHitsQuery searchString]
  -[EMSearchableIndexTopHitsQuery setLock:]
  -[EMSearchableIndexTopHitsQuery limit]
  -[EMSearchableIndexTopHitsQuery .cxx_destruct]
  -[EMSearchableIndexTopHitsQuery lock]
  -[EMSearchableIndexTopHitsQuery _cancel]
  -[EMSearchableIndexTopHitsQuery filterQueries]
  -[EMSearchableIndexTopHitsQuery cancel]
  -[EMSearchableIndexTopHitsQuery keyboardLanguage]
  -[EMSearchableIndexTopHitsQuery foundItems]
  -[EMSearchableIndexTopHitsQuery topHitSearchQuery]
  -[EMSearchableIndexTopHitsQuery setTopHitSearchQuery:]
  -[EMSearchableIndexTopHitsQuery setFoundItems:]
  -[EMSearchableIndexTopHitsQuery _configureTopHitsSearchQuery:]
  -[EMSearchableIndexTopHitsQuery _searchFoundItems:]
  -[EMSearchableIndexTopHitsQuery _searchDidCompleteWithError:]
  -[EMSearchableIndexTopHitsQuery spotlightTopHitsQueryResultPromise]
  -[EMSearchableIndexTopHitsQuery internalProgress]
  -[EMSearchableIndexTopHitsQuery initWithSearchString:filterQueries:keyboardLanguage:limit:]
  -[EMSearchableIndexTopHitsQuery topHitsQueryResult]
  -[EMSearchableIndexTopHitsQuery setSpotlightTopHitsQueryResultPromise:]
  -[EMSearchableIndexTopHitsQuery setInternalProgress:]
  -[EMSearchableIndexTopHitsQuery setLogPrefix:]
  -[EMSearchableIndexTopHitsQuery logPrefix]
  -[EMSearchableIndexTopHitsQuery setProgress:]
  -[EMSearchableIndexTopHitsQuery progress]
  -[EMSearchableIndexTopHitsQuery start]


EMSecurityInformation : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, EFPubliclyDescribable>
 @property  BOOL isEncrypted
 @property  BOOL isSigned
 @property  NSArray *signers
 @property  BOOL hasEncryptedDescendantPart
 @property  NSError *smimeError
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMSecurityInformation supportsSecureCoding]

  // instance methods
  -[EMSecurityInformation isEncrypted]
  -[EMSecurityInformation isSigned]
  -[EMSecurityInformation ef_publicDescription]
  -[EMSecurityInformation smimeError]
  -[EMSecurityInformation reevaluateTrustWithNetworkAccessAllowed]
  -[EMSecurityInformation .cxx_destruct]
  -[EMSecurityInformation encodeWithCoder:]
  -[EMSecurityInformation hasEncryptedDescendantPart]
  -[EMSecurityInformation initWithSigners:isEncrypted:hasEncryptedDescendantPart:smimeError:]
  -[EMSecurityInformation signers]
  -[EMSecurityInformation initWithCoder:]


EMSmartMailbox : EMMailbox
 @property  EMMailboxScope *mailboxScope
 @property  long long smartMailboxType

  // class methods
  +[EMSmartMailbox unifiedMailboxOfType:name:additionalPredicate:]
  +[EMSmartMailbox vipMailboxWithMailboxScope:]
  +[EMSmartMailbox flaggedMailboxWithMailboxScope:]
  +[EMSmartMailbox orangeMailboxWithMailboxScope:]
  +[EMSmartMailbox redMailboxWithMailboxScope:]
  +[EMSmartMailbox purpleMailboxWithMailboxScope:]
  +[EMSmartMailbox blueMailboxWithMailboxScope:]
  +[EMSmartMailbox yellowMailboxWithMailboxScope:]
  +[EMSmartMailbox greenMailboxWithMailboxScope:]
  +[EMSmartMailbox grayMailboxWithMailboxScope:]
  +[EMSmartMailbox unreadMailboxWithMailboxScope:]
  +[EMSmartMailbox hasAttachmentsMailboxWithMailboxScope:]
  +[EMSmartMailbox notifyThreadsMailboxWithMailboxScope:]
  +[EMSmartMailbox todayMailboxWithMailboxScope:]
  +[EMSmartMailbox muteThreadsMailboxWithMailboxScope:]
  +[EMSmartMailbox includesMeMailboxWithMailboxScope:]
  +[EMSmartMailbox unifiedMailboxOfType:name:]
  +[EMSmartMailbox vipMailboxWithName:additionalPredicate:]

  // instance methods
  -[EMSmartMailbox mailboxScope]
  -[EMSmartMailbox .cxx_destruct]
  -[EMSmartMailbox isSmartMailbox]
  -[EMSmartMailbox smartMailboxType]
  -[EMSmartMailbox supportsSelectAll]
  -[EMSmartMailbox _shouldArchiveByDefault]
  -[EMSmartMailbox makePredicate]
  -[EMSmartMailbox isEqual:]
  -[EMSmartMailbox initWithType:mailboxType:name:mailboxScope:predicateGenerator:]


EMStatusUpdateProvider : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[EMStatusUpdateProvider .cxx_destruct]
  -[EMStatusUpdateProvider statusUpdateWithDate:now:nextTransition:]
  -[EMStatusUpdateProvider _statusUpdatedMinutesAgoWithDate:now:]
  -[EMStatusUpdateProvider _statusUpdatedAtTimeWithDate:]
  -[EMStatusUpdateProvider _statusUpdatedOnDayWithDate:]
  -[EMStatusUpdateProvider _statusUpdatedOnDateWithDate:]
  -[EMStatusUpdateProvider statusUpdateStringWithDate:now:nextTransition:]


EMThread : EMCollection <EMThreadBuilder, EFLoggable, NSCopying, NSSecureCoding, EMMessageListItem>
 @property  EMMessageRepository *repository
 @property  EFQuery *originatingQuery
 @property  EMMailboxScope *mailboxScope
 @property  <EMMailboxTypeResolver> *mailboxTypeResolver
 @property  NSDate *date
 @property  ECSubject *subject
 @property  NSString *summary
 @property  NSArray *senderList
 @property  NSArray *toList
 @property  NSArray *ccList
 @property  BOOL isToMe
 @property  BOOL isCCMe
 @property  ECMessageFlags *flags
 @property  BOOL hasUnflagged
 @property  NSIndexSet *flagColors
 @property  BOOL isVIP
 @property  BOOL isBlocked
 @property  BOOL hasAttachments
 @property  long long conversationNotificationLevel
 @property  unsigned long count
 @property  long long conversationID
 @property  NSArray *mailboxObjectIDs
 @property  NSArray *mailboxes
 @property  <EMCollectionItemID> *displayMessageItemID
 @property  long long _internalID
 @property  EMObjectID *displayMessageObjectID
 @property  EFFuture *displayMessage
 @property  BOOL deleteMovesToTrash
 @property  BOOL supportsArchiving
 @property  BOOL shouldArchiveByDefault
 @property  BOOL isEditable
 @property  <EMCollectionItemID> *itemID
 @property  EMObjectID *objectID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMThread supportsSecureCoding]
  +[EMThread log]

  // instance methods
  -[EMThread isEditable]
  -[EMThread summary]
  -[EMThread copyWithZone:]
  -[EMThread isVIP]
  -[EMThread setMailboxes:]
  -[EMThread isBlocked]
  -[EMThread ef_publicDescription]
  -[EMThread setCount:]
  -[EMThread toList]
  -[EMThread mailboxScope]
  -[EMThread setIsVIP:]
  -[EMThread itemIDForObjectID:]
  -[EMThread notifyChangeObserversAboutChangesByItemIDs:]
  -[EMThread objectIDBelongsToCollection:]
  -[EMThread objectIDForItemID:]
  -[EMThread supportsArchiving]
  -[EMThread setFlags:]
  -[EMThread ccList]
  -[EMThread hasAttachments]
  -[EMThread displayMessage]
  -[EMThread .cxx_destruct]
  -[EMThread query]
  -[EMThread date]
  -[EMThread isToMe]
  -[EMThread isCCMe]
  -[EMThread setSummary:]
  -[EMThread displayMessageObjectID]
  -[EMThread setDate:]
  -[EMThread setConversationID:]
  -[EMThread encodeWithCoder:]
  -[EMThread subject]
  -[EMThread setSubject:]
  -[EMThread senderList]
  -[EMThread setHasAttachments:]
  -[EMThread setConversationNotificationLevel:]
  -[EMThread set_internalID:]
  -[EMThread setIsToMe:]
  -[EMThread setIsCCMe:]
  -[EMThread setToList:]
  -[EMThread setSenderList:]
  -[EMThread setCcList:]
  -[EMThread conversationNotificationLevel]
  -[EMThread setMailboxObjectIDs:]
  -[EMThread hasUnflagged]
  -[EMThread flagColors]
  -[EMThread displayMessageItemID]
  -[EMThread deleteMovesToTrash]
  -[EMThread setHasUnflagged:]
  -[EMThread setFlagColors:]
  -[EMThread setDisplayMessageItemID:]
  -[EMThread _internalID]
  -[EMThread setIsBlocked:]
  -[EMThread itemID]
  -[EMThread setRepository:]
  -[EMThread count]
  -[EMThread _commonInitWithOriginatingQuery:builder:]
  -[EMThread originatingQuery]
  -[EMThread mailboxTypeResolver]
  -[EMThread setMailboxTypeResolver:]
  -[EMThread initWithObjectID:originatingQuery:builder:]
  -[EMThread flags]
  -[EMThread mailboxObjectIDs]
  -[EMThread conversationID]
  -[EMThread shouldArchiveByDefault]
  -[EMThread mailboxes]
  -[EMThread initWithCoder:]
  -[EMThread repository]


EMThreadObjectID : EMObjectID <EFPubliclyDescribable>
 @property  EMThreadCollectionItemID *collectionItemID
 @property  long long conversationID
 @property  EMThreadScope *threadScope
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMThreadObjectID supportsSecureCoding]

  // instance methods
  -[EMThreadObjectID copyWithZone:]
  -[EMThreadObjectID ef_publicDescription]
  -[EMThreadObjectID init]
  -[EMThreadObjectID threadScope]
  -[EMThreadObjectID .cxx_destruct]
  -[EMThreadObjectID initWithCollectionItemID:threadScope:]
  -[EMThreadObjectID encodeWithCoder:]
  -[EMThreadObjectID initWithConversationID:threadScope:]
  -[EMThreadObjectID isEqual:]
  -[EMThreadObjectID collectionItemID]
  -[EMThreadObjectID conversationID]
  -[EMThreadObjectID initWithCoder:]


EMThreadCollectionItemID : NSObject /usr/lib/libSystem.B.dylib <EFCacheable, EMCollectionItemID>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long conversationID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMThreadCollectionItemID supportsSecureCoding]

  // instance methods
  -[EMThreadCollectionItemID copyWithZone:]
  -[EMThreadCollectionItemID init]
  -[EMThreadCollectionItemID cachedSelf]
  -[EMThreadCollectionItemID encodeWithCoder:]
  -[EMThreadCollectionItemID initWithConversationID:]
  -[EMThreadCollectionItemID isEqual:]
  -[EMThreadCollectionItemID conversationID]
  -[EMThreadCollectionItemID initWithCoder:]


EMThreadScope : NSObject /usr/lib/libSystem.B.dylib <EFCacheable, EFPubliclyDescribable, NSCopying, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  EMMailboxScope *mailboxScope
 @property  NSPredicate *filterPredicate
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMThreadScope supportsSecureCoding]

  // instance methods
  -[EMThreadScope filterPredicate]
  -[EMThreadScope copyWithZone:]
  -[EMThreadScope ef_publicDescription]
  -[EMThreadScope cachedSelf]
  -[EMThreadScope mailboxScope]
  -[EMThreadScope .cxx_destruct]
  -[EMThreadScope encodeWithCoder:]
  -[EMThreadScope initWithMailboxScope:filterPredicate:]
  -[EMThreadScope isEqual:]
  -[EMThreadScope initWithCoder:]


EMUbiquitouslyPersistedDictionary : NSObject /usr/lib/libSystem.B.dylib <EFLoggable, EMMutableDictionaryProtocol>
 @property  NSMutableDictionary *storedObjects
 @property  NSString *identifier
 @property  NSUbiquitousKeyValueStore *kvStore
 @property  NSObject<OS_dispatch_queue> *mutationQueue
 @property  NSString *plistPath
 @property  NSUbiquitousKeyValueStore *ubiquitousKeyValueStore
 @property  unsigned long count
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMUbiquitouslyPersistedDictionary log]
  +[EMUbiquitouslyPersistedDictionary sharedDictionaryWithIdentifier:]

  // instance methods
  -[EMUbiquitouslyPersistedDictionary .cxx_destruct]
  -[EMUbiquitouslyPersistedDictionary removeAllObjects]
  -[EMUbiquitouslyPersistedDictionary initWithIdentifier:]
  -[EMUbiquitouslyPersistedDictionary setObject:forKey:]
  -[EMUbiquitouslyPersistedDictionary objectForKey:]
  -[EMUbiquitouslyPersistedDictionary identifier]
  -[EMUbiquitouslyPersistedDictionary plistPath]
  -[EMUbiquitouslyPersistedDictionary _synchronize]
  -[EMUbiquitouslyPersistedDictionary kvStore]
  -[EMUbiquitouslyPersistedDictionary count]
  -[EMUbiquitouslyPersistedDictionary initWithPlistPath:identifier:]
  -[EMUbiquitouslyPersistedDictionary _mergeKVStoreChangedKeys:]
  -[EMUbiquitouslyPersistedDictionary _storeChangedExternally:]
  -[EMUbiquitouslyPersistedDictionary mutationQueue]
  -[EMUbiquitouslyPersistedDictionary storedObjects]
  -[EMUbiquitouslyPersistedDictionary _resetKVStore]
  -[EMUbiquitouslyPersistedDictionary _writeToPlist]
  -[EMUbiquitouslyPersistedDictionary _ensureStoredObjectsAreInKVStore]
  -[EMUbiquitouslyPersistedDictionary _purgeOldestEntries]
  -[EMUbiquitouslyPersistedDictionary ubiquitousKeyValueStore]


EMUndoIndividualAction : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  long long actionType
 @property  NSArray *messageDatabaseIDs
 @property  ECMessageFlagChange *flagChange
 @property  NSURL *destinationMailboxURL

  // class methods
  +[EMUndoIndividualAction supportsSecureCoding]

  // instance methods
  -[EMUndoIndividualAction actionType]
  -[EMUndoIndividualAction .cxx_destruct]
  -[EMUndoIndividualAction encodeWithCoder:]
  -[EMUndoIndividualAction messageDatabaseIDs]
  -[EMUndoIndividualAction setMessageDatabaseIDs:]
  -[EMUndoIndividualAction setFlagChange:]
  -[EMUndoIndividualAction setDestinationMailboxURL:]
  -[EMUndoIndividualAction flagChange]
  -[EMUndoIndividualAction setActionType:]
  -[EMUndoIndividualAction initWithCoder:]
  -[EMUndoIndividualAction destinationMailboxURL]


EMUndoMessageAction : EMMessageChangeAction
 @property  NSArray *individualActions

  // class methods
  +[EMUndoMessageAction supportsSecureCoding]

  // instance methods
  -[EMUndoMessageAction .cxx_destruct]
  -[EMUndoMessageAction encodeWithCoder:]
  -[EMUndoMessageAction individualActions]
  -[EMUndoMessageAction initWithIndividualActions:]
  -[EMUndoMessageAction signpostType]
  -[EMUndoMessageAction initWithCoder:]


EMUserProfileProvider : NSObject /usr/lib/libSystem.B.dylib <EMUserProfileProvider>
 @property  NSDictionary *cache
 @property  NSMutableArray *knownToBeMyEmail
 @property  NSMutableArray *knownToNotBeMyEmail
 @property  CNContactStore *contactStore
 @property  NSSet *allEmailAddresses
 @property  NSSet *accountsEmailAddresses
 @property  NSSet *contactEmailAddresses
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[EMUserProfileProvider doesAddressList:containAddressInSet:]

  // instance methods
  -[EMUserProfileProvider setContactStore:]
  -[EMUserProfileProvider setCache:]
  -[EMUserProfileProvider init]
  -[EMUserProfileProvider contact]
  -[EMUserProfileProvider _contactsChanged:]
  -[EMUserProfileProvider contactStore]
  -[EMUserProfileProvider .cxx_destruct]
  -[EMUserProfileProvider cache]
  -[EMUserProfileProvider isMyEmailAddressContainedInAddressList:]
  -[EMUserProfileProvider _accountsChanged:]
  -[EMUserProfileProvider contactWithKeysToFetch:]
  -[EMUserProfileProvider refreshCachedValues]
  -[EMUserProfileProvider _isMyEmailAddressContainedInAddressStrings:]
  -[EMUserProfileProvider allEmailAddresses]
  -[EMUserProfileProvider knownToBeMyEmail]
  -[EMUserProfileProvider knownToNotBeMyEmail]
  -[EMUserProfileProvider _accountsEmailAddresses]
  -[EMUserProfileProvider accountsEmailAddresses]
  -[EMUserProfileProvider waitForOutstandingCacheRefreshes]
  -[EMUserProfileProvider contactEmailAddresses]
  -[EMUserProfileProvider _contactEmailAddresses]


EMVIP : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *identifier
 @property  NSString *name
 @property  NSString *displayName
 @property  EAEmailAddressSet *emailAddresses

  // class methods
  +[EMVIP supportsSecureCoding]

  // instance methods
  -[EMVIP emailAddresses]
  -[EMVIP .cxx_destruct]
  -[EMVIP name]
  -[EMVIP encodeWithCoder:]
  -[EMVIP identifier]
  -[EMVIP isEqual:]
  -[EMVIP _commonInitWithIdentifier:name:emailAddresses:displayName:]
  -[EMVIP _isEqualToVIP:]
  -[EMVIP initWithIdentifier:name:emailAddresses:]
  -[EMVIP displayName]
  -[EMVIP initWithCoder:]


EMVIPManager : NSObject /usr/lib/libSystem.B.dylib <EFFutureDelegate, EFLoggable, EMVIPManagerObserver, EMVIPReader_Private, EMVIPManager>
 @property  EMRemoteConnection *connection
 @property  EFPromise *vipsByIdentifierPromise
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *allVIPWaitForResult
 @property  NSSet *allVIPs
 @property  EAEmailAddressSet *allVIPEmailAddresses
 @property  BOOL hasVIPs

  // class methods
  +[EMVIPManager remoteInterface]
  +[EMVIPManager log]

  // instance methods
  -[EMVIPManager _reset]
  -[EMVIPManager initWithRemoteConnection:]
  -[EMVIPManager allVIPs]
  -[EMVIPManager init]
  -[EMVIPManager observer:updatedVIPs:removedVIPs:]
  -[EMVIPManager didStartBlockingMainThreadForFuture:]
  -[EMVIPManager dealloc]
  -[EMVIPManager vipWithIdentifier:]
  -[EMVIPManager .cxx_destruct]
  -[EMVIPManager allVIPEmailAddresses]
  -[EMVIPManager _vipsByIdentifier]
  -[EMVIPManager setConnection:]
  -[EMVIPManager hasVIPs]
  -[EMVIPManager removeVIPsWithEmailAddresses:]
  -[EMVIPManager setVipsByIdentifierPromise:]
  -[EMVIPManager _startObservingVIPChangesIfNecessary]
  -[EMVIPManager didFinishBlockingMainThreadForFuture:]
  -[EMVIPManager isVIPAddress:]
  -[EMVIPManager vipsByIdentifierPromise]
  -[EMVIPManager observer:gotVIPs:]
  -[EMVIPManager saveVIPs:]
  -[EMVIPManager connection]
  -[EMVIPManager removeVIPsWithIdentifiers:]
  -[EMVIPManager allVIPWaitForResult]


CNContact(EmailContactAdditions)
	// class methods
	+[CNContact(EmailContactAdditions) em_contactWithPersonNameComponents:emailAddress:]
	+[CNContact(EmailContactAdditions) em_contactWithPersonNameComponents:emailAddress:allowInvalidEmailAddress:]
	+[CNContact(EmailContactAdditions) em_contactFromEmailAddress:]

CNContactStore(EmailContactUtilities)
	// instance methods
	-[CNContactStore(EmailContactUtilities) em_fetchContactForEmailAddress:keysToFetch:createIfNeeded:error:]
	-[CNContactStore(EmailContactUtilities) _contactForEmailAddress:keysToFetch:error:]
	-[CNContactStore(EmailContactUtilities) em_onScheduler:contactFutureForEmailAddress:keysToFetch:]
	-[CNContactStore(EmailContactUtilities) em_fetchContactForEmailAddress:keysToFetch:createIfNeeded:]

ECEmailAddress(EMECEmailAddressAdditions)
	// instance methods
	-[ECEmailAddress(EMECEmailAddressAdditions) em_displayableString]

(EMMessageListItem)
	// instance methods
	-[(EMMessageListItem) em_messageListItemTotalCount]

(EMNSErrorAdditions)
	// class methods
	+[(EMNSErrorAdditions) em_unknownError]
	+[(EMNSErrorAdditions) em_itemNotFoundError]

	// instance methods
	-[(EMNSErrorAdditions) em_isItemNotFoundError]
	-[(EMNSErrorAdditions) em_isUnknwonError]

(EMSearchableIndexQueryAdditions)
	// instance methods
	-[(EMSearchableIndexQueryAdditions) em_stringForQuotingWithCharacter:]

NSPredicate(EMSearchableIndexQueryGenerator)
	// instance methods
	-[NSPredicate(EMSearchableIndexQueryGenerator) em_searchableIndexQueryGenerator]

NSComparisonPredicate(EMSearchableIndexQueryGenerator)
	// instance methods
	-[NSComparisonPredicate(EMSearchableIndexQueryGenerator) em_searchableIndexQueryGenerator]

NSCompoundPredicate(EMSearchableIndexQueryGenerator)
	// instance methods
	-[NSCompoundPredicate(EMSearchableIndexQueryGenerator) em_searchableIndexQueryGenerator]

NSUserDefaults(Email)
	// class methods
	+[NSUserDefaults(Email) em_defaultExistsForKey:]
	+[NSUserDefaults(Email) em_userDefaults]
	+[NSUserDefaults(Email) em_migrateDefault:]

01 00 0100 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountCredential 
01 00 0400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 0400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFormatter 
01 00 0400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStore 
01 00 0400 /System/Library/Frameworks/Contacts.framework/Contacts: CNLabeledValue 
01 00 0400 /System/Library/Frameworks/Contacts.framework/Contacts: CNMutableContact 
01 00 0800 /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight: CSSearchQuery 
01 00 0800 /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight: CSSearchQueryContext 
01 00 0800 /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight: CSSearchableItem 
01 00 0800 /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight: CSTopHitSearchQuery 
01 00 0900 /System/Library/PrivateFrameworks/EmailAddressing.framework/EmailAddressing: EAEmailAddressLists 
01 00 0900 /System/Library/PrivateFrameworks/EmailAddressing.framework/EmailAddressing: EAEmailAddressParser 
01 00 0900 /System/Library/PrivateFrameworks/EmailAddressing.framework/EmailAddressing: EAEmailAddressSet 
01 00 0a00 /System/Library/PrivateFrameworks/EmailCore.framework/EmailCore: ECEmailAddress 
01 00 0a00 /System/Library/PrivateFrameworks/EmailCore.framework/EmailCore: ECEmailAddressFormatter 
01 00 0a00 /System/Library/PrivateFrameworks/EmailCore.framework/EmailCore: ECMessageFlagChange 
01 00 0a00 /System/Library/PrivateFrameworks/EmailCore.framework/EmailCore: ECMessageFlags 
01 00 0a00 /System/Library/PrivateFrameworks/EmailCore.framework/EmailCore: ECSecureMIMETrustEvaluation 
01 00 0a00 /System/Library/PrivateFrameworks/EmailCore.framework/EmailCore: ECSubject 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFCancelationToken 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFDevice 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFFuture 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFInvocationToken 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFLazyCache 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFObservable 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFPair 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFPrivacy 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFPromise 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFQuery 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFSandboxedURLWrapper 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFScheduler 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFSearchableIndexObjectPropertyMapper 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFSortDescriptor 
01 00 0b00 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFStringHash 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSByteCountFormatter 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSComparisonPredicate 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExpression 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 0f00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponentsFormatter 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUbiquitousKeyValueStore 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
