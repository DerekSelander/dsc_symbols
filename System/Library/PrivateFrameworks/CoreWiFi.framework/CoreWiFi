|| __DATA.__objc_data _OBJC_CLASS_$_CWFAWDLPeerContext
|| __DATA.__objc_data _OBJC_CLASS_$_CWFAutoJoinManager
|| __DATA.__objc_data _OBJC_CLASS_$_CWFAutoJoinMetric
|| __DATA.__objc_data _OBJC_CLASS_$_CWFEAPCredentials
|| __DATA.__objc_data _OBJC_CLASS_$_CWFRangingMeasurement
|| __DATA.__objc_data _OBJC_METACLASS_$_CWFAWDLPeerContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CWFAutoJoinManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CWFAutoJoinMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_CWFEAPCredentials
|| __DATA.__objc_data _OBJC_METACLASS_$_CWFRangingMeasurement
|| __DATA_CONST.__const _CWFApple80211ErrorDomain
|| __DATA_CONST.__const _CWFBSSPropertyBSSIDKey
|| __DATA_CONST.__const _CWFBSSPropertyChannelFlagsKey
|| __DATA_CONST.__const _CWFBSSPropertyChannelKey
|| __DATA_CONST.__const _CWFBSSPropertyLastAssociatedAtKey
|| __DATA_CONST.__const _CWFBSSPropertyLocationAccuracyKey
|| __DATA_CONST.__const _CWFBSSPropertyLocationLatitudeKey
|| __DATA_CONST.__const _CWFBSSPropertyLocationLongitudeKey
|| __DATA_CONST.__const _CWFBSSPropertyLocationTimestampKey
|| __DATA_CONST.__const _CWFBSSPropertyOSSpecificAttributesKey
|| __DATA_CONST.__const _CWFEventAutoJoinStatusKey
|| __DATA_CONST.__const _CWFEventJoinStatusKey
|| __DATA_CONST.__const _CWFEventLinkChangeStatusKey
|| __DATA_CONST.__const _CWFEventLinkQualityMetricKey
|| __DATA_CONST.__const _CWFEventRoamStatusKey
|| __DATA_CONST.__const _CWFInternalEventAutoJoinResultKey
|| __DATA_CONST.__const _CWFInternalEventAutoJoinStateKey
|| __DATA_CONST.__const _CWFInternalEventAutoJoinTriggerKey
|| __DATA_CONST.__const _CWFInternalEventErrorKey
|| __DATA_CONST.__const _CWFInternalEventIsAutoJoinKey
|| __DATA_CONST.__const _CWFInternalEventScanResultKey
|| __DATA_CONST.__const _CWFKnownNetworksStoreIdentifier
|| __DATA_CONST.__const _CWFManagerErrorDomain
|| __DATA_CONST.__const _CWFNetworkProfilePropertyAddReasonKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyAddedAtKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyAutoJoinDisabledKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyBSSListKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyBundleIDKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyCaptiveProfileKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyCarPlayUUIDKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyEAPProfileKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyHiddenStateKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyLastDiscoveredAtKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyLastJoinedBySystemAtKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyLastJoinedByUserAtKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyLowDataModeKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyMovingKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyNetworkGroupIDKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyNetworkGroupPriorityKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyOSSpecificAttributesKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPasspointCellularNetworkInfoKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPasspointDisplayedOperatorNameKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPasspointDomainNameKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPasspointNAIRealmNameListKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPasspointRoamingConsortiumListKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPasspointServiceProviderRoamingEnabledKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPasswordSharingDisabledKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPayloadUUIDKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPersonalHotspotKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPrivacyProxyBlockedReasonKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPrivacyProxyEnabledKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyPublicKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertySSIDKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertySupportedSecurityTypesKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertySystemModeKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyUpdatedAtKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyUserPreferredNetworkNamesKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyUserPreferredPasspointDomainsKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyWAPISubtypeKey
|| __DATA_CONST.__const _CWFNetworkProfilePropertyWEPSubtypeKey
|| __DATA_CONST.__const _CWFScanResultPropertyOSSpecificAttributesKey
|| __DATA_CONST.__const _CWFXPCANQPParamsKey
|| __DATA_CONST.__const _CWFXPCAWDLPeerAssistedDiscoveryParamsKey
|| __DATA_CONST.__const _CWFXPCAWDLPeerTrafficRegistrationKey
|| __DATA_CONST.__const _CWFXPCActivityKey
|| __DATA_CONST.__const _CWFXPCAssocParamsKey
|| __DATA_CONST.__const _CWFXPCAutoHotspotModeKey
|| __DATA_CONST.__const _CWFXPCAutoJoinParamsKey
|| __DATA_CONST.__const _CWFXPCChannelKey
|| __DATA_CONST.__const _CWFXPCCountryCodeKey
|| __DATA_CONST.__const _CWFXPCDisassocReasonKey
|| __DATA_CONST.__const _CWFXPCEventIDKey
|| __DATA_CONST.__const _CWFXPCNetworkProfileKey
|| __DATA_CONST.__const _CWFXPCNetworkProfilePropertiesKey
|| __DATA_CONST.__const _CWFXPCPowerKey
|| __DATA_CONST.__const _CWFXPCRangeableKey
|| __DATA_CONST.__const _CWFXPCRangingIdentifierKey
|| __DATA_CONST.__const _CWFXPCRangingPeerListKey
|| __DATA_CONST.__const _CWFXPCRangingTimeoutKey
|| __DATA_CONST.__const _CWFXPCRemoveKey
|| __DATA_CONST.__const _CWFXPCRemoveReasonKey
|| __DATA_CONST.__const _CWFXPCResultKey
|| __DATA_CONST.__const _CWFXPCScanParamsKey
|| __DATA_CONST.__const _CWFXPCScanResultKey
|| __DATA_CONST.__const _CWFXPCThermalIndexKey
|| __DATA_CONST.__const _CWFXPCUserAutoJoinStateKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFANQPParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFAWDLPeerAssistedDiscoveryParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFAWDLPeerTrafficRegistration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFAssocParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFAutoJoinParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFAutoJoinStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFBSS
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFChannel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFEventID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFJoinStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFKeyValueStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFLinkChangeStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFLinkQualityMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFNetworkProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFRangingPeer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFRangingResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFRequestParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFRoamStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFScanParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFScanResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFXPCConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFXPCEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFXPCManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CWFXPCRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFANQPParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFAWDLPeerAssistedDiscoveryParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFAWDLPeerTrafficRegistration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFAssocParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFAutoJoinParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFAutoJoinStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFBSS
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFChannel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFEventID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFJoinStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFKeyValueStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFLinkChangeStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFLinkQualityMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFNetworkProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFRangingPeer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFRangingResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFRequestParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFRoamStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFScanParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFScanResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFXPCConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFXPCEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFXPCManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CWFXPCRequest
|| __TEXT.__const _CWFNetworkConfigurationTimeout
|| __TEXT.__text _CWFBootArgs
|| __TEXT.__text _CWFComparePHYMode
|| __TEXT.__text _CWFCompareSecurityType
|| __TEXT.__text _CWFConvertPropertyListToJSON
|| __TEXT.__text _CWFCorrectEthernetAddressString
|| __TEXT.__text _CWFDebugDescriptionForLQMSummary
|| __TEXT.__text _CWFEthernetAddressDataFromString
|| __TEXT.__text _CWFEthernetAddressStringFromData
|| __TEXT.__text _CWFFastestPHYMode
|| __TEXT.__text _CWFFilteredScanResults
|| __TEXT.__text _CWFHexadecimalStringFromData
|| __TEXT.__text _CWFHumanReadableStringFromData
|| __TEXT.__text _CWFLog
|| __TEXT.__text _CWFMachineSerialNumber
|| __TEXT.__text _CWFSecItemQueryPassword
|| __TEXT.__text _CWFSecItemSetPassword
|| __TEXT.__text _CWFSlowestPHYMode
|| __TEXT.__text _CWFStrongestSecurityType
|| __TEXT.__text _CWFWeakestSecurityType
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreAnalytics: _OBJC_CLASS_$_AnalyticsEventObserver
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayContainsValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayCreateMutableCopy
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFArraySetValueAtIndex
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyInfoDictionaryForURL
__ CoreFoundation: _CFDataAppendBytes
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateMutable
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDictionaryAddValue
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryGetValueIfPresent
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFHash
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesCopyKeyList
__ CoreFoundation: _CFPreferencesCopyMultiple
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesFlushCaches
__ CoreFoundation: _CFPreferencesSetMultiple
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopTimerInvalidate
__ CoreFoundation: _CFSocketInvalidate
__ CoreFoundation: _CFStringAppendCString
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateMutable
__ CoreFoundation: _CFStringCreateWithBytes
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetBytes
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetCStringPtr
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFURLCreateWithFileSystemPath
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: __CFPreferencesSetAccessRestricted
__ CoreFoundation: __CFPreferencesSetFileProtectionClass
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleIdentifierKey
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesAnyUser
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSUbiquitousKeyValueStoreChangeReasonKey
__ Foundation: _NSUbiquitousKeyValueStoreChangedKeysKey
__ Foundation: _NSUbiquitousKeyValueStoreDidChangeExternallyNotification
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUbiquitousKeyValueStore
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_METACLASS_$_NSBlockOperation
__ FrontBoardServices: _FBSSceneVisibilityEndowmentNamespace
__ IOKit: _IOBSDNameMatching
__ IOKit: _IOConnectCallStructMethod
__ IOKit: _IOIteratorNext
__ IOKit: _IOMasterPort
__ IOKit: _IONotificationPortCreate
__ IOKit: _IONotificationPortDestroy
__ IOKit: _IONotificationPortSetDispatchQueue
__ IOKit: _IOObjectConformsTo
__ IOKit: _IOObjectRelease
__ IOKit: _IORegistryEntryCreateCFProperties
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IORegistryEntryFromPath
__ IOKit: _IORegistryEntrySearchCFProperty
__ IOKit: _IOServiceAddMatchingNotification
__ IOKit: _IOServiceClose
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceGetMatchingServices
__ IOKit: _IOServiceMatching
__ IOKit: _IOServiceNameMatching
__ IOKit: _IOServiceOpen
__ IOKit: _kIOMasterPortDefault
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessHandle
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessIdentifier
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessMonitor
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessPredicate
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessStateDescriptor
__ Security: _SecItemAdd
__ Security: _SecItemCopyMatching
__ Security: _SecItemDelete
__ Security: _SecItemUpdate
__ Security: _kSecAttrAccessGroup
__ Security: _kSecAttrAccessible
__ Security: _kSecAttrAccessibleAfterFirstUnlock
__ Security: _kSecAttrAccount
__ Security: _kSecAttrDescription
__ Security: _kSecAttrLabel
__ Security: _kSecAttrService
__ Security: _kSecAttrSynchronizable
__ Security: _kSecAttrSynchronizableAny
__ Security: _kSecClass
__ Security: _kSecClassGenericPassword
__ Security: _kSecReturnData
__ Security: _kSecUseSystemKeychain
__ Security: _kSecValueData
__ SoftLinking: __sl_dlopen
__ SystemConfiguration: _DHCPInfoGetLeaseExpirationTime
__ SystemConfiguration: _DHCPInfoGetLeaseStartTime
__ SystemConfiguration: _SCDynamicStoreCopyDHCPInfo
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkGlobalEntity
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkInterfaceEntity
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkServiceEntity
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemConfiguration: _SCNetworkInterfaceCopyAll
__ SystemConfiguration: _SCNetworkInterfaceGetBSDName
__ SystemConfiguration: _SCNetworkInterfaceGetHardwareAddressString
__ SystemConfiguration: _SCNetworkInterfaceGetInterface
__ SystemConfiguration: _SCNetworkInterfaceGetInterfaceType
__ SystemConfiguration: _SCNetworkReachabilityCreateWithAddress
__ SystemConfiguration: _SCNetworkReachabilityGetFlags
__ SystemConfiguration: _SCNetworkReachabilitySetCallback
__ SystemConfiguration: _SCNetworkReachabilitySetDispatchQueue
__ SystemConfiguration: _SCNetworkServiceCopy
__ SystemConfiguration: _SCNetworkServiceGetEnabled
__ SystemConfiguration: _SCNetworkServiceGetInterface
__ SystemConfiguration: _SCNetworkServiceGetName
__ SystemConfiguration: _SCNetworkServiceGetServiceID
__ SystemConfiguration: _SCNetworkSetCopyCurrent
__ SystemConfiguration: _SCNetworkSetCopyServices
__ SystemConfiguration: _SCNetworkSetGetServiceOrder
__ SystemConfiguration: _SCPreferencesCreate
__ SystemConfiguration: _SCPreferencesSynchronize
__ SystemConfiguration: _kSCCompAnyRegex
__ SystemConfiguration: _kSCDynamicStoreDomainSetup
__ SystemConfiguration: _kSCDynamicStoreDomainState
__ SystemConfiguration: _kSCDynamicStorePropNetPrimaryInterface
__ SystemConfiguration: _kSCDynamicStorePropNetPrimaryService
__ SystemConfiguration: _kSCEntNetAirPort
__ SystemConfiguration: _kSCEntNetDHCP
__ SystemConfiguration: _kSCEntNetDNS
__ SystemConfiguration: _kSCEntNetIPv4
__ SystemConfiguration: _kSCEntNetIPv6
__ SystemConfiguration: _kSCEntNetLink
__ SystemConfiguration: _kSCEntNetProxies
__ SystemConfiguration: _kSCPropNetDNSDomainName
__ SystemConfiguration: _kSCPropNetDNSSearchDomains
__ SystemConfiguration: _kSCPropNetDNSServerAddresses
__ SystemConfiguration: _kSCPropNetIPv4Addresses
__ SystemConfiguration: _kSCPropNetIPv4BroadcastAddresses
__ SystemConfiguration: _kSCPropNetIPv4ConfigMethod
__ SystemConfiguration: _kSCPropNetIPv4Router
__ SystemConfiguration: _kSCPropNetIPv4SubnetMasks
__ SystemConfiguration: _kSCPropNetIPv6Addresses
__ SystemConfiguration: _kSCPropNetIPv6ConfigMethod
__ SystemConfiguration: _kSCPropNetIPv6Flags
__ SystemConfiguration: _kSCPropNetIPv6PrefixLength
__ SystemConfiguration: _kSCPropNetIPv6Router
__ SystemConfiguration: _kSCPropNetLinkActive
__ libSystem.B.dylib: _CCHmac
__ libSystem.B.dylib: _CC_MD5_Final
__ libSystem.B.dylib: _CC_MD5_Init
__ libSystem.B.dylib: _CC_MD5_Update
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Init
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __DefaultRuneLocale
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___maskrune
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcat_chk
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: ___tolower
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _bootstrap_port
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _ether_aton
__ libSystem.B.dylib: _ether_ntoa
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fputs
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeifaddrs
__ libSystem.B.dylib: _getenv
__ libSystem.B.dylib: _getifaddrs
__ libSystem.B.dylib: _if_nametoindex
__ libSystem.B.dylib: _ioctl
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_is_valid_token
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _printf
__ libSystem.B.dylib: _proc_pidpath_audittoken
__ libSystem.B.dylib: _pthread_mutex_destroy
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _read
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strlcat
__ libSystem.B.dylib: _strlcpy
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strspn
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _syslog
__ libSystem.B.dylib: _xpc_connection_activate
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_release
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
CWFXPCEventProxy : NSObject <CWFXPCEventProtocolPrivate, CWFXPCEventProtocolPublic>
 @property  <CWFXPCEventProxyDelegate> *delegate

  // instance methods
  -[CWFXPCEventProxy .cxx_destruct]
  -[CWFXPCEventProxy setDelegate:]
  -[CWFXPCEventProxy init]
  -[CWFXPCEventProxy receivedAcknowledgedXPCEvent:reply:]
  -[CWFXPCEventProxy delegate]
  -[CWFXPCEventProxy __acknowledgeEventWithUUID:]
  -[CWFXPCEventProxy receivedXPCEvent:]


CWFSCNetworkReachability : NSObject
 @property  @? eventHandler

  // instance methods
  -[CWFSCNetworkReachability stopEventMonitoring]
  -[CWFSCNetworkReachability .cxx_destruct]
  -[CWFSCNetworkReachability isMonitoringEvents]
  -[CWFSCNetworkReachability startEventMonitoring]
  -[CWFSCNetworkReachability init]
  -[CWFSCNetworkReachability eventHandler]
  -[CWFSCNetworkReachability flags]
  -[CWFSCNetworkReachability setEventHandler:]
  -[CWFSCNetworkReachability dealloc]


CWFAutoJoinParameters : NSObject <NSCopying, NSSecureCoding>
 @property  long long trigger
 @property  long long mode
 @property  CWFNetworkProfile *targetNetworkProfile

  // class methods
  +[CWFAutoJoinParameters supportsSecureCoding]

  // instance methods
  -[CWFAutoJoinParameters initWithCoder:]
  -[CWFAutoJoinParameters .cxx_destruct]
  -[CWFAutoJoinParameters isEqual:]
  -[CWFAutoJoinParameters setMode:]
  -[CWFAutoJoinParameters copyWithZone:]
  -[CWFAutoJoinParameters mode]
  -[CWFAutoJoinParameters setTrigger:]
  -[CWFAutoJoinParameters encodeWithCoder:]
  -[CWFAutoJoinParameters trigger]
  -[CWFAutoJoinParameters targetNetworkProfile]
  -[CWFAutoJoinParameters isEqualToAutoJoinParameters:]
  -[CWFAutoJoinParameters setTargetNetworkProfile:]


CWFAWDLPeerTrafficRegistration : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *serviceName
 @property  BOOL active
 @property  int sessionFlags
 @property  unsigned long desiredBandwidth
 @property  unsigned long desiredLatency
 @property  unsigned long preferredChannel
 @property  unsigned long secondaryPreferredChannel
 @property  NSArray *peerContextList

  // class methods
  +[CWFAWDLPeerTrafficRegistration supportsSecureCoding]

  // instance methods
  -[CWFAWDLPeerTrafficRegistration setServiceName:]
  -[CWFAWDLPeerTrafficRegistration serviceName]
  -[CWFAWDLPeerTrafficRegistration initWithCoder:]
  -[CWFAWDLPeerTrafficRegistration preferredChannel]
  -[CWFAWDLPeerTrafficRegistration isActive]
  -[CWFAWDLPeerTrafficRegistration .cxx_destruct]
  -[CWFAWDLPeerTrafficRegistration sessionFlags]
  -[CWFAWDLPeerTrafficRegistration isEqual:]
  -[CWFAWDLPeerTrafficRegistration setSessionFlags:]
  -[CWFAWDLPeerTrafficRegistration setActive:]
  -[CWFAWDLPeerTrafficRegistration copyWithZone:]
  -[CWFAWDLPeerTrafficRegistration setPreferredChannel:]
  -[CWFAWDLPeerTrafficRegistration encodeWithCoder:]
  -[CWFAWDLPeerTrafficRegistration desiredBandwidth]
  -[CWFAWDLPeerTrafficRegistration desiredLatency]
  -[CWFAWDLPeerTrafficRegistration secondaryPreferredChannel]
  -[CWFAWDLPeerTrafficRegistration peerContextList]
  -[CWFAWDLPeerTrafficRegistration isEqualToAWDLPeerTrafficRegistration:]
  -[CWFAWDLPeerTrafficRegistration setDesiredBandwidth:]
  -[CWFAWDLPeerTrafficRegistration setDesiredLatency:]
  -[CWFAWDLPeerTrafficRegistration setSecondaryPreferredChannel:]
  -[CWFAWDLPeerTrafficRegistration setPeerContextList:]


CWFLinkChangeStatus : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  NSString *interfaceName
 @property  BOOL linkDown
 @property  BOOL involuntaryLinkDown
 @property  int reason
 @property  long long subreason
 @property  long long RSSI
 @property  long long noise
 @property  float CCA

  // class methods
  +[CWFLinkChangeStatus supportsSecureCoding]

  // instance methods
  -[CWFLinkChangeStatus initWithCoder:]
  -[CWFLinkChangeStatus setRSSI:]
  -[CWFLinkChangeStatus isInvoluntaryLinkDown]
  -[CWFLinkChangeStatus RSSI]
  -[CWFLinkChangeStatus setCCA:]
  -[CWFLinkChangeStatus .cxx_destruct]
  -[CWFLinkChangeStatus setSubreason:]
  -[CWFLinkChangeStatus interfaceName]
  -[CWFLinkChangeStatus setLinkDown:]
  -[CWFLinkChangeStatus setInterfaceName:]
  -[CWFLinkChangeStatus isEqual:]
  -[CWFLinkChangeStatus isEqualToLinkChangeStatus:]
  -[CWFLinkChangeStatus reason]
  -[CWFLinkChangeStatus setNoise:]
  -[CWFLinkChangeStatus setInvoluntaryLinkDown:]
  -[CWFLinkChangeStatus subreason]
  -[CWFLinkChangeStatus timestamp]
  -[CWFLinkChangeStatus setReason:]
  -[CWFLinkChangeStatus copyWithZone:]
  -[CWFLinkChangeStatus noise]
  -[CWFLinkChangeStatus CCA]
  -[CWFLinkChangeStatus isLinkDown]
  -[CWFLinkChangeStatus setTimestamp:]
  -[CWFLinkChangeStatus encodeWithCoder:]


CWFIO80211 : NSObject
 @property  @? eventHandler

  // instance methods
  -[CWFIO80211 stopEventMonitoring]
  -[CWFIO80211 IO80211InterfaceInfo:error:]
  -[CWFIO80211 .cxx_destruct]
  -[CWFIO80211 isMonitoringEvents]
  -[CWFIO80211 IO80211ControllerInfo:error:]
  -[CWFIO80211 startEventMonitoring]
  -[CWFIO80211 init]
  -[CWFIO80211 IO80211SkywalkInterfaceInfo:error:]
  -[CWFIO80211 eventHandler]
  -[CWFIO80211 setEventHandler:]
  -[CWFIO80211 __IO80211InfoConformingToService:interfaceName:]
  -[CWFIO80211 __IO80211InfoMatchingService:interfaceName:]
  -[CWFIO80211 dealloc]
  -[CWFIO80211 IO80211VirtualInterfaceInfo:error:]


CWFChannel : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long channel
 @property  int flags
 @property  int width
 @property  int band
 @property  BOOL is2GHz
 @property  BOOL is5GHz
 @property  BOOL isDFS

  // class methods
  +[CWFChannel supportsSecureCoding]

  // instance methods
  -[CWFChannel width]
  -[CWFChannel setFlags:]
  -[CWFChannel initWithCoder:]
  -[CWFChannel setChannel:]
  -[CWFChannel is5GHz]
  -[CWFChannel band]
  -[CWFChannel isEqual:]
  -[CWFChannel is2GHz]
  -[CWFChannel flags]
  -[CWFChannel channel]
  -[CWFChannel isDFS]
  -[CWFChannel isEqualToChannel:]
  -[CWFChannel copyWithZone:]
  -[CWFChannel encodeWithCoder:]


CWFXPCEvent : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  long long type
 @property  long long internalType
 @property  NSString *interfaceName
 @property  NSDictionary *info
 @property  NSDate *timestamp
 @property  unsigned long acknowledgementTimeout

  // class methods
  +[CWFXPCEvent supportsSecureCoding]

  // instance methods
  -[CWFXPCEvent UUID]
  -[CWFXPCEvent initWithCoder:]
  -[CWFXPCEvent internalType]
  -[CWFXPCEvent setType:]
  -[CWFXPCEvent setInfo:]
  -[CWFXPCEvent .cxx_destruct]
  -[CWFXPCEvent info]
  -[CWFXPCEvent interfaceName]
  -[CWFXPCEvent init]
  -[CWFXPCEvent setInterfaceName:]
  -[CWFXPCEvent isEqual:]
  -[CWFXPCEvent __descriptionForEventType]
  -[CWFXPCEvent type]
  -[CWFXPCEvent timestamp]
  -[CWFXPCEvent acknowledgementTimeout]
  -[CWFXPCEvent isEqualToXPCEvent:]
  -[CWFXPCEvent copyWithZone:]
  -[CWFXPCEvent setInternalType:]
  -[CWFXPCEvent setTimestamp:]
  -[CWFXPCEvent encodeWithCoder:]
  -[CWFXPCEvent setUUID:]
  -[CWFXPCEvent setAcknowledgementTimeout:]


CWFAWDLPeerAssistedDiscoveryParameters : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long localMasterChannel
 @property  unsigned long localPreferredChannel
 @property  unsigned long localSecondaryPreferredChannel
 @property  unsigned long localAssistedDiscoveryMetric
 @property  NSString *peerMACAddress
 @property  unsigned long peerMasterChannel
 @property  unsigned long peerPreferredChannel
 @property  unsigned long peerSecondaryPreferredChannel
 @property  unsigned long peerAssistedDiscoveryMetric
 @property  int peerSupportedChannelFlags
 @property  BOOL followMode
 @property  unsigned long followModePreferredBand

  // class methods
  +[CWFAWDLPeerAssistedDiscoveryParameters supportsSecureCoding]

  // instance methods
  -[CWFAWDLPeerAssistedDiscoveryParameters initWithCoder:]
  -[CWFAWDLPeerAssistedDiscoveryParameters .cxx_destruct]
  -[CWFAWDLPeerAssistedDiscoveryParameters isEqual:]
  -[CWFAWDLPeerAssistedDiscoveryParameters copyWithZone:]
  -[CWFAWDLPeerAssistedDiscoveryParameters encodeWithCoder:]
  -[CWFAWDLPeerAssistedDiscoveryParameters localMasterChannel]
  -[CWFAWDLPeerAssistedDiscoveryParameters localPreferredChannel]
  -[CWFAWDLPeerAssistedDiscoveryParameters localSecondaryPreferredChannel]
  -[CWFAWDLPeerAssistedDiscoveryParameters localAssistedDiscoveryMetric]
  -[CWFAWDLPeerAssistedDiscoveryParameters peerMACAddress]
  -[CWFAWDLPeerAssistedDiscoveryParameters peerMasterChannel]
  -[CWFAWDLPeerAssistedDiscoveryParameters peerPreferredChannel]
  -[CWFAWDLPeerAssistedDiscoveryParameters peerSecondaryPreferredChannel]
  -[CWFAWDLPeerAssistedDiscoveryParameters peerAssistedDiscoveryMetric]
  -[CWFAWDLPeerAssistedDiscoveryParameters peerSupportedChannelFlags]
  -[CWFAWDLPeerAssistedDiscoveryParameters followMode]
  -[CWFAWDLPeerAssistedDiscoveryParameters followModePreferredBand]
  -[CWFAWDLPeerAssistedDiscoveryParameters isEqualToAWDLParameters:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setLocalMasterChannel:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setLocalPreferredChannel:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setLocalSecondaryPreferredChannel:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setLocalAssistedDiscoveryMetric:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setPeerMACAddress:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setPeerMasterChannel:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setPeerPreferredChannel:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setPeerSecondaryPreferredChannel:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setPeerAssistedDiscoveryMetric:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setPeerSupportedChannelFlags:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setFollowMode:]
  -[CWFAWDLPeerAssistedDiscoveryParameters setFollowModePreferredBand:]


CWFApple80211 : NSObject
 @property  NSString *interfaceName
 @property  @? eventHandler

  // instance methods
  -[CWFApple80211 cca:]
  -[CWFApple80211 AWDLContinuousElectionAlgorithmEnabled:]
  -[CWFApple80211 AWDLPeerDatabase:]
  -[CWFApple80211 BSSID:]
  -[CWFApple80211 powerOn:]
  -[CWFApple80211 linkChangedEventData:]
  -[CWFApple80211 initWithInterfaceName:]
  -[CWFApple80211 __hardwareSupportedChannels:]
  -[CWFApple80211 AWDLMasterChannel:]
  -[CWFApple80211 perAntennaRSSI:]
  -[CWFApple80211 txRate:]
  -[CWFApple80211 virtualInterfaceRole:]
  -[CWFApple80211 AWDLAvailabilityWindowAPAlignment:]
  -[CWFApple80211 __MCSIndex:]
  -[CWFApple80211 supportedPHYModes:]
  -[CWFApple80211 numberOfSpatialStreams:]
  -[CWFApple80211 channel:]
  -[CWFApple80211 AWDLStrategy:]
  -[CWFApple80211 __supportedChannelsWithCountryCode:error:]
  -[CWFApple80211 activePHYMode:]
  -[CWFApple80211 DTIMInterval:]
  -[CWFApple80211 AWDLElectionMetric:]
  -[CWFApple80211 desense:]
  -[CWFApple80211 AWDLSyncParameters:]
  -[CWFApple80211 __apple80211RefWithInterfaceName:]
  -[CWFApple80211 bluetoothCoexistenceConfig:]
  -[CWFApple80211 capabilities:]
  -[CWFApple80211 startMonitoringEventWithType:interfaceName:]
  -[CWFApple80211 bluetoothCoexistenceMode:]
  -[CWFApple80211 .cxx_destruct]
  -[CWFApple80211 SSID:]
  -[CWFApple80211 interfaceNames:]
  -[CWFApple80211 RSSI:]
  -[CWFApple80211 noise:]
  -[CWFApple80211 AWDLSyncState:]
  -[CWFApple80211 setAWDLPeerTrafficRegistration:error:]
  -[CWFApple80211 AWDLOpMode:]
  -[CWFApple80211 virtualInterfaceParent:]
  -[CWFApple80211 interfaceName]
  -[CWFApple80211 __setupEventMonitoring]
  -[CWFApple80211 AWDLAFTxMode:]
  -[CWFApple80211 txPower:]
  -[CWFApple80211 authType:]
  -[CWFApple80211 desenseLevel:]
  -[CWFApple80211 LQMSummary:]
  -[CWFApple80211 init]
  -[CWFApple80211 isAWDLEnabled]
  -[CWFApple80211 txChainPower:]
  -[CWFApple80211 AWDLElectionID:]
  -[CWFApple80211 AWDLPreferredChannels:]
  -[CWFApple80211 guardInterval:]
  -[CWFApple80211 leakyAPStats:]
  -[CWFApple80211 eventHandler]
  -[CWFApple80211 powerState:]
  -[CWFApple80211 AWDLSocialTimeSlots:]
  -[CWFApple80211 AWDLExtensionStateMachineParameters:]
  -[CWFApple80211 AWDLPeerTrafficRegistration:]
  -[CWFApple80211 countryCode:]
  -[CWFApple80211 bluetoothCoexistenceProfiles5GHz:]
  -[CWFApple80211 AWDLSecondaryMasterChannel:]
  -[CWFApple80211 __VHTMCSIndex:]
  -[CWFApple80211 AWDLElectionRSSIThresholds:]
  -[CWFApple80211 __VHTNumberOfSpatialStreams:]
  -[CWFApple80211 MCSIndex:]
  -[CWFApple80211 AWDLBTLEStateParameters:]
  -[CWFApple80211 __countryChannelsWithCountryCode:error:]
  -[CWFApple80211 __scanDictionaryWithParameters:]
  -[CWFApple80211 setEventHandler:]
  -[CWFApple80211 AWDLPresenceMode:]
  -[CWFApple80211 __guardInterval:]
  -[CWFApple80211 bluetoothCoexistenceProfiles2GHz:]
  -[CWFApple80211 __legacySupportedChannels:]
  -[CWFApple80211 rxRate:]
  -[CWFApple80211 virtualInterfaceNames:]
  -[CWFApple80211 dealloc]
  -[CWFApple80211 setChannel:error:]
  -[CWFApple80211 powerDebugInfo:]
  -[CWFApple80211 chainAck:]
  -[CWFApple80211 invalidate]
  -[CWFApple80211 __VHTGuardInterval:]
  -[CWFApple80211 AWDLEncryptionType:]
  -[CWFApple80211 AWDLStatistics:]
  -[CWFApple80211 wowEnabled:]
  -[CWFApple80211 isMonitoringEventType:interfaceName:]
  -[CWFApple80211 AWDLGuardTime:]
  -[CWFApple80211 AWDLSyncChannelSequence:]
  -[CWFApple80211 opMode:]
  -[CWFApple80211 AWDLElectionParameters:]
  -[CWFApple80211 rangingCapabilities:]
  -[CWFApple80211 stopMonitoringEventWithType:interfaceName:]
  -[CWFApple80211 AWDLSyncEnabled:]
  -[CWFApple80211 AWDLSidecarDiagnostics:]
  -[CWFApple80211 supportedChannelsWithCountryCode:error:]
  -[CWFApple80211 __numberOfSpatialStreams:]


CWFRoamStatus : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSString *interfaceName
 @property  NSDate *startedAt
 @property  NSDate *endedAt
 @property  NSData *SSID
 @property  NSString *networkName
 @property  NSString *originOUI
 @property  NSString *targetOUI
 @property  NSString *fromBSSID
 @property  NSString *toBSSID
 @property  unsigned long fromChannel
 @property  unsigned long toChannel
 @property  long long fromRSSI
 @property  long long toRSSI
 @property  int reason
 @property  long long status

  // class methods
  +[CWFRoamStatus supportsSecureCoding]

  // instance methods
  -[CWFRoamStatus startedAt]
  -[CWFRoamStatus UUID]
  -[CWFRoamStatus initWithCoder:]
  -[CWFRoamStatus .cxx_destruct]
  -[CWFRoamStatus setEndedAt:]
  -[CWFRoamStatus endedAt]
  -[CWFRoamStatus interfaceName]
  -[CWFRoamStatus init]
  -[CWFRoamStatus setInterfaceName:]
  -[CWFRoamStatus isEqual:]
  -[CWFRoamStatus setStartedAt:]
  -[CWFRoamStatus reason]
  -[CWFRoamStatus status]
  -[CWFRoamStatus SSID]
  -[CWFRoamStatus setStatus:]
  -[CWFRoamStatus setReason:]
  -[CWFRoamStatus toBSSID]
  -[CWFRoamStatus copyWithZone:]
  -[CWFRoamStatus toRSSI]
  -[CWFRoamStatus setSSID:]
  -[CWFRoamStatus networkName]
  -[CWFRoamStatus encodeWithCoder:]
  -[CWFRoamStatus setUUID:]
  -[CWFRoamStatus fromBSSID]
  -[CWFRoamStatus fromChannel]
  -[CWFRoamStatus toChannel]
  -[CWFRoamStatus fromRSSI]
  -[CWFRoamStatus originOUI]
  -[CWFRoamStatus targetOUI]
  -[CWFRoamStatus isEqualToRoamStatus:]
  -[CWFRoamStatus setOriginOUI:]
  -[CWFRoamStatus setFromBSSID:]
  -[CWFRoamStatus setFromChannel:]
  -[CWFRoamStatus setFromRSSI:]
  -[CWFRoamStatus setTargetOUI:]
  -[CWFRoamStatus setToBSSID:]
  -[CWFRoamStatus setToChannel:]
  -[CWFRoamStatus setToRSSI:]


CWFNetworkProfile : NSObject <NSCopying, NSSecureCoding>
 @property  NSMutableDictionary *internal
 @property  BOOL useCachedIdentifier
 @property  NSString *cachedIdentifier
 @property  BOOL useCachedNetworkName
 @property  NSString *cachedNetworkName
 @property  NSSet *properties
 @property  NSData *SSID
 @property  NSString *networkName
 @property  BOOL isAmbiguousNetworkName
 @property  unsigned long supportedSecurityTypes
 @property  unsigned long strongestSupportedSecurityType
 @property  unsigned long weakestSupportedSecurityType
 @property  long long WEPSubtype
 @property  long long WAPISubtype
 @property  BOOL isOpen
 @property  BOOL isWEP
 @property  BOOL isWAPI
 @property  BOOL isWPA
 @property  BOOL isWPA2
 @property  BOOL isWPA3
 @property  BOOL isEAP
 @property  BOOL isPSK
 @property  BOOL autoJoinDisabled
 @property  long long hiddenState
 @property  NSDictionary *captiveProfile
 @property  BOOL isCaptiveStateDetermined
 @property  BOOL isCaptive
 @property  BOOL wasCaptive
 @property  BOOL bypassCaptive
 @property  BOOL isPasswordSharingSupported
 @property  BOOL passwordSharingDisabled
 @property  NSString *payloadUUID
 @property  BOOL isProfileBased
 @property  long long addReason
 @property  NSDate *addedAt
 @property  NSDate *updatedAt
 @property  NSDate *lastJoinedBySystemAt
 @property  NSDate *lastJoinedByUserAt
 @property  NSDate *lastJoinedAt
 @property  NSString *bundleID
 @property  BOOL isAppBased
 @property  BOOL personalHotspot
 @property  BOOL systemMode
 @property  BOOL sessionBased
 @property  long long lowDataMode
 @property  NSString *carplayUUID
 @property  BOOL isCarPlay
 @property  NSSet *BSSList
 @property  NSDictionary *userPreferredNetworkNames
 @property  NSDictionary *userPreferredPasspointDomains
 @property  NSString *networkGroupID
 @property  unsigned long networkGroupPriority
 @property  NSDate *lastDiscoveredAt
 @property  NSDictionary *OSSpecificAttributes
 @property  NSDictionary *EAPProfile
 @property  NSArray *acceptedEAPTypes
 @property  NSArray *innerAcceptedEAPTypes
 @property  BOOL isTLSCertificateRequired
 @property  NSArray *TLSTrustedServerNames
 @property  BOOL isPasspoint
 @property  NSString *domainName
 @property  NSString *displayedOperatorName
 @property  NSArray *roamingConsortiumList
 @property  NSArray *NAIRealmNameList
 @property  NSArray *cellularNetworkInfo
 @property  BOOL serviceProviderRoamingEnabled
 @property  BOOL privacyProxyEnabled
 @property  NSString *privacyProxyBlockedReason
 @property  long long movingAttribute
 @property  long long publicAttribute

  // class methods
  +[CWFNetworkProfile supportsSecureCoding]

  // instance methods
  -[CWFNetworkProfile internal]
  -[CWFNetworkProfile bundleID]
  -[CWFNetworkProfile supportedSecurityTypes]
  -[CWFNetworkProfile displayedOperatorName]
  -[CWFNetworkProfile isWEP]
  -[CWFNetworkProfile isServiceProviderRoamingEnabled]
  -[CWFNetworkProfile setDomainName:]
  -[CWFNetworkProfile setDisplayedOperatorName:]
  -[CWFNetworkProfile setServiceProviderRoamingEnabled:]
  -[CWFNetworkProfile isWPA]
  -[CWFNetworkProfile initWithCoder:]
  -[CWFNetworkProfile isAppBased]
  -[CWFNetworkProfile .cxx_destruct]
  -[CWFNetworkProfile isWAPI]
  -[CWFNetworkProfile isEAP]
  -[CWFNetworkProfile isPSK]
  -[CWFNetworkProfile properties]
  -[CWFNetworkProfile payloadUUID]
  -[CWFNetworkProfile setPayloadUUID:]
  -[CWFNetworkProfile isOpen]
  -[CWFNetworkProfile updatedAt]
  -[CWFNetworkProfile initWithExternalForm:]
  -[CWFNetworkProfile init]
  -[CWFNetworkProfile isEqual:]
  -[CWFNetworkProfile identifier]
  -[CWFNetworkProfile isPasspoint]
  -[CWFNetworkProfile setAutoJoinDisabled:]
  -[CWFNetworkProfile setBundleID:]
  -[CWFNetworkProfile isCarPlay]
  -[CWFNetworkProfile setUpdatedAt:]
  -[CWFNetworkProfile addedAt]
  -[CWFNetworkProfile BSSList]
  -[CWFNetworkProfile OSSpecificAttributes]
  -[CWFNetworkProfile setInternal:]
  -[CWFNetworkProfile SSID]
  -[CWFNetworkProfile isPersonalHotspot]
  -[CWFNetworkProfile setSupportedSecurityTypes:]
  -[CWFNetworkProfile copyWithZone:]
  -[CWFNetworkProfile domainName]
  -[CWFNetworkProfile setSSID:]
  -[CWFNetworkProfile networkName]
  -[CWFNetworkProfile isWPA2]
  -[CWFNetworkProfile isWPA3]
  -[CWFNetworkProfile externalForm]
  -[CWFNetworkProfile encodeWithCoder:]
  -[CWFNetworkProfile setOSSpecificAttributes:]
  -[CWFNetworkProfile isCaptive]
  -[CWFNetworkProfile setWAPISubtype:]
  -[CWFNetworkProfile setWEPSubtype:]
  -[CWFNetworkProfile setCaptiveProfile:]
  -[CWFNetworkProfile setHiddenState:]
  -[CWFNetworkProfile setPasswordSharingDisabled:]
  -[CWFNetworkProfile setLowDataMode:]
  -[CWFNetworkProfile setLastJoinedBySystemAt:]
  -[CWFNetworkProfile setLastJoinedByUserAt:]
  -[CWFNetworkProfile setAddReason:]
  -[CWFNetworkProfile setAddedAt:]
  -[CWFNetworkProfile setEAPProfile:]
  -[CWFNetworkProfile setCellularNetworkInfo:]
  -[CWFNetworkProfile setNAIRealmNameList:]
  -[CWFNetworkProfile setRoamingConsortiumList:]
  -[CWFNetworkProfile setUserPreferredNetworkNames:]
  -[CWFNetworkProfile setUserPreferredPasspointDomains:]
  -[CWFNetworkProfile setNetworkGroupID:]
  -[CWFNetworkProfile setNetworkGroupPriority:]
  -[CWFNetworkProfile setLastDiscoveredAt:]
  -[CWFNetworkProfile setBSSList:]
  -[CWFNetworkProfile setPrivacyProxyEnabled:]
  -[CWFNetworkProfile setPrivacyProxyBlockedReason:]
  -[CWFNetworkProfile setMovingAttribute:]
  -[CWFNetworkProfile setPublicAttribute:]
  -[CWFNetworkProfile WAPISubtype]
  -[CWFNetworkProfile WEPSubtype]
  -[CWFNetworkProfile captiveProfile]
  -[CWFNetworkProfile hiddenState]
  -[CWFNetworkProfile isPasswordSharingDisabled]
  -[CWFNetworkProfile isAutoJoinDisabled]
  -[CWFNetworkProfile lowDataMode]
  -[CWFNetworkProfile lastJoinedByUserAt]
  -[CWFNetworkProfile lastJoinedBySystemAt]
  -[CWFNetworkProfile addReason]
  -[CWFNetworkProfile EAPProfile]
  -[CWFNetworkProfile cellularNetworkInfo]
  -[CWFNetworkProfile NAIRealmNameList]
  -[CWFNetworkProfile roamingConsortiumList]
  -[CWFNetworkProfile userPreferredNetworkNames]
  -[CWFNetworkProfile userPreferredPasspointDomains]
  -[CWFNetworkProfile networkGroupID]
  -[CWFNetworkProfile networkGroupPriority]
  -[CWFNetworkProfile lastDiscoveredAt]
  -[CWFNetworkProfile isPrivacyProxyEnabled]
  -[CWFNetworkProfile privacyProxyBlockedReason]
  -[CWFNetworkProfile movingAttribute]
  -[CWFNetworkProfile publicAttribute]
  -[CWFNetworkProfile isProfileBased]
  -[CWFNetworkProfile isCaptiveStateDetermined]
  -[CWFNetworkProfile __descriptionForHiddenState]
  -[CWFNetworkProfile __descriptionForLowDataMode]
  -[CWFNetworkProfile strongestSupportedSecurityType]
  -[CWFNetworkProfile isPasswordSharingSupported]
  -[CWFNetworkProfile setPersonalHotspot:]
  -[CWFNetworkProfile isAmbiguousNetworkName]
  -[CWFNetworkProfile __requiredProperties]
  -[CWFNetworkProfile __defaultProperties]
  -[CWFNetworkProfile weakestSupportedSecurityType]
  -[CWFNetworkProfile __propertyForKey:]
  -[CWFNetworkProfile __keyForProperty:]
  -[CWFNetworkProfile useCachedNetworkName]
  -[CWFNetworkProfile setCachedNetworkName:]
  -[CWFNetworkProfile setUseCachedNetworkName:]
  -[CWFNetworkProfile cachedNetworkName]
  -[CWFNetworkProfile useCachedIdentifier]
  -[CWFNetworkProfile setCachedIdentifier:]
  -[CWFNetworkProfile setUseCachedIdentifier:]
  -[CWFNetworkProfile cachedIdentifier]
  -[CWFNetworkProfile carplayUUID]
  -[CWFNetworkProfile bypassCaptive]
  -[CWFNetworkProfile wasCaptive]
  -[CWFNetworkProfile __descriptionForCaptiveFlags]
  -[CWFNetworkProfile __descriptionForMovingAttribute]
  -[CWFNetworkProfile __descriptionForPublicAttribute]
  -[CWFNetworkProfile isEqualToNetworkProfile:]
  -[CWFNetworkProfile filteredNetworkProfileWithProperties:]
  -[CWFNetworkProfile compareSupportedSecurityTypes:]
  -[CWFNetworkProfile compareUserPriority:]
  -[CWFNetworkProfile lastJoinedAt]
  -[CWFNetworkProfile isSystemMode]
  -[CWFNetworkProfile setSystemMode:]
  -[CWFNetworkProfile isSessionBased]
  -[CWFNetworkProfile setSessionBased:]
  -[CWFNetworkProfile acceptedEAPTypes]
  -[CWFNetworkProfile innerAcceptedEAPTypes]
  -[CWFNetworkProfile isTLSCertificateRequired]
  -[CWFNetworkProfile TLSTrustedServerNames]
  -[CWFNetworkProfile setCarplayUUID:]


CWFAWDLPeerContext : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *MACAddress
 @property  NSString *interfaceName

  // class methods
  +[CWFAWDLPeerContext supportsSecureCoding]
  +[CWFAWDLPeerContext AWDLPeerContextWithMACAddress:interfaceName:]

  // instance methods
  -[CWFAWDLPeerContext MACAddress]
  -[CWFAWDLPeerContext initWithCoder:]
  -[CWFAWDLPeerContext .cxx_destruct]
  -[CWFAWDLPeerContext interfaceName]
  -[CWFAWDLPeerContext setInterfaceName:]
  -[CWFAWDLPeerContext isEqual:]
  -[CWFAWDLPeerContext copyWithZone:]
  -[CWFAWDLPeerContext encodeWithCoder:]
  -[CWFAWDLPeerContext setMACAddress:]
  -[CWFAWDLPeerContext isEqualToAWDLPeerContext:]


CWFXPCConnection : NSObject <CWFXPCRequestProtocolInternal, CWFXPCRequestProtocolPrivate, CWFXPCRequestProtocolPrivateReadonly, CWFXPCRequestProtocolPublicWiFi, CWFXPCRequestProtocolPublicCoreWLAN>
 @property  <CWFXPCConnectionDelegate> *delegate
 @property  NSXPCConnection *XPCConnection
 @property  long long serviceType
 @property  NSString *processName
 @property  NSString *bundleID
 @property  NSUUID *UUID

  // class methods
  +[CWFXPCConnection locationAuthorizationStatusForWiFiNetworking]

  // instance methods
  -[CWFXPCConnection queryAWDLPresenceModeWithRequestParams:reply:]
  -[CWFXPCConnection queryMCSIndexWithRequestParams:reply:]
  -[CWFXPCConnection queryAutoJoinStatusWithRequestParams:reply:]
  -[CWFXPCConnection queryIsNetworkServiceEnabledWithRequestParams:reply:]
  -[CWFXPCConnection registeredEventIDs]
  -[CWFXPCConnection setPower:requestParams:reply:]
  -[CWFXPCConnection setRangeable:peerList:requestParams:reply:]
  -[CWFXPCConnection bundleID]
  -[CWFXPCConnection initWithServiceType:XPCConnection:]
  -[CWFXPCConnection queryHardwareMACAddressWithRequestParams:reply:]
  -[CWFXPCConnection queryBluetoothCoexProfiles2GHzWithRequestParams:reply:]
  -[CWFXPCConnection UUID]
  -[CWFXPCConnection queryKnownNetworkProfileMatchingNetworkProfile:requestParams:reply:]
  -[CWFXPCConnection queryNoiseWithRequestParams:reply:]
  -[CWFXPCConnection suspend]
  -[CWFXPCConnection queryGuardIntervalWithRequestParams:reply:]
  -[CWFXPCConnection queryLinkDownStatusWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLContinuousElectionAlgorithmEnabledWithRequestParams:reply:]
  -[CWFXPCConnection querySecurityWithRequestParams:reply:]
  -[CWFXPCConnection queryJoinStatusWithRequestParams:reply:]
  -[CWFXPCConnection queryCurrentScanResultWithRequestParams:reply:]
  -[CWFXPCConnection queryEventIDsWithRequestParams:reply:]
  -[CWFXPCConnection __addXPCGetRequestWithType:requestParams:reply:]
  -[CWFXPCConnection processState]
  -[CWFXPCConnection queryTxRateWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLStrategyWithRequestParams:reply:]
  -[CWFXPCConnection __performScanWithParameters:parentXPCRequest:]
  -[CWFXPCConnection queryBSSIDWithRequestParams:reply:]
  -[CWFXPCConnection queryCountryCodeWithRequestParams:reply:]
  -[CWFXPCConnection queryDNSServerAddressesWithRequestParams:reply:]
  -[CWFXPCConnection queryPowerWithRequestParams:reply:]
  -[CWFXPCConnection queryTxChainPowerWithRequestParams:reply:]
  -[CWFXPCConnection setProcessState:]
  -[CWFXPCConnection __performANQPWithParameters:parentXPCRequest:]
  -[CWFXPCConnection queryMACAddressWithRequestParams:reply:]
  -[CWFXPCConnection queryIPv4AddressesWithRequestParams:reply:]
  -[CWFXPCConnection associateWithParameters:requestParams:reply:]
  -[CWFXPCConnection queryAWDLElectionIDWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLSyncStateWithRequestParams:reply:]
  -[CWFXPCConnection querySystemActivitiesWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLPeerTrafficRegistrationWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLBTLEStateParamsWithRequestParams:reply:]
  -[CWFXPCConnection .cxx_destruct]
  -[CWFXPCConnection queryAWDLAFTxModeWithRequestParams:reply:]
  -[CWFXPCConnection queryLQMSummaryWithRequestParams:reply:]
  -[CWFXPCConnection queryRxRateWithRequestParams:reply:]
  -[CWFXPCConnection startAWDLPeerAssistedDiscoveryWithParameters:requestParams:reply:]
  -[CWFXPCConnection querySupportedPHYModesWithRequestParams:reply:]
  -[CWFXPCConnection queryKnownNetworkProfilesWithProperties:requestParams:reply:]
  -[CWFXPCConnection __privacyFilteredScanResult:allowBSSID:allowCountryCode:]
  -[CWFXPCConnection queryThermalIndexWithRequestParams:reply:]
  -[CWFXPCConnection querySupportedChannelsWithCountryCode:requestParams:reply:]
  -[CWFXPCConnection queryAWDLGuardTimeWithRequestParams:reply:]
  -[CWFXPCConnection __shouldDropEventTypeWhileSuspended:]
  -[CWFXPCConnection queryPowerDebugInfoWithRequestParams:reply:]
  -[CWFXPCConnection queryIPv4RouterWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLSecondaryMasterChannelWithRequestParams:reply:]
  -[CWFXPCConnection queryRoamStatusWithRequestParams:reply:]
  -[CWFXPCConnection __filterScanResultsForPrivacy:]
  -[CWFXPCConnection updateKnownNetworkProfile:properties:requestParams:reply:]
  -[CWFXPCConnection setDelegate:]
  -[CWFXPCConnection queryNetworkServiceNameWithRequestParams:reply:]
  -[CWFXPCConnection setAutoHotspotMode:requestParams:reply:]
  -[CWFXPCConnection __matchedScanResultsWithKnownNetworkProfiles:scanResults:]
  -[CWFXPCConnection processName]
  -[CWFXPCConnection XPCConnection]
  -[CWFXPCConnection queryDHCPLeaseExpirationTimeWithRequestParams:reply:]
  -[CWFXPCConnection queryWAPISubtypeWithRequestParams:reply:]
  -[CWFXPCConnection setThermalIndex:requestParams:reply:]
  -[CWFXPCConnection __passpointScanResults:]
  -[CWFXPCConnection __matchKnownNetworksWithScanResults:parentXPCRequest:]
  -[CWFXPCConnection queryInterfaceNameWithRequestParams:reply:]
  -[CWFXPCConnection queryLinkQualityMetricWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLEncryptionTypeWithRequestParams:reply:]
  -[CWFXPCConnection querySystemEventIDsWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLOpModeWithRequestParams:reply:]
  -[CWFXPCConnection querySSIDWithRequestParams:reply:]
  -[CWFXPCConnection init]
  -[CWFXPCConnection queryAWDLStatisticsWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLExtensionStateMachineParamsWithRequestParams:reply:]
  -[CWFXPCConnection stopMonitoringAllEventsWithRequestParams:reply:]
  -[CWFXPCConnection queryEAP8021XClientStatusWithRequestParams:reply:]
  -[CWFXPCConnection queryBluetoothCoexProfiles5GHzWithRequestParams:reply:]
  -[CWFXPCConnection queryIPv6RouterWithRequestParams:reply:]
  -[CWFXPCConnection queryWEPSubtypeWithRequestParams:reply:]
  -[CWFXPCConnection __peformFollowupANQPForPasspointScanResults:combinedScanResults:parameters:parentXPCRequest:]
  -[CWFXPCConnection isVisible]
  -[CWFXPCConnection queryUserAutoJoinStateWithRequestParams:reply:]
  -[CWFXPCConnection stopMonitoringEvent:requestParams:reply:]
  -[CWFXPCConnection queryGlobalDNSServerAddressesWithRequestParams:reply:]
  -[CWFXPCConnection queryInterfaceNamesWithRequestParams:reply:]
  -[CWFXPCConnection disassociateWithReason:requestParams:reply:]
  -[CWFXPCConnection __defaultTimeoutForRequestType:]
  -[CWFXPCConnection queryAWDLSyncChannelSequenceWithRequestParams:reply:]
  -[CWFXPCConnection queryIPv6AddressesWithRequestParams:reply:]
  -[CWFXPCConnection queryBSSIDForVendorWithRequestParams:reply:]
  -[CWFXPCConnection __updateXPCTransactionCount]
  -[CWFXPCConnection querySSIDForVendorWithRequestParams:reply:]
  -[CWFXPCConnection queryDHCPLeaseStartTimeWithRequestParams:reply:]
  -[CWFXPCConnection __addXPCRequestWithType:info:requestParams:reply:]
  -[CWFXPCConnection registeredActivities]
  -[CWFXPCConnection locationAuthorizationStatus]
  -[CWFXPCConnection queryVirtualInterfaceNamesWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv6AddressesWithRequestParams:reply:]
  -[CWFXPCConnection queryIO80211InterfaceInfoWithRequestParams:reply:]
  -[CWFXPCConnection queryDTIMIntervalWithRequestParams:reply:]
  -[CWFXPCConnection queryOpModeWithRequestParams:reply:]
  -[CWFXPCConnection queryDesenseWithRequestParams:reply:]
  -[CWFXPCConnection queryLeakyAPStatsWithRequestParams:reply:]
  -[CWFXPCConnection queryTxPowerWithRequestParams:reply:]
  -[CWFXPCConnection queryBluetoothCoexModeWithRequestParams:reply:]
  -[CWFXPCConnection queryEAP8021XSupplicantStateWithRequestParams:reply:]
  -[CWFXPCConnection queryAuthTypeWithRequestParams:reply:]
  -[CWFXPCConnection queryCCAWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv6InterfaceNameWithRequestParams:reply:]
  -[CWFXPCConnection __bundleIDFromAuditToken:]
  -[CWFXPCConnection queryNetworkReachabilityWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv6RouterWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLSocialTimeSlotsWithRequestParams:reply:]
  -[CWFXPCConnection __shouldCoalesceEventTypeWhileSuspended:]
  -[CWFXPCConnection performRangingWithPeerList:timeout:requestParams:reply:]
  -[CWFXPCConnection queryChainAckWithRequestParams:reply:]
  -[CWFXPCConnection setAWDLPeerTrafficRegistration:requestParams:reply:]
  -[CWFXPCConnection addKnownNetworkProfile:requestParams:reply:]
  -[CWFXPCConnection queryRSSIWithRequestParams:reply:]
  -[CWFXPCConnection performANQPWithParameters:requestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv4RouterWithRequestParams:reply:]
  -[CWFXPCConnection queryCurrentKnownNetworkProfileWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLSyncParametersWithRequestParams:reply:]
  -[CWFXPCConnection queryDesenseLevelWithRequestParams:reply:]
  -[CWFXPCConnection delegate]
  -[CWFXPCConnection queryAWDLPeerDatabaseWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv6NetworkServiceIDWithRequestParams:reply:]
  -[CWFXPCConnection cancelRequestsWithUUID:reply:]
  -[CWFXPCConnection resume]
  -[CWFXPCConnection __coalesceAndCacheEvent:]
  -[CWFXPCConnection queryBluetoothCoexConfigWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv4NetworkServiceNameWithRequestParams:reply:]
  -[CWFXPCConnection queryNumberOfSpatialStreamsWithRequestParams:reply:]
  -[CWFXPCConnection queryAutoHotspotModeWithRequestParams:reply:]
  -[CWFXPCConnection __processPathFromAuditToken:]
  -[CWFXPCConnection setChannel:requestParams:reply:]
  -[CWFXPCConnection stopAWDLPeerAssistedDiscoveryWithRequestParams:reply:]
  -[CWFXPCConnection queryEAP8021XControlStateWithRequestParams:reply:]
  -[CWFXPCConnection queryEAP8021XControlModeWithRequestParams:reply:]
  -[CWFXPCConnection sendXPCEvent:reply:]
  -[CWFXPCConnection queryDeviceUUIDWithRequestParams:reply:]
  -[CWFXPCConnection queryIO80211ControllerInfoWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLAvailabilityWindowAPAlignmentWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv6NetworkServiceNameWithRequestParams:reply:]
  -[CWFXPCConnection invalidate]
  -[CWFXPCConnection beginActivity:requestParams:reply:]
  -[CWFXPCConnection endAllActivitiesWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLMasterChannelWithRequestParams:reply:]
  -[CWFXPCConnection queryNetworkServiceIDWithRequestParams:reply:]
  -[CWFXPCConnection queryActivitiesWithRequestParams:reply:]
  -[CWFXPCConnection queryKnownNetworkProfileMatchingScanResult:requestParams:reply:]
  -[CWFXPCConnection __addXPCRequestWithType:info:requestParams:parentRequestUUID:isParentRequest:reply:]
  -[CWFXPCConnection queryWoWEnabledWithRequestParams:reply:]
  -[CWFXPCConnection setUserAutoJoinState:requestParams:reply:]
  -[CWFXPCConnection queryParentInterfaceNameWithRequestParams:reply:]
  -[CWFXPCConnection queryPHYModeWithRequestParams:reply:]
  -[CWFXPCConnection queryInterfaceCapabilitiesWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLSyncEnabledWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv4NetworkServiceIDWithRequestParams:reply:]
  -[CWFXPCConnection startMonitoringEvent:requestParams:reply:]
  -[CWFXPCConnection queryAWDLElectionRSSIThresholdsWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLPreferredChannelsWithRequestParams:reply:]
  -[CWFXPCConnection queryRangingCapabilitiesWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLSidecarDiagnosticsWithRequestParams:reply:]
  -[CWFXPCConnection setRangingIdentifier:requestParams:reply:]
  -[CWFXPCConnection __allowXPCRequestWithType:error:]
  -[CWFXPCConnection queryVirtualInterfaceRoleWithRequestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv4InterfaceNameWithRequestParams:reply:]
  -[CWFXPCConnection queryAWDLElectionParametersWithRequestParams:reply:]
  -[CWFXPCConnection queryPowerStateWithRequestParams:reply:]
  -[CWFXPCConnection performScanWithParameters:requestParams:reply:]
  -[CWFXPCConnection queryAWDLElectionMetricWithRequestParams:reply:]
  -[CWFXPCConnection performAutoJoinWithParameters:requestParams:reply:]
  -[CWFXPCConnection queryChannelWithRequestParams:reply:]
  -[CWFXPCConnection endActivityWithUUID:requestParams:reply:]
  -[CWFXPCConnection querySystemAWDLPeerTrafficRegistrationsWithRequestParams:reply:]
  -[CWFXPCConnection removeKnownNetworkProfile:reason:requestParams:reply:]
  -[CWFXPCConnection queryGlobalIPv4AddressesWithRequestParams:reply:]
  -[CWFXPCConnection serviceType]


CWFEAPCredentials : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *username
 @property  NSString *password
 @property  ^{__SecIdentity=} TLSIdentity
 @property  r^v TLSIdentityHandle

  // class methods
  +[CWFEAPCredentials supportsSecureCoding]

  // instance methods
  -[CWFEAPCredentials initWithCoder:]
  -[CWFEAPCredentials password]
  -[CWFEAPCredentials .cxx_destruct]
  -[CWFEAPCredentials username]
  -[CWFEAPCredentials isEqual:]
  -[CWFEAPCredentials setUsername:]
  -[CWFEAPCredentials dealloc]
  -[CWFEAPCredentials setPassword:]
  -[CWFEAPCredentials copyWithZone:]
  -[CWFEAPCredentials encodeWithCoder:]
  -[CWFEAPCredentials setTLSIdentity:]
  -[CWFEAPCredentials TLSIdentity]
  -[CWFEAPCredentials isEqualToEAPCredentials:]
  -[CWFEAPCredentials TLSIdentityHandle]
  -[CWFEAPCredentials setTLSIdentityHandle:]


CWFAutoJoinRequest : NSObject
 @property  NSUUID *UUID
 @property  CWFAutoJoinParameters *parameters
 @property  @? reply

  // instance methods
  -[CWFAutoJoinRequest UUID]
  -[CWFAutoJoinRequest .cxx_destruct]
  -[CWFAutoJoinRequest setParameters:]
  -[CWFAutoJoinRequest reply]
  -[CWFAutoJoinRequest setReply:]
  -[CWFAutoJoinRequest parameters]
  -[CWFAutoJoinRequest setUUID:]


CWFXPCManager : NSObject <CWFXPCListenerDelegate, CWFXPCRequestProxyDelegate>
 @property  <CWFXPCManagerDelegate> *delegate
 @property  NSSet *supportedRequestTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CWFXPCManager registeredEventIDs]
  -[CWFXPCManager XPCRequestProxy:sendXPCEvent:reply:]
  -[CWFXPCManager suspend]
  -[CWFXPCManager supportedRequestTypes]
  -[CWFXPCManager .cxx_destruct]
  -[CWFXPCManager setDelegate:]
  -[CWFXPCManager XPCListener:XPCConnection:canceledXPCRequestsWithUUID:]
  -[CWFXPCManager setSupportedRequestTypes:]
  -[CWFXPCManager init]
  -[CWFXPCManager XPCListener:invalidatedXPCConnection:]
  -[CWFXPCManager XPCRequestProxy:invalidatedXPCConnection:]
  -[CWFXPCManager registeredActivities]
  -[CWFXPCManager XPCListener:XPCConnection:updatedRegisteredEventIDs:]
  -[CWFXPCManager XPCRequestProxy:XPCConnection:receivedXPCRequest:]
  -[CWFXPCManager initWithServiceTypes:]
  -[CWFXPCManager delegate]
  -[CWFXPCManager resume]
  -[CWFXPCManager sendXPCEvent:reply:]
  -[CWFXPCManager XPCRequestProxy:XPCConnection:canceledXPCRequestsWithUUID:]
  -[CWFXPCManager invalidate]
  -[CWFXPCManager XPCListener:XPCConnection:receivedXPCRequest:]
  -[CWFXPCManager __updateProcessMonitorConfiguration]
  -[CWFXPCManager XPCListener:addedXPCConnection:]
  -[CWFXPCManager setTargetQueue:requestType:interfaceName:]


CWFAutoJoinStatus : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSString *interfaceName
 @property  NSDate *startedAt
 @property  NSDate *endedAt
 @property  NSArray *joinAttempts
 @property  long long trigger
 @property  long long state
 @property  BOOL result

  // class methods
  +[CWFAutoJoinStatus supportsSecureCoding]

  // instance methods
  -[CWFAutoJoinStatus startedAt]
  -[CWFAutoJoinStatus UUID]
  -[CWFAutoJoinStatus initWithCoder:]
  -[CWFAutoJoinStatus .cxx_destruct]
  -[CWFAutoJoinStatus setEndedAt:]
  -[CWFAutoJoinStatus endedAt]
  -[CWFAutoJoinStatus interfaceName]
  -[CWFAutoJoinStatus setState:]
  -[CWFAutoJoinStatus init]
  -[CWFAutoJoinStatus setInterfaceName:]
  -[CWFAutoJoinStatus isEqualToAutoJoinStatus:]
  -[CWFAutoJoinStatus isEqual:]
  -[CWFAutoJoinStatus joinAttempts]
  -[CWFAutoJoinStatus result]
  -[CWFAutoJoinStatus setJoinAttempts:]
  -[CWFAutoJoinStatus setStartedAt:]
  -[CWFAutoJoinStatus state]
  -[CWFAutoJoinStatus setResult:]
  -[CWFAutoJoinStatus copyWithZone:]
  -[CWFAutoJoinStatus setTrigger:]
  -[CWFAutoJoinStatus encodeWithCoder:]
  -[CWFAutoJoinStatus trigger]
  -[CWFAutoJoinStatus setUUID:]


CWFBSS : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *BSSID
 @property  CWFChannel *channel
 @property  NSDate *lastAssociatedAt
 @property  CLLocation *location
 @property  NSDictionary *OSSpecificAttributes

  // class methods
  +[CWFBSS supportsSecureCoding]

  // instance methods
  -[CWFBSS setBSSID:]
  -[CWFBSS initWithCoder:]
  -[CWFBSS setChannel:]
  -[CWFBSS .cxx_destruct]
  -[CWFBSS isEqualToBSS:]
  -[CWFBSS setLocation:]
  -[CWFBSS initWithExternalForm:]
  -[CWFBSS isEqual:]
  -[CWFBSS location]
  -[CWFBSS setLastAssociatedAt:]
  -[CWFBSS OSSpecificAttributes]
  -[CWFBSS channel]
  -[CWFBSS BSSID]
  -[CWFBSS copyWithZone:]
  -[CWFBSS lastAssociatedAt]
  -[CWFBSS externalForm]
  -[CWFBSS encodeWithCoder:]
  -[CWFBSS setOSSpecificAttributes:]


CWFANQPParameters : NSObject <NSCopying, NSSecureCoding>
 @property  NSArray *scanResults
 @property  NSArray *ANQPElementIDList
 @property  unsigned long maximumCacheAge
 @property  BOOL cacheOnly
 @property  BOOL includeMatchingKnownNetworkProfiles

  // class methods
  +[CWFANQPParameters supportsSecureCoding]

  // instance methods
  -[CWFANQPParameters scanResults]
  -[CWFANQPParameters initWithCoder:]
  -[CWFANQPParameters .cxx_destruct]
  -[CWFANQPParameters includeMatchingKnownNetworkProfiles]
  -[CWFANQPParameters setCacheOnly:]
  -[CWFANQPParameters cacheOnly]
  -[CWFANQPParameters isEqual:]
  -[CWFANQPParameters maximumCacheAge]
  -[CWFANQPParameters setIncludeMatchingKnownNetworkProfiles:]
  -[CWFANQPParameters setMaximumCacheAge:]
  -[CWFANQPParameters copyWithZone:]
  -[CWFANQPParameters setScanResults:]
  -[CWFANQPParameters encodeWithCoder:]
  -[CWFANQPParameters setANQPElementIDList:]
  -[CWFANQPParameters ANQPElementIDList]
  -[CWFANQPParameters isEqualToANQPParameters:]


CWFAutoJoinManager : NSObject
 @property  @? allowAutoJoinHandler
 @property  @? allowKnownNetworkHandler
 @property  @? knownNetworkComparator
 @property  @? scanForNetworksHandler
 @property  @? performGASQueryHandler
 @property  @? allowJoinCandidateHandler
 @property  @? joinCandidateComparator
 @property  @? associateToNetworkHandler
 @property  @? allowAutoHotspotHandler
 @property  @? allowHotspotHandler
 @property  @? browseForHotspotsHandler
 @property  @? connectToHotspotHandler
 @property  @? updateKnownNetworkHandler
 @property  @? eventHandler
 @property  @? invalidationHandler
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  CLLocation *location
 @property  CWFScanResult *associatedNetwork
 @property  NSSet *knownNetworks
 @property  NSSet *supportedChannels
 @property  long long retrySchedule

  // instance methods
  -[CWFAutoJoinManager targetQueue]
  -[CWFAutoJoinManager setTargetQueue:]
  -[CWFAutoJoinManager .cxx_destruct]
  -[CWFAutoJoinManager setLocation:]
  -[CWFAutoJoinManager __passpointScanResults:]
  -[CWFAutoJoinManager init]
  -[CWFAutoJoinManager eventHandler]
  -[CWFAutoJoinManager setInvalidationHandler:]
  -[CWFAutoJoinManager location]
  -[CWFAutoJoinManager setEventHandler:]
  -[CWFAutoJoinManager invalidate]
  -[CWFAutoJoinManager invalidationHandler]
  -[CWFAutoJoinManager knownNetworks]
  -[CWFAutoJoinManager setKnownNetworks:]
  -[CWFAutoJoinManager setAllowAutoJoinHandler:]
  -[CWFAutoJoinManager setAllowKnownNetworkHandler:]
  -[CWFAutoJoinManager setKnownNetworkComparator:]
  -[CWFAutoJoinManager setScanForNetworksHandler:]
  -[CWFAutoJoinManager setPerformGASQueryHandler:]
  -[CWFAutoJoinManager setAllowJoinCandidateHandler:]
  -[CWFAutoJoinManager setJoinCandidateComparator:]
  -[CWFAutoJoinManager setAssociateToNetworkHandler:]
  -[CWFAutoJoinManager setAllowAutoHotspotHandler:]
  -[CWFAutoJoinManager setAllowHotspotHandler:]
  -[CWFAutoJoinManager setBrowseForHotspotsHandler:]
  -[CWFAutoJoinManager setConnectToHotspotHandler:]
  -[CWFAutoJoinManager setUpdateKnownNetworkHandler:]
  -[CWFAutoJoinManager __updateRetrySchedule]
  -[CWFAutoJoinManager __addRequest:]
  -[CWFAutoJoinManager __shouldResetRetryIntervalIndexForTrigger:]
  -[CWFAutoJoinManager __nextRequest]
  -[CWFAutoJoinManager __performAutoJoin]
  -[CWFAutoJoinManager associatedNetwork]
  -[CWFAutoJoinManager __allowAutoJoinWithTrigger:error:]
  -[CWFAutoJoinManager setRetrySchedule:]
  -[CWFAutoJoinManager __updateAutoJoinState:]
  -[CWFAutoJoinManager __allowKnownNetwork:trigger:error:]
  -[CWFAutoJoinManager __prepareKnownNetworksContext:]
  -[CWFAutoJoinManager __discoverKnownNetworksWithContext:error:]
  -[CWFAutoJoinManager __performAutoHotspotWithBrowseTimeout:maxCacheAge:cacheOnly:error:]
  -[CWFAutoJoinManager __descriptionForError:]
  -[CWFAutoJoinManager knownNetworkComparator]
  -[CWFAutoJoinManager __sortKnownNetworks:]
  -[CWFAutoJoinManager supportedChannels]
  -[CWFAutoJoinManager __basicChannelRepresentation:]
  -[CWFAutoJoinManager retrySchedule]
  -[CWFAutoJoinManager __retryScheduleIndex]
  -[CWFAutoJoinManager __performScanWithChannelList:SSIDList:dwellTime:maxCacheAge:minimumRSSI:cacheOnly:isPreAssociationScan:error:]
  -[CWFAutoJoinManager __performGASQueryWithScanResults:ANQPElementIDList:maxCacheAge:cacheOnly:error:]
  -[CWFAutoJoinManager __cachedScanResultsWithChannelList:maxCacheAge:minimumRSSI:ANQPElementIDList:maxANQPCacheAge:]
  -[CWFAutoJoinManager __matchAndJoinScanResults:allowPreAssociationScan:context:error:]
  -[CWFAutoJoinManager updateKnownNetworkHandler]
  -[CWFAutoJoinManager __sortJoinCandidates:]
  -[CWFAutoJoinManager __allowJoinCandidate:trigger:error:]
  -[CWFAutoJoinManager __morePreferredKnownNetworksWithCandidate:knownNetworks:]
  -[CWFAutoJoinManager __performPreAssociationScanWithContext:network:]
  -[CWFAutoJoinManager __performJoinWithNetwork:error:]
  -[CWFAutoJoinManager __updateDiscoverTimestampForJoinCandidates:]
  -[CWFAutoJoinManager __isAutoJoinCancelled:]
  -[CWFAutoJoinManager allowAutoJoinHandler]
  -[CWFAutoJoinManager __calloutToAllowAutoJoinWithTrigger:error:]
  -[CWFAutoJoinManager allowKnownNetworkHandler]
  -[CWFAutoJoinManager __calloutToAllowKnownNetwork:trigger:error:]
  -[CWFAutoJoinManager performGASQueryHandler]
  -[CWFAutoJoinManager __calloutToPerformGASQueryWithParameters:GASQueryNetworks:error:]
  -[CWFAutoJoinManager scanForNetworksHandler]
  -[CWFAutoJoinManager __calloutToScanForNetworksWithParameters:scanChannels:error:]
  -[CWFAutoJoinManager allowJoinCandidateHandler]
  -[CWFAutoJoinManager __calloutToAllowJoinCandidate:trigger:error:]
  -[CWFAutoJoinManager associateToNetworkHandler]
  -[CWFAutoJoinManager __calloutToAssociateToNetwork:error:]
  -[CWFAutoJoinManager joinCandidateComparator]
  -[CWFAutoJoinManager connectToHotspotHandler]
  -[CWFAutoJoinManager __calloutToConnectToHotspot:error:]
  -[CWFAutoJoinManager browseForHotspotsHandler]
  -[CWFAutoJoinManager __calloutToBrowseForHotspotsWithTimeout:maxCacheAge:cacheOnly:error:]
  -[CWFAutoJoinManager allowAutoHotspotHandler]
  -[CWFAutoJoinManager __calloutToAllowAutoHotspotWithTrigger:error:]
  -[CWFAutoJoinManager allowHotspotHandler]
  -[CWFAutoJoinManager __calloutToAllowHotspot:error:]
  -[CWFAutoJoinManager __allowAutoHotspotWithTrigger:error:]
  -[CWFAutoJoinManager __browseForHotspotsWithTimeout:maxCacheAge:cacheOnly:error:]
  -[CWFAutoJoinManager __allowHotspot:error:]
  -[CWFAutoJoinManager __sortHotspotCandidates:]
  -[CWFAutoJoinManager __connectToHotspot:error:]
  -[CWFAutoJoinManager __retryScheduleRepeatsLastInterval:]
  -[CWFAutoJoinManager __retryIntervalWithScheduleIndex:]
  -[CWFAutoJoinManager performAutoJoinWithParameters:reply:]
  -[CWFAutoJoinManager cancelAutoJoinWithUUID:error:reply:]
  -[CWFAutoJoinManager setAssociatedNetwork:]
  -[CWFAutoJoinManager setSupportedChannels:]


CWFSCNetworkService : NSObject
 @property  @? eventHandler
 @property  NSString *interfaceName
 @property  NSString *serviceID

  // instance methods
  -[CWFSCNetworkService stopEventMonitoring]
  -[CWFSCNetworkService initWithInterfaceName:]
  -[CWFSCNetworkService serviceName]
  -[CWFSCNetworkService IPv6Router]
  -[CWFSCNetworkService __DNSStateConfig]
  -[CWFSCNetworkService .cxx_destruct]
  -[CWFSCNetworkService isMonitoringEvents]
  -[CWFSCNetworkService serviceID]
  -[CWFSCNetworkService interfaceName]
  -[CWFSCNetworkService DNSServerAddresses]
  -[CWFSCNetworkService __DHCPInfo]
  -[CWFSCNetworkService DHCPLeaseStartTimestamp]
  -[CWFSCNetworkService isServiceEnabled]
  -[CWFSCNetworkService startEventMonitoring]
  -[CWFSCNetworkService init]
  -[CWFSCNetworkService __IPv4SetupConfig]
  -[CWFSCNetworkService eventHandler]
  -[CWFSCNetworkService __proxiesSetupConfig]
  -[CWFSCNetworkService IPv4Addresses]
  -[CWFSCNetworkService IPv6ConfigMethod]
  -[CWFSCNetworkService IPv6Addresses]
  -[CWFSCNetworkService __DNSSetupConfig]
  -[CWFSCNetworkService setEventHandler:]
  -[CWFSCNetworkService __updateServiceID]
  -[CWFSCNetworkService IPv4ConfigMethod]
  -[CWFSCNetworkService IPv4Router]
  -[CWFSCNetworkService DNSDomainName]
  -[CWFSCNetworkService dealloc]
  -[CWFSCNetworkService DHCPLeaseExpirationTimestamp]
  -[CWFSCNetworkService __IPv6StateConfig]
  -[CWFSCNetworkService __IPv6SetupConfig]
  -[CWFSCNetworkService __refreshNotificationKeys]
  -[CWFSCNetworkService __IPv4StateConfig]


CWFXPCRequestProxy : NSObject
 @property  <CWFXPCRequestProxyDelegate> *delegate

  // instance methods
  -[CWFXPCRequestProxy stopEventMonitoring]
  -[CWFXPCRequestProxy __getEAP8021XSupplicantState:]
  -[CWFXPCRequestProxy __getDNSServerAddresses:]
  -[CWFXPCRequestProxy __addKnownNetwork:XPCConnection:]
  -[CWFXPCRequestProxy __vendorSpecificIdentifierForXPCConnection:]
  -[CWFXPCRequestProxy __addJoinStatusWithScanResult:knownNetworkProfile:isAutoJoin:interfaceName:]
  -[CWFXPCRequestProxy __roamStatusWithInterfaceName:]
  -[CWFXPCRequestProxy __updateJoinStatusWithAuth:]
  -[CWFXPCRequestProxy __getSecurity:]
  -[CWFXPCRequestProxy __getNetServiceName:]
  -[CWFXPCRequestProxy __setChannel:]
  -[CWFXPCRequestProxy __getActivities:XPCConnection:]
  -[CWFXPCRequestProxy __setLinkDownStatus:interfaceName:]
  -[CWFXPCRequestProxy __linkDownStatusWithInterfaceName:]
  -[CWFXPCRequestProxy __apple80211WithVirtualInterfaceRole:parentInterfaceName:]
  -[CWFXPCRequestProxy __updateJoinStatusWithIPv6:]
  -[CWFXPCRequestProxy __getEAP8021XControlState:]
  -[CWFXPCRequestProxy __getEventIDs:XPCConnection:]
  -[CWFXPCRequestProxy __autoJoinEndedWithResult:interfaceName:]
  -[CWFXPCRequestProxy __getEAP8021XClientStatus:]
  -[CWFXPCRequestProxy __getEAP8021XControlMode:]
  -[CWFXPCRequestProxy __getGlobalIPv4Addresses:]
  -[CWFXPCRequestProxy apple80211WithInterfaceName:]
  -[CWFXPCRequestProxy __getIPv4Addresses:]
  -[CWFXPCRequestProxy .cxx_destruct]
  -[CWFXPCRequestProxy isMonitoringEvents]
  -[CWFXPCRequestProxy __getApple80211:]
  -[CWFXPCRequestProxy __getNetServiceID:]
  -[CWFXPCRequestProxy __getGlobalIPv6InterfaceName:]
  -[CWFXPCRequestProxy __SCNetworkInterfaceWithInterfaceName:]
  -[CWFXPCRequestProxy __EAP8021XWithInterfaceName:]
  -[CWFXPCRequestProxy __getWAPISubtype:]
  -[CWFXPCRequestProxy __hashedBSSID:XPCConnection:error:]
  -[CWFXPCRequestProxy __updateAutoJoinState:interfaceName:]
  -[CWFXPCRequestProxy __cancelRequestsWithNamePrefix:]
  -[CWFXPCRequestProxy setDelegate:]
  -[CWFXPCRequestProxy __getBSSID:XPCConnection:]
  -[CWFXPCRequestProxy __getNetServiceEnabled:]
  -[CWFXPCRequestProxy __networkStackMACAddressWithInterfaceName:]
  -[CWFXPCRequestProxy __getPlatformCapabilities:]
  -[CWFXPCRequestProxy __getIPv6Addresses:]
  -[CWFXPCRequestProxy startEventMonitoring]
  -[CWFXPCRequestProxy __getIPv6Router:]
  -[CWFXPCRequestProxy init]
  -[CWFXPCRequestProxy __setupEventHandlersWithInterfaceName:]
  -[CWFXPCRequestProxy __SCNetworkServiceWithInterfaceName:]
  -[CWFXPCRequestProxy __getSystemActivities:XPCManager:]
  -[CWFXPCRequestProxy __updateEventRegistration:XPCManager:]
  -[CWFXPCRequestProxy __getGlobalIPv4NetServiceID:]
  -[CWFXPCRequestProxy __apple80211WithInterfaceName:]
  -[CWFXPCRequestProxy __updateJoinStatusWithAssoc:]
  -[CWFXPCRequestProxy __getSystemEventIDs:XPCManager:]
  -[CWFXPCRequestProxy __stopMonitoringDefaultEventIDsForInterfaceName:]
  -[CWFXPCRequestProxy __setAutoJoinStatus:interfaceName:]
  -[CWFXPCRequestProxy __getIO80211InterfaceInfo:]
  -[CWFXPCRequestProxy __updateMonitoring:eventIDs:]
  -[CWFXPCRequestProxy __getGlobalIPv6NetServiceName:]
  -[CWFXPCRequestProxy __getNetworkReachability:]
  -[CWFXPCRequestProxy __getGlobalIPv6NetServiceID:]
  -[CWFXPCRequestProxy XPCManager:invalidatedXPCConnection:]
  -[CWFXPCRequestProxy __hashedSSID:XPCConnection:error:]
  -[CWFXPCRequestProxy __getRoamStatus:]
  -[CWFXPCRequestProxy __handleWillAssocInternalEvent:]
  -[CWFXPCRequestProxy __handleAutoJoinStateChangedInternalEvent:]
  -[CWFXPCRequestProxy __deviceUUID]
  -[CWFXPCRequestProxy __getKnownNetworkMatchingScanResult:]
  -[CWFXPCRequestProxy __getDHCPLeaseStartTime:]
  -[CWFXPCRequestProxy __updateJoinStatusWithEAP8021X:]
  -[CWFXPCRequestProxy __updateJoinStatusWithError:interaceName:]
  -[CWFXPCRequestProxy __updateAutoJoinStatusWithJoin:]
  -[CWFXPCRequestProxy __setRoamStatus:interfaceName:]
  -[CWFXPCRequestProxy __startMonitoringDefaultEventIDs]
  -[CWFXPCRequestProxy __linkQualityMetricWithInterfaceName:]
  -[CWFXPCRequestProxy delegate]
  -[CWFXPCRequestProxy __getGlobalIPv4NetServiceName:]
  -[CWFXPCRequestProxy SCNetworkInterfaceWithInterfaceName:]
  -[CWFXPCRequestProxy __currentScanResult]
  -[CWFXPCRequestProxy __joinStatusWithInterfaceName:]
  -[CWFXPCRequestProxy __knownNetworkProfiles]
  -[CWFXPCRequestProxy __setupEventHandlers]
  -[CWFXPCRequestProxy EAP8021XWithInterfaceName:]
  -[CWFXPCRequestProxy __getGlobalDNSServerAddresses:]
  -[CWFXPCRequestProxy __getWEPSubtype:]
  -[CWFXPCRequestProxy __performScan:XPCConnection:]
  -[CWFXPCRequestProxy __setAWDLPeerTrafficRegistration:]
  -[CWFXPCRequestProxy __getSSID:XPCConnection:]
  -[CWFXPCRequestProxy __getSSIDForVendor:XPCConnection:]
  -[CWFXPCRequestProxy __getHardwareMACAddress:]
  -[CWFXPCRequestProxy __getJoinStatus:]
  -[CWFXPCRequestProxy XPCManager:XPCConnection:canceledXPCRequestsWithUUID:]
  -[CWFXPCRequestProxy __getGlobalIPv4InterfaceName:]
  -[CWFXPCRequestProxy invalidate]
  -[CWFXPCRequestProxy __stopMonitoringDefaultEventIDs]
  -[CWFXPCRequestProxy __queueForXPCRequest:]
  -[CWFXPCRequestProxy __setJoinStatus:interfaceName:]
  -[CWFXPCRequestProxy __autoJoinStartedWithTrigger:interfaceName:]
  -[CWFXPCRequestProxy __currentNetworkProfile]
  -[CWFXPCRequestProxy __interfaceSpecificEventIDs:]
  -[CWFXPCRequestProxy XPCManager:sendXPCEvent:reply:]
  -[CWFXPCRequestProxy __handleAssocDoneInternalEvent:]
  -[CWFXPCRequestProxy __setLinkQualityMetric:interfaceName:]
  -[CWFXPCRequestProxy __getGlobalIPv6Addresses:]
  -[CWFXPCRequestProxy __getKnownNetworkMatchingNetworkProfile:]
  -[CWFXPCRequestProxy __startMonitoringDefaultEventIDsForInterfaceName:]
  -[CWFXPCRequestProxy __autojoinStatusWithInterfaceName:]
  -[CWFXPCRequestProxy __updateJoinStatusWithIPv4:]
  -[CWFXPCRequestProxy __getLinkDownStatus:]
  -[CWFXPCRequestProxy setTargetQueue:requestType:interfaceName:]
  -[CWFXPCRequestProxy __getGlobalIPv4Router:]
  -[CWFXPCRequestProxy XPCManager:XPCConnection:receivedXPCRequest:]
  -[CWFXPCRequestProxy __getMACAddress:]
  -[CWFXPCRequestProxy __getBSSIDForVendor:XPCConnection:]
  -[CWFXPCRequestProxy __getAutoJoinStatus:]
  -[CWFXPCRequestProxy __getLinkQualityMetric:]
  -[CWFXPCRequestProxy __getGlobalIPv6Router:]
  -[CWFXPCRequestProxy __defaultInterfaceRoleForRequestType:]
  -[CWFXPCRequestProxy __getIO80211ControllerInfo:]
  -[CWFXPCRequestProxy SCNetworkServiceWithInterfaceName:]
  -[CWFXPCRequestProxy __getDHCPLeaseExpirationTime:]
  -[CWFXPCRequestProxy __getIPv4Router:]


CWFRangingMeasurement : NSObject <NSCopying, NSSecureCoding>
 @property  long long roundTripTime
 @property  long long RSSI
 @property  unsigned long channel
 @property  long long SNR
 @property  unsigned long coreID

  // class methods
  +[CWFRangingMeasurement supportsSecureCoding]

  // instance methods
  -[CWFRangingMeasurement initWithCoder:]
  -[CWFRangingMeasurement setRSSI:]
  -[CWFRangingMeasurement setSNR:]
  -[CWFRangingMeasurement setChannel:]
  -[CWFRangingMeasurement RSSI]
  -[CWFRangingMeasurement isEqual:]
  -[CWFRangingMeasurement SNR]
  -[CWFRangingMeasurement channel]
  -[CWFRangingMeasurement copyWithZone:]
  -[CWFRangingMeasurement coreID]
  -[CWFRangingMeasurement encodeWithCoder:]
  -[CWFRangingMeasurement roundTripTime]
  -[CWFRangingMeasurement setRoundTripTime:]
  -[CWFRangingMeasurement isEqualToRangingMeasurement:]
  -[CWFRangingMeasurement setCoreID:]


CWFAssocParameters : NSObject <NSCopying, NSSecureCoding>
 @property  CWFScanResult *scanResult
 @property  CWFNetworkProfile *knownNetworkProfile
 @property  NSString *password
 @property  CWFEAPCredentials *EAPCredentials
 @property  BOOL rememberUponSuccessfulAssociation

  // class methods
  +[CWFAssocParameters supportsSecureCoding]

  // instance methods
  -[CWFAssocParameters initWithCoder:]
  -[CWFAssocParameters setKnownNetworkProfile:]
  -[CWFAssocParameters password]
  -[CWFAssocParameters .cxx_destruct]
  -[CWFAssocParameters setScanResult:]
  -[CWFAssocParameters isEqual:]
  -[CWFAssocParameters knownNetworkProfile]
  -[CWFAssocParameters setPassword:]
  -[CWFAssocParameters copyWithZone:]
  -[CWFAssocParameters scanResult]
  -[CWFAssocParameters encodeWithCoder:]
  -[CWFAssocParameters setRememberUponSuccessfulAssociation:]
  -[CWFAssocParameters EAPCredentials]
  -[CWFAssocParameters rememberUponSuccessfulAssociation]
  -[CWFAssocParameters isEqualToAssocParameters:]
  -[CWFAssocParameters setEAPCredentials:]


CWFXPCRequest : NSBlockOperation
 @property  BOOL didSendResponse
 @property  NSUUID *UUID
 @property  long long type
 @property  CWFRequestParameters *requestParameters
 @property  NSDate *receivedAt
 @property  NSDictionary *info
 @property  @? response

  // instance methods
  -[CWFXPCRequest UUID]
  -[CWFXPCRequest isFinished]
  -[CWFXPCRequest requestParameters]
  -[CWFXPCRequest setType:]
  -[CWFXPCRequest setInfo:]
  -[CWFXPCRequest .cxx_destruct]
  -[CWFXPCRequest setRequestParameters:]
  -[CWFXPCRequest info]
  -[CWFXPCRequest isExecuting]
  -[CWFXPCRequest init]
  -[CWFXPCRequest receivedAt]
  -[CWFXPCRequest setDidSendResponse:]
  -[CWFXPCRequest response]
  -[CWFXPCRequest type]
  -[CWFXPCRequest didSendResponse]
  -[CWFXPCRequest setReceivedAt:]
  -[CWFXPCRequest setUUID:]
  -[CWFXPCRequest setResponse:]


CWFInterface : NSObject
 @property  CWFClient *client
 @property  CWFRequestParameters *requestParameters
 @property  BOOL activated
 @property  @? invalidationHandler
 @property  @? eventHandler

  // instance methods
  -[CWFInterface activities]
  -[CWFInterface highPriority]
  -[CWFInterface MACAddress]
  -[CWFInterface background]
  -[CWFInterface AWDL]
  -[CWFInterface targetQueue]
  -[CWFInterface deviceUUID]
  -[CWFInterface suspend]
  -[CWFInterface requestParameters]
  -[CWFInterface supportedPHYModes]
  -[CWFInterface EAP8021XClientStatus]
  -[CWFInterface reachabilityFlags]
  -[CWFInterface countryCode]
  -[CWFInterface setEventHandler:eventID:]
  -[CWFInterface capabilities]
  -[CWFInterface securityType]
  -[CWFInterface RSSI]
  -[CWFInterface setTargetQueue:]
  -[CWFInterface .cxx_destruct]
  -[CWFInterface EAP8021XControlState]
  -[CWFInterface endActivity:]
  -[CWFInterface txRate]
  -[CWFInterface userInitiated]
  -[CWFInterface rxRate]
  -[CWFInterface setAWDLPeerTrafficRegistration:error:]
  -[CWFInterface initWithServiceType:]
  -[CWFInterface interfaceName]
  -[CWFInterface setActivated:]
  -[CWFInterface DNSServerAddresses]
  -[CWFInterface clearAllEventHandlers]
  -[CWFInterface init]
  -[CWFInterface eventHandler]
  -[CWFInterface txPower]
  -[CWFInterface setInvalidationHandler:]
  -[CWFInterface powerState]
  -[CWFInterface activate]
  -[CWFInterface IPv4Addresses]
  -[CWFInterface PHYMode]
  -[CWFInterface isActivated]
  -[CWFInterface client]
  -[CWFInterface channel]
  -[CWFInterface hardwareMACAddress]
  -[CWFInterface IPv6Addresses]
  -[CWFInterface SSID]
  -[CWFInterface setEventHandler:]
  -[CWFInterface resume]
  -[CWFInterface eventHandlerWithEventID:]
  -[CWFInterface EAP8021XControlMode]
  -[CWFInterface userInteractive]
  -[CWFInterface utility]
  -[CWFInterface setChannel:error:]
  -[CWFInterface invalidate]
  -[CWFInterface BSSID]
  -[CWFInterface powerOn]
  -[CWFInterface desense]
  -[CWFInterface wakeOnWirelessEnabled]
  -[CWFInterface noise]
  -[CWFInterface CCA]
  -[CWFInterface opMode]
  -[CWFInterface authType]
  -[CWFInterface lowPriority]
  -[CWFInterface EAP8021XSupplicantState]
  -[CWFInterface invalidationHandler]
  -[CWFInterface networkName]
  -[CWFInterface virtualInterfaceRole]
  -[CWFInterface serviceType]
  -[CWFInterface startMonitoringEventType:error:]
  -[CWFInterface WAPISubtype]
  -[CWFInterface WEPSubtype]
  -[CWFInterface desenseLevel]
  -[CWFInterface chainAck]
  -[CWFInterface guardInterval]
  -[CWFInterface networkServiceName]
  -[CWFInterface AWDLSyncState]
  -[CWFInterface AWDLMasterChannel]
  -[CWFInterface AWDLSecondaryMasterChannel]
  -[CWFInterface AWDLElectionParameters]
  -[CWFInterface AWDLSyncChannelSequence]
  -[CWFInterface AWDLStrategy]
  -[CWFInterface AWDLOpMode]
  -[CWFInterface interfaceNames]
  -[CWFInterface currentScanResult]
  -[CWFInterface cachedLinkDownStatus]
  -[CWFInterface cachedLinkQualityMetric]
  -[CWFInterface cachedAutoJoinStatus]
  -[CWFInterface cachedJoinStatus]
  -[CWFInterface cachedRoamStatus]
  -[CWFInterface DHCPLeaseStartedAt]
  -[CWFInterface DHCPLeaseExpiresAt]
  -[CWFInterface currentKnownNetworkProfile]
  -[CWFInterface bluetoothCoexistenceMode]
  -[CWFInterface MCSIndex]
  -[CWFInterface numberOfSpatialStreams]
  -[CWFInterface associateWithParameters:reply:]
  -[CWFInterface IPv4RouterAddress]
  -[CWFInterface IPv6RouterAddress]
  -[CWFInterface performScanWithParameters:reply:]
  -[CWFInterface performANQPWithParameters:reply:]
  -[CWFInterface setPower:error:]
  -[CWFInterface supportedChannelsWithCountryCode:]
  -[CWFInterface performAutoJoinWithParameters:reply:]
  -[CWFInterface initWithClient:requestParameters:]
  -[CWFInterface __adjustedRequestParameters]
  -[CWFInterface perAntennaRSSI]
  -[CWFInterface __flagsForChannelWidth:]
  -[CWFInterface beginActivity:error:]
  -[CWFInterface startMonitoringEvent:error:]
  -[CWFInterface stopMonitoringEvent:]
  -[CWFInterface auxiliaryInterface]
  -[CWFInterface veryLowPriority]
  -[CWFInterface veryHighPriority]
  -[CWFInterface cancelRequestsWithUUID:error:]
  -[CWFInterface thermalIndex]
  -[CWFInterface setThermalIndex:error:]
  -[CWFInterface virtualInterfaceNames]
  -[CWFInterface performScanWithParameters:error:]
  -[CWFInterface performANQPWithParameters:error:]
  -[CWFInterface associateWithParameters:error:]
  -[CWFInterface disassociateWithReason:]
  -[CWFInterface SSIDForVendor]
  -[CWFInterface BSSIDForVendor]
  -[CWFInterface supportedChannel:width:countryCode:]
  -[CWFInterface DTIMInterval]
  -[CWFInterface parentInterfaceName]
  -[CWFInterface IO80211ControllerInfo]
  -[CWFInterface IO80211InterfaceInfo]
  -[CWFInterface txChainPower]
  -[CWFInterface bluetoothCoexistenceConfig]
  -[CWFInterface bluetoothCoexistenceProfiles2GHz]
  -[CWFInterface bluetoothCoexistenceProfiles5GHz]
  -[CWFInterface leakyAPStats]
  -[CWFInterface LQMSummary]
  -[CWFInterface powerDebugInfo]
  -[CWFInterface performAutoJoinWithParameters:error:]
  -[CWFInterface userAutoJoinDisabled]
  -[CWFInterface setUserAutoJoinDisabled:error:]
  -[CWFInterface autoHotspotMode]
  -[CWFInterface setAutoHotspotMode:error:]
  -[CWFInterface endAllActivities]
  -[CWFInterface performActivity:usingBlock:]
  -[CWFInterface systemActivities]
  -[CWFInterface eventIDs]
  -[CWFInterface systemEventIDs]
  -[CWFInterface stopMonitoringEventType:]
  -[CWFInterface stopMonitoringAllEvents]
  -[CWFInterface knownNetworkProfilesWithProperties:]
  -[CWFInterface knownNetworkProfileMatchingScanResult:]
  -[CWFInterface knownNetworkProfileMatchingNetworkProfile:]
  -[CWFInterface updateKnownNetworkProfile:properties:error:]
  -[CWFInterface addKnownNetworkProfile:error:]
  -[CWFInterface removeKnownNetworkProfile:reason:error:]
  -[CWFInterface networkServiceID]
  -[CWFInterface isNetworkServiceEnabled]
  -[CWFInterface globalIPv4InterfaceName]
  -[CWFInterface globalIPv4NetworkServiceID]
  -[CWFInterface globalIPv4NetworkServiceName]
  -[CWFInterface globalIPv4RouterAddress]
  -[CWFInterface globalIPv4Addresses]
  -[CWFInterface globalIPv6InterfaceName]
  -[CWFInterface globalIPv6NetworkServiceID]
  -[CWFInterface globalIPv6NetworkServiceName]
  -[CWFInterface globalIPv6RouterAddress]
  -[CWFInterface globalIPv6Addresses]
  -[CWFInterface globalDNSServerAddresses]
  -[CWFInterface startAWDLPeerAssistedDiscoveryWithParameters:error:]
  -[CWFInterface stopAWDLPeerAssistedDiscovery]
  -[CWFInterface systemAWDLPeerTrafficRegistrations]
  -[CWFInterface AWDLPreferredChannels]
  -[CWFInterface AWDLSyncEnabled]
  -[CWFInterface AWDLPeerDatabase]
  -[CWFInterface AWDLSocialTimeSlots]
  -[CWFInterface AWDLElectionID]
  -[CWFInterface AWDLElectionRSSIThresholds]
  -[CWFInterface AWDLSyncParameters]
  -[CWFInterface AWDLStatistics]
  -[CWFInterface AWDLSidecarDiagnostics]
  -[CWFInterface AWDLExtensionStateMachineParameters]
  -[CWFInterface AWDLElectionMetric]
  -[CWFInterface AWDLPresenceMode]
  -[CWFInterface AWDLGuardTime]
  -[CWFInterface AWDLAvailabilityWindowAPAlignment]
  -[CWFInterface AWDLContinuousElectionAlgorithmEnabled]
  -[CWFInterface AWDLAFTxMode]
  -[CWFInterface AWDLPeerTrafficRegistration]
  -[CWFInterface AWDLEncryptionType]
  -[CWFInterface AWDLBTLEStateParameters]
  -[CWFInterface rangingCapabilities]
  -[CWFInterface setRangeable:peerList:error:]
  -[CWFInterface performRangingWithPeerList:timeout:reply:]
  -[CWFInterface performRangingWithPeerList:timeout:error:]
  -[CWFInterface setRangingIdentifier:error:]


CWFScanResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSDictionary *internal
 @property  NSSet *properties
 @property  NSDictionary *scanRecord
 @property  unsigned long age
 @property  NSData *informationElementData
 @property  NSData *SSID
 @property  NSString *networkName
 @property  BOOL isAmbiguousNetworkName
 @property  NSString *BSSID
 @property  CWFChannel *channel
 @property  long long RSSI
 @property  long long noise
 @property  long long beaconInterval
 @property  NSString *countryCode
 @property  long long airPortBaseStationModel
 @property  BOOL isUnconfiguredAirPortBaseStation
 @property  BOOL isPasspoint
 @property  BOOL isPersonalHotspot
 @property  BOOL isAppleSWAP
 @property  BOOL isIBSS
 @property  unsigned long supportedSecurityTypes
 @property  unsigned long strongestSupportedSecurityType
 @property  unsigned long weakestSupportedSecurityType
 @property  BOOL isOpen
 @property  BOOL isWEP
 @property  BOOL isWAPI
 @property  BOOL isWPA
 @property  BOOL isWPA2
 @property  BOOL isWPA3
 @property  BOOL isEAP
 @property  BOOL isPSK
 @property  long long WAPISubtype
 @property  int supportedPHYModes
 @property  int fastestSupportedPHYMode
 @property  int slowestSupportedPHYMode
 @property  CWFNetworkProfile *matchingKnownNetworkProfile
 @property  NSDictionary *OSSpecificAttributes
 @property  BOOL isMetered
 @property  unsigned long WPAMulticastCipher
 @property  NSArray *WPAUnicastCiphers
 @property  NSArray *WPAAuthSelectors
 @property  unsigned long RSNMulticastCipher
 @property  unsigned long RSNBroadcastCipher
 @property  NSArray *RSNUnicastCiphers
 @property  NSArray *RSNAuthSelectors
 @property  int RSNCapabilities
 @property  BOOL isMFPCapable
 @property  BOOL isMFPRequired
 @property  int accessNetworkType
 @property  BOOL isInternetAccessible
 @property  BOOL isAdditionalStepRequiredForAccess
 @property  BOOL isEmergencyServicesReachable
 @property  BOOL isUnauthenticatedEmergencyServiceAccessible
 @property  long long venueGroup
 @property  long long venueType
 @property  NSString *HESSID
 @property  BOOL isUnconfiguredDevice
 @property  BOOL providesInternetAccess
 @property  BOOL supportsWPS
 @property  BOOL supportsiAPOverWiFi
 @property  BOOL supports2GHzNetworks
 @property  BOOL supports5GHzNetworks
 @property  BOOL supportsCarPlay
 @property  BOOL supportsHomeKit
 @property  BOOL supportsHomeKit2
 @property  BOOL supportsAirPlay
 @property  BOOL supportsAirPlay2
 @property  BOOL supportsAirPrint
 @property  BOOL supportsMFi
 @property  BOOL supportsMFiHardwareAuth
 @property  BOOL supportsMFiSoftwareTokenAuth
 @property  BOOL supportsMFiSoftwareCertAuth
 @property  BOOL supportsSecureWAC
 @property  BOOL supportsWoW
 @property  NSString *friendlyName
 @property  NSString *manufacturerName
 @property  NSString *modelName
 @property  NSString *displayName
 @property  NSString *primaryMAC
 @property  NSString *bluetoothMAC
 @property  NSString *deviceID
 @property  NSDictionary *ANQPResponse
 @property  NSArray *cellularNetworkInfo
 @property  NSArray *NAIRealmNameList
 @property  NSArray *roamingConsortiumList
 @property  NSArray *operatorFriendlyNameList
 @property  NSArray *domainNameList

  // class methods
  +[CWFScanResult supportsSecureCoding]

  // instance methods
  -[CWFScanResult internal]
  -[CWFScanResult supportsCarPlay]
  -[CWFScanResult modelName]
  -[CWFScanResult displayName]
  -[CWFScanResult beaconInterval]
  -[CWFScanResult supportedSecurityTypes]
  -[CWFScanResult isWEP]
  -[CWFScanResult age]
  -[CWFScanResult isWPA]
  -[CWFScanResult initWithCoder:]
  -[CWFScanResult supportedPHYModes]
  -[CWFScanResult countryCode]
  -[CWFScanResult HESSID]
  -[CWFScanResult RSSI]
  -[CWFScanResult .cxx_destruct]
  -[CWFScanResult deviceID]
  -[CWFScanResult isWAPI]
  -[CWFScanResult isEAP]
  -[CWFScanResult isPSK]
  -[CWFScanResult properties]
  -[CWFScanResult isOpen]
  -[CWFScanResult isAppleSWAP]
  -[CWFScanResult manufacturerName]
  -[CWFScanResult isEqual:]
  -[CWFScanResult isPasspoint]
  -[CWFScanResult venueType]
  -[CWFScanResult fastestSupportedPHYMode]
  -[CWFScanResult scanRecord]
  -[CWFScanResult isIBSS]
  -[CWFScanResult OSSpecificAttributes]
  -[CWFScanResult setInternal:]
  -[CWFScanResult channel]
  -[CWFScanResult SSID]
  -[CWFScanResult friendlyName]
  -[CWFScanResult isEqualToScanResult:]
  -[CWFScanResult isPersonalHotspot]
  -[CWFScanResult BSSID]
  -[CWFScanResult copyWithZone:]
  -[CWFScanResult noise]
  -[CWFScanResult networkName]
  -[CWFScanResult isWPA2]
  -[CWFScanResult isWPA3]
  -[CWFScanResult venueGroup]
  -[CWFScanResult isMetered]
  -[CWFScanResult encodeWithCoder:]
  -[CWFScanResult WAPISubtype]
  -[CWFScanResult cellularNetworkInfo]
  -[CWFScanResult NAIRealmNameList]
  -[CWFScanResult roamingConsortiumList]
  -[CWFScanResult initWithScanRecord:includeProperties:]
  -[CWFScanResult supportsAirPlay2]
  -[CWFScanResult isInternetAccessible]
  -[CWFScanResult primaryMAC]
  -[CWFScanResult strongestSupportedSecurityType]
  -[CWFScanResult matchingKnownNetworkProfile]
  -[CWFScanResult domainNameList]
  -[CWFScanResult operatorFriendlyNameList]
  -[CWFScanResult airPortBaseStationModel]
  -[CWFScanResult supportsAirPlay]
  -[CWFScanResult isAmbiguousNetworkName]
  -[CWFScanResult filteredScanResultWithProperties:]
  -[CWFScanResult __requiredProperties]
  -[CWFScanResult __defaultProperties]
  -[CWFScanResult weakestSupportedSecurityType]
  -[CWFScanResult compareSupportedSecurityTypes:]
  -[CWFScanResult initWithScanRecord:knownNetworkProfile:includeProperties:]
  -[CWFScanResult scanResultWithMatchingKnownNetworkProfile:]
  -[CWFScanResult compareSupportedPHYModes:]
  -[CWFScanResult isMFPCapable]
  -[CWFScanResult isMFPRequired]
  -[CWFScanResult informationElementData]
  -[CWFScanResult isUnconfiguredAirPortBaseStation]
  -[CWFScanResult accessNetworkType]
  -[CWFScanResult isAdditionalStepRequiredForAccess]
  -[CWFScanResult isEmergencyServicesReachable]
  -[CWFScanResult isUnauthenticatedEmergencyServiceAccessible]
  -[CWFScanResult isUnconfiguredDevice]
  -[CWFScanResult providesInternetAccess]
  -[CWFScanResult supportsWPS]
  -[CWFScanResult supportsiAPOverWiFi]
  -[CWFScanResult supports2GHzNetworks]
  -[CWFScanResult supports5GHzNetworks]
  -[CWFScanResult supportsHomeKit]
  -[CWFScanResult supportsHomeKit2]
  -[CWFScanResult supportsAirPrint]
  -[CWFScanResult supportsMFi]
  -[CWFScanResult supportsMFiHardwareAuth]
  -[CWFScanResult supportsSecureWAC]
  -[CWFScanResult supportsWoW]
  -[CWFScanResult bluetoothMAC]
  -[CWFScanResult ANQPResponse]
  -[CWFScanResult WPAUnicastCiphers]
  -[CWFScanResult WPAMulticastCipher]
  -[CWFScanResult WPAAuthSelectors]
  -[CWFScanResult RSNUnicastCiphers]
  -[CWFScanResult RSNMulticastCipher]
  -[CWFScanResult RSNBroadcastCipher]
  -[CWFScanResult RSNAuthSelectors]
  -[CWFScanResult RSNCapabilities]
  -[CWFScanResult __internalDictionaryFromScanRecord:knownNetworkProfile:includeProperties:]
  -[CWFScanResult slowestSupportedPHYMode]
  -[CWFScanResult __descriptionForWPACipher:]
  -[CWFScanResult __descriptionForWPAAuthSel:]
  -[CWFScanResult __descriptionForRSNCipher:]
  -[CWFScanResult __descriptionForRSNAuthSel:]
  -[CWFScanResult __descriptionForRSNIE]
  -[CWFScanResult __descriptionForWPAIE]
  -[CWFScanResult __descriptionForAirPortBaseStationModel:]
  -[CWFScanResult supportsMFiSoftwareTokenAuth]
  -[CWFScanResult supportsMFiSoftwareCertAuth]


CWFRangingResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *MACAddress
 @property  NSData *identifier
 @property  double distance
 @property  double standardDeviation
 @property  int status
 @property  unsigned long numberOfValidMeasurements
 @property  NSArray *measurements

  // class methods
  +[CWFRangingResult supportsSecureCoding]

  // instance methods
  -[CWFRangingResult MACAddress]
  -[CWFRangingResult initWithCoder:]
  -[CWFRangingResult .cxx_destruct]
  -[CWFRangingResult isEqual:]
  -[CWFRangingResult identifier]
  -[CWFRangingResult status]
  -[CWFRangingResult setIdentifier:]
  -[CWFRangingResult setStatus:]
  -[CWFRangingResult standardDeviation]
  -[CWFRangingResult setDistance:]
  -[CWFRangingResult copyWithZone:]
  -[CWFRangingResult distance]
  -[CWFRangingResult encodeWithCoder:]
  -[CWFRangingResult setStandardDeviation:]
  -[CWFRangingResult measurements]
  -[CWFRangingResult setMeasurements:]
  -[CWFRangingResult setMACAddress:]
  -[CWFRangingResult numberOfValidMeasurements]
  -[CWFRangingResult isEqualToRangingResult:]
  -[CWFRangingResult setNumberOfValidMeasurements:]


CWFXPCListener : NSObject <NSXPCListenerDelegate, CWFXPCConnectionDelegate>
 @property  <CWFXPCListenerDelegate> *delegate
 @property  long long serviceType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CWFXPCListener registeredEventIDs]
  -[CWFXPCListener XPCConnection:receivedXPCRequest:]
  -[CWFXPCListener suspend]
  -[CWFXPCListener XPCConnection:canceledXPCRequestsWithUUID:]
  -[CWFXPCListener .cxx_destruct]
  -[CWFXPCListener initWithServiceType:]
  -[CWFXPCListener setDelegate:]
  -[CWFXPCListener init]
  -[CWFXPCListener registeredActivities]
  -[CWFXPCListener XPCConnections]
  -[CWFXPCListener delegate]
  -[CWFXPCListener resume]
  -[CWFXPCListener XPCConnection:updatedRegisteredEventIDs:]
  -[CWFXPCListener sendXPCEvent:reply:]
  -[CWFXPCListener invalidate]
  -[CWFXPCListener __allowXPCConnection:serviceType:]
  -[CWFXPCListener listener:shouldAcceptNewConnection:]
  -[CWFXPCListener serviceType]


CWFClient : NSObject <CWFXPCEventProxyDelegate>
 @property  BOOL invalidated
 @property  NSXPCConnection *XPCConnection
 @property  long long serviceType
 @property  NSObject<OS_dispatch_queue> *targetQueue
 @property  @? invalidationHandler

  // instance methods
  -[CWFClient targetQueue]
  -[CWFClient suspend]
  -[CWFClient __startMonitoringEvent:requestParameters:reply:]
  -[CWFClient setEventHandler:eventID:]
  -[CWFClient setTargetQueue:]
  -[CWFClient .cxx_destruct]
  -[CWFClient beginActivity:requestParameters:error:]
  -[CWFClient initWithServiceType:]
  -[CWFClient proxy:receivedEvent:]
  -[CWFClient XPCConnection]
  -[CWFClient clearAllEventHandlers]
  -[CWFClient init]
  -[CWFClient setInvalidated:]
  -[CWFClient setInvalidationHandler:]
  -[CWFClient endActivity:requestParameters:]
  -[CWFClient stopMonitoringEvent:requestParameters:]
  -[CWFClient __beginActivity:requestParameters:reply:]
  -[CWFClient startMonitoringEvent:requestParameters:error:]
  -[CWFClient resume]
  -[CWFClient eventHandlerWithEventID:]
  -[CWFClient dealloc]
  -[CWFClient invalidate]
  -[CWFClient invalidated]
  -[CWFClient invalidationHandler]
  -[CWFClient stopMonitoringAllEvents:]
  -[CWFClient endAllActivities:]
  -[CWFClient serviceType]


CWFSCNetworkConfiguration : NSObject
 @property  @? eventHandler

  // instance methods
  -[CWFSCNetworkConfiguration stopEventMonitoring]
  -[CWFSCNetworkConfiguration __IPv6SetupConfigForServiceID:]
  -[CWFSCNetworkConfiguration IPv6Router]
  -[CWFSCNetworkConfiguration DNSSearchDomains]
  -[CWFSCNetworkConfiguration __nameForServiceWithID:]
  -[CWFSCNetworkConfiguration IPv4ServiceName]
  -[CWFSCNetworkConfiguration __IPv4SetupConfigForServiceID:]
  -[CWFSCNetworkConfiguration .cxx_destruct]
  -[CWFSCNetworkConfiguration isMonitoringEvents]
  -[CWFSCNetworkConfiguration __IPv6StateConfigForServiceID:]
  -[CWFSCNetworkConfiguration IPv6ServiceName]
  -[CWFSCNetworkConfiguration DNSServerAddresses]
  -[CWFSCNetworkConfiguration IPv4ServiceID]
  -[CWFSCNetworkConfiguration startEventMonitoring]
  -[CWFSCNetworkConfiguration init]
  -[CWFSCNetworkConfiguration eventHandler]
  -[CWFSCNetworkConfiguration __DNSGlobalStateConfig]
  -[CWFSCNetworkConfiguration __startEventMonitoring]
  -[CWFSCNetworkConfiguration IPv4SubnetMasks]
  -[CWFSCNetworkConfiguration IPv4Addresses]
  -[CWFSCNetworkConfiguration IPv6Addresses]
  -[CWFSCNetworkConfiguration setEventHandler:]
  -[CWFSCNetworkConfiguration __IPv4StateConfigForServiceID:]
  -[CWFSCNetworkConfiguration __IPv4GlobalStateConfig]
  -[CWFSCNetworkConfiguration IPv4Router]
  -[CWFSCNetworkConfiguration DNSDomainName]
  -[CWFSCNetworkConfiguration IPv4InterfaceName]
  -[CWFSCNetworkConfiguration IPv6InterfaceName]
  -[CWFSCNetworkConfiguration dealloc]
  -[CWFSCNetworkConfiguration __IPv6GlobalStateConfig]
  -[CWFSCNetworkConfiguration IPv6ServiceID]
  -[CWFSCNetworkConfiguration IPv6PrefixLengths]


CWFJoinStatus : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSString *interfaceName
 @property  CWFScanResult *scanResult
 @property  CWFNetworkProfile *knownNetworkProfile
 @property  unsigned int EAP8021XSupplicantState
 @property  unsigned int EAP8021XControlMode
 @property  unsigned int EAP8021XControlState
 @property  int EAP8021XClientStatus
 @property  NSDate *startedAt
 @property  NSDate *endedAt
 @property  NSDate *associationEndedAt
 @property  NSDate *authenticationEndedAt
 @property  NSDate *IPv4AssignedAt
 @property  NSDate *IPv6AssignedAt
 @property  NSError *error
 @property  BOOL autoJoin

  // class methods
  +[CWFJoinStatus supportsSecureCoding]

  // instance methods
  -[CWFJoinStatus setIPv4AssignedAt:]
  -[CWFJoinStatus startedAt]
  -[CWFJoinStatus UUID]
  -[CWFJoinStatus initWithCoder:]
  -[CWFJoinStatus authenticationEndedAt]
  -[CWFJoinStatus setKnownNetworkProfile:]
  -[CWFJoinStatus isAutoJoin]
  -[CWFJoinStatus IPv4AssignedAt]
  -[CWFJoinStatus EAP8021XClientStatus]
  -[CWFJoinStatus setEAP8021XControlMode:]
  -[CWFJoinStatus setEAP8021XSupplicantState:]
  -[CWFJoinStatus setAutoJoin:]
  -[CWFJoinStatus .cxx_destruct]
  -[CWFJoinStatus EAP8021XControlState]
  -[CWFJoinStatus setEndedAt:]
  -[CWFJoinStatus endedAt]
  -[CWFJoinStatus interfaceName]
  -[CWFJoinStatus init]
  -[CWFJoinStatus setInterfaceName:]
  -[CWFJoinStatus setScanResult:]
  -[CWFJoinStatus setIPv6AssignedAt:]
  -[CWFJoinStatus isEqual:]
  -[CWFJoinStatus setAssociationEndedAt:]
  -[CWFJoinStatus setAuthenticationEndedAt:]
  -[CWFJoinStatus setStartedAt:]
  -[CWFJoinStatus knownNetworkProfile]
  -[CWFJoinStatus isEqualToJoinStatus:]
  -[CWFJoinStatus setEAP8021XClientStatus:]
  -[CWFJoinStatus setEAP8021XControlState:]
  -[CWFJoinStatus associationEndedAt]
  -[CWFJoinStatus IPv6AssignedAt]
  -[CWFJoinStatus EAP8021XControlMode]
  -[CWFJoinStatus copyWithZone:]
  -[CWFJoinStatus scanResult]
  -[CWFJoinStatus EAP8021XSupplicantState]
  -[CWFJoinStatus setError:]
  -[CWFJoinStatus encodeWithCoder:]
  -[CWFJoinStatus error]
  -[CWFJoinStatus setUUID:]


CWFEAP8021X : NSObject
 @property  NSString *interfaceName
 @property  @? eventHandler

  // instance methods
  -[CWFEAP8021X stopEventMonitoring]
  -[CWFEAP8021X initWithInterfaceName:]
  -[CWFEAP8021X clientStatus:]
  -[CWFEAP8021X .cxx_destruct]
  -[CWFEAP8021X isMonitoringEvents]
  -[CWFEAP8021X interfaceName]
  -[CWFEAP8021X startEventMonitoring]
  -[CWFEAP8021X init]
  -[CWFEAP8021X eventHandler]
  -[CWFEAP8021X __startEventMonitoring]
  -[CWFEAP8021X controlState:]
  -[CWFEAP8021X supplicantState:]
  -[CWFEAP8021X setEventHandler:]
  -[CWFEAP8021X controlMode:]
  -[CWFEAP8021X dealloc]


CWFKeyValueStore : NSObject
 @property  BOOL activated
 @property  long long type
 @property  NSString *identifier
 @property  @? invalidationHandler
 @property  @? eventHandler

  // instance methods
  -[CWFKeyValueStore objectForKey:]
  -[CWFKeyValueStore setObject:forKey:]
  -[CWFKeyValueStore removeAllEntries]
  -[CWFKeyValueStore .cxx_destruct]
  -[CWFKeyValueStore dictionaryRepresentation]
  -[CWFKeyValueStore synchronize]
  -[CWFKeyValueStore setActivated:]
  -[CWFKeyValueStore addEntriesFromDictionary:]
  -[CWFKeyValueStore eventHandler]
  -[CWFKeyValueStore setInvalidationHandler:]
  -[CWFKeyValueStore identifier]
  -[CWFKeyValueStore activate]
  -[CWFKeyValueStore isActivated]
  -[CWFKeyValueStore type]
  -[CWFKeyValueStore setEventHandler:]
  -[CWFKeyValueStore initWithType:identifier:]
  -[CWFKeyValueStore invalidate]
  -[CWFKeyValueStore invalidationHandler]
  -[CWFKeyValueStore __debugDescriptionForType:]
  -[CWFKeyValueStore __synchronize]
  -[CWFKeyValueStore __ubiquitousKVSChanged:]


CWFSCNetworkInterface : NSObject
 @property  NSString *interfaceName
 @property  NSString *hardwareAddress
 @property  @? eventHandler

  // instance methods
  -[CWFSCNetworkInterface stopEventMonitoring]
  -[CWFSCNetworkInterface initWithInterfaceName:]
  -[CWFSCNetworkInterface .cxx_destruct]
  -[CWFSCNetworkInterface isMonitoringEvents]
  -[CWFSCNetworkInterface interfaceName]
  -[CWFSCNetworkInterface startEventMonitoring]
  -[CWFSCNetworkInterface init]
  -[CWFSCNetworkInterface eventHandler]
  -[CWFSCNetworkInterface __startEventMonitoring]
  -[CWFSCNetworkInterface IPv4SubnetMasks]
  -[CWFSCNetworkInterface IPv4Addresses]
  -[CWFSCNetworkInterface IPv6Addresses]
  -[CWFSCNetworkInterface setEventHandler:]
  -[CWFSCNetworkInterface dealloc]
  -[CWFSCNetworkInterface __IPv6StateConfig]
  -[CWFSCNetworkInterface IPv6PrefixLengths]
  -[CWFSCNetworkInterface __IPv4StateConfig]
  -[CWFSCNetworkInterface hardwareAddress]
  -[CWFSCNetworkInterface __networkInterfaceHardwareAddress]
  -[CWFSCNetworkInterface __linkStateConfig]
  -[CWFSCNetworkInterface airPortStateConfiguration]
  -[CWFSCNetworkInterface airPortSetupConfiguration]
  -[CWFSCNetworkInterface IPv4BroadcastAddresses]
  -[CWFSCNetworkInterface IPv6Flags]
  -[CWFSCNetworkInterface isLinkActive]


CWFRangingPeer : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *MACAddress
 @property  NSData *identifier
 @property  NSData *PMK
 @property  unsigned long numberOfMeasurements
 @property  BOOL useCoreRotation

  // class methods
  +[CWFRangingPeer supportsSecureCoding]
  +[CWFRangingPeer rangingPeerWithMACAddress:PMK:]

  // instance methods
  -[CWFRangingPeer MACAddress]
  -[CWFRangingPeer initWithCoder:]
  -[CWFRangingPeer PMK]
  -[CWFRangingPeer .cxx_destruct]
  -[CWFRangingPeer isEqual:]
  -[CWFRangingPeer identifier]
  -[CWFRangingPeer setIdentifier:]
  -[CWFRangingPeer copyWithZone:]
  -[CWFRangingPeer setPMK:]
  -[CWFRangingPeer encodeWithCoder:]
  -[CWFRangingPeer setMACAddress:]
  -[CWFRangingPeer numberOfMeasurements]
  -[CWFRangingPeer useCoreRotation]
  -[CWFRangingPeer isEqualToRangingPeer:]
  -[CWFRangingPeer setNumberOfMeasurements:]
  -[CWFRangingPeer setUseCoreRotation:]


CWFAutoJoinContext : NSObject <NSCopying>
 @property  NSUUID *autoJoinUUID
 @property  CWFAutoJoinParameters *autoJoinParameters
 @property  NSArray *knownNetworks
 @property  NSArray *channelList
 @property  NSArray *SSIDList
 @property  NSArray *ANQPElementIDList
 @property  unsigned long maxScanChannelCount
 @property  unsigned long maxBSSChannelCount
 @property  unsigned long maxBSSChannelAge
 @property  unsigned long maxScanSSIDCount
 @property  unsigned long maxHiddenKnownNetworkSSIDAge
 @property  unsigned long maxScanCacheAge
 @property  unsigned long maxANQPCacheAge
 @property  unsigned long maxScanCycles
 @property  long long minRSSI
 @property  unsigned long dwellTime
 @property  BOOL cacheOnly
 @property  double minBSSLocationAccuracy
 @property  double maxBSSLocationDistance

  // instance methods
  -[CWFAutoJoinContext .cxx_destruct]
  -[CWFAutoJoinContext setDwellTime:]
  -[CWFAutoJoinContext setCacheOnly:]
  -[CWFAutoJoinContext dwellTime]
  -[CWFAutoJoinContext cacheOnly]
  -[CWFAutoJoinContext SSIDList]
  -[CWFAutoJoinContext copyWithZone:]
  -[CWFAutoJoinContext setSSIDList:]
  -[CWFAutoJoinContext minRSSI]
  -[CWFAutoJoinContext knownNetworks]
  -[CWFAutoJoinContext setKnownNetworks:]
  -[CWFAutoJoinContext setANQPElementIDList:]
  -[CWFAutoJoinContext ANQPElementIDList]
  -[CWFAutoJoinContext setAutoJoinParameters:]
  -[CWFAutoJoinContext setAutoJoinUUID:]
  -[CWFAutoJoinContext setMaxScanChannelCount:]
  -[CWFAutoJoinContext setMaxScanSSIDCount:]
  -[CWFAutoJoinContext setMinRSSI:]
  -[CWFAutoJoinContext setMaxBSSChannelCount:]
  -[CWFAutoJoinContext setMinBSSLocationAccuracy:]
  -[CWFAutoJoinContext setMaxBSSLocationDistance:]
  -[CWFAutoJoinContext setMaxScanCacheAge:]
  -[CWFAutoJoinContext setMaxANQPCacheAge:]
  -[CWFAutoJoinContext setMaxScanCycles:]
  -[CWFAutoJoinContext maxBSSChannelAge]
  -[CWFAutoJoinContext minBSSLocationAccuracy]
  -[CWFAutoJoinContext maxBSSLocationDistance]
  -[CWFAutoJoinContext maxBSSChannelCount]
  -[CWFAutoJoinContext maxHiddenKnownNetworkSSIDAge]
  -[CWFAutoJoinContext setChannelList:]
  -[CWFAutoJoinContext channelList]
  -[CWFAutoJoinContext maxScanCacheAge]
  -[CWFAutoJoinContext autoJoinParameters]
  -[CWFAutoJoinContext maxScanCycles]
  -[CWFAutoJoinContext maxScanChannelCount]
  -[CWFAutoJoinContext maxScanSSIDCount]
  -[CWFAutoJoinContext maxANQPCacheAge]
  -[CWFAutoJoinContext setMaxBSSChannelAge:]
  -[CWFAutoJoinContext setMaxHiddenKnownNetworkSSIDAge:]
  -[CWFAutoJoinContext autoJoinUUID]


CWFRequestParameters : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSString *interfaceName
 @property  int virtualInterfaceRole
 @property  unsigned long timeout
 @property  long long qualityOfService
 @property  long long queuePriority
 @property  SFAuthorization *authorization
 @property  NSData *authorizationExternalFormData

  // class methods
  +[CWFRequestParameters supportsSecureCoding]

  // instance methods
  -[CWFRequestParameters setQueuePriority:]
  -[CWFRequestParameters setAuthorization:]
  -[CWFRequestParameters UUID]
  -[CWFRequestParameters initWithCoder:]
  -[CWFRequestParameters qualityOfService]
  -[CWFRequestParameters .cxx_destruct]
  -[CWFRequestParameters isEqualTorequestParameters:]
  -[CWFRequestParameters interfaceName]
  -[CWFRequestParameters setTimeout:]
  -[CWFRequestParameters setQualityOfService:]
  -[CWFRequestParameters init]
  -[CWFRequestParameters setInterfaceName:]
  -[CWFRequestParameters isEqual:]
  -[CWFRequestParameters __authData:]
  -[CWFRequestParameters authorization]
  -[CWFRequestParameters queuePriority]
  -[CWFRequestParameters timeout]
  -[CWFRequestParameters setVirtualInterfaceRole:]
  -[CWFRequestParameters copyWithZone:]
  -[CWFRequestParameters authorizationExternalFormData]
  -[CWFRequestParameters encodeWithCoder:]
  -[CWFRequestParameters setUUID:]
  -[CWFRequestParameters virtualInterfaceRole]


CWFEventID : NSObject <NSCopying, NSSecureCoding>
 @property  long long type
 @property  NSString *interfaceName

  // class methods
  +[CWFEventID eventIDWithType:interfaceName:]
  +[CWFEventID supportsSecureCoding]

  // instance methods
  -[CWFEventID initWithCoder:]
  -[CWFEventID setType:]
  -[CWFEventID .cxx_destruct]
  -[CWFEventID interfaceName]
  -[CWFEventID isEqualToEventID:]
  -[CWFEventID setInterfaceName:]
  -[CWFEventID isEqual:]
  -[CWFEventID type]
  -[CWFEventID copyWithZone:]
  -[CWFEventID encodeWithCoder:]


CWFAutoJoinMetric : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL result
 @property  unsigned long duration
 @property  unsigned long durationFromLinkDownTrigger
 @property  unsigned long durationFromDisplayOnTrigger
 @property  unsigned long durationFromDeviceUnlockTrigger
 @property  unsigned long durationFromWiFiPowerOnTrigger
 @property  long long previousNonRetryAutoJoinTrigger
 @property  unsigned long durationFromNonRetryAutoJoinTrigger
 @property  NSError *error
 @property  BOOL wasCancelled
 @property  BOOL wasAborted
 @property  CWFAutoJoinParameters *autoJoinParameters
 @property  long long retrySchedule
 @property  unsigned long retryScheduleIndex
 @property  BOOL isSSIDTransition
 @property  BOOL didUseLocationOptimizedChannelList
 @property  BOOL didDetectColocatedNetworkEnvironment
 @property  BOOL didDeferJoin
 @property  BOOL didJoinLessPreferredNetwork
 @property  unsigned long scanDuration
 @property  NSArray *scanChannels
 @property  unsigned long preAssociationScanDuration
 @property  NSArray *preAssociationScanChannels
 @property  NSArray *scanErrors
 @property  unsigned long GASQueryDuration
 @property  NSArray *GASQueryNetworks
 @property  NSArray *GASQueryErrors
 @property  unsigned long joinDuration
 @property  NSArray *joinErrors
 @property  CWFScanResult *network
 @property  BOOL autoHotspotWasAttempted
 @property  BOOL autoHotspotResult
 @property  unsigned long autoHotspotDuration
 @property  BOOL autoHotspotWasAborted
 @property  NSError *autoHotspotError
 @property  long long autoHotspotMode
 @property  unsigned long autoHotspotBrowseDuration
 @property  NSError *autoHotspotBrowseError
 @property  unsigned long autoHotspotJoinDuration
 @property  NSArray *autoHotspotJoinErrors
 @property  SFRemoteHotspotDevice *hotspot
 @property  NSString *coreAnalyticsEventName
 @property  NSDictionary *coreAnalyticsEventPayload

  // class methods
  +[CWFAutoJoinMetric supportsSecureCoding]

  // instance methods
  -[CWFAutoJoinMetric wasCancelled]
  -[CWFAutoJoinMetric network]
  -[CWFAutoJoinMetric initWithCoder:]
  -[CWFAutoJoinMetric .cxx_destruct]
  -[CWFAutoJoinMetric setDuration:]
  -[CWFAutoJoinMetric result]
  -[CWFAutoJoinMetric setResult:]
  -[CWFAutoJoinMetric setNetwork:]
  -[CWFAutoJoinMetric copyWithZone:]
  -[CWFAutoJoinMetric hotspot]
  -[CWFAutoJoinMetric setError:]
  -[CWFAutoJoinMetric setHotspot:]
  -[CWFAutoJoinMetric duration]
  -[CWFAutoJoinMetric encodeWithCoder:]
  -[CWFAutoJoinMetric error]
  -[CWFAutoJoinMetric coreAnalyticsEventName]
  -[CWFAutoJoinMetric setAutoJoinParameters:]
  -[CWFAutoJoinMetric setRetrySchedule:]
  -[CWFAutoJoinMetric setRetryScheduleIndex:]
  -[CWFAutoJoinMetric setIsSSIDTransition:]
  -[CWFAutoJoinMetric setDurationFromLinkDownTrigger:]
  -[CWFAutoJoinMetric setDurationFromDeviceUnlockTrigger:]
  -[CWFAutoJoinMetric setDurationFromWiFiPowerOnTrigger:]
  -[CWFAutoJoinMetric setDurationFromNonRetryAutoJoinTrigger:]
  -[CWFAutoJoinMetric setPreviousNonRetryAutoJoinTrigger:]
  -[CWFAutoJoinMetric __descriptionForError:]
  -[CWFAutoJoinMetric scanChannels]
  -[CWFAutoJoinMetric autoHotspotDuration]
  -[CWFAutoJoinMetric autoHotspotResult]
  -[CWFAutoJoinMetric autoHotspotError]
  -[CWFAutoJoinMetric coreAnalyticsEventPayload]
  -[CWFAutoJoinMetric setDidUseLocationOptimizedChannelList:]
  -[CWFAutoJoinMetric retrySchedule]
  -[CWFAutoJoinMetric setDidDetectColocatedNetworkEnvironment:]
  -[CWFAutoJoinMetric autoJoinParameters]
  -[CWFAutoJoinMetric setDidDeferJoin:]
  -[CWFAutoJoinMetric setDidJoinLessPreferredNetwork:]
  -[CWFAutoJoinMetric setWasCancelled:]
  -[CWFAutoJoinMetric setWasAborted:]
  -[CWFAutoJoinMetric GASQueryNetworks]
  -[CWFAutoJoinMetric setGASQueryNetworks:]
  -[CWFAutoJoinMetric GASQueryDuration]
  -[CWFAutoJoinMetric setGASQueryDuration:]
  -[CWFAutoJoinMetric GASQueryErrors]
  -[CWFAutoJoinMetric setGASQueryErrors:]
  -[CWFAutoJoinMetric preAssociationScanChannels]
  -[CWFAutoJoinMetric setPreAssociationScanChannels:]
  -[CWFAutoJoinMetric setScanChannels:]
  -[CWFAutoJoinMetric preAssociationScanDuration]
  -[CWFAutoJoinMetric setPreAssociationScanDuration:]
  -[CWFAutoJoinMetric scanDuration]
  -[CWFAutoJoinMetric setScanDuration:]
  -[CWFAutoJoinMetric scanErrors]
  -[CWFAutoJoinMetric setScanErrors:]
  -[CWFAutoJoinMetric joinDuration]
  -[CWFAutoJoinMetric setJoinDuration:]
  -[CWFAutoJoinMetric joinErrors]
  -[CWFAutoJoinMetric setJoinErrors:]
  -[CWFAutoJoinMetric autoHotspotJoinDuration]
  -[CWFAutoJoinMetric setAutoHotspotJoinDuration:]
  -[CWFAutoJoinMetric autoHotspotJoinErrors]
  -[CWFAutoJoinMetric setAutoHotspotJoinErrors:]
  -[CWFAutoJoinMetric setAutoHotspotBrowseDuration:]
  -[CWFAutoJoinMetric setAutoHotspotBrowseError:]
  -[CWFAutoJoinMetric setAutoHotspotWasAborted:]
  -[CWFAutoJoinMetric setAutoHotspotMode:]
  -[CWFAutoJoinMetric setAutoHotspotWasAttempted:]
  -[CWFAutoJoinMetric setAutoHotspotDuration:]
  -[CWFAutoJoinMetric setAutoHotspotResult:]
  -[CWFAutoJoinMetric setAutoHotspotError:]
  -[CWFAutoJoinMetric autoHotspotMode]
  -[CWFAutoJoinMetric wasAborted]
  -[CWFAutoJoinMetric durationFromLinkDownTrigger]
  -[CWFAutoJoinMetric durationFromDisplayOnTrigger]
  -[CWFAutoJoinMetric durationFromDeviceUnlockTrigger]
  -[CWFAutoJoinMetric durationFromWiFiPowerOnTrigger]
  -[CWFAutoJoinMetric previousNonRetryAutoJoinTrigger]
  -[CWFAutoJoinMetric durationFromNonRetryAutoJoinTrigger]
  -[CWFAutoJoinMetric retryScheduleIndex]
  -[CWFAutoJoinMetric didUseLocationOptimizedChannelList]
  -[CWFAutoJoinMetric didDetectColocatedNetworkEnvironment]
  -[CWFAutoJoinMetric isSSIDTransition]
  -[CWFAutoJoinMetric didDeferJoin]
  -[CWFAutoJoinMetric didJoinLessPreferredNetwork]
  -[CWFAutoJoinMetric autoHotspotWasAttempted]
  -[CWFAutoJoinMetric autoHotspotWasAborted]
  -[CWFAutoJoinMetric autoHotspotBrowseDuration]
  -[CWFAutoJoinMetric autoHotspotBrowseError]
  -[CWFAutoJoinMetric setDurationFromDisplayOnTrigger:]


CWFLinkQualityMetric : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *updatedAt
 @property  long long RSSI
 @property  long long noise
 @property  double txRate
 @property  double rxRate
 @property  float CCA
 @property  NSData *linkQualityMetricData

  // class methods
  +[CWFLinkQualityMetric supportsSecureCoding]

  // instance methods
  -[CWFLinkQualityMetric initWithCoder:]
  -[CWFLinkQualityMetric RSSI]
  -[CWFLinkQualityMetric .cxx_destruct]
  -[CWFLinkQualityMetric txRate]
  -[CWFLinkQualityMetric rxRate]
  -[CWFLinkQualityMetric updatedAt]
  -[CWFLinkQualityMetric isEqual:]
  -[CWFLinkQualityMetric setUpdatedAt:]
  -[CWFLinkQualityMetric isEqualToLinkQualityMetric:]
  -[CWFLinkQualityMetric linkQualityMetricData]
  -[CWFLinkQualityMetric copyWithZone:]
  -[CWFLinkQualityMetric noise]
  -[CWFLinkQualityMetric CCA]
  -[CWFLinkQualityMetric setLinkQualityMetricData:]
  -[CWFLinkQualityMetric encodeWithCoder:]


CWFEvent : NSObject <NSCopying>
 @property  NSUUID *UUID
 @property  CWFEventID *eventID
 @property  unsigned long acknowledgementTimeout
 @property  @? acknowledge
 @property  long long type
 @property  NSDate *timestamp
 @property  NSDictionary *info

  // instance methods
  -[CWFEvent UUID]
  -[CWFEvent setType:]
  -[CWFEvent setInfo:]
  -[CWFEvent .cxx_destruct]
  -[CWFEvent info]
  -[CWFEvent init]
  -[CWFEvent isEqualToEvent:]
  -[CWFEvent isEqual:]
  -[CWFEvent setEventID:]
  -[CWFEvent eventID]
  -[CWFEvent type]
  -[CWFEvent timestamp]
  -[CWFEvent acknowledgementTimeout]
  -[CWFEvent acknowledge]
  -[CWFEvent copyWithZone:]
  -[CWFEvent setAcknowledge:]
  -[CWFEvent setTimestamp:]
  -[CWFEvent setUUID:]
  -[CWFEvent setAcknowledgementTimeout:]


CWFActivity : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSString *reason
 @property  long long type
 @property  unsigned long timeout

  // class methods
  +[CWFActivity supportsSecureCoding]
  +[CWFActivity activityWithType:reason:]

  // instance methods
  -[CWFActivity UUID]
  -[CWFActivity initWithCoder:]
  -[CWFActivity setType:]
  -[CWFActivity .cxx_destruct]
  -[CWFActivity setTimeout:]
  -[CWFActivity init]
  -[CWFActivity isEqual:]
  -[CWFActivity timeout]
  -[CWFActivity reason]
  -[CWFActivity type]
  -[CWFActivity setReason:]
  -[CWFActivity copyWithZone:]
  -[CWFActivity encodeWithCoder:]
  -[CWFActivity setUUID:]
  -[CWFActivity isEqualToActivity:]


CWFScanParameters : NSObject <NSCopying, NSSecureCoding>
 @property  NSArray *channels
 @property  NSString *SSID
 @property  NSArray *SSIDList
 @property  unsigned long numberOfScans
 @property  unsigned long restTime
 @property  unsigned long dwellTime
 @property  unsigned long maximumCacheAge
 @property  BOOL cacheOnly
 @property  int BSSType
 @property  int PHYMode
 @property  int scanType
 @property  long long minimumRSSI
 @property  unsigned long maximumAge
 @property  BOOL mergeScanResults
 @property  BOOL includeHiddenNetworks
 @property  int scanFlags
 @property  NSSet *includeProperties
 @property  NSArray *includeScanResults
 @property  BOOL includeMatchingKnownNetworkProfiles
 @property  NSArray *ANQPElementIDListForPasspointScanResults
 @property  unsigned long maximumANQPCacheAgeForPasspointScanResults

  // class methods
  +[CWFScanParameters supportsSecureCoding]

  // instance methods
  -[CWFScanParameters isEqualToScanParameters:]
  -[CWFScanParameters scanFlags]
  -[CWFScanParameters initWithCoder:]
  -[CWFScanParameters setScanType:]
  -[CWFScanParameters setMergeScanResults:]
  -[CWFScanParameters includeHiddenNetworks]
  -[CWFScanParameters setNumberOfScans:]
  -[CWFScanParameters setMaximumAge:]
  -[CWFScanParameters scanType]
  -[CWFScanParameters .cxx_destruct]
  -[CWFScanParameters setDwellTime:]
  -[CWFScanParameters includeScanResults]
  -[CWFScanParameters setRestTime:]
  -[CWFScanParameters ANQPElementIDListForPasspointScanResults]
  -[CWFScanParameters includeMatchingKnownNetworkProfiles]
  -[CWFScanParameters setCacheOnly:]
  -[CWFScanParameters setIncludeHiddenNetworks:]
  -[CWFScanParameters dwellTime]
  -[CWFScanParameters cacheOnly]
  -[CWFScanParameters isEqual:]
  -[CWFScanParameters maximumAge]
  -[CWFScanParameters numberOfScans]
  -[CWFScanParameters setBSSType:]
  -[CWFScanParameters minimumRSSI]
  -[CWFScanParameters maximumANQPCacheAgeForPasspointScanResults]
  -[CWFScanParameters setIncludeProperties:]
  -[CWFScanParameters restTime]
  -[CWFScanParameters maximumCacheAge]
  -[CWFScanParameters SSIDList]
  -[CWFScanParameters setIncludeScanResults:]
  -[CWFScanParameters setIncludeMatchingKnownNetworkProfiles:]
  -[CWFScanParameters PHYMode]
  -[CWFScanParameters setANQPElementIDListForPasspointScanResults:]
  -[CWFScanParameters channels]
  -[CWFScanParameters includeProperties]
  -[CWFScanParameters setMaximumANQPCacheAgeForPasspointScanResults:]
  -[CWFScanParameters setPHYMode:]
  -[CWFScanParameters SSID]
  -[CWFScanParameters setMaximumCacheAge:]
  -[CWFScanParameters copyWithZone:]
  -[CWFScanParameters setMinimumRSSI:]
  -[CWFScanParameters mergeScanResults]
  -[CWFScanParameters setScanFlags:]
  -[CWFScanParameters setSSID:]
  -[CWFScanParameters setSSIDList:]
  -[CWFScanParameters BSSType]
  -[CWFScanParameters setChannels:]
  -[CWFScanParameters encodeWithCoder:]


(ScanRecord)
	// instance methods
	-[(ScanRecord) supportsCarPlay]
	-[(ScanRecord) modelName]
	-[(ScanRecord) displayName]
	-[(ScanRecord) beaconInterval]
	-[(ScanRecord) supportedSecurityTypes]
	-[(ScanRecord) age]
	-[(ScanRecord) supportedPHYModes]
	-[(ScanRecord) countryCode]
	-[(ScanRecord) HESSID]
	-[(ScanRecord) hasAppleIE]
	-[(ScanRecord) RSSI]
	-[(ScanRecord) deviceID]
	-[(ScanRecord) isAppleSWAP]
	-[(ScanRecord) manufacturerName]
	-[(ScanRecord) isPasspoint]
	-[(ScanRecord) venueType]
	-[(ScanRecord) isIBSS]
	-[(ScanRecord) channel]
	-[(ScanRecord) SSID]
	-[(ScanRecord) friendlyName]
	-[(ScanRecord) isPersonalHotspot]
	-[(ScanRecord) BSSID]
	-[(ScanRecord) noise]
	-[(ScanRecord) hasInterworkingIE]
	-[(ScanRecord) venueGroup]
	-[(ScanRecord) WAPISubtype]
	-[(ScanRecord) cellularNetworkInfo]
	-[(ScanRecord) NAIRealmNameList]
	-[(ScanRecord) roamingConsortiumList]
	-[(ScanRecord) supportsAirPlay2]
	-[(ScanRecord) isInternetAccessible]
	-[(ScanRecord) primaryMAC]
	-[(ScanRecord) domainNameList]
	-[(ScanRecord) operatorFriendlyNameList]
	-[(ScanRecord) airPortBaseStationModel]
	-[(ScanRecord) supportsAirPlay]
	-[(ScanRecord) channelInfo]
	-[(ScanRecord) informationElementData]
	-[(ScanRecord) isUnconfiguredAirPortBaseStation]
	-[(ScanRecord) accessNetworkType]
	-[(ScanRecord) isAdditionalStepRequiredForAccess]
	-[(ScanRecord) isEmergencyServicesReachable]
	-[(ScanRecord) isUnauthenticatedEmergencyServiceAccessible]
	-[(ScanRecord) isUnconfiguredDevice]
	-[(ScanRecord) providesInternetAccess]
	-[(ScanRecord) supportsWPS]
	-[(ScanRecord) supportsiAPOverWiFi]
	-[(ScanRecord) supports2GHzNetworks]
	-[(ScanRecord) supports5GHzNetworks]
	-[(ScanRecord) supportsHomeKit]
	-[(ScanRecord) supportsHomeKit2]
	-[(ScanRecord) supportsAirPrint]
	-[(ScanRecord) supportsMFi]
	-[(ScanRecord) supportsMFiHardwareAuth]
	-[(ScanRecord) supportsSoftwareTokenAuth]
	-[(ScanRecord) supportsSoftwareCertAuth]
	-[(ScanRecord) supportsSecureWAC]
	-[(ScanRecord) supportsWoW]
	-[(ScanRecord) bluetoothMAC]
	-[(ScanRecord) ANQPResponse]
	-[(ScanRecord) WPAUnicastCiphers]
	-[(ScanRecord) hasWPAIE]
	-[(ScanRecord) WPAMulticastCipher]
	-[(ScanRecord) WPAAuthSelectors]
	-[(ScanRecord) RSNUnicastCiphers]
	-[(ScanRecord) hasRSNIE]
	-[(ScanRecord) RSNMulticastCipher]
	-[(ScanRecord) RSNBroadcastCipher]
	-[(ScanRecord) RSNAuthSelectors]
	-[(ScanRecord) RSNCapabilities]
	-[(ScanRecord) __WAPIPolicy]

01 00 0740 /System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics: AnalyticsEventObserver 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0900 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSUbiquitousKeyValueStore 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0400 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessHandle 
01 00 0400 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessIdentifier 
01 00 0400 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessMonitor 
01 00 0400 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessPredicate 
01 00 0400 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessStateDescriptor 
