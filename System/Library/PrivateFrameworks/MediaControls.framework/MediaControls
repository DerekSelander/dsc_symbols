|| __DATA.__objc_data _OBJC_CLASS_$_MediaControlsBluetoothListeningModeButton
|| __DATA.__objc_data _OBJC_CLASS_$_MediaControlsExpandableButtonOption
|| __DATA.__objc_data _OBJC_CLASS_$_MediaControlsLanguageOptionsViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MediaControlsBluetoothListeningModeButton
|| __DATA.__objc_data _OBJC_METACLASS_$_MediaControlsExpandableButton
|| __DATA.__objc_data _OBJC_METACLASS_$_MediaControlsExpandableButtonOption
|| __DATA.__objc_data _OBJC_METACLASS_$_MediaControlsLanguageOptionsViewController
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierAppleTV
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierGenericSpeaker
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierHomePod
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierHomePodStereoPair
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierSpeaker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRPlatterViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsCollectionViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsEndpointsViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsExpandableButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsPanelViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsStyleCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsVolumeBackgroundViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsVolumeSliderView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsVolumeViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRPlatterViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsCollectionViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsEndpointsViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsPanelViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsStyleCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsVolumeBackgroundViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsVolumeSliderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsVolumeViewController
__ AVFoundation: _AVOutputDeviceBluetoothListeningModeActiveNoiseCancellation
__ AVFoundation: _AVOutputDeviceBluetoothListeningModeAudioTransparency
__ AVFoundation: _AVOutputDeviceBluetoothListeningModeNormal
__ AVFoundation: _OBJC_CLASS_$_AVExternalPlaybackMonitor
__ AVFoundation: _OBJC_CLASS_$_AVTimeFormatter
__ AggregateDictionary: _ADClientAddValueForScalarKey
__ AirPlayRoutePrediction: _ARPRouteSelectionControlBlueBanner
__ AirPlayRoutePrediction: _ARPRouteSelectionControlBluePill
__ AirPlayRoutePrediction: _ARPRouteSelectionControlControlCenter
__ AirPlayRoutePrediction: _ARPRouteSelectionControlInVideo
__ AudioToolbox: _AudioServicesPlaySystemSound
__ AudioToolbox: _OBJC_CLASS_$_AVHapticPlayer
__ Celestial: _AVSystemController_AppToInterruptCurrentNowPlayingSessionAttribute
__ Celestial: _AVSystemController_DeviceManufacturedForEURegion
__ Celestial: _AVSystemController_EUVolumeLimitAttribute
__ Celestial: _AVSystemController_EUVolumeLimitDidChangeNotification
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedAttribute
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedNotificationParameter
__ Celestial: _AVSystemController_EUVolumeLimitNotificationParameter
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ ControlCenterUIKit: _CCUICompactModuleContinuousCornerRadius
__ ControlCenterUIKit: _CCUIDefaultExpandedContentModuleWidth
__ ControlCenterUIKit: _CCUIExpandedModuleContinuousCornerRadius
__ ControlCenterUIKit: _CCUIExpandedModuleEdgeInsets
__ ControlCenterUIKit: _CCUIIsPortrait
__ ControlCenterUIKit: _CCUILayoutShouldBePortrait
__ ControlCenterUIKit: _CCUISliderExpandedContentModuleHeight
__ ControlCenterUIKit: _CCUISliderExpandedContentModuleWidth
__ ControlCenterUIKit: _CCUISliderExpandedModuleContinuousCornerRadius
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUICAPackageDescription
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUICAPackageView
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIContentModuleContext
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIContinuousSliderView
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIControlCenterMaterialView
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUISliderModuleBackgroundViewController
__ ControlCenterUIKit: _OBJC_METACLASS_$_CCUICAPackageView
__ ControlCenterUIKit: _OBJC_METACLASS_$_CCUIContinuousSliderView
__ ControlCenterUIKit: _OBJC_METACLASS_$_CCUISliderModuleBackgroundViewController
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: __NSIsNSArray
__ CoreFoundation: __NSIsNSDictionary
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGFloatIsValid
__ CoreGraphics: _CGPathCreateWithRect
__ CoreGraphics: _CGPathRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ FrontBoardServices: _FBSDisplayLayoutElementLockScreenIdentifier
__ FrontBoardServices: _FBSOpenApplicationOptionKeyLaunchOrigin
__ FrontBoardServices: _FBSOpenApplicationOptionKeyPromptUnlockDevice
__ FrontBoardServices: _FBSOpenApplicationOptionKeyUnlockDevice
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitor
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitorConfiguration
__ FrontBoardServices: _OBJC_CLASS_$_FBSOpenApplicationOptions
__ FrontBoardServices: _OBJC_CLASS_$_FBSOpenApplicationService
__ HomeKit: _OBJC_CLASS_$_HMHomeManager
__ HomeKit: _OBJC_CLASS_$_HMMutableHomeManagerConfiguration
__ MPUFoundation: _OBJC_CLASS_$_MPUMarqueeView
__ MaterialKit: _OBJC_CLASS_$_MTMaterialView
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerChangeRequest
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerPath
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerPathCache
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerRequest
__ MediaPlayer: _MPAVRouteConnectionErrorDomain
__ MediaPlayer: _MPAVRouteDidChangeNotification
__ MediaPlayer: _MPAVRoutingControllerActiveSystemRouteDidChangeNotification
__ MediaPlayer: _MPAVRoutingViewItemActionIdentifierShareAudio
__ MediaPlayer: _MPFloatGetSafeScaleForValue
__ MediaPlayer: _MPFloatRoundForScale
__ MediaPlayer: _MPLogCategoryDefault
__ MediaPlayer: _MPLogCategoryRemoteControl
__ MediaPlayer: _MPLogCategoryRemoteControl_Oversize
__ MediaPlayer: _MPModelPropertyAlbumTitle
__ MediaPlayer: _MPModelPropertyArtistName
__ MediaPlayer: _MPModelPropertyComposerName
__ MediaPlayer: _MPModelPropertyRadioStationAttributionLabel
__ MediaPlayer: _MPModelPropertyRadioStationName
__ MediaPlayer: _MPModelPropertySongArtwork
__ MediaPlayer: _MPModelPropertySongDuration
__ MediaPlayer: _MPModelPropertySongExplicit
__ MediaPlayer: _MPModelPropertySongShouldShowComposer
__ MediaPlayer: _MPModelPropertySongTitle
__ MediaPlayer: _MPModelRelationshipAlbumArtist
__ MediaPlayer: _MPModelRelationshipGenericRadioStation
__ MediaPlayer: _MPModelRelationshipGenericSong
__ MediaPlayer: _MPModelRelationshipSongAlbum
__ MediaPlayer: _MPModelRelationshipSongArtist
__ MediaPlayer: _MPModelRelationshipSongComposer
__ MediaPlayer: _MPRectByApplyingUserInterfaceLayoutDirectionInRect
__ MediaPlayer: _MPVolumeSliderVolumeControlCapabilitiesDidChangeNotification
__ MediaPlayer: _OBJC_CLASS_$_MPAVClippingTableView
__ MediaPlayer: _OBJC_CLASS_$_MPAVClippingTableViewCell
__ MediaPlayer: _OBJC_CLASS_$_MPAVEndpointRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVEndpointRoutingDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPAVOutputDeviceRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVOutputDeviceRoutingDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPAVRouteConnection
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingViewController
__ MediaPlayer: _OBJC_CLASS_$_MPButton
__ MediaPlayer: _OBJC_CLASS_$_MPCubicSpringAnimator
__ MediaPlayer: _OBJC_CLASS_$_MPCubicSpringTimingParameters
__ MediaPlayer: _OBJC_CLASS_$_MPMRAVEndpointObserverWrapper
__ MediaPlayer: _OBJC_CLASS_$_MPMRAVEndpointWrapper
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControls
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControlsConfiguration
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControlsLanguageOptions
__ MediaPlayer: _OBJC_CLASS_$_MPMutableSectionedCollection
__ MediaPlayer: _OBJC_CLASS_$_MPPropertySet
__ MediaPlayer: _OBJC_CLASS_$_MPRequestResponseController
__ MediaPlayer: _OBJC_CLASS_$_MPRouteLabel
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeControllerRouteDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeControllerSystemDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeGroupSliderCoordinator
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeHUDController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeHardwareButtonController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeSlider
__ MediaPlayer: _OBJC_METACLASS_$_MPAVClippingTableViewCell
__ MediaPlayer: _OBJC_METACLASS_$_MPAVRoutingViewController
__ MediaPlayer: _OBJC_METACLASS_$_MPButton
__ MediaPlayer: _OBJC_METACLASS_$_MPVolumeSlider
__ MediaPlayer: __MPAVRouteConnectionDidConnectNotification
__ MediaPlayer: __MPAVRouteConnectionDidInvalidateNotification
__ MediaRemote: _MRAVEndpointCopyLocalizedName
__ MediaRemote: _MRAVEndpointCopyOrigin
__ MediaRemote: _MRAVEndpointCopyOutputDevices
__ MediaRemote: _MRAVEndpointCopyUniqueIdentifier
__ MediaRemote: _MRAVEndpointGetActiveSystemEndpointUID
__ MediaRemote: _MRAVEndpointGetExternalDevice
__ MediaRemote: _MRAVEndpointGetLocalEndpoint
__ MediaRemote: _MRAVEndpointObserverAddEndpointChangedCallback
__ MediaRemote: _MRAVEndpointObserverBegin
__ MediaRemote: _MRAVEndpointObserverCreateWithOutputDeviceUID
__ MediaRemote: _MRAVEndpointObserverEnd
__ MediaRemote: _MRAVEndpointResolveActiveSystemEndpointWithType
__ MediaRemote: _MRAVOutputContextCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputContextGetSharedAudioPresentationContext
__ MediaRemote: _MRAVOutputDeviceCopyAvailableBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceCopyCurrentBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputDeviceGetSubtype
__ MediaRemote: _MRAVOutputDeviceIsAddedToHomeKit
__ MediaRemote: _MRAVOutputDeviceSetCurrentBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceSupportsRapport
__ MediaRemote: _MRAVReconnaissanceSessionBeginSearch
__ MediaRemote: _MRAVReconnaissanceSessionCreateWithEndpointFeatures
__ MediaRemote: _MRExternalDeviceCopyUniqueIdentifier
__ MediaRemote: _MRMediaRemoteApplicationIsSystemMediaApplication
__ MediaRemote: _MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin
__ MediaRemote: _MRMediaRemotePlaybackStateIsAdvancing
__ MediaRemote: _kMRMediaRemoteActiveEndpointChangeTypeUserInfoKey
__ MediaRemote: _kMRMediaRemoteActiveEndpointTypeUserInfoKey
__ MediaRemote: _kMRMediaRemoteActiveSystemEndpointDidChangeNotification
__ MediaServices: _MSVDeviceOSIsInternalInstall
__ MediaServices: _OBJC_CLASS_$_MSVPersistentTimer
__ MediaServices: _OBJC_CLASS_$_MSVSystemDialog
__ MediaServices: _OBJC_CLASS_$_MSVSystemDialogOptions
__ MediaServices: _OBJC_CLASS_$_MSVTimer
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAPackage
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _kCAFilterTrilinear
__ QuartzCore: _kCAPackageTypeCAMLBundle
__ SharingUI: _OBJC_CLASS_$_SFShareAudioViewController
__ TVRemoteUI: _OBJC_CLASS_$_TVRUIRemoteViewController
__ TVRemoteUI: _OBJC_CLASS_$_TVRViewServiceConfigContext
__ TVRemoteUI: _OBJC_CLASS_$_TVRViewServiceManager
__ UIKit: _NSFontAttributeName
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UICubicTimingParameters
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIFontMetrics
__ UIKit: _OBJC_CLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIImpactFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILayoutGuide
__ UIKit: _OBJC_CLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UINotificationFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPreviewPresentationController
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIViewSpringAnimationBehavior
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$__UIImpactFeedbackGeneratorConfiguration
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIPreviewPresentationController
__ UIKit: _OBJC_METACLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _UIAccessibilityIsReduceMotionEnabled
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraExtraLarge
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontTextStyleHeadline
__ UIKit: _UIFontWeightMedium
__ UIKit: _UIRectCenteredAboutPoint
__ UIKit: _UIRectCenteredIntegralRect
__ UIKit: _UIRectCenteredIntegralRectScale
__ UIKit: _UIRectCenteredXInRect
__ UIKit: _UIRectCenteredYInRect
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRectIntegralWithScale
__ UIKit: _UIRoundToScale
__ UIKit: _UITableViewAutomaticDimension
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewKey
__ iTunesCloud: _ICAgeVerificationStateDidChangeNotification
__ iTunesCloud: _OBJC_CLASS_$_ICAgeVerificationManager
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _lround
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_state_add_handler
__ libSystem.B.dylib: _uname
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
MediaControlsParentContainerView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  UIView *mediaControlsRoutingPickerView
 @property  long long routingViewControllerAnimationCount
 @property  long long style
 @property  long long selectedMode
 @property  MediaControlsContainerView *containerView
 @property  MediaControlsTransportStackView *transportStackView
 @property  MediaControlsTimeControl *timeControl
 @property  UIView *routingView
 @property  MediaControlsSeparatorView *topDividerView
 @property  MediaControlsSeparatorView *bottomDividerView

  // instance methods
  -[MediaControlsParentContainerView .cxx_destruct]
  -[MediaControlsParentContainerView style]
  -[MediaControlsParentContainerView setStyle:]
  -[MediaControlsParentContainerView initWithFrame:]
  -[MediaControlsParentContainerView containerView]
  -[MediaControlsParentContainerView setContainerView:]
  -[MediaControlsParentContainerView layoutSubviews]
  -[MediaControlsParentContainerView didMoveToWindow]
  -[MediaControlsParentContainerView setSelectedMode:animated:]
  -[MediaControlsParentContainerView setSelectedMode:]
  -[MediaControlsParentContainerView selectedMode]
  -[MediaControlsParentContainerView mediaControlsRoutingPickerView]
  -[MediaControlsParentContainerView topDividerView]
  -[MediaControlsParentContainerView bottomDividerView]
  -[MediaControlsParentContainerView _updateTimeControlVisibility:]
  -[MediaControlsParentContainerView _updateRoutingPickerVisibilityAnimated:]
  -[MediaControlsParentContainerView _toggleRoutingPickerAnimated:]
  -[MediaControlsParentContainerView transportStackView]
  -[MediaControlsParentContainerView setTransportStackView:]
  -[MediaControlsParentContainerView timeControl]
  -[MediaControlsParentContainerView setTimeControl:]
  -[MediaControlsParentContainerView _setInitialFrameForRoutingView:]
  -[MediaControlsParentContainerView setRoutingView:]
  -[MediaControlsParentContainerView routingView]
  -[MediaControlsParentContainerView setTopDividerView:]
  -[MediaControlsParentContainerView setBottomDividerView:]
  -[MediaControlsParentContainerView setMediaControlsRoutingPickerView:]
  -[MediaControlsParentContainerView routingViewControllerAnimationCount]
  -[MediaControlsParentContainerView setRoutingViewControllerAnimationCount:]


MediaControlsRoutingViewController : MPAVRoutingViewController /System/Library/Frameworks/UIKit.framework/UIKit
  // instance methods
  -[MediaControlsRoutingViewController _canShowWhileLocked]
  -[MediaControlsRoutingViewController _createVolumeSlider]


MediaControlsStyleCoordinator : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[MediaControlsStyleCoordinator .cxx_destruct]
  -[MediaControlsStyleCoordinator animateAlongsideTransition:completion:]
  -[MediaControlsStyleCoordinator performAnimations]
  -[MediaControlsStyleCoordinator performCompletions]


MediaControlsRoutingCornerView : CCUICAPackageView /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit
 @property  long long deviceType
 @property  BOOL routesAvailable
 @property  BOOL routing

  // instance methods
  -[MediaControlsRoutingCornerView deviceType]
  -[MediaControlsRoutingCornerView initWithFrame:]
  -[MediaControlsRoutingCornerView setDeviceType:]
  -[MediaControlsRoutingCornerView setRouting:]
  -[MediaControlsRoutingCornerView _updateGlyph]
  -[MediaControlsRoutingCornerView routesAreAvailable]
  -[MediaControlsRoutingCornerView isRouting]
  -[MediaControlsRoutingCornerView setRoutesAvailable:]


MediaControlsVolumeBackgroundViewController : CCUISliderModuleBackgroundViewController /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit <UIGestureRecognizerDelegate, MediaControlsVolumeControllerObserver>
 @property  MediaControlsVolumeController *volumeController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsVolumeBackgroundViewController .cxx_destruct]
  -[MediaControlsVolumeBackgroundViewController gestureRecognizerShouldBegin:]
  -[MediaControlsVolumeBackgroundViewController viewWillAppear:]
  -[MediaControlsVolumeBackgroundViewController viewDidLoad]
  -[MediaControlsVolumeBackgroundViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[MediaControlsVolumeBackgroundViewController viewDidLayoutSubviews]
  -[MediaControlsVolumeBackgroundViewController viewDidDisappear:]
  -[MediaControlsVolumeBackgroundViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[MediaControlsVolumeBackgroundViewController _updateVisibility]
  -[MediaControlsVolumeBackgroundViewController _horizontalPadding]
  -[MediaControlsVolumeBackgroundViewController setVolumeController:]
  -[MediaControlsVolumeBackgroundViewController volumeController]
  -[MediaControlsVolumeBackgroundViewController _verticalPadding]
  -[MediaControlsVolumeBackgroundViewController didTapPrimaryBluetoothListeningModeButton:]
  -[MediaControlsVolumeBackgroundViewController primaryBluetoothListeningModeButtonDidChangeValue:]
  -[MediaControlsVolumeBackgroundViewController didTapSecondaryBluetoothListeningModeButton:]
  -[MediaControlsVolumeBackgroundViewController secondaryBluetoothListeningModeButtonDidChangeValue:]
  -[MediaControlsVolumeBackgroundViewController collapseBluetoothListeningModeButtons]
  -[MediaControlsVolumeBackgroundViewController _configureRouteViews]
  -[MediaControlsVolumeBackgroundViewController _configurePrimaryOptionsButtonIfNeeded]
  -[MediaControlsVolumeBackgroundViewController _configureSecondaryOptionsButtonIfNeeded]
  -[MediaControlsVolumeBackgroundViewController _updateButtonAxis]
  -[MediaControlsVolumeBackgroundViewController _performLayoutWithAnimation:]
  -[MediaControlsVolumeBackgroundViewController _updateButton:routeType:]
  -[MediaControlsVolumeBackgroundViewController _configureRouteView:forRouteType:]
  -[MediaControlsVolumeBackgroundViewController _configureOptionsButton:forRouteType:]
  -[MediaControlsVolumeBackgroundViewController _springAnimate:]
  -[MediaControlsVolumeBackgroundViewController mediaControlsVolumeController:didUpdateSplitRoute:]
  -[MediaControlsVolumeBackgroundViewController mediaControlsVolumeController:didChangeVolumeAvailable:effectiveVolume:forRoute:]


MediaControlsVolumeController : NSObject /usr/lib/libSystem.B.dylib <MPVolumeControllerDelegate>
 @property  MPAVEndpointRoute *systemRoute
 @property  NSHashTable *observers
 @property  MPVolumeController *systemVolumeController
 @property  MPVolumeController *primaryVolumeController
 @property  MPVolumeController *secondaryVolumeController
 @property  MPAVOutputDeviceRoute *systemOutputDeviceRoute
 @property  MPAVOutputDeviceRoute *primaryOutputDeviceRoute
 @property  MPAVOutputDeviceRoute *secondaryOutputDeviceRoute
 @property  BOOL primaryInteractionEnabled
 @property  BOOL secondaryInteractionEnabled
 @property  BOOL isSplitRoute
 @property  NSString *volumeAudioCategory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsVolumeController isDefaultPackage:]

  // instance methods
  -[MediaControlsVolumeController init]
  -[MediaControlsVolumeController .cxx_destruct]
  -[MediaControlsVolumeController addObserver:]
  -[MediaControlsVolumeController removeObserver:]
  -[MediaControlsVolumeController setObservers:]
  -[MediaControlsVolumeController observers]
  -[MediaControlsVolumeController volumeController:volumeControlAvailableDidChange:]
  -[MediaControlsVolumeController volumeController:volumeValueDidChange:]
  -[MediaControlsVolumeController volumeAudioCategory]
  -[MediaControlsVolumeController systemRoute]
  -[MediaControlsVolumeController setVolumeAudioCategory:]
  -[MediaControlsVolumeController isSplitRoute]
  -[MediaControlsVolumeController setUserInteractionEnabled:forRouteType:]
  -[MediaControlsVolumeController glyphStateForVolumeLevel:packageName:]
  -[MediaControlsVolumeController packageNameForRouteType:isRTL:]
  -[MediaControlsVolumeController volumeForRouteType:]
  -[MediaControlsVolumeController routeNameForRouteType:]
  -[MediaControlsVolumeController availableBluetoothListeningModeForRouteType:]
  -[MediaControlsVolumeController currentBluetoothListeningModeForRouteType:]
  -[MediaControlsVolumeController setCurrentBluetoothListeningModeForRouteType:bluetoothListeningMode:]
  -[MediaControlsVolumeController routeDidChangeNotification]
  -[MediaControlsVolumeController _setupOutputDevicesAndVolumeControllersIfNeeded]
  -[MediaControlsVolumeController _packageNameForRoute:isRTL:]
  -[MediaControlsVolumeController _notifyUserInteractionEnabledChanged:routeType:]
  -[MediaControlsVolumeController _notifyVolumeChangedForVolumeController:volumeControlAvailable:effectiveVolume:]
  -[MediaControlsVolumeController _routeForVolumeController:]
  -[MediaControlsVolumeController _volumePackageNameForRTL:]
  -[MediaControlsVolumeController volumeControlAvailableForRouteType:]
  -[MediaControlsVolumeController setVolume:forRouteType:]
  -[MediaControlsVolumeController userInteractionEnabledForRouteType:]
  -[MediaControlsVolumeController setSystemRoute:]
  -[MediaControlsVolumeController systemVolumeController]
  -[MediaControlsVolumeController setSystemVolumeController:]
  -[MediaControlsVolumeController primaryVolumeController]
  -[MediaControlsVolumeController setPrimaryVolumeController:]
  -[MediaControlsVolumeController secondaryVolumeController]
  -[MediaControlsVolumeController setSecondaryVolumeController:]
  -[MediaControlsVolumeController systemOutputDeviceRoute]
  -[MediaControlsVolumeController setSystemOutputDeviceRoute:]
  -[MediaControlsVolumeController primaryOutputDeviceRoute]
  -[MediaControlsVolumeController setPrimaryOutputDeviceRoute:]
  -[MediaControlsVolumeController secondaryOutputDeviceRoute]
  -[MediaControlsVolumeController setSecondaryOutputDeviceRoute:]
  -[MediaControlsVolumeController primaryInteractionEnabled]
  -[MediaControlsVolumeController setPrimaryInteractionEnabled:]
  -[MediaControlsVolumeController secondaryInteractionEnabled]
  -[MediaControlsVolumeController setSecondaryInteractionEnabled:]


MediaControlsTimeControl : UIControl /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MTVisualStylingProviderObservingPrivate, UIGestureRecognizerDelegate>
 @property  UIView *elapsedTrack
 @property  UIView *remainingTrack
 @property  UIView *knobView
 @property  UILabel *elapsedTimeLabel
 @property  UILabel *remainingTimeLabel
 @property  UILabel *liveLabel
 @property  UIView *liveBackground
 @property  CAGradientLayer *liveBackgroundMask
 @property  UILayoutGuide *trackLayoutGuide
 @property  double sliderValue
 @property  BOOL currentlyTracking
 @property  BOOL transitioning
 @property  BOOL empty
 @property  long long style
 @property  MPCPlayerResponse *response
 @property  MPCPlayerResponseItem *responseItem
 @property  {?=dddddffBB} durationSnapshot
 @property  BOOL timeControlOnScreen
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsTimeControl isEmpty]
  -[MediaControlsTimeControl setEnabled:]
  -[MediaControlsTimeControl .cxx_destruct]
  -[MediaControlsTimeControl style]
  -[MediaControlsTimeControl setStyle:]
  -[MediaControlsTimeControl response]
  -[MediaControlsTimeControl setResponse:]
  -[MediaControlsTimeControl setEmpty:]
  -[MediaControlsTimeControl initWithFrame:]
  -[MediaControlsTimeControl traitCollectionDidChange:]
  -[MediaControlsTimeControl gestureRecognizerShouldBegin:]
  -[MediaControlsTimeControl gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[MediaControlsTimeControl gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsTimeControl layoutSubviews]
  -[MediaControlsTimeControl pointInside:withEvent:]
  -[MediaControlsTimeControl tintColorDidChange]
  -[MediaControlsTimeControl _updateStyle]
  -[MediaControlsTimeControl setTransitioning:]
  -[MediaControlsTimeControl beginTrackingWithTouch:withEvent:]
  -[MediaControlsTimeControl cancelTrackingWithEvent:]
  -[MediaControlsTimeControl continueTrackingWithTouch:withEvent:]
  -[MediaControlsTimeControl endTrackingWithTouch:withEvent:]
  -[MediaControlsTimeControl _displayLinkTick:]
  -[MediaControlsTimeControl isTransitioning]
  -[MediaControlsTimeControl knobView]
  -[MediaControlsTimeControl setKnobView:]
  -[MediaControlsTimeControl viewDidMoveToSuperview]
  -[MediaControlsTimeControl trackLayoutGuide]
  -[MediaControlsTimeControl elapsedTimeLabel]
  -[MediaControlsTimeControl providedStylesDidChangeForProvider:]
  -[MediaControlsTimeControl setElapsedTimeLabel:]
  -[MediaControlsTimeControl setRemainingTimeLabel:]
  -[MediaControlsTimeControl remainingTimeLabel]
  -[MediaControlsTimeControl visualStylingProvider]
  -[MediaControlsTimeControl setVisualStylingProvider:]
  -[MediaControlsTimeControl responseItem]
  -[MediaControlsTimeControl setResponseItem:]
  -[MediaControlsTimeControl setTimeControlOnScreen:]
  -[MediaControlsTimeControl isTimeControlOnScreen]
  -[MediaControlsTimeControl elapsedTrack]
  -[MediaControlsTimeControl remainingTrack]
  -[MediaControlsTimeControl liveLabel]
  -[MediaControlsTimeControl liveBackground]
  -[MediaControlsTimeControl liveBackgroundMask]
  -[MediaControlsTimeControl _updateTimeControl]
  -[MediaControlsTimeControl updateSliderConstraint]
  -[MediaControlsTimeControl durationSnapshot]
  -[MediaControlsTimeControl updateBackgroundMask]
  -[MediaControlsTimeControl _updateSliderPosition]
  -[MediaControlsTimeControl _updateLabels:withRemainingDuration:]
  -[MediaControlsTimeControl _updateDisplayLinkPause]
  -[MediaControlsTimeControl updateLabelAvoidance]
  -[MediaControlsTimeControl sliderValue]
  -[MediaControlsTimeControl setDurationSnapshot:]
  -[MediaControlsTimeControl setSliderValue:]
  -[MediaControlsTimeControl isCurrentlyTracking]
  -[MediaControlsTimeControl createDisplayLinkIfNeeded]
  -[MediaControlsTimeControl invalidateDisplayLinkIfNeeded]
  -[MediaControlsTimeControl _updateLabels:withTargetTimestamp:]
  -[MediaControlsTimeControl setElapsedTrack:]
  -[MediaControlsTimeControl setRemainingTrack:]
  -[MediaControlsTimeControl setLiveLabel:]
  -[MediaControlsTimeControl setLiveBackground:]
  -[MediaControlsTimeControl setLiveBackgroundMask:]
  -[MediaControlsTimeControl setTrackLayoutGuide:]
  -[MediaControlsTimeControl setCurrentlyTracking:]


MRMediaControlsVideoPickerHeaderView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  UIImageView *airPlayIconImageView
 @property  UILabel *titleLabel
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MRMediaControlsVideoPickerHeaderView .cxx_destruct]
  -[MRMediaControlsVideoPickerHeaderView initWithFrame:]
  -[MRMediaControlsVideoPickerHeaderView titleLabel]
  -[MRMediaControlsVideoPickerHeaderView traitCollectionDidChange:]
  -[MRMediaControlsVideoPickerHeaderView sizeThatFits:]
  -[MRMediaControlsVideoPickerHeaderView layoutSubviews]
  -[MRMediaControlsVideoPickerHeaderView setTitleLabel:]
  -[MRMediaControlsVideoPickerHeaderView _updateStyle]
  -[MRMediaControlsVideoPickerHeaderView visualStylingProvider]
  -[MRMediaControlsVideoPickerHeaderView setVisualStylingProvider:]
  -[MRMediaControlsVideoPickerHeaderView airPlayIconImageView]
  -[MRMediaControlsVideoPickerHeaderView setAirPlayIconImageView:]


MediaControlsTransitioningDelegate : NSObject /usr/lib/libSystem.B.dylib <UIViewControllerTransitioningDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsTransitioningDelegate animationControllerForPresentedController:presentingController:sourceController:]
  -[MediaControlsTransitioningDelegate animationControllerForDismissedController:]
  -[MediaControlsTransitioningDelegate presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]


MediaControlsPanelViewController : UIViewController /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  id delegate
 @property  MPAVRoutingViewController *routingViewController
 @property  UIView *backgroundView

  // class methods
  +[MediaControlsPanelViewController panelViewControllerForCoverSheet]

  // instance methods
  -[MediaControlsPanelViewController delegate]
  -[MediaControlsPanelViewController setDelegate:]
  -[MediaControlsPanelViewController .cxx_destruct]
  -[MediaControlsPanelViewController backgroundView]
  -[MediaControlsPanelViewController setBackgroundView:]
  -[MediaControlsPanelViewController routingViewController]
  -[MediaControlsPanelViewController setRoutingViewController:]


MediaControlsAnimationController : NSObject /usr/lib/libSystem.B.dylib <UIViewControllerAnimatedTransitioning>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsAnimationController transitionDuration:]
  -[MediaControlsAnimationController animateTransition:]
  -[MediaControlsAnimationController initForPresenting:]


_MediaControlsNoopButtonEventConsumer : NSObject /usr/lib/libSystem.B.dylib <SBSHardwareButtonEventConsuming>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MediaControlsNoopButtonEventConsumer consumeAnyPressEventForButtonKind:]


_MediaControlsHardwareVolumeManagerAssertion : NSObject /usr/lib/libSystem.B.dylib <MediaControlsInvalidatable>
 @property  MediaControlsHardwareVolumeManager *volumeManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MediaControlsHardwareVolumeManagerAssertion dealloc]
  -[_MediaControlsHardwareVolumeManagerAssertion invalidate]
  -[_MediaControlsHardwareVolumeManagerAssertion .cxx_destruct]
  -[_MediaControlsHardwareVolumeManagerAssertion volumeManager]
  -[_MediaControlsHardwareVolumeManagerAssertion setVolumeManager:]


MediaControlsHardwareVolumeManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMapTable *assertions
 @property  NSArray *volumeButtonConsumerInvalidators

  // class methods
  +[MediaControlsHardwareVolumeManager sharedInstance]

  // instance methods
  -[MediaControlsHardwareVolumeManager init]
  -[MediaControlsHardwareVolumeManager .cxx_destruct]
  -[MediaControlsHardwareVolumeManager assertions]
  -[MediaControlsHardwareVolumeManager unregisterClient:]
  -[MediaControlsHardwareVolumeManager setAssertions:]
  -[MediaControlsHardwareVolumeManager registerClient:forRoute:]
  -[MediaControlsHardwareVolumeManager _updateVolumeControlsForRoute:]
  -[MediaControlsHardwareVolumeManager _relinquishHardwareVolumeButtons]
  -[MediaControlsHardwareVolumeManager _requestHardwareVolumeButtons]
  -[MediaControlsHardwareVolumeManager requestVolumeControlsForRoute:]
  -[MediaControlsHardwareVolumeManager volumeButtonConsumerInvalidators]
  -[MediaControlsHardwareVolumeManager setVolumeButtonConsumerInvalidators:]


BoundsChangeAwareView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
  // instance methods
  -[BoundsChangeAwareView setBounds:]


MRPlatterViewController : UIViewController /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MediaControlsEndpointControllerDelegate, MediaControlsActionsDelegate, MPAVRoutingViewControllerDelegate, MPAVRoutingViewControllerThemeDelegate, MediaControlsMasterVolumeSliderDelegate, MediaControlsPanelViewControllerDelegate, MTVisualStylingRequiring, _MCStateDumpPropertyListTransformable, MediaControlsCollectionItemViewController>
 @property  BOOL transitioning
 @property  MRMediaControlsVideoPickerFooterView *videoPickerFooterView
 @property  MRMediaControlsVideoPickerHeaderView *videoPickerHeaderView
 @property  MediaControlsRoutingCornerView *routingCornerView
 @property  MediaControlsParentContainerView *parentContainerView
 @property  MediaControlsVolumeContainerView *volumeContainerView
 @property  NSMutableArray *secondaryStringComponents
 @property  MPArtworkCatalog *artworkCatalog
 @property  BOOL onScreen
 @property  BOOL isListeningForResponse
 @property  MPVolumeGroupSliderCoordinator *groupSliderCoordinator
 @property  MPAVEndpointRoute *route
 @property  {CGSize=dd} lastKnownSize
 @property  MediaControlsTransitioningDelegate *transitioningDelegate
 @property  MediaControlsLanguageOptionsViewController *languageOptionsViewController
 @property  MPMediaControls *mediaControls
 @property  SFShareAudioViewController *shareAudioViewController
 @property  FBSDisplayLayoutMonitor *displayMonitor
 @property  NSArray *displayElements
 @property  BOOL deviceUnlocked
 @property  NSString *explicitString
 @property  BOOL failedToLoadArtwork
 @property  long long failedArtworkRetryCount
 @property  id volumeControlAssertion
 @property  MSVTimer *artworkTimer
 @property  NSString *label
 @property  unsigned long supportedModes
 @property  long long selectedMode
 @property  MediaControlsEndpointController *endpointController
 @property  @? routingCornerViewTappedBlock
 @property  MPAVRoutingViewController *routingViewController
 @property  MediaControlsHeaderView *nowPlayingHeaderView
 @property  UIView *effectiveHeaderView
 @property  UIView *effectiveFooterView
 @property  <MRPlatterViewControllerDelegate> *delegate
 @property  BOOL allowsNowPlayingAppLaunch
 @property  UIView *backgroundView
 @property  NSString *routeName
 @property  NSString *routeUID
 @property  BOOL shouldDisplayPlatter
 @property  long long style
 @property  double _continuousCornerRadius
 @property  NSString *placeholderString
 @property  NSString *placeholderDeviceIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *requiredVisualStyleCategories
 @property  UIView *contentView
 @property  BOOL selected

  // class methods
  +[MRPlatterViewController coverSheetPlatterViewController]

  // instance methods
  -[MRPlatterViewController dealloc]
  -[MRPlatterViewController delegate]
  -[MRPlatterViewController setDelegate:]
  -[MRPlatterViewController .cxx_destruct]
  -[MRPlatterViewController style]
  -[MRPlatterViewController setStyle:]
  -[MRPlatterViewController setLabel:]
  -[MRPlatterViewController label]
  -[MRPlatterViewController isSelected]
  -[MRPlatterViewController isDeviceUnlocked]
  -[MRPlatterViewController contentView]
  -[MRPlatterViewController loadView]
  -[MRPlatterViewController backgroundView]
  -[MRPlatterViewController initWithNibName:bundle:]
  -[MRPlatterViewController initWithStyle:]
  -[MRPlatterViewController _setContinuousCornerRadius:]
  -[MRPlatterViewController viewWillAppear:]
  -[MRPlatterViewController viewWillDisappear:]
  -[MRPlatterViewController viewDidLoad]
  -[MRPlatterViewController didMoveToParentViewController:]
  -[MRPlatterViewController setTransitioningDelegate:]
  -[MRPlatterViewController viewDidLayoutSubviews]
  -[MRPlatterViewController viewDidAppear:]
  -[MRPlatterViewController viewDidDisappear:]
  -[MRPlatterViewController transitioningDelegate]
  -[MRPlatterViewController _updateStyle]
  -[MRPlatterViewController _continuousCornerRadius]
  -[MRPlatterViewController setSelected:]
  -[MRPlatterViewController setBackgroundView:]
  -[MRPlatterViewController setTransitioning:]
  -[MRPlatterViewController shouldAutomaticallyForwardAppearanceMethods]
  -[MRPlatterViewController _canShowWhileLocked]
  -[MRPlatterViewController isOnScreen]
  -[MRPlatterViewController isTransitioning]
  -[MRPlatterViewController layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[MRPlatterViewController setRoute:]
  -[MRPlatterViewController _route]
  -[MRPlatterViewController route]
  -[MRPlatterViewController routeName]
  -[MRPlatterViewController displayMonitor]
  -[MRPlatterViewController placeholderString]
  -[MRPlatterViewController setDisplayMonitor:]
  -[MRPlatterViewController _stateDumpObject]
  -[MRPlatterViewController setMediaControls:]
  -[MRPlatterViewController mediaControls]
  -[MRPlatterViewController artworkCatalog]
  -[MRPlatterViewController routeUID]
  -[MRPlatterViewController setGroupSliderCoordinator:]
  -[MRPlatterViewController groupSliderCoordinator]
  -[MRPlatterViewController routingViewController:willDisplayCell:]
  -[MRPlatterViewController routingViewController:didPickRoute:]
  -[MRPlatterViewController routingViewController:didSelectRoutingViewItem:]
  -[MRPlatterViewController _isExpanded]
  -[MRPlatterViewController visualStylingProviderForCategory:]
  -[MRPlatterViewController setOnScreen:]
  -[MRPlatterViewController _updateConfiguration]
  -[MRPlatterViewController supportedModes]
  -[MRPlatterViewController setSupportedModes:]
  -[MRPlatterViewController requiredVisualStyleCategories]
  -[MRPlatterViewController setVisualStylingProvider:forCategory:]
  -[MRPlatterViewController setSelectedMode:animated:]
  -[MRPlatterViewController setSelectedMode:]
  -[MRPlatterViewController selectedMode]
  -[MRPlatterViewController routingViewController]
  -[MRPlatterViewController setRoutingViewController:]
  -[MRPlatterViewController headerViewButtonPressed:]
  -[MRPlatterViewController headerViewLaunchNowPlayingAppButtonPressed:]
  -[MRPlatterViewController footerViewButtonPressed:]
  -[MRPlatterViewController parentContainerView]
  -[MRPlatterViewController setPlaceholderString:]
  -[MRPlatterViewController _updateExplicitTreatmentString]
  -[MRPlatterViewController setAllowsNowPlayingAppLaunch:]
  -[MRPlatterViewController nowPlayingHeaderView]
  -[MRPlatterViewController initWithActiveRouteType:]
  -[MRPlatterViewController setEndpointController:]
  -[MRPlatterViewController endpointController]
  -[MRPlatterViewController initWithRouteUID:]
  -[MRPlatterViewController effectiveFooterView]
  -[MRPlatterViewController effectiveHeaderView]
  -[MRPlatterViewController _routingCornerViewReceivedTap:]
  -[MRPlatterViewController routingCornerView]
  -[MRPlatterViewController _platterViewControllerReceivedInteraction:]
  -[MRPlatterViewController volumeContainerView]
  -[MRPlatterViewController _updateHeaderUI]
  -[MRPlatterViewController languageOptionsViewController]
  -[MRPlatterViewController _updateSecondaryStringFormat]
  -[MRPlatterViewController _updateHardwareVolumeButtons]
  -[MRPlatterViewController _setRoutingPickerVisible:animated:]
  -[MRPlatterViewController videoPickerFooterView]
  -[MRPlatterViewController videoPickerHeaderView]
  -[MRPlatterViewController allowsNowPlayingAppLaunch]
  -[MRPlatterViewController _canToggleRoutingPicker]
  -[MRPlatterViewController _updateOnScreenForStyle:]
  -[MRPlatterViewController _dismissShareAudioViewController]
  -[MRPlatterViewController shouldShowTVRemoteButton]
  -[MRPlatterViewController _shouldUseViewServiceToPresentTVRemote]
  -[MRPlatterViewController shareAudioViewController]
  -[MRPlatterViewController _updateRoutingCornerView]
  -[MRPlatterViewController _updateRoutingIndicators]
  -[MRPlatterViewController _updateRouteNameLabel]
  -[MRPlatterViewController _prewarmTVRemoteIfNeeded]
  -[MRPlatterViewController shouldDisplayPlatter]
  -[MRPlatterViewController secondaryStringComponents]
  -[MRPlatterViewController setArtworkCatalog:]
  -[MRPlatterViewController _updateControlCenterMetadata:sectionMetadata:]
  -[MRPlatterViewController _updatePlaceholderArtwork]
  -[MRPlatterViewController explicitString]
  -[MRPlatterViewController _showPlaceholderArtwork]
  -[MRPlatterViewController setArtworkTimer:]
  -[MRPlatterViewController setFailedToLoadArtwork:]
  -[MRPlatterViewController placeholderDeviceIdentifier]
  -[MRPlatterViewController _presentRoutingViewControllerFromCoverSheet]
  -[MRPlatterViewController lockScreenPresentsOverrideRoutePicker]
  -[MRPlatterViewController lockScreenInternalRoutePickerOverrideWithDefaultStyle:]
  -[MRPlatterViewController _tvMediaRemoteIdentifier]
  -[MRPlatterViewController _tvAirplayIdentifier]
  -[MRPlatterViewController _showShareAudioViewController]
  -[MRPlatterViewController setDisplayElements:]
  -[MRPlatterViewController setExplicitString:]
  -[MRPlatterViewController endpointController:didLoadNewResponse:]
  -[MRPlatterViewController endpointControllerDidChangeState:]
  -[MRPlatterViewController endpointControllerDidUpdateRoutingAvailability:]
  -[MRPlatterViewController endpointControllerRouteDidUpdate:]
  -[MRPlatterViewController presentRatingActionSheet:sourceView:]
  -[MRPlatterViewController presentTVRemote]
  -[MRPlatterViewController presentLanguageOptions]
  -[MRPlatterViewController routingViewController:willDisplayHeaderView:]
  -[MRPlatterViewController contentInsetsForRoutingViewController:]
  -[MRPlatterViewController shouldEnableSyncingForSlider:]
  -[MRPlatterViewController slider:syncStateWillChangeFromState:toState:]
  -[MRPlatterViewController slider:shouldCancelSnapWithTouch:]
  -[MRPlatterViewController willTransitionToSize:withCoordinator:]
  -[MRPlatterViewController setRoutingCornerViewTappedBlock:]
  -[MRPlatterViewController setPlaceholderDeviceIdentifier:]
  -[MRPlatterViewController setVideoPickerFooterView:]
  -[MRPlatterViewController setVideoPickerHeaderView:]
  -[MRPlatterViewController setRoutingCornerView:]
  -[MRPlatterViewController setParentContainerView:]
  -[MRPlatterViewController setVolumeContainerView:]
  -[MRPlatterViewController setSecondaryStringComponents:]
  -[MRPlatterViewController isListeningForResponse]
  -[MRPlatterViewController setIsListeningForResponse:]
  -[MRPlatterViewController lastKnownSize]
  -[MRPlatterViewController setLastKnownSize:]
  -[MRPlatterViewController setLanguageOptionsViewController:]
  -[MRPlatterViewController setShareAudioViewController:]
  -[MRPlatterViewController displayElements]
  -[MRPlatterViewController failedToLoadArtwork]
  -[MRPlatterViewController failedArtworkRetryCount]
  -[MRPlatterViewController volumeControlAssertion]
  -[MRPlatterViewController setVolumeControlAssertion:]
  -[MRPlatterViewController artworkTimer]
  -[MRPlatterViewController routingCornerViewTappedBlock]
  -[MRPlatterViewController setNowPlayingHeaderView:]


MediaControlsBluetoothListeningModeButton : MediaControlsExpandableButton
 @property  MediaControlsHapticPlayer *hapticPlayer
 @property  UIColor *offColor
 @property  NSSet *availableListeningModes
 @property  NSString *selectedListeningMode

  // instance methods
  -[MediaControlsBluetoothListeningModeButton .cxx_destruct]
  -[MediaControlsBluetoothListeningModeButton initWithFrame:]
  -[MediaControlsBluetoothListeningModeButton beginTrackingWithTouch:withEvent:]
  -[MediaControlsBluetoothListeningModeButton cancelTrackingWithEvent:]
  -[MediaControlsBluetoothListeningModeButton endTrackingWithTouch:withEvent:]
  -[MediaControlsBluetoothListeningModeButton initForControlCenter]
  -[MediaControlsBluetoothListeningModeButton selectedListeningMode]
  -[MediaControlsBluetoothListeningModeButton setAvailableListeningModes:]
  -[MediaControlsBluetoothListeningModeButton setSelectedListeningMode:animated:]
  -[MediaControlsBluetoothListeningModeButton playRequiresBothBudsInEarErrorHaptic]
  -[MediaControlsBluetoothListeningModeButton playValueChangedEventHaptic]
  -[MediaControlsBluetoothListeningModeButton _springAnimate:]
  -[MediaControlsBluetoothListeningModeButton setSelectedListeningMode:]
  -[MediaControlsBluetoothListeningModeButton playFailedValueChangedEventHaptic]
  -[MediaControlsBluetoothListeningModeButton playFailedValueChangedEventHapticWithMessage:]
  -[MediaControlsBluetoothListeningModeButton availableListeningModes]
  -[MediaControlsBluetoothListeningModeButton hapticPlayer]
  -[MediaControlsBluetoothListeningModeButton setHapticPlayer:]
  -[MediaControlsBluetoothListeningModeButton offColor]
  -[MediaControlsBluetoothListeningModeButton setOffColor:]


MediaControlsMasterVolumeSlider : MediaControlsVolumeSlider <UIGestureRecognizerDelegate>
 @property  long long syncState
 @property  UIImpactFeedbackGenerator *positiveFeedbackGenerator
 @property  UINotificationFeedbackGenerator *negativeFeedbackGenerator
 @property  UILongPressGestureRecognizer *gestureRecognizer
 @property  BOOL syncingEnabled
 @property  <MediaControlsMasterVolumeSliderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsMasterVolumeSlider delegate]
  -[MediaControlsMasterVolumeSlider setDelegate:]
  -[MediaControlsMasterVolumeSlider .cxx_destruct]
  -[MediaControlsMasterVolumeSlider initWithFrame:]
  -[MediaControlsMasterVolumeSlider traitCollectionDidChange:]
  -[MediaControlsMasterVolumeSlider layoutSubviews]
  -[MediaControlsMasterVolumeSlider setGestureRecognizer:]
  -[MediaControlsMasterVolumeSlider gestureRecognizer]
  -[MediaControlsMasterVolumeSlider beginTrackingWithTouch:withEvent:]
  -[MediaControlsMasterVolumeSlider cancelTrackingWithEvent:]
  -[MediaControlsMasterVolumeSlider continueTrackingWithTouch:withEvent:]
  -[MediaControlsMasterVolumeSlider endTrackingWithTouch:withEvent:]
  -[MediaControlsMasterVolumeSlider createThumbView]
  -[MediaControlsMasterVolumeSlider handleLongPress:]
  -[MediaControlsMasterVolumeSlider setSyncingEnabled:]
  -[MediaControlsMasterVolumeSlider syncState]
  -[MediaControlsMasterVolumeSlider isSyncingEnabled]
  -[MediaControlsMasterVolumeSlider setSyncState:]
  -[MediaControlsMasterVolumeSlider shrinkThumbAfterDelay:]
  -[MediaControlsMasterVolumeSlider positiveFeedbackGenerator]
  -[MediaControlsMasterVolumeSlider setPositiveFeedbackGenerator:]
  -[MediaControlsMasterVolumeSlider negativeFeedbackGenerator]
  -[MediaControlsMasterVolumeSlider setNegativeFeedbackGenerator:]


MediaControlsRoutingButtonView : MPButton /System/Library/Frameworks/UIKit.framework/UIKit
 @property  CCUICAPackageView *packageView
 @property  long long currentMode
 @property  long long deviceType
 @property  BOOL userInterfaceStyleSwitchingEnabled

  // instance methods
  -[MediaControlsRoutingButtonView .cxx_destruct]
  -[MediaControlsRoutingButtonView currentMode]
  -[MediaControlsRoutingButtonView deviceType]
  -[MediaControlsRoutingButtonView initWithFrame:]
  -[MediaControlsRoutingButtonView traitCollectionDidChange:]
  -[MediaControlsRoutingButtonView setAlpha:]
  -[MediaControlsRoutingButtonView layoutSubviews]
  -[MediaControlsRoutingButtonView setHighlighted:]
  -[MediaControlsRoutingButtonView setCurrentMode:]
  -[MediaControlsRoutingButtonView setDeviceType:]
  -[MediaControlsRoutingButtonView setUserInterfaceStyleSwitchingEnabled:]
  -[MediaControlsRoutingButtonView packageView]
  -[MediaControlsRoutingButtonView _updateGlyphState]
  -[MediaControlsRoutingButtonView _updateGlyphPackage]
  -[MediaControlsRoutingButtonView _glyphResource]
  -[MediaControlsRoutingButtonView isUserInterfaceStyleSwitchingEnabled]
  -[MediaControlsRoutingButtonView setPackageView:]


MediaControlsVolumeViewController : UIViewController /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MediaControlsVolumeControllerObserver, MPVolumeDisplaying, CCUIGroupRendering, UIGestureRecognizerDelegate, CCUIContentModuleContentViewController>
 @property  <MediaControlsVolumeViewControllerDelegate> *delegate
 @property  MediaControlsVolumeController *volumeController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIWindowScene *windowSceneForVolumeDisplay
 @property  BOOL onScreenForVolumeDisplay
 @property  NSString *volumeAudioCategory
 @property  BOOL onScreen
 @property  BOOL groupRenderingRequired
 @property  NSArray *punchOutRootLayers
 @property  CALayer *punchOutRootLayer
 @property  double preferredExpandedContentHeight
 @property  double preferredExpandedContentWidth
 @property  double preferredExpandedContinuousCornerRadius
 @property  BOOL providesOwnPlatter
 @property  UIViewPropertyAnimator *customAnimator

  // instance methods
  -[MediaControlsVolumeViewController dealloc]
  -[MediaControlsVolumeViewController delegate]
  -[MediaControlsVolumeViewController setDelegate:]
  -[MediaControlsVolumeViewController .cxx_destruct]
  -[MediaControlsVolumeViewController gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsVolumeViewController viewWillAppear:]
  -[MediaControlsVolumeViewController viewWillDisappear:]
  -[MediaControlsVolumeViewController viewDidLoad]
  -[MediaControlsVolumeViewController viewWillLayoutSubviews]
  -[MediaControlsVolumeViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[MediaControlsVolumeViewController viewDidLayoutSubviews]
  -[MediaControlsVolumeViewController isOnScreen]
  -[MediaControlsVolumeViewController _updateVisibility]
  -[MediaControlsVolumeViewController windowSceneForVolumeDisplay]
  -[MediaControlsVolumeViewController volumeAudioCategory]
  -[MediaControlsVolumeViewController setVolumeController:]
  -[MediaControlsVolumeViewController volumeController]
  -[MediaControlsVolumeViewController punchOutRootLayers]
  -[MediaControlsVolumeViewController isGroupRenderingRequired]
  -[MediaControlsVolumeViewController preferredExpandedContentHeight]
  -[MediaControlsVolumeViewController willTransitionToExpandedContentMode:]
  -[MediaControlsVolumeViewController preferredExpandedContentWidth]
  -[MediaControlsVolumeViewController providesOwnPlatter]
  -[MediaControlsVolumeViewController mediaControlsVolumeController:didUpdateSplitRoute:]
  -[MediaControlsVolumeViewController mediaControlsVolumeController:didChangeVolumeAvailable:effectiveVolume:forRoute:]
  -[MediaControlsVolumeViewController mediaControlsVolumeController:didChangeUserInteractionEnabled:forRoute:]
  -[MediaControlsVolumeViewController _primarySliderValueDidChange:]
  -[MediaControlsVolumeViewController _secondarySliderValueDidChange:]
  -[MediaControlsVolumeViewController _dismissMediaControlsVolumeViewController]
  -[MediaControlsVolumeViewController primaryFrame]
  -[MediaControlsVolumeViewController secondaryFrame]
  -[MediaControlsVolumeViewController _performWithoutAnimationWhileHidden:]


MediaControlsEndpointsViewController : MediaControlsCollectionViewController <MRPlatterViewControllerDelegate, MediaControlsCollectionViewDataSource, MediaControlsCollectionViewDelegate, MediaControlsEndpointsManagerDelegate, CCUIContentModuleContentViewController>
 @property  BOOL dismissing
 @property  BOOL onScreen
 @property  MediaControlsEndpointsManager *endpointsManager
 @property  MPAVRoutingViewController *routingViewController
 @property  MPAVEndpointRoute *selectedRoute
 @property  NSString *routingContextUID
 @property  AVExternalPlaybackMonitor *externalPlaybackMonitor
 @property  MPMediaControlsConfiguration *configuration
 @property  @? routingCornerViewTappedBlock
 @property  @? homeGestureDismissalAllowedBlock
 @property  BOOL shouldPresentUsingViewService
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double preferredExpandedContentHeight
 @property  double preferredExpandedContentWidth
 @property  double preferredExpandedContinuousCornerRadius
 @property  BOOL providesOwnPlatter
 @property  UIViewPropertyAnimator *customAnimator

  // class methods
  +[MediaControlsEndpointsViewController _shouldTransitionEarlyOnSystemRoute]

  // instance methods
  -[MediaControlsEndpointsViewController init]
  -[MediaControlsEndpointsViewController dealloc]
  -[MediaControlsEndpointsViewController .cxx_destruct]
  -[MediaControlsEndpointsViewController setConfiguration:]
  -[MediaControlsEndpointsViewController configuration]
  -[MediaControlsEndpointsViewController viewWillAppear:]
  -[MediaControlsEndpointsViewController viewWillDisappear:]
  -[MediaControlsEndpointsViewController viewDidLoad]
  -[MediaControlsEndpointsViewController reloadData]
  -[MediaControlsEndpointsViewController viewDidLayoutSubviews]
  -[MediaControlsEndpointsViewController viewDidDisappear:]
  -[MediaControlsEndpointsViewController _canShowWhileLocked]
  -[MediaControlsEndpointsViewController isOnScreen]
  -[MediaControlsEndpointsViewController endUpdates]
  -[MediaControlsEndpointsViewController updateContentInsets]
  -[MediaControlsEndpointsViewController setDisplayMode:]
  -[MediaControlsEndpointsViewController routingContextUID]
  -[MediaControlsEndpointsViewController isDismissing]
  -[MediaControlsEndpointsViewController setRoutingContextUID:]
  -[MediaControlsEndpointsViewController startPrewarming]
  -[MediaControlsEndpointsViewController stopPrewarming]
  -[MediaControlsEndpointsViewController _routeDidChangeNotification:]
  -[MediaControlsEndpointsViewController setDismissing:]
  -[MediaControlsEndpointsViewController setOnScreen:]
  -[MediaControlsEndpointsViewController preferredExpandedContentHeight]
  -[MediaControlsEndpointsViewController canDismissPresentedContent]
  -[MediaControlsEndpointsViewController dismissPresentedContentAnimated:completion:]
  -[MediaControlsEndpointsViewController preferredExpandedContentWidth]
  -[MediaControlsEndpointsViewController providesOwnPlatter]
  -[MediaControlsEndpointsViewController platterViewController:didToggleRoutingPicker:]
  -[MediaControlsEndpointsViewController platterViewController:willToggleRoutingPicker:]
  -[MediaControlsEndpointsViewController dismissPlatterViewController:completion:]
  -[MediaControlsEndpointsViewController platterViewController:presentingViewForPresentedViewController:]
  -[MediaControlsEndpointsViewController platterViewController:homeGestureDismisalAllowedDidChange:]
  -[MediaControlsEndpointsViewController shouldPresentUsingViewServicePlatterViewController:]
  -[MediaControlsEndpointsViewController platterViewController:didPickRoute:]
  -[MediaControlsEndpointsViewController routingViewController]
  -[MediaControlsEndpointsViewController setRoutingViewController:]
  -[MediaControlsEndpointsViewController setRoutingCornerViewTappedBlock:]
  -[MediaControlsEndpointsViewController routingCornerViewTappedBlock]
  -[MediaControlsEndpointsViewController setShouldPresentUsingViewService:]
  -[MediaControlsEndpointsViewController _setupEndpointsManager]
  -[MediaControlsEndpointsViewController _setupRoutingViewController]
  -[MediaControlsEndpointsViewController _setSelectedRoute:isUserSelected:animated:]
  -[MediaControlsEndpointsViewController _updateDiscoveryMode]
  -[MediaControlsEndpointsViewController _transitionToVisibleIfNeeded]
  -[MediaControlsEndpointsViewController _transitionToVisible:]
  -[MediaControlsEndpointsViewController _isReadyForAppearanceTransition]
  -[MediaControlsEndpointsViewController preferredItemHeightGivenWidth:]
  -[MediaControlsEndpointsViewController externalPlaybackMonitor]
  -[MediaControlsEndpointsViewController _assignRouteViewControllerToSelectedPanelViewController]
  -[MediaControlsEndpointsViewController _updateSupportedModesForSelectedPlatterViewController]
  -[MediaControlsEndpointsViewController didSelectEndpoint:]
  -[MediaControlsEndpointsViewController _selectActiveSystemRouteIfNeeded]
  -[MediaControlsEndpointsViewController _updateEndpointRouteForOutputDeviceDataSource:]
  -[MediaControlsEndpointsViewController _supportedModesForSelectedRoute:selectedMode:]
  -[MediaControlsEndpointsViewController _updateModesForSelectedPlatterViewController]
  -[MediaControlsEndpointsViewController setSelectedRoute:]
  -[MediaControlsEndpointsViewController _isSelectedRouteInRoutes]
  -[MediaControlsEndpointsViewController numberOfItemsInCollectionViewController:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:viewControllerForItemAtIndex:]
  -[MediaControlsEndpointsViewController defaultSelectedItemIndexForCollectionViewController:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:willDisplayViewController:forItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:didDisplayViewController:forItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:didEndDisplayingViewController:forItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:canSelectItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:willSelectItemAtIndex:withReason:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:didSelectItemAtIndex:withReason:]
  -[MediaControlsEndpointsViewController endpointsManager:activeSystemRouteDidChange:]
  -[MediaControlsEndpointsViewController endpointsManager:defersRoutesReplacement:]
  -[MediaControlsEndpointsViewController preferredItemHeight]
  -[MediaControlsEndpointsViewController homeObserverDidUpdateKnownUIDs:]
  -[MediaControlsEndpointsViewController homeGestureDismissalAllowedBlock]
  -[MediaControlsEndpointsViewController setHomeGestureDismissalAllowedBlock:]
  -[MediaControlsEndpointsViewController shouldPresentUsingViewService]
  -[MediaControlsEndpointsViewController endpointsManager]
  -[MediaControlsEndpointsViewController setEndpointsManager:]
  -[MediaControlsEndpointsViewController selectedRoute]
  -[MediaControlsEndpointsViewController setExternalPlaybackMonitor:]


MediaControlsEndpointController : NSObject /usr/lib/libSystem.B.dylib <MPRequestResponseControllerDelegate, MPAVRoutingControllerDelegate, _MCStateDumpPropertyListTransformable>
 @property  MPRequestResponseController *requestController
 @property  BOOL hasEverReceivedResponse
 @property  long long state
 @property  BOOL attemptingConnection
 @property  MPAVRoutingController *routingController
 @property  MPAVEndpointRoute *route
 @property  BOOL automaticResponseLoading
 @property  <MediaControlsEndpointControllerConnectionDelegate> *connectionDelegate
 @property  NSString *label
 @property  NSString *bundleID
 @property  NSString *representedBundleID
 @property  MPMediaControlsConfiguration *configuration
 @property  MPCPlayerPath *playerPath
 @property  MPCPlayerResponse *response
 @property  NSArray *routeNames
 @property  BOOL allowsAutomaticResponseLoading
 @property  BOOL hasAvailableRoutes
 @property  BOOL airplaying
 @property  BOOL isDeviceSystemRoute
 @property  BOOL routingToWireless
 @property  BOOL onScreen
 @property  BOOL deviceUnlocked
 @property  <MediaControlsEndpointControllerDelegate> *delegate
 @property  <MediaControlsEndpointObserverDelegate> *proxyDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsEndpointController dealloc]
  -[MediaControlsEndpointController delegate]
  -[MediaControlsEndpointController setDelegate:]
  -[MediaControlsEndpointController .cxx_destruct]
  -[MediaControlsEndpointController state]
  -[MediaControlsEndpointController initWithEndpoint:]
  -[MediaControlsEndpointController bundleID]
  -[MediaControlsEndpointController setState:]
  -[MediaControlsEndpointController setLabel:]
  -[MediaControlsEndpointController label]
  -[MediaControlsEndpointController setConfiguration:]
  -[MediaControlsEndpointController configuration]
  -[MediaControlsEndpointController response]
  -[MediaControlsEndpointController _updateState]
  -[MediaControlsEndpointController setRoute:]
  -[MediaControlsEndpointController routeNames]
  -[MediaControlsEndpointController route]
  -[MediaControlsEndpointController _connectIfNeeded]
  -[MediaControlsEndpointController _stateDumpObject]
  -[MediaControlsEndpointController routingControllerAvailableRoutesDidChange:]
  -[MediaControlsEndpointController routingController:pickedRouteDidChange:]
  -[MediaControlsEndpointController routingController]
  -[MediaControlsEndpointController representedBundleID]
  -[MediaControlsEndpointController controller:defersResponseReplacement:]
  -[MediaControlsEndpointController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsEndpointController requestController]
  -[MediaControlsEndpointController playerPath]
  -[MediaControlsEndpointController setOnScreen:]
  -[MediaControlsEndpointController isAirPlaying]
  -[MediaControlsEndpointController setConnectionDelegate:]
  -[MediaControlsEndpointController connectionDelegate]
  -[MediaControlsEndpointController deviceUnlocked]
  -[MediaControlsEndpointController setDeviceUnlocked:]
  -[MediaControlsEndpointController setAllowsAutomaticResponseLoading:]
  -[MediaControlsEndpointController proxyDelegate]
  -[MediaControlsEndpointController isDeviceSystemRoute]
  -[MediaControlsEndpointController launchNowPlayingApp]
  -[MediaControlsEndpointController isRoutingToWireless]
  -[MediaControlsEndpointController hasAvailableRoutes]
  -[MediaControlsEndpointController representsLongFormVideoContentWithCompletion:]
  -[MediaControlsEndpointController connectAllowingAuthenticationWithCompletion:]
  -[MediaControlsEndpointController _initRoutingController]
  -[MediaControlsEndpointController _createRequestController]
  -[MediaControlsEndpointController _maybeReloadPlayerPathWithRoute:]
  -[MediaControlsEndpointController _getConnected:invalid:]
  -[MediaControlsEndpointController setAttemptingConnection:]
  -[MediaControlsEndpointController setAutomaticResponseLoading:]
  -[MediaControlsEndpointController setHasEverReceivedResponse:]
  -[MediaControlsEndpointController _reloadPlayerPathWithRoute:]
  -[MediaControlsEndpointController _connectionDidInvalidate:]
  -[MediaControlsEndpointController _connectionDidConnect:]
  -[MediaControlsEndpointController updateRoutePropertiesIfNeeded]
  -[MediaControlsEndpointController _connectionHasBecomeInvalid]
  -[MediaControlsEndpointController allowsAutomaticResponseLoading]
  -[MediaControlsEndpointController onScreen]
  -[MediaControlsEndpointController setProxyDelegate:]
  -[MediaControlsEndpointController hasEverReceivedResponse]
  -[MediaControlsEndpointController isAttemptingConnection]
  -[MediaControlsEndpointController setRoutingController:]
  -[MediaControlsEndpointController isAutomaticResponseLoading]


MediaControlsSeparatorView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  UIView *separatorView
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MediaControlsSeparatorView .cxx_destruct]
  -[MediaControlsSeparatorView initWithFrame:]
  -[MediaControlsSeparatorView layoutSubviews]
  -[MediaControlsSeparatorView separatorView]
  -[MediaControlsSeparatorView setSeparatorView:]
  -[MediaControlsSeparatorView visualStylingProvider]
  -[MediaControlsSeparatorView setVisualStylingProvider:]


MediaControlsVolumeSliderView : CCUIContinuousSliderView /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit
  // instance methods
  -[MediaControlsVolumeSliderView .cxx_destruct]
  -[MediaControlsVolumeSliderView initWithFrame:]
  -[MediaControlsVolumeSliderView layoutSubviews]
  -[MediaControlsVolumeSliderView filteredValueForValue:]
  -[MediaControlsVolumeSliderView setContinuousSliderCornerRadius:]
  -[MediaControlsVolumeSliderView _unregisterForAVSystemControllerNotifications]
  -[MediaControlsVolumeSliderView _registerForAVSystemControllerNotifications]
  -[MediaControlsVolumeSliderView resetThresholdAcknowledgment]
  -[MediaControlsVolumeSliderView _initializeEUVolumeLimits]
  -[MediaControlsVolumeSliderView _valueByApplyingEULimitsToValue:]
  -[MediaControlsVolumeSliderView _serverConnectionDied:]
  -[MediaControlsVolumeSliderView _EUVolumeLimitChanged:]
  -[MediaControlsVolumeSliderView _EUVolumeEnforcementChanged:]


MediaControlsLanguageOptionHeaderFooterView : UITableViewHeaderFooterView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  UILabel *titleLabel

  // instance methods
  -[MediaControlsLanguageOptionHeaderFooterView .cxx_destruct]
  -[MediaControlsLanguageOptionHeaderFooterView titleLabel]
  -[MediaControlsLanguageOptionHeaderFooterView setTitleLabel:]
  -[MediaControlsLanguageOptionHeaderFooterView initWithReuseIdentifier:]


MediaControlsLanguageOptionTableViewCell : MPAVClippingTableViewCell /System/Library/Frameworks/UIKit.framework/UIKit
  // instance methods
  -[MediaControlsLanguageOptionTableViewCell initWithStyle:reuseIdentifier:]


MediaControlsLanguageOptionsViewController : UIViewController /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MPRequestResponseControllerDelegate, UITableViewDataSource, UITableViewDelegate, UITableViewDelegatePrivate>
 @property  MPRequestResponseController *requestResponseController
 @property  UIView *materialView
 @property  MPAVClippingTableView *tableView
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  NSArray *languageOptionGroups
 @property  <MediaControlsLanguageOptionsViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsLanguageOptionsViewController delegate]
  -[MediaControlsLanguageOptionsViewController setDelegate:]
  -[MediaControlsLanguageOptionsViewController .cxx_destruct]
  -[MediaControlsLanguageOptionsViewController tableView]
  -[MediaControlsLanguageOptionsViewController preferredContentSize]
  -[MediaControlsLanguageOptionsViewController viewDidLoad]
  -[MediaControlsLanguageOptionsViewController viewWillLayoutSubviews]
  -[MediaControlsLanguageOptionsViewController tableView:numberOfRowsInSection:]
  -[MediaControlsLanguageOptionsViewController tableView:cellForRowAtIndexPath:]
  -[MediaControlsLanguageOptionsViewController numberOfSectionsInTableView:]
  -[MediaControlsLanguageOptionsViewController setTableView:]
  -[MediaControlsLanguageOptionsViewController tableView:viewForHeaderInSection:]
  -[MediaControlsLanguageOptionsViewController tableView:shouldHighlightRowAtIndexPath:]
  -[MediaControlsLanguageOptionsViewController tableView:didSelectRowAtIndexPath:]
  -[MediaControlsLanguageOptionsViewController _canShowWhileLocked]
  -[MediaControlsLanguageOptionsViewController tableView:shouldDrawBottomSeparatorForSection:]
  -[MediaControlsLanguageOptionsViewController tableView:shouldHaveFullLengthTopSeparatorForSection:]
  -[MediaControlsLanguageOptionsViewController tableView:shouldHaveFullLengthBottomSeparatorForSection:]
  -[MediaControlsLanguageOptionsViewController controller:defersResponseReplacement:]
  -[MediaControlsLanguageOptionsViewController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsLanguageOptionsViewController materialView]
  -[MediaControlsLanguageOptionsViewController languageOptionGroups]
  -[MediaControlsLanguageOptionsViewController visualStylingProvider]
  -[MediaControlsLanguageOptionsViewController setVisualStylingProvider:]
  -[MediaControlsLanguageOptionsViewController setMaterialView:]
  -[MediaControlsLanguageOptionsViewController initWithRouteUID:]
  -[MediaControlsLanguageOptionsViewController setLanguageOptionGroups:]
  -[MediaControlsLanguageOptionsViewController requestResponseController]
  -[MediaControlsLanguageOptionsViewController setRequestResponseController:]


MediaControlsVolumeSlider : MPVolumeSlider /System/Library/Frameworks/UIKit.framework/UIKit <MTVisualStylingProviderObservingPrivate>
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsVolumeSlider .cxx_destruct]
  -[MediaControlsVolumeSlider pointInside:withEvent:]
  -[MediaControlsVolumeSlider tintColorDidChange]
  -[MediaControlsVolumeSlider initWithFrame:style:]
  -[MediaControlsVolumeSlider trackRectForBounds:]
  -[MediaControlsVolumeSlider thumbRectForBounds:trackRect:value:]
  -[MediaControlsVolumeSlider createThumbView]
  -[MediaControlsVolumeSlider minimumValueImageRectForBounds:]
  -[MediaControlsVolumeSlider maximumValueImageRectForBounds:]
  -[MediaControlsVolumeSlider _thumbImageForStyle:]
  -[MediaControlsVolumeSlider providedStylesDidChangeForProvider:]
  -[MediaControlsVolumeSlider visualStylingProvider]
  -[MediaControlsVolumeSlider setVisualStylingProvider:]
  -[MediaControlsVolumeSlider setMinimumTrackVisualProvider:]
  -[MediaControlsVolumeSlider setMaximumTrackVisualProvider:]


MediaControlsTheme : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[MediaControlsTheme playImage]
  +[MediaControlsTheme pauseImage]
  +[MediaControlsTheme forwardImage]
  +[MediaControlsTheme stopImage]
  +[MediaControlsTheme airplayVideoImage]
  +[MediaControlsTheme backwardImage]
  +[MediaControlsTheme goBackwardImageForTimeInterval:]
  +[MediaControlsTheme goForwardImageForTimeInterval:]
  +[MediaControlsTheme captionsImage]
  +[MediaControlsTheme starImage]
  +[MediaControlsTheme starFillImage]
  +[MediaControlsTheme hamburgerImage]
  +[MediaControlsTheme volumeMinImage]
  +[MediaControlsTheme volumeMaxImage]
  +[MediaControlsTheme appleTVRemote]


MediaControlsExpandableButtonOption : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *identifier
 @property  NSString *packageName
 @property  NSString *title
 @property  UIColor *selectedBackgroundColor

  // instance methods
  -[MediaControlsExpandableButtonOption .cxx_destruct]
  -[MediaControlsExpandableButtonOption identifier]
  -[MediaControlsExpandableButtonOption setIdentifier:]
  -[MediaControlsExpandableButtonOption title]
  -[MediaControlsExpandableButtonOption setTitle:]
  -[MediaControlsExpandableButtonOption packageName]
  -[MediaControlsExpandableButtonOption setPackageName:]
  -[MediaControlsExpandableButtonOption setSelectedBackgroundColor:]
  -[MediaControlsExpandableButtonOption selectedBackgroundColor]


MediaControlsExpandableButton : UIControl /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MTVisualStylingProviderObservingPrivate>
 @property  NSMutableArray *buttons
 @property  UIView *backgroundView
 @property  UIView *overlaySelectionView
 @property  UIView *selectionView
 @property  UIView *clippingView
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel
 @property  UILabel *messageLabel
 @property  NSTimer *messageTimer
 @property  BOOL toggleEnabled
 @property  BOOL displayMessage
 @property  BOOL resetTracking
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  NSArray *options
 @property  MediaControlsExpandableButtonOption *selectedOption
 @property  long long selectedOptionIndex
 @property  NSString *title
 @property  long long axis
 @property  BOOL expanded
 @property  {CGSize=dd} maximumExpandedSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsExpandableButton options]
  -[MediaControlsExpandableButton .cxx_destruct]
  -[MediaControlsExpandableButton title]
  -[MediaControlsExpandableButton setTitle:]
  -[MediaControlsExpandableButton setOptions:]
  -[MediaControlsExpandableButton axis]
  -[MediaControlsExpandableButton initWithFrame:]
  -[MediaControlsExpandableButton titleLabel]
  -[MediaControlsExpandableButton backgroundView]
  -[MediaControlsExpandableButton gestureRecognizerShouldBegin:]
  -[MediaControlsExpandableButton layoutSubviews]
  -[MediaControlsExpandableButton setHighlighted:]
  -[MediaControlsExpandableButton pointInside:withEvent:]
  -[MediaControlsExpandableButton setAxis:]
  -[MediaControlsExpandableButton setTitleLabel:]
  -[MediaControlsExpandableButton setBackgroundView:]
  -[MediaControlsExpandableButton selectionView]
  -[MediaControlsExpandableButton isExpanded]
  -[MediaControlsExpandableButton beginTrackingWithTouch:withEvent:]
  -[MediaControlsExpandableButton cancelTrackingWithEvent:]
  -[MediaControlsExpandableButton continueTrackingWithTouch:withEvent:]
  -[MediaControlsExpandableButton endTrackingWithTouch:withEvent:]
  -[MediaControlsExpandableButton setSubtitleLabel:]
  -[MediaControlsExpandableButton subtitleLabel]
  -[MediaControlsExpandableButton setExpanded:]
  -[MediaControlsExpandableButton setSelectionView:]
  -[MediaControlsExpandableButton _layoutLabels]
  -[MediaControlsExpandableButton displayMessage]
  -[MediaControlsExpandableButton setDisplayMessage:]
  -[MediaControlsExpandableButton setButtons:]
  -[MediaControlsExpandableButton buttons]
  -[MediaControlsExpandableButton selectedOptionIndex]
  -[MediaControlsExpandableButton _contentSizeCategoryDidChange]
  -[MediaControlsExpandableButton messageLabel]
  -[MediaControlsExpandableButton setMessageLabel:]
  -[MediaControlsExpandableButton clippingView]
  -[MediaControlsExpandableButton setClippingView:]
  -[MediaControlsExpandableButton providedStylesDidChangeForProvider:]
  -[MediaControlsExpandableButton setToggleEnabled:]
  -[MediaControlsExpandableButton maximumExpandedSize]
  -[MediaControlsExpandableButton setMaximumExpandedSize:]
  -[MediaControlsExpandableButton selectedOption]
  -[MediaControlsExpandableButton didTapButton:]
  -[MediaControlsExpandableButton visualStylingProvider]
  -[MediaControlsExpandableButton setVisualStylingProvider:]
  -[MediaControlsExpandableButton initForControlCenter]
  -[MediaControlsExpandableButton _springAnimate:]
  -[MediaControlsExpandableButton setSelectedOptionIndex:]
  -[MediaControlsExpandableButton showMessage:]
  -[MediaControlsExpandableButton _layoutSelectionView]
  -[MediaControlsExpandableButton _updateLabelVisualStyling]
  -[MediaControlsExpandableButton _buttonLayoutAxis]
  -[MediaControlsExpandableButton _updateButtonsVisiblity]
  -[MediaControlsExpandableButton _updateSelectionVisiblity]
  -[MediaControlsExpandableButton _animateSelectedGlyphState]
  -[MediaControlsExpandableButton _resetSelectionView]
  -[MediaControlsExpandableButton overlaySelectionView]
  -[MediaControlsExpandableButton setOverlaySelectionView:]
  -[MediaControlsExpandableButton messageTimer]
  -[MediaControlsExpandableButton setMessageTimer:]
  -[MediaControlsExpandableButton toggleEnabled]
  -[MediaControlsExpandableButton resetTracking]
  -[MediaControlsExpandableButton setResetTracking:]


MediaControlsStandaloneEndpointController : MediaControlsEndpointController <MPAVRoutingControllerDelegate, MediaControlsEndpointObserverDelegate, MediaControlsEndpointControllerConnectionDelegate>
 @property  BOOL endpointDiscovered
 @property  MPAVRoutingController *routingController
 @property  MPMRAVEndpointObserverWrapper *endpointObserver
 @property  NSString *routeUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsStandaloneEndpointController dealloc]
  -[MediaControlsStandaloneEndpointController .cxx_destruct]
  -[MediaControlsStandaloneEndpointController initWithEndpoint:]
  -[MediaControlsStandaloneEndpointController setRoute:]
  -[MediaControlsStandaloneEndpointController routingControllerAvailableRoutesDidChange:]
  -[MediaControlsStandaloneEndpointController routingController]
  -[MediaControlsStandaloneEndpointController routeUID]
  -[MediaControlsStandaloneEndpointController setRouteUID:]
  -[MediaControlsStandaloneEndpointController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsStandaloneEndpointController beginObserving]
  -[MediaControlsStandaloneEndpointController endObserving]
  -[MediaControlsStandaloneEndpointController setAllowsAutomaticResponseLoading:]
  -[MediaControlsStandaloneEndpointController initWithRouteUID:]
  -[MediaControlsStandaloneEndpointController proxyDelegate]
  -[MediaControlsStandaloneEndpointController isEndpointDiscovered]
  -[MediaControlsStandaloneEndpointController endpointController:willAttemptToConnectToRoute:]
  -[MediaControlsStandaloneEndpointController setEndpointObserver:]
  -[MediaControlsStandaloneEndpointController setEndpointDiscovered:]
  -[MediaControlsStandaloneEndpointController updateAllowsAutomaticResponseLoading]
  -[MediaControlsStandaloneEndpointController endpointObserver]
  -[MediaControlsStandaloneEndpointController _routeForEndpoint:]


MediaControlsActiveEndpointController : MediaControlsEndpointController <MPAVRoutingControllerDelegate, MediaControlsEndpointObserverDelegate, MediaControlsEndpointControllerConnectionDelegate>
 @property  MPCFuture *deferredPlayerPathFuture
 @property  id deferredPlayerPathInvalidationToken
 @property  MSVPersistentTimer *deferredPlayerPathTimer
 @property  NSString *activeEndpointUID
 @property  long long routeType
 @property  BOOL isDeferred
 @property  NSString *activeRouteUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsActiveEndpointController mediaRecentlyPlayedTimeout]

  // instance methods
  -[MediaControlsActiveEndpointController .cxx_destruct]
  -[MediaControlsActiveEndpointController routeType]
  -[MediaControlsActiveEndpointController setRouteType:]
  -[MediaControlsActiveEndpointController routingControllerAvailableRoutesDidChange:]
  -[MediaControlsActiveEndpointController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsActiveEndpointController setOnScreen:]
  -[MediaControlsActiveEndpointController setDeviceUnlocked:]
  -[MediaControlsActiveEndpointController initWithActiveRouteType:]
  -[MediaControlsActiveEndpointController endpointController:willAttemptToConnectToRoute:]
  -[MediaControlsActiveEndpointController _routeForEndpoint:]
  -[MediaControlsActiveEndpointController activeSystemRouteDidChangeNotification:]
  -[MediaControlsActiveEndpointController _updateActiveSystemRoute]
  -[MediaControlsActiveEndpointController isDeferred]
  -[MediaControlsActiveEndpointController _maybeRestoreDeferredPlayerPath]
  -[MediaControlsActiveEndpointController _maybeUpdateActiveSystemRoute]
  -[MediaControlsActiveEndpointController _activeSystemRouteDidChangeWithChangeType:]
  -[MediaControlsActiveEndpointController setIsDeferred:]
  -[MediaControlsActiveEndpointController setActiveEndpointUID:]
  -[MediaControlsActiveEndpointController setDeferredPlayerPathFuture:]
  -[MediaControlsActiveEndpointController setDeferredPlayerPathInvalidationToken:]
  -[MediaControlsActiveEndpointController setDeferredPlayerPathTimer:]
  -[MediaControlsActiveEndpointController _resetDeferredPlayerPath]
  -[MediaControlsActiveEndpointController deferredPlayerPathFuture]
  -[MediaControlsActiveEndpointController activeEndpointUID]
  -[MediaControlsActiveEndpointController deferredPlayerPathTimer]
  -[MediaControlsActiveEndpointController _restoreDeferredPlayerPath]
  -[MediaControlsActiveEndpointController _fetchActiveSystemRoute:]
  -[MediaControlsActiveEndpointController activeRouteUID]
  -[MediaControlsActiveEndpointController deferredPlayerPathInvalidationToken]


MediaControlsMaterialView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MTVisualStylingProviding>
 @property  BOOL highlighted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsMaterialView .cxx_destruct]
  -[MediaControlsMaterialView initWithFrame:]
  -[MediaControlsMaterialView layoutSubviews]
  -[MediaControlsMaterialView isHighlighted]
  -[MediaControlsMaterialView setHighlighted:]
  -[MediaControlsMaterialView _setContinuousCornerRadius:]
  -[MediaControlsMaterialView visualStylingProviderForCategory:]


MediaControlsCollectionViewController : UIViewController /System/Library/Frameworks/QuartzCore.framework/QuartzCore <UIScrollViewDelegate, UIGestureRecognizerDelegate>
 @property  _MediaControlsTapHoldGestureRecognizer *tapGestureRecognizer
 @property  UIScrollView *scrollView
 @property  long long displayMode
 @property  double preferredItemHeight
 @property  <MediaControlsCollectionViewDataSource> *dataSource
 @property  <MediaControlsCollectionViewDelegate> *delegate
 @property  {UIEdgeInsets=dddd} scrollViewInsets
 @property  @? dismissalBlock
 @property  NSArray *visibleTopViewControllers
 @property  NSArray *visibleBottomViewControllers
 @property  NSArray *visibleViewControllers
 @property  long long selectedItemIndex
 @property  NSIndexSet *visibleIndexes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsCollectionViewController frameAnimator]
  +[MediaControlsCollectionViewController alphaAnimatorWithAnimations:]

  // instance methods
  -[MediaControlsCollectionViewController init]
  -[MediaControlsCollectionViewController delegate]
  -[MediaControlsCollectionViewController setDelegate:]
  -[MediaControlsCollectionViewController .cxx_destruct]
  -[MediaControlsCollectionViewController dataSource]
  -[MediaControlsCollectionViewController setDataSource:]
  -[MediaControlsCollectionViewController _commonInit]
  -[MediaControlsCollectionViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[MediaControlsCollectionViewController gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsCollectionViewController dismissViewControllerAnimated:completion:]
  -[MediaControlsCollectionViewController initWithNibName:bundle:]
  -[MediaControlsCollectionViewController scrollViewDidScroll:]
  -[MediaControlsCollectionViewController scrollViewDidEndDragging:willDecelerate:]
  -[MediaControlsCollectionViewController scrollViewDidEndDecelerating:]
  -[MediaControlsCollectionViewController viewWillAppear:]
  -[MediaControlsCollectionViewController viewWillDisappear:]
  -[MediaControlsCollectionViewController viewDidLoad]
  -[MediaControlsCollectionViewController reloadData]
  -[MediaControlsCollectionViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[MediaControlsCollectionViewController viewDidLayoutSubviews]
  -[MediaControlsCollectionViewController viewDidAppear:]
  -[MediaControlsCollectionViewController viewDidDisappear:]
  -[MediaControlsCollectionViewController _reloadDataIfNeeded]
  -[MediaControlsCollectionViewController scrollView]
  -[MediaControlsCollectionViewController shouldAutomaticallyForwardAppearanceMethods]
  -[MediaControlsCollectionViewController setScrollView:]
  -[MediaControlsCollectionViewController displayMode]
  -[MediaControlsCollectionViewController _updateContentSize]
  -[MediaControlsCollectionViewController updateContentInsets]
  -[MediaControlsCollectionViewController setDisplayMode:]
  -[MediaControlsCollectionViewController insertItemAtIndex:]
  -[MediaControlsCollectionViewController tapGestureRecognizer]
  -[MediaControlsCollectionViewController setTapGestureRecognizer:]
  -[MediaControlsCollectionViewController performBatchUpdates:]
  -[MediaControlsCollectionViewController _removeViewController:]
  -[MediaControlsCollectionViewController selectedItemIndex]
  -[MediaControlsCollectionViewController setSelectedItemIndex:]
  -[MediaControlsCollectionViewController _totalHeight]
  -[MediaControlsCollectionViewController _handleScrollViewTap:]
  -[MediaControlsCollectionViewController _backgroundCornerRadius]
  -[MediaControlsCollectionViewController visibleViewControllers]
  -[MediaControlsCollectionViewController viewControllerForSelectedItem]
  -[MediaControlsCollectionViewController _transitionToVisible:]
  -[MediaControlsCollectionViewController preferredItemHeightGivenWidth:]
  -[MediaControlsCollectionViewController viewControllerForItemAtIndex:]
  -[MediaControlsCollectionViewController dequeueReusableViewControllerForItemAtIndex:]
  -[MediaControlsCollectionViewController dismissalBlock]
  -[MediaControlsCollectionViewController deleteItemAtIndex:]
  -[MediaControlsCollectionViewController reloadItemAtIndex:]
  -[MediaControlsCollectionViewController moveItemAtIndex:toIndex:]
  -[MediaControlsCollectionViewController setSelectedItemIndex:animated:shouldScroll:]
  -[MediaControlsCollectionViewController preferredItemHeight]
  -[MediaControlsCollectionViewController _wantsTapGestureRecognizer]
  -[MediaControlsCollectionViewController _beginAppearanceTransitionForChildViewControllers:animated:]
  -[MediaControlsCollectionViewController _endAppearanceTransitionForChildViewControllers]
  -[MediaControlsCollectionViewController _adjustForEnvironmentChangeIfNeededWithSize:transitionCoordinator:]
  -[MediaControlsCollectionViewController itemAtPoint:]
  -[MediaControlsCollectionViewController visibleIndexes]
  -[MediaControlsCollectionViewController _setSelectedItemIndex:animated:shouldScroll:shouldNotifyDelegate:withReason:]
  -[MediaControlsCollectionViewController _tileViews]
  -[MediaControlsCollectionViewController _updateFramesForActiveViewControllersWithCoordinator:assumingSize:]
  -[MediaControlsCollectionViewController insertItemsAtIndexes:]
  -[MediaControlsCollectionViewController deleteItemsAtIndexes:]
  -[MediaControlsCollectionViewController reloadItemsAtIndexes:]
  -[MediaControlsCollectionViewController _canPerformBatchUpdates]
  -[MediaControlsCollectionViewController _dequeueAndPerformBatchUpdatesIfNeeded]
  -[MediaControlsCollectionViewController _setHighlighted:forViewControllerAtIndex:]
  -[MediaControlsCollectionViewController _frameForViewAtIndex:]
  -[MediaControlsCollectionViewController _verticalSpacing]
  -[MediaControlsCollectionViewController _indexesOfItemsInRect:]
  -[MediaControlsCollectionViewController _insertViewControllerForIndex:]
  -[MediaControlsCollectionViewController _setFrame:forVisibleViewAtIndex:]
  -[MediaControlsCollectionViewController _enumerateActiveViewControllers:]
  -[MediaControlsCollectionViewController _updateFrameForViewController:atIndex:withCoordinator:assumingSize:]
  -[MediaControlsCollectionViewController _reapViewAtIndex:]
  -[MediaControlsCollectionViewController _populateViewsInFrame:]
  -[MediaControlsCollectionViewController _reapActiveViews]
  -[MediaControlsCollectionViewController _removeInactiveViewControllersFromHierarchy]
  -[MediaControlsCollectionViewController _preferredSelectedItemHeight]
  -[MediaControlsCollectionViewController _regularItemHeight]
  -[MediaControlsCollectionViewController _scrollToSelectedItemAnimated:]
  -[MediaControlsCollectionViewController _isScrollViewAnimatingScroll]
  -[MediaControlsCollectionViewController _selectedItemHeightInSize:]
  -[MediaControlsCollectionViewController _selectedItemHeightInSize:shouldIgnoreInsets:]
  -[MediaControlsCollectionViewController _rangeOfItemsInRect:]
  -[MediaControlsCollectionViewController _closestItemAtPoint:]
  -[MediaControlsCollectionViewController _frameForViewAtIndex:size:]
  -[MediaControlsCollectionViewController _frameForViewAtIndex:displayMode:size:]
  -[MediaControlsCollectionViewController _adjustForEnvironmentChangeWithSize:transitionCoordinator:]
  -[MediaControlsCollectionViewController _transitionToDisplayMode:usingTransitionCoordinator:assumingSize:]
  -[MediaControlsCollectionViewController _transitionTopAndBottomViewControllersToVisible:completion:]
  -[MediaControlsCollectionViewController _visibleTopViewControllers]
  -[MediaControlsCollectionViewController _visibleBottomViewControllers]
  -[MediaControlsCollectionViewController _beginAppearanceTransitionIfNeeded:forChildViewController:animated:]
  -[MediaControlsCollectionViewController _endAppearanceTransitionForChildViewControllerIfNeeded:]
  -[MediaControlsCollectionViewController _setHighlighted:forViewController:]
  -[MediaControlsCollectionViewController viewWillTransitionToSize:]
  -[MediaControlsCollectionViewController viewControllerForItemAtPoint:]
  -[MediaControlsCollectionViewController visibleTopViewControllers]
  -[MediaControlsCollectionViewController visibleBottomViewControllers]
  -[MediaControlsCollectionViewController setScrollViewInsets:]
  -[MediaControlsCollectionViewController scrollToSelectedItemAnimated:]
  -[MediaControlsCollectionViewController scrollViewInsets]
  -[MediaControlsCollectionViewController setDismissalBlock:]
  -[MediaControlsCollectionViewController setPreferredItemHeight:]


_MediaControlsTapHoldGestureRecognizer : UIGestureRecognizer /System/Library/Frameworks/QuartzCore.framework/QuartzCore
  // instance methods
  -[_MediaControlsTapHoldGestureRecognizer touchesBegan:withEvent:]
  -[_MediaControlsTapHoldGestureRecognizer touchesMoved:withEvent:]
  -[_MediaControlsTapHoldGestureRecognizer touchesEnded:withEvent:]


MediaControlsVolumeContainerView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore <UIGestureRecognizerDelegate>
 @property  MediaControlsRelativeVolumeStepper *volumeStepper
 @property  unsigned int volumeCapabilities
 @property  MediaControlsVolumeSlider *volumeSlider
 @property  BOOL transitioning
 @property  BOOL onScreen
 @property  long long style
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsVolumeContainerView dealloc]
  -[MediaControlsVolumeContainerView .cxx_destruct]
  -[MediaControlsVolumeContainerView style]
  -[MediaControlsVolumeContainerView setStyle:]
  -[MediaControlsVolumeContainerView initWithFrame:]
  -[MediaControlsVolumeContainerView traitCollectionDidChange:]
  -[MediaControlsVolumeContainerView gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsVolumeContainerView sizeThatFits:]
  -[MediaControlsVolumeContainerView layoutSubviews]
  -[MediaControlsVolumeContainerView didMoveToSuperview]
  -[MediaControlsVolumeContainerView didMoveToWindow]
  -[MediaControlsVolumeContainerView setTransitioning:]
  -[MediaControlsVolumeContainerView isOnScreen]
  -[MediaControlsVolumeContainerView isTransitioning]
  -[MediaControlsVolumeContainerView volumeSlider]
  -[MediaControlsVolumeContainerView setVolumeSlider:]
  -[MediaControlsVolumeContainerView volumeCapabilities]
  -[MediaControlsVolumeContainerView setOnScreen:]
  -[MediaControlsVolumeContainerView setVolumeCapabilities:]
  -[MediaControlsVolumeContainerView visualStylingProvider]
  -[MediaControlsVolumeContainerView setVisualStylingProvider:]
  -[MediaControlsVolumeContainerView initWithFrame:slider:]
  -[MediaControlsVolumeContainerView _updateVolumeStyle]
  -[MediaControlsVolumeContainerView _updateVolumeCapabilities]
  -[MediaControlsVolumeContainerView volumeStepper]
  -[MediaControlsVolumeContainerView setVolumeStepper:]


MediaControlsPresentationController : UIPreviewPresentationController /System/Library/Frameworks/QuartzCore.framework/QuartzCore <UIGestureRecognizerDelegate>
 @property  MTMaterialView *materialView
 @property  UIView *presentingView
 @property  {CGPoint=dd} sourcePoint
 @property  {UIEdgeInsets=dddd} edgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsPresentationController _backgroundEffectForTraitCollection:interactive:]

  // instance methods
  -[MediaControlsPresentationController .cxx_destruct]
  -[MediaControlsPresentationController gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsPresentationController setEdgeInsets:]
  -[MediaControlsPresentationController edgeInsets]
  -[MediaControlsPresentationController shouldPresentInFullscreen]
  -[MediaControlsPresentationController _shouldRespectDefinesPresentationContext]
  -[MediaControlsPresentationController presentationTransitionWillBegin]
  -[MediaControlsPresentationController frameOfPresentedViewInContainerView]
  -[MediaControlsPresentationController dismissalTransitionWillBegin]
  -[MediaControlsPresentationController dismissalTransitionDidEnd:]
  -[MediaControlsPresentationController presentingView]
  -[MediaControlsPresentationController materialView]
  -[MediaControlsPresentationController setMaterialView:]
  -[MediaControlsPresentationController setPresentingView:]
  -[MediaControlsPresentationController setSourcePoint:]
  -[MediaControlsPresentationController _dismissTap:]
  -[MediaControlsPresentationController sourcePoint]


MediaControlsRouteView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MTVisualStylingProviderObservingPrivate>
 @property  UILabel *titleLabel
 @property  CCUICAPackageView *packageView
 @property  NSString *title
 @property  NSString *packageName
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  BOOL labelHidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsRouteView .cxx_destruct]
  -[MediaControlsRouteView title]
  -[MediaControlsRouteView setTitle:]
  -[MediaControlsRouteView initWithFrame:]
  -[MediaControlsRouteView titleLabel]
  -[MediaControlsRouteView layoutSubviews]
  -[MediaControlsRouteView setTitleLabel:]
  -[MediaControlsRouteView _contentSizeCategoryDidChange]
  -[MediaControlsRouteView packageName]
  -[MediaControlsRouteView providedStylesDidChangeForProvider:]
  -[MediaControlsRouteView setGlyphState:]
  -[MediaControlsRouteView setLabelHidden:]
  -[MediaControlsRouteView isLabelHidden]
  -[MediaControlsRouteView visualStylingProvider]
  -[MediaControlsRouteView setVisualStylingProvider:]
  -[MediaControlsRouteView setPackageName:]
  -[MediaControlsRouteView packageView]
  -[MediaControlsRouteView setPackageView:]
  -[MediaControlsRouteView _updateLabelVisualStyling]


MediaControlsRoundButton : UIControl /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MTVisualStylingProviderObservingPrivate>
 @property  CCUICAPackageView *packageView
 @property  UILabel *titleLabel
 @property  NSString *title
 @property  NSString *packageName
 @property  NSString *glyphState
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  long long axis
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} imageFrame
 @property  BOOL labelHidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsRoundButton .cxx_destruct]
  -[MediaControlsRoundButton title]
  -[MediaControlsRoundButton setTitle:]
  -[MediaControlsRoundButton axis]
  -[MediaControlsRoundButton initWithFrame:]
  -[MediaControlsRoundButton titleLabel]
  -[MediaControlsRoundButton traitCollectionDidChange:]
  -[MediaControlsRoundButton gestureRecognizerShouldBegin:]
  -[MediaControlsRoundButton layoutSubviews]
  -[MediaControlsRoundButton setHighlighted:]
  -[MediaControlsRoundButton pointInside:withEvent:]
  -[MediaControlsRoundButton setAxis:]
  -[MediaControlsRoundButton setTitleLabel:]
  -[MediaControlsRoundButton setSelected:]
  -[MediaControlsRoundButton _contentSizeCategoryDidChange]
  -[MediaControlsRoundButton packageName]
  -[MediaControlsRoundButton providedStylesDidChangeForProvider:]
  -[MediaControlsRoundButton imageFrame]
  -[MediaControlsRoundButton setGlyphState:]
  -[MediaControlsRoundButton glyphState]
  -[MediaControlsRoundButton setLabelHidden:]
  -[MediaControlsRoundButton isLabelHidden]
  -[MediaControlsRoundButton visualStylingProvider]
  -[MediaControlsRoundButton setVisualStylingProvider:]
  -[MediaControlsRoundButton setPackageName:]
  -[MediaControlsRoundButton packageView]
  -[MediaControlsRoundButton setPackageView:]
  -[MediaControlsRoundButton _updateLabelVisualStyling]
  -[MediaControlsRoundButton _updatePackageColors]


MediaControlsCollectionViewCountData : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  long long numberOfItems
 @property  BOOL hasPendingChanges
 @property  NSIndexSet *insertedIndexes
 @property  NSIndexSet *deletedIndexes
 @property  NSIndexSet *updatedIndexes

  // instance methods
  -[MediaControlsCollectionViewCountData init]
  -[MediaControlsCollectionViewCountData copyWithZone:]
  -[MediaControlsCollectionViewCountData .cxx_destruct]
  -[MediaControlsCollectionViewCountData numberOfItems]
  -[MediaControlsCollectionViewCountData insertedIndexes]
  -[MediaControlsCollectionViewCountData deletedIndexes]
  -[MediaControlsCollectionViewCountData setNumberOfItems:]
  -[MediaControlsCollectionViewCountData insertItemAtIndex:]
  -[MediaControlsCollectionViewCountData hasPendingChanges]
  -[MediaControlsCollectionViewCountData updatedIndexes]
  -[MediaControlsCollectionViewCountData applyChanges]
  -[MediaControlsCollectionViewCountData initWithNumberOfItems:]
  -[MediaControlsCollectionViewCountData setHasPendingChanges:]
  -[MediaControlsCollectionViewCountData deleteItemAtIndex:]
  -[MediaControlsCollectionViewCountData reloadItemAtIndex:]
  -[MediaControlsCollectionViewCountData moveItemAtIndex:toIndex:]
  -[MediaControlsCollectionViewCountData insertItemsAtIndexes:]
  -[MediaControlsCollectionViewCountData deleteItemsAtIndexes:]
  -[MediaControlsCollectionViewCountData reloadItemsAtIndexes:]
  -[MediaControlsCollectionViewCountData validateCountForNumberOfItems:]


MediaControlsRelativeVolumeStepper : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  MTMaterialView *increaseBackground
 @property  MTMaterialView *decreaseBackground
 @property  MPButton *increaseButton
 @property  MPButton *decreaseButton
 @property  NSBundle *mediaControlsBundle
 @property  MPVolumeController *volumeController
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MediaControlsRelativeVolumeStepper .cxx_destruct]
  -[MediaControlsRelativeVolumeStepper initWithFrame:]
  -[MediaControlsRelativeVolumeStepper layoutSubviews]
  -[MediaControlsRelativeVolumeStepper setVolumeController:]
  -[MediaControlsRelativeVolumeStepper volumeController]
  -[MediaControlsRelativeVolumeStepper visualStylingProvider]
  -[MediaControlsRelativeVolumeStepper setVisualStylingProvider:]
  -[MediaControlsRelativeVolumeStepper mediaControlsBundle]
  -[MediaControlsRelativeVolumeStepper decreaseTouchUpInside:]
  -[MediaControlsRelativeVolumeStepper decreaseButtonHoldBegan:]
  -[MediaControlsRelativeVolumeStepper decreaseButtonHoldReleased:]
  -[MediaControlsRelativeVolumeStepper increaseTouchUpInside:]
  -[MediaControlsRelativeVolumeStepper increaseButtonHoldBegan:]
  -[MediaControlsRelativeVolumeStepper increaseButtonHoldReleased:]
  -[MediaControlsRelativeVolumeStepper increaseBackground]
  -[MediaControlsRelativeVolumeStepper setIncreaseBackground:]
  -[MediaControlsRelativeVolumeStepper decreaseBackground]
  -[MediaControlsRelativeVolumeStepper setDecreaseBackground:]
  -[MediaControlsRelativeVolumeStepper increaseButton]
  -[MediaControlsRelativeVolumeStepper setIncreaseButton:]
  -[MediaControlsRelativeVolumeStepper decreaseButton]
  -[MediaControlsRelativeVolumeStepper setDecreaseButton:]
  -[MediaControlsRelativeVolumeStepper setMediaControlsBundle:]


MRMediaControlsVideoPickerFooterView : MPButton /System/Library/Frameworks/UIKit.framework/UIKit
 @property  UILabel *customTitleLabel
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MRMediaControlsVideoPickerFooterView .cxx_destruct]
  -[MRMediaControlsVideoPickerFooterView initWithFrame:]
  -[MRMediaControlsVideoPickerFooterView traitCollectionDidChange:]
  -[MRMediaControlsVideoPickerFooterView sizeThatFits:]
  -[MRMediaControlsVideoPickerFooterView layoutSubviews]
  -[MRMediaControlsVideoPickerFooterView setHighlighted:]
  -[MRMediaControlsVideoPickerFooterView _updateStyle]
  -[MRMediaControlsVideoPickerFooterView titleLabelText]
  -[MRMediaControlsVideoPickerFooterView visualStylingProvider]
  -[MRMediaControlsVideoPickerFooterView setVisualStylingProvider:]
  -[MRMediaControlsVideoPickerFooterView customTitleLabel]
  -[MRMediaControlsVideoPickerFooterView setCustomTitleLabel:]


MediaControlsHomeObserver : NSObject /usr/lib/libSystem.B.dylib <HMHomeDelegate, HMHomeManagerDelegate>
 @property  <MediaControlsHomeObserverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsHomeObserver init]
  -[MediaControlsHomeObserver delegate]
  -[MediaControlsHomeObserver setDelegate:]
  -[MediaControlsHomeObserver .cxx_destruct]
  -[MediaControlsHomeObserver stopObserving]
  -[MediaControlsHomeObserver homeManagerDidUpdateHomes:]
  -[MediaControlsHomeObserver homeManager:didAddHome:]
  -[MediaControlsHomeObserver homeManager:didRemoveHome:]
  -[MediaControlsHomeObserver home:didAddAccessory:]
  -[MediaControlsHomeObserver home:didRemoveAccessory:]
  -[MediaControlsHomeObserver _notifyDelegate]
  -[MediaControlsHomeObserver beginObserving]
  -[MediaControlsHomeObserver _updateUIDs]
  -[MediaControlsHomeObserver hasAccessoryWithUID:]


MediaControlsEndpointsManager : NSObject /usr/lib/libSystem.B.dylib <MPAVRoutingControllerDelegate, MediaControlsHomeObserverDelegate, MPAVOutputDevicePlaybackDataSource>
 @property  MediaControlsHomeObserver *homeObserver
 @property  MPAVRoutingController *routingController
 @property  NSString *activeSystemRouteUID
 @property  NSString *pendingActiveSystemRouteUID
 @property  MPAVEndpointRoute *activeSystemRoute
 @property  MPAVEndpointRoute *resolvedActiveSystemRoute
 @property  MPMediaControlsConfiguration *configuration
 @property  long long discoveryMode
 @property  NSArray *routes
 @property  <MediaControlsEndpointsManagerDelegate> *delegate
 @property  BOOL isActiveSystemEndpointEqualToLocalEndpoint
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsEndpointsManager dealloc]
  -[MediaControlsEndpointsManager delegate]
  -[MediaControlsEndpointsManager setDelegate:]
  -[MediaControlsEndpointsManager .cxx_destruct]
  -[MediaControlsEndpointsManager configuration]
  -[MediaControlsEndpointsManager initWithConfiguration:]
  -[MediaControlsEndpointsManager setDiscoveryMode:]
  -[MediaControlsEndpointsManager routes]
  -[MediaControlsEndpointsManager discoveryMode]
  -[MediaControlsEndpointsManager routingControllerAvailableRoutesDidChange:]
  -[MediaControlsEndpointsManager routingController]
  -[MediaControlsEndpointsManager getOutputDeviceIsPlaying:completion:]
  -[MediaControlsEndpointsManager endpointControllerForRoute:]
  -[MediaControlsEndpointsManager setActiveSystemRoute:]
  -[MediaControlsEndpointsManager activeSystemRoute]
  -[MediaControlsEndpointsManager resolvedActiveSystemRoute]
  -[MediaControlsEndpointsManager isActiveSystemEndpointEqualToLocalEndpoint]
  -[MediaControlsEndpointsManager homeObserverDidUpdateKnownUIDs:]
  -[MediaControlsEndpointsManager _activeSystemRouteDidChange:]
  -[MediaControlsEndpointsManager _updateWithRoutes:]
  -[MediaControlsEndpointsManager _indexOfRouteWithUID:]
  -[MediaControlsEndpointsManager _updateActiveRoute]
  -[MediaControlsEndpointsManager _endpointControllerContainingOutputDevice:endpointWrapper:]
  -[MediaControlsEndpointsManager _homeHasRoute:]
  -[MediaControlsEndpointsManager _createSectionedCollectionFromRoutes:]
  -[MediaControlsEndpointsManager _setRoutes:withChangeDetails:]
  -[MediaControlsEndpointsManager setResolvedActiveSystemRoute:]
  -[MediaControlsEndpointsManager homeObserver]
  -[MediaControlsEndpointsManager activeSystemRouteUID]
  -[MediaControlsEndpointsManager pendingActiveSystemRouteUID]


MediaControlsTransportStackView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore <MTVisualStylingProviderObservingPrivate>
 @property  MediaControlsTransportButton *tvRemoteButton
 @property  MediaControlsTransportButton *leftButton
 @property  MediaControlsTransportButton *middleButton
 @property  MediaControlsTransportButton *rightButton
 @property  MediaControlsTransportButton *languageOptionsButton
 @property  NSArray *threeButtonContraints
 @property  NSArray *fiveButtonContraints
 @property  long long style
 @property  MPCPlayerResponse *response
 @property  BOOL empty
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  <MediaControlsActionsDelegate> *actionsDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsTransportStackView isEmpty]
  -[MediaControlsTransportStackView .cxx_destruct]
  -[MediaControlsTransportStackView style]
  -[MediaControlsTransportStackView setStyle:]
  -[MediaControlsTransportStackView response]
  -[MediaControlsTransportStackView setResponse:]
  -[MediaControlsTransportStackView setEmpty:]
  -[MediaControlsTransportStackView initWithFrame:]
  -[MediaControlsTransportStackView sizeThatFits:]
  -[MediaControlsTransportStackView layoutSubviews]
  -[MediaControlsTransportStackView leftButton]
  -[MediaControlsTransportStackView setLeftButton:]
  -[MediaControlsTransportStackView actionsDelegate]
  -[MediaControlsTransportStackView setActionsDelegate:]
  -[MediaControlsTransportStackView setMiddleButton:]
  -[MediaControlsTransportStackView rightButton]
  -[MediaControlsTransportStackView setRightButton:]
  -[MediaControlsTransportStackView middleButton]
  -[MediaControlsTransportStackView buttonHoldReleased:]
  -[MediaControlsTransportStackView providedStylesDidChangeForProvider:]
  -[MediaControlsTransportStackView visualStylingProvider]
  -[MediaControlsTransportStackView setVisualStylingProvider:]
  -[MediaControlsTransportStackView updateOnRouteChange]
  -[MediaControlsTransportStackView _createTransportButton]
  -[MediaControlsTransportStackView _updateButtonConfiguration]
  -[MediaControlsTransportStackView touchUpInsideHangdogButton:]
  -[MediaControlsTransportStackView touchUpInsideLeftButton:]
  -[MediaControlsTransportStackView touchUpInsideMiddleButton:]
  -[MediaControlsTransportStackView touchUpInsideRightButton:]
  -[MediaControlsTransportStackView touchUpInsideCaptionsButton:]
  -[MediaControlsTransportStackView buttonHoldBegan:]
  -[MediaControlsTransportStackView tvRemoteButton]
  -[MediaControlsTransportStackView languageOptionsButton]
  -[MediaControlsTransportStackView _updateVisualStylingForButtons]
  -[MediaControlsTransportStackView _updateButtonLayout]
  -[MediaControlsTransportStackView _resetTransportButton:]
  -[MediaControlsTransportStackView _updateButtonVisualStyling:]
  -[MediaControlsTransportStackView setTvRemoteButton:]
  -[MediaControlsTransportStackView setLanguageOptionsButton:]
  -[MediaControlsTransportStackView threeButtonContraints]
  -[MediaControlsTransportStackView setThreeButtonContraints:]
  -[MediaControlsTransportStackView fiveButtonContraints]
  -[MediaControlsTransportStackView setFiveButtonContraints:]


MediaControlsHeaderView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  MTMaterialView *artworkBackground
 @property  UIView *shadow
 @property  MPUMarqueeView *primaryMarqueeView
 @property  UILabel *primaryLabel
 @property  MPUMarqueeView *secondaryMarqueeView
 @property  UILabel *secondaryLabel
 @property  UILabel *placeholderLabel
 @property  BOOL shouldUseOverrideSize
 @property  MPCPlayerPath *playerPath
 @property  UIImageView *artworkView
 @property  UIImageView *placeholderArtworkView
 @property  BOOL transitioning
 @property  long long style
 @property  MPRouteLabel *routeLabel
 @property  NSString *primaryString
 @property  NSString *secondaryString
 @property  NSString *placeholderString
 @property  BOOL showPlaceholderString
 @property  MediaControlsRoutingButtonView *routingButton
 @property  MPButton *doneButton
 @property  UIButton *launchNowPlayingAppButton
 @property  BOOL marqueeEnabled
 @property  long long buttonType
 @property  BOOL routing
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  {CGSize=dd} overrideSize

  // instance methods
  -[MediaControlsHeaderView dealloc]
  -[MediaControlsHeaderView .cxx_destruct]
  -[MediaControlsHeaderView style]
  -[MediaControlsHeaderView setStyle:]
  -[MediaControlsHeaderView shadow]
  -[MediaControlsHeaderView primaryString]
  -[MediaControlsHeaderView initWithFrame:]
  -[MediaControlsHeaderView traitCollectionDidChange:]
  -[MediaControlsHeaderView sizeThatFits:]
  -[MediaControlsHeaderView layoutSubviews]
  -[MediaControlsHeaderView setMarqueeEnabled:]
  -[MediaControlsHeaderView tintColorDidChange]
  -[MediaControlsHeaderView _updateStyle]
  -[MediaControlsHeaderView didMoveToWindow]
  -[MediaControlsHeaderView buttonType]
  -[MediaControlsHeaderView setOverrideSize:]
  -[MediaControlsHeaderView overrideSize]
  -[MediaControlsHeaderView setTransitioning:]
  -[MediaControlsHeaderView isTransitioning]
  -[MediaControlsHeaderView setShadow:]
  -[MediaControlsHeaderView setDoneButton:]
  -[MediaControlsHeaderView doneButton]
  -[MediaControlsHeaderView marqueeEnabled]
  -[MediaControlsHeaderView primaryLabel]
  -[MediaControlsHeaderView secondaryLabel]
  -[MediaControlsHeaderView placeholderString]
  -[MediaControlsHeaderView setButtonType:]
  -[MediaControlsHeaderView _handleContentSizeCategoryDidChangeNotification:]
  -[MediaControlsHeaderView setPlayerPath:]
  -[MediaControlsHeaderView playerPath]
  -[MediaControlsHeaderView setSecondaryLabel:]
  -[MediaControlsHeaderView setPrimaryLabel:]
  -[MediaControlsHeaderView setRouting:]
  -[MediaControlsHeaderView placeholderLabel]
  -[MediaControlsHeaderView setPlaceholderLabel:]
  -[MediaControlsHeaderView artworkView]
  -[MediaControlsHeaderView setPrimaryString:]
  -[MediaControlsHeaderView setSecondaryString:]
  -[MediaControlsHeaderView secondaryString]
  -[MediaControlsHeaderView visualStylingProvider]
  -[MediaControlsHeaderView setVisualStylingProvider:]
  -[MediaControlsHeaderView setArtworkView:]
  -[MediaControlsHeaderView isRouting]
  -[MediaControlsHeaderView routingButton]
  -[MediaControlsHeaderView launchNowPlayingAppButton]
  -[MediaControlsHeaderView setPlaceholderString:]
  -[MediaControlsHeaderView routeLabel]
  -[MediaControlsHeaderView setShowPlaceholderString:]
  -[MediaControlsHeaderView placeholderArtworkView]
  -[MediaControlsHeaderView updateArtworkStyle]
  -[MediaControlsHeaderView clearOverrideSize]
  -[MediaControlsHeaderView artworkBackground]
  -[MediaControlsHeaderView primaryMarqueeView]
  -[MediaControlsHeaderView secondaryMarqueeView]
  -[MediaControlsHeaderView shouldUseOverrideSize]
  -[MediaControlsHeaderView layoutTextInAvailableBounds:setFrames:]
  -[MediaControlsHeaderView _updateRTL]
  -[MediaControlsHeaderView setShouldUseOverrideSize:]
  -[MediaControlsHeaderView setPlaceholderArtworkView:]
  -[MediaControlsHeaderView setRouteLabel:]
  -[MediaControlsHeaderView showPlaceholderString]
  -[MediaControlsHeaderView setRoutingButton:]
  -[MediaControlsHeaderView setLaunchNowPlayingAppButton:]
  -[MediaControlsHeaderView setArtworkBackground:]
  -[MediaControlsHeaderView setPrimaryMarqueeView:]
  -[MediaControlsHeaderView setSecondaryMarqueeView:]


MediaControlsHapticPlayer : NSObject /usr/lib/libSystem.B.dylib
 @property  AVHapticPlayer *player

  // instance methods
  -[MediaControlsHapticPlayer dealloc]
  -[MediaControlsHapticPlayer .cxx_destruct]
  -[MediaControlsHapticPlayer prepare]
  -[MediaControlsHapticPlayer tearDown]
  -[MediaControlsHapticPlayer player]
  -[MediaControlsHapticPlayer setPlayer:]
  -[MediaControlsHapticPlayer expandedButtonChanged]
  -[MediaControlsHapticPlayer checkError:]


MediaControlsTransportButton : MPButton /System/Library/Frameworks/UIKit.framework/UIKit
 @property  MPCPlayerCommandRequest *touchUpInsideCommandRequest
 @property  MPCPlayerCommandRequest *holdBeginCommandRequest
 @property  MPCPlayerCommandRequest *holdEndCommandRequest
 @property  BOOL shouldPresentActionSheet
 @property  BOOL performingHighlightAnimation

  // instance methods
  -[MediaControlsTransportButton .cxx_destruct]
  -[MediaControlsTransportButton setHighlighted:]
  -[MediaControlsTransportButton shouldPresentActionSheet]
  -[MediaControlsTransportButton touchUpInsideCommandRequest]
  -[MediaControlsTransportButton holdBeginCommandRequest]
  -[MediaControlsTransportButton holdEndCommandRequest]
  -[MediaControlsTransportButton setTouchUpInsideCommandRequest:]
  -[MediaControlsTransportButton setHoldBeginCommandRequest:]
  -[MediaControlsTransportButton setHoldEndCommandRequest:]
  -[MediaControlsTransportButton setShouldPresentActionSheet:]
  -[MediaControlsTransportButton isPerformingHighlightAnimation]


MediaControlsAnalytics : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[MediaControlsAnalytics postAnalyticKind:]


MediaControlsContainerView : UIView /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  UIVisualEffectView *primaryVisualEffectView
 @property  long long style
 @property  MPCPlayerResponse *response
 @property  BOOL empty
 @property  BOOL timeControlOnScreen
 @property  MediaControlsTransportStackView *transportStackView
 @property  MediaControlsTimeControl *timeControl

  // instance methods
  -[MediaControlsContainerView isEmpty]
  -[MediaControlsContainerView .cxx_destruct]
  -[MediaControlsContainerView style]
  -[MediaControlsContainerView setStyle:]
  -[MediaControlsContainerView response]
  -[MediaControlsContainerView setResponse:]
  -[MediaControlsContainerView setEmpty:]
  -[MediaControlsContainerView initWithFrame:]
  -[MediaControlsContainerView traitCollectionDidChange:]
  -[MediaControlsContainerView sizeThatFits:]
  -[MediaControlsContainerView layoutSubviews]
  -[MediaControlsContainerView _updateStyle]
  -[MediaControlsContainerView primaryVisualEffectView]
  -[MediaControlsContainerView setPrimaryVisualEffectView:]
  -[MediaControlsContainerView transportStackView]
  -[MediaControlsContainerView setTransportStackView:]
  -[MediaControlsContainerView timeControl]
  -[MediaControlsContainerView setTimeControl:]
  -[MediaControlsContainerView setTimeControlOnScreen:]
  -[MediaControlsContainerView isTimeControlOnScreen]
  -[MediaControlsContainerView setRatingActionSheetDelegate:]


NSBundle(MediaControls)
	// class methods
	+[NSBundle(MediaControls) mediaControlsBundle]

	// instance methods
	-[NSBundle(MediaControls) mediaControls_localizedStringForKey:inTable:]

UIColor(MediaControls)
	// instance methods
	-[UIColor(MediaControls) secondaryColorForInterfaceStyle:]
	-[UIColor(MediaControls) tertiaryColorForInterfaceStyle:]
	-[UIColor(MediaControls) adjustedColorByScale:]

UIView(MediaControlsCollectionViewController)
	// instance methods
	-[UIView(MediaControlsCollectionViewController) setMediaControls_untransformedFrame:]
	-[UIView(MediaControlsCollectionViewController) mediaControls_untransformedFrame]

01 00 1400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVExternalPlaybackMonitor 
01 00 0500 /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox: AVHapticPlayer 
01 00 0300 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 1400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVTimeFormatter 
01 00 1200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 1200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 1200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 1200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAPackage 
01 00 1200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 1500 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUICAPackageDescription 
01 00 1500 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUICAPackageView 
01 00 1500 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIContentModuleContext 
01 00 1500 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIContinuousSliderView 
01 00 1500 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIControlCenterMaterialView 
01 00 1500 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUISliderModuleBackgroundViewController 
01 00 0b00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitor 
01 00 0b00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitorConfiguration 
01 00 0b00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSOpenApplicationOptions 
01 00 0b00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSOpenApplicationService 
01 00 0900 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeManager 
01 00 0900 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableHomeManagerConfiguration 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICAgeVerificationManager 
01 00 1c00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVClippingTableView 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVClippingTableViewCell 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVEndpointRoute 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVEndpointRoutingDataSource 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVOutputDeviceRoute 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVOutputDeviceRoutingDataSource 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRouteConnection 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingViewController 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPButton 
01 00 0f00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerChangeRequest 
01 00 0f00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerPath 
01 00 0f00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerPathCache 
01 00 0f00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerRequest 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCubicSpringAnimator 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCubicSpringTimingParameters 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMRAVEndpointObserverWrapper 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMRAVEndpointWrapper 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControls 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControlsConfiguration 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControlsLanguageOptions 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMutableSectionedCollection 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPropertySet 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRequestResponseController 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRouteLabel 
01 00 0e00 /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation: MPUMarqueeView 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeController 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeControllerRouteDataSource 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeControllerSystemDataSource 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeGroupSliderCoordinator 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeHUDController 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeHardwareButtonController 
01 00 1000 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeSlider 
01 00 0d00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVPersistentTimer 
01 00 0d00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSystemDialog 
01 00 0d00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSystemDialogOptions 
01 00 0d00 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVTimer 
01 00 1600 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTMaterialView 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1900 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1800 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1700 /System/Library/PrivateFrameworks/SharingUI.framework/SharingUI: SFShareAudioViewController 
01 00 0100 /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI: TVRUIRemoteViewController 
01 00 0100 /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI: TVRViewServiceConfigContext 
01 00 0100 /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI: TVRViewServiceManager 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UICubicTimingParameters 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontMetrics 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIGestureRecognizer 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIImpactFeedbackGenerator 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UILayoutGuide 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UILongPressGestureRecognizer 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UINotificationFeedbackGenerator 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewPresentationController 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewHeaderFooterView 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewSpringAnimationBehavior 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 1100 /System/Library/Frameworks/UIKit.framework/UIKit: _UIImpactFeedbackGeneratorConfiguration 
