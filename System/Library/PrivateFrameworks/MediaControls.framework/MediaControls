|| __DATA.__objc_data _OBJC_CLASS_$_MRUNowPlayingQueueHandoffCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_MRUViewServiceProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MRUVolumeHUDRouteDescriptionProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MediaControlsLanguageOptionsViewController
|| __DATA.__objc_data _OBJC_CLASS_$_MediaControlsPanelViewController
|| __DATA.__objc_data _OBJC_CLASS_$_MediaControlsStyleCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUNowPlayingQueueHandoffCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUViewServiceProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_MRUVolumeHUDRouteDescriptionProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_MediaControlsLanguageOptionsViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MediaControlsPanelViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MediaControlsStyleCoordinator
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierAppleTV
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierGenericSpeaker
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierHomePod
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierHomePodStereoPair
|| __DATA_CONST.__const _MRMediaControlsPlatterDeviceIdentifierSpeaker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRPlatterViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUArtworkView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUControlCenterViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUCoverSheetViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUEmbeddingView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUFeatureFlagProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUNowPlayingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUOutputDeviceAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUSystemOutputDeviceRouteController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUSystemVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUVisualStylingProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUVolumeBackgroundViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MRUVolumeViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsBluetoothListeningModeButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsCollectionViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsEndpointsViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsExpandableButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsExpandableButtonOption
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MediaControlsVolumeSliderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRPlatterViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUArtworkView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUControlCenterViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUCoverSheetViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUEmbeddingView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUFeatureFlagProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUNowPlayingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUOutputDeviceAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUSystemOutputDeviceRouteController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUSystemVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUVisualStylingProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUVolumeBackgroundViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MRUVolumeViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsBluetoothListeningModeButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsCollectionViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsEndpointsViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsExpandableButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsExpandableButtonOption
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MediaControlsVolumeSliderView
|| __TEXT.__text _MRUNowPlayingContextDescription
|| __TEXT.__text _MRUNowPlayingLayoutDescription
__ AVFoundation: _AVOutputDeviceBluetoothListeningModeActiveNoiseCancellation
__ AVFoundation: _AVOutputDeviceBluetoothListeningModeAudioTransparency
__ AVFoundation: _AVOutputDeviceBluetoothListeningModeNormal
__ AVFoundation: _OBJC_CLASS_$_AVExternalPlaybackMonitor
__ AVFoundation: _OBJC_CLASS_$_AVTimeFormatter
__ AggregateDictionary: _ADClientAddValueForScalarKey
__ AirPlayRoutePrediction: _ARPRouteSelectionControlBlueBanner
__ AirPlayRoutePrediction: _ARPRouteSelectionControlBluePill
__ AirPlayRoutePrediction: _ARPRouteSelectionControlControlCenter
__ AirPlayRoutePrediction: _ARPRouteSelectionControlInVideo
__ AudioToolbox: _AudioServicesPlaySystemSound
__ BaseBoardUI: _OBJC_CLASS_$_BSUIEmojiLabelView
__ BluetoothManager: _OBJC_CLASS_$_BluetoothManager
__ CallKit: _OBJC_CLASS_$_CXCallObserver
__ CarKit: _OBJC_CLASS_$_CARSessionStatus
__ Celestial: _AVSystemController_AppToInterruptCurrentNowPlayingSessionAttribute
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ ControlCenterUIKit: _CCUICompactModuleContinuousCornerRadius
__ ControlCenterUIKit: _CCUIDefaultExpandedContentModuleWidth
__ ControlCenterUIKit: _CCUIExpandedModuleContinuousCornerRadius
__ ControlCenterUIKit: _CCUIExpandedModuleEdgeInsets
__ ControlCenterUIKit: _CCUIIsPortrait
__ ControlCenterUIKit: _CCUILayoutShouldBePortrait
__ ControlCenterUIKit: _CCUIReferenceScreenBounds
__ ControlCenterUIKit: _CCUIScreenBounds
__ ControlCenterUIKit: _CCUISliderExpandedContentModuleHeight
__ ControlCenterUIKit: _CCUISliderExpandedContentModuleWidth
__ ControlCenterUIKit: _CCUISliderExpandedModuleContinuousCornerRadius
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUICAPackageDescription
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUICAPackageView
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIContentModuleContext
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIContinuousSliderView
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIControlCenterMaterialView
__ ControlCenterUIKit: _OBJC_METACLASS_$_CCUICAPackageView
__ ControlCenterUIKit: _OBJC_METACLASS_$_CCUIContinuousSliderView
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _NSCurrentLocaleDidChangeNotification
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __NSIsNSArray
__ CoreFoundation: __NSIsNSDictionary
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanTrue
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGFloatIsValid
__ CoreGraphics: _CGPathCreateWithRect
__ CoreGraphics: _CGPathRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreHaptics: _CHHapticEventParameterIDHapticFullnessSelect
__ CoreHaptics: _CHHapticEventParameterIDHapticIntensity
__ CoreHaptics: _CHHapticEventParameterIDHapticSharpnessSelect
__ CoreHaptics: _CHHapticEventTypeHapticTransient
__ CoreHaptics: _OBJC_CLASS_$_CHHapticEngine
__ CoreHaptics: _OBJC_CLASS_$_CHHapticEvent
__ CoreHaptics: _OBJC_CLASS_$_CHHapticEventParameter
__ CoreHaptics: _OBJC_CLASS_$_CHHapticPattern
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ FrontBoardServices: _FBSDisplayLayoutElementLockScreenIdentifier
__ FrontBoardServices: _FBSOpenApplicationOptionKeyLaunchOrigin
__ FrontBoardServices: _FBSOpenApplicationOptionKeyPromptUnlockDevice
__ FrontBoardServices: _FBSOpenApplicationOptionKeyUnlockDevice
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitor
__ FrontBoardServices: _OBJC_CLASS_$_FBSDisplayLayoutMonitorConfiguration
__ FrontBoardServices: _OBJC_CLASS_$_FBSOpenApplicationOptions
__ FrontBoardServices: _OBJC_CLASS_$_FBSOpenApplicationService
__ HomeKit: _OBJC_CLASS_$_HMHomeManager
__ HomeKit: _OBJC_CLASS_$_HMMutableHomeManagerConfiguration
__ MPUFoundation: _OBJC_CLASS_$_MPUMarqueeView
__ MaterialKit: _OBJC_CLASS_$_MTMaterialView
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerChangeRequest
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerPath
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerPathCache
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerRequest
__ MediaPlayer: _MPAVRouteB520ProductID
__ MediaPlayer: _MPAVRouteConnectionCorrelationIDUserInfoKey
__ MediaPlayer: _MPAVRouteConnectionErrorDomain
__ MediaPlayer: _MPAVRouteConnectionReasonUserInfoKey
__ MediaPlayer: _MPAVRouteDidChangeNotification
__ MediaPlayer: _MPAVRoutingControllerActiveSystemRouteDidChangeNotification
__ MediaPlayer: _MPAVRoutingViewItemActionIdentifierShareAudio
__ MediaPlayer: _MPFloatGetSafeScaleForValue
__ MediaPlayer: _MPFloatRoundForScale
__ MediaPlayer: _MPModelPropertyAlbumTitle
__ MediaPlayer: _MPModelPropertyArtistName
__ MediaPlayer: _MPModelPropertyComposerName
__ MediaPlayer: _MPModelPropertyRadioStationAttributionLabel
__ MediaPlayer: _MPModelPropertyRadioStationName
__ MediaPlayer: _MPModelPropertySongArtwork
__ MediaPlayer: _MPModelPropertySongDuration
__ MediaPlayer: _MPModelPropertySongExplicit
__ MediaPlayer: _MPModelPropertySongShouldShowComposer
__ MediaPlayer: _MPModelPropertySongTitle
__ MediaPlayer: _MPModelRelationshipAlbumArtist
__ MediaPlayer: _MPModelRelationshipGenericRadioStation
__ MediaPlayer: _MPModelRelationshipGenericSong
__ MediaPlayer: _MPModelRelationshipSongAlbum
__ MediaPlayer: _MPModelRelationshipSongArtist
__ MediaPlayer: _MPModelRelationshipSongComposer
__ MediaPlayer: _MPRectByApplyingUserInterfaceLayoutDirectionInRect
__ MediaPlayer: _MPVolumeSliderVolumeControlAvailabilityDidChangeNotification
__ MediaPlayer: _MPVolumeSliderVolumeControlCapabilitiesDidChangeNotification
__ MediaPlayer: _OBJC_CLASS_$_MPAVClippingTableView
__ MediaPlayer: _OBJC_CLASS_$_MPAVClippingTableViewCell
__ MediaPlayer: _OBJC_CLASS_$_MPAVEndpointRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVEndpointRoutingDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPAVOutputDeviceRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVOutputDeviceRoutingDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVRouteConnection
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingViewController
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingViewItem
__ MediaPlayer: _OBJC_CLASS_$_MPArtworkCatalog
__ MediaPlayer: _OBJC_CLASS_$_MPButton
__ MediaPlayer: _OBJC_CLASS_$_MPCubicSpringAnimator
__ MediaPlayer: _OBJC_CLASS_$_MPCubicSpringTimingParameters
__ MediaPlayer: _OBJC_CLASS_$_MPMRAVEndpointObserverWrapper
__ MediaPlayer: _OBJC_CLASS_$_MPMRAVEndpointWrapper
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControls
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControlsConfiguration
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControlsLanguageOptions
__ MediaPlayer: _OBJC_CLASS_$_MPModelMovie
__ MediaPlayer: _OBJC_CLASS_$_MPModelSong
__ MediaPlayer: _OBJC_CLASS_$_MPModelTVEpisode
__ MediaPlayer: _OBJC_CLASS_$_MPMutableSectionedCollection
__ MediaPlayer: _OBJC_CLASS_$_MPPropertySet
__ MediaPlayer: _OBJC_CLASS_$_MPRequestResponseController
__ MediaPlayer: _OBJC_CLASS_$_MPRouteLabel
__ MediaPlayer: _OBJC_CLASS_$_MPSectionedCollection
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeControllerRouteDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeControllerSystemDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeGroupSliderCoordinator
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeHUDController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeHardwareButtonController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeSlider
__ MediaPlayer: _OBJC_CLASS_$_MPWeakTimer
__ MediaPlayer: _OBJC_METACLASS_$_MPAVClippingTableViewCell
__ MediaPlayer: _OBJC_METACLASS_$_MPAVRoutingViewController
__ MediaPlayer: _OBJC_METACLASS_$_MPButton
__ MediaPlayer: _OBJC_METACLASS_$_MPVolumeSlider
__ MediaPlayer: __MPAVRouteConnectionDidAttemptConnectionNotification
__ MediaPlayer: __MPAVRouteConnectionDidConnectNotification
__ MediaPlayer: __MPAVRouteConnectionDidInvalidateNotification
__ MediaRemote: _MRAVEndpointCopyLocalizedName
__ MediaRemote: _MRAVEndpointCopyOrigin
__ MediaRemote: _MRAVEndpointCopyOutputDevices
__ MediaRemote: _MRAVEndpointCopyUniqueIdentifier
__ MediaRemote: _MRAVEndpointGetActiveSystemEndpointUID
__ MediaRemote: _MRAVEndpointGetExternalDevice
__ MediaRemote: _MRAVEndpointGetLocalEndpoint
__ MediaRemote: _MRAVEndpointObserverAddEndpointChangedCallback
__ MediaRemote: _MRAVEndpointObserverBegin
__ MediaRemote: _MRAVEndpointObserverCreateWithOutputDeviceUID
__ MediaRemote: _MRAVEndpointObserverEnd
__ MediaRemote: _MRAVEndpointResolveActiveSystemEndpointWithType
__ MediaRemote: _MRAVOutputContextCopyOutputDevices
__ MediaRemote: _MRAVOutputContextCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputContextGetSharedAudioPresentationContext
__ MediaRemote: _MRAVOutputDeviceCopyAvailableBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceCopyCurrentBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceCopyName
__ MediaRemote: _MRAVOutputDeviceCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputDeviceGetSubtype
__ MediaRemote: _MRAVOutputDeviceHeadTrackedSpatialAudioActive
__ MediaRemote: _MRAVOutputDeviceIsAddedToHomeKit
__ MediaRemote: _MRAVOutputDeviceSetCurrentBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceSubtypeCopyDescription
__ MediaRemote: _MRAVOutputDeviceSupportsHeadTrackedSpatialAudio
__ MediaRemote: _MRAVOutputDeviceSupportsRapport
__ MediaRemote: _MRAVOutputDeviceTypeCopyDescription
__ MediaRemote: _MRAVReconnaissanceSessionBeginSearch
__ MediaRemote: _MRAVReconnaissanceSessionCreateWithEndpointFeatures
__ MediaRemote: _MRAnalyticsSendEvent
__ MediaRemote: _MRExternalDeviceCopyUniqueIdentifier
__ MediaRemote: _MRMediaRemoteActiveEndpointChangeTypeCopyDescription
__ MediaRemote: _MRMediaRemoteActiveEndpointTypeCopyDescription
__ MediaRemote: _MRMediaRemoteApplicationIsSystemAppleTVApplication
__ MediaRemote: _MRMediaRemoteApplicationIsSystemMediaApplication
__ MediaRemote: _MRMediaRemoteApplicationIsSystemPodcastApplication
__ MediaRemote: _MRMediaRemoteCopyLocalDeviceSystemAppleTVApplicationDisplayID
__ MediaRemote: _MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID
__ MediaRemote: _MRMediaRemoteCopyLocalDeviceSystemPodcastApplicationDisplayID
__ MediaRemote: _MRMediaRemoteGetClientProperties
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin
__ MediaRemote: _MRMediaRemoteGetPlayerProperties
__ MediaRemote: _MRMediaRemotePlaybackStateIsAdvancing
__ MediaRemote: _MRSuggestionContextHome
__ MediaRemote: _MRSuggestionContextHomeScreen
__ MediaRemote: _OBJC_CLASS_$_MRAVOutputDevice
__ MediaRemote: _OBJC_CLASS_$_MRMediaSuggestionPreferences
__ MediaRemote: _OBJC_CLASS_$_MRMediaSuggestionRequest
__ MediaRemote: _OBJC_CLASS_$_MRNowPlayingAudioFormatContentInfo
__ MediaRemote: _OBJC_CLASS_$_MRNowPlayingAudioFormatController
__ MediaRemote: _OBJC_CLASS_$_MRNowPlayingRequest
__ MediaRemote: __MRLogForCategory
__ MediaRemote: _kMREventVolumeModuleANCValueChanged
__ MediaRemote: _kMREventVolumeModuleExpand
__ MediaRemote: _kMREventVolumeModuleNewValueKey
__ MediaRemote: _kMREventVolumeModuleOutputContextDescriptionKey
__ MediaRemote: _kMREventVolumeModulePreviousValueKey
__ MediaRemote: _kMREventVolumeModuleSpatialValueChanged
__ MediaRemote: _kMRMediaRemoteActiveEndpointChangeTypeUserInfoKey
__ MediaRemote: _kMRMediaRemoteActiveEndpointTypeUserInfoKey
__ MediaRemote: _kMRMediaRemoteActiveSystemEndpointDidChangeNotification
__ MediaServices: _MSVCopyLocalizedModelName
__ MediaServices: _MSVDeviceOSIsInternalInstall
__ MediaServices: _OBJC_CLASS_$_MSVPersistentTimer
__ MediaServices: _OBJC_CLASS_$_MSVSystemDialog
__ MediaServices: _OBJC_CLASS_$_MSVSystemDialogOptions
__ MediaServices: _OBJC_CLASS_$_MSVTimer
__ MediaServices: _msv_dispatch_on_main_queue
__ MediaServices: _msv_dispatch_sync_on_queue
__ MobileKeyBag: _kMobileKeyBagLockStatusNotifyToken
__ QuartzCore: _CAFrameRateRangeMake
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CAKeyframeAnimation
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAPackage
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _kCAFilterTrilinear
__ QuartzCore: _kCAPackageTypeCAMLBundle
__ SharingUI: _OBJC_CLASS_$_SFShareAudioViewController
__ SpringBoardServices: _SBSGetScreenLockStatus
__ SpringBoardServices: _SBSRequestPasscodeUnlockAlertUI
__ TVRemoteUI: _OBJC_CLASS_$_TVRUIRemoteViewController
__ TVRemoteUI: _OBJC_CLASS_$_TVRViewServiceConfigContext
__ TVRemoteUI: _OBJC_CLASS_$_TVRViewServiceManager
__ UIKit: _NSFontAttributeName
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _OBJC_CLASS_$_NSCollectionLayoutDimension
__ UIKit: _OBJC_CLASS_$_NSCollectionLayoutGroup
__ UIKit: _OBJC_CLASS_$_NSCollectionLayoutItem
__ UIKit: _OBJC_CLASS_$_NSCollectionLayoutSection
__ UIKit: _OBJC_CLASS_$_NSCollectionLayoutSize
__ UIKit: _OBJC_CLASS_$_NSCollectionLayoutSpacing
__ UIKit: _OBJC_CLASS_$_NSDiffableDataSourceSnapshot
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UICollectionView
__ UIKit: _OBJC_CLASS_$_UICollectionViewCell
__ UIKit: _OBJC_CLASS_$_UICollectionViewCellRegistration
__ UIKit: _OBJC_CLASS_$_UICollectionViewCompositionalLayout
__ UIKit: _OBJC_CLASS_$_UICollectionViewCompositionalLayoutConfiguration
__ UIKit: _OBJC_CLASS_$_UICollectionViewDiffableDataSource
__ UIKit: _OBJC_CLASS_$_UICollectionViewFlowLayout
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UICubicTimingParameters
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIFontMetrics
__ UIKit: _OBJC_CLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIHoverGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIImpactFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILayoutGuide
__ UIKit: _OBJC_CLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UINotificationFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPointerHighlightEffect
__ UIKit: _OBJC_CLASS_$_UIPointerHoverEffect
__ UIKit: _OBJC_CLASS_$_UIPointerInteraction
__ UIKit: _OBJC_CLASS_$_UIPointerLiftEffect
__ UIKit: _OBJC_CLASS_$_UIPointerRegion
__ UIKit: _OBJC_CLASS_$_UIPointerShape
__ UIKit: _OBJC_CLASS_$_UIPointerStyle
__ UIKit: _OBJC_CLASS_$_UIPopoverPresentationController
__ UIKit: _OBJC_CLASS_$_UIPreviewParameters
__ UIKit: _OBJC_CLASS_$_UIPreviewPresentationController
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UITableView
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewDiffableDataSource
__ UIKit: _OBJC_CLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITargetedPreview
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIViewSpringAnimationBehavior
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$__UICursorHighlightEffect
__ UIKit: _OBJC_CLASS_$__UICursorInteraction
__ UIKit: _OBJC_CLASS_$__UICursorLiftEffect
__ UIKit: _OBJC_CLASS_$__UICursorRegion
__ UIKit: _OBJC_CLASS_$__UICursorStyle
__ UIKit: _OBJC_METACLASS_$_UICollectionViewCell
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIPopoverPresentationController
__ UIKit: _OBJC_METACLASS_$_UIPreviewPresentationController
__ UIKit: _OBJC_METACLASS_$_UITableViewCell
__ UIKit: _OBJC_METACLASS_$_UITableViewDiffableDataSource
__ UIKit: _OBJC_METACLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _UIAccessibilityIsReduceMotionEnabled
__ UIKit: _UIAccessibilityTraitButton
__ UIKit: _UIAccessibilityTraitNotEnabled
__ UIKit: _UICeilToScale
__ UIKit: _UICeilToViewScale
__ UIKit: _UIContentSizeCategoryAccessibilityMedium
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraExtraLarge
__ UIKit: _UIContentSizeCategoryLarge
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontTextStyleHeadline
__ UIKit: _UIFontTextStyleSubheadline
__ UIKit: _UIFontWeightMedium
__ UIKit: _UIRectCenteredAboutPoint
__ UIKit: _UIRectCenteredIntegralRect
__ UIKit: _UIRectCenteredIntegralRectScale
__ UIKit: _UIRectCenteredRect
__ UIKit: _UIRectCenteredXInRect
__ UIKit: _UIRectCenteredYInRect
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRectIntegralWithScale
__ UIKit: _UIRoundToScale
__ UIKit: _UIRoundToViewScale
__ UIKit: _UITableViewAutomaticDimension
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewKey
__ libAccessibility.dylib: __AXSSpatialAudioHeadTracking
__ libAccessibility.dylib: _kAXSAirPodSpatialAudioLockToDeviceChangedNotification
__ libAudioStatistics.dylib: _OBJC_CLASS_$_CAReporter
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_state_add_handler
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _uname
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
MRUMediaSuggestionsController : NSObject
 @property  NSDictionary *suggestions
 @property  MRMediaSuggestionRequest *request
 @property  NSHashTable *observers
 @property  NSCache *imageCache
 @property  NSDate *lastRequestDate
 @property  NSObject<OS_dispatch_queue> *requestQueue
 @property  MRMediaSuggestionPreferences *preferences
 @property  BOOL requestActive

  // class methods
  +[MRUMediaSuggestionsController sharedController]
  +[MRUMediaSuggestionsController minDisplayItemCount]

  // instance methods
  -[MRUMediaSuggestionsController hasTimeOutElapsedForOrigin:completion:]
  -[MRUMediaSuggestionsController setRequest:]
  -[MRUMediaSuggestionsController requestQueue]
  -[MRUMediaSuggestionsController artworkImageForSuggestion:]
  -[MRUMediaSuggestionsController setImageCache:]
  -[MRUMediaSuggestionsController setPreferences:]
  -[MRUMediaSuggestionsController imageCache]
  -[MRUMediaSuggestionsController preferences]
  -[MRUMediaSuggestionsController setSuggestions:]
  -[MRUMediaSuggestionsController .cxx_destruct]
  -[MRUMediaSuggestionsController suggestionsForContext:]
  -[MRUMediaSuggestionsController setLastRequestDate:]
  -[MRUMediaSuggestionsController setRequestActive:]
  -[MRUMediaSuggestionsController notifySuggestionsDidChange:]
  -[MRUMediaSuggestionsController suggestions]
  -[MRUMediaSuggestionsController setObservers:]
  -[MRUMediaSuggestionsController init]
  -[MRUMediaSuggestionsController request]
  -[MRUMediaSuggestionsController requestNewSuggestions]
  -[MRUMediaSuggestionsController addObserver:]
  -[MRUMediaSuggestionsController observers]
  -[MRUMediaSuggestionsController lastRequestDate]
  -[MRUMediaSuggestionsController removeObserver:]
  -[MRUMediaSuggestionsController requestActive]
  -[MRUMediaSuggestionsController setRequestQueue:]


MRUOutputDeviceAssetView : UIView <MRUVisualStylingProviderObserver>
 @property  BSUIEmojiLabelView *titleLabel
 @property  UIImageView *imageView
 @property  CCUICAPackageView *packageView
 @property  MRUOutputDeviceAsset *asset
 @property  NSString *title
 @property  NSString *glyphState
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUOutputDeviceAssetView stylingProvider]
  -[MRUOutputDeviceAssetView titleLabel]
  -[MRUOutputDeviceAssetView imageView]
  -[MRUOutputDeviceAssetView updateContentSizeCategory]
  -[MRUOutputDeviceAssetView setTitle:]
  -[MRUOutputDeviceAssetView setStylingProvider:]
  -[MRUOutputDeviceAssetView .cxx_destruct]
  -[MRUOutputDeviceAssetView setTitleLabel:]
  -[MRUOutputDeviceAssetView layoutSubviews]
  -[MRUOutputDeviceAssetView setAsset:]
  -[MRUOutputDeviceAssetView asset]
  -[MRUOutputDeviceAssetView visualStylingProviderDidChange:]
  -[MRUOutputDeviceAssetView updateVisualStyling]
  -[MRUOutputDeviceAssetView sizeThatFits:]
  -[MRUOutputDeviceAssetView updateVisibility]
  -[MRUOutputDeviceAssetView title]
  -[MRUOutputDeviceAssetView initWithFrame:]
  -[MRUOutputDeviceAssetView glyphState]
  -[MRUOutputDeviceAssetView packageView]
  -[MRUOutputDeviceAssetView setGlyphState:]
  -[MRUOutputDeviceAssetView setPackageView:]
  -[MRUOutputDeviceAssetView setImageView:]


MRUSubtitleValue : NSObject
 @property  NSString *text
 @property  long long accessory

  // instance methods
  -[MRUSubtitleValue accessory]
  -[MRUSubtitleValue .cxx_destruct]
  -[MRUSubtitleValue text]
  -[MRUSubtitleValue initWithText:accessory:]
  -[MRUSubtitleValue isEqualToSubtitleValue:]


MRURoutingSubtitleController : NSObject
 @property  NSMutableDictionary *storage
 @property  long long state
 @property  <MRURoutingSubtitleControllerDelegate> *delegate
 @property  BOOL hasText
 @property  BOOL canTransitionToNextState
 @property  NSString *text
 @property  long long accessory

  // instance methods
  -[MRURoutingSubtitleController accessory]
  -[MRURoutingSubtitleController setStorage:]
  -[MRURoutingSubtitleController .cxx_destruct]
  -[MRURoutingSubtitleController storage]
  -[MRURoutingSubtitleController setDelegate:]
  -[MRURoutingSubtitleController init]
  -[MRURoutingSubtitleController prepareForReuse]
  -[MRURoutingSubtitleController state]
  -[MRURoutingSubtitleController delegate]
  -[MRURoutingSubtitleController hasText]
  -[MRURoutingSubtitleController text]
  -[MRURoutingSubtitleController nextAvailableTextState]
  -[MRURoutingSubtitleController setText:forState:accessory:]
  -[MRURoutingSubtitleController transitionToNextAvailableState]
  -[MRURoutingSubtitleController canTransitionToNextState]
  -[MRURoutingSubtitleController setText:forState:]


MediaControlsParentContainerView : UIView
 @property  UIView *mediaControlsRoutingPickerView
 @property  long long routingViewControllerAnimationCount
 @property  long long style
 @property  long long selectedMode
 @property  MediaControlsContainerView *containerView
 @property  MediaControlsTransportStackView *transportStackView
 @property  MediaControlsTimeControl *timeControl
 @property  UIView *routingView
 @property  MediaControlsSeparatorView *topDividerView
 @property  MediaControlsSeparatorView *bottomDividerView

  // instance methods
  -[MediaControlsParentContainerView containerView]
  -[MediaControlsParentContainerView .cxx_destruct]
  -[MediaControlsParentContainerView setStyle:]
  -[MediaControlsParentContainerView layoutSubviews]
  -[MediaControlsParentContainerView setContainerView:]
  -[MediaControlsParentContainerView setTopDividerView:]
  -[MediaControlsParentContainerView selectedMode]
  -[MediaControlsParentContainerView setSelectedMode:]
  -[MediaControlsParentContainerView initWithFrame:]
  -[MediaControlsParentContainerView didMoveToWindow]
  -[MediaControlsParentContainerView setSelectedMode:animated:]
  -[MediaControlsParentContainerView style]
  -[MediaControlsParentContainerView topDividerView]
  -[MediaControlsParentContainerView mediaControlsRoutingPickerView]
  -[MediaControlsParentContainerView bottomDividerView]
  -[MediaControlsParentContainerView handleHoverGestureRecognizer:]
  -[MediaControlsParentContainerView _updateTimeControlVisibility:]
  -[MediaControlsParentContainerView _updateRoutingPickerVisibilityAnimated:]
  -[MediaControlsParentContainerView _toggleRoutingPickerAnimated:]
  -[MediaControlsParentContainerView transportStackView]
  -[MediaControlsParentContainerView setTransportStackView:]
  -[MediaControlsParentContainerView timeControl]
  -[MediaControlsParentContainerView setTimeControl:]
  -[MediaControlsParentContainerView _setInitialFrameForRoutingView:]
  -[MediaControlsParentContainerView routingView]
  -[MediaControlsParentContainerView setRoutingView:]
  -[MediaControlsParentContainerView setBottomDividerView:]
  -[MediaControlsParentContainerView setMediaControlsRoutingPickerView:]
  -[MediaControlsParentContainerView routingViewControllerAnimationCount]
  -[MediaControlsParentContainerView setRoutingViewControllerAnimationCount:]


MediaControlsRoutingViewController : MPAVRoutingViewController
  // instance methods
  -[MediaControlsRoutingViewController _createVolumeSlider]
  -[MediaControlsRoutingViewController _canShowWhileLocked]


MRUControlCenterViewController : UIViewController <MediaControlsEndpointsManagerDelegate, MRUNowPlayingViewControllerDelegate, MRUEndpointMetadataControllerObserver, UICollectionViewDelegateFlowLayout, UICollectionViewDelegate, UIGestureRecognizerDelegate, CCUIContentModuleContentViewController>
 @property  MRUControlCenterView *view
 @property  MRUControlCenterView *viewIfLoaded
 @property  MediaControlsEndpointsManager *endpointsManager
 @property  UICollectionViewDiffableDataSource *dataSource
 @property  NSMutableDictionary *viewControllers
 @property  MRUNowPlayingViewController *selectedViewController
 @property  @? replaceRoutes
 @property  BOOL onScreen
 @property  UIViewController *alertViewController
 @property  long long pendingNowPlayingExpandedLayout
 @property  @? dismissalBlock
 @property  @? routingCornerViewTappedBlock
 @property  @? homeGestureDismissalAllowedBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double preferredExpandedContentHeight
 @property  double preferredExpandedContentWidth
 @property  double preferredExpandedContinuousCornerRadius
 @property  BOOL providesOwnPlatter
 @property  UIViewPropertyAnimator *customAnimator
 @property  BOOL shouldPerformHoverInteraction
 @property  BOOL shouldPerformClickInteraction

  // instance methods
  -[MRUControlCenterViewController metadataControllerRouteDidUpdate:]
  -[MRUControlCenterViewController updateCell:forIdentifier:]
  -[MRUControlCenterViewController metadataControllerDidChangeState:]
  -[MRUControlCenterViewController didTransitionToExpandedContentMode:]
  -[MRUControlCenterViewController updateDiscoveryMode]
  -[MRUControlCenterViewController setViewControllers:]
  -[MRUControlCenterViewController metadataControllerDidUpdateRoutingAvailability:]
  -[MRUControlCenterViewController didSelectQuickActionButton:]
  -[MRUControlCenterViewController collectionView:didSelectItemAtIndexPath:]
  -[MRUControlCenterViewController viewControllers]
  -[MRUControlCenterViewController viewWillLayoutSubviews]
  -[MRUControlCenterViewController metadataControllerShouldAutomaticallyUpdateReponse:]
  -[MRUControlCenterViewController metadataController:didUpdateApplicationIcon:]
  -[MRUControlCenterViewController setDataSource:]
  -[MRUControlCenterViewController nowPlayingViewController:didChangeSizeWithAnimations:completion:]
  -[MRUControlCenterViewController isOnScreen]
  -[MRUControlCenterViewController nowPlayingViewController:applyLayout:]
  -[MRUControlCenterViewController endpointsManager:defersRoutesReplacement:]
  -[MRUControlCenterViewController .cxx_destruct]
  -[MRUControlCenterViewController viewDidLoad]
  -[MRUControlCenterViewController metadataController:didLoadNewResponse:]
  -[MRUControlCenterViewController setReplaceRoutes:]
  -[MRUControlCenterViewController updateMoreButtonVisibility]
  -[MRUControlCenterViewController setState:]
  -[MRUControlCenterViewController selectedIdentifier]
  -[MRUControlCenterViewController dataSource]
  -[MRUControlCenterViewController setEndpointsManager:]
  -[MRUControlCenterViewController init]
  -[MRUControlCenterViewController canDismissPresentedContent]
  -[MRUControlCenterViewController preferredExpandedContentHeight]
  -[MRUControlCenterViewController nowPlayingViewController:showViewController:]
  -[MRUControlCenterViewController setOnScreen:]
  -[MRUControlCenterViewController updateSelectedViewControllerLayout]
  -[MRUControlCenterViewController dismissPresentedContentAnimated:completion:]
  -[MRUControlCenterViewController providesOwnPlatter]
  -[MRUControlCenterViewController selectedViewController]
  -[MRUControlCenterViewController shouldPerformHoverInteraction]
  -[MRUControlCenterViewController viewWillDisappear:]
  -[MRUControlCenterViewController endpointsManager]
  -[MRUControlCenterViewController homeGestureDismissalAllowedBlock]
  -[MRUControlCenterViewController preferredExpandedContentWidth]
  -[MRUControlCenterViewController gestureRecognizer:shouldReceiveTouch:]
  -[MRUControlCenterViewController didSelectListState:]
  -[MRUControlCenterViewController endpointsManager:activeSystemRouteDidChange:]
  -[MRUControlCenterViewController viewWillAppear:]
  -[MRUControlCenterViewController dismiss]
  -[MRUControlCenterViewController replaceRoutes]
  -[MRUControlCenterViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[MRUControlCenterViewController transitionToState:completion:]
  -[MRUControlCenterViewController updateViewControllers]
  -[MRUControlCenterViewController shouldExpandModuleOnTouch:]
  -[MRUControlCenterViewController setRoutingCornerViewTappedBlock:]
  -[MRUControlCenterViewController dismissalBlock]
  -[MRUControlCenterViewController setHomeGestureDismissalAllowedBlock:]
  -[MRUControlCenterViewController setAlertViewController:]
  -[MRUControlCenterViewController loadView]
  -[MRUControlCenterViewController routingCornerViewTappedBlock]
  -[MRUControlCenterViewController setSelectedViewController:]
  -[MRUControlCenterViewController updateMetadataControllers]
  -[MRUControlCenterViewController setPendingNowPlayingExpandedLayout:]
  -[MRUControlCenterViewController pendingNowPlayingExpandedLayout]
  -[MRUControlCenterViewController updateVisibilityForActiveCell:inActiveCells:]
  -[MRUControlCenterViewController setDismissalBlock:]
  -[MRUControlCenterViewController alertViewController]
  -[MRUControlCenterViewController updateCellForIdentifier:]
  -[MRUControlCenterViewController _canShowWhileLocked]


MRUViewServiceRoutingViewController : UIViewController <MediaControlsEndpointsManagerDelegate, MRUEndpointMetadataControllerObserver, MRURoutingViewControllerDelegate, UITableViewDelegate, UITableViewDelegatePrivate>
 @property  MRUViewServiceRoutingView *view
 @property  MRUViewServiceRoutingView *viewIfLoaded
 @property  MediaControlsEndpointsManager *endpointsManager
 @property  MRURoutingViewController *routingViewController
 @property  MPAVOutputDeviceRoutingDataSource *outputDeviceRoutingDataSource
 @property  UITableViewDiffableDataSource *dataSource
 @property  NSMutableDictionary *controllers
 @property  MRUEndpointMetadataController *selectedController
 @property  @? replaceRoutes
 @property  BOOL onScreen
 @property  BOOL canShowRemoteDevices
 @property  BOOL supportsQueueHandoff
 @property  UIViewController *alertViewController
 @property  MPMediaControlsConfiguration *configuration
 @property  MRUVisualStylingProvider *stylingProvider
 @property  <MRUViewServiceRoutingViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUViewServiceRoutingViewController stylingProvider]
  -[MRUViewServiceRoutingViewController controllers]
  -[MRUViewServiceRoutingViewController metadataControllerRouteDidUpdate:]
  -[MRUViewServiceRoutingViewController updateCell:forIdentifier:]
  -[MRUViewServiceRoutingViewController metadataControllerDidChangeState:]
  -[MRUViewServiceRoutingViewController updateDiscoveryMode]
  -[MRUViewServiceRoutingViewController metadataControllerDidUpdateRoutingAvailability:]
  -[MRUViewServiceRoutingViewController didSelectQuickActionButton:]
  -[MRUViewServiceRoutingViewController metadataControllerShouldAutomaticallyUpdateReponse:]
  -[MRUViewServiceRoutingViewController metadataController:didUpdateApplicationIcon:]
  -[MRUViewServiceRoutingViewController updateRoutingViewControllerContentEdgeInsets]
  -[MRUViewServiceRoutingViewController routingViewController]
  -[MRUViewServiceRoutingViewController setDataSource:]
  -[MRUViewServiceRoutingViewController configuration]
  -[MRUViewServiceRoutingViewController isOnScreen]
  -[MRUViewServiceRoutingViewController endpointsManager:defersRoutesReplacement:]
  -[MRUViewServiceRoutingViewController setStylingProvider:]
  -[MRUViewServiceRoutingViewController .cxx_destruct]
  -[MRUViewServiceRoutingViewController tableView:didSelectRowAtIndexPath:]
  -[MRUViewServiceRoutingViewController viewDidLoad]
  -[MRUViewServiceRoutingViewController tableView:shouldHaveFullLengthBottomSeparatorForSection:]
  -[MRUViewServiceRoutingViewController metadataController:didLoadNewResponse:]
  -[MRUViewServiceRoutingViewController routingViewControllerDidUpdateItems:]
  -[MRUViewServiceRoutingViewController setDelegate:]
  -[MRUViewServiceRoutingViewController setReplaceRoutes:]
  -[MRUViewServiceRoutingViewController updateMoreButtonVisibility]
  -[MRUViewServiceRoutingViewController setState:]
  -[MRUViewServiceRoutingViewController selectedIdentifier]
  -[MRUViewServiceRoutingViewController dataSource]
  -[MRUViewServiceRoutingViewController setEndpointsManager:]
  -[MRUViewServiceRoutingViewController init]
  -[MRUViewServiceRoutingViewController routingViewController:didSelectRoutingViewItem:]
  -[MRUViewServiceRoutingViewController setOnScreen:]
  -[MRUViewServiceRoutingViewController viewWillDisappear:]
  -[MRUViewServiceRoutingViewController endpointsManager]
  -[MRUViewServiceRoutingViewController didSelectListState:]
  -[MRUViewServiceRoutingViewController endpointsManager:activeSystemRouteDidChange:]
  -[MRUViewServiceRoutingViewController viewWillAppear:]
  -[MRUViewServiceRoutingViewController replaceRoutes]
  -[MRUViewServiceRoutingViewController delegate]
  -[MRUViewServiceRoutingViewController setAlertViewController:]
  -[MRUViewServiceRoutingViewController setSupportsQueueHandoff:]
  -[MRUViewServiceRoutingViewController loadView]
  -[MRUViewServiceRoutingViewController supportsQueueHandoff]
  -[MRUViewServiceRoutingViewController updateHeader]
  -[MRUViewServiceRoutingViewController alertViewController]
  -[MRUViewServiceRoutingViewController updateCellForIdentifier:]
  -[MRUViewServiceRoutingViewController _canShowWhileLocked]
  -[MRUViewServiceRoutingViewController setConfiguration:]
  -[MRUViewServiceRoutingViewController updateControllers]
  -[MRUViewServiceRoutingViewController updateRoutingViewController]
  -[MRUViewServiceRoutingViewController updateSelectedViewController]
  -[MRUViewServiceRoutingViewController canShowMoreButton]
  -[MRUViewServiceRoutingViewController setRoutingViewController:]
  -[MRUViewServiceRoutingViewController setSelectedController:]
  -[MRUViewServiceRoutingViewController outputDeviceRoutingDataSource]
  -[MRUViewServiceRoutingViewController setOutputDeviceRoutingDataSource:]
  -[MRUViewServiceRoutingViewController setControllers:]
  -[MRUViewServiceRoutingViewController selectedController]
  -[MRUViewServiceRoutingViewController canShowRemoteDevices]
  -[MRUViewServiceRoutingViewController setCanShowRemoteDevices:]


MRUAnalytics : NSObject
  // class methods
  +[MRUAnalytics sendEvent:withError:payload:]


MRUCoverSheetViewController : UIViewController <MRUNowPlayingViewControllerDelegate, UIGestureRecognizerDelegate, MTVisualStylingRequiring>
 @property  MRUVisualStylingProvider *stylingProvider
 @property  MRUNowPlayingViewController *nowPlayingViewController
 @property  MediaControlsInteractionRecognizer *interactionRecognizer
 @property  <MRUCoverSheetViewControllerDelegate> *delegate
 @property  long long layout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *requiredVisualStyleCategories

  // instance methods
  -[MRUCoverSheetViewController stylingProvider]
  -[MRUCoverSheetViewController setVisualStylingProvider:forCategory:]
  -[MRUCoverSheetViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[MRUCoverSheetViewController nowPlayingViewController:didChangeSizeWithAnimations:completion:]
  -[MRUCoverSheetViewController requiredVisualStyleCategories]
  -[MRUCoverSheetViewController setStylingProvider:]
  -[MRUCoverSheetViewController .cxx_destruct]
  -[MRUCoverSheetViewController viewDidLoad]
  -[MRUCoverSheetViewController didReceiveInteraction:]
  -[MRUCoverSheetViewController setDelegate:]
  -[MRUCoverSheetViewController setInteractionRecognizer:]
  -[MRUCoverSheetViewController interactionRecognizer]
  -[MRUCoverSheetViewController viewDidLayoutSubviews]
  -[MRUCoverSheetViewController setNowPlayingViewController:]
  -[MRUCoverSheetViewController delegate]
  -[MRUCoverSheetViewController nowPlayingViewController]
  -[MRUCoverSheetViewController layout]
  -[MRUCoverSheetViewController _canShowWhileLocked]


MRUShadowView : UIView
  // instance methods
  -[MRUShadowView _shouldAnimatePropertyWithKey:]
  -[MRUShadowView initWithFrame:]


MRURoutingViewControllerItems : NSObject
 @property  NSDictionary *routeGrouping
 @property  NSArray *localDevicesAndHeadphones
 @property  NSArray *speakersAndTVs

  // instance methods
  -[MRURoutingViewControllerItems setRouteGrouping:]
  -[MRURoutingViewControllerItems .cxx_destruct]
  -[MRURoutingViewControllerItems setLocalDevicesAndHeadphones:]
  -[MRURoutingViewControllerItems setSpeakersAndTVs:]
  -[MRURoutingViewControllerItems routeGrouping]
  -[MRURoutingViewControllerItems localDevicesAndHeadphones]
  -[MRURoutingViewControllerItems speakersAndTVs]


MRURoutingViewControllerUpdate : NSObject
 @property  NSArray *pickedRoutes
 @property  NSArray *pendingPickedRoutes
 @property  NSArray *displayableAvailableRoutes
 @property  NSArray *displayAsPickedRoutes
 @property  NSArray *volumeCapableRoutes
 @property  NSDictionary *routeGrouping
 @property  BOOL canGroup
 @property  BOOL hasPendingPickedRoutes
 @property  BOOL shouldReload

  // instance methods
  -[MRURoutingViewControllerUpdate canGroup]
  -[MRURoutingViewControllerUpdate setRouteGrouping:]
  -[MRURoutingViewControllerUpdate .cxx_destruct]
  -[MRURoutingViewControllerUpdate displayAsPickedRoutes]
  -[MRURoutingViewControllerUpdate displayableAvailableRoutes]
  -[MRURoutingViewControllerUpdate setCanGroup:]
  -[MRURoutingViewControllerUpdate pendingPickedRoutes]
  -[MRURoutingViewControllerUpdate setDisplayableAvailableRoutes:]
  -[MRURoutingViewControllerUpdate routeGrouping]
  -[MRURoutingViewControllerUpdate setDisplayAsPickedRoutes:]
  -[MRURoutingViewControllerUpdate hasPendingPickedRoutes]
  -[MRURoutingViewControllerUpdate setHasPendingPickedRoutes:]
  -[MRURoutingViewControllerUpdate setPendingPickedRoutes:]
  -[MRURoutingViewControllerUpdate pickedRoutes]
  -[MRURoutingViewControllerUpdate setPickedRoutes:]
  -[MRURoutingViewControllerUpdate shouldReload]
  -[MRURoutingViewControllerUpdate setShouldReload:]
  -[MRURoutingViewControllerUpdate setVolumeCapableRoutes:]
  -[MRURoutingViewControllerUpdate volumeCapableRoutes]


MRURoutingViewController : UIViewController <UITableViewDataSource, UITableViewDelegate, UITableViewDelegatePrivate, MPAVRoutingControllerDelegate, MRURoutingTableViewCellDelegate, MRUEndpointMetadataControllerObserver, CARSessionObserving, UIGestureRecognizerDelegate>
 @property  MRURoutingView *view
 @property  MRURoutingView *viewIfLoaded
 @property  BOOL inCarPlay
 @property  BOOL onScreen
 @property  NSMapTable *outputDeviceVolumeSliders
 @property  CARSessionStatus *carPlaySessionStatus
 @property  NSMutableSet *expandedGroupUIDs
 @property  NSMutableSet *expandedItemUIDs
 @property  NSDictionary *indexedMetadataControllers
 @property  BOOL needsDisplayedRoutesUpdate
 @property  NSNumberFormatter *percentageFormatter
 @property  MPWeakTimer *subtitleUpdateTimer
 @property  NSTimer *collapseTimer
 @property  unsigned long stateHandle
 @property  MPAVRoutingController *routingController
 @property  <MRURoutingViewControllerDelegate> *delegate
 @property  MRUVisualStylingProvider *stylingProvider
 @property  MPVolumeGroupSliderCoordinator *groupSliderCoordinator
 @property  NSArray *metadataControllers
 @property  MPAVEndpointRoute *endpointRoute
 @property  long long discoveryMode
 @property  BOOL sortByIsVideoRoute
 @property  BOOL showMetadataForEndpointRoute
 @property  {UIEdgeInsets=dddd} contentEdgeInsets
 @property  {UIEdgeInsets=dddd} scrollIndicatorInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRURoutingViewController sessionDidDisconnect:]
  -[MRURoutingViewController stylingProvider]
  -[MRURoutingViewController groupSliderCoordinator]
  -[MRURoutingViewController _collapseAllGroups]
  -[MRURoutingViewController metadataControllerRouteDidUpdate:]
  -[MRURoutingViewController setGroupSliderCoordinator:]
  -[MRURoutingViewController setCarPlaySessionStatus:]
  -[MRURoutingViewController setIndexedMetadataControllers:]
  -[MRURoutingViewController updateSubtitle]
  -[MRURoutingViewController groupUIDForRoute:]
  -[MRURoutingViewController initWithRoutingController:]
  -[MRURoutingViewController setSortByIsVideoRoute:]
  -[MRURoutingViewController metadataControllerShouldAutomaticallyUpdateReponse:]
  -[MRURoutingViewController tableView:viewForHeaderInSection:]
  -[MRURoutingViewController _setNeedsDisplayedRoutesUpdate]
  -[MRURoutingViewController updateHeaderView:forSection:]
  -[MRURoutingViewController sortByIsVideoRoute]
  -[MRURoutingViewController setStateHandle:]
  -[MRURoutingViewController stateHandle]
  -[MRURoutingViewController _displayAsPickedRoutesInRoutes:]
  -[MRURoutingViewController tableView:heightForHeaderInSection:]
  -[MRURoutingViewController indexedMetadataControllers]
  -[MRURoutingViewController routingController:pickedRoutesDidChange:]
  -[MRURoutingViewController numberOfSectionsInTableView:]
  -[MRURoutingViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[MRURoutingViewController enqueueRefreshUpdate]
  -[MRURoutingViewController routingController]
  -[MRURoutingViewController tableView:numberOfRowsInSection:]
  -[MRURoutingViewController contentEdgeInsets]
  -[MRURoutingViewController setStylingProvider:]
  -[MRURoutingViewController scrollIndicatorInsets]
  -[MRURoutingViewController sessionDidConnect:]
  -[MRURoutingViewController outputDeviceVolumeSliders]
  -[MRURoutingViewController setSubtitleUpdateTimer:]
  -[MRURoutingViewController tableView:heightForRowAtIndexPath:]
  -[MRURoutingViewController updateExpandedGroups]
  -[MRURoutingViewController .cxx_destruct]
  -[MRURoutingViewController routesContainAirPlayGroupableRoute:]
  -[MRURoutingViewController discoveryMode]
  -[MRURoutingViewController setExpandedItemUIDs:]
  -[MRURoutingViewController routesContainMultipleBuiltIn:]
  -[MRURoutingViewController setOutputDeviceVolumeSliders:]
  -[MRURoutingViewController tableView:didSelectRowAtIndexPath:]
  -[MRURoutingViewController viewDidLoad]
  -[MRURoutingViewController _setNeedsRouteDiscoveryModeUpdate]
  -[MRURoutingViewController tableView:shouldHaveFullLengthBottomSeparatorForSection:]
  -[MRURoutingViewController metadataController:didLoadNewResponse:]
  -[MRURoutingViewController _enqueueUpdate:]
  -[MRURoutingViewController tableView:cellForRowAtIndexPath:]
  -[MRURoutingViewController didReceiveInteraction:]
  -[MRURoutingViewController routingController:didFailToPickRouteWithError:]
  -[MRURoutingViewController setContentEdgeInsets:]
  -[MRURoutingViewController setDelegate:]
  -[MRURoutingViewController _setupUpdateTimerIfNecessary]
  -[MRURoutingViewController _updateDisplayedRoutes]
  -[MRURoutingViewController subtitleUpdateTimer]
  -[MRURoutingViewController updateMetadataForController:]
  -[MRURoutingViewController init]
  -[MRURoutingViewController setShowMetadataForEndpointRoute:]
  -[MRURoutingViewController updateMetadataControllersForRoutes:]
  -[MRURoutingViewController _stateDumpObject]
  -[MRURoutingViewController setOnScreen:]
  -[MRURoutingViewController percentageFormatter]
  -[MRURoutingViewController _createSectionedCollection:withPickedRoutes:]
  -[MRURoutingViewController volumeSliderVolumeControlAvailabilityDidChangeNotification:]
  -[MRURoutingViewController isInCarPlay]
  -[MRURoutingViewController _fullStateDumpObject]
  -[MRURoutingViewController _displayableRoutesInRoutes:]
  -[MRURoutingViewController _applyUpdate:]
  -[MRURoutingViewController viewWillDisappear:]
  -[MRURoutingViewController setDiscoveryMode:]
  -[MRURoutingViewController _collapseAllGroupsAfterDelay]
  -[MRURoutingViewController endpointGroupUID]
  -[MRURoutingViewController setExpandedGroupUIDs:]
  -[MRURoutingViewController _operationRequiresOptimisticState:routes:]
  -[MRURoutingViewController viewWillAppear:]
  -[MRURoutingViewController _diplayShareAudioDisabledAlertForReason:]
  -[MRURoutingViewController setOptimisticUpdate:]
  -[MRURoutingViewController updateMetadata]
  -[MRURoutingViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[MRURoutingViewController routingControllerAvailableRoutesDidChange:]
  -[MRURoutingViewController routingCellDidTapToExpand:]
  -[MRURoutingViewController setPercentageFormatter:]
  -[MRURoutingViewController delegate]
  -[MRURoutingViewController updateCell:forIndexPath:]
  -[MRURoutingViewController _wouldShareAudioForPickedRoute:operation:pickedRoutes:]
  -[MRURoutingViewController routesContainSplitterCapableRoute:]
  -[MRURoutingViewController _createRefreshUpdate]
  -[MRURoutingViewController setScrollIndicatorInsets:]
  -[MRURoutingViewController endpointRoute]
  -[MRURoutingViewController setNeedsDisplayedRoutesUpdate:]
  -[MRURoutingViewController hasCarKitRoute]
  -[MRURoutingViewController resetDisplayedRoutes]
  -[MRURoutingViewController expandedItemUIDs]
  -[MRURoutingViewController _createRoutingViewItemsForRoutes:]
  -[MRURoutingViewController dealloc]
  -[MRURoutingViewController onScreen]
  -[MRURoutingViewController metadataControllers]
  -[MRURoutingViewController _createReloadUpdate]
  -[MRURoutingViewController needsDisplayedRoutesUpdate]
  -[MRURoutingViewController collapseTimer]
  -[MRURoutingViewController showMetadataForEndpointRoute]
  -[MRURoutingViewController isInVehicle]
  -[MRURoutingViewController subtitleAccessoryForItem:metadataController:]
  -[MRURoutingViewController loadView]
  -[MRURoutingViewController routingController:shouldHijackRoute:alertStyle:busyRouteName:presentingAppName:completion:]
  -[MRURoutingViewController setCollapseTimer:]
  -[MRURoutingViewController carPlaySessionStatus]
  -[MRURoutingViewController viewDidDisappear:]
  -[MRURoutingViewController _createUpdateWithCompletion:]
  -[MRURoutingViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[MRURoutingViewController setMetadataControllers:]
  -[MRURoutingViewController expandedGroupUIDs]
  -[MRURoutingViewController setEndpointRoute:]
  -[MRURoutingViewController _canShowWhileLocked]


MRUTVRemoteController : NSObject <_MCStateDumpPropertyListTransformable>
 @property  MediaControlsEndpointController *endpointController
 @property  NSString *mediaRemoteIdentifier
 @property  NSString *airplayIdentifier
 @property  BOOL shouldShowTVRemoteButton
 @property  BOOL isCoverSheet
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUTVRemoteController setIsCoverSheet:]
  -[MRUTVRemoteController endpointController]
  -[MRUTVRemoteController .cxx_destruct]
  -[MRUTVRemoteController airplayIdentifier]
  -[MRUTVRemoteController presentLanguageOptionsAtCenter:completion:]
  -[MRUTVRemoteController shouldShowTVRemoteButton]
  -[MRUTVRemoteController presentTVRemote]
  -[MRUTVRemoteController mediaRemoteIdentifier]
  -[MRUTVRemoteController _stateDumpObject]
  -[MRUTVRemoteController initWithEndpointController:]
  -[MRUTVRemoteController prewarmIfNeeded]
  -[MRUTVRemoteController isCoverSheet]


MRUUpNextCellCell : UITableViewCell
 @property  UIImageView *artworkView
 @property  NSString *title
 @property  NSString *subtitle
 @property  MPArtworkCatalog *artworkCatalog

  // instance methods
  -[MRUUpNextCellCell setTitle:]
  -[MRUUpNextCellCell .cxx_destruct]
  -[MRUUpNextCellCell setSubtitle:]
  -[MRUUpNextCellCell artworkView]
  -[MRUUpNextCellCell prepareForReuse]
  -[MRUUpNextCellCell subtitle]
  -[MRUUpNextCellCell title]
  -[MRUUpNextCellCell initWithStyle:reuseIdentifier:]
  -[MRUUpNextCellCell artworkCatalog]
  -[MRUUpNextCellCell setArtworkView:]
  -[MRUUpNextCellCell setArtworkCatalog:]


MediaControlsStyleCoordinator : NSObject
  // instance methods
  -[MediaControlsStyleCoordinator animateAlongsideTransition:completion:]
  -[MediaControlsStyleCoordinator .cxx_destruct]
  -[MediaControlsStyleCoordinator performAnimations]
  -[MediaControlsStyleCoordinator performCompletions]


MRUVisualStylingProvider : NSObject <MTVisualStylingProviderObservingPrivate>
 @property  NSHashTable *observers
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  UIColor *primaryColor
 @property  UIColor *secondaryColor
 @property  UIColor *tertiaryColor
 @property  UIColor *quaternaryColor
 @property  UIColor *separatorColor
 @property  BOOL supportsVibrancy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUVisualStylingProvider notifyObservers]
  -[MRUVisualStylingProvider secondaryColor]
  -[MRUVisualStylingProvider tertiaryColor]
  -[MRUVisualStylingProvider quaternaryColor]
  -[MRUVisualStylingProvider setPrimaryColor:]
  -[MRUVisualStylingProvider setSeparatorColor:]
  -[MRUVisualStylingProvider primaryColor]
  -[MRUVisualStylingProvider separatorColor]
  -[MRUVisualStylingProvider setTertiaryColor:]
  -[MRUVisualStylingProvider blendModeForNowPlayingStyle:]
  -[MRUVisualStylingProvider setQuaternaryColor:]
  -[MRUVisualStylingProvider .cxx_destruct]
  -[MRUVisualStylingProvider setSecondaryColor:]
  -[MRUVisualStylingProvider providedStylesDidChangeForProvider:]
  -[MRUVisualStylingProvider alphaForNowPlayingStyle:]
  -[MRUVisualStylingProvider setObservers:]
  -[MRUVisualStylingProvider visualStyleForNowPlayingStyle:]
  -[MRUVisualStylingProvider init]
  -[MRUVisualStylingProvider setSupportsVibrancy:]
  -[MRUVisualStylingProvider supportsVibrancy]
  -[MRUVisualStylingProvider colorForNowPlayingStyle:]
  -[MRUVisualStylingProvider setVisualStylingProvider:]
  -[MRUVisualStylingProvider addObserver:]
  -[MRUVisualStylingProvider applyStyle:withBlock:]
  -[MRUVisualStylingProvider applyStyle:toView:]
  -[MRUVisualStylingProvider observers]
  -[MRUVisualStylingProvider initWithVisualStylingProvider:]
  -[MRUVisualStylingProvider removeObserver:]
  -[MRUVisualStylingProvider visualStylingProvider]


MediaControlsRoutingCornerView : CCUICAPackageView <_UICursorInteractionDelegate>
 @property  long long deviceType
 @property  BOOL routesAvailable
 @property  BOOL routing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsRoutingCornerView cursorInteraction:styleForRegion:modifiers:]
  -[MediaControlsRoutingCornerView deviceType]
  -[MediaControlsRoutingCornerView routesAreAvailable]
  -[MediaControlsRoutingCornerView setRoutesAvailable:]
  -[MediaControlsRoutingCornerView setDeviceType:]
  -[MediaControlsRoutingCornerView initWithFrame:]
  -[MediaControlsRoutingCornerView isRouting]
  -[MediaControlsRoutingCornerView _updateGlyph]
  -[MediaControlsRoutingCornerView cursorInteraction:regionForLocation:defaultRegion:]
  -[MediaControlsRoutingCornerView setRouting:]


MRUViewServiceRoutingHeaderView : UIView <MRUVisualStylingProviderObserver>
 @property  UIImageView *imageView
 @property  UILabel *titleLabel
 @property  UIView *separatorView
 @property  NSString *title
 @property  UIImage *image
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUViewServiceRoutingHeaderView stylingProvider]
  -[MRUViewServiceRoutingHeaderView titleLabel]
  -[MRUViewServiceRoutingHeaderView imageView]
  -[MRUViewServiceRoutingHeaderView updateContentSizeCategory]
  -[MRUViewServiceRoutingHeaderView setTitle:]
  -[MRUViewServiceRoutingHeaderView image]
  -[MRUViewServiceRoutingHeaderView setStylingProvider:]
  -[MRUViewServiceRoutingHeaderView .cxx_destruct]
  -[MRUViewServiceRoutingHeaderView setTitleLabel:]
  -[MRUViewServiceRoutingHeaderView layoutSubviews]
  -[MRUViewServiceRoutingHeaderView visualStylingProviderDidChange:]
  -[MRUViewServiceRoutingHeaderView updateVisualStyling]
  -[MRUViewServiceRoutingHeaderView sizeThatFits:]
  -[MRUViewServiceRoutingHeaderView setSeparatorView:]
  -[MRUViewServiceRoutingHeaderView title]
  -[MRUViewServiceRoutingHeaderView initWithFrame:]
  -[MRUViewServiceRoutingHeaderView setImage:]
  -[MRUViewServiceRoutingHeaderView separatorView]
  -[MRUViewServiceRoutingHeaderView setImageView:]


MRUNowPlayingTimeControlsView : UIControl <MRUVisualStylingProviderObserver>
 @property  UIView *elapsedTrack
 @property  UIView *remainingTrack
 @property  UIView *knobView
 @property  UILabel *elapsedTimeLabel
 @property  UILabel *remainingTimeLabel
 @property  UILabel *liveLabel
 @property  UIView *liveBackground
 @property  CAGradientLayer *liveBackgroundMask
 @property  CADisplayLink *displayLink
 @property  AVTimeFormatter *elapsedTimeFormatter
 @property  AVTimeFormatter *remainingTimeFormatter
 @property  {?=dddddffBB} durationSnapshot
 @property  double elapsedTimeFactor
 @property  BOOL debugPreviousDisplayLinkPaused
 @property  MPCPlayerResponseItem *playerResponseItem
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long context
 @property  BOOL onScreen
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUNowPlayingTimeControlsView continueTrackingWithTouch:withEvent:]
  -[MRUNowPlayingTimeControlsView stylingProvider]
  -[MRUNowPlayingTimeControlsView remainingTrack]
  -[MRUNowPlayingTimeControlsView setRemainingTimeLabel:]
  -[MRUNowPlayingTimeControlsView setDurationSnapshot:]
  -[MRUNowPlayingTimeControlsView updateContentSizeCategory]
  -[MRUNowPlayingTimeControlsView setDisplayLink:]
  -[MRUNowPlayingTimeControlsView setLiveBackground:]
  -[MRUNowPlayingTimeControlsView isOnScreen]
  -[MRUNowPlayingTimeControlsView setStylingProvider:]
  -[MRUNowPlayingTimeControlsView setKnobView:]
  -[MRUNowPlayingTimeControlsView elapsedTimeFactor]
  -[MRUNowPlayingTimeControlsView .cxx_destruct]
  -[MRUNowPlayingTimeControlsView layoutSubviews]
  -[MRUNowPlayingTimeControlsView touchesBegan:withEvent:]
  -[MRUNowPlayingTimeControlsView setElapsedTimeFormatter:]
  -[MRUNowPlayingTimeControlsView elapsedTrack]
  -[MRUNowPlayingTimeControlsView remainingTimeFormatter]
  -[MRUNowPlayingTimeControlsView updateDisplayLinkPaused]
  -[MRUNowPlayingTimeControlsView remainingTimeLabel]
  -[MRUNowPlayingTimeControlsView updateElapsedTimeWithElapsedTime:]
  -[MRUNowPlayingTimeControlsView setElapsedTrack:]
  -[MRUNowPlayingTimeControlsView liveBackground]
  -[MRUNowPlayingTimeControlsView elapsedTimeLabel]
  -[MRUNowPlayingTimeControlsView setOnScreen:]
  -[MRUNowPlayingTimeControlsView visualStylingProviderDidChange:]
  -[MRUNowPlayingTimeControlsView displayLink]
  -[MRUNowPlayingTimeControlsView updateVisualStyling]
  -[MRUNowPlayingTimeControlsView sizeThatFits:]
  -[MRUNowPlayingTimeControlsView gestureRecognizerShouldBegin:]
  -[MRUNowPlayingTimeControlsView setPlayerResponseItem:]
  -[MRUNowPlayingTimeControlsView liveBackgroundMask]
  -[MRUNowPlayingTimeControlsView updateBackgroundMask]
  -[MRUNowPlayingTimeControlsView updateVisibility]
  -[MRUNowPlayingTimeControlsView elapsedTimeFormatter]
  -[MRUNowPlayingTimeControlsView debugPreviousDisplayLinkPaused]
  -[MRUNowPlayingTimeControlsView setElapsedTimeLabel:]
  -[MRUNowPlayingTimeControlsView animateLayout]
  -[MRUNowPlayingTimeControlsView setRemainingTimeFormatter:]
  -[MRUNowPlayingTimeControlsView initWithFrame:]
  -[MRUNowPlayingTimeControlsView pointInside:withEvent:]
  -[MRUNowPlayingTimeControlsView accessibilityTotalDuration]
  -[MRUNowPlayingTimeControlsView setContext:]
  -[MRUNowPlayingTimeControlsView updateElapsedTime]
  -[MRUNowPlayingTimeControlsView cancelTrackingWithEvent:]
  -[MRUNowPlayingTimeControlsView playerResponseItem]
  -[MRUNowPlayingTimeControlsView endTrackingWithTouch:withEvent:]
  -[MRUNowPlayingTimeControlsView setRemainingTrack:]
  -[MRUNowPlayingTimeControlsView updateDisplayLink]
  -[MRUNowPlayingTimeControlsView durationSnapshot]
  -[MRUNowPlayingTimeControlsView setEnabled:]
  -[MRUNowPlayingTimeControlsView beginTrackingWithTouch:withEvent:]
  -[MRUNowPlayingTimeControlsView setDebugPreviousDisplayLinkPaused:]
  -[MRUNowPlayingTimeControlsView setLiveLabel:]
  -[MRUNowPlayingTimeControlsView setLiveBackgroundMask:]
  -[MRUNowPlayingTimeControlsView setElapsedTimeFactor:]
  -[MRUNowPlayingTimeControlsView updateElapsedTimeOnDisplayLinkTick:]
  -[MRUNowPlayingTimeControlsView accessibilityElapsedDuration]
  -[MRUNowPlayingTimeControlsView liveLabel]
  -[MRUNowPlayingTimeControlsView knobView]
  -[MRUNowPlayingTimeControlsView context]


MRURoutingSubtitleView : UIView <MRUVisualStylingProviderObserver>
 @property  UILabel *textLabel
 @property  MRUEqualizerView *equalizerView
 @property  long long state
 @property  NSString *text
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRURoutingSubtitleView stylingProvider]
  -[MRURoutingSubtitleView setText:]
  -[MRURoutingSubtitleView updateContentSizeCategory]
  -[MRURoutingSubtitleView setStylingProvider:]
  -[MRURoutingSubtitleView .cxx_destruct]
  -[MRURoutingSubtitleView layoutSubviews]
  -[MRURoutingSubtitleView setState:]
  -[MRURoutingSubtitleView visualStylingProviderDidChange:]
  -[MRURoutingSubtitleView updateVisualStyling]
  -[MRURoutingSubtitleView sizeThatFits:]
  -[MRURoutingSubtitleView prepareForReuse]
  -[MRURoutingSubtitleView state]
  -[MRURoutingSubtitleView updateVisibility]
  -[MRURoutingSubtitleView initWithFrame:]
  -[MRURoutingSubtitleView setTextLabel:]
  -[MRURoutingSubtitleView textLabel]
  -[MRURoutingSubtitleView text]
  -[MRURoutingSubtitleView equalizerView]
  -[MRURoutingSubtitleView setEqualizerView:]


MediaControlsVolumeController : NSObject <MPVolumeControllerDelegate>
 @property  MPAVEndpointRoute *systemRoute
 @property  NSHashTable *observers
 @property  MPVolumeController *systemVolumeController
 @property  MPVolumeController *primaryVolumeController
 @property  MPVolumeController *secondaryVolumeController
 @property  MPAVOutputDeviceRoute *primaryOutputDeviceRoute
 @property  MPAVOutputDeviceRoute *secondaryOutputDeviceRoute
 @property  BOOL primaryInteractionEnabled
 @property  BOOL secondaryInteractionEnabled
 @property  BOOL isSplitRoute
 @property  BOOL supportsHeadTrackedSpatialAudio
 @property  BOOL headTrackedSpatialAudioActive
 @property  NSString *volumeAudioCategory
 @property  MPAVOutputDeviceRoute *systemOutputDeviceRoute
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsVolumeController isDefaultPackage:]

  // instance methods
  -[MediaControlsVolumeController supportsHeadTrackedSpatialAudio]
  -[MediaControlsVolumeController isHeadTrackedSpatialAudioActive]
  -[MediaControlsVolumeController volumeAudioCategory]
  -[MediaControlsVolumeController .cxx_destruct]
  -[MediaControlsVolumeController setVolumeAudioCategory:]
  -[MediaControlsVolumeController setObservers:]
  -[MediaControlsVolumeController init]
  -[MediaControlsVolumeController isSplitRoute]
  -[MediaControlsVolumeController addObserver:]
  -[MediaControlsVolumeController volumeController:volumeControlAvailableDidChange:]
  -[MediaControlsVolumeController systemRoute]
  -[MediaControlsVolumeController observers]
  -[MediaControlsVolumeController removeObserver:]
  -[MediaControlsVolumeController volumeController:volumeValueDidChange:]
  -[MediaControlsVolumeController routeDidChangeNotification]
  -[MediaControlsVolumeController _setupOutputDevicesAndVolumeControllersIfNeeded]
  -[MediaControlsVolumeController _packageNameForRoute:isRTL:isSlider:]
  -[MediaControlsVolumeController currentBluetoothListeningModeForRouteType:]
  -[MediaControlsVolumeController _notifyUserInteractionEnabledChanged:routeType:]
  -[MediaControlsVolumeController _notifyVolumeChangedForVolumeController:volumeControlAvailable:effectiveVolume:]
  -[MediaControlsVolumeController _routeForVolumeController:]
  -[MediaControlsVolumeController _volumePackageNameForClusterRoute:isRTL:]
  -[MediaControlsVolumeController _volumePackageNameForRTL:]
  -[MediaControlsVolumeController outputeDeviceForRouteType:]
  -[MediaControlsVolumeController routeNameForRouteType:]
  -[MediaControlsVolumeController packageNameForRouteType:isRTL:isSlider:]
  -[MediaControlsVolumeController glyphStateForVolumeLevel:packageName:]
  -[MediaControlsVolumeController setCurrentBluetoothListeningModeForRouteType:bluetoothListeningMode:]
  -[MediaControlsVolumeController availableBluetoothListeningModeForRouteType:]
  -[MediaControlsVolumeController logFailedSetBluetoothListeningMode:forRouteType:]
  -[MediaControlsVolumeController headTrackedSpatialAudioModeForRouteType:]
  -[MediaControlsVolumeController setHeadTrackedSpatialAudioMode:forRouteType:]
  -[MediaControlsVolumeController volumeForRouteType:]
  -[MediaControlsVolumeController volumeControlAvailableForRouteType:]
  -[MediaControlsVolumeController setVolume:forRouteType:]
  -[MediaControlsVolumeController userInteractionEnabledForRouteType:]
  -[MediaControlsVolumeController setUserInteractionEnabled:forRouteType:]
  -[MediaControlsVolumeController outputContextDescription]
  -[MediaControlsVolumeController systemOutputDeviceRoute]
  -[MediaControlsVolumeController setSystemRoute:]
  -[MediaControlsVolumeController systemVolumeController]
  -[MediaControlsVolumeController setSystemVolumeController:]
  -[MediaControlsVolumeController primaryVolumeController]
  -[MediaControlsVolumeController setPrimaryVolumeController:]
  -[MediaControlsVolumeController secondaryVolumeController]
  -[MediaControlsVolumeController setSecondaryVolumeController:]
  -[MediaControlsVolumeController primaryOutputDeviceRoute]
  -[MediaControlsVolumeController setPrimaryOutputDeviceRoute:]
  -[MediaControlsVolumeController secondaryOutputDeviceRoute]
  -[MediaControlsVolumeController setSecondaryOutputDeviceRoute:]
  -[MediaControlsVolumeController primaryInteractionEnabled]
  -[MediaControlsVolumeController setPrimaryInteractionEnabled:]
  -[MediaControlsVolumeController secondaryInteractionEnabled]
  -[MediaControlsVolumeController setSecondaryInteractionEnabled:]


MRUUpNextPicker : UIView <UITableViewDelegate, MRUUpNextDataSourceDelegate, MRUDiffableDataSourceDelegate>
 @property  UITableView *tableView
 @property  MRUDiffableDataSource *diffableDataSource
 @property  MRUUpNextDataSource *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUUpNextPicker setTableView:]
  -[MRUUpNextPicker .cxx_destruct]
  -[MRUUpNextPicker diffableDataSource]
  -[MRUUpNextPicker tableView:willSelectRowAtIndexPath:]
  -[MRUUpNextPicker tableView:didSelectRowAtIndexPath:]
  -[MRUUpNextPicker layoutSubviews]
  -[MRUUpNextPicker tableView:shouldIndentWhileEditingRowAtIndexPath:]
  -[MRUUpNextPicker dataSource]
  -[MRUUpNextPicker setDiffableDataSource:]
  -[MRUUpNextPicker tableView]
  -[MRUUpNextPicker tableView:editingStyleForRowAtIndexPath:]
  -[MRUUpNextPicker configureCell:forSong:]
  -[MRUUpNextPicker configureCell:forTVEpisode:]
  -[MRUUpNextPicker configureCell:forMovie:]
  -[MRUUpNextPicker updateDiffableDataSourceAnimated:]
  -[MRUUpNextPicker upNextDataSource:didChangeResponseItemIDs:]
  -[MRUUpNextPicker dataSource:didDeleteItemWithIdentifier:]
  -[MRUUpNextPicker dataSource:moveItemWithIdentifier:aferIndentifier:]
  -[MRUUpNextPicker dataSource:moveItemToTopWithIdentifier:]
  -[MRUUpNextPicker initWithFrame:dataSource:]
  -[MRUUpNextPicker reponseItemForIndexPath:]


MRUNowPlayingControlsView : UIView
 @property  MRUNowPlayingHeaderView *headerView
 @property  MRUNowPlayingTimeControlsView *timeControlsView
 @property  MRUNowPlayingTransportControlsView *transportControlsView
 @property  MRUNowPlayingVolumeControlsView *volumeControlsView
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long layout
 @property  long long context
 @property  BOOL showTimeControlsView
 @property  BOOL showTransportControlsView
 @property  BOOL supportsHorizontalLayout

  // instance methods
  -[MRUNowPlayingControlsView stylingProvider]
  -[MRUNowPlayingControlsView setStylingProvider:]
  -[MRUNowPlayingControlsView .cxx_destruct]
  -[MRUNowPlayingControlsView layoutSubviews]
  -[MRUNowPlayingControlsView setShowTimeControlsView:]
  -[MRUNowPlayingControlsView setSupportsHorizontalLayout:]
  -[MRUNowPlayingControlsView showTransportControlsView]
  -[MRUNowPlayingControlsView sizeThatFits:]
  -[MRUNowPlayingControlsView timeControlsView]
  -[MRUNowPlayingControlsView transportControlsView]
  -[MRUNowPlayingControlsView updateVisibility]
  -[MRUNowPlayingControlsView showTimeControlsView]
  -[MRUNowPlayingControlsView headerView]
  -[MRUNowPlayingControlsView initWithFrame:]
  -[MRUNowPlayingControlsView setShowTransportControlsView:]
  -[MRUNowPlayingControlsView didMoveToWindow]
  -[MRUNowPlayingControlsView setContext:]
  -[MRUNowPlayingControlsView setLayout:]
  -[MRUNowPlayingControlsView updateTimeControlVisibility:]
  -[MRUNowPlayingControlsView volumeControlsView]
  -[MRUNowPlayingControlsView supportsHorizontalLayout]
  -[MRUNowPlayingControlsView layout]
  -[MRUNowPlayingControlsView context]


MRURoutingHeaderView : UITableViewHeaderFooterView <MRUVisualStylingProviderObserver>
 @property  UILabel *titleLabel
 @property  UIView *separatorView
 @property  NSString *title
 @property  MRUVisualStylingProvider *stylingProvider
 @property  {UIEdgeInsets=dddd} contentEdgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRURoutingHeaderView stylingProvider]
  -[MRURoutingHeaderView titleLabel]
  -[MRURoutingHeaderView updateContentSizeCategory]
  -[MRURoutingHeaderView setTitle:]
  -[MRURoutingHeaderView contentEdgeInsets]
  -[MRURoutingHeaderView setStylingProvider:]
  -[MRURoutingHeaderView .cxx_destruct]
  -[MRURoutingHeaderView setTitleLabel:]
  -[MRURoutingHeaderView layoutSubviews]
  -[MRURoutingHeaderView setContentEdgeInsets:]
  -[MRURoutingHeaderView visualStylingProviderDidChange:]
  -[MRURoutingHeaderView updateVisualStyling]
  -[MRURoutingHeaderView sizeThatFits:]
  -[MRURoutingHeaderView setSeparatorView:]
  -[MRURoutingHeaderView title]
  -[MRURoutingHeaderView initWithReuseIdentifier:]
  -[MRURoutingHeaderView separatorView]


MRUNowPlayingRoutingButton : MPButton <UIPointerInteractionDelegate>
 @property  CCUICAPackageView *packageView
 @property  long long deviceType
 @property  BOOL active
 @property  long long context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUNowPlayingRoutingButton setHighlighted:]
  -[MRUNowPlayingRoutingButton pointerInteraction:styleForRegion:]
  -[MRUNowPlayingRoutingButton deviceType]
  -[MRUNowPlayingRoutingButton traitCollectionDidChange:]
  -[MRUNowPlayingRoutingButton isActive]
  -[MRUNowPlayingRoutingButton .cxx_destruct]
  -[MRUNowPlayingRoutingButton updatePackageState]
  -[MRUNowPlayingRoutingButton layoutSubviews]
  -[MRUNowPlayingRoutingButton setSelected:]
  -[MRUNowPlayingRoutingButton setDeviceType:]
  -[MRUNowPlayingRoutingButton sizeThatFits:]
  -[MRUNowPlayingRoutingButton initWithFrame:]
  -[MRUNowPlayingRoutingButton setActive:]
  -[MRUNowPlayingRoutingButton packageView]
  -[MRUNowPlayingRoutingButton updatePackage]
  -[MRUNowPlayingRoutingButton setContext:]
  -[MRUNowPlayingRoutingButton setPackageView:]
  -[MRUNowPlayingRoutingButton pointerInteraction:regionForRequest:defaultRegion:]
  -[MRUNowPlayingRoutingButton context]


MRUViewServiceContainerViewController : UIViewController <UIViewControllerTransitioningDelegate, UIPopoverPresentationControllerDelegate, MRUViewServiceRoutingViewControllerDelegate, MRUViewServiceViewController>
 @property  MRUViewServiceRoutingViewController *routingViewController
 @property  UIView *sourceView
 @property  MTMaterialView *materialView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPMediaControlsConfiguration *configuration
 @property  @? dismissalBlock

  // instance methods
  -[MRUViewServiceContainerViewController presentationControllerDidDismiss:]
  -[MRUViewServiceContainerViewController prefersStatusBarHidden]
  -[MRUViewServiceContainerViewController setSourceView:]
  -[MRUViewServiceContainerViewController setMaterialView:]
  -[MRUViewServiceContainerViewController routingViewController]
  -[MRUViewServiceContainerViewController prepareForPopoverPresentation:]
  -[MRUViewServiceContainerViewController configuration]
  -[MRUViewServiceContainerViewController .cxx_destruct]
  -[MRUViewServiceContainerViewController sourceView]
  -[MRUViewServiceContainerViewController viewDidLoad]
  -[MRUViewServiceContainerViewController materialView]
  -[MRUViewServiceContainerViewController init]
  -[MRUViewServiceContainerViewController presentationControllerWillDismiss:]
  -[MRUViewServiceContainerViewController presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]
  -[MRUViewServiceContainerViewController viewDidLayoutSubviews]
  -[MRUViewServiceContainerViewController dismissalBlock]
  -[MRUViewServiceContainerViewController setDismissalBlock:]
  -[MRUViewServiceContainerViewController _canShowWhileLocked]
  -[MRUViewServiceContainerViewController setConfiguration:]
  -[MRUViewServiceContainerViewController viewServiceRoutingViewControllerDidChangeSize:]
  -[MRUViewServiceContainerViewController viewServiceRoutingViewControllerDidDismiss:]
  -[MRUViewServiceContainerViewController setRoutingViewController:]
  -[MRUViewServiceContainerViewController shouldPresentUsingPopover]
  -[MRUViewServiceContainerViewController updateMaterialForPresenting:]
  -[MRUViewServiceContainerViewController transitionToVisible:animated:]


MRURoutingView : UIView
 @property  UITableView *tableView
 @property  {UIEdgeInsets=dddd} contentEdgeInsets

  // instance methods
  -[MRURoutingView setTableView:]
  -[MRURoutingView contentEdgeInsets]
  -[MRURoutingView .cxx_destruct]
  -[MRURoutingView layoutSubviews]
  -[MRURoutingView setContentEdgeInsets:]
  -[MRURoutingView sizeThatFits:]
  -[MRURoutingView tableView]
  -[MRURoutingView initWithFrame:]


MediaControlsTimeControl : UIControl <MTVisualStylingProviderObservingPrivate, UIGestureRecognizerDelegate>
 @property  UIView *elapsedTrack
 @property  UIView *remainingTrack
 @property  UIView *knobView
 @property  UILabel *elapsedTimeLabel
 @property  UILabel *remainingTimeLabel
 @property  UILabel *liveLabel
 @property  UIView *liveBackground
 @property  CAGradientLayer *liveBackgroundMask
 @property  UILayoutGuide *trackLayoutGuide
 @property  double sliderValue
 @property  BOOL currentlyTracking
 @property  BOOL transitioning
 @property  BOOL empty
 @property  long long style
 @property  MPCPlayerResponse *response
 @property  MPCPlayerResponseItem *responseItem
 @property  {?=dddddffBB} durationSnapshot
 @property  BOOL timeControlOnScreen
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsTimeControl continueTrackingWithTouch:withEvent:]
  -[MediaControlsTimeControl remainingTrack]
  -[MediaControlsTimeControl setEmpty:]
  -[MediaControlsTimeControl setRemainingTimeLabel:]
  -[MediaControlsTimeControl setDurationSnapshot:]
  -[MediaControlsTimeControl traitCollectionDidChange:]
  -[MediaControlsTimeControl isEmpty]
  -[MediaControlsTimeControl setLiveBackground:]
  -[MediaControlsTimeControl gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[MediaControlsTimeControl setKnobView:]
  -[MediaControlsTimeControl .cxx_destruct]
  -[MediaControlsTimeControl setStyle:]
  -[MediaControlsTimeControl layoutSubviews]
  -[MediaControlsTimeControl elapsedTrack]
  -[MediaControlsTimeControl providedStylesDidChangeForProvider:]
  -[MediaControlsTimeControl tintColorDidChange]
  -[MediaControlsTimeControl remainingTimeLabel]
  -[MediaControlsTimeControl setElapsedTrack:]
  -[MediaControlsTimeControl _displayLinkTick:]
  -[MediaControlsTimeControl liveBackground]
  -[MediaControlsTimeControl elapsedTimeLabel]
  -[MediaControlsTimeControl _updateStyle]
  -[MediaControlsTimeControl sizeThatFits:]
  -[MediaControlsTimeControl gestureRecognizerShouldBegin:]
  -[MediaControlsTimeControl setVisualStylingProvider:]
  -[MediaControlsTimeControl liveBackgroundMask]
  -[MediaControlsTimeControl trackLayoutGuide]
  -[MediaControlsTimeControl updateBackgroundMask]
  -[MediaControlsTimeControl setTransitioning:]
  -[MediaControlsTimeControl gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsTimeControl response]
  -[MediaControlsTimeControl setElapsedTimeLabel:]
  -[MediaControlsTimeControl initWithFrame:]
  -[MediaControlsTimeControl isTransitioning]
  -[MediaControlsTimeControl pointInside:withEvent:]
  -[MediaControlsTimeControl viewDidMoveToSuperview]
  -[MediaControlsTimeControl cancelTrackingWithEvent:]
  -[MediaControlsTimeControl endTrackingWithTouch:withEvent:]
  -[MediaControlsTimeControl setRemainingTrack:]
  -[MediaControlsTimeControl durationSnapshot]
  -[MediaControlsTimeControl visualStylingProvider]
  -[MediaControlsTimeControl setEnabled:]
  -[MediaControlsTimeControl beginTrackingWithTouch:withEvent:]
  -[MediaControlsTimeControl setLiveLabel:]
  -[MediaControlsTimeControl style]
  -[MediaControlsTimeControl setLiveBackgroundMask:]
  -[MediaControlsTimeControl liveLabel]
  -[MediaControlsTimeControl knobView]
  -[MediaControlsTimeControl setResponse:]
  -[MediaControlsTimeControl sliderValue]
  -[MediaControlsTimeControl setSliderValue:]
  -[MediaControlsTimeControl _updateSliderPosition]
  -[MediaControlsTimeControl setResponseItem:]
  -[MediaControlsTimeControl responseItem]
  -[MediaControlsTimeControl isCurrentlyTracking]
  -[MediaControlsTimeControl setTimeControlOnScreen:]
  -[MediaControlsTimeControl isTimeControlOnScreen]
  -[MediaControlsTimeControl _updateTimeControl]
  -[MediaControlsTimeControl updateSliderConstraint]
  -[MediaControlsTimeControl _updateLabels:withRemainingDuration:]
  -[MediaControlsTimeControl _updateDisplayLinkPause]
  -[MediaControlsTimeControl updateLabelAvoidance]
  -[MediaControlsTimeControl createDisplayLinkIfNeeded]
  -[MediaControlsTimeControl invalidateDisplayLinkIfNeeded]
  -[MediaControlsTimeControl _updateLabels:withTargetTimestamp:]
  -[MediaControlsTimeControl setTrackLayoutGuide:]
  -[MediaControlsTimeControl setCurrentlyTracking:]


MRUViewServiceProvider : NSObject
  // class methods
  +[MRUViewServiceProvider viewControllerForConfiguration:]


MRMediaControlsVideoPickerHeaderView : UIView
 @property  UIImageView *airPlayIconImageView
 @property  UILabel *titleLabel
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MRMediaControlsVideoPickerHeaderView titleLabel]
  -[MRMediaControlsVideoPickerHeaderView traitCollectionDidChange:]
  -[MRMediaControlsVideoPickerHeaderView .cxx_destruct]
  -[MRMediaControlsVideoPickerHeaderView setTitleLabel:]
  -[MRMediaControlsVideoPickerHeaderView layoutSubviews]
  -[MRMediaControlsVideoPickerHeaderView _updateStyle]
  -[MRMediaControlsVideoPickerHeaderView sizeThatFits:]
  -[MRMediaControlsVideoPickerHeaderView setVisualStylingProvider:]
  -[MRMediaControlsVideoPickerHeaderView initWithFrame:]
  -[MRMediaControlsVideoPickerHeaderView visualStylingProvider]
  -[MRMediaControlsVideoPickerHeaderView airPlayIconImageView]
  -[MRMediaControlsVideoPickerHeaderView setAirPlayIconImageView:]


MRUEmbeddingView : UIView
 @property  UIViewController *embeddedViewController
 @property  UIViewController *parent
 @property  BOOL active

  // instance methods
  -[MRUEmbeddingView removeViewController]
  -[MRUEmbeddingView setEmbeddedViewController:]
  -[MRUEmbeddingView isActive]
  -[MRUEmbeddingView .cxx_destruct]
  -[MRUEmbeddingView layoutSubviews]
  -[MRUEmbeddingView embedViewController:parent:]
  -[MRUEmbeddingView embeddedViewController]
  -[MRUEmbeddingView sizeThatFits:]
  -[MRUEmbeddingView showViewController]
  -[MRUEmbeddingView setParent:]
  -[MRUEmbeddingView parent]
  -[MRUEmbeddingView hideViewController]
  -[MRUEmbeddingView setActive:]


MRUEqualizerView : UIView <MRUVisualStylingProviderObserver>
 @property  NSArray *barViews
 @property  double width
 @property  double spacing
 @property  BOOL animating
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUEqualizerView stylingProvider]
  -[MRUEqualizerView width]
  -[MRUEqualizerView setWidth:]
  -[MRUEqualizerView setStylingProvider:]
  -[MRUEqualizerView .cxx_destruct]
  -[MRUEqualizerView setFrame:]
  -[MRUEqualizerView spacing]
  -[MRUEqualizerView layoutSubviews]
  -[MRUEqualizerView isAnimating]
  -[MRUEqualizerView visualStylingProviderDidChange:]
  -[MRUEqualizerView updateVisualStyling]
  -[MRUEqualizerView setAnimating:]
  -[MRUEqualizerView stopAnimating]
  -[MRUEqualizerView sizeThatFits:]
  -[MRUEqualizerView barViews]
  -[MRUEqualizerView startAnimating]
  -[MRUEqualizerView setSpacing:]
  -[MRUEqualizerView initWithNumberOfBars:width:spacing:]
  -[MRUEqualizerView updateBarHeights]
  -[MRUEqualizerView setBarViews:]


MRUTransportButton : MRUButton
 @property  NSString *identifier
 @property  MPCPlayerCommandRequest *touchUpInsideCommandRequest
 @property  MPCPlayerCommandRequest *holdBeginCommandRequest
 @property  MPCPlayerCommandRequest *holdEndCommandRequest
 @property  BOOL shouldPresentActionSheet

  // instance methods
  -[MRUTransportButton setTouchUpInsideCommandRequest:]
  -[MRUTransportButton .cxx_destruct]
  -[MRUTransportButton setShouldPresentActionSheet:]
  -[MRUTransportButton setHoldBeginCommandRequest:]
  -[MRUTransportButton holdEndCommandRequest]
  -[MRUTransportButton setHoldEndCommandRequest:]
  -[MRUTransportButton shouldPresentActionSheet]
  -[MRUTransportButton identifier]
  -[MRUTransportButton prepareForReuse]
  -[MRUTransportButton setIdentifier:]
  -[MRUTransportButton touchUpInsideCommandRequest]
  -[MRUTransportButton holdBeginCommandRequest]


MRUNowPlayingVolumeSlider : MRUVolumeSlider <UIGestureRecognizerDelegate>
 @property  long long syncState
 @property  UIImpactFeedbackGenerator *positiveFeedbackGenerator
 @property  UINotificationFeedbackGenerator *negativeFeedbackGenerator
 @property  UILongPressGestureRecognizer *longPressRecognizer
 @property  UIView *growingThumbView
 @property  double forcePercent
 @property  double initialX
 @property  BOOL syncingEnabled
 @property  <MRUNowPlayingVolumeSliderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUNowPlayingVolumeSlider continueTrackingWithTouch:withEvent:]
  -[MRUNowPlayingVolumeSlider setPositiveFeedbackGenerator:]
  -[MRUNowPlayingVolumeSlider longPressRecognizer]
  -[MRUNowPlayingVolumeSlider handleLongPress:]
  -[MRUNowPlayingVolumeSlider createThumbView]
  -[MRUNowPlayingVolumeSlider traitCollectionDidChange:]
  -[MRUNowPlayingVolumeSlider setSyncState:]
  -[MRUNowPlayingVolumeSlider setLongPressRecognizer:]
  -[MRUNowPlayingVolumeSlider .cxx_destruct]
  -[MRUNowPlayingVolumeSlider forcePercent]
  -[MRUNowPlayingVolumeSlider layoutSubviews]
  -[MRUNowPlayingVolumeSlider setNegativeFeedbackGenerator:]
  -[MRUNowPlayingVolumeSlider positiveFeedbackGenerator]
  -[MRUNowPlayingVolumeSlider growingThumbView]
  -[MRUNowPlayingVolumeSlider syncState]
  -[MRUNowPlayingVolumeSlider setDelegate:]
  -[MRUNowPlayingVolumeSlider isSyncingEnabled]
  -[MRUNowPlayingVolumeSlider shrinkThumbAfterDelay:]
  -[MRUNowPlayingVolumeSlider setSyncingEnabled:]
  -[MRUNowPlayingVolumeSlider gestureRecognizerShouldBegin:]
  -[MRUNowPlayingVolumeSlider negativeFeedbackGenerator]
  -[MRUNowPlayingVolumeSlider initWithFrame:]
  -[MRUNowPlayingVolumeSlider delegate]
  -[MRUNowPlayingVolumeSlider cancelTrackingWithEvent:]
  -[MRUNowPlayingVolumeSlider endTrackingWithTouch:withEvent:]
  -[MRUNowPlayingVolumeSlider initialX]
  -[MRUNowPlayingVolumeSlider setForcePercent:]
  -[MRUNowPlayingVolumeSlider beginTrackingWithTouch:withEvent:]
  -[MRUNowPlayingVolumeSlider setGrowingThumbView:]
  -[MRUNowPlayingVolumeSlider setInitialX:]


MediaControlsTransitioningDelegate : NSObject <UIViewControllerTransitioningDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsTransitioningDelegate animationControllerForPresentedController:presentingController:sourceController:]
  -[MediaControlsTransitioningDelegate animationControllerForDismissedController:]
  -[MediaControlsTransitioningDelegate presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]


MediaControlsPanelViewController : UIViewController
 @property  id delegate
 @property  MPAVRoutingViewController *routingViewController
 @property  UIView *backgroundView

  // class methods
  +[MediaControlsPanelViewController panelViewControllerForCoverSheet]

  // instance methods
  -[MediaControlsPanelViewController routingViewController]
  -[MediaControlsPanelViewController .cxx_destruct]
  -[MediaControlsPanelViewController setDelegate:]
  -[MediaControlsPanelViewController setBackgroundView:]
  -[MediaControlsPanelViewController delegate]
  -[MediaControlsPanelViewController backgroundView]
  -[MediaControlsPanelViewController setRoutingViewController:]


MediaControlsAnimationController : NSObject <UIViewControllerAnimatedTransitioning>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsAnimationController transitionDuration:]
  -[MediaControlsAnimationController animateTransition:]
  -[MediaControlsAnimationController initForPresenting:]


MRUAssetsProvider : NSObject
 @property  NSMutableDictionary *completionBlocks
 @property  NSCache *imageCache
 @property  NSCache *applicationCache
 @property  NSDate *purgeApplicationCacheDate

  // class methods
  +[MRUAssetsProvider phone]
  +[MRUAssetsProvider mac]
  +[MRUAssetsProvider hifiAndHomepodMini]
  +[MRUAssetsProvider mapImageNameNumberAware:]
  +[MRUAssetsProvider menu]
  +[MRUAssetsProvider volumeTrackWithHeight:]
  +[MRUAssetsProvider airpodsMax]
  +[MRUAssetsProvider mediaStick]
  +[MRUAssetsProvider packageDescriptionWithName:]
  +[MRUAssetsProvider play]
  +[MRUAssetsProvider hifiPair]
  +[MRUAssetsProvider systemImageNamedNumberAware:]
  +[MRUAssetsProvider mediaBox]
  +[MRUAssetsProvider display]
  +[MRUAssetsProvider routingOutline]
  +[MRUAssetsProvider routingAccessoryMultiDeselected]
  +[MRUAssetsProvider powerBeats]
  +[MRUAssetsProvider airpodsPro]
  +[MRUAssetsProvider beatsHeadphones]
  +[MRUAssetsProvider like]
  +[MRUAssetsProvider dislike]
  +[MRUAssetsProvider homepodMiniPair]
  +[MRUAssetsProvider controlOtherSpeakers]
  +[MRUAssetsProvider homepodMini]
  +[MRUAssetsProvider stop]
  +[MRUAssetsProvider homepodPair]
  +[MRUAssetsProvider goBackwardForTimeInterval:]
  +[MRUAssetsProvider airPlayControlAudioForInterfaceStyle:]
  +[MRUAssetsProvider homepod]
  +[MRUAssetsProvider wishlist]
  +[MRUAssetsProvider volumeThumbWithSize:]
  +[MRUAssetsProvider pause]
  +[MRUAssetsProvider powerBeatsPro]
  +[MRUAssetsProvider headphones]
  +[MRUAssetsProvider packageWithName:]
  +[MRUAssetsProvider airplay]
  +[MRUAssetsProvider tv]
  +[MRUAssetsProvider homepodAndAppleTV]
  +[MRUAssetsProvider homepodMiniAndAppleTV]
  +[MRUAssetsProvider volumeMin]
  +[MRUAssetsProvider sharedAssetsProvider]
  +[MRUAssetsProvider airPlayControlVideoForInterfaceStyle:]
  +[MRUAssetsProvider beats]
  +[MRUAssetsProvider homepodAndHomepodMini]
  +[MRUAssetsProvider hifiAndHomepod]
  +[MRUAssetsProvider bluetooth]
  +[MRUAssetsProvider sharing]
  +[MRUAssetsProvider airpods]
  +[MRUAssetsProvider tvRemote]
  +[MRUAssetsProvider forward]
  +[MRUAssetsProvider appletv]
  +[MRUAssetsProvider volumeMax]
  +[MRUAssetsProvider goForwardForTimeInterval:]
  +[MRUAssetsProvider backward]
  +[MRUAssetsProvider beatsEarphones]
  +[MRUAssetsProvider hifi]
  +[MRUAssetsProvider airplayVideo]
  +[MRUAssetsProvider hearingDevice]
  +[MRUAssetsProvider languageOptions]
  +[MRUAssetsProvider routingAccessoryMultiSelected]
  +[MRUAssetsProvider carplay]
  +[MRUAssetsProvider routingAccessorySelected]

  // instance methods
  -[MRUAssetsProvider completionBlocks]
  -[MRUAssetsProvider imageCache]
  -[MRUAssetsProvider .cxx_destruct]
  -[MRUAssetsProvider init]
  -[MRUAssetsProvider applicationIconForBundleIdentifier:]
  -[MRUAssetsProvider imageForURL:completion:]
  -[MRUAssetsProvider applicationCache]
  -[MRUAssetsProvider purgeApplicationCacheDate]
  -[MRUAssetsProvider setPurgeApplicationCacheDate:]


_MediaControlsNoopButtonEventConsumer : NSObject <SBSHardwareButtonEventConsuming>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MediaControlsNoopButtonEventConsumer consumeAnyPressEventForButtonKind:]


_MediaControlsHardwareVolumeManagerAssertion : NSObject <MediaControlsInvalidatable>
 @property  MediaControlsHardwareVolumeManager *volumeManager
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MediaControlsHardwareVolumeManagerAssertion .cxx_destruct]
  -[_MediaControlsHardwareVolumeManagerAssertion reason]
  -[_MediaControlsHardwareVolumeManagerAssertion setReason:]
  -[_MediaControlsHardwareVolumeManagerAssertion dealloc]
  -[_MediaControlsHardwareVolumeManagerAssertion invalidate]
  -[_MediaControlsHardwareVolumeManagerAssertion volumeManager]
  -[_MediaControlsHardwareVolumeManagerAssertion setVolumeManager:]


MediaControlsHardwareVolumeManager : NSObject
 @property  NSMapTable *assertions
 @property  NSArray *volumeButtonConsumerInvalidators

  // class methods
  +[MediaControlsHardwareVolumeManager sharedInstance]

  // instance methods
  -[MediaControlsHardwareVolumeManager unregisterClient:]
  -[MediaControlsHardwareVolumeManager .cxx_destruct]
  -[MediaControlsHardwareVolumeManager init]
  -[MediaControlsHardwareVolumeManager assertions]
  -[MediaControlsHardwareVolumeManager setAssertions:]
  -[MediaControlsHardwareVolumeManager registerClient:forRoute:]
  -[MediaControlsHardwareVolumeManager _updateVolumeControlsForRoute:]
  -[MediaControlsHardwareVolumeManager _relinquishHardwareVolumeButtons]
  -[MediaControlsHardwareVolumeManager _requestHardwareVolumeButtons]
  -[MediaControlsHardwareVolumeManager requestVolumeControlsForRoute:reason:]
  -[MediaControlsHardwareVolumeManager volumeButtonConsumerInvalidators]
  -[MediaControlsHardwareVolumeManager setVolumeButtonConsumerInvalidators:]


MediaControlsInteractionRecognizer : UIGestureRecognizer
 @property  MSVTimer *interactionTimer

  // instance methods
  -[MediaControlsInteractionRecognizer .cxx_destruct]
  -[MediaControlsInteractionRecognizer touchesBegan:withEvent:]
  -[MediaControlsInteractionRecognizer setInteractionTimer:]
  -[MediaControlsInteractionRecognizer touchesMoved:withEvent:]
  -[MediaControlsInteractionRecognizer interactionTimer]
  -[MediaControlsInteractionRecognizer touchesCancelled:withEvent:]
  -[MediaControlsInteractionRecognizer touchesEnded:withEvent:]


BoundsChangeAwareView : UIView
  // instance methods
  -[BoundsChangeAwareView setBounds:]


MRPlatterViewController : UIViewController <MediaControlsEndpointControllerDelegate, MediaControlsActionsDelegate, MPAVRoutingViewControllerDelegate, MPAVRoutingViewControllerThemeDelegate, MediaControlsMasterVolumeSliderDelegate, MediaControlsPanelViewControllerDelegate, MTVisualStylingRequiring, _MCStateDumpPropertyListTransformable, UIGestureRecognizerDelegate, MediaControlsCollectionItemViewController>
 @property  BOOL transitioning
 @property  MRMediaControlsVideoPickerFooterView *videoPickerFooterView
 @property  MRMediaControlsVideoPickerHeaderView *videoPickerHeaderView
 @property  MediaControlsRoutingCornerView *routingCornerView
 @property  MediaControlsParentContainerView *parentContainerView
 @property  MediaControlsVolumeContainerView *volumeContainerView
 @property  NSMutableArray *secondaryStringComponents
 @property  MPArtworkCatalog *artworkCatalog
 @property  BOOL onScreen
 @property  BOOL isListeningForResponse
 @property  MPVolumeGroupSliderCoordinator *groupSliderCoordinator
 @property  MPAVEndpointRoute *route
 @property  {CGSize=dd} lastKnownSize
 @property  MediaControlsTransitioningDelegate *transitioningDelegate
 @property  MediaControlsLanguageOptionsViewController *languageOptionsViewController
 @property  MPMediaControls *mediaControls
 @property  SFShareAudioViewController *shareAudioViewController
 @property  FBSDisplayLayoutMonitor *displayMonitor
 @property  NSArray *displayElements
 @property  BOOL deviceUnlocked
 @property  NSString *explicitString
 @property  BOOL failedToLoadArtwork
 @property  long long failedArtworkRetryCount
 @property  id volumeControlAssertion
 @property  MSVTimer *artworkTimer
 @property  NSString *label
 @property  unsigned long supportedModes
 @property  long long selectedMode
 @property  MediaControlsEndpointController *endpointController
 @property  @? routingCornerViewTappedBlock
 @property  MPAVRoutingViewController *routingViewController
 @property  MediaControlsHeaderView *nowPlayingHeaderView
 @property  UIView *effectiveHeaderView
 @property  UIView *effectiveFooterView
 @property  <MRPlatterViewControllerDelegate> *delegate
 @property  BOOL allowsNowPlayingAppLaunch
 @property  UIView *backgroundView
 @property  NSString *routeName
 @property  NSString *routeUID
 @property  BOOL shouldDisplayPlatter
 @property  long long style
 @property  double _continuousCornerRadius
 @property  NSString *placeholderString
 @property  NSString *placeholderDeviceIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *requiredVisualStyleCategories
 @property  UIView *contentView
 @property  BOOL selected

  // class methods
  +[MRPlatterViewController coverSheetPlatterViewController]

  // instance methods
  -[MRPlatterViewController initWithRouteUID:]
  -[MRPlatterViewController groupSliderCoordinator]
  -[MRPlatterViewController label]
  -[MRPlatterViewController routeName]
  -[MRPlatterViewController setGroupSliderCoordinator:]
  -[MRPlatterViewController mediaControls]
  -[MRPlatterViewController endpointController]
  -[MRPlatterViewController routeUID]
  -[MRPlatterViewController route]
  -[MRPlatterViewController setVisualStylingProvider:forCategory:]
  -[MRPlatterViewController placeholderString]
  -[MRPlatterViewController _route]
  -[MRPlatterViewController routingViewController]
  -[MRPlatterViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[MRPlatterViewController endpointControllerDidChangeState:]
  -[MRPlatterViewController isOnScreen]
  -[MRPlatterViewController _setContinuousCornerRadius:]
  -[MRPlatterViewController requiredVisualStyleCategories]
  -[MRPlatterViewController .cxx_destruct]
  -[MRPlatterViewController slider:syncStateWillChangeFromState:toState:]
  -[MRPlatterViewController didMoveToParentViewController:]
  -[MRPlatterViewController endpointControllerRouteDidUpdate:]
  -[MRPlatterViewController setStyle:]
  -[MRPlatterViewController viewDidLoad]
  -[MRPlatterViewController contentView]
  -[MRPlatterViewController visualStylingProviderForCategory:]
  -[MRPlatterViewController setDelegate:]
  -[MRPlatterViewController viewDidAppear:]
  -[MRPlatterViewController initWithNibName:bundle:]
  -[MRPlatterViewController endpointController:didLoadNewResponse:]
  -[MRPlatterViewController shouldAutomaticallyForwardAppearanceMethods]
  -[MRPlatterViewController _continuousCornerRadius]
  -[MRPlatterViewController routingViewController:didSelectRoutingViewItem:]
  -[MRPlatterViewController shouldEnableSyncingForSlider:]
  -[MRPlatterViewController shouldShowTVRemoteButton]
  -[MRPlatterViewController _updateStyle]
  -[MRPlatterViewController presentTVRemote]
  -[MRPlatterViewController _stateDumpObject]
  -[MRPlatterViewController setOnScreen:]
  -[MRPlatterViewController _updateConfiguration]
  -[MRPlatterViewController routingViewController:willDisplayCell:]
  -[MRPlatterViewController routingViewController:didPickRoute:]
  -[MRPlatterViewController setSelected:]
  -[MRPlatterViewController slider:shouldCancelSnapWithTouch:]
  -[MRPlatterViewController initWithStyle:]
  -[MRPlatterViewController lockScreenInternalRoutePickerOverrideWithDefaultStyle:]
  -[MRPlatterViewController lockScreenPresentsOverrideRoutePicker]
  -[MRPlatterViewController viewWillDisappear:]
  -[MRPlatterViewController isSelected]
  -[MRPlatterViewController selectedMode]
  -[MRPlatterViewController setTransitioning:]
  -[MRPlatterViewController displayMonitor]
  -[MRPlatterViewController viewDidLayoutSubviews]
  -[MRPlatterViewController isDeviceUnlocked]
  -[MRPlatterViewController setSelectedMode:]
  -[MRPlatterViewController viewWillAppear:]
  -[MRPlatterViewController layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[MRPlatterViewController setTransitioningDelegate:]
  -[MRPlatterViewController isTransitioning]
  -[MRPlatterViewController setBackgroundView:]
  -[MRPlatterViewController transitioningDelegate]
  -[MRPlatterViewController delegate]
  -[MRPlatterViewController setSelectedMode:animated:]
  -[MRPlatterViewController setRoute:]
  -[MRPlatterViewController artworkCatalog]
  -[MRPlatterViewController setRoutingCornerViewTappedBlock:]
  -[MRPlatterViewController dealloc]
  -[MRPlatterViewController setLabel:]
  -[MRPlatterViewController artworkTimer]
  -[MRPlatterViewController _isExpanded]
  -[MRPlatterViewController loadView]
  -[MRPlatterViewController routingCornerViewTappedBlock]
  -[MRPlatterViewController style]
  -[MRPlatterViewController initWithActiveRouteType:]
  -[MRPlatterViewController endpointControllerDidUpdateRoutingAvailability:]
  -[MRPlatterViewController setMediaControls:]
  -[MRPlatterViewController viewDidDisappear:]
  -[MRPlatterViewController setArtworkTimer:]
  -[MRPlatterViewController backgroundView]
  -[MRPlatterViewController _canShowWhileLocked]
  -[MRPlatterViewController setDisplayMonitor:]
  -[MRPlatterViewController supportedModes]
  -[MRPlatterViewController setSupportedModes:]
  -[MRPlatterViewController setArtworkCatalog:]
  -[MRPlatterViewController setRoutingViewController:]
  -[MRPlatterViewController headerViewButtonPressed:]
  -[MRPlatterViewController headerViewLaunchNowPlayingAppButtonPressed:]
  -[MRPlatterViewController footerViewButtonPressed:]
  -[MRPlatterViewController parentContainerView]
  -[MRPlatterViewController setPlaceholderString:]
  -[MRPlatterViewController setAllowsNowPlayingAppLaunch:]
  -[MRPlatterViewController setEndpointController:]
  -[MRPlatterViewController nowPlayingHeaderView]
  -[MRPlatterViewController effectiveFooterView]
  -[MRPlatterViewController effectiveHeaderView]
  -[MRPlatterViewController _routingCornerViewReceivedTap:]
  -[MRPlatterViewController routingCornerView]
  -[MRPlatterViewController _platterViewControllerReceivedInteraction:]
  -[MRPlatterViewController _updateHeaderUI]
  -[MRPlatterViewController languageOptionsViewController]
  -[MRPlatterViewController _updateSecondaryStringFormat]
  -[MRPlatterViewController _updateHardwareVolumeButtons]
  -[MRPlatterViewController _setRoutingPickerVisible:animated:]
  -[MRPlatterViewController volumeContainerView]
  -[MRPlatterViewController videoPickerFooterView]
  -[MRPlatterViewController videoPickerHeaderView]
  -[MRPlatterViewController allowsNowPlayingAppLaunch]
  -[MRPlatterViewController _canToggleRoutingPicker]
  -[MRPlatterViewController _updateOnScreenForStyle:]
  -[MRPlatterViewController _dismissShareAudioViewController]
  -[MRPlatterViewController _shouldUseViewServiceToPresentTVRemote]
  -[MRPlatterViewController shareAudioViewController]
  -[MRPlatterViewController _updateRoutingCornerView]
  -[MRPlatterViewController _updateRoutingIndicators]
  -[MRPlatterViewController _updateRouteNameLabel]
  -[MRPlatterViewController _prewarmTVRemoteIfNeeded]
  -[MRPlatterViewController shouldDisplayPlatter]
  -[MRPlatterViewController secondaryStringComponents]
  -[MRPlatterViewController _updatePlaceholderArtwork]
  -[MRPlatterViewController setExplicitString:]
  -[MRPlatterViewController _updateControlCenterMetadata:sectionMetadata:]
  -[MRPlatterViewController explicitString]
  -[MRPlatterViewController _showPlaceholderArtwork]
  -[MRPlatterViewController setFailedToLoadArtwork:]
  -[MRPlatterViewController placeholderDeviceIdentifier]
  -[MRPlatterViewController _presentRoutingViewControllerFromCoverSheet]
  -[MRPlatterViewController _tvMediaRemoteIdentifier]
  -[MRPlatterViewController _tvAirplayIdentifier]
  -[MRPlatterViewController _showShareAudioViewController]
  -[MRPlatterViewController setDisplayElements:]
  -[MRPlatterViewController presentRatingActionSheet:sourceView:]
  -[MRPlatterViewController presentLanguageOptions]
  -[MRPlatterViewController routingViewController:willDisplayHeaderView:]
  -[MRPlatterViewController contentInsetsForRoutingViewController:]
  -[MRPlatterViewController willTransitionToSize:withCoordinator:]
  -[MRPlatterViewController setPlaceholderDeviceIdentifier:]
  -[MRPlatterViewController setVideoPickerFooterView:]
  -[MRPlatterViewController setVideoPickerHeaderView:]
  -[MRPlatterViewController setRoutingCornerView:]
  -[MRPlatterViewController setParentContainerView:]
  -[MRPlatterViewController setVolumeContainerView:]
  -[MRPlatterViewController setSecondaryStringComponents:]
  -[MRPlatterViewController isListeningForResponse]
  -[MRPlatterViewController setIsListeningForResponse:]
  -[MRPlatterViewController lastKnownSize]
  -[MRPlatterViewController setLastKnownSize:]
  -[MRPlatterViewController setLanguageOptionsViewController:]
  -[MRPlatterViewController setShareAudioViewController:]
  -[MRPlatterViewController displayElements]
  -[MRPlatterViewController failedToLoadArtwork]
  -[MRPlatterViewController failedArtworkRetryCount]
  -[MRPlatterViewController volumeControlAssertion]
  -[MRPlatterViewController setVolumeControlAssertion:]
  -[MRPlatterViewController setNowPlayingHeaderView:]


MRUNowPlayingView : UIView
 @property  MRUNowPlayingContainerView *containerView
 @property  MRUNowPlayingControlsView *controlsView
 @property  MRUEmbeddingView *collapsedEmbeddingView
 @property  UIView *suggestionsView
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long layout
 @property  long long context
 @property  BOOL supportsHorizontalLayout
 @property  BOOL showSuggestionsView
 @property  {UIEdgeInsets=dddd} contentEdgeInsets

  // instance methods
  -[MRUNowPlayingView stylingProvider]
  -[MRUNowPlayingView setSuggestionsView:]
  -[MRUNowPlayingView layoutSubviewsVertical]
  -[MRUNowPlayingView collapsedEmbeddingView]
  -[MRUNowPlayingView showSuggestionsView]
  -[MRUNowPlayingView layoutSubviewsHorizontal]
  -[MRUNowPlayingView contentEdgeInsets]
  -[MRUNowPlayingView containerView]
  -[MRUNowPlayingView setStylingProvider:]
  -[MRUNowPlayingView .cxx_destruct]
  -[MRUNowPlayingView layoutSubviews]
  -[MRUNowPlayingView setShowSuggestionsView:]
  -[MRUNowPlayingView setContentEdgeInsets:]
  -[MRUNowPlayingView setSupportsHorizontalLayout:]
  -[MRUNowPlayingView suggestionsView]
  -[MRUNowPlayingView sizeThatFits:]
  -[MRUNowPlayingView setContainerView:]
  -[MRUNowPlayingView controlsView]
  -[MRUNowPlayingView updateVisibility]
  -[MRUNowPlayingView initWithFrame:]
  -[MRUNowPlayingView setContext:]
  -[MRUNowPlayingView setLayout:]
  -[MRUNowPlayingView supportsHorizontalLayout]
  -[MRUNowPlayingView layout]
  -[MRUNowPlayingView context]


MRUViewServiceRoutingFooterView : UIView <MRUVisualStylingProviderObserver, UIPointerInteractionDelegate>
 @property  UIView *separatorView
 @property  UIButton *button
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUViewServiceRoutingFooterView stylingProvider]
  -[MRUViewServiceRoutingFooterView pointerInteraction:styleForRegion:]
  -[MRUViewServiceRoutingFooterView updateContentSizeCategory]
  -[MRUViewServiceRoutingFooterView setStylingProvider:]
  -[MRUViewServiceRoutingFooterView .cxx_destruct]
  -[MRUViewServiceRoutingFooterView layoutSubviews]
  -[MRUViewServiceRoutingFooterView button]
  -[MRUViewServiceRoutingFooterView visualStylingProviderDidChange:]
  -[MRUViewServiceRoutingFooterView updateVisualStyling]
  -[MRUViewServiceRoutingFooterView sizeThatFits:]
  -[MRUViewServiceRoutingFooterView setSeparatorView:]
  -[MRUViewServiceRoutingFooterView initWithFrame:]
  -[MRUViewServiceRoutingFooterView separatorView]
  -[MRUViewServiceRoutingFooterView pointerInteraction:regionForRequest:defaultRegion:]


MediaControlsBluetoothListeningModeButton : MediaControlsExpandableButton
 @property  MediaControlsHapticPlayer *hapticPlayer
 @property  UIColor *offColor
 @property  NSSet *availableListeningModes
 @property  NSString *selectedListeningMode

  // instance methods
  -[MediaControlsBluetoothListeningModeButton .cxx_destruct]
  -[MediaControlsBluetoothListeningModeButton initWithFrame:]
  -[MediaControlsBluetoothListeningModeButton cancelTrackingWithEvent:]
  -[MediaControlsBluetoothListeningModeButton endTrackingWithTouch:withEvent:]
  -[MediaControlsBluetoothListeningModeButton beginTrackingWithTouch:withEvent:]
  -[MediaControlsBluetoothListeningModeButton setSelectedListeningMode:animated:]
  -[MediaControlsBluetoothListeningModeButton setAvailableListeningModes:]
  -[MediaControlsBluetoothListeningModeButton selectedListeningMode]
  -[MediaControlsBluetoothListeningModeButton playFailedValueChangedEventHapticWithMessage:]
  -[MediaControlsBluetoothListeningModeButton playRequiresBothBudsInEarErrorHaptic]
  -[MediaControlsBluetoothListeningModeButton initForControlCenter]
  -[MediaControlsBluetoothListeningModeButton playFailedValueChangedEventHaptic]
  -[MediaControlsBluetoothListeningModeButton setSelectedListeningMode:]
  -[MediaControlsBluetoothListeningModeButton _springAnimate:]
  -[MediaControlsBluetoothListeningModeButton playValueChangedEventHaptic]
  -[MediaControlsBluetoothListeningModeButton availableListeningModes]
  -[MediaControlsBluetoothListeningModeButton hapticPlayer]
  -[MediaControlsBluetoothListeningModeButton setHapticPlayer:]
  -[MediaControlsBluetoothListeningModeButton offColor]
  -[MediaControlsBluetoothListeningModeButton setOffColor:]


MediaControlsMasterVolumeSlider : MediaControlsVolumeSlider <UIGestureRecognizerDelegate>
 @property  long long syncState
 @property  UIImpactFeedbackGenerator *positiveFeedbackGenerator
 @property  UINotificationFeedbackGenerator *negativeFeedbackGenerator
 @property  UILongPressGestureRecognizer *longPressRecognizer
 @property  BOOL syncingEnabled
 @property  <MediaControlsMasterVolumeSliderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsMasterVolumeSlider continueTrackingWithTouch:withEvent:]
  -[MediaControlsMasterVolumeSlider setPositiveFeedbackGenerator:]
  -[MediaControlsMasterVolumeSlider longPressRecognizer]
  -[MediaControlsMasterVolumeSlider handleLongPress:]
  -[MediaControlsMasterVolumeSlider createThumbView]
  -[MediaControlsMasterVolumeSlider traitCollectionDidChange:]
  -[MediaControlsMasterVolumeSlider setSyncState:]
  -[MediaControlsMasterVolumeSlider setLongPressRecognizer:]
  -[MediaControlsMasterVolumeSlider .cxx_destruct]
  -[MediaControlsMasterVolumeSlider layoutSubviews]
  -[MediaControlsMasterVolumeSlider setNegativeFeedbackGenerator:]
  -[MediaControlsMasterVolumeSlider positiveFeedbackGenerator]
  -[MediaControlsMasterVolumeSlider syncState]
  -[MediaControlsMasterVolumeSlider setDelegate:]
  -[MediaControlsMasterVolumeSlider isSyncingEnabled]
  -[MediaControlsMasterVolumeSlider shrinkThumbAfterDelay:]
  -[MediaControlsMasterVolumeSlider setSyncingEnabled:]
  -[MediaControlsMasterVolumeSlider gestureRecognizerShouldBegin:]
  -[MediaControlsMasterVolumeSlider negativeFeedbackGenerator]
  -[MediaControlsMasterVolumeSlider initWithFrame:]
  -[MediaControlsMasterVolumeSlider delegate]
  -[MediaControlsMasterVolumeSlider cancelTrackingWithEvent:]
  -[MediaControlsMasterVolumeSlider endTrackingWithTouch:withEvent:]
  -[MediaControlsMasterVolumeSlider beginTrackingWithTouch:withEvent:]


MediaControlsRoutingButtonView : MPButton
 @property  CCUICAPackageView *packageView
 @property  long long currentMode
 @property  long long deviceType
 @property  BOOL userInterfaceStyleSwitchingEnabled

  // class methods
  +[MediaControlsRoutingButtonView _cursorInteractionEnabled]

  // instance methods
  -[MediaControlsRoutingButtonView setHighlighted:]
  -[MediaControlsRoutingButtonView setCurrentMode:]
  -[MediaControlsRoutingButtonView cursorInteraction:styleForRegion:modifiers:]
  -[MediaControlsRoutingButtonView deviceType]
  -[MediaControlsRoutingButtonView currentMode]
  -[MediaControlsRoutingButtonView traitCollectionDidChange:]
  -[MediaControlsRoutingButtonView _glyphResource]
  -[MediaControlsRoutingButtonView .cxx_destruct]
  -[MediaControlsRoutingButtonView setUserInterfaceStyleSwitchingEnabled:]
  -[MediaControlsRoutingButtonView layoutSubviews]
  -[MediaControlsRoutingButtonView _updateGlyphState]
  -[MediaControlsRoutingButtonView setDeviceType:]
  -[MediaControlsRoutingButtonView setAlpha:]
  -[MediaControlsRoutingButtonView initWithFrame:]
  -[MediaControlsRoutingButtonView packageView]
  -[MediaControlsRoutingButtonView setPackageView:]
  -[MediaControlsRoutingButtonView isUserInterfaceStyleSwitchingEnabled]
  -[MediaControlsRoutingButtonView _updateGlyphPackage]


MRURoutingAccessoryView : UIView <MRUVisualStylingProviderObserver>
 @property  UIImageView *imageView
 @property  UIActivityIndicatorView *activityView
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long state
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRURoutingAccessoryView stylingProvider]
  -[MRURoutingAccessoryView imageView]
  -[MRURoutingAccessoryView setStylingProvider:]
  -[MRURoutingAccessoryView .cxx_destruct]
  -[MRURoutingAccessoryView layoutSubviews]
  -[MRURoutingAccessoryView setState:]
  -[MRURoutingAccessoryView updateState]
  -[MRURoutingAccessoryView visualStylingProviderDidChange:]
  -[MRURoutingAccessoryView updateVisualStyling]
  -[MRURoutingAccessoryView sizeThatFits:]
  -[MRURoutingAccessoryView state]
  -[MRURoutingAccessoryView initWithFrame:]
  -[MRURoutingAccessoryView setActivityView:]
  -[MRURoutingAccessoryView activityView]
  -[MRURoutingAccessoryView setImageView:]
  -[MRURoutingAccessoryView updateImageViewVisualStyle]


MediaControlsEndpointsViewController : MediaControlsCollectionViewController <MRPlatterViewControllerDelegate, MediaControlsCollectionViewDataSource, MediaControlsCollectionViewDelegate, MediaControlsEndpointsManagerDelegate, CCUIContentModuleContentViewController>
 @property  BOOL dismissing
 @property  BOOL onScreen
 @property  MediaControlsEndpointsManager *endpointsManager
 @property  MPAVRoutingViewController *routingViewController
 @property  MPAVEndpointRoute *selectedRoute
 @property  NSString *routingContextUID
 @property  AVExternalPlaybackMonitor *externalPlaybackMonitor
 @property  MPMediaControlsConfiguration *configuration
 @property  @? routingCornerViewTappedBlock
 @property  @? homeGestureDismissalAllowedBlock
 @property  BOOL shouldPresentUsingViewService
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double preferredExpandedContentHeight
 @property  double preferredExpandedContentWidth
 @property  double preferredExpandedContinuousCornerRadius
 @property  BOOL providesOwnPlatter
 @property  UIViewPropertyAnimator *customAnimator
 @property  BOOL shouldPerformHoverInteraction
 @property  BOOL shouldPerformClickInteraction

  // class methods
  +[MediaControlsEndpointsViewController _shouldTransitionEarlyOnSystemRoute]

  // instance methods
  -[MediaControlsEndpointsViewController updateContentInsets]
  -[MediaControlsEndpointsViewController routingViewController]
  -[MediaControlsEndpointsViewController configuration]
  -[MediaControlsEndpointsViewController isOnScreen]
  -[MediaControlsEndpointsViewController endpointsManager:defersRoutesReplacement:]
  -[MediaControlsEndpointsViewController setRoutingContextUID:]
  -[MediaControlsEndpointsViewController .cxx_destruct]
  -[MediaControlsEndpointsViewController viewDidLoad]
  -[MediaControlsEndpointsViewController routingContextUID]
  -[MediaControlsEndpointsViewController setEndpointsManager:]
  -[MediaControlsEndpointsViewController init]
  -[MediaControlsEndpointsViewController canDismissPresentedContent]
  -[MediaControlsEndpointsViewController preferredExpandedContentHeight]
  -[MediaControlsEndpointsViewController setOnScreen:]
  -[MediaControlsEndpointsViewController setDismissing:]
  -[MediaControlsEndpointsViewController dismissPresentedContentAnimated:completion:]
  -[MediaControlsEndpointsViewController providesOwnPlatter]
  -[MediaControlsEndpointsViewController _routeDidChangeNotification:]
  -[MediaControlsEndpointsViewController shouldPerformHoverInteraction]
  -[MediaControlsEndpointsViewController viewWillDisappear:]
  -[MediaControlsEndpointsViewController stopPrewarming]
  -[MediaControlsEndpointsViewController endpointsManager]
  -[MediaControlsEndpointsViewController startPrewarming]
  -[MediaControlsEndpointsViewController homeGestureDismissalAllowedBlock]
  -[MediaControlsEndpointsViewController preferredExpandedContentWidth]
  -[MediaControlsEndpointsViewController viewDidLayoutSubviews]
  -[MediaControlsEndpointsViewController endpointsManager:activeSystemRouteDidChange:]
  -[MediaControlsEndpointsViewController viewWillAppear:]
  -[MediaControlsEndpointsViewController setDisplayMode:]
  -[MediaControlsEndpointsViewController isDismissing]
  -[MediaControlsEndpointsViewController shouldExpandModuleOnTouch:]
  -[MediaControlsEndpointsViewController homeObserverDidUpdateKnownUIDs:]
  -[MediaControlsEndpointsViewController setRoutingCornerViewTappedBlock:]
  -[MediaControlsEndpointsViewController dealloc]
  -[MediaControlsEndpointsViewController reloadData]
  -[MediaControlsEndpointsViewController setHomeGestureDismissalAllowedBlock:]
  -[MediaControlsEndpointsViewController endUpdates]
  -[MediaControlsEndpointsViewController routingCornerViewTappedBlock]
  -[MediaControlsEndpointsViewController viewDidDisappear:]
  -[MediaControlsEndpointsViewController _canShowWhileLocked]
  -[MediaControlsEndpointsViewController setConfiguration:]
  -[MediaControlsEndpointsViewController platterViewController:didToggleRoutingPicker:]
  -[MediaControlsEndpointsViewController platterViewController:willToggleRoutingPicker:]
  -[MediaControlsEndpointsViewController dismissPlatterViewController:completion:]
  -[MediaControlsEndpointsViewController platterViewController:presentingViewForPresentedViewController:]
  -[MediaControlsEndpointsViewController platterViewController:homeGestureDismisalAllowedDidChange:]
  -[MediaControlsEndpointsViewController shouldPresentUsingViewServicePlatterViewController:]
  -[MediaControlsEndpointsViewController platterViewController:didPickRoute:]
  -[MediaControlsEndpointsViewController setRoutingViewController:]
  -[MediaControlsEndpointsViewController setShouldPresentUsingViewService:]
  -[MediaControlsEndpointsViewController _setupEndpointsManager]
  -[MediaControlsEndpointsViewController _setupRoutingViewController]
  -[MediaControlsEndpointsViewController _setSelectedRoute:isUserSelected:animated:]
  -[MediaControlsEndpointsViewController _updateDiscoveryMode]
  -[MediaControlsEndpointsViewController _transitionToVisibleIfNeeded]
  -[MediaControlsEndpointsViewController _transitionToVisible:]
  -[MediaControlsEndpointsViewController _isReadyForAppearanceTransition]
  -[MediaControlsEndpointsViewController preferredItemHeightGivenWidth:]
  -[MediaControlsEndpointsViewController externalPlaybackMonitor]
  -[MediaControlsEndpointsViewController _assignRouteViewControllerToSelectedPanelViewController]
  -[MediaControlsEndpointsViewController _updateSupportedModesForSelectedPlatterViewController]
  -[MediaControlsEndpointsViewController didSelectEndpoint:]
  -[MediaControlsEndpointsViewController _selectActiveSystemRouteIfNeeded]
  -[MediaControlsEndpointsViewController _updateEndpointRouteForOutputDeviceDataSource:]
  -[MediaControlsEndpointsViewController _supportedModesForSelectedRoute:selectedMode:]
  -[MediaControlsEndpointsViewController _updateModesForSelectedPlatterViewController]
  -[MediaControlsEndpointsViewController setSelectedRoute:]
  -[MediaControlsEndpointsViewController _isSelectedRouteInRoutes]
  -[MediaControlsEndpointsViewController numberOfItemsInCollectionViewController:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:viewControllerForItemAtIndex:]
  -[MediaControlsEndpointsViewController defaultSelectedItemIndexForCollectionViewController:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:willDisplayViewController:forItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:didDisplayViewController:forItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:didEndDisplayingViewController:forItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:canSelectItemAtIndex:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:willSelectItemAtIndex:withReason:]
  -[MediaControlsEndpointsViewController mediaControlsCollectionViewController:didSelectItemAtIndex:withReason:]
  -[MediaControlsEndpointsViewController preferredItemHeight]
  -[MediaControlsEndpointsViewController shouldPresentUsingViewService]
  -[MediaControlsEndpointsViewController selectedRoute]
  -[MediaControlsEndpointsViewController setExternalPlaybackMonitor:]


MediaControlsEndpointController : NSObject <MPRequestResponseControllerDelegate, MPAVRoutingControllerDelegate, _MCStateDumpPropertyListTransformable>
 @property  MPRequestResponseController *requestController
 @property  BOOL hasEverReceivedResponse
 @property  long long state
 @property  BOOL attemptingConnection
 @property  NSString *specifiedClient
 @property  NSString *specifiedPlayer
 @property  MPAVRoutingController *routingController
 @property  NSObject<OS_dispatch_queue> *routingControllerQueue
 @property  MPAVEndpointRoute *route
 @property  BOOL automaticResponseLoading
 @property  <MediaControlsEndpointControllerConnectionDelegate> *connectionDelegate
 @property  NSString *label
 @property  NSString *bundleID
 @property  NSString *representedBundleID
 @property  MPMediaControlsConfiguration *configuration
 @property  MPCPlayerPath *playerPath
 @property  MPCPlayerResponse *response
 @property  NSArray *routeNames
 @property  BOOL allowsAutomaticResponseLoading
 @property  BOOL hasAvailableRoutes
 @property  BOOL airplaying
 @property  BOOL isDeviceSystemRoute
 @property  BOOL routingToWireless
 @property  BOOL onScreen
 @property  BOOL deviceUnlocked
 @property  <MediaControlsEndpointControllerDelegate> *delegate
 @property  <MediaControlsEndpointObserverDelegate> *proxyDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsEndpointController isAirPlaying]
  -[MediaControlsEndpointController requestController]
  -[MediaControlsEndpointController playerPath]
  -[MediaControlsEndpointController initWithEndpoint:client:player:]
  -[MediaControlsEndpointController initWithEndpoint:]
  -[MediaControlsEndpointController label]
  -[MediaControlsEndpointController setHasEverReceivedResponse:]
  -[MediaControlsEndpointController bundleID]
  -[MediaControlsEndpointController route]
  -[MediaControlsEndpointController routingController:pickedRouteDidChange:]
  -[MediaControlsEndpointController representsLongFormVideoContentWithCompletion:]
  -[MediaControlsEndpointController _createRequestController]
  -[MediaControlsEndpointController _updateState]
  -[MediaControlsEndpointController configuration]
  -[MediaControlsEndpointController routingController]
  -[MediaControlsEndpointController launchNowPlayingApp]
  -[MediaControlsEndpointController setAttemptingConnection:]
  -[MediaControlsEndpointController .cxx_destruct]
  -[MediaControlsEndpointController specifiedClient]
  -[MediaControlsEndpointController _connectionDidInvalidate:]
  -[MediaControlsEndpointController _initRoutingController]
  -[MediaControlsEndpointController _reloadPlayerPathWithRoute:]
  -[MediaControlsEndpointController allowsAutomaticResponseLoading]
  -[MediaControlsEndpointController setDelegate:]
  -[MediaControlsEndpointController connectionDelegate]
  -[MediaControlsEndpointController setState:]
  -[MediaControlsEndpointController hasEverReceivedResponse]
  -[MediaControlsEndpointController deviceUnlocked]
  -[MediaControlsEndpointController setRoutingController:]
  -[MediaControlsEndpointController updateRoutePropertiesIfNeeded]
  -[MediaControlsEndpointController _stateDumpObject]
  -[MediaControlsEndpointController setOnScreen:]
  -[MediaControlsEndpointController proxyDelegate]
  -[MediaControlsEndpointController _connectionHasBecomeInvalid]
  -[MediaControlsEndpointController state]
  -[MediaControlsEndpointController _connectionDidAttemptConnection:]
  -[MediaControlsEndpointController setDeviceUnlocked:]
  -[MediaControlsEndpointController response]
  -[MediaControlsEndpointController _connectionDidConnect:]
  -[MediaControlsEndpointController controller:defersResponseReplacement:]
  -[MediaControlsEndpointController routingControllerAvailableRoutesDidChange:]
  -[MediaControlsEndpointController _maybeReloadPlayerPathWithRoute:]
  -[MediaControlsEndpointController delegate]
  -[MediaControlsEndpointController _getConnected:invalid:]
  -[MediaControlsEndpointController setRoute:]
  -[MediaControlsEndpointController setConnectionDelegate:]
  -[MediaControlsEndpointController setProxyDelegate:]
  -[MediaControlsEndpointController _connectIfNeeded]
  -[MediaControlsEndpointController isAttemptingConnection]
  -[MediaControlsEndpointController onScreen]
  -[MediaControlsEndpointController routingControllerQueue]
  -[MediaControlsEndpointController setLabel:]
  -[MediaControlsEndpointController _getConnected:connecting:invalid:]
  -[MediaControlsEndpointController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsEndpointController setAutomaticResponseLoading:]
  -[MediaControlsEndpointController representedBundleID]
  -[MediaControlsEndpointController connectAllowingAuthenticationWithCompletion:]
  -[MediaControlsEndpointController isDeviceSystemRoute]
  -[MediaControlsEndpointController isAutomaticResponseLoading]
  -[MediaControlsEndpointController setRoutingControllerQueue:]
  -[MediaControlsEndpointController isRoutingToWireless]
  -[MediaControlsEndpointController hasAvailableRoutes]
  -[MediaControlsEndpointController routeNames]
  -[MediaControlsEndpointController setConfiguration:]
  -[MediaControlsEndpointController setAllowsAutomaticResponseLoading:]
  -[MediaControlsEndpointController specifiedPlayer]


MRUSystemOutputDeviceRouteController : NSObject <CXCallObserverDelegate>
 @property  CXCallObserver *callObserver
 @property  NSHashTable *observers
 @property  MPAVEndpointRoute *systemRoute
 @property  MPAVOutputDeviceRoute *systemOutputDeviceRoute
 @property  MPAVOutputDeviceRoute *primaryOutputDeviceRoute
 @property  MPAVOutputDeviceRoute *secondaryOutputDeviceRoute
 @property  MRUOutputDeviceAsset *systemOutputDeviceAsset
 @property  MRUOutputDeviceAsset *systemOutputDeviceAssetWithInCall
 @property  MRUOutputDeviceAsset *primaryOutputDeviceAsset
 @property  MRUOutputDeviceAsset *secondaryOutputDeviceAsset
 @property  BOOL isSplitRoute
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRUSystemOutputDeviceRouteController sharedController]
  +[MRUSystemOutputDeviceRouteController outputContextDescription]

  // instance methods
  -[MRUSystemOutputDeviceRouteController callObserver]
  -[MRUSystemOutputDeviceRouteController .cxx_destruct]
  -[MRUSystemOutputDeviceRouteController isCallActive]
  -[MRUSystemOutputDeviceRouteController setObservers:]
  -[MRUSystemOutputDeviceRouteController init]
  -[MRUSystemOutputDeviceRouteController isSplitRoute]
  -[MRUSystemOutputDeviceRouteController addObserver:]
  -[MRUSystemOutputDeviceRouteController systemRoute]
  -[MRUSystemOutputDeviceRouteController observers]
  -[MRUSystemOutputDeviceRouteController removeObserver:]
  -[MRUSystemOutputDeviceRouteController setCallObserver:]
  -[MRUSystemOutputDeviceRouteController callObserver:callChanged:]
  -[MRUSystemOutputDeviceRouteController routeDidChangeNotification]
  -[MRUSystemOutputDeviceRouteController systemOutputDeviceRoute]
  -[MRUSystemOutputDeviceRouteController primaryOutputDeviceRoute]
  -[MRUSystemOutputDeviceRouteController secondaryOutputDeviceRoute]
  -[MRUSystemOutputDeviceRouteController updateOutputDevices]
  -[MRUSystemOutputDeviceRouteController outputDeviceAssetForOutputDeviceRoute:]
  -[MRUSystemOutputDeviceRouteController systemOutputDeviceAsset]
  -[MRUSystemOutputDeviceRouteController outputDeviceAssetTypeForDeviceRoute:]
  -[MRUSystemOutputDeviceRouteController outputDeviceAssetTypeForClusterRoute:]
  -[MRUSystemOutputDeviceRouteController outputDeviceAssetTypeForAirPlayRoute:]
  -[MRUSystemOutputDeviceRouteController systemOutputDeviceAssetWithInCall]
  -[MRUSystemOutputDeviceRouteController primaryOutputDeviceAsset]
  -[MRUSystemOutputDeviceRouteController secondaryOutputDeviceAsset]


MRUStringsProvider : NSObject
  // class methods
  +[MRUStringsProvider ok]
  +[MRUStringsProvider localizedStringWithKey:inTable:]
  +[MRUStringsProvider routingInUseOnPairedDevice]
  +[MRUStringsProvider volumeHeadphones]
  +[MRUStringsProvider audioShaingDisabledCarKit]
  +[MRUStringsProvider audioShaingActionTitle]
  +[MRUStringsProvider volumeHearingDevice]
  +[MRUStringsProvider localizedStringWithKey:]
  +[MRUStringsProvider routingHijackLocalTitle]
  +[MRUStringsProvider volumeAirPods]
  +[MRUStringsProvider audioShaingDisabledCarKitSameOwner]
  +[MRUStringsProvider volumeSpeaker]
  +[MRUStringsProvider volumeAppleTV]
  +[MRUStringsProvider airplayTitle]
  +[MRUStringsProvider localizedNameForBundleIdentifier:]
  +[MRUStringsProvider accessoryBatteryLevelRight]
  +[MRUStringsProvider volumeBeatsSoloPro]
  +[MRUStringsProvider volumeBeats]
  +[MRUStringsProvider controlOtherSpeakers]
  +[MRUStringsProvider routingHijackTVMessage]
  +[MRUStringsProvider routingHijackLocalMessage]
  +[MRUStringsProvider volumeCarplay]
  +[MRUStringsProvider spatialButtonSubtitleHeadTracked]
  +[MRUStringsProvider routingHijackCancelTitle]
  +[MRUStringsProvider transportBookmarkTitle]
  +[MRUStringsProvider bestAvailableAudioFormatMulitchannel]
  +[MRUStringsProvider loading]
  +[MRUStringsProvider spatialButtonSubtitleOff]
  +[MRUStringsProvider volumeBeatsX]
  +[MRUStringsProvider volumePowerbeats]
  +[MRUStringsProvider accessoryBatteryLevelCombined]
  +[MRUStringsProvider accessoryBatteryLevelSingle]
  +[MRUStringsProvider notPlaying]
  +[MRUStringsProvider routingHijackTVTitle]
  +[MRUStringsProvider routingHeaderSpeakersAndTVsTitle]
  +[MRUStringsProvider bestAvailableAudioFormatAtmos]
  +[MRUStringsProvider volumeTVWithDeviceCount:]
  +[MRUStringsProvider controlOtherSpeakersMultipleLines]
  +[MRUStringsProvider transportDislikeTitle]
  +[MRUStringsProvider routingHijackSpeakerMessage]
  +[MRUStringsProvider volumeBeatsFlex]
  +[MRUStringsProvider transportLikeTitle]
  +[MRUStringsProvider volumeB494]
  +[MRUStringsProvider spatialButtonTitle]
  +[MRUStringsProvider volumeAirPlay]
  +[MRUStringsProvider routingHijackSpeakerTitle]
  +[MRUStringsProvider spatialButtonSubtitleOn]
  +[MRUStringsProvider volumeHomePod]
  +[MRUStringsProvider volumeBeatsSolo]
  +[MRUStringsProvider composedBy]
  +[MRUStringsProvider spatializeStereoButtonTitle]
  +[MRUStringsProvider cancel]
  +[MRUStringsProvider volumeSharing]
  +[MRUStringsProvider scrubberLive]
  +[MRUStringsProvider audioShaingDisabledCarPlaySameOwner]
  +[MRUStringsProvider listeningModeErrorMessage]
  +[MRUStringsProvider routingHijackConfirmTitle]
  +[MRUStringsProvider notConnected]
  +[MRUStringsProvider volumeBluetooth]
  +[MRUStringsProvider airPlayErrorTitle]
  +[MRUStringsProvider volumeTV]
  +[MRUStringsProvider connecting]
  +[MRUStringsProvider volumeBeatsStudio]
  +[MRUStringsProvider airPlayConnectionErrorMessage]
  +[MRUStringsProvider localizedStringWithKey:count:]
  +[MRUStringsProvider listeningModeErrorMessageB507]
  +[MRUStringsProvider accessoryBatteryLevelCase]
  +[MRUStringsProvider listeningModeErrorMessageB515]
  +[MRUStringsProvider nowPlayingTitle]
  +[MRUStringsProvider accessoryBatteryLevelLeft]
  +[MRUStringsProvider controlsUnavailable]
  +[MRUStringsProvider audioShaingDisabledCarPlay]
  +[MRUStringsProvider listeningModeErrorMessageB494]


MRURoutingTableViewCell : UITableViewCell <MRURoutingSubtitleControllerDelegate, MRUVisualStylingProviderObserver, UIGestureRecognizerDelegate, UIPointerInteractionDelegate>
 @property  UIImageView *iconImageView
 @property  UIImageView *outlineImageView
 @property  UILabel *titleLabel
 @property  MRURoutingSubtitleView *subtitleView
 @property  UIView *separatorView
 @property  UITapGestureRecognizer *expandGestureRecognizer
 @property  <MRURoutingTableViewCellDelegate> *delegate
 @property  UIImage *iconImage
 @property  NSString *title
 @property  MRURoutingSubtitleController *subtitleStateController
 @property  MRURoutingAccessoryView *routingAccessoryView
 @property  MRUVolumeSlider *volumeSlider
 @property  MRUVisualStylingProvider *stylingProvider
 @property  BOOL showOutline
 @property  BOOL showVolumeSlider
 @property  {UIEdgeInsets=dddd} contentEdgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRURoutingTableViewCell iconImage]
  -[MRURoutingTableViewCell stylingProvider]
  -[MRURoutingTableViewCell titleLabel]
  -[MRURoutingTableViewCell pointerInteraction:styleForRegion:]
  -[MRURoutingTableViewCell updateContentSizeCategory]
  -[MRURoutingTableViewCell setTitle:]
  -[MRURoutingTableViewCell setIconImageView:]
  -[MRURoutingTableViewCell contentEdgeInsets]
  -[MRURoutingTableViewCell setStylingProvider:]
  -[MRURoutingTableViewCell _setShouldHaveFullLengthBottomSeparator:]
  -[MRURoutingTableViewCell .cxx_destruct]
  -[MRURoutingTableViewCell setTitleLabel:]
  -[MRURoutingTableViewCell layoutSubviews]
  -[MRURoutingTableViewCell setSubtitle:]
  -[MRURoutingTableViewCell setContentEdgeInsets:]
  -[MRURoutingTableViewCell setDelegate:]
  -[MRURoutingTableViewCell visualStylingProviderDidChange:]
  -[MRURoutingTableViewCell updateVisualStyling]
  -[MRURoutingTableViewCell sizeThatFits:]
  -[MRURoutingTableViewCell setSeparatorView:]
  -[MRURoutingTableViewCell setIconImage:]
  -[MRURoutingTableViewCell prepareForReuse]
  -[MRURoutingTableViewCell subtitleView]
  -[MRURoutingTableViewCell updateVisibility]
  -[MRURoutingTableViewCell didTapToExpand]
  -[MRURoutingTableViewCell volumeSlider]
  -[MRURoutingTableViewCell setVolumeSlider:]
  -[MRURoutingTableViewCell gestureRecognizer:shouldReceiveTouch:]
  -[MRURoutingTableViewCell title]
  -[MRURoutingTableViewCell delegate]
  -[MRURoutingTableViewCell initWithStyle:reuseIdentifier:]
  -[MRURoutingTableViewCell separatorView]
  -[MRURoutingTableViewCell iconImageView]
  -[MRURoutingTableViewCell pointerInteraction:regionForRequest:defaultRegion:]
  -[MRURoutingTableViewCell setSubtitleView:]
  -[MRURoutingTableViewCell routingSubtitleStateController:didUpdateText:accessory:]
  -[MRURoutingTableViewCell subtitleStateController]
  -[MRURoutingTableViewCell routingAccessoryView]
  -[MRURoutingTableViewCell setShowVolumeSlider:]
  -[MRURoutingTableViewCell setShowOutline:]
  -[MRURoutingTableViewCell transitionToNextVisibleStateWithDuration:]
  -[MRURoutingTableViewCell setSubtitleAccessory:]
  -[MRURoutingTableViewCell expandRect]
  -[MRURoutingTableViewCell showOutline]
  -[MRURoutingTableViewCell showVolumeSlider]
  -[MRURoutingTableViewCell outlineImageView]
  -[MRURoutingTableViewCell setOutlineImageView:]
  -[MRURoutingTableViewCell expandGestureRecognizer]
  -[MRURoutingTableViewCell setExpandGestureRecognizer:]


MediaControlsSeparatorView : UIView
 @property  UIView *separatorView
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MediaControlsSeparatorView .cxx_destruct]
  -[MediaControlsSeparatorView layoutSubviews]
  -[MediaControlsSeparatorView setSeparatorView:]
  -[MediaControlsSeparatorView setVisualStylingProvider:]
  -[MediaControlsSeparatorView initWithFrame:]
  -[MediaControlsSeparatorView separatorView]
  -[MediaControlsSeparatorView visualStylingProvider]


MRUMediaSuggestionsViewController : UIViewController <UICollectionViewDelegate, MRUMediaSuggestionsControllerObserver>
 @property  MRUMediaSuggestionsView *view
 @property  MRUMediaSuggestionsView *viewIfLoaded
 @property  UICollectionViewDiffableDataSource *dataSource
 @property  NSDictionary *suggestions
 @property  NSString *selectedIndentifier
 @property  MRUMediaSuggestionsController *suggestionsController
 @property  <MRUMediaSuggestionsViewControllerDelegate> *delegate
 @property  MRUMediaSuggestion *nowPlayingMediaSuggestion
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long layout
 @property  NSString *suggestionContext
 @property  BOOL supportsHorizontalLayout
 @property  {UIEdgeInsets=dddd} contentEdgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUMediaSuggestionsViewController stylingProvider]
  -[MRUMediaSuggestionsViewController updateCell:forIdentifier:]
  -[MRUMediaSuggestionsViewController collectionView:didSelectItemAtIndexPath:]
  -[MRUMediaSuggestionsViewController updateSuggestions]
  -[MRUMediaSuggestionsViewController nowPlayingMediaSuggestion]
  -[MRUMediaSuggestionsViewController setSuggestionContext:]
  -[MRUMediaSuggestionsViewController setDataSource:]
  -[MRUMediaSuggestionsViewController setSuggestions:]
  -[MRUMediaSuggestionsViewController contentEdgeInsets]
  -[MRUMediaSuggestionsViewController setStylingProvider:]
  -[MRUMediaSuggestionsViewController .cxx_destruct]
  -[MRUMediaSuggestionsViewController suggestionsController]
  -[MRUMediaSuggestionsViewController collectionView:shouldHighlightItemAtIndexPath:]
  -[MRUMediaSuggestionsViewController suggestionContext]
  -[MRUMediaSuggestionsViewController viewDidLoad]
  -[MRUMediaSuggestionsViewController mediaSuggestionsController:didUpdateSuggestions:]
  -[MRUMediaSuggestionsViewController setContentEdgeInsets:]
  -[MRUMediaSuggestionsViewController setDelegate:]
  -[MRUMediaSuggestionsViewController setSupportsHorizontalLayout:]
  -[MRUMediaSuggestionsViewController suggestions]
  -[MRUMediaSuggestionsViewController dataSource]
  -[MRUMediaSuggestionsViewController init]
  -[MRUMediaSuggestionsViewController initWithSuggestionsController:]
  -[MRUMediaSuggestionsViewController setSelectedIndentifier:]
  -[MRUMediaSuggestionsViewController viewWillDisappear:]
  -[MRUMediaSuggestionsViewController viewWillAppear:]
  -[MRUMediaSuggestionsViewController delegate]
  -[MRUMediaSuggestionsViewController selectedIndentifier]
  -[MRUMediaSuggestionsViewController setLayout:]
  -[MRUMediaSuggestionsViewController loadView]
  -[MRUMediaSuggestionsViewController supportsHorizontalLayout]
  -[MRUMediaSuggestionsViewController layout]
  -[MRUMediaSuggestionsViewController setNowPlayingMediaSuggestion:]
  -[MRUMediaSuggestionsViewController _canShowWhileLocked]


MRUEndpointMetadataController : NSObject <MediaControlsEndpointControllerDelegate, MRUMediaSuggestionsControllerObserver>
 @property  NSHashTable *observers
 @property  MPCPlayerCommandRequest *quickActionCommandRequest
 @property  UIImage *quickActionCommandImage
 @property  NSString *iconURL
 @property  MPArtworkCatalog *nowPlayingPlayerResponseArtworkCatalog
 @property  NSDictionary *keyResponseProperties
 @property  long long context
 @property  NSString *suggestionContext
 @property  MRUMediaSuggestionsController *suggestionsController
 @property  BOOL showMediaSuggestions
 @property  MRUMediaSuggestion *nowPlayingMediaSuggestion
 @property  BOOL hideSuggestionsWhileDeviceIsLocked
 @property  NSString *quickActionCommandDescription
 @property  long long quickAction
 @property  BOOL shouldShowQuickAction
 @property  UIImage *quickActionImage
 @property  MRNowPlayingPlayerResponse *nowPlayingPlayerResponse
 @property  MediaControlsEndpointController *endpointController
 @property  MRUTVRemoteController *tvRemoteController
 @property  NSString *routeUID
 @property  MPCPlayerResponse *response
 @property  BOOL isPlaying
 @property  BOOL isSystemMusicApplication
 @property  NSString *title
 @property  NSString *condensedTitle
 @property  NSString *subtitle
 @property  NSString *smallSubtitle
 @property  NSString *placeholderText
 @property  NSString *undiscoveredPlaceholderText
 @property  BOOL showPlaceholderText
 @property  UIImage *applicationIcon
 @property  UIImage *placeholderImage
 @property  MPArtworkCatalog *artworkCatalog
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUEndpointMetadataController applicationIcon]
  -[MRUEndpointMetadataController condensedTitle]
  -[MRUEndpointMetadataController placeholderImage]
  -[MRUEndpointMetadataController setApplicationIcon:]
  -[MRUEndpointMetadataController isEndpointDiscovered]
  -[MRUEndpointMetadataController tvRemoteController]
  -[MRUEndpointMetadataController endpointController]
  -[MRUEndpointMetadataController quickActionCommandDescription]
  -[MRUEndpointMetadataController routeUID]
  -[MRUEndpointMetadataController iconURL]
  -[MRUEndpointMetadataController resumePlabackWithCompletion:]
  -[MRUEndpointMetadataController isPlaying]
  -[MRUEndpointMetadataController nowPlayingMediaSuggestion]
  -[MRUEndpointMetadataController setUndiscoveredPlaceholderText:]
  -[MRUEndpointMetadataController setSuggestionContext:]
  -[MRUEndpointMetadataController setIconURL:]
  -[MRUEndpointMetadataController placeholderText]
  -[MRUEndpointMetadataController endpointControllerDidChangeState:]
  -[MRUEndpointMetadataController .cxx_destruct]
  -[MRUEndpointMetadataController suggestionsController]
  -[MRUEndpointMetadataController endpointControllerRouteDidUpdate:]
  -[MRUEndpointMetadataController suggestionContext]
  -[MRUEndpointMetadataController setSuggestionsController:]
  -[MRUEndpointMetadataController mediaSuggestionsController:didUpdateSuggestions:]
  -[MRUEndpointMetadataController smallSubtitle]
  -[MRUEndpointMetadataController updateAutomaticResponseLoading]
  -[MRUEndpointMetadataController destination]
  -[MRUEndpointMetadataController endpointController:didLoadNewResponse:]
  -[MRUEndpointMetadataController trackQuickActionSelected]
  -[MRUEndpointMetadataController setObservers:]
  -[MRUEndpointMetadataController setShowMediaSuggestions:]
  -[MRUEndpointMetadataController showMediaSuggestions]
  -[MRUEndpointMetadataController setNowPlayingPlayerResponse:]
  -[MRUEndpointMetadataController setNowPlayingPlayerResponseArtworkCatalog:]
  -[MRUEndpointMetadataController keyPropertiesForResponse:]
  -[MRUEndpointMetadataController quickActionCommandRequest]
  -[MRUEndpointMetadataController _fullStateDumpObject]
  -[MRUEndpointMetadataController updateApplicationIcon]
  -[MRUEndpointMetadataController subtitle]
  -[MRUEndpointMetadataController addObserver:]
  -[MRUEndpointMetadataController quickActionImage]
  -[MRUEndpointMetadataController shouldShowQuickAction]
  -[MRUEndpointMetadataController initWithEndpointController:]
  -[MRUEndpointMetadataController keyResponseProperties]
  -[MRUEndpointMetadataController updateKeyResponsePropertiesForResponse:]
  -[MRUEndpointMetadataController title]
  -[MRUEndpointMetadataController response]
  -[MRUEndpointMetadataController updateShowMediaSuggestions]
  -[MRUEndpointMetadataController containsOutputDeviceWithRouteUID:]
  -[MRUEndpointMetadataController isSystemMusicApplication]
  -[MRUEndpointMetadataController showPlaceholderText]
  -[MRUEndpointMetadataController setQuickActionCommandRequest:]
  -[MRUEndpointMetadataController updateQuickActionCommandRequest]
  -[MRUEndpointMetadataController undiscoveredPlaceholderText]
  -[MRUEndpointMetadataController observers]
  -[MRUEndpointMetadataController nowPlayingPlayerResponse]
  -[MRUEndpointMetadataController quickActionCommandImage]
  -[MRUEndpointMetadataController setKeyResponseProperties:]
  -[MRUEndpointMetadataController artworkCatalog]
  -[MRUEndpointMetadataController setContext:]
  -[MRUEndpointMetadataController nowPlayingPlayerResponseArtworkCatalog]
  -[MRUEndpointMetadataController performQuickAction]
  -[MRUEndpointMetadataController dealloc]
  -[MRUEndpointMetadataController quickAction]
  -[MRUEndpointMetadataController hideSuggestionsWhileDeviceIsLocked]
  -[MRUEndpointMetadataController removeObserver:]
  -[MRUEndpointMetadataController setQuickActionCommandImage:]
  -[MRUEndpointMetadataController endpointControllerDidUpdateRoutingAvailability:]
  -[MRUEndpointMetadataController hasNowPlayingInfo]
  -[MRUEndpointMetadataController setHideSuggestionsWhileDeviceIsLocked:]
  -[MRUEndpointMetadataController subtitleComponentsWithCondensed:]
  -[MRUEndpointMetadataController context]


MRUDiffableDataSource : UITableViewDiffableDataSource
 @property  <MRUDiffableDataSourceDelegate> *delegate
 @property  BOOL supportsReordering
 @property  BOOL supportsEditing

  // instance methods
  -[MRUDiffableDataSource tableView:canEditRowAtIndexPath:]
  -[MRUDiffableDataSource .cxx_destruct]
  -[MRUDiffableDataSource setDelegate:]
  -[MRUDiffableDataSource tableView:commitEditingStyle:forRowAtIndexPath:]
  -[MRUDiffableDataSource tableView:moveRowAtIndexPath:toIndexPath:]
  -[MRUDiffableDataSource tableView:canMoveRowAtIndexPath:]
  -[MRUDiffableDataSource delegate]
  -[MRUDiffableDataSource supportsReordering]
  -[MRUDiffableDataSource setSupportsEditing:]
  -[MRUDiffableDataSource setSupportsReordering:]
  -[MRUDiffableDataSource supportsEditing]


MRUViewServiceRoutingView : UIView
 @property  UIView *contentView
 @property  UIView *alertView
 @property  MRUViewServiceRoutingHeaderView *headerView
 @property  MRUViewServiceRoutingFooterView *footerView
 @property  UITableView *tableView
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long state
 @property  double preferredWidth
 @property  double cornerRadius
 @property  BOOL footerVisible
 @property  BOOL showAlertView

  // instance methods
  -[MRUViewServiceRoutingView stylingProvider]
  -[MRUViewServiceRoutingView preferredWidth]
  -[MRUViewServiceRoutingView setAlertView:]
  -[MRUViewServiceRoutingView setStylingProvider:]
  -[MRUViewServiceRoutingView .cxx_destruct]
  -[MRUViewServiceRoutingView layoutSubviews]
  -[MRUViewServiceRoutingView contentView]
  -[MRUViewServiceRoutingView setState:]
  -[MRUViewServiceRoutingView setCornerRadius:]
  -[MRUViewServiceRoutingView showAlertView]
  -[MRUViewServiceRoutingView sizeThatFits:]
  -[MRUViewServiceRoutingView tableView]
  -[MRUViewServiceRoutingView state]
  -[MRUViewServiceRoutingView updateVisibility]
  -[MRUViewServiceRoutingView headerView]
  -[MRUViewServiceRoutingView setPreferredWidth:]
  -[MRUViewServiceRoutingView initWithFrame:]
  -[MRUViewServiceRoutingView isFooterVisible]
  -[MRUViewServiceRoutingView cornerRadius]
  -[MRUViewServiceRoutingView setShowAlertView:]
  -[MRUViewServiceRoutingView footerView]
  -[MRUViewServiceRoutingView setContentView:]
  -[MRUViewServiceRoutingView alertView]
  -[MRUViewServiceRoutingView setFooterVisible:]


MediaControlsVolumeSliderView : CCUIContinuousSliderView
 @property  UIImageSymbolConfiguration *imageSymbolConfiguration

  // instance methods
  -[MediaControlsVolumeSliderView .cxx_destruct]
  -[MediaControlsVolumeSliderView setGlyphPackageDescription:state:animated:]
  -[MediaControlsVolumeSliderView imageSymbolConfiguration]
  -[MediaControlsVolumeSliderView layoutSubviews]
  -[MediaControlsVolumeSliderView setOutputDeviceAsset:state:animated:]
  -[MediaControlsVolumeSliderView setGlyphImage:packageDescription:state:animated:]
  -[MediaControlsVolumeSliderView createBackgroundView]
  -[MediaControlsVolumeSliderView setImageSymbolConfiguration:]
  -[MediaControlsVolumeSliderView initWithFrame:]
  -[MediaControlsVolumeSliderView setContinuousSliderCornerRadius:]


MediaControlsLanguageOptionHeaderFooterView : UITableViewHeaderFooterView
 @property  UILabel *titleLabel

  // instance methods
  -[MediaControlsLanguageOptionHeaderFooterView titleLabel]
  -[MediaControlsLanguageOptionHeaderFooterView .cxx_destruct]
  -[MediaControlsLanguageOptionHeaderFooterView setTitleLabel:]
  -[MediaControlsLanguageOptionHeaderFooterView initWithReuseIdentifier:]


MediaControlsLanguageOptionTableViewCell : MPAVClippingTableViewCell
  // instance methods
  -[MediaControlsLanguageOptionTableViewCell initWithStyle:reuseIdentifier:]


MediaControlsLanguageOptionsViewController : UIViewController <MPRequestResponseControllerDelegate, UITableViewDataSource, UITableViewDelegate, UITableViewDelegatePrivate>
 @property  MPRequestResponseController *requestResponseController
 @property  UIView *materialView
 @property  MPAVClippingTableView *tableView
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  NSArray *languageOptionGroups
 @property  <MediaControlsLanguageOptionsViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsLanguageOptionsViewController initWithRouteUID:]
  -[MediaControlsLanguageOptionsViewController setTableView:]
  -[MediaControlsLanguageOptionsViewController preferredContentSize]
  -[MediaControlsLanguageOptionsViewController setMaterialView:]
  -[MediaControlsLanguageOptionsViewController viewWillLayoutSubviews]
  -[MediaControlsLanguageOptionsViewController tableView:viewForHeaderInSection:]
  -[MediaControlsLanguageOptionsViewController numberOfSectionsInTableView:]
  -[MediaControlsLanguageOptionsViewController tableView:shouldDrawBottomSeparatorForSection:]
  -[MediaControlsLanguageOptionsViewController tableView:numberOfRowsInSection:]
  -[MediaControlsLanguageOptionsViewController .cxx_destruct]
  -[MediaControlsLanguageOptionsViewController tableView:didSelectRowAtIndexPath:]
  -[MediaControlsLanguageOptionsViewController viewDidLoad]
  -[MediaControlsLanguageOptionsViewController tableView:shouldHaveFullLengthBottomSeparatorForSection:]
  -[MediaControlsLanguageOptionsViewController tableView:cellForRowAtIndexPath:]
  -[MediaControlsLanguageOptionsViewController materialView]
  -[MediaControlsLanguageOptionsViewController setDelegate:]
  -[MediaControlsLanguageOptionsViewController languageOptionGroups]
  -[MediaControlsLanguageOptionsViewController tableView:shouldHighlightRowAtIndexPath:]
  -[MediaControlsLanguageOptionsViewController tableView]
  -[MediaControlsLanguageOptionsViewController setVisualStylingProvider:]
  -[MediaControlsLanguageOptionsViewController controller:defersResponseReplacement:]
  -[MediaControlsLanguageOptionsViewController delegate]
  -[MediaControlsLanguageOptionsViewController tableView:shouldHaveFullLengthTopSeparatorForSection:]
  -[MediaControlsLanguageOptionsViewController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsLanguageOptionsViewController visualStylingProvider]
  -[MediaControlsLanguageOptionsViewController _canShowWhileLocked]
  -[MediaControlsLanguageOptionsViewController setLanguageOptionGroups:]
  -[MediaControlsLanguageOptionsViewController requestResponseController]
  -[MediaControlsLanguageOptionsViewController setRequestResponseController:]


MediaControlsVolumeSlider : MPVolumeSlider <MTVisualStylingProviderObservingPrivate>
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsVolumeSlider setMaximumTrackVisualProvider:]
  -[MediaControlsVolumeSlider createThumbView]
  -[MediaControlsVolumeSlider .cxx_destruct]
  -[MediaControlsVolumeSlider setMinimumTrackVisualProvider:]
  -[MediaControlsVolumeSlider initWithFrame:style:]
  -[MediaControlsVolumeSlider _thumbImageForStyle:]
  -[MediaControlsVolumeSlider thumbRectForBounds:trackRect:value:]
  -[MediaControlsVolumeSlider maximumValueImageRectForBounds:]
  -[MediaControlsVolumeSlider providedStylesDidChangeForProvider:]
  -[MediaControlsVolumeSlider tintColorDidChange]
  -[MediaControlsVolumeSlider minimumValueImageRectForBounds:]
  -[MediaControlsVolumeSlider trackRectForBounds:]
  -[MediaControlsVolumeSlider gestureRecognizerShouldBegin:]
  -[MediaControlsVolumeSlider setVisualStylingProvider:]
  -[MediaControlsVolumeSlider pointInside:withEvent:]
  -[MediaControlsVolumeSlider visualStylingProvider]


MRULockScreenMonitor : NSObject
 @property  int mobileKeyBagLockStatusNotifyToken
 @property  <MRULockScreenMonitorDelegate> *delegate
 @property  BOOL deviceLocked

  // instance methods
  -[MRULockScreenMonitor .cxx_destruct]
  -[MRULockScreenMonitor setDelegate:]
  -[MRULockScreenMonitor setDeviceLocked:]
  -[MRULockScreenMonitor initWithDelegate:]
  -[MRULockScreenMonitor delegate]
  -[MRULockScreenMonitor mobileKeyBagLockStatusNotifyToken]
  -[MRULockScreenMonitor isDeviceLocked]
  -[MRULockScreenMonitor dealloc]
  -[MRULockScreenMonitor updateDeviceLocked]
  -[MRULockScreenMonitor setMobileKeyBagLockStatusNotifyToken:]


MediaControlsTheme : NSObject
  // class methods
  +[MediaControlsTheme forwardImage]
  +[MediaControlsTheme playImage]
  +[MediaControlsTheme pauseImage]
  +[MediaControlsTheme stopImage]
  +[MediaControlsTheme airplayVideoImage]
  +[MediaControlsTheme backwardImage]
  +[MediaControlsTheme goBackwardImageForTimeInterval:]
  +[MediaControlsTheme goForwardImageForTimeInterval:]
  +[MediaControlsTheme captionsImage]
  +[MediaControlsTheme starImage]
  +[MediaControlsTheme starFillImage]
  +[MediaControlsTheme hamburgerImage]
  +[MediaControlsTheme volumeMinImage]
  +[MediaControlsTheme volumeMaxImage]
  +[MediaControlsTheme appleTVRemote]


MRUSystemVolumeController : NSObject <MRUSystemOutputDeviceRouteControllerObserver, MPVolumeControllerDelegate>
 @property  MPVolumeController *systemVolumeController
 @property  MPVolumeController *primaryVolumeController
 @property  MPVolumeController *secondaryVolumeController
 @property  MRUSystemOutputDeviceRouteController *outputDeviceRouteController
 @property  <MRUSystemVolumeControllerDelegate> *delegate
 @property  NSString *volumeAudioCategory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRUSystemVolumeController packageStateForVolumeValue:]

  // instance methods
  -[MRUSystemVolumeController volumeAudioCategory]
  -[MRUSystemVolumeController .cxx_destruct]
  -[MRUSystemVolumeController setDelegate:]
  -[MRUSystemVolumeController volumeController:volumeControlAvailableDidChange:]
  -[MRUSystemVolumeController delegate]
  -[MRUSystemVolumeController volumeController:volumeValueDidChange:]
  -[MRUSystemVolumeController systemVolumeController]
  -[MRUSystemVolumeController primaryVolumeController]
  -[MRUSystemVolumeController secondaryVolumeController]
  -[MRUSystemVolumeController systemOutputDeviceRouteControllerDidUpdateOutputDevices:]
  -[MRUSystemVolumeController updateVolumeControllers]
  -[MRUSystemVolumeController typeForVolumeController:]
  -[MRUSystemVolumeController initWithOutputDeviceRouteController:]
  -[MRUSystemVolumeController volumeValueForType:]
  -[MRUSystemVolumeController volumeAvailableForType:]
  -[MRUSystemVolumeController setVolumeValue:forType:]
  -[MRUSystemVolumeController outputDeviceRouteController]


MRUArtworkView : UIView <MRUVisualStylingProviderObserver>
 @property  UIView *placeholderBackground
 @property  UIImageView *placeholderImageView
 @property  MRUShadowView *artworkShadowView
 @property  UIImageView *artworkImageView
 @property  MRUShadowView *iconShadowView
 @property  UIImageView *iconView
 @property  MSVTimer *artworkTimer
 @property  long long failedRetryCount
 @property  MPArtworkCatalog *catalog
 @property  UIImage *artworkImage
 @property  UIImage *placeholderImage
 @property  UIImage *iconImage
 @property  UIPointerStyle *pointerStyle
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long style
 @property  BOOL showPlaceholder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUArtworkView iconImage]
  -[MRUArtworkView stylingProvider]
  -[MRUArtworkView catalog]
  -[MRUArtworkView setCatalog:]
  -[MRUArtworkView placeholderImage]
  -[MRUArtworkView setPlaceholderImage:]
  -[MRUArtworkView setFailedRetryCount:]
  -[MRUArtworkView isSquareArtwork]
  -[MRUArtworkView setArtworkImage:]
  -[MRUArtworkView setStylingProvider:]
  -[MRUArtworkView setArtworkImageView:]
  -[MRUArtworkView .cxx_destruct]
  -[MRUArtworkView updatePlaceholderSymbolConfiguration]
  -[MRUArtworkView setStyle:]
  -[MRUArtworkView placeholderBackground]
  -[MRUArtworkView layoutSubviews]
  -[MRUArtworkView artworkImage]
  -[MRUArtworkView setPlaceholderBackground:]
  -[MRUArtworkView artworkShadowView]
  -[MRUArtworkView visualStylingProviderDidChange:]
  -[MRUArtworkView updateVisualStyling]
  -[MRUArtworkView sizeThatFits:]
  -[MRUArtworkView iconShadowView]
  -[MRUArtworkView setIconImage:]
  -[MRUArtworkView prepareForReuse]
  -[MRUArtworkView setArtworkShadowView:]
  -[MRUArtworkView updateVisibility]
  -[MRUArtworkView setPlaceholderImageView:]
  -[MRUArtworkView failedRetryCount]
  -[MRUArtworkView updateStyle]
  -[MRUArtworkView artworkImageView]
  -[MRUArtworkView initWithFrame:]
  -[MRUArtworkView setIconShadowView:]
  -[MRUArtworkView isSquare:]
  -[MRUArtworkView setShowPlaceholder:]
  -[MRUArtworkView dealloc]
  -[MRUArtworkView artworkFrame]
  -[MRUArtworkView artworkTimer]
  -[MRUArtworkView pointerStyle]
  -[MRUArtworkView iconView]
  -[MRUArtworkView style]
  -[MRUArtworkView setIconView:]
  -[MRUArtworkView showPlaceholder]
  -[MRUArtworkView placeholderImageView]
  -[MRUArtworkView setArtworkTimer:]
  -[MRUArtworkView isDeviceIcon]


MRUControlCenterView : UIView
 @property  UIView *materialView
 @property  UIView *contentView
 @property  UIView *alertView
 @property  UIView *containerView
 @property  UICollectionView *collectionView
 @property  UICollectionViewFlowLayout *collectionViewLayout
 @property  MRUControlCenterButton *moreButton
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long state
 @property  BOOL transitioning
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} transitionFrame
 @property  double cornerRadius
 @property  BOOL showMoreButton
 @property  BOOL showAlertView
 @property  {CGSize=dd} forcedContentSize

  // instance methods
  -[MRUControlCenterView stylingProvider]
  -[MRUControlCenterView setMaterialView:]
  -[MRUControlCenterView layoutSubviewsVertical]
  -[MRUControlCenterView forcedContentSize]
  -[MRUControlCenterView layoutSubviewsIPad]
  -[MRUControlCenterView setAlertView:]
  -[MRUControlCenterView layoutSubviewsHorizontal]
  -[MRUControlCenterView containerView]
  -[MRUControlCenterView setStylingProvider:]
  -[MRUControlCenterView .cxx_destruct]
  -[MRUControlCenterView updateCollectionViewContentInset]
  -[MRUControlCenterView showMoreButton]
  -[MRUControlCenterView collectionViewLayout]
  -[MRUControlCenterView setFrame:]
  -[MRUControlCenterView layoutSubviews]
  -[MRUControlCenterView contentView]
  -[MRUControlCenterView materialView]
  -[MRUControlCenterView setState:]
  -[MRUControlCenterView collectionView]
  -[MRUControlCenterView setCornerRadius:]
  -[MRUControlCenterView showAlertView]
  -[MRUControlCenterView state]
  -[MRUControlCenterView updateVisibility]
  -[MRUControlCenterView setTransitioning:]
  -[MRUControlCenterView initWithFrame:]
  -[MRUControlCenterView isTransitioning]
  -[MRUControlCenterView setForcedContentSize:]
  -[MRUControlCenterView cornerRadius]
  -[MRUControlCenterView setShowAlertView:]
  -[MRUControlCenterView setShowMoreButton:]
  -[MRUControlCenterView transitionFrame]
  -[MRUControlCenterView setContentView:]
  -[MRUControlCenterView alertView]
  -[MRUControlCenterView moreButton]
  -[MRUControlCenterView setTransitionFrame:]


MediaControlsExpandableButtonOption : NSObject
 @property  id identifier
 @property  NSString *packageName
 @property  NSString *title
 @property  UIColor *selectedBackgroundColor
 @property  NSString *selectedState
 @property  BOOL animateWhileSelected

  // instance methods
  -[MediaControlsExpandableButtonOption setTitle:]
  -[MediaControlsExpandableButtonOption .cxx_destruct]
  -[MediaControlsExpandableButtonOption identifier]
  -[MediaControlsExpandableButtonOption title]
  -[MediaControlsExpandableButtonOption setIdentifier:]
  -[MediaControlsExpandableButtonOption packageName]
  -[MediaControlsExpandableButtonOption setSelectedBackgroundColor:]
  -[MediaControlsExpandableButtonOption setPackageName:]
  -[MediaControlsExpandableButtonOption setSelectedState:]
  -[MediaControlsExpandableButtonOption selectedBackgroundColor]
  -[MediaControlsExpandableButtonOption selectedState]
  -[MediaControlsExpandableButtonOption animateWhileSelected]
  -[MediaControlsExpandableButtonOption setAnimateWhileSelected:]


MediaControlsExpandableButton : UIControl <MRUVisualStylingProviderObserver, UIPointerInteractionDelegate>
 @property  NSMutableArray *buttons
 @property  UIView *backgroundView
 @property  UIView *overlaySelectionView
 @property  UIView *selectionView
 @property  UIView *clippingView
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel
 @property  UILabel *messageLabel
 @property  NSTimer *messageTimer
 @property  BOOL toggleEnabled
 @property  BOOL displayMessage
 @property  BOOL resetTracking
 @property  BOOL isControlCenter
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  NSArray *options
 @property  MediaControlsExpandableButtonOption *selectedOption
 @property  long long selectedOptionIndex
 @property  NSString *title
 @property  NSString *disabledSubtitle
 @property  long long axis
 @property  BOOL expanded
 @property  {CGSize=dd} maximumExpandedSize
 @property  {CGSize=dd} buttonImageSize
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsExpandableButton collapsedHeightWithImageHeight:maximumHeight:]

  // instance methods
  -[MediaControlsExpandableButton setHighlighted:]
  -[MediaControlsExpandableButton continueTrackingWithTouch:withEvent:]
  -[MediaControlsExpandableButton stylingProvider]
  -[MediaControlsExpandableButton selectionView]
  -[MediaControlsExpandableButton titleLabel]
  -[MediaControlsExpandableButton setSubtitleLabel:]
  -[MediaControlsExpandableButton pointerInteraction:styleForRegion:]
  -[MediaControlsExpandableButton updateSubtitle]
  -[MediaControlsExpandableButton pointerInteraction:willEnterRegion:animator:]
  -[MediaControlsExpandableButton setContentVerticalAlignment:]
  -[MediaControlsExpandableButton updateContentSizeCategory]
  -[MediaControlsExpandableButton isExpanded]
  -[MediaControlsExpandableButton setMessageLabel:]
  -[MediaControlsExpandableButton setTitle:]
  -[MediaControlsExpandableButton pointerInteraction:willExitRegion:animator:]
  -[MediaControlsExpandableButton messageLabel]
  -[MediaControlsExpandableButton options]
  -[MediaControlsExpandableButton setButtons:]
  -[MediaControlsExpandableButton setStylingProvider:]
  -[MediaControlsExpandableButton setOptions:]
  -[MediaControlsExpandableButton .cxx_destruct]
  -[MediaControlsExpandableButton selectedOptionIndex]
  -[MediaControlsExpandableButton setTitleLabel:]
  -[MediaControlsExpandableButton layoutSubviews]
  -[MediaControlsExpandableButton setToggleEnabled:]
  -[MediaControlsExpandableButton toggleEnabled]
  -[MediaControlsExpandableButton axis]
  -[MediaControlsExpandableButton setAxis:]
  -[MediaControlsExpandableButton visualStylingProviderDidChange:]
  -[MediaControlsExpandableButton updateVisualStyling]
  -[MediaControlsExpandableButton setSelectionView:]
  -[MediaControlsExpandableButton sizeThatFits:]
  -[MediaControlsExpandableButton subtitleLabel]
  -[MediaControlsExpandableButton gestureRecognizerShouldBegin:]
  -[MediaControlsExpandableButton setVisualStylingProvider:]
  -[MediaControlsExpandableButton title]
  -[MediaControlsExpandableButton initWithFrame:]
  -[MediaControlsExpandableButton pointInside:withEvent:]
  -[MediaControlsExpandableButton setBackgroundView:]
  -[MediaControlsExpandableButton setExpanded:]
  -[MediaControlsExpandableButton setClippingView:]
  -[MediaControlsExpandableButton cancelTrackingWithEvent:]
  -[MediaControlsExpandableButton endTrackingWithTouch:withEvent:]
  -[MediaControlsExpandableButton visualStylingProvider]
  -[MediaControlsExpandableButton pointerInteraction:regionForRequest:defaultRegion:]
  -[MediaControlsExpandableButton setEnabled:]
  -[MediaControlsExpandableButton beginTrackingWithTouch:withEvent:]
  -[MediaControlsExpandableButton displayMessage]
  -[MediaControlsExpandableButton setDisplayMessage:]
  -[MediaControlsExpandableButton _layoutLabels]
  -[MediaControlsExpandableButton buttons]
  -[MediaControlsExpandableButton backgroundView]
  -[MediaControlsExpandableButton clippingView]
  -[MediaControlsExpandableButton didTapButton:]
  -[MediaControlsExpandableButton selectedOption]
  -[MediaControlsExpandableButton showMessage:]
  -[MediaControlsExpandableButton setSelectedOptionIndex:]
  -[MediaControlsExpandableButton messageTimer]
  -[MediaControlsExpandableButton initForControlCenter]
  -[MediaControlsExpandableButton setMaximumExpandedSize:]
  -[MediaControlsExpandableButton setButtonImageSize:]
  -[MediaControlsExpandableButton _layoutSelectionView]
  -[MediaControlsExpandableButton _buttonLayoutAxis]
  -[MediaControlsExpandableButton _updateSelectionVisiblity]
  -[MediaControlsExpandableButton _updateButtonsVisiblity]
  -[MediaControlsExpandableButton updateGlyphSelectionStateWithUserInitiated:]
  -[MediaControlsExpandableButton _resetSelectionView]
  -[MediaControlsExpandableButton setDisabledSubtitle:]
  -[MediaControlsExpandableButton disabledSubtitle]
  -[MediaControlsExpandableButton maximumExpandedSize]
  -[MediaControlsExpandableButton buttonImageSize]
  -[MediaControlsExpandableButton overlaySelectionView]
  -[MediaControlsExpandableButton setOverlaySelectionView:]
  -[MediaControlsExpandableButton setMessageTimer:]
  -[MediaControlsExpandableButton resetTracking]
  -[MediaControlsExpandableButton setResetTracking:]
  -[MediaControlsExpandableButton isControlCenter]
  -[MediaControlsExpandableButton setIsControlCenter:]


MRUNowPlayingTransportControlsView : UIView
 @property  MRUTransportButton *tvRemoteButton
 @property  MRUTransportButton *leftButton
 @property  MRUTransportButton *middleButton
 @property  MRUTransportButton *rightButton
 @property  MRUTransportButton *languageOptionsButton
 @property  <MRUNowPlayingTransportControlsViewDelegate> *delegate
 @property  MPCPlayerResponse *response
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long layout
 @property  BOOL showTVButtons

  // instance methods
  -[MRUNowPlayingTransportControlsView stylingProvider]
  -[MRUNowPlayingTransportControlsView leftButton]
  -[MRUNowPlayingTransportControlsView setLeftButton:]
  -[MRUNowPlayingTransportControlsView setShowTVButtons:]
  -[MRUNowPlayingTransportControlsView updateResponse]
  -[MRUNowPlayingTransportControlsView setStylingProvider:]
  -[MRUNowPlayingTransportControlsView .cxx_destruct]
  -[MRUNowPlayingTransportControlsView didSelectedMiddleButton:]
  -[MRUNowPlayingTransportControlsView layoutSubviews]
  -[MRUNowPlayingTransportControlsView tvRemoteButton]
  -[MRUNowPlayingTransportControlsView setRightButton:]
  -[MRUNowPlayingTransportControlsView setDelegate:]
  -[MRUNowPlayingTransportControlsView updateImageConfiguration]
  -[MRUNowPlayingTransportControlsView setMiddleButton:]
  -[MRUNowPlayingTransportControlsView didSelectTVRemoteButton:]
  -[MRUNowPlayingTransportControlsView setLanguageOptionsButton:]
  -[MRUNowPlayingTransportControlsView sizeThatFits:]
  -[MRUNowPlayingTransportControlsView languageOptionsButton]
  -[MRUNowPlayingTransportControlsView gestureRecognizerShouldBegin:]
  -[MRUNowPlayingTransportControlsView showTVButtons]
  -[MRUNowPlayingTransportControlsView didSelectedLeftButton:]
  -[MRUNowPlayingTransportControlsView updateVisibility]
  -[MRUNowPlayingTransportControlsView response]
  -[MRUNowPlayingTransportControlsView initWithFrame:]
  -[MRUNowPlayingTransportControlsView delegate]
  -[MRUNowPlayingTransportControlsView setTvRemoteButton:]
  -[MRUNowPlayingTransportControlsView currentLocaleDidChangeNotification:]
  -[MRUNowPlayingTransportControlsView rightButton]
  -[MRUNowPlayingTransportControlsView middleButton]
  -[MRUNowPlayingTransportControlsView setLayout:]
  -[MRUNowPlayingTransportControlsView didSelectedRightButton:]
  -[MRUNowPlayingTransportControlsView didSelectLanguageOptionsButton:]
  -[MRUNowPlayingTransportControlsView buttonHoldReleased:]
  -[MRUNowPlayingTransportControlsView buttonHoldBegan:]
  -[MRUNowPlayingTransportControlsView layout]
  -[MRUNowPlayingTransportControlsView setResponse:]


MediaControlsStandaloneEndpointController : MediaControlsEndpointController <MPAVRoutingControllerDelegate, MediaControlsEndpointObserverDelegate, MediaControlsEndpointControllerConnectionDelegate>
 @property  BOOL endpointDiscovered
 @property  MPAVRoutingController *routingController
 @property  MPMRAVEndpointObserverWrapper *endpointObserver
 @property  NSString *routeUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsStandaloneEndpointController initWithRouteUID:]
  -[MediaControlsStandaloneEndpointController initWithEndpoint:client:player:]
  -[MediaControlsStandaloneEndpointController initWithEndpoint:]
  -[MediaControlsStandaloneEndpointController isEndpointDiscovered]
  -[MediaControlsStandaloneEndpointController initWithRouteUID:client:player:]
  -[MediaControlsStandaloneEndpointController routeUID]
  -[MediaControlsStandaloneEndpointController routingController]
  -[MediaControlsStandaloneEndpointController setEndpointDiscovered:]
  -[MediaControlsStandaloneEndpointController .cxx_destruct]
  -[MediaControlsStandaloneEndpointController setRouteUID:]
  -[MediaControlsStandaloneEndpointController updateAllowsAutomaticResponseLoading]
  -[MediaControlsStandaloneEndpointController beginObserving]
  -[MediaControlsStandaloneEndpointController endObserving]
  -[MediaControlsStandaloneEndpointController proxyDelegate]
  -[MediaControlsStandaloneEndpointController routingControllerAvailableRoutesDidChange:]
  -[MediaControlsStandaloneEndpointController endpointObserver]
  -[MediaControlsStandaloneEndpointController setRoute:]
  -[MediaControlsStandaloneEndpointController _routeForEndpoint:]
  -[MediaControlsStandaloneEndpointController dealloc]
  -[MediaControlsStandaloneEndpointController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsStandaloneEndpointController endpointController:willAttemptToConnectToRoute:]
  -[MediaControlsStandaloneEndpointController setEndpointObserver:]
  -[MediaControlsStandaloneEndpointController setAllowsAutomaticResponseLoading:]


MediaControlsActiveEndpointController : MediaControlsEndpointController <MPAVRoutingControllerDelegate, MediaControlsEndpointObserverDelegate, MediaControlsEndpointControllerConnectionDelegate>
 @property  MPCFuture *deferredPlayerPathFuture
 @property  id deferredPlayerPathInvalidationToken
 @property  MSVPersistentTimer *deferredPlayerPathTimer
 @property  NSString *activeEndpointUID
 @property  long long routeType
 @property  BOOL isDeferred
 @property  NSString *activeRouteUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsActiveEndpointController mediaRecentlyPlayedTimeout]

  // instance methods
  -[MediaControlsActiveEndpointController setActiveEndpointUID:]
  -[MediaControlsActiveEndpointController _maybeUpdateActiveSystemRoute]
  -[MediaControlsActiveEndpointController .cxx_destruct]
  -[MediaControlsActiveEndpointController _maybeRestoreDeferredPlayerPath]
  -[MediaControlsActiveEndpointController setIsDeferred:]
  -[MediaControlsActiveEndpointController setDeferredPlayerPathFuture:]
  -[MediaControlsActiveEndpointController setDeferredPlayerPathTimer:]
  -[MediaControlsActiveEndpointController _activeSystemRouteDidChangeWithChangeType:]
  -[MediaControlsActiveEndpointController _resetDeferredPlayerPath]
  -[MediaControlsActiveEndpointController setOnScreen:]
  -[MediaControlsActiveEndpointController deferredPlayerPathFuture]
  -[MediaControlsActiveEndpointController deferredPlayerPathInvalidationToken]
  -[MediaControlsActiveEndpointController activeSystemRouteDidChangeNotification:]
  -[MediaControlsActiveEndpointController setDeferredPlayerPathInvalidationToken:]
  -[MediaControlsActiveEndpointController activeRouteUID]
  -[MediaControlsActiveEndpointController _restoreDeferredPlayerPath]
  -[MediaControlsActiveEndpointController setDeviceUnlocked:]
  -[MediaControlsActiveEndpointController activeEndpointUID]
  -[MediaControlsActiveEndpointController routingControllerAvailableRoutesDidChange:]
  -[MediaControlsActiveEndpointController isDeferred]
  -[MediaControlsActiveEndpointController _routeForEndpoint:]
  -[MediaControlsActiveEndpointController _fetchActiveSystemRoute:]
  -[MediaControlsActiveEndpointController controller:shouldRetryFailedRequestWithError:]
  -[MediaControlsActiveEndpointController endpointController:willAttemptToConnectToRoute:]
  -[MediaControlsActiveEndpointController deferredPlayerPathTimer]
  -[MediaControlsActiveEndpointController initWithActiveRouteType:]
  -[MediaControlsActiveEndpointController _updateActiveSystemRoute]
  -[MediaControlsActiveEndpointController setRouteType:]
  -[MediaControlsActiveEndpointController routeType]


MRUNowPlayingLabelView : UIView <MRUVisualStylingProviderObserver>
 @property  MPRouteLabel *routeLabel
 @property  MPUMarqueeView *titleMarqueeView
 @property  MPUMarqueeView *subtitleMarqueeView
 @property  BSUIEmojiLabelView *titleLabel
 @property  BSUIEmojiLabelView *subtitleLabel
 @property  UILabel *placeholderLabel
 @property  MPAVRoute *route
 @property  NSString *title
 @property  NSString *subtitle
 @property  NSString *placeholderText
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long layout
 @property  long long context
 @property  BOOL showPlaceholderText
 @property  BOOL marqueeEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUNowPlayingLabelView stylingProvider]
  -[MRUNowPlayingLabelView viewForFirstBaselineLayout]
  -[MRUNowPlayingLabelView routeLabel]
  -[MRUNowPlayingLabelView titleLabel]
  -[MRUNowPlayingLabelView setSubtitleLabel:]
  -[MRUNowPlayingLabelView setTitleMarqueeView:]
  -[MRUNowPlayingLabelView route]
  -[MRUNowPlayingLabelView subtitleMarqueeView]
  -[MRUNowPlayingLabelView updateContentSizeCategory]
  -[MRUNowPlayingLabelView setTitle:]
  -[MRUNowPlayingLabelView placeholderText]
  -[MRUNowPlayingLabelView setStylingProvider:]
  -[MRUNowPlayingLabelView .cxx_destruct]
  -[MRUNowPlayingLabelView setTitleLabel:]
  -[MRUNowPlayingLabelView layoutSubviews]
  -[MRUNowPlayingLabelView setPlaceholderText:]
  -[MRUNowPlayingLabelView setSubtitle:]
  -[MRUNowPlayingLabelView setMarqueeEnabled:]
  -[MRUNowPlayingLabelView setPlaceholderLabel:]
  -[MRUNowPlayingLabelView visualStylingProviderDidChange:]
  -[MRUNowPlayingLabelView updateVisualStyling]
  -[MRUNowPlayingLabelView sizeThatFits:]
  -[MRUNowPlayingLabelView subtitleLabel]
  -[MRUNowPlayingLabelView placeholderLabel]
  -[MRUNowPlayingLabelView subtitle]
  -[MRUNowPlayingLabelView updateVisibility]
  -[MRUNowPlayingLabelView isMarqueeEnabled]
  -[MRUNowPlayingLabelView title]
  -[MRUNowPlayingLabelView updateMarquee]
  -[MRUNowPlayingLabelView initWithFrame:]
  -[MRUNowPlayingLabelView titleMarqueeView]
  -[MRUNowPlayingLabelView showPlaceholderText]
  -[MRUNowPlayingLabelView didMoveToWindow]
  -[MRUNowPlayingLabelView setRoute:]
  -[MRUNowPlayingLabelView setShowPlaceholderText:]
  -[MRUNowPlayingLabelView setRouteLabel:]
  -[MRUNowPlayingLabelView setContext:]
  -[MRUNowPlayingLabelView setLayout:]
  -[MRUNowPlayingLabelView setSubtitleMarqueeView:]
  -[MRUNowPlayingLabelView layout]
  -[MRUNowPlayingLabelView context]


MRUSpatialAudioPreferences : NSObject
 @property  int mode
 @property  BOOL isHeadTrackingEnabled

  // instance methods
  -[MRUSpatialAudioPreferences mode]
  -[MRUSpatialAudioPreferences descriptionForSpatialMode:]
  -[MRUSpatialAudioPreferences initWithMode:headTrackingEnabled:]
  -[MRUSpatialAudioPreferences isHeadTrackingEnabled]


MRUSpatialAudioPreferencesController : NSObject <MRUSystemOutputDeviceRouteControllerObserver>
 @property  NSCache *cache
 @property  MRUSystemOutputDeviceRouteController *outputDeviceRouteController
 @property  <MRUSpatialAudioPreferencesControllerDelegate> *delegate
 @property  BOOL isSpatialAudioSupported
 @property  BOOL isHeadTrackingSupported
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUSpatialAudioPreferencesController setCache:]
  -[MRUSpatialAudioPreferencesController .cxx_destruct]
  -[MRUSpatialAudioPreferencesController cache]
  -[MRUSpatialAudioPreferencesController setDelegate:]
  -[MRUSpatialAudioPreferencesController isSpatialAudioSupported]
  -[MRUSpatialAudioPreferencesController delegate]
  -[MRUSpatialAudioPreferencesController dealloc]
  -[MRUSpatialAudioPreferencesController systemOutputDeviceRouteControllerDidUpdateOutputDevices:]
  -[MRUSpatialAudioPreferencesController systemOutputDeviceRouteControllerDidUpdateOutputDeviceProperties:]
  -[MRUSpatialAudioPreferencesController initWithOutputDeviceRouteController:]
  -[MRUSpatialAudioPreferencesController outputDeviceRouteController]
  -[MRUSpatialAudioPreferencesController updateSpatialAudioSupported]
  -[MRUSpatialAudioPreferencesController accessibilityHeadTrackChangedNotification]
  -[MRUSpatialAudioPreferencesController updateHeadTrackingSupported]
  -[MRUSpatialAudioPreferencesController resetPreferences]
  -[MRUSpatialAudioPreferencesController preferenceForBundleID:]
  -[MRUSpatialAudioPreferencesController setPreferences:forBundleID:]
  -[MRUSpatialAudioPreferencesController isHeadTrackingSupported]


MediaControlsMaterialView : UIView <MTVisualStylingProviding>
 @property  BOOL highlighted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsMaterialView setHighlighted:]
  -[MediaControlsMaterialView _setContinuousCornerRadius:]
  -[MediaControlsMaterialView .cxx_destruct]
  -[MediaControlsMaterialView layoutSubviews]
  -[MediaControlsMaterialView visualStylingProviderForCategory:]
  -[MediaControlsMaterialView isHighlighted]
  -[MediaControlsMaterialView initWithFrame:]


MRUOutputDeviceAsset : NSObject
 @property  unsigned long deviceCount
 @property  NSString *localizedDisplayTitle
 @property  CCUICAPackageDescription *packageDescription
 @property  UIImage *icon
 @property  long long type
 @property  long long kind

  // instance methods
  -[MRUOutputDeviceAsset setDeviceCount:]
  -[MRUOutputDeviceAsset deviceCount]
  -[MRUOutputDeviceAsset icon]
  -[MRUOutputDeviceAsset .cxx_destruct]
  -[MRUOutputDeviceAsset packageDescription]
  -[MRUOutputDeviceAsset kind]
  -[MRUOutputDeviceAsset type]
  -[MRUOutputDeviceAsset localizedDisplayTitle]
  -[MRUOutputDeviceAsset initWithType:deviceCount:]
  -[MRUOutputDeviceAsset initWithOutputDeviceRoute:]
  -[MRUOutputDeviceAsset packageNameForAssetType:]
  -[MRUOutputDeviceAsset initWithPackageName:type:deviceCount:]
  -[MRUOutputDeviceAsset iconForAssetType:]
  -[MRUOutputDeviceAsset initWithIcon:type:deviceCount:]
  -[MRUOutputDeviceAsset localizedDisplayTitleForAssetType:deviceCount:]
  -[MRUOutputDeviceAsset outputDeviceAssetTypeForOutputDeviceRoute:]


MRUNowPlayingContainerView : UIView <MRUVisualStylingProviderObserver>
 @property  UIView *separatorView
 @property  UIView *contentView
 @property  MRUVisualStylingProvider *stylingProvider
 @property  BOOL showSeparator
 @property  BOOL supportsHorizontalLayout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUNowPlayingContainerView stylingProvider]
  -[MRUNowPlayingContainerView setShowSeparator:]
  -[MRUNowPlayingContainerView setStylingProvider:]
  -[MRUNowPlayingContainerView .cxx_destruct]
  -[MRUNowPlayingContainerView layoutSubviews]
  -[MRUNowPlayingContainerView contentView]
  -[MRUNowPlayingContainerView setSupportsHorizontalLayout:]
  -[MRUNowPlayingContainerView visualStylingProviderDidChange:]
  -[MRUNowPlayingContainerView updateVisualStyling]
  -[MRUNowPlayingContainerView sizeThatFits:]
  -[MRUNowPlayingContainerView setSeparatorView:]
  -[MRUNowPlayingContainerView updateVisibility]
  -[MRUNowPlayingContainerView initWithFrame:]
  -[MRUNowPlayingContainerView setContentView:]
  -[MRUNowPlayingContainerView separatorView]
  -[MRUNowPlayingContainerView supportsHorizontalLayout]
  -[MRUNowPlayingContainerView showSeparator]


MediaControlsCollectionViewController : UIViewController <UIScrollViewDelegate, UIGestureRecognizerDelegate>
 @property  _MediaControlsTapHoldGestureRecognizer *tapGestureRecognizer
 @property  UIScrollView *scrollView
 @property  long long displayMode
 @property  double preferredItemHeight
 @property  <MediaControlsCollectionViewDataSource> *dataSource
 @property  <MediaControlsCollectionViewDelegate> *delegate
 @property  {UIEdgeInsets=dddd} scrollViewInsets
 @property  @? dismissalBlock
 @property  NSArray *visibleTopViewControllers
 @property  NSArray *visibleBottomViewControllers
 @property  NSArray *visibleViewControllers
 @property  long long selectedItemIndex
 @property  NSIndexSet *visibleIndexes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsCollectionViewController frameAnimator]
  +[MediaControlsCollectionViewController alphaAnimatorWithAnimations:]

  // instance methods
  -[MediaControlsCollectionViewController performBatchUpdates:]
  -[MediaControlsCollectionViewController setScrollView:]
  -[MediaControlsCollectionViewController _commonInit]
  -[MediaControlsCollectionViewController setTapGestureRecognizer:]
  -[MediaControlsCollectionViewController displayMode]
  -[MediaControlsCollectionViewController scrollView]
  -[MediaControlsCollectionViewController updateContentInsets]
  -[MediaControlsCollectionViewController visibleIndexes]
  -[MediaControlsCollectionViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[MediaControlsCollectionViewController setDataSource:]
  -[MediaControlsCollectionViewController insertItemAtIndex:]
  -[MediaControlsCollectionViewController .cxx_destruct]
  -[MediaControlsCollectionViewController viewDidLoad]
  -[MediaControlsCollectionViewController setDelegate:]
  -[MediaControlsCollectionViewController viewDidAppear:]
  -[MediaControlsCollectionViewController initWithNibName:bundle:]
  -[MediaControlsCollectionViewController shouldAutomaticallyForwardAppearanceMethods]
  -[MediaControlsCollectionViewController dataSource]
  -[MediaControlsCollectionViewController itemAtPoint:]
  -[MediaControlsCollectionViewController init]
  -[MediaControlsCollectionViewController scrollViewDidEndDragging:willDecelerate:]
  -[MediaControlsCollectionViewController scrollViewDidScroll:]
  -[MediaControlsCollectionViewController tapGestureRecognizer]
  -[MediaControlsCollectionViewController _verticalSpacing]
  -[MediaControlsCollectionViewController _updateContentSize]
  -[MediaControlsCollectionViewController dismissViewControllerAnimated:completion:]
  -[MediaControlsCollectionViewController viewWillDisappear:]
  -[MediaControlsCollectionViewController viewDidLayoutSubviews]
  -[MediaControlsCollectionViewController gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsCollectionViewController viewWillAppear:]
  -[MediaControlsCollectionViewController setDisplayMode:]
  -[MediaControlsCollectionViewController delegate]
  -[MediaControlsCollectionViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[MediaControlsCollectionViewController _reloadDataIfNeeded]
  -[MediaControlsCollectionViewController dismissalBlock]
  -[MediaControlsCollectionViewController reloadData]
  -[MediaControlsCollectionViewController _frameForViewAtIndex:]
  -[MediaControlsCollectionViewController scrollViewDidEndDecelerating:]
  -[MediaControlsCollectionViewController viewDidDisappear:]
  -[MediaControlsCollectionViewController setDismissalBlock:]
  -[MediaControlsCollectionViewController _removeViewController:]
  -[MediaControlsCollectionViewController _handleScrollViewTap:]
  -[MediaControlsCollectionViewController _backgroundCornerRadius]
  -[MediaControlsCollectionViewController selectedItemIndex]
  -[MediaControlsCollectionViewController setSelectedItemIndex:]
  -[MediaControlsCollectionViewController _totalHeight]
  -[MediaControlsCollectionViewController visibleViewControllers]
  -[MediaControlsCollectionViewController _tileViews]
  -[MediaControlsCollectionViewController viewControllerForSelectedItem]
  -[MediaControlsCollectionViewController _transitionToVisible:]
  -[MediaControlsCollectionViewController preferredItemHeightGivenWidth:]
  -[MediaControlsCollectionViewController viewControllerForItemAtIndex:]
  -[MediaControlsCollectionViewController dequeueReusableViewControllerForItemAtIndex:]
  -[MediaControlsCollectionViewController deleteItemAtIndex:]
  -[MediaControlsCollectionViewController reloadItemAtIndex:]
  -[MediaControlsCollectionViewController moveItemAtIndex:toIndex:]
  -[MediaControlsCollectionViewController setSelectedItemIndex:animated:shouldScroll:]
  -[MediaControlsCollectionViewController preferredItemHeight]
  -[MediaControlsCollectionViewController _wantsTapGestureRecognizer]
  -[MediaControlsCollectionViewController _beginAppearanceTransitionForChildViewControllers:animated:]
  -[MediaControlsCollectionViewController _endAppearanceTransitionForChildViewControllers]
  -[MediaControlsCollectionViewController _adjustForEnvironmentChangeIfNeededWithSize:transitionCoordinator:]
  -[MediaControlsCollectionViewController _setSelectedItemIndex:animated:shouldScroll:shouldNotifyDelegate:withReason:]
  -[MediaControlsCollectionViewController _updateFramesForActiveViewControllersWithCoordinator:assumingSize:]
  -[MediaControlsCollectionViewController insertItemsAtIndexes:]
  -[MediaControlsCollectionViewController deleteItemsAtIndexes:]
  -[MediaControlsCollectionViewController reloadItemsAtIndexes:]
  -[MediaControlsCollectionViewController _canPerformBatchUpdates]
  -[MediaControlsCollectionViewController _dequeueAndPerformBatchUpdatesIfNeeded]
  -[MediaControlsCollectionViewController _setHighlighted:forViewControllerAtIndex:]
  -[MediaControlsCollectionViewController _indexesOfItemsInRect:]
  -[MediaControlsCollectionViewController _insertViewControllerForIndex:]
  -[MediaControlsCollectionViewController _setFrame:forVisibleViewAtIndex:]
  -[MediaControlsCollectionViewController _enumerateActiveViewControllers:]
  -[MediaControlsCollectionViewController _updateFrameForViewController:atIndex:withCoordinator:assumingSize:]
  -[MediaControlsCollectionViewController _reapViewAtIndex:]
  -[MediaControlsCollectionViewController _populateViewsInFrame:]
  -[MediaControlsCollectionViewController _reapActiveViews]
  -[MediaControlsCollectionViewController _removeInactiveViewControllersFromHierarchy]
  -[MediaControlsCollectionViewController _preferredSelectedItemHeight]
  -[MediaControlsCollectionViewController _regularItemHeight]
  -[MediaControlsCollectionViewController _scrollToSelectedItemAnimated:]
  -[MediaControlsCollectionViewController _isScrollViewAnimatingScroll]
  -[MediaControlsCollectionViewController _selectedItemHeightInSize:]
  -[MediaControlsCollectionViewController _selectedItemHeightInSize:shouldIgnoreInsets:]
  -[MediaControlsCollectionViewController _rangeOfItemsInRect:]
  -[MediaControlsCollectionViewController _closestItemAtPoint:]
  -[MediaControlsCollectionViewController _frameForViewAtIndex:size:]
  -[MediaControlsCollectionViewController _frameForViewAtIndex:displayMode:size:]
  -[MediaControlsCollectionViewController _adjustForEnvironmentChangeWithSize:transitionCoordinator:]
  -[MediaControlsCollectionViewController _transitionToDisplayMode:usingTransitionCoordinator:assumingSize:]
  -[MediaControlsCollectionViewController _transitionTopAndBottomViewControllersToVisible:completion:]
  -[MediaControlsCollectionViewController _visibleTopViewControllers]
  -[MediaControlsCollectionViewController _visibleBottomViewControllers]
  -[MediaControlsCollectionViewController _beginAppearanceTransitionIfNeeded:forChildViewController:animated:]
  -[MediaControlsCollectionViewController _endAppearanceTransitionForChildViewControllerIfNeeded:]
  -[MediaControlsCollectionViewController _setHighlighted:forViewController:]
  -[MediaControlsCollectionViewController viewWillTransitionToSize:]
  -[MediaControlsCollectionViewController viewControllerForItemAtPoint:]
  -[MediaControlsCollectionViewController visibleTopViewControllers]
  -[MediaControlsCollectionViewController visibleBottomViewControllers]
  -[MediaControlsCollectionViewController setScrollViewInsets:]
  -[MediaControlsCollectionViewController scrollToSelectedItemAnimated:]
  -[MediaControlsCollectionViewController scrollViewInsets]
  -[MediaControlsCollectionViewController setPreferredItemHeight:]


_MediaControlsTapHoldGestureRecognizer : UIGestureRecognizer
  // instance methods
  -[_MediaControlsTapHoldGestureRecognizer touchesBegan:withEvent:]
  -[_MediaControlsTapHoldGestureRecognizer touchesMoved:withEvent:]
  -[_MediaControlsTapHoldGestureRecognizer touchesEnded:withEvent:]


MRUFeatureFlagProvider : NSObject
  // class methods
  +[MRUFeatureFlagProvider isDynamicCoversheetEnabled]
  +[MRUFeatureFlagProvider isVolumeHUDSymbolsEnabled]
  +[MRUFeatureFlagProvider isMediaSuggestionsUnlockedEnabled]


MRUNowPlayingHeaderView : UIControl <MRUVisualStylingProviderObserver, UIPointerInteractionDelegate>
 @property  MRUNowPlayingLabelView *labelView
 @property  MRUArtworkView *artworkView
 @property  MRUNowPlayingRoutingButton *routingButton
 @property  MRUTransportButton *transportButton
 @property  MPAVRoute *route
 @property  NSString *title
 @property  NSString *subtitle
 @property  NSString *placeholderText
 @property  BOOL showPlaceholderText
 @property  BOOL showArtworkView
 @property  BOOL showTransportButton
 @property  BOOL showRoutingButton
 @property  BOOL marqueeEnabled
 @property  long long layout
 @property  long long context
 @property  MRUVisualStylingProvider *stylingProvider
 @property  double textCenterOffsetY
 @property  BOOL useArtworkOverrideFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} artworkOverrideFrame
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUNowPlayingHeaderView stylingProvider]
  -[MRUNowPlayingHeaderView pointerInteraction:styleForRegion:]
  -[MRUNowPlayingHeaderView route]
  -[MRUNowPlayingHeaderView setTitle:]
  -[MRUNowPlayingHeaderView placeholderText]
  -[MRUNowPlayingHeaderView labelView]
  -[MRUNowPlayingHeaderView setStylingProvider:]
  -[MRUNowPlayingHeaderView .cxx_destruct]
  -[MRUNowPlayingHeaderView layoutSubviews]
  -[MRUNowPlayingHeaderView setPlaceholderText:]
  -[MRUNowPlayingHeaderView setSubtitle:]
  -[MRUNowPlayingHeaderView artworkOverrideFrame]
  -[MRUNowPlayingHeaderView setTextCenterOffsetY:]
  -[MRUNowPlayingHeaderView setUseArtworkOverrideFrame:]
  -[MRUNowPlayingHeaderView artworkView]
  -[MRUNowPlayingHeaderView setMarqueeEnabled:]
  -[MRUNowPlayingHeaderView visualStylingProviderDidChange:]
  -[MRUNowPlayingHeaderView updateVisualStyling]
  -[MRUNowPlayingHeaderView sizeThatFits:]
  -[MRUNowPlayingHeaderView showArtworkView]
  -[MRUNowPlayingHeaderView prepareForReuse]
  -[MRUNowPlayingHeaderView subtitle]
  -[MRUNowPlayingHeaderView showRoutingButton]
  -[MRUNowPlayingHeaderView updateVisibility]
  -[MRUNowPlayingHeaderView setArtworkOverrideFrame:]
  -[MRUNowPlayingHeaderView isMarqueeEnabled]
  -[MRUNowPlayingHeaderView setShowRoutingButton:]
  -[MRUNowPlayingHeaderView title]
  -[MRUNowPlayingHeaderView showTransportButton]
  -[MRUNowPlayingHeaderView initWithFrame:]
  -[MRUNowPlayingHeaderView setShowTransportButton:]
  -[MRUNowPlayingHeaderView pointInside:withEvent:]
  -[MRUNowPlayingHeaderView routingButton]
  -[MRUNowPlayingHeaderView showPlaceholderText]
  -[MRUNowPlayingHeaderView setRoute:]
  -[MRUNowPlayingHeaderView setShowPlaceholderText:]
  -[MRUNowPlayingHeaderView transportButton]
  -[MRUNowPlayingHeaderView setContext:]
  -[MRUNowPlayingHeaderView updateArtworkStyle]
  -[MRUNowPlayingHeaderView setLayout:]
  -[MRUNowPlayingHeaderView pointerInteraction:regionForRequest:defaultRegion:]
  -[MRUNowPlayingHeaderView beginTrackingWithTouch:withEvent:]
  -[MRUNowPlayingHeaderView setShowArtworkView:]
  -[MRUNowPlayingHeaderView useArtworkOverrideFrame]
  -[MRUNowPlayingHeaderView textInsetForSize:]
  -[MRUNowPlayingHeaderView setLabelView:]
  -[MRUNowPlayingHeaderView layout]
  -[MRUNowPlayingHeaderView textCenterOffsetY]
  -[MRUNowPlayingHeaderView context]


MRUViewServiceUpNextViewController : UIViewController <MRUViewServiceViewController>
 @property  UILabel *placeholderLabel
 @property  MPMediaControlsConfiguration *configuration
 @property  @? dismissalBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUViewServiceUpNextViewController configuration]
  -[MRUViewServiceUpNextViewController .cxx_destruct]
  -[MRUViewServiceUpNextViewController viewDidLoad]
  -[MRUViewServiceUpNextViewController setPlaceholderLabel:]
  -[MRUViewServiceUpNextViewController placeholderLabel]
  -[MRUViewServiceUpNextViewController viewDidLayoutSubviews]
  -[MRUViewServiceUpNextViewController dismissalBlock]
  -[MRUViewServiceUpNextViewController setDismissalBlock:]
  -[MRUViewServiceUpNextViewController setConfiguration:]
  -[MRUViewServiceUpNextViewController transitionToVisible:animated:]


MRUUpNextDataSource : NSObject
 @property  NSDictionary *responseItemsByIdentifier
 @property  MPCPlayerResponse *response
 @property  <MRUUpNextDataSourceDelegate> *delegate
 @property  NSArray *responseItemIDs

  // instance methods
  -[MRUUpNextDataSource objectForKeyedSubscript:]
  -[MRUUpNextDataSource .cxx_destruct]
  -[MRUUpNextDataSource setDelegate:]
  -[MRUUpNextDataSource init]
  -[MRUUpNextDataSource response]
  -[MRUUpNextDataSource delegate]
  -[MRUUpNextDataSource setResponse:]
  -[MRUUpNextDataSource playItemWithIdentifier:completion:]
  -[MRUUpNextDataSource removeResponseItemWithIdentifier:completion:]
  -[MRUUpNextDataSource moveReponseItemToNextWithIdentifier:completion:]
  -[MRUUpNextDataSource moveReponseItemWithIdentifier:afterResponseItemWithIdentifier:completion:]
  -[MRUUpNextDataSource responseItemIDs]
  -[MRUUpNextDataSource updateContentItems]
  -[MRUUpNextDataSource responseItemForIdentifier:]
  -[MRUUpNextDataSource canMoveResponseItemWithIdentifier:]
  -[MRUUpNextDataSource responseItemsByIdentifier]
  -[MRUUpNextDataSource setResponseItemsByIdentifier:]


MRUVolumeHUDRouteDescriptionProvider : NSObject <MRUSystemOutputDeviceRouteControllerObserver>
 @property  MRUOutputDeviceAsset *outputDeviceAsset
 @property  MRUOutputDeviceAsset *overrideOutputDeviceAsset
 @property  <MRUVolumeHUDRouteDescriptionProviderDelegate> *delegate
 @property  CCUICAPackageDescription *packageDescription
 @property  NSString *localizedDisplayTitle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUVolumeHUDRouteDescriptionProvider .cxx_destruct]
  -[MRUVolumeHUDRouteDescriptionProvider setDelegate:]
  -[MRUVolumeHUDRouteDescriptionProvider init]
  -[MRUVolumeHUDRouteDescriptionProvider packageDescription]
  -[MRUVolumeHUDRouteDescriptionProvider delegate]
  -[MRUVolumeHUDRouteDescriptionProvider outputDeviceAsset]
  -[MRUVolumeHUDRouteDescriptionProvider localizedDisplayTitle]
  -[MRUVolumeHUDRouteDescriptionProvider packageStateForVolumeValue:]
  -[MRUVolumeHUDRouteDescriptionProvider cycleOverridePackageDescriptions]
  -[MRUVolumeHUDRouteDescriptionProvider resetOverridePackageDescription]
  -[MRUVolumeHUDRouteDescriptionProvider systemOutputDeviceRouteControllerDidUpdateOutputDevices:]
  -[MRUVolumeHUDRouteDescriptionProvider updateOutputDeviceAsset]
  -[MRUVolumeHUDRouteDescriptionProvider setOverrideOutputDeviceAsset:]
  -[MRUVolumeHUDRouteDescriptionProvider setOutputDeviceAsset:]
  -[MRUVolumeHUDRouteDescriptionProvider overrideOutputDeviceAsset]


MRUNowPlayingQueueHandoffCoordinator : NSObject
 @property  <MRUNowPlayingQueueHandoffCoordinatorDelegate> *delegate
 @property  MRNowPlayingPlayerResponse *response
 @property  BOOL hideArtwork
 @property  {CGSize=dd} artworkSize

  // instance methods
  -[MRUNowPlayingQueueHandoffCoordinator endTransition]
  -[MRUNowPlayingQueueHandoffCoordinator .cxx_destruct]
  -[MRUNowPlayingQueueHandoffCoordinator setDelegate:]
  -[MRUNowPlayingQueueHandoffCoordinator beginTransition]
  -[MRUNowPlayingQueueHandoffCoordinator response]
  -[MRUNowPlayingQueueHandoffCoordinator delegate]
  -[MRUNowPlayingQueueHandoffCoordinator artworkSize]
  -[MRUNowPlayingQueueHandoffCoordinator setResponse:]
  -[MRUNowPlayingQueueHandoffCoordinator setArtworkSize:]
  -[MRUNowPlayingQueueHandoffCoordinator setupTransition]
  -[MRUNowPlayingQueueHandoffCoordinator completeHandoff]
  -[MRUNowPlayingQueueHandoffCoordinator hideArtwork]
  -[MRUNowPlayingQueueHandoffCoordinator setHideArtwork:]


MRUViewServiceEndpointTableViewCell : UITableViewCell <MRUVisualStylingProviderObserver, UIPointerInteractionDelegate>
 @property  MRUNowPlayingHeaderView *headerView
 @property  UIView *separatorView
 @property  MRUVisualStylingProvider *stylingProvider
 @property  {UIEdgeInsets=dddd} contentEdgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUViewServiceEndpointTableViewCell stylingProvider]
  -[MRUViewServiceEndpointTableViewCell pointerInteraction:styleForRegion:]
  -[MRUViewServiceEndpointTableViewCell contentEdgeInsets]
  -[MRUViewServiceEndpointTableViewCell setStylingProvider:]
  -[MRUViewServiceEndpointTableViewCell _setShouldHaveFullLengthBottomSeparator:]
  -[MRUViewServiceEndpointTableViewCell .cxx_destruct]
  -[MRUViewServiceEndpointTableViewCell layoutSubviews]
  -[MRUViewServiceEndpointTableViewCell setContentEdgeInsets:]
  -[MRUViewServiceEndpointTableViewCell visualStylingProviderDidChange:]
  -[MRUViewServiceEndpointTableViewCell updateVisualStyling]
  -[MRUViewServiceEndpointTableViewCell sizeThatFits:]
  -[MRUViewServiceEndpointTableViewCell prepareForReuse]
  -[MRUViewServiceEndpointTableViewCell headerView]
  -[MRUViewServiceEndpointTableViewCell initWithStyle:reuseIdentifier:]
  -[MRUViewServiceEndpointTableViewCell separatorView]
  -[MRUViewServiceEndpointTableViewCell pointerInteraction:regionForRequest:defaultRegion:]


MediaControlsVolumeContainerView : UIView <UIGestureRecognizerDelegate>
 @property  MediaControlsRelativeVolumeStepper *volumeStepper
 @property  unsigned int volumeCapabilities
 @property  MediaControlsVolumeSlider *volumeSlider
 @property  BOOL transitioning
 @property  BOOL onScreen
 @property  long long style
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsVolumeContainerView setVolumeCapabilities:]
  -[MediaControlsVolumeContainerView volumeCapabilities]
  -[MediaControlsVolumeContainerView traitCollectionDidChange:]
  -[MediaControlsVolumeContainerView didMoveToSuperview]
  -[MediaControlsVolumeContainerView isOnScreen]
  -[MediaControlsVolumeContainerView .cxx_destruct]
  -[MediaControlsVolumeContainerView setStyle:]
  -[MediaControlsVolumeContainerView layoutSubviews]
  -[MediaControlsVolumeContainerView setOnScreen:]
  -[MediaControlsVolumeContainerView sizeThatFits:]
  -[MediaControlsVolumeContainerView setVisualStylingProvider:]
  -[MediaControlsVolumeContainerView volumeSlider]
  -[MediaControlsVolumeContainerView setVolumeSlider:]
  -[MediaControlsVolumeContainerView setTransitioning:]
  -[MediaControlsVolumeContainerView gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsVolumeContainerView initWithFrame:]
  -[MediaControlsVolumeContainerView isTransitioning]
  -[MediaControlsVolumeContainerView didMoveToWindow]
  -[MediaControlsVolumeContainerView dealloc]
  -[MediaControlsVolumeContainerView visualStylingProvider]
  -[MediaControlsVolumeContainerView style]
  -[MediaControlsVolumeContainerView initWithFrame:slider:]
  -[MediaControlsVolumeContainerView _updateVolumeStyle]
  -[MediaControlsVolumeContainerView _updateVolumeCapabilities]
  -[MediaControlsVolumeContainerView volumeStepper]
  -[MediaControlsVolumeContainerView setVolumeStepper:]


MRUControlCenterCollectionViewCell : UICollectionViewCell <UIPointerInteractionDelegate>
 @property  MediaControlsMaterialView *materialView
 @property  UIView *transformView
 @property  MRUNowPlayingHeaderView *headerView
 @property  {UIEdgeInsets=dddd} contentEdgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUControlCenterCollectionViewCell setHighlighted:]
  -[MRUControlCenterCollectionViewCell pointerInteraction:styleForRegion:]
  -[MRUControlCenterCollectionViewCell setMaterialView:]
  -[MRUControlCenterCollectionViewCell contentEdgeInsets]
  -[MRUControlCenterCollectionViewCell .cxx_destruct]
  -[MRUControlCenterCollectionViewCell layoutSubviews]
  -[MRUControlCenterCollectionViewCell setContentEdgeInsets:]
  -[MRUControlCenterCollectionViewCell materialView]
  -[MRUControlCenterCollectionViewCell setTransitionTransform:isVisible:]
  -[MRUControlCenterCollectionViewCell transformView]
  -[MRUControlCenterCollectionViewCell setTransformView:]
  -[MRUControlCenterCollectionViewCell sizeThatFits:]
  -[MRUControlCenterCollectionViewCell prepareForReuse]
  -[MRUControlCenterCollectionViewCell headerView]
  -[MRUControlCenterCollectionViewCell initWithFrame:]
  -[MRUControlCenterCollectionViewCell pointerInteraction:regionForRequest:defaultRegion:]


MediaControlsPresentationController : UIPreviewPresentationController <UIGestureRecognizerDelegate>
 @property  MTMaterialView *materialView
 @property  UIView *presentingView
 @property  {CGPoint=dd} sourcePoint
 @property  {UIEdgeInsets=dddd} edgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MediaControlsPresentationController _backgroundEffectForTraitCollection:interactive:]

  // instance methods
  -[MediaControlsPresentationController setMaterialView:]
  -[MediaControlsPresentationController .cxx_destruct]
  -[MediaControlsPresentationController dismissalTransitionWillBegin]
  -[MediaControlsPresentationController frameOfPresentedViewInContainerView]
  -[MediaControlsPresentationController setEdgeInsets:]
  -[MediaControlsPresentationController materialView]
  -[MediaControlsPresentationController dismissalTransitionDidEnd:]
  -[MediaControlsPresentationController edgeInsets]
  -[MediaControlsPresentationController _shouldRespectDefinesPresentationContext]
  -[MediaControlsPresentationController gestureRecognizer:shouldReceiveTouch:]
  -[MediaControlsPresentationController presentingView]
  -[MediaControlsPresentationController presentationTransitionWillBegin]
  -[MediaControlsPresentationController shouldPresentInFullscreen]
  -[MediaControlsPresentationController setPresentingView:]
  -[MediaControlsPresentationController setSourcePoint:]
  -[MediaControlsPresentationController _dismissTap:]
  -[MediaControlsPresentationController sourcePoint]


MRUVolumeNowPlayingView : UIView <MRUVisualStylingProviderObserver>
 @property  UILabel *titleLabel
 @property  UIImageView *imageView
 @property  UIImage *icon
 @property  NSString *title
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUVolumeNowPlayingView stylingProvider]
  -[MRUVolumeNowPlayingView titleLabel]
  -[MRUVolumeNowPlayingView imageView]
  -[MRUVolumeNowPlayingView icon]
  -[MRUVolumeNowPlayingView updateContentSizeCategory]
  -[MRUVolumeNowPlayingView setTitle:]
  -[MRUVolumeNowPlayingView setStylingProvider:]
  -[MRUVolumeNowPlayingView .cxx_destruct]
  -[MRUVolumeNowPlayingView setTitleLabel:]
  -[MRUVolumeNowPlayingView layoutSubviews]
  -[MRUVolumeNowPlayingView visualStylingProviderDidChange:]
  -[MRUVolumeNowPlayingView updateVisualStyling]
  -[MRUVolumeNowPlayingView sizeThatFits:]
  -[MRUVolumeNowPlayingView setIcon:]
  -[MRUVolumeNowPlayingView title]
  -[MRUVolumeNowPlayingView initWithFrame:]
  -[MRUVolumeNowPlayingView setImageView:]


MRUMediaSuggestionCollectionViewCell : UICollectionViewCell <MRUVisualStylingProviderObserver, UIPointerInteractionDelegate>
 @property  UIActivityIndicatorView *activityView
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel
 @property  MRUArtworkView *artworkView
 @property  NSString *title
 @property  NSString *subtitle
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long layout
 @property  BOOL showActivityIndicator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUMediaSuggestionCollectionViewCell setHighlighted:]
  -[MRUMediaSuggestionCollectionViewCell stylingProvider]
  -[MRUMediaSuggestionCollectionViewCell titleLabel]
  -[MRUMediaSuggestionCollectionViewCell setSubtitleLabel:]
  -[MRUMediaSuggestionCollectionViewCell pointerInteraction:styleForRegion:]
  -[MRUMediaSuggestionCollectionViewCell updateContentSizeCategory]
  -[MRUMediaSuggestionCollectionViewCell setTitle:]
  -[MRUMediaSuggestionCollectionViewCell setStylingProvider:]
  -[MRUMediaSuggestionCollectionViewCell .cxx_destruct]
  -[MRUMediaSuggestionCollectionViewCell setTitleLabel:]
  -[MRUMediaSuggestionCollectionViewCell layoutSubviews]
  -[MRUMediaSuggestionCollectionViewCell setSubtitle:]
  -[MRUMediaSuggestionCollectionViewCell artworkView]
  -[MRUMediaSuggestionCollectionViewCell visualStylingProviderDidChange:]
  -[MRUMediaSuggestionCollectionViewCell updateVisualStyling]
  -[MRUMediaSuggestionCollectionViewCell subtitleLabel]
  -[MRUMediaSuggestionCollectionViewCell prepareForReuse]
  -[MRUMediaSuggestionCollectionViewCell subtitle]
  -[MRUMediaSuggestionCollectionViewCell title]
  -[MRUMediaSuggestionCollectionViewCell initWithFrame:]
  -[MRUMediaSuggestionCollectionViewCell setActivityView:]
  -[MRUMediaSuggestionCollectionViewCell activityView]
  -[MRUMediaSuggestionCollectionViewCell setLayout:]
  -[MRUMediaSuggestionCollectionViewCell pointerInteraction:regionForRequest:defaultRegion:]
  -[MRUMediaSuggestionCollectionViewCell setShowActivityIndicator:]
  -[MRUMediaSuggestionCollectionViewCell layout]
  -[MRUMediaSuggestionCollectionViewCell showActivityIndicator]
  -[MRUMediaSuggestionCollectionViewCell updateVisiblity]


MRUVolumeViewController : UIViewController <MRUSystemOutputDeviceRouteControllerObserver, MRUSystemVolumeControllerDelegate, MPVolumeDisplaying, CCUIGroupRendering, UIGestureRecognizerDelegate, CCUIContentModuleContentViewController>
 @property  MRUVolumeView *view
 @property  MRUVolumeView *viewIfLoaded
 @property  MRUSystemVolumeController *volumeController
 @property  <MRUVolumeViewControllerDelegate> *delegate
 @property  BOOL primaryInteractionEnabled
 @property  BOOL secondaryInteractionEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIWindowScene *windowSceneForVolumeDisplay
 @property  BOOL onScreenForVolumeDisplay
 @property  NSString *volumeAudioCategory
 @property  BOOL onScreen
 @property  BOOL groupRenderingRequired
 @property  NSArray *punchOutRenderingViews
 @property  NSArray *punchOutRootLayers
 @property  double preferredExpandedContentHeight
 @property  double preferredExpandedContentWidth
 @property  double preferredExpandedContinuousCornerRadius
 @property  BOOL providesOwnPlatter
 @property  UIViewPropertyAnimator *customAnimator
 @property  BOOL shouldPerformHoverInteraction
 @property  BOOL shouldPerformClickInteraction

  // instance methods
  -[MRUVolumeViewController volumeAudioCategory]
  -[MRUVolumeViewController didTransitionToExpandedContentMode:]
  -[MRUVolumeViewController isOnScreen]
  -[MRUVolumeViewController setVolumeController:]
  -[MRUVolumeViewController .cxx_destruct]
  -[MRUVolumeViewController viewDidLoad]
  -[MRUVolumeViewController setDelegate:]
  -[MRUVolumeViewController volumeController]
  -[MRUVolumeViewController preferredExpandedContentHeight]
  -[MRUVolumeViewController windowSceneForVolumeDisplay]
  -[MRUVolumeViewController providesOwnPlatter]
  -[MRUVolumeViewController viewWillDisappear:]
  -[MRUVolumeViewController preferredExpandedContentWidth]
  -[MRUVolumeViewController gestureRecognizer:shouldReceiveTouch:]
  -[MRUVolumeViewController viewWillAppear:]
  -[MRUVolumeViewController dismiss]
  -[MRUVolumeViewController punchOutRootLayers]
  -[MRUVolumeViewController delegate]
  -[MRUVolumeViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[MRUVolumeViewController shouldExpandModuleOnTouch:]
  -[MRUVolumeViewController dealloc]
  -[MRUVolumeViewController loadView]
  -[MRUVolumeViewController punchOutRenderingViews]
  -[MRUVolumeViewController isGroupRenderingRequired]
  -[MRUVolumeViewController _canShowWhileLocked]
  -[MRUVolumeViewController primaryInteractionEnabled]
  -[MRUVolumeViewController setPrimaryInteractionEnabled:]
  -[MRUVolumeViewController secondaryInteractionEnabled]
  -[MRUVolumeViewController setSecondaryInteractionEnabled:]
  -[MRUVolumeViewController systemOutputDeviceRouteControllerDidUpdateOutputDevices:]
  -[MRUVolumeViewController systemVolumeController:didChangeVolumeAvailable:effectiveVolumeValue:forType:]
  -[MRUVolumeViewController primarySliderValueDidChange:]
  -[MRUVolumeViewController secondarySliderValueDidChange:]
  -[MRUVolumeViewController updateSliderAsset]
  -[MRUVolumeViewController updatePrimarySliderVolumeValue]
  -[MRUVolumeViewController updateSecondarySliderVolumeValue]
  -[MRUVolumeViewController initWithVolumeController:]


MRUButton : MPButton <MRUVisualStylingProviderObserver>
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long pointerStyle
 @property  double cursorScale
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUButton setHighlighted:]
  -[MRUButton stylingProvider]
  -[MRUButton setStylingProvider:]
  -[MRUButton .cxx_destruct]
  -[MRUButton cursorScale]
  -[MRUButton visualStylingProviderDidChange:]
  -[MRUButton updateVisualStyling]
  -[MRUButton setCursorScale:]
  -[MRUButton setPointerStyle:]
  -[MRUButton initWithFrame:]
  -[MRUButton pointerStyleWithProposedEffect:proposedShape:]
  -[MRUButton setEnabled:]
  -[MRUButton pointerStyle]


MediaControlsRouteView : UIView <MTVisualStylingProviderObservingPrivate>
 @property  UILabel *titleLabel
 @property  CCUICAPackageView *packageView
 @property  UILabel *messageLabel
 @property  NSTimer *messageTimer
 @property  BOOL displayMessage
 @property  NSString *title
 @property  NSString *packageName
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  BOOL labelHidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsRouteView _contentSizeCategoryDidChange]
  -[MediaControlsRouteView titleLabel]
  -[MediaControlsRouteView setMessageLabel:]
  -[MediaControlsRouteView setTitle:]
  -[MediaControlsRouteView isLabelHidden]
  -[MediaControlsRouteView setLabelHidden:]
  -[MediaControlsRouteView messageLabel]
  -[MediaControlsRouteView .cxx_destruct]
  -[MediaControlsRouteView setTitleLabel:]
  -[MediaControlsRouteView layoutSubviews]
  -[MediaControlsRouteView providedStylesDidChangeForProvider:]
  -[MediaControlsRouteView sizeThatFits:]
  -[MediaControlsRouteView setVisualStylingProvider:]
  -[MediaControlsRouteView title]
  -[MediaControlsRouteView initWithFrame:]
  -[MediaControlsRouteView packageView]
  -[MediaControlsRouteView setGlyphState:]
  -[MediaControlsRouteView setPackageView:]
  -[MediaControlsRouteView visualStylingProvider]
  -[MediaControlsRouteView displayMessage]
  -[MediaControlsRouteView setDisplayMessage:]
  -[MediaControlsRouteView packageName]
  -[MediaControlsRouteView showMessage:]
  -[MediaControlsRouteView messageTimer]
  -[MediaControlsRouteView setPackageName:]
  -[MediaControlsRouteView setMessageTimer:]
  -[MediaControlsRouteView _updateLabelVisualStyling]


MediaControlsRoundButton : UIControl <MRUVisualStylingProviderObserver>
 @property  CCUICAPackageView *packageView
 @property  UILabel *titleLabel
 @property  MRUShadowView *shadowView
 @property  NSString *title
 @property  NSString *packageName
 @property  NSString *glyphState
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long axis
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} imageFrame
 @property  {CGSize=dd} imageSize
 @property  BOOL labelHidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsRoundButton setHighlighted:]
  -[MediaControlsRoundButton stylingProvider]
  -[MediaControlsRoundButton titleLabel]
  -[MediaControlsRoundButton updateContentSizeCategory]
  -[MediaControlsRoundButton traitCollectionDidChange:]
  -[MediaControlsRoundButton setImageSize:]
  -[MediaControlsRoundButton setTitle:]
  -[MediaControlsRoundButton isLabelHidden]
  -[MediaControlsRoundButton setLabelHidden:]
  -[MediaControlsRoundButton setStylingProvider:]
  -[MediaControlsRoundButton .cxx_destruct]
  -[MediaControlsRoundButton setTitleLabel:]
  -[MediaControlsRoundButton layoutSubviews]
  -[MediaControlsRoundButton controlCenterApplyPrimaryContentShadow]
  -[MediaControlsRoundButton axis]
  -[MediaControlsRoundButton shadowView]
  -[MediaControlsRoundButton setAxis:]
  -[MediaControlsRoundButton visualStylingProviderDidChange:]
  -[MediaControlsRoundButton setSelected:]
  -[MediaControlsRoundButton accessibilityTraits]
  -[MediaControlsRoundButton sizeThatFits:]
  -[MediaControlsRoundButton imageSize]
  -[MediaControlsRoundButton gestureRecognizerShouldBegin:]
  -[MediaControlsRoundButton setShadowView:]
  -[MediaControlsRoundButton isAccessibilityElement]
  -[MediaControlsRoundButton imageFrame]
  -[MediaControlsRoundButton title]
  -[MediaControlsRoundButton initWithFrame:]
  -[MediaControlsRoundButton pointInside:withEvent:]
  -[MediaControlsRoundButton glyphState]
  -[MediaControlsRoundButton packageView]
  -[MediaControlsRoundButton accessibilityFrame]
  -[MediaControlsRoundButton setGlyphState:]
  -[MediaControlsRoundButton setPackageView:]
  -[MediaControlsRoundButton setEnabled:]
  -[MediaControlsRoundButton packageName]
  -[MediaControlsRoundButton setPackageName:]
  -[MediaControlsRoundButton updatePackageVisualStyling]
  -[MediaControlsRoundButton updateLabelVisualStyling]


MRUVolumeView : UIView <CCUIGroupRendering>
 @property  MediaControlsVolumeSliderView *primarySlider
 @property  MediaControlsVolumeSliderView *secondarySlider
 @property  BOOL expanded
 @property  BOOL showSecondarySlider
 @property  BOOL primaryInteractionEnabled
 @property  BOOL secondaryInteractionEnabled
 @property  BOOL groupRenderingRequired
 @property  NSArray *punchOutRenderingViews
 @property  NSArray *punchOutRootLayers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUVolumeView isExpanded]
  -[MRUVolumeView .cxx_destruct]
  -[MRUVolumeView layoutSubviews]
  -[MRUVolumeView updateVisibility]
  -[MRUVolumeView initWithFrame:]
  -[MRUVolumeView punchOutRootLayers]
  -[MRUVolumeView setExpanded:]
  -[MRUVolumeView punchOutRenderingViews]
  -[MRUVolumeView isGroupRenderingRequired]
  -[MRUVolumeView primaryInteractionEnabled]
  -[MRUVolumeView setPrimaryInteractionEnabled:]
  -[MRUVolumeView secondaryInteractionEnabled]
  -[MRUVolumeView setSecondaryInteractionEnabled:]
  -[MRUVolumeView primarySlider]
  -[MRUVolumeView secondarySlider]
  -[MRUVolumeView showSecondarySlider]
  -[MRUVolumeView setShowSecondarySlider:]


MRUPopoverPresentationController : UIPopoverPresentationController
  // instance methods
  -[MRUPopoverPresentationController initWithPresentedViewController:presentingViewController:]
  -[MRUPopoverPresentationController _centersPopoverIfSourceViewNotSet]


MRUMediaSuggestionsView : UIView
 @property  UICollectionViewCompositionalLayout *collectionViewLayout
 @property  UICollectionView *collectionView
 @property  long long layout
 @property  BOOL supportsHorizontalLayout
 @property  {UIEdgeInsets=dddd} contentEdgeInsets

  // instance methods
  -[MRUMediaSuggestionsView numberOfColumns]
  -[MRUMediaSuggestionsView numberOfRows]
  -[MRUMediaSuggestionsView updateCollectionViewLayout]
  -[MRUMediaSuggestionsView contentEdgeInsets]
  -[MRUMediaSuggestionsView .cxx_destruct]
  -[MRUMediaSuggestionsView collectionViewLayout]
  -[MRUMediaSuggestionsView setFrame:]
  -[MRUMediaSuggestionsView layoutSubviews]
  -[MRUMediaSuggestionsView setContentEdgeInsets:]
  -[MRUMediaSuggestionsView setSupportsHorizontalLayout:]
  -[MRUMediaSuggestionsView collectionView]
  -[MRUMediaSuggestionsView setCollectionView:]
  -[MRUMediaSuggestionsView sizeThatFits:]
  -[MRUMediaSuggestionsView itemWidthForWidth:]
  -[MRUMediaSuggestionsView itemHeightForItemWidth:]
  -[MRUMediaSuggestionsView initWithFrame:]
  -[MRUMediaSuggestionsView setLayout:]
  -[MRUMediaSuggestionsView supportsHorizontalLayout]
  -[MRUMediaSuggestionsView layout]


MediaControlsCollectionViewCountData : NSObject <NSCopying>
 @property  long long numberOfItems
 @property  BOOL hasPendingChanges
 @property  NSIndexSet *insertedIndexes
 @property  NSIndexSet *deletedIndexes
 @property  NSIndexSet *updatedIndexes

  // instance methods
  -[MediaControlsCollectionViewCountData updatedIndexes]
  -[MediaControlsCollectionViewCountData insertItemAtIndex:]
  -[MediaControlsCollectionViewCountData .cxx_destruct]
  -[MediaControlsCollectionViewCountData hasPendingChanges]
  -[MediaControlsCollectionViewCountData numberOfItems]
  -[MediaControlsCollectionViewCountData init]
  -[MediaControlsCollectionViewCountData applyChanges]
  -[MediaControlsCollectionViewCountData copyWithZone:]
  -[MediaControlsCollectionViewCountData deletedIndexes]
  -[MediaControlsCollectionViewCountData setNumberOfItems:]
  -[MediaControlsCollectionViewCountData insertedIndexes]
  -[MediaControlsCollectionViewCountData initWithNumberOfItems:]
  -[MediaControlsCollectionViewCountData setHasPendingChanges:]
  -[MediaControlsCollectionViewCountData deleteItemAtIndex:]
  -[MediaControlsCollectionViewCountData reloadItemAtIndex:]
  -[MediaControlsCollectionViewCountData moveItemAtIndex:toIndex:]
  -[MediaControlsCollectionViewCountData insertItemsAtIndexes:]
  -[MediaControlsCollectionViewCountData deleteItemsAtIndexes:]
  -[MediaControlsCollectionViewCountData reloadItemsAtIndexes:]
  -[MediaControlsCollectionViewCountData validateCountForNumberOfItems:]


MediaControlsRelativeVolumeStepper : UIView
 @property  MTMaterialView *increaseBackground
 @property  MTMaterialView *decreaseBackground
 @property  MPButton *increaseButton
 @property  MPButton *decreaseButton
 @property  NSBundle *mediaControlsBundle
 @property  MPVolumeController *volumeController
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MediaControlsRelativeVolumeStepper setIncreaseBackground:]
  -[MediaControlsRelativeVolumeStepper decreaseTouchUpInside:]
  -[MediaControlsRelativeVolumeStepper decreaseButtonHoldBegan:]
  -[MediaControlsRelativeVolumeStepper setVolumeController:]
  -[MediaControlsRelativeVolumeStepper .cxx_destruct]
  -[MediaControlsRelativeVolumeStepper setIncreaseButton:]
  -[MediaControlsRelativeVolumeStepper layoutSubviews]
  -[MediaControlsRelativeVolumeStepper volumeController]
  -[MediaControlsRelativeVolumeStepper increaseButtonHoldBegan:]
  -[MediaControlsRelativeVolumeStepper increaseButtonHoldReleased:]
  -[MediaControlsRelativeVolumeStepper setVisualStylingProvider:]
  -[MediaControlsRelativeVolumeStepper decreaseBackground]
  -[MediaControlsRelativeVolumeStepper increaseTouchUpInside:]
  -[MediaControlsRelativeVolumeStepper initWithFrame:]
  -[MediaControlsRelativeVolumeStepper increaseBackground]
  -[MediaControlsRelativeVolumeStepper setDecreaseButton:]
  -[MediaControlsRelativeVolumeStepper decreaseButtonHoldReleased:]
  -[MediaControlsRelativeVolumeStepper visualStylingProvider]
  -[MediaControlsRelativeVolumeStepper decreaseButton]
  -[MediaControlsRelativeVolumeStepper setDecreaseBackground:]
  -[MediaControlsRelativeVolumeStepper increaseButton]
  -[MediaControlsRelativeVolumeStepper mediaControlsBundle]
  -[MediaControlsRelativeVolumeStepper setMediaControlsBundle:]


MRUVolumeBackgroundView : UIView
 @property  MRUOutputDeviceAssetView *primaryAssetView
 @property  MRUOutputDeviceAssetView *secondaryAssetView
 @property  MRUVolumeNowPlayingView *nowPlayingView
 @property  MediaControlsBluetoothListeningModeButton *primaryListeningModeButton
 @property  MediaControlsBluetoothListeningModeButton *secondaryListeningModeButton
 @property  MediaControlsExpandableButton *spatialAudioModeButton
 @property  MRUVisualStylingProvider *stylingProvider
 @property  BOOL showSecondaryAssetView
 @property  BOOL showPrimaryListeningModeButton
 @property  BOOL showNowPlayingView
 @property  BOOL showSecondaryListeningModeButton
 @property  BOOL showSpatialAudioModeButton
 @property  BOOL hasExpandedButtons

  // instance methods
  -[MRUVolumeBackgroundView stylingProvider]
  -[MRUVolumeBackgroundView layoutSubviewsVertical]
  -[MRUVolumeBackgroundView layoutSubviewsHorizontal]
  -[MRUVolumeBackgroundView setStylingProvider:]
  -[MRUVolumeBackgroundView .cxx_destruct]
  -[MRUVolumeBackgroundView layoutSubviews]
  -[MRUVolumeBackgroundView updateVisibility]
  -[MRUVolumeBackgroundView initWithFrame:]
  -[MRUVolumeBackgroundView nowPlayingView]
  -[MRUVolumeBackgroundView setNowPlayingView:]
  -[MRUVolumeBackgroundView setShowSecondaryAssetView:]
  -[MRUVolumeBackgroundView setShowNowPlayingView:]
  -[MRUVolumeBackgroundView setShowPrimaryListeningModeButton:]
  -[MRUVolumeBackgroundView setShowSecondaryListeningModeButton:]
  -[MRUVolumeBackgroundView setShowSpatialAudioModeButton:]
  -[MRUVolumeBackgroundView hasExpandedButtons]
  -[MRUVolumeBackgroundView expandButton:]
  -[MRUVolumeBackgroundView collapseExpandableButtons]
  -[MRUVolumeBackgroundView primaryAssetView]
  -[MRUVolumeBackgroundView setPrimaryAssetView:]
  -[MRUVolumeBackgroundView secondaryAssetView]
  -[MRUVolumeBackgroundView setSecondaryAssetView:]
  -[MRUVolumeBackgroundView primaryListeningModeButton]
  -[MRUVolumeBackgroundView setPrimaryListeningModeButton:]
  -[MRUVolumeBackgroundView secondaryListeningModeButton]
  -[MRUVolumeBackgroundView setSecondaryListeningModeButton:]
  -[MRUVolumeBackgroundView spatialAudioModeButton]
  -[MRUVolumeBackgroundView setSpatialAudioModeButton:]
  -[MRUVolumeBackgroundView showSecondaryAssetView]
  -[MRUVolumeBackgroundView showPrimaryListeningModeButton]
  -[MRUVolumeBackgroundView showNowPlayingView]
  -[MRUVolumeBackgroundView showSecondaryListeningModeButton]
  -[MRUVolumeBackgroundView showSpatialAudioModeButton]


MRUVolumeBackgroundViewController : UIViewController <MRUSystemOutputDeviceRouteControllerObserver, MRUSpatialAudioPreferencesControllerDelegate, MRNowPlayingAudioFormatControllerDelegate, UIGestureRecognizerDelegate, CCUIContentModuleBackgroundViewController>
 @property  MRUVolumeBackgroundView *view
 @property  MRUVolumeBackgroundView *viewIfLoaded
 @property  MRUSystemOutputDeviceRouteController *outputDeviceRouteController
 @property  MRUSpatialAudioPreferencesController *spatialAudioPreferencesController
 @property  MRNowPlayingAudioFormatController *audioFormatController
 @property  NSTimer *primaryUpdateTimer
 @property  NSTimer *secondaryUpdateTimer
 @property  NSTimer *spatialUpdateTimer
 @property  BOOL optimisticSpatialized
 @property  <MRUVolumeBackgroundViewControllerDelegate> *delegate
 @property  float systemVolumeValue
 @property  BOOL hasExpandedButtons
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUVolumeBackgroundViewController .cxx_destruct]
  -[MRUVolumeBackgroundViewController viewDidLoad]
  -[MRUVolumeBackgroundViewController setDelegate:]
  -[MRUVolumeBackgroundViewController nowPlayingAudioFormatController:didChangeBundleID:displayName:]
  -[MRUVolumeBackgroundViewController nowPlayingAudioFormatController:didChangeAudioFormatContentInfo:]
  -[MRUVolumeBackgroundViewController gestureRecognizerShouldBegin:]
  -[MRUVolumeBackgroundViewController updateVisibility]
  -[MRUVolumeBackgroundViewController viewWillAppear:]
  -[MRUVolumeBackgroundViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[MRUVolumeBackgroundViewController delegate]
  -[MRUVolumeBackgroundViewController loadView]
  -[MRUVolumeBackgroundViewController viewDidDisappear:]
  -[MRUVolumeBackgroundViewController _canShowWhileLocked]
  -[MRUVolumeBackgroundViewController effectiveContentFrameForContainerFrame:]
  -[MRUVolumeBackgroundViewController systemOutputDeviceRouteControllerDidUpdateOutputDevices:]
  -[MRUVolumeBackgroundViewController systemOutputDeviceRouteControllerDidUpdateOutputDeviceProperties:]
  -[MRUVolumeBackgroundViewController initWithOutputDeviceRouteController:]
  -[MRUVolumeBackgroundViewController outputDeviceRouteController]
  -[MRUVolumeBackgroundViewController spatialAudioPreferencesControllerDidChangePreferences:]
  -[MRUVolumeBackgroundViewController spatialAudioPreferencesController:didSpatialAudioSupported:]
  -[MRUVolumeBackgroundViewController spatialAudioPreferencesController:didChangeHeadTrackingSupported:]
  -[MRUVolumeBackgroundViewController hasExpandedButtons]
  -[MRUVolumeBackgroundViewController collapseExpandableButtons]
  -[MRUVolumeBackgroundViewController didTapPrimaryListeningModeButton:]
  -[MRUVolumeBackgroundViewController primaryListeningModeButtonDidChangeValue:]
  -[MRUVolumeBackgroundViewController didTapSecondaryListeningModeButton:]
  -[MRUVolumeBackgroundViewController secondaryListeningModeButtonDidChangeValue:]
  -[MRUVolumeBackgroundViewController didTapSpatialAudioModeButton:]
  -[MRUVolumeBackgroundViewController spatialAudioModeButtonDidChangeValue:]
  -[MRUVolumeBackgroundViewController updatePrimaryRouteView]
  -[MRUVolumeBackgroundViewController updateSecondaryRouteView]
  -[MRUVolumeBackgroundViewController updatePrimaryListeningModeButton]
  -[MRUVolumeBackgroundViewController updateSecondaryListeningModeButton]
  -[MRUVolumeBackgroundViewController updateSpatialAudioModeButton]
  -[MRUVolumeBackgroundViewController updateNowPlayingIcon]
  -[MRUVolumeBackgroundViewController updateNowPlayingAudioFormat]
  -[MRUVolumeBackgroundViewController performLayoutWithAnimation:]
  -[MRUVolumeBackgroundViewController primaryUpdateTimer]
  -[MRUVolumeBackgroundViewController setPrimaryUpdateTimer:]
  -[MRUVolumeBackgroundViewController setListeningMode:forButton:outputDeviceRoute:completion:]
  -[MRUVolumeBackgroundViewController secondaryUpdateTimer]
  -[MRUVolumeBackgroundViewController setSecondaryUpdateTimer:]
  -[MRUVolumeBackgroundViewController updateOptimisticSpatializedForSelectedPreferences:previousPreferences:audioFormatContentInfo:]
  -[MRUVolumeBackgroundViewController resetOptimisticSpatialized]
  -[MRUVolumeBackgroundViewController updateListeningModeButton:forOutputDeviceRoute:]
  -[MRUVolumeBackgroundViewController listeningModeErrorMessageForOutputDevice:]
  -[MRUVolumeBackgroundViewController setSystemVolumeValue:]
  -[MRUVolumeBackgroundViewController systemVolumeValue]
  -[MRUVolumeBackgroundViewController setOutputDeviceRouteController:]
  -[MRUVolumeBackgroundViewController spatialAudioPreferencesController]
  -[MRUVolumeBackgroundViewController setSpatialAudioPreferencesController:]
  -[MRUVolumeBackgroundViewController audioFormatController]
  -[MRUVolumeBackgroundViewController setAudioFormatController:]
  -[MRUVolumeBackgroundViewController spatialUpdateTimer]
  -[MRUVolumeBackgroundViewController setSpatialUpdateTimer:]
  -[MRUVolumeBackgroundViewController optimisticSpatialized]
  -[MRUVolumeBackgroundViewController setOptimisticSpatialized:]


MRUNowPlayingViewController : UIViewController <MRUNowPlayingTransportControlsViewDelegate, MRUEndpointMetadataControllerObserver, MRURoutingViewControllerDelegate, MRUNowPlayingVolumeSliderDelegate, MRUMediaSuggestionsViewControllerDelegate, MRULockScreenMonitorDelegate, MRUNowPlayingQueueHandoffCoordinatorDelegate, _MCStateDumpPropertyListTransformable>
 @property  MRUNowPlayingView *view
 @property  MRUNowPlayingView *viewIfLoaded
 @property  MRUMediaSuggestionsViewController *suggestionsViewController
 @property  BOOL onScreen
 @property  MPVolumeGroupSliderCoordinator *groupSliderCoordinator
 @property  MRULockScreenMonitor *lockscreenMonitor
 @property  MRUNowPlayingQueueHandoffCoordinator *queueHandoffCoordinator
 @property  <MediaControlsInvalidatable> *hardwareVolumeControlAssertion
 @property  MPMediaControls *mediaControls
 @property  unsigned long stateHandle
 @property  long long routeControlsPresentation
 @property  MediaControlsEndpointController *endpointController
 @property  MRUEndpointMetadataController *metadataController
 @property  MRURoutingViewController *routingViewController
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  <MPAVOutputDevicePlaybackDataSource> *playbackDataSource
 @property  BOOL shouldShowMediaSuggestions
 @property  BOOL isShowingMediaSuggestions
 @property  <MRUNowPlayingViewControllerDelegate> *delegate
 @property  MRUArtworkView *artworkView
 @property  NSString *undiscoveredPlaceholderText
 @property  MRUVisualStylingProvider *stylingProvider
 @property  long long layout
 @property  long long context
 @property  BOOL supportsHorizontalLayout
 @property  {UIEdgeInsets=dddd} contentEdgeInsets
 @property  @? coordinatedDismissalBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MRUNowPlayingViewController coversheetViewController]

  // instance methods
  -[MRUNowPlayingViewController stylingProvider]
  -[MRUNowPlayingViewController initWithRouteUID:]
  -[MRUNowPlayingViewController groupSliderCoordinator]
  -[MRUNowPlayingViewController metadataControllerRouteDidUpdate:]
  -[MRUNowPlayingViewController setLockscreenMonitor:]
  -[MRUNowPlayingViewController setGroupSliderCoordinator:]
  -[MRUNowPlayingViewController mediaControls]
  -[MRUNowPlayingViewController endpointController]
  -[MRUNowPlayingViewController initWithRouteUID:client:player:]
  -[MRUNowPlayingViewController metadataControllerDidChangeState:]
  -[MRUNowPlayingViewController updateDiscoveryMode]
  -[MRUNowPlayingViewController lockscreenMonitor]
  -[MRUNowPlayingViewController metadataControllerDidUpdateRoutingAvailability:]
  -[MRUNowPlayingViewController metadataController:didUpdateShowMediaSuggestions:]
  -[MRUNowPlayingViewController didSelectQuickActionButton:]
  -[MRUNowPlayingViewController initWithEndpointController:routeControlsPresentation:]
  -[MRUNowPlayingViewController updateContentAnimated:completion:]
  -[MRUNowPlayingViewController metadataControllerShouldAutomaticallyUpdateReponse:]
  -[MRUNowPlayingViewController updateSuggestions]
  -[MRUNowPlayingViewController updateVolume]
  -[MRUNowPlayingViewController metadataController:didUpdateApplicationIcon:]
  -[MRUNowPlayingViewController updateRoutingViewControllerContentEdgeInsets]
  -[MRUNowPlayingViewController setStateHandle:]
  -[MRUNowPlayingViewController updateResponse]
  -[MRUNowPlayingViewController stateHandle]
  -[MRUNowPlayingViewController updateLayout]
  -[MRUNowPlayingViewController updateSuggestionContext]
  -[MRUNowPlayingViewController setUndiscoveredPlaceholderText:]
  -[MRUNowPlayingViewController routingViewController]
  -[MRUNowPlayingViewController nowPlayingQueueHandoffCoordinatorDidCompleteHandoff:]
  -[MRUNowPlayingViewController isOnScreen]
  -[MRUNowPlayingViewController contentEdgeInsets]
  -[MRUNowPlayingViewController setStylingProvider:]
  -[MRUNowPlayingViewController .cxx_destruct]
  -[MRUNowPlayingViewController slider:syncStateWillChangeFromState:toState:]
  -[MRUNowPlayingViewController transportControlsView:presentActionSheetForItem:sourceView:]
  -[MRUNowPlayingViewController didSelectRoutingButton:]
  -[MRUNowPlayingViewController updateRoutingButton]
  -[MRUNowPlayingViewController suggestionContext]
  -[MRUNowPlayingViewController viewDidLoad]
  -[MRUNowPlayingViewController metadataController:didLoadNewResponse:]
  -[MRUNowPlayingViewController playbackDataSource]
  -[MRUNowPlayingViewController queueHandoffCoordinator]
  -[MRUNowPlayingViewController setContentEdgeInsets:]
  -[MRUNowPlayingViewController routingViewControllerDidUpdateItems:]
  -[MRUNowPlayingViewController destination]
  -[MRUNowPlayingViewController setDelegate:]
  -[MRUNowPlayingViewController viewDidAppear:]
  -[MRUNowPlayingViewController transportControlsView:presentTVRemoteFromSourceView:]
  -[MRUNowPlayingViewController setSupportsHorizontalLayout:]
  -[MRUNowPlayingViewController nowPlayingQueueHandoffCoordinatorSetupTransition:]
  -[MRUNowPlayingViewController shouldAutomaticallyForwardAppearanceMethods]
  -[MRUNowPlayingViewController nowPlayingQueueHandoffCoordinatorDidEndTransition:]
  -[MRUNowPlayingViewController updateHardwareVolumeButtons]
  -[MRUNowPlayingViewController createLockscreenMonitor]
  -[MRUNowPlayingViewController contextString]
  -[MRUNowPlayingViewController artworkView]
  -[MRUNowPlayingViewController updateRouteLabel]
  -[MRUNowPlayingViewController routingViewController:didSelectRoutingViewItem:]
  -[MRUNowPlayingViewController shouldEnableSyncingForSlider:]
  -[MRUNowPlayingViewController shouldShowMediaSuggestions]
  -[MRUNowPlayingViewController createGroupSliderCoordinator]
  -[MRUNowPlayingViewController didSelectHeaderView:]
  -[MRUNowPlayingViewController _stateDumpObject]
  -[MRUNowPlayingViewController setOnScreen:]
  -[MRUNowPlayingViewController metadataController]
  -[MRUNowPlayingViewController trackStartedShowingMediaSuggestions]
  -[MRUNowPlayingViewController canShowRoutingControls]
  -[MRUNowPlayingViewController setQueueHandoffCoordinator:]
  -[MRUNowPlayingViewController slider:shouldCancelSnapWithTouch:]
  -[MRUNowPlayingViewController lockScreenInternalRoutePickerOverrideWithDefaultStyle:]
  -[MRUNowPlayingViewController setVisualStylingProvider:]
  -[MRUNowPlayingViewController setHardwareVolumeControlAssertion:]
  -[MRUNowPlayingViewController lockScreenPresentsOverrideRoutePicker]
  -[MRUNowPlayingViewController updateVisibility]
  -[MRUNowPlayingViewController viewWillDisappear:]
  -[MRUNowPlayingViewController initiateQueueHandoffTansitionWithCoordinator:]
  -[MRUNowPlayingViewController nowPlayingQueueHandoffCoordinatorDidBeginTransition:]
  -[MRUNowPlayingViewController isShowingMediaSuggestions]
  -[MRUNowPlayingViewController presentExternalRoutingControlsFromSourceView:]
  -[MRUNowPlayingViewController viewWillAppear:]
  -[MRUNowPlayingViewController suggestionsViewController]
  -[MRUNowPlayingViewController mediaSuggestionsViewController:didSelectSuggestion:completion:]
  -[MRUNowPlayingViewController lockscreenMonitor:didUpdateDeviceLocked:]
  -[MRUNowPlayingViewController trackSuggestionsDisplayed:]
  -[MRUNowPlayingViewController delegate]
  -[MRUNowPlayingViewController createSuggestionsViewController]
  -[MRUNowPlayingViewController undiscoveredPlaceholderText]
  -[MRUNowPlayingViewController coordinatedDismissalBlock]
  -[MRUNowPlayingViewController setContext:]
  -[MRUNowPlayingViewController setPlaybackDataSource:]
  -[MRUNowPlayingViewController dealloc]
  -[MRUNowPlayingViewController createRoutingViewController]
  -[MRUNowPlayingViewController setLayout:]
  -[MRUNowPlayingViewController setSuggestionsViewController:]
  -[MRUNowPlayingViewController visualStylingProvider]
  -[MRUNowPlayingViewController loadView]
  -[MRUNowPlayingViewController hardwareVolumeControlAssertion]
  -[MRUNowPlayingViewController routeControlsPresentation]
  -[MRUNowPlayingViewController trackSuggestionSelected:atIndex:error:]
  -[MRUNowPlayingViewController supportsHorizontalLayout]
  -[MRUNowPlayingViewController setMediaControls:]
  -[MRUNowPlayingViewController viewDidDisappear:]
  -[MRUNowPlayingViewController setCoordinatedDismissalBlock:]
  -[MRUNowPlayingViewController layout]
  -[MRUNowPlayingViewController transportControlsView:presentLanguageOptionsFromSourceView:]
  -[MRUNowPlayingViewController context]
  -[MRUNowPlayingViewController _canShowWhileLocked]


MRMediaControlsVideoPickerFooterView : MPButton
 @property  UILabel *customTitleLabel
 @property  MTVisualStylingProvider *visualStylingProvider

  // instance methods
  -[MRMediaControlsVideoPickerFooterView setHighlighted:]
  -[MRMediaControlsVideoPickerFooterView traitCollectionDidChange:]
  -[MRMediaControlsVideoPickerFooterView setCustomTitleLabel:]
  -[MRMediaControlsVideoPickerFooterView .cxx_destruct]
  -[MRMediaControlsVideoPickerFooterView layoutSubviews]
  -[MRMediaControlsVideoPickerFooterView customTitleLabel]
  -[MRMediaControlsVideoPickerFooterView _updateStyle]
  -[MRMediaControlsVideoPickerFooterView sizeThatFits:]
  -[MRMediaControlsVideoPickerFooterView setVisualStylingProvider:]
  -[MRMediaControlsVideoPickerFooterView initWithFrame:]
  -[MRMediaControlsVideoPickerFooterView visualStylingProvider]
  -[MRMediaControlsVideoPickerFooterView titleLabelText]


MediaControlsHomeObserver : NSObject <HMHomeDelegate, HMHomeManagerDelegate>
 @property  <MediaControlsHomeObserverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsHomeObserver home:didRemoveAccessory:]
  -[MediaControlsHomeObserver homeManager:didRemoveHome:]
  -[MediaControlsHomeObserver homeManagerDidUpdateHomes:]
  -[MediaControlsHomeObserver home:didAddAccessory:]
  -[MediaControlsHomeObserver .cxx_destruct]
  -[MediaControlsHomeObserver homeManager:didAddHome:]
  -[MediaControlsHomeObserver beginObserving]
  -[MediaControlsHomeObserver _updateUIDs]
  -[MediaControlsHomeObserver _notifyDelegate]
  -[MediaControlsHomeObserver setDelegate:]
  -[MediaControlsHomeObserver init]
  -[MediaControlsHomeObserver stopObserving]
  -[MediaControlsHomeObserver delegate]
  -[MediaControlsHomeObserver hasAccessoryWithUID:]


MediaControlsEndpointsManager : NSObject <MPAVRoutingControllerDelegate, MediaControlsHomeObserverDelegate, MPAVOutputDevicePlaybackDataSource>
 @property  MediaControlsHomeObserver *homeObserver
 @property  MPAVRoutingController *routingController
 @property  NSString *activeSystemRouteUID
 @property  NSString *pendingActiveSystemRouteUID
 @property  MPAVEndpointRoute *activeSystemRoute
 @property  MPAVEndpointRoute *resolvedActiveSystemRoute
 @property  MPMediaControlsConfiguration *configuration
 @property  long long discoveryMode
 @property  NSArray *routes
 @property  <MediaControlsEndpointsManagerDelegate> *delegate
 @property  BOOL isActiveSystemEndpointEqualToLocalEndpoint
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsEndpointsManager _endpointControllerContainingOutputDevice:endpointWrapper:]
  -[MediaControlsEndpointsManager routes]
  -[MediaControlsEndpointsManager _indexOfRouteWithUID:]
  -[MediaControlsEndpointsManager homeObserver]
  -[MediaControlsEndpointsManager _updateActiveRouteWithReason:]
  -[MediaControlsEndpointsManager configuration]
  -[MediaControlsEndpointsManager routingController]
  -[MediaControlsEndpointsManager .cxx_destruct]
  -[MediaControlsEndpointsManager discoveryMode]
  -[MediaControlsEndpointsManager endpointControllerForRoute:]
  -[MediaControlsEndpointsManager setDelegate:]
  -[MediaControlsEndpointsManager _updateWithRoutes:]
  -[MediaControlsEndpointsManager resolvedActiveSystemRoute]
  -[MediaControlsEndpointsManager activeSystemRouteUID]
  -[MediaControlsEndpointsManager setDiscoveryMode:]
  -[MediaControlsEndpointsManager _setRoutes:withChangeDetails:]
  -[MediaControlsEndpointsManager initWithConfiguration:]
  -[MediaControlsEndpointsManager routingControllerAvailableRoutesDidChange:]
  -[MediaControlsEndpointsManager _createSectionedCollectionFromRoutes:]
  -[MediaControlsEndpointsManager _activeSystemRouteDidChange:]
  -[MediaControlsEndpointsManager pendingActiveSystemRouteUID]
  -[MediaControlsEndpointsManager delegate]
  -[MediaControlsEndpointsManager homeObserverDidUpdateKnownUIDs:]
  -[MediaControlsEndpointsManager dealloc]
  -[MediaControlsEndpointsManager activeSystemRoute]
  -[MediaControlsEndpointsManager _homeHasRoute:]
  -[MediaControlsEndpointsManager getOutputDeviceIsPlaying:completion:]
  -[MediaControlsEndpointsManager isActiveSystemEndpointEqualToLocalEndpoint]
  -[MediaControlsEndpointsManager setActiveSystemRoute:reason:]
  -[MediaControlsEndpointsManager prewarm]


MediaControlsTransportStackView : UIView <MTVisualStylingProviderObservingPrivate>
 @property  MediaControlsTransportButton *tvRemoteButton
 @property  MediaControlsTransportButton *leftButton
 @property  MediaControlsTransportButton *middleButton
 @property  MediaControlsTransportButton *rightButton
 @property  MediaControlsTransportButton *languageOptionsButton
 @property  BOOL shouldShowTVRemoteButton
 @property  long long style
 @property  MPCPlayerResponse *response
 @property  BOOL empty
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  <MediaControlsActionsDelegate> *actionsDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsTransportStackView setEmpty:]
  -[MediaControlsTransportStackView leftButton]
  -[MediaControlsTransportStackView setLeftButton:]
  -[MediaControlsTransportStackView isEmpty]
  -[MediaControlsTransportStackView setActionsDelegate:]
  -[MediaControlsTransportStackView .cxx_destruct]
  -[MediaControlsTransportStackView setStyle:]
  -[MediaControlsTransportStackView layoutSubviews]
  -[MediaControlsTransportStackView tvRemoteButton]
  -[MediaControlsTransportStackView setRightButton:]
  -[MediaControlsTransportStackView providedStylesDidChangeForProvider:]
  -[MediaControlsTransportStackView setMiddleButton:]
  -[MediaControlsTransportStackView setLanguageOptionsButton:]
  -[MediaControlsTransportStackView shouldShowTVRemoteButton]
  -[MediaControlsTransportStackView sizeThatFits:]
  -[MediaControlsTransportStackView languageOptionsButton]
  -[MediaControlsTransportStackView setVisualStylingProvider:]
  -[MediaControlsTransportStackView response]
  -[MediaControlsTransportStackView initWithFrame:]
  -[MediaControlsTransportStackView setTvRemoteButton:]
  -[MediaControlsTransportStackView rightButton]
  -[MediaControlsTransportStackView middleButton]
  -[MediaControlsTransportStackView visualStylingProvider]
  -[MediaControlsTransportStackView actionsDelegate]
  -[MediaControlsTransportStackView style]
  -[MediaControlsTransportStackView buttonHoldReleased:]
  -[MediaControlsTransportStackView buttonHoldBegan:]
  -[MediaControlsTransportStackView setResponse:]
  -[MediaControlsTransportStackView updateOnRouteChange]
  -[MediaControlsTransportStackView _createTransportButton]
  -[MediaControlsTransportStackView _updateButtonConfiguration]
  -[MediaControlsTransportStackView touchUpInsideHangdogButton:]
  -[MediaControlsTransportStackView touchUpInsideLeftButton:]
  -[MediaControlsTransportStackView touchUpInsideMiddleButton:]
  -[MediaControlsTransportStackView touchUpInsideRightButton:]
  -[MediaControlsTransportStackView touchUpInsideCaptionsButton:]
  -[MediaControlsTransportStackView _updateVisualStylingForButtons]
  -[MediaControlsTransportStackView _updateButtonLayout]
  -[MediaControlsTransportStackView _resetTransportButton:]
  -[MediaControlsTransportStackView _updateButtonVisualStyling:]
  -[MediaControlsTransportStackView setShouldShowTVRemoteButton:]


MediaControlsHeaderView : UIView <_UICursorInteractionDelegate>
 @property  _UICursorInteraction *cursorInteraction
 @property  MTMaterialView *artworkBackground
 @property  UIView *shadow
 @property  MPUMarqueeView *primaryMarqueeView
 @property  UILabel *primaryLabel
 @property  MPUMarqueeView *secondaryMarqueeView
 @property  UILabel *secondaryLabel
 @property  UILabel *placeholderLabel
 @property  BOOL shouldUseOverrideSize
 @property  UIView *artworkContentView
 @property  MPCPlayerPath *playerPath
 @property  UIImageView *artworkView
 @property  UIImageView *placeholderArtworkView
 @property  BOOL transitioning
 @property  long long style
 @property  MPRouteLabel *routeLabel
 @property  NSString *primaryString
 @property  NSString *secondaryString
 @property  NSString *placeholderString
 @property  BOOL showPlaceholderString
 @property  MediaControlsRoutingButtonView *routingButton
 @property  MPButton *doneButton
 @property  UIButton *launchNowPlayingAppButton
 @property  BOOL marqueeEnabled
 @property  long long buttonType
 @property  BOOL routing
 @property  BOOL scalePlaceholderImage
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  {CGSize=dd} overrideSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsHeaderView routeLabel]
  -[MediaControlsHeaderView playerPath]
  -[MediaControlsHeaderView cursorInteraction:styleForRegion:modifiers:]
  -[MediaControlsHeaderView traitCollectionDidChange:]
  -[MediaControlsHeaderView secondaryString]
  -[MediaControlsHeaderView placeholderString]
  -[MediaControlsHeaderView setPlayerPath:]
  -[MediaControlsHeaderView .cxx_destruct]
  -[MediaControlsHeaderView setStyle:]
  -[MediaControlsHeaderView buttonType]
  -[MediaControlsHeaderView layoutSubviews]
  -[MediaControlsHeaderView doneButton]
  -[MediaControlsHeaderView setShadow:]
  -[MediaControlsHeaderView tintColorDidChange]
  -[MediaControlsHeaderView artworkView]
  -[MediaControlsHeaderView setDoneButton:]
  -[MediaControlsHeaderView setMarqueeEnabled:]
  -[MediaControlsHeaderView setPlaceholderLabel:]
  -[MediaControlsHeaderView overrideSize]
  -[MediaControlsHeaderView _updateStyle]
  -[MediaControlsHeaderView sizeThatFits:]
  -[MediaControlsHeaderView placeholderLabel]
  -[MediaControlsHeaderView setVisualStylingProvider:]
  -[MediaControlsHeaderView shadow]
  -[MediaControlsHeaderView secondaryLabel]
  -[MediaControlsHeaderView setTransitioning:]
  -[MediaControlsHeaderView initWithFrame:]
  -[MediaControlsHeaderView isRouting]
  -[MediaControlsHeaderView isTransitioning]
  -[MediaControlsHeaderView setPrimaryLabel:]
  -[MediaControlsHeaderView setSecondaryLabel:]
  -[MediaControlsHeaderView setButtonType:]
  -[MediaControlsHeaderView routingButton]
  -[MediaControlsHeaderView primaryLabel]
  -[MediaControlsHeaderView marqueeEnabled]
  -[MediaControlsHeaderView _handleContentSizeCategoryDidChangeNotification:]
  -[MediaControlsHeaderView didMoveToWindow]
  -[MediaControlsHeaderView cursorInteraction]
  -[MediaControlsHeaderView setRouteLabel:]
  -[MediaControlsHeaderView dealloc]
  -[MediaControlsHeaderView updateArtworkStyle]
  -[MediaControlsHeaderView setSecondaryString:]
  -[MediaControlsHeaderView setPrimaryString:]
  -[MediaControlsHeaderView cursorInteraction:regionForLocation:defaultRegion:]
  -[MediaControlsHeaderView visualStylingProvider]
  -[MediaControlsHeaderView setOverrideSize:]
  -[MediaControlsHeaderView style]
  -[MediaControlsHeaderView setRouting:]
  -[MediaControlsHeaderView primaryString]
  -[MediaControlsHeaderView setArtworkView:]
  -[MediaControlsHeaderView launchNowPlayingAppButton]
  -[MediaControlsHeaderView setPlaceholderString:]
  -[MediaControlsHeaderView setShowPlaceholderString:]
  -[MediaControlsHeaderView placeholderArtworkView]
  -[MediaControlsHeaderView setScalePlaceholderImage:]
  -[MediaControlsHeaderView clearOverrideSize]
  -[MediaControlsHeaderView primaryMarqueeView]
  -[MediaControlsHeaderView secondaryMarqueeView]
  -[MediaControlsHeaderView artworkContentView]
  -[MediaControlsHeaderView artworkBackground]
  -[MediaControlsHeaderView launchNowPlayingAppButtonPressed]
  -[MediaControlsHeaderView shouldUseOverrideSize]
  -[MediaControlsHeaderView layoutTextInAvailableBounds:setFrames:]
  -[MediaControlsHeaderView _updateRTL]
  -[MediaControlsHeaderView setShouldUseOverrideSize:]
  -[MediaControlsHeaderView setPlaceholderArtworkView:]
  -[MediaControlsHeaderView showPlaceholderString]
  -[MediaControlsHeaderView setRoutingButton:]
  -[MediaControlsHeaderView setLaunchNowPlayingAppButton:]
  -[MediaControlsHeaderView scalePlaceholderImage]
  -[MediaControlsHeaderView setCursorInteraction:]
  -[MediaControlsHeaderView setArtworkBackground:]
  -[MediaControlsHeaderView setPrimaryMarqueeView:]
  -[MediaControlsHeaderView setSecondaryMarqueeView:]
  -[MediaControlsHeaderView setArtworkContentView:]


MRUVolumeSlider : MPVolumeSlider <MRUVisualStylingProviderObserver>
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUVolumeSlider stylingProvider]
  -[MRUVolumeSlider createThumbView]
  -[MRUVolumeSlider setStylingProvider:]
  -[MRUVolumeSlider .cxx_destruct]
  -[MRUVolumeSlider layoutSubviews]
  -[MRUVolumeSlider maximumValueImageRectForBounds:]
  -[MRUVolumeSlider initWithThumbSize:]
  -[MRUVolumeSlider minimumValueImageRectForBounds:]
  -[MRUVolumeSlider trackRectForBounds:]
  -[MRUVolumeSlider visualStylingProviderDidChange:]
  -[MRUVolumeSlider updateVisualStyling]
  -[MRUVolumeSlider initWithFrame:]


MRUControlCenterButton : UIControl <MRUVisualStylingProviderObserver, UIPointerInteractionDelegate>
 @property  UIView *contentView
 @property  UIView *backgroundView
 @property  UIImageView *imageView
 @property  UILabel *titleLabel
 @property  UIImage *image
 @property  NSString *title
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUControlCenterButton setHighlighted:]
  -[MRUControlCenterButton stylingProvider]
  -[MRUControlCenterButton titleLabel]
  -[MRUControlCenterButton pointerInteraction:styleForRegion:]
  -[MRUControlCenterButton imageView]
  -[MRUControlCenterButton updateContentSizeCategory]
  -[MRUControlCenterButton setTitle:]
  -[MRUControlCenterButton image]
  -[MRUControlCenterButton setStylingProvider:]
  -[MRUControlCenterButton .cxx_destruct]
  -[MRUControlCenterButton setTitleLabel:]
  -[MRUControlCenterButton layoutSubviews]
  -[MRUControlCenterButton contentView]
  -[MRUControlCenterButton visualStylingProviderDidChange:]
  -[MRUControlCenterButton updateVisualStyling]
  -[MRUControlCenterButton sizeThatFits:]
  -[MRUControlCenterButton title]
  -[MRUControlCenterButton initWithFrame:]
  -[MRUControlCenterButton pointInside:withEvent:]
  -[MRUControlCenterButton setBackgroundView:]
  -[MRUControlCenterButton setImage:]
  -[MRUControlCenterButton setContentView:]
  -[MRUControlCenterButton setImageView:]
  -[MRUControlCenterButton pointerInteraction:regionForRequest:defaultRegion:]
  -[MRUControlCenterButton backgroundView]


MediaControlsHapticPlayer : NSObject
 @property  CHHapticEngine *engine
 @property  <CHHapticPatternPlayer> *expandedButtonChangedPlayer

  // instance methods
  -[MediaControlsHapticPlayer setEngine:]
  -[MediaControlsHapticPlayer tearDown]
  -[MediaControlsHapticPlayer .cxx_destruct]
  -[MediaControlsHapticPlayer engine]
  -[MediaControlsHapticPlayer dealloc]
  -[MediaControlsHapticPlayer prepare]
  -[MediaControlsHapticPlayer expandedButtonChanged]
  -[MediaControlsHapticPlayer checkError:]
  -[MediaControlsHapticPlayer setupExpandedButtonChanged]
  -[MediaControlsHapticPlayer expandedButtonChangedPlayer]
  -[MediaControlsHapticPlayer setExpandedButtonChangedPlayer:]


MRUNowPlayingVolumeControlsView : UIView
 @property  MRUNowPlayingVolumeSlider *slider
 @property  MRUVolumeStepperView *stepper
 @property  MRUVisualStylingProvider *stylingProvider
 @property  BOOL onScreen

  // instance methods
  -[MRUNowPlayingVolumeControlsView stylingProvider]
  -[MRUNowPlayingVolumeControlsView slider]
  -[MRUNowPlayingVolumeControlsView stepper]
  -[MRUNowPlayingVolumeControlsView isOnScreen]
  -[MRUNowPlayingVolumeControlsView setStylingProvider:]
  -[MRUNowPlayingVolumeControlsView .cxx_destruct]
  -[MRUNowPlayingVolumeControlsView layoutSubviews]
  -[MRUNowPlayingVolumeControlsView setOnScreen:]
  -[MRUNowPlayingVolumeControlsView sizeThatFits:]
  -[MRUNowPlayingVolumeControlsView initWithFrame:]
  -[MRUNowPlayingVolumeControlsView updateVolumeCapabilities]


MediaControlsTransportButton : MPButton
 @property  MPCPlayerCommandRequest *touchUpInsideCommandRequest
 @property  MPCPlayerCommandRequest *holdBeginCommandRequest
 @property  MPCPlayerCommandRequest *holdEndCommandRequest
 @property  BOOL shouldPresentActionSheet
 @property  BOOL performingHighlightAnimation
 @property  double cursorScale
 @property  NSString *identifier

  // class methods
  +[MediaControlsTransportButton _cursorInteractionEnabled]

  // instance methods
  -[MediaControlsTransportButton setHighlighted:]
  -[MediaControlsTransportButton cursorInteraction:styleForRegion:modifiers:]
  -[MediaControlsTransportButton isPerformingHighlightAnimation]
  -[MediaControlsTransportButton setTouchUpInsideCommandRequest:]
  -[MediaControlsTransportButton .cxx_destruct]
  -[MediaControlsTransportButton cursorScale]
  -[MediaControlsTransportButton setShouldPresentActionSheet:]
  -[MediaControlsTransportButton setHoldBeginCommandRequest:]
  -[MediaControlsTransportButton holdEndCommandRequest]
  -[MediaControlsTransportButton setHoldEndCommandRequest:]
  -[MediaControlsTransportButton shouldPresentActionSheet]
  -[MediaControlsTransportButton identifier]
  -[MediaControlsTransportButton setCursorScale:]
  -[MediaControlsTransportButton setIdentifier:]
  -[MediaControlsTransportButton touchUpInsideCommandRequest]
  -[MediaControlsTransportButton holdBeginCommandRequest]


MediaControlsAnalytics : NSObject
  // class methods
  +[MediaControlsAnalytics postAnalyticKind:]
  +[MediaControlsAnalytics coreAnalyticsPostAnalyticKind:]


MediaControlsContainerView : UIView
 @property  UIVisualEffectView *primaryVisualEffectView
 @property  long long style
 @property  MPCPlayerResponse *response
 @property  BOOL empty
 @property  BOOL timeControlOnScreen
 @property  MediaControlsTransportStackView *transportStackView
 @property  MediaControlsTimeControl *timeControl

  // instance methods
  -[MediaControlsContainerView setEmpty:]
  -[MediaControlsContainerView traitCollectionDidChange:]
  -[MediaControlsContainerView isEmpty]
  -[MediaControlsContainerView .cxx_destruct]
  -[MediaControlsContainerView setStyle:]
  -[MediaControlsContainerView layoutSubviews]
  -[MediaControlsContainerView _updateStyle]
  -[MediaControlsContainerView sizeThatFits:]
  -[MediaControlsContainerView response]
  -[MediaControlsContainerView initWithFrame:]
  -[MediaControlsContainerView style]
  -[MediaControlsContainerView setResponse:]
  -[MediaControlsContainerView primaryVisualEffectView]
  -[MediaControlsContainerView setPrimaryVisualEffectView:]
  -[MediaControlsContainerView transportStackView]
  -[MediaControlsContainerView setTransportStackView:]
  -[MediaControlsContainerView timeControl]
  -[MediaControlsContainerView setTimeControl:]
  -[MediaControlsContainerView setTimeControlOnScreen:]
  -[MediaControlsContainerView isTimeControlOnScreen]
  -[MediaControlsContainerView setRatingActionSheetDelegate:]


MRUVolumeStepperView : UIView <MRUVisualStylingProviderObserver>
 @property  UIView *decreaseBackground
 @property  UIView *increaseBackground
 @property  MRUButton *decreaseButton
 @property  MRUButton *increaseButton
 @property  MPVolumeController *volumeController
 @property  MRUVisualStylingProvider *stylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MRUVolumeStepperView stylingProvider]
  -[MRUVolumeStepperView setIncreaseBackground:]
  -[MRUVolumeStepperView decreaseTouchUpInside:]
  -[MRUVolumeStepperView decreaseButtonHoldBegan:]
  -[MRUVolumeStepperView setStylingProvider:]
  -[MRUVolumeStepperView setVolumeController:]
  -[MRUVolumeStepperView .cxx_destruct]
  -[MRUVolumeStepperView setIncreaseButton:]
  -[MRUVolumeStepperView layoutSubviews]
  -[MRUVolumeStepperView volumeController]
  -[MRUVolumeStepperView increaseButtonHoldBegan:]
  -[MRUVolumeStepperView increaseButtonHoldReleased:]
  -[MRUVolumeStepperView visualStylingProviderDidChange:]
  -[MRUVolumeStepperView updateVisualStyling]
  -[MRUVolumeStepperView decreaseBackground]
  -[MRUVolumeStepperView increaseTouchUpInside:]
  -[MRUVolumeStepperView initWithFrame:]
  -[MRUVolumeStepperView increaseBackground]
  -[MRUVolumeStepperView setDecreaseButton:]
  -[MRUVolumeStepperView decreaseButtonHoldReleased:]
  -[MRUVolumeStepperView decreaseButton]
  -[MRUVolumeStepperView setDecreaseBackground:]
  -[MRUVolumeStepperView increaseButton]


MRUMediaSuggestion : NSObject
 @property  UIImage *artworkImage
 @property  UIImage *iconImage
 @property  NSString *identifier
 @property  NSString *title
 @property  NSString *subtitle
 @property  MPArtworkCatalog *artworkCatalog
 @property  MRMediaSuggestion *mediaSuggestion
 @property  long long type

  // instance methods
  -[MRUMediaSuggestion iconImage]
  -[MRUMediaSuggestion setArtworkImage:]
  -[MRUMediaSuggestion .cxx_destruct]
  -[MRUMediaSuggestion artworkImage]
  -[MRUMediaSuggestion identifier]
  -[MRUMediaSuggestion setIconImage:]
  -[MRUMediaSuggestion subtitle]
  -[MRUMediaSuggestion title]
  -[MRUMediaSuggestion type]
  -[MRUMediaSuggestion artworkCatalog]
  -[MRUMediaSuggestion setMediaSuggestion:]
  -[MRUMediaSuggestion initWithMediaSuggestion:]
  -[MRUMediaSuggestion initWithNowPlaying:title:subtitle:artworkCatalog:iconImage:]
  -[MRUMediaSuggestion mediaSuggestion]


NSBundle(MediaControls)
	// class methods
	+[NSBundle(MediaControls) mediaControlsBundle]
	+[NSBundle(MediaControls) mru_isSpringBoardBundleIdentifier:]
	+[NSBundle(MediaControls) mru_isHomeBundleIdentifier:]
	+[NSBundle(MediaControls) mru_isProximityControlBundleIdentifier:]
	+[NSBundle(MediaControls) mru_isSpringBoard]
	+[NSBundle(MediaControls) mru_isSiri]
	+[NSBundle(MediaControls) mru_isHome]
	+[NSBundle(MediaControls) mru_isSiriBundleIdentifier:]
	+[NSBundle(MediaControls) mediaRemoteUIBundle]
	+[NSBundle(MediaControls) mru_isProximityControl]
	+[NSBundle(MediaControls) mru_isSoundScapesIdentifier:]

	// instance methods
	-[NSBundle(MediaControls) mediaControls_localizedStringForKey:inTable:]

MPAVEndpointRoute(PlaceholderIcon)
	// instance methods
	-[MPAVEndpointRoute(PlaceholderIcon) placeholderIcon]

MPAVRoute(Routing)
	// instance methods
	-[MPAVRoute(Routing) routingBatteryTextWithFormatter:]
	-[MPAVRoute(Routing) routingPairedDeviceText]

MPSectionedCollection(Safe)
	// instance methods
	-[MPSectionedCollection(Safe) safeItemAtIndexPath:]

UIView(MRUVisualStylingProviderAdditions)
	// class methods
	+[UIView(MRUVisualStylingProviderAdditions) mru_animateUsingType:animations:completion:]
	+[UIView(MRUVisualStylingProviderAdditions) mru_animateUsingType:animations:]

	// instance methods
	-[UIView(MRUVisualStylingProviderAdditions) mru_applyVisualStylingWithColor:alpha:blendMode:]
	-[UIView(MRUVisualStylingProviderAdditions) setMediaControls_untransformedFrame:]
	-[UIView(MRUVisualStylingProviderAdditions) mediaControls_untransformedFrame]

UILabel(MRUVisualStylingProviderAdditions)
	// instance methods
	-[UILabel(MRUVisualStylingProviderAdditions) mru_applyVisualStylingWithColor:alpha:blendMode:]

UIImageView(MRUVisualStylingProviderAdditions)
	// instance methods
	-[UIImageView(MRUVisualStylingProviderAdditions) mru_applyVisualStylingWithColor:alpha:blendMode:]

UIActivityIndicatorView(MRUVisualStylingProviderAdditions)
	// instance methods
	-[UIActivityIndicatorView(MRUVisualStylingProviderAdditions) mru_applyVisualStylingWithColor:alpha:blendMode:]

BSUIEmojiLabelView(MRUVisualStylingProviderAdditions)
	// instance methods
	-[BSUIEmojiLabelView(MRUVisualStylingProviderAdditions) mru_applyVisualStylingWithColor:alpha:blendMode:]

UIColor(MediaControls)
	// instance methods
	-[UIColor(MediaControls) secondaryColorForInterfaceStyle:]
	-[UIColor(MediaControls) tertiaryColorForInterfaceStyle:]
	-[UIColor(MediaControls) adjustedColorByScale:]

UIFont(MRUDefaults)
	// class methods
	+[UIFont(MRUDefaults) mru_volumeTitleFont]
	+[UIFont(MRUDefaults) mru_routingTitleFont]
	+[UIFont(MRUDefaults) mru_routingSubtitleFont]
	+[UIFont(MRUDefaults) mru_titleFont]
	+[UIFont(MRUDefaults) mru_timeFont]
	+[UIFont(MRUDefaults) mru_routingHeaderFont]
	+[UIFont(MRUDefaults) mru_volumeButtonTitleFont]
	+[UIFont(MRUDefaults) mru_volumeButtonSubtitleFont]
	+[UIFont(MRUDefaults) mru_subtitleFont]
	+[UIFont(MRUDefaults) mru_routeFont]
	+[UIFont(MRUDefaults) mru_suggestionsTitleFont]
	+[UIFont(MRUDefaults) mru_suggestionsSubtitleFont]
	+[UIFont(MRUDefaults) mru_buttonFont]

MRNowPlayingAudioFormatContentInfo(isMultichannelAvailable)
	// instance methods
	-[MRNowPlayingAudioFormatContentInfo(isMultichannelAvailable) isMultichannelAvailable]

(MRUTextSize)
	// instance methods
	-[(MRUTextSize) mru_textSizeForFont:boundingSize:]

01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVExternalPlaybackMonitor 
01 00 0500 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVTimeFormatter 
01 00 0900 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIEmojiLabelView 
01 00 1200 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothManager 
01 00 1900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 1900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 1900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 1900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAKeyframeAnimation 
01 00 1900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 1900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAPackage 
01 00 1300 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CARSessionStatus 
01 00 0e00 /usr/lib/libAudioStatistics.dylib: CAReporter 
01 00 1900 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 1d00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUICAPackageDescription 
01 00 1d00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUICAPackageView 
01 00 1d00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIContentModuleContext 
01 00 1d00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIContinuousSliderView 
01 00 1d00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIControlCenterMaterialView 
01 00 0300 /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics: CHHapticEngine 
01 00 0300 /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics: CHHapticEvent 
01 00 0300 /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics: CHHapticEventParameter 
01 00 0300 /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics: CHHapticPattern 
01 00 1000 /System/Library/Frameworks/CallKit.framework/CallKit: CXCallObserver 
01 00 0c00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitor 
01 00 0c00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSDisplayLayoutMonitorConfiguration 
01 00 0c00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSOpenApplicationOptions 
01 00 0c00 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: FBSOpenApplicationService 
01 00 0800 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeManager 
01 00 0800 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableHomeManagerConfiguration 
01 00 0f00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 0f00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVClippingTableView 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVClippingTableViewCell 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVEndpointRoute 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVEndpointRoutingDataSource 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVOutputDeviceRoute 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVOutputDeviceRoutingDataSource 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoute 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRouteConnection 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingViewController 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingViewItem 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPArtworkCatalog 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPButton 
01 00 1500 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerChangeRequest 
01 00 1500 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerPath 
01 00 1500 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerPathCache 
01 00 1500 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerRequest 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCubicSpringAnimator 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCubicSpringTimingParameters 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMRAVEndpointObserverWrapper 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMRAVEndpointWrapper 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControls 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControlsConfiguration 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControlsLanguageOptions 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelMovie 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelSong 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelTVEpisode 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMutableSectionedCollection 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPropertySet 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRequestResponseController 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRouteLabel 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPSectionedCollection 
01 00 1400 /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation: MPUMarqueeView 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeController 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeControllerRouteDataSource 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeControllerSystemDataSource 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeGroupSliderCoordinator 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeHUDController 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeHardwareButtonController 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeSlider 
01 00 1700 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPWeakTimer 
01 00 0b00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVOutputDevice 
01 00 0b00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRMediaSuggestionPreferences 
01 00 0b00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRMediaSuggestionRequest 
01 00 0b00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRNowPlayingAudioFormatContentInfo 
01 00 0b00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRNowPlayingAudioFormatController 
01 00 0b00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRNowPlayingRequest 
01 00 1100 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVPersistentTimer 
01 00 1100 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSystemDialog 
01 00 1100 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSystemDialogOptions 
01 00 1100 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVTimer 
01 00 1e00 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTMaterialView 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: NSCollectionLayoutDimension 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: NSCollectionLayoutGroup 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: NSCollectionLayoutItem 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: NSCollectionLayoutSection 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: NSCollectionLayoutSize 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: NSCollectionLayoutSpacing 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: NSDiffableDataSourceSnapshot 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 2100 /usr/lib/libobjc.A.dylib: NSObject 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 2300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 2000 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 1f00 /System/Library/PrivateFrameworks/SharingUI.framework/SharingUI: SFShareAudioViewController 
01 00 0100 /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI: TVRUIRemoteViewController 
01 00 0100 /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI: TVRViewServiceConfigContext 
01 00 0100 /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI: TVRViewServiceManager 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCell 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCellRegistration 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCompositionalLayout 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCompositionalLayoutConfiguration 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewDiffableDataSource 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewFlowLayout 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UICubicTimingParameters 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontMetrics 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIGestureRecognizer 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIHoverGestureRecognizer 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIImpactFeedbackGenerator 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UILayoutGuide 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UILongPressGestureRecognizer 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UINotificationFeedbackGenerator 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerHighlightEffect 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerHoverEffect 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerInteraction 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerLiftEffect 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerRegion 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerShape 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerStyle 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPopoverPresentationController 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewParameters 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewPresentationController 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UITableView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewDiffableDataSource 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewHeaderFooterView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedPreview 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewSpringAnimationBehavior 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: _UICursorHighlightEffect 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: _UICursorInteraction 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: _UICursorLiftEffect 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: _UICursorRegion 
01 00 1800 /System/Library/Frameworks/UIKit.framework/UIKit: _UICursorStyle 
