|| __DATA.__common _CPLRecordFullChange
|| __DATA.__common __CPLDontDelayChangeSessionUpdate
|| __DATA.__common __CPLFakeUserIdentifier
|| __DATA.__common __CPLSilentLogging
|| __DATA.__common ___CPLEngineResourceDownloadQueueRequestBackgroundDownloadQueueImmediately
|| __DATA.__data _CPLEngineElementDownloadResource
|| __DATA.__data _CPLEngineElementDownloadResourcesInBackground
|| __DATA.__data _CPLEngineElementEndOfUpload
|| __DATA.__data _CPLEngineElementEndOfUploadHighPriority
|| __DATA.__data _CPLEngineElementMingling
|| __DATA.__data _CPLEngineElementPullSweetSpot
|| __DATA.__data _CPLEngineElementPushSweetSpot
|| __DATA.__data _CPLEngineElementSuccessfulUpload
|| __DATA.__data _CPLEngineElementUpload
|| __DATA.__data __CPLConfigurationDidChangeNotification
|| __DATA.__data __CPLDefaultValueBOOLNO
|| __DATA.__data __CPLDefaultValueNSINTEGER0
|| __DATA.__data __CPLDefaultValueObjectNil
|| __DATA.__data __CPLStatusDidChangeNotification
|| __DATA.__data ___CPLCheckOriginalResourceInMaster
|| __DATA.__data ___CPLPushSessionAutoCancelSync
|| __DATA.__objc_data _OBJC_CLASS_$_CPLAdjustments
|| __DATA.__objc_data _OBJC_CLASS_$_CPLArchiver
|| __DATA.__objc_data _OBJC_CLASS_$_CPLAssetKeywordSortDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_CPLBatchExtractionStrategy
|| __DATA.__objc_data _OBJC_CLASS_$_CPLBeforeUploadCheckItem
|| __DATA.__objc_data _OBJC_CLASS_$_CPLBeforeUploadCheckItems
|| __DATA.__objc_data _OBJC_CLASS_$_CPLChangeBatchChangeStorage
|| __DATA.__objc_data _OBJC_CLASS_$_CPLChangeSessionUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_CPLChangeStorage
|| __DATA.__objc_data _OBJC_CLASS_$_CPLChangedRecordStorageView
|| __DATA.__objc_data _OBJC_CLASS_$_CPLChangedRecordView
|| __DATA.__objc_data _OBJC_CLASS_$_CPLClientCacheRecordView
|| __DATA.__objc_data _OBJC_CLASS_$_CPLCloudCacheBaseView
|| __DATA.__objc_data _OBJC_CLASS_$_CPLDeleteAlbumExtractionStep
|| __DATA.__objc_data _OBJC_CLASS_$_CPLDiffTracker
|| __DATA.__objc_data _OBJC_CLASS_$_CPLDropAllRecordsExtractionStep
|| __DATA.__objc_data _OBJC_CLASS_$_CPLEngineBackupSyncTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLEngineComponentEnumerator
|| __DATA.__objc_data _OBJC_CLASS_$_CPLEngineForceSyncTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLEngineResourceUploadTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLEngineWriteTransactionBlocker
|| __DATA.__objc_data _OBJC_CLASS_$_CPLExtractedBatch
|| __DATA.__objc_data _OBJC_CLASS_$_CPLFaceAnalysis
|| __DATA.__objc_data _OBJC_CLASS_$_CPLFaceAnalysisReference
|| __DATA.__objc_data _OBJC_CLASS_$_CPLFaceInstance
|| __DATA.__objc_data _OBJC_CLASS_$_CPLFeature
|| __DATA.__objc_data _OBJC_CLASS_$_CPLFileStorageItem
|| __DATA.__objc_data _OBJC_CLASS_$_CPLForceSyncTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLInMemoryResourceDownloadTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMemoryAsset
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMemoryAssetFlag
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMemoryAssetList
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMomentShare
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMomentShareFeature
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMomentShareParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMomentSharePreviewData
|| __DATA.__objc_data _OBJC_CLASS_$_CPLMomentShareScopeChange
|| __DATA.__objc_data _OBJC_CLASS_$_CPLNewAlbumExtractionStep
|| __DATA.__objc_data _OBJC_CLASS_$_CPLNewAssetExtractionStep
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPlaceAnnotation
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPlaceholderRecord
|| __DATA.__objc_data _OBJC_CLASS_$_CPLProxyForceSyncTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLProxyResourceTransferTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPullFromTransportScopeTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPullSessionScopesAcknowledgement
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPullSessionUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPushRepositoryStorage
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPushSessionTracker
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPushSessionUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_CPLPushToTransportScopeTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLQuarantineFeedbackMessage
|| __DATA.__objc_data _OBJC_CLASS_$_CPLRampingRequest
|| __DATA.__objc_data _OBJC_CLASS_$_CPLRampingRequestResource
|| __DATA.__objc_data _OBJC_CLASS_$_CPLRampingResponse
|| __DATA.__objc_data _OBJC_CLASS_$_CPLRampingResponseResource
|| __DATA.__objc_data _OBJC_CLASS_$_CPLRecordChangeDiffTracker
|| __DATA.__objc_data _OBJC_CLASS_$_CPLRecordView
|| __DATA.__objc_data _OBJC_CLASS_$_CPLRejectedRecords
|| __DATA.__objc_data _OBJC_CLASS_$_CPLResourceTypeSet
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSettingFeedbackMessage
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSimpleMergeHelper
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSimpleMerger
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSimpleRecordView
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSuggestionAsset
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSuggestionAssetFlag
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSuggestionMemory
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSuggestionPerson
|| __DATA.__objc_data _OBJC_CLASS_$_CPLSuggestionRecordList
|| __DATA.__objc_data _OBJC_CLASS_$_CPLTestFeedbackMessage
|| __DATA.__objc_data _OBJC_CLASS_$_CPLTransientRepositoryStorage
|| __DATA.__objc_data _OBJC_CLASS_$_CPLTransportUpdateScopeTask
|| __DATA.__objc_data _OBJC_CLASS_$_CPLTrashedAssetExtractionStep
|| __DATA.__objc_data _OBJC_CLASS_$_CPLUnacknowledgedChangeStorage
|| __DATA.__objc_data _OBJC_CLASS_$__CPLEngineStoreBatchedTransaction
|| __DATA.__objc_data _OBJC_CLASS_$__CPLForcedSyncHistory
|| __DATA.__objc_data _OBJC_CLASS_$__CPLTransientStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLAdjustments
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLArchiver
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLAssetKeywordSortDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLBatchExtractionStrategy
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLBeforeUploadCheckItem
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLBeforeUploadCheckItems
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLChangeBatchChangeStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLChangeSessionUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLChangeStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLChangedRecordStorageView
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLChangedRecordView
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLClientCacheRecordView
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLCloudCacheBaseView
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLDeleteAlbumExtractionStep
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLDiffTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLDropAllRecordsExtractionStep
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLEngineBackupSyncTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLEngineComponentEnumerator
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLEngineForceSyncTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLEngineResourceUploadTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLEngineWriteTransactionBlocker
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLExtractedBatch
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLFaceAnalysis
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLFaceAnalysisReference
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLFaceInstance
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLFeature
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLFileStorageItem
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLForceSyncTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLInMemoryResourceDownloadTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMemoryAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMemoryAssetFlag
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMemoryAssetList
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMomentShare
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMomentShareFeature
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMomentShareParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMomentSharePreviewData
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLMomentShareScopeChange
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLNewAlbumExtractionStep
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLNewAssetExtractionStep
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPlaceAnnotation
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPlaceholderRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLProxyForceSyncTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLProxyResourceTransferTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPullFromTransportScopeTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPullSessionScopesAcknowledgement
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPullSessionUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPushRepositoryStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPushSessionTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPushSessionUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLPushToTransportScopeTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLQuarantineFeedbackMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLRampingRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLRampingRequestResource
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLRampingResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLRampingResponseResource
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLRecordChangeDiffTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLRecordView
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLRejectedRecords
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLResourceTypeSet
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSettingFeedbackMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSimpleMergeHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSimpleMerger
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSimpleRecordView
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSuggestionAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSuggestionAssetFlag
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSuggestionMemory
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSuggestionPerson
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLSuggestionRecordList
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLTestFeedbackMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLTransientRepositoryStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLTransportUpdateScopeTask
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLTrashedAssetExtractionStep
|| __DATA.__objc_data _OBJC_METACLASS_$_CPLUnacknowledgedChangeStorage
|| __DATA.__objc_data _OBJC_METACLASS_$__CPLEngineStoreBatchedTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$__CPLForcedSyncHistory
|| __DATA.__objc_data _OBJC_METACLASS_$__CPLTransientStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLAccountFlags._defaultHEVC
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLAccountFlags._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLAccountFlags._reason
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLAccountFlags._version
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceAnalysis._completed
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceAnalysis._faceInstances
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceAnalysis._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._centerX
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._centerY
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._faceState
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._nameSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._personIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._rejectedPersonIdentifiers
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLFaceInstance._size
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAsset._assetFlag
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAsset._assetIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAsset._assetMovieData
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAsset._masterFingerprint
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetFlag._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetFlag._isCurated
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetFlag._isExtendedCurated
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetFlag._isKeyAsset
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetFlag._isMovieCurated
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetFlag._isRepresentative
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetFlag._isUserCurated
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetList._assets
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetList._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMemoryAssetList._version
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMomentSharePreviewData._cropRectString
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMomentSharePreviewData._curatedAssetIdentifiers
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMomentSharePreviewData._keyAssetIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLMomentSharePreviewData._previewImageDatas
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingRequest._requests
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingRequestResource._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingRequestResource._numRequested
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingRequestResource._resource
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingResponse._responses
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingResponseResource._allowed
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingResponseResource._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingResponseResource._resource
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLRampingResponseResource._retryAfterMillis
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLServerFeedbackKeyAndValue._key
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLServerFeedbackKeyAndValue._value
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLServerFeedbackMessage._keysAndValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLServerFeedbackRequest._messages
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionAsset._actionData
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionAsset._assetFlag
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionAsset._assetIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionAsset._masterFingerprint
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionAssetFlag._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionAssetFlag._isKeyAsset
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionAssetFlag._isRepresentative
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionMemory._context
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionMemory._feature
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionMemory._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionMemory._memoryIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionMemory._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionPerson._context
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionPerson._feature
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionPerson._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionPerson._personIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionPerson._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionRecordList._assets
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionRecordList._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionRecordList._memorys
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionRecordList._persons
|| __DATA.__objc_ivar _OBJC_IVAR_$_CPLSuggestionRecordList._version
|| __DATA_CONST.__const _CPLAnalysisReferenceUnadjustedFingerprint
|| __DATA_CONST.__const _CPLConfigurationPrefetchDictionaryKey
|| __DATA_CONST.__const _CPLDiagnosticsConsentText
|| __DATA_CONST.__const _CPLDiagnosticsInProgressPrefix
|| __DATA_CONST.__const _CPLDiagnosticsLogsPath
|| __DATA_CONST.__const _CPLDiagnosticsName
|| __DATA_CONST.__const _CPLDiagnosticsNoDatabases
|| __DATA_CONST.__const _CPLDiagnosticsService
|| __DATA_CONST.__const _CPLDropDerivativesTestRulesKey
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyCreationDate
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyDeleteDate
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyDisabledDate
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyDownloadGroup
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyFlags
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyIndexes
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyInfoUpdateStatus
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyInitialEstimatedSize
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyInitialSyncDate
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyLastSupportedFeatureVersion
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyQueries
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyScopeType
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyStorages
|| __DATA_CONST.__const _CPLEngineScopeStatusKeySyncAnchor
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyTodoItems
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyTransientSyncAnchor
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyTransportScope
|| __DATA_CONST.__const _CPLEngineScopeStatusKeyUploadGroup
|| __DATA_CONST.__const _CPLErrorDomain
|| __DATA_CONST.__const _CPLErrorRejectedRecordIdentifiersAndReasonsKey
|| __DATA_CONST.__const _CPLErrorRejectedRecordIdentifiersKey
|| __DATA_CONST.__const _CPLErrorRequestUUIDs
|| __DATA_CONST.__const _CPLErrorResetReason
|| __DATA_CONST.__const _CPLErrorRetryAfterDateKey
|| __DATA_CONST.__const _CPLErrorRetryAfterReasonKey
|| __DATA_CONST.__const _CPLErrorScopeIdentifiers
|| __DATA_CONST.__const _CPLErrorWipeReasonKey
|| __DATA_CONST.__const _CPLFeatureNameMomentShare
|| __DATA_CONST.__const _CPLLibraryIdentifierSyndicationLibrary
|| __DATA_CONST.__const _CPLLibraryIdentifierSystemLibrary
|| __DATA_CONST.__const _CPLLibraryManagerCameraCaptureFormatSetting
|| __DATA_CONST.__const _CPLLibraryManagerOptimizedLibrarySetting
|| __DATA_CONST.__const _CPLLibraryManagerStreamingHintEndTime
|| __DATA_CONST.__const _CPLLibraryManagerStreamingHintStartTime
|| __DATA_CONST.__const _CPLLibraryMustBeWipedNotificationName
|| __DATA_CONST.__const _CPLMainScopeIdentifier
|| __DATA_CONST.__const _CPLMiscInformationAppendCPLReport
|| __DATA_CONST.__const _CPLStatusHasBatteryBudgetKey
|| __DATA_CONST.__const _CPLStatusHasCellularBudgetKey
|| __DATA_CONST.__const _CPLStatusHasConstrainedNetworkKey
|| __DATA_CONST.__const _CPLStatusIsBlockedByLowPowerModeKey
|| __DATA_CONST.__const _CPLSyncProgressCountOfPulledAssetsKey
|| __DATA_CONST.__const _CPLSyncProgressStateKey
|| __DATA_CONST.__const _CPLSyncSessionPredictionTypeDownloadResourceSize
|| __DATA_CONST.__const _CPLSyncSessionPredictionTypeUploadResourceSize
|| __DATA_CONST.__const _kCPLStatusHasBatteryBudgetKey
|| __DATA_CONST.__const _kCPLStatusHasCellularBudgetKey
|| __DATA_DIRTY.__common ___SBSSetStatusBarShowsActivityForApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLAccountFlags
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLActiveDownloadQueue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLAlbumChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLAssetChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLBackgroundDownloadsTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLChangeBatch
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLChangeSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLChangeSessionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLCleanupTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLClientCacheBaseView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLCodingPropertyEntry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLContainerChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLContainerRelation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLContainerRelationChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLDateFormatter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLDerivativesFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLDropDerivativesRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineChangePipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineCloudCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineDerivativesCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineFeedbackManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineFileStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineIDMapping
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineInitialQueryTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineLibrary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineMultiscopeSyncTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineOutgoingResources
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEnginePushRepository
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineQuarantinedRecords
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineRemappedDeletes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineResourceDownloadQueue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineResourceDownloadTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineResourceStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineScheduler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineScope
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineScopeCleanupTasks
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineScopeFlagsUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineScopeStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineScopedTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineStatusCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineStoreTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineSyncManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineSyncTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineSystemMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineTransientRepository
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLEngineTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLErrors
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLExpungeableResourceState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLFaceCropChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLFeatureVersionHistory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLFileWatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLInfoFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLItemChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLLibraryInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLLibraryManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLLibraryState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLMasterChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLMemoryChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLMinglePulledChangesTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLNetworkIndicator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLNetworkState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLNetworkWatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPersonChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPersonReference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPlatform
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPlatformObject
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPowerAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLProxyLibraryManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLProxyPullSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLProxyPushSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLProxySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPullChangeSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPullFromTransportSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPullFromTransportTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPullScopesTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPushChangeSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPushChangeTasks
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPushToTransportSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLPushToTransportTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLRecordChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLRecordStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLRecordStorageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLResetReason
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLResetTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLResource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLResourceIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLResourceIdentityImplementation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLResourceTransferTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLResourceTransferTaskOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLScopeChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLScopeFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLScopeUpdateScopeTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLScopeUpdateTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLScopedIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSerializedFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLServerFeedbackKeyAndValue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLServerFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLServerFeedbackRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLServerFeedbackResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLShare
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLShareParticipant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSimpleTaskSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSuggestionChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSyncIndicator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSyncSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSyncSessionPrediction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSyncSessionPredictor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CPLTransportUpdateTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__CPLOptimisticIDMapping
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__CPLScheduledOverride
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLAccountFlags
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLActiveDownloadQueue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLAlbumChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLAssetChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLBackgroundDownloadsTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLChangeBatch
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLChangeSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLChangeSessionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLCleanupTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLClientCacheBaseView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLCodingPropertyEntry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLContainerChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLContainerRelation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLContainerRelationChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLDateFormatter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLDerivativesFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLDropDerivativesRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineChangePipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineCloudCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineDerivativesCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineFeedbackManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineFileStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineIDMapping
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineInitialQueryTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineLibrary
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineMultiscopeSyncTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineOutgoingResources
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEnginePushRepository
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineQuarantinedRecords
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineRemappedDeletes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineResourceDownloadQueue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineResourceDownloadTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineResourceStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineScheduler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineScope
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineScopeCleanupTasks
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineScopeFlagsUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineScopeStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineScopedTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineStatusCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineStoreTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineSyncManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineSyncTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineSystemMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineTransientRepository
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLEngineTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLErrors
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLExpungeableResourceState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLFaceCropChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLFeatureVersionHistory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLFileWatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLInfoFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLItemChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLLibraryInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLLibraryManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLLibraryState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLMasterChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLMemoryChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLMinglePulledChangesTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLNetworkIndicator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLNetworkState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLNetworkWatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPersonChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPersonReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPlatform
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPlatformObject
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPowerAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLProxyLibraryManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLProxyPullSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLProxyPushSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLProxySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPullChangeSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPullFromTransportSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPullFromTransportTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPullScopesTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPushChangeSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPushChangeTasks
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPushToTransportSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLPushToTransportTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLRecordChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLRecordStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLRecordStorageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLResetReason
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLResetTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLResource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLResourceIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLResourceIdentityImplementation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLResourceTransferTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLResourceTransferTaskOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLScopeChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLScopeFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLScopeUpdateScopeTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLScopeUpdateTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLScopedIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSerializedFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLServerFeedbackKeyAndValue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLServerFeedbackMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLServerFeedbackRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLServerFeedbackResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLShare
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLShareParticipant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSimpleTaskSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSuggestionChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSyncIndicator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSyncSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSyncSessionPrediction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSyncSessionPredictor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLSyncStep
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CPLTransportUpdateTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__CPLOptimisticIDMapping
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__CPLScheduledOverride
|| __TEXT.__const _CPLSyncSessionDetachedSequenceNumber
|| __TEXT.__const _CloudPhotoLibraryVersionNumber
|| __TEXT.__const _CloudPhotoLibraryVersionString
|| __TEXT.__const _kCPLMemoryListCurrentVersion
|| __TEXT.__const _kCPLSuggestionListCurrentVersion
|| __TEXT.__text _CPLAccountFlagsReadFrom
|| __TEXT.__text _CPLCopyDefaultSerialQueueAttributes
|| __TEXT.__text _CPLCurrentQOS
|| __TEXT.__text _CPLFaceAnalysisReadFrom
|| __TEXT.__text _CPLFaceInstanceReadFrom
|| __TEXT.__text _CPLGetDynamicVersionForDownloadResource
|| __TEXT.__text _CPLIsDynamicResourceFingerprint
|| __TEXT.__text _CPLIsInTestReadonlyMode
|| __TEXT.__text _CPLMarkDownloadedResourceWithDynamicVersion
|| __TEXT.__text _CPLMemoryAssetFlagReadFrom
|| __TEXT.__text _CPLMemoryAssetListReadFrom
|| __TEXT.__text _CPLMemoryAssetReadFrom
|| __TEXT.__text _CPLMomentSharePreviewDataReadFrom
|| __TEXT.__text _CPLRampingRequestReadFrom
|| __TEXT.__text _CPLRampingRequestResourceReadFrom
|| __TEXT.__text _CPLRampingResponseReadFrom
|| __TEXT.__text _CPLRampingResponseResourceReadFrom
|| __TEXT.__text _CPLServerFeedbackKeyAndValueReadFrom
|| __TEXT.__text _CPLServerFeedbackMessageReadFrom
|| __TEXT.__text _CPLServerFeedbackRequestReadFrom
|| __TEXT.__text _CPLServerFeedbackResponseReadFrom
|| __TEXT.__text _CPLSuggestionAssetFlagReadFrom
|| __TEXT.__text _CPLSuggestionAssetReadFrom
|| __TEXT.__text _CPLSuggestionMemoryReadFrom
|| __TEXT.__text _CPLSuggestionPersonReadFrom
|| __TEXT.__text _CPLSuggestionRecordListReadFrom
|| __TEXT.__text __CPLAbort
|| __TEXT.__text __CPLExit
|| __TEXT.__text __CPLOSLogSubsystem
|| __TEXT.__text __CPLShortDescriptionForFaceCropType
|| __TEXT.__text __CPLStoreFailure
|| __TEXT.__text ___CPLEngineOSLogDomain
|| __TEXT.__text ___CPLEnvironmentDictionary
|| __TEXT.__text ___CPLGenericOSLogDomain
|| __TEXT.__text ___CPLQOSOSLogDomain
|| __TEXT.__text ___CPLShouldLogQOS
|| __TEXT.__text ___CPLStoreOSLogDomain
|| __TEXT.__text ___CPLSupportedFeatureVersion
|| __TEXT.__text ___CPLVersion
|| __TEXT.__text _cpllogGreenTea
|| __TEXT.__text _cpllogGreenTeaEnabled
|| __TEXT.__text _cpllogGreenTeaReadingPhotosOrVideos
|| __TEXT.__text _cpllogGreenTeaSetCallerBundleIdentifier
|| __TEXT.__text _cpllogGreenTeaTransmittingPhotosOrVideos
|| __TEXT.__text _cpllogGreenTeaWithFormat
__ AppSupport: _OBJC_CLASS_$_RadiosPreferences
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetDistributedCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _NSURLFileSizeKey
__ CoreFoundation: _NSURLVolumeAvailableCapacityKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreMedia: _CMTimeRangeCopyDescription
__ CoreMedia: _kCMTimeRangeInvalid
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSEqualPoints
__ Foundation: _NSEqualRects
__ Foundation: _NSEqualSizes
__ Foundation: _NSFilePathErrorKey
__ Foundation: _NSFileProtectionCompleteUntilFirstUserAuthentication
__ Foundation: _NSFileProtectionKey
__ Foundation: _NSHelpAnchorErrorKey
__ Foundation: _NSIsEmptyRect
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLocalizedFileSizeDescription
__ Foundation: _NSLocalizedRecoveryOptionsErrorKey
__ Foundation: _NSLocalizedRecoverySuggestionErrorKey
__ Foundation: _NSMachErrorDomain
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSProtocolFromString
__ Foundation: _NSRecoveryAttempterErrorKey
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringEncodingErrorKey
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromPoint
__ Foundation: _NSStringFromProtocol
__ Foundation: _NSStringFromRect
__ Foundation: _NSStringFromSelector
__ Foundation: _NSStringFromSize
__ Foundation: _NSURLErrorKey
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _NSZeroPoint
__ Foundation: _NSZeroRect
__ Foundation: _NSZeroSize
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSByteCountFormatter
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCoder
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSCondition
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponents
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLRequest
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_METACLASS_$_NSCoder
__ Foundation: _OBJC_METACLASS_$_NSSortDescriptor
__ Foundation: __NSXPCConnectionInvocationReplyToSelectorKey
__ IOKit: _IONotificationPortCreate
__ IOKit: _IONotificationPortSetDispatchQueue
__ IOKit: _IOPMAssertionCreateWithDescription
__ IOKit: _IOPMAssertionRelease
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IOServiceAddInterestNotification
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _kIOMainPortDefault
__ MMCS: _MMCSSignatureAndSchemeSize
__ MMCS: _MMCSSignatureGeneratorCreate
__ MMCS: _MMCSSignatureGeneratorFinish
__ MMCS: _MMCSSignatureGeneratorUpdate
__ MMCS: _MMCSSignatureIsValidV2
__ PhotosFormats: _OBJC_CLASS_$_PFMediaCapabilities
__ PhotosFormats: _OBJC_CLASS_$_PFUniformTypeUtilities
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_CLASS_$_PBRequest
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_METACLASS_$_PBRequest
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ UniformTypeIdentifiers: _OBJC_CLASS_$_UTType
__ UniformTypeIdentifiers: _UTTypeAudio
__ UniformTypeIdentifiers: _UTTypeData
__ UniformTypeIdentifiers: _UTTypeImage
__ UniformTypeIdentifiers: _UTTypeMovie
__ libCTGreenTeaLogger.dylib: _ct_green_tea_logger_create
__ libCTGreenTeaLogger.dylib: _ct_green_tea_logger_create_static
__ libCTGreenTeaLogger.dylib: _ct_green_tea_logger_destroy
__ libCTGreenTeaLogger.dylib: _ct_green_tea_logging_enabled
__ libCTGreenTeaLogger.dylib: _getCTGreenTeaOsLogHandle
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Init
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_UPLOAD_SIZE
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___tolower
__ libSystem.B.dylib: ___toupper
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dispatch_source_type_vnode
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: _abort
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _copyfile
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_block_wait
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fstat
__ libSystem.B.dylib: _getxattr
__ libSystem.B.dylib: _kOSThermalNotificationPressureLevelName
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _lseek
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_log_with_args
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _qos_class_self
__ libSystem.B.dylib: _read
__ libSystem.B.dylib: _rename
__ libSystem.B.dylib: _setxattr
__ libSystem.B.dylib: _sleep
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _voucher_adopt
__ libSystem.B.dylib: _voucher_copy
__ libSystem.B.dylib: _xpc_activity_copy_criteria
__ libSystem.B.dylib: _xpc_activity_set_criteria
__ libSystem.B.dylib: _xpc_activity_should_defer
__ libSystem.B.dylib: _xpc_array_get_count
__ libSystem.B.dylib: _xpc_array_get_value
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_get_type
__ libcupolicy.dylib: _network_usage_policy_create_client
__ libcupolicy.dylib: _network_usage_policy_destroy_client
__ libcupolicy.dylib: _network_usage_policy_get_bundle_from_policy
__ libcupolicy.dylib: _network_usage_policy_get_cell_data_allowed_from_policy
__ libcupolicy.dylib: _network_usage_policy_get_for_bundle
__ libcupolicy.dylib: _network_usage_policy_set_changed_handler
__ libnetwork.dylib: _nw_path_get_status
__ libnetwork.dylib: _nw_path_is_constrained
__ libnetwork.dylib: _nw_path_is_expensive
__ libnetwork.dylib: _nw_path_monitor_cancel
__ libnetwork.dylib: _nw_path_monitor_create
__ libnetwork.dylib: _nw_path_monitor_set_queue
__ libnetwork.dylib: _nw_path_monitor_set_update_handler
__ libnetwork.dylib: _nw_path_monitor_start
__ libnetwork.dylib: _nw_path_uses_interface_type
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_EHTYPE_id
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_copyPropertyList
__ libobjc.A.dylib: _class_getInstanceVariable
__ libobjc.A.dylib: _class_getMethodImplementation
__ libobjc.A.dylib: _ivar_getOffset
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _object_getIvar
__ libobjc.A.dylib: _object_setIvar
__ libobjc.A.dylib: _property_getAttributes
__ libobjc.A.dylib: _property_getName
CPLProxyLibraryManager : CPLPlatformObject <CPLClientLibraryManagerProtocol, NSXPCConnectionDelegate, CPLLibraryManagerImplementation>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLProxyLibraryManager daemonProtocolInterface]
  +[CPLProxyLibraryManager clientProtocolInterface]

  // instance methods
  -[CPLProxyLibraryManager resetStatus]
  -[CPLProxyLibraryManager _setupConnection]
  -[CPLProxyLibraryManager disableMingling]
  -[CPLProxyLibraryManager boostPriorityForScopeWithIdentifier:completionHandler:]
  -[CPLProxyLibraryManager openWithCompletionHandler:]
  -[CPLProxyLibraryManager noteClientIsInForegroundQuietly:]
  -[CPLProxyLibraryManager createScope:completionHandler:]
  -[CPLProxyLibraryManager disableSynchronizationWithReason:]
  -[CPLProxyLibraryManager enableMingling]
  -[CPLProxyLibraryManager cancelTask:]
  -[CPLProxyLibraryManager deleteResources:checkServerIfNecessary:completionHandler:]
  -[CPLProxyLibraryManager blockEngineElement:]
  -[CPLProxyLibraryManager closeWithCompletionHandler:]
  -[CPLProxyLibraryManager deactivateScopeWithIdentifier:completionHandler:]
  -[CPLProxyLibraryManager forceSynchronizingScopeWithIdentifiers:completionHandler:]
  -[CPLProxyLibraryManager provideCloudResource:completionHandler:]
  -[CPLProxyLibraryManager updateShareForScope:completionHandler:]
  -[CPLProxyLibraryManager reportSetting:hasBeenSetToValue:]
  -[CPLProxyLibraryManager deactivateWithCompletionHandler:]
  -[CPLProxyLibraryManager getCloudCacheForRecordWithScopedIdentifier:completionHandler:]
  -[CPLProxyLibraryManager getStatusesForScopesWithIdentifiers:includeStorages:completionHandler:]
  -[CPLProxyLibraryManager addStatusChangesForRecordsWithScopedIdentifiers:persist:]
  -[CPLProxyLibraryManager getResourcesForItemWithScopedIdentifier:completionHandler:]
  -[CPLProxyLibraryManager noteClientIsInBackground]
  -[CPLProxyLibraryManager noteClientReceivedNotificationOfServerChanges]
  -[CPLProxyLibraryManager enableSynchronizationWithReason:]
  -[CPLProxyLibraryManager requestClientToPushAllChangesWithCompletionHandler:]
  -[CPLProxyLibraryManager barrier]
  -[CPLProxyLibraryManager provideRecordWithCloudScopeIdentifier:completionHandler:]
  -[CPLProxyLibraryManager getStreamingURLForResource:intent:hints:timeRange:clientBundleID:completionHandler:]
  -[CPLProxyLibraryManager testKey:value:completionHandler:]
  -[CPLProxyLibraryManager noteClientIsBeginningSignificantWork]
  -[CPLProxyLibraryManager acknowledgeChangedStatuses:]
  -[CPLProxyLibraryManager _dropConnectionCompletlyLocked]
  -[CPLProxyLibraryManager noteClientIsEndingSignificantWork]
  -[CPLProxyLibraryManager addDropDerivativesRecipe:writeToUserDefaults:withCompletionHandler:]
  -[CPLProxyLibraryManager getChangedStatusesWithCompletionHandler:]
  -[CPLProxyLibraryManager reportMiscInformation:]
  -[CPLProxyLibraryManager _setCallBlockOnDaemonDying:]
  -[CPLProxyLibraryManager cloudCacheGetDescriptionForRecordWithScopedIdentifier:related:completionHandler:]
  -[CPLProxyLibraryManager unblockEngineElement:]
  -[CPLProxyLibraryManager getStatusForComponents:completionHandler:]
  -[CPLProxyLibraryManager rampingRequestForResourceType:numRequested:completionHandler:]
  -[CPLProxyLibraryManager queryUserDetailsForShareParticipants:completionHandler:]
  -[CPLProxyLibraryManager getStatusArrayForComponents:completionHandler:]
  -[CPLProxyLibraryManager activateScopeWithIdentifier:completionHandler:]
  -[CPLProxyLibraryManager resolveLocalScopedIdentifiersForCloudScopedIdentifiers:completionHandler:]
  -[CPLProxyLibraryManager beginDownloadForResource:clientBundleID:options:proposedTaskIdentifier:completionHandler:]
  -[CPLProxyLibraryManager _connection]
  -[CPLProxyLibraryManager proxyWithErrorHandler:]
  -[CPLProxyLibraryManager getStatusForRecordsWithScopedIdentifiers:completionHandler:]
  -[CPLProxyLibraryManager unblockEngineElementOnce:]
  -[CPLProxyLibraryManager acceptSharedScope:completionHandler:]
  -[CPLProxyLibraryManager initWithAbstractObject:]
  -[CPLProxyLibraryManager compactFileCacheWithCompletionHandler:]
  -[CPLProxyLibraryManager forceBackupWithCompletionHandler:]
  -[CPLProxyLibraryManager checkResourcesAreSafeToPrune:checkServerIfNecessary:completionHandler:]
  -[CPLProxyLibraryManager startSyncSession]
  -[CPLProxyLibraryManager checkHasBackgroundDownloadOperationsWithCompletionHandler:]
  -[CPLProxyLibraryManager getListOfComponentsWithCompletionHandler:]
  -[CPLProxyLibraryManager addInfoToLog:]
  -[CPLProxyLibraryManager getSystemBudgetsWithCompletionHandler:]
  -[CPLProxyLibraryManager beginInMemoryDownloadOfResource:completionHandler:]
  -[CPLProxyLibraryManager provideScopeChangeForScopeWithIdentifier:completionHandler:]
  -[CPLProxyLibraryManager _markConnectionAsInvalid]
  -[CPLProxyLibraryManager _uploadTaskDidStartForResource:withTaskIdentifier:]
  -[CPLProxyLibraryManager libraryManagerHasBeenReplaced]
  -[CPLProxyLibraryManager _invokeSyncOutstandingInvocationsWithTaskIdentifier:]
  -[CPLProxyLibraryManager libraryManagerDidUpdateStatusWithProperties:]
  -[CPLProxyLibraryManager downloadDidProgress:forResourceTransferTask:]
  -[CPLProxyLibraryManager .cxx_destruct]
  -[CPLProxyLibraryManager libraryManagerHasStatusChanges]
  -[CPLProxyLibraryManager downloadDidFinishForResourceTransferTask:finalResource:withError:]
  -[CPLProxyLibraryManager cancelSyncTask:]
  -[CPLProxyLibraryManager _withVoucherForTaskWithIdentifier:do:]
  -[CPLProxyLibraryManager pushAllChangesWithCompletionHandler:]
  -[CPLProxyLibraryManager _reallyOpenWithCompletionHandler:]
  -[CPLProxyLibraryManager forceSyncDidFinishForTask:withErrors:]
  -[CPLProxyLibraryManager _dropConnectionCompletly]
  -[CPLProxyLibraryManager _dispatchFailedInMemoryDownloadTaskForResource:withError:withCompletionHandler:]
  -[CPLProxyLibraryManager _setStatusFromDictionary:]
  -[CPLProxyLibraryManager libraryManagerHasChangesToPull]
  -[CPLProxyLibraryManager downloadDidStartForResourceTransferTask:]
  -[CPLProxyLibraryManager uploadOfResource:didProgress:forResourceTransferTask:]
  -[CPLProxyLibraryManager libraryManagerDidUpdateSizeOfResourcesToUploadToSize:sizeOfOriginalResourcesToUpload:numberOfImages:numberOfVideos:numberOfOtherItems:]
  -[CPLProxyLibraryManager _dispatchBlockWhenOpen:]
  -[CPLProxyLibraryManager _dropVoucherForTaskWithIdentifier:]
  -[CPLProxyLibraryManager _dispatchFailedDownloadTaskForResource:options:proposedTaskIdentifier:withError:withCompletionHandler:]
  -[CPLProxyLibraryManager backgroundDownloadDidFailForResource:]
  -[CPLProxyLibraryManager backgroundDownloadDidFinishForResource:]
  -[CPLProxyLibraryManager queue]
  -[CPLProxyLibraryManager _invokeOutstandingInvocationsWithTaskIdentifier:]
  -[CPLProxyLibraryManager _storeVoucher:forTaskWithIdentifier:]
  -[CPLProxyLibraryManager provideLocalResource:recordClassString:completionHandler:]
  -[CPLProxyLibraryManager dealloc]
  -[CPLProxyLibraryManager _dispatchFailedForceSyncTaskForScopeIdentifiers:withError:withCompletionHandler:]
  -[CPLProxyLibraryManager resetCacheWithOption:reason:completionHandler:]
  -[CPLProxyLibraryManager dispatchBlockWhenLibraryIsOpen:]
  -[CPLProxyLibraryManager connection:handleInvocation:isReply:]
  -[CPLProxyLibraryManager setShouldOverride:forSystemBudgets:]
  -[CPLProxyLibraryManager _callBlockOnDaemonDying]
  -[CPLProxyLibraryManager getMappedScopedIdentifiersForScopedIdentifiers:inAreLocalIdentifiers:completionHandler:]
  -[CPLProxyLibraryManager uploadOfResource:didFinishForResourceTransferTask:withError:]
  -[CPLProxyLibraryManager inMemoryDownloadDidFinishForResourceTransferTask:data:withError:]
  -[CPLProxyLibraryManager fetchSharedScopeFromShareURL:completionHandler:]
  -[CPLProxyLibraryManager uploadDidStartForResource:withResourceTransferTask:]


CPLProxyLibraryManagerOutstandingInvocation : NSObject
 @property  BOOL inMemoryRequest
 @property  BOOL didStart
 @property  float progress
 @property  BOOL didFinish
 @property  NSError *finalError
 @property  CPLResource *finalResource
 @property  NSData *finalData

  // instance methods
  -[CPLProxyLibraryManagerOutstandingInvocation .cxx_destruct]
  -[CPLProxyLibraryManagerOutstandingInvocation progress]
  -[CPLProxyLibraryManagerOutstandingInvocation setDidFinish:]
  -[CPLProxyLibraryManagerOutstandingInvocation setProgress:]
  -[CPLProxyLibraryManagerOutstandingInvocation didFinish]
  -[CPLProxyLibraryManagerOutstandingInvocation didStart]
  -[CPLProxyLibraryManagerOutstandingInvocation isInMemoryRequest]
  -[CPLProxyLibraryManagerOutstandingInvocation finalResource]
  -[CPLProxyLibraryManagerOutstandingInvocation finalError]
  -[CPLProxyLibraryManagerOutstandingInvocation finalData]
  -[CPLProxyLibraryManagerOutstandingInvocation setDidStart:]
  -[CPLProxyLibraryManagerOutstandingInvocation setFinalError:]
  -[CPLProxyLibraryManagerOutstandingInvocation setFinalResource:]
  -[CPLProxyLibraryManagerOutstandingInvocation setInMemoryRequest:]
  -[CPLProxyLibraryManagerOutstandingInvocation setFinalData:]


CPLProxyLibraryManagerSyncOutstandingInvocation : NSObject
 @property  NSDictionary *errors
 @property  BOOL didFinish

  // instance methods
  -[CPLProxyLibraryManagerSyncOutstandingInvocation setErrors:]
  -[CPLProxyLibraryManagerSyncOutstandingInvocation .cxx_destruct]
  -[CPLProxyLibraryManagerSyncOutstandingInvocation errors]
  -[CPLProxyLibraryManagerSyncOutstandingInvocation setDidFinish:]
  -[CPLProxyLibraryManagerSyncOutstandingInvocation didFinish]


CPLProxyForceSyncTask : CPLForceSyncTask
 @property  CPLProxyLibraryManager *proxyLibraryManager

  // instance methods
  -[CPLProxyForceSyncTask .cxx_destruct]
  -[CPLProxyForceSyncTask setProxyLibraryManager:]
  -[CPLProxyForceSyncTask proxyLibraryManager]
  -[CPLProxyForceSyncTask cancelTask]


CPLProxyPullSession : CPLProxySession <CPLPullChangeSessionImplementation>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLProxyPullSession beginSessionForProxy:knownVersion:context:completionHandler:]

  // instance methods
  -[CPLProxyPullSession acknowledgeChangeBatch:withCompletionHandler:]
  -[CPLProxyPullSession getChangeBatchWithCompletionHandler:]


CPLProxyPushSession : CPLProxySession <CPLPushChangeSessionImplementation>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLProxyPushSession beginSessionForProxy:knownVersion:context:completionHandler:]

  // instance methods
  -[CPLProxyPushSession commitChangeBatch:withCompletionHandler:]


CPLProxyResourceTransferTask : CPLResourceTransferTask
 @property  CPLProxyLibraryManager *proxyLibraryManager

  // instance methods
  -[CPLProxyResourceTransferTask .cxx_destruct]
  -[CPLProxyResourceTransferTask setProxyLibraryManager:]
  -[CPLProxyResourceTransferTask proxyLibraryManager]
  -[CPLProxyResourceTransferTask cancelTask]


CPLProxySession : CPLPlatformObject <CPLChangeSessionImplementation>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLProxySession beginSessionForProxy:knownVersion:context:completionHandler:]

  // instance methods
  -[CPLProxySession proxyWithErrorHandler:]
  -[CPLProxySession tearDownWithCompletionHandler:]
  -[CPLProxySession beginSessionWithKnownLibraryVersion:context:completionHandler:]
  -[CPLProxySession finalizeWithCompletionHandler:]
  -[CPLProxySession proxyLibraryManager]
  -[CPLProxySession dispatchBlockWhenLibraryIsOpen:]


CPLAdjustments : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *creatorCode
 @property  NSString *adjustmentType
 @property  NSString *adjustmentCompoundVersion
 @property  NSString *adjustmentCreatorCode
 @property  unsigned long adjustmentSourceType
 @property  NSData *simpleAdjustmentData
 @property  NSString *similarToOriginalAdjustmentsFingerprint
 @property  NSString *otherAdjustmentsFingerprint
 @property  unsigned long adjustmentRenderTypes
 @property  CPLResource *adjustmentData

  // class methods
  +[CPLAdjustments supportsSecureCoding]

  // instance methods
  -[CPLAdjustments initWithCoder:]
  -[CPLAdjustments setSimilarToOriginalAdjustmentsFingerprint:]
  -[CPLAdjustments .cxx_destruct]
  -[CPLAdjustments setAdjustmentType:]
  -[CPLAdjustments setAdjustmentCompoundVersion:]
  -[CPLAdjustments setAdjustmentCreatorCode:]
  -[CPLAdjustments setAdjustmentSourceType:]
  -[CPLAdjustments setSimpleAdjustmentData:]
  -[CPLAdjustments otherAdjustmentsFingerprint]
  -[CPLAdjustments adjustmentSimpleDescription]
  -[CPLAdjustments isEqual:]
  -[CPLAdjustments setOtherAdjustmentsFingerprint:]
  -[CPLAdjustments adjustmentSourceType]
  -[CPLAdjustments setAdjustmentData:]
  -[CPLAdjustments adjustmentData]
  -[CPLAdjustments adjustmentRenderTypes]
  -[CPLAdjustments setAdjustmentRenderTypes:]
  -[CPLAdjustments adjustmentCompoundVersion]
  -[CPLAdjustments adjustmentCreatorCode]
  -[CPLAdjustments simpleAdjustmentData]
  -[CPLAdjustments copyWithZone:]
  -[CPLAdjustments adjustmentType]
  -[CPLAdjustments encodeWithCoder:]
  -[CPLAdjustments similarToOriginalAdjustmentsFingerprint]
  -[CPLAdjustments creatorCode]
  -[CPLAdjustments setCreatorCode:]


CPLExpungeableResourceState : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned long resourceType
 @property  unsigned long expungedState
 @property  NSDate *expungedDate

  // class methods
  +[CPLExpungeableResourceState supportsSecureCoding]
  +[CPLExpungeableResourceState normalizedExpungeableResourceStatesFromExpungeableResourceStates:]

  // instance methods
  -[CPLExpungeableResourceState initWithCoder:]
  -[CPLExpungeableResourceState expungedState]
  -[CPLExpungeableResourceState .cxx_destruct]
  -[CPLExpungeableResourceState setResourceType:]
  -[CPLExpungeableResourceState setExpungedState:]
  -[CPLExpungeableResourceState setExpungedDate:]
  -[CPLExpungeableResourceState resourceType]
  -[CPLExpungeableResourceState isEqual:]
  -[CPLExpungeableResourceState copyWithZone:]
  -[CPLExpungeableResourceState encodeWithCoder:]
  -[CPLExpungeableResourceState expungedDate]


CPLFeedbackMessage : NSObject
 @property  NSString *libraryIdentifier
 @property  NSString *libraryIdentifierDescription
 @property  NSString *feedbackType
 @property  CPLServerFeedbackMessage *serverMessage

  // class methods
  +[CPLFeedbackMessage feedbackType]

  // instance methods
  -[CPLFeedbackMessage libraryIdentifier]
  -[CPLFeedbackMessage .cxx_destruct]
  -[CPLFeedbackMessage feedbackType]
  -[CPLFeedbackMessage libraryIdentifierDescription]
  -[CPLFeedbackMessage initWithLibraryIdentifier:]
  -[CPLFeedbackMessage serverMessage]


CPLSerializedFeedbackMessage : NSObject
 @property  NSUUID *uuid
 @property  NSString *feedbackType
 @property  CPLServerFeedbackMessage *serverMessage
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[CPLSerializedFeedbackMessage plistRepresentationForMessages:]
  +[CPLSerializedFeedbackMessage messagesForPlistRepresentation:]

  // instance methods
  -[CPLSerializedFeedbackMessage initWithDictionaryRepresentation:]
  -[CPLSerializedFeedbackMessage .cxx_destruct]
  -[CPLSerializedFeedbackMessage dictionaryRepresentation]
  -[CPLSerializedFeedbackMessage initWithMessage:]
  -[CPLSerializedFeedbackMessage uuid]
  -[CPLSerializedFeedbackMessage feedbackType]
  -[CPLSerializedFeedbackMessage serverMessage]


CPLSimpleRecordView : CPLRecordView
  // instance methods
  -[CPLSimpleRecordView .cxx_destruct]
  -[CPLSimpleRecordView synthesizedRecord]
  -[CPLSimpleRecordView initWithRecord:]
  -[CPLSimpleRecordView scopedIdentifier]


CPLEngineResourceStorage : CPLEngineStorage <CPLAbstractObject>
 @property  CPLEngineFileStorage *fileStorage
 @property  BOOL shouldCheckFilesForUpload
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineResourceStorage scopeType]
  -[CPLEngineResourceStorage openWithError:]
  -[CPLEngineResourceStorage createTempDestinationURLForResource:error:]
  -[CPLEngineResourceStorage shouldCheckFilesForUpload]
  -[CPLEngineResourceStorage sizeOfResourcesToUpload]
  -[CPLEngineResourceStorage compactWithError:]
  -[CPLEngineResourceStorage _clearAndCreateTempFolderIfNecessaryWithError:]
  -[CPLEngineResourceStorage .cxx_destruct]
  -[CPLEngineResourceStorage resetWithError:]
  -[CPLEngineResourceStorage setShouldCheckFilesForUpload:]
  -[CPLEngineResourceStorage statusDictionary]
  -[CPLEngineResourceStorage notePruningRequestForResource:realPrune:successful:prunedSize:]
  -[CPLEngineResourceStorage hasResource:]
  -[CPLEngineResourceStorage fileStorage]
  -[CPLEngineResourceStorage releaseFileURL:forResource:error:]
  -[CPLEngineResourceStorage storeDownloadedResource:atURL:error:]
  -[CPLEngineResourceStorage status]
  -[CPLEngineResourceStorage storeResourceCopyForUpload:error:]
  -[CPLEngineResourceStorage initWithEngineStore:name:]
  -[CPLEngineResourceStorage writeTransactionDidFail]
  -[CPLEngineResourceStorage checkIsEmpty]
  -[CPLEngineResourceStorage storeResourceForUpload:shouldCheckResource:error:]
  -[CPLEngineResourceStorage dropResourceForUpload:error:]
  -[CPLEngineResourceStorage sizeOfOriginalResourcesToUpload]
  -[CPLEngineResourceStorage writeTransactionDidSucceed]
  -[CPLEngineResourceStorage retainFileURLForResource:error:]
  -[CPLEngineResourceStorage notePruningRequestForResource:realPrune:successful:]


_CPLPruneRequestCounter : NSObject
 @property  NSString *title
 @property  NSString *statusKey
 @property  NSString *status
 @property  NSDictionary *statusDictionary

  // instance methods
  -[_CPLPruneRequestCounter statusKey]
  -[_CPLPruneRequestCounter .cxx_destruct]
  -[_CPLPruneRequestCounter statusDictionary]
  -[_CPLPruneRequestCounter noteRequestForResource:successful:prunedSize:]
  -[_CPLPruneRequestCounter title]
  -[_CPLPruneRequestCounter status]
  -[_CPLPruneRequestCounter initWithTitle:statusKey:]


CPLSettingFeedbackMessage : CPLFeedbackMessage
 @property  NSString *settingName
 @property  NSString *value

  // class methods
  +[CPLSettingFeedbackMessage feedbackType]

  // instance methods
  -[CPLSettingFeedbackMessage .cxx_destruct]
  -[CPLSettingFeedbackMessage value]
  -[CPLSettingFeedbackMessage serverMessage]
  -[CPLSettingFeedbackMessage initWithSetting:value:libraryIdentifier:]
  -[CPLSettingFeedbackMessage settingName]


CPLSyncSessionPrediction : NSObject
  // instance methods
  -[CPLSyncSessionPrediction redactedDescription]
  -[CPLSyncSessionPrediction matchesXPCActivityCriteria:]
  -[CPLSyncSessionPrediction .cxx_destruct]
  -[CPLSyncSessionPrediction init]
  -[CPLSyncSessionPrediction initWithPredictedValuesAndTypes:]
  -[CPLSyncSessionPrediction predictedValueForType:]
  -[CPLSyncSessionPrediction matchesXPCActivity:]
  -[CPLSyncSessionPrediction updateXPCActivityCriteria:]
  -[CPLSyncSessionPrediction updateXPCActivity:]
  -[CPLSyncSessionPrediction updatedPredictionWithValuesAndTypes:]
  -[CPLSyncSessionPrediction _oldPredictionWithKey:inCriteria:matchesPredictionWithKey:]


CPLSyncSessionPredictor : NSObject
 @property  CPLSyncSessionPrediction *currentPrediction

  // instance methods
  -[CPLSyncSessionPredictor .cxx_destruct]
  -[CPLSyncSessionPredictor init]
  -[CPLSyncSessionPredictor updatePredictionWithValuesAndTypes:]
  -[CPLSyncSessionPredictor addObserver:]
  -[CPLSyncSessionPredictor currentPrediction]
  -[CPLSyncSessionPredictor removeObserver:]


CPLRampingResponseResource : PBCodable <NSCopying>
 @property  BOOL hasResource
 @property  NSString *resource
 @property  BOOL hasAllowed
 @property  BOOL allowed
 @property  BOOL hasRetryAfterMillis
 @property  long long retryAfterMillis

  // instance methods
  -[CPLRampingResponseResource mergeFrom:]
  -[CPLRampingResponseResource setResource:]
  -[CPLRampingResponseResource .cxx_destruct]
  -[CPLRampingResponseResource dictionaryRepresentation]
  -[CPLRampingResponseResource resource]
  -[CPLRampingResponseResource writeTo:]
  -[CPLRampingResponseResource allowed]
  -[CPLRampingResponseResource isEqual:]
  -[CPLRampingResponseResource copyTo:]
  -[CPLRampingResponseResource readFrom:]
  -[CPLRampingResponseResource setAllowed:]
  -[CPLRampingResponseResource copyWithZone:]
  -[CPLRampingResponseResource hasResource]
  -[CPLRampingResponseResource setHasAllowed:]
  -[CPLRampingResponseResource hasAllowed]
  -[CPLRampingResponseResource setRetryAfterMillis:]
  -[CPLRampingResponseResource setHasRetryAfterMillis:]
  -[CPLRampingResponseResource hasRetryAfterMillis]
  -[CPLRampingResponseResource retryAfterMillis]


CPLTransportUpdateTask : CPLEngineMultiscopeSyncTask
  // instance methods
  -[CPLTransportUpdateTask enumerateScopesForTaskInTransaction:]
  -[CPLTransportUpdateTask newScopedTaskWithScope:session:transportScope:clientCacheIdentifier:]
  -[CPLTransportUpdateTask shouldSkipScopesWithMissingTransportScope]
  -[CPLTransportUpdateTask taskIdentifier]


CPLTransportUpdateScopeTask : CPLEngineScopedTask
  // instance methods
  -[CPLTransportUpdateScopeTask checkScopeIsValidInTransaction:]
  -[CPLTransportUpdateScopeTask .cxx_destruct]
  -[CPLTransportUpdateScopeTask launch]
  -[CPLTransportUpdateScopeTask cancel]
  -[CPLTransportUpdateScopeTask taskIdentifier]


CPLEngineStore : NSObject <CPLAbstractObject, CPLEngineComponent>
 @property  BOOL hasPendingResetSync
 @property  unsigned long state
 @property  NSArray *storages
 @property  CPLEngineLibrary *engineLibrary
 @property  BOOL shouldSyncScopeList
 @property  CPLEnginePushRepository *pushRepository
 @property  BOOL pushRepositoryIsFull
 @property  CPLEngineScopeStorage *scopes
 @property  CPLEngineScopeCleanupTasks *cleanupTasks
 @property  CPLEngineChangePipe *pullQueue
 @property  CPLEngineIDMapping *idMapping
 @property  CPLEngineCloudCache *cloudCache
 @property  CPLRecordStorageView *transactionClientCacheView
 @property  CPLEngineTransientRepository *transientPullRepository
 @property  CPLEngineResourceStorage *resourceStorage
 @property  CPLEngineResourceDownloadQueue *downloadQueue
 @property  CPLEngineOutgoingResources *outgoingResources
 @property  CPLEngineRemappedDeletes *remappedDeletes
 @property  CPLEngineQuarantinedRecords *quarantinedRecords
 @property  CPLEngineStatusCenter *statusCenter
 @property  CPLEngineInitialQueryTracker *initialQueryTracker
 @property  NSDate *libraryCreationDate
 @property  id corruptionInfo
 @property  CPLEngineDerivativesCache *derivativesCache
 @property  BOOL shouldGenerateDerivatives
 @property  NSArray *disabledFeatures
 @property  BOOL shouldUpdateDisabledFeatures
 @property  CPLSyncSessionPredictor *predictor
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineStore storageNames]
  +[CPLEngineStore platformImplementationProtocol]
  +[CPLEngineStore stateDescriptionForState:]

  // instance methods
  -[CPLEngineStore openWithCompletionHandler:]
  -[CPLEngineStore componentName]
  -[CPLEngineStore closeAndDeactivate:completionHandler:]
  -[CPLEngineStore predictor]
  -[CPLEngineStore lastQuarantineCountReportDate]
  -[CPLEngineStore scopes]
  -[CPLEngineStore _dropTransactionClientCacheView]
  -[CPLEngineStore testKey:value:completionHandler:]
  -[CPLEngineStore isClientInSyncWithClientCache]
  -[CPLEngineStore performBatchedWriteTransactionBarrierWithCompletionBlock:]
  -[CPLEngineStore clientCacheIdentifier]
  -[CPLEngineStore _performWriteTransactionByPassBlocker:WithBlock:completionHandler:]
  -[CPLEngineStore noteInvalidRecordScopedIdentifiersInPushSession:]
  -[CPLEngineStore _shouldSyncScopeListWithOptions:]
  -[CPLEngineStore deleteDynamicallyCreatedStorages:error:]
  -[CPLEngineStore startVacuum]
  -[CPLEngineStore resetCompleteSyncStateWithCause:error:]
  -[CPLEngineStore assertCanWrite]
  -[CPLEngineStore initialQueryTracker]
  -[CPLEngineStore userIdentifier]
  -[CPLEngineStore resourceStorage]
  -[CPLEngineStore stopVacuum]
  -[CPLEngineStore hasUnacknowledgedChanges]
  -[CPLEngineStore _removeTransactionOnCurrentThread:]
  -[CPLEngineStore localResourceForCloudResource:recordClass:]
  -[CPLEngineStore performReadTransactionWithBlock:]
  -[CPLEngineStore predictSyncSessionValue:ofType:]
  -[CPLEngineStore outgoingResources]
  -[CPLEngineStore noteOtherResetEvent:cause:]
  -[CPLEngineStore shouldGenerateDerivatives]
  -[CPLEngineStore hasPendingResetSync]
  -[CPLEngineStore .cxx_destruct]
  -[CPLEngineStore _loadResetEvents]
  -[CPLEngineStore _resetCompleteSyncStateIncludingIDMappingWithCause:scope:error:]
  -[CPLEngineStore pushRepository]
  -[CPLEngineStore _performBarrierTransaction:withBlock:]
  -[CPLEngineStore keepUnacknowledgedBatch:]
  -[CPLEngineStore _reallyUnschedulePendingUpdateApply]
  -[CPLEngineStore storeLibraryVersion:withError:]
  -[CPLEngineStore platformObject]
  -[CPLEngineStore unacknowledgedChangeWithLocalScopedIdentifier:]
  -[CPLEngineStore corruptionInfo]
  -[CPLEngineStore performBarrier]
  -[CPLEngineStore assertNoUnacknowledgedChanges]
  -[CPLEngineStore storeDerivativesFilter:error:]
  -[CPLEngineStore updateLibraryOptions:error:]
  -[CPLEngineStore _reallyPerformBatchedTransactionsLocked]
  -[CPLEngineStore storages]
  -[CPLEngineStore wipeStoreAtNextOpeningWithReason:completionBlock:]
  -[CPLEngineStore disabledFeatures]
  -[CPLEngineStore derivativesCache]
  -[CPLEngineStore performWriteTransactionWithBlock:completionHandler:]
  -[CPLEngineStore _resetSyncAnchorWithCause:scope:error:]
  -[CPLEngineStore createStoragesDynamically:error:]
  -[CPLEngineStore setState:]
  -[CPLEngineStore newClientCacheViewUsesPushRepository:]
  -[CPLEngineStore forceApplyPendingChangeSessionUpdateWithError:]
  -[CPLEngineStore markAsCorrupted]
  -[CPLEngineStore isFeatureDisabled:]
  -[CPLEngineStore _canRead]
  -[CPLEngineStore cloudCache]
  -[CPLEngineStore _reallySchedulePendingUpdateApply]
  -[CPLEngineStore _storeResetEvent:scopeIdentifier:date:pending:cause:]
  -[CPLEngineStore _resetGlobalStateWithError:]
  -[CPLEngineStore _applyPendingUpdate:error:]
  -[CPLEngineStore hasPendingChangeSessionUpdate]
  -[CPLEngineStore _storeResetEvent:scopeIdentifier:date:cause:]
  -[CPLEngineStore _performTransaction:withBlock:]
  -[CPLEngineStore _setTransactionOnCurrentThread:]
  -[CPLEngineStore emergencyClose]
  -[CPLEngineStore dropUnacknowledgedBatch]
  -[CPLEngineStore _canWrite]
  -[CPLEngineStore _unschedulePendingUpdateApply]
  -[CPLEngineStore createNewLibraryVersion]
  -[CPLEngineStore storeLastQuarantineCountReportDate:error:]
  -[CPLEngineStore performBatchedWriteTransactionWithBlock:completionHandler:]
  -[CPLEngineStore storeClientIsInSyncWithClientCacheWithError:]
  -[CPLEngineStore pullQueue]
  -[CPLEngineStore _finishTransaction]
  -[CPLEngineStore _handleException:]
  -[CPLEngineStore shouldUpdateDisabledFeatures]
  -[CPLEngineStore _scheduleBatchedTransactionsLocked]
  -[CPLEngineStore resetCompleteSyncStateIncludingIDMappingWithCause:error:]
  -[CPLEngineStore storeUserIdentifier:error:]
  -[CPLEngineStore downloadQueue]
  -[CPLEngineStore updateDisabledFeatures:didReset:error:]
  -[CPLEngineStore _resetLocalSyncStateWithCause:scope:date:error:]
  -[CPLEngineStore state]
  -[CPLEngineStore _applyAndDiscardPendingUpdate:error:]
  -[CPLEngineStore _schedulePendingUpdateApply]
  -[CPLEngineStore _addCleanupBlock:]
  -[CPLEngineStore _resetCompleteSyncStateWithCause:scope:error:]
  -[CPLEngineStore _updateShouldSyncScopeList:]
  -[CPLEngineStore performBatchedWriteTransactionBarrier]
  -[CPLEngineStore derivativesFilter]
  -[CPLEngineStore libraryOptions]
  -[CPLEngineStore statusCenter]
  -[CPLEngineStore libraryCreationDate]
  -[CPLEngineStore resetLocalSyncStateWithCause:date:error:]
  -[CPLEngineStore transactionClientCacheView]
  -[CPLEngineStore noteResetSyncFinished]
  -[CPLEngineStore notePushRepositoryStoredSomeChanges]
  -[CPLEngineStore remappedDeletes]
  -[CPLEngineStore engineLibrary]
  -[CPLEngineStore storeChangeSessionUpdate:error:]
  -[CPLEngineStore _storeChangeSessionUpdate:error:]
  -[CPLEngineStore dealloc]
  -[CPLEngineStore resetLocalSyncStateWithCause:error:]
  -[CPLEngineStore _resetEventsJSON]
  -[CPLEngineStore writeTransactionDidFail]
  -[CPLEngineStore getStatusWithCompletionHandler:]
  -[CPLEngineStore _currentTransaction]
  -[CPLEngineStore beginChangeSession:withLibraryVersion:resetTracker:error:]
  -[CPLEngineStore transactionDidFinish]
  -[CPLEngineStore registerStorage:]
  -[CPLEngineStore shouldSyncScopeList]
  -[CPLEngineStore cleanupTasks]
  -[CPLEngineStore pushRepositoryIsFull]
  -[CPLEngineStore _commitWriteTransaction:commitError:]
  -[CPLEngineStore applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:error:]
  -[CPLEngineStore _storedDisabledFeatures]
  -[CPLEngineStore resetSyncAnchorWithCause:error:]
  -[CPLEngineStore _resetEventsDescriptions]
  -[CPLEngineStore initWithEngineLibrary:]
  -[CPLEngineStore blockWriteTransactionsWithCompletionHandler:]
  -[CPLEngineStore idMapping]
  -[CPLEngineStore writeTransactionDidSucceed]
  -[CPLEngineStore getStatusDictionaryWithCompletionHandler:]
  -[CPLEngineStore libraryVersion]
  -[CPLEngineStore checkExpectedLibraryVersion:error:]
  -[CPLEngineStore setShouldUpdateDisabledFeaturesWithError:]
  -[CPLEngineStore quarantinedRecords]
  -[CPLEngineStore transientPullRepository]
  -[CPLEngineStore performWriteTransactionByPassBlocker:withBlock:completionHandler:]
  -[CPLEngineStore assertCanRead]


CPLEngineStoreTransaction : NSObject
 @property  CPLEngineWriteTransactionBlocker *blocker
 @property  NSError *error
 @property  NSString *name

  // instance methods
  -[CPLEngineStoreTransaction name]
  -[CPLEngineStoreTransaction redactedDescription]
  -[CPLEngineStoreTransaction canWrite]
  -[CPLEngineStoreTransaction _transactionDidFinish]
  -[CPLEngineStoreTransaction .cxx_destruct]
  -[CPLEngineStoreTransaction addCleanupBlock:]
  -[CPLEngineStoreTransaction setName:]
  -[CPLEngineStoreTransaction blocker]
  -[CPLEngineStoreTransaction _transactionWillBeginOnThread:]
  -[CPLEngineStoreTransaction setBlocker:]
  -[CPLEngineStoreTransaction _forWrite]
  -[CPLEngineStoreTransaction do:]
  -[CPLEngineStoreTransaction dealloc]
  -[CPLEngineStoreTransaction initForWrite:identifier:description:]
  -[CPLEngineStoreTransaction _releaseDirty]
  -[CPLEngineStoreTransaction setError:]
  -[CPLEngineStoreTransaction error]
  -[CPLEngineStoreTransaction canRead]


_CPLEngineStoreBatchedTransaction : NSObject
 @property  @? block
 @property  @? completionHandler

  // instance methods
  -[_CPLEngineStoreBatchedTransaction setBlock:]
  -[_CPLEngineStoreBatchedTransaction .cxx_destruct]
  -[_CPLEngineStoreBatchedTransaction init]
  -[_CPLEngineStoreBatchedTransaction setCompletionHandler:]
  -[_CPLEngineStoreBatchedTransaction dealloc]
  -[_CPLEngineStoreBatchedTransaction completionHandler]
  -[_CPLEngineStoreBatchedTransaction _releaseDirty]
  -[_CPLEngineStoreBatchedTransaction block]


CPLEngineWriteTransactionBlocker : NSObject
  // instance methods
  -[CPLEngineWriteTransactionBlocker .cxx_destruct]
  -[CPLEngineWriteTransactionBlocker initWithUnblockBlock:]
  -[CPLEngineWriteTransactionBlocker dealloc]
  -[CPLEngineWriteTransactionBlocker unblock]


CPLEnginePushRepository : CPLEngineStorage <CPLAbstractObject, CPLBatchExtractionStrategyStorage>
 @property  BOOL shouldManageOutgoingResources
 @property  BOOL shouldManageExtractedBatch
 @property  CPLBatchExtractionStrategy *extractionStrategy
 @property  unsigned long maximumResourceSizePerBatch
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEnginePushRepository scopeType]
  -[CPLEnginePushRepository effectiveResourceSizeToUploadForUploadIdentifier:]
  -[CPLEnginePushRepository hasChangesWithScopeFilter:]
  -[CPLEnginePushRepository deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEnginePushRepository shouldManageOutgoingResources]
  -[CPLEnginePushRepository getRelatedScopedIdentifier:forRecordWithScopedIdentifier:]
  -[CPLEnginePushRepository storedExtractedBatch]
  -[CPLEnginePushRepository storeExtractedBatch:error:]
  -[CPLEnginePushRepository .cxx_destruct]
  -[CPLEnginePushRepository removeChange:error:]
  -[CPLEnginePushRepository extractionStrategy]
  -[CPLEnginePushRepository hasChangesWithRelatedScopedIdentifier:class:]
  -[CPLEnginePushRepository allChangesWithClass:relatedScopedIdentifier:]
  -[CPLEnginePushRepository storeChange:uploadIdentifier:error:]
  -[CPLEnginePushRepository setExtractionStrategy:]
  -[CPLEnginePushRepository _outgoingResources]
  -[CPLEnginePushRepository allChangesWithScopeIdentifier:]
  -[CPLEnginePushRepository changeWithScopedIdentifier:]
  -[CPLEnginePushRepository hasSomeChangeWithScopedIdentifier:]
  -[CPLEnginePushRepository reinjectExtractedBatch:overwrittenRecordIdentifiers:error:]
  -[CPLEnginePushRepository deleteAllChangesWithError:]
  -[CPLEnginePushRepository status]
  -[CPLEnginePushRepository allChangesWithClass:scopeIdentifier:trashed:]
  -[CPLEnginePushRepository discardChangeWithScopedIdentifier:error:]
  -[CPLEnginePushRepository initWithEngineStore:name:]
  -[CPLEnginePushRepository notePushRepositoryStoredSomeChanges]
  -[CPLEnginePushRepository shouldManageExtractedBatch]
  -[CPLEnginePushRepository reinjectChange:dequeueOrder:overwrittenRecord:error:]
  -[CPLEnginePushRepository updateTimingStatisticForKey:duration:recordCount:error:cancelled:]
  -[CPLEnginePushRepository _timingStatisticStatuses]
  -[CPLEnginePushRepository allChangesWithClass:scopeIdentifier:changeType:]
  -[CPLEnginePushRepository allNonDeletedChangesWithClass:scopeIdentifier:]
  -[CPLEnginePushRepository countOfChangesInScopeWithIdentifier:]
  -[CPLEnginePushRepository allChangesWithClass:secondaryScopedIdentifier:]
  -[CPLEnginePushRepository maximumResourceSizePerBatch]
  -[CPLEnginePushRepository updateApproximativeUploadRate:]
  -[CPLEnginePushRepository hasChangesInScopeWithIdentifier:]


_CPLTimingStatistic : NSObject
  // instance methods
  -[_CPLTimingStatistic updateWithDuration:recordCount:error:cancelled:]


CPLPowerAssertion : NSObject
  // class methods
  +[CPLPowerAssertion hasEnoughPower]
  +[CPLPowerAssertion setHasEnoughPower:]
  +[CPLPowerAssertion _releaseAssertion]
  +[CPLPowerAssertion _doProtected:]
  +[CPLPowerAssertion _retainAssertion]
  +[CPLPowerAssertion enableSleep]
  +[CPLPowerAssertion disableSleep]
  +[CPLPowerAssertion powerAssertionStatus]


CPLSyncSession : NSObject <CPLSyncSessionPredictorObserver>
 @property  CPLEngineScheduler *scheduler
 @property  NSDate *expectedDate
 @property  unsigned long sequenceNumber
 @property  BOOL detached
 @property  BOOL shouldDefer
 @property  unsigned long requiredStateAtEndOfSyncSession
 @property  BOOL shouldRescheduleASyncSession
 @property  BOOL mightNeedForegroundToStart
 @property  NSString *whenItWillStartDescription
 @property  <CPLSyncSessionRescheduler> *rescheduler
 @property  NSObject<OS_xpc_object> *detachedActivity
 @property  CPLSyncSessionPredictor *predictor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLSyncSession detachedSyncSessionWithScheduler:]

  // instance methods
  -[CPLSyncSession predictor]
  -[CPLSyncSession shouldDefer]
  -[CPLSyncSession redactedDescription]
  -[CPLSyncSession .cxx_destruct]
  -[CPLSyncSession scheduler]
  -[CPLSyncSession isDetached]
  -[CPLSyncSession expectedDate]
  -[CPLSyncSession isBeforeDate:]
  -[CPLSyncSession sequenceNumber]
  -[CPLSyncSession isAfterDate:]
  -[CPLSyncSession predictor:changedPrediction:]
  -[CPLSyncSession initWithSequenceNumber:expectedDate:scheduler:]
  -[CPLSyncSession isInLessThanTimeInterval:]
  -[CPLSyncSession deferWithBlock:]
  -[CPLSyncSession sessionIsDone]
  -[CPLSyncSession _unwatchPredictor]
  -[CPLSyncSession sessionWontHappen]
  -[CPLSyncSession engineIsClosing]
  -[CPLSyncSession mightNeedForegroundToStart]
  -[CPLSyncSession _watchPredictor]
  -[CPLSyncSession _updatePrediction:]
  -[CPLSyncSession _watchOrUnwatchPredictorIfNecessary]
  -[CPLSyncSession requestSyncStateAtEndOfSyncSession:reschedule:]
  -[CPLSyncSession isInMoreThanTimeInverval:]
  -[CPLSyncSession dropExpectedDate]
  -[CPLSyncSession whenItWillStartDescription]
  -[CPLSyncSession rescheduler]
  -[CPLSyncSession setRescheduler:]
  -[CPLSyncSession detachedActivity]
  -[CPLSyncSession setDetachedActivity:]
  -[CPLSyncSession requiredStateAtEndOfSyncSession]
  -[CPLSyncSession shouldRescheduleASyncSession]


CPLRampingRequest : PBRequest <NSCopying>
 @property  NSMutableArray *requests

  // class methods
  +[CPLRampingRequest requestType]

  // instance methods
  -[CPLRampingRequest addRequest:]
  -[CPLRampingRequest setRequests:]
  -[CPLRampingRequest requests]
  -[CPLRampingRequest mergeFrom:]
  -[CPLRampingRequest .cxx_destruct]
  -[CPLRampingRequest dictionaryRepresentation]
  -[CPLRampingRequest writeTo:]
  -[CPLRampingRequest requestsCount]
  -[CPLRampingRequest requestAtIndex:]
  -[CPLRampingRequest isEqual:]
  -[CPLRampingRequest copyTo:]
  -[CPLRampingRequest clearRequests]
  -[CPLRampingRequest readFrom:]
  -[CPLRampingRequest copyWithZone:]


CPLNetworkWatcher : NSObject <RadiosPreferencesDelegate>
 @property  NSString *endPoint
 @property  CPLNetworkState *networkState
 @property  <CPLNetworkWatcherDelegate> *delegate

  // instance methods
  -[CPLNetworkWatcher networkState]
  -[CPLNetworkWatcher endPoint]
  -[CPLNetworkWatcher .cxx_destruct]
  -[CPLNetworkWatcher _getCellularPolicyWithClient:]
  -[CPLNetworkWatcher stop]
  -[CPLNetworkWatcher setDelegate:]
  -[CPLNetworkWatcher _isRestrictedPath:policies:]
  -[CPLNetworkWatcher initWithQueue:]
  -[CPLNetworkWatcher _updateCellularPolicyFromPolicies:]
  -[CPLNetworkWatcher delegate]
  -[CPLNetworkWatcher _updateAirplaneMode]
  -[CPLNetworkWatcher start]
  -[CPLNetworkWatcher airplaneModeChanged]
  -[CPLNetworkWatcher _updateNetworkState:]
  -[CPLNetworkWatcher dealloc]
  -[CPLNetworkWatcher _updateCellularPolicy:]


CPLNetworkState : NSObject
 @property  NSObject<OS_nw_path> *networkPath
 @property  BOOL connected
 @property  BOOL constrained
 @property  BOOL cellular
 @property  BOOL cellularRestricted
 @property  BOOL inAirplaneMode
 @property  BOOL canUseNetwork
 @property  NSDictionary *plistDescription

  // instance methods
  -[CPLNetworkState isConstrained]
  -[CPLNetworkState redactedDescription]
  -[CPLNetworkState isFunctionallyEqual:]
  -[CPLNetworkState isCellular]
  -[CPLNetworkState isConnected]
  -[CPLNetworkState isInAirplaneMode]
  -[CPLNetworkState .cxx_destruct]
  -[CPLNetworkState plistDescription]
  -[CPLNetworkState isEqual:]
  -[CPLNetworkState initWithNetworkPath:cellularRestricted:inAirplaneMode:]
  -[CPLNetworkState isCellularRestricted]
  -[CPLNetworkState networkPath]
  -[CPLNetworkState canUseNetwork]


CPLEngineFileStorage : NSObject <CPLAbstractObject>
 @property  BOOL keepOriginals
 @property  BOOL deleteImmediately
 @property  BOOL trackAllStoresAndDeletes
 @property  BOOL trackAllStoresAndDeletesUntilEndOfTransaction
 @property  NSURL *baseURL
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineFileStorage platformImplementationProtocol]

  // instance methods
  -[CPLEngineFileStorage closeWithError:]
  -[CPLEngineFileStorage deleteFileWithIdentity:includingOriginal:error:]
  -[CPLEngineFileStorage openWithRecoveryHandler:error:]
  -[CPLEngineFileStorage countOfUncommittedFiles]
  -[CPLEngineFileStorage storeUnretainedData:identity:isOriginal:error:]
  -[CPLEngineFileStorage .cxx_destruct]
  -[CPLEngineFileStorage addDeleteFlagToFileAtURL:error:]
  -[CPLEngineFileStorage resetWithError:]
  -[CPLEngineFileStorage setTrackAllStoresAndDeletes:]
  -[CPLEngineFileStorage trackAllStoresAndDeletesUntilEndOfTransaction]
  -[CPLEngineFileStorage deleteFileWithIdentity:error:]
  -[CPLEngineFileStorage platformObject]
  -[CPLEngineFileStorage compactStorage:]
  -[CPLEngineFileStorage releaseFileURL:error:]
  -[CPLEngineFileStorage discardAllRetainedFileURLsWithError:]
  -[CPLEngineFileStorage compactStorageIncludeOriginals:error:]
  -[CPLEngineFileStorage setDeleteImmediately:]
  -[CPLEngineFileStorage deleteImmediately]
  -[CPLEngineFileStorage trackAllStoresAndDeletes]
  -[CPLEngineFileStorage baseURL]
  -[CPLEngineFileStorage _compactStorageIncludeOriginals:desiredFreeSpace:error:]
  -[CPLEngineFileStorage fileEnumerator]
  -[CPLEngineFileStorage hasFileWithIdentity:]
  -[CPLEngineFileStorage _addIdentityToUncommittedFiles:]
  -[CPLEngineFileStorage commitFileWithIdentity:error:]
  -[CPLEngineFileStorage discardUncommittedFileWithIdentity:error:]
  -[CPLEngineFileStorage tryToFreeDiskSpace:actuallyFreedSpace:includeOriginals:error:]
  -[CPLEngineFileStorage setTrackAllStoresAndDeletesUntilEndOfTransaction:]
  -[CPLEngineFileStorage checkFileSizeForIdentity:]
  -[CPLEngineFileStorage hasCrashMarker]
  -[CPLEngineFileStorage _removeIdentityFromUncommittedFiles:]
  -[CPLEngineFileStorage storeUnretainedFileAtURL:identity:isOriginal:error:]
  -[CPLEngineFileStorage doRead:]
  -[CPLEngineFileStorage retainFileURLForIdentity:resourceType:error:]
  -[CPLEngineFileStorage fileEnumeratorIncludingPropertiesForKeys:errorHandler:]
  -[CPLEngineFileStorage writeTransactionDidFail]
  -[CPLEngineFileStorage checkIsEmpty]
  -[CPLEngineFileStorage keepOriginals]
  -[CPLEngineFileStorage _markerURLForTrackAllStoresAndDeletes]
  -[CPLEngineFileStorage setKeepOriginals:]
  -[CPLEngineFileStorage storeFileAtURL:identity:isOriginal:moveIfPossible:needsCommit:error:]
  -[CPLEngineFileStorage tryToFreeDiskSpace:actuallyFreedSpace:error:]
  -[CPLEngineFileStorage storeData:identity:isOriginal:needsCommit:error:]
  -[CPLEngineFileStorage initWithBaseURL:]
  -[CPLEngineFileStorage writeTransactionDidSucceed]
  -[CPLEngineFileStorage _fixupIdentity:fileURL:data:error:]
  -[CPLEngineFileStorage _recoverFromCrashWithRecoveryHandler:error:]
  -[CPLEngineFileStorage doWrite:error:]


CPLFileStorageItem : NSObject <NSCopying>
 @property  CPLResourceIdentity *identity
 @property  BOOL original
 @property  BOOL markedForDelete
 @property  NSDate *lastAccessDate

  // instance methods
  -[CPLFileStorageItem getResourceValue:forKey:error:]
  -[CPLFileStorageItem .cxx_destruct]
  -[CPLFileStorageItem lastAccessDate]
  -[CPLFileStorageItem isEqual:]
  -[CPLFileStorageItem identity]
  -[CPLFileStorageItem copyWithZone:]
  -[CPLFileStorageItem isOriginal]
  -[CPLFileStorageItem isMarkedForDelete]
  -[CPLFileStorageItem initWithIdentity:original:markedForDelete:lastAccessDate:]


CPLSuggestionChange : CPLRecordChange
 @property  NSString *title
 @property  NSString *subtitle
 @property  unsigned short type
 @property  unsigned short subtype
 @property  CPLSuggestionRecordList *recordList
 @property  NSDate *creationDate
 @property  unsigned short notificationState
 @property  unsigned short state
 @property  long long version
 @property  NSDate *activationDate
 @property  NSDate *relevantUntilDate
 @property  NSDate *expungeDate
 @property  NSData *actionData
 @property  NSData *featuresData

  // class methods
  +[CPLSuggestionChange supportsSecureCoding]
  +[CPLSuggestionChange cplShouldIgnorePropertyForCoding:]
  +[CPLSuggestionChange _createTestSuggestionWithKeyAssets:representativeAssets:]

  // instance methods
  -[CPLSuggestionChange initWithCoder:]
  -[CPLSuggestionChange setSubtype:]
  -[CPLSuggestionChange setCreationDate:]
  -[CPLSuggestionChange setTitle:]
  -[CPLSuggestionChange setType:]
  -[CPLSuggestionChange setRecordList:]
  -[CPLSuggestionChange recordList]
  -[CPLSuggestionChange .cxx_destruct]
  -[CPLSuggestionChange expungeDate]
  -[CPLSuggestionChange setSubtitle:]
  -[CPLSuggestionChange setState:]
  -[CPLSuggestionChange setVersion:]
  -[CPLSuggestionChange setNotificationState:]
  -[CPLSuggestionChange subtitle]
  -[CPLSuggestionChange setRelevantUntilDate:]
  -[CPLSuggestionChange setFeaturesData:]
  -[CPLSuggestionChange setActivationDate:]
  -[CPLSuggestionChange setExpungeDate:]
  -[CPLSuggestionChange relevantUntilDate]
  -[CPLSuggestionChange state]
  -[CPLSuggestionChange supportsDeletion]
  -[CPLSuggestionChange title]
  -[CPLSuggestionChange creationDate]
  -[CPLSuggestionChange type]
  -[CPLSuggestionChange version]
  -[CPLSuggestionChange actionData]
  -[CPLSuggestionChange subtype]
  -[CPLSuggestionChange copyWithZone:]
  -[CPLSuggestionChange setActionData:]
  -[CPLSuggestionChange activationDate]
  -[CPLSuggestionChange notificationState]
  -[CPLSuggestionChange encodeWithCoder:]
  -[CPLSuggestionChange featuresData]
  -[CPLSuggestionChange checkDefaultValueBlockForPropertyWithSelector:]
  -[CPLSuggestionChange supportsDirectDeletion]
  -[CPLSuggestionChange propertiesDescription]
  -[CPLSuggestionChange scopedIdentifiersForMapping]
  -[CPLSuggestionChange translateToCloudChangeUsingIDMapping:error:]
  -[CPLSuggestionChange translateToClientChangeUsingIDMapping:error:]


CPLMasterChange : CPLItemChange
 @property  NSArray *resources
 @property  NSArray *expungeableResourceStates
 @property  NSDate *creationDate
 @property  NSString *itemType
 @property  BOOL isImage
 @property  BOOL isVideo
 @property  NSDate *importDate
 @property  NSString *filename
 @property  NSString *importGroupIdentifier
 @property  NSString *mediaMetaDataType
 @property  NSData *mediaMetaData
 @property  long long originalOrientation
 @property  unsigned long fullSizeJPEGSource
 @property  NSString *originatingFingerprint
 @property  short importedBy
 @property  NSString *importedByBundleIdentifier
 @property  NSString *importedByDisplayName
 @property  short videoFrameRate
 @property  NSString *codec

  // instance methods
  -[CPLMasterChange codec]
  -[CPLMasterChange resources]
  -[CPLMasterChange setCodec:]
  -[CPLMasterChange name]
  -[CPLMasterChange isVideo]
  -[CPLMasterChange setCreationDate:]
  -[CPLMasterChange mediaMetaData]
  -[CPLMasterChange setResources:]
  -[CPLMasterChange fullSizeJPEGSource]
  -[CPLMasterChange mediaMetaDataType]
  -[CPLMasterChange importGroupIdentifier]
  -[CPLMasterChange originatingFingerprint]
  -[CPLMasterChange setMediaMetaData:]
  -[CPLMasterChange setMediaMetaDataType:]
  -[CPLMasterChange setOriginatingFingerprint:]
  -[CPLMasterChange setImportGroupIdentifier:]
  -[CPLMasterChange .cxx_destruct]
  -[CPLMasterChange supportsResources]
  -[CPLMasterChange filename]
  -[CPLMasterChange setName:]
  -[CPLMasterChange expungeableResourceStates]
  -[CPLMasterChange setExpungeableResourceStates:]
  -[CPLMasterChange setItemType:]
  -[CPLMasterChange setVideoFrameRate:]
  -[CPLMasterChange setImportedByDisplayName:]
  -[CPLMasterChange init]
  -[CPLMasterChange itemType]
  -[CPLMasterChange setImportDate:]
  -[CPLMasterChange importDate]
  -[CPLMasterChange importedByBundleIdentifier]
  -[CPLMasterChange videoFrameRate]
  -[CPLMasterChange setFilename:]
  -[CPLMasterChange supportsDeletion]
  -[CPLMasterChange creationDate]
  -[CPLMasterChange setFullSizeJPEGSource:]
  -[CPLMasterChange setImportedByBundleIdentifier:]
  -[CPLMasterChange importedByDisplayName]
  -[CPLMasterChange importedBy]
  -[CPLMasterChange setImportedBy:]
  -[CPLMasterChange setOriginalOrientation:]
  -[CPLMasterChange isImage]
  -[CPLMasterChange originalOrientation]
  -[CPLMasterChange checkDefaultValueBlockForPropertyWithSelector:]
  -[CPLMasterChange propertiesDescription]
  -[CPLMasterChange dequeueOrder]
  -[CPLMasterChange propertiesForChangeType:]
  -[CPLMasterChange resourceForType:]
  -[CPLMasterChange isMasterChange]
  -[CPLMasterChange _copyDerivatives:count:ifMatchingResourceType:fromRecord:inResourcePerType:]
  -[CPLMasterChange isResourceTypeAGeneratedDerivative:]
  -[CPLMasterChange copyDerivativesFromRecordIfPossible:]
  -[CPLMasterChange supportsResourceType:]
  -[CPLMasterChange dataClassType]
  -[CPLMasterChange allowsToOnlyUploadNewResources]
  -[CPLMasterChange validateRecordForTracker:]


CPLQuarantineFeedbackMessage : CPLFeedbackMessage
 @property  NSString *reason
 @property  Class recordClass

  // class methods
  +[CPLQuarantineFeedbackMessage feedbackType]

  // instance methods
  -[CPLQuarantineFeedbackMessage .cxx_destruct]
  -[CPLQuarantineFeedbackMessage reason]
  -[CPLQuarantineFeedbackMessage recordClass]
  -[CPLQuarantineFeedbackMessage serverMessage]
  -[CPLQuarantineFeedbackMessage initWithClass:reason:libraryIdentifier:]


CPLPullScopesTask : CPLEngineSyncTask
  // instance methods
  -[CPLPullScopesTask _handleFinalScopeListSyncAnchor:error:]
  -[CPLPullScopesTask .cxx_destruct]
  -[CPLPullScopesTask _checkShouldHandleBatchInTransaction:]
  -[CPLPullScopesTask launch]
  -[CPLPullScopesTask cancel]
  -[CPLPullScopesTask initWithEngineLibrary:session:]
  -[CPLPullScopesTask _handleChangedOrNewScopes:deletedScopeIdentifiers:newScopeListSyncAnchor:]
  -[CPLPullScopesTask taskIdentifier]


CPLPersonReference : NSObject <NSSecureCoding, NSCopying, CPLReference>
 @property  NSString *personIdentifier
 @property  NSDictionary *extraProperties
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLPersonReference supportsSecureCoding]

  // instance methods
  -[CPLPersonReference initWithCoder:]
  -[CPLPersonReference setPersonIdentifier:]
  -[CPLPersonReference personIdentifier]
  -[CPLPersonReference .cxx_destruct]
  -[CPLPersonReference initWithCPLArchiver:]
  -[CPLPersonReference plistArchiveWithCPLArchiver:]
  -[CPLPersonReference init]
  -[CPLPersonReference extraProperties]
  -[CPLPersonReference isEqual:]
  -[CPLPersonReference serializedString]
  -[CPLPersonReference copyWithZone:]
  -[CPLPersonReference encodeWithCoder:]
  -[CPLPersonReference setExtraProperties:]
  -[CPLPersonReference initWithSerializedString:]


CPLFaceAnalysis : PBCodable <NSCopying>
 @property  BOOL hasCompleted
 @property  BOOL completed
 @property  NSMutableArray *faceInstances

  // class methods
  +[CPLFaceAnalysis faceInstancesType]

  // instance methods
  -[CPLFaceAnalysis mergeFrom:]
  -[CPLFaceAnalysis setCompleted:]
  -[CPLFaceAnalysis .cxx_destruct]
  -[CPLFaceAnalysis dictionaryRepresentation]
  -[CPLFaceAnalysis writeTo:]
  -[CPLFaceAnalysis isEqual:]
  -[CPLFaceAnalysis copyTo:]
  -[CPLFaceAnalysis readFrom:]
  -[CPLFaceAnalysis hasCompleted]
  -[CPLFaceAnalysis setHasCompleted:]
  -[CPLFaceAnalysis completed]
  -[CPLFaceAnalysis copyWithZone:]
  -[CPLFaceAnalysis addFaceInstances:]
  -[CPLFaceAnalysis faceInstancesCount]
  -[CPLFaceAnalysis clearFaceInstances]
  -[CPLFaceAnalysis faceInstancesAtIndex:]
  -[CPLFaceAnalysis faceInstances]
  -[CPLFaceAnalysis setFaceInstances:]


CPLChangeSessionUpdate : NSObject <NSSecureCoding>
 @property  NSString *libraryVersion
 @property  NSDate *queuedDate
 @property  NSString *statusDescription

  // class methods
  +[CPLChangeSessionUpdate supportsSecureCoding]

  // instance methods
  -[CPLChangeSessionUpdate initWithStore:]
  -[CPLChangeSessionUpdate initWithCoder:]
  -[CPLChangeSessionUpdate .cxx_destruct]
  -[CPLChangeSessionUpdate statusDescription]
  -[CPLChangeSessionUpdate encodeWithCoder:]
  -[CPLChangeSessionUpdate libraryVersion]
  -[CPLChangeSessionUpdate discardFromStore:error:]
  -[CPLChangeSessionUpdate queuedDate]
  -[CPLChangeSessionUpdate applyToStore:error:]
  -[CPLChangeSessionUpdate pendingRecordChangeForClientCacheWithLocalScopedIdentifier:]
  -[CPLChangeSessionUpdate storageForStatusInStore:]


CPLPushSessionUpdate : CPLChangeSessionUpdate
 @property  CPLChangeBatch *diffBatch
 @property  NSDictionary *uploadIdentifiers
 @property  NSArray *addedRecords
 @property  NSArray *updatedRecords
 @property  NSArray *deletedRecordScopedIdentifiers
 @property  NSSet *unquarantinedRecordScopedIdentifiers
 @property  NSDictionary *recordWithStatusChangesToNotify

  // class methods
  +[CPLPushSessionUpdate supportsSecureCoding]

  // instance methods
  -[CPLPushSessionUpdate uploadIdentifiers]
  -[CPLPushSessionUpdate initWithCoder:]
  -[CPLPushSessionUpdate .cxx_destruct]
  -[CPLPushSessionUpdate statusDescription]
  -[CPLPushSessionUpdate addedRecords]
  -[CPLPushSessionUpdate encodeWithCoder:]
  -[CPLPushSessionUpdate discardFromStore:error:]
  -[CPLPushSessionUpdate applyToStore:error:]
  -[CPLPushSessionUpdate pendingRecordChangeForClientCacheWithLocalScopedIdentifier:]
  -[CPLPushSessionUpdate storageForStatusInStore:]
  -[CPLPushSessionUpdate updatedRecords]
  -[CPLPushSessionUpdate deletedRecordScopedIdentifiers]
  -[CPLPushSessionUpdate unquarantinedRecordScopedIdentifiers]
  -[CPLPushSessionUpdate recordWithStatusChangesToNotify]
  -[CPLPushSessionUpdate initWithPushSessionTracker:error:]
  -[CPLPushSessionUpdate diffBatch]


CPLPullSessionUpdate : CPLChangeSessionUpdate
 @property  CPLChangeBatch *clientBatch
 @property  CPLChangeBatch *cloudBatch

  // class methods
  +[CPLPullSessionUpdate supportsSecureCoding]

  // instance methods
  -[CPLPullSessionUpdate initWithCoder:]
  -[CPLPullSessionUpdate .cxx_destruct]
  -[CPLPullSessionUpdate statusDescription]
  -[CPLPullSessionUpdate encodeWithCoder:]
  -[CPLPullSessionUpdate discardFromStore:error:]
  -[CPLPullSessionUpdate applyToStore:error:]
  -[CPLPullSessionUpdate pendingRecordChangeForClientCacheWithLocalScopedIdentifier:]
  -[CPLPullSessionUpdate storageForStatusInStore:]
  -[CPLPullSessionUpdate initWithStore:expandedClientBatch:expandedCloudBatch:]
  -[CPLPullSessionUpdate clientBatch]
  -[CPLPullSessionUpdate cloudBatch]


CPLPullSessionScopesAcknowledgement : CPLChangeSessionUpdate
 @property  CPLChangeBatch *scopesChangeBatch

  // class methods
  +[CPLPullSessionScopesAcknowledgement supportsSecureCoding]

  // instance methods
  -[CPLPullSessionScopesAcknowledgement initWithCoder:]
  -[CPLPullSessionScopesAcknowledgement .cxx_destruct]
  -[CPLPullSessionScopesAcknowledgement statusDescription]
  -[CPLPullSessionScopesAcknowledgement encodeWithCoder:]
  -[CPLPullSessionScopesAcknowledgement discardFromStore:error:]
  -[CPLPullSessionScopesAcknowledgement applyToStore:error:]
  -[CPLPullSessionScopesAcknowledgement storageForStatusInStore:]
  -[CPLPullSessionScopesAcknowledgement initWithStore:scopesChangeBatch:]
  -[CPLPullSessionScopesAcknowledgement scopesChangeBatch]


CPLMomentSharePreviewData : PBCodable <NSCopying>
 @property  NSMutableArray *previewImageDatas
 @property  BOOL hasKeyAssetIdentifier
 @property  NSString *keyAssetIdentifier
 @property  BOOL hasCropRectString
 @property  NSString *cropRectString
 @property  NSMutableArray *curatedAssetIdentifiers

  // class methods
  +[CPLMomentSharePreviewData previewImageDataType]
  +[CPLMomentSharePreviewData curatedAssetIdentifiersType]

  // instance methods
  -[CPLMomentSharePreviewData mergeFrom:]
  -[CPLMomentSharePreviewData .cxx_destruct]
  -[CPLMomentSharePreviewData dictionaryRepresentation]
  -[CPLMomentSharePreviewData writeTo:]
  -[CPLMomentSharePreviewData previewImageDatas]
  -[CPLMomentSharePreviewData setCuratedAssetIdentifiers:]
  -[CPLMomentSharePreviewData isEqual:]
  -[CPLMomentSharePreviewData copyTo:]
  -[CPLMomentSharePreviewData readFrom:]
  -[CPLMomentSharePreviewData curatedAssetIdentifiers]
  -[CPLMomentSharePreviewData addPreviewImageData:]
  -[CPLMomentSharePreviewData setKeyAssetIdentifier:]
  -[CPLMomentSharePreviewData setCropRectString:]
  -[CPLMomentSharePreviewData cropRectString]
  -[CPLMomentSharePreviewData keyAssetIdentifier]
  -[CPLMomentSharePreviewData copyWithZone:]
  -[CPLMomentSharePreviewData addCuratedAssetIdentifiers:]
  -[CPLMomentSharePreviewData previewImageDatasCount]
  -[CPLMomentSharePreviewData clearPreviewImageDatas]
  -[CPLMomentSharePreviewData previewImageDataAtIndex:]
  -[CPLMomentSharePreviewData curatedAssetIdentifiersCount]
  -[CPLMomentSharePreviewData clearCuratedAssetIdentifiers]
  -[CPLMomentSharePreviewData curatedAssetIdentifiersAtIndex:]
  -[CPLMomentSharePreviewData hasKeyAssetIdentifier]
  -[CPLMomentSharePreviewData hasCropRectString]
  -[CPLMomentSharePreviewData setPreviewImageDatas:]


CPLScopeChange : CPLRecordChange <NSSecureCoding, NSCopying>
 @property  long long scopeType
 @property  CPLLibraryState *libraryState
 @property  CPLLibraryInfo *libraryInfo
 @property  unsigned long pullTaskItem
 @property  CPLEngineScope *scope
 @property  CPLScopedIdentifier *scopedIdentifier
 @property  NSString *identifier
 @property  NSDate *recordModificationDate
 @property  BOOL disabled
 @property  NSDate *disabledDate
 @property  NSDate *deleteDate
 @property  CPLAccountFlags *accountFlags
 @property  BOOL containerHasBeenWiped
 @property  CPLShare *share
 @property  BOOL activated

  // class methods
  +[CPLScopeChange newDeleteScopeChangeWithScopeIdentifier:type:]
  +[CPLScopeChange shouldAutoActivateScopeWithType:]
  +[CPLScopeChange mappingForScopeTypeDescription]
  +[CPLScopeChange newScopeChangeWithScopeIdentifier:type:]
  +[CPLScopeChange scopeChangeClassForType:]
  +[CPLScopeChange cplShouldIgnorePropertyForEquality:]
  +[CPLScopeChange newScopeChangeInferClassWithScopeIdentifier:type:]
  +[CPLScopeChange descriptionForScopeType:]

  // instance methods
  -[CPLScopeChange setScope:]
  -[CPLScopeChange scopeType]
  -[CPLScopeChange share]
  -[CPLScopeChange redactedDescription]
  -[CPLScopeChange .cxx_destruct]
  -[CPLScopeChange libraryState]
  -[CPLScopeChange scopeIdentifier]
  -[CPLScopeChange setScopeType:]
  -[CPLScopeChange setActivated:]
  -[CPLScopeChange scope]
  -[CPLScopeChange accountFlags]
  -[CPLScopeChange setLibraryState:]
  -[CPLScopeChange isActivated]
  -[CPLScopeChange copyWithZone:]
  -[CPLScopeChange _scopedIdentifier]
  -[CPLScopeChange assetCountPerType]
  -[CPLScopeChange isDisabled]
  -[CPLScopeChange containerHasBeenWiped]
  -[CPLScopeChange setShare:]
  -[CPLScopeChange libraryInfo]
  -[CPLScopeChange initWithScopeIdentifier:type:]
  -[CPLScopeChange _setChangeType:]
  -[CPLScopeChange disabledDate]
  -[CPLScopeChange deleteDate]
  -[CPLScopeChange defaultFlags]
  -[CPLScopeChange udpateScopeFromScopeChange:direction:didHaveChanges:]
  -[CPLScopeChange isScopeChange]
  -[CPLScopeChange setLibraryInfo:]
  -[CPLScopeChange pullTaskItem]
  -[CPLScopeChange setPullTaskItem:]


CPLMomentShareScopeChange : CPLScopeChange
 @property  NSString *title
 @property  NSDate *creationDate
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  NSDate *expiryDate
 @property  long long promisedAssetCount
 @property  long long promisedPhotosCount
 @property  long long promisedVideosCount
 @property  NSData *thumbnailImageData
 @property  NSData *previewImageData
 @property  NSString *originatingScopeIdentifier

  // instance methods
  -[CPLMomentShareScopeChange setCreationDate:]
  -[CPLMomentShareScopeChange setTitle:]
  -[CPLMomentShareScopeChange setEndDate:]
  -[CPLMomentShareScopeChange .cxx_destruct]
  -[CPLMomentShareScopeChange setStartDate:]
  -[CPLMomentShareScopeChange previewImageData]
  -[CPLMomentShareScopeChange thumbnailImageData]
  -[CPLMomentShareScopeChange setPreviewImageData:]
  -[CPLMomentShareScopeChange setMomentShare:]
  -[CPLMomentShareScopeChange setOriginatingScopeIdentifier:]
  -[CPLMomentShareScopeChange originatingScopeIdentifier]
  -[CPLMomentShareScopeChange title]
  -[CPLMomentShareScopeChange creationDate]
  -[CPLMomentShareScopeChange startDate]
  -[CPLMomentShareScopeChange setExpiryDate:]
  -[CPLMomentShareScopeChange momentShare]
  -[CPLMomentShareScopeChange setThumbnailImageData:]
  -[CPLMomentShareScopeChange promisedAssetCount]
  -[CPLMomentShareScopeChange promisedPhotosCount]
  -[CPLMomentShareScopeChange promisedVideosCount]
  -[CPLMomentShareScopeChange endDate]
  -[CPLMomentShareScopeChange setPromisedAssetCount:]
  -[CPLMomentShareScopeChange setPromisedPhotosCount:]
  -[CPLMomentShareScopeChange setPromisedVideosCount:]
  -[CPLMomentShareScopeChange expiryDate]
  -[CPLMomentShareScopeChange udpateScopeFromScopeChange:direction:didHaveChanges:]
  -[CPLMomentShareScopeChange setLibraryInfo:]


CPLBatchExtractionStrategy : NSObject
 @property  NSString *strategyName
 @property  <CPLBatchExtractionStrategyStorage> *storage
 @property  NSString *scopeIdentifier
 @property  unsigned long maximumRecordCountPerBatch
 @property  NSString *name
 @property  NSString *currentStepDescription

  // class methods
  +[CPLBatchExtractionStrategy usualStrategyWithStorage:coveringScopeIdentifier:]
  +[CPLBatchExtractionStrategy setMaximumRecordCountPerBatch:]
  +[CPLBatchExtractionStrategy overQuotaStrategyWithStorage:coveringScopeIdentifier:]

  // instance methods
  -[CPLBatchExtractionStrategy name]
  -[CPLBatchExtractionStrategy strategyName]
  -[CPLBatchExtractionStrategy .cxx_destruct]
  -[CPLBatchExtractionStrategy scopeIdentifier]
  -[CPLBatchExtractionStrategy storage]
  -[CPLBatchExtractionStrategy setMaximumRecordCountPerBatch:]
  -[CPLBatchExtractionStrategy _computeNextStep]
  -[CPLBatchExtractionStrategy extractBatch:maximumResourceSize:error:]
  -[CPLBatchExtractionStrategy reset]
  -[CPLBatchExtractionStrategy initWithName:storage:scopeIdentifier:steps:]
  -[CPLBatchExtractionStrategy _hasChanges]
  -[CPLBatchExtractionStrategy maximumRecordCountPerBatch]
  -[CPLBatchExtractionStrategy currentStepDescription]
  -[CPLBatchExtractionStrategy resetConditionallyFromNewIncomingChange:]


CPLMinglePulledChangesTask : CPLEngineSyncTask
 @property  CPLScopeFilter *scopeFilter

  // class methods
  +[CPLMinglePulledChangesTask mingleBatch:forStore:onPutBatchInPullQueue:error:]

  // instance methods
  -[CPLMinglePulledChangesTask taskDidFinishWithError:]
  -[CPLMinglePulledChangesTask .cxx_destruct]
  -[CPLMinglePulledChangesTask _notifySchedulerPullQueueIsFullNowIfNecessary]
  -[CPLMinglePulledChangesTask launch]
  -[CPLMinglePulledChangesTask setScopeFilter:]
  -[CPLMinglePulledChangesTask cancel]
  -[CPLMinglePulledChangesTask _checkContinueMinglingInTransaction:]
  -[CPLMinglePulledChangesTask _processNextBatch]
  -[CPLMinglePulledChangesTask initWithEngineLibrary:session:]
  -[CPLMinglePulledChangesTask scopeFilter]
  -[CPLMinglePulledChangesTask _taskDidFinishWithError:]
  -[CPLMinglePulledChangesTask _reallyNotifySchedulerPullQueueIsFull]
  -[CPLMinglePulledChangesTask _notifySchedulerPullQueueIsFull]
  -[CPLMinglePulledChangesTask _launch]
  -[CPLMinglePulledChangesTask taskIdentifier]


CPLShareParticipant : NSObject <NSSecureCoding, NSCopying>
 @property  BOOL isCurrentUser
 @property  long long role
 @property  long long acceptanceStatus
 @property  long long permission
 @property  NSString *userIdentifier
 @property  NSString *email
 @property  NSString *phoneNumber
 @property  NSPersonNameComponents *nameComponents
 @property  BOOL hasiCloudAccount

  // class methods
  +[CPLShareParticipant initialize]
  +[CPLShareParticipant supportsSecureCoding]
  +[CPLShareParticipant descriptionForRole:]
  +[CPLShareParticipant descriptionForAcceptanceStatus:]
  +[CPLShareParticipant descriptionForPermission:]

  // instance methods
  -[CPLShareParticipant nameComponents]
  -[CPLShareParticipant setHasiCloudAccount:]
  -[CPLShareParticipant userIdentifier]
  -[CPLShareParticipant setNameComponents:]
  -[CPLShareParticipant redactedDescription]
  -[CPLShareParticipant initWithCoder:]
  -[CPLShareParticipant setPermission:]
  -[CPLShareParticipant setRole:]
  -[CPLShareParticipant setUserIdentifier:]
  -[CPLShareParticipant setPhoneNumber:]
  -[CPLShareParticipant .cxx_destruct]
  -[CPLShareParticipant initWithPhoneNumber:]
  -[CPLShareParticipant setIsCurrentUser:]
  -[CPLShareParticipant isCurrentUser]
  -[CPLShareParticipant setAcceptanceStatus:]
  -[CPLShareParticipant acceptanceStatus]
  -[CPLShareParticipant phoneNumber]
  -[CPLShareParticipant init]
  -[CPLShareParticipant email]
  -[CPLShareParticipant isEqual:]
  -[CPLShareParticipant hasiCloudAccount]
  -[CPLShareParticipant initWithEmail:]
  -[CPLShareParticipant role]
  -[CPLShareParticipant setEmail:]
  -[CPLShareParticipant permission]
  -[CPLShareParticipant copyWithZone:]
  -[CPLShareParticipant encodeWithCoder:]
  -[CPLShareParticipant initWithUserIdentifier:phoneNumber:email:]
  -[CPLShareParticipant initWithUserIdentifier:]


CPLMemoryChange : CPLRecordChange
 @property  NSString *title
 @property  NSString *subtitle
 @property  long long category
 @property  long long subcategory
 @property  CPLMemoryAssetList *assetList
 @property  NSData *assetListPredicate
 @property  NSDate *creationDate
 @property  NSData *graphData
 @property  long long graphVersion
 @property  BOOL favorite
 @property  BOOL rejected
 @property  long long userActionOptions
 @property  NSData *movieData
 @property  double score
 @property  long long notificationState
 @property  NSData *blacklistedFeature
 @property  long long playCount
 @property  long long shareCount
 @property  long long viewCount

  // class methods
  +[CPLMemoryChange supportsSecureCoding]
  +[CPLMemoryChange _createTestMemoryWithAssets:]

  // instance methods
  -[CPLMemoryChange setShareCount:]
  -[CPLMemoryChange shareCount]
  -[CPLMemoryChange setScore:]
  -[CPLMemoryChange playCount]
  -[CPLMemoryChange setPlayCount:]
  -[CPLMemoryChange initWithCoder:]
  -[CPLMemoryChange setRejected:]
  -[CPLMemoryChange isRejected]
  -[CPLMemoryChange setCreationDate:]
  -[CPLMemoryChange setTitle:]
  -[CPLMemoryChange .cxx_destruct]
  -[CPLMemoryChange setSubtitle:]
  -[CPLMemoryChange setSubcategory:]
  -[CPLMemoryChange setViewCount:]
  -[CPLMemoryChange blacklistedFeature]
  -[CPLMemoryChange graphVersion]
  -[CPLMemoryChange movieData]
  -[CPLMemoryChange setNotificationState:]
  -[CPLMemoryChange subtitle]
  -[CPLMemoryChange assetList]
  -[CPLMemoryChange score]
  -[CPLMemoryChange subcategory]
  -[CPLMemoryChange assetListPredicate]
  -[CPLMemoryChange supportsDeletion]
  -[CPLMemoryChange title]
  -[CPLMemoryChange creationDate]
  -[CPLMemoryChange setFavorite:]
  -[CPLMemoryChange setGraphVersion:]
  -[CPLMemoryChange setBlacklistedFeature:]
  -[CPLMemoryChange userActionOptions]
  -[CPLMemoryChange setUserActionOptions:]
  -[CPLMemoryChange viewCount]
  -[CPLMemoryChange setGraphData:]
  -[CPLMemoryChange setAssetList:]
  -[CPLMemoryChange isFavorite]
  -[CPLMemoryChange setMovieData:]
  -[CPLMemoryChange setAssetListPredicate:]
  -[CPLMemoryChange category]
  -[CPLMemoryChange graphData]
  -[CPLMemoryChange setCategory:]
  -[CPLMemoryChange notificationState]
  -[CPLMemoryChange encodeWithCoder:]
  -[CPLMemoryChange checkDefaultValueBlockForPropertyWithSelector:]
  -[CPLMemoryChange supportsDirectDeletion]
  -[CPLMemoryChange propertiesDescription]
  -[CPLMemoryChange scopedIdentifiersForMapping]
  -[CPLMemoryChange translateToCloudChangeUsingIDMapping:error:]
  -[CPLMemoryChange translateToClientChangeUsingIDMapping:error:]


CPLResourceIdentityImplementation : CPLResourceIdentity
  // class methods
  +[CPLResourceIdentityImplementation isValidMMCSV2Signature:]
  +[CPLResourceIdentityImplementation fingerPrintForFileAtURL:typeIdentifier:error:]
  +[CPLResourceIdentityImplementation identityFromStoredIdentity:]
  +[CPLResourceIdentityImplementation storageNameForFingerPrint:fileUTI:bucket:]
  +[CPLResourceIdentityImplementation extensionForFileUTI:]
  +[CPLResourceIdentityImplementation identityForStorageName:]
  +[CPLResourceIdentityImplementation _fingerPrintForFD:typeIdentifier:error:]
  +[CPLResourceIdentityImplementation fingerPrintForData:typeIdentifier:error:]
  +[CPLResourceIdentityImplementation setMMCImplementationForPlatform:]
  +[CPLResourceIdentityImplementation fingerPrintForFD:typeIdentifier:error:]
  +[CPLResourceIdentityImplementation fileUTIForExtension:]
  +[CPLResourceIdentityImplementation zeroByteFileFingerPrint]

  // instance methods
  -[CPLResourceIdentityImplementation identityForStorage]


CPLResetFeedbackMessage : CPLFeedbackMessage
 @property  NSString *resetType
 @property  NSString *reason
 @property  NSString *uuid

  // class methods
  +[CPLResetFeedbackMessage feedbackType]

  // instance methods
  -[CPLResetFeedbackMessage .cxx_destruct]
  -[CPLResetFeedbackMessage reason]
  -[CPLResetFeedbackMessage uuid]
  -[CPLResetFeedbackMessage serverMessage]
  -[CPLResetFeedbackMessage initWithResetType:reason:uuid:libraryIdentifier:]
  -[CPLResetFeedbackMessage resetType]


CPLInfoFeedbackMessage : CPLFeedbackMessage
 @property  NSDictionary *info

  // class methods
  +[CPLInfoFeedbackMessage feedbackType]

  // instance methods
  -[CPLInfoFeedbackMessage .cxx_destruct]
  -[CPLInfoFeedbackMessage info]
  -[CPLInfoFeedbackMessage serverMessage]
  -[CPLInfoFeedbackMessage initWithInfo:libraryIdentifier:]


CPLMemoryAsset : PBCodable <NSCopying>
 @property  BOOL hasAssetIdentifier
 @property  NSString *assetIdentifier
 @property  BOOL hasAssetFlag
 @property  CPLMemoryAssetFlag *assetFlag
 @property  BOOL hasAssetMovieData
 @property  NSData *assetMovieData
 @property  BOOL hasMasterFingerprint
 @property  NSString *masterFingerprint

  // instance methods
  -[CPLMemoryAsset mergeFrom:]
  -[CPLMemoryAsset .cxx_destruct]
  -[CPLMemoryAsset setAssetFlag:]
  -[CPLMemoryAsset setMasterFingerprint:]
  -[CPLMemoryAsset dictionaryRepresentation]
  -[CPLMemoryAsset writeTo:]
  -[CPLMemoryAsset isEqual:]
  -[CPLMemoryAsset copyTo:]
  -[CPLMemoryAsset readFrom:]
  -[CPLMemoryAsset assetIdentifier]
  -[CPLMemoryAsset setAssetIdentifier:]
  -[CPLMemoryAsset assetMovieData]
  -[CPLMemoryAsset setAssetMovieData:]
  -[CPLMemoryAsset copyWithZone:]
  -[CPLMemoryAsset assetFlag]
  -[CPLMemoryAsset hasAssetIdentifier]
  -[CPLMemoryAsset hasAssetFlag]
  -[CPLMemoryAsset hasAssetMovieData]
  -[CPLMemoryAsset hasMasterFingerprint]
  -[CPLMemoryAsset masterFingerprint]


CPLEngineTransport : NSObject <CPLAbstractObject, CPLEngineComponent>
 @property  CPLEngineLibrary *engineLibrary
 @property  Class transportGroupClass
 @property  Class userIdentifierClass
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineTransport platformImplementationProtocol]

  // instance methods
  -[CPLEngineTransport openWithCompletionHandler:]
  -[CPLEngineTransport componentName]
  -[CPLEngineTransport closeAndDeactivate:completionHandler:]
  -[CPLEngineTransport noteClientIsInBackground]
  -[CPLEngineTransport bestErrorForUnderlyingError:]
  -[CPLEngineTransport noteClientIsBeginningSignificantWork]
  -[CPLEngineTransport noteClientIsEndingSignificantWork]
  -[CPLEngineTransport getSystemBudgetsWithCompletionHandler:]
  -[CPLEngineTransport uploadBatchTaskForBatch:transportScope:scope:additionalTransportScopes:progressHandler:completionHandler:]
  -[CPLEngineTransport createGroupForSetup]
  -[CPLEngineTransport simpleDescriptionForSyncAnchor:]
  -[CPLEngineTransport createGroupForKeepOriginalsPrefetch]
  -[CPLEngineTransport createGroupForRecoveryDownload]
  -[CPLEngineTransport downloadBatchTaskForSyncAnchor:transportScope:scope:currentScopeChange:progressHandler:completionHandler:]
  -[CPLEngineTransport createGroupForPrefetch]
  -[CPLEngineTransport createGroupForThumbnailsDownload]
  -[CPLEngineTransport queryUserDetailsTaskForParticipants:completionHandler:]
  -[CPLEngineTransport descriptionForTransportScope:]
  -[CPLEngineTransport createGroupForChangeUpload]
  -[CPLEngineTransport rampingRequestTaskForResourceType:numRequested:completionHandler:]
  -[CPLEngineTransport acceptTaskForSharedScope:completionHandler:]
  -[CPLEngineTransport createGroupForChangeDownload]
  -[CPLEngineTransport inMemoryDownloadTaskForResource:record:transportScope:completionHandler:]
  -[CPLEngineTransport fetchScopeListChangesForScopeListSyncAnchor:progressHandler:completionHandler:]
  -[CPLEngineTransport dropPersistedInitialSyncSession]
  -[CPLEngineTransport createGroupForNonDerivativePrefetch]
  -[CPLEngineTransport .cxx_destruct]
  -[CPLEngineTransport getCurrentSyncAnchorWithTransportScope:scope:completionHandler:]
  -[CPLEngineTransport createGroupForFetchScopeListChanges]
  -[CPLEngineTransport platformObject]
  -[CPLEngineTransport fetchTransportScopeForScope:transportScope:completionHandler:]
  -[CPLEngineTransport createGroupForAcceptingMomentShare]
  -[CPLEngineTransport createGroupForPublishingMomentShare]
  -[CPLEngineTransport createGroupForTransportScopeDelete]
  -[CPLEngineTransport createGroupForFeedback]
  -[CPLEngineTransport checkRecordsExistenceTaskForRecords:fetchRecordProperties:transportScope:scope:additionalTransportScopes:completionHandler:]
  -[CPLEngineTransport sendFeedbackTaskForMessages:completionHandler:]
  -[CPLEngineTransport createGroupForQueryUserIdentities]
  -[CPLEngineTransport createGroupForWidgetPrefetch]
  -[CPLEngineTransport createGroupForResetSync]
  -[CPLEngineTransport createGroupForFetchingMomentShare]
  -[CPLEngineTransport createGroupForResourcesDownload]
  -[CPLEngineTransport createGroupForLibraryStateCheck]
  -[CPLEngineTransport createGroupForInitialUpload]
  -[CPLEngineTransport createGroupForMemoriesPrefetch]
  -[CPLEngineTransport fetchTaskForScopeWithShareURL:completionHandler:]
  -[CPLEngineTransport getScopeInfoWithTransportScope:scope:completionHandler:]
  -[CPLEngineTransport setupTaskUpdateDisabledFeatures:completionHandler:]
  -[CPLEngineTransport getStreamingURLTaskForResource:intent:hints:timeRange:transportScope:clientBundleID:completionHandler:]
  -[CPLEngineTransport userIdentifierClass]
  -[CPLEngineTransport updateTransportScope:scope:scopeChange:completionHandler:]
  -[CPLEngineTransport isResourceDynamic:]
  -[CPLEngineTransport queryTaskForCursor:class:transportScope:scope:progressHandler:completionHandler:]
  -[CPLEngineTransport transportGroupClass]
  -[CPLEngineTransport deleteTransportScope:scope:completionHandler:]
  -[CPLEngineTransport createGroupForTransportScopeUpdate]
  -[CPLEngineTransport createGroupForMovieStreamingWithIntent:]
  -[CPLEngineTransport findPersistedInitialSyncSession:completionHandler:]
  -[CPLEngineTransport createGroupForAnalysisDownload]
  -[CPLEngineTransport simpleDescriptionForScopeListSyncAnchor:]
  -[CPLEngineTransport createGroupForThumbnailPrefetch]
  -[CPLEngineTransport engineLibrary]
  -[CPLEngineTransport scopeNameForTransportScope:]
  -[CPLEngineTransport createGroupForWidgetResourcesDownload]
  -[CPLEngineTransport tentativeTransportScopeForScope:]
  -[CPLEngineTransport upgradeFlags:fromTransportScope:]
  -[CPLEngineTransport getStatusWithCompletionHandler:]
  -[CPLEngineTransport transportScopeForUpgradeFromScopeName:]
  -[CPLEngineTransport resourcesDownloadTaskWithCompletionHandler:]
  -[CPLEngineTransport noteClientIsInForeground]
  -[CPLEngineTransport createGroupForDownloadWithIntent:priority:]
  -[CPLEngineTransport updateShareTaskForScope:transportScope:completionHandler:]
  -[CPLEngineTransport initWithEngineLibrary:]
  -[CPLEngineTransport setShouldOverride:forSystemBudgets:]
  -[CPLEngineTransport createGroupForInitialDownload]
  -[CPLEngineTransport resourceCheckTaskForResources:transportScopes:completionHandler:]
  -[CPLEngineTransport getStatusDictionaryWithCompletionHandler:]
  -[CPLEngineTransport cancelBlockedTasksIncludingBackground:]
  -[CPLEngineTransport createGroupForPruningCheck]
  -[CPLEngineTransport createScopeTaskForScope:completionHandler:]


CPLCleanupTask : CPLEngineSyncTask
  // instance methods
  -[CPLCleanupTask taskDidFinishWithError:]
  -[CPLCleanupTask launch]
  -[CPLCleanupTask _doOneIteration]
  -[CPLCleanupTask taskIdentifier]


CPLEngineScope : NSObject <NSSecureCoding>
 @property  NSDate *creationDate
 @property  long long localIndex
 @property  long long cloudIndex
 @property  long long stableIndex
 @property  NSString *scopeIdentifier
 @property  long long scopeType

  // class methods
  +[CPLEngineScope separatorForStatusKey:]
  +[CPLEngineScope supportsSecureCoding]
  +[CPLEngineScope formatStatusDictionary:forScopeWithIdentifier:appendString:appendTopLevelStatus:appendLineStatus:]

  // instance methods
  -[CPLEngineScope scopeType]
  -[CPLEngineScope redactedDescription]
  -[CPLEngineScope initWithCoder:]
  -[CPLEngineScope setCreationDate:]
  -[CPLEngineScope .cxx_destruct]
  -[CPLEngineScope scopeIdentifier]
  -[CPLEngineScope statusDescription]
  -[CPLEngineScope creationDate]
  -[CPLEngineScope encodeWithCoder:]
  -[CPLEngineScope initWithScopeIdentifier:scopeType:]
  -[CPLEngineScope localIndex]
  -[CPLEngineScope setLocalIndex:]
  -[CPLEngineScope cloudIndex]
  -[CPLEngineScope setCloudIndex:]
  -[CPLEngineScope stableIndex]
  -[CPLEngineScope setStableIndex:]


CPLEngineScopeFlagsUpdate : NSObject
 @property  long long updatedFlagsMask
 @property  long long flags
 @property  BOOL hasFlagUpdates
 @property  NSArray *arrayDescription

  // class methods
  +[CPLEngineScopeFlagsUpdate flagsDescriptionMapping]
  +[CPLEngineScopeFlagsUpdate _arrayDescriptionForFlags:remainingFlags:]
  +[CPLEngineScopeFlagsUpdate descriptionForFlags:]

  // instance methods
  -[CPLEngineScopeFlagsUpdate arrayDescription]
  -[CPLEngineScopeFlagsUpdate updateFlags:]
  -[CPLEngineScopeFlagsUpdate redactedDescription]
  -[CPLEngineScopeFlagsUpdate updatedFlagsFromFlags:]
  -[CPLEngineScopeFlagsUpdate setValue:forFlag:]
  -[CPLEngineScopeFlagsUpdate init]
  -[CPLEngineScopeFlagsUpdate hasFlagUpdates]
  -[CPLEngineScopeFlagsUpdate flags]
  -[CPLEngineScopeFlagsUpdate valueForFlag:]
  -[CPLEngineScopeFlagsUpdate updateFlags:withFlagsValue:]
  -[CPLEngineScopeFlagsUpdate updatedFlagsMask]
  -[CPLEngineScopeFlagsUpdate initWithFlags:]


CPLArchiver : NSCoder
 @property  BOOL forDisplay
 @property  id archiveCursor

  // class methods
  +[CPLArchiver displayableDictionaryForDictionary:]
  +[CPLArchiver unarchivedObjectWithPropertyList:ofClass:]
  +[CPLArchiver archivedPropertyListWithRootObject:]
  +[CPLArchiver unarchiveObjectWithData:ofClass:]
  +[CPLArchiver archivedPropertyListWithRootObject:usingBlock:]
  +[CPLArchiver displayablePropertyListWithRootObject:]
  +[CPLArchiver _displayableArrayForArray:]
  +[CPLArchiver archivedDataWithRootObject:usingBlock:]
  +[CPLArchiver fullDescriptionForObject:]
  +[CPLArchiver _initializeSmallKeyMapping]
  +[CPLArchiver _displayableObjectForObject:]
  +[CPLArchiver archivedDataWithRootObject:]

  // instance methods
  -[CPLArchiver decodeObject]
  -[CPLArchiver decodeObjectOfClass:forKey:]
  -[CPLArchiver encodeInt32:forKey:]
  -[CPLArchiver encodeObject:]
  -[CPLArchiver encodeInteger:forKey:]
  -[CPLArchiver encodeBycopyObject:]
  -[CPLArchiver decodeObjectOfClasses:forKey:]
  -[CPLArchiver initWithRootObject:forDisplay:block:]
  -[CPLArchiver decodeIntForKey:]
  -[CPLArchiver encodeInt64:forKey:]
  -[CPLArchiver decodeBytesForKey:returnedLength:]
  -[CPLArchiver allowsKeyedCoding]
  -[CPLArchiver encodeArrayOfObjCType:count:at:]
  -[CPLArchiver containsValueForKey:]
  -[CPLArchiver encodeConditionalObject:]
  -[CPLArchiver encodeByrefObject:]
  -[CPLArchiver decodeRectForKey:]
  -[CPLArchiver decodeBoolForKey:]
  -[CPLArchiver encodeBytes:length:]
  -[CPLArchiver encodeRect:forKey:]
  -[CPLArchiver encodeInt:forKey:]
  -[CPLArchiver encodeRootObject:]
  -[CPLArchiver decodeFloatForKey:]
  -[CPLArchiver initWithRootObject:forDisplay:]
  -[CPLArchiver decodePropertyListForKey:]
  -[CPLArchiver decodeInt64ForKey:]
  -[CPLArchiver encodeValuesOfObjCTypes:]
  -[CPLArchiver decodeIntegerForKey:]
  -[CPLArchiver encodeConditionalObject:forKey:]
  -[CPLArchiver encodeObject:forKey:]
  -[CPLArchiver decodeInt32ForKey:]
  -[CPLArchiver encodePoint:forKey:]
  -[CPLArchiver encodePropertyList:]
  -[CPLArchiver .cxx_destruct]
  -[CPLArchiver decodeDoubleForKey:]
  -[CPLArchiver encodeDouble:forKey:]
  -[CPLArchiver encodeBool:forKey:]
  -[CPLArchiver decodeObjectForKey:]
  -[CPLArchiver encodeFloat:forKey:]
  -[CPLArchiver encodeBytes:length:forKey:]
  -[CPLArchiver archiveCursor]
  -[CPLArchiver _encodeKey:]
  -[CPLArchiver encodeSize:forKey:]
  -[CPLArchiver rootObject]
  -[CPLArchiver decodeSizeForKey:]
  -[CPLArchiver decodeArrayOfObjCType:count:at:]
  -[CPLArchiver decodeBytesWithReturnedLength:]
  -[CPLArchiver archivedPropertyList]
  -[CPLArchiver initWithArchive:rootClass:]
  -[CPLArchiver decodeValuesOfObjCTypes:]
  -[CPLArchiver decodePointForKey:]
  -[CPLArchiver decodePropertyList]
  -[CPLArchiver _decodeKey:class:inDictionary:]
  -[CPLArchiver setArchiveCursor:]
  -[CPLArchiver forDisplay]


CPLPlaceAnnotation : NSObject <NSSecureCoding, NSCopying>
 @property  NSNumber *placeLevel
 @property  NSString *placeName

  // class methods
  +[CPLPlaceAnnotation supportsSecureCoding]

  // instance methods
  -[CPLPlaceAnnotation initWithCoder:]
  -[CPLPlaceAnnotation placeLevel]
  -[CPLPlaceAnnotation setPlaceLevel:]
  -[CPLPlaceAnnotation setPlaceName:]
  -[CPLPlaceAnnotation .cxx_destruct]
  -[CPLPlaceAnnotation isEqual:]
  -[CPLPlaceAnnotation placeName]
  -[CPLPlaceAnnotation copyWithZone:]
  -[CPLPlaceAnnotation encodeWithCoder:]


CPLEngineIDMapping : CPLEngineStorage <CPLAbstractObject, CPLEngineIDMapping>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineIDMapping scopeType]
  -[CPLEngineIDMapping setFinalCloudScopedIdentifier:forPendingCloudScopedIdentifier:error:]
  -[CPLEngineIDMapping deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineIDMapping cloudScopedIdentifierForLocalScopedIdentifier:isFinal:]
  -[CPLEngineIDMapping removeMappingForCloudScopedIdentifier:error:]
  -[CPLEngineIDMapping resetAllFinalCloudIdentifiersForScopeWithIdentifier:error:]
  -[CPLEngineIDMapping localScopedIdentifierForCloudScopedIdentifier:isFinal:]
  -[CPLEngineIDMapping localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords:]
  -[CPLEngineIDMapping addDeleteEventForRecordWithLocalScopedIdentifier:direction:error:]
  -[CPLEngineIDMapping firstAvailableCloudScopedIdentifierForProposedCloudScopedIdentifier:]
  -[CPLEngineIDMapping addCloudScopedIdentifier:forLocalScopedIdentifier:isFinal:direction:error:]
  -[CPLEngineIDMapping hasPendingIdentifiers]
  -[CPLEngineIDMapping addAddEventForRecordWithLocalScopedIdentifier:direction:error:]
  -[CPLEngineIDMapping setupCloudScopedIdentifier:forLocalScopedIdentifier:isFinal:direction:error:]
  -[CPLEngineIDMapping markAllPendingIdentifiersForScopeWithIdentifier:asFinalWithError:]


CPLResetTracker : NSObject <NSSecureCoding>
 @property  NSArray *resetReasons
 @property  NSDate *earliestReasonDate
 @property  NSDate *likelyResetDate
 @property  BOOL hasReasons

  // class methods
  +[CPLResetTracker initialize]
  +[CPLResetTracker registerLikelyResetReason:]
  +[CPLResetTracker currentReasonDescriptions]
  +[CPLResetTracker supportsSecureCoding]
  +[CPLResetTracker currentTracker]
  +[CPLResetTracker registerTentativeResetReasonIfCrashing:]
  +[CPLResetTracker _registerReasonLocked:]
  +[CPLResetTracker discardTentativeResetReason:]
  +[CPLResetTracker shouldIgnoreDefaultsCPLKey:]
  +[CPLResetTracker registerLikelyResetReason:arguments:]
  +[CPLResetTracker discardTracker:]
  +[CPLResetTracker _storeReasonsLocked]

  // instance methods
  -[CPLResetTracker initWithCoder:]
  -[CPLResetTracker hasReasons]
  -[CPLResetTracker .cxx_destruct]
  -[CPLResetTracker initWithResetReasons:]
  -[CPLResetTracker likelyResetDate]
  -[CPLResetTracker resetReasons]
  -[CPLResetTracker likelyResetReasonWithImmediateReason:]
  -[CPLResetTracker earliestReasonDate]
  -[CPLResetTracker encodeWithCoder:]


CPLResetReason : NSObject <NSSecureCoding>
 @property  id asPlist
 @property  NSString *uuid
 @property  NSDate *date
 @property  NSString *reason
 @property  BOOL tentative

  // class methods
  +[CPLResetReason supportsSecureCoding]

  // instance methods
  -[CPLResetReason tentative]
  -[CPLResetReason initWithCoder:]
  -[CPLResetReason .cxx_destruct]
  -[CPLResetReason initWithPlist:]
  -[CPLResetReason reason]
  -[CPLResetReason asPlist]
  -[CPLResetReason uuid]
  -[CPLResetReason setTentative:]
  -[CPLResetReason encodeWithCoder:]
  -[CPLResetReason date]
  -[CPLResetReason initWithDate:reason:]
  -[CPLResetReason reasonDescriptionWithNow:]


CPLStatus : NSObject
 @property  NSDate *lastCompletePrefetchDate
 @property  NSDate *lastPruneDate
 @property  BOOL hasChangesToProcess
 @property  BOOL containerHasBeenWiped
 @property  BOOL iCloudLibraryClientVersionTooOld
 @property  NSDate *lastSuccessfulSyncDate
 @property  NSDate *initialSyncDate
 @property  BOOL isExceedingQuota
 @property  NSDate *exitDeleteTime
 @property  BOOL iCloudLibraryHasBeenWiped
 @property  BOOL iCloudLibraryExists
 @property  NSData *accountFlagsData
 @property  NSDate *cloudAssetCountPerTypeLastCheckDate
 @property  BOOL upgradeSuggestedToAccessAllPhotos
 @property  BOOL lowDiskSpace
 @property  NSArray *disabledFeatures
 @property  BOOL hasValidSystemBudget
 @property  BOOL hasCellularBudget
 @property  BOOL hasBatteryBudget
 @property  NSDictionary *cloudAssetCountPerType
 @property  CPLAccountFlags *accountFlags
 @property  BOOL connectedToNetwork
 @property  BOOL cellularRestricted
 @property  BOOL inAirplaneMode
 @property  BOOL isConstrainedNetwork
 @property  BOOL isBlockedByLowPowerMode
 @property  <CPLStatusDelegate> *delegate

  // instance methods
  -[CPLStatus refetchFromDisk]
  -[CPLStatus initWithClientLibraryBaseURL:]
  -[CPLStatus _save]
  -[CPLStatus cloudAssetCountPerType]
  -[CPLStatus hasBatteryBudget]
  -[CPLStatus setHasCellularBudget:hasBatteryBudget:isConstrainedNetwork:isBlockedByLowPowerMode:isBudgetValid:]
  -[CPLStatus setIsExceedingQuota:]
  -[CPLStatus isConstrainedNetwork]
  -[CPLStatus setAccountFlagsData:]
  -[CPLStatus setICloudLibraryClientVersionTooOld:]
  -[CPLStatus isBlockedByLowPowerMode]
  -[CPLStatus isInAirplaneMode]
  -[CPLStatus lastPruneDate]
  -[CPLStatus setContainerHasBeenWiped:]
  -[CPLStatus isConnectedToNetwork]
  -[CPLStatus .cxx_destruct]
  -[CPLStatus setLowDiskSpace:]
  -[CPLStatus checkInitialSyncMarker]
  -[CPLStatus writeInitialSyncMarker:]
  -[CPLStatus _writeInitialSyncMarkerForDate:error:]
  -[CPLStatus _loadIfNecessary]
  -[CPLStatus setDelegate:]
  -[CPLStatus disabledFeatures]
  -[CPLStatus initialSyncDate]
  -[CPLStatus lowDiskSpace]
  -[CPLStatus lastSuccessfulSyncDate]
  -[CPLStatus initWithClientLibraryBaseURLForCPLEngine:]
  -[CPLStatus hasChangesToProcess]
  -[CPLStatus setConnectedToNetwork:cellularIsRestricted:inAirplaneMode:]
  -[CPLStatus _setObjectInStatus:forKey:]
  -[CPLStatus statusDescription]
  -[CPLStatus accountFlagsData]
  -[CPLStatus setCloudAssetCountPerType:updateCheckDate:]
  -[CPLStatus hasValidSystemBudget]
  -[CPLStatus accountFlags]
  -[CPLStatus iCloudLibraryClientVersionTooOld]
  -[CPLStatus setLastSuccessfulSyncDate:]
  -[CPLStatus setICloudLibraryExists:]
  -[CPLStatus setHasChangesToProcess:]
  -[CPLStatus setICloudLibraryHasBeenWiped:]
  -[CPLStatus lastCompletePrefetchDate]
  -[CPLStatus setDisabledFeatures:]
  -[CPLStatus preventDelegateWithDelegationClass:selector:]
  -[CPLStatus isCellularRestricted]
  -[CPLStatus delegate]
  -[CPLStatus setExitDeleteTime:]
  -[CPLStatus hasCellularBudget]
  -[CPLStatus setUpgradeSuggestedToAccessAllPhotos:]
  -[CPLStatus setLastCompletePrefetchDate:]
  -[CPLStatus cloudAssetCountPerTypeLastCheckDate]
  -[CPLStatus _statusDidChange]
  -[CPLStatus exitDeleteTime]
  -[CPLStatus iCloudLibraryHasBeenWiped]
  -[CPLStatus setLastPruneDate:]
  -[CPLStatus isExceedingQuota]
  -[CPLStatus containerHasBeenWiped]
  -[CPLStatus setInitialSyncDate:]
  -[CPLStatus isUpgradeSuggestedToAccessAllPhotos]
  -[CPLStatus _deleteInitialSyncMarkerWithError:]
  -[CPLStatus iCloudLibraryExists]


CPLServerFeedbackKeyAndValue : PBCodable <NSCopying>
 @property  BOOL hasKey
 @property  NSString *key
 @property  BOOL hasValue
 @property  NSString *value

  // instance methods
  -[CPLServerFeedbackKeyAndValue mergeFrom:]
  -[CPLServerFeedbackKeyAndValue setKey:]
  -[CPLServerFeedbackKeyAndValue hasValue]
  -[CPLServerFeedbackKeyAndValue .cxx_destruct]
  -[CPLServerFeedbackKeyAndValue dictionaryRepresentation]
  -[CPLServerFeedbackKeyAndValue writeTo:]
  -[CPLServerFeedbackKeyAndValue isEqual:]
  -[CPLServerFeedbackKeyAndValue copyTo:]
  -[CPLServerFeedbackKeyAndValue readFrom:]
  -[CPLServerFeedbackKeyAndValue setValue:]
  -[CPLServerFeedbackKeyAndValue hasKey]
  -[CPLServerFeedbackKeyAndValue value]
  -[CPLServerFeedbackKeyAndValue key]
  -[CPLServerFeedbackKeyAndValue copyWithZone:]


CPLTransaction : NSObject
 @property  NSString *identifier

  // class methods
  +[CPLTransaction transactionCount]
  +[CPLTransaction transactions]
  +[CPLTransaction endTransactionWithIdentifier:]
  +[CPLTransaction beginTransactionWithIdentifier:description:keepPower:]
  +[CPLTransaction newTransactionWithIdentifier:description:keepPower:]

  // instance methods
  -[CPLTransaction .cxx_destruct]
  -[CPLTransaction endTransaction]
  -[CPLTransaction identifier]
  -[CPLTransaction initWithIdentifier:description:keepPower:]
  -[CPLTransaction dealloc]


CPLFaceAnalysisReference : CPLFaceAnalysis
 @property  NSArray *faces

  // instance methods
  -[CPLFaceAnalysisReference addFace:]
  -[CPLFaceAnalysisReference faces]
  -[CPLFaceAnalysisReference addFaces:]
  -[CPLFaceAnalysisReference setFaces:]


CPLEngineScheduler : NSObject <CPLAbstractObject, CPLEngineComponent>
 @property  CPLEngineLibrary *engineLibrary
 @property  @? requiredStateObserverBlock
 @property  @? shouldBackOffOnErrorBlock
 @property  unsigned long requiredState
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineScheduler platformImplementationProtocol]
  +[CPLEngineScheduler validElements]

  // instance methods
  -[CPLEngineScheduler disableMingling]
  -[CPLEngineScheduler openWithCompletionHandler:]
  -[CPLEngineScheduler noteClientIsInForegroundQuietly:]
  -[CPLEngineScheduler disableSynchronizationWithReason:]
  -[CPLEngineScheduler componentName]
  -[CPLEngineScheduler closeAndDeactivate:completionHandler:]
  -[CPLEngineScheduler enableMingling]
  -[CPLEngineScheduler blockEngineElement:]
  -[CPLEngineScheduler noteClientIsInBackground]
  -[CPLEngineScheduler enableSynchronizationWithReason:]
  -[CPLEngineScheduler testKey:value:completionHandler:]
  -[CPLEngineScheduler noteClientIsBeginningSignificantWork]
  -[CPLEngineScheduler noteClientIsEndingSignificantWork]
  -[CPLEngineScheduler unblockEngineElement:]
  -[CPLEngineScheduler unblockEngineElementOnce:]
  -[CPLEngineScheduler kickOffSyncSession]
  -[CPLEngineScheduler waitForEngineElementToBeBlocked:timeout:]
  -[CPLEngineScheduler requiredStateObserverBlock]
  -[CPLEngineScheduler _stopPreparingFirstSession]
  -[CPLEngineScheduler _handleResetCloudCacheWithError:completionHandler:]
  -[CPLEngineScheduler noteTransportNeedsUpdate]
  -[CPLEngineScheduler _prepareFirstSession]
  -[CPLEngineScheduler noteStoreNeedsCleanup]
  -[CPLEngineScheduler noteContainerHasBeenWiped]
  -[CPLEngineScheduler _setRequiredFirstState:]
  -[CPLEngineScheduler _handleResetClientCacheWithError:completionHandler:]
  -[CPLEngineScheduler noteServerHasChanges]
  -[CPLEngineScheduler _handleResetAnchorWithError:completionHandler:]
  -[CPLEngineScheduler _noteSyncSessionNeededFromState:]
  -[CPLEngineScheduler _syncSessionIsPossible]
  -[CPLEngineScheduler noteStoreNeedsToUpdateDisabledFeatures]
  -[CPLEngineScheduler setShouldBackOffOnErrorBlock:]
  -[CPLEngineScheduler startRequiredSyncSessionNow:]
  -[CPLEngineScheduler noteClientIsNotInSyncWithClientCache]
  -[CPLEngineScheduler .cxx_destruct]
  -[CPLEngineScheduler _handleResetGlobalAnchorWithError:completionHandler:]
  -[CPLEngineScheduler isClientInForeground]
  -[CPLEngineScheduler platformObject]
  -[CPLEngineScheduler noteClientNeedsToPull]
  -[CPLEngineScheduler noteScopeNeedsToPushToTransport]
  -[CPLEngineScheduler isSynchronizationDisabledWithReasonError:]
  -[CPLEngineScheduler noteNetworkStateDidChange]
  -[CPLEngineScheduler _writeFirstSynchronizationMarker]
  -[CPLEngineScheduler _disableFastRelaunchProtection]
  -[CPLEngineScheduler _enableSynchronizationWithReasonLocked:]
  -[CPLEngineScheduler willRunEngineElement:]
  -[CPLEngineScheduler resetBackoffInterval]
  -[CPLEngineScheduler _updateOverridingForeground]
  -[CPLEngineScheduler _minimalDateForFirstSync]
  -[CPLEngineScheduler requiredState]
  -[CPLEngineScheduler _disableSynchronizationWithReasonLocked:]
  -[CPLEngineScheduler noteScopeListNeedsUpdate]
  -[CPLEngineScheduler _backOff]
  -[CPLEngineScheduler _disableSynchronizationBecauseContainerHasBeenWipedLocked]
  -[CPLEngineScheduler _scheduleNextSyncSession]
  -[CPLEngineScheduler _startSyncSession:withMinimalPhase:rewind:]
  -[CPLEngineScheduler noteServerMightBeAvailableNow]
  -[CPLEngineScheduler noteScopeNeedsUpdate]
  -[CPLEngineScheduler noteSyncSession:stateWillBeAttempted:]
  -[CPLEngineScheduler forceStartSyncSession:withMinimalPhase:]
  -[CPLEngineScheduler _updateLastSyncDateIfNecessaryLocked]
  -[CPLEngineScheduler _reallyUnscheduleSession]
  -[CPLEngineScheduler noteResourceDownloadQueueIsFull]
  -[CPLEngineScheduler isMinglingEnabled]
  -[CPLEngineScheduler _startRequiredSyncSession:]
  -[CPLEngineScheduler noteScopeNeedsToPullFromTransport]
  -[CPLEngineScheduler _noteSyncSessionNeededFromStateDontRewindImmediately:]
  -[CPLEngineScheduler _pathToFirstSynchronizationMarker]
  -[CPLEngineScheduler noteSyncSession:failedDuringPhase:withError:]
  -[CPLEngineScheduler _reallyStartSyncSession:]
  -[CPLEngineScheduler engineLibrary]
  -[CPLEngineScheduler _noteServerIsUnavailableWithErrorLocked:reason:]
  -[CPLEngineScheduler _resetFirstSynchronizationMarker]
  -[CPLEngineScheduler noteSyncSessionSucceeded:]
  -[CPLEngineScheduler getStatusWithCompletionHandler:]
  -[CPLEngineScheduler noteStoreNeedsSetup]
  -[CPLEngineScheduler _reallyNoteServerHasChangesLocked]
  -[CPLEngineScheduler noteClientIsInSyncWithClientCache]
  -[CPLEngineScheduler _disableRetryAfterLocked]
  -[CPLEngineScheduler shouldBackOffOnErrorBlock]
  -[CPLEngineScheduler noteServerIsUnavailableWithError:]
  -[CPLEngineScheduler initWithEngineLibrary:]
  -[CPLEngineScheduler setRequiredStateObserverBlock:]
  -[CPLEngineScheduler getStatusDictionaryWithCompletionHandler:]
  -[CPLEngineScheduler _unscheduleNextSyncSession]
  -[CPLEngineScheduler noteScopeNeedsToPushHighPriorityToTransport]
  -[CPLEngineScheduler getCurrentRequiredStateWithCompletionHandler:]


CPLEngineResourceDownloadQueue : CPLEngineStorage <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineResourceDownloadQueue shouldRetryDownloadOnError:]

  // instance methods
  -[CPLEngineResourceDownloadQueue scopeType]
  -[CPLEngineResourceDownloadQueue barrier]
  -[CPLEngineResourceDownloadQueue _transportTaskCount]
  -[CPLEngineResourceDownloadQueue hasActiveOrQueuedBackgroundDownloadOperations]
  -[CPLEngineResourceDownloadQueue deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineResourceDownloadQueue _bestQueueWithCancellableTransportTasks]
  -[CPLEngineResourceDownloadQueue _canScheduleBackgroundDownloads]
  -[CPLEngineResourceDownloadQueue resetDequeuedBackgroundDownloadTasksWithError:]
  -[CPLEngineResourceDownloadQueue createGroupForBackgroundDownloadsOfResourceType:transferIntent:transport:]
  -[CPLEngineResourceDownloadQueue downloadTaskForLocalResource:clientBundleID:options:proposedTaskIdentifier:didStartHandler:progressHandler:completionHandler:]
  -[CPLEngineResourceDownloadQueue .cxx_destruct]
  -[CPLEngineResourceDownloadQueue _shouldTryLowPriorityDownloadWithError:]
  -[CPLEngineResourceDownloadQueue removeAllBackgroundDownloadTasksForItemWithScopedIdentifier:error:]
  -[CPLEngineResourceDownloadQueue _dequeueTransferTaskInActiveQueue:]
  -[CPLEngineResourceDownloadQueue _failedTaskWithCompletionHandler:error:resource:taskIdentifier:options:]
  -[CPLEngineResourceDownloadQueue _queuesStatus]
  -[CPLEngineResourceDownloadQueue _enqueueTransferTaskInActiveQueue:]
  -[CPLEngineResourceDownloadQueue _unscheduleBackgroundDownloads]
  -[CPLEngineResourceDownloadQueue cloudResourceForLocalResource:cloudRecord:shouldNotTrustCaches:allowUnsafeClientCache:transportScope:error:]
  -[CPLEngineResourceDownloadQueue _resourceStorageCopyTaskForResource:taskIdentifier:cloudResource:ofRecord:didStartHandler:progressHandler:completionHandler:]
  -[CPLEngineResourceDownloadQueue countOfQueuedDownloadTasks]
  -[CPLEngineResourceDownloadQueue _dispatchTransportTasksIfNecessary]
  -[CPLEngineResourceDownloadQueue removeBackgroundDownloadTaskForResource:error:]
  -[CPLEngineResourceDownloadQueue _realDownloadTaskForLocalResource:taskIdentifier:cloudResource:ofRecord:didStartHandler:progressHandler:completionHandler:]
  -[CPLEngineResourceDownloadQueue dequeueNextBackgroundDownloadTasksForResourceType:andIntent:maximumSize:maximumCount:error:]
  -[CPLEngineResourceDownloadQueue markBackgroundDownloadTaskForResourceAsSuceeded:error:]
  -[CPLEngineResourceDownloadQueue _activeQueueForTransferTask:]
  -[CPLEngineResourceDownloadQueue _downloadTaskForLocalResource:clientBundleID:options:proposedTaskIdentifier:didStartHandler:progressHandler:completionHandler:]
  -[CPLEngineResourceDownloadQueue status]
  -[CPLEngineResourceDownloadQueue initWithEngineStore:name:]
  -[CPLEngineResourceDownloadQueue _requestBackgroundDownloads]
  -[CPLEngineResourceDownloadQueue _scheduleBackgroundDownloadsIfNecessary]
  -[CPLEngineResourceDownloadQueue _launchTransportTaskForQueue:]
  -[CPLEngineResourceDownloadQueue enqueueBackgroundDownloadTaskForResource:intent:downloading:error:]
  -[CPLEngineResourceDownloadQueue reenqueueBackgroundDownloadTaskForResource:bumpRetryCount:didDiscard:error:]
  -[CPLEngineResourceDownloadQueue enumeratorForDownloadedResources]


CPLAccountFlags : PBCodable <NSCopying>
 @property  BOOL hasDefaultHEVC
 @property  BOOL defaultHEVC
 @property  BOOL hasReason
 @property  int reason
 @property  BOOL hasVersion
 @property  long long version

  // instance methods
  -[CPLAccountFlags setHasReason:]
  -[CPLAccountFlags setDefaultHEVC:]
  -[CPLAccountFlags mergeFrom:]
  -[CPLAccountFlags hasReason]
  -[CPLAccountFlags hasVersion]
  -[CPLAccountFlags reasonAsString:]
  -[CPLAccountFlags StringAsReason:]
  -[CPLAccountFlags defaultHEVC]
  -[CPLAccountFlags dictionaryRepresentation]
  -[CPLAccountFlags setHasVersion:]
  -[CPLAccountFlags writeTo:]
  -[CPLAccountFlags hasDefaultHEVC]
  -[CPLAccountFlags setVersion:]
  -[CPLAccountFlags isEqual:]
  -[CPLAccountFlags copyTo:]
  -[CPLAccountFlags setHasDefaultHEVC:]
  -[CPLAccountFlags readFrom:]
  -[CPLAccountFlags reason]
  -[CPLAccountFlags version]
  -[CPLAccountFlags setReason:]
  -[CPLAccountFlags copyWithZone:]


CPLEngineScopeStorage : CPLEngineStorage <CPLAbstractObject>
 @property  BOOL hasStagedSyncAnchors
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineScopeStorage scopeType]
  -[CPLEngineScopeStorage openWithError:]
  -[CPLEngineScopeStorage resetLocalSyncStateForScope:error:]
  -[CPLEngineScopeStorage remainingClassesForInitialQueryForScope:]
  -[CPLEngineScopeStorage storeScopeListSyncAnchor:error:]
  -[CPLEngineScopeStorage shouldAutoactivateScopeWithIdentifier:scopeType:]
  -[CPLEngineScopeStorage hasStagedSyncAnchors]
  -[CPLEngineScopeStorage storeEstimatedSize:estimatedAssetCount:forScope:error:]
  -[CPLEngineScopeStorage transientSyncAnchorForScope:]
  -[CPLEngineScopeStorage disablePrimaryScopeWithError:]
  -[CPLEngineScopeStorage hasStagedSyncAnchorForScope:]
  -[CPLEngineScopeStorage setupResetSyncTransportGroupForScope:error:]
  -[CPLEngineScopeStorage valueForFlag:forScope:]
  -[CPLEngineScopeStorage scopeListSyncAnchor]
  -[CPLEngineScopeStorage transportScopeForScope:]
  -[CPLEngineScopeStorage resetLocalRecordsForScopeWithIdentifier:error:]
  -[CPLEngineScopeStorage _checkSyncManagerPriorityBoost]
  -[CPLEngineScopeStorage clearTransportGroupsForScope:error:]
  -[CPLEngineScopeStorage setTransportScope:forScope:error:]
  -[CPLEngineScopeStorage hasFinishedInitialSyncForScope:]
  -[CPLEngineScopeStorage scopeChangesNeedingToBePulledByClientWithMaximumCount:]
  -[CPLEngineScopeStorage setupAnchorResetTransportGroupForScope:error:]
  -[CPLEngineScopeStorage setScopeNeedsToBePulledByClient:error:]
  -[CPLEngineScopeStorage doScopesNeedMetadataSync:]
  -[CPLEngineScopeStorage _cacheScope:]
  -[CPLEngineScopeStorage resetInitialSyncAnchorForScope:error:]
  -[CPLEngineScopeStorage doesScopeNeedToPushChangesToTransport:]
  -[CPLEngineScopeStorage storeScopeChange:forScope:error:]
  -[CPLEngineScopeStorage filterForIncludedScopeIdentifiers:]
  -[CPLEngineScopeStorage .cxx_destruct]
  -[CPLEngineScopeStorage hasScopesNeedingToPushChangesToTransport]
  -[CPLEngineScopeStorage updateScopeWithChange:error:]
  -[CPLEngineScopeStorage hasFinishedAFullSyncForScope:]
  -[CPLEngineScopeStorage hasScopeFetchedInitialSyncAnchor:]
  -[CPLEngineScopeStorage updateInitialSyncTransportGroupEstimatedSize:assetCount:forScope:error:]
  -[CPLEngineScopeStorage scopedIdentifierForCloudScopedIdentifier:]
  -[CPLEngineScopeStorage setCloudScopeIndexOnChange:]
  -[CPLEngineScopeStorage validLocalScopeIndexes]
  -[CPLEngineScopeStorage setLocalScopeIndexOnChange:]
  -[CPLEngineScopeStorage primaryScope]
  -[CPLEngineScopeStorage resetCloudRecordsForScopeWithIdentifier:error:]
  -[CPLEngineScopeStorage supportedFeatureVersionIsMostRecentForScope:]
  -[CPLEngineScopeStorage scopeWithIdentifier:]
  -[CPLEngineScopeStorage discardStagedSyncAnchorWithScopeFilter:error:]
  -[CPLEngineScopeStorage allScopeIdentifiersIncludeInactive:]
  -[CPLEngineScopeStorage _forceClientToPullScopeIfNecessary:error:]
  -[CPLEngineScopeStorage scopeWithCloudScopeIndex:]
  -[CPLEngineScopeStorage _resetCompleteSyncStateForScope:error:]
  -[CPLEngineScopeStorage forceIncludeScopeIdentifierInMingling:]
  -[CPLEngineScopeStorage lastDateOfCompletedPullFromTransportForScope:]
  -[CPLEngineScopeStorage downloadTransportGroupForScope:]
  -[CPLEngineScopeStorage setScopeHasChangesToPushToTransport:error:]
  -[CPLEngineScopeStorage _forceSyncManagerPriorityBoost]
  -[CPLEngineScopeStorage supportedFeatureVersionInLastSyncForScope:]
  -[CPLEngineScopeStorage syncAnchorForScope:]
  -[CPLEngineScopeStorage uploadTransportGroupForScope:]
  -[CPLEngineScopeStorage _createScopeFromScopeChange:error:]
  -[CPLEngineScopeStorage clientAcknowledegedScopeChanges:error:]
  -[CPLEngineScopeStorage setupInitialSyncTransportGroupsForScope:error:]
  -[CPLEngineScopeStorage doesScopeSupportToBePulledByClient:]
  -[CPLEngineScopeStorage _resetLocalSyncStateForScope:error:]
  -[CPLEngineScopeStorage storeSupportedFeatureVersionInLastSync:forScope:error:]
  -[CPLEngineScopeStorage doesScopeNeedToPullChangesFromTransport:]
  -[CPLEngineScopeStorage _setScopeType:forScope:error:]
  -[CPLEngineScopeStorage filterForExcludedScopeIdentifiers:]
  -[CPLEngineScopeStorage enablePrimaryScopeWithError:]
  -[CPLEngineScopeStorage estimatedAssetCountForScope:]
  -[CPLEngineScopeStorage hasScopesNeedingToUpdateTransport]
  -[CPLEngineScopeStorage forceExcludeScopeIdentifierFromMingling:]
  -[CPLEngineScopeStorage disabledDateForScope:]
  -[CPLEngineScopeStorage resetCompleteSyncStateForScope:error:]
  -[CPLEngineScopeStorage setScope:hasCompletedTransportUpdate:error:]
  -[CPLEngineScopeStorage _handledDisabledFeaturesForScopeIfNecessary:type:error:]
  -[CPLEngineScopeStorage indexForLocalScopeIdentifier:]
  -[CPLEngineScopeStorage setDisabledDate:forScope:error:]
  -[CPLEngineScopeStorage resetSyncStateForScope:error:]
  -[CPLEngineScopeStorage scopeChangeForScope:]
  -[CPLEngineScopeStorage scopedIdentifierForLocalScopedIdentifier:]
  -[CPLEngineScopeStorage enumeratorForScopesNeedingToUpdateTransport]
  -[CPLEngineScopeStorage deleteScopeWithIdentifier:error:]
  -[CPLEngineScopeStorage scopeWithLocalScopeIndex:]
  -[CPLEngineScopeStorage enumeratorForScopesNeedingUpdateFromTransport]
  -[CPLEngineScopeStorage setHasFetchedInitialSyncAnchor:forScope:error:]
  -[CPLEngineScopeStorage estimatedSizeForScope:]
  -[CPLEngineScopeStorage _scopeWithIdentifier:]
  -[CPLEngineScopeStorage deactivateScope:error:]
  -[CPLEngineScopeStorage transportUpdateTaskForScope:]
  -[CPLEngineScopeStorage setSyncAnchor:forScope:error:]
  -[CPLEngineScopeStorage filterOnScopesAllowingMingling]
  -[CPLEngineScopeStorage setPullFromTransportExpirationInterval:scope:error:]
  -[CPLEngineScopeStorage setDidDropSomeRecordsForScope:error:]
  -[CPLEngineScopeStorage setDeleteDate:forScope:error:]
  -[CPLEngineScopeStorage enumeratorForScopesNeedingToPullChangesFromTransport]
  -[CPLEngineScopeStorage pushToTransportTaskForScope:]
  -[CPLEngineScopeStorage _resetGlobalsForMainScope]
  -[CPLEngineScopeStorage lastDateOfClearedPushRepositoryForScope:]
  -[CPLEngineScopeStorage resetSyncAnchorForScope:error:]
  -[CPLEngineScopeStorage includeScopeIdentifierInMingling:]
  -[CPLEngineScopeStorage disableInitialQueriesForScope:error:]
  -[CPLEngineScopeStorage storeTransientSyncAnchor:forScope:error:]
  -[CPLEngineScopeStorage upgradeScopesWithNewLibraryOptions:error:]
  -[CPLEngineScopeStorage indexForCloudScopeIdentifier:]
  -[CPLEngineScopeStorage classOfRecordsForInitialQueryForScope:]
  -[CPLEngineScopeStorage status]
  -[CPLEngineScopeStorage setScopeHasChangesToPullFromTransport:error:]
  -[CPLEngineScopeStorage resetCompleteSyncStateIncludingIDMappingForScope:error:]
  -[CPLEngineScopeStorage initWithEngineStore:name:]
  -[CPLEngineScopeStorage stableScopeIndexForScopeIdentifier:]
  -[CPLEngineScopeStorage scopeIdentifierForLocalScopeIndex:]
  -[CPLEngineScopeStorage _scopeWithStableIndex:]
  -[CPLEngineScopeStorage hasScopesNeedingToPushHighPriorityChangesToTransport]
  -[CPLEngineScopeStorage doesScopeAllowCourtesyMingling:]
  -[CPLEngineScopeStorage discardStagedSyncAnchorForScope:error:]
  -[CPLEngineScopeStorage doesScopeNeedToBePulledByClient:]
  -[CPLEngineScopeStorage validCloudScopeIndexes]
  -[CPLEngineScopeStorage _indexOfCurrentClassForInitialQueriesForScope:]
  -[CPLEngineScopeStorage _scopeChangeToBePulledByClientForScope:]
  -[CPLEngineScopeStorage setAllScopesHasChangesToPullFromTransportWithError:]
  -[CPLEngineScopeStorage scopeIdentifierForCloudScopeIndex:]
  -[CPLEngineScopeStorage updateFlags:forScope:error:]
  -[CPLEngineScopeStorage resetStableRecordsForScopeWithIdentifier:error:]
  -[CPLEngineScopeStorage setValue:forFlag:forScope:error:]
  -[CPLEngineScopeStorage setScopeNeedsUpdateFromTransport:error:]
  -[CPLEngineScopeStorage pullFromTransportTaskForScope:]
  -[CPLEngineScopeStorage enumeratorForScopesIncludeInactive:]
  -[CPLEngineScopeStorage excludeScopeIdentifierFromMingling:]
  -[CPLEngineScopeStorage flagsForScope:]
  -[CPLEngineScopeStorage statusDictionaryForScope:]
  -[CPLEngineScopeStorage writeTransactionDidFail]
  -[CPLEngineScopeStorage createScopeWithIdentifier:scopeType:flags:transportScope:error:]
  -[CPLEngineScopeStorage setScopeNeedsToUpdateTransport:error:]
  -[CPLEngineScopeStorage markInitialQueryIsDoneForRecordsOfClass:forScope:error:]
  -[CPLEngineScopeStorage doesScopeNeedToUpdateTransport:]
  -[CPLEngineScopeStorage setScope:hasCompletedPullFromTransportTask:error:]
  -[CPLEngineScopeStorage storeLastDateOfClearedPushRepository:forScope:error:]
  -[CPLEngineScopeStorage initialSyncAnchorForScope:]
  -[CPLEngineScopeStorage setInitialSyncAnchor:forScope:error:]
  -[CPLEngineScopeStorage setScope:hasCompletedPushToTransportTask:error:]
  -[CPLEngineScopeStorage commitSyncAnchorForScope:error:]
  -[CPLEngineScopeStorage enumeratorForScopesNeedingToPushChangesToTransport]
  -[CPLEngineScopeStorage writeTransactionDidSucceed]
  -[CPLEngineScopeStorage didDropSomeRecordsForScope:]
  -[CPLEngineScopeStorage enumeratorForScopesNeedingToPushHighPriorityChangesToTransport]
  -[CPLEngineScopeStorage hasScopesNeedingToPullChangesFromTransport]
  -[CPLEngineScopeStorage _clearScopeCache]
  -[CPLEngineScopeStorage deleteDateForScope:]
  -[CPLEngineScopeStorage activateScope:error:]


_CPLEngineScopeCache : NSObject
  // instance methods
  -[_CPLEngineScopeCache validCloudIndexes]
  -[_CPLEngineScopeCache .cxx_destruct]
  -[_CPLEngineScopeCache scopeWithIdentifier:]
  -[_CPLEngineScopeCache validLocalIndexes]
  -[_CPLEngineScopeCache init]
  -[_CPLEngineScopeCache cacheValidCloudIndexes:]
  -[_CPLEngineScopeCache scopeWithStableIndex:]
  -[_CPLEngineScopeCache cacheScope:forScopeStorage:]
  -[_CPLEngineScopeCache scopeWithLocalIndex:]
  -[_CPLEngineScopeCache cacheValidLocalIndexes:]
  -[_CPLEngineScopeCache scopeWithCloudIndex:]


CPLScopeFilter : NSObject
 @property  NSSet *includedScopeIdentifiers
 @property  NSSet *excludedScopeIdentifiers
 @property  NSString *simpleDescription

  // instance methods
  -[CPLScopeFilter .cxx_destruct]
  -[CPLScopeFilter initWithIncludedScopeIdentifiers:]
  -[CPLScopeFilter simpleDescription]
  -[CPLScopeFilter excludedScopeIdentifiers]
  -[CPLScopeFilter initWithExcludedScopeIdentifiers:]
  -[CPLScopeFilter includedScopeIdentifiers]
  -[CPLScopeFilter _setOfScopeIdentifiersFromEnumeration:]
  -[CPLScopeFilter filterOnScopeIdentifier:]


CPLPullChangeSession : CPLChangeSession <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLPullChangeSession shortDescription]

  // instance methods
  -[CPLPullChangeSession acknowledgeChangeBatch:withCompletionHandler:]
  -[CPLPullChangeSession getChangeBatchWithCompletionHandler:]


CPLEngineScopeCleanupTasks : CPLEngineStorage <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineScopeCleanupTasks scopeTypeDescriptionForScopeType:]

  // instance methods
  -[CPLEngineScopeCleanupTasks scopeType]
  -[CPLEngineScopeCleanupTasks addCleanupTaskForScopeWithIndex:scopeIdentifier:scopeType:error:]
  -[CPLEngineScopeCleanupTasks .cxx_destruct]
  -[CPLEngineScopeCleanupTasks cleanupStepHasMore:error:]
  -[CPLEngineScopeCleanupTasks hasCleanupTasks]
  -[CPLEngineScopeCleanupTasks writeTransactionDidFail]
  -[CPLEngineScopeCleanupTasks writeTransactionDidSucceed]


CPLEngineChangePipe : CPLEngineStorage <CPLAbstractObject>
 @property  unsigned long countOfQueuedBatches
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineChangePipe scopeType]
  -[CPLEngineChangePipe isEmpty]
  -[CPLEngineChangePipe deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineChangePipe hasSomeChangeWithScopeFilter:]
  -[CPLEngineChangePipe countOfQueuedBatches]
  -[CPLEngineChangePipe hasSomeChangeInScopesWithIdentifiers:]
  -[CPLEngineChangePipe nextBatch]
  -[CPLEngineChangePipe deleteAllChangesWithScopeFilter:error:]
  -[CPLEngineChangePipe deleteAllChangeBatchesWithError:]
  -[CPLEngineChangePipe allChangeBatches]
  -[CPLEngineChangePipe hasSomeChangeWithScopedIdentifier:]
  -[CPLEngineChangePipe appendChangeBatch:error:]
  -[CPLEngineChangePipe popAllChangeBatchesWithError:]
  -[CPLEngineChangePipe popNextBatchWithError:]
  -[CPLEngineChangePipe popChangeBatch:error:]
  -[CPLEngineChangePipe compactChangeBatchesWithError:]
  -[CPLEngineChangePipe hasQueuedBatches]


CPLEngineTransientRepository : CPLEngineStorage <CPLAbstractObject>
 @property  unsigned long maximumCountOfRecordsInBatches
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineTransientRepository orderedClassesForDelete]
  +[CPLEngineTransientRepository orderedClassesForChangesForLargeSync]
  +[CPLEngineTransientRepository orderedClassesForChanges]

  // instance methods
  -[CPLEngineTransientRepository scopeType]
  -[CPLEngineTransientRepository openWithError:]
  -[CPLEngineTransientRepository appendBatch:alreadyMingled:error:]
  -[CPLEngineTransientRepository hasRecordWithScopedIdentifier:]
  -[CPLEngineTransientRepository countOfUnmingledRecords]
  -[CPLEngineTransientRepository deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineTransientRepository .cxx_destruct]
  -[CPLEngineTransientRepository prepareForMinglingWithScopeFilter:error:]
  -[CPLEngineTransientRepository setMaximumCountOfRecordsInBatches:]
  -[CPLEngineTransientRepository _popChangeBatchOfDeletedRecords:maximumCount:error:]
  -[CPLEngineTransientRepository resetTransientRepositoryForScopeWithIdentifier:error:]
  -[CPLEngineTransientRepository changeWithScopedIdentifier:]
  -[CPLEngineTransientRepository _popChangeBatchOfChangedRecords:maximumCount:stop:error:]
  -[CPLEngineTransientRepository hasUnmingledRecordsForScopeWithIdentifier:]
  -[CPLEngineTransientRepository initWithEngineStore:name:]
  -[CPLEngineTransientRepository resetMingledRecordsForScopeWithIdentifier:error:]
  -[CPLEngineTransientRepository shouldKeepDeleteChange:forRecordWithScopedIdentifier:]
  -[CPLEngineTransientRepository hasUnmingledRecordsWithScopeFilter:]
  -[CPLEngineTransientRepository maximumCountOfRecordsInBatches]
  -[CPLEngineTransientRepository resetMingledRecordsWithScopeFilter:error:]
  -[CPLEngineTransientRepository hasMingledRecordsForScopeWithIdentifier:]
  -[CPLEngineTransientRepository cachedRecordWithScopedIdentifier:]
  -[CPLEngineTransientRepository popChangeBatch:error:]
  -[CPLEngineTransientRepository _appendBatchToStorage:alreadyMingled:error:]
  -[CPLEngineTransientRepository deleteMingledRecordsForScopeWithIdentifier:error:]
  -[CPLEngineTransientRepository countOfAssetChanges]


CPLEngineResourceDownloadTask : CPLResourceTransferTask
 @property  CPLResource *cloudResource
 @property  CPLPlaceholderRecord *cloudRecord
 @property  NSData *transportScope
 @property  unsigned long taskIdentifierForQueue
 @property  NSString *clientBundleID
 @property  BOOL cancelledByEngine
 @property  <CPLEngineTransportResourcesDownloadTask> *transportTask
 @property  @? launchHandler
 @property  @? cancelHandler
 @property  @? didStartHandler
 @property  @? progressHandler
 @property  @? completionHandler
 @property  NSString *transportIdentifier
 @property  BOOL willGenerateReport

  // class methods
  +[CPLEngineResourceDownloadTask initialize]
  +[CPLEngineResourceDownloadTask maximumResourceDownloadSizeForResourceType:]

  // instance methods
  -[CPLEngineResourceDownloadTask transportScope]
  -[CPLEngineResourceDownloadTask cloudRecord]
  -[CPLEngineResourceDownloadTask transportIdentifier]
  -[CPLEngineResourceDownloadTask noteTaskHasBeenPreempted]
  -[CPLEngineResourceDownloadTask .cxx_destruct]
  -[CPLEngineResourceDownloadTask associateCloudResource:ofRecord:]
  -[CPLEngineResourceDownloadTask clientBundleID]
  -[CPLEngineResourceDownloadTask noteActiveQueuesStatusAtEnqueingTime:]
  -[CPLEngineResourceDownloadTask launch]
  -[CPLEngineResourceDownloadTask setTaskIdentifierForQueue:]
  -[CPLEngineResourceDownloadTask setTransportScope:]
  -[CPLEngineResourceDownloadTask progressHandler]
  -[CPLEngineResourceDownloadTask launchHandler]
  -[CPLEngineResourceDownloadTask didStartHandler]
  -[CPLEngineResourceDownloadTask cancelHandler]
  -[CPLEngineResourceDownloadTask initWithResource:taskIdentifier:launchHandler:cancelHandler:didStartHandler:progressHandler:completionHandler:]
  -[CPLEngineResourceDownloadTask isCancelledByEngine]
  -[CPLEngineResourceDownloadTask cancelTask]
  -[CPLEngineResourceDownloadTask setTransportTask:]
  -[CPLEngineResourceDownloadTask setCancelledByEngine:]
  -[CPLEngineResourceDownloadTask completionHandler]
  -[CPLEngineResourceDownloadTask noteStateDidProgress:]
  -[CPLEngineResourceDownloadTask transportTask]
  -[CPLEngineResourceDownloadTask cloudResource]
  -[CPLEngineResourceDownloadTask taskIdentifierForQueue]
  -[CPLEngineResourceDownloadTask setTransportIdentifier:]
  -[CPLEngineResourceDownloadTask willGenerateReport]
  -[CPLEngineResourceDownloadTask setClientBundleID:]


_CPLResourcesMutableArray : NSObject
  // instance methods
  -[_CPLResourcesMutableArray allResources]
  -[_CPLResourcesMutableArray addResource:]
  -[_CPLResourcesMutableArray reallyUpdatedResources]
  -[_CPLResourcesMutableArray .cxx_destruct]
  -[_CPLResourcesMutableArray initWithResources:]


CPLEngineDerivativesCache : NSObject
 @property  NSURL *cacheURL
 @property  Class derivativeGeneratorClass

  // instance methods
  -[CPLEngineDerivativesCache cacheURL]
  -[CPLEngineDerivativesCache derivativeGeneratorClass]
  -[CPLEngineDerivativesCache .cxx_destruct]
  -[CPLEngineDerivativesCache _checkResource:name:error:]
  -[CPLEngineDerivativesCache generateDerivativesForChange:derivativesFilter:completionHandler:]
  -[CPLEngineDerivativesCache cachedResourcesForReferenceResource:adjustment:includePosterFrame:]
  -[CPLEngineDerivativesCache tempFolderURLForGeneratedResourcesWithReferenceResource:adjustment:includePosterFrame:]
  -[CPLEngineDerivativesCache _cacheKeyForReferenceResource:adjustments:includePosterFrame:]
  -[CPLEngineDerivativesCache _checkGeneratedResources:error:]
  -[CPLEngineDerivativesCache _tempFolderURLForGeneratedResourcesWithReferenceResource:adjustment:includePosterFrame:]
  -[CPLEngineDerivativesCache _finalFolderURLForGeneratedResourcesWithReferenceResource:adjustment:includePosterFrame:]
  -[CPLEngineDerivativesCache _updateChange:fromOldChange:withResources:excludeImages:]
  -[CPLEngineDerivativesCache initWithCacheURL:]
  -[CPLEngineDerivativesCache setDerivativeGeneratorClass:]
  -[CPLEngineDerivativesCache _createCacheFolderIfNecessary]
  -[CPLEngineDerivativesCache _isUnsupportedFormatError:]
  -[CPLEngineDerivativesCache discardCache]
  -[CPLEngineDerivativesCache noteGeneratedResouces:haveBeenGeneratedForReferenceResource:adjustment:includePosterFrame:]
  -[CPLEngineDerivativesCache _folderNameForReferenceResource:adjustment:includePosterFrame:]


CPLDropDerivativesRecipe : NSObject <NSSecureCoding>
 @property  unsigned long sourceResourceType
 @property  unsigned long changeType
 @property  NSString *uti
 @property  NSArray *derivativeTypes
 @property  NSDictionary *plistDescription

  // class methods
  +[CPLDropDerivativesRecipe supportsSecureCoding]
  +[CPLDropDerivativesRecipe shortDescriptionForResourceChangeRecordType:]
  +[CPLDropDerivativesRecipe changeRecordTypeFromShortDecription:]
  +[CPLDropDerivativesRecipe archiveArrayOfCPLDropDerivativeRecipes:]
  +[CPLDropDerivativesRecipe unarchiveArrayOfCPLDropDerivativeRecipesFrom:]

  // instance methods
  -[CPLDropDerivativesRecipe changeType]
  -[CPLDropDerivativesRecipe redactedDescription]
  -[CPLDropDerivativesRecipe initWithCoder:]
  -[CPLDropDerivativesRecipe .cxx_destruct]
  -[CPLDropDerivativesRecipe plistDescription]
  -[CPLDropDerivativesRecipe uti]
  -[CPLDropDerivativesRecipe encodeWithCoder:]
  -[CPLDropDerivativesRecipe sourceResourceType]
  -[CPLDropDerivativesRecipe derivativeTypes]
  -[CPLDropDerivativesRecipe initWithSourceResourceType:uti:changeType:droppingDerivativeTypes:]


CPLDerivativesFilter : NSObject <NSSecureCoding>
 @property  NSArray *plistDescription

  // class methods
  +[CPLDerivativesFilter supportsSecureCoding]

  // instance methods
  -[CPLDerivativesFilter shouldDropDerivativeWithDropDerivativeRecipe:]
  -[CPLDerivativesFilter redactedDescription]
  -[CPLDerivativesFilter initWithCoder:]
  -[CPLDerivativesFilter isEmpty]
  -[CPLDerivativesFilter _isValidDropDerivativeRecipeWithUTI:sourceType:derivativeTypes:changeType:]
  -[CPLDerivativesFilter .cxx_destruct]
  -[CPLDerivativesFilter plistDescription]
  -[CPLDerivativesFilter _descriptionForStoredResponse:recordType:]
  -[CPLDerivativesFilter init]
  -[CPLDerivativesFilter enumerateDropDerivativeRulesWithBlock:]
  -[CPLDerivativesFilter isEqual:]
  -[CPLDerivativesFilter reset]
  -[CPLDerivativesFilter _enumerateDropDerivativeRules:ofType:withBlock:]
  -[CPLDerivativesFilter _getTargetDictionaryForChangeType:]
  -[CPLDerivativesFilter mightDropSomeDerivativesForSourceType:forChangeType:]
  -[CPLDerivativesFilter addServerDropDerivativesRecipes:]
  -[CPLDerivativesFilter encodeWithCoder:]
  -[CPLDerivativesFilter addServerDropDerivativesRecipe:]


CPLConfiguration : NSObject
  // class methods
  +[CPLConfiguration disableConfigurationFetching]

  // instance methods
  -[CPLConfiguration refetchFromDisk]
  -[CPLConfiguration initWithClientLibraryBaseURL:]
  -[CPLConfiguration check]
  -[CPLConfiguration _save]
  -[CPLConfiguration _load]
  -[CPLConfiguration objectForKeyedSubscript:]
  -[CPLConfiguration .cxx_destruct]
  -[CPLConfiguration _setContents:]
  -[CPLConfiguration _updateInterval]
  -[CPLConfiguration valueForKey:]


CPLErrors : NSObject
  // class methods
  +[CPLErrors versionMismatchError]
  +[CPLErrors unsafeResources:withError:resourceStorage:]
  +[CPLErrors invalidScopeErrorWithScopeIdentifier:]
  +[CPLErrors errorsForIdentifiers:error:]
  +[CPLErrors cplErrorWithCode:description:]
  +[CPLErrors invalidDaemonErrorWithConnectionError:]
  +[CPLErrors incorrectParametersErrorForParameter:]
  +[CPLErrors sessionHasBeenDeferredError]
  +[CPLErrors missingError]
  +[CPLErrors invalidClientCacheErrorWithReason:]
  +[CPLErrors incorrectMachineStateErrorWithReason:]
  +[CPLErrors cplErrorWithCode:description:arguments:]
  +[CPLErrors invalidCloudCacheErrorWithReason:]
  +[CPLErrors cplErrorWithCode:underlyingError:description:]
  +[CPLErrors underlyingErrorWithReason:]
  +[CPLErrors cplErrorWithCode:underlyingError:description:arguments:]
  +[CPLErrors unknownPrimaryScope]
  +[CPLErrors unknownError]
  +[CPLErrors cplErrorWithCode:underlyingError:userInfo:description:arguments:]
  +[CPLErrors posixErrorForURL:]
  +[CPLErrors readOnlyError]
  +[CPLErrors cplErrorWithCode:underlyingError:userInfo:description:]
  +[CPLErrors libraryClosedError]
  +[CPLErrors notImplementedError]
  +[CPLErrors operationCancelledError]
  +[CPLErrors invalidScopeErrorWithScopeIndex:]
  +[CPLErrors transportErrorFromTransportError:]
  +[CPLErrors invalidScopeErrorWithScopedIdentifier:]
  +[CPLErrors unsafeResources:withError:realPrune:resourceStorage:]


CPLShare : NSObject <NSSecureCoding, NSCopying>
 @property  long long publicPermission
 @property  NSURL *URL
 @property  NSArray *participants
 @property  NSDate *creationDate
 @property  CPLShareParticipant *owner
 @property  CPLShareParticipant *currentUserParticipant
 @property  BOOL ownerIsCurrentUser

  // class methods
  +[CPLShare initialize]
  +[CPLShare supportsSecureCoding]

  // instance methods
  -[CPLShare participants]
  -[CPLShare setParticipants:]
  -[CPLShare redactedDescription]
  -[CPLShare initWithCoder:]
  -[CPLShare setCreationDate:]
  -[CPLShare publicPermission]
  -[CPLShare setURL:]
  -[CPLShare .cxx_destruct]
  -[CPLShare currentUserParticipant]
  -[CPLShare init]
  -[CPLShare isEqual:]
  -[CPLShare owner]
  -[CPLShare URL]
  -[CPLShare creationDate]
  -[CPLShare copyWithZone:]
  -[CPLShare encodeWithCoder:]
  -[CPLShare setPublicPermission:]
  -[CPLShare ownerIsCurrentUser]


CPLRampingRequestResource : PBCodable <NSCopying>
 @property  BOOL hasResource
 @property  NSString *resource
 @property  BOOL hasNumRequested
 @property  long long numRequested

  // instance methods
  -[CPLRampingRequestResource mergeFrom:]
  -[CPLRampingRequestResource setResource:]
  -[CPLRampingRequestResource .cxx_destruct]
  -[CPLRampingRequestResource dictionaryRepresentation]
  -[CPLRampingRequestResource resource]
  -[CPLRampingRequestResource writeTo:]
  -[CPLRampingRequestResource isEqual:]
  -[CPLRampingRequestResource copyTo:]
  -[CPLRampingRequestResource readFrom:]
  -[CPLRampingRequestResource copyWithZone:]
  -[CPLRampingRequestResource hasResource]
  -[CPLRampingRequestResource setNumRequested:]
  -[CPLRampingRequestResource setHasNumRequested:]
  -[CPLRampingRequestResource hasNumRequested]
  -[CPLRampingRequestResource numRequested]


CPLScopedIdentifier : NSObject <NSCopying, NSSecureCoding>
 @property  long long scopeIndex
 @property  NSString *scopeIdentifier
 @property  NSString *identifier

  // class methods
  +[CPLScopedIdentifier scopedIdentifiersFromDictionaryOfUnknownIdentifiers:]
  +[CPLScopedIdentifier supportsSecureCoding]
  +[CPLScopedIdentifier scopedIdentifierWithString:includeScopeIndex:defaultScopeIdentifier:]
  +[CPLScopedIdentifier scopedIdentifiersFromSetOfUnknownIdentifiers:]
  +[CPLScopedIdentifier scopedIdentifiersFromArrayOfUnknownIdentifiers:]
  +[CPLScopedIdentifier unscopedIdentifiersFromArrayOfScopedIdentifiers:]
  +[CPLScopedIdentifier unscopedIdentifiersFromDictionaryOfScopedIdentifiers:]
  +[CPLScopedIdentifier scopedIdentifierWithString:includeScopeIndex:]
  +[CPLScopedIdentifier unscopedIdentifiersFromSetOfScopedIdentifiers:]
  +[CPLScopedIdentifier descriptionWithScopeIdentifier:identifier:]

  // instance methods
  -[CPLScopedIdentifier redactedDescription]
  -[CPLScopedIdentifier initWithCoder:]
  -[CPLScopedIdentifier initRelativeToScopedIdentifier:identifier:]
  -[CPLScopedIdentifier .cxx_destruct]
  -[CPLScopedIdentifier initWithCPLArchiver:]
  -[CPLScopedIdentifier scopeIdentifier]
  -[CPLScopedIdentifier cplSpecialIsEqual:]
  -[CPLScopedIdentifier setScopeIndex:]
  -[CPLScopedIdentifier plistArchiveWithCPLArchiver:]
  -[CPLScopedIdentifier scopeIndex]
  -[CPLScopedIdentifier isEqual:]
  -[CPLScopedIdentifier identifier]
  -[CPLScopedIdentifier descriptionWithNoScopeIndex]
  -[CPLScopedIdentifier initInMainScopeWithIdentifier:]
  -[CPLScopedIdentifier cplSpecialHash]
  -[CPLScopedIdentifier safeFilename]
  -[CPLScopedIdentifier copyWithZone:]
  -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]
  -[CPLScopedIdentifier initWithScopeIdentifier:identifier:scopeIndex:]
  -[CPLScopedIdentifier isInMainScope]
  -[CPLScopedIdentifier encodeWithCoder:]


CPLRecordStatus : NSObject <NSSecureCoding>
 @property  unsigned long generation
 @property  BOOL unknown
 @property  BOOL quarantined
 @property  BOOL resetting
 @property  BOOL uploaded
 @property  BOOL waitingForUpload
 @property  BOOL uploading
 @property  BOOL waitingForUpdate
 @property  BOOL updating
 @property  BOOL confirmed
 @property  CPLRecordChange *record
 @property  NSString *statusDescription

  // class methods
  +[CPLRecordStatus supportsSecureCoding]

  // instance methods
  -[CPLRecordStatus setUpdating:]
  -[CPLRecordStatus setConfirmed:]
  -[CPLRecordStatus setUploaded:]
  -[CPLRecordStatus redactedDescription]
  -[CPLRecordStatus isResetting]
  -[CPLRecordStatus initWithCoder:]
  -[CPLRecordStatus record]
  -[CPLRecordStatus .cxx_destruct]
  -[CPLRecordStatus generation]
  -[CPLRecordStatus setUnknown:]
  -[CPLRecordStatus statusDescription]
  -[CPLRecordStatus isUnknown]
  -[CPLRecordStatus isQuarantined]
  -[CPLRecordStatus isUpdating]
  -[CPLRecordStatus isConfirmed]
  -[CPLRecordStatus setUploading:]
  -[CPLRecordStatus isUploaded]
  -[CPLRecordStatus encodeWithCoder:]
  -[CPLRecordStatus isUploading]
  -[CPLRecordStatus isWaitingForUpload]
  -[CPLRecordStatus isWaitingForUpdate]
  -[CPLRecordStatus setQuarantined:]
  -[CPLRecordStatus setResetting:]
  -[CPLRecordStatus setWaitingForUpload:]
  -[CPLRecordStatus setWaitingForUpdate:]
  -[CPLRecordStatus initWithRecord:generation:]


CPLSimpleMerger : NSObject
  // instance methods
  -[CPLSimpleMerger .cxx_destruct]
  -[CPLSimpleMerger mergeConflictsWithError:]
  -[CPLSimpleMerger initWithMergeBlock:]


CPLSimpleMergeHelper : NSObject
 @property  CPLEngineStore *store

  // class methods
  +[CPLSimpleMergeHelper _mergerWithConflictsForStore:conflictingScopeIdentifiers:]
  +[CPLSimpleMergeHelper _mergerWithNoConflictsForStore:]

  // instance methods
  -[CPLSimpleMergeHelper .cxx_destruct]
  -[CPLSimpleMergeHelper store]
  -[CPLSimpleMergeHelper initWithEngineStore:]
  -[CPLSimpleMergeHelper mergerForBatch:error:]
  -[CPLSimpleMergeHelper _changeCanConflict:]


CPLActiveDownloadQueue : NSObject
 @property  NSString *name
 @property  unsigned long type
 @property  BOOL FIFOQueue
 @property  unsigned long maximumBatchSize
 @property  long long coalescingInterval
 @property  @? groupConstructor
 @property  BOOL isHighPriority
 @property  unsigned long countOfTransferTasks
 @property  NSArray *allTransferTasks
 @property  unsigned long maximumConcurrentTransportTasks
 @property  unsigned long countOfTransportTasks
 @property  unsigned long countOfTransferTasksInTransportTasks

  // instance methods
  -[CPLActiveDownloadQueue name]
  -[CPLActiveDownloadQueue maximumBatchSize]
  -[CPLActiveDownloadQueue removeTransferTask:]
  -[CPLActiveDownloadQueue initWithName:type:FIFOQueue:maximumBatchSize:maximumConcurrentTransportTasks:coalescingInterval:groupConstructor:]
  -[CPLActiveDownloadQueue addTransportTask:]
  -[CPLActiveDownloadQueue .cxx_destruct]
  -[CPLActiveDownloadQueue maximumConcurrentTransportTasks]
  -[CPLActiveDownloadQueue addTransferTask:]
  -[CPLActiveDownloadQueue countOfTransferTasks]
  -[CPLActiveDownloadQueue dequeueBatchOfTransferTasksDequeuedSize:]
  -[CPLActiveDownloadQueue allTransferTasks]
  -[CPLActiveDownloadQueue isFIFOQueue]
  -[CPLActiveDownloadQueue removeTransportTask:]
  -[CPLActiveDownloadQueue coalescingInterval]
  -[CPLActiveDownloadQueue status]
  -[CPLActiveDownloadQueue removeAllTransferTasks]
  -[CPLActiveDownloadQueue isHighPriority]
  -[CPLActiveDownloadQueue type]
  -[CPLActiveDownloadQueue countOfTransferTasksInTransportTasks]
  -[CPLActiveDownloadQueue countOfTransportTasks]
  -[CPLActiveDownloadQueue dequeueLastTransportTask]
  -[CPLActiveDownloadQueue groupConstructor]


CPLEngineRemappedDeletes : CPLEngineStorage <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineRemappedDeletes scopeType]
  -[CPLEngineRemappedDeletes deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineRemappedDeletes discardDeleteForRemappedRecordWithScopedIdentifier:]
  -[CPLEngineRemappedDeletes .cxx_destruct]
  -[CPLEngineRemappedDeletes scheduleDeleteForRemappedRecordWithScopedIdentifier:realScopedIdentifier:asap:]
  -[CPLEngineRemappedDeletes _fixupRemappedDeletesAndReturnBestCloudScopedIdentifierFromRemappedScopedIdentifiers:fallback:]
  -[CPLEngineRemappedDeletes writeTransactionDidFail]
  -[CPLEngineRemappedDeletes writeTransactionDidSucceed]
  -[CPLEngineRemappedDeletes realScopedIdentifierForRemappedScopedIdentifier:]


CPLPushToTransportTask : CPLEngineMultiscopeSyncTask
 @property  BOOL highPriority

  // instance methods
  -[CPLPushToTransportTask highPriority]
  -[CPLPushToTransportTask task:didFinishWithError:]
  -[CPLPushToTransportTask taskDidFinishWithError:]
  -[CPLPushToTransportTask cancel:]
  -[CPLPushToTransportTask setHighPriority:]
  -[CPLPushToTransportTask enumerateScopesForTaskInTransaction:]
  -[CPLPushToTransportTask newScopedTaskWithScope:session:transportScope:clientCacheIdentifier:]
  -[CPLPushToTransportTask shouldSkipScopesWithMissingTransportScope]
  -[CPLPushToTransportTask taskIdentifier]


CPLPushToTransportScopeTask : CPLEngineScopedTask <CPLBeforeUploadCheckItemsProvider>
 @property  BOOL highPriority
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLPushToTransportScopeTask highPriority]
  -[CPLPushToTransportScopeTask _checkForRecordExistence]
  -[CPLPushToTransportScopeTask _updateQuotaStrategyAfterSuccessInTransaction:]
  -[CPLPushToTransportScopeTask cancel:]
  -[CPLPushToTransportScopeTask _deleteGeneratedResourcesAfterError:]
  -[CPLPushToTransportScopeTask _didStartTaskWithKey:recordCount:]
  -[CPLPushToTransportScopeTask .cxx_destruct]
  -[CPLPushToTransportScopeTask _markUploadedTasksDidFinishWithError:transaction:error:]
  -[CPLPushToTransportScopeTask _uploadBatch]
  -[CPLPushToTransportScopeTask setHighPriority:]
  -[CPLPushToTransportScopeTask _extractBatchWithTransaction:andStore:]
  -[CPLPushToTransportScopeTask _generateDerivativesForNextRecord:usingDerivativesCache:]
  -[CPLPushToTransportScopeTask _reenqueueExtractedBatchWithRejectedRecords:error:]
  -[CPLPushToTransportScopeTask willNeedToAccessScopeWithIdentifier:error:]
  -[CPLPushToTransportScopeTask _prepareUploadBatch]
  -[CPLPushToTransportScopeTask launch]
  -[CPLPushToTransportScopeTask _popNextBatchAndContinue]
  -[CPLPushToTransportScopeTask isResourceDynamic:]
  -[CPLPushToTransportScopeTask availableResourceTypesToUploadForChange:]
  -[CPLPushToTransportScopeTask willUploadCloudResource:localResource:error:]
  -[CPLPushToTransportScopeTask cancel]
  -[CPLPushToTransportScopeTask _discardUploadedExtractedBatch:error:]
  -[CPLPushToTransportScopeTask _didFinishTaskWithKey:error:cancelled:]
  -[CPLPushToTransportScopeTask _pushTaskDidFinishWithError:]
  -[CPLPushToTransportScopeTask _generateNeededDerivatives]
  -[CPLPushToTransportScopeTask _doOneIteration]
  -[CPLPushToTransportScopeTask _clearUploadBatch]
  -[CPLPushToTransportScopeTask initWithEngineLibrary:session:clientCacheIdentifier:scope:transportScope:]
  -[CPLPushToTransportScopeTask taskIdentifier]


CPLResourceIdentity : NSObject <NSSecureCoding, NSCopying>
 @property  NSURL *fileURL
 @property  NSString *fingerPrint
 @property  unsigned long fileSize
 @property  {CGSize=dd} imageDimensions
 @property  BOOL available
 @property  NSString *fileUTI

  // class methods
  +[CPLResourceIdentity isValidMMCSV2Signature:]
  +[CPLResourceIdentity allocWithZone:]
  +[CPLResourceIdentity fingerPrintForFileAtURL:typeIdentifier:error:]
  +[CPLResourceIdentity supportsSecureCoding]
  +[CPLResourceIdentity identityFromStoredIdentity:]
  +[CPLResourceIdentity storageNameForFingerPrint:fileUTI:bucket:]
  +[CPLResourceIdentity _identityImplementationClass]
  +[CPLResourceIdentity resourceIdentityImplementation]
  +[CPLResourceIdentity extensionForFileUTI:]
  +[CPLResourceIdentity alloc]
  +[CPLResourceIdentity setResourceIdentityImplementation:]
  +[CPLResourceIdentity identityForStorageName:]
  +[CPLResourceIdentity fingerPrintForData:typeIdentifier:error:]
  +[CPLResourceIdentity fingerPrintForFD:typeIdentifier:error:]
  +[CPLResourceIdentity fileUTIForExtension:]

  // instance methods
  -[CPLResourceIdentity setFileURL:]
  -[CPLResourceIdentity imageDimensions]
  -[CPLResourceIdentity fileSize]
  -[CPLResourceIdentity initWithCoder:]
  -[CPLResourceIdentity setFileSize:]
  -[CPLResourceIdentity setFingerPrint:]
  -[CPLResourceIdentity setFileUTI:]
  -[CPLResourceIdentity setAvailable:]
  -[CPLResourceIdentity fileURL]
  -[CPLResourceIdentity .cxx_destruct]
  -[CPLResourceIdentity isAvailable]
  -[CPLResourceIdentity initWithFileURL:]
  -[CPLResourceIdentity isEqual:]
  -[CPLResourceIdentity setImageDimensions:]
  -[CPLResourceIdentity fingerPrint]
  -[CPLResourceIdentity fileUTI]
  -[CPLResourceIdentity identityForStorage]
  -[CPLResourceIdentity copyWithZone:]
  -[CPLResourceIdentity encodeWithCoder:]


_CPLWeakLibraryManager : NSObject
 @property  CPLLibraryManager *weakLibraryManager

  // instance methods
  -[_CPLWeakLibraryManager weakLibraryManager]
  -[_CPLWeakLibraryManager initWithLibraryManager:]
  -[_CPLWeakLibraryManager .cxx_destruct]
  -[_CPLWeakLibraryManager setWeakLibraryManager:]


CPLLibraryManager : NSObject <CPLAbstractObject>
 @property  unsigned long state
 @property  NSString *userOverride
 @property  NSString *effectiveClientBundleIdentifier
 @property  NSURL *clientLibraryBaseURL
 @property  NSURL *cloudLibraryStateStorageURL
 @property  NSURL *cloudLibraryResourceStorageURL
 @property  NSString *libraryIdentifier
 @property  unsigned long libraryOptions
 @property  NSString *libraryVersion
 @property  unsigned long estimatedInitialSizeForLocalLibrary
 @property  unsigned long estimatedInitialAssetCountForLocalLibrary
 @property  unsigned long sizeOfResourcesToUpload
 @property  unsigned long sizeOfOriginalResourcesToUpload
 @property  unsigned long numberOfImagesToUpload
 @property  unsigned long numberOfVideosToUpload
 @property  unsigned long numberOfOtherItemsToUpload
 @property  <CPLLibraryManagerDelegate> *delegate
 @property  <CPLResourceProgressDelegate> *resourceProgressDelegate
 @property  <CPLLibraryManagerForceSyncDelegate> *forceSyncDelegate
 @property  <CPLLibraryManagerOwner> *owner
 @property  CPLConfiguration *configuration
 @property  CPLStatus *syncStatus
 @property  unsigned long status
 @property  NSError *statusError
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLLibraryManager descriptionForProvideContentResult:]
  +[CPLLibraryManager platformImplementationProtocol]
  +[CPLLibraryManager nextOverrideTimeIntervalForSystemBudgets:]
  +[CPLLibraryManager stateDescriptionForState:]
  +[CPLLibraryManager descriptionForLibraryOptions:]
  +[CPLLibraryManager _reversMappingForLibraryOptions]
  +[CPLLibraryManager useCloudPhotoDaemonImplementation]
  +[CPLLibraryManager optionsFromDescription:]
  +[CPLLibraryManager _mappingForLibraryOptions]
  +[CPLLibraryManager allLibraryOptionsDescriptions]

  // instance methods
  -[CPLLibraryManager setEstimatedInitialAssetCountForLocalLibrary:]
  -[CPLLibraryManager resetStatus]
  -[CPLLibraryManager disableMingling]
  -[CPLLibraryManager boostPriorityForScopeWithIdentifier:completionHandler:]
  -[CPLLibraryManager openWithCompletionHandler:]
  -[CPLLibraryManager noteClientIsInForegroundQuietly:]
  -[CPLLibraryManager createScope:completionHandler:]
  -[CPLLibraryManager syncStatus]
  -[CPLLibraryManager disableSynchronizationWithReason:]
  -[CPLLibraryManager enableMingling]
  -[CPLLibraryManager deleteResources:checkServerIfNecessary:completionHandler:]
  -[CPLLibraryManager blockEngineElement:]
  -[CPLLibraryManager closeWithCompletionHandler:]
  -[CPLLibraryManager deactivateScopeWithIdentifier:completionHandler:]
  -[CPLLibraryManager forceSynchronizingScopeWithIdentifiers:completionHandler:]
  -[CPLLibraryManager provideCloudResource:completionHandler:]
  -[CPLLibraryManager updateShareForScope:completionHandler:]
  -[CPLLibraryManager reportSetting:hasBeenSetToValue:]
  -[CPLLibraryManager deactivateWithCompletionHandler:]
  -[CPLLibraryManager getCloudCacheForRecordWithScopedIdentifier:completionHandler:]
  -[CPLLibraryManager getStatusesForScopesWithIdentifiers:includeStorages:completionHandler:]
  -[CPLLibraryManager addStatusChangesForRecordsWithScopedIdentifiers:persist:]
  -[CPLLibraryManager getResourcesForItemWithScopedIdentifier:completionHandler:]
  -[CPLLibraryManager noteClientIsInBackground]
  -[CPLLibraryManager noteClientReceivedNotificationOfServerChanges]
  -[CPLLibraryManager enableSynchronizationWithReason:]
  -[CPLLibraryManager requestClientToPushAllChangesWithCompletionHandler:]
  -[CPLLibraryManager barrier]
  -[CPLLibraryManager provideRecordWithCloudScopeIdentifier:completionHandler:]
  -[CPLLibraryManager currentSession]
  -[CPLLibraryManager getStreamingURLForResource:intent:hints:timeRange:clientBundleID:completionHandler:]
  -[CPLLibraryManager testKey:value:completionHandler:]
  -[CPLLibraryManager noteClientIsBeginningSignificantWork]
  -[CPLLibraryManager acknowledgeChangedStatuses:]
  -[CPLLibraryManager noteClientIsEndingSignificantWork]
  -[CPLLibraryManager addDropDerivativesRecipe:writeToUserDefaults:withCompletionHandler:]
  -[CPLLibraryManager getChangedStatusesWithCompletionHandler:]
  -[CPLLibraryManager reportMiscInformation:]
  -[CPLLibraryManager cloudCacheGetDescriptionForRecordWithScopedIdentifier:related:completionHandler:]
  -[CPLLibraryManager unblockEngineElement:]
  -[CPLLibraryManager getStatusForComponents:completionHandler:]
  -[CPLLibraryManager rampingRequestForResourceType:numRequested:completionHandler:]
  -[CPLLibraryManager queryUserDetailsForShareParticipants:completionHandler:]
  -[CPLLibraryManager getStatusArrayForComponents:completionHandler:]
  -[CPLLibraryManager activateScopeWithIdentifier:completionHandler:]
  -[CPLLibraryManager resolveLocalScopedIdentifiersForCloudScopedIdentifiers:completionHandler:]
  -[CPLLibraryManager beginDownloadForResource:clientBundleID:options:proposedTaskIdentifier:completionHandler:]
  -[CPLLibraryManager getStatusForRecordsWithScopedIdentifiers:completionHandler:]
  -[CPLLibraryManager unblockEngineElementOnce:]
  -[CPLLibraryManager acceptSharedScope:completionHandler:]
  -[CPLLibraryManager compactFileCacheWithCompletionHandler:]
  -[CPLLibraryManager forceBackupWithCompletionHandler:]
  -[CPLLibraryManager checkResourcesAreSafeToPrune:checkServerIfNecessary:completionHandler:]
  -[CPLLibraryManager startSyncSession]
  -[CPLLibraryManager checkHasBackgroundDownloadOperationsWithCompletionHandler:]
  -[CPLLibraryManager getListOfComponentsWithCompletionHandler:]
  -[CPLLibraryManager addInfoToLog:]
  -[CPLLibraryManager getSystemBudgetsWithCompletionHandler:]
  -[CPLLibraryManager beginInMemoryDownloadOfResource:completionHandler:]
  -[CPLLibraryManager provideScopeChangeForScopeWithIdentifier:completionHandler:]
  -[CPLLibraryManager clientLibraryBaseURL]
  -[CPLLibraryManager _closeDeactivating:completionHandler:]
  -[CPLLibraryManager deleteResourcesIfSafe:completionHandler:]
  -[CPLLibraryManager sizeOfResourcesToUpload]
  -[CPLLibraryManager libraryIdentifier]
  -[CPLLibraryManager _getMappedScopedIdentifiersForScopedIdentifiers:inAreLocalIdentifiers:completionHandler:]
  -[CPLLibraryManager resourceProgressDelegate]
  -[CPLLibraryManager initForManagementWithLibraryIdentifier:]
  -[CPLLibraryManager _configurationDidChange]
  -[CPLLibraryManager cloudCacheGetDescriptionForRecordWithScopedIdentifier:completionHandler:]
  -[CPLLibraryManager configuration]
  -[CPLLibraryManager getLocalScopedIdentifiersForCloudScopedIdentifiers:completionHandler:]
  -[CPLLibraryManager addSubscriberUsingPublishingHandler:]
  -[CPLLibraryManager numberOfImagesToUpload]
  -[CPLLibraryManager .cxx_destruct]
  -[CPLLibraryManager getStatusForRecordsWithIdentifiers:completionHandler:]
  -[CPLLibraryManager disableMainScopeWithCompletionHandler:]
  -[CPLLibraryManager platformObject]
  -[CPLLibraryManager discardCurrentSession]
  -[CPLLibraryManager forceSyncDelegate]
  -[CPLLibraryManager _getMappedIdentifiersForIdentifiers:inAreLocalIdentifiers:completionHandler:]
  -[CPLLibraryManager _setStatus:andError:]
  -[CPLLibraryManager setDelegate:]
  -[CPLLibraryManager setUserOverride:]
  -[CPLLibraryManager setState:]
  -[CPLLibraryManager initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:options:]
  -[CPLLibraryManager initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:]
  -[CPLLibraryManager setOwner:]
  -[CPLLibraryManager setEstimatedInitialSizeForLocalLibrary:]
  -[CPLLibraryManager owner]
  -[CPLLibraryManager estimatedInitialAssetCountForLocalLibrary]
  -[CPLLibraryManager setEffectiveClientBundleIdentifier:]
  -[CPLLibraryManager resetCacheWithOption:completionHandler:]
  -[CPLLibraryManager _mappedUnscopedIdentifiersFromScopedIdentifiers:]
  -[CPLLibraryManager beginPullChangeSessionWithKnownLibraryVersion:resetTracker:completionHandler:]
  -[CPLLibraryManager takeStatisticsSnapshotSinceDate:completionHandler:]
  -[CPLLibraryManager state]
  -[CPLLibraryManager queryUserIdentitiesWithParticipants:completionHandler:]
  -[CPLLibraryManager initForManagement]
  -[CPLLibraryManager getCloudScopedIdentifiersForLocalScopedIdentifiers:completionHandler:]
  -[CPLLibraryManager publishResource:completionHandler:]
  -[CPLLibraryManager beginDownloadForResource:highPriority:completionHandler:]
  -[CPLLibraryManager enableMainScopeWithCompletionHandler:]
  -[CPLLibraryManager numberOfVideosToUpload]
  -[CPLLibraryManager getStreamingURLForResource:intent:hints:clientBundleID:completionHandler:]
  -[CPLLibraryManager _setLibraryVersion:]
  -[CPLLibraryManager status]
  -[CPLLibraryManager libraryOptions]
  -[CPLLibraryManager acceptMomentShare:completionHandler:]
  -[CPLLibraryManager fetchMomentShareFromShareURL:completionHandler:]
  -[CPLLibraryManager addStatusChangesForRecordsWithIdentifiers:persist:]
  -[CPLLibraryManager delegate]
  -[CPLLibraryManager beginPushChangeSessionWithKnownLibraryVersion:resetTracker:completionHandler:]
  -[CPLLibraryManager setForceSyncDelegate:]
  -[CPLLibraryManager statusError]
  -[CPLLibraryManager numberOfOtherItemsToUpload]
  -[CPLLibraryManager dealloc]
  -[CPLLibraryManager beginDownloadForResource:clientBundleID:intent:proposedTaskIdentifier:completionHandler:]
  -[CPLLibraryManager _statusDidChange]
  -[CPLLibraryManager beginPushChangeSessionWithKnownLibraryVersion:completionHandler:]
  -[CPLLibraryManager setShouldOverrideSystemBudgetsForSyncSession:]
  -[CPLLibraryManager getResourcesForItemWithIdentifier:completionHandler:]
  -[CPLLibraryManager getCloudIdentifiersForLocalIdentifiers:completionHandler:]
  -[CPLLibraryManager markLibraryManagerAsInvalid]
  -[CPLLibraryManager noteClientIsInForeground]
  -[CPLLibraryManager beginDownloadForResource:clientBundleID:highPriority:completionHandler:]
  -[CPLLibraryManager publishMomentShare:completionHandler:]
  -[CPLLibraryManager getStreamingURLForResource:intent:hints:completionHandler:]
  -[CPLLibraryManager userOverride]
  -[CPLLibraryManager cloudLibraryStateStorageURL]
  -[CPLLibraryManager reportSetting:hasBeenEnabled:]
  -[CPLLibraryManager effectiveClientBundleIdentifier]
  -[CPLLibraryManager sizeOfOriginalResourcesToUpload]
  -[CPLLibraryManager resetCacheWithOption:reason:completionHandler:]
  -[CPLLibraryManager _setSizeOfResourcesToUpload:sizeOfOriginalResourcesToUpload:numberOfImages:numberOfVideos:numberOfOtherItems:]
  -[CPLLibraryManager beginPullChangeSessionWithKnownLibraryVersion:completionHandler:]
  -[CPLLibraryManager beginDownloadForResource:clientBundleID:highPriority:proposedTaskIdentifier:completionHandler:]
  -[CPLLibraryManager setShouldOverride:forSystemBudgets:]
  -[CPLLibraryManager getLocalIdentifiersForCloudIdentifiers:completionHandler:]
  -[CPLLibraryManager cloudLibraryResourceStorageURL]
  -[CPLLibraryManager setResourceProgressDelegate:]
  -[CPLLibraryManager libraryVersion]
  -[CPLLibraryManager estimatedInitialSizeForLocalLibrary]
  -[CPLLibraryManager _setCurrentSession:]
  -[CPLLibraryManager fetchSharedScopeFromShareURL:completionHandler:]


CPLResource : NSObject <NSSecureCoding, NSCopying>
 @property  CPLResourceIdentity *identity
 @property  CPLScopedIdentifier *itemScopedIdentifier
 @property  unsigned long resourceType
 @property  unsigned long sourceResourceType
 @property  BOOL canGenerateDerivative
 @property  NSString *itemIdentifier

  // class methods
  +[CPLResource descriptionForResourceType:]
  +[CPLResource supportsSecureCoding]
  +[CPLResource predicateMatchingDynamicFingerprintForKey:]
  +[CPLResource cplShouldIgnorePropertyForCoding:]
  +[CPLResource derivativeGenerationThreshold]
  +[CPLResource cplShouldGenerateDerivatives]
  +[CPLResource maxPixelSizeForResourceType:]
  +[CPLResource shortDescriptionForResourceType:]
  +[CPLResource enumerateResourceTypesWithBlock:]
  +[CPLResource resourceTypeTrackedForUpload:]
  +[CPLResource cplShouldIgnorePropertyForEquality:]
  +[CPLResource isDynamicFingerprint:]
  +[CPLResource countOfResourceTypes]
  +[CPLResource normalizedResourcesFromResources:resourcePerResourceType:]
  +[CPLResource isNonDerivativeResourceType:]
  +[CPLResource isDerivativeResourceType:]
  +[CPLResource usesFakeDerivatives]
  +[CPLResource resourceTypeFromShortDecription:]
  +[CPLResource shouldIgnoreResourceTypeOnUpload:]
  +[CPLResource hasPriorityBoostForResourceType:]
  +[CPLResource resourceTypeSupportsResourceExpunge:]
  +[CPLResource isAdjustedResourceType:]
  +[CPLResource getAllResourceTypesToDownload:]
  +[CPLResource getAllResourceTypesToDownloadPrioritizeNonDerivatives:]

  // instance methods
  -[CPLResource setItemIdentifier:]
  -[CPLResource itemIdentifier]
  -[CPLResource redactedDescription]
  -[CPLResource initWithCoder:]
  -[CPLResource .cxx_destruct]
  -[CPLResource initWithCPLArchiver:]
  -[CPLResource setResourceType:]
  -[CPLResource resourceType]
  -[CPLResource setSourceResourceType:]
  -[CPLResource itemScopedIdentifier]
  -[CPLResource setCanGenerateDerivative:]
  -[CPLResource isEqual:]
  -[CPLResource setIdentity:]
  -[CPLResource initWithResourceIdentity:itemScopedIdentifier:resourceType:]
  -[CPLResource identity]
  -[CPLResource copyWithZone:]
  -[CPLResource encodeWithCoder:]
  -[CPLResource bestFileNameForResource]
  -[CPLResource sourceResourceType]
  -[CPLResource setItemScopedIdentifier:]
  -[CPLResource _backgroundDownloadTaskIdentifier]
  -[CPLResource _setBackgroundDownloadTaskIdentifier:]
  -[CPLResource estimatedResourceSize]
  -[CPLResource initWithResourceIdentity:itemIdentifier:resourceType:]
  -[CPLResource initWithResourceIdentity:itemIdentifier:]
  -[CPLResource isTrackedForUpload]
  -[CPLResource canGenerateDerivative]


CPLResourceTypeSet : NSObject
 @property  BOOL empty
 @property  unsigned long count

  // instance methods
  -[CPLResourceTypeSet redactedDescription]
  -[CPLResourceTypeSet isEmpty]
  -[CPLResourceTypeSet count]
  -[CPLResourceTypeSet containsResourceType:]
  -[CPLResourceTypeSet isEqual:]
  -[CPLResourceTypeSet intersectsWithSet:]
  -[CPLResourceTypeSet removeResourceType:]
  -[CPLResourceTypeSet enumerateResourceTypesWithBlock:]
  -[CPLResourceTypeSet unionSet:]
  -[CPLResourceTypeSet addResourceType:]
  -[CPLResourceTypeSet intersectionWithSet:]


CPLCodingPropertyEntry : NSObject
 @property  BOOL propertyType
 @property  NSSet *propertyClasses
 @property  SEL propertyGetter
 @property  SEL propertySetter
 @property  ^? propertyGetterIMP
 @property  ^? propertySetterIMP
 @property  ^{objc_ivar=} ivar
 @property  BOOL readOnly
 @property  NSString *structName

  // instance methods
  -[CPLCodingPropertyEntry structName]
  -[CPLCodingPropertyEntry setIvarValue:forObject:]
  -[CPLCodingPropertyEntry setPropertyClasses:]
  -[CPLCodingPropertyEntry ivarValueForObject:]
  -[CPLCodingPropertyEntry ivar]
  -[CPLCodingPropertyEntry setPropertySetter:]
  -[CPLCodingPropertyEntry setPropertyGetter:]
  -[CPLCodingPropertyEntry .cxx_destruct]
  -[CPLCodingPropertyEntry propertyGetter]
  -[CPLCodingPropertyEntry setReadOnly:]
  -[CPLCodingPropertyEntry setPropertySetterIMP:]
  -[CPLCodingPropertyEntry propertyType]
  -[CPLCodingPropertyEntry setPropertyType:]
  -[CPLCodingPropertyEntry setPropertyGetterIMP:]
  -[CPLCodingPropertyEntry isReadOnly]
  -[CPLCodingPropertyEntry setIvar:]
  -[CPLCodingPropertyEntry ivarAddrForObject:]
  -[CPLCodingPropertyEntry propertyGetterIMP]
  -[CPLCodingPropertyEntry propertySetterIMP]
  -[CPLCodingPropertyEntry propertyClasses]
  -[CPLCodingPropertyEntry setStructName:]
  -[CPLCodingPropertyEntry propertySetter]


CPLDiffTracker : NSObject
 @property  BOOL shouldCompareAllProperties
 @property  BOOL objectsAreTotallyDifferent
 @property  NSSet *differingProperties

  // instance methods
  -[CPLDiffTracker redactedDescription]
  -[CPLDiffTracker .cxx_destruct]
  -[CPLDiffTracker noteObjectAreTotallyDifferent]
  -[CPLDiffTracker shouldCompareAllProperties]
  -[CPLDiffTracker noteObjectsDifferOnProperty:]
  -[CPLDiffTracker areObjectsDifferentOnProperty:]
  -[CPLDiffTracker setShouldCompareAllProperties:]
  -[CPLDiffTracker objectsAreTotallyDifferent]
  -[CPLDiffTracker differingProperties]


CPLChangeStorage : NSObject
 @property  NSString *storageDescription

  // instance methods
  -[CPLChangeStorage getRelatedScopedIdentifier:forRecordWithScopedIdentifier:]
  -[CPLChangeStorage hasChangesWithRelatedScopedIdentifier:class:]
  -[CPLChangeStorage storageDescription]
  -[CPLChangeStorage changeWithScopedIdentifier:]
  -[CPLChangeStorage changesWithRelatedScopedIdentifier:class:]
  -[CPLChangeStorage getStoredChangeType:forRecordWithScopedIdentifier:]


CPLChangedRecordView : CPLRecordView
 @property  CPLRecordView *baseRecordView
 @property  CPLRecordChange *change

  // instance methods
  -[CPLChangedRecordView change]
  -[CPLChangedRecordView redactedDescription]
  -[CPLChangedRecordView .cxx_destruct]
  -[CPLChangedRecordView supportsResources]
  -[CPLChangedRecordView synthesizedRecord]
  -[CPLChangedRecordView recordClass]
  -[CPLChangedRecordView recordChangeData]
  -[CPLChangedRecordView scopedIdentifier]
  -[CPLChangedRecordView changeForType:]
  -[CPLChangedRecordView placeholderRecord]
  -[CPLChangedRecordView initWithChange:overRecordView:]
  -[CPLChangedRecordView baseRecordView]


CPLChangedRecordStorageView : CPLRecordStorageView
 @property  CPLChangeStorage *changeStorage
 @property  CPLRecordStorageView *baseStorageView

  // instance methods
  -[CPLChangedRecordStorageView hasRecordWithScopedIdentifier:]
  -[CPLChangedRecordStorageView countOfRecordsWithRelatedScopedIdentifier:class:]
  -[CPLChangedRecordStorageView .cxx_destruct]
  -[CPLChangedRecordStorageView resourceOfType:forRecordWithScopedIdentifier:recordClass:error:]
  -[CPLChangedRecordStorageView recordViewsWithRelatedScopedIdentifier:class:]
  -[CPLChangedRecordStorageView relatedScopedIdentifierForRecordWithScopedIdentifier:]
  -[CPLChangedRecordStorageView changeStorage]
  -[CPLChangedRecordStorageView recordViewWithScopedIdentifier:]
  -[CPLChangedRecordStorageView initWithChangeStorage:overStorageView:]
  -[CPLChangedRecordStorageView baseStorageView]


CPLSuggestionMemory : PBCodable <NSCopying>
 @property  BOOL hasMemoryIdentifier
 @property  NSString *memoryIdentifier
 @property  BOOL hasType
 @property  unsigned int type
 @property  BOOL hasFeature
 @property  unsigned int feature
 @property  BOOL hasContext
 @property  NSString *context

  // instance methods
  -[CPLSuggestionMemory mergeFrom:]
  -[CPLSuggestionMemory hasContext]
  -[CPLSuggestionMemory setType:]
  -[CPLSuggestionMemory setMemoryIdentifier:]
  -[CPLSuggestionMemory memoryIdentifier]
  -[CPLSuggestionMemory .cxx_destruct]
  -[CPLSuggestionMemory dictionaryRepresentation]
  -[CPLSuggestionMemory writeTo:]
  -[CPLSuggestionMemory setHasType:]
  -[CPLSuggestionMemory hasType]
  -[CPLSuggestionMemory isEqual:]
  -[CPLSuggestionMemory copyTo:]
  -[CPLSuggestionMemory hasFeature]
  -[CPLSuggestionMemory readFrom:]
  -[CPLSuggestionMemory type]
  -[CPLSuggestionMemory feature]
  -[CPLSuggestionMemory setContext:]
  -[CPLSuggestionMemory setFeature:]
  -[CPLSuggestionMemory copyWithZone:]
  -[CPLSuggestionMemory context]
  -[CPLSuggestionMemory hasMemoryIdentifier]
  -[CPLSuggestionMemory setHasFeature:]


CPLResourceTransferTask : NSObject <NSSecureCoding>
 @property  CPLResource *resource
 @property  NSString *taskIdentifier
 @property  BOOL highPriority
 @property  BOOL cancelled
 @property  CPLResourceTransferTaskOptions *options
 @property  unsigned long intent

  // class methods
  +[CPLResourceTransferTask supportsSecureCoding]
  +[CPLResourceTransferTask descriptionForIntent:]
  +[CPLResourceTransferTask isHighPriorityForIntent:]
  +[CPLResourceTransferTask isForegroundOperationForIntent:]

  // instance methods
  -[CPLResourceTransferTask initWithCoder:]
  -[CPLResourceTransferTask classForCoder]
  -[CPLResourceTransferTask options]
  -[CPLResourceTransferTask setOptions:]
  -[CPLResourceTransferTask .cxx_destruct]
  -[CPLResourceTransferTask resource]
  -[CPLResourceTransferTask setHighPriority:]
  -[CPLResourceTransferTask isCancelled]
  -[CPLResourceTransferTask isEqual:]
  -[CPLResourceTransferTask launch]
  -[CPLResourceTransferTask initWithResource:taskIdentifier:]
  -[CPLResourceTransferTask classForKeyedArchiver]
  -[CPLResourceTransferTask isHighPriority]
  -[CPLResourceTransferTask intent]
  -[CPLResourceTransferTask setIntent:]
  -[CPLResourceTransferTask setTaskIdentifier:]
  -[CPLResourceTransferTask cancelTask]
  -[CPLResourceTransferTask encodeWithCoder:]
  -[CPLResourceTransferTask taskIdentifier]


CPLResourceTransferTaskOptions : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned long intent
 @property  unsigned long priority
 @property  {?={?=qiIq}{?=qiIq}} timeRange

  // class methods
  +[CPLResourceTransferTaskOptions isHighPriorityForIntent:priority:]
  +[CPLResourceTransferTaskOptions supportsSecureCoding]
  +[CPLResourceTransferTaskOptions isForegroundOperationForIntent:priority:]
  +[CPLResourceTransferTaskOptions optionsForLegacyIntent:]
  +[CPLResourceTransferTaskOptions descriptionForIntent:]
  +[CPLResourceTransferTaskOptions intentsToBackgroundDownload]
  +[CPLResourceTransferTaskOptions defaultOptions]
  +[CPLResourceTransferTaskOptions descriptionForIntentPriority:]

  // instance methods
  -[CPLResourceTransferTaskOptions setTimeRange:]
  -[CPLResourceTransferTaskOptions timeRange]
  -[CPLResourceTransferTaskOptions initWithCoder:]
  -[CPLResourceTransferTaskOptions init]
  -[CPLResourceTransferTaskOptions initWithHighPriority:]
  -[CPLResourceTransferTaskOptions legacyIntent]
  -[CPLResourceTransferTaskOptions initWithIntent:priority:timeRange:]
  -[CPLResourceTransferTaskOptions priority]
  -[CPLResourceTransferTaskOptions isHighPriority]
  -[CPLResourceTransferTaskOptions intent]
  -[CPLResourceTransferTaskOptions initWithIntent:priority:]
  -[CPLResourceTransferTaskOptions hasValidTimeRange]
  -[CPLResourceTransferTaskOptions copyWithZone:]
  -[CPLResourceTransferTaskOptions shouldKeepPower]
  -[CPLResourceTransferTaskOptions encodeWithCoder:]


CPLBatchExtractionStep : NSObject
 @property  <CPLBatchExtractionStrategyStorage> *storage
 @property  NSString *scopeIdentifier

  // instance methods
  -[CPLBatchExtractionStep .cxx_destruct]
  -[CPLBatchExtractionStep scopeIdentifier]
  -[CPLBatchExtractionStep storage]
  -[CPLBatchExtractionStep extractToBatch:maximumCount:maximumResourceSize:error:]
  -[CPLBatchExtractionStep reset]
  -[CPLBatchExtractionStep shouldResetFromThisStepWithIncomingChange:]
  -[CPLBatchExtractionStep shortDescription]
  -[CPLBatchExtractionStep resetConditionallyFromNewIncomingChange:]
  -[CPLBatchExtractionStep initWithStorage:scopeIdentifier:]


CPLByClassExtractionStep : CPLBatchExtractionStep
 @property  Class extractionClass
 @property  unsigned long maximumCount
 @property  NSString *queryDescription

  // instance methods
  -[CPLByClassExtractionStep queryDescription]
  -[CPLByClassExtractionStep initWithStorage:scopeIdentifier:description:class:maximumCount:query:]
  -[CPLByClassExtractionStep extractionClass]
  -[CPLByClassExtractionStep .cxx_destruct]
  -[CPLByClassExtractionStep extractToBatch:maximumCount:maximumResourceSize:error:]
  -[CPLByClassExtractionStep maximumCount]
  -[CPLByClassExtractionStep reset]
  -[CPLByClassExtractionStep shouldResetFromThisStepWithIncomingChange:]
  -[CPLByClassExtractionStep shortDescription]


CPLNewAlbumExtractionStep : CPLBatchExtractionStep
 @property  unsigned long maximumCount

  // instance methods
  -[CPLNewAlbumExtractionStep extractToBatch:maximumCount:maximumResourceSize:error:]
  -[CPLNewAlbumExtractionStep maximumCount]
  -[CPLNewAlbumExtractionStep shouldResetFromThisStepWithIncomingChange:]
  -[CPLNewAlbumExtractionStep shortDescription]
  -[CPLNewAlbumExtractionStep initWithStorage:scopeIdentifier:maximumCount:]


CPLDeleteAlbumExtractionStep : CPLBatchExtractionStep
 @property  unsigned long maximumCount

  // instance methods
  -[CPLDeleteAlbumExtractionStep extractToBatch:maximumCount:maximumResourceSize:error:]
  -[CPLDeleteAlbumExtractionStep maximumCount]
  -[CPLDeleteAlbumExtractionStep shouldResetFromThisStepWithIncomingChange:]
  -[CPLDeleteAlbumExtractionStep shortDescription]
  -[CPLDeleteAlbumExtractionStep initWithStorage:scopeIdentifier:maximumCount:]


CPLNewAssetExtractionStep : CPLBatchExtractionStep
 @property  unsigned long maximumCount

  // instance methods
  -[CPLNewAssetExtractionStep .cxx_destruct]
  -[CPLNewAssetExtractionStep extractToBatch:maximumCount:maximumResourceSize:error:]
  -[CPLNewAssetExtractionStep maximumCount]
  -[CPLNewAssetExtractionStep reset]
  -[CPLNewAssetExtractionStep shouldResetFromThisStepWithIncomingChange:]
  -[CPLNewAssetExtractionStep shortDescription]
  -[CPLNewAssetExtractionStep initWithStorage:scopeIdentifier:maximumCount:]


CPLTrashedAssetExtractionStep : CPLBatchExtractionStep
 @property  unsigned long maximumCount

  // instance methods
  -[CPLTrashedAssetExtractionStep extractToBatch:maximumCount:maximumResourceSize:error:]
  -[CPLTrashedAssetExtractionStep maximumCount]
  -[CPLTrashedAssetExtractionStep shouldResetFromThisStepWithIncomingChange:]
  -[CPLTrashedAssetExtractionStep shortDescription]
  -[CPLTrashedAssetExtractionStep initWithStorage:scopeIdentifier:maximumCount:]


CPLDropAllRecordsExtractionStep : CPLBatchExtractionStep
  // instance methods
  -[CPLDropAllRecordsExtractionStep extractToBatch:maximumCount:maximumResourceSize:error:]
  -[CPLDropAllRecordsExtractionStep reset]
  -[CPLDropAllRecordsExtractionStep shouldResetFromThisStepWithIncomingChange:]
  -[CPLDropAllRecordsExtractionStep shortDescription]


CPLFaceInstance : PBCodable <NSCopying>
 @property  BOOL noneState
 @property  BOOL keyFace
 @property  BOOL manual
 @property  BOOL hasPersonIdentifier
 @property  NSString *personIdentifier
 @property  BOOL hasCenterX
 @property  double centerX
 @property  BOOL hasCenterY
 @property  double centerY
 @property  BOOL hasSize
 @property  double size
 @property  BOOL hasFaceState
 @property  unsigned int faceState
 @property  NSMutableArray *rejectedPersonIdentifiers
 @property  BOOL hasNameSource
 @property  unsigned int nameSource

  // class methods
  +[CPLFaceInstance rejectedPersonIdentifiersType]

  // instance methods
  -[CPLFaceInstance mergeFrom:]
  -[CPLFaceInstance setPersonIdentifier:]
  -[CPLFaceInstance personIdentifier]
  -[CPLFaceInstance isManual]
  -[CPLFaceInstance centerX]
  -[CPLFaceInstance centerY]
  -[CPLFaceInstance .cxx_destruct]
  -[CPLFaceInstance setCenterX:]
  -[CPLFaceInstance setCenterY:]
  -[CPLFaceInstance dictionaryRepresentation]
  -[CPLFaceInstance writeTo:]
  -[CPLFaceInstance setManual:]
  -[CPLFaceInstance setNameSource:]
  -[CPLFaceInstance setSize:]
  -[CPLFaceInstance isEqual:]
  -[CPLFaceInstance clearState]
  -[CPLFaceInstance copyTo:]
  -[CPLFaceInstance readFrom:]
  -[CPLFaceInstance isKeyFace]
  -[CPLFaceInstance rejectedPersonIdentifiers]
  -[CPLFaceInstance compare:]
  -[CPLFaceInstance hasSize]
  -[CPLFaceInstance size]
  -[CPLFaceInstance setHasSize:]
  -[CPLFaceInstance copyWithZone:]
  -[CPLFaceInstance setRejectedPersonIdentifiers:]
  -[CPLFaceInstance setKeyFace:]
  -[CPLFaceInstance nameSource]
  -[CPLFaceInstance pointerDescription]
  -[CPLFaceInstance setFaceState:]
  -[CPLFaceInstance faceState]
  -[CPLFaceInstance _setFaceStateBit:fromBoolValue:]
  -[CPLFaceInstance _isFaceStateBitSet:]
  -[CPLFaceInstance isNoneState]
  -[CPLFaceInstance addRejectedPersonIdentifiers:]
  -[CPLFaceInstance rejectedPersonIdentifiersCount]
  -[CPLFaceInstance clearRejectedPersonIdentifiers]
  -[CPLFaceInstance rejectedPersonIdentifiersAtIndex:]
  -[CPLFaceInstance hasPersonIdentifier]
  -[CPLFaceInstance setHasCenterX:]
  -[CPLFaceInstance hasCenterX]
  -[CPLFaceInstance setHasCenterY:]
  -[CPLFaceInstance hasCenterY]
  -[CPLFaceInstance setHasFaceState:]
  -[CPLFaceInstance hasFaceState]
  -[CPLFaceInstance setHasNameSource:]
  -[CPLFaceInstance hasNameSource]


CPLLibraryInfo : NSObject <NSSecureCoding, NSCopying>
 @property  NSDictionary *assetCounts
 @property  CPLFeatureVersionHistory *featureVersionHistory
 @property  CPLAccountFlags *accountFlags
 @property  NSData *accountFlagsData
 @property  CPLMomentShare *momentShare
 @property  NSNumber *featureCompatibleVersion

  // class methods
  +[CPLLibraryInfo supportsSecureCoding]
  +[CPLLibraryInfo cplAdditionalSecureClassesForProperty:]

  // instance methods
  -[CPLLibraryInfo setAccountFlagsData:]
  -[CPLLibraryInfo initWithCoder:]
  -[CPLLibraryInfo .cxx_destruct]
  -[CPLLibraryInfo isEqual:]
  -[CPLLibraryInfo accountFlagsData]
  -[CPLLibraryInfo setMomentShare:]
  -[CPLLibraryInfo accountFlags]
  -[CPLLibraryInfo momentShare]
  -[CPLLibraryInfo copyWithZone:]
  -[CPLLibraryInfo encodeWithCoder:]
  -[CPLLibraryInfo featureVersionHistory]
  -[CPLLibraryInfo assetCounts]
  -[CPLLibraryInfo setAssetCounts:]
  -[CPLLibraryInfo setFeatureVersionHistory:]
  -[CPLLibraryInfo setFeatureCompatibleVersion:]
  -[CPLLibraryInfo prettyDescriptionWithAnchorDesciptionBlock:]
  -[CPLLibraryInfo featureCompatibleVersion]


CPLLibraryState : NSObject <NSSecureCoding, NSCopying>
 @property  BOOL disabled
 @property  NSDate *disabledDate
 @property  NSDate *deleteDate

  // class methods
  +[CPLLibraryState supportsSecureCoding]

  // instance methods
  -[CPLLibraryState setDisabled:]
  -[CPLLibraryState initWithCoder:]
  -[CPLLibraryState .cxx_destruct]
  -[CPLLibraryState isEqual:]
  -[CPLLibraryState copyWithZone:]
  -[CPLLibraryState isDisabled]
  -[CPLLibraryState encodeWithCoder:]
  -[CPLLibraryState disabledDate]
  -[CPLLibraryState deleteDate]
  -[CPLLibraryState setDisabledDate:]
  -[CPLLibraryState setDeleteDate:]


CPLInMemoryResourceDownloadTask : CPLResourceTransferTask
 @property  @? launchHandler
 @property  @? completionHandler
 @property  CPLResource *cloudResource
 @property  CPLPlaceholderRecord *cloudRecord

  // class methods
  +[CPLInMemoryResourceDownloadTask failedTaskForResource:error:completionHandler:]

  // instance methods
  -[CPLInMemoryResourceDownloadTask cloudRecord]
  -[CPLInMemoryResourceDownloadTask .cxx_destruct]
  -[CPLInMemoryResourceDownloadTask associateCloudResource:ofRecord:]
  -[CPLInMemoryResourceDownloadTask launch]
  -[CPLInMemoryResourceDownloadTask finishWithData:error:]
  -[CPLInMemoryResourceDownloadTask launchHandler]
  -[CPLInMemoryResourceDownloadTask launchTransportTask:]
  -[CPLInMemoryResourceDownloadTask cancelTask]
  -[CPLInMemoryResourceDownloadTask completionHandler]
  -[CPLInMemoryResourceDownloadTask initWithResource:taskIdentifier:launchHandler:completionHandler:]
  -[CPLInMemoryResourceDownloadTask cloudResource]


CPLBackgroundDownloadsTask : CPLEngineSyncTask
  // instance methods
  -[CPLBackgroundDownloadsTask _finishTaskLocked]
  -[CPLBackgroundDownloadsTask _isErrorCountingForARetry:]
  -[CPLBackgroundDownloadsTask taskDidFinishWithError:]
  -[CPLBackgroundDownloadsTask .cxx_destruct]
  -[CPLBackgroundDownloadsTask _downloadTask:didFinishWithErrorLocked:]
  -[CPLBackgroundDownloadsTask _enqueueTasksLocked]
  -[CPLBackgroundDownloadsTask _transportTaskDidFinish:]
  -[CPLBackgroundDownloadsTask launch]
  -[CPLBackgroundDownloadsTask _getResourceTypesToDownload:]
  -[CPLBackgroundDownloadsTask _launchNecessaryDownloadTasksWithTransaction:]
  -[CPLBackgroundDownloadsTask cancel]
  -[CPLBackgroundDownloadsTask _completeBackgroundDownloadForResource:error:withTransaction:]
  -[CPLBackgroundDownloadsTask initWithEngineLibrary:session:]
  -[CPLBackgroundDownloadsTask _updateActiveDownloadTaskCount]
  -[CPLBackgroundDownloadsTask taskIdentifier]


CPLContainerRelation : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *containerIdentifier
 @property  long long position
 @property  BOOL keyAsset

  // class methods
  +[CPLContainerRelation supportsSecureCoding]

  // instance methods
  -[CPLContainerRelation initWithCoder:]
  -[CPLContainerRelation isKeyAsset]
  -[CPLContainerRelation .cxx_destruct]
  -[CPLContainerRelation containerIdentifier]
  -[CPLContainerRelation setContainerIdentifier:]
  -[CPLContainerRelation setKeyAsset:]
  -[CPLContainerRelation isEqual:]
  -[CPLContainerRelation copyWithZone:]
  -[CPLContainerRelation setPosition:]
  -[CPLContainerRelation encodeWithCoder:]
  -[CPLContainerRelation position]
  -[CPLContainerRelation proposedScopedIdentifierForItemScopedIdentifier:]
  -[CPLContainerRelation proposedIdentifierForItemIdentifier:]


CPLContainerChange : CPLRecordChange
  // class methods
  +[CPLContainerChange relatedRecordClass]

  // instance methods
  -[CPLContainerChange supportsDeletion]


CPLContainerRelationChange : CPLRecordChange
 @property  NSString *itemIdentifier
 @property  CPLContainerRelation *relation

  // class methods
  +[CPLContainerRelationChange relationToContainerWithIdentifier:]
  +[CPLContainerRelationChange relationWithItemScopedIdentifier:containerIdentifier:]
  +[CPLContainerRelationChange relationWithItemIdentifier:containerIdentifier:]
  +[CPLContainerRelationChange shouldReallyQuarantineRecord]

  // instance methods
  -[CPLContainerRelationChange setItemIdentifier:]
  -[CPLContainerRelationChange itemIdentifier]
  -[CPLContainerRelationChange relation]
  -[CPLContainerRelationChange .cxx_destruct]
  -[CPLContainerRelationChange itemScopedIdentifier]
  -[CPLContainerRelationChange secondaryIdentifier]
  -[CPLContainerRelationChange supportsDeletion]
  -[CPLContainerRelationChange setRelation:]
  -[CPLContainerRelationChange supportsDirectDeletion]
  -[CPLContainerRelationChange setItemScopedIdentifier:]
  -[CPLContainerRelationChange containerScopedIdentifier]
  -[CPLContainerRelationChange scopedIdentifiersForMapping]
  -[CPLContainerRelationChange translateToCloudChangeUsingIDMapping:error:]
  -[CPLContainerRelationChange translateToClientChangeUsingIDMapping:error:]
  -[CPLContainerRelationChange setContainerScopedIdentifier:]
  -[CPLContainerRelationChange relatedIdentifier]
  -[CPLContainerRelationChange setRelatedIdentifier:]
  -[CPLContainerRelationChange compactedChangeWithRelatedChanges:isOnlyChange:fullRecord:usingStorageView:]
  -[CPLContainerRelationChange validateFullRecord]
  -[CPLContainerRelationChange setSecondaryIdentifier:]


CPLRecordChange : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *realIdentifier
 @property  NSData *recordChangeData
 @property  BOOL serverRecordIsCorrupted
 @property  CPLScopedIdentifier *scopedIdentifier
 @property  NSDate *recordModificationDate
 @property  unsigned long changeType
 @property  NSDate *dateDeleted
 @property  CPLScopedIdentifier *resourceCopyFromScopedIdentifier
 @property  BOOL inTrash
 @property  BOOL inExpunged
 @property  NSString *identifier

  // class methods
  +[CPLRecordChange supportsSecureCoding]
  +[CPLRecordChange cplShouldIgnorePropertyForCoding:]
  +[CPLRecordChange newDeleteChangeWithScopedIdentifier:]
  +[CPLRecordChange maxInlineDataSize]
  +[CPLRecordChange cplShouldIgnorePropertyForEquality:]
  +[CPLRecordChange cplAdditionalSecureClassesForProperty:]
  +[CPLRecordChange newChangeWithScopedIdentifier:changeType:]
  +[CPLRecordChange newRecordWithScopedIdentifier:]
  +[CPLRecordChange newRecordInScopeWithIdentifier:]
  +[CPLRecordChange classForStoredClassName:forCPLArchiver:]
  +[CPLRecordChange relatedRecordClass]
  +[CPLRecordChange descriptionForChangeType:]
  +[CPLRecordChange shouldReallyQuarantineRecord]
  +[CPLRecordChange newRecord]
  +[CPLRecordChange _descriptionForChangeType:isSparseFullChange:onlyUploadNewResources:]
  +[CPLRecordChange equalityBlockForDirection:]
  +[CPLRecordChange copyPropertyBlockForDirection:]
  +[CPLRecordChange newRecordWithIdentifier:]
  +[CPLRecordChange descriptionForDirection:]
  +[CPLRecordChange newChangeWithType:]
  +[CPLRecordChange newChangeWithIdentifier:changeType:]
  +[CPLRecordChange newDeleteChangeWithIdentifier:]

  // instance methods
  -[CPLRecordChange applyChange:]
  -[CPLRecordChange cplFullDescription]
  -[CPLRecordChange isDelete]
  -[CPLRecordChange resources]
  -[CPLRecordChange changeType]
  -[CPLRecordChange redactedDescription]
  -[CPLRecordChange initWithCoder:]
  -[CPLRecordChange setResources:]
  -[CPLRecordChange secondaryScopedIdentifier]
  -[CPLRecordChange inExpunged]
  -[CPLRecordChange .cxx_destruct]
  -[CPLRecordChange supportsResources]
  -[CPLRecordChange initWithCPLArchiver:]
  -[CPLRecordChange inTrash]
  -[CPLRecordChange setResourceCopyFromScopedIdentifier:]
  -[CPLRecordChange setScopeIndex:]
  -[CPLRecordChange setScopedIdentifier:]
  -[CPLRecordChange setInTrash:]
  -[CPLRecordChange setRecordModificationDate:]
  -[CPLRecordChange isFullRecord]
  -[CPLRecordChange effectiveResourceSizeToUploadUsingStorage:]
  -[CPLRecordChange recordModificationDate]
  -[CPLRecordChange dateDeleted]
  -[CPLRecordChange isEqual:]
  -[CPLRecordChange setChangeType:]
  -[CPLRecordChange identifier]
  -[CPLRecordChange secondaryIdentifier]
  -[CPLRecordChange clearIdentifiers]
  -[CPLRecordChange supportsDeletion]
  -[CPLRecordChange relatedScopedIdentifier]
  -[CPLRecordChange hasChangeType:]
  -[CPLRecordChange setIdentifier:]
  -[CPLRecordChange realResourceSize]
  -[CPLRecordChange copyWithZone:]
  -[CPLRecordChange setInExpunged:]
  -[CPLRecordChange recordChangeData]
  -[CPLRecordChange encodeWithCoder:]
  -[CPLRecordChange setDateDeleted:]
  -[CPLRecordChange scopedIdentifier]
  -[CPLRecordChange totalResourceSize]
  -[CPLRecordChange _setShouldNotTrustCloudCache:]
  -[CPLRecordChange checkDefaultValueBlockForPropertyWithSelector:]
  -[CPLRecordChange _unscopedIdentifier]
  -[CPLRecordChange supportsDirectDeletion]
  -[CPLRecordChange propertiesDescription]
  -[CPLRecordChange dequeueOrder]
  -[CPLRecordChange resourcesDescription]
  -[CPLRecordChange propertiesForChangeType:]
  -[CPLRecordChange resourceForType:]
  -[CPLRecordChange copyDerivatives:count:avoidResourceType:fromRecord:inResourcePerType:]
  -[CPLRecordChange isMasterChange]
  -[CPLRecordChange isAssetChange]
  -[CPLRecordChange isResourceTypeAGeneratedDerivative:]
  -[CPLRecordChange copyDerivativesFromRecordIfPossible:]
  -[CPLRecordChange supportsResourceType:]
  -[CPLRecordChange allowsToOnlyUploadNewResources]
  -[CPLRecordChange isScopeChange]
  -[CPLRecordChange storedClassNameForCPLArchiver:]
  -[CPLRecordChange resourceCopyFromScopedIdentifier]
  -[CPLRecordChange proposedCloudScopedIdentifierWithError:]
  -[CPLRecordChange proposedLocalScopedIdentifier]
  -[CPLRecordChange scopedIdentifiersForMapping]
  -[CPLRecordChange translateToCloudChangeUsingIDMapping:error:]
  -[CPLRecordChange translateToClientChangeUsingIDMapping:error:]
  -[CPLRecordChange relatedRecordClass]
  -[CPLRecordChange relatedIdentifier]
  -[CPLRecordChange setRelatedIdentifier:]
  -[CPLRecordChange realIdentifier]
  -[CPLRecordChange allRelatedScopedIdentifiers]
  -[CPLRecordChange compactedChangeWithRelatedChanges:isOnlyChange:fullRecord:usingStorageView:]
  -[CPLRecordChange setRecordChangeData:]
  -[CPLRecordChange fullChangeTypeForFullRecord]
  -[CPLRecordChange copyChangeType:]
  -[CPLRecordChange applyChangeType:fromChange:]
  -[CPLRecordChange asRecordView]
  -[CPLRecordChange validateFullRecord]
  -[CPLRecordChange setSecondaryIdentifier:]
  -[CPLRecordChange shouldOnlyUploadNewResources]
  -[CPLRecordChange applyChange:copyPropertiesToFinalChange:forChangeType:direction:diffTracker:]
  -[CPLRecordChange enumerateChangeTypesForChangeType:block:]
  -[CPLRecordChange realRecordChangeFromRecordChange:direction:newRecord:changeType:diffTracker:]
  -[CPLRecordChange realRecordChangeFromRecordChange:direction:newRecord:diffTracker:]
  -[CPLRecordChange realScopedIdentifier]
  -[CPLRecordChange isInScopeWithIdentifier:]
  -[CPLRecordChange realUploadResourceSize]
  -[CPLRecordChange originalResourceSize]
  -[CPLRecordChange realRecordChangeFromRecordChange:direction:newRecord:]
  -[CPLRecordChange attachDiffTracker:]
  -[CPLRecordChange attachedDiffTracker]
  -[CPLRecordChange resourceChangeWillOnlyChangeDerivatives:]
  -[CPLRecordChange mergeRecordChangeWithNewRecordChange:direction:]
  -[CPLRecordChange prepareForStorage]
  -[CPLRecordChange awakeFromStorage]
  -[CPLRecordChange shouldApplyPropertiesWithSelector:]
  -[CPLRecordChange setShouldFilterDefaultValuesForNewProperties:]
  -[CPLRecordChange shouldFilterDefaultValuesForNewProperties]
  -[CPLRecordChange isSparseFullChange]
  -[CPLRecordChange markAsSparseFullChange]
  -[CPLRecordChange markToOnlyUploadNewResources]
  -[CPLRecordChange changeIsOnlyAddingResourcesToRecord:addedResources:]
  -[CPLRecordChange onlyAddedResources]
  -[CPLRecordChange validateChangeWithError:]
  -[CPLRecordChange estimatedRecordSize]
  -[CPLRecordChange _uploadIdentifier]
  -[CPLRecordChange _setUploadIdentifier:]
  -[CPLRecordChange _shouldNotTrustCloudCache]
  -[CPLRecordChange _canLowerQuota]
  -[CPLRecordChange allResourcesAreAvailable]
  -[CPLRecordChange resourcePerType]
  -[CPLRecordChange baseDerivativeResourceType]
  -[CPLRecordChange baseVideoComplemenentResourceType]
  -[CPLRecordChange clearChangeType:]
  -[CPLRecordChange setRealIdentifier:]
  -[CPLRecordChange serverRecordIsCorrupted]
  -[CPLRecordChange setServerRecordIsCorrupted:]
  -[CPLRecordChange validateRecordForTracker:]


CPLRecordChangeDiffTracker : NSObject
 @property  NSArray *updatedProperties

  // instance methods
  -[CPLRecordChangeDiffTracker redactedDescription]
  -[CPLRecordChangeDiffTracker .cxx_destruct]
  -[CPLRecordChangeDiffTracker init]
  -[CPLRecordChangeDiffTracker updatedProperties]
  -[CPLRecordChangeDiffTracker withTrackerForChangeType:block:]
  -[CPLRecordChangeDiffTracker initWithTrackingChangeTypeMask:]
  -[CPLRecordChangeDiffTracker areObjectsDifferentOnProperty:changeType:]


CPLSyncIndicator : NSObject
  // class methods
  +[CPLSyncIndicator setForeground:]
  +[CPLSyncIndicator _doProtected:]
  +[CPLSyncIndicator showSyncIndicator]
  +[CPLSyncIndicator _reallyHideSyncIndicator]
  +[CPLSyncIndicator hideSyncIndicator]
  +[CPLSyncIndicator _reallyShowSyncIndicator]


CPLFileWatcher : NSObject
 @property  NSURL *fileURL
 @property  NSString *name
 @property  <CPLFileWatcherDelegate> *delegate

  // instance methods
  -[CPLFileWatcher name]
  -[CPLFileWatcher redactedDescription]
  -[CPLFileWatcher initWithFileURL:name:delegate:queue:]
  -[CPLFileWatcher startWatching]
  -[CPLFileWatcher fileURL]
  -[CPLFileWatcher .cxx_destruct]
  -[CPLFileWatcher initWithFileURL:delegate:queue:]
  -[CPLFileWatcher _stopWatchingParent]
  -[CPLFileWatcher setDelegate:]
  -[CPLFileWatcher _forceRefreshWatchingNode]
  -[CPLFileWatcher _startWatchingNode]
  -[CPLFileWatcher _updateWatchingNode]
  -[CPLFileWatcher stopWatching]
  -[CPLFileWatcher delegate]
  -[CPLFileWatcher _stopWatchingNode]
  -[CPLFileWatcher _startWatchingParent]


CPLSuggestionAssetFlag : PBCodable <NSCopying>
 @property  BOOL hasIsRepresentative
 @property  BOOL isRepresentative
 @property  BOOL hasIsKeyAsset
 @property  BOOL isKeyAsset

  // instance methods
  -[CPLSuggestionAssetFlag mergeFrom:]
  -[CPLSuggestionAssetFlag isKeyAsset]
  -[CPLSuggestionAssetFlag isRepresentative]
  -[CPLSuggestionAssetFlag setIsKeyAsset:]
  -[CPLSuggestionAssetFlag setIsRepresentative:]
  -[CPLSuggestionAssetFlag dictionaryRepresentation]
  -[CPLSuggestionAssetFlag writeTo:]
  -[CPLSuggestionAssetFlag isEqual:]
  -[CPLSuggestionAssetFlag copyTo:]
  -[CPLSuggestionAssetFlag readFrom:]
  -[CPLSuggestionAssetFlag copyWithZone:]
  -[CPLSuggestionAssetFlag setHasIsRepresentative:]
  -[CPLSuggestionAssetFlag hasIsRepresentative]
  -[CPLSuggestionAssetFlag setHasIsKeyAsset:]
  -[CPLSuggestionAssetFlag hasIsKeyAsset]


CPLEngineSyncTask : NSObject
 @property  BOOL cancelled
 @property  <CPLEngineSyncTaskDelegate> *delegate
 @property  CPLEngineLibrary *engineLibrary
 @property  CPLSyncSession *session
 @property  <CPLEngineStoreUserIdentifier> *transportUserIdentifier
 @property  BOOL foreground
 @property  BOOL forceSync
 @property  NSString *taskIdentifier
 @property  NSString *phaseDescription

  // class methods
  +[CPLEngineSyncTask taskWithEngineLibrary:session:]

  // instance methods
  -[CPLEngineSyncTask setForeground:]
  -[CPLEngineSyncTask foreground]
  -[CPLEngineSyncTask taskDidFinishWithError:]
  -[CPLEngineSyncTask .cxx_destruct]
  -[CPLEngineSyncTask setDelegate:]
  -[CPLEngineSyncTask isCancelled]
  -[CPLEngineSyncTask forceSync]
  -[CPLEngineSyncTask setPhaseDescription:]
  -[CPLEngineSyncTask phaseDescription]
  -[CPLEngineSyncTask launch]
  -[CPLEngineSyncTask cancel]
  -[CPLEngineSyncTask delegate]
  -[CPLEngineSyncTask initWithEngineLibrary:session:]
  -[CPLEngineSyncTask engineLibrary]
  -[CPLEngineSyncTask session]
  -[CPLEngineSyncTask diskPressureState]
  -[CPLEngineSyncTask taskIdentifier]
  -[CPLEngineSyncTask _setCancelled:]
  -[CPLEngineSyncTask launchTransportTask:withTransportGroup:]
  -[CPLEngineSyncTask taskDidProgress:userInfo:]
  -[CPLEngineSyncTask setTransportUserIdentifier:]
  -[CPLEngineSyncTask phaseDescriptionLastChangeDate:]
  -[CPLEngineSyncTask transportUserIdentifier]
  -[CPLEngineSyncTask setForceSync:]


CPLEngineMultiscopeSyncTask : CPLEngineSyncTask <CPLEngineSyncTaskDelegate>
 @property  CPLEngineScopeStorage *scopes
 @property  CPLScopeFilter *scopeFilter
 @property  BOOL shouldSkipScopesWithMissingTransportScope
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineMultiscopeSyncTask scopes]
  -[CPLEngineMultiscopeSyncTask task:didFinishWithError:]
  -[CPLEngineMultiscopeSyncTask setForeground:]
  -[CPLEngineMultiscopeSyncTask .cxx_destruct]
  -[CPLEngineMultiscopeSyncTask enumerateScopesForTaskInTransaction:]
  -[CPLEngineMultiscopeSyncTask newScopedTaskWithScope:session:transportScope:clientCacheIdentifier:]
  -[CPLEngineMultiscopeSyncTask shouldProcessScope:inTransaction:]
  -[CPLEngineMultiscopeSyncTask phaseDescription]
  -[CPLEngineMultiscopeSyncTask launch]
  -[CPLEngineMultiscopeSyncTask setScopeFilter:]
  -[CPLEngineMultiscopeSyncTask cancel]
  -[CPLEngineMultiscopeSyncTask initWithEngineLibrary:session:]
  -[CPLEngineMultiscopeSyncTask scopeFilter]
  -[CPLEngineMultiscopeSyncTask shouldSkipScopesWithMissingTransportScope]
  -[CPLEngineMultiscopeSyncTask task:didProgress:userInfo:]
  -[CPLEngineMultiscopeSyncTask _currentTask]
  -[CPLEngineMultiscopeSyncTask dispatchAsyncWithCurrentSubtask:]
  -[CPLEngineMultiscopeSyncTask phaseDescriptionLastChangeDate:]
  -[CPLEngineMultiscopeSyncTask setForceSync:]
  -[CPLEngineMultiscopeSyncTask _setCurrentTask:]
  -[CPLEngineMultiscopeSyncTask shouldStartTaskInTransaction:]
  -[CPLEngineMultiscopeSyncTask _launchTaskForNextScope]
  -[CPLEngineMultiscopeSyncTask shouldContinueAfterError:fromTask:]
  -[CPLEngineMultiscopeSyncTask _currentScope]


CPLEngineScopedTask : CPLEngineSyncTask
 @property  NSString *clientCacheIdentifier
 @property  CPLEngineScope *scope
 @property  NSData *transportScope
 @property  CPLEngineStore *store

  // instance methods
  -[CPLEngineScopedTask checkScopeIsValidInTransaction:]
  -[CPLEngineScopedTask clientCacheIdentifier]
  -[CPLEngineScopedTask transportScope]
  -[CPLEngineScopedTask .cxx_destruct]
  -[CPLEngineScopedTask scope]
  -[CPLEngineScopedTask store]
  -[CPLEngineScopedTask initWithEngineLibrary:session:clientCacheIdentifier:scope:transportScope:]


CPLRecordView : NSObject
 @property  CPLScopedIdentifier *scopedIdentifier
 @property  CPLRecordChange *synthesizedRecord
 @property  CPLPlaceholderRecord *placeholderRecord
 @property  NSData *recordChangeData

  // instance methods
  -[CPLRecordView redactedDescription]
  -[CPLRecordView relation]
  -[CPLRecordView secondaryScopedIdentifier]
  -[CPLRecordView supportsResources]
  -[CPLRecordView relatedScopedIdentifier]
  -[CPLRecordView synthesizedRecord]
  -[CPLRecordView recordClass]
  -[CPLRecordView recordChangeData]
  -[CPLRecordView scopedIdentifier]
  -[CPLRecordView changeForType:]
  -[CPLRecordView placeholderRecord]
  -[CPLRecordView realRecordChangeFromRecordChange:direction:newRecord:changeType:diffTracker:]
  -[CPLRecordView realRecordChangeFromRecordChange:direction:newRecord:diffTracker:]
  -[CPLRecordView realRecordChangeFromRecordChange:direction:newRecord:]


CPLRecordStorageView : NSObject
  // instance methods
  -[CPLRecordStorageView hasRecordWithScopedIdentifier:]
  -[CPLRecordStorageView countOfRecordsWithRelatedScopedIdentifier:class:]
  -[CPLRecordStorageView resourceOfType:forRecordWithScopedIdentifier:recordClass:error:]
  -[CPLRecordStorageView recordViewsWithRelatedScopedIdentifier:class:]
  -[CPLRecordStorageView relatedScopedIdentifierForRecordWithScopedIdentifier:]
  -[CPLRecordStorageView recordViewWithScopedIdentifier:]
  -[CPLRecordStorageView resourceOfType:forRecordWithScopedIdentifier:record:error:]
  -[CPLRecordStorageView compactedBatchFromExpandedBatch:]
  -[CPLRecordStorageView localChangeBatchFromCloudBatch:usingMapping:withError:]


CPLSuggestionAsset : PBCodable <NSCopying>
 @property  BOOL hasAssetIdentifier
 @property  NSString *assetIdentifier
 @property  BOOL hasAssetFlag
 @property  CPLSuggestionAssetFlag *assetFlag
 @property  BOOL hasActionData
 @property  NSData *actionData
 @property  BOOL hasMasterFingerprint
 @property  NSString *masterFingerprint

  // instance methods
  -[CPLSuggestionAsset mergeFrom:]
  -[CPLSuggestionAsset .cxx_destruct]
  -[CPLSuggestionAsset setAssetFlag:]
  -[CPLSuggestionAsset setMasterFingerprint:]
  -[CPLSuggestionAsset dictionaryRepresentation]
  -[CPLSuggestionAsset writeTo:]
  -[CPLSuggestionAsset isEqual:]
  -[CPLSuggestionAsset copyTo:]
  -[CPLSuggestionAsset readFrom:]
  -[CPLSuggestionAsset assetIdentifier]
  -[CPLSuggestionAsset setAssetIdentifier:]
  -[CPLSuggestionAsset actionData]
  -[CPLSuggestionAsset copyWithZone:]
  -[CPLSuggestionAsset assetFlag]
  -[CPLSuggestionAsset setActionData:]
  -[CPLSuggestionAsset hasAssetIdentifier]
  -[CPLSuggestionAsset hasAssetFlag]
  -[CPLSuggestionAsset hasMasterFingerprint]
  -[CPLSuggestionAsset masterFingerprint]
  -[CPLSuggestionAsset hasActionData]


CPLMemoryAssetFlag : PBCodable <NSCopying>
 @property  BOOL hasIsRepresentative
 @property  BOOL isRepresentative
 @property  BOOL hasIsCurated
 @property  BOOL isCurated
 @property  BOOL hasIsMovieCurated
 @property  BOOL isMovieCurated
 @property  BOOL hasIsKeyAsset
 @property  BOOL isKeyAsset
 @property  BOOL hasIsExtendedCurated
 @property  BOOL isExtendedCurated
 @property  BOOL hasIsUserCurated
 @property  BOOL isUserCurated

  // instance methods
  -[CPLMemoryAssetFlag isCurated]
  -[CPLMemoryAssetFlag mergeFrom:]
  -[CPLMemoryAssetFlag isKeyAsset]
  -[CPLMemoryAssetFlag isUserCurated]
  -[CPLMemoryAssetFlag isRepresentative]
  -[CPLMemoryAssetFlag setIsKeyAsset:]
  -[CPLMemoryAssetFlag setIsRepresentative:]
  -[CPLMemoryAssetFlag dictionaryRepresentation]
  -[CPLMemoryAssetFlag writeTo:]
  -[CPLMemoryAssetFlag isEqual:]
  -[CPLMemoryAssetFlag copyTo:]
  -[CPLMemoryAssetFlag readFrom:]
  -[CPLMemoryAssetFlag isExtendedCurated]
  -[CPLMemoryAssetFlag isMovieCurated]
  -[CPLMemoryAssetFlag setIsCurated:]
  -[CPLMemoryAssetFlag setIsExtendedCurated:]
  -[CPLMemoryAssetFlag setIsMovieCurated:]
  -[CPLMemoryAssetFlag setIsUserCurated:]
  -[CPLMemoryAssetFlag copyWithZone:]
  -[CPLMemoryAssetFlag setHasIsRepresentative:]
  -[CPLMemoryAssetFlag hasIsRepresentative]
  -[CPLMemoryAssetFlag setHasIsKeyAsset:]
  -[CPLMemoryAssetFlag hasIsKeyAsset]
  -[CPLMemoryAssetFlag setHasIsCurated:]
  -[CPLMemoryAssetFlag hasIsCurated]
  -[CPLMemoryAssetFlag setHasIsMovieCurated:]
  -[CPLMemoryAssetFlag hasIsMovieCurated]
  -[CPLMemoryAssetFlag setHasIsExtendedCurated:]
  -[CPLMemoryAssetFlag hasIsExtendedCurated]
  -[CPLMemoryAssetFlag setHasIsUserCurated:]
  -[CPLMemoryAssetFlag hasIsUserCurated]


CPLPersonChange : CPLRecordChange <NSSecureCoding, NSCopying>
 @property  NSData *contactDescriptor
 @property  NSString *fullName
 @property  long long personType
 @property  long long manualSortOrder
 @property  NSDictionary *contactMatchingDictionary
 @property  NSString *displayName
 @property  long long verifiedType
 @property  NSString *mergeTargetPersonIdentifier

  // class methods
  +[CPLPersonChange cplShouldIgnorePropertyForCoding:]
  +[CPLPersonChange serverSupportsMergeTargetRef]
  +[CPLPersonChange cplShouldIgnorePropertyForEquality:]
  +[CPLPersonChange serverSupportsGraphPeopleHome]
  +[CPLPersonChange relatedRecordClass]

  // instance methods
  -[CPLPersonChange displayName]
  -[CPLPersonChange fullName]
  -[CPLPersonChange setContactMatchingDictionary:]
  -[CPLPersonChange .cxx_destruct]
  -[CPLPersonChange setFullName:]
  -[CPLPersonChange personType]
  -[CPLPersonChange manualSortOrder]
  -[CPLPersonChange mergeTargetPersonIdentifier]
  -[CPLPersonChange setDisplayName:]
  -[CPLPersonChange setVerifiedType:]
  -[CPLPersonChange contactMatchingDictionary]
  -[CPLPersonChange supportsDeletion]
  -[CPLPersonChange verifiedType]
  -[CPLPersonChange setPersonType:]
  -[CPLPersonChange setManualSortOrder:]
  -[CPLPersonChange setMergeTargetPersonIdentifier:]
  -[CPLPersonChange supportsDirectDeletion]
  -[CPLPersonChange relatedIdentifier]
  -[CPLPersonChange setRelatedIdentifier:]
  -[CPLPersonChange contactDescriptor]
  -[CPLPersonChange setContactDescriptor:]
  -[CPLPersonChange validateRecordForTracker:]


CPLPushSessionTracker : NSObject
 @property  CPLChangeBatch *incomingBatch
 @property  CPLEngineStore *store
 @property  CPLChangeBatch *expandedBatch
 @property  NSSet *unquarantinedRecordScopedIdentifiers
 @property  CPLPushChangeTasks *pushChangeTasks
 @property  BOOL hasPushChangeTasks
 @property  CPLChangeBatch *diffedBatch
 @property  NSArray *addedRecords
 @property  NSArray *updatedRecords
 @property  NSArray *deletedRecordScopedIdentifiers
 @property  NSDictionary *resourcesToUpload
 @property  NSDictionary *recordWithStatusChangesToNotify
 @property  unsigned long ignoredRecordCount
 @property  BOOL diffedBatchCanLowerQuota
 @property  NSDate *now
 @property  BOOL expandHasBeenSuccessful
 @property  BOOL diffHasBeenSuccessful
 @property  BOOL applyHasBeenSuccessful

  // class methods
  +[CPLPushSessionTracker notifyClientOfStore:ofStatusChanges:error:]

  // instance methods
  -[CPLPushSessionTracker setNow:]
  -[CPLPushSessionTracker now]
  -[CPLPushSessionTracker .cxx_destruct]
  -[CPLPushSessionTracker addedRecords]
  -[CPLPushSessionTracker store]
  -[CPLPushSessionTracker resourcesToUpload]
  -[CPLPushSessionTracker diffedBatch]
  -[CPLPushSessionTracker updatedRecords]
  -[CPLPushSessionTracker deletedRecordScopedIdentifiers]
  -[CPLPushSessionTracker unquarantinedRecordScopedIdentifiers]
  -[CPLPushSessionTracker recordWithStatusChangesToNotify]
  -[CPLPushSessionTracker hasClientRecordWithLocalScopedIdentifier:]
  -[CPLPushSessionTracker storedClientRecordWithLocalScopedIdentifier:]
  -[CPLPushSessionTracker _resourceIdentitiesFromChange:]
  -[CPLPushSessionTracker enqueuedOrStoredRecordWithLocalScopedIdentifier:]
  -[CPLPushSessionTracker knowsClientRecordWithScopedIdentifier:]
  -[CPLPushSessionTracker resourceIdentitiesForRecordWithLocalScopedIdentifier:]
  -[CPLPushSessionTracker storedCloudRecordWithLocalScopedIdentifier:]
  -[CPLPushSessionTracker _realChangeFromChange:comparedToStoredRecord:changeType:]
  -[CPLPushSessionTracker acknowledgeNewClientRecord:withScopedIdentifier:]
  -[CPLPushSessionTracker hasCloudRecordWithLocalScopedIdentifier:]
  -[CPLPushSessionTracker initWithIncomingBatch:store:error:]
  -[CPLPushSessionTracker hasPushChangeTasks]
  -[CPLPushSessionTracker checkScopeIdentifier:]
  -[CPLPushSessionTracker computeExpandedBatchWithError:]
  -[CPLPushSessionTracker computeDiff]
  -[CPLPushSessionTracker enumerateDiffWithBlock:]
  -[CPLPushSessionTracker deletedRecordIdentifiers]
  -[CPLPushSessionTracker notifyClientOfStatusChangesIfNecessaryWithError:]
  -[CPLPushSessionTracker shouldCancelSyncSessionTryingToUploadChange:]
  -[CPLPushSessionTracker incomingBatch]
  -[CPLPushSessionTracker expandedBatch]
  -[CPLPushSessionTracker pushChangeTasks]
  -[CPLPushSessionTracker ignoredRecordCount]
  -[CPLPushSessionTracker diffedBatchCanLowerQuota]
  -[CPLPushSessionTracker expandHasBeenSuccessful]
  -[CPLPushSessionTracker diffHasBeenSuccessful]
  -[CPLPushSessionTracker applyHasBeenSuccessful]


CPLEngineLibrary : NSObject <CPLStatusDelegate, CPLAbstractObject>
 @property  BOOL libraryIsCorrupted
 @property  NSString *currentClosingComponentName
 @property  NSURL *clientLibraryBaseURL
 @property  NSURL *cloudLibraryStateStorageURL
 @property  NSURL *cloudLibraryResourceStorageURL
 @property  NSString *libraryIdentifier
 @property  BOOL isSystemLibrary
 @property  unsigned long libraryOptions
 @property  <CPLEngineLibraryOwner> *owner
 @property  CPLEngineStore *store
 @property  CPLEngineScheduler *scheduler
 @property  CPLEngineSyncManager *syncManager
 @property  CPLEngineTransport *transport
 @property  CPLEngineSystemMonitor *systemMonitor
 @property  CPLEngineFeedbackManager *feedback
 @property  CPLConfiguration *configuration
 @property  BOOL hasChangesToProcess
 @property  BOOL upgradeSuggestedToAccessAllPhotos
 @property  BOOL containerHasBeenWiped
 @property  BOOL iCloudLibraryClientVersionTooOld
 @property  NSDate *initialSyncDate
 @property  BOOL isExceedingQuota
 @property  BOOL iCloudLibraryHasBeenWiped
 @property  BOOL iCloudLibraryExists
 @property  NSDate *exitDeleteTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  CPLPlatformObject *platformObject

  // class methods
  +[CPLEngineLibrary platformImplementationProtocol]

  // instance methods
  -[CPLEngineLibrary openWithCompletionHandler:]
  -[CPLEngineLibrary feedback]
  -[CPLEngineLibrary componentName]
  -[CPLEngineLibrary closeAndDeactivate:completionHandler:]
  -[CPLEngineLibrary provideCloudResource:completionHandler:]
  -[CPLEngineLibrary requestClientToPushAllChangesWithCompletionHandler:]
  -[CPLEngineLibrary provideRecordWithCloudScopeIdentifier:completionHandler:]
  -[CPLEngineLibrary testKey:value:completionHandler:]
  -[CPLEngineLibrary getStatusForComponents:completionHandler:]
  -[CPLEngineLibrary getStatusArrayForComponents:completionHandler:]
  -[CPLEngineLibrary transport]
  -[CPLEngineLibrary startSyncSession]
  -[CPLEngineLibrary getListOfComponentsWithCompletionHandler:]
  -[CPLEngineLibrary provideScopeChangeForScopeWithIdentifier:completionHandler:]
  -[CPLEngineLibrary systemMonitor]
  -[CPLEngineLibrary clientLibraryBaseURL]
  -[CPLEngineLibrary redactedDescription]
  -[CPLEngineLibrary setHasCellularBudget:hasBatteryBudget:isConstrainedNetwork:isBlockedByLowPowerMode:isBudgetValid:]
  -[CPLEngineLibrary setIsExceedingQuota:]
  -[CPLEngineLibrary libraryIdentifier]
  -[CPLEngineLibrary setICloudLibraryClientVersionTooOld:]
  -[CPLEngineLibrary configuration]
  -[CPLEngineLibrary setContainerHasBeenWiped:]
  -[CPLEngineLibrary .cxx_destruct]
  -[CPLEngineLibrary setLowDiskSpace:]
  -[CPLEngineLibrary platformObject]
  -[CPLEngineLibrary corruptionInfo]
  -[CPLEngineLibrary scheduler]
  -[CPLEngineLibrary initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:options:]
  -[CPLEngineLibrary initialSyncDate]
  -[CPLEngineLibrary syncManager]
  -[CPLEngineLibrary setOwner:]
  -[CPLEngineLibrary hasChangesToProcess]
  -[CPLEngineLibrary owner]
  -[CPLEngineLibrary setConnectedToNetwork:cellularIsRestricted:inAirplaneMode:]
  -[CPLEngineLibrary emergencyClose]
  -[CPLEngineLibrary statusDidChange:]
  -[CPLEngineLibrary iCloudLibraryClientVersionTooOld]
  -[CPLEngineLibrary store]
  -[CPLEngineLibrary setICloudLibraryExists:]
  -[CPLEngineLibrary setHasChangesToProcess:]
  -[CPLEngineLibrary setICloudLibraryHasBeenWiped:]
  -[CPLEngineLibrary libraryOptions]
  -[CPLEngineLibrary setExitDeleteTime:]
  -[CPLEngineLibrary setUpgradeSuggestedToAccessAllPhotos:]
  -[CPLEngineLibrary exitDeleteTime]
  -[CPLEngineLibrary iCloudLibraryHasBeenWiped]
  -[CPLEngineLibrary cloudLibraryStateStorageURL]
  -[CPLEngineLibrary isExceedingQuota]
  -[CPLEngineLibrary containerHasBeenWiped]
  -[CPLEngineLibrary cloudLibraryResourceStorageURL]
  -[CPLEngineLibrary isUpgradeSuggestedToAccessAllPhotos]
  -[CPLEngineLibrary iCloudLibraryExists]
  -[CPLEngineLibrary notifyAttachedObjectsSizeOfResourcesToUploadDidChangeToSize:sizeOfOriginalResourcesToUpload:numberOfImages:numberOfVideos:numberOfOtherItems:]
  -[CPLEngineLibrary notifyAttachedObjectsPullQueueIsFull]
  -[CPLEngineLibrary updateDisabledFeatures:]
  -[CPLEngineLibrary updateLastSuccessfullSyncDate:]
  -[CPLEngineLibrary requestAttachedLibrary]
  -[CPLEngineLibrary libraryIsCorrupted]
  -[CPLEngineLibrary reportUnsuccessfulSync]
  -[CPLEngineLibrary updateInitialSyncDate:]
  -[CPLEngineLibrary updateAssetCountsFromServer:]
  -[CPLEngineLibrary updateAccountFlagsData:]
  -[CPLEngineLibrary reportLibraryCorrupted]
  -[CPLEngineLibrary notifyAttachedObjectsUploadTask:didFinishWithError:]
  -[CPLEngineLibrary notifyAttachedObjectsUploadTask:didProgress:]
  -[CPLEngineLibrary notifyAttachedObjectsUploadTaskDidStart:]
  -[CPLEngineLibrary notifyAttachedObjectsResourceDidFailBackgroundDownloadOfResource:]
  -[CPLEngineLibrary notifyAttachedObjectsResourceDidDowloadInBackground:]
  -[CPLEngineLibrary _reportQuarantineCountIfNecessaryWithLastReportDate:]
  -[CPLEngineLibrary _openNextComponent:completionHandler:]
  -[CPLEngineLibrary _setCurrentClosingComponentName:]
  -[CPLEngineLibrary _closeNextComponent:deactivate:lastError:completionHandler:]
  -[CPLEngineLibrary _performPendingBlockForWhenLibraryAttaches]
  -[CPLEngineLibrary _updateTotalAssetCountWithAssetCounts:]
  -[CPLEngineLibrary _libraryObject]
  -[CPLEngineLibrary _performBlockWhenLibraryAttaches:]
  -[CPLEngineLibrary _cancelBlockWhenLibraryAttaches:]
  -[CPLEngineLibrary _performBlockWithLibrary:enumerateAttachedObjects:]
  -[CPLEngineLibrary performBlockOnLibrary:]
  -[CPLEngineLibrary reportQuarantineCountIfNecessary]
  -[CPLEngineLibrary reportRadar:]
  -[CPLEngineLibrary currentClosingComponentName]
  -[CPLEngineLibrary totalAssetCountOnServer]
  -[CPLEngineLibrary hasAssetCountOnServer]
  -[CPLEngineLibrary hasAccountFlagsData]
  -[CPLEngineLibrary clientIsPushingChanges]
  -[CPLEngineLibrary forceFetchAccountFlags]
  -[CPLEngineLibrary attachObject:withCompletionHandler:]
  -[CPLEngineLibrary detachObject:withCompletionHandler:]
  -[CPLEngineLibrary markAttachedObjectAsInvalid:]
  -[CPLEngineLibrary notifyAttachedObjectsHasStatusChanges]
  -[CPLEngineLibrary forceBackupWithActivity:forceClientPush:completionHandler:]
  -[CPLEngineLibrary performMaintenanceCleanupWithCompletionHandler:]
  -[CPLEngineLibrary isSystemLibrary]
  -[CPLEngineLibrary _fillStatus:forComponents:completionHandler:]
  -[CPLEngineLibrary _fillStatusArray:forComponents:completionHandler:]
  -[CPLEngineLibrary _allComponentsIncludingPlatformObjects:respondingToSelector:]
  -[CPLEngineLibrary _testKey:value:completionHandler:]


CPLEngineComponentEnumerator : NSObject
  // instance methods
  -[CPLEngineComponentEnumerator .cxx_destruct]
  -[CPLEngineComponentEnumerator handleNextComponent]
  -[CPLEngineComponentEnumerator initWithComponents:handler:]


CPLScopeUpdateTask : CPLEngineMultiscopeSyncTask
  // instance methods
  -[CPLScopeUpdateTask enumerateScopesForTaskInTransaction:]
  -[CPLScopeUpdateTask newScopedTaskWithScope:session:transportScope:clientCacheIdentifier:]
  -[CPLScopeUpdateTask shouldSkipScopesWithMissingTransportScope]
  -[CPLScopeUpdateTask taskIdentifier]


CPLScopeUpdateScopeTask : CPLEngineScopedTask
  // instance methods
  -[CPLScopeUpdateScopeTask checkScopeIsValidInTransaction:]
  -[CPLScopeUpdateScopeTask _fetchTransportScope]
  -[CPLScopeUpdateScopeTask .cxx_destruct]
  -[CPLScopeUpdateScopeTask _markScopeAsFeatureDisabledWithFlags:]
  -[CPLScopeUpdateScopeTask launch]
  -[CPLScopeUpdateScopeTask _markScopeAsDeletedAndSucceedTaskWithFlags:]
  -[CPLScopeUpdateScopeTask cancel]
  -[CPLScopeUpdateScopeTask _getLibraryInfo]
  -[CPLScopeUpdateScopeTask initWithEngineLibrary:session:clientCacheIdentifier:scope:transportScope:]
  -[CPLScopeUpdateScopeTask _markScopeHasBadTransportScopeWithError:]
  -[CPLScopeUpdateScopeTask taskIdentifier]


CPLSyncStep : NSObject <CPLEngineSyncTaskDelegate>
 @property  CPLEngineLibrary *engineLibrary
 @property  CPLEngineStore *engineStore
 @property  CPLEngineSyncManager *syncManager
 @property  CPLSyncSession *syncSession
 @property  NSString *descriptionForTasks
 @property  NSError *lastError
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLSyncStep task:didFinishWithError:]
  -[CPLSyncStep lastError]
  -[CPLSyncStep .cxx_destruct]
  -[CPLSyncStep syncManager]
  -[CPLSyncStep launchNecessaryTasks]
  -[CPLSyncStep moveTasksToBackground]
  -[CPLSyncStep syncSession]
  -[CPLSyncStep descriptionForTasks]
  -[CPLSyncStep engineLibrary]
  -[CPLSyncStep task:didProgress:userInfo:]
  -[CPLSyncStep didFinishTask:withError:shouldStop:]
  -[CPLSyncStep cancelAllTasks:]
  -[CPLSyncStep engineStore]
  -[CPLSyncStep initWithSyncManager:syncSession:]
  -[CPLSyncStep progressForTask:progress:]
  -[CPLSyncStep prepareAndLaunchSyncTask:]
  -[CPLSyncStep setErrorForSyncSession:]


CPLSimpleTaskSyncStep : CPLSyncStep
 @property  Class taskClass
 @property  CPLEngineSyncTask *currentTask

  // instance methods
  -[CPLSimpleTaskSyncStep .cxx_destruct]
  -[CPLSimpleTaskSyncStep newTask]
  -[CPLSimpleTaskSyncStep taskClass]
  -[CPLSimpleTaskSyncStep launchNecessaryTasks]
  -[CPLSimpleTaskSyncStep moveTasksToBackground]
  -[CPLSimpleTaskSyncStep descriptionForTasks]
  -[CPLSimpleTaskSyncStep didFinishTask:withError:shouldStop:]
  -[CPLSimpleTaskSyncStep currentTask]
  -[CPLSimpleTaskSyncStep cancelAllTasks:]
  -[CPLSimpleTaskSyncStep initWithSyncManager:syncSession:taskClass:]


CPLPushToTransportSyncStep : CPLSimpleTaskSyncStep
 @property  BOOL highPriority

  // instance methods
  -[CPLPushToTransportSyncStep highPriority]
  -[CPLPushToTransportSyncStep newTask]
  -[CPLPushToTransportSyncStep initWithSyncManager:syncSession:highPriority:]
  -[CPLPushToTransportSyncStep cancelAllTasks:]


CPLPullFromTransportSyncStep : CPLSyncStep
  // instance methods
  -[CPLPullFromTransportSyncStep .cxx_destruct]
  -[CPLPullFromTransportSyncStep _releasePowerAssertionForMingleTaskIfNecessary]
  -[CPLPullFromTransportSyncStep launchNecessaryTasks]
  -[CPLPullFromTransportSyncStep _retainPowerAssertionForMingleTaskIfNecessary]
  -[CPLPullFromTransportSyncStep moveTasksToBackground]
  -[CPLPullFromTransportSyncStep descriptionForTasks]
  -[CPLPullFromTransportSyncStep didFinishTask:withError:shouldStop:]
  -[CPLPullFromTransportSyncStep cancelAllTasks:]


CPLEngineFeedbackManager : NSObject <CPLEngineComponent>
 @property  CPLEngineLibrary *engineLibrary
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineFeedbackManager openWithCompletionHandler:]
  -[CPLEngineFeedbackManager componentName]
  -[CPLEngineFeedbackManager closeAndDeactivate:completionHandler:]
  -[CPLEngineFeedbackManager reportSetting:hasBeenSetToValue:]
  -[CPLEngineFeedbackManager _save]
  -[CPLEngineFeedbackManager _load]
  -[CPLEngineFeedbackManager testKey:value:completionHandler:]
  -[CPLEngineFeedbackManager reportMiscInformation:]
  -[CPLEngineFeedbackManager reportFetchChangesRewindToFeatureVersion:]
  -[CPLEngineFeedbackManager reportResetType:reason:uuid:]
  -[CPLEngineFeedbackManager .cxx_destruct]
  -[CPLEngineFeedbackManager sendFeedbackToServerIfNecessary]
  -[CPLEngineFeedbackManager reportEndOfResetWithUUID:reason:]
  -[CPLEngineFeedbackManager _sendFeedbackToServerIfNecessary]
  -[CPLEngineFeedbackManager reportMessage:]
  -[CPLEngineFeedbackManager _reallySendFeedbackToServer]
  -[CPLEngineFeedbackManager _appendMessage:]
  -[CPLEngineFeedbackManager _appendMessages:]
  -[CPLEngineFeedbackManager engineLibrary]
  -[CPLEngineFeedbackManager getStatusWithCompletionHandler:]
  -[CPLEngineFeedbackManager reportMessages:]
  -[CPLEngineFeedbackManager initWithEngineLibrary:]


CPLTestFeedbackMessage : CPLFeedbackMessage
 @property  NSString *testMessage

  // class methods
  +[CPLTestFeedbackMessage feedbackType]

  // instance methods
  -[CPLTestFeedbackMessage .cxx_destruct]
  -[CPLTestFeedbackMessage serverMessage]
  -[CPLTestFeedbackMessage initWithTestMessage:libraryIdentifier:]
  -[CPLTestFeedbackMessage testMessage]


CPLEngineCloudCache : CPLEngineStorage <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineCloudCache scopeType]
  -[CPLEngineCloudCache recordsAcknowledgedByClientWithRelatedScopedIdentifier:class:]
  -[CPLEngineCloudCache cloudChangeBatchFromBatch:usingMapping:isFinal:withError:]
  -[CPLEngineCloudCache hasRecordWithScopedIdentifier:]
  -[CPLEngineCloudCache getCommittedRecord:stagedRecord:forScopedIdentifier:]
  -[CPLEngineCloudCache recordsOfClass:isFinal:]
  -[CPLEngineCloudCache deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineCloudCache recordWithScopedIdentifier:isConfirmed:isStaged:]
  -[CPLEngineCloudCache confirmAllRecordsWithError:]
  -[CPLEngineCloudCache allRecordsIsFinal:]
  -[CPLEngineCloudCache commitStagedChangesForScopeWithIdentifier:error:]
  -[CPLEngineCloudCache countOfRecordsAcknowledgedByClientWithRelatedScopedIdentifier:class:]
  -[CPLEngineCloudCache updateFinalRecord:confirmed:error:]
  -[CPLEngineCloudCache discardStagedChangesWithScopeFilter:error:]
  -[CPLEngineCloudCache deleteRecordWithScopedIdentifier:isFinal:error:]
  -[CPLEngineCloudCache recordAcknowledgedByClientWithScopedIdentifier:]
  -[CPLEngineCloudCache updateStagedRecord:error:]
  -[CPLEngineCloudCache recordWithScopedIdentifier:isFinal:]
  -[CPLEngineCloudCache recordsWithRelatedScopedIdentifier:isFinal:]
  -[CPLEngineCloudCache addRecord:isFinal:error:]
  -[CPLEngineCloudCache recordsWithRelatedScopedIdentifier:class:isFinal:]
  -[CPLEngineCloudCache hasRecordAcknowledgedByClientWithScopedIdentifier:]
  -[CPLEngineCloudCache _remapRecord:inBatch:error:]
  -[CPLEngineCloudCache remapAllRecordsWithPreviousScopedIdentifier:newScopedIdentifier:error:]
  -[CPLEngineCloudCache applyBatch:isFinal:direction:withError:]
  -[CPLEngineCloudCache ackownledgeRecordWithScopedIdentifier:error:]
  -[CPLEngineCloudCache relatedScopedIdentifierForRecordWithScopedIdentifier:isFinal:]
  -[CPLEngineCloudCache resourceOfType:forRecordWithScopedIdentifier:record:error:]
  -[CPLEngineCloudCache discardStagedChangesForScopeWithIdentifier:error:]


CPLPushChangeTasks : NSObject <NSSecureCoding, NSCopying>
 @property  BOOL hasTasks

  // class methods
  +[CPLPushChangeTasks supportsSecureCoding]
  +[CPLPushChangeTasks descriptionForTaskType:]

  // instance methods
  -[CPLPushChangeTasks initEmpty]
  -[CPLPushChangeTasks initWithCoder:]
  -[CPLPushChangeTasks .cxx_destruct]
  -[CPLPushChangeTasks hasTasks]
  -[CPLPushChangeTasks enumerateScopedTasksWithBlock:]
  -[CPLPushChangeTasks copyWithZone:]
  -[CPLPushChangeTasks encodeWithCoder:]
  -[CPLPushChangeTasks addTask:forRecordWithScopedIdentifier:]
  -[CPLPushChangeTasks invalidRecordScopedIdentifiers]
  -[CPLPushChangeTasks _commitTasks]
  -[CPLPushChangeTasks _descriptionFromTasksByType:]
  -[CPLPushChangeTasks enumerateTasksWithBlock:]
  -[CPLPushChangeTasks invalidRecordIdentifiers]


CPLPushChangeSession : CPLChangeSession <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLPushChangeSession shortDescription]

  // instance methods
  -[CPLPushChangeSession initWithLibraryManager:]
  -[CPLPushChangeSession commitChangeBatch:completionHandler:]
  -[CPLPushChangeSession commitChangeBatch:withUnderlyingCompletionHandler:]


CPLFeature : NSObject
  // class methods
  +[CPLFeature featureWithName:]

  // instance methods
  -[CPLFeature enableFeatureInStore:error:]
  -[CPLFeature disableFeatureInStore:error:]
  -[CPLFeature handleScopeWhenFeatureIsDisabled:scopeType:store:error:]
  -[CPLFeature shouldDisableScopeWhenFeatureIsDisabled:]


CPLMomentShareFeature : CPLFeature
  // instance methods
  -[CPLMomentShareFeature enableFeatureInStore:error:]
  -[CPLMomentShareFeature disableFeatureInStore:error:]
  -[CPLMomentShareFeature handleScopeWhenFeatureIsDisabled:scopeType:store:error:]


CPLEngineForceSyncTask : CPLForceSyncTask <CPLEngineSyncTaskDelegate>
 @property  <CPLEngineStoreUserIdentifier> *transportUserIdentifier
 @property  NSDate *creationDate
 @property  CPLScopeFilter *filter
 @property  CPLEngineLibrary *engineLibrary
 @property  <CPLEngineForceSyncTaskDelegate> *delegate
 @property  @? taskDidFinishWithErrorBlock
 @property  NSObject<OS_xpc_object> *taskActivity
 @property  BOOL forBackup
 @property  BOOL shouldUpdateScopeList
 @property  BOOL bypassForceSyncLimitations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineForceSyncTask task:didFinishWithError:]
  -[CPLEngineForceSyncTask setFilter:]
  -[CPLEngineForceSyncTask .cxx_destruct]
  -[CPLEngineForceSyncTask setDelegate:]
  -[CPLEngineForceSyncTask filter]
  -[CPLEngineForceSyncTask _phaseDescription]
  -[CPLEngineForceSyncTask _finishWithError:]
  -[CPLEngineForceSyncTask creationDate]
  -[CPLEngineForceSyncTask delegate]
  -[CPLEngineForceSyncTask engineLibrary]
  -[CPLEngineForceSyncTask dealloc]
  -[CPLEngineForceSyncTask cancelTask]
  -[CPLEngineForceSyncTask task:didProgress:userInfo:]
  -[CPLEngineForceSyncTask _currentTask]
  -[CPLEngineForceSyncTask setTransportUserIdentifier:]
  -[CPLEngineForceSyncTask transportUserIdentifier]
  -[CPLEngineForceSyncTask setTaskActivity:]
  -[CPLEngineForceSyncTask setBypassForceSyncLimitations:]
  -[CPLEngineForceSyncTask setTaskDidFinishWithErrorBlock:]
  -[CPLEngineForceSyncTask launchTask]
  -[CPLEngineForceSyncTask _dispatchSyncTask:]
  -[CPLEngineForceSyncTask taskDidFinishWithErrorBlock]
  -[CPLEngineForceSyncTask forBackup]
  -[CPLEngineForceSyncTask _dispatchNextSyncTask]
  -[CPLEngineForceSyncTask _dropCurrentTask]
  -[CPLEngineForceSyncTask initWithScopeIdentifiers:engineLibrary:filter:delegate:]
  -[CPLEngineForceSyncTask taskActivity]
  -[CPLEngineForceSyncTask reallyLaunch]
  -[CPLEngineForceSyncTask reallyCancel]
  -[CPLEngineForceSyncTask setEngineLibrary:]
  -[CPLEngineForceSyncTask shouldUpdateScopeList]
  -[CPLEngineForceSyncTask setShouldUpdateScopeList:]
  -[CPLEngineForceSyncTask bypassForceSyncLimitations]


CPLEngineBackupSyncTask : CPLEngineForceSyncTask
  // instance methods
  -[CPLEngineBackupSyncTask initWithEngineLibrary:delegate:]
  -[CPLEngineBackupSyncTask forBackup]


CPLBatteryMonitor : NSObject
  // class methods
  +[CPLBatteryMonitor batteryLevel]
  +[CPLBatteryMonitor startMonitoringPowerEvents]
  +[CPLBatteryMonitor setDelegate:]
  +[CPLBatteryMonitor powerStatus]
  +[CPLBatteryMonitor powerStatusPlist]
  +[CPLBatteryMonitor _updateBatteryWithBatteryEntry:]
  +[CPLBatteryMonitor delegate]


CPLAssetChange : CPLItemChange
 @property  NSData *facesData
 @property  NSString *masterIdentifier
 @property  NSDate *lastSharedDate
 @property  NSDate *addedDate
 @property  NSDate *assetDate
 @property  NSArray *resources
 @property  NSString *caption
 @property  NSString *extendedDescription
 @property  NSString *accessibilityDescription
 @property  BOOL favorite
 @property  long long orientation
 @property  long long duration
 @property  CLLocation *location
 @property  NSArray *keywords
 @property  NSString *adjustedMediaMetaDataType
 @property  NSData *adjustedMediaMetaData
 @property  BOOL hidden
 @property  NSString *timeZoneName
 @property  NSNumber *timeZoneOffset
 @property  NSString *momentIdentifier
 @property  NSString *momentName
 @property  NSString *collectionIdentifier
 @property  NSString *collectionName
 @property  unsigned long burstFlags
 @property  NSString *burstIdentifier
 @property  NSString *mediaGroupIdentifier
 @property  long long videoComplementDurationValue
 @property  long long videoComplementDurationTimescale
 @property  long long videoComplementImageDisplayValue
 @property  long long videoComplementImageDisplayTimescale
 @property  unsigned long videoComplementVisibilityState
 @property  unsigned long assetSubtype
 @property  unsigned long assetHDRType
 @property  CPLAdjustments *adjustments
 @property  unsigned long originalChoice
 @property  long long customRenderedValue
 @property  NSArray *people
 @property  CPLFaceAnalysisReference *faces
 @property  long long facesVersion
 @property  NSString *facesAdjustmentsFingerprint
 @property  CPLPlaceAnnotation *placeAnnotation
 @property  long long playCount
 @property  long long shareCount
 @property  long long viewCount
 @property  NSString *syndicationIdentifier

  // class methods
  +[CPLAssetChange supportsSecureCoding]
  +[CPLAssetChange cplShouldIgnorePropertyForCoding:]
  +[CPLAssetChange cplShouldIgnorePropertyForEquality:]
  +[CPLAssetChange serverSupportsVision]
  +[CPLAssetChange relatedRecordClass]
  +[CPLAssetChange equalityBlockForDirection:]
  +[CPLAssetChange copyPropertyBlockForDirection:]

  // instance methods
  -[CPLAssetChange setShareCount:]
  -[CPLAssetChange shareCount]
  -[CPLAssetChange setKeywords:]
  -[CPLAssetChange resources]
  -[CPLAssetChange collectionIdentifier]
  -[CPLAssetChange caption]
  -[CPLAssetChange setOrientation:]
  -[CPLAssetChange playCount]
  -[CPLAssetChange setCollectionIdentifier:]
  -[CPLAssetChange setCaption:]
  -[CPLAssetChange setPlayCount:]
  -[CPLAssetChange collectionName]
  -[CPLAssetChange initWithCoder:]
  -[CPLAssetChange setResources:]
  -[CPLAssetChange .cxx_destruct]
  -[CPLAssetChange originalChoice]
  -[CPLAssetChange setOriginalChoice:]
  -[CPLAssetChange supportsResources]
  -[CPLAssetChange setDuration:]
  -[CPLAssetChange setMediaGroupIdentifier:]
  -[CPLAssetChange setVideoComplementDurationValue:]
  -[CPLAssetChange setVideoComplementDurationTimescale:]
  -[CPLAssetChange setVideoComplementImageDisplayValue:]
  -[CPLAssetChange setVideoComplementImageDisplayTimescale:]
  -[CPLAssetChange setVideoComplementVisibilityState:]
  -[CPLAssetChange isHidden]
  -[CPLAssetChange accessibilityDescription]
  -[CPLAssetChange setLocation:]
  -[CPLAssetChange faces]
  -[CPLAssetChange setAdjustedMediaMetaDataType:]
  -[CPLAssetChange setAdjustedMediaMetaData:]
  -[CPLAssetChange burstFlags]
  -[CPLAssetChange keywords]
  -[CPLAssetChange timeZoneName]
  -[CPLAssetChange facesVersion]
  -[CPLAssetChange init]
  -[CPLAssetChange setViewCount:]
  -[CPLAssetChange adjustments]
  -[CPLAssetChange setAdjustments:]
  -[CPLAssetChange extendedDescription]
  -[CPLAssetChange setCollectionName:]
  -[CPLAssetChange setBurstFlags:]
  -[CPLAssetChange setAssetSubtype:]
  -[CPLAssetChange assetSubtype]
  -[CPLAssetChange burstIdentifier]
  -[CPLAssetChange addedDate]
  -[CPLAssetChange videoComplementDurationValue]
  -[CPLAssetChange videoComplementDurationTimescale]
  -[CPLAssetChange videoComplementImageDisplayValue]
  -[CPLAssetChange videoComplementImageDisplayTimescale]
  -[CPLAssetChange mediaGroupIdentifier]
  -[CPLAssetChange masterScopedIdentifier]
  -[CPLAssetChange setFaces:]
  -[CPLAssetChange setAccessibilityDescription:]
  -[CPLAssetChange setAddedDate:]
  -[CPLAssetChange timeZoneOffset]
  -[CPLAssetChange location]
  -[CPLAssetChange facesAdjustmentsFingerprint]
  -[CPLAssetChange supportsDeletion]
  -[CPLAssetChange orientation]
  -[CPLAssetChange adjustedMediaMetaDataType]
  -[CPLAssetChange adjustedMediaMetaData]
  -[CPLAssetChange syndicationIdentifier]
  -[CPLAssetChange setFavorite:]
  -[CPLAssetChange videoComplementVisibilityState]
  -[CPLAssetChange setLastSharedDate:]
  -[CPLAssetChange lastSharedDate]
  -[CPLAssetChange setPlaceAnnotation:]
  -[CPLAssetChange viewCount]
  -[CPLAssetChange setSyndicationIdentifier:]
  -[CPLAssetChange people]
  -[CPLAssetChange isFavorite]
  -[CPLAssetChange setTimeZoneOffset:]
  -[CPLAssetChange setPeople:]
  -[CPLAssetChange setFacesVersion:]
  -[CPLAssetChange setFacesAdjustmentsFingerprint:]
  -[CPLAssetChange setMasterIdentifier:]
  -[CPLAssetChange assetDate]
  -[CPLAssetChange setAssetDate:]
  -[CPLAssetChange setBurstIdentifier:]
  -[CPLAssetChange duration]
  -[CPLAssetChange placeAnnotation]
  -[CPLAssetChange setHidden:]
  -[CPLAssetChange masterIdentifier]
  -[CPLAssetChange setTimeZoneName:]
  -[CPLAssetChange setExtendedDescription:]
  -[CPLAssetChange setAssetHDRType:]
  -[CPLAssetChange setCustomRenderedValue:]
  -[CPLAssetChange checkDefaultValueBlockForPropertyWithSelector:]
  -[CPLAssetChange propertiesDescription]
  -[CPLAssetChange dequeueOrder]
  -[CPLAssetChange propertiesForChangeType:]
  -[CPLAssetChange resourceForType:]
  -[CPLAssetChange isAssetChange]
  -[CPLAssetChange copyDerivativesFromRecordIfPossible:]
  -[CPLAssetChange supportsResourceType:]
  -[CPLAssetChange facesData]
  -[CPLAssetChange scopedIdentifiersForMapping]
  -[CPLAssetChange translateToCloudChangeUsingIDMapping:error:]
  -[CPLAssetChange translateToClientChangeUsingIDMapping:error:]
  -[CPLAssetChange setMasterScopedIdentifier:]
  -[CPLAssetChange relatedIdentifier]
  -[CPLAssetChange setRelatedIdentifier:]
  -[CPLAssetChange allRelatedScopedIdentifiers]
  -[CPLAssetChange compactedChangeWithRelatedChanges:isOnlyChange:fullRecord:usingStorageView:]
  -[CPLAssetChange fullChangeTypeForFullRecord]
  -[CPLAssetChange validateFullRecord]
  -[CPLAssetChange validateChangeWithError:]
  -[CPLAssetChange _canLowerQuota]
  -[CPLAssetChange validateRecordForTracker:]
  -[CPLAssetChange setFacesData:]
  -[CPLAssetChange assetHDRType]
  -[CPLAssetChange customRenderedValue]
  -[CPLAssetChange scopeIdentifiersForQuarantine]
  -[CPLAssetChange momentIdentifier]
  -[CPLAssetChange setMomentIdentifier:]
  -[CPLAssetChange momentName]
  -[CPLAssetChange setMomentName:]


CPLAssetKeywordSortDescriptor : NSSortDescriptor
  // class methods
  +[CPLAssetKeywordSortDescriptor sortedKeywordsForKeywordSet:]

  // instance methods
  -[CPLAssetKeywordSortDescriptor init]
  -[CPLAssetKeywordSortDescriptor compareObject:toObject:]


CPLServerFeedbackResponse : PBCodable <NSCopying>
  // instance methods
  -[CPLServerFeedbackResponse mergeFrom:]
  -[CPLServerFeedbackResponse dictionaryRepresentation]
  -[CPLServerFeedbackResponse writeTo:]
  -[CPLServerFeedbackResponse isEqual:]
  -[CPLServerFeedbackResponse copyTo:]
  -[CPLServerFeedbackResponse readFrom:]
  -[CPLServerFeedbackResponse copyWithZone:]


CPLMomentShare : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *identifier
 @property  NSString *title
 @property  short mode
 @property  NSDate *creationDate
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  NSDate *expiryDate
 @property  long long assetCount
 @property  long long photosCount
 @property  long long videosCount
 @property  NSData *thumbnailImageData
 @property  NSData *previewData
 @property  NSArray *participants
 @property  NSURL *shareURL
 @property  NSString *originatingScopeIdentifier

  // class methods
  +[CPLMomentShare supportsSecureCoding]
  +[CPLMomentShare cplAdditionalSecureClassesForProperty:]

  // instance methods
  -[CPLMomentShare videosCount]
  -[CPLMomentShare participants]
  -[CPLMomentShare setParticipants:]
  -[CPLMomentShare photosCount]
  -[CPLMomentShare initWithCoder:]
  -[CPLMomentShare setCreationDate:]
  -[CPLMomentShare setTitle:]
  -[CPLMomentShare setEndDate:]
  -[CPLMomentShare shareURL]
  -[CPLMomentShare .cxx_destruct]
  -[CPLMomentShare setShareURL:]
  -[CPLMomentShare setStartDate:]
  -[CPLMomentShare thumbnailImageData]
  -[CPLMomentShare previewData]
  -[CPLMomentShare isEqual:]
  -[CPLMomentShare identifier]
  -[CPLMomentShare setOriginatingScopeIdentifier:]
  -[CPLMomentShare setPreviewData:]
  -[CPLMomentShare originatingScopeIdentifier]
  -[CPLMomentShare title]
  -[CPLMomentShare creationDate]
  -[CPLMomentShare setPhotosCount:]
  -[CPLMomentShare setIdentifier:]
  -[CPLMomentShare startDate]
  -[CPLMomentShare setExpiryDate:]
  -[CPLMomentShare setMode:]
  -[CPLMomentShare copyWithZone:]
  -[CPLMomentShare setThumbnailImageData:]
  -[CPLMomentShare assetCount]
  -[CPLMomentShare setAssetCount:]
  -[CPLMomentShare setVideosCount:]
  -[CPLMomentShare endDate]
  -[CPLMomentShare mode]
  -[CPLMomentShare encodeWithCoder:]
  -[CPLMomentShare expiryDate]
  -[CPLMomentShare initWithScopeChange:]
  -[CPLMomentShare updateScopeChange:]
  -[CPLMomentShare translateToScopeChangeWithScopeType:]


CPLRampingResponse : PBCodable <NSCopying>
 @property  NSMutableArray *responses

  // class methods
  +[CPLRampingResponse responseType]

  // instance methods
  -[CPLRampingResponse mergeFrom:]
  -[CPLRampingResponse responsesCount]
  -[CPLRampingResponse .cxx_destruct]
  -[CPLRampingResponse responseAtIndex:]
  -[CPLRampingResponse dictionaryRepresentation]
  -[CPLRampingResponse writeTo:]
  -[CPLRampingResponse clearResponses]
  -[CPLRampingResponse setResponses:]
  -[CPLRampingResponse responses]
  -[CPLRampingResponse isEqual:]
  -[CPLRampingResponse copyTo:]
  -[CPLRampingResponse readFrom:]
  -[CPLRampingResponse addResponse:]
  -[CPLRampingResponse copyWithZone:]


CPLPushRepositoryStorage : CPLChangeStorage
 @property  CPLEnginePushRepository *pushRepository

  // instance methods
  -[CPLPushRepositoryStorage getRelatedScopedIdentifier:forRecordWithScopedIdentifier:]
  -[CPLPushRepositoryStorage .cxx_destruct]
  -[CPLPushRepositoryStorage pushRepository]
  -[CPLPushRepositoryStorage initWithPushRepository:]
  -[CPLPushRepositoryStorage hasChangesWithRelatedScopedIdentifier:class:]
  -[CPLPushRepositoryStorage storageDescription]
  -[CPLPushRepositoryStorage changeWithScopedIdentifier:]
  -[CPLPushRepositoryStorage changesWithRelatedScopedIdentifier:class:]
  -[CPLPushRepositoryStorage scopedIdentifierAddingScopeIndexForScopedIdentifier:]


CPLTransientRepositoryStorage : CPLChangeStorage
 @property  CPLEngineTransientRepository *transientRepository

  // instance methods
  -[CPLTransientRepositoryStorage .cxx_destruct]
  -[CPLTransientRepositoryStorage storageDescription]
  -[CPLTransientRepositoryStorage changeWithScopedIdentifier:]
  -[CPLTransientRepositoryStorage changesWithRelatedScopedIdentifier:class:]
  -[CPLTransientRepositoryStorage initWithTransientRepository:]
  -[CPLTransientRepositoryStorage transientRepository]


CPLClientCacheBaseView : CPLRecordStorageView
 @property  CPLEngineStore *store
 @property  CPLEngineCloudCache *cloudCache
 @property  <CPLEngineIDMapping> *idMapping

  // class methods
  +[CPLClientCacheBaseView clientCacheBaseViewIDMappingForStore:]

  // instance methods
  -[CPLClientCacheBaseView initWithStore:]
  -[CPLClientCacheBaseView hasRecordWithScopedIdentifier:]
  -[CPLClientCacheBaseView countOfRecordsWithRelatedScopedIdentifier:class:]
  -[CPLClientCacheBaseView .cxx_destruct]
  -[CPLClientCacheBaseView cloudCache]
  -[CPLClientCacheBaseView recordViewsWithRelatedScopedIdentifier:class:]
  -[CPLClientCacheBaseView relatedScopedIdentifierForRecordWithScopedIdentifier:]
  -[CPLClientCacheBaseView store]
  -[CPLClientCacheBaseView recordViewWithScopedIdentifier:]
  -[CPLClientCacheBaseView idMapping]


CPLUnacknowledgedChangeStorage : CPLChangeStorage
 @property  CPLEngineStore *store

  // instance methods
  -[CPLUnacknowledgedChangeStorage initWithStore:]
  -[CPLUnacknowledgedChangeStorage .cxx_destruct]
  -[CPLUnacknowledgedChangeStorage storageDescription]
  -[CPLUnacknowledgedChangeStorage changeWithScopedIdentifier:]
  -[CPLUnacknowledgedChangeStorage store]
  -[CPLUnacknowledgedChangeStorage changesWithRelatedScopedIdentifier:class:]


CPLClientCacheRecordView : CPLRecordView
 @property  CPLScopedIdentifier *localScopedIdentifier
 @property  CPLRecordChange *cloudRecord
 @property  <CPLEngineIDMapping> *idMapping

  // instance methods
  -[CPLClientCacheRecordView cloudRecord]
  -[CPLClientCacheRecordView redactedDescription]
  -[CPLClientCacheRecordView relation]
  -[CPLClientCacheRecordView initWithLocalScopedIdentifier:cloudRecord:idMapping:]
  -[CPLClientCacheRecordView secondaryScopedIdentifier]
  -[CPLClientCacheRecordView .cxx_destruct]
  -[CPLClientCacheRecordView supportsResources]
  -[CPLClientCacheRecordView relatedScopedIdentifier]
  -[CPLClientCacheRecordView localScopedIdentifier]
  -[CPLClientCacheRecordView synthesizedRecord]
  -[CPLClientCacheRecordView recordClass]
  -[CPLClientCacheRecordView recordChangeData]
  -[CPLClientCacheRecordView idMapping]
  -[CPLClientCacheRecordView scopedIdentifier]


CPLCloudCacheBaseView : CPLRecordStorageView
 @property  CPLEngineCloudCache *cloudCache
 @property  BOOL useFinal

  // instance methods
  -[CPLCloudCacheBaseView .cxx_destruct]
  -[CPLCloudCacheBaseView cloudCache]
  -[CPLCloudCacheBaseView recordViewsWithRelatedScopedIdentifier:class:]
  -[CPLCloudCacheBaseView recordViewWithScopedIdentifier:]
  -[CPLCloudCacheBaseView useFinal]
  -[CPLCloudCacheBaseView initWithCloudCache:useFinal:]


_CPLOptimisticIDMapping : NSObject <CPLEngineIDMapping>
 @property  <CPLEngineIDMapping> *idMapping
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_CPLOptimisticIDMapping cloudScopedIdentifierForLocalScopedIdentifier:isFinal:]
  -[_CPLOptimisticIDMapping .cxx_destruct]
  -[_CPLOptimisticIDMapping initWithIDMapping:]
  -[_CPLOptimisticIDMapping localScopedIdentifierForCloudScopedIdentifier:isFinal:]
  -[_CPLOptimisticIDMapping localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords:]
  -[_CPLOptimisticIDMapping firstAvailableCloudScopedIdentifierForProposedCloudScopedIdentifier:]
  -[_CPLOptimisticIDMapping addCloudScopedIdentifier:forLocalScopedIdentifier:isFinal:direction:error:]
  -[_CPLOptimisticIDMapping setupCloudScopedIdentifier:forLocalScopedIdentifier:isFinal:direction:error:]
  -[_CPLOptimisticIDMapping idMapping]


CPLBeforeUploadCheckItems : NSObject
 @property  CPLChangeBatch *originalBatch
 @property  <CPLBeforeUploadCheckItemsProvider> *provider
 @property  long long ruleGroups
 @property  NSArray *recordsToCheck
 @property  NSSet *recordsToFullyFetch
 @property  NSArray *recordsNeedingGeneratedDerivatives
 @property  CPLChangeBatch *batchToUpload
 @property  BOOL shouldResetExceedingQuotaOnSuccessfulUpload
 @property  unsigned long countOfAssetsWithResourcesToUpload
 @property  unsigned long estimatedUploadResourceSize
 @property  BOOL willUploadSomeResources
 @property  BOOL hasDroppedSomeResources

  // instance methods
  -[CPLBeforeUploadCheckItems hasDroppedSomeResources]
  -[CPLBeforeUploadCheckItems originalBatch]
  -[CPLBeforeUploadCheckItems countOfAssetsWithResourcesToUpload]
  -[CPLBeforeUploadCheckItems recordsToCheck]
  -[CPLBeforeUploadCheckItems itemWillDropResourceChange:]
  -[CPLBeforeUploadCheckItems initWithBatch:ruleGroups:provider:]
  -[CPLBeforeUploadCheckItems .cxx_destruct]
  -[CPLBeforeUploadCheckItems checkBatchWithFoundRecords:error:]
  -[CPLBeforeUploadCheckItems requestExistenceCheckForRecord:forItem:error:]
  -[CPLBeforeUploadCheckItems requestFullFetchOfRecordWithScopedIdentifier:forItem:error:]
  -[CPLBeforeUploadCheckItems shouldResetExceedingQuotaOnSuccessfulUpload]
  -[CPLBeforeUploadCheckItems estimatedUploadResourceSize]
  -[CPLBeforeUploadCheckItems recordFromTransportWithScopedIdentifier:]
  -[CPLBeforeUploadCheckItems willUploadSomeResources]
  -[CPLBeforeUploadCheckItems ruleGroups]
  -[CPLBeforeUploadCheckItems willUploadCloudResource:localResource:forItem:error:]
  -[CPLBeforeUploadCheckItems prepareBatchBeforeUploadWithError:]
  -[CPLBeforeUploadCheckItems transportHasRecordWithScopedIdentifier:]
  -[CPLBeforeUploadCheckItems provider]
  -[CPLBeforeUploadCheckItems requestFullFetchOfRecord:forItem:error:]
  -[CPLBeforeUploadCheckItems batchToUpload]
  -[CPLBeforeUploadCheckItems recordsToFullyFetch]
  -[CPLBeforeUploadCheckItems recordsNeedingGeneratedDerivatives]


CPLBeforeUploadCheckItem : NSObject
 @property  long long ruleGroups
 @property  CPLScopedIdentifier *scopedIdentifier
 @property  CPLRecordChange *change
 @property  Class changeClass
 @property  BOOL isAsset
 @property  BOOL isTrashedOrDeletedAsset
 @property  BOOL needsToGenerateDerivatives
 @property  CPLBeforeUploadCheckItems *items
 @property  BOOL hasRequestedRecordCheck
 @property  BOOL hasRequestedRecordFetch
 @property  unsigned long estimatedResourceUploadSize

  // instance methods
  -[CPLBeforeUploadCheckItem prepareWithError:]
  -[CPLBeforeUploadCheckItem change]
  -[CPLBeforeUploadCheckItem initWithChange:checkItems:]
  -[CPLBeforeUploadCheckItem isTrashedOrDeletedAsset]
  -[CPLBeforeUploadCheckItem redactedDescription]
  -[CPLBeforeUploadCheckItem hasRequestedRecordFetch]
  -[CPLBeforeUploadCheckItem estimatedResourceUploadSize]
  -[CPLBeforeUploadCheckItem requestFullFetchForRule:error:]
  -[CPLBeforeUploadCheckItem items]
  -[CPLBeforeUploadCheckItem .cxx_destruct]
  -[CPLBeforeUploadCheckItem dropResourceChangeWithReason:]
  -[CPLBeforeUploadCheckItem dropChangeWithReason:]
  -[CPLBeforeUploadCheckItem _serverResourcesMatches:]
  -[CPLBeforeUploadCheckItem _forAdditionalRecordRule:check:error:]
  -[CPLBeforeUploadCheckItem dropGeneratingDerivativesIfPossibleWithRecordOnServer:error:]
  -[CPLBeforeUploadCheckItem changeClass]
  -[CPLBeforeUploadCheckItem _forRule:check:error:]
  -[CPLBeforeUploadCheckItem requestExistenceCheckForRule:error:]
  -[CPLBeforeUploadCheckItem ruleGroups]
  -[CPLBeforeUploadCheckItem needsToGenerateDerivatives]
  -[CPLBeforeUploadCheckItem requestFullFetchOfRecordWithScopedIdentifier:forRule:error:]
  -[CPLBeforeUploadCheckItem hasRequestedRecordCheck]
  -[CPLBeforeUploadCheckItem isAsset]
  -[CPLBeforeUploadCheckItem checkBeforeUploadWithError:]
  -[CPLBeforeUploadCheckItem rejectChangeWithReason:error:]
  -[CPLBeforeUploadCheckItem scopedIdentifier]


CPLFeatureVersionHistory : NSObject <NSSecureCoding, NSCopying>
 @property  long long currentFeatureVersion

  // class methods
  +[CPLFeatureVersionHistory supportsSecureCoding]

  // instance methods
  -[CPLFeatureVersionHistory currentFeatureVersion]
  -[CPLFeatureVersionHistory initWithCoder:]
  -[CPLFeatureVersionHistory initWithCurrentFeatureVersion:]
  -[CPLFeatureVersionHistory .cxx_destruct]
  -[CPLFeatureVersionHistory isEqual:]
  -[CPLFeatureVersionHistory featureVersionForSyncAnchor:]
  -[CPLFeatureVersionHistory copyWithZone:]
  -[CPLFeatureVersionHistory syncAnchorForFeatureVersion:]
  -[CPLFeatureVersionHistory enumerateHistoryWithBlock:]
  -[CPLFeatureVersionHistory addSyncAnchor:forFeatureVersion:]
  -[CPLFeatureVersionHistory encodeWithCoder:]


CPLEngineStatusCenter : CPLEngineStorage <CPLAbstractObject>
 @property  BOOL hasStatusChanges
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineStatusCenter scopeType]
  -[CPLEngineStatusCenter _removeScopedIdentifiersFromSet:withScopeIdentifier:]
  -[CPLEngineStatusCenter resetTransientStatusesWithScopeIdentifier:]
  -[CPLEngineStatusCenter _fillStatus:]
  -[CPLEngineStatusCenter deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineStatusCenter recordViewForStatusWithScopedIdentifier:]
  -[CPLEngineStatusCenter .cxx_destruct]
  -[CPLEngineStatusCenter hasStatusChanges]
  -[CPLEngineStatusCenter _removeStatusesInDictionary:withScopeIdentifier:]
  -[CPLEngineStatusCenter notifyStatusForRecordViewHasChanged:persist:error:]
  -[CPLEngineStatusCenter recordForStatusWithScopedIdentifier:]
  -[CPLEngineStatusCenter _fillStatus:withClientCacheRecordView:cloudCacheRecord:isConfirmed:isStaged:isInIDMapping:]
  -[CPLEngineStatusCenter _statusFromCachesWithRecordScopedIdentifier:]
  -[CPLEngineStatusCenter _allScopedIdentifierInCollection:withScopeIdentifier:]
  -[CPLEngineStatusCenter statusesForRecordsWithScopedIdentifiers:]
  -[CPLEngineStatusCenter status]
  -[CPLEngineStatusCenter notifyStatusForRecordHasChanged:persist:error:]
  -[CPLEngineStatusCenter initWithEngineStore:name:]
  -[CPLEngineStatusCenter acknowledgeChangedStatuses:error:]
  -[CPLEngineStatusCenter resetAllTransientStatuses]
  -[CPLEngineStatusCenter notifyStatusForRecordWithScopedIdentifierHasChanged:recordClass:persist:error:]
  -[CPLEngineStatusCenter writeTransactionDidFail]
  -[CPLEngineStatusCenter allStatusChanges]
  -[CPLEngineStatusCenter statusesForRecordsWithIdentifiers:]
  -[CPLEngineStatusCenter statusChanges]
  -[CPLEngineStatusCenter discardNotificationForRecordWithScopedIdentifier:error:]
  -[CPLEngineStatusCenter writeTransactionDidSucceed]


_CPLTransientStatus : NSObject
 @property  NSDate *date
 @property  CPLRecordChange *record
 @property  unsigned long generation
 @property  CPLRecordStatus *status

  // instance methods
  -[_CPLTransientStatus record]
  -[_CPLTransientStatus .cxx_destruct]
  -[_CPLTransientStatus generation]
  -[_CPLTransientStatus status]
  -[_CPLTransientStatus date]
  -[_CPLTransientStatus initWithRecord:generation:date:]


_CPLEngineSyncLastError : NSObject
 @property  NSDate *date
 @property  NSError *error

  // instance methods
  -[_CPLEngineSyncLastError .cxx_destruct]
  -[_CPLEngineSyncLastError setDate:]
  -[_CPLEngineSyncLastError setError:]
  -[_CPLEngineSyncLastError error]
  -[_CPLEngineSyncLastError date]


CPLEngineSyncManager : NSObject <CPLAbstractObject, CPLEngineComponent, CPLEngineSyncTaskDelegate, CPLEngineForceSyncTaskDelegate>
 @property  unsigned long state
 @property  BOOL shouldTryToMingleImmediately
 @property  CPLEngineLibrary *engineLibrary
 @property  NSError *lastError
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineSyncManager platformImplementationProtocol]
  +[CPLEngineSyncManager shortDescriptionForState:]
  +[CPLEngineSyncManager qualityOfServiceForForcedTasks]
  +[CPLEngineSyncManager qualityOfServiceForSyncSessions]
  +[CPLEngineSyncManager descriptionForState:]
  +[CPLEngineSyncManager stepForState:syncManager:session:]

  // instance methods
  -[CPLEngineSyncManager openWithCompletionHandler:]
  -[CPLEngineSyncManager componentName]
  -[CPLEngineSyncManager closeAndDeactivate:completionHandler:]
  -[CPLEngineSyncManager _setState:]
  -[CPLEngineSyncManager task:didFinishWithError:]
  -[CPLEngineSyncManager addDropDerivativesRecipe:writeToUserDefaults:withCompletionHandler:]
  -[CPLEngineSyncManager _cancelAllTasksLockedDeferringPushTaskCancellationIfCurrentlyUploadingForeground:]
  -[CPLEngineSyncManager dispatchSyncBlock:]
  -[CPLEngineSyncManager lastError]
  -[CPLEngineSyncManager lastErrorUnlocked]
  -[CPLEngineSyncManager .cxx_destruct]
  -[CPLEngineSyncManager _notifyEndOfSyncSession]
  -[CPLEngineSyncManager platformObject]
  -[CPLEngineSyncManager _launchNecessaryTasksForCurrentStateLocked]
  -[CPLEngineSyncManager dispatchForcedTaskBlock:]
  -[CPLEngineSyncManager _moveAllTasksToBackgroundLocked]
  -[CPLEngineSyncManager prepareAndLaunchSyncTaskUnlocked:]
  -[CPLEngineSyncManager discardTransportUserIdentifier]
  -[CPLEngineSyncManager _reenableSchedulerForForceSyncTaskIfNecessary]
  -[CPLEngineSyncManager _transportUserIdentifier]
  -[CPLEngineSyncManager forceSyncTaskHasBeenLaunched:]
  -[CPLEngineSyncManager _recordForcedSyncTask:discarded:error:]
  -[CPLEngineSyncManager _descriptionForSetupTasks]
  -[CPLEngineSyncManager _launchForceSyncTaskIfNecessary]
  -[CPLEngineSyncManager _resetErrorForSyncSession]
  -[CPLEngineSyncManager forceSyncTaskHasBeenCancelled:]
  -[CPLEngineSyncManager _cancelAllTasksLocked]
  -[CPLEngineSyncManager setSyncSessionShouldBeForeground:]
  -[CPLEngineSyncManager configureDirectTransportTask:]
  -[CPLEngineSyncManager state]
  -[CPLEngineSyncManager _addRuleToUserDefaults:]
  -[CPLEngineSyncManager _dispatchAfter:block:]
  -[CPLEngineSyncManager _forceSyncTaskDidFinishWithError:]
  -[CPLEngineSyncManager _cancelAllTasksForSetup]
  -[CPLEngineSyncManager setShouldTryToMingleImmediately:]
  -[CPLEngineSyncManager resetTransportUserIdentifier]
  -[CPLEngineSyncManager _descriptionForCurrentState]
  -[CPLEngineSyncManager endClientWork:]
  -[CPLEngineSyncManager _advanceToNextStateLocked]
  -[CPLEngineSyncManager startSyncSession:withMinimalPhase:rewind:]
  -[CPLEngineSyncManager _descriptionForLaunchedTasks]
  -[CPLEngineSyncManager _discardPendingForceSyncTaskWithError:]
  -[CPLEngineSyncManager engineLibrary]
  -[CPLEngineSyncManager _didFinishSetupTaskWithError:shouldStop:]
  -[CPLEngineSyncManager _launchForceSetupTask]
  -[CPLEngineSyncManager getStatusWithCompletionHandler:]
  -[CPLEngineSyncManager task:didProgress:userInfo:]
  -[CPLEngineSyncManager _advanceToNextStateLockedMinimalState:]
  -[CPLEngineSyncManager _setupTaskWithCompletionHandler:]
  -[CPLEngineSyncManager _disableSchedulerForForceSyncTaskIfNecessary]
  -[CPLEngineSyncManager _setTransportUserIdentifier:]
  -[CPLEngineSyncManager _checkForegroundAtLaunchForForceSyncTask]
  -[CPLEngineSyncManager _restartSyncSessionFromStateLocked:session:cancelIfNecessary:]
  -[CPLEngineSyncManager _shortDescriptionForCurrentState]
  -[CPLEngineSyncManager _overrideBudgetsIfNeeded]
  -[CPLEngineSyncManager initWithEngineLibrary:]
  -[CPLEngineSyncManager shouldTryToMingleImmediately]
  -[CPLEngineSyncManager cancelCurrentSyncSession]
  -[CPLEngineSyncManager requestDisabledFeaturesUpdate]
  -[CPLEngineSyncManager _launchSetupTask]
  -[CPLEngineSyncManager getStatusDictionaryWithCompletionHandler:]
  -[CPLEngineSyncManager beginClientWork:]
  -[CPLEngineSyncManager setBoostPriority:]
  -[CPLEngineSyncManager _dropDerivativeRulesFromUserDefaults]
  -[CPLEngineSyncManager setErrorForSyncSessionUnlocked:]


_CPLForcedSyncHistory : NSObject
 @property  BOOL discarded
 @property  NSDate *creationDate
 @property  CPLScopeFilter *filter
 @property  Class taskClass
 @property  NSString *errorDescription

  // instance methods
  -[_CPLForcedSyncHistory errorDescription]
  -[_CPLForcedSyncHistory .cxx_destruct]
  -[_CPLForcedSyncHistory taskClass]
  -[_CPLForcedSyncHistory filter]
  -[_CPLForcedSyncHistory discarded]
  -[_CPLForcedSyncHistory creationDate]
  -[_CPLForcedSyncHistory initWithForcedSyncTask:discarded:error:]
  -[_CPLForcedSyncHistory descriptionWithNow:]


CPLChangeBatchChangeStorage : CPLChangeStorage
 @property  CPLChangeBatch *batch

  // instance methods
  -[CPLChangeBatchChangeStorage .cxx_destruct]
  -[CPLChangeBatchChangeStorage initWithBatch:name:]
  -[CPLChangeBatchChangeStorage storageDescription]
  -[CPLChangeBatchChangeStorage changeWithScopedIdentifier:]
  -[CPLChangeBatchChangeStorage batch]
  -[CPLChangeBatchChangeStorage changesWithRelatedScopedIdentifier:class:]


CPLEngineStorage : NSObject <CPLAbstractObject>
 @property  CPLEngineStore *engineStore
 @property  NSString *name
 @property  unsigned long scopeType
 @property  BOOL isEmpty
 @property  BOOL shouldBeCreatedDynamically
 @property  BOOL isAlive
 @property  BOOL shouldIncludeInStatus
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineStorage platformImplementationProtocol]

  // instance methods
  -[CPLEngineStorage scopeType]
  -[CPLEngineStorage isAlive]
  -[CPLEngineStorage openWithError:]
  -[CPLEngineStorage closeWithError:]
  -[CPLEngineStorage name]
  -[CPLEngineStorage redactedDescription]
  -[CPLEngineStorage isEmpty]
  -[CPLEngineStorage deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineStorage .cxx_destruct]
  -[CPLEngineStorage platformObject]
  -[CPLEngineStorage statusDictionary]
  -[CPLEngineStorage status]
  -[CPLEngineStorage initWithEngineStore:name:]
  -[CPLEngineStorage writeTransactionDidFail]
  -[CPLEngineStorage transactionDidFinish]
  -[CPLEngineStorage writeTransactionDidSucceed]
  -[CPLEngineStorage engineStore]
  -[CPLEngineStorage shouldIncludeInStatus]
  -[CPLEngineStorage testKey:value:didHandle:result:error:]
  -[CPLEngineStorage statusPerScopeIndex]
  -[CPLEngineStorage shouldBeCreatedDynamically]
  -[CPLEngineStorage _checkSuperWasCalled]


CPLEngineSystemMonitor : NSObject <CPLNetworkWatcherDelegate, _CPLScheduledOverrideDelegate, CPLBatteryMonitorDelegate, CPLEngineComponent>
 @property  CPLEngineLibrary *engineLibrary
 @property  unsigned long diskPressureState
 @property  unsigned long freeDiskSpaceSize
 @property  BOOL isNetworkConnected
 @property  BOOL isNetworkConstrained
 @property  BOOL isOnCellularOrUnknown
 @property  BOOL isDataBudgetOverriden
 @property  BOOL hasEnoughPowerForAutomaticOverride
 @property  BOOL canBoostOperations
 @property  BOOL canBoostBackgroundOperations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLEngineSystemMonitor enumerateSystemBudgets:withBlock:]
  +[CPLEngineSystemMonitor nextOverrideTimeIntervalForSystemBudgets:]
  +[CPLEngineSystemMonitor descriptionForBudgets:]
  +[CPLEngineSystemMonitor descriptionForBudget:]

  // instance methods
  -[CPLEngineSystemMonitor openWithCompletionHandler:]
  -[CPLEngineSystemMonitor componentName]
  -[CPLEngineSystemMonitor closeAndDeactivate:completionHandler:]
  -[CPLEngineSystemMonitor canBoostOperations]
  -[CPLEngineSystemMonitor stopOverridingSystemBudgets:reason:]
  -[CPLEngineSystemMonitor canBoostBackgroundOperations]
  -[CPLEngineSystemMonitor isNetworkConstrained]
  -[CPLEngineSystemMonitor _stopWatchingPermanentDataOverride]
  -[CPLEngineSystemMonitor isOnCellularOrUnknown]
  -[CPLEngineSystemMonitor .cxx_destruct]
  -[CPLEngineSystemMonitor freeDiskSpaceSize]
  -[CPLEngineSystemMonitor _permanentDataOverrideHasChanged]
  -[CPLEngineSystemMonitor stopOverridingSystemBudgetsForClient:]
  -[CPLEngineSystemMonitor _minimumBatteryLevelForAutoOverrideEnergyBudget]
  -[CPLEngineSystemMonitor startAutomaticOverridingSystemBudgets:]
  -[CPLEngineSystemMonitor startOverridingSystemBudgets:reason:]
  -[CPLEngineSystemMonitor batteryLevelDidChangeWithLevel:]
  -[CPLEngineSystemMonitor startOverridingSystemBudgetsForClient:]
  -[CPLEngineSystemMonitor updateDiskPressureState]
  -[CPLEngineSystemMonitor _hasPermanentDataOverride]
  -[CPLEngineSystemMonitor _withSystemBudgetOverride:]
  -[CPLEngineSystemMonitor hasEnoughPowerForAutomaticOverride]
  -[CPLEngineSystemMonitor watcher:stateDidChangeToNetworkState:]
  -[CPLEngineSystemMonitor engineLibrary]
  -[CPLEngineSystemMonitor _startOverridingBudget:reason:]
  -[CPLEngineSystemMonitor _startWatchingPermanentDataOverride]
  -[CPLEngineSystemMonitor getStatusWithCompletionHandler:]
  -[CPLEngineSystemMonitor _stopOverridingBudget:reason:]
  -[CPLEngineSystemMonitor initWithEngineLibrary:]
  -[CPLEngineSystemMonitor diskPressureState]
  -[CPLEngineSystemMonitor getStatusDictionaryWithCompletionHandler:]
  -[CPLEngineSystemMonitor _attemptScheduleRecoveryOverride:withReason:]
  -[CPLEngineSystemMonitor scheduledOverrideDidEnd:]
  -[CPLEngineSystemMonitor isNetworkConnected]
  -[CPLEngineSystemMonitor stopAutomaticOverridingSystemBudgets:]
  -[CPLEngineSystemMonitor isDataBudgetOverriden]


_CPLScheduledOverride : NSObject
 @property  unsigned long budget
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long reason
 @property  NSDate *endDate
 @property  <_CPLScheduledOverrideDelegate> *delegate
 @property  NSString *status

  // class methods
  +[_CPLScheduledOverride _systemBudgetForBudgetKey:]
  +[_CPLScheduledOverride currentBudgetOverrideTimeIntervalStorageKeyForBudget:]
  +[_CPLScheduledOverride _expirationDateStorageKeyForBudget:]
  +[_CPLScheduledOverride isBudgetTypeSupportedForProgressiveOverriding:withReason:]
  +[_CPLScheduledOverride nextTimeIntervalToUseGivenCurrent:expiryDate:]
  +[_CPLScheduledOverride budgetOverrideReasonStorageKeyForBudget:]
  +[_CPLScheduledOverride nextTimeIntervalForOverridingBudget:withReason:]
  +[_CPLScheduledOverride currentBudgetOverrideTimeIntervalExpiryDateStorageKeyForBudget:]

  // instance methods
  -[_CPLScheduledOverride initWithBudget:withReason:queue:]
  -[_CPLScheduledOverride budget]
  -[_CPLScheduledOverride .cxx_destruct]
  -[_CPLScheduledOverride setDelegate:]
  -[_CPLScheduledOverride _scheduleEndWithTimeInterval:]
  -[_CPLScheduledOverride scheduleEndFromPersistedOverride]
  -[_CPLScheduledOverride reason]
  -[_CPLScheduledOverride status]
  -[_CPLScheduledOverride cancel]
  -[_CPLScheduledOverride delegate]
  -[_CPLScheduledOverride queue]
  -[_CPLScheduledOverride scheduleEndOfOverride]
  -[_CPLScheduledOverride resetHeuristics]
  -[_CPLScheduledOverride endDate]


CPLRejectedRecords : NSObject
  // instance methods
  -[CPLRejectedRecords objectForKeyedSubscript:]
  -[CPLRejectedRecords recordWithScopedIdentifier:]
  -[CPLRejectedRecords .cxx_destruct]
  -[CPLRejectedRecords count]
  -[CPLRejectedRecords setObject:forKeyedSubscript:]
  -[CPLRejectedRecords init]
  -[CPLRejectedRecords isEqual:]
  -[CPLRejectedRecords removeRejectedRecordsWithScopedIdentifiers:]
  -[CPLRejectedRecords enumerateRecordsAndReasonsUsingBlock:]
  -[CPLRejectedRecords rejectsTheSameRecordsAs:]
  -[CPLRejectedRecords rejectedDescriptions]


CPLEngineQuarantinedRecords : CPLEngineStorage <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineQuarantinedRecords scopeType]
  -[CPLEngineQuarantinedRecords deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineQuarantinedRecords countOfQuarantinedRecordsInScopeWithIdentifier:]
  -[CPLEngineQuarantinedRecords _quarantineRejectedRecords:error:]
  -[CPLEngineQuarantinedRecords .cxx_destruct]
  -[CPLEngineQuarantinedRecords bumpRejectedRecords:error:]
  -[CPLEngineQuarantinedRecords countOfQuarantinedRecords]
  -[CPLEngineQuarantinedRecords addQuarantinedRecordWithScopedIdentifier:recordClass:reason:error:]
  -[CPLEngineQuarantinedRecords classForQuarantinedRecordWithScopedIdentifier:]
  -[CPLEngineQuarantinedRecords removeQuarantinedRecordWithScopedIdentifier:notify:error:]
  -[CPLEngineQuarantinedRecords writeTransactionDidFail]
  -[CPLEngineQuarantinedRecords resetRejectedRecordsWithError:]
  -[CPLEngineQuarantinedRecords isRecordWithScopedIdentifierQuarantined:]
  -[CPLEngineQuarantinedRecords _sendQuarantineFeedbackWithRecordClass:reason:]
  -[CPLEngineQuarantinedRecords writeTransactionDidSucceed]


CPLEngineResourceUploadTask : CPLResourceTransferTask
 @property  CPLResource *cloudResource
 @property  BOOL backgroundTask
 @property  <CPLEngineTransportTask> *transportTask

  // instance methods
  -[CPLEngineResourceUploadTask .cxx_destruct]
  -[CPLEngineResourceUploadTask isBackgroundTask]
  -[CPLEngineResourceUploadTask setBackgroundTask:]
  -[CPLEngineResourceUploadTask setCloudResource:]
  -[CPLEngineResourceUploadTask setTransportTask:]
  -[CPLEngineResourceUploadTask transportTask]
  -[CPLEngineResourceUploadTask cloudResource]


CPLMomentShareParticipant : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *email
 @property  NSString *phoneNumber
 @property  NSString *userIdentifier
 @property  NSPersonNameComponents *nameComponents
 @property  BOOL hasiCloudAccount
 @property  BOOL isCurrentUser
 @property  short type
 @property  short status

  // class methods
  +[CPLMomentShareParticipant supportsSecureCoding]
  +[CPLMomentShareParticipant shareParticipantsFromMomentShareParticipants:]
  +[CPLMomentShareParticipant momentShareParticipantsFromParticipants:]

  // instance methods
  -[CPLMomentShareParticipant nameComponents]
  -[CPLMomentShareParticipant setHasiCloudAccount:]
  -[CPLMomentShareParticipant userIdentifier]
  -[CPLMomentShareParticipant setNameComponents:]
  -[CPLMomentShareParticipant initWithCoder:]
  -[CPLMomentShareParticipant setUserIdentifier:]
  -[CPLMomentShareParticipant setPhoneNumber:]
  -[CPLMomentShareParticipant setType:]
  -[CPLMomentShareParticipant .cxx_destruct]
  -[CPLMomentShareParticipant setIsCurrentUser:]
  -[CPLMomentShareParticipant isCurrentUser]
  -[CPLMomentShareParticipant phoneNumber]
  -[CPLMomentShareParticipant email]
  -[CPLMomentShareParticipant isEqual:]
  -[CPLMomentShareParticipant hasiCloudAccount]
  -[CPLMomentShareParticipant status]
  -[CPLMomentShareParticipant type]
  -[CPLMomentShareParticipant setStatus:]
  -[CPLMomentShareParticipant setEmail:]
  -[CPLMomentShareParticipant copyWithZone:]
  -[CPLMomentShareParticipant encodeWithCoder:]
  -[CPLMomentShareParticipant initWithShareParticipant:]
  -[CPLMomentShareParticipant asShareParticipant]


CPLEngineOutgoingResources : CPLEngineStorage <CPLAbstractObject>
 @property  unsigned long countOfOriginalImages
 @property  unsigned long countOfOriginalVideos
 @property  unsigned long countOfOriginalOthers
 @property  unsigned long sizeOfResourcesToUpload
 @property  unsigned long sizeOfOriginalResourcesToUpload
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineOutgoingResources scopeType]
  -[CPLEngineOutgoingResources openWithError:]
  -[CPLEngineOutgoingResources sizeOfResourcesToUpload]
  -[CPLEngineOutgoingResources deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineOutgoingResources countOfOriginalImages]
  -[CPLEngineOutgoingResources deleteResourcesToUploadWithUploadIdentifier:error:]
  -[CPLEngineOutgoingResources countOfOriginalVideos]
  -[CPLEngineOutgoingResources shouldUploadResource:]
  -[CPLEngineOutgoingResources storeResourcesToUpload:withUploadIdentifier:shouldCheckResources:error:]
  -[CPLEngineOutgoingResources resourceTypesToUploadForChange:]
  -[CPLEngineOutgoingResources availableResourceSizeForUploadIdentifier:]
  -[CPLEngineOutgoingResources sizeOfOriginalResourcesToUpload]
  -[CPLEngineOutgoingResources countOfOriginalOthers]


CPLExtractedBatch : NSObject <NSSecureCoding>
 @property  CPLChangeBatch *batch
 @property  unsigned long resourceSize
 @property  BOOL full
 @property  BOOL batchCanLowerQuota
 @property  NSString *clientCacheIdentifier

  // class methods
  +[CPLExtractedBatch supportsSecureCoding]

  // instance methods
  -[CPLExtractedBatch clientCacheIdentifier]
  -[CPLExtractedBatch isFull]
  -[CPLExtractedBatch uploadIdentifiers]
  -[CPLExtractedBatch initWithCoder:]
  -[CPLExtractedBatch .cxx_destruct]
  -[CPLExtractedBatch resourceSize]
  -[CPLExtractedBatch init]
  -[CPLExtractedBatch effectiveResourceSizeToUploadUsingStorage:]
  -[CPLExtractedBatch batch]
  -[CPLExtractedBatch batchCanLowerQuota]
  -[CPLExtractedBatch setClientCacheIdentifier:]
  -[CPLExtractedBatch forceScopeIndexOnAllRecordsTo:]
  -[CPLExtractedBatch setFull:]
  -[CPLExtractedBatch uploadIdentifierForChange:]
  -[CPLExtractedBatch encodeWithCoder:]
  -[CPLExtractedBatch addChange:fromStorage:]


CPLMemoryAssetList : PBCodable <NSCopying>
 @property  NSMutableArray *assets
 @property  BOOL hasVersion
 @property  unsigned int version

  // class methods
  +[CPLMemoryAssetList assetType]

  // instance methods
  -[CPLMemoryAssetList mergeFrom:]
  -[CPLMemoryAssetList clearAssets]
  -[CPLMemoryAssetList hasVersion]
  -[CPLMemoryAssetList assetsCount]
  -[CPLMemoryAssetList .cxx_destruct]
  -[CPLMemoryAssetList assets]
  -[CPLMemoryAssetList dictionaryRepresentation]
  -[CPLMemoryAssetList setHasVersion:]
  -[CPLMemoryAssetList writeTo:]
  -[CPLMemoryAssetList setVersion:]
  -[CPLMemoryAssetList isEqual:]
  -[CPLMemoryAssetList copyTo:]
  -[CPLMemoryAssetList readFrom:]
  -[CPLMemoryAssetList addAsset:]
  -[CPLMemoryAssetList setAssets:]
  -[CPLMemoryAssetList version]
  -[CPLMemoryAssetList copyWithZone:]
  -[CPLMemoryAssetList assetAtIndex:]


CPLChangeSessionContext : NSObject <NSSecureCoding>
 @property  unsigned long estimatedInitialSizeForLocalLibrary
 @property  unsigned long estimatedInitialAssetCountForLocalLibrary
 @property  CPLResetTracker *resetTracker

  // class methods
  +[CPLChangeSessionContext supportsSecureCoding]

  // instance methods
  -[CPLChangeSessionContext setEstimatedInitialAssetCountForLocalLibrary:]
  -[CPLChangeSessionContext initWithCoder:]
  -[CPLChangeSessionContext .cxx_destruct]
  -[CPLChangeSessionContext setResetTracker:]
  -[CPLChangeSessionContext setEstimatedInitialSizeForLocalLibrary:]
  -[CPLChangeSessionContext estimatedInitialAssetCountForLocalLibrary]
  -[CPLChangeSessionContext resetTracker]
  -[CPLChangeSessionContext encodeWithCoder:]
  -[CPLChangeSessionContext estimatedInitialSizeForLocalLibrary]


CPLChangeSession : NSObject <CPLAbstractObject>
 @property  unsigned long state
 @property  NSProgress *sessionProgress
 @property  NSString *sessionIdentifier
 @property  CPLLibraryManager *libraryManager
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CPLChangeSession platformImplementationProtocol]
  +[CPLChangeSession stateDescriptionForState:]
  +[CPLChangeSession shortDescription]

  // instance methods
  -[CPLChangeSession redactedDescription]
  -[CPLChangeSession tearDownWithCompletionHandler:]
  -[CPLChangeSession createSessionContext]
  -[CPLChangeSession initWithLibraryManager:]
  -[CPLChangeSession .cxx_destruct]
  -[CPLChangeSession platformObject]
  -[CPLChangeSession sessionIdentifier]
  -[CPLChangeSession setState:]
  -[CPLChangeSession init]
  -[CPLChangeSession finalizeWithCompletionHandler:]
  -[CPLChangeSession libraryManager]
  -[CPLChangeSession beginSessionWithKnownLibraryVersion:resetTracker:completionHandler:]
  -[CPLChangeSession sessionProgress]
  -[CPLChangeSession state]
  -[CPLChangeSession dealloc]


CPLNetworkIndicator : NSObject
  // class methods
  +[CPLNetworkIndicator _doProtected:]
  +[CPLNetworkIndicator _reallyHideNetworkIndicatorForBundleWithIdentifierLocked:]
  +[CPLNetworkIndicator showNetworkIndicatorForBundleWithIdentifier:]
  +[CPLNetworkIndicator hideNetworkIndicatorForBundleWithIdentifier:]
  +[CPLNetworkIndicator _reallyShowNetworkIndicatorForBundleWithIdentifierLocked:]


CPLForceSyncTask : NSObject
 @property  NSString *taskIdentifier
 @property  NSArray *scopeIdentifiers
 @property  BOOL cancelled

  // instance methods
  -[CPLForceSyncTask .cxx_destruct]
  -[CPLForceSyncTask isCancelled]
  -[CPLForceSyncTask setTaskIdentifier:]
  -[CPLForceSyncTask cancelTask]
  -[CPLForceSyncTask taskIdentifier]
  -[CPLForceSyncTask scopeIdentifiers]
  -[CPLForceSyncTask initWithScopeIdentifiers:]
  -[CPLForceSyncTask launchTask]


CPLPullFromTransportTask : CPLEngineMultiscopeSyncTask
  // instance methods
  -[CPLPullFromTransportTask .cxx_destruct]
  -[CPLPullFromTransportTask enumerateScopesForTaskInTransaction:]
  -[CPLPullFromTransportTask newScopedTaskWithScope:session:transportScope:clientCacheIdentifier:]
  -[CPLPullFromTransportTask shouldProcessScope:inTransaction:]
  -[CPLPullFromTransportTask taskIdentifier]


CPLPullFromTransportScopeTask : CPLEngineScopedTask
  // instance methods
  -[CPLPullFromTransportScopeTask checkScopeIsValidInTransaction:]
  -[CPLPullFromTransportScopeTask taskDidFinishWithError:]
  -[CPLPullFromTransportScopeTask _handleNewBatchFromQuery:newCursor:inTransaction:]
  -[CPLPullFromTransportScopeTask _fetchInitialSyncAnchor]
  -[CPLPullFromTransportScopeTask .cxx_destruct]
  -[CPLPullFromTransportScopeTask _storeInitialSyncAnchorIfNecessaryInTransaction:]
  -[CPLPullFromTransportScopeTask _cancelAllTasks]
  -[CPLPullFromTransportScopeTask _notifySchedulerPullQueueIsFullNowIfNecessary]
  -[CPLPullFromTransportScopeTask _launchQueryForClass:cursor:]
  -[CPLPullFromTransportScopeTask _extractAndMinglePersonsIfPossibleFromBatch:inTransaction:]
  -[CPLPullFromTransportScopeTask _totalAssetCountForScope]
  -[CPLPullFromTransportScopeTask _launchNextQueryTask]
  -[CPLPullFromTransportScopeTask launch]
  -[CPLPullFromTransportScopeTask _updateLastFeatureVersionAndRelaunchFetchChangesFromSyncAnchor:]
  -[CPLPullFromTransportScopeTask _checkServerFeatureVersionWithCompletionHandler:]
  -[CPLPullFromTransportScopeTask _handleNewBatchFromChanges:updatedFlags:newSyncAnchor:]
  -[CPLPullFromTransportScopeTask cancel]
  -[CPLPullFromTransportScopeTask _transientPullRepositoryInStore:]
  -[CPLPullFromTransportScopeTask _extractAndMingleAssetsIfPossibleFromBatch:inTransaction:]
  -[CPLPullFromTransportScopeTask _launchFetchChangesFromSyncAnchor:]
  -[CPLPullFromTransportScopeTask _handleNewBatchFromQuery:queryClass:newCursor:]
  -[CPLPullFromTransportScopeTask _handleNewBatchFromChanges:newSyncAnchor:inTransaction:]
  -[CPLPullFromTransportScopeTask _reallyNotifySchedulerPullQueueIsFull]
  -[CPLPullFromTransportScopeTask _notifySchedulerPullQueueIsFull]
  -[CPLPullFromTransportScopeTask _launch]
  -[CPLPullFromTransportScopeTask initWithEngineLibrary:session:clientCacheIdentifier:scope:transportScope:]
  -[CPLPullFromTransportScopeTask _cloudCacheInStore:]
  -[CPLPullFromTransportScopeTask _launchPullTasksAndDisableQueries:]
  -[CPLPullFromTransportScopeTask taskIdentifier]


CPLServerFeedbackMessage : PBCodable <NSCopying>
 @property  NSMutableArray *keysAndValues

  // instance methods
  -[CPLServerFeedbackMessage mergeFrom:]
  -[CPLServerFeedbackMessage .cxx_destruct]
  -[CPLServerFeedbackMessage dictionaryRepresentation]
  -[CPLServerFeedbackMessage writeTo:]
  -[CPLServerFeedbackMessage isEqual:]
  -[CPLServerFeedbackMessage copyTo:]
  -[CPLServerFeedbackMessage readFrom:]
  -[CPLServerFeedbackMessage copyWithZone:]
  -[CPLServerFeedbackMessage addKeysAndValues:]
  -[CPLServerFeedbackMessage keysAndValuesCount]
  -[CPLServerFeedbackMessage keysAndValuesAtIndex:]
  -[CPLServerFeedbackMessage clearKeysAndValues]
  -[CPLServerFeedbackMessage keysAndValues]
  -[CPLServerFeedbackMessage setKeysAndValues:]


CPLChangeBatch : NSObject <NSSecureCoding, NSCopying, NSFastEnumeration, NSCopying>
 @property  NSArray *records

  // class methods
  +[CPLChangeBatch supportsSecureCoding]

  // instance methods
  -[CPLChangeBatch cplFullDescription]
  -[CPLChangeBatch initWithRecords:]
  -[CPLChangeBatch addRecord:]
  -[CPLChangeBatch _additionalRecords]
  -[CPLChangeBatch redactedDescription]
  -[CPLChangeBatch addRecordsFromBatch:]
  -[CPLChangeBatch _initWithRecords:]
  -[CPLChangeBatch initWithCoder:]
  -[CPLChangeBatch filterScopeChangeFromBatch]
  -[CPLChangeBatch recordWithScopedIdentifier:]
  -[CPLChangeBatch .cxx_destruct]
  -[CPLChangeBatch count]
  -[CPLChangeBatch removeRecordWithScopedIdentifier:]
  -[CPLChangeBatch summaryDescription]
  -[CPLChangeBatch removeRecordWithIdentifier:]
  -[CPLChangeBatch hasChangeWithScopedIdentifier:]
  -[CPLChangeBatch objectAtIndexedSubscript:]
  -[CPLChangeBatch estimatedBatchSize]
  -[CPLChangeBatch init]
  -[CPLChangeBatch localResourceOfType:forItemWithCloudScopedIdentifier:]
  -[CPLChangeBatch isEqual:]
  -[CPLChangeBatch records]
  -[CPLChangeBatch _addAdditionalRecord:]
  -[CPLChangeBatch additionalRecordWithScopedIdentifier:]
  -[CPLChangeBatch _addChange:resultBatch:changesPerScopedIdentifier:changesPerClass:]
  -[CPLChangeBatch sortBatchWithError:]
  -[CPLChangeBatch extractInitialDownloadBatch:shouldConsiderRecordFilter:]
  -[CPLChangeBatch countByEnumeratingWithState:objects:count:]
  -[CPLChangeBatch _setAdditionalRecords:]
  -[CPLChangeBatch appendLocalResources:forItemWithCloudScopedIdentifier:]
  -[CPLChangeBatch copyWithZone:]
  -[CPLChangeBatch hasChangeWithIdentifier:]
  -[CPLChangeBatch _setRecords:]
  -[CPLChangeBatch additionalRecordWithIdentifier:]
  -[CPLChangeBatch _descriptionRedacted:]
  -[CPLChangeBatch encodeWithCoder:]


CPLPlaceholderRecord : NSObject
 @property  Class recordClass
 @property  CPLScopedIdentifier *scopedIdentifier
 @property  Class relatedRecordClass
 @property  NSString *relatedIdentifier
 @property  CPLScopedIdentifier *relatedScopedIdentifier

  // instance methods
  -[CPLPlaceholderRecord redactedDescription]
  -[CPLPlaceholderRecord .cxx_destruct]
  -[CPLPlaceholderRecord relatedScopedIdentifier]
  -[CPLPlaceholderRecord recordClass]
  -[CPLPlaceholderRecord initWithRecord:]
  -[CPLPlaceholderRecord scopedIdentifier]
  -[CPLPlaceholderRecord relatedRecordClass]
  -[CPLPlaceholderRecord initWithRecordClass:scopedIdentifier:relatedRecordClass:relatedIdentifier:]
  -[CPLPlaceholderRecord translateToCloudRecordUsingIDMapping:]
  -[CPLPlaceholderRecord translateToClientRecordUsingIDMapping:]
  -[CPLPlaceholderRecord relatedIdentifier]


CPLSuggestionRecordList : PBCodable <NSCopying>
 @property  NSMutableArray *assets
 @property  BOOL hasVersion
 @property  unsigned int version
 @property  NSMutableArray *persons
 @property  NSMutableArray *memorys

  // class methods
  +[CPLSuggestionRecordList assetType]
  +[CPLSuggestionRecordList personType]
  +[CPLSuggestionRecordList memoryType]

  // instance methods
  -[CPLSuggestionRecordList mergeFrom:]
  -[CPLSuggestionRecordList clearAssets]
  -[CPLSuggestionRecordList hasVersion]
  -[CPLSuggestionRecordList assetsCount]
  -[CPLSuggestionRecordList memorysCount]
  -[CPLSuggestionRecordList personsCount]
  -[CPLSuggestionRecordList .cxx_destruct]
  -[CPLSuggestionRecordList assets]
  -[CPLSuggestionRecordList dictionaryRepresentation]
  -[CPLSuggestionRecordList setHasVersion:]
  -[CPLSuggestionRecordList memorys]
  -[CPLSuggestionRecordList writeTo:]
  -[CPLSuggestionRecordList persons]
  -[CPLSuggestionRecordList setVersion:]
  -[CPLSuggestionRecordList isEqual:]
  -[CPLSuggestionRecordList copyTo:]
  -[CPLSuggestionRecordList readFrom:]
  -[CPLSuggestionRecordList addAsset:]
  -[CPLSuggestionRecordList setAssets:]
  -[CPLSuggestionRecordList personAtIndex:]
  -[CPLSuggestionRecordList version]
  -[CPLSuggestionRecordList copyWithZone:]
  -[CPLSuggestionRecordList setPersons:]
  -[CPLSuggestionRecordList setMemorys:]
  -[CPLSuggestionRecordList assetAtIndex:]
  -[CPLSuggestionRecordList addPerson:]
  -[CPLSuggestionRecordList addMemory:]
  -[CPLSuggestionRecordList clearPersons]
  -[CPLSuggestionRecordList clearMemorys]
  -[CPLSuggestionRecordList memoryAtIndex:]


CPLPlatformObject : NSObject
 @property  <CPLAbstractObject> *abstractObject

  // instance methods
  -[CPLPlatformObject initWithAbstractObject:]
  -[CPLPlatformObject .cxx_destruct]
  -[CPLPlatformObject abstractObject]
  -[CPLPlatformObject init]


CPLPlatform : NSObject
 @property  NSString *suffix

  // class methods
  +[CPLPlatform currentPlatform]
  +[CPLPlatform defaultPlatform]
  +[CPLPlatform setProxyImplementationForPlatform:]
  +[CPLPlatform setDefaultPlatform:]

  // instance methods
  -[CPLPlatform suffix]
  -[CPLPlatform .cxx_destruct]
  -[CPLPlatform init]
  -[CPLPlatform implementationClassForAbstractClass:]
  -[CPLPlatform newPlatformImplementationForObject:]
  -[CPLPlatform setSuffix:]
  -[CPLPlatform setPlatformImplementation:forClass:]


CPLItemChange : CPLRecordChange <NSSecureCoding, NSCopying>
 @property  NSArray *containerRelations

  // class methods
  +[CPLItemChange cplShouldIgnorePropertyForCoding:]

  // instance methods
  -[CPLItemChange .cxx_destruct]
  -[CPLItemChange setContainerRelations:]
  -[CPLItemChange init]
  -[CPLItemChange containerRelations]
  -[CPLItemChange propertiesForChangeType:]
  -[CPLItemChange containerDescription]
  -[CPLItemChange containerRelationChangesComparedToRelationEnumerator:error:]


CPLDateFormatter : NSObject
  // class methods
  +[CPLDateFormatter stringForTimeInterval:]
  +[CPLDateFormatter stringFromDateAgo:now:]
  +[CPLDateFormatter stringFromDate:]
  +[CPLDateFormatter stringForTimeIntervalAgo:now:]


CPLServerFeedbackRequest : PBRequest <NSCopying>
 @property  NSMutableArray *messages

  // instance methods
  -[CPLServerFeedbackRequest setMessages:]
  -[CPLServerFeedbackRequest mergeFrom:]
  -[CPLServerFeedbackRequest .cxx_destruct]
  -[CPLServerFeedbackRequest dictionaryRepresentation]
  -[CPLServerFeedbackRequest addMessages:]
  -[CPLServerFeedbackRequest writeTo:]
  -[CPLServerFeedbackRequest isEqual:]
  -[CPLServerFeedbackRequest copyTo:]
  -[CPLServerFeedbackRequest readFrom:]
  -[CPLServerFeedbackRequest messages]
  -[CPLServerFeedbackRequest messagesCount]
  -[CPLServerFeedbackRequest clearMessages]
  -[CPLServerFeedbackRequest copyWithZone:]
  -[CPLServerFeedbackRequest messagesAtIndex:]


CPLEngineInitialQueryTracker : CPLEngineStorage <CPLAbstractObject>
 @property  CPLPlatformObject *platformObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CPLEngineInitialQueryTracker scopeType]
  -[CPLEngineInitialQueryTracker recordInitialQueryForClassStarted:scope:cursor:error:]
  -[CPLEngineInitialQueryTracker deleteRecordsForScopeIndex:maxCount:deletedCount:error:]
  -[CPLEngineInitialQueryTracker recordQueryBatchForClass:scope:cursor:count:error:]
  -[CPLEngineInitialQueryTracker recordInitialQueryForClassFinished:scope:finishedState:error:]


CPLAlbumChange : CPLContainerChange <NSSecureCoding, NSCopying>
 @property  unsigned long albumType
 @property  NSString *name
 @property  long long position
 @property  NSString *parentIdentifier
 @property  unsigned long albumSortType
 @property  BOOL albumSortAscending
 @property  NSString *projectDocumentType
 @property  NSData *projectData
 @property  NSData *projectPreviewImageData
 @property  NSString *importedByBundleIdentifier

  // class methods
  +[CPLAlbumChange relatedRecordClass]

  // instance methods
  -[CPLAlbumChange name]
  -[CPLAlbumChange projectData]
  -[CPLAlbumChange projectDocumentType]
  -[CPLAlbumChange .cxx_destruct]
  -[CPLAlbumChange setProjectDocumentType:]
  -[CPLAlbumChange setProjectData:]
  -[CPLAlbumChange setName:]
  -[CPLAlbumChange projectPreviewImageData]
  -[CPLAlbumChange importedByBundleIdentifier]
  -[CPLAlbumChange albumType]
  -[CPLAlbumChange albumSortAscending]
  -[CPLAlbumChange albumSortType]
  -[CPLAlbumChange parentIdentifier]
  -[CPLAlbumChange setParentIdentifier:]
  -[CPLAlbumChange setImportedByBundleIdentifier:]
  -[CPLAlbumChange setAlbumType:]
  -[CPLAlbumChange setPosition:]
  -[CPLAlbumChange setProjectPreviewImageData:]
  -[CPLAlbumChange setAlbumSortType:]
  -[CPLAlbumChange setAlbumSortAscending:]
  -[CPLAlbumChange position]
  -[CPLAlbumChange checkDefaultValueBlockForPropertyWithSelector:]
  -[CPLAlbumChange propertiesDescription]
  -[CPLAlbumChange scopedIdentifiersForMapping]
  -[CPLAlbumChange translateToCloudChangeUsingIDMapping:error:]
  -[CPLAlbumChange translateToClientChangeUsingIDMapping:error:]
  -[CPLAlbumChange parentScopedIdentifier]
  -[CPLAlbumChange setParentScopedIdentifier:]
  -[CPLAlbumChange relatedIdentifier]
  -[CPLAlbumChange setRelatedIdentifier:]
  -[CPLAlbumChange validateRecordForTracker:]


CPLFaceCropChange : CPLRecordChange
 @property  NSString *personIdentifier
 @property  NSData *resourceData
 @property  long long faceCropType
 @property  NSString *rejectedPersonIdentifier

  // class methods
  +[CPLFaceCropChange relatedRecordClass]

  // instance methods
  -[CPLFaceCropChange setRejectedPersonIdentifier:]
  -[CPLFaceCropChange faceCropType]
  -[CPLFaceCropChange rejectedPersonIdentifier]
  -[CPLFaceCropChange setPersonIdentifier:]
  -[CPLFaceCropChange personIdentifier]
  -[CPLFaceCropChange .cxx_destruct]
  -[CPLFaceCropChange supportsDeletion]
  -[CPLFaceCropChange resourceData]
  -[CPLFaceCropChange setResourceData:]
  -[CPLFaceCropChange setFaceCropType:]
  -[CPLFaceCropChange supportsDirectDeletion]
  -[CPLFaceCropChange propertiesDescription]
  -[CPLFaceCropChange relatedIdentifier]
  -[CPLFaceCropChange setRelatedIdentifier:]
  -[CPLFaceCropChange validateFullRecord]
  -[CPLFaceCropChange validateChangeWithError:]
  -[CPLFaceCropChange personScopedIdentifier]
  -[CPLFaceCropChange setPersonScopedIdentifier:]


CPLSuggestionPerson : PBCodable <NSCopying>
 @property  BOOL hasPersonIdentifier
 @property  NSString *personIdentifier
 @property  BOOL hasType
 @property  unsigned int type
 @property  BOOL hasFeature
 @property  unsigned int feature
 @property  BOOL hasContext
 @property  NSString *context

  // instance methods
  -[CPLSuggestionPerson mergeFrom:]
  -[CPLSuggestionPerson hasContext]
  -[CPLSuggestionPerson setType:]
  -[CPLSuggestionPerson setPersonIdentifier:]
  -[CPLSuggestionPerson personIdentifier]
  -[CPLSuggestionPerson .cxx_destruct]
  -[CPLSuggestionPerson dictionaryRepresentation]
  -[CPLSuggestionPerson writeTo:]
  -[CPLSuggestionPerson setHasType:]
  -[CPLSuggestionPerson hasType]
  -[CPLSuggestionPerson isEqual:]
  -[CPLSuggestionPerson copyTo:]
  -[CPLSuggestionPerson hasFeature]
  -[CPLSuggestionPerson readFrom:]
  -[CPLSuggestionPerson type]
  -[CPLSuggestionPerson feature]
  -[CPLSuggestionPerson setContext:]
  -[CPLSuggestionPerson setFeature:]
  -[CPLSuggestionPerson copyWithZone:]
  -[CPLSuggestionPerson context]
  -[CPLSuggestionPerson setHasFeature:]
  -[CPLSuggestionPerson hasPersonIdentifier]


NSFileManager(CPLAdditions)
	// instance methods
	-[NSFileManager(CPLAdditions) cplFileExistsAtURL:]
	-[NSFileManager(CPLAdditions) cplCopyItemAtURL:toURL:error:]
	-[NSFileManager(CPLAdditions) cplMoveItemAtURL:toURL:error:]
	-[NSFileManager(CPLAdditions) cplIsFileExistsError:]
	-[NSFileManager(CPLAdditions) cplIsFileDoesNotExistError:]

(CPLArchiver)
	// class methods
	+[(CPLArchiver) cplShouldIgnorePropertyForCoding:]
	+[(CPLArchiver) cplShouldIgnorePropertyForEquality:]
	+[(CPLArchiver) cplAdditionalSecureClassesForProperty:]
	+[(CPLArchiver) classForStoredClassName:forCPLArchiver:]
	+[(CPLArchiver) _addPropertyAttributeMapToPropertyMapLocked:]
	+[(CPLArchiver) _cplPropertyAttributeMap]
	+[(CPLArchiver) cplDumpProperties]
	+[(CPLArchiver) cplAllPropertyNames]

	// instance methods
	-[(CPLArchiver) cplFullDescription]
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) cplSpecialIsEqual:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]
	-[(CPLArchiver) cplHash]
	-[(CPLArchiver) cplSpecialHash]
	-[(CPLArchiver) cplIsEqual:]
	-[(CPLArchiver) cplCopyPropertiesFromObject:withCopyBlock:]
	-[(CPLArchiver) cplEncodePropertiesWithCoder:]
	-[(CPLArchiver) cplDecodePropertiesFromCoder:]
	-[(CPLArchiver) storedClassNameForCPLArchiver:]
	-[(CPLArchiver) cplDeepCopy]
	-[(CPLArchiver) cplCopyProperties:fromObject:withCopyBlock:]
	-[(CPLArchiver) cplIsEqual:withEqualityBlock:]
	-[(CPLArchiver) cplProperties:areEqualToPropertiesOf:withEqualityBlock:]
	-[(CPLArchiver) cplProperties:areEqualToPropertiesOf:diffTracker:withEqualityBlock:]
	-[(CPLArchiver) _cplCopyProperties:fromOtherObject:withCopyBlock:]
	-[(CPLArchiver) cplClearProperties:]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]
	-[(CPLArchiver) cplDeepCopy]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]
	-[(CPLArchiver) cpl_redactedShareURL]
	-[(CPLArchiver) cplStringByAppendingPathExtension:fallbackExtension:]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]
	-[(CPLArchiver) cplSyncAnchorSimpleDescription]
	-[(CPLArchiver) cplQueryCursorSimpleDescription]
	-[(CPLArchiver) cplSyncAnchorDescription]
	-[(CPLArchiver) cplQueryCursorDescription]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]

NSUUID(CPLArchiver)
	// instance methods
	-[NSUUID(CPLArchiver) initWithCPLArchiver:]
	-[NSUUID(CPLArchiver) plistArchiveWithCPLArchiver:]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]
	-[(CPLArchiver) cpl_redactedShareURL]

(CPLArchiver)
	// instance methods
	-[(CPLArchiver) cplFullDescription]
	-[(CPLArchiver) initWithCPLArchiver:]
	-[(CPLArchiver) plistArchiveWithCPLArchiver:]

CLLocation(CPLArchiver)
	// instance methods
	-[CLLocation(CPLArchiver) initWithCPLArchiver:]
	-[CLLocation(CPLArchiver) cplSpecialIsEqual:]
	-[CLLocation(CPLArchiver) plistArchiveWithCPLArchiver:]
	-[CLLocation(CPLArchiver) cplSpecialHash]

PBCodable(CPLArchiver)
	// instance methods
	-[PBCodable(CPLArchiver) initWithCPLArchiver:]
	-[PBCodable(CPLArchiver) plistArchiveWithCPLArchiver:]

(CPLAdditions)
	// instance methods
	-[(CPLAdditions) isCPLErrorWithCode:]
	-[(CPLAdditions) isCPLError]
	-[(CPLAdditions) isCPLOperationCancelledError]
	-[(CPLAdditions) cplUnderlyingPOSIXError]
	-[(CPLAdditions) isCPLOperationDeferredError]
	-[(CPLAdditions) cplSafeErrorForXPC]
	-[(CPLAdditions) _cplSafeUserInfoForXPCDidChange:]
	-[(CPLAdditions) cplShortDomainDescription]

NSKeyedUnarchiver(CPLSafeArchiving)
	// class methods
	+[NSKeyedUnarchiver(CPLSafeArchiving) cpl_safeUnarchiveObjectWithData:classes:]
	+[NSKeyedUnarchiver(CPLSafeArchiving) cpl_safeUnarchiveObjectWithData:class:]

NSKeyedArchiver(CPLSafeArchiving)
	// class methods
	+[NSKeyedArchiver(CPLSafeArchiving) cpl_archivedDataWithRootObject:]

01 00 0100 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSByteCountFormatter 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCoder 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCondition 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0e00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponents 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLRequest 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1000 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0b00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0b00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBRequest 
01 00 0400 /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats: PFMediaCapabilities 
01 00 0400 /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats: PFUniformTypeUtilities 
01 00 0300 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: RadiosPreferences 
01 00 0900 /System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers: UTType 
