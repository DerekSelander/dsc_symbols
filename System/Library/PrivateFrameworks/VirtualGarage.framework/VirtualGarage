|| __DATA.__data _VirtualGarageConfig_AutomaticallyDeselectMissingVehicles
|| __DATA.__data _VirtualGarageConfig_CapacityThresholdForVehicleStateComparison
|| __DATA.__data _VirtualGarageConfig_EVRoutingDisabledApplications
|| __DATA.__data _VirtualGarageConfig_EVRoutingEnableAllowListing
|| __DATA.__data _VirtualGarageConfig_EVRoutingEnableAutomaticVehicleDeselection
|| __DATA.__data _VirtualGarageConfig_EVRoutingEnableIAP2Onboarding
|| __DATA.__data _VirtualGarageConfig_EVRoutingForceShowLastSyncDate
|| __DATA.__data _VirtualGarageConfig_EVRoutingIntentsRequestTimeout
|| __DATA.__data _VirtualGarageConfig_EVRoutingKeyNameForModelID
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForIApAllowlist
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForIApDenyListedFirmwareID
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForIApDenyListedModel
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForIApDenyListedModelID
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForIApDenyListedYear
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForIApDenylist
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForSiriAllowListedModelIDs
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForSiriAllowlist
|| __DATA.__data _VirtualGarageConfig_EVRoutingManifestKeyNameForSiriBundleID
|| __DATA.__data _VirtualGarageConfig_EVRoutingOEMAppPullInterval
|| __DATA.__data _VirtualGarageConfig_EVRoutingResourceNameForAllowAndDenylists
|| __DATA.__data _VirtualGarageConfig_EVRoutingStreamUpdatesDuringNav
|| __DATA.__data _VirtualGarageConfig_EVRoutingSynchronousVehicleStateUpdate
|| __DATA.__data _VirtualGarageConfig_EVRoutingUseCarDisplaySimIdentifier
|| __DATA.__data _VirtualGarageConfig_EVRoutingUseMapsSyncLiveUpdates
|| __DATA.__data _VirtualGarageConfig_TimeThresholdForVehicleStateComparison
|| __DATA.__objc_data _OBJC_CLASS_$_VGOEMApplication
|| __DATA.__objc_data _OBJC_CLASS_$_VGVehicleDeduper
|| __DATA.__objc_data _OBJC_CLASS_$_VGVehicleState
|| __DATA.__objc_data _OBJC_CLASS_$_VGVehicleStateStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_VGOEMApplication
|| __DATA.__objc_data _OBJC_METACLASS_$_VGVehicleDeduper
|| __DATA.__objc_data _OBJC_METACLASS_$_VGVehicleState
|| __DATA.__objc_data _OBJC_METACLASS_$_VGVehicleStateStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VGDataCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VGOEMApplicationFinder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VGVehicle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VGVirtualGarage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VGVirtualGarageService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VGDataCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VGOEMApplicationFinder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VGVehicle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VGVirtualGarage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VGVirtualGarageService
|| __TEXT.__text _GEOEvChargingConnectorTypeFromVGConnectorType
|| __TEXT.__text _IsVirtualGarageEnabled
|| __TEXT.__text _NSStringFromVGChargingConnectorTypeOptions
|| __TEXT.__text _VGChargingConnectorTypeOptionsList
|| __TEXT.__text _VGChargingConnectorTypeOptionsPacked
|| __TEXT.__text _VGChargingConnectorTypeOptionsUnpacked
|| __TEXT.__text _VGGetAssertLog
|| __TEXT.__text _VGGetDataCoordinatorLog
|| __TEXT.__text _VGGetExternalAccessoryLog
|| __TEXT.__text _VGGetExternalAccessoryModelFilterLog
|| __TEXT.__text _VGGetOEMApplicationLog
|| __TEXT.__text _VGGetPersistingLog
|| __TEXT.__text _VGGetUIHelperLog
|| __TEXT.__text _VGGetVirtualGarageLog
|| __TEXT.__text _VGHexRepresentationFromCGColor
|| __TEXT.__text _VGProcessNameForPID
|| __TEXT.__text _VGVehicleStateStorageReadFrom
|| __TEXT.__text _VGVehiclesHaveMatchingVehicleStateProviders
|| __TEXT.__text _startHostingVirtualGarageServiceWithPersister
|| __TEXT.__text _stopHostingVirtualGarageService
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreGraphics: _CGColorGetColorSpace
__ CoreGraphics: _CGColorGetComponents
__ CoreGraphics: _CGColorGetNumberOfComponents
__ CoreGraphics: _CGColorSpaceGetModel
__ CoreGraphics: _CGColorSpaceGetName
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ ExternalAccessory: _EAAccessoryDidConnectNotification
__ ExternalAccessory: _EAAccessoryDidDisconnectNotification
__ ExternalAccessory: _EAAccessoryKey
__ ExternalAccessory: _EAAccessoryVehicleDataUpdateNotification
__ ExternalAccessory: _EAVehicleInfoActiveConnectorKey
__ ExternalAccessory: _EAVehicleInfoChargingParameterKey
__ ExternalAccessory: _EAVehicleInfoConsumptionParameterKey
__ ExternalAccessory: _EAVehicleInfoCurrentBatteryChargeKey
__ ExternalAccessory: _EAVehicleInfoDisplayNameKey
__ ExternalAccessory: _EAVehicleInfoDisplayedBatteryPercentageKey
__ ExternalAccessory: _EAVehicleInfoIsChargingKey
__ ExternalAccessory: _EAVehicleInfoMakeKey
__ ExternalAccessory: _EAVehicleInfoMapsDisplayNameKey
__ ExternalAccessory: _EAVehicleInfoMaxBatteryChargeKey
__ ExternalAccessory: _EAVehicleInfoMaxRangeElectricKey
__ ExternalAccessory: _EAVehicleInfoMinBatteryChargeKey
__ ExternalAccessory: _EAVehicleInfoModelKey
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeCCS1Key
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeCCS2Key
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeCHAdeMOKey
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeGBT_ACKey
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeGBT_DCKey
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeJ1772Key
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeMennekesKey
__ ExternalAccessory: _EAVehicleInfoPowerForConnectorTypeTeslaKey
__ ExternalAccessory: _EAVehicleInfoSupportedChargingConnectorsBitMaskKey
__ ExternalAccessory: _EAVehicleInfoVehicleColorHexCodeKey
__ ExternalAccessory: _EAVehicleInfoYearKey
__ ExternalAccessory: _OBJC_CLASS_$_EAAccessory
__ ExternalAccessory: _OBJC_CLASS_$_EAAccessoryManager
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMeasurement
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUnitEnergy
__ Foundation: _OBJC_CLASS_$_NSUnitLength
__ Foundation: _OBJC_CLASS_$_NSUnitPower
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ GeoServices: _GEOConfigGetBOOL
__ GeoServices: _GEOConfigGetDouble
__ GeoServices: _GEOConfigGetString
__ GeoServices: _GEOConfigRemoveDelegateListenerForAllKeys
__ GeoServices: _GEOErrorDomain
__ GeoServices: _MapsFeature_IsEnabled_Alberta
__ GeoServices: _MapsFeature_IsEnabled_EVRouting
__ GeoServices: _MapsFeaturesConfig_EnableAlberta
__ GeoServices: _MapsFeaturesConfig_EnableEVRouting
__ GeoServices: _OBJC_CLASS_$_GEOObserverHashTable
__ GeoServices: _OBJC_CLASS_$_GEOResourceManager
__ GeoServices: __GEOConfigAddDelegateListenerForKey
__ GeoServices: _geo_get_global_queue
__ GeoServices: _geo_isolate_sync_data
__ GeoServices: _geo_isolater_create_with_format
__ Intents: _INCarChargingConnectorTypeCCS1
__ Intents: _INCarChargingConnectorTypeCCS2
__ Intents: _INCarChargingConnectorTypeCHAdeMO
__ Intents: _INCarChargingConnectorTypeGBTAC
__ Intents: _INCarChargingConnectorTypeGBTDC
__ Intents: _INCarChargingConnectorTypeJ1772
__ Intents: _INCarChargingConnectorTypeMennekes
__ Intents: _INCarChargingConnectorTypeTesla
__ Intents: _OBJC_CLASS_$_INAppInfo
__ Intents: _OBJC_CLASS_$_INGetCarPowerLevelStatusIntent
__ Intents: _OBJC_CLASS_$_INGetCarPowerLevelStatusIntentResponse
__ Intents: _OBJC_CLASS_$_INListCarsIntent
__ Intents: _OBJC_CLASS_$_INSpeakableString
__ IntentsCore: _OBJC_CLASS_$_INCExtensionConnection
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _sysctl
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _sel_getName
VGVehicleDeduper : NSObject
  // class methods
  +[VGVehicleDeduper _vehicleMatchingVehicle:inArray:]
  +[VGVehicleDeduper actionForAddingNewVehicle:withExistingGarageVehicles:andUnpairedVehicles:]


VGVehicle : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *pairedAppInstallDeviceIdentifier
 @property  NSData *pairedAppInstallSessionIdentifier
 @property  NSString *identifier
 @property  NSDate *creationDate
 @property  NSDate *lastStateUpdateDate
 @property  NSString *displayName
 @property  NSString *year
 @property  NSString *manufacturer
 @property  NSString *model
 @property  NSString *colorHex
 @property  NSString *headUnitBluetoothIdentifier
 @property  NSString *headUnitIdentifier
 @property  NSString *licensePlate
 @property  NSString *lprVehicleType
 @property  NSString *lprPowerType
 @property  unsigned long supportedConnectors
 @property  NSDictionary *powerByConnector
 @property  VGVehicleState *currentVehicleState
 @property  BOOL isPureElectricVehicle
 @property  NSString *pairedAppIdentifier
 @property  NSString *iapIdentifier
 @property  NSString *siriIntentsIdentifier

  // class methods
  +[VGVehicle supportsSecureCoding]

  // instance methods
  -[VGVehicle year]
  -[VGVehicle displayName]
  -[VGVehicle initWithCoder:]
  -[VGVehicle licensePlate]
  -[VGVehicle setLicensePlate:]
  -[VGVehicle .cxx_destruct]
  -[VGVehicle manufacturer]
  -[VGVehicle isEqual:]
  -[VGVehicle identifier]
  -[VGVehicle setDisplayName:]
  -[VGVehicle model]
  -[VGVehicle creationDate]
  -[VGVehicle colorHex]
  -[VGVehicle copyWithZone:]
  -[VGVehicle encodeWithCoder:]
  -[VGVehicle setColorHex:]
  -[VGVehicle currentVehicleState]
  -[VGVehicle headUnitBluetoothIdentifier]
  -[VGVehicle iapIdentifier]
  -[VGVehicle setIapIdentifier:]
  -[VGVehicle lastStateUpdateDate]
  -[VGVehicle lprPowerType]
  -[VGVehicle setLprPowerType:]
  -[VGVehicle lprVehicleType]
  -[VGVehicle setLprVehicleType:]
  -[VGVehicle pairedAppIdentifier]
  -[VGVehicle setPairedAppIdentifier:]
  -[VGVehicle powerByConnector]
  -[VGVehicle siriIntentsIdentifier]
  -[VGVehicle setSiriIntentsIdentifier:]
  -[VGVehicle supportedConnectors]
  -[VGVehicle setSupportedConnectors:]
  -[VGVehicle displayedBatteryPercentage]
  -[VGVehicle isPureElectricVehicle]
  -[VGVehicle initWithIdentifier:displayName:year:manufacturer:model:colorHex:licensePlate:lprVehicleType:lprPowerType:]
  -[VGVehicle _updateWithVehicleState:]
  -[VGVehicle _vehicleByUpdatingWithVehicle:]
  -[VGVehicle pairedAppInstallDeviceIdentifier]
  -[VGVehicle pairedAppInstallSessionIdentifier]
  -[VGVehicle _canBeUpdatedFromState:]
  -[VGVehicle headUnitIdentifier]
  -[VGVehicle _identifierForVehicleStateOrigin:]
  -[VGVehicle batteryPercentageBasedOfCapacity]
  -[VGVehicle initWithDisplayName:year:manufacturer:model:colorHex:headUnitIdentifier:headUnitBluetoothIdentifier:supportedConnectors:powerByConnector:]
  -[VGVehicle initWithLicensePlate:lprVehicleType:lprPowerType:]
  -[VGVehicle initWithMapsSyncVehicle:]
  -[VGVehicle pairToIapIdentifier:bluetoothIdentifier:]
  -[VGVehicle combinedDisplayName]
  -[VGVehicle setPairedAppInstallDeviceIdentifier:]
  -[VGVehicle setPairedAppInstallSessionIdentifier:]


VGVehicleStateStorage : PBCodable <NSCopying>
 @property  NSString *identifier
 @property  BOOL hasDateOfUpdate
 @property  double dateOfUpdate
 @property  BOOL hasOrigin
 @property  int origin
 @property  BOOL hasBatteryPercentage
 @property  double batteryPercentage
 @property  BOOL hasCurrentEVRange
 @property  double currentEVRange
 @property  BOOL hasMaxEVRange
 @property  double maxEVRange
 @property  BOOL hasMinBatteryCapacity
 @property  double minBatteryCapacity
 @property  BOOL hasCurrentBatteryCapacity
 @property  double currentBatteryCapacity
 @property  BOOL hasMaxBatteryCapacity
 @property  double maxBatteryCapacity
 @property  BOOL hasConsumptionArguments
 @property  NSString *consumptionArguments
 @property  BOOL hasChargingArguments
 @property  NSString *chargingArguments
 @property  BOOL hasIsCharging
 @property  BOOL isCharging
 @property  BOOL hasActiveConnector
 @property  int activeConnector
 @property  BOOL hasPairedAppInstallSessionIdentifier
 @property  NSData *pairedAppInstallSessionIdentifier
 @property  BOOL hasPairedAppInstallDeviceIdentifier
 @property  NSString *pairedAppInstallDeviceIdentifier

  // instance methods
  -[VGVehicleStateStorage mergeFrom:]
  -[VGVehicleStateStorage origin]
  -[VGVehicleStateStorage setOrigin:]
  -[VGVehicleStateStorage hasOrigin]
  -[VGVehicleStateStorage setIsCharging:]
  -[VGVehicleStateStorage .cxx_destruct]
  -[VGVehicleStateStorage setHasOrigin:]
  -[VGVehicleStateStorage dictionaryRepresentation]
  -[VGVehicleStateStorage writeTo:]
  -[VGVehicleStateStorage originAsString:]
  -[VGVehicleStateStorage isEqual:]
  -[VGVehicleStateStorage setBatteryPercentage:]
  -[VGVehicleStateStorage copyTo:]
  -[VGVehicleStateStorage readFrom:]
  -[VGVehicleStateStorage identifier]
  -[VGVehicleStateStorage setIdentifier:]
  -[VGVehicleStateStorage batteryPercentage]
  -[VGVehicleStateStorage isCharging]
  -[VGVehicleStateStorage copyWithZone:]
  -[VGVehicleStateStorage setActiveConnector:]
  -[VGVehicleStateStorage setCurrentBatteryCapacity:]
  -[VGVehicleStateStorage hasActiveConnector]
  -[VGVehicleStateStorage currentBatteryCapacity]
  -[VGVehicleStateStorage activeConnector]
  -[VGVehicleStateStorage activeConnectorAsString:]
  -[VGVehicleStateStorage StringAsActiveConnector:]
  -[VGVehicleStateStorage setHasActiveConnector:]
  -[VGVehicleStateStorage hasCurrentBatteryCapacity]
  -[VGVehicleStateStorage StringAsOrigin:]
  -[VGVehicleStateStorage consumptionArguments]
  -[VGVehicleStateStorage chargingArguments]
  -[VGVehicleStateStorage setConsumptionArguments:]
  -[VGVehicleStateStorage setChargingArguments:]
  -[VGVehicleStateStorage hasConsumptionArguments]
  -[VGVehicleStateStorage hasChargingArguments]
  -[VGVehicleStateStorage setHasIsCharging:]
  -[VGVehicleStateStorage hasIsCharging]
  -[VGVehicleStateStorage setHasBatteryPercentage:]
  -[VGVehicleStateStorage hasBatteryPercentage]
  -[VGVehicleStateStorage currentEVRange]
  -[VGVehicleStateStorage maxEVRange]
  -[VGVehicleStateStorage minBatteryCapacity]
  -[VGVehicleStateStorage maxBatteryCapacity]
  -[VGVehicleStateStorage dateOfUpdate]
  -[VGVehicleStateStorage pairedAppInstallDeviceIdentifier]
  -[VGVehicleStateStorage pairedAppInstallSessionIdentifier]
  -[VGVehicleStateStorage setPairedAppInstallDeviceIdentifier:]
  -[VGVehicleStateStorage setPairedAppInstallSessionIdentifier:]
  -[VGVehicleStateStorage setDateOfUpdate:]
  -[VGVehicleStateStorage setHasDateOfUpdate:]
  -[VGVehicleStateStorage hasDateOfUpdate]
  -[VGVehicleStateStorage setCurrentEVRange:]
  -[VGVehicleStateStorage setHasCurrentEVRange:]
  -[VGVehicleStateStorage hasCurrentEVRange]
  -[VGVehicleStateStorage setMaxEVRange:]
  -[VGVehicleStateStorage setHasMaxEVRange:]
  -[VGVehicleStateStorage hasMaxEVRange]
  -[VGVehicleStateStorage setMinBatteryCapacity:]
  -[VGVehicleStateStorage setHasMinBatteryCapacity:]
  -[VGVehicleStateStorage hasMinBatteryCapacity]
  -[VGVehicleStateStorage setHasCurrentBatteryCapacity:]
  -[VGVehicleStateStorage setMaxBatteryCapacity:]
  -[VGVehicleStateStorage setHasMaxBatteryCapacity:]
  -[VGVehicleStateStorage hasMaxBatteryCapacity]
  -[VGVehicleStateStorage hasPairedAppInstallSessionIdentifier]
  -[VGVehicleStateStorage hasPairedAppInstallDeviceIdentifier]


VGDataCoordinator : NSObject <VGOEMApplicationFinderUpdates, VGExternalAccessoryUpdating, VGOEMAppSOCStreaming>
 @property  NSArray *unpairedVehicles
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VGDataCoordinator _saveOnboardingInfoForVehicle:]
  -[VGDataCoordinator _indexOfVehicleInUnpairedVehicles:]
  -[VGDataCoordinator shouldUnpairVehicle:]
  -[VGDataCoordinator _loadIapVehicles]
  -[VGDataCoordinator OEMAppsUpdated:]
  -[VGDataCoordinator startContinuousUpdatesForVehicle:]
  -[VGDataCoordinator .cxx_destruct]
  -[VGDataCoordinator finishOnboardingVehicle:]
  -[VGDataCoordinator vehicleStateUpdated:]
  -[VGDataCoordinator _updateStateOfChargeForVehicle:syncAcrossDevices:completion:]
  -[VGDataCoordinator unpairVehicle:]
  -[VGDataCoordinator _stopChargeStreamForVehicle:]
  -[VGDataCoordinator _refreshStateForTrackedVehicles]
  -[VGDataCoordinator initWithApplicationFinder:externalAccessory:delegate:]
  -[VGDataCoordinator _removeUnpairedIapVehicleIfNeeded]
  -[VGDataCoordinator _startChargeStreamForVehicle:]
  -[VGDataCoordinator unpairedVehicles]
  -[VGDataCoordinator _oemAppForChargeStreamForVehicle:]
  -[VGDataCoordinator _loadAllOEMVehiclesForApps:completion:]
  -[VGDataCoordinator _vehicleStateRefreshInterval]
  -[VGDataCoordinator _setupTimerIfNeeded]
  -[VGDataCoordinator deviceIdentifier]
  -[VGDataCoordinator _vehicleStateProviderForVehicle:]
  -[VGDataCoordinator accessoryUpdatedWithVehicle:]
  -[VGDataCoordinator _invalidateRefreshTimer]
  -[VGDataCoordinator _updateGarageWithVehicle:syncAcrossDevices:]
  -[VGDataCoordinator dealloc]
  -[VGDataCoordinator getLatestStateOfVehicle:withReply:]
  -[VGDataCoordinator endAllContinuousUpdates]
  -[VGDataCoordinator _applicationRecordForVehicle:]
  -[VGDataCoordinator _applicationForVehicle:]


VGExternalAccessoryState : NSObject
 @property  NSString *name
 @property  NSString *manufacturer
 @property  NSString *model
 @property  NSString *year
 @property  NSString *colorHex
 @property  NSMeasurement *currentEVRange
 @property  NSMeasurement *maxEVRange
 @property  NSString *consumptionArguments
 @property  NSString *chargingArguments
 @property  NSNumber *batteryCharge
 @property  NSMeasurement *minBatteryCapacity
 @property  NSMeasurement *currentBatteryCapacity
 @property  NSMeasurement *maxBatteryCapacity
 @property  NSNumber *supportedConnectors
 @property  BOOL isCharging
 @property  NSNumber *activeConnector
 @property  NSDictionary *powerByConnector

  // instance methods
  -[VGExternalAccessoryState setYear:]
  -[VGExternalAccessoryState year]
  -[VGExternalAccessoryState name]
  -[VGExternalAccessoryState .cxx_destruct]
  -[VGExternalAccessoryState manufacturer]
  -[VGExternalAccessoryState setName:]
  -[VGExternalAccessoryState setManufacturer:]
  -[VGExternalAccessoryState model]
  -[VGExternalAccessoryState colorHex]
  -[VGExternalAccessoryState setModel:]
  -[VGExternalAccessoryState isCharging]
  -[VGExternalAccessoryState setCurrentBatteryCapacity:]
  -[VGExternalAccessoryState currentBatteryCapacity]
  -[VGExternalAccessoryState activeConnector]
  -[VGExternalAccessoryState consumptionArguments]
  -[VGExternalAccessoryState chargingArguments]
  -[VGExternalAccessoryState setConsumptionArguments:]
  -[VGExternalAccessoryState setChargingArguments:]
  -[VGExternalAccessoryState setColorHex:]
  -[VGExternalAccessoryState powerByConnector]
  -[VGExternalAccessoryState supportedConnectors]
  -[VGExternalAccessoryState setSupportedConnectors:]
  -[VGExternalAccessoryState currentEVRange]
  -[VGExternalAccessoryState maxEVRange]
  -[VGExternalAccessoryState minBatteryCapacity]
  -[VGExternalAccessoryState maxBatteryCapacity]
  -[VGExternalAccessoryState setCurrentEVRange:]
  -[VGExternalAccessoryState setMaxEVRange:]
  -[VGExternalAccessoryState setMinBatteryCapacity:]
  -[VGExternalAccessoryState setMaxBatteryCapacity:]
  -[VGExternalAccessoryState _updateWithVehicleInfo:]
  -[VGExternalAccessoryState batteryCharge]
  -[VGExternalAccessoryState setBatteryCharge:]


VGExternalAccessory : NSObject <VGExternalAccessory>
 @property  <VGExternalAccessoryUpdating> *accessoryUpdateDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VGExternalAccessory _accessoryDidUpdateVehicle:]
  -[VGExternalAccessory .cxx_destruct]
  -[VGExternalAccessory _checkAvailableAccessoriesAndAttachIfNeeded]
  -[VGExternalAccessory accessoryUpdateDelegate]
  -[VGExternalAccessory _accessoryDidConnect:]
  -[VGExternalAccessory init]
  -[VGExternalAccessory _addNewCarPlayAccessory:]
  -[VGExternalAccessory _isAccessoryTracked:]
  -[VGExternalAccessory _isConnectedToElectricVehicle]
  -[VGExternalAccessory _firmwareId]
  -[VGExternalAccessory _currentStatePassesEVRoutingRequirements]
  -[VGExternalAccessory _identifier]
  -[VGExternalAccessory _isConnectedToCarPlayAccessory]
  -[VGExternalAccessory _vehicleForCurrentState]
  -[VGExternalAccessory _accessoryDidDisconnect:]
  -[VGExternalAccessory _updateFromVehicleInfo:]
  -[VGExternalAccessory _modelIdFromArguments:]
  -[VGExternalAccessory listCarsWithCompletion:]
  -[VGExternalAccessory isConnectedToAccessoryWithIdentifier:]
  -[VGExternalAccessory setAccessoryUpdateDelegate:]
  -[VGExternalAccessory isConnectedToVehicle:]
  -[VGExternalAccessory getStateOfChargeForVehicle:completion:]
  -[VGExternalAccessory dealloc]
  -[VGExternalAccessory _notifyDelegateWithCurrentVehicle]
  -[VGExternalAccessory _removeCarPlayAccessory:]
  -[VGExternalAccessory _vehicleStateForCurrentState]
  -[VGExternalAccessory _isConnectedVehicleAllowlisted]
  -[VGExternalAccessory _bluetoothIdentifier]


VGVehicleState : NSObject <NSCopying, NSSecureCoding>
 @property  NSNumber *batteryPercentage
 @property  NSString *identifier
 @property  NSDate *dateOfUpdate
 @property  long long origin
 @property  NSMeasurement *currentEVRange
 @property  NSMeasurement *maxEVRange
 @property  NSMeasurement *minBatteryCapacity
 @property  NSMeasurement *currentBatteryCapacity
 @property  NSMeasurement *maxBatteryCapacity
 @property  NSString *consumptionArguments
 @property  NSString *chargingArguments
 @property  BOOL isCharging
 @property  unsigned long activeConnector

  // class methods
  +[VGVehicleState supportsSecureCoding]
  +[VGVehicleState _vehicleStateFromStorage:]

  // instance methods
  -[VGVehicleState initWithCoder:]
  -[VGVehicleState _storage]
  -[VGVehicleState origin]
  -[VGVehicleState .cxx_destruct]
  -[VGVehicleState isEqual:]
  -[VGVehicleState identifier]
  -[VGVehicleState batteryPercentage]
  -[VGVehicleState isCharging]
  -[VGVehicleState copyWithZone:]
  -[VGVehicleState currentBatteryCapacity]
  -[VGVehicleState activeConnector]
  -[VGVehicleState encodeWithCoder:]
  -[VGVehicleState consumptionArguments]
  -[VGVehicleState chargingArguments]
  -[VGVehicleState currentEVRange]
  -[VGVehicleState maxEVRange]
  -[VGVehicleState minBatteryCapacity]
  -[VGVehicleState maxBatteryCapacity]
  -[VGVehicleState dateOfUpdate]
  -[VGVehicleState initWithIdentifier:dateOfUpdate:origin:batteryPercentage:currentEVRange:maxEVRange:minBatteryCapacity:currentBatteryCapacity:maxBatteryCapacity:consumptionArguments:chargingArguments:isCharging:activeConnector:]
  -[VGVehicleState isSignificantlyDifferentFromVehicleState:]


VGDenylistEntry : NSObject
  // instance methods
  -[VGDenylistEntry .cxx_destruct]
  -[VGDenylistEntry isEqual:]
  -[VGDenylistEntry initWithModelId:firmwareIds:years:models:]
  -[VGDenylistEntry isSupersetOfEntry:]


VGExternalAccessoryModelFilter : NSObject
  // instance methods
  -[VGExternalAccessoryModelFilter .cxx_destruct]
  -[VGExternalAccessoryModelFilter init]
  -[VGExternalAccessoryModelFilter allowsVehicleWithModelId:firmwareId:year:model:]
  -[VGExternalAccessoryModelFilter _initializeAllowAndDenylists]


VGVirtualGarage : NSObject <NSCopying, VGDataCoordinatorDelegate, VGVirtualGaragePersistingDelegate, GEOConfigChangeListenerDelegate, VGVirtualGarageActions, NSSecureCoding>
 @property  <VGVirtualGarageDelegate> *delegate
 @property  NSArray *vehicles
 @property  VGVehicle *selectedVehicle
 @property  BOOL shouldAssumeFullCharge
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VGVirtualGarage supportsSecureCoding]

  // instance methods
  -[VGVirtualGarage valueChangedForGEOConfigKey:]
  -[VGVirtualGarage dataCoordinator:didUpdateUnpairedVehicles:]
  -[VGVirtualGarage initWithCoder:]
  -[VGVirtualGarage virtualGarageStartContinuousUpdatesIfNeeded]
  -[VGVirtualGarage garagePersister:wantsToUpdateVehicles:]
  -[VGVirtualGarage initWithGaragePersister:]
  -[VGVirtualGarage virtualGarageOnboardVehicle:]
  -[VGVirtualGarage shouldAssumeFullCharge]
  -[VGVirtualGarage .cxx_destruct]
  -[VGVirtualGarage setShouldAssumeFullCharge:]
  -[VGVirtualGarage _setupDataCoordinatorIfNeeded]
  -[VGVirtualGarage _onboardVehicle:]
  -[VGVirtualGarage setDelegate:]
  -[VGVirtualGarage _garageCopy]
  -[VGVirtualGarage _persisterHasStaleStateForVehicle:]
  -[VGVirtualGarage _vehicleWithIdentifier:]
  -[VGVirtualGarage virtualGarageGetLatestStateOfVehicleWithIdentifier:syncAcrossDevices:withReply:]
  -[VGVirtualGarage selectedVehicle]
  -[VGVirtualGarage _unpairVehicle:]
  -[VGVirtualGarage virtualGarageSaveVehicle:]
  -[VGVirtualGarage virtualGarageSelectVehicle:]
  -[VGVirtualGarage _selectVehicleWithIdentifier:]
  -[VGVirtualGarage _setDataCoordintorRunning:]
  -[VGVirtualGarage _endContinuousUpdates]
  -[VGVirtualGarage virtualGarageRemoveVehicle:]
  -[VGVirtualGarage _notifyObserversGarageDidUpdateVehicles]
  -[VGVirtualGarage vehicles]
  -[VGVirtualGarage _addVehicle:]
  -[VGVirtualGarage virtualGarageGetGarageWithReply:]
  -[VGVirtualGarage delegate]
  -[VGVirtualGarage virtualGarageSetAssumesFullCharge:]
  -[VGVirtualGarage virtualGarageAddVehicle:]
  -[VGVirtualGarage _removeVehicleWithIdentifier:]
  -[VGVirtualGarage dealloc]
  -[VGVirtualGarage _saveVehicle:syncAcrossDevices:]
  -[VGVirtualGarage copyWithZone:]
  -[VGVirtualGarage virtualGarageEndContinuousUpdates]
  -[VGVirtualGarage dataCoordinatorDidUpdateInstalledApps:]
  -[VGVirtualGarage dataCoordinator:wantsToUpdateVehicle:syncAcrossDevices:]
  -[VGVirtualGarage _removeVehiclesWithUninstalledAppsIfNeeded]
  -[VGVirtualGarage _startContinuousUpdatesIfNeeded]
  -[VGVirtualGarage _executeQueuedCompletionHandlersIfNeeded]
  -[VGVirtualGarage virtualGarageGetListOfUnpairedVehiclesWithReply:]
  -[VGVirtualGarage _forceUpdateWithVehicles:]
  -[VGVirtualGarage encodeWithCoder:]


VGOEMApplicationFinder : NSObject <LSApplicationWorkspaceObserverProtocol, GEOConfigChangeListenerDelegate, VGOEMApplicationFinding>
 @property  NSSet *disabledAppIdentifiers
 @property  NSDictionary *allowlist
 @property  NSMutableDictionary *applications
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <VGOEMApplicationFinderUpdates> *delegate

  // instance methods
  -[VGOEMApplicationFinder applicationsDidUninstall:]
  -[VGOEMApplicationFinder applicationsDidInstall:]
  -[VGOEMApplicationFinder valueChangedForGEOConfigKey:]
  -[VGOEMApplicationFinder setDisabledAppIdentifiers:]
  -[VGOEMApplicationFinder .cxx_destruct]
  -[VGOEMApplicationFinder setDelegate:]
  -[VGOEMApplicationFinder _addOEMApplicationForApplicationRecordIfNeeded:]
  -[VGOEMApplicationFinder init]
  -[VGOEMApplicationFinder _applicationRecordForBundleIdentifier:]
  -[VGOEMApplicationFinder findOEMApplications]
  -[VGOEMApplicationFinder _allowlistPayload]
  -[VGOEMApplicationFinder setAllowlist:]
  -[VGOEMApplicationFinder disabledAppIdentifiers]
  -[VGOEMApplicationFinder _removeOEMApplicationForBundleIdentifier:]
  -[VGOEMApplicationFinder delegate]
  -[VGOEMApplicationFinder allowlist]
  -[VGOEMApplicationFinder dealloc]
  -[VGOEMApplicationFinder applications]
  -[VGOEMApplicationFinder setApplications:]


VGOEMApplication : NSObject <INIntentResponseObserver, VGOEMApplication>
 @property  NSArray *allowedFormulaIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *identifier
 @property  LSApplicationRecord *applicationRecord
 @property  BOOL enabled
 @property  <VGOEMAppSOCStreaming> *chargeStreamingDelegate

  // instance methods
  -[VGOEMApplication .cxx_destruct]
  -[VGOEMApplication intentResponseDidUpdate:withSerializedCacheItems:]
  -[VGOEMApplication isEqual:]
  -[VGOEMApplication identifier]
  -[VGOEMApplication isEnabled]
  -[VGOEMApplication listCarsWithCompletion:]
  -[VGOEMApplication getStateOfChargeForVehicle:completion:]
  -[VGOEMApplication setEnabled:]
  -[VGOEMApplication applicationRecord]
  -[VGOEMApplication setChargeStreamingDelegate:]
  -[VGOEMApplication startSendingChargeUpdatesForVehicle:]
  -[VGOEMApplication stopSendingChargeUpdatesForVehicle:]
  -[VGOEMApplication initWithIdentifier:applicationRecord:]
  -[VGOEMApplication setAllowedFormulaIDs:]
  -[VGOEMApplication allowedFormulaIDs]
  -[VGOEMApplication _VGChargingConnectorTypeOptionFromINCarChargingConnectorType:]
  -[VGOEMApplication _VGChargingConnectorTypeOptionsFromINCarChargingConnectorTypes:]
  -[VGOEMApplication _powerByConnectorDictionaryFromCar:]
  -[VGOEMApplication _connectionWithIntent:]
  -[VGOEMApplication _vehiclesFromListCarsIntentResponse:]
  -[VGOEMApplication _isValidConsumptionModelForResponse:]
  -[VGOEMApplication _vehicleStateFromResponse:error:]
  -[VGOEMApplication _createChargeStreamingConnectionIfNeededForVehicle:]
  -[VGOEMApplication chargeStreamingDelegate]


VGVirtualGarageServer : NSObject <NSXPCListenerDelegate, VGVirtualGarageDelegate, GEOConfigChangeListenerDelegate, VGVirtualGarageActions>
 @property  BOOL hostsVirtualGarage
 @property  VGVirtualGarage *garage
 @property  NSXPCListener *listener
 @property  NSMutableArray *activeConnections
 @property  <VGVirtualGarageObserver> *observer
 @property  NSObject<OS_dispatch_queue> *observerQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VGVirtualGarageServer canUseVirtualGarageXPCService]
  +[VGVirtualGarageServer sharedServer]

  // instance methods
  -[VGVirtualGarageServer valueChangedForGEOConfigKey:]
  -[VGVirtualGarageServer virtualGarageStartContinuousUpdatesIfNeeded]
  -[VGVirtualGarageServer virtualGarageOnboardVehicle:]
  -[VGVirtualGarageServer setActiveConnections:]
  -[VGVirtualGarageServer .cxx_destruct]
  -[VGVirtualGarageServer setListener:]
  -[VGVirtualGarageServer hostsVirtualGarage]
  -[VGVirtualGarageServer stop]
  -[VGVirtualGarageServer init]
  -[VGVirtualGarageServer setHostsVirtualGarage:]
  -[VGVirtualGarageServer listener]
  -[VGVirtualGarageServer virtualGarageGetLatestStateOfVehicleWithIdentifier:syncAcrossDevices:withReply:]
  -[VGVirtualGarageServer garage]
  -[VGVirtualGarageServer setObserverQueue:]
  -[VGVirtualGarageServer startWithPersister:]
  -[VGVirtualGarageServer virtualGarageSaveVehicle:]
  -[VGVirtualGarageServer virtualGarage:didUpdateUnpairedVehicles:]
  -[VGVirtualGarageServer virtualGarageSelectVehicle:]
  -[VGVirtualGarageServer virtualGarageRemoveVehicle:]
  -[VGVirtualGarageServer _setupVirtualGarageHostingIfNeeded]
  -[VGVirtualGarageServer observer]
  -[VGVirtualGarageServer activeConnections]
  -[VGVirtualGarageServer virtualGarageGetGarageWithReply:]
  -[VGVirtualGarageServer observerQueue]
  -[VGVirtualGarageServer virtualGarageSetAssumesFullCharge:]
  -[VGVirtualGarageServer virtualGarageAddVehicle:]
  -[VGVirtualGarageServer setObserver:]
  -[VGVirtualGarageServer dealloc]
  -[VGVirtualGarageServer listener:shouldAcceptNewConnection:]
  -[VGVirtualGarageServer virtualGarageEndContinuousUpdates]
  -[VGVirtualGarageServer setGarage:]
  -[VGVirtualGarageServer _cleanUp]
  -[VGVirtualGarageServer virtualGarageDidUpdate:]
  -[VGVirtualGarageServer virtualGarageGetListOfUnpairedVehiclesWithReply:]


VGVirtualGarageService : NSObject <VGVirtualGarageObserver, VGVirtualGarageActions>
 @property  NSXPCConnection *connection
 @property  NSString *activeVehicleIdentifier

  // class methods
  +[VGVirtualGarageService canUseVirtualGarageXPCService]
  +[VGVirtualGarageService sharedService]

  // instance methods
  -[VGVirtualGarageService unregisterObserver:]
  -[VGVirtualGarageService openForClient:]
  -[VGVirtualGarageService registerObserver:]
  -[VGVirtualGarageService virtualGarageStartContinuousUpdatesIfNeeded]
  -[VGVirtualGarageService _closeConnection]
  -[VGVirtualGarageService virtualGarageOnboardVehicle:]
  -[VGVirtualGarageService .cxx_destruct]
  -[VGVirtualGarageService setConnection:]
  -[VGVirtualGarageService _openConnection]
  -[VGVirtualGarageService init]
  -[VGVirtualGarageService virtualGarageGetLatestStateOfVehicleWithIdentifier:syncAcrossDevices:withReply:]
  -[VGVirtualGarageService connection]
  -[VGVirtualGarageService virtualGarageSaveVehicle:]
  -[VGVirtualGarageService virtualGarage:didUpdateUnpairedVehicles:]
  -[VGVirtualGarageService virtualGarageSelectVehicle:]
  -[VGVirtualGarageService virtualGarageRemoveVehicle:]
  -[VGVirtualGarageService virtualGarageGetGarageWithReply:]
  -[VGVirtualGarageService virtualGarageSetAssumesFullCharge:]
  -[VGVirtualGarageService virtualGarageAddVehicle:]
  -[VGVirtualGarageService virtualGarageEndContinuousUpdates]
  -[VGVirtualGarageService closeForClient:]
  -[VGVirtualGarageService virtualGarageDidUpdate:]
  -[VGVirtualGarageService virtualGarageGetListOfUnpairedVehiclesWithReply:]
  -[VGVirtualGarageService setActiveVehicleIdentifier:]
  -[VGVirtualGarageService activeVehicleIdentifier]
  -[VGVirtualGarageService messageTargetWithErrorReply:]
  -[VGVirtualGarageService _clearActiveVehicleIdentifierIfNeeded:]


NSMeasurement(VGExtras)
	// instance methods
	-[NSMeasurement(VGExtras) compare:]
	-[NSMeasurement(VGExtras) isGreaterThanOrEqualToMeasurement:]
	-[NSMeasurement(VGExtras) isLessThanMeasurement:]
	-[NSMeasurement(VGExtras) isGreaterThanMeasurement:]
	-[NSMeasurement(VGExtras) isEqualToMeasurement:]
	-[NSMeasurement(VGExtras) isLessThanOrEqualToMeasurement:]

EAAccessory(CarPlaySupport)
	// instance methods
	-[EAAccessory(CarPlaySupport) _vg_supportsCarPlay]

01 00 0700 /System/Library/Frameworks/ExternalAccessory.framework/ExternalAccessory: EAAccessory 
01 00 0700 /System/Library/Frameworks/ExternalAccessory.framework/ExternalAccessory: EAAccessoryManager 
01 00 0100 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOObserverHashTable 
01 00 0100 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOResourceManager 
01 00 0500 /System/Library/Frameworks/Intents.framework/Intents: INAppInfo 
01 00 0300 /System/Library/PrivateFrameworks/IntentsCore.framework/IntentsCore: INCExtensionConnection 
01 00 0500 /System/Library/Frameworks/Intents.framework/Intents: INGetCarPowerLevelStatusIntent 
01 00 0500 /System/Library/Frameworks/Intents.framework/Intents: INGetCarPowerLevelStatusIntentResponse 
01 00 0500 /System/Library/Frameworks/Intents.framework/Intents: INListCarsIntent 
01 00 0500 /System/Library/Frameworks/Intents.framework/Intents: INSpeakableString 
01 00 0600 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 0600 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMeasurement 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0900 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnitEnergy 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnitLength 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnitPower 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0400 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
