|| __DATA.__data _OBJC_METACLASS_$_MFDebugOverlayController
|| __DATA.__objc_data _OBJC_CLASS_$_MFAudioSessionConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MFDebugOverlayController
|| __DATA.__objc_data _OBJC_CLASS_$_MFDescription
|| __DATA.__objc_data _OBJC_CLASS_$_MFPlaybackStackControllerImplementation
|| __DATA_DIRTY.__data _OBJC_METACLASS_$_MFAudioSessionConfiguration
|| __DATA_DIRTY.__data _OBJC_METACLASS_$_MFDescription
|| __DATA_DIRTY.__data _OBJC_METACLASS_$_MFPlaybackStackControllerImplementation
__ AVFAudio: _AVAudioSessionInterruptionNotification
__ AVFAudio: _AVAudioSessionInterruptionOptionKey
__ AVFAudio: _AVAudioSessionInterruptionReasonKey
__ AVFAudio: _AVAudioSessionInterruptionTypeKey
__ AVFAudio: _AVAudioSessionInterruptorNameKey
__ AVFAudio: _AVAudioSessionMediaServicesWereLostNotification
__ AVFAudio: _AVAudioSessionMediaServicesWereResetNotification
__ AVFAudio: _AVAudioSessionModeDefault
__ AVFAudio: _AVAudioSessionModeMoviePlayback
__ AVFAudio: _AVAudioSessionPortAirPlay
__ AVFAudio: _AVAudioSessionPortBuiltInSpeaker
__ AVFAudio: _AVAudioSessionRouteChangeNotification
__ AVFAudio: _AVAudioSessionRouteChangePreviousRouteKey
__ AVFAudio: _AVAudioSessionRouteChangeReasonKey
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFAudio: _OBJC_CLASS_$_AVAudioSessionPortDescription
__ AVFAudio: _OBJC_CLASS_$_AVAudioSessionRouteDescription
__ AVFoundation: _AVCoordinatedPlaybackSuspensionReasonAudioSessionInterrupted
__ AVFoundation: _AVCoordinatedPlaybackSuspensionReasonUserActionRequired
__ AVFoundation: _AVFoundationErrorDomain
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeErrorKey
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemTimeJumpedNotification
__ AVFoundation: _AVPlayerItemTimeJumpedOriginatingParticipantKey
__ AVFoundation: _AVPlayerRateDidChangeNotification
__ AVFoundation: _AVPlayerRateDidChangeOriginatingParticipantKey
__ AVFoundation: _AVPlayerRateDidChangeReasonAudioSessionInterrupted
__ AVFoundation: _AVPlayerRateDidChangeReasonCoordinatedPlayback
__ AVFoundation: _AVPlayerRateDidChangeReasonKey
__ AVFoundation: _AVPlayerRateDidChangeReasonRouteChanged
__ AVFoundation: _AVPlayerRateDidChangeReasonSetRateCalled
__ AVFoundation: _AVPlayerWaitingDuringInterstitialEventReason
__ AVFoundation: _AVPlayerWaitingForCoordinatedPlaybackReason
__ AVFoundation: _AVPlayerWaitingToMinimizeStallsReason
__ AVFoundation: _AVPlayerWaitingWhileEvaluatingBufferingRateReason
__ AVFoundation: _AVPlayerWaitingWithNoItemToPlayReason
__ AVFoundation: _OBJC_CLASS_$_AVCoordinatedPlaybackParticipant
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItemTrack
__ AVFoundation: _OBJC_CLASS_$_AVPlayerPlaybackCoordinator
__ AVFoundation: _OBJC_CLASS_$_AVQueuePlayer
__ AVFoundation: _OBJC_CLASS_$_AVTimeFormatter
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ AVKit: _OBJC_CLASS_$_AVMusicAppBehavior
__ AVKit: _OBJC_CLASS_$_AVPlayerViewController
__ AVKit: _OBJC_METACLASS_$_AVMusicAppBehavior
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreMedia: _kCMTimeNegativeInfinity
__ CoreMedia: _kCMTimePositiveInfinity
__ CoreMedia: _kCMTimeZero
__ CoreMedia: _kCMTimebaseNotification_EffectiveRateChanged
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSValue
__ MediaRemote: _MRMediaRemoteCopyCommandHandlerStatusDescription
__ MediaRemote: _MRMediaRemoteCopyPlaybackQueueInsertionPositionDescription
__ MediaRemote: _MRMediaRemoteCopyPlaybackStateDescription
__ MediaRemote: _OBJC_CLASS_$_MRCommandInfo
__ MediaRemote: _OBJC_CLASS_$_MRContentItem
__ MediaRemote: _OBJC_CLASS_$_MRContentItemMetadata
__ MediaRemote: _OBJC_CLASS_$_MRContentItemMetadataAudioFormat
__ MediaRemote: _OBJC_CLASS_$_MRDestination
__ MediaRemote: _OBJC_CLASS_$_MRNowPlayingController
__ MediaRemote: _OBJC_CLASS_$_MRNowPlayingControllerConfiguration
__ MediaRemote: _OBJC_CLASS_$_MRPlaybackQueueRequest
__ MediaRemote: _OBJC_CLASS_$_MRPlayerPath
__ MediaRemote: _OBJC_CLASS_$_MRSendCommandResultStatus
__ MediaRemote: _kMRMediaRemoteCommandInfoCanBeControlledByScrubbingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoCurrentPlaybackSessionTypes
__ MediaRemote: _kMRMediaRemoteCommandInfoCurrentQueueEndAction
__ MediaRemote: _kMRMediaRemoteCommandInfoDisabledReason
__ MediaRemote: _kMRMediaRemoteCommandInfoIsActiveKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPlaybackSessionRevision
__ MediaRemote: _kMRMediaRemoteCommandInfoPreferredIntervalsKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesQueueEndActionKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesRepeatModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesShuffleModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteCommandInfoShuffleMode
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedCustomPlaybackQueueIdentifiers
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedInsertionPositions
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackRates
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackSessionIdentifiers
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedQueueEndActions
__ MediaRemote: _kMRMediaRemoteOptionChangeLanguageOptionSetting
__ MediaRemote: _kMRMediaRemoteOptionCommandID
__ MediaRemote: _kMRMediaRemoteOptionContentItemID
__ MediaRemote: _kMRMediaRemoteOptionEventNoticeIdentifier
__ MediaRemote: _kMRMediaRemoteOptionEventNoticeType
__ MediaRemote: _kMRMediaRemoteOptionInsertAfterContentItemID
__ MediaRemote: _kMRMediaRemoteOptionInsertBeforeContentItemID
__ MediaRemote: _kMRMediaRemoteOptionIsNegative
__ MediaRemote: _kMRMediaRemoteOptionLanguageOptionData
__ MediaRemote: _kMRMediaRemoteOptionPlaybackPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackQueueInsertionPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackRate
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionData
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionFilePath
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionIdentifier
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionMetadata
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionPriority
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionRevision
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionType
__ MediaRemote: _kMRMediaRemoteOptionPrivateListeningEnabled
__ MediaRemote: _kMRMediaRemoteOptionQueueEndAction
__ MediaRemote: _kMRMediaRemoteOptionRating
__ MediaRemote: _kMRMediaRemoteOptionRemoteControlInterfaceIdentifier
__ MediaRemote: _kMRMediaRemoteOptionRepeatMode
__ MediaRemote: _kMRMediaRemoteOptionRequestDefermentToPlaybackQueuePosition
__ MediaRemote: _kMRMediaRemoteOptionSharedPlaybackSessionIdentifier
__ MediaRemote: _kMRMediaRemoteOptionShouldBeginRadioPlayback
__ MediaRemote: _kMRMediaRemoteOptionShuffleMode
__ MediaRemote: _kMRMediaRemoteOptionSkipInterval
__ MediaRemote: _kMRMediaRemoteOptionStationURL
__ MediaRemote: _kMRMediaRemoteOptionSystemAppPlaybackQueueData
__ MediaRemote: _kMRSystemAppPlaybackQueueReplaceIntentKey
__ MediaRemote: _kMRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueueKey
__ MediaServices: _MSVAutoBugCaptureDomainMediaFoundation
__ MediaServices: _MSVDeviceIsAudioAccessory
__ MediaServices: _OBJC_CLASS_$_MSVAutoBugCapture
__ MediaServices: _OBJC_CLASS_$_MSVTimer
__ MediaToolbox: _FigOutputMonitorIsScreenProbablyBeingRecorded
__ MediaToolbox: _kFigOutputMonitorNotification_RecordingStateChanged
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIBackgroundTaskInvalid
__ libSystem.B.dylib: _OBJC_CLASS_$_OS_dispatch_queue
__ libSystem.B.dylib: _OBJC_CLASS_$_OS_dispatch_source
__ libSystem.B.dylib: _OBJC_CLASS_$_OS_os_log
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _malloc_size
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_allocWithZone
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_storeStrong
__ libswiftAVFoundation.dylib: __swift_FORCE_LOAD_$_swiftAVFoundation
__ libswiftCore.dylib: _OBJC_CLASS_$__TtCs12_SwiftObject
__ libswiftCore.dylib: _OBJC_METACLASS_$__TtCs12_SwiftObject
__ libswiftCore.dylib: __swiftEmptyArrayStorage
__ libswiftCore.dylib: __swiftEmptyDictionarySingleton
__ libswiftCore.dylib: __swiftEmptySetSingleton
__ libswiftCore.dylib: __swift_stdlib_reportUnimplementedInitializer
__ libswiftCore.dylib: _swift_allocBox
__ libswiftCore.dylib: _swift_allocError
__ libswiftCore.dylib: _swift_allocObject
__ libswiftCore.dylib: _swift_allocateGenericClassMetadata
__ libswiftCore.dylib: _swift_allocateGenericValueMetadata
__ libswiftCore.dylib: _swift_arrayAssignWithTake
__ libswiftCore.dylib: _swift_arrayDestroy
__ libswiftCore.dylib: _swift_arrayInitWithCopy
__ libswiftCore.dylib: _swift_beginAccess
__ libswiftCore.dylib: _swift_bridgeObjectRelease
__ libswiftCore.dylib: _swift_bridgeObjectRelease_n
__ libswiftCore.dylib: _swift_bridgeObjectRetain
__ libswiftCore.dylib: _swift_bridgeObjectRetain_n
__ libswiftCore.dylib: _swift_checkMetadataState
__ libswiftCore.dylib: _swift_deallocClassInstance
__ libswiftCore.dylib: _swift_deallocObject
__ libswiftCore.dylib: _swift_deletedMethodError
__ libswiftCore.dylib: _swift_dynamicCast
__ libswiftCore.dylib: _swift_dynamicCastClass
__ libswiftCore.dylib: _swift_dynamicCastClassUnconditional
__ libswiftCore.dylib: _swift_dynamicCastObjCClass
__ libswiftCore.dylib: _swift_dynamicCastObjCClassUnconditional
__ libswiftCore.dylib: _swift_dynamicCastObjCProtocolConditional
__ libswiftCore.dylib: _swift_endAccess
__ libswiftCore.dylib: _swift_errorRelease
__ libswiftCore.dylib: _swift_errorRetain
__ libswiftCore.dylib: _swift_getAssociatedConformanceWitness
__ libswiftCore.dylib: _swift_getAssociatedTypeWitness
__ libswiftCore.dylib: _swift_getAtKeyPath
__ libswiftCore.dylib: _swift_getEnumCaseMultiPayload
__ libswiftCore.dylib: _swift_getEnumTagSinglePayloadGeneric
__ libswiftCore.dylib: _swift_getErrorValue
__ libswiftCore.dylib: _swift_getForeignTypeMetadata
__ libswiftCore.dylib: _swift_getGenericMetadata
__ libswiftCore.dylib: _swift_getKeyPath
__ libswiftCore.dylib: _swift_getObjCClassFromMetadata
__ libswiftCore.dylib: _swift_getObjCClassMetadata
__ libswiftCore.dylib: _swift_getObjectType
__ libswiftCore.dylib: _swift_getOpaqueTypeConformance
__ libswiftCore.dylib: _swift_getSingletonMetadata
__ libswiftCore.dylib: _swift_getTypeByMangledNameInContext
__ libswiftCore.dylib: _swift_getTypeByMangledNameInContextInMetadataState
__ libswiftCore.dylib: _swift_getWitnessTable
__ libswiftCore.dylib: _swift_initClassMetadata2
__ libswiftCore.dylib: _swift_initStackObject
__ libswiftCore.dylib: _swift_initStaticObject
__ libswiftCore.dylib: _swift_initStructMetadata
__ libswiftCore.dylib: _swift_isUniquelyReferenced_nonNull_bridgeObject
__ libswiftCore.dylib: _swift_isUniquelyReferenced_nonNull_native
__ libswiftCore.dylib: _swift_isaMask
__ libswiftCore.dylib: _swift_lookUpClassMethod
__ libswiftCore.dylib: _swift_makeBoxUnique
__ libswiftCore.dylib: _swift_once
__ libswiftCore.dylib: _swift_release
__ libswiftCore.dylib: _swift_release_n
__ libswiftCore.dylib: _swift_retain
__ libswiftCore.dylib: _swift_retain_n
__ libswiftCore.dylib: _swift_setAtReferenceWritableKeyPath
__ libswiftCore.dylib: _swift_storeEnumTagMultiPayload
__ libswiftCore.dylib: _swift_storeEnumTagSinglePayloadGeneric
__ libswiftCore.dylib: _swift_unknownObjectRelease
__ libswiftCore.dylib: _swift_unknownObjectRelease_n
__ libswiftCore.dylib: _swift_unknownObjectRetain
__ libswiftCore.dylib: _swift_unknownObjectRetain_n
__ libswiftCore.dylib: _swift_unknownObjectWeakAssign
__ libswiftCore.dylib: _swift_unknownObjectWeakDestroy
__ libswiftCore.dylib: _swift_unknownObjectWeakInit
__ libswiftCore.dylib: _swift_unknownObjectWeakLoadStrong
__ libswiftCore.dylib: _swift_updateClassMetadata2
__ libswiftCore.dylib: _swift_weakAssign
__ libswiftCore.dylib: _swift_weakDestroy
__ libswiftCore.dylib: _swift_weakInit
__ libswiftCore.dylib: _swift_weakLoadStrong
__ libswiftCore.dylib: _swift_willThrow
__ libswiftCoreAudio.dylib: __swift_FORCE_LOAD_$_swiftCoreAudio
__ libswiftCoreData.dylib: __swift_FORCE_LOAD_$_swiftCoreData
__ libswiftCoreFoundation.dylib: __swift_FORCE_LOAD_$_swiftCoreFoundation
__ libswiftCoreGraphics.dylib: __swift_FORCE_LOAD_$_swiftCoreGraphics
__ libswiftCoreImage.dylib: __swift_FORCE_LOAD_$_swiftCoreImage
__ libswiftCoreMIDI.dylib: __swift_FORCE_LOAD_$_swiftCoreMIDI
__ libswiftCoreMedia.dylib: __swift_FORCE_LOAD_$_swiftCoreMedia
__ libswiftDarwin.dylib: __swift_FORCE_LOAD_$_swiftDarwin
__ libswiftDataDetection.dylib: __swift_FORCE_LOAD_$_swiftDataDetection
__ libswiftDispatch.dylib: __swift_FORCE_LOAD_$_swiftDispatch
__ libswiftFileProvider.dylib: __swift_FORCE_LOAD_$_swiftFileProvider
__ libswiftFoundation.dylib: __swift_FORCE_LOAD_$_swiftFoundation
__ libswiftMetal.dylib: __swift_FORCE_LOAD_$_swiftMetal
__ libswiftOSLog.dylib: __swift_FORCE_LOAD_$_swiftOSLog
__ libswiftObjectiveC.dylib: __swift_FORCE_LOAD_$_swiftObjectiveC
__ libswiftQuartzCore.dylib: __swift_FORCE_LOAD_$_swiftQuartzCore
__ libswiftUIKit.dylib: __swift_FORCE_LOAD_$_swiftUIKit
__ libswiftUniformTypeIdentifiers.dylib: __swift_FORCE_LOAD_$_swiftUniformTypeIdentifiers
__ libswift_Concurrency.dylib: _swift_continuation_await
__ libswift_Concurrency.dylib: _swift_continuation_init
__ libswift_Concurrency.dylib: _swift_continuation_resume
__ libswift_Concurrency.dylib: _swift_task_alloc
__ libswift_Concurrency.dylib: _swift_task_create
__ libswift_Concurrency.dylib: _swift_task_dealloc
__ libswift_Concurrency.dylib: _swift_task_getCurrentExecutor
__ libswift_Concurrency.dylib: _swift_task_switch
__ libswiftos.dylib: __swift_FORCE_LOAD_$_swiftos
__ libswiftsimd.dylib: __swift_FORCE_LOAD_$_swiftsimd
_TtC15MediaFoundation16QueueAssetLoader : Swift._SwiftObject <MFStateDumpable, MFStateDumpable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation16QueueAssetLoader stateDictionary]


_TtC15MediaFoundation28QueueAssetLoaderStateMachine : Swift._SwiftObject

_TtC15MediaFoundation40QueueAssetLoaderControllerImplementation : Swift._SwiftObject <MFErrorController, MFStateDumpable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation40QueueAssetLoaderControllerImplementation stateDictionary]
  -[_TtC15MediaFoundation40QueueAssetLoaderControllerImplementation reset]
  -[_TtC15MediaFoundation40QueueAssetLoaderControllerImplementation resolveError:forItem:completion:]
  -[_TtC15MediaFoundation40QueueAssetLoaderControllerImplementation reportCriticalError:forItem:]


_TtC15MediaFoundation10ItemLoader : Swift._SwiftObject <MFStateDumpable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation10ItemLoader stateDictionary]


_TtC15MediaFoundation18ItemBufferProducer : Swift._SwiftObject <MFStateDumpable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation18ItemBufferProducer stateDictionary]


_TtC15MediaFoundation16PlayerController : Swift._SwiftObject <MFStateDumpable, MFResettable, MFPlayerConfigurable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation16PlayerController stateDictionary]
  -[_TtC15MediaFoundation16PlayerController reset]
  -[_TtC15MediaFoundation16PlayerController setRelativeVolume:]
  -[_TtC15MediaFoundation16PlayerController setSpatializationFormat:]


_TtC15MediaFoundation21CoordinatorUserAction : Swift._SwiftObject <MFUserAction>
 @property  NSString *identifier
 @property  long long type
 @property  <MFTimeStamp> *timeStamp
 @property  NSDictionary *options
 @property  long long source
 @property  NSString *sourceID

  // instance methods
  -[_TtC15MediaFoundation21CoordinatorUserAction setSourceID:]
  -[_TtC15MediaFoundation21CoordinatorUserAction options]
  -[_TtC15MediaFoundation21CoordinatorUserAction setType:]
  -[_TtC15MediaFoundation21CoordinatorUserAction setOptions:]
  -[_TtC15MediaFoundation21CoordinatorUserAction timeStamp]
  -[_TtC15MediaFoundation21CoordinatorUserAction sourceID]
  -[_TtC15MediaFoundation21CoordinatorUserAction identifier]
  -[_TtC15MediaFoundation21CoordinatorUserAction setSource:]
  -[_TtC15MediaFoundation21CoordinatorUserAction setTimeStamp:]
  -[_TtC15MediaFoundation21CoordinatorUserAction type]
  -[_TtC15MediaFoundation21CoordinatorUserAction setIdentifier:]
  -[_TtC15MediaFoundation21CoordinatorUserAction source]


_TtC15MediaFoundation15VideoUserAction : Swift._SwiftObject <MFUserAction>
 @property  NSString *identifier
 @property  long long type
 @property  <MFTimeStamp> *timeStamp
 @property  NSDictionary *options
 @property  long long source
 @property  NSString *sourceID

  // instance methods
  -[_TtC15MediaFoundation15VideoUserAction setSourceID:]
  -[_TtC15MediaFoundation15VideoUserAction options]
  -[_TtC15MediaFoundation15VideoUserAction setType:]
  -[_TtC15MediaFoundation15VideoUserAction setOptions:]
  -[_TtC15MediaFoundation15VideoUserAction timeStamp]
  -[_TtC15MediaFoundation15VideoUserAction sourceID]
  -[_TtC15MediaFoundation15VideoUserAction identifier]
  -[_TtC15MediaFoundation15VideoUserAction setSource:]
  -[_TtC15MediaFoundation15VideoUserAction setTimeStamp:]
  -[_TtC15MediaFoundation15VideoUserAction type]
  -[_TtC15MediaFoundation15VideoUserAction setIdentifier:]
  -[_TtC15MediaFoundation15VideoUserAction source]


PlayerViewControllerBehavior : AVMusicAppBehavior
  // instance methods
  -[PlayerViewControllerBehavior .cxx_destruct]
  -[PlayerViewControllerBehavior skipToNextItem]
  -[PlayerViewControllerBehavior skipToPreviousItem]
  -[PlayerViewControllerBehavior init]
  -[PlayerViewControllerBehavior willMoveToContext:]
  -[PlayerViewControllerBehavior contextWillHandleUserAction:]


_TtC15MediaFoundation9PlayerFSM : Swift._SwiftObject <MFStateDumpable, MFResettable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation9PlayerFSM stateDictionary]
  -[_TtC15MediaFoundation9PlayerFSM reset]


_TtC15MediaFoundation15JumpToTimeState : MediaFoundation.State

_TtC15MediaFoundation14PlayerObserver : Swift._SwiftObject

_TtC15MediaFoundation11PausedState : MediaFoundation.TransportableState

_TtC15MediaFoundation12SeekingState : MediaFoundation.State

_TtC15MediaFoundation18ChangingQueueState : MediaFoundation.State

_TtC15MediaFoundation19ResettingQueueState : MediaFoundation.ChangingQueueState

_TtC15MediaFoundation24ChangingCurrentItemState : MediaFoundation.ChangingQueueState

_TtC15MediaFoundation13RouteMetadata : Swift._SwiftObject <MFRouteChangeMetadata>
 @property  BOOL isAirplay
 @property  NSString *routeDescription

  // instance methods
  -[_TtC15MediaFoundation13RouteMetadata routeDescription]
  -[_TtC15MediaFoundation13RouteMetadata isAirplay]


_TtC15MediaFoundation15EndOfQueueState : MediaFoundation.PausedState

_TtC15MediaFoundation15TransitionState : MediaFoundation.State

_TtC15MediaFoundation22NaturalTransitionState : MediaFoundation.TransitionState

_TtC15MediaFoundation21FailedTransitionState : MediaFoundation.TransitionState

_TtC15MediaFoundation35FailedInitialLoadingTransitionState : MediaFoundation.FailedTransitionState

_TtC15MediaFoundation23SkippingTransitionState : MediaFoundation.TransitionState

_TtC15MediaFoundation29WaitingForItemTransitionState : MediaFoundation.TransitionState

_TtC15MediaFoundation34AssetLoadingThrottlingStateMachine : Swift._SwiftObject <MFResettable>
  // instance methods
  -[_TtC15MediaFoundation34AssetLoadingThrottlingStateMachine reset]


_TtC15MediaFoundation31InternalPlaybackStackController : Swift._SwiftObject <MFStateDumpable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation31InternalPlaybackStackController stateDictionary]


_TtC15MediaFoundation14BackgroundTask : Swift._SwiftObject

_TtC15MediaFoundation24BackgroundTaskController : Swift._SwiftObject <MFResettable, MFStateDumpable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation24BackgroundTaskController stateDictionary]
  -[_TtC15MediaFoundation24BackgroundTaskController reset]


_TtC15MediaFoundation19InitialLoadingState : MediaFoundation.State

_TtC15MediaFoundation22InitialPreLoadingState : MediaFoundation.State

_TtC15MediaFoundation23InitiatingPlaybackState : MediaFoundation.State

_TtC15MediaFoundation12PlayingState : MediaFoundation.TransportableState

_TtC15MediaFoundation29MediaServicesInterruptedState : MediaFoundation.PausedState

_TtC15MediaFoundation26MediaServicesResumingState : MediaFoundation.PausedState

_TtC15MediaFoundation13StallingState : MediaFoundation.State

_TtC15MediaFoundation24InternalPlayerController : Swift._SwiftObject <MFStateDumpable, MFResettable, MFStateDumpable, MFResettable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation24InternalPlayerController stateDictionary]
  -[_TtC15MediaFoundation24InternalPlayerController reset]


_TtC15MediaFoundation17DebugOverlayStore : NSObject
  // instance methods
  -[_TtC15MediaFoundation17DebugOverlayStore .cxx_destruct]
  -[_TtC15MediaFoundation17DebugOverlayStore init]


_TtC15MediaFoundation13ScanningState : MediaFoundation.State

_TtC15MediaFoundation18TransportableState : MediaFoundation.State

_TtC15MediaFoundation16InterruptedState : MediaFoundation.PausedState

MFDebugOverlayController : NSObject
 @property  MRPlayerPath *playerPath
 @property  NSString *contentItemID
 @property  UIImage *image
 @property  UIViewController *viewController

  // instance methods
  -[MFDebugOverlayController playerPath]
  -[MFDebugOverlayController viewController]
  -[MFDebugOverlayController image]
  -[MFDebugOverlayController setPlayerPath:]
  -[MFDebugOverlayController .cxx_destruct]
  -[MFDebugOverlayController init]
  -[MFDebugOverlayController contentItemID]
  -[MFDebugOverlayController setContentItemID:]
  -[MFDebugOverlayController setImage:]


_TtC15MediaFoundation29ErrorControllerImplementation : Swift._SwiftObject <MFResettable, MFErrorController>
  // instance methods
  -[_TtC15MediaFoundation29ErrorControllerImplementation reset]
  -[_TtC15MediaFoundation29ErrorControllerImplementation resolveError:forItem:completion:]
  -[_TtC15MediaFoundation29ErrorControllerImplementation reportCriticalError:forItem:]


MFDescription : NSObject
  // class methods
  +[MFDescription forItemChangeSource:]
  +[MFDescription forPlayerState:]
  +[MFDescription forPlaybackTimeChangeReason:]
  +[MFDescription forTimeControlStatus:]
  +[MFDescription forErrorResolution:]
  +[MFDescription forBufferState:]
  +[MFDescription forItemRequestReason:]
  +[MFDescription forItemTransition:]
  +[MFDescription forUserActionType:]
  +[MFDescription forUserActionSource:]
  +[MFDescription forReloadingReason:]
  +[MFDescription forPlayerSpatializationFormat:]

  // instance methods
  -[MFDescription init]


MFAudioSessionConfiguration : NSObject
  // instance methods
  -[MFAudioSessionConfiguration .cxx_destruct]
  -[MFAudioSessionConfiguration init]
  -[MFAudioSessionConfiguration initWithCategory:routeSharingPolicy:options:]


MFPlaybackStackControllerImplementation : NSObject <MFPlaybackStackController, MFQueueManagement>
 @property  long long maximumPlayerQueueLength
 @property  <MFPlaybackStackControllerDelegate> *delegate
 @property  long long currentState
 @property  long long interruptedState
 @property  long long currentItemTransition
 @property  double currentTime
 @property  float rate
 @property  float effectiveRate
 @property  float targetRate
 @property  NSNumber *targetTime
 @property  <MFQueuePlayerItem> *currentItem
 @property  NSArray *nextItems
 @property  <MFQueuePlayerItem> *currentQueueItem
 @property  AVPlayerViewController *videoViewController
 @property  long long timeControlStatus
 @property  NSDictionary *stateDictionary
 @property  NSString *modeDescription
 @property  BOOL isModeSolo
 @property  BOOL isModeShared
 @property  BOOL isModeManagedSession

  // class methods
  +[MFPlaybackStackControllerImplementation errorDomain]

  // instance methods
  -[MFPlaybackStackControllerImplementation stateDictionary]
  -[MFPlaybackStackControllerImplementation pauseForLeasePreventionWithIdentifier:completion:]
  -[MFPlaybackStackControllerImplementation rate]
  -[MFPlaybackStackControllerImplementation pauseWithIdentifier:completion:]
  -[MFPlaybackStackControllerImplementation modeDescription]
  -[MFPlaybackStackControllerImplementation .cxx_destruct]
  -[MFPlaybackStackControllerImplementation skipWithDirection:identifier:completion:]
  -[MFPlaybackStackControllerImplementation currentItem]
  -[MFPlaybackStackControllerImplementation setDelegate:]
  -[MFPlaybackStackControllerImplementation reloadItemsKeepingCurrentItem:]
  -[MFPlaybackStackControllerImplementation init]
  -[MFPlaybackStackControllerImplementation currentTime]
  -[MFPlaybackStackControllerImplementation reset]
  -[MFPlaybackStackControllerImplementation beginScanningWithDirection:identifier:completion:]
  -[MFPlaybackStackControllerImplementation currentState]
  -[MFPlaybackStackControllerImplementation delegate]
  -[MFPlaybackStackControllerImplementation setRate:identifier:completion:]
  -[MFPlaybackStackControllerImplementation setRelativeVolume:]
  -[MFPlaybackStackControllerImplementation timeControlStatus]
  -[MFPlaybackStackControllerImplementation endScanningWithIdentifier:completion:]
  -[MFPlaybackStackControllerImplementation playWithRate:identifier:completion:]
  -[MFPlaybackStackControllerImplementation targetTime]
  -[MFPlaybackStackControllerImplementation nextItems]
  -[MFPlaybackStackControllerImplementation videoViewController]
  -[MFPlaybackStackControllerImplementation currentQueueItem]
  -[MFPlaybackStackControllerImplementation restoreQueue:]
  -[MFPlaybackStackControllerImplementation isModeSolo]
  -[MFPlaybackStackControllerImplementation setupForShared]
  -[MFPlaybackStackControllerImplementation isModeShared]
  -[MFPlaybackStackControllerImplementation setupForSolo]
  -[MFPlaybackStackControllerImplementation setQueueWithInitialItem:andPlay:identifier:completion:]
  -[MFPlaybackStackControllerImplementation activateAudioSessionWithCompletion:]
  -[MFPlaybackStackControllerImplementation jumpTo:identifier:completion:]
  -[MFPlaybackStackControllerImplementation pauseWithFadeOut:identifier:completion:]
  -[MFPlaybackStackControllerImplementation updateAudioSessionWithConfiguration:]
  -[MFPlaybackStackControllerImplementation interruptedState]
  -[MFPlaybackStackControllerImplementation shouldSkipJumpToItemStart:]
  -[MFPlaybackStackControllerImplementation initWithPlayerID:engineID:queueController:assetLoader:errorController:externalPlaybackController:leaseController:defaults:queue:]
  -[MFPlaybackStackControllerImplementation setMaximumPlayerQueueLength:]
  -[MFPlaybackStackControllerImplementation setupForManagedSessionWithAudioSession:]
  -[MFPlaybackStackControllerImplementation targetRate]
  -[MFPlaybackStackControllerImplementation currentItemTransition]
  -[MFPlaybackStackControllerImplementation effectiveRate]
  -[MFPlaybackStackControllerImplementation reloadCurrentItemWithReason:completion:]
  -[MFPlaybackStackControllerImplementation setSpatializationFormat:]
  -[MFPlaybackStackControllerImplementation clearPlaybackQueue]
  -[MFPlaybackStackControllerImplementation isModeManagedSession]
  -[MFPlaybackStackControllerImplementation maximumPlayerQueueLength]
  -[MFPlaybackStackControllerImplementation beginSeekingWithIdentifier:completion:]
  -[MFPlaybackStackControllerImplementation seekTo:identifier:completion:]
  -[MFPlaybackStackControllerImplementation endSeekingWithIdentifier:completion:]


_TtC15MediaFoundation5State : Swift._SwiftObject

_TtC15MediaFoundation9EventTime : Swift._SwiftObject <MFTimeStamp>
 @property  double time
 @property  double avTime
 @property  double userSecondsSinceReferenceDate
 @property  {?=qiIq} hostTime

  // instance methods
  -[_TtC15MediaFoundation9EventTime setTime:]
  -[_TtC15MediaFoundation9EventTime avTime]
  -[_TtC15MediaFoundation9EventTime time]
  -[_TtC15MediaFoundation9EventTime hostTime]
  -[_TtC15MediaFoundation9EventTime userSecondsSinceReferenceDate]


_TtC15MediaFoundation9IdleState : MediaFoundation.State

_TtC15MediaFoundation13EventReporter : Swift._SwiftObject

_TtC15MediaFoundation23PlaybackStackController : Swift._SwiftObject <MFStateDumpable, MFResettable, MFAudioSessionControlling, MFStackModeConfigurable, MFPlayerConfigurable>
 @property  NSDictionary *stateDictionary
 @property  NSString *modeDescription
 @property  BOOL isModeSolo
 @property  BOOL isModeShared
 @property  BOOL isModeManagedSession

  // instance methods
  -[_TtC15MediaFoundation23PlaybackStackController stateDictionary]
  -[_TtC15MediaFoundation23PlaybackStackController modeDescription]
  -[_TtC15MediaFoundation23PlaybackStackController reset]
  -[_TtC15MediaFoundation23PlaybackStackController setRelativeVolume:]
  -[_TtC15MediaFoundation23PlaybackStackController isModeSolo]
  -[_TtC15MediaFoundation23PlaybackStackController setupForShared]
  -[_TtC15MediaFoundation23PlaybackStackController isModeShared]
  -[_TtC15MediaFoundation23PlaybackStackController setupForSolo]
  -[_TtC15MediaFoundation23PlaybackStackController activateAudioSessionWithCompletion:]
  -[_TtC15MediaFoundation23PlaybackStackController updateAudioSessionWithConfiguration:]
  -[_TtC15MediaFoundation23PlaybackStackController setupForManagedSessionWithAudioSession:]
  -[_TtC15MediaFoundation23PlaybackStackController setSpatializationFormat:]
  -[_TtC15MediaFoundation23PlaybackStackController isModeManagedSession]


_TtC15MediaFoundation20ErrorResolutionState : MediaFoundation.State

_TtC15MediaFoundation17UserEventsMonitor : Swift._SwiftObject <MFResettable, MFStateDumpable>
 @property  NSDictionary *stateDictionary

  // instance methods
  -[_TtC15MediaFoundation17UserEventsMonitor stateDictionary]
  -[_TtC15MediaFoundation17UserEventsMonitor reset]


_TtC15MediaFoundationP33_8E60203C4A0D8D08719FEC3D39F6597C26UserEventCompletionMonitor : Swift._SwiftObject

AVAudioSession(MediaFoundation)
	// instance methods
	-[AVAudioSession(MediaFoundation) description]

AVPlayerItem(MediaFoundation)
	// class methods
	+[AVPlayerItem(MediaFoundation) DownloadedDurationThreshold]
	+[AVPlayerItem(MediaFoundation) HLSDownloadedDurationThreshold]

	// instance methods
	-[AVPlayerItem(MediaFoundation) setTitle:]
	-[AVPlayerItem(MediaFoundation) url]
	-[AVPlayerItem(MediaFoundation) isAssetLoaded]
	-[AVPlayerItem(MediaFoundation) contentItemID]
	-[AVPlayerItem(MediaFoundation) setContentItemID:]
	-[AVPlayerItem(MediaFoundation) prefersSeekOverSkip]
	-[AVPlayerItem(MediaFoundation) repeatIndex]
	-[AVPlayerItem(MediaFoundation) setRepeatIndex:]
	-[AVPlayerItem(MediaFoundation) time]
	-[AVPlayerItem(MediaFoundation) title]
	-[AVPlayerItem(MediaFoundation) avPlayerItem]
	-[AVPlayerItem(MediaFoundation) description]
	-[AVPlayerItem(MediaFoundation) isFullyDownloaded]
	-[AVPlayerItem(MediaFoundation) isVideoContent]
	-[AVPlayerItem(MediaFoundation) hasLoadableAsset]
	-[AVPlayerItem(MediaFoundation) setPrefersSeekOverSkip:]
	-[AVPlayerItem(MediaFoundation) setIsVideoContent:]
	-[AVPlayerItem(MediaFoundation) initWithUrl:contentItemID:repeatIndex:isVideoContent:prefersSeekOverSkip:]

_TtC15MediaFoundation17DebugOverlayStore(MediaFoundation)
	// instance methods
	-[_TtC15MediaFoundation17DebugOverlayStore(MediaFoundation) controller:didLoadResponse:]
	-[_TtC15MediaFoundation17DebugOverlayStore(MediaFoundation) controller:didUpdateResponse:]

AVQueuePlayer(MediaFoundation)
	// instance methods
	-[AVQueuePlayer(MediaFoundation) stateDictionary]
	-[AVQueuePlayer(MediaFoundation) playbackType]

01 00 0700 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0700 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSessionPortDescription 
01 00 0700 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSessionRouteDescription 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCoordinatedPlaybackParticipant 
01 00 0800 /System/Library/Frameworks/AVKit.framework/AVKit: AVMusicAppBehavior 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItemTrack 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerPlaybackCoordinator 
01 00 0800 /System/Library/Frameworks/AVKit.framework/AVKit: AVPlayerViewController 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVQueuePlayer 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVTimeFormatter 
01 00 0300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRCommandInfo 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRContentItem 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRContentItemMetadata 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRContentItemMetadataAudioFormat 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRDestination 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRNowPlayingController 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRNowPlayingControllerConfiguration 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRPlaybackQueueRequest 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRPlayerPath 
01 00 0100 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRSendCommandResultStatus 
01 00 0200 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVAutoBugCapture 
01 00 0200 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVTimer 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 0500 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0600 /usr/lib/libSystem.B.dylib: OS_dispatch_queue 
01 00 0600 /usr/lib/libSystem.B.dylib: OS_dispatch_source 
01 00 0600 /usr/lib/libSystem.B.dylib: OS_os_log 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 1000 /usr/lib/swift/libswiftCore.dylib: _TtCs12_SwiftObject 
