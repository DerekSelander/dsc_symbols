|| __DATA.__objc_data _OBJC_CLASS_$_MEAddressAnnotation
|| __DATA.__objc_data _OBJC_CLASS_$_MEComposeContext
|| __DATA.__objc_data _OBJC_CLASS_$_MEComposeExtensionValidationError
|| __DATA.__objc_data _OBJC_CLASS_$_MEComposeExtensionsHelper
|| __DATA.__objc_data _OBJC_CLASS_$_MEComposeSession
|| __DATA.__objc_data _OBJC_CLASS_$_MEDecodedMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MEDecodedMessageBanner
|| __DATA.__objc_data _OBJC_CLASS_$_MEEmailAddress
|| __DATA.__objc_data _OBJC_CLASS_$_MEEncodedOutgoingMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MEExtensionHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_MEExtensionManager
|| __DATA.__objc_data _OBJC_CLASS_$_MEExtensionUserPreferences
|| __DATA.__objc_data _OBJC_CLASS_$_MEExtensionViewController
|| __DATA.__objc_data _OBJC_CLASS_$_MEMailAppExtensionObserverCriteria
|| __DATA.__objc_data _OBJC_CLASS_$_MEMailComposeToolbarItemInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageAction
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageActionDecision
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageActionDestination
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageActionFlagChange
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageEncodingResult
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageRecipients
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageSecurityInformation
|| __DATA.__objc_data _OBJC_CLASS_$_MEMessageSigner
|| __DATA.__objc_data _OBJC_CLASS_$_MEOutgoingMessageEncodingStatus
|| __DATA.__objc_data _OBJC_CLASS_$_MERemoteExtension
|| __DATA.__objc_data _OBJC_CLASS_$_MERemoteExtensionContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MEAddressAnnotation
|| __DATA.__objc_data _OBJC_METACLASS_$_MEComposeContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MEComposeExtensionValidationError
|| __DATA.__objc_data _OBJC_METACLASS_$_MEComposeExtensionsHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_MEComposeSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MEDecodedMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MEDecodedMessageBanner
|| __DATA.__objc_data _OBJC_METACLASS_$_MEEmailAddress
|| __DATA.__objc_data _OBJC_METACLASS_$_MEEncodedOutgoingMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MEExtensionHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MEExtensionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MEExtensionUserPreferences
|| __DATA.__objc_data _OBJC_METACLASS_$_MEExtensionViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMailAppExtensionObserverCriteria
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMailComposeToolbarItemInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageAction
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageActionDecision
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageActionDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageActionFlagChange
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageEncodingResult
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageRecipients
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageSecurityInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_MEMessageSigner
|| __DATA.__objc_data _OBJC_METACLASS_$_MEOutgoingMessageEncodingStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_MERemoteExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_MERemoteExtensionContext
|| __DATA_CONST.__const _MEComposeSessionErrorDomain
|| __DATA_CONST.__const _MEContentBlockerMangerReload
|| __DATA_CONST.__const _MEMailAppExtensionsEnabledStateChanged
|| __DATA_CONST.__const _MEMailExtensionCapabilitiesKey
|| __DATA_CONST.__const _MEMailExtensionCapabilityComposeSession
|| __DATA_CONST.__const _MEMailExtensionCapabilityContentBlocking
|| __DATA_CONST.__const _MEMailExtensionCapabilityMessageActions
|| __DATA_CONST.__const _MEMailExtensionCapabilityMessageSecurity
|| __DATA_CONST.__const _MEMailExtensionComposeIconNameKey
|| __DATA_CONST.__const _MEMailExtensionComposeIconTooltipKey
|| __DATA_CONST.__const _MEMailExtensionComposeSessionConfigKey
|| __DATA_CONST.__const _MEMailExtensionDataAccessAccessLevelKey
|| __DATA_CONST.__const _MEMailExtensionDataAccessBodyKey
|| __DATA_CONST.__const _MEMailExtensionDataAccessHeaderKey
|| __DATA_CONST.__const _MEMailExtensionDataAccessHeadersKey
|| __DATA_CONST.__const _MEMailExtensionDataAccessReasonKey
|| __DATA_CONST.__const _MEMailExtensionDataAccessRequirementsKey
|| __DATA_CONST.__const _MEMailExtensionErrorDomain
|| __DATA_CONST.__const _MEMailExtensionErrorExtensionIdentifierKey
|| __DATA_CONST.__const _MEMailExtensionMessageSecurityConfigKey
|| __DATA_CONST.__const _MEMailExtensionMessageSecurityIconeNameKey
|| __DATA_CONST.__const _MEMessageSecurityErrorDomain
|| __DATA_CONST.__const _MEVisibleMessagesReload
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MEAppExtensionsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MEContentRuleListManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MEAppExtensionsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MEContentRuleListManager
|| __TEXT.__text _MEMailExtensionsLog
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreServices: _OBJC_CLASS_$_LSApplicationExtensionRecord
__ Email: _OBJC_CLASS_$_EMPersistenceLayoutManager
__ EmailCore: _ECMessageHeaderKeyAttachments
__ EmailCore: _ECMessageHeaderKeyAutoSubmitted
__ EmailCore: _ECMessageHeaderKeyBCC
__ EmailCore: _ECMessageHeaderKeyCC
__ EmailCore: _ECMessageHeaderKeyContentDescription
__ EmailCore: _ECMessageHeaderKeyContentDisposition
__ EmailCore: _ECMessageHeaderKeyContentID
__ EmailCore: _ECMessageHeaderKeyContentLanguage
__ EmailCore: _ECMessageHeaderKeyContentLocation
__ EmailCore: _ECMessageHeaderKeyContentTransferEncoding
__ EmailCore: _ECMessageHeaderKeyContentType
__ EmailCore: _ECMessageHeaderKeyDKIMSignature
__ EmailCore: _ECMessageHeaderKeyDate
__ EmailCore: _ECMessageHeaderKeyFrom
__ EmailCore: _ECMessageHeaderKeyImageArchiveURL
__ EmailCore: _ECMessageHeaderKeyInReplyTo
__ EmailCore: _ECMessageHeaderKeyListID
__ EmailCore: _ECMessageHeaderKeyListUnsubscribe
__ EmailCore: _ECMessageHeaderKeyListUnsubscribePost
__ EmailCore: _ECMessageHeaderKeyMIMEVersion
__ EmailCore: _ECMessageHeaderKeyMessageID
__ EmailCore: _ECMessageHeaderKeyReceived
__ EmailCore: _ECMessageHeaderKeyReferences
__ EmailCore: _ECMessageHeaderKeyRemoteAttachmentURL
__ EmailCore: _ECMessageHeaderKeyReplyTo
__ EmailCore: _ECMessageHeaderKeyResentCC
__ EmailCore: _ECMessageHeaderKeyResentDate
__ EmailCore: _ECMessageHeaderKeyResentFrom
__ EmailCore: _ECMessageHeaderKeyResentMessageID
__ EmailCore: _ECMessageHeaderKeyResentTo
__ EmailCore: _ECMessageHeaderKeySubject
__ EmailCore: _ECMessageHeaderKeyTo
__ EmailCore: _ECMessageHeaderKeyUserAgent
__ EmailCore: _ECMessageHeaderKeyXAppleUnsubscribe
__ EmailCore: _ECMessageHeaderKeyXMailer
__ EmailCore: _ECMessageHeaderKeyXNotifyThread
__ EmailCore: _ECMessageHeaderKeyXPriority
__ EmailCore: _ECMessageHeaderKeyXSMIMEEncrypt
__ EmailFoundation: _EFArraysAreEqual
__ EmailFoundation: _EFLogRegisterStateCaptureBlock
__ EmailFoundation: _EFObjectsAreEqual
__ EmailFoundation: _OBJC_CLASS_$_EFCancelationToken
__ EmailFoundation: _OBJC_CLASS_$_EFDebouncer
__ EmailFoundation: _OBJC_CLASS_$_EFFuture
__ EmailFoundation: _OBJC_CLASS_$_EFLocked
__ EmailFoundation: _OBJC_CLASS_$_EFPromise
__ EmailFoundation: _OBJC_CLASS_$_EFScheduler
__ Foundation: _NSClassFromString
__ Foundation: _NSLog
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSExtensionContext
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$__NSExtensionContextVendor
__ Foundation: _OBJC_METACLASS_$_NSExtensionContext
__ PlugInKit: _PKProtocolAttribute
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _pthread_main_np
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
MEAddressAnnotation : NSObject <NSSecureCoding>
 @property  long long iconType
 @property  NSString *localizedDescription
 @property  NSString *originatorExtensionDisplayName

  // class methods
  +[MEAddressAnnotation supportsSecureCoding]
  +[MEAddressAnnotation errorWithLocalizedDescription:]
  +[MEAddressAnnotation warningWithLocalizedDescription:]
  +[MEAddressAnnotation successWithLocalizedDescription:]

  // instance methods
  -[MEAddressAnnotation localizedDescription]
  -[MEAddressAnnotation encodeWithCoder:]
  -[MEAddressAnnotation .cxx_destruct]
  -[MEAddressAnnotation initWithCoder:]
  -[MEAddressAnnotation iconType]
  -[MEAddressAnnotation initWithEmailAddressTokenIconType:localizedDescription:]
  -[MEAddressAnnotation _iconTypeDescription]
  -[MEAddressAnnotation originatorExtensionDisplayName]
  -[MEAddressAnnotation setOriginatorExtensionDisplayName:]


MEMailAppExtensionObserverCriteria : NSObject
 @property  NSArray *capabilities
 @property  BOOL includeDisabled

  // instance methods
  -[MEMailAppExtensionObserverCriteria .cxx_destruct]
  -[MEMailAppExtensionObserverCriteria capabilities]
  -[MEMailAppExtensionObserverCriteria initWithCapabilities:includeDisabled:]
  -[MEMailAppExtensionObserverCriteria includeDisabled]


MEAppExtensionsController : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSDictionary *extensionsByIdentifier
 @property  NSArray *previouslyEnabledExtensionIdentifiers
 @property  NSObject<OS_dispatch_queue> *stateCaptureQueue
 @property  <EFCancelable> *stateCaptureCancelable

  // class methods
  +[MEAppExtensionsController sharedInstance]
  +[MEAppExtensionsController log]
  +[MEAppExtensionsController _emailExtensionAttributeDictionary]

  // instance methods
  -[MEAppExtensionsController extensionForIdentifier:]
  -[MEAppExtensionsController dealloc]
  -[MEAppExtensionsController .cxx_destruct]
  -[MEAppExtensionsController _stopMatchingExtensions]
  -[MEAppExtensionsController setQueue:]
  -[MEAppExtensionsController queue]
  -[MEAppExtensionsController extensionsByIdentifier]
  -[MEAppExtensionsController init]
  -[MEAppExtensionsController stateCaptureCancelable]
  -[MEAppExtensionsController stateCaptureQueue]
  -[MEAppExtensionsController registerMailAppExtensionsObserver:capabilities:includeDisabled:completion:]
  -[MEAppExtensionsController _startMatchingExtensions]
  -[MEAppExtensionsController _extensionsNewlyMatchingFromNewExtensions:currentExtensions:forCriteria:]
  -[MEAppExtensionsController _extensionsNoLongerMatchingFromNewExtensions:currentExtensions:forCriteria:]
  -[MEAppExtensionsController _extension:matchesOldCriteria:]
  -[MEAppExtensionsController _extension:matchesCriteria:]
  -[MEAppExtensionsController _extension:matchesCapabilities:]
  -[MEAppExtensionsController _remoteEmailExtensionsForExtensions:enabledOnly:]
  -[MEAppExtensionsController _logExtensionsStateWithReason:]
  -[MEAppExtensionsController setExtensionsByIdentifier:]
  -[MEAppExtensionsController previouslyEnabledExtensionIdentifiers]
  -[MEAppExtensionsController setPreviouslyEnabledExtensionIdentifiers:]


MEComposeContext : NSObject <NSSecureCoding>
 @property  MEMessage *originalMessage
 @property  NSUUID *contextID
 @property  long long action
 @property  BOOL isEncrypted
 @property  BOOL isSigned
 @property  BOOL shouldEncrypt
 @property  BOOL shouldSign

  // class methods
  +[MEComposeContext supportsSecureCoding]

  // instance methods
  -[MEComposeContext encodeWithCoder:]
  -[MEComposeContext isEncrypted]
  -[MEComposeContext .cxx_destruct]
  -[MEComposeContext setContextID:]
  -[MEComposeContext setIsEncrypted:]
  -[MEComposeContext action]
  -[MEComposeContext contextID]
  -[MEComposeContext isSigned]
  -[MEComposeContext setAction:]
  -[MEComposeContext initWithCoder:]
  -[MEComposeContext shouldEncrypt]
  -[MEComposeContext originalMessage]
  -[MEComposeContext setOriginalMessage:]
  -[MEComposeContext shouldSign]
  -[MEComposeContext setShouldSign:]
  -[MEComposeContext setShouldEncrypt:]
  -[MEComposeContext setIsSigned:]
  -[MEComposeContext initWithAction:originalMessage:shouldSign:isSigned:shouldEncrypt:isEncrypted:]


MEComposeExtensionsHelper : NSObject <MEAppExtensionsObserver, MEMailComposeExtensionHostDelegate, MEMailComposeAppExtensionsRequestDispatcher>
 @property  <MEMailComposeExtensionDelegate> *extensionDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MEComposeExtensionsHelper log]

  // instance methods
  -[MEComposeExtensionsHelper dealloc]
  -[MEComposeExtensionsHelper .cxx_destruct]
  -[MEComposeExtensionsHelper setExtensionDelegate:]
  -[MEComposeExtensionsHelper extensionDelegate]
  -[MEComposeExtensionsHelper extensionsMatched:]
  -[MEComposeExtensionsHelper extensionsNoLongerMatching:]
  -[MEComposeExtensionsHelper regenerateEmailAddressTokenChangesForSession:forContextUUID:]
  -[MEComposeExtensionsHelper dispatchEmailAddressTokenIconRequestsForMailMessage:completionHandler:]
  -[MEComposeExtensionsHelper getAdditionalHeadersForMessage:completionHandler:]
  -[MEComposeExtensionsHelper performSendValidationForMessage:completionHandler:]
  -[MEComposeExtensionsHelper appExtensionViewControllerForExtensionIdentifier:completionHandler:]
  -[MEComposeExtensionsHelper initWithComposeSession:extensionsController:iconReloader:]
  -[MEComposeExtensionsHelper _dispatchMailComposeSessionDidBeginForExtensions:]


MEComposeExtensionValidationError : NSObject
 @property  UIImage *icon
 @property  NSString *extensionDisplayName
 @property  NSError *error

  // instance methods
  -[MEComposeExtensionValidationError setIcon:]
  -[MEComposeExtensionValidationError error]
  -[MEComposeExtensionValidationError .cxx_destruct]
  -[MEComposeExtensionValidationError setError:]
  -[MEComposeExtensionValidationError icon]
  -[MEComposeExtensionValidationError extensionDisplayName]
  -[MEComposeExtensionValidationError initWithExtensionName:icon:error:]
  -[MEComposeExtensionValidationError setExtensionDisplayName:]


MEComposeSession : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *sessionID
 @property  MEComposeContext *composeContext
 @property  MERemoteExtension *remoteExtension
 @property  MEMessage *mailMessage
 @property  <MEComposeSessionHostProtocol_XPC> *remoteHostContext

  // class methods
  +[MEComposeSession supportsSecureCoding]

  // instance methods
  -[MEComposeSession sessionID]
  -[MEComposeSession encodeWithCoder:]
  -[MEComposeSession .cxx_destruct]
  -[MEComposeSession copyWithZone:]
  -[MEComposeSession setSessionID:]
  -[MEComposeSession isEqual:]
  -[MEComposeSession initWithCoder:]
  -[MEComposeSession mailMessage]
  -[MEComposeSession initWithSessionID:composeContext:mailMessage:]
  -[MEComposeSession reloadSession]
  -[MEComposeSession setMailMessage:]
  -[MEComposeSession composeContext]
  -[MEComposeSession setComposeContext:]
  -[MEComposeSession remoteExtension]
  -[MEComposeSession setRemoteExtension:]
  -[MEComposeSession remoteHostContext]
  -[MEComposeSession setRemoteHostContext:]


MEContentRuleListManager : NSObject <MEAppExtensionsObserver>
  // class methods
  +[MEContentRuleListManager log]

  // instance methods
  -[MEContentRuleListManager dealloc]
  -[MEContentRuleListManager .cxx_destruct]
  -[MEContentRuleListManager init]
  -[MEContentRuleListManager extensionsMatched:]
  -[MEContentRuleListManager extensionsNoLongerMatching:]
  -[MEContentRuleListManager initWithExtensionsController:]
  -[MEContentRuleListManager addObserver:activeRuleLists:]
  -[MEContentRuleListManager _activeRuleLists]
  -[MEContentRuleListManager _handleExtensionsAdded:]
  -[MEContentRuleListManager _handleExtensionsRemoved:]
  -[MEContentRuleListManager _compileAndAddContentRuleListForIdentifier:encodedContentRuleList:]
  -[MEContentRuleListManager _encodedContentRuleListForExtension:]
  -[MEContentRuleListManager _notifyObserversOfNewContentRuleList:]
  -[MEContentRuleListManager _notifyObserversOfUpdatedContentRuleList:oldContentRuleList:]
  -[MEContentRuleListManager _notifyObserversOfRemovedContentRuleList:]
  -[MEContentRuleListManager _scheduleContentRuleListReload]
  -[MEContentRuleListManager _reloadContentRuleLists]


MEDecodedMessage : NSObject <NSSecureCoding>
 @property  NSData *rawData
 @property  MEMessageSecurityInformation *securityInformation
 @property  NSData *context
 @property  MEDecodedMessageBanner *banner

  // class methods
  +[MEDecodedMessage supportsSecureCoding]

  // instance methods
  -[MEDecodedMessage banner]
  -[MEDecodedMessage rawData]
  -[MEDecodedMessage encodeWithCoder:]
  -[MEDecodedMessage .cxx_destruct]
  -[MEDecodedMessage context]
  -[MEDecodedMessage isEqual:]
  -[MEDecodedMessage initWithCoder:]
  -[MEDecodedMessage securityInformation]
  -[MEDecodedMessage initWithData:securityInformation:context:]
  -[MEDecodedMessage initWithData:securityInformation:context:banner:]


MEDecodedMessageBanner : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *title
 @property  NSString *primaryActionTitle
 @property  BOOL dismissable

  // class methods
  +[MEDecodedMessageBanner supportsSecureCoding]

  // instance methods
  -[MEDecodedMessageBanner encodeWithCoder:]
  -[MEDecodedMessageBanner .cxx_destruct]
  -[MEDecodedMessageBanner title]
  -[MEDecodedMessageBanner copyWithZone:]
  -[MEDecodedMessageBanner isEqual:]
  -[MEDecodedMessageBanner initWithCoder:]
  -[MEDecodedMessageBanner primaryActionTitle]
  -[MEDecodedMessageBanner isDismissable]
  -[MEDecodedMessageBanner initWithTitle:primaryActionTitle:dismissable:]


MEEmailAddress : NSObject <ECEmailAddressConvertible, NSSecureCoding, NSCopying>
 @property  NSString *rawString
 @property  NSString *addressString
 @property  ECEmailAddress *emailAddressValue
 @property  NSString *stringValue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MEEmailAddress supportsSecureCoding]
  +[MEEmailAddress emailAddressesForAddresses:]

  // instance methods
  -[MEEmailAddress encodeWithCoder:]
  -[MEEmailAddress stringValue]
  -[MEEmailAddress .cxx_destruct]
  -[MEEmailAddress rawString]
  -[MEEmailAddress emailAddressValue]
  -[MEEmailAddress copyWithZone:]
  -[MEEmailAddress isEqual:]
  -[MEEmailAddress addressString]
  -[MEEmailAddress initWithCoder:]
  -[MEEmailAddress initWithRawString:]


MEEncodedOutgoingMessage : NSObject <NSSecureCoding>
 @property  NSData *rawData
 @property  BOOL isSigned
 @property  BOOL isEncrypted

  // class methods
  +[MEEncodedOutgoingMessage supportsSecureCoding]

  // instance methods
  -[MEEncodedOutgoingMessage rawData]
  -[MEEncodedOutgoingMessage encodeWithCoder:]
  -[MEEncodedOutgoingMessage isEncrypted]
  -[MEEncodedOutgoingMessage .cxx_destruct]
  -[MEEncodedOutgoingMessage isSigned]
  -[MEEncodedOutgoingMessage isEqual:]
  -[MEEncodedOutgoingMessage initWithCoder:]
  -[MEEncodedOutgoingMessage initWithRawData:isSigned:isEncrypted:]


MEExtensionHostContext : NSExtensionContext <MEExtensionRemoteHostProtocol>
 @property  <MEMailComposeExtensionHostDelegate> *composeExtensionHostDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MEExtensionHostContext _extensionAuxiliaryHostProtocol]
  +[MEExtensionHostContext _extensionAuxiliaryVendorProtocol]
  +[MEExtensionHostContext extensionHostRequestScheduler]

  // instance methods
  -[MEExtensionHostContext .cxx_destruct]
  -[MEExtensionHostContext regenerateEmailAddressTokenChangesForSession:]
  -[MEExtensionHostContext composeExtensionHostDelegate]
  -[MEExtensionHostContext setComposeExtensionHostDelegate:]


MEExtensionManager : NSObject
  // class methods
  +[MEExtensionManager reloadContentBlockerWithIdentifier:completionHandler:]
  +[MEExtensionManager reloadVisibleMessagesWithCompletionHandler:]


MEExtensionUserPreferences : NSObject
 @property  NSMutableDictionary *extensionIDToUserEnabledMap

  // class methods
  +[MEExtensionUserPreferences sharedInstance]
  +[MEExtensionUserPreferences log]

  // instance methods
  -[MEExtensionUserPreferences _serializedData]
  -[MEExtensionUserPreferences .cxx_destruct]
  -[MEExtensionUserPreferences _loadUserPreferences]
  -[MEExtensionUserPreferences _plistURL]
  -[MEExtensionUserPreferences _prefsDictionary]
  -[MEExtensionUserPreferences isExtensionEnabled:]
  -[MEExtensionUserPreferences setExtensionEnabled:forExtensionID:]
  -[MEExtensionUserPreferences _savePreferences]
  -[MEExtensionUserPreferences extensionIDToUserEnabledMap]
  -[MEExtensionUserPreferences setExtensionIDToUserEnabledMap:]


MEExtensionViewController : UIViewController

MEMailComposeToolbarItemInfo : NSObject
 @property  NSString *label
 @property  NSString *tooltip
 @property  UIImage *image

  // instance methods
  -[MEMailComposeToolbarItemInfo setLabel:]
  -[MEMailComposeToolbarItemInfo .cxx_destruct]
  -[MEMailComposeToolbarItemInfo image]
  -[MEMailComposeToolbarItemInfo label]
  -[MEMailComposeToolbarItemInfo setImage:]
  -[MEMailComposeToolbarItemInfo initWithLabel:image:tooltip:]
  -[MEMailComposeToolbarItemInfo tooltip]
  -[MEMailComposeToolbarItemInfo setTooltip:]


MEMessage : NSObject <NSSecureCoding>
 @property  MEMessageRecipients *recipients
 @property  long long state
 @property  long long encryptionState
 @property  NSString *subject
 @property  MEEmailAddress *fromAddress
 @property  NSArray *toAddresses
 @property  NSArray *ccAddresses
 @property  NSArray *bccAddresses
 @property  NSArray *replyToAddresses
 @property  NSArray *allRecipientAddresses
 @property  NSDate *dateSent
 @property  NSDate *dateReceived
 @property  NSDictionary *headers
 @property  NSData *rawData

  // class methods
  +[MEMessage supportsSecureCoding]
  +[MEMessage _protectedHeaders]
  +[MEMessage extensionCanSetHeaderKey:]

  // instance methods
  -[MEMessage recipients]
  -[MEMessage headers]
  -[MEMessage subject]
  -[MEMessage rawData]
  -[MEMessage encodeWithCoder:]
  -[MEMessage state]
  -[MEMessage .cxx_destruct]
  -[MEMessage dateReceived]
  -[MEMessage setRecipients:]
  -[MEMessage isEqual:]
  -[MEMessage initWithCoder:]
  -[MEMessage dateSent]
  -[MEMessage initWithState:encryptionState:subject:recipients:from:dataSent:dateReceived:headers:rawData:]
  -[MEMessage allRecipientAddresses]
  -[MEMessage toAddresses]
  -[MEMessage ccAddresses]
  -[MEMessage bccAddresses]
  -[MEMessage replyToAddresses]
  -[MEMessage _sanitaizedHeadersForHeaders:]
  -[MEMessage encryptionState]
  -[MEMessage fromAddress]


MEMessageActionFlagChange : NSObject <NSSecureCoding>
 @property  long long flag

  // class methods
  +[MEMessageActionFlagChange supportsSecureCoding]

  // instance methods
  -[MEMessageActionFlagChange encodeWithCoder:]
  -[MEMessageActionFlagChange initWithFlag:]
  -[MEMessageActionFlagChange flag]
  -[MEMessageActionFlagChange isEqual:]
  -[MEMessageActionFlagChange initWithCoder:]


MEMessageAction : NSObject <NSSecureCoding>
 @property  MEMessageActionDestination *destination
 @property  long long readStatus
 @property  MEMessageActionFlagChange *flagChange
 @property  long long messageColor

  // class methods
  +[MEMessageAction supportsSecureCoding]
  +[MEMessageAction moveToTrashAction]
  +[MEMessageAction moveToArchiveAction]
  +[MEMessageAction moveToJunkAction]
  +[MEMessageAction markAsReadAction]
  +[MEMessageAction markAsUnreadAction]
  +[MEMessageAction flagActionWithFlag:]
  +[MEMessageAction setBackgroundColorActionWithColor:]

  // instance methods
  -[MEMessageAction destination]
  -[MEMessageAction encodeWithCoder:]
  -[MEMessageAction .cxx_destruct]
  -[MEMessageAction isEqual:]
  -[MEMessageAction initWithCoder:]
  -[MEMessageAction flagChange]
  -[MEMessageAction readStatus]
  -[MEMessageAction initWithDestination:readStatus:flagChange:messageColor:]
  -[MEMessageAction messageColor]


MEMessageActionDecision : NSObject <NSSecureCoding>
 @property  NSArray *actions
 @property  BOOL invokeAgainWithBody

  // class methods
  +[MEMessageActionDecision supportsSecureCoding]
  +[MEMessageActionDecision decisionApplyingAction:]
  +[MEMessageActionDecision decisionApplyingActions:]
  +[MEMessageActionDecision invokeAgainWithBody]

  // instance methods
  -[MEMessageActionDecision encodeWithCoder:]
  -[MEMessageActionDecision .cxx_destruct]
  -[MEMessageActionDecision actions]
  -[MEMessageActionDecision isEqual:]
  -[MEMessageActionDecision initWithCoder:]
  -[MEMessageActionDecision invokeAgainWithBody]
  -[MEMessageActionDecision initWithActions:invokeAgainWithBody:]


MEMessageActionDestination : NSObject <NSSecureCoding>
 @property  long long mailboxType

  // class methods
  +[MEMessageActionDestination supportsSecureCoding]
  +[MEMessageActionDestination archive]
  +[MEMessageActionDestination inbox]
  +[MEMessageActionDestination trash]
  +[MEMessageActionDestination junk]
  +[MEMessageActionDestination allowedMailboxTypes]

  // instance methods
  -[MEMessageActionDestination encodeWithCoder:]
  -[MEMessageActionDestination isEqual:]
  -[MEMessageActionDestination initWithCoder:]
  -[MEMessageActionDestination mailboxType]
  -[MEMessageActionDestination initWithDefaultMailboxType:]


MEMessageEncodingResult : NSObject <NSSecureCoding>
 @property  MEEncodedOutgoingMessage *encodedMessage
 @property  NSError *signingError
 @property  NSError *encryptionError

  // class methods
  +[MEMessageEncodingResult supportsSecureCoding]

  // instance methods
  -[MEMessageEncodingResult encodeWithCoder:]
  -[MEMessageEncodingResult .cxx_destruct]
  -[MEMessageEncodingResult initWithCoder:]
  -[MEMessageEncodingResult initWithEncodedMessage:signingError:encryptionError:]
  -[MEMessageEncodingResult encodedMessage]
  -[MEMessageEncodingResult signingError]
  -[MEMessageEncodingResult encryptionError]


MEMessageRecipients : NSObject <NSSecureCoding>
 @property  NSArray *to
 @property  NSArray *cc
 @property  NSArray *bcc
 @property  NSArray *replyTo
 @property  NSArray *allRecipients

  // class methods
  +[MEMessageRecipients supportsSecureCoding]
  +[MEMessageRecipients emailAddressesForEmailAddressStrings:]

  // instance methods
  -[MEMessageRecipients encodeWithCoder:]
  -[MEMessageRecipients .cxx_destruct]
  -[MEMessageRecipients isEqual:]
  -[MEMessageRecipients initWithCoder:]
  -[MEMessageRecipients to]
  -[MEMessageRecipients cc]
  -[MEMessageRecipients bcc]
  -[MEMessageRecipients replyTo]
  -[MEMessageRecipients allRecipients]
  -[MEMessageRecipients initWithStringsTo:cc:bcc:replyTo:]
  -[MEMessageRecipients initWithTo:cc:bcc:replyTo:]


MEMessageSecurityInformation : NSObject <NSSecureCoding>
 @property  NSString *decoderID
 @property  NSArray *signers
 @property  BOOL isEncrypted
 @property  NSError *signingError
 @property  NSError *encryptionError
 @property  BOOL shouldBlockRemoteContent
 @property  NSString *localizedRemoteContentBlockingReason

  // class methods
  +[MEMessageSecurityInformation supportsSecureCoding]

  // instance methods
  -[MEMessageSecurityInformation encodeWithCoder:]
  -[MEMessageSecurityInformation isEncrypted]
  -[MEMessageSecurityInformation .cxx_destruct]
  -[MEMessageSecurityInformation copyWithZone:]
  -[MEMessageSecurityInformation isEqual:]
  -[MEMessageSecurityInformation initWithCoder:]
  -[MEMessageSecurityInformation signers]
  -[MEMessageSecurityInformation signingError]
  -[MEMessageSecurityInformation encryptionError]
  -[MEMessageSecurityInformation initWithSigners:isEncrypted:signingError:encryptionError:]
  -[MEMessageSecurityInformation initWithSigners:isEncrypted:signingError:encryptionError:shouldBlockRemoteContent:localizedRemoteContentBlockingReason:]
  -[MEMessageSecurityInformation shouldBlockRemoteContent]
  -[MEMessageSecurityInformation localizedRemoteContentBlockingReason]
  -[MEMessageSecurityInformation decoderID]
  -[MEMessageSecurityInformation setDecoderID:]


MEMessageSigner : NSObject <NSSecureCoding>
 @property  NSArray *emailAddresses
 @property  NSString *label
 @property  NSData *context

  // class methods
  +[MEMessageSigner supportsSecureCoding]

  // instance methods
  -[MEMessageSigner encodeWithCoder:]
  -[MEMessageSigner emailAddresses]
  -[MEMessageSigner .cxx_destruct]
  -[MEMessageSigner label]
  -[MEMessageSigner context]
  -[MEMessageSigner isEqual:]
  -[MEMessageSigner initWithCoder:]
  -[MEMessageSigner initWithEmailAddresses:signatureLabel:context:]


MEOutgoingMessageEncodingStatus : NSObject <NSSecureCoding>
 @property  BOOL canSign
 @property  BOOL canEncrypt
 @property  NSError *securityError
 @property  NSArray *addressesFailingEncryption

  // class methods
  +[MEOutgoingMessageEncodingStatus supportsSecureCoding]

  // instance methods
  -[MEOutgoingMessageEncodingStatus encodeWithCoder:]
  -[MEOutgoingMessageEncodingStatus .cxx_destruct]
  -[MEOutgoingMessageEncodingStatus initWithCoder:]
  -[MEOutgoingMessageEncodingStatus canEncrypt]
  -[MEOutgoingMessageEncodingStatus canSign]
  -[MEOutgoingMessageEncodingStatus initWithCanSign:canEncrypt:securityError:addressesFailingEncryption:]
  -[MEOutgoingMessageEncodingStatus securityError]
  -[MEOutgoingMessageEncodingStatus addressesFailingEncryption]


MERemoteExtension : NSObject <EFPubliclyDescribable>
 @property  NSExtension *extension
 @property  NSObject<OS_dispatch_queue> *extensionLoadingQueue
 @property  NSString *containerPath
 @property  NSString *containerID
 @property  NSString *extensionID
 @property  BOOL entitlementVerified
 @property  EFPromise *remoteExtensionProxyPromise
 @property  MERemoteExtensionContext *extensionContext
 @property  MEExtensionHostContext *extensionHostContext
 @property  NSUUID *contextUUID
 @property  NSString *dataAccessReason
 @property  NSDictionary *headerAccessLevels
 @property  BOOL bodyAccess
 @property  BOOL hasMessageContentAccess
 @property  <MEComposeSessionHandler_Private> *synchronousComposeSessionInterface
 @property  <MEMessageSecurityHandler> *synchronousMessageSecurityInterface
 @property  <MEMessageActionHandler_Private> *synchronousMessageActionProviderInterface
 @property  <MEContentBlocker_Private> *synchronousContentBlockerInterface
 @property  <MEMessageActionHandler> *messageActionInterface
 @property  <MEComposeSessionHandler> *composeSessionInterface
 @property  NSString *displayName
 @property  NSString *displayVersion
 @property  NSString *containingAppDisplayName
 @property  NSURL *containingAppURL
 @property  NSString *descriptionText
 @property  BOOL isEnabled
 @property  NSArray *capabilities
 @property  BOOL outboundNetworkingAllowed
 @property  BOOL inboundNetworkingAllowed
 @property  UIImage *preferencesIcon
 @property  UIImage *menuIcon
 @property  UIImage *toolbarIcon
 @property  UIImage *messageSecurityDecoderIcon
 @property  MEMailComposeToolbarItemInfo *composeWindowToolbarButtonInfo
 @property  NSString *ef_publicDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MERemoteExtension allCapabilities]
  +[MERemoteExtension log]
  +[MERemoteExtension allCapabilitiesRequiringMessageContentAccess]

  // instance methods
  -[MERemoteExtension initWithExtension:]
  -[MERemoteExtension setContainerID:]
  -[MERemoteExtension ef_publicDescription]
  -[MERemoteExtension containerID]
  -[MERemoteExtension extension]
  -[MERemoteExtension containerPath]
  -[MERemoteExtension setContainerPath:]
  -[MERemoteExtension setExtension:]
  -[MERemoteExtension extensionID]
  -[MERemoteExtension .cxx_destruct]
  -[MERemoteExtension setEnabled:]
  -[MERemoteExtension capabilities]
  -[MERemoteExtension setEntitlementVerified:]
  -[MERemoteExtension entitlementVerified]
  -[MERemoteExtension setExtensionID:]
  -[MERemoteExtension displayName]
  -[MERemoteExtension descriptionText]
  -[MERemoteExtension extensionContext]
  -[MERemoteExtension isEqual:]
  -[MERemoteExtension isEnabled]
  -[MERemoteExtension containingAppDisplayName]
  -[MERemoteExtension menuIcon]
  -[MERemoteExtension containingAppURL]
  -[MERemoteExtension displayVersion]
  -[MERemoteExtension preferencesIcon]
  -[MERemoteExtension toolbarIcon]
  -[MERemoteExtension contextUUID]
  -[MERemoteExtension synchronousMessageActionProviderInterface]
  -[MERemoteExtension extensionHostContext]
  -[MERemoteExtension outboundNetworkingAllowed]
  -[MERemoteExtension inboundNetworkingAllowed]
  -[MERemoteExtension _imageForName:]
  -[MERemoteExtension toolbarIconTooltip]
  -[MERemoteExtension composeWindowToolbarButtonInfo]
  -[MERemoteExtension _remoteExtensionProxyFuture]
  -[MERemoteExtension _loadRemoteExtesionProxyFuture]
  -[MERemoteExtension interfaceForExtensionCapability:]
  -[MERemoteExtension composeSessionInterface]
  -[MERemoteExtension synchronousComposeSessionInterface]
  -[MERemoteExtension getMailComposeExtensionViewControllerForSession:hostDelegate:completionHandler:]
  -[MERemoteExtension messageActionProviderInterface]
  -[MERemoteExtension contentBlockerInterface]
  -[MERemoteExtension synchronousContentBlockerInterface]
  -[MERemoteExtension getMailSignatureVerificationExtensionViewControllerForMessageSigners:completionHandler:]
  -[MERemoteExtension getDecodedMailViewControllerForMessageContext:completionHandler:]
  -[MERemoteExtension primaryActionClickedForMessageContext:completionHandler:]
  -[MERemoteExtension _interfaceForExtensionCapability:]
  -[MERemoteExtension _synchronousInterfaceForExtensionCapability:]
  -[MERemoteExtension dataAccessReason]
  -[MERemoteExtension bodyAccess]
  -[MERemoteExtension _nts_loadDataAccessReason]
  -[MERemoteExtension _nts_loadBodyAccess]
  -[MERemoteExtension hasMessageContentAccess]
  -[MERemoteExtension messageActionInterface]
  -[MERemoteExtension messageSecurityDecoderIcon]
  -[MERemoteExtension extensionLoadingQueue]
  -[MERemoteExtension setExtensionLoadingQueue:]
  -[MERemoteExtension remoteExtensionProxyPromise]
  -[MERemoteExtension setRemoteExtensionProxyPromise:]
  -[MERemoteExtension headerAccessLevels]
  -[MERemoteExtension synchronousMessageSecurityInterface]


MERemoteExtensionContext : NSExtensionContext <MERemoteExtensionProtocol>
 @property  NSMapTable *composeSessionToHandlerMap
 @property  <MEExtensionRemoteHostProtocol> *remoteHostPoxy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *requiredHeaders

  // class methods
  +[MERemoteExtensionContext _extensionAuxiliaryHostProtocol]
  +[MERemoteExtensionContext log]
  +[MERemoteExtensionContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[MERemoteExtensionContext dealloc]
  -[MERemoteExtensionContext .cxx_destruct]
  -[MERemoteExtensionContext initWithInputItems:listenerEndpoint:contextUUID:]
  -[MERemoteExtensionContext remoteProxy]
  -[MERemoteExtensionContext decideActionForMessage:completionHandler:]
  -[MERemoteExtensionContext requiredHeadersWithCompletion:]
  -[MERemoteExtensionContext requiredHeaders]
  -[MERemoteExtensionContext primaryActionClickedForMessageContext:completionHandler:]
  -[MERemoteExtensionContext session:annotateAddressesWithCompletionHandler:]
  -[MERemoteExtensionContext session:canSendMessageWithCompletionHandler:]
  -[MERemoteExtensionContext additionalHeadersForSession:]
  -[MERemoteExtensionContext extensionViewControllerForMessageSigners:]
  -[MERemoteExtensionContext extensionViewControllerForMessageContext:]
  -[MERemoteExtensionContext mailComposeSessionDidBegin:]
  -[MERemoteExtensionContext mailComposeSessionDidEnd:]
  -[MERemoteExtensionContext viewControllerForSession:]
  -[MERemoteExtensionContext session:getAdditionalHeadersWithCompletion:]
  -[MERemoteExtensionContext getEncodingStatusForMessage:composeContext:completionHandler:]
  -[MERemoteExtensionContext encodeMessage:composeContext:completionHandler:]
  -[MERemoteExtensionContext decodedMessageForMessageData:]
  -[MERemoteExtensionContext decodedMessageForMessageData:withCompletionHandler:]
  -[MERemoteExtensionContext contentRulesJSON]
  -[MERemoteExtensionContext contentRulesJSONWithCompletionHandler:]
  -[MERemoteExtensionContext remoteHostPoxy]
  -[MERemoteExtensionContext _extensionInterface]
  -[MERemoteExtensionContext _createPrincipalObject]
  -[MERemoteExtensionContext _contentBlockerInterface]
  -[MERemoteExtensionContext _mailActionInterface]
  -[MERemoteExtensionContext _composeSessionInterfaceForSession:]
  -[MERemoteExtensionContext _messageSecurityHandlerInterface]
  -[MERemoteExtensionContext composeSessionToHandlerMap]
  -[MERemoteExtensionContext setComposeSessionToHandlerMap:]


NSXPCInterface(Extension)
	// class methods
	+[NSXPCInterface(Extension) MERemoteExtensiontInterface]
	+[NSXPCInterface(Extension) MEExtensionRemoteHostInterface]

01 00 0500 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFCancelationToken 
01 00 0500 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFDebouncer 
01 00 0500 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFFuture 
01 00 0500 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFLocked 
01 00 0500 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFPromise 
01 00 0500 /System/Library/PrivateFrameworks/EmailFoundation.framework/EmailFoundation: EFScheduler 
01 00 0300 /System/Library/PrivateFrameworks/Email.framework/Email: EMPersistenceLayoutManager 
01 00 0200 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationExtensionRecord 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionContext 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0100 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0100 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: _NSExtensionContextVendor 
