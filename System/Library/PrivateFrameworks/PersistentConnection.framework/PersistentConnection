|| __DATA.__objc_data _OBJC_CLASS_$_PCLogging
|| __DATA.__objc_data _OBJC_METACLASS_$_PCLogging
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCCarrierBundleHelper._bundle
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCCarrierBundleHelper._ctClient
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCCarrierBundleHelper._currentDataContext
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCCarrierBundleHelper._delegates
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCCarrierBundleHelper._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._alwaysWantsInterfaceChangeCallbacks
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._connectionClass
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._currentAddressFamily
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._currentGrowthStage
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._defaultPollingInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._delayTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._delegate
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._delegateQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._delegateRunLoop
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._deviceUnderGoodCondition
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._disableEarlyFire
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._duetContextRegistration
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._duetIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._enableNonCellularConnections
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._forceManualWhenRoaming
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._guidancePriority
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._hasStarted
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._inCallback
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._interfaceIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._intervalTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._isInReconnectMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._isReachable
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._isRunning
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._keepAliveGracePeriod
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastElapsedInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastProcessedAction
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastReachableTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastReconnectTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastResumeTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastScheduledGrowthAlgorithm
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastScheduledIntervalTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastStartTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._lastStopTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._logObject
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._minimumIntervalFallbackEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._nonCellularEarlyFireConstantInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._onTimeKeepAliveTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._onlyAllowedStyle
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._onlyAllowedStyleSet
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._operatorMinimumIntervalFallbackAllowed
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._pollingIntervalOverride
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._pollingIntervalOverrideSet
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._powerAssertionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._powerOptimizationsForExpensiveNetworkingDisabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._prefsChangedToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._prefsStyle
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._pushIsConnectedToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._reconnectIteration
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._reconnectWakeTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._reconnectWithKeepAliveDelay
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._serviceIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._timerGuidance
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._timerGuidanceToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._wifiGrowthAlgorithm
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCConnectionManager._wwanGrowthAlgorithm
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._WWANInterfaceName
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._WiFiAutoAssociationDelegates
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._WiFiAutoAssociationDisableTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._ctClient
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._ctIsWWANInHomeCountry
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._ctServerConnection
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._currentDataSimContext
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._delegatesAndQueues
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._hasWWANStatusIndicator
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._inCallWWANOverrideTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._interfaceAssertion
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isInCall
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isPowerStateDetectionSupported
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isWWANInterfaceActivationPermitted
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isWWANInterfaceDataActive
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isWWANInterfaceInProlongedHighPowerState
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isWWANInterfaceSuspended
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isWWANInterfaceUp
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isWakeOnWiFiEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._isWakeOnWiFiSupported
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._lastActivationTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._wakeOnWiFiDelegates
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentInterfaceManager._wakeOnWiFiDisableTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._disableSystemWaking
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._earlyFireConstantInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._fireTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._guidancePriority
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._logObject
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._minimumEarlyFireProportion
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._selector
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._serviceIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._simpleTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._startTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._target
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._triggerOnGMTChange
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._userInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCPersistentTimer._userVisible
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._disableSystemWaking
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._earlyFireDelta
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._fireTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._fireTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._lastUpdateTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._powerAssertionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._preventSleepTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._scheduledWakeDate
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._selector
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._serviceIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._significantTimeChangeToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._sleepIsImminent
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._startTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._target
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._timeChangeSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._timerMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._timerRunLoop
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._triggerOnGMTChange
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._userInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_PCSimpleTimer._userVisible
|| __DATA_CONST.__const _PCForceDemoMaxKeepAliveIntervalKey
|| __DATA_CONST.__const _PCForceMinKeepAliveIntervalKey
|| __DATA_CONST.__const _PCIntervalCacheAddressFamilyKey
|| __DATA_CONST.__const _PCIntervalCacheChangedNotification
|| __DATA_CONST.__const _PCIntervalCacheDateKey
|| __DATA_CONST.__const _PCIntervalCacheKeepAliveIntervalKey
|| __DATA_CONST.__const _PCPersistentConnectionBundleIdentifier
|| __DATA_CONST.__const _PCPreferencesDidChangeNotification
|| __DATA_CONST.__const _PCSettingsMobileMeOTASyncAccountIdentifier
|| __DATA_CONST.__const _PCTimerFireEarlyToCoalesceKey
|| __DATA_CONST.__const _PCWiFiInterfaceNameKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCCarrierBundleHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCConnectionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCInterfaceMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCKeepAliveState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCLog
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCPersistentInterfaceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCPersistentTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCSimpleTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCCarrierBundleHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCConnectionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCInterfaceMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCKeepAliveState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCLog
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCPersistentInterfaceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCPersistentTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCSimpleTimer
|| __TEXT.__text _PCSettingsGetClassPollInterval
|| __TEXT.__text _PCSettingsGetClassPushEnabled
|| __TEXT.__text _PCSettingsGetForceManualWhenRoamingForMCCAccount
|| __TEXT.__text _PCSettingsGetGlobalMCCForceManualWhenRoaming
|| __TEXT.__text _PCSettingsGetPollInterval
|| __TEXT.__text _PCSettingsGetStyle
|| __TEXT.__text _PCSettingsPurgeDictionariesExceptForCurrent
|| __TEXT.__text _PCSettingsSetClassPollInterval
|| __TEXT.__text _PCSettingsSetClassPushEnabled
|| __TEXT.__text _PCSettingsSetDefaultStyle
|| __TEXT.__text _PCSettingsSetForceManualWhenRoamingForMCCAccount
|| __TEXT.__text _PCSettingsSetGlobalMCCForceManualWhenRoaming
|| __TEXT.__text _PCSettingsSetStyle
|| __TEXT.__text __PCSettingsGetStyle
__ CommonUtilities: _CUTWeakLinkClass
__ CommonUtilities: _CUTWeakLinkSymbol
__ CommonUtilities: _OBJC_CLASS_$_CUTPowerMonitor
__ CommonUtilities: _OBJC_CLASS_$_CUTWeakReference
__ CommonUtilities: _OBJC_CLASS_$_CUTWiFiManager
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFCopyDescription
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyKeyList
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetMultiple
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _CFSetAddValue
__ CoreFoundation: _CFSetCreateMutable
__ CoreFoundation: _CFSetGetCount
__ CoreFoundation: _CFSetRemoveValue
__ CoreFoundation: _CFStringAppend
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateMutableCopy
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreTelephony: _CTCallGetCallSubType
__ CoreTelephony: _OBJC_CLASS_$_CTBundle
__ CoreTelephony: _OBJC_CLASS_$_CTServiceDescriptor
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreTelephony: __CTServerConnectionCreate
__ CoreTelephony: __CTServerConnectionCreateOnTargetQueue
__ CoreTelephony: __CTServerConnectionGetCDRXWithLTEState
__ CoreTelephony: __CTServerConnectionHandleReply
__ CoreTelephony: __CTServerConnectionPacketContextAssertionCreate
__ CoreTelephony: __CTServerConnectionRegisterForNotification
__ CoreTelephony: __CTServerConnectionSetTargetQueue
__ CoreTelephony: __CTServerConnectionUnregisterForNotification
__ CoreTelephony: _kCTCall
__ CoreTelephony: _kCTCallStatus
__ CoreTelephony: _kCTCallStatusChangeNotification
__ CoreTelephony: _kCTCallSubTypeThing1
__ CoreTelephony: _kCTLTEWithCDRXStateOff
__ CoreTelephony: _kCTLTEWithCDRXStateOn
__ CoreTelephony: _kCTLTEWithCDRXStateUnknown
__ Foundation: _NSLog
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRecursiveLock
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ IOKit: _IOAllowPowerChange
__ IOKit: _IODeregisterForSystemPower
__ IOKit: _IONotificationPortDestroy
__ IOKit: _IONotificationPortSetDispatchQueue
__ IOKit: _IOPMAssertionCreateWithDescription
__ IOKit: _IOPMAssertionCreateWithName
__ IOKit: _IOPMAssertionDeclareSystemActivity
__ IOKit: _IOPMAssertionRelease
__ IOKit: _IOPMCancelScheduledPowerEvent
__ IOKit: _IOPMCopyScheduledPowerEvents
__ IOKit: _IOPMRequestSysWake
__ IOKit: _IORegisterForSystemPower
__ IOKit: _IOServiceClose
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkInterfaceEntity
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemConfiguration: _SCPreferencesCreateWithAuthorization
__ SystemConfiguration: _SCPreferencesGetValue
__ SystemConfiguration: _kSCDynamicStoreDomainState
__ SystemConfiguration: _kSCEntNetLinkQuality
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _chmod
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _localtime_r
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strftime
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_array_set_uint64
__ libnetwork.dylib: _nw_interface_copy_delegate_interface
__ libnetwork.dylib: _nw_interface_get_index
__ libnetwork.dylib: _nw_interface_get_name
__ libnetwork.dylib: _nw_interface_shallow_compare
__ libnetwork.dylib: _nw_parameters_create
__ libnetwork.dylib: _nw_parameters_set_prohibited_interface_subtypes
__ libnetwork.dylib: _nw_parameters_set_prohibited_interface_types
__ libnetwork.dylib: _nw_parameters_set_required_interface_type
__ libnetwork.dylib: _nw_path_copy_interface
__ libnetwork.dylib: _nw_path_create_evaluator_for_endpoint
__ libnetwork.dylib: _nw_path_evaluator_cancel
__ libnetwork.dylib: _nw_path_evaluator_copy_path
__ libnetwork.dylib: _nw_path_evaluator_set_update_handler
__ libnetwork.dylib: _nw_path_get_reason_description
__ libnetwork.dylib: _nw_path_get_status
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _sel_getName
PCDelegateInfo : NSObject
  // instance methods
  -[PCDelegateInfo .cxx_destruct]
  -[PCDelegateInfo setQueue:]
  -[PCDelegateInfo queue]


PCPersistentInterfaceManager : NSObject <CoreTelephonyClientDataDelegate, PCInterfaceMonitorDelegate>
 @property  BOOL isPowerStateDetectionSupported
 @property  BOOL isWWANInterfaceInProlongedHighPowerState
 @property  BOOL isInCall
 @property  BOOL isWWANInterfaceActivationPermitted
 @property  BOOL areAllNetworkInterfacesDisabled
 @property  BOOL isWWANInterfaceUp
 @property  BOOL isWWANInHomeCountry
 @property  BOOL isWWANBetterThanWiFi
 @property  BOOL isWWANInterfaceSuspended
 @property  BOOL hasWWANStatusIndicator
 @property  BOOL doesWWANInterfaceExist
 @property  NSString *WWANInterfaceName
 @property  BOOL isInternetReachableViaWiFi
 @property  BOOL isWakeOnWiFiSupported
 @property  BOOL isInternetReachable
 @property  BOOL allowBindingToWWAN
 @property  NSString *currentLinkQualityString
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PCPersistentInterfaceManager sharedInstance]

  // instance methods
  -[PCPersistentInterfaceManager removeDelegate:]
  -[PCPersistentInterfaceManager addDelegate:queue:]
  -[PCPersistentInterfaceManager currentLinkQualityString]
  -[PCPersistentInterfaceManager _processCurrentDataSimChangedLocked:]
  -[PCPersistentInterfaceManager WWANInterfaceName]
  -[PCPersistentInterfaceManager _mainThreadCTConnectionAttempt]
  -[PCPersistentInterfaceManager _updateWWANInterfaceUpState]
  -[PCPersistentInterfaceManager isInCall]
  -[PCPersistentInterfaceManager _scheduleCalloutsForSelector:]
  -[PCPersistentInterfaceManager hasWWANStatusIndicator]
  -[PCPersistentInterfaceManager _updateWWANInterfaceUpStateLocked]
  -[PCPersistentInterfaceManager .cxx_destruct]
  -[PCPersistentInterfaceManager doesWWANInterfaceExist]
  -[PCPersistentInterfaceManager _isCurrentDataSimContextLocked:]
  -[PCPersistentInterfaceManager _isWiFiUsable]
  -[PCPersistentInterfaceManager interfaceReachabilityChanged:]
  -[PCPersistentInterfaceManager interfaceLinkQualityChanged:previousLinkQuality:]
  -[PCPersistentInterfaceManager isWakeOnWiFiSupported]
  -[PCPersistentInterfaceManager isWWANInterfaceActivationPermitted]
  -[PCPersistentInterfaceManager _updateWWANInterfaceAssertionsLocked]
  -[PCPersistentInterfaceManager _nonCellularMonitor]
  -[PCPersistentInterfaceManager init]
  -[PCPersistentInterfaceManager isWWANInterfaceSuspended]
  -[PCPersistentInterfaceManager _createCTConnection]
  -[PCPersistentInterfaceManager _wifiIsPoorLinkQuality]
  -[PCPersistentInterfaceManager _adjustWiFiAutoAssociationLocked]
  -[PCPersistentInterfaceManager isWWANInterfaceInProlongedHighPowerState]
  -[PCPersistentInterfaceManager _isWWANInHomeCountryLocked]
  -[PCPersistentInterfaceManager connectionStateChanged:connection:dataConnectionStatusInfo:]
  -[PCPersistentInterfaceManager _inCallWWANOverrideTimerFired]
  -[PCPersistentInterfaceManager dataStatus:dataStatusInfo:]
  -[PCPersistentInterfaceManager _processCallStatusChanged:]
  -[PCPersistentInterfaceManager handleMachMessage:]
  -[PCPersistentInterfaceManager _wantsWakeOnWiFiEnabled]
  -[PCPersistentInterfaceManager _ctConnectionAttempt]
  -[PCPersistentInterfaceManager enableWakeOnWiFi:forDelegate:]
  -[PCPersistentInterfaceManager _processConnectionStatusLocked:]
  -[PCPersistentInterfaceManager isWWANInterfaceUp]
  -[PCPersistentInterfaceManager _processDataStatusLocked:]
  -[PCPersistentInterfaceManager _wwanIsPoorLinkQuality]
  -[PCPersistentInterfaceManager isWWANInHomeCountry]
  -[PCPersistentInterfaceManager _isCellularCall:]
  -[PCPersistentInterfaceManager _updateWWANInterfaceAssertions]
  -[PCPersistentInterfaceManager _adjustWakeOnWiFiLocked]
  -[PCPersistentInterfaceManager isPowerStateDetectionSupported]
  -[PCPersistentInterfaceManager _clearInCallWWANOverrideTimerLocked]
  -[PCPersistentInterfaceManager allowBindingToWWAN]
  -[PCPersistentInterfaceManager connectionActivationError:connection:error:]
  -[PCPersistentInterfaceManager dealloc]
  -[PCPersistentInterfaceManager isWWANBetterThanWiFi]
  -[PCPersistentInterfaceManager cutWiFiManagerDeviceAttached:]
  -[PCPersistentInterfaceManager isInternetReachable]
  -[PCPersistentInterfaceManager _wantsWWANInterfaceAssertion]
  -[PCPersistentInterfaceManager currentDataSimChanged:]
  -[PCPersistentInterfaceManager _adjustWiFiAutoAssociation]
  -[PCPersistentInterfaceManager _isInternetReachableLocked]
  -[PCPersistentInterfaceManager areAllNetworkInterfacesDisabled]
  -[PCPersistentInterfaceManager isInternetReachableViaWiFi]
  -[PCPersistentInterfaceManager _adjustWakeOnWiFi]
  -[PCPersistentInterfaceManager enableWiFiAutoAssociation:forDelegate:]
  -[PCPersistentInterfaceManager _updateCTIsWWANInHomeCountry:isWWANInterfaceDataActive:]


PCMultiStageGrowthAlgorithm : NSObject <PCGrowthAlgorithm>
 @property  int previousAction
 @property  double currentKeepAliveInterval
 @property  BOOL isServerOriginatedKeepAlive
 @property  double minimumKeepAliveInterval
 @property  double maximumKeepAliveInterval
 @property  double serverStatsExpectedKeepAliveInterval
 @property  double serverStatsMaxKeepAliveInterval
 @property  double serverStatsMinKeepAliveInterval
 @property  double lastSuccessfulKeepAliveInterval
 @property  BOOL minimumIntervalFallbackEnabled
 @property  BOOL usingServerStatsAggressively
 @property  double minimumIntervalFallbackStateTimeout
 @property  unsigned long countOfGrowthActions
 @property  {_PCTimeRange=dd} signalAvoidanceRange
 @property  NSDictionary *cacheInfo
 @property  int growthStage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PCMultiStageGrowthAlgorithm _loadDefaultValue:forKey:]
  +[PCMultiStageGrowthAlgorithm _loadDefaults]

  // instance methods
  -[PCMultiStageGrowthAlgorithm useIntervalIfImprovement:]
  -[PCMultiStageGrowthAlgorithm _stringForStage:]
  -[PCMultiStageGrowthAlgorithm previousAction]
  -[PCMultiStageGrowthAlgorithm usingServerStatsAggressively]
  -[PCMultiStageGrowthAlgorithm serverStatsMaxKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm minimumKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm _processInitialShrinkAction:]
  -[PCMultiStageGrowthAlgorithm _fallbackToLastSuccessfulKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm setServerStatsExpectedKeepAliveInterval:]
  -[PCMultiStageGrowthAlgorithm processNextAction:]
  -[PCMultiStageGrowthAlgorithm .cxx_destruct]
  -[PCMultiStageGrowthAlgorithm cacheInfo]
  -[PCMultiStageGrowthAlgorithm setMinimumKeepAliveInterval:]
  -[PCMultiStageGrowthAlgorithm isServerOriginatedKeepAlive]
  -[PCMultiStageGrowthAlgorithm initWithCacheInfo:loggingIdentifier:algorithmName:]
  -[PCMultiStageGrowthAlgorithm setMinimumIntervalFallbackEnabled:]
  -[PCMultiStageGrowthAlgorithm minimumIntervalFallbackEnabled]
  -[PCMultiStageGrowthAlgorithm currentKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm setSignalAvoidanceRange:]
  -[PCMultiStageGrowthAlgorithm setServerStatsMinKeepAliveInterval:]
  -[PCMultiStageGrowthAlgorithm setMaximumKeepAliveInterval:]
  -[PCMultiStageGrowthAlgorithm _processSteadyStateAction:]
  -[PCMultiStageGrowthAlgorithm _processBackoffAction:]
  -[PCMultiStageGrowthAlgorithm setMinimumIntervalFallbackStateTimeout:]
  -[PCMultiStageGrowthAlgorithm setServerStatsMaxKeepAliveInterval:]
  -[PCMultiStageGrowthAlgorithm countOfGrowthActions]
  -[PCMultiStageGrowthAlgorithm _processInitialGrowthAction:]
  -[PCMultiStageGrowthAlgorithm _stringForMode:]
  -[PCMultiStageGrowthAlgorithm serverStatsExpectedKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm lastSuccessfulKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm _setCurrentKeepAliveInterval:varianceMode:]
  -[PCMultiStageGrowthAlgorithm _resetAlgorithmToInterval:]
  -[PCMultiStageGrowthAlgorithm serverStatsMinKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm maximumKeepAliveInterval]
  -[PCMultiStageGrowthAlgorithm _adjustGrowthAlgorithmMode]
  -[PCMultiStageGrowthAlgorithm _steadyStateTimeout]
  -[PCMultiStageGrowthAlgorithm setLastSuccessfulKeepAliveInterval:]
  -[PCMultiStageGrowthAlgorithm _processMinimumIntervalFallbackStateAction:]
  -[PCMultiStageGrowthAlgorithm signalAvoidanceRange]
  -[PCMultiStageGrowthAlgorithm setIsServerOriginatedKeepAlive:]
  -[PCMultiStageGrowthAlgorithm setPreviousAction:]
  -[PCMultiStageGrowthAlgorithm _processRefinedShrinkAction:]
  -[PCMultiStageGrowthAlgorithm _stringForAction:]
  -[PCMultiStageGrowthAlgorithm setUsingServerStatsAggressively:]
  -[PCMultiStageGrowthAlgorithm _processRefinedGrowthAction:]
  -[PCMultiStageGrowthAlgorithm minimumIntervalFallbackStateTimeout]
  -[PCMultiStageGrowthAlgorithm _setCurrentKeepAliveInterval:varianceMode:allowRoundUp:]
  -[PCMultiStageGrowthAlgorithm _resetAlgorithmToInterval:stage:]
  -[PCMultiStageGrowthAlgorithm growthStage]


PCPersistentTimer : NSObject <CUTPowerMonitorDelegate>
 @property  double minimumEarlyFireProportion
 @property  double earlyFireConstantInterval
 @property  BOOL disableSystemWaking
 @property  BOOL userVisible
 @property  double fireTime
 @property  double startTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PCPersistentTimer currentMachTimeInterval]
  +[PCPersistentTimer _currentGuidanceTime]
  +[PCPersistentTimer _updateTime:forGuidancePriority:]
  +[PCPersistentTimer _backgroundUpdateQueue]
  +[PCPersistentTimer lastSystemWakeDate]

  // instance methods
  -[PCPersistentTimer scheduleInRunLoop:]
  -[PCPersistentTimer firingIsImminent]
  -[PCPersistentTimer setMinimumEarlyFireProportion:]
  -[PCPersistentTimer interfaceManagerInternetReachabilityChanged:]
  -[PCPersistentTimer scheduleInQueue:]
  -[PCPersistentTimer _initWithAbsoluteTime:serviceIdentifier:guidancePriority:target:selector:userInfo:triggerOnGMTChange:]
  -[PCPersistentTimer isValid]
  -[PCPersistentTimer minimumEarlyFireProportion]
  -[PCPersistentTimer .cxx_destruct]
  -[PCPersistentTimer fireTime]
  -[PCPersistentTimer _earlyFireTime]
  -[PCPersistentTimer interfaceManagerWWANInterfaceStatusChanged:]
  -[PCPersistentTimer cutPowerMonitorBatteryConnectedStateDidChange:]
  -[PCPersistentTimer _fireTimerFired]
  -[PCPersistentTimer _updateTimers]
  -[PCPersistentTimer earlyFireConstantInterval]
  -[PCPersistentTimer isUserVisible]
  -[PCPersistentTimer startTime]
  -[PCPersistentTimer initWithTimeInterval:serviceIdentifier:guidancePriority:target:selector:userInfo:]
  -[PCPersistentTimer _nextForcedAlignmentAbsoluteTime]
  -[PCPersistentTimer disableSystemWaking]
  -[PCPersistentTimer setDisableSystemWaking:]
  -[PCPersistentTimer setEarlyFireConstantInterval:]
  -[PCPersistentTimer initWithFireDate:serviceIdentifier:target:selector:userInfo:]
  -[PCPersistentTimer userInfo]
  -[PCPersistentTimer initWithTimeInterval:serviceIdentifier:target:selector:userInfo:]
  -[PCPersistentTimer dealloc]
  -[PCPersistentTimer interfaceManagerWWANInterfaceChangedPowerState:]
  -[PCPersistentTimer setUserVisible:]
  -[PCPersistentTimer invalidate]
  -[PCPersistentTimer scheduleInRunLoop:inMode:]


PCKeepAliveState : NSObject
 @property  unsigned char state
 @property  unsigned char subState

  // instance methods
  -[PCKeepAliveState initWithKeepAliveState:subState:]
  -[PCKeepAliveState setState:]
  -[PCKeepAliveState setSubState:]
  -[PCKeepAliveState state]
  -[PCKeepAliveState subState]


PCConnectionManager : NSObject <PCCarrierBundleHelperDelegate, PCInterfaceMonitorDelegate>
 @property  <PCConnectionManagerDelegate> *delegate
 @property  NSString *duetIdentifier
 @property  BOOL isRunning
 @property  double currentKeepAliveInterval
 @property  double minimumKeepAliveInterval
 @property  double maximumKeepAliveInterval
 @property  PCKeepAliveState *currentKeepAliveState
 @property  double serverStatsMaxKeepAliveInterval
 @property  double serverStatsExpectedKeepAliveInterval
 @property  double serverStatsMinKeepAliveInterval
 @property  BOOL usingServerStatsAggressively
 @property  unsigned long countOfGrowthActions
 @property  BOOL disableEarlyFire
 @property  BOOL minimumIntervalFallbackEnabled
 @property  long long interfaceIdentifier
 @property  BOOL alwaysWantsInterfaceChangeCallbacks
 @property  BOOL powerOptimizationsForExpensiveNetworkingDisabled
 @property  int currentAddressFamily
 @property  int lastProcessedAction
 @property  double keepAliveGracePeriod
 @property  double nonCellularEarlyFireConstantInterval
 @property  double pollingInterval
 @property  int currentGrowthStage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PCConnectionManager _isCachedKeepAliveIntervalStillValid:date:]
  +[PCConnectionManager growthAlgorithmClass]
  +[PCConnectionManager _keepAliveCachePath]
  +[PCConnectionManager intervalCacheDictionaries]

  // instance methods
  -[PCConnectionManager interfaceIdentifier]
  -[PCConnectionManager setAlwaysWantsInterfaceChangeCallbacks:]
  -[PCConnectionManager disableEarlyFire]
  -[PCConnectionManager resumeManagerWithAction:]
  -[PCConnectionManager operatorMinimumIntervalFallbackAllowed]
  -[PCConnectionManager usingServerStatsAggressively]
  -[PCConnectionManager alwaysWantsInterfaceChangeCallbacks]
  -[PCConnectionManager currentStyle]
  -[PCConnectionManager _loadPreferencesGeneratingEvent:]
  -[PCConnectionManager _adjustPollTimerIfNecessary]
  -[PCConnectionManager serverStatsMaxKeepAliveInterval]
  -[PCConnectionManager _stringForAddressFamily:]
  -[PCConnectionManager _growthAlgorithmOnInterface:]
  -[PCConnectionManager interfaceManagerInternetReachabilityChanged:]
  -[PCConnectionManager minimumKeepAliveInterval]
  -[PCConnectionManager setServerStatsExpectedKeepAliveInterval:]
  -[PCConnectionManager initWithConnectionClass:delegate:delegateQueue:serviceIdentifier:]
  -[PCConnectionManager _handleDeviceConditionChangeCallback]
  -[PCConnectionManager currentKeepAliveState]
  -[PCConnectionManager _takePowerAssertionWithTimeout:]
  -[PCConnectionManager interfaceManagerInHomeCountryStatusChanged:]
  -[PCConnectionManager _releasePowerAssertion]
  -[PCConnectionManager .cxx_destruct]
  -[PCConnectionManager _initWithConnectionClass:interfaceIdentifier:guidancePriority:delegate:delegateQueue:serviceIdentifier:]
  -[PCConnectionManager setMinimumKeepAliveInterval:]
  -[PCConnectionManager isRunning]
  -[PCConnectionManager _preferencesChanged]
  -[PCConnectionManager _registerForDeviceConditionsNotifications]
  -[PCConnectionManager _deregisterForDeviceConditionsNotifications]
  -[PCConnectionManager setNonCellularEarlyFireConstantInterval:]
  -[PCConnectionManager _calloutWithEvent:context:]
  -[PCConnectionManager interfaceManagerWWANInterfaceStatusChanged:]
  -[PCConnectionManager _setMinimumKeepAliveInterval:onInterface:]
  -[PCConnectionManager currentAddressFamily]
  -[PCConnectionManager setDelegate:]
  -[PCConnectionManager setMinimumIntervalFallbackEnabled:]
  -[PCConnectionManager interfaceLinkQualityChanged:previousLinkQuality:]
  -[PCConnectionManager _validateActionForCurrentStyle:]
  -[PCConnectionManager minimumIntervalFallbackEnabled]
  -[PCConnectionManager currentKeepAliveInterval]
  -[PCConnectionManager _stringForEvent:]
  -[PCConnectionManager setKeepAliveOverrideOnInterface:interval:timeout:]
  -[PCConnectionManager _clearTimers]
  -[PCConnectionManager setServerStatsMinKeepAliveInterval:]
  -[PCConnectionManager setOperatorMinimumIntervalFallbackAllowed:]
  -[PCConnectionManager initWithConnectionClass:delegate:serviceIdentifier:]
  -[PCConnectionManager shouldClientScheduleReconnectDueToFailure]
  -[PCConnectionManager resumeManagerWithAction:forceGrow:]
  -[PCConnectionManager setDisableEarlyFire:]
  -[PCConnectionManager setMaximumKeepAliveInterval:]
  -[PCConnectionManager _clearTimersReleasingPowerAssertion:]
  -[PCConnectionManager cancelPollingIntervalOverride]
  -[PCConnectionManager setCurrentAddressFamily:]
  -[PCConnectionManager _hasBudgetRemaining]
  -[PCConnectionManager initWithConnectionClass:interfaceIdentifier:guidancePriority:delegate:serviceIdentifier:]
  -[PCConnectionManager _adjustInterfaceAssertions]
  -[PCConnectionManager _callDelegateWithEventAndContext:]
  -[PCConnectionManager _setupTimerForPushWithKeepAliveInterval:]
  -[PCConnectionManager powerOptimizationsForExpensiveNetworkingDisabled]
  -[PCConnectionManager setDuetIdentifier:]
  -[PCConnectionManager setServerStatsMaxKeepAliveInterval:]
  -[PCConnectionManager stopAndResetManager]
  -[PCConnectionManager _intervalTimerFired]
  -[PCConnectionManager countOfGrowthActions]
  -[PCConnectionManager _setTimerGuidance:]
  -[PCConnectionManager _isPushConnected]
  -[PCConnectionManager nonCellularEarlyFireConstantInterval]
  -[PCConnectionManager currentGrowthStage]
  -[PCConnectionManager serverStatsExpectedKeepAliveInterval]
  -[PCConnectionManager setKeepAliveGracePeriod:]
  -[PCConnectionManager stopManager]
  -[PCConnectionManager startManager]
  -[PCConnectionManager _pauseTimers]
  -[PCConnectionManager delegate]
  -[PCConnectionManager _saveWWANKeepAliveInterval]
  -[PCConnectionManager setInterfaceIdentifier:]
  -[PCConnectionManager setPowerOptimizationsForExpensiveNetworkingDisabled:]
  -[PCConnectionManager _adjustMinimumIntervalFallback]
  -[PCConnectionManager serverStatsMinKeepAliveInterval]
  -[PCConnectionManager carrierBundleDidChange]
  -[PCConnectionManager maximumKeepAliveInterval]
  -[PCConnectionManager lastProcessedAction]
  -[PCConnectionManager dealloc]
  -[PCConnectionManager setOnlyAllowedStyle:]
  -[PCConnectionManager setEnableNonCellularConnections:]
  -[PCConnectionManager _getCachedWWANKeepAliveIntervalForAddressFamily:]
  -[PCConnectionManager duetIdentifier]
  -[PCConnectionManager _currentGrowthAlgorithm]
  -[PCConnectionManager _setMaximumKeepAliveInterval:onInterface:]
  -[PCConnectionManager _setupKeepAliveForReconnect]
  -[PCConnectionManager persistentInterfaceManager]
  -[PCConnectionManager _stringForAction:]
  -[PCConnectionManager setPollingIntervalOverride:]
  -[PCConnectionManager _stringForStyle:]
  -[PCConnectionManager _resolveStateWithAction:]
  -[PCConnectionManager pollingInterval]
  -[PCConnectionManager _delayTimerFired]
  -[PCConnectionManager setUsingServerStatsAggressively:]
  -[PCConnectionManager keepAliveGracePeriod]
  -[PCConnectionManager _processDeviceConditionChanges]
  -[PCConnectionManager _setupTimerForPollForAdjustment:]


PCSystemWakeManager : NSObject
  // class methods
  +[PCSystemWakeManager scheduleWake:wakeDate:acceptableDelay:userVisible:serviceIdentifier:uniqueIdentifier:]


PCScheduleSystemWakeOperation : NSOperation
  // instance methods
  -[PCScheduleSystemWakeOperation initForScheduledWake:wakeDate:acceptableDelay:userVisible:serviceIdentifier:uniqueIdentifier:]
  -[PCScheduleSystemWakeOperation main]
  -[PCScheduleSystemWakeOperation .cxx_destruct]


PCCancelAllProcessWakesOperation : NSOperation
  // instance methods
  -[PCCancelAllProcessWakesOperation main]


PCPersistentIdentifiers : NSObject
  // class methods
  +[PCPersistentIdentifiers hostUniqueIdentifier]
  +[PCPersistentIdentifiers processNameAndPidIdentifier]
  +[PCPersistentIdentifiers processNamePidAndStringIdentifier:]
  +[PCPersistentIdentifiers _processNamePrefix]
  +[PCPersistentIdentifiers pidFromMatchingIdentifer:]


PCDistributedLock : NSObject <NSLocking>
  // instance methods
  -[PCDistributedLock unlock]
  -[PCDistributedLock initWithPath:]
  -[PCDistributedLock .cxx_destruct]
  -[PCDistributedLock initWithName:]
  -[PCDistributedLock dealloc]
  -[PCDistributedLock tryLock]
  -[PCDistributedLock lock]
  -[PCDistributedLock _lockBlocking:]


PCInterfaceUsabilityMonitor : NSObject <PCInterfaceUsabilityMonitorProtocol>
 @property  BOOL isRadioHot
 @property  <PCInterfaceUsabilityMonitorDelegate> *delegate
 @property  long long interfaceIdentifier
 @property  int linkQuality
 @property  BOOL isInterfaceUsable
 @property  BOOL isInterfaceHistoricallyUsable
 @property  BOOL isInternetReachable
 @property  NSString *linkQualityString
 @property  BOOL isPoorLinkQuality
 @property  BOOL isBadLinkQuality
 @property  BOOL isNetworkingPowerExpensiveToUse
 @property  int currentRAT
 @property  BOOL isLTEWithCDRX
 @property  unsigned long interface5GMode
 @property  ^{__CFString=} wwanInterfaceName
 @property  NSString *networkCode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PCInterfaceUsabilityMonitor isPoorLinkQuality:]
  +[PCInterfaceUsabilityMonitor isBadLinkQuality:]
  +[PCInterfaceUsabilityMonitor stringForLinkQuality:]

  // instance methods
  -[PCInterfaceUsabilityMonitor isRadioHot]
  -[PCInterfaceUsabilityMonitor interfaceIdentifier]
  -[PCInterfaceUsabilityMonitor _dynamicStoreCallbackForKeys:]
  -[PCInterfaceUsabilityMonitor _flushStaleTransitions]
  -[PCInterfaceUsabilityMonitor _isInterfaceHistoricallyUsable]
  -[PCInterfaceUsabilityMonitor _updateOffTransitionsForLinkQualityChange]
  -[PCInterfaceUsabilityMonitor .cxx_destruct]
  -[PCInterfaceUsabilityMonitor setThresholdOffTransitionCount:]
  -[PCInterfaceUsabilityMonitor _dynamicStoreCallback:]
  -[PCInterfaceUsabilityMonitor linkQuality]
  -[PCInterfaceUsabilityMonitor _processLinkQualityUpdateWithChangedKey:updatedLinkQuality:]
  -[PCInterfaceUsabilityMonitor linkQualityString]
  -[PCInterfaceUsabilityMonitor setDelegate:]
  -[PCInterfaceUsabilityMonitor _callDelegateWithBlock:]
  -[PCInterfaceUsabilityMonitor init]
  -[PCInterfaceUsabilityMonitor isNetworkingPowerExpensiveToUse]
  -[PCInterfaceUsabilityMonitor _pathUpdate:]
  -[PCInterfaceUsabilityMonitor isInterfaceUsable]
  -[PCInterfaceUsabilityMonitor setTrackUsability:]
  -[PCInterfaceUsabilityMonitor isPoorLinkQuality]
  -[PCInterfaceUsabilityMonitor isBadLinkQuality]
  -[PCInterfaceUsabilityMonitor isInterfaceHistoricallyUsable]
  -[PCInterfaceUsabilityMonitor _unscheduleLinkQualityMonitor]
  -[PCInterfaceUsabilityMonitor delegate]
  -[PCInterfaceUsabilityMonitor initWithInterfaceIdentifier:delegateQueue:]
  -[PCInterfaceUsabilityMonitor currentInterfaceName]
  -[PCInterfaceUsabilityMonitor _unschedulePathEvaluator]
  -[PCInterfaceUsabilityMonitor dealloc]
  -[PCInterfaceUsabilityMonitor isInternetReachable]
  -[PCInterfaceUsabilityMonitor _createPathEvaluator]
  -[PCInterfaceUsabilityMonitor setTrackedTimeInterval:]
  -[PCInterfaceUsabilityMonitor _createLinkQualityMonitor:]
  -[PCInterfaceUsabilityMonitor _updatePathParameters]
  -[PCInterfaceUsabilityMonitor _isInterfaceUsable]


PCNonCellularUsabilityMonitor : NSObject <PCInterfaceUsabilityMonitorProtocol, PCInterfaceUsabilityMonitorDelegate>
 @property  BOOL isRadioHot
 @property  <PCInterfaceUsabilityMonitorDelegate> *delegate
 @property  long long interfaceIdentifier
 @property  int linkQuality
 @property  BOOL isInterfaceUsable
 @property  BOOL isInterfaceHistoricallyUsable
 @property  BOOL isInternetReachable
 @property  NSString *linkQualityString
 @property  BOOL isPoorLinkQuality
 @property  BOOL isBadLinkQuality
 @property  BOOL isNetworkingPowerExpensiveToUse
 @property  int currentRAT
 @property  BOOL isLTEWithCDRX
 @property  unsigned long interface5GMode
 @property  ^{__CFString=} wwanInterfaceName
 @property  NSString *networkCode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[PCNonCellularUsabilityMonitor isRadioHot]
  -[PCNonCellularUsabilityMonitor interfaceIdentifier]
  -[PCNonCellularUsabilityMonitor _addMonitor]
  -[PCNonCellularUsabilityMonitor .cxx_destruct]
  -[PCNonCellularUsabilityMonitor setThresholdOffTransitionCount:]
  -[PCNonCellularUsabilityMonitor linkQuality]
  -[PCNonCellularUsabilityMonitor interfaceReachabilityChanged:]
  -[PCNonCellularUsabilityMonitor linkQualityString]
  -[PCNonCellularUsabilityMonitor setDelegate:]
  -[PCNonCellularUsabilityMonitor interfaceLinkQualityChanged:previousLinkQuality:]
  -[PCNonCellularUsabilityMonitor _callDelegateOnIvarQueueWithBlock:]
  -[PCNonCellularUsabilityMonitor isNetworkingPowerExpensiveToUse]
  -[PCNonCellularUsabilityMonitor isInterfaceUsable]
  -[PCNonCellularUsabilityMonitor setTrackUsability:]
  -[PCNonCellularUsabilityMonitor isPoorLinkQuality]
  -[PCNonCellularUsabilityMonitor isBadLinkQuality]
  -[PCNonCellularUsabilityMonitor _linkQualityOnIvarQueue]
  -[PCNonCellularUsabilityMonitor isInterfaceHistoricallyUsable]
  -[PCNonCellularUsabilityMonitor initWithDelegateQueue:]
  -[PCNonCellularUsabilityMonitor delegate]
  -[PCNonCellularUsabilityMonitor dealloc]
  -[PCNonCellularUsabilityMonitor isInternetReachable]
  -[PCNonCellularUsabilityMonitor setTrackedTimeInterval:]
  -[PCNonCellularUsabilityMonitor _forwardConfigurationOnIvarQueue]


PCWWANUsabilityMonitor : NSObject <CoreTelephonyClientDataDelegate, PCInterfaceUsabilityMonitorProtocol, PCInterfaceUsabilityMonitorDelegate>
 @property  int currentRAT
 @property  BOOL isLTEWithCDRX
 @property  unsigned long interface5GMode
 @property  ^{__CFString=} wwanInterfaceName
 @property  NSString *networkCode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isRadioHot
 @property  <PCInterfaceUsabilityMonitorDelegate> *delegate
 @property  long long interfaceIdentifier
 @property  int linkQuality
 @property  BOOL isInterfaceUsable
 @property  BOOL isInterfaceHistoricallyUsable
 @property  BOOL isInternetReachable
 @property  NSString *linkQualityString
 @property  BOOL isPoorLinkQuality
 @property  BOOL isBadLinkQuality
 @property  BOOL isNetworkingPowerExpensiveToUse

  // instance methods
  -[PCWWANUsabilityMonitor isRadioHot]
  -[PCWWANUsabilityMonitor interfaceIdentifier]
  -[PCWWANUsabilityMonitor isLTEWithCDRX]
  -[PCWWANUsabilityMonitor currentRAT]
  -[PCWWANUsabilityMonitor _adjustInterfaceNameForWWANContextID:interfaceName:forContext:]
  -[PCWWANUsabilityMonitor .cxx_destruct]
  -[PCWWANUsabilityMonitor setThresholdOffTransitionCount:]
  -[PCWWANUsabilityMonitor linkQuality]
  -[PCWWANUsabilityMonitor interfaceReachabilityChanged:]
  -[PCWWANUsabilityMonitor linkQualityString]
  -[PCWWANUsabilityMonitor _setupWWANMonitor]
  -[PCWWANUsabilityMonitor setDelegate:]
  -[PCWWANUsabilityMonitor interfaceLinkQualityChanged:previousLinkQuality:]
  -[PCWWANUsabilityMonitor _callDelegateOnIvarQueueWithBlock:]
  -[PCWWANUsabilityMonitor _currentDataSimContext]
  -[PCWWANUsabilityMonitor isNetworkingPowerExpensiveToUse]
  -[PCWWANUsabilityMonitor wwanInterfaceName]
  -[PCWWANUsabilityMonitor isInterfaceUsable]
  -[PCWWANUsabilityMonitor setTrackUsability:]
  -[PCWWANUsabilityMonitor isPoorLinkQuality]
  -[PCWWANUsabilityMonitor isBadLinkQuality]
  -[PCWWANUsabilityMonitor connectionStateChanged:connection:dataConnectionStatusInfo:]
  -[PCWWANUsabilityMonitor dataStatus:dataStatusInfo:]
  -[PCWWANUsabilityMonitor isInterfaceHistoricallyUsable]
  -[PCWWANUsabilityMonitor _processCallStatusChanged:]
  -[PCWWANUsabilityMonitor _processDataConnectionStatus:forContext:]
  -[PCWWANUsabilityMonitor networkCode]
  -[PCWWANUsabilityMonitor initWithDelegateQueue:]
  -[PCWWANUsabilityMonitor delegate]
  -[PCWWANUsabilityMonitor interface5GMode]
  -[PCWWANUsabilityMonitor _isCurrentDataSimContextOnIvarQueue:]
  -[PCWWANUsabilityMonitor dealloc]
  -[PCWWANUsabilityMonitor isInternetReachable]
  -[PCWWANUsabilityMonitor currentDataSimChanged:]
  -[PCWWANUsabilityMonitor _processDataStatus:forContext:]
  -[PCWWANUsabilityMonitor setTrackedTimeInterval:]
  -[PCWWANUsabilityMonitor _forwardConfigurationOnIvarQueue]


PCInterfaceMonitor : NSObject <PCInterfaceUsabilityMonitorDelegate, PCInterfaceMonitorProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long interfaceIdentifier
 @property  int linkQuality
 @property  BOOL isInterfaceUsable
 @property  BOOL isInterfaceHistoricallyUsable
 @property  BOOL isInternetReachable
 @property  NSString *linkQualityString
 @property  BOOL isPoorLinkQuality
 @property  BOOL isBadLinkQuality
 @property  BOOL isRadioHot
 @property  BOOL isNetworkingPowerExpensiveToUse
 @property  int currentRAT
 @property  BOOL isLTEWithCDRX
 @property  unsigned long interface5GMode
 @property  ^{__CFString=} wwanInterfaceName
 @property  NSString *networkCode

  // class methods
  +[PCInterfaceMonitor sharedInstanceForIdentifier:]
  +[PCInterfaceMonitor isPoorLinkQuality:]
  +[PCInterfaceMonitor isNetworkingPowerExpensiveToUse]
  +[PCInterfaceMonitor isBadLinkQuality:]
  +[PCInterfaceMonitor stringForLinkQuality:]

  // instance methods
  -[PCInterfaceMonitor removeDelegate:]
  -[PCInterfaceMonitor isRadioHot]
  -[PCInterfaceMonitor interfaceIdentifier]
  -[PCInterfaceMonitor addDelegate:queue:]
  -[PCInterfaceMonitor isLTEWithCDRX]
  -[PCInterfaceMonitor initWithInterfaceIdentifier:]
  -[PCInterfaceMonitor currentRAT]
  -[PCInterfaceMonitor .cxx_destruct]
  -[PCInterfaceMonitor interfaceRadioHotnessChanged:]
  -[PCInterfaceMonitor linkQuality]
  -[PCInterfaceMonitor interfaceReachabilityChanged:]
  -[PCInterfaceMonitor linkQualityString]
  -[PCInterfaceMonitor interfaceLinkQualityChanged:previousLinkQuality:]
  -[PCInterfaceMonitor isNetworkingPowerExpensiveToUse]
  -[PCInterfaceMonitor wwanInterfaceName]
  -[PCInterfaceMonitor isInterfaceUsable]
  -[PCInterfaceMonitor isPoorLinkQuality]
  -[PCInterfaceMonitor isBadLinkQuality]
  -[PCInterfaceMonitor isInterfaceHistoricallyUsable]
  -[PCInterfaceMonitor networkCode]
  -[PCInterfaceMonitor interface5GMode]
  -[PCInterfaceMonitor dealloc]
  -[PCInterfaceMonitor isInternetReachable]


PCCarrierBundleHelper : NSObject <CoreTelephonyClientDataDelegate, CoreTelephonyClientCarrierBundleDelegate>
 @property  NSDictionary *cachedPushSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[PCCarrierBundleHelper helper]

  // instance methods
  -[PCCarrierBundleHelper removeDelegate:]
  -[PCCarrierBundleHelper copyValueFromPushBundleForKey:error:]
  -[PCCarrierBundleHelper .cxx_destruct]
  -[PCCarrierBundleHelper init]
  -[PCCarrierBundleHelper copyValueForKey:error:]
  -[PCCarrierBundleHelper boolValueFromPushBundleForKey:error:]
  -[PCCarrierBundleHelper _updateCurrentDataSimContext:]
  -[PCCarrierBundleHelper setCachedPushSettings:]
  -[PCCarrierBundleHelper currentDataSimChanged:]
  -[PCCarrierBundleHelper _processCarrierBundleChange:]
  -[PCCarrierBundleHelper cachedPushSettings]
  -[PCCarrierBundleHelper addDelegate:]
  -[PCCarrierBundleHelper operatorBundleChange:]


PCLog : NSObject
  // class methods
  +[PCLog interfaceManager]
  +[PCLog timer]
  +[PCLog usabilityMonitor]
  +[PCLog logWithCategory:]
  +[PCLog wakeManager]


PCLogging : NSObject
  // class methods
  +[PCLogging logFileDirectory]


PCSimpleTimer : NSObject
 @property  BOOL disableSystemWaking
 @property  BOOL userVisible

  // class methods
  +[PCSimpleTimer currentMachTimeInterval]
  +[PCSimpleTimer lastSystemWakeDate]

  // instance methods
  -[PCSimpleTimer scheduleInRunLoop:]
  -[PCSimpleTimer firingIsImminent]
  -[PCSimpleTimer scheduleInQueue:]
  -[PCSimpleTimer isValid]
  -[PCSimpleTimer _preventSleepFired]
  -[PCSimpleTimer .cxx_destruct]
  -[PCSimpleTimer _invalidateAllowAsync:]
  -[PCSimpleTimer _significantTimeChange]
  -[PCSimpleTimer initWithAbsoluteTime:serviceIdentifier:target:selector:userInfo:triggerOnGMTChange:]
  -[PCSimpleTimer _fireTimerFired]
  -[PCSimpleTimer _updateTimers]
  -[PCSimpleTimer _setPowerMonitoringEnabled:]
  -[PCSimpleTimer _scheduleTimer]
  -[PCSimpleTimer _setSignificantTimeChangeMonitoringEnabled:]
  -[PCSimpleTimer isUserVisible]
  -[PCSimpleTimer disableSystemWaking]
  -[PCSimpleTimer setDisableSystemWaking:]
  -[PCSimpleTimer updateFireTime:triggerOnGMTChange:]
  -[PCSimpleTimer initWithFireDate:serviceIdentifier:target:selector:userInfo:]
  -[PCSimpleTimer userInfo]
  -[PCSimpleTimer initWithTimeInterval:serviceIdentifier:target:selector:userInfo:]
  -[PCSimpleTimer dealloc]
  -[PCSimpleTimer setUserVisible:]
  -[PCSimpleTimer invalidate]
  -[PCSimpleTimer _getTimerMode]
  -[PCSimpleTimer _performBlockOnQueue:]
  -[PCSimpleTimer _getTimerRunLoop]
  -[PCSimpleTimer scheduleInRunLoop:inMode:]
  -[PCSimpleTimer _powerNotificationSleepIsNotImminent]
  -[PCSimpleTimer _powerNotificationSleepIsImminent]


PCDispatchTimer : NSObject
 @property  BOOL isValid
 @property  NSDate *fireDate

  // instance methods
  -[PCDispatchTimer setFireDate:]
  -[PCDispatchTimer isValid]
  -[PCDispatchTimer .cxx_destruct]
  -[PCDispatchTimer _callTarget]
  -[PCDispatchTimer fireDate]
  -[PCDispatchTimer start]
  -[PCDispatchTimer dealloc]
  -[PCDispatchTimer invalidate]
  -[PCDispatchTimer initWithQueue:target:selector:fireTime:]
  -[PCDispatchTimer _cleanupTimer]


01 00 0100 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTBundle 
01 00 0100 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTServiceDescriptor 
01 00 0400 /System/Library/PrivateFrameworks/CommonUtilities.framework/CommonUtilities: CUTPowerMonitor 
01 00 0400 /System/Library/PrivateFrameworks/CommonUtilities.framework/CommonUtilities: CUTWeakReference 
01 00 0400 /System/Library/PrivateFrameworks/CommonUtilities.framework/CommonUtilities: CUTWiFiManager 
01 00 0100 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0900 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSRecursiveLock 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
