|| __DATA.__objc_data _OBJC_CLASS_$_ANAnalyticsContext
|| __DATA.__objc_data _OBJC_CLASS_$_ANAnalyticsCounter
|| __DATA.__objc_data _OBJC_CLASS_$_ANAnalyticsDailyAnnouncements
|| __DATA.__objc_data _OBJC_CLASS_$_ANAnalyticsGroup
|| __DATA.__objc_data _OBJC_CLASS_$_ANAnchorTrackPlayer
|| __DATA.__objc_data _OBJC_CLASS_$_ANAnnounceReachabilityManager
|| __DATA.__objc_data _OBJC_CLASS_$_ANAudioSessionManager
|| __DATA.__objc_data _OBJC_CLASS_$_ANMessengerDestination
|| __DATA.__objc_data _OBJC_CLASS_$_ANSenderContext
|| __DATA.__objc_data _OBJC_CLASS_$_ANSimpleTrackPlayer
|| __DATA.__objc_data _OBJC_CLASS_$_ANTonePlayer
|| __DATA.__objc_data _OBJC_CLASS_$_ANTrackPlayer
|| __DATA.__objc_data _OBJC_CLASS_$_ANTrackPlayerInfo
|| __DATA.__objc_data _OBJC_CLASS_$_ANUserNotificationController
|| __DATA.__objc_data _OBJC_METACLASS_$_ANAnalyticsContext
|| __DATA.__objc_data _OBJC_METACLASS_$_ANAnalyticsCounter
|| __DATA.__objc_data _OBJC_METACLASS_$_ANAnalyticsDailyAnnouncements
|| __DATA.__objc_data _OBJC_METACLASS_$_ANAnalyticsGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_ANAnchorTrackPlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_ANAnnounceReachabilityManager
|| __DATA.__objc_data _OBJC_METACLASS_$_ANAudioSessionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_ANMessengerDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_ANSenderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_ANSimpleTrackPlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_ANTonePlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_ANTrackPlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_ANTrackPlayerInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_ANUserNotificationController
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementAgeLimit
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementEntryAgeLimit
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementError
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementExpiration
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementFinishedPlaying
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementReceiveMeasure
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementSent
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementTimeToPlay
|| __DATA_CONST.__const _ANAnalyticsEventNameAnnouncementTimeToReceive
|| __DATA_CONST.__const _ANAnalyticsEventNamePlaybackAction
|| __DATA_CONST.__const _ANAnalyticsPayloadActionKey
|| __DATA_CONST.__const _ANAnalyticsPayloadDeadlineViolationKey
|| __DATA_CONST.__const _ANAnalyticsPayloadDurationBucketKey
|| __DATA_CONST.__const _ANAnalyticsPayloadDurationKey
|| __DATA_CONST.__const _ANAnalyticsPayloadEndpointKey
|| __DATA_CONST.__const _ANAnalyticsPayloadErrorCodeKey
|| __DATA_CONST.__const _ANAnalyticsPayloadErrorKey
|| __DATA_CONST.__const _ANAnalyticsPayloadFromDeviceKey
|| __DATA_CONST.__const _ANAnalyticsPayloadGroupCountKey
|| __DATA_CONST.__const _ANAnalyticsPayloadLocationKey
|| __DATA_CONST.__const _ANAnalyticsPayloadPlaybackSourceKey
|| __DATA_CONST.__const _ANAnalyticsPayloadPlayedKey
|| __DATA_CONST.__const _ANAnalyticsPayloadReceiveTypeKey
|| __DATA_CONST.__const _ANAnalyticsPayloadSendTypeKey
|| __DATA_CONST.__const _ANAnalyticsPayloadSizeBucketKey
|| __DATA_CONST.__const _ANAnalyticsPayloadSizeKey
|| __DATA_CONST.__const _ANAnalyticsPayloadSourceKey
|| __DATA_CONST.__const _ANAnalyticsPayloadTimeBucketKey
|| __DATA_CONST.__const _ANAnalyticsPayloadTimeExceededKey
|| __DATA_CONST.__const _ANAnalyticsPayloadTimeKey
|| __DATA_CONST.__const _ANAnalyticsPayloadToDeviceKey
|| __DATA_CONST.__const _ANAnnouncementOriginationTypeReceived
|| __DATA_CONST.__const _ANAnnouncementOriginationTypeSent
|| __DATA_CONST.__const _ANAnnouncementPlayedAnnouncementID
|| __DATA_CONST.__const _ANAnnouncementPlayedEventID
|| __DATA_CONST.__const _ANAnnouncementPlayedSenderType
|| __DATA_CONST.__const _ANBasePathComponent
|| __DATA_CONST.__const _ANCategoryAnnounce
|| __DATA_CONST.__const _ANNotificationCenterBundleIdentifier
|| __DATA_CONST.__const _ANPlayerItemStatusObserverKey
|| __DATA_CONST.__const _ANPlayerRateObserverKey
|| __DATA_CONST.__const _ANPlayerStatusObserverKey
|| __DATA_CONST.__const _ANPlayerTimeControlStatusObserverKey
|| __DATA_CONST.__const _ANSavedAnnouncementDomain
|| __DATA_CONST.__const _ANSettingKeyPathAnnounceEnabled
|| __DATA_CONST.__const _ANSettingKeyPathAnnounceGroup
|| __DATA_CONST.__const _AnnouncementDailyAnalyticsIdentifier
|| __DATA_CONST.__const _AnnouncementMessageIdentifier
|| __DATA_CONST.__const _HomeLocationStatusIdentifier
|| __DATA_CONST.__const _IDSLargeFilesTemporaryDirectoryName
|| __DATA_CONST.__const _ProcessedAnnouncementsTemporaryDirectoryName
|| __DATA_CONST.__const _kAnnounceCoreAnalyticsPrefix
|| __DATA_CONST.__const _kOutgoingMessageCount
|| __DATA_CONST.__const _kRapportClient
|| __DATA_DIRTY.__data _OBJC_METACLASS_$__TtC14AnnounceDaemon14AnnounceServer
|| __DATA_DIRTY.__data _OBJC_METACLASS_$__TtC14AnnounceDaemon31SiriReferenceResolutionDonation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAccessorySettingsCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnalyticsAssistant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnalyticsDaily
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnalyticsDailyMessaging
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnalyticsStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnnounceReachabilityServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnnounceServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnnouncementCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnnouncementManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnnouncementStatePublisher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANAnnouncementStorageManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANBackgroundActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANCompanionConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANCoreAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANHomeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANIDSConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANMessenger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANPlaybackManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANPlaybackSessionClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANPlaybackSessionServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANRapportConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANRapportEventStreamHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANSystemNotificationObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ANTonePlayerServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__TtC14AnnounceDaemon14AnnounceServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__TtC14AnnounceDaemon31SiriReferenceResolutionDonation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAccessorySettingsCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnalyticsAssistant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnalyticsDaily
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnalyticsDailyMessaging
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnalyticsStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnnounceReachabilityServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnnounceServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnnouncementCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnnouncementManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnnouncementStatePublisher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANAnnouncementStorageManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANBackgroundActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANCompanionConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANCoreAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANHomeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANIDSConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANMessenger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANPlaybackManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANPlaybackSessionClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANPlaybackSessionServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANRapportConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANRapportEventStreamHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANSystemNotificationObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ANTonePlayerServiceListener
|| __TEXT.__const _AnnounceDaemonVersionNumber
|| __TEXT.__const _AnnounceDaemonVersionString
__ AVFAudio: _AVAudioSessionInterruptionNotification
__ AVFAudio: _AVAudioSessionInterruptionOptionKey
__ AVFAudio: _AVAudioSessionInterruptionTypeKey
__ AVFAudio: _AVAudioSessionMediaServicesWereLostNotification
__ AVFAudio: _AVAudioSessionMediaServicesWereResetNotification
__ AVFAudio: _OBJC_CLASS_$_AVAudioPlayer
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeErrorKey
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeNotification
__ AVFoundation: _AVPlayerRateDidChangeNotification
__ AVFoundation: _AVPlayerRateDidChangeReasonKey
__ AVFoundation: _AVPlayerRateDidChangeSetRateFailedReason
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ AVFoundation: _OBJC_CLASS_$_AVQueuePlayer
__ Announce: _ANAnnounceIDSServiceName
__ Announce: _ANAnnounceRapportServiceType
__ Announce: _ANAnnouncementIDKey
__ Announce: _ANAnnouncementInfoAnnouncementIDKey
__ Announce: _ANAnnouncementInfoPlaybackFinishedCMTimeKey
__ Announce: _ANAnnouncementInfoPlaybackFinishedDateKey
__ Announce: _ANAnnouncementInfoPlaybackFinishedMachTimeKey
__ Announce: _ANAnnouncementInfoPlaybackIsActiveKey
__ Announce: _ANAnnouncementInfoPlaybackStartCMTimeKey
__ Announce: _ANAnnouncementInfoPlaybackStartDateKey
__ Announce: _ANAnnouncementInfoPlaybackStartMachTimeKey
__ Announce: _ANAnnouncerIDKey
__ Announce: _ANAnnouncerIsAccessoryKey
__ Announce: _ANAnnouncerNameKey
__ Announce: _ANAnnouncerUserIDKey
__ Announce: _ANAnnouncerUserUniqueIDKey
__ Announce: _ANAudioFilePathKey
__ Announce: _ANDefaultAccessorySettingsRefreshInterval
__ Announce: _ANDefaultAllowAnnouncementToAccessoryPhysicallyInAnnouncementTargetHome
__ Announce: _ANDefaultAnalyticsDailyBackgroundActivity
__ Announce: _ANDefaultAnalyticsDailyBackgroundActivityTimestamp
__ Announce: _ANDefaultAnalyticsDailyEventPayloads
__ Announce: _ANDefaultAnnouncementDeadline
__ Announce: _ANDefaultAnnouncementEntryAgeLimit
__ Announce: _ANDefaultAnnouncementPlaybackMinimumDelay
__ Announce: _ANDefaultAnnouncementPreviousGoesToPreviousMS
__ Announce: _ANDefaultAnnouncementReceiptExpiration
__ Announce: _ANDefaultAnnouncementSilenceBetweenTracksMS
__ Announce: _ANDefaultAnnouncementStartToneTrim
__ Announce: _ANDefaultAnnouncementStorageAgeLimit
__ Announce: _ANDefaultAnnouncementTransitionToneTrim
__ Announce: _ANDefaultAnnouncementUserNotificationExpiration
__ Announce: _ANDefaultAudioSessionDeactivationTimeout
__ Announce: _ANDefaultAudioSessionResumeAfterInterruptionDelay
__ Announce: _ANDefaultCheckResidentsForIDS
__ Announce: _ANDefaultDailyHomeAnnouncementsCount
__ Announce: _ANDefaultEnableSaveAnnouncementMetaData
__ Announce: _ANDefaultForceAllowAnnounceForAllAccessories
__ Announce: _ANDefaultForceAllowAnnounceForAllUsers
__ Announce: _ANDefaultForceAnnounceNotificationsForAllUsers
__ Announce: _ANDefaultForceDeliveryFailure
__ Announce: _ANDefaultForceSendFailure
__ Announce: _ANDefaultForceSupportsAnnounceForAllAccessories
__ Announce: _ANDefaultIDSServerMessageTimeout
__ Announce: _ANDefaultKeepReceivedAudioFiles
__ Announce: _ANDefaultKeepSentAudioFiles
__ Announce: _ANDefaultNormalizeAudio
__ Announce: _ANDefaultPlaySoundOnCriticalFailure
__ Announce: _ANDefaultRapportScanDuration
__ Announce: _ANDefaultRapportScanInterval
__ Announce: _ANDefaultRapportScanTimeout
__ Announce: _ANDefaultRapportSendHomeLocationStatusRequestTimeout
__ Announce: _ANDefaultRapportSendMessageTimeout
__ Announce: _ANDefaultRelayAnnouncementsThroughResident
__ Announce: _ANDefaultResumePlaybackAfterInterruptionTimeout
__ Announce: _ANDefaultSendAnalytics
__ Announce: _ANDefaultSendTransactionActiveMemoryTimeout
__ Announce: _ANDefaultTrackPlayerPlaybackTimeout
__ Announce: _ANDefaultTranscriptionTimeout
__ Announce: _ANDefaultUseCoordinatedAlerts
__ Announce: _ANDefaultUseOriginalAudioFileOnProcessFailure
__ Announce: _ANDefaultUseRapport
__ Announce: _ANDefaultUserNotificationIncludeTranscription
__ Announce: _ANDefaultUserNotificationUnifiedBanner
__ Announce: _ANDeviceClassKey
__ Announce: _ANErrorComponentAudioPlayer
__ Announce: _ANErrorComponentAudioProcessing
__ Announce: _ANErrorComponentIDS
__ Announce: _ANErrorComponentMessenger
__ Announce: _ANErrorComponentPlaybackManager
__ Announce: _ANErrorComponentRapport
__ Announce: _ANErrorComponentXPCServer
__ Announce: _ANFileExtensionCaf
__ Announce: _ANFileExtensionNone
__ Announce: _ANGroupIDKey
__ Announce: _ANHomeIDKey
__ Announce: _ANHomeNameKey
__ Announce: _ANIndexKey
__ Announce: _ANLocalDeviceUUIDString
__ Announce: _ANLogBuildCategoryName
__ Announce: _ANLogWithCategory
__ Announce: _ANMAchServiceNameTonePlayer
__ Announce: _ANMachServiceNameAnnounce
__ Announce: _ANMachServiceNameAnnounceReachability
__ Announce: _ANMachServiceNameLocalPlaybackSession
__ Announce: _ANMachServiceNameRemotePlaybackSession
__ Announce: _ANPlayedKey
__ Announce: _ANProductTypeKey
__ Announce: _ANProductTypeOverrideKey
__ Announce: _ANRoomsKey
__ Announce: _ANSensitiveLocalizedString
__ Announce: _ANSensitiveLocalizedStringWithFormat
__ Announce: _ANServiceTypeKey
__ Announce: _ANSubtitleKey
__ Announce: _ANTranscriptionTextKey
__ Announce: _ANUserInfoFailedDeliveryAnnouncementKey
__ Announce: _ANUserInfoHomeCountKey
__ Announce: _ANUserInfoLatestAnnouncementIDKey
__ Announce: _ANUserInfoNotificationTypeKey
__ Announce: _ANUserInfoOldestAnnouncementKey
__ Announce: _ANUserInfoOldestUnreadAnnouncementKey
__ Announce: _ANXPCTransactionPendingAnnouncements
__ Announce: _ANXPCTransactionReachabilityActive
__ Announce: _ANXPCTransactionSendingAnnouncements
__ Announce: _ANZonesKey
__ Announce: _OBJC_CLASS_$_ANAnnounce
__ Announce: _OBJC_CLASS_$_ANAnnounceFeatureStatus
__ Announce: _OBJC_CLASS_$_ANAnnounceReachability
__ Announce: _OBJC_CLASS_$_ANAnnouncement
__ Announce: _OBJC_CLASS_$_ANAnnouncementContent
__ Announce: _OBJC_CLASS_$_ANAnnouncementContext
__ Announce: _OBJC_CLASS_$_ANAnnouncementDataItem
__ Announce: _OBJC_CLASS_$_ANAnnouncementDestination
__ Announce: _OBJC_CLASS_$_ANAnnouncementRequest
__ Announce: _OBJC_CLASS_$_ANAnnouncementResult
__ Announce: _OBJC_CLASS_$_ANDefaults
__ Announce: _OBJC_CLASS_$_ANDevice
__ Announce: _OBJC_CLASS_$_ANEndpointNotificationName
__ Announce: _OBJC_CLASS_$_ANFiles
__ Announce: _OBJC_CLASS_$_ANHomeContext
__ Announce: _OBJC_CLASS_$_ANLocation
__ Announce: _OBJC_CLASS_$_ANParticipant
__ Announce: _OBJC_CLASS_$_ANPlaybackCommand
__ Announce: _OBJC_CLASS_$_ANProcessAudio
__ Announce: _OBJC_CLASS_$_ANSender
__ Announce: _OBJC_CLASS_$_ANSpeechUtil
__ Announce: _OBJC_CLASS_$_ANTimer
__ Announce: _OBJC_CLASS_$_ANUtils
__ Announce: _OBJC_CLASS_$_ANVolumeController
__ Announce: _OBJC_CLASS_$_ANXPCTransactionManager
__ Announce: __ANDefaultLog
__ Announce: __ANXPCLog
__ Announce: _kANAnnounceStateNotificationKey
__ Announce: _kAnnounceClientIdEntitlement
__ Announce: _kAnnounceEntitlement
__ Announce: _kHomeBundleId
__ AudioToolbox: _AudioServicesCreateSystemSoundID
__ AudioToolbox: _AudioServicesPlaySystemSoundWithOptions
__ AudioToolbox: _kAudioServicesPlaySystemSoundOptionIgnoreRingerSwitchKey
__ Contacts: _OBJC_CLASS_$_CNContactStore
__ Contacts: _OBJC_CLASS_$_CNContactStoreConfiguration
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanTrue
__ CoreMedia: _CMClockGetHostTimeClock
__ CoreMedia: _CMClockGetTime
__ CoreMedia: _CMTimeAdd
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeSubtract
__ CoreMedia: _kCMTimeZero
__ CoreUtils: _CUXPCEncodeNSError
__ Foundation: _OBJC_CLASS_$_NSBackgroundActivityScheduler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ HMFoundation: _OBJC_CLASS_$_HMFLocationAuthorization
__ HomeKit: _OBJC_CLASS_$_HMAccessory
__ HomeKit: _OBJC_CLASS_$_HMBooleanSetting
__ HomeKit: _OBJC_CLASS_$_HMHome
__ HomeKit: _OBJC_CLASS_$_HMHomeManager
__ HomeKit: _OBJC_CLASS_$_HMMutableHomeManagerConfiguration
__ HomeKit: _OBJC_CLASS_$_HMRoom
__ HomeKit: _OBJC_CLASS_$_HMUser
__ HomeKit: _OBJC_CLASS_$_HMZone
__ IDS: _IDSCopyLocalDeviceUniqueID
__ IDS: _IDSGetUUIDData
__ IDS: _IDSSendMessageOptionAlwaysSkipSelfKey
__ IDS: _IDSSendMessageOptionEnforceRemoteTimeoutsKey
__ IDS: _IDSSendMessageOptionTimeoutKey
__ IDS: _IDSSendMessageOptionUUIDKey
__ IDS: _OBJC_CLASS_$_IDSDevice
__ IDS: _OBJC_CLASS_$_IDSService
__ Intents: _OBJC_CLASS_$_INReadAnnouncementIntent
__ MediaExperience: _OBJC_CLASS_$_AVSystemController
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkClient
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkDevice
__ Rapport: _RPDestinationIdentifierPairedCompanion
__ Rapport: _RPOptionSenderIDSDeviceID
__ Rapport: _RPOptionTimeoutSeconds
__ Sharing: _OBJC_CLASS_$_SFCoordinatedAlertRequest
__ TCC: _tcc_identity_create
__ UserNotifications: _OBJC_CLASS_$_UNMutableNotificationContent
__ UserNotifications: _OBJC_CLASS_$_UNNotificationRequest
__ UserNotifications: _OBJC_CLASS_$_UNNotificationSound
__ UserNotifications: _OBJC_CLASS_$_UNUserNotificationCenter
__ libAccessibility.dylib: __AXSShowAudioTranscriptions
__ libSystem.B.dylib: _OBJC_CLASS_$_OS_dispatch_queue
__ libSystem.B.dylib: _OBJC_CLASS_$_OS_os_log
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_event_key_name
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_assert_queue_not$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_source_testcancel
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _malloc_size
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _xpc_dictionary_create_reply
__ libSystem.B.dylib: _xpc_dictionary_expects_reply
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_send_reply
__ libSystem.B.dylib: _xpc_set_event_stream_handler
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_EHTYPE_id
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_allocWithZone
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libswiftCore.dylib: _OBJC_METACLASS_$__TtCs12_SwiftObject
__ libswiftCore.dylib: __swiftEmptyArrayStorage
__ libswiftCore.dylib: __swift_stdlib_reportUnimplementedInitializer
__ libswiftCore.dylib: _swift_allocError
__ libswiftCore.dylib: _swift_allocObject
__ libswiftCore.dylib: _swift_arrayDestroy
__ libswiftCore.dylib: _swift_arrayInitWithCopy
__ libswiftCore.dylib: _swift_beginAccess
__ libswiftCore.dylib: _swift_bridgeObjectRelease
__ libswiftCore.dylib: _swift_bridgeObjectRelease_n
__ libswiftCore.dylib: _swift_bridgeObjectRetain
__ libswiftCore.dylib: _swift_bridgeObjectRetain_n
__ libswiftCore.dylib: _swift_deallocClassInstance
__ libswiftCore.dylib: _swift_deallocObject
__ libswiftCore.dylib: _swift_deletedMethodError
__ libswiftCore.dylib: _swift_dynamicCastObjCClass
__ libswiftCore.dylib: _swift_errorRelease
__ libswiftCore.dylib: _swift_errorRetain
__ libswiftCore.dylib: _swift_getErrorValue
__ libswiftCore.dylib: _swift_getObjCClassMetadata
__ libswiftCore.dylib: _swift_getObjectType
__ libswiftCore.dylib: _swift_getSingletonMetadata
__ libswiftCore.dylib: _swift_getTypeByMangledNameInContext
__ libswiftCore.dylib: _swift_getTypeByMangledNameInContextInMetadataState
__ libswiftCore.dylib: _swift_getWitnessTable
__ libswiftCore.dylib: _swift_initClassMetadata2
__ libswiftCore.dylib: _swift_isUniquelyReferenced_nonNull_native
__ libswiftCore.dylib: _swift_isaMask
__ libswiftCore.dylib: _swift_lookUpClassMethod
__ libswiftCore.dylib: _swift_once
__ libswiftCore.dylib: _swift_release
__ libswiftCore.dylib: _swift_retain
__ libswiftCore.dylib: _swift_slowAlloc
__ libswiftCore.dylib: _swift_slowDealloc
__ libswiftCore.dylib: _swift_unknownObjectRelease
__ libswiftCore.dylib: _swift_unknownObjectRetain
__ libswiftCore.dylib: _swift_unknownObjectWeakDestroy
__ libswiftCore.dylib: _swift_unknownObjectWeakInit
__ libswiftCore.dylib: _swift_unknownObjectWeakLoadStrong
__ libswiftCore.dylib: _swift_updateClassMetadata2
__ libswiftCore.dylib: _swift_willThrow
ANMessenger : NSObject <ANConnectionDelegate>
 @property  <ANRapportConnectionProvider> *rapportConnection
 @property  <ANIDSConnectionProvider> *idsConnection
 @property  NSObject<OS_os_log> *log
 @property  <ANMessengerDelegate> *delegate
 @property  ANParticipant *localParticipant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANMessenger performBasicValidationForAnnouncement:type:]
  +[ANMessenger _performPreflightChecksForSendingContent:toHome:]
  +[ANMessenger _setIdentifiersForIDSService:inLocation:home:]
  +[ANMessenger purgeTemporaryFiles]
  +[ANMessenger performPreflightChecksForSendingContent:toHome:rooms:zones:]
  +[ANMessenger createAnnouncementWithRequest:forLocation:inHome:isReply:error:]
  +[ANMessenger performIDSValidationForAnnouncement:withSenderContext:]
  +[ANMessenger announcementForDevice:inHome:fromAnnouncement:]
  +[ANMessenger locationForHome:rooms:zones:idsService:]
  +[ANMessenger locationForReplyToAnnouncement:home:idsService:]
  +[ANMessenger announcementForAccessory:inHome:fromAnnouncement:]
  +[ANMessenger _isAnnouncerAdminInAnnouncement:home:]
  +[ANMessenger _performPreflightChecksForSendingToRooms:zones:]
  +[ANMessenger performRapportValidationForAnnouncement:withSenderContext:]
  +[ANMessenger announcementForUser:inHome:fromAnnouncement:]

  // instance methods
  -[ANMessenger rapportConnection]
  -[ANMessenger connectionDidReceiveRequestForHomeLocationStatus:]
  -[ANMessenger mockAnnouncement:playbackDeadline:sentHandler:]
  -[ANMessenger _logDebugInfoForHome:]
  -[ANMessenger setDelegate:]
  -[ANMessenger connection:failedDeliveryForMessage:withError:]
  -[ANMessenger delegate]
  -[ANMessenger _calculateAnnouncementDeadline:]
  -[ANMessenger _sendAnnouncement:toDestination:sentHandler:]
  -[ANMessenger .cxx_destruct]
  -[ANMessenger forwardAnnouncementToCompanion:]
  -[ANMessenger cleanForExit]
  -[ANMessenger idsConnection]
  -[ANMessenger _willTargetReachableDevicesForAnnouncement:inDestination:]
  -[ANMessenger sendReply:forAnnouncement:completion:]
  -[ANMessenger log]
  -[ANMessenger connection:didReceiveMessage:fromSender:senderContext:handler:]
  -[ANMessenger _forwardRelayRequest:withSenderContext:sentHandler:]
  -[ANMessenger sendRequest:sentHandler:]
  -[ANMessenger _relayAnnouncementThroughHomePod:inHome:rooms:sentHandler:]
  -[ANMessenger getScanningDeviceCandidates]
  -[ANMessenger broadcastReply:forAnnouncement:completion:]
  -[ANMessenger localParticipant]
  -[ANMessenger initWithIDSConnection:rapportConnection:]
  -[ANMessenger init]
  -[ANMessenger _fulfillRelayRequest:withSenderContext:sentHandler:]
  -[ANMessenger sendAnnouncement:sentHandler:]


ANAnalyticsDailyAnnouncements : NSObject
 @property  double lastAccess
 @property  NSMutableDictionary *homes

  // instance methods
  -[ANAnalyticsDailyAnnouncements homes]
  -[ANAnalyticsDailyAnnouncements merge:]
  -[ANAnalyticsDailyAnnouncements initWithDictionary:]
  -[ANAnalyticsDailyAnnouncements .cxx_destruct]
  -[ANAnalyticsDailyAnnouncements setLastAccess:]
  -[ANAnalyticsDailyAnnouncements lastAccess]
  -[ANAnalyticsDailyAnnouncements init]
  -[ANAnalyticsDailyAnnouncements dictionary]
  -[ANAnalyticsDailyAnnouncements announcementsCount]
  -[ANAnalyticsDailyAnnouncements shouldReport]
  -[ANAnalyticsDailyAnnouncements setHomes:]
  -[ANAnalyticsDailyAnnouncements initWithLastAccess:]
  -[ANAnalyticsDailyAnnouncements homesCount]
  -[ANAnalyticsDailyAnnouncements incrementCountInHome:group:]


ANUserNotificationController : NSObject
 @property  UNUserNotificationCenter *notificationCenter
 @property  BOOL suspendNotificationExpiration
 @property  <ANUserNotificationControllerDelegate> *delegate

  // class methods
  +[ANUserNotificationController sharedController]
  +[ANUserNotificationController _bestDeviceToAlert:]
  +[ANUserNotificationController _createNotificationContent:homeName:withSilence:userInfo:actionUrl:expirationDate:andThreadIdentifier:]

  // instance methods
  -[ANUserNotificationController notificationCenter]
  -[ANUserNotificationController setDelegate:]
  -[ANUserNotificationController delegate]
  -[ANUserNotificationController .cxx_destruct]
  -[ANUserNotificationController cleanForExit]
  -[ANUserNotificationController init]
  -[ANUserNotificationController postNotificationForAnnouncement:groupAnnouncements:home:groupID:]
  -[ANUserNotificationController updateNotificationForAnnouncements:inHome:withGroupID:]
  -[ANUserNotificationController removeNotificationWithGroupID:]
  -[ANUserNotificationController pauseExpirationForNotificationsWithGroupIDs:]
  -[ANUserNotificationController resumeExpirationForNotificationsWithGroupIDs:]
  -[ANUserNotificationController postSendFailureNotificationForAnnouncement:]
  -[ANUserNotificationController hasDeliveredNotificationsWithGroupID:]
  -[ANUserNotificationController _contentForAnnouncement:groupAnnouncements:inHome:threadID:replacement:completion:]
  -[ANUserNotificationController _contentBodyForAnnouncements:inHome:]
  -[ANUserNotificationController _contentForSendFailureForAnnouncement:homeName:]
  -[ANUserNotificationController _userInfoForAnnouncement:groupAnnouncements:]
  -[ANUserNotificationController _userInfoForFailedDeliveryForAnnouncement:]
  -[ANUserNotificationController _postNotificationWithContent:requestID:]
  -[ANUserNotificationController _setContentExpirationDate:forNotificationsWithThreadIDs:]
  -[ANUserNotificationController _replaceContentForRequestWithRequestID:replacementContent:completionHandler:]
  -[ANUserNotificationController _replaceContentForRequestsWithThreadID:replacementContent:]
  -[ANUserNotificationController suspendNotificationExpiration]
  -[ANUserNotificationController setSuspendNotificationExpiration:]


ANAnnounceServiceListener : NSObject <ANAnnounceServiceInterface, NSXPCListenerDelegate>
 @property  NSXPCListener *listener
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ANAnnounceServiceListener isAnnounceEnabledForAnyAccessoryInHome:reply:]
  -[ANAnnounceServiceListener lastPlayedAnnouncementInfo:]
  -[ANAnnounceServiceListener _handleError:request:requestSentCompletionHandler:]
  -[ANAnnounceServiceListener announcementForID:endpointID:reply:]
  -[ANAnnounceServiceListener _handleError:request:sentCompletionHandler:]
  -[ANAnnounceServiceListener homeNamesForContext:reply:]
  -[ANAnnounceServiceListener .cxx_destruct]
  -[ANAnnounceServiceListener _translateSentHandlerResponseAnnouncement:request:error:toRequestSentHandler:]
  -[ANAnnounceServiceListener contextFromAnnouncement:reply:]
  -[ANAnnounceServiceListener cleanForExit]
  -[ANAnnounceServiceListener isAnnounceEnabledForAnyAccessoryOrUserInHome:reply:]
  -[ANAnnounceServiceListener mockAnnouncement:forHomeWithName:playbackDeadline:completion:]
  -[ANAnnounceServiceListener isLocalDeviceInRoom:reply:]
  -[ANAnnounceServiceListener getUnplayedAnnouncementsForEndpointID:completionHandler:]
  -[ANAnnounceServiceListener getScanningDeviceCandidates:]
  -[ANAnnounceServiceListener _sendRequest:completion:]
  -[ANAnnounceServiceListener isEndpointWithUUID:inRoomWithName:reply:]
  -[ANAnnounceServiceListener getReceivedAnnouncementsForEndpointID:completionHandler:]
  -[ANAnnounceServiceListener _sendReplyRequest:completion:]
  -[ANAnnounceServiceListener receivedAnnouncementIdentifiersForEndpointID:reply:]
  -[ANAnnounceServiceListener sendRequestLegacy:completion:]
  -[ANAnnounceServiceListener localParticipant:]
  -[ANAnnounceServiceListener listener]
  -[ANAnnounceServiceListener listener:shouldAcceptNewConnection:]
  -[ANAnnounceServiceListener init]
  -[ANAnnounceServiceListener prewarm:]
  -[ANAnnounceServiceListener sendRequest:completion:]


ANPlaybackSessionServiceListener : NSObject <ANLocalPlaybackSessionServiceInterface, ANRemotePlaybackSessionServiceInterface, NSXPCListenerDelegate, ANAnnouncementCoordinatorDelegate, ANRemotePlaybackStatusProvider>
 @property  NSXPCListener *localPlaybackSessionListener
 @property  NSXPCListener *remotePlaybackSessionListener
 @property  BOOL remoteSessionsActive
 @property  NSMutableSet *remotePlaybackClients
 @property  NSMutableSet *localPlaybackClients
 @property  NSObject<OS_dispatch_queue> *playbackClientsSerialQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ANPlaybackSessionServiceListener _removeConnection:]
  -[ANPlaybackSessionServiceListener setLocalPlaybackClients:]
  -[ANPlaybackSessionServiceListener _endSessionForConnection:]
  -[ANPlaybackSessionServiceListener startSessionForGroupID:reply:]
  -[ANPlaybackSessionServiceListener coordinator:didReceiveAnnouncement:forGroupID:forEndpointID:]
  -[ANPlaybackSessionServiceListener setRemotePlaybackClients:]
  -[ANPlaybackSessionServiceListener .cxx_destruct]
  -[ANPlaybackSessionServiceListener remoteSessionsActive]
  -[ANPlaybackSessionServiceListener endSessionWithReply:]
  -[ANPlaybackSessionServiceListener _setTimersActive:forEndPointID:]
  -[ANPlaybackSessionServiceListener cleanForExit]
  -[ANPlaybackSessionServiceListener resumeWithEndpointID:completionHandler:]
  -[ANPlaybackSessionServiceListener coordinator:didUpdateAnnouncements:forGroupID:forEndpointID:]
  -[ANPlaybackSessionServiceListener coordinator:didFinishPlayingAnnouncementsForEndpointID:]
  -[ANPlaybackSessionServiceListener _clientForConnection:]
  -[ANPlaybackSessionServiceListener remotePlaybackClients]
  -[ANPlaybackSessionServiceListener playbackClientsSerialQueue]
  -[ANPlaybackSessionServiceListener remotePlaybackSessionListener]
  -[ANPlaybackSessionServiceListener localPlaybackSessionListener]
  -[ANPlaybackSessionServiceListener isExternalPlaybackActiveForEndpointID:]
  -[ANPlaybackSessionServiceListener coordinator:didStartPlayingAnnouncementsAtMachAbsoluteTime:forEndpointID:]
  -[ANPlaybackSessionServiceListener sendPlaybackCommand:forEndpointID:completionHandler:]
  -[ANPlaybackSessionServiceListener lastPlayedAnnouncementInfoForEndpointID:completionHandler:]
  -[ANPlaybackSessionServiceListener setPlaybackStoppedForAnnouncement:]
  -[ANPlaybackSessionServiceListener listener:shouldAcceptNewConnection:]
  -[ANPlaybackSessionServiceListener init]
  -[ANPlaybackSessionServiceListener playbackStateForEndpointID:completionHandler:]
  -[ANPlaybackSessionServiceListener setPlaybackStartedForAnnouncement:]
  -[ANPlaybackSessionServiceListener coordinator:didUpdatePlaybackState:forEndpointID:]
  -[ANPlaybackSessionServiceListener localPlaybackClients]


ANSystemNotificationObserver : NSObject
 @property  @? observerHandler

  // class methods
  +[ANSystemNotificationObserver observer:]

  // instance methods
  -[ANSystemNotificationObserver _languageDidChange]
  -[ANSystemNotificationObserver observerHandler]
  -[ANSystemNotificationObserver setObserverHandler:]
  -[ANSystemNotificationObserver dealloc]
  -[ANSystemNotificationObserver .cxx_destruct]
  -[ANSystemNotificationObserver startObservingNotifications]
  -[ANSystemNotificationObserver initWithHandler:]
  -[ANSystemNotificationObserver removeNotificationObservers]
  -[ANSystemNotificationObserver init]


ANPlaybackSessionClient : NSObject
 @property  NSString *sessionID
 @property  NSXPCConnection *connection
 @property  NSString *groupID
 @property  NSUUID *endpointID

  // class methods
  +[ANPlaybackSessionClient clientWithXPCConnection:]

  // instance methods
  -[ANPlaybackSessionClient setGroupID:]
  -[ANPlaybackSessionClient sessionID]
  -[ANPlaybackSessionClient copy]
  -[ANPlaybackSessionClient groupID]
  -[ANPlaybackSessionClient .cxx_destruct]
  -[ANPlaybackSessionClient connection]
  -[ANPlaybackSessionClient setEndpointID:]
  -[ANPlaybackSessionClient endpointID]
  -[ANPlaybackSessionClient setSessionID:]
  -[ANPlaybackSessionClient setConnection:]


ANAnalyticsGroup : NSObject
 @property  NSArray *announcements
 @property  NSArray *metadata

  // instance methods
  -[ANAnalyticsGroup .cxx_destruct]
  -[ANAnalyticsGroup metadata]
  -[ANAnalyticsGroup init]
  -[ANAnalyticsGroup announcements]
  -[ANAnalyticsGroup addAnnouncement:metadata:]


ANRapportEventStreamHandler : NSObject
 @property  NSMutableDictionary *rapportActivationHandlers

  // instance methods
  -[ANRapportEventStreamHandler addRapportServiceType:activationBlock:]
  -[ANRapportEventStreamHandler .cxx_destruct]
  -[ANRapportEventStreamHandler setEventStreamHandler]
  -[ANRapportEventStreamHandler rapportActivationHandlers]
  -[ANRapportEventStreamHandler addAnnounceRapportServiceType]
  -[ANRapportEventStreamHandler init]


ANAccessorySettingsCache : NSObject <HMAccessorySettingsDataSourceDelegate>
 @property  NSObject<OS_dispatch_queue> *settingsQueue
 @property  HMAccessorySettingsDataSource *accessorySettingsDataSource
 @property  NSMutableDictionary *cachedAccessorySettings
 @property  NSMutableDictionary *lastAccessorySettingsFetch
 @property  NSObject<OS_os_log> *log
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ANAccessorySettingsCache settingsForAccessory:]
  -[ANAccessorySettingsCache _fetchSettingsForAccessory:useCache:]
  -[ANAccessorySettingsCache lastAccessorySettingsFetch]
  -[ANAccessorySettingsCache cachedAccessorySettings]
  -[ANAccessorySettingsCache .cxx_destruct]
  -[ANAccessorySettingsCache _removeSettingsForAccessoryWithIdentifier:]
  -[ANAccessorySettingsCache accessorySettingsDataSource:didReceiveSettingsUpdatesForAccessoryWithIdentifier:settings:]
  -[ANAccessorySettingsCache _updateSettings:forAccessoryWithIdentifier:]
  -[ANAccessorySettingsCache log]
  -[ANAccessorySettingsCache initWithAccessorySettingsDataSource:]
  -[ANAccessorySettingsCache settingsQueue]
  -[ANAccessorySettingsCache accessorySettingsDataSource]


ANTonePlayerServiceListener : NSObject <ANTonePlayerServiceInterface, NSXPCListenerDelegate>
 @property  ANTonePlayer *player
 @property  NSXPCListener *listener
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ANTonePlayerServiceListener playTone:audioSessionID:endpointUUID:completionHandler:]
  -[ANTonePlayerServiceListener .cxx_destruct]
  -[ANTonePlayerServiceListener cleanForExit]
  -[ANTonePlayerServiceListener player]
  -[ANTonePlayerServiceListener _fileURLForTone:]
  -[ANTonePlayerServiceListener setPlayer:]
  -[ANTonePlayerServiceListener listener]
  -[ANTonePlayerServiceListener listener:shouldAcceptNewConnection:]
  -[ANTonePlayerServiceListener init]


ANAudioSessionManager : NSObject
 @property  AVAudioSession *audioSession
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_source> *timer
 @property  NSObject<OS_os_log> *log

  // instance methods
  -[ANAudioSessionManager dealloc]
  -[ANAudioSessionManager .cxx_destruct]
  -[ANAudioSessionManager setTimer:]
  -[ANAudioSessionManager timer]
  -[ANAudioSessionManager _cancelTimer]
  -[ANAudioSessionManager log]
  -[ANAudioSessionManager queue]
  -[ANAudioSessionManager _handleTimerExpired]
  -[ANAudioSessionManager audioSession]
  -[ANAudioSessionManager initWithAudioSession:queue:endpointID:]
  -[ANAudioSessionManager activateAudioSessionWithError:]
  -[ANAudioSessionManager deactivateAudioSessionAfterDelay:]
  -[ANAudioSessionManager _deactivateAudioSession]


ANAnalyticsContext : NSObject <ANAnalyticsPayloadProvider>
 @property  BOOL isEndpoint
 @property  NSDictionary *analyticsPayload

  // class methods
  +[ANAnalyticsContext contextWithAnnouncer:]
  +[ANAnalyticsContext contextWithEndpointID:]

  // instance methods
  -[ANAnalyticsContext analyticsPayload]
  -[ANAnalyticsContext isEndpoint]
  -[ANAnalyticsContext setIsEndpoint:]


ANAnnounceReachabilityManager : NSObject <ANHomeManagerDelegate, ANRapportConnectionDeviceDelegate>
 @property  <ANRapportConnectionProvider> *rapportConnection
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSMutableDictionary *homeReachability
 @property  BOOL started
 @property  NSObject<OS_os_log> *log
 @property  NSArray *monitoredHomes
 @property  <ANAnnounceReachabilityManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ANAnnounceReachabilityManager rapportConnection]
  -[ANAnnounceReachabilityManager home:didAddAccessory:]
  -[ANAnnounceReachabilityManager serialQueue]
  -[ANAnnounceReachabilityManager home:didRemoveAccessory:]
  -[ANAnnounceReachabilityManager setDelegate:]
  -[ANAnnounceReachabilityManager accessoryDidUpdateControllable:]
  -[ANAnnounceReachabilityManager started]
  -[ANAnnounceReachabilityManager delegate]
  -[ANAnnounceReachabilityManager .cxx_destruct]
  -[ANAnnounceReachabilityManager stop]
  -[ANAnnounceReachabilityManager log]
  -[ANAnnounceReachabilityManager homeDidUpdateAccessControlForCurrentUser:]
  -[ANAnnounceReachabilityManager startWithCompletionHandler:]
  -[ANAnnounceReachabilityManager setStarted:]
  -[ANAnnounceReachabilityManager init]
  -[ANAnnounceReachabilityManager didRemoveHome:]
  -[ANAnnounceReachabilityManager didAddHome:]
  -[ANAnnounceReachabilityManager connection:didFindDevice:]
  -[ANAnnounceReachabilityManager connection:didLoseDevice:]
  -[ANAnnounceReachabilityManager reachabilityForHome:]
  -[ANAnnounceReachabilityManager reachabilityForRoom:inHome:]
  -[ANAnnounceReachabilityManager monitoredRoomsForHome:]
  -[ANAnnounceReachabilityManager monitoredHomes]
  -[ANAnnounceReachabilityManager _filteredReachabilityLevelFromReachabilityLevel:forHome:]
  -[ANAnnounceReachabilityManager _initializeReachabilityStatus]
  -[ANAnnounceReachabilityManager _reevaluateHomeKitReachabilityForHome:]
  -[ANAnnounceReachabilityManager _rapportActivationHandler:]
  -[ANAnnounceReachabilityManager _reachabilityForHome:]
  -[ANAnnounceReachabilityManager _reachabilityForRoom:inHome:]
  -[ANAnnounceReachabilityManager _updateReachabilityLevelWithReachabilityLevel:forAccessory:operation:]
  -[ANAnnounceReachabilityManager _notifyClientsReachabilityChangeForRoom:inHome:toLevel:]
  -[ANAnnounceReachabilityManager _notifyClientsReachabilityChangeForHome:toLevel:]
  -[ANAnnounceReachabilityManager homeReachability]


ANTrackPlayerInfo : NSObject
 @property  AVPlayerItem *playerItem
 @property  NSString *announcementID
 @property  long long trackType
 @property  BOOL completed

  // instance methods
  -[ANTrackPlayerInfo setCompleted:]
  -[ANTrackPlayerInfo .cxx_destruct]
  -[ANTrackPlayerInfo completed]
  -[ANTrackPlayerInfo trackType]
  -[ANTrackPlayerInfo playerItem]
  -[ANTrackPlayerInfo announcementID]
  -[ANTrackPlayerInfo setPlayerItem:]
  -[ANTrackPlayerInfo initWithPlayerItem:announcementID:trackType:]


ANTonePlayer : NSObject
 @property  unsigned int proxyAudioSessionID
 @property  NSUUID *endpointUUID
 @property  AVPlayer *player
 @property  AVAudioSession *audioSession
 @property  BOOL usingProxyAudioSession
 @property  @? handler
 @property  AVPlayerItem *playerItem
 @property  NSObject<OS_os_log> *log

  // instance methods
  -[ANTonePlayer setHandler:]
  -[ANTonePlayer dealloc]
  -[ANTonePlayer .cxx_destruct]
  -[ANTonePlayer stop]
  -[ANTonePlayer player]
  -[ANTonePlayer log]
  -[ANTonePlayer handler]
  -[ANTonePlayer setPlayer:]
  -[ANTonePlayer playerItem]
  -[ANTonePlayer endpointUUID]
  -[ANTonePlayer setAudioSession:]
  -[ANTonePlayer audioSession]
  -[ANTonePlayer setPlayerItem:]
  -[ANTonePlayer _deactivateAudioSession]
  -[ANTonePlayer audioSessionInterruptionHandler:]
  -[ANTonePlayer _handleFailure]
  -[ANTonePlayer _handlePlayerItemPlayedToEnd:]
  -[ANTonePlayer _handlePlayerItemFailedToPlayToEnd:]
  -[ANTonePlayer playerRateChangedHandler:]
  -[ANTonePlayer initWithAudioSessionID:endpointUUID:]
  -[ANTonePlayer playFileURL:completionHandler:]
  -[ANTonePlayer _playSystemSoundWithFileURL:]
  -[ANTonePlayer _playFileURL:]
  -[ANTonePlayer _activateAudioSessionForPlayer:error:]
  -[ANTonePlayer _registerForNotificationsWithAudioSession:]
  -[ANTonePlayer _deregisterForNotificationsWithAudioSession:]
  -[ANTonePlayer _callHandler:]
  -[ANTonePlayer proxyAudioSessionID]
  -[ANTonePlayer setProxyAudioSessionID:]
  -[ANTonePlayer usingProxyAudioSession]
  -[ANTonePlayer setUsingProxyAudioSession:]


ANSenderContext : NSObject
 @property  NSString *senderCorrelationIdentifier
 @property  BOOL isValidDevice

  // instance methods
  -[ANSenderContext senderCorrelationIdentifier]
  -[ANSenderContext .cxx_destruct]
  -[ANSenderContext setSenderCorrelationIdentifier:]
  -[ANSenderContext isValidDevice]
  -[ANSenderContext setIsValidDevice:]


ANAnnounceReachabilityServiceListener : NSObject <ANAnnounceReachabilityServiceInterface, ANAnnounceReachabilityManagerDelegate, NSXPCListenerDelegate>
 @property  NSXPCListener *listener
 @property  ANAnnounceReachabilityManager *reachabilityManager
 @property  NSMutableSet *connections
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[ANAnnounceReachabilityServiceListener setConnections:]
  -[ANAnnounceReachabilityServiceListener _removeConnection:]
  -[ANAnnounceReachabilityServiceListener _addConnection:]
  -[ANAnnounceReachabilityServiceListener announceReachabilityForHomeUUID:reply:]
  -[ANAnnounceReachabilityServiceListener connections]
  -[ANAnnounceReachabilityServiceListener announceReachabilityForRoomUUID:inHomeUUID:reply:]
  -[ANAnnounceReachabilityServiceListener .cxx_destruct]
  -[ANAnnounceReachabilityServiceListener reachabilityManager]
  -[ANAnnounceReachabilityServiceListener cleanForExit]
  -[ANAnnounceReachabilityServiceListener resumeWithCompletionHandler:]
  -[ANAnnounceReachabilityServiceListener announceReachabilityForRoomName:inHomeName:reply:]
  -[ANAnnounceReachabilityServiceListener _sendCurrentReachabilityToConnection:]
  -[ANAnnounceReachabilityServiceListener setReachabilityManager:]
  -[ANAnnounceReachabilityServiceListener announceReachabilityForHomeName:reply:]
  -[ANAnnounceReachabilityServiceListener reachabilityLevel:didChangeForRoom:inHome:]
  -[ANAnnounceReachabilityServiceListener reachabilityLevel:didChangeForHome:]
  -[ANAnnounceReachabilityServiceListener listener]
  -[ANAnnounceReachabilityServiceListener listener:shouldAcceptNewConnection:]
  -[ANAnnounceReachabilityServiceListener init]


ANAnnouncementStorageManager : NSObject <NSFileManagerDelegate>
 @property  NSUserDefaults *defaults
 @property  NSFileManager *fileManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANAnnouncementStorageManager sharedManager]

  // instance methods
  -[ANAnnouncementStorageManager defaults]
  -[ANAnnouncementStorageManager deleteAnnouncementWithID:endpointID:]
  -[ANAnnouncementStorageManager _cachesURLWithError:]
  -[ANAnnouncementStorageManager _removeMetadataForAnnouncementID:endpointID:]
  -[ANAnnouncementStorageManager _saveAudioDataForAnnouncement:endpointID:]
  -[ANAnnouncementStorageManager _removeDirectoryForEndpointsExcludingEndpointIDs:]
  -[ANAnnouncementStorageManager storedAnnouncementsForEndpointID:]
  -[ANAnnouncementStorageManager _baseDirectoryURLForEndpointID:error:]
  -[ANAnnouncementStorageManager .cxx_destruct]
  -[ANAnnouncementStorageManager _removeAudioDataForAnnouncementID:endpointID:]
  -[ANAnnouncementStorageManager removeAnnouncementDataExcludingDataForAnnouncementIDs:endpointID:]
  -[ANAnnouncementStorageManager fileManager]
  -[ANAnnouncementStorageManager _saveMetadataForAnnouncement:endpointID:]
  -[ANAnnouncementStorageManager deleteAnnouncementsExcludingAnnouncementsForEndpointIDs:]
  -[ANAnnouncementStorageManager saveAnnouncement:endpointID:]
  -[ANAnnouncementStorageManager _announcementDataDirectoryForType:endpointID:error:]
  -[ANAnnouncementStorageManager setFileManager:]
  -[ANAnnouncementStorageManager fileManager:shouldProceedAfterError:removingItemAtURL:]


ANAnalyticsCounter : NSObject
 @property  unsigned long hexCount
 @property  unsigned int count

  // instance methods
  -[ANAnalyticsCounter setCount:]
  -[ANAnalyticsCounter finished]
  -[ANAnalyticsCounter count]
  -[ANAnalyticsCounter init]
  -[ANAnalyticsCounter append:]
  -[ANAnalyticsCounter initWithHexCount:]
  -[ANAnalyticsCounter payload:keyTwo:]
  -[ANAnalyticsCounter hexCount]
  -[ANAnalyticsCounter setHexCount:]


ANAnalyticsStorage : NSObject
 @property  NSMutableDictionary *eventPayloads
 @property  ANDefaults *defaults
 @property  NSDictionary *eventsToReport

  // instance methods
  -[ANAnalyticsStorage defaults]
  -[ANAnalyticsStorage setDefaults:]
  -[ANAnalyticsStorage .cxx_destruct]
  -[ANAnalyticsStorage eventsToReport]
  -[ANAnalyticsStorage _synchronizedSave]
  -[ANAnalyticsStorage save:payload:]
  -[ANAnalyticsStorage setEventPayloads:]
  -[ANAnalyticsStorage save:counter:]
  -[ANAnalyticsStorage initWithDefaults:]
  -[ANAnalyticsStorage erase]
  -[ANAnalyticsStorage eventPayloads]
  -[ANAnalyticsStorage init]


ANSimpleTrackPlayer : ANTrackPlayer
  // instance methods
  -[ANSimpleTrackPlayer playInternalWithCompletionHandler:]
  -[ANSimpleTrackPlayer handleInterruptionDelay:]


ANPlaybackManager : NSObject <ANTrackPlayerDelegate>
 @property  ANTrackPlayer *audioPlayer
 @property  NSMutableDictionary *playbackInfo
 @property  NSMutableOrderedSet *announcementsToPlay
 @property  long long lastAnnoucementIndex
 @property  unsigned long playbackOptions
 @property  NSObject<OS_dispatch_queue> *playbackQueue
 @property  NSUUID *endpointID
 @property  @? playbackCompletionHandler
 @property  NSObject<OS_os_log> *log
 @property  NSDictionary *lastPlayedAnnouncementInfo
 @property  unsigned long playbackState
 @property  unsigned long playbackItemCount
 @property  <ANPlaybackManagerDelegate> *delegate
 @property  <ANPlaybackManagerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANPlaybackManager managerWithEndpointID:]

  // instance methods
  -[ANPlaybackManager _stopPlayingAnnouncementsWithCompletionHandler:]
  -[ANPlaybackManager dataSource]
  -[ANPlaybackManager playbackState]
  -[ANPlaybackManager setDelegate:]
  -[ANPlaybackManager playbackQueue]
  -[ANPlaybackManager delegate]
  -[ANPlaybackManager updatePlaybackForAnnouncementID:options:]
  -[ANPlaybackManager setLastAnnoucementIndex:]
  -[ANPlaybackManager setAnnouncementsToPlay:]
  -[ANPlaybackManager playbackOptions]
  -[ANPlaybackManager _stopAudioPlayer]
  -[ANPlaybackManager .cxx_destruct]
  -[ANPlaybackManager _previousAnnouncementWithCompletionHandler:]
  -[ANPlaybackManager _startPlayingAnnouncements]
  -[ANPlaybackManager setAudioPlayer:]
  -[ANPlaybackManager playbackInfo]
  -[ANPlaybackManager lastPlayedAnnouncementInfo]
  -[ANPlaybackManager _nextAnnouncementWithCompletionHandler:]
  -[ANPlaybackManager performPlaybackCommand:completionHandler:]
  -[ANPlaybackManager _playAnnouncementsWithIDs:options:completionHandler:]
  -[ANPlaybackManager playbackCompletionHandler]
  -[ANPlaybackManager log]
  -[ANPlaybackManager setPlaybackCompletionHandler:]
  -[ANPlaybackManager setEndpointID:]
  -[ANPlaybackManager _announcementsForPlaybackOptions:fromAnnouncements:]
  -[ANPlaybackManager _updatePlaybackInfoForAnnouncementID:options:player:]
  -[ANPlaybackManager trackPlayer:didFinishPlayingTrackType:announcementID:error:]
  -[ANPlaybackManager setDataSource:]
  -[ANPlaybackManager lastAnnoucementIndex]
  -[ANPlaybackManager endpointID]
  -[ANPlaybackManager initWithEndpointID:]
  -[ANPlaybackManager _nextAnnouncementToPlay]
  -[ANPlaybackManager _playAnnouncements:announceIDToStart:options:completionHandler:]
  -[ANPlaybackManager audioPlayer]
  -[ANPlaybackManager _handlePlaybackEndedForPlayer:withError:]
  -[ANPlaybackManager trackPlayer:didUpdatePlaybackState:announcementID:]
  -[ANPlaybackManager announcementsToPlay]
  -[ANPlaybackManager _createTrackPlayerWithAnnouncement:options:anchorPoint:]
  -[ANPlaybackManager playbackItemCount]


ANHomeManager : NSObject <HMHomeManagerDelegate, HMHomeDelegate, HMHomeDelegatePrivate, HMAccessoryDelegatePrivate, ANAnalyticsDailyHomesProvider>
 @property  NSArray *homesSupportingAnnounce
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSMutableArray *homesLoadedCompletionHandlers
 @property  BOOL homesLoaded
 @property  HMHomeManager *homeManager
 @property  NSMapTable *delegatesToQueues
 @property  NSDate *loadHomesStart
 @property  HMAccessory *currentAccessory
 @property  HMHome *currentHome
 @property  ANAccessorySettingsCache *accessorySettingsCache
 @property  NSArray *allHomes
 @property  NSArray *homes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANHomeManager defaultHomeOptions]
  +[ANHomeManager shared]

  // instance methods
  -[ANHomeManager homes]
  -[ANHomeManager currentAccessory]
  -[ANHomeManager home:didRemoveUser:]
  -[ANHomeManager homeManager:didRemoveHome:]
  -[ANHomeManager home:didAddAccessory:]
  -[ANHomeManager homeManagerDidUpdateHomes:]
  -[ANHomeManager homeManager:didAddHome:]
  -[ANHomeManager home:didAddUser:]
  -[ANHomeManager serialQueue]
  -[ANHomeManager home:didRemoveAccessory:]
  -[ANHomeManager homesSupportingAnnounce]
  -[ANHomeManager isLocalDeviceInRoom:]
  -[ANHomeManager _findBestHomeNames]
  -[ANHomeManager accessoryDidUpdateControllable:]
  -[ANHomeManager initWithCaching:]
  -[ANHomeManager currentHome]
  -[ANHomeManager registerDelegate:queue:]
  -[ANHomeManager .cxx_destruct]
  -[ANHomeManager _homesForContext:]
  -[ANHomeManager accessoryDidUpdateName:]
  -[ANHomeManager _currentHomesWeAreIn]
  -[ANHomeManager home:didUpdateAccessControlForUser:]
  -[ANHomeManager loadHomeSynchronous]
  -[ANHomeManager homesWithZoneNames:]
  -[ANHomeManager homeManager]
  -[ANHomeManager homesLoadedCompletionHandlers]
  -[ANHomeManager _homeNamesForAccessoryForContext:]
  -[ANHomeManager homeNamesForContext:]
  -[ANHomeManager _executeBlockForDelegates:]
  -[ANHomeManager homesWithRoomNames:]
  -[ANHomeManager allHomes]
  -[ANHomeManager homesLoaded]
  -[ANHomeManager homeDidUpdateAccessControlForCurrentUser:]
  -[ANHomeManager delegatesToQueues]
  -[ANHomeManager loadHomesStart]
  -[ANHomeManager homeWithName:]
  -[ANHomeManager initWithCaching:homeOptions:]
  -[ANHomeManager _notifyManagerLoadedHomes:]
  -[ANHomeManager accessorySettingsCache]
  -[ANHomeManager homeForID:]
  -[ANHomeManager loadHomes:]
  -[ANHomeManager setHomesLoaded:]
  -[ANHomeManager init]
  -[ANHomeManager isEndpointWithUUID:inRoomWithName:]


ANAnalytics : NSObject <ANAnalyticsDailyDelegate>
 @property  <ANAnalyticsSystemProtocol> *system
 @property  <ANAnalyticsAssistantProtocol> *assistant
 @property  <ANAnalyticsDailyProtocol> *dailyReporter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANAnalytics shared]

  // instance methods
  -[ANAnalytics assistant]
  -[ANAnalytics dailyReportError:]
  -[ANAnalytics dailyReport:withPayload:]
  -[ANAnalytics system]
  -[ANAnalytics announcementEntryAgeLimit:timeExceeded:context:]
  -[ANAnalytics dailyReporter]
  -[ANAnalytics announcementReceived:withTime:receiveTimeType:context:]
  -[ANAnalytics dailyReportComplete]
  -[ANAnalytics announcementFinishedPlaying:withTime:ofGroupCount:context:]
  -[ANAnalytics .cxx_destruct]
  -[ANAnalytics error:context:]
  -[ANAnalytics announcementsStorageAgeLimit:context:]
  -[ANAnalytics initWithSystem:assistant:dailyReporter:]
  -[ANAnalytics announcementPlayed:withTime:deadlineViolation:playbackSource:ofGroupCount:context:]
  -[ANAnalytics error:]
  -[ANAnalytics announcementsExpired:ofGroupCount:context:]
  -[ANAnalytics playbackAction:fromSource:context:]
  -[ANAnalytics announcementSent:inHome:withError:withTime:sendType:ofGroupCount:context:]
  -[ANAnalytics recordReachableHomes:]


ANAnchorTrackPlayer : ANTrackPlayer
 @property  {?=qiIq} startTime

  // instance methods
  -[ANAnchorTrackPlayer startTime]
  -[ANAnchorTrackPlayer setStartTime:]
  -[ANAnchorTrackPlayer playInternalWithCompletionHandler:]
  -[ANAnchorTrackPlayer handleInterruptionDelay:]


ANAnnouncementCoordinator : NSObject <ANAnnouncementManagerDelegte, ANPlaybackManagerDelegate, ANPlaybackManagerDataSource, ANMessengerDelegate, ANCompanionConnectionDelegate>
 @property  ANParticipant *localParticipant
 @property  NSSet *scanningDeviceCandidates
 @property  ANMessenger *messenger
 @property  NSMutableDictionary *announcementManagers
 @property  NSMutableDictionary *playbackManagers
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMapTable *delegatesToQueues
 @property  ANCompanionConnection *companionConnection
 @property  ANAnnouncementStatePublisher *playbackStatePublisher
 @property  NSObject<OS_os_log> *log
 @property  _TtC14AnnounceDaemon31SiriReferenceResolutionDonation *siriRRDonation
 @property  <ANRemotePlaybackStatusProvider> *remotePlaybackStatusProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANAnnouncementCoordinator sharedCoordinator]
  +[ANAnnouncementCoordinator localDeviceIdentifier]

  // instance methods
  -[ANAnnouncementCoordinator addDelegate:queue:]
  -[ANAnnouncementCoordinator resumeAllTimersForEndpointID:]
  -[ANAnnouncementCoordinator setPlaybackStartedForAnnouncement:endpointID:]
  -[ANAnnouncementCoordinator mockAnnouncement:playbackDeadline:sentHandler:]
  -[ANAnnouncementCoordinator setPlaybackStatePublisher:]
  -[ANAnnouncementCoordinator playbackManager:announcementsForIdentifiers:]
  -[ANAnnouncementCoordinator playbackManagers]
  -[ANAnnouncementCoordinator siriRRDonation]
  -[ANAnnouncementCoordinator _removePlaybackManagerForIdentifier:]
  -[ANAnnouncementCoordinator playbackManager:didFinishPlayingAnnouncement:withOptions:]
  -[ANAnnouncementCoordinator updateAnnouncement:statusFlags:endpointID:]
  -[ANAnnouncementCoordinator lastPlayedAnnouncementInfoForEndpointID:]
  -[ANAnnouncementCoordinator announcementsForPlaybackManager:]
  -[ANAnnouncementCoordinator _handleReceivedAnnouncement:]
  -[ANAnnouncementCoordinator allAnnouncementsSortedByReceiptForEndpointID:]
  -[ANAnnouncementCoordinator failedToDeliverAnnouncement:error:]
  -[ANAnnouncementCoordinator _initializeManagers]
  -[ANAnnouncementCoordinator removeOldAnnouncementsForEndpointID:]
  -[ANAnnouncementCoordinator setPlaybackStoppedForAnnouncement:endpointID:]
  -[ANAnnouncementCoordinator _notifyDidReceiveAnnouncement:forEndpointID:]
  -[ANAnnouncementCoordinator .cxx_destruct]
  -[ANAnnouncementCoordinator messenger]
  -[ANAnnouncementCoordinator cleanForExit]
  -[ANAnnouncementCoordinator companionConnection]
  -[ANAnnouncementCoordinator scanningDeviceCandidates]
  -[ANAnnouncementCoordinator receivedAnnouncement:]
  -[ANAnnouncementCoordinator resolveIdentifier:]
  -[ANAnnouncementCoordinator playbackManagerDidFinishPlayingAnnouncements:]
  -[ANAnnouncementCoordinator addAnnouncement:forEndpointID:completion:]
  -[ANAnnouncementCoordinator setRemotePlaybackStatusProvider:]
  -[ANAnnouncementCoordinator resetAllTimersForEndpointID:]
  -[ANAnnouncementCoordinator playbackManager:didUpdatePlaybackState:announcement:]
  -[ANAnnouncementCoordinator log]
  -[ANAnnouncementCoordinator _endpointIDForPlaybackManager:]
  -[ANAnnouncementCoordinator announcementManager:announcements:didChangeForGroupID:]
  -[ANAnnouncementCoordinator _executeBlockForDelegates:]
  -[ANAnnouncementCoordinator _createAnnouncementManagerForIdentifier:]
  -[ANAnnouncementCoordinator sendRequest:sentHandler:]
  -[ANAnnouncementCoordinator announcementsForGroupID:endpointID:]
  -[ANAnnouncementCoordinator playbackManager:didStartPlayingAnnouncementsAtMachAbsoluteTime:]
  -[ANAnnouncementCoordinator _createPlaybackManagerForIdentifier:]
  -[ANAnnouncementCoordinator announcementManagers]
  -[ANAnnouncementCoordinator _removeManagersForIdentifier:]
  -[ANAnnouncementCoordinator delegatesToQueues]
  -[ANAnnouncementCoordinator queue]
  -[ANAnnouncementCoordinator setCompanionConnection:]
  -[ANAnnouncementCoordinator localParticipant]
  -[ANAnnouncementCoordinator companionDidPlayAnnouncement:]
  -[ANAnnouncementCoordinator announcementsForIDs:endpointID:]
  -[ANAnnouncementCoordinator _endpointIDForAnnouncementManager:]
  -[ANAnnouncementCoordinator playbackStateForEndpointID:]
  -[ANAnnouncementCoordinator _removeAnnouncementManagerForIdentifier:]
  -[ANAnnouncementCoordinator pauseAllTimersForEndpointID:]
  -[ANAnnouncementCoordinator announcementForID:endpointID:]
  -[ANAnnouncementCoordinator performPlaybackCommand:endpointID:completionHandler:]
  -[ANAnnouncementCoordinator remotePlaybackStatusProvider]
  -[ANAnnouncementCoordinator playbackStatePublisher]
  -[ANAnnouncementCoordinator init]
  -[ANAnnouncementCoordinator playbackManager:didStartPlayingAnnouncement:]
  -[ANAnnouncementCoordinator cleanUpOldAnnouncementsForPlaybackManager:]


ANAnalyticsDaily : NSObject <ANAnalyticsDailyProtocol>
 @property  <ANBackgroundActivityProtocol> *backgroundActivity
 @property  <ANDefaultsProtocol> *defaults
 @property  ANAnalyticsStorage *eventStorage
 @property  <ANAnalyticsDailyHomesProvider> *homesProvider
 @property  <ANAnalyticsDailyMessagingProtocol> *messagingConnection
 @property  <ANAnalyticsDailyDelegate> *delegate

  // instance methods
  -[ANAnalyticsDaily backgroundActivity]
  -[ANAnalyticsDaily _cleanup]
  -[ANAnalyticsDaily defaults]
  -[ANAnalyticsDaily _dailyResponse]
  -[ANAnalyticsDaily _recordExecutionTime]
  -[ANAnalyticsDaily setDefaults:]
  -[ANAnalyticsDaily announcementSent:inHome:]
  -[ANAnalyticsDaily setDelegate:]
  -[ANAnalyticsDaily _isCoordinationDevice]
  -[ANAnalyticsDaily setMessagingConnection:]
  -[ANAnalyticsDaily messagingConnection]
  -[ANAnalyticsDaily delegate]
  -[ANAnalyticsDaily setHomesProvider:]
  -[ANAnalyticsDaily _executeBackgroundActivity:]
  -[ANAnalyticsDaily eventStorage]
  -[ANAnalyticsDaily .cxx_destruct]
  -[ANAnalyticsDaily _collectForAnnounce:]
  -[ANAnalyticsDaily homesProvider]
  -[ANAnalyticsDaily _stringForDeferredResult:]
  -[ANAnalyticsDaily _collectForAnnouncementsInHome:completion:]
  -[ANAnalyticsDaily setBackgroundActivity:]
  -[ANAnalyticsDaily _collectPayload:]
  -[ANAnalyticsDaily _collectForHome:homes:]
  -[ANAnalyticsDaily start]
  -[ANAnalyticsDaily recordReachableHomes:]
  -[ANAnalyticsDaily initWithBackgroundActivity:defaults:homesProvider:messagingConnection:]
  -[ANAnalyticsDaily _reportEventStorage]
  -[ANAnalyticsDaily _resetDailyAnnouncements]
  -[ANAnalyticsDaily init]
  -[ANAnalyticsDaily _registerRapportDailyRequest]


ANTrackPlayer : NSObject
 @property  NSObject<OS_dispatch_queue> *mainQueue
 @property  unsigned long playbackState
 @property  double interruptionStart
 @property  unsigned long options
 @property  ANAudioSessionManager *audioSessionManager
 @property  BOOL readyToPlay
 @property  ANTimer *interruptionTimer
 @property  ANTimer *playerTimer
 @property  BOOL playbackPending
 @property  @? handler
 @property  <ANTrackPlayerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  int numberActiveTracks
 @property  NSString *activelyPlayingAnnouncementID
 @property  AVQueuePlayer *queuePlayer
 @property  double silenceBetweenEachTrack
 @property  NSURL *audioFileAtStart
 @property  double trimStartTone
 @property  NSURL *audioFileTransition
 @property  double trimTransitionTone
 @property  double previousSkipGoesToPreviousTrackDelta
 @property  AVAudioSession *audioSession
 @property  NSMutableArray *playerItems
 @property  NSUUID *endpointUUID
 @property  NSObject<OS_os_log> *log

  // instance methods
  -[ANTrackPlayer stopWithCompletionHandler:]
  -[ANTrackPlayer setHandler:]
  -[ANTrackPlayer playbackState]
  -[ANTrackPlayer setDelegate:]
  -[ANTrackPlayer delegate]
  -[ANTrackPlayer end]
  -[ANTrackPlayer setDelegateQueue:]
  -[ANTrackPlayer dealloc]
  -[ANTrackPlayer setPlaybackState:]
  -[ANTrackPlayer .cxx_destruct]
  -[ANTrackPlayer delegateQueue]
  -[ANTrackPlayer options]
  -[ANTrackPlayer observeValueForKeyPath:ofObject:change:context:]
  -[ANTrackPlayer log]
  -[ANTrackPlayer handler]
  -[ANTrackPlayer endpointUUID]
  -[ANTrackPlayer _callDelegateWithBlock:]
  -[ANTrackPlayer mainQueue]
  -[ANTrackPlayer initWithOptions:]
  -[ANTrackPlayer audioSession]
  -[ANTrackPlayer playWithCompletionHandler:]
  -[ANTrackPlayer prepareToPlay]
  -[ANTrackPlayer readyToPlay]
  -[ANTrackPlayer queuePlayer]
  -[ANTrackPlayer setQueuePlayer:]
  -[ANTrackPlayer audioSessionInterruptionHandler:]
  -[ANTrackPlayer playerRateChangedHandler:]
  -[ANTrackPlayer _registerForNotificationsWithAudioSession:]
  -[ANTrackPlayer _deregisterForNotificationsWithAudioSession:]
  -[ANTrackPlayer playInternalWithCompletionHandler:]
  -[ANTrackPlayer handleInterruptionDelay:]
  -[ANTrackPlayer audioSessionMediaServicesLostHandler:]
  -[ANTrackPlayer audioSessionMediaServicesResetHandler:]
  -[ANTrackPlayer playerItemPlayedToEndHandler:]
  -[ANTrackPlayer initWithOptions:endpointUUID:]
  -[ANTrackPlayer add:announcementID:]
  -[ANTrackPlayer _add:announcementID:trackType:]
  -[ANTrackPlayer _addURL:announcementID:trackType:]
  -[ANTrackPlayer _insertAudioBetween]
  -[ANTrackPlayer _playWithCompletionHandler:]
  -[ANTrackPlayer activelyPlayingAnnouncementID]
  -[ANTrackPlayer _stopAndUpdatePlaybackState:]
  -[ANTrackPlayer nextWithCompletionHandler:]
  -[ANTrackPlayer previousWithCompletionHandler:]
  -[ANTrackPlayer numberActiveTracks]
  -[ANTrackPlayer _configureAudioSession]
  -[ANTrackPlayer _playerInfoForAVPlayerItem:]
  -[ANTrackPlayer _addObserverForPlayer:]
  -[ANTrackPlayer _removeObserverForPlayer:]
  -[ANTrackPlayer _removeItemObserverForPlayer:]
  -[ANTrackPlayer _stringForTimeControlStatus:]
  -[ANTrackPlayer _stringForPlayerStatus:]
  -[ANTrackPlayer _stringForPlayerItemStatus:]
  -[ANTrackPlayer _stopPlaybackAndFailWithItem:error:]
  -[ANTrackPlayer stopInternalSync]
  -[ANTrackPlayer nextInternalSync]
  -[ANTrackPlayer previousInternalSync]
  -[ANTrackPlayer _resumePlaybackAfterInterruptionAtTimeInterval:]
  -[ANTrackPlayer _handleInterruptionEndedAndShouldResume:]
  -[ANTrackPlayer silenceBetweenEachTrack]
  -[ANTrackPlayer setSilenceBetweenEachTrack:]
  -[ANTrackPlayer audioFileAtStart]
  -[ANTrackPlayer setAudioFileAtStart:]
  -[ANTrackPlayer trimStartTone]
  -[ANTrackPlayer setTrimStartTone:]
  -[ANTrackPlayer audioFileTransition]
  -[ANTrackPlayer setAudioFileTransition:]
  -[ANTrackPlayer trimTransitionTone]
  -[ANTrackPlayer setTrimTransitionTone:]
  -[ANTrackPlayer previousSkipGoesToPreviousTrackDelta]
  -[ANTrackPlayer setPreviousSkipGoesToPreviousTrackDelta:]
  -[ANTrackPlayer playerItems]
  -[ANTrackPlayer interruptionStart]
  -[ANTrackPlayer setInterruptionStart:]
  -[ANTrackPlayer audioSessionManager]
  -[ANTrackPlayer setReadyToPlay:]
  -[ANTrackPlayer interruptionTimer]
  -[ANTrackPlayer setInterruptionTimer:]
  -[ANTrackPlayer playerTimer]
  -[ANTrackPlayer setPlayerTimer:]
  -[ANTrackPlayer playbackPending]
  -[ANTrackPlayer setPlaybackPending:]


ANBackgroundActivity : NSObject <ANBackgroundActivityProtocol>
 @property  NSBackgroundActivityScheduler *backgroundActivity

  // instance methods
  -[ANBackgroundActivity backgroundActivity]
  -[ANBackgroundActivity shouldDefer]
  -[ANBackgroundActivity scheduleWithBlock:]
  -[ANBackgroundActivity .cxx_destruct]
  -[ANBackgroundActivity init]


ANMessengerDestination : NSObject
 @property  HMHome *home
 @property  NSArray *accessories
 @property  NSArray *users
 @property  NSArray *devices

  // class methods
  +[ANMessengerDestination relayDestinationForHome:rooms:rapportConnection:error:]
  +[ANMessengerDestination destinationForHome:excludingUsers:excludingAccessories:rapportConnection:]
  +[ANMessengerDestination destinationForAccessoriesInHome:rooms:rapportConnection:]
  +[ANMessengerDestination _destinationForAppleAccessories:home:rooms:rapportConnection:]
  +[ANMessengerDestination _bestRemoteRelayAccessoryFromAccessories:inHome:]

  // instance methods
  -[ANMessengerDestination home]
  -[ANMessengerDestination devices]
  -[ANMessengerDestination removeUser:]
  -[ANMessengerDestination .cxx_destruct]
  -[ANMessengerDestination setDevices:]
  -[ANMessengerDestination setAccessories:]
  -[ANMessengerDestination users]
  -[ANMessengerDestination accessories]
  -[ANMessengerDestination addAccessory:]
  -[ANMessengerDestination init]
  -[ANMessengerDestination setHome:]
  -[ANMessengerDestination setUsers:]
  -[ANMessengerDestination idsIdentifiersForService:]
  -[ANMessengerDestination participantsWithService:]
  -[ANMessengerDestination addDeviceWithID:rapportConnection:]
  -[ANMessengerDestination addUser:inHome:]
  -[ANMessengerDestination addUser:inHome:rapportConnection:]
  -[ANMessengerDestination removeDeviceWithID:]
  -[ANMessengerDestination removeUser:rapportConnection:]


ANRapportConnection : NSObject <ANRapportConnectionProvider>
 @property  RPCompanionLinkClient *companionLinkClient
 @property  NSObject<OS_dispatch_queue> *rapportQueue
 @property  NSMutableDictionary *clients
 @property  NSArray *activeDevices
 @property  NSDate *lastScanStartTimestamp
 @property  NSMapTable *deviceDelegatesToQueues
 @property  NSObject<OS_dispatch_source> *timer
 @property  BOOL isTimerSuspended
 @property  <ANRapportConnectionDelegate> *delegate
 @property  RPCompanionLinkDevice *localDevice
 @property  NSArray *devices
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANRapportConnection sharedConnection]

  // instance methods
  -[ANRapportConnection setClients:]
  -[ANRapportConnection clients]
  -[ANRapportConnection _sendDailyRequest:handler:]
  -[ANRapportConnection _notifyDeviceDelegatesConnectionDidFindDevice:]
  -[ANRapportConnection setDelegate:]
  -[ANRapportConnection _sendHomeLocationStatusRequestToDevice:handler:]
  -[ANRapportConnection setActiveDevices:]
  -[ANRapportConnection _setupLink:]
  -[ANRapportConnection delegate]
  -[ANRapportConnection devices]
  -[ANRapportConnection registerDailyRequest:]
  -[ANRapportConnection .cxx_destruct]
  -[ANRapportConnection setTimer:]
  -[ANRapportConnection _startTimer]
  -[ANRapportConnection timer]
  -[ANRapportConnection _decrementMessageCountForCompanionLinkClient:]
  -[ANRapportConnection _cancelTimer]
  -[ANRapportConnection setCompanionLinkClient:]
  -[ANRapportConnection _registerHomeLocationStatusRequestHandler]
  -[ANRapportConnection _registerMessageRequestHandler]
  -[ANRapportConnection sendHomeLocationStatusRequestToDevice:handler:]
  -[ANRapportConnection localDevice]
  -[ANRapportConnection _incrementMessageCountForCompanionLinkClient:]
  -[ANRapportConnection deactivateLinkWithOptions:]
  -[ANRapportConnection activeDevices]
  -[ANRapportConnection companionLinkClient]
  -[ANRapportConnection _needsScan]
  -[ANRapportConnection sendDailyRequest:handler:]
  -[ANRapportConnection deviceDelegatesToQueues]
  -[ANRapportConnection isTimerSuspended]
  -[ANRapportConnection _executeBlockForDelegates:]
  -[ANRapportConnection rapportQueue]
  -[ANRapportConnection activateLinkWithOptions:completion:]
  -[ANRapportConnection _updateDevices]
  -[ANRapportConnection setRapportQueue:]
  -[ANRapportConnection activateLinkWithOptions:]
  -[ANRapportConnection _linkForDevice:handler:]
  -[ANRapportConnection _remainingScanTimeInterval]
  -[ANRapportConnection setLastScanStartTimestamp:]
  -[ANRapportConnection lastScanStartTimestamp]
  -[ANRapportConnection _registerHandlers]
  -[ANRapportConnection addDeviceDelegate:queue:]
  -[ANRapportConnection _simulateDeliveryFailureForMessage:]
  -[ANRapportConnection _tearDownLink]
  -[ANRapportConnection _handleTimerExpired]
  -[ANRapportConnection _notifyDeviceDelegatesConnectionDidLoseDevice:]
  -[ANRapportConnection sendMessage:device:responseHandler:]
  -[ANRapportConnection init]
  -[ANRapportConnection setIsTimerSuspended:]
  -[ANRapportConnection _handleLinkInvalidation]
  -[ANRapportConnection _sendMessage:linkClient:handler:]


ANAnalyticsDailyMessaging : NSObject <ANAnalyticsDailyMessagingProtocol>
 @property  <ANRapportConnectionProvider> *rapportConnection
 @property  NSDictionary *devicesCountingAnnouncements
 @property  BOOL isDeviceAnalyticsCoordinator

  // instance methods
  -[ANAnalyticsDailyMessaging rapportConnection]
  -[ANAnalyticsDailyMessaging registerDailyRequest:]
  -[ANAnalyticsDailyMessaging .cxx_destruct]
  -[ANAnalyticsDailyMessaging isDeviceAnalyticsCoordinator]
  -[ANAnalyticsDailyMessaging devicesCountingAnnouncements]
  -[ANAnalyticsDailyMessaging sendDailyRequest:handler:]
  -[ANAnalyticsDailyMessaging init]


ANAnalyticsAssistant : NSObject <ANAnalyticsAssistantProtocol>
  // instance methods
  -[ANAnalyticsAssistant senderDataForAnnouncement:]
  -[ANAnalyticsAssistant _linearBucketAtInterval:value:max:]
  -[ANAnalyticsAssistant bucketFromSize:]
  -[ANAnalyticsAssistant bucketFromReceiveTime:]
  -[ANAnalyticsAssistant _playerForAnnouncement:]
  -[ANAnalyticsAssistant bucketFromDuration:]
  -[ANAnalyticsAssistant audioDataForAnnouncement:]
  -[ANAnalyticsAssistant boundGroupCount:]


ANAnnouncementManager : NSObject
 @property  NSMutableDictionary *timers
 @property  NSMutableDictionary *homeAnnouncements
 @property  BOOL timersSuspended
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSObject<OS_os_log> *log
 @property  NSUUID *endpointID
 @property  <ANAnnouncementManagerDelegte> *delegate
 @property  NSArray *allAnnouncementsSortedByReceipt

  // class methods
  +[ANAnnouncementManager managerWithEndpointID:]

  // instance methods
  -[ANAnnouncementManager _startTimer:]
  -[ANAnnouncementManager pauseAllTimers]
  -[ANAnnouncementManager announcementsForIDs:]
  -[ANAnnouncementManager serialQueue]
  -[ANAnnouncementManager removeAllAnnouncements]
  -[ANAnnouncementManager _addAnnouncement:home:groupID:]
  -[ANAnnouncementManager setDelegate:]
  -[ANAnnouncementManager homeAnnouncements]
  -[ANAnnouncementManager delegate]
  -[ANAnnouncementManager resumeAllTimers]
  -[ANAnnouncementManager _resetTimer:]
  -[ANAnnouncementManager _cleanDirectory]
  -[ANAnnouncementManager announcementForID:]
  -[ANAnnouncementManager allAnnouncementsSortedByReceipt]
  -[ANAnnouncementManager _suspendTimer:]
  -[ANAnnouncementManager _notifyDelegateAnnouncementsChangedForGroupID:]
  -[ANAnnouncementManager _loadStoredAnnouncements]
  -[ANAnnouncementManager _handleExpiredTimer:withID:]
  -[ANAnnouncementManager .cxx_destruct]
  -[ANAnnouncementManager resetAllTimers]
  -[ANAnnouncementManager _removeAnnouncementsForGroupID:]
  -[ANAnnouncementManager cleanForExit]
  -[ANAnnouncementManager announcementsForGroupID:]
  -[ANAnnouncementManager _shouldAccept:accept:]
  -[ANAnnouncementManager _startTimerWithID:]
  -[ANAnnouncementManager timersSuspended]
  -[ANAnnouncementManager log]
  -[ANAnnouncementManager updateAnnouncement_sync:statusFlags:]
  -[ANAnnouncementManager removeOldAnnouncements]
  -[ANAnnouncementManager setTimersSuspended:]
  -[ANAnnouncementManager endpointID]
  -[ANAnnouncementManager _removeAnnouncementsHittingStorageAgeLimit]
  -[ANAnnouncementManager initWithEndpointID:]
  -[ANAnnouncementManager timers]
  -[ANAnnouncementManager _removeAnnouncementWithID:]
  -[ANAnnouncementManager addAnnouncement:completion:]
  -[ANAnnouncementManager _addAnnouncementToReceiveQueue:]


ANAnnouncementStatePublisher : NSObject
  // instance methods
  -[ANAnnouncementStatePublisher _register]
  -[ANAnnouncementStatePublisher dealloc]
  -[ANAnnouncementStatePublisher .cxx_destruct]
  -[ANAnnouncementStatePublisher _publishState:name:]
  -[ANAnnouncementStatePublisher publishState:name:]
  -[ANAnnouncementStatePublisher _setState:withToken:]
  -[ANAnnouncementStatePublisher _unregister]
  -[ANAnnouncementStatePublisher invalidate]
  -[ANAnnouncementStatePublisher init]
  -[ANAnnouncementStatePublisher _setName:]


ANIDSConnection : NSObject <IDSServiceDelegate, ANIDSConnectionProvider>
 @property  NSObject<OS_dispatch_queue> *idsQueue
 @property  NSMutableDictionary *outgoingMessages
 @property  <ANConnectionDelegate> *delegate
 @property  IDSService *service
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[ANIDSConnection purgeTemporaryFiles]

  // instance methods
  -[ANIDSConnection idsQueue]
  -[ANIDSConnection setDelegate:]
  -[ANIDSConnection sendMessage:messageUUIDString:destination:]
  -[ANIDSConnection delegate]
  -[ANIDSConnection service:account:identifier:didSendWithSuccess:error:context:]
  -[ANIDSConnection .cxx_destruct]
  -[ANIDSConnection service]
  -[ANIDSConnection service:account:incomingMessage:fromID:context:]
  -[ANIDSConnection outgoingMessages]
  -[ANIDSConnection service:account:incomingResourceAtURL:metadata:fromID:context:]
  -[ANIDSConnection service:account:incomingData:fromID:context:]
  -[ANIDSConnection init]
  -[ANIDSConnection setOutgoingMessages:]


ANCompanionConnection : NSObject
 @property  RPCompanionLinkClient *companionLinkClient
 @property  <ANCompanionConnectionDelegate> *delegate

  // instance methods
  -[ANCompanionConnection setDelegate:]
  -[ANCompanionConnection delegate]
  -[ANCompanionConnection _setupLink]
  -[ANCompanionConnection .cxx_destruct]
  -[ANCompanionConnection companionLinkClient]
  -[ANCompanionConnection broadcastAnnouncementPlayed:]
  -[ANCompanionConnection _registerForEvents]
  -[ANCompanionConnection _tearDownLink]
  -[ANCompanionConnection init]


ANCoreAnalytics : NSObject <ANAnalyticsSystemProtocol>
  // instance methods
  -[ANCoreAnalytics send:withPayload:]


_TtC14AnnounceDaemon14AnnounceServer : NSObject
  // instance methods
  -[_TtC14AnnounceDaemon14AnnounceServer .cxx_destruct]
  -[_TtC14AnnounceDaemon14AnnounceServer init]


_TtC14AnnounceDaemon31SiriReferenceResolutionDonation : NSObject
  // instance methods
  -[_TtC14AnnounceDaemon31SiriReferenceResolutionDonation makePlaybackDonationWithAnnouncementID:]
  -[_TtC14AnnounceDaemon31SiriReferenceResolutionDonation .cxx_destruct]
  -[_TtC14AnnounceDaemon31SiriReferenceResolutionDonation init]


HMRoom(Announce)
	// class methods
	+[HMRoom(Announce) an_roomsWithAnnounceAccessoriesFromRooms:]

RPCompanionLinkDevice(AnnounceAdditions)
	// instance methods
	-[RPCompanionLinkDevice(AnnounceAdditions) supportsAnnounce]
	-[RPCompanionLinkDevice(AnnounceAdditions) isAccessory]
	-[RPCompanionLinkDevice(AnnounceAdditions) isOwnerDevice]
	-[RPCompanionLinkDevice(AnnounceAdditions) isPairedCompanion]

ANAnnouncement(RemotePlaybackSession)
	// class methods
	+[ANAnnouncement(RemotePlaybackSession) defaultAudioEffects]
	+[ANAnnouncement(RemotePlaybackSession) uniqueAnnouncersInAnnouncements:inHome:withBlock:]
	+[ANAnnouncement(RemotePlaybackSession) contextsFrom:]

	// instance methods
	-[ANAnnouncement(RemotePlaybackSession) defaultActionURL]
	-[ANAnnouncement(RemotePlaybackSession) remoteSessionDictionary]
	-[ANAnnouncement(RemotePlaybackSession) sendFailureDictionary]
	-[ANAnnouncement(RemotePlaybackSession) processAudioWithEffects:error:]
	-[ANAnnouncement(RemotePlaybackSession) announcerNameInHome:]
	-[ANAnnouncement(RemotePlaybackSession) isAnnouncerInSameRoomAsAccessory:]

NSXPCConnection(Announce)
	// instance methods
	-[NSXPCConnection(Announce) clientID]
	-[NSXPCConnection(Announce) an_isRemotePlaybackSession]
	-[NSXPCConnection(Announce) hasAnnounceEntitlement]

ANParticipant(Home)
	// class methods
	+[ANParticipant(Home) participantsFromUsersInHome:]

	// instance methods
	-[ANParticipant(Home) initWithUser:]
	-[ANParticipant(Home) initWithDevice:]
	-[ANParticipant(Home) initWithAccessory:]
	-[ANParticipant(Home) initWithUser:andAccessory:]
	-[ANParticipant(Home) populateWithAccessory:]
	-[ANParticipant(Home) populateWithUser:]
	-[ANParticipant(Home) populateWithUser:andAccessory:]
	-[ANParticipant(Home) populateWithDevice:]
	-[ANParticipant(Home) nameInHome:]

IDSDevice(AnnounceAdditions)
	// instance methods
	-[IDSDevice(AnnounceAdditions) isHomePod]

IDSService(AnnounceAdditions)
	// instance methods
	-[IDSService(AnnounceAdditions) devicesExcludingHomePods]
	-[IDSService(AnnounceAdditions) uniqueIdentifiersForDevicesExcludingAppleAccessories]

ANAnnouncementDestination(Home)
	// instance methods
	-[ANAnnouncementDestination(Home) home]
	-[ANAnnouncementDestination(Home) zones]
	-[ANAnnouncementDestination(Home) rooms]

HMHome(Announce)
	// instance methods
	-[HMHome(Announce) isAnnounceSupported]
	-[HMHome(Announce) isAnnounceAvailable]
	-[HMHome(Announce) isAnnounceEnabledForAnyAccessory]
	-[HMHome(Announce) isAnnounceEnabledForAnyAccessoryOrUser]
	-[HMHome(Announce) announceAccessAllowedForCurrentUser]
	-[HMHome(Announce) announceAccessAllowedForUser:]
	-[HMHome(Announce) usersIncludingCurrentUserWithAnnounceEnabled]
	-[HMHome(Announce) usersWithAnnounceEnabled]
	-[HMHome(Announce) usersIncludingCurrentUserWithAnnounceAndRemoteAccessEnabled]
	-[HMHome(Announce) homePodsIncludingCurrentAccessorySupportingAnnounce]
	-[HMHome(Announce) homePodsIncludingCurrentAccessoryWithAnnounceEnabled]
	-[HMHome(Announce) an_announceNotificationsEnabledForCurrentUserWithOverrideHomeLocationStatus:]
	-[HMHome(Announce) _usersWithAnnounceEnabledIncludingCurrentUser:]
	-[HMHome(Announce) _homePodsWithAnnounceEnabledIncludingCurrentAccessory:]
	-[HMHome(Announce) _homePodsSupportingAnnounceIncludingCurrentAccessory:]

(HMHome_Announce)
	// instance methods
	-[(HMHome_Announce) an_homesSupportingAnnounce]
	-[(HMHome_Announce) activeAccessoryDevicesSupportingAnnounce]
	-[(HMHome_Announce) activeDevicesSupportingAnnounce]
	-[(HMHome_Announce) activePersonalDevicesSupportingAnnounce]
	-[(HMHome_Announce) pairedCompanion]
	-[(HMHome_Announce) devicesInHome:]
	-[(HMHome_Announce) devicesByRemovingNonAccessoryDevicesNotBelongingToUsers:]
	-[(HMHome_Announce) personalDevicesForUser:]

HMZone(Announce)
	// class methods
	+[HMZone(Announce) an_zonesWithAnnounceAccessoriesFromZones:]

ANLocation(Home)
	// instance methods
	-[ANLocation(Home) containsAccessory:]
	-[ANLocation(Home) allRoomsInHome:]

ANAnnouncementDataItem(AudioProcessing)
	// instance methods
	-[ANAnnouncementDataItem(AudioProcessing) processAudioWithEffects:error:]

HMAccessory(Announce)
	// class methods
	+[HMAccessory(Announce) accessoriesWithAnnounceEnabledFromAccessories:]
	+[HMAccessory(Announce) announceAccessoriesFromAccessories:]
	+[HMAccessory(Announce) announceAccessoriesWithAnnounceEnabledFromAccessories:]
	+[HMAccessory(Announce) appleAnnounceAccessoriesFromAccessories:]
	+[HMAccessory(Announce) appleAnnounceHostAccessoriesFromAccessories:]

	// instance methods
	-[HMAccessory(Announce) an_isAnnounceEnabled]
	-[HMAccessory(Announce) an_isAnnounceAccessory]
	-[HMAccessory(Announce) an_isAppleAnnounceAccessory]
	-[HMAccessory(Announce) an_isAppleAnnounceHostAccessory]

RPCompanionLinkClient(AnnounceAdditions)
	// instance methods
	-[RPCompanionLinkClient(AnnounceAdditions) activeAccessoryDevicesSupportingAnnounce]
	-[RPCompanionLinkClient(AnnounceAdditions) activeDevicesSupportingAnnounce]
	-[RPCompanionLinkClient(AnnounceAdditions) activePersonalDevicesSupportingAnnounce]
	-[RPCompanionLinkClient(AnnounceAdditions) pairedCompanion]

AVAudioSession(AnnounceDaemon)
	// class methods
	+[AVAudioSession(AnnounceDaemon) audioSessionWithProxyAudioSessionID:endpointID:error:]

01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnounce 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnounceFeatureStatus 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnounceReachability 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnouncement 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnouncementContent 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnouncementContext 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnouncementDataItem 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnouncementDestination 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnouncementRequest 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANAnnouncementResult 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANDefaults 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANDevice 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANEndpointNotificationName 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANFiles 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANHomeContext 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANLocation 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANParticipant 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANPlaybackCommand 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANProcessAudio 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANSender 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANSpeechUtil 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANTimer 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANUtils 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANVolumeController 
01 00 0e00 /System/Library/PrivateFrameworks/Announce.framework/Announce: ANXPCTransactionManager 
01 00 1200 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioPlayer 
01 00 1200 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0500 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 0500 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 0500 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVQueuePlayer 
01 00 0300 /System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience: AVSystemController 
01 00 1400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStore 
01 00 1400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStoreConfiguration 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessory 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMBooleanSetting 
01 00 1800 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFLocationAuthorization 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHome 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeManager 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableHomeManagerConfiguration 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMRoom 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMUser 
01 00 0a00 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMZone 
01 00 0700 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSDevice 
01 00 0700 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 1700 /System/Library/Frameworks/Intents.framework/Intents: INReadAnnouncementIntent 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBackgroundActivityScheduler 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1000 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 1100 /usr/lib/libSystem.B.dylib: OS_dispatch_queue 
01 00 1100 /usr/lib/libSystem.B.dylib: OS_os_log 
01 00 0d00 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkClient 
01 00 0d00 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkDevice 
01 00 0600 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFCoordinatedAlertRequest 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNMutableNotificationContent 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationRequest 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationSound 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNUserNotificationCenter 
