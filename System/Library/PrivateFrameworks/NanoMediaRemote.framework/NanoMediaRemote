|| __DATA.__objc_data _OBJC_CLASS_$_NMRAppLaunchInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NMRIDSMessageCenter
|| __DATA.__objc_data _OBJC_CLASS_$_NMRMediaRemoteGetArtworkMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NMRMediaRemoteGetIconMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NMRMediaRemoteGetStateMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NMRMediaRemoteSetArtworkMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NMRMediaRemoteSetIconMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NMRMediaRemoteSetStateMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NMRMediaRemoteUpdater
|| __DATA.__objc_data _OBJC_CLASS_$_NMRNowPlayingApplicationInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NMRNowPlayingClient
|| __DATA.__objc_data _OBJC_CLASS_$_NMRNowPlayingController
|| __DATA.__objc_data _OBJC_CLASS_$_NMRNowPlayingState
|| __DATA.__objc_data _OBJC_CLASS_$_NMROrigin
|| __DATA.__objc_data _OBJC_CLASS_$_NMROriginInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NMROriginManager
|| __DATA.__objc_data _OBJC_CLASS_$_NMROriginMediaPlaybackCoreController
|| __DATA.__objc_data _OBJC_CLASS_$_NMRPlaceholderNowPlayingState
|| __DATA.__objc_data _OBJC_CLASS_$_NMRPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_NMRPlaybackQueueRequest
|| __DATA.__objc_data _OBJC_CLASS_$_NMRPlaybackQueueResponse
|| __DATA.__objc_data _OBJC_CLASS_$_NMRPlayerResponseNowPlayingState
|| __DATA.__objc_data _OBJC_CLASS_$_NMRProtobufSerialization
|| __DATA.__objc_data _OBJC_CLASS_$_NMRSendCommandMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NMRSendCommandResultMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRAppLaunchInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRIDSMessageCenter
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRMediaRemoteGetArtworkMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRMediaRemoteGetIconMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRMediaRemoteGetStateMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRMediaRemoteSetArtworkMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRMediaRemoteSetIconMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRMediaRemoteSetStateMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRMediaRemoteUpdater
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRNowPlayingApplicationInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRNowPlayingClient
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRNowPlayingController
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRNowPlayingState
|| __DATA.__objc_data _OBJC_METACLASS_$_NMROrigin
|| __DATA.__objc_data _OBJC_METACLASS_$_NMROriginInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NMROriginManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NMROriginMediaPlaybackCoreController
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRPlaceholderNowPlayingState
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRPlaybackQueueRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRPlaybackQueueResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRPlayerResponseNowPlayingState
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRProtobufSerialization
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRSendCommandMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NMRSendCommandResultMessage
|| __DATA_CONST.__const _NMRAugmentedNowPlayingInfoArtworkDataDigest
|| __DATA_CONST.__const _NMRCommandResultCodesKey
|| __DATA_CONST.__const _NMRCommandResultErrorKey
|| __DATA_CONST.__const _NMRCompanionNowPlayingApplicationIconDidChangeNotification
|| __DATA_CONST.__const _NMRMetricsSendCommandFailedToSendKey
|| __DATA_CONST.__const _NMRMetricsSendCommandFailedWithTimeoutKey
|| __DATA_CONST.__const _NMROriginConnectionStateDidChangeNotification
|| __DATA_CONST.__const _NMROriginDeviceInfoDidChangeNotification
|| __DATA_CONST.__const _NMROriginManagerActiveOriginDidChangeNotification
|| __DATA_CONST.__const _NMROriginManagerAvailableOriginsDidChangeNotification
|| __DATA_CONST.__const _NMRServiceEntitlement
|| __DATA_CONST.__const _NMRServiceName
|| __TEXT.__const _NMRMediaRemoteCommandMessageTimeout
|| __TEXT.__const _NMRMediaRemoteStateMessageDefaultTimeout
|| __TEXT.__const _NMRMediaRemoteStateMessageUserInitiatedTimeout
|| __TEXT.__const _NMRPrewarmSystemMusicAppMessageTimeout
|| __TEXT.__text _IDSMessagePriorityFromNMRIDSMessagePriority
|| __TEXT.__text _NMRCreateDigestForData
|| __TEXT.__text _NMRDigestEqual
|| __TEXT.__text _NMRDiscoverAndConnectEndpoints
|| __TEXT.__text _NMRGetArtworkDataDigest
|| __TEXT.__text _NMRIDSMessageTypeIsNonWaking
|| __TEXT.__text _NMRMetricsSendEvent
|| __TEXT.__text _NMRNowPlayingInfoAllowedKeys
|| __TEXT.__text _NMRNowPlayingInfoFromProtobuf
|| __TEXT.__text _NMRNowPlayingInfoToProtobuf
|| __TEXT.__text _NMROriginInfoArrayFromProtobuf
|| __TEXT.__text _NMROriginInfoArrayToProtobuf
|| __TEXT.__text _NMRPlaybackQueueDefaultObservedRange
|| __TEXT.__text _NMRPrewarmCompanionSystemMusicApp
|| __TEXT.__text _NMRRefreshMediaRemoteStateIfNecessary
|| __TEXT.__text _NMRShortCircuitedMediaRemoteInsertIntoAppPlaybackQueue
|| __TEXT.__text _NMRShortCircuitedMediaRemoteSendCommandToApp
|| __TEXT.__text _NMRShortCircuitedMediaRemoteSetAppPlaybackQueue
|| __TEXT.__text _NMRSupportedCommandsFromProtobuf
|| __TEXT.__text _NMRSupportedCommandsToProtobuf
|| __TEXT.__text _NSStringFromNMRIDSMessageType
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFArrayAppendArray
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFTypeArrayCallBacks
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ IDS: _IDSDefaultPairedDevice
__ IDS: _IDSMaxMessageTimeout
__ IDS: _IDSSendMessageOptionBypassDuetKey
__ IDS: _IDSSendMessageOptionEnforceRemoteTimeoutsKey
__ IDS: _IDSSendMessageOptionExpectsPeerResponseKey
__ IDS: _IDSSendMessageOptionFireAndForgetKey
__ IDS: _IDSSendMessageOptionForceLocalDeliveryKey
__ IDS: _IDSSendMessageOptionNonWakingKey
__ IDS: _IDSSendMessageOptionPeerResponseIdentifierKey
__ IDS: _IDSSendMessageOptionQueueOneIdentifierKey
__ IDS: _IDSSendMessageOptionTimeoutKey
__ IDS: _OBJC_CLASS_$_IDSProtobuf
__ IDS: _OBJC_CLASS_$_IDSService
__ MediaPlaybackCore: _MPCPlayerRequestErrorDomain
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerChangeRequest
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerPath
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerRequest
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerResponse
__ MediaPlayer: _MPMediaItemPropertyPersistentID
__ MediaPlayer: _MPMediaItemPropertyStoreID
__ MediaPlayer: _MPMediaItemPropertySubscriptionStoreItemID
__ MediaPlayer: _MPModelPropertyAlbumArtwork
__ MediaPlayer: _MPModelPropertyAlbumLibraryAdded
__ MediaPlayer: _MPModelPropertyAlbumTitle
__ MediaPlayer: _MPModelPropertyArtistName
__ MediaPlayer: _MPModelPropertyPlaylistArtwork
__ MediaPlayer: _MPModelPropertyPlaylistLibraryAdded
__ MediaPlayer: _MPModelPropertyPlaylistName
__ MediaPlayer: _MPModelPropertyRadioStationArtwork
__ MediaPlayer: _MPModelPropertyRadioStationName
__ MediaPlayer: _MPModelPropertySongArtwork
__ MediaPlayer: _MPModelPropertySongDuration
__ MediaPlayer: _MPModelPropertySongExplicit
__ MediaPlayer: _MPModelPropertySongTitle
__ MediaPlayer: _MPModelRelationshipAlbumArtist
__ MediaPlayer: _MPModelRelationshipGenericAlbum
__ MediaPlayer: _MPModelRelationshipGenericPlaylist
__ MediaPlayer: _MPModelRelationshipGenericRadioStation
__ MediaPlayer: _MPModelRelationshipGenericSong
__ MediaPlayer: _MPModelRelationshipSongAlbum
__ MediaPlayer: _MPModelRelationshipSongArtist
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyIsAutoPlayItem
__ MediaPlayer: _MPRequestUnderlyingErrorsUserInfoKey
__ MediaPlayer: _OBJC_CLASS_$_MPAVCompanionEndpointRoutingDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPAVEndpointRoutingDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPMediaPropertyPredicate
__ MediaPlayer: _OBJC_CLASS_$_MPMediaQuery
__ MediaPlayer: _OBJC_CLASS_$_MPModelSong
__ MediaPlayer: _OBJC_CLASS_$_MPPropertySet
__ MediaPlayer: _OBJC_CLASS_$_MPRequestResponseController
__ MediaPlayer: __MPAVRouteConnectionDidConnectNotification
__ MediaPlayer: __MPAVRouteConnectionDidInvalidateNotification
__ MediaRemote: _MRContentItemCopyUserInfo
__ MediaRemote: _MRContentItemCreate
__ MediaRemote: _MRContentItemGetAlbumArtistName
__ MediaRemote: _MRContentItemGetAlbumName
__ MediaRemote: _MRContentItemGetDuration
__ MediaRemote: _MRContentItemGetHasDuration
__ MediaRemote: _MRContentItemGetIdentifier
__ MediaRemote: _MRContentItemGetTitle
__ MediaRemote: _MRContentItemGetTrackArtistName
__ MediaRemote: _MRContentItemSetAlbumName
__ MediaRemote: _MRContentItemSetDuration
__ MediaRemote: _MRContentItemSetNowPlayingInfo
__ MediaRemote: _MRContentItemSetTitle
__ MediaRemote: _MRContentItemSetTrackArtistName
__ MediaRemote: _MRContentItemSetUserInfo
__ MediaRemote: _MRExternalDeviceGetConnectionState
__ MediaRemote: _MRMediaRemoteApplicationIsSystemMediaApplication
__ MediaRemote: _MRMediaRemoteApplicationIsSystemPodcastApplication
__ MediaRemote: _MRMediaRemoteCommandInfoCopyValueForKey
__ MediaRemote: _MRMediaRemoteCommandInfoCreate
__ MediaRemote: _MRMediaRemoteCommandInfoGetCommand
__ MediaRemote: _MRMediaRemoteCommandInfoGetEnabled
__ MediaRemote: _MRMediaRemoteCommandInfoSetCommand
__ MediaRemote: _MRMediaRemoteCommandInfoSetEnabled
__ MediaRemote: _MRMediaRemoteCommandInfoSetOptions
__ MediaRemote: _MRMediaRemoteCopyDeviceInfo
__ MediaRemote: _MRMediaRemoteGetActiveOrigin
__ MediaRemote: _MRMediaRemoteGetAvailableOrigins
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync
__ MediaRemote: _MRMediaRemoteSendCommandToApp
__ MediaRemote: _MRMediaRemoteSetWantsOriginChangeNotifications
__ MediaRemote: _MRNowPlayingClientEqualToClient
__ MediaRemote: _MRNowPlayingClientGetBundleIdentifier
__ MediaRemote: _MRNowPlayingClientGetDisplayName
__ MediaRemote: _MRNowPlayingPlayerPathCreate
__ MediaRemote: _MRNowPlayingPlayerPathCreateExternalRepresentation
__ MediaRemote: _MRNowPlayingPlayerPathCreateFromExternalRepresentation
__ MediaRemote: _MROriginCopy
__ MediaRemote: _MROriginEqualToOrigin
__ MediaRemote: _MROriginGetDisplayName
__ MediaRemote: _MROriginGetUniqueIdentifier
__ MediaRemote: _MROriginIsLocalOrigin
__ MediaRemote: _MRPairedDeviceCopyDeviceUID
__ MediaRemote: _MRPairedDeviceCopyGroupName
__ MediaRemote: _MRPairedDeviceCopyLinkAgent
__ MediaRemote: _MRPairedDeviceCopyName
__ MediaRemote: _MRPairedDeviceCreateCopy
__ MediaRemote: _MRPairedDeviceEqualToPairedDevice
__ MediaRemote: _MRPairedDeviceGetDeviceClass
__ MediaRemote: _MRPairedDeviceGetGroupLogicalDeviceCount
__ MediaRemote: _MRPairedDeviceGetIsAirPlayActive
__ MediaRemote: _MRPairedDeviceIsTightlySyncedGroup
__ MediaRemote: _MRPlaybackQueueCopyContentItems
__ MediaRemote: _MRPlaybackQueueCreate
__ MediaRemote: _MRPlaybackQueueCreateExternalRepresentation
__ MediaRemote: _MRPlaybackQueueCreateFromExternalRepresentation
__ MediaRemote: _MRPlaybackQueueGetRange
__ MediaRemote: _MRPlaybackQueueRequestCreateExternalRepresentation
__ MediaRemote: _MRPlaybackQueueRequestCreateFromExternalRepresentation
__ MediaRemote: _MRPlaybackQueueRequestCreateWithCurrentState
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeMetadata
__ MediaRemote: _MRSystemAppPlaybackQueueCreateExternalRepresentation
__ MediaRemote: _kMRDeviceInfoDidChangeNotification
__ MediaRemote: _kMRExternalDeviceConnectionStateDidChangeNotification
__ MediaRemote: _kMRMediaRemoteActiveOriginDidChangeNotification
__ MediaRemote: _kMRMediaRemoteAvailableOriginsDidChangeNotification
__ MediaRemote: _kMRMediaRemoteCommandInfoCurrentQueueEndAction
__ MediaRemote: _kMRMediaRemoteCommandInfoIsActiveKey
__ MediaRemote: _kMRMediaRemoteCommandInfoLocalizedShortTitleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoLocalizedTitleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoMaximumRatingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoMinimumRatingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreferredIntervalsKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreferredPlaybackRate
__ MediaRemote: _kMRMediaRemoteCommandInfoPresentationStyleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteCommandInfoShuffleMode
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackRates
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedQueueEndActions
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAlbum
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtist
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtworkURL
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoCollectionInfo
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDefaultPlaybackRate
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDuration
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoElapsedTime
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsAdvertisement
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsAlwaysLive
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsExplicitTrack
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsMusicApp
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoMediaType
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoPlaybackRate
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRadioStationHash
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRadioStationIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRadioStationName
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoShuffleMode
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoStartTime
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTimestamp
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTitle
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoUniqueIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoUserInfo
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoiTunesStoreIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoiTunesStoreSubscriptionAdamIdentifier
__ MediaRemote: _kMRMediaRemoteOptionContentItemID
__ MediaRemote: _kMRMediaRemoteOptionContextID
__ MediaRemote: _kMRMediaRemoteOptionDestinationAppDisplayID
__ MediaRemote: _kMRMediaRemoteOptionIsExternalPlayerCommand
__ MediaRemote: _kMRMediaRemoteOptionIsNegative
__ MediaRemote: _kMRMediaRemoteOptionMediaType
__ MediaRemote: _kMRMediaRemoteOptionPlaybackPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackQueueInsertionPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackRate
__ MediaRemote: _kMRMediaRemoteOptionQueueEndAction
__ MediaRemote: _kMRMediaRemoteOptionRating
__ MediaRemote: _kMRMediaRemoteOptionRepeatMode
__ MediaRemote: _kMRMediaRemoteOptionRequestDefermentToPlaybackQueuePosition
__ MediaRemote: _kMRMediaRemoteOptionSendOptionsNumber
__ MediaRemote: _kMRMediaRemoteOptionShouldBeginRadioPlayback
__ MediaRemote: _kMRMediaRemoteOptionShuffleMode
__ MediaRemote: _kMRMediaRemoteOptionSkipInterval
__ MediaRemote: _kMRMediaRemoteOptionSourceID
__ MediaRemote: _kMRMediaRemoteOptionStationHash
__ MediaRemote: _kMRMediaRemoteOptionStationID
__ MediaRemote: _kMRMediaRemoteOptionStationURL
__ MediaRemote: _kMRMediaRemoteOptionSystemAppPlaybackQueueData
__ MediaRemote: _kMRMediaRemoteOptionTrackID
__ MediaRemote: _kMRMediaRemoteOriginUserInfoKey
__ MediaRemote: _kMRMediaRemoteUpdatedContentItemsUserInfoKey
__ MediaRemote: _kMRNowPlayingPlaybackQueueChangedNotification
__ MediaRemote: _kMRPairedDeviceUserInfoKey
__ MediaRemote: _kMRPlaybackQueueContentItemsChangedNotification
__ MediaRemote: _kMRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueueKey
__ NanoRegistry: _OBJC_CLASS_$_NRPairedDeviceRegistry
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ ProtocolBuffer: _PBRepeatedDoubleAdd
__ ProtocolBuffer: _PBRepeatedDoubleClear
__ ProtocolBuffer: _PBRepeatedDoubleCopy
__ ProtocolBuffer: _PBRepeatedDoubleHash
__ ProtocolBuffer: _PBRepeatedDoubleIsEqual
__ ProtocolBuffer: _PBRepeatedDoubleNSArray
__ ProtocolBuffer: _PBRepeatedDoubleSet
__ ProtocolBuffer: _PBRepeatedFloatAdd
__ ProtocolBuffer: _PBRepeatedFloatClear
__ ProtocolBuffer: _PBRepeatedFloatCopy
__ ProtocolBuffer: _PBRepeatedFloatHash
__ ProtocolBuffer: _PBRepeatedFloatIsEqual
__ ProtocolBuffer: _PBRepeatedFloatNSArray
__ ProtocolBuffer: _PBRepeatedFloatSet
__ ProtocolBuffer: _PBRepeatedInt32Add
__ ProtocolBuffer: _PBRepeatedInt32Clear
__ ProtocolBuffer: _PBRepeatedInt32Copy
__ ProtocolBuffer: _PBRepeatedInt32Hash
__ ProtocolBuffer: _PBRepeatedInt32IsEqual
__ ProtocolBuffer: _PBRepeatedInt32NSArray
__ ProtocolBuffer: _PBRepeatedInt32Set
__ ProtocolBuffer: _PBRepeatedUInt32Add
__ ProtocolBuffer: _PBRepeatedUInt32Clear
__ ProtocolBuffer: _PBRepeatedUInt32Copy
__ ProtocolBuffer: _PBRepeatedUInt32Hash
__ ProtocolBuffer: _PBRepeatedUInt32IsEqual
__ ProtocolBuffer: _PBRepeatedUInt32NSArray
__ ProtocolBuffer: _PBRepeatedUInt32Set
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _qos_class_self
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
NMRMediaRemoteUpdater : NSObject
  // instance methods
  -[NMRMediaRemoteUpdater .cxx_destruct]
  -[NMRMediaRemoteUpdater executeUpdateBlock]
  -[NMRMediaRemoteUpdater initWithQueue:updateBlock:]


_NMRContentItem : PBCodable <NSCopying>
 @property  BOOL hasIdentifier
 @property  NSString *identifier
 @property  BOOL hasMetadata
 @property  _NMRContentItemMetadata *metadata

  // instance methods
  -[_NMRContentItem mergeFrom:]
  -[_NMRContentItem hasMetadata]
  -[_NMRContentItem .cxx_destruct]
  -[_NMRContentItem dictionaryRepresentation]
  -[_NMRContentItem writeTo:]
  -[_NMRContentItem isEqual:]
  -[_NMRContentItem copyTo:]
  -[_NMRContentItem readFrom:]
  -[_NMRContentItem identifier]
  -[_NMRContentItem metadata]
  -[_NMRContentItem setMetadata:]
  -[_NMRContentItem setIdentifier:]
  -[_NMRContentItem hasIdentifier]
  -[_NMRContentItem copyWithZone:]


NMRNowPlayingState : NSObject <NSCopying>
 @property  NSString *nmr_localApplicationBundleIdentifier
 @property  NSDate *timestamp
 @property  double duration
 @property  float playbackRate
 @property  float preferredPlaybackRate
 @property  unsigned int playbackState
 @property  double elapsedTimeAtLastUpdate
 @property  BOOL playing
 @property  double elapsedTime
 @property  BOOL hasNowPlayingInfo
 @property  BOOL hasNowPlayingItem
 @property  BOOL hasUpNextQueue
 @property  MPIdentifierSet *identifiers
 @property  NSNumber *itemPersistentID
 @property  NSNumber *itemCompanionPersistentID
 @property  NSNumber *itemAlbumPersistentID
 @property  NSNumber *storeAdamID
 @property  NSString *title
 @property  NSString *artist
 @property  NSString *album
 @property  BOOL explicitTrack
 @property  MPArtworkCatalog *artworkCatalog
 @property  NSString *collectionTitle
 @property  NSString *radioStationName
 @property  NSNumber *radioStationIdentifier
 @property  NSString *radioStationHash
 @property  BOOL advertisement
 @property  BOOL alwaysLive
 @property  BOOL autoPlay
 @property  BOOL playingRadio
 @property  BOOL firstPartyApp
 @property  NSString *applicationDisplayName
 @property  NSString *applicationBundleIdentifier
 @property  NSData *applicationIconImageData
 @property  BOOL repeatModeCommandSupported
 @property  int repeatMode
 @property  BOOL shuffleModeCommandSupported
 @property  int shuffleMode
 @property  BOOL queueEndActionCommandSupported
 @property  int queueEndAction
 @property  BOOL playbackRateCommandSupported
 @property  BOOL likeCommandSupported
 @property  BOOL likeCommandEnabled
 @property  BOOL likedActive
 @property  NSString *localizedLikeTitle
 @property  long long likeCommandPresentationStyle
 @property  BOOL banCommandSupported
 @property  BOOL banCommandEnabled
 @property  BOOL bannedActive
 @property  NSString *localizedBanTitle
 @property  long long banCommandPresentationStyle
 @property  BOOL bookmarkCommandSupported
 @property  BOOL bookmarkCommandEnabled
 @property  BOOL bookmarkedActive
 @property  NSString *localizedBookmarkTitle
 @property  BOOL nextTrackCommandEnabled
 @property  BOOL previousTrackCommandEnabled
 @property  BOOL skipForwardCommandEnabled
 @property  BOOL skipBackwardCommandEnabled
 @property  double fastForwardTimeInterval
 @property  double rewindTimeInterval

  // class methods
  +[NMRNowPlayingState emptyNowPlayingState]

  // instance methods
  -[NMRNowPlayingState applicationDisplayName]
  -[NMRNowPlayingState isAdvertisement]
  -[NMRNowPlayingState playbackRate]
  -[NMRNowPlayingState playbackState]
  -[NMRNowPlayingState album]
  -[NMRNowPlayingState collectionTitle]
  -[NMRNowPlayingState radioStationName]
  -[NMRNowPlayingState isAlwaysLive]
  -[NMRNowPlayingState applicationBundleIdentifier]
  -[NMRNowPlayingState artist]
  -[NMRNowPlayingState isPlaying]
  -[NMRNowPlayingState elapsedTime]
  -[NMRNowPlayingState shuffleMode]
  -[NMRNowPlayingState isAutoPlay]
  -[NMRNowPlayingState identifiers]
  -[NMRNowPlayingState isExplicitTrack]
  -[NMRNowPlayingState radioStationIdentifier]
  -[NMRNowPlayingState radioStationHash]
  -[NMRNowPlayingState repeatMode]
  -[NMRNowPlayingState title]
  -[NMRNowPlayingState storeAdamID]
  -[NMRNowPlayingState timestamp]
  -[NMRNowPlayingState artworkCatalog]
  -[NMRNowPlayingState itemPersistentID]
  -[NMRNowPlayingState copyWithZone:]
  -[NMRNowPlayingState hasNowPlayingInfo]
  -[NMRNowPlayingState duration]
  -[NMRNowPlayingState queueEndAction]
  -[NMRNowPlayingState preferredPlaybackRate]
  -[NMRNowPlayingState itemCompanionPersistentID]
  -[NMRNowPlayingState itemAlbumPersistentID]
  -[NMRNowPlayingState elapsedTimeAtLastUpdate]
  -[NMRNowPlayingState applicationIconImageData]
  -[NMRNowPlayingState isRepeatModeCommandSupported]
  -[NMRNowPlayingState isShuffleModeCommandSupported]
  -[NMRNowPlayingState isQueueEndActionCommandSupported]
  -[NMRNowPlayingState isPlaybackRateCommandSupported]
  -[NMRNowPlayingState isLikeCommandSupported]
  -[NMRNowPlayingState isLikeCommandEnabled]
  -[NMRNowPlayingState isLikedActive]
  -[NMRNowPlayingState localizedLikeTitle]
  -[NMRNowPlayingState likeCommandPresentationStyle]
  -[NMRNowPlayingState isBanCommandSupported]
  -[NMRNowPlayingState isBanCommandEnabled]
  -[NMRNowPlayingState isBannedActive]
  -[NMRNowPlayingState localizedBanTitle]
  -[NMRNowPlayingState banCommandPresentationStyle]
  -[NMRNowPlayingState isBookmarkCommandSupported]
  -[NMRNowPlayingState isBookmarkCommandEnabled]
  -[NMRNowPlayingState isBookmarkedActive]
  -[NMRNowPlayingState localizedBookmarkTitle]
  -[NMRNowPlayingState isNextTrackCommandEnabled]
  -[NMRNowPlayingState isPreviousTrackCommandEnabled]
  -[NMRNowPlayingState isSkipForwardCommandEnabled]
  -[NMRNowPlayingState isSkipBackwardCommandEnabled]
  -[NMRNowPlayingState fastForwardTimeInterval]
  -[NMRNowPlayingState rewindTimeInterval]
  -[NMRNowPlayingState hasNowPlayingItem]
  -[NMRNowPlayingState hasUpNextQueue]
  -[NMRNowPlayingState isFirstPartyApp]
  -[NMRNowPlayingState compareWithNowPlayingState:]
  -[NMRNowPlayingState isPlayingRadio]
  -[NMRNowPlayingState isQueueEndActionSupported:]
  -[NMRNowPlayingState nmr_localApplicationBundleIdentifier]


_NMRMediaRemoteGetArtworkMessage : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[_NMRMediaRemoteGetArtworkMessage mergeFrom:]
  -[_NMRMediaRemoteGetArtworkMessage setOriginIdentifier:]
  -[_NMRMediaRemoteGetArtworkMessage dictionaryRepresentation]
  -[_NMRMediaRemoteGetArtworkMessage writeTo:]
  -[_NMRMediaRemoteGetArtworkMessage isEqual:]
  -[_NMRMediaRemoteGetArtworkMessage copyTo:]
  -[_NMRMediaRemoteGetArtworkMessage readFrom:]
  -[_NMRMediaRemoteGetArtworkMessage hasTimestamp]
  -[_NMRMediaRemoteGetArtworkMessage timestamp]
  -[_NMRMediaRemoteGetArtworkMessage copyWithZone:]
  -[_NMRMediaRemoteGetArtworkMessage setHasTimestamp:]
  -[_NMRMediaRemoteGetArtworkMessage setTimestamp:]
  -[_NMRMediaRemoteGetArtworkMessage originIdentifier]
  -[_NMRMediaRemoteGetArtworkMessage hasOriginIdentifier]
  -[_NMRMediaRemoteGetArtworkMessage setHasOriginIdentifier:]


_NMRMediaRemoteSetStateMessageProfobuf : PBCodable <NSCopying>
 @property  BOOL hasState
 @property  int state
 @property  BOOL hasPayload
 @property  NSData *payload
 @property  BOOL hasDigest
 @property  NSData *digest
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasNowPlayingInfo
 @property  NSData *nowPlayingInfo
 @property  BOOL hasApplicationInfo
 @property  NSData *applicationInfo
 @property  BOOL hasSupportedCommands
 @property  NSData *supportedCommands
 @property  BOOL hasPlaybackQueue
 @property  NSData *playbackQueue
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[_NMRMediaRemoteSetStateMessageProfobuf setSupportedCommands:]
  -[_NMRMediaRemoteSetStateMessageProfobuf nowPlayingInfo]
  -[_NMRMediaRemoteSetStateMessageProfobuf setNowPlayingInfo:]
  -[_NMRMediaRemoteSetStateMessageProfobuf supportedCommands]
  -[_NMRMediaRemoteSetStateMessageProfobuf setPayload:]
  -[_NMRMediaRemoteSetStateMessageProfobuf mergeFrom:]
  -[_NMRMediaRemoteSetStateMessageProfobuf payload]
  -[_NMRMediaRemoteSetStateMessageProfobuf .cxx_destruct]
  -[_NMRMediaRemoteSetStateMessageProfobuf setOriginIdentifier:]
  -[_NMRMediaRemoteSetStateMessageProfobuf dictionaryRepresentation]
  -[_NMRMediaRemoteSetStateMessageProfobuf setDigest:]
  -[_NMRMediaRemoteSetStateMessageProfobuf setPlaybackQueue:]
  -[_NMRMediaRemoteSetStateMessageProfobuf writeTo:]
  -[_NMRMediaRemoteSetStateMessageProfobuf digest]
  -[_NMRMediaRemoteSetStateMessageProfobuf setState:]
  -[_NMRMediaRemoteSetStateMessageProfobuf isEqual:]
  -[_NMRMediaRemoteSetStateMessageProfobuf copyTo:]
  -[_NMRMediaRemoteSetStateMessageProfobuf readFrom:]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasPayload]
  -[_NMRMediaRemoteSetStateMessageProfobuf state]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasState]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasTimestamp]
  -[_NMRMediaRemoteSetStateMessageProfobuf playbackQueue]
  -[_NMRMediaRemoteSetStateMessageProfobuf timestamp]
  -[_NMRMediaRemoteSetStateMessageProfobuf copyWithZone:]
  -[_NMRMediaRemoteSetStateMessageProfobuf setHasTimestamp:]
  -[_NMRMediaRemoteSetStateMessageProfobuf setHasState:]
  -[_NMRMediaRemoteSetStateMessageProfobuf setTimestamp:]
  -[_NMRMediaRemoteSetStateMessageProfobuf originIdentifier]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasNowPlayingInfo]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasDigest]
  -[_NMRMediaRemoteSetStateMessageProfobuf applicationInfo]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasOriginIdentifier]
  -[_NMRMediaRemoteSetStateMessageProfobuf setHasOriginIdentifier:]
  -[_NMRMediaRemoteSetStateMessageProfobuf setApplicationInfo:]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasApplicationInfo]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasSupportedCommands]
  -[_NMRMediaRemoteSetStateMessageProfobuf hasPlaybackQueue]


_NMRCommandInfoProtobuf : PBCodable <NSCopying>
 @property  BOOL hasCommand
 @property  int command
 @property  BOOL hasEnabled
 @property  BOOL enabled
 @property  BOOL hasActive
 @property  BOOL active
 @property  unsigned long preferredIntervalsCount
 @property  ^d preferredIntervals
 @property  BOOL hasLocalizedTitle
 @property  NSString *localizedTitle
 @property  BOOL hasLocalizedShortTitle
 @property  NSString *localizedShortTitle
 @property  BOOL hasMinimumRating
 @property  float minimumRating
 @property  BOOL hasMaximumRating
 @property  float maximumRating
 @property  unsigned long supportedPlaybackRatesCount
 @property  ^f supportedPlaybackRates
 @property  BOOL hasRepeatMode
 @property  int repeatMode
 @property  BOOL hasShuffleMode
 @property  int shuffleMode
 @property  BOOL hasPresentationStyle
 @property  int presentationStyle
 @property  BOOL hasPreferredPlaybackRate
 @property  float preferredPlaybackRate
 @property  BOOL hasCurrentQueueEndAction
 @property  int currentQueueEndAction
 @property  unsigned long supportedQueueEndActionsCount
 @property  ^i supportedQueueEndActions

  // instance methods
  -[_NMRCommandInfoProtobuf hasActive]
  -[_NMRCommandInfoProtobuf localizedTitle]
  -[_NMRCommandInfoProtobuf mergeFrom:]
  -[_NMRCommandInfoProtobuf setShuffleMode:]
  -[_NMRCommandInfoProtobuf setCommand:]
  -[_NMRCommandInfoProtobuf presentationStyle]
  -[_NMRCommandInfoProtobuf shuffleMode]
  -[_NMRCommandInfoProtobuf active]
  -[_NMRCommandInfoProtobuf localizedShortTitle]
  -[_NMRCommandInfoProtobuf setPresentationStyle:]
  -[_NMRCommandInfoProtobuf currentQueueEndAction]
  -[_NMRCommandInfoProtobuf .cxx_destruct]
  -[_NMRCommandInfoProtobuf hasRepeatMode]
  -[_NMRCommandInfoProtobuf hasShuffleMode]
  -[_NMRCommandInfoProtobuf setHasRepeatMode:]
  -[_NMRCommandInfoProtobuf repeatModeAsString:]
  -[_NMRCommandInfoProtobuf StringAsRepeatMode:]
  -[_NMRCommandInfoProtobuf shuffleModeAsString:]
  -[_NMRCommandInfoProtobuf StringAsShuffleMode:]
  -[_NMRCommandInfoProtobuf dictionaryRepresentation]
  -[_NMRCommandInfoProtobuf hasCommand]
  -[_NMRCommandInfoProtobuf setHasCommand:]
  -[_NMRCommandInfoProtobuf commandAsString:]
  -[_NMRCommandInfoProtobuf maximumRating]
  -[_NMRCommandInfoProtobuf StringAsCommand:]
  -[_NMRCommandInfoProtobuf command]
  -[_NMRCommandInfoProtobuf writeTo:]
  -[_NMRCommandInfoProtobuf setMaximumRating:]
  -[_NMRCommandInfoProtobuf enabled]
  -[_NMRCommandInfoProtobuf setHasActive:]
  -[_NMRCommandInfoProtobuf supportedQueueEndActions]
  -[_NMRCommandInfoProtobuf setLocalizedTitle:]
  -[_NMRCommandInfoProtobuf isEqual:]
  -[_NMRCommandInfoProtobuf setMinimumRating:]
  -[_NMRCommandInfoProtobuf preferredIntervals]
  -[_NMRCommandInfoProtobuf copyTo:]
  -[_NMRCommandInfoProtobuf readFrom:]
  -[_NMRCommandInfoProtobuf minimumRating]
  -[_NMRCommandInfoProtobuf setHasEnabled:]
  -[_NMRCommandInfoProtobuf repeatMode]
  -[_NMRCommandInfoProtobuf setActive:]
  -[_NMRCommandInfoProtobuf setCurrentQueueEndAction:]
  -[_NMRCommandInfoProtobuf hasLocalizedTitle]
  -[_NMRCommandInfoProtobuf hasEnabled]
  -[_NMRCommandInfoProtobuf dealloc]
  -[_NMRCommandInfoProtobuf copyWithZone:]
  -[_NMRCommandInfoProtobuf setLocalizedShortTitle:]
  -[_NMRCommandInfoProtobuf setEnabled:]
  -[_NMRCommandInfoProtobuf setRepeatMode:]
  -[_NMRCommandInfoProtobuf setHasShuffleMode:]
  -[_NMRCommandInfoProtobuf supportedPlaybackRates]
  -[_NMRCommandInfoProtobuf setPreferredPlaybackRate:]
  -[_NMRCommandInfoProtobuf preferredPlaybackRate]
  -[_NMRCommandInfoProtobuf hasPresentationStyle]
  -[_NMRCommandInfoProtobuf preferredIntervalsCount]
  -[_NMRCommandInfoProtobuf clearPreferredIntervals]
  -[_NMRCommandInfoProtobuf preferredIntervalAtIndex:]
  -[_NMRCommandInfoProtobuf addPreferredInterval:]
  -[_NMRCommandInfoProtobuf supportedPlaybackRatesCount]
  -[_NMRCommandInfoProtobuf clearSupportedPlaybackRates]
  -[_NMRCommandInfoProtobuf supportedPlaybackRateAtIndex:]
  -[_NMRCommandInfoProtobuf addSupportedPlaybackRate:]
  -[_NMRCommandInfoProtobuf supportedQueueEndActionsCount]
  -[_NMRCommandInfoProtobuf clearSupportedQueueEndActions]
  -[_NMRCommandInfoProtobuf supportedQueueEndActionAtIndex:]
  -[_NMRCommandInfoProtobuf addSupportedQueueEndAction:]
  -[_NMRCommandInfoProtobuf setPreferredIntervals:count:]
  -[_NMRCommandInfoProtobuf hasLocalizedShortTitle]
  -[_NMRCommandInfoProtobuf setHasMinimumRating:]
  -[_NMRCommandInfoProtobuf hasMinimumRating]
  -[_NMRCommandInfoProtobuf setHasMaximumRating:]
  -[_NMRCommandInfoProtobuf hasMaximumRating]
  -[_NMRCommandInfoProtobuf setSupportedPlaybackRates:count:]
  -[_NMRCommandInfoProtobuf setHasPresentationStyle:]
  -[_NMRCommandInfoProtobuf setHasPreferredPlaybackRate:]
  -[_NMRCommandInfoProtobuf hasPreferredPlaybackRate]
  -[_NMRCommandInfoProtobuf setHasCurrentQueueEndAction:]
  -[_NMRCommandInfoProtobuf hasCurrentQueueEndAction]
  -[_NMRCommandInfoProtobuf currentQueueEndActionAsString:]
  -[_NMRCommandInfoProtobuf StringAsCurrentQueueEndAction:]
  -[_NMRCommandInfoProtobuf setSupportedQueueEndActions:count:]
  -[_NMRCommandInfoProtobuf supportedQueueEndActionsAsString:]
  -[_NMRCommandInfoProtobuf StringAsSupportedQueueEndActions:]


_NMRMediaRemoteSetArtworkMessage : PBCodable <NSCopying>
 @property  BOOL hasJpegData
 @property  NSData *jpegData
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasOriginalDigest
 @property  NSData *originalDigest
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[_NMRMediaRemoteSetArtworkMessage mergeFrom:]
  -[_NMRMediaRemoteSetArtworkMessage .cxx_destruct]
  -[_NMRMediaRemoteSetArtworkMessage setOriginIdentifier:]
  -[_NMRMediaRemoteSetArtworkMessage dictionaryRepresentation]
  -[_NMRMediaRemoteSetArtworkMessage writeTo:]
  -[_NMRMediaRemoteSetArtworkMessage isEqual:]
  -[_NMRMediaRemoteSetArtworkMessage copyTo:]
  -[_NMRMediaRemoteSetArtworkMessage readFrom:]
  -[_NMRMediaRemoteSetArtworkMessage hasTimestamp]
  -[_NMRMediaRemoteSetArtworkMessage timestamp]
  -[_NMRMediaRemoteSetArtworkMessage copyWithZone:]
  -[_NMRMediaRemoteSetArtworkMessage setHasTimestamp:]
  -[_NMRMediaRemoteSetArtworkMessage setTimestamp:]
  -[_NMRMediaRemoteSetArtworkMessage originIdentifier]
  -[_NMRMediaRemoteSetArtworkMessage hasOriginIdentifier]
  -[_NMRMediaRemoteSetArtworkMessage jpegData]
  -[_NMRMediaRemoteSetArtworkMessage setHasOriginIdentifier:]
  -[_NMRMediaRemoteSetArtworkMessage setJpegData:]
  -[_NMRMediaRemoteSetArtworkMessage setOriginalDigest:]
  -[_NMRMediaRemoteSetArtworkMessage hasJpegData]
  -[_NMRMediaRemoteSetArtworkMessage hasOriginalDigest]
  -[_NMRMediaRemoteSetArtworkMessage originalDigest]


NMRPlayerResponseNowPlayingState : NMRNowPlayingState <NSCopying>
 @property  MPCPlayerResponse *playerResponse

  // instance methods
  -[NMRPlayerResponseNowPlayingState applicationDisplayName]
  -[NMRPlayerResponseNowPlayingState isAdvertisement]
  -[NMRPlayerResponseNowPlayingState playbackRate]
  -[NMRPlayerResponseNowPlayingState playbackState]
  -[NMRPlayerResponseNowPlayingState album]
  -[NMRPlayerResponseNowPlayingState collectionTitle]
  -[NMRPlayerResponseNowPlayingState radioStationName]
  -[NMRPlayerResponseNowPlayingState isAlwaysLive]
  -[NMRPlayerResponseNowPlayingState applicationBundleIdentifier]
  -[NMRPlayerResponseNowPlayingState artist]
  -[NMRPlayerResponseNowPlayingState shuffleMode]
  -[NMRPlayerResponseNowPlayingState isAutoPlay]
  -[NMRPlayerResponseNowPlayingState .cxx_destruct]
  -[NMRPlayerResponseNowPlayingState identifiers]
  -[NMRPlayerResponseNowPlayingState isExplicitTrack]
  -[NMRPlayerResponseNowPlayingState radioStationIdentifier]
  -[NMRPlayerResponseNowPlayingState radioStationHash]
  -[NMRPlayerResponseNowPlayingState repeatMode]
  -[NMRPlayerResponseNowPlayingState title]
  -[NMRPlayerResponseNowPlayingState storeAdamID]
  -[NMRPlayerResponseNowPlayingState timestamp]
  -[NMRPlayerResponseNowPlayingState artworkCatalog]
  -[NMRPlayerResponseNowPlayingState itemPersistentID]
  -[NMRPlayerResponseNowPlayingState copyWithZone:]
  -[NMRPlayerResponseNowPlayingState duration]
  -[NMRPlayerResponseNowPlayingState queueEndAction]
  -[NMRPlayerResponseNowPlayingState preferredPlaybackRate]
  -[NMRPlayerResponseNowPlayingState itemCompanionPersistentID]
  -[NMRPlayerResponseNowPlayingState itemAlbumPersistentID]
  -[NMRPlayerResponseNowPlayingState elapsedTimeAtLastUpdate]
  -[NMRPlayerResponseNowPlayingState isRepeatModeCommandSupported]
  -[NMRPlayerResponseNowPlayingState isShuffleModeCommandSupported]
  -[NMRPlayerResponseNowPlayingState isQueueEndActionCommandSupported]
  -[NMRPlayerResponseNowPlayingState isPlaybackRateCommandSupported]
  -[NMRPlayerResponseNowPlayingState isLikeCommandSupported]
  -[NMRPlayerResponseNowPlayingState isLikeCommandEnabled]
  -[NMRPlayerResponseNowPlayingState isLikedActive]
  -[NMRPlayerResponseNowPlayingState localizedLikeTitle]
  -[NMRPlayerResponseNowPlayingState likeCommandPresentationStyle]
  -[NMRPlayerResponseNowPlayingState isBanCommandSupported]
  -[NMRPlayerResponseNowPlayingState isBanCommandEnabled]
  -[NMRPlayerResponseNowPlayingState isBannedActive]
  -[NMRPlayerResponseNowPlayingState localizedBanTitle]
  -[NMRPlayerResponseNowPlayingState banCommandPresentationStyle]
  -[NMRPlayerResponseNowPlayingState isBookmarkCommandSupported]
  -[NMRPlayerResponseNowPlayingState isBookmarkCommandEnabled]
  -[NMRPlayerResponseNowPlayingState isBookmarkedActive]
  -[NMRPlayerResponseNowPlayingState localizedBookmarkTitle]
  -[NMRPlayerResponseNowPlayingState isNextTrackCommandEnabled]
  -[NMRPlayerResponseNowPlayingState isPreviousTrackCommandEnabled]
  -[NMRPlayerResponseNowPlayingState isSkipForwardCommandEnabled]
  -[NMRPlayerResponseNowPlayingState isSkipBackwardCommandEnabled]
  -[NMRPlayerResponseNowPlayingState fastForwardTimeInterval]
  -[NMRPlayerResponseNowPlayingState rewindTimeInterval]
  -[NMRPlayerResponseNowPlayingState hasNowPlayingItem]
  -[NMRPlayerResponseNowPlayingState hasUpNextQueue]
  -[NMRPlayerResponseNowPlayingState isQueueEndActionSupported:]
  -[NMRPlayerResponseNowPlayingState initWithPlayerResponse:]
  -[NMRPlayerResponseNowPlayingState _nowPlayingSong]
  -[NMRPlayerResponseNowPlayingState _nowPlayingRadioStation]
  -[NMRPlayerResponseNowPlayingState playerResponse]


NMRPlaybackQueueRequest : NSObject <NMRMediaRemoteProtobufCodable>
 @property  ^v request
 @property  ^v playerPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NMRPlaybackQueueRequest playerPath]
  -[NMRPlaybackQueueRequest protobufData]
  -[NMRPlaybackQueueRequest .cxx_destruct]
  -[NMRPlaybackQueueRequest request]
  -[NMRPlaybackQueueRequest initWithRequest:playerPath:]
  -[NMRPlaybackQueueRequest initWithProtobufData:]
  -[NMRPlaybackQueueRequest performWithQueue:completion:]


NMRPlaybackQueueResponse : NSObject <NMRMediaRemoteProtobufCodable>
 @property  ^v playbackQueue
 @property  ^{__CFError=} error
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NMRPlaybackQueueResponse protobufData]
  -[NMRPlaybackQueueResponse .cxx_destruct]
  -[NMRPlaybackQueueResponse playbackQueue]
  -[NMRPlaybackQueueResponse error]
  -[NMRPlaybackQueueResponse initWithProtobufData:]
  -[NMRPlaybackQueueResponse initWithPlaybackQueue:error:]
  -[NMRPlaybackQueueResponse invokeCompletion:]


NMRNowPlayingApplicationInfo : NSObject <NMRMediaRemoteProtobufCodable>
 @property  NSString *companionBundleIdentifier
 @property  NSString *watchBundleIdentifier
 @property  NSString *localizedDisplayName
 @property  unsigned int playbackState
 @property  NSData *iconDigest
 @property  int processID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRNowPlayingApplicationInfo _getNextPlaceholderProcessID]

  // instance methods
  -[NMRNowPlayingApplicationInfo playbackState]
  -[NMRNowPlayingApplicationInfo companionBundleIdentifier]
  -[NMRNowPlayingApplicationInfo setPlaybackState:]
  -[NMRNowPlayingApplicationInfo localizedDisplayName]
  -[NMRNowPlayingApplicationInfo protobufData]
  -[NMRNowPlayingApplicationInfo .cxx_destruct]
  -[NMRNowPlayingApplicationInfo setProcessID:]
  -[NMRNowPlayingApplicationInfo init]
  -[NMRNowPlayingApplicationInfo setLocalizedDisplayName:]
  -[NMRNowPlayingApplicationInfo processID]
  -[NMRNowPlayingApplicationInfo initWithProtobufData:]
  -[NMRNowPlayingApplicationInfo setCompanionBundleIdentifier:]
  -[NMRNowPlayingApplicationInfo watchBundleIdentifier]
  -[NMRNowPlayingApplicationInfo setWatchBundleIdentifier:]
  -[NMRNowPlayingApplicationInfo iconDigest]
  -[NMRNowPlayingApplicationInfo setIconDigest:]


_NMRClient : NSObject
  // class methods
  +[_NMRClient sharedClient]

  // instance methods
  -[_NMRClient .cxx_destruct]
  -[_NMRClient _synchronousProxyWithErrorHandler:]
  -[_NMRClient init]
  -[_NMRClient _proxyWithErrorHandler:]
  -[_NMRClient refreshMediaRemoteStateIfNecessary]
  -[_NMRClient sendMediaRemoteCommand:withCommandOptions:toOriginWithUniqueIdentifier:commandResultHandler:]
  -[_NMRClient prewarmCompanionSystemMusicApp]
  -[_NMRClient discoverAndConnectEndpoints]


_NMRSupportedCommandsProtobuf : PBCodable <NSCopying>
 @property  NSMutableArray *supportedCommands

  // class methods
  +[_NMRSupportedCommandsProtobuf supportedCommandType]

  // instance methods
  -[_NMRSupportedCommandsProtobuf setSupportedCommands:]
  -[_NMRSupportedCommandsProtobuf supportedCommands]
  -[_NMRSupportedCommandsProtobuf mergeFrom:]
  -[_NMRSupportedCommandsProtobuf .cxx_destruct]
  -[_NMRSupportedCommandsProtobuf dictionaryRepresentation]
  -[_NMRSupportedCommandsProtobuf writeTo:]
  -[_NMRSupportedCommandsProtobuf isEqual:]
  -[_NMRSupportedCommandsProtobuf copyTo:]
  -[_NMRSupportedCommandsProtobuf readFrom:]
  -[_NMRSupportedCommandsProtobuf copyWithZone:]
  -[_NMRSupportedCommandsProtobuf addSupportedCommand:]
  -[_NMRSupportedCommandsProtobuf supportedCommandsCount]
  -[_NMRSupportedCommandsProtobuf clearSupportedCommands]
  -[_NMRSupportedCommandsProtobuf supportedCommandAtIndex:]


NMROriginMediaPlaybackCoreController : NSObject <MPRequestResponseControllerDelegate, NMROriginObserver, NMROriginCommandHandler>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NMROrigin *origin
 @property  NMRNowPlayingState *nowPlayingState
 @property  NMRPlaybackQueue *playbackQueue
 @property  <NMROriginObserverDelegate> *delegate
 @property  BOOL shouldObservePlaybackQueue
 @property  BOOL shouldObserveArtwork
 @property  BOOL shouldObserveLibraryAddStatus

  // instance methods
  -[NMROriginMediaPlaybackCoreController origin]
  -[NMROriginMediaPlaybackCoreController .cxx_destruct]
  -[NMROriginMediaPlaybackCoreController beginObserving]
  -[NMROriginMediaPlaybackCoreController endObserving]
  -[NMROriginMediaPlaybackCoreController setDelegate:]
  -[NMROriginMediaPlaybackCoreController playbackQueue]
  -[NMROriginMediaPlaybackCoreController controller:defersResponseReplacement:]
  -[NMROriginMediaPlaybackCoreController delegate]
  -[NMROriginMediaPlaybackCoreController controller:shouldRetryFailedRequestWithError:]
  -[NMROriginMediaPlaybackCoreController nowPlayingState]
  -[NMROriginMediaPlaybackCoreController _requestResponseController]
  -[NMROriginMediaPlaybackCoreController _updateIsEnforcingApplicationFilterWithNowPlayingState:]
  -[NMROriginMediaPlaybackCoreController _notifyObserverOfUpdatedNowPlayingInfo]
  -[NMROriginMediaPlaybackCoreController _notifyObserverOfUpdatedNowPlayingApplicationBundleID]
  -[NMROriginMediaPlaybackCoreController _notifyObserverOfUpdatedPlaybackState]
  -[NMROriginMediaPlaybackCoreController _notifyObserverOfUpdatedSupportedCommands]
  -[NMROriginMediaPlaybackCoreController _notifyObserverOfUpdatedElapsedTime]
  -[NMROriginMediaPlaybackCoreController _notifyObserversOfUpdatedTimestamp]
  -[NMROriginMediaPlaybackCoreController _notifyObserversOfUpdatedPlaybackQueue]
  -[NMROriginMediaPlaybackCoreController _asyncToSerialQueueCheckingProcessWithBlock:]
  -[NMROriginMediaPlaybackCoreController updateNowPlayingStateWithCompletion:]
  -[NMROriginMediaPlaybackCoreController shouldObservePlaybackQueue]
  -[NMROriginMediaPlaybackCoreController setShouldObservePlaybackQueue:]
  -[NMROriginMediaPlaybackCoreController shouldObserveArtwork]
  -[NMROriginMediaPlaybackCoreController setShouldObserveArtwork:]
  -[NMROriginMediaPlaybackCoreController shouldObserveLibraryAddStatus]
  -[NMROriginMediaPlaybackCoreController setShouldObserveLibraryAddStatus:]
  -[NMROriginMediaPlaybackCoreController sendMediaRemoteCommand:options:userInitiated:completion:]
  -[NMROriginMediaPlaybackCoreController initWithPlayerPath:options:]


_NMRMediaRemoteSetIconMessage : PBCodable <NSCopying>
 @property  BOOL hasIconData
 @property  NSData *iconData
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasOriginalDigest
 @property  NSData *originalDigest
 @property  BOOL hasBundleID
 @property  NSString *bundleID
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[_NMRMediaRemoteSetIconMessage bundleID]
  -[_NMRMediaRemoteSetIconMessage mergeFrom:]
  -[_NMRMediaRemoteSetIconMessage hasBundleID]
  -[_NMRMediaRemoteSetIconMessage .cxx_destruct]
  -[_NMRMediaRemoteSetIconMessage setOriginIdentifier:]
  -[_NMRMediaRemoteSetIconMessage dictionaryRepresentation]
  -[_NMRMediaRemoteSetIconMessage writeTo:]
  -[_NMRMediaRemoteSetIconMessage isEqual:]
  -[_NMRMediaRemoteSetIconMessage copyTo:]
  -[_NMRMediaRemoteSetIconMessage iconData]
  -[_NMRMediaRemoteSetIconMessage readFrom:]
  -[_NMRMediaRemoteSetIconMessage hasTimestamp]
  -[_NMRMediaRemoteSetIconMessage setBundleID:]
  -[_NMRMediaRemoteSetIconMessage setIconData:]
  -[_NMRMediaRemoteSetIconMessage timestamp]
  -[_NMRMediaRemoteSetIconMessage copyWithZone:]
  -[_NMRMediaRemoteSetIconMessage setHasTimestamp:]
  -[_NMRMediaRemoteSetIconMessage setTimestamp:]
  -[_NMRMediaRemoteSetIconMessage originIdentifier]
  -[_NMRMediaRemoteSetIconMessage hasOriginIdentifier]
  -[_NMRMediaRemoteSetIconMessage setHasOriginIdentifier:]
  -[_NMRMediaRemoteSetIconMessage setOriginalDigest:]
  -[_NMRMediaRemoteSetIconMessage hasOriginalDigest]
  -[_NMRMediaRemoteSetIconMessage originalDigest]
  -[_NMRMediaRemoteSetIconMessage hasIconData]


NMRNowPlayingController : NSObject <NMROriginObserverDelegate>
 @property  <NMRNowPlayingControllerDelegate> *delegate
 @property  BOOL shouldObservePlaybackQueue
 @property  BOOL shouldObserveArtwork
 @property  BOOL shouldObserveLibraryAddStatus
 @property  NMROrigin *activeNowPlayingOrigin
 @property  NSArray *nowPlayingOrigins
 @property  unsigned long filteringOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NMRNowPlayingController removeObserverDelegate:]
  -[NMRNowPlayingController .cxx_destruct]
  -[NMRNowPlayingController initWithOptions:]
  -[NMRNowPlayingController setDelegate:]
  -[NMRNowPlayingController addObserverDelegate:]
  -[NMRNowPlayingController delegate]
  -[NMRNowPlayingController filteringOptions]
  -[NMRNowPlayingController dealloc]
  -[NMRNowPlayingController originObserver:didUpdateNowPlayingInfoForOrigin:]
  -[NMRNowPlayingController originObserver:didUpdateNowPlayingApplicationBundleIdentifierForOrigin:]
  -[NMRNowPlayingController originObserver:didUpdatePlaybackStateForOrigin:]
  -[NMRNowPlayingController originObserver:didUpdateSupportedCommandsForOrigin:]
  -[NMRNowPlayingController originObserver:didUpdateElapsedTimeForOrigin:]
  -[NMRNowPlayingController originObserver:didUpdateTimestampForOrigin:]
  -[NMRNowPlayingController originObserver:didUpdatePlaybackQueueForOrigin:]
  -[NMRNowPlayingController shouldObservePlaybackQueue]
  -[NMRNowPlayingController setShouldObservePlaybackQueue:]
  -[NMRNowPlayingController shouldObserveArtwork]
  -[NMRNowPlayingController setShouldObserveArtwork:]
  -[NMRNowPlayingController shouldObserveLibraryAddStatus]
  -[NMRNowPlayingController setShouldObserveLibraryAddStatus:]
  -[NMRNowPlayingController _setupOriginControllers]
  -[NMRNowPlayingController _nowPlayingStateForOrigin:]
  -[NMRNowPlayingController _originControllerForOrigin:]
  -[NMRNowPlayingController _updateNowPlayingStateForOrigin:completion:]
  -[NMRNowPlayingController _evaluateNowPlayingOrigins]
  -[NMRNowPlayingController nowPlayingStateForOrigin:]
  -[NMRNowPlayingController launchBundleIdentifierForOrigin:]
  -[NMRNowPlayingController _enumerateObserverDelegates:]
  -[NMRNowPlayingController _handleAvailableOriginsDidChangeNotification:]
  -[NMRNowPlayingController _addOriginControllerWithOrigin:]
  -[NMRNowPlayingController _shouldObserveOrigin:]
  -[NMRNowPlayingController _removeOriginControllerWithOrigin:]
  -[NMRNowPlayingController _evaluateNowPlayingOriginsFromOrigins:]
  -[NMRNowPlayingController _evaluateActiveNowPlayingOriginForOrderedOrigins:]
  -[NMRNowPlayingController sendMediaRemoteCommand:toOrigin:options:launchApp:completion:]
  -[NMRNowPlayingController sendMediaRemoteCommand:options:userInitiated:toOrigin:completion:]
  -[NMRNowPlayingController activeNowPlayingOrigin]
  -[NMRNowPlayingController nowPlayingOrigins]
  -[NMRNowPlayingController playbackQueueForOrigin:]
  -[NMRNowPlayingController updateNowPlayingStateForOrigin:completion:]
  -[NMRNowPlayingController updateNowPlayingStateForAllOriginsWithCompletion:]
  -[NMRNowPlayingController launchNowPlayingURLForOrigin:]
  -[NMRNowPlayingController beginObservingOrigins]
  -[NMRNowPlayingController endObservingOrigins]
  -[NMRNowPlayingController setOriginObserver:forOrigin:]
  -[NMRNowPlayingController setOriginCommandHandler:forOrigin:]
  -[NMRNowPlayingController sendMediaRemoteCommand:toOrigin:options:launchApp:]


_NMRPlaybackQueueResponseProtobuf : PBCodable <NSCopying>
 @property  BOOL hasPlaybackQueue
 @property  NSData *playbackQueue
 @property  BOOL hasError
 @property  NSData *error

  // instance methods
  -[_NMRPlaybackQueueResponseProtobuf mergeFrom:]
  -[_NMRPlaybackQueueResponseProtobuf hasError]
  -[_NMRPlaybackQueueResponseProtobuf .cxx_destruct]
  -[_NMRPlaybackQueueResponseProtobuf dictionaryRepresentation]
  -[_NMRPlaybackQueueResponseProtobuf setPlaybackQueue:]
  -[_NMRPlaybackQueueResponseProtobuf writeTo:]
  -[_NMRPlaybackQueueResponseProtobuf isEqual:]
  -[_NMRPlaybackQueueResponseProtobuf copyTo:]
  -[_NMRPlaybackQueueResponseProtobuf readFrom:]
  -[_NMRPlaybackQueueResponseProtobuf playbackQueue]
  -[_NMRPlaybackQueueResponseProtobuf copyWithZone:]
  -[_NMRPlaybackQueueResponseProtobuf setError:]
  -[_NMRPlaybackQueueResponseProtobuf error]
  -[_NMRPlaybackQueueResponseProtobuf hasPlaybackQueue]


_NMRContentItemMetadata : PBCodable <NSCopying>
 @property  BOOL hasTitle
 @property  NSString *title
 @property  BOOL hasArtist
 @property  NSString *artist
 @property  BOOL hasAlbum
 @property  NSString *album
 @property  BOOL hasDuration
 @property  double duration
 @property  BOOL hasIsAutoPlayItem
 @property  BOOL isAutoPlayItem

  // instance methods
  -[_NMRContentItemMetadata album]
  -[_NMRContentItemMetadata mergeFrom:]
  -[_NMRContentItemMetadata artist]
  -[_NMRContentItemMetadata hasTitle]
  -[_NMRContentItemMetadata setHasDuration:]
  -[_NMRContentItemMetadata setTitle:]
  -[_NMRContentItemMetadata .cxx_destruct]
  -[_NMRContentItemMetadata setDuration:]
  -[_NMRContentItemMetadata setArtist:]
  -[_NMRContentItemMetadata dictionaryRepresentation]
  -[_NMRContentItemMetadata writeTo:]
  -[_NMRContentItemMetadata setAlbum:]
  -[_NMRContentItemMetadata isEqual:]
  -[_NMRContentItemMetadata copyTo:]
  -[_NMRContentItemMetadata isAutoPlayItem]
  -[_NMRContentItemMetadata readFrom:]
  -[_NMRContentItemMetadata title]
  -[_NMRContentItemMetadata hasAlbum]
  -[_NMRContentItemMetadata hasArtist]
  -[_NMRContentItemMetadata copyWithZone:]
  -[_NMRContentItemMetadata duration]
  -[_NMRContentItemMetadata hasDuration]
  -[_NMRContentItemMetadata setIsAutoPlayItem:]
  -[_NMRContentItemMetadata setHasIsAutoPlayItem:]
  -[_NMRContentItemMetadata hasIsAutoPlayItem]


NMRSendCommandResultMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  unsigned int errorCode
 @property  NSArray *handlerReturnStatuses
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRSendCommandResultMessage messageWithErrorCode:handlerReturnStatuses:originIdentifier:]

  // instance methods
  -[NMRSendCommandResultMessage errorCode]
  -[NMRSendCommandResultMessage protobufData]
  -[NMRSendCommandResultMessage .cxx_destruct]
  -[NMRSendCommandResultMessage handlerReturnStatuses]
  -[NMRSendCommandResultMessage originIdentifier]
  -[NMRSendCommandResultMessage serializationDate]
  -[NMRSendCommandResultMessage initWithProtobufData:]
  -[NMRSendCommandResultMessage _initWithErrorCode:handlerReturnStatuses:originIdentifier:]


_NMRMediaRemoteGetIconMessage : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasWidth
 @property  double width
 @property  BOOL hasHeight
 @property  double height
 @property  BOOL hasBundleID
 @property  NSString *bundleID
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[_NMRMediaRemoteGetIconMessage width]
  -[_NMRMediaRemoteGetIconMessage bundleID]
  -[_NMRMediaRemoteGetIconMessage mergeFrom:]
  -[_NMRMediaRemoteGetIconMessage setWidth:]
  -[_NMRMediaRemoteGetIconMessage hasBundleID]
  -[_NMRMediaRemoteGetIconMessage .cxx_destruct]
  -[_NMRMediaRemoteGetIconMessage setOriginIdentifier:]
  -[_NMRMediaRemoteGetIconMessage dictionaryRepresentation]
  -[_NMRMediaRemoteGetIconMessage writeTo:]
  -[_NMRMediaRemoteGetIconMessage setHeight:]
  -[_NMRMediaRemoteGetIconMessage height]
  -[_NMRMediaRemoteGetIconMessage setHasHeight:]
  -[_NMRMediaRemoteGetIconMessage isEqual:]
  -[_NMRMediaRemoteGetIconMessage copyTo:]
  -[_NMRMediaRemoteGetIconMessage readFrom:]
  -[_NMRMediaRemoteGetIconMessage hasTimestamp]
  -[_NMRMediaRemoteGetIconMessage setBundleID:]
  -[_NMRMediaRemoteGetIconMessage hasHeight]
  -[_NMRMediaRemoteGetIconMessage hasWidth]
  -[_NMRMediaRemoteGetIconMessage timestamp]
  -[_NMRMediaRemoteGetIconMessage copyWithZone:]
  -[_NMRMediaRemoteGetIconMessage setHasTimestamp:]
  -[_NMRMediaRemoteGetIconMessage setTimestamp:]
  -[_NMRMediaRemoteGetIconMessage setHasWidth:]
  -[_NMRMediaRemoteGetIconMessage originIdentifier]
  -[_NMRMediaRemoteGetIconMessage hasOriginIdentifier]
  -[_NMRMediaRemoteGetIconMessage setHasOriginIdentifier:]


_NMRProxiedOriginsProtobuf : PBCodable <NSCopying>
 @property  NSMutableArray *origins

  // class methods
  +[_NMRProxiedOriginsProtobuf originsType]

  // instance methods
  -[_NMRProxiedOriginsProtobuf mergeFrom:]
  -[_NMRProxiedOriginsProtobuf .cxx_destruct]
  -[_NMRProxiedOriginsProtobuf dictionaryRepresentation]
  -[_NMRProxiedOriginsProtobuf writeTo:]
  -[_NMRProxiedOriginsProtobuf isEqual:]
  -[_NMRProxiedOriginsProtobuf copyTo:]
  -[_NMRProxiedOriginsProtobuf readFrom:]
  -[_NMRProxiedOriginsProtobuf origins]
  -[_NMRProxiedOriginsProtobuf copyWithZone:]
  -[_NMRProxiedOriginsProtobuf addOrigins:]
  -[_NMRProxiedOriginsProtobuf originsCount]
  -[_NMRProxiedOriginsProtobuf clearOrigins]
  -[_NMRProxiedOriginsProtobuf originsAtIndex:]
  -[_NMRProxiedOriginsProtobuf setOrigins:]


NMROrigin : NSObject
 @property  MPAVRoute *route
 @property  ^v mediaRemoteOrigin
 @property  ^v deviceInfo
 @property  NSString *displayName
 @property  NSNumber *uniqueIdentifier
 @property  BOOL isLocal
 @property  BOOL isCompanion
 @property  unsigned long type
 @property  unsigned long connectionState
 @property  NSString *deviceIdentifier
 @property  long long logicalDeviceCount

  // class methods
  +[NMROrigin _transientOriginWithEndpointRoute:]

  // instance methods
  -[NMROrigin connectionState]
  -[NMROrigin isCompanion]
  -[NMROrigin deviceInfo]
  -[NMROrigin displayName]
  -[NMROrigin uniqueIdentifier]
  -[NMROrigin route]
  -[NMROrigin .cxx_destruct]
  -[NMROrigin _handleExternalDeviceConnectionStateDidChangeNotification:]
  -[NMROrigin isLocal]
  -[NMROrigin init]
  -[NMROrigin initWithRoute:]
  -[NMROrigin deviceIdentifier]
  -[NMROrigin type]
  -[NMROrigin dealloc]
  -[NMROrigin _handleRouteConnectionDidConnectNotification:]
  -[NMROrigin _handleRouteConnectionDidInvalidateNotification:]
  -[NMROrigin _updateConnectionState]
  -[NMROrigin initWithOrigin:deviceInfo:]
  -[NMROrigin mediaRemoteOrigin]
  -[NMROrigin logicalDeviceCount]
  -[NMROrigin updateRoute:]
  -[NMROrigin updateOrigin:deviceInfo:]
  -[NMROrigin playerPathWithBundleID:playerID:]


NMROriginManager : NSObject <MPAVRoutingControllerDelegate>
 @property  NSArray *availableOrigins
 @property  NMROrigin *activeOrigin
 @property  NMROrigin *localOrigin
 @property  NMROrigin *companionOrigin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMROriginManager sharedManager]

  // instance methods
  -[NMROriginManager _handleDeviceInfoDidChangeNotification:]
  -[NMROriginManager localOrigin]
  -[NMROriginManager .cxx_destruct]
  -[NMROriginManager companionOrigin]
  -[NMROriginManager init]
  -[NMROriginManager routingControllerAvailableRoutesDidChange:]
  -[NMROriginManager dealloc]
  -[NMROriginManager availableOrigins]
  -[NMROriginManager _originFromTestOptions:]
  -[NMROriginManager originWithUniqueIdentifier:]
  -[NMROriginManager _handleMediaRemoteActiveOriginDidChangeNotification:]
  -[NMROriginManager _handleMediaRemoteAvailableOriginsDidChangeNotification:]
  -[NMROriginManager _updateMediaRemoteLocalOrigin]
  -[NMROriginManager _updateMediaRemoteAvailableAndActiveOrigins]
  -[NMROriginManager originWithDeviceIdentifier:]
  -[NMROriginManager _onQueue_updateAvailableOrigins]
  -[NMROriginManager _onQueue_updateActiveOriginIdentifier:]
  -[NMROriginManager activeOrigin]
  -[NMROriginManager originForPlayerPath:]
  -[NMROriginManager _beginProxiedEndpointDiscovery]
  -[NMROriginManager _endProxiedEndpointDiscovery]


NMRSendCommandMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  unsigned int command
 @property  NSString *bundleID
 @property  NSDictionary *options
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRSendCommandMessage messageWithCommand:bundleID:options:originIdentifier:]

  // instance methods
  -[NMRSendCommandMessage bundleID]
  -[NMRSendCommandMessage options]
  -[NMRSendCommandMessage protobufData]
  -[NMRSendCommandMessage .cxx_destruct]
  -[NMRSendCommandMessage command]
  -[NMRSendCommandMessage originIdentifier]
  -[NMRSendCommandMessage serializationDate]
  -[NMRSendCommandMessage initWithProtobufData:]
  -[NMRSendCommandMessage initWithCommand:bundleID:options:originIdentifier:]


_NMRCommandOptionsProtobuf : PBCodable <NSCopying>
 @property  BOOL hasSourceID
 @property  NSString *sourceID
 @property  BOOL hasMediaType
 @property  NSString *mediaType
 @property  BOOL hasExternalPlayerCommand
 @property  BOOL externalPlayerCommand
 @property  BOOL hasSkipInterval
 @property  float skipInterval
 @property  BOOL hasPlaybackRate
 @property  float playbackRate
 @property  BOOL hasRating
 @property  float rating
 @property  BOOL hasNegative
 @property  BOOL negative
 @property  BOOL hasPlaybackPosition
 @property  double playbackPosition
 @property  BOOL hasRepeatMode
 @property  int repeatMode
 @property  BOOL hasShuffleMode
 @property  int shuffleMode
 @property  BOOL hasContextID
 @property  NSString *contextID
 @property  BOOL hasTrackID
 @property  unsigned long trackID
 @property  BOOL hasRadioStationID
 @property  long long radioStationID
 @property  BOOL hasRadioStationHash
 @property  NSString *radioStationHash
 @property  BOOL hasSystemAppPlaybackQueueData
 @property  NSData *systemAppPlaybackQueueData
 @property  BOOL hasDestinationAppDisplayID
 @property  NSString *destinationAppDisplayID
 @property  BOOL hasSendOptions
 @property  unsigned int sendOptions
 @property  BOOL hasRequestDefermentToPlaybackQueuePosition
 @property  BOOL requestDefermentToPlaybackQueuePosition
 @property  BOOL hasShouldOverrideManuallyCuratedQueue
 @property  BOOL shouldOverrideManuallyCuratedQueue
 @property  BOOL hasStationURL
 @property  NSString *stationURL
 @property  BOOL hasShouldBeginRadioPlayback
 @property  BOOL shouldBeginRadioPlayback
 @property  BOOL hasPlaybackQueueInsertionPosition
 @property  int playbackQueueInsertionPosition
 @property  BOOL hasContentItemID
 @property  NSString *contentItemID
 @property  BOOL hasQueueEndAction
 @property  int queueEndAction

  // instance methods
  -[_NMRCommandOptionsProtobuf setContextID:]
  -[_NMRCommandOptionsProtobuf setPlaybackRate:]
  -[_NMRCommandOptionsProtobuf setMediaType:]
  -[_NMRCommandOptionsProtobuf playbackRate]
  -[_NMRCommandOptionsProtobuf setSourceID:]
  -[_NMRCommandOptionsProtobuf mergeFrom:]
  -[_NMRCommandOptionsProtobuf setShuffleMode:]
  -[_NMRCommandOptionsProtobuf hasMediaType]
  -[_NMRCommandOptionsProtobuf hasRating]
  -[_NMRCommandOptionsProtobuf contextID]
  -[_NMRCommandOptionsProtobuf shuffleMode]
  -[_NMRCommandOptionsProtobuf setQueueEndAction:]
  -[_NMRCommandOptionsProtobuf .cxx_destruct]
  -[_NMRCommandOptionsProtobuf hasRepeatMode]
  -[_NMRCommandOptionsProtobuf hasShuffleMode]
  -[_NMRCommandOptionsProtobuf setHasRepeatMode:]
  -[_NMRCommandOptionsProtobuf sourceID]
  -[_NMRCommandOptionsProtobuf repeatModeAsString:]
  -[_NMRCommandOptionsProtobuf StringAsRepeatMode:]
  -[_NMRCommandOptionsProtobuf shuffleModeAsString:]
  -[_NMRCommandOptionsProtobuf StringAsShuffleMode:]
  -[_NMRCommandOptionsProtobuf hasRadioStationHash]
  -[_NMRCommandOptionsProtobuf hasSourceID]
  -[_NMRCommandOptionsProtobuf dictionaryRepresentation]
  -[_NMRCommandOptionsProtobuf setDestinationAppDisplayID:]
  -[_NMRCommandOptionsProtobuf hasDestinationAppDisplayID]
  -[_NMRCommandOptionsProtobuf destinationAppDisplayID]
  -[_NMRCommandOptionsProtobuf trackID]
  -[_NMRCommandOptionsProtobuf writeTo:]
  -[_NMRCommandOptionsProtobuf rating]
  -[_NMRCommandOptionsProtobuf negative]
  -[_NMRCommandOptionsProtobuf isEqual:]
  -[_NMRCommandOptionsProtobuf contentItemID]
  -[_NMRCommandOptionsProtobuf copyTo:]
  -[_NMRCommandOptionsProtobuf setRating:]
  -[_NMRCommandOptionsProtobuf playbackPosition]
  -[_NMRCommandOptionsProtobuf setContentItemID:]
  -[_NMRCommandOptionsProtobuf readFrom:]
  -[_NMRCommandOptionsProtobuf setPlaybackPosition:]
  -[_NMRCommandOptionsProtobuf radioStationHash]
  -[_NMRCommandOptionsProtobuf setRadioStationHash:]
  -[_NMRCommandOptionsProtobuf radioStationID]
  -[_NMRCommandOptionsProtobuf setRadioStationID:]
  -[_NMRCommandOptionsProtobuf hasTrackID]
  -[_NMRCommandOptionsProtobuf repeatMode]
  -[_NMRCommandOptionsProtobuf setNegative:]
  -[_NMRCommandOptionsProtobuf setStationURL:]
  -[_NMRCommandOptionsProtobuf hasNegative]
  -[_NMRCommandOptionsProtobuf mediaType]
  -[_NMRCommandOptionsProtobuf hasSkipInterval]
  -[_NMRCommandOptionsProtobuf setSystemAppPlaybackQueueData:]
  -[_NMRCommandOptionsProtobuf setSkipInterval:]
  -[_NMRCommandOptionsProtobuf hasContextID]
  -[_NMRCommandOptionsProtobuf shouldOverrideManuallyCuratedQueue]
  -[_NMRCommandOptionsProtobuf setShouldOverrideManuallyCuratedQueue:]
  -[_NMRCommandOptionsProtobuf setExternalPlayerCommand:]
  -[_NMRCommandOptionsProtobuf setHasExternalPlayerCommand:]
  -[_NMRCommandOptionsProtobuf hasExternalPlayerCommand]
  -[_NMRCommandOptionsProtobuf setHasSkipInterval:]
  -[_NMRCommandOptionsProtobuf setHasRating:]
  -[_NMRCommandOptionsProtobuf setHasNegative:]
  -[_NMRCommandOptionsProtobuf setHasPlaybackPosition:]
  -[_NMRCommandOptionsProtobuf hasPlaybackPosition]
  -[_NMRCommandOptionsProtobuf setHasTrackID:]
  -[_NMRCommandOptionsProtobuf setHasRadioStationID:]
  -[_NMRCommandOptionsProtobuf hasRadioStationID]
  -[_NMRCommandOptionsProtobuf sendOptions]
  -[_NMRCommandOptionsProtobuf hasSystemAppPlaybackQueueData]
  -[_NMRCommandOptionsProtobuf setSendOptions:]
  -[_NMRCommandOptionsProtobuf setHasSendOptions:]
  -[_NMRCommandOptionsProtobuf hasSendOptions]
  -[_NMRCommandOptionsProtobuf setRequestDefermentToPlaybackQueuePosition:]
  -[_NMRCommandOptionsProtobuf setShouldBeginRadioPlayback:]
  -[_NMRCommandOptionsProtobuf setTrackID:]
  -[_NMRCommandOptionsProtobuf setHasRequestDefermentToPlaybackQueuePosition:]
  -[_NMRCommandOptionsProtobuf hasRequestDefermentToPlaybackQueuePosition]
  -[_NMRCommandOptionsProtobuf setHasShouldOverrideManuallyCuratedQueue:]
  -[_NMRCommandOptionsProtobuf hasShouldOverrideManuallyCuratedQueue]
  -[_NMRCommandOptionsProtobuf hasStationURL]
  -[_NMRCommandOptionsProtobuf setHasShouldBeginRadioPlayback:]
  -[_NMRCommandOptionsProtobuf hasShouldBeginRadioPlayback]
  -[_NMRCommandOptionsProtobuf setPlaybackQueueInsertionPosition:]
  -[_NMRCommandOptionsProtobuf setHasPlaybackQueueInsertionPosition:]
  -[_NMRCommandOptionsProtobuf hasPlaybackQueueInsertionPosition]
  -[_NMRCommandOptionsProtobuf hasContentItemID]
  -[_NMRCommandOptionsProtobuf setHasQueueEndAction:]
  -[_NMRCommandOptionsProtobuf hasQueueEndAction]
  -[_NMRCommandOptionsProtobuf queueEndActionAsString:]
  -[_NMRCommandOptionsProtobuf StringAsQueueEndAction:]
  -[_NMRCommandOptionsProtobuf skipInterval]
  -[_NMRCommandOptionsProtobuf copyWithZone:]
  -[_NMRCommandOptionsProtobuf externalPlayerCommand]
  -[_NMRCommandOptionsProtobuf systemAppPlaybackQueueData]
  -[_NMRCommandOptionsProtobuf requestDefermentToPlaybackQueuePosition]
  -[_NMRCommandOptionsProtobuf shouldBeginRadioPlayback]
  -[_NMRCommandOptionsProtobuf playbackQueueInsertionPosition]
  -[_NMRCommandOptionsProtobuf stationURL]
  -[_NMRCommandOptionsProtobuf setRepeatMode:]
  -[_NMRCommandOptionsProtobuf setHasPlaybackRate:]
  -[_NMRCommandOptionsProtobuf setHasShuffleMode:]
  -[_NMRCommandOptionsProtobuf hasPlaybackRate]
  -[_NMRCommandOptionsProtobuf queueEndAction]


_NMRPlaybackQueue : PBCodable <NSCopying>
 @property  BOOL hasLocation
 @property  int location
 @property  NSMutableArray *contentItems

  // class methods
  +[_NMRPlaybackQueue contentItemType]

  // instance methods
  -[_NMRPlaybackQueue contentItems]
  -[_NMRPlaybackQueue mergeFrom:]
  -[_NMRPlaybackQueue .cxx_destruct]
  -[_NMRPlaybackQueue dictionaryRepresentation]
  -[_NMRPlaybackQueue setLocation:]
  -[_NMRPlaybackQueue writeTo:]
  -[_NMRPlaybackQueue isEqual:]
  -[_NMRPlaybackQueue copyTo:]
  -[_NMRPlaybackQueue hasLocation]
  -[_NMRPlaybackQueue readFrom:]
  -[_NMRPlaybackQueue location]
  -[_NMRPlaybackQueue setHasLocation:]
  -[_NMRPlaybackQueue setContentItems:]
  -[_NMRPlaybackQueue contentItemsCount]
  -[_NMRPlaybackQueue clearContentItems]
  -[_NMRPlaybackQueue copyWithZone:]
  -[_NMRPlaybackQueue addContentItem:]
  -[_NMRPlaybackQueue contentItemAtIndex:]


_NMRNowPlayingInfoProtobuf : PBCodable <NSCopying>
 @property  BOOL hasAlbum
 @property  NSString *album
 @property  BOOL hasArtist
 @property  NSString *artist
 @property  BOOL hasDuration
 @property  double duration
 @property  BOOL hasElapsedTime
 @property  double elapsedTime
 @property  BOOL hasPlaybackRate
 @property  float playbackRate
 @property  BOOL hasRepeatMode
 @property  int repeatMode
 @property  BOOL hasShuffleMode
 @property  int shuffleMode
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasTitle
 @property  NSString *title
 @property  BOOL hasUniqueIdentifier
 @property  unsigned long uniqueIdentifier
 @property  BOOL hasIsExplicitTrack
 @property  BOOL isExplicitTrack
 @property  BOOL hasIsMusicApp
 @property  BOOL isMusicApp
 @property  BOOL hasRadioStationIdentifier
 @property  long long radioStationIdentifier
 @property  BOOL hasRadioStationHash
 @property  NSString *radioStationHash
 @property  BOOL hasRadioStationName
 @property  NSString *radioStationName
 @property  BOOL hasArtworkDataDigest
 @property  NSData *artworkDataDigest
 @property  BOOL hasIsAlwaysLive
 @property  BOOL isAlwaysLive
 @property  BOOL hasIsAdvertisement
 @property  BOOL isAdvertisement
 @property  BOOL hasStoreSubscriptionAdamID
 @property  long long storeSubscriptionAdamID
 @property  BOOL hasPreferredPlaybackRate
 @property  float preferredPlaybackRate
 @property  BOOL hasMediaType
 @property  NSString *mediaType
 @property  BOOL hasCollectionInfoData
 @property  NSData *collectionInfoData
 @property  BOOL hasArtworkURL
 @property  NSString *artworkURL
 @property  BOOL hasStoreAdamID
 @property  long long storeAdamID
 @property  BOOL hasUserInfoData
 @property  NSData *userInfoData

  // instance methods
  -[_NMRNowPlayingInfoProtobuf hasUniqueIdentifier]
  -[_NMRNowPlayingInfoProtobuf setPlaybackRate:]
  -[_NMRNowPlayingInfoProtobuf setMediaType:]
  -[_NMRNowPlayingInfoProtobuf setUniqueIdentifier:]
  -[_NMRNowPlayingInfoProtobuf artworkURL]
  -[_NMRNowPlayingInfoProtobuf isAdvertisement]
  -[_NMRNowPlayingInfoProtobuf playbackRate]
  -[_NMRNowPlayingInfoProtobuf setRadioStationName:]
  -[_NMRNowPlayingInfoProtobuf album]
  -[_NMRNowPlayingInfoProtobuf radioStationName]
  -[_NMRNowPlayingInfoProtobuf setElapsedTime:]
  -[_NMRNowPlayingInfoProtobuf setArtworkURL:]
  -[_NMRNowPlayingInfoProtobuf isAlwaysLive]
  -[_NMRNowPlayingInfoProtobuf mergeFrom:]
  -[_NMRNowPlayingInfoProtobuf setShuffleMode:]
  -[_NMRNowPlayingInfoProtobuf uniqueIdentifier]
  -[_NMRNowPlayingInfoProtobuf artist]
  -[_NMRNowPlayingInfoProtobuf hasMediaType]
  -[_NMRNowPlayingInfoProtobuf hasTitle]
  -[_NMRNowPlayingInfoProtobuf elapsedTime]
  -[_NMRNowPlayingInfoProtobuf setHasDuration:]
  -[_NMRNowPlayingInfoProtobuf setTitle:]
  -[_NMRNowPlayingInfoProtobuf shuffleMode]
  -[_NMRNowPlayingInfoProtobuf setRadioStationIdentifier:]
  -[_NMRNowPlayingInfoProtobuf .cxx_destruct]
  -[_NMRNowPlayingInfoProtobuf hasRepeatMode]
  -[_NMRNowPlayingInfoProtobuf hasShuffleMode]
  -[_NMRNowPlayingInfoProtobuf setHasRepeatMode:]
  -[_NMRNowPlayingInfoProtobuf setStoreSubscriptionAdamID:]
  -[_NMRNowPlayingInfoProtobuf setDuration:]
  -[_NMRNowPlayingInfoProtobuf setArtist:]
  -[_NMRNowPlayingInfoProtobuf setArtworkDataDigest:]
  -[_NMRNowPlayingInfoProtobuf repeatModeAsString:]
  -[_NMRNowPlayingInfoProtobuf StringAsRepeatMode:]
  -[_NMRNowPlayingInfoProtobuf shuffleModeAsString:]
  -[_NMRNowPlayingInfoProtobuf StringAsShuffleMode:]
  -[_NMRNowPlayingInfoProtobuf setIsExplicitTrack:]
  -[_NMRNowPlayingInfoProtobuf setHasIsExplicitTrack:]
  -[_NMRNowPlayingInfoProtobuf hasIsExplicitTrack]
  -[_NMRNowPlayingInfoProtobuf setIsMusicApp:]
  -[_NMRNowPlayingInfoProtobuf setHasIsMusicApp:]
  -[_NMRNowPlayingInfoProtobuf hasIsMusicApp]
  -[_NMRNowPlayingInfoProtobuf hasRadioStationHash]
  -[_NMRNowPlayingInfoProtobuf hasRadioStationName]
  -[_NMRNowPlayingInfoProtobuf hasArtworkDataDigest]
  -[_NMRNowPlayingInfoProtobuf setHasIsAlwaysLive:]
  -[_NMRNowPlayingInfoProtobuf hasIsAlwaysLive]
  -[_NMRNowPlayingInfoProtobuf setIsAdvertisement:]
  -[_NMRNowPlayingInfoProtobuf setHasIsAdvertisement:]
  -[_NMRNowPlayingInfoProtobuf hasIsAdvertisement]
  -[_NMRNowPlayingInfoProtobuf isMusicApp]
  -[_NMRNowPlayingInfoProtobuf artworkDataDigest]
  -[_NMRNowPlayingInfoProtobuf dictionaryRepresentation]
  -[_NMRNowPlayingInfoProtobuf writeTo:]
  -[_NMRNowPlayingInfoProtobuf setAlbum:]
  -[_NMRNowPlayingInfoProtobuf setUserInfoData:]
  -[_NMRNowPlayingInfoProtobuf isEqual:]
  -[_NMRNowPlayingInfoProtobuf copyTo:]
  -[_NMRNowPlayingInfoProtobuf storeSubscriptionAdamID]
  -[_NMRNowPlayingInfoProtobuf isExplicitTrack]
  -[_NMRNowPlayingInfoProtobuf readFrom:]
  -[_NMRNowPlayingInfoProtobuf radioStationIdentifier]
  -[_NMRNowPlayingInfoProtobuf radioStationHash]
  -[_NMRNowPlayingInfoProtobuf setRadioStationHash:]
  -[_NMRNowPlayingInfoProtobuf setStoreAdamID:]
  -[_NMRNowPlayingInfoProtobuf userInfoData]
  -[_NMRNowPlayingInfoProtobuf setIsAlwaysLive:]
  -[_NMRNowPlayingInfoProtobuf hasTimestamp]
  -[_NMRNowPlayingInfoProtobuf repeatMode]
  -[_NMRNowPlayingInfoProtobuf title]
  -[_NMRNowPlayingInfoProtobuf setHasElapsedTime:]
  -[_NMRNowPlayingInfoProtobuf setHasUniqueIdentifier:]
  -[_NMRNowPlayingInfoProtobuf hasAlbum]
  -[_NMRNowPlayingInfoProtobuf mediaType]
  -[_NMRNowPlayingInfoProtobuf hasArtist]
  -[_NMRNowPlayingInfoProtobuf storeAdamID]
  -[_NMRNowPlayingInfoProtobuf timestamp]
  -[_NMRNowPlayingInfoProtobuf copyWithZone:]
  -[_NMRNowPlayingInfoProtobuf setHasTimestamp:]
  -[_NMRNowPlayingInfoProtobuf hasElapsedTime]
  -[_NMRNowPlayingInfoProtobuf setHasRadioStationIdentifier:]
  -[_NMRNowPlayingInfoProtobuf hasRadioStationIdentifier]
  -[_NMRNowPlayingInfoProtobuf setRepeatMode:]
  -[_NMRNowPlayingInfoProtobuf setHasPlaybackRate:]
  -[_NMRNowPlayingInfoProtobuf setHasShuffleMode:]
  -[_NMRNowPlayingInfoProtobuf hasPlaybackRate]
  -[_NMRNowPlayingInfoProtobuf setTimestamp:]
  -[_NMRNowPlayingInfoProtobuf duration]
  -[_NMRNowPlayingInfoProtobuf hasDuration]
  -[_NMRNowPlayingInfoProtobuf setPreferredPlaybackRate:]
  -[_NMRNowPlayingInfoProtobuf preferredPlaybackRate]
  -[_NMRNowPlayingInfoProtobuf setHasPreferredPlaybackRate:]
  -[_NMRNowPlayingInfoProtobuf hasPreferredPlaybackRate]
  -[_NMRNowPlayingInfoProtobuf collectionInfoData]
  -[_NMRNowPlayingInfoProtobuf validateUniqueIdentifier:error:]
  -[_NMRNowPlayingInfoProtobuf setCollectionInfoData:]
  -[_NMRNowPlayingInfoProtobuf setHasStoreSubscriptionAdamID:]
  -[_NMRNowPlayingInfoProtobuf hasStoreSubscriptionAdamID]
  -[_NMRNowPlayingInfoProtobuf hasCollectionInfoData]
  -[_NMRNowPlayingInfoProtobuf hasArtworkURL]
  -[_NMRNowPlayingInfoProtobuf setHasStoreAdamID:]
  -[_NMRNowPlayingInfoProtobuf hasStoreAdamID]
  -[_NMRNowPlayingInfoProtobuf hasUserInfoData]


NMRProtobufSerialization : NSObject
 @property  NSDictionary *dictionaryKeyToProtobufKeyMapping
 @property  Class protobufClass
 @property  @? dictionaryValueToProtobufValueTransformer
 @property  @? protobufValueToDictionaryValueTransformer

  // instance methods
  -[NMRProtobufSerialization .cxx_destruct]
  -[NMRProtobufSerialization setDictionaryKeyToProtobufKeyMapping:]
  -[NMRProtobufSerialization dictionaryKeyToProtobufKeyMapping]
  -[NMRProtobufSerialization protobufClass]
  -[NMRProtobufSerialization setProtobufClass:]
  -[NMRProtobufSerialization dictionaryValueToProtobufValueTransformer]
  -[NMRProtobufSerialization setDictionaryValueToProtobufValueTransformer:]
  -[NMRProtobufSerialization protobufValueToDictionaryValueTransformer]
  -[NMRProtobufSerialization setProtobufValueToDictionaryValueTransformer:]
  -[NMRProtobufSerialization protobufFromDictionary:]
  -[NMRProtobufSerialization dictionaryFromProtobuf:]
  -[NMRProtobufSerialization protobufDataFromDictionary:]
  -[NMRProtobufSerialization dictionaryFromProtobufData:]


NMRMediaRemoteSetStateMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  NSData *nowPlayingInfoData
 @property  NSData *applicationInfoData
 @property  NSData *supportedCommandsData
 @property  NSData *playbackQueueData
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRMediaRemoteSetStateMessage messageWithNowPlayingInfo:applicationInfo:supportedCommands:playbackQueue:originIdentifier:]

  // instance methods
  -[NMRMediaRemoteSetStateMessage protobufData]
  -[NMRMediaRemoteSetStateMessage .cxx_destruct]
  -[NMRMediaRemoteSetStateMessage originIdentifier]
  -[NMRMediaRemoteSetStateMessage serializationDate]
  -[NMRMediaRemoteSetStateMessage initWithProtobufData:]
  -[NMRMediaRemoteSetStateMessage _initWithNowPlayingInfo:applicationInfo:supportedCommands:playbackQueue:originIdentifier:]
  -[NMRMediaRemoteSetStateMessage nowPlayingInfoData]
  -[NMRMediaRemoteSetStateMessage applicationInfoData]
  -[NMRMediaRemoteSetStateMessage supportedCommandsData]
  -[NMRMediaRemoteSetStateMessage playbackQueueData]


NMRMediaRemoteSetArtworkMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  NSData *jpegArtwork
 @property  NSData *originalDigest
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRMediaRemoteSetArtworkMessage messageWithJPEGArtwork:originalDigest:originIdentifier:]

  // instance methods
  -[NMRMediaRemoteSetArtworkMessage protobufData]
  -[NMRMediaRemoteSetArtworkMessage .cxx_destruct]
  -[NMRMediaRemoteSetArtworkMessage originIdentifier]
  -[NMRMediaRemoteSetArtworkMessage serializationDate]
  -[NMRMediaRemoteSetArtworkMessage initWithProtobufData:]
  -[NMRMediaRemoteSetArtworkMessage originalDigest]
  -[NMRMediaRemoteSetArtworkMessage _initWithJPEGArtwork:originalDigest:originIdentifier:]
  -[NMRMediaRemoteSetArtworkMessage jpegArtwork]


NMRMediaRemoteSetIconMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  NSData *icon
 @property  NSData *originalDigest
 @property  NSString *bundleID
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRMediaRemoteSetIconMessage messageWithIcon:originalDigest:bundleID:originIdentifier:]

  // instance methods
  -[NMRMediaRemoteSetIconMessage bundleID]
  -[NMRMediaRemoteSetIconMessage icon]
  -[NMRMediaRemoteSetIconMessage protobufData]
  -[NMRMediaRemoteSetIconMessage .cxx_destruct]
  -[NMRMediaRemoteSetIconMessage originIdentifier]
  -[NMRMediaRemoteSetIconMessage serializationDate]
  -[NMRMediaRemoteSetIconMessage initWithProtobufData:]
  -[NMRMediaRemoteSetIconMessage originalDigest]
  -[NMRMediaRemoteSetIconMessage _initWithIcon:originalDigest:bundleID:originIdentifier:]


NMRAppLaunchInfo : NSObject
 @property  NSString *bundleID
 @property  NSURL *URL

  // instance methods
  -[NMRAppLaunchInfo bundleID]
  -[NMRAppLaunchInfo .cxx_destruct]
  -[NMRAppLaunchInfo URL]
  -[NMRAppLaunchInfo initWithBundleID:URL:]


NMRMediaRemoteGetStateMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  NSData *nowPlayingInfoDigest
 @property  NSData *applicationInfoDigest
 @property  NSData *supportedCommandsDigest
 @property  NSData *playbackQueueDigest
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRMediaRemoteGetStateMessage messageWithNowPlayingInfoDigest:applicationInfoDigest:supportedCommandsDigest:playbackQueueDigest:originIdentifier:]

  // instance methods
  -[NMRMediaRemoteGetStateMessage protobufData]
  -[NMRMediaRemoteGetStateMessage .cxx_destruct]
  -[NMRMediaRemoteGetStateMessage originIdentifier]
  -[NMRMediaRemoteGetStateMessage serializationDate]
  -[NMRMediaRemoteGetStateMessage initWithProtobufData:]
  -[NMRMediaRemoteGetStateMessage _initWithNowPlayingInfoDigest:applicationInfoDigest:supportedCommandsDigest:playbackQueueDigest:originIdentifier:]
  -[NMRMediaRemoteGetStateMessage nowPlayingInfoDigest]
  -[NMRMediaRemoteGetStateMessage applicationInfoDigest]
  -[NMRMediaRemoteGetStateMessage supportedCommandsDigest]
  -[NMRMediaRemoteGetStateMessage playbackQueueDigest]


NMRMediaRemoteGetArtworkMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRMediaRemoteGetArtworkMessage messageWithOriginIdentifier:]

  // instance methods
  -[NMRMediaRemoteGetArtworkMessage protobufData]
  -[NMRMediaRemoteGetArtworkMessage .cxx_destruct]
  -[NMRMediaRemoteGetArtworkMessage originIdentifier]
  -[NMRMediaRemoteGetArtworkMessage serializationDate]
  -[NMRMediaRemoteGetArtworkMessage initWithProtobufData:]
  -[NMRMediaRemoteGetArtworkMessage _initWithOriginIdentifier:]


NMRMediaRemoteGetIconMessage : NSObject <NMRMediaRemoteProtobufCodable>
 @property  NSNumber *width
 @property  NSNumber *height
 @property  NSString *bundleID
 @property  NSNumber *originIdentifier
 @property  NSDate *serializationDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NMRMediaRemoteGetIconMessage messageWithIconWidth:height:bundleID:originIdentifier:]

  // instance methods
  -[NMRMediaRemoteGetIconMessage width]
  -[NMRMediaRemoteGetIconMessage bundleID]
  -[NMRMediaRemoteGetIconMessage protobufData]
  -[NMRMediaRemoteGetIconMessage .cxx_destruct]
  -[NMRMediaRemoteGetIconMessage height]
  -[NMRMediaRemoteGetIconMessage originIdentifier]
  -[NMRMediaRemoteGetIconMessage serializationDate]
  -[NMRMediaRemoteGetIconMessage initWithProtobufData:]
  -[NMRMediaRemoteGetIconMessage _initWithIconWidth:height:bundleID:originIdentifier:]


NMRNowPlayingClient : NSObject
 @property  ^v mediaRemoteNowPlayingClient
 @property  NSString *bundleIdentifier
 @property  NSString *displayName

  // instance methods
  -[NMRNowPlayingClient displayName]
  -[NMRNowPlayingClient bundleIdentifier]
  -[NMRNowPlayingClient .cxx_destruct]
  -[NMRNowPlayingClient isEqual:]
  -[NMRNowPlayingClient dealloc]
  -[NMRNowPlayingClient mediaRemoteNowPlayingClient]
  -[NMRNowPlayingClient initWithMRNowPlayingClient:]


NMRPlaybackQueue : NSObject
 @property  NMROrigin *origin
 @property  <NMRPlaybackQueueDelegate> *delegate
 @property  {?=qq} observedRange
 @property  NSData *fullPlaybackQueueData

  // instance methods
  -[NMRPlaybackQueue setNowPlayingInfo:]
  -[NMRPlaybackQueue origin]
  -[NMRPlaybackQueue setOrigin:]
  -[NMRPlaybackQueue .cxx_destruct]
  -[NMRPlaybackQueue setDelegate:]
  -[NMRPlaybackQueue updateWithData:]
  -[NMRPlaybackQueue init]
  -[NMRPlaybackQueue _itemWithIdentifier:]
  -[NMRPlaybackQueue delegate]
  -[NMRPlaybackQueue dealloc]
  -[NMRPlaybackQueue _contentItemIdentifiers]
  -[NMRPlaybackQueue _refreshCurrentPlaybackQueueFromMediaRemoteWithCompletion:]
  -[NMRPlaybackQueue _mediaRemotePlaybackQueueWithRange:includeMetadata:]
  -[NMRPlaybackQueue _metadataForItemWithIdentifier:]
  -[NMRPlaybackQueue observedRange]
  -[NMRPlaybackQueue _updateWithMediaRemoteQueue:]
  -[NMRPlaybackQueue _needsMetadataForMediaRemoteItem:]
  -[NMRPlaybackQueue beginObservingMediaRemotePlaybackQueueForOrigin:]
  -[NMRPlaybackQueue fullPlaybackQueueData]
  -[NMRPlaybackQueue copyFullMediaRemotePlaybackQueueIncludingMetadata:]
  -[NMRPlaybackQueue copyMediaRemotePlaybackQueueWithRange:includeMetadata:]
  -[NMRPlaybackQueue deltaPlaybackQueueDataFromPreviousData:invalidatedMetadataIdentifiers:]
  -[NMRPlaybackQueue _updateMetadataWithMediaRemoteItems:]
  -[NMRPlaybackQueue _rangeOfItemsNeedingMetadataForMediaRemoteQueue:]
  -[NMRPlaybackQueue _needsUpdateForMediaRemoteQueue:]
  -[NMRPlaybackQueue setObservedRange:]


_NMRSendCommandMessageProtobuf : PBCodable <NSCopying>
 @property  BOOL hasCommand
 @property  int command
 @property  BOOL hasOptions
 @property  _NMRCommandOptionsProtobuf *options
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier
 @property  BOOL hasBundleID
 @property  NSString *bundleID

  // instance methods
  -[_NMRSendCommandMessageProtobuf bundleID]
  -[_NMRSendCommandMessageProtobuf mergeFrom:]
  -[_NMRSendCommandMessageProtobuf setCommand:]
  -[_NMRSendCommandMessageProtobuf hasBundleID]
  -[_NMRSendCommandMessageProtobuf options]
  -[_NMRSendCommandMessageProtobuf setOptions:]
  -[_NMRSendCommandMessageProtobuf .cxx_destruct]
  -[_NMRSendCommandMessageProtobuf setOriginIdentifier:]
  -[_NMRSendCommandMessageProtobuf dictionaryRepresentation]
  -[_NMRSendCommandMessageProtobuf hasCommand]
  -[_NMRSendCommandMessageProtobuf setHasCommand:]
  -[_NMRSendCommandMessageProtobuf commandAsString:]
  -[_NMRSendCommandMessageProtobuf StringAsCommand:]
  -[_NMRSendCommandMessageProtobuf command]
  -[_NMRSendCommandMessageProtobuf writeTo:]
  -[_NMRSendCommandMessageProtobuf isEqual:]
  -[_NMRSendCommandMessageProtobuf copyTo:]
  -[_NMRSendCommandMessageProtobuf readFrom:]
  -[_NMRSendCommandMessageProtobuf hasTimestamp]
  -[_NMRSendCommandMessageProtobuf setBundleID:]
  -[_NMRSendCommandMessageProtobuf timestamp]
  -[_NMRSendCommandMessageProtobuf hasOptions]
  -[_NMRSendCommandMessageProtobuf copyWithZone:]
  -[_NMRSendCommandMessageProtobuf setHasTimestamp:]
  -[_NMRSendCommandMessageProtobuf setTimestamp:]
  -[_NMRSendCommandMessageProtobuf originIdentifier]
  -[_NMRSendCommandMessageProtobuf hasOriginIdentifier]
  -[_NMRSendCommandMessageProtobuf setHasOriginIdentifier:]


_NMRMediaRemoteGetStateMessageProfobuf : PBCodable <NSCopying>
 @property  BOOL hasState
 @property  int state
 @property  BOOL hasKnownDigest
 @property  NSData *knownDigest
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasNowPlayingInfoDigest
 @property  NSData *nowPlayingInfoDigest
 @property  BOOL hasApplicationInfoDigest
 @property  NSData *applicationInfoDigest
 @property  BOOL hasSupportedCommandsDigest
 @property  NSData *supportedCommandsDigest
 @property  BOOL hasPlaybackQueueDigest
 @property  NSData *playbackQueueDigest
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[_NMRMediaRemoteGetStateMessageProfobuf mergeFrom:]
  -[_NMRMediaRemoteGetStateMessageProfobuf .cxx_destruct]
  -[_NMRMediaRemoteGetStateMessageProfobuf setOriginIdentifier:]
  -[_NMRMediaRemoteGetStateMessageProfobuf dictionaryRepresentation]
  -[_NMRMediaRemoteGetStateMessageProfobuf writeTo:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setState:]
  -[_NMRMediaRemoteGetStateMessageProfobuf isEqual:]
  -[_NMRMediaRemoteGetStateMessageProfobuf copyTo:]
  -[_NMRMediaRemoteGetStateMessageProfobuf readFrom:]
  -[_NMRMediaRemoteGetStateMessageProfobuf state]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasState]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasTimestamp]
  -[_NMRMediaRemoteGetStateMessageProfobuf timestamp]
  -[_NMRMediaRemoteGetStateMessageProfobuf copyWithZone:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setHasTimestamp:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setHasState:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setTimestamp:]
  -[_NMRMediaRemoteGetStateMessageProfobuf originIdentifier]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasOriginIdentifier]
  -[_NMRMediaRemoteGetStateMessageProfobuf setHasOriginIdentifier:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setNowPlayingInfoDigest:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setApplicationInfoDigest:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setSupportedCommandsDigest:]
  -[_NMRMediaRemoteGetStateMessageProfobuf setPlaybackQueueDigest:]
  -[_NMRMediaRemoteGetStateMessageProfobuf nowPlayingInfoDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf applicationInfoDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf supportedCommandsDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf playbackQueueDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf setKnownDigest:]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasKnownDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasNowPlayingInfoDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasApplicationInfoDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasSupportedCommandsDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf hasPlaybackQueueDigest]
  -[_NMRMediaRemoteGetStateMessageProfobuf knownDigest]


NMROriginController : NSObject <NMROriginObserver, NMROriginObserverDelegate, NMROriginCommandHandler>
 @property  <NMROriginObserver> *originObserver
 @property  <NMROriginCommandHandler> *originCommandHandler
 @property  NMROrigin *origin
 @property  NMRNowPlayingState *nowPlayingState
 @property  NMRPlaybackQueue *playbackQueue
 @property  <NMROriginObserverDelegate> *delegate
 @property  BOOL shouldObservePlaybackQueue
 @property  BOOL shouldObserveArtwork
 @property  BOOL shouldObserveLibraryAddStatus
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NMROriginController origin]
  -[NMROriginController .cxx_destruct]
  -[NMROriginController beginObserving]
  -[NMROriginController endObserving]
  -[NMROriginController setDelegate:]
  -[NMROriginController playbackQueue]
  -[NMROriginController delegate]
  -[NMROriginController nowPlayingState]
  -[NMROriginController _notifyObserverOfUpdatedNowPlayingInfo]
  -[NMROriginController _notifyObserverOfUpdatedPlaybackState]
  -[NMROriginController _notifyObserverOfUpdatedSupportedCommands]
  -[NMROriginController _notifyObserverOfUpdatedElapsedTime]
  -[NMROriginController originObserver:didUpdateNowPlayingInfoForOrigin:]
  -[NMROriginController originObserver:didUpdateNowPlayingApplicationBundleIdentifierForOrigin:]
  -[NMROriginController originObserver:didUpdatePlaybackStateForOrigin:]
  -[NMROriginController originObserver:didUpdateSupportedCommandsForOrigin:]
  -[NMROriginController originObserver:didUpdateElapsedTimeForOrigin:]
  -[NMROriginController originObserver:didUpdateTimestampForOrigin:]
  -[NMROriginController originObserver:didUpdatePlaybackQueueForOrigin:]
  -[NMROriginController updateNowPlayingStateWithCompletion:]
  -[NMROriginController shouldObservePlaybackQueue]
  -[NMROriginController setShouldObservePlaybackQueue:]
  -[NMROriginController shouldObserveArtwork]
  -[NMROriginController setShouldObserveArtwork:]
  -[NMROriginController shouldObserveLibraryAddStatus]
  -[NMROriginController setShouldObserveLibraryAddStatus:]
  -[NMROriginController sendMediaRemoteCommand:options:userInitiated:completion:]
  -[NMROriginController setOriginObserver:]
  -[NMROriginController setOriginCommandHandler:]
  -[NMROriginController initWithOrigin:options:]
  -[NMROriginController _notifyObserverOfUpdatedNowPlayingApplicationBundleIdentifier]
  -[NMROriginController _notifyObserverOfUpdatedTimestamp]
  -[NMROriginController _notifyObserverOfUpdatedPlaybackQueue]
  -[NMROriginController originCommandHandler]
  -[NMROriginController originObserver]


NMROriginInfo : NSObject <NMRMediaRemoteProtobufCodable>
 @property  int uniqueIdentifier
 @property  NSString *displayName
 @property  NSData *deviceInfoData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NMROriginInfo setUniqueIdentifier:]
  -[NMROriginInfo displayName]
  -[NMROriginInfo uniqueIdentifier]
  -[NMROriginInfo protobufData]
  -[NMROriginInfo .cxx_destruct]
  -[NMROriginInfo init]
  -[NMROriginInfo protobuf]
  -[NMROriginInfo setDisplayName:]
  -[NMROriginInfo initWithProtobuf:]
  -[NMROriginInfo initWithProtobufData:]
  -[NMROriginInfo deviceInfoData]
  -[NMROriginInfo setDeviceInfoData:]


_NMRNowPlayingApplicationStateProtobuf : PBCodable <NSCopying>
 @property  BOOL hasCompanionBundleIdentifier
 @property  NSString *companionBundleIdentifier
 @property  BOOL hasLocalizedDisplayName
 @property  NSString *localizedDisplayName
 @property  BOOL hasPlaybackState
 @property  unsigned int playbackState
 @property  BOOL hasWatchBundleIdentifier
 @property  NSString *watchBundleIdentifier
 @property  BOOL hasIconDigest
 @property  NSData *iconDigest
 @property  BOOL hasProcessID
 @property  int processID

  // instance methods
  -[_NMRNowPlayingApplicationStateProtobuf playbackState]
  -[_NMRNowPlayingApplicationStateProtobuf companionBundleIdentifier]
  -[_NMRNowPlayingApplicationStateProtobuf mergeFrom:]
  -[_NMRNowPlayingApplicationStateProtobuf setPlaybackState:]
  -[_NMRNowPlayingApplicationStateProtobuf localizedDisplayName]
  -[_NMRNowPlayingApplicationStateProtobuf .cxx_destruct]
  -[_NMRNowPlayingApplicationStateProtobuf dictionaryRepresentation]
  -[_NMRNowPlayingApplicationStateProtobuf writeTo:]
  -[_NMRNowPlayingApplicationStateProtobuf setProcessID:]
  -[_NMRNowPlayingApplicationStateProtobuf setLocalizedDisplayName:]
  -[_NMRNowPlayingApplicationStateProtobuf isEqual:]
  -[_NMRNowPlayingApplicationStateProtobuf copyTo:]
  -[_NMRNowPlayingApplicationStateProtobuf processID]
  -[_NMRNowPlayingApplicationStateProtobuf readFrom:]
  -[_NMRNowPlayingApplicationStateProtobuf setHasPlaybackState:]
  -[_NMRNowPlayingApplicationStateProtobuf hasPlaybackState]
  -[_NMRNowPlayingApplicationStateProtobuf copyWithZone:]
  -[_NMRNowPlayingApplicationStateProtobuf setCompanionBundleIdentifier:]
  -[_NMRNowPlayingApplicationStateProtobuf watchBundleIdentifier]
  -[_NMRNowPlayingApplicationStateProtobuf setWatchBundleIdentifier:]
  -[_NMRNowPlayingApplicationStateProtobuf iconDigest]
  -[_NMRNowPlayingApplicationStateProtobuf setIconDigest:]
  -[_NMRNowPlayingApplicationStateProtobuf hasProcessID]
  -[_NMRNowPlayingApplicationStateProtobuf hasCompanionBundleIdentifier]
  -[_NMRNowPlayingApplicationStateProtobuf hasLocalizedDisplayName]
  -[_NMRNowPlayingApplicationStateProtobuf hasWatchBundleIdentifier]
  -[_NMRNowPlayingApplicationStateProtobuf hasIconDigest]
  -[_NMRNowPlayingApplicationStateProtobuf setHasProcessID:]


NMRIDSMessageCenter : NSObject <IDSServiceDelegate>
 @property  <NMRIDSMessageCenterDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NMRIDSMessageCenter service:account:identifier:didSendWithSuccess:error:]
  -[NMRIDSMessageCenter service:account:incomingUnhandledProtobuf:fromID:context:]
  -[NMRIDSMessageCenter .cxx_destruct]
  -[NMRIDSMessageCenter setDelegate:]
  -[NMRIDSMessageCenter delegate]
  -[NMRIDSMessageCenter _sendMessageWithProtobufData:messageType:priority:timeout:bypassDuet:skipStorage:isResponse:additionalOptions:resultingMessageIdentifier:error:]
  -[NMRIDSMessageCenter setMessageHandlerTarget:action:forIncomingMessagesOfType:]
  -[NMRIDSMessageCenter startHandlingMessages]
  -[NMRIDSMessageCenter sendMessageWithProtobufData:messageType:priority:timeout:bypassDuet:skipStorage:expectReply:queueOneIdentifier:resultingMessageIdentifier:error:]
  -[NMRIDSMessageCenter sendMessageWithProtobufData:messageType:priority:timeout:bypassDuet:skipStorage:inReplyTo:resultingMessageIdentifier:error:]


_NMRIDSMessageHandler : NSObject
 @property  unsigned short messageType
 @property  id target
 @property  SEL action

  // instance methods
  -[_NMRIDSMessageHandler setMessageType:]
  -[_NMRIDSMessageHandler messageType]
  -[_NMRIDSMessageHandler .cxx_destruct]
  -[_NMRIDSMessageHandler setAction:]
  -[_NMRIDSMessageHandler action]
  -[_NMRIDSMessageHandler setTarget:]
  -[_NMRIDSMessageHandler target]


_NMRSendCommandResultMessageProtobuf : PBCodable <NSCopying>
 @property  BOOL hasErrorCode
 @property  unsigned int errorCode
 @property  unsigned long handlerReturnStatusCount
 @property  ^I handlerReturnStatus
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[_NMRSendCommandResultMessageProtobuf errorCode]
  -[_NMRSendCommandResultMessageProtobuf mergeFrom:]
  -[_NMRSendCommandResultMessageProtobuf hasErrorCode]
  -[_NMRSendCommandResultMessageProtobuf addHandlerReturnStatus:]
  -[_NMRSendCommandResultMessageProtobuf handlerReturnStatusCount]
  -[_NMRSendCommandResultMessageProtobuf clearHandlerReturnStatus]
  -[_NMRSendCommandResultMessageProtobuf handlerReturnStatusAtIndex:]
  -[_NMRSendCommandResultMessageProtobuf handlerReturnStatus]
  -[_NMRSendCommandResultMessageProtobuf setHandlerReturnStatus:count:]
  -[_NMRSendCommandResultMessageProtobuf setOriginIdentifier:]
  -[_NMRSendCommandResultMessageProtobuf dictionaryRepresentation]
  -[_NMRSendCommandResultMessageProtobuf writeTo:]
  -[_NMRSendCommandResultMessageProtobuf isEqual:]
  -[_NMRSendCommandResultMessageProtobuf setErrorCode:]
  -[_NMRSendCommandResultMessageProtobuf copyTo:]
  -[_NMRSendCommandResultMessageProtobuf readFrom:]
  -[_NMRSendCommandResultMessageProtobuf setHasErrorCode:]
  -[_NMRSendCommandResultMessageProtobuf hasTimestamp]
  -[_NMRSendCommandResultMessageProtobuf timestamp]
  -[_NMRSendCommandResultMessageProtobuf dealloc]
  -[_NMRSendCommandResultMessageProtobuf copyWithZone:]
  -[_NMRSendCommandResultMessageProtobuf setHasTimestamp:]
  -[_NMRSendCommandResultMessageProtobuf setTimestamp:]
  -[_NMRSendCommandResultMessageProtobuf originIdentifier]
  -[_NMRSendCommandResultMessageProtobuf hasOriginIdentifier]
  -[_NMRSendCommandResultMessageProtobuf setHasOriginIdentifier:]


_NMROriginProtobuf : PBCodable <NSCopying>
 @property  BOOL hasUniqueIdentifier
 @property  int uniqueIdentifier
 @property  BOOL hasDisplayName
 @property  NSString *displayName
 @property  BOOL hasDeviceInfoData
 @property  NSData *deviceInfoData

  // instance methods
  -[_NMROriginProtobuf hasUniqueIdentifier]
  -[_NMROriginProtobuf setUniqueIdentifier:]
  -[_NMROriginProtobuf displayName]
  -[_NMROriginProtobuf mergeFrom:]
  -[_NMROriginProtobuf uniqueIdentifier]
  -[_NMROriginProtobuf .cxx_destruct]
  -[_NMROriginProtobuf dictionaryRepresentation]
  -[_NMROriginProtobuf writeTo:]
  -[_NMROriginProtobuf hasDisplayName]
  -[_NMROriginProtobuf isEqual:]
  -[_NMROriginProtobuf copyTo:]
  -[_NMROriginProtobuf readFrom:]
  -[_NMROriginProtobuf setDisplayName:]
  -[_NMROriginProtobuf setHasUniqueIdentifier:]
  -[_NMROriginProtobuf copyWithZone:]
  -[_NMROriginProtobuf deviceInfoData]
  -[_NMROriginProtobuf setDeviceInfoData:]
  -[_NMROriginProtobuf hasDeviceInfoData]


NMRPlaceholderNowPlayingState : NMRNowPlayingState
 @property  NSNumber *itemPersistentID
 @property  NSString *title
 @property  NSString *artist
 @property  NSString *album
 @property  MPArtworkCatalog *artworkCatalog
 @property  NSString *collectionTitle
 @property  float playbackRate
 @property  float preferredPlaybackRate
 @property  unsigned int playbackState
 @property  BOOL explicitTrack
 @property  NSString *radioStationName
 @property  BOOL alwaysLive
 @property  BOOL playbackRateCommandSupported
 @property  BOOL nextTrackCommandEnabled
 @property  BOOL previousTrackCommandEnabled
 @property  BOOL skipForwardCommandEnabled
 @property  BOOL skipBackwardCommandEnabled
 @property  double fastForwardTimeInterval
 @property  double rewindTimeInterval

  // instance methods
  -[NMRPlaceholderNowPlayingState setPlaybackRate:]
  -[NMRPlaceholderNowPlayingState playbackRate]
  -[NMRPlaceholderNowPlayingState setRadioStationName:]
  -[NMRPlaceholderNowPlayingState playbackState]
  -[NMRPlaceholderNowPlayingState album]
  -[NMRPlaceholderNowPlayingState collectionTitle]
  -[NMRPlaceholderNowPlayingState radioStationName]
  -[NMRPlaceholderNowPlayingState isAlwaysLive]
  -[NMRPlaceholderNowPlayingState setPlaybackState:]
  -[NMRPlaceholderNowPlayingState artist]
  -[NMRPlaceholderNowPlayingState setExplicitTrack:]
  -[NMRPlaceholderNowPlayingState setTitle:]
  -[NMRPlaceholderNowPlayingState .cxx_destruct]
  -[NMRPlaceholderNowPlayingState setArtist:]
  -[NMRPlaceholderNowPlayingState setAlbum:]
  -[NMRPlaceholderNowPlayingState isExplicitTrack]
  -[NMRPlaceholderNowPlayingState title]
  -[NMRPlaceholderNowPlayingState setAlwaysLive:]
  -[NMRPlaceholderNowPlayingState setItemPersistentID:]
  -[NMRPlaceholderNowPlayingState artworkCatalog]
  -[NMRPlaceholderNowPlayingState itemPersistentID]
  -[NMRPlaceholderNowPlayingState setCollectionTitle:]
  -[NMRPlaceholderNowPlayingState setArtworkCatalog:]
  -[NMRPlaceholderNowPlayingState setPreferredPlaybackRate:]
  -[NMRPlaceholderNowPlayingState preferredPlaybackRate]
  -[NMRPlaceholderNowPlayingState isPlaybackRateCommandSupported]
  -[NMRPlaceholderNowPlayingState isNextTrackCommandEnabled]
  -[NMRPlaceholderNowPlayingState isPreviousTrackCommandEnabled]
  -[NMRPlaceholderNowPlayingState isSkipForwardCommandEnabled]
  -[NMRPlaceholderNowPlayingState isSkipBackwardCommandEnabled]
  -[NMRPlaceholderNowPlayingState fastForwardTimeInterval]
  -[NMRPlaceholderNowPlayingState rewindTimeInterval]
  -[NMRPlaceholderNowPlayingState setPlaybackRateCommandSupported:]
  -[NMRPlaceholderNowPlayingState setNextTrackCommandEnabled:]
  -[NMRPlaceholderNowPlayingState setPreviousTrackCommandEnabled:]
  -[NMRPlaceholderNowPlayingState setSkipForwardCommandEnabled:]
  -[NMRPlaceholderNowPlayingState setSkipBackwardCommandEnabled:]
  -[NMRPlaceholderNowPlayingState setFastForwardTimeInterval:]
  -[NMRPlaceholderNowPlayingState setRewindTimeInterval:]


_NMRPlaybackQueueRequestProtobuf : PBCodable <NSCopying>
 @property  BOOL hasRequest
 @property  NSData *request
 @property  BOOL hasPlayerPath
 @property  NSData *playerPath

  // instance methods
  -[_NMRPlaybackQueueRequestProtobuf playerPath]
  -[_NMRPlaybackQueueRequestProtobuf setRequest:]
  -[_NMRPlaybackQueueRequestProtobuf mergeFrom:]
  -[_NMRPlaybackQueueRequestProtobuf setPlayerPath:]
  -[_NMRPlaybackQueueRequestProtobuf .cxx_destruct]
  -[_NMRPlaybackQueueRequestProtobuf dictionaryRepresentation]
  -[_NMRPlaybackQueueRequestProtobuf hasPlayerPath]
  -[_NMRPlaybackQueueRequestProtobuf writeTo:]
  -[_NMRPlaybackQueueRequestProtobuf isEqual:]
  -[_NMRPlaybackQueueRequestProtobuf copyTo:]
  -[_NMRPlaybackQueueRequestProtobuf request]
  -[_NMRPlaybackQueueRequestProtobuf readFrom:]
  -[_NMRPlaybackQueueRequestProtobuf hasRequest]
  -[_NMRPlaybackQueueRequestProtobuf copyWithZone:]


NSBundle(NanoMediaRemote)
	// class methods
	+[NSBundle(NanoMediaRemote) nanoMediaRemoteBundle]

	// instance methods
	-[NSBundle(NanoMediaRemote) matchingPlaybackAppBundleIdentifierForOrigin:]

MPCPlayerPath(NanoMediaRemote)
	// class methods
	+[MPCPlayerPath(NanoMediaRemote) nmr_pathWithNowPlayingURL:]

	// instance methods
	-[MPCPlayerPath(NanoMediaRemote) nmr_isSystemWorkoutPath]
	-[MPCPlayerPath(NanoMediaRemote) nmr_isSystemPodcastsPath]
	-[MPCPlayerPath(NanoMediaRemote) nmr_isSystemRadioPath]
	-[MPCPlayerPath(NanoMediaRemote) nmr_isSystemBooksPath]
	-[MPCPlayerPath(NanoMediaRemote) nmr_isSystemWorkoutGuidedWalkPath]
	-[MPCPlayerPath(NanoMediaRemote) nmr_isIdenticalToPath:]

PBCodable(NMRAdditions)
	// instance methods
	-[PBCodable(NMRAdditions) nmr_valueForPotentiallyUndefinedKey:]

MPCPlayerResponse(NanoMediaRemote)
	// instance methods
	-[MPCPlayerResponse(NanoMediaRemote) nmr_preferredNowPlayingAppLaunchInfo]

01 00 0500 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSProtobuf 
01 00 0500 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVCompanionEndpointRoutingDataSource 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVEndpointRoutingDataSource 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 0400 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerChangeRequest 
01 00 0400 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerPath 
01 00 0400 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerRequest 
01 00 0400 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerResponse 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaPropertyPredicate 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaQuery 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelSong 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPropertySet 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRequestResponseController 
01 00 0100 /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry: NRPairedDeviceRegistry 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0a00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0700 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
