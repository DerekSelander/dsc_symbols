|| __DATA.__common _s_streamNames
|| __DATA.__data _JFXAssetExportPresetHEVC1280x720
|| __DATA.__data _JFXAssetExportPresetHEVC1280x720HDR
|| __DATA.__data _JFXAssetExportPresetHEVC1920x1080
|| __DATA.__data _JFXAssetExportPresetHEVC1920x1080HDR
|| __DATA.__data _JFXAssetExportPresetLowQuality
|| __DATA.__data _JFXEffectFactoryEffectsUpdatedNotification
|| __DATA.__data _JFXSignpostExclusiveID
|| __DATA.__data _JTClipErrorDomain
|| __DATA.__data _kAssetAdjustedFingerprintKey
|| __DATA.__data _kAssetIdentiferKey
|| __DATA.__data _kAssetMasterFingerprintKey
|| __DATA.__data _kDelegateObserverPath
|| __DATA.__data _kJFXCGImageAuxiliaryDataInfoMetadataAsXMPKey
|| __DATA.__data _kJFXEffectPropertiesAREffectsKey
|| __DATA.__data _kJFXEffectPropertiesAnalyticsKey
|| __DATA.__data _kJFXEffectPropertiesEffectsKey
|| __DATA.__data _kJFXEffectPropertiesFiltersKey
|| __DATA.__data _kJFXEffectPropertiesIdentifierKey
|| __DATA.__data _kJFXEffectPropertiesOverlaysKey
|| __DATA.__data _kJFXEffectPropertiesPlistKey
|| __DATA.__data _kJFXEffectPropertiesResourceFile
|| __DATA.__data _kJFXEffectPropertiesTextEditColorKey
|| __DATA.__data _kJFXEffectPropertiesTextEditDisableTextEditing
|| __DATA.__data _kJFXEffectPropertiesTextEditTintColorKey
|| __DATA.__data _kJFXEffectPropertiesTitleCardsKey
|| __DATA.__data _kMediaItemDurationKey
|| __DATA.__data _kMediaItemInterfaceOrientationForDisplayKey
|| __DATA.__data _kMediaItemLocalFileNameKey
|| __DATA.__data _kMediaItemTypeKey
|| __DATA.__data _kMediaStartOffset
|| __DATA.__data _kOriginalIsHEVC4kAsset
|| __DATA.__data _kRecordedWithInAppCamera
|| __DATA.__objc_data _OBJC_CLASS_$_CFXActionLogging
|| __DATA.__objc_data _OBJC_CLASS_$_CFXAnalyticsKeys
|| __DATA.__objc_data _OBJC_CLASS_$_CFXAnalyticsManager
|| __DATA.__objc_data _OBJC_CLASS_$_CFXAnimationDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_CFXAnimationHelper
|| __DATA.__objc_data _OBJC_CLASS_$_CFXApplicationState
|| __DATA.__objc_data _OBJC_CLASS_$_CFXAvailability
|| __DATA.__objc_data _OBJC_CLASS_$_CFXBundleUtils
|| __DATA.__objc_data _OBJC_CLASS_$_CFXCameraControlsViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXCameraStreamAdapter
|| __DATA.__objc_data _OBJC_CLASS_$_CFXCameraViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXClip
|| __DATA.__objc_data _OBJC_CLASS_$_CFXClipCompositionDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_CFXClipPlayerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXCounterRotationLayer
|| __DATA.__objc_data _OBJC_CLASS_$_CFXCounterRotationView
|| __DATA.__objc_data _OBJC_CLASS_$_CFXDefaultThermalPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffect
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectBrowserContentPresenterViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectBrowserView
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectComposition
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectFactoryDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectHostAppDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectMessagesStickerProperties
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectMessagesStickerUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectPickerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXEffectType
|| __DATA.__objc_data _OBJC_CLASS_$_CFXExportClipDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_CFXFaceReticleView
|| __DATA.__objc_data _OBJC_CLASS_$_CFXFeedbackController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXFilterEffectContentDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_CFXFilterPickerCollectionView
|| __DATA.__objc_data _OBJC_CLASS_$_CFXFrame
|| __DATA.__objc_data _OBJC_CLASS_$_CFXFullScreenTextEditViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXLiveCaptureViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_CFXMediaItemAdjustmentsData
|| __DATA.__objc_data _OBJC_CLASS_$_CFXMediaSettings
|| __DATA.__objc_data _OBJC_CLASS_$_CFXNextRenderedFrameCallback
|| __DATA.__objc_data _OBJC_CLASS_$_CFXNonTransformedLiveCaptureContainerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXOverlayEffectPickerView
|| __DATA.__objc_data _OBJC_CLASS_$_CFXOverlayPickerAnimatedPreviewWriter
|| __DATA.__objc_data _OBJC_CLASS_$_CFXPickerSession
|| __DATA.__objc_data _OBJC_CLASS_$_CFXRecordingThermalPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_CFXRenderer
|| __DATA.__objc_data _OBJC_CLASS_$_CFXReviewControlsViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXReviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$_CFXTextEffectEditorView
|| __DATA.__objc_data _OBJC_CLASS_$_CFXThermalPolicyManager
|| __DATA.__objc_data _OBJC_CLASS_$_CFXVideoSettings
|| __DATA.__objc_data _OBJC_CLASS_$_CFXViewfinderFlipTransition
|| __DATA.__objc_data _OBJC_CLASS_$_EditListCompositionState
|| __DATA.__objc_data _OBJC_CLASS_$_JFXARKitCameraSessionController
|| __DATA.__objc_data _OBJC_CLASS_$_JFXARMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_JFXARMetadataMediaReader
|| __DATA.__objc_data _OBJC_CLASS_$_JFXARMetadataMediaReaderItem
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAVMediaDataReader
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAVMediaMetaDataReader
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAVMediaVideoTrackReader
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAVMediaVideoTrackReaderSample
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAVPlayerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAnalyticsKeys
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAnalyticsManager
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAnimojiEffect
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAnimojiEffectRenderer
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAnimojiPlaybackDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_JFXAnimojiPlaybackPreprocessedData
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCVASegMatting
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCVASegMattingRequest
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCVASegMatting_NoOp
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCVASegMatting_SPI
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCachedAnimojiImage
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCameraFPSThermalPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCaptureCallObserver
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCapturePreviewFrameStats
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCapturePreviewProperties
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCapturePreviewRequestBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCapturePreviewStats
|| __DATA.__objc_data _OBJC_CLASS_$_JFXComposition
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionExporter
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionItem
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionPlayableElementUpdateRequest
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionPlayer
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionPlayerRequest
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionPlayerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionPlayerViewControllerAnimationProperties
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionSeekRequest
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionTrackGroup
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCompositionUpdateRequest
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCustomImageSensor
|| __DATA.__objc_data _OBJC_CLASS_$_JFXCustomRenderProperties
|| __DATA.__objc_data _OBJC_CLASS_$_JFXDepthAsMatte
|| __DATA.__objc_data _OBJC_CLASS_$_JFXDepthCompressor
|| __DATA.__objc_data _OBJC_CLASS_$_JFXDepthDataMediaReader
|| __DATA.__objc_data _OBJC_CLASS_$_JFXDepthDecompressor
|| __DATA.__objc_data _OBJC_CLASS_$_JFXDisparityAsMatte
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffect
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectAnimationDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectAsset
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectAssetAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectAssetFilteringOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectAssetRequestOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectCategory
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectContinousLiveCapturePreviewOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectContinousPreviewImageOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectContinousPreviewOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectEditingUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectFactory
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectPreviewDiskCache
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectPreviewManager
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectPreviewOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectStaticPreviewOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectTextEditingProperties
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectsPreviewGenerationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectsPreviewGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectsPreviewGeneratorJob
|| __DATA.__objc_data _OBJC_CLASS_$_JFXEffectsPreviewRequestHandler
|| __DATA.__objc_data _OBJC_CLASS_$_JFXExportController
|| __DATA.__objc_data _OBJC_CLASS_$_JFXExternalImageData
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFaceAnchor
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFaceTrackedEffectTransform
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFaceTrackingPlaybackDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFaceTrackingPlaybackProperties
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFaceTrackingPlaybackUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFaceTrackingTransformCalculator
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFaceTrackingUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_JFXFilterEffect
|| __DATA.__objc_data _OBJC_CLASS_$_JFXGuidedFilter
|| __DATA.__objc_data _OBJC_CLASS_$_JFXGuidedUpscaler
|| __DATA.__objc_data _OBJC_CLASS_$_JFXImageAVSampleBufferView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXImageIOSurfaceView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXImageMTKView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXImageScaler
|| __DATA.__objc_data _OBJC_CLASS_$_JFXImageView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXInstructionGraphBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_JFXLRUCache
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMatting
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMattingPerfState
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMediaDataReaderFactory
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMediaReaderCreationAVAssetTrackAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMediaReaderDepthData
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMediaSettings
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMediaURLManager
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMetadataValidator
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMetalHelpers
|| __DATA.__objc_data _OBJC_CLASS_$_JFXMovieCompositionItem
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOrientationMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffect
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffectAnimationConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffectAnimationView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffectDebugView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffectDebugViewOptions
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffectDebugViewRect
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffectFrame
|| __DATA.__objc_data _OBJC_CLASS_$_JFXOverlayEffectTransforms
|| __DATA.__objc_data _OBJC_CLASS_$_JFXPassThroughContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXPerfTimer
|| __DATA.__objc_data _OBJC_CLASS_$_JFXPickerCameraSource
|| __DATA.__objc_data _OBJC_CLASS_$_JFXPixelBufferPool
|| __DATA.__objc_data _OBJC_CLASS_$_JFXPixelRotationSession
|| __DATA.__objc_data _OBJC_CLASS_$_JFXRGBDMatte
|| __DATA.__objc_data _OBJC_CLASS_$_JFXReaderWriterExportController
|| __DATA.__objc_data _OBJC_CLASS_$_JFXRemoteCommandServer
|| __DATA.__objc_data _OBJC_CLASS_$_JFXRotationTransforms
|| __DATA.__objc_data _OBJC_CLASS_$_JFXSharedMediaDataReaderManager
|| __DATA.__objc_data _OBJC_CLASS_$_JFXStillCompositionItem
|| __DATA.__objc_data _OBJC_CLASS_$_JFXStillMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_JFXTextEffect
|| __DATA.__objc_data _OBJC_CLASS_$_JFXTextEffectEditorTextView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXTextEffectEditorTransformView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXTextEffectEditorView
|| __DATA.__objc_data _OBJC_CLASS_$_JFXTextEffectFrame
|| __DATA.__objc_data _OBJC_CLASS_$_JFXTextEffectTransforms
|| __DATA.__objc_data _OBJC_CLASS_$_JFXThermalMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_JFXThermalPolicyManager
|| __DATA.__objc_data _OBJC_CLASS_$_JFXThreadSafeArray
|| __DATA.__objc_data _OBJC_CLASS_$_JFXThreadSafeDictionary
|| __DATA.__objc_data _OBJC_CLASS_$_JFXTrackedEffectProperties
|| __DATA.__objc_data _OBJC_CLASS_$_JFXVideoCameraController
|| __DATA.__objc_data _OBJC_CLASS_$_JFXVideoDecoderInterface
|| __DATA.__objc_data _OBJC_CLASS_$_JFXVideoEncoderInterface
|| __DATA.__objc_data _OBJC_CLASS_$_JFXVideoMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_JFXVideoWriter
|| __DATA.__objc_data _OBJC_CLASS_$_JTAnimation
|| __DATA.__objc_data _OBJC_CLASS_$_JTAssetMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_JTAudioMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_JTAutoPurgeDictionary
|| __DATA.__objc_data _OBJC_CLASS_$_JTCaptureMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_JTCollectionView
|| __DATA.__objc_data _OBJC_CLASS_$_JTCollectionViewFlowLayout
|| __DATA.__objc_data _OBJC_CLASS_$_JTFixedSizeUIImageView
|| __DATA.__objc_data _OBJC_CLASS_$_JTFormatters
|| __DATA.__objc_data _OBJC_CLASS_$_JTFrameRateCalculator
|| __DATA.__objc_data _OBJC_CLASS_$_JTImage
|| __DATA.__objc_data _OBJC_CLASS_$_JTLayer
|| __DATA.__objc_data _OBJC_CLASS_$_JTLocalAssetMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_JTMotionData
|| __DATA.__objc_data _OBJC_CLASS_$_JTSuspendedInteractionRequest
|| __DATA.__objc_data _OBJC_CLASS_$_JTVideoMediaUtils
|| __DATA.__objc_data _OBJC_CLASS_$_JTView
|| __DATA.__objc_data _OBJC_CLASS_$_JTViewController
|| __DATA.__objc_data _OBJC_CLASS_$_PlaceholderForCFX
|| __DATA.__objc_data _OBJC_CLASS_$_UIViewWindowNotifier
|| __DATA.__objc_data _OBJC_CLASS_$_WriterReorderQ
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXActionLogging
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXAnalyticsKeys
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXAnalyticsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXAnimationDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXAnimationHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXApplicationState
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXAvailability
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXBundleUtils
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXCameraControlsViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXCameraStreamAdapter
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXCameraViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXClip
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXClipCompositionDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXClipPlayerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXCounterRotationLayer
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXCounterRotationView
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXDefaultThermalPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffect
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectBrowserContentPresenterViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectBrowserView
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectComposition
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectFactoryDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectHostAppDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectMessagesStickerProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectMessagesStickerUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectPickerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXEffectType
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXExportClipDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXFaceReticleView
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXFeedbackController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXFilterEffectContentDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXFilterPickerCollectionView
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXFrame
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXFullScreenTextEditViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXLiveCaptureViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXMediaItemAdjustmentsData
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXMediaSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXNextRenderedFrameCallback
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXNonTransformedLiveCaptureContainerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXOverlayEffectPickerView
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXOverlayPickerAnimatedPreviewWriter
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXPickerSession
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXRecordingThermalPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXRenderer
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXReviewControlsViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXReviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXTextEffectEditorView
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXThermalPolicyManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXVideoSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_CFXViewfinderFlipTransition
|| __DATA.__objc_data _OBJC_METACLASS_$_EditListCompositionState
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXARKitCameraSessionController
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXARMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXARMetadataMediaReader
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXARMetadataMediaReaderItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAVMediaDataReader
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAVMediaMetaDataReader
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAVMediaVideoTrackReader
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAVMediaVideoTrackReaderSample
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAVPlayerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAnalyticsKeys
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAnalyticsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAnimojiEffect
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAnimojiEffectRenderer
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAnimojiPlaybackDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXAnimojiPlaybackPreprocessedData
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCVASegMatting
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCVASegMattingRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCVASegMatting_NoOp
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCVASegMatting_SPI
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCachedAnimojiImage
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCameraFPSThermalPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCaptureCallObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCapturePreviewFrameStats
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCapturePreviewProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCapturePreviewRequestBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCapturePreviewStats
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXComposition
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionExporter
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionPlayableElementUpdateRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionPlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionPlayerRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionPlayerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionPlayerViewControllerAnimationProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionSeekRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionTrackGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCompositionUpdateRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCustomImageSensor
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXCustomRenderProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXDepthAsMatte
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXDepthCompressor
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXDepthDataMediaReader
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXDepthDecompressor
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXDisparityAsMatte
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffect
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectAnimationDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectAssetAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectAssetFilteringOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectAssetRequestOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectCategory
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectContinousLiveCapturePreviewOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectContinousPreviewImageOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectContinousPreviewOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectEditingUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectPreviewDiskCache
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectPreviewManager
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectPreviewOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectStaticPreviewOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectTextEditingProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectsPreviewGenerationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectsPreviewGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectsPreviewGeneratorJob
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXEffectsPreviewRequestHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXExportController
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXExternalImageData
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFaceAnchor
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFaceTrackedEffectTransform
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFaceTrackingPlaybackDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFaceTrackingPlaybackProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFaceTrackingPlaybackUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFaceTrackingTransformCalculator
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFaceTrackingUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXFilterEffect
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXGuidedFilter
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXGuidedUpscaler
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXImageAVSampleBufferView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXImageIOSurfaceView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXImageMTKView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXImageScaler
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXImageView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXInstructionGraphBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXLRUCache
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMatting
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMattingPerfState
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMediaDataReaderFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMediaReaderCreationAVAssetTrackAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMediaReaderDepthData
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMediaSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMediaURLManager
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMetadataValidator
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMetalHelpers
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXMovieCompositionItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOrientationMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffect
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffectAnimationConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffectAnimationView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffectDebugView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffectDebugViewOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffectDebugViewRect
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffectFrame
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXOverlayEffectTransforms
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXPassThroughContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXPerfTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXPickerCameraSource
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXPixelBufferPool
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXPixelRotationSession
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXRGBDMatte
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXReaderWriterExportController
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXRemoteCommandServer
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXRotationTransforms
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXSharedMediaDataReaderManager
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXStillCompositionItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXStillMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXTextEffect
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXTextEffectEditorTextView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXTextEffectEditorTransformView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXTextEffectEditorView
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXTextEffectFrame
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXTextEffectTransforms
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXThermalMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXThermalPolicyManager
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXThreadSafeArray
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXThreadSafeDictionary
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXTrackedEffectProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXVideoCameraController
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXVideoDecoderInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXVideoEncoderInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXVideoMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JFXVideoWriter
|| __DATA.__objc_data _OBJC_METACLASS_$_JTAnimation
|| __DATA.__objc_data _OBJC_METACLASS_$_JTAssetMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JTAudioMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JTAutoPurgeDictionary
|| __DATA.__objc_data _OBJC_METACLASS_$_JTCaptureMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JTCollectionView
|| __DATA.__objc_data _OBJC_METACLASS_$_JTCollectionViewFlowLayout
|| __DATA.__objc_data _OBJC_METACLASS_$_JTFixedSizeUIImageView
|| __DATA.__objc_data _OBJC_METACLASS_$_JTFormatters
|| __DATA.__objc_data _OBJC_METACLASS_$_JTFrameRateCalculator
|| __DATA.__objc_data _OBJC_METACLASS_$_JTImage
|| __DATA.__objc_data _OBJC_METACLASS_$_JTLayer
|| __DATA.__objc_data _OBJC_METACLASS_$_JTLocalAssetMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_JTMotionData
|| __DATA.__objc_data _OBJC_METACLASS_$_JTSuspendedInteractionRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_JTVideoMediaUtils
|| __DATA.__objc_data _OBJC_METACLASS_$_JTView
|| __DATA.__objc_data _OBJC_METACLASS_$_JTViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_PlaceholderForCFX
|| __DATA.__objc_data _OBJC_METACLASS_$_UIViewWindowNotifier
|| __DATA.__objc_data _OBJC_METACLASS_$_WriterReorderQ
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting._impl
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._alphaMattePool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._calmFilter
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._cameraType
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._currentMattingStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._flipColorPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._foregroundColorEstimateBuffer
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._guidedFilter
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._imageScaler
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._interfaceOrientation
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._largestFaceRect
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._matteGenQ
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._mode
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._previousMattingStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._rotColorPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._rotMattePool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._segmentationBuffer
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._segmenter
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._smallAlphaMattePool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._smallForegroundColorPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._tinyAlphaMattePool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCVASegMatting_SPI._visualizeFaceRect
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCapturePreviewFrameStats._frameTimes
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCapturePreviewStats._q
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCapturePreviewStats._runningAverage
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCapturePreviewStats._stats
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCompositionUpdateRequest._readyForDisplayReceived
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXCompositionUpdateRequest._refreshCompletedReceived
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXDepthAsMatte._alphaPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXDepthAsMatte._rotatedFBufferPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXDepthAsMatte._scaledUpFBufferPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXDisparityAsMatte._alphaMattePool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXDisparityAsMatte._fixedPointBufferPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXDisparityAsMatte._rotatedFPBufferPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXDisparityAsMatte._scaledUpFPBufferPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXEffect._effectID
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXEffect._renderEffect
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXEffect._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXEffectsPreviewGenerator._renderer
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._coeffPool
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._commandQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._device
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._guideImageHeight
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._guideImageWidth
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._osGuidedFilter
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._textureCache
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXGuidedFilter._useCPU
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXImageScaler._useCPU
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXImageScaler._vtPixelTransferSession
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXMatting._cameraLocation
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXMatting._colorBufferSize
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXMetalHelpers.m_device
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXPerfTimer._end
|| __DATA.__objc_ivar _OBJC_IVAR_$_JFXPerfTimer._start
|| __DATA_CONST.__const _CFXActionAddEffectKey
|| __DATA_CONST.__const _CFXActionCancelCameraKey
|| __DATA_CONST.__const _CFXActionExportStillKey
|| __DATA_CONST.__const _CFXActionExportVideoKey
|| __DATA_CONST.__const _CFXActionFlipCameraKey
|| __DATA_CONST.__const _CFXActionLocationLive
|| __DATA_CONST.__const _CFXActionLocationPostCapture
|| __DATA_CONST.__const _CFXActionLogItemEffectIDKey
|| __DATA_CONST.__const _CFXActionLogItemEffectNameKey
|| __DATA_CONST.__const _CFXActionLogItemEffectTrackingTypeKey
|| __DATA_CONST.__const _CFXActionLogItemEffectTypeKey
|| __DATA_CONST.__const _CFXActionLogItemEffectsKey
|| __DATA_CONST.__const _CFXActionLogItemRemainingMemoryKey
|| __DATA_CONST.__const _CFXActionLogItemUserEventKey
|| __DATA_CONST.__const _CFXActionLogItemViewLocationKey
|| __DATA_CONST.__const _CFXActionRemoveEffectKey
|| __DATA_CONST.__const _CFXActionRemoveEffectsKey
|| __DATA_CONST.__const _CFXActionRotateDeviceKey
|| __DATA_CONST.__const _CFXActionStartEffectsInStreamKey
|| __DATA_CONST.__const _CFXActionStartVideoKey
|| __DATA_CONST.__const _CFXActionStopEffectsInStreamKey
|| __DATA_CONST.__const _CFXActionStopVideoKey
|| __DATA_CONST.__const _CFXActionTakePhotoKey
|| __DATA_CONST.__const _CFXEffectTypeIdentifierAnimoji
|| __DATA_CONST.__const _CFXEffectTypeIdentifierEmojiStickers
|| __DATA_CONST.__const _CFXEffectTypeIdentifierFilter
|| __DATA_CONST.__const _CFXEffectTypeIdentifierShapes
|| __DATA_CONST.__const _CFXEffectTypeIdentifierText
|| __DATA_CONST.__const _CFXFiltersBundleIdentifier
|| __DATA_CONST.__const _CFX_AspectRatioCrop
|| __DATA_CONST.__const _CFX_CaptureEffectInsertionSize
|| __DATA_CONST.__const _CFX_DEBUG_CFXFaceTrackingRenderer_DebugFaceRect
|| __DATA_CONST.__const _CFX_DEBUG_DrawEffectEditorBounds
|| __DATA_CONST.__const _CFX_DEBUG_ShowPlayerScrubbingControls
|| __DATA_CONST.__const _CFX_DEMO_UseMirroredFrontCameraInStreamMode
|| __DATA_CONST.__const _CFX_DEMO_effectPlacementKey
|| __DATA_CONST.__const _CFX_DisableFaceTimeAnimationLooping
|| __DATA_CONST.__const _CFX_EnableMultipleInstancesOfAnimojiRenderer
|| __DATA_CONST.__const _CFX_ExifCameraOwnerName
|| __DATA_CONST.__const _CFX_MaxCameraToFaceTrackingDistance
|| __DATA_CONST.__const _JFXAddAREffectWithIdentifierNotification
|| __DATA_CONST.__const _JFXAddEffectWithIdentifierNotification
|| __DATA_CONST.__const _JFXAddEffectWithNameNotification
|| __DATA_CONST.__const _JFXAddPosterWithIdentifierNotification
|| __DATA_CONST.__const _JFXAddPosterWithNameNotification
|| __DATA_CONST.__const _JFXAddShapeWithIdentifierNotification
|| __DATA_CONST.__const _JFXAddStickerNotification
|| __DATA_CONST.__const _JFXAddStickerWithIdentifierNotification
|| __DATA_CONST.__const _JFXAddTextNotification
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_AVCaptureDeviceFormat
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_AVCaptureVideoOrientation
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_DataRepresentation
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_DepthData
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_Effect
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_JFXARMetadata
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_RenderSize
|| __DATA_CONST.__const _JFXAnimojiRendererMetadata_UIInterfaceOrientation
|| __DATA_CONST.__const _JFXAspectRatioNotification
|| __DATA_CONST.__const _JFXCustomRenderingPropertiesKey_Animoji
|| __DATA_CONST.__const _JFXCustomRenderingPropertiesKey_FaceTracking
|| __DATA_CONST.__const _JFXEXIFBrightnessIdentifier
|| __DATA_CONST.__const _JFXEffectFoundDefaultImageToUseWhilePreparingPreview
|| __DATA_CONST.__const _JFXEffectFoundPreviewCacheMissKey
|| __DATA_CONST.__const _JFXEffectFoundPreviewDisplayTransformKey
|| __DATA_CONST.__const _JFXExportNotification
|| __DATA_CONST.__const _JFXFaceTrackingKey_InterfaceOrientation
|| __DATA_CONST.__const _JFXFaceTrackingKey_TrackingType
|| __DATA_CONST.__const _JFXFaceTrackingRendererMetadata_ARFrame
|| __DATA_CONST.__const _JFXFaceTrackingRendererMetadata_AVCaptureVideoOrientation
|| __DATA_CONST.__const _JFXFaceTrackingRendererMetadata_DeviceInterfaceOrientation
|| __DATA_CONST.__const _JFXFaceTrackingRendererMetadata_JFXFaceAnchor
|| __DATA_CONST.__const _JFXFaceTrackingRendererMetadata_OriginalBufferSize
|| __DATA_CONST.__const _JFXFaceTrackingRendererMetadata_UIInterfaceOrientation
|| __DATA_CONST.__const _JFXFrameMetricsEventRendered
|| __DATA_CONST.__const _JFXGetEffectsNotification
|| __DATA_CONST.__const _JFXNewProjectNotification
|| __DATA_CONST.__const _JFXOpenProjectNotification
|| __DATA_CONST.__const _JFXOpenProjectPickerNotification
|| __DATA_CONST.__const _JFXPlayClipAtIndexNotification
|| __DATA_CONST.__const _JFXPlayNotification
|| __DATA_CONST.__const _JFXRecordNotification
|| __DATA_CONST.__const _JFXRemoveEffectsNotification
|| __DATA_CONST.__const _JFXSendEffectsNotification
|| __DATA_CONST.__const _JFXSendExportNotification
|| __DATA_CONST.__const _JFXSetAnimojiNotification
|| __DATA_CONST.__const _JFXSetFilterWithIdentifierNotification
|| __DATA_CONST.__const _JFXSetMemojiWithContentsOfFileNotification
|| __DATA_CONST.__const _JFXThermalMonitorLevelChangedNotification
|| __DATA_CONST.__const _JFXThermalPolicyChangedNotification
|| __DATA_CONST.__const _JFX_AllowsDepthDualBackCameraKey
|| __DATA_CONST.__const _JFX_DEBUG_DrawInstructionGraphNodes
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBounds
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowAdditionalRects
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowCornerPoints
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowDocumentBoundingBox
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowFaceRect
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowHitAreaBoundingBox
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowHitAreaPoints
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowObjectAlignedBoundingBox
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowTapPoints
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowTextBoundingBoxes
|| __DATA_CONST.__const _JFX_DEBUG_DrawOverlayBoundsOptionShowTextCornerPoints
|| __DATA_CONST.__const _JFX_DepthCodecType
|| __DATA_CONST.__const _JFX_EnableFaceTrackingBackCamera
|| __DATA_CONST.__const _JFX_EnableFrameMetricsLogging
|| __DATA_CONST.__const _JFX_ShowHDRBadgeInPreview
|| __DATA_CONST.__const _JFX_SizeIs720
|| __DATA_CONST.__const _JTCaptureSessionInterruptedKey
|| __DATA_CONST.__const _JTCaptureSessionInterruptedNotification
|| __DATA_CONST.__const _JTCaptureSessionInterruptedReasonKey
|| __DATA_CONST.__const _JTLastCameraPositionDefault
|| __DATA_CONST.__const _PVFrameSetMetadataARMetadataKey
|| __DATA_CONST.__const _PVFrameSetMetadataAVCaptureDeviceFormatKey
|| __DATA_CONST.__const _PVFrameSetMetadataDeviceOrientationKey
|| __DATA_CONST.__const _PVFrameSetMetadataOriginalBufferSizeKey
|| __DATA_CONST.__const _SPI_kOSThermalNotificationPressureLevelName
|| __DATA_CONST.__const _kAnalyticsEventActiveBackCameraTime
|| __DATA_CONST.__const _kAnalyticsEventActiveFrontCameraTime
|| __DATA_CONST.__const _kAnalyticsEventActiveTime
|| __DATA_CONST.__const _kAnalyticsEventAnimojiUsed
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyAnimoji
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyBackCamera
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyEffectEmojiSticker
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyEffectFilter
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyEffectLabel
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyEffectMessagesSticker
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyEffectShape
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyFrontCamera
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyPhoto
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeySent
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeySourceFuncam
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyVideo
|| __DATA_CONST.__const _kAnalyticsEventAssembleKeyWith
|| __DATA_CONST.__const _kAnalyticsEventCountOrDurationValueKey
|| __DATA_CONST.__const _kAnalyticsEventEmojiStickerUsed
|| __DATA_CONST.__const _kAnalyticsEventFaceTrackedOverlayChangedPlanes
|| __DATA_CONST.__const _kAnalyticsEventFilterUsed
|| __DATA_CONST.__const _kAnalyticsEventInternalPickerDismissed
|| __DATA_CONST.__const _kAnalyticsEventLabelUsed
|| __DATA_CONST.__const _kAnalyticsEventLaunched
|| __DATA_CONST.__const _kAnalyticsEventMessagesStickerUsed
|| __DATA_CONST.__const _kAnalyticsEventNameKey
|| __DATA_CONST.__const _kAnalyticsEventPickerDismissed
|| __DATA_CONST.__const _kAnalyticsEventPickerSelected
|| __DATA_CONST.__const _kAnalyticsEventSentPostCaptureWithFuncamPhoto
|| __DATA_CONST.__const _kAnalyticsEventSentPostCaptureWithFuncamVideo
|| __DATA_CONST.__const _kAnalyticsEventShapeUsed
|| __DATA_CONST.__const _kAnalyticsEventThermalHeavyToModerate
|| __DATA_CONST.__const _kAnalyticsEventThermalHeavyToTrapping
|| __DATA_CONST.__const _kAnalyticsEventThermalLightToModerate
|| __DATA_CONST.__const _kAnalyticsEventThermalLightToNominal
|| __DATA_CONST.__const _kAnalyticsEventThermalModerateToHeavy
|| __DATA_CONST.__const _kAnalyticsEventThermalModerateToLight
|| __DATA_CONST.__const _kAnalyticsEventThermalNominalToLight
|| __DATA_CONST.__const _kAnalyticsEventThermalSleepingToTrapping
|| __DATA_CONST.__const _kAnalyticsEventThermalTrappingToHeavy
|| __DATA_CONST.__const _kAnalyticsEventThermalTrappingToSleeping
|| __DATA_CONST.__const _kAnalyticsEventTimeStampKey
|| __DATA_CONST.__const _kAnalyticsEventUsedPickerToRemoveEffect
|| __DATA_CONST.__const _kAnalyticsEventVideoDuration
|| __DATA_CONST.__const _kCaptureSessionInterruptionAudioDeviceInUseByAnotherClient
|| __DATA_CONST.__const _kCaptureSessionInterruptionVideoDeviceInUseByAnotherClient
|| __DATA_CONST.__const _kCaptureSessionInterruptionVideoDeviceNotAvailableDueToSystemPressure
|| __DATA_CONST.__const _kCaptureSessionInterruptionVideoDeviceNotAvailableInBackground
|| __DATA_CONST.__const _kCaptureSessionInterruptionVideoDeviceNotAvailableWithMultipleForegroundApps
|| __DATA_CONST.__const _kDidChangeEffectsKey
|| __DATA_CONST.__const _kDidRemoveEffectKey
|| __DATA_CONST.__const _kEditableOverlaysCategoryID
|| __DATA_CONST.__const _kEmojiStickersCategoryID
|| __DATA_CONST.__const _kFacetimeBundleIdentifier
|| __DATA_CONST.__const _kFiltersCategoryID
|| __DATA_CONST.__const _kJFXARFrameKey
|| __DATA_CONST.__const _kJFXAnalyticsKeyPrefixConstant
|| __DATA_CONST.__const _kJFXAnchorTransformKey
|| __DATA_CONST.__const _kJFXAnimojiEffectAvatarVersionNumberKey
|| __DATA_CONST.__const _kJFXAnimojiEffectDataRepresentationKey
|| __DATA_CONST.__const _kJFXAnimojiPhysicsBlendShapesKey
|| __DATA_CONST.__const _kJFXCameraIntrinsicsKey
|| __DATA_CONST.__const _kJFXCameraTransformKey
|| __DATA_CONST.__const _kJFXCaptureInterfaceOrientationKey
|| __DATA_CONST.__const _kJFXDisableThermalTrackingKey
|| __DATA_CONST.__const _kJFXDotConstant
|| __DATA_CONST.__const _kJFXFaceAnchorCameraTransformKey
|| __DATA_CONST.__const _kJFXFaceAnchorCaptureInterfaceOrientationKey
|| __DATA_CONST.__const _kJFXFaceAnchorFaceRectKey
|| __DATA_CONST.__const _kJFXFaceAnchorFocalLengthKey
|| __DATA_CONST.__const _kJFXFaceAnchorImageResolutionKey
|| __DATA_CONST.__const _kJFXFaceAnchorKey
|| __DATA_CONST.__const _kJFXFaceAnchorNormalizedFaceRectKey
|| __DATA_CONST.__const _kJFXFaceAnchorPreferredAnchorOrientationKey
|| __DATA_CONST.__const _kJFXFaceAnchorTransformKey
|| __DATA_CONST.__const _kJFXImageResolutionKey
|| __DATA_CONST.__const _kJFXLogSubsystem
|| __DATA_CONST.__const _kJFXOrientationMonitorDeviceInterfaceOrientationNotification
|| __DATA_CONST.__const _kJFXOrientationMonitorDeviceInterfaceOrientationPreviousOrientationUserInfoKey
|| __DATA_CONST.__const _kJFXOrientationMonitorDeviceOrientationNotification
|| __DATA_CONST.__const _kJFXOrientationMonitorInterfaceOrientationNotification
|| __DATA_CONST.__const _kJFXPrefersTrackingNotActivateAutomatically
|| __DATA_CONST.__const _kJFXThermalMonitorLevelChangedKey
|| __DATA_CONST.__const _kJFXTrackedEffectProperties_disableKey
|| __DATA_CONST.__const _kJFXTrackedEffectProperties_typeKey
|| __DATA_CONST.__const _kJFXTransformOrientationKey
|| __DATA_CONST.__const _kJTAccessibilityOverlayEffectLabelKey
|| __DATA_CONST.__const _kJTEffectEffectIDCoderKey
|| __DATA_CONST.__const _kJTEffectEffectParameterCoderKey
|| __DATA_CONST.__const _kJTOverlayEffectTrackingPropsKey
|| __DATA_CONST.__const _kMattingStatusWarning
|| __DATA_CONST.__const _kMediaserverdCrashed
|| __DATA_CONST.__const _kMessagesBundleIdentifier
|| __DATA_CONST.__const _kRemovedEffectTypeKey
|| __DATA_CONST.__const _kSPI_DarwinNotification
|| __DATA_CONST.__const _kShapeOverlaysCategoryID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXCaptureViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXControlsViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXEffectBrowserViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXEffectEditorView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXEffectPickerCollectionViewCell
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXEffectPickerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXFilterEffectPickerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXFilterPickerCollectionViewCell
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXPlayButtonView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CFXPreviewViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXCaptureViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXControlsViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXEffectBrowserViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXEffectEditorView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXEffectPickerCollectionViewCell
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXEffectPickerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXFilterEffectPickerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXFilterPickerCollectionViewCell
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXPlayButtonView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CFXPreviewViewController
|| __TEXT.__const _CFXAspectRatioFourThree
|| __TEXT.__const _CFXAspectRatioSixteenNine
|| __TEXT.__const _CFXAspectRatioSquare
|| __TEXT.__const _CFXCameraModePhoto
|| __TEXT.__const _CFXCameraModeStream
|| __TEXT.__const _CFXCameraModeVideo
|| __TEXT.__const _CFXEffectPreviewStartAtNextRenderTime
|| __TEXT.__const _CFXMessagesAlwaysExpandedAppAnimationDuration
|| __TEXT.__const _CFXMessagesAlwaysExpandedAppBottomMargin
|| __TEXT.__const _CFXMessagesAlwaysExpandedAppDefaultTopMargin
|| __TEXT.__const _CFXMessagesAlwaysExpandedAppDockCornerRadius
|| __TEXT.__const _CFXMessagesAlwaysExpandedAppDockHeight
|| __TEXT.__const _CFXMessagesAlwaysExpandedAppLeftMargin
|| __TEXT.__const _CFXMessagesAlwaysExpandedAppWidth
|| __TEXT.__const _CameraEffectsKitVersionNumber
|| __TEXT.__const _CameraEffectsKitVersionString
|| __TEXT.__const _JFXDefaultPerspectiveZFar
|| __TEXT.__const _JFXDefaultPerspectiveZNear
|| __TEXT.__const _JFXMinOverlayTouchBeginExpandingAtScaleRelativeToView
|| __TEXT.__const _JFXMinOverlayTouchSize
|| __TEXT.__const _kAppsDockHeight
|| __TEXT.__const _kBitStorageWidth
|| __TEXT.__const _kCFXFilterPickerInfiniteScrollingCenterCopyIndex
|| __TEXT.__const _kCFXFilterPickerInfiniteScrollingItemCountMultiplier
|| __TEXT.__const _kCompactFilterPickerCellContentCornerRadius
|| __TEXT.__const _kCompactFilterPickerCellSelectionCornerRadius
|| __TEXT.__const _kCompactFilterPickerCellSelectorBorderWidth
|| __TEXT.__const _kCompactFilterPickerCellSize
|| __TEXT.__const _kCompactFilterPickerCollectionViewHeight
|| __TEXT.__const _kCompactFilterPickerSelectionCenterThreshold
|| __TEXT.__const _kCompactFilterPickerSelectionFontSize
|| __TEXT.__const _kCompactFilterPickerTitleBaselineDistanceFromCell
|| __TEXT.__const _kCompactFilterPickerTitleTextHeight
|| __TEXT.__const _kDefaultEffectPickerBottomInset
|| __TEXT.__const _kDefaultEffectPickerCellContentCornerRadius
|| __TEXT.__const _kDefaultEffectPickerCellHorizontalSpacing
|| __TEXT.__const _kDefaultEffectPickerCellSelectionCornerRadius
|| __TEXT.__const _kDefaultEffectPickerCellVerticalSpacing
|| __TEXT.__const _kDefaultEffectPickerColumns
|| __TEXT.__const _kDefaultEffectPickerLeftInset
|| __TEXT.__const _kDefaultEffectPickerRightInset
|| __TEXT.__const _kDefaultEffectPickerSelectionMargin
|| __TEXT.__const _kDefaultEffectPickerSelectorBorderWidth
|| __TEXT.__const _kDefaultEffectPickerTitleHeight
|| __TEXT.__const _kDefaultEffectPickerTopInset
|| __TEXT.__const _kDefaultEffectPreviewAnimationRange
|| __TEXT.__const _kDefaultEffectPreviewRenderTime
|| __TEXT.__const _kDefaultPlaybackTimeObserverInterval
|| __TEXT.__const _kDepthRangeInMeters
|| __TEXT.__const _kExpandedLayoutColumnCount
|| __TEXT.__const _kJFXFaceAnchorScaleMultiplier
|| __TEXT.__const _kJFXGameOverPosterTextEditingScale
|| __TEXT.__const _kJTOnePointFiveGigaBytes
|| __TEXT.__const _kJTThreePointFiveishGigaBytes
|| __TEXT.__const _kJTTwoPointFiveGigaBytes
|| __TEXT.__const _kQuantizedBitDepth
|| __TEXT.__text _AVTMorphTargetNameDefinesPose
|| __TEXT.__text _AXDurationStringForDuration
|| __TEXT.__text _CFXAspectRatioCropOverride
|| __TEXT.__text _CFXAspectRatioForAspectRatioCrop
|| __TEXT.__text _CFXCanonicalAspectRatioCropForCaptureModeAndDesiredAspectRatioCrop
|| __TEXT.__text _CFXCaptureCapabilitiesIsCTMSupported
|| __TEXT.__text _CFXCaptureCapabilitiesIsHDRSupported
|| __TEXT.__text _CFXLog_DebugEffectEditingUI
|| __TEXT.__text _CFXLog_DebugEffectEditorRenderer
|| __TEXT.__text _CFXLog_DebugFeedback
|| __TEXT.__text _CFXLog_DebugReview
|| __TEXT.__text _CFXLog_action
|| __TEXT.__text _CFXPreviewAspectRatioForAspectRatioCrop
|| __TEXT.__text _CGPointHasNan
|| __TEXT.__text _CGPointRound
|| __TEXT.__text _CGRectArea
|| __TEXT.__text _CGRectAreaOfIntersection
|| __TEXT.__text _CGRectCenterOverRect
|| __TEXT.__text _CGRectCenterOverRectHorizontally
|| __TEXT.__text _CGRectCenterOverRectVertically
|| __TEXT.__text _CGRectCenterRectAtNormalizedPointInRect
|| __TEXT.__text _CGRectCouldContainRect
|| __TEXT.__text _CGRectFillRectToAspectInRect
|| __TEXT.__text _CGRectForInnerSizeCenteredInOuterSize
|| __TEXT.__text _CGRectGetCenterPoint
|| __TEXT.__text _CGRectHasNan
|| __TEXT.__text _CGRectInsetWithInsets
|| __TEXT.__text _CGRectMakeSquareWithSize
|| __TEXT.__text _CGRectMakeSquareWithSizeAndCenterPoint
|| __TEXT.__text _CGRectMakeWithSize
|| __TEXT.__text _CGRectMakeWithSizeAndCenterPoint
|| __TEXT.__text _CGRectMoveToKeepCenterWithinRect
|| __TEXT.__text _CGRectPercentOfRectThatIntersectsRect
|| __TEXT.__text _CGRectRotate
|| __TEXT.__text _CGRectScaleAndCenter
|| __TEXT.__text _CGRectStraighten
|| __TEXT.__text _CGSizeAngleAndDistance
|| __TEXT.__text _CGSizeApplyAffineTransformWithPositiveResult
|| __TEXT.__text _CGSizeCouldContainSize
|| __TEXT.__text _CGSizeFillSizeToAspectInSize
|| __TEXT.__text _CGSizeFillSizeToAspectInSizeLimitedToProVideoMaxSize
|| __TEXT.__text _CGSizeFillingTargetSizeLimitedToMaxSize
|| __TEXT.__text _CGSizeFitToAspectInSize
|| __TEXT.__text _CGSizeHasNan
|| __TEXT.__text _CGSizeIntegral
|| __TEXT.__text _CGSizeIsSquare
|| __TEXT.__text _CGSizeRotate90
|| __TEXT.__text _CGSizeScale
|| __TEXT.__text _CMTimeCopyDescriptionWithScale
|| __TEXT.__text _CMTimeFromFrameTime
|| __TEXT.__text _CMTimeGetDistanceToRange
|| __TEXT.__text _CMTimeMakeWithARFrameTimestamp
|| __TEXT.__text _CMTimeRangeConvertScale
|| __TEXT.__text _CMTimeRangeCopyDescriptionWithScale
|| __TEXT.__text _CMTimeRangeForStartAndDuration
|| __TEXT.__text _CameraEffectsKitAppShutdown
|| __TEXT.__text _CoreGraphicsSerializationQueue
|| __TEXT.__text _DurationCMTimeFromFrameTime
|| __TEXT.__text _DurationSecondsFromFrameTime
|| __TEXT.__text _FrameTimeFromCMTime
|| __TEXT.__text _FrameTimeFromSeconds
|| __TEXT.__text _FrameTimeIntegerFloorFromSeconds
|| __TEXT.__text _JFXAddAREffectWithIdentifierNotificationGetEffectIdentifier
|| __TEXT.__text _JFXAddAREffectWithIdentifierNotificationGetReplayFilename
|| __TEXT.__text _JFXAddAREffectWithIdentifierNotificationUserInfoForEffectIdentifier
|| __TEXT.__text _JFXAddEffectWithIdentifierNotificationGetEffectIdentifier
|| __TEXT.__text _JFXAddEffectWithIdentifierNotificationUserInfoForEffectIdentifier
|| __TEXT.__text _JFXAddEffectWithNameNotificationGetEffectName
|| __TEXT.__text _JFXAddEffectWithNameNotificationUserInfoForEffectName
|| __TEXT.__text _JFXAddPosterWithIdentifierNotificationGetPosterIdentifier
|| __TEXT.__text _JFXAddPosterWithIdentifierNotificationUserInfoForPosterIdentifier
|| __TEXT.__text _JFXAddPosterWithNameNotificationGetPosterName
|| __TEXT.__text _JFXAddPosterWithNameNotificationUserInfoForPosterName
|| __TEXT.__text _JFXAddShapeWithIdentifierNotificationGetEffectIdentifier
|| __TEXT.__text _JFXAddShapeWithIdentifierNotificationUserInfoForEffectIdentifier
|| __TEXT.__text _JFXAddStickerNotificationGetData
|| __TEXT.__text _JFXAddStickerNotificationGetEffectIdentifier
|| __TEXT.__text _JFXAddStickerNotificationGetOffset
|| __TEXT.__text _JFXAddStickerNotificationGetRotation
|| __TEXT.__text _JFXAddStickerNotificationGetScale
|| __TEXT.__text _JFXAddStickerNotificationUserInfo
|| __TEXT.__text _JFXAddStickerNotificationUserInfoForEffect
|| __TEXT.__text _JFXAddTextNotificationGetEffectIdentifier
|| __TEXT.__text _JFXAddTextNotificationGetEffectString
|| __TEXT.__text _JFXAddTextNotificationUserInfoForEffect
|| __TEXT.__text _JFXAspectRatioNotificationUserInfo
|| __TEXT.__text _JFXAutomationLogCameraPosition
|| __TEXT.__text _JFXAutomationLogForUserDefault
|| __TEXT.__text _JFXAutomationLogFrameMetrics
|| __TEXT.__text _JFXCTMCameraModeForAspectRatio
|| __TEXT.__text _JFXCameraModeForCaptureModeAndAspectRatioCrop
|| __TEXT.__text _JFXConvertFloatDepthImageToFixedPointAndTranspose
|| __TEXT.__text _JFXConvertFloatDepthImageToFixedPointAtQuarterResolution
|| __TEXT.__text _JFXCreateDispatchQueue
|| __TEXT.__text _JFXCreatePixelBufferPool
|| __TEXT.__text _JFXCroppedFrameSizeForAspectRatio
|| __TEXT.__text _JFXCroppedFrameSizeForCameraModeAndOrientation
|| __TEXT.__text _JFXDistanceTransformEuclidean
|| __TEXT.__text _JFXEffectClassForType
|| __TEXT.__text _JFXEffectsRequestGetEffectsType
|| __TEXT.__text _JFXEffectsRequestNotificationUserInfoForEffectsType
|| __TEXT.__text _JFXEffectsResponseGetEffects
|| __TEXT.__text _JFXExportGetAsMovie
|| __TEXT.__text _JFXExportGetProjectIndex
|| __TEXT.__text _JFXExportNotificationUserInfo
|| __TEXT.__text _JFXGetAspectRatio
|| __TEXT.__text _JFXIsCTMCameraMode
|| __TEXT.__text _JFXIsCTMCroppedCameraMode
|| __TEXT.__text _JFXIsMediaDataReaderSignpostsEnabled
|| __TEXT.__text _JFXIsPlaybackSignpostsEnabled
|| __TEXT.__text _JFXIsVideoCameraMode
|| __TEXT.__text _JFXIsVideoWriterSignpostsEnabled
|| __TEXT.__text _JFXLog_DebugAnalytics
|| __TEXT.__text _JFXLog_DebugAnimoji
|| __TEXT.__text _JFXLog_DebugAnimojiPlayback
|| __TEXT.__text _JFXLog_DebugAudio
|| __TEXT.__text _JFXLog_DebugCamera
|| __TEXT.__text _JFXLog_DebugCapture
|| __TEXT.__text _JFXLog_DebugClip
|| __TEXT.__text _JFXLog_DebugComposition
|| __TEXT.__text _JFXLog_DebugDataModel
|| __TEXT.__text _JFXLog_DebugDepthCodec
|| __TEXT.__text _JFXLog_DebugEffect
|| __TEXT.__text _JFXLog_DebugEffectAssetDownloading
|| __TEXT.__text _JFXLog_DebugExport
|| __TEXT.__text _JFXLog_DebugExposure
|| __TEXT.__text _JFXLog_DebugFaceAnchor
|| __TEXT.__text _JFXLog_DebugFaceTrackingPlayback
|| __TEXT.__text _JFXLog_DebugMatting
|| __TEXT.__text _JFXLog_DebugMediaDataReader
|| __TEXT.__text _JFXLog_DebugPickerPreviewing
|| __TEXT.__text _JFXLog_DebugPlayback
|| __TEXT.__text _JFXLog_DebugThermals
|| __TEXT.__text _JFXLog_DebugViewerUI
|| __TEXT.__text _JFXLog_DebugWriter
|| __TEXT.__text _JFXLog_DebugWriterReorder
|| __TEXT.__text _JFXLog_animoji
|| __TEXT.__text _JFXLog_automation
|| __TEXT.__text _JFXLog_camera
|| __TEXT.__text _JFXLog_clip
|| __TEXT.__text _JFXLog_composition
|| __TEXT.__text _JFXLog_compositionAudio
|| __TEXT.__text _JFXLog_core
|| __TEXT.__text _JFXLog_depthCodec
|| __TEXT.__text _JFXLog_effectAssetDownloading
|| __TEXT.__text _JFXLog_effects
|| __TEXT.__text _JFXLog_export
|| __TEXT.__text _JFXLog_facetracking
|| __TEXT.__text _JFXLog_file
|| __TEXT.__text _JFXLog_matting
|| __TEXT.__text _JFXLog_mediaDataReader
|| __TEXT.__text _JFXLog_metadata
|| __TEXT.__text _JFXLog_model
|| __TEXT.__text _JFXLog_modelAssetManagement
|| __TEXT.__text _JFXLog_pickerUI
|| __TEXT.__text _JFXLog_playback
|| __TEXT.__text _JFXLog_thermals
|| __TEXT.__text _JFXLog_viewerUI
|| __TEXT.__text _JFXLog_writer
|| __TEXT.__text _JFXLowResolutionDevice
|| __TEXT.__text _JFXMakeFaceTrackedEffectTransformFaceCamera
|| __TEXT.__text _JFXMaximumVideoDimensionForCameraMode
|| __TEXT.__text _JFXMaximumVideoDimensionsForCameraMode
|| __TEXT.__text _JFXMediaDataReaderEventSignpostPointCategory
|| __TEXT.__text _JFXMediaDataReaderIntervalSignpostCategory
|| __TEXT.__text _JFXMediumResolutionDevice
|| __TEXT.__text _JFXMinimumVideoDimensionsForCameraMode
|| __TEXT.__text _JFXNSStringForCMTime
|| __TEXT.__text _JFXOSVersionIsAbove
|| __TEXT.__text _JFXOpenProjectGetProjectIndex
|| __TEXT.__text _JFXOpenProjectNotificationUserInfo
|| __TEXT.__text _JFXPlanarToVImage
|| __TEXT.__text _JFXPlayClipAtIndexNotificationUserInfo
|| __TEXT.__text _JFXPlayGetClipIndex
|| __TEXT.__text _JFXPlaybackEventSignpostPointCategory
|| __TEXT.__text _JFXPlaybackIntervalSignpostCategory
|| __TEXT.__text _JFXRecordGetDuration
|| __TEXT.__text _JFXRecordNotificationUserInfo
|| __TEXT.__text _JFXRemappedAverageDepth
|| __TEXT.__text _JFXRemoveEffectsNotificationGetEffectTypeIdentifiers
|| __TEXT.__text _JFXRemoveEffectsNotificationUserInfoForEffectTypes
|| __TEXT.__text _JFXSetAnimojiNotificationGetEffectIdentifier
|| __TEXT.__text _JFXSetAnimojiNotificationUserInfoForEffect
|| __TEXT.__text _JFXSetFilterNotificationGetEffectIdentifier
|| __TEXT.__text _JFXSetFilterNotificationGetEffectName
|| __TEXT.__text _JFXSetFilterWithIdentifierNotificationUserInfoForEffect
|| __TEXT.__text _JFXSetMemojiNotificationGetFile
|| __TEXT.__text _JFXSetMemojiNotificationUserInfoForFile
|| __TEXT.__text _JFXSignpostIDFromObject
|| __TEXT.__text _JFXToVImage
|| __TEXT.__text _JFXUncroppedFrameSizeForAspectRatio
|| __TEXT.__text _JFXUncroppedFrameSizeForCameraModeAndOrientation
|| __TEXT.__text _JFXVideoWriterEventSignpostPointCategory
|| __TEXT.__text _JFXVideoWriterIntervalSignpostCategory
|| __TEXT.__text _JFX_CaptureSessionInterruptionReasonsList
|| __TEXT.__text _JFX_createImageRefFromAuxiliaryImageInfo
|| __TEXT.__text _JFX_descriptionForEffectAssetAspectRatio
|| __TEXT.__text _JFX_descriptionForEffectAssetContentType
|| __TEXT.__text _JFX_descriptionForEffectAssetUsageMode
|| __TEXT.__text _JFX_getDrawOverlayBoundsOptionsDictionary
|| __TEXT.__text _JFX_isDrawInstructionGraphNodesEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowAdditionalRectsEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowCornerPointsEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowDocumentBoundingBoxEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowFaceRectEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowHitAreaBoundingBoxEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowHitAreaPointsEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowObjectAlignedBoundingBoxEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowTapPointsEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowTextBoundingBoxesEnabled
|| __TEXT.__text _JFX_isDrawOverlayBoundsOptionShowTextCornerPointsEnabled
|| __TEXT.__text _JFX_isShowHDRBadgeInPreviewEnabled
|| __TEXT.__text _JFX_logCameraIntrinsics
|| __TEXT.__text _JTGetHostTime
|| __TEXT.__text _NSStringFromCFXAspectRatioCrop
|| __TEXT.__text _NSStringFromJFXCameraMode
|| __TEXT.__text _NSStringFromJFXEffectType
|| __TEXT.__text _NSStringFromJFXTrackingType
|| __TEXT.__text _NSStringFromUIDeviceOrientation
|| __TEXT.__text _NSStringFromUIInterfaceOrientation
|| __TEXT.__text _PVViewContentModeFromAspectRatioPreservationMode
|| __TEXT.__text _SecondsFromFrameTime
|| __TEXT.__text __Z31VTCompressionOutputCallbackImplPvS_ijP20opaqueCMSampleBuffer
|| __TEXT.__text __Z33VTDecompressionOutputCallbackImplPvS_ijP10__CVBuffer6CMTimeS2_
|| __TEXT.__text __Z8toNSDataDv3_f
|| __TEXT.__text __ZN17ContourMemoryPoolC1Eii
|| __TEXT.__text __ZN17ContourMemoryPoolC2Eii
|| __TEXT.__text __ZN17ContourMemoryPoolD1Ev
|| __TEXT.__text __ZN17ContourMemoryPoolD2Ev
|| __TEXT.__text __ZN17ContourProcessing15tracingContoursEv
|| __TEXT.__text __ZN17ContourProcessing17contourExtractionERi
|| __TEXT.__text __ZN17ContourProcessing18contourSmoothCloseEv
|| __TEXT.__text __ZN17ContourProcessing19fillContourEdgeLineERNSt3__16vectorI8EdgeLineNS0_9allocatorIS2_EEEEh
|| __TEXT.__text __ZN17ContourProcessing22computeContourEdgeLineEPiiRNSt3__16vectorI8EdgeLineNS1_9allocatorIS3_EEEE
|| __TEXT.__text __ZN17ContourProcessing27contourExtractionProcessingERiS0_
|| __TEXT.__text __ZN17ContourProcessing6isHoleEPii
|| __TEXT.__text __ZN17ContourProcessingC1EPhiiP17ContourMemoryPoolb
|| __TEXT.__text __ZN17ContourProcessingC2EPhiiP17ContourMemoryPoolb
|| __TEXT.__text __ZN17ContourProcessingD1Ev
|| __TEXT.__text __ZN17ContourProcessingD2Ev
|| __TEXT.__text __ZN19HEVCLosslessEncoder11EncodeFrameEP10__CVBuffer6CMTimePK14__CFDictionary
|| __TEXT.__text __ZN19HEVCLosslessEncoder13ConfigEncoderEP13EncoderConfig
|| __TEXT.__text __ZN19HEVCLosslessEncoder16GetEncoderConfigEP13EncoderConfig
|| __TEXT.__text __ZN19HEVCLosslessEncoder4OpenEii10IMG_FORMATdPFvPvS1_ijP20opaqueCMSampleBufferES1_
|| __TEXT.__text __ZN19HEVCLosslessEncoder5CloseEv
|| __TEXT.__text __ZN19HEVCLosslessEncoderC1Ev
|| __TEXT.__text __ZN19HEVCLosslessEncoderC2Ev
|| __TEXT.__text __ZN19HEVCLosslessEncoderD1Ev
|| __TEXT.__text __ZN19HEVCLosslessEncoderD2Ev
|| __TEXT.__text __ZN8EdgeLineC1Ev
|| __TEXT.__text __ZN8EdgeLineC2Ev
|| __TEXT.__text _aspectRatioAdjustedForOrientation
|| __TEXT.__text _aspectRatioForMultiplier
|| __TEXT.__text _aspectRatioForSize
|| __TEXT.__text _aspectRatioForString
|| __TEXT.__text _aspectRatioIsLandscape
|| __TEXT.__text _aspectRatioIsPortrait
|| __TEXT.__text _aspectRatioMultiplierForSize
|| __TEXT.__text _aspectRatioPreservationModeFromPVViewContentMode
|| __TEXT.__text _calculateDepthShadowPSNRForDepthImage
|| __TEXT.__text _calculatePSNRForDepthImage
|| __TEXT.__text _complementaryAspectRatio
|| __TEXT.__text _copyBGRAToFloatDepthBuffer
|| __TEXT.__text _copyDepthToDoubleWidthDoubleHeight
|| __TEXT.__text _copyDepthToHalfWidthHalfHeight
|| __TEXT.__text _copyFloatDepthBufferToL010
|| __TEXT.__text _copyL010ToFloatDepthBuffer
|| __TEXT.__text _copySimulatedL010RoundtripImage
|| __TEXT.__text _createClosedCGPathWithPoints
|| __TEXT.__text _createExpandedClosedCGPathWithCGPath
|| __TEXT.__text _createGainMapImageRefFromAssetURL
|| __TEXT.__text _drawFaceRectOnAlphaMap
|| __TEXT.__text _effectTypesIncompatibleWithType
|| __TEXT.__text _exifBrightnessFromEXIFMetadata
|| __TEXT.__text _exifMetadataForCMSampleBuffer
|| __TEXT.__text _exifMetadataForCVPixelBuffer
|| __TEXT.__text _exposureOffsetFromEXIFMetadata
|| __TEXT.__text _exposureTimeFromEXIFMetadata
|| __TEXT.__text _getLargestFaceRect
|| __TEXT.__text _hasGainMap
|| __TEXT.__text _isAddedMediaCompatibleWithEffectType
|| __TEXT.__text _isCameraStillCompatibleWithEffectType
|| __TEXT.__text _isDrawEffectsEditorBoundsEnabled
|| __TEXT.__text _isFaceBoundingBoxValid
|| __TEXT.__text _isFaceTrackingEnabledOnBackCamera
|| __TEXT.__text _isFrameMetricsLoggingEnabled
|| __TEXT.__text _isPosterCompatibleWithEffectType
|| __TEXT.__text _isShowPlayerScrubbingControlsEnabled
|| __TEXT.__text _isoFromEXIFMetadata
|| __TEXT.__text _logMetadataFromEXIFMetadata
|| __TEXT.__text _multiplierForAspectRatio
|| __TEXT.__text _rectWithAspectRatioAndPreservationModeInRectWithSize
|| __TEXT.__text _shutterSpeedFromEXIFMetadata
|| __TEXT.__text _sizeForAspectRatio
|| __TEXT.__text _stringForAspectRatio
|| __TEXT.__text _transformInfoWithWorldToViewTransform
|| __TEXT.__text _transformedPoint
|| __TEXT.__text _useMirroredFrontCameraInStreamMode
__ ARKit: _ARErrorDomain
__ ARKit: _OBJC_CLASS_$_ARDeviceOrientationSensor
__ ARKit: _OBJC_CLASS_$_ARFaceAnchor
__ ARKit: _OBJC_CLASS_$_ARFaceData
__ ARKit: _OBJC_CLASS_$_ARFaceTrackingConfiguration
__ ARKit: _OBJC_CLASS_$_ARFrame
__ ARKit: _OBJC_CLASS_$_ARImageData
__ ARKit: _OBJC_CLASS_$_ARMotionSensor
__ ARKit: _OBJC_CLASS_$_ARSession
__ AVFAudio: _AVAudioSessionOrientationBack
__ AVFAudio: _AVAudioSessionPolarPatternOmnidirectional
__ AVFAudio: _AVAudioSessionPortBuiltInMic
__ AVFAudio: _AVAudioSessionRouteChangeNotification
__ AVFAudio: _AVAudioSessionRouteChangeReasonKey
__ AVFAudio: _AVChannelLayoutKey
__ AVFAudio: _AVEncoderBitRateKey
__ AVFAudio: _AVFormatIDKey
__ AVFAudio: _AVNumberOfChannelsKey
__ AVFAudio: _AVSampleRateKey
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _AVAssetExportPreset1280x720
__ AVFoundation: _AVAssetExportPreset1920x1080
__ AVFoundation: _AVAssetExportPreset3840x2160
__ AVFoundation: _AVAssetExportPreset640x480
__ AVFoundation: _AVAssetExportPreset960x540
__ AVFoundation: _AVAudioTimePitchAlgorithmLowQualityZeroLatency
__ AVFoundation: _AVAudioTimePitchAlgorithmSpectral
__ AVFoundation: _AVAudioTimePitchAlgorithmTimeDomain
__ AVFoundation: _AVAudioTimePitchAlgorithmVarispeed
__ AVFoundation: _AVCaptureDeviceTypeBuiltInDualCamera
__ AVFoundation: _AVCaptureDeviceTypeBuiltInDualWideCamera
__ AVFoundation: _AVCaptureDeviceTypeBuiltInTelephotoCamera
__ AVFoundation: _AVCaptureDeviceTypeBuiltInTripleCamera
__ AVFoundation: _AVCaptureDeviceTypeBuiltInTrueDepthCamera
__ AVFoundation: _AVCaptureDeviceTypeBuiltInUltraWideCamera
__ AVFoundation: _AVCaptureDeviceTypeBuiltInWideAngleCamera
__ AVFoundation: _AVCaptureSessionDidStartRunningNotification
__ AVFoundation: _AVCaptureSessionDidStopRunningNotification
__ AVFoundation: _AVCaptureSessionErrorKey
__ AVFoundation: _AVCaptureSessionInterruptionEndedNotification
__ AVFoundation: _AVCaptureSessionInterruptionReasonKey
__ AVFoundation: _AVCaptureSessionInterruptionSystemPressureStateKey
__ AVFoundation: _AVCaptureSessionPreset1280x720
__ AVFoundation: _AVCaptureSessionPreset1920x1080
__ AVFoundation: _AVCaptureSessionPresetHigh
__ AVFoundation: _AVCaptureSessionPresetInputPriority
__ AVFoundation: _AVCaptureSessionPresetPhoto
__ AVFoundation: _AVCaptureSessionRuntimeErrorNotification
__ AVFoundation: _AVCaptureSessionWasInterruptedNotification
__ AVFoundation: _AVCaptureSystemPressureLevelCritical
__ AVFoundation: _AVCaptureSystemPressureLevelSerious
__ AVFoundation: _AVCaptureSystemPressureLevelShutdown
__ AVFoundation: _AVErrorDeviceKey
__ AVFoundation: _AVFileTypeHEIC
__ AVFoundation: _AVFileTypeJPEG
__ AVFoundation: _AVFileTypeQuickTimeMovie
__ AVFoundation: _AVFoundationErrorDomain
__ AVFoundation: _AVLayerVideoGravityResize
__ AVFoundation: _AVLayerVideoGravityResizeAspect
__ AVFoundation: _AVLayerVideoGravityResizeAspectFill
__ AVFoundation: _AVMakeRectWithAspectRatioInsideRect
__ AVFoundation: _AVMediaCharacteristicAudible
__ AVFoundation: _AVMediaCharacteristicVisual
__ AVFoundation: _AVMediaTypeAudio
__ AVFoundation: _AVMediaTypeMetadata
__ AVFoundation: _AVMediaTypeVideo
__ AVFoundation: _AVMetadataCommonKeyFormat
__ AVFoundation: _AVMetadataIdentifierQuickTimeMetadataDetectedFace
__ AVFoundation: _AVMetadataKeySpaceCommon
__ AVFoundation: _AVMetadataKeySpaceQuickTimeMetadata
__ AVFoundation: _AVMetadataObjectTypeFace
__ AVFoundation: _AVMetadataObjectTypeTrackedFaces
__ AVFoundation: _AVMetadataQuickTimeMetadataKeyArtwork
__ AVFoundation: _AVMetadataQuickTimeMetadataKeyIsMontage
__ AVFoundation: _AVOutputSettingsPreset1280x720
__ AVFoundation: _AVOutputSettingsPreset1920x1080
__ AVFoundation: _AVOutputSettingsPreset640x480
__ AVFoundation: _AVOutputSettingsPreset960x540
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVURLAssetPreferPreciseDurationAndTimingKey
__ AVFoundation: _AVVideoAllowFrameReorderingKey
__ AVFoundation: _AVVideoAverageBitRateKey
__ AVFoundation: _AVVideoCodecKey
__ AVFoundation: _AVVideoCodecTypeH264
__ AVFoundation: _AVVideoCodecTypeHEVC
__ AVFoundation: _AVVideoCodecTypeJPEG
__ AVFoundation: _AVVideoColorPrimariesKey
__ AVFoundation: _AVVideoColorPropertiesKey
__ AVFoundation: _AVVideoCompressionPropertiesKey
__ AVFoundation: _AVVideoH264EntropyModeCABAC
__ AVFoundation: _AVVideoH264EntropyModeKey
__ AVFoundation: _AVVideoHeightKey
__ AVFoundation: _AVVideoProfileLevelH264Baseline30
__ AVFoundation: _AVVideoProfileLevelH264Baseline31
__ AVFoundation: _AVVideoProfileLevelH264HighAutoLevel
__ AVFoundation: _AVVideoProfileLevelH264MainAutoLevel
__ AVFoundation: _AVVideoProfileLevelKey
__ AVFoundation: _AVVideoTransferFunctionKey
__ AVFoundation: _AVVideoWidthKey
__ AVFoundation: _AVVideoYCbCrMatrixKey
__ AVFoundation: _OBJC_CLASS_$_AVAsset
__ AVFoundation: _OBJC_CLASS_$_AVAssetImageGenerator
__ AVFoundation: _OBJC_CLASS_$_AVAssetReader
__ AVFoundation: _OBJC_CLASS_$_AVAssetReaderAudioMixOutput
__ AVFoundation: _OBJC_CLASS_$_AVAssetReaderOutputMetadataAdaptor
__ AVFoundation: _OBJC_CLASS_$_AVAssetReaderTrackOutput
__ AVFoundation: _OBJC_CLASS_$_AVAssetReaderVideoCompositionOutput
__ AVFoundation: _OBJC_CLASS_$_AVAssetWriter
__ AVFoundation: _OBJC_CLASS_$_AVAssetWriterInput
__ AVFoundation: _OBJC_CLASS_$_AVAssetWriterInputMetadataAdaptor
__ AVFoundation: _OBJC_CLASS_$_AVAssetWriterInputPixelBufferAdaptor
__ AVFoundation: _OBJC_CLASS_$_AVCaptureAudioDataOutput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDataOutputSynchronizer
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDepthDataOutput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDevice
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDeviceDiscoverySession
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDeviceInput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureMetadataOutput
__ AVFoundation: _OBJC_CLASS_$_AVCapturePhotoOutput
__ AVFoundation: _OBJC_CLASS_$_AVCapturePhotoSettings
__ AVFoundation: _OBJC_CLASS_$_AVCaptureSession
__ AVFoundation: _OBJC_CLASS_$_AVCaptureVideoDataOutput
__ AVFoundation: _OBJC_CLASS_$_AVCompositionTrackSegment
__ AVFoundation: _OBJC_CLASS_$_AVDepthData
__ AVFoundation: _OBJC_CLASS_$_AVMetadataFaceObject
__ AVFoundation: _OBJC_CLASS_$_AVMetadataItem
__ AVFoundation: _OBJC_CLASS_$_AVMutableAudioMix
__ AVFoundation: _OBJC_CLASS_$_AVMutableAudioMixInputParameters
__ AVFoundation: _OBJC_CLASS_$_AVMutableComposition
__ AVFoundation: _OBJC_CLASS_$_AVMutableMetadataItem
__ AVFoundation: _OBJC_CLASS_$_AVMutableVideoComposition
__ AVFoundation: _OBJC_CLASS_$_AVOutputSettingsAssistant
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ AVFoundation: _OBJC_CLASS_$_AVSampleBufferDisplayLayer
__ AVFoundation: _OBJC_CLASS_$_AVTimedMetadataGroup
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ AVKit: _OBJC_CLASS_$_AVPlayerViewController
__ AVKit: _OBJC_METACLASS_$_AVPlayerViewController
__ Accelerate: _vDSP_conv
__ Accelerate: _vImageBoxConvolve_Planar8
__ Accelerate: _vImageConvert_16Fto16U
__ Accelerate: _vImageConvert_16Uto16F
__ Accelerate: _vImageConvert_PlanarFtoPlanar8
__ Accelerate: _vImageDilate_Planar8
__ Accelerate: _vImageErode_Planar8
__ Accelerate: _vImageHorizontalReflect_Planar16U
__ Accelerate: _vImageHorizontalReflect_PlanarF
__ Accelerate: _vImageRotate90_Planar16U
__ Accelerate: _vImageRotate90_Planar8
__ Accelerate: _vImageRotate90_PlanarF
__ Accelerate: _vImageScale_CbCr8
__ Accelerate: _vImageScale_Planar16U
__ Accelerate: _vImageScale_Planar8
__ Accelerate: _vImageScale_PlanarF
__ AppleCVA: _CVASegmentationCreate
__ AppleCVA: _CVASegmentationCreateOutputInfo
__ AppleCVA: _CVASegmentationDestroy
__ AppleCVA: _CVASegmentationProcess
__ AppleCVA: _kCVAFaceTracking_DetectedFaceRect
__ AppleCVA: _kCVAFaceTracking_FailureType
__ AppleCVA: _kCVAFaceTracking_TrackedFacesArray
__ AppleCVA: _kCVASegmentation_BackFacingNetworkPath
__ AppleCVA: _kCVASegmentation_Callback
__ AppleCVA: _kCVASegmentation_CameraType
__ AppleCVA: _kCVASegmentation_Color
__ AppleCVA: _kCVASegmentation_ColorCameraXDirection
__ AppleCVA: _kCVASegmentation_ColorCameraYDirection
__ AppleCVA: _kCVASegmentation_Depth
__ AppleCVA: _kCVASegmentation_DepthCameraXDirection
__ AppleCVA: _kCVASegmentation_DepthCameraYDirection
__ AppleCVA: _kCVASegmentation_DepthUnit
__ AppleCVA: _kCVASegmentation_ForegroundColorPixelFormatType
__ AppleCVA: _kCVASegmentation_FrontFacingNetworkPath
__ AppleCVA: _kCVASegmentation_GravityDirection
__ AppleCVA: _kCVASegmentation_ImageHeight
__ AppleCVA: _kCVASegmentation_ImageWidth
__ AppleCVA: _kCVASegmentation_OutputForegroundColor
__ AppleCVA: _kCVASegmentation_OutputSegmentation
__ AppleCVA: _kCVASegmentation_SegmentationPixelFormatType
__ AppleCVA: _kCVASegmentation_SupportsForegroundColor
__ AppleCVA: _kCVASegmentation_Timestamp
__ AudioToolbox: _AudioServicesPlaySystemSoundWithCompletion
__ AvatarKit: _AVTAvatarKitVersionNumber
__ AvatarKit: _AVTInitializeShaderCache
__ AvatarKit: _OBJC_CLASS_$_AVTAnimoji
__ AvatarKit: _OBJC_CLASS_$_AVTAvatar
__ AvatarKit: _OBJC_CLASS_$_AVTFaceTracker
__ AvatarKit: _OBJC_CLASS_$_AVTFaceTrackingInfo
__ AvatarKit: _OBJC_CLASS_$_AVTRenderer
__ AvatarUI: _OBJC_CLASS_$_AVTAvatarFetchRequest
__ AvatarUI: _OBJC_CLASS_$_AVTAvatarRecordRendering
__ AvatarUI: _OBJC_CLASS_$_AVTAvatarStore
__ CallKit: _OBJC_CLASS_$_CXCallObserver
__ CameraUI: _CAMDynamicShutterSettingsDefault
__ CameraUI: _OBJC_CLASS_$_CAMBottomBar
__ CameraUI: _OBJC_CLASS_$_CAMCaptureCapabilities
__ CameraUI: _OBJC_CLASS_$_CAMControlStatusBar
__ CameraUI: _OBJC_CLASS_$_CAMCreativeCameraButton
__ CameraUI: _OBJC_CLASS_$_CAMDynamicShutterControl
__ CameraUI: _OBJC_CLASS_$_CAMElapsedTimeView
__ CameraUI: _OBJC_CLASS_$_CAMFlashButton
__ CameraUI: _OBJC_CLASS_$_CAMFlipButton
__ CameraUI: _OBJC_CLASS_$_CAMFullscreenViewfinderLayout
__ CameraUI: _OBJC_CLASS_$_CAMSnapshotView
__ CameraUI: _OBJC_CLASS_$_CAMUserPreferences
__ CameraUI: _OBJC_CLASS_$_CAMViewfinderReticleView
__ CameraUI: _OBJC_CLASS_$_CAMZoomControl
__ CameraUI: _OBJC_CLASS_$_CAMZoomControlUtilities
__ CameraUI: _OBJC_CLASS_$_CAMZoomSlider
__ CameraUI: _OBJC_CLASS_$_CAMZoomSliderUtilities
__ CameraUI: _OBJC_CLASS_$_CUShutterButton
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFDataCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleLanguageCode
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreGraphics: _CGAffineTransformConcat
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformInvert
__ CoreGraphics: _CGAffineTransformIsIdentity
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceCreateWithName
__ CoreGraphics: _CGColorSpaceGetName
__ CoreGraphics: _CGColorSpaceIsWideGamutRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextDrawImage
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGContextScaleCTM
__ CoreGraphics: _CGContextSetAlpha
__ CoreGraphics: _CGContextSetBlendMode
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGDataProviderCreateWithCFData
__ CoreGraphics: _CGDataProviderRelease
__ CoreGraphics: _CGImageCreate
__ CoreGraphics: _CGImageCreateWithImageInRect
__ CoreGraphics: _CGImageGetBytesPerRow
__ CoreGraphics: _CGImageGetColorSpace
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGImageRetain
__ CoreGraphics: _CGPathAddLineToPoint
__ CoreGraphics: _CGPathCloseSubpath
__ CoreGraphics: _CGPathContainsPoint
__ CoreGraphics: _CGPathCreateCopyByStrokingPath
__ CoreGraphics: _CGPathCreateMutable
__ CoreGraphics: _CGPathGetPathBoundingBox
__ CoreGraphics: _CGPathMoveToPoint
__ CoreGraphics: _CGPathRelease
__ CoreGraphics: _CGPathRetain
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectMakeWithDictionaryRepresentation
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreGraphics: _kCGColorSpaceDisplayP3_HLG
__ CoreGraphics: _kCGColorSpaceDisplayP3_PQ
__ CoreGraphics: _kCGColorSpaceITUR_2100_HLG
__ CoreGraphics: _kCGColorSpaceITUR_2100_PQ
__ CoreGraphics: _kCGColorSpaceITUR_709
__ CoreGraphics: _kCGColorSpaceSRGB
__ CoreImage: _OBJC_CLASS_$_CIContext
__ CoreImage: _OBJC_CLASS_$_CIFilter
__ CoreImage: _OBJC_CLASS_$_CIImage
__ CoreImage: _kCIInputImageKey
__ CoreImage: _kCIInputRadiusKey
__ CoreImage: _kCIInputTransformKey
__ CoreMedia: _CMAudioFormatDescriptionEqual
__ CoreMedia: _CMAudioFormatDescriptionGetStreamBasicDescription
__ CoreMedia: _CMBlockBufferAppendBufferReference
__ CoreMedia: _CMBlockBufferCopyDataBytes
__ CoreMedia: _CMBlockBufferCreateContiguous
__ CoreMedia: _CMBlockBufferCreateWithMemoryBlock
__ CoreMedia: _CMBlockBufferGetDataLength
__ CoreMedia: _CMBlockBufferGetDataPointer
__ CoreMedia: _CMClockGetHostTimeClock
__ CoreMedia: _CMClockGetTime
__ CoreMedia: _CMFormatDescriptionEqual
__ CoreMedia: _CMFormatDescriptionGetExtension
__ CoreMedia: _CMFormatDescriptionGetExtensions
__ CoreMedia: _CMFormatDescriptionGetMediaSubType
__ CoreMedia: _CMGetAttachment
__ CoreMedia: _CMMetadataFormatDescriptionCreateWithMetadataSpecifications
__ CoreMedia: _CMMetadataFormatDescriptionGetIdentifiers
__ CoreMedia: _CMSampleBufferCreate
__ CoreMedia: _CMSampleBufferCreateForImageBuffer
__ CoreMedia: _CMSampleBufferCreateReady
__ CoreMedia: _CMSampleBufferCreateReadyWithImageBuffer
__ CoreMedia: _CMSampleBufferGetDataBuffer
__ CoreMedia: _CMSampleBufferGetDuration
__ CoreMedia: _CMSampleBufferGetFormatDescription
__ CoreMedia: _CMSampleBufferGetImageBuffer
__ CoreMedia: _CMSampleBufferGetOutputPresentationTimeStamp
__ CoreMedia: _CMSampleBufferGetPresentationTimeStamp
__ CoreMedia: _CMSampleBufferGetSampleAttachmentsArray
__ CoreMedia: _CMSampleBufferGetSampleSize
__ CoreMedia: _CMSampleBufferGetSampleTimingInfo
__ CoreMedia: _CMSetAttachment
__ CoreMedia: _CMTimeAdd
__ CoreMedia: _CMTimeClampToRange
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeConvertScale
__ CoreMedia: _CMTimeCopyAsDictionary
__ CoreMedia: _CMTimeCopyDescription
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeMappingMake
__ CoreMedia: _CMTimeMaximum
__ CoreMedia: _CMTimeMinimum
__ CoreMedia: _CMTimeMultiply
__ CoreMedia: _CMTimeMultiplyByFloat64
__ CoreMedia: _CMTimeRangeContainsTime
__ CoreMedia: _CMTimeRangeContainsTimeRange
__ CoreMedia: _CMTimeRangeCopyDescription
__ CoreMedia: _CMTimeRangeEqual
__ CoreMedia: _CMTimeRangeFromTimeToTime
__ CoreMedia: _CMTimeRangeGetEnd
__ CoreMedia: _CMTimeRangeGetIntersection
__ CoreMedia: _CMTimeRangeMake
__ CoreMedia: _CMTimeSubtract
__ CoreMedia: _CMVideoFormatDescriptionCreate
__ CoreMedia: _CMVideoFormatDescriptionCreateForImageBuffer
__ CoreMedia: _CMVideoFormatDescriptionCreateFromHEVCParameterSets
__ CoreMedia: _CMVideoFormatDescriptionGetDimensions
__ CoreMedia: _CMVideoFormatDescriptionGetHEVCParameterSetAtIndex
__ CoreMedia: _kCMMetadataBaseDataType_Float32
__ CoreMedia: _kCMMetadataBaseDataType_RawData
__ CoreMedia: _kCMMetadataBaseDataType_UInt64
__ CoreMedia: _kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType
__ CoreMedia: _kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier
__ CoreMedia: _kCMSampleAttachmentKey_DisplayImmediately
__ CoreMedia: _kCMSampleBufferAttachmentKey_DroppedFrameReason
__ CoreMedia: _kCMSampleBufferAttachmentKey_EmptyMedia
__ CoreMedia: _kCMSampleBufferDroppedFrameReason_Discontinuity
__ CoreMedia: _kCMSampleBufferDroppedFrameReason_FrameWasLate
__ CoreMedia: _kCMSampleBufferDroppedFrameReason_OutOfBuffers
__ CoreMedia: _kCMTimeIndefinite
__ CoreMedia: _kCMTimeInvalid
__ CoreMedia: _kCMTimePositiveInfinity
__ CoreMedia: _kCMTimeRangeInvalid
__ CoreMedia: _kCMTimeRangeZero
__ CoreMedia: _kCMTimeZero
__ CoreMotion: _OBJC_CLASS_$_CMMotionManager
__ CoreServices: _kUTTypeMPEG4
__ CoreServices: _kUTTypePNG
__ CoreServices: _kUTTypeQuickTimeMovie
__ CoreVideo: _CVBufferGetAttachment
__ CoreVideo: _CVBufferGetAttachments
__ CoreVideo: _CVBufferPropagateAttachments
__ CoreVideo: _CVBufferRelease
__ CoreVideo: _CVBufferSetAttachment
__ CoreVideo: _CVMetalTextureCacheCreate
__ CoreVideo: _CVMetalTextureCacheCreateTextureFromImage
__ CoreVideo: _CVMetalTextureCacheFlush
__ CoreVideo: _CVMetalTextureGetTexture
__ CoreVideo: _CVPixelBufferCreate
__ CoreVideo: _CVPixelBufferCreateWithBytes
__ CoreVideo: _CVPixelBufferGetBaseAddress
__ CoreVideo: _CVPixelBufferGetBaseAddressOfPlane
__ CoreVideo: _CVPixelBufferGetBytesPerRow
__ CoreVideo: _CVPixelBufferGetBytesPerRowOfPlane
__ CoreVideo: _CVPixelBufferGetDataSize
__ CoreVideo: _CVPixelBufferGetHeight
__ CoreVideo: _CVPixelBufferGetHeightOfPlane
__ CoreVideo: _CVPixelBufferGetIOSurface
__ CoreVideo: _CVPixelBufferGetPixelFormatType
__ CoreVideo: _CVPixelBufferGetWidth
__ CoreVideo: _CVPixelBufferGetWidthOfPlane
__ CoreVideo: _CVPixelBufferLockBaseAddress
__ CoreVideo: _CVPixelBufferPoolCreate
__ CoreVideo: _CVPixelBufferPoolCreatePixelBuffer
__ CoreVideo: _CVPixelBufferPoolFlush
__ CoreVideo: _CVPixelBufferPoolRelease
__ CoreVideo: _CVPixelBufferPoolRetain
__ CoreVideo: _CVPixelBufferRelease
__ CoreVideo: _CVPixelBufferRetain
__ CoreVideo: _CVPixelBufferUnlockBaseAddress
__ CoreVideo: _kCVBufferPropagatedAttachmentsKey
__ CoreVideo: _kCVImageBufferColorPrimariesKey
__ CoreVideo: _kCVImageBufferColorPrimaries_ITU_R_709_2
__ CoreVideo: _kCVImageBufferTransferFunctionKey
__ CoreVideo: _kCVImageBufferTransferFunction_ITU_R_709_2
__ CoreVideo: _kCVImageBufferYCbCrMatrixKey
__ CoreVideo: _kCVImageBufferYCbCrMatrix_ITU_R_2020
__ CoreVideo: _kCVImageBufferYCbCrMatrix_ITU_R_601_4
__ CoreVideo: _kCVImageBufferYCbCrMatrix_ITU_R_709_2
__ CoreVideo: _kCVMetalTextureCacheMaximumTextureAgeKey
__ CoreVideo: _kCVMetalTextureUsage
__ CoreVideo: _kCVPixelBufferBytesPerRowAlignmentKey
__ CoreVideo: _kCVPixelBufferExtendedPixelsBottomKey
__ CoreVideo: _kCVPixelBufferHeightKey
__ CoreVideo: _kCVPixelBufferIOSurfacePropertiesKey
__ CoreVideo: _kCVPixelBufferMetalCompatibilityKey
__ CoreVideo: _kCVPixelBufferPixelFormatTypeKey
__ CoreVideo: _kCVPixelBufferPlaneAlignmentKey
__ CoreVideo: _kCVPixelBufferWidthKey
__ Espresso: _OBJC_CLASS_$_EspressoImage2Image
__ Foundation: _NSAllMapTableKeys
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSExtensionHostDidBecomeActiveNotification
__ Foundation: _NSExtensionHostDidEnterBackgroundNotification
__ Foundation: _NSExtensionHostWillResignActiveNotification
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSTemporaryDirectory
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ ImageIO: _CGImageDestinationAddAuxiliaryDataInfo
__ ImageIO: _CGImageDestinationAddImage
__ ImageIO: _CGImageDestinationAddImageAndMetadata
__ ImageIO: _CGImageDestinationCreateWithData
__ ImageIO: _CGImageDestinationCreateWithURL
__ ImageIO: _CGImageDestinationFinalize
__ ImageIO: _CGImageDestinationSetProperties
__ ImageIO: _CGImageMetadataCreateFromXMPData
__ ImageIO: _CGImageMetadataCreateMutable
__ ImageIO: _CGImageMetadataCreateMutableCopy
__ ImageIO: _CGImageMetadataCreateXMPData
__ ImageIO: _CGImageMetadataRegisterNamespaceForPrefix
__ ImageIO: _CGImageMetadataRemoveTagWithPath
__ ImageIO: _CGImageMetadataSetTagWithPath
__ ImageIO: _CGImageMetadataTagCreate
__ ImageIO: _CGImageSourceCopyAuxiliaryDataInfoAtIndex
__ ImageIO: _CGImageSourceCopyMetadataAtIndex
__ ImageIO: _CGImageSourceCopyPropertiesAtIndex
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateWithData
__ ImageIO: _CGImageSourceCreateWithURL
__ ImageIO: _CGImageSourceGetPrimaryImageIndex
__ ImageIO: _kCGImageAuxiliaryDataInfoData
__ ImageIO: _kCGImageAuxiliaryDataInfoDataDescription
__ ImageIO: _kCGImageAuxiliaryDataInfoMetadata
__ ImageIO: _kCGImageAuxiliaryDataTypeDepth
__ ImageIO: _kCGImageAuxiliaryDataTypeHDRGainMap
__ ImageIO: _kCGImageDestinationImageMaxPixelSize
__ ImageIO: _kCGImageDestinationLossyCompressionQuality
__ ImageIO: _kCGImageMetadataShouldExcludeGPS
__ ImageIO: _kCGImageMetadataShouldExcludeXMP
__ ImageIO: _kCGImagePropertyAPNGDelayTime
__ ImageIO: _kCGImagePropertyAPNGLoopCount
__ ImageIO: _kCGImagePropertyAPNGUnclampedDelayTime
__ ImageIO: _kCGImagePropertyBytesPerRow
__ ImageIO: _kCGImagePropertyExifCameraOwnerName
__ ImageIO: _kCGImagePropertyExifDictionary
__ ImageIO: _kCGImagePropertyExifLensModel
__ ImageIO: _kCGImagePropertyHeight
__ ImageIO: _kCGImagePropertyOrientation
__ ImageIO: _kCGImagePropertyPNGDictionary
__ ImageIO: _kCGImagePropertyPixelFormat
__ ImageIO: _kCGImagePropertyPixelHeight
__ ImageIO: _kCGImagePropertyPixelWidth
__ ImageIO: _kCGImagePropertyTIFFDictionary
__ ImageIO: _kCGImagePropertyTIFFOrientation
__ ImageIO: _kCGImagePropertyWidth
__ ImageIO: _kCGImageSourceShouldCache
__ Messages: _OBJC_CLASS_$_MSMessagesAppViewController
__ Metal: _MTLCreateSystemDefaultDevice
__ Metal: _OBJC_CLASS_$_MTLRenderPassDescriptor
__ Metal: _OBJC_CLASS_$_MTLRenderPipelineDescriptor
__ Metal: _OBJC_CLASS_$_MTLSamplerDescriptor
__ Metal: _OBJC_CLASS_$_MTLTextureDescriptor
__ MetalKit: _OBJC_CLASS_$_MTKTextureLoader
__ MetalKit: _OBJC_CLASS_$_MTKView
__ MetalKit: _OBJC_METACLASS_$_MTKView
__ MetalPerformanceShaders: _OBJC_CLASS_$_MPSImageBilinearScale
__ MetalPerformanceShaders: _OBJC_CLASS_$_MPSImageGaussianBlur
__ MetalPerformanceShaders: _OBJC_CLASS_$_MPSImageGuidedFilter
__ Photos: _OBJC_CLASS_$_PHAsset
__ Photos: _OBJC_CLASS_$_PHAssetChangeRequest
__ Photos: _OBJC_CLASS_$_PHAssetCollection
__ Photos: _OBJC_CLASS_$_PHAssetCollectionChangeRequest
__ Photos: _OBJC_CLASS_$_PHAssetCreationRequest
__ Photos: _OBJC_CLASS_$_PHAssetResourceCreationOptions
__ Photos: _OBJC_CLASS_$_PHContentEditingInputRequestOptions
__ Photos: _OBJC_CLASS_$_PHFetchOptions
__ Photos: _OBJC_CLASS_$_PHImageManager
__ Photos: _OBJC_CLASS_$_PHImageRequestOptions
__ Photos: _OBJC_CLASS_$_PHPhotoLibrary
__ Photos: _OBJC_CLASS_$_PHVideoRequestOptions
__ Photos: _PHContentEditingInputResultIsInCloudKey
__ Photos: _PHImageResultIsInCloudKey
__ PhotosUI: _OBJC_CLASS_$_PUReviewScreenDoneButton
__ PhotosUI: _OBJC_CLASS_$_PUReviewScreenUtilities
__ ProVideo: _CGAffineTransformFromPVAnimInfo
__ ProVideo: _CreatePVLPThrottlingControlParameters
__ ProVideo: _MakePVCameraFrameMetadata
__ ProVideo: _MakePVFaceDetection
__ ProVideo: _MakePVFaceDetectionFull
__ ProVideo: _NSStringFromPVCGPointQuad
__ ProVideo: _NSStringFromSIMDDouble4x4
__ ProVideo: _NSStringFromSIMDFloat3
__ ProVideo: _NSStringFromSIMDFloat4
__ ProVideo: _OBJC_CLASS_$_PVCMSampleBuffer
__ ProVideo: _OBJC_CLASS_$_PVColorSpace
__ ProVideo: _OBJC_CLASS_$_PVComputeGrabCut
__ ProVideo: _OBJC_CLASS_$_PVContentRegistry
__ ProVideo: _OBJC_CLASS_$_PVEffect
__ ProVideo: _OBJC_CLASS_$_PVEffectResources
__ ProVideo: _OBJC_CLASS_$_PVFrameSet
__ ProVideo: _OBJC_CLASS_$_PVHostApplicationDelegateHandler
__ ProVideo: _OBJC_CLASS_$_PVImageBuffer
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphEffectNode
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphGeneratorNode
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphImageBufferSourceNode
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphImageSourceNode
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphRectangleMaskNode
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphSourceCompositeNode
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphSourceTrackNode
__ ProVideo: _OBJC_CLASS_$_PVInstructionGraphTransformNode
__ ProVideo: _OBJC_CLASS_$_PVLivePlayer
__ ProVideo: _OBJC_CLASS_$_PVLivePlayerCARenderLink
__ ProVideo: _OBJC_CLASS_$_PVLivePlayerCameraRenderLink
__ ProVideo: _OBJC_CLASS_$_PVLivePlayerCameraSource
__ ProVideo: _OBJC_CLASS_$_PVLivePlayerImageSource
__ ProVideo: _OBJC_CLASS_$_PVLivePlayerThermalThrottlingPolicy
__ ProVideo: _OBJC_CLASS_$_PVMatrix44Double
__ ProVideo: _OBJC_CLASS_$_PVMultiBlendLayerParams
__ ProVideo: _OBJC_CLASS_$_PVRenderRequest
__ ProVideo: _OBJC_CLASS_$_PVRenderer
__ ProVideo: _OBJC_CLASS_$_PVTransformAnimation
__ ProVideo: _OBJC_CLASS_$_PVVideoCompositing
__ ProVideo: _OBJC_CLASS_$_PVVideoCompositingExporter
__ ProVideo: _OBJC_CLASS_$_PVVideoCompositionInstruction
__ ProVideo: _PVCGPointQuadZero
__ ProVideo: _PVTransformAnimationInfoForLiveCapture
__ ProVideo: _PVTransformAnimationInfoIdentity
__ ProVideo: _PVTransformAnimationInfoIsIdentity
__ ProVideo: _PVVideoCompositingContextGPURenderAPIKey
__ ProVideo: __Z17pv_simd_normalize14simd_double4x4
__ ProVideo: __Z18pv_bounding_CGRect13PVCGPointQuad
__ ProVideo: __Z19pv_simd_matrix_lerp13simd_float4x4S_fb
__ ProVideo: __Z20pv_CGRect_to_NSArray6CGRect
__ ProVideo: __Z20pv_simd_matrix_scale13simd_float4x4fff
__ ProVideo: __Z20pv_simd_matrix_scale14simd_double4x4ddd
__ ProVideo: __Z21pv_is_CGPoint_in_quad7CGPoint13PVCGPointQuad
__ ProVideo: __Z21pv_simd_matrix_rotate13simd_float4x4fDv3_f
__ ProVideo: __Z21pv_simd_matrix_rotate14simd_double4x4dDv3_d
__ ProVideo: __Z22pv_fov_from_intrinsics13simd_float3x3Dv2_f
__ ProVideo: __Z22pv_transform_info_make14simd_double4x4P15PVTransformInfo
__ ProVideo: __Z24PVCGPointQuad_to_NSArray13PVCGPointQuad
__ ProVideo: __Z25PVCGPointQuad_from_CGRect6CGRect
__ ProVideo: __Z26pv_CGPoint_get_quad_center13PVCGPointQuad
__ ProVideo: __Z28pv_projected_pixels_per_unitDv3_f13simd_float4x4S0_S0_Dv2_f6_PVNDCPf
__ ProVideo: __Z31pv_adjust_transform_orientation13simd_float4x423_PVInterfaceOrientationS0_20_PVRotationDirection
__ ProVideo: __Z31pv_focal_length_from_intrinsics13simd_float3x3
__ ProVideo: __Z31pv_simd_matrix_get_euler_angles13simd_float4x416_PVRotationOrderPDv3_f
__ ProVideo: __Z31pv_simd_matrix_make_perspective13simd_float3x3Dv2_fS0_23_PVInterfaceOrientationS1_20_PVRotationDirectionff6_PVNDC
__ ProVideo: __Z31pv_simd_matrix_make_perspectiveffff6_PVNDC
__ ProVideo: __Z31pv_simd_matrix_transform_vector14simd_double4x4Dv3_d
__ ProVideo: __Z32PVCGPointQuad_get_point_at_index13PVCGPointQuadj
__ ProVideo: __Z32PVCGPointQuad_set_point_at_indexP13PVCGPointQuad7CGPointj
__ ProVideo: __Z32pv_fov_for_focal_length_and_sidedd
__ ProVideo: __Z32pv_simd_matrix_make_orthographicffffff6_PVNDC
__ ProVideo: __Z33pv_simd_matrix_unproject_to_planeDv3_d7_PVAxis14simd_double4x4S1_S1_Dv2_d6_PVNDCbbPS_
__ ProVideo: __Z33pv_simd_matrix_unproject_to_planeDv3_f7_PVAxis13simd_float4x4S1_S1_Dv2_f6_PVNDCbbPS_
__ ProVideo: __Z34pv_principal_point_from_intrinsics13simd_float3x3
__ ProVideo: __Z34pv_resolution_from_principal_pointDv2_f
__ ProVideo: __Z34pv_simd_matrix_get_rotation_matrix13simd_float4x4
__ ProVideo: __Z35pv_simd_quaternion_get_euler_angles10simd_quatd16_PVRotationOrderPDv3_d
__ ProVideo: __Z40CGAffineTransformFromPointWithPVAnimInfo24PVTransformAnimationInfo7CGPoint
__ ProVideo: __Z40pv_simd_matrix_convert_coordinate_system14simd_double4x425_PVCoordinateSystemOriginDv2_dS0_S1_
__ ProVideo: __Z42pv_intrinsics_from_fov_side_and_resolutionffDv2_f
__ ProVideo: __Z51pv_intrinsics_from_focal_length_and_principal_pointDv2_fS_
__ ProVideo: __Z53pv_transform_PVCGPointQuad_between_coordinate_systems13PVCGPointQuad6CGSize25_PVCoordinateSystemOriginS0_S1_
__ ProVideo: __Z54pv_projected_screen_aligned_bounding_rect_around_pointDv3_fDv2_f13simd_float4x4S1_S1_S0_6_PVNDCbbPDv4_f
__ ProVideo: _kEffectID_Compositing_MultiBlend
__ ProVideo: _kEffectID_Effect_AgedFilmFC
__ ProVideo: _kEffectID_Effect_CamcorderFilterFC
__ ProVideo: _kEffectID_Effect_ComicTownA
__ ProVideo: _kEffectID_Effect_ComicTownB
__ ProVideo: _kEffectID_Effect_ComicTownC
__ ProVideo: _kEffectID_Effect_MoDreamy
__ ProVideo: _kEffectID_Effect_MoNone
__ ProVideo: _kEffectID_Effect_StyleTransferBlue
__ ProVideo: _kEffectID_Effect_StyleTransferBrown
__ ProVideo: _kEffectID_Effect_StyleTransferCharcoal
__ ProVideo: _kEffectID_Effect_StyleTransferWatercolor
__ ProVideo: _kEffectID_Effect_StyleTransferWatercolorMono
__ ProVideo: _kEffectID_Generator_SolidColor
__ ProVideo: _kEffectID_Overlay_100Percent
__ ProVideo: _kEffectID_Overlay_BasicArrow
__ ProVideo: _kEffectID_Overlay_BasicDate
__ ProVideo: _kEffectID_Overlay_BasicTime
__ ProVideo: _kEffectID_Overlay_BlueLabel
__ ProVideo: _kEffectID_Overlay_BoldType
__ ProVideo: _kEffectID_Overlay_BoldTypeAlt
__ ProVideo: _kEffectID_Overlay_Bubble
__ ProVideo: _kEffectID_Overlay_Check
__ ProVideo: _kEffectID_Overlay_Chill
__ ProVideo: _kEffectID_Overlay_ChineseNewYearOverlay
__ ProVideo: _kEffectID_Overlay_Circle
__ ProVideo: _kEffectID_Overlay_Comic
__ ProVideo: _kEffectID_Overlay_Doughnut
__ ProVideo: _kEffectID_Overlay_DrawnCursing
__ ProVideo: _kEffectID_Overlay_DrawnExclamationPoint
__ ProVideo: _kEffectID_Overlay_DrawnGears
__ ProVideo: _kEffectID_Overlay_DrawnHeart
__ ProVideo: _kEffectID_Overlay_DrawnLookHereSign
__ ProVideo: _kEffectID_Overlay_DrawnQuestionMark
__ ProVideo: _kEffectID_Overlay_DrawnScribble
__ ProVideo: _kEffectID_Overlay_Emoji
__ ProVideo: _kEffectID_Overlay_EmojiCollision
__ ProVideo: _kEffectID_Overlay_EmojiConfettiBall
__ ProVideo: _kEffectID_Overlay_EmojiDizzy
__ ProVideo: _kEffectID_Overlay_EmojiDrop
__ ProVideo: _kEffectID_Overlay_EmojiFire
__ ProVideo: _kEffectID_Overlay_EmojiGemStone
__ ProVideo: _kEffectID_Overlay_EmojiHeart
__ ProVideo: _kEffectID_Overlay_EmojiHeartWithArrow
__ ProVideo: _kEffectID_Overlay_EmojiHighVoltage
__ ProVideo: _kEffectID_Overlay_EmojiLightBulb
__ ProVideo: _kEffectID_Overlay_EmojiMoneyWithWings
__ ProVideo: _kEffectID_Overlay_EmojiMusicalNote
__ ProVideo: _kEffectID_Overlay_EmojiPartyPopper
__ ProVideo: _kEffectID_Overlay_EmojiRainbow
__ ProVideo: _kEffectID_Overlay_EmojiRevolvingHearts
__ ProVideo: _kEffectID_Overlay_EmojiSparkles
__ ProVideo: _kEffectID_Overlay_EmojiStar
__ ProVideo: _kEffectID_Overlay_EmojiThoughtCloud
__ ProVideo: _kEffectID_Overlay_EmojiZzz
__ ProVideo: _kEffectID_Overlay_FCArrowShapes
__ ProVideo: _kEffectID_Overlay_FCArrowShapes1
__ ProVideo: _kEffectID_Overlay_FCArrowShapes2
__ ProVideo: _kEffectID_Overlay_FCBurstShapes
__ ProVideo: _kEffectID_Overlay_FCBurstShapes1
__ ProVideo: _kEffectID_Overlay_FCBurstShapes2
__ ProVideo: _kEffectID_Overlay_FCCircleShapes
__ ProVideo: _kEffectID_Overlay_FCDoubleArrowShapes
__ ProVideo: _kEffectID_Overlay_FCDoubleArrowShapes1
__ ProVideo: _kEffectID_Overlay_FCDoubleArrowShapes2
__ ProVideo: _kEffectID_Overlay_FCSpeechBubble
__ ProVideo: _kEffectID_Overlay_FCThoughtBubble
__ ProVideo: _kEffectID_Overlay_FunLabel
__ ProVideo: _kEffectID_Overlay_FunSticker
__ ProVideo: _kEffectID_Overlay_FunThought
__ ProVideo: _kEffectID_Overlay_GenericTemplate
__ ProVideo: _kEffectID_Overlay_Handwritten
__ ProVideo: _kEffectID_Overlay_HandwrittenComicLabel
__ ProVideo: _kEffectID_Overlay_HeartSticker
__ ProVideo: _kEffectID_Overlay_Label
__ ProVideo: _kEffectID_Overlay_Location
__ ProVideo: _kEffectID_Overlay_NewsDate
__ ProVideo: _kEffectID_Overlay_NewsLabel
__ ProVideo: _kEffectID_Overlay_NewsLocator
__ ProVideo: _kEffectID_Overlay_NewsStyle
__ ProVideo: _kEffectID_Overlay_NewsTime
__ ProVideo: _kEffectID_Overlay_RedTextLabel
__ ProVideo: _kEffectID_Overlay_SimpleArrow
__ ProVideo: _kEffectID_Overlay_SpeechBubble
__ ProVideo: _kEffectID_Overlay_Square
__ ProVideo: _kEffectID_Overlay_Temp
__ ProVideo: _kEffectID_Overlay_TextArrow
__ ProVideo: _kEffectID_Overlay_ThirdPartyOne
__ ProVideo: _kEffectID_Overlay_ThirdPartyTwo
__ ProVideo: _kEffectID_Overlay_Time
__ ProVideo: _kEffectID_Overlay_X
__ ProVideo: _kEffectID_Overlay_YellowTextLabel
__ ProVideo: _kEffectID_TitleCard_FallPoster
__ ProVideo: _kEffectID_TitleCard_Flamingos
__ ProVideo: _kEffectID_TitleCard_GameOver
__ ProVideo: _kEffectID_TitleCard_Gold
__ ProVideo: _kEffectID_TitleCard_SimplePink
__ ProVideo: _kEffectID_TitleCard_SimplePurple
__ ProVideo: _kEffectID_Title_MoNone
__ ProVideo: _kEffectID_Transition_MoCrossDissolve
__ ProVideo: _kFFEffectType_VideoFilter
__ ProVideo: _kFFEffectType_VideoGenerator
__ ProVideo: _kFFEffectType_VideoTitle
__ ProVideo: _kPVARSelfieEffectDistance
__ ProVideo: _kPVCameraEnabledKey
__ ProVideo: _kPVCameraFrameMetadataKey
__ ProVideo: _kPVCameraProjectionKey
__ ProVideo: _kPVCameraTransformKey
__ ProVideo: _kPVCrossDissolveRampKey
__ ProVideo: _kPVDisableAnimatedLayerKey
__ ProVideo: _kPVDisablePosterLayerKey
__ ProVideo: _kPVEffectHDR_OSFA_ToneMappingOption
__ ProVideo: _kPVEffectNeedsHDR_OSFA_ToneMapping
__ ProVideo: _kPVEffectStillImageInverseToneMapOperator
__ ProVideo: _kPVEnableLoopedRangeRenderCaching
__ ProVideo: _kPVEnablePosterFrameCaching
__ ProVideo: _kPVEnableTextDynamicLineSpacing_MainTitle
__ ProVideo: _kPVFaceMetadataArrayKey
__ ProVideo: _kPVFlipTextKey
__ ProVideo: _kPVHiddenKey
__ ProVideo: _kPVImageSequencePathKey
__ ProVideo: _kPVMultiBlendEffectParamsKey
__ ProVideo: _kPVOrientationKey
__ ProVideo: _kPVOutputAspectKey
__ ProVideo: _kPVParentTransformAnimationKey
__ ProVideo: _kPVPlayableAspectRatioKey
__ ProVideo: _kPVPlayableAspectRatioPreservationModeKey
__ ProVideo: _kPVRenderAtPosterTimeKey
__ ProVideo: _kPVRenderStartOffset
__ ProVideo: _kPVRendererBase_OutputColorSpace
__ ProVideo: _kPVRendererPoolDestinationBuffers
__ ProVideo: _kPVStickerPathKey
__ ProVideo: _kPVStyleTransferQualityLevel
__ ProVideo: _kPVTextOneLineScaleThreshold_MainTitle
__ ProVideo: _kPVTextRenderingDisabled
__ ProVideo: _kPVTitleEffect_BackgroundColorKey
__ ProVideo: _kPVTitleEffect_BuildInKey
__ ProVideo: _kPVTitleEffect_ForceDisableBackgroundShape
__ ProVideo: _kPVTitleEffect_ForceDisableLoop
__ ProVideo: _kPVTitleEffect_MainTitleFontName
__ ProVideo: _kPVTitleEffect_MainTitleFontScale
__ ProVideo: _kPVTitleEffect_MainTitleFontSize
__ ProVideo: _kPVTitleEffect_MainTitleStringKey
__ ProVideo: _kPVTitleEffect_SubTitleFontName
__ ProVideo: _kPVTitleEffect_SubTitleFontScale
__ ProVideo: _kPVTitleEffect_SubTitleFontSize
__ ProVideo: _kPVTitleEffect_SubTitleStringKey
__ ProVideo: _kPVTopLevelAdditionalScaleKey
__ ProVideo: _kPVTopLevelOpacityKey
__ ProVideo: _kPVTopLevelTransformKey
__ ProVideo: _kPVTransformAnimationKey
__ ProVideo: _kPVTransformKey
__ ProVideo: _kPVVideoCompositingTooManyLiveCompositorsWarning
__ ProVideo: _kPVVideoCompositingTooManyLiveCompositorsWarning_LiveCount
__ ProVideo: _kPVVideoCompositingTooManyLiveCompositorsWarning_MaxExpected
__ ProVideo: _pv_transform_info_identity
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _CATransform3DConcat
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DInvert
__ QuartzCore: _CATransform3DMakeScale
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAKeyframeAnimation
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _OBJC_CLASS_$_CASpringAnimation
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_CLASS_$_CATransformLayer
__ QuartzCore: _OBJC_METACLASS_$_CALayer
__ QuartzCore: _kCAFillModeBoth
__ QuartzCore: _kCAFillModeForwards
__ QuartzCore: _kCAFillRuleEvenOdd
__ QuartzCore: _kCALineCapRound
__ QuartzCore: _kCAMediaTimingFunctionEaseInEaseOut
__ SceneKit: _OBJC_CLASS_$_SCNTransaction
__ UIKit: _CGPointFromString
__ UIKit: _NSBaselineOffsetAttributeName
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSParagraphStyleAttributeName
__ UIKit: _NSShadowAttributeName
__ UIKit: _NSStringFromCGAffineTransform
__ UIKit: _NSStringFromCGPoint
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _NSStrokeWidthAttributeName
__ UIKit: _OBJC_CLASS_$_NSMutableParagraphStyle
__ UIKit: _OBJC_CLASS_$_NSShadow
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UICollectionView
__ UIKit: _OBJC_CLASS_$_UICollectionViewCell
__ UIKit: _OBJC_CLASS_$_UICollectionViewFlowLayout
__ UIKit: _OBJC_CLASS_$_UICollectionViewFlowLayoutInvalidationContext
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UICubicTimingParameters
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRendererFormat
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIIndirectScribbleInteraction
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UINib
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPasteboard
__ UIKit: _OBJC_CLASS_$_UIPinchGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIRotationGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UISelectionFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UISpringTimingParameters
__ UIKit: _OBJC_CLASS_$_UIStoryboard
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITextView
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$__UIButtonFeedbackGenerator
__ UIKit: _OBJC_CLASS_$__UIButtonFeedbackGeneratorConfiguration
__ UIKit: _OBJC_CLASS_$__UIDiscreteFeedback
__ UIKit: _OBJC_METACLASS_$_UICollectionView
__ UIKit: _OBJC_METACLASS_$_UICollectionViewCell
__ UIKit: _OBJC_METACLASS_$_UICollectionViewFlowLayout
__ UIKit: _OBJC_METACLASS_$_UIImageView
__ UIKit: _OBJC_METACLASS_$_UITextView
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _UIAccessibilityTraitButton
__ UIKit: _UIAnimationDragCoefficient
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidChangeStatusBarOrientationNotification
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIApplicationDidReceiveMemoryWarningNotification
__ UIKit: _UIApplicationWillEnterForegroundNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontSystemFontDesignAlternate
__ UIKit: _UIFontWeightRegular
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIImageJPEGRepresentation
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIKeyboardDidHideNotification
__ UIKit: _UINavigationControllerHideShowBarDuration
__ UIKit: _UIRectGetCenter
__ UIKit: _UIViewNoIntrinsicMetric
__ VideoProcessing: _OBJC_CLASS_$_VCPCaptureAnalysisSession
__ VideoProcessing: _VCPCaptureAnalysisFaceAnchorResultKey
__ VideoProcessing: _VCPCaptureAnalysisFaceBoundsPropertyKey
__ VideoProcessing: _VCPCaptureAnalysisFaceRollAnglesPropertyKey
__ VideoProcessing: _VCPCaptureAnalysisFocalLengthInPixelsPropertyKey
__ VideoToolbox: _VTCompressionSessionCompleteFrames
__ VideoToolbox: _VTCompressionSessionCreate
__ VideoToolbox: _VTCompressionSessionEncodeFrame
__ VideoToolbox: _VTDecompressionSessionCreate
__ VideoToolbox: _VTDecompressionSessionDecodeFrame
__ VideoToolbox: _VTDecompressionSessionFinishDelayedFrames
__ VideoToolbox: _VTImageRotationSessionCreate
__ VideoToolbox: _VTImageRotationSessionInvalidate
__ VideoToolbox: _VTImageRotationSessionTransferImage
__ VideoToolbox: _VTPixelTransferSessionCreate
__ VideoToolbox: _VTPixelTransferSessionInvalidate
__ VideoToolbox: _VTPixelTransferSessionTransferImage
__ VideoToolbox: _VTSessionSetProperty
__ VideoToolbox: _kVTCompressionPropertyKey_AllowFrameReordering
__ VideoToolbox: _kVTCompressionPropertyKey_ExpectedFrameRate
__ VideoToolbox: _kVTCompressionPropertyKey_HDRMetadataInsertionMode
__ VideoToolbox: _kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration
__ VideoToolbox: _kVTCompressionPropertyKey_PreserveDynamicHDRMetadata
__ VideoToolbox: _kVTCompressionPropertyKey_ProfileLevel
__ VideoToolbox: _kVTCompressionPropertyKey_Quality
__ VideoToolbox: _kVTCompressionPropertyKey_RealTime
__ VideoToolbox: _kVTCompressionPropertyKey_Usage
__ VideoToolbox: _kVTEncodeFrameOptionKey_ForceKeyFrame
__ VideoToolbox: _kVTHDRMetadataInsertionMode_Auto
__ VideoToolbox: _kVTImageRotationPropertyKey_EnableHighSpeedTransfer
__ VideoToolbox: _kVTImageRotationPropertyKey_FlipHorizontalOrientation
__ VideoToolbox: _kVTProfileLevel_H264_Baseline_AutoLevel
__ VideoToolbox: _kVTProfileLevel_H264_High422_AutoLevel
__ VideoToolbox: _kVTProfileLevel_H264_High444Predictive_AutoLevel
__ VideoToolbox: _kVTProfileLevel_H264_High_AutoLevel
__ VideoToolbox: _kVTProfileLevel_H264_Main_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Main10_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Main44410_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Main444_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_MainStill_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Main_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Monochrome10_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Monochrome_AutoLevel
__ VideoToolbox: _kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder
__ VideoToolbox: _kVTVideoEncoderSpecification_RequireHardwareAcceleratedVideoEncoder
__ iMessageApps: _OBJC_CLASS_$_IMADockViewController
__ iMessageApps: _OBJC_CLASS_$_IMASticker
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_disabled
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _acos
__ libSystem.B.dylib: _atan
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_apply
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_async_f
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_get_label
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _log10f
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _matrix_identity_double4x4
__ libSystem.B.dylib: _matrix_identity_float4x4
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_proc_available_memory
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _posix_memalign
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _uname
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt11logic_errorC2ERKS_
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt13exception_ptrC1ERKS_
__ libc++.1.dylib: __ZNSt13exception_ptrD1Ev
__ libc++.1.dylib: __ZNSt3__112future_errorC1ENS_10error_codeE
__ libc++.1.dylib: __ZNSt3__112future_errorD1Ev
__ libc++.1.dylib: __ZNSt3__114__shared_countD2Ev
__ libc++.1.dylib: __ZNSt3__115future_categoryEv
__ libc++.1.dylib: __ZNSt3__117__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE
__ libc++.1.dylib: __ZNSt3__117__assoc_sub_state13set_exceptionESt13exception_ptr
__ libc++.1.dylib: __ZNSt3__117__assoc_sub_state9__executeEv
__ libc++.1.dylib: __ZNSt3__118condition_variable10notify_allEv
__ libc++.1.dylib: __ZNSt3__118condition_variableD1Ev
__ libc++.1.dylib: __ZNSt3__15mutex4lockEv
__ libc++.1.dylib: __ZNSt3__15mutex6unlockEv
__ libc++.1.dylib: __ZNSt3__15mutexD1Ev
__ libc++.1.dylib: __ZSt17current_exceptionv
__ libc++.1.dylib: __ZSt17rethrow_exceptionSt13exception_ptr
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTINSt3__112future_errorE
__ libc++.1.dylib: __ZTINSt3__117__assoc_sub_stateE
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVNSt3__112future_errorE
__ libc++.1.dylib: __ZTVNSt3__117__assoc_sub_stateE
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
CFXReviewViewController : UIViewController <CFXPreviewViewControllerDelegate, CFXEffectBrowserContentPresenterViewControllerDelegate, CFXEffectBrowserViewControllerDelegate>
 @property  CFXEffectBrowserViewController *effectBrowserViewController
 @property  CFXPreviewViewController *internalPreviewViewController
 @property  CFXReviewControlsViewController *reviewControlsViewController
 @property  NSString *effectBrowserPresentedAppIdentifier
 @property  CFXMediaItem *mediaItem
 @property  NSObject<OS_dispatch_group> *metadataReaderGroup
 @property  BOOL mediaCapturedInFunCam
 @property  BOOL mediaCapturedInFunCam_metadata
 @property  long long mediaCaptureDevicePosition
 @property  long long mediaInterfaceOrientationForDisplay_metadata
 @property  NSData *animojiMetadata
 @property  NSData *animojiMetadata_metadata
 @property  long long cameraModeUsedForCapture
 @property  NSData *adjustmentsData
 @property  <CFXReviewViewControllerDelegate> *delegate
 @property  UIView *effectsPickerDrawer
 @property  BOOL mediaItemRequiresExport
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXReviewViewController initialize]

  // instance methods
  -[CFXReviewViewController .cxx_destruct]
  -[CFXReviewViewController viewDidLoad]
  -[CFXReviewViewController setDelegate:]
  -[CFXReviewViewController viewDidAppear:]
  -[CFXReviewViewController setMediaItem:]
  -[CFXReviewViewController adjustmentsData]
  -[CFXReviewViewController viewDidLayoutSubviews]
  -[CFXReviewViewController mediaItem]
  -[CFXReviewViewController delegate]
  -[CFXReviewViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[CFXReviewViewController loadView]
  -[CFXReviewViewController initWithMediaItem:]
  -[CFXReviewViewController setEffectsPickerDrawer:]
  -[CFXReviewViewController exportMediaItemToFileURL:]
  -[CFXReviewViewController effectBrowserViewController:didSelectAppWithIdentifier:]
  -[CFXReviewViewController effectBrowserViewController:didSelectEffect:]
  -[CFXReviewViewController effectBrowserViewController:willChangeDockHeight:]
  -[CFXReviewViewController shouldAlwaysPresentExpandedAppsForEffectBrowserViewController:]
  -[CFXReviewViewController CFX_resetAndLoadPreviewViewController]
  -[CFXReviewViewController internalPreviewViewController]
  -[CFXReviewViewController effectsPickerDrawer]
  -[CFXReviewViewController effectBrowserViewController]
  -[CFXReviewViewController setEffectBrowserViewController:]
  -[CFXReviewViewController metadataReaderGroup]
  -[CFXReviewViewController mediaCapturedInFunCam_metadata]
  -[CFXReviewViewController mediaInterfaceOrientationForDisplay_metadata]
  -[CFXReviewViewController animojiMetadata_metadata]
  -[CFXReviewViewController mediaCapturedInFunCam]
  -[CFXReviewViewController effectBrowserPresentedAppIdentifier]
  -[CFXReviewViewController setEffectBrowserPresentedAppIdentifier:]
  -[CFXReviewViewController CFX_updateAnalyticsForSentMediaItem:]
  -[CFXReviewViewController preferredDisplayColorSpace]
  -[CFXReviewViewController setInternalPreviewViewController:]
  -[CFXReviewViewController mediaCaptureDevicePosition]
  -[CFXReviewViewController preferredExportColorSpace]
  -[CFXReviewViewController previewViewController:didFinishExportingMediaItem:withError:]
  -[CFXReviewViewController previewViewController:didProgress:exportingMediaItem:]
  -[CFXReviewViewController previewViewController:didStartExportingMediaItem:]
  -[CFXReviewViewController previewViewControllerDidHideUserInterface:]
  -[CFXReviewViewController previewViewControllerDidShowUserInterface:]
  -[CFXReviewViewController previewViewControllerDidStartEditingText:]
  -[CFXReviewViewController previewViewControllerDidStopEditingText:]
  -[CFXReviewViewController selectedAppIdentifierForPreviewViewController:]
  -[CFXReviewViewController cameraModeUsedForCapture]
  -[CFXReviewViewController calculateMediaInterfaceOrientationForDisplay]
  -[CFXReviewViewController animojiMetadata]
  -[CFXReviewViewController effectBrowserViewController:screenTopBarHeightForWindowBounds:orientation:]
  -[CFXReviewViewController effectBrowserViewController:didDropOverlayEffect:atScreenLocation:atScreenSize:rotationAngle:]
  -[CFXReviewViewController effectBrowserViewController:didRemoveAllEffectsOfType:]
  -[CFXReviewViewController effectBrowserViewController:filterPickerPreviewBackgroundImageAtSizeInPixels:completion:]
  -[CFXReviewViewController selectedFilterIdentifierForEffectBrowserViewController:]
  -[CFXReviewViewController selectedAnimojiIdentifierForEffectBrowserViewController:]
  -[CFXReviewViewController localizedPromptForHidingAnimojiForEffectBrowserViewController:]
  -[CFXReviewViewController allowLandscapeForEffectBrowserViewController:]
  -[CFXReviewViewController effectBrowserViewController:didDismissPickerForEffectType:]
  -[CFXReviewViewController effectBrowserViewController:didPresentPickerForEffectType:]
  -[CFXReviewViewController mediaItemForEffectBrowserViewController:]
  -[CFXReviewViewController mediaItemRequiresExport]
  -[CFXReviewViewController reviewControlsViewController]
  -[CFXReviewViewController setReviewControlsViewController:]
  -[CFXReviewViewController setMetadataReaderGroup:]
  -[CFXReviewViewController setMediaCapturedInFunCam_metadata:]
  -[CFXReviewViewController setMediaInterfaceOrientationForDisplay_metadata:]
  -[CFXReviewViewController setAnimojiMetadata_metadata:]
  -[CFXReviewViewController setCameraModeUsedForCapture:]


JFXCameraFPSThermalPolicy : NSObject <JFXThermalPolicy, JFXVideoCameraThermalDelegate>
 @property  unsigned long priority
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXCameraFPSThermalPolicy priority]
  -[JFXCameraFPSThermalPolicy cameraFPSForThermalLevel:deviceType:minRate:maxRate:]


JFXAVMediaVideoTrackReaderSample : NSObject <JFXMediaVideoTrackReaderSample>
 @property  ^{opaqueCMSampleBuffer=} sampleBufferRef
 @property  {?=qiIq} duration
 @property  {?=qiIq} presentationTimeStamp
 @property  {?={?=qiIq}{?=qiIq}} timeRange

  // instance methods
  -[JFXAVMediaVideoTrackReaderSample timeRange]
  -[JFXAVMediaVideoTrackReaderSample presentationTimeStamp]
  -[JFXAVMediaVideoTrackReaderSample dealloc]
  -[JFXAVMediaVideoTrackReaderSample initWithSampleBuffer:]
  -[JFXAVMediaVideoTrackReaderSample duration]
  -[JFXAVMediaVideoTrackReaderSample initWithSampleBuffer:duration:]
  -[JFXAVMediaVideoTrackReaderSample sampleBufferRef]


JFXAVMediaVideoTrackReader : JFXAVMediaDataReader <JFXMediaVideoTrackReader>
 @property  JFXAVMediaVideoTrackReaderSample *currentSample
 @property  JFXAVMediaVideoTrackReaderSample *nextSample
 @property  {?={?=qiIq}{?=qiIq}} readableTimeRange
 @property  BOOL isScrubbing
 @property  long long status
 @property  NSError *error
 @property  unsigned long signPostID
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXAVMediaVideoTrackReader setCurrentSample:]
  -[JFXAVMediaVideoTrackReader .cxx_destruct]
  -[JFXAVMediaVideoTrackReader currentSample]
  -[JFXAVMediaVideoTrackReader setNextSample:]
  -[JFXAVMediaVideoTrackReader JFX_preloadData]
  -[JFXAVMediaVideoTrackReader nextSample]
  -[JFXAVMediaVideoTrackReader JFX_updateCurrentSampleDurationIfNeeded]
  -[JFXAVMediaVideoTrackReader videoSampleForTime:]
  -[JFXAVMediaVideoTrackReader createAssetReaderTrackOutput]
  -[JFXAVMediaVideoTrackReader didUpdateReadingRange]
  -[JFXAVMediaVideoTrackReader readAheadToTime:]
  -[JFXAVMediaVideoTrackReader readAndDiscardRemainingAvailableData]
  -[JFXAVMediaVideoTrackReader hasRemainingAvailableData]
  -[JFXAVMediaVideoTrackReader startTimeOfCurrentData]


CFXAnimationDelegate : NSObject <CAAnimationDelegate>
 @property  @? completion
 @property  @? start
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXAnimationDelegate completion]
  -[CFXAnimationDelegate setCompletion:]
  -[CFXAnimationDelegate .cxx_destruct]
  -[CFXAnimationDelegate setStart:]
  -[CFXAnimationDelegate animationDidStop:finished:]
  -[CFXAnimationDelegate animationDidStart:]
  -[CFXAnimationDelegate start]


CFXAnimationHelper : NSObject
  // class methods
  +[CFXAnimationHelper _animationWithKeyPath:]
  +[CFXAnimationHelper animateLayer:toFrame:fromCurrentState:]
  +[CFXAnimationHelper configurePowerSensitiveAnimation:]
  +[CFXAnimationHelper animateLayer:forButtonHighlighted:layoutStyle:]
  +[CFXAnimationHelper _highlightScaleForLayoutStyle:]


CFXViewfinderFlipTransition : NSObject
 @property  UIView *viewfinderView
 @property  CAMSnapshotView *_frontSnapshotView
 @property  CAMSnapshotView *_backSnapshotView
 @property  CAMSnapshotView *_targetSnapshotView
 @property  unsigned long _currentAnimationID

  // instance methods
  -[CFXViewfinderFlipTransition viewfinderView]
  -[CFXViewfinderFlipTransition .cxx_destruct]
  -[CFXViewfinderFlipTransition _setTargetSnapshotView:]
  -[CFXViewfinderFlipTransition _setFrontSnapshotView:]
  -[CFXViewfinderFlipTransition _frontSnapshotTargetRadiansForDirection:fromRadians:]
  -[CFXViewfinderFlipTransition performFlipTransitionWithDirection:completionHandler:]
  -[CFXViewfinderFlipTransition _backSnapshotTargetRadiansForDirection:frontSnapshotRadians:]
  -[CFXViewfinderFlipTransition _targetSnapshotView]
  -[CFXViewfinderFlipTransition _backSnapshotView]
  -[CFXViewfinderFlipTransition _setCurrentAnimationID:]
  -[CFXViewfinderFlipTransition _getCurrentRadians:targetRadians:forDirection:withAnimation:onFrontSnapshotLayer:]
  -[CFXViewfinderFlipTransition _snapshotFlipAnimationFromValue:toValue:]
  -[CFXViewfinderFlipTransition completeTransitionToLivePreviewWithCompletionHandler:]
  -[CFXViewfinderFlipTransition _setBackSnapshotView:]
  -[CFXViewfinderFlipTransition _cleanupFromFlipTransition]
  -[CFXViewfinderFlipTransition _currentAnimationID]
  -[CFXViewfinderFlipTransition _frontSnapshotView]
  -[CFXViewfinderFlipTransition setViewfinderView:]
  -[CFXViewfinderFlipTransition initWithViewfinderView:]


CFXFilterEffectPickerView : CFXEffectPickerView
 @property  UIView *contentView
 @property  JTCollectionView *collectionView
 @property  JTCollectionViewFlowLayout *collectionViewLayout
 @property  UIView *compactSelectionView
 @property  UILabel *compactSelectedTitleView
 @property  unsigned long cachedEffectCount
 @property  BOOL displayExpandedLayout
 @property  {CGSize=dd} lastViewSize
 @property  UISelectionFeedbackGenerator *selectionFeedbackGenerator
 @property  NSIndexPath *lastScrollIndexPath
 @property  {CGPoint=dd} previousScrollOffset
 @property  <CFXFilterEffectPickerViewDataSource> *dataSource
 @property  <CFXFilterEffectPickerViewDelegate> *delegate

  // instance methods
  -[CFXFilterEffectPickerView selectedIndex]
  -[CFXFilterEffectPickerView setSelectionFeedbackGenerator:]
  -[CFXFilterEffectPickerView setDataSource:]
  -[CFXFilterEffectPickerView selectionFeedbackGenerator]
  -[CFXFilterEffectPickerView .cxx_destruct]
  -[CFXFilterEffectPickerView collectionViewLayout]
  -[CFXFilterEffectPickerView layoutSubviews]
  -[CFXFilterEffectPickerView contentView]
  -[CFXFilterEffectPickerView setDelegate:]
  -[CFXFilterEffectPickerView scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[CFXFilterEffectPickerView dataSource]
  -[CFXFilterEffectPickerView collectionView]
  -[CFXFilterEffectPickerView scrollViewDidEndDragging:willDecelerate:]
  -[CFXFilterEffectPickerView setCollectionView:]
  -[CFXFilterEffectPickerView setCollectionViewLayout:]
  -[CFXFilterEffectPickerView scrollViewWillBeginDragging:]
  -[CFXFilterEffectPickerView delegate]
  -[CFXFilterEffectPickerView reloadData]
  -[CFXFilterEffectPickerView setContentView:]
  -[CFXFilterEffectPickerView scrollViewDidEndDecelerating:]
  -[CFXFilterEffectPickerView didScrollCollectionView]
  -[CFXFilterEffectPickerView configureCell:]
  -[CFXFilterEffectPickerView isDisplayingExpandedLayout]
  -[CFXFilterEffectPickerView isDisplayingCompactLayout]
  -[CFXFilterEffectPickerView subviewsDidLoad]
  -[CFXFilterEffectPickerView buildCompactSelectionViews]
  -[CFXFilterEffectPickerView removeCompactSelectionViews]
  -[CFXFilterEffectPickerView setCompactSelectionView:]
  -[CFXFilterEffectPickerView compactSelectionView]
  -[CFXFilterEffectPickerView setCompactSelectedTitleView:]
  -[CFXFilterEffectPickerView compactSelectedTitleView]
  -[CFXFilterEffectPickerView lastViewSize]
  -[CFXFilterEffectPickerView setLastViewSize:]
  -[CFXFilterEffectPickerView setDisplayExpandedLayout:]
  -[CFXFilterEffectPickerView CFX_selectInitialItem]
  -[CFXFilterEffectPickerView configureCollectionViewLayout]
  -[CFXFilterEffectPickerView setCachedEffectCount:]
  -[CFXFilterEffectPickerView updatePreviewEffectsWhenReloadComplete]
  -[CFXFilterEffectPickerView indexPathForCenterOfCollectionView]
  -[CFXFilterEffectPickerView setLastScrollIndexPath:]
  -[CFXFilterEffectPickerView setPreviousScrollOffset:]
  -[CFXFilterEffectPickerView layoutAttributesForNearestItemToCenterWithOffset:]
  -[CFXFilterEffectPickerView lastScrollIndexPath]
  -[CFXFilterEffectPickerView previousScrollOffset]
  -[CFXFilterEffectPickerView CFX_updateTitleForCenterItemAtIndex:]
  -[CFXFilterEffectPickerView selectCenterItem]
  -[CFXFilterEffectPickerView CFX_selectItemAtCellIndex:animated:]
  -[CFXFilterEffectPickerView effectPickerNibName]
  -[CFXFilterEffectPickerView effectPickerCellNibName]
  -[CFXFilterEffectPickerView effectPickerCellReuseIdentifier]
  -[CFXFilterEffectPickerView didSelectItemAtCellIndex:]
  -[CFXFilterEffectPickerView selectEffectWithIdentifier:]
  -[CFXFilterEffectPickerView orientationDidChange]
  -[CFXFilterEffectPickerView cachedEffectCount]


JFXFaceTrackingPlaybackProperties : NSObject
 @property  BOOL canTrackFace
 @property  JFXFaceTrackedEffectTransform *faceTrackingTransform
 @property  {?={?=qiIq}{?=qiIq}} mediaTimeRange
 @property  JFXARMetadata *arMetadata
 @property  long long mediaInterfaceOrientationForDisplay

  // instance methods
  -[JFXFaceTrackingPlaybackProperties .cxx_destruct]
  -[JFXFaceTrackingPlaybackProperties mediaTimeRange]
  -[JFXFaceTrackingPlaybackProperties canTrackFace]
  -[JFXFaceTrackingPlaybackProperties mediaInterfaceOrientationForDisplay]
  -[JFXFaceTrackingPlaybackProperties initWithNonFaceTrackableMediaTimeRange:]
  -[JFXFaceTrackingPlaybackProperties initWithFaceTrackableMediaTimeRange:forDisplayingMediaAtInterfaceOrientation:faceTrackingTransform:arMetadata:]
  -[JFXFaceTrackingPlaybackProperties containsMediaTime:forDisplayingMediaAtInterfaceOrientation:]
  -[JFXFaceTrackingPlaybackProperties faceTrackingTransform]
  -[JFXFaceTrackingPlaybackProperties arMetadata]


JFXFaceTrackingPlaybackDelegate : NSObject <PVEffectTimedPropertiesDelegate>
 @property  NSObject<OS_dispatch_queue> *mediaDataReaderUpdateQueue
 @property  JFXARMetadataMediaReader *arMetadataReader
 @property  JFXSharedMediaDataReaderManager *sharedMediaDataReaderManager
 @property  <JFXPlayableElement> *playableElement
 @property  {CGSize=dd} outputSize
 @property  NSObject<OS_dispatch_queue> *cachedFaceTrackingPropertiesQueue
 @property  JFXFaceTrackingPlaybackProperties *cachedFaceTrackingProperties
 @property  {?=qiIq} playbackElementPlaybackPresentationOffset
 @property  {?={?=qiIq}{?=qiIq}} playbackElementPlaybackMediaRange
 @property  BOOL isScrubbing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXFaceTrackingPlaybackDelegate isScrubbing]
  -[JFXFaceTrackingPlaybackDelegate setIsScrubbing:]
  -[JFXFaceTrackingPlaybackDelegate .cxx_destruct]
  -[JFXFaceTrackingPlaybackDelegate outputSize]
  -[JFXFaceTrackingPlaybackDelegate JFX_initMetadataReadingProperties]
  -[JFXFaceTrackingPlaybackDelegate JFX_initFaceTrackingCachingProperties]
  -[JFXFaceTrackingPlaybackDelegate cachedFaceTrackingPropertiesQueue]
  -[JFXFaceTrackingPlaybackDelegate cachedFaceTrackingProperties]
  -[JFXFaceTrackingPlaybackDelegate setCachedFaceTrackingProperties:]
  -[JFXFaceTrackingPlaybackDelegate playableElement]
  -[JFXFaceTrackingPlaybackDelegate mediaDataReaderUpdateQueue]
  -[JFXFaceTrackingPlaybackDelegate arMetadataReader]
  -[JFXFaceTrackingPlaybackDelegate sharedMediaDataReaderManager]
  -[JFXFaceTrackingPlaybackDelegate playbackElementPlaybackMediaRange]
  -[JFXFaceTrackingPlaybackDelegate setArMetadataReader:]
  -[JFXFaceTrackingPlaybackDelegate playbackElementPlaybackPresentationOffset]
  -[JFXFaceTrackingPlaybackDelegate JFX_loadMediaDataReaders]
  -[JFXFaceTrackingPlaybackDelegate JFX_unloadMediaDataReaders]
  -[JFXFaceTrackingPlaybackDelegate faceTrackingTransformAtTime:forDisplayingMediaAtInterfaceOrientation:]
  -[JFXFaceTrackingPlaybackDelegate JFX_setMediaDataReaderScrubbingMode:]
  -[JFXFaceTrackingPlaybackDelegate JFX_faceTrackingPlaybackPropertiesAtTime:forDisplayingMediaAtInterfaceOrientation:]
  -[JFXFaceTrackingPlaybackDelegate jfx_mediaTimeFromPlaybackTime:]
  -[JFXFaceTrackingPlaybackDelegate JFX_cachedFaceTrackingPropertiesForMediaTime:forDisplayingMediaAtInterfaceOrientation:]
  -[JFXFaceTrackingPlaybackDelegate JFX_arMetadataForMediaTime:foundTimeRange:]
  -[JFXFaceTrackingPlaybackDelegate JFX_cacheFaceTrackingProperties:]
  -[JFXFaceTrackingPlaybackDelegate supportedTimedPropertyGroupsForEffect:]
  -[JFXFaceTrackingPlaybackDelegate effect:timedPropertiesForGroup:time:userContext:]
  -[JFXFaceTrackingPlaybackDelegate effect:willStartRequestingTimedProperties:]
  -[JFXFaceTrackingPlaybackDelegate effect:didStopRequestingTimedProperties:]
  -[JFXFaceTrackingPlaybackDelegate initWithPlayableElement:sharedMediaDataReaderManager:outputSize:]
  -[JFXFaceTrackingPlaybackDelegate arDataAtTime:forDisplayingMediaAtInterfaceOrientation:]


JFXCVASegMattingRequest : NSObject
 @property  @? completionHandler

  // instance methods
  -[JFXCVASegMattingRequest .cxx_destruct]
  -[JFXCVASegMattingRequest setCompletionHandler:]
  -[JFXCVASegMattingRequest completionHandler]


JFXCVASegMatting_SPI : JFXMatting
  // class methods
  +[JFXCVASegMatting_SPI segmentationOptionsForDepth:rotColor:pts:cameraType:]
  +[JFXCVASegMatting_SPI _defaultMatteGeneratorPrefersDepth]

  // instance methods
  -[JFXCVASegMatting_SPI .cxx_destruct]
  -[JFXCVASegMatting_SPI dealloc]
  -[JFXCVASegMatting_SPI initForFrameSet:]
  -[JFXCVASegMatting_SPI invertImageAndApplyGarbageMatteForPortraitOrientation:garbageMatte:erodedMatte:]
  -[JFXCVASegMatting_SPI invertImageAndApplyGarbageMatteForPortraitUpsideDownOrientation:garbageMatte:erodedMatte:]
  -[JFXCVASegMatting_SPI invertImageAndApplyGarbageMatteForLandscapeOrientation:garbageMatte:erodedMatte:]
  -[JFXCVASegMatting_SPI depthThresholdForDepthMap:processData:largestFaceRect:interfaceOrientation:]
  -[JFXCVASegMatting_SPI dilateImage:toImage:kernelSize:]
  -[JFXCVASegMatting_SPI erodeImage:toImage:kernelSize:]
  -[JFXCVASegMatting_SPI combineInnerAndOuterMattes:dilatedOuterMatte:]
  -[JFXCVASegMatting_SPI getFaceDepth:largestFaceRect:]
  -[JFXCVASegMatting_SPI garbageMatteForFrameSet:matte:erodedMatteOut:]
  -[JFXCVASegMatting_SPI invertImageAndApplyGarbageMatte:garbageMatte:erodedMatte:]
  -[JFXCVASegMatting_SPI invertImage:]
  -[JFXCVASegMatting_SPI isValidForCameraFrameSet:]
  -[JFXCVASegMatting_SPI largeColorImageWithSmallForegroundEstimate:rawAlpha:color:]
  -[JFXCVASegMatting_SPI requestMattingStatus]
  -[JFXCVASegMatting_SPI alphaMatteForFrameSet:mattingPerfState:completionHandler:]


JFXCVASegMatting_NoOp : JFXMatting
  // instance methods
  -[JFXCVASegMatting_NoOp initForFrameSet:]
  -[JFXCVASegMatting_NoOp isValidForCameraFrameSet:]
  -[JFXCVASegMatting_NoOp alphaMatteForFrameSet:mattingPerfState:completionHandler:]


JFXCVASegMatting : JFXMatting
  // class methods
  +[JFXCVASegMatting mattingDepthInputSize]

  // instance methods
  -[JFXCVASegMatting .cxx_destruct]
  -[JFXCVASegMatting initForFrameSet:]
  -[JFXCVASegMatting isValidForCameraFrameSet:]
  -[JFXCVASegMatting alphaMatteForFrameSet:mattingPerfState:completionHandler:]


CFXCameraViewController : UIViewController <CFXCaptureViewControllerDelegate, JFXRemoteCommandServerDelegate, CFXEffectBrowserContentPresenterViewControllerDelegate, CFXEffectBrowserViewControllerDelegate>
 @property  CFXCaptureViewController *captureViewController
 @property  CFXEffectBrowserViewController *effectBrowserViewController
 @property  CFXCameraControlsViewController *cameraControlsViewController
 @property  long long cameraPosition
 @property  long long initialFlashMode
 @property  BOOL cameraControlsShown
 @property  BOOL capturingFunCamMedia
 @property  NSString *effectBrowserPresentedAppIdentifier
 @property  JFXRemoteCommandServer *remoteCommandServer
 @property  UIView *effectsPickerSnapshotContainerView
 @property  NSObject<OS_dispatch_queue> *externalCaptureSessionInputDeserializationQueue
 @property  NSObject<OS_dispatch_queue> *externalCaptureSessionInputProcessingQueue
 @property  NSObject<OS_dispatch_queue> *externalCaptureSessionOutputProcessingQueue
 @property  JFXPixelRotationSession *externalCaptureSessionRotationSession
 @property  long long externalCaptureSessionCameraPosition
 @property  JFXThreadSafeDictionary *externalCaptureSessionInputFrameTimestamps
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} externalPresentationRect
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} externalContentRect
 @property  NSTimer *effectsInStreamTimer
 @property  CFXThermalPolicyManager *thermalPolicyManager
 @property  JFXMetadataValidator *metadataValidator
 @property  long long aspectRatioCrop
 @property  long long captureMode
 @property  <CFXCameraViewControllerDelegate> *delegate
 @property  long long devicePosition
 @property  UIView *effectsPickerDrawer
 @property  BOOL effectsPickerHidden
 @property  long long effectsState
 @property  long long flashMode
 @property  long long mode
 @property  BOOL showsViewfinder
 @property  double userInterfaceAlpha
 @property  BOOL usesInternalCaptureSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXCameraViewController initialize]
  +[CFXCameraViewController preheatWithWindow:captureMode:devicePosition:aspectRatioCrop:]

  // instance methods
  -[CFXCameraViewController flashMode]
  -[CFXCameraViewController devicePosition]
  -[CFXCameraViewController stopCaptureSession]
  -[CFXCameraViewController setCameraPosition:]
  -[CFXCameraViewController startCaptureSession]
  -[CFXCameraViewController .cxx_destruct]
  -[CFXCameraViewController viewDidLoad]
  -[CFXCameraViewController initWithMode:]
  -[CFXCameraViewController setDelegate:]
  -[CFXCameraViewController cameraPosition]
  -[CFXCameraViewController viewDidAppear:]
  -[CFXCameraViewController viewDidLayoutSubviews]
  -[CFXCameraViewController delegate]
  -[CFXCameraViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[CFXCameraViewController dealloc]
  -[CFXCameraViewController resign]
  -[CFXCameraViewController loadView]
  -[CFXCameraViewController captureMode]
  -[CFXCameraViewController mode]
  -[CFXCameraViewController aspectRatioCrop]
  -[CFXCameraViewController setEffectsPickerDrawer:]
  -[CFXCameraViewController effectBrowserViewController:didSelectAppWithIdentifier:]
  -[CFXCameraViewController effectBrowserViewController:didSelectEffect:]
  -[CFXCameraViewController initWithCaptureMode:devicePosition:flashMode:aspectRatioCrop:]
  -[CFXCameraViewController removeAllEffects]
  -[CFXCameraViewController setUsesInternalCaptureSession:]
  -[CFXCameraViewController setShowsViewfinder:]
  -[CFXCameraViewController setEffectsPickerHidden:animated:]
  -[CFXCameraViewController effectBrowserViewController:willChangeDockHeight:]
  -[CFXCameraViewController shouldAlwaysPresentExpandedAppsForEffectBrowserViewController:]
  -[CFXCameraViewController effectsState]
  -[CFXCameraViewController renderFrameWithImageDataArchive:imagePixelBuffer:depthPixelBuffer:orientation:presentationRect:contentsRect:]
  -[CFXCameraViewController effectsPickerDrawer]
  -[CFXCameraViewController effectBrowserViewController]
  -[CFXCameraViewController setEffectBrowserViewController:]
  -[CFXCameraViewController effectBrowserPresentedAppIdentifier]
  -[CFXCameraViewController setEffectBrowserPresentedAppIdentifier:]
  -[CFXCameraViewController effectBrowserViewController:screenTopBarHeightForWindowBounds:orientation:]
  -[CFXCameraViewController effectBrowserViewController:didDropOverlayEffect:atScreenLocation:atScreenSize:rotationAngle:]
  -[CFXCameraViewController effectBrowserViewController:didRemoveAllEffectsOfType:]
  -[CFXCameraViewController effectBrowserViewController:filterPickerPreviewBackgroundImageAtSizeInPixels:completion:]
  -[CFXCameraViewController selectedFilterIdentifierForEffectBrowserViewController:]
  -[CFXCameraViewController selectedAnimojiIdentifierForEffectBrowserViewController:]
  -[CFXCameraViewController localizedPromptForHidingAnimojiForEffectBrowserViewController:]
  -[CFXCameraViewController allowLandscapeForEffectBrowserViewController:]
  -[CFXCameraViewController effectBrowserViewControllerDidStartCaptureSession:]
  -[CFXCameraViewController effectBrowserViewControllerDidStopCaptureSession:]
  -[CFXCameraViewController shouldRotateCellsForDeviceOrientation]
  -[CFXCameraViewController captureViewController]
  -[CFXCameraViewController setCaptureViewController:]
  -[CFXCameraViewController initialFlashMode]
  -[CFXCameraViewController setCameraControlsViewController:]
  -[CFXCameraViewController cameraControlsViewController]
  -[CFXCameraViewController thermalPolicyManager]
  -[CFXCameraViewController setThermalPolicyManager:]
  -[CFXCameraViewController setEffectsPickerSnapshotContainerView:]
  -[CFXCameraViewController userInterfaceAlpha]
  -[CFXCameraViewController setUserInterfaceAlpha:]
  -[CFXCameraViewController externalCaptureSessionCameraPosition]
  -[CFXCameraViewController setCameraControlsShown:]
  -[CFXCameraViewController cameraControlsShown]
  -[CFXCameraViewController metadataValidator]
  -[CFXCameraViewController setExternalCaptureSessionCameraPosition:]
  -[CFXCameraViewController effectsInStreamTimer]
  -[CFXCameraViewController setEffectsInStreamTimer:]
  -[CFXCameraViewController noteInputFrameWithTimestamp:]
  -[CFXCameraViewController externalCaptureSessionInputProcessingQueue]
  -[CFXCameraViewController setExternalCaptureSessionRotationSession:]
  -[CFXCameraViewController externalPresentationRect]
  -[CFXCameraViewController externalContentRect]
  -[CFXCameraViewController setExternalPresentationRect:]
  -[CFXCameraViewController setExternalContentRect:]
  -[CFXCameraViewController usesInternalCaptureSession]
  -[CFXCameraViewController setCapturingFunCamMedia:]
  -[CFXCameraViewController capturingFunCamMedia]
  -[CFXCameraViewController JFX_exitAnalytics]
  -[CFXCameraViewController externalCaptureSessionInputDeserializationQueue]
  -[CFXCameraViewController renderFrameWithImageData:orientation:presentationRect:contentsRect:]
  -[CFXCameraViewController externalCaptureSessionOutputProcessingQueue]
  -[CFXCameraViewController externalCaptureSessionRotationSession]
  -[CFXCameraViewController noteOutputFrameWithTimestamp:]
  -[CFXCameraViewController updateUIForVideoRecording:]
  -[CFXCameraViewController CFX_automationAddEffectWithEffectTypeIdentifier:identifier:string:]
  -[CFXCameraViewController externalCaptureSessionInputFrameTimestamps]
  -[CFXCameraViewController captureViewController:didCaptureMediaItem:]
  -[CFXCameraViewController captureViewController:didChangeEffectComposition:]
  -[CFXCameraViewController captureViewController:didRenderFrame:]
  -[CFXCameraViewController captureViewControllerDoneButtonWasTapped:]
  -[CFXCameraViewController captureViewControllerEffectsButtonWasTapped:]
  -[CFXCameraViewController captureViewControllerPresentationRectWasDoubleTapped:]
  -[CFXCameraViewController captureViewController:presentationRectWasPinchedWithState:scale:velocity:]
  -[CFXCameraViewController captureViewControllerStartCaptureSession:]
  -[CFXCameraViewController captureViewControllerStopCaptureSession:]
  -[CFXCameraViewController captureViewControllerCameraFlipButtonWasTapped:]
  -[CFXCameraViewController captureViewController:switchedToCameraPosition:]
  -[CFXCameraViewController cameraControlsViewControllerForCaptureViewController:]
  -[CFXCameraViewController captureViewControllerDidStartVideoRecording:]
  -[CFXCameraViewController captureViewControllerDidStopVideoRecording:]
  -[CFXCameraViewController remoteCommandServer:didReceiveRemoveEffectsCommandWithTypeIdentifiers:]
  -[CFXCameraViewController remoteCommandServer:didReceiveSetAnimojiCommandWithIdentifier:]
  -[CFXCameraViewController remoteCommandServer:didReceiveSetMemojiCommandWithContentsOfFile:]
  -[CFXCameraViewController remoteCommandServer:didReceiveSetFilterCommandWithIdentifier:]
  -[CFXCameraViewController remoteCommandServer:didReceiveAddShapeCommandWithIdentifier:]
  -[CFXCameraViewController remoteCommandServer:didReceiveAddStickerCommandWithData:offset:scale:rotation:]
  -[CFXCameraViewController remoteCommandServer:didReceiveAddStickerCommandWithIdentifier:offset:scale:rotation:]
  -[CFXCameraViewController remoteCommandServer:didReceiveAddTextCommandWithIdentifier:string:]
  -[CFXCameraViewController initWithCaptureMode:]
  -[CFXCameraViewController isEffectsPickerHidden]
  -[CFXCameraViewController setTransitionState:animated:]
  -[CFXCameraViewController showsViewfinder]
  -[CFXCameraViewController setInitialFlashMode:]
  -[CFXCameraViewController remoteCommandServer]
  -[CFXCameraViewController setRemoteCommandServer:]
  -[CFXCameraViewController effectsPickerSnapshotContainerView]
  -[CFXCameraViewController setExternalCaptureSessionInputFrameTimestamps:]
  -[CFXCameraViewController setMetadataValidator:]


JTCollectionViewFlowLayout : UICollectionViewFlowLayout
  // instance methods
  -[JTCollectionViewFlowLayout invalidationContextForBoundsChange:]
  -[JTCollectionViewFlowLayout shouldInvalidateLayoutForBoundsChange:]


JFXCustomRenderProperties : NSObject
 @property  <PVCompositeDelegate> *renderingDelegate
 @property  id metadata
 @property  BOOL animojiTapPoint

  // class methods
  +[JFXCustomRenderProperties newCustomRenderProperties:metadata:]

  // instance methods
  -[JFXCustomRenderProperties .cxx_destruct]
  -[JFXCustomRenderProperties metadata]
  -[JFXCustomRenderProperties renderingDelegate]
  -[JFXCustomRenderProperties animojiTapPoint]
  -[JFXCustomRenderProperties setAnimojiTapPoint:]


CFXFilterPickerCollectionView : JTCollectionView
 @property  BOOL enableInfiniteHorizontalScrolling

  // instance methods
  -[CFXFilterPickerCollectionView layoutSubviews]
  -[CFXFilterPickerCollectionView enableInfiniteHorizontalScrolling]
  -[CFXFilterPickerCollectionView setEnableInfiniteHorizontalScrolling:]


JFXOverlayEffectTransforms : JFXTextEffectTransforms
 @property  PVTransformAnimation *transformAnimation
 @property  JFXFaceTrackedEffectTransform *faceTrackingTransform

  // class methods
  +[JFXOverlayEffectTransforms transformsWithTransform:transformAnimation:faceTrackingTransform:]
  +[JFXOverlayEffectTransforms transformsWithEffect:]

  // instance methods
  -[JFXOverlayEffectTransforms .cxx_destruct]
  -[JFXOverlayEffectTransforms initWithEffect:]
  -[JFXOverlayEffectTransforms transformAnimation]
  -[JFXOverlayEffectTransforms faceTrackingTransform]
  -[JFXOverlayEffectTransforms initWithTransform:transformAnimation:faceTrackingTransform:]
  -[JFXOverlayEffectTransforms applyToEffect:]
  -[JFXOverlayEffectTransforms setTransformAnimation:]
  -[JFXOverlayEffectTransforms setFaceTrackingTransform:]


JFXStillCompositionItem : JFXMovieCompositionItem
  // instance methods
  -[JFXStillCompositionItem initWithClip:timeScale:]
  -[JFXStillCompositionItem audioTrackSegmentsWithDestinationTime:]
  -[JFXStillCompositionItem hasVideoContent]
  -[JFXStillCompositionItem needSilenceAtEnd]
  -[JFXStillCompositionItem videoTrackSegmentsWithDestinationRange:]
  -[JFXStillCompositionItem audioTrackSegmentsWithDestinationTime:paddedFromTime:]
  -[JFXStillCompositionItem audioTrackSegmentsLoopedForDestinationTimeRange:]


EditListCompositionState : NSObject
 @property  JFXCompositionTrackGroup *currentTrackGroup
 @property  JFXCompositionTrackGroup *alternateTrackGroup
 @property  <JFXPlayableElement> *clip
 @property  int overlapLeft
 @property  int overlapRight
 @property  BOOL isLastClip
 @property  BOOL clipRequiresCA
 @property  {?={?=qiIq}{?=qiIq}} videoCompTimeRange
 @property  {?={?=qiIq}{?=qiIq}} audioCompTimeRange
 @property  int audioStartOffset
 @property  int audioEndOffset

  // instance methods
  -[EditListCompositionState clip]
  -[EditListCompositionState .cxx_destruct]
  -[EditListCompositionState setClip:]
  -[EditListCompositionState currentTrackGroup]
  -[EditListCompositionState alternateTrackGroup]
  -[EditListCompositionState setCurrentTrackGroup:]
  -[EditListCompositionState setAlternateTrackGroup:]
  -[EditListCompositionState swapTrackGroup]
  -[EditListCompositionState overlapLeft]
  -[EditListCompositionState setOverlapLeft:]
  -[EditListCompositionState overlapRight]
  -[EditListCompositionState setOverlapRight:]
  -[EditListCompositionState isLastClip]
  -[EditListCompositionState setIsLastClip:]
  -[EditListCompositionState clipRequiresCA]
  -[EditListCompositionState setClipRequiresCA:]
  -[EditListCompositionState videoCompTimeRange]
  -[EditListCompositionState setVideoCompTimeRange:]
  -[EditListCompositionState audioCompTimeRange]
  -[EditListCompositionState setAudioCompTimeRange:]
  -[EditListCompositionState audioStartOffset]
  -[EditListCompositionState setAudioStartOffset:]
  -[EditListCompositionState audioEndOffset]
  -[EditListCompositionState setAudioEndOffset:]


JFXComposition : NSObject
 @property  NSMapTable *clipCustomRendererMap
 @property  NSMapTable *clipFaceTrackingPlaybackDelegates
 @property  AVPlayerItem *playerItem
 @property  AVMutableComposition *avComposition
 @property  AVMutableVideoComposition *videoComposition
 @property  AVMutableAudioMix *audioMix
 @property  {?=qiIq} duration
 @property  AVPlayerItem *avPlayerItem
 @property  JFXCompositionTrackGroup *trackGroupA
 @property  JFXCompositionTrackGroup *trackGroupB
 @property  NSMutableArray *audioMixParameters
 @property  <JFXCompositionPlayableElementsDataSource> *clipsDataSource
 @property  NSMutableArray *videoCompositionInstructions
 @property  {CGSize=dd} previousRenderSize
 @property  long long backgroundAudioTrackCount
 @property  long long foregroundAudioTrackCount
 @property  BOOL needsUpdate
 @property  <JFXPlayableElement> *liveTransformClip
 @property  {PVTransformAnimationInfo={?=qiIq}{CGPoint=dd}dd} liveCompositionTransform
 @property  NSMutableDictionary *assetsUsed
 @property  float globalAudioVolume
 @property  {CGSize=dd} viewSize
 @property  PVColorSpace *compositionOutputColorSpace
 @property  unsigned int parentCode

  // class methods
  +[JFXComposition instructionBuilderClass]

  // instance methods
  -[JFXComposition validate]
  -[JFXComposition .cxx_destruct]
  -[JFXComposition setDuration:]
  -[JFXComposition playerItem]
  -[JFXComposition setVideoComposition:]
  -[JFXComposition update]
  -[JFXComposition setViewSize:]
  -[JFXComposition setPlayerItem:]
  -[JFXComposition viewSize]
  -[JFXComposition setNeedsUpdate:]
  -[JFXComposition setAvPlayerItem:]
  -[JFXComposition setAudioMix:]
  -[JFXComposition markDirty]
  -[JFXComposition needsUpdate]
  -[JFXComposition audioMix]
  -[JFXComposition dealloc]
  -[JFXComposition avPlayerItem]
  -[JFXComposition videoComposition]
  -[JFXComposition duration]
  -[JFXComposition audioMixParameters]
  -[JFXComposition setAudioMixParameters:]
  -[JFXComposition playerItemDidReachEnd:]
  -[JFXComposition clipsDataSource]
  -[JFXComposition JFX_hasEffectThatRequiresCustomRendering]
  -[JFXComposition previousRenderSize]
  -[JFXComposition JFX_preferredRenderScale]
  -[JFXComposition setAvComposition:]
  -[JFXComposition setVideoCompositionInstructions:]
  -[JFXComposition setTrackGroupA:]
  -[JFXComposition avComposition]
  -[JFXComposition trackGroupA]
  -[JFXComposition setTrackGroupB:]
  -[JFXComposition trackGroupB]
  -[JFXComposition setGlobalAudioVolume:]
  -[JFXComposition setAssetsUsed:]
  -[JFXComposition setPreviousRenderSize:]
  -[JFXComposition setLiveTransformClip:]
  -[JFXComposition setLiveCompositionTransform:]
  -[JFXComposition videoCompositionInstructions]
  -[JFXComposition assetsUsed]
  -[JFXComposition clipCustomRendererMap]
  -[JFXComposition clipFaceTrackingPlaybackDelegates]
  -[JFXComposition globalAudioVolume]
  -[JFXComposition newInstructionGraphNodeForClip:clipTransform:compositionTrackID:requiresTweening:isContainedClip:]
  -[JFXComposition clipTransform:]
  -[JFXComposition instructionToShowClip:withTrackID:withTransform:timeRange:requiresCARendering:]
  -[JFXComposition volumeForClip:]
  -[JFXComposition instructionToShowImageWithClip:withTransform:timeRange:requiresCARendering:]
  -[JFXComposition emptySegments:]
  -[JFXComposition removeTrackFromAudioMix:]
  -[JFXComposition removeTrackIfEmpty:]
  -[JFXComposition logRemovedTrack:trackID:]
  -[JFXComposition setRenderScale]
  -[JFXComposition logAddedTrack:trackID:]
  -[JFXComposition buildClipList]
  -[JFXComposition addBackTracksIfRemoved]
  -[JFXComposition JFX_updatePlaybackDelegatesForClip:]
  -[JFXComposition CARenderingRequiredForClip:]
  -[JFXComposition compositionItemsForState:compositionItem:backfillCompositionItem:]
  -[JFXComposition assetUsed:]
  -[JFXComposition updateVideoAndAudioInstructionForState:previousInstructions:waitingForResource:]
  -[JFXComposition dissolveGraphNode:from:to:]
  -[JFXComposition burnInPlaybackSettings:]
  -[JFXComposition instructionToHideTrackID:whileHidingTrackID:timeRange:requiresCARendering:]
  -[JFXComposition animojiCustomRendererPropsForClip:currentCustomProperties:sharedMediaDataReaderManager:]
  -[JFXComposition CFX_updateFaceTrackingPlaybackDelegateForClip:sharedMediaDataReaderManager:]
  -[JFXComposition rebuildCompositionInstructionsForVideoStillTitleCard:]
  -[JFXComposition JFX_setScrubbingModeForPlaybackDelegates:]
  -[JFXComposition notifyNeedsEffectPropertiesUpdatedForPlaybackTime:]
  -[JFXComposition JFX_updateFaceTrackPropertiesForEffectsAtTime:]
  -[JFXComposition timeRangeForClip:]
  -[JFXComposition removeEmptyTracks]
  -[JFXComposition updateRenderSizeIfNeeded]
  -[JFXComposition refreshAVComposition]
  -[JFXComposition JFX_applyPropertiesForCustomVideoCompositor:]
  -[JFXComposition parentCode]
  -[JFXComposition setParentCode:]
  -[JFXComposition compositionOutputColorSpace]
  -[JFXComposition JFX_finalizeVideoComposition]
  -[JFXComposition liveTransformClip]
  -[JFXComposition outputFrameRate]
  -[JFXComposition initWithClipsDataSource:]
  -[JFXComposition noteEffectChangeForClip:]
  -[JFXComposition notifyPlaybackWillBegin]
  -[JFXComposition notifyPlaybackDidStopAtTime:]
  -[JFXComposition AVComposition]
  -[JFXComposition applyPropertiesForCustomVideoCompositor:]
  -[JFXComposition applyExportProperties]
  -[JFXComposition applyPlayerItemProperties]
  -[JFXComposition clearPlayerItemProperties]
  -[JFXComposition JFX_isContigousSplitClip:nextClip:]
  -[JFXComposition setClipCustomRendererMap:]
  -[JFXComposition setClipFaceTrackingPlaybackDelegates:]
  -[JFXComposition setClipsDataSource:]
  -[JFXComposition backgroundAudioTrackCount]
  -[JFXComposition setBackgroundAudioTrackCount:]
  -[JFXComposition foregroundAudioTrackCount]
  -[JFXComposition setForegroundAudioTrackCount:]
  -[JFXComposition liveCompositionTransform]


JFXEffectPreviewOptions : NSObject <NSCopying>
 @property  unsigned long quality
 @property  unsigned int parentCode
 @property  PVColorSpace *outputColorSpace

  // instance methods
  -[JFXEffectPreviewOptions .cxx_destruct]
  -[JFXEffectPreviewOptions setQuality:]
  -[JFXEffectPreviewOptions quality]
  -[JFXEffectPreviewOptions copyWithZone:]
  -[JFXEffectPreviewOptions parentCode]
  -[JFXEffectPreviewOptions setParentCode:]
  -[JFXEffectPreviewOptions setOutputColorSpace:]
  -[JFXEffectPreviewOptions initPreviewOptions]
  -[JFXEffectPreviewOptions outputColorSpace]


JFXEffectStaticPreviewOptions : JFXEffectPreviewOptions
 @property  JTImage *renderBackgroundImage
 @property  BOOL dontCacheToDisk
 @property  BOOL dontCache
 @property  {?=qiIq} renderTime
 @property  {?={?=qiIq}{?=qiIq}} renderRange
 @property  BOOL dontUseThumbnailAssetWhenAvailable
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} renderedImageCropRect
 @property  @? renderPropertiesConfigurationBlock

  // instance methods
  -[JFXEffectStaticPreviewOptions .cxx_destruct]
  -[JFXEffectStaticPreviewOptions copyWithZone:]
  -[JFXEffectStaticPreviewOptions renderTime]
  -[JFXEffectStaticPreviewOptions initStaticPreviewOptions]
  -[JFXEffectStaticPreviewOptions renderBackgroundImage]
  -[JFXEffectStaticPreviewOptions setRenderBackgroundImage:]
  -[JFXEffectStaticPreviewOptions dontCacheToDisk]
  -[JFXEffectStaticPreviewOptions setDontCacheToDisk:]
  -[JFXEffectStaticPreviewOptions dontCache]
  -[JFXEffectStaticPreviewOptions setDontCache:]
  -[JFXEffectStaticPreviewOptions setRenderTime:]
  -[JFXEffectStaticPreviewOptions renderRange]
  -[JFXEffectStaticPreviewOptions setRenderRange:]
  -[JFXEffectStaticPreviewOptions dontUseThumbnailAssetWhenAvailable]
  -[JFXEffectStaticPreviewOptions setDontUseThumbnailAssetWhenAvailable:]
  -[JFXEffectStaticPreviewOptions renderedImageCropRect]
  -[JFXEffectStaticPreviewOptions setRenderedImageCropRect:]
  -[JFXEffectStaticPreviewOptions renderPropertiesConfigurationBlock]
  -[JFXEffectStaticPreviewOptions setRenderPropertiesConfigurationBlock:]


JFXEffectContinousPreviewOptions : JFXEffectPreviewOptions
 @property  unsigned long backgroundType
 @property  NSArray *effectsToApplyToBackground
 @property  {?=qiIq} effectAnimationDuration
 @property  BOOL loopAnimation
 @property  unsigned int maxFramesRenderedAtATime
 @property  @? renderPropertiesConfigurationBlock

  // instance methods
  -[JFXEffectContinousPreviewOptions setBackgroundType:]
  -[JFXEffectContinousPreviewOptions .cxx_destruct]
  -[JFXEffectContinousPreviewOptions backgroundType]
  -[JFXEffectContinousPreviewOptions copyWithZone:]
  -[JFXEffectContinousPreviewOptions renderPropertiesConfigurationBlock]
  -[JFXEffectContinousPreviewOptions setRenderPropertiesConfigurationBlock:]
  -[JFXEffectContinousPreviewOptions initContinousPreviewOptions]
  -[JFXEffectContinousPreviewOptions effectsToApplyToBackground]
  -[JFXEffectContinousPreviewOptions setEffectsToApplyToBackground:]
  -[JFXEffectContinousPreviewOptions effectAnimationDuration]
  -[JFXEffectContinousPreviewOptions setEffectAnimationDuration:]
  -[JFXEffectContinousPreviewOptions loopAnimation]
  -[JFXEffectContinousPreviewOptions setLoopAnimation:]
  -[JFXEffectContinousPreviewOptions maxFramesRenderedAtATime]
  -[JFXEffectContinousPreviewOptions setMaxFramesRenderedAtATime:]


JFXEffectContinousPreviewImageOptions : JFXEffectContinousPreviewOptions
 @property  unsigned long preferredUpdatesPerSecond
 @property  JTImage *backgroundImage

  // instance methods
  -[JFXEffectContinousPreviewImageOptions backgroundImage]
  -[JFXEffectContinousPreviewImageOptions setBackgroundImage:]
  -[JFXEffectContinousPreviewImageOptions .cxx_destruct]
  -[JFXEffectContinousPreviewImageOptions copyWithZone:]
  -[JFXEffectContinousPreviewImageOptions initImageOptionsWithFrameRate:]
  -[JFXEffectContinousPreviewImageOptions preferredUpdatesPerSecond]


JFXEffectContinousLiveCapturePreviewOptions : JFXEffectContinousPreviewOptions
 @property  BOOL rotateCameraFrameToInterfaceOrientation

  // instance methods
  -[JFXEffectContinousLiveCapturePreviewOptions copyWithZone:]
  -[JFXEffectContinousLiveCapturePreviewOptions initLiveCaptureOptions]
  -[JFXEffectContinousLiveCapturePreviewOptions rotateCameraFrameToInterfaceOrientation]
  -[JFXEffectContinousLiveCapturePreviewOptions setRotateCameraFrameToInterfaceOrientation:]


CFXAvailability : NSObject
  // class methods
  +[CFXAvailability availableEffects]


JFXDisparityAsMatte : JFXMatting
  // class methods
  +[JFXDisparityAsMatte _defaultMatteGeneratorPrefersDepth]
  +[JFXDisparityAsMatte mattingDepthInputSize]

  // instance methods
  -[JFXDisparityAsMatte initForFrameSet:]
  -[JFXDisparityAsMatte alphaMatteForFrameSet:mattingPerfState:completionHandler:]


CFXNonTransformedLiveCaptureContainerViewController : UIViewController
 @property  UIView *liveCaptureContainer
 @property  UIView *liveCaptureContainerContainer
 @property  CFXLiveCaptureViewController *liveCaptureViewController

  // instance methods
  -[CFXNonTransformedLiveCaptureContainerViewController .cxx_destruct]
  -[CFXNonTransformedLiveCaptureContainerViewController viewDidLoad]
  -[CFXNonTransformedLiveCaptureContainerViewController prepareForSegue:sender:]
  -[CFXNonTransformedLiveCaptureContainerViewController liveCaptureViewController]
  -[CFXNonTransformedLiveCaptureContainerViewController liveCaptureContainer]
  -[CFXNonTransformedLiveCaptureContainerViewController liveCaptureContainerContainer]
  -[CFXNonTransformedLiveCaptureContainerViewController setLiveCaptureContainer:]
  -[CFXNonTransformedLiveCaptureContainerViewController setLiveCaptureContainerContainer:]


JTLocalAssetMediaItem : JFXMediaItem
 @property  NSString *localFileName
 @property  NSURL *localFileURL

  // instance methods
  -[JTLocalAssetMediaItem .cxx_destruct]
  -[JTLocalAssetMediaItem info]
  -[JTLocalAssetMediaItem isEqual:]
  -[JTLocalAssetMediaItem dealloc]
  -[JTLocalAssetMediaItem copyWithZone:]
  -[JTLocalAssetMediaItem initWithURL:]
  -[JTLocalAssetMediaItem setLocalFileURL:]
  -[JTLocalAssetMediaItem localFileURL]
  -[JTLocalAssetMediaItem localFileName]
  -[JTLocalAssetMediaItem initWithInfo:delegate:]
  -[JTLocalAssetMediaItem canSaveToCameraRoll]
  -[JTLocalAssetMediaItem setLocalFileName:]


JFXARMetadata : NSObject <NSSecureCoding, NSCopying>
 @property  {?=[4]} cameraTransform
 @property  {?=[3]} cameraIntrinsics
 @property  long long pvTransformOrientation
 @property  NSDictionary *animojiPhysicsBlendShapes
 @property  ARFrame *arFrame
 @property  JFXFaceAnchor *faceAnchor
 @property  {?=[4]} anchorTransform
 @property  BOOL hasTrackedFace
 @property  {CGSize=dd} imageResolution

  // class methods
  +[JFXARMetadata supportsSecureCoding]

  // instance methods
  -[JFXARMetadata initWithCoder:]
  -[JFXARMetadata .cxx_destruct]
  -[JFXARMetadata imageResolution]
  -[JFXARMetadata cameraIntrinsics]
  -[JFXARMetadata arFrame]
  -[JFXARMetadata copyWithZone:]
  -[JFXARMetadata encodeWithCoder:]
  -[JFXARMetadata cameraTransform]
  -[JFXARMetadata faceAnchor]
  -[JFXARMetadata hasTrackedFace]
  -[JFXARMetadata initWithAnchorTransform:cameraTransform:cameraIntrinsics:cameraImageResolution:]
  -[JFXARMetadata animojiPhysicsBlendShapes]
  -[JFXARMetadata pvTransformOrientation]
  -[JFXARMetadata initWithARFrame:faceAnchor:]
  -[JFXARMetadata initWithFaceAnchor:cameraIntrinsics:]
  -[JFXARMetadata cameraProjectionForOutputSize:interfaceOrientation:zNear:zFar:]
  -[JFXARMetadata cameraTransformForInterfaceOrientation:]
  -[JFXARMetadata anchorTransform]
  -[JFXARMetadata setAnimojiPhysicsBlendShapes:]


JFXARMetadataMediaReaderItem : NSObject
 @property  JFXARMetadata *arMetadata
 @property  {?={?=qiIq}{?=qiIq}} timeRange

  // instance methods
  -[JFXARMetadataMediaReaderItem timeRange]
  -[JFXARMetadataMediaReaderItem .cxx_destruct]
  -[JFXARMetadataMediaReaderItem arMetadata]
  -[JFXARMetadataMediaReaderItem initWithARMetadata:timeRange:]


JFXARMetadataMediaReader : NSObject <JFXMediaMetadataReader>
 @property  <JFXMediaMetadataReader> *reader
 @property  NSError *lastDecodeError
 @property  JFXARMetadataMediaReaderItem *cachedARMetadata
 @property  NSObject<OS_dispatch_queue> *synchronizationQueue
 @property  {?={?=qiIq}{?=qiIq}} readableTimeRange
 @property  BOOL isScrubbing
 @property  long long status
 @property  NSError *error
 @property  unsigned long signPostID
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXARMetadataMediaReader initialize]

  // instance methods
  -[JFXARMetadataMediaReader isScrubbing]
  -[JFXARMetadataMediaReader name]
  -[JFXARMetadataMediaReader setIsScrubbing:]
  -[JFXARMetadataMediaReader reader]
  -[JFXARMetadataMediaReader .cxx_destruct]
  -[JFXARMetadataMediaReader initWithMetadataReader:]
  -[JFXARMetadataMediaReader status]
  -[JFXARMetadataMediaReader synchronizationQueue]
  -[JFXARMetadataMediaReader error]
  -[JFXARMetadataMediaReader beginReadingAtTimeRange:]
  -[JFXARMetadataMediaReader beginReading]
  -[JFXARMetadataMediaReader readableTimeRange]
  -[JFXARMetadataMediaReader signPostID]
  -[JFXARMetadataMediaReader arMetadataItemForTime:]
  -[JFXARMetadataMediaReader cachedARMetadata]
  -[JFXARMetadataMediaReader metadataForTime:]
  -[JFXARMetadataMediaReader JFX_ARMetadataFromMetadataReaderItem:]
  -[JFXARMetadataMediaReader setCachedARMetadata:]
  -[JFXARMetadataMediaReader setLastDecodeError:]
  -[JFXARMetadataMediaReader lastDecodeError]


JTSuspendedInteractionRequest : NSObject
 @property  NSString *tag
 @property  NSArray *excludedChildViewControllers

  // class methods
  +[JTSuspendedInteractionRequest requestWithTag:excludedViewControllers:]

  // instance methods
  -[JTSuspendedInteractionRequest setTag:]
  -[JTSuspendedInteractionRequest tag]
  -[JTSuspendedInteractionRequest .cxx_destruct]
  -[JTSuspendedInteractionRequest isEqual:]
  -[JTSuspendedInteractionRequest setExcludedChildViewControllers:]
  -[JTSuspendedInteractionRequest excludedChildViewControllers]


JTViewController : UIViewController
 @property  JTView *view
 @property  NSMutableDictionary *suspendedChildViewControllerRequests
 @property  NSMutableArray *suspendInteractionTags
 @property  BOOL debuggingUIEnabled
 @property  UIViewController *viewControllerDrivingStatusAppearance

  // instance methods
  -[JTViewController prefersHomeIndicatorAutoHidden]
  -[JTViewController prefersStatusBarHidden]
  -[JTViewController .cxx_destruct]
  -[JTViewController viewDidLoad]
  -[JTViewController viewDidAppear:]
  -[JTViewController view]
  -[JTViewController setView:]
  -[JTViewController viewDidDisappear:]
  -[JTViewController logSuspendedChildViewControllersToString:indentLevel:]
  -[JTViewController suspendInteractionTags]
  -[JTViewController debuggingUIEnabled]
  -[JTViewController setDebuggingUIEnabled:]
  -[JTViewController suspendedChildViewControllerRequests]
  -[JTViewController setChildViewControllerInteractionEnabledWithRequest:enabled:]
  -[JTViewController timeoutInteractionSuspended:]
  -[JTViewController resumeInteractionForChildViewControllersWithTag:]
  -[JTViewController resumeInteractionWithTag:]
  -[JTViewController suspendInteractionWithTag:]
  -[JTViewController viewControllerDrivingStatusAppearance]
  -[JTViewController logSuspendedViewControllers]
  -[JTViewController suspendChildViewControllersInteractionWithTag:timeout:excluding:]
  -[JTViewController setViewControllerDrivingStatusAppearance:]
  -[JTViewController setSuspendedChildViewControllerRequests:]
  -[JTViewController setSuspendInteractionTags:]


CFXNextRenderedFrameCallback : NSObject
 @property  {?=qiIq} sendAfterRenderTime
 @property  @? block

  // instance methods
  -[CFXNextRenderedFrameCallback .cxx_destruct]
  -[CFXNextRenderedFrameCallback block]
  -[CFXNextRenderedFrameCallback initWithBlock:sendAfterRenderTime:]
  -[CFXNextRenderedFrameCallback sendAfterRenderTime]


CFXLiveCaptureViewController : UIViewController <CFXRendererDelegate, JFXVideoCameraVideoDelegate, JFXVideoCameraAudioDelegate, UIGestureRecognizerDelegate>
 @property  UIView *containerView
 @property  JFXImageView *renderImageView
 @property  UIView *debugControlsView
 @property  UIView *uncroppedRenderImagePlaceHolderView
 @property  NSObject<OS_dispatch_queue> *renderQ
 @property  CFXRenderer *renderer_renderQ
 @property  CFXEffectComposition *composition
 @property  NSObject<OS_dispatch_queue> *recordingQ
 @property  NSObject<OS_dispatch_queue> *renderImageQ
 @property  JTImage *renderedImage_renderImageQ
 @property  {?=qiIq} currentRenderPresentationTime_renderImageQ
 @property  JTImage *renderedImage
 @property  {?=qiIq} currentRenderPresentationTime
 @property  BOOL isCapturingVideo_recordingQ
 @property  BOOL isCapturingPhoto_recordingQ
 @property  JFXVideoWriter *videoWriter
 @property  NSMutableArray *renderFrameCompletionBlocks
 @property  JFXOrientationMonitor *orientationMonitor
 @property  <JFXAnimojiTrackingLossDelegate> *trackingLossDelegate
 @property  <CFXLiveCaptureViewControllerDelegate> *delegate
 @property  {?=dd} normalizedMinimumHitTestArea
 @property  BOOL useLocalCameraViewfinder
 @property  UIView *localCameraViewfinderView
 @property  UIView *uncroppedCameraViewfinderPlaceholderView
 @property  long long captureMode
 @property  BOOL isCapturing
 @property  BOOL livePlayerIsSaturated
 @property  CFXThermalPolicyManager *thermalPolicyManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXLiveCaptureViewController instantiate]

  // instance methods
  -[CFXLiveCaptureViewController isCapturing]
  -[CFXLiveCaptureViewController initWithCoder:]
  -[CFXLiveCaptureViewController composition]
  -[CFXLiveCaptureViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[CFXLiveCaptureViewController containerView]
  -[CFXLiveCaptureViewController .cxx_destruct]
  -[CFXLiveCaptureViewController viewDidLoad]
  -[CFXLiveCaptureViewController setDelegate:]
  -[CFXLiveCaptureViewController renderedImage]
  -[CFXLiveCaptureViewController setContainerView:]
  -[CFXLiveCaptureViewController setCaptureMode:]
  -[CFXLiveCaptureViewController viewWillDisappear:]
  -[CFXLiveCaptureViewController viewWillAppear:]
  -[CFXLiveCaptureViewController delegate]
  -[CFXLiveCaptureViewController setComposition:]
  -[CFXLiveCaptureViewController renderQ]
  -[CFXLiveCaptureViewController captureMode]
  -[CFXLiveCaptureViewController didReceiveMemoryWarning]
  -[CFXLiveCaptureViewController thermalPolicyManager]
  -[CFXLiveCaptureViewController setThermalPolicyManager:]
  -[CFXLiveCaptureViewController setUseLocalCameraViewfinder:]
  -[CFXLiveCaptureViewController livePlayerIsSaturated]
  -[CFXLiveCaptureViewController willDropCameraFrame]
  -[CFXLiveCaptureViewController CFX_installGestures]
  -[CFXLiveCaptureViewController debugControlsView]
  -[CFXLiveCaptureViewController setDebugControlsView:]
  -[CFXLiveCaptureViewController stopRenderingCameraFrames]
  -[CFXLiveCaptureViewController renderer_renderQ]
  -[CFXLiveCaptureViewController renderImageView]
  -[CFXLiveCaptureViewController CFX_createUncroppedCameraPlaceholderViewIfNecessary]
  -[CFXLiveCaptureViewController uncroppedRenderImagePlaceHolderView]
  -[CFXLiveCaptureViewController setUncroppedRenderImagePlaceHolderView:]
  -[CFXLiveCaptureViewController renderImageQ]
  -[CFXLiveCaptureViewController renderedImage_renderImageQ]
  -[CFXLiveCaptureViewController currentRenderPresentationTime_renderImageQ]
  -[CFXLiveCaptureViewController setCurrentRenderPresentationTime_renderImageQ:]
  -[CFXLiveCaptureViewController CFX_executeRenderCallbacksQueuedBeforeTime:]
  -[CFXLiveCaptureViewController useLocalCameraViewfinder]
  -[CFXLiveCaptureViewController setRenderedImage_renderImageQ:]
  -[CFXLiveCaptureViewController recordingQ]
  -[CFXLiveCaptureViewController isCapturingVideo_recordingQ]
  -[CFXLiveCaptureViewController videoWriter]
  -[CFXLiveCaptureViewController currentRenderPresentationTime]
  -[CFXLiveCaptureViewController renderFrameCompletionBlocks]
  -[CFXLiveCaptureViewController setRenderer_renderQ:]
  -[CFXLiveCaptureViewController trackingLossDelegate]
  -[CFXLiveCaptureViewController setTrackingLossDelegate:]
  -[CFXLiveCaptureViewController stopRenderingCameraFrames:]
  -[CFXLiveCaptureViewController removeAllEffectsOfType:completion:]
  -[CFXLiveCaptureViewController removeAllEffects:]
  -[CFXLiveCaptureViewController isCapturingPhoto_recordingQ]
  -[CFXLiveCaptureViewController CFX_setupVideoWriterWithAudio:completion:]
  -[CFXLiveCaptureViewController CFX_setAnimationEnabledForOverlays:]
  -[CFXLiveCaptureViewController CFX_tearDownVideoWriter:]
  -[CFXLiveCaptureViewController stopVideoRecording:]
  -[CFXLiveCaptureViewController setIsCapturingPhoto_recordingQ:]
  -[CFXLiveCaptureViewController setIsCapturingVideo_recordingQ:]
  -[CFXLiveCaptureViewController setVideoWriter:]
  -[CFXLiveCaptureViewController CFX_livePreviewTapped:]
  -[CFXLiveCaptureViewController CFX_livePreviewPanned:]
  -[CFXLiveCaptureViewController CFX_livePreviewPinched:]
  -[CFXLiveCaptureViewController CFX_livePreviewRotated:]
  -[CFXLiveCaptureViewController CFX_livePreviewDoubleTapped:]
  -[CFXLiveCaptureViewController locationInCaptureViewForGestureRecognizer:]
  -[CFXLiveCaptureViewController renderer:didPrepareToRenderFrameAtPresentationTime:]
  -[CFXLiveCaptureViewController renderer:didRenderFrame:]
  -[CFXLiveCaptureViewController renderVideoFrame:]
  -[CFXLiveCaptureViewController processAudioSample:]
  -[CFXLiveCaptureViewController localCameraViewfinderView]
  -[CFXLiveCaptureViewController uncroppedCameraViewfinderPlaceholderView]
  -[CFXLiveCaptureViewController startButtonTouchUpInside:]
  -[CFXLiveCaptureViewController stopButtonTouchUpInside:]
  -[CFXLiveCaptureViewController toggleDebugControlsView:]
  -[CFXLiveCaptureViewController executeAfterNextFrameIsRendered:]
  -[CFXLiveCaptureViewController startRenderingCameraFrames]
  -[CFXLiveCaptureViewController pauseRenderingCameraFrames]
  -[CFXLiveCaptureViewController resumeRenderingCameraFrames]
  -[CFXLiveCaptureViewController flushRenderer]
  -[CFXLiveCaptureViewController startVideoRecordingWithFlashMode:]
  -[CFXLiveCaptureViewController cancelVideoRecording]
  -[CFXLiveCaptureViewController capturePhotoWithFlashMode:completion:]
  -[CFXLiveCaptureViewController normalizedMinimumHitTestArea]
  -[CFXLiveCaptureViewController setRenderImageView:]
  -[CFXLiveCaptureViewController setRenderQ:]
  -[CFXLiveCaptureViewController setRecordingQ:]
  -[CFXLiveCaptureViewController setRenderImageQ:]
  -[CFXLiveCaptureViewController setRenderFrameCompletionBlocks:]
  -[CFXLiveCaptureViewController orientationMonitor]
  -[CFXLiveCaptureViewController setOrientationMonitor:]


CFXEffectType : NSObject
 @property  NSOrderedSet *effects
 @property  int jtEffectType
 @property  NSString *localizedTitle
 @property  NSString *identifier

  // class methods
  +[CFXEffectType initialize]
  +[CFXEffectType effectTypeWithIdentifier:]
  +[CFXEffectType effectTypeIdentifiers]

  // instance methods
  -[CFXEffectType localizedTitle]
  -[CFXEffectType effects]
  -[CFXEffectType initWithIdentifier:]
  -[CFXEffectType .cxx_destruct]
  -[CFXEffectType setLocalizedTitle:]
  -[CFXEffectType isEqual:]
  -[CFXEffectType identifier]
  -[CFXEffectType jtEffectType]
  -[CFXEffectType setEffects:]
  -[CFXEffectType setJtEffectType:]


CFXEffectComposition : NSObject
 @property  NSMutableArray *filters
 @property  NSMutableArray *overlays
 @property  NSMutableArray *animojis
 @property  NSObject<OS_dispatch_queue> *concurrentQueue
 @property  unsigned long count
 @property  NSArray *effects
 @property  NSArray *jtEffects
 @property  BOOL hasFaceTrackedOverlays
 @property  BOOL isEmpty
 @property  BOOL requiresFaceTracking

  // instance methods
  -[CFXEffectComposition setFilters:]
  -[CFXEffectComposition concurrentQueue]
  -[CFXEffectComposition overlays]
  -[CFXEffectComposition isEmpty]
  -[CFXEffectComposition filters]
  -[CFXEffectComposition effects]
  -[CFXEffectComposition .cxx_destruct]
  -[CFXEffectComposition count]
  -[CFXEffectComposition init]
  -[CFXEffectComposition setConcurrentQueue:]
  -[CFXEffectComposition setOverlays:]
  -[CFXEffectComposition addEffect:completion:]
  -[CFXEffectComposition requiresFaceTracking]
  -[CFXEffectComposition jtEffects]
  -[CFXEffectComposition jtEffectsForType:]
  -[CFXEffectComposition hasEffectOfType:]
  -[CFXEffectComposition removeAllEffectsOfType:completion:]
  -[CFXEffectComposition removeAllEffects:]
  -[CFXEffectComposition animojis]
  -[CFXEffectComposition CFX_effectsForJettyType:]
  -[CFXEffectComposition hasFaceTrackedOverlays]
  -[CFXEffectComposition removeEffect:completion:]
  -[CFXEffectComposition removeAllOverlayEffects:]
  -[CFXEffectComposition indexOfEffect:]
  -[CFXEffectComposition insertEffectAtIndex:atIndex:]
  -[CFXEffectComposition setAnimojis:]


JTVideoMediaUtils : NSObject
 @property  BOOL cachedAssetInformationValid
 @property  {CGSize=dd} cachedNaturalSize
 @property  float cachedFrameRate
 @property  {CGAffineTransform=dddddd} cachedTransform
 @property  unsigned int cachedCodec4cc
 @property  PVColorSpace *cachedColorSpace
 @property  int cachedDurationAt30fps
 @property  {?=qiIq} cachedPreciseAssetDuration
 @property  unsigned long cachedVideoTrackCount
 @property  unsigned long cachedAudioTrackCount
 @property  BOOL cacheWillDieDuringLoad

  // instance methods
  -[JTVideoMediaUtils colorSpace]
  -[JTVideoMediaUtils .cxx_destruct]
  -[JTVideoMediaUtils transform]
  -[JTVideoMediaUtils frameRate]
  -[JTVideoMediaUtils setCachedFrameRate:]
  -[JTVideoMediaUtils cachedFrameRate]
  -[JTVideoMediaUtils cachedAssetInformationValid]
  -[JTVideoMediaUtils setCachedAssetInformationValid:]
  -[JTVideoMediaUtils setCachedVideoTrackCount:]
  -[JTVideoMediaUtils setCachedNaturalSize:]
  -[JTVideoMediaUtils setCachedTransform:]
  -[JTVideoMediaUtils cachedVideoTrackCount]
  -[JTVideoMediaUtils cachedPreciseAssetDuration]
  -[JTVideoMediaUtils setCachedPreciseAssetDuration:]
  -[JTVideoMediaUtils setCachedCodec4cc:]
  -[JTVideoMediaUtils setCachedColorSpace:]
  -[JTVideoMediaUtils setCachedDurationAt30fps:]
  -[JTVideoMediaUtils setCachedAudioTrackCount:]
  -[JTVideoMediaUtils cachedAudioTrackCount]
  -[JTVideoMediaUtils setCacheWillDieDuringLoad:]
  -[JTVideoMediaUtils cacheWillDieDuringLoad]
  -[JTVideoMediaUtils cachedDurationAt30fps]
  -[JTVideoMediaUtils cachedCodec4cc]
  -[JTVideoMediaUtils cachedNaturalSize]
  -[JTVideoMediaUtils isUnsupportedAudio]
  -[JTVideoMediaUtils cachedTransform]
  -[JTVideoMediaUtils cachedColorSpace]
  -[JTVideoMediaUtils cacheTrackInformationWithAVAsset:]
  -[JTVideoMediaUtils requestAVAssetAsyncWithAsset:needsDerivativeMedia:frameRate:completion:]
  -[JTVideoMediaUtils durationAt30fpsWithAssetDuration:]
  -[JTVideoMediaUtils isOriginalHEVC4k]
  -[JTVideoMediaUtils hasAudibleCharacteristicWithIsMissing:]
  -[JTVideoMediaUtils naturalSizeWithIsMissing:asset:]
  -[JTVideoMediaUtils hasVideoTracks]
  -[JTVideoMediaUtils hasAudioTracks]
  -[JTVideoMediaUtils invalidateCachedAssetInformation]


JFXAnimojiEffectRenderer : NSObject <PVCompositeDelegate, JFXSupportProtocol>
 @property  AVTRenderer *renderer
 @property  AVTAvatarStore *avatarStore
 @property  JFXAnimojiEffect *currentPuppet
 @property  NSLock *renderPassLock
 @property  NSLock *rendererLock
 @property  ^{__CVMetalTextureCache=} metalTextureCache
 @property  ^{__CVMetalTextureCache=} metalDepthTextureCache
 @property  {CGSize=dd} workingSize
 @property  ^{__CVPixelBufferPool=} inputBufferPool
 @property  double systemTimeForAVTRenderer
 @property  BOOL asynchronouslyLoadNewPuppets
 @property  <JFXAnimojiTrackingLossDelegate> *trackingLossDelegate
 @property  BOOL allowAntialiasing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXAnimojiEffectRenderer isSupported]
  +[JFXAnimojiEffectRenderer setupAVTMetalShaderCache]
  +[JFXAnimojiEffectRenderer animojiBufferSizeWithImageSize:interfaceOrientation:]

  // instance methods
  -[JFXAnimojiEffectRenderer clear]
  -[JFXAnimojiEffectRenderer renderer]
  -[JFXAnimojiEffectRenderer .cxx_destruct]
  -[JFXAnimojiEffectRenderer setRenderer:]
  -[JFXAnimojiEffectRenderer init]
  -[JFXAnimojiEffectRenderer flush]
  -[JFXAnimojiEffectRenderer avatarStore]
  -[JFXAnimojiEffectRenderer dealloc]
  -[JFXAnimojiEffectRenderer setAvatarStore:]
  -[JFXAnimojiEffectRenderer trackingLossDelegate]
  -[JFXAnimojiEffectRenderer setTrackingLossDelegate:]
  -[JFXAnimojiEffectRenderer preRecordedBlendShapesForFrame:captureOrientation:interfaceOrientation:]
  -[JFXAnimojiEffectRenderer createTextureCaches]
  -[JFXAnimojiEffectRenderer rendererLock]
  -[JFXAnimojiEffectRenderer setCurrentPuppet:]
  -[JFXAnimojiEffectRenderer clearRenderer_renderLocked]
  -[JFXAnimojiEffectRenderer currentPuppet]
  -[JFXAnimojiEffectRenderer workingSize]
  -[JFXAnimojiEffectRenderer setWorkingSize:]
  -[JFXAnimojiEffectRenderer inputBufferPool]
  -[JFXAnimojiEffectRenderer setInputBufferPool:]
  -[JFXAnimojiEffectRenderer setupInputBufferPoolForSize:]
  -[JFXAnimojiEffectRenderer renderPassLock]
  -[JFXAnimojiEffectRenderer newPixelBufferRenderedFromARFrame:withEffect:depthData:videoDimensions:fieldOfView:captureOrientation:interfaceOrientation:preRecordedBlendShapes:]
  -[JFXAnimojiEffectRenderer currentPuppetIsEqualTo:]
  -[JFXAnimojiEffectRenderer createNewRendererForPuppet:]
  -[JFXAnimojiEffectRenderer setupHeadPoseAndBlendShapesForFrame:forRenderer:captureOrientation:interfaceOrientation:isInitialSetup:]
  -[JFXAnimojiEffectRenderer updateCurrentRenderer:withPuppet:]
  -[JFXAnimojiEffectRenderer renderAnimoji:withPresentationTime:frame:depthData:completionBlock:]
  -[JFXAnimojiEffectRenderer JFX_focalLengthForFrame:workingSize:interfaceOrientation:]
  -[JFXAnimojiEffectRenderer JFX_getRenderer:forAnimojiEffect:primeFrame:captureOrientation:interfaceOrientation:]
  -[JFXAnimojiEffectRenderer JFX_blendShapesForRenderer:]
  -[JFXAnimojiEffectRenderer asynchronouslyLoadNewPuppets]
  -[JFXAnimojiEffectRenderer asyncLoadNewPuppet:currentPuppet:captureOrientation:interfaceOrientation:primeFrame:]
  -[JFXAnimojiEffectRenderer setupPoseForPreRecordedBlendShapes:forRenderer:captureOrientation:interfaceOrientation:withFrame:]
  -[JFXAnimojiEffectRenderer renderFrame:withEffect:depthData:videoDimensions:fieldOfView:captureOrientation:interfaceOrientation:preRecordedBlendShapes:completionBlock:]
  -[JFXAnimojiEffectRenderer setSystemTimeForAVTRenderer:]
  -[JFXAnimojiEffectRenderer JFX_depthDataToTexture:]
  -[JFXAnimojiEffectRenderer allowAntialiasing]
  -[JFXAnimojiEffectRenderer systemTimeForAVTRenderer]
  -[JFXAnimojiEffectRenderer JFX_inputBufferIsPortraitAspect:]
  -[JFXAnimojiEffectRenderer renderWithInputs:time:userContext:compositeContext:]
  -[JFXAnimojiEffectRenderer setAsynchronouslyLoadNewPuppets:]
  -[JFXAnimojiEffectRenderer setAllowAntialiasing:]
  -[JFXAnimojiEffectRenderer setRendererLock:]
  -[JFXAnimojiEffectRenderer metalTextureCache]
  -[JFXAnimojiEffectRenderer setMetalTextureCache:]
  -[JFXAnimojiEffectRenderer metalDepthTextureCache]
  -[JFXAnimojiEffectRenderer setMetalDepthTextureCache:]


JFXOrientationMonitor : NSObject
 @property  UIWindow *window
 @property  NSObject<OS_dispatch_queue> *darwinNotificationQ
 @property  int darwinNotificationToken
 @property  long long deviceOrientation
 @property  long long deviceOrientation_lock
 @property  long long deviceInterfaceOrientation
 @property  long long deviceInterfaceOrientation_lock
 @property  long long interfaceOrientation
 @property  long long interfaceOrientation_lock

  // class methods
  +[JFXOrientationMonitor deviceOrientation]
  +[JFXOrientationMonitor deviceInterfaceOrientation]
  +[JFXOrientationMonitor interfaceOrientation]
  +[JFXOrientationMonitor initialized]
  +[JFXOrientationMonitor window]
  +[JFXOrientationMonitor initializeWithViewController:]
  +[JFXOrientationMonitor initializeWithWindow:]
  +[JFXOrientationMonitor JFX_initLock]

  // instance methods
  -[JFXOrientationMonitor initWithWindow:]
  -[JFXOrientationMonitor setDeviceOrientation:]
  -[JFXOrientationMonitor deviceOrientation]
  -[JFXOrientationMonitor .cxx_destruct]
  -[JFXOrientationMonitor setInterfaceOrientation:]
  -[JFXOrientationMonitor setDeviceInterfaceOrientation:]
  -[JFXOrientationMonitor deviceInterfaceOrientation]
  -[JFXOrientationMonitor interfaceOrientation]
  -[JFXOrientationMonitor dealloc]
  -[JFXOrientationMonitor window]
  -[JFXOrientationMonitor JFX_initDarwinNotification]
  -[JFXOrientationMonitor JFX_UIApplicationDidChangeStatusBarOrientationNotification:]
  -[JFXOrientationMonitor JFX_deviceOrientation_darwinNotificationQ]
  -[JFXOrientationMonitor JFX_UIApplicationDidEnterBackgroundNotification:]
  -[JFXOrientationMonitor JFX_UIApplicationWillEnterForegroundNotification:]
  -[JFXOrientationMonitor deviceOrientation_lock]
  -[JFXOrientationMonitor setDeviceOrientation_lock:]
  -[JFXOrientationMonitor deviceInterfaceOrientation_lock]
  -[JFXOrientationMonitor setDeviceInterfaceOrientation_lock:]
  -[JFXOrientationMonitor interfaceOrientation_lock]
  -[JFXOrientationMonitor setInterfaceOrientation_lock:]
  -[JFXOrientationMonitor darwinNotificationToken]
  -[JFXOrientationMonitor setDarwinNotificationToken:]
  -[JFXOrientationMonitor darwinNotificationQ]


JFXFilterEffect : JFXEffect
  // class methods
  +[JFXFilterEffect supportsSecureCoding]

  // instance methods
  -[JFXFilterEffect initWithCoder:]
  -[JFXFilterEffect isEqual:]
  -[JFXFilterEffect type]
  -[JFXFilterEffect copyWithZone:]
  -[JFXFilterEffect encodeWithCoder:]
  -[JFXFilterEffect contentProperties]
  -[JFXFilterEffect renderEffect]
  -[JFXFilterEffect enablePresentationState:]
  -[JFXFilterEffect filterContentDataSource]
  -[JFXFilterEffect setForceRenderAtPosterFrame:]


CFXEffectBrowserContentPresenterViewController : UIViewController <CFXEffectBrowserContentPresenterDelegate>
 @property  <CFXEffectBrowserContentPresenterViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXEffectBrowserContentPresenterViewController .cxx_destruct]
  -[CFXEffectBrowserContentPresenterViewController setDelegate:]
  -[CFXEffectBrowserContentPresenterViewController delegate]
  -[CFXEffectBrowserContentPresenterViewController loadView]
  -[CFXEffectBrowserContentPresenterViewController effectBrowserViewController:presentExpandedAppViewController:animated:completion:]
  -[CFXEffectBrowserContentPresenterViewController effectBrowserViewController:dismissExpandedAppViewController:animated:completion:]
  -[CFXEffectBrowserContentPresenterViewController expandedAppViewControllerSizeForEffectBrowserViewController:]
  -[CFXEffectBrowserContentPresenterViewController CFX_alwaysExpandedAppHeight]
  -[CFXEffectBrowserContentPresenterViewController CFX_constraintsForAlwaysExpandedAppView:containerView:]
  -[CFXEffectBrowserContentPresenterViewController configureEffectBrowserContentPresentationForOrientation:]


JTAudioMediaItem : JFXMediaItem
  // instance methods
  -[JTAudioMediaItem info]
  -[JTAudioMediaItem init]
  -[JTAudioMediaItem isEqual:]
  -[JTAudioMediaItem dealloc]
  -[JTAudioMediaItem copyWithZone:]
  -[JTAudioMediaItem hasAudibleCharacteristic]
  -[JTAudioMediaItem initWithInfo:delegate:]


JFXTrackedEffectProperties : NSObject <NSCopying, NSSecureCoding>
 @property  long long internalTrackingType
 @property  BOOL disableTracking
 @property  long long trackingType
 @property  long long currentTrackingType
 @property  <JFXTrackedEffectPropertiesDelegate> *delegate

  // class methods
  +[JFXTrackedEffectProperties supportsSecureCoding]

  // instance methods
  -[JFXTrackedEffectProperties initWithCoder:]
  -[JFXTrackedEffectProperties .cxx_destruct]
  -[JFXTrackedEffectProperties setDelegate:]
  -[JFXTrackedEffectProperties init]
  -[JFXTrackedEffectProperties delegate]
  -[JFXTrackedEffectProperties copyWithZone:]
  -[JFXTrackedEffectProperties encodeWithCoder:]
  -[JFXTrackedEffectProperties trackingType]
  -[JFXTrackedEffectProperties currentTrackingType]
  -[JFXTrackedEffectProperties setTrackingType:]
  -[JFXTrackedEffectProperties setDisableTracking:]
  -[JFXTrackedEffectProperties setInternalTrackingType:]
  -[JFXTrackedEffectProperties isTrackingDisabled]
  -[JFXTrackedEffectProperties internalTrackingType]
  -[JFXTrackedEffectProperties enableTrackingState:]


CFXCameraStreamAdapter : NSObject
  // class methods
  +[CFXCameraStreamAdapter notifyExternalImageData:orientation:effectComposition:]


JFXPixelRotationSession : NSObject
 @property  JFXPixelBufferPool *pixelBufferPool
 @property  int rotationCardinalAngle
 @property  BOOL mirror

  // class methods
  +[JFXPixelRotationSession JFX_rotateFrameSet:toOrientation:pixelRotationSession:]
  +[JFXPixelRotationSession rotateFrameSetToUIOrientation:pixelRotationSession:]
  +[JFXPixelRotationSession rotateFrameSetToDeviceOrientation:pixelRotationSession:]

  // instance methods
  -[JFXPixelRotationSession pixelBufferPool]
  -[JFXPixelRotationSession .cxx_destruct]
  -[JFXPixelRotationSession mirror]
  -[JFXPixelRotationSession dealloc]
  -[JFXPixelRotationSession setPixelBufferPool:]
  -[JFXPixelRotationSession initWithRotation:mirror:]
  -[JFXPixelRotationSession createRotatedPixelBuffer:]
  -[JFXPixelRotationSession rotationCardinalAngle]
  -[JFXPixelRotationSession createRotatedFrameSet:]
  -[JFXPixelRotationSession JT_releaseImageRotationSession]


JFXDepthAsMatte : JFXMatting
  // class methods
  +[JFXDepthAsMatte _defaultMatteGeneratorPrefersDepth]
  +[JFXDepthAsMatte mattingDepthInputSize]

  // instance methods
  -[JFXDepthAsMatte dealloc]
  -[JFXDepthAsMatte initForFrameSet:]
  -[JFXDepthAsMatte alphaMatteForFrameSet:mattingPerfState:completionHandler:]


JTFormatters : NSObject
  // class methods
  +[JTFormatters dateFormatter]
  +[JTFormatters dateFormatterLongStyle]
  +[JTFormatters dateFormatterMonthDay]
  +[JTFormatters dateFormatterDayOfWeekMonthDayYear]
  +[JTFormatters dateFormatterDebugDate]
  +[JTFormatters dateComponentsFormatterHourMinSec]
  +[JTFormatters dateComponentsFormatterMinSec]


JFXOverlayEffect : JFXTextEffect <JFXTrackedEffectPropertiesDelegate>
 @property  JFXFaceTrackedEffectTransform *internalFaceTrackingTransform
 @property  BOOL hidden
 @property  NSString *accessibilityOverlayEffectLabel
 @property  JFXFaceTrackedEffectTransform *faceTrackingTransform
 @property  BOOL isEmoji
 @property  BOOL flipText
 @property  BOOL flipTail
 @property  JFXTrackedEffectProperties *trackingProps
 @property  BOOL isTracked
 @property  BOOL isCurrentlyTracking
 @property  BOOL prefersTrackingNotActivateAutomatically
 @property  BOOL isInteractiveEditing
 @property  BOOL isEditingFaceTrackingTransforms
 @property  NSString *dynamicTextString
 @property  unsigned long dynamicTextType

  // class methods
  +[JFXOverlayEffect supportsSecureCoding]
  +[JFXOverlayEffect effectIDToImageSequenceIDMap]
  +[JFXOverlayEffect dynamicTextPlaceholderMap]

  // instance methods
  -[JFXOverlayEffect initWithCoder:]
  -[JFXOverlayEffect maxCharacters]
  -[JFXOverlayEffect .cxx_destruct]
  -[JFXOverlayEffect isHidden]
  -[JFXOverlayEffect isEqual:]
  -[JFXOverlayEffect accessibilityName]
  -[JFXOverlayEffect type]
  -[JFXOverlayEffect copyWithZone:]
  -[JFXOverlayEffect isEmoji]
  -[JFXOverlayEffect encodeWithCoder:]
  -[JFXOverlayEffect isTracked]
  -[JFXOverlayEffect contentProperties]
  -[JFXOverlayEffect faceTrackingTransform]
  -[JFXOverlayEffect setFaceTrackingTransform:]
  -[JFXOverlayEffect trackingProps]
  -[JFXOverlayEffect isEditingFaceTrackingTransforms]
  -[JFXOverlayEffect enablePresentationState:]
  -[JFXOverlayEffect setForceRenderAtPosterFrame:]
  -[JFXOverlayEffect trackedEffectProperties:didChangeTrackingType:didChangeEnabled:]
  -[JFXOverlayEffect initWithEffectID:]
  -[JFXOverlayEffect JFX_posterFrameIsCachable]
  -[JFXOverlayEffect JFX_shouldEnableDynamicLineSpacingForDiacritics]
  -[JFXOverlayEffect setSingleLineScaleThreshold:]
  -[JFXOverlayEffect JFX_setupTrackingProps]
  -[JFXOverlayEffect customPickerRotation]
  -[JFXOverlayEffect customPrimaryFillColor]
  -[JFXOverlayEffect osfaToneMappingOption]
  -[JFXOverlayEffect setTrackingProps:]
  -[JFXOverlayEffect accessibilityOverlayEffectLabel]
  -[JFXOverlayEffect setAccessibilityOverlayEffectLabel:]
  -[JFXOverlayEffect prefersTrackingNotActivateAutomatically]
  -[JFXOverlayEffect setPrefersTrackingNotActivateAutomatically:]
  -[JFXOverlayEffect serializableEffectParameters]
  -[JFXOverlayEffect isAppearanceEqual:forPurpose:]
  -[JFXOverlayEffect isCurrentlyTracking]
  -[JFXOverlayEffect overlayContentDataSource]
  -[JFXOverlayEffect renderEffectWillLoad]
  -[JFXOverlayEffect setImageSequencePathToBundledAssets]
  -[JFXOverlayEffect hitAreaScale]
  -[JFXOverlayEffect pickerScale]
  -[JFXOverlayEffect dynamicTextType]
  -[JFXOverlayEffect isTextFlipped]
  -[JFXOverlayEffect supportsFlippingText]
  -[JFXOverlayEffect JFX_updateInteractiveMode]
  -[JFXOverlayEffect internalFaceTrackingTransform]
  -[JFXOverlayEffect JFX_applyEffectParametersForFaceTrackingTransform:]
  -[JFXOverlayEffect setInternalFaceTrackingTransform:]
  -[JFXOverlayEffect cornersAtTime:forcePosterFrame:includeDropShadow:scale:relativeTo:basisOrigin:]
  -[JFXOverlayEffect newPathsForHitTestingAtTime:forcePosterFrame:relativeTo:basisOrigin:adjustForMinimumSize:normalizedMinimumSize:outExpandedPath:]
  -[JFXOverlayEffect transformAtTime:forcePosterFrame:includeTransformAnimation:includePlayableAspectScale:relativeTo:basisOrigin:]
  -[JFXOverlayEffect addTransform:withComponentTime:relativeTo:basisOrigin:restrictToBounds:]
  -[JFXOverlayEffect effectCenterAtTime:forcePosterFrame:includeTransformAnimation:includePlayableAspectScale:relativeTo:basisOrigin:]
  -[JFXOverlayEffect setPosition:withComponentTime:relativeTo:basisOrigin:restrictToBounds:]
  -[JFXOverlayEffect imageFrameAtTime:forcePosterFrame:includeDropShadow:relativeTo:basisOrigin:]
  -[JFXOverlayEffect applyScaleToFitFrame:withComponentTime:relativeRect:]
  -[JFXOverlayEffect addTransform:withComponentTime:relativeTo:basisOrigin:]
  -[JFXOverlayEffect updateRenderSizeMaintainingAppearance:withComponentTime:]
  -[JFXOverlayEffect applyScaleToFitFrame:withComponentTime:relativeRect:restrictToBounds:]
  -[JFXOverlayEffect screenPointToEffectPoint:withComponentTime:relativeTo:basisOrigin:]
  -[JFXOverlayEffect effectPointToScreenPoint:effectToScreenTransform:viewSize:]
  -[JFXOverlayEffect JFX_adjustedMinimumSizeFromNormalizedMinimumSize:atTime:forcePosterFrame:relativeTo:basisOrigin:]
  -[JFXOverlayEffect setImageSequencePath:]
  -[JFXOverlayEffect JFX_hasPosterFrame]
  -[JFXOverlayEffect isInteractiveEditing]
  -[JFXOverlayEffect hasDynamicText]
  -[JFXOverlayEffect resetDynamicTextString]
  -[JFXOverlayEffect JFX_dynamicTextPlaceHolderText]
  -[JFXOverlayEffect JFX_stringAtIndex:]
  -[JFXOverlayEffect setFlipText:]
  -[JFXOverlayEffect setFlipTail:]
  -[JFXOverlayEffect isTailFlipped]
  -[JFXOverlayEffect supportsFlippingTail]
  -[JFXOverlayEffect suspendTracking]
  -[JFXOverlayEffect resumeTracking]
  -[JFXOverlayEffect hitAreaBoundingFrameAtTime:forcePosterFrame:includeDropShadow:adjustForMinimumSize:normalizedMinimumSize:relativeTo:basisOrigin:]
  -[JFXOverlayEffect objectBounds:time:forcePosterFrame:includeDropShadow:includeMasks:]
  -[JFXOverlayEffect transformAtTime:forcePosterFrame:relativeTo:basisOrigin:]
  -[JFXOverlayEffect rotatedAspectRatio]
  -[JFXOverlayEffect updateRenderSizeMaintainingRelativeSizeAndPosition:toSize:withComponentTime:]
  -[JFXOverlayEffect updateRenderSizeMaintainingSizeAndPositionRelativeToMedia:mediaSize:mediaContentMode:]
  -[JFXOverlayEffect rotate:aroundPoint:withComponentTime:relativeTo:basisOrigin:]
  -[JFXOverlayEffect hitTestPoint:atTime:forcePosterFrame:relativeTo:basisOrigin:adjustForMinimumSize:normalizedMinimumSize:]
  -[JFXOverlayEffect closeButtonInset]
  -[JFXOverlayEffect includeDropShadowWhenPositioningCloseButton]
  -[JFXOverlayEffect loopedRangeRenderIsCacheable]
  -[JFXOverlayEffect beginInteractiveEditing]
  -[JFXOverlayEffect endInteractiveEditing]
  -[JFXOverlayEffect beginEditingFaceTrackingTransforms]
  -[JFXOverlayEffect endEditingFaceTrackingTransforms]
  -[JFXOverlayEffect setDynamicTextString:]
  -[JFXOverlayEffect dynamicTextString]
  -[JFXOverlayEffect updateDynamicTextWithCompletionBlock:]
  -[JFXOverlayEffect wasDynamicTextSet]


JFXCapturePreviewFrameStats : NSObject
 @property  ^d times
 @property  BOOL dropped

  // instance methods
  -[JFXCapturePreviewFrameStats times]
  -[JFXCapturePreviewFrameStats dropped]
  -[JFXCapturePreviewFrameStats setDropped:]
  -[JFXCapturePreviewFrameStats printLabels]
  -[JFXCapturePreviewFrameStats printStats]


JFXCapturePreviewStats : NSObject
 @property  NSString *name

  // instance methods
  -[JFXCapturePreviewStats clear]
  -[JFXCapturePreviewStats add:]
  -[JFXCapturePreviewStats name]
  -[JFXCapturePreviewStats .cxx_destruct]
  -[JFXCapturePreviewStats setName:]
  -[JFXCapturePreviewStats init]
  -[JFXCapturePreviewStats print]
  -[JFXCapturePreviewStats _print_NoLock]
  -[JFXCapturePreviewStats runningAverage]
  -[JFXCapturePreviewStats printSync]


JFXThreadSafeDictionary : NSObject
 @property  NSMutableDictionary *dict
 @property  NSObject<OS_dispatch_queue> *concurrentQueue
 @property  unsigned long count
 @property  NSArray *allKeys
 @property  NSArray *allValues

  // instance methods
  -[JFXThreadSafeDictionary objectForKey:]
  -[JFXThreadSafeDictionary setDict:]
  -[JFXThreadSafeDictionary objectsForKeys:notFoundMarker:]
  -[JFXThreadSafeDictionary removeAllObjects]
  -[JFXThreadSafeDictionary concurrentQueue]
  -[JFXThreadSafeDictionary setValue:forKey:]
  -[JFXThreadSafeDictionary setObject:forKey:]
  -[JFXThreadSafeDictionary allValues]
  -[JFXThreadSafeDictionary .cxx_destruct]
  -[JFXThreadSafeDictionary count]
  -[JFXThreadSafeDictionary removeObjectForKey:]
  -[JFXThreadSafeDictionary removeObjectsForKeys:]
  -[JFXThreadSafeDictionary allKeys]
  -[JFXThreadSafeDictionary init]
  -[JFXThreadSafeDictionary addEntriesFromDictionary:]
  -[JFXThreadSafeDictionary dict]
  -[JFXThreadSafeDictionary setDictionary:]
  -[JFXThreadSafeDictionary setConcurrentQueue:]
  -[JFXThreadSafeDictionary valueForKey:]
  -[JFXThreadSafeDictionary dealloc]


CFXEffectFactoryDelegate : NSObject <JFXEffectFactoryDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXEffectFactoryDelegate sharedInstance]

  // instance methods
  -[CFXEffectFactoryDelegate CFX_filterEffectsWithFactory:]
  -[CFXEffectFactoryDelegate CFX_animojiEffectsWithFactory:]
  -[CFXEffectFactoryDelegate CFX_overlayEffectsWithFactory:]
  -[CFXEffectFactoryDelegate CFX_disableExpensiveFilters]
  -[CFXEffectFactoryDelegate CFX_isExpensiveEffectID:withFactory:]
  -[CFXEffectFactoryDelegate CFX_enoughPowerForStyleTransfer]
  -[CFXEffectFactoryDelegate CFX_styleTransferEffectIDs]
  -[CFXEffectFactoryDelegate effectFactory:effectIDsAvailableForType:completion:]
  -[CFXEffectFactoryDelegate styleTransferEffectIDsForFactory:]
  -[CFXEffectFactoryDelegate effectFactory:isStyleTransferEffectID:]
  -[CFXEffectFactoryDelegate effectFactory:createEffectContentDataSourceForEffectID:ofType:]
  -[CFXEffectFactoryDelegate JFXEffectClassForType:]


CFXApplicationState : NSObject
 @property  BOOL isRegisteredForEvents
 @property  long long applicationState

  // class methods
  +[CFXApplicationState sharedInstance]
  +[CFXApplicationState beginMonitoringApplicationState]

  // instance methods
  -[CFXApplicationState applicationWillResignActive:]
  -[CFXApplicationState applicationDidBecomeActive:]
  -[CFXApplicationState applicationDidEnterBackground:]
  -[CFXApplicationState registerForEvents]
  -[CFXApplicationState init]
  -[CFXApplicationState applicationState]
  -[CFXApplicationState setApplicationState:]
  -[CFXApplicationState dealloc]
  -[CFXApplicationState unregisterForEvents]
  -[CFXApplicationState isRegisteredForEvents]
  -[CFXApplicationState setIsRegisteredForEvents:]


JFXImageMTKView : MTKView <JFXImageViewRendering>
 @property  JTImage *jtImage
 @property  long long renderingType
 @property  BOOL flipX
 @property  BOOL flipY
 @property  BOOL enableDebugDrawing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXImageMTKView buildSamplerStateWithDevice:addressMode:filter:]
  +[JFXImageMTKView buildRenderPipelineWithLabel:vertexFunction:fragmentFunction:device:view:error:]

  // instance methods
  -[JFXImageMTKView initWithCoder:]
  -[JFXImageMTKView JFXImageMTKView_commonInit]
  -[JFXImageMTKView setRenderingType:]
  -[JFXImageMTKView .cxx_destruct]
  -[JFXImageMTKView layoutSubviews]
  -[JFXImageMTKView flipY]
  -[JFXImageMTKView renderingType]
  -[JFXImageMTKView cleanupTextureCache]
  -[JFXImageMTKView enableDebugDrawing]
  -[JFXImageMTKView setEnableDebugDrawing:]
  -[JFXImageMTKView setupTextureCache]
  -[JFXImageMTKView initWithFrame:device:]
  -[JFXImageMTKView flipX]
  -[JFXImageMTKView cleanupTextures]
  -[JFXImageMTKView setContentMode:]
  -[JFXImageMTKView setFlipX:]
  -[JFXImageMTKView dealloc]
  -[JFXImageMTKView updateDebugDrawing]
  -[JFXImageMTKView configureRenderPipelineForColorAttachments:]
  -[JFXImageMTKView drawRect:]
  -[JFXImageMTKView updateTexture]
  -[JFXImageMTKView setJtImage:]
  -[JFXImageMTKView jtImage]
  -[JFXImageMTKView updateVertices]
  -[JFXImageMTKView setFlipY:]


JFXMediaItem : NSObject <NSCopying>
 @property  long long mediaType
 @property  long long mediaState
 @property  long long mediaLoadState
 @property  int durationAt30fps
 @property  long long interfaceOrientationForDisplay
 @property  PVColorSpace *colorSpace
 @property  int playableMediaContentMode
 @property  <JFXMediaItemDelegate> *delegate

  // class methods
  +[JFXMediaItem supportsSecureCoding]

  // instance methods
  -[JFXMediaItem colorSpace]
  -[JFXMediaItem setMediaType:]
  -[JFXMediaItem .cxx_destruct]
  -[JFXMediaItem info]
  -[JFXMediaItem setMediaState:]
  -[JFXMediaItem setDelegate:]
  -[JFXMediaItem init]
  -[JFXMediaItem isEqual:]
  -[JFXMediaItem delegate]
  -[JFXMediaItem mediaType]
  -[JFXMediaItem dealloc]
  -[JFXMediaItem copyWithZone:]
  -[JFXMediaItem hasAudibleCharacteristic]
  -[JFXMediaItem interfaceOrientationForDisplay]
  -[JFXMediaItem initWithInfo:delegate:]
  -[JFXMediaItem canSaveToCameraRoll]
  -[JFXMediaItem durationAt30fps]
  -[JFXMediaItem playableMediaContentMode]
  -[JFXMediaItem canBeAddedToSequence]
  -[JFXMediaItem canHaveFilter]
  -[JFXMediaItem hasVisualCharacteristic]
  -[JFXMediaItem hasPhotoCharacteristic]
  -[JFXMediaItem mediaState]
  -[JFXMediaItem mediaLoadState]
  -[JFXMediaItem setMediaLoadState:]
  -[JFXMediaItem setDurationAt30fps:]
  -[JFXMediaItem setInterfaceOrientationForDisplay:]


JFXCapturePreviewProperties : NSObject
 @property  PVFrameSet *cameraFrameSet
 @property  long long renderCameraMode
 @property  {?=qiIq} renderTime
 @property  {CGSize=dd} renderOutputSize
 @property  {CGSize=dd} frameSize
 @property  double displayTimestamp
 @property  BOOL renderRequiresCrop
 @property  PVTaskToken *signPostToken
 @property  JFXCapturePreviewFrameStats *frameStats
 @property  JFXPerfTimer *startFrameTimer
 @property  NSDictionary *selfieBGBuffers
 @property  NSObject<OS_dispatch_semaphore> *selfieBGBufferLoadSem

  // instance methods
  -[JFXCapturePreviewProperties .cxx_destruct]
  -[JFXCapturePreviewProperties frameSize]
  -[JFXCapturePreviewProperties renderTime]
  -[JFXCapturePreviewProperties initWithCameraFrameSet:renderCameraMode:renderTime:renderOutputSize:frameSize:signPostToken:displayTimestamp:frameStats:startFrameTimer:]
  -[JFXCapturePreviewProperties renderCameraMode]
  -[JFXCapturePreviewProperties renderOutputSize]
  -[JFXCapturePreviewProperties initWithCameraFrameSet:renderCameraMode:renderTime:renderOutputSize:frameSize:]
  -[JFXCapturePreviewProperties renderRequiresCrop]
  -[JFXCapturePreviewProperties cameraFrameSet]
  -[JFXCapturePreviewProperties displayTimestamp]
  -[JFXCapturePreviewProperties signPostToken]
  -[JFXCapturePreviewProperties frameStats]
  -[JFXCapturePreviewProperties startFrameTimer]
  -[JFXCapturePreviewProperties selfieBGBuffers]
  -[JFXCapturePreviewProperties setSelfieBGBuffers:]
  -[JFXCapturePreviewProperties selfieBGBufferLoadSem]
  -[JFXCapturePreviewProperties setSelfieBGBufferLoadSem:]


JFXCapturePreviewRequestBuilder : NSObject
 @property  PVColorSpace *outputColorSpace
 @property  JFXCapturePreviewProperties *previewProperties
 @property  {PVTransformAnimationInfo={?=qiIq}{CGPoint=dd}dd} requestTransformAnimation

  // instance methods
  -[JFXCapturePreviewRequestBuilder .cxx_destruct]
  -[JFXCapturePreviewRequestBuilder outputColorSpace]
  -[JFXCapturePreviewRequestBuilder previewProperties]
  -[JFXCapturePreviewRequestBuilder JFX_getEffectsOfType:ofType:]
  -[JFXCapturePreviewRequestBuilder JFX_visibleEffects:]
  -[JFXCapturePreviewRequestBuilder requestTransformAnimation]
  -[JFXCapturePreviewRequestBuilder initWithPreviewProperties:outputColorSpace:]
  -[JFXCapturePreviewRequestBuilder createPVRenderRequestUsingAnimojiRenderer:metadataValidator:additionalTransform:effectStack:animojiTapPoint:animojiUsesInterfaceOrientation:requestHandler:]
  -[JFXCapturePreviewRequestBuilder setRequestTransformAnimation:]


JFXOverlayEffectFrame : JFXTextEffectFrame
 @property  long long trackingType
 @property  JFXOverlayEffectTransforms *transforms
 @property  {CGPoint=dd} overlayCenter
 @property  BOOL isTrackedButTrackingUnavailable

  // class methods
  +[JFXOverlayEffectFrame frameWithEffect:relativeToSize:origin:time:forcePosterFrame:includeDropShadow:includeTextFrames:]

  // instance methods
  -[JFXOverlayEffectFrame trackingType]
  -[JFXOverlayEffectFrame setTrackingType:]
  -[JFXOverlayEffectFrame initWithEffect:relativeToSize:origin:time:forcePosterFrame:includeDropShadow:includeTextFrames:]
  -[JFXOverlayEffectFrame setOverlayCenter:]
  -[JFXOverlayEffectFrame isTrackedButTrackingUnavailable]
  -[JFXOverlayEffectFrame overlayCenter]


CFXOverlayEffectPickerView : CFXEffectPickerView <JTCollectionViewDelegate>
 @property  UIView *contentView
 @property  JTCollectionView *collectionView
 @property  JTCollectionViewFlowLayout *collectionViewLayout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXOverlayEffectPickerView .cxx_destruct]
  -[CFXOverlayEffectPickerView collectionViewLayout]
  -[CFXOverlayEffectPickerView contentView]
  -[CFXOverlayEffectPickerView collectionView]
  -[CFXOverlayEffectPickerView setCollectionView:]
  -[CFXOverlayEffectPickerView setCollectionViewLayout:]
  -[CFXOverlayEffectPickerView setContentView:]
  -[CFXOverlayEffectPickerView subviewsDidLoad]
  -[CFXOverlayEffectPickerView effectPickerNibName]
  -[CFXOverlayEffectPickerView effectPickerCellNibName]
  -[CFXOverlayEffectPickerView effectPickerCellReuseIdentifier]
  -[CFXOverlayEffectPickerView updateThumbnailColumnSizeForCollectionSize]
  -[CFXOverlayEffectPickerView didResizeCollectionViewToSize:]


JFXMediaDataReaderFactory : NSObject
  // class methods
  +[JFXMediaDataReaderFactory sharedInstance]

  // instance methods
  -[JFXMediaDataReaderFactory createARMetadataReaderWithCreationAttributesProvider:name:]
  -[JFXMediaDataReaderFactory createDepthDataReaderWithCreationAttributesProvider:name:]


JFXAVPlayerViewController : AVPlayerViewController <JFXAVPlayerViewer>
 @property  AVPlayer *player
 @property  NSString *videoGravity
 @property  {CGSize=dd} displaySize
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoBounds
 @property  BOOL readyForDisplay
 @property  BOOL showAVControls
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXAVPlayerViewController viewDidLoad]
  -[JFXAVPlayerViewController viewWillAppear:]
  -[JFXAVPlayerViewController displaySize]
  -[JFXAVPlayerViewController setShowAVControls:]
  -[JFXAVPlayerViewController showAVControls]
  -[JFXAVPlayerViewController configureDisplayAttributesForColorSpace:]


JTCaptureMediaItem : JFXMediaItem
  // instance methods
  -[JTCaptureMediaItem init]
  -[JTCaptureMediaItem isEqual:]
  -[JTCaptureMediaItem copyWithZone:]


JFXTextEffect : JFXEffect
 @property  UIColor *customTextEditTintColor
 @property  BOOL textBakedIn

  // instance methods
  -[JFXTextEffect strings]
  -[JFXTextEffect maxCharacters]
  -[JFXTextEffect copyWithZone:]
  -[JFXTextEffect contentProperties]
  -[JFXTextEffect enableDynamicLineSpacingForDiacritics:]
  -[JFXTextEffect setupLocalizedText]
  -[JFXTextEffect isAppearanceEqual:forPurpose:]
  -[JFXTextEffect localizedDefaultText]
  -[JFXTextEffect localizedDefaultFontName]
  -[JFXTextEffect editUIProperties]
  -[JFXTextEffect defaultAttributedString:]
  -[JFXTextEffect setString:atIndex:]
  -[JFXTextEffect textEffectContentDataSource]
  -[JFXTextEffect setFont:atIndex:]
  -[JFXTextEffect setFontSize:atIndex:]
  -[JFXTextEffect textFramesAtTime:forcePosterFrame:includeDropShadow:relativeTo:basisOrigin:]
  -[JFXTextEffect textBoundsAtTime:forcePosterFrame:includeDropShadow:includeMasks:]
  -[JFXTextEffect textCornersAtIndex:time:forcePosterFrame:includeDropShadow:scale:relativeTo:basisOrigin:]
  -[JFXTextEffect beginTextEditing]
  -[JFXTextEffect endTextEditing]
  -[JFXTextEffect setFontScale:atIndex:]
  -[JFXTextEffect defaultTypingAttributes:]
  -[JFXTextEffect textFrameAtIndex:time:forcePosterFrame:includeDropShadow:relativeTo:basisOrigin:]
  -[JFXTextEffect textBounds:atIndex:time:forcePosterFrame:includeDropShadow:includeMasks:]
  -[JFXTextEffect textHitTest:time:relativeTo:basisOrigin:]
  -[JFXTextEffect textBakedIn]
  -[JFXTextEffect customTextEditColor]
  -[JFXTextEffect customTextEditTintColor]
  -[JFXTextEffect indexOfTextObjectUsedForEditViewTransform]


CFXClip : NSObject <NSCopying, JFXPlayableElement>
 @property  NSString *uuid
 @property  JFXMediaItem *mediaItem
 @property  NSMutableArray *filters
 @property  NSMutableArray *overlays
 @property  NSMutableArray *animojis
 @property  int presentationTime
 @property  int duration
 @property  int mediaStartOffset
 @property  long long mediaType
 @property  long long mediaInterfaceOrientationForDisplay
 @property  {CGSize=dd} mediaSize
 @property  NSURL *metadataURL
 @property  NSData *originalAnimojiDataRepresentation
 @property  unsigned long originalAnimojiVersionNumber
 @property  PVTransformAnimation *transformAnimation
 @property  int transformInitialStartOffset
 @property  long long playableAspectRatio
 @property  long long playableAspectRatioPreservationMode
 @property  BOOL isAssetUnavailable
 @property  BOOL isAssetLoaded
 @property  BOOL isStill
 @property  BOOL isVideo
 @property  BOOL shouldRenderVideoAsBlack
 @property  {CGSize=dd} playableMediaSizeWithTransform
 @property  int playableMediaContentMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  JFXMediaReaderCreationAVAssetTrackAttributes *depthDataReaderAssetTrackAttributes
 @property  JFXMediaReaderCreationAVAssetTrackAttributes *arMetadataReaderAssetTrackAttributes

  // class methods
  +[CFXClip defaultClip]
  +[CFXClip cfx_writeProxyImageToURL:fromImageAtURL:maximumImageDimension:outColorSpace:]
  +[CFXClip cfx_createVideoClipWithLocalURL:effectStack:completionHandler:]
  +[CFXClip cfx_createStillClipPreviewWithLocalURL:maximumImageDimension:effectStack:completionHandler:]
  +[CFXClip createClipWithLocalURL:effectStack:isVideo:maximumImageDimension:completionHandler:]
  +[CFXClip createCaptureClip]

  // instance methods
  -[CFXClip setFilters:]
  -[CFXClip isVideo]
  -[CFXClip overlays]
  -[CFXClip filters]
  -[CFXClip .cxx_destruct]
  -[CFXClip setDuration:]
  -[CFXClip setMetadataURL:]
  -[CFXClip presentationTime]
  -[CFXClip setPresentationTime:]
  -[CFXClip init]
  -[CFXClip isEqual:]
  -[CFXClip isAssetLoaded]
  -[CFXClip setMediaItem:]
  -[CFXClip mediaItem]
  -[CFXClip uuid]
  -[CFXClip mediaType]
  -[CFXClip metadataURL]
  -[CFXClip dealloc]
  -[CFXClip copyWithZone:]
  -[CFXClip isStill]
  -[CFXClip setOverlays:]
  -[CFXClip setUuid:]
  -[CFXClip duration]
  -[CFXClip initWithMediaItem:]
  -[CFXClip mediaSize]
  -[CFXClip removeAllEffects]
  -[CFXClip transformAnimation]
  -[CFXClip effectStack]
  -[CFXClip removeAllEffectsOfType:]
  -[CFXClip effectsOfType:]
  -[CFXClip mediaInterfaceOrientationForDisplay]
  -[CFXClip mediaStartOffset]
  -[CFXClip playableRectInOutputSize:]
  -[CFXClip addEffect:]
  -[CFXClip setTransformAnimation:]
  -[CFXClip hasPlayableEffectOfType:]
  -[CFXClip playableEffectsOfType:]
  -[CFXClip playableMediaSizeWithTransform]
  -[CFXClip playableEffectStack]
  -[CFXClip playableAspectRatio]
  -[CFXClip playableAspectRatioPreservationMode]
  -[CFXClip animojis]
  -[CFXClip setAnimojis:]
  -[CFXClip playableScaleInOutputSize:]
  -[CFXClip playableMediaContentMode]
  -[CFXClip arMetadataReaderAssetTrackAttributes]
  -[CFXClip depthDataReaderAssetTrackAttributes]
  -[CFXClip stringForMediaType:]
  -[CFXClip cfx_clipType]
  -[CFXClip addEffectStack:]
  -[CFXClip cfx_isAssetMissing]
  -[CFXClip cfx_isAssetInTrash]
  -[CFXClip transformInitialStartOffset]
  -[CFXClip updateTransformPresentationTimeRange]
  -[CFXClip cfx_addEffect:]
  -[CFXClip cfx_removeAllEffectsOfType:]
  -[CFXClip cfx_effectsOfType:]
  -[CFXClip CFX_removeStyleTranferOnUnsupportedDevice:]
  -[CFXClip effectStackExcludingType:]
  -[CFXClip hasMetadataAsset]
  -[CFXClip rectFromNormalizedPlayableRect:inOutputSize:]
  -[CFXClip playableEffectStackExcludingType:]
  -[CFXClip isAssetUnavailable]
  -[CFXClip shouldRenderVideoAsBlack]
  -[CFXClip originalAnimojiDataRepresentation]
  -[CFXClip originalAnimojiVersionNumber]
  -[CFXClip setMediaInterfaceOrientationForDisplay:]
  -[CFXClip removeEffect:]
  -[CFXClip setOriginalAnimojiDataRepresentation:]
  -[CFXClip setOriginalAnimojiVersionNumber:]
  -[CFXClip setTransformInitialStartOffset:]


CFXAnalyticsKeys : JFXAnalyticsKeys
  // class methods
  +[CFXAnalyticsKeys allIncrementScalarEvents]
  +[CFXAnalyticsKeys allDistributionEvents]
  +[CFXAnalyticsKeys allEventNames]
  +[CFXAnalyticsKeys allIncrementScalarEffectEvents]


JFXAVMediaDataReader : NSObject <JFXMediaDataReader>
 @property  long long status
 @property  NSError *error
 @property  AVAssetTrack *assetTrack
 @property  AVAsset *asset
 @property  AVAssetReader *assetReader
 @property  AVAssetReaderTrackOutput *assetReaderTrackOutput
 @property  {?=qiIq} minimumFrameDuration
 @property  unsigned long signPostID
 @property  {?={?=qiIq}{?=qiIq}} readableTimeRange
 @property  {?={?=qiIq}{?=qiIq}} currentReadingRange
 @property  BOOL isScrubbing
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXAVMediaDataReader isScrubbing]
  -[JFXAVMediaDataReader name]
  -[JFXAVMediaDataReader setIsScrubbing:]
  -[JFXAVMediaDataReader .cxx_destruct]
  -[JFXAVMediaDataReader setAsset:]
  -[JFXAVMediaDataReader didFailWithError:]
  -[JFXAVMediaDataReader seekToTime:]
  -[JFXAVMediaDataReader asset]
  -[JFXAVMediaDataReader assetTrack]
  -[JFXAVMediaDataReader status]
  -[JFXAVMediaDataReader setStatus:]
  -[JFXAVMediaDataReader assetReaderTrackOutput]
  -[JFXAVMediaDataReader minimumFrameDuration]
  -[JFXAVMediaDataReader setError:]
  -[JFXAVMediaDataReader error]
  -[JFXAVMediaDataReader setAssetReader:]
  -[JFXAVMediaDataReader assetReader]
  -[JFXAVMediaDataReader currentReadingRange]
  -[JFXAVMediaDataReader beginReadingAtTimeRange:]
  -[JFXAVMediaDataReader beginReading]
  -[JFXAVMediaDataReader readableTimeRange]
  -[JFXAVMediaDataReader signPostID]
  -[JFXAVMediaDataReader createAssetReaderTrackOutput]
  -[JFXAVMediaDataReader didUpdateReadingRange]
  -[JFXAVMediaDataReader readAheadToTime:]
  -[JFXAVMediaDataReader readAndDiscardRemainingAvailableData]
  -[JFXAVMediaDataReader hasRemainingAvailableData]
  -[JFXAVMediaDataReader startTimeOfCurrentData]
  -[JFXAVMediaDataReader initWithAVAssetTrack:withName:]
  -[JFXAVMediaDataReader JFX_allMediaTimeRange]
  -[JFXAVMediaDataReader setReadableTimeRange:]
  -[JFXAVMediaDataReader JFX_resetReaderFromTime:]
  -[JFXAVMediaDataReader beginReadingAtTime:]
  -[JFXAVMediaDataReader createAssetReader]
  -[JFXAVMediaDataReader JFX_configureAssetReaderToReadFromTime:]
  -[JFXAVMediaDataReader setAssetReaderTrackOutput:]
  -[JFXAVMediaDataReader JFX_configureAssetReaderTrackOutput]
  -[JFXAVMediaDataReader prepareAssetReaderForReading]
  -[JFXAVMediaDataReader setCurrentReadingRange:]
  -[JFXAVMediaDataReader JFX_resetReaderIfNecessaryToSeekFromStartTimeOfCurrentData:toTime:]
  -[JFXAVMediaDataReader JFX_shouldResetReaderWhenSeekingFromStartTimeOfCurrentData:toTime:]
  -[JFXAVMediaDataReader JFX_resetReadingRangeWhenScrubbingToTime:]
  -[JFXAVMediaDataReader seekingAheadIsExpensiveFromTime:toTime:]
  -[JFXAVMediaDataReader cancelReadingForReaderReset]
  -[JFXAVMediaDataReader JFX_releaseReadersForReset]
  -[JFXAVMediaDataReader setAssetTrack:]
  -[JFXAVMediaDataReader setSignPostID:]


CFXEffectPickerView : UIView <UICollectionViewDataSource, JFXEffectPreviewManagerDelegate, UICollectionViewDelegateFlowLayout>
 @property  JFXEffectStaticPreviewOptions *staticPreviewOptions
 @property  BOOL previewingIsWaitingForConfiguration
 @property  JFXEffectPreviewManager *previewManager
 @property  {CGSize=dd} cellSize
 @property  {CGSize=dd} thumbnailSize
 @property  BOOL continuousPreviewEnabled
 @property  UIImage *previewBackgroundImage
 @property  BOOL useCameraForContinuousPreview
 @property  <CFXEffectPickerViewDataSource> *dataSource
 @property  <CFXEffectPickerViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXEffectPickerView collectionView:cellForItemAtIndexPath:]
  -[CFXEffectPickerView collectionView:numberOfItemsInSection:]
  -[CFXEffectPickerView setThumbnailSize:]
  -[CFXEffectPickerView collectionView:layout:sizeForItemAtIndexPath:]
  -[CFXEffectPickerView initWithCoder:]
  -[CFXEffectPickerView collectionView:didSelectItemAtIndexPath:]
  -[CFXEffectPickerView setDataSource:]
  -[CFXEffectPickerView .cxx_destruct]
  -[CFXEffectPickerView collectionViewLayout]
  -[CFXEffectPickerView contentView]
  -[CFXEffectPickerView cellSize]
  -[CFXEffectPickerView setDelegate:]
  -[CFXEffectPickerView dataSource]
  -[CFXEffectPickerView collectionView]
  -[CFXEffectPickerView scrollViewDidScroll:]
  -[CFXEffectPickerView initWithFrame:]
  -[CFXEffectPickerView delegate]
  -[CFXEffectPickerView thumbnailSize]
  -[CFXEffectPickerView reloadData]
  -[CFXEffectPickerView didScrollCollectionView]
  -[CFXEffectPickerView setCellSize:]
  -[CFXEffectPickerView configureCell:]
  -[CFXEffectPickerView sharedInit]
  -[CFXEffectPickerView startPreviewing]
  -[CFXEffectPickerView stopPreviewing]
  -[CFXEffectPickerView subviewsDidLoad]
  -[CFXEffectPickerView updatePreviewEffectsWhenReloadComplete]
  -[CFXEffectPickerView applyEffectAtCellIndex:]
  -[CFXEffectPickerView effectPickerNibName]
  -[CFXEffectPickerView effectPickerCellNibName]
  -[CFXEffectPickerView effectPickerCellReuseIdentifier]
  -[CFXEffectPickerView didSelectItemAtCellIndex:]
  -[CFXEffectPickerView orientationDidChange]
  -[CFXEffectPickerView didResizeCollectionViewToSize:]
  -[CFXEffectPickerView collectionView:didResize:]
  -[CFXEffectPickerView previewManager]
  -[CFXEffectPickerView previewingIsWaitingForConfiguration]
  -[CFXEffectPickerView setPreviewingIsWaitingForConfiguration:]
  -[CFXEffectPickerView setPreviewManager:]
  -[CFXEffectPickerView isContinuousPreviewEnabled]
  -[CFXEffectPickerView isUsingCameraForContinuousPreview]
  -[CFXEffectPickerView previewBackgroundImage]
  -[CFXEffectPickerView previewSizeInPixels]
  -[CFXEffectPickerView setStaticPreviewOptions:]
  -[CFXEffectPickerView staticPreviewOptions]
  -[CFXEffectPickerView updatePreviewEffects]
  -[CFXEffectPickerView effectIndexForCellIndex:]
  -[CFXEffectPickerView numberOfCollectionViewItems]
  -[CFXEffectPickerView effectDidLoadForCell:effect:]
  -[CFXEffectPickerView effectPreviewManager:didUpdateContinousPreviewsForEffectIDs:]
  -[CFXEffectPickerView setContinuousPreviewEnabled:]
  -[CFXEffectPickerView setUseCameraForContinuousPreview:]
  -[CFXEffectPickerView setPreviewBackgroundImage:]


JFXPixelBufferPool : NSObject
 @property  {CGSize=dd} size
 @property  unsigned int type

  // instance methods
  -[JFXPixelBufferPool initWithSize:]
  -[JFXPixelBufferPool type]
  -[JFXPixelBufferPool size]
  -[JFXPixelBufferPool dealloc]
  -[JFXPixelBufferPool createPixelBuffer]
  -[JFXPixelBufferPool initWithSize:type:]


JFXCustomImageSensor : NSObject <ARSensor>
 @property  <ARSensorDelegate> *delegate
 @property  unsigned long powerUsage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXCustomImageSensor .cxx_destruct]
  -[JFXCustomImageSensor stop]
  -[JFXCustomImageSensor setDelegate:]
  -[JFXCustomImageSensor delegate]
  -[JFXCustomImageSensor start]
  -[JFXCustomImageSensor providedDataTypes]
  -[JFXCustomImageSensor createImageDataFromFrameSet:captureDevice:captureSession:trackedFacesMetadata:faceObjectsMetadata:]
  -[JFXCustomImageSensor outputSensorData:]


JFXEffectCategory : NSObject
 @property  NSString *categoryID
 @property  NSString *displayName
 @property  NSArray *effectIDs
 @property  int effectType
 @property  BOOL isNewCategory
 @property  BOOL containsNewEffects

  // instance methods
  -[JFXEffectCategory displayName]
  -[JFXEffectCategory .cxx_destruct]
  -[JFXEffectCategory setCategoryID:]
  -[JFXEffectCategory effectType]
  -[JFXEffectCategory setDisplayName:]
  -[JFXEffectCategory categoryID]
  -[JFXEffectCategory setEffectType:]
  -[JFXEffectCategory effectIDs]
  -[JFXEffectCategory initWithCategoryID:forEffectType:displayName:effectIDs:isNewCategory:containsNewEffects:]
  -[JFXEffectCategory setEffectIDs:]
  -[JFXEffectCategory isNewCategory]
  -[JFXEffectCategory containsNewEffects]


JFXEffectFactory : NSObject
  // class methods
  +[JFXEffectFactory sharedInstance]
  +[JFXEffectFactory setDelegate:]
  +[JFXEffectFactory delegate]

  // instance methods
  -[JFXEffectFactory createEffectForType:fromID:withProperties:]
  -[JFXEffectFactory effectCategoriesForType:completion:]
  -[JFXEffectFactory isStyleTransferEffectID:]
  -[JFXEffectFactory catalogVersion]
  -[JFXEffectFactory styleTransferEffectIDs]
  -[JFXEffectFactory effectIDsForType:completion:]
  -[JFXEffectFactory effectsForType:completion:]
  -[JFXEffectFactory effectsForType:fromCategory:]
  -[JFXEffectFactory noneEffectIDForType:]
  -[JFXEffectFactory createEffectContentDataSourceForEffectID:ofType:]


JFXVideoDecoderInterface : NSObject
 @property  NSObject<OS_dispatch_semaphore> *frameSemaphore
 @property  ^{__CVBuffer=} imageBuffer

  // instance methods
  -[JFXVideoDecoderInterface .cxx_destruct]
  -[JFXVideoDecoderInterface init]
  -[JFXVideoDecoderInterface setImageBuffer:]
  -[JFXVideoDecoderInterface imageBuffer]
  -[JFXVideoDecoderInterface dealloc]
  -[JFXVideoDecoderInterface frameSemaphore]
  -[JFXVideoDecoderInterface setFrameSemaphore:]
  -[JFXVideoDecoderInterface initWithFormatDescription:]
  -[JFXVideoDecoderInterface decodeFrame:]


JFXEffect : NSObject <JFXEffectAssetProviderProtocol, JFXEffectPreviewAssetProviderProtocol, JFXEffectRenderingAssetProviderProtocol, NSSecureCoding, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL arePreviewingAssetsLocal
 @property  BOOL areRenderingAssetsLocal
 @property  double outputAspect
 @property  NSString *effectID
 @property  BOOL isNone
 @property  int type
 @property  float opacity
 @property  BOOL hidden
 @property  <JFXEffectContentDataSource> *contentDataSource
 @property  unsigned long contentAvailability
 @property  BOOL isContentAvailable
 @property  BOOL isContentNew
 @property  NSString *contentVersion
 @property  BOOL forceRenderAtPosterFrame
 @property  {CGSize=dd} renderSize
 @property  long long playableAspectRatio
 @property  long long playableAspectRatioPreservationMode
 @property  NSString *motionDocumentFolderPath
 @property  NSDictionary *effectParameters
 @property  BOOL forceDisableLooping
 @property  BOOL renderEffectResourcesAreReady
 @property  PVMatrix44Double *topLevelTransformObject
 @property  {?=[4]} topLevelTransform
 @property  PVTransformAnimation *transformAnimation

  // class methods
  +[JFXEffect supportsSecureCoding]
  +[JFXEffect effectIDIsNone:]
  +[JFXEffect defaultPlayableAspectRatio]
  +[JFXEffect defaultPlayableAspectRatioPreservationMode]

  // instance methods
  -[JFXEffect displayName]
  -[JFXEffect setOpacity:]
  -[JFXEffect opacity]
  -[JFXEffect initWithCoder:]
  -[JFXEffect effectParameters]
  -[JFXEffect isNone]
  -[JFXEffect .cxx_destruct]
  -[JFXEffect isHidden]
  -[JFXEffect setParameter:forKey:]
  -[JFXEffect isEqual:]
  -[JFXEffect contentVersion]
  -[JFXEffect setRenderSize:]
  -[JFXEffect isContentAvailable]
  -[JFXEffect accessibilityName]
  -[JFXEffect setEffectParameters:]
  -[JFXEffect type]
  -[JFXEffect dealloc]
  -[JFXEffect copyWithZone:]
  -[JFXEffect renderSize]
  -[JFXEffect setHDR:]
  -[JFXEffect encodeWithCoder:]
  -[JFXEffect setHidden:]
  -[JFXEffect parameterForKey:]
  -[JFXEffect contentProperties]
  -[JFXEffect transformAnimation]
  -[JFXEffect effectID]
  -[JFXEffect playableRectInOutputSize:]
  -[JFXEffect topLevelTransformObject]
  -[JFXEffect setTransformAnimation:]
  -[JFXEffect renderEffect]
  -[JFXEffect playableAspectRatio]
  -[JFXEffect setPlayableAspectRatio:]
  -[JFXEffect playableAspectRatioPreservationMode]
  -[JFXEffect setPlayableAspectRatioPreservationMode:]
  -[JFXEffect enablePresentationState:]
  -[JFXEffect contentDataSource]
  -[JFXEffect contentAvailability]
  -[JFXEffect isContentNew]
  -[JFXEffect setForceRenderAtPosterFrame:]
  -[JFXEffect initWithEffectID:]
  -[JFXEffect serializableEffectParameters]
  -[JFXEffect isAppearanceEqual:forPurpose:]
  -[JFXEffect renderEffectWillLoad]
  -[JFXEffect addEffectParameters:]
  -[JFXEffect removeEffectParameters:]
  -[JFXEffect playableScaleInOutputSize:]
  -[JFXEffect addTransform:withComponentTime:relativeTo:basisOrigin:ignoreTranslation:]
  -[JFXEffect topLevelTransform]
  -[JFXEffect setTopLevelTransform:]
  -[JFXEffect addTransform:withComponentTime:relativeTo:basisOrigin:]
  -[JFXEffect loopedRangeRenderIsCacheable]
  -[JFXEffect forceRenderAtPosterFrame]
  -[JFXEffect setOutputAspect:]
  -[JFXEffect isConfiguredForOutputAspect:]
  -[JFXEffect _createCachedRenderEffect_noLock]
  -[JFXEffect motionDocumentFolderPath]
  -[JFXEffect JFX_defaultMotionDocumentFolderLocalURL]
  -[JFXEffect parametersClassWhitelist]
  -[JFXEffect setTopLevelTransformObject:]
  -[JFXEffect requestAllAssetsWithOptions:progressHandler:completionHandler:]
  -[JFXEffect requestAssetWithOptions:progressHandler:completionHandler:]
  -[JFXEffect cancelAssetRequest:]
  -[JFXEffect availableAssetsWithFilteringOptionsArray:]
  -[JFXEffect availableAssetsWithFilteringOptions:]
  -[JFXEffect localAssetsWithFilteringOptions:]
  -[JFXEffect describeRequest:]
  -[JFXEffect updatePriorityForAssetRequest:newPriority:]
  -[JFXEffect setBuildInAnimation:]
  -[JFXEffect buildInAnimation]
  -[JFXEffect renderEffectResourcesAreReady]
  -[JFXEffect outputAspect]
  -[JFXEffect isConfiguredForOutputAspectMatchingSize:]
  -[JFXEffect setForceDisableLooping:]
  -[JFXEffect forceDisableLooping]
  -[JFXEffect setRenderStartOffset:]
  -[JFXEffect rangeForPresentationRange:]
  -[JFXEffect isAppearanceEqual:]
  -[JFXEffect loadRenderEffect]
  -[JFXEffect loadRenderEffectInBackgroundWithCompletionOnMainQueue:]
  -[JFXEffect loadRenderEffectOnQueue:completion:]
  -[JFXEffect setMotionDocumentFolderPath:]
  -[JFXEffect _convertRenderEffectPoints:toBasisRect:basisOrigin:]
  -[JFXEffect _convertRenderEffectPoints:numPoints:toBasisRect:basisOrigin:]
  -[JFXEffect _convertRenderEffectPoints:numPoints:fromBasisRect:basisOrigin:]
  -[JFXEffect _affineTransformFromEffectRect:toSize:basisOrigin:]
  -[JFXEffect topLevelTransformRelativeTo:basisOrigin:]
  -[JFXEffect setTopLevelTransform:relativeTo:basisOrigin:]
  -[JFXEffect setParentTransformAnimation:]
  -[JFXEffect setTopLevelAdditionalScale:]
  -[JFXEffect removeTopLevelAdditionalScale]
  -[JFXEffect requestAssetWithOptions:progressAndCancellationHandler:completionHandler:]
  -[JFXEffect registerMotionDocumentWithinAssets:]
  -[JFXEffect requestAllAssetsWithOptions:progressAndCancellationHandler:completionHandler:]
  -[JFXEffect arePreviewingAssetsLocal]
  -[JFXEffect requestPreviewingAssetsWithPriority:onlyThumbnailAssetWhenAvailable:progressHandler:completionHandler:]
  -[JFXEffect effectWillRenderPreviewWithOptions:]
  -[JFXEffect areRenderingAssetsLocal]
  -[JFXEffect requestRenderingAssetsWithPriority:progressHandler:completionHandler:]


JFXARKitCameraSessionController : NSObject <ARSessionDelegate>
 @property  ARSession *arSession
 @property  ARFaceTrackingConfiguration *faceTrackingConfiguration
 @property  JFXCustomImageSensor *customImageSensor
 @property  CMMotionManager *motionManager
 @property  ARMotionSensor *motionSensor
 @property  ARDeviceOrientationSensor *orientationSensor
 @property  AVCaptureSession *underlyingAVCaptureSession
 @property  AVCaptureDevice *underlyingAVCaptureDevice
 @property  BOOL running
 @property  NSObject<OS_dispatch_queue> *arSessionDelegateQueue
 @property  <JFXARKitFrameDelegate> *frameDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXARKitCameraSessionController setRunning:]
  -[JFXARKitCameraSessionController .cxx_destruct]
  -[JFXARKitCameraSessionController session:didUpdateFrame:]
  -[JFXARKitCameraSessionController running]
  -[JFXARKitCameraSessionController dealloc]
  -[JFXARKitCameraSessionController setFrameDelegate:]
  -[JFXARKitCameraSessionController frameDelegate]
  -[JFXARKitCameraSessionController motionManager]
  -[JFXARKitCameraSessionController setMotionManager:]
  -[JFXARKitCameraSessionController arSession]
  -[JFXARKitCameraSessionController processExternalSensorData:]
  -[JFXARKitCameraSessionController setUnderlyingAVCaptureSession:]
  -[JFXARKitCameraSessionController setUnderlyingAVCaptureDevice:]
  -[JFXARKitCameraSessionController JT_setupARSession:]
  -[JFXARKitCameraSessionController stopARSession]
  -[JFXARKitCameraSessionController faceTrackingConfiguration]
  -[JFXARKitCameraSessionController customImageSensor]
  -[JFXARKitCameraSessionController underlyingAVCaptureDevice]
  -[JFXARKitCameraSessionController underlyingAVCaptureSession]
  -[JFXARKitCameraSessionController setArSession:]
  -[JFXARKitCameraSessionController arSessionDelegateQueue]
  -[JFXARKitCameraSessionController setCustomImageSensor:]
  -[JFXARKitCameraSessionController setMotionSensor:]
  -[JFXARKitCameraSessionController setOrientationSensor:]
  -[JFXARKitCameraSessionController setFaceTrackingConfiguration:]
  -[JFXARKitCameraSessionController motionSensor]
  -[JFXARKitCameraSessionController orientationSensor]
  -[JFXARKitCameraSessionController initWithAVCaptureSession:captureDevice:arSessionDelegateQueue:]
  -[JFXARKitCameraSessionController startARSession]
  -[JFXARKitCameraSessionController provideSensorFrameSet:trackedFacesMetadata:faceObjectsMetadata:]
  -[JFXARKitCameraSessionController setArSessionDelegateQueue:]


JFXEffectAssetFilteringOptions : NSObject <NSCopying>
 @property  long long contentType
 @property  long long aspectRatio
 @property  long long usageMode
 @property  long long colorDynamicRange
 @property  long long quality
 @property  long long filteringMode

  // instance methods
  -[JFXEffectAssetFilteringOptions aspectRatio]
  -[JFXEffectAssetFilteringOptions setQuality:]
  -[JFXEffectAssetFilteringOptions setContentType:]
  -[JFXEffectAssetFilteringOptions quality]
  -[JFXEffectAssetFilteringOptions init]
  -[JFXEffectAssetFilteringOptions usageMode]
  -[JFXEffectAssetFilteringOptions contentType]
  -[JFXEffectAssetFilteringOptions setAspectRatio:]
  -[JFXEffectAssetFilteringOptions copyWithZone:]
  -[JFXEffectAssetFilteringOptions filteringMode]
  -[JFXEffectAssetFilteringOptions setFilteringMode:]
  -[JFXEffectAssetFilteringOptions setUsageMode:]
  -[JFXEffectAssetFilteringOptions colorDynamicRange]
  -[JFXEffectAssetFilteringOptions setColorDynamicRange:]


JFXEffectAssetRequestOptions : NSObject <NSCopying>
 @property  NSArray *filterOptionsArray
 @property  BOOL networkAccessDisabled
 @property  long long priority

  // instance methods
  -[JFXEffectAssetRequestOptions .cxx_destruct]
  -[JFXEffectAssetRequestOptions setPriority:]
  -[JFXEffectAssetRequestOptions init]
  -[JFXEffectAssetRequestOptions priority]
  -[JFXEffectAssetRequestOptions copyWithZone:]
  -[JFXEffectAssetRequestOptions filterOptionsArray]
  -[JFXEffectAssetRequestOptions setFilterOptionsArray:]
  -[JFXEffectAssetRequestOptions isNetworkAccessDisabled]
  -[JFXEffectAssetRequestOptions setNetworkAccessDisabled:]


JFXVideoEncoderInterface : NSObject
 @property  ^{opaqueCMSampleBuffer=} currentBuffer

  // instance methods
  -[JFXVideoEncoderInterface .cxx_construct]
  -[JFXVideoEncoderInterface .cxx_destruct]
  -[JFXVideoEncoderInterface init]
  -[JFXVideoEncoderInterface dealloc]
  -[JFXVideoEncoderInterface currentBuffer]
  -[JFXVideoEncoderInterface writeSampleBuffer:]
  -[JFXVideoEncoderInterface skipFrame]
  -[JFXVideoEncoderInterface setupEncoderWithWidth:andHeight:imageFormat:andFramerate:]
  -[JFXVideoEncoderInterface initWithExpectedFrameRate:]
  -[JFXVideoEncoderInterface encodeFrame:presentationTime:frameProperties:]
  -[JFXVideoEncoderInterface closeEncoder]
  -[JFXVideoEncoderInterface setCurrentBuffer:]


JFXImageAVSampleBufferView : UIView <JFXImageViewRendering>
 @property  AVSampleBufferDisplayLayer *sampleBufferDisplayLayer
 @property  UILabel *hdrBadgeDebug
 @property  JTImage *jtImage
 @property  long long renderingType
 @property  BOOL flipX
 @property  BOOL flipY
 @property  BOOL enableDebugDrawing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXImageAVSampleBufferView layerClass]

  // instance methods
  -[JFXImageAVSampleBufferView initWithCoder:]
  -[JFXImageAVSampleBufferView setRenderingType:]
  -[JFXImageAVSampleBufferView .cxx_destruct]
  -[JFXImageAVSampleBufferView flipY]
  -[JFXImageAVSampleBufferView renderingType]
  -[JFXImageAVSampleBufferView enableDebugDrawing]
  -[JFXImageAVSampleBufferView setEnableDebugDrawing:]
  -[JFXImageAVSampleBufferView initWithFrame:]
  -[JFXImageAVSampleBufferView flipX]
  -[JFXImageAVSampleBufferView setContentMode:]
  -[JFXImageAVSampleBufferView setFlipX:]
  -[JFXImageAVSampleBufferView updateDebugDrawing]
  -[JFXImageAVSampleBufferView setJtImage:]
  -[JFXImageAVSampleBufferView jtImage]
  -[JFXImageAVSampleBufferView setFlipY:]
  -[JFXImageAVSampleBufferView sampleBufferDisplayLayer]
  -[JFXImageAVSampleBufferView setHdrBadgeDebug:]
  -[JFXImageAVSampleBufferView hdrBadgeDebug]
  -[JFXImageAVSampleBufferView JFXImageAVSampleBufferView_commonInit]
  -[JFXImageAVSampleBufferView createCMSampleBufferFromJTImage]
  -[JFXImageAVSampleBufferView drawSampleBufferToLayer:]


CFXCameraControlsViewController : UIViewController
 @property  UIView *effectButtonContainerPad
 @property  UIView *shutterButtonContainerPad
 @property  UIView *flipButtonContainerPad
 @property  UIView *backgroundView
 @property  UIView *bottomBlackView
 @property  UIView *appStripBackgroundView
 @property  UIView *appStripBackgroundContainerView
 @property  NSLayoutConstraint *backgroundViewHeightConstraint
 @property  NSLayoutConstraint *bottomBlackViewHeightConstraint
 @property  NSLayoutConstraint *bottomBlackViewTopConstraint
 @property  NSLayoutConstraint *bottomBlackViewWidthConstraint
 @property  NSLayoutConstraint *bottomBlackViewTrailingConstraint
 @property  NSLayoutConstraint *appStripBackgroundContainerViewTopConstraint
 @property  NSLayoutConstraint *appStripBackgroundContainerViewBottomConstraint
 @property  NSLayoutConstraint *appStripBackgroundContainerViewHeightConstraint
 @property  NSLayoutConstraint *appStripBackgroundContainerViewLeadingConstraint
 @property  NSLayoutConstraint *appStripBackgroundContainerViewTrailingConstraint
 @property  CFXFeedbackController *feedbackController
 @property  long long captureMode
 @property  CAMBottomBar *bottomBar
 @property  CUShutterButton *shutterButton
 @property  BOOL dockIsMagnified
 @property  double dockMagnifiedHeightDelta
 @property  CAMCreativeCameraButton *effectButton
 @property  CAMFlipButton *flipButton
 @property  <CFXCameraControlsViewControllerDelegate> *delegate
 @property  UIColor *backgroundColor

  // instance methods
  -[CFXCameraControlsViewController flipButton]
  -[CFXCameraControlsViewController viewWillLayoutSubviews]
  -[CFXCameraControlsViewController backgroundColor]
  -[CFXCameraControlsViewController setFlipButton:]
  -[CFXCameraControlsViewController .cxx_destruct]
  -[CFXCameraControlsViewController shutterButton]
  -[CFXCameraControlsViewController viewDidLoad]
  -[CFXCameraControlsViewController setDelegate:]
  -[CFXCameraControlsViewController viewDidAppear:]
  -[CFXCameraControlsViewController init]
  -[CFXCameraControlsViewController setCaptureMode:]
  -[CFXCameraControlsViewController setBackgroundColor:]
  -[CFXCameraControlsViewController viewWillAppear:]
  -[CFXCameraControlsViewController setShutterButton:]
  -[CFXCameraControlsViewController setBackgroundView:]
  -[CFXCameraControlsViewController delegate]
  -[CFXCameraControlsViewController bottomBar]
  -[CFXCameraControlsViewController setBottomBar:]
  -[CFXCameraControlsViewController captureMode]
  -[CFXCameraControlsViewController viewDidDisappear:]
  -[CFXCameraControlsViewController backgroundView]
  -[CFXCameraControlsViewController feedbackController]
  -[CFXCameraControlsViewController setFeedbackController:]
  -[CFXCameraControlsViewController setBackgroundViewHeightConstraint:]
  -[CFXCameraControlsViewController backgroundViewHeightConstraint]
  -[CFXCameraControlsViewController updateUIForDockMagnify:dockHeightDelta:]
  -[CFXCameraControlsViewController initWithDelegate:captureMode:]
  -[CFXCameraControlsViewController configureUIForOrientation]
  -[CFXCameraControlsViewController setShutterButtonAlpha:]
  -[CFXCameraControlsViewController updateUIForVideoRecording:]
  -[CFXCameraControlsViewController setEffectButton:]
  -[CFXCameraControlsViewController effectButton]
  -[CFXCameraControlsViewController effectsButtonTapped:]
  -[CFXCameraControlsViewController shutterButtonTapped:]
  -[CFXCameraControlsViewController switchCameraButtonTapped:]
  -[CFXCameraControlsViewController bottomBlackView]
  -[CFXCameraControlsViewController JFX_orientationMonitorInterfaceOrientationNotification:]
  -[CFXCameraControlsViewController appStripBackgroundView]
  -[CFXCameraControlsViewController setAppStripBackgroundView:]
  -[CFXCameraControlsViewController appStripBackgroundContainerView]
  -[CFXCameraControlsViewController CFX_smallPhoneDockHeightAdjustment]
  -[CFXCameraControlsViewController dockIsMagnified]
  -[CFXCameraControlsViewController appStripBackgroundContainerViewTopConstraint]
  -[CFXCameraControlsViewController appStripBackgroundContainerViewHeightConstraint]
  -[CFXCameraControlsViewController appStripBackgroundContainerViewBottomConstraint]
  -[CFXCameraControlsViewController appStripBackgroundContainerViewLeadingConstraint]
  -[CFXCameraControlsViewController appStripBackgroundContainerViewTrailingConstraint]
  -[CFXCameraControlsViewController setDockIsMagnified:]
  -[CFXCameraControlsViewController setDockMagnifiedHeightDelta:]
  -[CFXCameraControlsViewController setShutterButtonEnabled:]
  -[CFXCameraControlsViewController effectButtonContainerPad]
  -[CFXCameraControlsViewController setEffectButtonContainerPad:]
  -[CFXCameraControlsViewController shutterButtonContainerPad]
  -[CFXCameraControlsViewController setShutterButtonContainerPad:]
  -[CFXCameraControlsViewController flipButtonContainerPad]
  -[CFXCameraControlsViewController setFlipButtonContainerPad:]
  -[CFXCameraControlsViewController setBottomBlackView:]
  -[CFXCameraControlsViewController setAppStripBackgroundContainerView:]
  -[CFXCameraControlsViewController bottomBlackViewHeightConstraint]
  -[CFXCameraControlsViewController setBottomBlackViewHeightConstraint:]
  -[CFXCameraControlsViewController bottomBlackViewTopConstraint]
  -[CFXCameraControlsViewController setBottomBlackViewTopConstraint:]
  -[CFXCameraControlsViewController bottomBlackViewWidthConstraint]
  -[CFXCameraControlsViewController setBottomBlackViewWidthConstraint:]
  -[CFXCameraControlsViewController bottomBlackViewTrailingConstraint]
  -[CFXCameraControlsViewController setBottomBlackViewTrailingConstraint:]
  -[CFXCameraControlsViewController setAppStripBackgroundContainerViewTopConstraint:]
  -[CFXCameraControlsViewController setAppStripBackgroundContainerViewBottomConstraint:]
  -[CFXCameraControlsViewController setAppStripBackgroundContainerViewHeightConstraint:]
  -[CFXCameraControlsViewController setAppStripBackgroundContainerViewLeadingConstraint:]
  -[CFXCameraControlsViewController setAppStripBackgroundContainerViewTrailingConstraint:]
  -[CFXCameraControlsViewController dockMagnifiedHeightDelta]


JFXCompositionItem : NSObject
 @property  <JFXPlayableElement> *clip
 @property  BOOL isFinalClip
 @property  {?={?=qiIq}{?=qiIq}} sourceTimeRange
 @property  {?=qiIq} destinationDuration
 @property  {?=qiIq} audioStartOffset
 @property  {?=qiIq} audioEndOffset
 @property  BOOL hasVideoContent
 @property  BOOL isFreezeFrame
 @property  float speed
 @property  BOOL isWaitingForResource
 @property  BOOL needSilenceAtEnd
 @property  BOOL needAudioLoop
 @property  int timeScale

  // class methods
  +[JFXCompositionItem silenceAsset]
  +[JFXCompositionItem compositionItemWithClip:timeScale:]
  +[JFXCompositionItem mediaserverdCrashed]

  // instance methods
  -[JFXCompositionItem clip]
  -[JFXCompositionItem speed]
  -[JFXCompositionItem timeScale]
  -[JFXCompositionItem setSpeed:]
  -[JFXCompositionItem .cxx_destruct]
  -[JFXCompositionItem setTimeScale:]
  -[JFXCompositionItem setClip:]
  -[JFXCompositionItem dealloc]
  -[JFXCompositionItem setSourceTimeRange:]
  -[JFXCompositionItem sourceTimeRange]
  -[JFXCompositionItem initWithClip:timeScale:]
  -[JFXCompositionItem emptyTrackSegmentWithDestinationRange:]
  -[JFXCompositionItem isFinalClip]
  -[JFXCompositionItem emptyTrackSegmentWithDestinationTime:]
  -[JFXCompositionItem audioTrackSegmentsWithDestinationTime:]
  -[JFXCompositionItem hasVideoContent]
  -[JFXCompositionItem needSilenceAtEnd]
  -[JFXCompositionItem videoTrackSegmentsWithDestinationRange:]
  -[JFXCompositionItem audioTrackSegmentsWithDestinationTime:paddedFromTime:]
  -[JFXCompositionItem audioTrackSegmentsLoopedForDestinationTimeRange:]
  -[JFXCompositionItem audioStartOffset]
  -[JFXCompositionItem setAudioStartOffset:]
  -[JFXCompositionItem audioEndOffset]
  -[JFXCompositionItem setAudioEndOffset:]
  -[JFXCompositionItem setIsFinalClip:]
  -[JFXCompositionItem setDestinationDuration:]
  -[JFXCompositionItem isWaitingForResource]
  -[JFXCompositionItem needAudioLoop]
  -[JFXCompositionItem audioTrackSegmentsLoopedWithDestinationTime:]
  -[JFXCompositionItem destinationDuration]
  -[JFXCompositionItem isFreezeFrame]


JFXFaceTrackingUtilities : NSObject
  // class methods
  +[JFXFaceTrackingUtilities adjustIntrinsics:forRenderSize:capturedSize:interfaceOrientation:]
  +[JFXFaceTrackingUtilities JFX_faceAnchorWithFaceAnchor:forInterfaceOrientation:]
  +[JFXFaceTrackingUtilities JFX_projectionMatrixWithFaceAnchor:bufferSize:]
  +[JFXFaceTrackingUtilities pointOnFaceMesh]
  +[JFXFaceTrackingUtilities faceRectInImageWithFaceAnchor:invertY:interfaceOrientation:imageResolution:]
  +[JFXFaceTrackingUtilities rollAngleFromFaceAnchor:forInterfaceOrientation:]
  +[JFXFaceTrackingUtilities isFaceAnchorInRange:]
  +[JFXFaceTrackingUtilities faceRectScaleFactorForInterfaceOrientation:andDeviceInterfaceOrientation:]


JTAutoPurgeDictionary : NSObject
 @property  unsigned long count
 @property  BOOL suspendPurging
 @property  <JTAutoPurgeDictionaryDelegate> *delegate

  // instance methods
  -[JTAutoPurgeDictionary objectForKey:]
  -[JTAutoPurgeDictionary removeAllObjects]
  -[JTAutoPurgeDictionary setObject:forKey:]
  -[JTAutoPurgeDictionary .cxx_destruct]
  -[JTAutoPurgeDictionary count]
  -[JTAutoPurgeDictionary setDelegate:]
  -[JTAutoPurgeDictionary init]
  -[JTAutoPurgeDictionary addEntriesFromDictionary:]
  -[JTAutoPurgeDictionary delegate]
  -[JTAutoPurgeDictionary dealloc]
  -[JTAutoPurgeDictionary highMemoryWarning]
  -[JTAutoPurgeDictionary suspendPurging]
  -[JTAutoPurgeDictionary copyOfDictionary]
  -[JTAutoPurgeDictionary setSuspendPurging:]


JTMotionData : NSObject
 @property  CMMotionManager *motionManager
 @property  NSOperationQueue *motionQueue
 @property  CMAttitude *refAttitude
 @property  {?=dddd} currentAttitude
 @property  double yawRadians
 @property  double rollRadians
 @property  double pitchRadians
 @property  BOOL started

  // class methods
  +[JTMotionData sharedInstance]

  // instance methods
  -[JTMotionData setStarted:]
  -[JTMotionData started]
  -[JTMotionData currentOrientation]
  -[JTMotionData .cxx_destruct]
  -[JTMotionData init]
  -[JTMotionData yawRadians]
  -[JTMotionData setYawRadians:]
  -[JTMotionData pitchRadians]
  -[JTMotionData setPitchRadians:]
  -[JTMotionData setRollRadians:]
  -[JTMotionData rollRadians]
  -[JTMotionData motionManager]
  -[JTMotionData setMotionManager:]
  -[JTMotionData setMotionQueue:]
  -[JTMotionData motionQueue]
  -[JTMotionData getOrientation:]
  -[JTMotionData setCurrentAttitude:]
  -[JTMotionData syntheticOrientation]
  -[JTMotionData startMotion]
  -[JTMotionData stopMotion]
  -[JTMotionData refAttitude]
  -[JTMotionData setRefAttitude:]
  -[JTMotionData currentAttitude]


JFXTextEffectEditorTextView : UITextView
 @property  JFXTextEffectEditorView *editorView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} textFrameWithoutFudge

  // instance methods
  -[JFXTextEffectEditorTextView hitTest:withEvent:]
  -[JFXTextEffectEditorTextView textStylingAtPosition:inDirection:]
  -[JFXTextEffectEditorTextView textColorForCaretSelection]
  -[JFXTextEffectEditorTextView .cxx_destruct]
  -[JFXTextEffectEditorTextView unmarkText]
  -[JFXTextEffectEditorTextView canPerformAction:withSender:]
  -[JFXTextEffectEditorTextView setEditorView:]
  -[JFXTextEffectEditorTextView initWithTextEditingProperties:editorView:textContainer:]
  -[JFXTextEffectEditorTextView editorView]
  -[JFXTextEffectEditorTextView JFX_adjustTextEditingViewFrameAndInsetsForShadow:]
  -[JFXTextEffectEditorTextView JFX_adjustTextEditingViewInsetsForVerticalAlignment:textAreaHeight:textHeight:]
  -[JFXTextEffectEditorTextView setTextFrameWithoutFudge:]
  -[JFXTextEffectEditorTextView JFX_adjustSizeToMatchExpectedNumberOfLines:]
  -[JFXTextEffectEditorTextView JFX_countNumberOfLines]
  -[JFXTextEffectEditorTextView initWithTextEditingProperties:editorView:]
  -[JFXTextEffectEditorTextView applyTextEditingProperties:]
  -[JFXTextEffectEditorTextView textEditingFrame]
  -[JFXTextEffectEditorTextView textFrameWithoutFudge]


CFXPreviewViewController : UIViewController <CFXEffectEditorViewDelegate, CFXFullScreenTextEditViewControllerDelegate, JFXCompositionPlayerViewControllerDelegate, JFXExportDelegate, CFXPlayButtonViewDelegate, UIViewWindowListener>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView *playerContainerView
 @property  UIView *appStripAndPreviewControlsContainer
 @property  UIButton *exportButton
 @property  NSLayoutConstraint *previewControlsContainerHeightConstraint
 @property  NSLayoutConstraint *previewControlsContainerWidthConstraint
 @property  NSLayoutConstraint *previewControlsContainerTrailingConstraint
 @property  NSLayoutConstraint *previewControlsContainerLeadingConstraint
 @property  NSLayoutConstraint *previewControlsContainerTopConstraint
 @property  BOOL userInterfaceHidden
 @property  BOOL saveMediaItemToFunCamPhotosAlbumUponExport
 @property  unsigned long appliedDirectOverlayEditingGestures
 @property  UIView *bottomControlsDrawer
 @property  BOOL dockIsMagnified
 @property  double dockMagnifiedHeightDelta
 @property  CFXEffectBrowserContentPresenterViewController *effectBrowserContentPresenterViewController
 @property  UISlider *playbackSlider
 @property  UIView *previewControlsContainerView
 @property  CFXPlayButtonView *playButton
 @property  CFXMediaItem *mediaItem
 @property  CFXClip *previewClip
 @property  CFXClipPlayerViewController *previewPlayer
 @property  JFXCompositionExporter *exporter
 @property  JFXEffectsPreviewGenerator *stillImagePreviewGenerator
 @property  JFXOrientationMonitor *orientationMonitor
 @property  CFXEffectEditorView *effectEditor
 @property  {?=dd} normalizedMinimumHitTestArea
 @property  <CFXPreviewViewControllerDelegate> *delegate
 @property  UIView *effectsPickerDrawer
 @property  BOOL presentingFilterPicker
 @property  BOOL capturedWithBackCamera
 @property  CFXControlsViewController *previewControls
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXPreviewViewController setLiveCaptureSnapshotView:]
  +[CFXPreviewViewController liveCaptureSnapshotView]

  // instance methods
  -[CFXPreviewViewController .cxx_destruct]
  -[CFXPreviewViewController viewDidLoad]
  -[CFXPreviewViewController setDelegate:]
  -[CFXPreviewViewController viewDidAppear:]
  -[CFXPreviewViewController setMediaItem:]
  -[CFXPreviewViewController viewDidLayoutSubviews]
  -[CFXPreviewViewController viewWillAppear:]
  -[CFXPreviewViewController prepareForSegue:sender:]
  -[CFXPreviewViewController mediaItem]
  -[CFXPreviewViewController delegate]
  -[CFXPreviewViewController viewDidDisappear:]
  -[CFXPreviewViewController setEffectsPickerDrawer:]
  -[CFXPreviewViewController exportMediaItemToFileURL:]
  -[CFXPreviewViewController playButton]
  -[CFXPreviewViewController setPlayButton:]
  -[CFXPreviewViewController setPreviewPlayer:]
  -[CFXPreviewViewController previewPlayer]
  -[CFXPreviewViewController previewClip]
  -[CFXPreviewViewController bottomControlsSnapshot]
  -[CFXPreviewViewController bottomControlsCenter]
  -[CFXPreviewViewController hideBottomControls]
  -[CFXPreviewViewController showBottomControls]
  -[CFXPreviewViewController effectsPickerDrawer]
  -[CFXPreviewViewController setPresentingFilterPicker:]
  -[CFXPreviewViewController addOverlayEffect:atScreenLocation:atScreenSize:rotationAngle:completion:]
  -[CFXPreviewViewController addEffect:completion:]
  -[CFXPreviewViewController updateUIForDockMagnify:dockHeightDelta:]
  -[CFXPreviewViewController filterPickerPreviewBackgroundImageAtSizeInPixels:completion:]
  -[CFXPreviewViewController setCapturedWithBackCamera:]
  -[CFXPreviewViewController previewControls]
  -[CFXPreviewViewController effectBrowserContentPresenterViewController]
  -[CFXPreviewViewController capturedWithBackCamera]
  -[CFXPreviewViewController configureUIForOrientation]
  -[CFXPreviewViewController normalizedMinimumHitTestArea]
  -[CFXPreviewViewController orientationMonitor]
  -[CFXPreviewViewController setOrientationMonitor:]
  -[CFXPreviewViewController JFX_orientationMonitorInterfaceOrientationNotification:]
  -[CFXPreviewViewController dockIsMagnified]
  -[CFXPreviewViewController setDockIsMagnified:]
  -[CFXPreviewViewController setDockMagnifiedHeightDelta:]
  -[CFXPreviewViewController dockMagnifiedHeightDelta]
  -[CFXPreviewViewController shouldExportOnly]
  -[CFXPreviewViewController exportButton]
  -[CFXPreviewViewController playerContainerView]
  -[CFXPreviewViewController CFX_setFrameAndRenderSizes]
  -[CFXPreviewViewController setPlayButtonHiddenIfPossible:]
  -[CFXPreviewViewController setEffectAnimationsEnabledIfPossible:]
  -[CFXPreviewViewController previewControlsContainerHeightConstraint]
  -[CFXPreviewViewController setAppliedDirectOverlayEditingGestures:]
  -[CFXPreviewViewController playbackSlider]
  -[CFXPreviewViewController previewControlsContainerTopConstraint]
  -[CFXPreviewViewController previewControlsContainerWidthConstraint]
  -[CFXPreviewViewController previewControlsContainerLeadingConstraint]
  -[CFXPreviewViewController previewControlsContainerTrailingConstraint]
  -[CFXPreviewViewController bottomControlsDrawer]
  -[CFXPreviewViewController configureBottomControlsForOrientation]
  -[CFXPreviewViewController setPreviewControls:]
  -[CFXPreviewViewController setBottomControlsDrawer:]
  -[CFXPreviewViewController appStripAndPreviewControlsContainer]
  -[CFXPreviewViewController previewControlsContainerView]
  -[CFXPreviewViewController CFX_canApplyFaceTracking]
  -[CFXPreviewViewController CFX_addEffect:]
  -[CFXPreviewViewController CFX_prepareFaceTrackingDataForOverlayInsertionWithCompletion:]
  -[CFXPreviewViewController removeEffectEditor]
  -[CFXPreviewViewController presentFullScreenTextEditorForEffect:insertingEffect:]
  -[CFXPreviewViewController setStillImagePreviewGenerator:]
  -[CFXPreviewViewController stillImagePreviewGenerator]
  -[CFXPreviewViewController CFX_saveImageToURL:image:compressionQuality:asHEIF:metadata:]
  -[CFXPreviewViewController CFX_notifyDelegateExportMediaItemFinishedWithError:]
  -[CFXPreviewViewController setSaveMediaItemToFunCamPhotosAlbumUponExport:]
  -[CFXPreviewViewController CFX_setIsExporting:]
  -[CFXPreviewViewController CFX_setEffectAnimationsEnabledIfPossible:updatePlayer:]
  -[CFXPreviewViewController CFX_exportPhotoWithEffects]
  -[CFXPreviewViewController setExporter:]
  -[CFXPreviewViewController exporter]
  -[CFXPreviewViewController CFX_AVAssetExportPresetWithColorSpace:]
  -[CFXPreviewViewController CFX_hidePreviewUI]
  -[CFXPreviewViewController CFX_showPreviewUI]
  -[CFXPreviewViewController displayEffectEditorForEffect:forMode:]
  -[CFXPreviewViewController CFX_togglePreviewUI]
  -[CFXPreviewViewController appliedDirectOverlayEditingGestures]
  -[CFXPreviewViewController effectEditor]
  -[CFXPreviewViewController isEditingEffect]
  -[CFXPreviewViewController setEffectEditor:]
  -[CFXPreviewViewController playerContentFrame]
  -[CFXPreviewViewController CFX_layoutPlayerContainerView]
  -[CFXPreviewViewController isPresentingFilterPicker]
  -[CFXPreviewViewController shouldKeepPlayButtonHidden]
  -[CFXPreviewViewController userInterfaceIsHidden]
  -[CFXPreviewViewController setUserInterfaceHidden:]
  -[CFXPreviewViewController updateEffectEditorLayout]
  -[CFXPreviewViewController updateFullScreenTextEditorLayout]
  -[CFXPreviewViewController saveMediaItemToFunCamPhotosAlbumUponExport]
  -[CFXPreviewViewController CFX_addURLToCameraRoll:isStill:completionHandler:]
  -[CFXPreviewViewController shouldUseFaceTracking]
  -[CFXPreviewViewController CFX_addAssetWithIdentifier:intoAlbum:completionHandler:]
  -[CFXPreviewViewController CFX_addAssetAtURL:resourceType:completionHandler:]
  -[CFXPreviewViewController CFX_createAlbumWithCompletionHandler:]
  -[CFXPreviewViewController CFX_fetchAssetWithLocalIdentifier:]
  -[CFXPreviewViewController playbackTimeDidChange:currentTime:]
  -[CFXPreviewViewController playbackDidStart:]
  -[CFXPreviewViewController playbackDidStop:currentTime:]
  -[CFXPreviewViewController playbackAreaTapped:normalizedClipPoint:normalizedMinimumSize:atTime:]
  -[CFXPreviewViewController playbackAreaPanned:gesture:normalizedClipPoint:normalizedMinimumSize:translationDelta:atTime:timeScale:]
  -[CFXPreviewViewController playbackAreaPinched:gesture:normalizedClipPoints:normalizedCenterPoint:normalizedMinimumSize:scaleDelta:atTime:timeScale:]
  -[CFXPreviewViewController playbackAreaRotated:gesture:normalizedClipPoints:normalizedCenterPoint:normalizedMinimumSize:rotateDelta:atTime:]
  -[CFXPreviewViewController playbackAreaDoubleTapped:]
  -[CFXPreviewViewController exportProgressedTo:]
  -[CFXPreviewViewController didFinishExport:]
  -[CFXPreviewViewController playButtonViewDidTapPlay:]
  -[CFXPreviewViewController playButtonViewDidTapPause:]
  -[CFXPreviewViewController view:willMoveToWindow:]
  -[CFXPreviewViewController exportButtonTapped:]
  -[CFXPreviewViewController playbackSliderValueChanged:]
  -[CFXPreviewViewController scaleClip:scale:atNormalizedLocation:]
  -[CFXPreviewViewController animationDurationForCompositionTransition:shouldScale:]
  -[CFXPreviewViewController bottomControlsBounds]
  -[CFXPreviewViewController setPlayerContainerView:]
  -[CFXPreviewViewController setAppStripAndPreviewControlsContainer:]
  -[CFXPreviewViewController setExportButton:]
  -[CFXPreviewViewController setPreviewControlsContainerHeightConstraint:]
  -[CFXPreviewViewController setPreviewControlsContainerWidthConstraint:]
  -[CFXPreviewViewController setPreviewControlsContainerTrailingConstraint:]
  -[CFXPreviewViewController setPreviewControlsContainerLeadingConstraint:]
  -[CFXPreviewViewController setPreviewControlsContainerTopConstraint:]
  -[CFXPreviewViewController setEffectBrowserContentPresenterViewController:]
  -[CFXPreviewViewController setPlaybackSlider:]
  -[CFXPreviewViewController setPreviewControlsContainerView:]
  -[CFXPreviewViewController fullScreenTextEditViewController:didBeginEditingEffect:]
  -[CFXPreviewViewController fullScreenTextEditViewController:didFinishEditingEffect:withUpdatedText:]
  -[CFXPreviewViewController fullScreenTextEditViewController:didFinishEditingByRemovingEffect:]
  -[CFXPreviewViewController fullScreenTextEditViewController:willBeginAnimationBeforeEditingEffect:]
  -[CFXPreviewViewController fullScreenTextEditViewController:didBeginAnimationBeforeEditingEffect:completion:]
  -[CFXPreviewViewController fullScreenTextEditViewController:willBeginAnimationAfterEditingEffect:updatedText:]
  -[CFXPreviewViewController fullScreenTextEditViewController:didFinishAnimationAfterEditingEffect:completion:]
  -[CFXPreviewViewController faceTrackingInterfaceOrientationForfullScreenTextEditViewController:]
  -[CFXPreviewViewController effectEditorView:effectAtPoint:]
  -[CFXPreviewViewController effectEditorView:isEffectAtPoint:effect:]
  -[CFXPreviewViewController effectEditorView:frameForEffect:relativeToBounds:]
  -[CFXPreviewViewController effectEditorView:hitAreaBoundingFrameForEffect:adjustForMinimumSize:relativeToBounds:]
  -[CFXPreviewViewController effectEditorView:overlayEffectFrameForEffect:relativeToBounds:]
  -[CFXPreviewViewController effectEditorView:removeButtonPositionForEffect:relativeToBounds:]
  -[CFXPreviewViewController effectEditorView:isFaceTrackingEffect:]
  -[CFXPreviewViewController effectEditorView:isFaceTrackingDataAvailableForEffect:]
  -[CFXPreviewViewController effectEditorView:spacingBetweenCenterPointOfEffect:point:relativeToBounds:]
  -[CFXPreviewViewController effectEditorView:didTransformEffect:transform:relativeToBounds:]
  -[CFXPreviewViewController effectEditorView:shouldEditTextForEffect:]
  -[CFXPreviewViewController effectEditorView:didBeginEditingTextForEffect:]
  -[CFXPreviewViewController effectEditorView:textEditingPropertiesForEffect:relativeToBounds:]
  -[CFXPreviewViewController effectEditorView:textForEffect:]
  -[CFXPreviewViewController effectEditorView:didEditTextForEffect:newText:]
  -[CFXPreviewViewController effectEditorView:didEndEditingTextForEffect:wasCancelled:]
  -[CFXPreviewViewController effectEditorView:didRemoveEffect:]
  -[CFXPreviewViewController effectEditorViewDidBeginEditing:]
  -[CFXPreviewViewController effectEditorViewDidEndEditing:]
  -[CFXPreviewViewController effectEditorView:didEndEditingByTappingOutSideEffectAtScreenPoint:]
  -[CFXPreviewViewController effectEditorView:didMoveEffect:withTouchPoint:]
  -[CFXPreviewViewController effectEditorView:presentCustomTextEditingUI:]
  -[CFXPreviewViewController effectEditorView:maximumTextLengthForEffect:]
  -[CFXPreviewViewController effectEditorViewShouldShowFaceReticle:]
  -[CFXPreviewViewController CFX_previewPlayerCurrentTime]
  -[CFXPreviewViewController dispatchWhenPlayerReadyForDisplayEffectUpdate:]


UIViewWindowNotifier : UIView
 @property  <UIViewWindowListener> *windowListener

  // instance methods
  -[UIViewWindowNotifier willMoveToWindow:]
  -[UIViewWindowNotifier .cxx_destruct]
  -[UIViewWindowNotifier windowListener]
  -[UIViewWindowNotifier setWindowListener:]


CFXFullScreenTextEditViewController : UIViewController <CFXEffectEditorViewDelegate>
 @property  CFXEffect *workingEffect
 @property  CFXEffectEditorView *effectEditor
 @property  <CFXFullScreenTextEditViewControllerDelegate> *delegate
 @property  BOOL effectWasRemoved
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} effectEditorFrameRelativeToScreen
 @property  UIView *dimmingView
 @property  BOOL isRunningAnimation
 @property  BOOL insertingEffect
 @property  JFXOverlayEffectDebugViewOptions *debugOptions
 @property  UIView *debugView
 @property  CFXEffect *textEffect
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXFullScreenTextEditViewController resign]
  +[CFXFullScreenTextEditViewController displayFullScreenTextEditorForEffect:inViewController:delegate:cameraViewWindowFrame:insertingEffect:]
  +[CFXFullScreenTextEditViewController isFullScreenTextEditorPresented]
  +[CFXFullScreenTextEditViewController notifyCameraViewWindowFrameChanged:]
  +[CFXFullScreenTextEditViewController CFX_fadeTimingParameters]
  +[CFXFullScreenTextEditViewController removeFullScreenTextEditor]

  // instance methods
  -[CFXFullScreenTextEditViewController dimmingView]
  -[CFXFullScreenTextEditViewController keyboardDidHide:]
  -[CFXFullScreenTextEditViewController setDimmingView:]
  -[CFXFullScreenTextEditViewController .cxx_destruct]
  -[CFXFullScreenTextEditViewController viewDidLoad]
  -[CFXFullScreenTextEditViewController debugView]
  -[CFXFullScreenTextEditViewController viewDidAppear:]
  -[CFXFullScreenTextEditViewController setDebugOptions:]
  -[CFXFullScreenTextEditViewController debugOptions]
  -[CFXFullScreenTextEditViewController viewWillDisappear:]
  -[CFXFullScreenTextEditViewController delegate]
  -[CFXFullScreenTextEditViewController setDebugView:]
  -[CFXFullScreenTextEditViewController dealloc]
  -[CFXFullScreenTextEditViewController effectEditor]
  -[CFXFullScreenTextEditViewController setEffectEditor:]
  -[CFXFullScreenTextEditViewController initWithTextEffect:CGSize:insertingEffect:delegate:]
  -[CFXFullScreenTextEditViewController setEffectEditorFrameRelativeToScreen:]
  -[CFXFullScreenTextEditViewController effectEditorFrameRelativeToScreen]
  -[CFXFullScreenTextEditViewController textEffect]
  -[CFXFullScreenTextEditViewController didTappedEmptyDimmedArea:]
  -[CFXFullScreenTextEditViewController configureWorkingEffect]
  -[CFXFullScreenTextEditViewController insertingEffect]
  -[CFXFullScreenTextEditViewController workingEffect]
  -[CFXFullScreenTextEditViewController CFX_animateWithDuration:animatingIn:completion:]
  -[CFXFullScreenTextEditViewController scaleTextToFitTextEditingBounds:]
  -[CFXFullScreenTextEditViewController isRunningAnimation]
  -[CFXFullScreenTextEditViewController effectWasRemoved]
  -[CFXFullScreenTextEditViewController setEffectWasRemoved:]
  -[CFXFullScreenTextEditViewController setIsRunningAnimation:]
  -[CFXFullScreenTextEditViewController effectEditorView:effectAtPoint:]
  -[CFXFullScreenTextEditViewController effectEditorView:isEffectAtPoint:effect:]
  -[CFXFullScreenTextEditViewController effectEditorView:frameForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:hitAreaBoundingFrameForEffect:adjustForMinimumSize:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:overlayEffectFrameForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:removeButtonPositionForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:isFaceTrackingEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:isFaceTrackingDataAvailableForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:spacingBetweenCenterPointOfEffect:point:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:didTransformEffect:transform:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:shouldEditTextForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:didBeginEditingTextForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:textEditingPropertiesForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:textForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:didEditTextForEffect:newText:]
  -[CFXFullScreenTextEditViewController effectEditorView:didEndEditingTextForEffect:wasCancelled:]
  -[CFXFullScreenTextEditViewController effectEditorView:didRemoveEffect:]
  -[CFXFullScreenTextEditViewController effectEditorViewDidBeginEditing:]
  -[CFXFullScreenTextEditViewController effectEditorViewDidEndEditing:]
  -[CFXFullScreenTextEditViewController effectEditorView:shouldDisableEditingAnimationForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:applyAnimationTransformsToEffect:transforms:]
  -[CFXFullScreenTextEditViewController effectEditorView:durationForBeginEditingAnimationForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:willBeginAnimationBeforeEditingEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:didStartBeginEditingAnimationForEffect:completion:]
  -[CFXFullScreenTextEditViewController effectEditorView:didCompleteBeginEditingAnimationForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:beginEditingAnimationFromFrameForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:beginEditingAnimationToFrameForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:durationForEndEditingAnimationForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:willBeginAnimationAfterEditingEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:endEditingAnimationFromFrameForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:endEditingAnimationToFrameForEffect:relativeToBounds:]
  -[CFXFullScreenTextEditViewController effectEditorView:didStartEndEditingAnimationForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorView:calculateAnimatedFaceTrackingTransformWithCurrentFaceTrackingDataFromTrackingType:interpolatedWithFaceTrackingTransform:toTrackingType:atAnimationProgress:]
  -[CFXFullScreenTextEditViewController effectEditorView:didCompleteEndEditingAnimationForEffect:completion:]
  -[CFXFullScreenTextEditViewController effectEditorView:maximumTextLengthForEffect:]
  -[CFXFullScreenTextEditViewController effectEditorViewShouldPreviewEditEffect:]
  -[CFXFullScreenTextEditViewController setWorkingEffect:]
  -[CFXFullScreenTextEditViewController setInsertingEffect:]


JFXPassThroughContainerView : UIView
 @property  <JFXPassThroughContainerViewDelegate> *delegate
 @property  BOOL shouldDelegatePointInside

  // instance methods
  -[JFXPassThroughContainerView hitTest:withEvent:]
  -[JFXPassThroughContainerView .cxx_destruct]
  -[JFXPassThroughContainerView setDelegate:]
  -[JFXPassThroughContainerView pointInside:withEvent:]
  -[JFXPassThroughContainerView delegate]
  -[JFXPassThroughContainerView shouldDelegatePointInside]
  -[JFXPassThroughContainerView setShouldDelegatePointInside:]


JFXCompositionExporter : NSObject <JFXExportDelegate>
 @property  JFXComposition *composition
 @property  JFXReaderWriterExportController *exportController
 @property  NSDate *exportStartTime
 @property  NSDate *exportEndTime
 @property  <JFXExportDelegate> *delegate
 @property  unsigned int parentCode
 @property  <JFXCompositionPlayableElementsDataSource> *clipsDataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXCompositionExporter compositionClass]

  // instance methods
  -[JFXCompositionExporter tearDown]
  -[JFXCompositionExporter composition]
  -[JFXCompositionExporter .cxx_destruct]
  -[JFXCompositionExporter setDelegate:]
  -[JFXCompositionExporter delegate]
  -[JFXCompositionExporter dealloc]
  -[JFXCompositionExporter setComposition:]
  -[JFXCompositionExporter clipsDataSource]
  -[JFXCompositionExporter parentCode]
  -[JFXCompositionExporter setParentCode:]
  -[JFXCompositionExporter initWithClipsDataSource:]
  -[JFXCompositionExporter startWithPresets:toFilePath:poster:]
  -[JFXCompositionExporter exportProgressedTo:]
  -[JFXCompositionExporter exportAnalyticsForSessionBegin]
  -[JFXCompositionExporter exportAnalyticsForSessionCompleteWithStatus:exportMachDuration:]
  -[JFXCompositionExporter didFinishExport:]
  -[JFXCompositionExporter setExportStartTime:]
  -[JFXCompositionExporter setExportController:]
  -[JFXCompositionExporter exportController]
  -[JFXCompositionExporter exportEndTime]
  -[JFXCompositionExporter exportStartTime]
  -[JFXCompositionExporter setExportEndTime:]
  -[JFXCompositionExporter estimatedFileSizeForDuration:frameRate:preset:]
  -[JFXCompositionExporter cancelWithStatus:]
  -[JFXCompositionExporter timeElapsedDuringExport]


JFXMediaReaderDepthData : NSObject
 @property  AVDepthData *avDepthData
 @property  {?={?=qiIq}{?=qiIq}} timeRange

  // instance methods
  -[JFXMediaReaderDepthData timeRange]
  -[JFXMediaReaderDepthData .cxx_destruct]
  -[JFXMediaReaderDepthData avDepthData]
  -[JFXMediaReaderDepthData initWithAVDepthData:timeRange:]


JFXDepthDataMediaReader : NSObject <JFXMediaVideoTrackReader>
 @property  <JFXMediaVideoTrackReader> *reader
 @property  NSError *lastDecodeError
 @property  JFXMediaReaderDepthData *cachedDepthData
 @property  NSObject<OS_dispatch_queue> *synchronizationQueue
 @property  JFXDepthDecompressor *depthDecompressor
 @property  {?={?=qiIq}{?=qiIq}} readableTimeRange
 @property  BOOL isScrubbing
 @property  long long status
 @property  NSError *error
 @property  unsigned long signPostID
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXDepthDataMediaReader isScrubbing]
  -[JFXDepthDataMediaReader name]
  -[JFXDepthDataMediaReader setIsScrubbing:]
  -[JFXDepthDataMediaReader reader]
  -[JFXDepthDataMediaReader .cxx_destruct]
  -[JFXDepthDataMediaReader status]
  -[JFXDepthDataMediaReader synchronizationQueue]
  -[JFXDepthDataMediaReader error]
  -[JFXDepthDataMediaReader beginReadingAtTimeRange:]
  -[JFXDepthDataMediaReader beginReading]
  -[JFXDepthDataMediaReader readableTimeRange]
  -[JFXDepthDataMediaReader signPostID]
  -[JFXDepthDataMediaReader videoSampleForTime:]
  -[JFXDepthDataMediaReader setLastDecodeError:]
  -[JFXDepthDataMediaReader lastDecodeError]
  -[JFXDepthDataMediaReader initWithVideoTrackReader:]
  -[JFXDepthDataMediaReader depthDataForTime:]
  -[JFXDepthDataMediaReader JFX_readDepthDataForTime:]
  -[JFXDepthDataMediaReader setCachedDepthData:]
  -[JFXDepthDataMediaReader cachedDepthData]
  -[JFXDepthDataMediaReader JFX_cachedDepthDataForTime:]
  -[JFXDepthDataMediaReader JFX_decompressAVDepthDataFromVideoTrackReaderSample:]
  -[JFXDepthDataMediaReader depthDecompressor]
  -[JFXDepthDataMediaReader setDepthDecompressor:]


JFXThreadSafeArray : NSObject
 @property  NSMutableArray *array
 @property  NSObject<OS_dispatch_queue> *concurrentQueue
 @property  unsigned long count

  // instance methods
  -[JFXThreadSafeArray containsObject:]
  -[JFXThreadSafeArray sortUsingSelector:]
  -[JFXThreadSafeArray removeAllObjects]
  -[JFXThreadSafeArray concurrentQueue]
  -[JFXThreadSafeArray removeObject:]
  -[JFXThreadSafeArray enumerateObjectsUsingBlock:]
  -[JFXThreadSafeArray objectsAtIndexes:]
  -[JFXThreadSafeArray addObject:]
  -[JFXThreadSafeArray array]
  -[JFXThreadSafeArray .cxx_destruct]
  -[JFXThreadSafeArray count]
  -[JFXThreadSafeArray insertObject:atIndex:]
  -[JFXThreadSafeArray replaceObjectAtIndex:withObject:]
  -[JFXThreadSafeArray removeObjectAtIndex:]
  -[JFXThreadSafeArray init]
  -[JFXThreadSafeArray objectAtIndex:]
  -[JFXThreadSafeArray moveObjectAtIndex:toIndex:]
  -[JFXThreadSafeArray setConcurrentQueue:]
  -[JFXThreadSafeArray setArray:]
  -[JFXThreadSafeArray indexOfObject:]
  -[JFXThreadSafeArray removeObjectsInArray:]
  -[JFXThreadSafeArray sortedArrayUsingComparator:]
  -[JFXThreadSafeArray enumerateObjectsWithOptions:usingBlock:]
  -[JFXThreadSafeArray copyOfArray]


CFXVideoSettings : NSObject
  // class methods
  +[CFXVideoSettings imageScale]
  +[CFXVideoSettings screenCanShow2160P]
  +[CFXVideoSettings canDecodeHEVC2160P]


PlaceholderForCFX : NSObject

JFXExternalImageData : NSObject
 @property  double timestamp
 @property  {?=[3]} cameraIntrinsics
 @property  ^{__CVBuffer=} pixelBuffer
 @property  long long cameraPosition
 @property  long long captureFramesPerSecond
 @property  long long orientation
 @property  BOOL hasValidFaceData
 @property  BOOL requiresFaceTracking
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} normalizedFaceRect
 @property  double rollAngle

  // instance methods
  -[JFXExternalImageData pixelBuffer]
  -[JFXExternalImageData setOrientation:]
  -[JFXExternalImageData setCameraPosition:]
  -[JFXExternalImageData cameraPosition]
  -[JFXExternalImageData setNormalizedFaceRect:]
  -[JFXExternalImageData setRollAngle:]
  -[JFXExternalImageData normalizedFaceRect]
  -[JFXExternalImageData orientation]
  -[JFXExternalImageData rollAngle]
  -[JFXExternalImageData cameraIntrinsics]
  -[JFXExternalImageData setCameraIntrinsics:]
  -[JFXExternalImageData timestamp]
  -[JFXExternalImageData dealloc]
  -[JFXExternalImageData setTimestamp:]
  -[JFXExternalImageData setPixelBuffer:]
  -[JFXExternalImageData captureFramesPerSecond]
  -[JFXExternalImageData setCaptureFramesPerSecond:]
  -[JFXExternalImageData requiresFaceTracking]
  -[JFXExternalImageData setHasValidFaceData:]
  -[JFXExternalImageData setRequiresFaceTracking:]
  -[JFXExternalImageData hasValidFaceData]


CFXFrame : NSObject
 @property  PVFrameSet *pvFrameSet
 @property  ARFrame *arFrame
 @property  {?=qiIq} latency
 @property  ^{__CVBuffer=} pixelBuffer
 @property  {?=qiIq} timestamp
 @property  {?=qiIq} requestTime

  // instance methods
  -[CFXFrame requestTime]
  -[CFXFrame pixelBuffer]
  -[CFXFrame setRequestTime:]
  -[CFXFrame .cxx_destruct]
  -[CFXFrame latency]
  -[CFXFrame isEqual:]
  -[CFXFrame timestamp]
  -[CFXFrame dealloc]
  -[CFXFrame arFrame]
  -[CFXFrame setLatency:]
  -[CFXFrame setTimestamp:]
  -[CFXFrame encodeWithCoder:]
  -[CFXFrame setPixelBuffer:]
  -[CFXFrame initWithPixelBuffer:timestamp:]
  -[CFXFrame initWithFrameSet:]
  -[CFXFrame isEqualToFrame:]
  -[CFXFrame initWithARFrame:]
  -[CFXFrame pvFrameSet]
  -[CFXFrame setPvFrameSet:]
  -[CFXFrame setArFrame:]


CFXTextEffectEditorView : UIView <UITextDragDelegate, UITextPasteDelegate, UITextViewDelegate, JFXTextEffectEditorTextViewDelegate>
 @property  JFXTextEffectEditorView *editorView
 @property  NSString *text
 @property  <CFXTextEffectEditorViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXTextEffectEditorView viewWithFrame:textEditingProperties:]

  // instance methods
  -[CFXTextEffectEditorView selectAll]
  -[CFXTextEffectEditorView .cxx_destruct]
  -[CFXTextEffectEditorView applicationDidEnterBackground:]
  -[CFXTextEffectEditorView setDelegate:]
  -[CFXTextEffectEditorView textDraggableView:itemsForDrag:]
  -[CFXTextEffectEditorView delegate]
  -[CFXTextEffectEditorView text]
  -[CFXTextEffectEditorView textPasteConfigurationSupporting:shouldAnimatePasteOfAttributedString:toRange:]
  -[CFXTextEffectEditorView textViewDidChange:]
  -[CFXTextEffectEditorView textView:shouldChangeTextInRange:replacementText:]
  -[CFXTextEffectEditorView endTextEditing]
  -[CFXTextEffectEditorView setEditorView:]
  -[CFXTextEffectEditorView editorView]
  -[CFXTextEffectEditorView textEffectEditorTextViewDidUnmarkText:]
  -[CFXTextEffectEditorView applyTextEditingProperties:]
  -[CFXTextEffectEditorView initWithFrame:textEditingProperties:]
  -[CFXTextEffectEditorView CFX_setupTextField:]
  -[CFXTextEffectEditorView selectAtEnd]
  -[CFXTextEffectEditorView textEditingFrameRelativeToView:]


JFXMediaSettings : NSObject <JFXMediaSettingsProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXMediaSettings sharedInstance]
  +[JFXMediaSettings timeScale]
  +[JFXMediaSettings providerDelegate]
  +[JFXMediaSettings frameRate]
  +[JFXMediaSettings setProviderDelegate:]
  +[JFXMediaSettings frameSize]
  +[JFXMediaSettings renderSize]
  +[JFXMediaSettings compositionSize]

  // instance methods
  -[JFXMediaSettings timeScale]
  -[JFXMediaSettings frameRate]
  -[JFXMediaSettings frameSize]
  -[JFXMediaSettings renderSize]
  -[JFXMediaSettings compositionSize]


CFXEffect : NSObject <NSCopying>
 @property  BOOL isNone
 @property  JFXEffect *jtEffect
 @property  NSString *identifier
 @property  NSString *localizedTitle

  // class methods
  +[CFXEffect effectIdentifiersForEffectType:]
  +[CFXEffect setupFactoryDelegate]
  +[CFXEffect initEffectRegistry]
  +[CFXEffect preWarmShaderCache]
  +[CFXEffect effectWithIdentifier:forEffectType:]
  +[CFXEffect effectWithJTEffect:]

  // instance methods
  -[CFXEffect localizedTitle]
  -[CFXEffect isNone]
  -[CFXEffect .cxx_destruct]
  -[CFXEffect isEqual:]
  -[CFXEffect identifier]
  -[CFXEffect copyWithZone:]
  -[CFXEffect jtEffect]
  -[CFXEffect initWithJTEffect:]
  -[CFXEffect setJtEffect:]


CFXEffectPickerViewController : UIViewController <CFXEffectPickerViewDelegate, CFXEffectPickerViewDataSource, CFXFilterEffectPickerViewDataSource, CFXFilterEffectPickerViewDelegate, FunCamFilterPickerPresentationDelegate>
 @property  NSArray *effects
 @property  NSObject<OS_dispatch_queue> *effectLoadingQueue
 @property  CFXEffectPickerView *pickerView
 @property  BOOL previewing
 @property  UIImage *previewBackgroundImage
 @property  CFXEffectType *effectType
 @property  <CFXEffectPickerViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXEffectPickerViewController effectPickerViewController]

  // instance methods
  -[CFXEffectPickerViewController isPreviewing]
  -[CFXEffectPickerViewController effects]
  -[CFXEffectPickerViewController .cxx_destruct]
  -[CFXEffectPickerViewController viewDidLoad]
  -[CFXEffectPickerViewController setDelegate:]
  -[CFXEffectPickerViewController pickerView]
  -[CFXEffectPickerViewController willMoveToParentViewController:]
  -[CFXEffectPickerViewController effectType]
  -[CFXEffectPickerViewController viewWillDisappear:]
  -[CFXEffectPickerViewController viewWillAppear:]
  -[CFXEffectPickerViewController delegate]
  -[CFXEffectPickerViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[CFXEffectPickerViewController setPickerView:]
  -[CFXEffectPickerViewController setPreviewing:]
  -[CFXEffectPickerViewController setEffectType:]
  -[CFXEffectPickerViewController startPreviewing]
  -[CFXEffectPickerViewController stopPreviewing]
  -[CFXEffectPickerViewController shouldRotateCellsForDeviceOrientation]
  -[CFXEffectPickerViewController shouldDisplayExpandedModeForFilterPickerView:]
  -[CFXEffectPickerViewController numberOfEffectsInPickerView:]
  -[CFXEffectPickerViewController effectPickerView:indexForEffectID:]
  -[CFXEffectPickerViewController selectedFilterIndexForFilterPickerView:]
  -[CFXEffectPickerViewController effectPickerView:effectTitleAtIndex:]
  -[CFXEffectPickerViewController setEffects:]
  -[CFXEffectPickerViewController previewBackgroundImage]
  -[CFXEffectPickerViewController effectPickerView:didPickEffectAtIndex:]
  -[CFXEffectPickerViewController effectPickerViewDidScroll:]
  -[CFXEffectPickerViewController effectPickerView:effectIdentifierAtIndex:]
  -[CFXEffectPickerViewController effectPickerView:effectAtIndex:forPreviewingAtSizeInPixels:completionBlock:]
  -[CFXEffectPickerViewController setPreviewBackgroundImage:]
  -[CFXEffectPickerViewController setEffectLoadingQueue:]
  -[CFXEffectPickerViewController CFX_restartPreviewing]
  -[CFXEffectPickerViewController CFX_stopPreviewing]
  -[CFXEffectPickerViewController CFX_createPickerViewForEffectType:]
  -[CFXEffectPickerViewController CFX_loadEffectsForType:completion:]
  -[CFXEffectPickerViewController CFX_indexForEffectIdentifier:]
  -[CFXEffectPickerViewController CFX_configureEffect:previewSizeInPixels:]
  -[CFXEffectPickerViewController effectLoadingQueue]
  -[CFXEffectPickerViewController filterPickerPresentationModeDidChange]
  -[CFXEffectPickerViewController effectPickerView:effectAtIndex:]


JFXOverlayEffectDebugViewOptions : NSObject
 @property  BOOL showDocumentBoundingBox
 @property  BOOL showObjectAlignedBoundingBox
 @property  BOOL showTextBoundingBoxes
 @property  BOOL showHitAreaBoundingBox
 @property  BOOL showFaceRect
 @property  BOOL showTapPoints
 @property  BOOL showMidpoint
 @property  BOOL showCornerPoints
 @property  BOOL showTextCornerPoints
 @property  BOOL showHitAreaPoints
 @property  BOOL showAdditionalRects
 @property  UIColor *documentBoundingBoxColor
 @property  UIColor *outputROIColor
 @property  UIColor *objectAlignedBoundingBoxColor
 @property  NSArray *textBoundingBoxColors
 @property  UIColor *hitAreaBoundingBoxColor
 @property  UIColor *midpointColor
 @property  NSArray *cornerPointColors
 @property  NSArray *textCornerPointColors
 @property  NSArray *hitAreaPointColors

  // class methods
  +[JFXOverlayEffectDebugViewOptions debugViewOptionsWithDictionary:]

  // instance methods
  -[JFXOverlayEffectDebugViewOptions .cxx_destruct]
  -[JFXOverlayEffectDebugViewOptions init]
  -[JFXOverlayEffectDebugViewOptions midpointColor]
  -[JFXOverlayEffectDebugViewOptions showTextBoundingBoxes]
  -[JFXOverlayEffectDebugViewOptions setShowDocumentBoundingBox:]
  -[JFXOverlayEffectDebugViewOptions setShowObjectAlignedBoundingBox:]
  -[JFXOverlayEffectDebugViewOptions setShowTextBoundingBoxes:]
  -[JFXOverlayEffectDebugViewOptions setShowHitAreaBoundingBox:]
  -[JFXOverlayEffectDebugViewOptions setShowFaceRect:]
  -[JFXOverlayEffectDebugViewOptions setShowTapPoints:]
  -[JFXOverlayEffectDebugViewOptions setShowCornerPoints:]
  -[JFXOverlayEffectDebugViewOptions setShowTextCornerPoints:]
  -[JFXOverlayEffectDebugViewOptions setShowHitAreaPoints:]
  -[JFXOverlayEffectDebugViewOptions setShowAdditionalRects:]
  -[JFXOverlayEffectDebugViewOptions setShowMidpoint:]
  -[JFXOverlayEffectDebugViewOptions setDocumentBoundingBoxColor:]
  -[JFXOverlayEffectDebugViewOptions setOutputROIColor:]
  -[JFXOverlayEffectDebugViewOptions setObjectAlignedBoundingBoxColor:]
  -[JFXOverlayEffectDebugViewOptions setTextBoundingBoxColors:]
  -[JFXOverlayEffectDebugViewOptions setHitAreaBoundingBoxColor:]
  -[JFXOverlayEffectDebugViewOptions setMidpointColor:]
  -[JFXOverlayEffectDebugViewOptions setCornerPointColors:]
  -[JFXOverlayEffectDebugViewOptions setTextCornerPointColors:]
  -[JFXOverlayEffectDebugViewOptions setHitAreaPointColors:]
  -[JFXOverlayEffectDebugViewOptions showDocumentBoundingBox]
  -[JFXOverlayEffectDebugViewOptions showObjectAlignedBoundingBox]
  -[JFXOverlayEffectDebugViewOptions showHitAreaBoundingBox]
  -[JFXOverlayEffectDebugViewOptions showFaceRect]
  -[JFXOverlayEffectDebugViewOptions showTapPoints]
  -[JFXOverlayEffectDebugViewOptions showMidpoint]
  -[JFXOverlayEffectDebugViewOptions showCornerPoints]
  -[JFXOverlayEffectDebugViewOptions showTextCornerPoints]
  -[JFXOverlayEffectDebugViewOptions showHitAreaPoints]
  -[JFXOverlayEffectDebugViewOptions showAdditionalRects]
  -[JFXOverlayEffectDebugViewOptions documentBoundingBoxColor]
  -[JFXOverlayEffectDebugViewOptions outputROIColor]
  -[JFXOverlayEffectDebugViewOptions objectAlignedBoundingBoxColor]
  -[JFXOverlayEffectDebugViewOptions textBoundingBoxColors]
  -[JFXOverlayEffectDebugViewOptions hitAreaBoundingBoxColor]
  -[JFXOverlayEffectDebugViewOptions cornerPointColors]
  -[JFXOverlayEffectDebugViewOptions textCornerPointColors]
  -[JFXOverlayEffectDebugViewOptions hitAreaPointColors]


JFXAnimojiEffect : JFXEffect
 @property  UIImage *thumbnail
 @property  long long captureInterfaceOrientation

  // class methods
  +[JFXAnimojiEffect supportsSecureCoding]
  +[JFXAnimojiEffect createMemojiEffectWithContentsOfFile:identifier:]
  +[JFXAnimojiEffect createAnimojiEffectForID:]
  +[JFXAnimojiEffect animojiIDs]
  +[JFXAnimojiEffect isAvatarKitAvailable]

  // instance methods
  -[JFXAnimojiEffect displayName]
  -[JFXAnimojiEffect initWithCoder:]
  -[JFXAnimojiEffect dataRepresentation]
  -[JFXAnimojiEffect thumbnail]
  -[JFXAnimojiEffect type]
  -[JFXAnimojiEffect copyWithZone:]
  -[JFXAnimojiEffect encodeWithCoder:]
  -[JFXAnimojiEffect captureInterfaceOrientation]
  -[JFXAnimojiEffect renderEffect]
  -[JFXAnimojiEffect avatarVersionNumber]
  -[JFXAnimojiEffect setCaptureInterfaceOrientation:]
  -[JFXAnimojiEffect loadRenderEffect]
  -[JFXAnimojiEffect loadRenderEffectInBackgroundWithCompletionOnMainQueue:]
  -[JFXAnimojiEffect loadRenderEffectOnQueue:completion:]
  -[JFXAnimojiEffect _convertRenderEffectPoints:toBasisRect:basisOrigin:]
  -[JFXAnimojiEffect _convertRenderEffectPoints:numPoints:toBasisRect:basisOrigin:]
  -[JFXAnimojiEffect _convertRenderEffectPoints:numPoints:fromBasisRect:basisOrigin:]
  -[JFXAnimojiEffect _affineTransformFromEffectRect:toSize:basisOrigin:]
  -[JFXAnimojiEffect transform:basisOrigin:]


JFXEffectsPreviewGeneratorJob : NSObject
 @property  NSArray *outputNodes
 @property  NSArray *callbackKeys

  // instance methods
  -[JFXEffectsPreviewGeneratorJob .cxx_destruct]
  -[JFXEffectsPreviewGeneratorJob init]
  -[JFXEffectsPreviewGeneratorJob initWithRenderOutputs:callbackKeys:]
  -[JFXEffectsPreviewGeneratorJob outputNodes]
  -[JFXEffectsPreviewGeneratorJob callbackKeys]


CFXEffectHostAppDelegate : NSObject <PVHostApplicationDelegate>
 @property  <PVHostApplicationDelegate> *colorSpaceDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXEffectHostAppDelegate sharedInstance]

  // instance methods
  -[CFXEffectHostAppDelegate .cxx_destruct]
  -[CFXEffectHostAppDelegate setColorSpaceDelegate:]
  -[CFXEffectHostAppDelegate preferredDisplayColorSpace]
  -[CFXEffectHostAppDelegate preferredExportColorSpace]
  -[CFXEffectHostAppDelegate colorSpaceDelegate]
  -[CFXEffectHostAppDelegate effectTemplatesDirectoryName]
  -[CFXEffectHostAppDelegate effectTemplatesBundle]
  -[CFXEffectHostAppDelegate wantsExtraLineSpacingForDiacritics]
  -[CFXEffectHostAppDelegate wantsDynamicLineSpacingForDiacritics]
  -[CFXEffectHostAppDelegate wantsToScaleEmojiToCapHeight]
  -[CFXEffectHostAppDelegate wantsToSkipSuggestedLineBreaksInParagraphLayout]
  -[CFXEffectHostAppDelegate wantsToUseBinarySearchForScalingToBothMargins]
  -[CFXEffectHostAppDelegate wantsToLimitLinesOfText]
  -[CFXEffectHostAppDelegate getNumberOfLinesToLimitTextTo]
  -[CFXEffectHostAppDelegate wantsToImproveQualityOfDraftQualityText]
  -[CFXEffectHostAppDelegate wantsToDownscaleGlyphsToOutputSize]
  -[CFXEffectHostAppDelegate wantsToSetTranscriptionsUsingArray]
  -[CFXEffectHostAppDelegate wantsToIgnoreTextBoundsOfTransparentObjects]
  -[CFXEffectHostAppDelegate wantsToIgnoreTextBoundsOfNewlinesOfTranscriptions]
  -[CFXEffectHostAppDelegate wantsToUseCachedTextureForText]
  -[CFXEffectHostAppDelegate wantsToIncludeSubstituteFontNameInAttributedString]
  -[CFXEffectHostAppDelegate wantsToIncludeTrackingValueInAttributedString]
  -[CFXEffectHostAppDelegate wantsToComputeTypographicHeightWithoutLastLineLeading]
  -[CFXEffectHostAppDelegate wantsToAdjustTextBoundsHeightUsingCapHeight]
  -[CFXEffectHostAppDelegate wantsToCacheTopLevelGroupRender]
  -[CFXEffectHostAppDelegate getMaxGlyphResolution]


JFXInstructionGraphBuilder : NSObject
 @property  {CGSize=dd} outputSize
 @property  {CGSize=dd} frameSize
 @property  int renderingIntent

  // class methods
  +[JFXInstructionGraphBuilder JFX_scaleForMediaSize:mediaContentMode:clipAspectRatio:outputSize:outputContentMode:]
  +[JFXInstructionGraphBuilder JFX_transformNode:scale:]
  +[JFXInstructionGraphBuilder JFX_maskNode:maskRect:basisSize:]

  // instance methods
  -[JFXInstructionGraphBuilder outputSize]
  -[JFXInstructionGraphBuilder frameSize]
  -[JFXInstructionGraphBuilder initWithOutputSize:frameSize:]
  -[JFXInstructionGraphBuilder setRenderingIntent:]
  -[JFXInstructionGraphBuilder instructionGraphForPlayableElement:presentationTimeRange:sourceTransform:compositionTrackID:liveTransform:excludingEffectType:customRendererProperties:]
  -[JFXInstructionGraphBuilder _sourceNodeForVideoMediaItem:sourceTransform:compositionTrackID:transformAnimation:transformAnimationContentMode:]
  -[JFXInstructionGraphBuilder _sourceNodeForStillMediaItem:sourceTransform:transformAnimation:transformAnimationContentMode:presentationRange:]
  -[JFXInstructionGraphBuilder applyEffectStack:presentationRange:toInput:]
  -[JFXInstructionGraphBuilder JFX_mediaTransformAnimationForPlayableElement:liveTransform:]
  -[JFXInstructionGraphBuilder sourceNodeForMediaItem:sourceTransform:compositionTrackID:transformAnimation:transformAnimationContentMode:presentationTimeRange:mediaScale:playableAspectRatio:playableAspectRatioPreservationMode:]
  -[JFXInstructionGraphBuilder JFX_applyCustomRenderingPropertiesToInputNode:customRendererProperties:transformAnimation:transformAnimationContentMode:mediaScale:]
  -[JFXInstructionGraphBuilder JFX_calculateCompositeNodeTransformForCropWithCompositeNodeOutputSize:mediaScale:]
  -[JFXInstructionGraphBuilder blendNodeForClipSourceNodes:]
  -[JFXInstructionGraphBuilder sourceNodeForImageBuffer:sourceTransform:]
  -[JFXInstructionGraphBuilder sourceNodeForGeneratorEffect:effectRange:]
  -[JFXInstructionGraphBuilder applyEffectStack:toInput:]
  -[JFXInstructionGraphBuilder _buildTestXFormAnimation:baseTransform:clipNaturalSize:]
  -[JFXInstructionGraphBuilder renderingIntent]


CFXMediaItemAdjustmentsData : NSObject <NSSecureCoding>
 @property  long long cameraMode
 @property  NSURL *metadataURL
 @property  long long cameraPosition
 @property  NSArray *effectStack

  // class methods
  +[CFXMediaItemAdjustmentsData supportsSecureCoding]
  +[CFXMediaItemAdjustmentsData secureCodingClassWhitelist]

  // instance methods
  -[CFXMediaItemAdjustmentsData initWithCoder:]
  -[CFXMediaItemAdjustmentsData .cxx_destruct]
  -[CFXMediaItemAdjustmentsData cameraPosition]
  -[CFXMediaItemAdjustmentsData metadataURL]
  -[CFXMediaItemAdjustmentsData encodeWithCoder:]
  -[CFXMediaItemAdjustmentsData cameraMode]
  -[CFXMediaItemAdjustmentsData effectStack]
  -[CFXMediaItemAdjustmentsData initWithCameraMode:metadataURL:cameraPosition:effectStack:]


CFXMediaItem : NSObject
 @property  BOOL initializedWithoutSettingAllProperties
 @property  BOOL adjustmentsDataWasSet
 @property  long long cameraMode
 @property  NSURL *metadataURL
 @property  long long cameraPosition
 @property  CFXClip *clip
 @property  NSData *adjustmentsData
 @property  NSURL *adjustedAssetURL
 @property  NSURL *originalAssetURL
 @property  long long type

  // instance methods
  -[CFXMediaItem clip]
  -[CFXMediaItem setType:]
  -[CFXMediaItem .cxx_destruct]
  -[CFXMediaItem setOriginalAssetURL:]
  -[CFXMediaItem cameraPosition]
  -[CFXMediaItem init]
  -[CFXMediaItem adjustmentsData]
  -[CFXMediaItem originalAssetURL]
  -[CFXMediaItem type]
  -[CFXMediaItem metadataURL]
  -[CFXMediaItem setAdjustmentsData:]
  -[CFXMediaItem cameraMode]
  -[CFXMediaItem adjustedAssetURL]
  -[CFXMediaItem setAdjustedAssetURL:]
  -[CFXMediaItem CFX_updateCameraPositionForPhotoType]
  -[CFXMediaItem setAdjustmentsDataWasSet:]
  -[CFXMediaItem createClipForMediaType:assetURL:cameraMode:effectStack:]
  -[CFXMediaItem initializedWithoutSettingAllProperties]
  -[CFXMediaItem adjustmentsDataWasSet]
  -[CFXMediaItem initWithCameraMode:clip:assetMediaURL:assetMetadataURL:cameraPosition:]
  -[CFXMediaItem initWithType:originalAssetURL:adjustmentsData:]
  -[CFXMediaItem setInitializedWithoutSettingAllProperties:]


JTCollectionView : UICollectionView
 @property  {CGSize=dd} lastCollectionViewSize
 @property  BOOL inLayout

  // instance methods
  -[JTCollectionView layoutIfNeeded]
  -[JTCollectionView layoutSubviews]
  -[JTCollectionView firstVisibleIndexPath]
  -[JTCollectionView selectedItem]
  -[JTCollectionView _accessibilityOpaqueElementScrollsContentIntoView]
  -[JTCollectionView setInLayout:]
  -[JTCollectionView lastCollectionViewSize]
  -[JTCollectionView setLastCollectionViewSize:]
  -[JTCollectionView sortedIndexPathsForVisibleItems]
  -[JTCollectionView inLayout]
  -[JTCollectionView visibleSections]


CFXRecordingThermalPolicy : JFXCameraFPSThermalPolicy
  // instance methods
  -[CFXRecordingThermalPolicy priority]
  -[CFXRecordingThermalPolicy cameraFPSForThermalLevel:deviceType:minRate:maxRate:]


JFXFaceTrackedEffectTransform : NSObject <NSCopying>
 @property  {?=[4]} cameraProjection
 @property  {?=[4]} cameraTransform
 @property  {?=[4]} billboardTransform
 @property  {?=[4]} onFaceTransform
 @property  NSDictionary *effectParametersForOnFaceTracking
 @property  NSDictionary *effectParametersForOnBillboardTracking

  // instance methods
  -[JFXFaceTrackedEffectTransform .cxx_destruct]
  -[JFXFaceTrackedEffectTransform copyWithZone:]
  -[JFXFaceTrackedEffectTransform cameraTransform]
  -[JFXFaceTrackedEffectTransform effectParametersForTrackingType:]
  -[JFXFaceTrackedEffectTransform isEqual:forTrackingType:]
  -[JFXFaceTrackedEffectTransform transformForTrackingType:]
  -[JFXFaceTrackedEffectTransform cameraProjection]
  -[JFXFaceTrackedEffectTransform initWithCameraProjection:cameraTransform:onFaceTransform:billboardTransform:]
  -[JFXFaceTrackedEffectTransform effectParametersForOnBillboardTracking]
  -[JFXFaceTrackedEffectTransform effectParametersForOnFaceTracking]
  -[JFXFaceTrackedEffectTransform billboardTransform]
  -[JFXFaceTrackedEffectTransform onFaceTransform]


CFXFilterEffectContentDataSource : NSObject <JFXFilterEffectContentDataSource>
 @property  BOOL isContentAvailable
 @property  unsigned long contentAvailability
 @property  NSString *contentVersion
 @property  NSString *localizedDisplayName
 @property  NSString *localizedAccessibilityName
 @property  NSNumber *requiredProVideoVersion
 @property  BOOL isContentNew
 @property  NSNumber *isExpensive
 @property  BOOL isStyleTransfer
 @property  NSNumber *proxyRenderScale
 @property  long long inverseToneMapOperator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXFilterEffectContentDataSource localizedDisplayName]
  -[CFXFilterEffectContentDataSource .cxx_destruct]
  -[CFXFilterEffectContentDataSource setLocalizedDisplayName:]
  -[CFXFilterEffectContentDataSource contentVersion]
  -[CFXFilterEffectContentDataSource setContentVersion:]
  -[CFXFilterEffectContentDataSource isContentAvailable]
  -[CFXFilterEffectContentDataSource isExpensive]
  -[CFXFilterEffectContentDataSource setIsExpensive:]
  -[CFXFilterEffectContentDataSource contentAvailability]
  -[CFXFilterEffectContentDataSource localizedAccessibilityName]
  -[CFXFilterEffectContentDataSource requiredProVideoVersion]
  -[CFXFilterEffectContentDataSource isContentNew]
  -[CFXFilterEffectContentDataSource isStyleTransfer]
  -[CFXFilterEffectContentDataSource proxyRenderScale]
  -[CFXFilterEffectContentDataSource inverseToneMapOperator]
  -[CFXFilterEffectContentDataSource initWithEffectID:]
  -[CFXFilterEffectContentDataSource setIsContentAvailable:]
  -[CFXFilterEffectContentDataSource setContentAvailability:]
  -[CFXFilterEffectContentDataSource setLocalizedAccessibilityName:]
  -[CFXFilterEffectContentDataSource setRequiredProVideoVersion:]
  -[CFXFilterEffectContentDataSource setIsContentNew:]
  -[CFXFilterEffectContentDataSource setIsStyleTransfer:]
  -[CFXFilterEffectContentDataSource setProxyRenderScale:]
  -[CFXFilterEffectContentDataSource setInverseToneMapOperator:]


JFXCompositionTrackGroup : NSObject
 @property  NSString *timePitchAlgorithm
 @property  NSMutableArray *extraAudioTrackGroups
 @property  ^{opaqueCMFormatDescription=} audioFormatDescription
 @property  BOOL seenSpeedClip
 @property  BOOL seenMoreThanOneASBD
 @property  AVMutableAudioMixInputParameters *audioParameters
 @property  NSDictionary *fmTrackInfoDict
 @property  {?=qiIq} lastRampToZeroEnd
 @property  BOOL isFlexMusic
 @property  {?=qiIq} cursorForMovieAudio
 @property  int timeScale
 @property  BOOL videoTrackInUse
 @property  NSMutableArray *videoSegments
 @property  NSMutableArray *audioSegments
 @property  NSString *label
 @property  AVMutableCompositionTrack *videoTrack
 @property  AVMutableCompositionTrack *audioTrack
 @property  NSString *preferredAudioTimePitchAlgorithm
 @property  int actualVideoTrackID
 @property  int usableVideoTrackID
 @property  {?=qiIq} cursor
 @property  {?=qiIq} cursorAtLastVideoInsertion
 @property  {?=qiIq} timeOfLastVolumeChange
 @property  {?=qiIq} timeOfLastRequest
 @property  float volumeAtLastVolumeChange
 @property  float volumeChangePending
 @property  {?=qiIq} fadeOutStart
 @property  {?=qiIq} fadeOutDuration
 @property  AVMutableComposition *composition
 @property  BOOL isExporting

  // class methods
  +[JFXCompositionTrackGroup visualDescriptionForSegments:]

  // instance methods
  -[JFXCompositionTrackGroup cursor]
  -[JFXCompositionTrackGroup label]
  -[JFXCompositionTrackGroup apply:]
  -[JFXCompositionTrackGroup timeScale]
  -[JFXCompositionTrackGroup validate]
  -[JFXCompositionTrackGroup composition]
  -[JFXCompositionTrackGroup .cxx_destruct]
  -[JFXCompositionTrackGroup setIsExporting:]
  -[JFXCompositionTrackGroup audioTrack]
  -[JFXCompositionTrackGroup isExporting]
  -[JFXCompositionTrackGroup fadeOutDuration]
  -[JFXCompositionTrackGroup setTimeScale:]
  -[JFXCompositionTrackGroup setFadeOutDuration:]
  -[JFXCompositionTrackGroup audioFormatDescription]
  -[JFXCompositionTrackGroup audioParameters]
  -[JFXCompositionTrackGroup markDirty]
  -[JFXCompositionTrackGroup dealloc]
  -[JFXCompositionTrackGroup setLabel:]
  -[JFXCompositionTrackGroup setComposition:]
  -[JFXCompositionTrackGroup videoSegments]
  -[JFXCompositionTrackGroup setVideoTrack:]
  -[JFXCompositionTrackGroup videoTrack]
  -[JFXCompositionTrackGroup initWithLabel:timeScale:]
  -[JFXCompositionTrackGroup setAudioTrack:]
  -[JFXCompositionTrackGroup setFadeOutStart:]
  -[JFXCompositionTrackGroup actualVideoTrackID]
  -[JFXCompositionTrackGroup requestVolumeRampFromStartVolume:toEndVolume:timeRange:]
  -[JFXCompositionTrackGroup requestVolume:atTime:]
  -[JFXCompositionTrackGroup setPreferredAudioTimePitchAlgorithm:]
  -[JFXCompositionTrackGroup applyCompositionItem:skipAudio:]
  -[JFXCompositionTrackGroup applyPaddingToTime:]
  -[JFXCompositionTrackGroup usableVideoTrackID]
  -[JFXCompositionTrackGroup commitPendingVolumeToTime:]
  -[JFXCompositionTrackGroup applyAudioMixParameters:]
  -[JFXCompositionTrackGroup setAudioFormatDescription:]
  -[JFXCompositionTrackGroup removeExtraAudioTrackGroups]
  -[JFXCompositionTrackGroup containsVideoSegments]
  -[JFXCompositionTrackGroup containsAudioSegments]
  -[JFXCompositionTrackGroup setSeenSpeedClip:]
  -[JFXCompositionTrackGroup setSeenMoreThanOneASBD:]
  -[JFXCompositionTrackGroup resetVolumeState]
  -[JFXCompositionTrackGroup extraAudioTrackGroups]
  -[JFXCompositionTrackGroup setExtraAudioTrackGroups:]
  -[JFXCompositionTrackGroup lastRampToZeroEnd]
  -[JFXCompositionTrackGroup applyCompositionItem:atTime:skipAudio:]
  -[JFXCompositionTrackGroup preferredAudioTimePitchAlgorithm]
  -[JFXCompositionTrackGroup applyToTrack:withSegments:assets:]
  -[JFXCompositionTrackGroup setAudioParameters:]
  -[JFXCompositionTrackGroup setTimeOfLastVolumeChange:]
  -[JFXCompositionTrackGroup setVolumeAtLastVolumeChange:]
  -[JFXCompositionTrackGroup setVolumeChangePending:]
  -[JFXCompositionTrackGroup setTimeOfLastRequest:]
  -[JFXCompositionTrackGroup setLastRampToZeroEnd:]
  -[JFXCompositionTrackGroup fadeOutStart]
  -[JFXCompositionTrackGroup linearFadeOutValueForTime:]
  -[JFXCompositionTrackGroup volumeAtLastVolumeChange]
  -[JFXCompositionTrackGroup timeOfLastVolumeChange]
  -[JFXCompositionTrackGroup isFlexMusic]
  -[JFXCompositionTrackGroup setFadedVolumeRampFromStartVolume:toEndVolume:timeRange:]
  -[JFXCompositionTrackGroup volumeChangePending]
  -[JFXCompositionTrackGroup commitVolumeRampFromStartVolume:toEndVolume:timeRange:]
  -[JFXCompositionTrackGroup shouldCommitVolume:]
  -[JFXCompositionTrackGroup requestVolumeRampFromStartVolume:toEndVolume:timeRange:fillEmptySegment:]
  -[JFXCompositionTrackGroup containsSegments]
  -[JFXCompositionTrackGroup addExtraAudioTrackGroup:]
  -[JFXCompositionTrackGroup asbd:isEqualTo:]
  -[JFXCompositionTrackGroup applyCompositionItem:]
  -[JFXCompositionTrackGroup applyCompositionItem:atTime:]
  -[JFXCompositionTrackGroup applyCompositionItemAsLoopedAudio:forTimeRange:]
  -[JFXCompositionTrackGroup audioSegments]
  -[JFXCompositionTrackGroup setAudioSegments:]
  -[JFXCompositionTrackGroup cursorAtLastVideoInsertion]
  -[JFXCompositionTrackGroup timeOfLastRequest]
  -[JFXCompositionTrackGroup timePitchAlgorithm]
  -[JFXCompositionTrackGroup setTimePitchAlgorithm:]
  -[JFXCompositionTrackGroup seenSpeedClip]
  -[JFXCompositionTrackGroup seenMoreThanOneASBD]
  -[JFXCompositionTrackGroup fmTrackInfoDict]
  -[JFXCompositionTrackGroup setFmTrackInfoDict:]
  -[JFXCompositionTrackGroup setIsFlexMusic:]
  -[JFXCompositionTrackGroup cursorForMovieAudio]
  -[JFXCompositionTrackGroup videoTrackInUse]
  -[JFXCompositionTrackGroup setVideoTrackInUse:]
  -[JFXCompositionTrackGroup setVideoSegments:]


CFXEffectMessagesStickerUtilities : NSObject
  // class methods
  +[CFXEffectMessagesStickerUtilities animatedPreviewsDirectory]
  +[CFXEffectMessagesStickerUtilities animatedPreviewFileNameForOverlayID:]
  +[CFXEffectMessagesStickerUtilities JFX_recommendedStickerPreviewSizeInPixelsForStickerSize:]
  +[CFXEffectMessagesStickerUtilities cacheAnimatedStickerPreviewsForOverlayTypeId:atStickerSize:previewDuration:previewFrameRate:previewCompletedBlock:]
  +[CFXEffectMessagesStickerUtilities overlayIDFromAnimatedPreviewFileName:]
  +[CFXEffectMessagesStickerUtilities numberOfStickersForEffectTypeId:]
  +[CFXEffectMessagesStickerUtilities stickerPropertiesForIndex:forEffectTypeId:]


CFXCounterRotationLayer : CALayer
 @property  double zRotation

  // instance methods
  -[CFXCounterRotationLayer addAnimation:forKey:]
  -[CFXCounterRotationLayer zRotation]
  -[CFXCounterRotationLayer setZRotation:]


CFXCounterRotationView : UIView
 @property  double zRotation
 @property  {CGAffineTransform=dddddd} transform

  // class methods
  +[CFXCounterRotationView layerClass]

  // instance methods
  -[CFXCounterRotationView zRotation]
  -[CFXCounterRotationView setZRotation:]
  -[CFXCounterRotationView snapshotLayer]


JFXGuidedFilter : NSObject
  // instance methods
  -[JFXGuidedFilter .cxx_destruct]
  -[JFXGuidedFilter initWithDiameter:]
  -[JFXGuidedFilter dealloc]
  -[JFXGuidedFilter scaleImage:guidanceImage:destinationImage:]


JFXThermalMonitor : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  BOOL hasGoneAboveNominal
 @property  int currentThermalLevel
 @property  int highestThermalLevel
 @property  BOOL thermalLevelExceededNominal
 @property  int thermalLevel
 @property  int highestThermalLevelReached

  // class methods
  +[JFXThermalMonitor sharedInstance]
  +[JFXThermalMonitor enumerateThermalPressureLevel:]
  +[JFXThermalMonitor stringFromThermalPressureLevel:]

  // instance methods
  -[JFXThermalMonitor _postNotification:]
  -[JFXThermalMonitor thermalLevel]
  -[JFXThermalMonitor .cxx_destruct]
  -[JFXThermalMonitor currentThermalLevel]
  -[JFXThermalMonitor init]
  -[JFXThermalMonitor setQueue:]
  -[JFXThermalMonitor queue]
  -[JFXThermalMonitor setCurrentThermalLevel:]
  -[JFXThermalMonitor setHighestThermalLevel:]
  -[JFXThermalMonitor _updateThermalLevelsWithToken:]
  -[JFXThermalMonitor _analyticValueForThermalLevelBefore:after:]
  -[JFXThermalMonitor highestThermalLevel]
  -[JFXThermalMonitor _disabledThermalTracking]
  -[JFXThermalMonitor thermalLevelExceededNominal]
  -[JFXThermalMonitor highestThermalLevelReached]
  -[JFXThermalMonitor thermalLevelLabel]
  -[JFXThermalMonitor hasGoneAboveNominal]
  -[JFXThermalMonitor setHasGoneAboveNominal:]


JTImage : NSObject
 @property  UIImage *image
 @property  PVImageBuffer *pvImageBuffer

  // class methods
  +[JTImage jtImageWithUIImage:]

  // instance methods
  -[JTImage image]
  -[JTImage .cxx_destruct]
  -[JTImage bluredImageWithFlippedXAxis:]
  -[JTImage initWithPVImage:]
  -[JTImage pvImageBuffer]
  -[JTImage initWithUIImage:]
  -[JTImage hasPVImageBufferAndCanCreateCVPixelBufferWithoutCopy]


JFXLRUCache : NSObject
 @property  NSMutableDictionary *dictionary
 @property  NSMutableOrderedSet *keys
 @property  NSObject<OS_dispatch_queue> *cacheQueue
 @property  unsigned long capacity
 @property  unsigned long count

  // instance methods
  -[JFXLRUCache setCapacity:]
  -[JFXLRUCache capacity]
  -[JFXLRUCache keys]
  -[JFXLRUCache objectForKey:]
  -[JFXLRUCache objectsForKeys:notFoundMarker:]
  -[JFXLRUCache removeAllObjects]
  -[JFXLRUCache cacheQueue]
  -[JFXLRUCache setKeys:]
  -[JFXLRUCache setObject:forKey:]
  -[JFXLRUCache initWithCapacity:]
  -[JFXLRUCache .cxx_destruct]
  -[JFXLRUCache count]
  -[JFXLRUCache removeObjectForKey:]
  -[JFXLRUCache dictionary]
  -[JFXLRUCache addEntriesFromDictionary:]
  -[JFXLRUCache dealloc]
  -[JFXLRUCache highMemoryWarning]
  -[JFXLRUCache JT_removeLeastRecentlyUsedIfAtCapacity]
  -[JFXLRUCache JT_markRecentlyUsed:]


JFXExportController : NSObject
 @property  unsigned long exportStartTime
 @property  JFXComposition *composition
 @property  NSArray *presets
 @property  NSString *currentPreset
 @property  UIImage *poster
 @property  <JFXExportDelegate> *delegate
 @property  NSString *exportPath
 @property  NSTimer *progressTimer
 @property  unsigned long exportingIndexPresets
 @property  long long status
 @property  BOOL cancel

  // class methods
  +[JFXExportController estimatedFileSizeForDuration:frameRate:preset:size:]
  +[JFXExportController dataRateForPreset:size:]
  +[JFXExportController videoDataRateForPreset:size:]
  +[JFXExportController audioDataRateForPreset:]

  // instance methods
  -[JFXExportController setCancel:]
  -[JFXExportController presets]
  -[JFXExportController composition]
  -[JFXExportController .cxx_destruct]
  -[JFXExportController setDelegate:]
  -[JFXExportController progress]
  -[JFXExportController currentPreset]
  -[JFXExportController poster]
  -[JFXExportController setPresets:]
  -[JFXExportController setPoster:]
  -[JFXExportController status]
  -[JFXExportController cancel]
  -[JFXExportController delegate]
  -[JFXExportController setStatus:]
  -[JFXExportController setComposition:]
  -[JFXExportController setCurrentPreset:]
  -[JFXExportController startProgressTimer]
  -[JFXExportController stopProgressTimer]
  -[JFXExportController exportDuration]
  -[JFXExportController setProgressTimer:]
  -[JFXExportController progressTimer]
  -[JFXExportController setExportStartTime:]
  -[JFXExportController initWithWithComposition:presets:toFile:poster:delegate:]
  -[JFXExportController beginAsynchronousExport]
  -[JFXExportController cancelExportWithStatus:]
  -[JFXExportController exportStartTime]
  -[JFXExportController exportingIndexPresets]
  -[JFXExportController setExportingIndexPresets:]
  -[JFXExportController nextPreset]
  -[JFXExportController analyticsForSessionBegin]
  -[JFXExportController updateProgressViewWithProgress:reduced:]
  -[JFXExportController continueExportAfterDelay]
  -[JFXExportController closeSessionWithStatus:]
  -[JFXExportController analyticsForSessionCompleteWithStatus:]
  -[JFXExportController informDelegateOfCompletion]
  -[JFXExportController serviceProgressTimer:]
  -[JFXExportController metadataToAdd]
  -[JFXExportController exportPath]
  -[JFXExportController setExportPath:]


JFXVideoCameraController : NSObject <AVCaptureDataOutputSynchronizerDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, AVCapturePhotoCaptureDelegate, AVCaptureMetadataOutputObjectsDelegate, JFXARKitFrameDelegate>
 @property  long long cameraMode_captureSessionQueue
 @property  long long cameraMode_dataOutSynchQueue
 @property  long long cameraMode_queryDataQueue
 @property  BOOL captureSessionRunning_queryDataQueue
 @property  NSString *cameraType_queryDataQueue
 @property  long long currentCameraPosition_captureSessionQueue
 @property  long long currentCameraPosition_dataOutSynchQueue
 @property  long long currentCameraPosition_queryDataQueue
 @property  long long cameraColorSpace_queryDataQueue
 @property  double cameraVideoZoomFactor_queryDataQueue
 @property  double cameraVideoMaxZoomFactor_captureSessionQueue
 @property  {?=[3]} cameraDeviceIntrinsics_dataOutSynchQueue
 @property  {CGSize=dd} cameraFrameResolution_dataOutSynchQueue
 @property  long long cachedMovieRecordingTorchMode
 @property  NSArray *pvDetectedFacesArray_dataOutSynchQueue
 @property  NSArray *metadataFaceObjectsArray_dataOutSynchQueue
 @property  NSArray *metadataTrackedFacesArray_dataOutSynchQueue
 @property  long long captureVideoOrientation_dataOutSynchQueue
 @property  long long captureVideoOrientation_queryDataQueue
 @property  BOOL allowARMetadata_queryDataQueue
 @property  BOOL hasValidFaceData_queryDataQueue
 @property  BOOL sessionRequiresFaceTracking_queryDataQueue
 @property  BOOL isFlashScene_queryDataQueue
 @property  JFXARKitCameraSessionController *arCameraSessionController
 @property  PVFrameSet *capturedPhotoFrameSet_dataOutSynchQueue
 @property  PVFrameSet *currentFrameSet_dataOutSynchQueue
 @property  JFXARMetadata *mostRecentARMetadata_queryDataQueue
 @property  JFXFaceAnchor *stillImageFaceAnchor_queryDataQueue
 @property  BOOL isRecordingMovie_captureSessionQueue
 @property  VCPCaptureAnalysisSession *vcpAnalyzer
 @property  NSNumber *currentlyTrackedFaceID
 @property  JFXCaptureCallObserver *callObserver
 @property  long long cameraMode
 @property  BOOL cameraSessionRunning
 @property  long long cameraColorSpace
 @property  BOOL audioEnabled
 @property  BOOL depthEnabled
 @property  BOOL hasFFCZoomEnabled
 @property  BOOL isFlashScene
 @property  {?=ii} depthDimensions
 @property  NSNumber *largestDepthDimension
 @property  double zoomFactor
 @property  NSString *ownerName
 @property  <JFXVideoCameraThermalDelegate> *thermalDelegate
 @property  BOOL ARKitEnabled
 @property  JFXARMetadata *mostRecentARMetadata
 @property  JFXFaceAnchor *stillImageFaceAnchor
 @property  BOOL allowARMetadata
 @property  BOOL hasValidFaceData
 @property  BOOL sessionRequiresFaceTracking
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXVideoCameraController initialize]
  +[JFXVideoCameraController sharedInstance]
  +[JFXVideoCameraController allowsDepthFromDualBackCamera]
  +[JFXVideoCameraController cameraZoomFactorForUIZoomFactor:captureDeviceType:]

  // instance methods
  -[JFXVideoCameraController callObserver]
  -[JFXVideoCameraController ownerName]
  -[JFXVideoCameraController clear]
  -[JFXVideoCameraController setOwnerName:]
  -[JFXVideoCameraController zoomFactor]
  -[JFXVideoCameraController setZoomFactor:]
  -[JFXVideoCameraController .cxx_destruct]
  -[JFXVideoCameraController depthDimensions]
  -[JFXVideoCameraController cameraType]
  -[JFXVideoCameraController depthEnabled]
  -[JFXVideoCameraController cameraPosition]
  -[JFXVideoCameraController audioEnabled]
  -[JFXVideoCameraController init]
  -[JFXVideoCameraController captureOutput:didOutputSampleBuffer:fromConnection:]
  -[JFXVideoCameraController captureOutput:didFinishProcessingPhoto:error:]
  -[JFXVideoCameraController isFlashScene]
  -[JFXVideoCameraController dealloc]
  -[JFXVideoCameraController faceTrackingEnabled]
  -[JFXVideoCameraController observeValueForKeyPath:ofObject:change:context:]
  -[JFXVideoCameraController dataOutputSynchronizer:didOutputSynchronizedDataCollection:]
  -[JFXVideoCameraController captureVideoOrientation]
  -[JFXVideoCameraController cameraMode]
  -[JFXVideoCameraController prepareCameraForMode:position:completion:]
  -[JFXVideoCameraController setThermalDelegate:]
  -[JFXVideoCameraController sessionRequiresFaceTracking]
  -[JFXVideoCameraController cameraSessionRunning]
  -[JFXVideoCameraController setCaptureTorchMode:completion:]
  -[JFXVideoCameraController startCameraSession:]
  -[JFXVideoCameraController stopCameraSession:]
  -[JFXVideoCameraController setSessionRequiresFaceTracking:]
  -[JFXVideoCameraController setMostRecentARMetadata:]
  -[JFXVideoCameraController setHasValidFaceData:]
  -[JFXVideoCameraController addVideoRenderDelegate:]
  -[JFXVideoCameraController addAudioRenderDelegate:]
  -[JFXVideoCameraController removeVideoRenderDelegate:async:]
  -[JFXVideoCameraController removeAudioRenderDelegate:async:]
  -[JFXVideoCameraController capturePhotoWithFlash:completion:]
  -[JFXVideoCameraController videoAndAudioOutputSettings:]
  -[JFXVideoCameraController enableRecordingMovieMode:completion:]
  -[JFXVideoCameraController arCameraSessionController]
  -[JFXVideoCameraController notifyExternalARKitFaceTrackedImageData:completion:]
  -[JFXVideoCameraController updateCurrentlyTrackedFaceID:]
  -[JFXVideoCameraController notifyExternalImageData:completion:]
  -[JFXVideoCameraController didUpdateFrame:]
  -[JFXVideoCameraController mostRecentARMetadata]
  -[JFXVideoCameraController hasValidFaceData]
  -[JFXVideoCameraController cameraColorSpace]
  -[JFXVideoCameraController JFX_thermalPolicyOrLevelChangedNotification:]
  -[JFXVideoCameraController JFX_orientationMonitorDeviceInterfaceOrientationNotification:]
  -[JFXVideoCameraController JFX_setIsFlashScene:]
  -[JFXVideoCameraController setCameraVideoZoomFactor_queryDataQueue:]
  -[JFXVideoCameraController setCurrentFrameSet_dataOutSynchQueue:]
  -[JFXVideoCameraController setCapturedPhotoFrameSet_dataOutSynchQueue:]
  -[JFXVideoCameraController setMostRecentARMetadata_queryDataQueue:]
  -[JFXVideoCameraController setStillImageFaceAnchor_queryDataQueue:]
  -[JFXVideoCameraController setHasValidFaceData_queryDataQueue:]
  -[JFXVideoCameraController cameraMode_queryDataQueue]
  -[JFXVideoCameraController captureSessionRunning_queryDataQueue]
  -[JFXVideoCameraController cameraColorSpace_queryDataQueue]
  -[JFXVideoCameraController JFX_isAudioEnabledCaptureSessionQueue]
  -[JFXVideoCameraController JFX_isDepthEnabledCaptureSessionQueue]
  -[JFXVideoCameraController isFlashScene_queryDataQueue]
  -[JFXVideoCameraController cameraVideoZoomFactor_queryDataQueue]
  -[JFXVideoCameraController cameraVideoMaxZoomFactor_captureSessionQueue]
  -[JFXVideoCameraController JFX_setZoomFactor_captureSessionQueue:]
  -[JFXVideoCameraController JFX_isARKitEnabledCaptureSessionQueue]
  -[JFXVideoCameraController mostRecentARMetadata_queryDataQueue]
  -[JFXVideoCameraController setSessionRequiresFaceTracking_queryDataQueue:]
  -[JFXVideoCameraController sessionRequiresFaceTracking_queryDataQueue]
  -[JFXVideoCameraController stillImageFaceAnchor_queryDataQueue]
  -[JFXVideoCameraController setAllowARMetadata_queryDataQueue:]
  -[JFXVideoCameraController allowARMetadata_queryDataQueue]
  -[JFXVideoCameraController hasValidFaceData_queryDataQueue]
  -[JFXVideoCameraController JFX_captureSessionDidStartRunningNotification:]
  -[JFXVideoCameraController JFX_captureSessionDidStopRunningNotification:]
  -[JFXVideoCameraController JFX_captureSessionWasInterruptedNotification:]
  -[JFXVideoCameraController JFX_captureSessionInterruptionEndedNotification:]
  -[JFXVideoCameraController JFX_captureSessionRuntimeErrorNotification:]
  -[JFXVideoCameraController setCaptureSessionRunning_queryDataQueue:]
  -[JFXVideoCameraController cameraMode_captureSessionQueue]
  -[JFXVideoCameraController currentCameraPosition_captureSessionQueue]
  -[JFXVideoCameraController JFX_configureLockedCaptureDeviceFrameRate:]
  -[JFXVideoCameraController JFX_configureCaptureSessionPhotoOrientationFromInterfaceOrientation:]
  -[JFXVideoCameraController JFX_isUsingInternalMicCaptureSessionQueue]
  -[JFXVideoCameraController JFX_configureCaptureSessionMicrophoneForOmnidirectionalPattern]
  -[JFXVideoCameraController JFX_resetSessionCaptureSessionQueue]
  -[JFXVideoCameraController setCameraMode_captureSessionQueue:]
  -[JFXVideoCameraController setCameraMode_queryDataQueue:]
  -[JFXVideoCameraController setCameraMode_dataOutSynchQueue:]
  -[JFXVideoCameraController JFX_buildCaptureSessionGraphError:]
  -[JFXVideoCameraController JFX_configureCaptureSesstionForPosition:applyFFCZoom:configureLockedCamera:error:]
  -[JFXVideoCameraController JFX_startARCameraSessionController]
  -[JFXVideoCameraController cameraType_queryDataQueue]
  -[JFXVideoCameraController currentCameraPosition_queryDataQueue]
  -[JFXVideoCameraController captureVideoOrientation_queryDataQueue]
  -[JFXVideoCameraController switchCameraToPosition:completion:]
  -[JFXVideoCameraController switchCameraToPosition:applyFFCZoom:configureLockedCamera:completion:]
  -[JFXVideoCameraController JFX_rampToZoom:rate:durationCaptureSessionQueue:]
  -[JFXVideoCameraController JFX_configureLockedCaptureDevice:minFrameRate:maxFrameRate:]
  -[JFXVideoCameraController JFX_configureLockedCaptureDeviceFocus:focusPoint:]
  -[JFXVideoCameraController JFX_configureLockedCaptureDeviceExposure:exposurePoint:]
  -[JFXVideoCameraController minFrameRate:maxFrameRate:]
  -[JFXVideoCameraController isRecordingMovie_captureSessionQueue]
  -[JFXVideoCameraController setIsRecordingMovie_captureSessionQueue:]
  -[JFXVideoCameraController setCachedMovieRecordingTorchMode:]
  -[JFXVideoCameraController cachedMovieRecordingTorchMode]
  -[JFXVideoCameraController currentFrameSet_dataOutSynchQueue]
  -[JFXVideoCameraController JFX_createPVFrameSetFromPixelBuffer:withMetadata:timeInterval:error:]
  -[JFXVideoCameraController JFX_notifyVideoDelegatesOfFrameSetDataOutSynchQueue:]
  -[JFXVideoCameraController setCaptureVideoOrientation_dataOutSynchQueue:]
  -[JFXVideoCameraController setCameraDeviceIntrinsics_dataOutSynchQueue:]
  -[JFXVideoCameraController setCameraFrameResolution_dataOutSynchQueue:]
  -[JFXVideoCameraController JFX_setCaptureDeviceType:captureDevicePositionCaptureSessionQueue:]
  -[JFXVideoCameraController preProcessFrameWithPixelBuffer:metadata:timestamp:completion:]
  -[JFXVideoCameraController JFX_setupARCameraSessionController]
  -[JFXVideoCameraController JFX_processPixelBufferForFaceTransform:cameraIntrinsics:forNormalizedFaceRect:withRollAngle:withTimestamp:andDuration:detectionOrientation:interfaceOrientation:needsMirroring:]
  -[JFXVideoCameraController cameraFrameResolution_dataOutSynchQueue]
  -[JFXVideoCameraController JFX_notifyVideoDelegatesOfDroppedFrameWithTimeStamp:]
  -[JFXVideoCameraController setPvDetectedFacesArray_dataOutSynchQueue:]
  -[JFXVideoCameraController setMetadataFaceObjectsArray_dataOutSynchQueue:]
  -[JFXVideoCameraController setMetadataTrackedFacesArray_dataOutSynchQueue:]
  -[JFXVideoCameraController JFX_processMetadataObjectsDataOutSynchQueue:]
  -[JFXVideoCameraController pvDetectedFacesArray_dataOutSynchQueue]
  -[JFXVideoCameraController metadataTrackedFacesArray_dataOutSynchQueue]
  -[JFXVideoCameraController metadataFaceObjectsArray_dataOutSynchQueue]
  -[JFXVideoCameraController JFX_currentAVMetadataFaceObject:]
  -[JFXVideoCameraController cameraDeviceIntrinsics_dataOutSynchQueue]
  -[JFXVideoCameraController captureVideoOrientation_dataOutSynchQueue]
  -[JFXVideoCameraController capturedPhotoFrameSet_dataOutSynchQueue]
  -[JFXVideoCameraController currentCameraPosition_dataOutSynchQueue]
  -[JFXVideoCameraController cameraMode_dataOutSynchQueue]
  -[JFXVideoCameraController JFX_updateCurrentlyTrackedFaceID:]
  -[JFXVideoCameraController JFX_setupCaptureSessionVideoDataOutputError:]
  -[JFXVideoCameraController JFX_setupCaptureSessionPhotoError:]
  -[JFXVideoCameraController JFX_setupCaptureSessionAudioError:]
  -[JFXVideoCameraController JFX_observeCaptureSessionNotifications:]
  -[JFXVideoCameraController JFX_configureCaptureSessionForCaptureDevice:error:]
  -[JFXVideoCameraController JFX_setupCaptureSessionDepthError:]
  -[JFXVideoCameraController JFX_configureLockedCaptureDeviceCustomFormat:applyFFCZoom:]
  -[JFXVideoCameraController JFX_configureCaptureSessionPreset]
  -[JFXVideoCameraController JFX_configureLockedCaptureDeviceForDepth:]
  -[JFXVideoCameraController setCameraColorSpace_queryDataQueue:]
  -[JFXVideoCameraController JFX_configureLockedCaptureDevice:]
  -[JFXVideoCameraController JFX_configureCaptureSessionVideoDataOutput]
  -[JFXVideoCameraController JFX_configureCaptureSessionMetadataForCaptureDevice:]
  -[JFXVideoCameraController JFX_configureCaptureSessionMicrophoneForPosition:]
  -[JFXVideoCameraController JFX_configureCaptureSessionEnableCameraIntrinsicMatrixDelivery]
  -[JFXVideoCameraController setArCameraSessionController:]
  -[JFXVideoCameraController JFX_configureCaptureSessionDataOutputSynchronizer]
  -[JFXVideoCameraController JFX_audioSessionRouteChangeNotification:]
  -[JFXVideoCameraController setCaptureVideoOrientation_queryDataQueue:]
  -[JFXVideoCameraController JFX_getFormatForCaptureDevice:previewDimensions:colorSpace:]
  -[JFXVideoCameraController setCameraVideoMaxZoomFactor_captureSessionQueue:]
  -[JFXVideoCameraController thermalDelegate]
  -[JFXVideoCameraController setCurrentCameraPosition_captureSessionQueue:]
  -[JFXVideoCameraController setCameraType_queryDataQueue:]
  -[JFXVideoCameraController setCurrentCameraPosition_queryDataQueue:]
  -[JFXVideoCameraController setCurrentCameraPosition_dataOutSynchQueue:]
  -[JFXVideoCameraController setIsFlashScene_queryDataQueue:]
  -[JFXVideoCameraController currentlyTrackedFaceID]
  -[JFXVideoCameraController setCurrentlyTrackedFaceID:]
  -[JFXVideoCameraController vcpAnalyzer]
  -[JFXVideoCameraController hasFFCZoomEnabled]
  -[JFXVideoCameraController ARKitEnabled]
  -[JFXVideoCameraController stillImageFaceAnchor]
  -[JFXVideoCameraController setAllowARMetadata:]
  -[JFXVideoCameraController allowARMetadata]
  -[JFXVideoCameraController switchCamera:]
  -[JFXVideoCameraController scaleCurrentZoomFactor:]
  -[JFXVideoCameraController resetZoomFactor]
  -[JFXVideoCameraController setFFCZoom:completion:]
  -[JFXVideoCameraController rampToZoom:rate:]
  -[JFXVideoCameraController rampToZoom:duration:]
  -[JFXVideoCameraController stopRampToZoom:]
  -[JFXVideoCameraController setMinFrameRate:maxFrameRate:]
  -[JFXVideoCameraController setFocusAndExposurePoint:]
  -[JFXVideoCameraController debugFrameRateLabel]
  -[JFXVideoCameraController supportedFlashModes:]
  -[JFXVideoCameraController createLivePlayerCameraSource]
  -[JFXVideoCameraController removeLivePlayerCameraSource:]
  -[JFXVideoCameraController saveToPhotoLibrary:]
  -[JFXVideoCameraController largestDepthDimension]
  -[JFXVideoCameraController setLargestDepthDimension:]


JFXMediaReaderCreationAVAssetTrackAttributes : NSObject
 @property  AVAssetTrack *assetTrack
 @property  AVAsset *asset

  // instance methods
  -[JFXMediaReaderCreationAVAssetTrackAttributes .cxx_destruct]
  -[JFXMediaReaderCreationAVAssetTrackAttributes asset]
  -[JFXMediaReaderCreationAVAssetTrackAttributes assetTrack]
  -[JFXMediaReaderCreationAVAssetTrackAttributes initWithAssetTrack:]


JFXRemoteCommandServer : NSObject
 @property  <JFXRemoteCommandServerDelegate> *delegate
 @property  NSDistributedNotificationCenter *distributedNotificationCenter

  // instance methods
  -[JFXRemoteCommandServer distributedNotificationCenter]
  -[JFXRemoteCommandServer .cxx_destruct]
  -[JFXRemoteCommandServer setDelegate:]
  -[JFXRemoteCommandServer initWithDelegate:]
  -[JFXRemoteCommandServer setDistributedNotificationCenter:]
  -[JFXRemoteCommandServer delegate]
  -[JFXRemoteCommandServer onRemoveEffectsNotification:]
  -[JFXRemoteCommandServer onSetAnimojiNotification:]
  -[JFXRemoteCommandServer onSetMemojiWithContentsOfFileNotification:]
  -[JFXRemoteCommandServer onSetFilterWithIdentifierNotification:]
  -[JFXRemoteCommandServer onGetEffectsRequest:]
  -[JFXRemoteCommandServer onGetEffectsResponse:]
  -[JFXRemoteCommandServer onOpenProjectPickerNotification:]
  -[JFXRemoteCommandServer onOpenProjectNotification:]
  -[JFXRemoteCommandServer onNewProjectNotification:]
  -[JFXRemoteCommandServer onPlayNotification:]
  -[JFXRemoteCommandServer onPlayClipAtIndexNotification:]
  -[JFXRemoteCommandServer onRecordNotification:]
  -[JFXRemoteCommandServer onExportProjectNotification:]
  -[JFXRemoteCommandServer onExportProjectResponseNotification:]
  -[JFXRemoteCommandServer onAddPosterWithIdentifierNotification:]
  -[JFXRemoteCommandServer onAddPosterWithNameNotification:]
  -[JFXRemoteCommandServer onAddEffectWithIdentifierNotification:]
  -[JFXRemoteCommandServer onAddEffectWithNameNotification:]
  -[JFXRemoteCommandServer onAddAREffectWithIdentifierNotification:]
  -[JFXRemoteCommandServer onSetAspectRatioNotification:]
  -[JFXRemoteCommandServer onAddShapeWithIdentifierNotification:]
  -[JFXRemoteCommandServer onAddStickerNotification:]
  -[JFXRemoteCommandServer onAddStickerWithIdentifierNotification:]
  -[JFXRemoteCommandServer onAddTextNotification:]


CFXOverlayPickerAnimatedPreviewWriter : NSObject
 @property  JFXOverlayEffect *overlay
 @property  {CGSize=dd} previewSizeInPixels
 @property  NSString *destinationPath
 @property  NSDictionary *frameProperties
 @property  unsigned long currentFrameCount
 @property  unsigned long previewFrameRate
 @property  double previewDuration
 @property  unsigned long previewStartFrameIndex
 @property  unsigned long targetFrameCount
 @property  {?=qiIq} currentRenderTime
 @property  JFXEffectsPreviewGenerator *previewGenerator
 @property  NSObject<OS_dispatch_queue> *writerQueue
 @property  @? completionBlock
 @property  BOOL isFirstAnimatedFrame

  // instance methods
  -[CFXOverlayPickerAnimatedPreviewWriter overlay]
  -[CFXOverlayPickerAnimatedPreviewWriter .cxx_destruct]
  -[CFXOverlayPickerAnimatedPreviewWriter destinationPath]
  -[CFXOverlayPickerAnimatedPreviewWriter completionBlock]
  -[CFXOverlayPickerAnimatedPreviewWriter previewDuration]
  -[CFXOverlayPickerAnimatedPreviewWriter setCompletionBlock:]
  -[CFXOverlayPickerAnimatedPreviewWriter setOverlay:]
  -[CFXOverlayPickerAnimatedPreviewWriter setDestinationPath:]
  -[CFXOverlayPickerAnimatedPreviewWriter frameProperties]
  -[CFXOverlayPickerAnimatedPreviewWriter setFrameProperties:]
  -[CFXOverlayPickerAnimatedPreviewWriter previewSizeInPixels]
  -[CFXOverlayPickerAnimatedPreviewWriter initWithOverlayEffectId:previewSizeInPixels:previewDuration:previewFrameRate:previewStartFrameIndex:]
  -[CFXOverlayPickerAnimatedPreviewWriter writeAnimatedPreviewToPath:completion:]
  -[CFXOverlayPickerAnimatedPreviewWriter CFX_initializeEffectForPreviewing]
  -[CFXOverlayPickerAnimatedPreviewWriter previewFrameRate]
  -[CFXOverlayPickerAnimatedPreviewWriter writerQueue]
  -[CFXOverlayPickerAnimatedPreviewWriter CFX_beginWriting]
  -[CFXOverlayPickerAnimatedPreviewWriter CFX_finishWriting]
  -[CFXOverlayPickerAnimatedPreviewWriter targetFrameCount]
  -[CFXOverlayPickerAnimatedPreviewWriter setPreviewGenerator:]
  -[CFXOverlayPickerAnimatedPreviewWriter setIsFirstAnimatedFrame:]
  -[CFXOverlayPickerAnimatedPreviewWriter CFX_writeNextEffectFrame]
  -[CFXOverlayPickerAnimatedPreviewWriter currentRenderTime]
  -[CFXOverlayPickerAnimatedPreviewWriter previewGenerator]
  -[CFXOverlayPickerAnimatedPreviewWriter currentFrameCount]
  -[CFXOverlayPickerAnimatedPreviewWriter setCurrentFrameCount:]
  -[CFXOverlayPickerAnimatedPreviewWriter isFirstAnimatedFrame]
  -[CFXOverlayPickerAnimatedPreviewWriter setCurrentRenderTime:]
  -[CFXOverlayPickerAnimatedPreviewWriter previewStartFrameIndex]
  -[CFXOverlayPickerAnimatedPreviewWriter setPreviewFrameRate:]
  -[CFXOverlayPickerAnimatedPreviewWriter setPreviewDuration:]
  -[CFXOverlayPickerAnimatedPreviewWriter setPreviewStartFrameIndex:]
  -[CFXOverlayPickerAnimatedPreviewWriter setTargetFrameCount:]


CFXAnalyticsManager : JFXAnalyticsManager
 @property  NSMutableArray *analyticsDurationData_queryDataQueue
 @property  CFXPickerSession *currentPickerSession

  // class methods
  +[CFXAnalyticsManager sharedInstance]

  // instance methods
  -[CFXAnalyticsManager .cxx_destruct]
  -[CFXAnalyticsManager init]
  -[CFXAnalyticsManager startTrackingPickerWithIdentifier:]
  -[CFXAnalyticsManager stopTrackingPickerWithIdentifier:]
  -[CFXAnalyticsManager didSelectEffectOfType:effectIsNone:]
  -[CFXAnalyticsManager trackMediaSentWithAnimoji:video:frontCamera:filterCount:labelCount:messagesStickerCount:shapeCount:emojiStickerCount:supportsHDR:isHDR:]
  -[CFXAnalyticsManager trackEventWithName:duration:]
  -[CFXAnalyticsManager stopTrackingTimeIntervalEventWithName:]
  -[CFXAnalyticsManager startTrackingTimeIntervalEventWithName:]
  -[CFXAnalyticsManager trackEventWithName:]
  -[CFXAnalyticsManager trackEffect:]
  -[CFXAnalyticsManager pickerDidScroll]
  -[CFXAnalyticsManager pickerDidChangePresentationMode]
  -[CFXAnalyticsManager analyticsDurationData_queryDataQueue]
  -[CFXAnalyticsManager checkIfEventExistsWithName:]
  -[CFXAnalyticsManager roundWithNumber:]
  -[CFXAnalyticsManager persistAnalyticsDataWithEventName:value:]
  -[CFXAnalyticsManager trackKey:withDuration:]
  -[CFXAnalyticsManager trackKey:supportsHDR:isHDR:]
  -[CFXAnalyticsManager trackKey:withEffectId:]
  -[CFXAnalyticsManager trackFilterWithEffectId:]
  -[CFXAnalyticsManager trackAnimojiWithEffectId:]
  -[CFXAnalyticsManager trackShapeWithEffectId:]
  -[CFXAnalyticsManager trackLabelWithEffectId:]
  -[CFXAnalyticsManager trackMessagesStickerWithEffectId:]
  -[CFXAnalyticsManager trackEmojiStickerWithEffectId:]
  -[CFXAnalyticsManager CFX_composedAnalyticsKeyWithAnimoji:video:frontCamera:effectType:]
  -[CFXAnalyticsManager trackEventWithName:supportsHDR:isHDR:]
  -[CFXAnalyticsManager analyticsDurationData]
  -[CFXAnalyticsManager removeAnalyticsDurationDataItems:]
  -[CFXAnalyticsManager dictionaryWithEventName:value:]
  -[CFXAnalyticsManager addAnalyticsDurationData:]
  -[CFXAnalyticsManager setCurrentPickerSession:]
  -[CFXAnalyticsManager CFX_allowedPickerIdentifier:]
  -[CFXAnalyticsManager currentPickerSession]
  -[CFXAnalyticsManager trackEventWithName:count:]
  -[CFXAnalyticsManager isIncrementScalar:]
  -[CFXAnalyticsManager isDistribution:]
  -[CFXAnalyticsManager setAnalyticsDurationData_queryDataQueue:]


CFXEffectBrowserView : JFXPassThroughContainerView
  // instance methods
  -[CFXEffectBrowserView pointInside:withEvent:]


CFXEffectBrowserViewController : UIViewController <AVTAvatarPickerDelegate, CFXEffectPickerViewControllerDelegate, IMADockViewControllerDelegate>
 @property  <CFXEffectBrowserViewControllerDelegate> *delegate
 @property  CFXEffectPickerViewController *effectPickerViewController
 @property  UIView *messagesAppsDockContainerView
 @property  IMADockViewController *messagesAppsDockViewController
 @property  NSObject<OS_dispatch_semaphore> *animatedPreviewWritingSemaphore
 @property  NSObject<OS_dispatch_queue> *animatedPreviewWritingQueue
 @property  NSObject<OS_dispatch_group> *animatedPreviewProcessingGroup
 @property  UIViewController *contentPresenter
 @property  NSLayoutConstraint *madWidthConstraint
 @property  NSLayoutConstraint *madHeightConstraint
 @property  NSLayoutConstraint *madLeadingConstraint
 @property  NSLayoutConstraint *madTrailingConstraint
 @property  NSLayoutConstraint *madTopConstraint
 @property  NSLayoutConstraint *madBottomConstraint
 @property  NSLayoutConstraint *madExpandedAppButtonsHeightConstraint
 @property  NSString *selectedAppIdentifier
 @property  NSObject<OS_dispatch_queue> *animojiLoadingQueue
 @property  <CFXEffectBrowserContentPresenterDelegate> *contentPresenterDelegate
 @property  BOOL showAppIconBorders
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIViewController *dockPresentationViewController
 @property  BOOL expandedAppShouldDismissOnDragSuccess
 @property  {CGSize=dd} expandedAppViewControllerSize

  // class methods
  +[CFXEffectBrowserViewController CFX_sizeOfImageAtURL:]
  +[CFXEffectBrowserViewController CFX_droppedSizeForSticker:dropTarget:]

  // instance methods
  -[CFXEffectBrowserViewController .cxx_destruct]
  -[CFXEffectBrowserViewController viewDidLoad]
  -[CFXEffectBrowserViewController setDelegate:]
  -[CFXEffectBrowserViewController viewDidLayoutSubviews]
  -[CFXEffectBrowserViewController setEffectPickerViewController:]
  -[CFXEffectBrowserViewController delegate]
  -[CFXEffectBrowserViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[CFXEffectBrowserViewController effectPickerViewController]
  -[CFXEffectBrowserViewController dealloc]
  -[CFXEffectBrowserViewController addSticker:]
  -[CFXEffectBrowserViewController loadView]
  -[CFXEffectBrowserViewController avatarPicker:didSelectAvatarRecord:]
  -[CFXEffectBrowserViewController avatarPickerDidEndCameraSession:]
  -[CFXEffectBrowserViewController avatarPickerWillStartCameraSession:]
  -[CFXEffectBrowserViewController contentPresenter]
  -[CFXEffectBrowserViewController setContentPresenter:]
  -[CFXEffectBrowserViewController initWithDelegate:contentPresenter:]
  -[CFXEffectBrowserViewController setContentPresenterDelegate:]
  -[CFXEffectBrowserViewController hideBrowserAnimated:completion:]
  -[CFXEffectBrowserViewController selectedAppIdentifier]
  -[CFXEffectBrowserViewController selectedAnimojiIdentifierForEffectBrowserViewController:]
  -[CFXEffectBrowserViewController localizedPromptForHidingAnimojiForEffectBrowserViewController:]
  -[CFXEffectBrowserViewController shouldRotateCellsForDeviceOrientation]
  -[CFXEffectBrowserViewController setShowAppIconBorders:]
  -[CFXEffectBrowserViewController configureUIForOrientation]
  -[CFXEffectBrowserViewController refreshEffectBrowserForCameraFlip]
  -[CFXEffectBrowserViewController effectPickerViewController:didPickEffect:]
  -[CFXEffectBrowserViewController selectedFilterIdentifierForEffectPickerViewController:]
  -[CFXEffectBrowserViewController messagesAppsDockViewController]
  -[CFXEffectBrowserViewController initMessagesAppsDockViewController]
  -[CFXEffectBrowserViewController madTopConstraint]
  -[CFXEffectBrowserViewController madWidthConstraint]
  -[CFXEffectBrowserViewController madHeightConstraint]
  -[CFXEffectBrowserViewController madBottomConstraint]
  -[CFXEffectBrowserViewController madLeadingConstraint]
  -[CFXEffectBrowserViewController madTrailingConstraint]
  -[CFXEffectBrowserViewController removeEffectPickerViewController]
  -[CFXEffectBrowserViewController messagesAppsDockContainerView]
  -[CFXEffectBrowserViewController setMessagesAppsDockViewController:]
  -[CFXEffectBrowserViewController setMessagesAppsDockContainerView:]
  -[CFXEffectBrowserViewController contentPresenterDelegate]
  -[CFXEffectBrowserViewController setMadWidthConstraint:]
  -[CFXEffectBrowserViewController setMadHeightConstraint:]
  -[CFXEffectBrowserViewController setMadLeadingConstraint:]
  -[CFXEffectBrowserViewController setMadTrailingConstraint:]
  -[CFXEffectBrowserViewController setMadTopConstraint:]
  -[CFXEffectBrowserViewController setMadBottomConstraint:]
  -[CFXEffectBrowserViewController setMadExpandedAppButtonsHeightConstraint:]
  -[CFXEffectBrowserViewController madExpandedAppButtonsHeightConstraint]
  -[CFXEffectBrowserViewController CFX_updateAVTAvatarPickerforMessagesAppViewController:]
  -[CFXEffectBrowserViewController animojiLoadingQueue]
  -[CFXEffectBrowserViewController compactCurrentMessagesApp]
  -[CFXEffectBrowserViewController CFX_addSticker:atDropTarget:]
  -[CFXEffectBrowserViewController setSelectedAppIdentifier:]
  -[CFXEffectBrowserViewController displayPickerForEffectTypeIdentifier:messagesAppViewController:embedInMessageAppViewController:]
  -[CFXEffectBrowserViewController addSticker:atDropTarget:]
  -[CFXEffectBrowserViewController dockPresentationViewController]
  -[CFXEffectBrowserViewController didSelectAppWithBundleIdentifier:]
  -[CFXEffectBrowserViewController presentExpandedAppViewController:animated:completion:]
  -[CFXEffectBrowserViewController dismissExpandedAppViewController:animated:completion:]
  -[CFXEffectBrowserViewController expandedAppShouldDismissOnDragSuccess]
  -[CFXEffectBrowserViewController expandedAppViewControllerSize]
  -[CFXEffectBrowserViewController dockDidMagnify:]
  -[CFXEffectBrowserViewController showAppIconBorders]
  -[CFXEffectBrowserViewController commitAnimatedLayoutChanges]
  -[CFXEffectBrowserViewController animatedPreviewWritingSemaphore]
  -[CFXEffectBrowserViewController setAnimatedPreviewWritingSemaphore:]
  -[CFXEffectBrowserViewController animatedPreviewWritingQueue]
  -[CFXEffectBrowserViewController setAnimatedPreviewWritingQueue:]
  -[CFXEffectBrowserViewController animatedPreviewProcessingGroup]
  -[CFXEffectBrowserViewController setAnimatedPreviewProcessingGroup:]
  -[CFXEffectBrowserViewController setAnimojiLoadingQueue:]


JFXMetalHelpers : NSObject
  // class methods
  +[JFXMetalHelpers createCVTextureFromImage:withTextureCache:]
  +[JFXMetalHelpers copyMetalLibraryWithDevice:error:]
  +[JFXMetalHelpers metalPixelFormatForImage:]

  // instance methods
  -[JFXMetalHelpers initWithDevice:]
  -[JFXMetalHelpers .cxx_destruct]
  -[JFXMetalHelpers device]
  -[JFXMetalHelpers newTextureWithSameSizeAs:pixelFormat:]
  -[JFXMetalHelpers newTextureWithWidth:height:pixelFormat:usage:]
  -[JFXMetalHelpers newTexture:]
  -[JFXMetalHelpers newPipelineStateForFunctionWithName:]
  -[JFXMetalHelpers runComputeEncoder:pipelineState:referenceTexture:]


JFXFaceTrackingPlaybackUtilities : NSObject
  // class methods
  +[JFXFaceTrackingPlaybackUtilities arDataForPlaybackElement:atPlaybackTime:completion:]


JFXEffectTextEditingProperties : NSObject
 @property  JFXTextEffectFrame *effectFrame
 @property  NSAttributedString *attributedText
 @property  NSDictionary *defaultTypingAttributes
 @property  BOOL useFullTransform
 @property  BOOL isAllCaps
 @property  BOOL isEmoji
 @property  BOOL isTextFlipped
 @property  BOOL outlineDisabled
 @property  BOOL moveBeforeScalingToAvoidKeyboard
 @property  UIColor *defaultTextColor
 @property  UIColor *customTextColor
 @property  UIColor *customTextEditTintColor
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} cachedFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} cachedBounds
 @property  NSValue *cachedScale
 @property  NSNumber *cachedRotation
 @property  PVMatrix44Double *cachedPartialTransformNoScaleNoTranslation
 @property  long long textAlignment
 @property  unsigned long numberOfLines
 @property  double baselineYOffset
 @property  BOOL isSpecialCaseForGameOverPoster
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} frame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  {CGPoint=dd} scale
 @property  double rotation
 @property  {CGAffineTransform=dddddd} partialTransformNoScaleNoTranslation

  // class methods
  +[JFXEffectTextEditingProperties textEditingPropertiesWithTextEffect:withText:relativeTo:atTime:index:moveBeforeScalingToAvoidKeyboard:]

  // instance methods
  -[JFXEffectTextEditingProperties setAttributedText:]
  -[JFXEffectTextEditingProperties attributedText]
  -[JFXEffectTextEditingProperties numberOfLines]
  -[JFXEffectTextEditingProperties .cxx_destruct]
  -[JFXEffectTextEditingProperties rotation]
  -[JFXEffectTextEditingProperties setTextAlignment:]
  -[JFXEffectTextEditingProperties textAlignment]
  -[JFXEffectTextEditingProperties setNumberOfLines:]
  -[JFXEffectTextEditingProperties frame]
  -[JFXEffectTextEditingProperties defaultTextColor]
  -[JFXEffectTextEditingProperties scale]
  -[JFXEffectTextEditingProperties isEmoji]
  -[JFXEffectTextEditingProperties bounds]
  -[JFXEffectTextEditingProperties setCachedFrame:]
  -[JFXEffectTextEditingProperties cachedFrame]
  -[JFXEffectTextEditingProperties cachedBounds]
  -[JFXEffectTextEditingProperties setCachedBounds:]
  -[JFXEffectTextEditingProperties setDefaultTextColor:]
  -[JFXEffectTextEditingProperties isTextFlipped]
  -[JFXEffectTextEditingProperties customTextEditTintColor]
  -[JFXEffectTextEditingProperties isAllCaps]
  -[JFXEffectTextEditingProperties useFullTransform]
  -[JFXEffectTextEditingProperties effectFrame]
  -[JFXEffectTextEditingProperties isSpecialCaseForGameOverPoster]
  -[JFXEffectTextEditingProperties defaultTypingAttributes]
  -[JFXEffectTextEditingProperties baselineYOffset]
  -[JFXEffectTextEditingProperties partialTransformNoScaleNoTranslation]
  -[JFXEffectTextEditingProperties customTextColor]
  -[JFXEffectTextEditingProperties initWithTextEffect:withText:relativeTo:atTime:index:moveBeforeScalingToAvoidKeyboard:]
  -[JFXEffectTextEditingProperties setIsSpecialCaseForGameOverPoster:]
  -[JFXEffectTextEditingProperties setMoveBeforeScalingToAvoidKeyboard:]
  -[JFXEffectTextEditingProperties JFX_configureWithEffect:]
  -[JFXEffectTextEditingProperties setEffectFrame:]
  -[JFXEffectTextEditingProperties JFX_configureWithAttributedString:text:]
  -[JFXEffectTextEditingProperties JFX_configureWithDefaultTypingAttributes:]
  -[JFXEffectTextEditingProperties setIsAllCaps:]
  -[JFXEffectTextEditingProperties setUseFullTransform:]
  -[JFXEffectTextEditingProperties setCustomTextColor:]
  -[JFXEffectTextEditingProperties setCustomTextEditTintColor:]
  -[JFXEffectTextEditingProperties setOutlineDisabled:]
  -[JFXEffectTextEditingProperties setIsEmoji:]
  -[JFXEffectTextEditingProperties setIsTextFlipped:]
  -[JFXEffectTextEditingProperties setBaselineYOffset:]
  -[JFXEffectTextEditingProperties JFX_modifyAttributedString:]
  -[JFXEffectTextEditingProperties setDefaultTypingAttributes:]
  -[JFXEffectTextEditingProperties isOutlineDisabled]
  -[JFXEffectTextEditingProperties JFX_modifyRangesOfAttributedString:isOutlineDisabled:]
  -[JFXEffectTextEditingProperties JFX_modifyEntireAttributedString:forTargetSize:fontColor:]
  -[JFXEffectTextEditingProperties cachedScale]
  -[JFXEffectTextEditingProperties setCachedScale:]
  -[JFXEffectTextEditingProperties cachedRotation]
  -[JFXEffectTextEditingProperties setCachedRotation:]
  -[JFXEffectTextEditingProperties cachedPartialTransformNoScaleNoTranslation]
  -[JFXEffectTextEditingProperties setCachedPartialTransformNoScaleNoTranslation:]
  -[JFXEffectTextEditingProperties moveBeforeScalingToAvoidKeyboard]


WriterReorderQ : NSObject
 @property  PVFrameSet *frameSet
 @property  {?=qiIq} lastReorderedTime

  // instance methods
  -[WriterReorderQ .cxx_destruct]
  -[WriterReorderQ init]
  -[WriterReorderQ frameSet]
  -[WriterReorderQ setFrameSet:]
  -[WriterReorderQ lastReorderedTime]
  -[WriterReorderQ setLastReorderedTime:]
  -[WriterReorderQ getReorderedFrameSet:]
  -[WriterReorderQ clearQueuedFrameSet]


JFXVideoWriter : NSObject
 @property  NSURL *folderURL
 @property  NSURL *videoURL
 @property  NSURL *metadataURL
 @property  NSDictionary *videoOutputSettings
 @property  NSDictionary *audioOutputSettings
 @property  JFXDepthCompressor *depthCompressor
 @property  NSDictionary *depthBGRAPixelBufferAttributes
 @property  unsigned long signPostID
 @property  BOOL wroteSessionStartTime
 @property  BOOL storeFaceMetadata
 @property  BOOL storeDepthDataAsVideoTrack
 @property  {?=ii} depthDimensions
 @property  NSData *animojiMetadata
 @property  <JFXVideoWriterDelegate> *delegate
 @property  BOOL trackOutOfOrderVideoBuffers
 @property  int depthCodecType

  // class methods
  +[JFXVideoWriter META_metadataForVideo:completion:]
  +[JFXVideoWriter META_ARMetadataTrackForAsset:]
  +[JFXVideoWriter META_JFXARMetadataIdentifier]
  +[JFXVideoWriter JFX_funcamCameraPositionMetadataIdentifier]
  +[JFXVideoWriter JFX_funcamCaptureInterfaceOrientationMetadataIdentifier]
  +[JFXVideoWriter JFX_animojiMetadataIdentifier]
  +[JFXVideoWriter META_metadataAssetTrackFromAsset:metadataIdentifier:]
  +[JFXVideoWriter JFX_faceAnchorMetadataIdentifier]

  // instance methods
  -[JFXVideoWriter .cxx_destruct]
  -[JFXVideoWriter depthDimensions]
  -[JFXVideoWriter setDepthDimensions:]
  -[JFXVideoWriter setDelegate:]
  -[JFXVideoWriter audioOutputSettings]
  -[JFXVideoWriter videoOutputSettings]
  -[JFXVideoWriter finishWritingWithCompletionHandler:]
  -[JFXVideoWriter delegate]
  -[JFXVideoWriter metadataURL]
  -[JFXVideoWriter videoURL]
  -[JFXVideoWriter startSessionAtSourceTime:]
  -[JFXVideoWriter folderURL]
  -[JFXVideoWriter animojiMetadata]
  -[JFXVideoWriter signPostID]
  -[JFXVideoWriter writeCameraFrameSet:]
  -[JFXVideoWriter writeAudioBuffer:]
  -[JFXVideoWriter initWithFolderURL:videoOutputSettings:audioOutputSettings:audioFormatHint:]
  -[JFXVideoWriter setStoreDepthDataAsVideoTrack:]
  -[JFXVideoWriter setAnimojiMetadata:]
  -[JFXVideoWriter startWriterWithVideoTransform:error:]
  -[JFXVideoWriter setSignPostID:]
  -[JFXVideoWriter depthCodecType]
  -[JFXVideoWriter setDepthBGRAPixelBufferAttributes:]
  -[JFXVideoWriter JFX_writerCanBegin:]
  -[JFXVideoWriter JFX_setupVideoWriterWithTransform:error:]
  -[JFXVideoWriter JFX_setupMetadataWriterWithTransform:error:]
  -[JFXVideoWriter JFX_removeFileAtURL:]
  -[JFXVideoWriter trackOutOfOrderVideoBuffers]
  -[JFXVideoWriter JFX_startSessionAtSourceTime_noLock:]
  -[JFXVideoWriter JFX_writeBuffer:sampleType:arMetadata:]
  -[JFXVideoWriter storeDepthDataAsVideoTrack]
  -[JFXVideoWriter JFX_writeDepthBufferForAVDepthData:withTimingInfo:]
  -[JFXVideoWriter storeFaceMetadata]
  -[JFXVideoWriter JFX_writeFaceMetadata:withTimingInfo:]
  -[JFXVideoWriter JFX_writeBuffer:sampleType:]
  -[JFXVideoWriter JFX_setupVideoOutput:error:]
  -[JFXVideoWriter JFX_setupAudioOutput:]
  -[JFXVideoWriter JFX_fileLevelMetadata]
  -[JFXVideoWriter setDepthCodecType:]
  -[JFXVideoWriter JFX_setupDepthOutputWithTransform:error:]
  -[JFXVideoWriter JFX_setupCompressedDepthOutputWithTransform:error:]
  -[JFXVideoWriter JFX_setupFaceMetadataOutput:]
  -[JFXVideoWriter JFX_setupJFXARMetadataTrack:]
  -[JFXVideoWriter JFX_setupAutoExposureMetadataOutput:]
  -[JFXVideoWriter setDepthCompressor:]
  -[JFXVideoWriter depthCompressor]
  -[JFXVideoWriter depthBGRAPixelBufferAttributes]
  -[JFXVideoWriter JFX_drainQueuedAudioBufferBeforeSessionStart_noLock]
  -[JFXVideoWriter JFX_queueAudioBufferBeforeSessionStart:]
  -[JFXVideoWriter JFX_writeSampleBuffer:assetWriterInput:sampleType:depthAdaptor:]
  -[JFXVideoWriter JFX_writeAutoExposureMetadata:]
  -[JFXVideoWriter JFX_writeJFXARMetadata:time:]
  -[JFXVideoWriter JFX_copyDepthBufferAsBGRA:]
  -[JFXVideoWriter JFX_writeFaceDetectMetadata:pts:]
  -[JFXVideoWriter JFX_writeDepthData:timingInfo:]
  -[JFXVideoWriter wroteSessionStartTime]
  -[JFXVideoWriter setStoreFaceMetadata:]
  -[JFXVideoWriter setTrackOutOfOrderVideoBuffers:]
  -[JFXVideoWriter setFolderURL:]
  -[JFXVideoWriter setVideoOutputSettings:]
  -[JFXVideoWriter setAudioOutputSettings:]


JFXEffectAnimationDelegate : NSObject <CAAnimationDelegate>
 @property  BOOL animationDidBegin
 @property  BOOL animationDidEnd
 @property  @? completion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXEffectAnimationDelegate completion]
  -[JFXEffectAnimationDelegate setCompletion:]
  -[JFXEffectAnimationDelegate .cxx_destruct]
  -[JFXEffectAnimationDelegate animationDidStop:finished:]
  -[JFXEffectAnimationDelegate animateWithCompletion:]
  -[JFXEffectAnimationDelegate animationDidEnd]
  -[JFXEffectAnimationDelegate setAnimationDidBegin:]
  -[JFXEffectAnimationDelegate setAnimationDidEnd:]
  -[JFXEffectAnimationDelegate animationDidBegin]


JFXOverlayEffectAnimationView : UIView
 @property  JFXOverlayEffectFrame *fromEffectFrame
 @property  JFXOverlayEffectFrame *toEffectFrame
 @property  JFXEffectAnimationDelegate *animationDelegate
 @property  CALayer *transformLayer
 @property  CALayer *additionalTransformLayer
 @property  CALayer *trackingTransformLayer
 @property  CALayer *cameraTransformLayer
 @property  double fractionComplete
 @property  JFXOverlayEffectTransforms *currentEffectTransforms

  // instance methods
  -[JFXOverlayEffectAnimationView fractionComplete]
  -[JFXOverlayEffectAnimationView .cxx_destruct]
  -[JFXOverlayEffectAnimationView animate:completion:]
  -[JFXOverlayEffectAnimationView setAnimationDelegate:]
  -[JFXOverlayEffectAnimationView animationDelegate]
  -[JFXOverlayEffectAnimationView setFromEffectFrame:]
  -[JFXOverlayEffectAnimationView setToEffectFrame:]
  -[JFXOverlayEffectAnimationView fromEffectFrame]
  -[JFXOverlayEffectAnimationView toEffectFrame]
  -[JFXOverlayEffectAnimationView setTransformLayer:]
  -[JFXOverlayEffectAnimationView setAdditionalTransformLayer:]
  -[JFXOverlayEffectAnimationView setTrackingTransformLayer:]
  -[JFXOverlayEffectAnimationView setCameraTransformLayer:]
  -[JFXOverlayEffectAnimationView transformLayer]
  -[JFXOverlayEffectAnimationView additionalTransformLayer]
  -[JFXOverlayEffectAnimationView trackingTransformLayer]
  -[JFXOverlayEffectAnimationView cameraTransformLayer]
  -[JFXOverlayEffectAnimationView initWithEffectFrame:toEffectFrame:]
  -[JFXOverlayEffectAnimationView currentEffectTransforms]


JFXAnalyticsManager : NSObject <JFXAnalytics>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXAnalyticsManager sharedInstance]
  +[JFXAnalyticsManager allIncrementScalarEvents]
  +[JFXAnalyticsManager bundleForAnalytics]

  // instance methods
  -[JFXAnalyticsManager init]
  -[JFXAnalyticsManager trackEventWithName:]
  -[JFXAnalyticsManager checkIfEventExistsWithName:]
  -[JFXAnalyticsManager fullKeyFromEvent:]
  -[JFXAnalyticsManager trackKey:withCount:]
  -[JFXAnalyticsManager trackKey:withPayload:]
  -[JFXAnalyticsManager dictionaryWithEventName:value:]
  -[JFXAnalyticsManager isIncrementScalar:]


JTFrameRateCalculator : NSObject
 @property  unsigned long receivedRenderCount
 @property  unsigned long droppedRenderCount
 @property  unsigned long receivedDisplayFrameCount
 @property  unsigned long droppedDisplayFrameCount
 @property  double windowSize
 @property  NSDate *stateDate
 @property  NSString *name

  // instance methods
  -[JTFrameRateCalculator log:]
  -[JTFrameRateCalculator name]
  -[JTFrameRateCalculator .cxx_destruct]
  -[JTFrameRateCalculator setName:]
  -[JTFrameRateCalculator initWithWindowSize:]
  -[JTFrameRateCalculator setWindowSize:]
  -[JTFrameRateCalculator windowSize]
  -[JTFrameRateCalculator stateDate]
  -[JTFrameRateCalculator setStateDate:]
  -[JTFrameRateCalculator JT_restart]
  -[JTFrameRateCalculator receivedRenderCount]
  -[JTFrameRateCalculator droppedRenderCount]
  -[JTFrameRateCalculator droppedDisplayFrameCount]
  -[JTFrameRateCalculator receivedDisplayFrameCount]
  -[JTFrameRateCalculator setReceivedRenderCount:]
  -[JTFrameRateCalculator setDroppedRenderCount:]
  -[JTFrameRateCalculator setReceivedDisplayFrameCount:]
  -[JTFrameRateCalculator setDroppedDisplayFrameCount:]
  -[JTFrameRateCalculator tickReceived]
  -[JTFrameRateCalculator tickDropped]
  -[JTFrameRateCalculator tickFrameReceived]
  -[JTFrameRateCalculator tickDroppedDisplay]


JFXFaceTrackingTransformCalculator : NSObject
 @property  JFXARMetadata *arMetadata
 @property  {CGSize=dd} outputSize
 @property  long long interfaceOrientation
 @property  float pixelsPerUnit
 @property  {?=[4]} cameraProjection
 @property  {?=[4]} cameraTransform
 @property  {?=[4]} onFaceTransform
 @property  {?=[4]} billboardTransform

  // class methods
  +[JFXFaceTrackingTransformCalculator interpolateFrom:to:fraction:]

  // instance methods
  -[JFXFaceTrackingTransformCalculator .cxx_destruct]
  -[JFXFaceTrackingTransformCalculator interfaceOrientation]
  -[JFXFaceTrackingTransformCalculator outputSize]
  -[JFXFaceTrackingTransformCalculator cameraTransform]
  -[JFXFaceTrackingTransformCalculator arMetadata]
  -[JFXFaceTrackingTransformCalculator initWithARMetaData:outputSize:playableInterfaceOrientation:]
  -[JFXFaceTrackingTransformCalculator calculateFaceTrackingTransform]
  -[JFXFaceTrackingTransformCalculator cameraProjection]
  -[JFXFaceTrackingTransformCalculator billboardTransform]
  -[JFXFaceTrackingTransformCalculator onFaceTransform]
  -[JFXFaceTrackingTransformCalculator nonScaledOrientedCameraTransform]
  -[JFXFaceTrackingTransformCalculator pixelsPerUnit]
  -[JFXFaceTrackingTransformCalculator setArMetadata:]
  -[JFXFaceTrackingTransformCalculator setPixelsPerUnit:]


JTView : UIView
 @property  BOOL debuggingUIEnabled

  // class methods
  +[JTView layerClass]

  // instance methods
  -[JTView layoutSubviews]
  -[JTView debuggingUIEnabled]
  -[JTView setDebuggingUIEnabled:]
  -[JTView enableDebugMode:]


JFXCachedAnimojiImage : NSObject
 @property  PVImageBuffer *animojiImageBuffer
 @property  NSDictionary *animojiRenderAttributes
 @property  {?={?=qiIq}{?=qiIq}} mediaTimeRange

  // instance methods
  -[JFXCachedAnimojiImage .cxx_destruct]
  -[JFXCachedAnimojiImage mediaTimeRange]
  -[JFXCachedAnimojiImage animojiImageBuffer]
  -[JFXCachedAnimojiImage animojiRenderAttributes]
  -[JFXCachedAnimojiImage initWithMediaTimeRange:animojiRenderingAttributes:animojiImageBuffer:]


JFXAnimojiPlaybackPreprocessedData : NSObject
 @property  {?=qiIq} time
 @property  ARFrame *arFrame
 @property  AVDepthData *avDepthData
 @property  NSDictionary *animojiBlendShapes
 @property  {?={?=qiIq}{?=qiIq}} mediaTimeRangeForData

  // instance methods
  -[JFXAnimojiPlaybackPreprocessedData .cxx_destruct]
  -[JFXAnimojiPlaybackPreprocessedData time]
  -[JFXAnimojiPlaybackPreprocessedData arFrame]
  -[JFXAnimojiPlaybackPreprocessedData avDepthData]
  -[JFXAnimojiPlaybackPreprocessedData initForRenderTime:usingDataFromMediaTimeRange:arFrame:avDepthData:animojiBlendShapes:]
  -[JFXAnimojiPlaybackPreprocessedData animojiBlendShapes]
  -[JFXAnimojiPlaybackPreprocessedData mediaTimeRangeForData]


JFXAnimojiPlaybackDelegate : NSObject <PVCompositeDelegate>
 @property  NSObject<OS_dispatch_queue> *mediaDataReaderUpdateQueue
 @property  JFXARMetadataMediaReader *arMetadataReader
 @property  JFXDepthDataMediaReader *depthReader
 @property  JFXSharedMediaDataReaderManager *sharedMediaDataReaderManager
 @property  NSObject<OS_dispatch_queue> *animojiRenderQueue
 @property  JFXAnimojiEffectRenderer *animojiRenderer
 @property  JFXAnimojiEffect *animojiEffect
 @property  BOOL useAnimojiBlendShapes
 @property  <JFXPlayableElement> *playableElement
 @property  {?=qiIq} playbackElementPlaybackPresentationOffset
 @property  {?={?=qiIq}{?=qiIq}} playbackElementPlaybackMediaRange
 @property  NSObject<OS_dispatch_queue> *delayedUnloadPlaybackQueue
 @property  @? delayedUnloadPlaybackResourcesBlock
 @property  NSObject<OS_dispatch_queue> *cachedAnimojiImageQueue
 @property  JFXCachedAnimojiImage *cachedAnimojiImage
 @property  BOOL isScrubbing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXAnimojiPlaybackDelegate isScrubbing]
  -[JFXAnimojiPlaybackDelegate setIsScrubbing:]
  -[JFXAnimojiPlaybackDelegate .cxx_destruct]
  -[JFXAnimojiPlaybackDelegate playableElement]
  -[JFXAnimojiPlaybackDelegate mediaDataReaderUpdateQueue]
  -[JFXAnimojiPlaybackDelegate arMetadataReader]
  -[JFXAnimojiPlaybackDelegate sharedMediaDataReaderManager]
  -[JFXAnimojiPlaybackDelegate playbackElementPlaybackMediaRange]
  -[JFXAnimojiPlaybackDelegate setArMetadataReader:]
  -[JFXAnimojiPlaybackDelegate playbackElementPlaybackPresentationOffset]
  -[JFXAnimojiPlaybackDelegate JFX_loadMediaDataReaders]
  -[JFXAnimojiPlaybackDelegate JFX_unloadMediaDataReaders]
  -[JFXAnimojiPlaybackDelegate JFX_setMediaDataReaderScrubbingMode:]
  -[JFXAnimojiPlaybackDelegate jfx_mediaTimeFromPlaybackTime:]
  -[JFXAnimojiPlaybackDelegate initWithPlayableElement:sharedMediaDataReaderManager:]
  -[JFXAnimojiPlaybackDelegate animojiRenderer]
  -[JFXAnimojiPlaybackDelegate renderWithInputs:time:userContext:compositeContext:]
  -[JFXAnimojiPlaybackDelegate preprocessWithInputs:time:userContext:compositeContext:]
  -[JFXAnimojiPlaybackDelegate loadWithUserContext:]
  -[JFXAnimojiPlaybackDelegate unloadWithUserContext:]
  -[JFXAnimojiPlaybackDelegate JFX_initPlaybackLoadingProperies]
  -[JFXAnimojiPlaybackDelegate JFX_initAnimojiRenderingProperies]
  -[JFXAnimojiPlaybackDelegate JFX_initMediaDataReaderProperties]
  -[JFXAnimojiPlaybackDelegate JFX_initAnimojiImageBufferCachingProperties]
  -[JFXAnimojiPlaybackDelegate animojiRenderQueue]
  -[JFXAnimojiPlaybackDelegate setAnimojiEffect:]
  -[JFXAnimojiPlaybackDelegate setUseAnimojiBlendShapes:]
  -[JFXAnimojiPlaybackDelegate JFX_loadResourcesForPlayback]
  -[JFXAnimojiPlaybackDelegate JFX_requestUnloadResourcesForPlayback]
  -[JFXAnimojiPlaybackDelegate JFX_cachedAnimojiImageForMediaTime:forAnimojiRenderingAttributes:]
  -[JFXAnimojiPlaybackDelegate JFX_arMetadataReaderItemForMediaTime:]
  -[JFXAnimojiPlaybackDelegate JFX_avDepthDataFromDepthDataForMediaTime:]
  -[JFXAnimojiPlaybackDelegate JFX_cacheAnimojiImage:]
  -[JFXAnimojiPlaybackDelegate JFX_renderAnimojiEffect:forTime:withARFrame:depthData:inputBufferSize:videoDimensions:fieldOfView:captureOrientation:interfaceOrientation:preRecordedBlendShapes:]
  -[JFXAnimojiPlaybackDelegate JFX_unloadAnimojiRenderer]
  -[JFXAnimojiPlaybackDelegate delayedUnloadPlaybackQueue]
  -[JFXAnimojiPlaybackDelegate delayedUnloadPlaybackResourcesBlock]
  -[JFXAnimojiPlaybackDelegate setDelayedUnloadPlaybackResourcesBlock:]
  -[JFXAnimojiPlaybackDelegate JFX_loadAnimojiRenderer]
  -[JFXAnimojiPlaybackDelegate JFX_unloadResourcesForPlayback]
  -[JFXAnimojiPlaybackDelegate JFX_clearCachedAnimojiImages]
  -[JFXAnimojiPlaybackDelegate setAnimojiRenderer:]
  -[JFXAnimojiPlaybackDelegate animojiEffect]
  -[JFXAnimojiPlaybackDelegate useAnimojiBlendShapes]
  -[JFXAnimojiPlaybackDelegate cachedAnimojiImageQueue]
  -[JFXAnimojiPlaybackDelegate cachedAnimojiImage]
  -[JFXAnimojiPlaybackDelegate setCachedAnimojiImage:]
  -[JFXAnimojiPlaybackDelegate depthReader]
  -[JFXAnimojiPlaybackDelegate setDepthReader:]
  -[JFXAnimojiPlaybackDelegate setSharedMediaDataReaderManager:]


CFXReviewControlsViewController : UIViewController
  // instance methods
  -[CFXReviewControlsViewController init]


JFXStillMediaItem : JTAssetMediaItem
 @property  {CGSize=dd} sourceImageSize
 @property  PVColorSpace *imageColorSpace

  // class methods
  +[JFXStillMediaItem stillMediaItemWithLocalURL:delegate:completionHandler:]

  // instance methods
  -[JFXStillMediaItem colorSpace]
  -[JFXStillMediaItem commonInit]
  -[JFXStillMediaItem .cxx_destruct]
  -[JFXStillMediaItem info]
  -[JFXStillMediaItem isEqual:]
  -[JFXStillMediaItem copyWithZone:]
  -[JFXStillMediaItem assetURL]
  -[JFXStillMediaItem imageColorSpace]
  -[JFXStillMediaItem sourceImageSize]
  -[JFXStillMediaItem setSourceImageSize:]
  -[JFXStillMediaItem durationAt30fps]
  -[JFXStillMediaItem canBeAddedToSequence]
  -[JFXStillMediaItem hasVisualCharacteristic]
  -[JFXStillMediaItem hasPhotoCharacteristic]
  -[JFXStillMediaItem setImageColorSpace:]
  -[JFXStillMediaItem sizeForQuality:]
  -[JFXStillMediaItem updateAssetImageColorSpace]
  -[JFXStillMediaItem playBackImageSize:]
  -[JFXStillMediaItem exportImageSize:]
  -[JFXStillMediaItem imageSizeForRenderingIntent:originalSize:]
  -[JFXStillMediaItem JT_maximumPixelsForStillImage:]
  -[JFXStillMediaItem sizeForMaxPixels:sourceSize:]
  -[JFXStillMediaItem thumbImageSize:]
  -[JFXStillMediaItem generateLocalURLForAsset]
  -[JFXStillMediaItem imageForURL:renderingIntent:]
  -[JFXStillMediaItem isImageValid:renderingIntent:size:]
  -[JFXStillMediaItem hdrGainMapImageForURL:renderingIntent:]


CFXPlayButtonView : UIView
 @property  CAShapeLayer *playControlMaskLayer
 @property  UIView *contentView
 @property  UIButton *playButton
 @property  UIImage *playImage
 @property  UIImage *pauseImage
 @property  <CFXPlayButtonViewDelegate> *delegate

  // instance methods
  -[CFXPlayButtonView initWithCoder:]
  -[CFXPlayButtonView .cxx_destruct]
  -[CFXPlayButtonView layoutSubviews]
  -[CFXPlayButtonView contentView]
  -[CFXPlayButtonView setDelegate:]
  -[CFXPlayButtonView initWithFrame:]
  -[CFXPlayButtonView delegate]
  -[CFXPlayButtonView setContentView:]
  -[CFXPlayButtonView playImage]
  -[CFXPlayButtonView playButton]
  -[CFXPlayButtonView pauseImage]
  -[CFXPlayButtonView setPlayButton:]
  -[CFXPlayButtonView playButtonTapped:]
  -[CFXPlayButtonView sharedInit]
  -[CFXPlayButtonView notifyPlaybackDidStart]
  -[CFXPlayButtonView notifyPlaybackDidStop]
  -[CFXPlayButtonView setPlayControlMaskLayer:]
  -[CFXPlayButtonView playControlMaskLayer]
  -[CFXPlayButtonView setPlayImage:]
  -[CFXPlayButtonView setPauseImage:]
  -[CFXPlayButtonView notifyWasTapped]


JFXEffectEditingUtilities : NSObject
  // class methods
  +[JFXEffectEditingUtilities setStreamingMode:]
  +[JFXEffectEditingUtilities addTransformToEffect:transform:relativeToBounds:time:restrictToBounds:]
  +[JFXEffectEditingUtilities updateEffectText:newText:]
  +[JFXEffectEditingUtilities shouldRenderTextWithMotionWhileEditingTextForEffectID:]
  +[JFXEffectEditingUtilities nextNormalizedInsertionPointForOverlay:scaleRelativeToCenterSquare:atTime:applyTracking:withARMetadata:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:]
  +[JFXEffectEditingUtilities configureOverlayForInsertion:atNormalizedPoint:atTime:isPositionRelativeToCenterSquare:isPositionRelativeToFace:scaleRelativeToCenterSquare:rotationAngle:applyTracking:autoDetectTrackingType:withARMetadata:previewViewCorrectionTransform:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:playableAspectRatio:playableAspectRatioPreservationMode:]
  +[JFXEffectEditingUtilities configureOverlayForInsertion:inRect:atTime:rotationAngle:applyTracking:autoDetectTrackingType:withARMetadata:previewViewCorrectionTransform:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:playableAspectRatio:playableAspectRatioPreservationMode:]
  +[JFXEffectEditingUtilities canEditTextForEffect:]
  +[JFXEffectEditingUtilities hitTestOverlaysAtPosterFrame:atNormalizedPoint:atTime:adjustForMinimumSize:normalizedMinimumSize:]
  +[JFXEffectEditingUtilities isFaceTrackingDataAvailable]
  +[JFXEffectEditingUtilities disableAnimationForEffects:]
  +[JFXEffectEditingUtilities textForEffect:]
  +[JFXEffectEditingUtilities hitTestOverlaysAtPosterFrame:atPoint:relativeToBounds:atTime:adjustForMinimumSize:normalizedMinimumSize:]
  +[JFXEffectEditingUtilities removeButtonPositionForEffect:atTime:atPosterFrameRelativeToBounds:viewCorrectionTransform:]
  +[JFXEffectEditingUtilities newTextEditingPropertiesForEffect:relativeTo:atTime:withNewText:]
  +[JFXEffectEditingUtilities beginTextEditingForEffect:]
  +[JFXEffectEditingUtilities updateEffectToDefaultTextIfEmpty:]
  +[JFXEffectEditingUtilities endTextEditingForEffect:]
  +[JFXEffectEditingUtilities maximumTextLengthForEffect:]
  +[JFXEffectEditingUtilities spacingBetweenCenterPointOfEffect:point:relativeToBounds:atTime:]
  +[JFXEffectEditingUtilities hitTestOverlays:atPoint:relativeToBounds:atTime:adjustForMinimumSize:normalizedMinimumSize:]
  +[JFXEffectEditingUtilities trackingTypeForOverlayPointIntersectionWithFaceRect:atTime:relativeTo:defaultTrackingType:faceAnchor:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:playableAspectRatio:playableAspectRatioPreservationMode:]
  +[JFXEffectEditingUtilities makeOverlayTrackedMaintainingAppearance:atTime:newTrackingType:arMetadata:playableInterfaceOrientation:]
  +[JFXEffectEditingUtilities shouldUseFullTransformWhileEditingTextForEffectID:]
  +[JFXEffectEditingUtilities shouldDisableTextOutlineWhileEditingTextForEffectID:]
  +[JFXEffectEditingUtilities normalizedInsertionPoints]
  +[JFXEffectEditingUtilities nextInsertionPointIndex]
  +[JFXEffectEditingUtilities trackedNormalizedInsertionPoints]
  +[JFXEffectEditingUtilities JFX_bestTrackedInsertionPointIndexForOverlay:atTime:insertionPoints:startingIndex:visibilityThreshold:scaleRelativeToCenterSquare:withARMetadata:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:]
  +[JFXEffectEditingUtilities setInsertionPointIndex:]
  +[JFXEffectEditingUtilities JFX_compositionBounds]
  +[JFXEffectEditingUtilities JFX_rectAtNormalizedPointinCenteredSquareInFaceRect:faceAnchor:atTime:scaleRelativeToCenterSquare:relativeToBounds:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:playableAspectRatio:playableAspectRatioPreservationMode:]
  +[JFXEffectEditingUtilities JFX_currentFaceRectRelativeToBounds:atTime:faceAnchor:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:playableAspectRatio:playableAspectRatioPreservationMode:]
  +[JFXEffectEditingUtilities JFX_hitTestOverlays:atNormalizedPoint:atTime:forcePosterFrame:adjustForMinimumSize:normalizedMinimumSize:]
  +[JFXEffectEditingUtilities applyCameraTrackingTransformToOverlay:withARMetadata:playableInterfaceOrientation:]
  +[JFXEffectEditingUtilities JFX_closeButtonInsetForEffect:viewBounds:]
  +[JFXEffectEditingUtilities JFX_ApplyTextFlipIfNeeded:transform:]
  +[JFXEffectEditingUtilities isStreamingMode]
  +[JFXEffectEditingUtilities JFX_setTextRenderingEnabledForEffect:value:]
  +[JFXEffectEditingUtilities newTextEditingPropertiesForEffect:relativeTo:atTime:withNewText:moveBeforeScalingToAvoidKeyboard:]
  +[JFXEffectEditingUtilities insertionPointIndex]
  +[JFXEffectEditingUtilities suspendOverlayTrackingMaintainingAppearance:forViewBounds:atTime:arMetadata:playableInterfaceOrientation:]
  +[JFXEffectEditingUtilities JFX_convertPoint:fromSize:toSize:invertY:]
  +[JFXEffectEditingUtilities shouldAutoEditTextForEffect:]
  +[JFXEffectEditingUtilities enableAnimationForEffects:animationStartTime:]
  +[JFXEffectEditingUtilities currentFaceRectRelativeToBounds:atTime:transformAnimation:playableMediaContentMode:playableInterfaceOrientation:playableAspectRatio:playableAspectRatioPreservationMode:]


JFXEffectAsset : NSObject
 @property  NSString *assetID
 @property  NSURL *localURL
 @property  JFXEffectAssetAttributes *attributes
 @property  BOOL contentUpdateAvailable

  // class methods
  +[JFXEffectAsset firstAssetInAssets:matchingFilterAttributes:]

  // instance methods
  -[JFXEffectAsset .cxx_destruct]
  -[JFXEffectAsset localURL]
  -[JFXEffectAsset isEqual:]
  -[JFXEffectAsset attributes]
  -[JFXEffectAsset assetID]
  -[JFXEffectAsset initWithAssetID:URL:copyOfAttributes:contentUpdateAvailable:]
  -[JFXEffectAsset initWithAssetID:URL:copyOfAttributes:]
  -[JFXEffectAsset contentUpdateAvailable]


JFXEffectAssetAttributes : NSObject <NSCopying>
 @property  long long contentType
 @property  long long aspectRatio
 @property  long long usageMode
 @property  long long colorDynamicRange
 @property  long long quality

  // instance methods
  -[JFXEffectAssetAttributes aspectRatio]
  -[JFXEffectAssetAttributes setQuality:]
  -[JFXEffectAssetAttributes setContentType:]
  -[JFXEffectAssetAttributes quality]
  -[JFXEffectAssetAttributes init]
  -[JFXEffectAssetAttributes usageMode]
  -[JFXEffectAssetAttributes contentType]
  -[JFXEffectAssetAttributes setAspectRatio:]
  -[JFXEffectAssetAttributes copyWithZone:]
  -[JFXEffectAssetAttributes setUsageMode:]
  -[JFXEffectAssetAttributes colorDynamicRange]
  -[JFXEffectAssetAttributes setColorDynamicRange:]
  -[JFXEffectAssetAttributes isMatchingFilterAttributes:]


JFXImageScaler : NSObject
  // instance methods
  -[JFXImageScaler dealloc]
  -[JFXImageScaler initForCPU:]
  -[JFXImageScaler scaleImage:destinationImage:]


JFXCompositionPlayerRequest : NSObject
 @property  NSString *uniqueID
 @property  @? block
 @property  double queuedTime
 @property  double startTime
 @property  unsigned long type
 @property  @? completionBlock
 @property  JFXCompositionPlayer *player
 @property  unsigned long signPostID

  // class methods
  +[JFXCompositionPlayerRequest stringFromRequestType:]

  // instance methods
  -[JFXCompositionPlayerRequest setBlock:]
  -[JFXCompositionPlayerRequest setQueuedTime:]
  -[JFXCompositionPlayerRequest didCancel]
  -[JFXCompositionPlayerRequest queuedTime]
  -[JFXCompositionPlayerRequest didBegin]
  -[JFXCompositionPlayerRequest uniqueID]
  -[JFXCompositionPlayerRequest setStartTime:]
  -[JFXCompositionPlayerRequest setType:]
  -[JFXCompositionPlayerRequest .cxx_destruct]
  -[JFXCompositionPlayerRequest didComplete]
  -[JFXCompositionPlayerRequest setPlayer:]
  -[JFXCompositionPlayerRequest player]
  -[JFXCompositionPlayerRequest startTime]
  -[JFXCompositionPlayerRequest type]
  -[JFXCompositionPlayerRequest completionBlock]
  -[JFXCompositionPlayerRequest setCompletionBlock:]
  -[JFXCompositionPlayerRequest block]
  -[JFXCompositionPlayerRequest signPostID]
  -[JFXCompositionPlayerRequest initWithBlock:ofType:]
  -[JFXCompositionPlayerRequest didEnqueue]


JFXCompositionUpdateRequest : JFXCompositionPlayerRequest
 @property  BOOL hasCompleted

  // instance methods
  -[JFXCompositionUpdateRequest didCancel]
  -[JFXCompositionUpdateRequest didBegin]
  -[JFXCompositionUpdateRequest didComplete]
  -[JFXCompositionUpdateRequest initWithBlock:]
  -[JFXCompositionUpdateRequest hasCompleted]
  -[JFXCompositionUpdateRequest didEnqueue]
  -[JFXCompositionUpdateRequest setReadyForDisplayReceived]
  -[JFXCompositionUpdateRequest setRefreshCompletedReceived]


JFXCompositionSeekRequest : JFXCompositionPlayerRequest
 @property  int seekTime

  // instance methods
  -[JFXCompositionSeekRequest seekTime]
  -[JFXCompositionSeekRequest setSeekTime:]
  -[JFXCompositionSeekRequest initWithBlock:withSeekTime:]


JFXCompositionPlayableElementUpdateRequest : JFXCompositionPlayerRequest
 @property  NSString *clipUUID

  // instance methods
  -[JFXCompositionPlayableElementUpdateRequest .cxx_destruct]
  -[JFXCompositionPlayableElementUpdateRequest clipUUID]
  -[JFXCompositionPlayableElementUpdateRequest setClipUUID:]
  -[JFXCompositionPlayableElementUpdateRequest initWithBlock:withClip:]


JFXCompositionPlayer : NSObject
 @property  <JFXCompositionPlayableElementsDataSource> *clipsDataSource
 @property  JFXComposition *composition
 @property  AVPlayer *player
 @property  id playerProVideoPeriodicObserver
 @property  id playerPlaybackTimePeriodicObserver
 @property  JFXCompositionPlayerRequest *pendingRequest
 @property  NSMutableArray *requestQueue
 @property  {?=qiIq} wasCurrentTime
 @property  {?=qiIq} cachedCurrentTimeForCompositionUpdate
 @property  BOOL wasAudioMuted
 @property  BOOL wasPlaying
 @property  BOOL restoringPlayerStateAfterCompositionUpdate
 @property  NSString *displayName
 @property  unsigned int parentCode
 @property  <JFXCompositionPlayerDelegate> *playbackDelegate
 @property  NSObject<JFXAVPlayerViewer> *playerView
 @property  {CGSize=dd} renderSize
 @property  {?=qiIq} playbackTimeChangedObserverInterval
 @property  int currentTime
 @property  {?=qiIq} currentCMTime

  // class methods
  +[JFXCompositionPlayer compositionClass]

  // instance methods
  -[JFXCompositionPlayer enqueueRequest:]
  -[JFXCompositionPlayer requestQueue]
  -[JFXCompositionPlayer displayName]
  -[JFXCompositionPlayer play:]
  -[JFXCompositionPlayer isPlaying]
  -[JFXCompositionPlayer composition]
  -[JFXCompositionPlayer .cxx_destruct]
  -[JFXCompositionPlayer playerView]
  -[JFXCompositionPlayer removeAllRequests]
  -[JFXCompositionPlayer setPlayer:]
  -[JFXCompositionPlayer player]
  -[JFXCompositionPlayer currentTime]
  -[JFXCompositionPlayer setDisplayName:]
  -[JFXCompositionPlayer pause:]
  -[JFXCompositionPlayer setPendingRequest:]
  -[JFXCompositionPlayer dealloc]
  -[JFXCompositionPlayer setComposition:]
  -[JFXCompositionPlayer renderSize]
  -[JFXCompositionPlayer doPause]
  -[JFXCompositionPlayer setRequestQueue:]
  -[JFXCompositionPlayer doPlay]
  -[JFXCompositionPlayer pendingRequest]
  -[JFXCompositionPlayer observeValueForKeyPath:ofObject:change:context:]
  -[JFXCompositionPlayer duration]
  -[JFXCompositionPlayer destroyPlayer]
  -[JFXCompositionPlayer playbackDelegate]
  -[JFXCompositionPlayer setPlaybackDelegate:]
  -[JFXCompositionPlayer isAudioMuted]
  -[JFXCompositionPlayer currentCMTime]
  -[JFXCompositionPlayer clipsDataSource]
  -[JFXCompositionPlayer parentCode]
  -[JFXCompositionPlayer setParentCode:]
  -[JFXCompositionPlayer setClipsDataSource:]
  -[JFXCompositionPlayer dispatchBlockWhenDone:]
  -[JFXCompositionPlayer warnTooManyLiveCompositors:]
  -[JFXCompositionPlayer teardownSetPlaceHolder:]
  -[JFXCompositionPlayer clearQueuedRequests]
  -[JFXCompositionPlayer executeRequestCompletionBlock:success:wasCancelled:error:]
  -[JFXCompositionPlayer isRequestOfTypeQueued:]
  -[JFXCompositionPlayer setCachedCurrentTimeForCompositionUpdate:]
  -[JFXCompositionPlayer handleUpdateCompositionCompleted:wasCancelled:error:]
  -[JFXCompositionPlayer handleClipCompositionUpdateTimedOut]
  -[JFXCompositionPlayer completePendingRequest:wasCancelled:error:]
  -[JFXCompositionPlayer executeNextRequest]
  -[JFXCompositionPlayer checkPendingRequestForTimeOut]
  -[JFXCompositionPlayer completeRequest:success:wasCancelled:error:]
  -[JFXCompositionPlayer requestWithBlock:ofType:completion:]
  -[JFXCompositionPlayer isRequestOfTypePendingOrQueued:]
  -[JFXCompositionPlayer throttleRequestWithCompletionBlock:ofType:]
  -[JFXCompositionPlayer setupPlaybackTimeChangedObserver]
  -[JFXCompositionPlayer setPlaybackTimeChangedObserverInterval:]
  -[JFXCompositionPlayer removeCompositorCompletionBlock]
  -[JFXCompositionPlayer configureCompositorCompletionBlock]
  -[JFXCompositionPlayer cancelQueuedRequestOfType:]
  -[JFXCompositionPlayer handleSeekCompleted:]
  -[JFXCompositionPlayer seek:cancelQueuedRequest:tolerance:completion:]
  -[JFXCompositionPlayer doMuteAudio:]
  -[JFXCompositionPlayer handleChangeAudioMutedCompleted]
  -[JFXCompositionPlayer updateComposition:]
  -[JFXCompositionPlayer doUpdateComposition]
  -[JFXCompositionPlayer setWasPlaying:]
  -[JFXCompositionPlayer setWasCurrentTime:]
  -[JFXCompositionPlayer setWasAudioMuted:]
  -[JFXCompositionPlayer wasCurrentTime]
  -[JFXCompositionPlayer createPlayer]
  -[JFXCompositionPlayer wasAudioMuted]
  -[JFXCompositionPlayer setAudioMuted:completionBlock:]
  -[JFXCompositionPlayer removeRequestOfType:]
  -[JFXCompositionPlayer setRestoringPlayerStateAfterCompositionUpdate:]
  -[JFXCompositionPlayer wasPlaying]
  -[JFXCompositionPlayer appendRequests:]
  -[JFXCompositionPlayer firstQueuedRequestOfType:]
  -[JFXCompositionPlayer seek:tolerance:completion:]
  -[JFXCompositionPlayer cancelQueuedCompositionUpdateRequestFromClip:]
  -[JFXCompositionPlayer doClipCompositionUpdate:]
  -[JFXCompositionPlayer handleUpdateCompositionForClipCompleted:]
  -[JFXCompositionPlayer handleCompositionRefreshCompleted:]
  -[JFXCompositionPlayer cachedCurrentTimeForCompositionUpdate]
  -[JFXCompositionPlayer handlePlaybackBegan]
  -[JFXCompositionPlayer handlePlaybackPaused]
  -[JFXCompositionPlayer handleReadyForDisplay:]
  -[JFXCompositionPlayer setPlayerProVideoPeriodicObserver:]
  -[JFXCompositionPlayer playerPlaybackTimePeriodicObserver]
  -[JFXCompositionPlayer playbackTimeChangedObserverInterval]
  -[JFXCompositionPlayer restoringPlayerStateAfterCompositionUpdate]
  -[JFXCompositionPlayer setPlayerPlaybackTimePeriodicObserver:]
  -[JFXCompositionPlayer playerProVideoPeriodicObserver]
  -[JFXCompositionPlayer initWithClipsDataSource:seekPosition:audioMuted:]
  -[JFXCompositionPlayer resetPlaybackTimeChangedObserverInterval]
  -[JFXCompositionPlayer setPlayerView:completionBlock:]
  -[JFXCompositionPlayer notifyPlayerViewSizeChanged]
  -[JFXCompositionPlayer updateCompositionForClip:completion:]
  -[JFXCompositionPlayer JFX_clipDataSourceHasClip:]


JFXPickerCameraSource : NSObject
 @property  NSMutableSet *registeredPickers
 @property  NSObject<OS_dispatch_queue> *registeredPickersQueue
 @property  PVLivePlayerCameraSource *registeredPickersSource
 @property  PVLivePlayerCameraSource *pickerSource
 @property  BOOL isPickerPreviewing

  // class methods
  +[JFXPickerCameraSource sharedInstance]

  // instance methods
  -[JFXPickerCameraSource .cxx_destruct]
  -[JFXPickerCameraSource init]
  -[JFXPickerCameraSource registeredPickersQueue]
  -[JFXPickerCameraSource registeredPickers]
  -[JFXPickerCameraSource registeredPickersSource]
  -[JFXPickerCameraSource setRegisteredPickersSource:]
  -[JFXPickerCameraSource registerPickerAsPreviewingWithObject:]
  -[JFXPickerCameraSource unregisterPickerAsPreviewingWithObject:]
  -[JFXPickerCameraSource isPickerPreviewing]
  -[JFXPickerCameraSource pickerSource]
  -[JFXPickerCameraSource setRegisteredPickers:]
  -[JFXPickerCameraSource setRegisteredPickersQueue:]


CFXControlsViewController : UIViewController
 @property  UIView *controlsContainerView
 @property  UIView *effectsPickerDrawer
 @property  UIView *effectsBrowser
 @property  BOOL usesInternalCaptureSession
 @property  NSLayoutConstraint *controlsContainerViewHeightConstraint
 @property  NSLayoutConstraint *controlsContainerViewWidthConstraint
 @property  NSLayoutConstraint *controlsContainerViewTrailingConstraint
 @property  NSLayoutConstraint *controlsContainerViewLeadingConstraint
 @property  NSLayoutConstraint *controlsContainerViewTopConstraint
 @property  CFXEffectBrowserContentPresenterViewController *effectBrowserContentPresenterViewController

  // instance methods
  -[CFXControlsViewController .cxx_destruct]
  -[CFXControlsViewController viewDidLoad]
  -[CFXControlsViewController setEffectsPickerDrawer:]
  -[CFXControlsViewController setUsesInternalCaptureSession:]
  -[CFXControlsViewController effectsPickerDrawer]
  -[CFXControlsViewController controlsContainerView]
  -[CFXControlsViewController effectBrowserContentPresenterViewController]
  -[CFXControlsViewController controlsContainerViewTopConstraint]
  -[CFXControlsViewController controlsContainerViewLeadingConstraint]
  -[CFXControlsViewController controlsContainerViewTrailingConstraint]
  -[CFXControlsViewController controlsContainerViewWidthConstraint]
  -[CFXControlsViewController controlsContainerViewHeightConstraint]
  -[CFXControlsViewController setEffectsBrowser:]
  -[CFXControlsViewController effectsPickerSnapshot]
  -[CFXControlsViewController effectsPickerCenter]
  -[CFXControlsViewController usesInternalCaptureSession]
  -[CFXControlsViewController setEffectBrowserContentPresenterViewController:]
  -[CFXControlsViewController effectsBrowser]
  -[CFXControlsViewController setControlsContainerView:]
  -[CFXControlsViewController setControlsContainerViewHeightConstraint:]
  -[CFXControlsViewController setControlsContainerViewWidthConstraint:]
  -[CFXControlsViewController setControlsContainerViewTrailingConstraint:]
  -[CFXControlsViewController setControlsContainerViewLeadingConstraint:]
  -[CFXControlsViewController setControlsContainerViewTopConstraint:]


JFXImageIOSurfaceView : UIView <JFXImageViewRendering>
 @property  JTImage *jtImage
 @property  long long renderingType
 @property  BOOL flipX
 @property  BOOL flipY
 @property  BOOL enableDebugDrawing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXImageIOSurfaceView initWithCoder:]
  -[JFXImageIOSurfaceView setRenderingType:]
  -[JFXImageIOSurfaceView .cxx_destruct]
  -[JFXImageIOSurfaceView flipY]
  -[JFXImageIOSurfaceView renderingType]
  -[JFXImageIOSurfaceView enableDebugDrawing]
  -[JFXImageIOSurfaceView setEnableDebugDrawing:]
  -[JFXImageIOSurfaceView initWithFrame:]
  -[JFXImageIOSurfaceView flipX]
  -[JFXImageIOSurfaceView setFlipX:]
  -[JFXImageIOSurfaceView updateDebugDrawing]
  -[JFXImageIOSurfaceView setJtImage:]
  -[JFXImageIOSurfaceView jtImage]
  -[JFXImageIOSurfaceView setFlipY:]
  -[JFXImageIOSurfaceView JFXImageIOSurfaceView_commonInit]


JFXOverlayEffectAnimationConfiguration : NSObject
 @property  JFXOverlayEffectFrame *startFrame
 @property  JFXOverlayEffectFrame *endFrame

  // instance methods
  -[JFXOverlayEffectAnimationConfiguration .cxx_destruct]
  -[JFXOverlayEffectAnimationConfiguration startFrame]
  -[JFXOverlayEffectAnimationConfiguration endFrame]
  -[JFXOverlayEffectAnimationConfiguration initWithStartFrame:endFrame:]


CFXFilterPickerCollectionViewCell : CFXEffectPickerCollectionViewCell
 @property  UILabel *titleView
 @property  UIView *selectionView
 @property  BOOL compactMode

  // class methods
  +[CFXFilterPickerCollectionViewCell selectionColor]

  // instance methods
  -[CFXFilterPickerCollectionViewCell selectionView]
  -[CFXFilterPickerCollectionViewCell isInCompactMode]
  -[CFXFilterPickerCollectionViewCell setEffect:]
  -[CFXFilterPickerCollectionViewCell titleView]
  -[CFXFilterPickerCollectionViewCell .cxx_destruct]
  -[CFXFilterPickerCollectionViewCell setTitleView:]
  -[CFXFilterPickerCollectionViewCell setSelectionView:]
  -[CFXFilterPickerCollectionViewCell setSelected:]
  -[CFXFilterPickerCollectionViewCell prepareForReuse]
  -[CFXFilterPickerCollectionViewCell setCompactMode:]
  -[CFXFilterPickerCollectionViewCell CFX_updateLayerProperties]
  -[CFXFilterPickerCollectionViewCell CFX_updateTitle]
  -[CFXFilterPickerCollectionViewCell CFX_updateSelectionView]
  -[CFXFilterPickerCollectionViewCell configureCellAppearence]


CFXEffectEditorView : UIView <UIGestureRecognizerDelegate, CFXTextEffectEditorViewDelegate, JFXOverlayEffectDebugViewDelegate>
 @property  CFXEffect *editEffect
 @property  BOOL isEditing
 @property  BOOL isTextEditing
 @property  {CGAffineTransform=dddddd} editTransform
 @property  double displayScale
 @property  BOOL effectWasEdited
 @property  UIButton *removeButton
 @property  JFXOverlayEffectDebugView *debugOverlayView
 @property  CADisplayLink *debugDisplayLink
 @property  CFXTextEffectEditorView *textEditorView
 @property  JFXEffectsPreviewGenerator *previewGenerator
 @property  JFXImageView *editEffectPreview
 @property  NSObject<OS_dispatch_queue> *effectRenderingQueue
 @property  NSString *oldEditText
 @property  BOOL truncateTextToMaximumLength
 @property  unsigned long maximumTextLength
 @property  CADisplayLink *editControlsTrackingDisplayLink
 @property  CFXFaceReticleView *faceTrackingReticle
 @property  {CGPoint=dd} lastTouchLocation
 @property  {CGPoint=dd} lastSpacingBetweenTouchAndCenterOfEffect
 @property  JFXOverlayEffectAnimationView *effectAnimationView
 @property  CADisplayLink *effectAnimationDisplayLink
 @property  unsigned long appliedEditingGestures
 @property  double lastFaceRectacleUpdateTime
 @property  double lastEffectMovedNotifyTime
 @property  BOOL isEndingEditing
 @property  BOOL isBeginningEditing
 @property  NSMutableArray *beginEditingCompletionBlocks
 @property  NSMutableArray *endEditingCompletionBlocks
 @property  BOOL delegateSupportsCalculatingAnimatedFaceTrackingTransform
 @property  BOOL delegateSupportsDidMoveEffect
 @property  BOOL delegateSupportsApplyAnimationTransformsToEffect
 @property  <CFXEffectEditorViewDelegate> *delegate
 @property  unsigned long mode
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} textEditingFrame
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXEffectEditorView displayScale]
  -[CFXEffectEditorView gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[CFXEffectEditorView didTap:]
  -[CFXEffectEditorView handlePinchGesture:]
  -[CFXEffectEditorView .cxx_destruct]
  -[CFXEffectEditorView setLastTouchLocation:]
  -[CFXEffectEditorView layoutSubviews]
  -[CFXEffectEditorView setDisplayScale:]
  -[CFXEffectEditorView handlePanGesture:]
  -[CFXEffectEditorView lastTouchLocation]
  -[CFXEffectEditorView didRotate:]
  -[CFXEffectEditorView didPan:]
  -[CFXEffectEditorView isEditing]
  -[CFXEffectEditorView delegate]
  -[CFXEffectEditorView dealloc]
  -[CFXEffectEditorView mode]
  -[CFXEffectEditorView isTextEditing]
  -[CFXEffectEditorView setIsTextEditing:]
  -[CFXEffectEditorView setIsEditing:]
  -[CFXEffectEditorView didPinch:]
  -[CFXEffectEditorView maximumTextLength]
  -[CFXEffectEditorView setMaximumTextLength:]
  -[CFXEffectEditorView isEndingEditing]
  -[CFXEffectEditorView setIsEndingEditing:]
  -[CFXEffectEditorView handleRotateGesture:]
  -[CFXEffectEditorView beginTextEditing]
  -[CFXEffectEditorView textEditingFrame]
  -[CFXEffectEditorView editEffect]
  -[CFXEffectEditorView initWithMode:delegate:]
  -[CFXEffectEditorView beginEditingEffect:]
  -[CFXEffectEditorView endEditingAnimated:withCompletionBlock:]
  -[CFXEffectEditorView beginEditingEffect:animated:withCompletionBlock:]
  -[CFXEffectEditorView notifyEffectTransformDidChange]
  -[CFXEffectEditorView textEffectEditorView:textChanged:shouldUpdateTextEditingProperties:]
  -[CFXEffectEditorView textEffectEditorView:shouldChangeTextInRange:replacementText:]
  -[CFXEffectEditorView notifyEffectTrackingDidChangeToType:]
  -[CFXEffectEditorView setPreviewGenerator:]
  -[CFXEffectEditorView previewGenerator]
  -[CFXEffectEditorView CFX_setupGestures]
  -[CFXEffectEditorView CFX_setupControls]
  -[CFXEffectEditorView CFX_setUserInteractionEnabledIfPossible:]
  -[CFXEffectEditorView startUpdatingDebugOverlayView]
  -[CFXEffectEditorView initializeAvailabilityOfFrequentCalledDelegateMethods]
  -[CFXEffectEditorView editControlsTrackingDisplayLink]
  -[CFXEffectEditorView effectAnimationDisplayLink]
  -[CFXEffectEditorView stopUpdatingDebugOverlayView]
  -[CFXEffectEditorView CFX_effectPreviewBoundsDidChange]
  -[CFXEffectEditorView CFX_updateEditControlsLayout]
  -[CFXEffectEditorView CFX_updateTextEditFieldLayout]
  -[CFXEffectEditorView effectRenderingQueue]
  -[CFXEffectEditorView CFX_previewEditEffectIfNeeded]
  -[CFXEffectEditorView CFX_isPreviewingEditEffect]
  -[CFXEffectEditorView CFX_endEditingEffect]
  -[CFXEffectEditorView CFX_beginEditingEffect:isAnimating:]
  -[CFXEffectEditorView CFX_beginTextEditing]
  -[CFXEffectEditorView CFX_hideEditControls]
  -[CFXEffectEditorView appliedEditingGestures]
  -[CFXEffectEditorView setAppliedEditingGestures:]
  -[CFXEffectEditorView CFX_scaleEffect:]
  -[CFXEffectEditorView CFX_showEditControls]
  -[CFXEffectEditorView CFX_rotateEffect:]
  -[CFXEffectEditorView CFX_updateSpacingBetweenTouchAndCenterOfEffectWithGesture:]
  -[CFXEffectEditorView setLastSpacingBetweenTouchAndCenterOfEffect:]
  -[CFXEffectEditorView CFX_updateExternalEffectTrackingRunningState]
  -[CFXEffectEditorView CFX_addBeginEditingCompletionBlock:]
  -[CFXEffectEditorView isBeginningEditing]
  -[CFXEffectEditorView setIsBeginningEditing:]
  -[CFXEffectEditorView beginEditingCompletionBlocks]
  -[CFXEffectEditorView setBeginEditingCompletionBlocks:]
  -[CFXEffectEditorView CFX_performTextEditOnlyModeEnterAnimationWithCompletionBlock:]
  -[CFXEffectEditorView CFX_useFaceReticle]
  -[CFXEffectEditorView faceTrackingReticle]
  -[CFXEffectEditorView CFX_addEndEditingCompletionBlock:]
  -[CFXEffectEditorView removeButton]
  -[CFXEffectEditorView setEditEffect:]
  -[CFXEffectEditorView CFX_stopTrackingExternalEffectChanges]
  -[CFXEffectEditorView endEditingCompletionBlocks]
  -[CFXEffectEditorView setEndEditingCompletionBlocks:]
  -[CFXEffectEditorView CFX_performTextEditOnlyModeExitAnimationWithCompletionBlock:]
  -[CFXEffectEditorView CFX_endTextEditing:]
  -[CFXEffectEditorView CFX_textEditingFrame]
  -[CFXEffectEditorView setEffectWasEdited:]
  -[CFXEffectEditorView setEditTransform:]
  -[CFXEffectEditorView CFX_beginPreviewingEditEffect]
  -[CFXEffectEditorView CFX_endPreviewingEditEffect]
  -[CFXEffectEditorView editTransform]
  -[CFXEffectEditorView CFX_applyEffectTransformChanges]
  -[CFXEffectEditorView lastSpacingBetweenTouchAndCenterOfEffect]
  -[CFXEffectEditorView lastEffectMovedNotifyTime]
  -[CFXEffectEditorView setLastEffectMovedNotifyTime:]
  -[CFXEffectEditorView delegateSupportsDidMoveEffect]
  -[CFXEffectEditorView CFX_isRemoveAvailableInCurrentMode]
  -[CFXEffectEditorView setRemoveButton:]
  -[CFXEffectEditorView tapRemoveButton:]
  -[CFXEffectEditorView setFaceTrackingReticle:]
  -[CFXEffectEditorView CFX_hideEditControls:]
  -[CFXEffectEditorView CFX_isRemoveAlwaysAvailableInCurrentMode]
  -[CFXEffectEditorView CFX_removeEffect]
  -[CFXEffectEditorView externalEffectTrackingDisplayLinkFired:]
  -[CFXEffectEditorView setEditControlsTrackingDisplayLink:]
  -[CFXEffectEditorView CFX_startTrackingExternalEffectChanges]
  -[CFXEffectEditorView CFX_updateOverlayForTranslation]
  -[CFXEffectEditorView CFX_updateTrackingTypeForTouchLocation]
  -[CFXEffectEditorView lastFaceRectacleUpdateTime]
  -[CFXEffectEditorView setLastFaceRectacleUpdateTime:]
  -[CFXEffectEditorView CFX_getTextEditingProperties]
  -[CFXEffectEditorView setOldEditText:]
  -[CFXEffectEditorView setTextEditorView:]
  -[CFXEffectEditorView textEditorView]
  -[CFXEffectEditorView setTruncateTextToMaximumLength:]
  -[CFXEffectEditorView oldEditText]
  -[CFXEffectEditorView CFX_updateEffectText:updateTextProperties:]
  -[CFXEffectEditorView truncateTextToMaximumLength]
  -[CFXEffectEditorView setEditEffectPreview:]
  -[CFXEffectEditorView editEffectPreview]
  -[CFXEffectEditorView CFX_effectAnimationDisplayLinkFired:]
  -[CFXEffectEditorView setEffectAnimationDisplayLink:]
  -[CFXEffectEditorView CFX_applyEffectAnimationView:]
  -[CFXEffectEditorView effectAnimationView]
  -[CFXEffectEditorView delegateSupportsCalculatingAnimatedFaceTrackingTransform]
  -[CFXEffectEditorView setEffectAnimationView:]
  -[CFXEffectEditorView CFX_startApplyingEffectAnimationViewDisplayLink]
  -[CFXEffectEditorView CFX_springForTextEditAnimation]
  -[CFXEffectEditorView CFX_stopApplyingEffectAnimationViewDisplayLink]
  -[CFXEffectEditorView CFX_forceHideEditControls]
  -[CFXEffectEditorView onDebugDisplayLink:]
  -[CFXEffectEditorView setDebugDisplayLink:]
  -[CFXEffectEditorView debugDisplayLink]
  -[CFXEffectEditorView debugOverlayView]
  -[CFXEffectEditorView overlayEffectDebugViewOptions]
  -[CFXEffectEditorView endTextEditing:]
  -[CFXEffectEditorView effectWasEdited]
  -[CFXEffectEditorView setDebugOverlayView:]
  -[CFXEffectEditorView delegateSupportsApplyAnimationTransformsToEffect]


JTFixedSizeUIImageView : UIImageView
  // instance methods
  -[JTFixedSizeUIImageView sizeThatFits:]
  -[JTFixedSizeUIImageView intrinsicContentSize]


JFXImageView : UIView
 @property  long long currentImageViewType
 @property  UIView *imageView
 @property  JTImage *jtImage
 @property  long long imageViewType
 @property  BOOL preferIOSurfaceForYUV
 @property  BOOL preferMetalKit
 @property  BOOL enableDebugDrawing
 @property  BOOL disableIOSurface
 @property  BOOL disableMetalKit

  // class methods
  +[JFXImageView normalizedQuadVertices:viewSize:textureSize:contentMode:]
  +[JFXImageView colorFromRenderingType:]
  +[JFXImageView colorFromImageViewType:]

  // instance methods
  -[JFXImageView imageView]
  -[JFXImageView initWithCoder:]
  -[JFXImageView .cxx_destruct]
  -[JFXImageView enableDebugDrawing]
  -[JFXImageView setEnableDebugDrawing:]
  -[JFXImageView initWithFrame:]
  -[JFXImageView flipX]
  -[JFXImageView setContentMode:]
  -[JFXImageView updateDebugDrawing]
  -[JFXImageView setImageView:]
  -[JFXImageView setJtImage:]
  -[JFXImageView jtImage]
  -[JFXImageView setPreferIOSurfaceForYUV:]
  -[JFXImageView setPreferMetalKit:]
  -[JFXImageView JFXImageView_commonInit]
  -[JFXImageView setCurrentImageViewType:]
  -[JFXImageView preferredImageViewTypeForImage:]
  -[JFXImageView updateImageViewImage]
  -[JFXImageView reconfigureImageView]
  -[JFXImageView stringFromImageViewType:]
  -[JFXImageView setImageViewType:]
  -[JFXImageView setDisableIOSurface:]
  -[JFXImageView setDisableMetalKit:]
  -[JFXImageView imageViewType]
  -[JFXImageView currentImageViewType]
  -[JFXImageView preferIOSurfaceForYUV]
  -[JFXImageView preferMetalKit]
  -[JFXImageView disableIOSurface]
  -[JFXImageView disableMetalKit]


JFXMetadataValidator : NSObject
 @property  long long faceDataDetectedFacesCount
 @property  unsigned long lastARFrameHasFaceAnchors
 @property  unsigned long lastARFrameIsFaceTracked

  // instance methods
  -[JFXMetadataValidator init]
  -[JFXMetadataValidator reset]
  -[JFXMetadataValidator validateARImageData:]
  -[JFXMetadataValidator validateFaceTrackedARFrame:]
  -[JFXMetadataValidator faceDataDetectedFacesCount]
  -[JFXMetadataValidator setFaceDataDetectedFacesCount:]
  -[JFXMetadataValidator lastARFrameHasFaceAnchors]
  -[JFXMetadataValidator setLastARFrameHasFaceAnchors:]
  -[JFXMetadataValidator lastARFrameIsFaceTracked]
  -[JFXMetadataValidator setLastARFrameIsFaceTracked:]


JFXFaceAnchor : NSObject <NSSecureCoding, NSCopying>
 @property  {?=[4]} transform
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} faceRect
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} normalizedFaceRect
 @property  double focalLength
 @property  void screenRelativePosition
 @property  double rollAngle
 @property  {?=[4]} cameraTransform
 @property  {CGSize=dd} imageResolution
 @property  long long preferredAnchorOrientation
 @property  long long captureInterfaceOrientation

  // class methods
  +[JFXFaceAnchor supportsSecureCoding]
  +[JFXFaceAnchor faceAnchorWithARFrame:captureInterfaceOrientation:withFaceRectScaleFactor:]
  +[JFXFaceAnchor CFX_mirrorPoseTransformLeftRight:]

  // instance methods
  -[JFXFaceAnchor focalLength]
  -[JFXFaceAnchor initWithCoder:]
  -[JFXFaceAnchor faceRect]
  -[JFXFaceAnchor imageResolution]
  -[JFXFaceAnchor setTransform:]
  -[JFXFaceAnchor setCameraTransform:]
  -[JFXFaceAnchor setFaceRect:]
  -[JFXFaceAnchor setNormalizedFaceRect:]
  -[JFXFaceAnchor transform]
  -[JFXFaceAnchor normalizedFaceRect]
  -[JFXFaceAnchor rollAngle]
  -[JFXFaceAnchor setFocalLength:]
  -[JFXFaceAnchor copyWithZone:]
  -[JFXFaceAnchor encodeWithCoder:]
  -[JFXFaceAnchor setImageResolution:]
  -[JFXFaceAnchor cameraTransform]
  -[JFXFaceAnchor captureInterfaceOrientation]
  -[JFXFaceAnchor preferredAnchorOrientation]
  -[JFXFaceAnchor setCaptureInterfaceOrientation:]
  -[JFXFaceAnchor focalLengthForViewport:]
  -[JFXFaceAnchor screenRelativePosition]
  -[JFXFaceAnchor initWithTransform:forFaceRect:needsMirroring:withFaceRectScaleFactor:frameImageResolution:captureInterfaceOrientation:preferredAnchorOrientation:]
  -[JFXFaceAnchor setPreferredAnchorOrientation:]


CFXActionLogging : NSObject
  // class methods
  +[CFXActionLogging actionLogAsJSONForEvent:atLocation:withEffectStack:]
  +[CFXActionLogging CFX_actionLogDictionaryWithEvent:atLocation:withEffectStack:]
  +[CFXActionLogging remainingMemory]
  +[CFXActionLogging actionLogAsStringForEvent:atLocation:withEffectStack:]


JFXAVMediaMetaDataReader : JFXAVMediaDataReader <JFXMediaMetadataReader>
 @property  AVAssetReaderOutputMetadataAdaptor *assetReaderOutputMetadataAdaptor
 @property  AVMetadataItem *currentMetadataItem
 @property  AVMetadataItem *nextMetadataItem
 @property  {?={?=qiIq}{?=qiIq}} readableTimeRange
 @property  BOOL isScrubbing
 @property  long long status
 @property  NSError *error
 @property  unsigned long signPostID
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXAVMediaMetaDataReader .cxx_destruct]
  -[JFXAVMediaMetaDataReader JFX_preloadData]
  -[JFXAVMediaMetaDataReader createAssetReaderTrackOutput]
  -[JFXAVMediaMetaDataReader didUpdateReadingRange]
  -[JFXAVMediaMetaDataReader readAheadToTime:]
  -[JFXAVMediaMetaDataReader readAndDiscardRemainingAvailableData]
  -[JFXAVMediaMetaDataReader hasRemainingAvailableData]
  -[JFXAVMediaMetaDataReader startTimeOfCurrentData]
  -[JFXAVMediaMetaDataReader metadataForTime:]
  -[JFXAVMediaMetaDataReader cancelReadingForReaderReset]
  -[JFXAVMediaMetaDataReader setAssetReaderOutputMetadataAdaptor:]
  -[JFXAVMediaMetaDataReader setCurrentMetadataItem:]
  -[JFXAVMediaMetaDataReader setNextMetadataItem:]
  -[JFXAVMediaMetaDataReader nextMetadataItem]
  -[JFXAVMediaMetaDataReader currentMetadataItem]
  -[JFXAVMediaMetaDataReader assetReaderOutputMetadataAdaptor]


JFXTextEffectTransforms : NSObject
 @property  PVMatrix44Double *transform

  // class methods
  +[JFXTextEffectTransforms transformsWithEffect:]
  +[JFXTextEffectTransforms transformsWithTransform:]

  // instance methods
  -[JFXTextEffectTransforms .cxx_destruct]
  -[JFXTextEffectTransforms initWithTransform:]
  -[JFXTextEffectTransforms setTransform:]
  -[JFXTextEffectTransforms transform]
  -[JFXTextEffectTransforms initWithEffect:]
  -[JFXTextEffectTransforms applyToEffect:]


CFXFeedbackController : NSObject
 @property  _UIButtonFeedbackGenerator *_shutterButtonLatchingOnFeedbackGenerator
 @property  _UIButtonFeedbackGenerator *_shutterButtonLatchingOffFeedbackGenerator
 @property  _UIButtonFeedbackGenerator *_shutterButtonMomentaryFeedbackGenerator
 @property  NSMutableSet *_activePairedFeedbackGenerators
 @property  CUShutterButton *shutterButton
 @property  unsigned long feedbackToPerform

  // instance methods
  -[CFXFeedbackController .cxx_destruct]
  -[CFXFeedbackController shutterButton]
  -[CFXFeedbackController init]
  -[CFXFeedbackController _feedbackGeneratorForPairedFeedback:]
  -[CFXFeedbackController _activePairedFeedbackGenerators]
  -[CFXFeedbackController _debugStringForPairedFeedback:]
  -[CFXFeedbackController _shutterButtonMomentaryFeedbackGenerator]
  -[CFXFeedbackController _shutterButtonLatchingOnFeedbackGenerator]
  -[CFXFeedbackController _shutterButtonLatchingOffFeedbackGenerator]
  -[CFXFeedbackController prepareButtonFeedback:]
  -[CFXFeedbackController performPressButtonFeedback:]
  -[CFXFeedbackController performReleaseButtonFeedback:]
  -[CFXFeedbackController initWithShutterButton:]
  -[CFXFeedbackController shutterButtonDown:]
  -[CFXFeedbackController shutterButtonUp:]
  -[CFXFeedbackController shutterButtonFeedbackForCurrentConfiguration]
  -[CFXFeedbackController setFeedbackToPerform:]
  -[CFXFeedbackController feedbackToPerform]


JFXThermalPolicyManager : NSObject
 @property  JFXThreadSafeArray *activePolicies
 @property  <JFXThermalPolicy> *highestPriorityPolicy

  // instance methods
  -[JFXThermalPolicyManager .cxx_destruct]
  -[JFXThermalPolicyManager init]
  -[JFXThermalPolicyManager activePolicies]
  -[JFXThermalPolicyManager highestPriorityPolicy]
  -[JFXThermalPolicyManager initWithDefaultPolicy:]
  -[JFXThermalPolicyManager setPolicyType:active:]


JFXCaptureCallObserver : NSObject <CXCallObserverDelegate>
 @property  CXCallObserver *callObserver
 @property  long long callCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXCaptureCallObserver callObserver]
  -[JFXCaptureCallObserver .cxx_destruct]
  -[JFXCaptureCallObserver init]
  -[JFXCaptureCallObserver callCount]
  -[JFXCaptureCallObserver setCallObserver:]
  -[JFXCaptureCallObserver callObserver:callChanged:]


JTAnimation : NSObject
  // class methods
  +[JTAnimation performAnimation:duration:completion:]
  +[JTAnimation performAnimation:curve:duration:completion:delay:userInteractionEnabled:]
  +[JTAnimation performWithAnimator:animation:duration:completion:delay:userInteractionEnabled:]
  +[JTAnimation performAnimation:timingParameters:duration:completion:delay:userInteractionEnabled:]
  +[JTAnimation performAnimation:timingParameters:duration:completion:delay:]


JFXCompositionPlayerViewControllerAnimationProperties : NSObject
 @property  double animationDuration
 @property  BOOL shouldScale
 @property  <UITimingCurveProvider> *timingParameters

  // instance methods
  -[JFXCompositionPlayerViewControllerAnimationProperties setAnimationDuration:]
  -[JFXCompositionPlayerViewControllerAnimationProperties timingParameters]
  -[JFXCompositionPlayerViewControllerAnimationProperties animationDuration]
  -[JFXCompositionPlayerViewControllerAnimationProperties .cxx_destruct]
  -[JFXCompositionPlayerViewControllerAnimationProperties shouldScale]
  -[JFXCompositionPlayerViewControllerAnimationProperties setShouldScale:]
  -[JFXCompositionPlayerViewControllerAnimationProperties setTimingParameters:]


JFXCompositionPlayerViewController : UIViewController <UIGestureRecognizerDelegate>
 @property  UIView *videoDisplayOverlayView
 @property  JFXCompositionPlayer *clipsPlayer
 @property  BOOL dontRemovePlaceHolderOnDisplay
 @property  int cachedDuration
 @property  int cachedCurrentTime
 @property  int cachedMuted
 @property  BOOL cachedWasPlaying
 @property  {CGSize=dd} cachedRenderSizeInPixels
 @property  UIView *viewFlashed
 @property  UIColor *restoreToColor
 @property  {CGSize=dd} lastPlayerViewSize
 @property  {CGSize=dd} lastPlayerViewBoundsSize
 @property  UIView *placeHolderView
 @property  <JFXCompositionPlayerViewControllerDelegate> *delegate
 @property  <JFXCompositionPlayableElementsDataSource> *clipsDataSource
 @property  NSString *displayName
 @property  unsigned int parentCode
 @property  BOOL disableVideoDisplayGestures
 @property  {?=qiIq} currentCMTime
 @property  int currentTime
 @property  {?=qiIq} playbackTimeChangedObserverInterval
 @property  BOOL muted
 @property  long long videoContentMode
 @property  {CGSize=dd} renderSizeInPixels
 @property  BOOL isDisplaying
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXCompositionPlayerViewController compositionPlayerClass]

  // instance methods
  -[JFXCompositionPlayerViewController setMuted:]
  -[JFXCompositionPlayerViewController displayName]
  -[JFXCompositionPlayerViewController isMuted]
  -[JFXCompositionPlayerViewController play]
  -[JFXCompositionPlayerViewController initWithCoder:]
  -[JFXCompositionPlayerViewController playWithCompletionHandler:]
  -[JFXCompositionPlayerViewController isPlaying]
  -[JFXCompositionPlayerViewController appDidEnterBackground:]
  -[JFXCompositionPlayerViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[JFXCompositionPlayerViewController .cxx_destruct]
  -[JFXCompositionPlayerViewController viewDidLoad]
  -[JFXCompositionPlayerViewController appWillResignActive:]
  -[JFXCompositionPlayerViewController setDelegate:]
  -[JFXCompositionPlayerViewController viewDidAppear:]
  -[JFXCompositionPlayerViewController seekToTime:]
  -[JFXCompositionPlayerViewController init]
  -[JFXCompositionPlayerViewController appDidBecomeActive:]
  -[JFXCompositionPlayerViewController pause]
  -[JFXCompositionPlayerViewController currentTime]
  -[JFXCompositionPlayerViewController setDisplayName:]
  -[JFXCompositionPlayerViewController viewDidLayoutSubviews]
  -[JFXCompositionPlayerViewController frameRate]
  -[JFXCompositionPlayerViewController delegate]
  -[JFXCompositionPlayerViewController videoContentMode]
  -[JFXCompositionPlayerViewController dealloc]
  -[JFXCompositionPlayerViewController isDisplaying]
  -[JFXCompositionPlayerViewController setVideoContentMode:]
  -[JFXCompositionPlayerViewController observeValueForKeyPath:ofObject:change:context:]
  -[JFXCompositionPlayerViewController viewDidDisappear:]
  -[JFXCompositionPlayerViewController duration]
  -[JFXCompositionPlayerViewController didReceiveMemoryWarning]
  -[JFXCompositionPlayerViewController setCachedDuration:]
  -[JFXCompositionPlayerViewController cachedDuration]
  -[JFXCompositionPlayerViewController currentCMTime]
  -[JFXCompositionPlayerViewController sharedInit]
  -[JFXCompositionPlayerViewController clipsDataSource]
  -[JFXCompositionPlayerViewController parentCode]
  -[JFXCompositionPlayerViewController setParentCode:]
  -[JFXCompositionPlayerViewController setClipsDataSource:]
  -[JFXCompositionPlayerViewController mediaserverdCrashed]
  -[JFXCompositionPlayerViewController playerContainerView]
  -[JFXCompositionPlayerViewController dispatchBlockWhenDone:]
  -[JFXCompositionPlayerViewController pauseWithCompletionBlock:]
  -[JFXCompositionPlayerViewController playbackTimeDidChange:currentTime:]
  -[JFXCompositionPlayerViewController playbackDidStart:]
  -[JFXCompositionPlayerViewController playbackDidStop:currentTime:]
  -[JFXCompositionPlayerViewController playbackAreaDoubleTapped:]
  -[JFXCompositionPlayerViewController playbackReadyForDisplayChanged:isReady:setPlaceHolder:]
  -[JFXCompositionPlayerViewController setPlaybackTimeChangedObserverInterval:]
  -[JFXCompositionPlayerViewController playbackTimeChangedObserverInterval]
  -[JFXCompositionPlayerViewController playerWillBeDestroyed:]
  -[JFXCompositionPlayerViewController resetPlaybackTimeChangedObserverInterval]
  -[JFXCompositionPlayerViewController contentModeToVideoGravity:]
  -[JFXCompositionPlayerViewController playerViewer]
  -[JFXCompositionPlayerViewController setRestoreToColor:]
  -[JFXCompositionPlayerViewController updateDelegatePlayer]
  -[JFXCompositionPlayerViewController lastPlayerViewSize]
  -[JFXCompositionPlayerViewController setLastPlayerViewSize:]
  -[JFXCompositionPlayerViewController clipsPlayer]
  -[JFXCompositionPlayerViewController reloadClipDataSourceOnBecomingActive]
  -[JFXCompositionPlayerViewController unloadCompositionSetPlaceHolder:]
  -[JFXCompositionPlayerViewController preparePlaceHolder]
  -[JFXCompositionPlayerViewController setCachedCurrentTime:]
  -[JFXCompositionPlayerViewController setCachedMuted:]
  -[JFXCompositionPlayerViewController renderSizeInPixels]
  -[JFXCompositionPlayerViewController setCachedRenderSizeInPixels:]
  -[JFXCompositionPlayerViewController placeHolderView]
  -[JFXCompositionPlayerViewController setClipsPlayer:]
  -[JFXCompositionPlayerViewController reloadClipDataSource]
  -[JFXCompositionPlayerViewController reloadClipDataSourceIfNeeded]
  -[JFXCompositionPlayerViewController isReloadClipDataSourceNeeded]
  -[JFXCompositionPlayerViewController cachedCurrentTime]
  -[JFXCompositionPlayerViewController cachedMuted]
  -[JFXCompositionPlayerViewController beginFlash]
  -[JFXCompositionPlayerViewController endFlash]
  -[JFXCompositionPlayerViewController setNeedsCompositionUpdate]
  -[JFXCompositionPlayerViewController videoDisplayOverlayView]
  -[JFXCompositionPlayerViewController setVideoDisplayOverlayView:]
  -[JFXCompositionPlayerViewController updateCachedPlaybackProperties]
  -[JFXCompositionPlayerViewController unloadClipDataSourceSetPlaceHolder:]
  -[JFXCompositionPlayerViewController placeholderContainerView]
  -[JFXCompositionPlayerViewController setPlaceHolderView:]
  -[JFXCompositionPlayerViewController setDontRemovePlaceHolderOnDisplay:]
  -[JFXCompositionPlayerViewController addPlaceHolder]
  -[JFXCompositionPlayerViewController dontRemovePlaceHolderOnDisplay]
  -[JFXCompositionPlayerViewController cachedRenderSizeInPixels]
  -[JFXCompositionPlayerViewController shouldHandleMediaServerCrash]
  -[JFXCompositionPlayerViewController cachedWasPlaying]
  -[JFXCompositionPlayerViewController setCachedWasPlaying:]
  -[JFXCompositionPlayerViewController playerBecameReadyForDisplayChanged:setPlaceHolder:]
  -[JFXCompositionPlayerViewController removePlaceHolder]
  -[JFXCompositionPlayerViewController prepareVideoDisplayView]
  -[JFXCompositionPlayerViewController setLastPlayerViewBoundsSize:]
  -[JFXCompositionPlayerViewController updateVideoDisplayViewBounds]
  -[JFXCompositionPlayerViewController disableVideoDisplayGestures]
  -[JFXCompositionPlayerViewController installVideoDisplayGestures]
  -[JFXCompositionPlayerViewController lastPlayerViewBoundsSize]
  -[JFXCompositionPlayerViewController playerViewBoundsSize]
  -[JFXCompositionPlayerViewController playbackAreaTapped:]
  -[JFXCompositionPlayerViewController playbackAreaPanned:]
  -[JFXCompositionPlayerViewController playbackAreaPinched:]
  -[JFXCompositionPlayerViewController playbackAreaRotated:]
  -[JFXCompositionPlayerViewController convertPointInPlaybackSizeToClipPointNormalized:]
  -[JFXCompositionPlayerViewController normalizedMinimumTouchSize]
  -[JFXCompositionPlayerViewController viewToFlash]
  -[JFXCompositionPlayerViewController setViewFlashed:]
  -[JFXCompositionPlayerViewController viewFlashed]
  -[JFXCompositionPlayerViewController restoreToColor]
  -[JFXCompositionPlayerViewController setNeedsCompositionUpdateForClip:]
  -[JFXCompositionPlayerViewController displayPlaceHolder]
  -[JFXCompositionPlayerViewController setPlaybackTimeChangeNotificationPeriod:]
  -[JFXCompositionPlayerViewController videoDisplayBounds]
  -[JFXCompositionPlayerViewController convertPointInPlaybackSizeToClipPoint:]
  -[JFXCompositionPlayerViewController setDisableVideoDisplayGestures:]


CFXCaptureViewController : UIViewController <CFXEffectEditorViewDelegate, CFXFullScreenTextEditViewControllerDelegate, JFXPassThroughContainerViewDelegate, CAMControlVisibilityUpdateDelegate, CAMZoomControlDelegate, CAMZoomSliderDelegate, JFXAnimojiTrackingLossDelegate, CAMDynamicShutterControlDelegate, CAMControlStatusBarDelegate, CFXLiveCaptureViewControllerDelegate, CFXCameraControlsViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView *cameraControlsContainerView
 @property  NSLayoutConstraint *topBarTopConstraint
 @property  NSLayoutConstraint *topBarContaineHeightConstraint
 @property  CAMTopBar *topBar
 @property  CAMElapsedTimeView *elapsedTimeView
 @property  PUReviewScreenDoneButton *doneButton
 @property  CAMFlashButton *flashButton
 @property  CFXViewfinderFlipTransition *viewfinderFlipTransition
 @property  CAMSnapshotView *liveCaptureContainerSnapshot
 @property  CAMZoomControl *zoomControl
 @property  CAMZoomSlider *zoomSlider
 @property  double zoomFactorAtPinchStart
 @property  BOOL isRecording
 @property  BOOL observingOrientationChanges
 @property  unsigned long appliedDirectOverlayEditingGestures
 @property  BOOL dockIsMagnified
 @property  double dockMagnifiedHeightDelta
 @property  CFXEffectBrowserContentPresenterViewController *effectBrowserContentPresenterViewController
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} zoomControlFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} zoomSliderFrame
 @property  BOOL captureContainerUncroppedFrameWasCalculatedWithContentRect
 @property  BOOL cameraIsFlipping
 @property  JFXPassThroughContainerView *effectEditorContainerView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} presentationRect
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} externalUncroppedPresentationRect
 @property  BOOL configuredForOrientation
 @property  CFXFaceReticleView *animojiTrackingLossReticle
 @property  UIView *animojiReticleFacePromptView
 @property  BOOL isShowingAnimojiReticle
 @property  NSLayoutConstraint *facePromptLabelYConstraint
 @property  UIView *presentationView
 @property  CAMViewfinderReticleView *reticleView
 @property  UIView *bottomControlsContainer
 @property  CAMDynamicShutterControl *dynamicShutterControl
 @property  CAMControlStatusBar *controlStatusBar
 @property  {?=qqqqBBqqq} dynamicShutterSettings
 @property  BOOL switchedToVideoMode
 @property  JFXThreadSafeArray *runOnceAnimatedOverlays
 @property  CFXLiveCaptureViewController *cameraViewController
 @property  NSObject<OS_dispatch_group> *editingOverlayWithGestureGroup
 @property  CFXEffectEditorView *effectEditor
 @property  <CFXCaptureViewControllerDelegate> *delegate
 @property  CFXControlsViewController *cameraControls
 @property  long long aspectRatioCrop
 @property  double userInterfaceAlpha
 @property  long long captureMode
 @property  long long flashMode
 @property  CFXEffectComposition *composition
 @property  UIView *effectsPickerDrawer
 @property  BOOL useLocalCameraViewfinder
 @property  BOOL livePlayerIsSaturated
 @property  UIView *nonTransformedContainerView
 @property  NSLayoutConstraint *captureControlsContainerHeightConstraint
 @property  NSLayoutConstraint *captureControlsContainerWidthConstraint
 @property  NSLayoutConstraint *captureControlsContainerTrailingConstraint
 @property  NSLayoutConstraint *captureControlsContainerLeadingConstraint
 @property  NSLayoutConstraint *captureControlsContainerTopConstraint
 @property  UIView *liveCaptureContainer
 @property  UIView *liveCaptureContainerContainer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXCaptureViewController zoomSliderDidBeginAutozooming:]
  -[CFXCaptureViewController dynamicShutterControlGesturesDidBegin:]
  -[CFXCaptureViewController canToggleBetweenZoomFactorsForZoomControl:]
  -[CFXCaptureViewController dynamicShutterControlDidPresentCounter:]
  -[CFXCaptureViewController setFlashMode:]
  -[CFXCaptureViewController dynamicShutterControlDidStop:]
  -[CFXCaptureViewController flashMode]
  -[CFXCaptureViewController zoomControl:didChangeZoomFactor:interactionType:]
  -[CFXCaptureViewController isRecording]
  -[CFXCaptureViewController zoomSliderDidEndAutozooming:]
  -[CFXCaptureViewController controlStatusBar:didCreateIndicatorForType:]
  -[CFXCaptureViewController dynamicShutterControlGesturesDidCancel:]
  -[CFXCaptureViewController shutterControlTouchAttemptedWhileDisabled:]
  -[CFXCaptureViewController topBar]
  -[CFXCaptureViewController dynamicShutterControlDidShortPress:]
  -[CFXCaptureViewController updateControlVisibilityAnimated:]
  -[CFXCaptureViewController toggleBetweenZoomFactorsForZoomControl:]
  -[CFXCaptureViewController composition]
  -[CFXCaptureViewController .cxx_destruct]
  -[CFXCaptureViewController viewDidLoad]
  -[CFXCaptureViewController doneButton]
  -[CFXCaptureViewController presentationRect]
  -[CFXCaptureViewController setDelegate:]
  -[CFXCaptureViewController viewDidAppear:]
  -[CFXCaptureViewController zoomSlider]
  -[CFXCaptureViewController setDoneButton:]
  -[CFXCaptureViewController zoomSliderDidEndZooming:]
  -[CFXCaptureViewController setZoomSlider:]
  -[CFXCaptureViewController setElapsedTimeView:]
  -[CFXCaptureViewController setCaptureMode:]
  -[CFXCaptureViewController setZoomControl:]
  -[CFXCaptureViewController viewWillDisappear:]
  -[CFXCaptureViewController dynamicShutterControlGesturesDidEnd:]
  -[CFXCaptureViewController doneButtonTapped:]
  -[CFXCaptureViewController viewWillAppear:]
  -[CFXCaptureViewController shouldPerformSegueWithIdentifier:sender:]
  -[CFXCaptureViewController prepareForSegue:sender:]
  -[CFXCaptureViewController setAspectRatioCrop:]
  -[CFXCaptureViewController setFlashButton:]
  -[CFXCaptureViewController dynamicShutterControlDidDismissCounter:]
  -[CFXCaptureViewController elapsedTimeView]
  -[CFXCaptureViewController delegate]
  -[CFXCaptureViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[CFXCaptureViewController controlStatusBar:didReceiveTapInIndicatorForType:]
  -[CFXCaptureViewController startVideoRecording]
  -[CFXCaptureViewController dynamicShutterControlDidPressLockButton:]
  -[CFXCaptureViewController setTopBar:]
  -[CFXCaptureViewController dealloc]
  -[CFXCaptureViewController flashButton]
  -[CFXCaptureViewController setCameraViewController:]
  -[CFXCaptureViewController cameraViewController]
  -[CFXCaptureViewController presentationView]
  -[CFXCaptureViewController resign]
  -[CFXCaptureViewController setComposition:]
  -[CFXCaptureViewController zoomControl]
  -[CFXCaptureViewController captureMode]
  -[CFXCaptureViewController aspectRatioCrop]
  -[CFXCaptureViewController flashModeDidChange]
  -[CFXCaptureViewController setEffectsPickerDrawer:]
  -[CFXCaptureViewController setIsRecording:]
  -[CFXCaptureViewController handlePinchGestureRecognizer:]
  -[CFXCaptureViewController controlStatusBar]
  -[CFXCaptureViewController dynamicShutterControlDidStart:]
  -[CFXCaptureViewController setPresentationView:]
  -[CFXCaptureViewController setPresentationRect:]
  -[CFXCaptureViewController effectsPickerDrawer]
  -[CFXCaptureViewController updateUIForDockMagnify:dockHeightDelta:]
  -[CFXCaptureViewController effectBrowserContentPresenterViewController]
  -[CFXCaptureViewController cameraDidStop]
  -[CFXCaptureViewController updateUIForDevicePosition:]
  -[CFXCaptureViewController cameraControls]
  -[CFXCaptureViewController setCaptureControlsContainerTopConstraint:]
  -[CFXCaptureViewController setCaptureControlsContainerLeadingConstraint:]
  -[CFXCaptureViewController setCaptureControlsContainerTrailingConstraint:]
  -[CFXCaptureViewController setCaptureControlsContainerWidthConstraint:]
  -[CFXCaptureViewController setCaptureControlsContainerHeightConstraint:]
  -[CFXCaptureViewController setLiveCaptureViewController:]
  -[CFXCaptureViewController liveCaptureContainer]
  -[CFXCaptureViewController liveCaptureContainerContainer]
  -[CFXCaptureViewController setLiveCaptureContainer:]
  -[CFXCaptureViewController setLiveCaptureContainerContainer:]
  -[CFXCaptureViewController setNonTransformedContainerView:]
  -[CFXCaptureViewController cameraDidStart]
  -[CFXCaptureViewController nonTransformedContainerView]
  -[CFXCaptureViewController liveCaptureSnapshot]
  -[CFXCaptureViewController applyRotationTransformForPortrait]
  -[CFXCaptureViewController setUseLocalCameraViewfinder:]
  -[CFXCaptureViewController userInterfaceAlpha]
  -[CFXCaptureViewController setUserInterfaceAlpha:]
  -[CFXCaptureViewController configureUIForOrientation]
  -[CFXCaptureViewController removeLiveCaptureSnapshot]
  -[CFXCaptureViewController removeAnimojiTrackingReticle]
  -[CFXCaptureViewController showLiveCaptureSnapshotBlurred:animated:completion:]
  -[CFXCaptureViewController saveLiveCaptureSnapshotForReview]
  -[CFXCaptureViewController removeAllEffectsAnimated:]
  -[CFXCaptureViewController setLiveCapturePresentationFrame:withContentRect:]
  -[CFXCaptureViewController removeEffectsForCameraSwitch]
  -[CFXCaptureViewController livePlayerIsSaturated]
  -[CFXCaptureViewController willDropCameraFrame]
  -[CFXCaptureViewController addOverlayEffect:atScreenLocation:atScreenSize:rotationAngle:]
  -[CFXCaptureViewController removeAllEffectsOfType:animated:]
  -[CFXCaptureViewController addEffect:]
  -[CFXCaptureViewController updateUIForVideoRecording:]
  -[CFXCaptureViewController addOverlayEffect:atNormalizedPlanePoint:scale:rotationAngle:]
  -[CFXCaptureViewController addEffect:allowImmediateTextEditing:]
  -[CFXCaptureViewController liveCaptureViewController:didRenderFrame:]
  -[CFXCaptureViewController useLocalCameraViewfinder]
  -[CFXCaptureViewController stopVideoRecording:]
  -[CFXCaptureViewController liveCaptureViewController:livePreviewTappedAtNormalizedPoint:]
  -[CFXCaptureViewController liveCaptureViewController:livePreviewPannedAtNormalizedPoint:gesture:]
  -[CFXCaptureViewController liveCaptureViewController:livePreviewPinchedAtNormalizedCenterPoint:gesture:]
  -[CFXCaptureViewController liveCaptureViewController:livePreviewRotatedAtNormalizedCenterPoint:gesture:]
  -[CFXCaptureViewController liveCaptureViewController:livePreviewDoubleTappedAtNormalizedCenterPoint:gesture:]
  -[CFXCaptureViewController shouldShowAnimojiFaceReticle]
  -[CFXCaptureViewController hideAnimojiFaceReticleForTrackingGain]
  -[CFXCaptureViewController setupAnimojiFaceReticleForTrackingLoss]
  -[CFXCaptureViewController showAnimojiFaceReticleForTrackingLoss]
  -[CFXCaptureViewController insertCamBottomBar:]
  -[CFXCaptureViewController doneButtonForCameraControlsViewController:]
  -[CFXCaptureViewController flashButtonForCameraControlsViewController:]
  -[CFXCaptureViewController JFX_orientationMonitorInterfaceOrientationNotification:]
  -[CFXCaptureViewController needsBlackBackgroundForCTMControls]
  -[CFXCaptureViewController bottomBarCTMControlsFrameForWindowOrientation:bounds:]
  -[CFXCaptureViewController dockIsMagnified]
  -[CFXCaptureViewController setDockIsMagnified:]
  -[CFXCaptureViewController setDockMagnifiedHeightDelta:]
  -[CFXCaptureViewController cameraControlsViewControllerEffectsButtonWasTapped:]
  -[CFXCaptureViewController cameraControlsViewControllerShutterButtonWasTapped:]
  -[CFXCaptureViewController cameraControlsViewControllerSwitchCameraButtonWasTapped:]
  -[CFXCaptureViewController dockMagnifiedHeightDelta]
  -[CFXCaptureViewController CFX_setFrameAndRenderSizes]
  -[CFXCaptureViewController setAppliedDirectOverlayEditingGestures:]
  -[CFXCaptureViewController CFX_canApplyFaceTracking]
  -[CFXCaptureViewController presentFullScreenTextEditorForEffect:insertingEffect:]
  -[CFXCaptureViewController displayEffectEditorForEffect:forMode:]
  -[CFXCaptureViewController appliedDirectOverlayEditingGestures]
  -[CFXCaptureViewController effectEditor]
  -[CFXCaptureViewController isEditingEffect]
  -[CFXCaptureViewController setEffectEditor:]
  -[CFXCaptureViewController updateEffectEditorLayout]
  -[CFXCaptureViewController updateFullScreenTextEditorLayout]
  -[CFXCaptureViewController shouldUseFaceTracking]
  -[CFXCaptureViewController isFaceTrackingDataAvailable]
  -[CFXCaptureViewController setEffectBrowserContentPresenterViewController:]
  -[CFXCaptureViewController fullScreenTextEditViewController:shouldDisableEditingAnimationForEffect:]
  -[CFXCaptureViewController fullScreenTextEditViewController:didBeginEditingEffect:]
  -[CFXCaptureViewController fullScreenTextEditViewController:didFinishEditingEffect:withUpdatedText:]
  -[CFXCaptureViewController fullScreenTextEditViewController:didFinishEditingByRemovingEffect:]
  -[CFXCaptureViewController fullScreenTextEditViewController:willBeginAnimationBeforeEditingEffect:]
  -[CFXCaptureViewController fullScreenTextEditViewController:didBeginAnimationBeforeEditingEffect:completion:]
  -[CFXCaptureViewController fullScreenTextEditViewController:willBeginAnimationAfterEditingEffect:updatedText:]
  -[CFXCaptureViewController fullScreenTextEditViewController:didFinishAnimationAfterEditingEffect:completion:]
  -[CFXCaptureViewController faceTrackingInterfaceOrientationForfullScreenTextEditViewController:]
  -[CFXCaptureViewController effectEditorView:effectAtPoint:]
  -[CFXCaptureViewController effectEditorView:isEffectAtPoint:effect:]
  -[CFXCaptureViewController effectEditorView:frameForEffect:relativeToBounds:]
  -[CFXCaptureViewController effectEditorView:hitAreaBoundingFrameForEffect:adjustForMinimumSize:relativeToBounds:]
  -[CFXCaptureViewController effectEditorView:overlayEffectFrameForEffect:relativeToBounds:]
  -[CFXCaptureViewController effectEditorView:removeButtonPositionForEffect:relativeToBounds:]
  -[CFXCaptureViewController effectEditorView:isFaceTrackingEffect:]
  -[CFXCaptureViewController effectEditorView:isFaceTrackingDataAvailableForEffect:]
  -[CFXCaptureViewController effectEditorView:spacingBetweenCenterPointOfEffect:point:relativeToBounds:]
  -[CFXCaptureViewController effectEditorView:didTransformEffect:transform:relativeToBounds:]
  -[CFXCaptureViewController effectEditorView:shouldEditTextForEffect:]
  -[CFXCaptureViewController effectEditorView:didBeginEditingTextForEffect:]
  -[CFXCaptureViewController effectEditorView:textEditingPropertiesForEffect:relativeToBounds:]
  -[CFXCaptureViewController effectEditorView:textForEffect:]
  -[CFXCaptureViewController effectEditorView:didEditTextForEffect:newText:]
  -[CFXCaptureViewController effectEditorView:didEndEditingTextForEffect:wasCancelled:]
  -[CFXCaptureViewController effectEditorView:didRemoveEffect:]
  -[CFXCaptureViewController effectEditorViewDidBeginEditing:]
  -[CFXCaptureViewController effectEditorViewDidEndEditing:]
  -[CFXCaptureViewController effectEditorView:didEndEditingEffect:]
  -[CFXCaptureViewController effectEditorView:didMoveEffect:withTouchPoint:]
  -[CFXCaptureViewController effectEditorView:presentCustomTextEditingUI:]
  -[CFXCaptureViewController effectEditorView:maximumTextLengthForEffect:]
  -[CFXCaptureViewController effectEditorViewShouldShowFaceReticle:]
  -[CFXCaptureViewController passThroughContainerView:shouldHandleTouchWithinView:atPoint:]
  -[CFXCaptureViewController JFX_orientationMonitorDeviceInterfaceOrientationNotification:]
  -[CFXCaptureViewController setZoomControlFrame:]
  -[CFXCaptureViewController setZoomSliderFrame:]
  -[CFXCaptureViewController setIsShowingAnimojiReticle:]
  -[CFXCaptureViewController setObservingOrientationChanges:]
  -[CFXCaptureViewController topBarContaineHeightConstraint]
  -[CFXCaptureViewController topBarTopConstraint]
  -[CFXCaptureViewController setEditingOverlayWithGestureGroup:]
  -[CFXCaptureViewController zoomSliderValueDidChange:forEvent:]
  -[CFXCaptureViewController updateZoomUIVisibility]
  -[CFXCaptureViewController isMessagesOnPhone]
  -[CFXCaptureViewController cameraControlsContainerView]
  -[CFXCaptureViewController setConfiguredForOrientation:]
  -[CFXCaptureViewController setSwitchedToVideoMode:]
  -[CFXCaptureViewController setDynamicShutterControl:]
  -[CFXCaptureViewController dynamicShutterControl]
  -[CFXCaptureViewController setDynamicShutterSettings:]
  -[CFXCaptureViewController setBottomControlsContainer:]
  -[CFXCaptureViewController bottomControlsContainer]
  -[CFXCaptureViewController setControlStatusBar:]
  -[CFXCaptureViewController configureCTMUIForCaptureMode]
  -[CFXCaptureViewController setReticleView:]
  -[CFXCaptureViewController reticleView]
  -[CFXCaptureViewController setRunOnceAnimatedOverlays:]
  -[CFXCaptureViewController updateTopBar]
  -[CFXCaptureViewController configureUIForWindowOrientation:bounds:]
  -[CFXCaptureViewController CFX_applyAutoRotationCorrectionToEditorViews]
  -[CFXCaptureViewController runOnceAnimatedOverlays]
  -[CFXCaptureViewController externalUncroppedPresentationRect]
  -[CFXCaptureViewController CFX_generateAutoRotationCorrectionFrameWithInterfaceOrientation:]
  -[CFXCaptureViewController effectEditorContainerView]
  -[CFXCaptureViewController updateAnimojiTrackingReticleAndLabelLayout]
  -[CFXCaptureViewController applyAutoRotationCorrectionToEditorViewsWithTransitionCoordinator:]
  -[CFXCaptureViewController setCameraControls:]
  -[CFXCaptureViewController layoutZoomUI]
  -[CFXCaptureViewController captureControlsContainerTopConstraint]
  -[CFXCaptureViewController captureControlsContainerWidthConstraint]
  -[CFXCaptureViewController captureControlsContainerHeightConstraint]
  -[CFXCaptureViewController captureControlsContainerLeadingConstraint]
  -[CFXCaptureViewController captureControlsContainerTrailingConstraint]
  -[CFXCaptureViewController configuredForOrientation]
  -[CFXCaptureViewController CFX_captureFlashModeForCAMFlashMode:]
  -[CFXCaptureViewController CFX_camFlashModeForCaptureFlashMode:]
  -[CFXCaptureViewController CFX_captureTorchModeForCAMFlashMode:]
  -[CFXCaptureViewController setTorchModeForFlashMode:]
  -[CFXCaptureViewController observingOrientationChanges]
  -[CFXCaptureViewController removeEffectEditorAnimated:]
  -[CFXCaptureViewController enableAnimationForOverlayEffect:]
  -[CFXCaptureViewController effectCompositionDidChange:]
  -[CFXCaptureViewController overlayTransformForLocalViewfinder]
  -[CFXCaptureViewController CFX_addEffect:allowImmediateTextEditing:]
  -[CFXCaptureViewController liveCaptureContainerSnapshot]
  -[CFXCaptureViewController setLiveCaptureContainerSnapshot:]
  -[CFXCaptureViewController setExternalUncroppedPresentationRect:]
  -[CFXCaptureViewController setCaptureContainerUncroppedFrameWasCalculatedWithContentRect:]
  -[CFXCaptureViewController configureZoomControl]
  -[CFXCaptureViewController CFX_isZoomAllowed]
  -[CFXCaptureViewController CFX_getCaptureDevice:captureDevicePosition:captureMode:]
  -[CFXCaptureViewController CFX_getCAMCaptureForPosition:type:captureDevice:captureDevicePosition:captureMode:]
  -[CFXCaptureViewController zoomControlFrame]
  -[CFXCaptureViewController layoutZoomControlForCTM]
  -[CFXCaptureViewController layoutZoomSliderRelativeToBottomBarAndPreview]
  -[CFXCaptureViewController layoutZoomControlRelativeToBottomBarAndPreview:]
  -[CFXCaptureViewController zoomSliderFrame]
  -[CFXCaptureViewController CFX_handleZoomPinchGestureRecognizer:]
  -[CFXCaptureViewController CFX_maxZoomForCamera]
  -[CFXCaptureViewController CFX_setZoomSliderFromZoomFactor:]
  -[CFXCaptureViewController cameraIsFlipping]
  -[CFXCaptureViewController setCameraIsFlipping:]
  -[CFXCaptureViewController CFX_respondToShutterPress]
  -[CFXCaptureViewController setViewfinderFlipTransition:]
  -[CFXCaptureViewController viewfinderFlipTransition]
  -[CFXCaptureViewController CFX_isRenderingAnimatedOverlaysThatDontLoop]
  -[CFXCaptureViewController isShowingAnimojiReticle]
  -[CFXCaptureViewController setAnimojiTrackingLossReticle:]
  -[CFXCaptureViewController animojiTrackingLossReticle]
  -[CFXCaptureViewController animojiReticleFacePromptView]
  -[CFXCaptureViewController setupFaceInViewPromptLabel]
  -[CFXCaptureViewController setAnimojiReticleFacePromptView:]
  -[CFXCaptureViewController setFacePromptLabelYConstraint:]
  -[CFXCaptureViewController facePromptLabelYConstraint]
  -[CFXCaptureViewController fadeInFaceInViewPromptLabel]
  -[CFXCaptureViewController fadeOutFaceInViewPromptLabel]
  -[CFXCaptureViewController captureContainerUncroppedFrameWasCalculatedWithContentRect]
  -[CFXCaptureViewController setEffectEditorContainerView:]
  -[CFXCaptureViewController CFX_cameraViewFinderUncroppedFrame]
  -[CFXCaptureViewController CFX_adjustOverlaysForCaptureOrientationChanged:oldCaptureOrientation:]
  -[CFXCaptureViewController CFX_performBackCameraZoomWithPinchGestureRecognizer:]
  -[CFXCaptureViewController CFX_performFrontCameraZoomWithPinchGestureRecognizer:]
  -[CFXCaptureViewController setZoomFactorAtPinchStart:]
  -[CFXCaptureViewController zoomFactorAtPinchStart]
  -[CFXCaptureViewController switchedToVideoMode]
  -[CFXCaptureViewController CFX_hideAppStripUpperBackgroundView:]
  -[CFXCaptureViewController completedVideoRecordWithURL:metadataURL:]
  -[CFXCaptureViewController editingOverlayWithGestureGroup]
  -[CFXCaptureViewController updateZoomUIForCapturing:animated:]
  -[CFXCaptureViewController JFX_capturePhoto]
  -[CFXCaptureViewController dynamicShutterSettings]
  -[CFXCaptureViewController dynamicShutterControlStopLockedRecording]
  -[CFXCaptureViewController toggleCTMFlashButton]
  -[CFXCaptureViewController captureInterfaceOrientationForDisplay]
  -[CFXCaptureViewController configureWithControlsViewController:]
  -[CFXCaptureViewController flashButtonTapped:]
  -[CFXCaptureViewController CFX_toggleCaptureUI]
  -[CFXCaptureViewController returnCTMUIToPhotoMode]
  -[CFXCaptureViewController setCameraControlsContainerView:]
  -[CFXCaptureViewController setTopBarTopConstraint:]
  -[CFXCaptureViewController setTopBarContaineHeightConstraint:]
  -[CFXCaptureViewController CFX_executeBlockAfterNextFrameRendered:]


CFXPickerSession : NSObject
 @property  NSDate *sessionStartTime
 @property  NSDate *lastCompactPresentationTime
 @property  NSDate *lastExpandedPresentationTime
 @property  ^d totalCompactPresentationDuration
 @property  ^d totalExpandedPresentationDuration
 @property  BOOL didModifyEffectsStack
 @property  BOOL didRemoveEffect
 @property  NSString *typeOfRemovedEffect
 @property  NSString *pickerBundleIdentifier
 @property  double sessionDuration
 @property  BOOL isCompactPresentation
 @property  BOOL isExpandedPresentation
 @property  double compactPresentationDuration
 @property  double expandedPresentationDuration
 @property  BOOL didScroll
 @property  NSDictionary *effectChangesDict

  // instance methods
  -[CFXPickerSession sessionDuration]
  -[CFXPickerSession sessionStartTime]
  -[CFXPickerSession .cxx_destruct]
  -[CFXPickerSession didScroll]
  -[CFXPickerSession didDismiss]
  -[CFXPickerSession setDidScroll:]
  -[CFXPickerSession initWithIdentifier:isCompact:]
  -[CFXPickerSession didChangePresentationMode]
  -[CFXPickerSession didModifyEffectOfType:wasRemoval:]
  -[CFXPickerSession pickerBundleIdentifier]
  -[CFXPickerSession isCompactPresentation]
  -[CFXPickerSession compactPresentationDuration]
  -[CFXPickerSession expandedPresentationDuration]
  -[CFXPickerSession effectChangesDict]
  -[CFXPickerSession didModifyEffectsStack]
  -[CFXPickerSession didRemoveEffect]
  -[CFXPickerSession typeOfRemovedEffect]
  -[CFXPickerSession lastCompactPresentationTime]
  -[CFXPickerSession setLastCompactPresentationTime:]
  -[CFXPickerSession setLastExpandedPresentationTime:]
  -[CFXPickerSession lastExpandedPresentationTime]
  -[CFXPickerSession setDidModifyEffectsStack:]
  -[CFXPickerSession setDidRemoveEffect:]
  -[CFXPickerSession setTypeOfRemovedEffect:]
  -[CFXPickerSession isExpandedPresentation]
  -[CFXPickerSession totalCompactPresentationDuration]
  -[CFXPickerSession setTotalCompactPresentationDuration:]
  -[CFXPickerSession totalExpandedPresentationDuration]
  -[CFXPickerSession setTotalExpandedPresentationDuration:]


CFXRenderer : NSObject <PVLivePlayerDelegate>
 @property  long long captureMode
 @property  long long cameraMode
 @property  JFXPixelRotationSession *pixelRotationSession
 @property  JFXMetadataValidator *metadataValidator
 @property  <CFXRendererDelegate> *delegate
 @property  PVLivePlayer *livePlayer
 @property  BOOL livePlayerIsSaturated
 @property  PVLivePlayerCameraSource *cameraSource
 @property  JFXAnimojiEffectRenderer *animojiRenderer
 @property  JTFrameRateCalculator *fpsCalc
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXRenderer initialize]

  // instance methods
  -[CFXRenderer shutdown]
  -[CFXRenderer .cxx_destruct]
  -[CFXRenderer setDelegate:]
  -[CFXRenderer flush]
  -[CFXRenderer pause]
  -[CFXRenderer setCaptureMode:]
  -[CFXRenderer delegate]
  -[CFXRenderer resume]
  -[CFXRenderer dealloc]
  -[CFXRenderer fpsCalc]
  -[CFXRenderer captureMode]
  -[CFXRenderer cameraSource]
  -[CFXRenderer setCameraSource:]
  -[CFXRenderer cameraMode]
  -[CFXRenderer initWithDelegate:captureMode:]
  -[CFXRenderer metadataValidator]
  -[CFXRenderer livePlayerIsSaturated]
  -[CFXRenderer willDropCameraFrame]
  -[CFXRenderer setMetadataValidator:]
  -[CFXRenderer renderFrame:effectComposition:]
  -[CFXRenderer setTrackingLossDelegate:]
  -[CFXRenderer animojiRenderer]
  -[CFXRenderer resetMetadataValidation]
  -[CFXRenderer setAnimojiRenderer:]
  -[CFXRenderer CFX_getPreviewColorSpace]
  -[CFXRenderer livePlayer]
  -[CFXRenderer CFX_PVFrameSetFromCFXFrame:]
  -[CFXRenderer CFX_JTEffectsFromCFXEffectComposition:forRenderTime:]
  -[CFXRenderer buildRenderRequest:time:]
  -[CFXRenderer renderRequestComplete:results:completedOutOfOrder:]
  -[CFXRenderer livePlayerDroppedFrame:sources:time:]
  -[CFXRenderer pixelRotationSession]
  -[CFXRenderer setPixelRotationSession:]
  -[CFXRenderer setLivePlayer:]


JTLayer : CALayer
 @property  BOOL debuggingUIEnabled

  // instance methods
  -[JTLayer debuggingUIEnabled]
  -[JTLayer setDebuggingUIEnabled:]
  -[JTLayer initWithDebugEnabled]


CFXDefaultThermalPolicy : JFXCameraFPSThermalPolicy
  // instance methods
  -[CFXDefaultThermalPolicy priority]
  -[CFXDefaultThermalPolicy cameraFPSForThermalLevel:deviceType:minRate:maxRate:]


CFXThermalPolicyManager : NSObject <JFXVideoCameraThermalDelegate>
 @property  JFXThermalPolicyManager *policyManager
 @property  BOOL recordingPolicy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXThermalPolicyManager .cxx_destruct]
  -[CFXThermalPolicyManager init]
  -[CFXThermalPolicyManager cameraFPSForThermalLevel:deviceType:minRate:maxRate:]
  -[CFXThermalPolicyManager setRecordingPolicy:]
  -[CFXThermalPolicyManager policyManager]
  -[CFXThermalPolicyManager CFX_notifyPolicyChanged]
  -[CFXThermalPolicyManager recordingPolicy]
  -[CFXThermalPolicyManager setPolicyManager:]


JFXDepthCompressor : NSObject
 @property  int depthCodecType

  // class methods
  +[JFXDepthCompressor decapsulatePayload:]
  +[JFXDepthCompressor encapsulatePayload:]
  +[JFXDepthCompressor NSDataFromFloatDepth32:]
  +[JFXDepthCompressor NSDataFromDepthMapInsideAVDepthData:]
  +[JFXDepthCompressor fakeXMPDataIfNotFound]
  +[JFXDepthCompressor fakeAuxDepthInfoDictionaryForCVPixelBuffer:]

  // instance methods
  -[JFXDepthCompressor .cxx_destruct]
  -[JFXDepthCompressor dealloc]
  -[JFXDepthCompressor depthCodecType]
  -[JFXDepthCompressor initWithDepthCodecType:]
  -[JFXDepthCompressor depthOutputSettingsForDepthDimensions:]
  -[JFXDepthCompressor depthFormatDescriptionForDepthDimensions:]
  -[JFXDepthCompressor compressAVDepthData:timingInfo:error:]
  -[JFXDepthCompressor compressDepthMapCVPixelBuffer:timingInfo:error:]
  -[JFXDepthCompressor compressAVDepthData_Photo:timingInfo:error:]
  -[JFXDepthCompressor compressAVDepthData_LZ:timingInfo:error:]
  -[JFXDepthCompressor compressAVDepthData_BGRA:timingInfo:error:]
  -[JFXDepthCompressor compressAVDepthData_HEVC10:timingInfo:error:]
  -[JFXDepthCompressor getPayloadTypeOrSize:offsetPointer:]
  -[JFXDepthCompressor hevcSEIPayloadHeaderForPayloadType:payloadSize:]
  -[JFXDepthCompressor mutableCopyExtensionsDictionaryCopyFromAVDepthData:]
  -[JFXDepthCompressor hevcSEIMessageDataWithDepthXMPMetadata:isPrefixSEI:nuh_layer_id:nuh_temporal_id_plus1:]
  -[JFXDepthCompressor depthSampleBufferAppendingDepthMetadata:depthSampleBufferFromCodec:]
  -[JFXDepthCompressor copyDepthBufferAsBGRA:]
  -[JFXDepthCompressor hevcSEIPayload:]
  -[JFXDepthCompressor depthSampleBufferWithNewHVCCWithDepthMetadata:depthSampleBufferFromCodec:]


JFXDepthDecompressor : NSObject
 @property  int depthCodecType

  // class methods
  +[JFXDepthDecompressor trackOptionsForDepthCodecType:error:]
  +[JFXDepthDecompressor bitDepthOf:]
  +[JFXDepthDecompressor NSDataWithCMBlockBuffer:range:]
  +[JFXDepthDecompressor dataWithCMSampleBuffer:]

  // instance methods
  -[JFXDepthDecompressor .cxx_destruct]
  -[JFXDepthDecompressor init]
  -[JFXDepthDecompressor dealloc]
  -[JFXDepthDecompressor decompressAVDepthData:error:]
  -[JFXDepthDecompressor depthCodecType]
  -[JFXDepthDecompressor decompressAVDepthData_BGRA:error:]
  -[JFXDepthDecompressor decompressAVDepthData_Photo:error:]
  -[JFXDepthDecompressor decompressAVDepthData_LZ:error:]
  -[JFXDepthDecompressor decompressAVDepthData_HEVC10:error:]
  -[JFXDepthDecompressor incompleteImageSourceAuxDataInfoDict:error:]


JFXSharedMediaDataReaderManager : NSObject
 @property  <JFXPlayableElement> *playableElement
 @property  JFXARMetadataMediaReader *weakSharedARMetadataReader
 @property  JFXDepthDataMediaReader *weakSharedDepthDataReader
 @property  JFXARMetadataMediaReader *sharedARMetadataReader
 @property  JFXDepthDataMediaReader *sharedDepthDataReader

  // instance methods
  -[JFXSharedMediaDataReaderManager .cxx_destruct]
  -[JFXSharedMediaDataReaderManager playableElement]
  -[JFXSharedMediaDataReaderManager sharedARMetadataReader]
  -[JFXSharedMediaDataReaderManager initWithPlayableElement:]
  -[JFXSharedMediaDataReaderManager weakSharedARMetadataReader]
  -[JFXSharedMediaDataReaderManager setWeakSharedARMetadataReader:]
  -[JFXSharedMediaDataReaderManager weakSharedDepthDataReader]
  -[JFXSharedMediaDataReaderManager setWeakSharedDepthDataReader:]
  -[JFXSharedMediaDataReaderManager sharedDepthDataReader]
  -[JFXSharedMediaDataReaderManager setPlayableElement:]


CFXEffectPickerCollectionViewCell : UICollectionViewCell
 @property  JFXImageView *imageView
 @property  JTImage *image
 @property  CFXEffect *effect
 @property  NSString *effectIdentifier

  // instance methods
  -[CFXEffectPickerCollectionViewCell imageView]
  -[CFXEffectPickerCollectionViewCell setEffect:]
  -[CFXEffectPickerCollectionViewCell effect]
  -[CFXEffectPickerCollectionViewCell image]
  -[CFXEffectPickerCollectionViewCell awakeFromNib]
  -[CFXEffectPickerCollectionViewCell .cxx_destruct]
  -[CFXEffectPickerCollectionViewCell accessibilityLabel]
  -[CFXEffectPickerCollectionViewCell accessibilityTraits]
  -[CFXEffectPickerCollectionViewCell prepareForReuse]
  -[CFXEffectPickerCollectionViewCell isAccessibilityElement]
  -[CFXEffectPickerCollectionViewCell setImage:]
  -[CFXEffectPickerCollectionViewCell setImageView:]
  -[CFXEffectPickerCollectionViewCell setEffectIdentifier:]
  -[CFXEffectPickerCollectionViewCell effectIdentifier]
  -[CFXEffectPickerCollectionViewCell configureCellAppearence]


JFXRGBDMatte : JFXMatting
  // class methods
  +[JFXRGBDMatte _defaultMatteGeneratorPrefersDepth]
  +[JFXRGBDMatte mattingDepthInputSize]

  // instance methods
  -[JFXRGBDMatte .cxx_destruct]
  -[JFXRGBDMatte dealloc]
  -[JFXRGBDMatte initForFrameSet:]
  -[JFXRGBDMatte isValidForCameraFrameSet:]
  -[JFXRGBDMatte requestMattingStatus]
  -[JFXRGBDMatte alphaMatteForFrameSet:mattingPerfState:completionHandler:]
  -[JFXRGBDMatte processAlphaMapUsingDepthAndColor:colorBuffer:]
  -[JFXRGBDMatte getDepthData:processData:]
  -[JFXRGBDMatte depthToAlphaMap:]
  -[JFXRGBDMatte localMattingHalfRGBD:colorBuffer:]
  -[JFXRGBDMatte findRectOrientationRightLeft:numContourPixels:winHeight:halfHeight:originY:sizeHeight:isRight:]
  -[JFXRGBDMatte localDepthBufferBig]
  -[JFXRGBDMatte localDepthBufferSmall]
  -[JFXRGBDMatte localDepthBuffer]
  -[JFXRGBDMatte mattingGrabCut:depthMap:colorBuffer:processWin:]
  -[JFXRGBDMatte findLocalMattingRect:processingData:mattingRect:]
  -[JFXRGBDMatte expansionOfKnownRegionsRGBD:processingData:regionWin:centerOfRow:]
  -[JFXRGBDMatte innerOuterFusion:processWin:]
  -[JFXRGBDMatte erodeAndDilateMatte:]
  -[JFXRGBDMatte makeTrimap:]
  -[JFXRGBDMatte moveLocalDepthBufferToDepthOuter:]
  -[JFXRGBDMatte grabCutWithTrimap:color:processWin:]
  -[JFXRGBDMatte localDepthBufferTemp]
  -[JFXRGBDMatte postProcessing:depthDataSmall:depthData:RGBDMatte:halfHeight:halfWidth:]
  -[JFXRGBDMatte featherMatte:]
  -[JFXRGBDMatte createInvertedMatte:]
  -[JFXRGBDMatte createTemporalFilteredMatte:]
  -[JFXRGBDMatte findDepthForFace:]


JFXTextEffectFrame : NSObject
 @property  {?=qiIq} time
 @property  BOOL forcePosterFrame
 @property  int effectOrigin
 @property  {CGSize=dd} effectSize
 @property  int origin
 @property  {CGSize=dd} relativeToSize
 @property  {PVCGPointQuad={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}} cornerPoints
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} outputROI
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} objectBounds
 @property  NSArray *hitAreaPoints
 @property  ^{CGPath=} hitAreaPath
 @property  ^{CGPath=} expandedHitAreaPath
 @property  {?=[4]} transform
 @property  {PVTransformInfo={?=}} transformInfo
 @property  JFXTextEffectTransforms *transforms
 @property  NSArray *textFrames
 @property  {CGPoint=dd} center
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} viewSpaceObjectBounds

  // class methods
  +[JFXTextEffectFrame frameWithEffect:relativeToSize:origin:time:forcePosterFrame:includeDropShadow:includeTextFrames:]

  // instance methods
  -[JFXTextEffectFrame transforms]
  -[JFXTextEffectFrame setTime:]
  -[JFXTextEffectFrame origin]
  -[JFXTextEffectFrame setOrigin:]
  -[JFXTextEffectFrame .cxx_destruct]
  -[JFXTextEffectFrame center]
  -[JFXTextEffectFrame setTransform:]
  -[JFXTextEffectFrame time]
  -[JFXTextEffectFrame transform]
  -[JFXTextEffectFrame dealloc]
  -[JFXTextEffectFrame setTransforms:]
  -[JFXTextEffectFrame outputROI]
  -[JFXTextEffectFrame initWithEffect:relativeToSize:origin:time:forcePosterFrame:includeDropShadow:includeTextFrames:]
  -[JFXTextEffectFrame setHitAreaPoints:]
  -[JFXTextEffectFrame setHitAreaPath:]
  -[JFXTextEffectFrame setExpandedHitAreaPath:]
  -[JFXTextEffectFrame textFrames]
  -[JFXTextEffectFrame relativeToSize]
  -[JFXTextEffectFrame objectBounds]
  -[JFXTextEffectFrame cornerPoints]
  -[JFXTextEffectFrame transformInfo]
  -[JFXTextEffectFrame effectSize]
  -[JFXTextEffectFrame setCornerPoints:]
  -[JFXTextEffectFrame setTransformInfo:]
  -[JFXTextEffectFrame setObjectBounds:]
  -[JFXTextEffectFrame forcePosterFrame]
  -[JFXTextEffectFrame effectOrigin]
  -[JFXTextEffectFrame hitAreaPoints]
  -[JFXTextEffectFrame viewSpaceObjectBounds]
  -[JFXTextEffectFrame setForcePosterFrame:]
  -[JFXTextEffectFrame setEffectOrigin:]
  -[JFXTextEffectFrame setEffectSize:]
  -[JFXTextEffectFrame setRelativeToSize:]
  -[JFXTextEffectFrame setOutputROI:]
  -[JFXTextEffectFrame hitAreaPath]
  -[JFXTextEffectFrame expandedHitAreaPath]
  -[JFXTextEffectFrame setTextFrames:]


JFXAnalyticsKeys : NSObject
  // class methods
  +[JFXAnalyticsKeys allIncrementScalarEvents]
  +[JFXAnalyticsKeys allDistributionEvents]
  +[JFXAnalyticsKeys allEventNames]
  +[JFXAnalyticsKeys allIncrementScalarEffectEvents]
  +[JFXAnalyticsKeys allOverrideScalarEvents]


JTAssetMediaItem : JTLocalAssetMediaItem
 @property  NSString *assetIdentifier
 @property  NSString *masterFingerprint
 @property  NSString *adjustedFingerprint
 @property  PHAsset *asset
 @property  NSURL *assetLocalURL

  // instance methods
  -[JTAssetMediaItem .cxx_destruct]
  -[JTAssetMediaItem setMasterFingerprint:]
  -[JTAssetMediaItem info]
  -[JTAssetMediaItem setAsset:]
  -[JTAssetMediaItem init]
  -[JTAssetMediaItem asset]
  -[JTAssetMediaItem isEqual:]
  -[JTAssetMediaItem assetIdentifier]
  -[JTAssetMediaItem setAssetIdentifier:]
  -[JTAssetMediaItem dealloc]
  -[JTAssetMediaItem copyWithZone:]
  -[JTAssetMediaItem masterFingerprint]
  -[JTAssetMediaItem initWithAssetIdentifier:]
  -[JTAssetMediaItem initWithInfo:delegate:]
  -[JTAssetMediaItem checkIfAssetIsMissing]
  -[JTAssetMediaItem setAssetLocalURL:]
  -[JTAssetMediaItem assetLocalURL]
  -[JTAssetMediaItem fetchAssetForce:]
  -[JTAssetMediaItem setAdjustedFingerprint:]
  -[JTAssetMediaItem adjustedFingerprint]
  -[JTAssetMediaItem reloadAsset]


JFXTextEffectEditorTransformView : UIView
 @property  JFXTextEffectEditorTextView *textView

  // instance methods
  -[JFXTextEffectEditorTransformView textView]
  -[JFXTextEffectEditorTransformView .cxx_destruct]
  -[JFXTextEffectEditorTransformView pointInside:withEvent:]
  -[JFXTextEffectEditorTransformView initWithFrame:textView:]


JFXTextEffectEditorView : UIView <UIIndirectScribbleInteractionDelegate>
 @property  JFXTextEffectEditorTextView *editField
 @property  JFXEffectTextEditingProperties *textEditingProperties
 @property  UIView *transformView
 @property  NSUUID *pencilTextEditingElementID
 @property  JFXOverlayEffectDebugViewOptions *debugOptions
 @property  UIView *debugView
 @property  NSString *text
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[JFXTextEffectEditorView endEditing]
  -[JFXTextEffectEditorView indirectScribbleInteraction:isElementFocused:]
  -[JFXTextEffectEditorView selectAll]
  -[JFXTextEffectEditorView indirectScribbleInteraction:focusElementIfNeeded:referencePoint:completion:]
  -[JFXTextEffectEditorView indirectScribbleInteraction:frameForElement:]
  -[JFXTextEffectEditorView .cxx_destruct]
  -[JFXTextEffectEditorView debugView]
  -[JFXTextEffectEditorView setDebugOptions:]
  -[JFXTextEffectEditorView transformView]
  -[JFXTextEffectEditorView setTransformView:]
  -[JFXTextEffectEditorView debugOptions]
  -[JFXTextEffectEditorView setDebugView:]
  -[JFXTextEffectEditorView text]
  -[JFXTextEffectEditorView indirectScribbleInteraction:requestElementsInRect:completion:]
  -[JFXTextEffectEditorView textEditingProperties]
  -[JFXTextEffectEditorView applyTextEditingProperties:]
  -[JFXTextEffectEditorView initWithFrame:textEditingProperties:]
  -[JFXTextEffectEditorView editField]
  -[JFXTextEffectEditorView setTextEditingProperties:]
  -[JFXTextEffectEditorView setEditField:]
  -[JFXTextEffectEditorView setPencilTextEditingElementID:]
  -[JFXTextEffectEditorView initWithFrame:textEditingProperties:textContainer:]
  -[JFXTextEffectEditorView pencilTextEditingElementID]


JFXMediaURLManager : NSObject
 @property  <JTFileURLSource> *urlSource

  // class methods
  +[JFXMediaURLManager sharedInstance]
  +[JFXMediaURLManager videoRecordingFolderURL:]
  +[JFXMediaURLManager photoExportURL:isHEIF:]
  +[JFXMediaURLManager videoExportURL:]
  +[JFXMediaURLManager capturedPhotoURL:isHEIF:]
  +[JFXMediaURLManager _tempFileURLWithDirectory:file:error:]
  +[JFXMediaURLManager _createDirectoryAtURL:error:]
  +[JFXMediaURLManager _videoExportURL:]
  +[JFXMediaURLManager _capturedPhotoURL:isHEIF:]
  +[JFXMediaURLManager _photoExportURL:isHEIF:]
  +[JFXMediaURLManager _temporaryPhotoURL:fileName:]
  +[JFXMediaURLManager _audioRecordingURL:]
  +[JFXMediaURLManager cachedExportFileURLWithError:]
  +[JFXMediaURLManager _cleanupDirectory:]
  +[JFXMediaURLManager jfx_cleanupOldProjects]
  +[JFXMediaURLManager temporaryPhotoURL:fileName:]
  +[JFXMediaURLManager audioRecordingURL:]
  +[JFXMediaURLManager cleanupTemporaryDirectories]
  +[JFXMediaURLManager ODRAssetsAreEmbedded]

  // instance methods
  -[JFXMediaURLManager .cxx_destruct]
  -[JFXMediaURLManager urlSource]
  -[JFXMediaURLManager setUrlSource:]


CFXBundleUtils : NSObject
  // class methods
  +[CFXBundleUtils isRunningMessagesExtension]
  +[CFXBundleUtils isRunningFacetime]


JFXPerfTimer : NSObject
  // instance methods
  -[JFXPerfTimer elapsedTime]
  -[JFXPerfTimer end]
  -[JFXPerfTimer init]
  -[JFXPerfTimer start]
  -[JFXPerfTimer elapsedTimeMS]


JFXMatting : NSObject
 @property  BOOL ready

  // class methods
  +[JFXMatting postNotification:]
  +[JFXMatting _defaultMatteGeneratorPrefersDepth]
  +[JFXMatting mattingDepthInputSize]
  +[JFXMatting depthDataForCVPixelBuffer:]
  +[JFXMatting canMatteWithANE]
  +[JFXMatting isCVASegMattingSPIWorking]
  +[JFXMatting defaultMatteGeneratorClass]
  +[JFXMatting defaultMatteGeneratorPrefersDepth]
  +[JFXMatting defaultMatteGenerator:]

  // instance methods
  -[JFXMatting ready]
  -[JFXMatting setReady:]
  -[JFXMatting initForFrameSet:]
  -[JFXMatting isValidForCameraFrameSet:]
  -[JFXMatting requestMattingStatus]
  -[JFXMatting alphaMatteForFrameSet:mattingPerfState:completionHandler:]


JFXMattingPerfState : NSObject
 @property  JFXCapturePreviewFrameStats *captureFrameStats
 @property  PVTaskToken *signpostToken

  // class methods
  +[JFXMattingPerfState mattingDepthInputSize]

  // instance methods
  -[JFXMattingPerfState .cxx_destruct]
  -[JFXMattingPerfState signpostToken]
  -[JFXMattingPerfState captureFrameStats]
  -[JFXMattingPerfState initWithStats:signpostToken:]


CFXFaceReticleView : UIView
 @property  BOOL isShowingFaceIndicator
 @property  UIImageView *reticleImageView
 @property  UISelectionFeedbackGenerator *feedbackGenerator
 @property  BOOL canPerformFadeInAnimations
 @property  BOOL canPerformFadeOutAnimations
 @property  UIViewPropertyAnimator *bounceAnimator
 @property  UIViewPropertyAnimator *fadeOutAnimator
 @property  UIViewPropertyAnimator *animojiBounceAnimator
 @property  UIViewPropertyAnimator *animojiFadeOutAnimator
 @property  NSMutableArray *reticleLayersToAnimate

  // instance methods
  -[CFXFaceReticleView setFeedbackGenerator:]
  -[CFXFaceReticleView feedbackGenerator]
  -[CFXFaceReticleView .cxx_destruct]
  -[CFXFaceReticleView userFeedbackForTrackingType:needsHaptics:]
  -[CFXFaceReticleView fadeOutAndEndHapticWithCompletionBlock:]
  -[CFXFaceReticleView initWithFrame:reticleType:]
  -[CFXFaceReticleView updateFrameForDisplayRelativeToBounds:]
  -[CFXFaceReticleView showAndAnimateAnimojiFaceReticle]
  -[CFXFaceReticleView hideAnimojiFaceReticleAnimatedWithCompletion:]
  -[CFXFaceReticleView setupAnimojiReticleLayers]
  -[CFXFaceReticleView reticleImageView]
  -[CFXFaceReticleView fadeInAnimation]
  -[CFXFaceReticleView fadeOutAnimationWithCompletion:]
  -[CFXFaceReticleView shouldUseHapticFeedback:]
  -[CFXFaceReticleView canPerformFadeInAnimations]
  -[CFXFaceReticleView setCanPerformFadeInAnimations:]
  -[CFXFaceReticleView setCanPerformFadeOutAnimations:]
  -[CFXFaceReticleView setBounceAnimator:]
  -[CFXFaceReticleView bounceAnimator]
  -[CFXFaceReticleView canPerformFadeOutAnimations]
  -[CFXFaceReticleView setFadeOutAnimator:]
  -[CFXFaceReticleView fadeOutAnimator]
  -[CFXFaceReticleView setReticleLayersToAnimate:]
  -[CFXFaceReticleView reticleLayersToAnimate]
  -[CFXFaceReticleView setAnimojiBounceAnimator:]
  -[CFXFaceReticleView animojiBounceAnimator]
  -[CFXFaceReticleView animojiFadeInAnimation]
  -[CFXFaceReticleView setAnimojiFadeOutAnimator:]
  -[CFXFaceReticleView animojiFadeOutAnimator]
  -[CFXFaceReticleView animojiCloseAnimationWithCompletion:]
  -[CFXFaceReticleView isShowingFaceIndicator]
  -[CFXFaceReticleView setIsShowingFaceIndicator:]
  -[CFXFaceReticleView setReticleImageView:]


JFXReaderWriterExportController : JFXExportController
 @property  float progress
 @property  PVVideoCompositing *customCompositor

  // instance methods
  -[JFXReaderWriterExportController .cxx_destruct]
  -[JFXReaderWriterExportController progress]
  -[JFXReaderWriterExportController setProgress:]
  -[JFXReaderWriterExportController cancelExportWithStatus:]
  -[JFXReaderWriterExportController continueExportAfterDelay]
  -[JFXReaderWriterExportController applyCompositionAspectRatioToAVPresetSize:compositionSize:]
  -[JFXReaderWriterExportController JFX_videoCompressionSettingsFromAssistant:]
  -[JFXReaderWriterExportController mapAssetReaderStatusToExportStatus:]
  -[JFXReaderWriterExportController mapAssetWriterStatusToExportStatus:]
  -[JFXReaderWriterExportController customCompositor]
  -[JFXReaderWriterExportController updateSessionProgress:]
  -[JFXReaderWriterExportController updateStatusAndErrorFromReader:andWriter:]
  -[JFXReaderWriterExportController fileTypeFromExtension]
  -[JFXReaderWriterExportController videoCompressionSettings:]
  -[JFXReaderWriterExportController videoDecompressionSettingsForVideoCompressionSettings:]
  -[JFXReaderWriterExportController setCustomCompositor:]
  -[JFXReaderWriterExportController audioCompressionSettings]
  -[JFXReaderWriterExportController transferSampleBuffers:assetReader:assetWriterInput:assetWriter:timeRangeToExport:queue:pass:completionBlock:]
  -[JFXReaderWriterExportController JFX_continueExportForNextPreset]


CFXExportClipDataSource : NSObject <JFXCompositionPlayableElementsDataSource>
 @property  CFXClip *clip
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXExportClipDataSource colorSpace]
  -[CFXExportClipDataSource clip]
  -[CFXExportClipDataSource imageScale]
  -[CFXExportClipDataSource timeScale]
  -[CFXExportClipDataSource .cxx_destruct]
  -[CFXExportClipDataSource count]
  -[CFXExportClipDataSource isExporting]
  -[CFXExportClipDataSource setClip:]
  -[CFXExportClipDataSource frameRate]
  -[CFXExportClipDataSource frameSize]
  -[CFXExportClipDataSource renderSize]
  -[CFXExportClipDataSource duration]
  -[CFXExportClipDataSource initWithClip:]
  -[CFXExportClipDataSource screenCanShow2160P]
  -[CFXExportClipDataSource use2160Pcontent:]
  -[CFXExportClipDataSource playableElementAtIndex:]


JFXEffectsPreviewGenerator : NSObject
 @property  NSObject<OS_dispatch_queue> *renderCompleteQueue
 @property  NSString *name

  // instance methods
  -[JFXEffectsPreviewGenerator clearCaches]
  -[JFXEffectsPreviewGenerator name]
  -[JFXEffectsPreviewGenerator .cxx_destruct]
  -[JFXEffectsPreviewGenerator setName:]
  -[JFXEffectsPreviewGenerator init]
  -[JFXEffectsPreviewGenerator dealloc]
  -[JFXEffectsPreviewGenerator perfLog]
  -[JFXEffectsPreviewGenerator initWithRendererOptions:]
  -[JFXEffectsPreviewGenerator generatePreviewRequest:completionHandler:]
  -[JFXEffectsPreviewGenerator trackStats:]
  -[JFXEffectsPreviewGenerator _renderJob:completionHandler:]
  -[JFXEffectsPreviewGenerator renderCompleteQueue]
  -[JFXEffectsPreviewGenerator setRenderCompleteQueue:]


CFXClipCompositionDataSource : NSObject <JFXCompositionPlayableElementsDataSource>
 @property  CFXClip *clip
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CFXClipCompositionDataSource colorSpace]
  -[CFXClipCompositionDataSource clip]
  -[CFXClipCompositionDataSource imageScale]
  -[CFXClipCompositionDataSource timeScale]
  -[CFXClipCompositionDataSource .cxx_destruct]
  -[CFXClipCompositionDataSource count]
  -[CFXClipCompositionDataSource isExporting]
  -[CFXClipCompositionDataSource setClip:]
  -[CFXClipCompositionDataSource frameRate]
  -[CFXClipCompositionDataSource frameSize]
  -[CFXClipCompositionDataSource renderSize]
  -[CFXClipCompositionDataSource duration]
  -[CFXClipCompositionDataSource initWithClip:]
  -[CFXClipCompositionDataSource screenCanShow2160P]
  -[CFXClipCompositionDataSource use2160Pcontent:]
  -[CFXClipCompositionDataSource playableElementAtIndex:]


CFXClipPlayerViewController : JFXCompositionPlayerViewController
 @property  UIView *playerContainerView
 @property  UIView *placeholderContainerView
 @property  UIViewController<JFXAVPlayerViewer> *avPlayerView
 @property  CFXClipCompositionDataSource *clipDataSource
 @property  CFXClip *clip

  // instance methods
  -[CFXClipPlayerViewController clip]
  -[CFXClipPlayerViewController .cxx_destruct]
  -[CFXClipPlayerViewController setClip:]
  -[CFXClipPlayerViewController viewWillAppear:]
  -[CFXClipPlayerViewController prepareForSegue:sender:]
  -[CFXClipPlayerViewController updateCompositionForEffectChange]
  -[CFXClipPlayerViewController playerContainerView]
  -[CFXClipPlayerViewController displayCompositionUpdateLoadingView:]
  -[CFXClipPlayerViewController setPlayerContainerView:]
  -[CFXClipPlayerViewController playerViewer]
  -[CFXClipPlayerViewController placeholderContainerView]
  -[CFXClipPlayerViewController clipDataSource]
  -[CFXClipPlayerViewController reloadClip]
  -[CFXClipPlayerViewController setClipDataSource:]
  -[CFXClipPlayerViewController reloadClipAndSeekToStart:]
  -[CFXClipPlayerViewController setAvPlayerView:]
  -[CFXClipPlayerViewController avPlayerView]
  -[CFXClipPlayerViewController setPlaceholderContainerView:]


CFXEffectMessagesStickerProperties : NSObject
 @property  NSString *effectID
 @property  NSURL *previewUrl
 @property  NSString *localizedDescription

  // instance methods
  -[CFXEffectMessagesStickerProperties localizedDescription]
  -[CFXEffectMessagesStickerProperties .cxx_destruct]
  -[CFXEffectMessagesStickerProperties effectID]
  -[CFXEffectMessagesStickerProperties initWithEffectID:previewUrl:localizedDescription:]
  -[CFXEffectMessagesStickerProperties previewUrl]


JFXRotationTransforms : NSObject
  // class methods
  +[JFXRotationTransforms rotationFromCaptureDevicePosition:captureVideoOrientation:toInterfaceOrientation:]
  +[JFXRotationTransforms transformFromCaptureDevicePosition:captureVideoOrientation:toInterfaceOrientation:]
  +[JFXRotationTransforms transformFromTopLeftCaptureDevicePivotPosition:captureVideoOrientation:toInterfaceOrientation:size:]
  +[JFXRotationTransforms rotationFromUIInterfaceOrientation:toUIInterfaceOrientation:]


JFXEffectPreviewManager : NSObject <PVLivePlayerDelegate>
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  JFXLRUCache *previewCache
 @property  JFXEffectPreviewDiskCache *previewDiskCache
 @property  NSObject<OS_dispatch_queue> *synchronizationQueue
 @property  NSObject<OS_dispatch_queue> *previewQueue
 @property  NSObject<OS_dispatch_semaphore> *concurrentStaticPreviewSemaphore
 @property  NSObject *pickerPreviewingToken
 @property  <JFXEffectPreviewManagerDelegate> *delegate_internal
 @property  BOOL continouslyPreviewing_internal
 @property  JTImage *defaultPreviewImage_internal
 @property  NSValue *_defaultPreviewImageDisplayTransformValue_internal
 @property  JFXEffectsPreviewGenerator *staticPreviewGenerator
 @property  PVLivePlayer *continousPreviewPlayer
 @property  {CGSize=dd} continousPreviewSize
 @property  JFXEffectContinousPreviewOptions *continousPreviewOptions
 @property  NSMutableSet *preparedContinousPreviewEffects
 @property  NSMutableSet *effectsPreparingForPreview
 @property  NSSet *currentContinousPreviewEffects
 @property  NSMapTable *assetRequestsForPreviewEffects
 @property  NSString *name
 @property  <JFXEffectPreviewManagerDelegate> *delegate
 @property  NSSet *continousPreviewEffects
 @property  BOOL continouslyPreviewing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[JFXEffectPreviewManager JFX_createTransparentEmptyImageForPreviewSize:]

  // instance methods
  -[JFXEffectPreviewManager name]
  -[JFXEffectPreviewManager .cxx_destruct]
  -[JFXEffectPreviewManager callbackQueue]
  -[JFXEffectPreviewManager setDelegate:]
  -[JFXEffectPreviewManager previewQueue]
  -[JFXEffectPreviewManager previewCache]
  -[JFXEffectPreviewManager synchronizationQueue]
  -[JFXEffectPreviewManager delegate]
  -[JFXEffectPreviewManager dealloc]
  -[JFXEffectPreviewManager defaultPreviewImage]
  -[JFXEffectPreviewManager isContinouslyPreviewing]
  -[JFXEffectPreviewManager initWithName:callbackQueue:]
  -[JFXEffectPreviewManager startPreparingPreviewsContinuouslyAtSize:options:]
  -[JFXEffectPreviewManager setContinousPreviewEffects:]
  -[JFXEffectPreviewManager previewForEffect:atSize:options:completion:]
  -[JFXEffectPreviewManager continousPreviewsForEffectIDs:completion:]
  -[JFXEffectPreviewManager buildRenderRequest:time:]
  -[JFXEffectPreviewManager renderRequestComplete:results:completedOutOfOrder:]
  -[JFXEffectPreviewManager JFX_stopCachingPreviewsContinuously]
  -[JFXEffectPreviewManager JFX_cancelAssetRequestForAllEffects]
  -[JFXEffectPreviewManager JFX_setContinousPreviewEffects:]
  -[JFXEffectPreviewManager setCurrentContinousPreviewEffects:]
  -[JFXEffectPreviewManager continousPreviewOptions]
  -[JFXEffectPreviewManager JFX_prepareEffectForContinousPreview:]
  -[JFXEffectPreviewManager JFX_updateAssetRequestsPriorityAssociatedWithEffects:toPriority:]
  -[JFXEffectPreviewManager JFX_updateAssetRequestsPriorityNotAssociatedWithEffects:toPriority:]
  -[JFXEffectPreviewManager currentContinousPreviewEffects]
  -[JFXEffectPreviewManager assetRequestsForPreviewEffects]
  -[JFXEffectPreviewManager setAssetRequestsForPreviewEffects:]
  -[JFXEffectPreviewManager JFX_delegateWillBeginDownloadingPreviewAssetsForEffect:]
  -[JFXEffectPreviewManager JFX_delegateDownloadingPreviewAssetsForEffect:progress:]
  -[JFXEffectPreviewManager JFX_delegateDidFinishDownloadingPreviewAssetsForEffect:wasCancelled:error:]
  -[JFXEffectPreviewManager setContinouslyPreviewing:]
  -[JFXEffectPreviewManager JFX_startPreparingPreviewsContinuouslyAtSize:options:]
  -[JFXEffectPreviewManager setContinousPreviewSize:]
  -[JFXEffectPreviewManager setContinousPreviewOptions:]
  -[JFXEffectPreviewManager setContinousPreviewPlayer:]
  -[JFXEffectPreviewManager continousPreviewPlayer]
  -[JFXEffectPreviewManager setPreparedContinousPreviewEffects:]
  -[JFXEffectPreviewManager pickerPreviewingToken]
  -[JFXEffectPreviewManager setDefaultPreviewImage:transformValue:]
  -[JFXEffectPreviewManager preparedContinousPreviewEffects]
  -[JFXEffectPreviewManager effectsPreparingForPreview]
  -[JFXEffectPreviewManager continousPreviewSize]
  -[JFXEffectPreviewManager JFX_configureCommonRenderingPropertiesForEffect:forPreviewSize:withPreviewOptions:]
  -[JFXEffectPreviewManager JFX_loadRenderingResourcesForEffect:completion:]
  -[JFXEffectPreviewManager JFX_requestPreviewAssetsForEffect:withPriority:onlyThumbnailAssetWhenAvailable:completion:]
  -[JFXEffectPreviewManager JFX_rendersDefaultContinousPreviewImage]
  -[JFXEffectPreviewManager JFX_lowPriorityScheduling]
  -[JFXEffectPreviewManager staticPreviewGenerator]
  -[JFXEffectPreviewManager JFX_delegateUpdateContinousPreviewsForEffectIDs:]
  -[JFXEffectPreviewManager JFX_renderPreviewForEffect:previewSize:options:completion:]
  -[JFXEffectPreviewManager preparePreviewForEffect:atSize:options:completion:]
  -[JFXEffectPreviewManager cachedPreviewForEffect:completion:]
  -[JFXEffectPreviewManager concurrentStaticPreviewSemaphore]
  -[JFXEffectPreviewManager previewDiskCache]
  -[JFXEffectPreviewManager JFX_dispatchBlockOnCallbackQueueImmediatelyWhenPossible:]
  -[JFXEffectPreviewManager defaultPreviewImageDisplayTransformValue]
  -[JFXEffectPreviewManager setStaticPreviewGenerator:]
  -[JFXEffectPreviewManager continousPreviewEffects]
  -[JFXEffectPreviewManager stopCachingPreviewsContinuously]
  -[JFXEffectPreviewManager purgeCachedPreviewForEffect:]
  -[JFXEffectPreviewManager purgeCachedPreviewsForAllEffects]
  -[JFXEffectPreviewManager delegate_internal]
  -[JFXEffectPreviewManager setDelegate_internal:]
  -[JFXEffectPreviewManager continouslyPreviewing_internal]
  -[JFXEffectPreviewManager setContinouslyPreviewing_internal:]
  -[JFXEffectPreviewManager defaultPreviewImage_internal]
  -[JFXEffectPreviewManager setDefaultPreviewImage_internal:]
  -[JFXEffectPreviewManager _defaultPreviewImageDisplayTransformValue_internal]
  -[JFXEffectPreviewManager set_defaultPreviewImageDisplayTransformValue_internal:]
  -[JFXEffectPreviewManager setEffectsPreparingForPreview:]


CFXMediaSettings : NSObject <JFXMediaSettingsProvider>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  int timeScale
 @property  int frameRate
 @property  {CGSize=dd} frameSize
 @property  {CGSize=dd} renderSize
 @property  {CGSize=dd} compositionSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CFXMediaSettings sharedInstance]

  // instance methods
  -[CFXMediaSettings timeScale]
  -[CFXMediaSettings .cxx_destruct]
  -[CFXMediaSettings setFrameRate:]
  -[CFXMediaSettings init]
  -[CFXMediaSettings setQueue:]
  -[CFXMediaSettings setRenderSize:]
  -[CFXMediaSettings setTimeScale:]
  -[CFXMediaSettings setFrameSize:]
  -[CFXMediaSettings frameRate]
  -[CFXMediaSettings queue]
  -[CFXMediaSettings frameSize]
  -[CFXMediaSettings renderSize]
  -[CFXMediaSettings compositionSize]
  -[CFXMediaSettings setCompositionSize:]


JFXEffectsPreviewRequestHandler : NSObject
 @property  JFXEffectsPreviewGenerationRequest *req
 @property  JFXEffectsPreviewGeneratorJob *job

  // instance methods
  -[JFXEffectsPreviewRequestHandler job]
  -[JFXEffectsPreviewRequestHandler req]
  -[JFXEffectsPreviewRequestHandler initWithRequest:]
  -[JFXEffectsPreviewRequestHandler .cxx_destruct]
  -[JFXEffectsPreviewRequestHandler setReq:]
  -[JFXEffectsPreviewRequestHandler setJob:]
  -[JFXEffectsPreviewRequestHandler buildPVRenderRequest]
  -[JFXEffectsPreviewRequestHandler buildCallbackMap:]


JFXVideoMediaItem : JTAssetMediaItem
 @property  AVAsset *avAsset
 @property  JTVideoMediaUtils *videoMediaItemUtils
 @property  BOOL originalIsHEVC4k
 @property  {CGSize=dd} naturalSize
 @property  {CGAffineTransform=dddddd} transform
 @property  {CGSize=dd} naturalSizeWithTransform
 @property  int mediaStartOffset
 @property  float frameRate
 @property  BOOL isHighFrameRate
 @property  BOOL hasVideoTracks
 @property  BOOL hasAudioTracks
 @property  BOOL capturedByInAppCamera
 @property  BOOL needsDerivativeMedia
 @property  BOOL isUnsupportedAudio

  // class methods
  +[JFXVideoMediaItem videoMediaItemWithLocalURL:delegate:completionHandler:]

  // instance methods
  -[JFXVideoMediaItem colorSpace]
  -[JFXVideoMediaItem naturalSize]
  -[JFXVideoMediaItem commonInit]
  -[JFXVideoMediaItem avAsset]
  -[JFXVideoMediaItem .cxx_destruct]
  -[JFXVideoMediaItem info]
  -[JFXVideoMediaItem isEqual:]
  -[JFXVideoMediaItem transform]
  -[JFXVideoMediaItem frameRate]
  -[JFXVideoMediaItem setAvAsset:]
  -[JFXVideoMediaItem dealloc]
  -[JFXVideoMediaItem copyWithZone:]
  -[JFXVideoMediaItem assetURL]
  -[JFXVideoMediaItem mediaStartOffset]
  -[JFXVideoMediaItem hasAudibleCharacteristic]
  -[JFXVideoMediaItem isUnsupportedAudio]
  -[JFXVideoMediaItem hasVideoTracks]
  -[JFXVideoMediaItem hasAudioTracks]
  -[JFXVideoMediaItem durationAt30fps]
  -[JFXVideoMediaItem canBeAddedToSequence]
  -[JFXVideoMediaItem hasVisualCharacteristic]
  -[JFXVideoMediaItem naturalSizeWithTransform]
  -[JFXVideoMediaItem mediaserverdCrashed]
  -[JFXVideoMediaItem cacheAssetInformation]
  -[JFXVideoMediaItem videoMediaItemUtils]
  -[JFXVideoMediaItem needsDerivativeMedia]
  -[JFXVideoMediaItem loadAVAssetWithCompletionHandler:]
  -[JFXVideoMediaItem setMediaStartOffset:]
  -[JFXVideoMediaItem setVideoMediaItemUtils:]
  -[JFXVideoMediaItem reloadAVAsset]
  -[JFXVideoMediaItem setAssetIs4kHEVC:]
  -[JFXVideoMediaItem transform:fillDest:]
  -[JFXVideoMediaItem isHighFrameRate]
  -[JFXVideoMediaItem capturedByInAppCamera]
  -[JFXVideoMediaItem setCapturedByInAppCamera:]
  -[JFXVideoMediaItem originalIsHEVC4k]
  -[JFXVideoMediaItem setOriginalIsHEVC4k:]


JFXEffectsPreviewGenerationRequest : NSObject
 @property  BOOL scaleAnimationTransformInfoToOutputSize
 @property  PVImageBuffer *image
 @property  JFXEffect *generatorEffect
 @property  NSArray *effectStack
 @property  {CGSize=dd} outputSize
 @property  {CGSize=dd} frameSize
 @property  {?=qiIq} renderTime
 @property  {CGAffineTransform=dddddd} userSourceTransform
 @property  NSDictionary *customRenderingProperties
 @property  NSArray *pickerPreviewEffectList
 @property  {PVTransformAnimationInfo={?=qiIq}{CGPoint=dd}dd} animationTransformInfo
 @property  BOOL highQuality
 @property  int priority
 @property  unsigned int parentCode
 @property  unsigned int childCode

  // class methods
  +[JFXEffectsPreviewGenerationRequest JT_centerRect:aspectRatio:]
  +[JFXEffectsPreviewGenerationRequest centerAnimationInfoForOutputSize:imageRect:]

  // instance methods
  -[JFXEffectsPreviewGenerationRequest image]
  -[JFXEffectsPreviewGenerationRequest .cxx_destruct]
  -[JFXEffectsPreviewGenerationRequest setPriority:]
  -[JFXEffectsPreviewGenerationRequest highQuality]
  -[JFXEffectsPreviewGenerationRequest outputSize]
  -[JFXEffectsPreviewGenerationRequest priority]
  -[JFXEffectsPreviewGenerationRequest frameSize]
  -[JFXEffectsPreviewGenerationRequest sourceTransform]
  -[JFXEffectsPreviewGenerationRequest renderTime]
  -[JFXEffectsPreviewGenerationRequest effectStack]
  -[JFXEffectsPreviewGenerationRequest parentCode]
  -[JFXEffectsPreviewGenerationRequest setParentCode:]
  -[JFXEffectsPreviewGenerationRequest initWithInput:effectStack:outputSize:frameSize:renderTime:]
  -[JFXEffectsPreviewGenerationRequest setCustomRenderingProperties:]
  -[JFXEffectsPreviewGenerationRequest setUserSourceTransform:]
  -[JFXEffectsPreviewGenerationRequest setAnimationTransformInfo:]
  -[JFXEffectsPreviewGenerationRequest setTransformAnimationInfo:scaleToOutput:]
  -[JFXEffectsPreviewGenerationRequest initWithInput:effectStack:outputSize:renderTime:]
  -[JFXEffectsPreviewGenerationRequest setHighQuality:]
  -[JFXEffectsPreviewGenerationRequest setChildCode:]
  -[JFXEffectsPreviewGenerationRequest initWithInputGenerator:effectStack:outputSize:renderTime:]
  -[JFXEffectsPreviewGenerationRequest userSourceTransform]
  -[JFXEffectsPreviewGenerationRequest centerAnimationInfo]
  -[JFXEffectsPreviewGenerationRequest initWithInputGenerator:effectStack:outputSize:frameSize:renderTime:]
  -[JFXEffectsPreviewGenerationRequest setPickerPreviewEffectList:]
  -[JFXEffectsPreviewGenerationRequest generatorJobWithGraphBuilder:]
  -[JFXEffectsPreviewGenerationRequest childCode]
  -[JFXEffectsPreviewGenerationRequest generatorEffect]
  -[JFXEffectsPreviewGenerationRequest placeholderGeneratorBackground]
  -[JFXEffectsPreviewGenerationRequest JFX_scaleToFitSize:withTransform:]
  -[JFXEffectsPreviewGenerationRequest customRenderingProperties]
  -[JFXEffectsPreviewGenerationRequest sourceIGNodeUsingGraphBuilder:includeAnimoji:]
  -[JFXEffectsPreviewGenerationRequest pickerPreviewEffectList]
  -[JFXEffectsPreviewGenerationRequest setScaleAnimationTransformInfoToOutputSize:]
  -[JFXEffectsPreviewGenerationRequest animationTransformInfo]
  -[JFXEffectsPreviewGenerationRequest scaleAnimationTransformInfoToOutputSize]
  -[JFXEffectsPreviewGenerationRequest _scaleAndTransformToFitSize:]


JFXOverlayEffectDebugViewRect : NSObject
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} frame
 @property  double borderWidth
 @property  UIColor *borderColor
 @property  BOOL ignoreTransform

  // instance methods
  -[JFXOverlayEffectDebugViewRect setBorderWidth:]
  -[JFXOverlayEffectDebugViewRect borderWidth]
  -[JFXOverlayEffectDebugViewRect borderColor]
  -[JFXOverlayEffectDebugViewRect setBorderColor:]
  -[JFXOverlayEffectDebugViewRect .cxx_destruct]
  -[JFXOverlayEffectDebugViewRect setFrame:]
  -[JFXOverlayEffectDebugViewRect frame]
  -[JFXOverlayEffectDebugViewRect ignoreTransform]
  -[JFXOverlayEffectDebugViewRect setIgnoreTransform:]


JFXOverlayEffectDebugView : UIView
 @property  UIView *rootContainerView
 @property  CALayer *rootLayer
 @property  CATransformLayer *rootTransformLayer
 @property  CAShapeLayer *documentBoundingBoxLayer
 @property  CAShapeLayer *outputROILayer
 @property  CAShapeLayer *objectAlignedBoundingBoxLayer
 @property  CALayer *textBoundingBoxesContainerLayer
 @property  CAShapeLayer *hitAreaBoundingBoxLayer
 @property  CAShapeLayer *hitAreaMinimumSizeBoundingBoxLayer
 @property  CAShapeLayer *midpointLayer
 @property  CAShapeLayer *cornerPointsLayer
 @property  CALayer *textCornerPointsContainerLayer
 @property  CAShapeLayer *hitAreaPointsLayer
 @property  CAShapeLayer *additionalRectsLayer
 @property  CAShapeLayer *additionalRectsTransformedLayer
 @property  JFXOverlayEffectDebugViewOptions *options
 @property  <JFXOverlayEffectDebugViewDelegate> *delegate

  // instance methods
  -[JFXOverlayEffectDebugView initWithFrame:delegate:]
  -[JFXOverlayEffectDebugView initWithCoder:]
  -[JFXOverlayEffectDebugView options]
  -[JFXOverlayEffectDebugView setOptions:]
  -[JFXOverlayEffectDebugView .cxx_destruct]
  -[JFXOverlayEffectDebugView setRootLayer:]
  -[JFXOverlayEffectDebugView setupViews]
  -[JFXOverlayEffectDebugView setDelegate:]
  -[JFXOverlayEffectDebugView rootLayer]
  -[JFXOverlayEffectDebugView delegate]
  -[JFXOverlayEffectDebugView rootContainerView]
  -[JFXOverlayEffectDebugView setRootContainerView:]
  -[JFXOverlayEffectDebugView updateWithEffectFrame:]
  -[JFXOverlayEffectDebugView setRootTransformLayer:]
  -[JFXOverlayEffectDebugView rootTransformLayer]
  -[JFXOverlayEffectDebugView setDocumentBoundingBoxLayer:]
  -[JFXOverlayEffectDebugView documentBoundingBoxLayer]
  -[JFXOverlayEffectDebugView setOutputROILayer:]
  -[JFXOverlayEffectDebugView outputROILayer]
  -[JFXOverlayEffectDebugView setObjectAlignedBoundingBoxLayer:]
  -[JFXOverlayEffectDebugView objectAlignedBoundingBoxLayer]
  -[JFXOverlayEffectDebugView setTextBoundingBoxesContainerLayer:]
  -[JFXOverlayEffectDebugView textBoundingBoxesContainerLayer]
  -[JFXOverlayEffectDebugView setHitAreaBoundingBoxLayer:]
  -[JFXOverlayEffectDebugView hitAreaBoundingBoxLayer]
  -[JFXOverlayEffectDebugView setHitAreaMinimumSizeBoundingBoxLayer:]
  -[JFXOverlayEffectDebugView hitAreaMinimumSizeBoundingBoxLayer]
  -[JFXOverlayEffectDebugView setMidpointLayer:]
  -[JFXOverlayEffectDebugView midpointLayer]
  -[JFXOverlayEffectDebugView setCornerPointsLayer:]
  -[JFXOverlayEffectDebugView cornerPointsLayer]
  -[JFXOverlayEffectDebugView setTextCornerPointsContainerLayer:]
  -[JFXOverlayEffectDebugView textCornerPointsContainerLayer]
  -[JFXOverlayEffectDebugView setHitAreaPointsLayer:]
  -[JFXOverlayEffectDebugView hitAreaPointsLayer]
  -[JFXOverlayEffectDebugView setAdditionalRectsLayer:]
  -[JFXOverlayEffectDebugView additionalRectsLayer]
  -[JFXOverlayEffectDebugView setAdditionalRectsTransformedLayer:]
  -[JFXOverlayEffectDebugView additionalRectsTransformedLayer]
  -[JFXOverlayEffectDebugView updateDottedBorderedLayer:borderRect:borderWidth:borderColor:borderPhase:borderDashPattern:]
  -[JFXOverlayEffectDebugView updateBorderedLayer:borderRect:borderWidth:borderColor:]
  -[JFXOverlayEffectDebugView updatePolygonLayer:points:borderWidth:borderColor:]
  -[JFXOverlayEffectDebugView updateFilledPolygonLayer:path:fillColor:]
  -[JFXOverlayEffectDebugView updatePointsLayers:points:colors:size:]
  -[JFXOverlayEffectDebugView additionalRectsToDraw]
  -[JFXOverlayEffectDebugView updateAdditionalRects:transformedLayer:effectScale:rects:]


JFXGuidedUpscaler : NSObject
 @property  <MTLTexture> *scaledGuidance
 @property  <MTLTexture> *oldScaledGuidance
 @property  <MTLTexture> *currentOutputTexture
 @property  <MTLTexture> *previousOutputTexture
 @property  <MTLTexture> *similarity
 @property  <MTLComputePipelineState> *pipelineStateSimilarity
 @property  <MTLComputePipelineState> *pipelineStateSmoothing
 @property  float temporalSmoothing
 @property  BOOL showSimilarity
 @property  float updateRate
 @property  float similarityGaussianBlur

  // instance methods
  -[JFXGuidedUpscaler .cxx_destruct]
  -[JFXGuidedUpscaler initWithDiameter:]
  -[JFXGuidedUpscaler initialized]
  -[JFXGuidedUpscaler dealloc]
  -[JFXGuidedUpscaler setTemporalSmoothing:]
  -[JFXGuidedUpscaler scaleImage:guidanceImage:destinationImage:]
  -[JFXGuidedUpscaler setPipelineStateSimilarity:]
  -[JFXGuidedUpscaler setPipelineStateSmoothing:]
  -[JFXGuidedUpscaler setCurrentOutputTexture:]
  -[JFXGuidedUpscaler setPreviousOutputTexture:]
  -[JFXGuidedUpscaler setOldScaledGuidance:]
  -[JFXGuidedUpscaler setScaledGuidance:]
  -[JFXGuidedUpscaler scaledGuidance]
  -[JFXGuidedUpscaler currentOutputTexture]
  -[JFXGuidedUpscaler updateRate]
  -[JFXGuidedUpscaler previousOutputTexture]
  -[JFXGuidedUpscaler pipelineStateSimilarity]
  -[JFXGuidedUpscaler oldScaledGuidance]
  -[JFXGuidedUpscaler similarity]
  -[JFXGuidedUpscaler setSimilarity:]
  -[JFXGuidedUpscaler pipelineStateSmoothing]
  -[JFXGuidedUpscaler setSimilarityGaussianBlur:]
  -[JFXGuidedUpscaler setUpdateRate:]
  -[JFXGuidedUpscaler showSimilarity]
  -[JFXGuidedUpscaler setShowSimilarity:]
  -[JFXGuidedUpscaler temporalSmoothing]
  -[JFXGuidedUpscaler similarityGaussianBlur]


JFXMovieCompositionItem : JFXCompositionItem
 @property  AVAsset *asset
 @property  AVAsset *audioAssetOverwrite
 @property  int audioAssetOverwriteStartOffset

  // instance methods
  -[JFXMovieCompositionItem .cxx_destruct]
  -[JFXMovieCompositionItem setAsset:]
  -[JFXMovieCompositionItem asset]
  -[JFXMovieCompositionItem initWithClip:timeScale:]
  -[JFXMovieCompositionItem segmentWithCharacteristic:sourceRange:destinationRange:]
  -[JFXMovieCompositionItem audioTrackSegmentsWithDestinationTime:]
  -[JFXMovieCompositionItem hasVideoContent]
  -[JFXMovieCompositionItem videoTrackSegmentsWithDestinationRange:]
  -[JFXMovieCompositionItem audioTrackSegmentsWithDestinationTime:paddedFromTime:]
  -[JFXMovieCompositionItem audioTrackSegmentsLoopedForDestinationTimeRange:]
  -[JFXMovieCompositionItem audioAssetOverwrite]
  -[JFXMovieCompositionItem needAudioLoop]
  -[JFXMovieCompositionItem audioTrackSegmentsLoopedWithDestinationTime:]
  -[JFXMovieCompositionItem speedRangesForSourceRange:destinationRange:]
  -[JFXMovieCompositionItem audioAssetOverwriteStartOffset]
  -[JFXMovieCompositionItem applySpeed:]
  -[JFXMovieCompositionItem setAudioAssetOverwrite:]
  -[JFXMovieCompositionItem setAudioAssetOverwriteStartOffset:]


JFXEffectPreviewDiskCache : NSObject
 @property  NSString *directoryName
 @property  NSString *cacheDirectoryPath
 @property  NSOperationQueue *diskAccessQueue

  // class methods
  +[JFXEffectPreviewDiskCache createCacheAtDirectory:]
  +[JFXEffectPreviewDiskCache cachedPathForEffect:version:directoryPath:]

  // instance methods
  -[JFXEffectPreviewDiskCache .cxx_destruct]
  -[JFXEffectPreviewDiskCache initWithDirectory:]
  -[JFXEffectPreviewDiskCache diskAccessQueue]
  -[JFXEffectPreviewDiskCache cacheDirectoryPath]
  -[JFXEffectPreviewDiskCache dealloc]
  -[JFXEffectPreviewDiskCache directoryName]
  -[JFXEffectPreviewDiskCache savePreviewForEffectID:image:version:completion:]
  -[JFXEffectPreviewDiskCache previewForEffectID:version:completion:]
  -[JFXEffectPreviewDiskCache removePreviewForEffectID:excludingVersion:completion:]
  -[JFXEffectPreviewDiskCache cachedURLForEffect:version:]


UIImage(Blur)
	// class methods
	+[UIImage(Blur) imageWithColor:]
	+[UIImage(Blur) imageWithColor:andSize:]
	+[UIImage(Blur) isSizeSwappedForImageOrientation:]
	+[UIImage(Blur) transformForImageOrientation:andSize:]

	// instance methods
	-[UIImage(Blur) _isSRGB]
	-[UIImage(Blur) tintedImage]
	-[UIImage(Blur) bluredImageWithFlippedXAxis:]
	-[UIImage(Blur) jfx_deepColorSafeImageDrawnInRect:]
	-[UIImage(Blur) jfx_renderedImageWithUpOrientation]
	-[UIImage(Blur) jfx_imageWithoutDeepColor]
	-[UIImage(Blur) adjustFitInSize:normalizeOrientation:]
	-[UIImage(Blur) drawImageIntoSize:maintainAspectRatio:normalizeOrientation:]
	-[UIImage(Blur) scaledSized:maintainAspectRatio:]
	-[UIImage(Blur) extendedRangeSafeDrawInRect:]
	-[UIImage(Blur) extendedRangeSafeDrawInRect:opaque:scale:]
	-[UIImage(Blur) cropImage:]
	-[UIImage(Blur) drawInRect:fromRect:blendMode:alpha:]
	-[UIImage(Blur) scaledImageEqualOrSmallerThanSize:maintainAspectRatio:normalizeOrientation:]
	-[UIImage(Blur) scaledSizeEqualOrSmallerThanSize:maintainAspectRatio:normalizeOrientation:]
	-[UIImage(Blur) scaledImageWithMaxDimension:]
	-[UIImage(Blur) cropped16X9Image]

CIImage(Blur)
	// instance methods
	-[CIImage(Blur) bluredImageWithFlippedXAxis:]

ARFaceAnchor(DebugOutput)
	// instance methods
	-[ARFaceAnchor(DebugOutput) normalizedFaceRect]
	-[ARFaceAnchor(DebugOutput) description]

UIViewController(CFXAdditions)
	// class methods
	+[UIViewController(CFXAdditions) jfxTopmostPresentedController]

	// instance methods
	-[UIViewController(CFXAdditions) displaySnapshot:atCenterPoint:atIndex:forTransitionToSize:fadeOut:withTransitionCoordinator:preTransitionBlock:postTransitionBlock:]
	-[UIViewController(CFXAdditions) jfxRemoveFromParentViewController]
	-[UIViewController(CFXAdditions) jfxAddChildViewController:constrainRelativeToSafeAreas:]
	-[UIViewController(CFXAdditions) jfxCenterAdjustedForOrientationForPortraitFrame:relativeToParentFrame:withOrientation:]
	-[UIViewController(CFXAdditions) counterRotationViewForSnapshot:atCenterPoint:toWindowOrientation:fromWindowOrientation:]
	-[UIViewController(CFXAdditions) animateCounterRotationView:fadeOut:toWindowOrientation:fromWindowOrientation:forTransitionToSize:withTransitionCoordinator:postTransitionBlock:postRemoveFromSuperviewBlock:]
	-[UIViewController(CFXAdditions) jfxAddChildViewController:]
	-[UIViewController(CFXAdditions) jfxAddChildViewController:containerView:]
	-[UIViewController(CFXAdditions) jfxAddChildViewController:containerView:constrainToContainer:relativeToSafeArea:]
	-[UIViewController(CFXAdditions) jfxDisplayScale]
	-[UIViewController(CFXAdditions) jfxAddChildViewControllerFromStoryboard:containerView:constrainToContainer:relativeToSafeArea:]

NSUserDefaults(JFX)
	// instance methods
	-[NSUserDefaults(JFX) jfxBoolForKey:defaultValue:]

PHAsset(CloudSupport)
	// instance methods
	-[PHAsset(CloudSupport) isAssetLocalWithCompletion:requiresDerivative:]

NSBundle(JFX)
	// class methods
	+[NSBundle(JFX) jfxBundle]

UIFont(UIFont_JFXAdditions)
	// class methods
	+[UIFont(UIFont_JFXAdditions) jfx_fontWithName:]

(SPI_OSThermalPressureLevel)
	// class methods
	+[(SPI_OSThermalPressureLevel) stringFromOSThermalPressureLevel:]

AVCaptureDevice(JFX)
	// instance methods
	-[AVCaptureDevice(JFX) jfx_trueDepthCamera]
	-[AVCaptureDevice(JFX) jfx_highestQualityColorSpace]

(MutableDeepCopy)
	// instance methods
	-[(MutableDeepCopy) mutableDeepCopy]

(MutableDeepCopy)
	// instance methods
	-[(MutableDeepCopy) mutableDeepCopy]

(MutableDeepCopy)
	// instance methods
	-[(MutableDeepCopy) mutableDeepCopy]

(MutableDeepCopy)
	// instance methods
	-[(MutableDeepCopy) mutableDeepCopy]

AVMetadataItem(MediaMetadataReaderItem)
	// instance methods
	-[AVMetadataItem(MediaMetadataReaderItem) timeRange]
	-[AVMetadataItem(MediaMetadataReaderItem) data]

PVColorSpace(JFX)
	// class methods
	+[PVColorSpace(JFX) jfx_compareAndChooseLesserColorSpace:right:]
	+[PVColorSpace(JFX) jfx_getColorSpaceFromColorPrimaries:transferFunction:matrix:]
	+[PVColorSpace(JFX) jfx_getColorSpaceFromCGColorSpace:]
	+[PVColorSpace(JFX) jfx_getColorSpaceFromPixelBuffer:]
	+[PVColorSpace(JFX) jfx_getColorSpaceFromCaptureColorSpace:]
	+[PVColorSpace(JFX) jfx_getColorSpaceFromImageBuffer:]
	+[PVColorSpace(JFX) JFX_isRec709Gamma:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isP3D65:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isSRGBColorSpace:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isRec601Gamma:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isRec709Linear:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isP3HLG:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isP3PQ:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isRec2100HLG:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isRec2100PQ:transferFunction:matrix:]
	+[PVColorSpace(JFX) JFX_isRec2020Linear:transferFunction:matrix:]
	+[PVColorSpace(JFX) jfx_compareAndChooseGreaterColorSpace:right:]
	+[PVColorSpace(JFX) JFX_nclcDictionaryForColorSpace:]
	+[PVColorSpace(JFX) JFX_compareTriplets:transferFunction:matrix:validNCLCTriplets:]

	// instance methods
	-[PVColorSpace(JFX) jfx_videoExportColorSpace]
	-[PVColorSpace(JFX) jfx_getCVPixelFormatForExport]
	-[PVColorSpace(JFX) jfx_attachColorSpaceToPixelBuffer:]
	-[PVColorSpace(JFX) jfx_getCVPixelFormatForDisplay]

PVImageBuffer(JTAdditions)
	// instance methods
	-[PVImageBuffer(JTAdditions) copyOfUIImage]
	-[PVImageBuffer(JTAdditions) copyOfUIImage:]
	-[PVImageBuffer(JTAdditions) copyOfUIImageFromRectInPixels:atSizeInPixels:]

UIDevice(JFX)
	// instance methods
	-[UIDevice(JFX) jfx_hasTrueDepthFrontCamera]
	-[UIDevice(JFX) jfx_supportsHDR]
	-[UIDevice(JFX) jfx_displayColorSpace]
	-[UIDevice(JFX) jfx_recommendedDisplayColorSpaceForColorSpace:]
	-[UIDevice(JFX) jfx_hasDepthCapableCamera]
	-[UIDevice(JFX) jfx_cpuFamily]
	-[UIDevice(JFX) jfx_memorySize]
	-[UIDevice(JFX) jfx_hasTrueDepthFrontCameraCustomZoomFormat]
	-[UIDevice(JFX) jfx_hasDualBackCamera]
	-[UIDevice(JFX) jfx_numberOfCPU]
	-[UIDevice(JFX) jfx_getCaptureDeviceForType:]
	-[UIDevice(JFX) jfx_supportsHDRExport]
	-[UIDevice(JFX) jfx_deviceCharacteristicsDict]
	-[UIDevice(JFX) jfx_hasHDRCamera]

01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARDeviceOrientationSensor 
01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARFaceAnchor 
01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARFaceData 
01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARFaceTrackingConfiguration 
01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARFrame 
01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARImageData 
01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARMotionSensor 
01 00 1600 /System/Library/Frameworks/ARKit.framework/ARKit: ARSession 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAsset 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetImageGenerator 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReader 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReaderAudioMixOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReaderOutputMetadataAdaptor 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReaderTrackOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReaderVideoCompositionOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetWriter 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetWriterInput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetWriterInputMetadataAdaptor 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetWriterInputPixelBufferAdaptor 
01 00 2500 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureAudioDataOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDataOutputSynchronizer 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDepthDataOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDevice 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDeviceDiscoverySession 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDeviceInput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureMetadataOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCapturePhotoOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCapturePhotoSettings 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureSession 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureVideoDataOutput 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCompositionTrackSegment 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVDepthData 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMetadataFaceObject 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMetadataItem 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableAudioMix 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableAudioMixInputParameters 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableComposition 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableMetadataItem 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableVideoComposition 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputSettingsAssistant 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 1200 /System/Library/Frameworks/AVKit.framework/AVKit: AVPlayerViewController 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVSampleBufferDisplayLayer 
01 00 1440 /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit: AVTAnimoji 
01 00 1440 /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit: AVTAvatar 
01 00 0d40 /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI: AVTAvatarFetchRequest 
01 00 0d40 /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI: AVTAvatarRecordRendering 
01 00 0d40 /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI: AVTAvatarStore 
01 00 1440 /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit: AVTFaceTracker 
01 00 1440 /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit: AVTFaceTrackingInfo 
01 00 1440 /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit: AVTRenderer 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVTimedMetadataGroup 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAKeyframeAnimation 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMBottomBar 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMCaptureCapabilities 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMControlStatusBar 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMCreativeCameraButton 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMDynamicShutterControl 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMElapsedTimeView 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMFlashButton 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMFlipButton 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMFullscreenViewfinderLayout 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMSnapshotView 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMUserPreferences 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMViewfinderReticleView 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMZoomControl 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMZoomControlUtilities 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMZoomSlider 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CAMZoomSliderUtilities 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CASpringAnimation 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 1100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransformLayer 
01 00 1a00 /System/Library/Frameworks/CoreImage.framework/CoreImage: CIContext 
01 00 1a00 /System/Library/Frameworks/CoreImage.framework/CoreImage: CIFilter 
01 00 1a00 /System/Library/Frameworks/CoreImage.framework/CoreImage: CIImage 
01 00 1d00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMMotionManager 
01 00 0c00 /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI: CUShutterButton 
01 00 0300 /System/Library/Frameworks/CallKit.framework/CallKit: CXCallObserver 
01 00 0800 /System/Library/PrivateFrameworks/Espresso.framework/Espresso: EspressoImage2Image 
01 00 0f00 /System/Library/PrivateFrameworks/iMessageApps.framework/iMessageApps: IMADockViewController 
01 00 0f00 /System/Library/PrivateFrameworks/iMessageApps.framework/iMessageApps: IMASticker 
01 00 0400 /System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders: MPSImageBilinearScale 
01 00 0400 /System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders: MPSImageGaussianBlur 
01 00 0400 /System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders: MPSImageGuidedFilter 
01 00 0a00 /System/Library/Frameworks/Messages.framework/Messages: MSMessagesAppViewController 
01 00 1900 /System/Library/Frameworks/MetalKit.framework/MetalKit: MTKTextureLoader 
01 00 1900 /System/Library/Frameworks/MetalKit.framework/MetalKit: MTKView 
01 00 1c00 /System/Library/Frameworks/Metal.framework/Metal: MTLRenderPassDescriptor 
01 00 1c00 /System/Library/Frameworks/Metal.framework/Metal: MTLRenderPipelineDescriptor 
01 00 1c00 /System/Library/Frameworks/Metal.framework/Metal: MTLSamplerDescriptor 
01 00 1c00 /System/Library/Frameworks/Metal.framework/Metal: MTLTextureDescriptor 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateComponentsFormatter 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: NSMutableParagraphStyle 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 2300 /usr/lib/libobjc.A.dylib: NSObject 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: NSShadow 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 2600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 2200 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHAsset 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHAssetChangeRequest 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHAssetCollection 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHAssetCollectionChangeRequest 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHAssetCreationRequest 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHAssetResourceCreationOptions 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHContentEditingInputRequestOptions 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHFetchOptions 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHImageManager 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHImageRequestOptions 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHPhotoLibrary 
01 00 1700 /System/Library/Frameworks/Photos.framework/Photos: PHVideoRequestOptions 
01 00 0b00 /System/Library/Frameworks/PhotosUI.framework/PhotosUI: PUReviewScreenDoneButton 
01 00 0b00 /System/Library/Frameworks/PhotosUI.framework/PhotosUI: PUReviewScreenUtilities 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVCMSampleBuffer 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVColorSpace 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVComputeGrabCut 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVContentRegistry 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVEffect 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVEffectResources 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVFrameSet 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVHostApplicationDelegateHandler 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVImageBuffer 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphEffectNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphGeneratorNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphImageBufferSourceNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphImageSourceNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphRectangleMaskNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphSourceCompositeNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphSourceTrackNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVInstructionGraphTransformNode 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVLivePlayer 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVLivePlayerCARenderLink 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVLivePlayerCameraRenderLink 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVLivePlayerCameraSource 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVLivePlayerImageSource 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVLivePlayerThermalThrottlingPolicy 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVMatrix44Double 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVMultiBlendLayerParams 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVRenderRequest 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVRenderer 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVTransformAnimation 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVVideoCompositing 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVVideoCompositingExporter 
01 00 1000 /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo: PVVideoCompositionInstruction 
01 00 0e00 /System/Library/Frameworks/SceneKit.framework/SceneKit: SCNTransaction 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionView 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCell 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewFlowLayout 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewFlowLayoutInvalidationContext 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UICubicTimingParameters 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRendererFormat 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIIndirectScribbleInteraction 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UINib 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIPasteboard 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIPinchGestureRecognizer 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIRotationGestureRecognizer 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UISelectionFeedbackGenerator 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UISpringTimingParameters 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIStoryboard 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UITextView 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 0240 /System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing: VCPCaptureAnalysisSession 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UIButtonFeedbackGenerator 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UIButtonFeedbackGeneratorConfiguration 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UIDiscreteFeedback 
