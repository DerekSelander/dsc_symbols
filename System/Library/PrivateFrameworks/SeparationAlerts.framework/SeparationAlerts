|| __DATA.__objc_data _OBJC_CLASS_$_SAMonitoringSession
|| __DATA.__objc_data _OBJC_CLASS_$_SAReplay
|| __DATA.__objc_data _OBJC_CLASS_$_SASafeLocationUpdateEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SAScenarioClassifier
|| __DATA.__objc_data _OBJC_CLASS_$_SASingleDeviceRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_SAAudioAccessory
|| __DATA.__objc_data _OBJC_METACLASS_$_SAMonitoringSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SAReplay
|| __DATA.__objc_data _OBJC_METACLASS_$_SASafeLocationUpdateEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SAScenarioClassifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SASingleDeviceRecord
|| __DATA_CONST.__const _NSJSONSerializationNSStringErrorDomain
|| __DATA_DIRTY.__common _TAEventsLog
|| __DATA_DIRTY.__common _TASAEventsLog
|| __DATA_DIRTY.__common _TASALog
|| __DATA_DIRTY.__common _TAStatusLog
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAAnalyticsSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAAudioAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAConnectionEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SADevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SADeviceRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SADeviceUpdateEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SADevicesWithSafeLocationsEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAFenceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAGeofenceEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAMonitoringSessionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAPersistenceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAPersistenceManagerSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAPersistenceStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAPowerLog
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASafeLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SASafeLocationsEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SATime
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SATimeEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SATravelTypeClassifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SAWithYouDetector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAAnalyticsSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAConnectionEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SADevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SADeviceRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SADeviceUpdateEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SADevicesWithSafeLocationsEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAFenceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAGeofenceEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAMonitoringSessionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAPersistenceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAPersistenceManagerSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAPersistenceStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAPowerLog
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASafeLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SASafeLocationsEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SATime
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SATimeEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SATravelTypeClassifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SAWithYouDetector
|| __TEXT.__text _SAGeofenceEventTypeToString
|| __TEXT.__text _TARegisterLogs
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFRelease
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreLocation: _CLLocationCoordinate2DMake
__ CoreLocation: _OBJC_CLASS_$_CLCircularRegion
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreLocation: _OBJC_CLASS_$_CLRegion
__ CoreRoutine: _OBJC_CLASS_$_RTRoutineManager
__ CoreRoutine: _OBJC_CLASS_$_RTStoredVisitFetchOptions
__ CoreRoutine: _RTVisitConfidenceHigh
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedRecoverySuggestionErrorKey
__ Foundation: _NSLog
__ Foundation: _NSStringFromClass
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ LoggingSupport: _OBJC_CLASS_$_OSActivityStream
__ LoggingSupport: _OBJC_CLASS_$_OSLogPersistence
__ MobileBluetooth: _BTAccessoryManagerGetDefault
__ MobileBluetooth: _BTAccessoryManagerGetInEarDetectionEnable
__ MobileBluetooth: _BTAccessoryManagerGetInEarStatus
__ MobileBluetooth: _BTAccessoryManagerGetPrimaryBudSide
__ MobileBluetooth: _BTDeviceAddressFromString
__ MobileBluetooth: _BTDeviceFromAddress
__ MobileBluetooth: _BTDeviceGetDeviceId
__ MobileBluetooth: _BTSessionAttachWithQueue
__ PowerLog: _PLLogRegisteredEvent
__ SPOwner: _OBJC_CLASS_$_SPOwnerInterface
__ SPOwner: _OBJC_CLASS_$_SPOwnerSession
__ SPOwner: _SPBeaconTypeAccessory
__ SPOwner: _SPBeaconTypeDurian
__ SPOwner: _SPBeaconTypeHele
__ SPOwner: _SPBeaconTypeSelfBeaconing
__ TrackingAvoidance: _OBJC_CLASS_$_TAAggressiveScanState
__ TrackingAvoidance: _OBJC_CLASS_$_TACLVisit
__ TrackingAvoidance: _OBJC_CLASS_$_TADeviceInformation
__ TrackingAvoidance: _OBJC_CLASS_$_TAGeoNavigationNotification
__ TrackingAvoidance: _OBJC_CLASS_$_TALocationLite
__ TrackingAvoidance: _OBJC_CLASS_$_TALocationOfInterest
__ TrackingAvoidance: _OBJC_CLASS_$_TAPeopleDensityResult
__ TrackingAvoidance: _OBJC_CLASS_$_TASPAdvertisement
__ TrackingAvoidance: _OBJC_CLASS_$_TASystemState
__ TrackingAvoidance: _OBJC_CLASS_$_TAUserActivity
__ TrackingAvoidance: _OBJC_CLASS_$_TAVehicleStateNotification
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_EHTYPE_id
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x10
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
SAConnectionEvent : NSObject <OSLogCoding, TAEventProtocol>
 @property  NSUUID *identifier
 @property  long long state
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SAConnectionEvent supportsSecureCoding]

  // instance methods
  -[SAConnectionEvent identifier]
  -[SAConnectionEvent encodeWithOSLogCoder:options:maxLength:]
  -[SAConnectionEvent encodeWithCoder:]
  -[SAConnectionEvent descriptionDictionary]
  -[SAConnectionEvent state]
  -[SAConnectionEvent getDate]
  -[SAConnectionEvent date]
  -[SAConnectionEvent .cxx_destruct]
  -[SAConnectionEvent copyWithZone:]
  -[SAConnectionEvent isEqual:]
  -[SAConnectionEvent initWithCoder:]
  -[SAConnectionEvent initWithDeviceUUID:state:date:]


SATimeEvent : NSObject <OSLogCoding, TAEventProtocol>
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SATimeEvent supportsSecureCoding]

  // instance methods
  -[SATimeEvent encodeWithOSLogCoder:options:maxLength:]
  -[SATimeEvent encodeWithCoder:]
  -[SATimeEvent descriptionDictionary]
  -[SATimeEvent getDate]
  -[SATimeEvent date]
  -[SATimeEvent .cxx_destruct]
  -[SATimeEvent copyWithZone:]
  -[SATimeEvent initWithDate:]
  -[SATimeEvent isEqual:]
  -[SATimeEvent initWithCoder:]


SAGeofenceEvent : NSObject <OSLogCoding, TAEventProtocol>
 @property  CLRegion *region
 @property  unsigned long eventType
 @property  NSDate *eventDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SAGeofenceEvent supportsSecureCoding]

  // instance methods
  -[SAGeofenceEvent eventDate]
  -[SAGeofenceEvent encodeWithOSLogCoder:options:maxLength:]
  -[SAGeofenceEvent encodeWithCoder:]
  -[SAGeofenceEvent descriptionDictionary]
  -[SAGeofenceEvent getDate]
  -[SAGeofenceEvent .cxx_destruct]
  -[SAGeofenceEvent eventType]
  -[SAGeofenceEvent copyWithZone:]
  -[SAGeofenceEvent region]
  -[SAGeofenceEvent isEqual:]
  -[SAGeofenceEvent initWithCoder:]
  -[SAGeofenceEvent initWithRegion:eventType:eventDate:]


SASingleDeviceRecord : NSObject <NSSecureCoding>
 @property  NSUUID *uuid
 @property  SADevice *device
 @property  unsigned long withYouStatus
 @property  long long connectionState
 @property  unsigned long notificationState
 @property  TASPAdvertisement *latestAdvertisement
 @property  TASPAdvertisement *latestNOAdvertisement
 @property  TASPAdvertisement *latestWildAdvertisement
 @property  NSDate *lastWithYouDate
 @property  NSDate *lastCompanionDisconnectionDate
 @property  unsigned long currentScenarioClass
 @property  unsigned long currentMonitoringSessionState
 @property  unsigned long monitoringSessionStateAtTimeOfFirstAdv
 @property  NSMutableArray *uuidsOfRelatedDevices
 @property  BOOL hasSurfacedNotification
 @property  BOOL isConnected
 @property  NSDate *firstAdvertisementAfterScenarioTransition
 @property  NSDate *currentScenarioTime
 @property  <SAAnalyticsServiceProtocol> *analytics
 @property  <SATimeServiceProtocol> *clock

  // class methods
  +[SASingleDeviceRecord supportsSecureCoding]

  // instance methods
  -[SASingleDeviceRecord setClock:]
  -[SASingleDeviceRecord setAnalytics:]
  -[SASingleDeviceRecord clock]
  -[SASingleDeviceRecord analytics]
  -[SASingleDeviceRecord connectionState]
  -[SASingleDeviceRecord isConnected]
  -[SASingleDeviceRecord encodeWithCoder:]
  -[SASingleDeviceRecord setConnectionState:]
  -[SASingleDeviceRecord uuid]
  -[SASingleDeviceRecord .cxx_destruct]
  -[SASingleDeviceRecord setDevice:]
  -[SASingleDeviceRecord device]
  -[SASingleDeviceRecord latestAdvertisement]
  -[SASingleDeviceRecord initWithCoder:]
  -[SASingleDeviceRecord notificationState]
  -[SASingleDeviceRecord setNotificationState:]
  -[SASingleDeviceRecord initWithDevice:clock:analytics:]
  -[SASingleDeviceRecord initWithConnectionEvent:clock:analytics:]
  -[SASingleDeviceRecord updateLatestAdvertisement:]
  -[SASingleDeviceRecord updateLastWithYouDate:]
  -[SASingleDeviceRecord updateLastCompanionDisconnectionDate:]
  -[SASingleDeviceRecord updateWithYouStatus:]
  -[SASingleDeviceRecord updateFirstAdvertisementAfterScenarioTransition:]
  -[SASingleDeviceRecord updateCurrentScenarioClass:]
  -[SASingleDeviceRecord publishAnalyticsForFirstAdv:scenario:]
  -[SASingleDeviceRecord resetRelatedDevices]
  -[SASingleDeviceRecord insertRelatedDevice:]
  -[SASingleDeviceRecord withYouStatus]
  -[SASingleDeviceRecord setWithYouStatus:]
  -[SASingleDeviceRecord latestNOAdvertisement]
  -[SASingleDeviceRecord latestWildAdvertisement]
  -[SASingleDeviceRecord lastWithYouDate]
  -[SASingleDeviceRecord lastCompanionDisconnectionDate]
  -[SASingleDeviceRecord currentScenarioClass]
  -[SASingleDeviceRecord currentMonitoringSessionState]
  -[SASingleDeviceRecord setCurrentMonitoringSessionState:]
  -[SASingleDeviceRecord monitoringSessionStateAtTimeOfFirstAdv]
  -[SASingleDeviceRecord uuidsOfRelatedDevices]
  -[SASingleDeviceRecord setUuidsOfRelatedDevices:]
  -[SASingleDeviceRecord hasSurfacedNotification]
  -[SASingleDeviceRecord setHasSurfacedNotification:]
  -[SASingleDeviceRecord firstAdvertisementAfterScenarioTransition]
  -[SASingleDeviceRecord currentScenarioTime]


SADevice : NSObject <OSLogCoding, TAEventProtocol>
 @property  NSUUID *identifier
 @property  NSUUID *groupIdentifier
 @property  NSString *macAddress
 @property  long long partIdentifier
 @property  NSString *name
 @property  NSString *model
 @property  NSString *systemVersion
 @property  long long vendorId
 @property  long long productId
 @property  unsigned long deviceType
 @property  BOOL notifyEnabled
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SADevice supportsSecureCoding]

  // instance methods
  -[SADevice macAddress]
  -[SADevice identifier]
  -[SADevice isReallyEqual:]
  -[SADevice encodeWithOSLogCoder:options:maxLength:]
  -[SADevice model]
  -[SADevice systemVersion]
  -[SADevice groupIdentifier]
  -[SADevice encodeWithCoder:]
  -[SADevice descriptionDictionary]
  -[SADevice getDate]
  -[SADevice date]
  -[SADevice .cxx_destruct]
  -[SADevice deviceType]
  -[SADevice notifyEnabled]
  -[SADevice setMacAddress:]
  -[SADevice productId]
  -[SADevice vendorId]
  -[SADevice copyWithZone:]
  -[SADevice name]
  -[SADevice isEqual:]
  -[SADevice initWithCoder:]
  -[SADevice partIdentifier]
  -[SADevice initWithDeviceUUID:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:]
  -[SADevice initWithDeviceUUID:groupIdentifier:macAddress:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:]
  -[SADevice initWithDeviceUUID:groupIdentifier:macAddress:partIdentifier:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:]


SAPersistenceStore : NSObject <NSSecureCoding>
 @property  NSMutableDictionary *monitoringSessionRecord

  // class methods
  +[SAPersistenceStore supportsSecureCoding]

  // instance methods
  -[SAPersistenceStore encodeWithCoder:]
  -[SAPersistenceStore .cxx_destruct]
  -[SAPersistenceStore setMonitoringSessionRecord:]
  -[SAPersistenceStore monitoringSessionRecord]
  -[SAPersistenceStore isEqual:]
  -[SAPersistenceStore initWithCoder:]


SASafeLocation : NSObject <OSLogCoding, TAEventProtocol>
 @property  NSUUID *identifier
 @property  double latitude
 @property  double longitude
 @property  double radius
 @property  unsigned long referenceFrame
 @property  NSString *name
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SASafeLocation supportsSecureCoding]

  // instance methods
  -[SASafeLocation latitude]
  -[SASafeLocation radius]
  -[SASafeLocation identifier]
  -[SASafeLocation isReallyEqual:]
  -[SASafeLocation encodeWithOSLogCoder:options:maxLength:]
  -[SASafeLocation encodeWithCoder:]
  -[SASafeLocation descriptionDictionary]
  -[SASafeLocation longitude]
  -[SASafeLocation getDate]
  -[SASafeLocation initWithLocationUUID:latitude:longitude:radius:referenceFrame:name:date:]
  -[SASafeLocation date]
  -[SASafeLocation .cxx_destruct]
  -[SASafeLocation referenceFrame]
  -[SASafeLocation copyWithZone:]
  -[SASafeLocation name]
  -[SASafeLocation isEqual:]
  -[SASafeLocation initWithCoder:]


SASafeLocationUpdateEvent : NSObject <OSLogCoding, TAEventProtocol>
 @property  SASafeLocation *safeLocation
 @property  unsigned long eventType
 @property  BOOL lastEvent
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SASafeLocationUpdateEvent supportsSecureCoding]

  // instance methods
  -[SASafeLocationUpdateEvent encodeWithOSLogCoder:options:maxLength:]
  -[SASafeLocationUpdateEvent encodeWithCoder:]
  -[SASafeLocationUpdateEvent descriptionDictionary]
  -[SASafeLocationUpdateEvent getDate]
  -[SASafeLocationUpdateEvent date]
  -[SASafeLocationUpdateEvent .cxx_destruct]
  -[SASafeLocationUpdateEvent eventType]
  -[SASafeLocationUpdateEvent copyWithZone:]
  -[SASafeLocationUpdateEvent lastEvent]
  -[SASafeLocationUpdateEvent isEqual:]
  -[SASafeLocationUpdateEvent initWithCoder:]
  -[SASafeLocationUpdateEvent initWithSafeLocation:eventType:lastEvent:date:]
  -[SASafeLocationUpdateEvent safeLocation]


SASafeLocationsEvent : NSObject <TAEventProtocol>
 @property  NSDictionary *safeLocations
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SASafeLocationsEvent supportsSecureCoding]

  // instance methods
  -[SASafeLocationsEvent encodeWithOSLogCoder:options:maxLength:]
  -[SASafeLocationsEvent encodeWithCoder:]
  -[SASafeLocationsEvent descriptionDictionary]
  -[SASafeLocationsEvent getDate]
  -[SASafeLocationsEvent date]
  -[SASafeLocationsEvent .cxx_destruct]
  -[SASafeLocationsEvent safeLocations]
  -[SASafeLocationsEvent copyWithZone:]
  -[SASafeLocationsEvent initWithSafeLocations:date:]
  -[SASafeLocationsEvent isEqual:]
  -[SASafeLocationsEvent initWithCoder:]


SAReplay : NSObject <OSLogPersistenceDelegate, OSActivityStreamDelegate, OSDeviceDelegate>
 @property  NSMutableDictionary *eventMessages
 @property  NSMutableArray *eventOrder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SAReplay .cxx_destruct]
  -[SAReplay streamDidStart:]
  -[SAReplay streamDidStop:]
  -[SAReplay persistence:results:error:]
  -[SAReplay persistenceDidFinishReadingForStartDate:endDate:]
  -[SAReplay activityStream:deviceUDID:deviceID:status:error:]
  -[SAReplay streamDidFail:error:]
  -[SAReplay activityStream:results:]
  -[SAReplay initWithLogArchive:outputPath:inputPersistencePath:]
  -[SAReplay replayWithStartDate:endDate:]
  -[SAReplay replaySingleEventLogString:]
  -[SAReplay eventMessages]
  -[SAReplay setEventMessages:]
  -[SAReplay eventOrder]
  -[SAReplay setEventOrder:]


SATravelTypeClassifier : NSObject <SATravelTypeClassifierServiceProtocol>
 @property  <SATimeServiceProtocol> *clock
 @property  NSHashTable *clients
 @property  unsigned long currentTravelType
 @property  NSDate *currentTravelTypeChangeDate
 @property  unsigned long travelType

  // class methods
  +[SATravelTypeClassifier convertSATravelTypeToString:]

  // instance methods
  -[SATravelTypeClassifier setClock:]
  -[SATravelTypeClassifier ingestTAEvent:]
  -[SATravelTypeClassifier setClients:]
  -[SATravelTypeClassifier clock]
  -[SATravelTypeClassifier removeClient:]
  -[SATravelTypeClassifier clients]
  -[SATravelTypeClassifier initWithClock:]
  -[SATravelTypeClassifier addClient:]
  -[SATravelTypeClassifier .cxx_destruct]
  -[SATravelTypeClassifier setCurrentTravelType:]
  -[SATravelTypeClassifier currentTravelTypeChangeDate]
  -[SATravelTypeClassifier _vehicularHintsToString:]
  -[SATravelTypeClassifier _setNewTravelType:hints:]
  -[SATravelTypeClassifier _notifyAllClientsOfTravelTypeChangeFrom:to:hints:]
  -[SATravelTypeClassifier travelType]
  -[SATravelTypeClassifier _handleUserActivityEvent:]
  -[SATravelTypeClassifier _handleVehicleStateEvent:]
  -[SATravelTypeClassifier setCurrentTravelTypeChangeDate:]
  -[SATravelTypeClassifier currentTravelType]


SAFenceManager : NSObject <SAFenceManagerServiceProtocol, SAFenceManagerRequestProtocol>
 @property  NSHashTable *clients
 @property  NSMutableDictionary *deviceUUIDsByUnsafeRegionIdentifier
 @property  NSMutableDictionary *deviceUUIDsBySafeLocation
 @property  NSMutableDictionary *safeLocationsByRegionIdentifier
 @property  NSMutableDictionary *statesByRegionIdentifier
 @property  NSMutableDictionary *regionsByRegionIdentifier

  // instance methods
  -[SAFenceManager ingestTAEvent:]
  -[SAFenceManager setClients:]
  -[SAFenceManager removeClient:]
  -[SAFenceManager clients]
  -[SAFenceManager addClient:]
  -[SAFenceManager setRegionsByRegionIdentifier:]
  -[SAFenceManager statesByRegionIdentifier]
  -[SAFenceManager getUnsafeLocationCount]
  -[SAFenceManager stopMonitorUnsafeLocationExit:forDevice:]
  -[SAFenceManager notifyState:forSafeLocationRegion:]
  -[SAFenceManager isSafeLocation:]
  -[SAFenceManager .cxx_destruct]
  -[SAFenceManager setSafeLocationsByRegionIdentifier:]
  -[SAFenceManager regionsByRegionIdentifier]
  -[SAFenceManager deviceUUIDsBySafeLocation]
  -[SAFenceManager startMonitorSafeLocation:forDevice:]
  -[SAFenceManager getRegionForSafeLocation:]
  -[SAFenceManager startMonitorUnsafeLocationExit:forDevice:]
  -[SAFenceManager setStatesByRegionIdentifier:]
  -[SAFenceManager notifyState:forUnsafeLocationRegion:]
  -[SAFenceManager removeLocationsForDeviceUuid:]
  -[SAFenceManager getSafeLocationCount]
  -[SAFenceManager setDeviceUUIDsBySafeLocation:]
  -[SAFenceManager deviceUUIDsByUnsafeRegionIdentifier]
  -[SAFenceManager safeLocationsByRegionIdentifier]
  -[SAFenceManager handleFenceEvent:forRegion:]
  -[SAFenceManager setDeviceUUIDsByUnsafeRegionIdentifier:]
  -[SAFenceManager init]
  -[SAFenceManager stopMonitorSafeLocation:forDevice:]


SADeviceUpdateEvent : NSObject <OSLogCoding, TAEventProtocol>
 @property  SADevice *device
 @property  unsigned long eventType
 @property  BOOL lastEvent
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SADeviceUpdateEvent supportsSecureCoding]

  // instance methods
  -[SADeviceUpdateEvent encodeWithOSLogCoder:options:maxLength:]
  -[SADeviceUpdateEvent encodeWithCoder:]
  -[SADeviceUpdateEvent descriptionDictionary]
  -[SADeviceUpdateEvent getDate]
  -[SADeviceUpdateEvent date]
  -[SADeviceUpdateEvent .cxx_destruct]
  -[SADeviceUpdateEvent eventType]
  -[SADeviceUpdateEvent device]
  -[SADeviceUpdateEvent copyWithZone:]
  -[SADeviceUpdateEvent lastEvent]
  -[SADeviceUpdateEvent isEqual:]
  -[SADeviceUpdateEvent initWithCoder:]
  -[SADeviceUpdateEvent initWithDevice:eventType:lastEvent:date:]


SADevicesWithSafeLocationsEvent : NSObject <OSLogCoding, TAEventProtocol>
 @property  NSDictionary *devices
 @property  NSDictionary *safeLocations
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SADevicesWithSafeLocationsEvent supportsSecureCoding]

  // instance methods
  -[SADevicesWithSafeLocationsEvent encodeWithOSLogCoder:options:maxLength:]
  -[SADevicesWithSafeLocationsEvent encodeWithCoder:]
  -[SADevicesWithSafeLocationsEvent devices]
  -[SADevicesWithSafeLocationsEvent descriptionDictionary]
  -[SADevicesWithSafeLocationsEvent getDate]
  -[SADevicesWithSafeLocationsEvent date]
  -[SADevicesWithSafeLocationsEvent .cxx_destruct]
  -[SADevicesWithSafeLocationsEvent initWithDevices:safeLocationUUIDs:date:]
  -[SADevicesWithSafeLocationsEvent safeLocations]
  -[SADevicesWithSafeLocationsEvent copyWithZone:]
  -[SADevicesWithSafeLocationsEvent isEqual:]
  -[SADevicesWithSafeLocationsEvent initWithCoder:]


SAPowerLog : NSObject <SAPowerLogServiceProtocol>
 @property  <SATimeServiceProtocol> *clock
 @property  NSHashTable *clients
 @property  NSDate *startTimestamp
 @property  unsigned long visitCount
 @property  double totalVisitDuration
 @property  unsigned long btScanCount
 @property  unsigned long geofenceCount
 @property  unsigned long gpsLocationRequestCount
 @property  unsigned long wifiLocationRequestCount
 @property  unsigned long separationAlertsCount
 @property  NSMutableSet *monitoredDevices

  // instance methods
  -[SAPowerLog setClock:]
  -[SAPowerLog ingestTAEvent:]
  -[SAPowerLog setClients:]
  -[SAPowerLog clock]
  -[SAPowerLog totalVisitDuration]
  -[SAPowerLog removeClient:]
  -[SAPowerLog startTimestamp]
  -[SAPowerLog clients]
  -[SAPowerLog increaseWifiLocationRequestCount]
  -[SAPowerLog initWithClock:]
  -[SAPowerLog addClient:]
  -[SAPowerLog setMonitoredDevices:]
  -[SAPowerLog increaseSeparationAlertsCount:]
  -[SAPowerLog wifiLocationRequestCount]
  -[SAPowerLog setVisitCount:]
  -[SAPowerLog .cxx_destruct]
  -[SAPowerLog setBtScanCount:]
  -[SAPowerLog increaseGeofenceCount]
  -[SAPowerLog gpsLocationRequestCount]
  -[SAPowerLog btScanCount]
  -[SAPowerLog setGeofenceCount:]
  -[SAPowerLog monitoredDevices]
  -[SAPowerLog separationAlertsCount]
  -[SAPowerLog resetStatistics]
  -[SAPowerLog sendPowerLog]
  -[SAPowerLog increaseGpsLocationRequestCount]
  -[SAPowerLog setSeparationAlertsCount:]
  -[SAPowerLog increaseBTScanCount]
  -[SAPowerLog geofenceCount]
  -[SAPowerLog setTotalVisitDuration:]
  -[SAPowerLog setStartTimestamp:]
  -[SAPowerLog addMonitoredDevice:]
  -[SAPowerLog setGpsLocationRequestCount:]
  -[SAPowerLog visitCount]
  -[SAPowerLog setWifiLocationRequestCount:]


SAMonitoringSession : NSObject <NSSecureCoding>
 @property  NSUUID *deviceUUID
 @property  CLCircularRegion *geofence
 @property  unsigned long state
 @property  unsigned long scenario
 @property  NSDate *trackedTravelingStartDate
 @property  NSDate *travelingGeofenceExitDate
 @property  NSDate *earlyVehicularStateChangeDate
 @property  TALocationLite *trackedTravelingStartLocation
 @property  TALocationLite *firstNotWithYouLocation
 @property  SAScenarioClassifier *scenarioClassifier
 @property  BOOL earlyVehicularTrigger
 @property  BOOL earlyAirplaneTrigger
 @property  NSDate *caLastStateTransition
 @property  CLLocation *caSeparationLocation

  // class methods
  +[SAMonitoringSession supportsSecureCoding]

  // instance methods
  -[SAMonitoringSession setScenario:]
  -[SAMonitoringSession encodeWithCoder:]
  -[SAMonitoringSession descriptionDictionary]
  -[SAMonitoringSession state]
  -[SAMonitoringSession scenario]
  -[SAMonitoringSession .cxx_destruct]
  -[SAMonitoringSession copyWithZone:]
  -[SAMonitoringSession isEqual:]
  -[SAMonitoringSession deviceUUID]
  -[SAMonitoringSession setState:]
  -[SAMonitoringSession initWithCoder:]
  -[SAMonitoringSession setDeviceUUID:]
  -[SAMonitoringSession initWithDeviceUUID:state:geofence:scenario:trackedTravelingStartDate:]
  -[SAMonitoringSession geofence]
  -[SAMonitoringSession setGeofence:]
  -[SAMonitoringSession trackedTravelingStartDate]
  -[SAMonitoringSession setTrackedTravelingStartDate:]
  -[SAMonitoringSession travelingGeofenceExitDate]
  -[SAMonitoringSession setTravelingGeofenceExitDate:]
  -[SAMonitoringSession earlyVehicularStateChangeDate]
  -[SAMonitoringSession setEarlyVehicularStateChangeDate:]
  -[SAMonitoringSession trackedTravelingStartLocation]
  -[SAMonitoringSession setTrackedTravelingStartLocation:]
  -[SAMonitoringSession firstNotWithYouLocation]
  -[SAMonitoringSession setFirstNotWithYouLocation:]
  -[SAMonitoringSession scenarioClassifier]
  -[SAMonitoringSession setScenarioClassifier:]
  -[SAMonitoringSession earlyVehicularTrigger]
  -[SAMonitoringSession setEarlyVehicularTrigger:]
  -[SAMonitoringSession earlyAirplaneTrigger]
  -[SAMonitoringSession setEarlyAirplaneTrigger:]
  -[SAMonitoringSession caLastStateTransition]
  -[SAMonitoringSession setCaLastStateTransition:]
  -[SAMonitoringSession caSeparationLocation]
  -[SAMonitoringSession setCaSeparationLocation:]


SAMonitoringSessionManager : NSObject <SAMonitoringSessionManagerServiceProtocol, SAScenarioClassifierClientProtocol, SAWithYouDetectorClientProtocol, SATimeClientProtocol, SATravelTypeClassifierClientProtocol>
 @property  <SATimeServiceProtocol> *clock
 @property  <SAWithYouDetectorServiceProtocol> *withYouDetector
 @property  <SAGeoFenceRequestProtocol> *fenceRequestServicer
 @property  <SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol> *fenceManager
 @property  NSHashTable *clients
 @property  NSMutableDictionary *deviceUUIDtoMonitoringSession
 @property  TALocationLite *lastLocation
 @property  SADeviceRecord *deviceRecord
 @property  <SAAnalyticsServiceProtocol> *analytics
 @property  <SATravelTypeClassifierServiceProtocol> *travelTypeClassifier
 @property  NSMutableDictionary *devices
 @property  NSMutableDictionary *safeLocations
 @property  NSMutableDictionary *deviceUUIDtoSafeLocationUUIDs
 @property  BOOL requestedPeriodicScan
 @property  unsigned long disabledReasons
 @property  NSDate *caLastAlertDate
 @property  long long caBroughtOutOnTravel
 @property  NSMutableDictionary *deviceUUIDtoAlertContext
 @property  unsigned long caCurrentVehicularState
 @property  BOOL caIsVehicularBTHintOn
 @property  SAPersistenceManager *persistenceManager
 @property  SAAudioAccessory *audioAccessoryManager
 @property  NSUUID *nextScheduledAlarmForPersistenceWrite
 @property  NSUUID *scheduledAlarmForForceUpdateWithYouStatus
 @property  <TAEventProtocol> *currentVisitOrLOIEvent
 @property  <TAEventProtocol> *previousVisitOrLOIEvent
 @property  NSDate *timeOfAttemptToLoadFromPersistence
 @property  BOOL isCompanionConnected
 @property  NSMutableSet *devicesWithToBePopulatedTrackedTravelingStartLocation
 @property  NSMutableSet *devicesWithPendingTransition
 @property  BOOL isInAirplaneMode
 @property  BOOL enabled
 @property  BOOL standby

  // class methods
  +[SAMonitoringSessionManager convertSAMonitoringSessionStateToString:]

  // instance methods
  -[SAMonitoringSessionManager setClock:]
  -[SAMonitoringSessionManager deviceRecord]
  -[SAMonitoringSessionManager persistenceManager]
  -[SAMonitoringSessionManager ingestTAEvent:]
  -[SAMonitoringSessionManager setClients:]
  -[SAMonitoringSessionManager setAnalytics:]
  -[SAMonitoringSessionManager createLocationFromCircularRegion:forDevice:withContext:]
  -[SAMonitoringSessionManager clock]
  -[SAMonitoringSessionManager analytics]
  -[SAMonitoringSessionManager setStandby:]
  -[SAMonitoringSessionManager removeClient:]
  -[SAMonitoringSessionManager setDeviceRecord:]
  -[SAMonitoringSessionManager shouldIssueBookendedNotificationForDevice:]
  -[SAMonitoringSessionManager scenarioClassForDeviceUUID:]
  -[SAMonitoringSessionManager setCaBroughtOutOnTravel:]
  -[SAMonitoringSessionManager lastLocation]
  -[SAMonitoringSessionManager clients]
  -[SAMonitoringSessionManager setLastLocation:]
  -[SAMonitoringSessionManager setDeviceUUIDtoMonitoringSession:]
  -[SAMonitoringSessionManager _isOnlyMonitoringDisconnectedCompanionDevice]
  -[SAMonitoringSessionManager standby]
  -[SAMonitoringSessionManager handleGeofenceExitedForDeviceUUID:]
  -[SAMonitoringSessionManager setDisabledReasons:]
  -[SAMonitoringSessionManager fenceManager]
  -[SAMonitoringSessionManager enoughTimeHasPassedBeforeSurfacingAlert:forAlertForDevice:alertType:]
  -[SAMonitoringSessionManager monitoringSessionState:matchesWithScenarioClass:]
  -[SAMonitoringSessionManager setPersistenceManager:]
  -[SAMonitoringSessionManager devicesWithPendingTransition]
  -[SAMonitoringSessionManager setSafeLocations:]
  -[SAMonitoringSessionManager fenceRequestServicer]
  -[SAMonitoringSessionManager requestToStartBackgroundScanning]
  -[SAMonitoringSessionManager stopPeriodicScansIfNotNeeded]
  -[SAMonitoringSessionManager setAudioAccessoryManager:]
  -[SAMonitoringSessionManager minimumTimeSinceScenarioTransitionForAlertForDevice:alertType:]
  -[SAMonitoringSessionManager caIsVehicularBTHintOn]
  -[SAMonitoringSessionManager setRequestedPeriodicScan:]
  -[SAMonitoringSessionManager addClient:]
  -[SAMonitoringSessionManager handleSystemStateChanged:]
  -[SAMonitoringSessionManager audioAccessoryManager]
  -[SAMonitoringSessionManager updatedWithYouStatusFrom:to:forDeviceWithUUID:]
  -[SAMonitoringSessionManager devicesWithToBePopulatedTrackedTravelingStartLocation]
  -[SAMonitoringSessionManager allDevicesInSafeLocation]
  -[SAMonitoringSessionManager disabledReasons]
  -[SAMonitoringSessionManager notifyLeftBehind:withRegion:isEarlyVehicularTrigger:]
  -[SAMonitoringSessionManager attemptToPopulateTrackedTravelingStartLocationForDevice:]
  -[SAMonitoringSessionManager didChangeTravelTypeFrom:to:hints:]
  -[SAMonitoringSessionManager notifyWhileTraveling:isBookendingTravel:]
  -[SAMonitoringSessionManager createMonitoringDevice:]
  -[SAMonitoringSessionManager handleNewSafeLocation:]
  -[SAMonitoringSessionManager devices]
  -[SAMonitoringSessionManager addSafeLocationsIfNeededPerNewSet:forDevice:]
  -[SAMonitoringSessionManager addSafeLocation:forDeviceUUID:]
  -[SAMonitoringSessionManager caBroughtOutOnTravel]
  -[SAMonitoringSessionManager travelTypeClassifier]
  -[SAMonitoringSessionManager deviceShouldTransitionWithLastScenarioChangeDate:lastWithYouDate:]
  -[SAMonitoringSessionManager handleRemovedSafeLocation:]
  -[SAMonitoringSessionManager addTravelFenceForDevice:]
  -[SAMonitoringSessionManager handleModifiedSafeLocation:forDeviceUUID:]
  -[SAMonitoringSessionManager timeDelayForRetryScanForAlertForDevice:alertType:]
  -[SAMonitoringSessionManager setIsInAirplaneMode:]
  -[SAMonitoringSessionManager deviceUUIDtoAlertContext]
  -[SAMonitoringSessionManager previousVisitOrLOIEvent]
  -[SAMonitoringSessionManager setPreviousVisitOrLOIEvent:]
  -[SAMonitoringSessionManager .cxx_destruct]
  -[SAMonitoringSessionManager scheduledAlarmForForceUpdateWithYouStatus]
  -[SAMonitoringSessionManager notifyWhenLeftBehind:]
  -[SAMonitoringSessionManager scheduleNextForceUpdateWithYouStatusFromReferenceDate:forAlertForDevice:alertType:]
  -[SAMonitoringSessionManager setFenceManager:]
  -[SAMonitoringSessionManager computeRemovedSafeLocations:]
  -[SAMonitoringSessionManager needPeriodicScan]
  -[SAMonitoringSessionManager setEnabled:]
  -[SAMonitoringSessionManager setDevices:]
  -[SAMonitoringSessionManager setTravelTypeClassifier:]
  -[SAMonitoringSessionManager setScheduledAlarmForForceUpdateWithYouStatus:]
  -[SAMonitoringSessionManager addDisableReason:]
  -[SAMonitoringSessionManager currentVisitOrLOIEvent]
  -[SAMonitoringSessionManager setDeviceUUIDtoSafeLocationUUIDs:]
  -[SAMonitoringSessionManager safeLocations]
  -[SAMonitoringSessionManager didForceUpdateWithYouStatus]
  -[SAMonitoringSessionManager initWithWithYouDetector:fenceRequestServicer:fenceManager:travelTypeClassifier:clock:deviceRecord:analytics:persistenceManager:audioAccessoryManager:]
  -[SAMonitoringSessionManager setNextScheduledAlarmForPersistenceWrite:]
  -[SAMonitoringSessionManager setDevicesWithToBePopulatedTrackedTravelingStartLocation:]
  -[SAMonitoringSessionManager _isOnlyMonitoringCompanionDevice]
  -[SAMonitoringSessionManager startPeriodicScansIfNeeded]
  -[SAMonitoringSessionManager isInAirplaneMode]
  -[SAMonitoringSessionManager removeSafeLocationsIfNeededPerNewSet:forDevice:]
  -[SAMonitoringSessionManager setCaIsVehicularBTHintOn:]
  -[SAMonitoringSessionManager updateLocation:]
  -[SAMonitoringSessionManager checkInEarStatus:]
  -[SAMonitoringSessionManager withYouDetector]
  -[SAMonitoringSessionManager setFenceRequestServicer:]
  -[SAMonitoringSessionManager handleGeofenceEvent:]
  -[SAMonitoringSessionManager caCurrentVehicularState]
  -[SAMonitoringSessionManager forceStandbyMode:]
  -[SAMonitoringSessionManager setWithYouDetector:]
  -[SAMonitoringSessionManager didChangeScenarioClassFrom:to:forDevice:]
  -[SAMonitoringSessionManager updateSafeLocations:]
  -[SAMonitoringSessionManager startSafeLocation:forDevice:]
  -[SAMonitoringSessionManager alarmFiredForUUID:]
  -[SAMonitoringSessionManager stopSafeLocation:forDevice:]
  -[SAMonitoringSessionManager checkForDevicesNeedingTransition]
  -[SAMonitoringSessionManager handleSeparationForDeviceUUID:withSafeLocationRecommendation:context:]
  -[SAMonitoringSessionManager caLastAlertDate]
  -[SAMonitoringSessionManager bootstrapMonitoringSessionRecord:]
  -[SAMonitoringSessionManager stopPeriodicScans]
  -[SAMonitoringSessionManager setDevicesWithPendingTransition:]
  -[SAMonitoringSessionManager isAnyTrackedWhileTraveling]
  -[SAMonitoringSessionManager storeSeparationLocation:]
  -[SAMonitoringSessionManager setDeviceUUIDtoAlertContext:]
  -[SAMonitoringSessionManager shouldIssueBookendedNotificationBasedOnLocationForDevice:]
  -[SAMonitoringSessionManager nextScheduledAlarmForPersistenceWrite]
  -[SAMonitoringSessionManager enabled]
  -[SAMonitoringSessionManager modifyDevice:]
  -[SAMonitoringSessionManager deviceUUIDtoMonitoringSession]
  -[SAMonitoringSessionManager setTimeOfAttemptToLoadFromPersistence:]
  -[SAMonitoringSessionManager isWithinCurrentVisitOrLOI:]
  -[SAMonitoringSessionManager setCaLastAlertDate:]
  -[SAMonitoringSessionManager deviceUUIDtoSafeLocationUUIDs]
  -[SAMonitoringSessionManager stateForDeviceUUID:]
  -[SAMonitoringSessionManager anyDeviceInUnsafeLocation]
  -[SAMonitoringSessionManager isCompanionConnected]
  -[SAMonitoringSessionManager setCurrentVisitOrLOIEvent:]
  -[SAMonitoringSessionManager notifyEarlyLeftBehind:]
  -[SAMonitoringSessionManager requestToStopBackgroundScanning]
  -[SAMonitoringSessionManager addDevice:isLastDeviceEvent:]
  -[SAMonitoringSessionManager removeDeviceWithUUID:isLastDeviceEvent:]
  -[SAMonitoringSessionManager requestedPeriodicScan]
  -[SAMonitoringSessionManager changeMonitoringSessionState:toState:]
  -[SAMonitoringSessionManager updateDevicesWithSafeLocations:]
  -[SAMonitoringSessionManager startPeriodicScans]
  -[SAMonitoringSessionManager isAnyInTrackedInUnsafeLocation]
  -[SAMonitoringSessionManager addDevicesIfNeededPerEvent:]
  -[SAMonitoringSessionManager removeDevicesIfNeededPerEvent:]
  -[SAMonitoringSessionManager removeTravelFenceForDevice:]
  -[SAMonitoringSessionManager earlyVehicularTriggerForDeviceUUID:]
  -[SAMonitoringSessionManager configureBackgroundScanning]
  -[SAMonitoringSessionManager setUpTravelingGeofencesOnAirplaneModeToggleOffIfNeeded]
  -[SAMonitoringSessionManager cancelMonitoringDevice:]
  -[SAMonitoringSessionManager removeSafeLocation:forDeviceUUID:]
  -[SAMonitoringSessionManager getLastScenarioChangeDateAmongAllDevices]
  -[SAMonitoringSessionManager removeDisableReason:]
  -[SAMonitoringSessionManager checkReunion:to:forDeviceWithUUID:]
  -[SAMonitoringSessionManager setSafeLocations:forDeviceUUID:]
  -[SAMonitoringSessionManager requestToFetchLastVisit]
  -[SAMonitoringSessionManager convertSADeviceTypeForCoreAnalytics:]
  -[SAMonitoringSessionManager setCaCurrentVehicularState:]
  -[SAMonitoringSessionManager determineTrackedTravelingCount]
  -[SAMonitoringSessionManager removeAndStopSafeLocationsForDeviceUUID:]
  -[SAMonitoringSessionManager shouldIssueBookendedNotificationBasedOnTimeForDevice:]
  -[SAMonitoringSessionManager timeOfAttemptToLoadFromPersistence]
  -[SAMonitoringSessionManager setIsCompanionConnected:]
  -[SAMonitoringSessionManager scheduleNextPersistenceWrite]
  -[SAMonitoringSessionManager handleModifiedSafeLocation:]


SAWithYouDetector : NSObject <SAWithYouDetectorServiceProtocol, SATimeClientProtocol, SATravelTypeClassifierClientProtocol>
 @property  <SATimeServiceProtocol> *clock
 @property  <SABluetoothScanRequestProtocol> *bluetoothScanner
 @property  <SALocationRequestProtocol> *locationRequester
 @property  <SAAnalyticsServiceProtocol> *analytics
 @property  NSHashTable *clients
 @property  SADeviceRecord *deviceRecord
 @property  BOOL longScanIsOngoing
 @property  BOOL requestedShortScan
 @property  NSDate *lastLongScanRequest
 @property  NSDate *lastStartOfScan
 @property  NSDate *lastEndOfScan
 @property  BOOL isNotifyWhileTravelingEnabled
 @property  BOOL isPeriodicScansNeeded
 @property  BOOL isInVehicularTravel
 @property  NSDate *nextOpportunisticScanDate
 @property  NSUUID *nextScheduledAlarm
 @property  NSDate *previousBufferEmptyTime
 @property  NSDate *initializationTime
 @property  NSMutableSet *relevantDevicesToFindDuringLongScan
 @property  NSMutableDictionary *foundDevicesDuringCurrentScan
 @property  BOOL isFindingRelevantDevices
 @property  NSDate *lastRelevantDeviceFoundTime
 @property  unsigned long lastLongScanContext
 @property  unsigned long extraFoundHELECount
 @property  unsigned long extraFoundNonHELECount
 @property  NSDate *lastExtraHELEFoundTime
 @property  NSDate *lastExtraNonHELEFoundTime

  // class methods
  +[SAWithYouDetector convertSAWithYouLongScanContextToString:]
  +[SAWithYouDetector convertSAWithYouStatusToString:]

  // instance methods
  -[SAWithYouDetector setClock:]
  -[SAWithYouDetector deviceRecord]
  -[SAWithYouDetector ingestTAEvent:]
  -[SAWithYouDetector setClients:]
  -[SAWithYouDetector setAnalytics:]
  -[SAWithYouDetector clock]
  -[SAWithYouDetector analytics]
  -[SAWithYouDetector removeClient:]
  -[SAWithYouDetector setDeviceRecord:]
  -[SAWithYouDetector _enoughTimeHasPassedSinceInitializationToMarkNotWithYouForDeviceType:]
  -[SAWithYouDetector setNextOpportunisticScanDate:]
  -[SAWithYouDetector lastExtraNonHELEFoundTime]
  -[SAWithYouDetector clients]
  -[SAWithYouDetector forceUpdateWithYouStatusWithShortScan:]
  -[SAWithYouDetector _updateWithYouStatusOfRelatedDevices:]
  -[SAWithYouDetector setRelevantDevicesToFindDuringLongScan:]
  -[SAWithYouDetector setLastStartOfScan:]
  -[SAWithYouDetector nextOpportunisticScanDate]
  -[SAWithYouDetector setIsFindingRelevantDevices:]
  -[SAWithYouDetector _updateWithYouStatusIfNecessaryOnConnectionEvent:]
  -[SAWithYouDetector addClient:]
  -[SAWithYouDetector lastExtraHELEFoundTime]
  -[SAWithYouDetector setNextScheduledAlarm:]
  -[SAWithYouDetector _updateWithYouStatusOnAdvBufferEmptyEvent:]
  -[SAWithYouDetector setRequestedShortScan:]
  -[SAWithYouDetector didChangeTravelTypeFrom:to:hints:]
  -[SAWithYouDetector setLastEndOfScan:]
  -[SAWithYouDetector setIsPeriodicScansNeeded:]
  -[SAWithYouDetector bluetoothScanner]
  -[SAWithYouDetector setLastRelevantDeviceFoundTime:]
  -[SAWithYouDetector lastRelevantDeviceFoundTime]
  -[SAWithYouDetector requestedShortScan]
  -[SAWithYouDetector setLastExtraHELEFoundTime:]
  -[SAWithYouDetector resetAllWithYouStatusAndScanStates]
  -[SAWithYouDetector _updateWithYouStatusIfNecessaryOnAdvertisement:]
  -[SAWithYouDetector allSAEnabledDevicesAreFound]
  -[SAWithYouDetector setFoundDevicesDuringCurrentScan:]
  -[SAWithYouDetector setLocationRequester:]
  -[SAWithYouDetector allRelevantDevicesToFindAreFound]
  -[SAWithYouDetector .cxx_destruct]
  -[SAWithYouDetector isInVehicularTravel]
  -[SAWithYouDetector initializationTime]
  -[SAWithYouDetector requestScanIfNeeded]
  -[SAWithYouDetector relevantDevicesToFindDuringLongScan]
  -[SAWithYouDetector setLastLongScanRequest:]
  -[SAWithYouDetector updateExtraDeviceInformation:]
  -[SAWithYouDetector setLastExtraNonHELEFoundTime:]
  -[SAWithYouDetector isFindingRelevantDevices]
  -[SAWithYouDetector _deviceWithUUID:isWithYouDuringLongScanOnAdvertisement:]
  -[SAWithYouDetector setIsInVehicularTravel:]
  -[SAWithYouDetector _notifyAllClientsOfWithYouStatusUpdate:forDeviceWithUUID:]
  -[SAWithYouDetector extraFoundHELECount]
  -[SAWithYouDetector forceUpdateWithYouStatusToFindDevices:withContext:]
  -[SAWithYouDetector nextScheduledAlarm]
  -[SAWithYouDetector previousBufferEmptyTime]
  -[SAWithYouDetector setLastLongScanContext:]
  -[SAWithYouDetector lastStartOfScan]
  -[SAWithYouDetector _isValidPartID:]
  -[SAWithYouDetector locationRequester]
  -[SAWithYouDetector lastLongScanContext]
  -[SAWithYouDetector lastLongScanRequest]
  -[SAWithYouDetector setExtraFoundHELECount:]
  -[SAWithYouDetector _scheduleNextAlarmForScanAfterDate:]
  -[SAWithYouDetector isExtraDeviceFound:onDate:]
  -[SAWithYouDetector pausePeriodicScan]
  -[SAWithYouDetector alarmFiredForUUID:]
  -[SAWithYouDetector resumePeriodicScan]
  -[SAWithYouDetector _maxAgeOfWithYouAdvertisementForDeviceType:forMonitoringState:]
  -[SAWithYouDetector setBluetoothScanner:]
  -[SAWithYouDetector _isRecentEnoughAdvertisement:forCurrentDate:]
  -[SAWithYouDetector _finalizeToBeVerifiedStatus:]
  -[SAWithYouDetector extraFoundNonHELECount]
  -[SAWithYouDetector statusForDeviceWithUUID:]
  -[SAWithYouDetector isPeriodicScansNeeded]
  -[SAWithYouDetector initWithBluetoothScanner:locationRequester:deviceRecord:clock:analytics:]
  -[SAWithYouDetector setLongScanIsOngoing:]
  -[SAWithYouDetector forceUpdateWithYouStatus]
  -[SAWithYouDetector longScanIsOngoing]
  -[SAWithYouDetector isPeriodicScansAllowed]
  -[SAWithYouDetector _deviceIsWatch:]
  -[SAWithYouDetector setExtraFoundNonHELECount:]
  -[SAWithYouDetector setPreviousBufferEmptyTime:]
  -[SAWithYouDetector lastEndOfScan]
  -[SAWithYouDetector foundDevicesDuringCurrentScan]
  -[SAWithYouDetector isNotifyWhileTravelingEnabled]
  -[SAWithYouDetector sendScanContextToCoreAnalytics:isPartOfLongScan:scanDuration:relevantOnlyScanDuration:foundExtraHELECount:extraHELEScanDuration:foundExtraNonHELECount:extraNonHELEScanDuration:longScanContext:]
  -[SAWithYouDetector _updateAllWithYouStatusOnScanEndedEvent:]
  -[SAWithYouDetector _isStatusBitSetForRelatedDeviceWithShiftIndex:fromAdvertisement:]
  -[SAWithYouDetector setInitializationTime:]
  -[SAWithYouDetector _isOnlyMonitoringLeashOnlyDevices]
  -[SAWithYouDetector setIsNotifyWhileTravelingEnabled:]


SAServiceManager : NSObject <SAServiceServiceProtocol, SAServiceClientProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSHashTable *clients
 @property  SAService *service
 @property  SAAnalytics *analytics
 @property  SAAudioAccessory *audioAcccessory
 @property  NSDate *nextAnalyticsSubmission
 @property  RTRoutineManager *routineManager
 @property  BOOL hasAttemptedToIngestLastVisitAtStartup
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SAServiceManager convertCLReferenceFrameToSAReferenceFrame:]
  +[SAServiceManager convertBeaconToDeviceType:]

  // instance methods
  -[SAServiceManager ingestTAEvent:]
  -[SAServiceManager setClients:]
  -[SAServiceManager setAnalytics:]
  -[SAServiceManager analytics]
  -[SAServiceManager removeClient:]
  -[SAServiceManager _fetchAndIngestLastVisit]
  -[SAServiceManager separationAlertsService:scheduleSATimeEvent:forAlarm:]
  -[SAServiceManager clients]
  -[SAServiceManager separationAlertsService:requestStateForRegion:]
  -[SAServiceManager didFetchAllSafeLocations:]
  -[SAServiceManager separationAlertsService:addGeofence:]
  -[SAServiceManager addClient:]
  -[SAServiceManager separationAlertsService:removeGeofence:]
  -[SAServiceManager audioAcccessory]
  -[SAServiceManager dealloc]
  -[SAServiceManager setService:]
  -[SAServiceManager .cxx_destruct]
  -[SAServiceManager setNextAnalyticsSubmission:]
  -[SAServiceManager separationAlertsService:notifySeparationsForDevices:withLocation:withContext:]
  -[SAServiceManager separationAlertsServiceStopBackgroundScanning:]
  -[SAServiceManager separationAlertsService:requestBluetoothScanForTypes:]
  -[SAServiceManager routineManager]
  -[SAServiceManager separationAlertsServiceStopLongAggressiveScan:]
  -[SAServiceManager service]
  -[SAServiceManager _ingestVisit:]
  -[SAServiceManager separationAlertsService:cancelSATimeEventForAlarm:]
  -[SAServiceManager setQueue:]
  -[SAServiceManager setHasAttemptedToIngestLastVisitAtStartup:]
  -[SAServiceManager setRoutineManager:]
  -[SAServiceManager initWithQueue:]
  -[SAServiceManager separationAlertsServiceStartBackgroundScanning:]
  -[SAServiceManager separationAlertsService:enableMonitoringForSeparations:]
  -[SAServiceManager nextAnalyticsSubmission]
  -[SAServiceManager queue]
  -[SAServiceManager didFetchAllDevices:]
  -[SAServiceManager separationAlertsService:requestLocationForType:]
  -[SAServiceManager separationAlertsServiceFetchLastVisit:]
  -[SAServiceManager hasAttemptedToIngestLastVisitAtStartup]
  -[SAServiceManager setAudioAcccessory:]


SAAlarmTask : NSObject
 @property  NSUUID *alarmUUID
 @property  NSDate *fireDate
 @property  <SATimeClientProtocol> *client

  // instance methods
  -[SAAlarmTask fireDate]
  -[SAAlarmTask alarmUUID]
  -[SAAlarmTask .cxx_destruct]
  -[SAAlarmTask setClient:]
  -[SAAlarmTask client]
  -[SAAlarmTask setFireDate:]
  -[SAAlarmTask setAlarmUUID:]


SATime : NSObject <SATimeServiceProtocol>
 @property  NSMutableSet *ongoingAlarms
 @property  ^v alarmQueue
 @property  <SATimeEventRequestProtocol> *externalTimer
 @property  BOOL isReplay
 @property  NSDate *now

  // instance methods
  -[SATime now]
  -[SATime ingestTAEvent:]
  -[SATime alarmQueue]
  -[SATime setAlarmQueue:]
  -[SATime setOngoingAlarms:]
  -[SATime alarmCount]
  -[SATime addAlarm:]
  -[SATime setupAlarmFireAt:forClient:]
  -[SATime externalTimer]
  -[SATime dealloc]
  -[SATime cancelAlarmWithUUID:]
  -[SATime popAlarm]
  -[SATime .cxx_destruct]
  -[SATime earliestAlarm]
  -[SATime ongoingAlarms]
  -[SATime getCurrentTime]
  -[SATime setIsReplay:]
  -[SATime fireAlarmsIfReady]
  -[SATime getEarliestAlarmDate]
  -[SATime advanceTimeWithEvent:]
  -[SATime setExternalTimer:]
  -[SATime alarmFired:]
  -[SATime isReplay]
  -[SATime initWithExternalTimer:isReplay:]


SAPersistenceManagerSettings : NSObject
 @property  NSURL *persistenceDirectoryURL
 @property  NSString *persistenceStoreFileName

  // instance methods
  -[SAPersistenceManagerSettings setPersistenceStoreFileName:]
  -[SAPersistenceManagerSettings persistenceDirectoryURL]
  -[SAPersistenceManagerSettings .cxx_destruct]
  -[SAPersistenceManagerSettings persistenceStoreFileName]
  -[SAPersistenceManagerSettings setPersistenceDirectoryURL:]
  -[SAPersistenceManagerSettings initWithDirectoryURLOrDefault:storeFileNameOrDefault:]
  -[SAPersistenceManagerSettings _getStoreURL]
  -[SAPersistenceManagerSettings init]


SAPersistenceManager : NSObject
 @property  SAPersistenceManagerSettings *settings
 @property  NSHashTable *observers
 @property  SAPersistenceStore *store

  // instance methods
  -[SAPersistenceManager _notifyObserversOnReadFromURL:bytes:]
  -[SAPersistenceManager initWithSettings:]
  -[SAPersistenceManager store]
  -[SAPersistenceManager load]
  -[SAPersistenceManager addObserver:]
  -[SAPersistenceManager reset]
  -[SAPersistenceManager .cxx_destruct]
  -[SAPersistenceManager settings]
  -[SAPersistenceManager setSettings:]
  -[SAPersistenceManager setObservers:]
  -[SAPersistenceManager _createDirectoryIfNotPresent]
  -[SAPersistenceManager _notifyObserversOnWriteToURL:bytes:]
  -[SAPersistenceManager onUpdatedMonitoringSessionRecord:]
  -[SAPersistenceManager removeObserver:]
  -[SAPersistenceManager save]
  -[SAPersistenceManager observers]


SAScenarioClassifier : NSObject <SAScenarioClassifierServiceProtocol, SAFenceManagerClientProtocol, SATravelTypeClassifierClientProtocol>
 @property  unsigned long scenarioClassification
 @property  NSUUID *deviceUuid
 @property  NSHashTable *clients
 @property  CLRegion *currentUnsafeLocation
 @property  CLRegion *lastUnsafeLocation
 @property  NSMutableSet *safeLocations
 @property  NSMutableDictionary *statesBySafeLocation
 @property  CLCircularRegion *currentVisit
 @property  NSDate *scenarioChangeDate
 @property  <SAFenceManagerRequestProtocol> *delegate
 @property  <SATimeServiceProtocol> *timeDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SAScenarioClassifier convertSAScenarioClassToString:]

  // instance methods
  -[SAScenarioClassifier ingestTAEvent:]
  -[SAScenarioClassifier setClients:]
  -[SAScenarioClassifier removeClient:]
  -[SAScenarioClassifier clients]
  -[SAScenarioClassifier removeGeofence:]
  -[SAScenarioClassifier setSafeLocations:]
  -[SAScenarioClassifier setDelegate:]
  -[SAScenarioClassifier addClient:]
  -[SAScenarioClassifier didChangeTravelTypeFrom:to:hints:]
  -[SAScenarioClassifier delegate]
  -[SAScenarioClassifier dealloc]
  -[SAScenarioClassifier .cxx_destruct]
  -[SAScenarioClassifier safeLocations]
  -[SAScenarioClassifier addGeofence:]
  -[SAScenarioClassifier getCurrentTime]
  -[SAScenarioClassifier currentVisit]
  -[SAScenarioClassifier didDetermineState:forSafeLocation:forDevice:]
  -[SAScenarioClassifier didDetermineState:forUnsafeLocation:forDevice:]
  -[SAScenarioClassifier initWithDeviceUuid:]
  -[SAScenarioClassifier initWithDeviceUuid:scenarioClass:unsafeLocation:]
  -[SAScenarioClassifier _setNewScenarioClass:]
  -[SAScenarioClassifier _isInsideAnySafeLocation]
  -[SAScenarioClassifier _hasAllSafeLocationStatesKnown]
  -[SAScenarioClassifier _notifyAllClientsOfScenarioChangeFrom:to:]
  -[SAScenarioClassifier _addUnsafeLocation:]
  -[SAScenarioClassifier _removeUnsafeLocation:]
  -[SAScenarioClassifier _findSafeLocationWithUUID:]
  -[SAScenarioClassifier _addSafeLocation:]
  -[SAScenarioClassifier _removeSafeLocation:]
  -[SAScenarioClassifier currentUnsafeLocation]
  -[SAScenarioClassifier setCurrentUnsafeLocation:]
  -[SAScenarioClassifier lastUnsafeLocation]
  -[SAScenarioClassifier setLastUnsafeLocation:]
  -[SAScenarioClassifier deviceUuid]
  -[SAScenarioClassifier setDeviceUuid:]
  -[SAScenarioClassifier scenarioClassification]
  -[SAScenarioClassifier setScenarioClassification:]
  -[SAScenarioClassifier scenarioChangeDate]
  -[SAScenarioClassifier timeDelegate]
  -[SAScenarioClassifier setTimeDelegate:]
  -[SAScenarioClassifier statesBySafeLocation]
  -[SAScenarioClassifier setStatesBySafeLocation:]
  -[SAScenarioClassifier setCurrentVisit:]


SALoggingUtilities : NSObject
  // class methods
  +[SALoggingUtilities logTAEvent:]
  +[SALoggingUtilities extractEventFromMessages:]
  +[SALoggingUtilities stringToSplit:maxSplitSize:]
  +[SALoggingUtilities extractUniqueIdentifierFromMessage:]
  +[SALoggingUtilities computeMessagesForEvent:]


SADeviceRecord : NSObject <NSSecureCoding, SAWithYouDetectorClientProtocol>
 @property  <SAAnalyticsServiceProtocol> *analytics
 @property  NSMutableDictionary *deviceRecord
 @property  <SATimeServiceProtocol> *clock

  // class methods
  +[SADeviceRecord supportsSecureCoding]

  // instance methods
  -[SADeviceRecord setClock:]
  -[SADeviceRecord deviceRecord]
  -[SADeviceRecord ingestTAEvent:]
  -[SADeviceRecord setAnalytics:]
  -[SADeviceRecord clock]
  -[SADeviceRecord analytics]
  -[SADeviceRecord hasSurfacedNotificationFor:]
  -[SADeviceRecord setDeviceRecord:]
  -[SADeviceRecord getLastWithYouDate:]
  -[SADeviceRecord getMonitoringSessionState:]
  -[SADeviceRecord _updateDeviceRecordOnDeviceUpdateEvent:]
  -[SADeviceRecord resetAllWithYouStatus]
  -[SADeviceRecord updatedWithYouStatusFrom:to:forDeviceWithUUID:]
  -[SADeviceRecord encodeWithCoder:]
  -[SADeviceRecord .cxx_destruct]
  -[SADeviceRecord _updateAllRelatedDevices]
  -[SADeviceRecord updateLastWithYouDate:forDeviceWithUUID:]
  -[SADeviceRecord getDeviceNotificationState:]
  -[SADeviceRecord updateScenario:forDeviceWithUUID:]
  -[SADeviceRecord didForceUpdateWithYouStatus]
  -[SADeviceRecord getSADevice:]
  -[SADeviceRecord getLatestNOAdvertisement:]
  -[SADeviceRecord _updateLatestAdvertisement:]
  -[SADeviceRecord getAllUUIDs]
  -[SADeviceRecord getRelatedDevices:]
  -[SADeviceRecord getLatestWildAdvertisement:]
  -[SADeviceRecord hasDisconnectedDevices]
  -[SADeviceRecord updateLatestAdvertisement:forDeviceWithUUID:]
  -[SADeviceRecord updateMonitoringSessionState:forDeviceWithUUID:]
  -[SADeviceRecord getScenarioClass:]
  -[SADeviceRecord getLatestAdvertisement:]
  -[SADeviceRecord _updateConnectionStateOnConnectionEvent:]
  -[SADeviceRecord getConnectionState:]
  -[SADeviceRecord _updateSingleDeviceRecordForDevice:]
  -[SADeviceRecord initWithClock:analytics:]
  -[SADeviceRecord getLastCompanionDisconnectionDate:]
  -[SADeviceRecord getWithYouStatus:]
  -[SADeviceRecord initWithCoder:]


SAService : NSObject <SAMonitoringSessionManagerClientProtocol, SAFenceManagerClientProtocol, SAPowerLogClientProtocol, SAServiceServiceProtocol, SAGeoFenceRequestProtocol, SABluetoothScanRequestProtocol, SALocationRequestProtocol, SATimeEventRequestProtocol>
 @property  NSHashTable *clients
 @property  SATime *clock
 @property  SADeviceRecord *deviceRecord
 @property  SAWithYouDetector *withYouDetector
 @property  SAMonitoringSessionManager *monitoringSessionManager
 @property  SAFenceManager *fenceManager
 @property  SATravelTypeClassifier *travelTypeClassifier
 @property  SAPowerLog *powerLogger
 @property  SAPersistenceManager *persistenceManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SAService setClock:]
  -[SAService deviceRecord]
  -[SAService persistenceManager]
  -[SAService ingestTAEvent:]
  -[SAService setClients:]
  -[SAService clock]
  -[SAService removeClient:]
  -[SAService setDeviceRecord:]
  -[SAService monitoringSessionManager]
  -[SAService initWithAnalytics:isReplay:audioAccessoryManager:]
  -[SAService clients]
  -[SAService removeGeofence:]
  -[SAService fenceManager]
  -[SAService setPersistenceManager:]
  -[SAService stopBackgroundScanning]
  -[SAService addClient:]
  -[SAService travelTypeClassifier]
  -[SAService .cxx_destruct]
  -[SAService setFenceManager:]
  -[SAService fetchLastVisit]
  -[SAService requestLocationForType:]
  -[SAService setTravelTypeClassifier:]
  -[SAService stopLongAggressiveScan]
  -[SAService addGeofence:]
  -[SAService requestBluetoothScanForTypes:]
  -[SAService withYouDetector]
  -[SAService notifySeparationsForDevices:withLocation:withContext:]
  -[SAService setWithYouDetector:]
  -[SAService startBackgroundScanning]
  -[SAService powerLogger]
  -[SAService requestStateForRegion:]
  -[SAService setPowerLogger:]
  -[SAService setMonitoringSessionManager:]
  -[SAService scheduleSATimeEvent:forAlarm:]
  -[SAService cancelSATimeEventForAlarm:]
  -[SAService updatedMonitoringState:forDeviceUUID:]
  -[SAService enableMonitoringForSeparations:]


SAAudioAccessory : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  ^{BTSessionImpl=} fBTSession
 @property  ^{BTAccessoryManagerImpl=} fBTAccessoryManager
 @property  ^{BTDeviceImpl=} fBTDevice
 @property  NSString *fBTAddress
 @property  unsigned int fProductID
 @property  int fBTSessionAttachRetryCount

  // instance methods
  -[SAAudioAccessory btSessionEventHandler:event:result:]
  -[SAAudioAccessory reset]
  -[SAAudioAccessory fBTAddress]
  -[SAAudioAccessory convertToSAInEarStatus:]
  -[SAAudioAccessory .cxx_destruct]
  -[SAAudioAccessory fBTDevice]
  -[SAAudioAccessory setFBTAccessoryManager:]
  -[SAAudioAccessory setFProductID:]
  -[SAAudioAccessory refreshBTDevice]
  -[SAAudioAccessory setFBTAddress:]
  -[SAAudioAccessory getInEarStatus:secondary:]
  -[SAAudioAccessory setQueue:]
  -[SAAudioAccessory setFBTSessionAttachRetryCount:]
  -[SAAudioAccessory fProductID]
  -[SAAudioAccessory setFBTDevice:]
  -[SAAudioAccessory initWithQueue:]
  -[SAAudioAccessory fBTAccessoryManager]
  -[SAAudioAccessory queue]
  -[SAAudioAccessory setBTAddress:]
  -[SAAudioAccessory fBTSession]
  -[SAAudioAccessory getPrimaryBudSide]
  -[SAAudioAccessory attachBTSession]
  -[SAAudioAccessory fBTSessionAttachRetryCount]
  -[SAAudioAccessory setFBTSession:]


SAAnalyticsSettings : NSObject
 @property  BOOL enableSubmission

  // instance methods
  -[SAAnalyticsSettings setEnableSubmission:]
  -[SAAnalyticsSettings initWithEnableSubmission:]
  -[SAAnalyticsSettings enableSubmission]
  -[SAAnalyticsSettings init]


SAAnalytics : NSObject <SAAnalyticsServiceProtocol>
 @property  unsigned long numAlerts
 @property  unsigned long numAlertsLeftBehind
 @property  unsigned long numAlertsTraveling
 @property  unsigned long numEnabled
 @property  unsigned long numDevices
 @property  unsigned long numItems
 @property  unsigned long numAccessories
 @property  unsigned long numBTLE
 @property  unsigned long numiPhone
 @property  unsigned long numiPad
 @property  unsigned long numMacBook
 @property  unsigned long numSafe
 @property  unsigned long numSafeInUse
 @property  BOOL isAllUsingSameSafe
 @property  unsigned long numBTRequests
 @property  unsigned long numBTLeftBehindRequests
 @property  unsigned long numBTTravelingRequests
 @property  unsigned long numGpsRequests
 @property  unsigned long numWifiRequests
 @property  unsigned long numTimers
 @property  unsigned long numDevicesAtSafeExit
 @property  unsigned long numUnsafe
 @property  unsigned long numUnsafeWithLOI
 @property  unsigned long numUnsafeWithoutLOI
 @property  unsigned long aggActiveDuration
 @property  unsigned long aggInSafeDuration
 @property  unsigned long aggInUnsafeDuration
 @property  unsigned long aggInTravelDuration
 @property  double aggScanDuration
 @property  double aggScanDurationForFindingRelevantItemsOnly
 @property  NSDate *lastActivated
 @property  NSDate *lastSafeEntry
 @property  NSDate *lastUnsafeEntry
 @property  NSDate *lastTravelStart
 @property  double publishingInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SAAnalytics numiPad]
  -[SAAnalytics setNumBTRequests:]
  -[SAAnalytics numBTLE]
  -[SAAnalytics aggInSafeDuration]
  -[SAAnalytics setNumUnsafeWithoutLOI:]
  -[SAAnalytics initWithSettings:]
  -[SAAnalytics setIsAllUsingSameSafe:]
  -[SAAnalytics setNumBTTravelingRequests:]
  -[SAAnalytics numiPhone]
  -[SAAnalytics aggActiveDuration]
  -[SAAnalytics numAlertsLeftBehind]
  -[SAAnalytics numDevices]
  -[SAAnalytics aggScanDurationForFindingRelevantItemsOnly]
  -[SAAnalytics setNumBTLE:]
  -[SAAnalytics publishAndResetAggregation]
  -[SAAnalytics numAccessories]
  -[SAAnalytics setInUnsafeLocationState:]
  -[SAAnalytics numUnsafeWithLOI]
  -[SAAnalytics numEnabled]
  -[SAAnalytics numAlerts]
  -[SAAnalytics addDeviceFetchResultCount:type1count:type2count:type3count:type4count:type5count:type6count:type7count:safeCount:usingSameSafe:]
  -[SAAnalytics setActiveState:]
  -[SAAnalytics addScanDurationForFindingRelevantItemsOnly:]
  -[SAAnalytics numWifiRequests]
  -[SAAnalytics .cxx_destruct]
  -[SAAnalytics addNumDevicesWithYou:]
  -[SAAnalytics setNumAccessories:]
  -[SAAnalytics numSafe]
  -[SAAnalytics setNumAlerts:]
  -[SAAnalytics addAggressiveScanRequest:]
  -[SAAnalytics numBTLeftBehindRequests]
  -[SAAnalytics addSafeLocationFetchResultCount:]
  -[SAAnalytics setAggInTravelDuration:]
  -[SAAnalytics addWakeTimerRequest]
  -[SAAnalytics submitEvent:content:]
  -[SAAnalytics aggInTravelDuration]
  -[SAAnalytics setLastSafeEntry:]
  -[SAAnalytics addAlertWithContext:]
  -[SAAnalytics setNumiPhone:]
  -[SAAnalytics numGpsRequests]
  -[SAAnalytics numDevicesAtSafeExit]
  -[SAAnalytics addGpsLocationRequest:]
  -[SAAnalytics setLastActivated:]
  -[SAAnalytics setNumTimers:]
  -[SAAnalytics setNumItems:]
  -[SAAnalytics addDidSeparateWhileInVisit:didRejoinPriorExit:]
  -[SAAnalytics numItems]
  -[SAAnalytics lastSafeEntry]
  -[SAAnalytics numBTTravelingRequests]
  -[SAAnalytics addScanDuration:]
  -[SAAnalytics addWifiLocationRequest:]
  -[SAAnalytics addVisit:withRadius:]
  -[SAAnalytics setNumUnsafeWithLOI:]
  -[SAAnalytics setNumBTLeftBehindRequests:]
  -[SAAnalytics setNumUnsafe:]
  -[SAAnalytics setNumSafe:]
  -[SAAnalytics setLastUnsafeEntry:]
  -[SAAnalytics addPreArrivalAlertTime:didRejoinPriorExit:]
  -[SAAnalytics numAlertsTraveling]
  -[SAAnalytics numBTRequests]
  -[SAAnalytics setInTravelState:]
  -[SAAnalytics setLastTravelStart:]
  -[SAAnalytics lastUnsafeEntry]
  -[SAAnalytics setNumDevicesAtSafeExit:]
  -[SAAnalytics lastActivated]
  -[SAAnalytics setAggActiveDuration:]
  -[SAAnalytics setNumEnabled:]
  -[SAAnalytics numUnsafe]
  -[SAAnalytics aggScanDuration]
  -[SAAnalytics setAggScanDuration:]
  -[SAAnalytics setAggInUnsafeDuration:]
  -[SAAnalytics setAggScanDurationForFindingRelevantItemsOnly:]
  -[SAAnalytics lastTravelStart]
  -[SAAnalytics setNumWifiRequests:]
  -[SAAnalytics numTimers]
  -[SAAnalytics setNumAlertsTraveling:]
  -[SAAnalytics setNumAlertsLeftBehind:]
  -[SAAnalytics resetAggregation]
  -[SAAnalytics setInSafeLocationState:]
  -[SAAnalytics setNumDevices:]
  -[SAAnalytics setNumiPad:]
  -[SAAnalytics aggInUnsafeDuration]
  -[SAAnalytics setNumMacBook:]
  -[SAAnalytics setAggInSafeDuration:]
  -[SAAnalytics numMacBook]
  -[SAAnalytics numUnsafeWithoutLOI]
  -[SAAnalytics isAllUsingSameSafe]
  -[SAAnalytics setNumGpsRequests:]
  -[SAAnalytics setNumSafeInUse:]
  -[SAAnalytics init]
  -[SAAnalytics numSafeInUse]
  -[SAAnalytics publishingInterval]


(TADateFormat)
	// instance methods
	-[(TADateFormat) getDateString]
	-[(TADateFormat) getNextDateAtHour:]
	-[(TADateFormat) getMinutesSinceStartOfDay]

NSJSONSerialization(NSString)
	// class methods
	+[NSJSONSerialization(NSString) JSONStringFromNSDictionary:error:]

01 00 0500 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLCircularRegion 
01 00 0500 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 0500 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLRegion 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0700 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0d00 /System/Library/PrivateFrameworks/LoggingSupport.framework/LoggingSupport: OSActivityStream 
01 00 0d00 /System/Library/PrivateFrameworks/LoggingSupport.framework/LoggingSupport: OSLogPersistence 
01 00 0c00 /System/Library/PrivateFrameworks/CoreRoutine.framework/CoreRoutine: RTRoutineManager 
01 00 0c00 /System/Library/PrivateFrameworks/CoreRoutine.framework/CoreRoutine: RTStoredVisitFetchOptions 
01 00 0300 /System/Library/PrivateFrameworks/SPOwner.framework/SPOwner: SPOwnerInterface 
01 00 0300 /System/Library/PrivateFrameworks/SPOwner.framework/SPOwner: SPOwnerSession 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TAAggressiveScanState 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TACLVisit 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TADeviceInformation 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TAGeoNavigationNotification 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TALocationLite 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TALocationOfInterest 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TAPeopleDensityResult 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TASPAdvertisement 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TASystemState 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TAUserActivity 
01 00 0400 /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance: TAVehicleStateNotification 
