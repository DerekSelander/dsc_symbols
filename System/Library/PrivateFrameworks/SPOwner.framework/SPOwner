|| __DATA.__data _SPOwnerBeaconsChangedLocalNotification
|| __DATA.__objc_data _OBJC_CLASS_$_SPAccessoryDiscoveryAndPairingSession
|| __DATA.__objc_data _OBJC_CLASS_$_SPAccessoryDiscoverySessionState
|| __DATA.__objc_data _OBJC_CLASS_$_SPAccessoryInformation
|| __DATA.__objc_data _OBJC_CLASS_$_SPAccessoryLayoutTemplate
|| __DATA.__objc_data _OBJC_CLASS_$_SPBeaconDescription
|| __DATA.__objc_data _OBJC_CLASS_$_SPBeaconRole
|| __DATA.__objc_data _OBJC_CLASS_$_SPBeaconScanningSession
|| __DATA.__objc_data _OBJC_CLASS_$_SPBeaconShare
|| __DATA.__objc_data _OBJC_CLASS_$_SPBeaconTaskInformation
|| __DATA.__objc_data _OBJC_CLASS_$_SPCBPeripheralKeyAddressPair
|| __DATA.__objc_data _OBJC_CLASS_$_SPCrypto
|| __DATA.__objc_data _OBJC_CLASS_$_SPDiscoveredAccessoryMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_SPDiscoveredAccessoryProductInformation
|| __DATA.__objc_data _OBJC_CLASS_$_SPIndexInformation
|| __DATA.__objc_data _OBJC_CLASS_$_SPLocationProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SPLostModeInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SPMutableSafeLocation
|| __DATA.__objc_data _OBJC_CLASS_$_SPOfflineAdvertisingConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SPPairingConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SPPairingState
|| __DATA.__objc_data _OBJC_CLASS_$_SPUnknownDiscoverySession
|| __DATA.__objc_data _OBJC_CLASS_$_SPUnknownDiscoverySessionState
|| __DATA.__objc_data _OBJC_CLASS_$_SPUnknownProductInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SPUnknownProductMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_SPAccessoryDiscoveryAndPairingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SPAccessoryDiscoverySessionState
|| __DATA.__objc_data _OBJC_METACLASS_$_SPAccessoryInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_SPAccessoryLayoutTemplate
|| __DATA.__objc_data _OBJC_METACLASS_$_SPBeaconDescription
|| __DATA.__objc_data _OBJC_METACLASS_$_SPBeaconRole
|| __DATA.__objc_data _OBJC_METACLASS_$_SPBeaconScanningSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SPBeaconShare
|| __DATA.__objc_data _OBJC_METACLASS_$_SPBeaconTaskInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_SPCBPeripheralKeyAddressPair
|| __DATA.__objc_data _OBJC_METACLASS_$_SPCrypto
|| __DATA.__objc_data _OBJC_METACLASS_$_SPDiscoveredAccessoryMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_SPDiscoveredAccessoryProductInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_SPIndexInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_SPLocationProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SPLostModeInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SPMutableSafeLocation
|| __DATA.__objc_data _OBJC_METACLASS_$_SPOfflineAdvertisingConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SPPairingConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SPPairingState
|| __DATA.__objc_data _OBJC_METACLASS_$_SPUnknownDiscoverySession
|| __DATA.__objc_data _OBJC_METACLASS_$_SPUnknownDiscoverySessionState
|| __DATA.__objc_data _OBJC_METACLASS_$_SPUnknownProductInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SPUnknownProductMetadata
|| __DATA_CONST.__const _SPAccessoryDidPairNotification
|| __DATA_CONST.__const _SPAccessoryDiscoveryAndPairingSessionErrorDomain
|| __DATA_CONST.__const _SPBeaconLocationSourceConnection
|| __DATA_CONST.__const _SPBeaconLocationSourceConnectionMaintenance
|| __DATA_CONST.__const _SPBeaconLocationSourceDisconnection
|| __DATA_CONST.__const _SPBeaconLocationSourceHarvesterNetwork
|| __DATA_CONST.__const _SPBeaconLocationSourceHarvesterOnDiskNearOwner
|| __DATA_CONST.__const _SPBeaconLocationSourceHarvesterOnDiskWild
|| __DATA_CONST.__const _SPBeaconLocationSourceIntentLocationUpdate
|| __DATA_CONST.__const _SPBeaconLocationSourceIntentResponse
|| __DATA_CONST.__const _SPBeaconLocationSourceLocalReductiveFilter
|| __DATA_CONST.__const _SPBeaconLocationSourceOwnedDeviceLocation
|| __DATA_CONST.__const _SPBeaconLocationSourcePairingLocationManager
|| __DATA_CONST.__const _SPBeaconLocationSourceSelfPublish
|| __DATA_CONST.__const _SPBeaconLocationSourceUnknown
|| __DATA_CONST.__const _SPBeaconTaskNameAcceptShare
|| __DATA_CONST.__const _SPBeaconTaskNameAccessoryFirmwareUpdate
|| __DATA_CONST.__const _SPBeaconTaskNameBeginBTFinding
|| __DATA_CONST.__const _SPBeaconTaskNameBeginLeashing
|| __DATA_CONST.__const _SPBeaconTaskNameBeginRanging
|| __DATA_CONST.__const _SPBeaconTaskNameConnect
|| __DATA_CONST.__const _SPBeaconTaskNameDeclineShare
|| __DATA_CONST.__const _SPBeaconTaskNameDisableLostMode
|| __DATA_CONST.__const _SPBeaconTaskNameDisableNotifyWhenFound
|| __DATA_CONST.__const _SPBeaconTaskNameEnableLostMode
|| __DATA_CONST.__const _SPBeaconTaskNameEnableNotifyWhenFound
|| __DATA_CONST.__const _SPBeaconTaskNameEndBTFinding
|| __DATA_CONST.__const _SPBeaconTaskNameEndLeashing
|| __DATA_CONST.__const _SPBeaconTaskNameEndRanging
|| __DATA_CONST.__const _SPBeaconTaskNameFetchFirmwareVersion
|| __DATA_CONST.__const _SPBeaconTaskNameLocating
|| __DATA_CONST.__const _SPBeaconTaskNamePlaySound
|| __DATA_CONST.__const _SPBeaconTaskNamePlaySoundInitiated
|| __DATA_CONST.__const _SPBeaconTaskNameRename
|| __DATA_CONST.__const _SPBeaconTaskNameSetObfuscatedIdentifier
|| __DATA_CONST.__const _SPBeaconTaskNameStartSharing
|| __DATA_CONST.__const _SPBeaconTaskNameStopSharing
|| __DATA_CONST.__const _SPBeaconTaskNameStopSound
|| __DATA_CONST.__const _SPBeaconTaskNameUnknown
|| __DATA_CONST.__const _SPBeaconTaskNameUnpair
|| __DATA_CONST.__const _SPBeaconTypeAccessory
|| __DATA_CONST.__const _SPBeaconTypeDurian
|| __DATA_CONST.__const _SPBeaconTypeHele
|| __DATA_CONST.__const _SPBeaconTypeNone
|| __DATA_CONST.__const _SPBeaconTypeSelfBeaconing
|| __DATA_CONST.__const _SPBeaconTypeVirtualMeDevice
|| __DATA_CONST.__const _SPBeaconZoneCreationDateKey
|| __DATA_CONST.__const _SPBeaconZoneCreationErrorCodeKey
|| __DATA_CONST.__const _SPBeaconingStateChangedNotification
|| __DATA_CONST.__const _SPBeaconsChangedNotification
|| __DATA_CONST.__const _SPCBPeripheralErrorDomain
|| __DATA_CONST.__const _SPCommandErrorDomain
|| __DATA_CONST.__const _SPDisabledReasonLowAccountSecurity
|| __DATA_CONST.__const _SPDisabledReasonNone
|| __DATA_CONST.__const _SPDisabledReasonUserOptOut
|| __DATA_CONST.__const _SPDisabledReasoniCloudSignedOut
|| __DATA_CONST.__const _SPEvaluateLocalBeaconingNotification
|| __DATA_CONST.__const _SPFirmwareUpdateErrorDomain
|| __DATA_CONST.__const _SPKeyReconcilerFilesUpdatedNotification
|| __DATA_CONST.__const _SPLastKeyRollDateKey
|| __DATA_CONST.__const _SPMaintenancePolicyChangedNotification
|| __DATA_CONST.__const _SPManagedCBPeripheralChangedNotification
|| __DATA_CONST.__const _SPOwnerDataStateInitializing
|| __DATA_CONST.__const _SPOwnerDataStateNotAvailable
|| __DATA_CONST.__const _SPOwnerDataStateUpToDate
|| __DATA_CONST.__const _SPOwnerDataStateUpdating
|| __DATA_CONST.__const _SPOwnerInitiateFindMyAccessoryFirmwareUpdateNotification
|| __DATA_CONST.__const _SPOwnerLocationCachePolicyBackgroundRefresh
|| __DATA_CONST.__const _SPOwnerLocationCachePolicyDefaultPolicy
|| __DATA_CONST.__const _SPOwnerLocationCachePolicyForegroundRefresh
|| __DATA_CONST.__const _SPOwnerLocationCachePolicyLastKnownLocation
|| __DATA_CONST.__const _SPOwnerLocationCachePolicyNoCache
|| __DATA_CONST.__const _SPOwnerSessionErrorDomain
|| __DATA_CONST.__const _SPPairingSessionErrorDomain
|| __DATA_CONST.__const _SPPersistentConnectionChangedNotification
|| __DATA_CONST.__const _SPSecureLocationsErrorDomain
|| __DATA_CONST.__const _SPSecureLocationsOnDemandPublishRequest
|| __DATA_CONST.__const _SPSelfBeaconUUIDKeyBase
|| __DATA_CONST.__const _SPSelfBeaconingChangedNotification
|| __DATA_CONST.__const _SPSeparationAlertLeftBehindDevicesCategoryIdentifier
|| __DATA_CONST.__const _SPSeparationAlertLeftBehindItemsCategoryIdentifier
|| __DATA_CONST.__const _SPSeparationAlertLeftWhileTravelingDevicesCategoryIdentifier
|| __DATA_CONST.__const _SPSeparationAlertLeftWhileTravelingItemsCategoryIdentifier
|| __DATA_CONST.__const _SPSeparationAlertUserInfoBeaconIdentifiersKey
|| __DATA_CONST.__const _SPSeparationAlertUserInfoLocationKey
|| __DATA_CONST.__const _SPSeparationAlertUserInfoSafeLocationKey
|| __DATA_CONST.__const _SPSeparationMonitoringBeaconsChangedNotification
|| __DATA_CONST.__const _SPSeparationMonitoringErrorDomain
|| __DATA_CONST.__const _SPSeparationMonitoringSafeLocationsChangedNotification
|| __DATA_CONST.__const _SPSeparationMonitoringStateChangedNotification
|| __DATA_CONST.__const _SPServiceSettingsChangedNotification
|| __DATA_CONST.__const _SPServiceStateDisabled
|| __DATA_CONST.__const _SPServiceStateEnabled
|| __DATA_CONST.__const _SPSettingsServiceDisabledReasonsKey
|| __DATA_CONST.__const _SPSettingsServiceStateKey
|| __DATA_CONST.__const _SPSettingsSharedSuiteName
|| __DATA_CONST.__const _SPTagSeparationErrorDomain
|| __DATA_CONST.__const _SPTagSeparationStateConnected
|| __DATA_CONST.__const _SPTagSeparationStateLeashConnected
|| __DATA_CONST.__const _SPTagSeparationStateLeashDropped
|| __DATA_CONST.__const _SPTagSeparationStateLeashFailed
|| __DATA_CONST.__const _SPTagSeparationStateLeashInterrupted
|| __DATA_CONST.__const _SPTagSeparationStateNone
|| __DATA_CONST.__const _SPTrackingAvoidanceErrorDomain
|| __DATA_CONST.__const _SPUnknownBeaconsChangedNotification
|| __DATA_CONST.__const _SPUnknownDiscoverySessionErrorDomain
|| __DATA_CONST.__const _SPUnpairErrorDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPAccessoryPairingConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeacon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeaconGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeaconLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeaconManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeaconObservation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeaconRoleCategory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeaconUpdates
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPBeaconingKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCBPeripheralKeyRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCBPeripheralKeyRequestParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCBPeripheralKeyResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCBPeripheralManagerSessionKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCommand
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCommandKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCommandKeys
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPCommandKeysCriteria
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPDiscoveredAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPFirmwareUpdateSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPFirmwareUpdateStateResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPKeyReconciler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPLastOnlineLocationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPLocationFetchContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPLocationFetchResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPMacBeaconConfig
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPObservationLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPOfflineAdvertisingKeys
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPOwnedDeviceKeyRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPOwnerInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPOwnerSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPOwnerSessionState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPPairingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPPairingSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPPeripheral
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPRawSearchResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPSafeLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPScannedObject
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPSecureLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPSecureLocationsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPSecureLocationsSubscriptionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPSecureLocationsSubscriptionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPSettingsConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPStandaloneBeacon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPTagUserStats
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPUnauthorizedTrackingAdvertisement
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPUnauthorizedTrackingObservation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SPUnknownBeacon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPAccessoryPairingConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeacon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeaconGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeaconLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeaconManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeaconObservation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeaconRoleCategory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeaconUpdates
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPBeaconingKey
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCBPeripheralKeyRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCBPeripheralKeyRequestParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCBPeripheralKeyResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCBPeripheralManagerSessionKey
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCommand
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCommandKey
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCommandKeys
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPCommandKeysCriteria
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPDiscoveredAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPFirmwareUpdateSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPFirmwareUpdateStateResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPKeyReconciler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPLastOnlineLocationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPLocationFetchContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPLocationFetchResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPMacBeaconConfig
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPObservationLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPOfflineAdvertisingKeys
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPOwnedDeviceKeyRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPOwnerInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPOwnerSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPOwnerSessionState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPPairingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPPairingSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPPeripheral
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPRawSearchResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPSafeLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPScannedObject
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPSecureLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPSecureLocationsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPSecureLocationsSubscriptionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPSecureLocationsSubscriptionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPSettingsConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPStandaloneBeacon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPTagUserStats
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPUnauthorizedTrackingAdvertisement
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPUnauthorizedTrackingObservation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SPUnknownBeacon
|| __TEXT.__const _SPBeaconRoleIdOther
|| __TEXT.__const _SPBeaconRoleIdUndefined
|| __TEXT.__text _allBeaconTypes
|| __TEXT.__text _inPostEraseSetupAssistant
|| __TEXT.__text _sp_IDS_supportsIDSRegistrationPropertySupportsFMDV2
|| __TEXT.__text _sp_key_index_map_contains_key
|| __TEXT.__text _sp_key_index_map_contains_key_prefix
|| __TEXT.__text _sp_key_index_map_create_handle_from_file
|| __TEXT.__text _sp_key_index_map_create_handle_from_file_descriptor
|| __TEXT.__text _sp_key_index_map_destroy
|| __TEXT.__text _sp_key_index_map_get_first_index
|| __TEXT.__text _sp_key_index_map_get_last_index
|| __TEXT.__text _sp_key_index_map_get_version
|| __TEXT.__text _sp_key_index_map_print_description
|| __TEXT.__text _sp_key_index_map_print_toc
|| __TEXT.__text _sp_key_record_copy_intermediate_key
|| __TEXT.__text _sp_key_record_copy_private_encrypted_key
|| __TEXT.__text _sp_key_record_copy_private_key
|| __TEXT.__text _sp_key_record_copy_public_key
|| __TEXT.__text _sp_key_subsequence_create_from_file
|| __TEXT.__text _sp_key_subsequence_create_from_file_descriptor
|| __TEXT.__text _sp_key_subsequence_destroy
|| __TEXT.__text _sp_key_subsequence_get_record_for_index
|| __TEXT.__text _sp_key_subsequence_map_get_first_index
|| __TEXT.__text _sp_key_subsequence_map_get_last_index
|| __TEXT.__text _sp_key_subsequence_print_description
|| __TEXT.__text _sp_key_subsequence_print_records_description
__ CoreBluetooth: _CBCentralManagerScanOptionUsecase
__ CoreBluetooth: _CBManagerNeedsRestrictedStateOperation
__ CoreBluetooth: _CBPeripheralManagerOfflineAdvertisingData
__ CoreBluetooth: _CBPeripheralManagerOfflineAdvertisingRotationInterval
__ CoreBluetooth: _CBPeripheralManagerReceivesOfflineADVPayloadRequests
__ CoreBluetooth: _OBJC_CLASS_$_CBCentralManager
__ CoreBluetooth: _OBJC_CLASS_$_CBPeripheralManager
__ CoreBluetooth: _gCBDaemonServer
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanTrue
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ FMCoreLite: _FMEmptyResult
__ FMCoreLite: _OBJC_CLASS_$_FMFuture
__ FMCoreLite: _OBJC_CLASS_$_FMPreferencesUtil
__ FMCoreLite: _OBJC_CLASS_$_FMQueueSynchronizer
__ FMCoreLite: _OBJC_CLASS_$_FMTokenBucket
__ FMCoreLite: _OBJC_CLASS_$_FMXPCActivity
__ FMCoreLite: _OBJC_CLASS_$_FMXPCActivityCriteria
__ FMCoreLite: _OBJC_CLASS_$_FMXPCServiceDescription
__ FMCoreLite: _OBJC_CLASS_$_FMXPCSession
__ FindMyDevice: _OBJC_CLASS_$_FMDFMIPManager
__ FindMyDevice: _kFMDLocalActivationLockInfoChangedNotification
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateInterval
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ IOKit: _IOPMAssertionCreateWithProperties
__ IOKit: _IOPMAssertionRelease
__ MobileKeyBag: _MKBDeviceUnlockedSinceBoot
__ Network: _OBJC_CLASS_$_NWPathEvaluator
__ SoftLinking: __sl_dlopen
__ libSystem.B.dylib: _CCDeriveKey
__ libSystem.B.dylib: _CCECCryptorExportKey
__ libSystem.B.dylib: _CCECCryptorImportKey
__ libSystem.B.dylib: _CCECCryptorRelease
__ libSystem.B.dylib: _CCECCryptorTwinDiversifyKey
__ libSystem.B.dylib: _CCKDFParametersCreateAnsiX963
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___stdoutp
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_activity_initiate
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fstat
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _mmap
__ libSystem.B.dylib: _munmap
__ libSystem.B.dylib: _nextafter
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x10
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x5
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
SPUnknownProductMetadata : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *title
 @property  NSArray *moreDescription
 @property  double percentageX
 @property  double percentageY
 @property  NSURL *image
 @property  NSURL *image2x
 @property  NSURL *image3x

  // class methods
  +[SPUnknownProductMetadata supportsSecureCoding]

  // instance methods
  -[SPUnknownProductMetadata encodeWithCoder:]
  -[SPUnknownProductMetadata .cxx_destruct]
  -[SPUnknownProductMetadata title]
  -[SPUnknownProductMetadata image]
  -[SPUnknownProductMetadata copyWithZone:]
  -[SPUnknownProductMetadata setImage:]
  -[SPUnknownProductMetadata setTitle:]
  -[SPUnknownProductMetadata initWithCoder:]
  -[SPUnknownProductMetadata initWithTitle:description:percentageX:percentageY:image:image2x:image3x:]
  -[SPUnknownProductMetadata moreDescription]
  -[SPUnknownProductMetadata setMoreDescription:]
  -[SPUnknownProductMetadata percentageX]
  -[SPUnknownProductMetadata setPercentageX:]
  -[SPUnknownProductMetadata percentageY]
  -[SPUnknownProductMetadata setPercentageY:]
  -[SPUnknownProductMetadata image2x]
  -[SPUnknownProductMetadata setImage2x:]
  -[SPUnknownProductMetadata image3x]
  -[SPUnknownProductMetadata setImage3x:]


SPLostModeInfo : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  NSString *message
 @property  NSString *phoneNumber
 @property  NSString *email

  // class methods
  +[SPLostModeInfo supportsSecureCoding]

  // instance methods
  -[SPLostModeInfo setMessage:]
  -[SPLostModeInfo phoneNumber]
  -[SPLostModeInfo setTimestamp:]
  -[SPLostModeInfo encodeWithCoder:]
  -[SPLostModeInfo setPhoneNumber:]
  -[SPLostModeInfo setEmail:]
  -[SPLostModeInfo .cxx_destruct]
  -[SPLostModeInfo email]
  -[SPLostModeInfo copyWithZone:]
  -[SPLostModeInfo timestamp]
  -[SPLostModeInfo message]
  -[SPLostModeInfo initWithCoder:]
  -[SPLostModeInfo initWithMessage:email:phoneNumber:timestamp:]


SPNVRAM : NSObject
  // class methods
  +[SPNVRAM write:]
  +[SPNVRAM clear]
  +[SPNVRAM read]


SPBeaconTaskInformation : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *name
 @property  NSDate *lastUpdated
 @property  NSError *error
 @property  long long state
 @property  NSUUID *commandIdentifier

  // class methods
  +[SPBeaconTaskInformation supportsSecureCoding]

  // instance methods
  -[SPBeaconTaskInformation setLastUpdated:]
  -[SPBeaconTaskInformation lastUpdated]
  -[SPBeaconTaskInformation encodeWithCoder:]
  -[SPBeaconTaskInformation error]
  -[SPBeaconTaskInformation state]
  -[SPBeaconTaskInformation .cxx_destruct]
  -[SPBeaconTaskInformation setError:]
  -[SPBeaconTaskInformation setName:]
  -[SPBeaconTaskInformation copyWithZone:]
  -[SPBeaconTaskInformation name]
  -[SPBeaconTaskInformation isEqual:]
  -[SPBeaconTaskInformation setState:]
  -[SPBeaconTaskInformation initWithCoder:]
  -[SPBeaconTaskInformation commandIdentifier]
  -[SPBeaconTaskInformation initWithName:lastUpdated:error:state:]
  -[SPBeaconTaskInformation setCommandIdentifier:]


SPCBPeripheralKeyAddressPair : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *leMACAddress
 @property  NSData *longTermKey

  // class methods
  +[SPCBPeripheralKeyAddressPair supportsSecureCoding]

  // instance methods
  -[SPCBPeripheralKeyAddressPair encodeWithCoder:]
  -[SPCBPeripheralKeyAddressPair .cxx_destruct]
  -[SPCBPeripheralKeyAddressPair copyWithZone:]
  -[SPCBPeripheralKeyAddressPair initWithCoder:]
  -[SPCBPeripheralKeyAddressPair initWithLEMACAddress:longTermKey:]
  -[SPCBPeripheralKeyAddressPair leMACAddress]
  -[SPCBPeripheralKeyAddressPair longTermKey]


SPAccessoryDiscoverySessionState : NSObject <NSCopying, NSSecureCoding>
 @property  NSSet *accessories

  // class methods
  +[SPAccessoryDiscoverySessionState supportsSecureCoding]

  // instance methods
  -[SPAccessoryDiscoverySessionState encodeWithCoder:]
  -[SPAccessoryDiscoverySessionState .cxx_destruct]
  -[SPAccessoryDiscoverySessionState setAccessories:]
  -[SPAccessoryDiscoverySessionState copyWithZone:]
  -[SPAccessoryDiscoverySessionState accessories]
  -[SPAccessoryDiscoverySessionState initWithCoder:]
  -[SPAccessoryDiscoverySessionState initWithAccessories:]


SPPairingConfiguration : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *name
 @property  long long roleId
 @property  NSString *roleEmoji
 @property  NSData *collaborativeKeyC3
 @property  NSData *signatureS4
 @property  NSData *keyStatus
 @property  BOOL isZeus
 @property  long long batteryLevel

  // class methods
  +[SPPairingConfiguration supportsSecureCoding]

  // instance methods
  -[SPPairingConfiguration batteryLevel]
  -[SPPairingConfiguration encodeWithCoder:]
  -[SPPairingConfiguration .cxx_destruct]
  -[SPPairingConfiguration setName:]
  -[SPPairingConfiguration copyWithZone:]
  -[SPPairingConfiguration name]
  -[SPPairingConfiguration setBatteryLevel:]
  -[SPPairingConfiguration initWithCoder:]
  -[SPPairingConfiguration initWithName:roleId:roleEmoji:keyStatus:collaborativeKeyC3:signatureS4:isZeus:batteryLevel:]
  -[SPPairingConfiguration roleId]
  -[SPPairingConfiguration setRoleId:]
  -[SPPairingConfiguration roleEmoji]
  -[SPPairingConfiguration setRoleEmoji:]
  -[SPPairingConfiguration collaborativeKeyC3]
  -[SPPairingConfiguration setCollaborativeKeyC3:]
  -[SPPairingConfiguration signatureS4]
  -[SPPairingConfiguration setSignatureS4:]
  -[SPPairingConfiguration keyStatus]
  -[SPPairingConfiguration setKeyStatus:]
  -[SPPairingConfiguration isZeus]
  -[SPPairingConfiguration setIsZeus:]


SPPeripheral : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *userIdentifier
 @property  NSUUID *beaconIdentifier
 @property  NSString *name
 @property  unsigned char partIdentifier
 @property  NSString *serialNumber
 @property  BOOL managedByFindMy
 @property  unsigned long primaryIndex
 @property  NSDictionary *ltkIndexMap
 @property  NSData *lastConnectedLEMAC
 @property  NSArray *allowedSessions
 @property  NSDictionary *longTermKeyMap
 @property  NSUUID *identifier
 @property  NSUUID *groupIdentifier
 @property  NSArray *keyAddressPairs
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[SPPeripheral supportsSecureCoding]

  // instance methods
  -[SPPeripheral serialNumber]
  -[SPPeripheral setSerialNumber:]
  -[SPPeripheral setUserIdentifier:]
  -[SPPeripheral identifier]
  -[SPPeripheral beaconIdentifier]
  -[SPPeripheral groupIdentifier]
  -[SPPeripheral encodeWithCoder:]
  -[SPPeripheral userIdentifier]
  -[SPPeripheral .cxx_destruct]
  -[SPPeripheral dictionaryRepresentation]
  -[SPPeripheral setName:]
  -[SPPeripheral copyWithZone:]
  -[SPPeripheral name]
  -[SPPeripheral managedByFindMy]
  -[SPPeripheral isEqual:]
  -[SPPeripheral initWithCoder:]
  -[SPPeripheral primaryIndex]
  -[SPPeripheral initWithUserIdentifier:beaconIdentifier:groupIdentifier:name:partIdentifier:serialNumber:managedByFindMy:primaryIndex:ltkIndexMap:lastConnectedLEMAC:allowedSessions:keyAddressPairs:]
  -[SPPeripheral initWithUserIdentifier:beaconIdentifier:groupIdentifier:name:partIdentifier:serialNumber:managedByFindMy:primaryIndex:ltkIndexMap:lastConnectedLEMAC:allowedSessions:longTermKeyMap:]
  -[SPPeripheral keyAddressPairs]
  -[SPPeripheral descriptionForLEMAC:]
  -[SPPeripheral setBeaconIdentifier:]
  -[SPPeripheral partIdentifier]
  -[SPPeripheral setPartIdentifier:]
  -[SPPeripheral setManagedByFindMy:]
  -[SPPeripheral lastConnectedLEMAC]
  -[SPPeripheral setLastConnectedLEMAC:]
  -[SPPeripheral allowedSessions]
  -[SPPeripheral setAllowedSessions:]
  -[SPPeripheral longTermKeyMap]
  -[SPPeripheral setLongTermKeyMap:]
  -[SPPeripheral setPrimaryIndex:]
  -[SPPeripheral ltkIndexMap]
  -[SPPeripheral setLtkIndexMap:]


SPCommandKey : NSObject <NSCopying, NSSecureCoding, SPNearbyToken, SPConnectionMaterial>
 @property  SPBeaconingKey *beaconingKey
 @property  NSData *commandKey
 @property  NSData *connectionToken
 @property  NSData *nearbyToken
 @property  long long type
 @property  NSNumber *primaryIndex
 @property  NSNumber *secondaryIndex
 @property  NSData *address
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSDateInterval *dateInterval

  // class methods
  +[SPCommandKey supportsSecureCoding]

  // instance methods
  -[SPCommandKey dateInterval]
  -[SPCommandKey encodeWithCoder:]
  -[SPCommandKey type]
  -[SPCommandKey commandKey]
  -[SPCommandKey .cxx_destruct]
  -[SPCommandKey address]
  -[SPCommandKey setType:]
  -[SPCommandKey copyWithZone:]
  -[SPCommandKey initWithCoder:]
  -[SPCommandKey primaryIndex]
  -[SPCommandKey secondaryIndex]
  -[SPCommandKey setPrimaryIndex:]
  -[SPCommandKey nearbyToken]
  -[SPCommandKey connectionToken]
  -[SPCommandKey initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:]
  -[SPCommandKey beaconingKey]
  -[SPCommandKey setBeaconingKey:]
  -[SPCommandKey setConnectionToken:]
  -[SPCommandKey setNearbyToken:]
  -[SPCommandKey setSecondaryIndex:]
  -[SPCommandKey setCommandKey:]


SPLocationFetchResult : NSObject <NSSecureCoding>
 @property  NSDictionary *locationsByBeaconIdentifier

  // class methods
  +[SPLocationFetchResult supportsSecureCoding]

  // instance methods
  -[SPLocationFetchResult encodeWithCoder:]
  -[SPLocationFetchResult .cxx_destruct]
  -[SPLocationFetchResult initWithResults:]
  -[SPLocationFetchResult initWithCoder:]
  -[SPLocationFetchResult locationsByBeaconIdentifier]
  -[SPLocationFetchResult setLocationsByBeaconIdentifier:]


SPBeaconGroup : NSObject <NSCopying, NSSecureCoding>
 @property  long long version
 @property  NSUUID *identifier
 @property  NSSet *beaconIdentifiers
 @property  NSString *name
 @property  NSData *macAddress
 @property  BOOL isPairingComplete
 @property  BOOL isClassicConnected
 @property  BOOL isConnected
 @property  BOOL isFindMyNetworkEnabled
 @property  long long status
 @property  long long classification
 @property  NSDictionary *beaconMap
 @property  NSDictionary *taskInformation
 @property  SPLostModeInfo *lostModeInfo
 @property  NSSet *multipartStatus

  // class methods
  +[SPBeaconGroup supportsSecureCoding]

  // instance methods
  -[SPBeaconGroup macAddress]
  -[SPBeaconGroup lostModeInfo]
  -[SPBeaconGroup identifier]
  -[SPBeaconGroup isConnected]
  -[SPBeaconGroup setIsConnected:]
  -[SPBeaconGroup encodeWithCoder:]
  -[SPBeaconGroup status]
  -[SPBeaconGroup setStatus:]
  -[SPBeaconGroup setClassification:]
  -[SPBeaconGroup .cxx_destruct]
  -[SPBeaconGroup version]
  -[SPBeaconGroup setMacAddress:]
  -[SPBeaconGroup setIdentifier:]
  -[SPBeaconGroup setName:]
  -[SPBeaconGroup copyWithZone:]
  -[SPBeaconGroup classification]
  -[SPBeaconGroup name]
  -[SPBeaconGroup setVersion:]
  -[SPBeaconGroup isEqual:]
  -[SPBeaconGroup initWithCoder:]
  -[SPBeaconGroup beaconIdentifiers]
  -[SPBeaconGroup setBeaconIdentifiers:]
  -[SPBeaconGroup isPairingComplete]
  -[SPBeaconGroup setIsPairingComplete:]
  -[SPBeaconGroup isClassicConnected]
  -[SPBeaconGroup setIsClassicConnected:]
  -[SPBeaconGroup isFindMyNetworkEnabled]
  -[SPBeaconGroup setIsFindMyNetworkEnabled:]
  -[SPBeaconGroup beaconMap]
  -[SPBeaconGroup setBeaconMap:]
  -[SPBeaconGroup taskInformation]
  -[SPBeaconGroup setTaskInformation:]
  -[SPBeaconGroup setLostModeInfo:]
  -[SPBeaconGroup multipartStatus]
  -[SPBeaconGroup setMultipartStatus:]


SPUnknownDiscoverySession : NSObject <SPUnknownDiscoveryXPCClientProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPUnknownDiscoveryXPCProtocol> *proxy
 @property  SPUnknownDiscoverySessionState *state
 @property  @? sessionInvalidatedCallback
 @property  @? accessoryDiscoveredCallback
 @property  @? accessoryDiscoveryErrorCallback
 @property  @? accessoryDiscoveryFinishedCallback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPUnknownDiscoverySession remoteInterface]
  +[SPUnknownDiscoverySession exportedInterface]

  // instance methods
  -[SPUnknownDiscoverySession proxy]
  -[SPUnknownDiscoverySession session]
  -[SPUnknownDiscoverySession interruptionHandler:]
  -[SPUnknownDiscoverySession setCallbackQueue:]
  -[SPUnknownDiscoverySession invalidationHandler:]
  -[SPUnknownDiscoverySession setSession:]
  -[SPUnknownDiscoverySession callbackQueue]
  -[SPUnknownDiscoverySession setServiceDescription:]
  -[SPUnknownDiscoverySession state]
  -[SPUnknownDiscoverySession .cxx_destruct]
  -[SPUnknownDiscoverySession stop]
  -[SPUnknownDiscoverySession serviceDescription]
  -[SPUnknownDiscoverySession setProxy:]
  -[SPUnknownDiscoverySession setQueue:]
  -[SPUnknownDiscoverySession queue]
  -[SPUnknownDiscoverySession init]
  -[SPUnknownDiscoverySession setState:]
  -[SPUnknownDiscoverySession startDiscoveryWithCompletion:]
  -[SPUnknownDiscoverySession discoveredUnknownAccessory:]
  -[SPUnknownDiscoverySession lostUnknownAccessory:]
  -[SPUnknownDiscoverySession unknownAccessoryDiscoveryError:]
  -[SPUnknownDiscoverySession unknownAccessoryDiscoveryFinished]
  -[SPUnknownDiscoverySession startDiscoveryWithScanRate:timeout:completion:]
  -[SPUnknownDiscoverySession fetchEncryptedPayloadForUnknownBeacon:completion:]
  -[SPUnknownDiscoverySession initWithPreviousState:]
  -[SPUnknownDiscoverySession stopDiscoveryWithCompletion:]
  -[SPUnknownDiscoverySession sessionInvalidatedCallback]
  -[SPUnknownDiscoverySession setSessionInvalidatedCallback:]
  -[SPUnknownDiscoverySession accessoryDiscoveredCallback]
  -[SPUnknownDiscoverySession setAccessoryDiscoveredCallback:]
  -[SPUnknownDiscoverySession accessoryDiscoveryErrorCallback]
  -[SPUnknownDiscoverySession setAccessoryDiscoveryErrorCallback:]
  -[SPUnknownDiscoverySession accessoryDiscoveryFinishedCallback]
  -[SPUnknownDiscoverySession setAccessoryDiscoveryFinishedCallback:]


SPBeaconScanningSession : NSObject <SPBeaconScanningXPCClientProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPBeaconScanningXPCProtocol> *proxy
 @property  @? sessionInvalidatedCallback
 @property  @? beaconDiscoveredCallback
 @property  @? discoveryFinishedCallback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPBeaconScanningSession remoteInterface]
  +[SPBeaconScanningSession exportedInterface]

  // instance methods
  -[SPBeaconScanningSession proxy]
  -[SPBeaconScanningSession stopScanning]
  -[SPBeaconScanningSession session]
  -[SPBeaconScanningSession interruptionHandler:]
  -[SPBeaconScanningSession setCallbackQueue:]
  -[SPBeaconScanningSession invalidationHandler:]
  -[SPBeaconScanningSession setSession:]
  -[SPBeaconScanningSession callbackQueue]
  -[SPBeaconScanningSession setServiceDescription:]
  -[SPBeaconScanningSession .cxx_destruct]
  -[SPBeaconScanningSession serviceDescription]
  -[SPBeaconScanningSession setProxy:]
  -[SPBeaconScanningSession setQueue:]
  -[SPBeaconScanningSession queue]
  -[SPBeaconScanningSession init]
  -[SPBeaconScanningSession sessionInvalidatedCallback]
  -[SPBeaconScanningSession setSessionInvalidatedCallback:]
  -[SPBeaconScanningSession discoveredObject:]
  -[SPBeaconScanningSession discoveryFinished:]
  -[SPBeaconScanningSession startScanningIncludeServiceCharacteristics:]
  -[SPBeaconScanningSession beaconDiscoveredCallback]
  -[SPBeaconScanningSession setBeaconDiscoveredCallback:]
  -[SPBeaconScanningSession discoveryFinishedCallback]
  -[SPBeaconScanningSession setDiscoveryFinishedCallback:]


SPFirmwareUpdateStateResult : NSObject <NSSecureCoding>
 @property  long long state
 @property  NSDate *stateDate
 @property  NSString *currentSystemVersion
 @property  NSError *error

  // class methods
  +[SPFirmwareUpdateStateResult supportsSecureCoding]

  // instance methods
  -[SPFirmwareUpdateStateResult encodeWithCoder:]
  -[SPFirmwareUpdateStateResult error]
  -[SPFirmwareUpdateStateResult state]
  -[SPFirmwareUpdateStateResult .cxx_destruct]
  -[SPFirmwareUpdateStateResult setError:]
  -[SPFirmwareUpdateStateResult setState:]
  -[SPFirmwareUpdateStateResult initWithCoder:]
  -[SPFirmwareUpdateStateResult dictionary]
  -[SPFirmwareUpdateStateResult firmwareUpdateState]
  -[SPFirmwareUpdateStateResult stateDate]
  -[SPFirmwareUpdateStateResult setStateDate:]
  -[SPFirmwareUpdateStateResult currentSystemVersion]
  -[SPFirmwareUpdateStateResult setCurrentSystemVersion:]


SPBeaconRoleCategory : NSObject <NSCopying, NSSecureCoding>
 @property  long long categoryId
 @property  NSString *category
 @property  NSArray *roles

  // class methods
  +[SPBeaconRoleCategory supportsSecureCoding]

  // instance methods
  -[SPBeaconRoleCategory setCategory:]
  -[SPBeaconRoleCategory encodeWithCoder:]
  -[SPBeaconRoleCategory category]
  -[SPBeaconRoleCategory .cxx_destruct]
  -[SPBeaconRoleCategory roles]
  -[SPBeaconRoleCategory copyWithZone:]
  -[SPBeaconRoleCategory setRoles:]
  -[SPBeaconRoleCategory initWithCoder:]
  -[SPBeaconRoleCategory categoryId]
  -[SPBeaconRoleCategory initWithCategoryId:category:roles:]
  -[SPBeaconRoleCategory setCategoryId:]


SPPairingState : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *beaconIdentifier
 @property  NSData *macAddress
 @property  NSNumber *pairingEpoch
 @property  unsigned char partId
 @property  long long pairingType
 @property  long long status

  // class methods
  +[SPPairingState supportsSecureCoding]

  // instance methods
  -[SPPairingState macAddress]
  -[SPPairingState beaconIdentifier]
  -[SPPairingState encodeWithCoder:]
  -[SPPairingState status]
  -[SPPairingState setStatus:]
  -[SPPairingState .cxx_destruct]
  -[SPPairingState setMacAddress:]
  -[SPPairingState copyWithZone:]
  -[SPPairingState initWithCoder:]
  -[SPPairingState pairingType]
  -[SPPairingState setPairingType:]
  -[SPPairingState setBeaconIdentifier:]
  -[SPPairingState initWithStatus:beaconIdentifier:macAddress:pairingEpoch:partId:pairingType:]
  -[SPPairingState pairingEpoch]
  -[SPPairingState setPairingEpoch:]
  -[SPPairingState partId]
  -[SPPairingState setPartId:]


SPHandle : NSObject <NSCopying, NSSecureCoding>
 @property  long long type
 @property  NSString *destination

  // class methods
  +[SPHandle supportsSecureCoding]
  +[SPHandle handleWithEmailAddress:]
  +[SPHandle handleWithPhoneNumber:]
  +[SPHandle handleWithString:]

  // instance methods
  -[SPHandle setDestination:]
  -[SPHandle destination]
  -[SPHandle encodeWithCoder:]
  -[SPHandle type]
  -[SPHandle .cxx_destruct]
  -[SPHandle setType:]
  -[SPHandle copyWithZone:]
  -[SPHandle isEqual:]
  -[SPHandle initWithCoder:]
  -[SPHandle initWithType:destination:]


SPLocationProvider : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  SPHandle *provider

  // class methods
  +[SPLocationProvider supportsSecureCoding]

  // instance methods
  -[SPLocationProvider setTimestamp:]
  -[SPLocationProvider encodeWithCoder:]
  -[SPLocationProvider .cxx_destruct]
  -[SPLocationProvider provider]
  -[SPLocationProvider copyWithZone:]
  -[SPLocationProvider timestamp]
  -[SPLocationProvider setProvider:]
  -[SPLocationProvider isEqual:]
  -[SPLocationProvider initWithCoder:]
  -[SPLocationProvider initWithTimestamp:provider:]


SPBeaconLocation : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  double latitude
 @property  double longitude
 @property  NSString *source
 @property  double horizontalAccuracy

  // class methods
  +[SPBeaconLocation supportsSecureCoding]

  // instance methods
  -[SPBeaconLocation source]
  -[SPBeaconLocation horizontalAccuracy]
  -[SPBeaconLocation latitude]
  -[SPBeaconLocation setSource:]
  -[SPBeaconLocation setTimestamp:]
  -[SPBeaconLocation setLatitude:]
  -[SPBeaconLocation encodeWithCoder:]
  -[SPBeaconLocation setLongitude:]
  -[SPBeaconLocation longitude]
  -[SPBeaconLocation .cxx_destruct]
  -[SPBeaconLocation copyWithZone:]
  -[SPBeaconLocation timestamp]
  -[SPBeaconLocation initWithCoder:]
  -[SPBeaconLocation initWithTimestamp:latitude:longitude:horizontalAccuracy:source:]


SPCrypto : NSObject
  // class methods
  +[SPCrypto generateTokensWithPublicKey:sharedSecretKey:initialRatchetsToSkip:ratchetStep:]
  +[SPCrypto compactKey:]
  +[SPCrypto importKey:fromFormat:]
  +[SPCrypto exportKey:toFormat:]
  +[SPCrypto diversifyKey:entropyData:]
  +[SPCrypto antiTrackingKeyFromSharedSecretKey:]
  +[SPCrypto deriveKeyWithKeyData:sharedData:keyLength:]
  +[SPCrypto ratchetSharedSecretKey:ratchetCount:]
  +[SPCrypto deriveWithPublicKey:sharedSecretKey:]


SPMonitorsWrapper : NSObject <SPPowerMonitorDelegate>
 @property  <SPMonitorsWrapperDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  SPNetworkMonitor *networkMonitor
 @property  NSDate *lastStateChangeDate
 @property  NSDate *nextStateChangeDate
 @property  BOOL isRunning
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SPMonitorsWrapper powerState]
  -[SPMonitorsWrapper networkMonitor]
  -[SPMonitorsWrapper setNextStateChangeDate:]
  -[SPMonitorsWrapper setLastStateChangeDate:]
  -[SPMonitorsWrapper setIsRunning:]
  -[SPMonitorsWrapper setDelegate:]
  -[SPMonitorsWrapper lastStateChangeDate]
  -[SPMonitorsWrapper isNetworkUp]
  -[SPMonitorsWrapper delegate]
  -[SPMonitorsWrapper initWithBeaconManager:delegateQueue:]
  -[SPMonitorsWrapper setDelegateQueue:]
  -[SPMonitorsWrapper pause]
  -[SPMonitorsWrapper isRunning]
  -[SPMonitorsWrapper setNetworkMonitor:]
  -[SPMonitorsWrapper nextStateChangeDate]
  -[SPMonitorsWrapper .cxx_destruct]
  -[SPMonitorsWrapper delegateQueue]
  -[SPMonitorsWrapper resume]
  -[SPMonitorsWrapper stop]
  -[SPMonitorsWrapper start]


SPSecureLocationsSubscriptionContext : NSObject <NSCopying, NSSecureCoding>
 @property  long long subscriptionMode
 @property  NSString *clientApp
 @property  long long fetchMode
 @property  NSDictionary *pushIdentifiers

  // class methods
  +[SPSecureLocationsSubscriptionContext supportsSecureCoding]

  // instance methods
  -[SPSecureLocationsSubscriptionContext encodeWithCoder:]
  -[SPSecureLocationsSubscriptionContext .cxx_destruct]
  -[SPSecureLocationsSubscriptionContext copyWithZone:]
  -[SPSecureLocationsSubscriptionContext init]
  -[SPSecureLocationsSubscriptionContext initWithCoder:]
  -[SPSecureLocationsSubscriptionContext clientApp]
  -[SPSecureLocationsSubscriptionContext setClientApp:]
  -[SPSecureLocationsSubscriptionContext subscriptionMode]
  -[SPSecureLocationsSubscriptionContext setSubscriptionMode:]
  -[SPSecureLocationsSubscriptionContext fetchMode]
  -[SPSecureLocationsSubscriptionContext setFetchMode:]
  -[SPSecureLocationsSubscriptionContext pushIdentifiers]
  -[SPSecureLocationsSubscriptionContext setPushIdentifiers:]


SPSecureLocationsSubscriptionResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSArray *locations
 @property  double expiresIn

  // class methods
  +[SPSecureLocationsSubscriptionResult supportsSecureCoding]

  // instance methods
  -[SPSecureLocationsSubscriptionResult locations]
  -[SPSecureLocationsSubscriptionResult encodeWithCoder:]
  -[SPSecureLocationsSubscriptionResult setLocations:]
  -[SPSecureLocationsSubscriptionResult .cxx_destruct]
  -[SPSecureLocationsSubscriptionResult copyWithZone:]
  -[SPSecureLocationsSubscriptionResult init]
  -[SPSecureLocationsSubscriptionResult initWithCoder:]
  -[SPSecureLocationsSubscriptionResult expiresIn]
  -[SPSecureLocationsSubscriptionResult setExpiresIn:]


SPSecureLocationsManager : NSObject <SPSecureLocationsClientXPCProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPSecureLocationsXPCProtocol> *proxy
 @property  @? locationUpdates
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPSecureLocationsManager remoteInterface]
  +[SPSecureLocationsManager exportedInterface]

  // instance methods
  -[SPSecureLocationsManager proxy]
  -[SPSecureLocationsManager session]
  -[SPSecureLocationsManager interruptionHandler:]
  -[SPSecureLocationsManager invalidationHandler:]
  -[SPSecureLocationsManager setLocationUpdateBlock:]
  -[SPSecureLocationsManager setSession:]
  -[SPSecureLocationsManager setServiceDescription:]
  -[SPSecureLocationsManager simulateFeatureDisabled:completion:]
  -[SPSecureLocationsManager fetchConfigFromServerWithCompletion:]
  -[SPSecureLocationsManager .cxx_destruct]
  -[SPSecureLocationsManager shouldStartLocationMonitorWithCompletion:]
  -[SPSecureLocationsManager locationUpdates]
  -[SPSecureLocationsManager subscribeAndFetchLocationForIds:context:completion:]
  -[SPSecureLocationsManager receivedLocationPayload:completion:]
  -[SPSecureLocationsManager serviceDescription]
  -[SPSecureLocationsManager subscribeAndFetchLocationForIds:clientApp:completion:]
  -[SPSecureLocationsManager setProxy:]
  -[SPSecureLocationsManager setQueue:]
  -[SPSecureLocationsManager isLocationPublishingDeviceWithCompletion:]
  -[SPSecureLocationsManager updateLocationCacheWith:completion:]
  -[SPSecureLocationsManager shareCurrentKeyWithId:completion:]
  -[SPSecureLocationsManager queue]
  -[SPSecureLocationsManager unsubscribeForIds:context:completion:]
  -[SPSecureLocationsManager publishLocation:completion:]
  -[SPSecureLocationsManager setLocationUpdates:]
  -[SPSecureLocationsManager receivedLocationCommand:completion:]
  -[SPSecureLocationsManager latestLocationFromCacheForId:completion:]
  -[SPSecureLocationsManager unsubscribeForId:clientApp:completion:]
  -[SPSecureLocationsManager performKeyRollWithCompletion:]
  -[SPSecureLocationsManager init]
  -[SPSecureLocationsManager receivedUpdatedLocations:]


SPAccessoryLayoutTemplate : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned char partIdentifier
 @property  NSString *partType
 @property  NSString *partName
 @property  NSString *partSymbol
 @property  BOOL isPrimary

  // class methods
  +[SPAccessoryLayoutTemplate supportsSecureCoding]

  // instance methods
  -[SPAccessoryLayoutTemplate isPrimary]
  -[SPAccessoryLayoutTemplate encodeWithCoder:]
  -[SPAccessoryLayoutTemplate .cxx_destruct]
  -[SPAccessoryLayoutTemplate setPartName:]
  -[SPAccessoryLayoutTemplate copyWithZone:]
  -[SPAccessoryLayoutTemplate partName]
  -[SPAccessoryLayoutTemplate initWithCoder:]
  -[SPAccessoryLayoutTemplate setIsPrimary:]
  -[SPAccessoryLayoutTemplate partIdentifier]
  -[SPAccessoryLayoutTemplate setPartIdentifier:]
  -[SPAccessoryLayoutTemplate partType]
  -[SPAccessoryLayoutTemplate setPartType:]
  -[SPAccessoryLayoutTemplate partSymbol]
  -[SPAccessoryLayoutTemplate setPartSymbol:]


SPBeaconShare : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSUUID *beaconIdentifier
 @property  SPHandle *owner
 @property  SPHandle *sharee
 @property  NSDate *creationDate
 @property  long long state
 @property  NSDate *expirationDate

  // class methods
  +[SPBeaconShare supportsSecureCoding]

  // instance methods
  -[SPBeaconShare owner]
  -[SPBeaconShare setOwner:]
  -[SPBeaconShare expirationDate]
  -[SPBeaconShare identifier]
  -[SPBeaconShare beaconIdentifier]
  -[SPBeaconShare setExpirationDate:]
  -[SPBeaconShare encodeWithCoder:]
  -[SPBeaconShare state]
  -[SPBeaconShare .cxx_destruct]
  -[SPBeaconShare creationDate]
  -[SPBeaconShare setIdentifier:]
  -[SPBeaconShare copyWithZone:]
  -[SPBeaconShare setCreationDate:]
  -[SPBeaconShare isEqual:]
  -[SPBeaconShare setState:]
  -[SPBeaconShare initWithCoder:]
  -[SPBeaconShare setBeaconIdentifier:]
  -[SPBeaconShare initWithIdentifier:beaconIdentifier:owner:sharee:state:creationDate:expirationDate:]
  -[SPBeaconShare sharee]
  -[SPBeaconShare setSharee:]


SPBeacon : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSUUID *groupIdentifier
 @property  long long partIdentifier
 @property  NSString *stableIdentifier
 @property  SPHandle *owner
 @property  BOOL accepted
 @property  NSDate *pairingDate
 @property  NSString *name
 @property  NSString *model
 @property  SPBeaconRole *role
 @property  SPLostModeInfo *lostModeInfo
 @property  NSSet *shares
 @property  NSDictionary *taskInformation
 @property  NSString *correlationIdentifier
 @property  NSString *systemVersion
 @property  NSUUID *productUUID
 @property  long long vendorId
 @property  long long productId
 @property  NSString *type
 @property  BOOL isZeus
 @property  BOOL canBeLeashedByHost
 @property  BOOL connectionAllowed
 @property  long long connectableDeviceCount
 @property  NSDate *connectedStateExpiryDate
 @property  BOOL connected
 @property  NSString *separationState
 @property  long long beaconSeparationState
 @property  NSSet *safeLocations
 @property  NSString *serialNumber
 @property  NSSet *locationProviders
 @property  unsigned long keySyncLastObservedIndex
 @property  NSDate *keySyncLastIndexObservationDate
 @property  unsigned long keySyncWildIndexFallback
 @property  unsigned long keyAlignmentLastObservedIndex
 @property  NSDate *keyAlignmentLastIndexObservationDate
 @property  SPDiscoveredAccessoryProductInformation *accessoryProductInfo
 @property  BOOL isAppleAudioAccessory
 @property  long long batteryLevel

  // class methods
  +[SPBeacon supportsSecureCoding]
  +[SPBeacon SPOwner]

  // instance methods
  -[SPBeacon serialNumber]
  -[SPBeacon owner]
  -[SPBeacon setOwner:]
  -[SPBeacon setSerialNumber:]
  -[SPBeacon setModel:]
  -[SPBeacon lostModeInfo]
  -[SPBeacon batteryLevel]
  -[SPBeacon identifier]
  -[SPBeacon stableIdentifier]
  -[SPBeacon model]
  -[SPBeacon setSafeLocations:]
  -[SPBeacon setConnected:]
  -[SPBeacon systemVersion]
  -[SPBeacon groupIdentifier]
  -[SPBeacon role]
  -[SPBeacon connected]
  -[SPBeacon encodeWithCoder:]
  -[SPBeacon type]
  -[SPBeacon setCorrelationIdentifier:]
  -[SPBeacon .cxx_destruct]
  -[SPBeacon correlationIdentifier]
  -[SPBeacon safeLocations]
  -[SPBeacon setType:]
  -[SPBeacon setRole:]
  -[SPBeacon productId]
  -[SPBeacon setIdentifier:]
  -[SPBeacon vendorId]
  -[SPBeacon setName:]
  -[SPBeacon copyWithZone:]
  -[SPBeacon name]
  -[SPBeacon setStableIdentifier:]
  -[SPBeacon setBatteryLevel:]
  -[SPBeacon isEqual:]
  -[SPBeacon setGroupIdentifier:]
  -[SPBeacon initWithCoder:]
  -[SPBeacon accepted]
  -[SPBeacon setAccepted:]
  -[SPBeacon setVendorId:]
  -[SPBeacon shares]
  -[SPBeacon setProductId:]
  -[SPBeacon setSystemVersion:]
  -[SPBeacon isZeus]
  -[SPBeacon setIsZeus:]
  -[SPBeacon partIdentifier]
  -[SPBeacon setPartIdentifier:]
  -[SPBeacon taskInformation]
  -[SPBeacon setTaskInformation:]
  -[SPBeacon setLostModeInfo:]
  -[SPBeacon setShares:]
  -[SPBeacon productUUID]
  -[SPBeacon setProductUUID:]
  -[SPBeacon canBeLeashedByHost]
  -[SPBeacon setCanBeLeashedByHost:]
  -[SPBeacon connectionAllowed]
  -[SPBeacon setConnectionAllowed:]
  -[SPBeacon connectableDeviceCount]
  -[SPBeacon setConnectableDeviceCount:]
  -[SPBeacon separationState]
  -[SPBeacon setSeparationState:]
  -[SPBeacon beaconSeparationState]
  -[SPBeacon setBeaconSeparationState:]
  -[SPBeacon locationProviders]
  -[SPBeacon setLocationProviders:]
  -[SPBeacon accessoryProductInfo]
  -[SPBeacon setAccessoryProductInfo:]
  -[SPBeacon pairingDate]
  -[SPBeacon setPairingDate:]
  -[SPBeacon connectedStateExpiryDate]
  -[SPBeacon setConnectedStateExpiryDate:]
  -[SPBeacon keySyncLastObservedIndex]
  -[SPBeacon setKeySyncLastObservedIndex:]
  -[SPBeacon keySyncLastIndexObservationDate]
  -[SPBeacon setKeySyncLastIndexObservationDate:]
  -[SPBeacon keySyncWildIndexFallback]
  -[SPBeacon setKeySyncWildIndexFallback:]
  -[SPBeacon keyAlignmentLastObservedIndex]
  -[SPBeacon setKeyAlignmentLastObservedIndex:]
  -[SPBeacon keyAlignmentLastIndexObservationDate]
  -[SPBeacon setKeyAlignmentLastIndexObservationDate:]
  -[SPBeacon isAppleAudioAccessory]
  -[SPBeacon setIsAppleAudioAccessory:]


SPOfflineAdvertisingConfiguration : NSObject <NSSecureCoding>
 @property  long long shortIntervalCount
 @property  long long longIntervalCount

  // class methods
  +[SPOfflineAdvertisingConfiguration supportsSecureCoding]

  // instance methods
  -[SPOfflineAdvertisingConfiguration encodeWithCoder:]
  -[SPOfflineAdvertisingConfiguration initWithDictionaryRepresentation:]
  -[SPOfflineAdvertisingConfiguration dictionaryRepresentation]
  -[SPOfflineAdvertisingConfiguration initWithCoder:]
  -[SPOfflineAdvertisingConfiguration initWithShortIntervalCount:longIntervalCount:]
  -[SPOfflineAdvertisingConfiguration shortIntervalCount]
  -[SPOfflineAdvertisingConfiguration setShortIntervalCount:]
  -[SPOfflineAdvertisingConfiguration longIntervalCount]
  -[SPOfflineAdvertisingConfiguration setLongIntervalCount:]


SPOfflineAdvertisingKeys : NSObject <NSSecureCoding>
 @property  long long rotationInterval
 @property  NSArray *keys
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[SPOfflineAdvertisingKeys supportsSecureCoding]

  // instance methods
  -[SPOfflineAdvertisingKeys encodeWithCoder:]
  -[SPOfflineAdvertisingKeys .cxx_destruct]
  -[SPOfflineAdvertisingKeys keys]
  -[SPOfflineAdvertisingKeys dictionaryRepresentation]
  -[SPOfflineAdvertisingKeys initWithCoder:]
  -[SPOfflineAdvertisingKeys initWithInterval:keys:]
  -[SPOfflineAdvertisingKeys rotationInterval]


SPCBPeripheralKeyRequestParameters : NSObject <NSSecureCoding, NSCopying>
 @property  SPCBPeripheralManagerSessionKey *sessionKey
 @property  NSArray *vendorIdentifierList

  // class methods
  +[SPCBPeripheralKeyRequestParameters supportsSecureCoding]

  // instance methods
  -[SPCBPeripheralKeyRequestParameters encodeWithCoder:]
  -[SPCBPeripheralKeyRequestParameters initWithSessionKey:vendorIdentifierList:]
  -[SPCBPeripheralKeyRequestParameters .cxx_destruct]
  -[SPCBPeripheralKeyRequestParameters vendorIdentifierList]
  -[SPCBPeripheralKeyRequestParameters sessionKey]
  -[SPCBPeripheralKeyRequestParameters copyWithZone:]
  -[SPCBPeripheralKeyRequestParameters initWithCoder:]


SPUnauthorizedTrackingObservation : NSObject <NSSecureCoding>
 @property  SPUnauthorizedTrackingAdvertisement *trackingIdentifier
 @property  NSArray *observedLocations
 @property  NSDate *observedAt

  // class methods
  +[SPUnauthorizedTrackingObservation supportsSecureCoding]

  // instance methods
  -[SPUnauthorizedTrackingObservation encodeWithCoder:]
  -[SPUnauthorizedTrackingObservation .cxx_destruct]
  -[SPUnauthorizedTrackingObservation isEqual:]
  -[SPUnauthorizedTrackingObservation initWithCoder:]
  -[SPUnauthorizedTrackingObservation trackingIdentifier]
  -[SPUnauthorizedTrackingObservation initWithCurrentAdvertisementAndLocationHistory:observedLocations:]
  -[SPUnauthorizedTrackingObservation setTrackingIdentifier:]
  -[SPUnauthorizedTrackingObservation observedLocations]
  -[SPUnauthorizedTrackingObservation setObservedLocations:]
  -[SPUnauthorizedTrackingObservation observedAt]
  -[SPUnauthorizedTrackingObservation setObservedAt:]


SPOwnerSessionState : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *serviceState
 @property  NSSet *disabledReasons
 @property  NSString *ownerDataState

  // class methods
  +[SPOwnerSessionState supportsSecureCoding]

  // instance methods
  -[SPOwnerSessionState setDisabledReasons:]
  -[SPOwnerSessionState encodeWithCoder:]
  -[SPOwnerSessionState disabledReasons]
  -[SPOwnerSessionState .cxx_destruct]
  -[SPOwnerSessionState copyWithZone:]
  -[SPOwnerSessionState serviceState]
  -[SPOwnerSessionState setServiceState:]
  -[SPOwnerSessionState initWithCoder:]
  -[SPOwnerSessionState initWithServiceState:disabledReasons:ownerDataState:]
  -[SPOwnerSessionState ownerDataState]
  -[SPOwnerSessionState setOwnerDataState:]


SPDiscoveredAccessoryMetadata : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *productData
 @property  NSString *manufacturerName
 @property  NSString *modelName
 @property  NSString *firmwareVersion
 @property  NSString *protocolVersion
 @property  unsigned long accessoryCategory
 @property  unsigned int accessoryCapabilities
 @property  unsigned char batteryType
 @property  unsigned char batteryState
 @property  unsigned long capabilities

  // class methods
  +[SPDiscoveredAccessoryMetadata supportsSecureCoding]

  // instance methods
  -[SPDiscoveredAccessoryMetadata setProtocolVersion:]
  -[SPDiscoveredAccessoryMetadata protocolVersion]
  -[SPDiscoveredAccessoryMetadata setManufacturerName:]
  -[SPDiscoveredAccessoryMetadata setAccessoryCategory:]
  -[SPDiscoveredAccessoryMetadata manufacturerName]
  -[SPDiscoveredAccessoryMetadata firmwareVersion]
  -[SPDiscoveredAccessoryMetadata modelName]
  -[SPDiscoveredAccessoryMetadata setModelName:]
  -[SPDiscoveredAccessoryMetadata encodeWithCoder:]
  -[SPDiscoveredAccessoryMetadata accessoryCategory]
  -[SPDiscoveredAccessoryMetadata .cxx_destruct]
  -[SPDiscoveredAccessoryMetadata capabilities]
  -[SPDiscoveredAccessoryMetadata copyWithZone:]
  -[SPDiscoveredAccessoryMetadata setCapabilities:]
  -[SPDiscoveredAccessoryMetadata setFirmwareVersion:]
  -[SPDiscoveredAccessoryMetadata initWithCoder:]
  -[SPDiscoveredAccessoryMetadata batteryState]
  -[SPDiscoveredAccessoryMetadata setBatteryState:]
  -[SPDiscoveredAccessoryMetadata batteryType]
  -[SPDiscoveredAccessoryMetadata setBatteryType:]
  -[SPDiscoveredAccessoryMetadata accessoryCapabilities]
  -[SPDiscoveredAccessoryMetadata productData]
  -[SPDiscoveredAccessoryMetadata setProductData:]
  -[SPDiscoveredAccessoryMetadata setAccessoryCapabilities:]


SPCommand : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSUUID *beaconIdentifier
 @property  long long type
 @property  NSDate *expiration
 @property  NSNumber *duration
 @property  long long playSoundContext
 @property  SPHandle *handle
 @property  NSString *lostModeEmail
 @property  NSString *lostModeMessage
 @property  NSString *lostModePhoneNumber
 @property  NSString *obfuscatedIdentifier
 @property  BOOL enableLostMode
 @property  NSString *taskName

  // class methods
  +[SPCommand supportsSecureCoding]
  +[SPCommand enableNotifyWhenFound:]
  +[SPCommand disableNotifyWhenFound:]
  +[SPCommand locate:]
  +[SPCommand playSoundWithBeaconUUID:duration:]
  +[SPCommand playSoundWithBeaconUUID:]
  +[SPCommand unpairWithBeaconUUID:]
  +[SPCommand playSoundWithBeaconUUID:withContext:]
  +[SPCommand stopSoundWithBeaconUUID:]
  +[SPCommand enableLostModeForBeaconUUID:message:phoneNumber:email:]
  +[SPCommand disableLostModeForBeaconUUID:]
  +[SPCommand beginLeashingWithBeaconUUID:]
  +[SPCommand endLeashingWithBeaconUUID:]
  +[SPCommand connectToBeaconUUID:]
  +[SPCommand setObfuscatedIdentifier:]
  +[SPCommand updateAccessoryFirmware:]
  +[SPCommand startNotifyWhenFound:]
  +[SPCommand stopNotifyWhenFound:]

  // instance methods
  -[SPCommand setDuration:]
  -[SPCommand setHandle:]
  -[SPCommand identifier]
  -[SPCommand beaconIdentifier]
  -[SPCommand encodeWithCoder:]
  -[SPCommand type]
  -[SPCommand handle]
  -[SPCommand .cxx_destruct]
  -[SPCommand duration]
  -[SPCommand setType:]
  -[SPCommand setIdentifier:]
  -[SPCommand copyWithZone:]
  -[SPCommand expiration]
  -[SPCommand taskName]
  -[SPCommand initWithCoder:]
  -[SPCommand setExpiration:]
  -[SPCommand setBeaconIdentifier:]
  -[SPCommand setObfuscatedIdentifier:]
  -[SPCommand initWithBeaconUUID:type:expiration:duration:handle:lostModeMessage:lostModePhoneNumber:obfuscatedIdentifier:]
  -[SPCommand initWithBeaconUUID:type:expiration:duration:handle:lostModeEmail:lostModeMessage:lostModePhoneNumber:obfuscatedIdentifier:identifier:]
  -[SPCommand initWithBeaconUUID:type:expiration:duration:playSoundContext:handle:lostModeMessage:lostModePhoneNumber:obfuscatedIdentifier:identifier:]
  -[SPCommand playSoundContext]
  -[SPCommand setPlaySoundContext:]
  -[SPCommand lostModeEmail]
  -[SPCommand setLostModeEmail:]
  -[SPCommand lostModeMessage]
  -[SPCommand setLostModeMessage:]
  -[SPCommand lostModePhoneNumber]
  -[SPCommand setLostModePhoneNumber:]
  -[SPCommand obfuscatedIdentifier]
  -[SPCommand enableLostMode]
  -[SPCommand setEnableLostMode:]


SPCBLeechScanner : NSObject <CBCentralManagerDelegate>
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  FMQueueSynchronizer *queueSynchronizer
 @property  CBCentralManager *centralManager
 @property  int notifyToken
 @property  BOOL enabled
 @property  BOOL isScanning
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPCBPeripheralManagementXPCProtocol> *proxy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPCBLeechScanner remoteInterface]

  // instance methods
  -[SPCBLeechScanner setIsScanning:]
  -[SPCBLeechScanner setQueueSynchronizer:]
  -[SPCBLeechScanner setNotifyToken:]
  -[SPCBLeechScanner proxy]
  -[SPCBLeechScanner centralManager:didDiscoverPeripheral:advertisementData:RSSI:]
  -[SPCBLeechScanner centralManager]
  -[SPCBLeechScanner setSerialQueue:]
  -[SPCBLeechScanner notifyToken]
  -[SPCBLeechScanner setCentralManager:]
  -[SPCBLeechScanner isScanning]
  -[SPCBLeechScanner stopScanning]
  -[SPCBLeechScanner session]
  -[SPCBLeechScanner serialQueue]
  -[SPCBLeechScanner interruptionHandler:]
  -[SPCBLeechScanner centralManagerDidUpdateState:]
  -[SPCBLeechScanner invalidationHandler:]
  -[SPCBLeechScanner handleStateChange:]
  -[SPCBLeechScanner setSession:]
  -[SPCBLeechScanner setServiceDescription:]
  -[SPCBLeechScanner .cxx_destruct]
  -[SPCBLeechScanner setEnabled:]
  -[SPCBLeechScanner queueSynchronizer]
  -[SPCBLeechScanner serviceDescription]
  -[SPCBLeechScanner setProxy:]
  -[SPCBLeechScanner startScanning]
  -[SPCBLeechScanner enabled]
  -[SPCBLeechScanner init]


SPMutableSafeLocation : SPSafeLocation
 @property  long long type
 @property  NSString *name
 @property  CLLocation *location
 @property  long long approvalState


SPSafeLocation : NSObject <NSSecureCoding, NSCopying>
 @property  NSUUID *identifier
 @property  long long type
 @property  NSString *name
 @property  CLLocation *location
 @property  long long approvalState
 @property  NSSet *associatedBeacons
 @property  double latitude
 @property  double longitude
 @property  double horizontalAccuracy
 @property  double altitude
 @property  double verticalAccuracy
 @property  double speed
 @property  double speedAccuracy
 @property  double course
 @property  double courseAccuracy

  // class methods
  +[SPSafeLocation supportsSecureCoding]

  // instance methods
  -[SPSafeLocation horizontalAccuracy]
  -[SPSafeLocation altitude]
  -[SPSafeLocation latitude]
  -[SPSafeLocation course]
  -[SPSafeLocation identifier]
  -[SPSafeLocation initWithIdentifier:type:name:location:associatedBeacons:approvalState:]
  -[SPSafeLocation initWithType:name:location:approvalState:]
  -[SPSafeLocation encodeWithCoder:]
  -[SPSafeLocation type]
  -[SPSafeLocation longitude]
  -[SPSafeLocation .cxx_destruct]
  -[SPSafeLocation verticalAccuracy]
  -[SPSafeLocation speed]
  -[SPSafeLocation setAssociatedBeacons:]
  -[SPSafeLocation setLocation:]
  -[SPSafeLocation setType:]
  -[SPSafeLocation associatedBeacons]
  -[SPSafeLocation approvalState]
  -[SPSafeLocation speedAccuracy]
  -[SPSafeLocation setIdentifier:]
  -[SPSafeLocation setName:]
  -[SPSafeLocation copyWithZone:]
  -[SPSafeLocation name]
  -[SPSafeLocation location]
  -[SPSafeLocation mutableSafeLocation]
  -[SPSafeLocation courseAccuracy]
  -[SPSafeLocation setApprovalState:]
  -[SPSafeLocation isEqual:]
  -[SPSafeLocation initWithCoder:]


SPTagUserStats : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned char overflowFlag
 @property  unsigned char crashCount
 @property  unsigned short multiTime
 @property  unsigned short nearOwnerTime
 @property  unsigned short wildTime
 @property  unsigned short ownerPlaySoundCount
 @property  unsigned short ownerPlaySoundTime
 @property  unsigned short rangingCount
 @property  unsigned short rangingTime

  // class methods
  +[SPTagUserStats supportsSecureCoding]

  // instance methods
  -[SPTagUserStats encodeWithCoder:]
  -[SPTagUserStats copyWithZone:]
  -[SPTagUserStats initWithCoder:]
  -[SPTagUserStats overflowFlag]
  -[SPTagUserStats setOverflowFlag:]
  -[SPTagUserStats crashCount]
  -[SPTagUserStats setCrashCount:]
  -[SPTagUserStats multiTime]
  -[SPTagUserStats setMultiTime:]
  -[SPTagUserStats nearOwnerTime]
  -[SPTagUserStats setNearOwnerTime:]
  -[SPTagUserStats wildTime]
  -[SPTagUserStats setWildTime:]
  -[SPTagUserStats ownerPlaySoundCount]
  -[SPTagUserStats setOwnerPlaySoundCount:]
  -[SPTagUserStats ownerPlaySoundTime]
  -[SPTagUserStats setOwnerPlaySoundTime:]
  -[SPTagUserStats rangingCount]
  -[SPTagUserStats setRangingCount:]
  -[SPTagUserStats rangingTime]
  -[SPTagUserStats setRangingTime:]


SPBeaconObservation : NSObject <NSSecureCoding>
 @property  NSUUID *beaconIdentifier
 @property  long long type
 @property  NSDate *date
 @property  SPObservationLocation *location

  // class methods
  +[SPBeaconObservation supportsSecureCoding]

  // instance methods
  -[SPBeaconObservation beaconIdentifier]
  -[SPBeaconObservation encodeWithCoder:]
  -[SPBeaconObservation type]
  -[SPBeaconObservation date]
  -[SPBeaconObservation .cxx_destruct]
  -[SPBeaconObservation location]
  -[SPBeaconObservation init]
  -[SPBeaconObservation initWithCoder:]
  -[SPBeaconObservation initWithBeaconIdentifier:type:date:location:]


SPDarwinNotificationHandler : NSObject
 @property  int notifyToken

  // instance methods
  -[SPDarwinNotificationHandler setNotifyToken:]
  -[SPDarwinNotificationHandler notifyToken]
  -[SPDarwinNotificationHandler initWithNotificationName:changeBlock:]
  -[SPDarwinNotificationHandler dealloc]


SPDiscoveredAccessoryProductInformation : NSObject <NSCopying, NSSecureCoding>
 @property  long long beaconGroupVersion
 @property  BOOL eligibleForPairing
 @property  BOOL hidden
 @property  BOOL isHELEAccessory
 @property  BOOL supportBeaconGroupInfo
 @property  NSString *findmyProductId
 @property  NSString *modelName
 @property  NSString *manufacturerName
 @property  SPBeaconRole *defaultRole
 @property  NSString *appBundleIdentifier
 @property  NSURL *lowBatteryInfoURL
 @property  NSURL *disableURL
 @property  NSString *version
 @property  NSData *encryptionKeyE1
 @property  NSData *encryptionKeyE2
 @property  NSData *verificationKeyS2
 @property  double txPower
 @property  unsigned long capabilities
 @property  NSArray *layoutTemplate
 @property  NSURL *defaultHeroIcon
 @property  NSURL *defaultListIcon
 @property  NSURL *defaultHeroIcon2x
 @property  NSURL *defaultListIcon2x
 @property  NSURL *defaultHeroIcon3x
 @property  NSURL *defaultListIcon3x
 @property  SPUnknownProductMetadata *learnModeMetadata
 @property  SPUnknownProductMetadata *disableMetadata

  // class methods
  +[SPDiscoveredAccessoryProductInformation supportsSecureCoding]

  // instance methods
  -[SPDiscoveredAccessoryProductInformation appBundleIdentifier]
  -[SPDiscoveredAccessoryProductInformation setManufacturerName:]
  -[SPDiscoveredAccessoryProductInformation manufacturerName]
  -[SPDiscoveredAccessoryProductInformation modelName]
  -[SPDiscoveredAccessoryProductInformation setModelName:]
  -[SPDiscoveredAccessoryProductInformation encodeWithCoder:]
  -[SPDiscoveredAccessoryProductInformation .cxx_destruct]
  -[SPDiscoveredAccessoryProductInformation hidden]
  -[SPDiscoveredAccessoryProductInformation capabilities]
  -[SPDiscoveredAccessoryProductInformation version]
  -[SPDiscoveredAccessoryProductInformation copyWithZone:]
  -[SPDiscoveredAccessoryProductInformation setCapabilities:]
  -[SPDiscoveredAccessoryProductInformation setHidden:]
  -[SPDiscoveredAccessoryProductInformation setVersion:]
  -[SPDiscoveredAccessoryProductInformation setAppBundleIdentifier:]
  -[SPDiscoveredAccessoryProductInformation initWithCoder:]
  -[SPDiscoveredAccessoryProductInformation layoutTemplate]
  -[SPDiscoveredAccessoryProductInformation setLayoutTemplate:]
  -[SPDiscoveredAccessoryProductInformation txPower]
  -[SPDiscoveredAccessoryProductInformation setTxPower:]
  -[SPDiscoveredAccessoryProductInformation beaconGroupVersion]
  -[SPDiscoveredAccessoryProductInformation setBeaconGroupVersion:]
  -[SPDiscoveredAccessoryProductInformation eligibleForPairing]
  -[SPDiscoveredAccessoryProductInformation setEligibleForPairing:]
  -[SPDiscoveredAccessoryProductInformation isHELEAccessory]
  -[SPDiscoveredAccessoryProductInformation setIsHELEAccessory:]
  -[SPDiscoveredAccessoryProductInformation supportBeaconGroupInfo]
  -[SPDiscoveredAccessoryProductInformation setSupportBeaconGroupInfo:]
  -[SPDiscoveredAccessoryProductInformation findmyProductId]
  -[SPDiscoveredAccessoryProductInformation setFindmyProductId:]
  -[SPDiscoveredAccessoryProductInformation defaultRole]
  -[SPDiscoveredAccessoryProductInformation setDefaultRole:]
  -[SPDiscoveredAccessoryProductInformation lowBatteryInfoURL]
  -[SPDiscoveredAccessoryProductInformation setLowBatteryInfoURL:]
  -[SPDiscoveredAccessoryProductInformation disableURL]
  -[SPDiscoveredAccessoryProductInformation setDisableURL:]
  -[SPDiscoveredAccessoryProductInformation encryptionKeyE1]
  -[SPDiscoveredAccessoryProductInformation setEncryptionKeyE1:]
  -[SPDiscoveredAccessoryProductInformation encryptionKeyE2]
  -[SPDiscoveredAccessoryProductInformation setEncryptionKeyE2:]
  -[SPDiscoveredAccessoryProductInformation verificationKeyS2]
  -[SPDiscoveredAccessoryProductInformation setVerificationKeyS2:]
  -[SPDiscoveredAccessoryProductInformation defaultHeroIcon]
  -[SPDiscoveredAccessoryProductInformation setDefaultHeroIcon:]
  -[SPDiscoveredAccessoryProductInformation defaultListIcon]
  -[SPDiscoveredAccessoryProductInformation setDefaultListIcon:]
  -[SPDiscoveredAccessoryProductInformation defaultHeroIcon2x]
  -[SPDiscoveredAccessoryProductInformation setDefaultHeroIcon2x:]
  -[SPDiscoveredAccessoryProductInformation defaultListIcon2x]
  -[SPDiscoveredAccessoryProductInformation setDefaultListIcon2x:]
  -[SPDiscoveredAccessoryProductInformation defaultHeroIcon3x]
  -[SPDiscoveredAccessoryProductInformation setDefaultHeroIcon3x:]
  -[SPDiscoveredAccessoryProductInformation defaultListIcon3x]
  -[SPDiscoveredAccessoryProductInformation setDefaultListIcon3x:]
  -[SPDiscoveredAccessoryProductInformation learnModeMetadata]
  -[SPDiscoveredAccessoryProductInformation setLearnModeMetadata:]
  -[SPDiscoveredAccessoryProductInformation disableMetadata]
  -[SPDiscoveredAccessoryProductInformation setDisableMetadata:]


SPLocationFetchContext : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *bundleIdentifier
 @property  BOOL subscribe
 @property  NSString *cachePolicy
 @property  NSArray *searchIdentifiers
 @property  NSArray *searchPriority
 @property  NSArray *searchTypes
 @property  NSArray *searchLocationSources
 @property  NSDictionary *lastOnlineLocationInfo

  // class methods
  +[SPLocationFetchContext supportsSecureCoding]

  // instance methods
  -[SPLocationFetchContext setCachePolicy:]
  -[SPLocationFetchContext cachePolicy]
  -[SPLocationFetchContext subscribe]
  -[SPLocationFetchContext encodeWithCoder:]
  -[SPLocationFetchContext .cxx_destruct]
  -[SPLocationFetchContext setBundleIdentifier:]
  -[SPLocationFetchContext searchTypes]
  -[SPLocationFetchContext bundleIdentifier]
  -[SPLocationFetchContext copyWithZone:]
  -[SPLocationFetchContext setSearchTypes:]
  -[SPLocationFetchContext initWithCoder:]
  -[SPLocationFetchContext searchIdentifiers]
  -[SPLocationFetchContext setSearchIdentifiers:]
  -[SPLocationFetchContext searchPriority]
  -[SPLocationFetchContext setSearchPriority:]
  -[SPLocationFetchContext searchLocationSources]
  -[SPLocationFetchContext setSearchLocationSources:]
  -[SPLocationFetchContext lastOnlineLocationInfo]
  -[SPLocationFetchContext setLastOnlineLocationInfo:]
  -[SPLocationFetchContext setSubscribe:]


SPBeaconingKey : NSObject <NSCopying, NSSecureCoding>
 @property  NSDateInterval *dateInterval
 @property  NSData *key
 @property  NSData *secondaryKey
 @property  unsigned long primaryIndex
 @property  unsigned long secondaryIndex

  // class methods
  +[SPBeaconingKey supportsSecureCoding]

  // instance methods
  -[SPBeaconingKey dateInterval]
  -[SPBeaconingKey setDateInterval:]
  -[SPBeaconingKey encodeWithCoder:]
  -[SPBeaconingKey .cxx_destruct]
  -[SPBeaconingKey copyWithZone:]
  -[SPBeaconingKey key]
  -[SPBeaconingKey setKey:]
  -[SPBeaconingKey initWithCoder:]
  -[SPBeaconingKey primaryIndex]
  -[SPBeaconingKey secondaryIndex]
  -[SPBeaconingKey setPrimaryIndex:]
  -[SPBeaconingKey setSecondaryIndex:]
  -[SPBeaconingKey initWithDateInterval:key:]
  -[SPBeaconingKey initWithDateInterval:key:secondaryKey:primaryIndex:secondaryIndex:]
  -[SPBeaconingKey secondaryKey]
  -[SPBeaconingKey setSecondaryKey:]


SPUnknownBeacon : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *name
 @property  NSUUID *identifier
 @property  NSUUID *beaconIdentifier
 @property  NSArray *beaconLocations
 @property  NSData *advertisement
 @property  SPHandle *handle
 @property  BOOL isIgnored
 @property  BOOL isAppleAudioAccessory
 @property  NSDate *triggerDate
 @property  NSDate *ignoresUntilDate
 @property  long long alertState
 @property  unsigned long capabilities
 @property  NSString *type
 @property  SPDiscoveredAccessoryMetadata *metadata
 @property  SPDiscoveredAccessoryProductInformation *productInformation
 @property  NSDictionary *taskInformation

  // class methods
  +[SPUnknownBeacon supportsSecureCoding]

  // instance methods
  -[SPUnknownBeacon setTriggerDate:]
  -[SPUnknownBeacon setHandle:]
  -[SPUnknownBeacon identifier]
  -[SPUnknownBeacon beaconIdentifier]
  -[SPUnknownBeacon encodeWithCoder:]
  -[SPUnknownBeacon type]
  -[SPUnknownBeacon handle]
  -[SPUnknownBeacon .cxx_destruct]
  -[SPUnknownBeacon setAdvertisement:]
  -[SPUnknownBeacon capabilities]
  -[SPUnknownBeacon isIgnored]
  -[SPUnknownBeacon setType:]
  -[SPUnknownBeacon setMetadata:]
  -[SPUnknownBeacon setIdentifier:]
  -[SPUnknownBeacon triggerDate]
  -[SPUnknownBeacon setName:]
  -[SPUnknownBeacon copyWithZone:]
  -[SPUnknownBeacon setCapabilities:]
  -[SPUnknownBeacon name]
  -[SPUnknownBeacon metadata]
  -[SPUnknownBeacon isEqual:]
  -[SPUnknownBeacon initWithCoder:]
  -[SPUnknownBeacon setIsIgnored:]
  -[SPUnknownBeacon advertisement]
  -[SPUnknownBeacon setBeaconIdentifier:]
  -[SPUnknownBeacon taskInformation]
  -[SPUnknownBeacon setTaskInformation:]
  -[SPUnknownBeacon isAppleAudioAccessory]
  -[SPUnknownBeacon setIsAppleAudioAccessory:]
  -[SPUnknownBeacon beaconLocations]
  -[SPUnknownBeacon setBeaconLocations:]
  -[SPUnknownBeacon alertState]
  -[SPUnknownBeacon setAlertState:]
  -[SPUnknownBeacon productInformation]
  -[SPUnknownBeacon setProductInformation:]
  -[SPUnknownBeacon ignoresUntilDate]
  -[SPUnknownBeacon setIgnoresUntilDate:]


SPPairingManager : NSObject
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPPairingManagerXPCProtocol> *proxy
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[SPPairingManager invalidatePairingSession:completion:]
  -[SPPairingManager proxy]
  -[SPPairingManager session]
  -[SPPairingManager remoteInterface]
  -[SPPairingManager finalizePairingWithSession:name:roleId:roleEmoji:keyStatus:collaborativeKey:signature:completion:]
  -[SPPairingManager verifyPairingWithPairingSession:signature:attestation:systemPublicKey:refKeyPublicKey:systemVersion:vendorId:productId:ecid:chipId:serialNumber:collaborativeKey:completion:]
  -[SPPairingManager unpairUUID:force:completion:]
  -[SPPairingManager userAgentProxy]
  -[SPPairingManager setSession:]
  -[SPPairingManager setServiceDescription:]
  -[SPPairingManager dealloc]
  -[SPPairingManager .cxx_destruct]
  -[SPPairingManager finalizePairingWithSession:configuration:completion:]
  -[SPPairingManager setAlwaysBeaconState:completion:]
  -[SPPairingManager serviceDescription]
  -[SPPairingManager alwaysBeaconWildStateWithCompletion:]
  -[SPPairingManager currentBeaconingKeyWithCompletion:]
  -[SPPairingManager setProxy:]
  -[SPPairingManager setQueue:]
  -[SPPairingManager getOfflineFindingInfoWithCurrentData:completion:]
  -[SPPairingManager initiatePairingSessionWithCompletion:]
  -[SPPairingManager queue]
  -[SPPairingManager allPairingErrorsWithCompletion:]
  -[SPPairingManager setAlwaysBeaconWildState:completion:]
  -[SPPairingManager init]
  -[SPPairingManager getLocalPairingDataWithCompletion:]


SPCBPeripheralManagerSessionKey : NSObject <NSSecureCoding, NSCopying>
 @property  NSUUID *userIdentifier
 @property  NSString *bundleId

  // class methods
  +[SPCBPeripheralManagerSessionKey supportsSecureCoding]

  // instance methods
  -[SPCBPeripheralManagerSessionKey encodeWithCoder:]
  -[SPCBPeripheralManagerSessionKey userIdentifier]
  -[SPCBPeripheralManagerSessionKey .cxx_destruct]
  -[SPCBPeripheralManagerSessionKey initWithUserIdentifier:bundleIdentifier:]
  -[SPCBPeripheralManagerSessionKey bundleId]
  -[SPCBPeripheralManagerSessionKey copyWithZone:]
  -[SPCBPeripheralManagerSessionKey isEqual:]
  -[SPCBPeripheralManagerSessionKey initWithCoder:]


SPCommandKeys : NSObject <NSCopying, NSSecureCoding, SPNearbyToken, SPConnectionToken>
 @property  SPBeaconingKey *beaconingKey
 @property  NSData *commandKey
 @property  NSData *connectionToken
 @property  NSData *nearbyToken
 @property  NSData *address
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSDateInterval *dateInterval

  // class methods
  +[SPCommandKeys supportsSecureCoding]

  // instance methods
  -[SPCommandKeys dateInterval]
  -[SPCommandKeys encodeWithCoder:]
  -[SPCommandKeys commandKey]
  -[SPCommandKeys .cxx_destruct]
  -[SPCommandKeys address]
  -[SPCommandKeys copyWithZone:]
  -[SPCommandKeys initWithCoder:]
  -[SPCommandKeys nearbyToken]
  -[SPCommandKeys connectionToken]
  -[SPCommandKeys beaconingKey]
  -[SPCommandKeys setBeaconingKey:]
  -[SPCommandKeys setConnectionToken:]
  -[SPCommandKeys setNearbyToken:]
  -[SPCommandKeys setCommandKey:]
  -[SPCommandKeys initWithBeaconingKey:commandKey:connectionToken:nearbyToken:]


SPUnknownProductInfo : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *modelName
 @property  NSString *manufacturerName
 @property  SPUnknownProductMetadata *learnModeMetadata
 @property  SPUnknownProductMetadata *disableMetadata
 @property  unsigned long capabilities

  // class methods
  +[SPUnknownProductInfo supportsSecureCoding]

  // instance methods
  -[SPUnknownProductInfo setManufacturerName:]
  -[SPUnknownProductInfo manufacturerName]
  -[SPUnknownProductInfo modelName]
  -[SPUnknownProductInfo setModelName:]
  -[SPUnknownProductInfo encodeWithCoder:]
  -[SPUnknownProductInfo .cxx_destruct]
  -[SPUnknownProductInfo capabilities]
  -[SPUnknownProductInfo copyWithZone:]
  -[SPUnknownProductInfo setCapabilities:]
  -[SPUnknownProductInfo initWithCoder:]
  -[SPUnknownProductInfo learnModeMetadata]
  -[SPUnknownProductInfo setLearnModeMetadata:]
  -[SPUnknownProductInfo disableMetadata]
  -[SPUnknownProductInfo setDisableMetadata:]


SPOfflineAdvertisingKeysDelegate : NSObject <CBPeripheralManagerPrivateDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  SPBeaconManager *beaconManager
 @property  CBPeripheralManager *peripheralManager
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  BOOL inLowPowerMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SPOfflineAdvertisingKeysDelegate setBeaconManager:]
  -[SPOfflineAdvertisingKeysDelegate beaconManager]
  -[SPOfflineAdvertisingKeysDelegate peripheralManagerDidUpdateState:]
  -[SPOfflineAdvertisingKeysDelegate proxy]
  -[SPOfflineAdvertisingKeysDelegate initWithBeaconManager:]
  -[SPOfflineAdvertisingKeysDelegate session]
  -[SPOfflineAdvertisingKeysDelegate remoteInterface]
  -[SPOfflineAdvertisingKeysDelegate userAgentProxy]
  -[SPOfflineAdvertisingKeysDelegate enterLowPowerMode]
  -[SPOfflineAdvertisingKeysDelegate setSession:]
  -[SPOfflineAdvertisingKeysDelegate setServiceDescription:]
  -[SPOfflineAdvertisingKeysDelegate .cxx_destruct]
  -[SPOfflineAdvertisingKeysDelegate syncProxy]
  -[SPOfflineAdvertisingKeysDelegate peripheralManager:offlineAdvPayloadRequestedWithReason:]
  -[SPOfflineAdvertisingKeysDelegate serviceDescription]
  -[SPOfflineAdvertisingKeysDelegate setQueue:]
  -[SPOfflineAdvertisingKeysDelegate transformReason:]
  -[SPOfflineAdvertisingKeysDelegate setPeripheralManager:]
  -[SPOfflineAdvertisingKeysDelegate queue]
  -[SPOfflineAdvertisingKeysDelegate peripheralManager]
  -[SPOfflineAdvertisingKeysDelegate setInLowPowerMode:]
  -[SPOfflineAdvertisingKeysDelegate inLowPowerMode]
  -[SPOfflineAdvertisingKeysDelegate userAgentSyncProxy]
  -[SPOfflineAdvertisingKeysDelegate processKeyResponse:]


SPCBPeripheralKeyRequest : NSObject <NSSecureCoding>
 @property  NSDate *date
 @property  NSArray *requestParameters

  // class methods
  +[SPCBPeripheralKeyRequest supportsSecureCoding]

  // instance methods
  -[SPCBPeripheralKeyRequest requestParameters]
  -[SPCBPeripheralKeyRequest setRequestParameters:]
  -[SPCBPeripheralKeyRequest encodeWithCoder:]
  -[SPCBPeripheralKeyRequest setDate:]
  -[SPCBPeripheralKeyRequest date]
  -[SPCBPeripheralKeyRequest .cxx_destruct]
  -[SPCBPeripheralKeyRequest initWithDate:requestParameters:]
  -[SPCBPeripheralKeyRequest initWithCoder:]


SPLastOnlineLocationInfo : NSObject <NSSecureCoding, NSCopying>
 @property  NSDate *timestamp
 @property  NSDate *updatedOn

  // class methods
  +[SPLastOnlineLocationInfo supportsSecureCoding]

  // instance methods
  -[SPLastOnlineLocationInfo setTimestamp:]
  -[SPLastOnlineLocationInfo encodeWithCoder:]
  -[SPLastOnlineLocationInfo .cxx_destruct]
  -[SPLastOnlineLocationInfo copyWithZone:]
  -[SPLastOnlineLocationInfo timestamp]
  -[SPLastOnlineLocationInfo initWithCoder:]
  -[SPLastOnlineLocationInfo initWithDate:updatedOn:]
  -[SPLastOnlineLocationInfo updatedOn]
  -[SPLastOnlineLocationInfo setUpdatedOn:]


SPOwnedDeviceKeyRecord : NSObject <NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSUUID *deviceIdentifier
 @property  NSData *advertisement
 @property  NSData *hashedAdvertisement
 @property  NSDate *creationDate

  // class methods
  +[SPOwnedDeviceKeyRecord supportsSecureCoding]

  // instance methods
  -[SPOwnedDeviceKeyRecord identifier]
  -[SPOwnedDeviceKeyRecord deviceIdentifier]
  -[SPOwnedDeviceKeyRecord encodeWithCoder:]
  -[SPOwnedDeviceKeyRecord .cxx_destruct]
  -[SPOwnedDeviceKeyRecord creationDate]
  -[SPOwnedDeviceKeyRecord initWithCoder:]
  -[SPOwnedDeviceKeyRecord advertisement]
  -[SPOwnedDeviceKeyRecord initWithIdentifier:deviceIdentifier:advertisement:hashedAdvertisement:creationDate:]
  -[SPOwnedDeviceKeyRecord hashedAdvertisement]


SPNetworkMonitor : NSObject
 @property  NWPathEvaluator *evaluator
 @property  @? block
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  BOOL cachedIsNetworkUp

  // instance methods
  -[SPNetworkMonitor isMonitoring]
  -[SPNetworkMonitor setCallbackQueue:]
  -[SPNetworkMonitor isNetworkUp]
  -[SPNetworkMonitor evaluator]
  -[SPNetworkMonitor setEvaluator:]
  -[SPNetworkMonitor callbackQueue]
  -[SPNetworkMonitor notifyNetworkStateChange]
  -[SPNetworkMonitor .cxx_destruct]
  -[SPNetworkMonitor setBlock:]
  -[SPNetworkMonitor setCachedIsNetworkUp:]
  -[SPNetworkMonitor observeValueForKeyPath:ofObject:change:context:]
  -[SPNetworkMonitor startMonitoringWithCallback:]
  -[SPNetworkMonitor block]
  -[SPNetworkMonitor stopMonitoring]
  -[SPNetworkMonitor cachedIsNetworkUp]


SPOwnerSession : NSObject <SPSeparationMonitoringProtocol, SPMaintenanceConnectionProtocol, SPPersistentConnectionProtocol, SPTrackingAvoidanceServiceProtocol, SPTagSeparationProtocol, SPOwnerSessionPrivateProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPOwnerSessionXPCProtocol> *proxy
 @property  <SPOwnerSessionXPCProtocol> *userAgentProxy
 @property  NSSet *allBeaconsCache
 @property  NSSet *clientObservedBeacons
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSOperationQueue *notificationQueue
 @property  @? tagSeparationBeaconsChangedBlock
 @property  NSDictionary *locationCache
 @property  NSObject<OS_dispatch_source> *connectionExpiryDispatchTimer
 @property  NSDate *fetchLimit
 @property  NSMutableDictionary *batteryStatusCache
 @property  NSObject<OS_dispatch_source> *registerIntentDispatchTimer
 @property  SPOwnerSessionState *_ownerSessionState
 @property  NSMutableDictionary *darwinHandlers
 @property  SPOwnerSessionLocationFetch *locationFetch
 @property  @? maintainedBeaconsChangedBlock
 @property  @? maintainedUnknownBeaconsChangedBlock
 @property  NSSet *locationSources
 @property  @? ownerSessionStateUpdatedBlock
 @property  SPOwnerSessionState *ownerSessionState
 @property  @? beaconsChangedBlock
 @property  @? beaconAddedBlock
 @property  @? beaconRemovedBlock
 @property  @? latestLocationsUpdatedBlock
 @property  NSSet *allBeacons
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SPOwnerSession subscribeAndFetchLocationForContext:completion:]
  -[SPOwnerSession setInvalidationBlock:]
  -[SPOwnerSession fetchLimit]
  -[SPOwnerSession setFetchLimit:]
  -[SPOwnerSession unassignSafeLocation:beaconUUIDs:completion:]
  -[SPOwnerSession locationForContext:completion:]
  -[SPOwnerSession allBeaconsWithCompletion:]
  -[SPOwnerSession executeCommand:completion:]
  -[SPOwnerSession forceKeySyncForBeaconUUID:lastObservationDate:lastObservationIndex:completion:]
  -[SPOwnerSession startRefreshingBeaconsForSeparationMonitoringWithBlock:]
  -[SPOwnerSession beaconRemovedBlock]
  -[SPOwnerSession updateConnectionExpiryDispatchTimerWithBeacons:]
  -[SPOwnerSession publishSeparationEventForBeacons:eventType:region:completion:]
  -[SPOwnerSession proxy]
  -[SPOwnerSession _unregisterDarwinNotificationName:]
  -[SPOwnerSession unsubscribeLocationUpdatesWithCompletion:]
  -[SPOwnerSession updateAllBeacons]
  -[SPOwnerSession removeBeacon:completion:]
  -[SPOwnerSession simulateAccessoryPairing:name:isAirPods:completion:]
  -[SPOwnerSession beaconForUUID:completion:]
  -[SPOwnerSession registerIntentDispatchTimer]
  -[SPOwnerSession session]
  -[SPOwnerSession remoteInterface]
  -[SPOwnerSession fetchFindMyNetworkStatusForMACAddress:completion:]
  -[SPOwnerSession didWithdrawUnauthorizedTrackingWithCompletion:completion:]
  -[SPOwnerSession forceUpdateKeyMapsForUUID:completion:]
  -[SPOwnerSession isUTAppAlertDisabled:]
  -[SPOwnerSession addBeaconChangedListener:beaconUUID:taskName:commandIdentifier:commandIssueDate:]
  -[SPOwnerSession _invalidate]
  -[SPOwnerSession maintainedUnknownBeaconsChangedBlock]
  -[SPOwnerSession ownerSessionStateUpdatedBlock]
  -[SPOwnerSession unauthorizedTrackingTypeWithCompletion:completion:]
  -[SPOwnerSession locationsForBeacons:completion:]
  -[SPOwnerSession userAgentProxy]
  -[SPOwnerSession setMaintainedUnknownBeaconsChangedBlock:]
  -[SPOwnerSession maintenanceConnectionUpdateBlock]
  -[SPOwnerSession ignoringUnauthorizedTrackingWithCompletion:completion:]
  -[SPOwnerSession beaconStoreStatusWithCompletion:]
  -[SPOwnerSession setLocationUpdateBlock:]
  -[SPOwnerSession _updateOwnerSessionState]
  -[SPOwnerSession setRegisterIntentDispatchTimer:]
  -[SPOwnerSession darwinHandlers]
  -[SPOwnerSession setSession:]
  -[SPOwnerSession setBeaconsChangedBlock:]
  -[SPOwnerSession maintainedUnknownBeaconsChangedWithBlock:]
  -[SPOwnerSession setLatestLocationsUpdatedBlock:]
  -[SPOwnerSession setServiceDescription:]
  -[SPOwnerSession disconnectFromMACAddress:completion:]
  -[SPOwnerSession setBatteryStatusCache:]
  -[SPOwnerSession dealloc]
  -[SPOwnerSession beaconForIdentifier:completion:]
  -[SPOwnerSession connectionExpiryDispatchTimer]
  -[SPOwnerSession connectUsingMACAddress:longTermKey:completion:]
  -[SPOwnerSession disableSeparationMonitoringForBeacons:completion:]
  -[SPOwnerSession disableSeparationMonitoringForBeacon:completion:]
  -[SPOwnerSession readAISMetadataFromBeaconIdentifier:completion:]
  -[SPOwnerSession didUpdateUnauthorizedTrackingWithCompletion:completion:]
  -[SPOwnerSession assignSafeLocation:beaconUUIDs:completion:]
  -[SPOwnerSession beaconGroupForIdentifier:completion:]
  -[SPOwnerSession .cxx_destruct]
  -[SPOwnerSession finishBeaconGroupFuture:command:commandIssueDate:]
  -[SPOwnerSession tagSeparationStateChanged:beaconUUID:completion:]
  -[SPOwnerSession updateBatteryStatus:beaconUUID:completion:]
  -[SPOwnerSession setLocationFetch:]
  -[SPOwnerSession forceUpdateKeyAlignmentRecordForUUID:completion:]
  -[SPOwnerSession locationSources]
  -[SPOwnerSession registerDarwinNotificationName:block:]
  -[SPOwnerSession removeSafeLocation:completion:]
  -[SPOwnerSession setLocationSources:]
  -[SPOwnerSession setBeaconRemovedBlock:]
  -[SPOwnerSession addSafeLocation:completion:]
  -[SPOwnerSession setUserAgentProxy:]
  -[SPOwnerSession _ownerSessionState]
  -[SPOwnerSession rawSearchResultsForBeacon:dateInterval:completion:]
  -[SPOwnerSession setBeaconAddedBlock:]
  -[SPOwnerSession finishBeaconFuture:beaconUUID:]
  -[SPOwnerSession stopRefreshingBeaconsForSeparationMonitoringWithBlock]
  -[SPOwnerSession locationCache]
  -[SPOwnerSession ownerSessionState]
  -[SPOwnerSession registerIntentTimerFired]
  -[SPOwnerSession startRefreshingPersistentConnectionWithBlock:]
  -[SPOwnerSession disableUTAppAlert:completion:]
  -[SPOwnerSession serviceDescription]
  -[SPOwnerSession setLocationCache:]
  -[SPOwnerSession setDarwinHandlers:]
  -[SPOwnerSession allBeaconsCache]
  -[SPOwnerSession setProxy:]
  -[SPOwnerSession clientConfigurationWithCompletion:]
  -[SPOwnerSession tagSeparationStateChanged:beaconUUID:location:completion:]
  -[SPOwnerSession setQueue:]
  -[SPOwnerSession startRefreshingTagSeparationWithBlock:]
  -[SPOwnerSession batteryStatusCache]
  -[SPOwnerSession executeCommand:]
  -[SPOwnerSession updateBeaconObservations:completion:]
  -[SPOwnerSession startRefreshingSafeLocationWithBlock:]
  -[SPOwnerSession stopRefreshingPersistentConnection]
  -[SPOwnerSession setNotificationQueue:]
  -[SPOwnerSession unacceptedBeaconsWithCompletion:]
  -[SPOwnerSession enableSeparationMonitoringForBeacon:completion:]
  -[SPOwnerSession standaloneBeaconsForUUIDs:completion:]
  -[SPOwnerSession setRegisterIntentDispatchTimerWithInterval:]
  -[SPOwnerSession startRefreshingBeacons:]
  -[SPOwnerSession sendUnregisterIntentWithCompletion:]
  -[SPOwnerSession requestLiveLocationForFriend:completion:]
  -[SPOwnerSession locationFetch]
  -[SPOwnerSession unassignSafeLocation:beaconUUID:completion:]
  -[SPOwnerSession queue]
  -[SPOwnerSession executeUTPlaySoundCommand:]
  -[SPOwnerSession playUnauthorizedSoundOnBeaconByUUID:completion:]
  -[SPOwnerSession stopRefreshingSafeLocations]
  -[SPOwnerSession latestLocationsUpdatedBlock]
  -[SPOwnerSession didDetectUnauthorizedTrackingWithCompletion:completion:]
  -[SPOwnerSession set_ownerSessionState:]
  -[SPOwnerSession activeCompanionWithCompletion:]
  -[SPOwnerSession maintainedBeaconsChangedBlock]
  -[SPOwnerSession readAISMetadataFromMACAddress:useOwnerControlPoint:completion:]
  -[SPOwnerSession unknownBeaconsForUUIDs:completion:]
  -[SPOwnerSession requestLiveLocationForUUID:completion:]
  -[SPOwnerSession startRefreshing]
  -[SPOwnerSession setOwnerSessionStateUpdatedBlock:]
  -[SPOwnerSession clientObservedBeacons]
  -[SPOwnerSession waitForBeaconStoreAvailableWithCompletion:]
  -[SPOwnerSession beaconGroupsForUUIDs:completion:]
  -[SPOwnerSession _updateBatteryStatus:beaconUUID:completion:]
  -[SPOwnerSession beaconsToMonitorForSeparation:]
  -[SPOwnerSession stopRefreshingSeparationMonitoringState]
  -[SPOwnerSession unregisterDarwinNotificationName:]
  -[SPOwnerSession stopRefreshingTagSeparation]
  -[SPOwnerSession allBeacons]
  -[SPOwnerSession maintainedBeaconsChangedWithBlock:]
  -[SPOwnerSession beaconingIdentifierForMACAddress:completion:]
  -[SPOwnerSession startUpdatingMaintenanceConnection]
  -[SPOwnerSession setAllBeaconsCache:]
  -[SPOwnerSession setClientObservedBeacons:]
  -[SPOwnerSession startRefreshingSeparationMonitoringState:]
  -[SPOwnerSession enableSeparationMonitoringForBeacons:completion:]
  -[SPOwnerSession ignoreBeaconByUUID:untilDate:completion:]
  -[SPOwnerSession stopRefreshing]
  -[SPOwnerSession ignoreBeaconByUUID:until:]
  -[SPOwnerSession fetchUnauthorizedEncryptedPayload:completion:]
  -[SPOwnerSession updateSafeLocation:completion:]
  -[SPOwnerSession acceptUTForBeaconUUID:]
  -[SPOwnerSession connectionExpiryTimerFired]
  -[SPOwnerSession notificationQueue]
  -[SPOwnerSession fakeClassicPairingWithMACAddress:completion:]
  -[SPOwnerSession setConnectionExpiryDispatchTimer:]
  -[SPOwnerSession fetchSeparationMonitoringStatus:]
  -[SPOwnerSession setFindMyNetworkStatusForMACAddress:status:completion:]
  -[SPOwnerSession setConnectionExpiryDispatchTimerWithInterval:]
  -[SPOwnerSession safeLocationsForSeparationMonitoring:]
  -[SPOwnerSession assignSafeLocation:to:completion:]
  -[SPOwnerSession setTagSeparationBeaconsChangedBlock:]
  -[SPOwnerSession _cacheBatteryStatus:beaconUUID:]
  -[SPOwnerSession forceLOIBasedSafeLocationRefresh:]
  -[SPOwnerSession init]
  -[SPOwnerSession invalidateRegisterIntentDispatchTimer]
  -[SPOwnerSession sendRegisterIntentWithCompletion:]
  -[SPOwnerSession beaconsToMaintainPersistentConnection:]
  -[SPOwnerSession beaconsChangedBlock]
  -[SPOwnerSession beaconAddedBlock]
  -[SPOwnerSession tagSeparationBeaconsChangedBlock]
  -[SPOwnerSession ignoreBeaconByUUID:until:completion:]
  -[SPOwnerSession forceDistributeKeysWithCompletion:]
  -[SPOwnerSession allObservationsForBeacon:completion:]
  -[SPOwnerSession ignoreBeaconByAdvertisement:until:completion:]
  -[SPOwnerSession setMaintainedBeaconsChangedBlock:]


SPPowerAssertion : NSObject
 @property  NSString *reason
 @property  double timeout
 @property  unsigned long type
 @property  unsigned int powerAssertionId
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[SPPowerAssertion powerAssertionOption]
  -[SPPowerAssertion type]
  -[SPPowerAssertion assertionType]
  -[SPPowerAssertion setTimeout:]
  -[SPPowerAssertion hold]
  -[SPPowerAssertion dealloc]
  -[SPPowerAssertion drop]
  -[SPPowerAssertion initWithReason:type:timeout:]
  -[SPPowerAssertion setPowerAssertionId:]
  -[SPPowerAssertion .cxx_destruct]
  -[SPPowerAssertion timeout]
  -[SPPowerAssertion reason]
  -[SPPowerAssertion setType:]
  -[SPPowerAssertion setQueue:]
  -[SPPowerAssertion _drop]
  -[SPPowerAssertion queue]
  -[SPPowerAssertion powerAssertionId]
  -[SPPowerAssertion setReason:]
  -[SPPowerAssertion assertionName]


SPKeyIndexMap : NSObject
 @property  NSUUID *beaconIdentifier
 @property  unsigned char sequence
 @property  ^{?=^{_sp_key_index_map}Q} mapHandle

  // instance methods
  -[SPKeyIndexMap beaconIdentifier]
  -[SPKeyIndexMap initWithBeaconIdentifier:keySequence:mapHandle:]
  -[SPKeyIndexMap dealloc]
  -[SPKeyIndexMap .cxx_destruct]
  -[SPKeyIndexMap headerString]
  -[SPKeyIndexMap sequence]
  -[SPKeyIndexMap mapHandle]
  -[SPKeyIndexMap init]


SPKeyReconciler : NSObject
  // instance methods
  -[SPKeyReconciler initWithDictionary:]
  -[SPKeyReconciler .cxx_destruct]
  -[SPKeyReconciler reconcileKey:matchedIndex:sequence:error:]


SPCBPeripheralKeyResponse : NSObject <NSSecureCoding>
 @property  NSArray *peripherals

  // class methods
  +[SPCBPeripheralKeyResponse supportsSecureCoding]

  // instance methods
  -[SPCBPeripheralKeyResponse encodeWithCoder:]
  -[SPCBPeripheralKeyResponse setPeripherals:]
  -[SPCBPeripheralKeyResponse .cxx_destruct]
  -[SPCBPeripheralKeyResponse peripherals]
  -[SPCBPeripheralKeyResponse initWithPeripherals:]
  -[SPCBPeripheralKeyResponse initWithCoder:]


SPSecureLocation : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *findMyId
 @property  double latitude
 @property  double longitude
 @property  double horizontalAccuracy
 @property  double verticalAccuracy
 @property  double speed
 @property  double course
 @property  double altitude
 @property  NSNumber *floor
 @property  NSDate *timestamp
 @property  long long motionActivityState
 @property  long long publishReason
 @property  NSString *locationLabel

  // class methods
  +[SPSecureLocation supportsSecureCoding]
  +[SPSecureLocation _stringFromPublishReason:]
  +[SPSecureLocation _stringFromMotionState:]

  // instance methods
  -[SPSecureLocation horizontalAccuracy]
  -[SPSecureLocation setHorizontalAccuracy:]
  -[SPSecureLocation altitude]
  -[SPSecureLocation setAltitude:]
  -[SPSecureLocation latitude]
  -[SPSecureLocation course]
  -[SPSecureLocation setTimestamp:]
  -[SPSecureLocation setLatitude:]
  -[SPSecureLocation encodeWithCoder:]
  -[SPSecureLocation findMyId]
  -[SPSecureLocation setLongitude:]
  -[SPSecureLocation setSpeed:]
  -[SPSecureLocation longitude]
  -[SPSecureLocation .cxx_destruct]
  -[SPSecureLocation verticalAccuracy]
  -[SPSecureLocation speed]
  -[SPSecureLocation setFindMyId:]
  -[SPSecureLocation copyWithZone:]
  -[SPSecureLocation timestamp]
  -[SPSecureLocation setCourse:]
  -[SPSecureLocation initWithCoder:]
  -[SPSecureLocation setVerticalAccuracy:]
  -[SPSecureLocation floor]
  -[SPSecureLocation motionActivityState]
  -[SPSecureLocation setMotionActivityState:]
  -[SPSecureLocation locationLabel]
  -[SPSecureLocation setLocationLabel:]
  -[SPSecureLocation setFloor:]
  -[SPSecureLocation publishReason]
  -[SPSecureLocation setPublishReason:]


SPOwnerInterface : NSObject
  // class methods
  +[SPOwnerInterface cbPeripheralManagementSession]

  // instance methods
  -[SPOwnerInterface persistentConnectionSession]
  -[SPOwnerInterface privateOwnerSession]
  -[SPOwnerInterface trackingAvoidanceService]
  -[SPOwnerInterface maintenanceConnectionSession]
  -[SPOwnerInterface tagSeparationSession]
  -[SPOwnerInterface separationMonitoringSession]
  -[SPOwnerInterface fmipRegisterInfo]
  -[SPOwnerInterface ownerSession]
  -[SPOwnerInterface settingsConfiguration]
  -[SPOwnerInterface privateFirmwareUpdateSession]
  -[SPOwnerInterface firmwareUpdateSession]


SPOwnerSessionLocationFetch : NSObject <SPLocationFetchClientXPCProtocol>
 @property  FMXPCSession *session
 @property  <SPOwnerSessionXPCProtocol> *proxy
 @property  @? locationUpdates
 @property  @? locationFetchSessionInvalidationBlock
 @property  unsigned long retryCount
 @property  SPLocationFetchContext *lastContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPOwnerSessionLocationFetch remoteInterface]
  +[SPOwnerSessionLocationFetch exportedInterface]

  // instance methods
  -[SPOwnerSessionLocationFetch subscribeAndFetchLocationForContext:completion:]
  -[SPOwnerSessionLocationFetch setInvalidationBlock:]
  -[SPOwnerSessionLocationFetch locationForContext:completion:]
  -[SPOwnerSessionLocationFetch proxy]
  -[SPOwnerSessionLocationFetch unsubscribeLocationUpdatesWithCompletion:]
  -[SPOwnerSessionLocationFetch session]
  -[SPOwnerSessionLocationFetch interruptionHandler:]
  -[SPOwnerSessionLocationFetch locationFetchSessionInvalidationBlock]
  -[SPOwnerSessionLocationFetch invalidationHandler:]
  -[SPOwnerSessionLocationFetch setLocationUpdateBlock:]
  -[SPOwnerSessionLocationFetch retryCount]
  -[SPOwnerSessionLocationFetch setSession:]
  -[SPOwnerSessionLocationFetch setRetryCount:]
  -[SPOwnerSessionLocationFetch _decayedWaitIntervalForRetryCount:]
  -[SPOwnerSessionLocationFetch .cxx_destruct]
  -[SPOwnerSessionLocationFetch setLastContext:]
  -[SPOwnerSessionLocationFetch locationUpdates]
  -[SPOwnerSessionLocationFetch lastContext]
  -[SPOwnerSessionLocationFetch setProxy:]
  -[SPOwnerSessionLocationFetch setLocationUpdates:]
  -[SPOwnerSessionLocationFetch setLocationFetchSessionInvalidationBlock:]
  -[SPOwnerSessionLocationFetch init]
  -[SPOwnerSessionLocationFetch receivedUpdatedLocation:]


SPObservationLocation : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  double latitude
 @property  double longitude
 @property  double horizontalAccuracy
 @property  double altitude
 @property  double verticalAccuracy
 @property  double speed
 @property  double speedAccuracy
 @property  double course
 @property  double courseAccuracy
 @property  NSNumber *floorLevel

  // class methods
  +[SPObservationLocation supportsSecureCoding]

  // instance methods
  -[SPObservationLocation horizontalAccuracy]
  -[SPObservationLocation setHorizontalAccuracy:]
  -[SPObservationLocation altitude]
  -[SPObservationLocation setAltitude:]
  -[SPObservationLocation latitude]
  -[SPObservationLocation course]
  -[SPObservationLocation setTimestamp:]
  -[SPObservationLocation setLatitude:]
  -[SPObservationLocation encodeWithCoder:]
  -[SPObservationLocation setLongitude:]
  -[SPObservationLocation setSpeed:]
  -[SPObservationLocation longitude]
  -[SPObservationLocation .cxx_destruct]
  -[SPObservationLocation verticalAccuracy]
  -[SPObservationLocation speed]
  -[SPObservationLocation speedAccuracy]
  -[SPObservationLocation copyWithZone:]
  -[SPObservationLocation timestamp]
  -[SPObservationLocation courseAccuracy]
  -[SPObservationLocation setCourse:]
  -[SPObservationLocation initWithCoder:]
  -[SPObservationLocation setVerticalAccuracy:]
  -[SPObservationLocation setCourseAccuracy:]
  -[SPObservationLocation setSpeedAccuracy:]
  -[SPObservationLocation initWithTimestamp:latitude:longitude:horizontalAcuracy:altitude:verticalAccuracy:speed:speedAccuracy:course:courseAccuracy:floorLevel:]
  -[SPObservationLocation initWithTimestamp:latitude:longitude:horizontalAccuracy:altitude:verticalAccuracy:speed:speedAccuracy:course:courseAccuracy:floorLevel:]
  -[SPObservationLocation floorLevel]
  -[SPObservationLocation setFloorLevel:]


SPCBPeripheralManager : NSObject <SPCBPeripheralManagement>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  FMQueueSynchronizer *queueSynchronizer
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  FMTokenBucket *tokenBucket
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPCBPeripheralManagementXPCProtocol> *proxy
 @property  NSMutableDictionary *sessionMetadata
 @property  BOOL enableSystemWakes
 @property  BOOL forceUpdateCriteria
 @property  @? peripheralsUpdatedCallback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPCBPeripheralManager remoteInterface]

  // instance methods
  -[SPCBPeripheralManager successfulConnectionForPeripheral:leMAC:ltk:completion:]
  -[SPCBPeripheralManager setQueueSynchronizer:]
  -[SPCBPeripheralManager enableSystemWakes]
  -[SPCBPeripheralManager proxy]
  -[SPCBPeripheralManager sessionMetadata]
  -[SPCBPeripheralManager stopSessionForUserIdentifier:bundleId:completion:]
  -[SPCBPeripheralManager session]
  -[SPCBPeripheralManager timeIntervalToNextFireDateFromDate:]
  -[SPCBPeripheralManager interruptionHandler:]
  -[SPCBPeripheralManager peripheralsUpdatedCallback]
  -[SPCBPeripheralManager setCallbackQueue:]
  -[SPCBPeripheralManager invalidationHandler:]
  -[SPCBPeripheralManager fetch]
  -[SPCBPeripheralManager forceUpdateCriteria]
  -[SPCBPeripheralManager setSession:]
  -[SPCBPeripheralManager callbackQueue]
  -[SPCBPeripheralManager setServiceDescription:]
  -[SPCBPeripheralManager .cxx_destruct]
  -[SPCBPeripheralManager descriptionForVendorIdentifierList:]
  -[SPCBPeripheralManager setTokenBucket:]
  -[SPCBPeripheralManager setEnableSystemWakes:]
  -[SPCBPeripheralManager queueSynchronizer]
  -[SPCBPeripheralManager setSessionMetadata:]
  -[SPCBPeripheralManager serviceDescription]
  -[SPCBPeripheralManager setProxy:]
  -[SPCBPeripheralManager setQueue:]
  -[SPCBPeripheralManager timerFiredForActivity:]
  -[SPCBPeripheralManager queue]
  -[SPCBPeripheralManager enableSystemWakesForUpdate:completion:]
  -[SPCBPeripheralManager startSessionForUserIdentifier:bundleId:vendorIdentifierList:completion:]
  -[SPCBPeripheralManager _enforceRateLimit]
  -[SPCBPeripheralManager setPeripheralsUpdatedCallback:]
  -[SPCBPeripheralManager handleDarwinNotificationNamed:]
  -[SPCBPeripheralManager setForceUpdateCriteria:]
  -[SPCBPeripheralManager tokenBucket]
  -[SPCBPeripheralManager init]


SPBeaconUpdates : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *name
 @property  long long roleId
 @property  NSString *emoji

  // class methods
  +[SPBeaconUpdates supportsSecureCoding]

  // instance methods
  -[SPBeaconUpdates encodeWithCoder:]
  -[SPBeaconUpdates .cxx_destruct]
  -[SPBeaconUpdates setName:]
  -[SPBeaconUpdates copyWithZone:]
  -[SPBeaconUpdates name]
  -[SPBeaconUpdates initWithCoder:]
  -[SPBeaconUpdates emoji]
  -[SPBeaconUpdates setEmoji:]
  -[SPBeaconUpdates roleId]
  -[SPBeaconUpdates setRoleId:]
  -[SPBeaconUpdates initWithName:roleId:]


SPFirmwareUpdateSession : NSObject <SPFirmwareUpdateSessionPrivateProtocol>
 @property  FMXPCSession *session
 @property  NSObject<OS_dispatch_queue> *queue
 @property  FMFuture *sessionInvalidationFuture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SPFirmwareUpdateSession setSessionInvalidationFuture:]
  -[SPFirmwareUpdateSession connectionTokensForBeaconUUID:dateInterval:completion:]
  -[SPFirmwareUpdateSession sessionInvalidationFuture]
  -[SPFirmwareUpdateSession proxy]
  -[SPFirmwareUpdateSession session]
  -[SPFirmwareUpdateSession remoteInterface]
  -[SPFirmwareUpdateSession firmwareUpdateStateForBeaconUUID:completion:]
  -[SPFirmwareUpdateSession setSession:]
  -[SPFirmwareUpdateSession initiateFirmwareUpdateForAllEligibleBeaconsWithCompletion:]
  -[SPFirmwareUpdateSession beaconsInFirmwareUpdateState:dateInterval:completion:]
  -[SPFirmwareUpdateSession .cxx_destruct]
  -[SPFirmwareUpdateSession serviceDescription]
  -[SPFirmwareUpdateSession setQueue:]
  -[SPFirmwareUpdateSession candidateBeaconsWithCompletion:]
  -[SPFirmwareUpdateSession queue]
  -[SPFirmwareUpdateSession updateBeaconUUID:firmwareUpdateState:systemVersion:error:completion:]
  -[SPFirmwareUpdateSession init]


SPDiscoveredAccessory : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSData *macAddress
 @property  SPDiscoveredAccessoryMetadata *discoveredMetadata
 @property  SPDiscoveredAccessoryProductInformation *productInformation
 @property  BOOL isBatteryTooLow

  // class methods
  +[SPDiscoveredAccessory supportsSecureCoding]

  // instance methods
  -[SPDiscoveredAccessory macAddress]
  -[SPDiscoveredAccessory identifier]
  -[SPDiscoveredAccessory encodeWithCoder:]
  -[SPDiscoveredAccessory .cxx_destruct]
  -[SPDiscoveredAccessory setMacAddress:]
  -[SPDiscoveredAccessory setIdentifier:]
  -[SPDiscoveredAccessory copyWithZone:]
  -[SPDiscoveredAccessory isEqual:]
  -[SPDiscoveredAccessory initWithCoder:]
  -[SPDiscoveredAccessory productInformation]
  -[SPDiscoveredAccessory setProductInformation:]
  -[SPDiscoveredAccessory discoveredMetadata]
  -[SPDiscoveredAccessory setDiscoveredMetadata:]
  -[SPDiscoveredAccessory isBatteryTooLow]
  -[SPDiscoveredAccessory setIsBatteryTooLow:]


SPCommandKeysCriteria : NSObject <NSCopying, NSSecureCoding>
 @property  NSNumber *sequence
 @property  NSDateInterval *dateInterval
 @property  NSArray *indices
 @property  NSNumber *index
 @property  NSNumber *hint

  // class methods
  +[SPCommandKeysCriteria supportsSecureCoding]
  +[SPCommandKeysCriteria matchPrimaryIndices:]
  +[SPCommandKeysCriteria matchDateInterval:]
  +[SPCommandKeysCriteria matchSequence:index:hint:]
  +[SPCommandKeysCriteria driftModeledCriteria]
  +[SPCommandKeysCriteria matchSecondaryIndex:hint:]

  // instance methods
  -[SPCommandKeysCriteria indices]
  -[SPCommandKeysCriteria dateInterval]
  -[SPCommandKeysCriteria setSequence:]
  -[SPCommandKeysCriteria setIndex:]
  -[SPCommandKeysCriteria setDateInterval:]
  -[SPCommandKeysCriteria index]
  -[SPCommandKeysCriteria encodeWithCoder:]
  -[SPCommandKeysCriteria .cxx_destruct]
  -[SPCommandKeysCriteria copyWithZone:]
  -[SPCommandKeysCriteria sequence]
  -[SPCommandKeysCriteria initWithCoder:]
  -[SPCommandKeysCriteria setIndices:]
  -[SPCommandKeysCriteria setHint:]
  -[SPCommandKeysCriteria hint]
  -[SPCommandKeysCriteria initWithDateInterval:sequence:indices:index:hint:]


SPMacBeaconConfig : NSObject <NSCopying, NSSecureCoding>
 @property  double initialNoBeaconDuration
 @property  double fastRollAdvertisementDuration
 @property  double fastRollAdvertisementInterval
 @property  double slowRollAdvertisementDuration
 @property  double slowRollNoAdvertisementDuration
 @property  double noAdvertisementDurationDecayFactor
 @property  NSArray *postInitialDayAdvertisementTimes

  // class methods
  +[SPMacBeaconConfig supportsSecureCoding]

  // instance methods
  -[SPMacBeaconConfig encodeWithCoder:]
  -[SPMacBeaconConfig .cxx_destruct]
  -[SPMacBeaconConfig copyWithZone:]
  -[SPMacBeaconConfig initWithCoder:]
  -[SPMacBeaconConfig initWithInitialNoBeaconDuration:fastRollAdvertisementDuration:fastRollAdvertisementInterval:slowRollAdvertisementDuration:slowRollNoAdvertisementDuration:noAdvertisementDurationDecayFactor:postInitialDayAdvertisementTimes:]
  -[SPMacBeaconConfig initFromPrefs]
  -[SPMacBeaconConfig persistToPrefs]
  -[SPMacBeaconConfig initialNoBeaconDuration]
  -[SPMacBeaconConfig setInitialNoBeaconDuration:]
  -[SPMacBeaconConfig fastRollAdvertisementDuration]
  -[SPMacBeaconConfig setFastRollAdvertisementDuration:]
  -[SPMacBeaconConfig fastRollAdvertisementInterval]
  -[SPMacBeaconConfig setFastRollAdvertisementInterval:]
  -[SPMacBeaconConfig slowRollAdvertisementDuration]
  -[SPMacBeaconConfig setSlowRollAdvertisementDuration:]
  -[SPMacBeaconConfig slowRollNoAdvertisementDuration]
  -[SPMacBeaconConfig setSlowRollNoAdvertisementDuration:]
  -[SPMacBeaconConfig noAdvertisementDurationDecayFactor]
  -[SPMacBeaconConfig setNoAdvertisementDurationDecayFactor:]
  -[SPMacBeaconConfig postInitialDayAdvertisementTimes]
  -[SPMacBeaconConfig setPostInitialDayAdvertisementTimes:]


SPUnknownDiscoverySessionState : NSObject <NSCopying, NSSecureCoding>
 @property  NSSet *unknownAccessories

  // class methods
  +[SPUnknownDiscoverySessionState supportsSecureCoding]

  // instance methods
  -[SPUnknownDiscoverySessionState encodeWithCoder:]
  -[SPUnknownDiscoverySessionState .cxx_destruct]
  -[SPUnknownDiscoverySessionState copyWithZone:]
  -[SPUnknownDiscoverySessionState initWithCoder:]
  -[SPUnknownDiscoverySessionState initWithUnknownAccessories:]
  -[SPUnknownDiscoverySessionState unknownAccessories]
  -[SPUnknownDiscoverySessionState setUnknownAccessories:]


SPBLEStateMonitor : NSObject <CBCentralManagerDelegate>
 @property  unsigned long bleState
 @property  CBCentralManager *centralManager
 @property  <SPBLEStateMonitorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SPBLEStateMonitor centralManager]
  -[SPBLEStateMonitor setCentralManager:]
  -[SPBLEStateMonitor centralManagerDidUpdateState:]
  -[SPBLEStateMonitor setDelegate:]
  -[SPBLEStateMonitor delegate]
  -[SPBLEStateMonitor .cxx_destruct]
  -[SPBLEStateMonitor notifyDelegate:]
  -[SPBLEStateMonitor setBleState:]
  -[SPBLEStateMonitor bleState]
  -[SPBLEStateMonitor startMonitoring]
  -[SPBLEStateMonitor init]


SPBeaconManager : NSObject <SPMonitorsWrapperDelegate, SPBLEStateMonitorDelegate>
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPBeaconManagerXPCProtocol> *proxy
 @property  <SPBeaconManagerXPCProtocol> *userAgentProxy
 @property  NSObject<OS_dispatch_queue> *queue
 @property  FMXPCActivity *periodicActionXpcActivity
 @property  BOOL schedulePeriodicActionXpcActivity
 @property  double periodicActionXpcActivityInterval
 @property  NSObject<OS_dispatch_source> *periodicActionDispatchTimer
 @property  SPMonitorsWrapper *monitorWrapper
 @property  SPBLEStateMonitor *bleMonitor
 @property  BOOL currentBeaconingState
 @property  BOOL forceBeaconingOff
 @property  unsigned char currentStatus
 @property  long long cachedLocalBeaconManagerState
 @property  BOOL initialStateChangeSent
 @property  BOOL beaconFromNVRAM
 @property  NSUUID *selfBeaconingUUID
 @property  unsigned long selfBeaconingIndex
 @property  NSDate *selfBeaconingPairDate
 @property  NSData *selfBeaconingDerivedSharedSecretKey
 @property  NSData *selfBeaconingPublicKey
 @property  NSDictionary *selfBeaconingConfigurations
 @property  BOOL alreadyPoisonedLocalBeacon
 @property  @? stateChangedBlockWithCompletion
 @property  @? statusChangedBlockWithCompletion
 @property  @? beaconingKeyChangedBlockWithCompletion
 @property  @? nearbyTokensChangedBlockWithCompletion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPBeaconManager scheduleDateInterval:]
  +[SPBeaconManager afterFirstUnlock:]

  // instance methods
  -[SPBeaconManager connectionTokensForBeaconUUID:dateInterval:completion:]
  -[SPBeaconManager allBeaconsWithCompletion:]
  -[SPBeaconManager proxy]
  -[SPBeaconManager currentStatus]
  -[SPBeaconManager selfBeaconingIndex]
  -[SPBeaconManager beaconForUUID:completion:]
  -[SPBeaconManager setSchedulePeriodicActionXpcActivity:]
  -[SPBeaconManager session]
  -[SPBeaconManager selfBeaconingPublicKey]
  -[SPBeaconManager createOwnedDeviceKeyRecordForUUID:completion:]
  -[SPBeaconManager remoteInterface]
  -[SPBeaconManager setSelfBeaconingPairDate:]
  -[SPBeaconManager timeIntervalToNextFireDateFromDate:]
  -[SPBeaconManager setCachedLocalBeaconManagerState:]
  -[SPBeaconManager _invalidate]
  -[SPBeaconManager notifyBeaconingKeysChangedBlockWithCompletion:]
  -[SPBeaconManager isBeaconing]
  -[SPBeaconManager periodicActionXpcActivity]
  -[SPBeaconManager setUserHasAcknowledgedFindMy:completion:]
  -[SPBeaconManager userAgentProxy]
  -[SPBeaconManager xpcActivityCriteria:]
  -[SPBeaconManager refreshBeaconingState]
  -[SPBeaconManager statusChangedBlockWithCompletion]
  -[SPBeaconManager setPeriodicActionXpcActivity:]
  -[SPBeaconManager schedulePeriodicActionXpcActivity]
  -[SPBeaconManager setStateChangedBlockWithCompletion:]
  -[SPBeaconManager allDuriansWithCompletion:]
  -[SPBeaconManager handlerForActivity:state:]
  -[SPBeaconManager setSession:]
  -[SPBeaconManager setNearbyTokensChangedBlockWithCompletion:]
  -[SPBeaconManager currentBeaconingState]
  -[SPBeaconManager cachedLocalBeaconManagerState]
  -[SPBeaconManager setServiceDescription:]
  -[SPBeaconManager periodicActionXpcActivityInterval]
  -[SPBeaconManager bleMonitor]
  -[SPBeaconManager dealloc]
  -[SPBeaconManager setBleMonitor:]
  -[SPBeaconManager updateStateFromNVRAM]
  -[SPBeaconManager ownedDeviceKeyRecordsForUUID:completion:]
  -[SPBeaconManager setCurrentWildKeyIndex:forBeacon:completion:]
  -[SPBeaconManager setForceBeaconingOff:]
  -[SPBeaconManager beaconFromNVRAM]
  -[SPBeaconManager connectionTokensForBeaconUUID:completion:]
  -[SPBeaconManager updateObfuscatedIdentifierWithCompletion:]
  -[SPBeaconManager .cxx_destruct]
  -[SPBeaconManager setWildKeyBase:interval:fallback:forBeacon:completion:]
  -[SPBeaconManager dateIntervalForIndex:baseDate:]
  -[SPBeaconManager setCurrentBeaconingState:]
  -[SPBeaconManager selfBeaconingPairDate]
  -[SPBeaconManager userHasAcknowledgeFindMyWithCompletion:]
  -[SPBeaconManager repairDataStore:]
  -[SPBeaconManager bucketWithBaseTime:date:]
  -[SPBeaconManager setSelfBeaconingPublicKey:]
  -[SPBeaconManager setMonitorWrapper:]
  -[SPBeaconManager setBeaconFromNVRAM:]
  -[SPBeaconManager setUserAgentProxy:]
  -[SPBeaconManager updateBeacon:updates:completion:]
  -[SPBeaconManager setAlignmentUncertainty:atIndex:date:forBeacon:completion:]
  -[SPBeaconManager periodicActionDispatchTimer]
  -[SPBeaconManager localActivationLockInfoChanged]
  -[SPBeaconManager connectionTokensForBeaconUUID:criteria:completion:]
  -[SPBeaconManager periodicActionWithCompletion:]
  -[SPBeaconManager setCurrentStatus:]
  -[SPBeaconManager alreadyPoisonedLocalBeacon]
  -[SPBeaconManager serviceDescription]
  -[SPBeaconManager notificationBeaconForSubscriptionId:completion:]
  -[SPBeaconManager beaconsChanged:]
  -[SPBeaconManager beaconingStateChangedNotification:]
  -[SPBeaconManager setPeriodicActionDispatchTimer:]
  -[SPBeaconManager setPeriodicActionDispatchTimerWithInterval:]
  -[SPBeaconManager setSuppressLPEMBeaconing:completion:]
  -[SPBeaconManager beaconingKeyChangedBlockWithCompletion]
  -[SPBeaconManager allBeaconsOfType:completion:]
  -[SPBeaconManager allBeaconsOfTypes:completion:]
  -[SPBeaconManager setProxy:]
  -[SPBeaconManager createKeyReconcilerWithCompletion:]
  -[SPBeaconManager fetchFirmwareVersionForBeacon:completion:]
  -[SPBeaconManager notifyNearbyTokensChangedBlockWithCompletion:]
  -[SPBeaconManager createDuplicateBeaconsForBeacon:skipGroupIdentifier:count:completion:]
  -[SPBeaconManager setQueue:]
  -[SPBeaconManager allBeaconsOfTypes:includeDupes:includeHidden:completion:]
  -[SPBeaconManager rawNVRAMData]
  -[SPBeaconManager timerFired]
  -[SPBeaconManager isLPEMModeSupported:]
  -[SPBeaconManager setInitialStateChangeSent:]
  -[SPBeaconManager setKeyRollInterval:forBeacon:completion:]
  -[SPBeaconManager unacceptedBeaconsWithCompletion:]
  -[SPBeaconManager fetchUserStatsForBeacon:completion:]
  -[SPBeaconManager roleCategoriesWithCompletion:]
  -[SPBeaconManager selfBeaconingUUID]
  -[SPBeaconManager postedLocalNotifyWhenFoundNotificationForUUID:completion:]
  -[SPBeaconManager beaconingKeysForUUID:dateInterval:completion:]
  -[SPBeaconManager invalidate]
  -[SPBeaconManager queue]
  -[SPBeaconManager removeDuplicateBeaconsWithCompletion:]
  -[SPBeaconManager selfBeaconingConfigurations]
  -[SPBeaconManager purgeOwnedDeviceKeyRecordsForUUID:completion:]
  -[SPBeaconManager setRole:forBeacon:completion:]
  -[SPBeaconManager selfBeaconingDerivedSharedSecretKey]
  -[SPBeaconManager setSelfBeaconingDerivedSharedSecretKey:]
  -[SPBeaconManager setSelfBeaconingUUID:]
  -[SPBeaconManager setSelfBeaconingConfigurations:]
  -[SPBeaconManager start]
  -[SPBeaconManager generateOfflineAdvertisingKeysForReason:now:]
  -[SPBeaconManager beaconingStateChanged:]
  -[SPBeaconManager generateBeaconingKeysOfType:now:withCompletion:]
  -[SPBeaconManager setAlreadyPoisonedLocalBeacon:]
  -[SPBeaconManager setSelfBeaconingIndex:]
  -[SPBeaconManager stateDidChange:powerState:]
  -[SPBeaconManager notifyStateChange:]
  -[SPBeaconManager connectedToBeacon:withIndex:completion:]
  -[SPBeaconManager notifyStatusChange:]
  -[SPBeaconManager allBeaconingKeysForUUID:dateInterval:forceGenerate:completion:]
  -[SPBeaconManager connectedToBeacon:withIndex:]
  -[SPBeaconManager initialStateChangeSent]
  -[SPBeaconManager bleMonitor:didChangeState:]
  -[SPBeaconManager monitorWrapper]
  -[SPBeaconManager setBeaconingKeyChangedBlockWithCompletion:]
  -[SPBeaconManager setPeriodicActionXpcActivityInterval:]
  -[SPBeaconManager init]
  -[SPBeaconManager stateChangedBlockWithCompletion]
  -[SPBeaconManager nearbyTokensChangedBlockWithCompletion]
  -[SPBeaconManager forceBeaconingOff]
  -[SPBeaconManager fetchKeyMapFileDescriptorForBeacon:completion:]
  -[SPBeaconManager setStatusChangedBlockWithCompletion:]


SPBeaconRole : NSObject <NSCopying, NSSecureCoding>
 @property  long long roleId
 @property  NSString *role
 @property  NSString *roleEmoji

  // class methods
  +[SPBeaconRole supportsSecureCoding]

  // instance methods
  -[SPBeaconRole role]
  -[SPBeaconRole encodeWithCoder:]
  -[SPBeaconRole .cxx_destruct]
  -[SPBeaconRole setRole:]
  -[SPBeaconRole copyWithZone:]
  -[SPBeaconRole initWithCoder:]
  -[SPBeaconRole roleId]
  -[SPBeaconRole setRoleId:]
  -[SPBeaconRole roleEmoji]
  -[SPBeaconRole setRoleEmoji:]
  -[SPBeaconRole initWithRoleId:role:roleEmoji:]


SPUnauthorizedTrackingAdvertisement : NSObject <NSSecureCoding>
 @property  NSData *_address
 @property  long long rssi
 @property  NSData *advertisementData
 @property  unsigned char status
 @property  NSData *reserved
 @property  NSDate *scanDate
 @property  NSData *address
 @property  NSData *data

  // class methods
  +[SPUnauthorizedTrackingAdvertisement supportsSecureCoding]

  // instance methods
  -[SPUnauthorizedTrackingAdvertisement setRssi:]
  -[SPUnauthorizedTrackingAdvertisement encodeWithCoder:]
  -[SPUnauthorizedTrackingAdvertisement rssi]
  -[SPUnauthorizedTrackingAdvertisement status]
  -[SPUnauthorizedTrackingAdvertisement setStatus:]
  -[SPUnauthorizedTrackingAdvertisement .cxx_destruct]
  -[SPUnauthorizedTrackingAdvertisement address]
  -[SPUnauthorizedTrackingAdvertisement setData:]
  -[SPUnauthorizedTrackingAdvertisement setReserved:]
  -[SPUnauthorizedTrackingAdvertisement advertisementData]
  -[SPUnauthorizedTrackingAdvertisement reserved]
  -[SPUnauthorizedTrackingAdvertisement initWithAddress:advertisementData:status:reserved:rssi:scanDate:]
  -[SPUnauthorizedTrackingAdvertisement scanDate]
  -[SPUnauthorizedTrackingAdvertisement isEqual:]
  -[SPUnauthorizedTrackingAdvertisement data]
  -[SPUnauthorizedTrackingAdvertisement setAdvertisementData:]
  -[SPUnauthorizedTrackingAdvertisement initWithCoder:]
  -[SPUnauthorizedTrackingAdvertisement _address]
  -[SPUnauthorizedTrackingAdvertisement initWithAddress:advertisementData:rssi:scanDate:]
  -[SPUnauthorizedTrackingAdvertisement setScanDate:]
  -[SPUnauthorizedTrackingAdvertisement set_address:]


SPAccessoryPairingConfiguration : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *name
 @property  long long roleId
 @property  NSString *roleEmoji

  // class methods
  +[SPAccessoryPairingConfiguration supportsSecureCoding]

  // instance methods
  -[SPAccessoryPairingConfiguration encodeWithCoder:]
  -[SPAccessoryPairingConfiguration .cxx_destruct]
  -[SPAccessoryPairingConfiguration setName:]
  -[SPAccessoryPairingConfiguration copyWithZone:]
  -[SPAccessoryPairingConfiguration name]
  -[SPAccessoryPairingConfiguration initWithCoder:]
  -[SPAccessoryPairingConfiguration roleId]
  -[SPAccessoryPairingConfiguration setRoleId:]
  -[SPAccessoryPairingConfiguration roleEmoji]
  -[SPAccessoryPairingConfiguration setRoleEmoji:]
  -[SPAccessoryPairingConfiguration initWithName:roleId:roleEmoji:]


SPRawSearchResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *hashedPublicKey
 @property  NSData *publicKey
 @property  long long status
 @property  NSDate *timestamp
 @property  double latitude
 @property  double longitude
 @property  double horizontalAccuracy

  // class methods
  +[SPRawSearchResult supportsSecureCoding]

  // instance methods
  -[SPRawSearchResult horizontalAccuracy]
  -[SPRawSearchResult latitude]
  -[SPRawSearchResult encodeWithCoder:]
  -[SPRawSearchResult publicKey]
  -[SPRawSearchResult status]
  -[SPRawSearchResult longitude]
  -[SPRawSearchResult .cxx_destruct]
  -[SPRawSearchResult copyWithZone:]
  -[SPRawSearchResult timestamp]
  -[SPRawSearchResult initWithCoder:]
  -[SPRawSearchResult initWithHashedPublicKey:publicKey:status:timestamp:latitude:longitude:horizontalAccuracy:]
  -[SPRawSearchResult hashedPublicKey]


SPPairingSession : NSObject <NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSUUID *beaconId
 @property  NSData *nonce
 @property  BOOL pairingUsingTool
 @property  NSString *name
 @property  long long roleId
 @property  NSString *roleEmoji
 @property  NSString *systemVersion
 @property  long long vendorId
 @property  long long productId
 @property  NSData *ecid
 @property  NSData *chipId
 @property  NSString *serialNumber
 @property  NSData *collaborativeKeyC1
 @property  NSData *payloadSignature
 @property  NSData *attestation
 @property  NSData *systemPublicKey
 @property  NSData *refKeyPublicKey
 @property  NSData *collaborativeKeyC2
 @property  NSData *serverSeed
 @property  NSData *serverSignature
 @property  NSData *serverPublicKey
 @property  NSString *maskedAppleID
 @property  NSString *userMessage
 @property  NSData *baaLeaftCert
 @property  NSData *baaIntermediateCert
 @property  NSData *collaborativeKeyC3
 @property  NSData *confirmSignature
 @property  BOOL ackSuccess
 @property  NSData *keyGenerationStatus
 @property  BOOL isZeus
 @property  long long batteryLevel
 @property  CLLocation *pairingLocation

  // class methods
  +[SPPairingSession supportsSecureCoding]

  // instance methods
  -[SPPairingSession serialNumber]
  -[SPPairingSession setSerialNumber:]
  -[SPPairingSession batteryLevel]
  -[SPPairingSession identifier]
  -[SPPairingSession ecid]
  -[SPPairingSession systemVersion]
  -[SPPairingSession chipId]
  -[SPPairingSession encodeWithCoder:]
  -[SPPairingSession .cxx_destruct]
  -[SPPairingSession productId]
  -[SPPairingSession setIdentifier:]
  -[SPPairingSession vendorId]
  -[SPPairingSession setName:]
  -[SPPairingSession name]
  -[SPPairingSession setBatteryLevel:]
  -[SPPairingSession nonce]
  -[SPPairingSession initWithCoder:]
  -[SPPairingSession attestation]
  -[SPPairingSession setAttestation:]
  -[SPPairingSession userMessage]
  -[SPPairingSession setUserMessage:]
  -[SPPairingSession setVendorId:]
  -[SPPairingSession setNonce:]
  -[SPPairingSession updateWithConfiguration:]
  -[SPPairingSession setProductId:]
  -[SPPairingSession serverSignature]
  -[SPPairingSession setServerSignature:]
  -[SPPairingSession setSystemVersion:]
  -[SPPairingSession roleId]
  -[SPPairingSession setRoleId:]
  -[SPPairingSession roleEmoji]
  -[SPPairingSession setRoleEmoji:]
  -[SPPairingSession collaborativeKeyC3]
  -[SPPairingSession setCollaborativeKeyC3:]
  -[SPPairingSession isZeus]
  -[SPPairingSession setIsZeus:]
  -[SPPairingSession initWithIdentifier:nonce:]
  -[SPPairingSession updateWithSeed:collaborativeKeyC2:serverSignature:serverPublicKey:maskedAppleID:userMessage:baaIntermediateCert:baaLeafCert:]
  -[SPPairingSession updateWithPayloadSignature:attestation:collaborativeKey:systemVersion:vendorId:productId:ecid:chipId:serialNumber:]
  -[SPPairingSession updateBeaconId:]
  -[SPPairingSession updateName:roleId:roleEmoji:]
  -[SPPairingSession updatePairingLocation:]
  -[SPPairingSession updateAckSuccess:]
  -[SPPairingSession updateToPairingUsingTool]
  -[SPPairingSession beaconId]
  -[SPPairingSession setBeaconId:]
  -[SPPairingSession setEcid:]
  -[SPPairingSession setChipId:]
  -[SPPairingSession collaborativeKeyC1]
  -[SPPairingSession setCollaborativeKeyC1:]
  -[SPPairingSession payloadSignature]
  -[SPPairingSession setPayloadSignature:]
  -[SPPairingSession systemPublicKey]
  -[SPPairingSession setSystemPublicKey:]
  -[SPPairingSession refKeyPublicKey]
  -[SPPairingSession setRefKeyPublicKey:]
  -[SPPairingSession collaborativeKeyC2]
  -[SPPairingSession setCollaborativeKeyC2:]
  -[SPPairingSession serverSeed]
  -[SPPairingSession setServerSeed:]
  -[SPPairingSession serverPublicKey]
  -[SPPairingSession setServerPublicKey:]
  -[SPPairingSession maskedAppleID]
  -[SPPairingSession setMaskedAppleID:]
  -[SPPairingSession baaLeaftCert]
  -[SPPairingSession setBaaLeaftCert:]
  -[SPPairingSession baaIntermediateCert]
  -[SPPairingSession setBaaIntermediateCert:]
  -[SPPairingSession confirmSignature]
  -[SPPairingSession setConfirmSignature:]
  -[SPPairingSession ackSuccess]
  -[SPPairingSession setAckSuccess:]
  -[SPPairingSession keyGenerationStatus]
  -[SPPairingSession setKeyGenerationStatus:]
  -[SPPairingSession pairingLocation]
  -[SPPairingSession setPairingLocation:]
  -[SPPairingSession pairingUsingTool]
  -[SPPairingSession setPairingUsingTool:]


SPAccessoryDiscoveryAndPairingSession : NSObject <SPAccessoryDiscoveryXPCClientProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPAccessoryDiscoveryXPCProtocol> *proxy
 @property  SPAccessoryDiscoverySessionState *state
 @property  @? sessionInvalidatedCallback
 @property  @? accessoryDiscoveredCallback
 @property  @? accessoryDiscoveryErrorCallback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SPAccessoryDiscoveryAndPairingSession remoteInterface]
  +[SPAccessoryDiscoveryAndPairingSession exportedInterface]

  // instance methods
  -[SPAccessoryDiscoveryAndPairingSession proxy]
  -[SPAccessoryDiscoveryAndPairingSession session]
  -[SPAccessoryDiscoveryAndPairingSession interruptionHandler:]
  -[SPAccessoryDiscoveryAndPairingSession setCallbackQueue:]
  -[SPAccessoryDiscoveryAndPairingSession invalidationHandler:]
  -[SPAccessoryDiscoveryAndPairingSession setSession:]
  -[SPAccessoryDiscoveryAndPairingSession callbackQueue]
  -[SPAccessoryDiscoveryAndPairingSession setServiceDescription:]
  -[SPAccessoryDiscoveryAndPairingSession state]
  -[SPAccessoryDiscoveryAndPairingSession .cxx_destruct]
  -[SPAccessoryDiscoveryAndPairingSession stop]
  -[SPAccessoryDiscoveryAndPairingSession serviceDescription]
  -[SPAccessoryDiscoveryAndPairingSession setProxy:]
  -[SPAccessoryDiscoveryAndPairingSession setQueue:]
  -[SPAccessoryDiscoveryAndPairingSession queue]
  -[SPAccessoryDiscoveryAndPairingSession init]
  -[SPAccessoryDiscoveryAndPairingSession setState:]
  -[SPAccessoryDiscoveryAndPairingSession initWithPreviousState:]
  -[SPAccessoryDiscoveryAndPairingSession sessionInvalidatedCallback]
  -[SPAccessoryDiscoveryAndPairingSession setSessionInvalidatedCallback:]
  -[SPAccessoryDiscoveryAndPairingSession accessoryDiscoveredCallback]
  -[SPAccessoryDiscoveryAndPairingSession setAccessoryDiscoveredCallback:]
  -[SPAccessoryDiscoveryAndPairingSession accessoryDiscoveryErrorCallback]
  -[SPAccessoryDiscoveryAndPairingSession setAccessoryDiscoveryErrorCallback:]
  -[SPAccessoryDiscoveryAndPairingSession discoveredAccessory:]
  -[SPAccessoryDiscoveryAndPairingSession lostAccessory:]
  -[SPAccessoryDiscoveryAndPairingSession accessoryDiscoveryError:]
  -[SPAccessoryDiscoveryAndPairingSession startAccessoryDiscoveryWithCompletion:]
  -[SPAccessoryDiscoveryAndPairingSession stopAccessoryDiscoveryWithCompletion:]
  -[SPAccessoryDiscoveryAndPairingSession initiatePairingWith:completion:]
  -[SPAccessoryDiscoveryAndPairingSession finalizePairingWith:configuration:completion:]
  -[SPAccessoryDiscoveryAndPairingSession invalidatePairingWith:completion:]


SPStandaloneBeacon : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSData *macAddress
 @property  NSData *classicMacAddress
 @property  NSString *serialNumber
 @property  NSDate *pairingDate
 @property  NSData *productData

  // class methods
  +[SPStandaloneBeacon supportsSecureCoding]

  // instance methods
  -[SPStandaloneBeacon serialNumber]
  -[SPStandaloneBeacon macAddress]
  -[SPStandaloneBeacon setSerialNumber:]
  -[SPStandaloneBeacon identifier]
  -[SPStandaloneBeacon encodeWithCoder:]
  -[SPStandaloneBeacon .cxx_destruct]
  -[SPStandaloneBeacon setMacAddress:]
  -[SPStandaloneBeacon setIdentifier:]
  -[SPStandaloneBeacon copyWithZone:]
  -[SPStandaloneBeacon isEqual:]
  -[SPStandaloneBeacon initWithCoder:]
  -[SPStandaloneBeacon pairingDate]
  -[SPStandaloneBeacon setPairingDate:]
  -[SPStandaloneBeacon productData]
  -[SPStandaloneBeacon setProductData:]
  -[SPStandaloneBeacon initWithIdentifier:macAddress:classicMacAddress:serialNumber:pairingDate:productData:]
  -[SPStandaloneBeacon classicMacAddress]
  -[SPStandaloneBeacon setClassicMacAddress:]


SPIndexInformation : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *beaconIdentifier
 @property  unsigned char sequence
 @property  unsigned long index
 @property  NSDateInterval *dateInterval

  // class methods
  +[SPIndexInformation supportsSecureCoding]

  // instance methods
  -[SPIndexInformation dateInterval]
  -[SPIndexInformation setSequence:]
  -[SPIndexInformation setIndex:]
  -[SPIndexInformation beaconIdentifier]
  -[SPIndexInformation index]
  -[SPIndexInformation encodeWithCoder:]
  -[SPIndexInformation .cxx_destruct]
  -[SPIndexInformation copyWithZone:]
  -[SPIndexInformation sequence]
  -[SPIndexInformation initWithCoder:]
  -[SPIndexInformation setBeaconIdentifier:]
  -[SPIndexInformation initWithBeaconIdentifier:sequence:index:]


SPAccessoryInformation : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *productData
 @property  NSString *manufacturerName
 @property  NSString *modelName
 @property  NSString *firmwareVersion
 @property  NSString *protocolVersion
 @property  unsigned long accessoryCategory
 @property  unsigned int accessoryCapabilities
 @property  unsigned char batteryType
 @property  unsigned char batteryState

  // class methods
  +[SPAccessoryInformation supportsSecureCoding]

  // instance methods
  -[SPAccessoryInformation setProtocolVersion:]
  -[SPAccessoryInformation protocolVersion]
  -[SPAccessoryInformation setManufacturerName:]
  -[SPAccessoryInformation setAccessoryCategory:]
  -[SPAccessoryInformation manufacturerName]
  -[SPAccessoryInformation firmwareVersion]
  -[SPAccessoryInformation modelName]
  -[SPAccessoryInformation setModelName:]
  -[SPAccessoryInformation encodeWithCoder:]
  -[SPAccessoryInformation accessoryCategory]
  -[SPAccessoryInformation .cxx_destruct]
  -[SPAccessoryInformation copyWithZone:]
  -[SPAccessoryInformation setFirmwareVersion:]
  -[SPAccessoryInformation initWithCoder:]
  -[SPAccessoryInformation batteryState]
  -[SPAccessoryInformation setBatteryState:]
  -[SPAccessoryInformation batteryType]
  -[SPAccessoryInformation setBatteryType:]
  -[SPAccessoryInformation accessoryCapabilities]
  -[SPAccessoryInformation productData]
  -[SPAccessoryInformation setProductData:]
  -[SPAccessoryInformation setAccessoryCapabilities:]
  -[SPAccessoryInformation initWithProductData:manufacturerName:modelName:firmwareVersion:protocolVersion:accessoryCategory:accessoryCapabilities:batteryType:batteryState:]


SPScannedObject : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *scanDate
 @property  NSData *address
 @property  NSData *advertisement
 @property  unsigned char status
 @property  unsigned char ek
 @property  long long rssi
 @property  NSNumber *hint
 @property  NSData *optional
 @property  SPAccessoryInformation *accessoryInformation
 @property  SPIndexInformation *indexInformation

  // class methods
  +[SPScannedObject supportsSecureCoding]

  // instance methods
  -[SPScannedObject setRssi:]
  -[SPScannedObject encodeWithCoder:]
  -[SPScannedObject rssi]
  -[SPScannedObject setAddress:]
  -[SPScannedObject status]
  -[SPScannedObject setStatus:]
  -[SPScannedObject .cxx_destruct]
  -[SPScannedObject setAdvertisement:]
  -[SPScannedObject address]
  -[SPScannedObject copyWithZone:]
  -[SPScannedObject scanDate]
  -[SPScannedObject initWithCoder:]
  -[SPScannedObject optional]
  -[SPScannedObject advertisement]
  -[SPScannedObject hint]
  -[SPScannedObject setScanDate:]
  -[SPScannedObject initWithScanDate:address:advertisement:status:ek:hint:rssi:indexInformation:acccessoryInformation:]
  -[SPScannedObject ek]
  -[SPScannedObject setEk:]
  -[SPScannedObject accessoryInformation]
  -[SPScannedObject indexInformation]


SPSettingsConfiguration : NSObject <SPFMIPRegisterInfo, SPSettingsConfigurating>
 @property  NSUUID *baUUID
 @property  NSString *serviceState
 @property  NSSet *serviceDisabledReasons
 @property  NSDate *beaconZoneCreationDate
 @property  NSNumber *beaconZoneCreationErrorCode
 @property  NSDate *lastKeyRollDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  FMXPCServiceDescription *serviceDescription
 @property  FMXPCSession *session
 @property  <SPBeaconManagerXPCProtocol> *proxy
 @property  <SPBeaconManagerXPCProtocol> *userAgentProxy
 @property  id serviceSettingsChangedNotificationToken
 @property  NSOperationQueue *notificationQueue
 @property  NSUserDefaults *sharedDefaults
 @property  NSString *serviceState
 @property  NSSet *serviceDisabledReasons
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SPSettingsConfiguration proxy]
  -[SPSettingsConfiguration session]
  -[SPSettingsConfiguration _invalidate]
  -[SPSettingsConfiguration userAgentProxy]
  -[SPSettingsConfiguration beginRefreshingServiceStateWithBlock:]
  -[SPSettingsConfiguration setSession:]
  -[SPSettingsConfiguration setServiceDescription:]
  -[SPSettingsConfiguration dealloc]
  -[SPSettingsConfiguration serviceSettingsConfiguration]
  -[SPSettingsConfiguration .cxx_destruct]
  -[SPSettingsConfiguration setServiceDisabledReasons:]
  -[SPSettingsConfiguration setServiceState:completion:]
  -[SPSettingsConfiguration baUUID]
  -[SPSettingsConfiguration setUserAgentProxy:]
  -[SPSettingsConfiguration serviceDescription]
  -[SPSettingsConfiguration sharedDefaults]
  -[SPSettingsConfiguration setProxy:]
  -[SPSettingsConfiguration setQueue:]
  -[SPSettingsConfiguration lastKeyRollDate]
  -[SPSettingsConfiguration setNotificationQueue:]
  -[SPSettingsConfiguration serviceState]
  -[SPSettingsConfiguration queue]
  -[SPSettingsConfiguration beaconZoneCreationDate]
  -[SPSettingsConfiguration beaconZoneCreationErrorCode]
  -[SPSettingsConfiguration setServiceState:]
  -[SPSettingsConfiguration setSharedDefaults:]
  -[SPSettingsConfiguration serviceDisabledReasons]
  -[SPSettingsConfiguration setServiceSettingsChangedNotificationToken:]
  -[SPSettingsConfiguration notificationQueue]
  -[SPSettingsConfiguration init]
  -[SPSettingsConfiguration serviceSettingsChangedNotificationToken]


SPBeaconDescription : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *name
 @property  NSString *model
 @property  NSString *systemVersion
 @property  long long vendorId
 @property  long long productId
 @property  long long role
 @property  NSString *stableIdentifier

  // class methods
  +[SPBeaconDescription supportsSecureCoding]

  // instance methods
  -[SPBeaconDescription setModel:]
  -[SPBeaconDescription stableIdentifier]
  -[SPBeaconDescription model]
  -[SPBeaconDescription systemVersion]
  -[SPBeaconDescription role]
  -[SPBeaconDescription encodeWithCoder:]
  -[SPBeaconDescription .cxx_destruct]
  -[SPBeaconDescription setRole:]
  -[SPBeaconDescription productId]
  -[SPBeaconDescription vendorId]
  -[SPBeaconDescription setName:]
  -[SPBeaconDescription copyWithZone:]
  -[SPBeaconDescription name]
  -[SPBeaconDescription initWithCoder:]
  -[SPBeaconDescription setVendorId:]
  -[SPBeaconDescription setProductId:]
  -[SPBeaconDescription setSystemVersion:]
  -[SPBeaconDescription initWithStableIdentifier:name:model:systemVersion:vendorId:productId:role:]


01 00 0200 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBCentralManager 
01 00 0200 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBPeripheralManager 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 0b00 /System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice: FMDFMIPManager 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMFuture 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMPreferencesUtil 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMQueueSynchronizer 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMTokenBucket 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMXPCActivity 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMXPCActivityCriteria 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMXPCServiceDescription 
01 00 0500 /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite: FMXPCSession 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateInterval 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0400 /System/Library/Frameworks/Network.framework/Network: NWPathEvaluator 
