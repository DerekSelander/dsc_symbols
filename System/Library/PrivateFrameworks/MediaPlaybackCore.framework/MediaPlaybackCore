|| __DATA.__data _MPCErrorDomain
|| __DATA.__data _MPCPlaybackEngineInternalErrorDomain
|| __DATA.__data _MPCPlaybackSessionManagerErrorDomain
|| __DATA.__data _MPCPlayerEnqueueErrorDomain
|| __DATA.__data _MPCPlayerRequestErrorDomain
|| __DATA.__data _MPCSharedListeningErrorDomain
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantAvailability
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantContext
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantCustomDataPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantDiscovery
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantEncodings
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantEndpointContext
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantGeniusPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantGetVolume
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantMutableRemoteControlDestination
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantPause
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantQueryPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantRadioPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantRemoteControlDestination
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantSendCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantSendCommandResult
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantSetVolume
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAssistantStoreTracklistPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPCAudioAssetTypeSelection
|| __DATA.__objc_data _OBJC_CLASS_$_MPCModelRadioQueueFeeder
|| __DATA.__objc_data _OBJC_CLASS_$_MPCModelStorePlaybackItemsRequestAccumulator
|| __DATA.__objc_data _OBJC_CLASS_$_MPCModelStorePlaybackItemsRequestAccumulatorImportResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPCModelStorePlaybackItemsResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlaybackSharedListeningProperties
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlayerAudioFormatSelection
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlayerCommandDialog
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlayerCommandDialogAction
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlayerResponseParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlayerSessionRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlayerSessionResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPCPlayerSessionResponseItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPCReportingLyricsViewEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCScene
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSceneCollection
|| __DATA.__objc_data _OBJC_CLASS_$_MPCScriptedSceneCollectionParser
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningCustomEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningEventParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningPlaybackEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEventContentAdded
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEventContentPlayedNow
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEventContentRemoved
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEventContentReordered
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEventContentReplaced
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEventContentUpdatedMessage
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningQueueEventPlaybackModeChanged
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningReactionEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCSharedListeningSessionEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantAvailability
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantCustomDataPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantDiscovery
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantEncodings
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantEndpointContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantGeniusPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantGetVolume
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantMutableRemoteControlDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantPause
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantQueryPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantRadioPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantRemoteControlDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantSendCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantSendCommandResult
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantSetVolume
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAssistantStoreTracklistPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCAudioAssetTypeSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCModelRadioQueueFeeder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCModelStorePlaybackItemsRequestAccumulator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCModelStorePlaybackItemsRequestAccumulatorImportResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCModelStorePlaybackItemsResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlaybackSharedListeningProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlayerAudioFormatSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlayerCommandDialog
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlayerCommandDialogAction
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlayerResponseParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlayerSessionRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlayerSessionResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCPlayerSessionResponseItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCReportingLyricsViewEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCScene
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSceneCollection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCScriptedSceneCollectionParser
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningCustomEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningEventParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningPlaybackEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEventContentAdded
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEventContentPlayedNow
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEventContentRemoved
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEventContentReordered
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEventContentReplaced
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEventContentUpdatedMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningQueueEventPlaybackModeChanged
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningReactionEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCSharedListeningSessionEvent
|| __DATA_CONST.__const _MPCAssistantErrorDomain
|| __DATA_CONST.__const _MPCAssistantMediaRemoteSendCommandErrorCodeUserInfoKey
|| __DATA_CONST.__const _MPCAssistantMediaRemoteSendCommandErrorDomain
|| __DATA_CONST.__const _MPCErrorUserInfoKeyLeaseStatus
|| __DATA_CONST.__const _MPCErrorUserInfoKeyMetricsDictionary
|| __DATA_CONST.__const _MPCErrorUserInfoKeyStoreDialogDictionary
|| __DATA_CONST.__const _MPCJinglePlayActivityReportingControllerDidFlushEventsNotification
|| __DATA_CONST.__const _MPCJinglePlayActivityReportingControllerUserInfoDidIncludeRadioStationStartEvent
|| __DATA_CONST.__const _MPCJinglePlayActivityReportingControllerUserInfoKeyDidIncludeContainerChangeEvent
|| __DATA_CONST.__const _MPCModelRadioQueueFeederErrorDomain
|| __DATA_CONST.__const _MPCModelStorePlaybackItemsRequestClientIdentifierMusic
|| __DATA_CONST.__const _MPCPlayActivityUtilitiesPlayEndEventEndTimeKey
|| __DATA_CONST.__const _MPCPlayActivityUtilitiesPlayEndEventStartTimeKey
|| __DATA_CONST.__const _MPCPlayActivityUtilitiesPlayEndNotification
|| __DATA_CONST.__const _MPCPlayActivityUtilitiesPlayStartNotification
|| __DATA_CONST.__const _MPCPlaybackEngineEventAccountMetadataKeyActive
|| __DATA_CONST.__const _MPCPlaybackEngineEventAccountMetadataKeyDelegated
|| __DATA_CONST.__const _MPCPlaybackEngineEventAccountMetadataKeyDeviceHouseholdIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventAccountMetadataKeyMusicSubscriptionStatus
|| __DATA_CONST.__const _MPCPlaybackEngineEventAccountMetadataKeyPrivateListeningEnabled
|| __DATA_CONST.__const _MPCPlaybackEngineEventAccountMetadataKeyStoreAccountIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventAccountMetadataKeyStoreFrontIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventAudioRouteMetadataKeyDescription
|| __DATA_CONST.__const _MPCPlaybackEngineEventAudioRouteMetadataKeyIsAirPlay
|| __DATA_CONST.__const _MPCPlaybackEngineEventContainerMetadataKeyPlaylistVersionHash
|| __DATA_CONST.__const _MPCPlaybackEngineEventContainerMetadataKeyRadioStationSubtype
|| __DATA_CONST.__const _MPCPlaybackEngineEventContainerMetadataKeyRadioStationType
|| __DATA_CONST.__const _MPCPlaybackEngineEventContainerMetadataKeyTitle
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyApplicationBundleIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyApplicationName
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyApplicationVersion
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyDeviceModel
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyDeviceName
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyDeviceSoftwareVariant
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyOperatingSystemBuild
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyOperatingSystemName
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyOperatingSystemVersion
|| __DATA_CONST.__const _MPCPlaybackEngineEventDeviceMetadataKeyPrivateListeningEnabled
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyAssetEndpointType
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyAssetLocation
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyAssetSource
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyAssetType
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyBagWaitTime
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyHasOfflinePlaybackKeys
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyHasOnlinePlaybackKeys
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyIsDelegatedPlayback
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyIsSubscriptionContent
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyLeaseWaitTime
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeyMediaRedownloadWaitTime
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeySubscriptionAssetLoadWaitTime
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetLoadInfoKeySuzeLeaseWaitTime
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetTypeSelectionMetadataKeyExplanation
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetTypeSelectionMetadataKeyJustification
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAssetTypeSelectionMetadataKeyType
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatMetadataKeyActiveFormat
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatMetadataKeyActiveFormatJustification
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatMetadataKeyAlternateFormats
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatMetadataKeyPreferredTiers
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatMetadataKeyRoute
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatMetadataKeyTargetFormat
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatSelectionMetadataKeyExplanation
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatSelectionMetadataKeyFormat
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemAudioFormatSelectionMetadataKeyJustification
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyArtistUploaded
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyDuration
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyEndBoundary
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyHasVideo
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyInitialPosition
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyPlaceholderItem
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyRequiresMusicPlayActivity
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyStartBoundary
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyStartItem
|| __DATA_CONST.__const _MPCPlaybackEngineEventItemMetadataKeyTitle
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAccountIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAccountMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAccountRectificationPreviousAccountIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAccountRectificationQueueSectionIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAccountRectificationReason
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAudioRoute
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAudioRouteMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyAudioRouteShouldPause
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyContainerHasIndeterminateDuration
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyContainerIdentifiers
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyContainerKind
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyContainerMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyContainerQueueSectionIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyErrorForResolution
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyErrorResolutionType
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyEventTimeOffset
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyHLSMetadataWaitTime
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyInterruptProcessName
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyInterruptShouldResume
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemAssetLoadError
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemAssetLoadInfo
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemAssetSecureKeyDescriptor
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemAssetSecureKeyRequestError
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemAudioAssetTypeSelectionMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemAudioFormatMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemAudioFormatSelectionMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemConfiguredEQ
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemConfiguredLoudnessInfo
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemConfiguredSoundCheckVolumeNormalization
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemDidPlayToEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemEndPosition
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemIdentifiers
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemKind
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemPositionJumpIsUserInitiated
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemQueueItemIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemQueueSectionIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRTCHierarchyToken
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRTCServiceIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRadioTrackInformation
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRate
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRateChangeParticipantID
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRateChangePosition
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRateChangeReason
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemRateChangeSource
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemStartPosition
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemStreamEndQueueItemIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemStreamIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemStreamStartQueueItemIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyItemTimedMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyNetworkConstrained
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyNetworkExpensive
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyNetworkHighQuality
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyNetworkServerReachability
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyNetworkSignalInfo
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyNetworkSignalStrength
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyNetworkType
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyPlaybackBehaviorMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueAccountIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueItemIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueLoadError
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueLoadNetworkingWaitTime
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueuePrivateListeningSource
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueRTCHierarchyToken
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueRTCServiceIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueReportingMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyQueueSectionIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyRemoteControlCommandIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyRemoteControlCommandInternalStatus
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyRemoteControlCommandOptions
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyRemoteControlCommandSource
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyRemoteControlCommandStatus
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyRemoteControlCommandType
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySessionActivationError
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySessionDeviceMetadata
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySessionIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySessionMigrationError
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySessionRTCHierarchyToken
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySessionRestorationError
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySharedSessionIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySharedSessionLocalUserIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySharedSessionOriginatingParticipant
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySharedSessionQueueParticipants
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySharedSessionQueueSectionIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeySharedSessionSynchronizationError
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyTimeControlStatus
|| __DATA_CONST.__const _MPCPlaybackEngineEventPayloadKeyTimeControlStatusReason
|| __DATA_CONST.__const _MPCPlaybackEngineEventPlaybackBehaviorMetadataKeyAutoplayMode
|| __DATA_CONST.__const _MPCPlaybackEngineEventPlaybackBehaviorMetadataKeyRepeatType
|| __DATA_CONST.__const _MPCPlaybackEngineEventPlaybackBehaviorMetadataKeyShuffleType
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeyApplicationBundleIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeyApplicationVersion
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeyFeatureName
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeyPlaybackContextClassName
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeyPrivateListeningEnabled
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeyQueueGroupingID
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeyRecommendationData
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeySiriReferenceIdentifier
|| __DATA_CONST.__const _MPCPlaybackEngineEventQueueReportingMetadataKeySiriWHAMetrics
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeAccountBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeAccountRectification
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeAccountUpdate
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeApplicationBackground
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeApplicationForeground
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeApplicationTermination
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeAudioRouteChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeContainerBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeContainerEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeDeviceChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeErrorResolution
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeInterruptBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeInterruptEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAssetLoadBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAssetLoadEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAssetLoadInfo
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAssetSecureKeyRequestBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAssetSecureKeyRequestEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAudioAssetTypeSelection
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAudioFormatChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemAudioFormatSelection
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemBufferFinish
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemBufferReady
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemBufferStall
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemConfigurationBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemConfigurationEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemFailedToPlayToEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemFirstAudioFrameRender
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemFirstVideoFrameRender
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemHLSStreamBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemHLSStreamEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemHLSTimedMetadataBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemHLSTimedMetadataEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemPause
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemPlaceholderBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemPlaceholderEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemPositionJump
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemRateChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemReadyToPlay
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemResume
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemTimedMetadataPing
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeItemUpdate
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeMediaServicesLost
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeMediaServicesReset
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeNetworkReachabilityChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeNetworkTypeChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypePlaybackBehaviorChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypePolicyEnforcementBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypePolicyEnforcementEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeQueueAdd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeQueueItemAdd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeQueueItemRemove
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeQueueItemReorder
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeQueueLoadBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeQueueLoadEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeRemoteControlCommandBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeRemoteControlCommandEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeRemoteControlCommandTimeout
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionActivationBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionActivationEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionMigrateBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionMigrateEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionReset
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionRestoreBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionRestoreEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSessionWillBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSharedSessionBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSharedSessionParticipantsChanged
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSharedSessionSynchronizationBegin
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeSharedSessionSynchronizationEnd
|| __DATA_CONST.__const _MPCPlaybackEngineEventTypeTimeControlStatusChanged
|| __DATA_CONST.__const _MPCPlayerCommandDialogActionTitlePlayOnlyForMe
|| __DATA_CONST.__const _MPCPlayerResponseTracklistDisplaySectionAutoPlayItems
|| __DATA_CONST.__const _MPCPlayerResponseTracklistDisplaySectionNextItems
|| __DATA_CONST.__const _MPCPlayerResponseTracklistDisplaySectionPlayingItem
|| __DATA_CONST.__const _MPCPlayerResponseTracklistDisplaySectionPreviousItems
|| __DATA_CONST.__const _MPCRTCAssetOriginLibrary
|| __DATA_CONST.__const _MPCRTCAssetOriginRadio
|| __DATA_CONST.__const _MPCRTCAssetOriginSubscription
|| __DATA_CONST.__const _MPCRTCAssetOriginUnknown
|| __DATA_CONST.__const _MPCRTCAssetTypeHLS
|| __DATA_CONST.__const _MPCRTCAssetTypeMovie
|| __DATA_CONST.__const _MPCRTCAssetTypeMusicVideo
|| __DATA_CONST.__const _MPCRTCAssetTypePlaylistEntry
|| __DATA_CONST.__const _MPCRTCAssetTypeSong
|| __DATA_CONST.__const _MPCRTCAssetTypeTVEpisode
|| __DATA_CONST.__const _MPCRTCAssetTypeUnknown
|| __DATA_CONST.__const _MPCRTCItemEndReasonEndSession
|| __DATA_CONST.__const _MPCRTCItemEndReasonFail
|| __DATA_CONST.__const _MPCRTCItemEndReasonNatural
|| __DATA_CONST.__const _MPCRTCItemEndReasonPlayItemInQueue
|| __DATA_CONST.__const _MPCRTCItemEndReasonSkip
|| __DATA_CONST.__const _MPCRTCItemEndReasonUnknown
|| __DATA_CONST.__const _MPCRTCMediaIdentifierKeyAdamID
|| __DATA_CONST.__const _MPCRTCMediaIdentifierKeyAssetAdamID
|| __DATA_CONST.__const _MPCRTCMediaIdentifierKeyPurchasedAdamID
|| __DATA_CONST.__const _MPCRTCMediaIdentifierKeySubscriptionAdamID
|| __DATA_CONST.__const _MPCRTCPayloadKeyAccountStorefrontID
|| __DATA_CONST.__const _MPCRTCPayloadKeyAssetLoadDuration
|| __DATA_CONST.__const _MPCRTCPayloadKeyAssetPreloaded
|| __DATA_CONST.__const _MPCRTCPayloadKeyErrorCode
|| __DATA_CONST.__const _MPCRTCPayloadKeyErrorDomain
|| __DATA_CONST.__const _MPCRTCPayloadKeyEventDate
|| __DATA_CONST.__const _MPCRTCPayloadKeyEventTimeFormatted
|| __DATA_CONST.__const _MPCRTCPayloadKeyEventType
|| __DATA_CONST.__const _MPCRTCPayloadKeyFinalNetworkType
|| __DATA_CONST.__const _MPCRTCPayloadKeyInitialItemLoadDuration
|| __DATA_CONST.__const _MPCRTCPayloadKeyInitialItemPreloaded
|| __DATA_CONST.__const _MPCRTCPayloadKeyInitialNetworkType
|| __DATA_CONST.__const _MPCRTCPayloadKeyInitialQueueFeatureName
|| __DATA_CONST.__const _MPCRTCPayloadKeyInitialQueueLoadDuration
|| __DATA_CONST.__const _MPCRTCPayloadKeyInitialQueuePreloaded
|| __DATA_CONST.__const _MPCRTCPayloadKeyInitialQueueType
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadAssetURLScheme
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadAudioType
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadBagWaitTime
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadEndpointType
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadHasOfflinePlaybackKeys
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadHasOnlinePlaybackKeys
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadInfoSource
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadIsDelegatedPlayback
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadIsSubscriptionContent
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadLeaseWaitTime
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadMediaRedownloadWaitTime
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadSubscriptionLoadWaitTime
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetLoadSuzeLeaseWaitTime
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemAssetType
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemEndReason
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemIsHLS
|| __DATA_CONST.__const _MPCRTCPayloadKeyItemKeyStartItem
|| __DATA_CONST.__const _MPCRTCPayloadKeyMediaIdentifier
|| __DATA_CONST.__const _MPCRTCPayloadKeyNetworkChangeCount
|| __DATA_CONST.__const _MPCRTCPayloadKeyNetworkType
|| __DATA_CONST.__const _MPCRTCPayloadKeyPerceivedPlayStartTime
|| __DATA_CONST.__const _MPCRTCPayloadKeyQueueEndpoint
|| __DATA_CONST.__const _MPCRTCPayloadKeyQueueIsInitial
|| __DATA_CONST.__const _MPCRTCPayloadKeyQueueLoadDuration
|| __DATA_CONST.__const _MPCRTCPayloadKeyQueueSize
|| __DATA_CONST.__const _MPCRTCPayloadKeyQueueType
|| __DATA_CONST.__const _MPCRTCPayloadKeySessionItemsFailed
|| __DATA_CONST.__const _MPCRTCPayloadKeySessionItemsPlayed
|| __DATA_CONST.__const _MPCRTCPayloadKeySessionQueuesAdded
|| __DATA_CONST.__const _MPCRTCPayloadKeySessionQueuesFailed
|| __DATA_CONST.__const _MPCRTCPayloadKeyStateRestoration
|| __DATA_CONST.__const _MPCRTCRadioIdentifierKeyStationEventID
|| __DATA_CONST.__const _MPCRTCRadioIdentifierKeyStationStringID
|| __DATA_CONST.__const _MPCRemoteCommandEventOptionPauseFadeoutDurationKey
|| __DATA_CONST.__const _MPCRemoteCommandEventOptionSkipImmediatelyKey
|| __DATA_CONST.__const _MPCScriptedLooperErrorDomain
|| __DATA_CONST.__const __MPCPlaybackEngineEventDeviceMetadataKeyApplicationSourceVersion
|| __DATA_CONST.__const __MPCPlaybackEngineEventDeviceMetadataKeyApplicationUUID
|| __DATA_CONST.__const __MPCPlaybackEngineEventDeviceMetadataKeyDeviceGUID
|| __DATA_CONST.__const __MPCPlaybackEngineEventDeviceMetadataKeyInternalCarry
|| __DATA_CONST.__const __MPCPlaybackEngineEventDeviceMetadataKeyMediaFrameworks
|| __DATA_CONST.__const __MPCPlaybackEngineEventDeviceMetadataKeyUserAgent
|| __DATA_CONST.__const __MPCPlaybackEngineEventPayloadKeyQueueDelegatedAccountIdentifier
|| __DATA_CONST.__const __MPCPlaybackEngineEventPayloadKeyQueueDelegatedAccountMetadata
|| __DATA_CONST.__const __MPCPlaybackEngineEventPayloadKeyQueueDescription
|| __DATA_CONST.__const __MPCPlaybackEngineEventQueueReportingMetadataKeyDelegatedDeviceMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCAudioAssetTypeSelector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCAudioSpectrumAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCAudioSpectrumObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCDebugCommand
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCFuture
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCJinglePlayActivityReportingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCLyricsReportingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCMediaRemoteController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCModelPlaybackContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCModelPlaybackIntentTracklistToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCModelRadioContentReference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCModelRadioPlaybackContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCModelStorePlaybackItemsRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCMutablePlaybackRequestEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlaybackEngine
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlaybackEngineEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlaybackEngineEventStream
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlaybackIntent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlaybackRequestEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerAudioFormat
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerAudioRoute
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerChangeRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerCommandRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerCommandStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerLanguageOptionGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerPath
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerPathCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerResponseItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerResponseSection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCPlayerResponseTracklist
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCQueueController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCQueueControllerDataSourceLoadRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCRadioPlaybackIntentTracklistToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCReportingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCReportingIdentityProperties
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCScriptedLooper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCAudioAssetTypeSelector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCAudioSpectrumAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCAudioSpectrumObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCDebugCommand
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCFuture
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCJinglePlayActivityReportingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCLyricsReportingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCMediaRemoteController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCModelPlaybackContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCModelPlaybackIntentTracklistToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCModelRadioContentReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCModelRadioPlaybackContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCModelStorePlaybackItemsRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCMutablePlaybackRequestEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlaybackEngine
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlaybackEngineEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlaybackEngineEventStream
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlaybackIntent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlaybackRequestEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerAudioFormat
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerAudioRoute
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerChangeRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerCommandRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerCommandStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerLanguageOptionGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerPath
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerPathCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerResponseItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerResponseSection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCPlayerResponseTracklist
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCQueueController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCQueueControllerDataSourceLoadRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCRadioPlaybackIntentTracklistToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCReportingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCReportingIdentityProperties
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCScriptedLooper
|| __TEXT.__const _MPCSceneLastFrame
|| __TEXT.__text _MPCAssistantCreateError
|| __TEXT.__text _MPCAssistantCreateSendCommandError
|| __TEXT.__text _MPCAssistantErrorIsInformational
|| __TEXT.__text _MPCAssistantWatchIsConnectedToCompanion
|| __TEXT.__text _MPCAssistantWrapError
|| __TEXT.__text _MPCJinglePlayActivityReportingControllerHasProperAccountStatusForAggregateTimePlayActivityEventReporting
|| __TEXT.__text _MPCJinglePlayActivityReportingControllerHasSBEnabledAccountStatus
|| __TEXT.__text _MPCPlaybackEngineEventGetMonotonicTime
|| __TEXT.__text _MPCPlaybackEngineEventMonotonicTimeConvertCMTimebase
|| __TEXT.__text _MPCPlaybackEngineEventMonotonicTimeConvertNSDate
|| __TEXT.__text _MPCPlaybackEngineEventMonotonicTimeWithHostTime
|| __TEXT.__text _MPCPlaybackEngineEventPayloadFromPayloadJSON
|| __TEXT.__text _MPCPlaybackEngineEventPayloadJSONFromPayload
|| __TEXT.__text _MPCRadioPlaybackErrorByAddingCategory
|| __TEXT.__text _MPCRadioPlaybackErrorGetCategory
|| __TEXT.__text _MPCRemoteCommandDescriptionCopy
|| __TEXT.__text _MPCStoreModelPlaybackItemsRequestCopyGenericObjectPropertySet
|| __TEXT.__text _NSStringComponentsFromMPCPlayerAudioFormatTierPreference
|| __TEXT.__text _NSStringFromAVFoundationErrorDomainCode
|| __TEXT.__text _NSStringFromMPCErrorCode
|| __TEXT.__text _NSStringFromMPCPlaybackEngineInternalErrorCode
|| __TEXT.__text _NSStringFromMPCPlaybackSessionManagerErrorCode
|| __TEXT.__text _NSStringFromMPCPlayerAudioFormatJustification
|| __TEXT.__text _NSStringFromMPCPlayerAudioFormatTier
|| __TEXT.__text _NSStringFromMPCPlayerAudioRouteType
|| __TEXT.__text _NSStringFromMPCPlayerEnqueueErrorCode
|| __TEXT.__text _NSStringFromMPCPlayerRequestErrorCode
|| __TEXT.__text _NSStringFromMPCSharedListeningErrorCode
|| __TEXT.__text __MPCDescribePS
|| __TEXT.__text __MPCDescribeQC
__ AVFAudio: _AVAudioSessionCategoryPlayback
__ AVFAudio: _AVAudioSessionCategoryPlaybackNoSpeaker
__ AVFAudio: _AVAudioSessionMediaServicesWereLostNotification
__ AVFAudio: _AVAudioSessionMediaServicesWereResetNotification
__ AVFAudio: _AVAudioSessionModeDefault
__ AVFAudio: _AVAudioSessionModeMoviePlayback
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _AVAssetDownloadSessionAllowsCellularAccessKey
__ AVFoundation: _AVAssetDownloadTaskMaximumAudioSampleRateKey
__ AVFoundation: _AVAssetDownloadTaskMediaSelectionPrefersMultichannelKey
__ AVFoundation: _AVAssetDownloadTaskMinimumRequiredMediaBitrateKey
__ AVFoundation: _AVAssetDownloadTaskPrefersLosslessAudioKey
__ AVFoundation: _AVAudioTimePitchAlgorithmSpectral
__ AVFoundation: _AVFileTypeAppleM4A
__ AVFoundation: _AVFileTypeAppleM4V
__ AVFoundation: _AVFileTypeMPEG4
__ AVFoundation: _AVFoundationErrorDomain
__ AVFoundation: _AVMetadataFormatHLSMetadata
__ AVFoundation: _AVMetadataID3MetadataKeyAlbumTitle
__ AVFoundation: _AVMetadataID3MetadataKeyLeadPerformer
__ AVFoundation: _AVMetadataID3MetadataKeyPrivate
__ AVFoundation: _AVMetadataID3MetadataKeyTitleDescription
__ AVFoundation: _AVMetadataID3MetadataKeyUserURL
__ AVFoundation: _AVMetadataIdentifierID3MetadataAlbumTitle
__ AVFoundation: _AVMetadataIdentifierID3MetadataLeadPerformer
__ AVFoundation: _AVMetadataIdentifierID3MetadataPrivate
__ AVFoundation: _AVMetadataIdentifierID3MetadataTitleDescription
__ AVFoundation: _AVMetadataIdentifierID3MetadataUserURL
__ AVFoundation: _AVMetadataKeySpaceID3
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemGaplessInfoDurationInFramesKey
__ AVFoundation: _AVPlayerItemGaplessInfoEncodingDelayInFramesKey
__ AVFoundation: _AVPlayerItemGaplessInfoEncodingDrainInFramesKey
__ AVFoundation: _AVPlayerItemGaplessInfoHeuristicInfoKey
__ AVFoundation: _AVPlayerItemGaplessInfoLastPacketsResyncKey
__ AVFoundation: _AVURLAssetAllowsCellularAccessKey
__ AVFoundation: _AVURLAssetAlternativeConfigurationHierarchyTokenKey
__ AVFoundation: _AVURLAssetAlternativeConfigurationMediaIdentifierKey
__ AVFoundation: _AVURLAssetAlternativeConfigurationOptionsKey
__ AVFoundation: _AVURLAssetAlternativeConfigurationServiceIdentifierKey
__ AVFoundation: _AVURLAssetDownloadCompleteFailedNotification
__ AVFoundation: _AVURLAssetDownloadCompleteNotificationErrorKey
__ AVFoundation: _AVURLAssetDownloadCompleteSuccessNotification
__ AVFoundation: _AVURLAssetDownloadDestinationURLKey
__ AVFoundation: _AVURLAssetEnableMultiPath
__ AVFoundation: _AVURLAssetHTTPHeaderFieldsKey
__ AVFoundation: _AVURLAssetInheritURIQueryComponentFromReferencingURIKey
__ AVFoundation: _AVURLAssetOptimizeAccessForLinearMoviePlaybackKey
__ AVFoundation: _AVURLAssetProtectedContentSupportStorageURLKey
__ AVFoundation: _AVURLAssetPurchaseBundleKey
__ AVFoundation: _AVURLAssetURLRequestAttributionKey
__ AVFoundation: _AVURLAssetiTunesStoreContentDSIDKey
__ AVFoundation: _AVURLAssetiTunesStoreContentDownloadParametersKey
__ AVFoundation: _AVURLAssetiTunesStoreContentHLSAssetURLStringKey
__ AVFoundation: _AVURLAssetiTunesStoreContentIDKey
__ AVFoundation: _AVURLAssetiTunesStoreContentInfoKey
__ AVFoundation: _AVURLAssetiTunesStoreContentPurchasedMediaKindKey
__ AVFoundation: _AVURLAssetiTunesStoreContentTypeKey
__ AVFoundation: _AVURLAssetiTunesStoreContentUserAgentKey
__ AVFoundation: _OBJC_CLASS_$_AVAsset
__ AVFoundation: _OBJC_CLASS_$_AVAssetResourceRenewalRequest
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItemMetadataOutput
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ Accelerate: _vDSP_create_fftsetup
__ Accelerate: _vDSP_ctoz
__ Accelerate: _vDSP_desamp
__ Accelerate: _vDSP_destroy_fftsetup
__ Accelerate: _vDSP_fft_zrip
__ Accelerate: _vDSP_hamm_window
__ Accelerate: _vDSP_meanv
__ Accelerate: _vDSP_vasm
__ Accelerate: _vDSP_vclip
__ Accelerate: _vDSP_vdbcon
__ Accelerate: _vDSP_vfill
__ Accelerate: _vDSP_vmul
__ Accelerate: _vDSP_vsmul
__ Accelerate: _vDSP_zvmags
__ AssistantServices: _AFAnalyticsContextsMerge
__ AssistantServices: _OBJC_CLASS_$_AFAnalytics
__ AudioToolbox: _kLoudnessInfoDictionary_AdjustToAlbumLoudnessKey
__ AudioToolbox: _kLoudnessInfoDictionary_MediaKindKey
__ AudioToolbox: _kLoudnessInfoDictionary_PrecalculatedSCAdjustmentKey
__ AudioToolbox: _kMediaKind_MovieValue
__ AudioToolbox: _kMediaKind_MusicValue
__ AudioToolbox: _kMediaKind_MusicVideoValue
__ AudioToolbox: _kMediaKind_TVShowValue
__ Celestial: _AVFileProcessorAttribute_Sinfs
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFStringCreateWithBytes
__ CoreFoundation: _NSURLContentModificationDateKey
__ CoreFoundation: _NSURLIsDirectoryKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSEnumerator
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: _OBJC_METACLASS_$_NSEnumerator
__ CoreFoundation: __NSIsNSArray
__ CoreFoundation: __NSIsNSDictionary
__ CoreFoundation: __NSIsNSNumber
__ CoreFoundation: __NSIsNSString
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFBundleShortVersionStringKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBundleNameKey
__ CoreFoundation: _kCFBundleVersionKey
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGSizeZero
__ CoreMedia: _CMClockConvertHostTimeToSystemUnits
__ CoreMedia: _CMClockGetHostTimeClock
__ CoreMedia: _CMSyncConvertTime
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeCopyDescription
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimebaseGetTime
__ CoreMedia: _kCMTimeZero
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _NSAllMapTableValues
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSEndMapTableEnumeration
__ Foundation: _NSEnumerateMapTable
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSMapGet
__ Foundation: _NSMapInsert
__ Foundation: _NSMultipleUnderlyingErrorsKey
__ Foundation: _NSNextMapEnumeratorPair
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponents
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLRequest
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ MediaPlayer: _MPAVControllerCurrentTimeParameter
__ MediaPlayer: _MPAVControllerDidReloadWithPlaybackContextNotification
__ MediaPlayer: _MPAVControllerDidSetCurrentTimeNotification
__ MediaPlayer: _MPAVControllerErrorDomain
__ MediaPlayer: _MPAVControllerErrorParameter
__ MediaPlayer: _MPAVControllerErrorUserInfoKeyAlertDefaultButtonActionURLString
__ MediaPlayer: _MPAVControllerErrorUserInfoKeyAlertDefaultButtonTitle
__ MediaPlayer: _MPAVControllerErrorUserInfoKeyAlertMessage
__ MediaPlayer: _MPAVControllerErrorUserInfoKeyAlertTitle
__ MediaPlayer: _MPAVControllerItemChangedNotification
__ MediaPlayer: _MPAVControllerItemDidChangeWhenReloadingPlaybackContextNotification
__ MediaPlayer: _MPAVControllerItemParameter
__ MediaPlayer: _MPAVControllerItemWillChangeNotification
__ MediaPlayer: _MPAVControllerNewStateParameter
__ MediaPlayer: _MPAVControllerNextItemStateParameter
__ MediaPlayer: _MPAVControllerOldStateParameter
__ MediaPlayer: _MPAVControllerPlaybackStateChangedNotification
__ MediaPlayer: _MPAVControllerPlaybackStateParameter
__ MediaPlayer: _MPAVControllerPreviousItemDidTransitionNaturallyParameter
__ MediaPlayer: _MPAVControllerUpdatedPlaybackStateParameter
__ MediaPlayer: _MPAVControllerWillReloadWithPlaybackContextNotification
__ MediaPlayer: _MPAVControllerWillSetCurrentTimeNotification
__ MediaPlayer: _MPAVItemArtworkDidChangeNotification
__ MediaPlayer: _MPAVItemBookmarkTimeDidChangeNotification
__ MediaPlayer: _MPAVItemDurationAvailableNotification
__ MediaPlayer: _MPAVItemIsExplicitDidChangeNotification
__ MediaPlayer: _MPAVItemLikedStateDidChangeNotification
__ MediaPlayer: _MPAVItemModelGenericObjectDidChangeNotification
__ MediaPlayer: _MPAVItemPlaybackProperties_EndTime
__ MediaPlayer: _MPAVItemPlaybackProperties_LookForLyrics
__ MediaPlayer: _MPAVItemPlaybackProperties_NextPlayStartTime
__ MediaPlayer: _MPAVItemPlaybackProperties_StartTime
__ MediaPlayer: _MPAVItemRatingDidChangeNotification
__ MediaPlayer: _MPAVItemSecureKeyDeliveryRequestDidFinishNotification
__ MediaPlayer: _MPAVItemShouldPreventPlaybackDidChangeNotification
__ MediaPlayer: _MPAVItemTitlesDidChangeNotification
__ MediaPlayer: _MPAVItemTypeAvailableNotification
__ MediaPlayer: _MPAVItemUserInfoKeyLoadDuration
__ MediaPlayer: _MPAVItemUserInfoKeyRequestEndDate
__ MediaPlayer: _MPAVItemUserInfoKeyRequestError
__ MediaPlayer: _MPAVItemUserInfoKeyRequestStartDate
__ MediaPlayer: _MPAVItemUserInfoKeyStoreDialogDictionary
__ MediaPlayer: _MPAVQueueCoordinatorNotificationItemKey
__ MediaPlayer: _MPAVQueueCoordinatorWillInsertItemAfterItemNotification
__ MediaPlayer: _MPAVRouteConnectionReasonUserInfoKey
__ MediaPlayer: _MPAVRouteSubtypeDescription
__ MediaPlayer: _MPArtworkImageJPEGRepresentation
__ MediaPlayer: _MPArtworkImagePNGRepresentation
__ MediaPlayer: _MPContentItemIdentifierFromMPSectionedIdentifierListIdentifiers
__ MediaPlayer: _MPContentItemIdentifierFromMPSectionedIdentifierPair
__ MediaPlayer: _MPContentPIDUnknown
__ MediaPlayer: _MPContentTasteControllerDidChangeNotification
__ MediaPlayer: _MPHomeUserMonitorPrivateListeningForCurrentDeviceSettingDidChangeNotification
__ MediaPlayer: _MPHomeUserPreferencePrivateListeningFallbackValue
__ MediaPlayer: _MPMediaContentTasteTasteTypeToMPMediaEntityLikedState
__ MediaPlayer: _MPMediaItemPropertyFilePath
__ MediaPlayer: _MPMediaItemPropertyHLSAssetTraits
__ MediaPlayer: _MPMediaItemPropertyHLSKeyCertificateURL
__ MediaPlayer: _MPMediaItemPropertyHLSKeyServerProtocol
__ MediaPlayer: _MPMediaItemPropertyHLSKeyServerURL
__ MediaPlayer: _MPMediaItemPropertyIsStreamingQuality
__ MediaPlayer: _MPMediaItemPropertyIsTemporaryCloudDownload
__ MediaPlayer: _MPMediaItemPropertyRating
__ MediaPlayer: _MPMediaItemPropertyStoreCloudAlbumID
__ MediaPlayer: _MPMediaPlaylistPropertyCloudUniversalLibraryID
__ MediaPlayer: _MPModelChildAlbumSongs
__ MediaPlayer: _MPModelChildPlaylistEntries
__ MediaPlayer: _MPModelMovieIsRestricted
__ MediaPlayer: _MPModelPropertyAlbumArtwork
__ MediaPlayer: _MPModelPropertyAlbumLibraryAddEligible
__ MediaPlayer: _MPModelPropertyAlbumTitle
__ MediaPlayer: _MPModelPropertyAlbumTraits
__ MediaPlayer: _MPModelPropertyAlbumVersionHash
__ MediaPlayer: _MPModelPropertyAlbumVolumeNormalization
__ MediaPlayer: _MPModelPropertyAlbumYear
__ MediaPlayer: _MPModelPropertyArtistArtwork
__ MediaPlayer: _MPModelPropertyArtistName
__ MediaPlayer: _MPModelPropertyComposerName
__ MediaPlayer: _MPModelPropertyCuratorEditorialArtwork
__ MediaPlayer: _MPModelPropertyCuratorName
__ MediaPlayer: _MPModelPropertyFileAssetFilePath
__ MediaPlayer: _MPModelPropertyFileAssetHLSKeyCertificateURL
__ MediaPlayer: _MPModelPropertyFileAssetHLSKeyServerProtocol
__ MediaPlayer: _MPModelPropertyFileAssetHLSKeyServerURL
__ MediaPlayer: _MPModelPropertyFileAssetNonPurgeable
__ MediaPlayer: _MPModelPropertyFileAssetProtectionType
__ MediaPlayer: _MPModelPropertyFileAssetPurchaseBundleFilePath
__ MediaPlayer: _MPModelPropertyFileAssetQualityType
__ MediaPlayer: _MPModelPropertyFileAssetTraits
__ MediaPlayer: _MPModelPropertyGenreArtwork
__ MediaPlayer: _MPModelPropertyGenreName
__ MediaPlayer: _MPModelPropertyHomeSharingAssetAvailable
__ MediaPlayer: _MPModelPropertyHomeSharingAssetProtectedContentSupportStorageFileURL
__ MediaPlayer: _MPModelPropertyHomeSharingAssetURL
__ MediaPlayer: _MPModelPropertyKeyGroupTitle
__ MediaPlayer: _MPModelPropertyLyricsHasStoreLyrics
__ MediaPlayer: _MPModelPropertyLyricsHasTimeSyncedLyrics
__ MediaPlayer: _MPModelPropertyLyricsText
__ MediaPlayer: _MPModelPropertyMediaClipPreviewArtwork
__ MediaPlayer: _MPModelPropertyMediaClipTitle
__ MediaPlayer: _MPModelPropertyMovieArtwork
__ MediaPlayer: _MPModelPropertyMovieDuration
__ MediaPlayer: _MPModelPropertyMovieExplicitRating
__ MediaPlayer: _MPModelPropertyMovieKeepLocalEnableState
__ MediaPlayer: _MPModelPropertyMovieKeepLocalManagedStatus
__ MediaPlayer: _MPModelPropertyMovieLibraryAddEligible
__ MediaPlayer: _MPModelPropertyMovieLibraryAdded
__ MediaPlayer: _MPModelPropertyMovieTitle
__ MediaPlayer: _MPModelPropertyPlaybackPositionBookmarkTime
__ MediaPlayer: _MPModelPropertyPlaybackPositionHasBeenPlayed
__ MediaPlayer: _MPModelPropertyPlaybackPositionShouldRememberBookmarkTime
__ MediaPlayer: _MPModelPropertyPlaybackPositionStartTime
__ MediaPlayer: _MPModelPropertyPlaybackPositionStopTime
__ MediaPlayer: _MPModelPropertyPlaybackPositionStoreUbiquitousIdentifier
__ MediaPlayer: _MPModelPropertyPlaybackPositionUserPlayCount
__ MediaPlayer: _MPModelPropertyPlaylistArtwork
__ MediaPlayer: _MPModelPropertyPlaylistCloudVersionHash
__ MediaPlayer: _MPModelPropertyPlaylistLibraryAdded
__ MediaPlayer: _MPModelPropertyPlaylistName
__ MediaPlayer: _MPModelPropertyPlaylistTracksTiledArtwork
__ MediaPlayer: _MPModelPropertyPlaylistTraits
__ MediaPlayer: _MPModelPropertyPlaylistType
__ MediaPlayer: _MPModelPropertyPlaylistVersionHash
__ MediaPlayer: _MPModelPropertyPodcastArtwork
__ MediaPlayer: _MPModelPropertyPodcastAuthorName
__ MediaPlayer: _MPModelPropertyPodcastEpisodeArtwork
__ MediaPlayer: _MPModelPropertyPodcastEpisodeTitle
__ MediaPlayer: _MPModelPropertyPodcastTitle
__ MediaPlayer: _MPModelPropertyRadioStationAllowsItemLiking
__ MediaPlayer: _MPModelPropertyRadioStationArtwork
__ MediaPlayer: _MPModelPropertyRadioStationAttributionLabel
__ MediaPlayer: _MPModelPropertyRadioStationBeats1
__ MediaPlayer: _MPModelPropertyRadioStationEditorNotes
__ MediaPlayer: _MPModelPropertyRadioStationEventArtwork
__ MediaPlayer: _MPModelPropertyRadioStationEventTitle
__ MediaPlayer: _MPModelPropertyRadioStationHasExplicitContent
__ MediaPlayer: _MPModelPropertyRadioStationName
__ MediaPlayer: _MPModelPropertyRadioStationProviderBundleIdentifier
__ MediaPlayer: _MPModelPropertyRadioStationProviderUniversalLink
__ MediaPlayer: _MPModelPropertyRadioStationShortEditorNotes
__ MediaPlayer: _MPModelPropertyRadioStationSubscriptionRequired
__ MediaPlayer: _MPModelPropertyRadioStationSubtype
__ MediaPlayer: _MPModelPropertyRadioStationType
__ MediaPlayer: _MPModelPropertyRecordLabelArtwork
__ MediaPlayer: _MPModelPropertyRecordLabelName
__ MediaPlayer: _MPModelPropertySocialPersonArtwork
__ MediaPlayer: _MPModelPropertySocialPersonName
__ MediaPlayer: _MPModelPropertySongArtistUploadedContent
__ MediaPlayer: _MPModelPropertySongArtwork
__ MediaPlayer: _MPModelPropertySongCopyrightText
__ MediaPlayer: _MPModelPropertySongDuration
__ MediaPlayer: _MPModelPropertySongExplicit
__ MediaPlayer: _MPModelPropertySongGaplessInfo
__ MediaPlayer: _MPModelPropertySongHasVideo
__ MediaPlayer: _MPModelPropertySongKeepLocalEnableState
__ MediaPlayer: _MPModelPropertySongKeepLocalManagedStatus
__ MediaPlayer: _MPModelPropertySongLibraryAddEligible
__ MediaPlayer: _MPModelPropertySongLibraryAdded
__ MediaPlayer: _MPModelPropertySongShouldShowComposer
__ MediaPlayer: _MPModelPropertySongTitle
__ MediaPlayer: _MPModelPropertySongTrackNumber
__ MediaPlayer: _MPModelPropertySongTraits
__ MediaPlayer: _MPModelPropertySongUserRating
__ MediaPlayer: _MPModelPropertySongVolumeAdjustment
__ MediaPlayer: _MPModelPropertySongVolumeNormalization
__ MediaPlayer: _MPModelPropertyStaticAssetDuration
__ MediaPlayer: _MPModelPropertyStaticAssetFlavorType
__ MediaPlayer: _MPModelPropertyStaticAssetMediaType
__ MediaPlayer: _MPModelPropertyStaticAssetURL
__ MediaPlayer: _MPModelPropertyStoreAssetAccountIdentifier
__ MediaPlayer: _MPModelPropertyStoreAssetEndpointType
__ MediaPlayer: _MPModelPropertyStoreAssetRedownloadParameters
__ MediaPlayer: _MPModelPropertyStoreAssetRedownloadable
__ MediaPlayer: _MPModelPropertyStoreAssetShouldReportPlayEvents
__ MediaPlayer: _MPModelPropertyStoreAssetSubscriptionRequired
__ MediaPlayer: _MPModelPropertyTVEpisodeArtwork
__ MediaPlayer: _MPModelPropertyTVEpisodeDescriptionText
__ MediaPlayer: _MPModelPropertyTVEpisodeDuration
__ MediaPlayer: _MPModelPropertyTVEpisodeExplicitRating
__ MediaPlayer: _MPModelPropertyTVEpisodeKeepLocalEnableState
__ MediaPlayer: _MPModelPropertyTVEpisodeKeepLocalManagedStatus
__ MediaPlayer: _MPModelPropertyTVEpisodeLibraryAddEligible
__ MediaPlayer: _MPModelPropertyTVEpisodeLibraryAdded
__ MediaPlayer: _MPModelPropertyTVEpisodeMusicShow
__ MediaPlayer: _MPModelPropertyTVEpisodeNumber
__ MediaPlayer: _MPModelPropertyTVEpisodeTitle
__ MediaPlayer: _MPModelPropertyTVSeasonArtwork
__ MediaPlayer: _MPModelPropertyTVSeasonLibraryAddEligible
__ MediaPlayer: _MPModelPropertyTVSeasonNumber
__ MediaPlayer: _MPModelPropertyTVShowArtwork
__ MediaPlayer: _MPModelPropertyTVShowCreatorName
__ MediaPlayer: _MPModelPropertyTVShowTitle
__ MediaPlayer: _MPModelRelationshipAlbumArtist
__ MediaPlayer: _MPModelRelationshipGenericAlbum
__ MediaPlayer: _MPModelRelationshipGenericArtist
__ MediaPlayer: _MPModelRelationshipGenericComposer
__ MediaPlayer: _MPModelRelationshipGenericCurator
__ MediaPlayer: _MPModelRelationshipGenericGenre
__ MediaPlayer: _MPModelRelationshipGenericGroup
__ MediaPlayer: _MPModelRelationshipGenericMediaClip
__ MediaPlayer: _MPModelRelationshipGenericMovie
__ MediaPlayer: _MPModelRelationshipGenericPlaylist
__ MediaPlayer: _MPModelRelationshipGenericPlaylistEntry
__ MediaPlayer: _MPModelRelationshipGenericPodcast
__ MediaPlayer: _MPModelRelationshipGenericPodcastEpisode
__ MediaPlayer: _MPModelRelationshipGenericRadioStation
__ MediaPlayer: _MPModelRelationshipGenericRadioStationEvent
__ MediaPlayer: _MPModelRelationshipGenericRecordLabel
__ MediaPlayer: _MPModelRelationshipGenericSocialPerson
__ MediaPlayer: _MPModelRelationshipGenericSong
__ MediaPlayer: _MPModelRelationshipGenericTVEpisode
__ MediaPlayer: _MPModelRelationshipGenericTVSeason
__ MediaPlayer: _MPModelRelationshipGenericTVShow
__ MediaPlayer: _MPModelRelationshipMediaClipStaticAssets
__ MediaPlayer: _MPModelRelationshipMovieLocalFileAsset
__ MediaPlayer: _MPModelRelationshipMoviePlaybackPosition
__ MediaPlayer: _MPModelRelationshipMovieStoreAsset
__ MediaPlayer: _MPModelRelationshipPlaylistEntryMovie
__ MediaPlayer: _MPModelRelationshipPlaylistEntrySong
__ MediaPlayer: _MPModelRelationshipPlaylistEntryTVEpisode
__ MediaPlayer: _MPModelRelationshipPodcastAuthor
__ MediaPlayer: _MPModelRelationshipPodcastEpisodePodcast
__ MediaPlayer: _MPModelRelationshipSongAlbum
__ MediaPlayer: _MPModelRelationshipSongArtist
__ MediaPlayer: _MPModelRelationshipSongComposer
__ MediaPlayer: _MPModelRelationshipSongGenre
__ MediaPlayer: _MPModelRelationshipSongHomeSharingAsset
__ MediaPlayer: _MPModelRelationshipSongLocalFileAsset
__ MediaPlayer: _MPModelRelationshipSongLyrics
__ MediaPlayer: _MPModelRelationshipSongPlaybackPosition
__ MediaPlayer: _MPModelRelationshipSongStoreAsset
__ MediaPlayer: _MPModelRelationshipTVEpisodeLocalFileAsset
__ MediaPlayer: _MPModelRelationshipTVEpisodePlaybackPosition
__ MediaPlayer: _MPModelRelationshipTVEpisodeSeason
__ MediaPlayer: _MPModelRelationshipTVEpisodeShow
__ MediaPlayer: _MPModelRelationshipTVEpisodeStoreAsset
__ MediaPlayer: _MPModelRelationshipTVSeasonShow
__ MediaPlayer: _MPModelRelationshipTVShowCreator
__ MediaPlayer: _MPModelResponseDidInvalidateNotification
__ MediaPlayer: _MPModelTVEpisodeIsRestricted
__ MediaPlayer: _MPMusicPlayerControllerErrorDomain
__ MediaPlayer: _MPMusicPlayerControllerMachServiceName
__ MediaPlayer: _MPMusicRepeatModeForMPRepeatType
__ MediaPlayer: _MPMusicShuffleModeForMPShuffleType
__ MediaPlayer: _MPNSStringFromRepeatType
__ MediaPlayer: _MPNSStringFromShuffleType
__ MediaPlayer: _MPNowPlayingContentItemDeviceUserInfoKeyPlaylistEntryPersistentID
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyDisableJumpToItem
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyEndTime
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyExplicitBadge
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyExplicitContentState
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyIsAutoPlayItem
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyIsLoading
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyIsPlaceholder
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyLastChangeDirection
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeyStoreFrontIdentifier
__ MediaPlayer: _MPNowPlayingContentItemUserInfoKeySupportsArtworkURL
__ MediaPlayer: _MPPlaybackContextCodingUserInfoKeySupplementalReason
__ MediaPlayer: _MPPlaybackUserDefaultsMusicEQPresetDidChangeNotification
__ MediaPlayer: _MPPlaybackUserDefaultsPreferredResolutionsDidChangeNotification
__ MediaPlayer: _MPPlaybackUserDefaultsPrivateListeningEnabledDidChangeNotification
__ MediaPlayer: _MPPlaybackUserDefaultsSoundCheckEnabledDidChangeNotification
__ MediaPlayer: _MPProcessInfoSystemWallClockUptime
__ MediaPlayer: _MPRemoteCommandCenterCommandHandlersRegisteredNotification
__ MediaPlayer: _MPRemoteCommandEventDidTimeout
__ MediaPlayer: _MPRemoteCommandStatusFromMRSendCommandResultStatus
__ MediaPlayer: _MPRepeatTypeDescription
__ MediaPlayer: _MPRepeatTypeFromMediaRemoteRepeatMode
__ MediaPlayer: _MPRepeatTypeToMediaRemoteRepeatMode
__ MediaPlayer: _MPRestrictionsMonitorAllowsExplicitContentDidChangeNotification
__ MediaPlayer: _MPSectionedIdentifierPairFromIdentifiers
__ MediaPlayer: _MPSectionedIdentifierPairFromMPContentIdentifier
__ MediaPlayer: _MPServerObjectDatabaseUnknownPersonID
__ MediaPlayer: _MPShuffleTypeDescription
__ MediaPlayer: _MPShuffleTypeFromMediaRemoteShuffleMode
__ MediaPlayer: _MPShuffleTypeToMediaRemoteShuffleMode
__ MediaPlayer: _MPStoreHLSAssetInfoKeyProtocolTypeSimplified
__ MediaPlayer: _MPStoreItemMetadataInt64NormalizeStoreIDValue
__ MediaPlayer: _MPStoreItemMetadataItemKindAlbum
__ MediaPlayer: _MPStoreItemMetadataItemKindGetPlayabilityInformation
__ MediaPlayer: _MPStoreItemMetadataItemKindPlaylist
__ MediaPlayer: _MPStoreItemMetadataItemKindRadioStation
__ MediaPlayer: _MPStoreItemMetadataStringNormalizeStoreIDValue
__ MediaPlayer: _MPStoreItemOfferTypeSubscription
__ MediaPlayer: _MPStorePlatformKindMovie
__ MediaPlayer: _MPStorePlatformKindMusicVideo
__ MediaPlayer: _MPStorePlatformKindSong
__ MediaPlayer: _MPStorePlatformKindTVEpisode
__ MediaPlayer: _MPStorePlatformKindUploadedAudio
__ MediaPlayer: _MPStorePlatformKindUploadedVideo
__ MediaPlayer: _MRMediaRemoteCommandHandlerStatusFromMPRemoteCommandHandlerStatus
__ MediaPlayer: _NSStringFromMPModelGenericObjectType
__ MediaPlayer: _NSStringFromMPModelRadioStationSubtype
__ MediaPlayer: _NSStringFromMPModelRadioStationType
__ MediaPlayer: _NSStringFromMPRemoteCommandHandlerDialogActionType
__ MediaPlayer: _OBJC_CLASS_$_MPAVController
__ MediaPlayer: _OBJC_CLASS_$_MPAVEndpointRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVErrorResolverBlockHandler
__ MediaPlayer: _OBJC_CLASS_$_MPAVItem
__ MediaPlayer: _OBJC_CLASS_$_MPAVRouteConnection
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPAbstractNetworkArtworkDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPArtworkCatalog
__ MediaPlayer: _OBJC_CLASS_$_MPArtworkConfiguration
__ MediaPlayer: _OBJC_CLASS_$_MPArtworkRepresentation
__ MediaPlayer: _OBJC_CLASS_$_MPAssistantAnalyticsReportingController
__ MediaPlayer: _OBJC_CLASS_$_MPAsyncBlockOperation
__ MediaPlayer: _OBJC_CLASS_$_MPAsyncOperation
__ MediaPlayer: _OBJC_CLASS_$_MPChangeDetails
__ MediaPlayer: _OBJC_CLASS_$_MPCloudController
__ MediaPlayer: _OBJC_CLASS_$_MPCloudServiceStatusController
__ MediaPlayer: _OBJC_CLASS_$_MPContentItem
__ MediaPlayer: _OBJC_CLASS_$_MPContentTasteController
__ MediaPlayer: _OBJC_CLASS_$_MPCustomDataPlaybackQueue
__ MediaPlayer: _OBJC_CLASS_$_MPEmptyPlaybackQueue
__ MediaPlayer: _OBJC_CLASS_$_MPExportableArtworkProperties
__ MediaPlayer: _OBJC_CLASS_$_MPGenericTracklistPlaybackQueue
__ MediaPlayer: _OBJC_CLASS_$_MPHomeMonitor
__ MediaPlayer: _OBJC_CLASS_$_MPHomeUserMonitor
__ MediaPlayer: _OBJC_CLASS_$_MPIdentifierSet
__ MediaPlayer: _OBJC_CLASS_$_MPInsertIntoPlaybackQueueCommandEvent
__ MediaPlayer: _OBJC_CLASS_$_MPLazySectionedCollection
__ MediaPlayer: _OBJC_CLASS_$_MPLibraryAddStatusObserver
__ MediaPlayer: _OBJC_CLASS_$_MPLocalMediaQueryRemotePlaybackQueue
__ MediaPlayer: _OBJC_CLASS_$_MPMediaAPICollectionItemAuthTokenRenewalRequest
__ MediaPlayer: _OBJC_CLASS_$_MPMediaAPICollectionItemMetadataRequest
__ MediaPlayer: _OBJC_CLASS_$_MPMediaAPICollectionItemMetadataRequestController
__ MediaPlayer: _OBJC_CLASS_$_MPMediaAPICollectionItemMetadataRequestInfo
__ MediaPlayer: _OBJC_CLASS_$_MPMediaAPICollectionMetadataRequest
__ MediaPlayer: _OBJC_CLASS_$_MPMediaItem
__ MediaPlayer: _OBJC_CLASS_$_MPMediaItemCollection
__ MediaPlayer: _OBJC_CLASS_$_MPMediaLibrary
__ MediaPlayer: _OBJC_CLASS_$_MPMediaPropertyPredicate
__ MediaPlayer: _OBJC_CLASS_$_MPMediaQuery
__ MediaPlayer: _OBJC_CLASS_$_MPMediaRemoteEntityTranslator
__ MediaPlayer: _OBJC_CLASS_$_MPMediaRemoteEntityTranslatorContext
__ MediaPlayer: _OBJC_CLASS_$_MPModelAlbum
__ MediaPlayer: _OBJC_CLASS_$_MPModelAlbumKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelArtist
__ MediaPlayer: _OBJC_CLASS_$_MPModelComposer
__ MediaPlayer: _OBJC_CLASS_$_MPModelFileAsset
__ MediaPlayer: _OBJC_CLASS_$_MPModelFileAssetKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelGenericObject
__ MediaPlayer: _OBJC_CLASS_$_MPModelGenre
__ MediaPlayer: _OBJC_CLASS_$_MPModelGroup
__ MediaPlayer: _OBJC_CLASS_$_MPModelGroupKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelHomeSharingAsset
__ MediaPlayer: _OBJC_CLASS_$_MPModelKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelLibraryDeleteEntityChangeRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelLibraryHasBeenPlayedChangeRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelLibraryImportChangeRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelLibraryIncrementPlayCountChangeRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelLibraryIncrementSkipCountChangeRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelLibraryRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelLibraryResponse
__ MediaPlayer: _OBJC_CLASS_$_MPModelMediaClip
__ MediaPlayer: _OBJC_CLASS_$_MPModelMovie
__ MediaPlayer: _OBJC_CLASS_$_MPModelMovieKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelObject
__ MediaPlayer: _OBJC_CLASS_$_MPModelObjectMediaItem
__ MediaPlayer: _OBJC_CLASS_$_MPModelPlayEvent
__ MediaPlayer: _OBJC_CLASS_$_MPModelPlaybackPosition
__ MediaPlayer: _OBJC_CLASS_$_MPModelPlaylist
__ MediaPlayer: _OBJC_CLASS_$_MPModelPlaylistEntry
__ MediaPlayer: _OBJC_CLASS_$_MPModelPlaylistEntryKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelPlaylistKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelPodcast
__ MediaPlayer: _OBJC_CLASS_$_MPModelPodcastEpisode
__ MediaPlayer: _OBJC_CLASS_$_MPModelRadioStation
__ MediaPlayer: _OBJC_CLASS_$_MPModelRadioStationKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelResponse
__ MediaPlayer: _OBJC_CLASS_$_MPModelShimRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelSong
__ MediaPlayer: _OBJC_CLASS_$_MPModelSongKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelStaticRequest
__ MediaPlayer: _OBJC_CLASS_$_MPModelStaticResponse
__ MediaPlayer: _OBJC_CLASS_$_MPModelStoreAsset
__ MediaPlayer: _OBJC_CLASS_$_MPModelStorePlatformMetadataGenericObjectBuilder
__ MediaPlayer: _OBJC_CLASS_$_MPModelTVEpisode
__ MediaPlayer: _OBJC_CLASS_$_MPModelTVEpisodeKind
__ MediaPlayer: _OBJC_CLASS_$_MPModelTVSeason
__ MediaPlayer: _OBJC_CLASS_$_MPModelTVShow
__ MediaPlayer: _OBJC_CLASS_$_MPModelVerifyLocalFileAssetIntegrityRequest
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerControllerNowPlaying
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerControllerNowPlayingTimeSnapshot
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerControllerSystemCache
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerMediaItemQueueDescriptor
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerPlayParametersQueueDescriptor
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerPlaybackArchiveQueueDescriptor
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerQueueDescriptor
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerRadioStationQueueDescriptor
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerServerStateUpdateRecord
__ MediaPlayer: _OBJC_CLASS_$_MPMusicPlayerStoreQueueDescriptor
__ MediaPlayer: _OBJC_CLASS_$_MPMutableSectionedCollection
__ MediaPlayer: _OBJC_CLASS_$_MPMutableStoreAssetPlaybackResponse
__ MediaPlayer: _OBJC_CLASS_$_MPNetworkPlayabilityMonitor
__ MediaPlayer: _OBJC_CLASS_$_MPNotificationObserver
__ MediaPlayer: _OBJC_CLASS_$_MPNowPlayingContentItem
__ MediaPlayer: _OBJC_CLASS_$_MPNowPlayingInfoAudioFormat
__ MediaPlayer: _OBJC_CLASS_$_MPNowPlayingInfoAudioRoute
__ MediaPlayer: _OBJC_CLASS_$_MPNowPlayingInfoCenter
__ MediaPlayer: _OBJC_CLASS_$_MPNowPlayingInfoLyricsItem
__ MediaPlayer: _OBJC_CLASS_$_MPNowPlayingInfoLyricsItemToken
__ MediaPlayer: _OBJC_CLASS_$_MPNowPlayingInfoTransportableSessionResponse
__ MediaPlayer: _OBJC_CLASS_$_MPPlaceholderAVItem
__ MediaPlayer: _OBJC_CLASS_$_MPPlaybackArchive
__ MediaPlayer: _OBJC_CLASS_$_MPPlaybackArchiveDisplayProperties
__ MediaPlayer: _OBJC_CLASS_$_MPPlaybackContext
__ MediaPlayer: _OBJC_CLASS_$_MPPlaybackContextRemotePlaybackQueue
__ MediaPlayer: _OBJC_CLASS_$_MPPlaybackSessionCommandInfo
__ MediaPlayer: _OBJC_CLASS_$_MPPlaybackUserDefaults
__ MediaPlayer: _OBJC_CLASS_$_MPPropertySet
__ MediaPlayer: _OBJC_CLASS_$_MPProtocolProxy
__ MediaPlayer: _OBJC_CLASS_$_MPQueueFeeder
__ MediaPlayer: _OBJC_CLASS_$_MPQueueFeederIdentifierRegistry
__ MediaPlayer: _OBJC_CLASS_$_MPRTCReportingController
__ MediaPlayer: _OBJC_CLASS_$_MPRTCWeakLinkSupport
__ MediaPlayer: _OBJC_CLASS_$_MPRadioStationRemotePlaybackQueue
__ MediaPlayer: _OBJC_CLASS_$_MPRemoteCommand
__ MediaPlayer: _OBJC_CLASS_$_MPRemoteCommandCenter
__ MediaPlayer: _OBJC_CLASS_$_MPRemoteCommandEvent
__ MediaPlayer: _OBJC_CLASS_$_MPRemoteCommandHandlerDialog
__ MediaPlayer: _OBJC_CLASS_$_MPRemoteCommandHandlerDialogAction
__ MediaPlayer: _OBJC_CLASS_$_MPRemoteCommandStatus
__ MediaPlayer: _OBJC_CLASS_$_MPRemotePlaybackQueue
__ MediaPlayer: _OBJC_CLASS_$_MPRequest
__ MediaPlayer: _OBJC_CLASS_$_MPRequestResponseController
__ MediaPlayer: _OBJC_CLASS_$_MPResponse
__ MediaPlayer: _OBJC_CLASS_$_MPRestrictionsMonitor
__ MediaPlayer: _OBJC_CLASS_$_MPSectionedCollection
__ MediaPlayer: _OBJC_CLASS_$_MPSectionedIdentifierList
__ MediaPlayer: _OBJC_CLASS_$_MPSectionedIdentifierListPosition
__ MediaPlayer: _OBJC_CLASS_$_MPServerObjectDatabase
__ MediaPlayer: _OBJC_CLASS_$_MPServerObjectDatabaseMediaKitImportRequest
__ MediaPlayer: _OBJC_CLASS_$_MPServerObjectDatabaseSINFImportRequest
__ MediaPlayer: _OBJC_CLASS_$_MPServerObjectDatabaseStorePlatformImportRequest
__ MediaPlayer: _OBJC_CLASS_$_MPServerObjectDatabaseSubPlaybackDispatchImportRequest
__ MediaPlayer: _OBJC_CLASS_$_MPSetPlaybackQueueCommandEvent
__ MediaPlayer: _OBJC_CLASS_$_MPShuffleableSectionedIdentifierList
__ MediaPlayer: _OBJC_CLASS_$_MPStoreArtworkDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPStoreArtworkRequestToken
__ MediaPlayer: _OBJC_CLASS_$_MPStoreAssetInfoPlaybackCache
__ MediaPlayer: _OBJC_CLASS_$_MPStoreAssetInfoPlaybackCacheRequest
__ MediaPlayer: _OBJC_CLASS_$_MPStoreFileAssetInfo
__ MediaPlayer: _OBJC_CLASS_$_MPStoreHLSAssetInfo
__ MediaPlayer: _OBJC_CLASS_$_MPStoreItemMetadata
__ MediaPlayer: _OBJC_CLASS_$_MPStoreItemMetadataRequest
__ MediaPlayer: _OBJC_CLASS_$_MPStoreItemMetadataRequestController
__ MediaPlayer: _OBJC_CLASS_$_MPStoreLibraryPersonalizationContentDescriptor
__ MediaPlayer: _OBJC_CLASS_$_MPStoreLibraryPersonalizationRequest
__ MediaPlayer: _OBJC_CLASS_$_MPStoreLyricsRequest
__ MediaPlayer: _OBJC_CLASS_$_MPStoreModelGenericObjectBuilder
__ MediaPlayer: _OBJC_CLASS_$_MPStoreRadioStreamAssetInfo
__ MediaPlayer: _OBJC_CLASS_$_MPSubscriptionStatusPlaybackInformation
__ MediaPlayer: _OBJC_CLASS_$_MPUbiquitousPlaybackPositionController
__ MediaPlayer: _OBJC_CLASS_$_MPUbiquitousPlaybackPositionEntity
__ MediaPlayer: _OBJC_CLASS_$_MPUserNotification
__ MediaPlayer: _OBJC_IVAR_$_MPAVItem._advancedDuringPlayback
__ MediaPlayer: _OBJC_IVAR_$_MPAVItem._asset
__ MediaPlayer: _OBJC_IVAR_$_MPAVItem._avPlayerItem
__ MediaPlayer: _OBJC_IVAR_$_MPAVItem._contentItem
__ MediaPlayer: _OBJC_IVAR_$_MPAVItem._handledFinishTime
__ MediaPlayer: _OBJC_METACLASS_$_MPAVController
__ MediaPlayer: _OBJC_METACLASS_$_MPAVItem
__ MediaPlayer: _OBJC_METACLASS_$_MPAbstractNetworkArtworkDataSource
__ MediaPlayer: _OBJC_METACLASS_$_MPAsyncOperation
__ MediaPlayer: _OBJC_METACLASS_$_MPModelRequest
__ MediaPlayer: _OBJC_METACLASS_$_MPModelResponse
__ MediaPlayer: _OBJC_METACLASS_$_MPPlaybackContext
__ MediaPlayer: _OBJC_METACLASS_$_MPQueueFeeder
__ MediaPlayer: _OBJC_METACLASS_$_MPRemoteCommand
__ MediaPlayer: _OBJC_METACLASS_$_MPRequest
__ MediaPlayer: _OBJC_METACLASS_$_MPResponse
__ MediaPlayer: __MPModelPropertySongTrackCount
__ MediaRemote: _MRAVEndpointCopyOutputDevices
__ MediaRemote: _MRAVEndpointCopyUniqueIdentifier
__ MediaRemote: _MRAVEndpointGetDesignatedGroupLeader
__ MediaRemote: _MRAVEndpointGetExternalDevice
__ MediaRemote: _MRAVEndpointGetLocalEndpoint
__ MediaRemote: _MRAVEndpointGetMyGroupLeaderWithTimeout
__ MediaRemote: _MRAVEndpointGetOutputDeviceUIDVolume
__ MediaRemote: _MRAVEndpointGetOutputDeviceVolume
__ MediaRemote: _MRAVEndpointGroupDevicesAndSendCommandWithResult
__ MediaRemote: _MRAVEndpointIsLocalEndpoint
__ MediaRemote: _MRAVEndpointIsProxyGroupPlayer
__ MediaRemote: _MRAVEndpointObserverAddEndpointChangedCallback
__ MediaRemote: _MRAVEndpointObserverBegin
__ MediaRemote: _MRAVEndpointObserverCreateWithOutputDeviceUID
__ MediaRemote: _MRAVEndpointObserverEnd
__ MediaRemote: _MRAVEndpointPredictGroupLeader
__ MediaRemote: _MRAVEndpointSetOutputDeviceUIDVolume
__ MediaRemote: _MRAVOutputContextCopyOutputDevices
__ MediaRemote: _MRAVOutputContextGetSharedAudioPresentationContext
__ MediaRemote: _MRAVOutputContextSetOutputDevices
__ MediaRemote: _MRAVOutputDeviceCanAccessAppleMusic
__ MediaRemote: _MRAVOutputDeviceCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputDeviceIsRemoteControllable
__ MediaRemote: _MRAVOutputDeviceRemoveFromParentGroup
__ MediaRemote: _MRAVReconnaissanceSessionBeginEndpointsSearch
__ MediaRemote: _MRAVReconnaissanceSessionBeginSearch
__ MediaRemote: _MRAVReconnaissanceSessionCreateWithEndpointFeatures
__ MediaRemote: _MRAVReconnaissanceSessionCreateWithMatchingLogicalDeviceIDs
__ MediaRemote: _MRAVReconnaissanceSessionCreateWithMatchingOutputGroupIDFeatures
__ MediaRemote: _MRAVReconnaissanceSessionSetExpectedLogicalDevices
__ MediaRemote: _MRAVReconnaissanceSessionSetReturnPartialResults
__ MediaRemote: _MRAVReconnaissanceSessionSetTargetAudioSessionID
__ MediaRemote: _MRAVReconnaissanceSessionSetWaitForCompleteClusters
__ MediaRemote: _MRAVReconnaissanceSessionSetWaitForUnanimousEndpoints
__ MediaRemote: _MRContentItemGetArtworkData
__ MediaRemote: _MRContentItemGetHasArtworkData
__ MediaRemote: _MRContentItemGetIdentifier
__ MediaRemote: _MRContentItemHasPlaybackRate
__ MediaRemote: _MRContentItemIsEmpty
__ MediaRemote: _MRContentItemMerge
__ MediaRemote: _MREndpointConnectionReasonUserInfoKey
__ MediaRemote: _MRErrorCopyDescription
__ MediaRemote: _MRExternalDeviceCopyCustomOrigin
__ MediaRemote: _MRMediaRemoteAddPlayerPathInvalidationHandler
__ MediaRemote: _MRMediaRemoteApplicationIsSystemApplication
__ MediaRemote: _MRMediaRemoteApplicationIsSystemMediaApplication
__ MediaRemote: _MRMediaRemoteCommandInfoCopyOptions
__ MediaRemote: _MRMediaRemoteCommandInfoCopyValueForKey
__ MediaRemote: _MRMediaRemoteCommandInfoCreate
__ MediaRemote: _MRMediaRemoteCommandInfoGetCommand
__ MediaRemote: _MRMediaRemoteCommandInfoGetEnabled
__ MediaRemote: _MRMediaRemoteCommandInfoGetIntegerValueForKey
__ MediaRemote: _MRMediaRemoteCommandInfoSetCommand
__ MediaRemote: _MRMediaRemoteCommandInfoSetEnabled
__ MediaRemote: _MRMediaRemoteCopyCommandDescription
__ MediaRemote: _MRMediaRemoteCopyCommandHandlerStatusDescription
__ MediaRemote: _MRMediaRemoteCopyLocalDeviceSystemClassicalRoomApplicationDisplayID
__ MediaRemote: _MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID
__ MediaRemote: _MRMediaRemoteCopyPlaybackStateDescription
__ MediaRemote: _MRMediaRemoteCopySendCommandErrorDescription
__ MediaRemote: _MRMediaRemoteCopySystemMediaApplicationDefaultSupportedCommands
__ MediaRemote: _MRMediaRemoteCreateError
__ MediaRemote: _MRMediaRemoteErrorIsInformational
__ MediaRemote: _MRMediaRemoteGetActiveOrigin
__ MediaRemote: _MRMediaRemoteGetDeviceInfo
__ MediaRemote: _MRMediaRemoteGetIsGroupLeader
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteGetLocalReceiverGroupingIdentity
__ MediaRemote: _MRMediaRemoteGetLocalReceiverPairingIdentity
__ MediaRemote: _MRMediaRemoteGetPlaybackStateForPlayer
__ MediaRemote: _MRMediaRemoteGetSupportedCommandsForApp
__ MediaRemote: _MRMediaRemoteGetSupportedCommandsForPlayer
__ MediaRemote: _MRMediaRemoteNowPlayingBless
__ MediaRemote: _MRMediaRemoteNowPlayingResolvePlayerPath
__ MediaRemote: _MRMediaRemoteRemovePlayerPathInvalidationHandler
__ MediaRemote: _MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync
__ MediaRemote: _MRMediaRemoteSendCommandForOriginWithReply
__ MediaRemote: _MRMediaRemoteSendCommandToPlayerWithResult
__ MediaRemote: _MRMediaRemoteSendCommandWithReply
__ MediaRemote: _MRMediaRemoteSetWantsSupportedCommandsChangedNotifications
__ MediaRemote: _MRMediaRemoteUnregisterForNowPlayingNotifications
__ MediaRemote: _MRNowPlayingClientCopyBundleIdentifierHierarchy
__ MediaRemote: _MRNowPlayingClientCreate
__ MediaRemote: _MRNowPlayingClientGetBundleIdentifier
__ MediaRemote: _MRNowPlayingClientGetDisplayName
__ MediaRemote: _MRNowPlayingClientGetParentAppBundleIdentifier
__ MediaRemote: _MRNowPlayingClientGetProcessIdentifier
__ MediaRemote: _MRNowPlayingPlayerCreate
__ MediaRemote: _MRNowPlayingPlayerGetIdentifier
__ MediaRemote: _MRNowPlayingPlayerPathCopy
__ MediaRemote: _MRNowPlayingPlayerPathCreate
__ MediaRemote: _MRNowPlayingPlayerPathEqualToPlayerPath
__ MediaRemote: _MRNowPlayingPlayerPathGetClient
__ MediaRemote: _MRNowPlayingPlayerPathGetIsResolved
__ MediaRemote: _MRNowPlayingPlayerPathGetOrigin
__ MediaRemote: _MRNowPlayingPlayerPathGetPlayer
__ MediaRemote: _MRNowPlayingPlayerPathIsLocal
__ MediaRemote: _MRNowPlayingPlayerSetIdentifier
__ MediaRemote: _MROriginEqualToOrigin
__ MediaRemote: _MROriginGetDisplayName
__ MediaRemote: _MROriginGetUniqueIdentifier
__ MediaRemote: _MROriginIsLocalOrigin
__ MediaRemote: _MRPairedDeviceCopyGroupedDevices
__ MediaRemote: _MRPairedDeviceCopyLocalReceiverPairingIdentity
__ MediaRemote: _MRPairedDeviceGetDeviceClass
__ MediaRemote: _MRPlaybackQueueCopyContentItems
__ MediaRemote: _MRPlaybackQueueGetQueueID
__ MediaRemote: _MRPlaybackQueueGetRange
__ MediaRemote: _MRPlaybackQueueRequestCreate
__ MediaRemote: _MRPlaybackQueueRequestCreateWithIdentifiers
__ MediaRemote: _MRPlaybackQueueRequestGetRange
__ MediaRemote: _MRPlaybackQueueRequestSetIdentifiers
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeArtwork
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeInfo
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeLanguageOptions
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeMetadata
__ MediaRemote: _MRPlaybackQueueRequestSetLabel
__ MediaRemote: _MRPlaybackSessionCreate
__ MediaRemote: _MRPlaybackSessionCreateExternalRepresentation
__ MediaRemote: _MRSystemAppPlaybackQueueCreate
__ MediaRemote: _MRSystemAppPlaybackQueueCreateExternalRepresentation
__ MediaRemote: _MRSystemAppPlaybackQueueDestroy
__ MediaRemote: _MRSystemAppPlaybackQueueSetCustomData
__ MediaRemote: _MRSystemAppPlaybackQueueSetCustomDataIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueSetFeatureName
__ MediaRemote: _MRSystemAppPlaybackQueueSetGeniusSeedTrack
__ MediaRemote: _MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback
__ MediaRemote: _MRSystemAppPlaybackQueueSetLocalQueryData
__ MediaRemote: _MRSystemAppPlaybackQueueSetLocalQueryFirstItemMultiverseIDData
__ MediaRemote: _MRSystemAppPlaybackQueueSetLocalQueryShuffleMode
__ MediaRemote: _MRSystemAppPlaybackQueueSetRadioStationIDType
__ MediaRemote: _MRSystemAppPlaybackQueueSetRadioStationStringIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueSetReplaceIntent
__ MediaRemote: _MRSystemAppPlaybackQueueSetShouldOverrideManuallyCuratedQueue
__ MediaRemote: _MRSystemAppPlaybackQueueSetSiriAssetInfo
__ MediaRemote: _MRSystemAppPlaybackQueueSetSiriRecommendationIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueSetSiriWHAMetricsInfo
__ MediaRemote: _MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData
__ MediaRemote: _MRSystemAppPlaybackQueueSetTracklistRepeatMode
__ MediaRemote: _MRSystemAppPlaybackQueueSetTracklistShuffleMode
__ MediaRemote: _MRSystemAppPlaybackQueueSetTracklistStoreIDs
__ MediaRemote: _OBJC_CLASS_$_MRAVClusterController
__ MediaRemote: _OBJC_CLASS_$_MRAVEndpoint
__ MediaRemote: _OBJC_CLASS_$_MRAVLocalEndpoint
__ MediaRemote: _OBJC_CLASS_$_MRAVOutputDevice
__ MediaRemote: _OBJC_CLASS_$_MROrigin
__ MediaRemote: _OBJC_CLASS_$_MRPlayerPath
__ MediaRemote: _OBJC_CLASS_$_MRSharedSettings
__ MediaRemote: __MRMediaRemoteRegisterForNowPlayingNotificationsEx
__ MediaRemote: _kMRMediaRemoteCommandInfoCurrentQueueEndAction
__ MediaRemote: _kMRMediaRemoteCommandInfoIsActiveKey
__ MediaRemote: _kMRMediaRemoteCommandInfoLocalizedShortTitleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoLocalizedTitleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoMaximumRatingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoMinimumRatingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPlaybackSessionIdentifier
__ MediaRemote: _kMRMediaRemoteCommandInfoPlaybackSessionRevision
__ MediaRemote: _kMRMediaRemoteCommandInfoPreferredIntervalsKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreferredPlaybackRate
__ MediaRemote: _kMRMediaRemoteCommandInfoPresentationStyleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesQueueEndActionKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesRepeatModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesShuffleModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteCommandInfoShuffleMode
__ MediaRemote: _kMRMediaRemoteCommandInfoSpecializedQueues
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedCustomPlaybackQueueIdentifiers
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedInsertionPositions
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackQueueTypes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackRates
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackSessionIdentifiers
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedQueueEndActions
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedRepeatModes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedShuffleModes
__ MediaRemote: _kMRMediaRemoteCommandInfoUpNextItemCount
__ MediaRemote: _kMRMediaRemoteFrameworkErrorDomain
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoQueueIndex
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTotalQueueCount
__ MediaRemote: _kMRMediaRemoteOptionAssistantCommandSendTimestamp
__ MediaRemote: _kMRMediaRemoteOptionCommandID
__ MediaRemote: _kMRMediaRemoteOptionCommandSequenceUUID
__ MediaRemote: _kMRMediaRemoteOptionContentItemID
__ MediaRemote: _kMRMediaRemoteOptionContextID
__ MediaRemote: _kMRMediaRemoteOptionDestinationDeviceUIDs
__ MediaRemote: _kMRMediaRemoteOptionDirectUserInteraction
__ MediaRemote: _kMRMediaRemoteOptionDisableFallbackContent
__ MediaRemote: _kMRMediaRemoteOptionHomeKitUserIdentifier
__ MediaRemote: _kMRMediaRemoteOptionInsertAfterContentItemID
__ MediaRemote: _kMRMediaRemoteOptionInsertBeforeContentItemID
__ MediaRemote: _kMRMediaRemoteOptionIsNegative
__ MediaRemote: _kMRMediaRemoteOptionLanguageOptionData
__ MediaRemote: _kMRMediaRemoteOptionNowPlayingContentItemID
__ MediaRemote: _kMRMediaRemoteOptionOriginatedFromRemoteDevice
__ MediaRemote: _kMRMediaRemoteOptionOriginatingDeviceUID
__ MediaRemote: _kMRMediaRemoteOptionPlaybackPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackQueueInsertionPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackRate
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionData
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionType
__ MediaRemote: _kMRMediaRemoteOptionPrivateListeningEnabled
__ MediaRemote: _kMRMediaRemoteOptionQueueEndAction
__ MediaRemote: _kMRMediaRemoteOptionRating
__ MediaRemote: _kMRMediaRemoteOptionRemoteControlInterfaceIdentifier
__ MediaRemote: _kMRMediaRemoteOptionRepeatMode
__ MediaRemote: _kMRMediaRemoteOptionRequestDefermentToPlaybackQueuePosition
__ MediaRemote: _kMRMediaRemoteOptionSendOptionsNumber
__ MediaRemote: _kMRMediaRemoteOptionShuffleMode
__ MediaRemote: _kMRMediaRemoteOptionSkipInterval
__ MediaRemote: _kMRMediaRemoteOptionSystemAppPlaybackQueueData
__ MediaRemote: _kMRMediaRemoteOptionTrackID
__ MediaRemote: _kMRMediaRemoteOptionUserIdentityData
__ MediaRemote: _kMRMediaRemotePlaybackStateUserInfoKey
__ MediaRemote: _kMRMediaRemotePlayerPlaybackStateDidChangeNotification
__ MediaRemote: _kMRMediaRemotePlayerSupportedCommandsDidChangeNotification
__ MediaRemote: _kMRMediaRemoteSystemMediaApplicationDisplayIdentifier
__ MediaRemote: _kMRMediaRemoteSystemPodcastApplicationDisplayIdentifier
__ MediaRemote: _kMRMediaRemoteUpdatedContentItemsUserInfoKey
__ MediaRemote: _kMRNowPlayingPlayerPathUserInfoKey
__ MediaRemote: _kMRPlayerPlaybackQueueChangedNotification
__ MediaRemote: _kMRPlayerPlaybackQueueContentItemArtworkChangedNotification
__ MediaRemote: _kMRPlayerPlaybackQueueContentItemsChangedNotification
__ MediaServices: _MSVAutoBugCaptureDomainMediaPlayer
__ MediaServices: _MSVBundleIDForAuditToken
__ MediaServices: _MSVDeviceIsAppleTV
__ MediaServices: _MSVDeviceIsAudioAccessory
__ MediaServices: _MSVDeviceIsHomePod
__ MediaServices: _MSVDeviceIsInternalCarry
__ MediaServices: _MSVDeviceIsWatch
__ MediaServices: _MSVDeviceOSIsInternalInstall
__ MediaServices: _MSVDeviceSupportsDelegatedIdentities
__ MediaServices: _MSVDeviceSupportsExtendedColorDisplay
__ MediaServices: _MSVDeviceSupportsLosslessMusic
__ MediaServices: _MSVDeviceSupportsMultiChannelMusic
__ MediaServices: _MSVGetKernelBootTime
__ MediaServices: _MSVGetMaximumScreenSize
__ MediaServices: _MSVGetProcessLaunchTime
__ MediaServices: _MSVGzipCompressData
__ MediaServices: _MSVGzipDecompressData
__ MediaServices: _MSVHasherSeedZero
__ MediaServices: _MSVImageUtilitiesDefaultImageCompressionQuality
__ MediaServices: _MSVLogAddStateHandler
__ MediaServices: _MSVLogDateFormatter
__ MediaServices: _MSVNanoIDCreateTaggedPointer
__ MediaServices: _MSVProcessCopyMediaFrameworksDescriptions
__ MediaServices: _MSVProcessCopyUUID
__ MediaServices: _MSVQRSessionServerError
__ MediaServices: _MSVReplacementRangeForRanges
__ MediaServices: _MSVSignedRangeZero
__ MediaServices: _MSVSignedUnionRange
__ MediaServices: _MSVTimelineChartPrefix
__ MediaServices: _MSVUnarchivedObjectOfClass
__ MediaServices: _NSStringFromMSVSignedRange
__ MediaServices: _OBJC_CLASS_$_MSVABTestGenerator
__ MediaServices: _OBJC_CLASS_$_MSVARC4RandomSource
__ MediaServices: _OBJC_CLASS_$_MSVAutoBugCapture
__ MediaServices: _OBJC_CLASS_$_MSVBlockGuard
__ MediaServices: _OBJC_CLASS_$_MSVFrameworkDescription
__ MediaServices: _OBJC_CLASS_$_MSVLRUDictionary
__ MediaServices: _OBJC_CLASS_$_MSVMutableSectionedCollection
__ MediaServices: _OBJC_CLASS_$_MSVOPACKDecoder
__ MediaServices: _OBJC_CLASS_$_MSVOPACKEncoder
__ MediaServices: _OBJC_CLASS_$_MSVPair
__ MediaServices: _OBJC_CLASS_$_MSVRandomDistribution
__ MediaServices: _OBJC_CLASS_$_MSVSQLDatabase
__ MediaServices: _OBJC_CLASS_$_MSVSegmentedCodingPackage
__ MediaServices: _OBJC_CLASS_$_MSVSegmentedDecoder
__ MediaServices: _OBJC_CLASS_$_MSVSegmentedEncoder
__ MediaServices: _OBJC_CLASS_$_MSVWeakProxy
__ MediaServices: _OBJC_METACLASS_$_MSVSegmentedCodingPackage
__ MediaServices: _msv_dispatch_on_main_queue
__ MediaServices: _msv_dispatch_sync_on_queue
__ MediaToolbox: _MTAudioProcessingTapGetStorage
__ MediaToolbox: _MTMultitrackAudioProcessingTapCreate
__ MusicLibrary: _ML3OfflineHLSFileExtensions
__ MusicLibrary: _OBJC_CLASS_$_ML3MusicLibrary
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ RTCReporting: _OBJC_CLASS_$_RTCReporting
__ RTCReporting: _kRTCReportingSessionInfoBatchEvent
__ RTCReporting: _kRTCReportingSessionInfoClientBundleID
__ RTCReporting: _kRTCReportingSessionInfoClientType
__ RTCReporting: _kRTCReportingSessionInfoClientVersion
__ RTCReporting: _kRTCReportingSessionInfoContainsRealtimeEvents
__ RTCReporting: _kRTCReportingSessionInfoHierarchyToken
__ RTCReporting: _kRTCReportingSessionInfoSessionID
__ RTCReporting: _kRTCReportingUserInfoClientName
__ RTCReporting: _kRTCReportingUserInfoServiceName
__ Radio: _OBJC_CLASS_$_RadioImageCache
__ SoftLinking: __sl_dlopen
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIApplicationDidReceiveMemoryWarningNotification
__ UIKit: _UIApplicationWillEnterForegroundNotification
__ UIKit: _UIApplicationWillTerminateNotification
__ UIKit: _UIBackgroundTaskInvalid
__ UIKit: _UIScreenBrightnessDidChangeNotification
__ iTunesCloud: _ICActiveUserIdentityDidChangeNotification
__ iTunesCloud: _ICAgeVerificationStateDidChangeNotification
__ iTunesCloud: _ICAuthorizeMachineRequestReasonRefetch
__ iTunesCloud: _ICBundleIdentifierForSystemApplicationType
__ iTunesCloud: _ICDeviceSystemReleaseTypeCarrier
__ iTunesCloud: _ICDeviceSystemReleaseTypeDeveloper
__ iTunesCloud: _ICDeviceSystemReleaseTypeInternal
__ iTunesCloud: _ICEnvironmentNetworkTypeIsBluetooth
__ iTunesCloud: _ICEnvironmentNetworkTypeIsCellular
__ iTunesCloud: _ICEnvironmentNetworkTypeIsWiFi
__ iTunesCloud: _ICEnvironmentNetworkTypeIsWired
__ iTunesCloud: _ICEnvironmentSignalStrengthBarsKey
__ iTunesCloud: _ICEnvironmentSignalStrengthMaxBarsKey
__ iTunesCloud: _ICErrorDomain
__ iTunesCloud: _ICFileExtensionMoviePackage
__ iTunesCloud: _ICHTTPHeaderKeyContentType
__ iTunesCloud: _ICHTTPHeaderKeyUserAgent
__ iTunesCloud: _ICLiveLinkServerErrorDomain
__ iTunesCloud: _ICMusicSubscriptionLeaseSessionLeaseStatusDidChangeNotification
__ iTunesCloud: _ICMusicSubscriptionStatusDidChangeNotification
__ iTunesCloud: _ICPlayActivityControllerEndpointIdentifierJingle
__ iTunesCloud: _ICRadioLibraryTrackKindMusicVideo
__ iTunesCloud: _ICRadioLibraryTrackKindSong
__ iTunesCloud: _ICRadioLibraryTrackKindUploadedAudio
__ iTunesCloud: _ICRadioLibraryTrackKindUploadedVideo
__ iTunesCloud: _ICRadioServerErrorDomain
__ iTunesCloud: _ICSAPVersionStore
__ iTunesCloud: _ICSecureKeyDeliveryRequestSupportsAssetResourceLoadingRequest
__ iTunesCloud: _ICStoreArtworkInfoCropStyleBoundedBox
__ iTunesCloud: _ICStoreArtworkInfoImageFormatJPEG
__ iTunesCloud: _ICStoreDialogResponseKeyExplanation
__ iTunesCloud: _ICStoreHLSAssetInfoKeyProtocolTypeSimplified
__ iTunesCloud: _ICStorePlatformOfferTypeSubscription
__ iTunesCloud: _ICStoreServerErrorDomain
__ iTunesCloud: _ICURLBagKeyFetchMiniSinfs
__ iTunesCloud: _ICURLBagKeyPastisCertificateURL
__ iTunesCloud: _ICURLBagKeyPastisKeyServerURL
__ iTunesCloud: _ICURLBagProviderDidUpdateBagNotification
__ iTunesCloud: _ICURLBagProviderDidUpdateBagNotificationURLBagUserInfoKey
__ iTunesCloud: _ICUserIdentityStoreDidChangeNotification
__ iTunesCloud: _ICUserNotificationGetResponseButton
__ iTunesCloud: _NSStringFromICLiveLinkEventType
__ iTunesCloud: _OBJC_CLASS_$_ICAVAssetDownloadURLSession
__ iTunesCloud: _OBJC_CLASS_$_ICAgeVerificationManager
__ iTunesCloud: _OBJC_CLASS_$_ICAuthorizeMachineRequest
__ iTunesCloud: _OBJC_CLASS_$_ICClientInfo
__ iTunesCloud: _OBJC_CLASS_$_ICContentKeySession
__ iTunesCloud: _OBJC_CLASS_$_ICDelegationProviderService
__ iTunesCloud: _OBJC_CLASS_$_ICDelegationProviderServiceAssertion
__ iTunesCloud: _OBJC_CLASS_$_ICDeviceInfo
__ iTunesCloud: _OBJC_CLASS_$_ICEnvironmentMonitor
__ iTunesCloud: _OBJC_CLASS_$_ICFileContentKeyStore
__ iTunesCloud: _OBJC_CLASS_$_ICLiveLink
__ iTunesCloud: _OBJC_CLASS_$_ICLiveLinkIdentity
__ iTunesCloud: _OBJC_CLASS_$_ICMatchRedownloadRequest
__ iTunesCloud: _OBJC_CLASS_$_ICMemoryContentKeyStore
__ iTunesCloud: _OBJC_CLASS_$_ICMusicKitRequestContext
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionAccountlessPlaybackRequest
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionFairPlayController
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionLeaseController
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionLeasePlaybackRequest
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionPlaybackResponseItem
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionStatus
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionStatusController
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionStatusRequest
__ iTunesCloud: _OBJC_CLASS_$_ICMutableClientInfo
__ iTunesCloud: _OBJC_CLASS_$_ICMutablePlayActivityAudioQualityProperties
__ iTunesCloud: _OBJC_CLASS_$_ICMutablePlayActivityEnqueuerProperties
__ iTunesCloud: _OBJC_CLASS_$_ICMutablePlayActivityEvent
__ iTunesCloud: _OBJC_CLASS_$_ICMutablePlayActivityEventContainerIDs
__ iTunesCloud: _OBJC_CLASS_$_ICMutablePlayActivityEventItemIDs
__ iTunesCloud: _OBJC_CLASS_$_ICMutableRadioPlaybackHistory
__ iTunesCloud: _OBJC_CLASS_$_ICPlayActivityController
__ iTunesCloud: _OBJC_CLASS_$_ICPurchaseRedownloadRequest
__ iTunesCloud: _OBJC_CLASS_$_ICRadioContentReference
__ iTunesCloud: _OBJC_CLASS_$_ICRadioFetchMetadataRequest
__ iTunesCloud: _OBJC_CLASS_$_ICRadioGetTracksRequest
__ iTunesCloud: _OBJC_CLASS_$_ICRadioGetTracksResponse
__ iTunesCloud: _OBJC_CLASS_$_ICRadioLibraryAlbumContentReference
__ iTunesCloud: _OBJC_CLASS_$_ICRadioLibraryArtistContentReference
__ iTunesCloud: _OBJC_CLASS_$_ICRadioLibraryTrackContentReference
__ iTunesCloud: _OBJC_CLASS_$_ICRadioPlaybackHistoryItem
__ iTunesCloud: _OBJC_CLASS_$_ICRadioPlaybackHistoryStore
__ iTunesCloud: _OBJC_CLASS_$_ICRadioStationTrack
__ iTunesCloud: _OBJC_CLASS_$_ICRadioStoreContentReference
__ iTunesCloud: _OBJC_CLASS_$_ICRadioTrackInfoContentReference
__ iTunesCloud: _OBJC_CLASS_$_ICRequestContext
__ iTunesCloud: _OBJC_CLASS_$_ICSAPSession
__ iTunesCloud: _OBJC_CLASS_$_ICSecureKeyDeliveryRequest
__ iTunesCloud: _OBJC_CLASS_$_ICSecurityInfo
__ iTunesCloud: _OBJC_CLASS_$_ICSharedListeningContainer
__ iTunesCloud: _OBJC_CLASS_$_ICSharedListeningItem
__ iTunesCloud: _OBJC_CLASS_$_ICSharedTracklistPosition
__ iTunesCloud: _OBJC_CLASS_$_ICStoreArtworkInfo
__ iTunesCloud: _OBJC_CLASS_$_ICStoreDialogResponseHandler
__ iTunesCloud: _OBJC_CLASS_$_ICStoreDialogResponseHandlerConfiguration
__ iTunesCloud: _OBJC_CLASS_$_ICStoreFileAssetInfo
__ iTunesCloud: _OBJC_CLASS_$_ICStoreHLSAssetInfo
__ iTunesCloud: _OBJC_CLASS_$_ICStoreRequestContext
__ iTunesCloud: _OBJC_CLASS_$_ICStoreURLRequest
__ iTunesCloud: _OBJC_CLASS_$_ICStoreURLResponseAuthenticationProvider
__ iTunesCloud: _OBJC_CLASS_$_ICSuzeLeaseSession
__ iTunesCloud: _OBJC_CLASS_$_ICSuzeLeaseSessionConfiguration
__ iTunesCloud: _OBJC_CLASS_$_ICURLBagProvider
__ iTunesCloud: _OBJC_CLASS_$_ICURLPerformanceMetrics
__ iTunesCloud: _OBJC_CLASS_$_ICURLRequest
__ iTunesCloud: _OBJC_CLASS_$_ICURLSessionManager
__ iTunesCloud: _OBJC_CLASS_$_ICUserAuthenticationValidationRequest
__ iTunesCloud: _OBJC_CLASS_$_ICUserIdentity
__ iTunesCloud: _OBJC_CLASS_$_ICUserIdentityStore
__ iTunesCloud: _OBJC_CLASS_$_ICUserNotificationBuilder
__ iTunesCloud: _OBJC_CLASS_$_ICUserVerificationRequest
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _CC_MD5_Final
__ libSystem.B.dylib: _CC_MD5_Update
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Init
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _CC_SHA512_Final
__ libSystem.B.dylib: _CC_SHA512_Update
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___exp10f
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _clock_gettime_nsec_np
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_assert_queue_not$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_block_wait
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _div
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _ldiv
__ libSystem.B.dylib: _lldiv
__ libSystem.B.dylib: _log2
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _os_unfair_lock_assert_owner
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _reallocf
__ libSystem.B.dylib: _sleep
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _protocol_getMethodDescription
MPCSharedListeningPlaybackIntentDataSource : NSObject <ICLiveLinkDelegate, MPCPlaybackIntentDataSource>
 @property  MSVBlockGuard *guard
 @property  long long shuffleMode
 @property  id strongSelf
 @property  @? completion
 @property  {os_unfair_lock_s=I} lock
 @property  long long buildState
 @property  long long sourceState
 @property  MPCPlaybackIntent *initialIntent
 @property  NSIndexPath *startIndexPath
 @property  MSVSectionedCollection *initialTracklist
 @property  long long linkState
 @property  ICLiveLink *liveLink
 @property  ICLiveLinkIdentity *identity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCSharedListeningPlaybackIntentDataSource guard]
  -[MPCSharedListeningPlaybackIntentDataSource completion]
  -[MPCSharedListeningPlaybackIntentDataSource setCompletion:]
  -[MPCSharedListeningPlaybackIntentDataSource setShuffleMode:]
  -[MPCSharedListeningPlaybackIntentDataSource shuffleMode]
  -[MPCSharedListeningPlaybackIntentDataSource .cxx_destruct]
  -[MPCSharedListeningPlaybackIntentDataSource strongSelf]
  -[MPCSharedListeningPlaybackIntentDataSource setIdentity:]
  -[MPCSharedListeningPlaybackIntentDataSource identity]
  -[MPCSharedListeningPlaybackIntentDataSource liveLink]
  -[MPCSharedListeningPlaybackIntentDataSource setLock:]
  -[MPCSharedListeningPlaybackIntentDataSource lock]
  -[MPCSharedListeningPlaybackIntentDataSource setStartIndexPath:]
  -[MPCSharedListeningPlaybackIntentDataSource startIndexPath]
  -[MPCSharedListeningPlaybackIntentDataSource setGuard:]
  -[MPCSharedListeningPlaybackIntentDataSource liveLink:didUpdateQueue:]
  -[MPCSharedListeningPlaybackIntentDataSource liveLink:didEncounterError:willRetry:]
  -[MPCSharedListeningPlaybackIntentDataSource didStartLiveLink:]
  -[MPCSharedListeningPlaybackIntentDataSource setLiveLink:]
  -[MPCSharedListeningPlaybackIntentDataSource setStrongSelf:]
  -[MPCSharedListeningPlaybackIntentDataSource setInitialIntent:]
  -[MPCSharedListeningPlaybackIntentDataSource _transitionToBuildState:intent:error:]
  -[MPCSharedListeningPlaybackIntentDataSource _transitionToBuildState:]
  -[MPCSharedListeningPlaybackIntentDataSource _transitionToLiveLinkState:]
  -[MPCSharedListeningPlaybackIntentDataSource _transitionToLiveLinkState:error:]
  -[MPCSharedListeningPlaybackIntentDataSource linkState]
  -[MPCSharedListeningPlaybackIntentDataSource _transitionToSourceState:]
  -[MPCSharedListeningPlaybackIntentDataSource initialTracklist]
  -[MPCSharedListeningPlaybackIntentDataSource _transitionToSourceState:error:]
  -[MPCSharedListeningPlaybackIntentDataSource setInitialTracklist:]
  -[MPCSharedListeningPlaybackIntentDataSource buildState]
  -[MPCSharedListeningPlaybackIntentDataSource sourceState]
  -[MPCSharedListeningPlaybackIntentDataSource getPlaybackContextForIntent:withCompletion:]
  -[MPCSharedListeningPlaybackIntentDataSource buildSharedSessionIntentWithIntent:identity:completion:]
  -[MPCSharedListeningPlaybackIntentDataSource setBuildState:]
  -[MPCSharedListeningPlaybackIntentDataSource setSourceState:]
  -[MPCSharedListeningPlaybackIntentDataSource initialIntent]
  -[MPCSharedListeningPlaybackIntentDataSource setLinkState:]


_MPCSharedListeningTracklistPlaybackContext : MPPlaybackContext
 @property  MSVSectionedCollection *tracklist
 @property  NSIndexPath *startItemIndexPath

  // instance methods
  -[_MPCSharedListeningTracklistPlaybackContext tracklist]
  -[_MPCSharedListeningTracklistPlaybackContext .cxx_destruct]
  -[_MPCSharedListeningTracklistPlaybackContext getSharedListeningTracklistWithCompletion:]
  -[_MPCSharedListeningTracklistPlaybackContext setTracklist:]
  -[_MPCSharedListeningTracklistPlaybackContext startItemIndexPath]
  -[_MPCSharedListeningTracklistPlaybackContext setStartItemIndexPath:]


_MPCProtoItem : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoItem .cxx_destruct]
  -[_MPCProtoItem dictionaryRepresentation]
  -[_MPCProtoItem writeTo:]
  -[_MPCProtoItem isEqual:]
  -[_MPCProtoItem readFrom:]
  -[_MPCProtoItem copyWithZone:]


MPCStoreLibraryPersonalizationMiddleware : NSObject <MPCPlayerResponseBuilder, MPMiddleware>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPSectionedCollection *personalizedModelObjects
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCStoreLibraryPersonalizationMiddleware invalidationObservers]
  -[MPCStoreLibraryPersonalizationMiddleware .cxx_destruct]
  -[MPCStoreLibraryPersonalizationMiddleware personalizedModelObjects]
  -[MPCStoreLibraryPersonalizationMiddleware setPersonalizedModelObjects:]
  -[MPCStoreLibraryPersonalizationMiddleware operationsForPlayerRequest:]
  -[MPCStoreLibraryPersonalizationMiddleware playerModelObject:propertySet:atIndexPath:chain:]
  -[MPCStoreLibraryPersonalizationMiddleware operationsForRequest:]
  -[MPCStoreLibraryPersonalizationMiddleware setInvalidationObservers:]


_MPCAudioSessionController : NSObject
 @property  AVAudioSession *audioSession
 @property  id lostObserver
 @property  id resetObserver
 @property  NSString *category
 @property  unsigned long categoryOptions
 @property  unsigned long routeSharingPolicy

  // instance methods
  -[_MPCAudioSessionController .cxx_destruct]
  -[_MPCAudioSessionController init]
  -[_MPCAudioSessionController setAudioSession:]
  -[_MPCAudioSessionController categoryOptions]
  -[_MPCAudioSessionController setRouteSharingPolicy:]
  -[_MPCAudioSessionController routeSharingPolicy]
  -[_MPCAudioSessionController dealloc]
  -[_MPCAudioSessionController category]
  -[_MPCAudioSessionController setCategory:]
  -[_MPCAudioSessionController audioSession]
  -[_MPCAudioSessionController setupObservations]
  -[_MPCAudioSessionController tearDownObservations]
  -[_MPCAudioSessionController setCategoryOptions:]
  -[_MPCAudioSessionController updateAudioSession:options:routeSharingPolicy:]
  -[_MPCAudioSessionController snapshotSessionSettings]
  -[_MPCAudioSessionController setLostObserver:]
  -[_MPCAudioSessionController restoreSessionSettingsFromSnapshot]
  -[_MPCAudioSessionController setResetObserver:]
  -[_MPCAudioSessionController lostObserver]
  -[_MPCAudioSessionController resetObserver]


_MPCPlaybackEngineMediaFoundationImplementation : NSObject <MFPlaybackStackControllerDelegate, MPAVQueueControllerDelegate, MPCAssetLoaderDelegate, MPCPlaybackEngineImplementation>
 @property  <MFPlaybackStackController><MFQueueManagement> *playbackStackController
 @property  MPCItemBookmarker *bookmarker
 @property  MPCMediaFoundationTranslator *translator
 @property  MPCErrorControllerImplementation *errorController
 @property  MPCExternalPlaybackControllerImplementation *externalPlaybackController
 @property  <MFAssetLoading> *assetLoader
 @property  MPCLeaseController *leaseController
 @property  MPCPlayerItemConfigurator *configurator
 @property  unsigned long stateHandle
 @property  MPCAVItemTrace *playbackStartTrace
 @property  MPCPlayPerfAnalytics *playPerfAnalytics
 @property  _MPCAudioSessionController *transientAudioSessionController
 @property  AVPlayerViewController *playerViewController
 @property  NSDictionary *_stateDictionary
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPCPlaybackEngine *playbackEngine
 @property  <MPAVQueueController> *queueController
 @property  MPAVItem *currentItem
 @property  double currentTime
 @property  float currentRate
 @property  long long state
 @property  long long stateBeforeInterruption
 @property  BOOL hasPlayedSuccessfully
 @property  BOOL autoPlayWhenLikelyToKeepUp
 @property  long long actionAtQueueEnd
 @property  BOOL reloadingPlaybackContext

  // class methods
  +[_MPCPlaybackEngineMediaFoundationImplementation describePlayer:]

  // instance methods
  -[_MPCPlaybackEngineMediaFoundationImplementation queueController:didChangeActionAtQueueEnd:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _updateActiveFormatForQueueItem:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackEngine]
  -[_MPCPlaybackEngineMediaFoundationImplementation errorResolutionDidStartForItem:error:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setQueueWithPlaybackContext:identifier:completionHandler:]
  -[_MPCPlaybackEngineMediaFoundationImplementation errorResolutionDidEndForItem:error:resolution:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackDidStartForItem:rate:fromStalling:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackDidStopForItem:source:reason:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation pauseForLeasePreventionWithIdentifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation pauseWithIdentifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation errorController]
  -[_MPCPlaybackEngineMediaFoundationImplementation userSeekCompletedForItem:fromTime:toTime:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation endPlaybackWithIdentifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setStateHandle:]
  -[_MPCPlaybackEngineMediaFoundationImplementation stateHandle]
  -[_MPCPlaybackEngineMediaFoundationImplementation setPlayPerfAnalytics:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setBookmarker:]
  -[_MPCPlaybackEngineMediaFoundationImplementation loadSessionWithQueueController:completionHandler:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackIsBlockedOnNonPlayableItem:]
  -[_MPCPlaybackEngineMediaFoundationImplementation itemDidPlayToEnd:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation queueController:failedToLoadItem:]
  -[_MPCPlaybackEngineMediaFoundationImplementation .cxx_destruct]
  -[_MPCPlaybackEngineMediaFoundationImplementation mediaServicesInterruptionDidBeginWithItemAtDeath:timeAtDeath:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _performSkipForUserAction:]
  -[_MPCPlaybackEngineMediaFoundationImplementation screenRecordingDidChange:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _resetPlaybackStack]
  -[_MPCPlaybackEngineMediaFoundationImplementation skipWithDirection:identifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setExternalPlaybackController:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackWaitingToPlayForItem:reason:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation assetLoader]
  -[_MPCPlaybackEngineMediaFoundationImplementation skipWithDirectionShouldJumpToItemStart:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _playbackDidStopForItem:source:reason:time:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackStartTrace]
  -[_MPCPlaybackEngineMediaFoundationImplementation currentItem]
  -[_MPCPlaybackEngineMediaFoundationImplementation queueControllerDidChangeContents:]
  -[_MPCPlaybackEngineMediaFoundationImplementation autoPlayWhenLikelyToKeepUp]
  -[_MPCPlaybackEngineMediaFoundationImplementation setPlaybackStackController:]
  -[_MPCPlaybackEngineMediaFoundationImplementation assetLoadingDidStartForItem:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackStackController]
  -[_MPCPlaybackEngineMediaFoundationImplementation routeDidChange:metadata:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setAssetLoader:]
  -[_MPCPlaybackEngineMediaFoundationImplementation endUsingVideoLayer]
  -[_MPCPlaybackEngineMediaFoundationImplementation interruptionDidBeginWithInterruptor:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation pauseWithFadeout:identifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation changePlaybackIndexBy:deltaType:ignoreElapsedTime:force:error:]
  -[_MPCPlaybackEngineMediaFoundationImplementation isReloadingPlaybackContext]
  -[_MPCPlaybackEngineMediaFoundationImplementation endPlayback]
  -[_MPCPlaybackEngineMediaFoundationImplementation queueController:didChangeRepeatType:]
  -[_MPCPlaybackEngineMediaFoundationImplementation pauseWithFadeout:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _stateDictionary]
  -[_MPCPlaybackEngineMediaFoundationImplementation _logTimeJumpForItem:fromTime:toTime:userInitiated:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackTimeDidChangeTo:forItem:reason:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setTranslator:]
  -[_MPCPlaybackEngineMediaFoundationImplementation queueController]
  -[_MPCPlaybackEngineMediaFoundationImplementation becomeActiveWithCompletion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation externalPlaybackController]
  -[_MPCPlaybackEngineMediaFoundationImplementation hasPlayedSuccessfully]
  -[_MPCPlaybackEngineMediaFoundationImplementation didReachEndOfQueueWithReason:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackBufferStateDidChangeToState:forItem:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation translator]
  -[_MPCPlaybackEngineMediaFoundationImplementation pause]
  -[_MPCPlaybackEngineMediaFoundationImplementation stateDidChangeFromState:toState:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation currentTime]
  -[_MPCPlaybackEngineMediaFoundationImplementation _isAVKitSkipAction:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playPerfAnalytics]
  -[_MPCPlaybackEngineMediaFoundationImplementation setTransientAudioSessionController:]
  -[_MPCPlaybackEngineMediaFoundationImplementation queueController:didChangeContentsWithReplacementPlaybackContext:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setErrorController:]
  -[_MPCPlaybackEngineMediaFoundationImplementation state]
  -[_MPCPlaybackEngineMediaFoundationImplementation tracksDidChangeForItem:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation itemDidBecomeCurrent:source:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation beginScanningWithDirection:identifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setLeaseController:]
  -[_MPCPlaybackEngineMediaFoundationImplementation jumpToTime:identifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _logPlayerEventsForQueueItem:]
  -[_MPCPlaybackEngineMediaFoundationImplementation actionAtQueueEnd]
  -[_MPCPlaybackEngineMediaFoundationImplementation queueController:didChangeShuffleType:]
  -[_MPCPlaybackEngineMediaFoundationImplementation bookmarker]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackIsLikelyToKeepUp:forItem:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playerViewController]
  -[_MPCPlaybackEngineMediaFoundationImplementation reloadWithPlaybackContext:identifier:completionHandler:]
  -[_MPCPlaybackEngineMediaFoundationImplementation timeControlStatusDidChange:waitingReason:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation itemDidResignCurrent:source:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation userActionDidBegin:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playWithOptions:]
  -[_MPCPlaybackEngineMediaFoundationImplementation firstVideoFrameWasRenderedForItem:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation initWithPlaybackEngine:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackRateDidChangeToRate:forItem:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setRate:identifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setRelativeVolume:]
  -[_MPCPlaybackEngineMediaFoundationImplementation leaseController]
  -[_MPCPlaybackEngineMediaFoundationImplementation currentItemWillChangeFromItem:toItem:source:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation beginUsingVideoLayer]
  -[_MPCPlaybackEngineMediaFoundationImplementation configurator]
  -[_MPCPlaybackEngineMediaFoundationImplementation setQueueController:]
  -[_MPCPlaybackEngineMediaFoundationImplementation replaceCurrentItemWithPlaybackContext:identifier:completionHandler:]
  -[_MPCPlaybackEngineMediaFoundationImplementation dealloc]
  -[_MPCPlaybackEngineMediaFoundationImplementation setPlaybackStartTrace:]
  -[_MPCPlaybackEngineMediaFoundationImplementation didReportSignpostWithType:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setActionAtQueueEnd:]
  -[_MPCPlaybackEngineMediaFoundationImplementation firstFrameWillRenderForItem:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation transientAudioSessionController]
  -[_MPCPlaybackEngineMediaFoundationImplementation itemDidFailToPlayToEnd:error:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation togglePlaybackWithIdentifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _MPAVItemForMFQueuePlayerItem:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setAutoPlayWhenLikelyToKeepUp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation setConfigurator:]
  -[_MPCPlaybackEngineMediaFoundationImplementation relativeVolumeDidChangeTo:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation _setupPlaybackStackWithPlaybackEngine:queueController:]
  -[_MPCPlaybackEngineMediaFoundationImplementation mediaServicesInterruptionDidEndWithTimeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation assetLoadingDidCompleteForItem:error:]
  -[_MPCPlaybackEngineMediaFoundationImplementation currentRate]
  -[_MPCPlaybackEngineMediaFoundationImplementation endScanningWithIdentifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation queueController:didIncrementVersionForSegment:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playWithRate:identifier:completion:]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackRateDidChangeNotifiedForItem:newRate:reason:participantIdentifier:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation userActionDidEnd:error:]
  -[_MPCPlaybackEngineMediaFoundationImplementation updateAudioSession]
  -[_MPCPlaybackEngineMediaFoundationImplementation playbackDidReachQueueEndWithTimeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation itemIsReadyToPlay:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation itemDidFailToLoad:error:timeStamp:]
  -[_MPCPlaybackEngineMediaFoundationImplementation stateBeforeInterruption]
  -[_MPCPlaybackEngineMediaFoundationImplementation interruptionDidFinishForInterruptor:shouldResume:timeStamp:]


MPCMediaRemoteMiddlewareMetadataOperation : MPAsyncOperation <MPCMediaRemoteMiddlewareModelObjectsProviding, MPMiddlewareAutomaticDependencyOperation>
 @property  MPSectionedCollection *sourceContentItems
 @property  MPSectionedCollection *modelObjects
 @property  NSIndexPath *playingIndexPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPCMediaRemoteMiddleware *middleware
 @property  MPRequest<MPCMediaRemoteMiddlewareMetadataOperationConfiguration> *request
 @property  MPCFuture *playQueueIdentifiersFuture
 @property  MPCFuture *playingIdentifierFuture
 @property  MPCFuture *queueIdentifierFuture
 @property  NSArray *inputProtocols
 @property  NSArray *outputProtocols
 @property  NSMapTable *inputOperations
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCMediaRemoteMiddlewareMetadataOperation inputProtocols]
  -[MPCMediaRemoteMiddlewareMetadataOperation setRequest:]
  -[MPCMediaRemoteMiddlewareMetadataOperation inputOperations]
  -[MPCMediaRemoteMiddlewareMetadataOperation invalidationObservers]
  -[MPCMediaRemoteMiddlewareMetadataOperation setMiddleware:]
  -[MPCMediaRemoteMiddlewareMetadataOperation setInputOperations:]
  -[MPCMediaRemoteMiddlewareMetadataOperation sourceContentItems]
  -[MPCMediaRemoteMiddlewareMetadataOperation outputProtocols]
  -[MPCMediaRemoteMiddlewareMetadataOperation _loadPlayingIdentifierWithCompletion:]
  -[MPCMediaRemoteMiddlewareMetadataOperation setPlayQueueIdentifiersFuture:]
  -[MPCMediaRemoteMiddlewareMetadataOperation .cxx_destruct]
  -[MPCMediaRemoteMiddlewareMetadataOperation setQueueIdentifierFuture:]
  -[MPCMediaRemoteMiddlewareMetadataOperation middleware]
  -[MPCMediaRemoteMiddlewareMetadataOperation queueIdentifierFuture]
  -[MPCMediaRemoteMiddlewareMetadataOperation _itemGenericObjectPropertySetForContentItem:propertySet:]
  -[MPCMediaRemoteMiddlewareMetadataOperation setPlayingIdentifierFuture:]
  -[MPCMediaRemoteMiddlewareMetadataOperation modelObjects]
  -[MPCMediaRemoteMiddlewareMetadataOperation execute]
  -[MPCMediaRemoteMiddlewareMetadataOperation timeoutDescription]
  -[MPCMediaRemoteMiddlewareMetadataOperation request]
  -[MPCMediaRemoteMiddlewareMetadataOperation setInvalidationHandler:]
  -[MPCMediaRemoteMiddlewareMetadataOperation _loadItemsWithCompletion:]
  -[MPCMediaRemoteMiddlewareMetadataOperation playQueueIdentifiersFuture]
  -[MPCMediaRemoteMiddlewareMetadataOperation rangeFromTracklistRange:]
  -[MPCMediaRemoteMiddlewareMetadataOperation playingIndexPath]
  -[MPCMediaRemoteMiddlewareMetadataOperation _genericObjectPropertySetForContentItem:preferredRelationships:propertySet:]
  -[MPCMediaRemoteMiddlewareMetadataOperation initWithMiddleware:request:]
  -[MPCMediaRemoteMiddlewareMetadataOperation invalidationHandler]
  -[MPCMediaRemoteMiddlewareMetadataOperation playingIdentifierFuture]


MPCModelGenericAVItem : MPAVItem <MPRTCReportingItemSessionCreating, AVAssetResourceLoaderDelegate, AVPlayerItemMetadataOutputPushDelegate, ICEnvironmentMonitorObserver>
 @property  long long rtcReportingAssetType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSDictionary *audioFormatsDictionary
 @property  NSArray *availableSortedFormats
 @property  <MPCModelPlaybackAssetCacheProviding> *assetCacheProvider
 @property  NSString *assetSourceStoreFrontID
 @property  long long equivalencySourceAdamID
 @property  MPModelGenericObject *genericObject
 @property  NSData *jingleTimedMetadata
 @property  MPMediaLibrary *mediaLibrary
 @property  NSNumber *siriInitiated
 @property  BOOL radioPlayback
 @property  BOOL radioStreamPlayback
 @property  BOOL subscriptionRequired
 @property  BOOL hasVideo
 @property  BOOL shouldReportPlayEventsToStore
 @property  MPCPlaybackRequestEnvironment *playbackRequestEnvironment
 @property  long long stationItemLikedState
 @property  NSDictionary *trackInfo
 @property  NSData *trackInfoData
 @property  MPCPlaybackEngineEventStream *eventStream
 @property  MPCPlayerAudioFormat *preferredFormat
 @property  MPCPlayerAudioFormat *activeFormat
 @property  long long activeFormatJustification
 @property  NSArray *alternateFormats
 @property  MPCPlayerAudioRoute *audioRoute
 @property  long long preferredAudioAssetType
 @property  MPCAudioAssetTypeSelection *preferredAudioAssetTypeSelection
 @property  long long loadedAudioAssetType
 @property  BOOL hlsAsset
 @property  BOOL downloadedAsset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCModelGenericAVItem _utilitySerialQueue]
  +[MPCModelGenericAVItem _prefersHighQualityVideoContentForNetworkType:]
  +[MPCModelGenericAVItem _prefersHighQualityAudioContentForNetworkType:]
  +[MPCModelGenericAVItem _unwrapPlaybackError:]

  // instance methods
  -[MPCModelGenericAVItem environmentMonitorDidChangeNetworkType:]
  -[MPCModelGenericAVItem storeFrontIdentifier]
  -[MPCModelGenericAVItem eventStream]
  -[MPCModelGenericAVItem setMediaLibrary:]
  -[MPCModelGenericAVItem _startTime]
  -[MPCModelGenericAVItem setPreferredFormat:]
  -[MPCModelGenericAVItem preferredFormat]
  -[MPCModelGenericAVItem setActiveFormat:]
  -[MPCModelGenericAVItem album]
  -[MPCModelGenericAVItem setActiveFormatJustification:]
  -[MPCModelGenericAVItem audioRoute]
  -[MPCModelGenericAVItem personID]
  -[MPCModelGenericAVItem albumYear]
  -[MPCModelGenericAVItem activeFormatJustification]
  -[MPCModelGenericAVItem isAlwaysLive]
  -[MPCModelGenericAVItem activeFormat]
  -[MPCModelGenericAVItem setAudioRoute:]
  -[MPCModelGenericAVItem copyrightText]
  -[MPCModelGenericAVItem artist]
  -[MPCModelGenericAVItem genre]
  -[MPCModelGenericAVItem cloudAlbumID]
  -[MPCModelGenericAVItem cloudID]
  -[MPCModelGenericAVItem mediaLibrary]
  -[MPCModelGenericAVItem hasTimeSyncedLyrics]
  -[MPCModelGenericAVItem artistStoreID]
  -[MPCModelGenericAVItem externalContentIdentifier]
  -[MPCModelGenericAVItem .cxx_destruct]
  -[MPCModelGenericAVItem cloudUniversalLibraryID]
  -[MPCModelGenericAVItem _bookmarkTime]
  -[MPCModelGenericAVItem persistentID]
  -[MPCModelGenericAVItem explicitBadge]
  -[MPCModelGenericAVItem composer]
  -[MPCModelGenericAVItem setEquivalencySourceAdamID:]
  -[MPCModelGenericAVItem setTrackInfo:]
  -[MPCModelGenericAVItem setSiriInitiated:]
  -[MPCModelGenericAVItem setEventStream:]
  -[MPCModelGenericAVItem nowPlayingInfoCenter:lyricsForContentItem:completion:]
  -[MPCModelGenericAVItem playbackInfo]
  -[MPCModelGenericAVItem hasStoreLyrics]
  -[MPCModelGenericAVItem allowsExternalPlayback]
  -[MPCModelGenericAVItem allowsEQ]
  -[MPCModelGenericAVItem loadAssetAndPlayerItem]
  -[MPCModelGenericAVItem updatePlayerItemMetadata]
  -[MPCModelGenericAVItem bookmarkTime]
  -[MPCModelGenericAVItem albumArtist]
  -[MPCModelGenericAVItem _persistedLikedState]
  -[MPCModelGenericAVItem storeItemInt64ID]
  -[MPCModelGenericAVItem _handleUpdatedLikedState:forUserIdentity:completion:]
  -[MPCModelGenericAVItem durationFromExternalMetadata]
  -[MPCModelGenericAVItem albumTrackCount]
  -[MPCModelGenericAVItem albumStoreID]
  -[MPCModelGenericAVItem storeSubscriptionAdamID]
  -[MPCModelGenericAVItem albumTrackNumber]
  -[MPCModelGenericAVItem isExplicitTrack]
  -[MPCModelGenericAVItem stationStringID]
  -[MPCModelGenericAVItem modelGenericObject]
  -[MPCModelGenericAVItem libraryLyrics]
  -[MPCModelGenericAVItem _updateAudioFormatInfoForContentItem:]
  -[MPCModelGenericAVItem stationProviderID]
  -[MPCModelGenericAVItem containerUniqueID]
  -[MPCModelGenericAVItem setRating:]
  -[MPCModelGenericAVItem isSubscriptionRequired]
  -[MPCModelGenericAVItem storeAccountID]
  -[MPCModelGenericAVItem useListeningHistory]
  -[MPCModelGenericAVItem isArtistUploadedContent]
  -[MPCModelGenericAVItem albumPersistentID]
  -[MPCModelGenericAVItem albumArtistPersistentID]
  -[MPCModelGenericAVItem artistPersistentID]
  -[MPCModelGenericAVItem genrePersistentID]
  -[MPCModelGenericAVItem composerPersistentID]
  -[MPCModelGenericAVItem storePurchasedAdamID]
  -[MPCModelGenericAVItem _currentPlaybackRateDidChange:]
  -[MPCModelGenericAVItem canUseLoadedAsset]
  -[MPCModelGenericAVItem isRadioItem]
  -[MPCModelGenericAVItem stationHash]
  -[MPCModelGenericAVItem playbackError]
  -[MPCModelGenericAVItem setPlaybackStoppedTime:]
  -[MPCModelGenericAVItem notePlaybackFinishedByHittingEnd]
  -[MPCModelGenericAVItem setPlaybackCheckpointCurrentTime:]
  -[MPCModelGenericAVItem stationName]
  -[MPCModelGenericAVItem setPlaybackFinishedTime:]
  -[MPCModelGenericAVItem applyVolumeNormalizationWithSoundCheckEnabled:]
  -[MPCModelGenericAVItem isAssetURLValid]
  -[MPCModelGenericAVItem isValidPlayerSubstituteForItem:]
  -[MPCModelGenericAVItem usesSubscriptionLease]
  -[MPCModelGenericAVItem prepareForRate:completionHandler:]
  -[MPCModelGenericAVItem setupWithPlaybackInfo]
  -[MPCModelGenericAVItem _applyLoudnessInfo]
  -[MPCModelGenericAVItem resolvePlaybackError:withCompletion:]
  -[MPCModelGenericAVItem _willBecomeActivePlayerItem]
  -[MPCModelGenericAVItem _willResignActivePlayerItem]
  -[MPCModelGenericAVItem _didResignActivePlayerItem]
  -[MPCModelGenericAVItem analyticsContentType]
  -[MPCModelGenericAVItem _didBecomeActivePlayerItem]
  -[MPCModelGenericAVItem analyticsFormatType]
  -[MPCModelGenericAVItem pauseContentKeySession]
  -[MPCModelGenericAVItem resumeContentKeySession]
  -[MPCModelGenericAVItem chapterTimeMarkers]
  -[MPCModelGenericAVItem artworkTimeMarkers]
  -[MPCModelGenericAVItem urlTimeMarkers]
  -[MPCModelGenericAVItem useEmbeddedChapterData]
  -[MPCModelGenericAVItem isLikedStateEnabled]
  -[MPCModelGenericAVItem supportsLikedState]
  -[MPCModelGenericAVItem prefersSeekOverSkip]
  -[MPCModelGenericAVItem shouldPreventPlayback]
  -[MPCModelGenericAVItem leaseStatus]
  -[MPCModelGenericAVItem rtcReportingServiceIdentifier]
  -[MPCModelGenericAVItem allowsAirPlayFromCloud]
  -[MPCModelGenericAVItem requiresLoadedAssetForAirPlayProperties]
  -[MPCModelGenericAVItem leasePlaybackPreventionState]
  -[MPCModelGenericAVItem stationID]
  -[MPCModelGenericAVItem trackInfo]
  -[MPCModelGenericAVItem resourceLoader:shouldWaitForRenewalOfRequestedResource:]
  -[MPCModelGenericAVItem shouldShowComposer]
  -[MPCModelGenericAVItem _stopTime]
  -[MPCModelGenericAVItem _radioStation]
  -[MPCModelGenericAVItem isSiriInitiated]
  -[MPCModelGenericAVItem equivalencySourceAdamID]
  -[MPCModelGenericAVItem metadataOutput:didOutputTimedMetadataGroups:fromPlayerItemTrack:]
  -[MPCModelGenericAVItem playbackRequestEnvironment]
  -[MPCModelGenericAVItem mediaItem]
  -[MPCModelGenericAVItem mainTitle]
  -[MPCModelGenericAVItem userRating]
  -[MPCModelGenericAVItem type]
  -[MPCModelGenericAVItem artworkCatalogBlock]
  -[MPCModelGenericAVItem mediaType]
  -[MPCModelGenericAVItem databaseID]
  -[MPCModelGenericAVItem dealloc]
  -[MPCModelGenericAVItem setSubscriptionRequired:]
  -[MPCModelGenericAVItem resourceLoader:shouldWaitForLoadingOfRequestedResource:]
  -[MPCModelGenericAVItem rtcReportingAssetType]
  -[MPCModelGenericAVItem _storeRequestContext]
  -[MPCModelGenericAVItem isStreamable]
  -[MPCModelGenericAVItem alternateFormats]
  -[MPCModelGenericAVItem _keyServerAdamID]
  -[MPCModelGenericAVItem hasVideo]
  -[MPCModelGenericAVItem availableSortedFormats]
  -[MPCModelGenericAVItem currentPlayerAudioFormat]
  -[MPCModelGenericAVItem updateActiveFormat:justification:]
  -[MPCModelGenericAVItem _contentTasteControllerDidChangeNotification:]
  -[MPCModelGenericAVItem _ageVerificationStateDidChangeNotification:]
  -[MPCModelGenericAVItem isHLSAsset]
  -[MPCModelGenericAVItem loadedAudioAssetType]
  -[MPCModelGenericAVItem _shouldRememberBookmarkTime]
  -[MPCModelGenericAVItem isRadioStreamPlayback]
  -[MPCModelGenericAVItem isRadioPlayback]
  -[MPCModelGenericAVItem setAssetCacheProvider:]
  -[MPCModelGenericAVItem setGenericObject:]
  -[MPCModelGenericAVItem _prefersHighQualityContent]
  -[MPCModelGenericAVItem setRadioPlayback:]
  -[MPCModelGenericAVItem assetSourceStoreFrontID]
  -[MPCModelGenericAVItem _delegatedUserIdentityProperties:]
  -[MPCModelGenericAVItem _allowsStreamingPlayback]
  -[MPCModelGenericAVItem _assetLoadPropertiesWithUserIdentityProperties:delegatedUserIdentityProperties:]
  -[MPCModelGenericAVItem preferredAudioAssetType]
  -[MPCModelGenericAVItem _timeoutValues]
  -[MPCModelGenericAVItem _iTunesStorePurchasedMediaKind]
  -[MPCModelGenericAVItem _gaplessInfo]
  -[MPCModelGenericAVItem _loudnessInfoMediaKind]
  -[MPCModelGenericAVItem _volumeAdjustment]
  -[MPCModelGenericAVItem _getSubscriptionLeasePropertiesWithCompletion:]
  -[MPCModelGenericAVItem _allowsAssetCaching]
  -[MPCModelGenericAVItem assetCacheProvider]
  -[MPCModelGenericAVItem genericObject]
  -[MPCModelGenericAVItem _rtcReportingServiceIdentifierWithAssetURL:]
  -[MPCModelGenericAVItem _rtcReportingMediaIdentifierWithAssetLoadProperties:]
  -[MPCModelGenericAVItem _allowsHighQualityMusicStreamingOnCellularDidChangeNotification:]
  -[MPCModelGenericAVItem _applyPreferredPeakBitRateToPlayerItem:withItemType:]
  -[MPCModelGenericAVItem isDownloadedAsset]
  -[MPCModelGenericAVItem _emitAudioAssetTypeSelection:]
  -[MPCModelGenericAVItem _suzeLeaseMediaType]
  -[MPCModelGenericAVItem _suzeLeaseSessionRenewDidFailNotification:]
  -[MPCModelGenericAVItem audioFormatForStableVariantID:]
  -[MPCModelGenericAVItem audioFormatsDictionary]
  -[MPCModelGenericAVItem setAudioFormatsDictionary:]
  -[MPCModelGenericAVItem setAvailableSortedFormats:]
  -[MPCModelGenericAVItem _emitAudioFormatChangeEvent]
  -[MPCModelGenericAVItem _updateActiveFormatJustification:]
  -[MPCModelGenericAVItem _audioFormatPreference]
  -[MPCModelGenericAVItem _handlePlaybackFinishedTime:didFinishByHittingEnd:]
  -[MPCModelGenericAVItem _updatePreventionStatusWithLeaseSession:]
  -[MPCModelGenericAVItem _getUnverifiedSubscriptionLeaseSessionWithCompletion:]
  -[MPCModelGenericAVItem _updateBookmarkTime:isCheckpoint:]
  -[MPCModelGenericAVItem _updateHasBeenPlayedWithElapsedTime:completion:]
  -[MPCModelGenericAVItem _updateAutomaticSubscriptionLeaseRefresh]
  -[MPCModelGenericAVItem mpcReporting_itemType]
  -[MPCModelGenericAVItem jingleTimedMetadata]
  -[MPCModelGenericAVItem shouldReportPlayEventsToStore]
  -[MPCModelGenericAVItem _isPrivateListeningEnabled]
  -[MPCModelGenericAVItem trackInfoData]
  -[MPCModelGenericAVItem _reloadTimedMetadataRequest]
  -[MPCModelGenericAVItem _updateJingleTimedMetadata]
  -[MPCModelGenericAVItem _invalidateContentItem]
  -[MPCModelGenericAVItem _postInvalidationNotifications]
  -[MPCModelGenericAVItem _timedMetadataResponseDidInvalidateNotification:]
  -[MPCModelGenericAVItem _modelPlaybackPosition]
  -[MPCModelGenericAVItem _subscriptionLeaseStatusDidChangeNotification:]
  -[MPCModelGenericAVItem _storeUbiquitousIdentifier]
  -[MPCModelGenericAVItem initWithGenericObject:itemProperties:playbackRequestEnvironment:identityPropertySet:]
  -[MPCModelGenericAVItem updateAudioFormatsDictionary:]
  -[MPCModelGenericAVItem updatePreferredFormat:]
  -[MPCModelGenericAVItem configureAVPlayerItemWithAudioFormat:forceSpatial:]
  -[MPCModelGenericAVItem mpcReporting_equivalencySourceAdamID]
  -[MPCModelGenericAVItem mpcReporting_identityPropertiesLoader]
  -[MPCModelGenericAVItem mpcReporting_jingleTimedMetadata]
  -[MPCModelGenericAVItem mpcReporting_requestingBundleIdentifier]
  -[MPCModelGenericAVItem mpcReporting_requestingBundleVersion]
  -[MPCModelGenericAVItem mpcReporting_shouldUseRelativeTimePositions]
  -[MPCModelGenericAVItem mpcReporting_shouldReportPlayEventsToStore]
  -[MPCModelGenericAVItem mpcReporting_privateListeningEnabled]
  -[MPCModelGenericAVItem mpcReporting_siriInitiated]
  -[MPCModelGenericAVItem mpcReporting_trackInfo]
  -[MPCModelGenericAVItem preferredAudioAssetTypeSelection]
  -[MPCModelGenericAVItem setAssetSourceStoreFrontID:]
  -[MPCModelGenericAVItem setRadioStreamPlayback:]
  -[MPCModelGenericAVItem stationItemLikedState]
  -[MPCModelGenericAVItem setStationItemLikedState:]
  -[MPCModelGenericAVItem setAlternateFormats:]


_MPCURLAssetDownloadCompletionObserver : NSObject
 @property  AVURLAsset *asset
 @property  @? completionHandler

  // instance methods
  -[_MPCURLAssetDownloadCompletionObserver initWithAsset:]
  -[_MPCURLAssetDownloadCompletionObserver .cxx_destruct]
  -[_MPCURLAssetDownloadCompletionObserver asset]
  -[_MPCURLAssetDownloadCompletionObserver setCompletionHandler:]
  -[_MPCURLAssetDownloadCompletionObserver dealloc]
  -[_MPCURLAssetDownloadCompletionObserver completionHandler]
  -[_MPCURLAssetDownloadCompletionObserver _downloadCompleteSuccessNotification:]
  -[_MPCURLAssetDownloadCompletionObserver _downloadCompleteFailedNotification:]
  -[_MPCURLAssetDownloadCompletionObserver _notifyCompletionHandlerWithSuccess:error:]


MPCAssistantDiscovery : NSObject
 @property  BOOL waitForCompleteClusters

  // instance methods
  -[MPCAssistantDiscovery stopDiscovery]
  -[MPCAssistantDiscovery init]
  -[MPCAssistantDiscovery waitForCompleteClusters]
  -[MPCAssistantDiscovery setWaitForCompleteClusters:]
  -[MPCAssistantDiscovery dealloc]
  -[MPCAssistantDiscovery _discoverAirplayDevices:]
  -[MPCAssistantDiscovery discoverAirplayDevicesMatchingGroupID:completion:]
  -[MPCAssistantDiscovery discoverAirplayDevicesMatchingLogicalDeviceIDs:expectedCount:completion:]
  -[MPCAssistantDiscovery discoverAirplayDevicesMatchingUIDs:completion:]
  -[MPCAssistantDiscovery discoverRemoteControlEndpointsMatchingUIDs:completion:]


MPCModelGenericAVItemUserIdentityPropertySet : NSObject
 @property  ICUserIdentityProperties *identityProperties
 @property  ICUserIdentityProperties *delegatedIdentityProperties

  // class methods
  +[MPCModelGenericAVItemUserIdentityPropertySet identityPropertySetFromRequestContext:completion:]

  // instance methods
  -[MPCModelGenericAVItemUserIdentityPropertySet identityProperties]
  -[MPCModelGenericAVItemUserIdentityPropertySet .cxx_destruct]
  -[MPCModelGenericAVItemUserIdentityPropertySet setIdentityProperties:]
  -[MPCModelGenericAVItemUserIdentityPropertySet delegatedIdentityProperties]
  -[MPCModelGenericAVItemUserIdentityPropertySet initWithIdentityProperties:delegatedIdentityProperties:]
  -[MPCModelGenericAVItemUserIdentityPropertySet setDelegatedIdentityProperties:]


MPCLyricsReportingController : NSObject <ICEnvironmentMonitorObserver>
 @property  MPCJinglePlayActivityReportingController *jinglePlayActivityReportingController
 @property  MPCReportingPlaybackObserver *reportingPlaybackObserver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCLyricsReportingController environmentMonitorDidChangeNetworkType:]
  -[MPCLyricsReportingController setJinglePlayActivityReportingController:]
  -[MPCLyricsReportingController .cxx_destruct]
  -[MPCLyricsReportingController setReportingPlaybackObserver:]
  -[MPCLyricsReportingController init]
  -[MPCLyricsReportingController reportingPlaybackObserver]
  -[MPCLyricsReportingController jinglePlayActivityReportingController]
  -[MPCLyricsReportingController recordLyricsViewEvent:]


_MPCProtoTracklistIndexPath : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoTracklistIndexPath dictionaryRepresentation]
  -[_MPCProtoTracklistIndexPath writeTo:]
  -[_MPCProtoTracklistIndexPath isEqual:]
  -[_MPCProtoTracklistIndexPath readFrom:]
  -[_MPCProtoTracklistIndexPath copyWithZone:]


MPCAssistantSetVolume : NSObject
  // instance methods
  -[MPCAssistantSetVolume executeWithUIDs:action:volumeValue:completion:]
  -[MPCAssistantSetVolume setVolume:withUIDs:completion:]
  -[MPCAssistantSetVolume increaseVolumeBy:withUIDs:completion:]
  -[MPCAssistantSetVolume decreaseVolumeBy:withUIDs:completion:]


MPCPlaybackEngineLoggingConsumer : NSObject <MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  MPCPlaybackEngineEvent *lastTimeControlStatusEvent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlaybackEngineLoggingConsumer identifier]

  // instance methods
  -[MPCPlaybackEngineLoggingConsumer subscription]
  -[MPCPlaybackEngineLoggingConsumer unsubscribeFromEventStream:]
  -[MPCPlaybackEngineLoggingConsumer lastTimeControlStatusEvent]
  -[MPCPlaybackEngineLoggingConsumer .cxx_destruct]
  -[MPCPlaybackEngineLoggingConsumer _logAccountEvent:subscription:cursor:]
  -[MPCPlaybackEngineLoggingConsumer setLastTimeControlStatusEvent:]
  -[MPCPlaybackEngineLoggingConsumer subscribeToEventStream:]


MPCModelStorePlaybackItemsRequestAccumulator : NSObject
 @property  NSDictionary *equivalencyMapping
 @property  MPSectionedCollection *unpersonalizedContentDescriptors
 @property  {MPCModelStorePlaybackItemsRequestAccumulatorResult=BBB} accumulatorResult
 @property  double lastBatchNetworkingTime

  // instance methods
  -[MPCModelStorePlaybackItemsRequestAccumulator unpersonalizedContentDescriptors]
  -[MPCModelStorePlaybackItemsRequestAccumulator initWithRequest:]
  -[MPCModelStorePlaybackItemsRequestAccumulator .cxx_destruct]
  -[MPCModelStorePlaybackItemsRequestAccumulator handleResponse:error:]
  -[MPCModelStorePlaybackItemsRequestAccumulator initWithRequest:serverObjectDatabase:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _resolveContentDescriptorsUsingServerObjectDatabase]
  -[MPCModelStorePlaybackItemsRequestAccumulator _eligibilityForItem:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _playlistEntryForObject:containerUniqueID:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _userIdentityWithRequest:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _isFatalError:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _addEquivalencyForMetadata:requestStoreIdentifier:]
  -[MPCModelStorePlaybackItemsRequestAccumulator accumulatorResult]
  -[MPCModelStorePlaybackItemsRequestAccumulator _addPendingChildItem:identifiers:atSectionIndex:collectionPlaybackAuthorizationToken:requestType:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _serverObjectFromPlaceholderContentDescriptor:propertySet:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _mergedObjectWithRequestedObjectIfNeeded:forIndexPath:]
  -[MPCModelStorePlaybackItemsRequestAccumulator _updatedModelObjectFromOriginalObject:sectionPlaybackAuthorizationToken:itemSectionIndex:]
  -[MPCModelStorePlaybackItemsRequestAccumulator handleMediaAPIResponse:trustID:isFinalResponse:]
  -[MPCModelStorePlaybackItemsRequestAccumulator newStoreItemMetadataRequest]
  -[MPCModelStorePlaybackItemsRequestAccumulator newMediaAPICollectionItemMetadataRequestInfo]
  -[MPCModelStorePlaybackItemsRequestAccumulator _newIdentifierSetFromOriginalIdentifierSet:playbackAuthorizationToken:]
  -[MPCModelStorePlaybackItemsRequestAccumulator equivalencyMapping]
  -[MPCModelStorePlaybackItemsRequestAccumulator lastBatchNetworkingTime]


_MPCProtoRadioContentReference : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoRadioContentReference .cxx_destruct]
  -[_MPCProtoRadioContentReference dictionaryRepresentation]
  -[_MPCProtoRadioContentReference writeTo:]
  -[_MPCProtoRadioContentReference isEqual:]
  -[_MPCProtoRadioContentReference readFrom:]
  -[_MPCProtoRadioContentReference copyWithZone:]


MPCModelGenericAVItemTimedMetadataResponse : MPModelResponse
 @property  BOOL firstResponse
 @property  BOOL finalResponse
 @property  NSData *adamIDData
 @property  MPCModelGenericAVItemTimedMetadataStreamFields *streamFields
 @property  MPSectionedCollection *unpersonalizedContentDescriptors

  // instance methods
  -[MPCModelGenericAVItemTimedMetadataResponse unpersonalizedContentDescriptors]
  -[MPCModelGenericAVItemTimedMetadataResponse .cxx_destruct]
  -[MPCModelGenericAVItemTimedMetadataResponse isFinalResponse]
  -[MPCModelGenericAVItemTimedMetadataResponse setFinalResponse:]
  -[MPCModelGenericAVItemTimedMetadataResponse dealloc]
  -[MPCModelGenericAVItemTimedMetadataResponse setUnpersonalizedContentDescriptors:]
  -[MPCModelGenericAVItemTimedMetadataResponse isFirstResponse]
  -[MPCModelGenericAVItemTimedMetadataResponse _personalizationResponseDidInvalidateNotification:]
  -[MPCModelGenericAVItemTimedMetadataResponse initWithRequest:personalizationResponse:firstResponse:finalResponse:]
  -[MPCModelGenericAVItemTimedMetadataResponse setFirstResponse:]
  -[MPCModelGenericAVItemTimedMetadataResponse adamIDData]
  -[MPCModelGenericAVItemTimedMetadataResponse setAdamIDData:]
  -[MPCModelGenericAVItemTimedMetadataResponse streamFields]
  -[MPCModelGenericAVItemTimedMetadataResponse setStreamFields:]


MPCModelGenericAVItemTimedMetadataStreamFields : NSObject
 @property  NSString *title
 @property  NSString *artist
 @property  NSString *album
 @property  BOOL explicitContent
 @property  NSArray *artworkDictionaries

  // instance methods
  -[MPCModelGenericAVItemTimedMetadataStreamFields album]
  -[MPCModelGenericAVItemTimedMetadataStreamFields artist]
  -[MPCModelGenericAVItemTimedMetadataStreamFields setTitle:]
  -[MPCModelGenericAVItemTimedMetadataStreamFields .cxx_destruct]
  -[MPCModelGenericAVItemTimedMetadataStreamFields setExplicitContent:]
  -[MPCModelGenericAVItemTimedMetadataStreamFields setArtist:]
  -[MPCModelGenericAVItemTimedMetadataStreamFields setAlbum:]
  -[MPCModelGenericAVItemTimedMetadataStreamFields isEqual:]
  -[MPCModelGenericAVItemTimedMetadataStreamFields title]
  -[MPCModelGenericAVItemTimedMetadataStreamFields isExplicitContent]
  -[MPCModelGenericAVItemTimedMetadataStreamFields artworkDictionaries]
  -[MPCModelGenericAVItemTimedMetadataStreamFields setArtworkDictionaries:]


MPCAssistantAnalyticsEventConsumer : NSObject <MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  MPCPlaybackEngine *playbackEngine
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCAssistantAnalyticsEventConsumer identifier]

  // instance methods
  -[MPCAssistantAnalyticsEventConsumer subscription]
  -[MPCAssistantAnalyticsEventConsumer playbackEngine]
  -[MPCAssistantAnalyticsEventConsumer unsubscribeFromEventStream:]
  -[MPCAssistantAnalyticsEventConsumer .cxx_destruct]
  -[MPCAssistantAnalyticsEventConsumer initWithPlaybackEngine:]
  -[MPCAssistantAnalyticsEventConsumer subscribeToEventStream:]
  -[MPCAssistantAnalyticsEventConsumer _contextWithEvent:]
  -[MPCAssistantAnalyticsEventConsumer _handleAssetLoadEnd:cursor:]


MPCPlayerSessionRequest : MPRequest <MPCMediaRemoteMiddlewareMetadataOperationConfiguration>
 @property  MPCPlayerPath *playerPath
 @property  MPPropertySet *sessionProperties
 @property  {?=qq} tracklistRange
 @property  MPPropertySet *playingItemProperties
 @property  MPPropertySet *queueItemProperties
 @property  MPPropertySet *queueSectionProperties
 @property  NSString *preferredFallbackItemRelationship
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlayerSessionRequest responseClass]

  // instance methods
  -[MPCPlayerSessionRequest playerPath]
  -[MPCPlayerSessionRequest middlewareClasses]
  -[MPCPlayerSessionRequest sessionProperties]
  -[MPCPlayerSessionRequest setPlayerPath:]
  -[MPCPlayerSessionRequest .cxx_destruct]
  -[MPCPlayerSessionRequest queueSectionProperties]
  -[MPCPlayerSessionRequest init]
  -[MPCPlayerSessionRequest playingItemProperties]
  -[MPCPlayerSessionRequest queueItemProperties]
  -[MPCPlayerSessionRequest tracklistRange]
  -[MPCPlayerSessionRequest setSessionProperties:]
  -[MPCPlayerSessionRequest copyWithZone:]


MPCPlayerSessionResponse : MPResponse
 @property  <MPCPlayerSessionResponseBuilder> *builder
 @property  MPCMediaRemoteController *controller
 @property  MPSectionedCollection *items

  // class methods
  +[MPCPlayerSessionResponse builderProtocol]

  // instance methods
  -[MPCPlayerSessionResponse controller]
  -[MPCPlayerSessionResponse items]
  -[MPCPlayerSessionResponse .cxx_destruct]
  -[MPCPlayerSessionResponse initWithRequest:middleware:]


_MPCProtoItemIdentifierSet : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoItemIdentifierSet .cxx_destruct]
  -[_MPCProtoItemIdentifierSet dictionaryRepresentation]
  -[_MPCProtoItemIdentifierSet writeTo:]
  -[_MPCProtoItemIdentifierSet isEqual:]
  -[_MPCProtoItemIdentifierSet readFrom:]
  -[_MPCProtoItemIdentifierSet copyWithZone:]


_MPCMusicPlayerControllerServer : NSObject <MPMusicPlayerControllerSystemServer, MPMusicPlayerControllerApplicationServer, NSXPCListenerDelegate, MPCPlaybackEngineEventObserving>
 @property  MPMusicPlayerControllerSystemCache *systemCache
 @property  NSXPCListener *listener
 @property  NSMutableArray *activeConnections
 @property  MPCPlaybackEngine *playbackEngine
 @property  NSXPCListenerEndpoint *endpoint
 @property  BOOL running
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCMusicPlayerControllerServer playbackEngine]
  -[_MPCMusicPlayerControllerServer getImageForArtworkIdentifier:itemIdentifier:atSize:reply:]
  -[_MPCMusicPlayerControllerServer play]
  -[_MPCMusicPlayerControllerServer setShuffleMode:]
  -[_MPCMusicPlayerControllerServer beginPlaybackAtHostTime:]
  -[_MPCMusicPlayerControllerServer getRepeatModeWithReply:]
  -[_MPCMusicPlayerControllerServer engine:didReachEndOfQueueWithReason:]
  -[_MPCMusicPlayerControllerServer getNowPlayingAtIndex:reply:]
  -[_MPCMusicPlayerControllerServer skipWithBehavior:]
  -[_MPCMusicPlayerControllerServer resumeIfNeeded]
  -[_MPCMusicPlayerControllerServer _addContentItemIDsToUpdateRecord:]
  -[_MPCMusicPlayerControllerServer getShuffleModeWithReply:]
  -[_MPCMusicPlayerControllerServer engine:didChangeItemElapsedTime:rate:]
  -[_MPCMusicPlayerControllerServer setDisableAutomaticCanBeNowPlaying:]
  -[_MPCMusicPlayerControllerServer engine:didChangeRepeatType:]
  -[_MPCMusicPlayerControllerServer engine:didChangeQueueWithReason:]
  -[_MPCMusicPlayerControllerServer .cxx_destruct]
  -[_MPCMusicPlayerControllerServer engine:didAchieveLikelyToKeepUpWithItem:]
  -[_MPCMusicPlayerControllerServer getDescriptorWithReply:]
  -[_MPCMusicPlayerControllerServer isRunning]
  -[_MPCMusicPlayerControllerServer stop]
  -[_MPCMusicPlayerControllerServer _timeSnapshotWithElapsedTime:rate:]
  -[_MPCMusicPlayerControllerServer setDescriptor:completion:]
  -[_MPCMusicPlayerControllerServer appendDescriptor:completion:]
  -[_MPCMusicPlayerControllerServer listener]
  -[_MPCMusicPlayerControllerServer performQueueModifications:completion:]
  -[_MPCMusicPlayerControllerServer _nowPlayingWithItem:]
  -[_MPCMusicPlayerControllerServer _applyServerStateUpdateRecord:]
  -[_MPCMusicPlayerControllerServer setElapsedTime:completion:]
  -[_MPCMusicPlayerControllerServer beginSeekWithDirection:]
  -[_MPCMusicPlayerControllerServer _registerForCommandHandlersRegisteredNotification]
  -[_MPCMusicPlayerControllerServer stopServer]
  -[_MPCMusicPlayerControllerServer endSeek]
  -[_MPCMusicPlayerControllerServer systemCache]
  -[_MPCMusicPlayerControllerServer getUserQueueModificationsDisabledWithReply:]
  -[_MPCMusicPlayerControllerServer prependDescriptor:completion:]
  -[_MPCMusicPlayerControllerServer activeConnections]
  -[_MPCMusicPlayerControllerServer _handleCommandHandlersRegistered:]
  -[_MPCMusicPlayerControllerServer setNowPlayingItem:itemIdentifier:completion:]
  -[_MPCMusicPlayerControllerServer engine:didChangeShuffleType:]
  -[_MPCMusicPlayerControllerServer engine:didChangeToItem:]
  -[_MPCMusicPlayerControllerServer setUserQueueModificationsDisabled:]
  -[_MPCMusicPlayerControllerServer getNowPlayingsForContentItemIDs:reply:]
  -[_MPCMusicPlayerControllerServer initWithPlaybackEngine:]
  -[_MPCMusicPlayerControllerServer setRelativeVolume:]
  -[_MPCMusicPlayerControllerServer reshuffle]
  -[_MPCMusicPlayerControllerServer startServer]
  -[_MPCMusicPlayerControllerServer endpoint]
  -[_MPCMusicPlayerControllerServer listener:shouldAcceptNewConnection:]
  -[_MPCMusicPlayerControllerServer pauseWithFadeDuration:]
  -[_MPCMusicPlayerControllerServer prerollWithCompletion:]
  -[_MPCMusicPlayerControllerServer getTimeSnapshotWithReply:]
  -[_MPCMusicPlayerControllerServer setRepeatMode:]
  -[_MPCMusicPlayerControllerServer getNowPlayingWithReply:]
  -[_MPCMusicPlayerControllerServer engine:didChangeToState:]
  -[_MPCMusicPlayerControllerServer setPlaybackRate:completion:]
  -[_MPCMusicPlayerControllerServer engine:didResetQueueWithPlaybackContext:error:]
  -[_MPCMusicPlayerControllerServer engine:didEndPlaybackOfItem:]


MPCModelGenericAVItemAssetLoadResult : NSObject
 @property  BOOL allowsAssetCaching
 @property  BOOL allowsAssetInfoCaching
 @property  NSString *assetPathExtension
 @property  long long assetProtectionType
 @property  long long assetQualityType
 @property  NSURL *assetURL
 @property  BOOL isHomeSharingAsset
 @property  BOOL isHLSAsset
 @property  BOOL isCloudStreamingAsset
 @property  BOOL onlineSubscriptionKeysRequired
 @property  NSURL *protectedContentSupportStorageFileURL
 @property  NSDictionary *purchaseBundleDictionary
 @property  NSURL *streamingKeyCertificateURL
 @property  NSURL *streamingKeyServerURL
 @property  NSString *keyServerProtocolType
 @property  NSNumber *streamingKeyAdamID
 @property  NSURL *alternateHLSPlaylistURL
 @property  NSURL *alternateHLSKeyServerURL
 @property  NSURL *alternateHLSKeyCertificateURL
 @property  id suzeLeaseID
 @property  BOOL iTunesStoreStream
 @property  @? willBecomeActivePlayerItemHandler
 @property  BOOL hasValidAsset
 @property  NSString *playbackAuthorizationToken
 @property  long long audioAssetType
 @property  BOOL downloadedAsset
 @property  long long source

  // class methods
  +[MPCModelGenericAVItemAssetLoadResult assetLoadResultWithStoreAssetPlaybackResponse:assetLoadProperties:source:error:]

  // instance methods
  -[MPCModelGenericAVItemAssetLoadResult protectedContentSupportStorageFileURL]
  -[MPCModelGenericAVItemAssetLoadResult .cxx_destruct]
  -[MPCModelGenericAVItemAssetLoadResult setAssetURL:]
  -[MPCModelGenericAVItemAssetLoadResult descriptionDictionary]
  -[MPCModelGenericAVItemAssetLoadResult playbackAuthorizationToken]
  -[MPCModelGenericAVItemAssetLoadResult setSource:]
  -[MPCModelGenericAVItemAssetLoadResult suzeLeaseID]
  -[MPCModelGenericAVItemAssetLoadResult setITunesStoreStream:]
  -[MPCModelGenericAVItemAssetLoadResult onlineSubscriptionKeysRequired]
  -[MPCModelGenericAVItemAssetLoadResult setSuzeLeaseID:]
  -[MPCModelGenericAVItemAssetLoadResult setOnlineSubscriptionKeysRequired:]
  -[MPCModelGenericAVItemAssetLoadResult keyServerProtocolType]
  -[MPCModelGenericAVItemAssetLoadResult isiTunesStoreStream]
  -[MPCModelGenericAVItemAssetLoadResult setPlaybackAuthorizationToken:]
  -[MPCModelGenericAVItemAssetLoadResult source]
  -[MPCModelGenericAVItemAssetLoadResult assetURL]
  -[MPCModelGenericAVItemAssetLoadResult setKeyServerProtocolType:]
  -[MPCModelGenericAVItemAssetLoadResult isHLSAsset]
  -[MPCModelGenericAVItemAssetLoadResult hasValidAsset]
  -[MPCModelGenericAVItemAssetLoadResult assetProtectionType]
  -[MPCModelGenericAVItemAssetLoadResult purchaseBundleDictionary]
  -[MPCModelGenericAVItemAssetLoadResult isCloudStreamingAsset]
  -[MPCModelGenericAVItemAssetLoadResult isHomeSharingAsset]
  -[MPCModelGenericAVItemAssetLoadResult alternateHLSPlaylistURL]
  -[MPCModelGenericAVItemAssetLoadResult assetQualityType]
  -[MPCModelGenericAVItemAssetLoadResult allowsAssetCaching]
  -[MPCModelGenericAVItemAssetLoadResult assetPathExtension]
  -[MPCModelGenericAVItemAssetLoadResult streamingKeyServerURL]
  -[MPCModelGenericAVItemAssetLoadResult streamingKeyAdamID]
  -[MPCModelGenericAVItemAssetLoadResult streamingKeyCertificateURL]
  -[MPCModelGenericAVItemAssetLoadResult willBecomeActivePlayerItemHandler]
  -[MPCModelGenericAVItemAssetLoadResult alternateHLSKeyCertificateURL]
  -[MPCModelGenericAVItemAssetLoadResult alternateHLSKeyServerURL]
  -[MPCModelGenericAVItemAssetLoadResult audioAssetType]
  -[MPCModelGenericAVItemAssetLoadResult isDownloadedAsset]
  -[MPCModelGenericAVItemAssetLoadResult setStreamingKeyServerURL:]
  -[MPCModelGenericAVItemAssetLoadResult setStreamingKeyCertificateURL:]
  -[MPCModelGenericAVItemAssetLoadResult setAllowsAssetInfoCaching:]
  -[MPCModelGenericAVItemAssetLoadResult setIsCloudStreamingAsset:]
  -[MPCModelGenericAVItemAssetLoadResult setIsHLSAsset:]
  -[MPCModelGenericAVItemAssetLoadResult setAlternateHLSPlaylistURL:]
  -[MPCModelGenericAVItemAssetLoadResult setAlternateHLSKeyServerURL:]
  -[MPCModelGenericAVItemAssetLoadResult setAlternateHLSKeyCertificateURL:]
  -[MPCModelGenericAVItemAssetLoadResult setAllowsAssetCaching:]
  -[MPCModelGenericAVItemAssetLoadResult setAssetPathExtension:]
  -[MPCModelGenericAVItemAssetLoadResult setAssetQualityType:]
  -[MPCModelGenericAVItemAssetLoadResult setStreamingKeyAdamID:]
  -[MPCModelGenericAVItemAssetLoadResult setPurchaseBundleDictionary:]
  -[MPCModelGenericAVItemAssetLoadResult setAssetProtectionType:]
  -[MPCModelGenericAVItemAssetLoadResult setWillBecomeActivePlayerItemHandler:]
  -[MPCModelGenericAVItemAssetLoadResult setAudioAssetType:]
  -[MPCModelGenericAVItemAssetLoadResult allowsAssetInfoCaching]
  -[MPCModelGenericAVItemAssetLoadResult setIsHomeSharingAsset:]
  -[MPCModelGenericAVItemAssetLoadResult setProtectedContentSupportStorageFileURL:]
  -[MPCModelGenericAVItemAssetLoadResult setDownloadedAsset:]


MPCReportingDeviceIdentityPropertiesLoader : NSObject <MPCReportingIdentityPropertiesLoading>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCReportingDeviceIdentityPropertiesLoader sharedLoader]

  // instance methods
  -[MPCReportingDeviceIdentityPropertiesLoader .cxx_destruct]
  -[MPCReportingDeviceIdentityPropertiesLoader init]
  -[MPCReportingDeviceIdentityPropertiesLoader loadReportingIdentityPropertiesWithCompletionHandler:]


MPCModelMediaClipAVItem : MPAVItem <MPRTCReportingItemSessionCreating>
 @property  MPModelMediaClip *mediaClip
 @property  long long rtcReportingAssetType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCModelMediaClipAVItem requiredMediaClipProperties]

  // instance methods
  -[MPCModelMediaClipAVItem .cxx_destruct]
  -[MPCModelMediaClipAVItem allowsExternalPlayback]
  -[MPCModelMediaClipAVItem loadAssetAndPlayerItem]
  -[MPCModelMediaClipAVItem durationFromExternalMetadata]
  -[MPCModelMediaClipAVItem modelGenericObject]
  -[MPCModelMediaClipAVItem supportsRateChange]
  -[MPCModelMediaClipAVItem isAssetURLValid]
  -[MPCModelMediaClipAVItem isValidPlayerSubstituteForItem:]
  -[MPCModelMediaClipAVItem _applyLoudnessInfo]
  -[MPCModelMediaClipAVItem reevaluateType]
  -[MPCModelMediaClipAVItem prefersSeekOverSkip]
  -[MPCModelMediaClipAVItem rtcReportingServiceIdentifier]
  -[MPCModelMediaClipAVItem allowsAirPlayFromCloud]
  -[MPCModelMediaClipAVItem mainTitle]
  -[MPCModelMediaClipAVItem mediaClip]
  -[MPCModelMediaClipAVItem artworkCatalogBlock]
  -[MPCModelMediaClipAVItem rtcReportingAssetType]
  -[MPCModelMediaClipAVItem isStreamable]
  -[MPCModelMediaClipAVItem _allowsCellularPlayback]
  -[MPCModelMediaClipAVItem _currentPreferredStaticAsset]
  -[MPCModelMediaClipAVItem _isVideoAsset]
  -[MPCModelMediaClipAVItem initWithMediaClip:]


_MPCMediaRemotePublisher : NSObject <MPNowPlayingPlaybackQueueDataSourcePrivate, MPCPlaybackEngineEventObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL initializedSupportedCommands
 @property  BOOL engineRestoringState
 @property  BOOL mediaServerAvailable
 @property  MPCPlayerPath *playerPath
 @property  MPCPlaybackEngine *playbackEngine
 @property  MPNowPlayingInfoCenter *infoCenter
 @property  MPRemoteCommandCenter *commandCenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCMediaRemotePublisher reportUserBackgroundedApplication]
  -[_MPCMediaRemotePublisher becomeActive]
  -[_MPCMediaRemotePublisher playerPath]
  -[_MPCMediaRemotePublisher playbackEngine]
  -[_MPCMediaRemotePublisher isMediaServerAvailable]
  -[_MPCMediaRemotePublisher engine:didChangeAccounts:]
  -[_MPCMediaRemotePublisher engineDidLoseMediaServices:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:didEndMigrationWithIdentifier:error:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:willBeginSessionMigrationWithIdentifier:]
  -[_MPCMediaRemotePublisher _playbackStateIsIdle:]
  -[_MPCMediaRemotePublisher setInitializedSupportedCommands:]
  -[_MPCMediaRemotePublisher _performCommandEvent:completion:]
  -[_MPCMediaRemotePublisher isEngineRestoringState]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:artworkForContentItem:size:completion:]
  -[_MPCMediaRemotePublisher _durationAvailableNotification:]
  -[_MPCMediaRemotePublisher _performDebugEvent:completion:]
  -[_MPCMediaRemotePublisher engine:didChangeRepeatType:]
  -[_MPCMediaRemotePublisher engine:didChangeQueueWithReason:]
  -[_MPCMediaRemotePublisher .cxx_destruct]
  -[_MPCMediaRemotePublisher _commandEventDidTimeoutNotification:]
  -[_MPCMediaRemotePublisher _becomeActiveIfNeededWithCompletion:]
  -[_MPCMediaRemotePublisher _updateSupportedCommands]
  -[_MPCMediaRemotePublisher hasInitializedSupportedCommands]
  -[_MPCMediaRemotePublisher engineWillBeginStateRestoration:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:contentItemIDsFromOffset:toOffset:nowPlayingIndex:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:getTransportablePlaybackSessionRepresentationForRequest:completion:]
  -[_MPCMediaRemotePublisher engine:didChangeCurrentItemVariantID:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:lyricsForContentItem:completion:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:contentItemIDForOffset:]
  -[_MPCMediaRemotePublisher getShouldRestoreStateWithCompletion:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:contentItemForID:]
  -[_MPCMediaRemotePublisher playbackQueueIdentifierForNowPlayingInfoCenter:]
  -[_MPCMediaRemotePublisher _likedStateChangedNotification:]
  -[_MPCMediaRemotePublisher _supportedSessionTypes]
  -[_MPCMediaRemotePublisher _enqueueFallbackIntentIfNeededForCommandEvent:play:completion:]
  -[_MPCMediaRemotePublisher respondsToSelector:]
  -[_MPCMediaRemotePublisher _isRestrictedSubscriptionUser:]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:didEndLyricsEvent:]
  -[_MPCMediaRemotePublisher _canInsertPlaybackContext:forUser:]
  -[_MPCMediaRemotePublisher commandCenter]
  -[_MPCMediaRemotePublisher engineDidEndStateRestoration:]
  -[_MPCMediaRemotePublisher engine:didChangeActionAtQueueEnd:]
  -[_MPCMediaRemotePublisher setMediaServerAvailable:]
  -[_MPCMediaRemotePublisher publishIfNeeded]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:didBeginLyricsEvent:]
  -[_MPCMediaRemotePublisher engine:didChangeShuffleType:]
  -[_MPCMediaRemotePublisher engine:didChangeToItem:]
  -[_MPCMediaRemotePublisher engineDidResetMediaServices:]
  -[_MPCMediaRemotePublisher _exportableSessionTypes]
  -[_MPCMediaRemotePublisher _updateLaunchCommands]
  -[_MPCMediaRemotePublisher nowPlayingInfoCenter:artworkCatalogForContentItem:]
  -[_MPCMediaRemotePublisher initWithPlaybackEngine:]
  -[_MPCMediaRemotePublisher _disableQueueModificationsChangedNotification:]
  -[_MPCMediaRemotePublisher leaveSharedSessionWithCommandID:completion:]
  -[_MPCMediaRemotePublisher infoCenter]
  -[_MPCMediaRemotePublisher setEngineRestoringState:]
  -[_MPCMediaRemotePublisher engine:didChangeToState:]


MPCModelRadioStationTrackGenericObjectBuilder : NSObject
 @property  MPPropertySet *requestedProperties

  // instance methods
  -[MPCModelRadioStationTrackGenericObjectBuilder .cxx_destruct]
  -[MPCModelRadioStationTrackGenericObjectBuilder requestedProperties]
  -[MPCModelRadioStationTrackGenericObjectBuilder initWithRequestedProperties:]
  -[MPCModelRadioStationTrackGenericObjectBuilder genericObjectForRadioStationTrack:containerUniqueID:userIdentity:]


MPCModelGenericAVItemLocalFileLoadOperation : MPAsyncOperation
 @property  MPCModelGenericAVItemAssetLoadProperties *assetLoadProperties
 @property  BOOL requirePreferredAssetQuality
 @property  BOOL allowsCachedAssets
 @property  @? responseHandler

  // instance methods
  -[MPCModelGenericAVItemLocalFileLoadOperation .cxx_destruct]
  -[MPCModelGenericAVItemLocalFileLoadOperation responseHandler]
  -[MPCModelGenericAVItemLocalFileLoadOperation setResponseHandler:]
  -[MPCModelGenericAVItemLocalFileLoadOperation execute]
  -[MPCModelGenericAVItemLocalFileLoadOperation setAssetLoadProperties:]
  -[MPCModelGenericAVItemLocalFileLoadOperation setRequirePreferredAssetQuality:]
  -[MPCModelGenericAVItemLocalFileLoadOperation setAllowsCachedAssets:]
  -[MPCModelGenericAVItemLocalFileLoadOperation assetLoadProperties]
  -[MPCModelGenericAVItemLocalFileLoadOperation allowsCachedAssets]
  -[MPCModelGenericAVItemLocalFileLoadOperation isHLSFileAsset:]
  -[MPCModelGenericAVItemLocalFileLoadOperation _loadedAudioAssetTypeForFileAsset:]
  -[MPCModelGenericAVItemLocalFileLoadOperation requirePreferredAssetQuality]


MPCMediaLibraryPlaybackAssetCacheProvider : NSObject <MPCModelPlaybackAssetCacheProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCMediaLibraryPlaybackAssetCacheProvider _highQualityCachedAssetDestinationDirectoryForMediaLibrary:]
  +[MPCMediaLibraryPlaybackAssetCacheProvider _lowQualityCachedAssetDestinationDirectoryForMediaLibrary:]
  +[MPCMediaLibraryPlaybackAssetCacheProvider deviceLibraryProviderWithUserIdentity:]

  // instance methods
  -[MPCMediaLibraryPlaybackAssetCacheProvider .cxx_destruct]
  -[MPCMediaLibraryPlaybackAssetCacheProvider getPlaybackAssetCacheDestinationURL:purchaseBundleDestinationURL:forGenericObject:assetQualityType:pathExtension:]
  -[MPCMediaLibraryPlaybackAssetCacheProvider setPlaybackAssetCacheFileAsset:forGenericObject:withCompletionHandler:]
  -[MPCMediaLibraryPlaybackAssetCacheProvider clearPlaybackAssetCacheFileAssetForGenericObject:withCompletionHandler:]
  -[MPCMediaLibraryPlaybackAssetCacheProvider _initWithMediaLibrary:]
  -[MPCMediaLibraryPlaybackAssetCacheProvider _persistentIDForModelObject:]


MPCPlaybackDelegationProperties : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  unsigned long storeAccountID
 @property  NSString *deviceGUID
 @property  NSString *deviceName
 @property  MPCPrivateListeningStateSource *privateListeningStateSource
 @property  long long systemReleaseType
 @property  NSString *requestUserAgent
 @property  NSTimeZone *timeZone

  // class methods
  +[MPCPlaybackDelegationProperties supportsSecureCoding]

  // instance methods
  -[MPCPlaybackDelegationProperties timeZone]
  -[MPCPlaybackDelegationProperties initWithCoder:]
  -[MPCPlaybackDelegationProperties deviceName]
  -[MPCPlaybackDelegationProperties .cxx_destruct]
  -[MPCPlaybackDelegationProperties deviceGUID]
  -[MPCPlaybackDelegationProperties storeAccountID]
  -[MPCPlaybackDelegationProperties mutableCopyWithZone:]
  -[MPCPlaybackDelegationProperties systemReleaseType]
  -[MPCPlaybackDelegationProperties copyWithZone:]
  -[MPCPlaybackDelegationProperties _copyWithClass:zone:]
  -[MPCPlaybackDelegationProperties encodeWithCoder:]
  -[MPCPlaybackDelegationProperties privateListeningStateSource]
  -[MPCPlaybackDelegationProperties initWithStoreAccountID:deviceGUID:privateListeningStateSource:]
  -[MPCPlaybackDelegationProperties requestUserAgent]


MPCMutablePlaybackDelegationProperties : MPCPlaybackDelegationProperties
 @property  unsigned long storeAccountID
 @property  NSString *deviceGUID
 @property  NSString *deviceName
 @property  MPCPrivateListeningStateSource *privateListeningStateSource
 @property  long long systemReleaseType
 @property  NSString *requestUserAgent
 @property  NSTimeZone *timeZone

  // instance methods
  -[MPCMutablePlaybackDelegationProperties setTimeZone:]
  -[MPCMutablePlaybackDelegationProperties setDeviceName:]
  -[MPCMutablePlaybackDelegationProperties setDeviceGUID:]
  -[MPCMutablePlaybackDelegationProperties mutableCopyWithZone:]
  -[MPCMutablePlaybackDelegationProperties setSystemReleaseType:]
  -[MPCMutablePlaybackDelegationProperties setStoreAccountID:]
  -[MPCMutablePlaybackDelegationProperties copyWithZone:]
  -[MPCMutablePlaybackDelegationProperties setPrivateListeningStateSource:]
  -[MPCMutablePlaybackDelegationProperties setRequestUserAgent:]


MPCPlaybackIntent : NSObject
 @property  <MPCPlaybackIntentDataSource> *tracklistDataSource
 @property  NSString *localizedTitle
 @property  long long tracklistSource
 @property  <NSSecureCoding> *tracklistToken
 @property  long long actionAfterQueueLoad
 @property  long long shuffleMode
 @property  long long repeatMode
 @property  BOOL prefersEnqueuingUsingAirPlay
 @property  NSString *queueGroupingID
 @property  NSString *playActivityFeatureName
 @property  NSData *playActivityRecommendationData
 @property  NSString *siriAssetInfo
 @property  NSString *siriReferenceIdentifier
 @property  MPCPlaybackSharedListeningProperties *sharedListeningProperties
 @property  NSDictionary *startTimeModifications
 @property  NSDictionary *endTimeModifications

  // class methods
  +[MPCPlaybackIntent sharedSessionIntentWithProperties:identity:]
  +[MPCPlaybackIntent radioPlaybackIntentWithStationURL:]
  +[MPCPlaybackIntent radioPlaybackIntentFromSong:]
  +[MPCPlaybackIntent buildSharedSessionIntentWithIntent:identity:extendedStatusCompletion:]
  +[MPCPlaybackIntent tracklistDataSourceForSource:]
  +[MPCPlaybackIntent radioPlaybackIntentFromReference:]
  +[MPCPlaybackIntent intentFromQueueDescriptor:]
  +[MPCPlaybackIntent continueListeningRadioPlaybackIntent]
  +[MPCPlaybackIntent radioPlaybackIntentFromAlbum:]
  +[MPCPlaybackIntent radioPlaybackIntentFromArtist:]
  +[MPCPlaybackIntent radioPlaybackIntentWithStation:]
  +[MPCPlaybackIntent radioPlaybackIntentWithStationStringID:]

  // instance methods
  -[MPCPlaybackIntent localizedTitle]
  -[MPCPlaybackIntent playActivityRecommendationData]
  -[MPCPlaybackIntent siriAssetInfo]
  -[MPCPlaybackIntent setShuffleMode:]
  -[MPCPlaybackIntent sharedListeningProperties]
  -[MPCPlaybackIntent tracklistToken]
  -[MPCPlaybackIntent getRemotePlaybackQueueDataWithCompletion:]
  -[MPCPlaybackIntent queueGroupingID]
  -[MPCPlaybackIntent shuffleMode]
  -[MPCPlaybackIntent .cxx_destruct]
  -[MPCPlaybackIntent tracklistDataSource]
  -[MPCPlaybackIntent setSiriReferenceIdentifier:]
  -[MPCPlaybackIntent setTracklistSource:]
  -[MPCPlaybackIntent startTimeModifications]
  -[MPCPlaybackIntent prefersEnqueuingUsingAirPlay]
  -[MPCPlaybackIntent init]
  -[MPCPlaybackIntent siriReferenceIdentifier]
  -[MPCPlaybackIntent setPlayActivityRecommendationData:]
  -[MPCPlaybackIntent setLocalizedTitle:]
  -[MPCPlaybackIntent endTimeModifications]
  -[MPCPlaybackIntent generateNowPlayingContentItemWithMetadataObject:]
  -[MPCPlaybackIntent setTracklistToken:]
  -[MPCPlaybackIntent tracklistSource]
  -[MPCPlaybackIntent setSiriAssetInfo:]
  -[MPCPlaybackIntent playActivityFeatureName]
  -[MPCPlaybackIntent getArchiveWithConfiguration:completion:]
  -[MPCPlaybackIntent setQueueGroupingID:]
  -[MPCPlaybackIntent getRepresentativeObjectWithProperties:completion:]
  -[MPCPlaybackIntent repeatMode]
  -[MPCPlaybackIntent artworkCatalogForMetadataModelObject:]
  -[MPCPlaybackIntent actionAfterQueueLoad]
  -[MPCPlaybackIntent getNowPlayingInfoWithArtworkCatalogConfiguration:artworkHandler:completion:]
  -[MPCPlaybackIntent setActionAfterQueueLoad:]
  -[MPCPlaybackIntent getRemotePlaybackQueueRepresentationWithPlayerPath:completion:]
  -[MPCPlaybackIntent setEndTimeModifications:]
  -[MPCPlaybackIntent setPlayActivityFeatureName:]
  -[MPCPlaybackIntent setPrefersEnqueuingUsingAirPlay:]
  -[MPCPlaybackIntent setRepeatMode:]
  -[MPCPlaybackIntent getPlaybackContextWithCompletion:]
  -[MPCPlaybackIntent setStartTimeModifications:]


MPCPlaybackSharedListeningProperties : NSObject <NSCopying, NSSecureCoding>
 @property  ICLiveLink *liveLink
 @property  NSString *sessionIdentifier
 @property  NSString *sessionKey

  // class methods
  +[MPCPlaybackSharedListeningProperties supportsSecureCoding]
  +[MPCPlaybackSharedListeningProperties propertiesWithSessionIdentifier:sessionKey:]

  // instance methods
  -[MPCPlaybackSharedListeningProperties initWithCoder:]
  -[MPCPlaybackSharedListeningProperties .cxx_destruct]
  -[MPCPlaybackSharedListeningProperties sessionIdentifier]
  -[MPCPlaybackSharedListeningProperties liveLink]
  -[MPCPlaybackSharedListeningProperties sessionKey]
  -[MPCPlaybackSharedListeningProperties copyWithZone:]
  -[MPCPlaybackSharedListeningProperties encodeWithCoder:]
  -[MPCPlaybackSharedListeningProperties setLiveLink:]


_MPCPlaybackContextPlaybackIntentDataSource : NSObject <MPCPlaybackIntentDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlaybackContextPlaybackIntentDataSource getPlaybackContextForIntent:withCompletion:]


_MPCProtoRadioCreationProperties : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoRadioCreationProperties .cxx_destruct]
  -[_MPCProtoRadioCreationProperties dictionaryRepresentation]
  -[_MPCProtoRadioCreationProperties writeTo:]
  -[_MPCProtoRadioCreationProperties isEqual:]
  -[_MPCProtoRadioCreationProperties readFrom:]
  -[_MPCProtoRadioCreationProperties copyWithZone:]


MPCModelRadioStationBuilder : NSObject
 @property  MPPropertySet *requestedProperties

  // instance methods
  -[MPCModelRadioStationBuilder .cxx_destruct]
  -[MPCModelRadioStationBuilder requestedProperties]
  -[MPCModelRadioStationBuilder initWithRequestedProperties:]
  -[MPCModelRadioStationBuilder modelRadioStationForMetadata:userIdentity:]


MPCPlaybackEngineMiddlewareOperation : MPAsyncOperation <MPMiddlewareAutomaticDependencyOperation>
 @property  MPCPlaybackEngineMiddleware *middleware
 @property  MPCPlayerRequest *playerRequest
 @property  NSArray *inputProtocols
 @property  NSArray *outputProtocols
 @property  NSMapTable *inputOperations
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCPlaybackEngineMiddlewareOperation inputProtocols]
  -[MPCPlaybackEngineMiddlewareOperation inputOperations]
  -[MPCPlaybackEngineMiddlewareOperation initWithMiddleware:playerRequest:]
  -[MPCPlaybackEngineMiddlewareOperation playerRequest]
  -[MPCPlaybackEngineMiddlewareOperation invalidationObservers]
  -[MPCPlaybackEngineMiddlewareOperation setMiddleware:]
  -[MPCPlaybackEngineMiddlewareOperation setInputOperations:]
  -[MPCPlaybackEngineMiddlewareOperation setPlayerRequest:]
  -[MPCPlaybackEngineMiddlewareOperation outputProtocols]
  -[MPCPlaybackEngineMiddlewareOperation .cxx_destruct]
  -[MPCPlaybackEngineMiddlewareOperation middleware]
  -[MPCPlaybackEngineMiddlewareOperation execute]
  -[MPCPlaybackEngineMiddlewareOperation setInvalidationHandler:]
  -[MPCPlaybackEngineMiddlewareOperation invalidationHandler]


MPCPlaybackHistoryController : NSObject <MPCPlaybackEngineEventObserving>
 @property  NSOperationQueue *operationQueue
 @property  MPModelPlayEvent *lastRecordedPlayEvent
 @property  MPCPlaybackEngine *playbackEngine
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCPlaybackHistoryController setOperationQueue:]
  -[MPCPlaybackHistoryController playbackEngine]
  -[MPCPlaybackHistoryController operationQueue]
  -[MPCPlaybackHistoryController setLastRecordedPlayEvent:]
  -[MPCPlaybackHistoryController .cxx_destruct]
  -[MPCPlaybackHistoryController engine:willChangeToItem:fromItem:]
  -[MPCPlaybackHistoryController initWithPlaybackEngine:]
  -[MPCPlaybackHistoryController lastRecordedPlayEvent]


MPCMediaRemoteMiddlewarePlaybackStateOperation : MPAsyncOperation <MPMiddlewareOperation>
 @property  MPCMediaRemoteMiddleware *middleware
 @property  MPCFuture *playbackStateFuture
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation invalidationObservers]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation setPlaybackStateFuture:]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation setMiddleware:]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation .cxx_destruct]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation middleware]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation execute]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation timeoutDescription]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation setInvalidationHandler:]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation initWithMiddleware:]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation playbackStateFuture]
  -[MPCMediaRemoteMiddlewarePlaybackStateOperation invalidationHandler]


MPCAssetLoadingOperation : NSOperation
 @property  MPAVItem *item
 @property  <MPCAssetLoaderDelegate> *delegate
 @property  MPCPlayerItemConfigurator *configurator
 @property  long long token
 @property  @? completion
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  NSError *error

  // instance methods
  -[MPCAssetLoadingOperation completion]
  -[MPCAssetLoadingOperation isFinished]
  -[MPCAssetLoadingOperation main]
  -[MPCAssetLoadingOperation .cxx_destruct]
  -[MPCAssetLoadingOperation callbackQueue]
  -[MPCAssetLoadingOperation isExecuting]
  -[MPCAssetLoadingOperation setDelegate:]
  -[MPCAssetLoadingOperation item]
  -[MPCAssetLoadingOperation token]
  -[MPCAssetLoadingOperation delegate]
  -[MPCAssetLoadingOperation start]
  -[MPCAssetLoadingOperation configurator]
  -[MPCAssetLoadingOperation setConfigurator:]
  -[MPCAssetLoadingOperation setError:]
  -[MPCAssetLoadingOperation error]
  -[MPCAssetLoadingOperation _configureItem:error:]
  -[MPCAssetLoadingOperation initWithPlayerItem:configurator:delegate:token:callbackQueue:completion:]


MPCAssetLoader : NSObject <MFAssetLoading>
 @property  NSOperationQueue *loadingQueue
 @property  <MPCAssetLoaderDelegate> *delegate
 @property  MPCPlayerItemConfigurator *configurator

  // instance methods
  -[MPCAssetLoader cancelLoading]
  -[MPCAssetLoader .cxx_destruct]
  -[MPCAssetLoader setDelegate:]
  -[MPCAssetLoader initWithDelegate:]
  -[MPCAssetLoader delegate]
  -[MPCAssetLoader configurator]
  -[MPCAssetLoader setConfigurator:]
  -[MPCAssetLoader loadingQueue]
  -[MPCAssetLoader loadAssetFor:token:completion:]


MPNowPlayingContentItemRemoteArtworkToken : NSObject <MPArtworkDataSourceVisualIdenticality>
 @property  NSString *identifier
 @property  NSString *artworkIdentifier
 @property  MPExportableArtworkProperties *artworkProperties
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPNowPlayingContentItemRemoteArtworkToken artworkIdentifier]
  -[MPNowPlayingContentItemRemoteArtworkToken stringRepresentation]
  -[MPNowPlayingContentItemRemoteArtworkToken .cxx_destruct]
  -[MPNowPlayingContentItemRemoteArtworkToken isEqual:]
  -[MPNowPlayingContentItemRemoteArtworkToken identifier]
  -[MPNowPlayingContentItemRemoteArtworkToken copyWithZone:]
  -[MPNowPlayingContentItemRemoteArtworkToken artworkProperties]
  -[MPNowPlayingContentItemRemoteArtworkToken initWithIdentifier:artworkProperties:artworkIdentifier:]


MPCRemotePlayerArtworkDataSource : MPAbstractNetworkArtworkDataSource
  // class methods
  +[MPCRemotePlayerArtworkDataSource sharedDataSource]
  +[MPCRemotePlayerArtworkDataSource bestArtworkSizes]

  // instance methods
  -[MPCRemotePlayerArtworkDataSource cacheKeyForCatalog:size:]
  -[MPCRemotePlayerArtworkDataSource requestForCatalog:size:]
  -[MPCRemotePlayerArtworkDataSource getExportableArtworkPropertiesForCatalog:completionHandler:]
  -[MPCRemotePlayerArtworkDataSource areRepresentationsAvailableForCatalog:]
  -[MPCRemotePlayerArtworkDataSource supportedSizesForCatalog:]
  -[MPCRemotePlayerArtworkDataSource _urlForCatalog:size:]


MPCAssistantAvailability : NSObject
  // instance methods
  -[MPCAssistantAvailability assistantStreamingGetAvailability:]
  -[MPCAssistantAvailability assistantRadioGetAvailability:completion:]
  -[MPCAssistantAvailability assistantStreamingGetAvailability]
  -[MPCAssistantAvailability assistantRadioGetAvailability:]


MPCStoreFrontLocalEquivalencyMiddlewareOperation : MPAsyncOperation <MPCStoreFrontLocalEquivalencyMiddlewarePlayingItemProviding, MPMiddlewareAutomaticDependencyOperation>
 @property  MPModelGenericObject *overridePlayingItem
 @property  NSIndexPath *playingItemIndexPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPCStoreFrontLocalEquivalencyMiddleware *middleware
 @property  MPCPlayerRequest *playerRequest
 @property  NSArray *inputProtocols
 @property  NSArray *outputProtocols
 @property  NSMapTable *inputOperations
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation inputProtocols]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation overridePlayingItem]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation inputOperations]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation initWithMiddleware:playerRequest:]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation playerRequest]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation invalidationObservers]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation setMiddleware:]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation setInputOperations:]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation setPlayerRequest:]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation outputProtocols]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation playingItemIndexPath]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation .cxx_destruct]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation middleware]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation execute]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation setInvalidationHandler:]
  -[MPCStoreFrontLocalEquivalencyMiddlewareOperation invalidationHandler]


MPCPlayerChangeRequest : NSObject
 @property  NSArray *commands
 @property  unsigned long options

  // class methods
  +[MPCPlayerChangeRequest performRequest:completion:]
  +[MPCPlayerChangeRequest performRequest:options:extendedStatusCompletion:]
  +[MPCPlayerChangeRequest requestWithCommandRequests:]
  +[MPCPlayerChangeRequest performRequest:options:completion:]
  +[MPCPlayerChangeRequest performRequest:extendedStatusCompletion:]

  // instance methods
  -[MPCPlayerChangeRequest commands]
  -[MPCPlayerChangeRequest options]
  -[MPCPlayerChangeRequest setOptions:]
  -[MPCPlayerChangeRequest .cxx_destruct]
  -[MPCPlayerChangeRequest performWithCompletion:]
  -[MPCPlayerChangeRequest setCommands:]
  -[MPCPlayerChangeRequest performWithExtendedStatusCompletion:]
  -[MPCPlayerChangeRequest initWithCommandRequests:]


MPCPlayerCommandRequest : NSObject
 @property  NSString *originalLabel
 @property  unsigned int command
 @property  NSDictionary *options
 @property  NSDictionary *userInitiatedOptions
 @property  MPCMediaRemoteController *controller
 @property  MPCPlayerPath *playerPath
 @property  @? statusTransformer
 @property  NSString *label

  // class methods
  +[MPCPlayerCommandRequest initWithSiriUserActivity:]

  // instance methods
  -[MPCPlayerCommandRequest playerPath]
  -[MPCPlayerCommandRequest label]
  -[MPCPlayerCommandRequest controller]
  -[MPCPlayerCommandRequest options]
  -[MPCPlayerCommandRequest setUserInitiatedOptions:]
  -[MPCPlayerCommandRequest .cxx_destruct]
  -[MPCPlayerCommandRequest setCommandOptionValue:forKey:]
  -[MPCPlayerCommandRequest userInitiatedOptions]
  -[MPCPlayerCommandRequest command]
  -[MPCPlayerCommandRequest initWithMediaRemoteCommand:options:playerPath:label:]
  -[MPCPlayerCommandRequest setStatusTransformer:]
  -[MPCPlayerCommandRequest originalLabel]
  -[MPCPlayerCommandRequest statusTransformer]
  -[MPCPlayerCommandRequest setLabel:]
  -[MPCPlayerCommandRequest initWithMediaRemoteCommand:options:controller:label:]


MPCMediaRemoteCommandOperation : MPAsyncOperation
 @property  MPCPlayerCommandRequest *request
 @property  unsigned long options
 @property  NSDate *sendDate
 @property  MPCPlayerCommandStatus *status

  // instance methods
  -[MPCMediaRemoteCommandOperation sendDate]
  -[MPCMediaRemoteCommandOperation options]
  -[MPCMediaRemoteCommandOperation .cxx_destruct]
  -[MPCMediaRemoteCommandOperation execute]
  -[MPCMediaRemoteCommandOperation request]
  -[MPCMediaRemoteCommandOperation status]
  -[MPCMediaRemoteCommandOperation initWithCommandRequest:options:sendDate:]


MPCPlayerRequest : MPRequest <MPCMediaRemoteMiddlewareMetadataOperationConfiguration>
 @property  MPPropertySet *playingItemProperties
 @property  MPPropertySet *queueSectionProperties
 @property  MPPropertySet *queueItemProperties
 @property  BOOL disablePlaybackStateValidation
 @property  BOOL disablePlaybackRateValidation
 @property  NSString *preferredFallbackItemRelationship
 @property  MPCPlayerPath *playerPath
 @property  {?=qq} tracklistRange
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlayerRequest responseClass]

  // instance methods
  -[MPCPlayerRequest playerPath]
  -[MPCPlayerRequest middlewareClasses]
  -[MPCPlayerRequest setPlayerPath:]
  -[MPCPlayerRequest disablePlaybackStateValidation]
  -[MPCPlayerRequest .cxx_destruct]
  -[MPCPlayerRequest setTracklistRange:]
  -[MPCPlayerRequest setPlayingItemProperties:]
  -[MPCPlayerRequest queueSectionProperties]
  -[MPCPlayerRequest init]
  -[MPCPlayerRequest playingItemProperties]
  -[MPCPlayerRequest setQueueItemProperties:]
  -[MPCPlayerRequest queueItemProperties]
  -[MPCPlayerRequest _stateDumpObject]
  -[MPCPlayerRequest preferredFallbackItemRelationship]
  -[MPCPlayerRequest tracklistRange]
  -[MPCPlayerRequest setQueueSectionProperties:]
  -[MPCPlayerRequest setDisablePlaybackStateValidation:]
  -[MPCPlayerRequest setPreferredFallbackItemRelationship:]
  -[MPCPlayerRequest setDisablePlaybackRateValidation:]
  -[MPCPlayerRequest copyWithZone:]
  -[MPCPlayerRequest disablePlaybackRateValidation]


MPCPlayerResponse : MPResponse
 @property  <MPCPlayerResponseBuilder> *builder
 @property  MPCMediaRemoteController *controller
 @property  MPCPlayerPath *playerPath
 @property  UIView<MPCVideoView> *videoView
 @property  <MPCVideoOutput> *videoOutput
 @property  MPCPlayerResponseTracklist *tracklist
 @property  long long state
 @property  NSArray *participants
 @property  BOOL sharedListeningSession

  // class methods
  +[MPCPlayerResponse builderProtocol]

  // instance methods
  -[MPCPlayerResponse setVideoView:]
  -[MPCPlayerResponse participants]
  -[MPCPlayerResponse playerPath]
  -[MPCPlayerResponse isSharedListeningSession]
  -[MPCPlayerResponse play]
  -[MPCPlayerResponse tracklist]
  -[MPCPlayerResponse controller]
  -[MPCPlayerResponse setPlayerPath:]
  -[MPCPlayerResponse .cxx_destruct]
  -[MPCPlayerResponse setVideoOutput:]
  -[MPCPlayerResponse stop]
  -[MPCPlayerResponse initWithRequest:middleware:]
  -[MPCPlayerResponse _stateDumpObject]
  -[MPCPlayerResponse pause]
  -[MPCPlayerResponse state]
  -[MPCPlayerResponse _commandRequestForMediaRemoteCommand:]
  -[MPCPlayerResponse leaveSession]
  -[MPCPlayerResponse videoOutput]
  -[MPCPlayerResponse videoView]
  -[MPCPlayerResponse createSharedSessionWithIdentity:intentHandler:]
  -[MPCPlayerResponse createSharedSessionWithIntentHandler:]


_MPCPlayerCommand : NSObject
 @property  MPCPlayerResponse *response
 @property  MPCPlayerPath *playerPath

  // instance methods
  -[_MPCPlayerCommand playerPath]
  -[_MPCPlayerCommand initWithPlayerPath:]
  -[_MPCPlayerCommand .cxx_destruct]
  -[_MPCPlayerCommand initWithResponse:]
  -[_MPCPlayerCommand response]


MPCModelRadioPlaybackContext : MPPlaybackContext <MPCPlaybackContextUserIdentityConsuming, MPCPlaybackContextPrivateListeningOverridable, MPCModelPlaybackRequestEnvironmentConsuming>
 @property  MPCPlaybackRequestEnvironment *playbackRequestEnvironment
 @property  BOOL continueListeningStation
 @property  <MPCContinueListeningRadioQueueProviding> *continueListeningQueueProvider
 @property  long long continueListeningMaxQueueReferences
 @property  long long continueListeningPrefetchThreshold
 @property  MPCModelRadioContentReference *nowPlayingContentReference
 @property  MPCModelRadioContentReference *seedContentReference
 @property  MPModelRadioStation *radioStation
 @property  NSURL *stationURL
 @property  NSString *stationPlaybackAuthorizationToken
 @property  ICUserIdentity *userIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSNumber *privateListeningOverride

  // class methods
  +[MPCModelRadioPlaybackContext supportsSecureCoding]
  +[MPCModelRadioPlaybackContext queueFeederClass]

  // instance methods
  -[MPCModelRadioPlaybackContext userIdentity]
  -[MPCModelRadioPlaybackContext initWithCoder:]
  -[MPCModelRadioPlaybackContext setPlaybackRequestEnvironment:]
  -[MPCModelRadioPlaybackContext setUserIdentity:]
  -[MPCModelRadioPlaybackContext descriptionComponents]
  -[MPCModelRadioPlaybackContext .cxx_destruct]
  -[MPCModelRadioPlaybackContext radioStation]
  -[MPCModelRadioPlaybackContext setRadioStation:]
  -[MPCModelRadioPlaybackContext init]
  -[MPCModelRadioPlaybackContext playbackRequestEnvironment]
  -[MPCModelRadioPlaybackContext setStationURL:]
  -[MPCModelRadioPlaybackContext copyWithZone:]
  -[MPCModelRadioPlaybackContext stationURL]
  -[MPCModelRadioPlaybackContext shuffleType]
  -[MPCModelRadioPlaybackContext repeatType]
  -[MPCModelRadioPlaybackContext encodeWithCoder:]
  -[MPCModelRadioPlaybackContext privateListeningOverride]
  -[MPCModelRadioPlaybackContext queueEndAction]
  -[MPCModelRadioPlaybackContext seedContentReference]
  -[MPCModelRadioPlaybackContext nowPlayingContentReference]
  -[MPCModelRadioPlaybackContext stationPlaybackAuthorizationToken]
  -[MPCModelRadioPlaybackContext setStationPlaybackAuthorizationToken:]
  -[MPCModelRadioPlaybackContext setSeedContentReference:]
  -[MPCModelRadioPlaybackContext setNowPlayingContentReference:]
  -[MPCModelRadioPlaybackContext getSharedListeningTracklistWithCompletion:]
  -[MPCModelRadioPlaybackContext setPrivateListeningOverride:]
  -[MPCModelRadioPlaybackContext getRemotePlaybackQueueRepresentationWithCompletion:]
  -[MPCModelRadioPlaybackContext setContinueListeningStation:]
  -[MPCModelRadioPlaybackContext continueListeningStation]
  -[MPCModelRadioPlaybackContext continueListeningMaxQueueReferences]
  -[MPCModelRadioPlaybackContext setContinueListeningMaxQueueReferences:]
  -[MPCModelRadioPlaybackContext continueListeningPrefetchThreshold]
  -[MPCModelRadioPlaybackContext setContinueListeningPrefetchThreshold:]
  -[MPCModelRadioPlaybackContext continueListeningQueueProvider]
  -[MPCModelRadioPlaybackContext setContinueListeningQueueProvider:]


MPCRTCEventConsumer : NSObject <MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  RTCReporting *playbackSessionRTCSession
 @property  RTCReporting *playbackQueueRTCSession
 @property  RTCReporting *playbackItemRTCSession
 @property  <MPCRTCEventConsumerTestingDelegate> *testingDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCRTCEventConsumer dateFormatter]
  +[MPCRTCEventConsumer NSStringFromMPCRTCReportingEventCategory:]
  +[MPCRTCEventConsumer identifierStringFromItemIdentifiers:radioIdentifiers:]
  +[MPCRTCEventConsumer identifier]
  +[MPCRTCEventConsumer rtcIdentifiersFromRadioIdentifiers:]
  +[MPCRTCEventConsumer rtcIdentifiersFromUniversalIdentifiers:]

  // instance methods
  -[MPCRTCEventConsumer subscription]
  -[MPCRTCEventConsumer unsubscribeFromEventStream:]
  -[MPCRTCEventConsumer testingDelegate]
  -[MPCRTCEventConsumer .cxx_destruct]
  -[MPCRTCEventConsumer init]
  -[MPCRTCEventConsumer setTestingDelegate:]
  -[MPCRTCEventConsumer subscribeToEventStream:]
  -[MPCRTCEventConsumer _sendReportForSessionSummary:event:withType:]
  -[MPCRTCEventConsumer _sendReportForItemSummaryWithEndReason:cursor:event:]
  -[MPCRTCEventConsumer _sendReportForSessionStart:event:withType:]
  -[MPCRTCEventConsumer _handleReportingForItemStartEvent:event:]
  -[MPCRTCEventConsumer _sendReportForItemSummary:event:]
  -[MPCRTCEventConsumer _sendSessionStartIfNeeded:forItemEvent:]
  -[MPCRTCEventConsumer _sendQueueLoadEventIfNeeded:forItemEvent:]
  -[MPCRTCEventConsumer _sendReportForItemAssetLoad:event:]
  -[MPCRTCEventConsumer _payloadForSessionSummary:fromEvent:]
  -[MPCRTCEventConsumer playbackSessionRTCSession]
  -[MPCRTCEventConsumer _sendReportWithSession:category:type:payload:]
  -[MPCRTCEventConsumer _payloadForSessionStart:fromEvent:]
  -[MPCRTCEventConsumer setPlaybackSessionRTCSession:]
  -[MPCRTCEventConsumer _generateConfiguredReportingSessionWithToken:serviceName:completion:]
  -[MPCRTCEventConsumer _payloadForQueueLoad:fromQueueLoadEndEvent:]
  -[MPCRTCEventConsumer setPlaybackQueueRTCSession:]
  -[MPCRTCEventConsumer _payloadForItemAssetLoad:fromItemEvent:]
  -[MPCRTCEventConsumer setPlaybackItemRTCSession:]
  -[MPCRTCEventConsumer _payloadForItemSummary:fromEvent:]
  -[MPCRTCEventConsumer playbackItemRTCSession]
  -[MPCRTCEventConsumer _accountSnapshotWithCursor:]
  -[MPCRTCEventConsumer _perceivedItemStartTime:fromItemStartEvent:]
  -[MPCRTCEventConsumer _updateAssetLoadInfoEvent:fromAssetLoadEndEvent:cursor:]
  -[MPCRTCEventConsumer _payloadForItemSummary:fromItemEvent:]
  -[MPCRTCEventConsumer _rtcSessionInfoWithToken:]
  -[MPCRTCEventConsumer _rtcUserInfoWithServiceName:]
  -[MPCRTCEventConsumer playbackQueueRTCSession]


MPCAnalyticsSignpost : NSObject
 @property  unsigned long identifier
 @property  MSVBlockGuard *guard

  // class methods
  +[MPCAnalyticsSignpost endWithIdentifier:error:]
  +[MPCAnalyticsSignpost beginWithIdentifier:]
  +[MPCAnalyticsSignpost endWithIdentifier:item:]

  // instance methods
  -[MPCAnalyticsSignpost begin]
  -[MPCAnalyticsSignpost guard]
  -[MPCAnalyticsSignpost initWithIdentifier:]
  -[MPCAnalyticsSignpost .cxx_destruct]
  -[MPCAnalyticsSignpost end]
  -[MPCAnalyticsSignpost initWithIdentifier:timeout:]
  -[MPCAnalyticsSignpost identifier]
  -[MPCAnalyticsSignpost setIdentifier:]
  -[MPCAnalyticsSignpost setGuard:]
  -[MPCAnalyticsSignpost endWithError:]
  -[MPCAnalyticsSignpost endWithItem:]


MPCWaitForLikelyToKeepUp : MPCAnalyticsSignpost
  // class methods
  +[MPCWaitForLikelyToKeepUp endWithIdentifier:error:]
  +[MPCWaitForLikelyToKeepUp beginWithIdentifier:]
  +[MPCWaitForLikelyToKeepUp endWithIdentifier:item:]


MPCWaitForReadyToPlaySignpost : MPCAnalyticsSignpost
  // class methods
  +[MPCWaitForReadyToPlaySignpost endWithIdentifier:error:]
  +[MPCWaitForReadyToPlaySignpost beginWithIdentifier:]
  +[MPCWaitForReadyToPlaySignpost endWithIdentifier:item:]


MPCPlayToSetRateSignpost : MPCAnalyticsSignpost
  // class methods
  +[MPCPlayToSetRateSignpost endWithIdentifier:error:]
  +[MPCPlayToSetRateSignpost beginWithIdentifier:]
  +[MPCPlayToSetRateSignpost endWithIdentifier:item:]


MPCSetRateToEffectiveRateSignpost : MPCAnalyticsSignpost
  // class methods
  +[MPCSetRateToEffectiveRateSignpost endWithIdentifier:error:]
  +[MPCSetRateToEffectiveRateSignpost beginWithIdentifier:]
  +[MPCSetRateToEffectiveRateSignpost endWithIdentifier:item:]


MPCScene : NSObject
 @property  long long startFrame
 @property  long long endFrame
 @property  long long iterations

  // instance methods
  -[MPCScene setIterations:]
  -[MPCScene startFrame]
  -[MPCScene init]
  -[MPCScene setEndFrame:]
  -[MPCScene endFrame]
  -[MPCScene setStartFrame:]
  -[MPCScene iterations]


MPCSceneCollection : NSObject
 @property  NSString *version
 @property  double frameRate
 @property  NSArray *scenes

  // instance methods
  -[MPCSceneCollection .cxx_destruct]
  -[MPCSceneCollection setFrameRate:]
  -[MPCSceneCollection setVersion:]
  -[MPCSceneCollection scenes]
  -[MPCSceneCollection frameRate]
  -[MPCSceneCollection version]
  -[MPCSceneCollection setScenes:]


MPCScriptedLooper : NSObject
 @property  long long status
 @property  NSError *error
 @property  @? pauseFinishedBlock
 @property  MPCSceneCollection *sceneCollection
 @property  id timeObserver
 @property  MPNotificationObserver *itemDidPlayToEndObserver
 @property  long long currentSceneIndex
 @property  long long currentLoopCount
 @property  BOOL executingPauseScene
 @property  BOOL sceneExecutionPaused
 @property  AVPlayer *player

  // class methods
  +[MPCScriptedLooper setScriptedLoopingDisabled:]
  +[MPCScriptedLooper isScriptedLoopingDisabled]

  // instance methods
  -[MPCScriptedLooper initWithAsset:]
  -[MPCScriptedLooper _updateRateIfNeeded]
  -[MPCScriptedLooper setItemDidPlayToEndObserver:]
  -[MPCScriptedLooper sceneCollection]
  -[MPCScriptedLooper _executeCurrentScene]
  -[MPCScriptedLooper currentLoopCount]
  -[MPCScriptedLooper _pause]
  -[MPCScriptedLooper isSceneExecutionPaused]
  -[MPCScriptedLooper _loopIfNeeded]
  -[MPCScriptedLooper .cxx_destruct]
  -[MPCScriptedLooper timeObserver]
  -[MPCScriptedLooper initWithAsset:sceneCollection:]
  -[MPCScriptedLooper initWithURL:sceneCollection:]
  -[MPCScriptedLooper frameForCMTime:]
  -[MPCScriptedLooper pauseFinishedBlock]
  -[MPCScriptedLooper setTimeObserver:]
  -[MPCScriptedLooper seekToFrameIfNeeded:completionHandler:]
  -[MPCScriptedLooper setSceneExecutionPaused:]
  -[MPCScriptedLooper _executeSceneCollection]
  -[MPCScriptedLooper _sharedInitWithItem:]
  -[MPCScriptedLooper player]
  -[MPCScriptedLooper setCurrentSceneIndex:]
  -[MPCScriptedLooper currentScene]
  -[MPCScriptedLooper itemDidPlayToEndObserver]
  -[MPCScriptedLooper setSceneCollection:]
  -[MPCScriptedLooper status]
  -[MPCScriptedLooper setExecutingPauseScene:]
  -[MPCScriptedLooper setPauseFinishedBlock:]
  -[MPCScriptedLooper setStatus:]
  -[MPCScriptedLooper _CMTimeForFrame:]
  -[MPCScriptedLooper dealloc]
  -[MPCScriptedLooper playScenes]
  -[MPCScriptedLooper restartScenes]
  -[MPCScriptedLooper pauseScenes]
  -[MPCScriptedLooper isExecutingPauseScene]
  -[MPCScriptedLooper _advanceScene]
  -[MPCScriptedLooper setError:]
  -[MPCScriptedLooper setCurrentLoopCount:]
  -[MPCScriptedLooper observeValueForKeyPath:ofObject:change:context:]
  -[MPCScriptedLooper _createSceneCollectionForAssetWithPreloadedKeys:]
  -[MPCScriptedLooper error]
  -[MPCScriptedLooper currentSceneIndex]


MPCModelStorePlaybackItemsRequest : MPModelRequest <MPCModelPlaybackRequest, MPCModelPlaybackRequestEnvironmentConsuming, MPModelRequestDetailedKeepLocalStatusRequesting, MPCModelRequestRTCReporting, MPCModelStorePreviousRequestStoring>
 @property  NSArray *playbackPrioritizedIndexPaths
 @property  ICSharedListeningQueue *sharedListeningQueue
 @property  MPModelResponse *previousResponse
 @property  BOOL shouldBatchResultsWithPlaceholderObjects
 @property  BOOL wantsDetailedKeepLocalRequestableResponse
 @property  BOOL allowLocalEquivalencies
 @property  NSString *clientIdentifier
 @property  MPSectionedCollection *sectionedModelObjects
 @property  NSArray *storeIDs
 @property  NSDictionary *storeIDsToPlaybackAuthorizationTokensMap
 @property  <MPServerObjectDatabasePlaybackAuthorizationTokenTrustProvider> *trustID
 @property  BOOL disableImplicitSectioning
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPCPlaybackRequestEnvironment *playbackRequestEnvironment
 @property  NSString *rtcReportingPlayQueueSourceIdentifier

  // class methods
  +[MPCModelStorePlaybackItemsRequest requiresNetwork]
  +[MPCModelStorePlaybackItemsRequest supportsSecureCoding]
  +[MPCModelStorePlaybackItemsRequest MPC_consumeSiriAssetInfo:userIdentity:completion:]

  // instance methods
  -[MPCModelStorePlaybackItemsRequest trustID]
  -[MPCModelStorePlaybackItemsRequest storeIDs]
  -[MPCModelStorePlaybackItemsRequest newOperationWithResponseHandler:]
  -[MPCModelStorePlaybackItemsRequest initWithCoder:]
  -[MPCModelStorePlaybackItemsRequest setPlaybackRequestEnvironment:]
  -[MPCModelStorePlaybackItemsRequest wantsDetailedKeepLocalRequestableResponse]
  -[MPCModelStorePlaybackItemsRequest setShouldBatchResultsWithPlaceholderObjects:]
  -[MPCModelStorePlaybackItemsRequest setPreviousResponse:]
  -[MPCModelStorePlaybackItemsRequest .cxx_destruct]
  -[MPCModelStorePlaybackItemsRequest setAllowLocalEquivalencies:]
  -[MPCModelStorePlaybackItemsRequest setSectionedModelObjects:]
  -[MPCModelStorePlaybackItemsRequest setSharedListeningQueue:]
  -[MPCModelStorePlaybackItemsRequest init]
  -[MPCModelStorePlaybackItemsRequest playbackPrioritizedIndexPaths]
  -[MPCModelStorePlaybackItemsRequest setWantsDetailedKeepLocalRequestableResponse:]
  -[MPCModelStorePlaybackItemsRequest clientIdentifier]
  -[MPCModelStorePlaybackItemsRequest previousResponse]
  -[MPCModelStorePlaybackItemsRequest storeIDsToPlaybackAuthorizationTokensMap]
  -[MPCModelStorePlaybackItemsRequest rtcReportingPlayQueueSourceIdentifier]
  -[MPCModelStorePlaybackItemsRequest playbackRequestEnvironment]
  -[MPCModelStorePlaybackItemsRequest shouldBatchResultsWithPlaceholderObjects]
  -[MPCModelStorePlaybackItemsRequest setTrustID:]
  -[MPCModelStorePlaybackItemsRequest setStoreIDs:]
  -[MPCModelStorePlaybackItemsRequest copyWithZone:]
  -[MPCModelStorePlaybackItemsRequest setStoreIDsToPlaybackAuthorizationTokensMap:]
  -[MPCModelStorePlaybackItemsRequest allowLocalEquivalencies]
  -[MPCModelStorePlaybackItemsRequest sectionedModelObjects]
  -[MPCModelStorePlaybackItemsRequest encodeWithCoder:]
  -[MPCModelStorePlaybackItemsRequest sharedListeningQueue]
  -[MPCModelStorePlaybackItemsRequest setPlaybackPrioritizedIndexPaths:]
  -[MPCModelStorePlaybackItemsRequest setClientIdentifier:]


MPCPlaybackEngineMiddleware : NSObject <MPCPlayerResponseBuilder, MPMiddleware>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPCPlaybackEngine *playbackEngine
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *invalidationObservers

  // instance methods
  -[MPCPlaybackEngineMiddleware playbackEngine]
  -[MPCPlaybackEngineMiddleware invalidationObservers]
  -[MPCPlaybackEngineMiddleware .cxx_destruct]
  -[MPCPlaybackEngineMiddleware playerVideoView:chain:]
  -[MPCPlaybackEngineMiddleware operationsForPlayerRequest:]
  -[MPCPlaybackEngineMiddleware _stateDumpObject]
  -[MPCPlaybackEngineMiddleware videoOutput:chain:]
  -[MPCPlaybackEngineMiddleware operationsForRequest:]
  -[MPCPlaybackEngineMiddleware setPlaybackEngine:]
  -[MPCPlaybackEngineMiddleware setInvalidationObservers:]


MPCPlayerCommandDialogAction : NSObject
 @property  NSString *localizedTitle
 @property  long long type

  // instance methods
  -[MPCPlayerCommandDialogAction localizedTitle]
  -[MPCPlayerCommandDialogAction .cxx_destruct]
  -[MPCPlayerCommandDialogAction type]
  -[MPCPlayerCommandDialogAction commandRequest]
  -[MPCPlayerCommandDialogAction initWithMPAction:request:]


MPCPlayerCommandDialog : NSObject
 @property  NSString *localizedTitle
 @property  NSString *localizedMessage
 @property  NSArray *actions

  // instance methods
  -[MPCPlayerCommandDialog localizedTitle]
  -[MPCPlayerCommandDialog .cxx_destruct]
  -[MPCPlayerCommandDialog actions]
  -[MPCPlayerCommandDialog localizedMessage]
  -[MPCPlayerCommandDialog initWithMPDialog:request:]


MPCPlayerCommandStatus : NSObject
 @property  MPRemoteCommandStatus *status
 @property  MPCPlayerCommandRequest *request
 @property  long long type
 @property  long long statusCode
 @property  NSError *error
 @property  MPCPlayerCommandDialog *dialog
 @property  NSData *customData
 @property  NSString *customDataType

  // instance methods
  -[MPCPlayerCommandStatus dialog]
  -[MPCPlayerCommandStatus .cxx_destruct]
  -[MPCPlayerCommandStatus customData]
  -[MPCPlayerCommandStatus customDataType]
  -[MPCPlayerCommandStatus request]
  -[MPCPlayerCommandStatus status]
  -[MPCPlayerCommandStatus type]
  -[MPCPlayerCommandStatus statusCode]
  -[MPCPlayerCommandStatus error]
  -[MPCPlayerCommandStatus initWithMPStatus:request:]


MPCPlayPerfConsumer : NSObject <MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlayPerfConsumer identifier]
  +[MPCPlayPerfConsumer handleMetrics:]
  +[MPCPlayPerfConsumer sendMetrics:]
  +[MPCPlayPerfConsumer coreAnalyticsEventNameWithEventType:]

  // instance methods
  -[MPCPlayPerfConsumer subscription]
  -[MPCPlayPerfConsumer unsubscribeFromEventStream:]
  -[MPCPlayPerfConsumer .cxx_destruct]
  -[MPCPlayPerfConsumer subscribeToEventStream:]
  -[MPCPlayPerfConsumer setupErrorHandlerForEventType:errorKey:prefix:]


MPCModelStorePlaybackItemsResponse : MPModelResponse <MPModelStoreEquivalencyMapping, MPModelResponseDetailedKeepLocalStatusRequesting, MPCModelPlaybackResponse>
 @property  BOOL invalidForPersonalization
 @property  NSDictionary *localStoreAdamIDToEquivalencySourceStoreAdamIDMap
 @property  MPStoreLibraryPersonalizationResponse *_personalizationResponse
 @property  BOOL finalResponse
 @property  NSDate *invalidationDate
 @property  double networkingTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCModelStorePlaybackItemsResponse .cxx_destruct]
  -[MPCModelStorePlaybackItemsResponse newOperationForDetailedKeepLocalStatusConfigurationForSectionAtIndex:responseHandler:]
  -[MPCModelStorePlaybackItemsResponse _activeUserDidChangeNotification:]
  -[MPCModelStorePlaybackItemsResponse isFinalResponse]
  -[MPCModelStorePlaybackItemsResponse _invalidate]
  -[MPCModelStorePlaybackItemsResponse _allowsExplicitContentDidChangeNotification:]
  -[MPCModelStorePlaybackItemsResponse setFinalResponse:]
  -[MPCModelStorePlaybackItemsResponse dealloc]
  -[MPCModelStorePlaybackItemsResponse invalidationDate]
  -[MPCModelStorePlaybackItemsResponse setInvalidationDate:]
  -[MPCModelStorePlaybackItemsResponse _personalizationResponseDidInvalidateNotification:]
  -[MPCModelStorePlaybackItemsResponse _personalizationResponse]
  -[MPCModelStorePlaybackItemsResponse equivalencySourceStoreAdamIDForLocalStoreAdamID:]
  -[MPCModelStorePlaybackItemsResponse initWithRequest:personalizationResponse:networkingTime:]
  -[MPCModelStorePlaybackItemsResponse isInvalidForPersonalization]
  -[MPCModelStorePlaybackItemsResponse localStoreAdamIDToEquivalencySourceStoreAdamIDMap]
  -[MPCModelStorePlaybackItemsResponse setLocalStoreAdamIDToEquivalencySourceStoreAdamIDMap:]
  -[MPCModelStorePlaybackItemsResponse networkingTime]
  -[MPCModelStorePlaybackItemsResponse setNetworkingTime:]


MPCModelGenericAVItemAssetLoadProperties : NSObject
 @property  BOOL allowsHLSContent
 @property  NSString *assetSourceStorefrontID
 @property  BOOL prefersVideoContent
 @property  <MPCModelPlaybackAssetCacheProviding> *assetCacheProvider
 @property  MPModelFileAsset *fileAsset
 @property  MPModelGenericObject *genericObject
 @property  MPModelHomeSharingAsset *homeSharingAsset
 @property  MPIdentifierSet *itemIdentifiers
 @property  BOOL prefersHighQualityContent
 @property  BOOL radioPlayback
 @property  MPModelStoreAsset *storeAsset
 @property  BOOL followUp
 @property  unsigned long accountID
 @property  unsigned long delegatedAccountID
 @property  NSString *householdID
 @property  NSString *storefrontID
 @property  NSString *playbackAuthorizationToken
 @property  long long preferredAudioAssetType
 @property  MPCAudioAssetTypeSelection *audioAssetTypeSelection

  // instance methods
  -[MPCModelGenericAVItemAssetLoadProperties itemIdentifiers]
  -[MPCModelGenericAVItemAssetLoadProperties accountID]
  -[MPCModelGenericAVItemAssetLoadProperties storefrontID]
  -[MPCModelGenericAVItemAssetLoadProperties .cxx_destruct]
  -[MPCModelGenericAVItemAssetLoadProperties delegatedAccountID]
  -[MPCModelGenericAVItemAssetLoadProperties setDelegatedAccountID:]
  -[MPCModelGenericAVItemAssetLoadProperties setAccountID:]
  -[MPCModelGenericAVItemAssetLoadProperties setHouseholdID:]
  -[MPCModelGenericAVItemAssetLoadProperties setItemIdentifiers:]
  -[MPCModelGenericAVItemAssetLoadProperties storeAsset]
  -[MPCModelGenericAVItemAssetLoadProperties setStoreAsset:]
  -[MPCModelGenericAVItemAssetLoadProperties setHomeSharingAsset:]
  -[MPCModelGenericAVItemAssetLoadProperties setStorefrontID:]
  -[MPCModelGenericAVItemAssetLoadProperties playbackAuthorizationToken]
  -[MPCModelGenericAVItemAssetLoadProperties householdID]
  -[MPCModelGenericAVItemAssetLoadProperties fileAsset]
  -[MPCModelGenericAVItemAssetLoadProperties homeSharingAsset]
  -[MPCModelGenericAVItemAssetLoadProperties setFileAsset:]
  -[MPCModelGenericAVItemAssetLoadProperties setPlaybackAuthorizationToken:]
  -[MPCModelGenericAVItemAssetLoadProperties setAssetSourceStorefrontID:]
  -[MPCModelGenericAVItemAssetLoadProperties assetSourceStorefrontID]
  -[MPCModelGenericAVItemAssetLoadProperties isFollowUp]
  -[MPCModelGenericAVItemAssetLoadProperties setFollowUp:]
  -[MPCModelGenericAVItemAssetLoadProperties isRadioPlayback]
  -[MPCModelGenericAVItemAssetLoadProperties setPreferredAudioAssetType:]
  -[MPCModelGenericAVItemAssetLoadProperties setAudioAssetTypeSelection:]
  -[MPCModelGenericAVItemAssetLoadProperties setAllowsHLSContent:]
  -[MPCModelGenericAVItemAssetLoadProperties setPrefersVideoContent:]
  -[MPCModelGenericAVItemAssetLoadProperties setAssetCacheProvider:]
  -[MPCModelGenericAVItemAssetLoadProperties setGenericObject:]
  -[MPCModelGenericAVItemAssetLoadProperties setPrefersHighQualityContent:]
  -[MPCModelGenericAVItemAssetLoadProperties setRadioPlayback:]
  -[MPCModelGenericAVItemAssetLoadProperties prefersVideoContent]
  -[MPCModelGenericAVItemAssetLoadProperties preferredAudioAssetType]
  -[MPCModelGenericAVItemAssetLoadProperties assetCacheProvider]
  -[MPCModelGenericAVItemAssetLoadProperties genericObject]
  -[MPCModelGenericAVItemAssetLoadProperties audioAssetTypeSelection]
  -[MPCModelGenericAVItemAssetLoadProperties prefersHighQualityContent]
  -[MPCModelGenericAVItemAssetLoadProperties allowsHLSContent]


MPCMediaRemoteMiddlewareControllerOperation : MPAsyncOperation <MPCMediaRemoteMiddlewareControllerProviding, MPMiddlewareAutomaticDependencyOperation>
 @property  MPCFuture *controllerFuture
 @property  MPCMediaRemoteController *controller
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPCMediaRemoteMiddleware *middleware
 @property  MPCPlayerPath *playerPath
 @property  MPCFuture *controllerFuture
 @property  NSArray *inputProtocols
 @property  NSArray *outputProtocols
 @property  NSMapTable *inputOperations
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCMediaRemoteMiddlewareControllerOperation inputProtocols]
  -[MPCMediaRemoteMiddlewareControllerOperation playerPath]
  -[MPCMediaRemoteMiddlewareControllerOperation inputOperations]
  -[MPCMediaRemoteMiddlewareControllerOperation invalidationObservers]
  -[MPCMediaRemoteMiddlewareControllerOperation setMiddleware:]
  -[MPCMediaRemoteMiddlewareControllerOperation setInputOperations:]
  -[MPCMediaRemoteMiddlewareControllerOperation controller]
  -[MPCMediaRemoteMiddlewareControllerOperation outputProtocols]
  -[MPCMediaRemoteMiddlewareControllerOperation setPlayerPath:]
  -[MPCMediaRemoteMiddlewareControllerOperation .cxx_destruct]
  -[MPCMediaRemoteMiddlewareControllerOperation middleware]
  -[MPCMediaRemoteMiddlewareControllerOperation controllerFuture]
  -[MPCMediaRemoteMiddlewareControllerOperation execute]
  -[MPCMediaRemoteMiddlewareControllerOperation timeoutDescription]
  -[MPCMediaRemoteMiddlewareControllerOperation setInvalidationHandler:]
  -[MPCMediaRemoteMiddlewareControllerOperation invalidationHandler]
  -[MPCMediaRemoteMiddlewareControllerOperation setControllerFuture:]
  -[MPCMediaRemoteMiddlewareControllerOperation initWithMiddleware:playerPath:]


MPCPlaybackEngineEvent : NSObject
 @property  {?=QQQQd} monotonicTime
 @property  unsigned long machAbsoluteTime
 @property  unsigned long monotonicTimeNanoSeconds
 @property  NSUUID *identifier
 @property  NSString *type
 @property  NSDictionary *payload
 @property  NSDate *date
 @property  NSDate *monotonicDate

  // instance methods
  -[MPCPlaybackEngineEvent payload]
  -[MPCPlaybackEngineEvent monotonicDate]
  -[MPCPlaybackEngineEvent .cxx_destruct]
  -[MPCPlaybackEngineEvent initWithType:payload:monotonicTime:identifier:]
  -[MPCPlaybackEngineEvent isEqual:]
  -[MPCPlaybackEngineEvent identifier]
  -[MPCPlaybackEngineEvent monotonicTimeNanoSeconds]
  -[MPCPlaybackEngineEvent monotonicTime]
  -[MPCPlaybackEngineEvent previousItemEventWithCursor:type:]
  -[MPCPlaybackEngineEvent type]
  -[MPCPlaybackEngineEvent durationSinceEvent:]
  -[MPCPlaybackEngineEvent machAbsoluteTime]
  -[MPCPlaybackEngineEvent date]


MPCAutoBugCaptureEventConsumer : NSObject <MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCAutoBugCaptureEventConsumer identifier]

  // instance methods
  -[MPCAutoBugCaptureEventConsumer subscription]
  -[MPCAutoBugCaptureEventConsumer unsubscribeFromEventStream:]
  -[MPCAutoBugCaptureEventConsumer .cxx_destruct]
  -[MPCAutoBugCaptureEventConsumer subscribeToEventStream:]


MPCMediaRemoteMiddlewareCommandsOperation : MPAsyncOperation <MPMiddlewareOperation>
 @property  MPCMediaRemoteMiddleware *middleware
 @property  MPCFuture *supportedCommandsFuture
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCMediaRemoteMiddlewareCommandsOperation invalidationObservers]
  -[MPCMediaRemoteMiddlewareCommandsOperation setMiddleware:]
  -[MPCMediaRemoteMiddlewareCommandsOperation .cxx_destruct]
  -[MPCMediaRemoteMiddlewareCommandsOperation middleware]
  -[MPCMediaRemoteMiddlewareCommandsOperation execute]
  -[MPCMediaRemoteMiddlewareCommandsOperation timeoutDescription]
  -[MPCMediaRemoteMiddlewareCommandsOperation setInvalidationHandler:]
  -[MPCMediaRemoteMiddlewareCommandsOperation initWithMiddleware:]
  -[MPCMediaRemoteMiddlewareCommandsOperation supportedCommandsFuture]
  -[MPCMediaRemoteMiddlewareCommandsOperation setSupportedCommandsFuture:]
  -[MPCMediaRemoteMiddlewareCommandsOperation invalidationHandler]


MPCMediaRemoteMiddleware : NSObject <MPCResponseMediaRemoteControllerChaining, MPCPlayerResponseBuilder, MPCPlayerSessionResponseBuilder, MPMiddleware>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL skippedMetadata
 @property  MPCFuture *controllerFuture
 @property  MPCMediaRemoteController *controller
 @property  MPSectionedCollection *queueContentItems
 @property  MPSectionedCollection *queueModelObjects
 @property  <MPCSupportedCommands> *supportedCommands
 @property  NSIndexPath *playingIndexPath
 @property  NSString *queueIdentifier
 @property  long long playerState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *invalidationObservers

  // instance methods
  -[MPCMediaRemoteMiddleware setSupportedCommands:]
  -[MPCMediaRemoteMiddleware setController:]
  -[MPCMediaRemoteMiddleware setQueueIdentifier:]
  -[MPCMediaRemoteMiddleware queueIdentifier]
  -[MPCMediaRemoteMiddleware supportedCommands]
  -[MPCMediaRemoteMiddleware playerState:chain:]
  -[MPCMediaRemoteMiddleware invalidationObservers]
  -[MPCMediaRemoteMiddleware controller]
  -[MPCMediaRemoteMiddleware sectionIsAutoPlaySection:atIndex:chain:]
  -[MPCMediaRemoteMiddleware playerUpNextItemCount:chain:]
  -[MPCMediaRemoteMiddleware audioRoute:chain:]
  -[MPCMediaRemoteMiddleware playerItemIsPlaceholder:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware .cxx_destruct]
  -[MPCMediaRemoteMiddleware sessionMetadataObject:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware controllerFuture]
  -[MPCMediaRemoteMiddleware playerCommandSupported:command:chain:]
  -[MPCMediaRemoteMiddleware skippedMetadata]
  -[MPCMediaRemoteMiddleware operationsForSessionRequest:]
  -[MPCMediaRemoteMiddleware playerCommandOptionValue:forKey:command:chain:]
  -[MPCMediaRemoteMiddleware playerItemExplicitBadge:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware playerIsSharedListeningSession:chain:]
  -[MPCMediaRemoteMiddleware playerPlayingItemGlobalIndex:chain:]
  -[MPCMediaRemoteMiddleware playerItemCurrentLanguageOptions:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware queueModelObjects]
  -[MPCMediaRemoteMiddleware playerRepeatType:chain:]
  -[MPCMediaRemoteMiddleware activeAudioFormat:chain:]
  -[MPCMediaRemoteMiddleware setPlayingIndexPath:]
  -[MPCMediaRemoteMiddleware operationsForPlayerRequest:]
  -[MPCMediaRemoteMiddleware _stateDumpObject]
  -[MPCMediaRemoteMiddleware playerExplicitContentState:chain:]
  -[MPCMediaRemoteMiddleware sessionPlayerPath:atIndex:chain:]
  -[MPCMediaRemoteMiddleware playerGlobalItemCount:chain:]
  -[MPCMediaRemoteMiddleware preferredAudioFormat:chain:]
  -[MPCMediaRemoteMiddleware alternateAudioFormats:chain:]
  -[MPCMediaRemoteMiddleware playerState]
  -[MPCMediaRemoteMiddleware playerModelObject:propertySet:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware playerItemLocalizedDurationString:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware activeAudioFormatJustification:chain:]
  -[MPCMediaRemoteMiddleware playerShuffleType:chain:]
  -[MPCMediaRemoteMiddleware setQueueModelObjects:]
  -[MPCMediaRemoteMiddleware playerCommandEnabled:command:chain:]
  -[MPCMediaRemoteMiddleware controller:chain:]
  -[MPCMediaRemoteMiddleware playerItemDuration:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware operationsForRequest:]
  -[MPCMediaRemoteMiddleware playerItemEditingStyleFlags:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware playerItemLanguageOptionGroups:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware playingIndexPath]
  -[MPCMediaRemoteMiddleware queueContentItems]
  -[MPCMediaRemoteMiddleware tracklistUniqueIdentifier:chain:]
  -[MPCMediaRemoteMiddleware playerNumberOfItems:inSection:chain:]
  -[MPCMediaRemoteMiddleware setQueueContentItems:]
  -[MPCMediaRemoteMiddleware sessionNumberOfPlayerPaths:chain:]
  -[MPCMediaRemoteMiddleware playerLastChangeDirection:chain:]
  -[MPCMediaRemoteMiddleware setPlayerState:]
  -[MPCMediaRemoteMiddleware playerQueueEndAction:chain:]
  -[MPCMediaRemoteMiddleware _supportedCommands:infoValueForKey:]
  -[MPCMediaRemoteMiddleware audioFormatPreference:chain:]
  -[MPCMediaRemoteMiddleware playerItemShouldDisableJumpToItem:atIndexPath:chain:]
  -[MPCMediaRemoteMiddleware playerPlayingItemIndexPath:chain:]
  -[MPCMediaRemoteMiddleware setInvalidationObservers:]
  -[MPCMediaRemoteMiddleware playerNumberOfSections:chain:]
  -[MPCMediaRemoteMiddleware setControllerFuture:]
  -[MPCMediaRemoteMiddleware _playbackRateForContentItem:]
  -[MPCMediaRemoteMiddleware sessionNumberOfSessions:forPlayerPathAtIndex:chain:]


MPCErrorControllerImplementation : NSObject <MFErrorController>
 @property  MPCPlaybackEngine *playbackEngine
 @property  MPCMediaFoundationTranslator *translator
 @property  NSMutableSet *failedItemsIdentifiers
 @property  <MPCExternalPlaybackRouter> *externalPlaybackRouter
 @property  MPAVItem *lastItemUsedForErrorResolution
 @property  NSString *preferredFirstContentItemID
 @property  BOOL itemsHavePlayed

  // instance methods
  -[MPCErrorControllerImplementation playbackEngine]
  -[MPCErrorControllerImplementation .cxx_destruct]
  -[MPCErrorControllerImplementation translator]
  -[MPCErrorControllerImplementation reset]
  -[MPCErrorControllerImplementation setPlaybackEngine:]
  -[MPCErrorControllerImplementation preferredFirstContentItemID]
  -[MPCErrorControllerImplementation setPreferredFirstContentItemID:]
  -[MPCErrorControllerImplementation resolveError:forItem:completion:]
  -[MPCErrorControllerImplementation itemsHavePlayed]
  -[MPCErrorControllerImplementation initWithPlaybackEngine:translator:externalPlaybackRouter:]
  -[MPCErrorControllerImplementation setItemsHavePlayed:]
  -[MPCErrorControllerImplementation setLastItemUsedForErrorResolution:]
  -[MPCErrorControllerImplementation failedItemsIdentifiers]
  -[MPCErrorControllerImplementation externalPlaybackRouter]
  -[MPCErrorControllerImplementation lastItemUsedForErrorResolution]
  -[MPCErrorControllerImplementation _playbackFailedWithError:item:canResolve:proposedResolution:completion:]
  -[MPCErrorControllerImplementation _notifyObserversForError:item:]
  -[MPCErrorControllerImplementation _resolutionForPlaybackError:item:]
  -[MPCErrorControllerImplementation shouldHandleFirstItemFailure:item:]
  -[MPCErrorControllerImplementation isUnrecoverableAssetLoadingError:]
  -[MPCErrorControllerImplementation canHandleFirstItemFailure]
  -[MPCErrorControllerImplementation isQueueLoadingFailure:]
  -[MPCErrorControllerImplementation isAssetUnavailableFailure:]
  -[MPCErrorControllerImplementation isFirstItemFailure:item:]
  -[MPCErrorControllerImplementation reportCriticalError:forItem:]
  -[MPCErrorControllerImplementation setFailedItemsIdentifiers:]
  -[MPCErrorControllerImplementation setExternalPlaybackRouter:]


MPCModelGenericAVItemSubscriptionAssetLoadOperation : MPAsyncOperation
 @property  MPCModelGenericAVItemAssetLoadProperties *assetLoadProperties
 @property  long long operationType
 @property  ICStoreRequestContext *requestContext
 @property  @? responseHandler
 @property  ICMusicSubscriptionLeaseSession *subscriptionLeaseSession

  // instance methods
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation setOperationType:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation operationType]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation .cxx_destruct]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation responseHandler]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation setResponseHandler:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation init]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation execute]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation cancel]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation requestContext]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation setRequestContext:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation cancellationHandler]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation setCancellationHandler:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation setAssetLoadProperties:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation setSubscriptionLeaseSession:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation assetLoadProperties]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation subscriptionLeaseSession]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation _canRetrieveLoadResultsFromMiniSinfWithAssets:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation _loadResultsFromServerObjectDatabaseAssetsWithMiniSinf:playbackAuthorizationToken:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation _canRetrieveLoadResultsFromServerObjectDatabaseWithAssets:hlsAsset:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation _loadResultsFromServerObjectDatabaseAssets:hlsAsset:playbackAuthorizationToken:]
  -[MPCModelGenericAVItemSubscriptionAssetLoadOperation _handlePlaybackResponse:withPlaybackCacheRequest:error:]


MPCModelQueueFeeder : MPQueueFeeder <MPRTCReportingItemSessionContaining, MPRequestResponseControllerDelegate, MPCQueueControllerDataSource>
 @property  MPModelGenericObject *fallbackSectionRepresentation
 @property  MPModelResponse<MPCModelPlaybackResponse> *response
 @property  NSString *rtcReportingPlayQueueSourceIdentifier
 @property  NSDictionary *rtcReportingSessionAdditionalUserInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL containsLiveStream
 @property  BOOL containsTransportableContent

  // instance methods
  -[MPCModelQueueFeeder uniqueIdentifier]
  -[MPCModelQueueFeeder .cxx_destruct]
  -[MPCModelQueueFeeder willBeginLoadingRequestForController:]
  -[MPCModelQueueFeeder didFinishLoadingRequestForController:]
  -[MPCModelQueueFeeder reloadSection:completion:]
  -[MPCModelQueueFeeder _beginBackgroundTaskAssertion]
  -[MPCModelQueueFeeder _endBackgroundTaskAssertion]
  -[MPCModelQueueFeeder init]
  -[MPCModelQueueFeeder supplementalPlaybackContextWithReason:]
  -[MPCModelQueueFeeder supplementalPlaybackContextBehavior]
  -[MPCModelQueueFeeder getRepresentativeMetadataForPlaybackContext:properties:completion:]
  -[MPCModelQueueFeeder firstModelPlayEvent]
  -[MPCModelQueueFeeder applyVolumeNormalizationForItem:]
  -[MPCModelQueueFeeder rtcReportingPlayQueueSourceIdentifier]
  -[MPCModelQueueFeeder response]
  -[MPCModelQueueFeeder controller:defersResponseReplacement:]
  -[MPCModelQueueFeeder dealloc]
  -[MPCModelQueueFeeder section:shouldShuffleExcludeItem:]
  -[MPCModelQueueFeeder controller:shouldRetryFailedRequestWithError:]
  -[MPCModelQueueFeeder containsTransportableContent]
  -[MPCModelQueueFeeder section:supportsShuffleType:]
  -[MPCModelQueueFeeder loadPlaybackContext:completion:]
  -[MPCModelQueueFeeder modelPlayEventForItem:inSection:]
  -[MPCModelQueueFeeder identifiersForItem:inSection:]
  -[MPCModelQueueFeeder itemForItem:inSection:]
  -[MPCModelQueueFeeder supportsAutoPlayForItem:inSection:]
  -[MPCModelQueueFeeder containsLiveStream]
  -[MPCModelQueueFeeder itemDidBeginPlayback:]
  -[MPCModelQueueFeeder canJumpToItem:]
  -[MPCModelQueueFeeder shouldUsePlaceholderForItem:inSection:]
  -[MPCModelQueueFeeder firstItemIntersectingIdentifierSet:]
  -[MPCModelQueueFeeder _equivalencySourceAdamIDForIdentifierSet:]
  -[MPCModelQueueFeeder _sectionedModelObjectsRepresentationForSectionedCollection:]
  -[MPCModelQueueFeeder _supplementalLibraryRequest]
  -[MPCModelQueueFeeder _didUpdateToResponse:]
  -[MPCModelQueueFeeder fallbackSectionRepresentation]
  -[MPCModelQueueFeeder playbackInfoForItem:]
  -[MPCModelQueueFeeder updatedPlaybackContext]
  -[MPCModelQueueFeeder _performRequestUpdate:]
  -[MPCModelQueueFeeder setFallbackSectionRepresentation:]


MPCModelRadioPersonalizationRequest : MPModelRequest <NSCopying>
 @property  BOOL analyticsSignpostsEnabled

  // class methods
  +[MPCModelRadioPersonalizationRequest requiresNetwork]
  +[MPCModelRadioPersonalizationRequest supportsSecureCoding]

  // instance methods
  -[MPCModelRadioPersonalizationRequest newOperationWithResponseHandler:]
  -[MPCModelRadioPersonalizationRequest .cxx_destruct]
  -[MPCModelRadioPersonalizationRequest init]
  -[MPCModelRadioPersonalizationRequest copyWithZone:]
  -[MPCModelRadioPersonalizationRequest initWithRadioStationTracks:]
  -[MPCModelRadioPersonalizationRequest analyticsSignpostsEnabled]
  -[MPCModelRadioPersonalizationRequest setAnalyticsSignpostsEnabled:]


MPCModelRadioPersonalizationResponse : MPModelResponse
 @property  MPSectionedCollection *radioStationTracks
 @property  MPSectionedCollection *results

  // instance methods
  -[MPCModelRadioPersonalizationResponse .cxx_destruct]
  -[MPCModelRadioPersonalizationResponse dealloc]
  -[MPCModelRadioPersonalizationResponse initWithRequest:personalizationResponse:]
  -[MPCModelRadioPersonalizationResponse setRadioStationTracks:]
  -[MPCModelRadioPersonalizationResponse radioStationTracks]


_MPCQueueControllerDataSourceState : NSObject <MPShuffleableSectionedIdentifierListDataSource, NSSecureCoding>
 @property  {os_unfair_lock_s=I} stateLock
 @property  long long supplementalPlaybackContextBehavior
 @property  MPPlaybackContext *supplementalPlaybackContext
 @property  <MPCQueueControllerDataSource><MPCQueueControllerDataSourceStateRestoring> *dataSource
 @property  MPPlaybackContext *playbackContext
 @property  BOOL shouldAddOriginalPlaybackContextAfterReplacement
 @property  MPPlaybackContext *originalPlaybackContext
 @property  long long state
 @property  BOOL frozen
 @property  NSString *sectionIdentifier
 @property  NSString *preferredStartItemIdentifier
 @property  MPPlaceholderAVItem *tailPlaceholderItem
 @property  BOOL containsLiveStream
 @property  id rtcSectionHierarchyToken
 @property  MPCPlaybackEngineEventStream *eventStream
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPCQueueControllerDataSourceState supportsSecureCoding]

  // instance methods
  -[_MPCQueueControllerDataSourceState sectionIdentifier]
  -[_MPCQueueControllerDataSourceState eventStream]
  -[_MPCQueueControllerDataSourceState initWithCoder:]
  -[_MPCQueueControllerDataSourceState .cxx_destruct]
  -[_MPCQueueControllerDataSourceState initWithPlaybackContext:]
  -[_MPCQueueControllerDataSourceState reloadSection:completion:]
  -[_MPCQueueControllerDataSourceState setState:]
  -[_MPCQueueControllerDataSourceState setEventStream:]
  -[_MPCQueueControllerDataSourceState dataSource]
  -[_MPCQueueControllerDataSourceState supplementalPlaybackContextBehavior]
  -[_MPCQueueControllerDataSourceState stateLock]
  -[_MPCQueueControllerDataSourceState state]
  -[_MPCQueueControllerDataSourceState isFrozen]
  -[_MPCQueueControllerDataSourceState section:shouldShuffleExcludeItem:]
  -[_MPCQueueControllerDataSourceState encodeWithCoder:]
  -[_MPCQueueControllerDataSourceState setFrozen:]
  -[_MPCQueueControllerDataSourceState playbackContext]
  -[_MPCQueueControllerDataSourceState section:supportsShuffleType:]
  -[_MPCQueueControllerDataSourceState itemForItem:inSection:]
  -[_MPCQueueControllerDataSourceState containsLiveStream]
  -[_MPCQueueControllerDataSourceState itemDidBeginPlayback:]
  -[_MPCQueueControllerDataSourceState canJumpToItem:]
  -[_MPCQueueControllerDataSourceState canSkipItem:]
  -[_MPCQueueControllerDataSourceState shouldUsePlaceholderForItem:inSection:]
  -[_MPCQueueControllerDataSourceState firstItemIntersectingIdentifierSet:]
  -[_MPCQueueControllerDataSourceState updatePlaybackCoordinator:]
  -[_MPCQueueControllerDataSourceState originalPlaybackContext]
  -[_MPCQueueControllerDataSourceState supplementalPlaybackContext]
  -[_MPCQueueControllerDataSourceState shouldRequestAdditionalItemsAtTail]
  -[_MPCQueueControllerDataSourceState _buildPlaceholder]
  -[_MPCQueueControllerDataSourceState _inLock_buildPlaceholder]
  -[_MPCQueueControllerDataSourceState _updateRadioStationPlaybackAuthorizationTokenIfNeeded]
  -[_MPCQueueControllerDataSourceState shouldAddOriginalPlaybackContextAfterReplacement]
  -[_MPCQueueControllerDataSourceState prefetchThreshold]
  -[_MPCQueueControllerDataSourceState shouldShowPlaceholderAtTail]
  -[_MPCQueueControllerDataSourceState loadAdditionalItemsIfNeededWithRequest:completion:]
  -[_MPCQueueControllerDataSourceState tailPlaceholderItem]
  -[_MPCQueueControllerDataSourceState updatePlaybackContext]
  -[_MPCQueueControllerDataSourceState preferredStartItemIdentifier]
  -[_MPCQueueControllerDataSourceState rtcSectionHierarchyToken]
  -[_MPCQueueControllerDataSourceState setRtcSectionHierarchyToken:]


MPCPlayActivityFeedEventConsumer : NSObject <MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  NSMutableArray *radioPlayActivityEvents
 @property  ICPlayActivityController *playActivityController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlayActivityFeedEventConsumer identifier]

  // instance methods
  -[MPCPlayActivityFeedEventConsumer subscription]
  -[MPCPlayActivityFeedEventConsumer unsubscribeFromEventStream:]
  -[MPCPlayActivityFeedEventConsumer .cxx_destruct]
  -[MPCPlayActivityFeedEventConsumer init]
  -[MPCPlayActivityFeedEventConsumer subscribeToEventStream:]
  -[MPCPlayActivityFeedEventConsumer playActivityController]
  -[MPCPlayActivityFeedEventConsumer _updateAllowedBundleIdsIfNecessary:]
  -[MPCPlayActivityFeedEventConsumer _handleURLBagProviderDidUpdateBagNotification:]
  -[MPCPlayActivityFeedEventConsumer _handleItemResumeEvent:cursor:]
  -[MPCPlayActivityFeedEventConsumer _handleItemPositionJumpEvent:cursor:]
  -[MPCPlayActivityFeedEventConsumer _handleItemPauseEvent:cursor:]
  -[MPCPlayActivityFeedEventConsumer _handleItemEndEvent:cursor:]
  -[MPCPlayActivityFeedEventConsumer _handleApplicationTerminationEvent:cursor:]
  -[MPCPlayActivityFeedEventConsumer _updatePAFEvent:withItemBeginEvent:containerBeginPayload:cursor:forEventType:]
  -[MPCPlayActivityFeedEventConsumer _updatePAFEvent:withQueueAddEvent:queueSectionIdentifier:cursor:]
  -[MPCPlayActivityFeedEventConsumer _updatePAFEvent:withDeviceInfoFromCursor:]
  -[MPCPlayActivityFeedEventConsumer _getStartTimeForMostRecentPlaybackStart:withItemBeginEvent:containerBeginEvent:cursor:]
  -[MPCPlayActivityFeedEventConsumer _clampTimeValuesForPAFEvent:withDuration:]
  -[MPCPlayActivityFeedEventConsumer _updatePAFEvent:withSharedListeningInfoFromCursor:]
  -[MPCPlayActivityFeedEventConsumer _finalizePAFEvents:]
  -[MPCPlayActivityFeedEventConsumer _findRecentPlaybackStartFromTypes:matchingPayload:cursor:]
  -[MPCPlayActivityFeedEventConsumer _updatePAFEvent:withAudioChangeEvent:]
  -[MPCPlayActivityFeedEventConsumer _generateAggregateNoncatalogEndEventForCursor:]
  -[MPCPlayActivityFeedEventConsumer _itemIsPlayingFromQueueSectionIdentifier:itemIdentifier:cursor:]
  -[MPCPlayActivityFeedEventConsumer _getPlaybackDurationForHLSStreamFromStartEvent:toEndEvent:withLimitedCursor:]
  -[MPCPlayActivityFeedEventConsumer _generatePlaybackEndEventFromEvent:withQueueSectionIdentifier:itemIdentifier:cursor:]
  -[MPCPlayActivityFeedEventConsumer _itemIsPlaceholderFromQueueSectionIdentifier:itemIdentifier:cursor:]
  -[MPCPlayActivityFeedEventConsumer _updatePAFEvent:withAccountIdentifier:cursor:]
  -[MPCPlayActivityFeedEventConsumer _updatePAFEvent:withEnqueuerAccountIdentifier:queueAddEvent:cursor:]
  -[MPCPlayActivityFeedEventConsumer radioPlayActivityEvents]


_MPCProtoContainerIdentifierSet : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoContainerIdentifierSet .cxx_destruct]
  -[_MPCProtoContainerIdentifierSet dictionaryRepresentation]
  -[_MPCProtoContainerIdentifierSet writeTo:]
  -[_MPCProtoContainerIdentifierSet isEqual:]
  -[_MPCProtoContainerIdentifierSet readFrom:]
  -[_MPCProtoContainerIdentifierSet copyWithZone:]


_MPCMediaRemoteNullController : MPCMediaRemoteController
  // class methods
  +[_MPCMediaRemoteNullController _shouldRegisterForNotifications]

  // instance methods
  -[_MPCMediaRemoteNullController supportedCommands]
  -[_MPCMediaRemoteNullController playbackState]
  -[_MPCMediaRemoteNullController .cxx_destruct]
  -[_MPCMediaRemoteNullController contentItemForIdentifier:]
  -[_MPCMediaRemoteNullController playQueueIdentifiersForRange:]
  -[_MPCMediaRemoteNullController playbackStateCacheState]
  -[_MPCMediaRemoteNullController playQueueIdentifiersCacheStateForRange:]
  -[_MPCMediaRemoteNullController contentItemArtworkCacheStateForIdentifier:size:]
  -[_MPCMediaRemoteNullController supportedCommandsCacheState]
  -[_MPCMediaRemoteNullController playingIdentifier]
  -[_MPCMediaRemoteNullController _init]
  -[_MPCMediaRemoteNullController invalidateAllTokens]
  -[_MPCMediaRemoteNullController playQueueIdentifiersForRequest:]
  -[_MPCMediaRemoteNullController contentItemCacheStateForIdentifier:]
  -[_MPCMediaRemoteNullController playingIdentifierCacheState]
  -[_MPCMediaRemoteNullController contentItemArtworkForContentItemIdentifier:artworkIdentifier:size:]
  -[_MPCMediaRemoteNullController sendCommand:options:completion:]


MPCQueueDescriptorPlaybackIntentDataSource : NSObject <MPCPlaybackIntentDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCQueueDescriptorPlaybackIntentDataSource getPlaybackContextForIntent:withCompletion:]


MPCAssistantPlaybackQueue : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *contextID
 @property  BOOL supportedOnCurrentPlatform
 @property  BOOL shouldOverrideManuallyCuratedQueue
 @property  BOOL shouldImmediatelyStartPlayback
 @property  NSString *siriRecommendationID
 @property  NSString *siriAssetInfo
 @property  NSString *featureName
 @property  NSString *queueGroupingID
 @property  NSDictionary *siriWHAMetricsInfo
 @property  ICUserIdentity *userIdentity
 @property  NSString *homeKitUserIdentifier

  // class methods
  +[MPCAssistantPlaybackQueue supportsSecureCoding]

  // instance methods
  -[MPCAssistantPlaybackQueue siriAssetInfo]
  -[MPCAssistantPlaybackQueue userIdentity]
  -[MPCAssistantPlaybackQueue initWithCoder:]
  -[MPCAssistantPlaybackQueue contextID]
  -[MPCAssistantPlaybackQueue queueGroupingID]
  -[MPCAssistantPlaybackQueue setUserIdentity:]
  -[MPCAssistantPlaybackQueue homeKitUserIdentifier]
  -[MPCAssistantPlaybackQueue .cxx_destruct]
  -[MPCAssistantPlaybackQueue initWithContextID:]
  -[MPCAssistantPlaybackQueue siriWHAMetricsInfo]
  -[MPCAssistantPlaybackQueue setHomeKitUserIdentifier:]
  -[MPCAssistantPlaybackQueue setSiriWHAMetricsInfo:]
  -[MPCAssistantPlaybackQueue setSiriAssetInfo:]
  -[MPCAssistantPlaybackQueue setQueueGroupingID:]
  -[MPCAssistantPlaybackQueue featureName]
  -[MPCAssistantPlaybackQueue setFeatureName:]
  -[MPCAssistantPlaybackQueue shouldOverrideManuallyCuratedQueue]
  -[MPCAssistantPlaybackQueue setShouldOverrideManuallyCuratedQueue:]
  -[MPCAssistantPlaybackQueue copyWithZone:]
  -[MPCAssistantPlaybackQueue encodeWithCoder:]
  -[MPCAssistantPlaybackQueue createRemotePlaybackQueue]
  -[MPCAssistantPlaybackQueue shouldImmediatelyStartPlayback]
  -[MPCAssistantPlaybackQueue siriRecommendationID]
  -[MPCAssistantPlaybackQueue supportedOnCurrentPlatform]
  -[MPCAssistantPlaybackQueue setShouldImmediatelyStartPlayback:]
  -[MPCAssistantPlaybackQueue setSiriRecommendationID:]


MPCAssistantQueryPlaybackQueue : MPCAssistantPlaybackQueue
 @property  MPMediaQuery *query
 @property  MPMediaItem *firstItem
 @property  long long shuffleType

  // class methods
  +[MPCAssistantQueryPlaybackQueue queryQueueWithContextID:query:]

  // instance methods
  -[MPCAssistantQueryPlaybackQueue firstItem]
  -[MPCAssistantQueryPlaybackQueue query]
  -[MPCAssistantQueryPlaybackQueue .cxx_destruct]
  -[MPCAssistantQueryPlaybackQueue setShuffleType:]
  -[MPCAssistantQueryPlaybackQueue shuffleType]
  -[MPCAssistantQueryPlaybackQueue setFirstItem:]
  -[MPCAssistantQueryPlaybackQueue createRemotePlaybackQueue]
  -[MPCAssistantQueryPlaybackQueue initWithContextID:query:]


MPCAssistantRadioPlaybackQueue : MPCAssistantPlaybackQueue
 @property  NSString *stationStringID

  // class methods
  +[MPCAssistantRadioPlaybackQueue radioQueueWithContextID:stationStringID:]

  // instance methods
  -[MPCAssistantRadioPlaybackQueue .cxx_destruct]
  -[MPCAssistantRadioPlaybackQueue stationStringID]
  -[MPCAssistantRadioPlaybackQueue createRemotePlaybackQueue]
  -[MPCAssistantRadioPlaybackQueue supportedOnCurrentPlatform]
  -[MPCAssistantRadioPlaybackQueue initWithContextID:stationStringID:]


MPCAssistantStoreTracklistPlaybackQueue : MPCAssistantPlaybackQueue
 @property  NSArray *storeItemIDs
 @property  long long shuffleType
 @property  MPIdentifierSet *collectionIdentifierSet

  // class methods
  +[MPCAssistantStoreTracklistPlaybackQueue storeTracklistQueueWithContextID:storeItemIDs:collectionIdentifierSet:]

  // instance methods
  -[MPCAssistantStoreTracklistPlaybackQueue .cxx_destruct]
  -[MPCAssistantStoreTracklistPlaybackQueue collectionIdentifierSet]
  -[MPCAssistantStoreTracklistPlaybackQueue setShuffleType:]
  -[MPCAssistantStoreTracklistPlaybackQueue shuffleType]
  -[MPCAssistantStoreTracklistPlaybackQueue storeItemIDs]
  -[MPCAssistantStoreTracklistPlaybackQueue createRemotePlaybackQueue]
  -[MPCAssistantStoreTracklistPlaybackQueue initWithContextID:storeItemIDs:collectionIdentifierSet:]


MPCAssistantGeniusPlaybackQueue : MPCAssistantPlaybackQueue
 @property  NSURL *seedTrack

  // class methods
  +[MPCAssistantGeniusPlaybackQueue geniusQueueWithContextID:seedTrack:]

  // instance methods
  -[MPCAssistantGeniusPlaybackQueue .cxx_destruct]
  -[MPCAssistantGeniusPlaybackQueue createRemotePlaybackQueue]
  -[MPCAssistantGeniusPlaybackQueue initWithContextID:seedTrack:]
  -[MPCAssistantGeniusPlaybackQueue seedTrack]


MPCAssistantCustomDataPlaybackQueue : MPCAssistantPlaybackQueue
 @property  NSString *identifier
 @property  NSData *customData

  // class methods
  +[MPCAssistantCustomDataPlaybackQueue customDataQueueWithContextID:identifier:customData:]

  // instance methods
  -[MPCAssistantCustomDataPlaybackQueue .cxx_destruct]
  -[MPCAssistantCustomDataPlaybackQueue customData]
  -[MPCAssistantCustomDataPlaybackQueue identifier]
  -[MPCAssistantCustomDataPlaybackQueue createRemotePlaybackQueue]
  -[MPCAssistantCustomDataPlaybackQueue initWithContextID:identifier:customData:]


MPCPlayerResponseSection : NSObject
 @property  BOOL autoPlaySection
 @property  MPCPlayerResponse *response
 @property  MPModelGenericObject *metadataObject

  // instance methods
  -[MPCPlayerResponseSection initWithModelGenericObject:sectionIndex:response:]
  -[MPCPlayerResponseSection .cxx_destruct]
  -[MPCPlayerResponseSection remove]
  -[MPCPlayerResponseSection response]
  -[MPCPlayerResponseSection metadataObject]
  -[MPCPlayerResponseSection isAutoPlaySection]


MPCPlayerPath : NSObject <NSCopying, NSSecureCoding>
 @property  ^v mediaRemotePlayerPath
 @property  NSString *representedBundleDisplayName
 @property  NSString *representedBundleID
 @property  MPAVRoute *route
 @property  BOOL systemMusicPath
 @property  BOOL resolved
 @property  BOOL fullyResolved
 @property  ^v origin
 @property  NSString *deviceUID
 @property  NSString *bundleID
 @property  NSString *playerID
 @property  BOOL inProcess

  // class methods
  +[MPCPlayerPath pathWithRoute:bundleID:playerID:]
  +[MPCPlayerPath pathWithDeviceUID:bundleID:pid:playerID:]
  +[MPCPlayerPath supportsSecureCoding]
  +[MPCPlayerPath pathWithDeviceUIDs:bundleID:pid:playerID:]
  +[MPCPlayerPath pathWithCustomOrigin:bundleID:playerID:]
  +[MPCPlayerPath pathWithRoute:mediaRemotePlayerPath:isResolved:]
  +[MPCPlayerPath systemMusicPathWithRoute:playerID:]
  +[MPCPlayerPath deviceActivePlayerPath]

  // instance methods
  -[MPCPlayerPath mediaRemotePlayerPath]
  -[MPCPlayerPath isResolved]
  -[MPCPlayerPath bundleID]
  -[MPCPlayerPath initWithCoder:]
  -[MPCPlayerPath route]
  -[MPCPlayerPath isFullyResolved]
  -[MPCPlayerPath origin]
  -[MPCPlayerPath .cxx_destruct]
  -[MPCPlayerPath isSystemMusicPath]
  -[MPCPlayerPath resolveWithCompletion:]
  -[MPCPlayerPath isInProcess]
  -[MPCPlayerPath initWithDeviceUID:bundleID:pid:playerID:]
  -[MPCPlayerPath isEqual:]
  -[MPCPlayerPath representedBundleDisplayName]
  -[MPCPlayerPath pathByAppendingPlayerIDSuffix:]
  -[MPCPlayerPath resolveWithRouteResolvedHandler:completion:]
  -[MPCPlayerPath initWithRoute:bundleID:playerID:]
  -[MPCPlayerPath dealloc]
  -[MPCPlayerPath copyWithZone:]
  -[MPCPlayerPath initWithRoute:bundleID:pid:playerID:]
  -[MPCPlayerPath playerID]
  -[MPCPlayerPath representedBundleID]
  -[MPCPlayerPath encodeWithCoder:]
  -[MPCPlayerPath deviceUID]


_MPCVideoViewControllerMediaFoundationImplementation : UIViewController <AVPlayerViewControllerDelegate, MPCPlaybackEngineEventObserving, MPCVideoOutput>
 @property  MPCPlaybackEngine *playbackEngine
 @property  AVPlayerViewController *internalController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MPCVideoOutputDelegate> *videoOutputDelegate
 @property  UIViewController *playerViewController
 @property  BOOL showsPlaybackControls
 @property  {CGSize=dd} presentationSize
 @property  NSString *videoGravity
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoBounds
 @property  BOOL readyForDisplay
 @property  BOOL pictureInPictureActive
 @property  BOOL allowsPictureInPicturePlayback

  // class methods
  +[_MPCVideoViewControllerMediaFoundationImplementation keyPathsForValuesAffectingPresentationSize]
  +[_MPCVideoViewControllerMediaFoundationImplementation keyPathsForValuesAffectingIsPictureInPictureActive]
  +[_MPCVideoViewControllerMediaFoundationImplementation keyPathsForValuesAffectingIsReadyForDisplay]
  +[_MPCVideoViewControllerMediaFoundationImplementation keyPathsForValuesAffectingAllowsPictureInPicturePlayback]
  +[_MPCVideoViewControllerMediaFoundationImplementation keyPathsForValuesAffectingVideoGravity]
  +[_MPCVideoViewControllerMediaFoundationImplementation keyPathsForValuesAffectingShowsPlaybackControls]
  +[_MPCVideoViewControllerMediaFoundationImplementation keyPathsForValuesAffectingVideoBounds]

  // instance methods
  -[_MPCVideoViewControllerMediaFoundationImplementation videoGravity]
  -[_MPCVideoViewControllerMediaFoundationImplementation playbackEngine]
  -[_MPCVideoViewControllerMediaFoundationImplementation allowsPictureInPicturePlayback]
  -[_MPCVideoViewControllerMediaFoundationImplementation setVideoGravity:]
  -[_MPCVideoViewControllerMediaFoundationImplementation isReadyForDisplay]
  -[_MPCVideoViewControllerMediaFoundationImplementation isPictureInPictureActive]
  -[_MPCVideoViewControllerMediaFoundationImplementation setShowsPlaybackControls:]
  -[_MPCVideoViewControllerMediaFoundationImplementation presentationSize]
  -[_MPCVideoViewControllerMediaFoundationImplementation setAllowsPictureInPicturePlayback:]
  -[_MPCVideoViewControllerMediaFoundationImplementation videoOutputDelegate]
  -[_MPCVideoViewControllerMediaFoundationImplementation .cxx_destruct]
  -[_MPCVideoViewControllerMediaFoundationImplementation stopPictureInPicture]
  -[_MPCVideoViewControllerMediaFoundationImplementation exitFullScreenWithCompletion:]
  -[_MPCVideoViewControllerMediaFoundationImplementation viewDidLoad]
  -[_MPCVideoViewControllerMediaFoundationImplementation showFullScreenPresentationFromView:completion:]
  -[_MPCVideoViewControllerMediaFoundationImplementation internalController]
  -[_MPCVideoViewControllerMediaFoundationImplementation showsPlaybackControls]
  -[_MPCVideoViewControllerMediaFoundationImplementation _stateDictionary]
  -[_MPCVideoViewControllerMediaFoundationImplementation respondsToSelector:]
  -[_MPCVideoViewControllerMediaFoundationImplementation videoBounds]
  -[_MPCVideoViewControllerMediaFoundationImplementation viewDidLayoutSubviews]
  -[_MPCVideoViewControllerMediaFoundationImplementation enterFullScreenWithCompletion:]
  -[_MPCVideoViewControllerMediaFoundationImplementation playerViewController]
  -[_MPCVideoViewControllerMediaFoundationImplementation setVideoOutputDelegate:]
  -[_MPCVideoViewControllerMediaFoundationImplementation engine:willChangeToItem:fromItem:]
  -[_MPCVideoViewControllerMediaFoundationImplementation engineDidResetMediaServices:]
  -[_MPCVideoViewControllerMediaFoundationImplementation _updateViewControllerHierarchyForPlaybackEngine:]
  -[_MPCVideoViewControllerMediaFoundationImplementation initWithPlaybackEngine:]
  -[_MPCVideoViewControllerMediaFoundationImplementation dealloc]
  -[_MPCVideoViewControllerMediaFoundationImplementation forwardInvocation:]


MPCPlaybackEngineEnvironmentConsumer : NSObject <MPCPlaybackEngineEventObserving, ICEnvironmentMonitorObserver, MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  MPCPlaybackEngine *playbackEngine
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlaybackEngineEnvironmentConsumer identifier]

  // instance methods
  -[MPCPlaybackEngineEnvironmentConsumer environmentMonitorDidChangeNetworkType:]
  -[MPCPlaybackEngineEnvironmentConsumer environmentMonitorDidChangeNetworkReachability:]
  -[MPCPlaybackEngineEnvironmentConsumer subscription]
  -[MPCPlaybackEngineEnvironmentConsumer playbackEngine]
  -[MPCPlaybackEngineEnvironmentConsumer engine:didChangeAccounts:]
  -[MPCPlaybackEngineEnvironmentConsumer unsubscribeFromEventStream:]
  -[MPCPlaybackEngineEnvironmentConsumer _addEventForAccountIdentifier:cursor:event:nudge:]
  -[MPCPlaybackEngineEnvironmentConsumer .cxx_destruct]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotAccount:eventType:atTime:]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotNetworkTypeWithEvent:nudge:]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotNetworkTypeAtTime:]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotDeviceWithEvent:nudge:]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotNetworkReachabilityWithEvent:nudge:]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotNetworkReachabilityAtTime:force:]
  -[MPCPlaybackEngineEnvironmentConsumer initWithPlaybackEngine:]
  -[MPCPlaybackEngineEnvironmentConsumer _devicePrivateListeningDidChange:]
  -[MPCPlaybackEngineEnvironmentConsumer _applicationWillTerminate:]
  -[MPCPlaybackEngineEnvironmentConsumer subscribeToEventStream:]
  -[MPCPlaybackEngineEnvironmentConsumer _applicationWillEnterForeground:]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotDeviceAtTime:]
  -[MPCPlaybackEngineEnvironmentConsumer _snapshotAccount:eventType:event:nudge:]
  -[MPCPlaybackEngineEnvironmentConsumer _applicationDidEnterBackground:]


MPCModelPlaybackIntentTracklistToken : NSObject <NSSecureCoding>
 @property  MPModelRequest *request
 @property  MPIdentifierSet *startItemIdentifiers

  // class methods
  +[MPCModelPlaybackIntentTracklistToken supportsSecureCoding]
  +[MPCModelPlaybackIntentTracklistToken requiredPropertiesForStaticMediaClips]

  // instance methods
  -[MPCModelPlaybackIntentTracklistToken setRequest:]
  -[MPCModelPlaybackIntentTracklistToken initWithCoder:]
  -[MPCModelPlaybackIntentTracklistToken .cxx_destruct]
  -[MPCModelPlaybackIntentTracklistToken startItemIdentifiers]
  -[MPCModelPlaybackIntentTracklistToken setStartItemIdentifiers:]
  -[MPCModelPlaybackIntentTracklistToken request]
  -[MPCModelPlaybackIntentTracklistToken encodeWithCoder:]


MPCModelRadioContentReference : NSObject <NSCopying, NSSecureCoding>
 @property  ICRadioContentReference *ICRadioContentReference
 @property  MPIdentifierSet *referenceModelObjectIdentifiers

  // class methods
  +[MPCModelRadioContentReference supportsSecureCoding]
  +[MPCModelRadioContentReference referenceWithMPModelObject:]
  +[MPCModelRadioContentReference referenceWithMPModelObject:containerModelPlayEvent:]
  +[MPCModelRadioContentReference referenceWithStoreIdentifier:trackInfo:]

  // instance methods
  -[MPCModelRadioContentReference initWithCoder:]
  -[MPCModelRadioContentReference .cxx_destruct]
  -[MPCModelRadioContentReference copyWithZone:]
  -[MPCModelRadioContentReference encodeWithCoder:]
  -[MPCModelRadioContentReference ICRadioContentReference]
  -[MPCModelRadioContentReference initWithICRadioContentReference:]
  -[MPCModelRadioContentReference referenceModelObjectIdentifiers]


MPCSiriLoggingEventConsumer : NSObject <MPCPlaybackEngineEventConsumer>
 @property  <MPCPlaybackEngineEventStreamSubscription> *subscription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCSiriLoggingEventConsumer identifier]

  // instance methods
  -[MPCSiriLoggingEventConsumer subscription]
  -[MPCSiriLoggingEventConsumer unsubscribeFromEventStream:]
  -[MPCSiriLoggingEventConsumer .cxx_destruct]
  -[MPCSiriLoggingEventConsumer subscribeToEventStream:]


MPCReportingController : NSObject
 @property  MPCReportingController *parentReportingController
 @property  NSArray *childReportingControllers

  // instance methods
  -[MPCReportingController .cxx_destruct]
  -[MPCReportingController init]
  -[MPCReportingController setParentReportingController:]
  -[MPCReportingController _recordReportingEvents:]
  -[MPCReportingController parentReportingController]
  -[MPCReportingController childReportingControllers]
  -[MPCReportingController addChildReportingController:]
  -[MPCReportingController recordReportingEvents:]
  -[MPCReportingController removeChildReportingController:]


MPCFutureInvalidationToken : NSObject <NSCopying>
 @property  MPCFuture *future

  // instance methods
  -[MPCFutureInvalidationToken future]
  -[MPCFutureInvalidationToken .cxx_destruct]
  -[MPCFutureInvalidationToken setFuture:]
  -[MPCFutureInvalidationToken copyWithZone:]


MPCFuture : NSObject
 @property  NSObject<OS_dispatch_queue> *accessQueue
 @property  NSObject<OS_dispatch_queue> *calloutQueue
 @property  NSMutableArray *successBlocks
 @property  NSMutableArray *failureBlocks
 @property  NSMutableArray *completionBlocks
 @property  NSMapTable *invalidBlocks
 @property  id result
 @property  NSError *error
 @property  BOOL finalized
 @property  BOOL invalid
 @property  BOOL disconnected
 @property  NSString *debugLabel

  // instance methods
  -[MPCFuture completionBlocks]
  -[MPCFuture isDisconnected]
  -[MPCFuture disconnect]
  -[MPCFuture failureBlocks]
  -[MPCFuture calloutQueue]
  -[MPCFuture isInvalid]
  -[MPCFuture finishWithValue:]
  -[MPCFuture isFinalized]
  -[MPCFuture accessQueue]
  -[MPCFuture .cxx_destruct]
  -[MPCFuture onFailure:]
  -[MPCFuture invalidBlocks]
  -[MPCFuture result]
  -[MPCFuture onInvalid:]
  -[MPCFuture onCompletion:]
  -[MPCFuture onSuccess:]
  -[MPCFuture initWithQueue:]
  -[MPCFuture debugLabel]
  -[MPCFuture _onQueue_finalize]
  -[MPCFuture dealloc]
  -[MPCFuture invalidate]
  -[MPCFuture finishWithError:]
  -[MPCFuture error]
  -[MPCFuture setDebugLabel:]
  -[MPCFuture successBlocks]


MPCStoreLibraryPersonalizationMiddlewareOperation : MPAsyncOperation <MPMiddlewareAutomaticDependencyOperation>
 @property  MPCStoreLibraryPersonalizationMiddleware *middleware
 @property  MPCPlayerRequest *playerRequest
 @property  NSArray *inputProtocols
 @property  NSArray *outputProtocols
 @property  NSMapTable *inputOperations
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCStoreLibraryPersonalizationMiddlewareOperation inputProtocols]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation inputOperations]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation initWithMiddleware:playerRequest:]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation playerRequest]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation invalidationObservers]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation setMiddleware:]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation setInputOperations:]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation setPlayerRequest:]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation outputProtocols]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation .cxx_destruct]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation middleware]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation execute]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation setInvalidationHandler:]
  -[MPCStoreLibraryPersonalizationMiddlewareOperation invalidationHandler]


MPCSharedListeningPlaybackIntentTracklistToken : NSObject <NSSecureCoding>
 @property  MPCPlaybackSharedListeningProperties *sharedListeningProperties
 @property  ICLiveLinkIdentity *identity

  // class methods
  +[MPCSharedListeningPlaybackIntentTracklistToken supportsSecureCoding]

  // instance methods
  -[MPCSharedListeningPlaybackIntentTracklistToken sharedListeningProperties]
  -[MPCSharedListeningPlaybackIntentTracklistToken initWithCoder:]
  -[MPCSharedListeningPlaybackIntentTracklistToken .cxx_destruct]
  -[MPCSharedListeningPlaybackIntentTracklistToken setIdentity:]
  -[MPCSharedListeningPlaybackIntentTracklistToken identity]
  -[MPCSharedListeningPlaybackIntentTracklistToken encodeWithCoder:]
  -[MPCSharedListeningPlaybackIntentTracklistToken setSharedListeningProperties:]


MPCPlayerItemConfigurator : NSObject <MPAVRoutingControllerDelegate>
 @property  long long defaultEQPresetType
 @property  MPCMediaFoundationTranslator *translator
 @property  <MFPlaybackStackController><MFQueueManagement> *stackController
 @property  MPCPlaybackEngine *playbackEngine
 @property  NSObject<OS_dispatch_source> *userDefaultsDebouncer
 @property  MPAVRoutingController *routingController
 @property  MPCPlayerAudioRoute *currentAudioRoute
 @property  MPCModelGenericAVItem *currenItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCPlayerItemConfigurator playbackEngine]
  -[MPCPlayerItemConfigurator routingController:pickedRoutesDidChange:]
  -[MPCPlayerItemConfigurator routingController]
  -[MPCPlayerItemConfigurator .cxx_destruct]
  -[MPCPlayerItemConfigurator currentItem]
  -[MPCPlayerItemConfigurator translator]
  -[MPCPlayerItemConfigurator _setupNotifications]
  -[MPCPlayerItemConfigurator queuedItems]
  -[MPCPlayerItemConfigurator dealloc]
  -[MPCPlayerItemConfigurator stackController]
  -[MPCPlayerItemConfigurator initWithPlaybackEngine:stackController:translator:]
  -[MPCPlayerItemConfigurator updatePlayerConfiguration]
  -[MPCPlayerItemConfigurator configureQueuePlayerItem:error:]
  -[MPCPlayerItemConfigurator _setupRoutingController]
  -[MPCPlayerItemConfigurator _setupPlayer]
  -[MPCPlayerItemConfigurator defaultEQPresetType]
  -[MPCPlayerItemConfigurator _setupQueueItemForEnhancedAudioHLSPlayback:metadataWaitTime:error:]
  -[MPCPlayerItemConfigurator currentAudioRoute]
  -[MPCPlayerItemConfigurator _playbackUserDefaultsEQPresetDidChangeNotification:]
  -[MPCPlayerItemConfigurator _preferredResolutionDidChange:]
  -[MPCPlayerItemConfigurator setDefaultEQPresetType:]
  -[MPCPlayerItemConfigurator setupDefaultsDebouncer]
  -[MPCPlayerItemConfigurator tearDownDefaultsDebouncer]
  -[MPCPlayerItemConfigurator userDefaultsDebouncer]
  -[MPCPlayerItemConfigurator setUserDefaultsDebouncer:]
  -[MPCPlayerItemConfigurator processAudioQualityChanges]
  -[MPCPlayerItemConfigurator _shouldReloadEntireQueue]
  -[MPCPlayerItemConfigurator _updateQueueItemsAndPlayerForFormatChangeIfRequired]
  -[MPCPlayerItemConfigurator _audioFormatsDictionaryWithHLSMetadataFromAsset:metadataWaitTime:error:]
  -[MPCPlayerItemConfigurator _emitAudioFormatSelection:item:]
  -[MPCPlayerItemConfigurator _HLSMetadataForAsset:error:]
  -[MPCPlayerItemConfigurator _audioFormatsDictionaryWithHLSMetadata:]
  -[MPCPlayerItemConfigurator updateCurrentAudioRouteWithPickedRoutes:]
  -[MPCPlayerItemConfigurator _modeObjectForPlayerItem:]
  -[MPCPlayerItemConfigurator _updatePreferredAudioFormatIfRequiredForItem:route:]
  -[MPCPlayerItemConfigurator currenItem]


_MPCProtoDelegateInfo : PBCodable <NSCopying>
  // class methods
  +[_MPCProtoDelegateInfo currentDeviceDelegateInfo]

  // instance methods
  -[_MPCProtoDelegateInfo .cxx_destruct]
  -[_MPCProtoDelegateInfo dictionaryRepresentation]
  -[_MPCProtoDelegateInfo writeTo:]
  -[_MPCProtoDelegateInfo isEqual:]
  -[_MPCProtoDelegateInfo readFrom:]
  -[_MPCProtoDelegateInfo copyWithZone:]
  -[_MPCProtoDelegateInfo _getPlaybackRequestEnvironmentWithBaseEnvironment:completion:]


MPCExternalPlaybackControllerImplementation : NSObject <MPAVRoutingControllerDelegate, MFExternalPlaybackController, MPCExternalPlaybackRouter>
 @property  MPCPlaybackEngine *playbackEngine
 @property  MPCMediaFoundationTranslator *translator
 @property  MPAVRoutingController *routingController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCExternalPlaybackControllerImplementation playbackEngine]
  -[MPCExternalPlaybackControllerImplementation routingController]
  -[MPCExternalPlaybackControllerImplementation .cxx_destruct]
  -[MPCExternalPlaybackControllerImplementation translator]
  -[MPCExternalPlaybackControllerImplementation pickBestDeviceRoute]
  -[MPCExternalPlaybackControllerImplementation routingControllerExternalScreenTypeDidChange:]
  -[MPCExternalPlaybackControllerImplementation initWithPlaybackEngine:translator:]
  -[MPCExternalPlaybackControllerImplementation isExternalPlaybackAllowedForItem:]
  -[MPCExternalPlaybackControllerImplementation playerShouldUseAudiOnlyMode:item:externalScreenType:]
  -[MPCExternalPlaybackControllerImplementation exernalPlaybackRouteRestrictionForItem:route:isScreenMirroringActive:]
  -[MPCExternalPlaybackControllerImplementation configureExternalPlaybackForPlayer:queueItem:]


_MPCProtoRadioContentReferenceLibraryArtistContentReference : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoRadioContentReferenceLibraryArtistContentReference .cxx_destruct]
  -[_MPCProtoRadioContentReferenceLibraryArtistContentReference dictionaryRepresentation]
  -[_MPCProtoRadioContentReferenceLibraryArtistContentReference writeTo:]
  -[_MPCProtoRadioContentReferenceLibraryArtistContentReference isEqual:]
  -[_MPCProtoRadioContentReferenceLibraryArtistContentReference readFrom:]
  -[_MPCProtoRadioContentReferenceLibraryArtistContentReference copyWithZone:]


MPCJinglePlayActivityReportingController : MPCReportingController
 @property  ICPlayActivityController *playActivityController
 @property  BOOL shouldReportPlayActivityEvents

  // instance methods
  -[MPCJinglePlayActivityReportingController .cxx_destruct]
  -[MPCJinglePlayActivityReportingController init]
  -[MPCJinglePlayActivityReportingController completePendingPlayActivityEvents:forSessionToken:withResult:completionHandler:]
  -[MPCJinglePlayActivityReportingController dealloc]
  -[MPCJinglePlayActivityReportingController initWithWritingStyle:]
  -[MPCJinglePlayActivityReportingController playActivityController]
  -[MPCJinglePlayActivityReportingController _applicationWillTerminateNotification:]
  -[MPCJinglePlayActivityReportingController setShouldReportPlayActivityEvents:]
  -[MPCJinglePlayActivityReportingController _recordReportingEvents:]
  -[MPCJinglePlayActivityReportingController _captureNonCatalogAggregatePlayActivityEventWithNonCatalogAggregateEndTime:]
  -[MPCJinglePlayActivityReportingController _clearNonCatalogAggregatePlayActivityEventData]
  -[MPCJinglePlayActivityReportingController acquirePendingPlayActivityEventsForStoreAccountID:completionHandler:]
  -[MPCJinglePlayActivityReportingController shouldReportPlayActivityEvents]


MPCRadioArtworkDataSource : MPAbstractNetworkArtworkDataSource
  // class methods
  +[MPCRadioArtworkDataSource sharedRadioArtworkDataSource]

  // instance methods
  -[MPCRadioArtworkDataSource .cxx_destruct]
  -[MPCRadioArtworkDataSource init]
  -[MPCRadioArtworkDataSource cancelLoadingRepresentationForArtworkCatalog:]
  -[MPCRadioArtworkDataSource isRepresentation:bestRepresentationForArtworkCatalog:]
  -[MPCRadioArtworkDataSource requestForCatalog:size:]
  -[MPCRadioArtworkDataSource visualIdenticalityIdentifierForCatalog:]
  -[MPCRadioArtworkDataSource areRepresentationsAvailableForCatalog:]
  -[MPCRadioArtworkDataSource existingRepresentationForArtworkCatalog:]
  -[MPCRadioArtworkDataSource dealloc]
  -[MPCRadioArtworkDataSource _clearCache]
  -[MPCRadioArtworkDataSource loadRepresentationForArtworkCatalog:completionHandler:]
  -[MPCRadioArtworkDataSource _handleDidEnterBackgroundNotification:]
  -[MPCRadioArtworkDataSource _handleDidReceiveMemoryWarningNotification:]
  -[MPCRadioArtworkDataSource _handleWillEnterForegroundNotification:]
  -[MPCRadioArtworkDataSource _cacheArtworkRepresentation:forKey:]
  -[MPCRadioArtworkDataSource _setCacheSize:preserveExisting:]


MPCSharedListeningEvent : NSObject
 @property  MPCSharedListeningEventParticipant *participant
 @property  long long type
 @property  MPCSharedListeningSessionEvent *sessionEvent
 @property  MPCSharedListeningPlaybackEvent *playbackEvent
 @property  MPCSharedListeningQueueEvent *queueEvent
 @property  MPCSharedListeningReactionEvent *reactionEvent
 @property  MPCSharedListeningCustomEvent *customEvent

  // class methods
  +[MPCSharedListeningEvent eventWithPlaybackEvent:participant:]
  +[MPCSharedListeningEvent eventWithQueueEvent:participant:]
  +[MPCSharedListeningEvent eventWithReactionEvent:participant:]
  +[MPCSharedListeningEvent eventWithCustomEvent:participant:]
  +[MPCSharedListeningEvent eventWithSessionEvent:participant:]

  // instance methods
  -[MPCSharedListeningEvent .cxx_destruct]
  -[MPCSharedListeningEvent participant]
  -[MPCSharedListeningEvent type]
  -[MPCSharedListeningEvent _initWithType:participant:]
  -[MPCSharedListeningEvent sessionEvent]
  -[MPCSharedListeningEvent playbackEvent]
  -[MPCSharedListeningEvent queueEvent]
  -[MPCSharedListeningEvent reactionEvent]
  -[MPCSharedListeningEvent customEvent]


MPCSharedListeningEventParticipant : NSObject <NSCopying>
 @property  NSUUID *sharedListeningIdentifier
 @property  NSString *externalIdentifier

  // class methods
  +[MPCSharedListeningEventParticipant participantWithSharedListeningIdentifier:externalIdentifier:]

  // instance methods
  -[MPCSharedListeningEventParticipant .cxx_destruct]
  -[MPCSharedListeningEventParticipant externalIdentifier]
  -[MPCSharedListeningEventParticipant copyWithZone:]
  -[MPCSharedListeningEventParticipant sharedListeningIdentifier]


MPCSharedListeningCustomEvent : NSObject
 @property  NSString *localizedMessage

  // instance methods
  -[MPCSharedListeningCustomEvent .cxx_destruct]
  -[MPCSharedListeningCustomEvent localizedMessage]
  -[MPCSharedListeningCustomEvent initWithLocalizedMessage:]


MPCSharedListeningPlaybackEvent : NSObject
 @property  long long kind
 @property  MPModelGenericObject *item

  // instance methods
  -[MPCSharedListeningPlaybackEvent .cxx_destruct]
  -[MPCSharedListeningPlaybackEvent item]
  -[MPCSharedListeningPlaybackEvent initWithKind:]
  -[MPCSharedListeningPlaybackEvent kind]
  -[MPCSharedListeningPlaybackEvent initWithKind:item:]


MPCSharedListeningQueueEvent : NSObject
 @property  long long kind
 @property  MPCSharedListeningQueueEventContentAdded *addedContent
 @property  MPCSharedListeningQueueEventContentRemoved *removedContent
 @property  MPCSharedListeningQueueEventContentReordered *reorderedContent
 @property  MPCSharedListeningQueueEventContentReplaced *replacedContent
 @property  MPCSharedListeningQueueEventContentPlayedNow *playedNowContent
 @property  MPCSharedListeningQueueEventContentUpdatedMessage *contentUpdatedMessage
 @property  MPCSharedListeningQueueEventPlaybackModeChanged *playbackMode

  // class methods
  +[MPCSharedListeningQueueEvent queueEventWithPlaybackModeChanged:]
  +[MPCSharedListeningQueueEvent queueEventWithContentUpdatedMessage:]
  +[MPCSharedListeningQueueEvent queueEventWithAddedContent:]
  +[MPCSharedListeningQueueEvent queueEventWithPlayedNowContent:]
  +[MPCSharedListeningQueueEvent queueEventWithRemovedContent:]
  +[MPCSharedListeningQueueEvent queueEventWithReorderedContent:]
  +[MPCSharedListeningQueueEvent queueEventWithReplacedContent:]

  // instance methods
  -[MPCSharedListeningQueueEvent .cxx_destruct]
  -[MPCSharedListeningQueueEvent playbackMode]
  -[MPCSharedListeningQueueEvent kind]
  -[MPCSharedListeningQueueEvent contentUpdatedMessage]
  -[MPCSharedListeningQueueEvent addedContent]
  -[MPCSharedListeningQueueEvent removedContent]
  -[MPCSharedListeningQueueEvent reorderedContent]
  -[MPCSharedListeningQueueEvent replacedContent]
  -[MPCSharedListeningQueueEvent playedNowContent]


MPCSharedListeningQueueEventContentAdded : NSObject
 @property  MPModelGenericObject *container
 @property  NSArray *items

  // instance methods
  -[MPCSharedListeningQueueEventContentAdded container]
  -[MPCSharedListeningQueueEventContentAdded items]
  -[MPCSharedListeningQueueEventContentAdded .cxx_destruct]
  -[MPCSharedListeningQueueEventContentAdded initWithItems:container:]


MPCSharedListeningQueueEventContentPlayedNow : NSObject
 @property  MPModelGenericObject *container
 @property  NSArray *items
 @property  MPModelGenericObject *startItem

  // instance methods
  -[MPCSharedListeningQueueEventContentPlayedNow container]
  -[MPCSharedListeningQueueEventContentPlayedNow items]
  -[MPCSharedListeningQueueEventContentPlayedNow .cxx_destruct]
  -[MPCSharedListeningQueueEventContentPlayedNow startItem]
  -[MPCSharedListeningQueueEventContentPlayedNow initWithItems:container:startItem:]


MPCSharedListeningQueueEventContentRemoved : NSObject
 @property  MPModelGenericObject *item

  // instance methods
  -[MPCSharedListeningQueueEventContentRemoved initWithItem:]
  -[MPCSharedListeningQueueEventContentRemoved .cxx_destruct]
  -[MPCSharedListeningQueueEventContentRemoved item]


MPCSharedListeningQueueEventContentReordered : NSObject
 @property  MPModelGenericObject *item

  // instance methods
  -[MPCSharedListeningQueueEventContentReordered initWithItem:]
  -[MPCSharedListeningQueueEventContentReordered .cxx_destruct]
  -[MPCSharedListeningQueueEventContentReordered item]


MPCSharedListeningQueueEventContentReplaced : NSObject
 @property  MPModelGenericObject *startItem

  // instance methods
  -[MPCSharedListeningQueueEventContentReplaced .cxx_destruct]
  -[MPCSharedListeningQueueEventContentReplaced startItem]
  -[MPCSharedListeningQueueEventContentReplaced initWithStartItem:]


MPCSharedListeningQueueEventContentUpdatedMessage : NSObject
 @property  NSString *localizedTitle
 @property  NSString *localizedMessage

  // instance methods
  -[MPCSharedListeningQueueEventContentUpdatedMessage localizedTitle]
  -[MPCSharedListeningQueueEventContentUpdatedMessage .cxx_destruct]
  -[MPCSharedListeningQueueEventContentUpdatedMessage localizedMessage]
  -[MPCSharedListeningQueueEventContentUpdatedMessage initWithLocalizedTitle:localizedMessage:]


MPCSharedListeningQueueEventPlaybackModeChanged : NSObject
 @property  long long kind
 @property  @? shuffleType
 @property  @? repeatType
 @property  @? autoPlayEnabled

  // instance methods
  -[MPCSharedListeningQueueEventPlaybackModeChanged .cxx_destruct]
  -[MPCSharedListeningQueueEventPlaybackModeChanged kind]
  -[MPCSharedListeningQueueEventPlaybackModeChanged shuffleType]
  -[MPCSharedListeningQueueEventPlaybackModeChanged repeatType]
  -[MPCSharedListeningQueueEventPlaybackModeChanged initWithUpdatedShuffleType:]
  -[MPCSharedListeningQueueEventPlaybackModeChanged initWithUpdatedRepeatType:]
  -[MPCSharedListeningQueueEventPlaybackModeChanged initWithUpdatedAutoPlayEnabled:]
  -[MPCSharedListeningQueueEventPlaybackModeChanged autoPlayEnabled]


MPCSharedListeningReactionEvent : NSObject
 @property  NSString *reactionIdentifier
 @property  NSString *reaction
 @property  MPModelGenericObject *item

  // instance methods
  -[MPCSharedListeningReactionEvent .cxx_destruct]
  -[MPCSharedListeningReactionEvent reaction]
  -[MPCSharedListeningReactionEvent item]
  -[MPCSharedListeningReactionEvent reactionIdentifier]
  -[MPCSharedListeningReactionEvent initWithReaction:reactionIdentifier:item:]


MPCSharedListeningSessionEvent : NSObject
 @property  long long kind

  // instance methods
  -[MPCSharedListeningSessionEvent initWithKind:]
  -[MPCSharedListeningSessionEvent kind]


MPCAssistantSendCommand : NSObject
  // instance methods
  -[MPCAssistantSendCommand .cxx_destruct]
  -[MPCAssistantSendCommand init]
  -[MPCAssistantSendCommand _sendCommand:withOptions:toEndpoint:toDestination:completion:]
  -[MPCAssistantSendCommand _formGroupAndSendCommand:withOptions:toExternalDestination:completion:]
  -[MPCAssistantSendCommand _isAnyDeviceControllable:]
  -[MPCAssistantSendCommand _sendCommand:path:options:queue:completion:]
  -[MPCAssistantSendCommand _findEndpointFromEndpoints:byGroupLeader:]
  -[MPCAssistantSendCommand _checkForAccount:destination:origin:queue:completion:]
  -[MPCAssistantSendCommand sendMediaRemoteCommand:withOptions:toLocalDestination:completion:]
  -[MPCAssistantSendCommand sendMediaRemoteCommand:withOptions:toEndpointDestination:completion:]
  -[MPCAssistantSendCommand sendCommand:withOptions:toEndpoint:toDestination:completion:]


MPCAssistantSendCommandResult : NSObject
 @property  NSArray *returnStatuses
 @property  NSError *error
 @property  MRCommandResult *commandResult
 @property  NSNumber *devicesControlled

  // instance methods
  -[MPCAssistantSendCommandResult .cxx_destruct]
  -[MPCAssistantSendCommandResult commandResult]
  -[MPCAssistantSendCommandResult error]
  -[MPCAssistantSendCommandResult initWithCommandResult:error:]
  -[MPCAssistantSendCommandResult setDevicesControlled:]
  -[MPCAssistantSendCommandResult initWithReturnStatuses:error:]
  -[MPCAssistantSendCommandResult returnStatuses]
  -[MPCAssistantSendCommandResult devicesControlled]


MPCModelStorePlaybackItemsRequestAccumulatorImportResponse : NSObject
 @property  MPServerObjectDatabaseImportResult *serverObjectDatabaseImportResult
 @property  {MPCModelStorePlaybackItemsRequestAccumulatorResult=BBB} accumulatorImportResult

  // instance methods
  -[MPCModelStorePlaybackItemsRequestAccumulatorImportResponse .cxx_destruct]
  -[MPCModelStorePlaybackItemsRequestAccumulatorImportResponse initWitDatabaseImportResult:accumulatorImportResult:]
  -[MPCModelStorePlaybackItemsRequestAccumulatorImportResponse serverObjectDatabaseImportResult]
  -[MPCModelStorePlaybackItemsRequestAccumulatorImportResponse accumulatorImportResult]


MPCPlayerResponseTracklist : NSObject <NSObject>
 @property  MPCPlayerResponse *response
 @property  MPSectionedCollection *items
 @property  NSIndexPath *playingItemIndexPath
 @property  MPSectionedCollection *displayItems
 @property  long long playingItemGlobalIndex
 @property  long long globalItemCount
 @property  NSString *uniqueIdentifier
 @property  long long lastChangeDirection
 @property  long long upNextItemCount
 @property  long long explicitContentState
 @property  MPCPlayerResponseItem *playingItem
 @property  long long repeatType
 @property  long long shuffleType
 @property  long long actionAtQueueEnd
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlayerResponseTracklist resetCommandForPlayerPath:devices:]
  +[MPCPlayerResponseTracklist insertCommandForPlayerPath:devices:]

  // instance methods
  -[MPCPlayerResponseTracklist upNextItemCount]
  -[MPCPlayerResponseTracklist _determineChangeItemSupport]
  -[MPCPlayerResponseTracklist uniqueIdentifier]
  -[MPCPlayerResponseTracklist playingItemIndexPath]
  -[MPCPlayerResponseTracklist globalItemCount]
  -[MPCPlayerResponseTracklist items]
  -[MPCPlayerResponseTracklist .cxx_destruct]
  -[MPCPlayerResponseTracklist insertCommand]
  -[MPCPlayerResponseTracklist repeatCommand]
  -[MPCPlayerResponseTracklist _stateDumpObject]
  -[MPCPlayerResponseTracklist playingItemGlobalIndex]
  -[MPCPlayerResponseTracklist actionAtQueueEndCommand]
  -[MPCPlayerResponseTracklist initWithResponse:]
  -[MPCPlayerResponseTracklist changeItemCommand]
  -[MPCPlayerResponseTracklist actionAtQueueEnd]
  -[MPCPlayerResponseTracklist lastChangeDirection]
  -[MPCPlayerResponseTracklist response]
  -[MPCPlayerResponseTracklist playingItem]
  -[MPCPlayerResponseTracklist displayIndexPathForStructuredIndexPath:]
  -[MPCPlayerResponseTracklist displayItems]
  -[MPCPlayerResponseTracklist resetCommand]
  -[MPCPlayerResponseTracklist explicitContentState]
  -[MPCPlayerResponseTracklist structuredIndexPathForDisplayIndexPath:]
  -[MPCPlayerResponseTracklist shuffleType]
  -[MPCPlayerResponseTracklist repeatType]
  -[MPCPlayerResponseTracklist disableModificationsCommand]
  -[MPCPlayerResponseTracklist reorderCommand]
  -[MPCPlayerResponseTracklist shuffleCommand]


_MPCPlayerResponseTracklistDataSource : NSObject <MPLazySectionedCollectionDataSource>
 @property  MPCPlayerResponse *response
 @property  NSIndexPath *playingItemIndexPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerResponseTracklistDataSource sectionAtIndex:]
  -[_MPCPlayerResponseTracklistDataSource numberOfItemsInSection:]
  -[_MPCPlayerResponseTracklistDataSource playingItemIndexPath]
  -[_MPCPlayerResponseTracklistDataSource numberOfSections]
  -[_MPCPlayerResponseTracklistDataSource .cxx_destruct]
  -[_MPCPlayerResponseTracklistDataSource initWithResponse:playingItemIndexPath:]
  -[_MPCPlayerResponseTracklistDataSource setPlayingItemIndexPath:]
  -[_MPCPlayerResponseTracklistDataSource response]
  -[_MPCPlayerResponseTracklistDataSource itemAtIndexPath:]


_MPCPlayerResponseTracklistDisplayDataSource : NSObject <MPLazySectionedCollectionDataSource>
 @property  MPSectionedCollection *items
 @property  NSIndexPath *playingItemIndexPath
 @property  NSArray *sections
 @property  NSDictionary *sectionRanges
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerResponseTracklistDisplayDataSource initWithTracklistItems:playingItemIndexPath:]
  -[_MPCPlayerResponseTracklistDisplayDataSource sectionAtIndex:]
  -[_MPCPlayerResponseTracklistDisplayDataSource sections]
  -[_MPCPlayerResponseTracklistDisplayDataSource numberOfItemsInSection:]
  -[_MPCPlayerResponseTracklistDisplayDataSource playingItemIndexPath]
  -[_MPCPlayerResponseTracklistDisplayDataSource items]
  -[_MPCPlayerResponseTracklistDisplayDataSource numberOfSections]
  -[_MPCPlayerResponseTracklistDisplayDataSource .cxx_destruct]
  -[_MPCPlayerResponseTracklistDisplayDataSource sectionRanges]
  -[_MPCPlayerResponseTracklistDisplayDataSource displayIndexPathForStructuredIndexPath:]
  -[_MPCPlayerResponseTracklistDisplayDataSource itemAtIndexPath:]
  -[_MPCPlayerResponseTracklistDisplayDataSource structuredIndexPathForDisplayIndexPath:]


_MPCPlayerResetTracklistCommand : _MPCPlayerCommand <MPCPlayerResetTracklistCommand>
 @property  NSArray *devices
 @property  NSDictionary *supportedSpecializedQueues
 @property  BOOL supportsSetQueueCommand
 @property  NSSet *supportedQueueTypes
 @property  NSSet *supportedCustomDataQueueIdentifiers
 @property  NSArray *specializedIntents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerResetTracklistCommand clear]
  -[_MPCPlayerResetTracklistCommand setDevices:]
  -[_MPCPlayerResetTracklistCommand replaceWithPlaybackIntent:replaceIntent:]
  -[_MPCPlayerResetTracklistCommand devices]
  -[_MPCPlayerResetTracklistCommand .cxx_destruct]
  -[_MPCPlayerResetTracklistCommand setSupportedSpecializedQueues:]
  -[_MPCPlayerResetTracklistCommand setSupportedCustomDataQueueIdentifiers:]
  -[_MPCPlayerResetTracklistCommand specializedIntents]
  -[_MPCPlayerResetTracklistCommand clearUpNextItems]
  -[_MPCPlayerResetTracklistCommand replaceWithPlaybackIntent:]
  -[_MPCPlayerResetTracklistCommand supportedSpecializedQueues]
  -[_MPCPlayerResetTracklistCommand setSupportsSetQueueCommand:]
  -[_MPCPlayerResetTracklistCommand supportedQueueTypes]
  -[_MPCPlayerResetTracklistCommand supportedCustomDataQueueIdentifiers]
  -[_MPCPlayerResetTracklistCommand setSupportedQueueTypes:]
  -[_MPCPlayerResetTracklistCommand supportsSetQueueCommand]


_MPCPlayerInsertItemsCommand : _MPCPlayerCommand <MPCPlayerInsertItemsCommand>
 @property  NSArray *devices
 @property  BOOL supportsCreateStation
 @property  NSSet *supportedInsertionPositions
 @property  NSSet *supportedQueueTypes
 @property  NSSet *supportedCustomDataQueueIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerInsertItemsCommand setSupportedInsertionPositions:]
  -[_MPCPlayerInsertItemsCommand setDevices:]
  -[_MPCPlayerInsertItemsCommand devices]
  -[_MPCPlayerInsertItemsCommand .cxx_destruct]
  -[_MPCPlayerInsertItemsCommand setSupportedCustomDataQueueIdentifiers:]
  -[_MPCPlayerInsertItemsCommand supportedInsertionPositions]
  -[_MPCPlayerInsertItemsCommand supportedQueueTypes]
  -[_MPCPlayerInsertItemsCommand supportedCustomDataQueueIdentifiers]
  -[_MPCPlayerInsertItemsCommand setSupportedQueueTypes:]
  -[_MPCPlayerInsertItemsCommand setSupportsCreateStation:]
  -[_MPCPlayerInsertItemsCommand _createRadioStationCommandRequest]
  -[_MPCPlayerInsertItemsCommand _insertWithOptions:]
  -[_MPCPlayerInsertItemsCommand _isSupportedPlaybackIntent:forRemotePlayer:atInsertionPosition:]
  -[_MPCPlayerInsertItemsCommand supportsCreateStation]
  -[_MPCPlayerInsertItemsCommand insertAfterPlayingItemWithPlaybackIntent:]
  -[_MPCPlayerInsertItemsCommand insertPlaybackIntent:afterItem:]
  -[_MPCPlayerInsertItemsCommand insertAtEndOfTracklistWithPlaybackIntent:]


_MPCPlayerReorderItemsCommand : _MPCPlayerCommand <MPCPlayerReorderItemsCommand>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerReorderItemsCommand moveItem:afterItem:]
  -[_MPCPlayerReorderItemsCommand limitedDisplayIndexPathForMovingIndexPath:toProprosedIndexPath:]
  -[_MPCPlayerReorderItemsCommand limitedIndexPathForMovingIndexPath:toProprosedIndexPath:]
  -[_MPCPlayerReorderItemsCommand canMoveItem:]
  -[_MPCPlayerReorderItemsCommand moveItem:beforeItem:]


_MPCPlayerRepeatCommand : _MPCPlayerCommand <MPCPlayerRepeatCommand>
 @property  long long currentRepeatType
 @property  NSArray *supportedRepeatTypes
 @property  BOOL supportsChangeRepeat
 @property  BOOL supportsAdvanceRepeat
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerRepeatCommand setRepeatType:]
  -[_MPCPlayerRepeatCommand advance]
  -[_MPCPlayerRepeatCommand .cxx_destruct]
  -[_MPCPlayerRepeatCommand setCurrentRepeatType:]
  -[_MPCPlayerRepeatCommand setSupportedRepeatTypes:]
  -[_MPCPlayerRepeatCommand currentRepeatType]
  -[_MPCPlayerRepeatCommand setSupportsChangeRepeat:]
  -[_MPCPlayerRepeatCommand setSupportsAdvanceRepeat:]
  -[_MPCPlayerRepeatCommand supportsChangeRepeat]
  -[_MPCPlayerRepeatCommand supportsAdvanceRepeat]
  -[_MPCPlayerRepeatCommand supportedRepeatTypes]


_MPCPlayerShuffleCommand : _MPCPlayerCommand <MPCPlayerShuffleCommand>
 @property  long long currentShuffleType
 @property  NSArray *supportedShuffleTypes
 @property  BOOL supportsChangeShuffle
 @property  BOOL supportsAdvanceShuffle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerShuffleCommand advance]
  -[_MPCPlayerShuffleCommand .cxx_destruct]
  -[_MPCPlayerShuffleCommand setCurrentShuffleType:]
  -[_MPCPlayerShuffleCommand setSupportedShuffleTypes:]
  -[_MPCPlayerShuffleCommand currentShuffleType]
  -[_MPCPlayerShuffleCommand setShuffleType:]
  -[_MPCPlayerShuffleCommand setSupportsChangeShuffle:]
  -[_MPCPlayerShuffleCommand setSupportsAdvanceShuffle:]
  -[_MPCPlayerShuffleCommand supportsChangeShuffle]
  -[_MPCPlayerShuffleCommand supportsAdvanceShuffle]
  -[_MPCPlayerShuffleCommand supportedShuffleTypes]


_MPCPlayerActionAtQueueEndCommand : _MPCPlayerCommand <MPCPlayerActionAtQueueEndCommand>
 @property  long long actionAtQueueEnd
 @property  NSArray *supportedActions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerActionAtQueueEndCommand setQueueEndAction:]
  -[_MPCPlayerActionAtQueueEndCommand .cxx_destruct]
  -[_MPCPlayerActionAtQueueEndCommand supportedActions]
  -[_MPCPlayerActionAtQueueEndCommand actionAtQueueEnd]
  -[_MPCPlayerActionAtQueueEndCommand setSupportedActions:]
  -[_MPCPlayerActionAtQueueEndCommand setActionAtQueueEnd:]


_MPCPlayerChangeItemCommand : _MPCPlayerCommand <MPCPlayerChangeItemCommand>
 @property  unsigned long changeItemSupport
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerChangeItemCommand previousItemDeferringToPlaybackQueuePosition]
  -[_MPCPlayerChangeItemCommand initWithResponse:changeItemSupport:]
  -[_MPCPlayerChangeItemCommand previousSection]
  -[_MPCPlayerChangeItemCommand nextChapter]
  -[_MPCPlayerChangeItemCommand previousItem]
  -[_MPCPlayerChangeItemCommand changeToSection:]
  -[_MPCPlayerChangeItemCommand nextSection]
  -[_MPCPlayerChangeItemCommand changeToItem:]
  -[_MPCPlayerChangeItemCommand nextItem]
  -[_MPCPlayerChangeItemCommand changeItemSupport]
  -[_MPCPlayerChangeItemCommand previousChapter]


_MPCPlayerDisableModificationsCommand : _MPCPlayerCommand <MPCPlayerDisableModificationsCommand>
 @property  BOOL disabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerDisableModificationsCommand setDisabled:]
  -[_MPCPlayerDisableModificationsCommand isDisabled]
  -[_MPCPlayerDisableModificationsCommand _setDisabled:]


MPCQueueController : NSObject <MPShuffleableSectionedIdentifierListDelegate, MPSectionedIdentifierListAnnotationDelegate, MPCContinueListeningRadioQueueProviding, MPCPlaybackEngineEventObserving, MPArtworkDataSource, MPStartItemInfoProviding, MPCQueueItemProviding, MPAVQueueController, MSVSegmentedCoding, MPCQueueControllerCommandInterposingHost>
 @property  NSString *nextContentItemID
 @property  NSString *deferredNextContentItemAnchorID
 @property  NSError *restorationError
 @property  NSMutableDictionary *coderVersions
 @property  long long nextContentItemIDReason
 @property  long long state
 @property  long long autoPlayState
 @property  MPSectionedIdentifierListPosition *autoPlayEndPosition
 @property  BOOL autoPlayIsTriggered
 @property  NSString *restoreLastStartTimePositionToContentItemID
 @property  double lastSavedTime
 @property  MPIdentifierSet *missingIdentifierSetForDebugging
 @property  NSArray *previousSectionIDsForDebugging
 @property  NSString *currentStartItemIdentifier
 @property  NSString *revisionString
 @property  BOOL inSharedListeningMode
 @property  id rtcSessionHierarchyToken
 @property  MPShuffleableSectionedIdentifierList *identifierList
 @property  MPSectionedIdentifierList *autoPlayIdentifierList
 @property  NSMutableDictionary *dataSources
 @property  long long autoplayMode
 @property  MPCPlaybackEngine *playbackEngine
 @property  BOOL containsTransportableContent
 @property  BOOL currentItemFromAutoPlay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPAVItem *currentItem
 @property  NSString *uniqueIdentifier
 @property  BOOL hasUserMutations
 @property  <MPAVQueueControllerDelegate> *delegate
 @property  <MPAVQueueCoordinating> *queueCoordinator
 @property  long long displayCount
 @property  long long repeatType
 @property  long long shuffleType
 @property  BOOL autoPlayEnabled
 @property  unsigned long supportedInsertionPositions
 @property  BOOL userCanChangeShuffleAndRepeatType
 @property  BOOL allowsQueueModifications
 @property  BOOL userCanEnableAutoPlay
 @property  NSString *preferredFirstContentItemID

  // class methods
  +[MPCQueueController supportsSecureCoding]
  +[MPCQueueController describePlayer:]

  // instance methods
  -[MPCQueueController sessionDidEnd]
  -[MPCQueueController playbackEngine]
  -[MPCQueueController uniqueIdentifier]
  -[MPCQueueController initWithCoder:]
  -[MPCQueueController engine:didReachEndOfQueueWithReason:]
  -[MPCQueueController setRepeatType:]
  -[MPCQueueController engine:didChangeItemElapsedTime:rate:]
  -[MPCQueueController .cxx_destruct]
  -[MPCQueueController currentItem]
  -[MPCQueueController setDelegate:]
  -[MPCQueueController setState:]
  -[MPCQueueController queueCoordinator:failedToLoadItem:]
  -[MPCQueueController queueCoordinator:willLoadItem:]
  -[MPCQueueController queueCoordinator:didLoadItem:]
  -[MPCQueueController queueCoordinator:itemToFollowItem:]
  -[MPCQueueController queueCoordinatorDidChangeItems:]
  -[MPCQueueController reloadItemsKeepingCurrentItem:]
  -[MPCQueueController init]
  -[MPCQueueController cancelLoadingRepresentationForArtworkCatalog:]
  -[MPCQueueController isStartItem:]
  -[MPCQueueController isRepresentation:bestRepresentationForArtworkCatalog:]
  -[MPCQueueController reset]
  -[MPCQueueController supportedInsertionPositions]
  -[MPCQueueController state]
  -[MPCQueueController contentItemIDWithCurrentItemOffset:mode:didReachEnd:]
  -[MPCQueueController jumpToContentItemID:]
  -[MPCQueueController visualIdenticalityIdentifierForCatalog:]
  -[MPCQueueController queueCoordinator]
  -[MPCQueueController reloadWithPlaybackContext:completionHandler:]
  -[MPCQueueController setQueueCoordinator:]
  -[MPCQueueController currentItemDidChangeFromItem:toItem:]
  -[MPCQueueController jumpToContentItemID:userInitiated:]
  -[MPCQueueController delegate]
  -[MPCQueueController areRepresentationsAvailableForCatalog:]
  -[MPCQueueController reshuffle]
  -[MPCQueueController debugDescriptionForSection:]
  -[MPCQueueController debugDescriptionForItem:inSection:]
  -[MPCQueueController setCurrentItem:]
  -[MPCQueueController existingRepresentationForArtworkCatalog:]
  -[MPCQueueController dealloc]
  -[MPCQueueController setShuffleType:]
  -[MPCQueueController didDequeueShuffledItemsInSectionedIdentifierList:]
  -[MPCQueueController sectionedIdentifierList:dataSourceDidUpdateSection:]
  -[MPCQueueController sectionedIdentifierList:dataSourceDidChangeItems:inSection:]
  -[MPCQueueController sectionedIdentifierList:dataSourceDidAddItems:toSection:]
  -[MPCQueueController sectionedIdentifierList:dataSourceDidMoveItems:inSection:]
  -[MPCQueueController sectionedIdentifierList:dataSourceDidRemoveItems:fromSection:]
  -[MPCQueueController dataSources]
  -[MPCQueueController setDataSources:]
  -[MPCQueueController setPlaybackEngine:]
  -[MPCQueueController shuffleType]
  -[MPCQueueController repeatType]
  -[MPCQueueController loadRepresentationForArtworkCatalog:completionHandler:]
  -[MPCQueueController engine:didChangeToState:]
  -[MPCQueueController encodeWithCoder:]
  -[MPCQueueController autoPlayEnabled]
  -[MPCQueueController segmentForCodingKey:]
  -[MPCQueueController versionForSegment:]
  -[MPCQueueController didRestoreVersion:forSegment:]
  -[MPCQueueController displayCount]
  -[MPCQueueController setAutoPlayEnabled:]
  -[MPCQueueController resetSharedListening]
  -[MPCQueueController preferredFirstContentItemID]
  -[MPCQueueController addPlaybackContext:atPosition:jumpToIt:completion:]
  -[MPCQueueController playerItemDidBecomeCurrent:]
  -[MPCQueueController playerItemDidResignCurrent:]
  -[MPCQueueController itemForContentItemID:]
  -[MPCQueueController displayIndexForContentItemID:]
  -[MPCQueueController contentItemIDAtIndex:]
  -[MPCQueueController allowsQueueModifications]
  -[MPCQueueController setAllowsQueueModifications:]
  -[MPCQueueController removeContentItemID:completion:]
  -[MPCQueueController addPlaybackContext:atPosition:jumpToIt:userModification:completion:]
  -[MPCQueueController addPlaybackContext:afterContentItemID:completion:]
  -[MPCQueueController contentItemIDsFromOffset:toOffset:nowPlayingIndex:]
  -[MPCQueueController isInSharedListeningMode]
  -[MPCQueueController containsTransportableContent]
  -[MPCQueueController isCurrentItemFromAutoPlay]
  -[MPCQueueController canPreviousTrackForItem:]
  -[MPCQueueController canNextTrackForItem:]
  -[MPCQueueController userCanChangeShuffleAndRepeatType]
  -[MPCQueueController userCanEnableAutoPlay]
  -[MPCQueueController revisionString]
  -[MPCQueueController firstContentItemIDForItemIntersectingIdentifierSet:]
  -[MPCQueueController canJumpToContentItemID:]
  -[MPCQueueController jumpToFirstContentItem]
  -[MPCQueueController addPlaybackContext:atPosition:completion:]
  -[MPCQueueController moveContentItemID:beforeContentItemID:completion:]
  -[MPCQueueController moveContentItemID:afterContentItemID:completion:]
  -[MPCQueueController hasUserMutations]
  -[MPCQueueController _emitEventsForPlaybackBehaviorChange]
  -[MPCQueueController finalizeStateRestorationWithCompletion:]
  -[MPCQueueController clearUpNext]
  -[MPCQueueController _getSharedQueueTracklistWithCompletion:]
  -[MPCQueueController isPlaceholderItemForContentItemID:]
  -[MPCQueueController updateLocationDependentPropertiesForItem:]
  -[MPCQueueController _highQualityMusicStreamingOnCellularDidChange:]
  -[MPCQueueController _soundCheckEnabledChangedNotification:]
  -[MPCQueueController _stateDictionaryIncludingIdentifierList:]
  -[MPCQueueController identifierList]
  -[MPCQueueController autoPlayIdentifierList]
  -[MPCQueueController _isAutoPlayItem:inSection:]
  -[MPCQueueController _identifierListForSection:]
  -[MPCQueueController _transitionToAutoPlayState:]
  -[MPCQueueController _identifierListIDPairForQueueIDPair:]
  -[MPCQueueController _addAutoPlayPlaybackContext:atPosition:afterContentItemID:sectionIdentifier:actions:completion:]
  -[MPCQueueController _addPlaybackContext:atPosition:afterContentItemID:sectionIdentifier:actions:completion:]
  -[MPCQueueController _contentItemIDWithOffset:fromItem:mode:didReachEnd:]
  -[MPCQueueController incrementVersionForSegment:]
  -[MPCQueueController _queueIDPairForIdentifierListIDPair:]
  -[MPCQueueController _emitEventsForAddingPlaybackContext:sectionIdentifier:sharedListeningContainerInfo:]
  -[MPCQueueController setCurrentStartItemIdentifier:]
  -[MPCQueueController restorationError]
  -[MPCQueueController _itemForContentItemID:allowReuse:]
  -[MPCQueueController _firstContentItemID]
  -[MPCQueueController setNextContentItemIDReason:]
  -[MPCQueueController _currentItemDidChangeFromItem:toItem:]
  -[MPCQueueController _allDataSourcesSupportInsertionPositionLast]
  -[MPCQueueController _endSynchronizedPlayback]
  -[MPCQueueController resetWithIdentifier:]
  -[MPCQueueController _loadItemsAfterItemsDeletedIfNeededDeletedItemsCount:]
  -[MPCQueueController _nextValidIdentifierPairStartingAtContentItemID:wasInvalid:]
  -[MPCQueueController _itemForPair:]
  -[MPCQueueController _loadAdditionalItemsIfNeededForDataSourceState:preferredItemCount:completion:]
  -[MPCQueueController _accountForAutoPlay]
  -[MPCQueueController queueReferencesWithMaxCount:]
  -[MPCQueueController _emitEventsForItemChangeFromItem:toCurrentItem:]
  -[MPCQueueController currentStartItemIdentifier]
  -[MPCQueueController _firstContentItemIDInSection:]
  -[MPCQueueController _applyVolumeNormalizationForQueuedItems]
  -[MPCQueueController deferredNextContentItemAnchorID]
  -[MPCQueueController _findDataSourceToLoadItemsAfterItem:sectionIdentifier:withLoadingBlock:]
  -[MPCQueueController _privateListeningSourceForContext:]
  -[MPCQueueController _autoplayMode]
  -[MPCQueueController _findDataSourceToLoadItemsAfterItem:deletedItemsCount:sectionIdentifier:withLoadingBlock:]
  -[MPCQueueController itemForContentItemID:allowReuse:]
  -[MPCQueueController itemToFollowItem:direction:distance:jumpToItem:allowReuse:]
  -[MPCQueueController canSkipInDirection:fromQueueItem:]
  -[MPCQueueController updatePlayerPlaybackCoordinator:]
  -[MPCQueueController emitEventsForParticipants:localUserIdentifier:]
  -[MPCQueueController emitEventsForAddedSharedListeningContainerInfo:]
  -[MPCQueueController emitSharedListeningEvent:]
  -[MPCQueueController explicitContentStateDidChange:]
  -[MPCQueueController requestedPropertySetForEvents]
  -[MPCQueueController sharedCurrentItemChangedToItem:inSection:byParticipant:]
  -[MPCQueueController _loadAdditionalItemsIfNeededForDataSourceState:withCount:withCompletion:]
  -[MPCQueueController nextContentItemID]
  -[MPCQueueController setNextContentItemID:]
  -[MPCQueueController setDeferredNextContentItemAnchorID:]
  -[MPCQueueController setRestorationError:]
  -[MPCQueueController coderVersions]
  -[MPCQueueController setCoderVersions:]
  -[MPCQueueController nextContentItemIDReason]
  -[MPCQueueController autoPlayState]
  -[MPCQueueController setAutoPlayState:]
  -[MPCQueueController autoPlayEndPosition]
  -[MPCQueueController setAutoPlayEndPosition:]
  -[MPCQueueController autoPlayIsTriggered]
  -[MPCQueueController setAutoPlayIsTriggered:]
  -[MPCQueueController restoreLastStartTimePositionToContentItemID]
  -[MPCQueueController setRestoreLastStartTimePositionToContentItemID:]
  -[MPCQueueController lastSavedTime]
  -[MPCQueueController missingIdentifierSetForDebugging]
  -[MPCQueueController setMissingIdentifierSetForDebugging:]
  -[MPCQueueController previousSectionIDsForDebugging]
  -[MPCQueueController setPreviousSectionIDsForDebugging:]
  -[MPCQueueController setInSharedListeningMode:]
  -[MPCQueueController rtcSessionHierarchyToken]
  -[MPCQueueController setRtcSessionHierarchyToken:]
  -[MPCQueueController setIdentifierList:]
  -[MPCQueueController setAutoPlayIdentifierList:]


_MPCQueueControllerEnumerator : NSEnumerator
 @property  MPCQueueController *queueController
 @property  long long mode
 @property  unsigned long options
 @property  NSEnumerator *enumerator
 @property  MPSectionedIdentifierListPosition *startPosition
 @property  MPSectionedIdentifierListPosition *endPosition

  // class methods
  +[_MPCQueueControllerEnumerator enumeratorWithQueueController:mode:options:startPosition:endPosition:]

  // instance methods
  -[_MPCQueueControllerEnumerator nextObject]
  -[_MPCQueueControllerEnumerator options]
  -[_MPCQueueControllerEnumerator enumerator]
  -[_MPCQueueControllerEnumerator .cxx_destruct]
  -[_MPCQueueControllerEnumerator queueController]
  -[_MPCQueueControllerEnumerator endPosition]
  -[_MPCQueueControllerEnumerator _init]
  -[_MPCQueueControllerEnumerator mode]
  -[_MPCQueueControllerEnumerator startPosition]
  -[_MPCQueueControllerEnumerator _buildEnumerator]


_MPCAutoPlayEnumerationResult : NSObject <MPSectionedIdentifierListEnumerationItem>
 @property  NSString *sectionIdentifier
 @property  NSString *itemIdentifier
 @property  BOOL removed
 @property  long long branchDepth
 @property  long long entryType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCAutoPlayEnumerationResult sectionIdentifier]
  -[_MPCAutoPlayEnumerationResult entryType]
  -[_MPCAutoPlayEnumerationResult itemIdentifier]
  -[_MPCAutoPlayEnumerationResult .cxx_destruct]
  -[_MPCAutoPlayEnumerationResult itemResult]
  -[_MPCAutoPlayEnumerationResult isRemoved]
  -[_MPCAutoPlayEnumerationResult branchDepth]
  -[_MPCAutoPlayEnumerationResult trackingEntryResult]
  -[_MPCAutoPlayEnumerationResult initWithSectionIdentifier:]


MPCQueueControllerDataSourceLoadRequest : NSObject
 @property  long long preferredItemCount

  // instance methods
  -[MPCQueueControllerDataSourceLoadRequest setPreferredItemCount:]
  -[MPCQueueControllerDataSourceLoadRequest preferredItemCount]


MPCReportingPlaybackEnvironmentPropertiesLoader : NSObject <MPCReportingIdentityPropertiesLoading>
 @property  MPCPlaybackRequestEnvironment *playbackRequestEnvironment
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCReportingPlaybackEnvironmentPropertiesLoader .cxx_destruct]
  -[MPCReportingPlaybackEnvironmentPropertiesLoader playbackRequestEnvironment]
  -[MPCReportingPlaybackEnvironmentPropertiesLoader initWithPlaybackRequestEnvironment:]
  -[MPCReportingPlaybackEnvironmentPropertiesLoader loadReportingIdentityPropertiesWithCompletionHandler:]
  -[MPCReportingPlaybackEnvironmentPropertiesLoader _getHasSubscriptionPlaybackCapabilityForUserIdentity:completion:]


MPCSharedListeningQueueFeeder : MPCModelQueueFeeder <ICLiveLinkDelegate, AVPlayerPlaybackCoordinatorDelegate, MPCQueueControllerCommandInterposing>
 @property  long long state
 @property  ICLiveLink *liveLink
 @property  NSString *completionStartItemIdentifier
 @property  NSError *completionError
 @property  @? initialQueueCompletion
 @property  MPCPlaybackRequestEnvironment *playbackRequestEnvironment
 @property  MPPropertySet *requestedPropertySet
 @property  NSMutableArray *pendingActions
 @property  NSMutableSet *knownContainerIDs
 @property  long long lastKnownExplicitContentState
 @property  BOOL shouldRefreshBeforeActive
 @property  NSString *deferredDirectCurrentItemIdentifier
 @property  ICLiveLinkIdentity *deferredDirectCurrentItemParticipant
 @property  BOOL hasPendingPlayNowInFlight
 @property  NSString *deferredPlayNowCurrentItemIdentifier
 @property  AVPlayerPlaybackCoordinator *playbackCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MPCQueueControllerCommandInterposingHost> *interposingHost
 @property  NSString *sharedSessionIdentifier
 @property  long long queueExplicitContentState
 @property  BOOL containsLiveStream
 @property  BOOL containsTransportableContent

  // instance methods
  -[MPCSharedListeningQueueFeeder _transitionToState:]
  -[MPCSharedListeningQueueFeeder removeItem:]
  -[MPCSharedListeningQueueFeeder setPlaybackRequestEnvironment:]
  -[MPCSharedListeningQueueFeeder _responseQueue]
  -[MPCSharedListeningQueueFeeder .cxx_destruct]
  -[MPCSharedListeningQueueFeeder moveItem:afterItem:]
  -[MPCSharedListeningQueueFeeder requestedPropertySet]
  -[MPCSharedListeningQueueFeeder init]
  -[MPCSharedListeningQueueFeeder setCompletionError:]
  -[MPCSharedListeningQueueFeeder completionError]
  -[MPCSharedListeningQueueFeeder state]
  -[MPCSharedListeningQueueFeeder playbackRequestEnvironment]
  -[MPCSharedListeningQueueFeeder liveLink]
  -[MPCSharedListeningQueueFeeder _allowsExplicitContentDidChangeNotification:]
  -[MPCSharedListeningQueueFeeder playbackCoordinator:identifierForPlayerItem:]
  -[MPCSharedListeningQueueFeeder playbackCoordinator]
  -[MPCSharedListeningQueueFeeder didStopLiveLink:]
  -[MPCSharedListeningQueueFeeder liveLink:didReceiveDirectCurrentItemChanged:fromParticipant:]
  -[MPCSharedListeningQueueFeeder liveLink:didReceiveEvent:]
  -[MPCSharedListeningQueueFeeder liveLink:didUpdateParticipants:]
  -[MPCSharedListeningQueueFeeder liveLink:didUpdateQueue:]
  -[MPCSharedListeningQueueFeeder liveLink:didEncounterError:willRetry:]
  -[MPCSharedListeningQueueFeeder didStartLiveLink:]
  -[MPCSharedListeningQueueFeeder liveLinkDidReconnect:]
  -[MPCSharedListeningQueueFeeder endSynchronizedPlayback]
  -[MPCSharedListeningQueueFeeder pendingActions]
  -[MPCSharedListeningQueueFeeder setPendingActions:]
  -[MPCSharedListeningQueueFeeder setLiveLink:]
  -[MPCSharedListeningQueueFeeder loadPlaybackContext:completion:]
  -[MPCSharedListeningQueueFeeder _didUpdateToResponse:]
  -[MPCSharedListeningQueueFeeder updatePlaybackCoordinator:]
  -[MPCSharedListeningQueueFeeder moveItem:beforeItem:]
  -[MPCSharedListeningQueueFeeder isValidContainerIdentifier:]
  -[MPCSharedListeningQueueFeeder containerInfoForItem:]
  -[MPCSharedListeningQueueFeeder addPlaybackContext:atPosition:afterItem:actions:completion:]
  -[MPCSharedListeningQueueFeeder didJumpToItem:]
  -[MPCSharedListeningQueueFeeder interposingHost]
  -[MPCSharedListeningQueueFeeder setInterposingHost:]
  -[MPCSharedListeningQueueFeeder sharedSessionIdentifier]
  -[MPCSharedListeningQueueFeeder queueExplicitContentState]
  -[MPCSharedListeningQueueFeeder setPlaybackCoordinator:]
  -[MPCSharedListeningQueueFeeder _updatePlayerLiveLinkConnection]
  -[MPCSharedListeningQueueFeeder _emitNewContainerIfNeededForResponse:]
  -[MPCSharedListeningQueueFeeder _dequeuePendingActions]
  -[MPCSharedListeningQueueFeeder _ICSharedListeningForMPSILItemIdentifier:]
  -[MPCSharedListeningQueueFeeder _MPSILItemIdentifierForICSharedListeningItemIdentifier:]
  -[MPCSharedListeningQueueFeeder _enqueuePendingActionWithLabel:itemIdentifier:block:]
  -[MPCSharedListeningQueueFeeder _handleUpdatedSharedListeningQueue:]
  -[MPCSharedListeningQueueFeeder setDeferredDirectCurrentItemIdentifier:]
  -[MPCSharedListeningQueueFeeder setDeferredDirectCurrentItemParticipant:]
  -[MPCSharedListeningQueueFeeder _handleDirectCurrentItemChangedToItemIdentifier:participant:]
  -[MPCSharedListeningQueueFeeder _requiredItemIdentifierForEvent:]
  -[MPCSharedListeningQueueFeeder _mpcSharedListeningEventForICLiveLinkEvent:]
  -[MPCSharedListeningQueueFeeder _purgePendingActionsWithLabel:]
  -[MPCSharedListeningQueueFeeder _sectionedCollectionForQueue:]
  -[MPCSharedListeningQueueFeeder _playbackItemsRequestForQueue:]
  -[MPCSharedListeningQueueFeeder completionStartItemIdentifier]
  -[MPCSharedListeningQueueFeeder setCompletionStartItemIdentifier:]
  -[MPCSharedListeningQueueFeeder initialQueueCompletion]
  -[MPCSharedListeningQueueFeeder setRequestedPropertySet:]
  -[MPCSharedListeningQueueFeeder knownContainerIDs]
  -[MPCSharedListeningQueueFeeder setKnownContainerIDs:]
  -[MPCSharedListeningQueueFeeder lastKnownExplicitContentState]
  -[MPCSharedListeningQueueFeeder setLastKnownExplicitContentState:]
  -[MPCSharedListeningQueueFeeder shouldRefreshBeforeActive]
  -[MPCSharedListeningQueueFeeder setShouldRefreshBeforeActive:]
  -[MPCSharedListeningQueueFeeder deferredDirectCurrentItemIdentifier]
  -[MPCSharedListeningQueueFeeder deferredDirectCurrentItemParticipant]
  -[MPCSharedListeningQueueFeeder hasPendingPlayNowInFlight]
  -[MPCSharedListeningQueueFeeder setHasPendingPlayNowInFlight:]
  -[MPCSharedListeningQueueFeeder deferredPlayNowCurrentItemIdentifier]
  -[MPCSharedListeningQueueFeeder setDeferredPlayNowCurrentItemIdentifier:]


MPCSharedListeningContainerInfo : NSObject
 @property  NSString *identifier
 @property  MPModelGenericObject *modelObject
 @property  NSString *featureName

  // instance methods
  -[MPCSharedListeningContainerInfo .cxx_destruct]
  -[MPCSharedListeningContainerInfo setModelObject:]
  -[MPCSharedListeningContainerInfo identifier]
  -[MPCSharedListeningContainerInfo setIdentifier:]
  -[MPCSharedListeningContainerInfo featureName]
  -[MPCSharedListeningContainerInfo setFeatureName:]
  -[MPCSharedListeningContainerInfo modelObject]


_MPCSLQFPendingAction : NSObject
 @property  NSString *label
 @property  NSString *itemIdentifier
 @property  NSDate *expirationDate
 @property  @? block

  // instance methods
  -[_MPCSLQFPendingAction setBlock:]
  -[_MPCSLQFPendingAction label]
  -[_MPCSLQFPendingAction setItemIdentifier:]
  -[_MPCSLQFPendingAction itemIdentifier]
  -[_MPCSLQFPendingAction .cxx_destruct]
  -[_MPCSLQFPendingAction setExpirationDate:]
  -[_MPCSLQFPendingAction setLabel:]
  -[_MPCSLQFPendingAction expirationDate]
  -[_MPCSLQFPendingAction block]


MPCPlaybackDefaultsImplementation : NSObject <MFPlaybackDefaults>
 @property  MPPlaybackUserDefaults *userDefaults
 @property  BOOL shouldPreroll

  // instance methods
  -[MPCPlaybackDefaultsImplementation setUserDefaults:]
  -[MPCPlaybackDefaultsImplementation .cxx_destruct]
  -[MPCPlaybackDefaultsImplementation userDefaults]
  -[MPCPlaybackDefaultsImplementation shouldPreroll]
  -[MPCPlaybackDefaultsImplementation initWithPlaybackUserDefaults:]


MPCPlayPerfAnalytics : NSObject
 @property  NSString *identifier
 @property  MPCWaitForLikelyToKeepUp *waitForLikelyToKeepUpSignpost
 @property  MPCWaitForReadyToPlaySignpost *waitForReadyToPlaySignpost
 @property  MPCPlayToSetRateSignpost *playToSetRateSignpost
 @property  MPCSetRateToEffectiveRateSignpost *setRateToEffectiveRateSignpost

  // class methods
  +[MPCPlayPerfAnalytics playPerfAnalyticsWithIdentifier:willPlayImmediately:]

  // instance methods
  -[MPCPlayPerfAnalytics initWithIdentifier:]
  -[MPCPlayPerfAnalytics .cxx_destruct]
  -[MPCPlayPerfAnalytics identifier]
  -[MPCPlayPerfAnalytics setIdentifier:]
  -[MPCPlayPerfAnalytics didReceivePlayRequest]
  -[MPCPlayPerfAnalytics itemDidBecomeCurrent:]
  -[MPCPlayPerfAnalytics itemDidFailToLoad:error:]
  -[MPCPlayPerfAnalytics itemIsReadyToPlay:]
  -[MPCPlayPerfAnalytics playbackDidStopForItem:]
  -[MPCPlayPerfAnalytics playbackRateDidChangeForItem:rate:]
  -[MPCPlayPerfAnalytics firstFrameWillRenderForItem:atDate:]
  -[MPCPlayPerfAnalytics playbackIsLikelyToKeepUp:forItem:]
  -[MPCPlayPerfAnalytics setPlayToSetRateSignpost:]
  -[MPCPlayPerfAnalytics setWaitForLikelyToKeepUpSignpost:]
  -[MPCPlayPerfAnalytics setWaitForReadyToPlaySignpost:]
  -[MPCPlayPerfAnalytics waitForLikelyToKeepUpSignpost]
  -[MPCPlayPerfAnalytics waitForReadyToPlaySignpost]
  -[MPCPlayPerfAnalytics playToSetRateSignpost]
  -[MPCPlayPerfAnalytics setRateToEffectiveRateSignpost]
  -[MPCPlayPerfAnalytics setSetRateToEffectiveRateSignpost:]


_MPCProtoRadioContentReferenceStoreContentReference : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoRadioContentReferenceStoreContentReference dictionaryRepresentation]
  -[_MPCProtoRadioContentReferenceStoreContentReference writeTo:]
  -[_MPCProtoRadioContentReferenceStoreContentReference isEqual:]
  -[_MPCProtoRadioContentReferenceStoreContentReference readFrom:]
  -[_MPCProtoRadioContentReferenceStoreContentReference copyWithZone:]


_MPCAVController : MPAVController <MPCPlaybackEngineImplementation>
 @property  NSString *firstPlaybackItemIdentifier
 @property  NSMutableSet *failedItemsIdentifiers
 @property  MPCPlaybackEngine *playbackEngine
 @property  AVPlayerLayer *playerLayer
 @property  long long actionAtQueueEnd
 @property  <MPAVQueueController> *queueController
 @property  MPAVItem *currentItem
 @property  double currentTime
 @property  float currentRate
 @property  long long state
 @property  long long stateBeforeInterruption
 @property  BOOL hasPlayedSuccessfully
 @property  BOOL autoPlayWhenLikelyToKeepUp
 @property  BOOL reloadingPlaybackContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPCAVController prefersApplicationAudioSession]

  // instance methods
  -[_MPCAVController _setState:]
  -[_MPCAVController queueController:didChangeActionAtQueueEnd:]
  -[_MPCAVController playerLayer]
  -[_MPCAVController playbackEngine]
  -[_MPCAVController loadSessionWithQueueController:completionHandler:]
  -[_MPCAVController .cxx_destruct]
  -[_MPCAVController _updateStateForPlaybackPrevention]
  -[_MPCAVController isReloadingPlaybackContext]
  -[_MPCAVController endPlayback]
  -[_MPCAVController queueController:didChangeRepeatType:]
  -[_MPCAVController hasPlayedSuccessfully]
  -[_MPCAVController _contentsChanged]
  -[_MPCAVController _setQueueController:deferItemLoading:]
  -[_MPCAVController actionAtQueueEnd]
  -[_MPCAVController queueController:didChangeShuffleType:]
  -[_MPCAVController _queueDidEndWithReason:lastItem:]
  -[_MPCAVController togglePlaybackWithOptions:]
  -[_MPCAVController _connectAVPlayer]
  -[_MPCAVController reloadWithPlaybackContext:identifier:completionHandler:]
  -[_MPCAVController playbackHasStartedForItem:]
  -[_MPCAVController _itemWillChange:]
  -[_MPCAVController _itemDidSignificantlyChangeElapsedTime:rate:]
  -[_MPCAVController _connectAVPlayerDeferringItemLoading:]
  -[_MPCAVController _expectedAssetTypesForPlaybackMode:]
  -[_MPCAVController _configureAudioSession]
  -[_MPCAVController _itemDidChange:]
  -[_MPCAVController _streamBufferFull:]
  -[_MPCAVController _streamLikelyToKeepUp:]
  -[_MPCAVController _itemPlaybackDidEndNotification:]
  -[_MPCAVController handlePlaybackErrorWithUserInfo:]
  -[_MPCAVController _enforcingPolicy:]
  -[_MPCAVController playWithOptions:]
  -[_MPCAVController initWithPlaybackEngine:]
  -[_MPCAVController replaceCurrentItemWithPlaybackContext:identifier:completionHandler:]
  -[_MPCAVController setActionAtQueueEnd:]
  -[_MPCAVController currentRate]
  -[_MPCAVController queueController:didIncrementVersionForSegment:]
  -[_MPCAVController updateAudioSession]
  -[_MPCAVController failedItemsIdentifiers]
  -[_MPCAVController setFailedItemsIdentifiers:]
  -[_MPCAVController _playbackUserDefaultsEQPresetDidChangeNotification:]
  -[_MPCAVController setFirstPlaybackItemIdentifier:]
  -[_MPCAVController firstPlaybackItemIdentifier]
  -[_MPCAVController _networkPolicyItemCellularRestrictedNotification:]


MPCPrivateListeningStateSource : NSObject <NSCopying, NSSecureCoding>
 @property  NSNumber *currentValue
 @property  NSNumber *overrideValue
 @property  long long sourceType

  // class methods
  +[MPCPrivateListeningStateSource supportsSecureCoding]
  +[MPCPrivateListeningStateSource staticSourceWithValue:]
  +[MPCPrivateListeningStateSource localDeviceSource]
  +[MPCPrivateListeningStateSource sourceWithUserIdentity:]

  // instance methods
  -[MPCPrivateListeningStateSource currentValue]
  -[MPCPrivateListeningStateSource sourceType]
  -[MPCPrivateListeningStateSource initWithCoder:]
  -[MPCPrivateListeningStateSource .cxx_destruct]
  -[MPCPrivateListeningStateSource _init]
  -[MPCPrivateListeningStateSource copyWithZone:]
  -[MPCPrivateListeningStateSource encodeWithCoder:]
  -[MPCPrivateListeningStateSource overrideValue]
  -[MPCPrivateListeningStateSource setOverrideValue:]


_MPCPrivateListeningStateLocalDeviceSource : MPCPrivateListeningStateSource
  // instance methods
  -[_MPCPrivateListeningStateLocalDeviceSource currentValue]
  -[_MPCPrivateListeningStateLocalDeviceSource sourceType]


_MPCPrivateListeningStateStaticSource : MPCPrivateListeningStateSource
  // class methods
  +[_MPCPrivateListeningStateStaticSource supportsSecureCoding]

  // instance methods
  -[_MPCPrivateListeningStateStaticSource currentValue]
  -[_MPCPrivateListeningStateStaticSource sourceType]
  -[_MPCPrivateListeningStateStaticSource initWithCoder:]
  -[_MPCPrivateListeningStateStaticSource _initWithValue:]
  -[_MPCPrivateListeningStateStaticSource .cxx_destruct]
  -[_MPCPrivateListeningStateStaticSource encodeWithCoder:]


_MPCPrivateListeningStateUserIdentitySource : MPCPrivateListeningStateSource
  // class methods
  +[_MPCPrivateListeningStateUserIdentitySource sharedAccessQueue]
  +[_MPCPrivateListeningStateUserIdentitySource supportsSecureCoding]

  // instance methods
  -[_MPCPrivateListeningStateUserIdentitySource currentValue]
  -[_MPCPrivateListeningStateUserIdentitySource sourceType]
  -[_MPCPrivateListeningStateUserIdentitySource initWithCoder:]
  -[_MPCPrivateListeningStateUserIdentitySource .cxx_destruct]
  -[_MPCPrivateListeningStateUserIdentitySource _initWithUserIdentity:]
  -[_MPCPrivateListeningStateUserIdentitySource _handleHomeUserPrivateListeningDidChangeNotification:]
  -[_MPCPrivateListeningStateUserIdentitySource _handleUserIdentityStoreDidChangeNotification:]
  -[_MPCPrivateListeningStateUserIdentitySource dealloc]
  -[_MPCPrivateListeningStateUserIdentitySource _loadCurrentValueFromIdentityProperties]
  -[_MPCPrivateListeningStateUserIdentitySource encodeWithCoder:]


MPCAssistantEndpointContext : MPCAssistantContext
 @property  NSObject<OS_dispatch_group> *modificationInProgress

  // instance methods
  -[MPCAssistantEndpointContext .cxx_destruct]
  -[MPCAssistantEndpointContext init]
  -[MPCAssistantEndpointContext modifySystemMusicContextForEndpointDestination:completion:]
  -[MPCAssistantEndpointContext _modifyOutputDevices:onEndpoint:completion:]
  -[MPCAssistantEndpointContext _discoverLocalEndpointFromDeviceInfo:completion:]
  -[MPCAssistantEndpointContext _updateDiscoverableDeviceList:deviceInfo:completion:]
  -[MPCAssistantEndpointContext shouldSearchForLogicalDevices]
  -[MPCAssistantEndpointContext _discoverLocalEndpointFromStereoPairUsingDeviceInfo:completion:]
  -[MPCAssistantEndpointContext modifySystemMusicContextForDestination:completion:]
  -[MPCAssistantEndpointContext modifySystemMusicContextForEndpointDestination:discoveryHandler:completion:]
  -[MPCAssistantEndpointContext modificationInProgress]
  -[MPCAssistantEndpointContext setModificationInProgress:]


MPCPlayerResponseItem : NSObject <MPCPlayerResponseItemMusicAudio>
 @property  MPCPlayerResponse *response
 @property  NSIndexPath *indexPath
 @property  MPModelGenericObject *metadataObject
 @property  MPCPlayerResponseParticipant *enqueueingParticipant
 @property  BOOL placeholder
 @property  BOOL autoPlay
 @property  NSString *contentItemIdentifier
 @property  long long revision
 @property  {?=dddddffBB} duration
 @property  NSString *localizedDurationString
 @property  NSString *explicitBadge
 @property  NSArray *languageOptionGroups
 @property  <MPCPlayerResponseItemMusicAudio> *musicAudio
 @property  MPCPlayerAudioFormat *preferredFormat
 @property  MPCPlayerAudioFormat *activeFormat
 @property  unsigned long preferredTiers
 @property  long long activeFormatJustification
 @property  NSArray *alternateFormats
 @property  MPCPlayerAudioRoute *audioRoute
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCPlayerResponseItem localizedDurationString]
  -[MPCPlayerResponseItem preferredFormat]
  -[MPCPlayerResponseItem audioRoute]
  -[MPCPlayerResponseItem likeCommand]
  -[MPCPlayerResponseItem activeFormatJustification]
  -[MPCPlayerResponseItem activeFormat]
  -[MPCPlayerResponseItem rateCommand]
  -[MPCPlayerResponseItem initWithModelGenericObject:indexPath:response:]
  -[MPCPlayerResponseItem playbackRateCommand]
  -[MPCPlayerResponseItem isAutoPlay]
  -[MPCPlayerResponseItem .cxx_destruct]
  -[MPCPlayerResponseItem seekCommand]
  -[MPCPlayerResponseItem explicitBadge]
  -[MPCPlayerResponseItem musicAudio]
  -[MPCPlayerResponseItem remove]
  -[MPCPlayerResponseItem wishlistCommand]
  -[MPCPlayerResponseItem enqueueingParticipant]
  -[MPCPlayerResponseItem languageOptionGroups]
  -[MPCPlayerResponseItem contentItemIdentifier]
  -[MPCPlayerResponseItem _determineSeekSupport]
  -[MPCPlayerResponseItem indexPath]
  -[MPCPlayerResponseItem _stateDumpObject]
  -[MPCPlayerResponseItem switchToAlternativeFormat:]
  -[MPCPlayerResponseItem _buildLanguageOptionGroups:currentLanguageOptions:]
  -[MPCPlayerResponseItem preferredTiers]
  -[MPCPlayerResponseItem response]
  -[MPCPlayerResponseItem revision]
  -[MPCPlayerResponseItem metadataObject]
  -[MPCPlayerResponseItem isPlaceholder]
  -[MPCPlayerResponseItem _feedbackCommandWithMediaRemoteCommand:]
  -[MPCPlayerResponseItem alternateFormats]
  -[MPCPlayerResponseItem dislikeCommand]
  -[MPCPlayerResponseItem duration]


_MPCPlayerItemCommand : _MPCPlayerCommand
 @property  NSString *contentItemID

  // instance methods
  -[_MPCPlayerItemCommand .cxx_destruct]
  -[_MPCPlayerItemCommand contentItemID]
  -[_MPCPlayerItemCommand setContentItemID:]


_MPCPlayerSeekCommand : _MPCPlayerItemCommand <MPCPlayerSeekCommand>
 @property  unsigned long seekSupport
 @property  BOOL prefersNegativeBackwardSkipIntervals
 @property  NSArray *preferredBackwardJumpIntervals
 @property  NSArray *preferredForwardJumpIntervals
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerSeekCommand initWithResponse:seekSupport:]
  -[_MPCPlayerSeekCommand changePositionToElapsedInterval:]
  -[_MPCPlayerSeekCommand .cxx_destruct]
  -[_MPCPlayerSeekCommand setPreferredBackwardJumpIntervals:]
  -[_MPCPlayerSeekCommand preferredBackwardJumpIntervals]
  -[_MPCPlayerSeekCommand seekSupport]
  -[_MPCPlayerSeekCommand preferredForwardJumpIntervals]
  -[_MPCPlayerSeekCommand beginSeekWithDirection:]
  -[_MPCPlayerSeekCommand endSeek]
  -[_MPCPlayerSeekCommand _seekCommandWithMediaRemoteCommand:options:]
  -[_MPCPlayerSeekCommand jumpByInterval:]
  -[_MPCPlayerSeekCommand prefersNegativeBackwardSkipIntervals]
  -[_MPCPlayerSeekCommand setPreferredForwardJumpIntervals:]
  -[_MPCPlayerSeekCommand setPrefersNegativeBackwardSkipIntervals:]


_MPCPlayerPlaybackRateCommand : _MPCPlayerItemCommand <MPCPlayerPlaybackRateCommand>
 @property  NSArray *supportedPlaybackRates
 @property  float preferredPlaybackRate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerPlaybackRateCommand setPlaybackRate:]
  -[_MPCPlayerPlaybackRateCommand .cxx_destruct]
  -[_MPCPlayerPlaybackRateCommand setSupportedPlaybackRates:]
  -[_MPCPlayerPlaybackRateCommand supportedPlaybackRates]
  -[_MPCPlayerPlaybackRateCommand setPreferredPlaybackRate:]
  -[_MPCPlayerPlaybackRateCommand preferredPlaybackRate]


_MPCPlayerFeedbackCommand : _MPCPlayerItemCommand <MPCPlayerFeedbackCommand>
 @property  unsigned int command
 @property  NSString *localizedTitle
 @property  NSString *localizedShortTitle
 @property  long long presentationStyle
 @property  BOOL value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerFeedbackCommand localizedTitle]
  -[_MPCPlayerFeedbackCommand presentationStyle]
  -[_MPCPlayerFeedbackCommand localizedShortTitle]
  -[_MPCPlayerFeedbackCommand setPresentationStyle:]
  -[_MPCPlayerFeedbackCommand .cxx_destruct]
  -[_MPCPlayerFeedbackCommand command]
  -[_MPCPlayerFeedbackCommand setLocalizedTitle:]
  -[_MPCPlayerFeedbackCommand setValue:]
  -[_MPCPlayerFeedbackCommand value]
  -[_MPCPlayerFeedbackCommand setLocalizedShortTitle:]
  -[_MPCPlayerFeedbackCommand initWithResponse:mediaRemoteCommand:]
  -[_MPCPlayerFeedbackCommand changeValue:]


_MPCPlayerRateCommand : _MPCPlayerItemCommand <MPCPlayerRateCommand>
 @property  float minimumValue
 @property  float maximumValue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlayerRateCommand setMaximumValue:]
  -[_MPCPlayerRateCommand minimumValue]
  -[_MPCPlayerRateCommand setMinimumValue:]
  -[_MPCPlayerRateCommand maximumValue]
  -[_MPCPlayerRateCommand changeValue:]


MPCReportingPlaybackObserver : NSObject
 @property  MPAVController *player
 @property  BOOL offline
 @property  MPCReportingController *reportingController
 @property  BOOL SBEnabled
 @property  unsigned long storeAccountID
 @property  NSString *storeFrontID

  // instance methods
  -[MPCReportingPlaybackObserver isOffline]
  -[MPCReportingPlaybackObserver setOffline:]
  -[MPCReportingPlaybackObserver .cxx_destruct]
  -[MPCReportingPlaybackObserver player]
  -[MPCReportingPlaybackObserver storeAccountID]
  -[MPCReportingPlaybackObserver isSBEnabled]
  -[MPCReportingPlaybackObserver setStoreFrontID:]
  -[MPCReportingPlaybackObserver setSBEnabled:]
  -[MPCReportingPlaybackObserver setStoreAccountID:]
  -[MPCReportingPlaybackObserver dealloc]
  -[MPCReportingPlaybackObserver storeFrontID]
  -[MPCReportingPlaybackObserver reportingController]
  -[MPCReportingPlaybackObserver initWithPlayer:reportingController:]
  -[MPCReportingPlaybackObserver newPlayActivityEvent]
  -[MPCReportingPlaybackObserver recordPlayActivityEvents:forEventSource:]
  -[MPCReportingPlaybackObserver _itemReportingJingleTimedMetadataDidChangeNotification:]
  -[MPCReportingPlaybackObserver _playerItemDidChangeNotification:]
  -[MPCReportingPlaybackObserver _playerItemWillChangeNotification:]
  -[MPCReportingPlaybackObserver _playerPlaybackStateDidChangeNotification:]
  -[MPCReportingPlaybackObserver _playerDidReloadWithPlaybackContextNotification:]
  -[MPCReportingPlaybackObserver _playerWillReloadWithPlaybackContextNotification:]
  -[MPCReportingPlaybackObserver _playerDidSetCurrentTimeNotification:]
  -[MPCReportingPlaybackObserver _playerWillSetCurrentTimeNotification:]
  -[MPCReportingPlaybackObserver _playerItemDidChangeWhenReloadingPlaybackContextNotification:]
  -[MPCReportingPlaybackObserver _newReportingPlaybackActivityEventForPlayActivityEvent:eventSource:]
  -[MPCReportingPlaybackObserver _itemStartTimeForItem:]
  -[MPCReportingPlaybackObserver _itemEndTimeForItem:withProposedEndTime:]
  -[MPCReportingPlaybackObserver _setLastPlayEventEndTime:forItemContentItemID:]
  -[MPCReportingPlaybackObserver _reportPlaybackEndedForTimeoutWithItem:]
  -[MPCReportingPlaybackObserver _sendPlaybackEndNotification:endTime:]
  -[MPCReportingPlaybackObserver _sendPlaybackStartNotification]
  -[MPCReportingPlaybackObserver didHitPlaybackTimeoutEndingPlayback:withCurrentItem:]
  -[MPCReportingPlaybackObserver didTransitionItemForBan:]
  -[MPCReportingPlaybackObserver recordUserSeekFromTime:toTime:forItem:]
  -[MPCReportingPlaybackObserver willHitPlaybackTimeoutEndingPlayback:withCurrentItem:]
  -[MPCReportingPlaybackObserver willTransitionItemForBan:]


MPCReportingPlaybackEventSource : NSObject
 @property  <MPCReportingIdentityPropertiesLoading> *identityPropertiesLoader
 @property  long long equivalencySourceAdamID
 @property  double eventDuration
 @property  unsigned long overrideItemType
 @property  NSString *lyricsID
 @property  MPModelGenericObject *itemGenericObject
 @property  NSNumber *privateListeningEnabled
 @property  NSNumber *siriInitiated
 @property  BOOL shouldReportPlayEventsToStore
 @property  NSData *trackInfo
 @property  MPModelPlayEvent *modelPlayEvent
 @property  NSString *featureName
 @property  NSData *jingleTimedMetadata
 @property  NSData *recommendationData
 @property  NSString *requestingBundleIdentifier
 @property  NSString *requestingBundleVersion

  // instance methods
  -[MPCReportingPlaybackEventSource requestingBundleVersion]
  -[MPCReportingPlaybackEventSource .cxx_destruct]
  -[MPCReportingPlaybackEventSource setRequestingBundleIdentifier:]
  -[MPCReportingPlaybackEventSource setEquivalencySourceAdamID:]
  -[MPCReportingPlaybackEventSource setRecommendationData:]
  -[MPCReportingPlaybackEventSource setTrackInfo:]
  -[MPCReportingPlaybackEventSource setSiriInitiated:]
  -[MPCReportingPlaybackEventSource setPrivateListeningEnabled:]
  -[MPCReportingPlaybackEventSource init]
  -[MPCReportingPlaybackEventSource modelPlayEvent]
  -[MPCReportingPlaybackEventSource requestingBundleIdentifier]
  -[MPCReportingPlaybackEventSource lyricsID]
  -[MPCReportingPlaybackEventSource setEventDuration:]
  -[MPCReportingPlaybackEventSource eventDuration]
  -[MPCReportingPlaybackEventSource setModelPlayEvent:]
  -[MPCReportingPlaybackEventSource trackInfo]
  -[MPCReportingPlaybackEventSource recommendationData]
  -[MPCReportingPlaybackEventSource isSiriInitiated]
  -[MPCReportingPlaybackEventSource equivalencySourceAdamID]
  -[MPCReportingPlaybackEventSource featureName]
  -[MPCReportingPlaybackEventSource setFeatureName:]
  -[MPCReportingPlaybackEventSource setLyricsID:]
  -[MPCReportingPlaybackEventSource isPrivateListeningEnabled]
  -[MPCReportingPlaybackEventSource setRequestingBundleVersion:]
  -[MPCReportingPlaybackEventSource jingleTimedMetadata]
  -[MPCReportingPlaybackEventSource shouldReportPlayEventsToStore]
  -[MPCReportingPlaybackEventSource setIdentityPropertiesLoader:]
  -[MPCReportingPlaybackEventSource setItemGenericObject:]
  -[MPCReportingPlaybackEventSource identityPropertiesLoader]
  -[MPCReportingPlaybackEventSource itemGenericObject]
  -[MPCReportingPlaybackEventSource overrideItemType]
  -[MPCReportingPlaybackEventSource initWithAVItem:]
  -[MPCReportingPlaybackEventSource setOverrideItemType:]
  -[MPCReportingPlaybackEventSource setShouldReportPlayEventsToStore:]
  -[MPCReportingPlaybackEventSource setJingleTimedMetadata:]


_MPCProtoRadioContentReferenceLibraryItemContentReference : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoRadioContentReferenceLibraryItemContentReference .cxx_destruct]
  -[_MPCProtoRadioContentReferenceLibraryItemContentReference dictionaryRepresentation]
  -[_MPCProtoRadioContentReferenceLibraryItemContentReference writeTo:]
  -[_MPCProtoRadioContentReferenceLibraryItemContentReference isEqual:]
  -[_MPCProtoRadioContentReferenceLibraryItemContentReference readFrom:]
  -[_MPCProtoRadioContentReferenceLibraryItemContentReference copyWithZone:]


MPCAudioSpectrumAnalyzer : NSObject
 @property  _MPCAudioSpectrumAnalyzerStorage *storage
 @property  NSMutableArray *observers
 @property  MPCAudioSpectrumAnalyzer *selfRef
 @property  MPCPlaybackEngine *playbackEngine

  // instance methods
  -[MPCAudioSpectrumAnalyzer playbackEngine]
  -[MPCAudioSpectrumAnalyzer setStorage:]
  -[MPCAudioSpectrumAnalyzer .cxx_destruct]
  -[MPCAudioSpectrumAnalyzer storage]
  -[MPCAudioSpectrumAnalyzer setObservers:]
  -[MPCAudioSpectrumAnalyzer addObserver:]
  -[MPCAudioSpectrumAnalyzer selfRef]
  -[MPCAudioSpectrumAnalyzer initWithPlaybackEngine:]
  -[MPCAudioSpectrumAnalyzer observers]
  -[MPCAudioSpectrumAnalyzer dealloc]
  -[MPCAudioSpectrumAnalyzer removeObserver:]
  -[MPCAudioSpectrumAnalyzer configurePlayerItem:]
  -[MPCAudioSpectrumAnalyzer _createAudioTap]
  -[MPCAudioSpectrumAnalyzer _itemInsertedNotification:]
  -[MPCAudioSpectrumAnalyzer _destroyAudioTap]
  -[MPCAudioSpectrumAnalyzer _shouldAttachAudioTap]
  -[MPCAudioSpectrumAnalyzer _analyzeSamples:numberFrames:]
  -[MPCAudioSpectrumAnalyzer _prepareTap:maxFrames:processingFormat:]
  -[MPCAudioSpectrumAnalyzer setSelfRef:]


MPCAudioSpectrumObserver : NSObject
 @property  float powerLevel
 @property  long long numberOfBands
 @property  @? onUpdate

  // class methods
  +[MPCAudioSpectrumObserver defaultObserver]

  // instance methods
  -[MPCAudioSpectrumObserver .cxx_destruct]
  -[MPCAudioSpectrumObserver setPowerLevel:]
  -[MPCAudioSpectrumObserver dealloc]
  -[MPCAudioSpectrumObserver onUpdate]
  -[MPCAudioSpectrumObserver powerLevel]
  -[MPCAudioSpectrumObserver addAnalysisBand:]
  -[MPCAudioSpectrumObserver _resizeBandStorage]
  -[MPCAudioSpectrumObserver numberOfBands]
  -[MPCAudioSpectrumObserver averagePowerOfBandAtIndex:band:]
  -[MPCAudioSpectrumObserver beginReport]
  -[MPCAudioSpectrumObserver finishReport]
  -[MPCAudioSpectrumObserver setOnUpdate:]


_MPCAudioSpectrumAnalyzerStorage : NSObject
 @property  float sampleRate
 @property  unsigned long maxNumberOfFrames

  // instance methods
  -[_MPCAudioSpectrumAnalyzerStorage sampleRate]
  -[_MPCAudioSpectrumAnalyzerStorage dealloc]
  -[_MPCAudioSpectrumAnalyzerStorage setSampleRate:]
  -[_MPCAudioSpectrumAnalyzerStorage _freeBuffers]
  -[_MPCAudioSpectrumAnalyzerStorage maxNumberOfFrames]
  -[_MPCAudioSpectrumAnalyzerStorage analyzeFrequencies:numberFrames:observers:]
  -[_MPCAudioSpectrumAnalyzerStorage initWithMaximumNumberOfFrames:sampleRate:]
  -[_MPCAudioSpectrumAnalyzerStorage _prepareBuffers]
  -[_MPCAudioSpectrumAnalyzerStorage _destroyFFTSetup]
  -[_MPCAudioSpectrumAnalyzerStorage setMaxNumberOfFrames:]


_MPCProtoContainer : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoContainer .cxx_destruct]
  -[_MPCProtoContainer dictionaryRepresentation]
  -[_MPCProtoContainer writeTo:]
  -[_MPCProtoContainer isEqual:]
  -[_MPCProtoContainer readFrom:]
  -[_MPCProtoContainer copyWithZone:]


MPCAudioAssetTypeSelection : NSObject
 @property  long long type
 @property  NSString *explanation
 @property  NSDictionary *justification

  // instance methods
  -[MPCAudioAssetTypeSelection explanation]
  -[MPCAudioAssetTypeSelection setType:]
  -[MPCAudioAssetTypeSelection .cxx_destruct]
  -[MPCAudioAssetTypeSelection setExplanation:]
  -[MPCAudioAssetTypeSelection type]
  -[MPCAudioAssetTypeSelection justification]
  -[MPCAudioAssetTypeSelection setJustification:]


MPCPlayerAudioFormatSelection : NSObject
 @property  MPCPlayerAudioFormat *format
 @property  NSString *explanation
 @property  NSDictionary *justification

  // instance methods
  -[MPCPlayerAudioFormatSelection explanation]
  -[MPCPlayerAudioFormatSelection .cxx_destruct]
  -[MPCPlayerAudioFormatSelection setFormat:]
  -[MPCPlayerAudioFormatSelection setExplanation:]
  -[MPCPlayerAudioFormatSelection format]
  -[MPCPlayerAudioFormatSelection justification]
  -[MPCPlayerAudioFormatSelection initWithExplanation:justification:]
  -[MPCPlayerAudioFormatSelection setJustification:]


MPCAudioAssetTypeSelector : NSObject
 @property  MPPlaybackUserDefaults *defaults
 @property  ICEnvironmentMonitor *environmentMonitor
 @property  MSVABTestGenerator *outcomeGenerator
 @property  BOOL spatialIsAutomatic
 @property  BOOL prefersSpatialOverLossless
 @property  BOOL prefersHighResolutionLossless
 @property  BOOL prefersLossless
 @property  BOOL prefersHighQualityStereo
 @property  BOOL prefersLowQualityStereo
 @property  BOOL networkBandwidthIsHigh
 @property  BOOL spatialIsAlwaysOn
 @property  BOOL spatialIsOff

  // class methods
  +[MPCAudioAssetTypeSelector sharedSelector]

  // instance methods
  -[MPCAudioAssetTypeSelector setDefaults:]
  -[MPCAudioAssetTypeSelector defaults]
  -[MPCAudioAssetTypeSelector .cxx_destruct]
  -[MPCAudioAssetTypeSelector init]
  -[MPCAudioAssetTypeSelector prefersLossless]
  -[MPCAudioAssetTypeSelector preferredAudioAssetTypeForItem:]
  -[MPCAudioAssetTypeSelector audioFormatPreference]
  -[MPCAudioAssetTypeSelector spatialIsOff]
  -[MPCAudioAssetTypeSelector spatialIsAlwaysOn]
  -[MPCAudioAssetTypeSelector audioFormatMatchingAudioAssetType:formats:route:]
  -[MPCAudioAssetTypeSelector preferredAudioFormatForAudioFormats:route:]
  -[MPCAudioAssetTypeSelector preferredPlayerAudioFormatForItem:route:]
  -[MPCAudioAssetTypeSelector initWithPlaybackUsersDefaults:environmentMonitor:probabilityOfProgressiveDownloadAssets:]
  -[MPCAudioAssetTypeSelector outcomeGenerator]
  -[MPCAudioAssetTypeSelector prefersSpatialOverStereo:]
  -[MPCAudioAssetTypeSelector prefersHighResolutionLossless]
  -[MPCAudioAssetTypeSelector prefersHighQualityStereo]
  -[MPCAudioAssetTypeSelector prefersLowQualityStereo]
  -[MPCAudioAssetTypeSelector preferredAudioAssetTypeForSongWithTrait:]
  -[MPCAudioAssetTypeSelector prefersSpatialOverLossless]
  -[MPCAudioAssetTypeSelector environmentDescription]
  -[MPCAudioAssetTypeSelector descriptionForTraits:]
  -[MPCAudioAssetTypeSelector preferencesDescription]
  -[MPCAudioAssetTypeSelector descriptionForTiers:]
  -[MPCAudioAssetTypeSelector tierMatchingAudioAssetType:]
  -[MPCAudioAssetTypeSelector spatialIsAutomatic]
  -[MPCAudioAssetTypeSelector networkBandwidthIsHigh]
  -[MPCAudioAssetTypeSelector environmentMonitor]
  -[MPCAudioAssetTypeSelector updateProbabilityOfProgressiveDownloadAssets:]
  -[MPCAudioAssetTypeSelector userPrefersMultichannelAudioOverStereo:]
  -[MPCAudioAssetTypeSelector setEnvironmentMonitor:]


MPCExplicitContentAuthorizationManager : NSObject
 @property  long long authorizationReason
 @property  long long status
 @property  NSError *authorizationError
 @property  ICAgeVerificationState *lastKnownAgeVerificationState
 @property  <MPCExplicitContentAuthorizationDelegate> *delegate

  // class methods
  +[MPCExplicitContentAuthorizationManager sharedManager]

  // instance methods
  -[MPCExplicitContentAuthorizationManager .cxx_destruct]
  -[MPCExplicitContentAuthorizationManager setDelegate:]
  -[MPCExplicitContentAuthorizationManager status]
  -[MPCExplicitContentAuthorizationManager delegate]
  -[MPCExplicitContentAuthorizationManager setStatus:]
  -[MPCExplicitContentAuthorizationManager _init]
  -[MPCExplicitContentAuthorizationManager isItemAuthorized:shouldAskForAuthorization:]
  -[MPCExplicitContentAuthorizationManager isItemAuthorized:]
  -[MPCExplicitContentAuthorizationManager _retrieveAgeVerificationStateForUserIdentity:]
  -[MPCExplicitContentAuthorizationManager _updateAuthorizationStatusWithAuthorizationState:forItem:]
  -[MPCExplicitContentAuthorizationManager authorizationError]
  -[MPCExplicitContentAuthorizationManager _explicitContentErrorWithUnderlyingError:message:]
  -[MPCExplicitContentAuthorizationManager authorizationReason]
  -[MPCExplicitContentAuthorizationManager _shouldAskPlaybackAuthorizationForItem:reason:]
  -[MPCExplicitContentAuthorizationManager _askPlaybackAuthorizationForItem:reason:]
  -[MPCExplicitContentAuthorizationManager _setupWithAgeVerificationState:]
  -[MPCExplicitContentAuthorizationManager _setupWithAgeGateForItem:]
  -[MPCExplicitContentAuthorizationManager setAuthorizationError:]
  -[MPCExplicitContentAuthorizationManager lastKnownAgeVerificationState]
  -[MPCExplicitContentAuthorizationManager setLastKnownAgeVerificationState:]


MPCItemIdentifierImplementation : NSObject <MPCItemIdentifier, NSCopying>
 @property  NSString *contentItemID
 @property  long long repeatIndex
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCItemIdentifierImplementation identifierForMFQueuePlayerItem:]

  // instance methods
  -[MPCItemIdentifierImplementation .cxx_destruct]
  -[MPCItemIdentifierImplementation isEqual:]
  -[MPCItemIdentifierImplementation contentItemID]
  -[MPCItemIdentifierImplementation setContentItemID:]
  -[MPCItemIdentifierImplementation repeatIndex]
  -[MPCItemIdentifierImplementation setRepeatIndex:]
  -[MPCItemIdentifierImplementation copyWithZone:]
  -[MPCItemIdentifierImplementation initWithContentItemID:repeatIndex:]


MPCMediaRemoteController : NSObject <_MPArtworkCatalogOverlayDelegate, MSVLRUDictionaryDelegate, MPMediaRemoteEntityArtworkGenerator>
 @property  MPCPlayerPath *resolvedPlayerPath
 @property  <MPArtworkDataSource> *mediaRemoteArtworkDataSource
 @property  <MPArtworkDataSource> *remotePlayerArtworkDataSource
 @property  NSObject<OS_dispatch_queue> *accessQueue
 @property  NSObject<OS_dispatch_queue> *calloutQueue
 @property  id invalidationToken
 @property  long long playbackStateCacheState
 @property  MPCFuture *playbackState
 @property  long long supportedCommandsCacheState
 @property  MPCFuture *supportedCommands
 @property  long long playingIdentifierCacheState
 @property  MPCFuture *playingIdentifier
 @property  long long queueIdentifierCacheState
 @property  MPCFuture *queueIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCMediaRemoteController _shouldRegisterForNotifications]
  +[MPCMediaRemoteController sendCommand:options:toPlayerPath:completion:]
  +[MPCMediaRemoteController controllerForPlayerPath:]
  +[MPCMediaRemoteController _sendLocalCommand:playbackIntent:options:toPlayerPath:completion:]
  +[MPCMediaRemoteController _sendRemoteCommand:playbackIntent:options:toPlayerPath:completion:]
  +[MPCMediaRemoteController _sendCommand:options:appOptions:toPlayerPath:completion:]
  +[MPCMediaRemoteController mediaRemoteReplyQueue]

  // instance methods
  -[MPCMediaRemoteController queueIdentifier]
  -[MPCMediaRemoteController supportedCommands]
  -[MPCMediaRemoteController playbackState]
  -[MPCMediaRemoteController setAccessQueue:]
  -[MPCMediaRemoteController _contentItemArtworkChangedNotification:]
  -[MPCMediaRemoteController calloutQueue]
  -[MPCMediaRemoteController _onQueue_stateDictionary]
  -[MPCMediaRemoteController setCalloutQueue:]
  -[MPCMediaRemoteController _onQueue_purgeArtworkForContentItemIdentifier:]
  -[MPCMediaRemoteController accessQueue]
  -[MPCMediaRemoteController _onQueue_updateOptimisticStateForCommand:options:]
  -[MPCMediaRemoteController mediaRemoteArtworkDataSource]
  -[MPCMediaRemoteController .cxx_destruct]
  -[MPCMediaRemoteController overlayVisualIdenticalityForCatalog:]
  -[MPCMediaRemoteController _onQueue_setOptimisticElapsedTimeForContentItem:elapsedTime:rate:]
  -[MPCMediaRemoteController contentItemForIdentifier:]
  -[MPCMediaRemoteController playQueueIdentifiersForRange:]
  -[MPCMediaRemoteController remotePlayerArtworkDataSource]
  -[MPCMediaRemoteController playbackStateCacheState]
  -[MPCMediaRemoteController _createExportableArtworkPropertiesForContentItem:]
  -[MPCMediaRemoteController overlayScaledFittingSizeForCatalog:scaledFittingSize:]
  -[MPCMediaRemoteController playQueueIdentifiersCacheStateForRange:]
  -[MPCMediaRemoteController _onQueue_setOptimisticReorderedPlaybackQueueWithMovingContentItemIdentifier:beforeContentItemIdentifier:]
  -[MPCMediaRemoteController artworkCatalog:didConfigureView:withRepresentation:]
  -[MPCMediaRemoteController _onQueue_setOptimisticPlaybackState:withOptions:]
  -[MPCMediaRemoteController resolvedPlayerPath]
  -[MPCMediaRemoteController _artworkCatalogBlockForContentItem:]
  -[MPCMediaRemoteController _legacyCommands]
  -[MPCMediaRemoteController supportedCommandsCacheState]
  -[MPCMediaRemoteController _supportedCommandsDidChangedNotification:]
  -[MPCMediaRemoteController _playbackStateDidChangeNotification:]
  -[MPCMediaRemoteController artworkCatalog:didClearFromView:]
  -[MPCMediaRemoteController _onQueue_purgeArtworkForContentItemIdentifier:artworkIdentifier:]
  -[MPCMediaRemoteController dictionary:willRemoveObject:forKey:]
  -[MPCMediaRemoteController setInvalidationToken:]
  -[MPCMediaRemoteController artworkCatalogBlockForContentItem:]
  -[MPCMediaRemoteController playingIdentifier]
  -[MPCMediaRemoteController _init]
  -[MPCMediaRemoteController invalidateAllTokens]
  -[MPCMediaRemoteController artworkCatalog:willConfigureView:]
  -[MPCMediaRemoteController queueIdentifierCacheState]
  -[MPCMediaRemoteController _onQueue_mergeContentItems:queueRange:requestRange:]
  -[MPCMediaRemoteController playQueueIdentifiersForRequest:]
  -[MPCMediaRemoteController _onQueue_invalidateArtworkFuturesForContentItemID:]
  -[MPCMediaRemoteController invalidationToken]
  -[MPCMediaRemoteController dealloc]
  -[MPCMediaRemoteController contentItemCacheStateForIdentifier:]
  -[MPCMediaRemoteController playingIdentifierCacheState]
  -[MPCMediaRemoteController contentItemArtworkForContentItemIdentifier:artworkIdentifier:size:]
  -[MPCMediaRemoteController _onQueue_identifiersForRange:]
  -[MPCMediaRemoteController _playbackQueueChangedNotification:]
  -[MPCMediaRemoteController contentItemArtworkCacheStateForArtworkIdentifier:size:]
  -[MPCMediaRemoteController sendCommand:options:completion:]
  -[MPCMediaRemoteController setResolvedPlayerPath:]
  -[MPCMediaRemoteController _playbackQueueContentItemsChangedNotification:]
  -[MPCMediaRemoteController _onQueue_setOptimisticReorderedPlaybackQueueWithMovingContentItemIdentifier:afterContentItemIdentifier:]
  -[MPCMediaRemoteController _onQueue_setOptimisticPlayingItemIdentifier:]


MPCRadioPlaybackIntentTracklistToken : NSObject <NSSecureCoding>
 @property  BOOL continueListeningStation
 @property  MPCModelRadioContentReference *nowPlayingContentReference
 @property  MPCModelRadioContentReference *seedContentReference
 @property  MPModelRadioStation *radioStation
 @property  NSURL *radioStationURL

  // class methods
  +[MPCRadioPlaybackIntentTracklistToken supportsSecureCoding]

  // instance methods
  -[MPCRadioPlaybackIntentTracklistToken initWithCoder:]
  -[MPCRadioPlaybackIntentTracklistToken .cxx_destruct]
  -[MPCRadioPlaybackIntentTracklistToken radioStation]
  -[MPCRadioPlaybackIntentTracklistToken setRadioStation:]
  -[MPCRadioPlaybackIntentTracklistToken encodeWithCoder:]
  -[MPCRadioPlaybackIntentTracklistToken seedContentReference]
  -[MPCRadioPlaybackIntentTracklistToken nowPlayingContentReference]
  -[MPCRadioPlaybackIntentTracklistToken setSeedContentReference:]
  -[MPCRadioPlaybackIntentTracklistToken setNowPlayingContentReference:]
  -[MPCRadioPlaybackIntentTracklistToken setContinueListeningStation:]
  -[MPCRadioPlaybackIntentTracklistToken setRadioStationURL:]
  -[MPCRadioPlaybackIntentTracklistToken continueListeningStation]
  -[MPCRadioPlaybackIntentTracklistToken radioStationURL]


MPCAssistantConnection : NSObject
  // instance methods
  -[MPCAssistantConnection connectToEndpoint:completion:]


MPCPlaybackEngineEventStream : NSObject
 @property  <MPCPlabackEngineEventStreamTestingDelegate> *testingDelegate
 @property  MPCPlaybackEngineEvent *lastEvent
 @property  NSString *engineID

  // instance methods
  -[MPCPlaybackEngineEventStream flushEvents]
  -[MPCPlaybackEngineEventStream testingDelegate]
  -[MPCPlaybackEngineEventStream .cxx_destruct]
  -[MPCPlaybackEngineEventStream initWithDatabaseCreationBlock:]
  -[MPCPlaybackEngineEventStream emitEventType:payload:atTime:]
  -[MPCPlaybackEngineEventStream emitEventType:payload:]
  -[MPCPlaybackEngineEventStream lastEvent]
  -[MPCPlaybackEngineEventStream eventDeliveryDeferralAssertionForReason:]
  -[MPCPlaybackEngineEventStream resetConsumerEventDeliveryToTimestamp:]
  -[MPCPlaybackEngineEventStream initWithParameters:]
  -[MPCPlaybackEngineEventStream setTestingDelegate:]
  -[MPCPlaybackEngineEventStream flushEventsWithConsumer:fromTimestamp:untilTimestamp:]
  -[MPCPlaybackEngineEventStream addConsumer:]
  -[MPCPlaybackEngineEventStream setMaximumEventDeliveryTimestamp:]
  -[MPCPlaybackEngineEventStream removeConsumer:]
  -[MPCPlaybackEngineEventStream dealloc]
  -[MPCPlaybackEngineEventStream invalidate]
  -[MPCPlaybackEngineEventStream engineID]
  -[MPCPlaybackEngineEventStream lastEventsWithCount:]


_MPCPlaybackEngineEventStreamSubscription : NSObject <MPCPlaybackEngineEventStreamSubscription>
 @property  <MPCPlaybackEngineEventConsumer> *consumer
 @property  MPCPlaybackEngineEventStream *eventStream
 @property  NSString *streamID
 @property  unsigned long lastEventSuccessTimestamp
 @property  unsigned long maximumEventDeliveryTimestamp
 @property  NSMutableDictionary *mutatingEventHandlers
 @property  NSMutableDictionary *immediateEventHandlers
 @property  NSMutableDictionary *eventHandlers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlaybackEngineEventStreamSubscription eventStream]
  -[_MPCPlaybackEngineEventStreamSubscription consumer]
  -[_MPCPlaybackEngineEventStreamSubscription .cxx_destruct]
  -[_MPCPlaybackEngineEventStreamSubscription setLastEventSuccessTimestamp:]
  -[_MPCPlaybackEngineEventStreamSubscription cancelSubscription]
  -[_MPCPlaybackEngineEventStreamSubscription streamID]
  -[_MPCPlaybackEngineEventStreamSubscription lastEventSuccessTimestamp]
  -[_MPCPlaybackEngineEventStreamSubscription subscribeToEventType:handler:]
  -[_MPCPlaybackEngineEventStreamSubscription maximumEventDeliveryTimestamp]
  -[_MPCPlaybackEngineEventStreamSubscription initWithConsumer:eventStream:]
  -[_MPCPlaybackEngineEventStreamSubscription immediateEventHandlers]
  -[_MPCPlaybackEngineEventStreamSubscription setMaximumEventDeliveryTimestamp:]
  -[_MPCPlaybackEngineEventStreamSubscription flushEventsWithCompletion:]
  -[_MPCPlaybackEngineEventStreamSubscription subscribeToEventType:options:handler:]
  -[_MPCPlaybackEngineEventStreamSubscription mutatingEventHandlers]
  -[_MPCPlaybackEngineEventStreamSubscription _onQueue_flush]
  -[_MPCPlaybackEngineEventStreamSubscription eventHandlers]


_MPCPlaybackEngineEventStreamCursor : NSObject <MPCPlaybackEngineEventStreamCursor>
 @property  MPCPlaybackEngineEventStream *eventStream
 @property  MPCPlaybackEngineEvent *startEvent
 @property  MPCPlaybackEngineEvent *endEvent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlaybackEngineEventStreamCursor eventStream]
  -[_MPCPlaybackEngineEventStreamCursor initWithEventStream:startEvent:endEvent:]
  -[_MPCPlaybackEngineEventStreamCursor enumeratePreviousEventsWithTypes:usingBlock:]
  -[_MPCPlaybackEngineEventStreamCursor .cxx_destruct]
  -[_MPCPlaybackEngineEventStreamCursor findPreviousEventWithTypes:matchingPayload:]
  -[_MPCPlaybackEngineEventStreamCursor cursorUntilEvent:]
  -[_MPCPlaybackEngineEventStreamCursor enumeratePreviousEventsWithType:usingBlock:]
  -[_MPCPlaybackEngineEventStreamCursor countOfPreviousEventsWithType:matchingPayload:]
  -[_MPCPlaybackEngineEventStreamCursor endEvent]
  -[_MPCPlaybackEngineEventStreamCursor startEvent]
  -[_MPCPlaybackEngineEventStreamCursor cursorFromEvent:untilEvent:]
  -[_MPCPlaybackEngineEventStreamCursor findPreviousEventWithType:matchingPayload:]
  -[_MPCPlaybackEngineEventStreamCursor enumeratePreviousEventsWithType:matchingPayload:usingBlock:]
  -[_MPCPlaybackEngineEventStreamCursor countOfPreviousEventsWithTypes:matchingPayload:]
  -[_MPCPlaybackEngineEventStreamCursor enumeratePreviousEventsWithTypes:matchingPayload:usingBlock:]


_MPCPlaybackEngineEventStreamDeferralAssertion : NSObject <MPCPlaybackEngineEventStreamDeferralAssertion>
 @property  MPCPlaybackEngineEventStream *eventStream
 @property  NSString *reason
 @property  BOOL invalidated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlaybackEngineEventStreamDeferralAssertion eventStream]
  -[_MPCPlaybackEngineEventStreamDeferralAssertion .cxx_destruct]
  -[_MPCPlaybackEngineEventStreamDeferralAssertion reason]
  -[_MPCPlaybackEngineEventStreamDeferralAssertion dealloc]
  -[_MPCPlaybackEngineEventStreamDeferralAssertion invalidate]
  -[_MPCPlaybackEngineEventStreamDeferralAssertion invalidated]
  -[_MPCPlaybackEngineEventStreamDeferralAssertion initWithEventStream:reason:]


MPCModelStorePlaybackItemsRequestOperation : MPAsyncOperation
 @property  MPCModelStorePlaybackItemsRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPCModelStorePlaybackItemsRequestOperation .cxx_destruct]
  -[MPCModelStorePlaybackItemsRequestOperation initWithRequest:responseHandler:]
  -[MPCModelStorePlaybackItemsRequestOperation responseHandler]
  -[MPCModelStorePlaybackItemsRequestOperation execute]
  -[MPCModelStorePlaybackItemsRequestOperation request]
  -[MPCModelStorePlaybackItemsRequestOperation cancel]
  -[MPCModelStorePlaybackItemsRequestOperation _executeWithUserIdentity:useMediaAPILookup:]
  -[MPCModelStorePlaybackItemsRequestOperation _validateUserIdentityForRequestWithCompletion:]
  -[MPCModelStorePlaybackItemsRequestOperation _runPersonalizationWithSectionCollection:localEquivalencyMapping:expirationDate:userIdentity:error:isFinalResponse:isInvalidForPersonalization:networkingTime:]
  -[MPCModelStorePlaybackItemsRequestOperation _localStoreAdamIDToEquivalencySourceStoreAdamIDMap:]
  -[MPCModelStorePlaybackItemsRequestOperation _runMediaAPIRequestToLoadMetadataWithAccumulator:userIdentity:previousResponse:shouldBatchResultsWithPlaceholderObjects:]
  -[MPCModelStorePlaybackItemsRequestOperation _runStorePlatformRequestToLoadMetadataWithAccumulator:userIdentity:previousResponse:shouldBatchResultsWithPlaceholderObjects:]
  -[MPCModelStorePlaybackItemsRequestOperation _importMediaAPICollectionItemMetadataResponse:withError:usingAccumulator:userIdentity:trustID:previousResponse:shouldBatchResultsWithPlaceholderObjects:]
  -[MPCModelStorePlaybackItemsRequestOperation _handleItemMetadataBactchRequestCompletedWithAccumulator:previousResponse:userIdentity:error:isFinalResponse:]
  -[MPCModelStorePlaybackItemsRequestOperation _runSubscriptionStatusWithRequestContext:completion:]


MPCModelGenericAVItemMediaRedownloadOperation : MPAsyncOperation
 @property  MPCModelGenericAVItemAssetLoadProperties *assetLoadProperties
 @property  ICStoreRequestContext *requestContext
 @property  @? responseHandler

  // instance methods
  -[MPCModelGenericAVItemMediaRedownloadOperation .cxx_destruct]
  -[MPCModelGenericAVItemMediaRedownloadOperation responseHandler]
  -[MPCModelGenericAVItemMediaRedownloadOperation setResponseHandler:]
  -[MPCModelGenericAVItemMediaRedownloadOperation init]
  -[MPCModelGenericAVItemMediaRedownloadOperation execute]
  -[MPCModelGenericAVItemMediaRedownloadOperation cancel]
  -[MPCModelGenericAVItemMediaRedownloadOperation requestContext]
  -[MPCModelGenericAVItemMediaRedownloadOperation setRequestContext:]
  -[MPCModelGenericAVItemMediaRedownloadOperation setAssetLoadProperties:]
  -[MPCModelGenericAVItemMediaRedownloadOperation assetLoadProperties]


MPCModelRadioGetTracksOperation : MPAsyncOperation
 @property  @? completionHandler

  // instance methods
  -[MPCModelRadioGetTracksOperation .cxx_destruct]
  -[MPCModelRadioGetTracksOperation execute]
  -[MPCModelRadioGetTracksOperation setCompletionHandler:]
  -[MPCModelRadioGetTracksOperation completionHandler]
  -[MPCModelRadioGetTracksOperation _runStep:withFinishHandler:]
  -[MPCModelRadioGetTracksOperation _cacheTracksForStep:]
  -[MPCModelRadioGetTracksOperation initWithGetTracksRequest:siriAssetInfo:playActivityController:radioQueueFeeder:]


MPCModelRadioGetTracksResponse : NSObject
 @property  long long tracklistAction
 @property  MPSectionedCollection *tracks
 @property  double networkingTime

  // instance methods
  -[MPCModelRadioGetTracksResponse tracks]
  -[MPCModelRadioGetTracksResponse .cxx_destruct]
  -[MPCModelRadioGetTracksResponse networkingTime]
  -[MPCModelRadioGetTracksResponse initWithTracks:tracklistAction:networkingTime:]
  -[MPCModelRadioGetTracksResponse tracklistAction]


MPCDebugCommand : MPRemoteCommand
 @property  NSArray *supportedSubsystems
 @property  NSDictionary *subsystemRevisions

  // instance methods
  -[MPCDebugCommand _mediaRemoteCommandInfoOptions]
  -[MPCDebugCommand .cxx_destruct]
  -[MPCDebugCommand initWithMediaRemoteCommandType:]
  -[MPCDebugCommand setSupportedSubsystems:]
  -[MPCDebugCommand setSubsystemRevisions:]
  -[MPCDebugCommand supportedSubsystems]
  -[MPCDebugCommand subsystemRevisions]


_MPCFairPlayPerformanceController : NSObject <MPCPlaybackEngineEventObserving, MPServerObjectDatabaseObserver>
 @property  MPCPlaybackEngine *playbackEngine
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCFairPlayPerformanceController playbackEngine]
  -[_MPCFairPlayPerformanceController engine:didChangeAccounts:]
  -[_MPCFairPlayPerformanceController _fetchMiniSINFsWithCompletion:]
  -[_MPCFairPlayPerformanceController _applicationWillEnterForegroundNotification:]
  -[_MPCFairPlayPerformanceController .cxx_destruct]
  -[_MPCFairPlayPerformanceController _prewarmSAPSigningForAccount:]
  -[_MPCFairPlayPerformanceController _optimisticallyFetchLeaseForAccount:]
  -[_MPCFairPlayPerformanceController initWithPlaybackEngine:]
  -[_MPCFairPlayPerformanceController _prewarmMiniSINFEndpointForAccount:]
  -[_MPCFairPlayPerformanceController dealloc]
  -[_MPCFairPlayPerformanceController database:didFinishImportRequest:]
  -[_MPCFairPlayPerformanceController scheduleMiniSINFFetch]


_MPCMiniSINFEndpointInfo : NSObject
 @property  NSURL *endpointURL
 @property  long long maximumBatchSize
 @property  ICStoreRequestContext *requestContext

  // instance methods
  -[_MPCMiniSINFEndpointInfo maximumBatchSize]
  -[_MPCMiniSINFEndpointInfo .cxx_destruct]
  -[_MPCMiniSINFEndpointInfo endpointURL]
  -[_MPCMiniSINFEndpointInfo requestContext]
  -[_MPCMiniSINFEndpointInfo initWithEndpointURL:maximumBatchSize:requestContext:]


MPCModelPlaybackIntentDataSource : NSObject <MPCPlaybackIntentDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCModelPlaybackIntentDataSource getPlaybackContextForIntent:withCompletion:]


MPCAssistantRemoteControlDestination : NSObject <NSMutableCopying, NSSecureCoding>
 @property  NSString *appBundleID
 @property  NSString *playerID
 @property  ^v origin
 @property  NSArray *outputDeviceUIDs
 @property  NSArray *hashedOutputDeviceUIDs
 @property  NSArray *outputGroups
 @property  NSString *outputGroupID
 @property  NSString *originatingOutputDeviceUID
 @property  BOOL singleGroup
 @property  BOOL originatingDeviceControl

  // class methods
  +[MPCAssistantRemoteControlDestination supportsSecureCoding]
  +[MPCAssistantRemoteControlDestination systemMediaApplicationDestination]
  +[MPCAssistantRemoteControlDestination watchRadioApplicationDestination]
  +[MPCAssistantRemoteControlDestination podcastsApplicationDestination]
  +[MPCAssistantRemoteControlDestination iBooksApplicationDestination]
  +[MPCAssistantRemoteControlDestination nowPlayingApplicationDestination]

  // instance methods
  -[MPCAssistantRemoteControlDestination appBundleID]
  -[MPCAssistantRemoteControlDestination outputDeviceUIDs]
  -[MPCAssistantRemoteControlDestination initWithCoder:]
  -[MPCAssistantRemoteControlDestination origin]
  -[MPCAssistantRemoteControlDestination .cxx_destruct]
  -[MPCAssistantRemoteControlDestination _copyWithZone:usingConcreteClass:]
  -[MPCAssistantRemoteControlDestination init]
  -[MPCAssistantRemoteControlDestination mutableCopyWithZone:]
  -[MPCAssistantRemoteControlDestination dealloc]
  -[MPCAssistantRemoteControlDestination copyWithZone:]
  -[MPCAssistantRemoteControlDestination playerID]
  -[MPCAssistantRemoteControlDestination encodeWithCoder:]
  -[MPCAssistantRemoteControlDestination originatingOutputDeviceUID]
  -[MPCAssistantRemoteControlDestination createPlayerPath]
  -[MPCAssistantRemoteControlDestination singleGroup]
  -[MPCAssistantRemoteControlDestination originatingDeviceControl]
  -[MPCAssistantRemoteControlDestination outputGroups]
  -[MPCAssistantRemoteControlDestination outputGroupID]
  -[MPCAssistantRemoteControlDestination initWithAppBundleID:]
  -[MPCAssistantRemoteControlDestination initWithAppBundleID:playerID:origin:]
  -[MPCAssistantRemoteControlDestination resolveWithHashedRouteIdentifiers:audioRoutingInfo:completion:]
  -[MPCAssistantRemoteControlDestination resolveWithQueue:hashedRouteIdentifiers:localPlaybackPermitted:audioRoutingInfo:completion:]
  -[MPCAssistantRemoteControlDestination resolveWithRouteIdentifiers:audioRoutingInfo:completion:]
  -[MPCAssistantRemoteControlDestination resolveWithQueue:routeIdentifiers:localPlaybackPermitted:audioRoutingInfo:completion:]
  -[MPCAssistantRemoteControlDestination resolveWithHashedRouteIdentifiers:completion:]
  -[MPCAssistantRemoteControlDestination resolveWithRouteIdentifiers:completion:]
  -[MPCAssistantRemoteControlDestination resolveWithQueue:hashedRouteIdentifiers:localPlaybackPermitted:completion:]
  -[MPCAssistantRemoteControlDestination resolveWithQueue:routeIdentifiers:localPlaybackPermitted:completion:]
  -[MPCAssistantRemoteControlDestination _getCompanionOrigin:]
  -[MPCAssistantRemoteControlDestination hashedOutputDeviceUIDs]


MPCAssistantMutableRemoteControlDestination : MPCAssistantRemoteControlDestination
 @property  NSString *appBundleID
 @property  NSString *playerID
 @property  ^v origin
 @property  NSArray *outputDeviceUIDs
 @property  NSArray *hashedOutputDeviceUIDs
 @property  NSArray *outputGroups
 @property  NSString *outputGroupID
 @property  NSString *originatingOutputDeviceUID
 @property  BOOL singleGroup
 @property  BOOL originatingDeviceControl

  // instance methods
  -[MPCAssistantMutableRemoteControlDestination setOrigin:]
  -[MPCAssistantMutableRemoteControlDestination setAppBundleID:]
  -[MPCAssistantMutableRemoteControlDestination setPlayerID:]
  -[MPCAssistantMutableRemoteControlDestination setOutputDeviceUIDs:]
  -[MPCAssistantMutableRemoteControlDestination setHashedOutputDeviceUIDs:]
  -[MPCAssistantMutableRemoteControlDestination setOutputGroups:]
  -[MPCAssistantMutableRemoteControlDestination setOutputGroupID:]
  -[MPCAssistantMutableRemoteControlDestination setOriginatingOutputDeviceUID:]
  -[MPCAssistantMutableRemoteControlDestination setSingleGroup:]
  -[MPCAssistantMutableRemoteControlDestination setOriginatingDeviceControl:]


_MPCPlaybackEnginePlayerIDInitializationParameters : NSObject <MPCPlaybackEngineInitializationParameters>
 @property  MPNowPlayingInfoCenter *nowPlayingInfoCenter
 @property  MPRemoteCommandCenter *remoteCommandCenter
 @property  AVAudioSession *audioSession
 @property  NSString *playerID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlaybackEnginePlayerIDInitializationParameters .cxx_destruct]
  -[_MPCPlaybackEnginePlayerIDInitializationParameters initWithPlayerID:]
  -[_MPCPlaybackEnginePlayerIDInitializationParameters playerID]
  -[_MPCPlaybackEnginePlayerIDInitializationParameters audioSession]
  -[_MPCPlaybackEnginePlayerIDInitializationParameters remoteCommandCenter]
  -[_MPCPlaybackEnginePlayerIDInitializationParameters nowPlayingInfoCenter]


MPCPlaybackEngine : NSObject <MPCExplicitContentAuthorizationDelegate>
 @property  BOOL scheduledPlaybackStatePreservation
 @property  BOOL needsUISnapshot
 @property  MPProtocolProxy<MPCPlaybackEngineEventObserving> *eventObserver
 @property  <MPCPlaybackEngineImplementation> *implementation
 @property  _MPCMediaRemotePublisher *mediaRemotePublisher
 @property  _MPCMusicPlayerControllerServer *musicPlayerControllerServer
 @property  _MPCReportingController *reportingController
 @property  _MPCPlaybackEngineSessionManager *sessionManager
 @property  _MPCLeaseManager *leaseManager
 @property  _MPCPlaybackAccountManager *accountManager
 @property  _MPCFairPlayPerformanceController *fairPlayPerformanceController
 @property  <MPCVideoOutput> *videoOutput
 @property  <MPCPlaybackEngineInitializationParameters> *initializationParameters
 @property  BOOL systemMusicApplication
 @property  NSString *audioSessionCategory
 @property  unsigned long audioSessionOptions
 @property  BOOL audioAnalyzerEnabled
 @property  MPCAudioSpectrumAnalyzer *audioAnalyzer
 @property  MPCPlaybackEngineEventStream *eventStream
 @property  MPCPlayerPath *playerPath
 @property  NSXPCListenerEndpoint *serverEndpoint
 @property  NSString *playerID
 @property  NSString *engineID
 @property  <MPCPlaybackEngineDelegate> *delegate
 @property  BOOL started
 @property  BOOL pictureInPictureSupported
 @property  BOOL videoSupported
 @property  MPCPlaybackIntent *fallbackPlaybackIntent
 @property  BOOL stateRestorationSupported
 @property  BOOL queueHandoffSupported
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCPlaybackEngine preheatPlayback]
  +[MPCPlaybackEngine usesNewPlaybackImplementation]
  +[MPCPlaybackEngine requiresMainThread]

  // instance methods
  -[MPCPlaybackEngine reportUserBackgroundedApplication]
  -[MPCPlaybackEngine isVideoSupported]
  -[MPCPlaybackEngine becomeActive]
  -[MPCPlaybackEngine eventStream]
  -[MPCPlaybackEngine playerPath]
  -[MPCPlaybackEngine audioSessionOptions]
  -[MPCPlaybackEngine initializationParameters]
  -[MPCPlaybackEngine accountManager]
  -[MPCPlaybackEngine hasScheduledPlaybackStatePreservation]
  -[MPCPlaybackEngine _detectCrashLoopForSessionIdentifier:block:]
  -[MPCPlaybackEngine mediaRemotePublisher]
  -[MPCPlaybackEngine _screenBrightnessDidChangeNotification:]
  -[MPCPlaybackEngine addEngineObserver:]
  -[MPCPlaybackEngine .cxx_destruct]
  -[MPCPlaybackEngine setFallbackPlaybackIntent:]
  -[MPCPlaybackEngine needsUISnapshot]
  -[MPCPlaybackEngine isStarted]
  -[MPCPlaybackEngine reportUserSeekFromTime:toTime:]
  -[MPCPlaybackEngine initWithPlayerID:]
  -[MPCPlaybackEngine setDelegate:]
  -[MPCPlaybackEngine audioAnalyzer]
  -[MPCPlaybackEngine setAudioSessionCategory:]
  -[MPCPlaybackEngine serverEndpoint]
  -[MPCPlaybackEngine implementation]
  -[MPCPlaybackEngine setQueueHandoffSupported:]
  -[MPCPlaybackEngine requestAuthorizationForExplicitItem:reason:completion:]
  -[MPCPlaybackEngine setPictureInPictureSupported:]
  -[MPCPlaybackEngine isPictureInPictureSupported]
  -[MPCPlaybackEngine setVideoSupported:]
  -[MPCPlaybackEngine sessionManager]
  -[MPCPlaybackEngine fairPlayPerformanceController]
  -[MPCPlaybackEngine isStateRestorationSupported]
  -[MPCPlaybackEngine leaseManager]
  -[MPCPlaybackEngine initWithParameters:]
  -[MPCPlaybackEngine restoreStateWithCompletion:]
  -[MPCPlaybackEngine removeEngineObserver:]
  -[MPCPlaybackEngine audioSessionCategory]
  -[MPCPlaybackEngine setStateRestorationSupported:]
  -[MPCPlaybackEngine _initializePlaybackStack]
  -[MPCPlaybackEngine schedulePlaybackStatePreservation]
  -[MPCPlaybackEngine musicPlayerControllerServer]
  -[MPCPlaybackEngine isSystemMusicApplication]
  -[MPCPlaybackEngine delegate]
  -[MPCPlaybackEngine setSystemMusicApplication:]
  -[MPCPlaybackEngine isQueueHandoffSupported]
  -[MPCPlaybackEngine setAudioSessionOptions:]
  -[MPCPlaybackEngine start]
  -[MPCPlaybackEngine dealloc]
  -[MPCPlaybackEngine invalidate]
  -[MPCPlaybackEngine engineID]
  -[MPCPlaybackEngine _updateUISnapshotIfNeeded]
  -[MPCPlaybackEngine videoOutput]
  -[MPCPlaybackEngine isAudioAnalyzerEnabled]
  -[MPCPlaybackEngine playerID]
  -[MPCPlaybackEngine setScheduledPlaybackStatePreservation:]
  -[MPCPlaybackEngine reportingController]
  -[MPCPlaybackEngine setAudioAnalyzerEnabled:]
  -[MPCPlaybackEngine fallbackPlaybackIntent]
  -[MPCPlaybackEngine setNeedsUISnapshot:]
  -[MPCPlaybackEngine _shouldIgnorePlaybackSessionError:]
  -[MPCPlaybackEngine eventObserver]


_MPCPlaybackEngineEventStreamInitializationParameters : NSObject <MPCPlaybackEngineEventStreamInitializationParameters>
 @property  NSString *originID
 @property  NSString *playerID
 @property  NSString *engineID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCPlaybackEngineEventStreamInitializationParameters .cxx_destruct]
  -[_MPCPlaybackEngineEventStreamInitializationParameters engineID]
  -[_MPCPlaybackEngineEventStreamInitializationParameters originID]
  -[_MPCPlaybackEngineEventStreamInitializationParameters playerID]
  -[_MPCPlaybackEngineEventStreamInitializationParameters initWithPlaybackEngineParameters:engineID:]


MPCPlayerPathCache : NSObject
 @property  NSMutableDictionary *playerPathResolutions
 @property  NSMutableDictionary *playerPathObservers
 @property  NSMutableDictionary *endpointObservers
 @property  NSObject<OS_dispatch_queue> *accessQueue
 @property  NSObject<OS_dispatch_queue> *calloutQueue

  // class methods
  +[MPCPlayerPathCache sharedCache]

  // instance methods
  -[MPCPlayerPathCache endpointObservers]
  -[MPCPlayerPathCache calloutQueue]
  -[MPCPlayerPathCache resolvedPlayerPathForPlayerPath:]
  -[MPCPlayerPathCache accessQueue]
  -[MPCPlayerPathCache .cxx_destruct]
  -[MPCPlayerPathCache _onQueue_registerForInvalidationWithUnresolvedPlayerPath:invalidationPlayerPath:]
  -[MPCPlayerPathCache observationTokenDescriptionForPlayerPath:]
  -[MPCPlayerPathCache playerPathResolutions]
  -[MPCPlayerPathCache playerPathObservers]
  -[MPCPlayerPathCache _init]
  -[MPCPlayerPathCache dealloc]
  -[MPCPlayerPathCache _onQueue_registerForEndpointChangeWithUnresolvedPlayerPath:routeResolvedPlayerPath:]


MPCPlayerAudioFormat : NSObject <MPCPlaybackEngineEventPayloadValueJSONConvertible, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned int originChannelLayout
 @property  NSDictionary *dictionaryRepresentation
 @property  MPNowPlayingInfoAudioFormat *nowPlayingAudioFormat
 @property  NSString *groupID
 @property  NSString *stableVariantID
 @property  long long tier
 @property  long long bitrate
 @property  long long sampleRate
 @property  long long bitDepth
 @property  unsigned int codec
 @property  BOOL spatialized
 @property  BOOL multiChannel
 @property  unsigned int channelLayout
 @property  NSString *audioChannelLayoutDescription
 @property  NSString *humanDescription
 @property  NSString *debugTierDescription
 @property  NSString *debugBitRateDescription
 @property  NSString *debugBitDepthDescription
 @property  NSString *debugSampleRateDescription
 @property  NSString *debugCodecDescription
 @property  NSString *debugChannelCountDescription
 @property  NSString *debugChannelLayoutDescription

  // class methods
  +[MPCPlayerAudioFormat payloadValueFromJSONValue:]

  // instance methods
  -[MPCPlayerAudioFormat codec]
  -[MPCPlayerAudioFormat groupID]
  -[MPCPlayerAudioFormat sampleRate]
  -[MPCPlayerAudioFormat initWithDictionaryRepresentation:]
  -[MPCPlayerAudioFormat .cxx_destruct]
  -[MPCPlayerAudioFormat humanDescription]
  -[MPCPlayerAudioFormat dictionaryRepresentation]
  -[MPCPlayerAudioFormat bitrate]
  -[MPCPlayerAudioFormat tier]
  -[MPCPlayerAudioFormat isEqual:]
  -[MPCPlayerAudioFormat bitDepth]
  -[MPCPlayerAudioFormat stableVariantID]
  -[MPCPlayerAudioFormat isSpatialized]
  -[MPCPlayerAudioFormat isMultiChannel]
  -[MPCPlayerAudioFormat audioChannelLayoutDescription]
  -[MPCPlayerAudioFormat copyWithZone:]
  -[MPCPlayerAudioFormat channelLayout]
  -[MPCPlayerAudioFormat nowPlayingAudioFormat]
  -[MPCPlayerAudioFormat analyticsFormatInfo]
  -[MPCPlayerAudioFormat mpc_jsonValue]
  -[MPCPlayerAudioFormat initWithNowPlayingInfoAudioFormat:]
  -[MPCPlayerAudioFormat initWithJSONDictionaryRepresentation:stableVariantID:]
  -[MPCPlayerAudioFormat _isHLSVersion:greatherThanOrEqualTo:]
  -[MPCPlayerAudioFormat _isSpatialFormat:]
  -[MPCPlayerAudioFormat _computedTierFromHLSDataWithChannelCount:]
  -[MPCPlayerAudioFormat _computedChannelLayoutTagFromHLSData:channelCount:]
  -[MPCPlayerAudioFormat _descriptionForChannelLayoutTag:]
  -[MPCPlayerAudioFormat _isMultichannelFormat:]
  -[MPCPlayerAudioFormat debugTierDescription]
  -[MPCPlayerAudioFormat debugBitRateDescription]
  -[MPCPlayerAudioFormat debugBitDepthDescription]
  -[MPCPlayerAudioFormat debugSampleRateDescription]
  -[MPCPlayerAudioFormat debugCodecDescription]
  -[MPCPlayerAudioFormat debugChannelCountDescription]
  -[MPCPlayerAudioFormat debugChannelLayoutDescription]
  -[MPCPlayerAudioFormat debugOriginChannelLayoutDescription]
  -[MPCPlayerAudioFormat debugOriginChannelCountDescription]
  -[MPCPlayerAudioFormat _isDerivedFromSpatialFormat:]
  -[MPCPlayerAudioFormat _isBinauralFormat:]
  -[MPCPlayerAudioFormat originChannelLayout]
  -[MPCPlayerAudioFormat setOriginChannelLayout:]


MPCPlayerAudioRoute : NSObject <MPCPlaybackEngineEventPayloadValueJSONConvertible, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSDictionary *dictionaryRepresentation
 @property  MPNowPlayingInfoAudioRoute *nowPlayingAudioRoute
 @property  BOOL canStreamSpatial
 @property  BOOL canRenderSpatial
 @property  long long multiChannelSupport
 @property  long long type
 @property  NSString *name
 @property  BOOL supportsSpatialization
 @property  BOOL isSpatializationEnabled
 @property  NSString *humanDescription

  // class methods
  +[MPCPlayerAudioRoute payloadValueFromJSONValue:]

  // instance methods
  -[MPCPlayerAudioRoute name]
  -[MPCPlayerAudioRoute initWithDictionaryRepresentation:]
  -[MPCPlayerAudioRoute .cxx_destruct]
  -[MPCPlayerAudioRoute humanDescription]
  -[MPCPlayerAudioRoute dictionaryRepresentation]
  -[MPCPlayerAudioRoute isEqual:]
  -[MPCPlayerAudioRoute supportsSpatialization]
  -[MPCPlayerAudioRoute isSpatializationEnabled]
  -[MPCPlayerAudioRoute type]
  -[MPCPlayerAudioRoute copyWithZone:]
  -[MPCPlayerAudioRoute nowPlayingAudioRoute]
  -[MPCPlayerAudioRoute mpc_jsonValue]
  -[MPCPlayerAudioRoute initWithNowPlayingInfoAudioRoute:]
  -[MPCPlayerAudioRoute initWithRoute:spatialIsAlwaysOn:]
  -[MPCPlayerAudioRoute multiChannelSupport]
  -[MPCPlayerAudioRoute canStreamSpatial]
  -[MPCPlayerAudioRoute canRenderSpatial]


MPCSharedListeningPlaybackContext : MPPlaybackContext <MPCPlaybackContextUserIdentityConsuming, MPCModelPlaybackRequestEnvironmentConsuming>
 @property  MPCPlaybackRequestEnvironment *playbackRequestEnvironment
 @property  MPCPlaybackSharedListeningProperties *sharedListeningProperties
 @property  ICLiveLinkIdentity *identity
 @property  ICUserIdentity *userIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCSharedListeningPlaybackContext queueFeederClass]
  +[MPCSharedListeningPlaybackContext supportsAutoPlay]

  // instance methods
  -[MPCSharedListeningPlaybackContext userIdentity]
  -[MPCSharedListeningPlaybackContext sharedListeningProperties]
  -[MPCSharedListeningPlaybackContext setPlaybackRequestEnvironment:]
  -[MPCSharedListeningPlaybackContext setUserIdentity:]
  -[MPCSharedListeningPlaybackContext descriptionComponents]
  -[MPCSharedListeningPlaybackContext isCompatibleWithReplacementContext:incompatibleReason:]
  -[MPCSharedListeningPlaybackContext .cxx_destruct]
  -[MPCSharedListeningPlaybackContext init]
  -[MPCSharedListeningPlaybackContext setIdentity:]
  -[MPCSharedListeningPlaybackContext playbackRequestEnvironment]
  -[MPCSharedListeningPlaybackContext identity]
  -[MPCSharedListeningPlaybackContext copyWithZone:]
  -[MPCSharedListeningPlaybackContext shuffleType]
  -[MPCSharedListeningPlaybackContext repeatType]
  -[MPCSharedListeningPlaybackContext setSharedListeningProperties:]
  -[MPCSharedListeningPlaybackContext getSharedListeningTracklistWithCompletion:]
  -[MPCSharedListeningPlaybackContext getRemotePlaybackQueueRepresentationWithCompletion:]


MPCSuzeLeaseSessionController : NSObject <ICSuzeLeaseSessionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCSuzeLeaseSessionController sharedController]

  // instance methods
  -[MPCSuzeLeaseSessionController .cxx_destruct]
  -[MPCSuzeLeaseSessionController _init]
  -[MPCSuzeLeaseSessionController suzeLeaseSession:leaseRenewalDidFailWithError:]
  -[MPCSuzeLeaseSessionController stopLeaseSession:completion:]
  -[MPCSuzeLeaseSessionController startLeaseSessionWithConfiguration:completion:]


_MPCSuzeLeaseSessionInfo : NSObject
 @property  long long clientCount
 @property  ICSuzeLeaseSession *icLeaseSession
 @property  MPCSuzeLeaseSession *mpcLeaseSession
 @property  BOOL shouldStopWhenFinished

  // instance methods
  -[_MPCSuzeLeaseSessionInfo clientCount]
  -[_MPCSuzeLeaseSessionInfo .cxx_destruct]
  -[_MPCSuzeLeaseSessionInfo setClientCount:]
  -[_MPCSuzeLeaseSessionInfo initWithICLeaseSession:]
  -[_MPCSuzeLeaseSessionInfo icLeaseSession]
  -[_MPCSuzeLeaseSessionInfo mpcLeaseSession]
  -[_MPCSuzeLeaseSessionInfo shouldStopWhenFinished]
  -[_MPCSuzeLeaseSessionInfo setShouldStopWhenFinished:]


_MPCProtoRadioContentReferenceLibraryAlbumContentReference : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoRadioContentReferenceLibraryAlbumContentReference .cxx_destruct]
  -[_MPCProtoRadioContentReferenceLibraryAlbumContentReference dictionaryRepresentation]
  -[_MPCProtoRadioContentReferenceLibraryAlbumContentReference writeTo:]
  -[_MPCProtoRadioContentReferenceLibraryAlbumContentReference isEqual:]
  -[_MPCProtoRadioContentReferenceLibraryAlbumContentReference readFrom:]
  -[_MPCProtoRadioContentReferenceLibraryAlbumContentReference copyWithZone:]


MPCReportingLyricsViewEvent : NSObject
 @property  MPModelSong *modelSong
 @property  MPModelPlayEvent *modelPlayEvent
 @property  NSString *lyricsID
 @property  double visibleDuration
 @property  long long displayType
 @property  long long displayedCharacterCount
 @property  NSString *language
 @property  NSString *featureName
 @property  NSString *queueGroupingID
 @property  NSData *recommendationData
 @property  long long sourceType

  // instance methods
  -[MPCReportingLyricsViewEvent setDisplayType:]
  -[MPCReportingLyricsViewEvent displayType]
  -[MPCReportingLyricsViewEvent sourceType]
  -[MPCReportingLyricsViewEvent setSourceType:]
  -[MPCReportingLyricsViewEvent setLanguage:]
  -[MPCReportingLyricsViewEvent queueGroupingID]
  -[MPCReportingLyricsViewEvent .cxx_destruct]
  -[MPCReportingLyricsViewEvent language]
  -[MPCReportingLyricsViewEvent setRecommendationData:]
  -[MPCReportingLyricsViewEvent modelPlayEvent]
  -[MPCReportingLyricsViewEvent lyricsID]
  -[MPCReportingLyricsViewEvent setModelPlayEvent:]
  -[MPCReportingLyricsViewEvent recommendationData]
  -[MPCReportingLyricsViewEvent setQueueGroupingID:]
  -[MPCReportingLyricsViewEvent featureName]
  -[MPCReportingLyricsViewEvent setFeatureName:]
  -[MPCReportingLyricsViewEvent setLyricsID:]
  -[MPCReportingLyricsViewEvent modelSong]
  -[MPCReportingLyricsViewEvent visibleDuration]
  -[MPCReportingLyricsViewEvent displayedCharacterCount]
  -[MPCReportingLyricsViewEvent setModelSong:]
  -[MPCReportingLyricsViewEvent setVisibleDuration:]
  -[MPCReportingLyricsViewEvent setDisplayedCharacterCount:]


MPCSuzeLeaseSession : NSObject
 @property  ICSuzeLeaseSession *icSuzeLeaseSession

  // instance methods
  -[MPCSuzeLeaseSession .cxx_destruct]
  -[MPCSuzeLeaseSession beginAutomaticallyRefreshingLease]
  -[MPCSuzeLeaseSession endAutomaticallyRefreshingLease]
  -[MPCSuzeLeaseSession icSuzeLeaseSession]
  -[MPCSuzeLeaseSession initWithICSuzeLeaseSession:]


_MPCLeaseManager : NSObject <MPCPlaybackEngineEventObserving>
 @property  NSMutableSet *leaseEndIgnoreReasons
 @property  NSMutableDictionary *prepareCompletions
 @property  MPCPlaybackEngine *playbackEngine
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCLeaseManager playbackEngine]
  -[_MPCLeaseManager .cxx_destruct]
  -[_MPCLeaseManager leaseEndIgnoreReasons]
  -[_MPCLeaseManager getHasPreparedLeaseForAccount:completion:]
  -[_MPCLeaseManager setPrepareCompletions:]
  -[_MPCLeaseManager setCanStealLeaseIfNeeded]
  -[_MPCLeaseManager _updateStateForPlaybackPrevention]
  -[_MPCLeaseManager beginIgnoringLeaseEndEventsForReason:]
  -[_MPCLeaseManager _itemShouldPreventPlaybackDidChangeNotification:]
  -[_MPCLeaseManager setLeaseEndIgnoreReasons:]
  -[_MPCLeaseManager prepareForCurrentItemPlayback]
  -[_MPCLeaseManager engine:willChangeToItem:fromItem:]
  -[_MPCLeaseManager initWithPlaybackEngine:]
  -[_MPCLeaseManager prepareForPlaybackWithAccount:completion:]
  -[_MPCLeaseManager endIgnoringLeaseEndEventsForReason:]
  -[_MPCLeaseManager engine:didChangeToState:]
  -[_MPCLeaseManager prepareCompletions]


MPCReportingIdentityProperties : NSObject
 @property  NSString *householdID
 @property  unsigned long storeAccountID
 @property  NSString *storeFrontID
 @property  BOOL hasSubscriptionPlaybackCapability
 @property  ICPlayActivityEnqueuerProperties *enqueuerProperties

  // instance methods
  -[MPCReportingIdentityProperties .cxx_destruct]
  -[MPCReportingIdentityProperties setEnqueuerProperties:]
  -[MPCReportingIdentityProperties setHouseholdID:]
  -[MPCReportingIdentityProperties storeAccountID]
  -[MPCReportingIdentityProperties enqueuerProperties]
  -[MPCReportingIdentityProperties householdID]
  -[MPCReportingIdentityProperties setStoreFrontID:]
  -[MPCReportingIdentityProperties setStoreAccountID:]
  -[MPCReportingIdentityProperties storeFrontID]
  -[MPCReportingIdentityProperties setHasSubscriptionPlaybackCapability:]
  -[MPCReportingIdentityProperties hasSubscriptionPlaybackCapability]


_MPCPlaybackSessionArchive : MSVSegmentedCodingPackage
 @property  NSString *identifier
 @property  MPNowPlayingContentItem *contentItem
 @property  UIImage *artworkImage
 @property  NSDate *lastModifiedDate

  // class methods
  +[_MPCPlaybackSessionArchive packageTypeIdentifier]

  // instance methods
  -[_MPCPlaybackSessionArchive setArtworkImage:]
  -[_MPCPlaybackSessionArchive .cxx_destruct]
  -[_MPCPlaybackSessionArchive artworkImage]
  -[_MPCPlaybackSessionArchive saveWithError:]
  -[_MPCPlaybackSessionArchive isEqual:]
  -[_MPCPlaybackSessionArchive contentItem]
  -[_MPCPlaybackSessionArchive identifier]
  -[_MPCPlaybackSessionArchive setContentItem:]
  -[_MPCPlaybackSessionArchive initWithURL:identifier:]
  -[_MPCPlaybackSessionArchive lastModifiedDate]
  -[_MPCPlaybackSessionArchive initWithURL:]
  -[_MPCPlaybackSessionArchive writeWithError:]


MPCPlaybackAccount : NSObject <NSCopying>
 @property  NSString *hashedDSID
 @property  BOOL hasCloudLibraryEnabled
 @property  NSString *storeFrontIdentifier
 @property  BOOL activeAccount
 @property  BOOL privateListeningEnabled
 @property  ICURLBag *bag
 @property  ICUserIdentity *userIdentity
 @property  ICMusicSubscriptionStatus *subscriptionStatus
 @property  BOOL delegated
 @property  BOOL canAutoPlay
 @property  BOOL hasCatalogPlaybackCapability
 @property  BOOL requiresAuthorizationTokenForPlayback
 @property  BOOL usesLease

  // instance methods
  -[MPCPlaybackAccount storeFrontIdentifier]
  -[MPCPlaybackAccount setStoreFrontIdentifier:]
  -[MPCPlaybackAccount userIdentity]
  -[MPCPlaybackAccount hasCatalogPlaybackCapability]
  -[MPCPlaybackAccount isActiveAccount]
  -[MPCPlaybackAccount subscriptionStatus]
  -[MPCPlaybackAccount .cxx_destruct]
  -[MPCPlaybackAccount bag]
  -[MPCPlaybackAccount setPrivateListeningEnabled:]
  -[MPCPlaybackAccount usesLease]
  -[MPCPlaybackAccount isEqual:]
  -[MPCPlaybackAccount initWithDelegatedUserIdentity:]
  -[MPCPlaybackAccount setHasCloudLibraryEnabled:]
  -[MPCPlaybackAccount requiresAuthorizationTokenForPlayback]
  -[MPCPlaybackAccount hasCloudLibraryEnabled]
  -[MPCPlaybackAccount setBag:]
  -[MPCPlaybackAccount canAutoPlay]
  -[MPCPlaybackAccount copyWithZone:]
  -[MPCPlaybackAccount setActiveAccount:]
  -[MPCPlaybackAccount setHashedDSID:]
  -[MPCPlaybackAccount isPrivateListeningEnabled]
  -[MPCPlaybackAccount hashedDSID]
  -[MPCPlaybackAccount isDelegated]
  -[MPCPlaybackAccount initWithUserIdentity:subscriptionStatus:]


_MPCPlaybackAccountManager : NSObject
 @property  MPCPlaybackEngine *playbackEngine
 @property  NSArray *accounts
 @property  BOOL hasLoadedInitialAccounts
 @property  MPCPlaybackAccount *activeAccount

  // instance methods
  -[_MPCPlaybackAccountManager _enumerateIdentitiesWithCompletion:]
  -[_MPCPlaybackAccountManager playbackEngine]
  -[_MPCPlaybackAccountManager accounts]
  -[_MPCPlaybackAccountManager _updateAccounts]
  -[_MPCPlaybackAccountManager _buildAccountFromLocalIdentity:completion:]
  -[_MPCPlaybackAccountManager .cxx_destruct]
  -[_MPCPlaybackAccountManager activeAccount]
  -[_MPCPlaybackAccountManager _subscriptionStatusChangedNotification:]
  -[_MPCPlaybackAccountManager _homeUserSettingsChangeNotification:]
  -[_MPCPlaybackAccountManager _shouldPurgeGlideSubscriptionDataForAccount:]
  -[_MPCPlaybackAccountManager initWithPlaybackEngine:]
  -[_MPCPlaybackAccountManager _userIdentityStoreChangedNotification:]
  -[_MPCPlaybackAccountManager _buildAccountFromDelegatedIdentity:completion:]
  -[_MPCPlaybackAccountManager start]
  -[_MPCPlaybackAccountManager accountForUserIdentity:]
  -[_MPCPlaybackAccountManager accountForDSID:]
  -[_MPCPlaybackAccountManager performAfterLoadingAccounts:]
  -[_MPCPlaybackAccountManager accountForHashedDSID:]
  -[_MPCPlaybackAccountManager hasLoadedInitialAccounts]
  -[_MPCPlaybackAccountManager _updateAccountsWithAttemptCount:]


MPCPlayerSessionResponseItem : NSObject
 @property  MPCPlayerSessionResponse *response
 @property  NSIndexPath *indexPath
 @property  NSString *contentItemIdentifier
 @property  MPModelGenericObject *metadataObject

  // instance methods
  -[MPCPlayerSessionResponseItem play]
  -[MPCPlayerSessionResponseItem initWithModelGenericObject:indexPath:response:]
  -[MPCPlayerSessionResponseItem .cxx_destruct]
  -[MPCPlayerSessionResponseItem remove]
  -[MPCPlayerSessionResponseItem contentItemIdentifier]
  -[MPCPlayerSessionResponseItem isEqual:]
  -[MPCPlayerSessionResponseItem indexPath]
  -[MPCPlayerSessionResponseItem response]
  -[MPCPlayerSessionResponseItem metadataObject]
  -[MPCPlayerSessionResponseItem playOnPlayerPath:]


MPCModelPlaybackContext : MPPlaybackContext <MPCModelPlaybackRequestEnvironmentConsuming, MPCPlaybackContextUserIdentityConsuming, MPCPlaybackContextPrivateListeningOverridable>
 @property  NSString *encodedMediaLibraryUniqueID
 @property  BOOL skipEncodingMediaLibraryUniqueID
 @property  MPCPlaybackRequestEnvironment *playbackRequestEnvironment
 @property  MPModelRequest *request
 @property  MPIdentifierSet *startItemIdentifiers
 @property  NSDictionary *startTimeModifications
 @property  NSDictionary *endTimeModifications
 @property  NSDictionary *assetStoreFronts
 @property  MPModelGenericObject *fallbackSectionRepresentation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  ICUserIdentity *userIdentity
 @property  NSNumber *privateListeningOverride

  // class methods
  +[MPCModelPlaybackContext supportsSecureCoding]
  +[MPCModelPlaybackContext queueFeederClass]
  +[MPCModelPlaybackContext supportsAutoPlay]

  // instance methods
  -[MPCModelPlaybackContext setRequest:]
  -[MPCModelPlaybackContext userIdentity]
  -[MPCModelPlaybackContext initWithCoder:]
  -[MPCModelPlaybackContext setPlaybackRequestEnvironment:]
  -[MPCModelPlaybackContext setUserIdentity:]
  -[MPCModelPlaybackContext descriptionComponents]
  -[MPCModelPlaybackContext containsRestorableContent]
  -[MPCModelPlaybackContext clearStartItem]
  -[MPCModelPlaybackContext .cxx_destruct]
  -[MPCModelPlaybackContext isSupported]
  -[MPCModelPlaybackContext startItemIdentifiers]
  -[MPCModelPlaybackContext startTimeModifications]
  -[MPCModelPlaybackContext setStartItemIdentifiers:]
  -[MPCModelPlaybackContext init]
  -[MPCModelPlaybackContext request]
  -[MPCModelPlaybackContext endTimeModifications]
  -[MPCModelPlaybackContext assetStoreFronts]
  -[MPCModelPlaybackContext setAssetStoreFronts:]
  -[MPCModelPlaybackContext playbackRequestEnvironment]
  -[MPCModelPlaybackContext setEndTimeModifications:]
  -[MPCModelPlaybackContext copyWithZone:]
  -[MPCModelPlaybackContext encodeWithCoder:]
  -[MPCModelPlaybackContext privateListeningOverride]
  -[MPCModelPlaybackContext setStartTimeModifications:]
  -[MPCModelPlaybackContext getSharedListeningTracklistWithCompletion:]
  -[MPCModelPlaybackContext setPrivateListeningOverride:]
  -[MPCModelPlaybackContext getRemotePlaybackQueueRepresentationWithCompletion:]
  -[MPCModelPlaybackContext setSkipEncodingMediaLibraryUniqueID:]
  -[MPCModelPlaybackContext fallbackSectionRepresentation]
  -[MPCModelPlaybackContext setFallbackSectionRepresentation:]
  -[MPCModelPlaybackContext skipEncodingMediaLibraryUniqueID]
  -[MPCModelPlaybackContext updateRequestPlaybackEnvironment]
  -[MPCModelPlaybackContext encodedMediaLibraryUniqueID]


MPCReportingPlaybackActivityEvent : NSObject <MPCReportingEvent>
 @property  ICPlayActivityEvent *playActivityEvent
 @property  BOOL shouldReportToStore
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCReportingPlaybackActivityEvent .cxx_destruct]
  -[MPCReportingPlaybackActivityEvent isValidReportingEvent]
  -[MPCReportingPlaybackActivityEvent reportingEventType]
  -[MPCReportingPlaybackActivityEvent playActivityEvent]
  -[MPCReportingPlaybackActivityEvent shouldReportToStore]
  -[MPCReportingPlaybackActivityEvent setPlayActivityEvent:]
  -[MPCReportingPlaybackActivityEvent setShouldReportToStore:]


MPCPlaybackHistoryRecordChangeRequestOperation : MPAsyncOperation
 @property  MPCPlaybackHistoryRecordChangeRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPCPlaybackHistoryRecordChangeRequestOperation setRequest:]
  -[MPCPlaybackHistoryRecordChangeRequestOperation .cxx_destruct]
  -[MPCPlaybackHistoryRecordChangeRequestOperation responseHandler]
  -[MPCPlaybackHistoryRecordChangeRequestOperation setResponseHandler:]
  -[MPCPlaybackHistoryRecordChangeRequestOperation execute]
  -[MPCPlaybackHistoryRecordChangeRequestOperation request]
  -[MPCPlaybackHistoryRecordChangeRequestOperation _finishChangeRequestOperationWithError:]


MPCStoreFrontLocalEquivalencyMiddleware : NSObject <MPCPlayerResponseBuilder, MPMiddleware>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPModelGenericObject *overridePlayingItem
 @property  NSIndexPath *playingItemIndexPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *invalidationObservers

  // instance methods
  -[MPCStoreFrontLocalEquivalencyMiddleware overridePlayingItem]
  -[MPCStoreFrontLocalEquivalencyMiddleware invalidationObservers]
  -[MPCStoreFrontLocalEquivalencyMiddleware playingItemIndexPath]
  -[MPCStoreFrontLocalEquivalencyMiddleware .cxx_destruct]
  -[MPCStoreFrontLocalEquivalencyMiddleware setOverridePlayingItem:]
  -[MPCStoreFrontLocalEquivalencyMiddleware operationsForPlayerRequest:]
  -[MPCStoreFrontLocalEquivalencyMiddleware _stateDumpObject]
  -[MPCStoreFrontLocalEquivalencyMiddleware setPlayingItemIndexPath:]
  -[MPCStoreFrontLocalEquivalencyMiddleware playerModelObject:propertySet:atIndexPath:chain:]
  -[MPCStoreFrontLocalEquivalencyMiddleware operationsForRequest:]
  -[MPCStoreFrontLocalEquivalencyMiddleware setInvalidationObservers:]


MPCScriptedSceneCollectionParser : NSObject
  // class methods
  +[MPCScriptedSceneCollectionParser sceneCollectionForScriptData:]
  +[MPCScriptedSceneCollectionParser _instructionsForSceneDictionaries:]
  +[MPCScriptedSceneCollectionParser sceneCollectionForMetadataItems:]


_MPCNullPlaybackContext : MPPlaybackContext
 @property  NSString *label

  // class methods
  +[_MPCNullPlaybackContext supportsSecureCoding]
  +[_MPCNullPlaybackContext queueFeederClass]

  // instance methods
  -[_MPCNullPlaybackContext label]
  -[_MPCNullPlaybackContext initWithCoder:]
  -[_MPCNullPlaybackContext descriptionComponents]
  -[_MPCNullPlaybackContext .cxx_destruct]
  -[_MPCNullPlaybackContext setLabel:]
  -[_MPCNullPlaybackContext copyWithZone:]
  -[_MPCNullPlaybackContext encodeWithCoder:]


_MPCNullQueueFeeder : MPQueueFeeder <MPCQueueControllerDataSource>
 @property  BOOL containsLiveStream
 @property  BOOL containsTransportableContent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCNullQueueFeeder uniqueIdentifier]
  -[_MPCNullQueueFeeder .cxx_destruct]
  -[_MPCNullQueueFeeder reloadSection:completion:]
  -[_MPCNullQueueFeeder init]
  -[_MPCNullQueueFeeder containsTransportableContent]
  -[_MPCNullQueueFeeder section:supportsShuffleType:]
  -[_MPCNullQueueFeeder loadPlaybackContext:completion:]
  -[_MPCNullQueueFeeder modelPlayEventForItem:inSection:]
  -[_MPCNullQueueFeeder identifiersForItem:inSection:]
  -[_MPCNullQueueFeeder itemForItem:inSection:]
  -[_MPCNullQueueFeeder supportsAutoPlayForItem:inSection:]
  -[_MPCNullQueueFeeder containsLiveStream]


_MPCReportingController : NSObject <ICEnvironmentMonitorObserver>
 @property  MPAssistantAnalyticsReportingController *assistantAnalyticsController
 @property  MPCJinglePlayActivityReportingController *jinglePlayActivityReportingController
 @property  MPCReportingPlaybackObserver *reportingPlaybackObserver
 @property  MPRTCReportingController *rtcReportingController
 @property  MPCPlaybackHistoryController *playbackHistoryController
 @property  MPCLyricsReportingController *lyricsReportingController
 @property  MPCPlaybackEngine *playbackEngine
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPCReportingController environmentMonitorDidChangeNetworkType:]
  -[_MPCReportingController playbackEngine]
  -[_MPCReportingController setJinglePlayActivityReportingController:]
  -[_MPCReportingController .cxx_destruct]
  -[_MPCReportingController reportUserSeekFromTime:toTime:]
  -[_MPCReportingController setReportingPlaybackObserver:]
  -[_MPCReportingController reportingPlaybackObserver]
  -[_MPCReportingController jinglePlayActivityReportingController]
  -[_MPCReportingController initWithPlaybackEngine:]
  -[_MPCReportingController dealloc]
  -[_MPCReportingController recordLyricsViewEvent:]
  -[_MPCReportingController assistantAnalyticsController]
  -[_MPCReportingController setAssistantAnalyticsController:]
  -[_MPCReportingController rtcReportingController]
  -[_MPCReportingController setRtcReportingController:]
  -[_MPCReportingController playbackHistoryController]
  -[_MPCReportingController setPlaybackHistoryController:]
  -[_MPCReportingController lyricsReportingController]
  -[_MPCReportingController setLyricsReportingController:]


MPCRadioPlaybackIntentDataSource : NSObject <MPCPlaybackIntentDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCRadioPlaybackIntentDataSource getPlaybackContextForIntent:withCompletion:]


MPCLeaseController : NSObject <MFLeaseControlling>
 @property  MPCMediaFoundationTranslator *translator
 @property  _MPCLeaseManager *leaseManager
 @property  <MFPlaybackStackController> *stackController

  // instance methods
  -[MPCLeaseController .cxx_destruct]
  -[MPCLeaseController translator]
  -[MPCLeaseController leaseManager]
  -[MPCLeaseController stackController]
  -[MPCLeaseController initWithTranslator:leaseManager:]
  -[MPCLeaseController setStackController:]
  -[MPCLeaseController requestLeaseForItem:completion:]
  -[MPCLeaseController relinquishLeaseForItem:completion:]


MPCPlayerLanguageOptionGroup : NSObject
 @property  MPCPlayerResponse *response
 @property  NSString *localizedTitle
 @property  unsigned long numberOfOptions
 @property  unsigned long indexOfSelectedOption
 @property  NSArray *options
 @property  MPNowPlayingInfoLanguageOption *selectedOption
 @property  BOOL allowEmptySelection

  // instance methods
  -[MPCPlayerLanguageOptionGroup localizedTitle]
  -[MPCPlayerLanguageOptionGroup options]
  -[MPCPlayerLanguageOptionGroup .cxx_destruct]
  -[MPCPlayerLanguageOptionGroup allowEmptySelection]
  -[MPCPlayerLanguageOptionGroup response]
  -[MPCPlayerLanguageOptionGroup selectedOption]
  -[MPCPlayerLanguageOptionGroup initWithLanguageOptionGroups:currentLanguageOptions:response:]
  -[MPCPlayerLanguageOptionGroup numberOfOptions]
  -[MPCPlayerLanguageOptionGroup indexOfSelectedOption]
  -[MPCPlayerLanguageOptionGroup localizedTitleForOptionAtIndex:]
  -[MPCPlayerLanguageOptionGroup changeRequestForOptionAtIndex:]


_MPCProtoTracklist : PBCodable <NSCopying>
  // instance methods
  -[_MPCProtoTracklist .cxx_destruct]
  -[_MPCProtoTracklist dictionaryRepresentation]
  -[_MPCProtoTracklist writeTo:]
  -[_MPCProtoTracklist isEqual:]
  -[_MPCProtoTracklist readFrom:]
  -[_MPCProtoTracklist copyWithZone:]


MPCMediaFoundationTranslator : NSObject <MFQueueControlling>
 @property  NSMutableDictionary *mapping
 @property  <MPCQueueItemProviding> *queueController

  // instance methods
  -[MPCMediaFoundationTranslator mapping]
  -[MPCMediaFoundationTranslator .cxx_destruct]
  -[MPCMediaFoundationTranslator queueController]
  -[MPCMediaFoundationTranslator resetMapping]
  -[MPCMediaFoundationTranslator initWithQueueController:]
  -[MPCMediaFoundationTranslator setMPAVItem:forMFPlayerItem:]
  -[MPCMediaFoundationTranslator MPAVItemForMFPlayerItem:]
  -[MPCMediaFoundationTranslator updatePlayerPlaybackCoordinator:]
  -[MPCMediaFoundationTranslator _MPAVItemForMFPlayerItem:allowReuse:]
  -[MPCMediaFoundationTranslator itemToFollowItem:direction:distance:reason:]
  -[MPCMediaFoundationTranslator queueItemForPlayerItem:allowReuse:]
  -[MPCMediaFoundationTranslator canSkipInDirection:fromItem:]


MPCModelRadioGetTracksStep : NSObject
 @property  ICUserIdentityProperties *delegatedIdentityProperties
 @property  NSError *error
 @property  BOOL finished
 @property  ICUserIdentityProperties *identityProperties
 @property  ICPlayActivityController *playActivityController
 @property  unsigned long playActitySessionToken
 @property  ICRadioGetTracksRequest *request
 @property  ICRadioGetTracksResponse *response
 @property  ICRadioGetTracksResponse *siriAssetInfoGetTracksResponse

  // instance methods
  -[MPCModelRadioGetTracksStep isFinished]
  -[MPCModelRadioGetTracksStep performWithCompletionHandler:]
  -[MPCModelRadioGetTracksStep identityProperties]
  -[MPCModelRadioGetTracksStep .cxx_destruct]
  -[MPCModelRadioGetTracksStep request]
  -[MPCModelRadioGetTracksStep response]
  -[MPCModelRadioGetTracksStep error]
  -[MPCModelRadioGetTracksStep playActivityController]
  -[MPCModelRadioGetTracksStep delegatedIdentityProperties]
  -[MPCModelRadioGetTracksStep initWithGetTracksRequest:siriAssetInfo:playActivityController:]
  -[MPCModelRadioGetTracksStep playActitySessionToken]
  -[MPCModelRadioGetTracksStep initWithPreviousStep:]
  -[MPCModelRadioGetTracksStep _performDefaultHandlingForButtonAction:]
  -[MPCModelRadioGetTracksStep _presentServerDialog:completionHandler:]
  -[MPCModelRadioGetTracksStep nextStepWithError:]
  -[MPCModelRadioGetTracksStep _fireAndForgetServerDialog:]
  -[MPCModelRadioGetTracksStep siriAssetInfoGetTracksResponse]


MPCModelRadioGetTracksEstablishAccountStep : MPCModelRadioGetTracksStep
  // instance methods
  -[MPCModelRadioGetTracksEstablishAccountStep performWithCompletionHandler:]


MPCModelRadioGetTracksPrepareIdentityStep : MPCModelRadioGetTracksStep
  // instance methods
  -[MPCModelRadioGetTracksPrepareIdentityStep performWithCompletionHandler:]
  -[MPCModelRadioGetTracksPrepareIdentityStep nextStepWithIdentityProperties:delegatedIdentityProperties:]


MPCModelRadioGetTracksPreparePlayActivityStep : MPCModelRadioGetTracksStep
  // instance methods
  -[MPCModelRadioGetTracksPreparePlayActivityStep performWithCompletionHandler:]


MPCModelRadioGetTracksRequestStep : MPCModelRadioGetTracksStep
  // instance methods
  -[MPCModelRadioGetTracksRequestStep performWithCompletionHandler:]
  -[MPCModelRadioGetTracksRequestStep nextStepWithResponse:error:]


MPCModelRadioGetTracksRetryDialogStep : MPCModelRadioGetTracksStep
  // instance methods
  -[MPCModelRadioGetTracksRetryDialogStep performWithCompletionHandler:]
  -[MPCModelRadioGetTracksRetryDialogStep nextStepByPerformingButtonAction:]


MPCAVItemTrace : NSObject
 @property  NSString *name
 @property  MPAVItem *item
 @property  unsigned int endEvent
 @property  double started
 @property  double ended

  // class methods
  +[MPCAVItemTrace traceWithName:item:event:]
  +[MPCAVItemTrace traceIntervalWithName:item:beginEvent:endEvent:]

  // instance methods
  -[MPCAVItemTrace setItem:]
  -[MPCAVItemTrace setEnded:]
  -[MPCAVItemTrace setStarted:]
  -[MPCAVItemTrace name]
  -[MPCAVItemTrace started]
  -[MPCAVItemTrace .cxx_destruct]
  -[MPCAVItemTrace setName:]
  -[MPCAVItemTrace item]
  -[MPCAVItemTrace endEvent]
  -[MPCAVItemTrace setEndEvent:]
  -[MPCAVItemTrace cancel]
  -[MPCAVItemTrace dealloc]
  -[MPCAVItemTrace ended]
  -[MPCAVItemTrace endInterval]


MPCModelGenericAVItemHomeSharingLoadOperation : MPAsyncOperation
 @property  MPCModelGenericAVItemAssetLoadProperties *assetLoadProperties
 @property  @? responseHandler

  // instance methods
  -[MPCModelGenericAVItemHomeSharingLoadOperation .cxx_destruct]
  -[MPCModelGenericAVItemHomeSharingLoadOperation responseHandler]
  -[MPCModelGenericAVItemHomeSharingLoadOperation setResponseHandler:]
  -[MPCModelGenericAVItemHomeSharingLoadOperation execute]
  -[MPCModelGenericAVItemHomeSharingLoadOperation setAssetLoadProperties:]
  -[MPCModelGenericAVItemHomeSharingLoadOperation assetLoadProperties]


MPCPlaybackRequestEnvironment : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  NSString *clientIdentifier
 @property  NSString *clientVersion
 @property  NSString *requestingBundleIdentifier
 @property  NSString *requestingBundleVersion
 @property  MPCPlaybackDelegationProperties *delegationProperties
 @property  MPCPrivateListeningStateSource *privateListeningStateSource
 @property  ICUserIdentity *userIdentity

  // class methods
  +[MPCPlaybackRequestEnvironment supportsSecureCoding]
  +[MPCPlaybackRequestEnvironment activeAccountRequestEnvironment]
  +[MPCPlaybackRequestEnvironment requestEnvironmentWithUserIdentity:]

  // instance methods
  -[MPCPlaybackRequestEnvironment clientVersion]
  -[MPCPlaybackRequestEnvironment userIdentity]
  -[MPCPlaybackRequestEnvironment initWithCoder:]
  -[MPCPlaybackRequestEnvironment initWithUserIdentity:]
  -[MPCPlaybackRequestEnvironment requestingBundleVersion]
  -[MPCPlaybackRequestEnvironment .cxx_destruct]
  -[MPCPlaybackRequestEnvironment init]
  -[MPCPlaybackRequestEnvironment requestingBundleIdentifier]
  -[MPCPlaybackRequestEnvironment clientIdentifier]
  -[MPCPlaybackRequestEnvironment mutableCopyWithZone:]
  -[MPCPlaybackRequestEnvironment copyWithZone:]
  -[MPCPlaybackRequestEnvironment encodeWithCoder:]
  -[MPCPlaybackRequestEnvironment _createStoreRequestContext]
  -[MPCPlaybackRequestEnvironment privateListeningStateSource]
  -[MPCPlaybackRequestEnvironment delegationProperties]
  -[MPCPlaybackRequestEnvironment _createMusicKitRequestContext]
  -[MPCPlaybackRequestEnvironment rectifiedPlaybackRequestEnvironmentForAccountManager:reasons:]
  -[MPCPlaybackRequestEnvironment _copyWithPlaybackRequestEnvironmentClass:]


MPCMutablePlaybackRequestEnvironment : MPCPlaybackRequestEnvironment
 @property  NSString *clientIdentifier
 @property  NSString *clientVersion
 @property  NSString *requestingBundleIdentifier
 @property  NSString *requestingBundleVersion
 @property  MPCPlaybackDelegationProperties *delegationProperties
 @property  MPCPrivateListeningStateSource *privateListeningStateSource
 @property  ICUserIdentity *userIdentity

  // instance methods
  -[MPCMutablePlaybackRequestEnvironment setUserIdentity:]
  -[MPCMutablePlaybackRequestEnvironment setRequestingBundleIdentifier:]
  -[MPCMutablePlaybackRequestEnvironment mutableCopyWithZone:]
  -[MPCMutablePlaybackRequestEnvironment setClientVersion:]
  -[MPCMutablePlaybackRequestEnvironment copyWithZone:]
  -[MPCMutablePlaybackRequestEnvironment setRequestingBundleVersion:]
  -[MPCMutablePlaybackRequestEnvironment setClientIdentifier:]
  -[MPCMutablePlaybackRequestEnvironment setPrivateListeningStateSource:]
  -[MPCMutablePlaybackRequestEnvironment setDelegationProperties:]


MPCSharedListeningLiveLinkReusePool : NSObject
  // class methods
  +[MPCSharedListeningLiveLinkReusePool sharedReusePool]

  // instance methods
  -[MPCSharedListeningLiveLinkReusePool .cxx_destruct]
  -[MPCSharedListeningLiveLinkReusePool init]
  -[MPCSharedListeningLiveLinkReusePool storeLiveLink:forSessionID:]
  -[MPCSharedListeningLiveLinkReusePool liveLinkForSessionID:]


MPCAssistantEncodings : NSObject
  // instance methods
  -[MPCAssistantEncodings decodeHashedRouteUIDs:completion:]
  -[MPCAssistantEncodings encodeURLData:]
  -[MPCAssistantEncodings decodeURLData:]
  -[MPCAssistantEncodings encodeHashedRouteUIDs:completion:]


MPCAssistantContext : NSObject
  // instance methods
  -[MPCAssistantContext .cxx_destruct]
  -[MPCAssistantContext init]
  -[MPCAssistantContext modifySystemMusicContextForDestination:completion:]


MPCModelRadioPlaybackQueue : NSObject
 @property  MPCModelGenericAVItemUserIdentityPropertySet *identityPropertySet
 @property  long long numberOfItems
 @property  MPModelRadioStation *radioStation
 @property  ICRadioPlaybackHistory *playbackHistory
 @property  MPSectionedCollection *trackModels
 @property  MPSectionedCollection *tracks

  // instance methods
  -[MPCModelRadioPlaybackQueue tracks]
  -[MPCModelRadioPlaybackQueue removeAllItems]
  -[MPCModelRadioPlaybackQueue .cxx_destruct]
  -[MPCModelRadioPlaybackQueue initWithPlaybackContext:]
  -[MPCModelRadioPlaybackQueue radioStation]
  -[MPCModelRadioPlaybackQueue setRadioStation:]
  -[MPCModelRadioPlaybackQueue numberOfItems]
  -[MPCModelRadioPlaybackQueue identityPropertySet]
  -[MPCModelRadioPlaybackQueue setIdentityPropertySet:]
  -[MPCModelRadioPlaybackQueue AVItemAtIndex:]
  -[MPCModelRadioPlaybackQueue isExplicitItemAtIndex:]
  -[MPCModelRadioPlaybackQueue playbackHistory]
  -[MPCModelRadioPlaybackQueue removeExplicitItems]
  -[MPCModelRadioPlaybackQueue savePlaybackHistoryWithUpdates:completionHandler:]
  -[MPCModelRadioPlaybackQueue trackModels]
  -[MPCModelRadioPlaybackQueue trackForItemAtIndex:]
  -[MPCModelRadioPlaybackQueue updateWithPersonalizedResponse:]
  -[MPCModelRadioPlaybackQueue savePlaybackHistoryWithUpdates:]
  -[MPCModelRadioPlaybackQueue tracksByApplyingTracksResponse:currentIndex:]


_MPCModelRadioPlaybackQueueStationTracksCollection : NSObject
 @property  ICMutableRadioPlaybackHistory *playbackHistory
 @property  MPSectionedCollection *trackModels
 @property  MPSectionedCollection *tracks
 @property  MPCModelGenericAVItemUserIdentityPropertySet *identityPropertySet
 @property  long long numberOfItems

  // instance methods
  -[_MPCModelRadioPlaybackQueueStationTracksCollection tracks]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection removeAllItems]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection .cxx_destruct]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection initWithPlaybackContext:]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection numberOfItems]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection identityPropertySet]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection setIdentityPropertySet:]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection AVItemAtIndex:]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection isExplicitItemAtIndex:]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection playbackHistory]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection removeExplicitItems]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection trackModels]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection trackForItemAtIndex:]
  -[_MPCModelRadioPlaybackQueueStationTracksCollection updateWithPersonalizedResponse:]


MPCAssistantPause : NSObject
  // instance methods
  -[MPCAssistantPause .cxx_destruct]
  -[MPCAssistantPause pauseDevicesByUID:withRefId:audioRoutingInfo:source:completion:]
  -[MPCAssistantPause pauseDevicesByUID:withRefId:audioRoutingInfo:completion:]


MPCAssistantCommand : NSObject
  // instance methods
  -[MPCAssistantCommand .cxx_destruct]
  -[MPCAssistantCommand init]
  -[MPCAssistantCommand sendCommand:toDestination:withOptions:completion:]
  -[MPCAssistantCommand sendCommandWithResult:toDestination:withOptions:completion:]
  -[MPCAssistantCommand _applyOriginatingDeviceUIDs:]
  -[MPCAssistantCommand _setAnalyticsKey:value:]
  -[MPCAssistantCommand _setAnalyticsError:]
  -[MPCAssistantCommand sendPlaybackQueueWithResult:toDestination:completion:]
  -[MPCAssistantCommand sendPlaybackQueueWithResult:toDestination:withOptions:completion:]
  -[MPCAssistantCommand _findOutputDevicesForDestination:completion:]
  -[MPCAssistantCommand sendPlaybackArchive:toDestination:withOptions:completion:]
  -[MPCAssistantCommand sendPlaybackArchiveWithResult:toDestination:withOptions:completion:]
  -[MPCAssistantCommand sendPlaybackQueue:toDestination:completion:]
  -[MPCAssistantCommand sendPlaybackQueue:toDestination:withOptions:completion:]
  -[MPCAssistantCommand sendPlaybackArchive:toDestination:completion:]
  -[MPCAssistantCommand sendPlaybackArchiveWithResult:toDestination:completion:]


MPCPlaybackHistoryRecordChangeRequest : NSObject <NSCopying>
 @property  BOOL allowsStoreContainerImport
 @property  MPModelPlayEvent *playEvent
 @property  MPModelGenericObject *itemGenericObject
 @property  long long type

  // instance methods
  -[MPCPlaybackHistoryRecordChangeRequest newOperationWithResponseHandler:]
  -[MPCPlaybackHistoryRecordChangeRequest setType:]
  -[MPCPlaybackHistoryRecordChangeRequest .cxx_destruct]
  -[MPCPlaybackHistoryRecordChangeRequest type]
  -[MPCPlaybackHistoryRecordChangeRequest copyWithZone:]
  -[MPCPlaybackHistoryRecordChangeRequest playEvent]
  -[MPCPlaybackHistoryRecordChangeRequest setItemGenericObject:]
  -[MPCPlaybackHistoryRecordChangeRequest setPlayEvent:]
  -[MPCPlaybackHistoryRecordChangeRequest setAllowsStoreContainerImport:]
  -[MPCPlaybackHistoryRecordChangeRequest itemGenericObject]
  -[MPCPlaybackHistoryRecordChangeRequest allowsStoreContainerImport]


MPCAssistantGetVolume : NSObject
  // instance methods
  -[MPCAssistantGetVolume getVolumeLevelForUID:completion:]


MPCMediaFoundationQueueCoordinator : NSObject <MPAVQueueCoordinating>
 @property  <MFPlaybackStackController><MFQueueManagement> *playbackStackController
 @property  MPAVItem *currentItem
 @property  BOOL shouldExpectEmptyQueue
 @property  BOOL shouldDeferItemLoading
 @property  NSArray *items
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCMediaFoundationQueueCoordinator items]
  -[MPCMediaFoundationQueueCoordinator .cxx_destruct]
  -[MPCMediaFoundationQueueCoordinator currentItem]
  -[MPCMediaFoundationQueueCoordinator playbackStackController]
  -[MPCMediaFoundationQueueCoordinator shouldExpectEmptyQueue]
  -[MPCMediaFoundationQueueCoordinator setShouldExpectEmptyQueue:]
  -[MPCMediaFoundationQueueCoordinator reloadItemsKeepingCurrentItem:]
  -[MPCMediaFoundationQueueCoordinator reset]
  -[MPCMediaFoundationQueueCoordinator shouldDeferItemLoading]
  -[MPCMediaFoundationQueueCoordinator setShouldDeferItemLoading:]
  -[MPCMediaFoundationQueueCoordinator initWithStackController:]


MPCItemBookmarker : NSObject
 @property  MPCMediaFoundationTranslator *translator
 @property  NSObject<OS_dispatch_source> *bookmarkingTimer

  // instance methods
  -[MPCItemBookmarker .cxx_destruct]
  -[MPCItemBookmarker setTranslator:]
  -[MPCItemBookmarker translator]
  -[MPCItemBookmarker initWithTranslator:]
  -[MPCItemBookmarker userDidSkipDuringPlaybackFromItem:direction:]
  -[MPCItemBookmarker playbackDidStopForItem:time:]
  -[MPCItemBookmarker updateDurationSnapshotWithTime:forItem:rate:]
  -[MPCItemBookmarker currentItemWillChangeFromItem:toItem:time:]
  -[MPCItemBookmarker itemDidBecomeCurrent:time:]
  -[MPCItemBookmarker itemDidResignCurrent:time:]
  -[MPCItemBookmarker itemDidPlayToEnd:time:]
  -[MPCItemBookmarker playbackDidStartForItem:time:rate:]
  -[MPCItemBookmarker playbackRateDidChangeToRate:forItem:time:]
  -[MPCItemBookmarker playbackStateDidChangeFromState:toState:forItem:time:rate:]
  -[MPCItemBookmarker _teardownBookmarkingTimer]
  -[MPCItemBookmarker _setupBookmarkingTimerForItem:]
  -[MPCItemBookmarker bookmarkingTimer]
  -[MPCItemBookmarker setBookmarkingTimer:]


MPCModelRadioQueueFeeder : MPQueueFeeder <MPRTCReportingItemSessionContaining, MPAVItemObserver, ICEnvironmentMonitorObserver, MPCQueueControllerDataSource>
 @property  NSString *rtcReportingPlayQueueSourceIdentifier
 @property  NSDictionary *rtcReportingSessionAdditionalUserInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL containsLiveStream
 @property  BOOL containsTransportableContent

  // class methods
  +[MPCModelRadioQueueFeeder sharedQueue]

  // instance methods
  -[MPCModelRadioQueueFeeder environmentMonitorDidChangeNetworkType:]
  -[MPCModelRadioQueueFeeder .cxx_destruct]
  -[MPCModelRadioQueueFeeder reloadSection:completion:]
  -[MPCModelRadioQueueFeeder _beginBackgroundTaskAssertion]
  -[MPCModelRadioQueueFeeder _endBackgroundTaskAssertion]
  -[MPCModelRadioQueueFeeder itemCount]
  -[MPCModelRadioQueueFeeder init]
  -[MPCModelRadioQueueFeeder supplementalPlaybackContextWithReason:]
  -[MPCModelRadioQueueFeeder supplementalPlaybackContextBehavior]
  -[MPCModelRadioQueueFeeder getRepresentativeMetadataForPlaybackContext:properties:completion:]
  -[MPCModelRadioQueueFeeder firstModelPlayEvent]
  -[MPCModelRadioQueueFeeder rtcReportingPlayQueueSourceIdentifier]
  -[MPCModelRadioQueueFeeder dealloc]
  -[MPCModelRadioQueueFeeder rtcReportingSessionAdditionalUserInfo]
  -[MPCModelRadioQueueFeeder didSignificantlyChangeItem:]
  -[MPCModelRadioQueueFeeder containsTransportableContent]
  -[MPCModelRadioQueueFeeder section:supportsShuffleType:]
  -[MPCModelRadioQueueFeeder loadPlaybackContext:completion:]
  -[MPCModelRadioQueueFeeder modelPlayEventForItem:inSection:]
  -[MPCModelRadioQueueFeeder identifiersForItem:inSection:]
  -[MPCModelRadioQueueFeeder itemForItem:inSection:]
  -[MPCModelRadioQueueFeeder supportsAutoPlayForItem:inSection:]
  -[MPCModelRadioQueueFeeder containsLiveStream]
  -[MPCModelRadioQueueFeeder itemDidBeginPlayback:]
  -[MPCModelRadioQueueFeeder canJumpToItem:]
  -[MPCModelRadioQueueFeeder canSkipItem:]
  -[MPCModelRadioQueueFeeder shouldRequestAdditionalItemsWhenReachingTailOfSection:]
  -[MPCModelRadioQueueFeeder prefetchThresholdForSection:]
  -[MPCModelRadioQueueFeeder loadAdditionalItemsWithRequest:forSection:completion:]
  -[MPCModelRadioQueueFeeder placeholderItemForLoadingAdditionalItemsInSection:]
  -[MPCModelRadioQueueFeeder updatedPlaybackContext]
  -[MPCModelRadioQueueFeeder _allowCellularStreamingDidChangeNotification:]
  -[MPCModelRadioQueueFeeder _updateAdditionalLoadingSupport]
  -[MPCModelRadioQueueFeeder _endObservingIdentityStoreForSignOut]
  -[MPCModelRadioQueueFeeder _defaultGetTracksRequestWithContext:radioStation:]
  -[MPCModelRadioQueueFeeder _loadTracksWithRequest:completion:]
  -[MPCModelRadioQueueFeeder _detectSignOutForIdentityStore:]
  -[MPCModelRadioQueueFeeder _responseDidInvalidate]
  -[MPCModelRadioQueueFeeder _detectSignOutForIdentityStoreChangeNotification:]
  -[MPCModelRadioQueueFeeder _removeAllTracks]
  -[MPCModelRadioQueueFeeder _errorForRequest:withError:]
  -[MPCModelRadioQueueFeeder _handlePersonalizationResponse:personalizationError:fromRequest:completion:]
  -[MPCModelRadioQueueFeeder _observePersonalizationResponse:]
  -[MPCModelRadioQueueFeeder _savePlaybackHistoryWithCurrentIndex:]
  -[MPCModelRadioQueueFeeder _beginObservingIdentityStoreForSignOut]
  -[MPCModelRadioQueueFeeder _handleGetTracksResponse:getTracksError:fromRequest:completion:]
  -[MPCModelRadioQueueFeeder _responseDidInvalidateNotification:]
  -[MPCModelRadioQueueFeeder _removeRestrictedTracks]
  -[MPCModelRadioQueueFeeder _repersonalizeCurrentTracks]
  -[MPCModelRadioQueueFeeder _isTransientLoadingError:]


MPCPlayPerfMetrics : NSObject
 @property  NSMutableDictionary *data
 @property  NSString *eventType
 @property  NSNumber *eventTime
 @property  NSString *sectionIdentifier
 @property  NSString *itemIdentifier
 @property  NSDictionary *itemMetadata
 @property  NSString *featureName
 @property  NSString *siriRefId
 @property  NSString *queueType
 @property  NSNumber *isRemoteSetQueue
 @property  NSNumber *isShuffled
 @property  NSNumber *isAutoPlayEnabled
 @property  NSNumber *isSharePlay
 @property  NSNumber *assetType
 @property  NSNumber *assetSource
 @property  NSString *assetLocation
 @property  NSNumber *endpointType
 @property  NSNumber *subscriptionType
 @property  NSNumber *isDelegatedPlayback
 @property  NSNumber *hasOnlinePlaybackKeys
 @property  NSNumber *hasOfflinePlaybackKeys
 @property  NSDictionary *formatInfo
 @property  NSDictionary *routeInfo
 @property  NSNumber *networkType
 @property  NSNumber *isFirstPlay
 @property  NSNumber *isReplacingPlayback
 @property  NSNumber *errorResolution
 @property  NSString *errorSignature
 @property  NSNumber *hasAccountInfo
 @property  NSNumber *isActiveAccount
 @property  NSNumber *setQueueCommandSendTime
 @property  NSNumber *playCommandSendTime
 @property  NSNumber *queueLoadWaitTime
 @property  NSNumber *assetLoadWaitTime
 @property  NSNumber *readyToPlayStatusWaitTime
 @property  NSNumber *playCommandWaitTime
 @property  NSNumber *rateChangeWaitTime
 @property  NSNumber *firstAudioFrameWaitTime
 @property  NSNumber *nextItemWaitTime
 @property  NSNumber *lookupWaitTime
 @property  NSNumber *getTracksWaitTime
 @property  NSNumber *bagWaitTime
 @property  NSNumber *leaseWaitTime
 @property  NSNumber *suzeLeaseWaitTime
 @property  NSNumber *subscriptionAssetLoadWaitTime
 @property  NSNumber *mediaRedownloadWaitTime
 @property  NSNumber *hlsMetadataWaitTime
 @property  NSNumber *sessionActivationWaitTime
 @property  NSNumber *musicTotalTime
 @property  NSNumber *musicWaitTime
 @property  NSNumber *mediaPlayerTime
 @property  NSNumber *networkTime
 @property  NSNumber *avTime

  // class methods
  +[MPCPlayPerfMetrics playMetricsWithFirstFrameEvent:cursor:]
  +[MPCPlayPerfMetrics playMetricsWithErrorSignature:event:cursor:]

  // instance methods
  -[MPCPlayPerfMetrics sectionIdentifier]
  -[MPCPlayPerfMetrics networkType]
  -[MPCPlayPerfMetrics subscriptionType]
  -[MPCPlayPerfMetrics eventTime]
  -[MPCPlayPerfMetrics assetType]
  -[MPCPlayPerfMetrics itemIdentifier]
  -[MPCPlayPerfMetrics endpointType]
  -[MPCPlayPerfMetrics routeInfo]
  -[MPCPlayPerfMetrics isActiveAccount]
  -[MPCPlayPerfMetrics .cxx_destruct]
  -[MPCPlayPerfMetrics humanDescription]
  -[MPCPlayPerfMetrics data]
  -[MPCPlayPerfMetrics avTime]
  -[MPCPlayPerfMetrics init]
  -[MPCPlayPerfMetrics queueType]
  -[MPCPlayPerfMetrics assetSource]
  -[MPCPlayPerfMetrics setData:]
  -[MPCPlayPerfMetrics eventType]
  -[MPCPlayPerfMetrics featureName]
  -[MPCPlayPerfMetrics isDelegatedPlayback]
  -[MPCPlayPerfMetrics hasOnlinePlaybackKeys]
  -[MPCPlayPerfMetrics hasOfflinePlaybackKeys]
  -[MPCPlayPerfMetrics isAutoPlayEnabled]
  -[MPCPlayPerfMetrics errorResolution]
  -[MPCPlayPerfMetrics isShuffled]
  -[MPCPlayPerfMetrics isRemoteSetQueue]
  -[MPCPlayPerfMetrics assetLoadWaitTime]
  -[MPCPlayPerfMetrics assetLocation]
  -[MPCPlayPerfMetrics bagWaitTime]
  -[MPCPlayPerfMetrics errorSignature]
  -[MPCPlayPerfMetrics firstAudioFrameWaitTime]
  -[MPCPlayPerfMetrics formatInfo]
  -[MPCPlayPerfMetrics getTracksWaitTime]
  -[MPCPlayPerfMetrics hasAccountInfo]
  -[MPCPlayPerfMetrics leaseWaitTime]
  -[MPCPlayPerfMetrics lookupWaitTime]
  -[MPCPlayPerfMetrics mediaRedownloadWaitTime]
  -[MPCPlayPerfMetrics subscriptionAssetLoadWaitTime]
  -[MPCPlayPerfMetrics suzeLeaseWaitTime]
  -[MPCPlayPerfMetrics hlsMetadataWaitTime]
  -[MPCPlayPerfMetrics itemMetadata]
  -[MPCPlayPerfMetrics isFirstPlay]
  -[MPCPlayPerfMetrics isReplacingPlayback]
  -[MPCPlayPerfMetrics isSharePlay]
  -[MPCPlayPerfMetrics mediaPlayerTime]
  -[MPCPlayPerfMetrics musicWaitTime]
  -[MPCPlayPerfMetrics networkTime]
  -[MPCPlayPerfMetrics playCommandSendTime]
  -[MPCPlayPerfMetrics playCommandWaitTime]
  -[MPCPlayPerfMetrics queueLoadWaitTime]
  -[MPCPlayPerfMetrics rateChangeWaitTime]
  -[MPCPlayPerfMetrics readyToPlayStatusWaitTime]
  -[MPCPlayPerfMetrics sessionActivationWaitTime]
  -[MPCPlayPerfMetrics setQueueCommandSendTime]
  -[MPCPlayPerfMetrics musicTotalTime]
  -[MPCPlayPerfMetrics nextItemWaitTime]
  -[MPCPlayPerfMetrics set_eventType:]
  -[MPCPlayPerfMetrics set_eventTime:]
  -[MPCPlayPerfMetrics set_sectionIdentifier:]
  -[MPCPlayPerfMetrics set_itemIdentifier:]
  -[MPCPlayPerfMetrics set_isRemoteSetQueue:]
  -[MPCPlayPerfMetrics addQueueMetadata:]
  -[MPCPlayPerfMetrics addPlaybackBehaviorWithCursor:]
  -[MPCPlayPerfMetrics addSharePlayWithCursor:]
  -[MPCPlayPerfMetrics addEnvironmentInfoWithCursor:]
  -[MPCPlayPerfMetrics addAssetLoadInfoWithCursor:itemIDPayload:]
  -[MPCPlayPerfMetrics set_itemMetadata:]
  -[MPCPlayPerfMetrics set_queueType:]
  -[MPCPlayPerfMetrics set_isFirstPlay:]
  -[MPCPlayPerfMetrics set_isReplacingPlayback:]
  -[MPCPlayPerfMetrics set_errorResolution:]
  -[MPCPlayPerfMetrics set_errorSignature:]
  -[MPCPlayPerfMetrics set_hasAccountInfo:]
  -[MPCPlayPerfMetrics set_isActiveAccount:]
  -[MPCPlayPerfMetrics set_subscriptionType:]
  -[MPCPlayPerfMetrics set_getTracksWaitTime:]
  -[MPCPlayPerfMetrics set_lookupWaitTime:]
  -[MPCPlayPerfMetrics set_sessionActivationWaitTime:]
  -[MPCPlayPerfMetrics set_setQueueCommandSendTime:]
  -[MPCPlayPerfMetrics set_playCommandSendTime:]
  -[MPCPlayPerfMetrics set_queueLoadWaitTime:]
  -[MPCPlayPerfMetrics set_assetLoadWaitTime:]
  -[MPCPlayPerfMetrics set_readyToPlayStatusWaitTime:]
  -[MPCPlayPerfMetrics set_playCommandWaitTime:]
  -[MPCPlayPerfMetrics set_rateChangeWaitTime:]
  -[MPCPlayPerfMetrics set_firstAudioFrameWaitTime:]
  -[MPCPlayPerfMetrics set_nextItemWaitTime:]
  -[MPCPlayPerfMetrics set_featureName:]
  -[MPCPlayPerfMetrics set_siriRefId:]
  -[MPCPlayPerfMetrics set_isShuffled:]
  -[MPCPlayPerfMetrics set_isAutoPlayEnabled:]
  -[MPCPlayPerfMetrics set_isSharePlay:]
  -[MPCPlayPerfMetrics set_assetType:]
  -[MPCPlayPerfMetrics set_assetSource:]
  -[MPCPlayPerfMetrics set_assetLocation:]
  -[MPCPlayPerfMetrics set_endpointType:]
  -[MPCPlayPerfMetrics set_isDelegatedPlayback:]
  -[MPCPlayPerfMetrics set_hasOnlinePlaybackKeys:]
  -[MPCPlayPerfMetrics set_hasOfflinePlaybackKeys:]
  -[MPCPlayPerfMetrics set_bagWaitTime:]
  -[MPCPlayPerfMetrics set_leaseWaitTime:]
  -[MPCPlayPerfMetrics set_suzeLeaseWaitTime:]
  -[MPCPlayPerfMetrics set_subscriptionAssetLoadWaitTime:]
  -[MPCPlayPerfMetrics set_mediaRedownloadWaitTime:]
  -[MPCPlayPerfMetrics set_formatInfo:]
  -[MPCPlayPerfMetrics set_hlsMetadataWaitTime:]
  -[MPCPlayPerfMetrics set_routeInfo:]
  -[MPCPlayPerfMetrics set_networkType:]
  -[MPCPlayPerfMetrics siriRefId]


_MPCPlaybackEngineSessionManager : NSObject <MPCPlaybackEngineEventObserving, MPNowPlayingPlaybackQueueDataSource>
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  MPNowPlayingInfoCenter *infoCenter
 @property  MPRemoteCommandCenter *commandCenter
 @property  NSMutableArray *sessionArchives
 @property  NSMutableDictionary *sessionIdentifierArchiveMap
 @property  NSMutableDictionary *stagedQueueControllers
 @property  MPCPlayerPath *playerPath
 @property  MPCPlaybackEngine *playbackEngine
 @property  NSString *stateRestorationSessionIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPCPlaybackEngineSessionManager archivesAtURL:]

  // instance methods
  -[_MPCPlaybackEngineSessionManager playerPath]
  -[_MPCPlaybackEngineSessionManager playbackEngine]
  -[_MPCPlaybackEngineSessionManager stageQueueController:forIdentifier:]
  -[_MPCPlaybackEngineSessionManager saveSessionWithCompletion:]
  -[_MPCPlaybackEngineSessionManager _performCommandEvent:completion:]
  -[_MPCPlaybackEngineSessionManager nowPlayingInfoCenter:artworkForContentItem:size:completion:]
  -[_MPCPlaybackEngineSessionManager unstageQueueControllerForIdentifier:]
  -[_MPCPlaybackEngineSessionManager .cxx_destruct]
  -[_MPCPlaybackEngineSessionManager stagedQueueControllerIdentifiers]
  -[_MPCPlaybackEngineSessionManager stagedQueueControllers]
  -[_MPCPlaybackEngineSessionManager deleteSessionWithIdentifier:completion:]
  -[_MPCPlaybackEngineSessionManager stateRestorationSessionIdentifier]
  -[_MPCPlaybackEngineSessionManager nowPlayingInfoCenter:contentItemIDForOffset:]
  -[_MPCPlaybackEngineSessionManager nowPlayingInfoCenter:contentItemForID:]
  -[_MPCPlaybackEngineSessionManager serialQueue]
  -[_MPCPlaybackEngineSessionManager setStateRestorationSessionIdentifier:]
  -[_MPCPlaybackEngineSessionManager _cachesDirectory]
  -[_MPCPlaybackEngineSessionManager commandCenter]
  -[_MPCPlaybackEngineSessionManager _playbackSessionsDirectory]
  -[_MPCPlaybackEngineSessionManager queueControllerForIdentifier:]
  -[_MPCPlaybackEngineSessionManager publishIfNeeded]
  -[_MPCPlaybackEngineSessionManager loadSessionWithIdentifier:completion:]
  -[_MPCPlaybackEngineSessionManager initWithPlaybackEngine:]
  -[_MPCPlaybackEngineSessionManager sessionIdentifierArchiveMap]
  -[_MPCPlaybackEngineSessionManager infoCenter]
  -[_MPCPlaybackEngineSessionManager sessionArchives]


MPCPlayerResponseParticipant : NSObject <NSObject>
 @property  MPCPlayerResponse *response
 @property  MPModelSharedListeningParticipant *modelObject
 @property  NSString *contentItemIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCPlayerResponseParticipant .cxx_destruct]
  -[MPCPlayerResponseParticipant contentItemIdentifier]
  -[MPCPlayerResponseParticipant _stateDumpObject]
  -[MPCPlayerResponseParticipant response]
  -[MPCPlayerResponseParticipant modelObject]
  -[MPCPlayerResponseParticipant initWithModelObject:response:]


MPNowPlayingContentItemArtworkToken : NSObject <MPArtworkDataSourceVisualIdenticality>
 @property  NSString *identifier
 @property  NSString *artworkIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPNowPlayingContentItemArtworkToken setArtworkIdentifier:]
  -[MPNowPlayingContentItemArtworkToken artworkIdentifier]
  -[MPNowPlayingContentItemArtworkToken stringRepresentation]
  -[MPNowPlayingContentItemArtworkToken .cxx_destruct]
  -[MPNowPlayingContentItemArtworkToken isEqual:]
  -[MPNowPlayingContentItemArtworkToken identifier]
  -[MPNowPlayingContentItemArtworkToken setIdentifier:]
  -[MPNowPlayingContentItemArtworkToken copyWithZone:]
  -[MPNowPlayingContentItemArtworkToken initWithIdentifier:artworkIdentifier:]


MPCMediaRemoteArtworkRemoteDataSource : NSObject <MPArtworkDataSource>
 @property  MPCMediaRemoteController *controller
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPCMediaRemoteArtworkRemoteDataSource controller]
  -[MPCMediaRemoteArtworkRemoteDataSource .cxx_destruct]
  -[MPCMediaRemoteArtworkRemoteDataSource initWithController:]
  -[MPCMediaRemoteArtworkRemoteDataSource cancelLoadingRepresentationForArtworkCatalog:]
  -[MPCMediaRemoteArtworkRemoteDataSource isRepresentation:bestRepresentationForArtworkCatalog:]
  -[MPCMediaRemoteArtworkRemoteDataSource visualIdenticalityIdentifierForCatalog:]
  -[MPCMediaRemoteArtworkRemoteDataSource areRepresentationsAvailableForCatalog:]
  -[MPCMediaRemoteArtworkRemoteDataSource existingRepresentationForArtworkCatalog:]
  -[MPCMediaRemoteArtworkRemoteDataSource loadRepresentationForArtworkCatalog:completionHandler:]


MPCModelGenericAVItemTimedMetadataRequest : MPModelRequest
 @property  MPCModelGenericAVItemTimedMetadataResponse *previousResponse
 @property  MPModelGenericObject *genericObject
 @property  ICStoreRequestContext *storeRequestContext
 @property  NSArray *timedMetadataGroups

  // class methods
  +[MPCModelGenericAVItemTimedMetadataRequest supportsSecureCoding]
  +[MPCModelGenericAVItemTimedMetadataRequest metadataIdentifiers]

  // instance methods
  -[MPCModelGenericAVItemTimedMetadataRequest newOperationWithResponseHandler:]
  -[MPCModelGenericAVItemTimedMetadataRequest storeRequestContext]
  -[MPCModelGenericAVItemTimedMetadataRequest setPreviousResponse:]
  -[MPCModelGenericAVItemTimedMetadataRequest .cxx_destruct]
  -[MPCModelGenericAVItemTimedMetadataRequest previousResponse]
  -[MPCModelGenericAVItemTimedMetadataRequest copyWithZone:]
  -[MPCModelGenericAVItemTimedMetadataRequest genericObject]
  -[MPCModelGenericAVItemTimedMetadataRequest initWithGenericObject:timedMetadataGroups:storeRequestContext:]
  -[MPCModelGenericAVItemTimedMetadataRequest timedMetadataGroups]


(ICErrorProcessing)
	// class methods
	+[(ICErrorProcessing) _isAgeVerificationError:]
	+[(ICErrorProcessing) errorForICError:response:]
	+[(ICErrorProcessing) payloadValueFromJSONValue:]

	// instance methods
	-[(ICErrorProcessing) mpc_remoteCommandStatus]
	-[(ICErrorProcessing) mpc_jsonValue]
	-[(ICErrorProcessing) mpc_remoteCommandDialog]
	-[(ICErrorProcessing) mpc_isAirplayDeviceBusyError]
	-[(ICErrorProcessing) mpc_isRentalContentRequiresDownloadError]
	-[(ICErrorProcessing) mpc_isAirplayStreamingNotSupportedError]
	-[(ICErrorProcessing) mpc_isQueueLoadingFailure]
	-[(ICErrorProcessing) mpc_isAssetUnavailableFailure]
	-[(ICErrorProcessing) mpc_isUnrecoverableAssetLoadingError]
	-[(ICErrorProcessing) mpc_isResourceUnavailableError]
	-[(ICErrorProcessing) mpc_isSubscriptionRequiredError]
	-[(ICErrorProcessing) mpc_errorByRemovingUnserializableUserInfo]

AVURLAsset(MPCModelPlaybackAssetCacheProvidingInternalAdditions)
	// instance methods
	-[AVURLAsset(MPCModelPlaybackAssetCacheProvidingInternalAdditions) mpc_addDownloadCompletionHandler:]
	-[AVURLAsset(MPCModelPlaybackAssetCacheProvidingInternalAdditions) mpc_HLSAVMetadataItemInMetadata:]
	-[AVURLAsset(MPCModelPlaybackAssetCacheProvidingInternalAdditions) mpc_synchronousHLSSessionDataWithTimeout:error:]

MPRemoteCommandEvent(MPCMusicPlayerControllerServer)
	// class methods
	+[MPRemoteCommandEvent(MPCMusicPlayerControllerServer) payloadValueFromJSONValue:]

	// instance methods
	-[MPRemoteCommandEvent(MPCMusicPlayerControllerServer) userIdentity]
	-[MPRemoteCommandEvent(MPCMusicPlayerControllerServer) serverCopy]
	-[MPRemoteCommandEvent(MPCMusicPlayerControllerServer) mpc_jsonValue]

NSBundle(MediaPlayerCore)
	// class methods
	+[NSBundle(MediaPlayerCore) mediaPlaybackCoreBundle]

MPPlaybackContext(MPCPlaybackQueue)
	// instance methods
	-[MPPlaybackContext(MPCPlaybackQueue) getSharedListeningTracklistWithCompletion:]
	-[MPPlaybackContext(MPCPlaybackQueue) getRemotePlaybackQueueRepresentationWithCompletion:]

MPModelObject(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_remotePlaybackQueueRequiredProperties]
	+[MPModelObject(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredItemPlaybackProperties]
	+[MPModelObject(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredSectionPlaybackProperties]

	// instance methods
	-[MPModelObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoContainerRepresentation]
	-[MPModelObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoItemRepresentation]
	-[MPModelObject(MPCModelPlaybackIntentDataSourceAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]
	-[MPModelObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_radioContentReference]

MPModelAlbum(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelAlbum(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredSectionPlaybackProperties]

	// instance methods
	-[MPModelAlbum(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoContainerRepresentation]
	-[MPModelAlbum(MPCModelPlaybackIntentDataSourceAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]
	-[MPModelAlbum(MPCModelPlaybackIntentDataSourceAdditions) mpc_radioContentReference]

MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_remotePlaybackQueueRequiredProperties]
	+[MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredItemPlaybackProperties]
	+[MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredSectionPlaybackProperties]

	// instance methods
	-[MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoContainerRepresentation]
	-[MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoItemRepresentation]
	-[MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]
	-[MPModelGenericObject(MPCModelPlaybackIntentDataSourceAdditions) mpc_radioContentReference]

MPModelPlaylist(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelPlaylist(MPCModelPlaybackIntentDataSourceAdditions) mpc_remotePlaybackQueueRequiredProperties]
	+[MPModelPlaylist(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredSectionPlaybackProperties]

	// instance methods
	-[MPModelPlaylist(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoContainerRepresentation]

MPModelPlaylistEntry(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelPlaylistEntry(MPCModelPlaybackIntentDataSourceAdditions) mpc_remotePlaybackQueueRequiredProperties]
	+[MPModelPlaylistEntry(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredItemPlaybackProperties]

	// instance methods
	-[MPModelPlaylistEntry(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoItemRepresentation]
	-[MPModelPlaylistEntry(MPCModelPlaybackIntentDataSourceAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]

MPModelMovie(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelMovie(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredItemPlaybackProperties]

	// instance methods
	-[MPModelMovie(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoItemRepresentation]
	-[MPModelMovie(MPCModelPlaybackIntentDataSourceAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]

MPModelSong(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelSong(MPCModelPlaybackIntentDataSourceAdditions) mpc_remotePlaybackQueueRequiredProperties]
	+[MPModelSong(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredItemPlaybackProperties]

	// instance methods
	-[MPModelSong(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoItemRepresentation]
	-[MPModelSong(MPCModelPlaybackIntentDataSourceAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]
	-[MPModelSong(MPCModelPlaybackIntentDataSourceAdditions) mpc_radioContentReference]

MPModelTVEpisode(MPCModelPlaybackIntentDataSourceAdditions)
	// class methods
	+[MPModelTVEpisode(MPCModelPlaybackIntentDataSourceAdditions) mqf_requiredItemPlaybackProperties]

	// instance methods
	-[MPModelTVEpisode(MPCModelPlaybackIntentDataSourceAdditions) mpc_protoItemRepresentation]
	-[MPModelTVEpisode(MPCModelPlaybackIntentDataSourceAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]

NSUserActivity(MediaRemoteCommandAdditions)
	// instance methods
	-[NSUserActivity(MediaRemoteCommandAdditions) _fetchObjectFromPayloadWithIdentifier:]
	-[NSUserActivity(MediaRemoteCommandAdditions) _setObjectInPayload:withIdentifier:]
	-[NSUserActivity(MediaRemoteCommandAdditions) _addObjectToPayload:withIdentifier:]
	-[NSUserActivity(MediaRemoteCommandAdditions) mpc_commandOptions]
	-[NSUserActivity(MediaRemoteCommandAdditions) mpc_destination]
	-[NSUserActivity(MediaRemoteCommandAdditions) mpc_playbackQueue]
	-[NSUserActivity(MediaRemoteCommandAdditions) mpc_setCommandOptions:]
	-[NSUserActivity(MediaRemoteCommandAdditions) mpc_setDestination:]
	-[NSUserActivity(MediaRemoteCommandAdditions) mpc_setPlaybackQueue:]

MPPlaybackArchive(ForShortcutsOnly)
	// instance methods
	-[MPPlaybackArchive(ForShortcutsOnly) containsAppleMusicRadioContent]

MPModelTVSeason(MPCStoreFrontLocalEquivalencyMiddlewareAdditions)
	// class methods
	+[MPModelTVSeason(MPCStoreFrontLocalEquivalencyMiddlewareAdditions) mqf_requiredSectionPlaybackProperties]

	// instance methods
	-[MPModelTVSeason(MPCStoreFrontLocalEquivalencyMiddlewareAdditions) MPC_modelObjectWithStoreFrontLocalEquivalentModelObject:]

(MPCStoreFrontLocalEquivalencyMiddlewareAdditions)
	// instance methods
	-[(MPCStoreFrontLocalEquivalencyMiddlewareAdditions) MPC_storeFrontIdentifierKey]

MPMusicPlayerQueueDescriptor(MPCModelPlaybackAdditions)
	// instance methods
	-[MPMusicPlayerQueueDescriptor(MPCModelPlaybackAdditions) playbackContext]
	-[MPMusicPlayerQueueDescriptor(MPCModelPlaybackAdditions) matchesStartItem:]
	-[MPMusicPlayerQueueDescriptor(MPCModelPlaybackAdditions) _addRequestingBundleIdentifierToPlaybackRequestEnvironment:]

MPMusicPlayerMediaItemQueueDescriptor(MPCModelPlaybackAdditions)
	// instance methods
	-[MPMusicPlayerMediaItemQueueDescriptor(MPCModelPlaybackAdditions) playbackContext]
	-[MPMusicPlayerMediaItemQueueDescriptor(MPCModelPlaybackAdditions) matchesStartItem:]

MPMusicPlayerStoreQueueDescriptor(MPCModelPlaybackAdditions)
	// instance methods
	-[MPMusicPlayerStoreQueueDescriptor(MPCModelPlaybackAdditions) playbackContext]
	-[MPMusicPlayerStoreQueueDescriptor(MPCModelPlaybackAdditions) matchesStartItem:]

MPMusicPlayerPlayParametersQueueDescriptor(MPCModelPlaybackAdditions)
	// instance methods
	-[MPMusicPlayerPlayParametersQueueDescriptor(MPCModelPlaybackAdditions) playbackContext]
	-[MPMusicPlayerPlayParametersQueueDescriptor(MPCModelPlaybackAdditions) matchesStartItem:]

MPMusicPlayerRadioStationQueueDescriptor(MPCModelPlaybackAdditions)
	// instance methods
	-[MPMusicPlayerRadioStationQueueDescriptor(MPCModelPlaybackAdditions) playbackContext]

MPMusicPlayerPlaybackArchiveQueueDescriptor(MPCModelPlaybackAdditions)
	// instance methods
	-[MPMusicPlayerPlaybackArchiveQueueDescriptor(MPCModelPlaybackAdditions) playbackContext]

MPModelMediaClip(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelMediaClip(MPCModelQueueFeederAdditions) mqf_requiredItemPlaybackProperties]

MPModelPodcastEpisode(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelPodcastEpisode(MPCModelQueueFeederAdditions) mqf_requiredItemPlaybackProperties]

MPModelArtist(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelArtist(MPCModelQueueFeederAdditions) mqf_requiredSectionPlaybackProperties]

	// instance methods
	-[MPModelArtist(MPCModelQueueFeederAdditions) mpc_radioContentReference]

MPModelGenre(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelGenre(MPCModelQueueFeederAdditions) mqf_requiredSectionPlaybackProperties]

MPModelComposer(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelComposer(MPCModelQueueFeederAdditions) mqf_requiredSectionPlaybackProperties]

MPModelTVShow(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelTVShow(MPCModelQueueFeederAdditions) mqf_requiredSectionPlaybackProperties]

MPModelPodcast(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelPodcast(MPCModelQueueFeederAdditions) mqf_requiredSectionPlaybackProperties]

MPModelHomeSharingAsset(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelHomeSharingAsset(MPCModelQueueFeederAdditions) mqf_requiredItemPlaybackProperties]

MPModelFileAsset(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelFileAsset(MPCModelQueueFeederAdditions) mqf_requiredItemPlaybackProperties]

MPModelPlaybackPosition(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelPlaybackPosition(MPCModelQueueFeederAdditions) mqf_requiredItemPlaybackProperties]

MPModelStoreAsset(MPCModelQueueFeederAdditions)
	// class methods
	+[MPModelStoreAsset(MPCModelQueueFeederAdditions) mqf_requiredItemPlaybackProperties]

MPSectionedCollection(MQFDebugging)
	// instance methods
	-[MPSectionedCollection(MQFDebugging) mpc_identifiersAsJsonValue]

MPModelPlayEvent(MPCModelRadioContentReference)
	// instance methods
	-[MPModelPlayEvent(MPCModelRadioContentReference) mpc_radioContentReference]

MPModelRequest(MPCPlaybackIntent)
	// class methods
	+[MPModelRequest(MPCPlaybackIntent) MPC_consumeSiriAssetInfo:userIdentity:completion:]

	// instance methods
	-[MPModelRequest(MPCPlaybackIntent) playbackIntentWithStartItemIdentifiers:]

MPModelLibraryRequest(MPCModelPlaybackAdditions)
	// instance methods
	-[MPModelLibraryRequest(MPCModelPlaybackAdditions) rtcReportingPlayQueueSourceIdentifier]

MPModelLibraryResponse(MPCModelPlaybackAdditions)
	// instance methods
	-[MPModelLibraryResponse(MPCModelPlaybackAdditions) isFinalResponse]

AVPlayerItem(MediaPlaybackCore)
	// instance methods
	-[AVPlayerItem(MediaPlaybackCore) mpc_setupWithPlayerAudioFormat:forceSpatial:downloadedAsset:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_setupWithAudioAssetType:forceSpatial:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_setupDescription]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updateAVAudioSpatializationFormatsForAudioAssetType:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updateAVVariantPreferenceForAudioAssetType:forceSpatial:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updatePreferredMaximumAudioSampleRateForAudioAssetType:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updatePreferredForwardBufferDurationForAudioAssetType:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updateAVAudioSpatializationFormatsForPlayerAudioFormat:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updateAVVariantPreferenceForPlayerAudioFormat:forceSpatial:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updatePreferredMaximumAudioSampleRateForPlayerAudioFormat:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updatePrefersOfflinePlayableVariantForPlayerAudioFormat:isDownloadedAsset:]
	-[AVPlayerItem(MediaPlaybackCore) mpc_updatePreferredForwardBufferDurationForPlayerAudioFormat:]

MPAVItem(MFQueuePlayerItem)
	// instance methods
	-[MPAVItem(MFQueuePlayerItem) setItemID:]
	-[MPAVItem(MFQueuePlayerItem) setTitle:]
	-[MPAVItem(MFQueuePlayerItem) itemID]
	-[MPAVItem(MFQueuePlayerItem) time]
	-[MPAVItem(MFQueuePlayerItem) reset]
	-[MPAVItem(MFQueuePlayerItem) playbackStartTime]
	-[MPAVItem(MFQueuePlayerItem) title]
	-[MPAVItem(MFQueuePlayerItem) avPlayerItem]
	-[MPAVItem(MFQueuePlayerItem) isFullyDownloaded]
	-[MPAVItem(MFQueuePlayerItem) setCurrentItemTransition:]
	-[MPAVItem(MFQueuePlayerItem) isVideoContent]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_itemType]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_equivalencySourceAdamID]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_identityPropertiesLoader]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_jingleTimedMetadata]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_requestingBundleIdentifier]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_requestingBundleVersion]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_shouldUseRelativeTimePositions]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_shouldReportPlayEventsToStore]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_privateListeningEnabled]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_siriInitiated]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_trackInfo]
	-[MPAVItem(MFQueuePlayerItem) hasLoadableAsset]
	-[MPAVItem(MFQueuePlayerItem) mpcReporting_isValidReportingItem]
	-[MPAVItem(MFQueuePlayerItem) setIsVideoContent:]
	-[MPAVItem(MFQueuePlayerItem) isMovieOrTVShow]
	-[MPAVItem(MFQueuePlayerItem) playbackStartTimeOverride]
	-[MPAVItem(MFQueuePlayerItem) setPlaybackStartTimeOverride:]

(MPCMediaRemoteController)
	// instance methods
	-[(MPCMediaRemoteController) commandInfoForCommand:]
	-[(MPCMediaRemoteController) allCommandInfos]

NSMapTable(MPCMediaRemoteController)
	// instance methods
	-[NSMapTable(MPCMediaRemoteController) commandInfoForCommand:]
	-[NSMapTable(MPCMediaRemoteController) allCommandInfos]

MPRemotePlaybackQueue(MPCAdditions)
	// instance methods
	-[MPRemotePlaybackQueue(MPCAdditions) getPlaybackContextWithCompletion:]
	-[MPRemotePlaybackQueue(MPCAdditions) getRemoteRepresentationForPlayerPath:completion:]
	-[MPRemotePlaybackQueue(MPCAdditions) createPlaybackContextWithCompletion:]

MPCustomDataPlaybackQueue(MPCAdditions)
	// instance methods
	-[MPCustomDataPlaybackQueue(MPCAdditions) getPlaybackContextWithCompletion:]

MPLocalMediaQueryRemotePlaybackQueue(MPCAdditions)
	// instance methods
	-[MPLocalMediaQueryRemotePlaybackQueue(MPCAdditions) getPlaybackContextWithCompletion:]

MPRadioStationRemotePlaybackQueue(MPCAdditions)
	// instance methods
	-[MPRadioStationRemotePlaybackQueue(MPCAdditions) getPlaybackContextWithCompletion:]

MPGenericTracklistPlaybackQueue(MPCAdditions)
	// instance methods
	-[MPGenericTracklistPlaybackQueue(MPCAdditions) getPlaybackContextWithCompletion:]

MPRemoteCommandCenter(MPCCustomCommands)
	// instance methods
	-[MPRemoteCommandCenter(MPCCustomCommands) clearUpNextQueueCommand]
	-[MPRemoteCommandCenter(MPCCustomCommands) disableQueueModificationsCommand]
	-[MPRemoteCommandCenter(MPCCustomCommands) shareQueueCommand]
	-[MPRemoteCommandCenter(MPCCustomCommands) debugCommand]

MPNowPlayingInfoCenter(MPCPlaybackEngine)
	// instance methods
	-[MPNowPlayingInfoCenter(MPCPlaybackEngine) playbackEngine]
	-[MPNowPlayingInfoCenter(MPCPlaybackEngine) setPlaybackEngine:]

(MPCPlaybackEngineEventPayload)
(MPCPlaybackEngineEventPayload)
(MPCPlaybackEngineEventPayload)
	// class methods
	+[(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[(MPCPlaybackEngineEventPayload) mpc_jsonValue]

(MPCPlaybackEngineEventPayload)
	// class methods
	+[(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[(MPCPlaybackEngineEventPayload) mpc_jsonValue]

NSUUID(MPCPlaybackEngineEventPayload)
	// class methods
	+[NSUUID(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[NSUUID(MPCPlaybackEngineEventPayload) mpc_jsonValue]

NSPersonNameComponents(MPCPlaybackEngineEventPayload)
	// class methods
	+[NSPersonNameComponents(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[NSPersonNameComponents(MPCPlaybackEngineEventPayload) mpc_jsonValue]

(MPCPlaybackEngineEventPayload)
	// class methods
	+[(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[(MPCPlaybackEngineEventPayload) mpc_jsonValue]

MPModelKind(MPCPlaybackEngineEventPayload)
	// class methods
	+[MPModelKind(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[MPModelKind(MPCPlaybackEngineEventPayload) mpc_jsonValue]

MPIdentifierSet(MPCPlaybackEngineEventPayload)
	// class methods
	+[MPIdentifierSet(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[MPIdentifierSet(MPCPlaybackEngineEventPayload) mpc_jsonValue]

ICLiveLinkIdentity(MPCPlaybackEngineEventPayload)
	// class methods
	+[ICLiveLinkIdentity(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[ICLiveLinkIdentity(MPCPlaybackEngineEventPayload) mpc_jsonValue]

ICMusicSubscriptionStatus(MPCPlaybackEngineEventPayload)
	// class methods
	+[ICMusicSubscriptionStatus(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[ICMusicSubscriptionStatus(MPCPlaybackEngineEventPayload) mpc_jsonValue]

MSVFrameworkDescription(MPCPlaybackEngineEventPayload)
	// class methods
	+[MSVFrameworkDescription(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[MSVFrameworkDescription(MPCPlaybackEngineEventPayload) mpc_jsonValue]

MPRemoteCommandStatus(MPCPlaybackEngineEventPayload)
	// class methods
	+[MPRemoteCommandStatus(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[MPRemoteCommandStatus(MPCPlaybackEngineEventPayload) mpc_jsonValue]

MPRemoteCommandHandlerDialog(MPCPlaybackEngineEventPayload)
	// class methods
	+[MPRemoteCommandHandlerDialog(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[MPRemoteCommandHandlerDialog(MPCPlaybackEngineEventPayload) mpc_jsonValue]

MPRemoteCommandHandlerDialogAction(MPCPlaybackEngineEventPayload)
	// class methods
	+[MPRemoteCommandHandlerDialogAction(MPCPlaybackEngineEventPayload) payloadValueFromJSONValue:]

	// instance methods
	-[MPRemoteCommandHandlerDialogAction(MPCPlaybackEngineEventPayload) mpc_jsonValue]

MPModelStaticRequest(MPCModelPlaybackAdditions)
	// instance methods
	-[MPModelStaticRequest(MPCModelPlaybackAdditions) rtcReportingPlayQueueSourceIdentifier]

MPModelStaticResponse(MPCModelPlaybackAdditions)
	// instance methods
	-[MPModelStaticResponse(MPCModelPlaybackAdditions) isFinalResponse]

MPPlaceholderAVItem(MPCReportingAdditions)
	// instance methods
	-[MPPlaceholderAVItem(MPCReportingAdditions) mpcReporting_isValidReportingItem]

01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAnalytics 
01 00 1000 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAsset 
01 00 1000 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetResourceRenewalRequest 
01 00 1800 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 1000 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 1000 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 1000 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItemMetadataOutput 
01 00 1000 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICAVAssetDownloadURLSession 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICAgeVerificationManager 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICAuthorizeMachineRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICClientInfo 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICContentKeySession 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICDelegationProviderService 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICDelegationProviderServiceAssertion 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICDeviceInfo 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICEnvironmentMonitor 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICFileContentKeyStore 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICLiveLink 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICLiveLinkIdentity 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMatchRedownloadRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMemoryContentKeyStore 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicKitRequestContext 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionAccountlessPlaybackRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionFairPlayController 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionLeaseController 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionLeasePlaybackRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionPlaybackResponseItem 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionStatus 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionStatusController 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionStatusRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMutableClientInfo 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMutablePlayActivityAudioQualityProperties 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMutablePlayActivityEnqueuerProperties 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMutablePlayActivityEvent 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMutablePlayActivityEventContainerIDs 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMutablePlayActivityEventItemIDs 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMutableRadioPlaybackHistory 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICPlayActivityController 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICPurchaseRedownloadRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioContentReference 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioFetchMetadataRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioGetTracksRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioGetTracksResponse 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioLibraryAlbumContentReference 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioLibraryArtistContentReference 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioLibraryTrackContentReference 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioPlaybackHistoryItem 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioPlaybackHistoryStore 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioStationTrack 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioStoreContentReference 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRadioTrackInfoContentReference 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICRequestContext 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSAPSession 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSecureKeyDeliveryRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSecurityInfo 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSharedListeningContainer 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSharedListeningItem 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSharedTracklistPosition 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreArtworkInfo 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreDialogResponseHandler 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreDialogResponseHandlerConfiguration 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreFileAssetInfo 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreHLSAssetInfo 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreRequestContext 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreURLRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreURLResponseAuthenticationProvider 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSuzeLeaseSession 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSuzeLeaseSessionConfiguration 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICURLBagProvider 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICURLPerformanceMetrics 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICURLRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICURLSessionManager 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserAuthenticationValidationRequest 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserIdentity 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserIdentityStore 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserNotificationBuilder 
01 00 1200 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserVerificationRequest 
01 00 0700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 0600 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3MusicLibrary 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVEndpointRoute 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVErrorResolverBlockHandler 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVItem 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRouteConnection 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAbstractNetworkArtworkDataSource 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPArtworkCatalog 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPArtworkConfiguration 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPArtworkRepresentation 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAssistantAnalyticsReportingController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAsyncBlockOperation 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAsyncOperation 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPChangeDetails 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCloudController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCloudServiceStatusController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPContentItem 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPContentTasteController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCustomDataPlaybackQueue 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPEmptyPlaybackQueue 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPExportableArtworkProperties 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPGenericTracklistPlaybackQueue 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPHomeMonitor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPHomeUserMonitor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPIdentifierSet 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPInsertIntoPlaybackQueueCommandEvent 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPLazySectionedCollection 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPLibraryAddStatusObserver 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPLocalMediaQueryRemotePlaybackQueue 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaAPICollectionItemAuthTokenRenewalRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaAPICollectionItemMetadataRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaAPICollectionItemMetadataRequestController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaAPICollectionItemMetadataRequestInfo 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaAPICollectionMetadataRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaItem 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaItemCollection 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaLibrary 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaPropertyPredicate 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaQuery 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaRemoteEntityTranslator 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaRemoteEntityTranslatorContext 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelAlbum 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelAlbumKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelArtist 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelComposer 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelFileAsset 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelFileAssetKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelGenericObject 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelGenre 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelGroup 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelGroupKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelHomeSharingAsset 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelLibraryDeleteEntityChangeRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelLibraryHasBeenPlayedChangeRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelLibraryImportChangeRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelLibraryIncrementPlayCountChangeRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelLibraryIncrementSkipCountChangeRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelLibraryRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelLibraryResponse 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelMediaClip 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelMovie 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelMovieKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelObject 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelObjectMediaItem 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPlayEvent 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPlaybackPosition 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPlaylist 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPlaylistEntry 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPlaylistEntryKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPlaylistKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPodcast 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelPodcastEpisode 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelRadioStation 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelRadioStationKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelResponse 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelShimRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelSong 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelSongKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelStaticRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelStaticResponse 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelStoreAsset 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelStorePlatformMetadataGenericObjectBuilder 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelTVEpisode 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelTVEpisodeKind 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelTVSeason 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelTVShow 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPModelVerifyLocalFileAssetIntegrityRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerControllerNowPlaying 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerControllerNowPlayingTimeSnapshot 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerControllerSystemCache 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerMediaItemQueueDescriptor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerPlayParametersQueueDescriptor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerPlaybackArchiveQueueDescriptor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerQueueDescriptor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerRadioStationQueueDescriptor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerServerStateUpdateRecord 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMusicPlayerStoreQueueDescriptor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMutableSectionedCollection 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMutableStoreAssetPlaybackResponse 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNetworkPlayabilityMonitor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNotificationObserver 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNowPlayingContentItem 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNowPlayingInfoAudioFormat 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNowPlayingInfoAudioRoute 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNowPlayingInfoCenter 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNowPlayingInfoLyricsItem 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNowPlayingInfoLyricsItemToken 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPNowPlayingInfoTransportableSessionResponse 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaceholderAVItem 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaybackArchive 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaybackArchiveDisplayProperties 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaybackContext 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaybackContextRemotePlaybackQueue 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaybackSessionCommandInfo 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaybackUserDefaults 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPropertySet 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPProtocolProxy 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPQueueFeeder 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPQueueFeederIdentifierRegistry 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRTCReportingController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRTCWeakLinkSupport 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRadioStationRemotePlaybackQueue 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRemoteCommand 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRemoteCommandCenter 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRemoteCommandEvent 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRemoteCommandHandlerDialog 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRemoteCommandHandlerDialogAction 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRemoteCommandStatus 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRemotePlaybackQueue 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRequestResponseController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPResponse 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRestrictionsMonitor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPSectionedCollection 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPSectionedIdentifierList 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPSectionedIdentifierListPosition 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPServerObjectDatabase 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPServerObjectDatabaseMediaKitImportRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPServerObjectDatabaseSINFImportRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPServerObjectDatabaseStorePlatformImportRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPServerObjectDatabaseSubPlaybackDispatchImportRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPSetPlaybackQueueCommandEvent 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPShuffleableSectionedIdentifierList 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreArtworkDataSource 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreArtworkRequestToken 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreAssetInfoPlaybackCache 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreAssetInfoPlaybackCacheRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreFileAssetInfo 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreHLSAssetInfo 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreItemMetadata 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreItemMetadataRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreItemMetadataRequestController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreLibraryPersonalizationContentDescriptor 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreLibraryPersonalizationRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreLyricsRequest 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreModelGenericObjectBuilder 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreRadioStreamAssetInfo 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPSubscriptionStatusPlaybackInformation 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPUbiquitousPlaybackPositionController 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPUbiquitousPlaybackPositionEntity 
01 00 1300 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPUserNotification 
01 00 0c00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVClusterController 
01 00 0c00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVEndpoint 
01 00 0c00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVLocalEndpoint 
01 00 0c00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVOutputDevice 
01 00 0c00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MROrigin 
01 00 0c00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRPlayerPath 
01 00 0c00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRSharedSettings 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVABTestGenerator 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVARC4RandomSource 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVAutoBugCapture 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVBlockGuard 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVFrameworkDescription 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVLRUDictionary 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVMutableSectionedCollection 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVOPACKDecoder 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVOPACKEncoder 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVPair 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVRandomDistribution 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSQLDatabase 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSegmentedCodingPackage 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSegmentedDecoder 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSegmentedEncoder 
01 00 1400 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVWeakProxy 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSEnumerator 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1600 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponents 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLRequest 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0700 /System/Library/Frameworks/CoreServices.framework/CoreServices: NSUserActivity 
01 00 1900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 1500 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0a00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0500 /System/Library/PrivateFrameworks/RTCReporting.framework/RTCReporting: RTCReporting 
01 00 0400 /System/Library/PrivateFrameworks/Radio.framework/Radio: RadioImageCache 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
