|| __DATA.__objc_data _OBJC_CLASS_$_AVAudioDevice
|| __DATA.__objc_data _OBJC_CLASS_$_AVAudioDeviceList
|| __DATA.__objc_data _OBJC_CLASS_$_AVCAudioStream
|| __DATA.__objc_data _OBJC_CLASS_$_AVCAudioStreamConfig
|| __DATA.__objc_data _OBJC_CLASS_$_AVCCaptionsClient
|| __DATA.__objc_data _OBJC_CLASS_$_AVCCaptionsConfig
|| __DATA.__objc_data _OBJC_CLASS_$_AVCCaptionsResult
|| __DATA.__objc_data _OBJC_CLASS_$_AVCCaptionsToken
|| __DATA.__objc_data _OBJC_CLASS_$_AVCDaemonProcessInfo
|| __DATA.__objc_data _OBJC_CLASS_$_AVCEffects
|| __DATA.__objc_data _OBJC_CLASS_$_AVCMediaStreamConfig
|| __DATA.__objc_data _OBJC_CLASS_$_AVCMediaStreamNegotiator
|| __DATA.__objc_data _OBJC_CLASS_$_AVCMoments
|| __DATA.__objc_data _OBJC_CLASS_$_AVCMomentsRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVCNetworkAddress
|| __DATA.__objc_data _OBJC_CLASS_$_AVCPacketFilter
|| __DATA.__objc_data _OBJC_CLASS_$_AVCPacketFilterRTP
|| __DATA.__objc_data _OBJC_CLASS_$_AVCPacketRelay
|| __DATA.__objc_data _OBJC_CLASS_$_AVCPacketRelayConnection
|| __DATA.__objc_data _OBJC_CLASS_$_AVCQoSMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_AVCRTCPPacket
|| __DATA.__objc_data _OBJC_CLASS_$_AVCRTCPReceiverReport
|| __DATA.__objc_data _OBJC_CLASS_$_AVCRTCPSenderReport
|| __DATA.__objc_data _OBJC_CLASS_$_AVCRTCPSourceDescription
|| __DATA.__objc_data _OBJC_CLASS_$_AVCRemoteVideoClient
|| __DATA.__objc_data _OBJC_CLASS_$_AVCScreenCapture
|| __DATA.__objc_data _OBJC_CLASS_$_AVCScreenCaptureConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_AVCSession
|| __DATA.__objc_data _OBJC_CLASS_$_AVCSessionConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_AVCSessionParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_AVCStreamInput
|| __DATA.__objc_data _OBJC_CLASS_$_AVCStreamOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVCTestMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_AVCTestMonitorInjectAudioConfig
|| __DATA.__objc_data _OBJC_CLASS_$_AVCTestMonitorReport
|| __DATA.__objc_data _OBJC_CLASS_$_AVCTextStream
|| __DATA.__objc_data _OBJC_CLASS_$_AVCTextStreamConfig
|| __DATA.__objc_data _OBJC_CLASS_$_AVCVideoDataOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVCVideoFrame
|| __DATA.__objc_data _OBJC_CLASS_$_AVCVideoStream
|| __DATA.__objc_data _OBJC_CLASS_$_AVCVideoStreamConfig
|| __DATA.__objc_data _OBJC_CLASS_$_AVCVirtualTTYDevice
|| __DATA.__objc_data _OBJC_CLASS_$_CannedAudioInjector
|| __DATA.__objc_data _OBJC_CLASS_$_GKInterfaceListener
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAudioDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAudioDeviceList
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCAudioStream
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCAudioStreamConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCCaptionsClient
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCCaptionsConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCCaptionsResult
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCCaptionsToken
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCDaemonProcessInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCEffects
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCMediaStreamConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCMediaStreamNegotiator
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCMoments
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCMomentsRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCNetworkAddress
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCPacketFilter
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCPacketFilterRTP
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCPacketRelay
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCPacketRelayConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCQoSMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCRTCPPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCRTCPReceiverReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCRTCPSenderReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCRTCPSourceDescription
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCRemoteVideoClient
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCScreenCapture
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCScreenCaptureConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCSessionConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCSessionParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCStreamInput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCStreamOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCTestMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCTestMonitorInjectAudioConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCTestMonitorReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCTextStream
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCTextStreamConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCVideoDataOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCVideoFrame
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCVideoStream
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCVideoStreamConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCVirtualTTYDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_CannedAudioInjector
|| __DATA.__objc_data _OBJC_METACLASS_$_GKInterfaceListener
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVAudioClient.deviceList
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVAudioDeviceList._internalList
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioPowerSpectrumMeter._audioSpectrumBinCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioPowerSpectrumMeter._audioSpectrumRefreshRate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioPowerSpectrumMeter._connection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioPowerSpectrumMeter._delegate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioPowerSpectrumMeter._delegateQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioPowerSpectrumMeter._sessionToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._anbrEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._audioStreamMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._channelAwareOffset
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._cnEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._cnPayloadType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._codecBandwidthMask
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._codecRateModeMask
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._codecType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._dtmfPayloadType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._dtmfTimestampRate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._dtmfTonePlaybackEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._dtxEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._enableMaxBitrateOnNoChangeCMR
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._headerFullOnly
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._latencySensitiveMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._maxPtime
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._numRedundantPayloads
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._octetAligned
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._preferredCodecRateMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._ptime
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._rxRedPayloadType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._subscriptionSlot
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._txRedPayloadType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCAudioStreamConfig._volume
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCCaptionsConfig._locale
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCCaptionsToken._confidence
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCCaptionsToken._range
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCCaptionsToken._text
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCEffects._avConferenceEffectsQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCEffects._connection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCEffects._delegate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCEffects._effectType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCEffects._isEffectsApplied
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCEffects._isFaceMeshTrackingEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCEffects._mode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._capabilities
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._connection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._currentActiveRequestsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._currentPendingRequestsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._delegate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._delegateQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._requesterID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._requests
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCMoments._streamToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCNetworkAddress.interfaceName
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCNetworkAddress.ip
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCNetworkAddress.isIPv6
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCNetworkAddress.port
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketFilter._isRTPFilter
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketFilterRTP._SSRC
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketFilterRTP._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketRelay._connections
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketRelay._delegate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketRelay._multiplexedConnection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketRelay._packetDriver
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCPacketRelay._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCRTCPSourceDescription._text
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCRTCPSourceDescription._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCTextStreamConfig._codecType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCTextStreamConfig._numRedundantPayloads
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCTextStreamConfig._rxRedPayloadType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCTextStreamConfig._txIntervalMin
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCTextStreamConfig._txRedPayloadType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._captureSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._customHeight
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._customWidth
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._cvoExtensionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._enableCVO
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._framerate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._hdrMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._isVideoProtected
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._keyFrameInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._latencySensitiveModeEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._ltrpEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._pixelFormat
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._profileLevel
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._remoteDeviceName
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._remoteVideoInitialOrientation
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._rxCodecFeatureListString
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._rxCodecType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._rxMaxBitrate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._rxMinBitrate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._screenDisplayID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._synchronizationSourceStreamToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._tilesPerFrame
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._txCodecFeatureListString
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._txCodecType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._txMaxBitrate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._txMinBitrate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._videoResolution
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVCVideoStreamConfig._videoStreamMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConference._delegate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConference.connection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConference.opaqueConf
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConference.serverBag
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConference.useServer
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConferencePreview.connection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConferenceXPCClient.connection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConferenceXPCClient.connectionPersists
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConferenceXPCClient.connectionQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConferenceXPCClient.registeredBlocks
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVConferenceXPCClient.replyQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCAudioRelay._isRelayRunning
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCAudioRelay._relayThread
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCAudioRelay._wakeUpCondition
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCAudioRelay._wakeUpMutex
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.actualAudioCodec
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.actualVideoCodec
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.deviceRole
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isAudioEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isAudioPausedToStart
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isDTLSEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isDuplexAudioOnly
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isDuplexVideoOnly
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isHalfDuplexAudio
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isKeyExchangeEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isRelayEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isRelayForced
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isVideoEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isVideoPausedToStart
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.isVideoSourceScreen
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.preferredAudioCodec
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.preferredVideoCodec
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCCapabilities.requiresWifi
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCMediaStreamManager._vcMomentsCollectorDictionary
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCMediaStreamManager.stateLock
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCMediaStreamManager.streamArray
|| __DATA.__objc_ivar _OBJC_IVAR_$_VCMediaStreamManager.xpcQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.camera
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.cameraSwitching
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.contentsRect
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.framePresentationTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.orientation
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.ratio
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.scaleFactor
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.videoMirrored
|| __DATA.__objc_ivar _OBJC_IVAR_$_VideoAttributes.videoSourceScreen
|| __DATA_CONST.__const _AVCKeyDaemonProcessInfoError
|| __DATA_CONST.__const _AVCKeyDaemonProcessInfoUniquePID
|| __DATA_CONST.__const _AVCMediaStreamNegotiatorHDRMode
|| __DATA_CONST.__const _AVCMediaStreamNegotiatorTransportType
|| __DATA_CONST.__const _AVCMediaStreamNegotiatorVideoHeight
|| __DATA_CONST.__const _AVCMediaStreamNegotiatorVideoResolution
|| __DATA_CONST.__const _AVCMediaStreamNegotiatorVideoWidth
|| __DATA_CONST.__const _AVCQoSReportChannelSequence
|| __DATA_CONST.__const _AVCQoSReportDisplayedFrameCount
|| __DATA_CONST.__const _AVCQoSReportExpectedFrameCount
|| __DATA_CONST.__const _AVCQoSReportHIDEventLatencyAverage
|| __DATA_CONST.__const _AVCQoSReportHIDEventLatencyMax
|| __DATA_CONST.__const _AVCQoSReportHIDEventLatencyMin
|| __DATA_CONST.__const _AVCQoSReportVideoJitterTarget
|| __DATA_CONST.__const _AVCQoSReportVideoStallDuration
|| __DATA_CONST.__const _AVCQoSReportVideoStallDurationMax
|| __DATA_CONST.__const _AVCRateAdaptationInfoKeyBandwidthEstimation
|| __DATA_CONST.__const _AVCRateAdaptationInfoKeyTargetBitrate
|| __DATA_CONST.__const _AVCSampleBufferAttachmentAspectRatio
|| __DATA_CONST.__const _AVCSampleBufferAttachmentCameraStatusBits
|| __DATA_CONST.__const _AVCSampleBufferAttachmentContentsRect
|| __DATA_CONST.__const _AVCSampleBufferAttachmentNetworkTimestamp
|| __DATA_CONST.__const _AVCSampleBufferAttachmentPropagatableAttachments
|| __DATA_CONST.__const _AVCSampleBufferAttachmentTileIndex
|| __DATA_CONST.__const _AVCSessionParticipantMediaTypeKeyAudio
|| __DATA_CONST.__const _AVCSessionParticipantMediaTypeKeyVideo
|| __DATA_CONST.__const _AVConferenceAudioTierAudioBitrate
|| __DATA_CONST.__const _AVConferenceAudioTierNetworkBitrate
|| __DATA_CONST.__const _AVConferenceAudioTierPacketsPerBundle
|| __DATA_CONST.__const _AVConferenceAudioTierPayload
|| __DATA_CONST.__const _AVConferenceAudioTierRedNumPayloads
|| __DATA_CONST.__const _AVConferenceBackCaptureTime
|| __DATA_CONST.__const _AVConferenceBlockServiceCallID
|| __DATA_CONST.__const _AVConferenceBlockServiceConference
|| __DATA_CONST.__const _AVConferenceBlockServiceConnectionBlob
|| __DATA_CONST.__const _AVConferenceConnectionType
|| __DATA_CONST.__const _AVConferenceConnectionTypeP2P
|| __DATA_CONST.__const _AVConferenceConnectionTypeRelay
|| __DATA_CONST.__const _AVConferenceConnectionTypeRelayP2PUpgrade
|| __DATA_CONST.__const _AVConferenceFrontCaptureTime
|| __DATA_CONST.__const _AVConferenceInviteDataCallInfoBlob
|| __DATA_CONST.__const _AVConferenceInviteDataConnectionBlob
|| __DATA_CONST.__const _AVConferenceInviteDataMediaBlob
|| __DATA_CONST.__const _AVConferenceInviteDataSKEBlob
|| __DATA_CONST.__const _AVConferenceLocalBitRate
|| __DATA_CONST.__const _AVConferenceLocalFrameHeight
|| __DATA_CONST.__const _AVConferenceLocalFrameRate
|| __DATA_CONST.__const _AVConferenceLocalFrameWidth
|| __DATA_CONST.__const _AVConferenceLocalPacketLossRate
|| __DATA_CONST.__const _AVConferenceRemoteBitRate
|| __DATA_CONST.__const _AVConferenceRemoteFrameHeight
|| __DATA_CONST.__const _AVConferenceRemoteFrameRate
|| __DATA_CONST.__const _AVConferenceRemoteFrameWidth
|| __DATA_CONST.__const _AVConferenceRemotePacketLossRate
|| __DATA_CONST.__const _AVConferenceRoundTripTime
|| __DATA_CONST.__const _AVConferenceServiceErrorDomain
|| __DATA_CONST.__const _AVConferenceSessionBitRate
|| __DATA_CONST.__const _AVConferenceSessionConnectionType
|| __DATA_CONST.__const _AVConferenceSessionDataNonce
|| __DATA_CONST.__const _AVConferenceSessionLocalUsesCell
|| __DATA_CONST.__const _AVConferenceSessionReceivedBytes
|| __DATA_CONST.__const _AVConferenceSessionRemoteUsesCell
|| __DATA_CONST.__const _AVConferenceSessionSentBytes
|| __DATA_CONST.__const _GKNATInterfaceInfoCommNATFlags
|| __DATA_CONST.__const _GKNATInterfaceInfoCommNATFlagsCached
|| __DATA_CONST.__const _GKNATInterfaceInfoInterfaceType
|| __DATA_CONST.__const _GKNATInterfaceInfoSSLFlagsCached
|| __DATA_CONST.__const _GKNATInterfaceInfoTCPFlagsCached
|| __DATA_CONST.__const _GKNATTypeDictionaryCarrierNATType
|| __DATA_CONST.__const _GKNATTypeDictionaryInterfaceInfoDictionary
|| __DATA_CONST.__const _GKNATTypeDictionaryNonCarrierNATType
|| __DATA_CONST.__const _GKNATTypeDictionarySummaryNATType
|| __DATA_CONST.__const _GKSCDXServerAddress
|| __DATA_CONST.__const _GKSCallEvent_InitiateAcceptPush
|| __DATA_CONST.__const _GKSCallEvent_InitiateCancelPush
|| __DATA_CONST.__const _GKSCallEvent_InitiateInvitePush
|| __DATA_CONST.__const _GKSCallEvent_InitiateRejectPush
|| __DATA_CONST.__const _GKSCallEvent_ReceivedAcceptPush
|| __DATA_CONST.__const _GKSCallEvent_ReceivedCancelPush
|| __DATA_CONST.__const _GKSCallEvent_ReceivedInvitePush
|| __DATA_CONST.__const _GKSCallEvent_ReceivedRejectPush
|| __DATA_CONST.__const _GKSCommNATServerCohortAddress
|| __DATA_CONST.__const _GKSCommNATServerCohortName
|| __DATA_CONST.__const _GKSCommNATServerMain0Address
|| __DATA_CONST.__const _GKSCommNATServerMain0Name
|| __DATA_CONST.__const _GKSCommNATServerMain1Address
|| __DATA_CONST.__const _GKSCommNATServerMain1Name
|| __DATA_CONST.__const _GKSConnectionBlobMaxBytes
|| __DATA_CONST.__const _GKSConnectivitySettingsUpdateName
|| __DATA_CONST.__const _GKSDecryptionMKMRecoveryInterval
|| __DATA_CONST.__const _GKSDecryptionTimeoutInterval
|| __DATA_CONST.__const _GKSDidStartParameter_CallID
|| __DATA_CONST.__const _GKSDidStartParameter_ConnType
|| __DATA_CONST.__const _GKSDidStartParameter_DidStart
|| __DATA_CONST.__const _GKSDidStartParameter_Error
|| __DATA_CONST.__const _GKSDidStartParameter_Event
|| __DATA_CONST.__const _GKSDidStartParameter_localUseCell
|| __DATA_CONST.__const _GKSDidStartParameter_remoteUseCell
|| __DATA_CONST.__const _GKSErrorDetailedError
|| __DATA_CONST.__const _GKSErrorReturnCode
|| __DATA_CONST.__const _GKSICETimeout
|| __DATA_CONST.__const _GKSKeepAliveTimeoutCarrierSpecific
|| __DATA_CONST.__const _GKSLocalGamingDiscoveryHeartbeat
|| __DATA_CONST.__const _GKSLocalGamingDiscoveryTimeout
|| __DATA_CONST.__const _GKSMaxBitrate2G
|| __DATA_CONST.__const _GKSMaxBitrate3G
|| __DATA_CONST.__const _GKSMaxBitrate5G
|| __DATA_CONST.__const _GKSMaxBitrateLTE
|| __DATA_CONST.__const _GKSMaxBitrateLTEv2
|| __DATA_CONST.__const _GKSMaxBitrateWiFi
|| __DATA_CONST.__const _GKSMaxRelayBitrate
|| __DATA_CONST.__const _GKSMaxTCPRelayBitrate
|| __DATA_CONST.__const _GKSMediaDegradedThreshold
|| __DATA_CONST.__const _GKSMinJBQueueSize5G
|| __DATA_CONST.__const _GKSNATCheckTimeout
|| __DATA_CONST.__const _GKSNATObserver_AddCarrierFlag
|| __DATA_CONST.__const _GKSNATObserver_AddInRangeFlag
|| __DATA_CONST.__const _GKSNATObserver_CheckTCPAndSSL
|| __DATA_CONST.__const _GKSNATObserver_FavorNonCarrier
|| __DATA_CONST.__const _GKSNATObserver_IgnoreCache
|| __DATA_CONST.__const _GKSNATObserver_NewCarrierType
|| __DATA_CONST.__const _GKSNATObserver_NonCarrierOnly
|| __DATA_CONST.__const _GKSNetworkConditionsTimeout
|| __DATA_CONST.__const _GKSNewSessionJoiningInterval
|| __DATA_CONST.__const _GKSNoRemotePacketsTimeout
|| __DATA_CONST.__const _GKSPreEmptiveRelayTimeout
|| __DATA_CONST.__const _GKSRateControllerType
|| __DATA_CONST.__const _GKSRelayParameter_ClientData
|| __DATA_CONST.__const _GKSRelayParameter_ConnectionID
|| __DATA_CONST.__const _GKSRelayParameter_PeerAddrPointer
|| __DATA_CONST.__const _GKSRelayParameter_PeerBlob
|| __DATA_CONST.__const _GKSRelayParameter_PeerExternalAddr
|| __DATA_CONST.__const _GKSRelayParameter_PeerID
|| __DATA_CONST.__const _GKSRelayParameter_PeerNatType
|| __DATA_CONST.__const _GKSRelayParameter_PeerRelayIP
|| __DATA_CONST.__const _GKSRelayParameter_PeerRelayNatIP
|| __DATA_CONST.__const _GKSRelayParameter_PeerRelayNatPort
|| __DATA_CONST.__const _GKSRelayParameter_PeerRelayPort
|| __DATA_CONST.__const _GKSRelayParameter_RemotePrimaryId
|| __DATA_CONST.__const _GKSRelayParameter_SelfAddrPointer
|| __DATA_CONST.__const _GKSRelayParameter_SelfBlob
|| __DATA_CONST.__const _GKSRelayParameter_SelfExternalAddr
|| __DATA_CONST.__const _GKSRelayParameter_SelfNatType
|| __DATA_CONST.__const _GKSRelayParameter_SelfRelayIP
|| __DATA_CONST.__const _GKSRelayParameter_SelfRelayNatIP
|| __DATA_CONST.__const _GKSRelayParameter_SelfRelayNatPort
|| __DATA_CONST.__const _GKSRelayParameter_SelfRelayPort
|| __DATA_CONST.__const _GKSRelayParameter_Token
|| __DATA_CONST.__const _GKSRelayParameter_TransactionID
|| __DATA_CONST.__const _GKSRelayType
|| __DATA_CONST.__const _GKSSSLCheckServerName
|| __DATA_CONST.__const _GKSStartupTimeout
|| __DATA_CONST.__const _GKSStaticNATTypeCarrierSpecific
|| __DATA_CONST.__const _GKSSupportsEVSCodec
|| __DATA_CONST.__const _GKSSupportsHEVCEncoding
|| __DATA_CONST.__const _GKSSupportsRedAudio
|| __DATA_CONST.__const _GKSTCPCheckServerName
|| __DATA_CONST.__const _GKSVideoDegradedThreshold
|| __DATA_CONST.__const _GKSVideoNearDegradedThreshold
|| __DATA_CONST.__const _GKSVideoThrottlingTimeout
|| __DATA_CONST.__const _GKSiRATRecommendationSupport
|| __DATA_CONST.__const _GKVoiceChatServiceErrorDomain
|| __DATA_CONST.__const _RTCACMaxBitrate2G
|| __DATA_CONST.__const _RTCACMaxBitrate3G
|| __DATA_CONST.__const _RTCACMaxBitrateLTE
|| __DATA_CONST.__const _RTCACMaxRelayBitrate
|| __DATA_CONST.__const _RTCACMaxTCPRelayBitrate
|| __DATA_CONST.__const _RTCSSMaxBitrate2G
|| __DATA_CONST.__const _RTCSSMaxBitrate3G
|| __DATA_CONST.__const _RTCSSMaxBitrateLTE
|| __DATA_CONST.__const _VCAbTestAudioEnhancementFeatureCombos
|| __DATA_CONST.__const _VCAbTestDuplicationEnhancementFeatureCombos
|| __DATA_CONST.__const _VCAbTestMasterLocalSwitch
|| __DATA_CONST.__const _VCAbTestNetworkEnhancementFeatureCombos
|| __DATA_CONST.__const _VCAbTestRateControlEnhancementFeatureCombos
|| __DATA_CONST.__const _VCAbTestUseRTTForFIRThrottlingSwitch
|| __DATA_CONST.__const _VCAbTestVideoEnhancementFeatureCombos
|| __DATA_CONST.__const _VCAbTestVideoJitterForVideoPlayoutSwitch
|| __DATA_CONST.__const _VCAbTestingState
|| __DATA_CONST.__const _VCAdaptiveLearningAdaptiveLearningA
|| __DATA_CONST.__const _VCAdaptiveLearningAdaptiveLearningB
|| __DATA_CONST.__const _VCAdaptiveLearningAdjustmentFactorA
|| __DATA_CONST.__const _VCAdaptiveLearningAdjustmentFactorB
|| __DATA_CONST.__const _VCAdaptiveLearningAdjustmentFactorC
|| __DATA_CONST.__const _VCAdaptiveLearningEnabled
|| __DATA_CONST.__const _VCAdaptiveLearningLongTermHistoryLength
|| __DATA_CONST.__const _VCAdaptiveLearningLongTermValueWeightA
|| __DATA_CONST.__const _VCAdaptiveLearningLongTermValueWeightB
|| __DATA_CONST.__const _VCAdaptiveLearningLongTermValueWeightC
|| __DATA_CONST.__const _VCAdaptiveLearningShortTermHistoryLength
|| __DATA_CONST.__const _VCAdaptiveLearningShortTermValueWeightA
|| __DATA_CONST.__const _VCAdaptiveLearningShortTermValueWeightB
|| __DATA_CONST.__const _VCAdaptiveLearningShortTermValueWeightC
|| __DATA_CONST.__const _VCAllowBurstyLossRampDownEnableThreshold
|| __DATA_CONST.__const _VCAlwaysOnAudioRedundancyEnableThreshold
|| __DATA_CONST.__const _VCAudioIssueDetectorEnabled
|| __DATA_CONST.__const _VCAudioStreamLowQualityOnDemand
|| __DATA_CONST.__const _VCCaptionsEnabled
|| __DATA_CONST.__const _VCCellularLowTierRedundancyEnableThreshold
|| __DATA_CONST.__const _VCConnectionManagerNWConnectionMonitor
|| __DATA_CONST.__const _VCCoreMotionDetectionEnabled
|| __DATA_CONST.__const _VCDisableSIPEnableThreshold
|| __DATA_CONST.__const _VCDuplicateImportantPktsEnableThreshold
|| __DATA_CONST.__const _VCDuplicationEnhancementEnableThreshold
|| __DATA_CONST.__const _VCFECFeedbackAnalyzerBufferMaxLength
|| __DATA_CONST.__const _VCFECFeedbackAnalyzerInterpolationThreshold
|| __DATA_CONST.__const _VCFECFeedbackAnalyzerLevelMatchPercentile
|| __DATA_CONST.__const _VCFECFeedbackAnalyzerReportMinPeriod
|| __DATA_CONST.__const _VCFECFeedbackAnalyzerVPLRWindowSize
|| __DATA_CONST.__const _VCFECFeedbackVersion
|| __DATA_CONST.__const _VCFECGeneratorEnabled
|| __DATA_CONST.__const _VCFECVectorizationEnabled
|| __DATA_CONST.__const _VCFaceTime30FPSSupport
|| __DATA_CONST.__const _VCFaceTimeJBHighStart
|| __DATA_CONST.__const _VCFaceTimeJitterBufferMode
|| __DATA_CONST.__const _VCFaceTimePhotosUseBestVideoRule
|| __DATA_CONST.__const _VCFastMediaDuplicationEnableThreshold
|| __DATA_CONST.__const _VCFecHeaderV1EnableThreshold
|| __DATA_CONST.__const _VCHeifHevcLivePhotosEnableThreshold
|| __DATA_CONST.__const _VCHevcWifiTiersEnableThreshold
|| __DATA_CONST.__const _VCHighFecEnableThreshold
|| __DATA_CONST.__const _VCIDSLinkSuggestion
|| __DATA_CONST.__const _VCLinkProbingCapabilityVersion
|| __DATA_CONST.__const _VCLinkProbingConnectionLockdownPeriod
|| __DATA_CONST.__const _VCLinkProbingDuplicationWaitTimeout
|| __DATA_CONST.__const _VCLinkProbingEnvelopeAttackFactor
|| __DATA_CONST.__const _VCLinkProbingEnvelopeDecayFactor
|| __DATA_CONST.__const _VCLinkProbingExponentialMovingMeanFactor
|| __DATA_CONST.__const _VCLinkProbingFeatureThreshold
|| __DATA_CONST.__const _VCLinkProbingIdenticalQueryResultMax
|| __DATA_CONST.__const _VCLinkProbingInterval
|| __DATA_CONST.__const _VCLinkProbingLockdownPeriod
|| __DATA_CONST.__const _VCLinkProbingPLRBuckets
|| __DATA_CONST.__const _VCLinkProbingQueryResultsInterval
|| __DATA_CONST.__const _VCLinkProbingTimeout
|| __DATA_CONST.__const _VCLowFpsVideoEnableThreshold
|| __DATA_CONST.__const _VCLowNetworkModeEnableThreshold
|| __DATA_CONST.__const _VCMaxBitrate2GDownlink
|| __DATA_CONST.__const _VCMaxBitrate2GUplink
|| __DATA_CONST.__const _VCMaxBitrate3GDownlink
|| __DATA_CONST.__const _VCMaxBitrate3GUplink
|| __DATA_CONST.__const _VCMaxBitrateLTEDownlink
|| __DATA_CONST.__const _VCMaxBitrateLTEUplink
|| __DATA_CONST.__const _VCMaxBitrateNonExpensiveDownlink
|| __DATA_CONST.__const _VCMaxBitrateNonExpensiveUplink
|| __DATA_CONST.__const _VCMaxBitrateWiFiDownlink
|| __DATA_CONST.__const _VCMaxBitrateWiFiUplink
|| __DATA_CONST.__const _VCMediaDrivenDuplication
|| __DATA_CONST.__const _VCMediaDrivenDuplicationEnableThreshold
|| __DATA_CONST.__const _VCNackGeneratorNackBitRateLimitingMaxRatio
|| __DATA_CONST.__const _VCNackGeneratorNackThrottlingFactorBuckets
|| __DATA_CONST.__const _VCNackGeneratorNackThrottlingPlrBuckets
|| __DATA_CONST.__const _VCNackGeneratorPercentageOfPopulationWithRTXAdditionalDelayBudget
|| __DATA_CONST.__const _VCNackGeneratorSeqNumAgingTime
|| __DATA_CONST.__const _VCNackGeneratorStorebagConfigVersion
|| __DATA_CONST.__const _VCNoRemoteDuplicationThresholdFast
|| __DATA_CONST.__const _VCPreWarmCellEnableThreshold
|| __DATA_CONST.__const _VCPreferRelayOverP2PThreshold
|| __DATA_CONST.__const _VCPrimaryConnHealthAllowedDelay
|| __DATA_CONST.__const _VCRedStateValueA
|| __DATA_CONST.__const _VCRemoteMediaStallTimeout
|| __DATA_CONST.__const _VCSecureMessagingEnableThreshold
|| __DATA_CONST.__const _VCSendFeedbackControllerReport
|| __DATA_CONST.__const _VCServerPacketRetransmissionEnabledForVideo
|| __DATA_CONST.__const _VCStreamOutputInProcessDelegate
|| __DATA_CONST.__const _VCStreamOutputInProcessDelegateQueue
|| __DATA_CONST.__const _VCUpdatedAFRCHeaderEnableThreshold
|| __DATA_CONST.__const _VCVideoEnableLateFrameRecovery
|| __DATA_CONST.__const _VCVideoJBEnableThreshold
|| __DATA_CONST.__const _VCVideoJitterBufferForVideoPlayoutForFaceTime
|| __DATA_CONST.__const _VCVideoPlayerEnableLooseSyncForFaceTime
|| __DATA_CONST.__const _VCVideoPlayerEnableReferenceFrameForFaceTime
|| __DATA_CONST.__const _VCVideoPriorityEnabled
|| __DATA_CONST.__const _VCVideoReceiverDeferredAssemblyOffset
|| __DATA_CONST.__const _VCVideoRedundancyPercentageMax
|| __DATA_CONST.__const _VCVideoStreamLowQualityOnDemand
|| __DATA_CONST.__const _VCVideoTransmitterBaseMinimumKeyFrameGenerationIntervalThresholdForFacetime
|| __DATA_CONST.__const _VCViewpointCorrectionEnableThreshold
|| __DATA_CONST.__const _VCViewpointCorrectionEnabled
|| __DATA_CONST.__const _VCVplrFecEnableThreshold
|| __DATA_CONST.__const _VCWRMPendingBitrateCapDelta
|| __DATA_CONST.__const _VCWRMRSSIThresholdDistribution
|| __DATA_CONST.__const _VCWRMRSSIThresholdEnableThreshold
|| __DATA_CONST.__const _VCWifiAssistBudgetStatusEnableThreshold
|| __DATA_CONST.__const _VCWifiAssistDuplicationEnableThreshold
|| __DATA_CONST.__const _VCWifiAssistStatusBarEnableThreshold
|| __DATA_CONST.__const _VCWifiLowTierRedundancyEnableThreshold
|| __DATA_CONST.__const _VCiRATDuplicationEnableThreshold
|| __DATA_CONST.__const _VCiRATMetricsEnableThreshold
|| __DATA_CONST.__const _VCiRATRtpEnableThreshold
|| __DATA_CONST.__const _kAVCKeyAudioPowerSpectrumTokenInput
|| __DATA_CONST.__const _kAVCKeyAudioPowerSpectrumTokenOutput
|| __DATA_CONST.__const _kAVCKeyRTCPSocket
|| __DATA_CONST.__const _kAVCKeyRTPLocalSSRC
|| __DATA_CONST.__const _kAVCKeyRTPSocket
|| __DATA_CONST.__const _kAVCKeySessionReceivedBytes
|| __DATA_CONST.__const _kAVCKeySessionSentBytes
|| __DATA_CONST.__const _kAVCKeySharedSocket
|| __DATA_CONST.__const _kAVCKeySourcePort
|| __DATA_CONST.__const _kAVCKeySupportedAudioCodecs
|| __DATA_CONST.__const _kAVCKeySupportedCodecs
|| __DATA_CONST.__const _kAVCKeySupportedMaxVideoDecodes
|| __DATA_CONST.__const _kAVCKeySupportedVideoDecodingCodecs
|| __DATA_CONST.__const _kAVCKeySupportedVideoDecodingResolutions
|| __DATA_CONST.__const _kAVCKeySupportedVideoEncodingCodecs
|| __DATA_CONST.__const _kAVCKeySupportedVideoEncodingResolutions
|| __DATA_CONST.__const _kAVCKeyVideoStreamDownlinkIsOperatingAtMaxBitrate
|| __DATA_CONST.__const _kAVCKeyVideoStreamDownlinkIsOperatingAtMinBitrate
|| __DATA_CONST.__const _kAVCKeyVideoStreamDownlinkOperatingBitrate
|| __DATA_CONST.__const _kAVCKeyVideoStreamDownlinkOptimalBitrate
|| __DATA_CONST.__const _kAVCKeyVideoStreamUplinkOperatingBitrate
|| __DATA_CONST.__const _kAVCMediaStreamOptionCallID
|| __DATA_CONST.__const _kAVCMediaStreamOptionClientPID
|| __DATA_CONST.__const _kAVCMediaStreamOptionIsOriginator
|| __DATA_CONST.__const _kAVCMediaStreamOptionRemoteEndpointInfo
|| __DATA_CONST.__const _kAVCMediaStreamOptionRunInProcess
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAudioClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVCAudioPowerSpectrum
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVCAudioPowerSpectrumBin
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVCAudioPowerSpectrumChannel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVCAudioPowerSpectrumMeter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVConference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVConferencePreview
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVConferenceXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GKNATObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GKSConnectivitySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VCAudioRelay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VCAudioRelayIO
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VCCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VCMediaStreamManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VideoAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VideoConference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAudioClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVCAudioPowerSpectrum
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVCAudioPowerSpectrumBin
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVCAudioPowerSpectrumChannel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVCAudioPowerSpectrumMeter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVConference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVConferencePreview
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVConferenceXPCClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GKNATObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GKSConnectivitySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VCAudioRelay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VCAudioRelayIO
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VCCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VCMediaStreamManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VideoAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VideoConference
|| __TEXT.__const _AVC_VOLUME_MAX
|| __TEXT.__const _AVC_VOLUME_MIN
|| __TEXT.__text _AVConferenceServerStart
|| __TEXT.__text _AVConferenceServerStartInternal
|| __TEXT.__text _AVConferenceServer_ProcessIsAVConferenceServer
|| __TEXT.__text _AVConferenceServer_ProcessIsAvconferenced
|| __TEXT.__text _AVConferenceServer_UseAvconferenced
|| __TEXT.__text _AVConferenceServer_UseAvconferencedOniOSSpecficFeatures
|| __TEXT.__text _GKSConnectivitySettings_GetICETimeout
|| __TEXT.__text _GKSConnectivitySettings_GetMinQueueSizeOverride5G
|| __TEXT.__text _GKSConnectivitySettings_GetNetworkConditionsTimeout
|| __TEXT.__text _GKSConnectivitySettings_GetNoRemotePacketsTimeout
|| __TEXT.__text _hwrandom
|| __TEXT.__text _hwrandom16
__ AVFAudio: _AVAudioSessionAvailableSampleRatesChangeNotification
__ AVFAudio: _AVAudioSessionCategoryPlayAndRecord
__ AVFAudio: _AVAudioSessionCategoryPlayback
__ AVFAudio: _AVAudioSessionInterruptionNotification
__ AVFAudio: _AVAudioSessionInterruptionReasonKey
__ AVFAudio: _AVAudioSessionInterruptionTypeKey
__ AVFAudio: _AVAudioSessionMediaServicesWereLostNotification
__ AVFAudio: _AVAudioSessionModeDefault
__ AVFAudio: _AVAudioSessionModeVideoChat
__ AVFAudio: _AVAudioSessionModeVideoChatForMedia
__ AVFAudio: _AVAudioSessionModeVoiceChat
__ AVFAudio: _AVAudioSessionOrientationBack
__ AVFAudio: _AVAudioSessionOrientationFront
__ AVFAudio: _AVAudioSessionPolarPatternCardioid
__ AVFAudio: _AVAudioSessionPolarPatternSubcardioid
__ AVFAudio: _AVAudioSessionPortBuiltInMic
__ AVFAudio: _AVChannelLayoutKey
__ AVFAudio: _AVEncoderBitRateKey
__ AVFAudio: _AVFormatIDKey
__ AVFAudio: _AVLinearPCMBitDepthKey
__ AVFAudio: _AVLinearPCMIsBigEndianKey
__ AVFAudio: _AVLinearPCMIsFloatKey
__ AVFAudio: _AVLinearPCMIsNonInterleaved
__ AVFAudio: _AVNumberOfChannelsKey
__ AVFAudio: _AVSampleRateKey
__ AVFAudio: _OBJC_CLASS_$_AVAudioFormat
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _AVAppleMakerNote_AssetIdentifier
__ AVFoundation: _AVCaptureDeviceTypeBuiltInTripleCamera
__ AVFoundation: _AVCaptureDeviceTypeBuiltInTrueDepthCamera
__ AVFoundation: _AVCaptureSessionDidStartRunningNotification
__ AVFoundation: _AVCaptureSessionDidStopRunningNotification
__ AVFoundation: _AVCaptureSessionErrorKey
__ AVFoundation: _AVCaptureSessionInterruptionEndedNotification
__ AVFoundation: _AVCaptureSessionInterruptionReasonKey
__ AVFoundation: _AVCaptureSessionPresetHigh
__ AVFoundation: _AVCaptureSessionPresetMedium
__ AVFoundation: _AVCaptureSessionRuntimeErrorNotification
__ AVFoundation: _AVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout
__ AVFoundation: _AVCaptureSessionWasInterruptedNotification
__ AVFoundation: _AVFileTypeQuickTimeMovie
__ AVFoundation: _AVMediaTypeAudio
__ AVFoundation: _AVMediaTypeDepthData
__ AVFoundation: _AVMediaTypeMetadata
__ AVFoundation: _AVMediaTypeVideo
__ AVFoundation: _AVMetadataKeySpaceQuickTimeMetadata
__ AVFoundation: _AVMetadataObjectTypeFace
__ AVFoundation: _AVMetadataObjectTypeTrackedFaces
__ AVFoundation: _AVMetadataQuickTimeMetadataKeyKeywords
__ AVFoundation: _AVURLAssetPreferPreciseDurationAndTimingKey
__ AVFoundation: _AVVideoAllowFrameReorderingKey
__ AVFoundation: _AVVideoAverageBitRateKey
__ AVFoundation: _AVVideoCodecH264
__ AVFoundation: _AVVideoCodecKey
__ AVFoundation: _AVVideoCodecTypeHEVC
__ AVFoundation: _AVVideoColorPrimariesKey
__ AVFoundation: _AVVideoColorPrimaries_ITU_R_709_2
__ AVFoundation: _AVVideoColorPropertiesKey
__ AVFoundation: _AVVideoCompressionPropertiesKey
__ AVFoundation: _AVVideoExpectedSourceFrameRateKey
__ AVFoundation: _AVVideoHeightKey
__ AVFoundation: _AVVideoMaxKeyFrameIntervalKey
__ AVFoundation: _AVVideoProfileLevelH264HighAutoLevel
__ AVFoundation: _AVVideoProfileLevelKey
__ AVFoundation: _AVVideoTransferFunctionKey
__ AVFoundation: _AVVideoTransferFunction_ITU_R_709_2
__ AVFoundation: _AVVideoWidthKey
__ AVFoundation: _AVVideoYCbCrMatrixKey
__ AVFoundation: _AVVideoYCbCrMatrix_ITU_R_709_2
__ AVFoundation: _OBJC_CLASS_$_AVAssetReader
__ AVFoundation: _OBJC_CLASS_$_AVAssetReaderOutputMetadataAdaptor
__ AVFoundation: _OBJC_CLASS_$_AVAssetReaderTrackOutput
__ AVFoundation: _OBJC_CLASS_$_AVAssetWriter
__ AVFoundation: _OBJC_CLASS_$_AVAssetWriterInput
__ AVFoundation: _OBJC_CLASS_$_AVAssetWriterInputMetadataAdaptor
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDataOutputSynchronizer
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDepthDataOutput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDevice
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDeviceInput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureMetadataOutput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureSession
__ AVFoundation: _OBJC_CLASS_$_AVCaptureSynchronizedDepthData
__ AVFoundation: _OBJC_CLASS_$_AVCaptureSynchronizedMetadataObjectData
__ AVFoundation: _OBJC_CLASS_$_AVCaptureSynchronizedSampleBufferData
__ AVFoundation: _OBJC_CLASS_$_AVCaptureVideoDataOutput
__ AVFoundation: _OBJC_CLASS_$_AVFlashlight
__ AVFoundation: _OBJC_CLASS_$_AVMetadataItem
__ AVFoundation: _OBJC_CLASS_$_AVMutableMetadataItem
__ AVFoundation: _OBJC_CLASS_$_AVTimedMetadataGroup
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ Accelerate: _vDSP_DFT_DestroySetup
__ Accelerate: _vDSP_DFT_Execute
__ Accelerate: _vDSP_DFT_zrop_CreateSetup
__ Accelerate: _vDSP_ctoz
__ Accelerate: _vDSP_hann_window
__ Accelerate: _vDSP_rmsqv
__ Accelerate: _vDSP_vadd
__ Accelerate: _vDSP_vasm
__ Accelerate: _vDSP_vdbcon
__ Accelerate: _vDSP_vlint
__ Accelerate: _vDSP_vmma
__ Accelerate: _vDSP_vmul
__ Accelerate: _vDSP_vsma
__ Accelerate: _vDSP_vsmul
__ Accelerate: _vDSP_zvmags
__ ApplePushService: _OBJC_CLASS_$_APSConnection
__ AudioToolbox: _AudioComponentCopyName
__ AudioToolbox: _AudioComponentFindNext
__ AudioToolbox: _AudioComponentGetVersion
__ AudioToolbox: _AudioComponentInstanceDispose
__ AudioToolbox: _AudioComponentInstanceNew
__ AudioToolbox: _AudioComponentRegister
__ AudioToolbox: _AudioConverterConvertBuffer
__ AudioToolbox: _AudioConverterDispose
__ AudioToolbox: _AudioConverterFillComplexBuffer
__ AudioToolbox: _AudioConverterGetProperty
__ AudioToolbox: _AudioConverterNew
__ AudioToolbox: _AudioConverterReset
__ AudioToolbox: _AudioConverterSetProperty
__ AudioToolbox: _AudioOutputUnitStart
__ AudioToolbox: _AudioOutputUnitStop
__ AudioToolbox: _AudioQueueAddPropertyListener
__ AudioToolbox: _AudioQueueAllocateBuffer
__ AudioToolbox: _AudioQueueDispose
__ AudioToolbox: _AudioQueueEnqueueBuffer
__ AudioToolbox: _AudioQueueFreeBuffer
__ AudioToolbox: _AudioQueueGetProperty
__ AudioToolbox: _AudioQueueNewInput
__ AudioToolbox: _AudioQueueRemovePropertyListener
__ AudioToolbox: _AudioQueueSetProperty
__ AudioToolbox: _AudioQueueStart
__ AudioToolbox: _AudioQueueStop
__ AudioToolbox: _AudioSessionCreateCMSession
__ AudioToolbox: _AudioSessionDestroyCMSession
__ AudioToolbox: _AudioUnitComplexRender
__ AudioToolbox: _AudioUnitGetParameter
__ AudioToolbox: _AudioUnitGetProperty
__ AudioToolbox: _AudioUnitInitialize
__ AudioToolbox: _AudioUnitProcess
__ AudioToolbox: _AudioUnitProcessMultiple
__ AudioToolbox: _AudioUnitRender
__ AudioToolbox: _AudioUnitSetParameter
__ AudioToolbox: _AudioUnitSetProperty
__ AudioToolbox: _AudioUnitUninitialize
__ AudioToolbox: _Float32ToNativeInt16_Portable
__ AudioToolbox: _OBJC_CLASS_$_ATAudioTap
__ AudioToolbox: _OBJC_CLASS_$_ATAudioTapDescription
__ BackBoardServices: _BKSDisplayServicesSetCloneMirroringMode
__ BiomeStreams: _OBJC_CLASS_$_BMScreenSharingEvent
__ BiomeStreams: _OBJC_CLASS_$_BMScreenSharingStream
__ CFNetwork: _CFHTTPMessageCopySerializedMessage
__ CFNetwork: _CFHTTPMessageCreateRequest
__ CFNetwork: _CFHTTPMessageSetHeaderFieldValue
__ CFNetwork: _kCFHTTPVersion1_1
__ CMCapture: _FigRemoteOperationReceiverCreateMessageReceiver
__ CMCapture: _FigRemoteOperationSenderResetIfFullAndEnqueueOperation
__ CMCapture: _FigRemoteQueueReceiverCreateFromXPCObject
__ CMCapture: _FigRemoteQueueReceiverSetHandler
__ CMCapture: _FigRemoteQueueReceiverUnsetHandler
__ CMCapture: _FigRemoteQueueSenderCreate
__ CMCapture: _FigRemoteQueueSenderCreateXPCObject
__ CMCapture: _FigRemoteQueueSenderGetSharedMemPoolAllocator
__ CMCapture: _FigRemoteQueueSenderSetMaximumBufferAge
__ CMCapture: _FigSharedMemPoolCreate
__ CMCapture: _kFigCaptureSampleBufferAttachmentKey_MetadataDictionary
__ CMCapture: _kFigFaceDetectionMetadataArray
__ CMCapture: _kFigFaceDetectionMetadata_FaceID
__ CMCapture: _kFigFaceDetectionMetadata_Rect
__ CMCapture: _kFigFaceDetectionMetadata_Roll
__ CMCapture: _kFigFaceDetectionMetadata_Yaw
__ CoreAudio: _AudioObjectGetPropertyData
__ CoreAudio: _AudioObjectGetPropertyDataSize
__ CoreAudio: _AudioObjectHasProperty
__ CoreFoundation: _CFAllocatorAllocate
__ CoreFoundation: _CFAllocatorCreate
__ CoreFoundation: _CFAllocatorDeallocate
__ CoreFoundation: _CFAllocatorGetDefault
__ CoreFoundation: _CFAllocatorReallocate
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateCopy
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetFirstIndexOfValue
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFArraySetValueAtIndex
__ CoreFoundation: _CFAttributedStringCreate
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFDataAppendBytes
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateMutable
__ CoreFoundation: _CFDataCreateWithBytesNoCopy
__ CoreFoundation: _CFDataDeleteBytes
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetMutableBytePtr
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDataSetLength
__ CoreFoundation: _CFDictionaryAddValue
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryGetValueIfPresent
__ CoreFoundation: _CFDictionaryRemoveAllValues
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFErrorCopyDescription
__ CoreFoundation: _CFErrorCreateWithUserInfoKeysAndValues
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFHash
__ CoreFoundation: _CFMakeCollectable
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesAppValueIsForced
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyKeyList
__ CoreFoundation: _CFPreferencesCopyMultiple
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFPropertyListCreateDeepCopy
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddObserver
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopObserverCreate
__ CoreFoundation: _CFRunLoopRemoveObserver
__ CoreFoundation: _CFRunLoopRun
__ CoreFoundation: _CFRunLoopStop
__ CoreFoundation: _CFSetAddValue
__ CoreFoundation: _CFSetApplyFunction
__ CoreFoundation: _CFSetCreateMutable
__ CoreFoundation: _CFSetGetValueIfPresent
__ CoreFoundation: _CFSetRemoveValue
__ CoreFoundation: _CFShow
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetCStringPtr
__ CoreFoundation: _CFStringGetDoubleValue
__ CoreFoundation: _CFStringGetIntValue
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetMaximumSizeForEncoding
__ CoreFoundation: _CFStringGetSystemEncoding
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFStringHasPrefix
__ CoreFoundation: _CFStringHasSuffix
__ CoreFoundation: _CFURLCopyHostName
__ CoreFoundation: _CFURLCreateWithString
__ CoreFoundation: _CFURLGetPortNumber
__ CoreFoundation: _CFUUIDCreate
__ CoreFoundation: _CFUUIDCreateString
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleLanguageCode
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFAllocatorNull
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFCopyStringDictionaryKeyCallBacks
__ CoreFoundation: _kCFErrorLocalizedDescriptionKey
__ CoreFoundation: _kCFPreferencesAnyApplication
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesAnyUser
__ CoreFoundation: _kCFPreferencesCurrentApplication
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextSetData
__ CoreGraphics: _CGColorCreate
__ CoreGraphics: _CGColorRelease
__ CoreGraphics: _CGColorSpaceCreateDeviceGray
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextConcatCTM
__ CoreGraphics: _CGContextDrawLayerAtPoint
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextRotateCTM
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGContextSetShadowWithColor
__ CoreGraphics: _CGContextSetTextMatrix
__ CoreGraphics: _CGContextSetTextPosition
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGDataProviderCreateWithData
__ CoreGraphics: _CGDataProviderRelease
__ CoreGraphics: _CGImageCreate
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGLayerCreateWithContext
__ CoreGraphics: _CGLayerGetContext
__ CoreGraphics: _CGLayerRelease
__ CoreGraphics: _CGPathAddRect
__ CoreGraphics: _CGPathCreateMutable
__ CoreGraphics: _CGRectCreateDictionaryRepresentation
__ CoreGraphics: _CGRectDivide
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectMakeWithDictionaryRepresentation
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeCreateDictionaryRepresentation
__ CoreGraphics: _CGSizeMakeWithDictionaryRepresentation
__ CoreGraphics: _CGSizeZero
__ CoreMedia: _CMAudioFormatDescriptionCreate
__ CoreMedia: _CMAudioFormatDescriptionGetStreamBasicDescription
__ CoreMedia: _CMAudioSampleBufferCreateWithPacketDescriptions
__ CoreMedia: _CMBaseGetClassID
__ CoreMedia: _CMBaseObjectGetDerivedStorage
__ CoreMedia: _CMBaseObjectGetVTable
__ CoreMedia: _CMBlockBufferAccessDataBytes
__ CoreMedia: _CMBlockBufferAppendBufferReference
__ CoreMedia: _CMBlockBufferCopyDataBytes
__ CoreMedia: _CMBlockBufferCreateContiguous
__ CoreMedia: _CMBlockBufferCreateEmpty
__ CoreMedia: _CMBlockBufferCreateWithBufferReference
__ CoreMedia: _CMBlockBufferCreateWithMemoryBlock
__ CoreMedia: _CMBlockBufferGetDataLength
__ CoreMedia: _CMBlockBufferGetDataPointer
__ CoreMedia: _CMBlockBufferIsRangeContiguous
__ CoreMedia: _CMBlockBufferReplaceDataBytes
__ CoreMedia: _CMBufferQueueContainsEndOfData
__ CoreMedia: _CMBufferQueueCreate
__ CoreMedia: _CMBufferQueueDequeueAndRetain
__ CoreMedia: _CMBufferQueueEnqueue
__ CoreMedia: _CMBufferQueueGetBufferCount
__ CoreMedia: _CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS
__ CoreMedia: _CMBufferQueueGetCallbacksForUnsortedSampleBuffers
__ CoreMedia: _CMBufferQueueGetHead
__ CoreMedia: _CMBufferQueueIsAtEndOfData
__ CoreMedia: _CMBufferQueueIsEmpty
__ CoreMedia: _CMBufferQueueMarkEndOfData
__ CoreMedia: _CMClockGetHostTimeClock
__ CoreMedia: _CMClockGetTime
__ CoreMedia: _CMCopyDictionaryOfAttachments
__ CoreMedia: _CMDerivedObjectCreate
__ CoreMedia: _CMFormatDescriptionCreate
__ CoreMedia: _CMFormatDescriptionEqual
__ CoreMedia: _CMFormatDescriptionGetExtension
__ CoreMedia: _CMFormatDescriptionGetExtensions
__ CoreMedia: _CMFormatDescriptionGetMediaSubType
__ CoreMedia: _CMFormatDescriptionGetMediaType
__ CoreMedia: _CMFormatDescriptionGetTypeID
__ CoreMedia: _CMGetAttachment
__ CoreMedia: _CMMemoryPoolCreate
__ CoreMedia: _CMMemoryPoolGetAllocator
__ CoreMedia: _CMMemoryPoolInvalidate
__ CoreMedia: _CMMetadataFormatDescriptionCreateWithMetadataSpecifications
__ CoreMedia: _CMNotificationCenterAddListener
__ CoreMedia: _CMNotificationCenterGetDefaultLocalCenter
__ CoreMedia: _CMNotificationCenterPostNotification
__ CoreMedia: _CMNotificationCenterRemoveListener
__ CoreMedia: _CMPropagateAttachments
__ CoreMedia: _CMSampleBufferCopyPCMDataIntoAudioBufferList
__ CoreMedia: _CMSampleBufferCreate
__ CoreMedia: _CMSampleBufferCreateCopy
__ CoreMedia: _CMSampleBufferCreateCopyWithNewTiming
__ CoreMedia: _CMSampleBufferCreateForImageBuffer
__ CoreMedia: _CMSampleBufferCreateReadyWithImageBuffer
__ CoreMedia: _CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer
__ CoreMedia: _CMSampleBufferGetDataBuffer
__ CoreMedia: _CMSampleBufferGetDecodeTimeStamp
__ CoreMedia: _CMSampleBufferGetDuration
__ CoreMedia: _CMSampleBufferGetFormatDescription
__ CoreMedia: _CMSampleBufferGetImageBuffer
__ CoreMedia: _CMSampleBufferGetNumSamples
__ CoreMedia: _CMSampleBufferGetOutputPresentationTimeStamp
__ CoreMedia: _CMSampleBufferGetPresentationTimeStamp
__ CoreMedia: _CMSampleBufferGetSampleAttachmentsArray
__ CoreMedia: _CMSampleBufferGetSampleSize
__ CoreMedia: _CMSampleBufferGetSampleTimingInfo
__ CoreMedia: _CMSampleBufferSetDataBufferFromAudioBufferList
__ CoreMedia: _CMSampleBufferSetOutputPresentationTimeStamp
__ CoreMedia: _CMSetAttachment
__ CoreMedia: _CMSetAttachments
__ CoreMedia: _CMSimpleQueueCreate
__ CoreMedia: _CMSimpleQueueDequeue
__ CoreMedia: _CMSimpleQueueEnqueue
__ CoreMedia: _CMSimpleQueueGetCapacity
__ CoreMedia: _CMSimpleQueueGetCount
__ CoreMedia: _CMSimpleQueueGetHead
__ CoreMedia: _CMTimeAdd
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeConvertScale
__ CoreMedia: _CMTimeCopyAsDictionary
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeFromDictionary
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeRangeMake
__ CoreMedia: _CMTimeSubtract
__ CoreMedia: _CMTimebaseCreateWithSourceClock
__ CoreMedia: _CMTimebaseSetRateAndAnchorTime
__ CoreMedia: _CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer
__ CoreMedia: _CMVideoFormatDescriptionCreate
__ CoreMedia: _CMVideoFormatDescriptionCreateForImageBuffer
__ CoreMedia: _CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData
__ CoreMedia: _CMVideoFormatDescriptionCreateFromH264ParameterSets
__ CoreMedia: _CMVideoFormatDescriptionCreateFromHEVCParameterSets
__ CoreMedia: _CMVideoFormatDescriptionGetDimensions
__ CoreMedia: _CMVideoFormatDescriptionGetH264ParameterSetAtIndex
__ CoreMedia: _FigBaseClassRegisterClass
__ CoreMedia: _FigBaseObjectStandardNotificationBarrier
__ CoreMedia: _FigBlockBufferRelease
__ CoreMedia: _FigByteStreamCreateFromOpenFile
__ CoreMedia: _FigCFArrayContainsValue
__ CoreMedia: _FigCFDictionaryGetBooleanIfPresent
__ CoreMedia: _FigCFDictionaryGetCGRectIfPresent
__ CoreMedia: _FigCFDictionaryGetCGSizeIfPresent
__ CoreMedia: _FigCFDictionaryGetCMTimeIfPresent
__ CoreMedia: _FigCFDictionaryGetDoubleIfPresent
__ CoreMedia: _FigCFDictionaryGetFloatIfPresent
__ CoreMedia: _FigCFDictionaryGetInt16IfPresent
__ CoreMedia: _FigCFDictionaryGetInt32IfPresent
__ CoreMedia: _FigCFDictionaryGetIntIfPresent
__ CoreMedia: _FigCFDictionarySetCGRect
__ CoreMedia: _FigCFDictionarySetCGSize
__ CoreMedia: _FigCFDictionarySetCMTime
__ CoreMedia: _FigCFDictionarySetFloat
__ CoreMedia: _FigCFDictionarySetInt16
__ CoreMedia: _FigCFDictionarySetInt32
__ CoreMedia: _FigCFDictionarySetInt64
__ CoreMedia: _FigCFDictionarySetValue
__ CoreMedia: _FigCFEqual
__ CoreMedia: _FigCFNumberGetSInt32
__ CoreMedia: _FigCFNumberGetUInt64
__ CoreMedia: _FigCFWeakReferenceDestroy
__ CoreMedia: _FigCFWeakReferenceHolderCopyReferencedObject
__ CoreMedia: _FigCFWeakReferenceHolderCreateWithReferencedObject
__ CoreMedia: _FigCFWeakReferenceLoadAndRetain
__ CoreMedia: _FigCFWeakReferenceStore
__ CoreMedia: _FigDispatchQueueCreateWithPriority
__ CoreMedia: _FigFileForkClose
__ CoreMedia: _FigFileWrapDarwinFileDesc
__ CoreMedia: _FigFormatDescriptionRelease
__ CoreMedia: _FigGetUpTime
__ CoreMedia: _FigHostTimeToNanoseconds
__ CoreMedia: _FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors
__ CoreMedia: _FigOSTransactionCreate
__ CoreMedia: _FigSampleBufferRelease
__ CoreMedia: _FigSampleBufferRetain
__ CoreMedia: _FigSandboxRegisterDirectoryURL
__ CoreMedia: _FigSandboxRegisterURL
__ CoreMedia: _FigSignalErrorAt2
__ CoreMedia: _FigThreadCreate
__ CoreMedia: _FigThreadJoin
__ CoreMedia: _kCMFormatDescriptionColorPrimaries_ITU_R_2020
__ CoreMedia: _kCMFormatDescriptionColorPrimaries_P3_D65
__ CoreMedia: _kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms
__ CoreMedia: _kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ
__ CoreMedia: _kCMFormatDescriptionYCbCrMatrix_ITU_R_2020
__ CoreMedia: _kCMMetadataBaseDataType_SInt8
__ CoreMedia: _kCMMetadataBaseDataType_UTF8
__ CoreMedia: _kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType
__ CoreMedia: _kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier
__ CoreMedia: _kCMMetadataIdentifier_QuickTimeMetadataDetectedFace
__ CoreMedia: _kCMMetadataKeySpace_QuickTimeMetadata
__ CoreMedia: _kCMSampleAttachmentKey_DependsOnOthers
__ CoreMedia: _kCMSampleAttachmentKey_EarlierDisplayTimesAllowed
__ CoreMedia: _kCMSampleAttachmentKey_NotSync
__ CoreMedia: _kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix
__ CoreMedia: _kCMTimeInvalid
__ CoreMedia: _kCMTimePositiveInfinity
__ CoreMedia: _kCMTimeZero
__ CoreMedia: _kCMTimingInfoInvalid
__ CoreMedia: _kFigMetadataIdentifier_QuickTimeMetadataStillImageTime
__ CoreMedia: _kFigThreadCreateKey_Identifier
__ CoreMedia: _kFigThreadCreateKey_MachTimeSharePolicy
__ CoreMotion: _OBJC_CLASS_$_CMMotionActivityManager
__ CoreTelephony: _CTRegistrationCopyOperatorName
__ CoreTelephony: _OBJC_CLASS_$_CTAudioCodecInfo
__ CoreTelephony: _OBJC_CLASS_$_CTBundle
__ CoreTelephony: _OBJC_CLASS_$_CTXPCServiceSubscriptionContext
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreTelephony: __CTServerConnectionCarrierSettingsCopyValue
__ CoreTelephony: __CTServerConnectionCopyAudioVocoderInfo
__ CoreTelephony: __CTServerConnectionCopyCurrentMTU
__ CoreTelephony: __CTServerConnectionCopyReliableNetworkFallbackSettings
__ CoreTelephony: __CTServerConnectionCreateOnTargetQueue
__ CoreTelephony: __CTServerConnectionCreateWithIdentifier
__ CoreTelephony: __CTServerConnectionDropIPPackets
__ CoreTelephony: __CTServerConnectionRegisterForNotification
__ CoreTelephony: __CTServerConnectionReleaseQOS
__ CoreTelephony: __CTServerConnectionRequestQOS
__ CoreTelephony: __CTServerConnectionSetPacketNotificationFilter
__ CoreTelephony: __CTServerConnectionUnregisterForNotification
__ CoreTelephony: __CTServerConnectionUpdateProtocolQualityOfService
__ CoreTelephony: _kCTAudioVocoderInfoNotification
__ CoreTelephony: _kCTAudioVocoderSampleRate
__ CoreTelephony: _kCTAudioVocoderType
__ CoreTelephony: _kCTAudioVocoderType4GVNB
__ CoreTelephony: _kCTAudioVocoderType4GVNW
__ CoreTelephony: _kCTAudioVocoderType4GVWB
__ CoreTelephony: _kCTAudioVocoderTypeAMR
__ CoreTelephony: _kCTAudioVocoderTypeEAMR
__ CoreTelephony: _kCTAudioVocoderTypeEFR
__ CoreTelephony: _kCTAudioVocoderTypeEVRC
__ CoreTelephony: _kCTAudioVocoderTypeEVRCB
__ CoreTelephony: _kCTAudioVocoderTypeEVS
__ CoreTelephony: _kCTAudioVocoderTypeFR
__ CoreTelephony: _kCTAudioVocoderTypeHR
__ CoreTelephony: _kCTAudioVocoderTypeQCELP13
__ CoreTelephony: _kCTAudioVocoderTypeWAMR
__ CoreTelephony: _kCTQaulityOfServiceFlowType
__ CoreTelephony: _kCTQualityOfServiceCallType
__ CoreTelephony: _kCTQualityOfServiceDestinationIP
__ CoreTelephony: _kCTQualityOfServiceDestinationPort
__ CoreTelephony: _kCTQualityOfServiceDropOperation
__ CoreTelephony: _kCTQualityOfServiceFamily
__ CoreTelephony: _kCTQualityOfServiceFamilyIPv4
__ CoreTelephony: _kCTQualityOfServiceFamilyIPv6
__ CoreTelephony: _kCTQualityOfServiceFlowAudio
__ CoreTelephony: _kCTQualityOfServiceFlowStatusChangeNotification
__ CoreTelephony: _kCTQualityOfServiceOffsetBytes
__ CoreTelephony: _kCTQualityOfServicePayloadType
__ CoreTelephony: _kCTQualityOfServiceSourceIP
__ CoreTelephony: _kCTQualityOfServiceSourcePort
__ CoreTelephony: _kCTQualityOfServiceTimestampValue
__ CoreTelephony: _kCTQualityOfServiceTransactionID
__ CoreTelephony: _kCTQualityOfServiceUniqueTag
__ CoreTelephony: _kCTRegistrationDataActive
__ CoreTelephony: _kCTRegistrationDataContextID
__ CoreTelephony: _kCTRegistrationDataIndicator
__ CoreTelephony: _kCTRegistrationDataStatusChangedNotification
__ CoreTelephony: _kCTReliableNetworkFallbackToCellularUserPreferenceKey
__ CoreText: _CTFontCreateWithName
__ CoreText: _CTFrameDraw
__ CoreText: _CTFramesetterCreateFrame
__ CoreText: _CTFramesetterCreateWithAttributedString
__ CoreText: _CTLineCreateWithAttributedString
__ CoreText: _CTLineDraw
__ CoreText: _kCTFontAttributeName
__ CoreText: _kCTForegroundColorAttributeName
__ CoreVideo: _CVBufferGetAttachment
__ CoreVideo: _CVBufferRelease
__ CoreVideo: _CVBufferRetain
__ CoreVideo: _CVBufferSetAttachment
__ CoreVideo: _CVPixelBufferCreate
__ CoreVideo: _CVPixelBufferCreateWithIOSurface
__ CoreVideo: _CVPixelBufferGetBaseAddress
__ CoreVideo: _CVPixelBufferGetBaseAddressOfPlane
__ CoreVideo: _CVPixelBufferGetBytesPerRow
__ CoreVideo: _CVPixelBufferGetBytesPerRowOfPlane
__ CoreVideo: _CVPixelBufferGetDataSize
__ CoreVideo: _CVPixelBufferGetHeight
__ CoreVideo: _CVPixelBufferGetHeightOfPlane
__ CoreVideo: _CVPixelBufferGetIOSurface
__ CoreVideo: _CVPixelBufferGetPixelFormatType
__ CoreVideo: _CVPixelBufferGetPlaneCount
__ CoreVideo: _CVPixelBufferGetTypeID
__ CoreVideo: _CVPixelBufferGetWidth
__ CoreVideo: _CVPixelBufferGetWidthOfPlane
__ CoreVideo: _CVPixelBufferIsPlanar
__ CoreVideo: _CVPixelBufferLockBaseAddress
__ CoreVideo: _CVPixelBufferPoolCreate
__ CoreVideo: _CVPixelBufferPoolCreatePixelBuffer
__ CoreVideo: _CVPixelBufferPoolGetPixelBufferAttributes
__ CoreVideo: _CVPixelBufferPoolRelease
__ CoreVideo: _CVPixelBufferRelease
__ CoreVideo: _CVPixelBufferRetain
__ CoreVideo: _CVPixelBufferUnlockBaseAddress
__ CoreVideo: _kCVImageBufferCleanApertureHeightKey
__ CoreVideo: _kCVImageBufferCleanApertureHorizontalOffsetKey
__ CoreVideo: _kCVImageBufferCleanApertureVerticalOffsetKey
__ CoreVideo: _kCVImageBufferCleanApertureWidthKey
__ CoreVideo: _kCVImageBufferColorPrimariesKey
__ CoreVideo: _kCVImageBufferColorPrimaries_EBU_3213
__ CoreVideo: _kCVImageBufferColorPrimaries_ITU_R_2020
__ CoreVideo: _kCVImageBufferColorPrimaries_ITU_R_709_2
__ CoreVideo: _kCVImageBufferColorPrimaries_P3_D65
__ CoreVideo: _kCVImageBufferColorPrimaries_SMPTE_C
__ CoreVideo: _kCVImageBufferTransferFunctionKey
__ CoreVideo: _kCVImageBufferTransferFunction_ITU_R_709_2
__ CoreVideo: _kCVImageBufferTransferFunction_SMPTE_240M_1995
__ CoreVideo: _kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ
__ CoreVideo: _kCVImageBufferYCbCrMatrixKey
__ CoreVideo: _kCVImageBufferYCbCrMatrix_IPT
__ CoreVideo: _kCVImageBufferYCbCrMatrix_ITU_R_2020
__ CoreVideo: _kCVImageBufferYCbCrMatrix_ITU_R_601_4
__ CoreVideo: _kCVImageBufferYCbCrMatrix_ITU_R_709_2
__ CoreVideo: _kCVImageBufferYCbCrMatrix_SMPTE_240M_1995
__ CoreVideo: _kCVPixelBufferHeightKey
__ CoreVideo: _kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey
__ CoreVideo: _kCVPixelBufferIOSurfacePropertiesKey
__ CoreVideo: _kCVPixelBufferMetalCompatibilityKey
__ CoreVideo: _kCVPixelBufferPixelFormatTypeKey
__ CoreVideo: _kCVPixelBufferPoolMaximumBufferAgeKey
__ CoreVideo: _kCVPixelBufferPoolMinimumBufferCountKey
__ CoreVideo: _kCVPixelBufferWidthKey
__ CrashReporterSupport: _WriteStackshotReport_stdc
__ FTServices: _FTServerBagFinishedLoadingNotification
__ FTServices: _OBJC_CLASS_$_FTServerBag
__ Foundation: _NSAllocateObject
__ Foundation: _NSClassFromString
__ Foundation: _NSFileModificationDate
__ Foundation: _NSFilePathErrorKey
__ Foundation: _NSFileSize
__ Foundation: _NSFileSystemFreeSize
__ Foundation: _NSFileType
__ Foundation: _NSFileTypeRegular
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSOpenStepRootDirectory
__ Foundation: _NSRectFromString
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSSizeFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromRect
__ Foundation: _NSStringFromSelector
__ Foundation: _NSStringFromSize
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSUserName
__ Foundation: _OBJC_CLASS_$_NSAutoreleasePool
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCondition
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDecimalNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRecursiveLock
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ ICE: _CelltechToStr
__ ICE: _FillSockAddrStorage
__ ICE: _FreeLocalInterfaceList
__ ICE: _FreeSTUNMessage
__ ICE: _Get80211BSSID
__ ICE: _GetConnectionTypeFromCellTech
__ ICE: _GetIPPortFromDict
__ ICE: _GetLocalIFFunctionalTypeForBoundSocket
__ ICE: _GetLocalIFIndexForDstIPPort
__ ICE: _GetLocalIFNameForBoundSocket
__ ICE: _GetLocalInterfaceListWithOptions
__ ICE: _GetLocalInterfaceListWithOptionsAndCellInterfaceName
__ ICE: _GetSTUNAttr
__ ICE: _ICEAddOneInterface
__ ICE: _ICEAddOneInterfaceWithPriorityHints
__ ICE: _ICEAddRemovedRemoteIPPort
__ ICE: _ICECloseHandle
__ ICE: _ICECompressCandidates
__ ICE: _ICEConnectionDataContainsCallID
__ ICE: _ICEConvertToNewCompression
__ ICE: _ICEConvertToOldCompression
__ ICE: _ICECreateHandleWithCallback
__ ICE: _ICEDiscardOneRelayBindingWithChannelNumber
__ ICE: _ICEDiscardRelayBinding
__ ICE: _ICEDiscardResult
__ ICE: _ICEGetCallInfoForConnectionData
__ ICE: _ICEGetCandidates
__ ICE: _ICEGetCellTech
__ ICE: _ICEGetConnErrorCode
__ ICE: _ICEGetExtIPIndex
__ ICE: _ICEGetExtIPPorts
__ ICE: _ICEGetNextBestCandidate
__ ICE: _ICEGetRemoteCIDForDstIPPort
__ ICE: _ICEGetRemoteICEVersion
__ ICE: _ICEInterfaceNeedsUpdateExternalMapping
__ ICE: _ICEProcessRemoteInterfaceChange
__ ICE: _ICERefreshAllRelayBinding
__ ICE: _ICERefreshRelayBinding
__ ICE: _ICERemoveOneInterface
__ ICE: _ICESetEnableLoopbackInterface
__ ICE: _ICESetForceIPv6
__ ICE: _ICESetForceRelay
__ ICE: _ICESetReportingAgent
__ ICE: _ICESetSKEState
__ ICE: _ICESetTimeout
__ ICE: _ICEStartConnectivityCheck
__ ICE: _ICEStopConnectivityCheck
__ ICE: _ICEUpdateCellTech
__ ICE: _ICEUpdateNAT64FlagForInterface
__ ICE: _ICEUpdateRole
__ ICE: _ICEUpdateServingNetworkInfo
__ ICE: _IPPORTToSA
__ ICE: _IPPORTToSA6
__ ICE: _IPPORTToStringWithSize
__ ICE: _IPToString
__ ICE: _InterpretAddressX
__ ICE: _IsConnectionDowngrading
__ ICE: _IsIPPORTValid
__ ICE: _IsSameAddressAndPort
__ ICE: _MakeAddressID
__ ICE: _MakeAllocateRequest
__ ICE: _MakeChannelBindRequest
__ ICE: _MakeIPPORT
__ ICE: _MakeIPPORTWithHostnameIPv4Only
__ ICE: _MakeRefreshRequest
__ ICE: _ParseSTUNMessage
__ ICE: _ProcessAllocateErrorResponse
__ ICE: _ProcessAllocateResponse
__ ICE: _ProcessChannelBindErrorResponse
__ ICE: _SAToIPPORT
__ ICE: _SAToIPPORTWithInterfaceIndexToNameCallback
__ ICE: _STUNEncodeMessage
__ ICE: _VCCTServiceMonitor_CopyConnectionStatusInterfaceName
__ ICE: _VCCTServiceMonitor_GetDataIndicatorStatus
__ ICE: _VCCTServiceMonitor_GetDataIndicatorStatusOverride
__ ICE: _VCCTServiceMonitor_GetIsInHomeCountry
__ ICE: _VCCTServiceMonitor_GetRadioAccessTechnology
__ ICE: _VCCTServiceMonitor_GetSignalStrength
__ IDS: _IDSDataChannelAllParticipantsKey
__ IDS: _IDSDataChannelBasebandNotificationOperationKey
__ IDS: _IDSDataChannelBasebandRegistrationKey
__ IDS: _IDSDataChannelCellularMTUChangedKey
__ IDS: _IDSDataChannelCellularSoMaskChangedKey
__ IDS: _IDSDataChannelConnectedLinkKey
__ IDS: _IDSDataChannelDefaultLinkKey
__ IDS: _IDSDataChannelDisconnectedLinkKey
__ IDS: _IDSDataChannelErrorDomain
__ IDS: _IDSDataChannelErrorKey
__ IDS: _IDSDataChannelEventCellularLocalAttributesChangedKey
__ IDS: _IDSDataChannelEventMembershipChangedReasonKey
__ IDS: _IDSDataChannelEventProbingResponseKey
__ IDS: _IDSDataChannelEventReportingBlobKey
__ IDS: _IDSDataChannelEventSessionInfoResponseKey
__ IDS: _IDSDataChannelEventTypeKey
__ IDS: _IDSDataChannelEventWiFiLocalAttributesChangedKey
__ IDS: _IDSDataChannelInfoReportEventsKey
__ IDS: _IDSDataChannelLinkIDKey
__ IDS: _IDSDataChannelLinkIDToQueryKey
__ IDS: _IDSDataChannelNoStreamsKey
__ IDS: _IDSDataChannelNumberReorderedPacketsKey
__ IDS: _IDSDataChannelNumberRequestsKey
__ IDS: _IDSDataChannelNumberResponseKey
__ IDS: _IDSDataChannelParticipantGenerationCounterKey
__ IDS: _IDSDataChannelPeerPublishedStreamsKey
__ IDS: _IDSDataChannelPeerSubscribedStreamsKey
__ IDS: _IDSDataChannelPreConnectionDataKey
__ IDS: _IDSDataChannelPreferenceBasebandQueueFlushKey
__ IDS: _IDSDataChannelPreferenceBasebandQueueFlushPayloadKey
__ IDS: _IDSDataChannelPreferenceBasebandRegistrationKey
__ IDS: _IDSDataChannelPreferenceDefaultLinkSelectionKey
__ IDS: _IDSDataChannelPreferenceDiscardLinkIDsKey
__ IDS: _IDSDataChannelPreferenceNeedsEncryptionInfoKey
__ IDS: _IDSDataChannelPreferencePreConnectionDataKey
__ IDS: _IDSDataChannelPreferenceRemoteDeviceVersionKey
__ IDS: _IDSDataChannelProbingAllLinksValue
__ IDS: _IDSDataChannelProbingIntervalKey
__ IDS: _IDSDataChannelProbingLinkIDsKey
__ IDS: _IDSDataChannelProbingRequestOffsetAndRTTKey
__ IDS: _IDSDataChannelProbingTimeoutKey
__ IDS: _IDSDataChannelPublishedStreamsKey
__ IDS: _IDSDataChannelQualityOfServiceDropOperationKey
__ IDS: _IDSDataChannelQualityOfServiceOffsetBytesKey
__ IDS: _IDSDataChannelQualityOfServicePayloadTypeKey
__ IDS: _IDSDataChannelQualityOfServiceTimestampValueKey
__ IDS: _IDSDataChannelQualityOfServiceTransactionIDKey
__ IDS: _IDSDataChannelRATChangedKey
__ IDS: _IDSDataChannelSessionInfoRequestBytesSentKey
__ IDS: _IDSDataChannelSessionInfoResponseBytesReceivedKey
__ IDS: _IDSDataChannelSubscribedStreamsKey
__ IDS: _IDSDataChannelTimeStampKey
__ IDS: _IDSDatagramChannelNWContextKey
__ IDS: _IDSDatagramChannelOperationModeKey
__ IDS: _IDSDatagramChannelPreferredDataPathKey
__ IDS: _IDSLinkScoreKey
__ IDS: _IDSLinkSuggestionKey
__ IDS: _IDSRealTimeEncryptionLocallyGenerated
__ IDS: _IDSRealTimeEncryptionMKI
__ IDS: _IDSRealTimeEncryptionMKM
__ IDS: _IDSRealTimeEncryptionMKS
__ IDS: _OBJC_CLASS_$_IDSDataChannelLinkContext
__ IDS: _OBJC_CLASS_$_IDSDatagramChannel
__ IDS: _OBJC_CLASS_$_IDSService
__ IDS: _OBJC_METACLASS_$_IDSDataChannelLinkContext
__ IDS: _OBJC_METACLASS_$_IDSDatagramChannel
__ IOKit: _IOIteratorNext
__ IOKit: _IOObjectConformsTo
__ IOKit: _IOObjectRelease
__ IOKit: _IORegistryCreateIterator
__ IOKit: _IORegistryEntrySearchCFProperty
__ IOKit: _IORegistryGetRootEntry
__ IOKit: _kIOMasterPortDefault
__ IOSurface: _IOSurfaceCreateXPCObject
__ IOSurface: _IOSurfaceGetID
__ IOSurface: _IOSurfaceGetIndexedTimestamp
__ IOSurface: _IOSurfaceLookupFromXPCObject
__ IOSurface: _kIOSurfaceBytesPerElement
__ IOSurface: _kIOSurfaceIsGlobal
__ IOSurface: _kIOSurfaceName
__ ImageIO: _CGImageDestinationAddImage
__ ImageIO: _CGImageDestinationCreateWithData
__ ImageIO: _CGImageDestinationFinalize
__ ImageIO: _kCGImageDestinationLossyCompressionQuality
__ ImageIO: _kCGImagePropertyDPIHeight
__ ImageIO: _kCGImagePropertyDPIWidth
__ ImageIO: _kCGImagePropertyExifDateTimeDigitized
__ ImageIO: _kCGImagePropertyExifDateTimeOriginal
__ ImageIO: _kCGImagePropertyExifDictionary
__ ImageIO: _kCGImagePropertyExifLensMake
__ ImageIO: _kCGImagePropertyExifLensModel
__ ImageIO: _kCGImagePropertyExifSubsecTimeDigitized
__ ImageIO: _kCGImagePropertyExifSubsecTimeOriginal
__ ImageIO: _kCGImagePropertyExifUserComment
__ ImageIO: _kCGImagePropertyMakerAppleDictionary
__ ImageIO: _kCGImagePropertyOrientation
__ ImageIO: _kCGImagePropertyTIFFDateTime
__ ImageIO: _kCGImagePropertyTIFFDictionary
__ ImageIO: _kCGImagePropertyTIFFMake
__ ImageIO: _kCGImagePropertyTIFFModel
__ ImageIO: _kCGImagePropertyTIFFResolutionUnit
__ ImageIO: _kCGImagePropertyTIFFXResolution
__ ImageIO: _kCGImagePropertyTIFFYResolution
__ LegacyHandle: _CheckInHandleDebug
__ LegacyHandle: _CheckOutHandleDebug
__ LegacyHandle: _CloseAllHandles
__ LegacyHandle: _CreateHandle
__ LegacyHandle: _FindHandle
__ MediaExperience: _CMSessionBeginInterruption
__ MediaExperience: _CMSessionCopyProperty
__ MediaExperience: _CMSessionEndInterruption
__ MediaExperience: _CMSessionNotificationBarrier
__ MediaExperience: _CMSessionSetProperty
__ MediaExperience: _kMXSessionAudioCategory_MediaPlayback
__ MediaExperience: _kMXSessionAudioCategory_PlayAndRecord_NoBluetooth
__ MediaExperience: _kMXSessionAudioMode_Default
__ MediaExperience: _kMXSessionAudioMode_Ibis
__ MediaExperience: _kMXSessionAudioMode_RemoteVoiceChat
__ MediaExperience: _kMXSessionAudioMode_VideoChat
__ MediaExperience: _kMXSessionAudioMode_VideoChatForMedia
__ MediaExperience: _kMXSessionAudioMode_VoiceChat
__ MediaExperience: _kMXSessionInterruptionInfoKey_InterruptionCmd
__ MediaExperience: _kMXSessionInterruptionInfoKey_InterruptionReason
__ MediaExperience: _kMXSessionNotification_AvailableSampleRatesDidChange
__ MediaExperience: _kMXSessionNotification_Interruption
__ MediaExperience: _kMXSessionProperty_AllowedRouteTypes
__ MediaExperience: _kMXSessionProperty_AudioCategory
__ MediaExperience: _kMXSessionProperty_AudioMode
__ MediaExperience: _kMXSessionProperty_ClientName
__ MediaExperience: _kMXSessionProperty_ClientPID
__ MediaExperience: _kMXSessionProperty_ClientPriority
__ MediaExperience: _kMXSessionProperty_CreateSpeakerDevice
__ MediaExperience: _kMXSessionProperty_CurrentAudioHardwareSampleRate
__ MediaExperience: _kMXSessionProperty_HostProcessAttribution
__ MediaExperience: _kMXSessionProperty_InitiationDescription
__ MediaExperience: _kMXSessionProperty_InterruptionStyle
__ MediaExperience: _kMXSessionProperty_IsExpanseCallSession
__ MediaExperience: _kMXSessionProperty_IsExpanseMediaSession
__ MediaExperience: _kMXSessionProperty_IsPlaying
__ MediaExperience: _kMXSessionProperty_IsSharePlayCapableCallSession
__ MediaExperience: _kMXSessionProperty_OverrideRoute
__ MediaExperience: _kMXSessionProperty_PreferredAudioHardwareIOBufferFrames
__ MediaExperience: _kMXSessionProperty_PreferredOutputSampleRate
__ MediaExperience: _kMXSessionProperty_PrefersToPlayDuringWombat
__ MediaExperience: _kMXSessionProperty_SelectableInputs
__ MediaExperience: _kMXSessionProperty_SelectedInputs
__ MediaExperience: _kMXSessionProperty_VPBlockConfiguration
__ MediaExperience: _kMXSession_DataSourceDescriptionKey_ID
__ MediaExperience: _kMXSession_DataSourceDescriptionKey_MicrophoneOrientation
__ MediaExperience: _kMXSession_DataSourceDescriptionKey_MicrophonePolarPatterns
__ MediaExperience: _kMXSession_RouteDetailedDescriptionKey_DataSources
__ MediaExperience: _kMXSession_RouteDetailedDescriptionKey_ID
__ MediaExperience: _kMXSession_RouteDetailedDescriptionKey_IsHeadphones
__ MediaExperience: _kMXSession_RouteDetailedDescriptionKey_Name
__ MediaExperience: _kMXSession_RouteDetailedDescriptionKey_PortType
__ MediaExperience: _kMXSession_SelectedRouteDescription_DataSourceID
__ MediaExperience: _kMXSession_SelectedRouteDescription_MicrophonePolarPattern
__ MediaExperience: _kMXSession_SelectedRouteDescription_RouteID
__ MediaToolbox: _FigAssetWriterCreateWithURL
__ MediaToolbox: _FigAssetWriterGetFigBaseObject
__ MediaToolbox: _FigCreate3x3MatrixArrayFromCGAffineTransform
__ MediaToolbox: _FigFormatWriterGetFigBaseObject
__ MediaToolbox: _FigImageQueueCreateForCoreAnimation
__ MediaToolbox: _FigImageQueueGetFigBaseObject
__ MediaToolbox: _FigMetadataRewriterDictionaryCreateFromFigMetadataPropertyArray
__ MediaToolbox: _FigMovieFormatWriterCreateWithByteStream
__ MediaToolbox: _FigRewriteMetadata
__ MediaToolbox: _FigVirtualDisplayProcessorCreate
__ MediaToolbox: _FigVirtualDisplayProcessorGetCMBaseObject
__ MediaToolbox: _FigVirtualDisplaySessionCreateWithComponents
__ MediaToolbox: _FigVirtualDisplaySinkConduitCreate
__ MediaToolbox: _FigVirtualDisplaySourceScreenGetCurrent
__ MediaToolbox: _OBJC_CLASS_$_FigScreenCaptureController
__ MediaToolbox: _kFigAssetWriterProperty_RealTime
__ MediaToolbox: _kFigAudioCompressionPreset_AAC_44kHz_Stereo_128kbit
__ MediaToolbox: _kFigFormatWriterProperty_MetadataToWrite
__ MediaToolbox: _kFigFormatWriterTrackProperty_InterleaveTrack
__ MediaToolbox: _kFigFormatWriterTrackProperty_MediaTimeScale
__ MediaToolbox: _kFigFormatWriterTrackProperty_TrackMatrix
__ MediaToolbox: _kFigImageBufferOriginHostTime
__ MediaToolbox: _kFigImageQueueProperty_Timebase
__ MediaToolbox: _kFigImageQueueProperty_UseLowLatencyModeForImmediateFrames
__ MediaToolbox: _kFigImageQueueProperty_VideoEnhancementMode
__ MediaToolbox: _kFigMetadataDataTypeNamespace_CoreMedia
__ MediaToolbox: _kFigMetadataFormat_QuickTimeMetadata
__ MediaToolbox: _kFigMetadataItemProperty_DataType
__ MediaToolbox: _kFigMetadataItemProperty_DataTypeNamespace
__ MediaToolbox: _kFigMetadataItemProperty_Key
__ MediaToolbox: _kFigMetadataItemProperty_Keyspace
__ MediaToolbox: _kFigMetadataItemProperty_Value
__ MediaToolbox: _kFigMetadataProperty_Format
__ MediaToolbox: _kFigMetadataProperty_Items
__ MediaToolbox: _kFigOriginToPresentationLatency_Count
__ MediaToolbox: _kFigOriginToPresentationLatency_Max
__ MediaToolbox: _kFigOriginToPresentationLatency_Mean
__ MediaToolbox: _kFigOriginToPresentationLatency_Min
__ MediaToolbox: _kFigQuickTimeMetadataKey_ContentIdentifier
__ MediaToolbox: _kFigQuickTimeMetadataKey_Keywords
__ MediaToolbox: _kFigVideoPerformanceKey_DisplayCountHistogram
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesDisplayedFromImageQueue
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesDroppedFromImageQueue
__ MediaToolbox: _kFigVirtualDisplayHDRMode_DoVi
__ MediaToolbox: _kFigVirtualDisplayHDRMode_HDR10
__ MediaToolbox: _kFigVirtualDisplayHDRMode_SDR
__ MediaToolbox: _kFigVirtualDisplayModeOption_HDRMode
__ MediaToolbox: _kFigVirtualDisplayOption_DefaultFramerate
__ MediaToolbox: _kFigVirtualDisplayOption_DefaultPixelFormat
__ MediaToolbox: _kFigVirtualDisplayOption_MaxTimesToReencodeIdleFrame
__ MediaToolbox: _kFigVirtualDisplayOption_MirroringRestrictions
__ MediaToolbox: _kFigVirtualDisplayOption_SceneID
__ MediaToolbox: _kFigVirtualDisplayOption_ScreenPriority
__ MediaToolbox: _kFigVirtualDisplayOption_ScreenRecording
__ MediaToolbox: _kFigVirtualDisplayOption_Usage
__ MediaToolbox: _kFigVirtualDisplaySinkDeviceInfoKey_DisplayName
__ MediaToolbox: _kFigVirtualDisplaySinkDeviceInfoKey_DisplaySizeInPixels
__ MediaToolbox: _kFigVirtualDisplaySinkDeviceInfoKey_HDRInfo
__ MediaToolbox: _kFigVirtualDisplaySinkOption_VSyncRate
__ MediaToolbox: _kFigVirtualDisplaySinkProperty_DeviceInfo
__ MediaToolbox: _kFigVirtualDisplayUsage_Uncompressed
__ MediaToolbox: _kFigVirtualDisplayUsage_UncompressedHDR
__ Network: _OBJC_CLASS_$_NWNetworkAgentRegistration
__ Network: __nw_parameters_configure_protocol_default_configuration
__ Network: __nw_parameters_configure_protocol_disable
__ Network: _nw_activity_activate
__ Network: _nw_activity_complete_with_reason
__ Network: _nw_activity_copy_xpc_token
__ Network: _nw_activity_create
__ Network: _nw_activity_create_from_xpc_token
__ Network: _nw_activity_is_activated
__ Network: _nw_activity_set_parent_activity
__ Network: _nw_connection_cancel
__ Network: _nw_connection_copy_current_path
__ Network: _nw_connection_copy_endpoint
__ Network: _nw_connection_copy_parameters
__ Network: _nw_connection_create
__ Network: _nw_connection_create_interface_status_monitor
__ Network: _nw_connection_create_with_client_id
__ Network: _nw_connection_create_with_connected_socket_and_parameters
__ Network: _nw_connection_get_connected_socket
__ Network: _nw_connection_read_multiple
__ Network: _nw_connection_send
__ Network: _nw_connection_set_queue
__ Network: _nw_connection_set_state_changed_handler
__ Network: _nw_connection_start
__ Network: _nw_content_context_create
__ Network: _nw_content_context_set_expiration_milliseconds
__ Network: _nw_content_context_set_packet_id
__ Network: _nw_context_activate
__ Network: _nw_context_create
__ Network: _nw_context_set_isolate_protocol_stack
__ Network: _nw_context_set_scheduling_mode
__ Network: _nw_endpoint_create_host
__ Network: _nw_endpoint_create_host_with_numeric_port
__ Network: _nw_endpoint_get_address
__ Network: _nw_endpoint_get_port
__ Network: _nw_interface_create_with_name
__ Network: _nw_interface_get_name
__ Network: _nw_interface_get_subtype
__ Network: _nw_interface_get_type
__ Network: _nw_interface_status_monitor_cancel
__ Network: _nw_interface_status_monitor_set_packet_event_handler
__ Network: _nw_interface_status_monitor_set_update_handler
__ Network: _nw_listener_cancel
__ Network: _nw_listener_create
__ Network: _nw_listener_get_port
__ Network: _nw_listener_set_event_handler
__ Network: _nw_listener_set_new_connection_handler
__ Network: _nw_listener_set_queue
__ Network: _nw_listener_start
__ Network: _nw_nat64_copy_prefixes_async
__ Network: _nw_nat64_synthesize_v6
__ Network: _nw_parameters_copy_default_protocol_stack
__ Network: _nw_parameters_copy_local_endpoint
__ Network: _nw_parameters_create
__ Network: _nw_parameters_create_legacy_tcp_socket
__ Network: _nw_parameters_create_secure_udp
__ Network: _nw_parameters_require_interface
__ Network: _nw_parameters_set_context
__ Network: _nw_parameters_set_delegated_unique_pid
__ Network: _nw_parameters_set_disable_listener_datapath
__ Network: _nw_parameters_set_local_endpoint
__ Network: _nw_parameters_set_required_interface_type
__ Network: _nw_parameters_set_reuse_local_address
__ Network: _nw_path_copy_interface
__ Network: _nw_path_create_evaluator_for_endpoint
__ Network: _nw_path_enumerate_interfaces
__ Network: _nw_path_evaluator_copy_path
__ Network: _nw_path_get_mtu
__ Network: _nw_protocol_stack_set_transport_protocol
__ Network: _nw_queue_context_target_dispatch_queue
__ Network: _nw_release
__ Network: _nw_retain
__ Network: _nw_udp_create_options
__ Network: _nw_udp_options_set_no_metadata
__ PrivacyAccounting: _OBJC_CLASS_$_PAAccessLogger
__ PrivacyAccounting: _OBJC_CLASS_$_PAApplication
__ PrivacyAccounting: _OBJC_CLASS_$_PAReplayKitAccess
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ QuartzCore: _CAImageQueueCollect
__ QuartzCore: _CAImageQueueCreate
__ QuartzCore: _CAImageQueueFlush
__ QuartzCore: _CAImageQueueSetFlags
__ QuartzCore: _CARenderServerIsRunning
__ QuartzCore: _CATransform3DEqualToTransform
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DMakeAffineTransform
__ QuartzCore: _CATransform3DMakeRotation
__ QuartzCore: _OBJC_CLASS_$_CAContext
__ QuartzCore: _OBJC_CLASS_$_CADisplay
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAFenceHandle
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CALayerHost
__ QuartzCore: _OBJC_CLASS_$_CATextLayer
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_METACLASS_$_CALayerHost
__ QuartzCore: _kCAAlignmentCenter
__ QuartzCore: _kCAGravityResizeAspect
__ QuartzCore: _kCAGravityResizeAspectFill
__ Security: _SSLClose
__ Security: _SSLGetSessionState
__ Security: _SSLHandshake
__ Security: _SSLRead
__ Security: _SSLSetCertificate
__ Security: _SSLSetClientSideAuthenticate
__ Security: _SSLSetConnection
__ Security: _SSLSetIOFuncs
__ Security: _SSLSetMaxDatagramRecordSize
__ Security: _SSLWrite
__ Security: _SecCertificateCopyCommonNames
__ Security: _SecCertificateCreateWithBytes
__ Security: _SecIdentityCopyCertificate
__ Security: _SecRandomCopyBytes
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateWithAuditToken
__ Security: __SSLDisposeContext
__ Security: __SSLNewDatagramContext
__ Security: __SSLSetTrustedRoots
__ Security: _kSecRandomDefault
__ SimpleKeyExchange: _SKEState_CopyBlobSync
__ SimpleKeyExchange: _SKEState_CopySecretKeySync
__ SimpleKeyExchange: _SKEState_Create
__ SimpleKeyExchange: _SKEState_Destroy
__ SimpleKeyExchange: _SKEState_Release
__ SimpleKeyExchange: _SKEState_SetBlob
__ SimpleKeyExchange: _SecKeyExchangeAbortSession
__ SimpleKeyExchange: _SecKeyExchangeCopyPeerCert
__ SimpleKeyExchange: _SecKeyExchangeCopySharedSecret
__ SimpleKeyExchange: _SecKeyExchangeGetPeerAbortReason
__ SimpleKeyExchange: _SecKeyExchangeGetPeerCertStatus
__ SimpleKeyExchange: _SecKeyExchangeNodeCreateAsInitiator
__ SimpleKeyExchange: _SecKeyExchangeNodeCreateAsResponder
__ SimpleKeyExchange: _SecKeyExchangeNodeRelease
__ SimpleKeyExchange: _SecKeyExchangeUpdate
__ SymptomPresentationFeed: _OBJC_CLASS_$_NWNetworkOfInterestManager
__ SystemConfiguration: _SCDynamicStoreCopyMultiple
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemStatus: _OBJC_CLASS_$_STDynamicActivityAttributionPublisher
__ TimeSync: _TSInvalidTime
__ TimeSync: _TSNullClockIdentifier
__ TimeSync: _TimeSyncClockCreateWithClockIdentifier
__ TimeSync: _TimeSyncClockDispose
__ TimeSync: _TimeSyncClockGetClockTimeAndGrandmasterIdentityLocalPortForHostTime
__ TimeSync: _TimeSyncClockGetHostTimeAndGrandmasterIdentityLocalPortForClockTime
__ ViceroyTrace: _OBJC_CLASS_$_TimingCollection
__ ViceroyTrace: _OBJC_CLASS_$_VCWeakObjectHolder
__ ViceroyTrace: _VCReporting_GetClientType
__ ViceroyTrace: _VCReporting_GetDynamicReportingModuleID
__ ViceroyTrace: _VCReporting_finalizeAggregation
__ ViceroyTrace: _VRTraceErrorLogLevelToCSTR
__ ViceroyTrace: _VRTraceGetErrorLogLevelForModule
__ ViceroyTrace: _VRTraceIsInternalOSInstalled
__ ViceroyTrace: _VRTraceIsOSFaultDisabled
__ ViceroyTrace: _VRTracePrintLoggingInfo
__ ViceroyTrace: _VRTraceReset
__ ViceroyTrace: _VRTraceSetErrorLogLevel
__ ViceroyTrace: _VRTraceVariable_
__ ViceroyTrace: _createAdaptiveLearningForAgent
__ ViceroyTrace: _gVRTraceErrorLogLevel
__ ViceroyTrace: _gVRTraceModuleFilterEnabled
__ ViceroyTrace: _gVRTraceOSLog
__ ViceroyTrace: _processGroupSymptoms
__ ViceroyTrace: _reportingAWDCallStart
__ ViceroyTrace: _reportingAdaptiveLearningStats
__ ViceroyTrace: _reportingAudioStreamEvent
__ ViceroyTrace: _reportingAudioStreamLogCallEnd
__ ViceroyTrace: _reportingAudioStreamLogCallStart
__ ViceroyTrace: _reportingAudioStreamLogMetricSample
__ ViceroyTrace: _reportingCacheModuleSpecificInfo
__ ViceroyTrace: _reportingCallEndError
__ ViceroyTrace: _reportingCancelLog
__ ViceroyTrace: _reportingClassSendMsgToServer
__ ViceroyTrace: _reportingConnecting
__ ViceroyTrace: _reportingConnectionType
__ ViceroyTrace: _reportingCreateAgent
__ ViceroyTrace: _reportingDefaultRealtimePeriod
__ ViceroyTrace: _reportingDisconnected
__ ViceroyTrace: _reportingEventWithAllowedClientType
__ ViceroyTrace: _reportingGenericEvent
__ ViceroyTrace: _reportingGetDefaults
__ ViceroyTrace: _reportingGetLearntBitrateForSegment
__ ViceroyTrace: _reportingGetUploadFlag
__ ViceroyTrace: _reportingHandoverResult
__ ViceroyTrace: _reportingInheritModuleSpecificInfoFromParent
__ ViceroyTrace: _reportingLocalAndRemoteInterface
__ ViceroyTrace: _reportingLog
__ ViceroyTrace: _reportingModeRoleTransportLog
__ ViceroyTrace: _reportingMomentEvents
__ ViceroyTrace: _reportingNoRemoteChanged
__ ViceroyTrace: _reportingPerfTimes
__ ViceroyTrace: _reportingRTXConfigEvent
__ ViceroyTrace: _reportingRegisterPeriodicTask
__ ViceroyTrace: _reportingRegisterPeriodicTaskOnQueue
__ ViceroyTrace: _reportingRegisterPeriodicTaskWeak
__ ViceroyTrace: _reportingRegisterSystemStats
__ ViceroyTrace: _reportingRemoteFrameSize
__ ViceroyTrace: _reportingSetAggregatorForClientType
__ ViceroyTrace: _reportingSetDigestKey
__ ViceroyTrace: _reportingSetNWActivityReportingEnabled
__ ViceroyTrace: _reportingSetPeriodicAggregationOccuredHandler
__ ViceroyTrace: _reportingSetUserInfo
__ ViceroyTrace: _reportingStartTimer
__ ViceroyTrace: _reportingStopTimer
__ ViceroyTrace: _reportingStreamGroupFromStreamGroupID
__ ViceroyTrace: _reportingSymptom
__ ViceroyTrace: _reportingSymptomSetCallback
__ ViceroyTrace: _reportingThermal
__ ViceroyTrace: _reportingTierLog
__ ViceroyTrace: _reportingUnregisterPeriodicTask
__ ViceroyTrace: _reportingUploadFileWithName
__ ViceroyTrace: _reportingVideoPaused
__ ViceroyTrace: _reportingVideoProp
__ ViceroyTrace: _reportingVideoStreamEvent
__ ViceroyTrace: _reportingVisualRectangle
__ ViceroyTrace: _sRTCReportingAdaptiveLearningAdaptiveLearningA
__ ViceroyTrace: _sRTCReportingAdaptiveLearningAdaptiveLearningB
__ ViceroyTrace: _sRTCReportingAdaptiveLearningAdjustmentFactorA
__ ViceroyTrace: _sRTCReportingAdaptiveLearningAdjustmentFactorB
__ ViceroyTrace: _sRTCReportingAdaptiveLearningAdjustmentFactorC
__ ViceroyTrace: _sRTCReportingAdaptiveLearningLongTermHistoryLength
__ ViceroyTrace: _sRTCReportingAdaptiveLearningLongTermValueWeightA
__ ViceroyTrace: _sRTCReportingAdaptiveLearningLongTermValueWeightB
__ ViceroyTrace: _sRTCReportingAdaptiveLearningLongTermValueWeightC
__ ViceroyTrace: _sRTCReportingAdaptiveLearningShortTermHistoryLength
__ ViceroyTrace: _sRTCReportingAdaptiveLearningShortTermValueWeightA
__ ViceroyTrace: _sRTCReportingAdaptiveLearningShortTermValueWeightB
__ ViceroyTrace: _sRTCReportingAdaptiveLearningShortTermValueWeightC
__ ViceroyTrace: _sRTCReportingAdaptiveLearningState
__ ViceroyTrace: _sRTCReportingAirPlayClientName
__ ViceroyTrace: _sRTCReportingFaceTimeClientName
__ ViceroyTrace: _sRTCReportingFaceTimeServiceName
__ ViceroyTrace: _sRTCReportingHomeKitClientName
__ ViceroyTrace: _sRTCReportingMultiwayConferenceClientName
__ ViceroyTrace: _sRTCReportingRemoteCameraClientName
__ ViceroyTrace: _sRTCReportingRemoteMicClientName
__ ViceroyTrace: _sRTCReportingSecondaryDisplayClientName
__ ViceroyTrace: _sRTCReportingWiFiCallingClientName
__ ViceroyTrace: _selectDestinationForRTMetrics
__ VideoProcessing: _VCPCodecGetProperties
__ VideoProcessing: _VCPCompressionSessionCreate
__ VideoProcessing: _VCPCompressionSessionEncodeFrame
__ VideoProcessing: _VCPCompressionSessionGetPixelBufferPool
__ VideoProcessing: _VCPCompressionSessionInvalidate
__ VideoProcessing: _VCPCompressionSessionSetProperty
__ VideoProcessing: _VCPDecompressionSessionCheckIfLastSubFrame
__ VideoProcessing: _VCPDecompressionSessionCopyProperty
__ VideoProcessing: _VCPDecompressionSessionCreate
__ VideoProcessing: _VCPDecompressionSessionDecodeFrame
__ VideoProcessing: _VCPDecompressionSessionInvalidate
__ VideoProcessing: _VCPDecompressionSessionSetProperty
__ VideoProcessing: _VCPDecompressionSessionWaitForAsynchronousFrames
__ VideoProcessing: _VCPParseConfigurationRecordAndCreateParameterSets
__ VideoProcessing: _VCPParseParameterSetsAndCreateConfigurationRecord
__ VideoProcessing: _VCPReadCodecConfigParams
__ VideoProcessing: _VCPReadHEVCSliceHeader
__ VideoProcessing: _VPModuleInitialize
__ VideoToolbox: _VTCompressionSessionCompleteFrames
__ VideoToolbox: _VTCompressionSessionCreate
__ VideoToolbox: _VTCompressionSessionEncodeFrame
__ VideoToolbox: _VTCompressionSessionEncodeFrameWithOutputHandler
__ VideoToolbox: _VTCompressionSessionInvalidate
__ VideoToolbox: _VTDecompressionSessionCanAcceptFormatDescription
__ VideoToolbox: _VTDecompressionSessionCreate
__ VideoToolbox: _VTDecompressionSessionDecodeFrame
__ VideoToolbox: _VTDecompressionSessionInvalidate
__ VideoToolbox: _VTDecompressionSessionWaitForAsynchronousFrames
__ VideoToolbox: _VTImageRotationSessionCreate
__ VideoToolbox: _VTImageRotationSessionInvalidate
__ VideoToolbox: _VTImageRotationSessionRelease
__ VideoToolbox: _VTImageRotationSessionSetProperty
__ VideoToolbox: _VTImageRotationSessionTransferImage
__ VideoToolbox: _VTPixelTransferSessionCreate
__ VideoToolbox: _VTPixelTransferSessionInvalidate
__ VideoToolbox: _VTPixelTransferSessionTransferImage
__ VideoToolbox: _VTSessionSetProperty
__ VideoToolbox: _kVTCompressionPropertyKey_AllowFrameReordering
__ VideoToolbox: _kVTCompressionPropertyKey_AllowTemporalCompression
__ VideoToolbox: _kVTCompressionPropertyKey_AverageBitRate
__ VideoToolbox: _kVTCompressionPropertyKey_ColorPrimaries
__ VideoToolbox: _kVTCompressionPropertyKey_ConnectionID
__ VideoToolbox: _kVTCompressionPropertyKey_DataRateLimits
__ VideoToolbox: _kVTCompressionPropertyKey_ExpectedFrameRate
__ VideoToolbox: _kVTCompressionPropertyKey_H264EntropyMode
__ VideoToolbox: _kVTCompressionPropertyKey_HDRMetadataInsertionMode
__ VideoToolbox: _kVTCompressionPropertyKey_MaxKeyFrameInterval
__ VideoToolbox: _kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration
__ VideoToolbox: _kVTCompressionPropertyKey_NegotiationDetails
__ VideoToolbox: _kVTCompressionPropertyKey_NumberOfTemporalLayers
__ VideoToolbox: _kVTCompressionPropertyKey_PixelTransferProperties
__ VideoToolbox: _kVTCompressionPropertyKey_Priority
__ VideoToolbox: _kVTCompressionPropertyKey_ProfileLevel
__ VideoToolbox: _kVTCompressionPropertyKey_RealTime
__ VideoToolbox: _kVTCompressionPropertyKey_RequestedMaxEncoderLatency
__ VideoToolbox: _kVTCompressionPropertyKey_TransferFunction
__ VideoToolbox: _kVTCompressionPropertyKey_Usage
__ VideoToolbox: _kVTCompressionPropertyKey_YCbCrMatrix
__ VideoToolbox: _kVTCompressionSessionOption_AllowClientProcessEncode
__ VideoToolbox: _kVTDecompressionPropertyKey_PixelBufferPool
__ VideoToolbox: _kVTDecompressionPropertyKey_Usage
__ VideoToolbox: _kVTDecompressionSessionOption_AllowClientProcessDecode
__ VideoToolbox: _kVTEncodeFrameOptionKey_AcknowledgedTokens
__ VideoToolbox: _kVTEncodeFrameOptionKey_FECNumBitsAdded
__ VideoToolbox: _kVTEncodeFrameOptionKey_FirstMbInDuplicateSlices
__ VideoToolbox: _kVTEncodeFrameOptionKey_FirstMbInRecvSlices
__ VideoToolbox: _kVTEncodeFrameOptionKey_FirstMbInSkipSlices
__ VideoToolbox: _kVTEncodeFrameOptionKey_ForceKeyFrame
__ VideoToolbox: _kVTEncodeFrameOptionKey_LimitFrameSize
__ VideoToolbox: _kVTEncodeFrameOptionKey_PacketHeaderBitsAdded
__ VideoToolbox: _kVTEncodeFrameOptionKey_RepeatedFrame
__ VideoToolbox: _kVTEncodeFrameOptionKey_RoundTripDelay
__ VideoToolbox: _kVTEncodeFrameOptionKey_VisibleRectangle
__ VideoToolbox: _kVTH264EntropyMode_CABAC
__ VideoToolbox: _kVTHDRMetadataInsertionMode_Auto
__ VideoToolbox: _kVTImageBufferVisibleRectangleKey
__ VideoToolbox: _kVTImageRotationPropertyKey_FlipHorizontalOrientation
__ VideoToolbox: _kVTImageRotationPropertyKey_FlipVerticalOrientation
__ VideoToolbox: _kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer
__ VideoToolbox: _kVTPixelTransferPropertyKey_ScalingMode
__ VideoToolbox: _kVTProfileLevel_H264_ConstrainedBaseline_AutoLevel
__ VideoToolbox: _kVTProfileLevel_H264_High_AutoLevel
__ VideoToolbox: _kVTProfileLevel_H264_Main_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Main44410_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Main444_AutoLevel
__ VideoToolbox: _kVTProfileLevel_HEVC_Main_AutoLevel
__ VideoToolbox: _kVTSampleAttachmentKey_PadByteCount
__ VideoToolbox: _kVTSampleAttachmentKey_ReferenceWasRefreshed
__ VideoToolbox: _kVTSampleAttachmentKey_RequireAcknowledgementToken
__ VideoToolbox: _kVTSampleAttachmentQualityMetricsKey_AverageQp
__ VideoToolbox: _kVTSampleAttachmentQualityMetricsKey_EncodingFrameRate
__ VideoToolbox: _kVTSampleAttachmentQualityMetricsKey_RecommendedFrameRate
__ VideoToolbox: _kVTScalingMode_Letterbox
__ VideoToolbox: _kVTScalingMode_Trim
__ VideoToolbox: _kVTVideoDecoderSpecification_CMSession
__ VideoToolbox: _kVTVideoEncoderSpecification_CMSession
__ WirelessCoexManager: _WCMEnabled
__ libCTGreenTeaLogger.dylib: _ct_green_tea_logger_create_static
__ libCTGreenTeaLogger.dylib: _getCTGreenTeaOsLogHandle
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetFloat32Answer
__ libMobileGestalt.dylib: _MGGetProductType
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libMobileGestalt.dylib: _MGGetSInt64Answer
__ libSystem.B.dylib: _APP_SANDBOX_READ_WRITE
__ libSystem.B.dylib: _CCCrypt
__ libSystem.B.dylib: _CCCryptorCreateWithMode
__ libSystem.B.dylib: _CCCryptorRelease
__ libSystem.B.dylib: _CCCryptorReset
__ libSystem.B.dylib: _CCCryptorUpdate
__ libSystem.B.dylib: _CCHmac
__ libSystem.B.dylib: _CCHmacFinal
__ libSystem.B.dylib: _CCHmacInit
__ libSystem.B.dylib: _CCHmacUpdate
__ libSystem.B.dylib: _CCKeyDerivationHMac
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Init
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _OSAtomicDequeue
__ libSystem.B.dylib: _OSAtomicEnqueue
__ libSystem.B.dylib: _SANDBOX_EXTENSION_DEFAULT
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __DefaultRuneLocale
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___darwin_check_fd_set_overflow
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___exp10
__ libSystem.B.dylib: ___maskrune
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___sprintf_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcat_chk
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: ___strncpy_chk
__ libSystem.B.dylib: ___tolower
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __dispatch_source_type_signal
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dispatch_source_type_write
__ libSystem.B.dylib: __os_activity_label_useraction
__ libSystem.B.dylib: __os_activity_set_breadcrumb
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_nospin_lock_lock
__ libSystem.B.dylib: __os_nospin_lock_unlock
__ libSystem.B.dylib: __set_user_dir_suffix
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_type_connection
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_uuid
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _asprintf
__ libSystem.B.dylib: _atoi
__ libSystem.B.dylib: _bind
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _ccDRBGGetRngState
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _confstr
__ libSystem.B.dylib: _connect
__ libSystem.B.dylib: _cos
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_apply
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_data_apply
__ libSystem.B.dylib: _dispatch_data_create
__ libSystem.B.dylib: _dispatch_get_current_queue
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_once_f
__ libSystem.B.dylib: _dispatch_pthread_root_queue_create
__ libSystem.B.dylib: _dispatch_queue_attr_make_initially_inactive
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_context
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler_f
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_source_testcancel
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dlclose
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dup
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _expf
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _feof
__ libSystem.B.dylib: _ferror
__ libSystem.B.dylib: _fflush
__ libSystem.B.dylib: _fgetc
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _fputs
__ libSystem.B.dylib: _fread
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeaddrinfo
__ libSystem.B.dylib: _fseek
__ libSystem.B.dylib: _fseeko
__ libSystem.B.dylib: _ftell
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _getaddrinfo
__ libSystem.B.dylib: _getlogin
__ libSystem.B.dylib: _getpeername
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getsockname
__ libSystem.B.dylib: _getsockopt
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _host_info
__ libSystem.B.dylib: _if_indextoname
__ libSystem.B.dylib: _if_nametoindex
__ libSystem.B.dylib: _in6addr_any
__ libSystem.B.dylib: _inet_addr
__ libSystem.B.dylib: _inet_aton
__ libSystem.B.dylib: _inet_ntop
__ libSystem.B.dylib: _ioctl
__ libSystem.B.dylib: _kOSThermalNotificationPressureLevelName
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _kill
__ libSystem.B.dylib: _localtime
__ libSystem.B.dylib: _localtime_r
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _log10f
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_host_self
__ libSystem.B.dylib: _mach_thread_self
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _matrix_identity_float3x3
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _memset_pattern16
__ libSystem.B.dylib: _memset_pattern4
__ libSystem.B.dylib: _mkdir
__ libSystem.B.dylib: _mkpath_np
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _nwi_ifstate_get_flags
__ libSystem.B.dylib: _nwi_state_copy
__ libSystem.B.dylib: _nwi_state_get_ifstate
__ libSystem.B.dylib: _nwi_state_get_notify_key
__ libSystem.B.dylib: _nwi_state_release
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _perror
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _printf
__ libSystem.B.dylib: _proc_name
__ libSystem.B.dylib: _proc_pid_rusage
__ libSystem.B.dylib: _proc_pidinfo
__ libSystem.B.dylib: _proc_setthread_cpupercent
__ libSystem.B.dylib: _pthread_attr_destroy
__ libSystem.B.dylib: _pthread_attr_getschedparam
__ libSystem.B.dylib: _pthread_attr_init
__ libSystem.B.dylib: _pthread_attr_setdetachstate
__ libSystem.B.dylib: _pthread_attr_setschedparam
__ libSystem.B.dylib: _pthread_attr_setschedpolicy
__ libSystem.B.dylib: _pthread_attr_setscope
__ libSystem.B.dylib: _pthread_cond_broadcast
__ libSystem.B.dylib: _pthread_cond_destroy
__ libSystem.B.dylib: _pthread_cond_init
__ libSystem.B.dylib: _pthread_cond_signal
__ libSystem.B.dylib: _pthread_cond_timedwait
__ libSystem.B.dylib: _pthread_cond_timedwait_relative_np
__ libSystem.B.dylib: _pthread_cond_wait
__ libSystem.B.dylib: _pthread_create
__ libSystem.B.dylib: _pthread_getschedparam
__ libSystem.B.dylib: _pthread_join
__ libSystem.B.dylib: _pthread_mach_thread_np
__ libSystem.B.dylib: _pthread_mutex_destroy
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_trylock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_mutexattr_destroy
__ libSystem.B.dylib: _pthread_mutexattr_init
__ libSystem.B.dylib: _pthread_mutexattr_settype
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_tryrdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _pthread_self
__ libSystem.B.dylib: _pthread_set_fixedpriority_self
__ libSystem.B.dylib: _pthread_setname_np
__ libSystem.B.dylib: _pthread_setschedparam
__ libSystem.B.dylib: _qsort
__ libSystem.B.dylib: _read
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _realpath$DARWIN_EXTSN
__ libSystem.B.dylib: _recv
__ libSystem.B.dylib: _recvfrom
__ libSystem.B.dylib: _recvmsg
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_issue_file
__ libSystem.B.dylib: _sandbox_extension_release
__ libSystem.B.dylib: _sched_get_priority_max
__ libSystem.B.dylib: _sched_get_priority_min
__ libSystem.B.dylib: _select
__ libSystem.B.dylib: _send
__ libSystem.B.dylib: _sendmsg
__ libSystem.B.dylib: _sendto
__ libSystem.B.dylib: _setlocale
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _signal
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _sleep
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: _sprintf
__ libSystem.B.dylib: _srand
__ libSystem.B.dylib: _srandomdev
__ libSystem.B.dylib: _sscanf
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _strcasecmp
__ libSystem.B.dylib: _strchr
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strdup
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strftime
__ libSystem.B.dylib: _strlcat
__ libSystem.B.dylib: _strlcpy
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncasecmp
__ libSystem.B.dylib: _strncat
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _strncpy
__ libSystem.B.dylib: _strndup
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _strnstr
__ libSystem.B.dylib: _strstr
__ libSystem.B.dylib: _strtok_r
__ libSystem.B.dylib: _strtol
__ libSystem.B.dylib: _strtoul
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _tan
__ libSystem.B.dylib: _thread_policy_set
__ libSystem.B.dylib: _time
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: _uuid_clear
__ libSystem.B.dylib: _uuid_copy
__ libSystem.B.dylib: _uuid_is_null
__ libSystem.B.dylib: _uuid_unparse
__ libSystem.B.dylib: _vasprintf
__ libSystem.B.dylib: _vfprintf
__ libSystem.B.dylib: _vsnprintf
__ libSystem.B.dylib: _write
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_array_get_count
__ libSystem.B.dylib: _xpc_array_get_value
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_get_audit_token
__ libSystem.B.dylib: _xpc_connection_get_pid
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_get_bytes
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_create_reply
__ libSystem.B.dylib: _xpc_dictionary_dup_fd
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_fd
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_int64_create
__ libSystem.B.dylib: _xpc_release
__ libSystem.B.dylib: _xpc_retain
__ libSystem.B.dylib: _xpc_set_event
__ libSystem.B.dylib: _xpc_set_event_stream_handler
__ libSystem.B.dylib: _xpc_uint64_create
__ libSystem.B.dylib: _xpc_uuid_create
__ libSystem.B.dylib: _xpc_uuid_get_bytes
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___gxx_personality_v0
__ libcoretls.dylib: _tls_record_advance_read_cipher
__ libcoretls.dylib: _tls_record_advance_write_cipher
__ libcoretls.dylib: _tls_record_create
__ libcoretls.dylib: _tls_record_decrypt
__ libcoretls.dylib: _tls_record_decrypted_size
__ libcoretls.dylib: _tls_record_destroy
__ libcoretls.dylib: _tls_record_encrypt
__ libcoretls.dylib: _tls_record_encrypted_size
__ libcoretls.dylib: _tls_record_init_pending_ciphers
__ libcoretls.dylib: _tls_record_set_protocol_version
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_getName
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_loadWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x2
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _protocol_copyMethodDescriptionList
__ libobjc.A.dylib: _sel_getName
__ libz.1.dylib: _crc32
__ libz.1.dylib: _deflate
__ libz.1.dylib: _deflateEnd
__ libz.1.dylib: _deflateInit2_
__ libz.1.dylib: _inflate
__ libz.1.dylib: _inflateEnd
__ libz.1.dylib: _inflateInit2_
__ snatmap: _GetSNATMAPServer
VCMediaNegotiatorV2 : VCMediaNegotiatorBase
  // class methods
  +[VCMediaNegotiatorV2 newCompressedBlob:]
  +[VCMediaNegotiatorV2 newDecompressedBlob:]
  +[VCMediaNegotiatorV2 newUnserializedMediaBlob:]
  +[VCMediaNegotiatorV2 initializeLocalConfiguration:negotiationData:deviceRole:preferredAudioPayload:]
  +[VCMediaNegotiatorV2 dumpRemoteNegotiationData:forceFileDump:]
  +[VCMediaNegotiatorV2 capabilitiesWithMomentSettings:]
  +[VCMediaNegotiatorV2 streamGroupIDsWithMediaBlob:]

  // instance methods
  -[VCMediaNegotiatorV2 negotiationData]
  -[VCMediaNegotiatorV2 processRemoteNegotiationData:]
  -[VCMediaNegotiatorV2 remoteMaxBandwidthForOperatingMode:connectionType:]
  -[VCMediaNegotiatorV2 appendGeneralInfoToMediaBlob:]
  -[VCMediaNegotiatorV2 appendBandwidthSettingsToMediaBlob:]
  -[VCMediaNegotiatorV2 appendCodecFeaturesToMediaBlob:]
  -[VCMediaNegotiatorV2 appendMicrophoneOneToOneSettingsToMediaBlob:]
  -[VCMediaNegotiatorV2 appendCameraOneToOneSettingsToMediaBlob:]
  -[VCMediaNegotiatorV2 appendMomentsSettingsToMediaBlob:]
  -[VCMediaNegotiatorV2 appendStreamGroupsToMediaBlob:]
  -[VCMediaNegotiatorV2 setupNegotiatedResultsWithRemoteMediaBlob:]
  -[VCMediaNegotiatorV2 setupNegotiatedAudioPayloadsWithRemoteMediaBlob:]
  -[VCMediaNegotiatorV2 setupNegotiatedAudioResultsWithRemoteMediaBlob:]
  -[VCMediaNegotiatorV2 negotiateVideoMaxResolutionWithEncodeRules:decodeRules:isEncoder:]
  -[VCMediaNegotiatorV2 applyCellularPreferredRule:]
  -[VCMediaNegotiatorV2 selectBestDecodeVideoRuleForTransport:payload:remoteVideoRuleCollection:]
  -[VCMediaNegotiatorV2 selectBestVideoRuleForTransport:payload:encodingType:remoteVideoRuleCollection:]
  -[VCMediaNegotiatorV2 remoteFeatureStringWithRemoteMediaBlob:]
  -[VCMediaNegotiatorV2 setupNegotiatedVideoSettingsWithRemoteMediaBlob:]
  -[VCMediaNegotiatorV2 setupNegotiatedMomentsResultsWithRemoteMediaBlob:]
  -[VCMediaNegotiatorV2 negotiateStreamGroupConfig:]
  -[VCMediaNegotiatorV2 setupStreamGroupsWithRemoteMediaBlob:]
  -[VCMediaNegotiatorV2 setupNegotiatedFaceTimeSettingsWithRemoteMediaBlob:]


VCMediaNegotiationBlobMultiwayVideoStream : PBCodable <NSCopying>
 @property  BOOL isSubStream
 @property  unsigned int ssrc
 @property  BOOL hasMaxNetworkBitrate
 @property  unsigned int maxNetworkBitrate
 @property  unsigned int payload
 @property  unsigned int streamID
 @property  BOOL hasMetadata
 @property  unsigned int metadata
 @property  unsigned int qualityIndex
 @property  unsigned int supportedVideoFormats
 @property  unsigned int frameRate
 @property  unsigned int keyFrameInterval
 @property  BOOL hasMaxMediaBitrate
 @property  unsigned int maxMediaBitrate
 @property  BOOL hasMaxPacketsPerSecond
 @property  unsigned int maxPacketsPerSecond
 @property  BOOL hasRepairedStreamID
 @property  unsigned int repairedStreamID
 @property  BOOL hasRepairedMaxNetworkBitrate
 @property  unsigned int repairedMaxNetworkBitrate

  // class methods
  +[VCMediaNegotiationBlobMultiwayVideoStream videoFormatForWidth:height:]
  +[VCMediaNegotiationBlobMultiwayVideoStream convertVideoFormat:width:height:]
  +[VCMediaNegotiationBlobMultiwayVideoStream videoPayloadForPayload:]
  +[VCMediaNegotiationBlobMultiwayVideoStream payloadForVideoPayload:]

  // instance methods
  -[VCMediaNegotiationBlobMultiwayVideoStream hasMetadata]
  -[VCMediaNegotiationBlobMultiwayVideoStream setPayload:]
  -[VCMediaNegotiationBlobMultiwayVideoStream copyTo:]
  -[VCMediaNegotiationBlobMultiwayVideoStream supportedVideoFormats]
  -[VCMediaNegotiationBlobMultiwayVideoStream streamID]
  -[VCMediaNegotiationBlobMultiwayVideoStream payload]
  -[VCMediaNegotiationBlobMultiwayVideoStream frameRate]
  -[VCMediaNegotiationBlobMultiwayVideoStream mergeFrom:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setMetadata:]
  -[VCMediaNegotiationBlobMultiwayVideoStream dictionaryRepresentation]
  -[VCMediaNegotiationBlobMultiwayVideoStream copyWithZone:]
  -[VCMediaNegotiationBlobMultiwayVideoStream readFrom:]
  -[VCMediaNegotiationBlobMultiwayVideoStream metadata]
  -[VCMediaNegotiationBlobMultiwayVideoStream setFrameRate:]
  -[VCMediaNegotiationBlobMultiwayVideoStream writeTo:]
  -[VCMediaNegotiationBlobMultiwayVideoStream isEqual:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setStreamID:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setHasMetadata:]
  -[VCMediaNegotiationBlobMultiwayVideoStream keyFrameInterval]
  -[VCMediaNegotiationBlobMultiwayVideoStream setMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setHasMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayVideoStream hasMaxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayVideoStream setMaxMediaBitrate:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setHasMaxMediaBitrate:]
  -[VCMediaNegotiationBlobMultiwayVideoStream hasMaxMediaBitrate]
  -[VCMediaNegotiationBlobMultiwayVideoStream setMaxPacketsPerSecond:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setHasMaxPacketsPerSecond:]
  -[VCMediaNegotiationBlobMultiwayVideoStream hasMaxPacketsPerSecond]
  -[VCMediaNegotiationBlobMultiwayVideoStream setRepairedStreamID:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setHasRepairedStreamID:]
  -[VCMediaNegotiationBlobMultiwayVideoStream hasRepairedStreamID]
  -[VCMediaNegotiationBlobMultiwayVideoStream setRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setHasRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayVideoStream hasRepairedMaxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayVideoStream ssrc]
  -[VCMediaNegotiationBlobMultiwayVideoStream setSsrc:]
  -[VCMediaNegotiationBlobMultiwayVideoStream maxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayVideoStream qualityIndex]
  -[VCMediaNegotiationBlobMultiwayVideoStream setQualityIndex:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setSupportedVideoFormats:]
  -[VCMediaNegotiationBlobMultiwayVideoStream setKeyFrameInterval:]
  -[VCMediaNegotiationBlobMultiwayVideoStream maxMediaBitrate]
  -[VCMediaNegotiationBlobMultiwayVideoStream maxPacketsPerSecond]
  -[VCMediaNegotiationBlobMultiwayVideoStream repairedStreamID]
  -[VCMediaNegotiationBlobMultiwayVideoStream repairedMaxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayVideoStream isSubStream]
  -[VCMediaNegotiationBlobMultiwayVideoStream printWithLogFile:]
  -[VCMediaNegotiationBlobMultiwayVideoStream initWithStreamConfig:]
  -[VCMediaNegotiationBlobMultiwayVideoStream newMultiwayVideoStream]


VCAudioManager : VCObject <VCAudioIOControllerControl, VCAudioSessionDelegate>
 @property  VCAudioSessionMediaProperties *currentAudioSessionMediaProperties
 @property  VCAudioUnitProperties *currentAudioUnitProperties
 @property  NSDictionary *vpOperatingModeToAudioSessionMediaFormatMapping
 @property  AVAudioDevice *currentInputDevice
 @property  AVAudioDevice *currentOutputDevice
 @property  BOOL microphoneMuted
 @property  BOOL mixingVoiceWithMediaEnabled
 @property  BOOL isInDaemon
 @property  BOOL isGKVoiceChat
 @property  BOOL speakerPhoneEnabled
 @property  ^{_VCAudioIOControllerIOState=BdIIdQ{_VCSingleLinkedList=^{_VCSingleLinkedListEntry}B^?Q}^{opaqueCMSimpleQueue}^{opaqueVCAudioLimiter}^{opaqueVCAudioBufferList}^{opaqueVCAudioBufferList}I[40c]} sinkIO
 @property  ^{_VCAudioIOControllerIOState=BdIIdQ{_VCSingleLinkedList=^{_VCSingleLinkedListEntry}B^?Q}^{opaqueCMSimpleQueue}^{opaqueVCAudioLimiter}^{opaqueVCAudioBufferList}^{opaqueVCAudioBufferList}I[40c]} sourceIO
 @property  NSDictionary *reportingStats
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioManager sharedVoiceChatInstance]
  +[VCAudioManager sharedSystemAudioInstance]
  +[VCAudioManager audioSessionForMode:]
  +[VCAudioManager sessionFormatForSampleRate:]

  // instance methods
  -[VCAudioManager retain]
  -[VCAudioManager removeClient:]
  -[VCAudioManager addClient:]
  -[VCAudioManager dealloc]
  -[VCAudioManager release]
  -[VCAudioManager currentOutputDevice]
  -[VCAudioManager currentInputDevice]
  -[VCAudioManager copyWithZone:]
  -[VCAudioManager setCurrentOutputDevice:]
  -[VCAudioManager retainCount]
  -[VCAudioManager setCurrentInputDevice:]
  -[VCAudioManager autorelease]
  -[VCAudioManager setMixingVoiceWithMediaEnabled:]
  -[VCAudioManager setMediaPlaybackOnExternalDevice:]
  -[VCAudioManager isMicrophoneMuted]
  -[VCAudioManager setMicrophoneMuted:]
  -[VCAudioManager didUpdateBasebandCodec:]
  -[VCAudioManager startClient:]
  -[VCAudioManager stopClient:]
  -[VCAudioManager updateClient:direction:]
  -[VCAudioManager refreshInputMetering]
  -[VCAudioManager refreshOutputMetering]
  -[VCAudioManager refreshRemoteCodecType:sampleRate:]
  -[VCAudioManager setMute:forClient:]
  -[VCAudioManager didServerDie]
  -[VCAudioManager didSessionPause]
  -[VCAudioManager didSessionResume]
  -[VCAudioManager didSessionStop]
  -[VCAudioManager didSessionEnd]
  -[VCAudioManager sinkIO]
  -[VCAudioManager sourceIO]
  -[VCAudioManager getPreferredFormat:blockSize:vpOperatingMode:forOperatingMode:deviceRole:suggestedFormat:]
  -[VCAudioManager initWithAudioSessionMode:]
  -[VCAudioManager applyAudioSessionMute]
  -[VCAudioManager setInputMetering]
  -[VCAudioManager setOutputMetering]
  -[VCAudioManager getAudioSessionMediaProperties:forVPOperatingMode:]
  -[VCAudioManager computeHardwarePreferences]
  -[VCAudioManager resetAudioTimestamps]
  -[VCAudioManager prewarmingClientOperatingMode]
  -[VCAudioManager flushEventQueue:]
  -[VCAudioManager removeAllClientsForIO:]
  -[VCAudioManager waitIdleForClient:]
  -[VCAudioManager _cleanupDeadClients]
  -[VCAudioManager vpOperationModeForConferenceOperatingMode:deviceRole:]
  -[VCAudioManager computeFormatDescription:withPreferredClient:]
  -[VCAudioManager computeSamplePerFrameWithPreferredClient:sampleRate:]
  -[VCAudioManager computeAllowAudioRecordingWithPreferredClient:]
  -[VCAudioManager newAudioUnitPropertiesWithPreferredClient:]
  -[VCAudioManager newAudioUnitPropertiesForSystemAudioWithPreferredClient:]
  -[VCAudioManager newAudioSessionMediaPropertiesForSystemAudioWithPreferredClient:audioUnitProperties:]
  -[VCAudioManager newAudioSessionMediaPropertiesWithPreferredClient:audioUnitProperties:]
  -[VCAudioManager setupIODevicesForAUIO:]
  -[VCAudioManager setCurrentInputDeviceInternal:]
  -[VCAudioManager updateCurrentInputDevice:]
  -[VCAudioManager setCurrentOutputDeviceInternal:]
  -[VCAudioManager updateCurrentOutputDevice:]
  -[VCAudioManager startAUIOWithProperties:]
  -[VCAudioManager shouldResetAudioUnitWithProperties:]
  -[VCAudioManager shouldResetAudioSessionWithProperties:]
  -[VCAudioManager resetAUIOWithProperties:]
  -[VCAudioManager resetAudioLimiterWithProperties:]
  -[VCAudioManager stopAUIO]
  -[VCAudioManager registerClientIO:controllerIO:]
  -[VCAudioManager unregisterClientIO:controllerIO:]
  -[VCAudioManager completeStartForAllStartingClients]
  -[VCAudioManager activateStartingClient:applyControllerFormat:]
  -[VCAudioManager applyControllerFormatToClients:]
  -[VCAudioManager registerForMutedTalkerNotificationWithAUIO:]
  -[VCAudioManager unregisterForMutedTalkerNotificationWithAUIO:]
  -[VCAudioManager registerForMutedTalkerNotification:]
  -[VCAudioManager unregisterFromMutedTalkerNotification]
  -[VCAudioManager registerAudioSessionId:maxChannelCountMic:maxChannelCountSpeaker:spatialMetadata:]
  -[VCAudioManager unregisterAudioSessionId:]
  -[VCAudioManager setSpatialMetadata:audioSessionId:completionHandler:]
  -[VCAudioManager applySessionContextToAudioUnitProperties:preferredClient:]
  -[VCAudioManager applySpatialMetadata:]
  -[VCAudioManager activateSpatialContext:shouldApplySpatialMetadata:]
  -[VCAudioManager stateIdleWithAudioUnitProperties:sessionProperties:client:newState:]
  -[VCAudioManager enterStateStarted]
  -[VCAudioManager stateSessionStartedWithAudioUnitProperties:sessionProperties:client:newState:]
  -[VCAudioManager stateRunningShouldTransitionToStarted:]
  -[VCAudioManager stateRunningShouldTransitionToInterrupted:]
  -[VCAudioManager stateRunningToSessionStarted]
  -[VCAudioManager stateTransitionRunningToInterrupted]
  -[VCAudioManager stateRunningWithAudioUnitProperties:sessionProperties:client:newState:]
  -[VCAudioManager stateInterruptedShouldGoToStarted:]
  -[VCAudioManager stateInterruptedShouldGoToRunning:]
  -[VCAudioManager stateTransitionInterruptedToRunning]
  -[VCAudioManager stateTransitionInterruptedToStarted]
  -[VCAudioManager stateInterruptedWithAudioUnitProperties:sessionProperties:client:newState:]
  -[VCAudioManager preferredClientWithNewClient:]
  -[VCAudioManager updateStateWithAudioIOClient:]
  -[VCAudioManager startAudioSessionWithProperties:]
  -[VCAudioManager resetAudioSessionWithProperties:interruptSuccessful:]
  -[VCAudioManager stopAudioSession]
  -[VCAudioManager setupInterruptThread]
  -[VCAudioManager cleanupInterruptThread]
  -[VCAudioManager startInterruptThread]
  -[VCAudioManager stopInterruptThread]
  -[VCAudioManager setupDynamicDuckingVolumeHandlerForAUIO:]
  -[VCAudioManager setVolume:withRampTime:]
  -[VCAudioManager isGKVoiceChat]
  -[VCAudioManager setIsGKVoiceChat:]
  -[VCAudioManager isMixingVoiceWithMediaEnabled]
  -[VCAudioManager isSpeakerPhoneEnabled]
  -[VCAudioManager setSpeakerPhoneEnabled:]
  -[VCAudioManager currentAudioSessionMediaProperties]
  -[VCAudioManager setCurrentAudioSessionMediaProperties:]
  -[VCAudioManager currentAudioUnitProperties]
  -[VCAudioManager setCurrentAudioUnitProperties:]
  -[VCAudioManager isInDaemon]
  -[VCAudioManager setIsInDaemon:]
  -[VCAudioManager vpOperatingModeToAudioSessionMediaFormatMapping]
  -[VCAudioManager setVpOperatingModeToAudioSessionMediaFormatMapping:]


AVCRateController : NSObject <VCRateSharingClient>
 @property  VCRateControlMediaController *mediaController
 @property  unsigned int targetBitrate
 @property  {AVCRateControlConfig=IIIIIIBI} configuration
 @property  unsigned int targetBitrateCap
 @property  unsigned int estimatedBandwidthCap
 @property  unsigned int expectedBitrate
 @property  id reportingAgent
 @property  BOOL isStarted
 @property  AVCStatisticsCollector *statisticsCollector
 @property  AVCRateControlFeedbackController *feedbackController
 @property  AVCBasebandCongestionDetector *basebandCongestionDetector
 @property  VCNWConnectionCongestionDetector *nwConnectionCongestionDetector
 @property  BOOL paused
 @property  {tagAVCRateControlExperimentConfig=ii} rateControlExperimentConfig
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVCRateController configure:]
  -[AVCRateController isStarted]
  -[AVCRateController setPaused:]
  -[AVCRateController configuration]
  -[AVCRateController isPaused]
  -[AVCRateController dealloc]
  -[AVCRateController stop]
  -[AVCRateController start]
  -[AVCRateController mediaController]
  -[AVCRateController feedbackController]
  -[AVCRateController setFeedbackController:]
  -[AVCRateController setShareProfile:]
  -[AVCRateController initWithDelegate:dumpID:isUplink:reportingAgent:]
  -[AVCRateController initWithDelegate:params:]
  -[AVCRateController completeAndReleaseNwActivity:withReason:]
  -[AVCRateController cleanupNwActivity]
  -[AVCRateController rateControlExperimentConfig]
  -[AVCRateController periodicTask:]
  -[AVCRateController accumulateStatsForPeriodicTaskUpdate]
  -[AVCRateController resetStatsForPeriodicTaskReport]
  -[AVCRateController registerPeriodicTask]
  -[AVCRateController getRealTimeStatsForServerBasedTxOnly:]
  -[AVCRateController getRealTimeStatsForServerBasedRxOnly:]
  -[AVCRateController getRealTimeStatsForiPadCompanion:]
  -[AVCRateController getRealTimeStats:]
  -[AVCRateController deregisterPeriodicTask]
  -[AVCRateController configureWithOperatingMode:isLocalCellular:localCellTech:isRemoteCellular:remoteCellTech:bitrateCapKbps:isTrafficBursty:featureFlags:]
  -[AVCRateController setTargetBitrateCap:]
  -[AVCRateController setEstimatedBandwidthCap:]
  -[AVCRateController setExpectedBitrate:]
  -[AVCRateController registerForRateSharing:]
  -[AVCRateController deregisterForRateSharing]
  -[AVCRateController loadDefaultVCRCFeatureFlags:]
  -[AVCRateController setBtNotificationMonitor]
  -[AVCRateController rateControlModeFromAVConferenceOperatingMode:]
  -[AVCRateController radioAccessTechnologyFromAVConferenceCellTech:isCellular:]
  -[AVCRateController indicatorFromRadioTech:]
  -[AVCRateController isRadioTechnologyOnCellular:]
  -[AVCRateController isRadioTechnologyOnNewerThanLTE:]
  -[AVCRateController isRadioTechnologyOnWiFiOrLTEAndNewer:]
  -[AVCRateController initialBitrateTierFromLearntBitrateWithLocalTechnology:remoteTech:defaultTier:]
  -[AVCRateController configureInternal:]
  -[AVCRateController initialTierIndexForFaceTimeWithMaxTierIndex:]
  -[AVCRateController setDefaultAlgorithmConfiguration:]
  -[AVCRateController applyServerBagNoRampUpGroupConfig:]
  -[AVCRateController applyServerBagRampDownGroupConfig:]
  -[AVCRateController applyServerBagNotificationGroupConfig:]
  -[AVCRateController applyServerBagProfileConfig:]
  -[AVCRateController applyServerBagFastRampUpConfig:]
  -[AVCRateController applyServerBagOscillationAvoidanceConfig:]
  -[AVCRateController applyServerBagEmergencyTierConfig:]
  -[AVCRateController applyServerBagPauseResumeConfig:]
  -[AVCRateController applyServerBagLossBasedAdaptationConfig:]
  -[AVCRateController applyServerBagMainControlConfig:]
  -[AVCRateController applyServerBagGroupConfig:]
  -[AVCRateController reportRateControlExperiment]
  -[AVCRateController multiwayMaxTierFromServerBag]
  -[AVCRateController configureAlgorithmWithRestart:]
  -[AVCRateController configureVCRateControlAlgorithmWithConfiguration:]
  -[AVCRateController createVCRateControlAlgorithmWithConfiguration:]
  -[AVCRateController registerStatisticsChangeHandlers]
  -[AVCRateController doRateControlWithStatistics:]
  -[AVCRateController handleAbnormalRateAdaptationSymptomReport:]
  -[AVCRateController handleSignificantPacketLossSymptomReport:]
  -[AVCRateController pushNoServerStatsToNwActivity:]
  -[AVCRateController handleNoServerStatsSymptomReport:]
  -[AVCRateController checkAndReportAbnormalSymptoms]
  -[AVCRateController doRateControlWithBasebandStatistics:]
  -[AVCRateController doRateControlWithNWConnectionStatistics:]
  -[AVCRateController checkOffChannelActivityWithStatistics:]
  -[AVCRateController calculateWiFiNonAVCTxBitrateWithStatistics:]
  -[AVCRateController reportInitialRampUpDeltas]
  -[AVCRateController reportNetworkStatisticsWithArrivalTime:]
  -[AVCRateController reportTargetBitrateChange:rateChangeCounter:]
  -[AVCRateController loadDefaultSettings]
  -[AVCRateController maxTierBelowBitrate:maxTierIndex:minTierIndex:]
  -[AVCRateController minTierAboveBitrate:maxTierIndex:minTierIndex:]
  -[AVCRateController createBWEDumpFile:]
  -[AVCRateController createLogDumpFiles:]
  -[AVCRateController createBasebandLogDumpFile]
  -[AVCRateController createNWConnectionLogDumpFile]
  -[AVCRateController releaseAllLogDumpFiles]
  -[AVCRateController releaseLogDumpFile:]
  -[AVCRateController printFeedbackMessage:]
  -[AVCRateController printBasebandNotificationStatistics:]
  -[AVCRateController printNWConnectionStatistics:]
  -[AVCRateController printRateControllerHealthPrint]
  -[AVCRateController basebandCongestionDetector]
  -[AVCRateController setBasebandCongestionDetector:]
  -[AVCRateController nwConnectionCongestionDetector]
  -[AVCRateController setNwConnectionCongestionDetector:]
  -[AVCRateController statisticsCollector]
  -[AVCRateController setStatisticsCollector:]
  -[AVCRateController setMediaController:]
  -[AVCRateController targetBitrate]
  -[AVCRateController targetBitrateCap]
  -[AVCRateController estimatedBandwidthCap]
  -[AVCRateController expectedBitrate]
  -[AVCRateController reportingAgent]


VCNWConnectionCongestionDetector : NSObject
 @property  AVCStatisticsCollector *statisticsCollector
 @property  unsigned int averageThroughputBps
 @property  unsigned int averagePacketDelayMs
 @property  unsigned int maxAveragePacketDelayMs
 @property  unsigned int packetDropCount

  // instance methods
  -[VCNWConnectionCongestionDetector dealloc]
  -[VCNWConnectionCongestionDetector statisticsCollector]
  -[VCNWConnectionCongestionDetector setStatisticsCollector:]
  -[VCNWConnectionCongestionDetector processNWConnectionNotification:]
  -[VCNWConnectionCongestionDetector processNWConnectionPacketEvent:eventType:]
  -[VCNWConnectionCongestionDetector sendCongestionEventWithTimestamp:]
  -[VCNWConnectionCongestionDetector enableNWLogDump:]
  -[VCNWConnectionCongestionDetector averagePacketDelayMs]
  -[VCNWConnectionCongestionDetector maxAveragePacketDelayMs]
  -[VCNWConnectionCongestionDetector setMaxAveragePacketDelayMs:]
  -[VCNWConnectionCongestionDetector averageThroughputBps]
  -[VCNWConnectionCongestionDetector packetDropCount]


AVCRateControlFeedbackController : NSObject
 @property  unsigned int mode
 @property  VCConnectionHealthMonitor *connectionHealthMonitor

  // instance methods
  -[AVCRateControlFeedbackController dealloc]
  -[AVCRateControlFeedbackController mode]
  -[AVCRateControlFeedbackController setMode:]
  -[AVCRateControlFeedbackController initWithStatisticsCollector:]
  -[AVCRateControlFeedbackController getFeedbackMessage:type:metaData:error:]
  -[AVCRateControlFeedbackController processFeedbackMessage:type:metaData:error:]
  -[AVCRateControlFeedbackController getRateControlFeedbackMessage:type:metaData:error:]
  -[AVCRateControlFeedbackController getVCStatisticsFeedbackMessage:time:]
  -[AVCRateControlFeedbackController getConnectionStatsBlob]
  -[AVCRateControlFeedbackController processRateControlFeedbackMessage:type:error:time:]
  -[AVCRateControlFeedbackController processRateControlProbingMessage:type:error:]
  -[AVCRateControlFeedbackController translateRateControlDataWithFeedbackMessage:]
  -[AVCRateControlFeedbackController translateRateControlFeedbackMessageFromData:]
  -[AVCRateControlFeedbackController translateAFRCFeedbackMessage:]
  -[AVCRateControlFeedbackController translateMediaControlInfo:feedbackMessage:]
  -[AVCRateControlFeedbackController detectOutOfOrderFeedbackMessage:]
  -[AVCRateControlFeedbackController resetBurstyLossStatistics]
  -[AVCRateControlFeedbackController connectionHealthMonitor]
  -[AVCRateControlFeedbackController setConnectionHealthMonitor:]


VCMediaNegotiatorBandwidthConfiguration : NSObject
 @property  int mode
 @property  int connectionType
 @property  unsigned int maxBandwidth
 @property  BOOL isDefaultMode

  // instance methods
  -[VCMediaNegotiatorBandwidthConfiguration setConnectionType:]
  -[VCMediaNegotiatorBandwidthConfiguration mode]
  -[VCMediaNegotiatorBandwidthConfiguration setMode:]
  -[VCMediaNegotiatorBandwidthConfiguration connectionType]
  -[VCMediaNegotiatorBandwidthConfiguration isEqual:]
  -[VCMediaNegotiatorBandwidthConfiguration maxBandwidth]
  -[VCMediaNegotiatorBandwidthConfiguration setMaxBandwidth:]
  -[VCMediaNegotiatorBandwidthConfiguration initWithConnectionType:maxBandwidth:]
  -[VCMediaNegotiatorBandwidthConfiguration initWithMode:connectionType:maxBandwidth:]
  -[VCMediaNegotiatorBandwidthConfiguration isDefaultMode]
  -[VCMediaNegotiatorBandwidthConfiguration setIsDefaultMode:]


AVConferenceCallState : NSObject
 @property  BOOL audioIsPaused
 @property  BOOL isVideoPaused
 @property  BOOL isAudioSending
 @property  VCCapabilities *capabilities

  // instance methods
  -[AVConferenceCallState dealloc]
  -[AVConferenceCallState capabilities]
  -[AVConferenceCallState setCapabilities:]
  -[AVConferenceCallState isAudioPaused]
  -[AVConferenceCallState isVideoPaused]
  -[AVConferenceCallState setAudioIsPaused:]
  -[AVConferenceCallState setIsVideoPaused:]
  -[AVConferenceCallState isAudioSending]
  -[AVConferenceCallState setIsAudioSending:]


AVConference : NSObject
 @property  CALayer *networkQualityGraphLayer
 @property  NSTimer *networkQualityUpdateTimer
 @property  BOOL shouldDisplayNetworkQualityGraph
 @property  BOOL useViceroyBlobFormat
 @property  NSObject<AVConferenceDelegate> *delegate
 @property  BOOL microphoneMuted
 @property  BOOL inputFrequencyMeteringEnabled
 @property  BOOL outputFrequencyMeteringEnabled
 @property  BOOL outputMeteringEnabled
 @property  BOOL inputMeteringEnabled
 @property  float outputMeterLevel
 @property  float inputMeterLevel
 @property  BOOL requiresWifi
 @property  long long inputAudioPowerSpectrumToken
 @property  long long outputAudioPowerSpectrumToken
 @property  int localFrameHeight
 @property  int localFrameWidth
 @property  BOOL enableSpeakerPhone
 @property  unsigned int natType

  // class methods
  +[AVConference startAudioSession]
  +[AVConference hasActiveAudioSession]
  +[AVConference setAudioSessionProperties:]
  +[AVConference stopAudioSession]
  +[AVConference refreshLoggingParameters]
  +[AVConference addressPointerFromBlob:]
  +[AVConference externalAddressForSelfConnectionBlob:]
  +[AVConference startAudioSessionWithCompletionHandler:]
  +[AVConference doBlockingConnectionCheck]
  +[AVConference doBlockingConnectionCheck:]

  // instance methods
  -[AVConference setDelegate:]
  -[AVConference delegate]
  -[AVConference dealloc]
  -[AVConference setActive:]
  -[AVConference setServerInfo:]
  -[AVConference init]
  -[AVConference networkQuality]
  -[AVConference localScreenAttributesForVideoAttributes:]
  -[AVConference setLocalScreenAttributes:]
  -[AVConference inputAudioPowerSpectrumToken]
  -[AVConference outputAudioPowerSpectrumToken]
  -[AVConference stopListeningForNotifications]
  -[AVConference isMicrophoneMuted]
  -[AVConference setMicrophoneMuted:]
  -[AVConference isOutputMeteringEnabled]
  -[AVConference setOutputMeteringEnabled:]
  -[AVConference isInputMeteringEnabled]
  -[AVConference setInputMeteringEnabled:]
  -[AVConference outputMeterLevel]
  -[AVConference inputMeterLevel]
  -[AVConference isSpeakerPhoneEnabled]
  -[AVConference handleGKSConnectivitySettingsUpdate:]
  -[AVConference updateNetworkQualityGraph]
  -[AVConference doBlockingConnectionCheck]
  -[AVConference listenForNotifications]
  -[AVConference updateGKSConnectivitySettings]
  -[AVConference initWithClientUUID:]
  -[AVConference initWithClientUUID:transportType:]
  -[AVConference initializeNewCall]
  -[AVConference initializeNewCallWithDeviceRole:]
  -[AVConference initializeNewCallWithDeviceRole:reportingHierarchyToken:]
  -[AVConference warmupForCall]
  -[AVConference isUsingViceroyBlobFormat]
  -[AVConference setUseViceroyBlobFormat:]
  -[AVConference setSetSessionID:forCallID:]
  -[AVConference addGKSCallEvent:sessionID:]
  -[AVConference sendARPLData:toCallID:]
  -[AVConference sendData:forCallID:encrypted:]
  -[AVConference newRandomParticipantID]
  -[AVConference inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:]
  -[AVConference callMetadataForCallID:]
  -[AVConference setPeerCN:callID:]
  -[AVConference setPeerReportingIdentifier:sessionIdentifier:forCallID:]
  -[AVConference setSessionID:callID:]
  -[AVConference networkQualityForCallID:]
  -[AVConference requiresWifi]
  -[AVConference setRequiresWifi:]
  -[AVConference convertBlobtoOldBlob:]
  -[AVConference convertBlobtoNewBlob:]
  -[AVConference startConnectionWithCallID:oldCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:destination:error:]
  -[AVConference startConnectionWithCallID:oldCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:error:]
  -[AVConference startConnectionWithCallID:inviteData:isCaller:capabilities:destination:error:]
  -[AVConference startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:error:]
  -[AVConference startConnectionWithCallID:oldCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:error:]
  -[AVConference startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:error:]
  -[AVConference stopCallID:]
  -[AVConference cancelCallID:]
  -[AVConference remoteCancelledCallID:]
  -[AVConference sendProtobuf:withType:forCallID:]
  -[AVConference setCallReport:withReport:]
  -[AVConference lastActiveCallID]
  -[AVConference setLastActiveCallID:]
  -[AVConference processRemoteIPChange:callID:]
  -[AVConference isInputFrequencyMeteringEnabled]
  -[AVConference setInputFrequencyMeteringEnabled:]
  -[AVConference isOutputFrequencyMeteringEnabled]
  -[AVConference setOutputFrequencyMeteringEnabled:]
  -[AVConference getIsSendingAudio:callID:error:]
  -[AVConference getIsAudioPaused:callID:error:]
  -[AVConference getIsVideoPaused:callID:error:]
  -[AVConference currentAudioInputDevice]
  -[AVConference currentAudioOutputDevice]
  -[AVConference setAudioInputDevice:]
  -[AVConference setAudioOutputDevice:]
  -[AVConference startNetworkQualityUpdateTimer]
  -[AVConference stopNetworkQualityUpdateTimer]
  -[AVConference remoteVideoLayer]
  -[AVConference remoteVideoBackLayer]
  -[AVConference setRemoteVideoLayer:]
  -[AVConference setRemoteVideoBackLayer:]
  -[AVConference videoStreamTokenForCallID:]
  -[AVConference localFramerateForCallID:]
  -[AVConference localBitrateForCallID:]
  -[AVConference remoteFramerateForCallID:]
  -[AVConference remoteBitrateForCallID:]
  -[AVConference localFrameHeight]
  -[AVConference localFrameWidth]
  -[AVConference remoteFrameHeightForCallID:]
  -[AVConference remoteFrameWidthForCallID:]
  -[AVConference remotePacketLossRateForCallID:]
  -[AVConference localPacketLossRateForCallID:]
  -[AVConference roundTripTimeForCallID:]
  -[AVConference statsForCallID:]
  -[AVConference setEnableSpeakerPhone:]
  -[AVConference natType]
  -[AVConference setSendingAudio:callID:error:]
  -[AVConference setPauseAudio:callID:error:]
  -[AVConference setPauseVideo:callID:error:]
  -[AVConference updateCapabilities:forCallID:]
  -[AVConference capabilitiesForCallID:]
  -[AVConference videoConference:didStartSession:withCallID:error:]
  -[AVConference videoConference:didStartSession:withCallID:withUserInfo:error:]
  -[AVConference videoConference:didStopWithCallID:error:]
  -[AVConference videoConference:withCallID:isSendingAudio:error:]
  -[AVConference videoConference:withCallID:didPauseAudio:error:]
  -[AVConference videoConference:withCallID:didPauseVideo:error:]
  -[AVConference videoConference:didStopWithCallID:error:callMetadata:]
  -[AVConference videoConference:localIPChange:withCallID:]
  -[AVConference videoConference:remoteMediaStalled:callID:]
  -[AVConference videoConference:didReceiveFirstRemoteFrameForCallID:]
  -[AVConference videoConference:didRemoteVideoAttributesChange:forCallID:]
  -[AVConference videoConference:remoteAudioPaused:callID:]
  -[AVConference videoConference:remoteVideoPaused:callID:]
  -[AVConference videoConference:didRemoteScreenAttributesChange:forCallID:]
  -[AVConference videoConference:updateInputFrequencyLevel:]
  -[AVConference videoConference:updateOutputFrequencyLevel:]
  -[AVConference videoConference:updateInputMeterLevel:]
  -[AVConference videoConference:updateOutputMeterLevel:]
  -[AVConference videoConference:isRemoteAudioBelowThreshold:]
  -[AVConference videoConference:inititiateRelayRequest:requestDict:]
  -[AVConference videoConference:sendRelayUpdate:updateDict:]
  -[AVConference videoConference:cancelRelayRequest:requestDict:]
  -[AVConference videoConference:videoQualityNotificationForCallID:isDegraded:isRemote:]
  -[AVConference videoConference:withCallID:networkHint:]
  -[AVConference videoConference:didReceiveARPLData:forCallID:]
  -[AVConference videoConference:didReceiveData:forCallID:]
  -[AVConference videoConference:didChangeLocalVariablesForCallID:]
  -[AVConference videoConference:remoteAudioEnabled:forCallID:]
  -[AVConference videoConference:localAudioEnabled:forCallID:error:]
  -[AVConference videoConference:remoteCallingModeChanged:forCallID:]
  -[AVConference videoConference:reinitializeCallForCallID:]
  -[AVConference videoConference:closeConnectionForCallID:]
  -[AVConference processRelayRequestResponse:responseDict:didOriginateRequest:]
  -[AVConference processRelayUpdate:updateDict:didOriginateRequest:]
  -[AVConference processCancelRelayRequest:cancelDict:didOriginateRequest:]
  -[AVConference shouldSendBlackFrames:callID:]
  -[AVConference setConferenceState:forCallID:]
  -[AVConference setConferenceVisualRectangle:forCallID:]
  -[AVConference setPeerProtocolVersion:forCallID:]
  -[AVConference shouldDisplayNetworkQualityGraph]
  -[AVConference setShouldDisplayNetworkQualityGraph:]
  -[AVConference networkQualityUpdateTimer]
  -[AVConference setNetworkQualityUpdateTimer:]
  -[AVConference networkQualityGraphLayer]
  -[AVConference setNetworkQualityGraphLayer:]
  -[AVConference registerBlocksForVCNotifications]
  -[AVConference deregisterBlocksForVCNotifications]
  -[AVConference serverReconnected]
  -[AVConference serverDied]
  -[AVConference callStateForCallID:]
  -[AVConference setCallState:forCallID:]


VCMediaNegotiationBlobV2VideoPayload : PBCodable <NSCopying>
 @property  NSArray *encodeVideoRules
 @property  NSArray *decodeVideoRules
 @property  int payload
 @property  unsigned int videoParameterSupport
 @property  BOOL hasVideoPayload
 @property  unsigned int videoPayload
 @property  BOOL hasParameterSet
 @property  unsigned int parameterSet
 @property  BOOL hasEncodeFormats
 @property  unsigned int encodeFormats
 @property  BOOL hasDecodeFormats
 @property  unsigned int decodeFormats

  // class methods
  +[VCMediaNegotiationBlobV2VideoPayload payloadWithRTPPayload:]
  +[VCMediaNegotiationBlobV2VideoPayload rtpPayloadWithPayload:]

  // instance methods
  -[VCMediaNegotiationBlobV2VideoPayload copyTo:]
  -[VCMediaNegotiationBlobV2VideoPayload payload]
  -[VCMediaNegotiationBlobV2VideoPayload mergeFrom:]
  -[VCMediaNegotiationBlobV2VideoPayload dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2VideoPayload copyWithZone:]
  -[VCMediaNegotiationBlobV2VideoPayload readFrom:]
  -[VCMediaNegotiationBlobV2VideoPayload writeTo:]
  -[VCMediaNegotiationBlobV2VideoPayload isEqual:]
  -[VCMediaNegotiationBlobV2VideoPayload videoPayload]
  -[VCMediaNegotiationBlobV2VideoPayload setVideoPayload:]
  -[VCMediaNegotiationBlobV2VideoPayload setHasVideoPayload:]
  -[VCMediaNegotiationBlobV2VideoPayload hasVideoPayload]
  -[VCMediaNegotiationBlobV2VideoPayload setParameterSet:]
  -[VCMediaNegotiationBlobV2VideoPayload setHasParameterSet:]
  -[VCMediaNegotiationBlobV2VideoPayload hasParameterSet]
  -[VCMediaNegotiationBlobV2VideoPayload setEncodeFormats:]
  -[VCMediaNegotiationBlobV2VideoPayload setHasEncodeFormats:]
  -[VCMediaNegotiationBlobV2VideoPayload hasEncodeFormats]
  -[VCMediaNegotiationBlobV2VideoPayload setDecodeFormats:]
  -[VCMediaNegotiationBlobV2VideoPayload setHasDecodeFormats:]
  -[VCMediaNegotiationBlobV2VideoPayload hasDecodeFormats]
  -[VCMediaNegotiationBlobV2VideoPayload parameterSet]
  -[VCMediaNegotiationBlobV2VideoPayload encodeFormats]
  -[VCMediaNegotiationBlobV2VideoPayload decodeFormats]
  -[VCMediaNegotiationBlobV2VideoPayload printWithLogFile:prefix:]
  -[VCMediaNegotiationBlobV2VideoPayload initWithPayload:encodeVideoRules:decodeVideoRules:videoParameterSupport:]
  -[VCMediaNegotiationBlobV2VideoPayload encodeVideoRules]
  -[VCMediaNegotiationBlobV2VideoPayload decodeVideoRules]
  -[VCMediaNegotiationBlobV2VideoPayload videoRulesWithBitmap:]
  -[VCMediaNegotiationBlobV2VideoPayload videoParameterSupport]
  -[VCMediaNegotiationBlobV2VideoPayload setupEncode:videoRules:]
  -[VCMediaNegotiationBlobV2VideoPayload setupVideoParameterSupport:]


VCMediaNegotiatorBase : NSObject <VCMediaNegotiatorProtocol>
 @property  VCMediaNegotiatorLocalConfiguration *localSettings
 @property  VCMediaNegotiatorResults *negotiatedSettings
 @property  VCMediaNegotiatorResultsAudio *negotiatedAudioSettings
 @property  VCMediaNegotiatorResultsVideo *negotiatedVideoSettings
 @property  VCMediaNegotiatorResultsVideo *negotiatedScreenSettings
 @property  VCMediaNegotiatorResultsMoments *negotiatedMomentsSettings
 @property  VCMediaNegotiatorResultsFaceTimeSettings *negotiatedFaceTimeSettings
 @property  NSArray *negotiatedStreamGroups
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCMediaNegotiatorBase initializeLocalConfiguration:negotiationData:deviceRole:preferredAudioPayload:]
  +[VCMediaNegotiatorBase streamGroupIDsWithMediaBlob:]

  // instance methods
  -[VCMediaNegotiatorBase dealloc]
  -[VCMediaNegotiatorBase localSettings]
  -[VCMediaNegotiatorBase negotiationData]
  -[VCMediaNegotiatorBase processRemoteNegotiationData:]
  -[VCMediaNegotiatorBase remoteMaxBandwidthForOperatingMode:connectionType:]
  -[VCMediaNegotiatorBase negotiatedSettings]
  -[VCMediaNegotiatorBase negotiatedAudioSettings]
  -[VCMediaNegotiatorBase negotiatedVideoSettings]
  -[VCMediaNegotiatorBase negotiatedScreenSettings]
  -[VCMediaNegotiatorBase negotiatedMomentsSettings]
  -[VCMediaNegotiatorBase negotiatedFaceTimeSettings]
  -[VCMediaNegotiatorBase negotiatedStreamGroups]
  -[VCMediaNegotiatorBase initWithLocalSettings:]
  -[VCMediaNegotiatorBase getPreferredVideoPayloadList:]


VCHardwareSettingsMac : VCHardwareSettings <VCHardwareSettingsMacProtocol>
 @property  BOOL shouldOverrideGPUMuxing
 @property  unsigned int screenWidth
 @property  unsigned int screenHeight
 @property  unsigned long maxScreenEncodingSizeSupported
 @property  unsigned int maxFrameRateSupportedScreenShare
 @property  unsigned int maxActiveScreenEncoders
 @property  BOOL shouldEnforceScreenFrameRateLimit
 @property  long long screenShareCapabilities
 @property  BOOL isCellularTappingSupported
 @property  NSString *machineName
 @property  int hardwareScore
 @property  BOOL canDoHiDefEncoding
 @property  BOOL canDoHiDefDecoding
 @property  BOOL supports1080pEncoding
 @property  BOOL supports1080pDecoding
 @property  BOOL canDoHEVC
 @property  BOOL supportsAVFCapture
 @property  BOOL isMacBookWVGA
 @property  BOOL isMacPro
 @property  BOOL isIMac
 @property  BOOL isMacmini
 @property  unsigned int hwEncoderExitBitrate
 @property  unsigned int hwEncoderEnterBitrate
 @property  BOOL supportsMultiway720pStream
 @property  BOOL isDeviceLargeScreen
 @property  BOOL supportHEVC
 @property  BOOL vcpSupportsHEVCEncoder
 @property  BOOL supportsHEIFEncoding
 @property  BOOL isSpatialAudioSupported
 @property  BOOL isPixelFormatAvailable
 @property  NSArray *supportedVideoPayloads
 @property  BOOL useSoftFramerateSwitching
 @property  BOOL isCaptionsSupported
 @property  unsigned int maxDisplayRefreshRate
 @property  unsigned int maxActiveVideoEncoders
 @property  unsigned int maxActiveVideoDecoders
 @property  BOOL isSiriVoiceTapSupported
 @property  BOOL isSiriVoicePlayoutSupported
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCHardwareSettingsMac sharedInstance]
  +[VCHardwareSettingsMac deviceClass]

  // instance methods
  -[VCHardwareSettingsMac dealloc]
  -[VCHardwareSettingsMac screenWidth]
  -[VCHardwareSettingsMac supportsHEIFEncoding]
  -[VCHardwareSettingsMac isSpatialAudioSupported]
  -[VCHardwareSettingsMac screenHeight]
  -[VCHardwareSettingsMac isAppleSiliconMac]
  -[VCHardwareSettingsMac init]
  -[VCHardwareSettingsMac machineName]
  -[VCHardwareSettingsMac isPixelFormatAvailable]
  -[VCHardwareSettingsMac supportedVideoPayloads]
  -[VCHardwareSettingsMac useSoftFramerateSwitching]
  -[VCHardwareSettingsMac isCaptionsSupported]
  -[VCHardwareSettingsMac maxDisplayRefreshRate]
  -[VCHardwareSettingsMac maxActiveVideoEncoders]
  -[VCHardwareSettingsMac maxActiveVideoDecoders]
  -[VCHardwareSettingsMac hardwareScore]
  -[VCHardwareSettingsMac canDoHiDefEncoding]
  -[VCHardwareSettingsMac canDoHiDefDecoding]
  -[VCHardwareSettingsMac supports1080pEncoding]
  -[VCHardwareSettingsMac supports1080pDecoding]
  -[VCHardwareSettingsMac canDoHEVC]
  -[VCHardwareSettingsMac supportsAVFCapture]
  -[VCHardwareSettingsMac isMacBookWVGA]
  -[VCHardwareSettingsMac isMacPro]
  -[VCHardwareSettingsMac isIMac]
  -[VCHardwareSettingsMac isMacmini]
  -[VCHardwareSettingsMac hwEncoderExitBitrate]
  -[VCHardwareSettingsMac hwEncoderEnterBitrate]
  -[VCHardwareSettingsMac supportsMultiway720pStream]
  -[VCHardwareSettingsMac isDeviceLargeScreen]
  -[VCHardwareSettingsMac setupMachineName]
  -[VCHardwareSettingsMac _getCPUFamilyType]
  -[VCHardwareSettingsMac _getCPUTypeStringForMachineType:]
  -[VCHardwareSettingsMac _isMachineNewerThanSandybridge:]
  -[VCHardwareSettingsMac _isModel:]
  -[VCHardwareSettingsMac isGVAEncoderAvailable]
  -[VCHardwareSettingsMac isIMacPro]
  -[VCHardwareSettingsMac isMacBookAir]
  -[VCHardwareSettingsMac maxOneToOneFramerateSupported]
  -[VCHardwareSettingsMac maxMultiwayFramerateSupported]
  -[VCHardwareSettingsMac addPixelFormat]
  -[VCHardwareSettingsMac maxRemoteParticipants30fps]
  -[VCHardwareSettingsMac maxFpsCameraCaptureDuringSharing]
  -[VCHardwareSettingsMac _initializeScreenDimension]
  -[VCHardwareSettingsMac screenWidthForDisplayID:]
  -[VCHardwareSettingsMac shouldOverrideGPUMuxing]
  -[VCHardwareSettingsMac screenHeightForDisplayID:]
  -[VCHardwareSettingsMac previewPreferredAspectRatio]
  -[VCHardwareSettingsMac maxScreenEncodingSizeSupported]
  -[VCHardwareSettingsMac maxActiveScreenEncoders]
  -[VCHardwareSettingsMac maxFrameRateSupportedScreenShare]
  -[VCHardwareSettingsMac shouldEnforceScreenFrameRateLimit]
  -[VCHardwareSettingsMac queryBoardId]
  -[VCHardwareSettingsMac limitCameraDownlinkBitrateDuringSharing]
  -[VCHardwareSettingsMac supportsDedicatedSystemAudioStream]
  -[VCHardwareSettingsMac disableMLScalarDuringSharing]
  -[VCHardwareSettingsMac screenShareCapabilities]
  -[VCHardwareSettingsMac supportsPortraitCameraCapture]
  -[VCHardwareSettingsMac preferPresentationTimestamp]
  -[VCHardwareSettingsMac isCellularTappingSupported]


VCAudioPowerSpectrum : NSObject <VCAudioPowerSpectrumProtocol>
 @property  {_VCRange=ff} frequencyRange
 @property  long long streamToken
 @property  ^v realtimeContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioPowerSpectrum dealloc]
  -[VCAudioPowerSpectrum streamToken]
  -[VCAudioPowerSpectrum realtimeContext]
  -[VCAudioPowerSpectrum initWithBinCount:streamToken:sinkContext:sinkCallback:]
  -[VCAudioPowerSpectrum frequencyRange]


AVCStatisticsCollector : NSObject
 @property  unsigned int radioAccessTechnology
 @property  unsigned int mode
 @property  unsigned int sharedEstimatedBandwidth
 @property  unsigned int sharedEstimatedBandwidthUncapped
 @property  unsigned int sharedRemoteEstimatedBandwidth
 @property  unsigned int estimatedBandwidthCap
 @property  unsigned int expectedBitrate
 @property  unsigned char mediaControlInfoFECFeedbackVersion
 @property  BOOL fastSuddenBandwidthDetectionEnabled
 @property  VCRateControlServerBag *serverBag
 @property  BOOL isStarted

  // instance methods
  -[AVCStatisticsCollector setServerBag:]
  -[AVCStatisticsCollector serverBag]
  -[AVCStatisticsCollector radioAccessTechnology]
  -[AVCStatisticsCollector isStarted]
  -[AVCStatisticsCollector setStatistics:]
  -[AVCStatisticsCollector dealloc]
  -[AVCStatisticsCollector mode]
  -[AVCStatisticsCollector stop]
  -[AVCStatisticsCollector getStatistics:]
  -[AVCStatisticsCollector setMode:]
  -[AVCStatisticsCollector start]
  -[AVCStatisticsCollector init]
  -[AVCStatisticsCollector setRadioAccessTechnology:]
  -[AVCStatisticsCollector setEstimatedBandwidthCap:]
  -[AVCStatisticsCollector setExpectedBitrate:]
  -[AVCStatisticsCollector estimatedBandwidthCap]
  -[AVCStatisticsCollector expectedBitrate]
  -[AVCStatisticsCollector initForSimulation:useExternalThread:]
  -[AVCStatisticsCollector setFastSuddenBandwidthDetectionEnabled:]
  -[AVCStatisticsCollector enableBWELogDump:]
  -[AVCStatisticsCollector registerStatisticsChangeHandlerWithType:handler:]
  -[AVCStatisticsCollector unregisterStatisticsChangeHandlerWithType:handlerIndex:]
  -[AVCStatisticsCollector unregisterAllStatisticsChangeHandlers]
  -[AVCStatisticsCollector setVCStatistics:]
  -[AVCStatisticsCollector drainAndProcessVCStatistics:]
  -[AVCStatisticsCollector shouldProcessAtTime:]
  -[AVCStatisticsCollector getVCStatisticsWithType:time:]
  -[AVCStatisticsCollector processVCStatisticsInternal:]
  -[AVCStatisticsCollector updateStatisticChangeHandlerDictionaryCache]
  -[AVCStatisticsCollector addEntriesFromStatistics:]
  -[AVCStatisticsCollector addStatisticsHistory:]
  -[AVCStatisticsCollector computeOtherStatistics:]
  -[AVCStatisticsCollector updatePacketReceivedCount:]
  -[AVCStatisticsCollector updateMaxLocalBurstyLoss:isAudio:]
  -[AVCStatisticsCollector recordRemoteEstimatedBandwidthForLargeFrameInfo:]
  -[AVCStatisticsCollector updateLocalEstimatedBandwidth]
  -[AVCStatisticsCollector updateLocalEstimatedBandwidthWithArrivalTime:]
  -[AVCStatisticsCollector computeBWEstimation:]
  -[AVCStatisticsCollector computeOWRDEstimation:]
  -[AVCStatisticsCollector addPacketLossInfo:]
  -[AVCStatisticsCollector addActualBitrateInfo:]
  -[AVCStatisticsCollector addRoundTripTimeInfo:]
  -[AVCStatisticsCollector addMostBurstyLossInfo:]
  -[AVCStatisticsCollector sharedEstimatedBandwidth]
  -[AVCStatisticsCollector sharedEstimatedBandwidthUncapped]
  -[AVCStatisticsCollector sharedRemoteEstimatedBandwidth]
  -[AVCStatisticsCollector mediaControlInfoFECFeedbackVersion]
  -[AVCStatisticsCollector setMediaControlInfoFECFeedbackVersion:]
  -[AVCStatisticsCollector fastSuddenBandwidthDetectionEnabled]


VCVideoStreamOWRDLossEventRateControl : NSObject <VCVideoStreamRateControlProtocol>
 @property  int state
 @property  unsigned int targetBitrate
 @property  double owrd
 @property  double nowrd
 @property  double nowrdShort
 @property  double nowrdAcc
 @property  double rateControlInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoStreamOWRDLossEventRateControl state]
  -[VCVideoStreamOWRDLossEventRateControl className]
  -[VCVideoStreamOWRDLossEventRateControl init]
  -[VCVideoStreamOWRDLossEventRateControl targetBitrate]
  -[VCVideoStreamOWRDLossEventRateControl doRateControlWithTime:roundTripTime:packetLossRate:operatingTierIndex:averageReceivedBitrate:]
  -[VCVideoStreamOWRDLossEventRateControl updateRTPReceiveWithTimestamp:sampleRate:time:]
  -[VCVideoStreamOWRDLossEventRateControl setMaxTierIndex:minTierIndex:]
  -[VCVideoStreamOWRDLossEventRateControl owrd]
  -[VCVideoStreamOWRDLossEventRateControl nowrd]
  -[VCVideoStreamOWRDLossEventRateControl nowrdShort]
  -[VCVideoStreamOWRDLossEventRateControl nowrdAcc]
  -[VCVideoStreamOWRDLossEventRateControl rateControlInterval]
  -[VCVideoStreamOWRDLossEventRateControl setRateControlInterval:]
  -[VCVideoStreamOWRDLossEventRateControl printRateControlFullInfoWithLogDump:time:videoStall:videoFrozenDuration:averageTargetBitrate:]
  -[VCVideoStreamOWRDLossEventRateControl stateChange:]
  -[VCVideoStreamOWRDLossEventRateControl stateExit]
  -[VCVideoStreamOWRDLossEventRateControl stateEnter]
  -[VCVideoStreamOWRDLossEventRateControl rampUpTier]
  -[VCVideoStreamOWRDLossEventRateControl rampDownTier]
  -[VCVideoStreamOWRDLossEventRateControl shouldRampDown]
  -[VCVideoStreamOWRDLossEventRateControl shouldRampUp]
  -[VCVideoStreamOWRDLossEventRateControl updatePacketLossRate:time:]
  -[VCVideoStreamOWRDLossEventRateControl lossEventCount]
  -[VCVideoStreamOWRDLossEventRateControl lossEventCountThresholdForBitrate:]
  -[VCVideoStreamOWRDLossEventRateControl resetLossEventBuffer]
  -[VCVideoStreamOWRDLossEventRateControl calculateOWRDWithTimestamp:sampleRate:time:]


VCMediaNegotiationBlobMultiwayAudioStream : PBCodable <NSCopying>
 @property  unsigned int ssrc
 @property  BOOL hasMaxNetworkBitrate
 @property  unsigned int maxNetworkBitrate
 @property  BOOL hasSupportedPayloads
 @property  unsigned int supportedPayloads
 @property  unsigned int streamID
 @property  unsigned int qualityIndex
 @property  BOOL hasMaxMediaBitrate
 @property  unsigned int maxMediaBitrate
 @property  BOOL hasMaxPacketsPerSecond
 @property  float maxPacketsPerSecond
 @property  BOOL hasRepairedStreamID
 @property  unsigned int repairedStreamID
 @property  BOOL hasRepairedMaxNetworkBitrate
 @property  unsigned int repairedMaxNetworkBitrate

  // instance methods
  -[VCMediaNegotiationBlobMultiwayAudioStream copyTo:]
  -[VCMediaNegotiationBlobMultiwayAudioStream streamID]
  -[VCMediaNegotiationBlobMultiwayAudioStream mergeFrom:]
  -[VCMediaNegotiationBlobMultiwayAudioStream dictionaryRepresentation]
  -[VCMediaNegotiationBlobMultiwayAudioStream copyWithZone:]
  -[VCMediaNegotiationBlobMultiwayAudioStream readFrom:]
  -[VCMediaNegotiationBlobMultiwayAudioStream writeTo:]
  -[VCMediaNegotiationBlobMultiwayAudioStream isEqual:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setStreamID:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setHasMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayAudioStream hasMaxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayAudioStream setMaxMediaBitrate:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setHasMaxMediaBitrate:]
  -[VCMediaNegotiationBlobMultiwayAudioStream hasMaxMediaBitrate]
  -[VCMediaNegotiationBlobMultiwayAudioStream setMaxPacketsPerSecond:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setHasMaxPacketsPerSecond:]
  -[VCMediaNegotiationBlobMultiwayAudioStream hasMaxPacketsPerSecond]
  -[VCMediaNegotiationBlobMultiwayAudioStream setRepairedStreamID:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setHasRepairedStreamID:]
  -[VCMediaNegotiationBlobMultiwayAudioStream hasRepairedStreamID]
  -[VCMediaNegotiationBlobMultiwayAudioStream setRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setHasRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobMultiwayAudioStream hasRepairedMaxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayAudioStream ssrc]
  -[VCMediaNegotiationBlobMultiwayAudioStream setSsrc:]
  -[VCMediaNegotiationBlobMultiwayAudioStream maxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayAudioStream qualityIndex]
  -[VCMediaNegotiationBlobMultiwayAudioStream setQualityIndex:]
  -[VCMediaNegotiationBlobMultiwayAudioStream maxMediaBitrate]
  -[VCMediaNegotiationBlobMultiwayAudioStream maxPacketsPerSecond]
  -[VCMediaNegotiationBlobMultiwayAudioStream repairedStreamID]
  -[VCMediaNegotiationBlobMultiwayAudioStream repairedMaxNetworkBitrate]
  -[VCMediaNegotiationBlobMultiwayAudioStream setSupportedPayloads:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setHasSupportedPayloads:]
  -[VCMediaNegotiationBlobMultiwayAudioStream hasSupportedPayloads]
  -[VCMediaNegotiationBlobMultiwayAudioStream supportedPayloads]
  -[VCMediaNegotiationBlobMultiwayAudioStream printWithLogFile:]
  -[VCMediaNegotiationBlobMultiwayAudioStream initWithStreamConfig:]
  -[VCMediaNegotiationBlobMultiwayAudioStream setPayloadFlagsWithPayloads:]
  -[VCMediaNegotiationBlobMultiwayAudioStream newMultiwayAudioStream]


GKNATObserver_SCContext : NSObject
 @property  GKNATObserverInternal *observer

  // instance methods
  -[GKNATObserver_SCContext observer]
  -[GKNATObserver_SCContext setObserver:]


GKNATObserver : NSObject
 @property  NSObject<GKNATObserverDelegate> *delegate

  // class methods
  +[GKNATObserver allocWithZone:]

  // instance methods
  -[GKNATObserver currentNATType]
  -[GKNATObserver setDelegate:]
  -[GKNATObserver delegate]
  -[GKNATObserver shouldTryNATCheck]
  -[GKNATObserver initWithOptions:]


GKNATObserverInternal : GKNATObserver
  // instance methods
  -[GKNATObserverInternal setFlags:forInterface:isCached:isCachedKey:mask:]
  -[GKNATObserverInternal callCommNATTestFromIPPort:ipv6Prefix:]
  -[GKNATObserverInternal copyNatTypeCachePlistScheme]
  -[GKNATObserverInternal currentNATType]
  -[GKNATObserverInternal setDelegate:]
  -[GKNATObserverInternal updateNatTypeCache:]
  -[GKNATObserverInternal setSSLFlags:forInterface:isCached:]
  -[GKNATObserverInternal delegate]
  -[GKNATObserverInternal setTCPFlags:forInterface:isCached:]
  -[GKNATObserverInternal tryNATCheckWithDelay:]
  -[GKNATObserverInternal dealloc]
  -[GKNATObserverInternal release]
  -[GKNATObserverInternal cacheNATFlags:forNetwork:]
  -[GKNATObserverInternal callHTTPTestFromIPPort:ipv6Prefix:ToServer:isSSL:]
  -[GKNATObserverInternal setCommNATFlags:forInterface:isCached:]
  -[GKNATObserverInternal shouldTryNATCheck]
  -[GKNATObserverInternal copyNatTypeCache]
  -[GKNATObserverInternal HTTPSCheckWithIPPort:ipv6Prefix:useCache:]
  -[GKNATObserverInternal reportNATType]
  -[GKNATObserverInternal updateNatTypeCache_OSXGamedScheme:]
  -[GKNATObserverInternal HTTPCheckWithIPPort:ipv6Prefix:useCache:]
  -[GKNATObserverInternal NATCheckWithIPPort:ipv6Prefix:useCache:]
  -[GKNATObserverInternal calculateSummmaryNATType:andCarrierNATType:andNonCarrierNATType:copyInterfaceInfoDictionary:]
  -[GKNATObserverInternal natTypeForCommNATFlags:isCarrier:]
  -[GKNATObserverInternal registerForNetworkChanges]
  -[GKNATObserverInternal nameForNetworkWithIPPort:interfaceName:]
  -[GKNATObserverInternal copyNatTypeCache_OSXGamedScheme]
  -[GKNATObserverInternal lookupCachedNATFlagsForNetwork:]
  -[GKNATObserverInternal ensureNatCachePathExists]
  -[GKNATObserverInternal clearRetries]
  -[GKNATObserverInternal updateNatTypeCache_CachePlistScheme:]
  -[GKNATObserverInternal initWithOptions:]
  -[GKNATObserverInternal init]


VCAudioStreamReceiveGroup : VCMediaStreamReceiveGroup <VCAudioStreamGroup>
 @property  <VCMediaStreamSyncSource> *syncSource
 @property  VCAudioCaptionsCoordinator *captionsCoordinator
 @property  BOOL isMuted
 @property  int deviceRole
 @property  BOOL isPowerSpectrumEnabled

  // instance methods
  -[VCAudioStreamReceiveGroup initWithConfig:]
  -[VCAudioStreamReceiveGroup stopCapture]
  -[VCAudioStreamReceiveGroup dealloc]
  -[VCAudioStreamReceiveGroup isMuted]
  -[VCAudioStreamReceiveGroup setMuted:]
  -[VCAudioStreamReceiveGroup startCapture]
  -[VCAudioStreamReceiveGroup didStart]
  -[VCAudioStreamReceiveGroup didStop]
  -[VCAudioStreamReceiveGroup syncSource]
  -[VCAudioStreamReceiveGroup configureStreams]
  -[VCAudioStreamReceiveGroup setReportingAgent:]
  -[VCAudioStreamReceiveGroup mediaStream:didReceiveNewMediaKeyIndex:]
  -[VCAudioStreamReceiveGroup setDeviceRole:operatingMode:]
  -[VCAudioStreamReceiveGroup deviceRole]
  -[VCAudioStreamReceiveGroup isPowerSpectrumEnabled]
  -[VCAudioStreamReceiveGroup setPowerSpectrumEnabled:]
  -[VCAudioStreamReceiveGroup collectAndLogChannelMetrics:]
  -[VCAudioStreamReceiveGroup setActiveStreamIDs:]
  -[VCAudioStreamReceiveGroup setOptedInStreamID:]
  -[VCAudioStreamReceiveGroup willStart]
  -[VCAudioStreamReceiveGroup addSyncDestination:]
  -[VCAudioStreamReceiveGroup removeSyncDestination:]
  -[VCAudioStreamReceiveGroup setMuteOnStreams]
  -[VCAudioStreamReceiveGroup isAudioExpected]
  -[VCAudioStreamReceiveGroup vcMediaStream:remoteMediaStalled:duration:]
  -[VCAudioStreamReceiveGroup vcMediaStream:didSwitchToAudioStreamWithID:]
  -[VCAudioStreamReceiveGroup vcMediaStream:didReceiveFirstFrameWithTime:]
  -[VCAudioStreamReceiveGroup reportParticipantsPerfTimingsOnce]
  -[VCAudioStreamReceiveGroup captionsCoordinator]
  -[VCAudioStreamReceiveGroup setCaptionsCoordinator:]


VCAudioRelay : NSObject <VCBasebandCodecNotifications>
 @property  ^{OpaqueAudioConverter=} remoteToClientConverter
 @property  ^{OpaqueAudioConverter=} clientToRemoteConverter
 @property  VCAudioRelayIO *remoteIO
 @property  VCAudioRelayIO *clientIO
 @property  NSObject<OS_dispatch_source> *periodicHealthPrintDispatchSource
 @property  unsigned int blocksRelayedCount
 @property  float clientUplinkPowerMovingAverage
 @property  float clientDownlinkPowerMovingAverage
 @property  BOOL isRelayRunning
 @property  double IOBufferDuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioRelay unlock]
  -[VCAudioRelay dealloc]
  -[VCAudioRelay lock]
  -[VCAudioRelay init]
  -[VCAudioRelay IOBufferDuration]
  -[VCAudioRelay didUpdateBasebandCodec:]
  -[VCAudioRelay releasePTPClock]
  -[VCAudioRelay setIOBufferDuration:withError:]
  -[VCAudioRelay ioBufferDurationWithFirstIO:secondIO:]
  -[VCAudioRelay updateRemoteCodecInfo:]
  -[VCAudioRelay remoteIO]
  -[VCAudioRelay setRemoteIO:withError:]
  -[VCAudioRelay clientIO]
  -[VCAudioRelay setClientIO:withError:]
  -[VCAudioRelay canSetPropertyWithError:]
  -[VCAudioRelay startRelayIO:otherRelayIO:]
  -[VCAudioRelay internalStopRelayThread]
  -[VCAudioRelay stopRelayIO:otherRelayIO:]
  -[VCAudioRelay startClientIO]
  -[VCAudioRelay startRemoteIO]
  -[VCAudioRelay stopClientIO]
  -[VCAudioRelay stopRemoteIO]
  -[VCAudioRelay setNetworkClockID:withError:]
  -[VCAudioRelay startRelayThreadWithError:]
  -[VCAudioRelay stopRelayThread]
  -[VCAudioRelay createAudioConvertersWithError:]
  -[VCAudioRelay newAudioConverterWithInputFormat:outputFormat:withError:]
  -[VCAudioRelay destroyAudioConverters]
  -[VCAudioRelay printStreamFormats]
  -[VCAudioRelay rmsPowerOfBuffer:numSamples:]
  -[VCAudioRelay forwardSamplesFromIO:toIO:withConverter:withHostTime:]
  -[VCAudioRelay sleepForTime:]
  -[VCAudioRelay updateRealTimeStats]
  -[VCAudioRelay startPeriodicHealthPrint]
  -[VCAudioRelay relayProcessSamples]
  -[VCAudioRelay relayCallback]
  -[VCAudioRelay isRelayRunning]
  -[VCAudioRelay remoteToClientConverter]
  -[VCAudioRelay clientToRemoteConverter]
  -[VCAudioRelay periodicHealthPrintDispatchSource]
  -[VCAudioRelay blocksRelayedCount]
  -[VCAudioRelay clientDownlinkPowerMovingAverage]
  -[VCAudioRelay clientUplinkPowerMovingAverage]
  -[VCAudioRelay setRemoteIO:]
  -[VCAudioRelay setClientIO:]


VCSessionConfiguration : NSObject
 @property  long long sessionMode
 @property  NSObject<NSCopying> *reportingHierarchyToken
 @property  BOOL oneToOneModeEnabled
 @property  BOOL isGKVoiceChat
 @property  NSUUID *conversationID
 @property  NSDate *conversationTimeBase
 @property  NSDate *conversationTimeBaseTruncated
 @property  NSObject<OS_nw_activity> *parentNWActivity

  // instance methods
  -[VCSessionConfiguration dealloc]
  -[VCSessionConfiguration conversationID]
  -[VCSessionConfiguration init]
  -[VCSessionConfiguration setConversationID:]
  -[VCSessionConfiguration isOneToOneModeEnabled]
  -[VCSessionConfiguration reportingHierarchyToken]
  -[VCSessionConfiguration setReportingHierarchyToken:]
  -[VCSessionConfiguration setOneToOneModeEnabled:]
  -[VCSessionConfiguration sessionMode]
  -[VCSessionConfiguration isGKVoiceChat]
  -[VCSessionConfiguration setIsGKVoiceChat:]
  -[VCSessionConfiguration cleanupNwActivity]
  -[VCSessionConfiguration initWithClientDictionary:]
  -[VCSessionConfiguration setSessionMode:]
  -[VCSessionConfiguration setParentNWActivity:]
  -[VCSessionConfiguration updateWithClientDictionary:]
  -[VCSessionConfiguration applyConfigurationUsingClientDict:]
  -[VCSessionConfiguration conversationTimeBase]
  -[VCSessionConfiguration setConversationTimeBase:]
  -[VCSessionConfiguration conversationTimeBaseTruncated]
  -[VCSessionConfiguration setConversationTimeBaseTruncated:]
  -[VCSessionConfiguration parentNWActivity]


VCVideoRuleCollectionsRemoteCameraEmbedded : VCVideoRuleCollectionsRemoteCamera
  // class methods
  +[VCVideoRuleCollectionsRemoteCameraEmbedded sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsRemoteCameraEmbedded initWithHardwareSettings:]
  -[VCVideoRuleCollectionsRemoteCameraEmbedded initSupportedPayloads]


VCCaptionsStreamSendGroup : VCMediaStreamSendGroup <VCAudioCaptionsDelegate, VCCaptionsSource, VCAudioStreamGroup>
 @property  BOOL captionsSupported
 @property  BOOL captionsEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isMuted
 @property  int deviceRole
 @property  BOOL isPowerSpectrumEnabled

  // instance methods
  -[VCCaptionsStreamSendGroup initWithConfig:]
  -[VCCaptionsStreamSendGroup stopCapture]
  -[VCCaptionsStreamSendGroup dealloc]
  -[VCCaptionsStreamSendGroup isMuted]
  -[VCCaptionsStreamSendGroup setMuted:]
  -[VCCaptionsStreamSendGroup startCapture]
  -[VCCaptionsStreamSendGroup captionsEnabled]
  -[VCCaptionsStreamSendGroup enableCaptions:]
  -[VCCaptionsStreamSendGroup didStop]
  -[VCCaptionsStreamSendGroup setReportingAgent:]
  -[VCCaptionsStreamSendGroup setDeviceRole:operatingMode:]
  -[VCCaptionsStreamSendGroup deviceRole]
  -[VCCaptionsStreamSendGroup isPowerSpectrumEnabled]
  -[VCCaptionsStreamSendGroup setPowerSpectrumEnabled:]
  -[VCCaptionsStreamSendGroup collectAndLogChannelMetrics:]
  -[VCCaptionsStreamSendGroup willStart]
  -[VCCaptionsStreamSendGroup didUpdateCaptions:]
  -[VCCaptionsStreamSendGroup didEnableCaptions:error:]
  -[VCCaptionsStreamSendGroup didDisableCaptions:error:]
  -[VCCaptionsStreamSendGroup didStartCaptioningWithReason:]
  -[VCCaptionsStreamSendGroup didStopCaptioningWithReason:]
  -[VCCaptionsStreamSendGroup registerCaptionsEventDelegate:]
  -[VCCaptionsStreamSendGroup setCaptionsLocale:]
  -[VCCaptionsStreamSendGroup captionsSupported]
  -[VCCaptionsStreamSendGroup updateActiveMediaStreamIDs:withTargetBitrate:mediaBitrates:]
  -[VCCaptionsStreamSendGroup activeStreamKeys]
  -[VCCaptionsStreamSendGroup captionsDelegate]
  -[VCCaptionsStreamSendGroup transmitTranscription:]
  -[VCCaptionsStreamSendGroup onVideoFrame:frameTime:attribute:]


VCAudioStreamCodecConfig : NSObject
 @property  long long codecType
 @property  BOOL octetAligned
 @property  BOOL dtxEnabled
 @property  int preferredMode
 @property  NSArray *supportedModes
 @property  NSArray *supportedBandwidths
 @property  BOOL isComfortNoise
 @property  BOOL dtmf
 @property  unsigned int networkPayload
 @property  unsigned short evsChannelAwareOffset
 @property  BOOL evsHeaderFullOnly
 @property  unsigned long pTime
 @property  BOOL isOpusInBandFecEnabled

  // instance methods
  -[VCAudioStreamCodecConfig dealloc]
  -[VCAudioStreamCodecConfig preferredMode]
  -[VCAudioStreamCodecConfig supportedModes]
  -[VCAudioStreamCodecConfig setSupportedModes:]
  -[VCAudioStreamCodecConfig codecType]
  -[VCAudioStreamCodecConfig setOctetAligned:]
  -[VCAudioStreamCodecConfig setDtxEnabled:]
  -[VCAudioStreamCodecConfig isDTXEnabled]
  -[VCAudioStreamCodecConfig initWithCodecType:]
  -[VCAudioStreamCodecConfig networkPayload]
  -[VCAudioStreamCodecConfig isComfortNoise]
  -[VCAudioStreamCodecConfig setupModesWithClientModeMask:]
  -[VCAudioStreamCodecConfig setupCodecBandwidthsWithClientBandwidthMask:]
  -[VCAudioStreamCodecConfig setPreferredModeWithClientMode:]
  -[VCAudioStreamCodecConfig setupAMRModesWithClientModeMask:]
  -[VCAudioStreamCodecConfig setupAMRWBModesWithClientModeMask:]
  -[VCAudioStreamCodecConfig setupEVSModesWithClientModeMask:]
  -[VCAudioStreamCodecConfig setPreferredMode:]
  -[VCAudioStreamCodecConfig supportedBandwidths]
  -[VCAudioStreamCodecConfig setSupportedBandwidths:]
  -[VCAudioStreamCodecConfig isOctetAligned]
  -[VCAudioStreamCodecConfig isDTMF]
  -[VCAudioStreamCodecConfig setDtmf:]
  -[VCAudioStreamCodecConfig setNetworkPayload:]
  -[VCAudioStreamCodecConfig evsChannelAwareOffset]
  -[VCAudioStreamCodecConfig setEvsChannelAwareOffset:]
  -[VCAudioStreamCodecConfig evsHeaderFullOnly]
  -[VCAudioStreamCodecConfig setEvsHeaderFullOnly:]
  -[VCAudioStreamCodecConfig pTime]
  -[VCAudioStreamCodecConfig setPTime:]
  -[VCAudioStreamCodecConfig isOpusInBandFecEnabled]
  -[VCAudioStreamCodecConfig setIsOpusInBandFecEnabled:]


AVCRTCPPacket : NSObject
 @property  unsigned char packetType
 @property  unsigned int SSRC

  // class methods
  +[AVCRTCPPacket newPacketWithRTCPPacket:]

  // instance methods
  -[AVCRTCPPacket packetType]
  -[AVCRTCPPacket setPacketType:]
  -[AVCRTCPPacket SSRC]
  -[AVCRTCPPacket initWithRTCPPacket:]
  -[AVCRTCPPacket setSSRC:]


AVCRTCPSenderReport : AVCRTCPPacket
 @property  unsigned int NTPMostSignificantWord
 @property  unsigned int NTPLeastSignificantWord
 @property  unsigned int RTPTimestamp
 @property  unsigned int packetsSent
 @property  unsigned int octetsSent
 @property  AVCRTCPReceiverReport *receiverReport

  // instance methods
  -[AVCRTCPSenderReport dealloc]
  -[AVCRTCPSenderReport packetsSent]
  -[AVCRTCPSenderReport setPacketsSent:]
  -[AVCRTCPSenderReport receiverReport]
  -[AVCRTCPSenderReport NTPLeastSignificantWord]
  -[AVCRTCPSenderReport octetsSent]
  -[AVCRTCPSenderReport RTPTimestamp]
  -[AVCRTCPSenderReport NTPMostSignificantWord]
  -[AVCRTCPSenderReport initWithRTCPPacket:]
  -[AVCRTCPSenderReport setNTPMostSignificantWord:]
  -[AVCRTCPSenderReport setNTPLeastSignificantWord:]
  -[AVCRTCPSenderReport setRTPTimestamp:]
  -[AVCRTCPSenderReport setOctetsSent:]
  -[AVCRTCPSenderReport setReceiverReport:]


AVCRTCPReceiverReport : AVCRTCPPacket
 @property  unsigned int reportedSourceSSRC
 @property  unsigned char fractionLost
 @property  unsigned int cumulativePacketsLost
 @property  unsigned int extendedHighestSequenceNumber
 @property  unsigned int interarrivalJitter
 @property  unsigned int lastSRTimestamp
 @property  unsigned int delaySinceLastSR

  // instance methods
  -[AVCRTCPReceiverReport extendedHighestSequenceNumber]
  -[AVCRTCPReceiverReport reportedSourceSSRC]
  -[AVCRTCPReceiverReport fractionLost]
  -[AVCRTCPReceiverReport cumulativePacketsLost]
  -[AVCRTCPReceiverReport interarrivalJitter]
  -[AVCRTCPReceiverReport delaySinceLastSR]
  -[AVCRTCPReceiverReport lastSRTimestamp]
  -[AVCRTCPReceiverReport initWithRTCPPacket:]
  -[AVCRTCPReceiverReport setReportedSourceSSRC:]
  -[AVCRTCPReceiverReport setFractionLost:]
  -[AVCRTCPReceiverReport setCumulativePacketsLost:]
  -[AVCRTCPReceiverReport setExtendedHighestSequenceNumber:]
  -[AVCRTCPReceiverReport setInterarrivalJitter:]
  -[AVCRTCPReceiverReport setLastSRTimestamp:]
  -[AVCRTCPReceiverReport setDelaySinceLastSR:]


AVCRTCPSourceDescription : AVCRTCPPacket
 @property  unsigned char type
 @property  NSString *text

  // instance methods
  -[AVCRTCPSourceDescription text]
  -[AVCRTCPSourceDescription type]
  -[AVCRTCPSourceDescription dealloc]
  -[AVCRTCPSourceDescription setType:]
  -[AVCRTCPSourceDescription setText:]
  -[AVCRTCPSourceDescription initWithRTCPPacket:]


VCAudioPowerSpectrumSource : VCObject <VCAudioIOSink>
 @property  long long streamToken
 @property  ^{_VCAudioPowerSpectrumSourceRealtimeContext={_VCSingleLinkedList=^{_VCSingleLinkedListEntry}B^?Q}^{opaqueCMSimpleQueue}@} realtimeContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioPowerSpectrumSource dealloc]
  -[VCAudioPowerSpectrumSource invalidate]
  -[VCAudioPowerSpectrumSource initWithStreamToken:delegate:]
  -[VCAudioPowerSpectrumSource streamToken]
  -[VCAudioPowerSpectrumSource realtimeContext]
  -[VCAudioPowerSpectrumSource pushAudioSamples:]
  -[VCAudioPowerSpectrumSource cleanupQueue:]
  -[VCAudioPowerSpectrumSource cleanupAudioPowerSpectrumSinks]


GKRingBuffer : NSObject
  // instance methods
  -[GKRingBuffer dealloc]
  -[GKRingBuffer init]
  -[GKRingBuffer initWithCapacity:bytesPerFrame:]
  -[GKRingBuffer increaseCapacity:]
  -[GKRingBuffer store:numSamples:timestamp:]
  -[GKRingBuffer needsNewNumSamples:timestamp:]
  -[GKRingBuffer fetch:numSamples:timestamp:]


IPPortWrapper : NSObject
 @property  ^{tagIPPORT=i[16c](?=I[16C])S} ipport

  // instance methods
  -[IPPortWrapper setIpport:]
  -[IPPortWrapper dealloc]
  -[IPPortWrapper ipport]
  -[IPPortWrapper init]


IPv6PrefixWrapper : NSObject
 @property  r^{?=i[12C]} ipv6Prefix

  // instance methods
  -[IPv6PrefixWrapper initWithPrefix:]
  -[IPv6PrefixWrapper dealloc]
  -[IPv6PrefixWrapper ipv6Prefix]


GKSConnectivitySettings : NSObject
  // class methods
  +[GKSConnectivitySettings getStorebagValueForStorebagKey:userDefaultKey:defaultValue:isDoubleType:]
  +[GKSConnectivitySettings getShortTermValueWeightC]
  +[GKSConnectivitySettings setServerAddresses:]
  +[GKSConnectivitySettings getNATTypeFromCarrierBundle]
  +[GKSConnectivitySettings getAbTestingState]
  +[GKSConnectivitySettings supportsEVSCodec]
  +[GKSConnectivitySettings getTestGroupPermutations:]
  +[GKSConnectivitySettings getShortTermHistoryLength]
  +[GKSConnectivitySettings getLongTermValueWeightB]
  +[GKSConnectivitySettings getDecryptionMKMRecoveryInterval]
  +[GKSConnectivitySettings supportiRATRecommendation]
  +[GKSConnectivitySettings getAdjustmentFactorC]
  +[GKSConnectivitySettings getShortTermValueWeightB]
  +[GKSConnectivitySettings getRateControllerType]
  +[GKSConnectivitySettings getDecryptionTimeoutInterval]
  +[GKSConnectivitySettings getVCRCSeverBagConfigWithKey:]
  +[GKSConnectivitySettings getIPPortForService:]
  +[GKSConnectivitySettings supportsHEVCEncoding]
  +[GKSConnectivitySettings getLongTermValueWeightC]
  +[GKSConnectivitySettings getAdjustmentFactorA]
  +[GKSConnectivitySettings getCachedIPPort]
  +[GKSConnectivitySettings getAdaptiveLearningState]
  +[GKSConnectivitySettings clearAllSettingsWithRefreshIntervalInSeconds:]
  +[GKSConnectivitySettings getRemoteMediaStallTimeout]
  +[GKSConnectivitySettings getWRMRSSIThresholdValue:]
  +[GKSConnectivitySettings getNoRemoteDuplicationThresholdFast]
  +[GKSConnectivitySettings getKeepAliveTimeoutFromCarrierBundle]
  +[GKSConnectivitySettings setClientOptions:]
  +[GKSConnectivitySettings getFeatureFlagForStorebagKey:userDefaultKey:featureFlagDomain:featureFlagName:]
  +[GKSConnectivitySettings getLongTermHistoryLength]
  +[GKSConnectivitySettings getNewSessionJoiningInterval]
  +[GKSConnectivitySettings getStorebagValueStorebagKey:defaultValue:]
  +[GKSConnectivitySettings getAdjustmentFactorB]
  +[GKSConnectivitySettings getAbTestMasterLocalSwitches]
  +[GKSConnectivitySettings getLongTermValueWeightA]
  +[GKSConnectivitySettings getShortTermValueWeightA]
  +[GKSConnectivitySettings supportsRedAudio]
  +[GKSConnectivitySettings getAllSettings]
  +[GKSConnectivitySettings getAdaptiveLearningB]
  +[GKSConnectivitySettings getThresholdForSwitch:]
  +[GKSConnectivitySettings setAddress:forService:]
  +[GKSConnectivitySettings getClientOption:]
  +[GKSConnectivitySettings getAddressForService:]
  +[GKSConnectivitySettings getAdaptiveLearningA]

  // instance methods
  -[GKSConnectivitySettings dealloc]
  -[GKSConnectivitySettings init]


VCRedundancyControlAlgorithmVideo : NSObject <VCRedundancyControlAlgorithm>
 @property  BOOL isRedundancyStrategyResetPending
 @property  unsigned int redundancyPercentage
 @property  double redundancyInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRedundancyControlAlgorithmVideo dealloc]
  -[VCRedundancyControlAlgorithmVideo reset]
  -[VCRedundancyControlAlgorithmVideo updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControlAlgorithmVideo redundancyPercentage]
  -[VCRedundancyControlAlgorithmVideo redundancyInterval]
  -[VCRedundancyControlAlgorithmVideo getFecLevelPerFrameSizeVector]
  -[VCRedundancyControlAlgorithmVideo initWithRedundancyControllerMode:maxAllowedRedundancyPercentage:mediaControlInfoFECFeedbackVersion:]
  -[VCRedundancyControlAlgorithmVideo setupFeedbackAnalyzerConfig]
  -[VCRedundancyControlAlgorithmVideo stateRunning:]
  -[VCRedundancyControlAlgorithmVideo stateFrozen:]
  -[VCRedundancyControlAlgorithmVideo checkForRedundancyFreeze:]
  -[VCRedundancyControlAlgorithmVideo processNWConnectionStatistics:]
  -[VCRedundancyControlAlgorithmVideo processRCNetworkStatistics:]
  -[VCRedundancyControlAlgorithmVideo updateBurstyLoss:]
  -[VCRedundancyControlAlgorithmVideo computeRedundancyWithLossPercentage]
  -[VCRedundancyControlAlgorithmVideo computeRedundancyWithBurstyLoss]
  -[VCRedundancyControlAlgorithmVideo isRedundancyStrategyResetPending]
  -[VCRedundancyControlAlgorithmVideo setIsRedundancyStrategyResetPending:]


VCMediaNegotiatorMultiwayMediaStream : NSObject <NSCopying>
 @property  unsigned int ssrc
 @property  unsigned int maxNetworkBitrate
 @property  unsigned int maxMediaBitrate
 @property  unsigned int maxPacketsPerSecond
 @property  BOOL isSubstream
 @property  unsigned short streamID
 @property  unsigned int qualityIndex
 @property  BOOL hasRepairedStreamID
 @property  unsigned short repairedStreamID
 @property  unsigned int repairedMaxNetworkBitrate

  // instance methods
  -[VCMediaNegotiatorMultiwayMediaStream streamID]
  -[VCMediaNegotiatorMultiwayMediaStream copyWithZone:]
  -[VCMediaNegotiatorMultiwayMediaStream isEqual:]
  -[VCMediaNegotiatorMultiwayMediaStream setStreamID:]
  -[VCMediaNegotiatorMultiwayMediaStream setMaxNetworkBitrate:]
  -[VCMediaNegotiatorMultiwayMediaStream setMaxMediaBitrate:]
  -[VCMediaNegotiatorMultiwayMediaStream setMaxPacketsPerSecond:]
  -[VCMediaNegotiatorMultiwayMediaStream setRepairedStreamID:]
  -[VCMediaNegotiatorMultiwayMediaStream setHasRepairedStreamID:]
  -[VCMediaNegotiatorMultiwayMediaStream hasRepairedStreamID]
  -[VCMediaNegotiatorMultiwayMediaStream setRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiatorMultiwayMediaStream ssrc]
  -[VCMediaNegotiatorMultiwayMediaStream setSsrc:]
  -[VCMediaNegotiatorMultiwayMediaStream maxNetworkBitrate]
  -[VCMediaNegotiatorMultiwayMediaStream qualityIndex]
  -[VCMediaNegotiatorMultiwayMediaStream setQualityIndex:]
  -[VCMediaNegotiatorMultiwayMediaStream maxMediaBitrate]
  -[VCMediaNegotiatorMultiwayMediaStream maxPacketsPerSecond]
  -[VCMediaNegotiatorMultiwayMediaStream repairedStreamID]
  -[VCMediaNegotiatorMultiwayMediaStream repairedMaxNetworkBitrate]
  -[VCMediaNegotiatorMultiwayMediaStream isSubstream]
  -[VCMediaNegotiatorMultiwayMediaStream setIsSubstream:]


GKVoiceChatError : NSObject
  // class methods
  +[GKVoiceChatError getNSError:code:detailedCode:returnCode:filePath:description:reason:]
  +[GKVoiceChatError getNSError:code:detailedCode:filePath:description:reason:]


VCVideoStreamNOWRDLossEventRateControl : NSObject <VCVideoStreamRateControlProtocol>
 @property  int state
 @property  unsigned int targetBitrate
 @property  double owrd
 @property  double nowrd
 @property  double nowrdShort
 @property  double nowrdAcc
 @property  double rateControlInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoStreamNOWRDLossEventRateControl state]
  -[VCVideoStreamNOWRDLossEventRateControl className]
  -[VCVideoStreamNOWRDLossEventRateControl init]
  -[VCVideoStreamNOWRDLossEventRateControl targetBitrate]
  -[VCVideoStreamNOWRDLossEventRateControl doRateControlWithTime:roundTripTime:packetLossRate:operatingTierIndex:averageReceivedBitrate:]
  -[VCVideoStreamNOWRDLossEventRateControl updateRTPReceiveWithTimestamp:sampleRate:time:]
  -[VCVideoStreamNOWRDLossEventRateControl setMaxTierIndex:minTierIndex:]
  -[VCVideoStreamNOWRDLossEventRateControl owrd]
  -[VCVideoStreamNOWRDLossEventRateControl nowrd]
  -[VCVideoStreamNOWRDLossEventRateControl nowrdShort]
  -[VCVideoStreamNOWRDLossEventRateControl nowrdAcc]
  -[VCVideoStreamNOWRDLossEventRateControl rateControlInterval]
  -[VCVideoStreamNOWRDLossEventRateControl setRateControlInterval:]
  -[VCVideoStreamNOWRDLossEventRateControl printRateControlFullInfoWithLogDump:time:videoStall:videoFrozenDuration:averageTargetBitrate:]
  -[VCVideoStreamNOWRDLossEventRateControl stateChange:]
  -[VCVideoStreamNOWRDLossEventRateControl stateExit]
  -[VCVideoStreamNOWRDLossEventRateControl stateEnter]
  -[VCVideoStreamNOWRDLossEventRateControl rampUpTier]
  -[VCVideoStreamNOWRDLossEventRateControl rampDownTier]
  -[VCVideoStreamNOWRDLossEventRateControl shouldRampDown]
  -[VCVideoStreamNOWRDLossEventRateControl shouldRampUp]
  -[VCVideoStreamNOWRDLossEventRateControl updatePacketLossRate:time:]
  -[VCVideoStreamNOWRDLossEventRateControl lossEventCount]
  -[VCVideoStreamNOWRDLossEventRateControl lossEventCountThresholdForBitrate:]
  -[VCVideoStreamNOWRDLossEventRateControl resetLossEventBuffer]
  -[VCVideoStreamNOWRDLossEventRateControl calculateOWRDWithTimestamp:sampleRate:time:]
  -[VCVideoStreamNOWRDLossEventRateControl calculateNOWRD:time:]


VCScreenCaptureVirtualDisplay : VCObject <VCScreenCaptureSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCScreenCaptureVirtualDisplay finalize]
  -[VCScreenCaptureVirtualDisplay dealloc]
  -[VCScreenCaptureVirtualDisplay startScreenCaptureWithConfig:]
  -[VCScreenCaptureVirtualDisplay stopScreenCapture]
  -[VCScreenCaptureVirtualDisplay pauseScreenCapture:]
  -[VCScreenCaptureVirtualDisplay initWithDelegate:screenCaptureSourceContext:]
  -[VCScreenCaptureVirtualDisplay setupCaptureSession:]
  -[VCScreenCaptureVirtualDisplay shouldClearScreen:]
  -[VCScreenCaptureVirtualDisplay callbackWithEventString:]


VCTransportSessionNW : VCTransportSession
  // instance methods
  -[VCTransportSessionNW dealloc]
  -[VCTransportSessionNW isIPv6]
  -[VCTransportSessionNW stop]
  -[VCTransportSessionNW start]
  -[VCTransportSessionNW initWithRTPNWConnectionID:RTCPNWConnectionID:handlerQueue:context:notificationHandler:eventHandler:]
  -[VCTransportSessionNW createNWConnection:forConnectionID:]
  -[VCTransportSessionNW handleStateChanges:error:semaphore:operationResult:]
  -[VCTransportSessionNW setStateChangeHandlerForConnection:result:semaphore:]
  -[VCTransportSessionNW setupNWConnection:]
  -[VCTransportSessionNW createVFD:forStreamType:]
  -[VCTransportSessionNW createNWMonitor]
  -[VCTransportSessionNW destroyNWMonitor]
  -[VCTransportSessionNW dupRTPNWConnectionBackingSocket]
  -[VCTransportSessionNW dupRTCPNWConnectionBackingSocket]
  -[VCTransportSessionNW dupRTPNWConnectionBackingSocketForNWConnection:]
  -[VCTransportSessionNW initializeInterfaceType]
  -[VCTransportSessionNW initializeNetworkMTU]
  -[VCTransportSessionNW initializeIsIPv6]
  -[VCTransportSessionNW networkInterfaceType]
  -[VCTransportSessionNW networkMTU]


VCAudioStreamGroupCommon : VCObject <VCAudioStreamGroup, VCMediaCaptureController, VCAudioPowerSpectrumSourceDelegate, VCAudioIODelegate>
 @property  ^{tagVCAudioStreamGroupStream=^{tagVCAudioStreamGroupStream}BB^v^?S@II} audioStreams
 @property  VCAudioIO *audioIO
 @property  unsigned int audioChannelIndex
 @property  BOOL isMuted
 @property  int deviceRole
 @property  BOOL isPowerSpectrumEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioStreamGroupCommon isSupportedDirection:]

  // instance methods
  -[VCAudioStreamGroupCommon stopCapture]
  -[VCAudioStreamGroupCommon dealloc]
  -[VCAudioStreamGroupCommon isMuted]
  -[VCAudioStreamGroupCommon setMuted:]
  -[VCAudioStreamGroupCommon startCapture]
  -[VCAudioStreamGroupCommon didUpdateBasebandCodec:]
  -[VCAudioStreamGroupCommon didServerDie]
  -[VCAudioStreamGroupCommon setDeviceRole:operatingMode:]
  -[VCAudioStreamGroupCommon deviceRole]
  -[VCAudioStreamGroupCommon isPowerSpectrumEnabled]
  -[VCAudioStreamGroupCommon setPowerSpectrumEnabled:]
  -[VCAudioStreamGroupCommon audioPowerSpectrumSinkDidRegister]
  -[VCAudioStreamGroupCommon audioPowerSpectrumSinkDidUnregister]
  -[VCAudioStreamGroupCommon didSuspendAudioIO:]
  -[VCAudioStreamGroupCommon didResumeAudioIO:]
  -[VCAudioStreamGroupCommon initWithConfig:audioCallback:context:audioDirection:]
  -[VCAudioStreamGroupCommon audioTypeForCaptureSource:]
  -[VCAudioStreamGroupCommon flushSyncDestinationUpdatesEventQueue]
  -[VCAudioStreamGroupCommon audioStreams]
  -[VCAudioStreamGroupCommon configurePowerSpectrumSource]
  -[VCAudioStreamGroupCommon cleanupPowerSpectrumSource]
  -[VCAudioStreamGroupCommon setupStreamsWithStreamInfos:]
  -[VCAudioStreamGroupCommon cleanupStreams]
  -[VCAudioStreamGroupCommon configureAudioIOWithDeviceRole:operatingMode:]
  -[VCAudioStreamGroupCommon reconfigureAudioIOIfNeededWithDeviceRole:operatingMode:]
  -[VCAudioStreamGroupCommon addSyncDestination:shouldSchedule:]
  -[VCAudioStreamGroupCommon removeSyncDestination:shouldSchedule:]
  -[VCAudioStreamGroupCommon getAudioDumpName]
  -[VCAudioStreamGroupCommon startAudioDump]
  -[VCAudioStreamGroupCommon stopAudioDump]
  -[VCAudioStreamGroupCommon configureStreams:withRateControlConfig:]
  -[VCAudioStreamGroupCommon collectAndLogChannelMetrics:averagePower:]
  -[VCAudioStreamGroupCommon enqueueSyncDestinationChangeEvent:eventType:]
  -[VCAudioStreamGroupCommon sendAudioPowerSpectrumSourceRegistration:]
  -[VCAudioStreamGroupCommon cleanupSyncDestinations]
  -[VCAudioStreamGroupCommon audioIO]
  -[VCAudioStreamGroupCommon audioChannelIndex]
  -[VCAudioStreamGroupCommon setAudioChannelIndex:]


GKInterfaceListener : NSObject
 @property  BOOL _isWifiUp
 @property  BOOL _isCellUp
 @property  <InterfaceListenerDelegate> *interfaceListenerDelegate

  // instance methods
  -[GKInterfaceListener dealloc]
  -[GKInterfaceListener init]
  -[GKInterfaceListener hasConnectionWithWifi:cell:]
  -[GKInterfaceListener startChangeListener]
  -[GKInterfaceListener stopChangeListener]
  -[GKInterfaceListener startRoutingChangeListener]
  -[GKInterfaceListener stopRoutingChangeListener]
  -[GKInterfaceListener setInterfaceListenerDelegate:]
  -[GKInterfaceListener interfaceListenerDelegate]
  -[GKInterfaceListener _isWifiUp]
  -[GKInterfaceListener set_isWifiUp:]
  -[GKInterfaceListener _isCellUp]
  -[GKInterfaceListener set_isCellUp:]


VCRedundancyControlAlgorithmVideoIpadCompanion : NSObject <VCRedundancyControlAlgorithm>
 @property  unsigned int redundancyPercentage
 @property  double redundancyInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRedundancyControlAlgorithmVideoIpadCompanion updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControlAlgorithmVideoIpadCompanion redundancyPercentage]
  -[VCRedundancyControlAlgorithmVideoIpadCompanion redundancyInterval]
  -[VCRedundancyControlAlgorithmVideoIpadCompanion updateBurstyLoss:]
  -[VCRedundancyControlAlgorithmVideoIpadCompanion computeRedundancyWithLossPercentage]
  -[VCRedundancyControlAlgorithmVideoIpadCompanion computeRedundancyWithBurstyLoss]


VCMediaNegotiationBlobBandwidthSettings : PBCodable <NSCopying>
 @property  int configuration
 @property  unsigned int maxBandwidth
 @property  BOOL hasConfigurationExtension
 @property  int configurationExtension

  // class methods
  +[VCMediaNegotiationBlobBandwidthSettings bandwidthConfigurationWithOperatingMode:connectionType:]

  // instance methods
  -[VCMediaNegotiationBlobBandwidthSettings setConfiguration:]
  -[VCMediaNegotiationBlobBandwidthSettings copyTo:]
  -[VCMediaNegotiationBlobBandwidthSettings configuration]
  -[VCMediaNegotiationBlobBandwidthSettings mergeFrom:]
  -[VCMediaNegotiationBlobBandwidthSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobBandwidthSettings copyWithZone:]
  -[VCMediaNegotiationBlobBandwidthSettings readFrom:]
  -[VCMediaNegotiationBlobBandwidthSettings writeTo:]
  -[VCMediaNegotiationBlobBandwidthSettings isEqual:]
  -[VCMediaNegotiationBlobBandwidthSettings maxBandwidth]
  -[VCMediaNegotiationBlobBandwidthSettings setMaxBandwidth:]
  -[VCMediaNegotiationBlobBandwidthSettings configurationAsString:]
  -[VCMediaNegotiationBlobBandwidthSettings StringAsConfiguration:]
  -[VCMediaNegotiationBlobBandwidthSettings configurationExtension]
  -[VCMediaNegotiationBlobBandwidthSettings setConfigurationExtension:]
  -[VCMediaNegotiationBlobBandwidthSettings setHasConfigurationExtension:]
  -[VCMediaNegotiationBlobBandwidthSettings hasConfigurationExtension]
  -[VCMediaNegotiationBlobBandwidthSettings configurationExtensionAsString:]
  -[VCMediaNegotiationBlobBandwidthSettings StringAsConfigurationExtension:]
  -[VCMediaNegotiationBlobBandwidthSettings newBandwidthConfigurations]


VCRateControlUtil : NSObject
  // class methods
  +[VCRateControlUtil calculateCongestionMetricsFromOWRDList:owrd:time:config:isInitialRampUp:]
  +[VCRateControlUtil prepareOWRDList:owrd:time:config:]
  +[VCRateControlUtil calculateNOWRDWithOWRDList:config:isInitialRampUp:]
  +[VCRateControlUtil calculateNOWRDShortWithOWRDList:config:isInitialRampUp:]
  +[VCRateControlUtil calculateNOWRDWithDuration:owrdList:historySize:minHistorySize:initalRampUpReadyDuration:isInitialRampUp:]
  +[VCRateControlUtil calculateNOWRDAccWithOWRDList:config:]


ICEResultQuery : NSObject
 @property  ^{tagCONNRESULT=IiiIiiSS{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}IiiiiSiii^{tagCONNRESULT}i} result
 @property  unsigned int callID
 @property  BOOL isQueryAnswered

  // instance methods
  -[ICEResultQuery setResult:]
  -[ICEResultQuery initWithResult:]
  -[ICEResultQuery dealloc]
  -[ICEResultQuery result]
  -[ICEResultQuery callID]
  -[ICEResultQuery setCallID:]
  -[ICEResultQuery initWithCallID:]
  -[ICEResultQuery isQueryAnswered]
  -[ICEResultQuery setIsQueryAnswered:]


ICEResultWaitQueue : NSObject
  // instance methods
  -[ICEResultWaitQueue dealloc]
  -[ICEResultWaitQueue init]
  -[ICEResultWaitQueue copyResultForCallID:]
  -[ICEResultWaitQueue addResult:forCallID:]


VCMomentsHistory : NSObject <VCMomentsHistoryBufferDelegate>
 @property  VideoAttributes *remoteScreenAttributes
 @property  int imageType
 @property  int videoCodec
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCMomentsHistory imageType]
  -[VCMomentsHistory dealloc]
  -[VCMomentsHistory setImageType:]
  -[VCMomentsHistory setVideoCodec:]
  -[VCMomentsHistory setFrameRate:]
  -[VCMomentsHistory init]
  -[VCMomentsHistory videoCodec]
  -[VCMomentsHistory remoteScreenAttributes]
  -[VCMomentsHistory historyBuffer:didDequeueSample:timestamp:]
  -[VCMomentsHistory addLocalAudioSample:timestamp:]
  -[VCMomentsHistory addRemoteAudioSample:timestamp:]
  -[VCMomentsHistory addLocalVideoSampleBuffer:cameraStatusBits:timestamp:]
  -[VCMomentsHistory updateRemoteScreenAttributes:]
  -[VCMomentsHistory updateResizeFlag]
  -[VCMomentsHistory setRetainPixelBufferEnabled:]
  -[VCMomentsHistory getPhotoWithTransactionID:timestamp:completionHandler:]
  -[VCMomentsHistory getLivePhotoWithTransactionID:timestamp:completionHandler:]
  -[VCMomentsHistory startRecording:transactionID:timestamp:completionHandler:]
  -[VCMomentsHistory endRecording:timestamp:completionHandler:]
  -[VCMomentsHistory _getActiveWriters]
  -[VCMomentsHistory cleanupActiveRequests]
  -[VCMomentsHistory cancelRequestWithTransactionID:]
  -[VCMomentsHistory writeToFileWithTimestamp:transactionID:URL:imageType:]
  -[VCMomentsHistory writeToLivePhotoToFileWithFrame:transactionID:URL:imageType:cameraStatusBits:]
  -[VCMomentsHistory setupStillImageWithTimestamp:transactionID:visibleRect:cameraStatusBit:imageType:]
  -[VCMomentsHistory setupResizingSessionsWithVisibleRect:cameraStatusBit:]
  -[VCMomentsHistory calculateVisibleAreaWithVisibleRect:cameraStatusBit:]
  -[VCMomentsHistory setupWriterWithTransactionID:filePath:stillImageTime:visibleRect:cameraStatusBit:]
  -[VCMomentsHistory getFilePathWithTransactionID:type:]
  -[VCMomentsHistory rewriteMovieMetadataWithURL:transactionID:]
  -[VCMomentsHistory handleSinglePendingRequestWithTransactionID:sourceURL:]
  -[VCMomentsHistory handlePendingRequestWithError:]
  -[VCMomentsHistory handlePendingRequestSuccessWithSourceURL:]
  -[VCMomentsHistory handlePendingRequestsWithSourceURL:error:]
  -[VCMomentsHistory updateAudioBuffer:WithSample:timestamp:]
  -[VCMomentsHistory copyBuffer:]
  -[VCMomentsHistory updateVideoBuffer:withPresentationTime:sampleBufferCopy:cameraStatusBits:timestamp:retainPixelBuffer:]
  -[VCMomentsHistory flushHistoryBuffers]
  -[VCMomentsHistory _mediaTypeForBuffer:]
  -[VCMomentsHistory appendSampleWithWriter:buffer:sample:]
  -[VCMomentsHistory updateCaptureSizesWithFirstFrame:]
  -[VCMomentsHistory registerDirectoryWithFilePath:]
  -[VCMomentsHistory setCompeletionHandler:forTransactionID:]
  -[VCMomentsHistory cleanupTransferSession]
  -[VCMomentsHistory setRemoteScreenAttributes:]


VCEmulatedNetworkAlgorithmQueueBandwidth : NSObject <VCEmulatedNetworkAlgorithm>
 @property  double expectedProcessEndTime
 @property  unsigned int packetCountInNetworkQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCEmulatedNetworkAlgorithmQueueBandwidth process:]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth init]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth updateSettingsAtTime:impairments:]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth expectedProcessEndTime]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth packetCountInNetworkQueue]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth setPacketCountInNetworkQueue:]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth computeNetworkServiceRate]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth shouldDropPacketWithCurrentAQMBudget:]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth addPacketToBudgetBuffer:]
  -[VCEmulatedNetworkAlgorithmQueueBandwidth getRemainingAQMBudgetWithPacket:]


VCMediaNegotiatorResultsFaceTimeSettings : NSObject
 @property  BOOL SIPDisabled
 @property  BOOL secureMessagingRequired
 @property  BOOL remoteFaceTimeSwitchesAvailable
 @property  unsigned int faceTimeSwitches
 @property  BOOL oneToOneModeSupported
 @property  unsigned char mediaControlInfoFECFeedbackVersion
 @property  unsigned char remoteLinkProbingCapabilityVersion

  // instance methods
  -[VCMediaNegotiatorResultsFaceTimeSettings mediaControlInfoFECFeedbackVersion]
  -[VCMediaNegotiatorResultsFaceTimeSettings setMediaControlInfoFECFeedbackVersion:]
  -[VCMediaNegotiatorResultsFaceTimeSettings SIPDisabled]
  -[VCMediaNegotiatorResultsFaceTimeSettings setSIPDisabled:]
  -[VCMediaNegotiatorResultsFaceTimeSettings secureMessagingRequired]
  -[VCMediaNegotiatorResultsFaceTimeSettings setSecureMessagingRequired:]
  -[VCMediaNegotiatorResultsFaceTimeSettings faceTimeSwitches]
  -[VCMediaNegotiatorResultsFaceTimeSettings setFaceTimeSwitches:]
  -[VCMediaNegotiatorResultsFaceTimeSettings oneToOneModeSupported]
  -[VCMediaNegotiatorResultsFaceTimeSettings setOneToOneModeSupported:]
  -[VCMediaNegotiatorResultsFaceTimeSettings remoteLinkProbingCapabilityVersion]
  -[VCMediaNegotiatorResultsFaceTimeSettings setRemoteLinkProbingCapabilityVersion:]
  -[VCMediaNegotiatorResultsFaceTimeSettings remoteFaceTimeSwitchesAvailable]
  -[VCMediaNegotiatorResultsFaceTimeSettings setRemoteFaceTimeSwitchesAvailable:]


VCMediaNegotiationBlobMomentsSettings : PBCodable <NSCopying>
 @property  unsigned int capabilities
 @property  BOOL hasSupportedVideoCodecs
 @property  unsigned int supportedVideoCodecs
 @property  BOOL hasSupportedImageTypes
 @property  unsigned int supportedImageTypes
 @property  BOOL hasMultiwayCapabilities
 @property  unsigned int multiwayCapabilities

  // class methods
  +[VCMediaNegotiationBlobMomentsSettings avcMomentsCapabilitiesForMultiwayMomentsCapabilities:]
  +[VCMediaNegotiationBlobMomentsSettings capabilitiesBitmapWithCapabilities:]

  // instance methods
  -[VCMediaNegotiationBlobMomentsSettings copyTo:]
  -[VCMediaNegotiationBlobMomentsSettings supportedImageTypes]
  -[VCMediaNegotiationBlobMomentsSettings capabilities]
  -[VCMediaNegotiationBlobMomentsSettings mergeFrom:]
  -[VCMediaNegotiationBlobMomentsSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobMomentsSettings copyWithZone:]
  -[VCMediaNegotiationBlobMomentsSettings setCapabilities:]
  -[VCMediaNegotiationBlobMomentsSettings readFrom:]
  -[VCMediaNegotiationBlobMomentsSettings writeTo:]
  -[VCMediaNegotiationBlobMomentsSettings isEqual:]
  -[VCMediaNegotiationBlobMomentsSettings supportedVideoCodecs]
  -[VCMediaNegotiationBlobMomentsSettings setSupportedVideoCodecs:]
  -[VCMediaNegotiationBlobMomentsSettings setHasSupportedVideoCodecs:]
  -[VCMediaNegotiationBlobMomentsSettings hasSupportedVideoCodecs]
  -[VCMediaNegotiationBlobMomentsSettings setSupportedImageTypes:]
  -[VCMediaNegotiationBlobMomentsSettings setHasSupportedImageTypes:]
  -[VCMediaNegotiationBlobMomentsSettings hasSupportedImageTypes]
  -[VCMediaNegotiationBlobMomentsSettings setMultiwayCapabilities:]
  -[VCMediaNegotiationBlobMomentsSettings setHasMultiwayCapabilities:]
  -[VCMediaNegotiationBlobMomentsSettings hasMultiwayCapabilities]
  -[VCMediaNegotiationBlobMomentsSettings multiwayCapabilities]
  -[VCMediaNegotiationBlobMomentsSettings initWithVideoCodecs:imageTypes:capabilities:multiwayCapabilities:]
  -[VCMediaNegotiationBlobMomentsSettings newVideoCodecSet]
  -[VCMediaNegotiationBlobMomentsSettings newImageTypeSet]


VCRateControlAlgorithmSparseNOWRD : VCRateControlAlgorithmBase
 @property  BOOL basebandAdaptationEnabled

  // instance methods
  -[VCRateControlAlgorithmSparseNOWRD init]
  -[VCRateControlAlgorithmSparseNOWRD doRateControlWithStatistics:]
  -[VCRateControlAlgorithmSparseNOWRD doRateControlWithBasebandStatistics:]
  -[VCRateControlAlgorithmSparseNOWRD rampUpTier]
  -[VCRateControlAlgorithmSparseNOWRD rampDownTier]
  -[VCRateControlAlgorithmSparseNOWRD shouldRampDown]
  -[VCRateControlAlgorithmSparseNOWRD shouldRampUp]
  -[VCRateControlAlgorithmSparseNOWRD configure:restartRequired:]
  -[VCRateControlAlgorithmSparseNOWRD doRateControlWithVCRCStatistics:]
  -[VCRateControlAlgorithmSparseNOWRD noServerStatsActivityDetected]
  -[VCRateControlAlgorithmSparseNOWRD checkCongestionStatus]
  -[VCRateControlAlgorithmSparseNOWRD shouldBlockRampUpDueToNetworkUnstable]
  -[VCRateControlAlgorithmSparseNOWRD shouldBlockRampUpDueToRecentLossEvent]
  -[VCRateControlAlgorithmSparseNOWRD shouldRampDownDueToBaseband]
  -[VCRateControlAlgorithmSparseNOWRD shouldUnblockRampUpAfterTimeOut]
  -[VCRateControlAlgorithmSparseNOWRD shouldRampUpDueToBaseband]
  -[VCRateControlAlgorithmSparseNOWRD rampDownTierDueToBaseband]
  -[VCRateControlAlgorithmSparseNOWRD updateLastEmergencyBasebandRampDownTimeWithTierIndex:]
  -[VCRateControlAlgorithmSparseNOWRD checkActualBitrates]
  -[VCRateControlAlgorithmSparseNOWRD checkTargetBitrateOscillation]
  -[VCRateControlAlgorithmSparseNOWRD updateRecentTierWindow]
  -[VCRateControlAlgorithmSparseNOWRD countDeviationChangeInTierWindow]
  -[VCRateControlAlgorithmSparseNOWRD resetOscillationDetection]
  -[VCRateControlAlgorithmSparseNOWRD resetRampingStatus]
  -[VCRateControlAlgorithmSparseNOWRD printRateControlInfoToLogDump]
  -[VCRateControlAlgorithmSparseNOWRD basebandAdaptationEnabled]


VCTextStream : VCMediaStream <VCTextSender, VCTextReceiverDelegate>
 @property  <VCTextReceiverDelegate> *receiveDelegate
 @property  double lastReceivedRTPPacketTime
 @property  double lastReceivedRTCPPacketTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCTextStream terminateProcess:terminateSource:agent:]

  // instance methods
  -[VCTextStream dealloc]
  -[VCTextStream init]
  -[VCTextStream supportedPayloads]
  -[VCTextStream sendCharacter:]
  -[VCTextStream sendText:]
  -[VCTextStream didReceiveText:]
  -[VCTextStream setReceiveDelegate:]
  -[VCTextStream receiveDelegate]
  -[VCTextStream didReceiveCharacter:]
  -[VCTextStream onCallIDChanged]
  -[VCTextStream setupTextTransmitter]
  -[VCTextStream setupTextReceiverWithError:]
  -[VCTextStream onConfigureStreamWithConfiguration:error:]
  -[VCTextStream onStartWithCompletionHandler:]
  -[VCTextStream onStopWithCompletionHandler:]
  -[VCTextStream onPauseWithCompletionHandler:]
  -[VCTextStream onResumeWithCompletionHandler:]
  -[VCTextStream onSendRTCPPacket]
  -[VCTextStream onRTPTimeout]
  -[VCTextStream onRTCPTimeout]
  -[VCTextStream lastReceivedRTPPacketTime]
  -[VCTextStream lastReceivedRTCPPacketTime]
  -[VCTextStream rtcpHeartbeatLeeway]


LoopbackSocketTunnel : NSObject
 @property  NSObject *optionalArg

  // instance methods
  -[LoopbackSocketTunnel initWithPort:delegate:error:]
  -[LoopbackSocketTunnel sendPacketToVTP:]
  -[LoopbackSocketTunnel getIPPort:]
  -[LoopbackSocketTunnel getVTPIPPort:]
  -[LoopbackSocketTunnel setVTPIP:]
  -[LoopbackSocketTunnel shutdownSocket]
  -[LoopbackSocketTunnel serverLoopProc]
  -[LoopbackSocketTunnel optionalArg]
  -[LoopbackSocketTunnel setOptionalArg:]


VCMediaNegotiationBlobAudioSettings : PBCodable <NSCopying>
 @property  BOOL allowAudioRecording
 @property  BOOL allowAudioSwitching
 @property  unsigned int rtpSSRC
 @property  BOOL hasAudioUnitModel
 @property  unsigned int audioUnitModel
 @property  unsigned int supportFlags
 @property  unsigned int payloadFlags
 @property  unsigned int secondaryFlags
 @property  BOOL useSBR

  // class methods
  +[VCMediaNegotiationBlobAudioSettings negotiationPayloadFromPayload:]
  +[VCMediaNegotiationBlobAudioSettings payloadFromNegotiationPayload:]
  +[VCMediaNegotiationBlobAudioSettings isAudioPayloadSupported:]

  // instance methods
  -[VCMediaNegotiationBlobAudioSettings copyTo:]
  -[VCMediaNegotiationBlobAudioSettings mergeFrom:]
  -[VCMediaNegotiationBlobAudioSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobAudioSettings copyWithZone:]
  -[VCMediaNegotiationBlobAudioSettings readFrom:]
  -[VCMediaNegotiationBlobAudioSettings writeTo:]
  -[VCMediaNegotiationBlobAudioSettings isEqual:]
  -[VCMediaNegotiationBlobAudioSettings initWithAudioConfiguration:]
  -[VCMediaNegotiationBlobAudioSettings setAudioUnitModel:]
  -[VCMediaNegotiationBlobAudioSettings setHasAudioUnitModel:]
  -[VCMediaNegotiationBlobAudioSettings hasAudioUnitModel]
  -[VCMediaNegotiationBlobAudioSettings rtpSSRC]
  -[VCMediaNegotiationBlobAudioSettings setRtpSSRC:]
  -[VCMediaNegotiationBlobAudioSettings audioUnitModel]
  -[VCMediaNegotiationBlobAudioSettings supportFlags]
  -[VCMediaNegotiationBlobAudioSettings setSupportFlags:]
  -[VCMediaNegotiationBlobAudioSettings payloadFlags]
  -[VCMediaNegotiationBlobAudioSettings setPayloadFlags:]
  -[VCMediaNegotiationBlobAudioSettings secondaryFlags]
  -[VCMediaNegotiationBlobAudioSettings setSecondaryFlags:]
  -[VCMediaNegotiationBlobAudioSettings useSBR]
  -[VCMediaNegotiationBlobAudioSettings setUseSBR:]
  -[VCMediaNegotiationBlobAudioSettings allowAudioRecording]
  -[VCMediaNegotiationBlobAudioSettings allowAudioSwitching]
  -[VCMediaNegotiationBlobAudioSettings newMediaNegotiatorAudioConfiguration]
  -[VCMediaNegotiationBlobAudioSettings printWithLogFile:]


VCRateControlShareProfile : NSObject <NSCopying>
 @property  unsigned int reservedBitrate
 @property  unsigned int rateSharingCount

  // instance methods
  -[VCRateControlShareProfile copyWithZone:]
  -[VCRateControlShareProfile reservedBitrate]
  -[VCRateControlShareProfile setReservedBitrate:]
  -[VCRateControlShareProfile rateSharingCount]
  -[VCRateControlShareProfile setRateSharingCount:]


VCRateControllerManager : VCObject
  // class methods
  +[VCRateControllerManager sharedInstance]

  // instance methods
  -[VCRateControllerManager dealloc]
  -[VCRateControllerManager init]
  -[VCRateControllerManager registerRateSharingClient:forInterfaceType:]
  -[VCRateControllerManager updateShareProfileForInterfaceType:]
  -[VCRateControllerManager countRateControllersForInterfaceType:]
  -[VCRateControllerManager deregisterRateSharingClient:]


VCCaptionTaskInfo : NSObject
 @property  SFSpeechRecognitionTask *task
 @property  long long token
 @property  unsigned int updateNumber
 @property  unsigned int utteranceNumber

  // instance methods
  -[VCCaptionTaskInfo setTask:]
  -[VCCaptionTaskInfo token]
  -[VCCaptionTaskInfo setToken:]
  -[VCCaptionTaskInfo task]
  -[VCCaptionTaskInfo utteranceNumber]
  -[VCCaptionTaskInfo initWithTask:token:utteranceNumber:]
  -[VCCaptionTaskInfo updateNumber]
  -[VCCaptionTaskInfo setUpdateNumber:]
  -[VCCaptionTaskInfo setUtteranceNumber:]


VCAudioCaptions : NSObject <SFSpeechRecognizerDelegate, SFSpeechRecognitionTaskDelegate, VCAudioIOSink>
 @property  <VCAudioCaptionsDelegate> *delegate
 @property  NSLocale *locale
 @property  BOOL enabled
 @property  BOOL supported
 @property  NSSet *localLanguages
 @property  NSSet *remoteLanguages
 @property  BOOL remoteCanDisplay
 @property  NSString *taskIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioCaptions shouldAllocateNewAllocator:streamDesc:referenceStreamDesc:]

  // instance methods
  -[VCAudioCaptions supported]
  -[VCAudioCaptions stopWithCompletionHandler:]
  -[VCAudioCaptions setDelegate:]
  -[VCAudioCaptions delegate]
  -[VCAudioCaptions dealloc]
  -[VCAudioCaptions stop]
  -[VCAudioCaptions locale]
  -[VCAudioCaptions setLocale:]
  -[VCAudioCaptions enabled]
  -[VCAudioCaptions taskIdentifier]
  -[VCAudioCaptions setTaskIdentifier:]
  -[VCAudioCaptions speechRecognitionDidDetectSpeech:]
  -[VCAudioCaptions speechRecognitionTask:didHypothesizeTranscription:]
  -[VCAudioCaptions speechRecognitionTask:didFinishRecognition:]
  -[VCAudioCaptions speechRecognitionTaskWasCancelled:]
  -[VCAudioCaptions speechRecognitionTask:didFinishSuccessfully:]
  -[VCAudioCaptions speechRecognizer:availabilityDidChange:]
  -[VCAudioCaptions enableCaptions:]
  -[VCAudioCaptions pushAudioSamples:]
  -[VCAudioCaptions idleStateToState:withReason:error:]
  -[VCAudioCaptions loadedStateToState:withReason:error:]
  -[VCAudioCaptions runningStateToState:withReason:error:]
  -[VCAudioCaptions stoppingStateToState:withReason:error:]
  -[VCAudioCaptions initWithDelegate:isLocal:taskIdentifier:reportingAgent:]
  -[VCAudioCaptions gatherRealtimeStats:]
  -[VCAudioCaptions createAudioConverterWithInputFormat:outputFormat:converter:]
  -[VCAudioCaptions destroyAudioConverter:]
  -[VCAudioCaptions convertSamples:numSamples:]
  -[VCAudioCaptions transitionToState:withReason:error:]
  -[VCAudioCaptions callCompletionHandler:withResult:]
  -[VCAudioCaptions start:forToken:withCompletionHandler:]
  -[VCAudioCaptions createRecognizer:]
  -[VCAudioCaptions destroyRecognizer]
  -[VCAudioCaptions recognizerBufferTeardown]
  -[VCAudioCaptions recognizerBufferSetupWithError:]
  -[VCAudioCaptions getTokenForTask:]
  -[VCAudioCaptions getTaskInfoForTask:]
  -[VCAudioCaptions createSampleBufferWithFormat:samples:numSamples:]
  -[VCAudioCaptions recordAudioSampleMetrics]
  -[VCAudioCaptions packageAndSendTranscribedString:withTask:final:]
  -[VCAudioCaptions dumpCaptionsIfNeeded:final:]
  -[VCAudioCaptions captionsDebugDumpEnabled]
  -[VCAudioCaptions localLanguages]
  -[VCAudioCaptions setLocalLanguages:]
  -[VCAudioCaptions remoteLanguages]
  -[VCAudioCaptions setRemoteLanguages:]
  -[VCAudioCaptions remoteCanDisplay]
  -[VCAudioCaptions setRemoteCanDisplay:]


VCIDRSchedulerItem : NSObject
 @property  unsigned int framePosition
 @property  unsigned int weightFactor
 @property  unsigned int budgetInCaptureFrames
 @property  NSArray *streams

  // instance methods
  -[VCIDRSchedulerItem streams]
  -[VCIDRSchedulerItem dealloc]
  -[VCIDRSchedulerItem init]
  -[VCIDRSchedulerItem framePosition]
  -[VCIDRSchedulerItem setFramePosition:]
  -[VCIDRSchedulerItem addStream:]
  -[VCIDRSchedulerItem compareBudget:]
  -[VCIDRSchedulerItem budgetInCaptureFrames]
  -[VCIDRSchedulerItem setBudgetInCaptureFrames:]
  -[VCIDRSchedulerItem weightFactor]
  -[VCIDRSchedulerItem setWeightFactor:]


VCRedundancyControllerVideo : NSObject <VCRedundancyControllerProtocol>
 @property  unsigned long statisticsID
 @property  NSArray *fecLevelPerFrameSizeVector
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCRedundancyControllerVideo convertRedundancyPercentageToRatio:]

  // instance methods
  -[VCRedundancyControllerVideo dealloc]
  -[VCRedundancyControllerVideo setBtNotificationMonitor]
  -[VCRedundancyControllerVideo loadDefaultSettings]
  -[VCRedundancyControllerVideo updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControllerVideo initWithDelegate:mode:parameters:]
  -[VCRedundancyControllerVideo reportRedundancyPercentage:redundancyInterval:]
  -[VCRedundancyControllerVideo resetRedundancyStrategy:]
  -[VCRedundancyControllerVideo statisticsID]
  -[VCRedundancyControllerVideo setStatisticsID:]
  -[VCRedundancyControllerVideo fecLevelPerFrameSizeVector]


VCMediaKeyIndex : NSObject <NSCopying>
 @property  unsigned int activeSize
 @property  BOOL isMapped
 @property  unsigned char mapKey

  // class methods
  +[VCMediaKeyIndex newMKIWithBytes:bufferSize:]
  +[VCMediaKeyIndex makeInvalidKey]

  // instance methods
  -[VCMediaKeyIndex dealloc]
  -[VCMediaKeyIndex initWithNSUUID:]
  -[VCMediaKeyIndex isValid]
  -[VCMediaKeyIndex initWithUUID:]
  -[VCMediaKeyIndex isMapped]
  -[VCMediaKeyIndex copyWithZone:]
  -[VCMediaKeyIndex setMapping:]
  -[VCMediaKeyIndex isEqual:]
  -[VCMediaKeyIndex initWithBytes:bufferSize:]
  -[VCMediaKeyIndex activeSize]
  -[VCMediaKeyIndex setActiveSize:]
  -[VCMediaKeyIndex mapKey]
  -[VCMediaKeyIndex setMapKey:]
  -[VCMediaKeyIndex MKI]
  -[VCMediaKeyIndex fullKeyBytes:]
  -[VCMediaKeyIndex mappedKeySize]
  -[VCMediaKeyIndex mappedKeyBytes:size:]
  -[VCMediaKeyIndex isStartingWithPrefix:]


VCCryptoInfo : NSObject
 @property  ^{tagSRTPINFO=ii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSIIQii[32C][14C][32C][14C][20C]{_opaque_pthread_mutex_t=q[56c]}^v^vII{os_unfair_lock_s=I}{tagSRTPCryptContext=^{_CCCryptor}}{tagSRTPTransformPolicy=iiiiiii}IB} state

  // instance methods
  -[VCCryptoInfo state]
  -[VCCryptoInfo dealloc]
  -[VCCryptoInfo initWithSRTPInfo:]


VCEmulatedNetwork : NSObject
 @property  unsigned int numberOfPacketsWaitingInOutputQueue
 @property  @? pushCompletionHandler
 @property  @? popCompletionHandler

  // instance methods
  -[VCEmulatedNetwork push:]
  -[VCEmulatedNetwork dealloc]
  -[VCEmulatedNetwork initWithPolicies:]
  -[VCEmulatedNetwork copyPacketFromPop]
  -[VCEmulatedNetwork runUntilTime:]
  -[VCEmulatedNetwork numberOfPacketsWaitingInOutputQueue]
  -[VCEmulatedNetwork pushCompletionHandler]
  -[VCEmulatedNetwork setPushCompletionHandler:]
  -[VCEmulatedNetwork popCompletionHandler]
  -[VCEmulatedNetwork setPopCompletionHandler:]


VCScreenCaptureFigCaptureController : VCObject <FigScreenCaptureFrameHandlerDelegate, VCScreenCaptureSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCScreenCaptureFigCaptureController finalize]
  -[VCScreenCaptureFigCaptureController setIsRunning:]
  -[VCScreenCaptureFigCaptureController dealloc]
  -[VCScreenCaptureFigCaptureController screenCaptureControllerMediaServicesWereReset:]
  -[VCScreenCaptureFigCaptureController screenCaptureController:didReceiveSampleBuffer:transformFlags:]
  -[VCScreenCaptureFigCaptureController screenCaptureControllerDidReceiveClearScreen:]
  -[VCScreenCaptureFigCaptureController screenCaptureController:didFailWithStatus:]
  -[VCScreenCaptureFigCaptureController startScreenCaptureWithConfig:]
  -[VCScreenCaptureFigCaptureController stopScreenCapture]
  -[VCScreenCaptureFigCaptureController pauseScreenCapture:]
  -[VCScreenCaptureFigCaptureController initWithDelegate:screenCaptureSourceContext:]
  -[VCScreenCaptureFigCaptureController shouldClearScreen:]
  -[VCScreenCaptureFigCaptureController callbackWithEventString:]
  -[VCScreenCaptureFigCaptureController screenCaptureControllerWasPreempted:]


VCVideoStreamTransmitter : VCVideoTransmitterBase
  // instance methods
  -[VCVideoStreamTransmitter initWithConfig:]
  -[VCVideoStreamTransmitter dealloc]
  -[VCVideoStreamTransmitter gatherRealtimeStats:]
  -[VCVideoStreamTransmitter startVideo]
  -[VCVideoStreamTransmitter stopVideo]
  -[VCVideoStreamTransmitter enqueueVideoFrame:frameTime:cameraStatusBits:]
  -[VCVideoStreamTransmitter generateKeyFrameWithFIRType:]
  -[VCVideoStreamTransmitter setTemporaryMaximumBitrate:]
  -[VCVideoStreamTransmitter setTargetBitrate:]
  -[VCVideoStreamTransmitter setKeyFrameOnlyStreamID:]
  -[VCVideoStreamTransmitter setStreamIDs:numOfStreamIDs:repairedStreamIDs:numOfRepairedStreamIDs:]
  -[VCVideoStreamTransmitter setFECRatio:]
  -[VCVideoStreamTransmitter setFECRedundancyVector:]
  -[VCVideoStreamTransmitter setMediaSuggestion:]
  -[VCVideoStreamTransmitter setEncodingMode:]
  -[VCVideoStreamTransmitter handleThermalLevelChange:]
  -[VCVideoStreamTransmitter updateWindowState:isLocal:windowRect:]
  -[VCVideoStreamTransmitter initVideoCompressionWithWidth:height:bitrate:keyFrameIntervalDuration:]
  -[VCVideoStreamTransmitter forceKeyFrameProperties]
  -[VCVideoStreamTransmitter encodeVideoFrame:]
  -[VCVideoStreamTransmitter prependSPSPPS:dataPointer:sampleBuffer:]
  -[VCVideoStreamTransmitter isKeyFrame:]
  -[VCVideoStreamTransmitter transmitEncodedVideoFrame:cameraStatusBits:]
  -[VCVideoStreamTransmitter transmitEncodedVideoFrame:size:timestamp:hostTime:cameraStatusBits:]
  -[VCVideoStreamTransmitter transmitFrameInGroups:numOfPackets:timestamp:hostTime:cameraStatusBits:]
  -[VCVideoStreamTransmitter transmitVideoPackets:packetSizes:startPacket:packetCount:lastGroup:timestamp:hostTime:cameraStatusBits:bytesSent:]
  -[VCVideoStreamTransmitter updateSendStatisticsWithTimestamp:frameSize:packetsInFrame:]
  -[VCVideoStreamTransmitter reportingVideoStreamEvent:]
  -[VCVideoStreamTransmitter handleActiveConnectionChange:]


VCCaptionsClientContext : NSObject
 @property  long long streamToken

  // instance methods
  -[VCCaptionsClientContext streamToken]
  -[VCCaptionsClientContext initWithStreamToken:]


VCCaptionsManagerStreamTokenClientList : NSObject
 @property  <VCCaptionsSource> *captionsSource
 @property  NSArray *clientContextList

  // class methods
  +[VCCaptionsManagerStreamTokenClientList isValidContext:]
  +[VCCaptionsManagerStreamTokenClientList streamTokenFromClientContext:]

  // instance methods
  -[VCCaptionsManagerStreamTokenClientList dealloc]
  -[VCCaptionsManagerStreamTokenClientList newContext]
  -[VCCaptionsManagerStreamTokenClientList removeContext:]
  -[VCCaptionsManagerStreamTokenClientList initWithStreamToken:captionsSource:]
  -[VCCaptionsManagerStreamTokenClientList captionsSource]
  -[VCCaptionsManagerStreamTokenClientList clientContextList]


VCCaptionsManager : NSObject <VCCaptionsSourceDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCCaptionsManager defaultManager]

  // instance methods
  -[VCCaptionsManager registerBlocksForService]
  -[VCCaptionsManager dealloc]
  -[VCCaptionsManager deregisterBlocksForService]
  -[VCCaptionsManager init]
  -[VCCaptionsManager streamToken:didEnableCaptions:error:]
  -[VCCaptionsManager streamToken:didDisableCaptions:error:]
  -[VCCaptionsManager streamToken:didStartCaptioningWithReason:]
  -[VCCaptionsManager streamToken:didStopCaptioningWithReason:]
  -[VCCaptionsManager streamToken:didUpdateCaptions:]
  -[VCCaptionsManager registerCaptionsSource:streamToken:]
  -[VCCaptionsManager unregisterCaptionsSourceWithStreamToken:]
  -[VCCaptionsManager captionsSourceFromClientContext:]
  -[VCCaptionsManager notifyClientsWithStreamToken:service:arguments:]


AVCEffects : NSObject
 @property  <AVCEffectsDelegate> *delegate
 @property  int mode
 @property  int effectType

  // instance methods
  -[AVCEffects setDelegate:]
  -[AVCEffects delegate]
  -[AVCEffects dealloc]
  -[AVCEffects mode]
  -[AVCEffects initWithDelegate:]
  -[AVCEffects setMode:]
  -[AVCEffects effectType]
  -[AVCEffects setEffectType:]
  -[AVCEffects encodeProcessedVideoFrame:]
  -[AVCEffects setupRemoteReceiverQueueWithSenderQueue:]
  -[AVCEffects remoteQueueOperationHandlerWithError:operation:]
  -[AVCEffects registerBlocksForNotifications]
  -[AVCEffects deregisterBlocksForNotifications]
  -[AVCEffects avcVideoFrameDidRelease:]
  -[AVCEffects enqueueSampleBuffer:time:]


VCSessionUplinkVideoStreamController : NSObject
 @property  NSDictionary *activeVideoStreams
 @property  NSDictionary *pendingVideoStreams
 @property  unsigned int captureFrameRate
 @property  NSArray *streamIDsWifi
 @property  NSArray *streamIDsCell
 @property  float currentFrameTime
 @property  BOOL dynamicVideoPriorityEnabled

  // instance methods
  -[VCSessionUplinkVideoStreamController unlock]
  -[VCSessionUplinkVideoStreamController delegate]
  -[VCSessionUplinkVideoStreamController dealloc]
  -[VCSessionUplinkVideoStreamController restart]
  -[VCSessionUplinkVideoStreamController currentFrameTime]
  -[VCSessionUplinkVideoStreamController lock]
  -[VCSessionUplinkVideoStreamController initWithVideoStreams:streamInfos:reportingAgent:delegate:]
  -[VCSessionUplinkVideoStreamController activeVideoStreams]
  -[VCSessionUplinkVideoStreamController setCachedActiveVideoStreams:]
  -[VCSessionUplinkVideoStreamController setStreamIDsCell:]
  -[VCSessionUplinkVideoStreamController setStreamIDsWifi:]
  -[VCSessionUplinkVideoStreamController setPendingVideoStreams:]
  -[VCSessionUplinkVideoStreamController selectVideoStreamForVideoPriority]
  -[VCSessionUplinkVideoStreamController printPendingKeyFrameWarningOnThresholdTimeElapsedWithCurrentFrameTime:]
  -[VCSessionUplinkVideoStreamController setCurrentFrameTime:]
  -[VCSessionUplinkVideoStreamController setIsLocalOnCellular:cappedVideoStreamIDs:]
  -[VCSessionUplinkVideoStreamController generateKeyFrameWithStreamID:]
  -[VCSessionUplinkVideoStreamController setStreamsUseRTCPWithStreamInfos:]
  -[VCSessionUplinkVideoStreamController anchorStreamIDWithCappedVideoStreamIDs:]
  -[VCSessionUplinkVideoStreamController initilizeStreamInfoMapWithStreamInfos:]
  -[VCSessionUplinkVideoStreamController resumeStreams]
  -[VCSessionUplinkVideoStreamController shouldGenerateIDRWithStreamSchedule:]
  -[VCSessionUplinkVideoStreamController pauseStreams]
  -[VCSessionUplinkVideoStreamController handleStreamsPendingKeyFrameGeneration]
  -[VCSessionUplinkVideoStreamController videoStreamPendingKeyFrameGenerationWithStreamID:shouldRemoveFromPendingArray:]
  -[VCSessionUplinkVideoStreamController handleStreamsResetIDR]
  -[VCSessionUplinkVideoStreamController getMultiwayConfigForStreamID:]
  -[VCSessionUplinkVideoStreamController newVideoStreamKeyFrameScheduleWithStreamIDs:]
  -[VCSessionUplinkVideoStreamController schedulerStreamWithVideoStream:]
  -[VCSessionUplinkVideoStreamController filterPendingTemporalStreams]
  -[VCSessionUplinkVideoStreamController pendingVideoStreams]
  -[VCSessionUplinkVideoStreamController captureFrameRate]
  -[VCSessionUplinkVideoStreamController setCaptureFrameRate:]
  -[VCSessionUplinkVideoStreamController streamIDsCell]
  -[VCSessionUplinkVideoStreamController streamIDsWifi]
  -[VCSessionUplinkVideoStreamController dynamicVideoPriorityEnabled]
  -[VCSessionUplinkVideoStreamController setDynamicVideoPriorityEnabled:]


AVCPacketFilter : NSObject
 @property  BOOL isRTPFilter

  // instance methods
  -[AVCPacketFilter isMatchedPacket:size:]
  -[AVCPacketFilter isRTPFilter]


AVCPacketFilterRTP : AVCPacketFilter
 @property  unsigned char type

  // instance methods
  -[AVCPacketFilterRTP type]
  -[AVCPacketFilterRTP initWithIncomingSSRC:acceptPacketType:]
  -[AVCPacketFilterRTP isMatchedPacket:size:]
  -[AVCPacketFilterRTP isRTCPPayload:]
  -[AVCPacketFilterRTP isPayloadTypeMatched:]


VCAudioRuleCollection : NSObject <NSCopying>
 @property  int aacBlockSize
 @property  NSArray *rules
 @property  NSArray *secondaryPayloads
 @property  BOOL allowAudioSwitching
 @property  BOOL allowAudioRecording

  // class methods
  +[VCAudioRuleCollection getForcedPayload]

  // instance methods
  -[VCAudioRuleCollection dealloc]
  -[VCAudioRuleCollection rules]
  -[VCAudioRuleCollection copyWithZone:]
  -[VCAudioRuleCollection setRules:]
  -[VCAudioRuleCollection isEqual:]
  -[VCAudioRuleCollection init]
  -[VCAudioRuleCollection initWithPhoneContinuity:allowAudioSwitching:sbr:aacBlockSize:]
  -[VCAudioRuleCollection initWithPhoneContinuity:allowAudioSwitching:sbr:aacBlockSize:isLowLatencyAudio:]
  -[VCAudioRuleCollection initPrimaryPayload:dtxPayload:redPayload:secondaryPayloads:allowAudioSwitching:sbr:aacBlockSize:]
  -[VCAudioRuleCollection addAudioPayload:isSecondary:sbr:]
  -[VCAudioRuleCollection setupAudioRulesWithSBR:isContinuity:]
  -[VCAudioRuleCollection addAudioRule:]
  -[VCAudioRuleCollection addAudioRules:]
  -[VCAudioRuleCollection clearAudioRules]
  -[VCAudioRuleCollection isPayloadSupported:]
  -[VCAudioRuleCollection secondaryPayloads]
  -[VCAudioRuleCollection allowAudioRecording]
  -[VCAudioRuleCollection setAllowAudioRecording:]
  -[VCAudioRuleCollection allowAudioSwitching]
  -[VCAudioRuleCollection setAllowAudioSwitching:]
  -[VCAudioRuleCollection aacBlockSize]
  -[VCAudioRuleCollection setAacBlockSize:]


VCPayloadUtils : NSObject
  // class methods
  +[VCPayloadUtils isUseCaseWatchContinuity:primaryPayload:]
  +[VCPayloadUtils isPayloadSupportedInFaceTime:]
  +[VCPayloadUtils sampleRateForPayload:]
  +[VCPayloadUtils sampleRateForCodecBandwidth:]
  +[VCPayloadUtils audioCodecTypeForPayload:]
  +[VCPayloadUtils codecSamplesPerFrameForPayload:blockSize:]
  +[VCPayloadUtils canSetBitrateForPayload:]
  +[VCPayloadUtils codecBandwidthForPayload:]
  +[VCPayloadUtils codecModesForAMR8kHz]
  +[VCPayloadUtils codecModesForAMR16kHz]
  +[VCPayloadUtils codecModesForEVS8kHz]
  +[VCPayloadUtils codecModesForEVS16kHz]
  +[VCPayloadUtils codecModesForEVS32kHz]
  +[VCPayloadUtils supportedCodecModesForBandwidth:payload:]
  +[VCPayloadUtils allowedBitratesForPayload:supportedBitrates:supportedBandwidths:]
  +[VCPayloadUtils codecRateModeForDesiredANBR:payload:supportedBitrates:supportedBandwidths:]
  +[VCPayloadUtils isEVSCodecModeSupported:forBandwidth:]
  +[VCPayloadUtils isAMRCodecModeSupported:forBandwidth:]
  +[VCPayloadUtils isCodecModeSupported:forBandwidth:withPayload:]
  +[VCPayloadUtils shouldUseCookieForPayload:]
  +[VCPayloadUtils canBundleExternallyForPayload:forBundlingScheme:operatingMode:]
  +[VCPayloadUtils internalBundleFactorForPayload:]
  +[VCPayloadUtils shouldEnablePacketSizeLimitForPayload:]
  +[VCPayloadUtils qualityForPayload:forBitrate:]
  +[VCPayloadUtils codecTypeForPayload:]
  +[VCPayloadUtils payloadForCodecType:]
  +[VCPayloadUtils bitrateForCodecType:mode:]
  +[VCPayloadUtils supportsCodecRateModesForCodecType:]
  +[VCPayloadUtils supportsCodecBandwidthUpdateForCodecType:]
  +[VCPayloadUtils bitrateForAMRCodecMode:]
  +[VCPayloadUtils bitrateForAMRWBCodecMode:]
  +[VCPayloadUtils bitrateForEVSCodecMode:]
  +[VCPayloadUtils ctAudioCodecTypeForMediaStreamCodec:]
  +[VCPayloadUtils ctAudioCodecEVSBandwidthForAudioCodecBandwidth:]
  +[VCPayloadUtils ctAudioCodecEVSBitrateForBitrate:]
  +[VCPayloadUtils vcAudioCodecBandwidthForAudioCodecBandwidth:]
  +[VCPayloadUtils audioCodecBandwidthForVCAudioCodecBandwidth:]


VCAudioPowerSpectrumManager : NSObject <VCAudioPowerSpectrumMeterDelegate, VCServerDelegate>
 @property  NSMutableArray *meters
 @property  NSMutableDictionary *sources
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioPowerSpectrumManager sharedInstance]

  // instance methods
  -[VCAudioPowerSpectrumManager meters]
  -[VCAudioPowerSpectrumManager registerBlocksForService]
  -[VCAudioPowerSpectrumManager dealloc]
  -[VCAudioPowerSpectrumManager sources]
  -[VCAudioPowerSpectrumManager deregisterBlocksForService]
  -[VCAudioPowerSpectrumManager init]
  -[VCAudioPowerSpectrumManager audioPowerSpectrumMeter:didUpdateAudioPowerSpectrums:]
  -[VCAudioPowerSpectrumManager didServerDie]
  -[VCAudioPowerSpectrumManager registerAudioPowerMeterSource:]
  -[VCAudioPowerSpectrumManager unregisterAudioPowerSpectrumSourceForStreamToken:]
  -[VCAudioPowerSpectrumManager newPowerSpectrumMeterWithBinCount:refreshRate:delegate:error:]
  -[VCAudioPowerSpectrumManager terminatePowerSpectrumMeter:]
  -[VCAudioPowerSpectrumManager registerListenerWithStreamToken:powerSpectrumKey:powerSpectrumMeter:error:]
  -[VCAudioPowerSpectrumManager unregisterListenerWithStreamToken:powerSpectrumMeter:error:]
  -[VCAudioPowerSpectrumManager registerStreamTokenForCellularTapType:clientProcessId:error:]
  -[VCAudioPowerSpectrumManager powerSpectrumMetersForCellularTapType:]
  -[VCAudioPowerSpectrumManager cleanupPowerSpectrumSetForCellularTapType:]
  -[VCAudioPowerSpectrumManager registerListenerWithCellularTapType:clientProcessId:powerSpectrumMeter:powerSpectrumMeterKey:error:]
  -[VCAudioPowerSpectrumManager unregisterListenerWithCellularTapType:powerSpectrumMeter:error:]
  -[VCAudioPowerSpectrumManager serviceHandlerPowerMeterInitializeWithArguments:error:]
  -[VCAudioPowerSpectrumManager serviceHandlerRegisterListenerWithArguments:error:]
  -[VCAudioPowerSpectrumManager serviceHandlerUnregisterListenerWithArguments:error:]
  -[VCAudioPowerSpectrumManager serviceHandlerRegisterCellularTapWithArguments:error:]
  -[VCAudioPowerSpectrumManager serviceHandlerUnregisterCellularTagWithArguments:error:]
  -[VCAudioPowerSpectrumManager serviceHandlerPowerMeterTerminateWithArguments:error:]


VCSessionParticipantAudioStreamConfig : VCAudioStreamConfig
 @property  VCAudioRuleCollection *audioRules
 @property  VCAudioRuleCollection *audioRulesNegotiated

  // instance methods
  -[VCSessionParticipantAudioStreamConfig dealloc]
  -[VCSessionParticipantAudioStreamConfig audioRulesNegotiated]
  -[VCSessionParticipantAudioStreamConfig setAudioRulesNegotiated:]
  -[VCSessionParticipantAudioStreamConfig audioRules]
  -[VCSessionParticipantAudioStreamConfig setAudioRules:]


VCDatagramChannelManager : NSObject
 @property  @? readHandler

  // class methods
  +[VCDatagramChannelManager sharedInstance]

  // instance methods
  -[VCDatagramChannelManager dealloc]
  -[VCDatagramChannelManager init]
  -[VCDatagramChannelManager readHandler]
  -[VCDatagramChannelManager setReadHandler:]
  -[VCDatagramChannelManager addDatagramChannelWithDescriptor:eventHandler:error:]
  -[VCDatagramChannelManager addDatagramChannelWithDescriptor:eventHandler:writeCompletionHandler:error:]
  -[VCDatagramChannelManager addDatagramChannelWithDestination:eventHandler:error:]
  -[VCDatagramChannelManager addDatagramChannelWithDestination:eventHandler:dataPath:error:]
  -[VCDatagramChannelManager addDatagramChannelWithDestination:eventHandler:writeCompletionHandler:dataPath:error:]
  -[VCDatagramChannelManager setupEmulatedDatagramChannelWithDestination:datagramChannel:]
  -[VCDatagramChannelManager setupDatagramChannel:eventHandler:writeCompletionHandler:error:]
  -[VCDatagramChannelManager datagramChannelWithChannelToken:]
  -[VCDatagramChannelManager executeBlockForIDSDestination:blockToExecute:]
  -[VCDatagramChannelManager removeDatagramChannel:]


VCSessionMediaStreamPresenceConfigurationProvider : NSObject
 @property  NSSet *streamInputConfigurations
 @property  NSSet *streamGroupConfigurations

  // class methods
  +[VCSessionMediaStreamPresenceConfigurationProvider resourceNameForConfigurationType:]
  +[VCSessionMediaStreamPresenceConfigurationProvider sessionConfigurationForType:]
  +[VCSessionMediaStreamPresenceConfigurationProvider screenStreamBaseTierFramerate]
  +[VCSessionMediaStreamPresenceConfigurationProvider dataGroupDisabled]
  +[VCSessionMediaStreamPresenceConfigurationProvider moCapGroupDisabled]
  +[VCSessionMediaStreamPresenceConfigurationProvider ftxtGroupDisabled]
  +[VCSessionMediaStreamPresenceConfigurationProvider replaceTag:]
  +[VCSessionMediaStreamPresenceConfigurationProvider loadSessionConfigurationWithResourceName:]
  +[VCSessionMediaStreamPresenceConfigurationProvider publicSessionConfigurationForType:]
  +[VCSessionMediaStreamPresenceConfigurationProvider streamSSRCForStreamGroupID:streamIndex:]
  +[VCSessionMediaStreamPresenceConfigurationProvider readUint32WithPList:key:defaultValue:]

  // instance methods
  -[VCSessionMediaStreamPresenceConfigurationProvider dealloc]
  -[VCSessionMediaStreamPresenceConfigurationProvider initWithConfigurationType:supportedAudioRules:streamIDGenerator:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newStreamInputConfigurations]
  -[VCSessionMediaStreamPresenceConfigurationProvider newVideoStreamInputConfigurationWithPList:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newDataStreamInputConfigurationWithPList:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newVideoMultiwayConfigWithPList:codecType:streamIDGenerator:ssrc:]
  -[VCSessionMediaStreamPresenceConfigurationProvider updateStreamConfig:forPayload:networkPayload:groupID:]
  -[VCSessionMediaStreamPresenceConfigurationProvider checkEncoderSupportForConfig:]
  -[VCSessionMediaStreamPresenceConfigurationProvider checkEncoderSupportForCodecType:]
  -[VCSessionMediaStreamPresenceConfigurationProvider getVideoCodecConfigFromStreamConfigPList:]
  -[VCSessionMediaStreamPresenceConfigurationProvider getVideoCodecFromStreamCodecPList:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newVideoStreamGroupStreamConfigWithPList:streamIDGenerator:ssrc:groupID:shouldSkip:]
  -[VCSessionMediaStreamPresenceConfigurationProvider computeEncoderResolution:]
  -[VCSessionMediaStreamPresenceConfigurationProvider setParentStreamID:videoConfig:]
  -[VCSessionMediaStreamPresenceConfigurationProvider setupVideoStreamGroupStreams:streamGroupConfig:streamIDGenerator:]
  -[VCSessionMediaStreamPresenceConfigurationProvider addPayload:audioStreamConfig:supportedAudioRules:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newAudioMultiwayConfigWithPList:audioRules:maxIDSStreamIDCount:streamIDGenerator:ssrc:]
  -[VCSessionMediaStreamPresenceConfigurationProvider setupRedFactorsWithPList:audioStreamConfig:]
  -[VCSessionMediaStreamPresenceConfigurationProvider setupAudioRedWithPlist:audioStreamConfig:supportedAudioRules:]
  -[VCSessionMediaStreamPresenceConfigurationProvider setupAudioRulesWithPList:audioStreamConfig:supportedAudioRules:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newAudioStreamGroupStreamConfigWithPList:supportedAudioRules:maxIDSStreamIDCount:streamIDGenerator:ssrc:groupID:]
  -[VCSessionMediaStreamPresenceConfigurationProvider setupAudioStreamGroupStreams:streamGroupConfig:supportedAudioRules:streamIDGenerator:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newStreamGroupConfigurationWithPList:supportedAudioRules:streamIDGenerator:]
  -[VCSessionMediaStreamPresenceConfigurationProvider newStreamGroupConfigurationsWithSupportedAudioRules:streamIDGenerator:]
  -[VCSessionMediaStreamPresenceConfigurationProvider streamInputConfigurations]
  -[VCSessionMediaStreamPresenceConfigurationProvider streamGroupConfigurations]


VCDispatchTimer : VCObject
 @property  @? callbackBlock
 @property  BOOL isRunning

  // instance methods
  -[VCDispatchTimer dealloc]
  -[VCDispatchTimer isRunning]
  -[VCDispatchTimer stop]
  -[VCDispatchTimer start]
  -[VCDispatchTimer callbackBlock]
  -[VCDispatchTimer initWithIntervalSeconds:callbackBlock:]
  -[VCDispatchTimer initWithIntervalMilliseconds:callbackBlock:]
  -[VCDispatchTimer initWithIntervalSeconds:callbackBlock:clientQueue:]
  -[VCDispatchTimer initWithIntervalMilliseconds:callbackBlock:clientQueue:]


VCAudioStream : VCMediaStream <VCMediaStreamSyncSource, VCAudioIOSink, VCAudioIODelegate, VCTelephonyInterfaceDelegate>
 @property  VCAudioTransmitter *audioTransmitter
 @property  VCAudioIO *audioIO
 @property  NSObject<VCMediaStreamSyncSourceDelegate> *syncSourceDelegate
 @property  unsigned int conferenceID
 @property  BOOL isValid
 @property  int deviceRole
 @property  BOOL muted
 @property  BOOL remoteMuted
 @property  BOOL sendActiveVoiceOnly
 @property  BOOL currentDTXEnable
 @property  NSNumber *targetStreamID
 @property  float volume
 @property  ^v realtimeSourceContext
 @property  unsigned int actualAudioSendingBitrate
 @property  unsigned int lastNoVoiceActivityPacketCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioStream capabilities]
  +[VCAudioStream terminateProcess:terminateSource:agent:]
  +[VCAudioStream shouldUseAACELDSBRForMode:]
  +[VCAudioStream newPayloadConfigForCodecConfig:streamConfig:inputSampleRate:]
  +[VCAudioStream operatingModeForAudioStreamMode:]
  +[VCAudioStream audioIODirectionWithMediaStreamDirection:]
  +[VCAudioStream supportedAudioPayloads]
  +[VCAudioStream shouldUseRandomRTPTimestampForMode:]

  // instance methods
  -[VCAudioStream setIsValid:]
  -[VCAudioStream dealloc]
  -[VCAudioStream isValid]
  -[VCAudioStream isMuted]
  -[VCAudioStream setVolume:]
  -[VCAudioStream volume]
  -[VCAudioStream setMuted:]
  -[VCAudioStream didUpdateBasebandCodec:]
  -[VCAudioStream didServerDie]
  -[VCAudioStream setVCStatistics:]
  -[VCAudioStream supportedPayloads]
  -[VCAudioStream deviceRole]
  -[VCAudioStream pushAudioSamples:]
  -[VCAudioStream didSuspendAudioIO:]
  -[VCAudioStream didResumeAudioIO:]
  -[VCAudioStream audioIO]
  -[VCAudioStream onCallIDChanged]
  -[VCAudioStream onConfigureStreamWithConfiguration:error:]
  -[VCAudioStream onStartWithCompletionHandler:]
  -[VCAudioStream onStopWithCompletionHandler:]
  -[VCAudioStream onPauseWithCompletionHandler:]
  -[VCAudioStream onResumeWithCompletionHandler:]
  -[VCAudioStream onSendRTCPPacket]
  -[VCAudioStream onRTPTimeout]
  -[VCAudioStream onRTCPTimeout]
  -[VCAudioStream lastReceivedRTPPacketTime]
  -[VCAudioStream lastReceivedRTCPPacketTime]
  -[VCAudioStream rtcpHeartbeatLeeway]
  -[VCAudioStream gatherRealtimeStats:]
  -[VCAudioStream handleActiveConnectionChange:]
  -[VCAudioStream setLocalParticipantInfo:networkSockets:withError:]
  -[VCAudioStream generateReceptionReportList:reportCount:]
  -[VCAudioStream setStreamDirection:]
  -[VCAudioStream setSyncSourceDelegate:]
  -[VCAudioStream getSyncSourceSampleRate]
  -[VCAudioStream telephonyInterface:anbrActivationUpdate:]
  -[VCAudioStream telephonyInterface:anbrRecommendation:forDirection:]
  -[VCAudioStream computePacketTimestampWithInputTimestamp:numSamples:hostTime:]
  -[VCAudioStream internalSampleRateForCodecType:]
  -[VCAudioStream _computeInternalFormatForStreamConfigurations:]
  -[VCAudioStream setInputTimestamp:packetTimestamp:hostTime:]
  -[VCAudioStream captureMeshMode:]
  -[VCAudioStream generateRTCPXRSummaryReports:reportCount:]
  -[VCAudioStream generateRTCPXRVoIPMetricsReports:reportCount:]
  -[VCAudioStream startAudioWithCompletionHandler:]
  -[VCAudioStream stopAudioWithCompletionHandler:]
  -[VCAudioStream getSupportedPayloads]
  -[VCAudioStream setupPayloads]
  -[VCAudioStream getCodecConfigForPayload:block:]
  -[VCAudioStream preferredAudioBitrateForPayload:]
  -[VCAudioStream configForPayloadType:]
  -[VCAudioStream addAudioPayload:]
  -[VCAudioStream setDTXPayload:]
  -[VCAudioStream setReceiverPayloads]
  -[VCAudioStream willExitState:newState:]
  -[VCAudioStream didEnterState:oldState:]
  -[VCAudioStream setDeviceRoleForAudioStreamMode:direction:]
  -[VCAudioStream setupAudioPowerSpectrum]
  -[VCAudioStream initWithClientPid:]
  -[VCAudioStream initWithClientPid:ssrc:]
  -[VCAudioStream initWithClientPid:ssrc:transportSessionID:]
  -[VCAudioStream setupAudioStreamWithClientPid:enableAudioPowerSpectrum:]
  -[VCAudioStream getPacketsPerBundleForStreamConfig:]
  -[VCAudioStream configureAudioJBAlgos:]
  -[VCAudioStream createAudioReceiver]
  -[VCAudioStream createAudioTransmitter:streamIDs:]
  -[VCAudioStream sendDTMFEvent:]
  -[VCAudioStream stopSendDTMFEvent]
  -[VCAudioStream meterWithType:]
  -[VCAudioStream isFrequencyMeteringEnabled:]
  -[VCAudioStream setFrequencyMeteringEnabled:meterType:]
  -[VCAudioStream pushSamplesOutputPowerSpectrum:]
  -[VCAudioStream updateSoundMeter:isInputMeter:sampleBuffer:]
  -[VCAudioStream prepareAudio]
  -[VCAudioStream cleanupAudio]
  -[VCAudioStream sendActiveVoiceOnly]
  -[VCAudioStream setSendActiveVoiceOnly:]
  -[VCAudioStream setCurrentDTXEnable:]
  -[VCAudioStream setRemoteMuted:]
  -[VCAudioStream isRemoteMuted]
  -[VCAudioStream realtimeSourceContext]
  -[VCAudioStream pullSamplesCallback]
  -[VCAudioStream setTargetBitrate:rateChangeCounter:]
  -[VCAudioStream actualAudioSendingBitrate]
  -[VCAudioStream shouldUseNWConnectionBackingSocket]
  -[VCAudioStream validateAudioStreamConfigurations:]
  -[VCAudioStream setupSourceTransport:]
  -[VCAudioStream createTransportWithStreamConfig:]
  -[VCAudioStream createReportSSRCListWithStreamConfigs:]
  -[VCAudioStream cleanupBeforeReconfigure:]
  -[VCAudioStream streamIDsFromTransport]
  -[VCAudioStream setPreferredMediaBitrateWithConfiguration:]
  -[VCAudioStream shouldResetRTPTimestampOnStart]
  -[VCAudioStream shouldReportNetworkInterfaceType]
  -[VCAudioStream redundancyController:redundancyPercentageDidChange:]
  -[VCAudioStream setStreamIDs:repairStreamIDs:]
  -[VCAudioStream setTargetStreamID:]
  -[VCAudioStream setupPeriodicReporting]
  -[VCAudioStream setupReportingAgent:]
  -[VCAudioStream getClientSpecificUserInfo:]
  -[VCAudioStream getReportingClientType]
  -[VCAudioStream getReportingClientName]
  -[VCAudioStream getReportingServiceID]
  -[VCAudioStream updateCodecPayloadAndBitrateForStartEvent:bitrate:]
  -[VCAudioStream reportingAudioStreamEvent:]
  -[VCAudioStream reportInputHostTimeJumpWithSize:]
  -[VCAudioStream reportingAlgosAudioStreamEvent:]
  -[VCAudioStream getRatTypeForStreamMode:]
  -[VCAudioStream pullAudioSamples:]
  -[VCAudioStream canProcessAudio]
  -[VCAudioStream setCanProcessAudio:]
  -[VCAudioStream syncSourceDelegate]
  -[VCAudioStream registerCodecRateModeChangeNotifications]
  -[VCAudioStream registerActiveAudioStreamChangeNotifications]
  -[VCAudioStream unregisterCodecRateModeChangeNotifications]
  -[VCAudioStream notifyCodecModeChangeToCT:]
  -[VCAudioStream setRemoteCodecTypeAndSampleRate:]
  -[VCAudioStream queryAnbrBitrate:forDirection:]
  -[VCAudioStream notifyCodecModeChangeEvent:didUpdateBandwidth:didUpdateBitrate:]
  -[VCAudioStream handleCodecModeChangeEvent:]
  -[VCAudioStream handleUplinkANBR:]
  -[VCAudioStream handleDownlinkANBR:]
  -[VCAudioStream selectCodecBandwidthForCodecRateMode:]
  -[VCAudioStream handleANBR:forDirection:]
  -[VCAudioStream collectRxChannelMetrics:interval:]
  -[VCAudioStream collectRxChannelMetrics:]
  -[VCAudioStream collectTxChannelMetrics:]
  -[VCAudioStream conferenceID]
  -[VCAudioStream setDeviceRole:]
  -[VCAudioStream audioTransmitter]
  -[VCAudioStream setAudioTransmitter:]
  -[VCAudioStream setAudioIO:]
  -[VCAudioStream isCurrentDTXEnabled]
  -[VCAudioStream targetStreamID]
  -[VCAudioStream lastNoVoiceActivityPacketCount]
  -[VCAudioStream setLastNoVoiceActivityPacketCount:]


VCMediaNegotiationBlobV2 : PBCodable <NSCopying>
 @property  BOOL hasGeneralInfo
 @property  VCMediaNegotiationBlobV2GeneralInfo *generalInfo
 @property  BOOL hasBandwidthSettings
 @property  VCMediaNegotiationBlobV2BandwidthSettings *bandwidthSettings
 @property  BOOL hasCodecSupport
 @property  VCMediaNegotiationBlobV2CodecFeatures *codecSupport
 @property  BOOL hasMicrophoneU1
 @property  VCMediaNegotiationBlobV2MicrophoneSettingsU1 *microphoneU1
 @property  BOOL hasCameraU1
 @property  VCMediaNegotiationBlobV2CameraSettingsU1 *cameraU1
 @property  BOOL hasMomentsSettings
 @property  VCMediaNegotiationBlobV2MomentsSettings *momentsSettings
 @property  NSMutableArray *streamGroups

  // class methods
  +[VCMediaNegotiationBlobV2 streamGroupsType]

  // instance methods
  -[VCMediaNegotiationBlobV2 copyTo:]
  -[VCMediaNegotiationBlobV2 dealloc]
  -[VCMediaNegotiationBlobV2 mergeFrom:]
  -[VCMediaNegotiationBlobV2 dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2 copyWithZone:]
  -[VCMediaNegotiationBlobV2 readFrom:]
  -[VCMediaNegotiationBlobV2 writeTo:]
  -[VCMediaNegotiationBlobV2 isEqual:]
  -[VCMediaNegotiationBlobV2 hasGeneralInfo]
  -[VCMediaNegotiationBlobV2 hasBandwidthSettings]
  -[VCMediaNegotiationBlobV2 hasCodecSupport]
  -[VCMediaNegotiationBlobV2 hasMicrophoneU1]
  -[VCMediaNegotiationBlobV2 hasCameraU1]
  -[VCMediaNegotiationBlobV2 hasMomentsSettings]
  -[VCMediaNegotiationBlobV2 clearStreamGroups]
  -[VCMediaNegotiationBlobV2 addStreamGroups:]
  -[VCMediaNegotiationBlobV2 streamGroupsCount]
  -[VCMediaNegotiationBlobV2 streamGroupsAtIndex:]
  -[VCMediaNegotiationBlobV2 generalInfo]
  -[VCMediaNegotiationBlobV2 setGeneralInfo:]
  -[VCMediaNegotiationBlobV2 bandwidthSettings]
  -[VCMediaNegotiationBlobV2 setBandwidthSettings:]
  -[VCMediaNegotiationBlobV2 codecSupport]
  -[VCMediaNegotiationBlobV2 setCodecSupport:]
  -[VCMediaNegotiationBlobV2 microphoneU1]
  -[VCMediaNegotiationBlobV2 setMicrophoneU1:]
  -[VCMediaNegotiationBlobV2 cameraU1]
  -[VCMediaNegotiationBlobV2 setCameraU1:]
  -[VCMediaNegotiationBlobV2 momentsSettings]
  -[VCMediaNegotiationBlobV2 setMomentsSettings:]
  -[VCMediaNegotiationBlobV2 streamGroups]
  -[VCMediaNegotiationBlobV2 setStreamGroups:]
  -[VCMediaNegotiationBlobV2 printWithTitle:logFile:]


VCScreenCapture : VCVideoCapture <VCScreenCaptureSourceDelegate, VCVideoSource>
 @property  BOOL isClearScreenThreadRunning
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCScreenCapture stop:]
  -[VCScreenCapture dealloc]
  -[VCScreenCapture setFrameRate:]
  -[VCScreenCapture startPreview]
  -[VCScreenCapture isPreviewRunning]
  -[VCScreenCapture isFrontCamera]
  -[VCScreenCapture stopScreenCapture]
  -[VCScreenCapture shouldClearScreen:]
  -[VCScreenCapture screenCaptureSourceShouldClearScreen:]
  -[VCScreenCapture screenCaptureSourceProcessEventString:]
  -[VCScreenCapture startCaptureWithWidth:height:frameRate:]
  -[VCScreenCapture setWidth:height:frameRate:]
  -[VCScreenCapture copyColorInfo:]
  -[VCScreenCapture configureCaptureWithToken:]
  -[VCScreenCapture getFrameRate]
  -[VCScreenCapture frameCount:]
  -[VCScreenCapture frameBecameAvailableCount:figBufferQueueEmptyCount:figBufferQueueErrorCount:]
  -[VCScreenCapture cameraSupportsFormatWidth:height:]
  -[VCScreenCapture startScreenCapture]
  -[VCScreenCapture processAndSendIdleBlackFrame]
  -[VCScreenCapture initWithCaptureServer:sourceConfig:]
  -[VCScreenCapture _startCapture]
  -[VCScreenCapture setPauseCapture:]
  -[VCScreenCapture startClearScreenProc]
  -[VCScreenCapture stopClearScreenProc]
  -[VCScreenCapture isClearScreenThreadRunning]


VCStreamIOAudioController : VCObject <VCAudioIOControllerControl, VCStreamOutputSource>
 @property  VCAudioIOControllerClient *runningClient
 @property  NSDictionary *reportingStats
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <VCStreamSychronizationDelegate> *synchronizationDelegate
 @property  VCStreamOutput *streamOutput

  // instance methods
  -[VCStreamIOAudioController setSynchronizationDelegate:]
  -[VCStreamIOAudioController dealloc]
  -[VCStreamIOAudioController synchronizationDelegate]
  -[VCStreamIOAudioController invalidate]
  -[VCStreamIOAudioController didUpdateBasebandCodec:]
  -[VCStreamIOAudioController startClient:]
  -[VCStreamIOAudioController stopClient:]
  -[VCStreamIOAudioController updateClient:direction:]
  -[VCStreamIOAudioController reportingStats]
  -[VCStreamIOAudioController streamOutput]
  -[VCStreamIOAudioController setStreamOutput:]
  -[VCStreamIOAudioController initWithStreamInputID:streamToken:networkClockID:]
  -[VCStreamIOAudioController _packetThreadStartWithClientFormat:]
  -[VCStreamIOAudioController _packetThreadStop]
  -[VCStreamIOAudioController startInputForClient:error:]
  -[VCStreamIOAudioController startOutputForClient:error:]
  -[VCStreamIOAudioController setupAndStartOutputClientThread]
  -[VCStreamIOAudioController cleanupOutputThread]
  -[VCStreamIOAudioController cleanupStreamOutput]
  -[VCStreamIOAudioController dispatchedStartClient:error:]
  -[VCStreamIOAudioController dispatchedStopClient]
  -[VCStreamIOAudioController canSetDirection:]
  -[VCStreamIOAudioController runningClient]
  -[VCStreamIOAudioController setRunningClient:]


AVCDaemonProcessInfo : NSObject
  // class methods
  +[AVCDaemonProcessInfo getDaemonProcessInfo]


VCCoreMotionManager : NSObject
 @property  CMMotionActivity *motionActivity

  // instance methods
  -[VCCoreMotionManager dealloc]
  -[VCCoreMotionManager setMotionActivity:]
  -[VCCoreMotionManager motionActivity]
  -[VCCoreMotionManager initWithDelegate:]
  -[VCCoreMotionManager coreMotionManagerDelegate]
  -[VCCoreMotionManager setCoreMotionManagerDelegate:]
  -[VCCoreMotionManager startMonitoringMotionActivity]
  -[VCCoreMotionManager stopMonitoringMotionActivity]
  -[VCCoreMotionManager getMotionActivityValueForMotionActivity:]


VCDatagramChannelIDS : VCObject
 @property  NSArray *connectedLinks
 @property  IDSDataChannelLinkContext *defaultLink
 @property  unsigned int token
 @property  NSString *destination
 @property  int dataPath

  // instance methods
  -[VCDatagramChannelIDS destination]
  -[VCDatagramChannelIDS token]
  -[VCDatagramChannelIDS dealloc]
  -[VCDatagramChannelIDS setEventHandler:]
  -[VCDatagramChannelIDS invalidate]
  -[VCDatagramChannelIDS start]
  -[VCDatagramChannelIDS setReadHandler:]
  -[VCDatagramChannelIDS connectedLinks]
  -[VCDatagramChannelIDS defaultLink]
  -[VCDatagramChannelIDS writeDatagrams:datagramsSize:datagramsInfo:datagramsCount:options:completionHandler:]
  -[VCDatagramChannelIDS writeDatagram:datagramSize:datagramInfo:options:completionHandler:]
  -[VCDatagramChannelIDS setWriteCompletionHandler:]
  -[VCDatagramChannelIDS readyToRead]
  -[VCDatagramChannelIDS setChannelPreferences:]
  -[VCDatagramChannelIDS setWiFiAssist:]
  -[VCDatagramChannelIDS startActiveProbingWithOptions:]
  -[VCDatagramChannelIDS stopActiveProbingWithOptions:]
  -[VCDatagramChannelIDS flushLinkProbingStatusWithOptions:]
  -[VCDatagramChannelIDS startMKMRecoveryForParticipantIDs:]
  -[VCDatagramChannelIDS requestSessionInfoWithOptions:]
  -[VCDatagramChannelIDS osChannelInfoLog]
  -[VCDatagramChannelIDS sharedIDSService]
  -[VCDatagramChannelIDS initWithDestination:token:dataPath:error:]
  -[VCDatagramChannelIDS VTPConnectionContext]
  -[VCDatagramChannelIDS datagramChannelOptions]
  -[VCDatagramChannelIDS datagramChannelWithDestination:error:]
  -[VCDatagramChannelIDS initWithSocketDescriptor:token:error:]
  -[VCDatagramChannelIDS queryProbingResultsWithOptions:]
  -[VCDatagramChannelIDS setOneToOneModeEnabled:isInitiator:]
  -[VCDatagramChannelIDS optInStreamIDs:]
  -[VCDatagramChannelIDS optOutStreamIDs:]
  -[VCDatagramChannelIDS setupVTPSocketWithFileDescriptor:]
  -[VCDatagramChannelIDS dataPath]


VCStatsRecorder : NSObject
  // instance methods
  -[VCStatsRecorder dealloc]
  -[VCStatsRecorder init]
  -[VCStatsRecorder updateSessionStats:connection:totalPacketSent:totalPacketReceived:]
  -[VCStatsRecorder getLocalStats:localSessionStats:]
  -[VCStatsRecorder getMostRecentLocalStats]
  -[VCStatsRecorder serverStatsSizeInByteForUplink:connection:]


VCMediaNegotiationBlobV2MomentsSettings : PBCodable <NSCopying>
 @property  NSSet *videoCodecs
 @property  NSSet *imageTypes
 @property  unsigned char capabilitiesOneToOne
 @property  unsigned char capabilitiesMultiway
 @property  BOOL hasCapabilities
 @property  unsigned int capabilities
 @property  BOOL hasSupportedCodecs
 @property  unsigned int supportedCodecs

  // class methods
  +[VCMediaNegotiationBlobV2MomentsSettings supportedCodecsWithVideoCodecs:imageTypes:]
  +[VCMediaNegotiationBlobV2MomentsSettings videoCodecsWithSupportedCodecs:]
  +[VCMediaNegotiationBlobV2MomentsSettings imageTypesWithSupportedCodecs:]
  +[VCMediaNegotiationBlobV2MomentsSettings blobCapabilitiesWithOneToOneCapabilities:multiwayCapabilities:]
  +[VCMediaNegotiationBlobV2MomentsSettings capabilitiesWithBlobCapabilities:]
  +[VCMediaNegotiationBlobV2MomentsSettings multiwayCapabilitiesWithBlobCapabilities:]

  // instance methods
  -[VCMediaNegotiationBlobV2MomentsSettings setHasCapabilities:]
  -[VCMediaNegotiationBlobV2MomentsSettings hasCapabilities]
  -[VCMediaNegotiationBlobV2MomentsSettings copyTo:]
  -[VCMediaNegotiationBlobV2MomentsSettings capabilities]
  -[VCMediaNegotiationBlobV2MomentsSettings mergeFrom:]
  -[VCMediaNegotiationBlobV2MomentsSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2MomentsSettings copyWithZone:]
  -[VCMediaNegotiationBlobV2MomentsSettings setCapabilities:]
  -[VCMediaNegotiationBlobV2MomentsSettings readFrom:]
  -[VCMediaNegotiationBlobV2MomentsSettings writeTo:]
  -[VCMediaNegotiationBlobV2MomentsSettings isEqual:]
  -[VCMediaNegotiationBlobV2MomentsSettings supportedCodecs]
  -[VCMediaNegotiationBlobV2MomentsSettings setSupportedCodecs:]
  -[VCMediaNegotiationBlobV2MomentsSettings setHasSupportedCodecs:]
  -[VCMediaNegotiationBlobV2MomentsSettings hasSupportedCodecs]
  -[VCMediaNegotiationBlobV2MomentsSettings printWithLogFile:prefix:]
  -[VCMediaNegotiationBlobV2MomentsSettings initWithVideoCodecs:imageTypes:capabilitiesOneToOne:capabilitiesMultiway:]
  -[VCMediaNegotiationBlobV2MomentsSettings videoCodecs]
  -[VCMediaNegotiationBlobV2MomentsSettings imageTypes]
  -[VCMediaNegotiationBlobV2MomentsSettings capabilitiesOneToOne]
  -[VCMediaNegotiationBlobV2MomentsSettings capabilitiesMultiway]
  -[VCMediaNegotiationBlobV2MomentsSettings appendFieldName:codecs:outString:]


VCEmulatedNetworkDoubleQueue : VCEmulatedNetwork
  // instance methods
  -[VCEmulatedNetworkDoubleQueue push:]
  -[VCEmulatedNetworkDoubleQueue dealloc]
  -[VCEmulatedNetworkDoubleQueue initWithPolicies:]
  -[VCEmulatedNetworkDoubleQueue runUntilTime:]


VCRateControlOWRDEstimator : NSObject
 @property  double owrd
 @property  unsigned int mode

  // instance methods
  -[VCRateControlOWRDEstimator mode]
  -[VCRateControlOWRDEstimator setMode:]
  -[VCRateControlOWRDEstimator owrd]
  -[VCRateControlOWRDEstimator relativeSendTimeWithTimestamp:timestampRate:]
  -[VCRateControlOWRDEstimator relativeReceiveTimeWithTimestamp:timestampRate:]
  -[VCRateControlOWRDEstimator calculateOWRDWithSendTime:receiveTime:roundTripTime:]
  -[VCRateControlOWRDEstimator detectAbnormalOWRDWithRoundTripTime:]
  -[VCRateControlOWRDEstimator detectOutOfOrderAndSpikeWithSendTimestamp:]
  -[VCRateControlOWRDEstimator detectOutOfOrderAndSpikeWithReceiveTimestamp:]
  -[VCRateControlOWRDEstimator resetOWRDEstimation]


VCAudioStreamSendGroupConfig : VCMediaStreamSendGroupConfig <VCAudioStreamGroupConfig>
 @property  VCSystemAudioCaptureSession *systemAudioCaptureSession
 @property  BOOL shouldScheduleMediaQueue
 @property  VCAudioStreamGroupCommonConfig *audioStreamGroupConfig
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioStreamSendGroupConfig dealloc]
  -[VCAudioStreamSendGroupConfig init]
  -[VCAudioStreamSendGroupConfig audioStreamGroupConfig]
  -[VCAudioStreamSendGroupConfig setAudioStreamGroupConfig:]
  -[VCAudioStreamSendGroupConfig systemAudioCaptureSession]
  -[VCAudioStreamSendGroupConfig setSystemAudioCaptureSession:]
  -[VCAudioStreamSendGroupConfig shouldScheduleMediaQueue]
  -[VCAudioStreamSendGroupConfig setShouldScheduleMediaQueue:]


VCDispatchQueue : NSObject
  // class methods
  +[VCDispatchQueue defaultManager]

  // instance methods
  -[VCDispatchQueue dealloc]
  -[VCDispatchQueue init]
  -[VCDispatchQueue getCustomRootQueueWithPriority:isFixedPriority:]


VCEmulatedNetworkElement : NSObject
 @property  @? processCompleteHandler

  // instance methods
  -[VCEmulatedNetworkElement write:]
  -[VCEmulatedNetworkElement dealloc]
  -[VCEmulatedNetworkElement initWithPolicies:]
  -[VCEmulatedNetworkElement runUntilTime:]
  -[VCEmulatedNetworkElement drainAndReleasePackets]
  -[VCEmulatedNetworkElement connectTo:]
  -[VCEmulatedNetworkElement connectFrom:]
  -[VCEmulatedNetworkElement processCompleteHandler]
  -[VCEmulatedNetworkElement setProcessCompleteHandler:]


VCMomentsHistoryBuffer : NSObject
  // instance methods
  -[VCMomentsHistoryBuffer delegate]
  -[VCMomentsHistoryBuffer dealloc]
  -[VCMomentsHistoryBuffer flushBuffer]
  -[VCMomentsHistoryBuffer initWithDelegate:bufferLength:dispatchQueue:]
  -[VCMomentsHistoryBuffer updateBufferWithSample:timestamp:]
  -[VCMomentsHistoryBuffer getClosestSampleForTimestamp:]
  -[VCMomentsHistoryBuffer getCount]
  -[VCMomentsHistoryBuffer dequeueOneFrame]
  -[VCMomentsHistoryBuffer enqueueWithSample:timestamp:]
  -[VCMomentsHistoryBuffer getUpdatedTimestampWithTimestamp:]


VCCellularAudioTapIO : NSObject
 @property  VCAudioIO *audioIO
 @property  long long streamToken
 @property  VCAudioPowerSpectrumSource *powerSpectrumSource
 @property  ^{tagVCCellularAudioTapIORealtimeContext=q^{_VCAudioPowerSpectrumSourceRealtimeContext}} realtimeContext

  // instance methods
  -[VCCellularAudioTapIO dealloc]
  -[VCCellularAudioTapIO streamToken]
  -[VCCellularAudioTapIO realtimeContext]
  -[VCCellularAudioTapIO audioIO]
  -[VCCellularAudioTapIO setAudioIO:]
  -[VCCellularAudioTapIO initWithStreamToken:powerSpectrumSource:]
  -[VCCellularAudioTapIO powerSpectrumSource]


VCMediaStreamManager : NSObject <VCMediaStreamDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCMediaStreamManager defaultManager]
  +[VCMediaStreamManager addNSError:toXPCArgumentDictionary:]

  // instance methods
  -[VCMediaStreamManager allocWithZone:]
  -[VCMediaStreamManager retain]
  -[VCMediaStreamManager registerBlocksForService]
  -[VCMediaStreamManager dealloc]
  -[VCMediaStreamManager release]
  -[VCMediaStreamManager deregisterBlocksForService]
  -[VCMediaStreamManager copyWithZone:]
  -[VCMediaStreamManager retainCount]
  -[VCMediaStreamManager autorelease]
  -[VCMediaStreamManager init]
  -[VCMediaStreamManager vcMediaStreamDidInterruptionBegin:]
  -[VCMediaStreamManager vcMediaStreamDidInterruptionEnd:]
  -[VCMediaStreamManager vcMediaStreamServerDidDie:]
  -[VCMediaStreamManager vcMediaStreamDidRTPTimeOut:]
  -[VCMediaStreamManager vcMediaStreamDidRTCPTimeOut:]
  -[VCMediaStreamManager vcMediaStream:didReceiveRTCPPackets:]
  -[VCMediaStreamManager vcMediaStream:didReceiveDTMFEventWithDigit:]
  -[VCMediaStreamManager vcMediaStream:updateFrequencyLevel:isInputMeter:]
  -[VCMediaStreamManager vcMediaStream:didReceiveTTYCharacter:]
  -[VCMediaStreamManager vcMediaStream:didReceiveText:]
  -[VCMediaStreamManager vcMediaStream:downlinkQualityDidChange:]
  -[VCMediaStreamManager vcMediaStream:uplinkQualityDidChange:]
  -[VCMediaStreamManager vcMediaStream:didUpdateVideoConfiguration:error:dictionary:]
  -[VCMediaStreamManager pauseStreams:]
  -[VCMediaStreamManager textStreamWithStreamToken:]
  -[VCMediaStreamManager addSyncSourceToVideoStreamConfig:sourceStreamToken:error:]
  -[VCMediaStreamManager stopStream:]


VCMediaNegotiatorStreamGroupStreamConfiguration : NSObject <NSCopying>
 @property  unsigned char streamIndex
 @property  unsigned int ssrc
 @property  unsigned short streamID
 @property  NSSet *payloads
 @property  unsigned int metadata
 @property  unsigned int qualityIndex
 @property  unsigned int maxNetworkBitrate
 @property  unsigned int maxMediaBitrate
 @property  unsigned int maxPacketsPerSecond
 @property  unsigned short repairedStreamID
 @property  unsigned int repairedMaxNetworkBitrate
 @property  {CGSize=dd} resolution
 @property  unsigned int framerate
 @property  unsigned int keyFrameInterval
 @property  unsigned int rtpTimestampRate
 @property  unsigned short parentStreamID
 @property  NSArray *codecs
 @property  BOOL isTemporalStream
 @property  BOOL isSubStream
 @property  unsigned int audioChannelCount
 @property  unsigned long serializedSize
 @property  unsigned int coordinateSystem

  // class methods
  +[VCMediaNegotiatorStreamGroupStreamConfiguration configWithQualityIndex:nwBitrate:mediaBitrate:maxPacketsPerSecond:repairedNwBitrate:keyFrameInterval:framerate:rtpSampleRate:isTemporal:isSubStream:metadata:payloads:codecs:width:height:audioChannelCount:streamIndex:coordinateSystem:]

  // instance methods
  -[VCMediaNegotiatorStreamGroupStreamConfiguration framerate]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setCoordinateSystem:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setResolution:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration streamID]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration dealloc]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration payloads]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration resolution]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setFramerate:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setMetadata:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration addPayload:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration copyWithZone:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration metadata]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration coordinateSystem]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration isEqual:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration init]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration codecs]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setAudioChannelCount:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration audioChannelCount]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setStreamID:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration serializedSize]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration keyFrameInterval]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setMaxNetworkBitrate:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setMaxMediaBitrate:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setMaxPacketsPerSecond:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setRepairedStreamID:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration ssrc]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setSsrc:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration maxNetworkBitrate]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration qualityIndex]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setQualityIndex:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setKeyFrameInterval:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration maxMediaBitrate]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration maxPacketsPerSecond]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration repairedStreamID]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration repairedMaxNetworkBitrate]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration resetPayloads]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration addCodec:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration removeCodec:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration resetCodecs]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration areCodecsEqualTo:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration applyCipherSuiteOnMediaStreamConfig:codecConfigs:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration isEqualPayloads:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration rtpTimestampRate]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setRtpTimestampRate:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration parentStreamID]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setParentStreamID:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration isTemporalStream]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setIsTemporalStream:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration isSubStream]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setIsSubStream:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setSerializedSize:]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration streamIndex]
  -[VCMediaNegotiatorStreamGroupStreamConfiguration setStreamIndex:]


VCDaemonProcessInfoManager : NSObject
  // class methods
  +[VCDaemonProcessInfoManager copyProcessInfo]
  +[VCDaemonProcessInfoManager sharedManager]

  // instance methods
  -[VCDaemonProcessInfoManager allocWithZone:]
  -[VCDaemonProcessInfoManager retain]
  -[VCDaemonProcessInfoManager registerBlocksForService]
  -[VCDaemonProcessInfoManager copyProcessInfo]
  -[VCDaemonProcessInfoManager dealloc]
  -[VCDaemonProcessInfoManager release]
  -[VCDaemonProcessInfoManager deregisterBlocksForService]
  -[VCDaemonProcessInfoManager copyWithZone:]
  -[VCDaemonProcessInfoManager retainCount]
  -[VCDaemonProcessInfoManager autorelease]
  -[VCDaemonProcessInfoManager init]


VCMediaNegotiationBlobV2StreamGroup : PBCodable <NSCopying>
 @property  BOOL hasStreamGroup
 @property  unsigned int streamGroup
 @property  NSMutableArray *payloads
 @property  NSMutableArray *streams

  // class methods
  +[VCMediaNegotiationBlobV2StreamGroup payloadsType]
  +[VCMediaNegotiationBlobV2StreamGroup streamsType]
  +[VCMediaNegotiationBlobV2StreamGroup defaultsForStreamGroup:]
  +[VCMediaNegotiationBlobV2StreamGroup defaultsForStreamGroupCustom:]
  +[VCMediaNegotiationBlobV2StreamGroup updateParentStreamIDForGroupConfig:]
  +[VCMediaNegotiationBlobV2StreamGroup negotiationCipherSuiteAsString:]
  +[VCMediaNegotiationBlobV2StreamGroup isValidStreamGroupIDFromConfig:defaultConfig:]
  +[VCMediaNegotiationBlobV2StreamGroup streamGroupFromStreamGroupID:]
  +[VCMediaNegotiationBlobV2StreamGroup streamGroupIDFromStreamGroup:]

  // instance methods
  -[VCMediaNegotiationBlobV2StreamGroup streams]
  -[VCMediaNegotiationBlobV2StreamGroup copyTo:]
  -[VCMediaNegotiationBlobV2StreamGroup dealloc]
  -[VCMediaNegotiationBlobV2StreamGroup payloads]
  -[VCMediaNegotiationBlobV2StreamGroup mergeFrom:]
  -[VCMediaNegotiationBlobV2StreamGroup dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2StreamGroup copyWithZone:]
  -[VCMediaNegotiationBlobV2StreamGroup setPayloads:]
  -[VCMediaNegotiationBlobV2StreamGroup readFrom:]
  -[VCMediaNegotiationBlobV2StreamGroup clearStreams]
  -[VCMediaNegotiationBlobV2StreamGroup writeTo:]
  -[VCMediaNegotiationBlobV2StreamGroup isEqual:]
  -[VCMediaNegotiationBlobV2StreamGroup setStreams:]
  -[VCMediaNegotiationBlobV2StreamGroup setStreamGroup:]
  -[VCMediaNegotiationBlobV2StreamGroup setHasStreamGroup:]
  -[VCMediaNegotiationBlobV2StreamGroup hasStreamGroup]
  -[VCMediaNegotiationBlobV2StreamGroup clearPayloads]
  -[VCMediaNegotiationBlobV2StreamGroup addPayloads:]
  -[VCMediaNegotiationBlobV2StreamGroup payloadsCount]
  -[VCMediaNegotiationBlobV2StreamGroup payloadsAtIndex:]
  -[VCMediaNegotiationBlobV2StreamGroup addStreams:]
  -[VCMediaNegotiationBlobV2StreamGroup streamsCount]
  -[VCMediaNegotiationBlobV2StreamGroup streamsAtIndex:]
  -[VCMediaNegotiationBlobV2StreamGroup streamGroup]
  -[VCMediaNegotiationBlobV2StreamGroup printWithLogFile:prefix:]
  -[VCMediaNegotiationBlobV2StreamGroup initWithStreamGroupConfig:defaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroup initWithStreamGroupConfig:]
  -[VCMediaNegotiationBlobV2StreamGroup getStreamGroupConfig:]
  -[VCMediaNegotiationBlobV2StreamGroup appendStreamsToStreamGroupConfig:streamGroupID:rtpSampleRates:]
  -[VCMediaNegotiationBlobV2StreamGroup isDefaultPayloadConfigsWithStreamGroupConfig:]
  -[VCMediaNegotiationBlobV2StreamGroup customPayloadConfigStateWithStreamGroupConfig:]
  -[VCMediaNegotiationBlobV2StreamGroup setupStreamsWithGroupConfig:]
  -[VCMediaNegotiationBlobV2StreamGroup isUsedPayloadConfigAtIndex:streamGroupConfig:rtpTimestampRate:]
  -[VCMediaNegotiationBlobV2StreamGroup setupPayloadsWithGroupConfig:]
  -[VCMediaNegotiationBlobV2StreamGroup updatePayloadConfigsWithStreamGroupConfig:rtpSampleRates:]
  -[VCMediaNegotiationBlobV2StreamGroup updateDefaultPayloadConfigsWithConfig:rtpSampleRates:]


VCVideoRule : NSObject
 @property  int iWidth
 @property  int iHeight
 @property  float fRate
 @property  int iPayload
 @property  NSString *description
 @property  float fPref

  // instance methods
  -[VCVideoRule compare:]
  -[VCVideoRule isEqual:]
  -[VCVideoRule initWithFrameWidth:frameHeight:frameRate:payload:priority:]
  -[VCVideoRule initWithFrameWidth:frameHeight:frameRate:]
  -[VCVideoRule initWithFrameWidth:frameHeight:frameRate:payload:]
  -[VCVideoRule compareByPref:]
  -[VCVideoRule setToVideoRule:]
  -[VCVideoRule setFrameWidth:frameHeight:frameRate:]
  -[VCVideoRule isVideoFullHD]
  -[VCVideoRule iWidth]
  -[VCVideoRule iHeight]
  -[VCVideoRule fRate]
  -[VCVideoRule fPref]
  -[VCVideoRule setFPref:]
  -[VCVideoRule iPayload]


VCVideoStreamRTTPLRRateControl : NSObject <VCVideoStreamRateControlProtocol>
 @property  int state
 @property  unsigned int targetBitrate
 @property  double owrd
 @property  double nowrd
 @property  double nowrdShort
 @property  double nowrdAcc
 @property  double rateControlInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoStreamRTTPLRRateControl state]
  -[VCVideoStreamRTTPLRRateControl className]
  -[VCVideoStreamRTTPLRRateControl init]
  -[VCVideoStreamRTTPLRRateControl targetBitrate]
  -[VCVideoStreamRTTPLRRateControl doRateControlWithTime:roundTripTime:packetLossRate:operatingTierIndex:averageReceivedBitrate:]
  -[VCVideoStreamRTTPLRRateControl updateRTPReceiveWithTimestamp:sampleRate:time:]
  -[VCVideoStreamRTTPLRRateControl setMaxTierIndex:minTierIndex:]
  -[VCVideoStreamRTTPLRRateControl owrd]
  -[VCVideoStreamRTTPLRRateControl nowrd]
  -[VCVideoStreamRTTPLRRateControl nowrdShort]
  -[VCVideoStreamRTTPLRRateControl nowrdAcc]
  -[VCVideoStreamRTTPLRRateControl rateControlInterval]
  -[VCVideoStreamRTTPLRRateControl setRateControlInterval:]
  -[VCVideoStreamRTTPLRRateControl printRateControlFullInfoWithLogDump:time:videoStall:videoFrozenDuration:averageTargetBitrate:]
  -[VCVideoStreamRTTPLRRateControl stateChange:]
  -[VCVideoStreamRTTPLRRateControl stateExit]
  -[VCVideoStreamRTTPLRRateControl stateEnter]
  -[VCVideoStreamRTTPLRRateControl rampUpTier]
  -[VCVideoStreamRTTPLRRateControl rampDownTier]
  -[VCVideoStreamRTTPLRRateControl shouldRampDown]
  -[VCVideoStreamRTTPLRRateControl shouldRampUp]


VCEmulatedPacket : NSObject
 @property  unsigned int packetID
 @property  unsigned int size
 @property  unsigned int sequenceNumber
 @property  double arrivalTime
 @property  double networkServiceTime
 @property  double departureTime
 @property  BOOL isLost
 @property  BOOL isDroppedByAQM
 @property  ^v metaData
 @property  long long type

  // instance methods
  -[VCEmulatedPacket setMetaData:]
  -[VCEmulatedPacket metaData]
  -[VCEmulatedPacket type]
  -[VCEmulatedPacket setSequenceNumber:]
  -[VCEmulatedPacket setType:]
  -[VCEmulatedPacket size]
  -[VCEmulatedPacket sequenceNumber]
  -[VCEmulatedPacket setSize:]
  -[VCEmulatedPacket departureTime]
  -[VCEmulatedPacket setDepartureTime:]
  -[VCEmulatedPacket arrivalTime]
  -[VCEmulatedPacket setArrivalTime:]
  -[VCEmulatedPacket isLost]
  -[VCEmulatedPacket initWithPacketID:]
  -[VCEmulatedPacket initWithPacketID:datagram:datagramSize:]
  -[VCEmulatedPacket packetID]
  -[VCEmulatedPacket networkServiceTime]
  -[VCEmulatedPacket setNetworkServiceTime:]
  -[VCEmulatedPacket setIsLost:]
  -[VCEmulatedPacket isDroppedByAQM]
  -[VCEmulatedPacket setIsDroppedByAQM:]


VCConnectionLegacy : VCConnection <VCConnectionProtocol>
 @property  ^{tagCONNRESULT=IiiIiiSS{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}{tagIPPORT=i[16c](?=I[16C])S}IiiiiSiii^{tagCONNRESULT}i} connectionResult
 @property  BOOL waitToBeNominated
 @property  unsigned short relayChannelNumber
 @property  BOOL isUpgraded
 @property  BOOL isReplaceOnly
 @property  BOOL isLocalOnWiFi
 @property  BOOL isRemoteOnWiFi
 @property  BOOL isLocalOnCellular
 @property  BOOL isRemoteOnCellular
 @property  BOOL isLocalOn5G
 @property  BOOL isRemoteOn5G
 @property  BOOL isLocalExpensive
 @property  BOOL isRemoteExpensive
 @property  BOOL isLocalConstrained
 @property  BOOL isRemoteConstrained
 @property  BOOL isLocalDelegated
 @property  BOOL isRemoteDelegated
 @property  BOOL isVirtualRelayLink
 @property  BOOL isWifiToWifi
 @property  NSString *localInterfaceName
 @property  BOOL isIPv6
 @property  int connectionMTU
 @property  int maxConnectionMTU
 @property  int connectionId
 @property  BOOL isRelay
 @property  BOOL isVPN
 @property  BOOL isEndToEndLink
 @property  BOOL serverIsDegraded
 @property  NSUUID *connectionUUID
 @property  int localConnectionType
 @property  int remoteConnectionType
 @property  int localCellTech
 @property  int remoteCellTech
 @property  int priority
 @property  unsigned int type
 @property  NSString *localInterfaceTypeString
 @property  NSString *remoteInterfaceTypeString
 @property  unsigned int uplinkAudioBitrateCapOneToOne
 @property  unsigned int uplinkBitrateCapOneToOne
 @property  unsigned int uplinkBitrateCap
 @property  unsigned int downlinkBitrateCap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCConnectionLegacy setPriority:]
  -[VCConnectionLegacy connectionId]
  -[VCConnectionLegacy copy]
  -[VCConnectionLegacy type]
  -[VCConnectionLegacy dealloc]
  -[VCConnectionLegacy isIPv6]
  -[VCConnectionLegacy priority]
  -[VCConnectionLegacy connectionUUID]
  -[VCConnectionLegacy remoteConnectionType]
  -[VCConnectionLegacy serverIsDegraded]
  -[VCConnectionLegacy isVirtualRelayLink]
  -[VCConnectionLegacy localInterfaceName]
  -[VCConnectionLegacy cellularMTU]
  -[VCConnectionLegacy isRelay]
  -[VCConnectionLegacy isUpgraded]
  -[VCConnectionLegacy isSameAsConnection:]
  -[VCConnectionLegacy isOnSameInterfacesWithConnection:]
  -[VCConnectionLegacy getSourceDestinationInfo:]
  -[VCConnectionLegacy matchesSourceDestinationInfo:]
  -[VCConnectionLegacy updateMaxConnectionMTU:]
  -[VCConnectionLegacy isLocalOnWiFi]
  -[VCConnectionLegacy isRemoteOnWiFi]
  -[VCConnectionLegacy isLocalOnCellular]
  -[VCConnectionLegacy isRemoteOnCellular]
  -[VCConnectionLegacy isLocalOn5G]
  -[VCConnectionLegacy isRemoteOn5G]
  -[VCConnectionLegacy isLocalExpensive]
  -[VCConnectionLegacy isRemoteExpensive]
  -[VCConnectionLegacy isLocalConstrained]
  -[VCConnectionLegacy isRemoteConstrained]
  -[VCConnectionLegacy isLocalDelegated]
  -[VCConnectionLegacy isRemoteDelegated]
  -[VCConnectionLegacy isWifiToWifi]
  -[VCConnectionLegacy connectionMTU]
  -[VCConnectionLegacy setConnectionMTU:]
  -[VCConnectionLegacy maxConnectionMTU]
  -[VCConnectionLegacy setMaxConnectionMTU:]
  -[VCConnectionLegacy isVPN]
  -[VCConnectionLegacy isEndToEndLink]
  -[VCConnectionLegacy localConnectionType]
  -[VCConnectionLegacy localCellTech]
  -[VCConnectionLegacy setLocalCellTech:]
  -[VCConnectionLegacy remoteCellTech]
  -[VCConnectionLegacy setRemoteCellTech:]
  -[VCConnectionLegacy localInterfaceTypeString]
  -[VCConnectionLegacy remoteInterfaceTypeString]
  -[VCConnectionLegacy uplinkAudioBitrateCapOneToOne]
  -[VCConnectionLegacy setUplinkAudioBitrateCapOneToOne:]
  -[VCConnectionLegacy uplinkBitrateCapOneToOne]
  -[VCConnectionLegacy setUplinkBitrateCapOneToOne:]
  -[VCConnectionLegacy uplinkBitrateCap]
  -[VCConnectionLegacy setUplinkBitrateCap:]
  -[VCConnectionLegacy downlinkBitrateCap]
  -[VCConnectionLegacy setDownlinkBitrateCap:]
  -[VCConnectionLegacy initWithConnectionResult:type:]
  -[VCConnectionLegacy initWithCandidatePair:]
  -[VCConnectionLegacy isLocalIPPort:]
  -[VCConnectionLegacy isRemoteIPPort:]
  -[VCConnectionLegacy isOnSameIPPortWithConnection:]
  -[VCConnectionLegacy ipportToString:]
  -[VCConnectionLegacy isReplaceOnly]
  -[VCConnectionLegacy relayChannelNumber]
  -[VCConnectionLegacy IPPortForNWConnection:]
  -[VCConnectionLegacy waitToBeNominated]
  -[VCConnectionLegacy setWaitToBeNominated:]
  -[VCConnectionLegacy connectionResult]


VCMediaNegotiatorStreamGroupConfiguration : NSObject <NSCopying>
 @property  unsigned int groupID
 @property  unsigned int syncGroupID
 @property  unsigned int mediaType
 @property  unsigned int mediaSubtype
 @property  NSOrderedSet *streamConfigs
 @property  NSOrderedSet *codecConfigs

  // class methods
  +[VCMediaNegotiatorStreamGroupConfiguration streamGroupConfigWithGroupID:mediaType:subtype:syncGroupID:cipherSuite:]

  // instance methods
  -[VCMediaNegotiatorStreamGroupConfiguration setGroupID:]
  -[VCMediaNegotiatorStreamGroupConfiguration setMediaType:]
  -[VCMediaNegotiatorStreamGroupConfiguration mediaType]
  -[VCMediaNegotiatorStreamGroupConfiguration groupID]
  -[VCMediaNegotiatorStreamGroupConfiguration dealloc]
  -[VCMediaNegotiatorStreamGroupConfiguration copyWithZone:]
  -[VCMediaNegotiatorStreamGroupConfiguration isEqual:]
  -[VCMediaNegotiatorStreamGroupConfiguration init]
  -[VCMediaNegotiatorStreamGroupConfiguration mediaSubtype]
  -[VCMediaNegotiatorStreamGroupConfiguration initWithGroupID:mediaType:subtype:syncGroupID:]
  -[VCMediaNegotiatorStreamGroupConfiguration initWithGroupID:mediaType:subtype:syncGroupID:cipherSuite:]
  -[VCMediaNegotiatorStreamGroupConfiguration addStreamConfig:]
  -[VCMediaNegotiatorStreamGroupConfiguration addCodecConfig:]
  -[VCMediaNegotiatorStreamGroupConfiguration indexOfCodecConfig:]
  -[VCMediaNegotiatorStreamGroupConfiguration removeStreamConfigs:]
  -[VCMediaNegotiatorStreamGroupConfiguration setMediaSubtype:]
  -[VCMediaNegotiatorStreamGroupConfiguration streamConfigs]
  -[VCMediaNegotiatorStreamGroupConfiguration codecConfigs]
  -[VCMediaNegotiatorStreamGroupConfiguration syncGroupID]
  -[VCMediaNegotiatorStreamGroupConfiguration setSyncGroupID:]


VCAudioUnitSpatialContext : NSObject
 @property  unsigned int audioSessionId
 @property  unsigned int maxChannelCountMic
 @property  unsigned int maxChannelCountSpeaker
 @property  ^{OpaqueCMBlockBuffer=} spatialMetadata

  // instance methods
  -[VCAudioUnitSpatialContext dealloc]
  -[VCAudioUnitSpatialContext audioSessionId]
  -[VCAudioUnitSpatialContext setAudioSessionId:]
  -[VCAudioUnitSpatialContext initWithAudioSessionId:maxChannelCountMic:maxChannelCountSpeaker:spatialMetadata:]
  -[VCAudioUnitSpatialContext spatialMetadata]
  -[VCAudioUnitSpatialContext setSpatialMetadata:]
  -[VCAudioUnitSpatialContext maxChannelCountMic]
  -[VCAudioUnitSpatialContext setMaxChannelCountMic:]
  -[VCAudioUnitSpatialContext maxChannelCountSpeaker]
  -[VCAudioUnitSpatialContext setMaxChannelCountSpeaker:]


VCImageRotationConverter : VCImageRotationConverterBase
  // instance methods
  -[VCImageRotationConverter initWithRotationAngle:width:height:formatType:]


VCVideoStreamSendGroupConfig : VCMediaStreamSendGroupConfig
 @property  VCMoments *moments

  // instance methods
  -[VCVideoStreamSendGroupConfig dealloc]
  -[VCVideoStreamSendGroupConfig moments]
  -[VCVideoStreamSendGroupConfig setMoments:]
  -[VCVideoStreamSendGroupConfig captureSource]
  -[VCVideoStreamSendGroupConfig setCaptureSource:]


VCControlChannelFaceTime : VCControlChannel
  // instance methods
  -[VCControlChannelFaceTime dealloc]
  -[VCControlChannelFaceTime initWithCallID:reportingAgent:]
  -[VCControlChannelFaceTime sendReliableMessageAndWait:withTopic:]
  -[VCControlChannelFaceTime sendReliableMessage:withTopic:]


VCMediaNegotiatorResultsMoments : NSObject
 @property  unsigned int capabilities
 @property  int imageType
 @property  int videoCodec

  // instance methods
  -[VCMediaNegotiatorResultsMoments imageType]
  -[VCMediaNegotiatorResultsMoments setImageType:]
  -[VCMediaNegotiatorResultsMoments capabilities]
  -[VCMediaNegotiatorResultsMoments setCapabilities:]
  -[VCMediaNegotiatorResultsMoments setVideoCodec:]
  -[VCMediaNegotiatorResultsMoments videoCodec]


VCVideoSourceTokenManager : NSObject
  // class methods
  +[VCVideoSourceTokenManager sharedManager]

  // instance methods
  -[VCVideoSourceTokenManager dealloc]
  -[VCVideoSourceTokenManager init]
  -[VCVideoSourceTokenManager createtokenForDeviceName:sourceType:]
  -[VCVideoSourceTokenManager tokenForDeviceName:sourceType:]
  -[VCVideoSourceTokenManager deviceNameForToken:]


VCSystemAudioCaptureController : VCObject <VCAudioIOControllerControl>
 @property  NSDictionary *reportingStats
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCSystemAudioCaptureController isValidConfiguration:]
  +[VCSystemAudioCaptureController captureServerConfigForAudioConfig:forClient:]
  +[VCSystemAudioCaptureController captureSourceForTypePreSpatialSessionType:]
  +[VCSystemAudioCaptureController captureSourceForTypeProcessID:]
  +[VCSystemAudioCaptureController captureSourceForSystemAudioCaptureControllerConfig:]

  // instance methods
  -[VCSystemAudioCaptureController initWithConfig:]
  -[VCSystemAudioCaptureController dealloc]
  -[VCSystemAudioCaptureController init]
  -[VCSystemAudioCaptureController didUpdateBasebandCodec:]
  -[VCSystemAudioCaptureController startClient:]
  -[VCSystemAudioCaptureController stopClient:]
  -[VCSystemAudioCaptureController updateClient:direction:]
  -[VCSystemAudioCaptureController setupLogPrefixWithConfig:]
  -[VCSystemAudioCaptureController dispatchQueueNameWithConfig:]


VCWifiAssistManager : NSObject <NWNetworkOfInterestManagerDelegate>
 @property  BOOL isAvailable
 @property  unsigned char wifiAssistState

  // class methods
  +[VCWifiAssistManager sharedInstance]

  // instance methods
  -[VCWifiAssistManager addDelegate:]
  -[VCWifiAssistManager didStopTrackingNOI:]
  -[VCWifiAssistManager isAvailable]
  -[VCWifiAssistManager dealloc]
  -[VCWifiAssistManager removeDelegate:]
  -[VCWifiAssistManager didStartTrackingNOI:]
  -[VCWifiAssistManager init]
  -[VCWifiAssistManager refreshBudget]
  -[VCWifiAssistManager queryUserPreference]
  -[VCWifiAssistManager queryBudget]
  -[VCWifiAssistManager wifiAssistState]


VCMoments : NSObject <VCMomentsMessenger>
 @property  unsigned int capabilities
 @property  BOOL isActive
 @property  VideoAttributes *remoteScreenAttributes
 @property  int imageType
 @property  int videoCodec
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCMoments fileSize:]
  +[VCMoments deviceHasSufficientFreeSpace]
  +[VCMoments deviceFreeDiskSpace]
  +[VCMoments typeForRequest:]
  +[VCMoments countForRequestType:]

  // instance methods
  -[VCMoments imageType]
  -[VCMoments dealloc]
  -[VCMoments isActive]
  -[VCMoments setImageType:]
  -[VCMoments capabilities]
  -[VCMoments setCapabilities:]
  -[VCMoments setVideoCodec:]
  -[VCMoments setFrameRate:]
  -[VCMoments videoCodec]
  -[VCMoments initWithStreamToken:delegate:]
  -[VCMoments directorySize:]
  -[VCMoments remoteScreenAttributes]
  -[VCMoments addLocalAudioSample:timestamp:]
  -[VCMoments addRemoteAudioSample:timestamp:]
  -[VCMoments addLocalVideoSampleBuffer:cameraStatusBits:timestamp:]
  -[VCMoments updateRemoteScreenAttributes:]
  -[VCMoments setRetainPixelBufferEnabled:]
  -[VCMoments cleanupActiveRequests]
  -[VCMoments setRemoteScreenAttributes:]
  -[VCMoments setMomentsDelegate:]
  -[VCMoments processClientRequest:error:]
  -[VCMoments clearHistoryBuffer]
  -[VCMoments registerClient]
  -[VCMoments deregisterClient]
  -[VCMoments getInitialRemoteScreenAttributes:]
  -[VCMoments validateIncomingRequest:isRemote:]
  -[VCMoments processRequest:isRemote:]
  -[VCMoments transportDelegate]
  -[VCMoments setTransportDelegate:]
  -[VCMoments momentsDelegate]
  -[VCMoments updateActiveStatus]
  -[VCMoments _generateRequest:requestState:transactionID:timestamp:]
  -[VCMoments processRemoteRequest:withMediaType:]
  -[VCMoments processRemoteLivePhotoRequest:]
  -[VCMoments processRemotePhotoRequest:]
  -[VCMoments notifyFinishWithRequest:didSucceed:fileSize:]
  -[VCMoments notifyRemoteFinishWithRequest:didSucceed:fileSize:]
  -[VCMoments notifyLocalFinishWithRequest:didSucceed:]
  -[VCMoments updateVCMomentsMode]
  -[VCMoments validateNumberOfRequestsWithError:]
  -[VCMoments isHistorySupported]
  -[VCMoments handleInsufficientFreeSpaceWithRequest:delegate:]


VCAudioRedBuilder : NSObject
 @property  unsigned int numPayloads
 @property  unsigned int maxDelay
 @property  int redPayloadType

  // class methods
  +[VCAudioRedBuilder redOverheadForNumPayloads:]

  // instance methods
  -[VCAudioRedBuilder maxDelay]
  -[VCAudioRedBuilder setMaxDelay:]
  -[VCAudioRedBuilder dealloc]
  -[VCAudioRedBuilder buildRedPayloadWithPrimaryPayload:redPayloads:]
  -[VCAudioRedBuilder timestampOffsetForBlocks:]
  -[VCAudioRedBuilder isPayloadTimestampWithinThreshold:forTimestamp:]
  -[VCAudioRedBuilder resetOutputPayload:]
  -[VCAudioRedBuilder nearestRedPayloadForTimestamp:]
  -[VCAudioRedBuilder selectRedPayloadsForPrimaryPayload:]
  -[VCAudioRedBuilder redundantPayloads:containsPointer:]
  -[VCAudioRedBuilder redPayloadDescription:]
  -[VCAudioRedBuilder redundantPayloadsDescription:]
  -[VCAudioRedBuilder payloadHistoryDescription]
  -[VCAudioRedBuilder redPayloadForPrimaryPayload:]
  -[VCAudioRedBuilder updatePayloadHistory:]
  -[VCAudioRedBuilder initWithRedPayloadType:sampleRate:samplesPerFrame:numPayloads:maxDelay:includeSequenceOffset:]
  -[VCAudioRedBuilder getPrimaryPayloadWithBuffer:length:payloadType:timestamp:priority:]
  -[VCAudioRedBuilder numPayloads]
  -[VCAudioRedBuilder setNumPayloads:]
  -[VCAudioRedBuilder redPayloadType]


SDPMini : NSObject
 @property  NSString *origin
 @property  NSMutableArray *audioPayloads
 @property  NSMutableArray *secondaryAudioPayloads
 @property  NSString *sessionIP
 @property  NSNumber *audioRTPPort
 @property  NSNumber *audioRTCPPort
 @property  NSNumber *audioRTPID
 @property  BOOL allowRTCPFB
 @property  NSNumber *answerBandwidth
 @property  NSNumber *maxBandwidth
 @property  BOOL allowsDynamicMaxBitrate
 @property  NSDictionary *featureListDict
 @property  BOOL allowsContentsChangeWithAspectPreservation
 @property  NSNumber *aacBlockSize
 @property  NSNumber *audioUnitModel
 @property  BOOL allowAudioRecording

  // class methods
  +[SDPMini setPayload:mediaLine:]

  // instance methods
  -[SDPMini setOrigin:]
  -[SDPMini origin]
  -[SDPMini dealloc]
  -[SDPMini initWithString:]
  -[SDPMini init]
  -[SDPMini maxBandwidth]
  -[SDPMini setMaxBandwidth:]
  -[SDPMini audioRTPPort]
  -[SDPMini setAudioUnitModel:]
  -[SDPMini audioUnitModel]
  -[SDPMini allowAudioRecording]
  -[SDPMini setAllowAudioRecording:]
  -[SDPMini aacBlockSize]
  -[SDPMini setAacBlockSize:]
  -[SDPMini audioPayloads]
  -[SDPMini SDPUsername]
  -[SDPMini getMediaLineForType:]
  -[SDPMini addMediaLine:mediaType:]
  -[SDPMini mediaTypeToString:]
  -[SDPMini setVideoPayloads:count:]
  -[SDPMini toStringWithVideoEnabled:]
  -[SDPMini setBasebandCodecType:sampleRate:]
  -[SDPMini getBasebandCodecType:sampleRate:]
  -[SDPMini createVideoImageAttr:direction:dimensions:count:]
  -[SDPMini getNegotiatedResolutionForPayload:forInterface:withRule:direction:result:remoteSupportsHD:screenSharing:]
  -[SDPMini secondaryAudioPayloads]
  -[SDPMini sessionIP]
  -[SDPMini setSessionIP:]
  -[SDPMini setAudioRTPPort:]
  -[SDPMini audioRTCPPort]
  -[SDPMini setAudioRTCPPort:]
  -[SDPMini audioRTPID]
  -[SDPMini setAudioRTPID:]
  -[SDPMini allowRTCPFB]
  -[SDPMini setAllowRTCPFB:]
  -[SDPMini answerBandwidth]
  -[SDPMini setAnswerBandwidth:]
  -[SDPMini allowsDynamicMaxBitrate]
  -[SDPMini setAllowsDynamicMaxBitrate:]
  -[SDPMini featureListDict]
  -[SDPMini setFeatureListDict:]
  -[SDPMini allowsContentsChangeWithAspectPreservation]
  -[SDPMini setAllowsContentsChangeWithAspectPreservation:]
  -[SDPMini composeBandwidthString]
  -[SDPMini composeSessionString]
  -[SDPMini composeFLSString]
  -[SDPMini composeAudioFMTPForPayload:]
  -[SDPMini composeAudioString]
  -[SDPMini parseIP:]
  -[SDPMini parseBandwidth:]
  -[SDPMini parseMediaLine:]
  -[SDPMini parseSDPFromString:]
  -[SDPMini parseRTPID:]
  -[SDPMini parseRTCPPort:]
  -[SDPMini parseSessionAttributes:]
  -[SDPMini parseAudioFormatAttribute:]
  -[SDPMini parseAudioMediaAttributes:]
  -[SDPMini rulesFramerate:]
  -[SDPMini rulesImageSizeForExternalPayload:pWidth:pHeight:]
  -[SDPMini setUseSbr:blockSize:forAACFormat:]
  -[SDPMini getUseSbr:blockSize:forAACFormat:]
  -[SDPMini setVideoRTCPFB:useNACK:]


VCMediaNegotiatorLocalConfiguration : NSObject <NSCopying>
 @property  unsigned int videoSSRC
 @property  unsigned int screenSSRC
 @property  VCMediaNegotiatorAudioConfiguration *audioConfiguration
 @property  VCVideoRuleCollections *videoRuleCollections
 @property  VCVideoRuleCollections *screenRuleCollections
 @property  int preferredAudioCodec
 @property  int deviceRole
 @property  NSDictionary *videoFeatureStrings
 @property  BOOL allowRTCPFB
 @property  BOOL isCaller
 @property  NSString *basebandCodec
 @property  unsigned int basebandCodecSampleRate
 @property  NSSet *bandwidthConfigurations
 @property  NSSet *captionsSenderLanguages
 @property  NSSet *captionsReceiverLanguages
 @property  ^v callLogFile
 @property  (tagNTP=Q{?=II}) creationTime
 @property  unsigned char mediaControlInfoVersion
 @property  NSMutableOrderedSet *multiwayAudioStreams
 @property  NSMutableOrderedSet *multiwayVideoStreams
 @property  NSSet *momentsVideoCodecs
 @property  NSSet *momentsImageTypes
 @property  BOOL SIPDisabled
 @property  BOOL secureMessagingRequired
 @property  unsigned int faceTimeSwitches
 @property  unsigned int customVideoWidth
 @property  unsigned int customVideoHeight
 @property  BOOL alwaysOnAudRedEnabled
 @property  BOOL alwaysOnAudioRedundancyEnabled
 @property  BOOL highFecEnabled
 @property  BOOL lowFpsVideoEnabled
 @property  BOOL vplrFecEnabled
 @property  BOOL rampDownBWDropEnabled
 @property  BOOL fastMediaDuplicationEnabled
 @property  BOOL iRATRtpEnabled
 @property  BOOL preWarmCellEnabled
 @property  BOOL duplicateImportantPktsEnabled
 @property  unsigned int tilesPerVideoFrame
 @property  BOOL oneToOneModeSupported
 @property  BOOL ltrpEnabled
 @property  NSSet *pixelFormats
 @property  unsigned char mediaControlInfoFECFeedbackVersion
 @property  unsigned char linkProbingCapabilityVersion
 @property  NSSet *streamGroupConfigs
 @property  {CGSize=dd} screenSize
 @property  {CGSize=dd} aspectRatioLandscape
 @property  {CGSize=dd} aspectRatioPortrait
 @property  {CGSize=dd} orientationMismatchAspectRatioLandscape
 @property  NSSet *hdrModesSupported

  // instance methods
  -[VCMediaNegotiatorLocalConfiguration creationTime]
  -[VCMediaNegotiatorLocalConfiguration dealloc]
  -[VCMediaNegotiatorLocalConfiguration setCreationTime:]
  -[VCMediaNegotiatorLocalConfiguration copyWithZone:]
  -[VCMediaNegotiatorLocalConfiguration screenSize]
  -[VCMediaNegotiatorLocalConfiguration audioConfiguration]
  -[VCMediaNegotiatorLocalConfiguration isEqual:]
  -[VCMediaNegotiatorLocalConfiguration init]
  -[VCMediaNegotiatorLocalConfiguration videoSSRC]
  -[VCMediaNegotiatorLocalConfiguration setAudioConfiguration:]
  -[VCMediaNegotiatorLocalConfiguration mediaControlInfoFECFeedbackVersion]
  -[VCMediaNegotiatorLocalConfiguration setMediaControlInfoFECFeedbackVersion:]
  -[VCMediaNegotiatorLocalConfiguration deviceRole]
  -[VCMediaNegotiatorLocalConfiguration SIPDisabled]
  -[VCMediaNegotiatorLocalConfiguration setSIPDisabled:]
  -[VCMediaNegotiatorLocalConfiguration secureMessagingRequired]
  -[VCMediaNegotiatorLocalConfiguration setSecureMessagingRequired:]
  -[VCMediaNegotiatorLocalConfiguration faceTimeSwitches]
  -[VCMediaNegotiatorLocalConfiguration setFaceTimeSwitches:]
  -[VCMediaNegotiatorLocalConfiguration oneToOneModeSupported]
  -[VCMediaNegotiatorLocalConfiguration setOneToOneModeSupported:]
  -[VCMediaNegotiatorLocalConfiguration setDeviceRole:]
  -[VCMediaNegotiatorLocalConfiguration preferredAudioCodec]
  -[VCMediaNegotiatorLocalConfiguration allowRTCPFB]
  -[VCMediaNegotiatorLocalConfiguration setAllowRTCPFB:]
  -[VCMediaNegotiatorLocalConfiguration basebandCodecSampleRate]
  -[VCMediaNegotiatorLocalConfiguration initWithBitrateArbiter:]
  -[VCMediaNegotiatorLocalConfiguration setupBandwidthConfigurationsWithArbiter:]
  -[VCMediaNegotiatorLocalConfiguration setupBandwidthExtensionConfiguration:]
  -[VCMediaNegotiatorLocalConfiguration addBandwidthConfiguration:]
  -[VCMediaNegotiatorLocalConfiguration addMultiwayAudioStream:]
  -[VCMediaNegotiatorLocalConfiguration addMultiwayVideoStream:]
  -[VCMediaNegotiatorLocalConfiguration addStreamGroupConfig:]
  -[VCMediaNegotiatorLocalConfiguration resetStreamGroups]
  -[VCMediaNegotiatorLocalConfiguration isEqualBandwidthConfigurations:]
  -[VCMediaNegotiatorLocalConfiguration isEqualMultiwayAudioStreamSet:]
  -[VCMediaNegotiatorLocalConfiguration isEqualMultiwayVideoStreamSet:]
  -[VCMediaNegotiatorLocalConfiguration isEqualStreamGroupConfigs:]
  -[VCMediaNegotiatorLocalConfiguration isEqualFeatureStrings:]
  -[VCMediaNegotiatorLocalConfiguration isEqualMomentsImageTypes:]
  -[VCMediaNegotiatorLocalConfiguration isEqualMomentsVideoCodecs:]
  -[VCMediaNegotiatorLocalConfiguration isEqualFaceTimeSettings:]
  -[VCMediaNegotiatorLocalConfiguration videoRuleCollections]
  -[VCMediaNegotiatorLocalConfiguration setVideoRuleCollections:]
  -[VCMediaNegotiatorLocalConfiguration screenRuleCollections]
  -[VCMediaNegotiatorLocalConfiguration setScreenRuleCollections:]
  -[VCMediaNegotiatorLocalConfiguration videoFeatureStrings]
  -[VCMediaNegotiatorLocalConfiguration setVideoFeatureStrings:]
  -[VCMediaNegotiatorLocalConfiguration setVideoSSRC:]
  -[VCMediaNegotiatorLocalConfiguration screenSSRC]
  -[VCMediaNegotiatorLocalConfiguration setScreenSSRC:]
  -[VCMediaNegotiatorLocalConfiguration isCaller]
  -[VCMediaNegotiatorLocalConfiguration setIsCaller:]
  -[VCMediaNegotiatorLocalConfiguration basebandCodec]
  -[VCMediaNegotiatorLocalConfiguration setBasebandCodec:]
  -[VCMediaNegotiatorLocalConfiguration setBasebandCodecSampleRate:]
  -[VCMediaNegotiatorLocalConfiguration bandwidthConfigurations]
  -[VCMediaNegotiatorLocalConfiguration setBandwidthConfigurations:]
  -[VCMediaNegotiatorLocalConfiguration captionsSenderLanguages]
  -[VCMediaNegotiatorLocalConfiguration setCaptionsSenderLanguages:]
  -[VCMediaNegotiatorLocalConfiguration captionsReceiverLanguages]
  -[VCMediaNegotiatorLocalConfiguration setCaptionsReceiverLanguages:]
  -[VCMediaNegotiatorLocalConfiguration callLogFile]
  -[VCMediaNegotiatorLocalConfiguration setCallLogFile:]
  -[VCMediaNegotiatorLocalConfiguration mediaControlInfoVersion]
  -[VCMediaNegotiatorLocalConfiguration setMediaControlInfoVersion:]
  -[VCMediaNegotiatorLocalConfiguration multiwayAudioStreams]
  -[VCMediaNegotiatorLocalConfiguration setMultiwayAudioStreams:]
  -[VCMediaNegotiatorLocalConfiguration multiwayVideoStreams]
  -[VCMediaNegotiatorLocalConfiguration setMultiwayVideoStreams:]
  -[VCMediaNegotiatorLocalConfiguration momentsImageTypes]
  -[VCMediaNegotiatorLocalConfiguration setMomentsImageTypes:]
  -[VCMediaNegotiatorLocalConfiguration momentsVideoCodecs]
  -[VCMediaNegotiatorLocalConfiguration setMomentsVideoCodecs:]
  -[VCMediaNegotiatorLocalConfiguration customVideoWidth]
  -[VCMediaNegotiatorLocalConfiguration setCustomVideoWidth:]
  -[VCMediaNegotiatorLocalConfiguration customVideoHeight]
  -[VCMediaNegotiatorLocalConfiguration setCustomVideoHeight:]
  -[VCMediaNegotiatorLocalConfiguration tilesPerVideoFrame]
  -[VCMediaNegotiatorLocalConfiguration setTilesPerVideoFrame:]
  -[VCMediaNegotiatorLocalConfiguration ltrpEnabled]
  -[VCMediaNegotiatorLocalConfiguration setLtrpEnabled:]
  -[VCMediaNegotiatorLocalConfiguration pixelFormats]
  -[VCMediaNegotiatorLocalConfiguration setPixelFormats:]
  -[VCMediaNegotiatorLocalConfiguration hdrModesSupported]
  -[VCMediaNegotiatorLocalConfiguration setHdrModesSupported:]
  -[VCMediaNegotiatorLocalConfiguration linkProbingCapabilityVersion]
  -[VCMediaNegotiatorLocalConfiguration setLinkProbingCapabilityVersion:]
  -[VCMediaNegotiatorLocalConfiguration streamGroupConfigs]
  -[VCMediaNegotiatorLocalConfiguration aspectRatioLandscape]
  -[VCMediaNegotiatorLocalConfiguration aspectRatioPortrait]
  -[VCMediaNegotiatorLocalConfiguration orientationMismatchAspectRatioLandscape]
  -[VCMediaNegotiatorLocalConfiguration setPreferredAudioCodec:]
  -[VCMediaNegotiatorLocalConfiguration alwaysOnAudRedEnabled]
  -[VCMediaNegotiatorLocalConfiguration setAlwaysOnAudRedEnabled:]
  -[VCMediaNegotiatorLocalConfiguration alwaysOnAudioRedundancyEnabled]
  -[VCMediaNegotiatorLocalConfiguration setAlwaysOnAudioRedundancyEnabled:]
  -[VCMediaNegotiatorLocalConfiguration highFecEnabled]
  -[VCMediaNegotiatorLocalConfiguration setHighFecEnabled:]
  -[VCMediaNegotiatorLocalConfiguration lowFpsVideoEnabled]
  -[VCMediaNegotiatorLocalConfiguration setLowFpsVideoEnabled:]
  -[VCMediaNegotiatorLocalConfiguration vplrFecEnabled]
  -[VCMediaNegotiatorLocalConfiguration setVplrFecEnabled:]
  -[VCMediaNegotiatorLocalConfiguration rampDownBWDropEnabled]
  -[VCMediaNegotiatorLocalConfiguration setRampDownBWDropEnabled:]
  -[VCMediaNegotiatorLocalConfiguration fastMediaDuplicationEnabled]
  -[VCMediaNegotiatorLocalConfiguration setFastMediaDuplicationEnabled:]
  -[VCMediaNegotiatorLocalConfiguration iRATRtpEnabled]
  -[VCMediaNegotiatorLocalConfiguration setIRATRtpEnabled:]
  -[VCMediaNegotiatorLocalConfiguration preWarmCellEnabled]
  -[VCMediaNegotiatorLocalConfiguration setPreWarmCellEnabled:]
  -[VCMediaNegotiatorLocalConfiguration duplicateImportantPktsEnabled]
  -[VCMediaNegotiatorLocalConfiguration setDuplicateImportantPktsEnabled:]


SenderLargeFrameInfo : NSObject
 @property  double startTime
 @property  double lastProbingSequenceTimeExpect
 @property  double lastProbingSequenceTimeActual
 @property  unsigned int largeFrameSizeRequested
 @property  unsigned int largeFrameSizeAtCurrentBandwidth
 @property  unsigned int probingSequencePacketSize
 @property  unsigned int probingSequencePacketCount
 @property  int probingSequenceCount
 @property  int totalLargeFrameWaste
 @property  BOOL isLastFrameProbingSequence
 @property  BOOL isLargeFrameRequestDisabled

  // instance methods
  -[SenderLargeFrameInfo startTime]
  -[SenderLargeFrameInfo setStartTime:]
  -[SenderLargeFrameInfo lastProbingSequenceTimeExpect]
  -[SenderLargeFrameInfo setLastProbingSequenceTimeExpect:]
  -[SenderLargeFrameInfo lastProbingSequenceTimeActual]
  -[SenderLargeFrameInfo setLastProbingSequenceTimeActual:]
  -[SenderLargeFrameInfo largeFrameSizeRequested]
  -[SenderLargeFrameInfo setLargeFrameSizeRequested:]
  -[SenderLargeFrameInfo largeFrameSizeAtCurrentBandwidth]
  -[SenderLargeFrameInfo setLargeFrameSizeAtCurrentBandwidth:]
  -[SenderLargeFrameInfo probingSequencePacketSize]
  -[SenderLargeFrameInfo setProbingSequencePacketSize:]
  -[SenderLargeFrameInfo probingSequencePacketCount]
  -[SenderLargeFrameInfo setProbingSequencePacketCount:]
  -[SenderLargeFrameInfo probingSequenceCount]
  -[SenderLargeFrameInfo setProbingSequenceCount:]
  -[SenderLargeFrameInfo totalLargeFrameWaste]
  -[SenderLargeFrameInfo setTotalLargeFrameWaste:]
  -[SenderLargeFrameInfo isLastFrameProbingSequence]
  -[SenderLargeFrameInfo setIsLastFrameProbingSequence:]
  -[SenderLargeFrameInfo isLargeFrameRequestDisabled]
  -[SenderLargeFrameInfo setIsLargeFrameRequestDisabled:]


VCRateControlMediaController : NSObject
 @property  AVCStatisticsCollector *statisticsCollector
 @property  unsigned int videoSendingBitrate
 @property  unsigned int audioSendingBitrate
 @property  unsigned int minTargetBitrate
 @property  unsigned int targetBitrate
 @property  int basebandFlushCount
 @property  double lastBasebandFlushCountChangeTime
 @property  int basebandFlushedVideoCount
 @property  int basebandFlushedAudioCount
 @property  BOOL isVideoStoppedByVCRateControl
 @property  BOOL isVideoStopped
 @property  BOOL isInThrottlingMode
 @property  BOOL allowVideoStop
 @property  BOOL isSenderProbingEnabled
 @property  BOOL isAudioOnly
 @property  BOOL isRateLimitedMaxTimeExceeded
 @property  BOOL shouldDisableLargeFrameRequestsWhenInitialRampUp
 @property  unsigned int probingLargeFrameSize
 @property  unsigned int probingSequencePacketCount
 @property  unsigned int probingSequencePacketSize
 @property  unsigned int afrcRemoteEstimatedBandwidth
 @property  BOOL isRTPFlushBasebandFromVCRateControl
 @property  int audioFractionTier
 @property  double lastVideoKeyFrameTime
 @property  double lastVideoRefreshFrameTime
 @property  BOOL enableAggressiveProbingSequence
 @property  VCRateControlServerBag *serverBag
 @property  ^{tagHANDLE=i} mediaQueue
 @property  BOOL isRemoteAudioPaused

  // instance methods
  -[VCRateControlMediaController setServerBag:]
  -[VCRateControlMediaController serverBag]
  -[VCRateControlMediaController dealloc]
  -[VCRateControlMediaController mediaQueue]
  -[VCRateControlMediaController isAudioOnly]
  -[VCRateControlMediaController statisticsCollector]
  -[VCRateControlMediaController setStatisticsCollector:]
  -[VCRateControlMediaController targetBitrate]
  -[VCRateControlMediaController enableBWELogDump:]
  -[VCRateControlMediaController setTargetBitrate:]
  -[VCRateControlMediaController probingSequencePacketSize]
  -[VCRateControlMediaController probingSequencePacketCount]
  -[VCRateControlMediaController initWithMediaQueue:delegate:]
  -[VCRateControlMediaController enableBasebandLogDump:]
  -[VCRateControlMediaController getMediaQueueInVideoBitrate:outVideoBitrate:inAudioBitrate:outAudioBitrate:]
  -[VCRateControlMediaController getMediaQueueRateChangeCounter:rateChangeTime:]
  -[VCRateControlMediaController computePacketLossWithRemoteInfo:]
  -[VCRateControlMediaController updateBasebandSuggestionWithStatistics:]
  -[VCRateControlMediaController updateAudioStallInMediaSuggestion:isSuggestionNeeded:atTime:]
  -[VCRateControlMediaController pauseVideoByUser:]
  -[VCRateControlMediaController stopVideoByVCRateControl]
  -[VCRateControlMediaController resumeVideoByVCRateControl]
  -[VCRateControlMediaController setIsRemoteAudioPaused:]
  -[VCRateControlMediaController isVideoStopped]
  -[VCRateControlMediaController decreaseFlushCount:]
  -[VCRateControlMediaController didMediaGetFlushedWithPayloadType:transactionID:packetDropped:sequenceNumberArray:]
  -[VCRateControlMediaController basebandFlushCount]
  -[VCRateControlMediaController setAudioSendingBitrate:]
  -[VCRateControlMediaController setAudioFractionTier:]
  -[VCRateControlMediaController rampDownAudioFraction]
  -[VCRateControlMediaController rampUpAudioFraction]
  -[VCRateControlMediaController probingLargeFrameSize]
  -[VCRateControlMediaController scheduleProbingSequenceWithFrameSize:paddingBytes:timestamp:fecRatio:isProbingSequenceScheduled:]
  -[VCRateControlMediaController recordVideoRefreshFrameWithTimestamp:payloadType:packetCount:isKeyFrame:]
  -[VCRateControlMediaController increaseFlushCountForVideoRefresh:transactionID:]
  -[VCRateControlMediaController increaseFlushCountForAudioStall:audioStallBitrate:]
  -[VCRateControlMediaController increaseBasebandFlushCountInternallyWithSuggestion:]
  -[VCRateControlMediaController scheduleProbingSequenceAtTime:]
  -[VCRateControlMediaController printLargeFrameStatsAtTime:timestamp:timeSinceLastProbingSequence:frameSize:wastedBytes:fecRatio:isFrameRequested:]
  -[VCRateControlMediaController isProbingLargeFrameRequiredAtTime:]
  -[VCRateControlMediaController updateProbingLargeFrameSizeCap]
  -[VCRateControlMediaController updateLargeFrameSizeWithBandwidth:]
  -[VCRateControlMediaController videoSendingBitrate]
  -[VCRateControlMediaController setVideoSendingBitrate:]
  -[VCRateControlMediaController audioSendingBitrate]
  -[VCRateControlMediaController minTargetBitrate]
  -[VCRateControlMediaController setMinTargetBitrate:]
  -[VCRateControlMediaController setBasebandFlushCount:]
  -[VCRateControlMediaController lastBasebandFlushCountChangeTime]
  -[VCRateControlMediaController setLastBasebandFlushCountChangeTime:]
  -[VCRateControlMediaController basebandFlushedVideoCount]
  -[VCRateControlMediaController basebandFlushedAudioCount]
  -[VCRateControlMediaController isVideoStoppedByVCRateControl]
  -[VCRateControlMediaController isSenderProbingEnabled]
  -[VCRateControlMediaController setIsSenderProbingEnabled:]
  -[VCRateControlMediaController setIsAudioOnly:]
  -[VCRateControlMediaController isInThrottlingMode]
  -[VCRateControlMediaController isRemoteAudioPaused]
  -[VCRateControlMediaController allowVideoStop]
  -[VCRateControlMediaController setAllowVideoStop:]
  -[VCRateControlMediaController isRateLimitedMaxTimeExceeded]
  -[VCRateControlMediaController setIsRateLimitedMaxTimeExceeded:]
  -[VCRateControlMediaController shouldDisableLargeFrameRequestsWhenInitialRampUp]
  -[VCRateControlMediaController setShouldDisableLargeFrameRequestsWhenInitialRampUp:]
  -[VCRateControlMediaController afrcRemoteEstimatedBandwidth]
  -[VCRateControlMediaController setAfrcRemoteEstimatedBandwidth:]
  -[VCRateControlMediaController isRTPFlushBasebandFromVCRateControl]
  -[VCRateControlMediaController setIsRTPFlushBasebandFromVCRateControl:]
  -[VCRateControlMediaController audioFractionTier]
  -[VCRateControlMediaController lastVideoKeyFrameTime]
  -[VCRateControlMediaController lastVideoRefreshFrameTime]
  -[VCRateControlMediaController enableAggressiveProbingSequence]
  -[VCRateControlMediaController setEnableAggressiveProbingSequence:]
  -[VCRateControlMediaController setMediaQueue:]


VCEmulatedNetworkAlgorithmQueueDelay : NSObject <VCEmulatedNetworkAlgorithm>
 @property  double expectedProcessEndTime
 @property  unsigned int packetCountInNetworkQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCEmulatedNetworkAlgorithmQueueDelay process:]
  -[VCEmulatedNetworkAlgorithmQueueDelay init]
  -[VCEmulatedNetworkAlgorithmQueueDelay updateSettingsAtTime:impairments:]
  -[VCEmulatedNetworkAlgorithmQueueDelay expectedProcessEndTime]
  -[VCEmulatedNetworkAlgorithmQueueDelay packetCountInNetworkQueue]
  -[VCEmulatedNetworkAlgorithmQueueDelay setPacketCountInNetworkQueue:]
  -[VCEmulatedNetworkAlgorithmQueueDelay computeNetworkDelay]


VCConnection : NSObject
  // instance methods
  -[VCConnection dealloc]
  -[VCConnection init]
  -[VCConnection setLinkFlags:]
  -[VCConnection compare:isPrimary:selectionPolicy:]
  -[VCConnection setRemoteLinkFlags:]
  -[VCConnection compareInterfacePriority:isPrimary:]
  -[VCConnection compareConnectionTypePriority:selectionPolicy:]
  -[VCConnection compareVpnPriority:selectionPolicy:]
  -[VCConnection compareE2EPriority:selectionPolicy:]
  -[VCConnection compareIpVersionPriority:selectionPolicy:]
  -[VCConnection getConnectionSelectionPriorities]


VCCaptionsTranscriptionSegment : NSObject <NSCopying, NSCoding, NSSecureCoding, VCCaptionsTranscriptionSegment>
 @property  unsigned int confidence
 @property  NSString *text
 @property  {_NSRange=QQ} range

  // class methods
  +[VCCaptionsTranscriptionSegment supportsSecureCoding]

  // instance methods
  -[VCCaptionsTranscriptionSegment confidence]
  -[VCCaptionsTranscriptionSegment text]
  -[VCCaptionsTranscriptionSegment encodeWithCoder:]
  -[VCCaptionsTranscriptionSegment dealloc]
  -[VCCaptionsTranscriptionSegment copyWithZone:]
  -[VCCaptionsTranscriptionSegment range]
  -[VCCaptionsTranscriptionSegment isEqual:]
  -[VCCaptionsTranscriptionSegment initWithCoder:]
  -[VCCaptionsTranscriptionSegment initWithConfidence:text:range:]


VCIDRScheduler : NSObject
 @property  unsigned int basePeriodMs
 @property  unsigned int captureFramerate

  // class methods
  +[VCIDRScheduler computeGcdForX:y:]

  // instance methods
  -[VCIDRScheduler dealloc]
  -[VCIDRScheduler initWithStreams:captureFramerate:]
  -[VCIDRScheduler computeBasePeriod]
  -[VCIDRScheduler computeCaptureFramerate]
  -[VCIDRScheduler computeGroupList]
  -[VCIDRScheduler computeSchedulerItemList]
  -[VCIDRScheduler computeSchedulerItemsBudget]
  -[VCIDRScheduler placeRemainingItems:placedItems:leftItem:rightItem:]
  -[VCIDRScheduler computeSchedulerItemsPosition]
  -[VCIDRScheduler computeStreamsIDRPosition]
  -[VCIDRScheduler realignStreams]
  -[VCIDRScheduler basePeriodMs]
  -[VCIDRScheduler captureFramerate]


VCCaptionsTranscriptionBlob : PBCodable <NSCopying>
 @property  unsigned int utteranceNumber
 @property  unsigned int updateNumber
 @property  BOOL hasIsLocal
 @property  BOOL isLocal
 @property  BOOL hasIsFinal
 @property  BOOL isFinal
 @property  NSMutableArray *segments

  // class methods
  +[VCCaptionsTranscriptionBlob segmentsType]

  // instance methods
  -[VCCaptionsTranscriptionBlob setIsLocal:]
  -[VCCaptionsTranscriptionBlob copyTo:]
  -[VCCaptionsTranscriptionBlob dealloc]
  -[VCCaptionsTranscriptionBlob segments]
  -[VCCaptionsTranscriptionBlob mergeFrom:]
  -[VCCaptionsTranscriptionBlob segmentsCount]
  -[VCCaptionsTranscriptionBlob setSegments:]
  -[VCCaptionsTranscriptionBlob addSegments:]
  -[VCCaptionsTranscriptionBlob dictionaryRepresentation]
  -[VCCaptionsTranscriptionBlob copyWithZone:]
  -[VCCaptionsTranscriptionBlob readFrom:]
  -[VCCaptionsTranscriptionBlob isLocal]
  -[VCCaptionsTranscriptionBlob writeTo:]
  -[VCCaptionsTranscriptionBlob isEqual:]
  -[VCCaptionsTranscriptionBlob isFinal]
  -[VCCaptionsTranscriptionBlob setIsFinal:]
  -[VCCaptionsTranscriptionBlob hasIsFinal]
  -[VCCaptionsTranscriptionBlob setHasIsFinal:]
  -[VCCaptionsTranscriptionBlob utteranceNumber]
  -[VCCaptionsTranscriptionBlob setHasIsLocal:]
  -[VCCaptionsTranscriptionBlob hasIsLocal]
  -[VCCaptionsTranscriptionBlob clearSegments]
  -[VCCaptionsTranscriptionBlob updateNumber]
  -[VCCaptionsTranscriptionBlob setUpdateNumber:]
  -[VCCaptionsTranscriptionBlob setUtteranceNumber:]
  -[VCCaptionsTranscriptionBlob segmentsAtIndex:]
  -[VCCaptionsTranscriptionBlob initWithSFTranscription:final:isLocal:utteranceNumber:updateNumber:]


VCConnectionManagerLegacy : VCConnectionManager
 @property  <VCConnectionProtocol> *pendingPrimaryConnection
 @property  <VCConnectionProtocol> *pendingSecondaryConnection
 @property  NSString *relayConnectionID

  // instance methods
  -[VCConnectionManagerLegacy addConnection:]
  -[VCConnectionManagerLegacy dealloc]
  -[VCConnectionManagerLegacy removeConnection:]
  -[VCConnectionManagerLegacy init]
  -[VCConnectionManagerLegacy startActiveProbingWithOptions:]
  -[VCConnectionManagerLegacy stopActiveProbingWithOptions:]
  -[VCConnectionManagerLegacy flushLinkProbingStatusWithOptions:]
  -[VCConnectionManagerLegacy queryProbingResultsWithOptions:]
  -[VCConnectionManagerLegacy reportConnection:isInitialConnection:]
  -[VCConnectionManagerLegacy shouldNominateCandidatePair:interfaceMask:nominated:demote:connectionPriority:replaceOnly:]
  -[VCConnectionManagerLegacy shouldNominateCandidatePairInternal:interfaceMask:nominated:demote:connectionPriority:replaceOnly:]
  -[VCConnectionManagerLegacy removeConnectionWithIPPort:isLocalInterface:]
  -[VCConnectionManagerLegacy removeConnectionWithIPPortInternal:isLocalInterface:]
  -[VCConnectionManagerLegacy nominateConnection:asPrimary:interfaceMask:demote:connectionPriority:replaceOnly:]
  -[VCConnectionManagerLegacy shouldNominateConnection:]
  -[VCConnectionManagerLegacy updateStateWithCurrentConnection:asPrimary:interfaceMask:demote:replaceOnly:]
  -[VCConnectionManagerLegacy getPrimaryConnectionToBeCompared]
  -[VCConnectionManagerLegacy getSecondaryConnectionToBeCompared]
  -[VCConnectionManagerLegacy updateCellularMTU:]
  -[VCConnectionManagerLegacy updateCellularTech:forLocalInterface:]
  -[VCConnectionManagerLegacy sourceDestinationInfo:isSourceOnCellular:isSourceIPv6:]
  -[VCConnectionManagerLegacy shouldAcceptDataFromSourceDestinationInfo:]
  -[VCConnectionManagerLegacy copyConnectionWithSourceDestinationInfo:isPrimary:]
  -[VCConnectionManagerLegacy updateSessionStats:]
  -[VCConnectionManagerLegacy updatePacketCountAndByteCountWithIndex:packetSize:numOfStreamId:isPriorityIncluded:isOutgoing:]
  -[VCConnectionManagerLegacy synchronizeParticipantGenerationCounter:]
  -[VCConnectionManagerLegacy getPacketCountWithIndex:isOutgoing:]
  -[VCConnectionManagerLegacy getByteCountWithIndex:isOutgoing:]
  -[VCConnectionManagerLegacy updateConnectionForDuplication]
  -[VCConnectionManagerLegacy reportLinkProbingStatsWithDuplicationJustStarted:]
  -[VCConnectionManagerLegacy updateOneToOneBitrateCapsForConnection:]
  -[VCConnectionManagerLegacy updateAllBitrateCapsForConnection:]
  -[VCConnectionManagerLegacy updateNegotiatedSettingsOnetoOne:]
  -[VCConnectionManagerLegacy pendingPrimaryConnection]
  -[VCConnectionManagerLegacy setPendingPrimaryConnection:]
  -[VCConnectionManagerLegacy pendingSecondaryConnection]
  -[VCConnectionManagerLegacy setPendingSecondaryConnection:]
  -[VCConnectionManagerLegacy relayConnectionID]
  -[VCConnectionManagerLegacy setRelayConnectionID:]


VCRateControlAlgorithmLowLatencyNOWRD : VCRateControlAlgorithmBase
  // instance methods
  -[VCRateControlAlgorithmLowLatencyNOWRD init]
  -[VCRateControlAlgorithmLowLatencyNOWRD doRateControlWithStatistics:]
  -[VCRateControlAlgorithmLowLatencyNOWRD doRateControlWithNWConnectionStatistics:]
  -[VCRateControlAlgorithmLowLatencyNOWRD rampUpTier]
  -[VCRateControlAlgorithmLowLatencyNOWRD rampDownTier]
  -[VCRateControlAlgorithmLowLatencyNOWRD shouldRampDown]
  -[VCRateControlAlgorithmLowLatencyNOWRD shouldRampUp]
  -[VCRateControlAlgorithmLowLatencyNOWRD configure:restartRequired:]
  -[VCRateControlAlgorithmLowLatencyNOWRD doRateControlWithVCRCStatistics:]
  -[VCRateControlAlgorithmLowLatencyNOWRD checkCongestionStatus]
  -[VCRateControlAlgorithmLowLatencyNOWRD resetRampingStatus]
  -[VCRateControlAlgorithmLowLatencyNOWRD printRateControlInfoToLogDump]
  -[VCRateControlAlgorithmLowLatencyNOWRD updateSendBitrateAndCheckIdlePeriod:instantBitrate:]
  -[VCRateControlAlgorithmLowLatencyNOWRD updateInternalStatus]
  -[VCRateControlAlgorithmLowLatencyNOWRD setRateChangeCounter]
  -[VCRateControlAlgorithmLowLatencyNOWRD shouldRampDownDueToNOWRD]
  -[VCRateControlAlgorithmLowLatencyNOWRD shouldRampDownDueToNOWRDAcc]
  -[VCRateControlAlgorithmLowLatencyNOWRD computeNWConnectionDelayThresholdForRampDown:]
  -[VCRateControlAlgorithmLowLatencyNOWRD shouldRampUpDueToNWConnection]
  -[VCRateControlAlgorithmLowLatencyNOWRD shouldRampDownDueToNWConnection]
  -[VCRateControlAlgorithmLowLatencyNOWRD rampDownTierDueToNWConnection]
  -[VCRateControlAlgorithmLowLatencyNOWRD checkRampUpSettlingStatus]


VCImageConverterBase : NSObject
  // instance methods
  -[VCImageConverterBase dealloc]
  -[VCImageConverterBase initWithFormatType:]
  -[VCImageConverterBase setUpBufferPoolForOutputWidth:outputHeight:]
  -[VCImageConverterBase ensureBufferPoolSupportsOutputWidth:outputHeight:]


VCAudioCaptionsCoordinator : NSObject <VCAudioCaptionsDelegate, VCCaptionsSource>
 @property  long long currentlyCaptionedStreamToken
 @property  long long state
 @property  {os_unfair_lock_s=I} stateLock
 @property  BOOL captionsSupported
 @property  BOOL captionsEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioCaptionsCoordinator state]
  -[VCAudioCaptionsCoordinator dealloc]
  -[VCAudioCaptionsCoordinator setStateLock:]
  -[VCAudioCaptionsCoordinator stateLock]
  -[VCAudioCaptionsCoordinator setState:]
  -[VCAudioCaptionsCoordinator setOneToOneModeEnabled:]
  -[VCAudioCaptionsCoordinator captionsEnabled]
  -[VCAudioCaptionsCoordinator enableCaptions:]
  -[VCAudioCaptionsCoordinator didUpdateCaptions:]
  -[VCAudioCaptionsCoordinator didEnableCaptions:error:]
  -[VCAudioCaptionsCoordinator didDisableCaptions:error:]
  -[VCAudioCaptionsCoordinator didStartCaptioningWithReason:]
  -[VCAudioCaptionsCoordinator didStopCaptioningWithReason:]
  -[VCAudioCaptionsCoordinator registerCaptionsEventDelegate:]
  -[VCAudioCaptionsCoordinator setCaptionsLocale:]
  -[VCAudioCaptionsCoordinator captionsSupported]
  -[VCAudioCaptionsCoordinator captionsDelegate]
  -[VCAudioCaptionsCoordinator initWithOneToOneEnabled:reportingAgent:]
  -[VCAudioCaptionsCoordinator registerStreamToken:withFormat:]
  -[VCAudioCaptionsCoordinator currentlyCaptionedStreamToken]
  -[VCAudioCaptionsCoordinator setCurrentlyCaptionedStreamToken:]


AVCVideoFrame : NSObject
 @property  ^{__CVBuffer=} pixelBuffer
 @property  ^{__CVBuffer=} depthPixelBuffer
 @property  NSData *imageData
 @property  {?=qiIq} time
 @property  NSData *effectsMetadata
 @property  float renderProcessTime

  // instance methods
  -[AVCVideoFrame time]
  -[AVCVideoFrame delegate]
  -[AVCVideoFrame pixelBuffer]
  -[AVCVideoFrame dealloc]
  -[AVCVideoFrame setTime:]
  -[AVCVideoFrame imageData]
  -[AVCVideoFrame setImageData:]
  -[AVCVideoFrame effectsMetadata]
  -[AVCVideoFrame setEffectsMetadata:]
  -[AVCVideoFrame setPixelBuffer:]
  -[AVCVideoFrame depthPixelBuffer]
  -[AVCVideoFrame initWithPixelBuffer:time:imageData:]
  -[AVCVideoFrame initWithPixelBuffer:depthPixelBuffer:time:imageData:delegate:]
  -[AVCVideoFrame setDepthPixelBuffer:]
  -[AVCVideoFrame renderProcessTime]
  -[AVCVideoFrame setRenderProcessTime:]


VCConnectionSelector : NSObject
 @property  <VCConnectionProtocol> *primaryConnection
 @property  <VCConnectionProtocol> *secondaryConnection
 @property  <VCConnectionProtocol> *lastPrimaryConnectionInUse
 @property  <VCConnectionProtocol> *connectionForDuplication
 @property  <VCConnectionProtocol> *connectionForDuplicationNonProbingVersion
 @property  NSArray *linkPreferenceOrder
 @property  {?=@@} serverLinks

  // instance methods
  -[VCConnectionSelector secondaryConnection]
  -[VCConnectionSelector dealloc]
  -[VCConnectionSelector initWithMultiwayEnabled:]
  -[VCConnectionSelector updatePrimaryWithConnection:]
  -[VCConnectionSelector updateSecondaryWithConnection:]
  -[VCConnectionSelector updateConnectionForDuplicationForDuplicationReason:duplicationEnhancementEnabled:preferredLocalInterfaceForDuplication:preferredRemoteInterfaceForDuplication:connectionArray:]
  -[VCConnectionSelector selectPrimaryAndSecondaryWithConnection:isEndToEnd:]
  -[VCConnectionSelector useConnectionAsPrimary:]
  -[VCConnectionSelector getConnectionSelectionPolicy]
  -[VCConnectionSelector updateConnectionSelectionPolicyWithPreferRelayOverP2P:preferNonVPN:preferE2E:]
  -[VCConnectionSelector updateSelectedConnectionsForGroupType:connectionAdded:]
  -[VCConnectionSelector updateSelectedConnectionsForGroupType:connectionRemoved:connectionArray:]
  -[VCConnectionSelector selectConnectionForGroupType:fromConnectionArray:asPrimary:]
  -[VCConnectionSelector isPrimaryConnectionSameAsConnection:]
  -[VCConnectionSelector primaryConnection]
  -[VCConnectionSelector setPrimaryConnection:]
  -[VCConnectionSelector setSecondaryConnection:]
  -[VCConnectionSelector connectionForDuplication]
  -[VCConnectionSelector setConnectionForDuplication:]
  -[VCConnectionSelector connectionForDuplicationNonProbingVersion]
  -[VCConnectionSelector setConnectionForDuplicationNonProbingVersion:]
  -[VCConnectionSelector lastPrimaryConnectionInUse]
  -[VCConnectionSelector setLastPrimaryConnectionInUse:]
  -[VCConnectionSelector linkPreferenceOrder]
  -[VCConnectionSelector setLinkPreferenceOrder:]
  -[VCConnectionSelector serverLinks]


VCControlChannelDialog : VCObject
 @property  NSDictionary *transactions

  // instance methods
  -[VCControlChannelDialog transactions]
  -[VCControlChannelDialog dealloc]
  -[VCControlChannelDialog initWithSessionID:participantID:participantUUID:participantConfig:transactionDelegate:]
  -[VCControlChannelDialog resetHandshake]
  -[VCControlChannelDialog flushActiveTransactions]
  -[VCControlChannelDialog removeTransactionForTransactionID:]
  -[VCControlChannelDialog processMessageData:participantID:topic:transactionID:messageStatus:isInternalMessage:]
  -[VCControlChannelDialog doHandshakeWithMessage:topic:afterDelay:]
  -[VCControlChannelDialog checkForSignificantHandshakeDelayWithDelegate:]
  -[VCControlChannelDialog sendAllCachedMessagesAndDisableHandshakeWhenDone]
  -[VCControlChannelDialog startHandshakeWithMessage:topic:]
  -[VCControlChannelDialog cacheOutgoingMessage:topic:timeout:]
  -[VCControlChannelDialog sendReliableMessage:withTopic:timeout:]
  -[VCControlChannelDialog sendReliableMessageInternal:withTopic:timeout:useFastRetries:]
  -[VCControlChannelDialog sendUnreliableMessage:withTopic:sessionID:participantID:transactionDelegate:]
  -[VCControlChannelDialog newDataFromMessage:topic:transactionID:isReliable:transactionDelegate:]
  -[VCControlChannelDialog confirmTransaction:]


VCSessionManager : NSObject <VCSessionDelegate>
 @property  NSMutableDictionary *sessions
 @property  BOOL sharingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCSessionManager sharedInstance]
  +[VCSessionManager addNSError:toXPCArgumentDictionary:]

  // instance methods
  -[VCSessionManager registerBlocksForService]
  -[VCSessionManager dealloc]
  -[VCSessionManager deregisterBlocksForService]
  -[VCSessionManager sharingEnabled]
  -[VCSessionManager releaseSession:]
  -[VCSessionManager sessions]
  -[VCSessionManager init]
  -[VCSessionManager setSharingEnabled:]
  -[VCSessionManager vcSession:uplinkRateAdaptationDidChangeWithInfo:]
  -[VCSessionManager vcSession:downlinkRateAdaptationDidChangeWithInfo:]
  -[VCSessionManager vcSession:didStart:error:]
  -[VCSessionManager vcSession:didStopWithError:]
  -[VCSessionManager vcSession:addParticipantWithID:didSucceed:error:]
  -[VCSessionManager vcSession:removeParticipantWithID:didSucceed:error:]
  -[VCSessionManager vcSession:updateConfiguration:didSucceed:error:]
  -[VCSessionManager vcSession:oneToOneModeEnabled:didSucceed:error:]
  -[VCSessionManager vcSession:participantID:audioEnabled:didSucceed:error:]
  -[VCSessionManager vcSession:participantID:videoEnabled:didSucceed:error:]
  -[VCSessionManager vcSession:participantID:screenEnabled:didSucceed:error:]
  -[VCSessionManager vcSession:participantID:mediaStateDidChange:forMediaType:didSucceed:error:]
  -[VCSessionManager vcSession:participantID:remoteMediaStateDidChange:forMediaType:]
  -[VCSessionManager vcSession:participantID:remoteAudioEnabledDidChange:]
  -[VCSessionManager vcSession:participantID:remoteVideoEnabledDidChange:]
  -[VCSessionManager vcSession:participantID:remoteScreenEnabledDidChange:]
  -[VCSessionManager vcSession:participantID:audioPaused:didSucceed:error:]
  -[VCSessionManager vcSession:participantID:videoPaused:didSucceed:error:]
  -[VCSessionManager vcSession:participantID:remoteAudioPausedDidChange:]
  -[VCSessionManager vcSession:participantID:remoteVideoPausedDidChange:]
  -[VCSessionManager vcSession:participantID:didChangeMediaPriority:description:]
  -[VCSessionManager vcSession:participantID:didDetectError:]
  -[VCSessionManager vcSessionShouldReconnect:]
  -[VCSessionManager sessionForUUID:]
  -[VCSessionManager sessionForStreamToken:]
  -[VCSessionManager participantConfigFromXPCDictionary:]


VCSessionUplinkBandwidthAllocator : VCObject
 @property  BOOL redundancyEnabled
 @property  NSDictionary *bitrateToStreamTable
 @property  BOOL redundancyEnabledFor720Stream

  // instance methods
  -[VCSessionUplinkBandwidthAllocator dealloc]
  -[VCSessionUplinkBandwidthAllocator init]
  -[VCSessionUplinkBandwidthAllocator addBandwidthAllocationTableEntry:updateNow:]
  -[VCSessionUplinkBandwidthAllocator streamToken:enabled:]
  -[VCSessionUplinkBandwidthAllocator isEnabledStreamToken:]
  -[VCSessionUplinkBandwidthAllocator setRedundancyEnabled:]
  -[VCSessionUplinkBandwidthAllocator isRedundancyEnabled]
  -[VCSessionUplinkBandwidthAllocator setRedundancyEnabledFor720Stream:]
  -[VCSessionUplinkBandwidthAllocator isRedundancyEnabledFor720Stream]
  -[VCSessionUplinkBandwidthAllocator peerSubscription:streamID:]
  -[VCSessionUplinkBandwidthAllocator tableEntriesForStreamToken:targetBitrate:remainingBitrate:isLastEntryForStreamToken:]
  -[VCSessionUplinkBandwidthAllocator mediaBitratesForStreamToken:targetNetworkBitrate:]
  -[VCSessionUplinkBandwidthAllocator streamIDsForStreamToken:]
  -[VCSessionUplinkBandwidthAllocator repairStreamIDsForStreamToken:]
  -[VCSessionUplinkBandwidthAllocator streamIDsForStreamToken:targetBitrate:]
  -[VCSessionUplinkBandwidthAllocator streamIDsForStreamToken:targetBitrateCap:]
  -[VCSessionUplinkBandwidthAllocator _recomputeCurrentTable]
  -[VCSessionUplinkBandwidthAllocator getBitrateToStreamTable]


VCSessionMediaNegotiator : NSObject <VCMediaNegotiatorProtocol>
 @property  VCMediaNegotiatorLocalConfiguration *localSettings
 @property  VCMediaNegotiatorResults *negotiatedSettings
 @property  VCMediaNegotiatorResultsAudio *negotiatedAudioSettings
 @property  VCMediaNegotiatorResultsVideo *negotiatedVideoSettings
 @property  VCMediaNegotiatorResultsVideo *negotiatedScreenSettings
 @property  VCMediaNegotiatorResultsMoments *negotiatedMomentsSettings
 @property  VCMediaNegotiatorResultsFaceTimeSettings *negotiatedFaceTimeSettings
 @property  NSArray *negotiatedStreamGroups
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCSessionMediaNegotiator initializeLocalConfiguration:negotiationData:deviceRole:preferredAudioPayload:]
  +[VCSessionMediaNegotiator streamGroupIDsWithMediaBlob:]
  +[VCSessionMediaNegotiator mediaBlobForVersion:negotiationData:]
  +[VCSessionMediaNegotiator negotiationDataWithVersion:mediaBlob:]
  +[VCSessionMediaNegotiator negotiationDataWithVersion1:version2:]
  +[VCSessionMediaNegotiator serializeNegotiationData:]
  +[VCSessionMediaNegotiator unserializeNegotiationData:]

  // instance methods
  -[VCSessionMediaNegotiator dealloc]
  -[VCSessionMediaNegotiator localSettings]
  -[VCSessionMediaNegotiator negotiationData]
  -[VCSessionMediaNegotiator processRemoteNegotiationData:]
  -[VCSessionMediaNegotiator remoteMaxBandwidthForOperatingMode:connectionType:]
  -[VCSessionMediaNegotiator negotiatedSettings]
  -[VCSessionMediaNegotiator negotiatedAudioSettings]
  -[VCSessionMediaNegotiator negotiatedVideoSettings]
  -[VCSessionMediaNegotiator negotiatedScreenSettings]
  -[VCSessionMediaNegotiator negotiatedMomentsSettings]
  -[VCSessionMediaNegotiator negotiatedFaceTimeSettings]
  -[VCSessionMediaNegotiator negotiatedStreamGroups]
  -[VCSessionMediaNegotiator initWithLocalConfiguration:]


VCDatagramChannelIDSEmulated : VCDatagramChannelIDS
  // instance methods
  -[VCDatagramChannelIDSEmulated destination]
  -[VCDatagramChannelIDSEmulated token]
  -[VCDatagramChannelIDSEmulated dealloc]
  -[VCDatagramChannelIDSEmulated setEventHandler:]
  -[VCDatagramChannelIDSEmulated invalidate]
  -[VCDatagramChannelIDSEmulated start]
  -[VCDatagramChannelIDSEmulated setReadHandler:]
  -[VCDatagramChannelIDSEmulated connectedLinks]
  -[VCDatagramChannelIDSEmulated defaultLink]
  -[VCDatagramChannelIDSEmulated writeDatagrams:datagramsSize:datagramsInfo:datagramsCount:options:completionHandler:]
  -[VCDatagramChannelIDSEmulated writeDatagram:datagramSize:datagramInfo:options:completionHandler:]
  -[VCDatagramChannelIDSEmulated readyToRead]
  -[VCDatagramChannelIDSEmulated setChannelPreferences:]
  -[VCDatagramChannelIDSEmulated setWiFiAssist:]
  -[VCDatagramChannelIDSEmulated requestSessionInfoWithOptions:]
  -[VCDatagramChannelIDSEmulated osChannelInfoLog]
  -[VCDatagramChannelIDSEmulated optInStreamIDs:]
  -[VCDatagramChannelIDSEmulated optOutStreamIDs:]
  -[VCDatagramChannelIDSEmulated dataPath]
  -[VCDatagramChannelIDSEmulated initWithIDSDatagramChannel:mode:]
  -[VCDatagramChannelIDSEmulated writeToEmulatedNetworkWithDatagram:datagramSize:datagramInfo:options:]
  -[VCDatagramChannelIDSEmulated setupEmulatedNetwork]


VCMediaControlInfoGenerator : NSObject <VCMediaControlInfoDelegate>
 @property  unsigned int type
 @property  unsigned char version
 @property  unsigned char fecFeedbackVersion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCMediaControlInfoGenerator type]
  -[VCMediaControlInfoGenerator dealloc]
  -[VCMediaControlInfoGenerator version]
  -[VCMediaControlInfoGenerator disposeControlInfo:]
  -[VCMediaControlInfoGenerator initWithType:version:]
  -[VCMediaControlInfoGenerator registerFillBlobCallback:processBlobCallback:context:]
  -[VCMediaControlInfoGenerator deregisterCallbacksWithContext:]
  -[VCMediaControlInfoGenerator passMediaControlInfo:isFillBlobCallback:]
  -[VCMediaControlInfoGenerator newMediaControlInfo]
  -[VCMediaControlInfoGenerator newMediaControlInfoWithBuffer:length:optionalControlInfo:]
  -[VCMediaControlInfoGenerator addMediaControlInfoOption:]
  -[VCMediaControlInfoGenerator feedbackSize]
  -[VCMediaControlInfoGenerator newControlInfoFromPool]
  -[VCMediaControlInfoGenerator newControlInfo]
  -[VCMediaControlInfoGenerator newControlInfoWithBuffer:length:optionalControlInfo:]
  -[VCMediaControlInfoGenerator fecFeedbackVersion]
  -[VCMediaControlInfoGenerator setFecFeedbackVersion:]


VCAudioPowerSpectrumMeter : VCObject <VCAudioPowerSpectrumProtocol>
 @property  ^v realtimeContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioPowerSpectrumMeter dealloc]
  -[VCAudioPowerSpectrumMeter realtimeContext]
  -[VCAudioPowerSpectrumMeter initWithBinCount:refreshRate:delegate:]
  -[VCAudioPowerSpectrumMeter registerNewAudioPowerSpectrumForStreamToken:powerSpectrumKey:spectrumSource:]
  -[VCAudioPowerSpectrumMeter releaseAudioPowerSpectrumForStreamToken:]
  -[VCAudioPowerSpectrumMeter unregisterAllStreams]


VCMediaStreamReceiveGroup : VCMediaStreamGroup <VCMediaStreamDelegate>
 @property  NSNumber *optedInStreamID
 @property  NSNumber *activeStreamID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCMediaStreamReceiveGroup initWithConfig:]
  -[VCMediaStreamReceiveGroup dealloc]
  -[VCMediaStreamReceiveGroup setActiveStreamIDs:]
  -[VCMediaStreamReceiveGroup vcMediaStreamDidRTPTimeOut:]
  -[VCMediaStreamReceiveGroup vcMediaStreamDidRTCPTimeOut:]
  -[VCMediaStreamReceiveGroup vcMediaStreamDidDecryptionTimeOut:]
  -[VCMediaStreamReceiveGroup vcMediaStreamDidDecryptionTimeOutForMKMRecovery:]
  -[VCMediaStreamReceiveGroup setActiveStreamID:]
  -[VCMediaStreamReceiveGroup setActualBitrateForOptedInStreamWithActiveStreamID:]
  -[VCMediaStreamReceiveGroup setupMaxBitrateMap]
  -[VCMediaStreamReceiveGroup notifyChangeInActiveMediaBitrateTo:from:]
  -[VCMediaStreamReceiveGroup optedInStreamID]
  -[VCMediaStreamReceiveGroup activeStreamID]


VCQoSReportSource : NSObject
 @property  long long sourceToken

  // instance methods
  -[VCQoSReportSource sourceToken]
  -[VCQoSReportSource setSourceToken:]


VCQoSMonitorManager : VCObject
 @property  NSMutableArray *moitors

  // class methods
  +[VCQoSMonitorManager sharedInstance]

  // instance methods
  -[VCQoSMonitorManager registerBlocksForService]
  -[VCQoSMonitorManager dealloc]
  -[VCQoSMonitorManager deregisterBlocksForService]
  -[VCQoSMonitorManager init]
  -[VCQoSMonitorManager registerQoSReportingSourceForToken:]
  -[VCQoSMonitorManager unregisterQoSReportingSourceForToken:]
  -[VCQoSMonitorManager updateQoSReport:toClientsWithToken:]
  -[VCQoSMonitorManager doesQoSSourceExistForStreamToken:]
  -[VCQoSMonitorManager moitors]


VCMomentsClientContext : NSObject
 @property  long long streamToken

  // instance methods
  -[VCMomentsClientContext streamToken]
  -[VCMomentsClientContext initWithStreamToken:]


VCMomentsManagerStreamTokenClientList : NSObject
 @property  <VCMomentsMessenger> *messenger
 @property  NSArray *clientContextList

  // class methods
  +[VCMomentsManagerStreamTokenClientList isValidContext:]
  +[VCMomentsManagerStreamTokenClientList streamTokenFromClientContext:]

  // instance methods
  -[VCMomentsManagerStreamTokenClientList dealloc]
  -[VCMomentsManagerStreamTokenClientList messenger]
  -[VCMomentsManagerStreamTokenClientList newContext]
  -[VCMomentsManagerStreamTokenClientList removeContext:]
  -[VCMomentsManagerStreamTokenClientList clientContextList]
  -[VCMomentsManagerStreamTokenClientList initWithStreamToken:messenger:]


VCMomentsManager : NSObject <VCMomentsMessengerDelegate>
 @property  <VCMomentsMessengerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCMomentsManager sharedInstance]

  // instance methods
  -[VCMomentsManager setDelegate:]
  -[VCMomentsManager registerBlocksForService]
  -[VCMomentsManager delegate]
  -[VCMomentsManager dealloc]
  -[VCMomentsManager init]
  -[VCMomentsManager notifyClientsWithStreamToken:service:arguments:]
  -[VCMomentsManager streamToken:didStartProcessingRequest:error:]
  -[VCMomentsManager streamToken:didEndProcessingRequest:stillImageURL:movieURL:error:]
  -[VCMomentsManager streamToken:didFinishRequest:didSucceed:]
  -[VCMomentsManager streamTokenDidCleanupAllRequests:]
  -[VCMomentsManager registerMomentsMessenger:withStreamToken:]
  -[VCMomentsManager unregisterMomentsMessengerWithStreamToken:]
  -[VCMomentsManager messengerFromClientContext:]
  -[VCMomentsManager saveImage:movie:]
  -[VCMomentsManager newRequestWithArguments:state:]


VCAudioSessionClient : NSObject <NSCopying>
 @property  unsigned char clientType
 @property  <VCAudioSessionDelegate> *notificationClient
 @property  VCAudioSessionMediaProperties *mediaProperties

  // instance methods
  -[VCAudioSessionClient clientType]
  -[VCAudioSessionClient dealloc]
  -[VCAudioSessionClient notificationClient]
  -[VCAudioSessionClient copyWithZone:]
  -[VCAudioSessionClient setClientType:]
  -[VCAudioSessionClient mediaProperties]
  -[VCAudioSessionClient setMediaProperties:]
  -[VCAudioSessionClient setNotificationClient:]


VCAudioSession : NSObject <VCServerDelegate>
 @property  NSDictionary *audioSessionProperties
 @property  int clientPid
 @property  unsigned int audioSessionId
 @property  BOOL hasStarted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioSession sharedVoiceChatInstance]
  +[VCAudioSession sharedSystemAudioInstance]
  +[VCAudioSession stringFromFormat:]
  +[VCAudioSession convertAudioSessionProperties:operatingMode:deviceRole:enableAudioPreWarming:]

  // instance methods
  -[VCAudioSession initWithMode:]
  -[VCAudioSession invalidateCache]
  -[VCAudioSession dealloc]
  -[VCAudioSession stopSession]
  -[VCAudioSession clientPid]
  -[VCAudioSession hasStarted]
  -[VCAudioSession startInternal]
  -[VCAudioSession setSampleRate:]
  -[VCAudioSession audioSessionId]
  -[VCAudioSession setAudioSessionProperties:]
  -[VCAudioSession didStop]
  -[VCAudioSession stopClient:]
  -[VCAudioSession didServerDie]
  -[VCAudioSession resetOverrideRoute]
  -[VCAudioSession isAnswerOnHoldUpdateParameters:]
  -[VCAudioSession audioSessionProperties]
  -[VCAudioSession dispatchedSetAudioSessionProperties:]
  -[VCAudioSession setSpeakerProperty:]
  -[VCAudioSession applyDynamicSessionProperties]
  -[VCAudioSession refreshAudioSessionProperties]
  -[VCAudioSession updateAudioSessionPropertiesWithProperties:]
  -[VCAudioSession didRequestBoolPropertyChange:]
  -[VCAudioSession didRequestedPropertyChange:propertyClass:compareSelector:]
  -[VCAudioSession didRequestStringPropertyChange:]
  -[VCAudioSession didRequestArrayPropertyChange:]
  -[VCAudioSession didRequestDataPropertyChange:]
  -[VCAudioSession didRequestDictionaryPropertyChange:]
  -[VCAudioSession applyRequestedProperty:defaultValue:]
  -[VCAudioSession applyAudioSessionPropertiesWithVPOperatingMode:]
  -[VCAudioSession upgradeAudioSessionProperties]
  -[VCAudioSession setupSharePlayWithVPOperatingMode:]
  -[VCAudioSession forceBufferFrames:]
  -[VCAudioSession setBlockSizeOnSampleRateChange]
  -[VCAudioSession setBlockSize:sampleRate:force:]
  -[VCAudioSession setUpVPBlockFormatWithProperties:]
  -[VCAudioSession setVPBlockConfigurationProperties:]
  -[VCAudioSession applyAudioSessionMediaProperties:]
  -[VCAudioSession startSessionWithMediaProperties:sessionRef:]
  -[VCAudioSession startClient:clientType:mediaProperties:sessionRef:]
  -[VCAudioSession shouldResetAudioSession]
  -[VCAudioSession resetClient:mediaSetting:interruptSuccessful:]
  -[VCAudioSession resumeActiveClient]
  -[VCAudioSession selectNewActiveClient]
  -[VCAudioSession didAvailableSampleRateChange]
  -[VCAudioSession didPause]
  -[VCAudioSession didResume]
  -[VCAudioSession didInterruptionEnded]
  -[VCAudioSession applyAudioModeWithDefaultValue:]
  -[VCAudioSession handleAudioSessionInterruption:]
  -[VCAudioSession setAudioSessionMode:]
  -[VCAudioSession setupInputBeamforming]
  -[VCAudioSession cleanupMicSources]
  -[VCAudioSession internalSelectMicrophoneWithType:]
  -[VCAudioSession selectMicrophoneWithType:]
  -[VCAudioSession setClientPid:]


VCMomentsCollector : NSObject <VCMomentsCollectorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCMomentsCollector dealloc]
  -[VCMomentsCollector cleanupActiveRequests]
  -[VCMomentsCollector initWithStreamToken:]
  -[VCMomentsCollector stream:addVideoSampleBuffer:cameraStatusBits:timestamp:]
  -[VCMomentsCollector stream:addAudioSampleBuffer:timestamp:]


VCWRMHandler : NSObject
 @property  int localWRMLinkTypeSuggestion
 @property  int remoteWRMLinkTypeSuggestion
 @property  BOOL isRemoteDuplicating
 @property  double localLinkTypeSuggestionChangeTime

  // instance methods
  -[VCWRMHandler init]
  -[VCWRMHandler shouldForceWRMRecommendationUsingUserDefaults]
  -[VCWRMHandler shouldRequestWRMNotificationWithDuplicationReason:isDuplicationEnabled:isLocalUsingCellular:atTime:]
  -[VCWRMHandler updateWRMNotificationRequestTime:]
  -[VCWRMHandler processLocalWRMNotification:isAudioOnly:]
  -[VCWRMHandler processRemoteWRMSuggestion:isRemoteDuplicating:]
  -[VCWRMHandler localWRMLinkTypeSuggestion]
  -[VCWRMHandler remoteWRMLinkTypeSuggestion]
  -[VCWRMHandler isRemoteDuplicating]
  -[VCWRMHandler localLinkTypeSuggestionChangeTime]
  -[VCWRMHandler setLocalLinkTypeSuggestionChangeTime:]


AVCScreenCaptureConfiguration : NSObject
 @property  unsigned int height
 @property  unsigned int width
 @property  unsigned int frameRate
 @property  BOOL isWindowed
 @property  unsigned int screenCaptureDisplayID
 @property  unsigned int selectiveSharingPort
 @property  NSString *selectiveScreenUUID

  // instance methods
  -[AVCScreenCaptureConfiguration width]
  -[AVCScreenCaptureConfiguration height]
  -[AVCScreenCaptureConfiguration dealloc]
  -[AVCScreenCaptureConfiguration setWidth:]
  -[AVCScreenCaptureConfiguration frameRate]
  -[AVCScreenCaptureConfiguration setHeight:]
  -[AVCScreenCaptureConfiguration setFrameRate:]
  -[AVCScreenCaptureConfiguration isWindowed]
  -[AVCScreenCaptureConfiguration initWithHeight:width:framerate:screenCaptureDisplayID:]
  -[AVCScreenCaptureConfiguration setIsWindowed:]
  -[AVCScreenCaptureConfiguration screenCaptureDisplayID]
  -[AVCScreenCaptureConfiguration setScreenCaptureDisplayID:]
  -[AVCScreenCaptureConfiguration selectiveSharingPort]
  -[AVCScreenCaptureConfiguration setSelectiveSharingPort:]
  -[AVCScreenCaptureConfiguration selectiveScreenUUID]
  -[AVCScreenCaptureConfiguration setSelectiveScreenUUID:]


VCAudioPowerLevelMonitor : NSObject
 @property  NSObject<VCAudioPowerLevelMonitorDelegate> *delegate

  // instance methods
  -[VCAudioPowerLevelMonitor setDelegate:]
  -[VCAudioPowerLevelMonitor delegate]
  -[VCAudioPowerLevelMonitor init]
  -[VCAudioPowerLevelMonitor detectRemoteAveragePowerLevel:timestamp:]


VCVideoStreamReceiver : VCVideoReceiverBase <VCMediaStreamSyncDestination>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoStreamReceiver initWithConfig:]
  -[VCVideoStreamReceiver dealloc]
  -[VCVideoStreamReceiver pauseVideo]
  -[VCVideoStreamReceiver syncSource]
  -[VCVideoStreamReceiver gatherRealtimeStats:]
  -[VCVideoStreamReceiver startVideo]
  -[VCVideoStreamReceiver stopVideo]
  -[VCVideoStreamReceiver reportingVideoStreamEvent:]
  -[VCVideoStreamReceiver handleActiveConnectionChange:]
  -[VCVideoStreamReceiver startSynchronization:]
  -[VCVideoStreamReceiver stopSynchronization]
  -[VCVideoStreamReceiver setEnableCVO:cvoExtensionID:]
  -[VCVideoStreamReceiver setEnableRateAdaptation:maxBitrate:minBitrate:adaptationInterval:]
  -[VCVideoStreamReceiver setSyncSource:]
  -[VCVideoStreamReceiver updateSourcePlayoutTimestamp:]
  -[VCVideoStreamReceiver startNetworkReceiveThread]
  -[VCVideoStreamReceiver stopNetworkReceiveThread]
  -[VCVideoStreamReceiver networkReceivePackets]
  -[VCVideoStreamReceiver updateSequenceNumber:]
  -[VCVideoStreamReceiver scheduleDecodeForTimestamp:]
  -[VCVideoStreamReceiver scheduleVideoDecode:]
  -[VCVideoStreamReceiver newVideoPacketBufferConfig:]
  -[VCVideoStreamReceiver processVideoRTP]
  -[VCVideoStreamReceiver rtcpSendIntervalElapsed]
  -[VCVideoStreamReceiver processReceptionReportBlock:blockCount:arrivalNTPTime:]
  -[VCVideoStreamReceiver processVideoRTCP]
  -[VCVideoStreamReceiver scheduleDecodeForFrameWithBuffer:timestamp:hostTime:showFrame:]
  -[VCVideoStreamReceiver updateVideoStallStatus:]
  -[VCVideoStreamReceiver createDecodeSession:]
  -[VCVideoStreamReceiver teardownDecodeSession:]
  -[VCVideoStreamReceiver decodeFrame:showFrame:]
  -[VCVideoStreamReceiver canDequeue:forTimestamp:]
  -[VCVideoStreamReceiver dequeueAndDecodeForTimestamp:]
  -[VCVideoStreamReceiver handleAlarmForTimeStamp:]
  -[VCVideoStreamReceiver handleRemoteVideoAttributesChange:]
  -[VCVideoStreamReceiver showDecodedFrame:atTime:]


VCSessionParticipantRemote : VCSessionParticipant <VCSessionDownlinkBandwidthAllocatorClient>
 @property  VCSessionParticipantMediaStreamInfo *audioStreamInfo
 @property  VCSessionParticipantMediaStreamInfo *videoStreamInfo
 @property  VCSessionParticipantMediaStreamInfo *screenStreamInfo
 @property  NSNumber *optedInAudioStreamID
 @property  NSNumber *optedInVideoStreamID
 @property  BOOL remoteVideoEnabled
 @property  BOOL remoteAudioEnabled
 @property  BOOL remoteScreenEnabled
 @property  BOOL remoteVideoPaused
 @property  BOOL remoteAudioPaused
 @property  BOOL isVideoExpected
 @property  unsigned char videoQuality
 @property  unsigned int visibilityIndex
 @property  unsigned int prominenceIndex
 @property  unsigned int lastDisplayedFrameRTPTimestamp
 @property  {_VCSessionParticipantCapabilities=BBiB} capabilities
 @property  VCPositionalInfo *positionalInfo
 @property  NSDictionary *participantSpatialAudioSourceIDs
 @property  BOOL isServerRTxEnabled
 @property  NSString *uuid
 @property  NSArray *mediaEntries
 @property  BOOL isVisible

  // class methods
  +[VCSessionParticipantRemote isDeviceLargeScreen]
  +[VCSessionParticipantRemote maxAudioNetworkBitrateForLocalInterfaceOnWiFi:isLowLatencyAudio:]
  +[VCSessionParticipantRemote maxCameraNetworkBitrateForVideoQuality:isLocalOnWiFi:isRedundancyRequested:]
  +[VCSessionParticipantRemote maxFtxtNetworkBitrateForVideoQuality:isLocalOnWiFi:isRedundancyRequested:]
  +[VCSessionParticipantRemote maxNetworkBitrateForStreamGroupID:videoQuality:isLocalOnWiFi:isRedundancyRequested:]

  // instance methods
  -[VCSessionParticipantRemote setVideoQuality:]
  -[VCSessionParticipantRemote videoQuality]
  -[VCSessionParticipantRemote isVisible]
  -[VCSessionParticipantRemote dealloc]
  -[VCSessionParticipantRemote capabilities]
  -[VCSessionParticipantRemote stop]
  -[VCSessionParticipantRemote setMuted:]
  -[VCSessionParticipantRemote setCapabilities:]
  -[VCSessionParticipantRemote start]
  -[VCSessionParticipantRemote setSharingEnabled:]
  -[VCSessionParticipantRemote isRemoteAudioEnabled]
  -[VCSessionParticipantRemote isRemoteVideoEnabled]
  -[VCSessionParticipantRemote setAudioPaused:]
  -[VCSessionParticipantRemote setRemoteAudioEnabled:]
  -[VCSessionParticipantRemote setRemoteVideoEnabled:]
  -[VCSessionParticipantRemote setVideoPaused:]
  -[VCSessionParticipantRemote isInCanvas]
  -[VCSessionParticipantRemote setVideoDegraded:]
  -[VCSessionParticipantRemote completeAndReleaseNwActivity:withReason:]
  -[VCSessionParticipantRemote cleanupNwActivity]
  -[VCSessionParticipantRemote setActiveStreamIDs:]
  -[VCSessionParticipantRemote vcMediaStream:remoteMediaStalled:duration:]
  -[VCSessionParticipantRemote configureAudioIOWithDeviceRole:operatingMode:]
  -[VCSessionParticipantRemote getAudioDumpName]
  -[VCSessionParticipantRemote redundancyController:redundancyPercentageDidChange:]
  -[VCSessionParticipantRemote isRemoteAudioPaused]
  -[VCSessionParticipantRemote initWithConfig:delegate:]
  -[VCSessionParticipantRemote optedInStreamIDForStreamGroupID:]
  -[VCSessionParticipantRemote activeDownlinkStreamIDForStreamGroupID:]
  -[VCSessionParticipantRemote actualNetworkBitrateForStreamGroup:]
  -[VCSessionParticipantRemote optedInNetworkBitrateForStreamGroup:]
  -[VCSessionParticipantRemote setMediaSuspended:forStreamToken:]
  -[VCSessionParticipantRemote mediaEntries]
  -[VCSessionParticipantRemote visibilityIndex]
  -[VCSessionParticipantRemote prominenceIndex]
  -[VCSessionParticipantRemote isRemoteScreenEnabled]
  -[VCSessionParticipantRemote setRemoteScreenEnabled:]
  -[VCSessionParticipantRemote setupSpatialAudioWithMetadata:spatialMetadataEntryMap:]
  -[VCSessionParticipantRemote cleanupSpatialAudio]
  -[VCSessionParticipantRemote spatialMetadataEntryForMediaType:]
  -[VCSessionParticipantRemote storeSpatialAudioMetadataEntry:forMediaType:]
  -[VCSessionParticipantRemote participantSpatialAudioSourceIDs]
  -[VCSessionParticipantRemote stopAudioIOCompletion]
  -[VCSessionParticipantRemote onStartAudioIO]
  -[VCSessionParticipantRemote onDidResumeAudio]
  -[VCSessionParticipantRemote onPauseAudioStreams]
  -[VCSessionParticipantRemote dispatchedSetRemoteAudioPaused:]
  -[VCSessionParticipantRemote setRemoteAudioPaused:]
  -[VCSessionParticipantRemote dispatchedSetRemoteAudioEnabled:]
  -[VCSessionParticipantRemote dispatchedSetRemoteVideoEnabled:]
  -[VCSessionParticipantRemote dispatchedSetRemoteScreenEnabled:]
  -[VCSessionParticipantRemote dispatchedSetRemoteSystemAudioPaused:]
  -[VCSessionParticipantRemote setRemoteSystemAudioPaused:]
  -[VCSessionParticipantRemote setTransitionToEnabled:]
  -[VCSessionParticipantRemote setTransitionToPaused:]
  -[VCSessionParticipantRemote setTransitionToDisabled:]
  -[VCSessionParticipantRemote updateMediaState:forStreamGroup:]
  -[VCSessionParticipantRemote setRemoteMediaState:forMediaType:]
  -[VCSessionParticipantRemote remoteMediaStateForMediaType:]
  -[VCSessionParticipantRemote dispatchedSetRemoteVideoPaused:]
  -[VCSessionParticipantRemote setRemoteVideoPaused:]
  -[VCSessionParticipantRemote applyVideoEnabledSetting:]
  -[VCSessionParticipantRemote updateDownlinkBandwithAllocatorClientConfigurations:]
  -[VCSessionParticipantRemote setVisibilityIndex:]
  -[VCSessionParticipantRemote setProminenceIndex:]
  -[VCSessionParticipantRemote updatePositionalInfo:shouldReapply:]
  -[VCSessionParticipantRemote updateOneToOneAudioPositionalInfo:]
  -[VCSessionParticipantRemote processParticipantInfo]
  -[VCSessionParticipantRemote getMajorVersionNumber]
  -[VCSessionParticipantRemote supportsNegotiatedCoordinateSystem]
  -[VCSessionParticipantRemote supportsGFTSwitchToOneToOne]
  -[VCSessionParticipantRemote isParticipantPeace:]
  -[VCSessionParticipantRemote setupStreamRTP:]
  -[VCSessionParticipantRemote isActiveMediaType:]
  -[VCSessionParticipantRemote isStreamGroupActive:]
  -[VCSessionParticipantRemote setupAudioStreamConfiguration:withStreamGroupConfig:streamGroupStreamConfig:]
  -[VCSessionParticipantRemote checkSubstreams:forLowerQualityIndex:]
  -[VCSessionParticipantRemote setupBandwidthAllocationTableForMediaStreamConfigs:streamGroupID:entryType:]
  -[VCSessionParticipantRemote setupAudioStreamOneToOneConfigurations:]
  -[VCSessionParticipantRemote entryForStreamID:]
  -[VCSessionParticipantRemote optedInAudioStreamID]
  -[VCSessionParticipantRemote optedInVideoStreamID]
  -[VCSessionParticipantRemote appendOptedInStreamID:toOptInStreamsIDs:targetBandwidthEntry:forceSeamlessTransition:]
  -[VCSessionParticipantRemote recommendedStreamIDsForSelectedMediaEntries:forceSeamlessTransition:]
  -[VCSessionParticipantRemote negotiateAudioRules:]
  -[VCSessionParticipantRemote isAudioActive]
  -[VCSessionParticipantRemote updateAudioSpectrumState]
  -[VCSessionParticipantRemote isScreenActive]
  -[VCSessionParticipantRemote audioStreamInfo]
  -[VCSessionParticipantRemote videoStreamInfo]
  -[VCSessionParticipantRemote screenStreamInfo]
  -[VCSessionParticipantRemote participantScreenToken]
  -[VCSessionParticipantRemote screenGroup]
  -[VCSessionParticipantRemote videoGroup]
  -[VCSessionParticipantRemote audioGroup]
  -[VCSessionParticipantRemote participantMicrophoneToken]
  -[VCSessionParticipantRemote lastDisplayedFrameRTPTimestamp]
  -[VCSessionParticipantRemote configureWithOneToOneParticipantConfig:operatingMode:]
  -[VCSessionParticipantRemote setVideoReceiverFeedbackDelegate:]
  -[VCSessionParticipantRemote setVideoStreamDelegate:]
  -[VCSessionParticipantRemote actualNetworkBitrateWithAudioBitrates:]
  -[VCSessionParticipantRemote startAudioIO]
  -[VCSessionParticipantRemote stopAudioStreams]
  -[VCSessionParticipantRemote startScreenGroup]
  -[VCSessionParticipantRemote didReceiveFirstFrameForStreamGroup:]
  -[VCSessionParticipantRemote redundancyController:redundancyIntervalDidChange:]
  -[VCSessionParticipantRemote collectVideoChannelMetrics:]
  -[VCSessionParticipantRemote collectAudioChannelMetrics:]
  -[VCSessionParticipantRemote pushEventToNwActivity:started:]
  -[VCSessionParticipantRemote setRemoteMediaStalled:]
  -[VCSessionParticipantRemote appendStreamGroup:maxBitrate:mediaEntries:]
  -[VCSessionParticipantRemote cappedVideoQualityWithShouldLimitCameraQualityForPIP:]
  -[VCSessionParticipantRemote appendStreamGroupsMediaEntries:]
  -[VCSessionParticipantRemote validateMediaEntries:]
  -[VCSessionParticipantRemote isVideoExpected]
  -[VCSessionParticipantRemote updateScreenStreamConfigurationWithStreamGroupResult:multiwayConfig:screenStreamConfig:]
  -[VCSessionParticipantRemote setupScreenStreamOneToOneConfigurations:]
  -[VCSessionParticipantRemote setupVideoStreamOneToOneConfigurations:]
  -[VCSessionParticipantRemote updateVideoMultiwayConfig:withStreamGroupStreamConfig:]
  -[VCSessionParticipantRemote newMultiwayConfigWithStreamGroupStreamConfig:maxIDSStreamIDCount:groupID:]
  -[VCSessionParticipantRemote setupVideoStreamConfiguration:withStreamGroupStreamConfig:codecConfigs:multiwayConfig:groupID:]
  -[VCSessionParticipantRemote newMediaStreamConfigWithStreamGroupConfig:streamConfig:rateControlConfig:multiwayConfig:]
  -[VCSessionParticipantRemote setupStreamConfigWithCodecs:streamConfig:codecConfigs:featureStringsDict:]
  -[VCSessionParticipantRemote newMediaStreamConfigWithStreamConfig:streamGroupConfig:maxIDSStreamIDCount:]
  -[VCSessionParticipantRemote newMediaStreamInfoWithNegotiationConfig:streamToken:]
  -[VCSessionParticipantRemote setupMediaStreamGroupConfig:withNegotiationConfig:]
  -[VCSessionParticipantRemote spatialChannelIndex:spatialAudioSourceID:forMediaType:]
  -[VCSessionParticipantRemote setupSpatialInfoForStreamGroupConfig:]
  -[VCSessionParticipantRemote newStreamGroupConfigWithNegotiationConfig:]
  -[VCSessionParticipantRemote newMediaStreamWithNegotiationConfig:streamToken:]
  -[VCSessionParticipantRemote updateStreamGroupWithOneToOneStreamConfig:]
  -[VCSessionParticipantRemote setupStreamGroupWithConfig:]
  -[VCSessionParticipantRemote newVideoStreamGroupWithStreamGroupConfig:]
  -[VCSessionParticipantRemote newCameraStreamGroupWithStreamGroupConfig:]
  -[VCSessionParticipantRemote newCaptionsStreamGroupWithStreamGroupConfig:]
  -[VCSessionParticipantRemote didNegotiateStreamGroupWithID:]
  -[VCSessionParticipantRemote shouldEnablePacketRetransmissionForStreamGroupID:]
  -[VCSessionParticipantRemote shouldSetupStreamGroupWithID:]
  -[VCSessionParticipantRemote createJitterBufferTargetEstimatorSynchronizer:syncGroupID:]
  -[VCSessionParticipantRemote setupJBTargetSynchronizers]
  -[VCSessionParticipantRemote setupStreamGroups]
  -[VCSessionParticipantRemote updateShouldEnableFaceZoom]
  -[VCSessionParticipantRemote setShouldEnableFaceZoom:]
  -[VCSessionParticipantRemote updateShouldEnableMLEnhance]
  -[VCSessionParticipantRemote updateSourcePlayoutTimestampWithSamples:]
  -[VCSessionParticipantRemote isSeamlessTransitionSupportedForStreamGroup:]
  -[VCSessionParticipantRemote createAndResumeFetchTimer]
  -[VCSessionParticipantRemote cancelAndReleaseFetchTimer]
  -[VCSessionParticipantRemote debounceAudioPriority:]
  -[VCSessionParticipantRemote updateVideoPriority:]
  -[VCSessionParticipantRemote updateAndHandleVideoMediaStall:isOneToOneStream:]
  -[VCSessionParticipantRemote setOptedInAudioStreamID:]
  -[VCSessionParticipantRemote isRemoteVideoPaused]
  -[VCSessionParticipantRemote positionalInfo]
  -[VCSessionParticipantRemote isServerRTxEnabled]
  -[VCSessionParticipantRemote setIsServerRTxEnabled:]


VCTransportSessionIDS : VCTransportSession
 @property  int socket
 @property  NSString *destination

  // instance methods
  -[VCTransportSessionIDS setDestination:]
  -[VCTransportSessionIDS destination]
  -[VCTransportSessionIDS dealloc]
  -[VCTransportSessionIDS socket]
  -[VCTransportSessionIDS stop]
  -[VCTransportSessionIDS setSocket:]
  -[VCTransportSessionIDS start]
  -[VCTransportSessionIDS startMKMRecoveryForParticipantIDs:]
  -[VCTransportSessionIDS onStart]
  -[VCTransportSessionIDS initWithCallID:reportingAgent:]
  -[VCTransportSessionIDS initWithCallID:requireEncryptionInfo:reportingAgent:notificationQueue:]
  -[VCTransportSessionIDS initWithCallID:requireEncryptionInfo:reportingAgent:notificationQueue:dataPath:]
  -[VCTransportSessionIDS datagramChannel]
  -[VCTransportSessionIDS getConnectionSetupData:withOptions:error:]
  -[VCTransportSessionIDS processDatagramChannelEventInfo:]
  -[VCTransportSessionIDS dispatchedProcessDatagramChannelEventInfo:]
  -[VCTransportSessionIDS remoteDeviceVersionIDS]
  -[VCTransportSessionIDS cleanupDatagramChannel]
  -[VCTransportSessionIDS setConnectionSetupPiggybackBlob:]
  -[VCTransportSessionIDS setPiggybackBlobPreference]
  -[VCTransportSessionIDS connectionSetupPiggybackBlob]
  -[VCTransportSessionIDS onStop]
  -[VCTransportSessionIDS handleLinkConnectedWithInfo:]
  -[VCTransportSessionIDS handleLinkDisconnectedWithInfo:]
  -[VCTransportSessionIDS handleDefaultLinkUpdatedWithInfo:]
  -[VCTransportSessionIDS handlePreConnectionDataReceived:]
  -[VCTransportSessionIDS handleRATChanged:]
  -[VCTransportSessionIDS handleCellularMTUChanged:]
  -[VCTransportSessionIDS handleIDSEncryptionInfoEvent:]
  -[VCTransportSessionIDS handleIDSMembershipChangeInfoEvent:]
  -[VCTransportSessionIDS handleSessionInfoResponse:]
  -[VCTransportSessionIDS handleProbingResponse:]
  -[VCTransportSessionIDS handleCellularSoMaskChanged:]
  -[VCTransportSessionIDS handleLinkConstrainsChanged:]
  -[VCTransportSessionIDS setConnectionSetupTime]
  -[VCTransportSessionIDS handleChannelInfoReport:]
  -[VCTransportSessionIDS setQuickRelayServerProvider:]
  -[VCTransportSessionIDS handleLinkPreferSuggestion:]
  -[VCTransportSessionIDS handleReportingBlob:]
  -[VCTransportSessionIDS getSignalStrengthBars:displayBars:maxDisplayBars:]
  -[VCTransportSessionIDS flushBasebandQueueForConnection:payloadInfoList:]
  -[VCTransportSessionIDS updateQualityIndicator:isIPv6:]
  -[VCTransportSessionIDS registerBasebandNotificationsForConnection:]
  -[VCTransportSessionIDS deregisterBasebandNotifications]


AVCCameraTestUtils : NSObject
  // class methods
  +[AVCCameraTestUtils expectedPreviewResolutionForDevice:width:height:]
  +[AVCCameraTestUtils findExpectedFramerate:forDevice:]
  +[AVCCameraTestUtils expectedGFTResolutionForDevice:ratio:]


VCVideoReceiverBase : NSObject <VCMediaStreamSyncDestination, VCConnectionChangedHandler>
 @property  int remoteVideoOrientation
 @property  <VCVideoReceiverDelegate> *delegate
 @property  <VCMediaStreamSyncSource> *syncSource
 @property  double roundTripTime
 @property  double lastReceivedVideoRTPPacketTime
 @property  double lastReceivedVideoRTCPPacketTime
 @property  float lastLastVideoStallDuration
 @property  unsigned int lastDisplayedFrameRTPTimestamp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoReceiverBase setDelegate:]
  -[VCVideoReceiverBase delegate]
  -[VCVideoReceiverBase dealloc]
  -[VCVideoReceiverBase init]
  -[VCVideoReceiverBase roundTripTime]
  -[VCVideoReceiverBase setRoundTripTime:]
  -[VCVideoReceiverBase setSynchronizer:]
  -[VCVideoReceiverBase pauseVideo]
  -[VCVideoReceiverBase syncSource]
  -[VCVideoReceiverBase startVideo]
  -[VCVideoReceiverBase stopVideo]
  -[VCVideoReceiverBase handleActiveConnectionChange:]
  -[VCVideoReceiverBase setTargetStreamID:]
  -[VCVideoReceiverBase startSynchronization:]
  -[VCVideoReceiverBase stopSynchronization]
  -[VCVideoReceiverBase setEnableCVO:cvoExtensionID:]
  -[VCVideoReceiverBase setEnableRateAdaptation:maxBitrate:minBitrate:adaptationInterval:]
  -[VCVideoReceiverBase setSyncSource:]
  -[VCVideoReceiverBase updateSourcePlayoutTimestamp:]
  -[VCVideoReceiverBase rtcpSendIntervalElapsed]
  -[VCVideoReceiverBase lastDisplayedFrameRTPTimestamp]
  -[VCVideoReceiverBase collectChannelMetrics:interval:]
  -[VCVideoReceiverBase remoteVideoOrientation]
  -[VCVideoReceiverBase setRemoteVideoOrientation:]
  -[VCVideoReceiverBase lastReceivedVideoRTPPacketTime]
  -[VCVideoReceiverBase lastReceivedVideoRTCPPacketTime]
  -[VCVideoReceiverBase lastLastVideoStallDuration]


VCMediaStreamGroupConfig : NSObject
 @property  unsigned int streamGroupID
 @property  long long streamToken
 @property  unsigned int mediaType
 @property  unsigned int mediaSubtype
 @property  unsigned int syncGroupID
 @property  <VCMediaStreamGroupDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <VCMediaCaptureController> *captureController
 @property  NSArray *mediaStreamInfoArray
 @property  VCSecurityKeyManager *securityKeyManager
 @property  NSString *participantUUID
 @property  unsigned long idsParticipantID
 @property  int captureSource
 @property  ^{tagVCJBTargetEstimatorSynchronizer=} jbTargetEstimatorSynchronizer
 @property  NSString *sessionUUID
 @property  VCNetworkFeedbackController *networkFeedbackController

  // instance methods
  -[VCMediaStreamGroupConfig setMediaType:]
  -[VCMediaStreamGroupConfig setSessionUUID:]
  -[VCMediaStreamGroupConfig sessionUUID]
  -[VCMediaStreamGroupConfig setDelegate:]
  -[VCMediaStreamGroupConfig mediaType]
  -[VCMediaStreamGroupConfig delegate]
  -[VCMediaStreamGroupConfig setDelegateQueue:]
  -[VCMediaStreamGroupConfig captureController]
  -[VCMediaStreamGroupConfig dealloc]
  -[VCMediaStreamGroupConfig delegateQueue]
  -[VCMediaStreamGroupConfig init]
  -[VCMediaStreamGroupConfig mediaSubtype]
  -[VCMediaStreamGroupConfig streamToken]
  -[VCMediaStreamGroupConfig setStreamToken:]
  -[VCMediaStreamGroupConfig setMediaSubtype:]
  -[VCMediaStreamGroupConfig syncGroupID]
  -[VCMediaStreamGroupConfig setSyncGroupID:]
  -[VCMediaStreamGroupConfig captureSource]
  -[VCMediaStreamGroupConfig setCaptureSource:]
  -[VCMediaStreamGroupConfig addMediaStreamInfo:]
  -[VCMediaStreamGroupConfig jbTargetEstimatorSynchronizer]
  -[VCMediaStreamGroupConfig setJbTargetEstimatorSynchronizer:]
  -[VCMediaStreamGroupConfig streamGroupID]
  -[VCMediaStreamGroupConfig setStreamGroupID:]
  -[VCMediaStreamGroupConfig setCaptureController:]
  -[VCMediaStreamGroupConfig mediaStreamInfoArray]
  -[VCMediaStreamGroupConfig securityKeyManager]
  -[VCMediaStreamGroupConfig setSecurityKeyManager:]
  -[VCMediaStreamGroupConfig participantUUID]
  -[VCMediaStreamGroupConfig setParticipantUUID:]
  -[VCMediaStreamGroupConfig idsParticipantID]
  -[VCMediaStreamGroupConfig setIdsParticipantID:]
  -[VCMediaStreamGroupConfig networkFeedbackController]
  -[VCMediaStreamGroupConfig setNetworkFeedbackController:]


VCMovieWriterUtil : NSObject
  // class methods
  +[VCMovieWriterUtil getMetaDataArrayWithIndentifier:]


VCMediaNegotiationBlobVideoSettings : PBCodable <NSCopying>
 @property  unsigned int rtpSSRC
 @property  BOOL allowRTCPFB
 @property  NSMutableArray *videoPayloadCollections
 @property  BOOL hasCustomVideoWidth
 @property  unsigned int customVideoWidth
 @property  BOOL hasCustomVideoHeight
 @property  unsigned int customVideoHeight
 @property  BOOL hasTilesPerFrame
 @property  unsigned int tilesPerFrame
 @property  BOOL hasLtrpEnabled
 @property  BOOL ltrpEnabled
 @property  BOOL hasPixelFormats
 @property  unsigned int pixelFormats
 @property  BOOL hasHdrModesSupported
 @property  unsigned int hdrModesSupported

  // class methods
  +[VCMediaNegotiationBlobVideoSettings videoPayloadCollectionsType]
  +[VCMediaNegotiationBlobVideoSettings storePixelFormatsInBitMap:]
  +[VCMediaNegotiationBlobVideoSettings hdrModesBitmapWithSupportedModes:]

  // instance methods
  -[VCMediaNegotiationBlobVideoSettings copyTo:]
  -[VCMediaNegotiationBlobVideoSettings dealloc]
  -[VCMediaNegotiationBlobVideoSettings mergeFrom:]
  -[VCMediaNegotiationBlobVideoSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobVideoSettings copyWithZone:]
  -[VCMediaNegotiationBlobVideoSettings readFrom:]
  -[VCMediaNegotiationBlobVideoSettings writeTo:]
  -[VCMediaNegotiationBlobVideoSettings isEqual:]
  -[VCMediaNegotiationBlobVideoSettings tilesPerFrame]
  -[VCMediaNegotiationBlobVideoSettings setTilesPerFrame:]
  -[VCMediaNegotiationBlobVideoSettings rtpSSRC]
  -[VCMediaNegotiationBlobVideoSettings setRtpSSRC:]
  -[VCMediaNegotiationBlobVideoSettings allowRTCPFB]
  -[VCMediaNegotiationBlobVideoSettings setAllowRTCPFB:]
  -[VCMediaNegotiationBlobVideoSettings customVideoWidth]
  -[VCMediaNegotiationBlobVideoSettings setCustomVideoWidth:]
  -[VCMediaNegotiationBlobVideoSettings customVideoHeight]
  -[VCMediaNegotiationBlobVideoSettings setCustomVideoHeight:]
  -[VCMediaNegotiationBlobVideoSettings ltrpEnabled]
  -[VCMediaNegotiationBlobVideoSettings setLtrpEnabled:]
  -[VCMediaNegotiationBlobVideoSettings pixelFormats]
  -[VCMediaNegotiationBlobVideoSettings setPixelFormats:]
  -[VCMediaNegotiationBlobVideoSettings hdrModesSupported]
  -[VCMediaNegotiationBlobVideoSettings setHdrModesSupported:]
  -[VCMediaNegotiationBlobVideoSettings clearVideoPayloadCollections]
  -[VCMediaNegotiationBlobVideoSettings addVideoPayloadCollections:]
  -[VCMediaNegotiationBlobVideoSettings videoPayloadCollectionsCount]
  -[VCMediaNegotiationBlobVideoSettings videoPayloadCollectionsAtIndex:]
  -[VCMediaNegotiationBlobVideoSettings setHasCustomVideoWidth:]
  -[VCMediaNegotiationBlobVideoSettings hasCustomVideoWidth]
  -[VCMediaNegotiationBlobVideoSettings setHasCustomVideoHeight:]
  -[VCMediaNegotiationBlobVideoSettings hasCustomVideoHeight]
  -[VCMediaNegotiationBlobVideoSettings setHasTilesPerFrame:]
  -[VCMediaNegotiationBlobVideoSettings hasTilesPerFrame]
  -[VCMediaNegotiationBlobVideoSettings setHasLtrpEnabled:]
  -[VCMediaNegotiationBlobVideoSettings hasLtrpEnabled]
  -[VCMediaNegotiationBlobVideoSettings setHasPixelFormats:]
  -[VCMediaNegotiationBlobVideoSettings hasPixelFormats]
  -[VCMediaNegotiationBlobVideoSettings setHasHdrModesSupported:]
  -[VCMediaNegotiationBlobVideoSettings hasHdrModesSupported]
  -[VCMediaNegotiationBlobVideoSettings videoPayloadCollections]
  -[VCMediaNegotiationBlobVideoSettings setVideoPayloadCollections:]
  -[VCMediaNegotiationBlobVideoSettings initWithSSRC:allowRTCPFB:videoRuleCollections:featureStrings:isCellular16x9Capable:tilesPerFrame:ltrpEnabled:]
  -[VCMediaNegotiationBlobVideoSettings initWithScreenSSRC:allowRTCPFB:videoRuleCollections:featureStrings:isCellular16x9Capable:customVideoWidth:customVideoHeight:tilesPerFrame:ltrpEnabled:pixelFormats:hdrModesSupported:]
  -[VCMediaNegotiationBlobVideoSettings getPayloadSettingsForPayload:]
  -[VCMediaNegotiationBlobVideoSettings setVideoRuleCollections:featureStrings:isScreen:isCellular16x9Capable:]
  -[VCMediaNegotiationBlobVideoSettings checkAndInsertRuleWithWidth:height:framerate:payload:priority:negotiationBitfield:negotiationBit:rules:isCellular16x9Capable:]
  -[VCMediaNegotiationBlobVideoSettings newVideoRuleCollectionsForScreen:isCellular16x9Capable:isLocalConfig:]
  -[VCMediaNegotiationBlobVideoSettings newFeatureStrings]
  -[VCMediaNegotiationBlobVideoSettings parameterSetStringFromPayloadSettings:]
  -[VCMediaNegotiationBlobVideoSettings prepareFormatString:format:formatIndex:preferredFormat:]
  -[VCMediaNegotiationBlobVideoSettings printVideoWithLogFile:]
  -[VCMediaNegotiationBlobVideoSettings printScreenWithLogFile:]


VCStreamInputVideo : VCStreamInput
  // instance methods
  -[VCStreamInputVideo dealloc]
  -[VCStreamInputVideo invalidate]
  -[VCStreamInputVideo initWithStreamInputID:format:delegate:delegateQueue:remoteQueue:]
  -[VCStreamInputVideo addSink:]
  -[VCStreamInputVideo removeSink:]


VCVideoStreamRateAdaptation : NSObject
 @property  ^{tagHANDLE=i} rtpHandle
 @property  double packetLossPercentage
 @property  double roundTripTime
 @property  double owrd
 @property  double nowrd
 @property  double nowrdShort
 @property  double nowrdAcc
 @property  unsigned int operatingBitrate
 @property  unsigned int sendTmmbrBitrate
 @property  BOOL isOperatingAtMaxBitrate
 @property  BOOL isOperatingAtMinBitrate
 @property  double maxOWRD

  // instance methods
  -[VCVideoStreamRateAdaptation dealloc]
  -[VCVideoStreamRateAdaptation className]
  -[VCVideoStreamRateAdaptation roundTripTime]
  -[VCVideoStreamRateAdaptation owrd]
  -[VCVideoStreamRateAdaptation nowrd]
  -[VCVideoStreamRateAdaptation nowrdShort]
  -[VCVideoStreamRateAdaptation nowrdAcc]
  -[VCVideoStreamRateAdaptation reportingVideoStreamEvent:]
  -[VCVideoStreamRateAdaptation setEnableRateAdaptation:maxBitrate:minBitrate:adaptationInterval:]
  -[VCVideoStreamRateAdaptation initWithRTPHandle:reportingAgent:receiverStats:dumpID:reportingParentID:]
  -[VCVideoStreamRateAdaptation runVideoStreamRateAdaptation]
  -[VCVideoStreamRateAdaptation receivedTMMBN:]
  -[VCVideoStreamRateAdaptation updateVideoStall:withStallDuration:]
  -[VCVideoStreamRateAdaptation updateRTPReceiveWithTimestamp:sampleRate:time:size:endOfFrame:]
  -[VCVideoStreamRateAdaptation setOperatingBitrate:]
  -[VCVideoStreamRateAdaptation averageReceivedBitrate]
  -[VCVideoStreamRateAdaptation scheduleTMMBR:]
  -[VCVideoStreamRateAdaptation rtpHandle]
  -[VCVideoStreamRateAdaptation isOperatingAtMinBitrate]
  -[VCVideoStreamRateAdaptation isOperatingAtMaxBitrate]
  -[VCVideoStreamRateAdaptation packetLossPercentage]
  -[VCVideoStreamRateAdaptation maxOWRD]
  -[VCVideoStreamRateAdaptation setMaxOWRD:]
  -[VCVideoStreamRateAdaptation sendTmmbrBitrate]
  -[VCVideoStreamRateAdaptation operatingBitrate]


VCVideoRuleCollectionsScreenAirplayMac : VCVideoRuleCollectionsScreenAirplay
  // class methods
  +[VCVideoRuleCollectionsScreenAirplayMac sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsScreenAirplayMac initWithHardwareSettings:]
  -[VCVideoRuleCollectionsScreenAirplayMac initSupportedPayloads]
  -[VCVideoRuleCollectionsScreenAirplayMac setupRules]
  -[VCVideoRuleCollectionsScreenAirplayMac setupH264Rules]
  -[VCVideoRuleCollectionsScreenAirplayMac setupHEVCRules]
  -[VCVideoRuleCollectionsScreenAirplayMac tilesPerFrame:hdrMode:]


VCAudioRelayIO : VCObject <NSCopying, VCBasebandCodecNotifications, VCAudioIOSink, VCAudioIOSource>
 @property  r^{tagVCAudioRelayIOContext=^{tagVCAudioFrameFormat}^{tagVCAudioFrameFormat}^?^v^{opaqueVCAudioBufferList}f{tagVCAudioClientControllerTimeInfo=IIBBdIIQ}} micContext
 @property  r^{tagVCAudioRelayIOContext=^{tagVCAudioFrameFormat}^{tagVCAudioFrameFormat}^?^v^{opaqueVCAudioBufferList}f{tagVCAudioClientControllerTimeInfo=IIBBdIIQ}} speakerContext
 @property  BOOL isRunning
 @property  BOOL usePacketThread
 @property  @? startCompletionHandler
 @property  r^{_VCRemoteCodecInfo=Id} remoteCodecInfo
 @property  ^{PacketThread_s=} packetThread
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} clientFormat
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} relayFormat
 @property  ^? micCallback
 @property  ^v micCallbackContext
 @property  ^{opaqueVCAudioBufferList=} micBuffer
 @property  unsigned int micTimestamp
 @property  float micPowerRMS
 @property  ^? speakerCallback
 @property  ^v speakerCallbackContext
 @property  ^{opaqueVCAudioBufferList=} speakerBuffer
 @property  unsigned int speakerTimestamp
 @property  float speakerPowerRMS
 @property  ^? updateRemoteCodecInfoCallback
 @property  ^v updateRemoteCodecInfoContext
 @property  double preferredIODuration
 @property  <VCBasebandCodecNotifications> *relay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioRelayIO isInitialized]
  -[VCAudioRelayIO dealloc]
  -[VCAudioRelayIO isRunning]
  -[VCAudioRelayIO copyWithZone:]
  -[VCAudioRelayIO init]
  -[VCAudioRelayIO setRelay:]
  -[VCAudioRelayIO relay]
  -[VCAudioRelayIO didUpdateBasebandCodec:]
  -[VCAudioRelayIO printStreamFormats]
  -[VCAudioRelayIO pushAudioSamples:]
  -[VCAudioRelayIO pullAudioSamples:]
  -[VCAudioRelayIO initWithMicContext:speakerContext:]
  -[VCAudioRelayIO initializeFormatContextPointers]
  -[VCAudioRelayIO isEqualToRelayIO:]
  -[VCAudioRelayIO remoteCodecInfo]
  -[VCAudioRelayIO setRemoteCodecInfo:]
  -[VCAudioRelayIO createBuffersForIOContext:]
  -[VCAudioRelayIO createAudioBuffers]
  -[VCAudioRelayIO micContext]
  -[VCAudioRelayIO speakerContext]
  -[VCAudioRelayIO clientFormat]
  -[VCAudioRelayIO setClientFormat:]
  -[VCAudioRelayIO relayFormat]
  -[VCAudioRelayIO micCallback]
  -[VCAudioRelayIO setMicCallback:]
  -[VCAudioRelayIO micCallbackContext]
  -[VCAudioRelayIO setMicCallbackContext:]
  -[VCAudioRelayIO speakerCallback]
  -[VCAudioRelayIO setSpeakerCallback:]
  -[VCAudioRelayIO speakerCallbackContext]
  -[VCAudioRelayIO setSpeakerCallbackContext:]
  -[VCAudioRelayIO preferredIODuration]
  -[VCAudioRelayIO internalPushAudioSamples:]
  -[VCAudioRelayIO createPacketThreadWithIOBufferDuration:name:error:]
  -[VCAudioRelayIO destroyPacketThread]
  -[VCAudioRelayIO createRecordingsWithName:]
  -[VCAudioRelayIO closeRecordings]
  -[VCAudioRelayIO micBuffer]
  -[VCAudioRelayIO micTimestamp]
  -[VCAudioRelayIO setMicTimestamp:]
  -[VCAudioRelayIO micPowerRMS]
  -[VCAudioRelayIO setMicPowerRMS:]
  -[VCAudioRelayIO speakerBuffer]
  -[VCAudioRelayIO speakerTimestamp]
  -[VCAudioRelayIO setSpeakerTimestamp:]
  -[VCAudioRelayIO speakerPowerRMS]
  -[VCAudioRelayIO setSpeakerPowerRMS:]
  -[VCAudioRelayIO startCompletionHandler]
  -[VCAudioRelayIO setStartCompletionHandler:]
  -[VCAudioRelayIO usePacketThread]
  -[VCAudioRelayIO setUsePacketThread:]
  -[VCAudioRelayIO packetThread]
  -[VCAudioRelayIO updateRemoteCodecInfoCallback]
  -[VCAudioRelayIO setUpdateRemoteCodecInfoCallback:]
  -[VCAudioRelayIO updateRemoteCodecInfoContext]
  -[VCAudioRelayIO setUpdateRemoteCodecInfoContext:]


VCDisplayLink : VCObject
  // instance methods
  -[VCDisplayLink displayLinkTick:]
  -[VCDisplayLink activate]
  -[VCDisplayLink deactivate]
  -[VCDisplayLink dealloc]
  -[VCDisplayLink observeValueForKeyPath:ofObject:change:context:]
  -[VCDisplayLink initWithHandler:]
  -[VCDisplayLink initWithHandler:threadPriority:threadOptions:threadIdentifier:]
  -[VCDisplayLink ensureDisplayIsReady]
  -[VCDisplayLink handleWaitToRunTimeout]
  -[VCDisplayLink runDisplayLinkThreadWithStopRequested:]


VCStreamOutput : VCObject <VCStreamSychronizationDelegate, VCRemoteVideoManagerStreamOutputDelegate>
 @property  long long streamToken
 @property  BOOL isClientInProcess
 @property  r^{__CFAllocator=} backingBufferAllocator
 @property  float synchronizationTimeOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCStreamOutput didInvalidate]
  -[VCStreamOutput didSuspend:]
  -[VCStreamOutput setSynchronizationDelegate:]
  -[VCStreamOutput dealloc]
  -[VCStreamOutput synchronizationDelegate]
  -[VCStreamOutput invalidate]
  -[VCStreamOutput processID]
  -[VCStreamOutput streamToken]
  -[VCStreamOutput synchronizationTimeOffset]
  -[VCStreamOutput setSynchronizationTimeOffset:]
  -[VCStreamOutput didPause:]
  -[VCStreamOutput didStall:]
  -[VCStreamOutput didDegrade:]
  -[VCStreamOutput didUpdateAttachments:]
  -[VCStreamOutput didReceiveSampleBuffer:]
  -[VCStreamOutput initWithStreamToken:clientProcessID:synchronizationDelegate:delegate:delegateQueue:]
  -[VCStreamOutput createRemoteQueue]
  -[VCStreamOutput copyXpcSenderQueue]
  -[VCStreamOutput enqueueAttributes:]
  -[VCStreamOutput initXPCCommandQueue]
  -[VCStreamOutput isClientInProcess]
  -[VCStreamOutput backingBufferAllocator]


VCCaptionsTranscription : NSObject <NSCopying, NSCoding, NSSecureCoding, VCCaptionsTranscription>
 @property  unsigned int utteranceNumber
 @property  unsigned int updateNumber
 @property  BOOL isLocal
 @property  BOOL isFinal
 @property  NSString *formattedText
 @property  long long streamToken
 @property  NSArray *segments

  // class methods
  +[VCCaptionsTranscription supportsSecureCoding]

  // instance methods
  -[VCCaptionsTranscription setIsLocal:]
  -[VCCaptionsTranscription encodeWithCoder:]
  -[VCCaptionsTranscription dealloc]
  -[VCCaptionsTranscription segments]
  -[VCCaptionsTranscription formattedText]
  -[VCCaptionsTranscription copyWithZone:]
  -[VCCaptionsTranscription isLocal]
  -[VCCaptionsTranscription addSegment:]
  -[VCCaptionsTranscription isEqual:]
  -[VCCaptionsTranscription initWithCoder:]
  -[VCCaptionsTranscription streamToken]
  -[VCCaptionsTranscription isFinal]
  -[VCCaptionsTranscription setIsFinal:]
  -[VCCaptionsTranscription utteranceNumber]
  -[VCCaptionsTranscription updateNumber]
  -[VCCaptionsTranscription setUpdateNumber:]
  -[VCCaptionsTranscription setUtteranceNumber:]
  -[VCCaptionsTranscription initWithUtteranceNumber:updateNumber:isLocal:isFinal:streamToken:]
  -[VCCaptionsTranscription initWithSFTranscription:utteranceNumber:updateNumber:isLocal:isFinal:streamToken:]


VCMediaStreamStats : NSObject
 @property  unsigned int bitrateKbps
 @property  unsigned int maxBitrateKbps
 @property  unsigned int minBitrateKbps
 @property  double framerate
 @property  double maxFramerate
 @property  double minFramerate
 @property  unsigned short maxFrameDurationMillis

  // instance methods
  -[VCMediaStreamStats framerate]
  -[VCMediaStreamStats dealloc]
  -[VCMediaStreamStats init]
  -[VCMediaStreamStats recordDataWithSize:atTime:]
  -[VCMediaStreamStats bitrateKbps]
  -[VCMediaStreamStats updateMinMaxSinceTime:]
  -[VCMediaStreamStats getFramerateSinceTime:]
  -[VCMediaStreamStats getBitrateKbpsSinceTime:]
  -[VCMediaStreamStats minBitrateKbps]
  -[VCMediaStreamStats setMinBitrateKbps:]
  -[VCMediaStreamStats maxBitrateKbps]
  -[VCMediaStreamStats setMaxBitrateKbps:]
  -[VCMediaStreamStats minFramerate]
  -[VCMediaStreamStats setMinFramerate:]
  -[VCMediaStreamStats maxFramerate]
  -[VCMediaStreamStats setMaxFramerate:]
  -[VCMediaStreamStats maxFrameDurationMillis]
  -[VCMediaStreamStats setMaxFrameDurationMillis:]


VCSessionErrorUtils : NSObject
  // class methods
  +[VCSessionErrorUtils VCSessionErrorEvent:errorPath:returnCode:]
  +[VCSessionErrorUtils VCSessionParticipantErrorEvent:errorPath:]
  +[VCSessionErrorUtils VCSessionCaptionsErrorEvent:errorPath:returnCode:]


AVCScreenCaptureTestDelegate : NSObject <AVCScreenCaptureDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVCScreenCaptureTestDelegate serverDidDisconnect:]
  -[AVCScreenCaptureTestDelegate screenCapture:didStop:withError:]
  -[AVCScreenCaptureTestDelegate screenCapture:didStart:withError:]


VCImageMirroringConverter : VCImageRotationConverterBase
  // instance methods
  -[VCImageMirroringConverter initWithWidth:height:formatType:]


VCMediaNegotiationBlobV2GeneralInfo : PBCodable <NSCopying>
 @property  {CGSize=dd} screenResolution
 @property  (tagNTP=Q{?=II}) creationTime
 @property  BOOL hasNtpTime
 @property  unsigned long ntpTime
 @property  BOOL hasCname
 @property  NSString *cname
 @property  BOOL hasAbSwitches
 @property  unsigned int abSwitches
 @property  BOOL hasScreenRes
 @property  unsigned int screenRes

  // instance methods
  -[VCMediaNegotiationBlobV2GeneralInfo copyTo:]
  -[VCMediaNegotiationBlobV2GeneralInfo creationTime]
  -[VCMediaNegotiationBlobV2GeneralInfo dealloc]
  -[VCMediaNegotiationBlobV2GeneralInfo mergeFrom:]
  -[VCMediaNegotiationBlobV2GeneralInfo dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2GeneralInfo copyWithZone:]
  -[VCMediaNegotiationBlobV2GeneralInfo readFrom:]
  -[VCMediaNegotiationBlobV2GeneralInfo writeTo:]
  -[VCMediaNegotiationBlobV2GeneralInfo isEqual:]
  -[VCMediaNegotiationBlobV2GeneralInfo screenResolution]
  -[VCMediaNegotiationBlobV2GeneralInfo cname]
  -[VCMediaNegotiationBlobV2GeneralInfo setCname:]
  -[VCMediaNegotiationBlobV2GeneralInfo printWithLogFile:prefix:]
  -[VCMediaNegotiationBlobV2GeneralInfo setNtpTime:]
  -[VCMediaNegotiationBlobV2GeneralInfo setHasNtpTime:]
  -[VCMediaNegotiationBlobV2GeneralInfo hasNtpTime]
  -[VCMediaNegotiationBlobV2GeneralInfo hasCname]
  -[VCMediaNegotiationBlobV2GeneralInfo abSwitches]
  -[VCMediaNegotiationBlobV2GeneralInfo setAbSwitches:]
  -[VCMediaNegotiationBlobV2GeneralInfo setHasAbSwitches:]
  -[VCMediaNegotiationBlobV2GeneralInfo hasAbSwitches]
  -[VCMediaNegotiationBlobV2GeneralInfo setScreenRes:]
  -[VCMediaNegotiationBlobV2GeneralInfo setHasScreenRes:]
  -[VCMediaNegotiationBlobV2GeneralInfo hasScreenRes]
  -[VCMediaNegotiationBlobV2GeneralInfo ntpTime]
  -[VCMediaNegotiationBlobV2GeneralInfo screenRes]
  -[VCMediaNegotiationBlobV2GeneralInfo initWithCreationTime:screenResolution:abSwitches:]


VCVideoReceiverDefault : VCVideoReceiverBase
 @property  {tagVCVideoReceiverConfig=I[9{tagVCVideoReceiverStreamConfig={tagVCVideoReceiverStreamIDInfo=SSSI[9S][9S]}^{tagHANDLE}^{__CFDictionary}BSCBB^{tagVCCryptor}^v^viB}]iiqiiiIiiiiiiBBBBd^v^?^?^?^?^?^?^?QBSB^{tagWRMMetricsInfo}IBBBBBBBBBBBBBB^vBBIBBS^{tagVCJBTargetEstimatorSynchronizer}^{__CFString}^{__CFString}IBBBiBB{tagVCNACKGeneratorStoreBagsConfig=CffB[4f][4f]}B} videoReceiverConfig
 @property  VideoAttributes *remoteVideoAttributes
 @property  int mode
 @property  BOOL shouldUpdateRemoteScreenAttributes
 @property  BOOL shouldEnableFaceZoom
 @property  BOOL shouldEnableMLEnhance

  // instance methods
  -[VCVideoReceiverDefault setFeedbackDelegate:]
  -[VCVideoReceiverDefault dealloc]
  -[VCVideoReceiverDefault mode]
  -[VCVideoReceiverDefault setMode:]
  -[VCVideoReceiverDefault roundTripTime]
  -[VCVideoReceiverDefault setSynchronizer:]
  -[VCVideoReceiverDefault pauseVideo]
  -[VCVideoReceiverDefault remoteVideoAttributes]
  -[VCVideoReceiverDefault startVideo]
  -[VCVideoReceiverDefault stopVideo]
  -[VCVideoReceiverDefault handleActiveConnectionChange:]
  -[VCVideoReceiverDefault setTargetStreamID:]
  -[VCVideoReceiverDefault setEnableCVO:cvoExtensionID:]
  -[VCVideoReceiverDefault setEnableRateAdaptation:maxBitrate:minBitrate:adaptationInterval:]
  -[VCVideoReceiverDefault updateSourcePlayoutTimestamp:]
  -[VCVideoReceiverDefault rtcpSendIntervalElapsed]
  -[VCVideoReceiverDefault lastDisplayedFrameRTPTimestamp]
  -[VCVideoReceiverDefault setShouldEnableFaceZoom:]
  -[VCVideoReceiverDefault collectChannelMetrics:interval:]
  -[VCVideoReceiverDefault lastReceivedVideoRTPPacketTime]
  -[VCVideoReceiverDefault lastReceivedVideoRTCPPacketTime]
  -[VCVideoReceiverDefault lastLastVideoStallDuration]
  -[VCVideoReceiverDefault initWithConfig:delegate:reportingAgent:statisticsCollector:transmitterHandle:]
  -[VCVideoReceiverDefault oneToOneStreamIndex]
  -[VCVideoReceiverDefault setUpRemoteAspectRatios]
  -[VCVideoReceiverDefault setUpRemoteAspectRatiosForPayload:]
  -[VCVideoReceiverDefault setUpRemoteAspectRatiosFromFreatureListString:]
  -[VCVideoReceiverDefault initializeDisplayLink]
  -[VCVideoReceiverDefault cleanUpDisplayLink]
  -[VCVideoReceiverDefault handleRemoteFrame:timestamp:cameraStatusBits:]
  -[VCVideoReceiverDefault handleSampleBuffer:]
  -[VCVideoReceiverDefault handleRequestingKeyFrameGenerationWithStreamID:firType:]
  -[VCVideoReceiverDefault handleKeyFrameRequestWithSizeAndFistMBs:count:didReceiveRTCPFB:didReceiveFIR:]
  -[VCVideoReceiverDefault didSwitchFromStreamID:toStreamID:]
  -[VCVideoReceiverDefault setShouldEnableMLEnhance:]
  -[VCVideoReceiverDefault setRemoteVideoAttributes:]
  -[VCVideoReceiverDefault shouldEnableFaceZoom]
  -[VCVideoReceiverDefault shouldEnableMLEnhance]
  -[VCVideoReceiverDefault shouldUpdateRemoteScreenAttributes]
  -[VCVideoReceiverDefault setShouldUpdateRemoteScreenAttributes:]
  -[VCVideoReceiverDefault videoReceiverConfig]
  -[VCVideoReceiverDefault setVideoReceiverConfig:]


VCStreamInputManager : VCObject <VCStreamInputDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCStreamInputManager sharedInstance]

  // instance methods
  -[VCStreamInputManager allocWithZone:]
  -[VCStreamInputManager retain]
  -[VCStreamInputManager registerBlocksForService]
  -[VCStreamInputManager dealloc]
  -[VCStreamInputManager release]
  -[VCStreamInputManager deregisterBlocksForService]
  -[VCStreamInputManager copyWithZone:]
  -[VCStreamInputManager retainCount]
  -[VCStreamInputManager autorelease]
  -[VCStreamInputManager init]
  -[VCStreamInputManager didStartStreamInput:]
  -[VCStreamInputManager didStopStreamInput:]
  -[VCStreamInputManager didSuspendStreamInput:]
  -[VCStreamInputManager didResumeStreamInput:]
  -[VCStreamInputManager newStreamInputID]
  -[VCStreamInputManager initializeStreamInputWithXPCArguments:result:error:]
  -[VCStreamInputManager getServerPidWithXPCArguments:result:error:]
  -[VCStreamInputManager terminateStreamInputWithXPCArguments:result:error:]
  -[VCStreamInputManager clientProcessDiedWithXPCArguments:result:error:]
  -[VCStreamInputManager pushSampleBufferWithXPCArguments:result:error:]
  -[VCStreamInputManager registerService:weakSelf:block:]
  -[VCStreamInputManager registerService:weakSelf:eventLogLevel:block:]
  -[VCStreamInputManager registerDidClientDieBlock:]
  -[VCStreamInputManager streamInputWithID:]


VCConnectionManager : NSObject <VCConnectionHealthMonitorDelegate, VCWifiAssistManagerDelegate, VCLinkProbingHandlerDelegate, VCCoreMotionManagerDelegate>
 @property  <VCConnectionProtocol> *lastPrimaryConnectionInUse
 @property  unsigned int callID
 @property  int relayServerProvider
 @property  BOOL isPreWarmStateEnabled
 @property  BOOL remotePreWarmStateEnabled
 @property  unsigned char preferredLocalInterfaceForDuplication
 @property  unsigned char preferredRemoteInterfaceForDuplication
 @property  BOOL isLocalCellularInterfaceUsed
 @property  <VCConnectionManagerDelegate> *delegate
 @property  BOOL isAudioOnly
 @property  BOOL supportDuplication
 @property  <VCConnectionProtocol> *primaryConnection
 @property  <VCConnectionProtocol> *secondaryConnection
 @property  <VCConnectionProtocol> *connectionForDuplication
 @property  int connectionCount
 @property  unsigned long mediaExcessiveCellularTxBytes
 @property  unsigned long mediaExcessiveCellularRxBytes
 @property  unsigned long signalingExcessiveCellularTxBytes
 @property  unsigned long signalingExcessiveCellularRxBytes
 @property  unsigned long budgetConsumingCellularTxBytes
 @property  unsigned long budgetConsumingCellularRxBytes
 @property  unsigned long mediaCellularTxBytes
 @property  unsigned long mediaCellularRxBytes
 @property  unsigned long mediaWifiTxBytes
 @property  unsigned long mediaWifiRxBytes
 @property  double noRemotePacketInterval
 @property  double remoteNoRemotePacketInterval
 @property  VCStatsRecorder *statsRecorder
 @property  BOOL preferRelayOverP2PEnabled
 @property  BOOL fastMediaDuplicationEnabled
 @property  BOOL cellPrimaryInterfaceChangeEnabled
 @property  BOOL duplicateImportantPktsEnabled
 @property  BOOL lowNetworkModeEnabled
 @property  BOOL duplicationEnhancementEnabled
 @property  BOOL iRATDuplicationEnabled
 @property  double noRemoteDuplicationThresholdFast
 @property  unsigned int realRATType
 @property  unsigned char linkProbingCapabilityVersion
 @property  unsigned char remoteLinkProbingCapabilityVersion
 @property  double primaryConnHealthAllowedDelay
 @property  AVCStatisticsCollector *statisticsCollector
 @property  VCConnectionHealthMonitor *connectionHealthMonitor
 @property  BOOL optIntoExistingSubscribedStreams
 @property  BOOL isDuplicationAllowed
 @property  BOOL isOneToOneModeEnabled
 @property  BOOL useMediaDrivenDuplication
 @property  BOOL startConnectionHealthMonitoring
 @property  BOOL isRemoteMediaQualityDegraded
 @property  unsigned int sendSuccessCountSinceLastCheck
 @property  unsigned int sendFailureCountSinceLastCheck
 @property  BOOL isOneToOneRemoteParticipantAdded
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCConnectionManager addConnection:]
  -[VCConnectionManager setDelegate:]
  -[VCConnectionManager secondaryConnection]
  -[VCConnectionManager delegate]
  -[VCConnectionManager dealloc]
  -[VCConnectionManager stop]
  -[VCConnectionManager start]
  -[VCConnectionManager connectionCount]
  -[VCConnectionManager removeConnection:]
  -[VCConnectionManager init]
  -[VCConnectionManager callID]
  -[VCConnectionManager setCallID:]
  -[VCConnectionManager relayServerProvider]
  -[VCConnectionManager startActiveProbingWithOptions:]
  -[VCConnectionManager stopActiveProbingWithOptions:]
  -[VCConnectionManager flushLinkProbingStatusWithOptions:]
  -[VCConnectionManager isOneToOneModeEnabled]
  -[VCConnectionManager isAudioOnly]
  -[VCConnectionManager periodicTask:]
  -[VCConnectionManager registerPeriodicTask]
  -[VCConnectionManager deregisterPeriodicTask]
  -[VCConnectionManager statisticsCollector]
  -[VCConnectionManager setStatisticsCollector:]
  -[VCConnectionManager connectionHealthMonitor]
  -[VCConnectionManager setReportingAgent:]
  -[VCConnectionManager destroyNWMonitor]
  -[VCConnectionManager remoteLinkProbingCapabilityVersion]
  -[VCConnectionManager setRemoteLinkProbingCapabilityVersion:]
  -[VCConnectionManager queryProbingResultsWithOptions:]
  -[VCConnectionManager linkProbingCapabilityVersion]
  -[VCConnectionManager fastMediaDuplicationEnabled]
  -[VCConnectionManager setFastMediaDuplicationEnabled:]
  -[VCConnectionManager duplicateImportantPktsEnabled]
  -[VCConnectionManager setDuplicateImportantPktsEnabled:]
  -[VCConnectionManager setIsAudioOnly:]
  -[VCConnectionManager reportConnection:isInitialConnection:]
  -[VCConnectionManager updateCellularMTU:]
  -[VCConnectionManager updateCellularTech:forLocalInterface:]
  -[VCConnectionManager sourceDestinationInfo:isSourceOnCellular:isSourceIPv6:]
  -[VCConnectionManager shouldAcceptDataFromSourceDestinationInfo:]
  -[VCConnectionManager copyConnectionWithSourceDestinationInfo:isPrimary:]
  -[VCConnectionManager updateSessionStats:]
  -[VCConnectionManager updatePacketCountAndByteCountWithIndex:packetSize:numOfStreamId:isPriorityIncluded:isOutgoing:]
  -[VCConnectionManager synchronizeParticipantGenerationCounter:]
  -[VCConnectionManager getPacketCountWithIndex:isOutgoing:]
  -[VCConnectionManager getByteCountWithIndex:isOutgoing:]
  -[VCConnectionManager updateConnectionForDuplication]
  -[VCConnectionManager reportLinkProbingStatsWithDuplicationJustStarted:]
  -[VCConnectionManager updateOneToOneBitrateCapsForConnection:]
  -[VCConnectionManager updateAllBitrateCapsForConnection:]
  -[VCConnectionManager updateNegotiatedSettingsOnetoOne:]
  -[VCConnectionManager useConnectionAsPrimary:]
  -[VCConnectionManager getConnectionSelectionPolicy]
  -[VCConnectionManager primaryConnection]
  -[VCConnectionManager setPrimaryConnection:]
  -[VCConnectionManager setSecondaryConnection:]
  -[VCConnectionManager connectionForDuplication]
  -[VCConnectionManager setConnectionForDuplication:]
  -[VCConnectionManager lastPrimaryConnectionInUse]
  -[VCConnectionManager setLastPrimaryConnectionInUse:]
  -[VCConnectionManager processRemoteWRMSuggestion:isRemoteDuplicating:]
  -[VCConnectionManager connectionHealthDidUpdate:isLocalConnection:]
  -[VCConnectionManager didChangeWifiAssistAvailable:reason:]
  -[VCConnectionManager didUpdateMotionActivity:]
  -[VCConnectionManager registerStatisticsHandlers]
  -[VCConnectionManager unregisterStatisticsHandlers]
  -[VCConnectionManager setupConnectionHealthMonitorMultiway]
  -[VCConnectionManager setupConnectionHealthMonitor]
  -[VCConnectionManager setPreferRelayOverP2PEnabled:]
  -[VCConnectionManager setIsOneToOneModeEnabled:]
  -[VCConnectionManager setStartConnectionHealthMonitoring:]
  -[VCConnectionManager sendSuccessCountSinceLastCheck]
  -[VCConnectionManager sendFailureCountSinceLastCheck]
  -[VCConnectionManager resetConnectionStatTimers]
  -[VCConnectionManager useMediaDrivenDuplication]
  -[VCConnectionManager setUseMediaDrivenDuplication:]
  -[VCConnectionManager setConnectionSelectionVersionWithLocalFrameworkVersion:remoteFrameworkVersion:]
  -[VCConnectionManager checkAndUpdatePrimaryConnection]
  -[VCConnectionManager isBetterPrimaryConnectionAvailable]
  -[VCConnectionManager setDuplicationCallback:withContext:]
  -[VCConnectionManager setConnectionPause:isLocalConnection:]
  -[VCConnectionManager setiRATDuplicationEnabled:]
  -[VCConnectionManager isDuplicationEnabled]
  -[VCConnectionManager setDuplicationEnabled:]
  -[VCConnectionManager addTelemetryForConnection:dictionary:]
  -[VCConnectionManager addDuplicationSelectionLogicTelemetryForConnection:suggestedLinkTypeCombo:payload:]
  -[VCConnectionManager addLinkProbingTelemetry:]
  -[VCConnectionManager setDuplicationEnabledInternal:]
  -[VCConnectionManager reasonStringWithDuplicationReason:]
  -[VCConnectionManager setWRMUpdateCallback:requestNotificationCallback:withContext:completionHandler:]
  -[VCConnectionManager setPreWarmState:]
  -[VCConnectionManager setRemotePreWarmStateEnabled:]
  -[VCConnectionManager setIsRemoteMediaQualityDegraded:]
  -[VCConnectionManager alertStateUpdated:isLocal:]
  -[VCConnectionManager resetMediaByteCounters]
  -[VCConnectionManager processDuplicationStateUpdateEvent:didLocalHandover:timeDurationMs:linkType:wrmCallbackScenario:]
  -[VCConnectionManager isDuplicationAllowed]
  -[VCConnectionManager setDuplicationDownlinkCellBitrateCap:currentBitrate:]
  -[VCConnectionManager checkForCachedWRMNotification]
  -[VCConnectionManager setWRMNotification:]
  -[VCConnectionManager processWRMNotification:]
  -[VCConnectionManager processWRMCoexMetrics:]
  -[VCConnectionManager requestWRMNotification]
  -[VCConnectionManager getNumberOfConnectionsInternal]
  -[VCConnectionManager isInterfaceOnCellularForActiveConnectionWithQuality:forLocalInterface:]
  -[VCConnectionManager getSentBytes:receivedBytes:]
  -[VCConnectionManager getConnectionTypeForActiveConnectionWithQuality:forLocalInterface:]
  -[VCConnectionManager getCellularTechForActiveConnectionWithQuality:forLocalInterface:]
  -[VCConnectionManager getCellularMTUForActiveConnectionWithQuality:]
  -[VCConnectionManager isConnectedOnIPv6ForActiveConnectionWithQuality:]
  -[VCConnectionManager isConnectedOnRelayForActiveConnectionWithQuality:]
  -[VCConnectionManager updateTransmittedPacketsAndBytesWithSourceDestinationInfo:bytesSent:isMediaData:shouldCountPacket:numOfStreamId:isPriorityIncluded:]
  -[VCConnectionManager updateReceivedPacketsAndBytesWithSourceDestinationInfo:bytesReceived:isMediaData:shouldCountPacket:numOfStreamId:isPriorityIncluded:]
  -[VCConnectionManager reportActiveConnectionOneToOne:isAudioOnly:]
  -[VCConnectionManager reportFirstActiveConnectionOneToOne:remoteOSVersion:redState:isAudioOnly:]
  -[VCConnectionManager addMediaHealthStatsHistoryEntryForParticipantID:]
  -[VCConnectionManager removeMediaHealthStatsHistoryEntryForParticipantID:]
  -[VCConnectionManager duplicationStateUpdateWithEvent:]
  -[VCConnectionManager aggregateStallTimeDuration:idsParticipantID:]
  -[VCConnectionManager checkMediaQualityDegradedForParticipantID:]
  -[VCConnectionManager updateMediaHealthStats:idsParticipantID:]
  -[VCConnectionManager updateMediaDegradedHistoryWithValue:idsParticipantID:]
  -[VCConnectionManager isDuplicationAllowedForParticipantID:bucketsToSum:threshold:]
  -[VCConnectionManager updateMediaDegradedHistoryWithCurrentVideoStallDuration:idsParticipantID:]
  -[VCConnectionManager updateMediaDegradedHistoryWithCurrentAudioErasure:idsParticipantID:]
  -[VCConnectionManager updateWithRemoteMediaHealthDuplication:]
  -[VCConnectionManager resetMediaHealthStats]
  -[VCConnectionManager activeConnectionRegistry]
  -[VCConnectionManager suggestedLinkTypeCombo]
  -[VCConnectionManager configureNWConnectionMonitor:]
  -[VCConnectionManager checkpointPrimaryConnection:]
  -[VCConnectionManager primaryConnectionChanged:oldPrimaryConnection:]
  -[VCConnectionManager renewNWMonitor]
  -[VCConnectionManager setVCNWConnectionMonitorStatisticsHandler]
  -[VCConnectionManager destroyNWMonitorInternal]
  -[VCConnectionManager disableRemotePreferredInterfaceInference:]
  -[VCConnectionManager getConnectionSelectionVersionFromFrameworkVersion:]
  -[VCConnectionManager promoteSecondaryConnectionToPrimary:]
  -[VCConnectionManager isBetterConnection:asPrimary:]
  -[VCConnectionManager isOptimalConnection:asPrimary:interfaceMask:]
  -[VCConnectionManager connectionForQualityInternal:]
  -[VCConnectionManager copyConnectionForQuality:]
  -[VCConnectionManager updateWRMDuplicationForHandover]
  -[VCConnectionManager createSourceDestinationInfoListWithForceDuplication:isEndToEnd:]
  -[VCConnectionManager shouldUseServerBasedConnection:isEndToEnd:]
  -[VCConnectionManager checkWRMSuggestionDefaultValue]
  -[VCConnectionManager checklocalRATTypeOverrideDefaultValue:]
  -[VCConnectionManager checkActivelyRequestWRMRecommendation:isLocalUsingCellular:]
  -[VCConnectionManager isLocalCellularInterfaceUsed]
  -[VCConnectionManager reportConnectionUpdateWithRespCode:]
  -[VCConnectionManager reportConnectionUpdateWithResponseCode:delay:]
  -[VCConnectionManager setDefaultLinkProbingCapabilityVersionForDeviceRole:]
  -[VCConnectionManager primaryConnHealthAllowedDelay]
  -[VCConnectionManager updateReceivedExcessiveBytes:isMediaData:isIPv6:]
  -[VCConnectionManager updateTransmittedExcessiveBytes:isMediaData:isIPv6:]
  -[VCConnectionManager updateTransmittedBytes:isOnCell:isIPv6:]
  -[VCConnectionManager updateReceivedBytes:isOnCell:isIPv6:]
  -[VCConnectionManager updateCellularExcessiveBytesWithSourceDestinationInfo:bytes:isMediaData:isOutgoing:]
  -[VCConnectionManager setConnectionHealthOnControlInfo:]
  -[VCConnectionManager processConnectionHealthFromControlInfo:]
  -[VCConnectionManager useCellPrimayInterface:]
  -[VCConnectionManager updateDuplicationStateWithEventType:]
  -[VCConnectionManager reportNoPacketUpdateUsingCurrentTime:lastReceivedPacketTime:]
  -[VCConnectionManager updateConnectionStatsWithIndicatorNoPacket:]
  -[VCConnectionManager updateConnectionStatsWithIndicatorOnlyPrimaryNoPacket:]
  -[VCConnectionManager updateConnectionStatsWithIndicatorNone:]
  -[VCConnectionManager updateConnectionStatsWithIndicatorPrimaryImproved:]
  -[VCConnectionManager updateConnectionHealthWithVCStatisticsMessage:]
  -[VCConnectionManager shouldDropCurrentPrimaryConnectionWithConnectionStats:]
  -[VCConnectionManager shouldDuplicatePacket:]
  -[VCConnectionManager setActiveLinkProbingEnabled:]
  -[VCConnectionManager updateProbingResults:]
  -[VCConnectionManager areAllLinkProbingTriggersInactive]
  -[VCConnectionManager isDuplicationConnectionCandidate:]
  -[VCConnectionManager updateLinkPreferSuggestion:]
  -[VCConnectionManager applyLinkRecommendation]
  -[VCConnectionManager reportLinkSuggestion]
  -[VCConnectionManager applyLinkFlags:isCellular:]
  -[VCConnectionManager applyRemoteLinkFlags:isCellular:]
  -[VCConnectionManager reselectPrimaryConnection]
  -[VCConnectionManager updateConnectionSelectionPolicyWithPreferE2E:]
  -[VCConnectionManager setRelayServerProvider:]
  -[VCConnectionManager preferredLocalInterfaceForDuplication]
  -[VCConnectionManager setPreferredLocalInterfaceForDuplication:]
  -[VCConnectionManager preferredRemoteInterfaceForDuplication]
  -[VCConnectionManager setPreferredRemoteInterfaceForDuplication:]
  -[VCConnectionManager supportDuplication]
  -[VCConnectionManager setSupportDuplication:]
  -[VCConnectionManager setIsDuplicationAllowed:]
  -[VCConnectionManager mediaExcessiveCellularTxBytes]
  -[VCConnectionManager mediaExcessiveCellularRxBytes]
  -[VCConnectionManager signalingExcessiveCellularTxBytes]
  -[VCConnectionManager signalingExcessiveCellularRxBytes]
  -[VCConnectionManager mediaCellularTxBytes]
  -[VCConnectionManager mediaCellularRxBytes]
  -[VCConnectionManager mediaWifiTxBytes]
  -[VCConnectionManager mediaWifiRxBytes]
  -[VCConnectionManager noRemotePacketInterval]
  -[VCConnectionManager remoteNoRemotePacketInterval]
  -[VCConnectionManager statsRecorder]
  -[VCConnectionManager isPreWarmStateEnabled]
  -[VCConnectionManager remotePreWarmStateEnabled]
  -[VCConnectionManager preferRelayOverP2PEnabled]
  -[VCConnectionManager cellPrimaryInterfaceChangeEnabled]
  -[VCConnectionManager setCellPrimaryInterfaceChangeEnabled:]
  -[VCConnectionManager noRemoteDuplicationThresholdFast]
  -[VCConnectionManager setNoRemoteDuplicationThresholdFast:]
  -[VCConnectionManager lowNetworkModeEnabled]
  -[VCConnectionManager setLowNetworkModeEnabled:]
  -[VCConnectionManager duplicationEnhancementEnabled]
  -[VCConnectionManager setDuplicationEnhancementEnabled:]
  -[VCConnectionManager iRATDuplicationEnabled]
  -[VCConnectionManager realRATType]
  -[VCConnectionManager setRealRATType:]
  -[VCConnectionManager startConnectionHealthMonitoring]
  -[VCConnectionManager isRemoteMediaQualityDegraded]
  -[VCConnectionManager isOneToOneRemoteParticipantAdded]
  -[VCConnectionManager setIsOneToOneRemoteParticipantAdded:]
  -[VCConnectionManager budgetConsumingCellularTxBytes]
  -[VCConnectionManager budgetConsumingCellularRxBytes]
  -[VCConnectionManager optIntoExistingSubscribedStreams]
  -[VCConnectionManager setOptIntoExistingSubscribedStreams:]


VCVTPWrapper : NSObject
  // class methods
  +[VCVTPWrapper targetQueue]
  +[VCVTPWrapper startVTP]
  +[VCVTPWrapper stopVTP]
  +[VCVTPWrapper connectionContext]


VCRecommendedNetworkSettings : NSObject
 @property  unsigned int targetBitrateCap

  // instance methods
  -[VCRecommendedNetworkSettings dealloc]
  -[VCRecommendedNetworkSettings targetBitrateCap]
  -[VCRecommendedNetworkSettings initWithTargetBitrateCap:]


VCNetworkFeedbackController : NSObject <WCMClientDelegate, WRMClientDelegate>
 @property  unsigned int recommendedTargetBitrateCap
 @property  unsigned int clientTargetBitrate
 @property  unsigned int clientTargetBitrateCap
 @property  unsigned int downlinkTargetBitrate
 @property  unsigned int downlinkTargetCellBitrateCap
 @property  ^{tagWRMMetricsInfo=B^{tagHANDLE}IIIIIIIIIIIIQQQi^?{?=^v^?^?}{_opaque_pthread_mutex_t=q[56c]}IIIIIIIIIQIIIIII} wrmInfo
 @property  ^{?=^v^?^?} wrmContext
 @property  unsigned int callID
 @property  BOOL isLocalCellular
 @property  BOOL isVideoPaused
 @property  BOOL shouldSendFeedbackControllerReport

  // instance methods
  -[VCNetworkFeedbackController dealloc]
  -[VCNetworkFeedbackController stop]
  -[VCNetworkFeedbackController strongDelegate]
  -[VCNetworkFeedbackController callID]
  -[VCNetworkFeedbackController setCallID:]
  -[VCNetworkFeedbackController isVideoPaused]
  -[VCNetworkFeedbackController setIsVideoPaused:]
  -[VCNetworkFeedbackController setPreWarmState:]
  -[VCNetworkFeedbackController setWRMNotification:]
  -[VCNetworkFeedbackController requestWRMNotification]
  -[VCNetworkFeedbackController wcmSetCallConfig:interferenceLevel:]
  -[VCNetworkFeedbackController wcmGetCallConfig:targetBitrate:]
  -[VCNetworkFeedbackController setWRMMetricConfig:]
  -[VCNetworkFeedbackController setWRMCoexMetrics:]
  -[VCNetworkFeedbackController initWithDelegate:connectionManager:]
  -[VCNetworkFeedbackController initializeWRMInfo]
  -[VCNetworkFeedbackController startWithMetricsConfig:]
  -[VCNetworkFeedbackController recommendedTargetBitrateCap]
  -[VCNetworkFeedbackController updateMetricsConfig:]
  -[VCNetworkFeedbackController setRSSIThresholdEnabled:]
  -[VCNetworkFeedbackController cleanupWRMData]
  -[VCNetworkFeedbackController sendFeedbackControllerReport:]
  -[VCNetworkFeedbackController sendStatusUpdate:]
  -[VCNetworkFeedbackController reportImmediateWRMMetric:value:]
  -[VCNetworkFeedbackController reportWRMMetrics:]
  -[VCNetworkFeedbackController setupWCMClient]
  -[VCNetworkFeedbackController cleanupWCMClient]
  -[VCNetworkFeedbackController setupWRMClientWithMetricsConfig:]
  -[VCNetworkFeedbackController cleanupWRMClient]
  -[VCNetworkFeedbackController setDownlinkTargetBitrate:]
  -[VCNetworkFeedbackController setDownlinkTargetCellBitrateCap:]
  -[VCNetworkFeedbackController setIsLocalCellular:]
  -[VCNetworkFeedbackController clientTargetBitrate]
  -[VCNetworkFeedbackController setClientTargetBitrate:]
  -[VCNetworkFeedbackController clientTargetBitrateCap]
  -[VCNetworkFeedbackController setClientTargetBitrateCap:]
  -[VCNetworkFeedbackController downlinkTargetBitrate]
  -[VCNetworkFeedbackController downlinkTargetCellBitrateCap]
  -[VCNetworkFeedbackController wrmInfo]
  -[VCNetworkFeedbackController wrmContext]
  -[VCNetworkFeedbackController isLocalCellular]
  -[VCNetworkFeedbackController shouldSendFeedbackControllerReport]
  -[VCNetworkFeedbackController setShouldSendFeedbackControllerReport:]


VCImageQueue : NSObject <VCStreamOutputSource>
 @property  unsigned int frameRate
 @property  BOOL imageQueueProtected
 @property  long long streamToken
 @property  BOOL usingRemoteQueue
 @property  BOOL isLocalVideo
 @property  BOOL lowLatencyEnabled
 @property  <VCStreamSychronizationDelegate> *synchronizationDelegate
 @property  VCStreamOutput *streamOutput
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCImageQueue drawingContext]

  // instance methods
  -[VCImageQueue setSynchronizationDelegate:]
  -[VCImageQueue frameCount]
  -[VCImageQueue pause]
  -[VCImageQueue dealloc]
  -[VCImageQueue frameRate]
  -[VCImageQueue stop]
  -[VCImageQueue synchronizationDelegate]
  -[VCImageQueue start]
  -[VCImageQueue setFrameRate:]
  -[VCImageQueue enqueueSampleBuffer:]
  -[VCImageQueue streamToken]
  -[VCImageQueue setStreamToken:]
  -[VCImageQueue initWithFrameRate:]
  -[VCImageQueue streamOutput]
  -[VCImageQueue setStreamOutput:]
  -[VCImageQueue cleanupStreamOutput]
  -[VCImageQueue enqueueAttributes:]
  -[VCImageQueue initWithFrameRate:imageQueueProtected:]
  -[VCImageQueue resetSlotForCALayerHostModeSwitch]
  -[VCImageQueue configureCALayerWithRect:name:]
  -[VCImageQueue createCAContextWithSize:]
  -[VCImageQueue cleanupCAContextAndCALayer]
  -[VCImageQueue releaseCAContext]
  -[VCImageQueue createAllocators]
  -[VCImageQueue releaseAllocators]
  -[VCImageQueue enqueueStreamOutputAttributes:]
  -[VCImageQueue enqueueStreamOutputFrame:atTime:]
  -[VCImageQueue setVideoDestination:]
  -[VCImageQueue getQueueRepresentation:]
  -[VCImageQueue createAndCopyPerformanceDictionary:]
  -[VCImageQueue createAndCopyLatencyStatsDictionary:]
  -[VCImageQueue drawOverlayMessageForPixelBuffer:]
  -[VCImageQueue enqueuePixelBuffer:atTime:]
  -[VCImageQueue enqueueFrame:atTime:]
  -[VCImageQueue resetFrameCount]
  -[VCImageQueue averageFrameRate]
  -[VCImageQueue removeExpiredFrameCounts:]
  -[VCImageQueue updateFrameCountHistory]
  -[VCImageQueue emitFrameEnqueuedSignposts:withTime:forFrame:]
  -[VCImageQueue imageQueueProtected]
  -[VCImageQueue setImageQueueProtected:]
  -[VCImageQueue isLowLatencyEnabled]
  -[VCImageQueue setLowLatencyEnabled:]
  -[VCImageQueue usingRemoteQueue]
  -[VCImageQueue isLocalVideo]
  -[VCImageQueue setIsLocalVideo:]


VCAudioClient : NSObject <VCAudioSessionDelegate>
 @property  AVAudioDevice *inputDevice
 @property  AVAudioDevice *outputDevice
 @property  int processId
 @property  BOOL isMuted
 @property  VCAudioIO *audioIO
 @property  BOOL isMutedTalkerNotificationRegistered
 @property  BOOL mixingVoiceWithMediaEnabled
 @property  BOOL followSystemInput
 @property  BOOL followSystemOutput
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioClient unlock]
  -[VCAudioClient processId]
  -[VCAudioClient dealloc]
  -[VCAudioClient isMuted]
  -[VCAudioClient outputDevice]
  -[VCAudioClient startWithError:]
  -[VCAudioClient lock]
  -[VCAudioClient setMixingVoiceWithMediaEnabled:]
  -[VCAudioClient stopWithError:]
  -[VCAudioClient setAudioSessionProperties:]
  -[VCAudioClient setOutputDevice:]
  -[VCAudioClient didServerDie]
  -[VCAudioClient isMixingVoiceWithMediaEnabled]
  -[VCAudioClient didSuspendAudioIO:]
  -[VCAudioClient didResumeAudioIO:]
  -[VCAudioClient audioIO]
  -[VCAudioClient setAudioIO:]
  -[VCAudioClient cleanupSpatialAudio]
  -[VCAudioClient initWithProcessId:]
  -[VCAudioClient muteWithError:]
  -[VCAudioClient unmuteWithError:]
  -[VCAudioClient setFollowSystemInput:]
  -[VCAudioClient setFollowSystemOutput:]
  -[VCAudioClient resetAudioSessionOutputPortOverride:]
  -[VCAudioClient startAudioSessionWithError:]
  -[VCAudioClient stopAudioSessionWithError:]
  -[VCAudioClient setupSpatialAudio]
  -[VCAudioClient setupAudioIO]
  -[VCAudioClient cleanupAudioIO]
  -[VCAudioClient startAudioIOWithCompletionHandler:]
  -[VCAudioClient stopAudioIOWithCompletionHandler:]
  -[VCAudioClient getCurrentAudioDeviceWithType:]
  -[VCAudioClient setCurrentAudioDevice:type:]
  -[VCAudioClient inputDevice]
  -[VCAudioClient setInputDevice:]
  -[VCAudioClient isMutedTalkerNotificationRegistered]
  -[VCAudioClient setIsMutedTalkerNotificationRegistered:]
  -[VCAudioClient isFollowSystemInputEnabled]
  -[VCAudioClient isFollowSystemOutputEnabled]


VCAudioStreamSendGroup : VCMediaStreamSendGroup <VCRedundancyControllerDelegate, VCAudioStreamGroup>
 @property  BOOL isVADFilteringEnabled
 @property  BOOL isCurrentDTXEnabled
 @property  AVCBasebandCongestionDetector *basebandCongestionDetector
 @property  unsigned int cellularUniqueTag
 @property  BOOL isMuted
 @property  int deviceRole
 @property  BOOL isPowerSpectrumEnabled

  // instance methods
  -[VCAudioStreamSendGroup initWithConfig:]
  -[VCAudioStreamSendGroup stopCapture]
  -[VCAudioStreamSendGroup dealloc]
  -[VCAudioStreamSendGroup isMuted]
  -[VCAudioStreamSendGroup setMuted:]
  -[VCAudioStreamSendGroup startCapture]
  -[VCAudioStreamSendGroup didStop]
  -[VCAudioStreamSendGroup basebandCongestionDetector]
  -[VCAudioStreamSendGroup setBasebandCongestionDetector:]
  -[VCAudioStreamSendGroup configureStreams]
  -[VCAudioStreamSendGroup setReportingAgent:]
  -[VCAudioStreamSendGroup setDeviceRole:operatingMode:]
  -[VCAudioStreamSendGroup deviceRole]
  -[VCAudioStreamSendGroup isPowerSpectrumEnabled]
  -[VCAudioStreamSendGroup setPowerSpectrumEnabled:]
  -[VCAudioStreamSendGroup collectAndLogChannelMetrics:]
  -[VCAudioStreamSendGroup willStart]
  -[VCAudioStreamSendGroup addSyncDestination:]
  -[VCAudioStreamSendGroup removeSyncDestination:]
  -[VCAudioStreamSendGroup setMuteOnStreams]
  -[VCAudioStreamSendGroup updateActiveMediaStreamIDs:withTargetBitrate:mediaBitrates:]
  -[VCAudioStreamSendGroup activeStreamKeys]
  -[VCAudioStreamSendGroup redundancyController:redundancyVectorDidChange:]
  -[VCAudioStreamSendGroup redundancyController:redundancyPercentageDidChange:]
  -[VCAudioStreamSendGroup isCurrentDTXEnabled]
  -[VCAudioStreamSendGroup redundancyController:redundancyIntervalDidChange:]
  -[VCAudioStreamSendGroup setPeerSubscribedStreams:]
  -[VCAudioStreamSendGroup setVADFilteringEnabled:]
  -[VCAudioStreamSendGroup updateActiveVoiceOnly:]
  -[VCAudioStreamSendGroup setCurrentDTXEnabled:]
  -[VCAudioStreamSendGroup createIOEventQueues]
  -[VCAudioStreamSendGroup cleanupIOEventQueues]
  -[VCAudioStreamSendGroup flushAudioEventQueue]
  -[VCAudioStreamSendGroup flushAudioRedundancyEventQueue]
  -[VCAudioStreamSendGroup startVoiceActivityDetection]
  -[VCAudioStreamSendGroup stopVoiceActivityDetection]
  -[VCAudioStreamSendGroup startDynamicDucker]
  -[VCAudioStreamSendGroup stopDynamicDucker]
  -[VCAudioStreamSendGroup setupRedundancyController]
  -[VCAudioStreamSendGroup checkStreamsForAudioOptIn:]
  -[VCAudioStreamSendGroup isVADFilteringEnabled]
  -[VCAudioStreamSendGroup cellularUniqueTag]
  -[VCAudioStreamSendGroup setCellularUniqueTag:]


VCMediaNegotiatorResultsAudio : NSObject
 @property  unsigned int remoteSSRC
 @property  unsigned int audioUnitModel
 @property  BOOL allowRecording
 @property  BOOL allowSwitching
 @property  int primaryPayload
 @property  int dtxPayload
 @property  int redPayload
 @property  NSArray *secondaryPayloads
 @property  BOOL useSBR

  // instance methods
  -[VCMediaNegotiatorResultsAudio dealloc]
  -[VCMediaNegotiatorResultsAudio init]
  -[VCMediaNegotiatorResultsAudio setRemoteSSRC:]
  -[VCMediaNegotiatorResultsAudio remoteSSRC]
  -[VCMediaNegotiatorResultsAudio setAudioUnitModel:]
  -[VCMediaNegotiatorResultsAudio audioUnitModel]
  -[VCMediaNegotiatorResultsAudio useSBR]
  -[VCMediaNegotiatorResultsAudio setUseSBR:]
  -[VCMediaNegotiatorResultsAudio secondaryPayloads]
  -[VCMediaNegotiatorResultsAudio addSecondaryPayload:]
  -[VCMediaNegotiatorResultsAudio primaryPayload]
  -[VCMediaNegotiatorResultsAudio setPrimaryPayload:]
  -[VCMediaNegotiatorResultsAudio dtxPayload]
  -[VCMediaNegotiatorResultsAudio setDtxPayload:]
  -[VCMediaNegotiatorResultsAudio redPayload]
  -[VCMediaNegotiatorResultsAudio setRedPayload:]
  -[VCMediaNegotiatorResultsAudio allowRecording]
  -[VCMediaNegotiatorResultsAudio setAllowRecording:]
  -[VCMediaNegotiatorResultsAudio allowSwitching]
  -[VCMediaNegotiatorResultsAudio setAllowSwitching:]


VideoUtil : NSObject
  // class methods
  +[VideoUtil convertPixelBuffer:toImageType:withAssetIdentifier:cameraStatusBits:allowTimeMetaData:]
  +[VideoUtil sizeForVideoResolution:]
  +[VideoUtil getBestCaptureSizeForEncodingSize:]
  +[VideoUtil videoResolutionForWidth:height:]
  +[VideoUtil adjustFaceMetadataForPixelBuffer:originalWidth:originalHeight:]
  +[VideoUtil adjustFaceBounds:fromOriginalBufferSize:toCroppedBufferSize:]
  +[VideoUtil setupBufferPool:width:height:]
  +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:]
  +[VideoUtil typeIdentifierForImageType:]
  +[VideoUtil videoCodecForPayload:]
  +[VideoUtil computeVisibleAspectRatioWithRemoteScreenAspectRatio:remoteExpectedAspectRatio:encodeWidth:encodeHeight:]
  +[VideoUtil attachMetadata:toCVPixelBuffer:]


VCVideoRuleCollectionsScreenSecondary : VCVideoRuleCollections
  // class methods
  +[VCVideoRuleCollectionsScreenSecondary sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsScreenSecondary tilesPerFrame:]


VCBasebandMetrics : NSObject
 @property  unsigned int targetBitrate
 @property  BOOL isTargetBitrateStabilized
 @property  VCRateControlMediaController *mediaController

  // instance methods
  -[VCBasebandMetrics dealloc]
  -[VCBasebandMetrics init]
  -[VCBasebandMetrics mediaController]
  -[VCBasebandMetrics setMediaController:]
  -[VCBasebandMetrics targetBitrate]
  -[VCBasebandMetrics setTargetBitrate:]
  -[VCBasebandMetrics enableBasebandLogDump:]
  -[VCBasebandMetrics getBasebandMetricsWithNotification:]
  -[VCBasebandMetrics addInfoListWithNotification:]
  -[VCBasebandMetrics calculateBitratesAndDelaysWithTotalQueueDepth:]
  -[VCBasebandMetrics updateTotalQueueDepth:]
  -[VCBasebandMetrics normalizeBDCD:]
  -[VCBasebandMetrics resetBDCDList]
  -[VCBasebandMetrics resetBBNoteHistoryList]
  -[VCBasebandMetrics addBDCDListWithNotificationArrivalTime:bdcd:queuingDelay:]
  -[VCBasebandMetrics setIsTargetBitrateStabilized:]
  -[VCBasebandMetrics isTargetBitrateStabilized]


AVCBasebandCongestionDetector : NSObject
 @property  unsigned int radioAccessTechnology
 @property  unsigned int mode
 @property  unsigned int targetBitrate
 @property  BOOL isTargetBitrateStabilized
 @property  AVCStatisticsCollector *statisticsCollector
 @property  VCRateControlMediaController *mediaController
 @property  unsigned int basebandTxBitrate
 @property  unsigned int basebandAverageBitrate
 @property  unsigned int basebandQueueDepth
 @property  double basebandExpectedQueuingDelay

  // instance methods
  -[AVCBasebandCongestionDetector radioAccessTechnology]
  -[AVCBasebandCongestionDetector dealloc]
  -[AVCBasebandCongestionDetector mode]
  -[AVCBasebandCongestionDetector setMode:]
  -[AVCBasebandCongestionDetector init]
  -[AVCBasebandCongestionDetector mediaController]
  -[AVCBasebandCongestionDetector setRadioAccessTechnology:]
  -[AVCBasebandCongestionDetector statisticsCollector]
  -[AVCBasebandCongestionDetector setStatisticsCollector:]
  -[AVCBasebandCongestionDetector setMediaController:]
  -[AVCBasebandCongestionDetector targetBitrate]
  -[AVCBasebandCongestionDetector setTargetBitrate:]
  -[AVCBasebandCongestionDetector enableBasebandLogDump:]
  -[AVCBasebandCongestionDetector setIsTargetBitrateStabilized:]
  -[AVCBasebandCongestionDetector isTargetBitrateStabilized]
  -[AVCBasebandCongestionDetector processBasebandNotification:metaData:error:]
  -[AVCBasebandCongestionDetector processBasebandNotification:arrivalTime:error:]
  -[AVCBasebandCongestionDetector isRadioAccessTechnologyOnCellular:]
  -[AVCBasebandCongestionDetector processBasebandAck:]
  -[AVCBasebandCongestionDetector printFlushAckToBasebandDump:transactionID:packetDropped:sequenceNumberArray:]
  -[AVCBasebandCongestionDetector basebandTxBitrate]
  -[AVCBasebandCongestionDetector basebandAverageBitrate]
  -[AVCBasebandCongestionDetector basebandQueueDepth]
  -[AVCBasebandCongestionDetector basebandExpectedQueuingDelay]


VCSessionBandwidthAllocationTableEntry : NSObject
 @property  <VCSessionDownlinkBandwidthAllocatorClient> *client
 @property  unsigned int minNetworkBitrate
 @property  unsigned int maxNetworkBitrate
 @property  unsigned int maxMediaBitrate
 @property  unsigned int qualityIndex
 @property  BOOL isLowestQuality
 @property  unsigned char type
 @property  unsigned int streamID
 @property  unsigned int actualNetworkBitrate
 @property  unsigned int repairStreamID
 @property  unsigned int repairMaxNetworkBitrate
 @property  BOOL hasRepairStreamID
 @property  BOOL subscribedTo
 @property  BOOL startOnDemand
 @property  NSNumber *streamToken
 @property  unsigned int streamGroupID
 @property  unsigned int encoderGroupID

  // class methods
  +[VCSessionBandwidthAllocationTableEntry entryTypeForMediaType:]
  +[VCSessionBandwidthAllocationTableEntry compareAudioEntry:audioEntry:]
  +[VCSessionBandwidthAllocationTableEntry compareVideoEntry:videoEntry:]
  +[VCSessionBandwidthAllocationTableEntry compareAudioEntry:videoEntry:]

  // instance methods
  -[VCSessionBandwidthAllocationTableEntry type]
  -[VCSessionBandwidthAllocationTableEntry compare:]
  -[VCSessionBandwidthAllocationTableEntry streamID]
  -[VCSessionBandwidthAllocationTableEntry dealloc]
  -[VCSessionBandwidthAllocationTableEntry client]
  -[VCSessionBandwidthAllocationTableEntry streamToken]
  -[VCSessionBandwidthAllocationTableEntry maxNetworkBitrate]
  -[VCSessionBandwidthAllocationTableEntry qualityIndex]
  -[VCSessionBandwidthAllocationTableEntry maxMediaBitrate]
  -[VCSessionBandwidthAllocationTableEntry streamGroupID]
  -[VCSessionBandwidthAllocationTableEntry initWithClient:type:streamToken:networkBitrate:mediaBitrate:qualityIndex:streamID:streamGroupID:]
  -[VCSessionBandwidthAllocationTableEntry initWithClient:type:streamToken:minNetworkBitrate:maxNetworkBitrate:mediaBitrate:qualityIndex:streamID:hasRepairStreamID:repairStreamID:repairMaxNetworkBitrate:subscribedTo:startOnDemand:streamGroupID:encoderGroupID:]
  -[VCSessionBandwidthAllocationTableEntry minNetworkBitrate]
  -[VCSessionBandwidthAllocationTableEntry isLowestQuality]
  -[VCSessionBandwidthAllocationTableEntry setIsLowestQuality:]
  -[VCSessionBandwidthAllocationTableEntry actualNetworkBitrate]
  -[VCSessionBandwidthAllocationTableEntry setActualNetworkBitrate:]
  -[VCSessionBandwidthAllocationTableEntry repairStreamID]
  -[VCSessionBandwidthAllocationTableEntry repairMaxNetworkBitrate]
  -[VCSessionBandwidthAllocationTableEntry hasRepairStreamID]
  -[VCSessionBandwidthAllocationTableEntry isSubscribedTo]
  -[VCSessionBandwidthAllocationTableEntry setSubscribedTo:]
  -[VCSessionBandwidthAllocationTableEntry isStartOnDemand]
  -[VCSessionBandwidthAllocationTableEntry encoderGroupID]


VCCCMessage : PBCodable <NSCopying>
 @property  unsigned long transactionID
 @property  NSString *topic
 @property  BOOL hasPayload
 @property  NSData *payload

  // instance methods
  -[VCCCMessage setPayload:]
  -[VCCCMessage copyTo:]
  -[VCCCMessage transactionID]
  -[VCCCMessage topic]
  -[VCCCMessage payload]
  -[VCCCMessage dealloc]
  -[VCCCMessage mergeFrom:]
  -[VCCCMessage setTopic:]
  -[VCCCMessage hasPayload]
  -[VCCCMessage dictionaryRepresentation]
  -[VCCCMessage copyWithZone:]
  -[VCCCMessage readFrom:]
  -[VCCCMessage setTransactionID:]
  -[VCCCMessage writeTo:]
  -[VCCCMessage isEqual:]


TCPTunnelClient : NSObject <VideoConferenceRealTimeChannel>
 @property  @? receiveHandler
 @property  @? allocationResponseHandler
 @property  @? terminationHandler
 @property  @? bindingResponseHandler
 @property  @? destroyHandler
 @property  NSString *participantID

  // instance methods
  -[TCPTunnelClient terminationHandler]
  -[TCPTunnelClient resetConnection]
  -[TCPTunnelClient dealloc]
  -[TCPTunnelClient setTerminationHandler:]
  -[TCPTunnelClient connectionType]
  -[TCPTunnelClient participantID]
  -[TCPTunnelClient setParticipantID:]
  -[TCPTunnelClient receiveHandler]
  -[TCPTunnelClient setReceiveHandler:]
  -[TCPTunnelClient vcArg:sendRealTimeData:toParticipantID:]
  -[TCPTunnelClient reportErrorAndTerminate:detail:returnCode:description:reason:]
  -[TCPTunnelClient destroyDispatchTimer]
  -[TCPTunnelClient createDispatchTimer:withDetailedError:]
  -[TCPTunnelClient processSocketRead]
  -[TCPTunnelClient sendTCPData:bufSize:]
  -[TCPTunnelClient processSocketWrite:]
  -[TCPTunnelClient vcArg:sendControlData:isTypeSSL:withTimeout:withDetail:]
  -[TCPTunnelClient receivedControlData:]
  -[TCPTunnelClient processSocketReadSSL]
  -[TCPTunnelClient receivedSSLConnectionData:recordType:]
  -[TCPTunnelClient initWithRelayRequestDictionary:withCallID:relayType:errorCode:]
  -[TCPTunnelClient sendAllocateMsg:]
  -[TCPTunnelClient sendChannelBindingMsgWithDict:error:]
  -[TCPTunnelClient sendRefreshMsg:error:]
  -[TCPTunnelClient unbindChannel]
  -[TCPTunnelClient closeTunnelSocket]
  -[TCPTunnelClient isTunnelSocketClosed]
  -[TCPTunnelClient allocationResponseHandler]
  -[TCPTunnelClient setAllocationResponseHandler:]
  -[TCPTunnelClient bindingResponseHandler]
  -[TCPTunnelClient setBindingResponseHandler:]
  -[TCPTunnelClient destroyHandler]
  -[TCPTunnelClient setDestroyHandler:]


TCPBufferPool : NSObject
  // instance methods
  -[TCPBufferPool dealloc]
  -[TCPBufferPool init]
  -[TCPBufferPool getBufferFromPool:]
  -[TCPBufferPool returnBufferToPool:]
  -[TCPBufferPool monitorBufferPool]


VCCallSession : NSObject <VCSecureDataChannelDelegate, VCTelephonyInterfaceDelegate, VCCaptionsReceiverDelegate, VCTransportSessionLegacyDelegate, AVCRateControllerDelegate, VCAudioIOSink, VCRedundancyControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long connectionChangeState
 @property  VCConnectionManager *connectionManager
 @property  VCCallInfo *localCallInfo
 @property  double packetLossRate5Secs
 @property  double lastDecodedFrameTime
 @property  NSString *peerCN
 @property  ^{tagVCAudioReceiver={tagVCAudioReceiverConfig=I[4{tagVCAudioReceiverStream=^{tagHANDLE}SBB^{tagVCCryptor}iB^{tagVCAudioReceiver}^v^v}]^vIiIiiB^{opaqueRTCReporting}iB^{__CFString}^{__CFString}SBBBBBiB^v^?^?^?^{tagVCJBTargetEstimatorSynchronizer}^v^vIBIiBB}^v^{opaqueVCJitterBuffer}B{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I}d{?=qiIq}^{tagVCRealTimeThread}{tagVCAudioReceiverReportingTask=^{opaqueRTCReporting}i^{tagHANDLE}}BB{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutex_t=q[56c]}{tagVCAudioDecoderList=^{tagDecoderSettings}I}I{tagVCAudioReceiverStatistics=AIIIIf}^{tagWRMMetricsInfo}^?{tagVCAudioReceiverCallbackContext=^v^?^?}^?{tagVCAudioReceiverCallbackContext=^v^?^?}I[2{_RTCPPacketList=(tagNTP=Q{?=II})C[10^{tagRTCPPACKET}]^{OpaqueCMBlockBuffer}*QI[1472C][12S]C{?=^{_RTCPPacketList}}}]dI[300{tagPacketHistoryInfo=ISIBB}]SS{_opaque_pthread_mutex_t=q[56c]}^{tagVCAudioReceiverStream}SSdBSSSBSSSIBBQB^v^?^?^?^{tagVCJBTargetEstimatorSynchronizer}{tagVCJitterBufferWRMReportingMetrics=IIIIQQII}^vBdiddId^{tagVCAudioIssueDetector}iiIi} audioReceiver
 @property  BOOL isCurrentPayloadTypeValid
 @property  BOOL isCaller
 @property  NSString *sessionID
 @property  BOOL isStarted
 @property  VCImageAttributeRules *imageAttributeRules
 @property  BOOL shouldSendAudio
 @property  double roundTripTime
 @property  BOOL useRateControl
 @property  BOOL isRTCPFBEnabled
 @property  double packetLossRate
 @property  float packetLateAndMissingRatio
 @property  double networkQuality
 @property  double networkConditionsTimeoutInSeconds
 @property  int signalStrengthBars
 @property  int signalStrengthDisplayBars
 @property  int signalStrengthMaxDisplayBars
 @property  unsigned int lastSentAudioSampleTime
 @property  int natType
 @property  BOOL requiresWifi
 @property  BOOL useCompressedConnectionData
 @property  NSObject<VCCallSessionDelegate> *delegate
 @property  NSObject<VCAudioCaptionsDelegate> *captionsDelegate
 @property  ^{tagHANDLE=i} rtpHandle
 @property  int numBufferBytesAvailable
 @property  unsigned short maxPacketLength
 @property  long long state
 @property  long long sipState
 @property  BOOL didSend200OK
 @property  long long videoPayload
 @property  long long sampleRate
 @property  BOOL isAudioRunning
 @property  BOOL isVideoRunning
 @property  BOOL videoIsPaused
 @property  BOOL audioIsPaused
 @property  BOOL isGKVoiceChat
 @property  BOOL isWaitingForICEResult
 @property  BOOL receivedSIPInvite
 @property  ^{tagHANDLE=i} hMediaQueue
 @property  ^{tagHANDLE=i} hAFRC
 @property  GKRingBuffer *ringBuf
 @property  unsigned int lastReceived
 @property  int bundledPackets
 @property  int packetsPerBundle
 @property  int preferredAudioCodec
 @property  BOOL useControlByte
 @property  BOOL useUEP
 @property  unsigned char inputMeter
 @property  int bandwidthUpstream
 @property  int bandwidthDownstream
 @property  NSArray *mutedPeers
 @property  NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate
 @property  BOOL shouldTimeoutPackets
 @property  NSData *srtpKeyBytes
 @property  VideoAttributes *remoteVideoAttributes
 @property  unsigned int remoteFrameWidth
 @property  unsigned int remoteFrameHeight
 @property  int operatingMode
 @property  BOOL isSKEOptimizationEnabled
 @property  BOOL isRemoteMediaStalled
 @property  VCCapabilities *capabilities
 @property  int deviceRole
 @property  NSString *peerReportingID
 @property  NSNumber *basebandCodecSampleRate
 @property  NSString *basebandCodecType
 @property  int audioTierNetworkBitrate
 @property  int audioTierAudioCodecBitrate
 @property  int audioTierPacketsPerBundle
 @property  int audioTierRedNumPayloads
 @property  int audioTierPayload
 @property  NSDictionary *dtxMetrics
 @property  ^{opaqueRTCReporting=} reportingAgent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCCallSession keyPathsForValuesAffectingNetworkQuality]
  +[VCCallSession setRxPayloadList:withPayloadTypes:]
  +[VCCallSession setRxPayloadList:withPayloadTypes:isRedEnabled:]
  +[VCCallSession getDecodePayloadTypes:secondaryPayloadTypes:]
  +[VCCallSession stopSecureControlChannel:]

  // instance methods
  -[VCCallSession unlock]
  -[VCCallSession resetState]
  -[VCCallSession cancel:]
  -[VCCallSession setSignalStrengthBars:]
  -[VCCallSession isStarted]
  -[VCCallSession setDelegate:]
  -[VCCallSession sessionID]
  -[VCCallSession delegate]
  -[VCCallSession state]
  -[VCCallSession dealloc]
  -[VCCallSession sampleRate]
  -[VCCallSession capabilities]
  -[VCCallSession setCapabilities:]
  -[VCCallSession signalStrengthBars]
  -[VCCallSession lock]
  -[VCCallSession setSessionID:]
  -[VCCallSession connectionManager]
  -[VCCallSession init]
  -[VCCallSession setState:]
  -[VCCallSession callID]
  -[VCCallSession setSampleRate:]
  -[VCCallSession networkQuality]
  -[VCCallSession operatingMode]
  -[VCCallSession setOperatingMode:]
  -[VCCallSession packetLossRate]
  -[VCCallSession localParticipantID]
  -[VCCallSession remoteParticipantID]
  -[VCCallSession callMetadata]
  -[VCCallSession roundTripTime]
  -[VCCallSession setRoundTripTime:]
  -[VCCallSession remoteVideoAttributes]
  -[VCCallSession isGKVoiceChat]
  -[VCCallSession setIsGKVoiceChat:]
  -[VCCallSession learntBitrateForSegment:defaultValue:]
  -[VCCallSession reportingAgent]
  -[VCCallSession audioIsPaused]
  -[VCCallSession sendARPLData:toCallID:]
  -[VCCallSession requiresWifi]
  -[VCCallSession setRequiresWifi:]
  -[VCCallSession processRemoteIPChange:callID:]
  -[VCCallSession natType]
  -[VCCallSession videoPayload]
  -[VCCallSession setVideoPayload:]
  -[VCCallSession mediaControlInfoFECFeedbackVersion]
  -[VCCallSession triggerInterfaceChange]
  -[VCCallSession deviceRole]
  -[VCCallSession captionsDelegate]
  -[VCCallSession pushAudioSamples:]
  -[VCCallSession gatherRealtimeStats:]
  -[VCCallSession redundancyController:redundancyVectorDidChange:]
  -[VCCallSession telephonyInterface:vocoderInfoChangedToType:sampleRate:]
  -[VCCallSession startAudioWithCompletionHandler:]
  -[VCCallSession stopAudioWithCompletionHandler:]
  -[VCCallSession addAudioPayload:]
  -[VCCallSession redundancyController:redundancyPercentageDidChange:]
  -[VCCallSession setDeviceRole:]
  -[VCCallSession numBufferBytesAvailable]
  -[VCCallSession lastSentAudioSampleTime]
  -[VCCallSession preferredAudioCodec]
  -[VCCallSession audioRTPID]
  -[VCCallSession videoRTPID]
  -[VCCallSession basebandCodecType]
  -[VCCallSession basebandCodecSampleRate]
  -[VCCallSession isCaller]
  -[VCCallSession setBasebandCodecSampleRate:]
  -[VCCallSession setPreferredAudioCodec:]
  -[VCCallSession redundancyController:redundancyIntervalDidChange:]
  -[VCCallSession handleCellularMTUChanged:]
  -[VCCallSession rtpHandle]
  -[VCCallSession cleanUpDisplayLink]
  -[VCCallSession setRemoteVideoAttributes:]
  -[VCCallSession setPreWarmState:]
  -[VCCallSession setWRMNotification:]
  -[VCCallSession requestWRMNotification]
  -[VCCallSession wcmSetCallConfig:interferenceLevel:]
  -[VCCallSession wcmGetCallConfig:targetBitrate:]
  -[VCCallSession setWRMMetricConfig:]
  -[VCCallSession setWRMCoexMetrics:]
  -[VCCallSession reportImmediateWRMMetric:value:]
  -[VCCallSession reportWRMMetrics:]
  -[VCCallSession setupWCMClient]
  -[VCCallSession cleanupWCMClient]
  -[VCCallSession cleanupWRMClient]
  -[VCCallSession startAudioIOWithCompletionHandler:]
  -[VCCallSession computeVisibleAspectRatioWithRemoteScreenAspectRatio:remoteExpectedAspectRatio:encodeWidth:encodeHeight:]
  -[VCCallSession sipConnectThreadProc:]
  -[VCCallSession initWithDeviceRole:transportType:isGKVoiceChat:reportingHierarchyToken:]
  -[VCCallSession isCurrentPayloadTypeValid]
  -[VCCallSession useCompressedConnectionData]
  -[VCCallSession setUseCompressedConnectionData:]
  -[VCCallSession configureRateController]
  -[VCCallSession startAWDStats]
  -[VCCallSession videoIsPaused]
  -[VCCallSession setUseRateControl:]
  -[VCCallSession updateVideoQualityStatusWithTime:isRemote:]
  -[VCCallSession isBetterForSIPInviteWithSourceDestinationInfo:thanSession:]
  -[VCCallSession evaluateEnableRRx:]
  -[VCCallSession updateMaxPktLength]
  -[VCCallSession reportHandoverResultsWithDictionary:localBitrateCap:remoteBitrateCap:]
  -[VCCallSession handleCellTechChange:]
  -[VCCallSession thermalLevelDidChange:]
  -[VCCallSession remoteCellTechStateUpdate:maxRemoteBitrate:]
  -[VCCallSession getFeatureListStringForPayload:]
  -[VCCallSession applyFeatureListStringForPayload:]
  -[VCCallSession chooseVideoPayloadForInterface:]
  -[VCCallSession getVideoRuleForVideoMode:interface:sessionBitrate:]
  -[VCCallSession setCurrentEncodeRule:]
  -[VCCallSession resetVideoRulesForInterface:videoReportingDictionary:]
  -[VCCallSession schedulePrimaryConnectionChange:oldConnection:]
  -[VCCallSession handlePendingPrimaryConnectionChange]
  -[VCCallSession primaryConnectionDidChangeTo:oldConnection:]
  -[VCCallSession setQualityDelegate:]
  -[VCCallSession qualityDelegate]
  -[VCCallSession getAudioTxBitrate]
  -[VCCallSession updateRemoteMediaStallState:]
  -[VCCallSession updateRemoteMediaStallStateReporting:]
  -[VCCallSession updateLastReceivedPacketWithTimestamp:packetType:]
  -[VCCallSession checkAbnormalOWRDAndResetLagReference]
  -[VCCallSession updateLastReceivedAudioTime]
  -[VCCallSession updateLastReceivedPacket:packetType:]
  -[VCCallSession isSIPEnabled]
  -[VCCallSession isSecureMessagingRequired]
  -[VCCallSession isFECGeneratorEnabled]
  -[VCCallSession defaultMediaControlInfoFECFeedbackVersion]
  -[VCCallSession activeControlChannel]
  -[VCCallSession timeoutUnfinishedConnection]
  -[VCCallSession cancelConnectionTimeoutTimer]
  -[VCCallSession setupConnectionTimeoutTimerWithErrorCode:detailedCode:description:reason:]
  -[VCCallSession setUpFirstRemoteFrameTimer]
  -[VCCallSession cancelFirstRemoteFrameTimer]
  -[VCCallSession isLocalOrRemoteOnCellular]
  -[VCCallSession updateVCRateControlWRMMetrics:]
  -[VCCallSession startConnectionWithParticipantID:callID:usingInviteData:isCaller:capabilities:idsSocket:destination:error:]
  -[VCCallSession handleReceivedPiggybackBlobIDS:]
  -[VCCallSession handleReceivedPiggybackBlobLegacy:]
  -[VCCallSession applyNegotiatedFaceTimeSettings]
  -[VCCallSession setupABTesting]
  -[VCCallSession setupWRMClient]
  -[VCCallSession sendWRMStatusUpdate:]
  -[VCCallSession disconnect:didRemoteCancel:]
  -[VCCallSession newMediaNegotiatorAudioConfigurationWithAllowAudioSwitching:useSBR:aacBlockSize:]
  -[VCCallSession newMediaBlobWithRemoteMediaBlob:localCallID:isLowBitrateCodecPreferred:]
  -[VCCallSession reportOperatingMode]
  -[VCCallSession isLowBitrateCodecPreferred:]
  -[VCCallSession inviteDataForParticipantID:callID:remoteInviteData:nonCellularCandidateTimeout:error:]
  -[VCCallSession addLocalCallInfoToInviteDictionary:]
  -[VCCallSession setRemoteCallInfoFromInviteDictionary:]
  -[VCCallSession setShouldSendAudio:]
  -[VCCallSession setPacketsPerBundle:]
  -[VCCallSession packetsPerBundle]
  -[VCCallSession bundledPackets]
  -[VCCallSession setInputMeter:]
  -[VCCallSession inputMeter]
  -[VCCallSession isCallOngoing]
  -[VCCallSession setSuspendAudio]
  -[VCCallSession setResumeAudio]
  -[VCCallSession setPauseAudio:force:error:]
  -[VCCallSession setPauseAudio:error:]
  -[VCCallSession setSuspendVideo]
  -[VCCallSession setResumeVideo]
  -[VCCallSession setPauseVideo:force:error:]
  -[VCCallSession setPauseVideo:error:]
  -[VCCallSession stillWantsToRelay]
  -[VCCallSession processRelayRequestResponseDict:didOriginateRequest:]
  -[VCCallSession processRelayUpdateDict:didOriginateRequest:]
  -[VCCallSession processCancelRelayRequest:didOriginateRequest:]
  -[VCCallSession rcvdFirstRemoteFrame]
  -[VCCallSession sendData:messageType:encrypted:]
  -[VCCallSession localCameraSwitchedFrom:to:]
  -[VCCallSession getFrontCaptureTime:backCaptureTime:]
  -[VCCallSession negotiatedReceivingFramerate]
  -[VCCallSession pullAudioSamples:rtpTimestamp:lastReceivedAudioTime:padding:paddingLength:silence:]
  -[VCCallSession isSKEOptimizationEnabled]
  -[VCCallSession primaryConnectionType]
  -[VCCallSession audioTierNetworkBitrate]
  -[VCCallSession audioTierAudioCodecBitrate]
  -[VCCallSession audioTierPacketsPerBundle]
  -[VCCallSession audioTierRedNumPayloads]
  -[VCCallSession audioTierPayload]
  -[VCCallSession dtxMetrics]
  -[VCCallSession currentAudioCap]
  -[VCCallSession setSessionConferenceState:callID:]
  -[VCCallSession setSessionConferenceVisualRectangle:callID:]
  -[VCCallSession setPeerProtocolVersion:]
  -[VCCallSession messageVCMomentsRequest:]
  -[VCCallSession reportSymptom:]
  -[VCCallSession reportingMomentsWithRequest:]
  -[VCCallSession isVideoRunning]
  -[VCCallSession handlePrimaryConnectionChanged:oldPrimaryConnection:]
  -[VCCallSession notifyDelegateActiveConnectionDidChange]
  -[VCCallSession handleNewConnectionSetup:isInitialConnection:]
  -[VCCallSession handleFirstConnectionSetup:]
  -[VCCallSession updateCachedConnectionState]
  -[VCCallSession handleKeyExchangeCompleted]
  -[VCCallSession setupSecureDataChannel]
  -[VCCallSession setRtpHandle:]
  -[VCCallSession connectionChangeState]
  -[VCCallSession setConnectionChangeState:]
  -[VCCallSession setConnectionManager:]
  -[VCCallSession maxPacketLength]
  -[VCCallSession setMaxPacketLength:]
  -[VCCallSession isAudioRunning]
  -[VCCallSession isWaitingForICEResult]
  -[VCCallSession setIsWaitingForICEResult:]
  -[VCCallSession receivedSIPInvite]
  -[VCCallSession setReceivedSIPInvite:]
  -[VCCallSession hMediaQueue]
  -[VCCallSession setHMediaQueue:]
  -[VCCallSession hAFRC]
  -[VCCallSession setHAFRC:]
  -[VCCallSession ringBuf]
  -[VCCallSession setRingBuf:]
  -[VCCallSession lastReceived]
  -[VCCallSession setLastReceived:]
  -[VCCallSession useControlByte]
  -[VCCallSession setUseControlByte:]
  -[VCCallSession useUEP]
  -[VCCallSession setUseUEP:]
  -[VCCallSession bandwidthUpstream]
  -[VCCallSession setBandwidthUpstream:]
  -[VCCallSession bandwidthDownstream]
  -[VCCallSession setBandwidthDownstream:]
  -[VCCallSession mutedPeers]
  -[VCCallSession setMutedPeers:]
  -[VCCallSession setNatType:]
  -[VCCallSession peerCN]
  -[VCCallSession setPeerCN:]
  -[VCCallSession setPacketLossRate:]
  -[VCCallSession packetLossRate5Secs]
  -[VCCallSession setPacketLossRate5Secs:]
  -[VCCallSession networkConditionsTimeoutInSeconds]
  -[VCCallSession setNetworkConditionsTimeoutInSeconds:]
  -[VCCallSession signalStrengthDisplayBars]
  -[VCCallSession setSignalStrengthDisplayBars:]
  -[VCCallSession signalStrengthMaxDisplayBars]
  -[VCCallSession setSignalStrengthMaxDisplayBars:]
  -[VCCallSession packetLateAndMissingRatio]
  -[VCCallSession setPacketLateAndMissingRatio:]
  -[VCCallSession shouldTimeoutPackets]
  -[VCCallSession setShouldTimeoutPackets:]
  -[VCCallSession useRateControl]
  -[VCCallSession isRTCPFBEnabled]
  -[VCCallSession setIsRTCPFBEnabled:]
  -[VCCallSession shouldSendAudio]
  -[VCCallSession setIsStarted:]
  -[VCCallSession imageAttributeRules]
  -[VCCallSession setImageAttributeRules:]
  -[VCCallSession audioReceiver]
  -[VCCallSession remoteFrameWidth]
  -[VCCallSession setRemoteFrameWidth:]
  -[VCCallSession remoteFrameHeight]
  -[VCCallSession setRemoteFrameHeight:]
  -[VCCallSession isRemoteMediaStalled]
  -[VCCallSession setBasebandCodecType:]
  -[VCCallSession sipState]
  -[VCCallSession setSipState:]
  -[VCCallSession didSend200OK]
  -[VCCallSession setDidSend200OK:]
  -[VCCallSession localCallInfo]
  -[VCCallSession peerReportingID]
  -[VCCallSession setPeerReportingID:]
  -[VCCallSession lastDecodedFrameTime]
  -[VCCallSession setLastDecodedFrameTime:]
  -[VCCallSession setCaptionsDelegate:]
  -[VCCallSession srtpKeyBytes]
  -[VCCallSession setSrtpKeyBytes:]
  -[VCCallSession vcSecureDataChannel:messageType:receivedData:]
  -[VCCallSession didReceiveCaptions:]
  -[VCCallSession sipCallback:callID:msgIn:msgOut:optional:confIndex:]
  -[VCCallSession flushBasebandQueueWithPayloads:flushCount:]
  -[VCCallSession handleMediaReceivedOverPeerToPeerLinkWithConnectionId:]
  -[VCCallSession handleMediaReceivedOverRelayLinkWithConnectionId:]
  -[VCCallSession setupIDSConnectionForCallID:destination:socket:error:]
  -[VCCallSession setSKEBlobOnTransportSession]
  -[VCCallSession configureLegacyTransportWithInviteInfo:error:]
  -[VCCallSession newSKEBlobWithRemoteSKEBlob:]
  -[VCCallSession setupEncryptionWithKey:confIndex:]
  -[VCCallSession initWithRelevantStorebagEntries]
  -[VCCallSession updateNetworkCheckHint:]
  -[VCCallSession logDetailedNetworkInformation]
  -[VCCallSession setupDTLSDefaults]
  -[VCCallSession setupPeerInfo:usingInviteData:isCaller:capabilities:]
  -[VCCallSession retrieveIdentity]
  -[VCCallSession notifyDelegateAndEndCall:didRemoteCancel:error:]
  -[VCCallSession calculateSIPEndAction:currentState:error:]
  -[VCCallSession reportDashboardEndResult:]
  -[VCCallSession cleanupMedia]
  -[VCCallSession startPausedHeartbeat]
  -[VCCallSession stopPausedHeartbeat]
  -[VCCallSession logPerfTimings]
  -[VCCallSession sendTimings]
  -[VCCallSession remotePauseDidChangeToState:forVideo:]
  -[VCCallSession processSIPMessage:msgOut:optional:confIndex:]
  -[VCCallSession setupCalleeSIPStartTimeout:]
  -[VCCallSession addScreenConfigToSDP:]
  -[VCCallSession createSDP:audioPayloadCount:secondaryPayloadTypes:secondaryPayloadCount:videoPayloadTypes:videoPayloadCount:localFeatureList:answerBandwidth:maxBandwidth:imageSizesSend:imageSendCount:imageSizesRecv:imageRecvCount:sdp:numSDPBytes:error:]
  -[VCCallSession negotiateMediaMaxBandwidth]
  -[VCCallSession applyNegotiatedSettings]
  -[VCCallSession applyNegotiatedAudioSettings:]
  -[VCCallSession applyNegotiatedVideoSettings:]
  -[VCCallSession applyNegotiatedCaptionsSettings]
  -[VCCallSession applyNegotiatedMomentsSettings]
  -[VCCallSession startMediaWithPreNegotiatedSettings:]
  -[VCCallSession handleIncomingWithCallID:msgIn:msgOut:optional:confIndex:error:]
  -[VCCallSession getAllPayloadsForAudio:count:secondaryPayloads:secondaryCount:]
  -[VCCallSession getAllPayloadsForVideo:count:]
  -[VCCallSession getAllPayloadsForScreen:count:]
  -[VCCallSession canSendSIPInviteWithError:]
  -[VCCallSession createInviteSDPWithError:]
  -[VCCallSession establishSIPDialogWithSDP:error:]
  -[VCCallSession sendSIPInviteWithError:]
  -[VCCallSession treatAsCellular]
  -[VCCallSession fillMediaControlInfo:]
  -[VCCallSession processMediaControlInfo:isAudio:]
  -[VCCallSession createAudioTransmitter:]
  -[VCCallSession createRTPHandles:]
  -[VCCallSession releaseRTPHandles]
  -[VCCallSession prepareSRTPWithError:]
  -[VCCallSession createMediaQueueHandle:]
  -[VCCallSession negotiateFeaturesString:forPayload:]
  -[VCCallSession negotiatePayloads:withError:]
  -[VCCallSession negotiateMaxBandwidth:]
  -[VCCallSession canNegotiateVideoPayload:supportedPayloads:isLocalOnCellular:isRemoteOnCellular:]
  -[VCCallSession chooseVideoPayload:operatingMode:isLocalOnCellular:isRemoteOnCellular:]
  -[VCCallSession isValidVideoPayloadOverride:]
  -[VCCallSession doesVideoPayloadMatchRemoteImageAttributeRules:]
  -[VCCallSession getAllCompatibleVideoPayloads:forMediaType:]
  -[VCCallSession getCompatibleLocalFeatureListForPayloads:count:]
  -[VCCallSession setRTPPayloads:withError:]
  -[VCCallSession setMediaQueueStreamSettings]
  -[VCCallSession setupCallerRTPChannelWithError:]
  -[VCCallSession sipConnectWithError:]
  -[VCCallSession stopAudioIO:]
  -[VCCallSession enableAudio:]
  -[VCCallSession updateDeviceRole:]
  -[VCCallSession sendCallingModeMessage]
  -[VCCallSession setupAudioCookies]
  -[VCCallSession interfaceForCurrentCall]
  -[VCCallSession startVideoSend:error:]
  -[VCCallSession startVideoReceive:]
  -[VCCallSession startVideo:error:]
  -[VCCallSession stopVideoSend:error:]
  -[VCCallSession stopVideoReceive:isPausing:]
  -[VCCallSession stopVideo:error:]
  -[VCCallSession getVideoSettings:forInterface:payload:width:height:framerate:bitRate:]
  -[VCCallSession startMediaQueue:]
  -[VCCallSession stopMediaQueue:]
  -[VCCallSession vcrcServerBagProfileNumber]
  -[VCCallSession vcrcServerBag]
  -[VCCallSession startAFRC:]
  -[VCCallSession startVCRC:]
  -[VCCallSession startRateControl:]
  -[VCCallSession stopRateControl:]
  -[VCCallSession setupAACELDPayload:]
  -[VCCallSession newConfigForPayloadType:]
  -[VCCallSession negotiatedAudioPayloadTypes]
  -[VCCallSession setupAudioCodecWithPayload:]
  -[VCCallSession codecBitmapForPayloads:]
  -[VCCallSession choosePayload:]
  -[VCCallSession chooseSecondaryPayloads:]
  -[VCCallSession chooseDTXPayloads:]
  -[VCCallSession shutdownVoiceChatFromRemoteSIPSignal:withReason:]
  -[VCCallSession shouldNotifyDelegateDidStartBeforeAudioSetup]
  -[VCCallSession doSipEndProc:]
  -[VCCallSession disconnectWithNoRemotePackets:]
  -[VCCallSession disconnectWithNoRemotePackets:timeoutUsed:]
  -[VCCallSession doSipEndAction:callID:error:]
  -[VCCallSession notifyDelegateSessionStarted]
  -[VCCallSession Conference_SetBWEstMode:bFakeLargeFrameMode:]
  -[VCCallSession setLocalIdentityForKeyExchange]
  -[VCCallSession logIdentity:]
  -[VCCallSession pickFeaturesStringForPayload:featureListDict:remote:]
  -[VCCallSession allPayloadsLocalFeaturesString]
  -[VCCallSession setMatchedFeaturesString:localFeaturesString:remoteFeaturesString:]
  -[VCCallSession matchedFeaturesStringForPayload:]
  -[VCCallSession setupBitrateNegotiation]
  -[VCCallSession adjustBitrateForConnectionType]
  -[VCCallSession maxBitrateForConnectionType]
  -[VCCallSession logConnectionSuccess]
  -[VCCallSession enableSessionHealthMonitor]
  -[VCCallSession audioReceivingBitrateKbps]
  -[VCCallSession audioTransmittingBitrateKbps]
  -[VCCallSession disableSessionHealthMonitor]
  -[VCCallSession sendBasebandCodecMessage]
  -[VCCallSession shouldSendBlackFrame:]
  -[VCCallSession sendSymptomToRemote:groupID:]
  -[VCCallSession setDuplicationFlag:withPreferredLocalLinkTypeForDuplication:notifyPeer:]
  -[VCCallSession handleDuplicationEnabled:activeConnection:]
  -[VCCallSession mapPacketMultiplexModeToRTPMode:]
  -[VCCallSession mapPacketMultiplexModeToSIPMode:]
  -[VCCallSession disconnectInternal:disconnectError:didRemoteCancel:]
  -[VCCallSession setupMessaging]
  -[VCCallSession setupAudioPauseMessages]
  -[VCCallSession setupVideoPauseMessages]
  -[VCCallSession setupAudioPausedHBMessages]
  -[VCCallSession setupAudioOnOffStateMessages]
  -[VCCallSession setupCallingModeMessages]
  -[VCCallSession setupBasebandCodecInfoMessages]
  -[VCCallSession setupDisconnectMessage]
  -[VCCallSession setupHandoverCandidateChangeMessage]
  -[VCCallSession setupPiPStateChangeMessage]
  -[VCCallSession setupCellTechChangeMessages]
  -[VCCallSession setupMomentsMessages]
  -[VCCallSession setupPreferredInterfaceMessage]
  -[VCCallSession processSymptomFromMessage:participantID:isLocalInitiated:isLocalSideOnly:]
  -[VCCallSession setupSymptomEnabledMessage]
  -[VCCallSession setupWRMAlertStateUpdateMessage]
  -[VCCallSession setupWRMCoexMetricsMessage]
  -[VCCallSession controlChannel:receivedData:transactionID:fromParticipant:]
  -[VCCallSession transportSession:connectionSetupDataDidChange:]
  -[VCCallSession transportSession:cancelRelayRequest:]
  -[VCCallSession transportSession:initiateRelayRequest:]
  -[VCCallSession transportSession:sendRelayResponse:]
  -[VCCallSession rateController:targetBitrateDidChange:rateChangeCounter:]
  -[VCCallSession mediaController:mediaSuggestionDidChange:]
  -[VCCallSession packMeters:withLength:]
  -[VCCallSession processBlackFrame:]
  -[VCCallSession onCaptureFrame:audioTS:audioHT:videoHT:cameraBits:]
  -[VCCallSession onPlayVideo:frameTime:cameraStatusBits:]
  -[VCCallSession nofityDelegateReceivedRemoteFrame:frameTime:cameraStatusBits:newRemoteVideoAttributes:remoteScreenAttributes:]
  -[VCCallSession parameterSetForPayload:]
  -[VCCallSession cleanUpVideoRTP]
  -[VCCallSession cleanUpVideoReceiver]
  -[VCCallSession cleanUpVideoTransmitter]
  -[VCCallSession initializeVideoTransmitter:videoRules:unpausing:reportingAgent:fecHeaderV1Enabled:isFECGeneratorEnabled:]
  -[VCCallSession initializeDisplayLinkWithError:]
  -[VCCallSession handleVideoReceiverInitializationFailed]
  -[VCCallSession videoReceiverInitializationError:withDescription:]
  -[VCCallSession createVideoReceiverWithReportingAgent:fecHeaderV1Enabled:videoJBEnabled:error:]
  -[VCCallSession initializeVideoReceiver:reportingAgent:fecHeaderV1Enabled:videoJBEnabled:]
  -[VCCallSession sessionTransmittingFramerate]
  -[VCCallSession sessionTransmittingBitrate]
  -[VCCallSession sessionReceivingFramerate]
  -[VCCallSession sessionReceivingBitrate]
  -[VCCallSession updateVideoQualityNotification:]
  -[VCCallSession newRemoteScreenAttributesForOrientation:]
  -[VCCallSession processResolutionChangeToVideoRule:captureRule:featureListString:]
  -[VCCallSession callAlarmsWithRTPTimeStamp:]
  -[VCCallSession updateStatistics:]


VCCallLinkCongestionDetector : NSObject
 @property  BOOL isLinkCongested

  // instance methods
  -[VCCallLinkCongestionDetector initWithRTTThreshold:lossRateThreshold:]
  -[VCCallLinkCongestionDetector addNewRTT:packetLossRate:timestamp:]
  -[VCCallLinkCongestionDetector isLinkCongested]
  -[VCCallLinkCongestionDetector setIsLinkCongested:]


VCCapabilities : NSObject <NSCoding>
 @property  BOOL isAudioEnabled
 @property  BOOL isAudioPausedToStart
 @property  BOOL isVideoEnabled
 @property  BOOL isVideoPausedToStart
 @property  BOOL isVideoSourceScreen
 @property  BOOL isDuplexVideoOnly
 @property  BOOL isDuplexAudioOnly
 @property  BOOL isHalfDuplexAudio
 @property  BOOL isKeyExchangeEnabled
 @property  BOOL isRelayEnabled
 @property  BOOL isRelayForced
 @property  BOOL requiresWifi
 @property  BOOL isDTLSEnabled
 @property  unsigned int preferredAudioCodec
 @property  unsigned int actualAudioCodec
 @property  unsigned int preferredVideoCodec
 @property  unsigned int actualVideoCodec
 @property  int deviceRole

  // class methods
  +[VCCapabilities DataOnlyVCCapabilities]
  +[VCCapabilities AudioOnlyVCCapabilities]
  +[VCCapabilities VideoOnlyVCCapabilities]
  +[VCCapabilities screenSharingVCCapabilities]

  // instance methods
  -[VCCapabilities initWithEncodedDictionary:]
  -[VCCapabilities encodeWithCoder:]
  -[VCCapabilities init]
  -[VCCapabilities initWithCoder:]
  -[VCCapabilities setIsAudioEnabled:]
  -[VCCapabilities isAudioEnabled]
  -[VCCapabilities isVideoEnabled]
  -[VCCapabilities requiresWifi]
  -[VCCapabilities setRequiresWifi:]
  -[VCCapabilities deviceRole]
  -[VCCapabilities setDeviceRole:]
  -[VCCapabilities preferredAudioCodec]
  -[VCCapabilities setPreferredAudioCodec:]
  -[VCCapabilities newEncodedDictionary]
  -[VCCapabilities decodeFromNSDictionary:]
  -[VCCapabilities setIsVideoEnabled:]
  -[VCCapabilities isVideoSourceScreen]
  -[VCCapabilities setIsVideoSourceScreen:]
  -[VCCapabilities isDuplexVideoOnly]
  -[VCCapabilities setIsDuplexVideoOnly:]
  -[VCCapabilities isDuplexAudioOnly]
  -[VCCapabilities setIsDuplexAudioOnly:]
  -[VCCapabilities isKeyExchangeEnabled]
  -[VCCapabilities setIsKeyExchangeEnabled:]
  -[VCCapabilities actualAudioCodec]
  -[VCCapabilities setActualAudioCodec:]
  -[VCCapabilities preferredVideoCodec]
  -[VCCapabilities setPreferredVideoCodec:]
  -[VCCapabilities actualVideoCodec]
  -[VCCapabilities setActualVideoCodec:]
  -[VCCapabilities isAudioPausedToStart]
  -[VCCapabilities setIsAudioPausedToStart:]
  -[VCCapabilities isVideoPausedToStart]
  -[VCCapabilities setIsVideoPausedToStart:]
  -[VCCapabilities isRelayEnabled]
  -[VCCapabilities setIsRelayEnabled:]
  -[VCCapabilities isRelayForced]
  -[VCCapabilities setIsRelayForced:]
  -[VCCapabilities isDTLSEnabled]
  -[VCCapabilities setIsDTLSEnabled:]
  -[VCCapabilities isHalfDuplexAudio]
  -[VCCapabilities setIsHalfDuplexAudio:]


HandleWrapper : NSObject
 @property  ^{tagHANDLE=i} handle

  // instance methods
  -[HandleWrapper setHandle:]
  -[HandleWrapper handle]


VideoConference : VCObject <VCCallSessionDelegate, VCVideoSink, VCVideoCaptureClient, GKNATObserverDelegate, VCAudioIOSource, VCAudioIOSink, VCAudioIODelegate, VCAudioPowerLevelMonitorDelegate, VCMomentTransportDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  VCMoments *vcMoments
 @property  NSMutableDictionary *sessionDict
 @property  BOOL useCompressedConnectionData
 @property  BOOL enableSpeakerPhone
 @property  BOOL requiresWifi
 @property  unsigned int transportType
 @property  BOOL shouldPrioritizeParticipantIDForSIPInvite
 @property  NSObject<VideoConferenceDelegate> *delegate
 @property  BOOL useViceroyBlobFormat
 @property  BOOL microphoneMuted
 @property  BOOL outputMeteringEnabled
 @property  BOOL inputMeteringEnabled
 @property  BOOL inputFrequencyMeteringEnabled
 @property  BOOL outputFrequencyMeteringEnabled
 @property  float outputMeterLevel
 @property  float inputMeterLevel
 @property  long long inputAudioPowerSpectrumToken
 @property  long long outputAudioPowerSpectrumToken
 @property  int chatMode
 @property  BOOL isFocus
 @property  NSString *currentFocus
 @property  int packetsPerBundle
 @property  BOOL hasMic
 @property  float conferenceVolume
 @property  NSObject<VideoConferenceSpeakingDelegate> *speakingDelegate
 @property  NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate
 @property  unsigned int talkingPeersLimit
 @property  BOOL disableVAD
 @property  BOOL shouldTimeoutPackets
 @property  int upstreamBandwidth
 @property  int downstreamBandwidth
 @property  int localFrameHeight
 @property  int localFrameWidth
 @property  unsigned int preferredCodec
 @property  BOOL isUsingSuppression
 @property  BOOL isGKVoiceChat
 @property  VCVideoRule *conferenceCaptureRule
 @property  unsigned int lastActiveCall
 @property  BOOL isValid
 @property  int deviceRole
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VideoConference terminateProcess:terminateSource:agent:]

  // instance methods
  -[VideoConference setIsValid:]
  -[VideoConference unlock]
  -[VideoConference setTransportType:]
  -[VideoConference setDelegate:]
  -[VideoConference delegate]
  -[VideoConference dealloc]
  -[VideoConference isValid]
  -[VideoConference transportType]
  -[VideoConference setActive:]
  -[VideoConference inputAudioPowerSpectrumToken]
  -[VideoConference outputAudioPowerSpectrumToken]
  -[VideoConference isMicrophoneMuted]
  -[VideoConference setMicrophoneMuted:]
  -[VideoConference isOutputMeteringEnabled]
  -[VideoConference setOutputMeteringEnabled:]
  -[VideoConference isInputMeteringEnabled]
  -[VideoConference setInputMeteringEnabled:]
  -[VideoConference outputMeterLevel]
  -[VideoConference inputMeterLevel]
  -[VideoConference didUpdateBasebandCodec:]
  -[VideoConference didServerDie]
  -[VideoConference isGKVoiceChat]
  -[VideoConference setIsGKVoiceChat:]
  -[VideoConference isSpeakerPhoneEnabled]
  -[VideoConference initializeNewCallWithDeviceRole:]
  -[VideoConference initializeNewCallWithDeviceRole:reportingHierarchyToken:]
  -[VideoConference warmupForCall]
  -[VideoConference setUseViceroyBlobFormat:]
  -[VideoConference sendARPLData:toCallID:]
  -[VideoConference callMetadataForCallID:]
  -[VideoConference setPeerCN:callID:]
  -[VideoConference setSessionID:callID:]
  -[VideoConference networkQualityForCallID:]
  -[VideoConference requiresWifi]
  -[VideoConference setRequiresWifi:]
  -[VideoConference stopCallID:]
  -[VideoConference cancelCallID:]
  -[VideoConference remoteCancelledCallID:]
  -[VideoConference setCallReport:withReport:]
  -[VideoConference processRemoteIPChange:callID:]
  -[VideoConference isInputFrequencyMeteringEnabled]
  -[VideoConference setInputFrequencyMeteringEnabled:]
  -[VideoConference isOutputFrequencyMeteringEnabled]
  -[VideoConference setOutputFrequencyMeteringEnabled:]
  -[VideoConference getIsAudioPaused:callID:error:]
  -[VideoConference getIsVideoPaused:callID:error:]
  -[VideoConference localFramerateForCallID:]
  -[VideoConference localBitrateForCallID:]
  -[VideoConference remoteFramerateForCallID:]
  -[VideoConference remoteBitrateForCallID:]
  -[VideoConference localFrameHeight]
  -[VideoConference localFrameWidth]
  -[VideoConference remotePacketLossRateForCallID:]
  -[VideoConference localPacketLossRateForCallID:]
  -[VideoConference roundTripTimeForCallID:]
  -[VideoConference statsForCallID:]
  -[VideoConference setEnableSpeakerPhone:]
  -[VideoConference natType]
  -[VideoConference setPauseAudio:callID:error:]
  -[VideoConference setPauseVideo:callID:error:]
  -[VideoConference updateCapabilities:forCallID:]
  -[VideoConference processRelayRequestResponse:responseDict:didOriginateRequest:]
  -[VideoConference processRelayUpdate:updateDict:didOriginateRequest:]
  -[VideoConference setConferenceState:forCallID:]
  -[VideoConference setConferenceVisualRectangle:forCallID:]
  -[VideoConference setPeerProtocolVersion:forCallID:]
  -[VideoConference useViceroyBlobFormat]
  -[VideoConference NATTypeDictionaryUpdated:]
  -[VideoConference triggerInterfaceChange]
  -[VideoConference deviceRole]
  -[VideoConference onVideoFrame:frameTime:attribute:]
  -[VideoConference pushAudioSamples:]
  -[VideoConference didSuspendAudioIO:]
  -[VideoConference didResumeAudioIO:]
  -[VideoConference captureMeshMode:]
  -[VideoConference initWithClientPid:]
  -[VideoConference pullAudioSamples:]
  -[VideoConference canProcessAudio]
  -[VideoConference setCanProcessAudio:]
  -[VideoConference session:didChangeRemoteScreenAttributes:]
  -[VideoConference useCompressedConnectionData]
  -[VideoConference setUseCompressedConnectionData:]
  -[VideoConference thermalLevelDidChange:]
  -[VideoConference setQualityDelegate:]
  -[VideoConference qualityDelegate]
  -[VideoConference startConnectionWithParticipantID:callID:usingInviteData:isCaller:capabilities:idsSocket:destination:error:]
  -[VideoConference inviteDataForParticipantID:callID:remoteInviteData:nonCellularCandidateTimeout:error:]
  -[VideoConference setPacketsPerBundle:]
  -[VideoConference packetsPerBundle]
  -[VideoConference shouldTimeoutPackets]
  -[VideoConference setShouldTimeoutPackets:]
  -[VideoConference stopVideoSend:error:]
  -[VideoConference vcAudioPowerLevelMonitor:isAudioBelowThreshold:]
  -[VideoConference moments:shouldProcessRequest:recipientID:]
  -[VideoConference newSessionWithDeviceRole:reportingHierarchyToken:]
  -[VideoConference cleanupManager]
  -[VideoConference sendData:toCallID:encrypted:]
  -[VideoConference setupNATObserver]
  -[VideoConference packetLossRateForCallID:]
  -[VideoConference setChatMode:]
  -[VideoConference setIsFocus:]
  -[VideoConference setIsUsingSuppression:]
  -[VideoConference cleanupQueues]
  -[VideoConference inviteDataForParticipantID:callID:remoteInviteData:nonCellularCandidateTimeout:block:queue:caller:]
  -[VideoConference connectionBlobForParticipantID:callID:block:queue:caller:]
  -[VideoConference connectionBlobForParticipantID:callID:error:]
  -[VideoConference natTypeForCallSessions:]
  -[VideoConference notifyDelegateOfLocalVariablesChange]
  -[VideoConference shouldSendAudioForCallID:]
  -[VideoConference setSendAudio:forCallID:]
  -[VideoConference setPeerReportingID:sessionID:callID:]
  -[VideoConference updateCapabilities:forSession:]
  -[VideoConference shouldReinitializeCallWithDuration:forCallID:]
  -[VideoConference setConferenceOperatingMode:]
  -[VideoConference conferenceOperatingMode]
  -[VideoConference startConnectionWithParticipantID:callID:oldCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:destination:error:]
  -[VideoConference startConnectionWithParticipantID:callID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:destination:error:]
  -[VideoConference setUpAudioIO:callID:]
  -[VideoConference setupSpatialAudioWithCallID:]
  -[VideoConference cleanupSpatialAudioForCallID:]
  -[VideoConference setCurrentFocus:]
  -[VideoConference updatedMutedPeers:forParticipantID:]
  -[VideoConference updatedConnectedPeers:]
  -[VideoConference stopAllCalls:]
  -[VideoConference setCallReportProtobuf:withProtobufData:forMetricID:]
  -[VideoConference remoteFrameSizeForCallID:]
  -[VideoConference forceNoICE:]
  -[VideoConference setHasMic:]
  -[VideoConference hasMic]
  -[VideoConference setConferenceVolume:]
  -[VideoConference conferenceVolume]
  -[VideoConference handleCellTechChange:cellularMaxPktLen:]
  -[VideoConference powerFloatToInt:]
  -[VideoConference powerIntToFloat:]
  -[VideoConference chatMode]
  -[VideoConference isFocus]
  -[VideoConference currentFocus]
  -[VideoConference preferredCodec]
  -[VideoConference setPreferredCodec:]
  -[VideoConference upstreamBandwidth]
  -[VideoConference setUpstreamBandwidth:]
  -[VideoConference downstreamBandwidth]
  -[VideoConference setDownstreamBandwidth:]
  -[VideoConference speakingDelegate]
  -[VideoConference setSpeakingDelegate:]
  -[VideoConference isUsingSuppression]
  -[VideoConference talkingPeersLimit]
  -[VideoConference setTalkingPeersLimit:]
  -[VideoConference disableVAD]
  -[VideoConference setDisableVAD:]
  -[VideoConference shouldPrioritizeParticipantIDForSIPInvite]
  -[VideoConference setShouldPrioritizeParticipantIDForSIPInvite:]
  -[VideoConference conferenceCaptureRule]
  -[VideoConference lastActiveCall]
  -[VideoConference setLastActiveCall:]
  -[VideoConference vcMoments]
  -[VideoConference sessionDict]
  -[VideoConference setSessionDict:]
  -[VideoConference updateSpeaking:timeStamp:]
  -[VideoConference pruneQuietestPeers:talking:mask:meters:]
  -[VideoConference calculateTalkingMaskAtTimeStamp:]
  -[VideoConference calculateMixingArrays:talkingMask:]
  -[VideoConference captureAsFocus:]
  -[VideoConference captureAsFocusClient:]
  -[VideoConference updateAudioTimestampsForSession:withNewSampleTime:hostTime:numSamples:]
  -[VideoConference updateMeter:forParticipant:atIndex:]
  -[VideoConference updateMeters:]
  -[VideoConference recvSamplesForSession:sampleBuffer:]
  -[VideoConference pullDecodedAsFocus:]
  -[VideoConference pullDecodedAsFocusClient:]
  -[VideoConference pullDecodedMeshMode:]
  -[VideoConference sipCallbackNotification:callID:msgIn:msgOut:optional:confIndex:]
  -[VideoConference matchesCallID:]
  -[VideoConference matchesOpenSessionForParticipantID:]
  -[VideoConference callIDForOpenSessionWithParticipantID:]
  -[VideoConference openSessionForParticipant:]
  -[VideoConference matchesParticipantID:]
  -[VideoConference sessionForParticipantID:]
  -[VideoConference conferenceMatchesSourceDestinationInfo:]
  -[VideoConference sessionForSourceDestinationInfo:]
  -[VideoConference hasSessionWaitingForSIPInvite]
  -[VideoConference loopbackSessionWaitingForSIPInvite]
  -[VideoConference sessionForIncomingParticipantID:]
  -[VideoConference stateForCallID:]
  -[VideoConference cleanupProc:]
  -[VideoConference wrlock]
  -[VideoConference tryrdlock]
  -[VideoConference rdlock]
  -[VideoConference stopCallID:didRemoteCancel:error:]
  -[VideoConference cancelCallID:error:]
  -[VideoConference cleanupSession:withDelay:]
  -[VideoConference defaultCleanupSession:]
  -[VideoConference threadSafeCleanupSession:]
  -[VideoConference cleanupSession:didRemoteCancel:]
  -[VideoConference setPauseAudio:]
  -[VideoConference setPauseVideo:]
  -[VideoConference markUnfinishedSessions]
  -[VideoConference session:withCallID:networkHint:]
  -[VideoConference session:withCallID:videoIsDegraded:isRemote:]
  -[VideoConference session:localIPChange:withCallID:]
  -[VideoConference session:connectionDidChangeWithLocalInterfaceType:remoteInterfaceType:callID:]
  -[VideoConference session:didStart:connectionType:localInterfaceType:remoteInterfaceType:error:]
  -[VideoConference session:cleanUpWithDelay:error:]
  -[VideoConference session:didStopWithError:]
  -[VideoConference session:receivedNoPacketsForSeconds:]
  -[VideoConference session:remoteMediaStalled:]
  -[VideoConference session:packMeters:withLength:]
  -[VideoConference session:didChangeVideoRule:]
  -[VideoConference session:receivedRemoteFrame:atTime:withScreenAttributes:videoAttributes:isFirstFrame:isVideoPaused:]
  -[VideoConference session:didReceiveARPLData:fromCallID:]
  -[VideoConference session:didReceiveData:messageType:withCallID:]
  -[VideoConference session:startVideoSend:captureRuleWifi:captureRuleCell:interface:isUnpausing:]
  -[VideoConference registerForVideoFramesWithDeviceRole:captureRule:isUnpausing:]
  -[VideoConference session:startVideoReceive:]
  -[VideoConference deregisterForVideoFramesWithDeviceRole:]
  -[VideoConference session:stopVideoReceive:isPausing:]
  -[VideoConference session:didStopVideoIO:error:]
  -[VideoConference session:isSendingAudio:error:]
  -[VideoConference session:didPauseAudio:error:]
  -[VideoConference session:didPauseVideo:error:]
  -[VideoConference remoteAudioDidPause:callID:]
  -[VideoConference remoteVideoDidPause:callID:]
  -[VideoConference session:initiateRelayRequest:]
  -[VideoConference session:sendRelayResponse:]
  -[VideoConference session:cancelRelayRequest:]
  -[VideoConference didChangeLocalVariablesForSession:]
  -[VideoConference session:remoteAudioEnabled:withCallID:]
  -[VideoConference session:localAudioEnabled:withCallID:error:]
  -[VideoConference session:remoteCallingModeChanged:withCallID:]
  -[VideoConference setBWEOptions:UseNewBWEMode:FakeLargeFrameMode:ProbingSenderLog:]
  -[VideoConference currentCameraID]
  -[VideoConference session:changeVideoRulesToCaptureRule:encodeRule:featureListString:]
  -[VideoConference session:startAudioWithFarEndVersionInfo:internalFrameFormat:completionHandler:]
  -[VideoConference session:stopAudioWithCompletionHandler:]
  -[VideoConference session:setRemoteBasebandCodecType:sampleRate:]
  -[VideoConference audioIOFormat]
  -[VideoConference session:setMomentsCapabilities:imageType:videoCodec:]
  -[VideoConference momentsCapabilitiesWithNegotiationBlobMomentsSettings_Capabilities:]
  -[VideoConference session:didReceiveMomentsRequest:]
  -[VideoConference clientCaptureRule]
  -[VideoConference initiateResolutionChangeToWidth:height:rate:]
  -[VideoConference avConferencePreviewError:]
  -[VideoConference avConferenceScreenCaptureError:]
  -[VideoConference shouldSendBlackFrame:callID:]
  -[VideoConference cameraAvailabilityDidChange:]
  -[VideoConference sourceFrameRateDidChange:]


VCRateControlAlgorithmBase : NSObject <VCRateControlAlgorithm>
 @property  VCRateControlMediaController *mediaController
 @property  {VCRateControlAlgorithmConfig=I^Iiii[2i]iiiiiiiiiiiddddddddddddddiiidddddddddddIIIIIBBBBBBBBBBBiBddididddidiiddidddddddddddddddddBdiiBidddddd} config
 @property  unsigned int targetBitrate
 @property  unsigned int rateChangeCounter
 @property  BOOL isCongested
 @property  unsigned int mostBurstLoss
 @property  double packetLossRate
 @property  double packetLossRateAudio
 @property  double packetLossRateVideo
 @property  unsigned int totalPacketReceived
 @property  double roundTripTime
 @property  double worstRecentRoundTripTime
 @property  unsigned int worstRecentBurstLoss
 @property  double owrd
 @property  BOOL isNewRateSentOut
 @property  unsigned int localBandwidthEstimation
 @property  unsigned int remoteBandwidthEstimation
 @property  BOOL paused
 @property  unsigned int actualBitrate
 @property  BOOL didMBLRampDown
 @property  BOOL isSendBitrateLimited
 @property  BOOL isFirstInitialRampUpDone
 @property  unsigned int rateSharingCount
 @property  BOOL isLossBasedAdaptationOn
 @property  BOOL isFirstTimestampArrived
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRateControlAlgorithmBase config]
  -[VCRateControlAlgorithmBase setPaused:]
  -[VCRateControlAlgorithmBase isPaused]
  -[VCRateControlAlgorithmBase dealloc]
  -[VCRateControlAlgorithmBase init]
  -[VCRateControlAlgorithmBase mediaController]
  -[VCRateControlAlgorithmBase packetLossRate]
  -[VCRateControlAlgorithmBase roundTripTime]
  -[VCRateControlAlgorithmBase doRateControlWithStatistics:]
  -[VCRateControlAlgorithmBase setMediaController:]
  -[VCRateControlAlgorithmBase targetBitrate]
  -[VCRateControlAlgorithmBase owrd]
  -[VCRateControlAlgorithmBase stateExit]
  -[VCRateControlAlgorithmBase stateEnter]
  -[VCRateControlAlgorithmBase resetLossEventBuffer]
  -[VCRateControlAlgorithmBase configure:restartRequired:]
  -[VCRateControlAlgorithmBase rateSharingCount]
  -[VCRateControlAlgorithmBase setRateSharingCount:]
  -[VCRateControlAlgorithmBase enableLogDump:enablePeriodicLogging:]
  -[VCRateControlAlgorithmBase enableBasebandDump:]
  -[VCRateControlAlgorithmBase rateChangeCounter]
  -[VCRateControlAlgorithmBase isCongested]
  -[VCRateControlAlgorithmBase mostBurstLoss]
  -[VCRateControlAlgorithmBase packetLossRateAudio]
  -[VCRateControlAlgorithmBase packetLossRateVideo]
  -[VCRateControlAlgorithmBase totalPacketReceived]
  -[VCRateControlAlgorithmBase worstRecentRoundTripTime]
  -[VCRateControlAlgorithmBase worstRecentBurstLoss]
  -[VCRateControlAlgorithmBase isNewRateSentOut]
  -[VCRateControlAlgorithmBase localBandwidthEstimation]
  -[VCRateControlAlgorithmBase setLocalBandwidthEstimation:]
  -[VCRateControlAlgorithmBase remoteBandwidthEstimation]
  -[VCRateControlAlgorithmBase actualBitrate]
  -[VCRateControlAlgorithmBase didMBLRampDown]
  -[VCRateControlAlgorithmBase setDidMBLRampDown:]
  -[VCRateControlAlgorithmBase isSendBitrateLimited]
  -[VCRateControlAlgorithmBase isFirstInitialRampUpDone]
  -[VCRateControlAlgorithmBase isLossBasedAdaptationOn]
  -[VCRateControlAlgorithmBase isFirstTimestampArrived]
  -[VCRateControlAlgorithmBase setIsFirstTimestampArrived:]
  -[VCRateControlAlgorithmBase checkPaused]
  -[VCRateControlAlgorithmBase logToDumpFilesWithString:]
  -[VCRateControlAlgorithmBase getDoubleTimeFromTimestamp:timestampTick:wrapAroundCounter:]
  -[VCRateControlAlgorithmBase getTimestampFromMicroTime:]
  -[VCRateControlAlgorithmBase calculateCongestionMetricsFromOWRD:time:]
  -[VCRateControlAlgorithmBase stateChangeTo:]
  -[VCRateControlAlgorithmBase checkBandwidthOvershootWithRemoteBandwidthEstimation:]
  -[VCRateControlAlgorithmBase keepOvershootingRampDownBandwidth]
  -[VCRateControlAlgorithmBase recentlyGoAboveRampUpBandwidth]
  -[VCRateControlAlgorithmBase updateLossEvent]
  -[VCRateControlAlgorithmBase lossEventIncreasingCount]
  -[VCRateControlAlgorithmBase lossEventOverThresholdRatio]
  -[VCRateControlAlgorithmBase updateLossEventBandwidthLimit:]
  -[VCRateControlAlgorithmBase resetLossEventBandwidthLimit]
  -[VCRateControlAlgorithmBase rampUpTargetBitrateContinuousWithBandwidthDiff:]
  -[VCRateControlAlgorithmBase allowRampUpWithContinuousTargetBitrate]
  -[VCRateControlAlgorithmBase shouldBlockRampUpDueToLossEventThreshold]
  -[VCRateControlAlgorithmBase shouldRampDownDueToLossEvent]
  -[VCRateControlAlgorithmBase shouldRampDownDueToConsecutiveLoss]
  -[VCRateControlAlgorithmBase shouldRampDownDueToLossThreshold]
  -[VCRateControlAlgorithmBase updateCongestionStatusWhenRampUp]
  -[VCRateControlAlgorithmBase updateCongestionStatusWhenRampDown:]


VCCaptionsSegmentBlob : PBCodable <NSCopying>
 @property  BOOL hasConfidence
 @property  unsigned int confidence
 @property  BOOL hasHasSpaceAfter
 @property  BOOL hasSpaceAfter
 @property  BOOL hasText
 @property  NSString *text

  // instance methods
  -[VCCaptionsSegmentBlob confidence]
  -[VCCaptionsSegmentBlob text]
  -[VCCaptionsSegmentBlob copyTo:]
  -[VCCaptionsSegmentBlob hasText]
  -[VCCaptionsSegmentBlob dealloc]
  -[VCCaptionsSegmentBlob mergeFrom:]
  -[VCCaptionsSegmentBlob dictionaryRepresentation]
  -[VCCaptionsSegmentBlob copyWithZone:]
  -[VCCaptionsSegmentBlob readFrom:]
  -[VCCaptionsSegmentBlob setConfidence:]
  -[VCCaptionsSegmentBlob writeTo:]
  -[VCCaptionsSegmentBlob isEqual:]
  -[VCCaptionsSegmentBlob setText:]
  -[VCCaptionsSegmentBlob setHasConfidence:]
  -[VCCaptionsSegmentBlob hasConfidence]
  -[VCCaptionsSegmentBlob hasSpaceAfter]
  -[VCCaptionsSegmentBlob setHasSpaceAfter:]
  -[VCCaptionsSegmentBlob setHasHasSpaceAfter:]
  -[VCCaptionsSegmentBlob hasHasSpaceAfter]
  -[VCCaptionsSegmentBlob initWithSFTranscriptionSegment:isLast:]


VCTransportSessionLegacy : VCTransportSession <LoopbackSocketTunnelDelegate, InterfaceListenerDelegate, VCConnectionManagerDelegate>
 @property  int pendingRelayCount
 @property  BOOL initialSecondaryRelaySetupDone
 @property  NSDictionary *localRelayUpdate
 @property  NSDictionary *remoteRelayUpdate
 @property  NSMutableDictionary *remoteRelayRequestResponse
 @property  NSData *remoteRelayConnectionData
 @property  NSMutableDictionary *localRelayRequestResponse
 @property  NSData *localConnectionData
 @property  NSData *localRelayConnectionData
 @property  BOOL allowsRelay
 @property  BOOL isCaller
 @property  unsigned int remoteCallID
 @property  <VCTransportSessionLegacyDelegate> *delegate
 @property  NSString *localParticipantID
 @property  NSString *remoteParticipantID
 @property  NSString *sessionID
 @property  NSData *remoteConnectionData
 @property  int NATType
 @property  int operatingMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCTransportSessionLegacy setIdentity:]
  -[VCTransportSessionLegacy setDelegate:]
  -[VCTransportSessionLegacy sessionID]
  -[VCTransportSessionLegacy delegate]
  -[VCTransportSessionLegacy dealloc]
  -[VCTransportSessionLegacy stop]
  -[VCTransportSessionLegacy start]
  -[VCTransportSessionLegacy setSessionID:]
  -[VCTransportSessionLegacy operatingMode]
  -[VCTransportSessionLegacy setOperatingMode:]
  -[VCTransportSessionLegacy localParticipantID]
  -[VCTransportSessionLegacy remoteParticipantID]
  -[VCTransportSessionLegacy startActiveProbingWithOptions:]
  -[VCTransportSessionLegacy stopActiveProbingWithOptions:]
  -[VCTransportSessionLegacy flushLinkProbingStatusWithOptions:]
  -[VCTransportSessionLegacy receivedRealTimeData:fromParticipantID:]
  -[VCTransportSessionLegacy triggerInterfaceChange]
  -[VCTransportSessionLegacy queryProbingResultsWithOptions:]
  -[VCTransportSessionLegacy initWithCallID:reportingAgent:]
  -[VCTransportSessionLegacy isCaller]
  -[VCTransportSessionLegacy setIsCaller:]
  -[VCTransportSessionLegacy getConnectionSetupData:withOptions:error:]
  -[VCTransportSessionLegacy handleRATChanged:]
  -[VCTransportSessionLegacy getSignalStrengthBars:displayBars:maxDisplayBars:]
  -[VCTransportSessionLegacy flushBasebandQueueForConnection:payloadInfoList:]
  -[VCTransportSessionLegacy updateQualityIndicator:isIPv6:]
  -[VCTransportSessionLegacy registerBasebandNotificationsForConnection:]
  -[VCTransportSessionLegacy deregisterBasebandNotifications]
  -[VCTransportSessionLegacy primaryConnectionChanged:oldPrimaryConnection:activeConnection:]
  -[VCTransportSessionLegacy handleMediaReceivedOverPeerToPeerLinkWithConnectionId:]
  -[VCTransportSessionLegacy handleMediaReceivedOverRelayLinkWithConnectionId:]
  -[VCTransportSessionLegacy stopLoopbackProc:]
  -[VCTransportSessionLegacy loopbackSocketTunnel:receivedData:from:]
  -[VCTransportSessionLegacy networkStateDidChange]
  -[VCTransportSessionLegacy connectionCallback:isInitialConnection:]
  -[VCTransportSessionLegacy didEnableDuplication:activeConnection:]
  -[VCTransportSessionLegacy didUpdatePreferredInterfaceForDuplication:notifyPeer:enableDuplication:isMediaUnrecoverableSignal:]
  -[VCTransportSessionLegacy didMediaQualityDegrade:]
  -[VCTransportSessionLegacy updateParticipantGenerationCounter:]
  -[VCTransportSessionLegacy startConnectionWithBlob:useRelay:isInitialRelay:error:]
  -[VCTransportSessionLegacy setForceRelay]
  -[VCTransportSessionLegacy processRelayRequestResponse:didOriginateRequest:]
  -[VCTransportSessionLegacy processRelayUpdate:didOriginateRequest:]
  -[VCTransportSessionLegacy createSecondaryRelayDispatchTimer:callID:callerRequired:]
  -[VCTransportSessionLegacy destroySecondaryRelayDispatchTimer]
  -[VCTransportSessionLegacy setupPendingSecondaryRelayWithNewPrimary:]
  -[VCTransportSessionLegacy notifyDelegateToCancelRelay]
  -[VCTransportSessionLegacy setupSecondaryRelayForCall:callerRequired:]
  -[VCTransportSessionLegacy setupInitialSecondaryRelayWithCallbackRelayFlag:callID:connectionId:]
  -[VCTransportSessionLegacy initiateRelayRequest]
  -[VCTransportSessionLegacy transportCallType]
  -[VCTransportSessionLegacy handleConnectionSetupDataChangeMessageDelivered]
  -[VCTransportSessionLegacy isHandoverSupported]
  -[VCTransportSessionLegacy handleNewCandidates:version:]
  -[VCTransportSessionLegacy processRemoteIPChange:dataLength:remoteCandidateVersion:]
  -[VCTransportSessionLegacy processRemoteIPChange:]
  -[VCTransportSessionLegacy connectionResultCallback:didReceiveICEPacket:didUseRelay:secretKey:skeResult:]
  -[VCTransportSessionLegacy handleExchangedKey:result:]
  -[VCTransportSessionLegacy createTCPTunnelForParticipantID:relayDictionary:didOriginateRequest:relayType:error:]
  -[VCTransportSessionLegacy deleteTCPTunnel]
  -[VCTransportSessionLegacy resetLoopback]
  -[VCTransportSessionLegacy setupLoopbackWithConnectionType:]
  -[VCTransportSessionLegacy stopLoopback]
  -[VCTransportSessionLegacy createInitiateRelayDictionary]
  -[VCTransportSessionLegacy createInitiateRelayDictionaryForCall:primaryConnection:]
  -[VCTransportSessionLegacy createRelayUpdateDictionary:]
  -[VCTransportSessionLegacy getConnectionDataUsingRelay:isInitialRelay:nonCellularCandidateTimeout:queue:completionHandler:]
  -[VCTransportSessionLegacy connectionData:connectionDataSizeInBytes:shouldUseRelay:]
  -[VCTransportSessionLegacy connectionDataUsingRelay:isInitialRelay:nonCellularCandidateTimeout:error:]
  -[VCTransportSessionLegacy generateConnectionData:forCallID:connectionDataSize:nonCellularCandidateTimeout:]
  -[VCTransportSessionLegacy setupTransport]
  -[VCTransportSessionLegacy resetICETimeoutToLongTimeout]
  -[VCTransportSessionLegacy iceTimeoutInSeconds:]
  -[VCTransportSessionLegacy IPPortForPrimaryConnectionOnLocalInterface:]
  -[VCTransportSessionLegacy connectionTypeForConnectionResult:]
  -[VCTransportSessionLegacy isConnectedAndAllowAdditionalConnection]
  -[VCTransportSessionLegacy detailedErrorCode]
  -[VCTransportSessionLegacy reportNetworkConditionsDegraded]
  -[VCTransportSessionLegacy pendingRelayCount]
  -[VCTransportSessionLegacy setPendingRelayCount:]
  -[VCTransportSessionLegacy initialSecondaryRelaySetupDone]
  -[VCTransportSessionLegacy setInitialSecondaryRelaySetupDone:]
  -[VCTransportSessionLegacy setLocalParticipantID:]
  -[VCTransportSessionLegacy setRemoteParticipantID:]
  -[VCTransportSessionLegacy localConnectionData]
  -[VCTransportSessionLegacy setLocalConnectionData:]
  -[VCTransportSessionLegacy remoteConnectionData]
  -[VCTransportSessionLegacy setRemoteConnectionData:]
  -[VCTransportSessionLegacy localRelayConnectionData]
  -[VCTransportSessionLegacy setLocalRelayConnectionData:]
  -[VCTransportSessionLegacy remoteRelayConnectionData]
  -[VCTransportSessionLegacy setRemoteRelayConnectionData:]
  -[VCTransportSessionLegacy allowsRelay]
  -[VCTransportSessionLegacy setAllowsRelay:]
  -[VCTransportSessionLegacy remoteCallID]
  -[VCTransportSessionLegacy setRemoteCallID:]
  -[VCTransportSessionLegacy connectionSetupRTTEstimate]
  -[VCTransportSessionLegacy isRemoteOSPreLion]
  -[VCTransportSessionLegacy localRelayRequestResponse]
  -[VCTransportSessionLegacy setLocalRelayRequestResponse:]
  -[VCTransportSessionLegacy remoteRelayRequestResponse]
  -[VCTransportSessionLegacy setRemoteRelayRequestResponse:]
  -[VCTransportSessionLegacy localRelayUpdate]
  -[VCTransportSessionLegacy setLocalRelayUpdate:]
  -[VCTransportSessionLegacy remoteRelayUpdate]
  -[VCTransportSessionLegacy setRemoteRelayUpdate:]
  -[VCTransportSessionLegacy NATType]
  -[VCTransportSessionLegacy setNATType:]


VCAudioUnitProperties : NSObject
 @property  ^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} frameFormatMic
 @property  ^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} frameFormatSpeaker
 @property  unsigned int audioUnitType
 @property  BOOL allowAudioRecording
 @property  int operatingMode
 @property  int deviceRole
 @property  unsigned int vpOperatingMode
 @property  BOOL vpEnableSpatialChat
 @property  BOOL isFarEndVersionInfoValid
 @property  {VoiceIOFarEndVersionInfo=[64C][64C]I} farEndVersionInfo
 @property  unsigned int remoteCodecType
 @property  double remoteCodecSampleRate
 @property  BOOL enableDNNVAD
 @property  VCAudioUnitSpatialContext *spatialContext
 @property  unsigned int audioSessionId

  // instance methods
  -[VCAudioUnitProperties dealloc]
  -[VCAudioUnitProperties operatingMode]
  -[VCAudioUnitProperties setOperatingMode:]
  -[VCAudioUnitProperties audioSessionId]
  -[VCAudioUnitProperties setAudioSessionId:]
  -[VCAudioUnitProperties deviceRole]
  -[VCAudioUnitProperties allowAudioRecording]
  -[VCAudioUnitProperties setAllowAudioRecording:]
  -[VCAudioUnitProperties setDeviceRole:]
  -[VCAudioUnitProperties farEndVersionInfo]
  -[VCAudioUnitProperties setFarEndVersionInfo:]
  -[VCAudioUnitProperties frameFormatMic]
  -[VCAudioUnitProperties frameFormatSpeaker]
  -[VCAudioUnitProperties audioUnitType]
  -[VCAudioUnitProperties setAudioUnitType:]
  -[VCAudioUnitProperties remoteCodecSampleRate]
  -[VCAudioUnitProperties setRemoteCodecSampleRate:]
  -[VCAudioUnitProperties remoteCodecType]
  -[VCAudioUnitProperties setRemoteCodecType:]
  -[VCAudioUnitProperties vpOperatingMode]
  -[VCAudioUnitProperties setVpOperatingMode:]
  -[VCAudioUnitProperties vpEnableSpatialChat]
  -[VCAudioUnitProperties setVpEnableSpatialChat:]
  -[VCAudioUnitProperties isFarEndVersionInfoValid]
  -[VCAudioUnitProperties enableDNNVAD]
  -[VCAudioUnitProperties setEnableDNNVAD:]
  -[VCAudioUnitProperties spatialContext]
  -[VCAudioUnitProperties setSpatialContext:]


VCTextReceiver : NSObject <VCTextFrameReceiver>
 @property  <VCTextReceiverDelegate> *delegate
 @property  NSArray *supportedPayloads
 @property  double lastReceivedRTPPacketTime
 @property  double lastReceivedRTCPPacketTime

  // instance methods
  -[VCTextReceiver setDelegate:]
  -[VCTextReceiver delegate]
  -[VCTextReceiver dealloc]
  -[VCTextReceiver stop]
  -[VCTextReceiver initWithConfiguration:]
  -[VCTextReceiver start]
  -[VCTextReceiver setSupportedPayloads:]
  -[VCTextReceiver supportedPayloads]
  -[VCTextReceiver lastReceivedRTPPacketTime]
  -[VCTextReceiver lastReceivedRTCPPacketTime]
  -[VCTextReceiver didDetectMissingFrame]
  -[VCTextReceiver didReceiveFrame:]
  -[VCTextReceiver initializeTextPacket:withMediaPacket:]
  -[VCTextReceiver retrieveRTPPacket:]
  -[VCTextReceiver receiverThreadCallback:]
  -[VCTextReceiver processRTPPacket]
  -[VCTextReceiver processRTCPPacket]
  -[VCTextReceiver isSupportedPayload:]
  -[VCTextReceiver validateAndEnqueuePackets:]
  -[VCTextReceiver splitPacket:packetArray:]
  -[VCTextReceiver allocFrameWithPacket:data:dataLength:timestamp:]
  -[VCTextReceiver parsePacket:]
  -[VCTextReceiver enqueuePacket:]
  -[VCTextReceiver setLastReceivedRTPPacketTime:]
  -[VCTextReceiver setLastReceivedRTCPPacketTime:]


VideoConferenceManager : NSObject <VideoConferenceDelegate>
 @property  VideoConference *activeConference
 @property  VideoConference *conferenceWithMic
 @property  ICEResultWaitQueue *resultQueue
 @property  NSMutableArray *vcList

  // class methods
  +[VideoConferenceManager defaultVideoConferenceManager]
  +[VideoConferenceManager addNSError:toConferenceXPCArgumentDictionary:]

  // instance methods
  -[VideoConferenceManager resultQueue]
  -[VideoConferenceManager init]
  -[VideoConferenceManager videoConference:didStartSession:withCallID:error:]
  -[VideoConferenceManager videoConference:didStartSession:withCallID:withUserInfo:error:]
  -[VideoConferenceManager videoConference:withCallID:isSendingAudio:error:]
  -[VideoConferenceManager videoConference:withCallID:didPauseAudio:error:]
  -[VideoConferenceManager videoConference:withCallID:didPauseVideo:error:]
  -[VideoConferenceManager videoConference:didStopWithCallID:error:callMetadata:]
  -[VideoConferenceManager videoConference:localIPChange:withCallID:]
  -[VideoConferenceManager videoConference:remoteMediaStalled:callID:]
  -[VideoConferenceManager videoConference:didReceiveFirstRemoteFrameForCallID:]
  -[VideoConferenceManager videoConference:didRemoteVideoAttributesChange:forCallID:]
  -[VideoConferenceManager videoConference:remoteAudioPaused:callID:]
  -[VideoConferenceManager videoConference:remoteVideoPaused:callID:]
  -[VideoConferenceManager videoConference:didRemoteScreenAttributesChange:forCallID:]
  -[VideoConferenceManager videoConference:updateInputFrequencyLevel:]
  -[VideoConferenceManager videoConference:updateOutputFrequencyLevel:]
  -[VideoConferenceManager videoConference:updateInputMeterLevel:]
  -[VideoConferenceManager videoConference:updateOutputMeterLevel:]
  -[VideoConferenceManager videoConference:isRemoteAudioBelowThreshold:]
  -[VideoConferenceManager videoConference:inititiateRelayRequest:requestDict:]
  -[VideoConferenceManager videoConference:sendRelayUpdate:updateDict:]
  -[VideoConferenceManager videoConference:cancelRelayRequest:requestDict:]
  -[VideoConferenceManager videoConference:videoQualityNotificationForCallID:isDegraded:isRemote:]
  -[VideoConferenceManager videoConference:withCallID:networkHint:]
  -[VideoConferenceManager videoConference:didReceiveData:forCallID:]
  -[VideoConferenceManager videoConference:didChangeLocalVariablesForCallID:]
  -[VideoConferenceManager videoConference:remoteAudioEnabled:forCallID:]
  -[VideoConferenceManager videoConference:localAudioEnabled:forCallID:error:]
  -[VideoConferenceManager videoConference:remoteCallingModeChanged:forCallID:]
  -[VideoConferenceManager videoConference:closeConnectionForCallID:]
  -[VideoConferenceManager videoConference:receivedNoRemotePacketsForTime:callID:]
  -[VideoConferenceManager videoConference:didReceiveARPLData:fromCallID:]
  -[VideoConferenceManager SIPHandle]
  -[VideoConferenceManager setupVTPCallback]
  -[VideoConferenceManager createSIPWithPacketMultiplexMode:]
  -[VideoConferenceManager startSIPWithPacketMultiplexMode:transportType:]
  -[VideoConferenceManager isSIPHandleValid:]
  -[VideoConferenceManager cleanupVTP]
  -[VideoConferenceManager stopSIPWithTransportType:]
  -[VideoConferenceManager addVideoConference:]
  -[VideoConferenceManager removeVideoConference:]
  -[VideoConferenceManager setConferenceWithMic:]
  -[VideoConferenceManager conferenceWithMic]
  -[VideoConferenceManager conferenceForCallID:]
  -[VideoConferenceManager hasVideoConference:]
  -[VideoConferenceManager conferenceForParticipantID:]
  -[VideoConferenceManager conferenceForSourceDestinationInfo:]
  -[VideoConferenceManager pauseVideoConferences:]
  -[VideoConferenceManager broadcastCellTechChange:cellularMaxPktLen:]
  -[VideoConferenceManager getClientUUID:]
  -[VideoConferenceManager activeConference]
  -[VideoConferenceManager setActiveConference:]
  -[VideoConferenceManager vcList]
  -[VideoConferenceManager registerBlocksForConference]


VCControlChannelTransaction : VCObject
  // class methods
  +[VCControlChannelTransaction sendUnreliableMessage:sessionID:participantID:transactionID:transactionDelegate:]

  // instance methods
  -[VCControlChannelTransaction dealloc]
  -[VCControlChannelTransaction initWithTransportSessionID:participantID:transactionID:transactionDelegate:]
  -[VCControlChannelTransaction flushTransaction]
  -[VCControlChannelTransaction confirmedTransactionByParticipantID:sessionID:]
  -[VCControlChannelTransaction retryCountUsingFastRetries:]
  -[VCControlChannelTransaction retryTimeoutForRetryAttempt:usingFastRetries:]
  -[VCControlChannelTransaction sendReliableMessage:sessionID:participantID:timeout:useFastRetries:]


VCBTNotificationMonitor : NSObject
  // class methods
  +[VCBTNotificationMonitor sharedInstance]

  // instance methods
  -[VCBTNotificationMonitor dealloc]
  -[VCBTNotificationMonitor init]
  -[VCBTNotificationMonitor registerBTNotificationHandler:]
  -[VCBTNotificationMonitor unregisterBTNotificationHandler:]
  -[VCBTNotificationMonitor unregisterAllBTNotificationHandlers]
  -[VCBTNotificationMonitor setupBTEventHandler]
  -[VCBTNotificationMonitor processBTNotification:]
  -[VCBTNotificationMonitor registerDarwinNotification:]
  -[VCBTNotificationMonitor unregisterDarwinNotification:]
  -[VCBTNotificationMonitor registerForBluetoothImmediateNotifications]
  -[VCBTNotificationMonitor unregisterBluetoothImmediateNotifications]


VCAVFoundationCapture : VCVideoCapture <VCVideoSource, AVCaptureVideoDataOutputSampleBufferDelegate, VCEffectsManagerDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureDataOutputSynchronizerDelegate>
 @property  AVCaptureDepthDataOutput *depthDataOutput
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL faceMeshTrackingEnabled
 @property  BOOL effectsApplied

  // class methods
  +[VCAVFoundationCapture isServerProcess]
  +[VCAVFoundationCapture frameDurationForFrameRateRangeWithMinFrameRate:maxFrameRate:minFrameDuration:maxFrameDuration:desiredFrameRate:]

  // instance methods
  -[VCAVFoundationCapture setCinematicFramingEnabled:]
  -[VCAVFoundationCapture stop:]
  -[VCAVFoundationCapture dealloc]
  -[VCAVFoundationCapture captureOutput:didOutputSampleBuffer:fromConnection:]
  -[VCAVFoundationCapture setCameraZoomFactor:]
  -[VCAVFoundationCapture observeValueForKeyPath:ofObject:change:context:]
  -[VCAVFoundationCapture setOrientation:]
  -[VCAVFoundationCapture invalidate]
  -[VCAVFoundationCapture setFrameRate:]
  -[VCAVFoundationCapture startPreview]
  -[VCAVFoundationCapture setCameraZoomFactor:withRate:]
  -[VCAVFoundationCapture isPreviewRunning]
  -[VCAVFoundationCapture dataOutputSynchronizer:didOutputSynchronizedDataCollection:]
  -[VCAVFoundationCapture captureOutput:didOutputMetadataObjects:fromConnection:]
  -[VCAVFoundationCapture isFrontCamera]
  -[VCAVFoundationCapture startCaptureWithWidth:height:frameRate:]
  -[VCAVFoundationCapture setWidth:height:frameRate:]
  -[VCAVFoundationCapture copyColorInfo:]
  -[VCAVFoundationCapture configureCaptureWithToken:]
  -[VCAVFoundationCapture getFrameRate]
  -[VCAVFoundationCapture frameCount:]
  -[VCAVFoundationCapture frameBecameAvailableCount:figBufferQueueEmptyCount:figBufferQueueErrorCount:]
  -[VCAVFoundationCapture cameraSupportsFormatWidth:height:]
  -[VCAVFoundationCapture setViewPointCorrectionEnabled:]
  -[VCAVFoundationCapture getReportingStats:]
  -[VCAVFoundationCapture supportsPortraitResolution]
  -[VCAVFoundationCapture setBufferStatsBuffer:]
  -[VCAVFoundationCapture attachMetadata:toCVPixelBuffer:]
  -[VCAVFoundationCapture captureSessionNotification:]
  -[VCAVFoundationCapture encodeProcessedPixelBuffer:time:imageData:processTime:]
  -[VCAVFoundationCapture faceMeshTrackingEnabled]
  -[VCAVFoundationCapture setFaceMeshTrackingEnabled:]
  -[VCAVFoundationCapture effectsApplied]
  -[VCAVFoundationCapture setEffectsApplied:]
  -[VCAVFoundationCapture initWithCaptureServer:width:height:frameRate:videoSourceToken:cinematicFramingEnabled:videoOrientation:]
  -[VCAVFoundationCapture initializeOutputs]
  -[VCAVFoundationCapture setVideoCaptureOutputDelegate]
  -[VCAVFoundationCapture applyVideoRetainedBufferCountHint]
  -[VCAVFoundationCapture initializeVideoCaptureOutput]
  -[VCAVFoundationCapture resetDepthDataOutput]
  -[VCAVFoundationCapture shouldAddDepthData]
  -[VCAVFoundationCapture shouldAddTrackedFacesData]
  -[VCAVFoundationCapture configureMetadataTypesForOutput:]
  -[VCAVFoundationCapture setMetaDataObjectsDelegate]
  -[VCAVFoundationCapture initializeMetadataOutput]
  -[VCAVFoundationCapture tearDownSynchronizer]
  -[VCAVFoundationCapture initializeSynchronizedOutputs]
  -[VCAVFoundationCapture newResizedFrame:time:]
  -[VCAVFoundationCapture shouldResizeWithCaptureSize:requestSize:]
  -[VCAVFoundationCapture updateRenderProcessFrameRate:]
  -[VCAVFoundationCapture processMetadataObjects:]
  -[VCAVFoundationCapture processSampleBuffer:captureOutput:]
  -[VCAVFoundationCapture processSampleBuffer:depthData:faceData:captureDevice:clock:]
  -[VCAVFoundationCapture processViewPointCorrection:shouldProcess:]
  -[VCAVFoundationCapture updateVideoCaptureServerWithSampleBuffer:time:frontCamera:shouldMirrorFrontPreview:isFromEffects:]
  -[VCAVFoundationCapture resetViewPointLogging]
  -[VCAVFoundationCapture sendImageDataForSampleBuffer:depthData:faceData:captureDevice:originalSize:]
  -[VCAVFoundationCapture captureTierForEncodingSize:]
  -[VCAVFoundationCapture setFrameRateInternal:forceSourceFrameRateDidChange:]
  -[VCAVFoundationCapture getMaxAllowedFrameRate:]
  -[VCAVFoundationCapture getSupportedMaxDeviceFrameRateWithFrameRateCap:]
  -[VCAVFoundationCapture cameraSupportsNoQueueFormatWidth:height:]
  -[VCAVFoundationCapture isBackCamera]
  -[VCAVFoundationCapture shouldAdjustCaptureWithOrientation:]
  -[VCAVFoundationCapture shouldUseCameraVideoStabilization]
  -[VCAVFoundationCapture shouldUseViewpointCorrection]
  -[VCAVFoundationCapture supportsViewpointCorrection]
  -[VCAVFoundationCapture setCamera:width:height:frameRate:]
  -[VCAVFoundationCapture updateCameraZoomCapability]
  -[VCAVFoundationCapture configureCaptureDeviceDepthFormat]
  -[VCAVFoundationCapture updateDepthFrameRate]
  -[VCAVFoundationCapture isVideoDeviceInputSupportCFraming:]
  -[VCAVFoundationCapture lockAVCaptureDeviceInputForConfiguration]
  -[VCAVFoundationCapture unlockAVCaptureDeviceInputForConfiguration]
  -[VCAVFoundationCapture setVideoDeviceToSelectedDevice:]
  -[VCAVFoundationCapture observeBackgroundBlurOnDevice:observe:]
  -[VCAVFoundationCapture getOptimizedCameraCaptureWidth:height:]
  -[VCAVFoundationCapture isFrameRateActive:captureFormat:]
  -[VCAVFoundationCapture setVideoDeviceToWidth:height:frameRate:]
  -[VCAVFoundationCapture cameraFormatForWidth:height:]
  -[VCAVFoundationCapture isFormatMaxFrameRateSupported:frameRate:]
  -[VCAVFoundationCapture hasRequiredAttributes:]
  -[VCAVFoundationCapture preferredAttributes:baseFormat:]
  -[VCAVFoundationCapture getCaptureFormatList]
  -[VCAVFoundationCapture cameraFormatForWidth:height:frameRate:]
  -[VCAVFoundationCapture cameraFormatForWidthWithList:height:frameRate:formatList:]
  -[VCAVFoundationCapture frameDurationForVideoDeviceFormat:frameRate:]
  -[VCAVFoundationCapture prepareSynchronizedOutputs:]
  -[VCAVFoundationCapture setVideoOrientationAndMirroredForDevice:]
  -[VCAVFoundationCapture setVideoStabilization:]
  -[VCAVFoundationCapture depthDataOutput]


VCMediaNegotiationBlob : PBCodable <NSCopying>
 @property  BOOL hasAllowDynamicMaxBitrate
 @property  BOOL allowDynamicMaxBitrate
 @property  BOOL hasAllowsContentsChangeWithAspectPreservation
 @property  BOOL allowsContentsChangeWithAspectPreservation
 @property  BOOL hasAudioSettings
 @property  VCMediaNegotiationBlobAudioSettings *audioSettings
 @property  BOOL hasVideoSettings
 @property  VCMediaNegotiationBlobVideoSettings *videoSettings
 @property  BOOL hasScreenSettings
 @property  VCMediaNegotiationBlobVideoSettings *screenSettings
 @property  BOOL hasUserAgent
 @property  NSString *userAgent
 @property  BOOL hasBasebandCodec
 @property  NSString *basebandCodec
 @property  BOOL hasBasebandCodecSampleRate
 @property  unsigned int basebandCodecSampleRate
 @property  NSMutableArray *bandwidthSettings
 @property  BOOL hasCaptionsSettings
 @property  VCMediaNegotiationBlobCaptionsSettings *captionsSettings
 @property  NSMutableArray *multiwayAudioStreams
 @property  BOOL hasMomentsSettings
 @property  VCMediaNegotiationBlobMomentsSettings *momentsSettings
 @property  BOOL hasNtpTime
 @property  unsigned long ntpTime
 @property  BOOL hasBlobVersion
 @property  unsigned int blobVersion
 @property  NSMutableArray *multiwayVideoStreams
 @property  BOOL hasMediaControlInfoVersion
 @property  unsigned int mediaControlInfoVersion
 @property  BOOL hasFaceTimeSettings
 @property  VCMediaNegotiationFaceTimeSettings *faceTimeSettings

  // class methods
  +[VCMediaNegotiationBlob bandwidthSettingsType]
  +[VCMediaNegotiationBlob multiwayAudioStreamsType]
  +[VCMediaNegotiationBlob multiwayVideoStreamType]

  // instance methods
  -[VCMediaNegotiationBlob setUserAgent:]
  -[VCMediaNegotiationBlob userAgent]
  -[VCMediaNegotiationBlob copyTo:]
  -[VCMediaNegotiationBlob dealloc]
  -[VCMediaNegotiationBlob setAudioSettings:]
  -[VCMediaNegotiationBlob mergeFrom:]
  -[VCMediaNegotiationBlob dictionaryRepresentation]
  -[VCMediaNegotiationBlob copyWithZone:]
  -[VCMediaNegotiationBlob readFrom:]
  -[VCMediaNegotiationBlob audioSettings]
  -[VCMediaNegotiationBlob writeTo:]
  -[VCMediaNegotiationBlob isEqual:]
  -[VCMediaNegotiationBlob setVideoSettings:]
  -[VCMediaNegotiationBlob videoSettings]
  -[VCMediaNegotiationBlob hasUserAgent]
  -[VCMediaNegotiationBlob hasMomentsSettings]
  -[VCMediaNegotiationBlob bandwidthSettings]
  -[VCMediaNegotiationBlob setBandwidthSettings:]
  -[VCMediaNegotiationBlob momentsSettings]
  -[VCMediaNegotiationBlob setMomentsSettings:]
  -[VCMediaNegotiationBlob allowsContentsChangeWithAspectPreservation]
  -[VCMediaNegotiationBlob setAllowsContentsChangeWithAspectPreservation:]
  -[VCMediaNegotiationBlob basebandCodecSampleRate]
  -[VCMediaNegotiationBlob addMultiwayVideoStream:]
  -[VCMediaNegotiationBlob basebandCodec]
  -[VCMediaNegotiationBlob setBasebandCodec:]
  -[VCMediaNegotiationBlob setBasebandCodecSampleRate:]
  -[VCMediaNegotiationBlob mediaControlInfoVersion]
  -[VCMediaNegotiationBlob setMediaControlInfoVersion:]
  -[VCMediaNegotiationBlob multiwayAudioStreams]
  -[VCMediaNegotiationBlob setMultiwayAudioStreams:]
  -[VCMediaNegotiationBlob multiwayVideoStreams]
  -[VCMediaNegotiationBlob setMultiwayVideoStreams:]
  -[VCMediaNegotiationBlob setNtpTime:]
  -[VCMediaNegotiationBlob setHasNtpTime:]
  -[VCMediaNegotiationBlob hasNtpTime]
  -[VCMediaNegotiationBlob ntpTime]
  -[VCMediaNegotiationBlob setAllowDynamicMaxBitrate:]
  -[VCMediaNegotiationBlob setHasAllowDynamicMaxBitrate:]
  -[VCMediaNegotiationBlob hasAllowDynamicMaxBitrate]
  -[VCMediaNegotiationBlob setHasAllowsContentsChangeWithAspectPreservation:]
  -[VCMediaNegotiationBlob hasAllowsContentsChangeWithAspectPreservation]
  -[VCMediaNegotiationBlob hasAudioSettings]
  -[VCMediaNegotiationBlob hasVideoSettings]
  -[VCMediaNegotiationBlob hasScreenSettings]
  -[VCMediaNegotiationBlob hasBasebandCodec]
  -[VCMediaNegotiationBlob setHasBasebandCodecSampleRate:]
  -[VCMediaNegotiationBlob hasBasebandCodecSampleRate]
  -[VCMediaNegotiationBlob clearBandwidthSettings]
  -[VCMediaNegotiationBlob addBandwidthSettings:]
  -[VCMediaNegotiationBlob bandwidthSettingsCount]
  -[VCMediaNegotiationBlob bandwidthSettingsAtIndex:]
  -[VCMediaNegotiationBlob hasCaptionsSettings]
  -[VCMediaNegotiationBlob clearMultiwayAudioStreams]
  -[VCMediaNegotiationBlob addMultiwayAudioStreams:]
  -[VCMediaNegotiationBlob multiwayAudioStreamsCount]
  -[VCMediaNegotiationBlob multiwayAudioStreamsAtIndex:]
  -[VCMediaNegotiationBlob setBlobVersion:]
  -[VCMediaNegotiationBlob setHasBlobVersion:]
  -[VCMediaNegotiationBlob hasBlobVersion]
  -[VCMediaNegotiationBlob clearMultiwayVideoStreams]
  -[VCMediaNegotiationBlob multiwayVideoStreamsCount]
  -[VCMediaNegotiationBlob multiwayVideoStreamAtIndex:]
  -[VCMediaNegotiationBlob setHasMediaControlInfoVersion:]
  -[VCMediaNegotiationBlob hasMediaControlInfoVersion]
  -[VCMediaNegotiationBlob hasFaceTimeSettings]
  -[VCMediaNegotiationBlob allowDynamicMaxBitrate]
  -[VCMediaNegotiationBlob screenSettings]
  -[VCMediaNegotiationBlob setScreenSettings:]
  -[VCMediaNegotiationBlob captionsSettings]
  -[VCMediaNegotiationBlob setCaptionsSettings:]
  -[VCMediaNegotiationBlob blobVersion]
  -[VCMediaNegotiationBlob faceTimeSettings]
  -[VCMediaNegotiationBlob setFaceTimeSettings:]
  -[VCMediaNegotiationBlob formatBandwidthConfig:maxBanxwidth:bandwidthString:]
  -[VCMediaNegotiationBlob printBandwidthSettingsWithLogFile:]
  -[VCMediaNegotiationBlob printCaptionsSettingsWithLogFile:]
  -[VCMediaNegotiationBlob printMomentsSettingsWithLogFile:]
  -[VCMediaNegotiationBlob printMultiwayAudioStreamsWithLogFile:]
  -[VCMediaNegotiationBlob printMultiwayVideoStreamsWithLogFile:]
  -[VCMediaNegotiationBlob printWithTitle:blobSize:logFile:]


VCVideoTransmitterDefault : VCVideoTransmitterBase <VCVideoReceiverFeedbackDelegate>
 @property  ^{tagHANDLE=i} videoTransmitterHandle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCVideoTransmitterDefault setupBandwidthEstimationOptions:featureString:]

  // instance methods
  -[VCVideoTransmitterDefault initWithConfig:]
  -[VCVideoTransmitterDefault dealloc]
  -[VCVideoTransmitterDefault startVideo]
  -[VCVideoTransmitterDefault stopVideo]
  -[VCVideoTransmitterDefault enqueueVideoFrame:frameTime:cameraStatusBits:]
  -[VCVideoTransmitterDefault generateKeyFrameWithFIRType:]
  -[VCVideoTransmitterDefault setTemporaryMaximumBitrate:]
  -[VCVideoTransmitterDefault setTargetBitrate:]
  -[VCVideoTransmitterDefault setKeyFrameOnlyStreamID:]
  -[VCVideoTransmitterDefault setStreamIDs:numOfStreamIDs:repairedStreamIDs:numOfRepairedStreamIDs:]
  -[VCVideoTransmitterDefault setFECRatio:]
  -[VCVideoTransmitterDefault setFECRedundancyVector:]
  -[VCVideoTransmitterDefault setMediaSuggestion:]
  -[VCVideoTransmitterDefault setEncodingMode:]
  -[VCVideoTransmitterDefault handleThermalLevelChange:]
  -[VCVideoTransmitterDefault updateWindowState:isLocal:windowRect:]
  -[VCVideoTransmitterDefault handleActiveConnectionChange:]
  -[VCVideoTransmitterDefault collectChannelMetrics:interval:]
  -[VCVideoTransmitterDefault setUpAspectRatios:]
  -[VCVideoTransmitterDefault setUpAspectRatiosFromFeatureListString:]
  -[VCVideoTransmitterDefault setTemporalBitrateArray:]
  -[VCVideoTransmitterDefault setHighestActiveQualityIndex:]
  -[VCVideoTransmitterDefault computeTimestamp:hostTime:forFrame:]
  -[VCVideoTransmitterDefault setIsServerBasedBandwidthProbingEnabled:]
  -[VCVideoTransmitterDefault minKeyFrameGenerationIntervalForMode:]
  -[VCVideoTransmitterDefault videoTransmitterHandle]


VCRedundancyControlAlgorithmVideoMultiway : NSObject <VCRedundancyControlAlgorithm>
 @property  unsigned int redundancyPercentage
 @property  double redundancyInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRedundancyControlAlgorithmVideoMultiway init]
  -[VCRedundancyControlAlgorithmVideoMultiway updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControlAlgorithmVideoMultiway redundancyPercentage]
  -[VCRedundancyControlAlgorithmVideoMultiway redundancyInterval]
  -[VCRedundancyControlAlgorithmVideoMultiway updateRedundancyPercentage]


SDPMediaLine : NSObject
 @property  unsigned int rtpId
 @property  BOOL allowRTCPFB
 @property  int rtcpPort
 @property  int rtpPort
 @property  NSArray *attributes
 @property  NSArray *payloads
 @property  VCImageAttributeRules *imageAttributeRules
 @property  NSString *string

  // class methods
  +[SDPMediaLine fillImageStructWithDictionary:forInterface:imageStruct:]
  +[SDPMediaLine fillImageStruct:imageStruct:]
  +[SDPMediaLine fillImageArray:imageArray:]

  // instance methods
  -[SDPMediaLine attributes]
  -[SDPMediaLine string]
  -[SDPMediaLine dealloc]
  -[SDPMediaLine payloads]
  -[SDPMediaLine addAttribute:]
  -[SDPMediaLine init]
  -[SDPMediaLine rtpPort]
  -[SDPMediaLine createVideoImageAttr:direction:dimensions:count:]
  -[SDPMediaLine allowRTCPFB]
  -[SDPMediaLine parseMediaLine:]
  -[SDPMediaLine imageAttributeRules]
  -[SDPMediaLine setImageAttributeRules:]
  -[SDPMediaLine initWithParser:rtpPort:payloads:]
  -[SDPMediaLine addPayload:rtpMap:formatParameters:]
  -[SDPMediaLine addVideoImageAttr:ForPayload:]
  -[SDPMediaLine appendPayload:dimensions:direction:attributeString:]
  -[SDPMediaLine addImageAttributeRules:transportType:payload:direction:attributeString:]
  -[SDPMediaLine addWifiRules:cellularRules:payload:direction:]
  -[SDPMediaLine videoImageAttributes:]
  -[SDPMediaLine getVideoSendImages:]
  -[SDPMediaLine getVideoRecvImages:]
  -[SDPMediaLine supportImage:width:height:rate:]
  -[SDPMediaLine videoDisplayAttribute:withHeight:]
  -[SDPMediaLine parseImageAttributeRules:]
  -[SDPMediaLine parseAttribute:]
  -[SDPMediaLine rtpId]
  -[SDPMediaLine setRtpId:]
  -[SDPMediaLine rtcpPort]


VCCaptionsTranscriptionArchiving : NSObject
  // class methods
  +[VCCaptionsTranscriptionArchiving archivedTranscription:error:]
  +[VCCaptionsTranscriptionArchiving unarchivedTranscriptionFromData:error:]


VCSession : VCObject <VCSessionParticipantStreamDelegate, AVCRateControllerDelegate, VCRateControlMediaControllerDelegate, VCMediaStreamNotification, RTCPReportProvider, VCSecurityEventHandler, VCSessionParticipantDelegate, VCNetworkFeedbackControllerDelegate, VCSessionStatsControllerDelegate, VCConnectionChangedHandler, VCMomentTransportDelegate>
 @property  NSMutableDictionary *optInDictionary
 @property  BOOL isOneToOneRemoteMediaStalling
 @property  ^{tagVCMediaQueue=} mediaQueue
 @property  VCSessionStatsController *sessionStatsController
 @property  NSObject<OS_nw_activity> *parentNWActivity
 @property  NSObject<OS_nw_activity> *nwActivity
 @property  NSDictionary *capabilities
 @property  NSDictionary *transportMetadata
 @property  VCSessionParticipant *localParticipant
 @property  NSArray *remoteParticipants
 @property  VCSessionParticipantRemote *oneToOneRemoteParticipant
 @property  <VCSessionDelegate> *delegate
 @property  NSString *idsDestination
 @property  NSString *uuid
 @property  unsigned int transportSessionID
 @property  <VCConnectionProtocol> *currentActiveConnection
 @property  VCTransportSession *transportSession
 @property  AVCRateController *downlinkRateController
 @property  NSMutableDictionary *remoteParticipantsMapByServerID
 @property  VCSessionMessaging *sessionMessaging
 @property  BOOL oneToOneModeEnabled
 @property  BOOL sharingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCSession terminateProcess:terminateSource:agent:]
  +[VCSession deviceRoleForSessionMode:]
  +[VCSession addUUIDToMutableData:fromUUIDString:]
  +[VCSession cleanupControlChannelParticipantConfig:]
  +[VCSession isServerPacketRetransmissionEnabledForVideo]
  +[VCSession mediaStateMessageStreamGroupKeysForMediaType:]
  +[VCSession mediaStateMessageKeyForMediaType:]
  +[VCSession mediaTypeForMediaStateMessageKey:]
  +[VCSession mediaStateMessageValueForMediaState:]
  +[VCSession mediaStateForMediaStateMessageValue:]

  // instance methods
  -[VCSession updateConfiguration:]
  -[VCSession tearDown]
  -[VCSession delegate]
  -[VCSession dealloc]
  -[VCSession uuid]
  -[VCSession capabilities]
  -[VCSession sharingEnabled]
  -[VCSession localParticipant]
  -[VCSession start]
  -[VCSession removeParticipant:]
  -[VCSession setState:]
  -[VCSession nwActivity]
  -[VCSession setSharingEnabled:]
  -[VCSession mediaQueue]
  -[VCSession idsDestination]
  -[VCSession setOneToOneModeEnabled:]
  -[VCSession oneToOneModeEnabled]
  -[VCSession setNwActivity:]
  -[VCSession stopWithError:]
  -[VCSession transportMetadata]
  -[VCSession transportSession]
  -[VCSession didServerDie]
  -[VCSession learntBitrateForSegment:defaultValue:]
  -[VCSession cleanupNwActivity]
  -[VCSession maxRemoteParticipants30fps]
  -[VCSession mediaStream:didReceiveNewMediaKeyIndex:]
  -[VCSession setParentNWActivity:]
  -[VCSession parentNWActivity]
  -[VCSession handleActiveConnectionChange:]
  -[VCSession generateReceptionReportList:reportCount:]
  -[VCSession setMediaQueue:]
  -[VCSession cleanupSpatialAudio]
  -[VCSession setupSpatialAudio]
  -[VCSession remoteCellTechStateUpdate:maxRemoteBitrate:]
  -[VCSession notifyDelegateActiveConnectionDidChange]
  -[VCSession initWithRelevantStorebagEntries]
  -[VCSession vcrcServerBagProfileNumber]
  -[VCSession setupDisconnectMessage]
  -[VCSession setupPiPStateChangeMessage]
  -[VCSession setupCellTechChangeMessages]
  -[VCSession setupMomentsMessages]
  -[VCSession setupPreferredInterfaceMessage]
  -[VCSession processSymptomFromMessage:participantID:isLocalInitiated:isLocalSideOnly:]
  -[VCSession rateController:targetBitrateDidChange:rateChangeCounter:]
  -[VCSession mediaController:mediaSuggestionDidChange:]
  -[VCSession moments:shouldProcessRequest:recipientID:]
  -[VCSession stopTimeoutTimer]
  -[VCSession startDeallocTimer]
  -[VCSession vcSessionParticipant:didStart:error:]
  -[VCSession vcSessionParticipant:didStopWithError:]
  -[VCSession didReceiveRTCPPackets:]
  -[VCSession mediaStream:didReceiveFlushRequestWithPayloads:]
  -[VCSession handleEncryptionInfoChange:]
  -[VCSession resetDecryptionTimeout]
  -[VCSession didEncryptionKeyRollTimeout]
  -[VCSession vcSessionParticipant:audioEnabled:didSucceed:error:]
  -[VCSession vcSessionParticipant:videoEnabled:didSucceed:error:]
  -[VCSession vcSessionParticipant:screenEnabled:didSucceed:error:]
  -[VCSession vcSessionParticipant:remoteAudioEnabledDidChange:]
  -[VCSession vcSessionParticipant:remoteVideoEnabledDidChange:]
  -[VCSession vcSessionParticipant:remoteScreenEnabledDidChange:]
  -[VCSession vcSessionParticipant:audioPaused:didSucceed:error:]
  -[VCSession vcSessionParticipant:videoPaused:didSucceed:error:]
  -[VCSession vcSessionParticipant:mediaStateDidChange:forMediaType:didSucceed:error:]
  -[VCSession vcSessionParticipant:remoteMediaStateDidChange:forMediaType:]
  -[VCSession vcSessionParticipant:remoteAudioPausedDidChange:]
  -[VCSession vcSessionParticipant:remoteVideoPausedDidChange:]
  -[VCSession vcSessionParticipant:didChangeMediaPriority:description:]
  -[VCSession vcSessionParticipant:didChangeActualNetworkBitrateForStreamGroupID:]
  -[VCSession vcSessionParticipant:requestKeyFrameGenerationWithStreamID:firType:]
  -[VCSession vcSessionParticipant:didSwitchFromStreamID:toStreamID:]
  -[VCSession vcSessionParticipant:didRequestVideoRedundancy:]
  -[VCSession vcSessionParticipantDidChangeSendingStreams:]
  -[VCSession vcSessionParticipantDidChangeReceivingStreams:]
  -[VCSession vcSessionParticipantDidMediaDecryptionTimeOut:]
  -[VCSession vcSessionParticipantDidMediaDecryptionTimeOutForMKMRecovery:]
  -[VCSession vcSessionParticipantFetchStreamGroupState:]
  -[VCSession vcSessionParticipantDidRemoteMediaStallTimeout:duration:]
  -[VCSession vcSessionParticipant:didDetectError:]
  -[VCSession vcSessionParticipant:oneToOneModeDidChange:]
  -[VCSession recommendedSettingsChanged:]
  -[VCSession reportingIntervalChanged:]
  -[VCSession preWarmStateChanged:]
  -[VCSession didReceivedSessionStatsAtTime:]
  -[VCSession initWithIDSDestination:configurationDict:negotiationData:delegate:processId:isGKVoiceChat:]
  -[VCSession setTransportConnectionSelectionVersionWithLocalFrameWorkVersion:remoteFrameworkVersion:]
  -[VCSession selectDataPath]
  -[VCSession setupTransportSessionWithDestination:]
  -[VCSession sessionStateToString:]
  -[VCSession participantsToString]
  -[VCSession addParticipantConfigurations:]
  -[VCSession oneToOneRemoteParticipant]
  -[VCSession stopWithError:didRemoteCancel:]
  -[VCSession participantForID:]
  -[VCSession mediaStateChangedForParticipant:]
  -[VCSession remoteParticipants]
  -[VCSession reportingSetUserInfo]
  -[VCSession setOneToOneModeEnabledFromRemoteSignal:]
  -[VCSession dispatchedSetSharingEnabled:]
  -[VCSession sendStreamGroupStateToParticipant:]
  -[VCSession setTransportSessionEventHandler]
  -[VCSession applyLinkConstrains:]
  -[VCSession applyRemoteLinkConstrains:]
  -[VCSession notifyRemoteOfCellTechChange:remoteParticipant:]
  -[VCSession handleCellTechChange:connection:]
  -[VCSession handlePrimaryConnectionChanged:]
  -[VCSession handleCellularMTUChanged:connection:]
  -[VCSession dispatchedHandleActiveConnectionChange:]
  -[VCSession handleActiveConnectionChangeForMultiway:]
  -[VCSession handlePreferredInterfaceForDuplicationUpdate:notifyPeer:enableDuplication:isMediaUnrecoverableSignal:]
  -[VCSession calculateExpectedTotalNetworkBitrateDownlink]
  -[VCSession calculateExpectedTotalNetworkBitrateUplink]
  -[VCSession updateNetworkFeedbackControllerReport:]
  -[VCSession flushBasebandWithPayloads:]
  -[VCSession updatePresentationInfo:]
  -[VCSession applySpatialMetadata]
  -[VCSession sendRateControlConfigToRemoteParticipant:]
  -[VCSession updateParticipantWindowState]
  -[VCSession updateParticipantConfigurations:]
  -[VCSession distributeBitrateAndOptInToStreamIDsWithSeamlessTransition:]
  -[VCSession reportingSessionDownlinkOptInEvent:selectedMediaEntriesForParticipants:]
  -[VCSession reportingSessionStopEventWithError:]
  -[VCSession setSessionInfoSynchronizerCallbacks]
  -[VCSession setSessionInfoSynchronizerErrorResponseCallback]
  -[VCSession setSessionInfoSynchronizerPeerSubscribedStreamsCallback]
  -[VCSession vcrcServerBagWithOperatingMode:]
  -[VCSession setupRateControllersMultiway]
  -[VCSession didRemoveSpatialMetadataEntry]
  -[VCSession reserveAudioChannelForMediaType:spatialAudioSourceID:]
  -[VCSession updateMultiwayRateControllerWithActiveConnection:isScreenEnabled:isLocal:]
  -[VCSession startRateControllersMultiwayFromOneToOne:]
  -[VCSession setupUplinkBitrateCaps]
  -[VCSession createMediaQueue]
  -[VCSession handleMediaQueueSizeExceedThresholdWithQueueSize:streamID:type:]
  -[VCSession setMediaQueuePeakBitrateWithTargetBitrate:]
  -[VCSession updateLocalVideoCaptureFrameRate]
  -[VCSession updateLocalStreamConfiguration]
  -[VCSession optInStreamWithIDSStreamIDs:]
  -[VCSession optOutStreamWithIDSStreamIDs:]
  -[VCSession detectSSRCCollision:resetNeeded:]
  -[VCSession handleEncryptionInfoEvent:]
  -[VCSession handleMembershipChangeInfoEvent:]
  -[VCSession setDelegatesForRemoteParticipant:]
  -[VCSession messageMediaInitialStateToParticipant:]
  -[VCSession broadcastInitialMediaState]
  -[VCSession newEncryptionLabelWithLocalUUID:remoteUUID:]
  -[VCSession composeControlChannelParticipantConfig:withRemoteParticipant:]
  -[VCSession registerRemoteParticipantToSession:]
  -[VCSession removeDelegatesForRemoteParticipant:]
  -[VCSession unregisterRemoteParticipantFromSession:]
  -[VCSession sendSymptomsToRemoteParticipants:symptom:groupID:]
  -[VCSession cleanupVCRC]
  -[VCSession setupMultiwayABTesting]
  -[VCSession registerMediaStreamNotificationDelegateForParticipant:]
  -[VCSession unregisterMediaStreamNotificationDelegateForParticipant:]
  -[VCSession didReceiveReportPacket:arrivalNTPTime:]
  -[VCSession didReceiveCustomReportPacket:arrivalNTPTime:]
  -[VCSession computeConversationTimeBaseTruncated]
  -[VCSession getClientSpecificUserInfo]
  -[VCSession reportingSessionParticipantEvent:withStreamID:]
  -[VCSession reportingSessionParticipantEvent:withParticipant:]
  -[VCSession reportingSessionParticipantEvent:keyChangeReason:newMKI:]
  -[VCSession reportingSessionParticipantEvent:withParticipant:keyChangeReason:newMKI:]
  -[VCSession reportingSessionParticipantEvent:withParticipant:keyChangeReason:newMKI:withStreamID:]
  -[VCSession reportingMomentsWithRequest:recipientID:]
  -[VCSession reportingMomentsToGreenTeaWithRequest:]
  -[VCSession collectSessionEventKeyFields:eventType:withParticipant:keyChangeReason:newMKI:withStreamID:]
  -[VCSession reportingSessionRemoteParticipantEvent:withParticipant:value:]
  -[VCSession dispatchedAddParticipantWithConfig:]
  -[VCSession configureRemoteParticipant:withConfig:]
  -[VCSession dispatchedAddParticipantConfigurations:]
  -[VCSession dispatchedRemoveParticipant:]
  -[VCSession dispatchedStart]
  -[VCSession dispatchedStopWithError:]
  -[VCSession dispatchedStopWithError:didRemoteCancel:]
  -[VCSession dispatchedTransportStop]
  -[VCSession dispatchedUpdateConfiguration:]
  -[VCSession stopAllParticipants]
  -[VCSession dispatchedParticipant:didStart:error:]
  -[VCSession setupOneToOneVideoReceiverDelegate]
  -[VCSession setupOneToOneVideoStreamDelegate]
  -[VCSession processDidStop]
  -[VCSession dispatchedParticipant:didStopWithError:]
  -[VCSession newNetworkBitrateString:]
  -[VCSession generateReportDictionary:]
  -[VCSession registerReportingTask]
  -[VCSession unregisterReportingTask]
  -[VCSession mediaQualityDegraded:]
  -[VCSession didReceiveMomentsRequest:]
  -[VCSession additionalFlushCountToOneToOneRateController:]
  -[VCSession transportSessionID]
  -[VCSession currentActiveConnection]
  -[VCSession setCurrentActiveConnection:]
  -[VCSession optInDictionary]
  -[VCSession setOptInDictionary:]
  -[VCSession remoteParticipantsMapByServerID]
  -[VCSession setRemoteParticipantsMapByServerID:]
  -[VCSession downlinkRateController]
  -[VCSession sessionMessaging]
  -[VCSession setSessionMessaging:]
  -[VCSession sessionStatsController]
  -[VCSession isOneToOneRemoteMediaStalling]
  -[VCSession setIsOneToOneRemoteMediaStalling:]
  -[VCSession setIsOneToOneRemoteMediaStalling:]
  -[VCSession setupOneToOne]
  -[VCSession setupOneToOneMediaQueue]
  -[VCSession newNegotiatorForOneToOneWithRemoteParticipant:]
  -[VCSession setOneToOneConfigOnRemoteParticipant:]
  -[VCSession setupRateControllerOneToOne]
  -[VCSession updateOneToOneRateControllerForVideoEnabled:]
  -[VCSession cleanupRateControllerOneToOne]
  -[VCSession configureLocalParticipantWithOneToOneRemoteParticipant:isInitialConfiguration:]
  -[VCSession setupOneToOneMediaControlInfoGeneratorsWithVersion:oneToOneConfig:videoEnabled:]
  -[VCSession newParticipantOneToOneConfigWithIDSParticipantID:isLocal:mediaControlInfoVersion:videoEnabled:screenEnabled:remoteParticipant:]
  -[VCSession startRateControllerOneToOne]
  -[VCSession stopRateControllerOneToOne]
  -[VCSession isOneToOneUsingVideo]
  -[VCSession configureRemoteParticipantForOneToOne:]
  -[VCSession reportExistingParticipantsAnew]
  -[VCSession reportCompletedSwitchingToOneToOne:]
  -[VCSession reportSwitchingError:errorEvent:]
  -[VCSession oneToOneToMultiwaySwitchSuspend]
  -[VCSession oneToOneToMultiwaySwitchResume]
  -[VCSession oneToOneToMultiwaySwitchConfigure]
  -[VCSession switchFromOneToOneToMultiway]
  -[VCSession messageExistingParticipantsPostUpgrade]
  -[VCSession multiwayToOneToOneSwitchSuspend]
  -[VCSession multiwayToOneToOneSwitchResume]
  -[VCSession multiwayToOneToOneSwitchConfigure]
  -[VCSession switchFromMultiwayToOneToOne]
  -[VCSession cleanupOneToOneMediaQueue]
  -[VCSession cleanupOneToOne]
  -[VCSession cleanupOneToOneDelegates]
  -[VCSession cleanupOneToOneVideoReceiverDelegate]
  -[VCSession cleanUpOneToOneVideoStreamDelegate]
  -[VCSession startReportingForOneToOneEnabled:]
  -[VCSession renewOneToOneMediaQueue]
  -[VCSession setupOneToOneAdaptiveLearning]
  -[VCSession negotiateOneToOneWithRemoteParticipant:]
  -[VCSession configureOneToOneRateController:isUsingVideo:]
  -[VCSession addOneToOneParticipant:]
  -[VCSession completeTransitionToOneToOneEnabled:]
  -[VCSession completionHandlerOneToOneEnabled:didSucceed:]
  -[VCSession dispatchedSetOneToOneModeEnabled:isLocal:]
  -[VCSession applyNegotiatedOneToOneFaceTimeSettings]
  -[VCSession setupOneToOneABTesting]
  -[VCSession startOneToOne]
  -[VCSession reportActiveConnectionOneToOne]
  -[VCSession handleActiveConnectionChangeForOneToOne:]
  -[VCSession createSessionMessaging]
  -[VCSession destroySessionMessaging]
  -[VCSession startSessionMessaging]
  -[VCSession stopSessionMessaging]
  -[VCSession broadcastMessage:withTopic:]
  -[VCSession broadcastMessageDictionary:withTopic:]
  -[VCSession broadcastMessageDictionary:withTopic:toVersion:]
  -[VCSession broadcastSingleStateMessage:withTopic:]
  -[VCSession setupAudioEnabledMessages]
  -[VCSession setupVideoEnabledMessages]
  -[VCSession setupStreamGroupStateFetchMessage]
  -[VCSession setupAudioPausedMessages]
  -[VCSession setupOneToOneEnabledMessages]
  -[VCSession setupVideoPausedMessages]
  -[VCSession setupKeyFrameGenerationMessages]
  -[VCSession setupSymptomEnabledMessages]
  -[VCSession setupWRMAlertUpdateMessage]
  -[VCSession generateKeyFrameWithReceivedMessage:]
  -[VCSession setupVideoRedundancyMessages]
  -[VCSession setupMediaQualityDegradedMessage]
  -[VCSession setupRateControlConfigMessage]
  -[VCSession setupLinkConstrainsChangedMessages]
  -[VCSession stateMessageDictionary]
  -[VCSession broadcastMediaStateUpdateMessage]
  -[VCSession sendMediaStateUpdateMessageToRemoteParticipant:]
  -[VCSession validateStreamGroup:state:]
  -[VCSession setupMediaStateUpdateMessage]
  -[VCSession processStreamGroupStateMessageKey:value:mediaTypeStates:]
  -[VCSession processMediaTypeStatesWithMessage:mediaTypeStates:]
  -[VCSession processMediaStateMessage:remoteParticipantID:]


AVCScreenCapture : NSObject
 @property  <AVCScreenCaptureDelegate> *delegate

  // class methods
  +[AVCScreenCapture capabilities]
  +[AVCScreenCapture captureCapabilities]

  // instance methods
  -[AVCScreenCapture delegate]
  -[AVCScreenCapture stopCapture]
  -[AVCScreenCapture dealloc]
  -[AVCScreenCapture startCapture]
  -[AVCScreenCapture registerBlocksForNotifications]
  -[AVCScreenCapture deregisterBlocksForNotifications]
  -[AVCScreenCapture initWithDelegate:withConfig:]
  -[AVCScreenCapture newNSErrorWithErrorDictionary:]
  -[AVCScreenCapture updateScreenCaptureWithConfig:]
  -[AVCScreenCapture reportScreenShareIsStarting:]


VCAudioRelayIOControllerSettings : NSObject
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} audioFormat
 @property  r^{_VCRemoteCodecInfo=Id} remoteCodecInfo

  // instance methods
  -[VCAudioRelayIOControllerSettings audioFormat]
  -[VCAudioRelayIOControllerSettings remoteCodecInfo]
  -[VCAudioRelayIOControllerSettings initWithAudioFormat:remoteCodecInfo:]


VCAudioRelayIOController : NSObject <VCAudioIOControllerControl>
 @property  NSDictionary *reportingStats
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioRelayIOController initializeStateStrings]
  +[VCAudioRelayIOController sharedInstanceRemoteFacing]
  +[VCAudioRelayIOController sharedInstanceClientFacing]
  +[VCAudioRelayIOController sharedInstanceSafeViewRemoteFacing]
  +[VCAudioRelayIOController sharedInstanceSafeViewClientFacing]

  // instance methods
  -[VCAudioRelayIOController retain]
  -[VCAudioRelayIOController removeClient:]
  -[VCAudioRelayIOController addClient:]
  -[VCAudioRelayIOController dealloc]
  -[VCAudioRelayIOController release]
  -[VCAudioRelayIOController copyWithZone:]
  -[VCAudioRelayIOController retainCount]
  -[VCAudioRelayIOController autorelease]
  -[VCAudioRelayIOController channelsPerFrame]
  -[VCAudioRelayIOController didUpdateBasebandCodec:]
  -[VCAudioRelayIOController startClient:]
  -[VCAudioRelayIOController stopClient:]
  -[VCAudioRelayIOController updateClient:direction:]
  -[VCAudioRelayIOController sinkIO]
  -[VCAudioRelayIOController sourceIO]
  -[VCAudioRelayIOController resetAudioTimestamps]
  -[VCAudioRelayIOController flushEventQueue:]
  -[VCAudioRelayIOController removeAllClientsForIO:]
  -[VCAudioRelayIOController _cleanupDeadClients]
  -[VCAudioRelayIOController registerClientIO:controllerIO:]
  -[VCAudioRelayIOController unregisterClientIO:controllerIO:]
  -[VCAudioRelayIOController initWithRelayType:relayIOType:]
  -[VCAudioRelayIOController loadRelay]
  -[VCAudioRelayIOController unloadRelay]
  -[VCAudioRelayIOController computeSamplePerFrameWithControllerSampleRate:]
  -[VCAudioRelayIOController newControllerSettingsWithNewClient:]
  -[VCAudioRelayIOController startRelayIO:]
  -[VCAudioRelayIOController newRelayIOWithCompletionHandler:]
  -[VCAudioRelayIOController stateIdleWithControllerSettings:client:newState:]
  -[VCAudioRelayIOController handleTransitionPrepareToStarting]
  -[VCAudioRelayIOController statePrepareWithControllerSettings:client:newState:]
  -[VCAudioRelayIOController addStartingClient:controllerSettings:]
  -[VCAudioRelayIOController stateStartingWithControllerSettings:client:newState:]
  -[VCAudioRelayIOController stateRunningWithControllerSettings:client:newState:]
  -[VCAudioRelayIOController updateStateWithClient:]
  -[VCAudioRelayIOController processEventQueue:clientList:]


VCSystemAudioCaptureSession : NSObject
  // instance methods
  -[VCSystemAudioCaptureSession dealloc]
  -[VCSystemAudioCaptureSession stop]
  -[VCSystemAudioCaptureSession initWithConfiguration:]
  -[VCSystemAudioCaptureSession start]
  -[VCSystemAudioCaptureSession cleanupQueue:]
  -[VCSystemAudioCaptureSession setupAudioIOWithConfig:]
  -[VCSystemAudioCaptureSession createAudioBufferPool]
  -[VCSystemAudioCaptureSession resetAudioBufferPool]


VCMediaNegotiatorMultiwayVideoStream : VCMediaNegotiatorMultiwayMediaStream <NSCopying>
 @property  {CGSize=dd} size
 @property  unsigned int frameRate
 @property  unsigned int keyFrameInterval
 @property  int payload

  // instance methods
  -[VCMediaNegotiatorMultiwayVideoStream setPayload:]
  -[VCMediaNegotiatorMultiwayVideoStream payload]
  -[VCMediaNegotiatorMultiwayVideoStream frameRate]
  -[VCMediaNegotiatorMultiwayVideoStream size]
  -[VCMediaNegotiatorMultiwayVideoStream copyWithZone:]
  -[VCMediaNegotiatorMultiwayVideoStream setFrameRate:]
  -[VCMediaNegotiatorMultiwayVideoStream setSize:]
  -[VCMediaNegotiatorMultiwayVideoStream isEqual:]
  -[VCMediaNegotiatorMultiwayVideoStream keyFrameInterval]
  -[VCMediaNegotiatorMultiwayVideoStream setKeyFrameInterval:]


VCCCMessageAcknowledgment : PBCodable <NSCopying>
 @property  unsigned long transactionID
 @property  BOOL hasStatus
 @property  unsigned int status

  // instance methods
  -[VCCCMessageAcknowledgment copyTo:]
  -[VCCCMessageAcknowledgment setHasStatus:]
  -[VCCCMessageAcknowledgment hasStatus]
  -[VCCCMessageAcknowledgment status]
  -[VCCCMessageAcknowledgment transactionID]
  -[VCCCMessageAcknowledgment setStatus:]
  -[VCCCMessageAcknowledgment mergeFrom:]
  -[VCCCMessageAcknowledgment dictionaryRepresentation]
  -[VCCCMessageAcknowledgment copyWithZone:]
  -[VCCCMessageAcknowledgment readFrom:]
  -[VCCCMessageAcknowledgment setTransactionID:]
  -[VCCCMessageAcknowledgment writeTo:]
  -[VCCCMessageAcknowledgment isEqual:]


VCConnectionIDS : VCConnection <VCConnectionProtocol>
 @property  unsigned int datagramChannelToken
 @property  VCDatagramChannelIDS *datagramChannel
 @property  unsigned char linkID
 @property  NSString *relaySessionToken
 @property  NSData *sharedDigestKey
 @property  BOOL isLocalOnWiFi
 @property  BOOL isRemoteOnWiFi
 @property  BOOL isLocalOnCellular
 @property  BOOL isRemoteOnCellular
 @property  BOOL isLocalOn5G
 @property  BOOL isRemoteOn5G
 @property  BOOL isLocalExpensive
 @property  BOOL isRemoteExpensive
 @property  BOOL isLocalConstrained
 @property  BOOL isRemoteConstrained
 @property  BOOL isLocalDelegated
 @property  BOOL isRemoteDelegated
 @property  BOOL isVirtualRelayLink
 @property  BOOL isWifiToWifi
 @property  NSString *localInterfaceName
 @property  BOOL isIPv6
 @property  int connectionMTU
 @property  int maxConnectionMTU
 @property  int connectionId
 @property  BOOL isRelay
 @property  BOOL isVPN
 @property  BOOL isEndToEndLink
 @property  BOOL serverIsDegraded
 @property  NSUUID *connectionUUID
 @property  int localConnectionType
 @property  int remoteConnectionType
 @property  int localCellTech
 @property  int remoteCellTech
 @property  int priority
 @property  unsigned int type
 @property  NSString *localInterfaceTypeString
 @property  NSString *remoteInterfaceTypeString
 @property  unsigned int uplinkAudioBitrateCapOneToOne
 @property  unsigned int uplinkBitrateCapOneToOne
 @property  unsigned int uplinkBitrateCap
 @property  unsigned int downlinkBitrateCap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCConnectionIDS worstCaseNetworkOverheadInBytesWithNumOfStreamId:isPriorityIncluded:]

  // instance methods
  -[VCConnectionIDS setPriority:]
  -[VCConnectionIDS connectionId]
  -[VCConnectionIDS type]
  -[VCConnectionIDS dealloc]
  -[VCConnectionIDS isIPv6]
  -[VCConnectionIDS priority]
  -[VCConnectionIDS connectionUUID]
  -[VCConnectionIDS relaySessionToken]
  -[VCConnectionIDS linkID]
  -[VCConnectionIDS remoteConnectionType]
  -[VCConnectionIDS serverIsDegraded]
  -[VCConnectionIDS isVirtualRelayLink]
  -[VCConnectionIDS localInterfaceName]
  -[VCConnectionIDS isRelay]
  -[VCConnectionIDS isSameAsConnection:]
  -[VCConnectionIDS isOnSameInterfacesWithConnection:]
  -[VCConnectionIDS getSourceDestinationInfo:]
  -[VCConnectionIDS matchesSourceDestinationInfo:]
  -[VCConnectionIDS updateMaxConnectionMTU:]
  -[VCConnectionIDS isLocalOnWiFi]
  -[VCConnectionIDS isRemoteOnWiFi]
  -[VCConnectionIDS isLocalOnCellular]
  -[VCConnectionIDS isRemoteOnCellular]
  -[VCConnectionIDS isLocalOn5G]
  -[VCConnectionIDS isRemoteOn5G]
  -[VCConnectionIDS isLocalExpensive]
  -[VCConnectionIDS isRemoteExpensive]
  -[VCConnectionIDS isLocalConstrained]
  -[VCConnectionIDS isRemoteConstrained]
  -[VCConnectionIDS isLocalDelegated]
  -[VCConnectionIDS isRemoteDelegated]
  -[VCConnectionIDS isWifiToWifi]
  -[VCConnectionIDS connectionMTU]
  -[VCConnectionIDS setConnectionMTU:]
  -[VCConnectionIDS maxConnectionMTU]
  -[VCConnectionIDS setMaxConnectionMTU:]
  -[VCConnectionIDS isVPN]
  -[VCConnectionIDS isEndToEndLink]
  -[VCConnectionIDS localConnectionType]
  -[VCConnectionIDS localCellTech]
  -[VCConnectionIDS setLocalCellTech:]
  -[VCConnectionIDS remoteCellTech]
  -[VCConnectionIDS setRemoteCellTech:]
  -[VCConnectionIDS localInterfaceTypeString]
  -[VCConnectionIDS remoteInterfaceTypeString]
  -[VCConnectionIDS uplinkAudioBitrateCapOneToOne]
  -[VCConnectionIDS setUplinkAudioBitrateCapOneToOne:]
  -[VCConnectionIDS uplinkBitrateCapOneToOne]
  -[VCConnectionIDS setUplinkBitrateCapOneToOne:]
  -[VCConnectionIDS uplinkBitrateCap]
  -[VCConnectionIDS setUplinkBitrateCap:]
  -[VCConnectionIDS downlinkBitrateCap]
  -[VCConnectionIDS setDownlinkBitrateCap:]
  -[VCConnectionIDS datagramChannel]
  -[VCConnectionIDS initWithLinkContext:dataChannelToken:]
  -[VCConnectionIDS sharedDigestKey]
  -[VCConnectionIDS connectionQRSessionID]
  -[VCConnectionIDS networkOverheadInBytesWithNumOfStreamId:isPriorityIncluded:]
  -[VCConnectionIDS setCellularMTU:]
  -[VCConnectionIDS isOnSameQRSessionWithConnection:]
  -[VCConnectionIDS isOnSameInterfacesAndQRSessionWithConnection:]
  -[VCConnectionIDS matchesChannelTokenWithSourceDestinationInfo:]
  -[VCConnectionIDS cellTechForSoMask:fallbackTo:]
  -[VCConnectionIDS datagramChannelToken]


VideoAttributes : NSObject <NSCopying, NSCoding>
 @property  {CGSize=dd} ratio
 @property  int orientation
 @property  int camera
 @property  BOOL cameraSwitching
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentsRect
 @property  BOOL videoSourceScreen
 @property  BOOL videoMirrored
 @property  {?=qiIq} framePresentationTime
 @property  float scaleFactor

  // class methods
  +[VideoAttributes videoAttributesWithVideoAttributes:]
  +[VideoAttributes videoAttributeCameraForCameraUID:]
  +[VideoAttributes cameraUIDForVideoAttributeCamera:]

  // instance methods
  -[VideoAttributes camera]
  -[VideoAttributes contentsRect]
  -[VideoAttributes setContentsRect:]
  -[VideoAttributes initWithEncodedDictionary:]
  -[VideoAttributes setVideoMirrored:]
  -[VideoAttributes videoMirrored]
  -[VideoAttributes setScaleFactor:]
  -[VideoAttributes encodeWithCoder:]
  -[VideoAttributes scaleFactor]
  -[VideoAttributes orientation]
  -[VideoAttributes setCamera:]
  -[VideoAttributes setOrientation:]
  -[VideoAttributes copyWithZone:]
  -[VideoAttributes init]
  -[VideoAttributes initWithCoder:]
  -[VideoAttributes ratio]
  -[VideoAttributes setRatio:]
  -[VideoAttributes decodeFromNSDictionary:]
  -[VideoAttributes initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:]
  -[VideoAttributes isEqualToVideoAttributes:]
  -[VideoAttributes copyEncodedDictionary]
  -[VideoAttributes newEncodedCFDictionary]
  -[VideoAttributes updateCameraStatusBits:]
  -[VideoAttributes cameraSwitching]
  -[VideoAttributes setCameraSwitching:]
  -[VideoAttributes videoSourceScreen]
  -[VideoAttributes setVideoSourceScreen:]
  -[VideoAttributes framePresentationTime]
  -[VideoAttributes setFramePresentationTime:]


VCSessionParticipantVideoStreamConfig : VCVideoStreamConfig
  // instance methods
  -[VCSessionParticipantVideoStreamConfig setupRxPayloads:featureStrings:]
  -[VCSessionParticipantVideoStreamConfig setupTxPayloads:featureStrings:]


VCAudioStreamGroupCommonConfig : NSObject
 @property  int processID
 @property  BOOL isGKVoiceChat
 @property  BOOL isMuted
 @property  unsigned int preferredIOSampleRate
 @property  unsigned int preferredIOSamplesPerFrame
 @property  unsigned int audioSessionID
 @property  long long powerSpectrumStreamToken
 @property  ^? didProcessSamplesCallback
 @property  ^v didProcessSamplesCallbackContext
 @property  unsigned int audioChannelIndex
 @property  unsigned long spatialAudioSourceID

  // instance methods
  -[VCAudioStreamGroupCommonConfig audioSessionID]
  -[VCAudioStreamGroupCommonConfig setIsMuted:]
  -[VCAudioStreamGroupCommonConfig setAudioSessionID:]
  -[VCAudioStreamGroupCommonConfig dealloc]
  -[VCAudioStreamGroupCommonConfig isMuted]
  -[VCAudioStreamGroupCommonConfig processID]
  -[VCAudioStreamGroupCommonConfig setProcessID:]
  -[VCAudioStreamGroupCommonConfig spatialAudioSourceID]
  -[VCAudioStreamGroupCommonConfig isGKVoiceChat]
  -[VCAudioStreamGroupCommonConfig setIsGKVoiceChat:]
  -[VCAudioStreamGroupCommonConfig audioChannelIndex]
  -[VCAudioStreamGroupCommonConfig setAudioChannelIndex:]
  -[VCAudioStreamGroupCommonConfig preferredIOSampleRate]
  -[VCAudioStreamGroupCommonConfig setPreferredIOSampleRate:]
  -[VCAudioStreamGroupCommonConfig preferredIOSamplesPerFrame]
  -[VCAudioStreamGroupCommonConfig setPreferredIOSamplesPerFrame:]
  -[VCAudioStreamGroupCommonConfig didProcessSamplesCallback]
  -[VCAudioStreamGroupCommonConfig setDidProcessSamplesCallback:]
  -[VCAudioStreamGroupCommonConfig didProcessSamplesCallbackContext]
  -[VCAudioStreamGroupCommonConfig setDidProcessSamplesCallbackContext:]
  -[VCAudioStreamGroupCommonConfig powerSpectrumStreamToken]
  -[VCAudioStreamGroupCommonConfig setPowerSpectrumStreamToken:]
  -[VCAudioStreamGroupCommonConfig setSpatialAudioSourceID:]


VCRateControlAlgorithmStabilizedNOWRD : VCRateControlAlgorithmBase
  // instance methods
  -[VCRateControlAlgorithmStabilizedNOWRD init]
  -[VCRateControlAlgorithmStabilizedNOWRD doRateControlWithStatistics:]
  -[VCRateControlAlgorithmStabilizedNOWRD doRateControlWithBasebandStatistics:]
  -[VCRateControlAlgorithmStabilizedNOWRD stateExit]
  -[VCRateControlAlgorithmStabilizedNOWRD stateEnter]
  -[VCRateControlAlgorithmStabilizedNOWRD rampUpTier]
  -[VCRateControlAlgorithmStabilizedNOWRD rampDownTier]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldRampDown]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldRampUp]
  -[VCRateControlAlgorithmStabilizedNOWRD configure:restartRequired:]
  -[VCRateControlAlgorithmStabilizedNOWRD doRateControlWithVCRCStatistics:]
  -[VCRateControlAlgorithmStabilizedNOWRD checkCongestionStatus]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldBlockRampUpDueToNetworkUnstable]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldRampDownDueToBaseband]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldUnblockRampUpAfterTimeOut]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldRampUpDueToBaseband]
  -[VCRateControlAlgorithmStabilizedNOWRD resetRampingStatus]
  -[VCRateControlAlgorithmStabilizedNOWRD printRateControlInfoToLogDump]
  -[VCRateControlAlgorithmStabilizedNOWRD updateInternalStatus]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldRampDownDueToNOWRD]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldRampDownDueToNOWRDAcc]
  -[VCRateControlAlgorithmStabilizedNOWRD worstRecentRoundTripTime]
  -[VCRateControlAlgorithmStabilizedNOWRD worstRecentBurstLoss]
  -[VCRateControlAlgorithmStabilizedNOWRD setLocalBandwidthEstimation:]
  -[VCRateControlAlgorithmStabilizedNOWRD calculateCongestionMetricsFromOWRD:time:]
  -[VCRateControlAlgorithmStabilizedNOWRD doRateControlWithNWStatistics:]
  -[VCRateControlAlgorithmStabilizedNOWRD isBasebandRATGreaterOrSameAsLTE:]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldEnableBasebandAdaptationWithBasebandStatistics:previousBasebandRAT:]
  -[VCRateControlAlgorithmStabilizedNOWRD runRateControlStateTransition]
  -[VCRateControlAlgorithmStabilizedNOWRD updateInternalStatistics:]
  -[VCRateControlAlgorithmStabilizedNOWRD updateVCRateControlHistory]
  -[VCRateControlAlgorithmStabilizedNOWRD getRampUpSettleDuration]
  -[VCRateControlAlgorithmStabilizedNOWRD getRampUpFrozenDuration]
  -[VCRateControlAlgorithmStabilizedNOWRD shouldFastRampUp]
  -[VCRateControlAlgorithmStabilizedNOWRD rampDownTierDueToBaseband:]
  -[VCRateControlAlgorithmStabilizedNOWRD setBitrateUnstable]
  -[VCRateControlAlgorithmStabilizedNOWRD isBitrateOscillatingWithCurrentTierIndex:]
  -[VCRateControlAlgorithmStabilizedNOWRD isNetworkSaturated]
  -[VCRateControlAlgorithmStabilizedNOWRD isRoundTripTimeDecreasingOrLessThanMinEnvelope]
  -[VCRateControlAlgorithmStabilizedNOWRD checkNetworkSaturationWithRoundTripTime:minRoundTripTime:packetLossRate:owrd:]
  -[VCRateControlAlgorithmStabilizedNOWRD isBasebandNotificationOutOfKeyFrameCoolDownTime]
  -[VCRateControlAlgorithmStabilizedNOWRD basebandAdditionalTiersForRampUp]
  -[VCRateControlAlgorithmStabilizedNOWRD calculateRoundTripTimeWithSample:]
  -[VCRateControlAlgorithmStabilizedNOWRD calculatePacketLossWithReceivedPacketCount:receivedPacketCountVideo:packetBurstLoss:packetLossSample:]
  -[VCRateControlAlgorithmStabilizedNOWRD checkAbnormalNetworkCondition]
  -[VCRateControlAlgorithmStabilizedNOWRD updateParametersForRampDownSuppression]
  -[VCRateControlAlgorithmStabilizedNOWRD getRampDownSuppressionBitrateThresholdWithRTT]
  -[VCRateControlAlgorithmStabilizedNOWRD checkMediaQueueBitrates]
  -[VCRateControlAlgorithmStabilizedNOWRD checkStabilizationWithEchoedTimestamp:queuingDelay:]


VCAudioRule : NSObject
 @property  int payload
 @property  BOOL isSecondary
 @property  BOOL sbr
 @property  unsigned int samplesPerBlock

  // instance methods
  -[VCAudioRule payload]
  -[VCAudioRule isEqual:]
  -[VCAudioRule init]
  -[VCAudioRule isSecondary]
  -[VCAudioRule initWithPayload:isSecondary:sbr:samplesPerBlock:]
  -[VCAudioRule sbr]
  -[VCAudioRule samplesPerBlock]


VCTextTransmitter : NSObject <VCTextSender>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCTextTransmitter dealloc]
  -[VCTextTransmitter stop]
  -[VCTextTransmitter initWithConfiguration:]
  -[VCTextTransmitter start]
  -[VCTextTransmitter sendCharacter:]
  -[VCTextTransmitter sendText:]
  -[VCTextTransmitter getCharTimestampForSystemTime:]
  -[VCTextTransmitter sendTextFrameWithRedundancy:marker:]
  -[VCTextTransmitter updatePayloadHistory:timestamp:payloadType:payload:payloadLength:]
  -[VCTextTransmitter heartbeat]
  -[VCTextTransmitter startHeartbeat]
  -[VCTextTransmitter stopHeartbeat]


VCMediaNegotiatorMultiwayAudioStream : VCMediaNegotiatorMultiwayMediaStream <NSCopying>
 @property  NSSet *supportedAudioPayloads

  // instance methods
  -[VCMediaNegotiatorMultiwayAudioStream dealloc]
  -[VCMediaNegotiatorMultiwayAudioStream addPayload:]
  -[VCMediaNegotiatorMultiwayAudioStream copyWithZone:]
  -[VCMediaNegotiatorMultiwayAudioStream isEqual:]
  -[VCMediaNegotiatorMultiwayAudioStream init]
  -[VCMediaNegotiatorMultiwayAudioStream supportedAudioPayloads]
  -[VCMediaNegotiatorMultiwayAudioStream setSupportedAudioPayloads:]


VCEmulatedNetworkDoubleQueueReorder : VCEmulatedNetworkDoubleQueue
  // instance methods
  -[VCEmulatedNetworkDoubleQueueReorder push:]
  -[VCEmulatedNetworkDoubleQueueReorder dealloc]
  -[VCEmulatedNetworkDoubleQueueReorder initWithPolicies:]
  -[VCEmulatedNetworkDoubleQueueReorder shouldSendPacketImmediatelyMM]


VCSessionParticipantLocal : VCSessionParticipant <VCVideoSink, VCVideoCaptureClient, VCMomentTransportDelegate, VCIDSStreamIDGenerator, VCSessionParticipantLocalVideoStreamDelegate>
 @property  BOOL encryptionInfoReceived
 @property  unsigned short connectionStatsStreamID
 @property  unsigned int uplinkBitrateCapWifi
 @property  unsigned int uplinkBitrateCapCell
 @property  BOOL enableVADFiltering
 @property  NSArray *peerSubscribedStreams
 @property  NSSet *audioPayloadTypes
 @property  NSSet *videoPayloadTypes
 @property  unsigned int currentUplinkTotalBitrate
 @property  VCMoments *moments
 @property  int currentVideoCaptureFrameRate
 @property  ^{__CFString=} activeStreamKeys
 @property  {_VCSessionParticipantLocalOneToOneSettings=@@@@@@IIB} oneToOneSettings
 @property  BOOL isRemoteOnPeace
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCSessionParticipantLocal negotiatorCipherSuite:fromMediaStreamConfig:]

  // instance methods
  -[VCSessionParticipantLocal dealloc]
  -[VCSessionParticipantLocal stop]
  -[VCSessionParticipantLocal setMuted:]
  -[VCSessionParticipantLocal moments]
  -[VCSessionParticipantLocal start]
  -[VCSessionParticipantLocal setState:]
  -[VCSessionParticipantLocal isOneToOneModeEnabled]
  -[VCSessionParticipantLocal setOneToOneModeEnabled:]
  -[VCSessionParticipantLocal didServerDie]
  -[VCSessionParticipantLocal activeStreamKeys]
  -[VCSessionParticipantLocal onVideoFrame:frameTime:attribute:]
  -[VCSessionParticipantLocal pushAudioSamples:]
  -[VCSessionParticipantLocal configureAudioIOWithDeviceRole:operatingMode:]
  -[VCSessionParticipantLocal getAudioDumpName]
  -[VCSessionParticipantLocal redundancyController:redundancyVectorDidChange:]
  -[VCSessionParticipantLocal setMediaSuggestion:]
  -[VCSessionParticipantLocal updateWindowState:isLocal:windowRect:]
  -[VCSessionParticipantLocal handleActiveConnectionChange:]
  -[VCSessionParticipantLocal redundancyController:redundancyPercentageDidChange:]
  -[VCSessionParticipantLocal initWithConfig:delegate:]
  -[VCSessionParticipantLocal stopAudioIOCompletion]
  -[VCSessionParticipantLocal applyVideoEnabledSetting:]
  -[VCSessionParticipantLocal setupStreamRTP:]
  -[VCSessionParticipantLocal isActiveMediaType:]
  -[VCSessionParticipantLocal isStreamGroupActive:]
  -[VCSessionParticipantLocal updateAudioSpectrumState]
  -[VCSessionParticipantLocal redundancyController:redundancyIntervalDidChange:]
  -[VCSessionParticipantLocal collectVideoChannelMetrics:]
  -[VCSessionParticipantLocal collectAudioChannelMetrics:]
  -[VCSessionParticipantLocal setPeerSubscribedStreams:]
  -[VCSessionParticipantLocal startVoiceActivityDetection]
  -[VCSessionParticipantLocal stopVoiceActivityDetection]
  -[VCSessionParticipantLocal setCellularUniqueTag:]
  -[VCSessionParticipantLocal thermalLevelDidChange:]
  -[VCSessionParticipantLocal moments:shouldProcessRequest:recipientID:]
  -[VCSessionParticipantLocal clientCaptureRule]
  -[VCSessionParticipantLocal avConferencePreviewError:]
  -[VCSessionParticipantLocal cameraAvailabilityDidChange:]
  -[VCSessionParticipantLocal sourceFrameRateDidChange:]
  -[VCSessionParticipantLocal frameRateIsBeingThrottled:thermalLevelDidChange:powerLevelDidChange:]
  -[VCSessionParticipantLocal captureSourcePositionDidChange:]
  -[VCSessionParticipantLocal captureSourceCenterStageEnabledDidChange:]
  -[VCSessionParticipantLocal captureSourcePortraitBlurEnabledDidChange:]
  -[VCSessionParticipantLocal effectsDidApply:]
  -[VCSessionParticipantLocal didReceiveReportPacket:arrivalNTPTime:]
  -[VCSessionParticipantLocal didReceiveCustomReportPacket:arrivalNTPTime:]
  -[VCSessionParticipantLocal setupStreamGroupMediaSync]
  -[VCSessionParticipantLocal completeStreamSetup:]
  -[VCSessionParticipantLocal generateIDSStreamID]
  -[VCSessionParticipantLocal generateSSRC]
  -[VCSessionParticipantLocal generateSSRC:streamID:repairStreamID:]
  -[VCSessionParticipantLocal remoteScreenAttributesDidChange:]
  -[VCSessionParticipantLocal processCachedParticipantData:]
  -[VCSessionParticipantLocal mediaStateForMediaType:]
  -[VCSessionParticipantLocal setupAudioStreamGroupWithStreamConfigs:negotiatorConfig:streamGroupConfiguration:]
  -[VCSessionParticipantLocal setupCameraStreamGroupWithStreamConfigs:negotiatorConfig:streamGroupConfiguration:]
  -[VCSessionParticipantLocal setupSystemAudioCapture]
  -[VCSessionParticipantLocal captureSourceIDFromStreamGroupConfig:]
  -[VCSessionParticipantLocal setupStreamGroupWithStreamGroupConfig:negotiatorConfig:]
  -[VCSessionParticipantLocal setupStreamGroupsWithConfig:negotiatorConfig:]
  -[VCSessionParticipantLocal setupStreamInputsWithConfig:]
  -[VCSessionParticipantLocal cleanupStreamInputs]
  -[VCSessionParticipantLocal maxCaptureResolution]
  -[VCSessionParticipantLocal maxCaptureCameraFrameRate]
  -[VCSessionParticipantLocal setUplinkBitrateCapCell:]
  -[VCSessionParticipantLocal setUplinkBitrateCapWifi:]
  -[VCSessionParticipantLocal setEnableVADFiltering:]
  -[VCSessionParticipantLocal reconfigureOneToOneAudioStream:error:]
  -[VCSessionParticipantLocal applyScreenEnabledSetting:]
  -[VCSessionParticipantLocal updateVideoPaused:]
  -[VCSessionParticipantLocal updateActiveVoiceOnly]
  -[VCSessionParticipantLocal currentVideoCaptureFrameRate]
  -[VCSessionParticipantLocal setCurrentVideoCaptureFrameRate:]
  -[VCSessionParticipantLocal captureEncodingSize]
  -[VCSessionParticipantLocal registerForVideoCapture:]
  -[VCSessionParticipantLocal deregisterForVideoCapture]
  -[VCSessionParticipantLocal resetOneToOneSettings]
  -[VCSessionParticipantLocal cleanUpOneToOneStreams]
  -[VCSessionParticipantLocal suspendStreamsOnOneToOneModeSwitch]
  -[VCSessionParticipantLocal resumeStreamsOnOneToOneModeSwitch]
  -[VCSessionParticipantLocal stopVideoCaptureClient]
  -[VCSessionParticipantLocal startSystemAudioCapture]
  -[VCSessionParticipantLocal stopSystemAudioCapture]
  -[VCSessionParticipantLocal calculateUplinkTotalBitrateForMediaStreams:]
  -[VCSessionParticipantLocal updateMediaSettingsWithConfig:]
  -[VCSessionParticipantLocal updateMomentsCapabillities:imageType:videoCodec:]
  -[VCSessionParticipantLocal setEncryptionInfoReceived:]
  -[VCSessionParticipantLocal currentUplinkTotalBitrate]
  -[VCSessionParticipantLocal applyCachedMediaStreams:toMultiwayConfig:]
  -[VCSessionParticipantLocal applyCachedStreamGroupMediaStreams:toMultiwayConfig:]
  -[VCSessionParticipantLocal setupVideoStreamsWithStreamConfigurations:mediaNegotiatorConfig:streamGroupConfiguration:]
  -[VCSessionParticipantLocal setupCaptionsStreamsWithStreamConfigurations:mediaNegotiatorConfig:streamGroupConfiguration:]
  -[VCSessionParticipantLocal applyCachedMediaStreamsWithStreamConfigurations:mediaNegotiatorConfig:]
  -[VCSessionParticipantLocal setupAudioStreamsWithStreamConfigurations:mediaNegotiatorConfig:streamGroupConfiguration:]
  -[VCSessionParticipantLocal newVideoSendGroupConfigWithStreamGroupID:streamGroupConfiguration:]
  -[VCSessionParticipantLocal newAudioSendGroupConfigWithStreamGroupID:streamGroupConfiguration:]
  -[VCSessionParticipantLocal getAudioFormatDescriptionForStreamGroupID:]
  -[VCSessionParticipantLocal getCaptionsFormatDescription]
  -[VCSessionParticipantLocal setupVideoStreamsWithStreamConfiguration:streamGroupConfiguration:]
  -[VCSessionParticipantLocal setupCaptionsStreamsWithStreamConfiguration:streamGroupConfiguration:]
  -[VCSessionParticipantLocal setupVideoMediaStreamsWithStreamGroupConfiguration:streamGroupConfig:streamGroupID:mediaType:]
  -[VCSessionParticipantLocal setupAudioStreamsWithStreamConfiguration:streamGroupConfiguration:]
  -[VCSessionParticipantLocal newAudioStreamSendGroupWithConfig:streamGroupID:]
  -[VCSessionParticipantLocal newStreamInfoWithVideoStreamWithConfiguration:streamGroupID:]
  -[VCSessionParticipantLocal updateBandwithAllocationTable:mediaType:streamGroupID:encoderGroupID:minNetworkBitrate:maxNetworkBitrate:]
  -[VCSessionParticipantLocal newStreamInfoWithAudioStreamWithConfiguration:streamToken:isStreamGroup:streamGroupID:]
  -[VCSessionParticipantLocal multiwayAudioStreamNegotiatorConfigForStreamConfig:]
  -[VCSessionParticipantLocal multiwayVideoStreamNegotiatorConfigForStreamConfig:isSubstream:]
  -[VCSessionParticipantLocal multiwayVideoStreamConfigs]
  -[VCSessionParticipantLocal newMediaNegotiatorAudioConfiguration]
  -[VCSessionParticipantLocal streamGroupNegotiationVideoConfigForStreamGroup:streamConfig:mediaConfig:]
  -[VCSessionParticipantLocal newStreamGroupNegotiationConfigForStreamGroup:]
  -[VCSessionParticipantLocal initializeMultiwayAudioStreamGroup:forLocalConfig:]
  -[VCSessionParticipantLocal initializeMultiwayVideoStreamGroup:forLocalConfig:]
  -[VCSessionParticipantLocal initializeStreamGroupsForLocalConfig:]
  -[VCSessionParticipantLocal featureListString:removingPayload:andPayload:]
  -[VCSessionParticipantLocal initializeMediaNegotiator]
  -[VCSessionParticipantLocal updatePayloadTypesWithVideoConfigs:]
  -[VCSessionParticipantLocal updatePayloadTypesWithAudioConfigs:]
  -[VCSessionParticipantLocal setupOneToOneAudioRedundancyController]
  -[VCSessionParticipantLocal setupOneToOneVideoRedundancyController]
  -[VCSessionParticipantLocal setupOneToOneRedundancyControllers]
  -[VCSessionParticipantLocal applyOneToOneAudioRedundancyPercentage:]
  -[VCSessionParticipantLocal applyOneToOneVideoRedundancyPercentage:]
  -[VCSessionParticipantLocal negotiateOneToOne:]
  -[VCSessionParticipantLocal logRemoteParticipantInfo:]
  -[VCSessionParticipantLocal setupOneToOneVideoStreamWithConfig:]
  -[VCSessionParticipantLocal configureWithOneToOneParticipantConfig:shouldConfigureGFTStreams:]
  -[VCSessionParticipantLocal setupOneToOneEncryptionInfoWithConfiguration:]
  -[VCSessionParticipantLocal newAudioStreamOneToOneConfiguration]
  -[VCSessionParticipantLocal newVideoStreamOneToOneConfiguration]
  -[VCSessionParticipantLocal newScreenStreamOneToOneConfiguration]
  -[VCSessionParticipantLocal supportedAudioRules]
  -[VCSessionParticipantLocal updateSupportedAudioRules:]
  -[VCSessionParticipantLocal containsStreamWithSSRC:]
  -[VCSessionParticipantLocal audioRuleCollectionWithAudioStreamConfig:]
  -[VCSessionParticipantLocal addCallInfoBlobToParticipantInfo:]
  -[VCSessionParticipantLocal createParticipantInfo]
  -[VCSessionParticipantLocal createOpaqueData]
  -[VCSessionParticipantLocal isHighPriorityAudioWithPower:voiceActive:]
  -[VCSessionParticipantLocal updateAudioPriorityWithSampleBuffer:]
  -[VCSessionParticipantLocal newStreamInfoWithVideoStreamWithConfiguration:idsDestination:groupID:]
  -[VCSessionParticipantLocal newVideoStreamWithConfig:groupID:]
  -[VCSessionParticipantLocal newStreamInfoWithAudioStreamWithConfiguration:idsDestination:isStreamGroup:streamGroupID:]
  -[VCSessionParticipantLocal setupScreenStreamWithConfiguration:idsDestination:]
  -[VCSessionParticipantLocal setupEncodingModeWithVideoStreamConfig:]
  -[VCSessionParticipantLocal generateKeyFrameWithStreamID:firType:]
  -[VCSessionParticipantLocal checkSubscribedStreamsConsistency:]
  -[VCSessionParticipantLocal enableRedundancy:]
  -[VCSessionParticipantLocal updateUplinkTargetBitrate:]
  -[VCSessionParticipantLocal updateUplinkTargetBitrateForStreamGroups]
  -[VCSessionParticipantLocal dispatchedUpdateUplinkTargetBitrateForStreamGroups]
  -[VCSessionParticipantLocal updateTargetBitrateOneToOne:rateChangeCounter:]
  -[VCSessionParticipantLocal updateTargetBitrateBasedOnCurrentOneToOneSettings]
  -[VCSessionParticipantLocal dispatchedUpdateOneToOneMediaStreamsWithTargetBitrate:rateChangeCounter:]
  -[VCSessionParticipantLocal updateVideoOneToOneBitrate]
  -[VCSessionParticipantLocal shouldSendMedia]
  -[VCSessionParticipantLocal dispatchedHandleActiveConnectionChangeForOneToOneMode:]
  -[VCSessionParticipantLocal dispatchedHandleActiveConnectionChangeForMultiway:]
  -[VCSessionParticipantLocal streamGroup:didSuspendStreams:]
  -[VCSessionParticipantLocal encryptionInfoReceived]
  -[VCSessionParticipantLocal connectionStatsStreamID]
  -[VCSessionParticipantLocal uplinkBitrateCapWifi]
  -[VCSessionParticipantLocal uplinkBitrateCapCell]
  -[VCSessionParticipantLocal enableVADFiltering]
  -[VCSessionParticipantLocal peerSubscribedStreams]
  -[VCSessionParticipantLocal audioPayloadTypes]
  -[VCSessionParticipantLocal videoPayloadTypes]
  -[VCSessionParticipantLocal oneToOneSettings]
  -[VCSessionParticipantLocal isRemoteOnPeace]
  -[VCSessionParticipantLocal setIsRemoteOnPeace:]


VCSessionBitrateArbiter : NSObject
 @property  unsigned int maxBitrate2GUplink
 @property  unsigned int maxBitrate3GUplink
 @property  unsigned int maxBitrateExpensiveUplink
 @property  unsigned int maxBitrateNonExpensiveUplink
 @property  unsigned int maxBitrateWiFiUplink
 @property  unsigned int maxBitrate2GDownlink
 @property  unsigned int maxBitrate3GDownlink
 @property  unsigned int maxBitrateExpensiveDownlink
 @property  unsigned int maxBitrateNonExpensiveDownlink
 @property  unsigned int maxBitrateWiFiDownlink

  // instance methods
  -[VCSessionBitrateArbiter dealloc]
  -[VCSessionBitrateArbiter init]
  -[VCSessionBitrateArbiter rangeCheck:]
  -[VCSessionBitrateArbiter readHardwareValues]
  -[VCSessionBitrateArbiter bitrateForStoreBagKey:connectionType:currentBitrate:isExpensive:]
  -[VCSessionBitrateArbiter readStoreBagValues]
  -[VCSessionBitrateArbiter maxBitrate2GUplink]
  -[VCSessionBitrateArbiter maxBitrate3GUplink]
  -[VCSessionBitrateArbiter maxBitrateWiFiUplink]
  -[VCSessionBitrateArbiter maxBitrate2GDownlink]
  -[VCSessionBitrateArbiter maxBitrate3GDownlink]
  -[VCSessionBitrateArbiter maxBitrateWiFiDownlink]
  -[VCSessionBitrateArbiter maxBitrateExpensiveUplink]
  -[VCSessionBitrateArbiter maxBitrateNonExpensiveUplink]
  -[VCSessionBitrateArbiter maxBitrateExpensiveDownlink]
  -[VCSessionBitrateArbiter maxBitrateNonExpensiveDownlink]


VCTransportSessionSocket : VCTransportSession
  // instance methods
  -[VCTransportSessionSocket streams]
  -[VCTransportSessionSocket dealloc]
  -[VCTransportSessionSocket isIPv6]
  -[VCTransportSessionSocket start]
  -[VCTransportSessionSocket createVFD:forStreamType:]
  -[VCTransportSessionSocket networkInterfaceType]
  -[VCTransportSessionSocket networkMTU]
  -[VCTransportSessionSocket initWithSocketDictionary:]
  -[VCTransportSessionSocket initWithSharedSocket:]
  -[VCTransportSessionSocket initWithRTPSocket:RTCPSocket:]
  -[VCTransportSessionSocket createVFD:realSocket:sockAddr:length:isUsable:]
  -[VCTransportSessionSocket updateTransportStream:]
  -[VCTransportSessionSocket connectSocket:remoteAddress:storage:]
  -[VCTransportSessionSocket setRemoteAddress:remoteRTCPPort:]
  -[VCTransportSessionSocket setAudioRTPStreamParamatersForSocket:packetType:remoteIP:remoteIPLength:]
  -[VCTransportSessionSocket setAudioRTCPStreamParamatersForSocket:packetType:remoteIP:remoteIPLength:]
  -[VCTransportSessionSocket setVideoRTPStreamParamatersForSocket:packetType:remoteIP:remoteIPLength:]
  -[VCTransportSessionSocket setVideoRTCPStreamParamatersForSocket:packetType:remoteIP:remoteIPLength:]
  -[VCTransportSessionSocket setBasebandNotificationStreamParamatersForSocket:packetType:remoteIP:remoteIPLength:]
  -[VCTransportSessionSocket configureParamatersForStreamType:socket:packetType:remoteIP:remoteIPLength:]
  -[VCTransportSessionSocket createAndConfigureVFDForSocket:packetType:remoteIP:remoteIPLength:vfd:]
  -[VCTransportSessionSocket initializeInterfaceTypeWithSocket:]
  -[VCTransportSessionSocket initializeNetworkInfoWithSocket:]


VCAudioIO : NSObject <VCAudioIOControllerDelegate>
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} controllerFormat
 @property  NSDictionary *reportingStats
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} clientFormat
 @property  BOOL muted
 @property  BOOL inputMeteringEnabled
 @property  BOOL outputMeteringEnabled
 @property  BOOL isGKVoiceChat
 @property  unsigned char direction
 @property  unsigned int state
 @property  unsigned int pullAudioSamplesCount
 @property  BOOL spatialAudioDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCAudioIO defaultControllerForAudioType:forDirection:]
  +[VCAudioIO controllerForDeviceRole:audioType:direction:streamInputID:streamToken:networkClockID:]

  // instance methods
  -[VCAudioIO setDirection:]
  -[VCAudioIO stopWithCompletionHandler:]
  -[VCAudioIO delegate]
  -[VCAudioIO state]
  -[VCAudioIO dealloc]
  -[VCAudioIO isMuted]
  -[VCAudioIO stop]
  -[VCAudioIO setMuted:]
  -[VCAudioIO direction]
  -[VCAudioIO initWithConfiguration:]
  -[VCAudioIO start]
  -[VCAudioIO startWithCompletionHandler:]
  -[VCAudioIO operatingMode]
  -[VCAudioIO forceCleanup]
  -[VCAudioIO isOutputMeteringEnabled]
  -[VCAudioIO setOutputMeteringEnabled:]
  -[VCAudioIO isInputMeteringEnabled]
  -[VCAudioIO setInputMeteringEnabled:]
  -[VCAudioIO didUpdateBasebandCodec:]
  -[VCAudioIO reportingStats]
  -[VCAudioIO didServerDie]
  -[VCAudioIO isGKVoiceChat]
  -[VCAudioIO setIsGKVoiceChat:]
  -[VCAudioIO didResume]
  -[VCAudioIO clientFormat]
  -[VCAudioIO setClientFormat:]
  -[VCAudioIO setFarEndVersionInfo:]
  -[VCAudioIO didStart:error:]
  -[VCAudioIO didStop:error:]
  -[VCAudioIO controllerFormatChanged:]
  -[VCAudioIO didSuspend]
  -[VCAudioIO setupClientFormatWithConfiguration:]
  -[VCAudioIO reconfigureWithOperatingMode:deviceRole:direction:streamInputID:streamToken:allowAudioRecording:networkClockID:]
  -[VCAudioIO controllerFormat]
  -[VCAudioIO setRemoteCodecType:sampleRate:]
  -[VCAudioIO pullAudioSamplesCount]
  -[VCAudioIO spatialAudioDisabled]
  -[VCAudioIO setSpatialAudioDisabled:]
  -[VCAudioIO createConverterForSource:error:]
  -[VCAudioIO destroyBuffers]
  -[VCAudioIO releaseConverters]
  -[VCAudioIO stopWithCompletionHandlerInternal:]


VCStatisticsCollectorQueue : NSObject
 @property  BOOL isThreadRunning
 @property  @? messageHandler

  // instance methods
  -[VCStatisticsCollectorQueue processMessage:]
  -[VCStatisticsCollectorQueue messageHandler]
  -[VCStatisticsCollectorQueue setMessageHandler:]
  -[VCStatisticsCollectorQueue dealloc]
  -[VCStatisticsCollectorQueue enqueue:]
  -[VCStatisticsCollectorQueue stop]
  -[VCStatisticsCollectorQueue start]
  -[VCStatisticsCollectorQueue queueSize]
  -[VCStatisticsCollectorQueue initWithQueueSize:shouldBlockWhenFull:queueWaitTimeMs:useExternalThread:]
  -[VCStatisticsCollectorQueue addStatisticsMessage:]
  -[VCStatisticsCollectorQueue drainAndProcessAllStatistics]
  -[VCStatisticsCollectorQueue flushAllStatistics]
  -[VCStatisticsCollectorQueue flushAllNonHighPriorityStatistics]
  -[VCStatisticsCollectorQueue shouldFlushOldMessagesWithCurrentMessagePriority:didFlushQueue:]
  -[VCStatisticsCollectorQueue isQueueFull]
  -[VCStatisticsCollectorQueue dequeue:]
  -[VCStatisticsCollectorQueue stopThread]
  -[VCStatisticsCollectorQueue cancelWait]
  -[VCStatisticsCollectorQueue waitBeforeProcessingQueue]
  -[VCStatisticsCollectorQueue isThreadRunning]


VCCameraTorchManager : NSObject <AXCameraTorchManager>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCCameraTorchManager dealloc]
  -[VCCameraTorchManager init]
  -[VCCameraTorchManager openTorchDevice]
  -[VCCameraTorchManager closeTorchDevice]
  -[VCCameraTorchManager turnTorchOn]
  -[VCCameraTorchManager turnTorchOff]
  -[VCCameraTorchManager turnTorch:]


VCAudioCaptionsBufferInfo : NSObject
 @property  long long token
 @property  unsigned char priority
 @property  {AudioStreamBasicDescription=dIIIIIIII} format
 @property  unsigned int countOfLowPrioritySamples

  // instance methods
  -[VCAudioCaptionsBufferInfo token]
  -[VCAudioCaptionsBufferInfo dealloc]
  -[VCAudioCaptionsBufferInfo priority]
  -[VCAudioCaptionsBufferInfo format]
  -[VCAudioCaptionsBufferInfo isEqual:]
  -[VCAudioCaptionsBufferInfo initWithStreamToken:format:bufferLength:]
  -[VCAudioCaptionsBufferInfo countOfLowPrioritySamples]


VCAudioCaptionsBufferInfoCollection : NSObject
 @property  NSArray *streamTokens

  // instance methods
  -[VCAudioCaptionsBufferInfoCollection dealloc]
  -[VCAudioCaptionsBufferInfoCollection initWithBufferLength:]
  -[VCAudioCaptionsBufferInfoCollection streamTokens]


VCPixelTransferSession : NSObject
  // instance methods
  -[VCPixelTransferSession dealloc]
  -[VCPixelTransferSession init]


VCCaptionsStream : VCVideoStream <VCCaptionsReceiverDelegate, VCCaptionsSource>
 @property  BOOL captionsSupported
 @property  BOOL captionsEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCCaptionsStream dealloc]
  -[VCCaptionsStream init]
  -[VCCaptionsStream captionsEnabled]
  -[VCCaptionsStream enableCaptions:]
  -[VCCaptionsStream registerCaptionsEventDelegate:]
  -[VCCaptionsStream setCaptionsLocale:]
  -[VCCaptionsStream captionsSupported]
  -[VCCaptionsStream captionsDelegate]
  -[VCCaptionsStream onStartWithCompletionHandler:]
  -[VCCaptionsStream onStopWithCompletionHandler:]
  -[VCCaptionsStream didReceiveCaptions:]
  -[VCCaptionsStream initWithTransportSessionID:idsParticipantID:ssrc:streamToken:]
  -[VCCaptionsStream vcVideoReceiver:didReceiveSampleBuffer:isFirstFrame:]
  -[VCCaptionsStream dataFromSampleBuffer:]


AVCStreamInput : NSObject
 @property  NSObject<OS_dispatch_queue> *xpcQueue
 @property  long long streamInputID
 @property  r^{opaqueCMFormatDescription=} formatDescription
 @property  r^{__CFAllocator=} sampleBufferAllocator

  // instance methods
  -[AVCStreamInput xpcQueue]
  -[AVCStreamInput delegate]
  -[AVCStreamInput dealloc]
  -[AVCStreamInput setupXPCConnection]
  -[AVCStreamInput formatDescription]
  -[AVCStreamInput resetStats]
  -[AVCStreamInput didStart]
  -[AVCStreamInput didStop]
  -[AVCStreamInput didServerDie]
  -[AVCStreamInput deregisterBlocksForNotifications]
  -[AVCStreamInput didResume]
  -[AVCStreamInput registerService:weakSelf:block:]
  -[AVCStreamInput didSuspend]
  -[AVCStreamInput initWithDelegate:delegateQueue:format:options:error:]
  -[AVCStreamInput formatDescriptionString]
  -[AVCStreamInput processOptions:]
  -[AVCStreamInput processFormat:]
  -[AVCStreamInput setupDelegate:delegateQueue:]
  -[AVCStreamInput setupXPCQueue]
  -[AVCStreamInput newRemoteQueueWithServerPid:]
  -[AVCStreamInput tearDownRemoteQueue]
  -[AVCStreamInput tearDownConnectionWithTerminateMessage:]
  -[AVCStreamInput resetXPCConnection]
  -[AVCStreamInput createAndAddRemoteQueueToXPCDictionary:]
  -[AVCStreamInput initializeServerSideInputStream]
  -[AVCStreamInput registerDidServerDieBlock:]
  -[AVCStreamInput registerBlocksForNotification]
  -[AVCStreamInput sendSampleBufferOverXPC:error:]
  -[AVCStreamInput pushSampleBuffer:error:]
  -[AVCStreamInput streamInputID]
  -[AVCStreamInput sampleBufferAllocator]


VCVideoStreamRateAdaptationFeedbackOnly : VCVideoStreamRateAdaptation
 @property  BOOL didReceiveVideo

  // instance methods
  -[VCVideoStreamRateAdaptationFeedbackOnly dealloc]
  -[VCVideoStreamRateAdaptationFeedbackOnly owrd]
  -[VCVideoStreamRateAdaptationFeedbackOnly setEnableRateAdaptation:maxBitrate:minBitrate:adaptationInterval:]
  -[VCVideoStreamRateAdaptationFeedbackOnly updateRTPReceiveWithTimestamp:sampleRate:time:size:endOfFrame:]
  -[VCVideoStreamRateAdaptationFeedbackOnly initWithRTPHandle:reportingAgent:receiverStats:dumpID:reportingParentID:statisticsCollector:lowTimestampPrecision:]
  -[VCVideoStreamRateAdaptationFeedbackOnly startFeedbackSource]
  -[VCVideoStreamRateAdaptationFeedbackOnly stopFeedbackSource]
  -[VCVideoStreamRateAdaptationFeedbackOnly sendRateControlFeedback]
  -[VCVideoStreamRateAdaptationFeedbackOnly updateRateControlInfoWithStatisticsMessage:]
  -[VCVideoStreamRateAdaptationFeedbackOnly didReceiveVideo]
  -[VCVideoStreamRateAdaptationFeedbackOnly setDidReceiveVideo:]


VCEmulatedNetworkQueue : VCEmulatedNetworkElement
  // instance methods
  -[VCEmulatedNetworkQueue write:]
  -[VCEmulatedNetworkQueue dealloc]
  -[VCEmulatedNetworkQueue initWithPolicies:]
  -[VCEmulatedNetworkQueue runUntilTime:]
  -[VCEmulatedNetworkQueue enqueuePacket:]
  -[VCEmulatedNetworkQueue updateSettingsAtTime:]
  -[VCEmulatedNetworkQueue markPacketLoss:]
  -[VCEmulatedNetworkQueue dequeuePacket:time:]


AVCCaptionsClient : NSObject
 @property  <AVCCaptionsClientDelegate> *delegate
 @property  BOOL captionsSupported
 @property  BOOL captionsEnabled
 @property  long long streamToken

  // class methods
  +[AVCCaptionsClient isCaptioningSupported]

  // instance methods
  -[AVCCaptionsClient disconnect]
  -[AVCCaptionsClient connect]
  -[AVCCaptionsClient delegate]
  -[AVCCaptionsClient dealloc]
  -[AVCCaptionsClient streamToken]
  -[AVCCaptionsClient initWithDelegate:streamToken:]
  -[AVCCaptionsClient configureCaptions:]
  -[AVCCaptionsClient captionsEnabled]
  -[AVCCaptionsClient enableCaptions:]
  -[AVCCaptionsClient didEnableCaptions:error:]
  -[AVCCaptionsClient didDisableCaptions:error:]
  -[AVCCaptionsClient didStartCaptioningWithReason:]
  -[AVCCaptionsClient didStopCaptioningWithReason:]
  -[AVCCaptionsClient captionsSupported]
  -[AVCCaptionsClient registerBlocksForNotifications]
  -[AVCCaptionsClient deregisterBlocksForNotifications]
  -[AVCCaptionsClient captionsResultsWithInternalResults:]
  -[AVCCaptionsClient didUpdateCaptions:isRemote:]


VCScreenCaptureManager : NSObject
  // class methods
  +[VCScreenCaptureManager sharedManager]

  // instance methods
  -[VCScreenCaptureManager registerBlocksForService]
  -[VCScreenCaptureManager dealloc]
  -[VCScreenCaptureManager init]
  -[VCScreenCaptureManager getErrorDictionaryFromError:]
  -[VCScreenCaptureManager screenCaptureStartFor:didSucceed:withError:]
  -[VCScreenCaptureManager screenCaptureStopFor:didSucceed:withError:]
  -[VCScreenCaptureManager screenShareDictionary:]
  -[VCScreenCaptureManager startPrivacyAccountingInternval]
  -[VCScreenCaptureManager endPrivacyAccountingInterval]


VCStreamInput : VCObject <VCStreamInputCaptureSourceDelegate>
 @property  NSDictionary *reportingStats
 @property  NSNumber *streamInputID
 @property  BOOL isStarted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCStreamInput isStarted]
  -[VCStreamInput dealloc]
  -[VCStreamInput invalidate]
  -[VCStreamInput streamFormat]
  -[VCStreamInput reportingStats]
  -[VCStreamInput initWithStreamInputID:format:delegate:delegateQueue:remoteQueue:]
  -[VCStreamInput thermalLevelDidChange:]
  -[VCStreamInput streamInputID]
  -[VCStreamInput didStartStreamInputCaptureSource]
  -[VCStreamInput didStopStreamInputCaptureSource]
  -[VCStreamInput didSuspendStreamInputCaptureSource]
  -[VCStreamInput didResumeStreamInputCaptureSource]
  -[VCStreamInput isEqualFormat:]
  -[VCStreamInput createRemoteReceiveQueue:]


VCAudioIOControllerClient : NSObject
 @property  int clientPid
 @property  <VCAudioIOControllerDelegate> *delegate
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} clientFormat
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} controllerFormat
 @property  int deviceRole
 @property  BOOL allowAudioRecording
 @property  int operatingMode
 @property  unsigned char direction
 @property  BOOL isRemoteCodecInfoValid
 @property  unsigned int remoteCodecType
 @property  double remoteCodecSampleRate
 @property  BOOL isRemoteVersionInfoValid
 @property  {VoiceIOFarEndVersionInfo=[64C][64C]I} farEndVersionInfo
 @property  BOOL inputMeteringEnabled
 @property  BOOL outputMeteringEnabled
 @property  ^{_VCAudioIOControllerClientIO=^v^?@III^{opaqueVCAudioBufferList}} sinkIO
 @property  ^{_VCAudioIOControllerClientIO=^v^?@III^{opaqueVCAudioBufferList}} sourceIO
 @property  unsigned int audioSessionId
 @property  BOOL isPrewarmingClient
 @property  BOOL spatialAudioDisabled
 @property  unsigned int channelIndex
 @property  unsigned long spatialToken

  // instance methods
  -[VCAudioIOControllerClient setDirection:]
  -[VCAudioIOControllerClient delegate]
  -[VCAudioIOControllerClient dealloc]
  -[VCAudioIOControllerClient clientPid]
  -[VCAudioIOControllerClient direction]
  -[VCAudioIOControllerClient operatingMode]
  -[VCAudioIOControllerClient setOperatingMode:]
  -[VCAudioIOControllerClient audioSessionId]
  -[VCAudioIOControllerClient setOutputMeteringEnabled:]
  -[VCAudioIOControllerClient isInputMeteringEnabled]
  -[VCAudioIOControllerClient setInputMeteringEnabled:]
  -[VCAudioIOControllerClient channelIndex]
  -[VCAudioIOControllerClient sinkIO]
  -[VCAudioIOControllerClient sourceIO]
  -[VCAudioIOControllerClient deviceRole]
  -[VCAudioIOControllerClient allowAudioRecording]
  -[VCAudioIOControllerClient setAllowAudioRecording:]
  -[VCAudioIOControllerClient setDeviceRole:]
  -[VCAudioIOControllerClient clientFormat]
  -[VCAudioIOControllerClient setClientFormat:]
  -[VCAudioIOControllerClient farEndVersionInfo]
  -[VCAudioIOControllerClient setFarEndVersionInfo:]
  -[VCAudioIOControllerClient remoteCodecSampleRate]
  -[VCAudioIOControllerClient remoteCodecType]
  -[VCAudioIOControllerClient controllerFormat]
  -[VCAudioIOControllerClient setRemoteCodecType:sampleRate:]
  -[VCAudioIOControllerClient spatialAudioDisabled]
  -[VCAudioIOControllerClient setSpatialAudioDisabled:]
  -[VCAudioIOControllerClient initWithDelegate:audioSessionId:channelIndex:sourceContext:sourceProcess:sinkContext:sinkProcess:clientPid:isPrewarmingClient:spatialToken:]
  -[VCAudioIOControllerClient setControllerFormat:]
  -[VCAudioIOControllerClient isRemoteCodecInfoValid]
  -[VCAudioIOControllerClient isRemoteVersionInfoValid]
  -[VCAudioIOControllerClient isOuputMeteringEnabled]
  -[VCAudioIOControllerClient isPrewarmingClient]
  -[VCAudioIOControllerClient spatialToken]


AVAudioDevice : NSObject
 @property  NSString *deviceName
 @property  NSNumber *deviceID
 @property  NSString *UID
 @property  BOOL inputAvailable
 @property  BOOL outputAvailable
 @property  BOOL preferredDevice
 @property  BOOL isBluetoothDevice

  // instance methods
  -[AVAudioDevice deviceID]
  -[AVAudioDevice initWithDeviceID:]
  -[AVAudioDevice dealloc]
  -[AVAudioDevice UID]
  -[AVAudioDevice deviceName]
  -[AVAudioDevice isEqual:]
  -[AVAudioDevice createName]
  -[AVAudioDevice isValidDevice]
  -[AVAudioDevice isBluetoothDevice]
  -[AVAudioDevice newAudioObjectStringPropertyWithSelector:scope:element:]
  -[AVAudioDevice createUID]
  -[AVAudioDevice createNameForScope:]
  -[AVAudioDevice copyStreamIDArray:length:]
  -[AVAudioDevice deviceHasNonTapStreamsInStreamList:length:]
  -[AVAudioDevice hasRealInputStream]
  -[AVAudioDevice isAggregableDevice]
  -[AVAudioDevice isValidInputDevice]
  -[AVAudioDevice isSomethingConnectedToJack]
  -[AVAudioDevice isBuiltInDevice]
  -[AVAudioDevice allocDeviceControlListAndSize:]
  -[AVAudioDevice getDataSourceControlID]
  -[AVAudioDevice isStreamAvailableForScope:]
  -[AVAudioDevice inputAvailable]
  -[AVAudioDevice outputAvailable]
  -[AVAudioDevice isPreferredDevice]


AVInternalDeviceList : NSObject
 @property  @? changeListener

  // class methods
  +[AVInternalDeviceList newDeviceList]
  +[AVInternalDeviceList defaultDeviceOfType:]

  // instance methods
  -[AVInternalDeviceList cleanup]
  -[AVInternalDeviceList changeListener]
  -[AVInternalDeviceList dealloc]
  -[AVInternalDeviceList setChangeListener:]
  -[AVInternalDeviceList init]
  -[AVInternalDeviceList deviceList]
  -[AVInternalDeviceList dataSourceControlID]
  -[AVInternalDeviceList notifyDeviceListChanged]


AVAudioDeviceList : NSObject
 @property  @? changeListener

  // class methods
  +[AVAudioDeviceList defaultInputDevice]
  +[AVAudioDeviceList currentInputDevice]
  +[AVAudioDeviceList defaultOutputDevice]
  +[AVAudioDeviceList setInputDevice:]
  +[AVAudioDeviceList deviceForUID:]
  +[AVAudioDeviceList deviceForDeviceID:]

  // instance methods
  -[AVAudioDeviceList changeListener]
  -[AVAudioDeviceList devices]
  -[AVAudioDeviceList dealloc]
  -[AVAudioDeviceList outputDevices]
  -[AVAudioDeviceList inputDevices]
  -[AVAudioDeviceList setChangeListener:]
  -[AVAudioDeviceList init]


VCEmulatedNetworkAlgorithmQueueLoss : NSObject <VCEmulatedNetworkAlgorithm>
 @property  double expectedProcessEndTime
 @property  unsigned int packetCountInNetworkQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCEmulatedNetworkAlgorithmQueueLoss process:]
  -[VCEmulatedNetworkAlgorithmQueueLoss init]
  -[VCEmulatedNetworkAlgorithmQueueLoss updateSettingsAtTime:impairments:]
  -[VCEmulatedNetworkAlgorithmQueueLoss expectedProcessEndTime]
  -[VCEmulatedNetworkAlgorithmQueueLoss packetCountInNetworkQueue]
  -[VCEmulatedNetworkAlgorithmQueueLoss setPacketCountInNetworkQueue:]


VCSessionParticipantOneToOneConfig : VCObject
 @property  int deviceRole
 @property  unsigned long idsParticipantID
 @property  AVCRateControlFeedbackController *feedbackController
 @property  AVCStatisticsCollector *statisticsCollector
 @property  AVCBasebandCongestionDetector *basebandCongestionDetector
 @property  ^v audioMediaControlInfoGenerator
 @property  ^v videoMediaControlInfoGenerator
 @property  VCRateControlMediaController *mediaController
 @property  ^{tagHANDLE=i} mediaQueue
 @property  ^{tagVCMediaQueue=} vcMediaQueue
 @property  BOOL negotiatedVideoEnabled
 @property  BOOL negotiatedScreenEnabled
 @property  BOOL initUsingWifiTiers
 @property  VCNetworkFeedbackController *networkFeedbackController
 @property  int operatingMode

  // instance methods
  -[VCSessionParticipantOneToOneConfig dealloc]
  -[VCSessionParticipantOneToOneConfig init]
  -[VCSessionParticipantOneToOneConfig mediaController]
  -[VCSessionParticipantOneToOneConfig mediaQueue]
  -[VCSessionParticipantOneToOneConfig operatingMode]
  -[VCSessionParticipantOneToOneConfig setOperatingMode:]
  -[VCSessionParticipantOneToOneConfig feedbackController]
  -[VCSessionParticipantOneToOneConfig setFeedbackController:]
  -[VCSessionParticipantOneToOneConfig basebandCongestionDetector]
  -[VCSessionParticipantOneToOneConfig setBasebandCongestionDetector:]
  -[VCSessionParticipantOneToOneConfig statisticsCollector]
  -[VCSessionParticipantOneToOneConfig setStatisticsCollector:]
  -[VCSessionParticipantOneToOneConfig setMediaController:]
  -[VCSessionParticipantOneToOneConfig deviceRole]
  -[VCSessionParticipantOneToOneConfig setDeviceRole:]
  -[VCSessionParticipantOneToOneConfig setMediaQueue:]
  -[VCSessionParticipantOneToOneConfig idsParticipantID]
  -[VCSessionParticipantOneToOneConfig setIdsParticipantID:]
  -[VCSessionParticipantOneToOneConfig networkFeedbackController]
  -[VCSessionParticipantOneToOneConfig setNetworkFeedbackController:]
  -[VCSessionParticipantOneToOneConfig videoMediaControlInfoGenerator]
  -[VCSessionParticipantOneToOneConfig audioMediaControlInfoGenerator]
  -[VCSessionParticipantOneToOneConfig setAudioMediaControlInfoGenerator:]
  -[VCSessionParticipantOneToOneConfig setVideoMediaControlInfoGenerator:]
  -[VCSessionParticipantOneToOneConfig setVcMediaQueue:]
  -[VCSessionParticipantOneToOneConfig vcMediaQueue]
  -[VCSessionParticipantOneToOneConfig negotiatedVideoEnabled]
  -[VCSessionParticipantOneToOneConfig setNegotiatedVideoEnabled:]
  -[VCSessionParticipantOneToOneConfig negotiatedScreenEnabled]
  -[VCSessionParticipantOneToOneConfig setNegotiatedScreenEnabled:]
  -[VCSessionParticipantOneToOneConfig initUsingWifiTiers]
  -[VCSessionParticipantOneToOneConfig setInitUsingWifiTiers:]


VCRedundancyControlAlgorithmAudioMultiWay : NSObject <VCRedundancyControlAlgorithm>
 @property  unsigned int redundancyPercentage
 @property  double redundancyInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRedundancyControlAlgorithmAudioMultiWay init]
  -[VCRedundancyControlAlgorithmAudioMultiWay updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControlAlgorithmAudioMultiWay redundancyPercentage]
  -[VCRedundancyControlAlgorithmAudioMultiWay redundancyInterval]
  -[VCRedundancyControlAlgorithmAudioMultiWay processNWConnectionStatistics:]
  -[VCRedundancyControlAlgorithmAudioMultiWay processRCNetworkStatistics:]
  -[VCRedundancyControlAlgorithmAudioMultiWay computeRedundancyInfo]
  -[VCRedundancyControlAlgorithmAudioMultiWay updateRedundancyPercentageWithPLRThresholds:]


AVCSessionParticipant : NSObject <AVCSessionParticipantControlProtocol>
 @property  NSObject<OS_dispatch_queue> *delegateNotificationQueue
 @property  BOOL remoteScreenEnabled
 @property  long long videoToken
 @property  long long screenToken
 @property  VCXPCClientShared *sharedXPCConnection
 @property  NSDictionary *config
 @property  BOOL configurationInProgress
 @property  BOOL hasPendingChanges
 @property  NSObject<OS_dispatch_queue> *stateQueue
 @property  <AVCSessionParticipantDelegate> *delegate
 @property  {tagAVCPositionalInfo=I{CGSize=dd}ddd} videoPositionalInfo
 @property  unsigned long spatialAudioSourceID
 @property  unsigned char videoQuality
 @property  unsigned int visibilityIndex
 @property  unsigned int prominenceIndex
 @property  unsigned long participantID
 @property  NSString *uuid
 @property  NSData *negotiationData
 @property  BOOL audioMuted
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL audioPaused
 @property  BOOL videoPaused
 @property  BOOL oneToOneEnabled
 @property  float volume
 @property  NSData *frequencyLevels
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVCSessionParticipant isMediaStateAPISupportedForMediaType:]
  +[AVCSessionParticipant loopbackNegotiationDataWithData:]
  +[AVCSessionParticipant defaultStateForMediaType:isLocal:]
  +[AVCSessionParticipant archiveMediaStates:]
  +[AVCSessionParticipant unarchiveMediaStatesWithData:]

  // instance methods
  -[AVCSessionParticipant setVideoQuality:]
  -[AVCSessionParticipant videoQuality]
  -[AVCSessionParticipant setDelegate:]
  -[AVCSessionParticipant config]
  -[AVCSessionParticipant delegate]
  -[AVCSessionParticipant hasPendingChanges]
  -[AVCSessionParticipant dealloc]
  -[AVCSessionParticipant uuid]
  -[AVCSessionParticipant setVolume:]
  -[AVCSessionParticipant volume]
  -[AVCSessionParticipant participantID]
  -[AVCSessionParticipant setStateQueue:]
  -[AVCSessionParticipant stateQueue]
  -[AVCSessionParticipant sharedXPCConnection]
  -[AVCSessionParticipant setAudioEnabled:]
  -[AVCSessionParticipant setVideoEnabled:]
  -[AVCSessionParticipant isAudioEnabled]
  -[AVCSessionParticipant isScreenEnabled]
  -[AVCSessionParticipant screenToken]
  -[AVCSessionParticipant isVideoEnabled]
  -[AVCSessionParticipant isAudioPaused]
  -[AVCSessionParticipant setScreenEnabled:]
  -[AVCSessionParticipant setAudioPaused:]
  -[AVCSessionParticipant setScreenToken:]
  -[AVCSessionParticipant isVideoPaused]
  -[AVCSessionParticipant setVideoPaused:]
  -[AVCSessionParticipant setHasPendingChanges:]
  -[AVCSessionParticipant spatialAudioSourceID]
  -[AVCSessionParticipant setAudioMuted:]
  -[AVCSessionParticipant negotiationData]
  -[AVCSessionParticipant registerBlocksForNotifications]
  -[AVCSessionParticipant delegateNotificationQueue]
  -[AVCSessionParticipant visibilityIndex]
  -[AVCSessionParticipant prominenceIndex]
  -[AVCSessionParticipant setRemoteScreenEnabled:]
  -[AVCSessionParticipant remoteScreenEnabled]
  -[AVCSessionParticipant setVisibilityIndex:]
  -[AVCSessionParticipant setProminenceIndex:]
  -[AVCSessionParticipant newNSErrorWithErrorDictionary:]
  -[AVCSessionParticipant mediaStateForMediaType:]
  -[AVCSessionParticipant setMediaState:forMediaType:]
  -[AVCSessionParticipant isAudioMuted]
  -[AVCSessionParticipant isOneToOneEnabled]
  -[AVCSessionParticipant setOneToOneEnabled:]
  -[AVCSessionParticipant frequencyLevels]
  -[AVCSessionParticipant initWithParticipantID:data:delegate:queue:]
  -[AVCSessionParticipant videoPositionalInfo]
  -[AVCSessionParticipant setVideoPositionalInfo:]
  -[AVCSessionParticipant dispatchedSetMediaState:forMediaType:]
  -[AVCSessionParticipant dispatchedLegacySetMediaState:forMediaType:]
  -[AVCSessionParticipant completeSetMediaState:forMediaType:didSucceed:error:]
  -[AVCSessionParticipant generateMediaStateEntryForMediaType:]
  -[AVCSessionParticipant printMediaStates]
  -[AVCSessionParticipant storeMediaState:forMediaType:]
  -[AVCSessionParticipant handleLegacyTransitionsForMediaType:mediaState:previousState:didSucceed:error:]
  -[AVCSessionParticipant stateTransitionForMediaType:mediaState:previousState:didSucceed:error:]
  -[AVCSessionParticipant setMediaType:enabled:mediaString:xpcMessageKey:xpcOperationKey:completionBlock:]
  -[AVCSessionParticipant setMediaType:paused:mediaString:xpcMessageKey:xpcOperationKey:completionBlock:]
  -[AVCSessionParticipant isEnabledMediaType:]
  -[AVCSessionParticipant isPausedMediaType:]
  -[AVCSessionParticipant dispatchedCompleteAudioEnabled:didSucceed:error:]
  -[AVCSessionParticipant completeAudioEnabled:didSucceed:error:]
  -[AVCSessionParticipant dispatchedCompleteAudioPaused:didSucceed:error:]
  -[AVCSessionParticipant completeAudioPaused:didSucceed:error:]
  -[AVCSessionParticipant dispatchedCompleteVideoEnabled:didSucceed:error:]
  -[AVCSessionParticipant completeVideoEnabled:didSucceed:error:]
  -[AVCSessionParticipant dispatchedCompleteVideoPaused:didSucceed:error:]
  -[AVCSessionParticipant completeVideoPaused:didSucceed:error:]
  -[AVCSessionParticipant dispatchedCompleteScreenEnabled:didSucceed:error:]
  -[AVCSessionParticipant completeScreenEnabled:didSucceed:error:]
  -[AVCSessionParticipant isConnectedToSession]
  -[AVCSessionParticipant dispatchedMediaStateForMediaType:]
  -[AVCSessionParticipant setSharedXPCConnection:]
  -[AVCSessionParticipant setVideoToken:]
  -[AVCSessionParticipant setStreamTokens:]
  -[AVCSessionParticipant setMediaTypeToSpatialSourceIDMap:]
  -[AVCSessionParticipant streamTokenForStreamGroupID:]
  -[AVCSessionParticipant spatialAudioSourceIDForMediaType:]
  -[AVCSessionParticipant deregisterFromNotifications]
  -[AVCSessionParticipant setupNotificationQueue:]
  -[AVCSessionParticipant setupMediaStates]
  -[AVCSessionParticipant setupConfig]
  -[AVCSessionParticipant updateLegacyStates]
  -[AVCSessionParticipant appendConfigurationToXPCConfiguration:]
  -[AVCSessionParticipant videoToken]
  -[AVCSessionParticipant configurationInProgress]
  -[AVCSessionParticipant setConfigurationInProgress:]


AVCStreamOutput : NSObject <VCRemoteVideoManagerStreamOutputDelegate>
 @property  BOOL isPaused
 @property  BOOL isStalled
 @property  BOOL isDegraded
 @property  BOOL isSuspended
 @property  BOOL isValid
 @property  <AVCStreamOutputDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSObject<OS_dispatch_queue> *internalReceiverQueue
 @property  long long streamToken
 @property  float synchronizationTimeOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVCStreamOutput setIsValid:]
  -[AVCStreamOutput didInvalidate]
  -[AVCStreamOutput didSuspend:]
  -[AVCStreamOutput setIsPaused:]
  -[AVCStreamOutput setDelegate:]
  -[AVCStreamOutput setIsDegraded:]
  -[AVCStreamOutput isSuspended]
  -[AVCStreamOutput isDegraded]
  -[AVCStreamOutput delegate]
  -[AVCStreamOutput setDelegateQueue:]
  -[AVCStreamOutput isPaused]
  -[AVCStreamOutput dealloc]
  -[AVCStreamOutput isValid]
  -[AVCStreamOutput setupXPCConnection]
  -[AVCStreamOutput delegateQueue]
  -[AVCStreamOutput processID]
  -[AVCStreamOutput isStalled]
  -[AVCStreamOutput streamToken]
  -[AVCStreamOutput setIsStalled:]
  -[AVCStreamOutput remoteQueueOperationHandlerWithError:operation:]
  -[AVCStreamOutput deregisterBlocksForNotifications]
  -[AVCStreamOutput synchronizationTimeOffset]
  -[AVCStreamOutput setSynchronizationTimeOffset:]
  -[AVCStreamOutput didPause:]
  -[AVCStreamOutput didStall:]
  -[AVCStreamOutput didDegrade:]
  -[AVCStreamOutput didUpdateAttachments:]
  -[AVCStreamOutput didReceiveSampleBuffer:]
  -[AVCStreamOutput registerBlocksForNotification]
  -[AVCStreamOutput initWithStreamToken:delegate:queue:error:]
  -[AVCStreamOutput setupDelegateQueue:]
  -[AVCStreamOutput createReceiverQueue]
  -[AVCStreamOutput setupRemoteQueueWithSenderQueue:]
  -[AVCStreamOutput serviceHandlerDidDieWithArguments:error:]
  -[AVCStreamOutput serviceHandlerDidPauseWithArguments:error:]
  -[AVCStreamOutput serviceHandlerDidStallWithArguments:error:]
  -[AVCStreamOutput serviceHandlerDidDegradeWithArguments:error:]
  -[AVCStreamOutput serviceHandlerDidSuspendWithArguments:error:]
  -[AVCStreamOutput serviceHandlerDidReleaseOutputQueueWithArguments:error:]
  -[AVCStreamOutput serviceHandlerDidReceiveFrameWithArguments:error:]
  -[AVCStreamOutput terminateConnection]
  -[AVCStreamOutput setIsSuspended:]
  -[AVCStreamOutput internalReceiverQueue]
  -[AVCStreamOutput setInternalReceiverQueue:]


AVCMediaStreamNegotiatorSettings : NSObject
 @property  VCVideoRuleCollections *screenRuleCollections
 @property  VCVideoRuleCollections *videoRuleCollections
 @property  long long tilesPerFrame
 @property  long long videoStreamMode
 @property  long long audioStreamMode
 @property  long long captureSource
 @property  int operatingMode
 @property  VCMediaNegotiatorAudioConfiguration *audioConfiguration
 @property  int preferredAudioCodec
 @property  unsigned int localSSRC
 @property  NSArray *hdrModePixelFormats
 @property  NSSet *hdrModesSupported
 @property  unsigned long ptime
 @property  unsigned long minBandwidth

  // class methods
  +[AVCMediaStreamNegotiatorSettings negotiatorSettingsForMode:deviceRole:options:errorString:]
  +[AVCMediaStreamNegotiatorSettings hdrModeWithOptions:]

  // instance methods
  -[AVCMediaStreamNegotiatorSettings dealloc]
  -[AVCMediaStreamNegotiatorSettings audioConfiguration]
  -[AVCMediaStreamNegotiatorSettings init]
  -[AVCMediaStreamNegotiatorSettings operatingMode]
  -[AVCMediaStreamNegotiatorSettings audioStreamMode]
  -[AVCMediaStreamNegotiatorSettings ptime]
  -[AVCMediaStreamNegotiatorSettings tilesPerFrame]
  -[AVCMediaStreamNegotiatorSettings minBandwidth]
  -[AVCMediaStreamNegotiatorSettings preferredAudioCodec]
  -[AVCMediaStreamNegotiatorSettings captureSource]
  -[AVCMediaStreamNegotiatorSettings videoRuleCollections]
  -[AVCMediaStreamNegotiatorSettings screenRuleCollections]
  -[AVCMediaStreamNegotiatorSettings hdrModesSupported]
  -[AVCMediaStreamNegotiatorSettings initWithOptions:deviceRole:error:]
  -[AVCMediaStreamNegotiatorSettings videoStreamMode]
  -[AVCMediaStreamNegotiatorSettings hdrModePixelFormats]
  -[AVCMediaStreamNegotiatorSettings localSSRC]


AVCMediaStreamNegotiatorSettingsRemoteMic : AVCMediaStreamNegotiatorSettings
  // instance methods
  -[AVCMediaStreamNegotiatorSettingsRemoteMic operatingMode]
  -[AVCMediaStreamNegotiatorSettingsRemoteMic audioStreamMode]
  -[AVCMediaStreamNegotiatorSettingsRemoteMic ptime]
  -[AVCMediaStreamNegotiatorSettingsRemoteMic preferredAudioCodec]
  -[AVCMediaStreamNegotiatorSettingsRemoteMic initWithOptions:deviceRole:error:]


AVCMediaStreamNegotiatorSettingsRemoteCamera : AVCMediaStreamNegotiatorSettings
  // class methods
  +[AVCMediaStreamNegotiatorSettingsRemoteCamera isOfferSupported]

  // instance methods
  -[AVCMediaStreamNegotiatorSettingsRemoteCamera operatingMode]
  -[AVCMediaStreamNegotiatorSettingsRemoteCamera tilesPerFrame]
  -[AVCMediaStreamNegotiatorSettingsRemoteCamera minBandwidth]
  -[AVCMediaStreamNegotiatorSettingsRemoteCamera captureSource]
  -[AVCMediaStreamNegotiatorSettingsRemoteCamera initWithOptions:deviceRole:error:]
  -[AVCMediaStreamNegotiatorSettingsRemoteCamera videoStreamMode]


AVCMediaStreamNegotiatorSettingsiPadCompanion : AVCMediaStreamNegotiatorSettings
  // instance methods
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion dealloc]
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion operatingMode]
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion tilesPerFrame]
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion captureSource]
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion hdrModesSupported]
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion initWithOptions:deviceRole:error:]
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion videoStreamMode]
  -[AVCMediaStreamNegotiatorSettingsiPadCompanion hdrModePixelFormats]


AVCMediaStreamNegotiatorSettingsAirplayMirroring : AVCMediaStreamNegotiatorSettings
  // instance methods
  -[AVCMediaStreamNegotiatorSettingsAirplayMirroring operatingMode]
  -[AVCMediaStreamNegotiatorSettingsAirplayMirroring tilesPerFrame]
  -[AVCMediaStreamNegotiatorSettingsAirplayMirroring captureSource]
  -[AVCMediaStreamNegotiatorSettingsAirplayMirroring initWithOptions:deviceRole:error:]
  -[AVCMediaStreamNegotiatorSettingsAirplayMirroring videoStreamMode]


VCTransportSession : NSObject
 @property  int detailedErrorCode
 @property  BOOL isHandoverSupported
 @property  BOOL isRemoteOSPreLion
 @property  BOOL requiresWiFi
 @property  BOOL useCompressedConnectionData
 @property  unsigned int connectionSetupRTTEstimate
 @property  NSObject *connectionSetupPiggybackBlob
 @property  TimingCollection *perfTimings
 @property  VCConnectionManager *connectionManager
 @property  @? eventHandler
 @property  unsigned int basebandNotificationRegistrationToken
 @property  BOOL isCallActive
 @property  <VCConnectionProtocol> *registeredConnection
 @property  int networkInterfaceType
 @property  unsigned int networkMTU
 @property  BOOL isIPv6

  // class methods
  +[VCTransportSession trafficClassForStreamType:]
  +[VCTransportSession vtpPacketTypeForStreamType:]

  // instance methods
  -[VCTransportSession eventHandler]
  -[VCTransportSession requiresWiFi]
  -[VCTransportSession dealloc]
  -[VCTransportSession isIPv6]
  -[VCTransportSession stop]
  -[VCTransportSession setEventHandler:]
  -[VCTransportSession setRequiresWiFi:]
  -[VCTransportSession isCallActive]
  -[VCTransportSession start]
  -[VCTransportSession connectionManager]
  -[VCTransportSession setCallActive:]
  -[VCTransportSession initWithNotificationQueue:reportingAgent:]
  -[VCTransportSession createVFD:forStreamType:]
  -[VCTransportSession networkInterfaceType]
  -[VCTransportSession networkMTU]
  -[VCTransportSession setOneToOneModeEnabled:isInitiator:]
  -[VCTransportSession getConnectionSetupData:withOptions:error:]
  -[VCTransportSession setConnectionSetupPiggybackBlob:]
  -[VCTransportSession connectionSetupPiggybackBlob]
  -[VCTransportSession getSignalStrengthBars:displayBars:maxDisplayBars:]
  -[VCTransportSession flushBasebandQueueForConnection:payloadInfoList:]
  -[VCTransportSession updateQualityIndicator:isIPv6:]
  -[VCTransportSession registerBasebandNotificationsForConnection:]
  -[VCTransportSession deregisterBasebandNotifications]
  -[VCTransportSession setConnectionSelectionVersionWithLocalFrameworkVersion:remoteFrameworkVersion:]
  -[VCTransportSession useCompressedConnectionData]
  -[VCTransportSession setUseCompressedConnectionData:]
  -[VCTransportSession flushBasebandQueueWithPayloads:flushCount:]
  -[VCTransportSession handleMediaReceivedOverPeerToPeerLinkWithConnectionId:]
  -[VCTransportSession handleMediaReceivedOverRelayLinkWithConnectionId:]
  -[VCTransportSession isHandoverSupported]
  -[VCTransportSession detailedErrorCode]
  -[VCTransportSession reportNetworkConditionsDegraded]
  -[VCTransportSession connectionSetupRTTEstimate]
  -[VCTransportSession isRemoteOSPreLion]
  -[VCTransportSession callEventHandlerWithEvent:info:]
  -[VCTransportSession handleTransportStreamDeactivated:]
  -[VCTransportSession createTransportStream:withType:options:]
  -[VCTransportSession deregisterNotificationForTransportStream:]
  -[VCTransportSession updateBasebandForConnection:]
  -[VCTransportSession cleanupBaseband]
  -[VCTransportSession resetActiveConnection]
  -[VCTransportSession perfTimings]
  -[VCTransportSession setPerfTimings:]
  -[VCTransportSession basebandNotificationRegistrationToken]
  -[VCTransportSession registeredConnection]
  -[VCTransportSession setRegisteredConnection:]


VCVideoTransmitterConfig : NSObject
 @property  long long videoResolution
 @property  int videoSource
 @property  long long codecType
 @property  unsigned long framerate
 @property  unsigned long txMaxBitrate
 @property  unsigned long txMinBitrate
 @property  unsigned long keyFrameInterval
 @property  BOOL enableCVO
 @property  unsigned long cvoExtensionID
 @property  unsigned long recommendedMTU
 @property  BOOL isIPv6
 @property  ^{opaqueRTCReporting=} reportingAgent
 @property  int reportingParentID
 @property  int videoPayload
 @property  int encodingMode
 @property  int encoderUsage
 @property  NSDictionary *colorInfo
 @property  ^AC videoPriorityPointer
 @property  unsigned long customWidth
 @property  unsigned long customHeight
 @property  int mode
 @property  int captureSource
 @property  AVCStatisticsCollector *statisticsCollector
 @property  ^{tagVCVideoTransmitterStreamConfig=^{tagHANDLE}SiI^{tagVCCryptor}} streamConfigs
 @property  int streamCount
 @property  int tilesPerFrame
 @property  BOOL useRateControl
 @property  unsigned int pixelFormat
 @property  NSDictionary *customFeatureListStrings
 @property  BOOL reinitEncoderOnFrameSizeChangeEnabled
 @property  unsigned int qualityIndex
 @property  BOOL isFecGeneratorEnabled
 @property  BOOL fecHeaderV1Enabled
 @property  unsigned long remoteIDSParticipantID
 @property  VCRateControlMediaController *mediaController
 @property  ^v mediaControlInfoGenerator
 @property  unsigned int rtpTimestampRate
 @property  NSString *profileLevel
 @property  unsigned int parameterSets
 @property  BOOL temporalScalingEnabled
 @property  unsigned int maxSupportedTemporalLayers
 @property  ^{tagVCCryptor=} sframeCryptor
 @property  BOOL useInBandFec
 @property  int reportingClientType
 @property  unsigned long maxEncoderPixels
 @property  unsigned int encoderBitrateAveragingInterval

  // instance methods
  -[VCVideoTransmitterConfig framerate]
  -[VCVideoTransmitterConfig pixelFormat]
  -[VCVideoTransmitterConfig dealloc]
  -[VCVideoTransmitterConfig mode]
  -[VCVideoTransmitterConfig isIPv6]
  -[VCVideoTransmitterConfig colorInfo]
  -[VCVideoTransmitterConfig setMode:]
  -[VCVideoTransmitterConfig setIsIPv6:]
  -[VCVideoTransmitterConfig setFramerate:]
  -[VCVideoTransmitterConfig setPixelFormat:]
  -[VCVideoTransmitterConfig streamCount]
  -[VCVideoTransmitterConfig init]
  -[VCVideoTransmitterConfig mediaController]
  -[VCVideoTransmitterConfig videoResolution]
  -[VCVideoTransmitterConfig videoSource]
  -[VCVideoTransmitterConfig setVideoSource:]
  -[VCVideoTransmitterConfig codecType]
  -[VCVideoTransmitterConfig setCodecType:]
  -[VCVideoTransmitterConfig setColorInfo:]
  -[VCVideoTransmitterConfig setCustomWidth:]
  -[VCVideoTransmitterConfig setTxMaxBitrate:]
  -[VCVideoTransmitterConfig setCustomHeight:]
  -[VCVideoTransmitterConfig tilesPerFrame]
  -[VCVideoTransmitterConfig setTilesPerFrame:]
  -[VCVideoTransmitterConfig setVideoResolution:]
  -[VCVideoTransmitterConfig setTxMinBitrate:]
  -[VCVideoTransmitterConfig keyFrameInterval]
  -[VCVideoTransmitterConfig qualityIndex]
  -[VCVideoTransmitterConfig setQualityIndex:]
  -[VCVideoTransmitterConfig setKeyFrameInterval:]
  -[VCVideoTransmitterConfig statisticsCollector]
  -[VCVideoTransmitterConfig setStatisticsCollector:]
  -[VCVideoTransmitterConfig setMediaController:]
  -[VCVideoTransmitterConfig reportingAgent]
  -[VCVideoTransmitterConfig videoPayload]
  -[VCVideoTransmitterConfig setVideoPayload:]
  -[VCVideoTransmitterConfig setReportingAgent:]
  -[VCVideoTransmitterConfig setEncodingMode:]
  -[VCVideoTransmitterConfig rtpTimestampRate]
  -[VCVideoTransmitterConfig setRtpTimestampRate:]
  -[VCVideoTransmitterConfig streamConfigs]
  -[VCVideoTransmitterConfig captureSource]
  -[VCVideoTransmitterConfig setCaptureSource:]
  -[VCVideoTransmitterConfig setUseRateControl:]
  -[VCVideoTransmitterConfig useRateControl]
  -[VCVideoTransmitterConfig setMediaControlInfoGenerator:]
  -[VCVideoTransmitterConfig addCustomFeatureListString:payload:]
  -[VCVideoTransmitterConfig reportingParentID]
  -[VCVideoTransmitterConfig setReportingParentID:]
  -[VCVideoTransmitterConfig txMaxBitrate]
  -[VCVideoTransmitterConfig txMinBitrate]
  -[VCVideoTransmitterConfig recommendedMTU]
  -[VCVideoTransmitterConfig setRecommendedMTU:]
  -[VCVideoTransmitterConfig cvoExtensionID]
  -[VCVideoTransmitterConfig setCvoExtensionID:]
  -[VCVideoTransmitterConfig enableCVO]
  -[VCVideoTransmitterConfig setEnableCVO:]
  -[VCVideoTransmitterConfig encodingMode]
  -[VCVideoTransmitterConfig videoPriorityPointer]
  -[VCVideoTransmitterConfig setVideoPriorityPointer:]
  -[VCVideoTransmitterConfig customWidth]
  -[VCVideoTransmitterConfig customHeight]
  -[VCVideoTransmitterConfig setStreamCount:]
  -[VCVideoTransmitterConfig customFeatureListStrings]
  -[VCVideoTransmitterConfig reinitEncoderOnFrameSizeChangeEnabled]
  -[VCVideoTransmitterConfig setReinitEncoderOnFrameSizeChangeEnabled:]
  -[VCVideoTransmitterConfig mediaControlInfoGenerator]
  -[VCVideoTransmitterConfig profileLevel]
  -[VCVideoTransmitterConfig setProfileLevel:]
  -[VCVideoTransmitterConfig parameterSets]
  -[VCVideoTransmitterConfig setParameterSets:]
  -[VCVideoTransmitterConfig temporalScalingEnabled]
  -[VCVideoTransmitterConfig setTemporalScalingEnabled:]
  -[VCVideoTransmitterConfig maxSupportedTemporalLayers]
  -[VCVideoTransmitterConfig setMaxSupportedTemporalLayers:]
  -[VCVideoTransmitterConfig sframeCryptor]
  -[VCVideoTransmitterConfig setSframeCryptor:]
  -[VCVideoTransmitterConfig reportingClientType]
  -[VCVideoTransmitterConfig setReportingClientType:]
  -[VCVideoTransmitterConfig encoderUsage]
  -[VCVideoTransmitterConfig setEncoderUsage:]
  -[VCVideoTransmitterConfig encoderBitrateAveragingInterval]
  -[VCVideoTransmitterConfig setEncoderBitrateAveragingInterval:]
  -[VCVideoTransmitterConfig isFecGeneratorEnabled]
  -[VCVideoTransmitterConfig setIsFecGeneratorEnabled:]
  -[VCVideoTransmitterConfig fecHeaderV1Enabled]
  -[VCVideoTransmitterConfig setFecHeaderV1Enabled:]
  -[VCVideoTransmitterConfig remoteIDSParticipantID]
  -[VCVideoTransmitterConfig setRemoteIDSParticipantID:]
  -[VCVideoTransmitterConfig useInBandFec]
  -[VCVideoTransmitterConfig setUseInBandFec:]
  -[VCVideoTransmitterConfig maxEncoderPixels]
  -[VCVideoTransmitterConfig setMaxEncoderPixels:]


AVCQoSMonitor : NSObject
 @property  <AVCQoSMonitorDelegate> *delegate
 @property  NSArray *streamTokens

  // instance methods
  -[AVCQoSMonitor setDelegate:]
  -[AVCQoSMonitor delegate]
  -[AVCQoSMonitor dealloc]
  -[AVCQoSMonitor registerBlocksForNotifications]
  -[AVCQoSMonitor deregisterBlocksForNotifications]
  -[AVCQoSMonitor streamTokens]
  -[AVCQoSMonitor terminateConnection]
  -[AVCQoSMonitor initWithStreamToken:queue:error:]
  -[AVCQoSMonitor requestQoSReport]
  -[AVCQoSMonitor registerStreamToken:]
  -[AVCQoSMonitor reportingIntervalForStreamToken:]
  -[AVCQoSMonitor generateInvalidStreamTokenWithError:]


VCVisualAlert : NSObject
  // class methods
  +[VCVisualAlert stop]
  +[VCVisualAlert start]


VCRemoteVideoState : NSObject
 @property  BOOL hasReceivedFirstFrame
 @property  BOOL isVideoPaused
 @property  BOOL isMediaStalled
 @property  BOOL isVideoDegraded
 @property  BOOL isVideoSuspended
 @property  VideoAttributes *remoteScreenAttributes
 @property  VideoAttributes *remoteVideoAttributes
 @property  NSString *localInterfaceType
 @property  NSString *remoteInterfaceType

  // instance methods
  -[VCRemoteVideoState dealloc]
  -[VCRemoteVideoState remoteInterfaceType]
  -[VCRemoteVideoState setRemoteInterfaceType:]
  -[VCRemoteVideoState isVideoPaused]
  -[VCRemoteVideoState isMediaStalled]
  -[VCRemoteVideoState isVideoDegraded]
  -[VCRemoteVideoState hasReceivedFirstFrame]
  -[VCRemoteVideoState remoteVideoAttributes]
  -[VCRemoteVideoState remoteScreenAttributes]
  -[VCRemoteVideoState setHasReceivedFirstFrame:]
  -[VCRemoteVideoState setIsVideoPaused:]
  -[VCRemoteVideoState setRemoteScreenAttributes:]
  -[VCRemoteVideoState setRemoteVideoAttributes:]
  -[VCRemoteVideoState setIsVideoDegraded:]
  -[VCRemoteVideoState setIsMediaStalled:]
  -[VCRemoteVideoState localInterfaceType]
  -[VCRemoteVideoState setLocalInterfaceType:]
  -[VCRemoteVideoState isVideoSuspended]
  -[VCRemoteVideoState setIsVideoSuspended:]


VCRemoteVideoManager : NSObject <VCRemoteVideoManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCRemoteVideoManager defaultManager]

  // instance methods
  -[VCRemoteVideoManager registerBlocksForService]
  -[VCRemoteVideoManager dealloc]
  -[VCRemoteVideoManager init]
  -[VCRemoteVideoManager didReceiveFirstRemoteFrameForStreamToken:]
  -[VCRemoteVideoManager remoteScreenAttributesDidChange:streamToken:]
  -[VCRemoteVideoManager remoteVideoAttributesDidChange:streamToken:]
  -[VCRemoteVideoManager remoteVideoDidPause:streamToken:]
  -[VCRemoteVideoManager remoteMediaDidStall:streamToken:]
  -[VCRemoteVideoManager remoteVideoDidDegrade:streamToken:]
  -[VCRemoteVideoManager remoteVideoDidSuspend:streamToken:]
  -[VCRemoteVideoManager releaseQueueForStreamToken:]
  -[VCRemoteVideoManager connectionDidChangeWithLocalInterfaceType:remoteInterfaceType:streamToken:]
  -[VCRemoteVideoManager newQueueForStreamToken:videoMode:]
  -[VCRemoteVideoManager newQueueForStreamToken:videoMode:imageQueueProtected:]
  -[VCRemoteVideoManager getQueueForStreamToken:videoMode:]
  -[VCRemoteVideoManager queueExistsForStreamToken:]
  -[VCRemoteVideoManager doesQueueExistForStreamToken:]
  -[VCRemoteVideoManager dispatchedDidReceiveFirstRemoteFrameForStreamToken:]
  -[VCRemoteVideoManager dispatchedRemoteScreenAttributesDidChange:streamToken:]
  -[VCRemoteVideoManager dispatchedRemoteVideoAttributesDidChange:streamToken:]
  -[VCRemoteVideoManager dispatchedRemoteVideoDidPause:streamToken:]
  -[VCRemoteVideoManager dispatchedRemoteMediaDidStall:streamToken:]
  -[VCRemoteVideoManager dispatchedRemoteVideoDidDegrade:streamToken:]
  -[VCRemoteVideoManager dispatchedRemoteVideoDidSuspend:streamToken:]
  -[VCRemoteVideoManager dispatchedConnectionDidChangeWithLocalInterfaceType:remoteInterfaceType:streamToken:]
  -[VCRemoteVideoManager slotForStreamToken:videoMode:]
  -[VCRemoteVideoManager cleanupDictionaries]
  -[VCRemoteVideoManager contextIdForStreamTokenWithArguments:error:]
  -[VCRemoteVideoManager setLayerBoundsForStreamTokenWithArguments:error:]
  -[VCRemoteVideoManager notifyCachedStateForStreamToken:]
  -[VCRemoteVideoManager dispatchedNotifyCachedStateForStreamToken:]


VCCellularAudioTap : NSObject <VCAudioIODelegate, VCAudioPowerSpectrumSourceDelegate>
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <VCServerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCCellularAudioTap audioIOTypeFromTapType:]

  // instance methods
  -[VCCellularAudioTap setDelegate:]
  -[VCCellularAudioTap delegate]
  -[VCCellularAudioTap setDelegateQueue:]
  -[VCCellularAudioTap dealloc]
  -[VCCellularAudioTap delegateQueue]
  -[VCCellularAudioTap didUpdateBasebandCodec:]
  -[VCCellularAudioTap didServerDie]
  -[VCCellularAudioTap audioPowerSpectrumSinkDidRegister]
  -[VCCellularAudioTap audioPowerSpectrumSinkDidUnregister]
  -[VCCellularAudioTap didSuspendAudioIO:]
  -[VCCellularAudioTap didResumeAudioIO:]
  -[VCCellularAudioTap didResume]
  -[VCCellularAudioTap didStart:error:]
  -[VCCellularAudioTap didStop:error:]
  -[VCCellularAudioTap controllerFormatChanged:]
  -[VCCellularAudioTap didSuspend]
  -[VCCellularAudioTap initWithProcessId:delegate:delegateQueue:]
  -[VCCellularAudioTap addAudioTapForStreamToken:tapType:error:]
  -[VCCellularAudioTap removeAudioTapForStreamToken:error:]
  -[VCCellularAudioTap registerAudioTapForStreamToken:tapType:]
  -[VCCellularAudioTap unregisterAudioTapForStreamToken:]
  -[VCCellularAudioTap audioIOConfigWithAudioType:realtimeContext:]


AVCAudioPowerSpectrumChannel : NSObject <NSSecureCoding>
 @property  NSArray *bins

  // class methods
  +[AVCAudioPowerSpectrumChannel supportsSecureCoding]

  // instance methods
  -[AVCAudioPowerSpectrumChannel encodeWithCoder:]
  -[AVCAudioPowerSpectrumChannel dealloc]
  -[AVCAudioPowerSpectrumChannel bins]
  -[AVCAudioPowerSpectrumChannel init]
  -[AVCAudioPowerSpectrumChannel initWithCoder:]
  -[AVCAudioPowerSpectrumChannel applyChannelBins:binCount:]


VCNetworkSimulator : NSObject
 @property  VCEmulatedNetwork *network

  // class methods
  +[VCNetworkSimulator sharedInstance]

  // instance methods
  -[VCNetworkSimulator network]
  -[VCNetworkSimulator dealloc]
  -[VCNetworkSimulator stop]
  -[VCNetworkSimulator start]
  -[VCNetworkSimulator init]
  -[VCNetworkSimulator createDefaultPolicies]
  -[VCNetworkSimulator loadPoliciesFromJsonFile]
  -[VCNetworkSimulator setupNetwork]
  -[VCNetworkSimulator processNetwork]


VCCaptionsUtilities : NSObject
  // class methods
  +[VCCaptionsUtilities formattedTextWithTranscription:]


VCMediaNegotiationBlobCaptionsSettings : PBCodable <NSCopying>
 @property  BOOL hasCanDisplayCaptions
 @property  BOOL canDisplayCaptions
 @property  BOOL hasSenderLanguages
 @property  unsigned int senderLanguages

  // instance methods
  -[VCMediaNegotiationBlobCaptionsSettings copyTo:]
  -[VCMediaNegotiationBlobCaptionsSettings mergeFrom:]
  -[VCMediaNegotiationBlobCaptionsSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobCaptionsSettings copyWithZone:]
  -[VCMediaNegotiationBlobCaptionsSettings readFrom:]
  -[VCMediaNegotiationBlobCaptionsSettings writeTo:]
  -[VCMediaNegotiationBlobCaptionsSettings isEqual:]
  -[VCMediaNegotiationBlobCaptionsSettings setCanDisplayCaptions:]
  -[VCMediaNegotiationBlobCaptionsSettings setHasCanDisplayCaptions:]
  -[VCMediaNegotiationBlobCaptionsSettings hasCanDisplayCaptions]
  -[VCMediaNegotiationBlobCaptionsSettings setSenderLanguages:]
  -[VCMediaNegotiationBlobCaptionsSettings setHasSenderLanguages:]
  -[VCMediaNegotiationBlobCaptionsSettings hasSenderLanguages]
  -[VCMediaNegotiationBlobCaptionsSettings canDisplayCaptions]
  -[VCMediaNegotiationBlobCaptionsSettings senderLanguages]


VCMediaStream : VCObject <VCMediaStreamProtocol, RTCPReportProvider, VCSecurityEventHandler, VCConnectionChangedHandler>
 @property  long long streamToken
 @property  int state
 @property  <VCMediaStreamDelegate> *delegate
 @property  <VCMomentsCollectorDelegate> *momentsCollectorDelegate
 @property  unsigned int localSSRC
 @property  <VCMediaStreamNotification> *notificationDelegate
 @property  <RTCPReportProvider> *rtcpReportProvider
 @property  double rtcpHeartbeatLeeway
 @property  double lastReceivedRTPPacketTime
 @property  double lastReceivedRTCPPacketTime
 @property  AVCBasebandCongestionDetector *basebandCongestionDetector
 @property  int operatingMode
 @property  ^{tagVCMediaQueue=} mediaQueue
 @property  VCMediaStreamTransport *defaultTransport
 @property  NSArray *transportArray
 @property  VCMediaStreamConfig *defaultStreamConfig
 @property  VCMediaStreamConfig *oneToOneStreamConfig
 @property  BOOL isSendingMedia
 @property  AVCRateControlFeedbackController *feedbackController
 @property  ^v mediaControlInfoGenerator
 @property  unsigned int mediaControlInfoGeneratorType
 @property  VCNetworkFeedbackController *networkFeedbackController
 @property  NSArray *compoundStreamIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCMediaStream isSameSRTPKey:newKey:]

  // instance methods
  -[VCMediaStream setNotificationDelegate:]
  -[VCMediaStream notificationDelegate]
  -[VCMediaStream unlock]
  -[VCMediaStream setDelegate:]
  -[VCMediaStream delegate]
  -[VCMediaStream setPause:]
  -[VCMediaStream state]
  -[VCMediaStream dealloc]
  -[VCMediaStream stop]
  -[VCMediaStream start]
  -[VCMediaStream startWithCompletionHandler:]
  -[VCMediaStream lock]
  -[VCMediaStream init]
  -[VCMediaStream setState:]
  -[VCMediaStream mediaQueue]
  -[VCMediaStream operatingMode]
  -[VCMediaStream setOperatingMode:]
  -[VCMediaStream streamToken]
  -[VCMediaStream feedbackController]
  -[VCMediaStream setRtcpTimeOutInterval:]
  -[VCMediaStream setRtcpEnabled:]
  -[VCMediaStream setRtcpSendInterval:]
  -[VCMediaStream setRtpTimeOutEnabled:]
  -[VCMediaStream setRtpTimeOutInterval:]
  -[VCMediaStream setRtcpTimeOutEnabled:]
  -[VCMediaStream defaultTransport]
  -[VCMediaStream basebandCongestionDetector]
  -[VCMediaStream setBasebandCongestionDetector:]
  -[VCMediaStream supportedPayloads]
  -[VCMediaStream createNWMonitor]
  -[VCMediaStream destroyNWMonitor]
  -[VCMediaStream onCallIDChanged]
  -[VCMediaStream onConfigureStreamWithConfiguration:error:]
  -[VCMediaStream onStartWithCompletionHandler:]
  -[VCMediaStream onStopWithCompletionHandler:]
  -[VCMediaStream onPauseWithCompletionHandler:]
  -[VCMediaStream onResumeWithCompletionHandler:]
  -[VCMediaStream onSendRTCPPacket]
  -[VCMediaStream onRTPTimeout]
  -[VCMediaStream onRTCPTimeout]
  -[VCMediaStream lastReceivedRTPPacketTime]
  -[VCMediaStream lastReceivedRTCPPacketTime]
  -[VCMediaStream rtcpHeartbeatLeeway]
  -[VCMediaStream handleActiveConnectionChange:]
  -[VCMediaStream initWithTransportSessionID:]
  -[VCMediaStream initWithTransportSessionID:localSSRC:]
  -[VCMediaStream setLocalParticipantInfo:networkSockets:withError:]
  -[VCMediaStream generateReceptionReportList:reportCount:]
  -[VCMediaStream setStreamDirection:]
  -[VCMediaStream willExitState:newState:]
  -[VCMediaStream didEnterState:oldState:]
  -[VCMediaStream shouldUseNWConnectionBackingSocket]
  -[VCMediaStream shouldReportNetworkInterfaceType]
  -[VCMediaStream setStreamIDs:repairStreamIDs:]
  -[VCMediaStream collectRxChannelMetrics:interval:]
  -[VCMediaStream collectRxChannelMetrics:]
  -[VCMediaStream collectTxChannelMetrics:]
  -[VCMediaStream setMediaQueue:]
  -[VCMediaStream networkFeedbackController]
  -[VCMediaStream setNetworkFeedbackController:]
  -[VCMediaStream getRTCPReportNTPTimeMiddle32ForReportId:]
  -[VCMediaStream getExtendedSequenceNumberForSequenceNumber:]
  -[VCMediaStream handleEncryptionInfoChange:]
  -[VCMediaStream resetDecryptionTimeout]
  -[VCMediaStream didEncryptionKeyRollTimeout]
  -[VCMediaStream localSSRC]
  -[VCMediaStream mediaControlInfoGenerator]
  -[VCMediaStream setStreamConfig:withError:]
  -[VCMediaStream setupRTPWithIDSDestination:error:]
  -[VCMediaStream setupRTPWithSocketDictionary:error:]
  -[VCMediaStream streamDirection]
  -[VCMediaStream setDecryptionTimeOutEnabled:]
  -[VCMediaStream setDecryptionTimeOutInterval:]
  -[VCMediaStream copyDelegate]
  -[VCMediaStream momentsCollectorDelegate]
  -[VCMediaStream setMomentsCollectorDelegate:]
  -[VCMediaStream defaultStreamConfig]
  -[VCMediaStream oneToOneStreamConfig]
  -[VCMediaStream isSendingMedia]
  -[VCMediaStream decryptionStatusChanged:]
  -[VCMediaStream initializeTransportSetupInfoWithTransportSession:]
  -[VCMediaStream handleTransportSessionEvent:info:]
  -[VCMediaStream initializeTransportSessionWithSocketDictionary:error:]
  -[VCMediaStream initializeTransportSetupInfoWithSocketDictionary:]
  -[VCMediaStream initializeTransportSetupInfoWithRTPSocket:RTCPSocket:]
  -[VCMediaStream cleanupNWConnection:]
  -[VCMediaStream initializeTransportSessionWithRTPNWConnectionID:rtcpNWConnectionID:error:]
  -[VCMediaStream setupRTPWithNWConnection:error:]
  -[VCMediaStream dupNWConnectionBackingSocket:]
  -[VCMediaStream setupNWConnectionWithID:]
  -[VCMediaStream setupCallbacksWithNWConnectionMonitor:]
  -[VCMediaStream setupRTPWithLocalParticipantInfo:error:]
  -[VCMediaStream setupRTPForIDS]
  -[VCMediaStream initializeTransportSessionWithIDSDestination:error:]
  -[VCMediaStream initializeTransportSetupInfoWithIDSDestination:error:]
  -[VCMediaStream setupRTPWithIPInfo:error:]
  -[VCMediaStream reportTransportInfo]
  -[VCMediaStream collectChannelSequenceMetrics:]
  -[VCMediaStream setupMediaStream]
  -[VCMediaStream streamStateToString:]
  -[VCMediaStream createRTPHandleWithStreamConfig:payloadType:localSSRC:]
  -[VCMediaStream createTransportWithStreamConfig:ssrc:]
  -[VCMediaStream unregisterStatistics]
  -[VCMediaStream registerStatisticsHandler:statisticType:]
  -[VCMediaStream registerStatistics:]
  -[VCMediaStream initializeWRMUsingRtpHandle:]
  -[VCMediaStream unregisterWRMCallback]
  -[VCMediaStream shouldStopReportingTimer]
  -[VCMediaStream registerMediaControlInfoGeneratorWithConfigs:]
  -[VCMediaStream getMediaStreamConfigForControlInfoGenerator:]
  -[VCMediaStream createLocalMediaControlInfoGeneratorWithType:version:]
  -[VCMediaStream registerCallbacksForMediaControlInfoGenerator:forDirection:options:]
  -[VCMediaStream unregisterMediaControlInfoGenerator]
  -[VCMediaStream updateRemoteAddressWithConfig:error:]
  -[VCMediaStream handleStartDidSucceed:withError:]
  -[VCMediaStream notifyDelegateDidReceiveRTCPPackets:]
  -[VCMediaStream startMediaTransportsWithError:]
  -[VCMediaStream stopMediaTransports]
  -[VCMediaStream stopInternalWithHandler:]
  -[VCMediaStream getInvalidParamErrorForSetPause:didSucceed:]
  -[VCMediaStream setPause:withCompletionHandler:]
  -[VCMediaStream sendControlPacketWithParameters:]
  -[VCMediaStream isRTPTimeoutEnabled]
  -[VCMediaStream isRTCPTimeoutEnabled]
  -[VCMediaStream isDecryptionTimeoutEnabled]
  -[VCMediaStream isRTCPSendEnabled]
  -[VCMediaStream processRTPTimeoutSettingChange]
  -[VCMediaStream processRTCPTimeoutSettingChange]
  -[VCMediaStream processDecryptionTimeoutSettingChange]
  -[VCMediaStream rtcpReportProvider]
  -[VCMediaStream setRtcpReportProvider:]
  -[VCMediaStream resetRTCPSendHeartbeatTimer:]
  -[VCMediaStream rtcpSendHeartbeat]
  -[VCMediaStream startRTCPSendHeartbeat]
  -[VCMediaStream stopRTCPSendHeartbeat]
  -[VCMediaStream resetTimeoutHeartbeatTimer:]
  -[VCMediaStream resetTimeoutHeartbeatWithRTPTimeout:rtcpTimeout:decryptionTimeout:currentTime:]
  -[VCMediaStream computeNextTimoutWithEnabledTime:timeoutInterval:lastReceivedPacketTime:currentTime:lastTimeoutReportTime:]
  -[VCMediaStream checkRTPPacketTimeoutAgainstTime:lastReceivedPacketTime:]
  -[VCMediaStream checkRTCPPacketTimeoutAgainstTime:lastReceivedPacketTime:]
  -[VCMediaStream checkDecryptionTimeoutAgainstTime:decryptionErrorStartTime:]
  -[VCMediaStream checkDecryptionTimeoutForMKMRecoveryAgainstTime:decryptionErrorStartTime:]
  -[VCMediaStream checkForDecryptionTimeout]
  -[VCMediaStream timeoutHeartbeat]
  -[VCMediaStream startTimeoutHeartbeat]
  -[VCMediaStream stopTimeoutHeartbeat]
  -[VCMediaStream handleMediaCallbackNotification:inData:outData:]
  -[VCMediaStream mediaControlInfoGeneratorType]
  -[VCMediaStream transportArray]
  -[VCMediaStream compoundStreamIDs]
  -[VCMediaStream setCompoundStreamIDs:]


VCVideoStreamReceiveGroupConfig : VCMediaStreamGroupConfig

VCVideoRuleCollectionsMoments : NSObject
  // class methods
  +[VCVideoRuleCollectionsMoments sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsMoments init]
  -[VCVideoRuleCollectionsMoments getMomentsCapabilities]
  -[VCVideoRuleCollectionsMoments getMomentsImageTypes]
  -[VCVideoRuleCollectionsMoments getMomentsVideoCodecs]


VCVideoRuleCollectionsMomentsMac : VCVideoRuleCollectionsMoments
  // class methods
  +[VCVideoRuleCollectionsMomentsMac sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsMomentsMac initWithHardwareSettings:]
  -[VCVideoRuleCollectionsMomentsMac getMomentsCapabilities]
  -[VCVideoRuleCollectionsMomentsMac getMomentsImageTypes]
  -[VCVideoRuleCollectionsMomentsMac getMomentsVideoCodecs]


VCVideoRuleCollectionsMomentsEmbeded : VCVideoRuleCollectionsMoments
  // class methods
  +[VCVideoRuleCollectionsMomentsEmbeded sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsMomentsEmbeded initWithHardwareSettings:]
  -[VCVideoRuleCollectionsMomentsEmbeded getMomentsCapabilities]
  -[VCVideoRuleCollectionsMomentsEmbeded getMomentsImageTypes]
  -[VCVideoRuleCollectionsMomentsEmbeded getMomentsVideoCodecs]
  -[VCVideoRuleCollectionsMomentsEmbeded isSupportedDeviceClass]
  -[VCVideoRuleCollectionsMomentsEmbeded isSupportedChipID]


WRMClient : NSObject
 @property  <WRMClientDelegate> *delegate
 @property  int mediaControlInfoVersion

  // instance methods
  -[WRMClient setConfiguration:]
  -[WRMClient setDelegate:]
  -[WRMClient delegate]
  -[WRMClient dealloc]
  -[WRMClient initWithDelegate:]
  -[WRMClient init]
  -[WRMClient setupServiceConnection]
  -[WRMClient mediaControlInfoVersion]
  -[WRMClient setMediaControlInfoVersion:]
  -[WRMClient setPreWarmState:]
  -[WRMClient updateMetricsConfig:]
  -[WRMClient setRSSIThresholdEnabled:]
  -[WRMClient releaseServiceConnection]
  -[WRMClient startWRMClientWithMode:metricsConfig:]
  -[WRMClient stopWRMClient]
  -[WRMClient getWRMSubscribeVersion]
  -[WRMClient sendProcessInfoWithProcessID:]
  -[WRMClient sendSubscriptionInfoFaceTimeCalling]
  -[WRMClient sendUnsubscriptionInfoFaceTimeCalling]
  -[WRMClient requestNotificationFaceTimeCalling]
  -[WRMClient sendStatusUpdateInfoFaceTimeCalling:]
  -[WRMClient sendStatusUpdateFaceTimeCalling:]
  -[WRMClient dumpReport:]
  -[WRMClient sendReport:]
  -[WRMClient reportMetricsWifiCalling:]
  -[WRMClient reportImmediateMetric:value:]
  -[WRMClient reportMetricsFaceTimeCalling:]
  -[WRMClient processWRMCoexMetrics:isAlertedMode:]
  -[WRMClient processNotificationList:]


VCVideoRuleCollectionsScreenSecondaryMac : VCVideoRuleCollectionsScreenSecondary
  // class methods
  +[VCVideoRuleCollectionsScreenSecondaryMac sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsScreenSecondaryMac initWithHardwareSettings:]
  -[VCVideoRuleCollectionsScreenSecondaryMac initSupportedPayloads]
  -[VCVideoRuleCollectionsScreenSecondaryMac setupRules]
  -[VCVideoRuleCollectionsScreenSecondaryMac setupH264Rules]
  -[VCVideoRuleCollectionsScreenSecondaryMac setupHEVCRules]
  -[VCVideoRuleCollectionsScreenSecondaryMac tilesPerFrame:]


AVCCaptionsToken : NSObject <VCCaptionsTranscriptionSegment>
 @property  NSString *text
 @property  double confidence
 @property  {_NSRange=QQ} range

  // instance methods
  -[AVCCaptionsToken confidence]
  -[AVCCaptionsToken text]
  -[AVCCaptionsToken dealloc]
  -[AVCCaptionsToken range]
  -[AVCCaptionsToken initWithText:confidence:range:]


AVCCaptionsResult : NSObject <VCCaptionsTranscription>
 @property  BOOL utteranceComplete
 @property  NSArray *tokens
 @property  NSString *text
 @property  unsigned int utteranceNumber
 @property  unsigned int updateNumber
 @property  NSArray *segments

  // instance methods
  -[AVCCaptionsResult text]
  -[AVCCaptionsResult tokens]
  -[AVCCaptionsResult dealloc]
  -[AVCCaptionsResult segments]
  -[AVCCaptionsResult utteranceNumber]
  -[AVCCaptionsResult utteranceComplete]
  -[AVCCaptionsResult updateNumber]
  -[AVCCaptionsResult initWithCapacity:utteranceComplete:utteranceNumber:updateNumber:]
  -[AVCCaptionsResult addTokenWithString:confidence:range:]


AVCCaptionsConfig : NSObject
 @property  NSLocale *locale

  // instance methods
  -[AVCCaptionsConfig dealloc]
  -[AVCCaptionsConfig locale]
  -[AVCCaptionsConfig setLocale:]


VCVideoDecoder : NSObject
 @property  ^{tagHANDLE=i} videoPlayerHandle

  // class methods
  +[VCVideoDecoder streamTokenDecoderMap]
  +[VCVideoDecoder decoderForStreamToken:withConfig:]
  +[VCVideoDecoder releaseVideoDecoderForStreamToken:]

  // instance methods
  -[VCVideoDecoder initWithConfig:]
  -[VCVideoDecoder dealloc]
  -[VCVideoDecoder videoPlayerHandle]


VCImageResizingConverter : VCImageConverterBase
  // instance methods
  -[VCImageResizingConverter dealloc]
  -[VCImageResizingConverter initWithOutputWidth:outputHeight:formatType:]


VCHardwareSettingsEmbedded : VCHardwareSettings <VCHardwareSettingsEmbeddedProtocol>
 @property  NSString *deviceName
 @property  BOOL hasBaseband
 @property  unsigned int screenWidth
 @property  unsigned int screenHeight
 @property  unsigned long maxScreenEncodingSizeSupported
 @property  unsigned int maxActiveScreenEncoders
 @property  unsigned int maxFrameRateSupportedScreenShare
 @property  BOOL shouldEnforceScreenFrameRateLimit
 @property  long long deviceClass
 @property  long long chipId
 @property  long long videoEncoderType
 @property  BOOL useSoftFramerateSwitching
 @property  BOOL hasAppleNeuralEngine
 @property  unsigned int audioPacketLossConcealmentAlgorithmAACELD
 @property  BOOL isSecondDisplaySupportEnabled
 @property  BOOL canDo1080p
 @property  BOOL isHEVC444DecodeSupported
 @property  BOOL isDisplayPortrait
 @property  BOOL isCaptureSIFRPreferred
 @property  long long screenShareCapabilities
 @property  BOOL isRemoteCameraSenderSupported
 @property  BOOL isCellularTappingSupported
 @property  BOOL supportsMultiway720pStream
 @property  BOOL isDeviceLargeScreen
 @property  BOOL supportHEVC
 @property  BOOL vcpSupportsHEVCEncoder
 @property  BOOL supportsHEIFEncoding
 @property  BOOL isSpatialAudioSupported
 @property  BOOL isPixelFormatAvailable
 @property  NSArray *supportedVideoPayloads
 @property  BOOL isCaptionsSupported
 @property  unsigned int maxDisplayRefreshRate
 @property  unsigned int maxActiveVideoEncoders
 @property  unsigned int maxActiveVideoDecoders
 @property  BOOL isSiriVoiceTapSupported
 @property  BOOL isSiriVoicePlayoutSupported
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCHardwareSettingsEmbedded sharedInstance]
  +[VCHardwareSettingsEmbedded deviceClass]

  // instance methods
  -[VCHardwareSettingsEmbedded hasBaseband]
  -[VCHardwareSettingsEmbedded marketingName]
  -[VCHardwareSettingsEmbedded chipId]
  -[VCHardwareSettingsEmbedded deviceClass]
  -[VCHardwareSettingsEmbedded dealloc]
  -[VCHardwareSettingsEmbedded screenWidth]
  -[VCHardwareSettingsEmbedded supportsHEIFEncoding]
  -[VCHardwareSettingsEmbedded isSpatialAudioSupported]
  -[VCHardwareSettingsEmbedded screenHeight]
  -[VCHardwareSettingsEmbedded deviceName]
  -[VCHardwareSettingsEmbedded init]
  -[VCHardwareSettingsEmbedded hasAppleNeuralEngine]
  -[VCHardwareSettingsEmbedded isPixelFormatAvailable]
  -[VCHardwareSettingsEmbedded supportedVideoPayloads]
  -[VCHardwareSettingsEmbedded useSoftFramerateSwitching]
  -[VCHardwareSettingsEmbedded isCaptionsSupported]
  -[VCHardwareSettingsEmbedded maxDisplayRefreshRate]
  -[VCHardwareSettingsEmbedded maxActiveVideoEncoders]
  -[VCHardwareSettingsEmbedded maxActiveVideoDecoders]
  -[VCHardwareSettingsEmbedded supportsMultiway720pStream]
  -[VCHardwareSettingsEmbedded isDeviceLargeScreen]
  -[VCHardwareSettingsEmbedded maxOneToOneFramerateSupported]
  -[VCHardwareSettingsEmbedded maxMultiwayFramerateSupported]
  -[VCHardwareSettingsEmbedded addPixelFormat]
  -[VCHardwareSettingsEmbedded maxRemoteParticipants30fps]
  -[VCHardwareSettingsEmbedded maxFpsCameraCaptureDuringSharing]
  -[VCHardwareSettingsEmbedded _initializeScreenDimension]
  -[VCHardwareSettingsEmbedded screenWidthForDisplayID:]
  -[VCHardwareSettingsEmbedded screenHeightForDisplayID:]
  -[VCHardwareSettingsEmbedded previewPreferredAspectRatio]
  -[VCHardwareSettingsEmbedded maxScreenEncodingSizeSupported]
  -[VCHardwareSettingsEmbedded maxActiveScreenEncoders]
  -[VCHardwareSettingsEmbedded maxFrameRateSupportedScreenShare]
  -[VCHardwareSettingsEmbedded shouldEnforceScreenFrameRateLimit]
  -[VCHardwareSettingsEmbedded limitCameraDownlinkBitrateDuringSharing]
  -[VCHardwareSettingsEmbedded supportsDedicatedSystemAudioStream]
  -[VCHardwareSettingsEmbedded disableMLScalarDuringSharing]
  -[VCHardwareSettingsEmbedded screenShareCapabilities]
  -[VCHardwareSettingsEmbedded isCellularTappingSupported]
  -[VCHardwareSettingsEmbedded videoEncoderType]
  -[VCHardwareSettingsEmbedded isSecondDisplaySupportEnabled]
  -[VCHardwareSettingsEmbedded isHEVC444DecodeSupported]
  -[VCHardwareSettingsEmbedded setupSiriSupport]
  -[VCHardwareSettingsEmbedded isSpatialAudioSupportedIPhone]
  -[VCHardwareSettingsEmbedded isSpatialAudioSupportedIPad]
  -[VCHardwareSettingsEmbedded isSpatialAudioSupportedIPod]
  -[VCHardwareSettingsEmbedded isCaptureSIFRPreferred]
  -[VCHardwareSettingsEmbedded isDisplayPortrait]
  -[VCHardwareSettingsEmbedded maxFrameRateSupportedBackgroundBlur]
  -[VCHardwareSettingsEmbedded audioPacketLossConcealmentAlgorithmAACELD]
  -[VCHardwareSettingsEmbedded isRemoteCameraSenderSupported]
  -[VCHardwareSettingsEmbedded canDo1080p]
  -[VCHardwareSettingsEmbedded screenShareCapabilitiesIPhone]
  -[VCHardwareSettingsEmbedded screenShareCapabilitiesIPad]
  -[VCHardwareSettingsEmbedded screenShareCapabilitiesATV]
  -[VCHardwareSettingsEmbedded screenShareCapabilitiesIPod]


VCViewpointCorrection : NSObject
  // class methods
  +[VCViewpointCorrection intrinsicsFromDeviceFormat:]

  // instance methods
  -[VCViewpointCorrection dealloc]
  -[VCViewpointCorrection init]
  -[VCViewpointCorrection viewpointCorrectionForSampleBuffer:activeFormat:enabled:]


VCSwitchManager : NSObject
 @property  unsigned int localSwitches
 @property  unsigned int remoteSwitches
 @property  unsigned int negotiatedSwitches

  // instance methods
  -[VCSwitchManager initializeLocalSwitches]
  -[VCSwitchManager setupLocalOnOffSwitches]
  -[VCSwitchManager setupLocalABTestSwitches]
  -[VCSwitchManager setupLocalSwitchesIndividually]
  -[VCSwitchManager setupLocalOnOffSwitchesFromMasterSwitch]
  -[VCSwitchManager setupLocalAudioTestGroupSwitches]
  -[VCSwitchManager setupLocalVideoTestGroupSwitches]
  -[VCSwitchManager setupLocalNetworkTestGroupSwitches]
  -[VCSwitchManager setupLocalRateControlTestGroupSwitches]
  -[VCSwitchManager setupLocalDuplicationTestGroupSwitches]
  -[VCSwitchManager updateDuplicationEnhancementSwitches]
  -[VCSwitchManager negotiateSwitches]
  -[VCSwitchManager negotiateSwitchesForIsCaller:]
  -[VCSwitchManager setRemoteSwitches:isCaller:]
  -[VCSwitchManager isSwitchEnabled:]
  -[VCSwitchManager isLocalSwitchEnabled:]
  -[VCSwitchManager applyNegotiationRulesUsingLocalSwitches:negotiatedSwitches:]
  -[VCSwitchManager localSwitches]
  -[VCSwitchManager setLocalSwitches:]
  -[VCSwitchManager remoteSwitches]
  -[VCSwitchManager setRemoteSwitches:]
  -[VCSwitchManager negotiatedSwitches]
  -[VCSwitchManager setNegotiatedSwitches:]


VCVideoRuleCollectionsRemoteCamera : VCVideoRuleCollections
  // class methods
  +[VCVideoRuleCollectionsRemoteCamera sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsRemoteCamera tilesPerFrame]
  -[VCVideoRuleCollectionsRemoteCamera setupHEVCRules]


VCConnectionManagerIDS : VCConnectionManager
  // instance methods
  -[VCConnectionManagerIDS addConnection:]
  -[VCConnectionManagerIDS secondaryConnection]
  -[VCConnectionManagerIDS dealloc]
  -[VCConnectionManagerIDS removeConnection:]
  -[VCConnectionManagerIDS startActiveProbingWithOptions:]
  -[VCConnectionManagerIDS stopActiveProbingWithOptions:]
  -[VCConnectionManagerIDS flushLinkProbingStatusWithOptions:]
  -[VCConnectionManagerIDS queryProbingResultsWithOptions:]
  -[VCConnectionManagerIDS reportConnection:isInitialConnection:]
  -[VCConnectionManagerIDS getPrimaryConnectionToBeCompared]
  -[VCConnectionManagerIDS getSecondaryConnectionToBeCompared]
  -[VCConnectionManagerIDS updateCellularMTU:]
  -[VCConnectionManagerIDS updateCellularTech:forLocalInterface:]
  -[VCConnectionManagerIDS sourceDestinationInfo:isSourceOnCellular:isSourceIPv6:]
  -[VCConnectionManagerIDS shouldAcceptDataFromSourceDestinationInfo:]
  -[VCConnectionManagerIDS copyConnectionWithSourceDestinationInfo:isPrimary:]
  -[VCConnectionManagerIDS updateSessionStats:]
  -[VCConnectionManagerIDS updatePacketCountAndByteCountWithIndex:packetSize:numOfStreamId:isPriorityIncluded:isOutgoing:]
  -[VCConnectionManagerIDS synchronizeParticipantGenerationCounter:]
  -[VCConnectionManagerIDS getPacketCountWithIndex:isOutgoing:]
  -[VCConnectionManagerIDS getByteCountWithIndex:isOutgoing:]
  -[VCConnectionManagerIDS updateConnectionForDuplication]
  -[VCConnectionManagerIDS updateOneToOneBitrateCapsForConnection:]
  -[VCConnectionManagerIDS updateAllBitrateCapsForConnection:]
  -[VCConnectionManagerIDS updateNegotiatedSettingsOnetoOne:]
  -[VCConnectionManagerIDS initWithMultiwayEnabled:]
  -[VCConnectionManagerIDS useConnectionAsPrimary:]
  -[VCConnectionManagerIDS getConnectionSelectionPolicy]
  -[VCConnectionManagerIDS primaryConnection]
  -[VCConnectionManagerIDS setPrimaryConnection:]
  -[VCConnectionManagerIDS setSecondaryConnection:]
  -[VCConnectionManagerIDS connectionForDuplication]
  -[VCConnectionManagerIDS setConnectionForDuplication:]
  -[VCConnectionManagerIDS lastPrimaryConnectionInUse]
  -[VCConnectionManagerIDS setLastPrimaryConnectionInUse:]
  -[VCConnectionManagerIDS didUpdateLinkPreferenceOrder:]
  -[VCConnectionManagerIDS didLinkProbingLockdownEnd]
  -[VCConnectionManagerIDS addLinkProbingTelemetry:]
  -[VCConnectionManagerIDS reportActiveConnectionOneToOne:isAudioOnly:]
  -[VCConnectionManagerIDS reportFirstActiveConnectionOneToOne:remoteOSVersion:redState:isAudioOnly:]
  -[VCConnectionManagerIDS shouldDropCurrentPrimaryConnectionWithConnectionStats:]
  -[VCConnectionManagerIDS reselectPrimaryConnection]
  -[VCConnectionManagerIDS updateConnectionSelectionPolicyWithPreferE2E:]
  -[VCConnectionManagerIDS setPreferredLocalInterfaceForDuplication:]
  -[VCConnectionManagerIDS setPreferredRemoteInterfaceForDuplication:]
  -[VCConnectionManagerIDS optIntoExistingSubscribedStreams]
  -[VCConnectionManagerIDS setOptIntoExistingSubscribedStreams:]
  -[VCConnectionManagerIDS resetParticipantGenerationCounter]
  -[VCConnectionManagerIDS uplinkAudioOnlyBitrateCapOneToOne:]
  -[VCConnectionManagerIDS uplinkBitrateCapOneToOne:]
  -[VCConnectionManagerIDS oneToOneBitrateCapForConnectionWithType:]
  -[VCConnectionManagerIDS uplinkBitrateCapForConnection:]
  -[VCConnectionManagerIDS downlinkBitrateCapForConnection:]
  -[VCConnectionManagerIDS handlePrimaryConnectionRemoved]
  -[VCConnectionManagerIDS handleSecondaryConnectionRemoved]
  -[VCConnectionManagerIDS optOutAllStreamsForNonPrimaryConnections]
  -[VCConnectionManagerIDS internalUpdateOneToOneBitrateCapsForConnection:]
  -[VCConnectionManagerIDS addDuplicationConnectionUpdateTelemetryWithSuggestedLinkTypeCombo:payload:]
  -[VCConnectionManagerIDS resetPacketCountAndByteCountWithConnection:]
  -[VCConnectionManagerIDS shouldKeepAllConnections]
  -[VCConnectionManagerIDS shouldReplaceConnection:withConnection:]
  -[VCConnectionManagerIDS addConnectionToConnectionArray:]
  -[VCConnectionManagerIDS removeFromConnectionArray:]
  -[VCConnectionManagerIDS updateDuplicationStateWithConnectionOperation:isLocalOnWiFi:isRemoteOnWiFi:]
  -[VCConnectionManagerIDS shouldUpdateServerBasedConnection:]
  -[VCConnectionManagerIDS canOptOutAllStreamsForConnection:]


VCIDRSchedulerStream : NSObject
 @property  unsigned int keyFrameInterval
 @property  unsigned int framerate
 @property  unsigned int weightFactor
 @property  unsigned int framePosition
 @property  unsigned int framesPerIdrPeriod

  // class methods
  +[VCIDRSchedulerStream schedulerStreamWithKeyFrameInterval:framerate:weightFactor:]

  // instance methods
  -[VCIDRSchedulerStream framerate]
  -[VCIDRSchedulerStream setFramerate:]
  -[VCIDRSchedulerStream framePosition]
  -[VCIDRSchedulerStream setFramePosition:]
  -[VCIDRSchedulerStream keyFrameInterval]
  -[VCIDRSchedulerStream setKeyFrameInterval:]
  -[VCIDRSchedulerStream weightFactor]
  -[VCIDRSchedulerStream setWeightFactor:]
  -[VCIDRSchedulerStream initWithKeyFrameInterval:framerate:weightFactor:]
  -[VCIDRSchedulerStream compareWeightFactor:]
  -[VCIDRSchedulerStream framesPerIdrPeriod]
  -[VCIDRSchedulerStream setFramesPerIdrPeriod:]


VCSessionMediaTypeSettings : VCObject <NSSecureCoding>
 @property  unsigned int mediaType
 @property  unsigned int mediaState
 @property  unsigned int remoteMediaState
 @property  NSSet *streamGroupIDs

  // class methods
  +[VCSessionMediaTypeSettings supportsSecureCoding]
  +[VCSessionMediaTypeSettings settingsWithMediaType:]
  +[VCSessionMediaTypeSettings serializationClasses]

  // instance methods
  -[VCSessionMediaTypeSettings mediaType]
  -[VCSessionMediaTypeSettings encodeWithCoder:]
  -[VCSessionMediaTypeSettings dealloc]
  -[VCSessionMediaTypeSettings initWithMediaType:]
  -[VCSessionMediaTypeSettings setMediaState:]
  -[VCSessionMediaTypeSettings initWithCoder:]
  -[VCSessionMediaTypeSettings addStreamGroupID:]
  -[VCSessionMediaTypeSettings streamGroupIDs]
  -[VCSessionMediaTypeSettings mediaState]
  -[VCSessionMediaTypeSettings remoteMediaState]
  -[VCSessionMediaTypeSettings setRemoteMediaState:]


VCMediaStreamSendGroupConfig : VCMediaStreamGroupConfig
 @property  VCSessionUplinkBandwidthAllocator *uplinkBandwidthAllocator
 @property  BOOL shouldSynchronizeWithSourceRTPTimestamps

  // instance methods
  -[VCMediaStreamSendGroupConfig dealloc]
  -[VCMediaStreamSendGroupConfig uplinkBandwidthAllocator]
  -[VCMediaStreamSendGroupConfig setUplinkBandwidthAllocator:]
  -[VCMediaStreamSendGroupConfig shouldSynchronizeWithSourceRTPTimestamps]
  -[VCMediaStreamSendGroupConfig setShouldSynchronizeWithSourceRTPTimestamps:]


VCMediaStreamSendGroup : VCMediaStreamGroup
 @property  unsigned int currentUplinkTargetBitrate
 @property  unsigned int currentUplinkTotalBitrate
 @property  unsigned int uplinkBitrateCapWifi
 @property  unsigned int uplinkBitrateCapCell
 @property  BOOL isSuspended

  // instance methods
  -[VCMediaStreamSendGroup initWithConfig:]
  -[VCMediaStreamSendGroup isSuspended]
  -[VCMediaStreamSendGroup dealloc]
  -[VCMediaStreamSendGroup didStart]
  -[VCMediaStreamSendGroup didStop]
  -[VCMediaStreamSendGroup updateActiveMediaStreamIDs:withTargetBitrate:mediaBitrates:]
  -[VCMediaStreamSendGroup activeStreamKeys]
  -[VCMediaStreamSendGroup didPause:]
  -[VCMediaStreamSendGroup setPeerSubscribedStreams:]
  -[VCMediaStreamSendGroup setUplinkBitrateCapCell:]
  -[VCMediaStreamSendGroup setUplinkBitrateCapWifi:]
  -[VCMediaStreamSendGroup calculateUplinkTotalBitrateForMediaStreams:]
  -[VCMediaStreamSendGroup currentUplinkTotalBitrate]
  -[VCMediaStreamSendGroup enableRedundancy:]
  -[VCMediaStreamSendGroup uplinkBitrateCapWifi]
  -[VCMediaStreamSendGroup uplinkBitrateCapCell]
  -[VCMediaStreamSendGroup setIsSuspended:]
  -[VCMediaStreamSendGroup shouldCompoundListIgnoreStream:streamConfig:activeStreamIds:]
  -[VCMediaStreamSendGroup updateStreamIDCompoundingWithBlock:activeStreamIds:]
  -[VCMediaStreamSendGroup streamDescriptionForMediaStreamConfig:]
  -[VCMediaStreamSendGroup shouldSubscribeToStreamID:peerSubscribedStreams:]
  -[VCMediaStreamSendGroup isStreamActive:isDesiredActive:peerSubscribedStreams:configStreams:]
  -[VCMediaStreamSendGroup updateUplinkStreamsForPeerSubscribedStreams:]
  -[VCMediaStreamSendGroup updateActiveStreamsWithTargetBitrate:]
  -[VCMediaStreamSendGroup setCurrentUplinkTargetBitrate:]
  -[VCMediaStreamSendGroup setActiveConnection:uplinkBitrateCap:]
  -[VCMediaStreamSendGroup updateActiveStreamsCount:]
  -[VCMediaStreamSendGroup updateBandwidthAllocatorStreamTokenState]
  -[VCMediaStreamSendGroup setCurrentUplinkTotalBitrate:]
  -[VCMediaStreamSendGroup currentUplinkTargetBitrate]


VCMediaNegotiationBlobV2CameraSettingsU1 : PBCodable <NSCopying>
 @property  VCVideoRuleCollections *videoRuleCollections
 @property  {CGSize=dd} orientationMismatchDisplayRatio
 @property  BOOL hasRtpSSRC
 @property  unsigned int rtpSSRC
 @property  NSMutableArray *payloads
 @property  BOOL hasLandscapeAspectRatioX
 @property  unsigned int landscapeAspectRatioX
 @property  BOOL hasLandscapeAspectRatioY
 @property  unsigned int landscapeAspectRatioY
 @property  BOOL hasPortraitAspectRatioX
 @property  unsigned int portraitAspectRatioX
 @property  BOOL hasPortraitAspectRatioY
 @property  unsigned int portraitAspectRatioY
 @property  BOOL hasMismatchedDisplayAspectRatioX
 @property  unsigned int mismatchedDisplayAspectRatioX
 @property  BOOL hasMismatchedDisplayAspectRatioY
 @property  unsigned int mismatchedDisplayAspectRatioY

  // class methods
  +[VCMediaNegotiationBlobV2CameraSettingsU1 payloadsType]

  // instance methods
  -[VCMediaNegotiationBlobV2CameraSettingsU1 copyTo:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 dealloc]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 payloads]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 mergeFrom:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 copyWithZone:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setPayloads:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 readFrom:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 writeTo:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 isEqual:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 rtpSSRC]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setRtpSSRC:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 clearPayloads]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 addPayloads:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 payloadsCount]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 payloadsAtIndex:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 videoRuleCollections]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setHasRtpSSRC:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 hasRtpSSRC]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setLandscapeAspectRatioX:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setHasLandscapeAspectRatioX:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 hasLandscapeAspectRatioX]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setLandscapeAspectRatioY:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setHasLandscapeAspectRatioY:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 hasLandscapeAspectRatioY]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setPortraitAspectRatioX:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setHasPortraitAspectRatioX:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 hasPortraitAspectRatioX]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setPortraitAspectRatioY:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setHasPortraitAspectRatioY:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 hasPortraitAspectRatioY]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setMismatchedDisplayAspectRatioX:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setHasMismatchedDisplayAspectRatioX:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 hasMismatchedDisplayAspectRatioX]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setMismatchedDisplayAspectRatioY:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setHasMismatchedDisplayAspectRatioY:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 hasMismatchedDisplayAspectRatioY]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 landscapeAspectRatioX]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 landscapeAspectRatioY]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 portraitAspectRatioX]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 portraitAspectRatioY]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 mismatchedDisplayAspectRatioX]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 mismatchedDisplayAspectRatioY]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 initWithSSRC:videoRuleCollections:screenSize:aspectRatioPortrait:aspectRatioLandscape:orientationMismatchAspectRatioLandscape:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 aspectRatioPortrait:aspectRatioLandscape:orientationMismatchAspectRatioLandscape:orientationMismatchAspectRatioPortrait:screenSize:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 orientationMismatchDisplayRatio]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 addVideoRules:encodingType:payload:videoRuleCollections:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 printWithLogFile:prefix:screenSize:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 rulesForEncodeType:paylaod:videoRuleCollection:]
  -[VCMediaNegotiationBlobV2CameraSettingsU1 setupVideoRuleCollection:]


VCMediaNegotiationBlobVideoPayloadSettings : PBCodable <NSCopying>
 @property  unsigned int payload
 @property  NSMutableArray *videoRuleCollections
 @property  NSString *featureString
 @property  unsigned int parameterSet

  // class methods
  +[VCMediaNegotiationBlobVideoPayloadSettings videoRuleCollectionsType]

  // instance methods
  -[VCMediaNegotiationBlobVideoPayloadSettings setPayload:]
  -[VCMediaNegotiationBlobVideoPayloadSettings copyTo:]
  -[VCMediaNegotiationBlobVideoPayloadSettings payload]
  -[VCMediaNegotiationBlobVideoPayloadSettings dealloc]
  -[VCMediaNegotiationBlobVideoPayloadSettings mergeFrom:]
  -[VCMediaNegotiationBlobVideoPayloadSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobVideoPayloadSettings copyWithZone:]
  -[VCMediaNegotiationBlobVideoPayloadSettings readFrom:]
  -[VCMediaNegotiationBlobVideoPayloadSettings writeTo:]
  -[VCMediaNegotiationBlobVideoPayloadSettings isEqual:]
  -[VCMediaNegotiationBlobVideoPayloadSettings setParameterSet:]
  -[VCMediaNegotiationBlobVideoPayloadSettings parameterSet]
  -[VCMediaNegotiationBlobVideoPayloadSettings videoRuleCollections]
  -[VCMediaNegotiationBlobVideoPayloadSettings setVideoRuleCollections:]
  -[VCMediaNegotiationBlobVideoPayloadSettings clearVideoRuleCollections]
  -[VCMediaNegotiationBlobVideoPayloadSettings addVideoRuleCollections:]
  -[VCMediaNegotiationBlobVideoPayloadSettings videoRuleCollectionsCount]
  -[VCMediaNegotiationBlobVideoPayloadSettings videoRuleCollectionsAtIndex:]
  -[VCMediaNegotiationBlobVideoPayloadSettings featureString]
  -[VCMediaNegotiationBlobVideoPayloadSettings setFeatureString:]


XPCClientUser : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  @? block
 @property  int eventLogLevel

  // instance methods
  -[XPCClientUser eventLogLevel]
  -[XPCClientUser dealloc]
  -[XPCClientUser setBlock:]
  -[XPCClientUser setEventLogLevel:]
  -[XPCClientUser setQueue:]
  -[XPCClientUser block]
  -[XPCClientUser queue]
  -[XPCClientUser init]


AVConferenceXPCClient : NSObject
 @property  NSObject<OS_xpc_object> *connection
 @property  NSMutableDictionary *registeredBlocks
 @property  BOOL connectionPersists

  // class methods
  +[AVConferenceXPCClient AVConferenceXPCClientSingleton]

  // instance methods
  -[AVConferenceXPCClient newNSErrorFromNSDictionary:]
  -[AVConferenceXPCClient registeredBlocks]
  -[AVConferenceXPCClient sendMessageAsync:arguments:]
  -[AVConferenceXPCClient registerBlockForService:block:]
  -[AVConferenceXPCClient dealloc]
  -[AVConferenceXPCClient sendMessageSync:]
  -[AVConferenceXPCClient connection]
  -[AVConferenceXPCClient newNSDictionaryFromNSError:]
  -[AVConferenceXPCClient deregisterFromService:]
  -[AVConferenceXPCClient registerBlockForService:block:queue:]
  -[AVConferenceXPCClient registerBlockForService:block:queue:eventLogLevel:]
  -[AVConferenceXPCClient newNSDictionaryFromXPCDictionary:]
  -[AVConferenceXPCClient init]
  -[AVConferenceXPCClient sendMessageAsync:]
  -[AVConferenceXPCClient newXPCDictionaryFromNSDictionary:error:]
  -[AVConferenceXPCClient newNSDictionaryFromNSDictionary:]
  -[AVConferenceXPCClient newServerDiedDictionary]
  -[AVConferenceXPCClient newTimeoutDictionary]
  -[AVConferenceXPCClient copyConnection]
  -[AVConferenceXPCClient closeConnectionToServer]
  -[AVConferenceXPCClient createConnectionToServer]
  -[AVConferenceXPCClient sendMessageAsync:arguments:reply:]
  -[AVConferenceXPCClient sendMessageAsync:arguments:reply:queue:]
  -[AVConferenceXPCClient sendMessageAsync:arguments:xpcArguments:reply:]
  -[AVConferenceXPCClient sendMessageAsync:arguments:xpcArguments:reply:queue:]
  -[AVConferenceXPCClient sendMessageAsync:arguments:xpcArguments:reply:queue:replyLogLevel:]
  -[AVConferenceXPCClient sendMessageSync:arguments:]
  -[AVConferenceXPCClient sendMessageSync:arguments:xpcArguments:]
  -[AVConferenceXPCClient connectionPersists]
  -[AVConferenceXPCClient setConnectionPersists:]


VCVideoRuleCollectionsCameraMac : VCVideoRuleCollectionsCamera
  // class methods
  +[VCVideoRuleCollectionsCameraMac sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsCameraMac dealloc]
  -[VCVideoRuleCollectionsCameraMac preferredAspectRatio]
  -[VCVideoRuleCollectionsCameraMac useSoftFramerateSwitching]
  -[VCVideoRuleCollectionsCameraMac initWithHardwareSettings:]
  -[VCVideoRuleCollectionsCameraMac initSupportedPayloads]
  -[VCVideoRuleCollectionsCameraMac setupRules]
  -[VCVideoRuleCollectionsCameraMac setupH264Rules]
  -[VCVideoRuleCollectionsCameraMac setupHEVCRules]
  -[VCVideoRuleCollectionsCameraMac computeEncodingScore]
  -[VCVideoRuleCollectionsCameraMac computeDecodingScore]
  -[VCVideoRuleCollectionsCameraMac setupH264WifiRules]
  -[VCVideoRuleCollectionsCameraMac setUp1080pRules:]
  -[VCVideoRuleCollectionsCameraMac _addWVGAEncodingRules]
  -[VCVideoRuleCollectionsCameraMac _removeRulesGreaterThanVGA]
  -[VCVideoRuleCollectionsCameraMac _removeRulesGreaterThan720p]
  -[VCVideoRuleCollectionsCameraMac _resetJ92EncodingRulesForCameraIsHD:isWVGA:is1080:]
  -[VCVideoRuleCollectionsCameraMac resetEncodingRulesForCameraIsHD:isWVGA:is1080:]


VCStreamOutputManager : NSObject <VCRemoteVideoManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCStreamOutputManager sharedInstance]

  // instance methods
  -[VCStreamOutputManager registerBlocksForService]
  -[VCStreamOutputManager dealloc]
  -[VCStreamOutputManager deregisterBlocksForService]
  -[VCStreamOutputManager init]
  -[VCStreamOutputManager didReceiveFirstRemoteFrameForStreamToken:]
  -[VCStreamOutputManager remoteScreenAttributesDidChange:streamToken:]
  -[VCStreamOutputManager remoteVideoAttributesDidChange:streamToken:]
  -[VCStreamOutputManager remoteVideoDidPause:streamToken:]
  -[VCStreamOutputManager remoteMediaDidStall:streamToken:]
  -[VCStreamOutputManager remoteVideoDidDegrade:streamToken:]
  -[VCStreamOutputManager remoteVideoDidSuspend:streamToken:]
  -[VCStreamOutputManager releaseQueueForStreamToken:]
  -[VCStreamOutputManager connectionDidChangeWithLocalInterfaceType:remoteInterfaceType:streamToken:]
  -[VCStreamOutputManager dispatchedRemoteVideoDidPause:streamToken:]
  -[VCStreamOutputManager dispatchedRemoteMediaDidStall:streamToken:]
  -[VCStreamOutputManager dispatchedRemoteVideoDidDegrade:streamToken:]
  -[VCStreamOutputManager dispatchedRemoteVideoDidSuspend:streamToken:]
  -[VCStreamOutputManager cleanupStreamOutput:]
  -[VCStreamOutputManager dispatchedCleanupStreamOutput:]
  -[VCStreamOutputManager registerStreamOutputSource:forStreamToken:]
  -[VCStreamOutputManager dispatchedRegisterStreamOutputSource:forStreamToken:]
  -[VCStreamOutputManager deregisterStreamOutputSourceForStreamToken:]
  -[VCStreamOutputManager dispatchedDeregisterStreamOutputSourceForStreamToken:]
  -[VCStreamOutputManager allocStreamOutputWithStreamToken:clientPid:options:errorCode:]
  -[VCStreamOutputManager allocDispatchedStreamOutputWithStreamToken:clientPid:options:errorCode:]
  -[VCStreamOutputManager sourceExistsForStreamToken:]
  -[VCStreamOutputManager serviceHandlerStreamOutputInitializeWithArguments:error:]
  -[VCStreamOutputManager serviceHandlerStreamOutputNotifyCacheWithArguments:error:]
  -[VCStreamOutputManager serviceHandlerStreamOutputTerminateWithArguments:error:]
  -[VCStreamOutputManager serviceHandlerStreamOutputSetTimeSyncOffsetWithArguments:error:]


VCSecurityKeyManager : NSObject
 @property  ^{opaqueRTCReporting=} reportingAgent

  // instance methods
  -[VCSecurityKeyManager logPrefix]
  -[VCSecurityKeyManager delegate]
  -[VCSecurityKeyManager dealloc]
  -[VCSecurityKeyManager stop]
  -[VCSecurityKeyManager initWithDelegate:]
  -[VCSecurityKeyManager start]
  -[VCSecurityKeyManager reportingAgent]
  -[VCSecurityKeyManager setReportingAgent:]
  -[VCSecurityKeyManager getNotUsedTimeout]
  -[VCSecurityKeyManager releaseTimers]
  -[VCSecurityKeyManager startTimers]
  -[VCSecurityKeyManager stopTimers]
  -[VCSecurityKeyManager addSecurityKeyMaterial:]
  -[VCSecurityKeyManager getSendKeyMaterialWithIndex:]
  -[VCSecurityKeyManager getRecvKeyMaterialWithIndex:]
  -[VCSecurityKeyManager getLatestSendKeyMaterial]
  -[VCSecurityKeyManager getLatestRecvKeyMaterial]
  -[VCSecurityKeyManager pruneSendKeyMaterialWithDelay:]
  -[VCSecurityKeyManager pruneRecvKeyMaterialWithDelay:]
  -[VCSecurityKeyManager pruneAllExpiredKeys]
  -[VCSecurityKeyManager firstExpirationTime]
  -[VCSecurityKeyManager schedulePruneTimer:]
  -[VCSecurityKeyManager handlePruneTimerEventAndReschedule]
  -[VCSecurityKeyManager scheduleEncryptionRollTimerWithDelay:]
  -[VCSecurityKeyManager associateMKI:withClientID:]
  -[VCSecurityKeyManager copyMKMWithPrefix:]


VCMediaNegotiationBlobV2BandwidthSettings : PBCodable <NSCopying>
 @property  BOOL hasCap2G
 @property  unsigned int cap2G
 @property  BOOL hasCap3G
 @property  unsigned int cap3G
 @property  BOOL hasCapLTE
 @property  unsigned int capLTE
 @property  BOOL hasCap5G
 @property  unsigned int cap5G
 @property  BOOL hasCapWifi
 @property  unsigned int capWifi

  // class methods
  +[VCMediaNegotiationBlobV2BandwidthSettings filteredSetForOperatingMode:bandwidthConfigurations:]

  // instance methods
  -[VCMediaNegotiationBlobV2BandwidthSettings copyTo:]
  -[VCMediaNegotiationBlobV2BandwidthSettings mergeFrom:]
  -[VCMediaNegotiationBlobV2BandwidthSettings dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2BandwidthSettings copyWithZone:]
  -[VCMediaNegotiationBlobV2BandwidthSettings readFrom:]
  -[VCMediaNegotiationBlobV2BandwidthSettings writeTo:]
  -[VCMediaNegotiationBlobV2BandwidthSettings isEqual:]
  -[VCMediaNegotiationBlobV2BandwidthSettings isEqual:]
  -[VCMediaNegotiationBlobV2BandwidthSettings bandwidthConfigurations]
  -[VCMediaNegotiationBlobV2BandwidthSettings initWithBandwidthConfigurations:]
  -[VCMediaNegotiationBlobV2BandwidthSettings isDefaultSettings]
  -[VCMediaNegotiationBlobV2BandwidthSettings printWithLogFile:prefix:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setupCap2G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setupCap3G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setupCapLTE:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setupCap5G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setupCapWifi:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setupCapForBandwidthConfiguration:]
  -[VCMediaNegotiationBlobV2BandwidthSettings cap2G]
  -[VCMediaNegotiationBlobV2BandwidthSettings setCap2G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setHasCap2G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings hasCap2G]
  -[VCMediaNegotiationBlobV2BandwidthSettings cap3G]
  -[VCMediaNegotiationBlobV2BandwidthSettings setCap3G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setHasCap3G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings hasCap3G]
  -[VCMediaNegotiationBlobV2BandwidthSettings capLTE]
  -[VCMediaNegotiationBlobV2BandwidthSettings setCapLTE:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setHasCapLTE:]
  -[VCMediaNegotiationBlobV2BandwidthSettings hasCapLTE]
  -[VCMediaNegotiationBlobV2BandwidthSettings cap5G]
  -[VCMediaNegotiationBlobV2BandwidthSettings setCap5G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setHasCap5G:]
  -[VCMediaNegotiationBlobV2BandwidthSettings hasCap5G]
  -[VCMediaNegotiationBlobV2BandwidthSettings capWifi]
  -[VCMediaNegotiationBlobV2BandwidthSettings setCapWifi:]
  -[VCMediaNegotiationBlobV2BandwidthSettings setHasCapWifi:]
  -[VCMediaNegotiationBlobV2BandwidthSettings hasCapWifi]


VCMediaNegotiator : VCMediaNegotiatorBase
 @property  long long negotiationMode
 @property  BOOL isCaller
 @property  BOOL usePreNegotiation
 @property  VCMediaNegotiatorResultsCaptions *negotiatedCaptionsSettings
 @property  BOOL isCellular16x9Capable

  // class methods
  +[VCMediaNegotiator newCompressedBlob:]
  +[VCMediaNegotiator newDecompressedBlob:]
  +[VCMediaNegotiator initializeLocalConfiguration:negotiationData:deviceRole:preferredAudioPayload:]
  +[VCMediaNegotiator streamGroupIDsWithMediaBlob:]
  +[VCMediaNegotiator negotiationBlobFromData:]
  +[VCMediaNegotiator localConfigurationWithData:deviceRole:preferredAudioPayload:]
  +[VCMediaNegotiator negotiatedFeaturesStringWithLocalFeaturesString:remoteFeaturesString:]
  +[VCMediaNegotiator validateMultiwayVideoStreamConfigurations:]
  +[VCMediaNegotiator validateMultiwayAudioStreamConfigurations:]
  +[VCMediaNegotiator validateLocalConfiguration:]
  +[VCMediaNegotiator dumpBlob:prefix:force:]
  +[VCMediaNegotiator mappedRemoteQualityIndexForQualityIndex:]

  // instance methods
  -[VCMediaNegotiator dealloc]
  -[VCMediaNegotiator negotiationData]
  -[VCMediaNegotiator processRemoteNegotiationData:]
  -[VCMediaNegotiator remoteMaxBandwidthForOperatingMode:connectionType:]
  -[VCMediaNegotiator negotiateVideoMaxResolutionWithEncodeRules:decodeRules:isEncoder:]
  -[VCMediaNegotiator initWithLocalSettings:]
  -[VCMediaNegotiator isCaller]
  -[VCMediaNegotiator initWithMode:localSettings:]
  -[VCMediaNegotiator isCellular16x9EncodeCapable]
  -[VCMediaNegotiator newResponseBlob]
  -[VCMediaNegotiator processResponseBlob:]
  -[VCMediaNegotiator addBandwidthSettingsForMediaBlob:operatingMode:connectionType:maxBitrate:]
  -[VCMediaNegotiator setupBandwidthSettingsForMediaBlob:]
  -[VCMediaNegotiator saveRemoteBandwidthSettingsWithMediaBlob:]
  -[VCMediaNegotiator negotiateAudioAllowRecording:]
  -[VCMediaNegotiator negotiateAudioUseSBR:]
  -[VCMediaNegotiator negotiateAudioPrimaryPayload:]
  -[VCMediaNegotiator negotiateAudioDTXPayload:]
  -[VCMediaNegotiator negotiateAudioREDPayload:]
  -[VCMediaNegotiator negotiateAudioSecondaryPayloads:]
  -[VCMediaNegotiator negotiateAudioSettings:]
  -[VCMediaNegotiator setupAudioWithNegotiatedSettings:]
  -[VCMediaNegotiator selectVideoFeatureString:selectedPayload:]
  -[VCMediaNegotiator selectBestVideoRuleForTransport:payload:encodingType:localVideoRuleCollection:remoteVideoSettings:negotiatedVideoSettings:isScreen:]
  -[VCMediaNegotiator negotiateRTCPFB:]
  -[VCMediaNegotiator negotiateTilesPerFrame:negotiatedSettings:]
  -[VCMediaNegotiator processPixelFormats:videoResults:]
  -[VCMediaNegotiator negotiateHDRMode:videoResults:]
  -[VCMediaNegotiator processParameterSets:videoResults:]
  -[VCMediaNegotiator negotiateVideoSettings:]
  -[VCMediaNegotiator setupVideoWithNegotiatedSettings:]
  -[VCMediaNegotiator getPreferredScreenPayloadList]
  -[VCMediaNegotiator negotiateScreenSettings:]
  -[VCMediaNegotiator setupScreenWithNegotiatedSettings:]
  -[VCMediaNegotiator selectBestScreenRule:preferredPayloadOrder:]
  -[VCMediaNegotiator setupFaceTimeSettingsForMediaBlob:isResponse:]
  -[VCMediaNegotiator negotiateFaceTimeSettings:]
  -[VCMediaNegotiator setupMomentsForMediaBlob:]
  -[VCMediaNegotiator negotiateMomentsWithMomentsSettings:]
  -[VCMediaNegotiator setupMultiwayAudioStreamsForMediaBlob:]
  -[VCMediaNegotiator negotiateMultiwayAudioStreams:]
  -[VCMediaNegotiator setupMultiwayVideoStreamsForMediaBlob:]
  -[VCMediaNegotiator isVideoStreamSupported:]
  -[VCMediaNegotiator negotiateMultiwayVideoStreams:]
  -[VCMediaNegotiator newStreamGroupCodecConfigForPayload:]
  -[VCMediaNegotiator newStreamConfigFromMultiwayAudioStream:]
  -[VCMediaNegotiator newStreamConfigFromMultiwayVideoStream:]
  -[VCMediaNegotiator mediaBlobLanguageWithLocale:]
  -[VCMediaNegotiator localeWithMediaBlobLanguage:]
  -[VCMediaNegotiator setupCaptionsForMediaBlob:]
  -[VCMediaNegotiator negotiateCaptionsWithCaptionsSettings:]
  -[VCMediaNegotiator usePreNegotiation]
  -[VCMediaNegotiator negotiatedCaptionsSettings]
  -[VCMediaNegotiator negotiationMode]
  -[VCMediaNegotiator isCellular16x9Capable]


VCVideoCaptureConverter : NSObject <VCVideoSink, VCVideoCaptureClient>
 @property  unsigned int sourceFramerate
 @property  unsigned int destinationFramerate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoCaptureConverter delegate]
  -[VCVideoCaptureConverter dealloc]
  -[VCVideoCaptureConverter initWithDelegate:]
  -[VCVideoCaptureConverter processFrame:]
  -[VCVideoCaptureConverter onVideoFrame:frameTime:attribute:]
  -[VCVideoCaptureConverter thermalLevelDidChange:]
  -[VCVideoCaptureConverter clientCaptureRule]
  -[VCVideoCaptureConverter avConferencePreviewError:]
  -[VCVideoCaptureConverter cameraAvailabilityDidChange:]
  -[VCVideoCaptureConverter sourceFrameRateDidChange:]
  -[VCVideoCaptureConverter setSourceFramerate:]
  -[VCVideoCaptureConverter setDestinationFramerate:]
  -[VCVideoCaptureConverter updateThrottleRate]
  -[VCVideoCaptureConverter sourceFramerate]
  -[VCVideoCaptureConverter destinationFramerate]


VCStringUtils : NSObject
  // class methods
  +[VCStringUtils convertString:toFourcc:]


VCConnectionHealthMonitor : NSObject
 @property  <VCConnectionHealthMonitorDelegate> *delegate
 @property  double primaryConnHealthAllowedDelay
 @property  BOOL usingServerBasedLinks

  // instance methods
  -[VCConnectionHealthMonitor setDelegate:]
  -[VCConnectionHealthMonitor delegate]
  -[VCConnectionHealthMonitor dealloc]
  -[VCConnectionHealthMonitor init]
  -[VCConnectionHealthMonitor primaryConnHealthAllowedDelay]
  -[VCConnectionHealthMonitor updateReceiveStats]
  -[VCConnectionHealthMonitor generateStatsBlob]
  -[VCConnectionHealthMonitor processPeerStatsBlob:]
  -[VCConnectionHealthMonitor resetConnectionStats:]
  -[VCConnectionHealthMonitor updateStatsHistory]
  -[VCConnectionHealthMonitor resetHistory:]
  -[VCConnectionHealthMonitor reportConnectionHealthWithStatsHistory:index:isPeerStats:]
  -[VCConnectionHealthMonitor updateRatiosForHistory:withIndex:]
  -[VCConnectionHealthMonitor isHistoryValid:]
  -[VCConnectionHealthMonitor isHistoryImproved:currentIndex:]
  -[VCConnectionHealthMonitor isPrimaryConnectionImprovedFromHistory:withIndex:remoteStatsHistory:]
  -[VCConnectionHealthMonitor setPrimaryConnHealthAllowedDelay:]
  -[VCConnectionHealthMonitor usingServerBasedLinks]
  -[VCConnectionHealthMonitor setUsingServerBasedLinks:]


VCSessionMediaStreamConfigurationProvider : NSObject
 @property  NSArray *audioStreamConfigurations
 @property  NSArray *videoStreamConfigurations
 @property  long long highestEncodingResolution
 @property  BOOL isEncodingSqaures

  // class methods
  +[VCSessionMediaStreamConfigurationProvider fixAudioStreamConfigurations]
  +[VCSessionMediaStreamConfigurationProvider audioConfig:supportsDeviceClass:]
  +[VCSessionMediaStreamConfigurationProvider computeMaxNetworkBitrate:maxMediaBitrate:maxPacketsPerSecond:audioStreamIndex:internalPacketsPerSecond:]
  +[VCSessionMediaStreamConfigurationProvider computeMaxNetworkBitrate:maxMediaBitrate:maxPacketsPerSecond:maxIDSStreamIDCount:internalPacketsPerSecond:audioConfig:]
  +[VCSessionMediaStreamConfigurationProvider isAudioStreamOnDemand:isLowestQualityAudio:]
  +[VCSessionMediaStreamConfigurationProvider isVideoStreamOnDemand:]

  // instance methods
  -[VCSessionMediaStreamConfigurationProvider dealloc]
  -[VCSessionMediaStreamConfigurationProvider initWithStreamIDGenerator:sessionMode:supportedAudioRules:]
  -[VCSessionMediaStreamConfigurationProvider initializeStreamsWithSupportedAudioRules:]
  -[VCSessionMediaStreamConfigurationProvider initializeVideoStreams]
  -[VCSessionMediaStreamConfigurationProvider streamPayloadFromProviderConfig:]
  -[VCSessionMediaStreamConfigurationProvider initializeVideoStreamWithConfig:streamIndex:]
  -[VCSessionMediaStreamConfigurationProvider initializeVideoStreamWithDefaults]
  -[VCSessionMediaStreamConfigurationProvider audioStreamConfigs:configCount:]
  -[VCSessionMediaStreamConfigurationProvider initializeAudioStreamsWithSupportedRules:]
  -[VCSessionMediaStreamConfigurationProvider initializeAudioStreamWithConfig:maxIDSStreamIDCount:supportedAudioRules:isLowestQualityAudio:]
  -[VCSessionMediaStreamConfigurationProvider audioRuleCollectionWithAudioConfig:supportedAudioRules:]
  -[VCSessionMediaStreamConfigurationProvider videoStreamConfigurations]
  -[VCSessionMediaStreamConfigurationProvider audioStreamConfigurations]
  -[VCSessionMediaStreamConfigurationProvider highestEncodingResolution]
  -[VCSessionMediaStreamConfigurationProvider isEncodingSqaures]


VCPixelBufferOverlay : VCObject
 @property  {VCInfoDetails=Bff{CGSize=dd}^{__CFDictionary}q@{VCOverlayAudioInfo=iiii}{VCOverlayVideoInfo=iiiiii}} currentDetails

  // instance methods
  -[VCPixelBufferOverlay dealloc]
  -[VCPixelBufferOverlay init]
  -[VCPixelBufferOverlay updateOverlayWithPixelBuffer:]
  -[VCPixelBufferOverlay drawOverlayMessage:onPixelBuffer:attributes:]
  -[VCPixelBufferOverlay reverseString:]
  -[VCPixelBufferOverlay currentDetails]
  -[VCPixelBufferOverlay setCurrentDetails:]


VCVideoRuleCollectionsRemoteCameraMac : VCVideoRuleCollectionsRemoteCamera
  // class methods
  +[VCVideoRuleCollectionsRemoteCameraMac sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsRemoteCameraMac initWithHardwareSettings:]
  -[VCVideoRuleCollectionsRemoteCameraMac initSupportedPayloads]


VCVirtualTextDevice : NSObject <VCMediaStreamProtocol, VCTextSender, VCTextReceiverDelegate>
 @property  NSObject<VCMediaStreamDelegate> *mediaStreamDelegate
 @property  NSObject<OS_dispatch_queue> *mediaStreamDelegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVirtualTextDevice setPause:]
  -[VCVirtualTextDevice pause]
  -[VCVirtualTextDevice dealloc]
  -[VCVirtualTextDevice resume]
  -[VCVirtualTextDevice stop]
  -[VCVirtualTextDevice start]
  -[VCVirtualTextDevice sendDelegate]
  -[VCVirtualTextDevice sendCharacter:]
  -[VCVirtualTextDevice sendText:]
  -[VCVirtualTextDevice didReceiveText:]
  -[VCVirtualTextDevice setStreamConfig:withError:]
  -[VCVirtualTextDevice initWithSendDelegate:clientPid:delegate:delegateQueue:]
  -[VCVirtualTextDevice mediaStreamDelegate]
  -[VCVirtualTextDevice mediaStreamDelegateQueue]
  -[VCVirtualTextDevice setMediaStreamDelegate:]
  -[VCVirtualTextDevice setMediaStreamDelegateQueue:]


VCMediaStreamTransport : NSObject
 @property  VCMediaStreamConfig *streamConfig
 @property  ^{tagHANDLE=i} rtpHandle
 @property  unsigned short idsStreamId
 @property  double lastReceivedRTCPPacketTime
 @property  BOOL rtcpSendEnabled
 @property  BOOL encryptionInfoReceived
 @property  long long streamDirection
 @property  double rtpTimeoutInterval
 @property  BOOL rtpTimeoutEnabled
 @property  double decryptionMKMRecoveryInterval
 @property  double decryptionTimeoutInterval
 @property  BOOL decryptionTimeoutEnabled
 @property  double rtcpTimeoutInterval
 @property  double rtcpSendInterval
 @property  BOOL rtcpTimeoutEnabled
 @property  BOOL rtcpEnabled
 @property  BOOL rtcpXREnabled
 @property  AVCBasebandCongestionDetector *basebandCongestionDetector
 @property  ^{tagVCCryptor=} receiverSframeCryptor
 @property  ^{tagVCCryptor=} transmitterSframeCryptor

  // class methods
  +[VCMediaStreamTransport isSameSRTPKey:newKey:]
  +[VCMediaStreamTransport getSRTPMediaKeyLength:]
  +[VCMediaStreamTransport SRTPCipherSuiteForVCMediaStreamCipherSuite:]

  // instance methods
  -[VCMediaStreamTransport dealloc]
  -[VCMediaStreamTransport reset]
  -[VCMediaStreamTransport setRtcpEnabled:]
  -[VCMediaStreamTransport setRtcpSendInterval:]
  -[VCMediaStreamTransport onStart]
  -[VCMediaStreamTransport rtcpSendInterval]
  -[VCMediaStreamTransport isRTCPEnabled]
  -[VCMediaStreamTransport basebandCongestionDetector]
  -[VCMediaStreamTransport setBasebandCongestionDetector:]
  -[VCMediaStreamTransport lastReceivedRTCPPacketTime]
  -[VCMediaStreamTransport setStreamDirection:]
  -[VCMediaStreamTransport onStop]
  -[VCMediaStreamTransport rtpHandle]
  -[VCMediaStreamTransport getRTCPReportNTPTimeMiddle32ForReportId:]
  -[VCMediaStreamTransport getExtendedSequenceNumberForSequenceNumber:]
  -[VCMediaStreamTransport handleEncryptionInfoChange:]
  -[VCMediaStreamTransport encryptionInfoReceived]
  -[VCMediaStreamTransport streamDirection]
  -[VCMediaStreamTransport setupRTPWithNWConnection:error:]
  -[VCMediaStreamTransport setupRTPWithIPInfo:error:]
  -[VCMediaStreamTransport sendControlPacketWithParameters:]
  -[VCMediaStreamTransport isRTPTimeoutEnabled]
  -[VCMediaStreamTransport isRTCPTimeoutEnabled]
  -[VCMediaStreamTransport isDecryptionTimeoutEnabled]
  -[VCMediaStreamTransport isRTCPSendEnabled]
  -[VCMediaStreamTransport initWithHandle:localSSRC:]
  -[VCMediaStreamTransport isSameSRTPConfig:]
  -[VCMediaStreamTransport updateLastGeneratedKeyMaterial]
  -[VCMediaStreamTransport configureWithStreamConfig:setupInfo:reducedSizeRTCPPackets:hopByHopEncryptRTCPPackets:statisticsCollector:basebandCongestionDetector:error:]
  -[VCMediaStreamTransport isSendingMedia:]
  -[VCMediaStreamTransport createSframeCryptorWithStreamConfig:ssrc:error:]
  -[VCMediaStreamTransport setupSframeCryptorsWithError:]
  -[VCMediaStreamTransport resetPayloadMapping]
  -[VCMediaStreamTransport getCryptoSet:withMediaKey:]
  -[VCMediaStreamTransport setupSRTP]
  -[VCMediaStreamTransport setupRTPWithSockets:error:]
  -[VCMediaStreamTransport setupRTPWithTransportStreams]
  -[VCMediaStreamTransport setupRTPForIDS:]
  -[VCMediaStreamTransport setupRTPWithTransportSetupInfo:error:]
  -[VCMediaStreamTransport registerRTPPayloadMappings]
  -[VCMediaStreamTransport rxNetworkPayloads]
  -[VCMediaStreamTransport isRTCPXREnabled]
  -[VCMediaStreamTransport setRtpTimeoutEnabled:]
  -[VCMediaStreamTransport setRtpTimeoutInterval:]
  -[VCMediaStreamTransport rtpTimeoutInterval]
  -[VCMediaStreamTransport setRtcpTimeoutEnabled:]
  -[VCMediaStreamTransport setRtcpTimeoutInterval:]
  -[VCMediaStreamTransport rtcpTimeoutInterval]
  -[VCMediaStreamTransport setDecryptionTimeoutEnabled:]
  -[VCMediaStreamTransport setDecryptionTimeoutInterval:]
  -[VCMediaStreamTransport decryptionTimeoutInterval]
  -[VCMediaStreamTransport decryptionMKMRecoveryInterval]
  -[VCMediaStreamTransport setDecryptionMKMRecoveryInterval:]
  -[VCMediaStreamTransport sendIntervalDidElapse:remainingTime:]
  -[VCMediaStreamTransport setThrottlingInterval:]
  -[VCMediaStreamTransport idsStreamId]
  -[VCMediaStreamTransport generateReceptionReport:reportCount:]
  -[VCMediaStreamTransport generateRTCPXRSummaryReport:reportCount:]
  -[VCMediaStreamTransport generateRTCPXRVoIPMetricsReport:reportCount:]
  -[VCMediaStreamTransport streamConfig]
  -[VCMediaStreamTransport receiverSframeCryptor]
  -[VCMediaStreamTransport transmitterSframeCryptor]


VCXPCConnection : NSObject
 @property  NSObject<OS_xpc_object> *connection
 @property  int pid
 @property  id context
 @property  NSData *tokenData
 @property  NSString *lastCalledApiName
 @property  BOOL persistent

  // class methods
  +[VCXPCConnection selfTerminateDueToTimeout:]

  // instance methods
  -[VCXPCConnection isPersistent]
  -[VCXPCConnection setTokenData:]
  -[VCXPCConnection dealloc]
  -[VCXPCConnection tokenData]
  -[VCXPCConnection connection]
  -[VCXPCConnection pid]
  -[VCXPCConnection setContext:]
  -[VCXPCConnection setPid:]
  -[VCXPCConnection context]
  -[VCXPCConnection setPersistent:]
  -[VCXPCConnection init]
  -[VCXPCConnection setConnection:]
  -[VCXPCConnection stopTimeoutTimer]
  -[VCXPCConnection startTimeoutTimer]
  -[VCXPCConnection createTimeoutTimer]
  -[VCXPCConnection destroyTimeoutTimer]
  -[VCXPCConnection lastCalledApiName]
  -[VCXPCConnection setLastCalledApiName:]


VCXPCServerUser : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  @? block
 @property  int eventLogLevel

  // instance methods
  -[VCXPCServerUser eventLogLevel]
  -[VCXPCServerUser dealloc]
  -[VCXPCServerUser setBlock:]
  -[VCXPCServerUser setEventLogLevel:]
  -[VCXPCServerUser setQueue:]
  -[VCXPCServerUser block]
  -[VCXPCServerUser queue]
  -[VCXPCServerUser init]


AVConferenceXPCServer : NSObject
 @property  NSObject<OS_xpc_object> *listener
 @property  NSMutableDictionary *registeredBlocks

  // class methods
  +[AVConferenceXPCServer AVConferenceXPCServerSingleton]

  // instance methods
  -[AVConferenceXPCServer allocWithZone:]
  -[AVConferenceXPCServer retain]
  -[AVConferenceXPCServer newNSErrorFromNSDictionary:]
  -[AVConferenceXPCServer _xpc_get_connection_from_list_for_context:]
  -[AVConferenceXPCServer registeredBlocks]
  -[AVConferenceXPCServer sendMessageAsync:arguments:]
  -[AVConferenceXPCServer sendMessageAsync:arguments:context:]
  -[AVConferenceXPCServer registerBlockForService:block:]
  -[AVConferenceXPCServer dealloc]
  -[AVConferenceXPCServer _xpc_remove_connections_from_list]
  -[AVConferenceXPCServer _xpc_get_connections_from_list_for_context:]
  -[AVConferenceXPCServer release]
  -[AVConferenceXPCServer _xpc_handle_incoming_request:]
  -[AVConferenceXPCServer newNSDictionaryFromNSError:]
  -[AVConferenceXPCServer deregisterFromService:]
  -[AVConferenceXPCServer newClientDiedDictionary]
  -[AVConferenceXPCServer registerBlockForService:block:queue:]
  -[AVConferenceXPCServer appendContextToDictionary:forConnection:]
  -[AVConferenceXPCServer _xpc_get_connection_from_list_for_connection:]
  -[AVConferenceXPCServer sendMessageAsync:arguments:xpcArguments:context:]
  -[AVConferenceXPCServer registerBlockForService:block:queue:eventLogLevel:]
  -[AVConferenceXPCServer sendMessageAsync:arguments:toAllClientsWithContext:]
  -[AVConferenceXPCServer copyWithZone:]
  -[AVConferenceXPCServer newNSDictionaryFromXPCDictionary:]
  -[AVConferenceXPCServer appendPIDToDictionary:pid:]
  -[AVConferenceXPCServer newNSDictionaryWidthNSDictionary:]
  -[AVConferenceXPCServer retainCount]
  -[AVConferenceXPCServer _xpc_add_connection_to_list:]
  -[AVConferenceXPCServer newXPCDictionaryFromNSDictionary:forEvent:]
  -[AVConferenceXPCServer autorelease]
  -[AVConferenceXPCServer _xpc_remove_connection_from_list:]
  -[AVConferenceXPCServer listener]
  -[AVConferenceXPCServer authorizedTokenData]
  -[AVConferenceXPCServer init]
  -[AVConferenceXPCServer _xpc_start_listening_for_connections]


VCMediaNegotiatorResultsCaptions : NSObject
 @property  BOOL remoteCanDisplayCaptions
 @property  NSSet *localLanguages
 @property  NSSet *remoteLanguages

  // instance methods
  -[VCMediaNegotiatorResultsCaptions dealloc]
  -[VCMediaNegotiatorResultsCaptions localLanguages]
  -[VCMediaNegotiatorResultsCaptions setLocalLanguages:]
  -[VCMediaNegotiatorResultsCaptions remoteLanguages]
  -[VCMediaNegotiatorResultsCaptions setRemoteLanguages:]
  -[VCMediaNegotiatorResultsCaptions remoteCanDisplayCaptions]
  -[VCMediaNegotiatorResultsCaptions setRemoteCanDisplayCaptions:]


VCVideoRuleCollectionsCamera : VCVideoRuleCollections
  // class methods
  +[VCVideoRuleCollectionsCamera sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsCamera preferredAspectRatio]
  -[VCVideoRuleCollectionsCamera useSoftFramerateSwitching]
  -[VCVideoRuleCollectionsCamera resetEncodingRulesForCameraIsHD:isWVGA:is1080:]
  -[VCVideoRuleCollectionsCamera setupH264CellularRules]
  -[VCVideoRuleCollectionsCamera bestVideoRuleForEncodingType:aspectRatio:payload:]
  -[VCVideoRuleCollectionsCamera bestVideoRuleForEncodingType:aspectRatio:]
  -[VCVideoRuleCollectionsCamera isHiDefCapable]
  -[VCVideoRuleCollectionsCamera getBestFrameWidth:frameHeight:frameRate:]
  -[VCVideoRuleCollectionsCamera bitrateConfiguration]


VCMediaStreamMultiwayConfigVideo : VCMediaStreamMultiwayConfig
 @property  long long resolution
 @property  unsigned int framerate
 @property  NSSet *payloads
 @property  unsigned long keyFrameInterval
 @property  NSArray *subStreamConfigs
 @property  BOOL isTemporalStream
 @property  BOOL isSubStream
 @property  unsigned short parentStreamID

  // instance methods
  -[VCMediaStreamMultiwayConfigVideo framerate]
  -[VCMediaStreamMultiwayConfigVideo setResolution:]
  -[VCMediaStreamMultiwayConfigVideo dealloc]
  -[VCMediaStreamMultiwayConfigVideo payloads]
  -[VCMediaStreamMultiwayConfigVideo resolution]
  -[VCMediaStreamMultiwayConfigVideo setFramerate:]
  -[VCMediaStreamMultiwayConfigVideo addPayload:]
  -[VCMediaStreamMultiwayConfigVideo init]
  -[VCMediaStreamMultiwayConfigVideo streamIds]
  -[VCMediaStreamMultiwayConfigVideo keyFrameInterval]
  -[VCMediaStreamMultiwayConfigVideo setKeyFrameInterval:]
  -[VCMediaStreamMultiwayConfigVideo parentStreamID]
  -[VCMediaStreamMultiwayConfigVideo setParentStreamID:]
  -[VCMediaStreamMultiwayConfigVideo isTemporalStream]
  -[VCMediaStreamMultiwayConfigVideo setIsTemporalStream:]
  -[VCMediaStreamMultiwayConfigVideo isSubStream]
  -[VCMediaStreamMultiwayConfigVideo setIsSubStream:]
  -[VCMediaStreamMultiwayConfigVideo addSubStreamConfig:]
  -[VCMediaStreamMultiwayConfigVideo subStreamConfigs]


VCVideoStreamConfig : VCMediaStreamConfig
 @property  long long videoResolution
 @property  unsigned long framerate
 @property  unsigned long txMaxBitrate
 @property  unsigned long txMinBitrate
 @property  unsigned long txInitialBitrate
 @property  unsigned long rxMaxBitrate
 @property  unsigned long rxMinBitrate
 @property  NSDictionary *rxCodecFeatureListStrings
 @property  NSDictionary *txCodecFeatureListStrings
 @property  unsigned long keyFrameInterval
 @property  int remoteVideoInitialOrientation
 @property  BOOL enableCVO
 @property  unsigned long cvoExtensionID
 @property  BOOL isVideoProtected
 @property  long long type
 @property  unsigned long sourceFramerate
 @property  int encodingMode
 @property  int encoderUsage
 @property  ^AC videoPriorityPointer
 @property  unsigned int screenDisplayID
 @property  unsigned long customWidth
 @property  unsigned long customHeight
 @property  unsigned long tilesPerFrame
 @property  unsigned int pixelFormat
 @property  BOOL ltrpEnabled
 @property  int hdrMode
 @property  NSString *remoteDeviceName
 @property  NSString *profileLevel
 @property  unsigned int parameterSets
 @property  BOOL temporalScalingEnabled
 @property  BOOL isVariableSliceModeEnabled
 @property  BOOL rtcpPSFB_FIREnabled
 @property  <VCMediaStreamSyncSource> *syncSource
 @property  BOOL useVideoJitterForVideoPlayout
 @property  BOOL useInBandFEC
 @property  unsigned int audioIOSampleRate
 @property  BOOL resetSendRTPTimestampOnStop
 @property  unsigned long maxEncoderPixels
 @property  BOOL forceZeroRegionOfInterestOrigin

  // class methods
  +[VCVideoStreamConfig validateClientDictionary:]
  +[VCVideoStreamConfig profileLevelIdForString:]
  +[VCVideoStreamConfig profileLevelStringForId:]

  // instance methods
  -[VCVideoStreamConfig hdrMode]
  -[VCVideoStreamConfig framerate]
  -[VCVideoStreamConfig pixelFormat]
  -[VCVideoStreamConfig type]
  -[VCVideoStreamConfig dealloc]
  -[VCVideoStreamConfig setType:]
  -[VCVideoStreamConfig setFramerate:]
  -[VCVideoStreamConfig setPixelFormat:]
  -[VCVideoStreamConfig setHdrMode:]
  -[VCVideoStreamConfig init]
  -[VCVideoStreamConfig remoteDeviceName]
  -[VCVideoStreamConfig setRemoteDeviceName:]
  -[VCVideoStreamConfig videoResolution]
  -[VCVideoStreamConfig setCustomWidth:]
  -[VCVideoStreamConfig setTxMaxBitrate:]
  -[VCVideoStreamConfig setCustomHeight:]
  -[VCVideoStreamConfig tilesPerFrame]
  -[VCVideoStreamConfig setTilesPerFrame:]
  -[VCVideoStreamConfig setVideoResolution:]
  -[VCVideoStreamConfig setTxMinBitrate:]
  -[VCVideoStreamConfig rxMinBitrate]
  -[VCVideoStreamConfig rxMaxBitrate]
  -[VCVideoStreamConfig setRxMinBitrate:]
  -[VCVideoStreamConfig setRxMaxBitrate:]
  -[VCVideoStreamConfig syncSource]
  -[VCVideoStreamConfig keyFrameInterval]
  -[VCVideoStreamConfig setKeyFrameInterval:]
  -[VCVideoStreamConfig initWithClientDictionary:]
  -[VCVideoStreamConfig updateWithClientDictionary:]
  -[VCVideoStreamConfig setEncodingMode:]
  -[VCVideoStreamConfig ltrpEnabled]
  -[VCVideoStreamConfig setLtrpEnabled:]
  -[VCVideoStreamConfig setSyncSource:]
  -[VCVideoStreamConfig txMaxBitrate]
  -[VCVideoStreamConfig txMinBitrate]
  -[VCVideoStreamConfig cvoExtensionID]
  -[VCVideoStreamConfig setCvoExtensionID:]
  -[VCVideoStreamConfig enableCVO]
  -[VCVideoStreamConfig setEnableCVO:]
  -[VCVideoStreamConfig encodingMode]
  -[VCVideoStreamConfig videoPriorityPointer]
  -[VCVideoStreamConfig setVideoPriorityPointer:]
  -[VCVideoStreamConfig customWidth]
  -[VCVideoStreamConfig customHeight]
  -[VCVideoStreamConfig profileLevel]
  -[VCVideoStreamConfig setProfileLevel:]
  -[VCVideoStreamConfig parameterSets]
  -[VCVideoStreamConfig setParameterSets:]
  -[VCVideoStreamConfig temporalScalingEnabled]
  -[VCVideoStreamConfig setTemporalScalingEnabled:]
  -[VCVideoStreamConfig encoderUsage]
  -[VCVideoStreamConfig setEncoderUsage:]
  -[VCVideoStreamConfig maxEncoderPixels]
  -[VCVideoStreamConfig setMaxEncoderPixels:]
  -[VCVideoStreamConfig setSourceFramerate:]
  -[VCVideoStreamConfig sourceFramerate]
  -[VCVideoStreamConfig applyVideoStreamClientDictionary:]
  -[VCVideoStreamConfig addRxCodecFeatureListString:codecType:]
  -[VCVideoStreamConfig addTxCodecFeatureListString:codecType:]
  -[VCVideoStreamConfig initializeParameterSets]
  -[VCVideoStreamConfig txInitialBitrate]
  -[VCVideoStreamConfig setTxInitialBitrate:]
  -[VCVideoStreamConfig rxCodecFeatureListStrings]
  -[VCVideoStreamConfig txCodecFeatureListStrings]
  -[VCVideoStreamConfig remoteVideoInitialOrientation]
  -[VCVideoStreamConfig setRemoteVideoInitialOrientation:]
  -[VCVideoStreamConfig isVideoProtected]
  -[VCVideoStreamConfig setIsVideoProtected:]
  -[VCVideoStreamConfig screenDisplayID]
  -[VCVideoStreamConfig setScreenDisplayID:]
  -[VCVideoStreamConfig isVariableSliceModeEnabled]
  -[VCVideoStreamConfig setIsVariableSliceModeEnabled:]
  -[VCVideoStreamConfig rtcpPSFB_FIREnabled]
  -[VCVideoStreamConfig setRtcpPSFB_FIREnabled:]
  -[VCVideoStreamConfig resetSendRTPTimestampOnStop]
  -[VCVideoStreamConfig setResetSendRTPTimestampOnStop:]
  -[VCVideoStreamConfig useInBandFEC]
  -[VCVideoStreamConfig setUseInBandFEC:]
  -[VCVideoStreamConfig audioIOSampleRate]
  -[VCVideoStreamConfig setAudioIOSampleRate:]
  -[VCVideoStreamConfig useVideoJitterForVideoPlayout]
  -[VCVideoStreamConfig setUseVideoJitterForVideoPlayout:]
  -[VCVideoStreamConfig forceZeroRegionOfInterestOrigin]
  -[VCVideoStreamConfig setForceZeroRegionOfInterestOrigin:]


VCMediaNegotiatorStreamGroupCodecConfiguration : NSObject <NSCopying>
 @property  long long codecType
 @property  unsigned int rtpPayload
 @property  unsigned long pTime
 @property  BOOL rtcpRTPFB_GNACKEnabled
 @property  BOOL rtcpPSFB_PLIEnabled
 @property  BOOL rtcpPSFB_FIREnabled
 @property  BOOL rtcpSREnabled
 @property  BOOL H264LevelAsymmetryAllowed
 @property  BOOL H264PacketizationMode
 @property  BOOL useInBandFEC
 @property  unsigned long profileLevelId
 @property  unsigned long serializedSize
 @property  unsigned int cipherSuite
 @property  unsigned int encoderUsage

  // instance methods
  -[VCMediaNegotiatorStreamGroupCodecConfiguration copyWithZone:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration isEqual:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration serializedSize]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration codecType]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setCodecType:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration pTime]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setPTime:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setSerializedSize:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration encoderUsage]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setEncoderUsage:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration rtcpPSFB_FIREnabled]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setRtcpPSFB_FIREnabled:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration useInBandFEC]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setUseInBandFEC:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration rtpPayload]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setRtpPayload:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration rtcpRTPFB_GNACKEnabled]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setRtcpRTPFB_GNACKEnabled:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration rtcpPSFB_PLIEnabled]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setRtcpPSFB_PLIEnabled:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration rtcpSREnabled]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setRtcpSREnabled:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration H264LevelAsymmetryAllowed]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setH264LevelAsymmetryAllowed:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration H264PacketizationMode]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setH264PacketizationMode:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration profileLevelId]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setProfileLevelId:]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration cipherSuite]
  -[VCMediaNegotiatorStreamGroupCodecConfiguration setCipherSuite:]


VCXPCClientShared : AVConferenceXPCClient
 @property  NSMutableDictionary *registeredUUIDServiceBlocks
 @property  NSObject<OS_dispatch_queue> *registeredBlocksQueue

  // instance methods
  -[VCXPCClientShared dealloc]
  -[VCXPCClientShared init]
  -[VCXPCClientShared deregisterFromNotifications]
  -[VCXPCClientShared registerBlockWithUUID:service:block:]
  -[VCXPCClientShared deregisterWithUUID:service:]
  -[VCXPCClientShared registeredUUIDServiceBlocks]
  -[VCXPCClientShared registeredBlocksQueue]


VCEffects : NSObject
 @property  int effectsMode
 @property  BOOL effectsApplied
 @property  BOOL faceMeshTrackingEnabled

  // instance methods
  -[VCEffects dealloc]
  -[VCEffects init]
  -[VCEffects faceMeshTrackingEnabled]
  -[VCEffects setFaceMeshTrackingEnabled:]
  -[VCEffects effectsApplied]
  -[VCEffects setEffectsApplied:]
  -[VCEffects addFrame:time:]
  -[VCEffects releaseFrameWithTime:]
  -[VCEffects setEffectsMode:]
  -[VCEffects effectsMode]


AVCTestMonitorReport : NSObject
 @property  unsigned long initialMemoryUsageMB
 @property  unsigned long memoryUsageMB
 @property  unsigned long networkAgentRefCount

  // instance methods
  -[AVCTestMonitorReport initialMemoryUsageMB]
  -[AVCTestMonitorReport setInitialMemoryUsageMB:]
  -[AVCTestMonitorReport memoryUsageMB]
  -[AVCTestMonitorReport setMemoryUsageMB:]
  -[AVCTestMonitorReport networkAgentRefCount]
  -[AVCTestMonitorReport setNetworkAgentRefCount:]


AVCTestMonitorInjectAudioConfig : NSObject
 @property  int injectAudioConfigType
 @property  double amplitude
 @property  NSString *audioFileName
 @property  double startHostTime
 @property  double loopLength

  // instance methods
  -[AVCTestMonitorInjectAudioConfig amplitude]
  -[AVCTestMonitorInjectAudioConfig setAmplitude:]
  -[AVCTestMonitorInjectAudioConfig startHostTime]
  -[AVCTestMonitorInjectAudioConfig setStartHostTime:]
  -[AVCTestMonitorInjectAudioConfig injectAudioConfigType]
  -[AVCTestMonitorInjectAudioConfig setInjectAudioConfigType:]
  -[AVCTestMonitorInjectAudioConfig audioFileName]
  -[AVCTestMonitorInjectAudioConfig setAudioFileName:]
  -[AVCTestMonitorInjectAudioConfig loopLength]
  -[AVCTestMonitorInjectAudioConfig setLoopLength:]


AVCTestMonitor : NSObject
  // instance methods
  -[AVCTestMonitor initWithDelegate:queue:]
  -[AVCTestMonitor delegate]
  -[AVCTestMonitor dealloc]
  -[AVCTestMonitor registerBlocksForNotifications]
  -[AVCTestMonitor deregisterBlocksForNotifications]
  -[AVCTestMonitor delegateNotificationQueue]
  -[AVCTestMonitor setupNotificationQueue:]
  -[AVCTestMonitor requestSessionMediaDaemonStatsReport]
  -[AVCTestMonitor updateAudioInjectConfig:]
  -[AVCTestMonitor forceNetworkCellular:]
  -[AVCTestMonitor setEnableLoopbackInterface:]
  -[AVCTestMonitor setEnableOneToOneMode:]
  -[AVCTestMonitor setEmulatedRxPLR:]
  -[AVCTestMonitor setForcedTargetBitrate:]
  -[AVCTestMonitor setForcedCapBitrate:]
  -[AVCTestMonitor setEmulatedNetworkConfigurationPath:]
  -[AVCTestMonitor setEnableAudioPowerSpectrumReport:]


BitrateLimits : NSObject
 @property  NSArray *limits

  // class methods
  +[BitrateLimits insertionIndex:forValue:]

  // instance methods
  -[BitrateLimits limits]
  -[BitrateLimits dealloc]
  -[BitrateLimits initWithOperatingMode:withBitrateCap:useCaseWatchContinuity:]
  -[BitrateLimits capDefaultValues:]
  -[BitrateLimits defaultValueForNetwork:]


VCAudioTierPicker : NSObject
 @property  {?=i^{__CFArray}^{__CFArray}^{__CFArray}IBBIBBB} config
 @property  VCAudioTier *defaultTier

  // class methods
  +[VCAudioTierPicker tierPickerModeToAVConferenceOperatingMode:]
  +[VCAudioTierPicker operatingModeToTierPickerMode:]
  +[VCAudioTierPicker arrayHasObject:withPayloadType:]
  +[VCAudioTierPicker allPossibleCombinations:supportedPacketsPerBundle:redNumPayloads:headerSize:tierPickerMode:usingCellular:useCaseWatchContinuity:]
  +[VCAudioTierPicker selectHighestQualityAudioTiers:forBitrateLimits:isHardLimit:]
  +[VCAudioTierPicker shouldFilterTierForPayloadConfig:bitRate:packetsPerBundle:mode:redNumPayloads:cellular:]
  +[VCAudioTierPicker valueForNetworkBitrate:networkBitrate:]

  // instance methods
  -[VCAudioTierPicker initWithConfig:]
  -[VCAudioTierPicker setConfig:]
  -[VCAudioTierPicker config]
  -[VCAudioTierPicker dealloc]
  -[VCAudioTierPicker reconfigureTierPicker:]
  -[VCAudioTierPicker configToString:]
  -[VCAudioTierPicker logTierPickerConfig:]
  -[VCAudioTierPicker setupTierPickerForConfig:]
  -[VCAudioTierPicker setupAlwaysOnRedTiersForSupportedRed:usingCellular:]
  -[VCAudioTierPicker printCreatedAudioTiers:]
  -[VCAudioTierPicker tierForNetworkBitrate:withLegacyDuplication:]
  -[VCAudioTierPicker tierForNetworkBitrate:withRedNumPayloads:]
  -[VCAudioTierPicker allAudioTiers]
  -[VCAudioTierPicker defaultTier]


VCMediaNegotiatorResults : NSObject
 @property  BOOL supportsDynamicMaxBitrate
 @property  NSString *remoteUserAgent
 @property  NSString *remoteBasebandCodec
 @property  unsigned int remoteBasebandCodecSampleRate
 @property  NSSet *bandwidthConfigurations
 @property  unsigned char mediaControlInfoVersion
 @property  unsigned int remoteBlobVersion
 @property  int controlChannelVersion

  // instance methods
  -[VCMediaNegotiatorResults dealloc]
  -[VCMediaNegotiatorResults init]
  -[VCMediaNegotiatorResults bandwidthConfigurations]
  -[VCMediaNegotiatorResults mediaControlInfoVersion]
  -[VCMediaNegotiatorResults setMediaControlInfoVersion:]
  -[VCMediaNegotiatorResults addBandwidthConfigurations:]
  -[VCMediaNegotiatorResults maxBandwidthWithOperatingMode:connectionType:]
  -[VCMediaNegotiatorResults supportsDynamicMaxBitrate]
  -[VCMediaNegotiatorResults setSupportsDynamicMaxBitrate:]
  -[VCMediaNegotiatorResults remoteUserAgent]
  -[VCMediaNegotiatorResults setRemoteUserAgent:]
  -[VCMediaNegotiatorResults remoteBasebandCodec]
  -[VCMediaNegotiatorResults setRemoteBasebandCodec:]
  -[VCMediaNegotiatorResults remoteBasebandCodecSampleRate]
  -[VCMediaNegotiatorResults setRemoteBasebandCodecSampleRate:]
  -[VCMediaNegotiatorResults remoteBlobVersion]
  -[VCMediaNegotiatorResults setRemoteBlobVersion:]
  -[VCMediaNegotiatorResults controlChannelVersion]
  -[VCMediaNegotiatorResults setControlChannelVersion:]


VCStreamInputAudio : VCStreamInput <VCStreamInputCaptureSourceDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCStreamInputAudio dealloc]
  -[VCStreamInputAudio initWithStreamInputID:format:delegate:delegateQueue:remoteQueue:]
  -[VCStreamInputAudio registerSampleBufferCallback:context:]


VCVideoRuleCollectionsCameraEmbedded : VCVideoRuleCollectionsCamera
  // class methods
  +[VCVideoRuleCollectionsCameraEmbedded sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsCameraEmbedded dealloc]
  -[VCVideoRuleCollectionsCameraEmbedded preferredAspectRatio]
  -[VCVideoRuleCollectionsCameraEmbedded initWithHardwareSettings:]
  -[VCVideoRuleCollectionsCameraEmbedded initSupportedPayloads]
  -[VCVideoRuleCollectionsCameraEmbedded setupRules]
  -[VCVideoRuleCollectionsCameraEmbedded setupH264Rules]
  -[VCVideoRuleCollectionsCameraEmbedded setupHEVCRules]
  -[VCVideoRuleCollectionsCameraEmbedded bitrateConfiguration]
  -[VCVideoRuleCollectionsCameraEmbedded hardwareConfigurationForPayload:transportType:]
  -[VCVideoRuleCollectionsCameraEmbedded isPreferredVideoRule:preferredFormat:]
  -[VCVideoRuleCollectionsCameraEmbedded setupVideoRulesForPayload:transportType:encodingType:formatList:formatListCount:preferredFormat:supportsHighDef:]
  -[VCVideoRuleCollectionsCameraEmbedded supportsHEVCWifiDecoding]
  -[VCVideoRuleCollectionsCameraEmbedded supportsHEVCWifiEncoding]


VCMediaNegotiatorResultsVideo : NSObject
 @property  BOOL isSupported
 @property  unsigned int remoteSSRC
 @property  BOOL isRTCPFBEnabled
 @property  VCVideoRuleCollections *videoRuleCollections
 @property  NSDictionary *featureStrings
 @property  NSDictionary *parameterSets
 @property  unsigned int customVideoWidth
 @property  unsigned int customVideoHeight
 @property  unsigned int tilesPerFrame
 @property  BOOL ltrpEnabled
 @property  NSSet *pixelFormats
 @property  NSSet *hdrModesNegotiated

  // instance methods
  -[VCMediaNegotiatorResultsVideo dealloc]
  -[VCMediaNegotiatorResultsVideo isSupported]
  -[VCMediaNegotiatorResultsVideo init]
  -[VCMediaNegotiatorResultsVideo tilesPerFrame]
  -[VCMediaNegotiatorResultsVideo setTilesPerFrame:]
  -[VCMediaNegotiatorResultsVideo setRemoteSSRC:]
  -[VCMediaNegotiatorResultsVideo remoteSSRC]
  -[VCMediaNegotiatorResultsVideo setIsSupported:]
  -[VCMediaNegotiatorResultsVideo videoRuleCollections]
  -[VCMediaNegotiatorResultsVideo customVideoWidth]
  -[VCMediaNegotiatorResultsVideo setCustomVideoWidth:]
  -[VCMediaNegotiatorResultsVideo customVideoHeight]
  -[VCMediaNegotiatorResultsVideo setCustomVideoHeight:]
  -[VCMediaNegotiatorResultsVideo ltrpEnabled]
  -[VCMediaNegotiatorResultsVideo setLtrpEnabled:]
  -[VCMediaNegotiatorResultsVideo pixelFormats]
  -[VCMediaNegotiatorResultsVideo isRTCPFBEnabled]
  -[VCMediaNegotiatorResultsVideo setIsRTCPFBEnabled:]
  -[VCMediaNegotiatorResultsVideo parameterSets]
  -[VCMediaNegotiatorResultsVideo setParameterSets:]
  -[VCMediaNegotiatorResultsVideo addVideoRules:transportType:payload:encodingType:]
  -[VCMediaNegotiatorResultsVideo addFeatureString:payload:]
  -[VCMediaNegotiatorResultsVideo addParameterSet:payload:]
  -[VCMediaNegotiatorResultsVideo addPixelFormatSet:]
  -[VCMediaNegotiatorResultsVideo addNegotiatedHDRMode:]
  -[VCMediaNegotiatorResultsVideo featureStrings]
  -[VCMediaNegotiatorResultsVideo setFeatureStrings:]
  -[VCMediaNegotiatorResultsVideo hdrModesNegotiated]


VCControlChannelDialogV2 : VCControlChannelDialog
  // instance methods
  -[VCControlChannelDialogV2 dealloc]
  -[VCControlChannelDialogV2 initWithSessionID:participantID:participantUUID:participantConfig:transactionDelegate:]
  -[VCControlChannelDialogV2 processMessageData:participantID:topic:transactionID:messageStatus:isInternalMessage:]
  -[VCControlChannelDialogV2 newDataFromMessage:topic:transactionID:isReliable:transactionDelegate:]
  -[VCControlChannelDialogV2 allocEncryptedPayloadFromPayloadData:]
  -[VCControlChannelDialogV2 copyDecryptedDataFromEncryptedPayload:]
  -[VCControlChannelDialogV2 sendConfirmationToParticipantID:transactionID:sessionID:transactionDelegate:]


VCAudioSessionAVAS : VCAudioSession
  // instance methods
  -[VCAudioSessionAVAS initWithMode:]
  -[VCAudioSessionAVAS dealloc]
  -[VCAudioSessionAVAS stopSession]
  -[VCAudioSessionAVAS hasStarted]
  -[VCAudioSessionAVAS startInternal]
  -[VCAudioSessionAVAS setSampleRate:]
  -[VCAudioSessionAVAS resetOverrideRoute]
  -[VCAudioSessionAVAS setSpeakerProperty:]
  -[VCAudioSessionAVAS applyRequestedProperty:defaultValue:]
  -[VCAudioSessionAVAS setupSharePlayWithVPOperatingMode:]
  -[VCAudioSessionAVAS setBlockSize:sampleRate:force:]
  -[VCAudioSessionAVAS setVPBlockConfigurationProperties:]
  -[VCAudioSessionAVAS applyAudioSessionMediaProperties:]
  -[VCAudioSessionAVAS startSessionWithMediaProperties:sessionRef:]
  -[VCAudioSessionAVAS handleAudioSessionInterruption:]
  -[VCAudioSessionAVAS setupInputBeamforming]
  -[VCAudioSessionAVAS internalSelectMicrophoneWithType:]
  -[VCAudioSessionAVAS handleAudioSessionAvailableSampleRateChange:]
  -[VCAudioSessionAVAS handleAudioSessionMediaServicesWereLostNotification:]
  -[VCAudioSessionAVAS setSessionProperty:value:]
  -[VCAudioSessionAVAS avAudioSessionKeyFromCMSessionKey:]
  -[VCAudioSessionAVAS avAudioSessionAllowedRouteTypesFromCMSession:]
  -[VCAudioSessionAVAS applyAudioSessionMediaPropertiesForSystemAudio]
  -[VCAudioSessionAVAS applyClientPid]
  -[VCAudioSessionAVAS destroyAudioSession]
  -[VCAudioSessionAVAS handleSecureMicNotificationWithInterruptionInfo:]


VCImageAttributeRules : NSObject
 @property  NSMutableDictionary *imageAttributeRules

  // instance methods
  -[VCImageAttributeRules dealloc]
  -[VCImageAttributeRules init]
  -[VCImageAttributeRules imageAttributeRules]
  -[VCImageAttributeRules setImageAttributeRules:]
  -[VCImageAttributeRules addRuleForVideoPayload:withDirection:width:height:frameRate:priority:interface:]
  -[VCImageAttributeRules extractDimensionsForInterface:direction:]
  -[VCImageAttributeRules swapSendAndReceiveRules]
  -[VCImageAttributeRules interfaceKey:forInterface:directionKey:forDirection:]


VCVideoStreamRateController : NSObject
 @property  unsigned int minBitrate
 @property  unsigned int maxBitrate
 @property  unsigned int targetBitrate
 @property  double owrd
 @property  double nowrd
 @property  double nowrdShort
 @property  double nowrdAcc

  // instance methods
  -[VCVideoStreamRateController dealloc]
  -[VCVideoStreamRateController className]
  -[VCVideoStreamRateController maxBitrate]
  -[VCVideoStreamRateController targetBitrate]
  -[VCVideoStreamRateController updateRTPReceiveWithTimestamp:sampleRate:time:]
  -[VCVideoStreamRateController owrd]
  -[VCVideoStreamRateController nowrd]
  -[VCVideoStreamRateController nowrdShort]
  -[VCVideoStreamRateController nowrdAcc]
  -[VCVideoStreamRateController setRateControlInterval:]
  -[VCVideoStreamRateController updateVideoStall:withStallDuration:]
  -[VCVideoStreamRateController initWithDumpID:]
  -[VCVideoStreamRateController setMaxTargetBitrate:minTargetBitrate:]
  -[VCVideoStreamRateController doRateControlWithTime:roundTripTime:packetLossRate:operatingBitrate:averageReceivedBitrate:]
  -[VCVideoStreamRateController minTierIndex:]
  -[VCVideoStreamRateController maxTierIndex:]
  -[VCVideoStreamRateController setOperatingTierIndexWithBitrate:]
  -[VCVideoStreamRateController updateAverageTargetBitrate:interval:]
  -[VCVideoStreamRateController createLogDumpFile:]
  -[VCVideoStreamRateController releaseLogDumpFile]
  -[VCVideoStreamRateController minBitrate]


VCAudioSessionCMS : VCAudioSession
 @property  ^{opaqueCMSession=} cmSession

  // instance methods
  -[VCAudioSessionCMS stopSession]
  -[VCAudioSessionCMS hasStarted]
  -[VCAudioSessionCMS startInternal]
  -[VCAudioSessionCMS setSampleRate:]
  -[VCAudioSessionCMS resetOverrideRoute]
  -[VCAudioSessionCMS setSpeakerProperty:]
  -[VCAudioSessionCMS applyRequestedProperty:defaultValue:]
  -[VCAudioSessionCMS applyAudioSessionPropertiesWithVPOperatingMode:]
  -[VCAudioSessionCMS setupSharePlayWithVPOperatingMode:]
  -[VCAudioSessionCMS setBlockSize:sampleRate:force:]
  -[VCAudioSessionCMS setVPBlockConfigurationProperties:]
  -[VCAudioSessionCMS applyAudioSessionMediaProperties:]
  -[VCAudioSessionCMS startSessionWithMediaProperties:sessionRef:]
  -[VCAudioSessionCMS setupInputBeamforming]
  -[VCAudioSessionCMS internalSelectMicrophoneWithType:]
  -[VCAudioSessionCMS applyAudioSessionMediaPropertiesForSystemAudio]
  -[VCAudioSessionCMS applyClientPid]
  -[VCAudioSessionCMS handleSecureMicNotificationWithInterruptionInfo:]
  -[VCAudioSessionCMS setClientName]
  -[VCAudioSessionCMS didBeginQuietTime]
  -[VCAudioSessionCMS didEndQuietTime]
  -[VCAudioSessionCMS handleAudioInterruption:interruptionInfo:]
  -[VCAudioSessionCMS cmSession]


VCControlChannelMultiWay : VCControlChannel <VCControlChannelTransactionDelegate>
 @property  unsigned int transportSessionID
 @property  int vfdMessage
 @property  int vfdCancel
 @property  NSMutableDictionary *dialogs
 @property  BOOL isRunning
 @property  unsigned long nextTransactionID
 @property  BOOL isEncryptionEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCControlChannelMultiWay allocPayoadDataFromVTPPacket:vpktFlags:channelDataFormat:]

  // instance methods
  -[VCControlChannelMultiWay dealloc]
  -[VCControlChannelMultiWay isRunning]
  -[VCControlChannelMultiWay stop]
  -[VCControlChannelMultiWay start]
  -[VCControlChannelMultiWay dialogs]
  -[VCControlChannelMultiWay periodicTask:]
  -[VCControlChannelMultiWay registerPeriodicTask]
  -[VCControlChannelMultiWay deregisterPeriodicTask]
  -[VCControlChannelMultiWay initializeEncryption]
  -[VCControlChannelMultiWay finalizeEncryption]
  -[VCControlChannelMultiWay initializeSRTPInfo:]
  -[VCControlChannelMultiWay updateEncryptionWithEncryptionMaterial:]
  -[VCControlChannelMultiWay updateEncryptionWithKeyMaterial:]
  -[VCControlChannelMultiWay setCurrentSendMKIWithKeyMaterial:]
  -[VCControlChannelMultiWay getKeyDerivationCryptoSet:withKeyMaterial:derivedSSRC:]
  -[VCControlChannelMultiWay updateEncryption:derivedSSRC:]
  -[VCControlChannelMultiWay encryptData:size:sequenceNumber:]
  -[VCControlChannelMultiWay decryptWithMKI:data:size:sequenceNumber:]
  -[VCControlChannelMultiWay transportSessionID]
  -[VCControlChannelMultiWay addToSentStats:]
  -[VCControlChannelMultiWay addToReceivedStats:]
  -[VCControlChannelMultiWay isParticipantActive:]
  -[VCControlChannelMultiWay scheduleAfter:block:]
  -[VCControlChannelMultiWay lastUsedMKIBytes]
  -[VCControlChannelMultiWay protocolVersionforParticipantID:]
  -[VCControlChannelMultiWay reportSignificantHandshakeDelaySymptomForParticipantID:]
  -[VCControlChannelMultiWay nextTransactionID]
  -[VCControlChannelMultiWay isEncryptionEnabled]
  -[VCControlChannelMultiWay initWithTransportSessionID:reportingAgent:mode:]
  -[VCControlChannelMultiWay initWithTransportSessionID:reportingAgent:]
  -[VCControlChannelMultiWay flushActiveMessages]
  -[VCControlChannelMultiWay remoteParticipantIDFromChannelDataFormat:]
  -[VCControlChannelMultiWay messageReceived:participantInfo:]
  -[VCControlChannelMultiWay sendReliableMessageAndWait:withTopic:participantID:]
  -[VCControlChannelMultiWay copyDialogForParticipantID:]
  -[VCControlChannelMultiWay sendReliableMessageAndWait:withTopic:participantID:timeout:]
  -[VCControlChannelMultiWay sendReliableMessage:withTopic:participantID:timeout:completion:]
  -[VCControlChannelMultiWay sendReliableMessage:withTopic:participantID:]
  -[VCControlChannelMultiWay sendUnreliableMessage:withTopic:participantID:]
  -[VCControlChannelMultiWay addActiveParticipant:participantUUID:withConfiguration:]
  -[VCControlChannelMultiWay processParticipantRemoval:]
  -[VCControlChannelMultiWay removeActiveParticipant:]
  -[VCControlChannelMultiWay removeAllActiveParticipants]
  -[VCControlChannelMultiWay updateTransactionIDWithKeyMaterial:]
  -[VCControlChannelMultiWay addNewKeyMaterial:]
  -[VCControlChannelMultiWay setEncryptionWithEncryptionMaterial:]
  -[VCControlChannelMultiWay flushRealTimeReportingStats]
  -[VCControlChannelMultiWay flushReportingStats]
  -[VCControlChannelMultiWay setTransportSessionID:]
  -[VCControlChannelMultiWay vfdMessage]
  -[VCControlChannelMultiWay setVfdMessage:]
  -[VCControlChannelMultiWay vfdCancel]
  -[VCControlChannelMultiWay setVfdCancel:]


SnapshotTimer : NSObject
 @property  BOOL taskIsComplete

  // class methods
  +[SnapshotTimer takeSnapshotForTask:]

  // instance methods
  -[SnapshotTimer checkout]
  -[SnapshotTimer init]
  -[SnapshotTimer checkinWithTimeout:forTask:]
  -[SnapshotTimer taskIsComplete]
  -[SnapshotTimer setTaskIsComplete:]


VCPositionalInfo : NSObject <NSSecureCoding>
 @property  BOOL hasPendingChanges
 @property  BOOL isVisible
 @property  unsigned int prominenceIndex
 @property  {tagAVCPositionalInfo=I{CGSize=dd}ddd} avcPositionalInfo
 @property  r^{tagVCSpatialAudioMetadataPositionalInfo=fffIII} metadataPositionalInfo
 @property  BOOL isInCanvas

  // class methods
  +[VCPositionalInfo supportsSecureCoding]

  // instance methods
  -[VCPositionalInfo isVisible]
  -[VCPositionalInfo encodeWithCoder:]
  -[VCPositionalInfo hasPendingChanges]
  -[VCPositionalInfo serialize]
  -[VCPositionalInfo init]
  -[VCPositionalInfo initWithCoder:]
  -[VCPositionalInfo setIsVisible:]
  -[VCPositionalInfo isInCanvas]
  -[VCPositionalInfo prominenceIndex]
  -[VCPositionalInfo setProminenceIndex:]
  -[VCPositionalInfo unserialize:]
  -[VCPositionalInfo metadataPositionalInfo]
  -[VCPositionalInfo avcPositionalInfo]
  -[VCPositionalInfo setAvcPositionalInfo:]
  -[VCPositionalInfo setIsInCanvas:]


VCTextJitterBuffer : NSObject
  // instance methods
  -[VCTextJitterBuffer setDelegate:]
  -[VCTextJitterBuffer delegate]
  -[VCTextJitterBuffer dealloc]
  -[VCTextJitterBuffer stop]
  -[VCTextJitterBuffer initWithConfiguration:]
  -[VCTextJitterBuffer start]
  -[VCTextJitterBuffer enqueuePacket:]
  -[VCTextJitterBuffer heartbeat]
  -[VCTextJitterBuffer startHeartbeat]
  -[VCTextJitterBuffer stopHeartbeat]
  -[VCTextJitterBuffer allocTextPacket]
  -[VCTextJitterBuffer releaseTextPacket:]
  -[VCTextJitterBuffer allocTextFrame]
  -[VCTextJitterBuffer releaseTextFrame:]
  -[VCTextJitterBuffer jitterQueuePushPacket:]


VCMomentsUtil : NSObject
  // class methods
  +[VCMomentsUtil createResizeFrame:transferSession:bufferPool:]
  +[VCMomentsUtil allocTransferSession]
  +[VCMomentsUtil setupBufferPool:width:height:name:]
  +[VCMomentsUtil pixelBufferPool:matchesWidth:height:]


VCVideoStreamReceiveGroup : VCMediaStreamReceiveGroup <VCRedundancyControllerDelegate>
 @property  BOOL isRemoteMediaStalled
 @property  BOOL remoteVideoPaused
 @property  BOOL remoteVideoEnabled
 @property  unsigned char videoQuality
 @property  unsigned int visibilityIndex
 @property  unsigned int lastDisplayedFrameRTPTimestamp
 @property  BOOL shouldEnableMLEnhance

  // instance methods
  -[VCVideoStreamReceiveGroup initWithConfig:]
  -[VCVideoStreamReceiveGroup setVideoQuality:]
  -[VCVideoStreamReceiveGroup videoQuality]
  -[VCVideoStreamReceiveGroup isVisible]
  -[VCVideoStreamReceiveGroup dealloc]
  -[VCVideoStreamReceiveGroup isRemoteVideoEnabled]
  -[VCVideoStreamReceiveGroup setRemoteVideoEnabled:]
  -[VCVideoStreamReceiveGroup setVideoDegraded:]
  -[VCVideoStreamReceiveGroup didStart]
  -[VCVideoStreamReceiveGroup mediaStream:didReceiveNewMediaKeyIndex:]
  -[VCVideoStreamReceiveGroup collectAndLogChannelMetrics:]
  -[VCVideoStreamReceiveGroup setActiveStreamIDs:]
  -[VCVideoStreamReceiveGroup setOptedInStreamID:]
  -[VCVideoStreamReceiveGroup willStart]
  -[VCVideoStreamReceiveGroup vcMediaStream:remoteMediaStalled:duration:]
  -[VCVideoStreamReceiveGroup vcMediaStream:didReceiveFirstFrameWithTime:]
  -[VCVideoStreamReceiveGroup reportParticipantsPerfTimingsOnce]
  -[VCVideoStreamReceiveGroup redundancyController:redundancyVectorDidChange:]
  -[VCVideoStreamReceiveGroup redundancyController:redundancyPercentageDidChange:]
  -[VCVideoStreamReceiveGroup vcMediaStream:priorityDidChange:]
  -[VCVideoStreamReceiveGroup vcMediaStream:didSwitchFromStreamID:toStreamID:]
  -[VCVideoStreamReceiveGroup vcMediaStream:requestKeyFrameGenerationWithStreamID:firType:]
  -[VCVideoStreamReceiveGroup setSyncSource:]
  -[VCVideoStreamReceiveGroup setMediaSuspended:forStreamToken:]
  -[VCVideoStreamReceiveGroup visibilityIndex]
  -[VCVideoStreamReceiveGroup setRemoteVideoPaused:]
  -[VCVideoStreamReceiveGroup setVisibilityIndex:]
  -[VCVideoStreamReceiveGroup lastDisplayedFrameRTPTimestamp]
  -[VCVideoStreamReceiveGroup redundancyController:redundancyIntervalDidChange:]
  -[VCVideoStreamReceiveGroup isVideoExpected]
  -[VCVideoStreamReceiveGroup updateShouldEnableFaceZoom]
  -[VCVideoStreamReceiveGroup setShouldEnableFaceZoom:]
  -[VCVideoStreamReceiveGroup updateVideoPriority:]
  -[VCVideoStreamReceiveGroup isRemoteVideoPaused]
  -[VCVideoStreamReceiveGroup setShouldEnableMLEnhance:]
  -[VCVideoStreamReceiveGroup shouldEnableMLEnhance]
  -[VCVideoStreamReceiveGroup setupRedundancyController]
  -[VCVideoStreamReceiveGroup isRemoteMediaStalled]
  -[VCVideoStreamReceiveGroup resetDidReceiveFirstFrame]
  -[VCVideoStreamReceiveGroup resetPerfTimers]
  -[VCVideoStreamReceiveGroup willStop]
  -[VCVideoStreamReceiveGroup setupVideoPriority]
  -[VCVideoStreamReceiveGroup updateVideoExpected]
  -[VCVideoStreamReceiveGroup setIsRemoteMediaStalled:]
  -[VCVideoStreamReceiveGroup checkForExtendedPoorConnection]


VCPacketBundler : NSObject
 @property  unsigned int maxPacketSize
 @property  BOOL allowLargePackets
 @property  int payload
 @property  unsigned int timestamp
 @property  int bundlingScheme
 @property  unsigned int packetsPerBundle
 @property  char * encodedBuffer
 @property  unsigned int encodedBufferSize
 @property  unsigned int bundledPackets
 @property  BOOL isFull
 @property  BOOL isTalkSpurtStart
 @property  unsigned char priority

  // instance methods
  -[VCPacketBundler isFull]
  -[VCPacketBundler unlock]
  -[VCPacketBundler setPayload:]
  -[VCPacketBundler setTimestamp:]
  -[VCPacketBundler payload]
  -[VCPacketBundler dealloc]
  -[VCPacketBundler priority]
  -[VCPacketBundler timestamp]
  -[VCPacketBundler lock]
  -[VCPacketBundler resetBuffer]
  -[VCPacketBundler setPacketsPerBundle:]
  -[VCPacketBundler packetsPerBundle]
  -[VCPacketBundler bundledPackets]
  -[VCPacketBundler initWithOperatingMode:]
  -[VCPacketBundler bundleBufferSizeWidthMaxPacketSize:maxPacketCount:]
  -[VCPacketBundler allocateBundleBuffer:]
  -[VCPacketBundler releaseBundleBuffer]
  -[VCPacketBundler reallocateBufferWithMaxPacketSize:maxPacketCount:]
  -[VCPacketBundler maxPacketSize]
  -[VCPacketBundler setMaxPacketSize:]
  -[VCPacketBundler encodedBuffer]
  -[VCPacketBundler encodedBufferSize]
  -[VCPacketBundler isTalkSpurtStart]
  -[VCPacketBundler encodedBufferForRFC3640]
  -[VCPacketBundler encodedBufferSizeForRFC3640]
  -[VCPacketBundler accessUnitHeaderSectionSize]
  -[VCPacketBundler accessUnitHeaderSectionSizeMaximum]
  -[VCPacketBundler accessUnitDataSectionHead]
  -[VCPacketBundler bundleAudioRFC3640:numInputBytes:payloadType:timestamp:]
  -[VCPacketBundler bundleAudio:numInputBytes:payloadType:timestamp:voiceActivity:priority:]
  -[VCPacketBundler _copyInputBytes:numInputBytes:payloadType:timestamp:]
  -[VCPacketBundler bundleAudioLegacy:numInputBytes:payloadType:timestamp:]
  -[VCPacketBundler updatePriority:]
  -[VCPacketBundler initLock]
  -[VCPacketBundler allowLargePackets]
  -[VCPacketBundler setAllowLargePackets:]
  -[VCPacketBundler bundlingScheme]
  -[VCPacketBundler setBundlingScheme:]


VCVideoQualityInfo : VCObject
 @property  BOOL isVideoQualityDegraded
 @property  BOOL videoIsExpected

  // instance methods
  -[VCVideoQualityInfo dealloc]
  -[VCVideoQualityInfo init]
  -[VCVideoQualityInfo resetLastGoodVideoQualityTime:]
  -[VCVideoQualityInfo updateWithCurrentFramerate:bitrate:time:]
  -[VCVideoQualityInfo setVideoIsExpected:]
  -[VCVideoQualityInfo isVideoQualityDegraded]
  -[VCVideoQualityInfo videoIsExpected]


VCMediaNegotiatorAudioConfiguration : NSObject <NSCopying>
 @property  unsigned int ssrc
 @property  BOOL allowAudioSwitching
 @property  BOOL allowAudioRecording
 @property  BOOL useSBR
 @property  unsigned int audioUnitNumber
 @property  NSSet *audioPayloads

  // instance methods
  -[VCMediaNegotiatorAudioConfiguration dealloc]
  -[VCMediaNegotiatorAudioConfiguration copyWithZone:]
  -[VCMediaNegotiatorAudioConfiguration isEqual:]
  -[VCMediaNegotiatorAudioConfiguration ssrc]
  -[VCMediaNegotiatorAudioConfiguration setSsrc:]
  -[VCMediaNegotiatorAudioConfiguration useSBR]
  -[VCMediaNegotiatorAudioConfiguration setUseSBR:]
  -[VCMediaNegotiatorAudioConfiguration allowAudioRecording]
  -[VCMediaNegotiatorAudioConfiguration setAllowAudioRecording:]
  -[VCMediaNegotiatorAudioConfiguration allowAudioSwitching]
  -[VCMediaNegotiatorAudioConfiguration setAllowAudioSwitching:]
  -[VCMediaNegotiatorAudioConfiguration audioPayloads]
  -[VCMediaNegotiatorAudioConfiguration initWithAllowAudioSwitching:allowAudioRecording:useSBR:ssrc:audioUnitNumber:]
  -[VCMediaNegotiatorAudioConfiguration initWithAllowAudioSwitching:allowAudioRecording:useSBR:ssrc:audioUnitNumber:audioRuleCollection:]
  -[VCMediaNegotiatorAudioConfiguration addAudioPayload:isSecondary:]
  -[VCMediaNegotiatorAudioConfiguration isSecondaryPayload:]
  -[VCMediaNegotiatorAudioConfiguration audioUnitNumber]
  -[VCMediaNegotiatorAudioConfiguration setAudioUnitNumber:]


AVCAudioStream : NSObject <VCMediaStreamDelegate>
 @property  NSDictionary *capabilities
 @property  AVCMediaStreamConfig *configuration
 @property  long long direction
 @property  BOOL rtcpEnabled
 @property  BOOL rtpTimeOutEnabled
 @property  BOOL rtcpTimeOutEnabled
 @property  double rtpTimeOutIntervalSec
 @property  double rtcpTimeOutIntervalSec
 @property  double rtcpSendIntervalSec
 @property  float volume
 @property  BOOL inputFrequencyMeteringEnabled
 @property  BOOL outputFrequencyMeteringEnabled
 @property  long long streamToken
 @property  <AVCAudioStreamDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVCAudioStream capabilities]

  // instance methods
  -[AVCAudioStream setConfiguration:]
  -[AVCAudioStream setDirection:]
  -[AVCAudioStream setDelegate:]
  -[AVCAudioStream delegate]
  -[AVCAudioStream configuration]
  -[AVCAudioStream pause]
  -[AVCAudioStream dealloc]
  -[AVCAudioStream resume]
  -[AVCAudioStream capabilities]
  -[AVCAudioStream setVolume:]
  -[AVCAudioStream stop]
  -[AVCAudioStream volume]
  -[AVCAudioStream direction]
  -[AVCAudioStream setCapabilities:]
  -[AVCAudioStream start]
  -[AVCAudioStream streamToken]
  -[AVCAudioStream stopContinuousDTMF]
  -[AVCAudioStream configure:error:]
  -[AVCAudioStream sendDTMFDigitString:withVolume:duration:interval:]
  -[AVCAudioStream startContinuousDTMFWithDigit:volume:]
  -[AVCAudioStream setRtcpTimeOutIntervalSec:]
  -[AVCAudioStream initWithNetworkSockets:isOriginator:callID:error:]
  -[AVCAudioStream isRTPTimeOutEnabled]
  -[AVCAudioStream setRtcpEnabled:]
  -[AVCAudioStream setRtpTimeOutIntervalSec:]
  -[AVCAudioStream setRtpTimeOutEnabled:]
  -[AVCAudioStream setRtcpSendIntervalSec:]
  -[AVCAudioStream initWithRTPNWConnectionClientID:rtcpNWConnectionClientID:options:error:]
  -[AVCAudioStream setRtcpTimeOutEnabled:]
  -[AVCAudioStream initWithNetworkSockets:isOriginator:error:]
  -[AVCAudioStream initWithIDSDestination:isOriginator:callID:error:]
  -[AVCAudioStream startSynchronizeWithStream:]
  -[AVCAudioStream isRTCPEnabled]
  -[AVCAudioStream isRTCPTimeOutEnabled]
  -[AVCAudioStream rtpTimeOutIntervalSec]
  -[AVCAudioStream rtcpTimeOutIntervalSec]
  -[AVCAudioStream rtcpSendIntervalSec]
  -[AVCAudioStream terminateSession]
  -[AVCAudioStream refreshLoggingParameters]
  -[AVCAudioStream isInputFrequencyMeteringEnabled]
  -[AVCAudioStream setInputFrequencyMeteringEnabled:]
  -[AVCAudioStream isOutputFrequencyMeteringEnabled]
  -[AVCAudioStream setOutputFrequencyMeteringEnabled:]
  -[AVCAudioStream vcMediaStreamServerDidDie:]
  -[AVCAudioStream vcMediaStreamDidRTPTimeOut:]
  -[AVCAudioStream vcMediaStreamDidRTCPTimeOut:]
  -[AVCAudioStream vcMediaStream:didReceiveRTCPPackets:]
  -[AVCAudioStream vcMediaStream:didReceiveDTMFEventWithDigit:]
  -[AVCAudioStream vcMediaStream:updateFrequencyLevel:isInputMeter:]
  -[AVCAudioStream initWithLocalAddress:error:]
  -[AVCAudioStream initWithLocalAddress:callID:error:]
  -[AVCAudioStream initWithLocalAddress:isOriginator:error:]
  -[AVCAudioStream initWithLocalAddress:isOriginator:callID:error:]
  -[AVCAudioStream initWithIDSDestination:isOriginator:error:]
  -[AVCAudioStream initWithLocalAddress:networkSockets:IDSDestination:rtpConnectionClientID:rtcpConnectionClientID:callID:options:error:]
  -[AVCAudioStream shouldRunInProcessWithOptions:]
  -[AVCAudioStream validateInitializeConnectionResult:]
  -[AVCAudioStream didInterruptionBeginHandler]
  -[AVCAudioStream didInterruptionEndHandler]
  -[AVCAudioStream registerBlocksForDelegateNotifications]
  -[AVCAudioStream deregisterBlocksForDelegateNotifications]
  -[AVCAudioStream setupAudioStreamInProcessWithClientArgs:networkSockets:error:]
  -[AVCAudioStream configureInProcess:error:]
  -[AVCAudioStream setupAudioStreamOutOfProcessWithClientArgs:networkSockets:error:]
  -[AVCAudioStream configureOutOfProcess:error:]
  -[AVCAudioStream vcMediaStream:didStartStream:error:]
  -[AVCAudioStream vcMediaStreamDidStop:]
  -[AVCAudioStream vcMediaStream:didPauseStream:error:]
  -[AVCAudioStream vcMediaStream:didResumeStream:error:]
  -[AVCAudioStream vcMediaStream:updateInputFrequencyLevel:]
  -[AVCAudioStream vcMediaStream:updateOutputFrequencyLevel:]


VCEmulatedNetworkSingleQueue : VCEmulatedNetwork
  // instance methods
  -[VCEmulatedNetworkSingleQueue push:]
  -[VCEmulatedNetworkSingleQueue dealloc]
  -[VCEmulatedNetworkSingleQueue initWithPolicies:]
  -[VCEmulatedNetworkSingleQueue runUntilTime:]


VCVideoCaptureServer : NSObject <VCVideoCaptureServer>
 @property  {_VCVideoSourceToken=(?={?=b24b8}I)} currentVideoSourceToken
 @property  NSObject<AVConferencePreviewDelegate> *appDelegate
 @property  BOOL followSystemCamera
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCVideoCaptureServer VCVideoCaptureServerSingleton]

  // instance methods
  -[VCVideoCaptureServer allocWithZone:]
  -[VCVideoCaptureServer setCinematicFramingEnabled:]
  -[VCVideoCaptureServer retain]
  -[VCVideoCaptureServer stopCapture]
  -[VCVideoCaptureServer dealloc]
  -[VCVideoCaptureServer setCameraZoomFactor:]
  -[VCVideoCaptureServer release]
  -[VCVideoCaptureServer observeValueForKeyPath:ofObject:change:context:]
  -[VCVideoCaptureServer copyWithZone:]
  -[VCVideoCaptureServer retainCount]
  -[VCVideoCaptureServer autorelease]
  -[VCVideoCaptureServer init]
  -[VCVideoCaptureServer startPreview]
  -[VCVideoCaptureServer stopPreview]
  -[VCVideoCaptureServer setCameraZoomFactor:withRate:]
  -[VCVideoCaptureServer pausePreview]
  -[VCVideoCaptureServer localScreenAttributesForVideoAttributes:]
  -[VCVideoCaptureServer setLocalScreenAttributes:]
  -[VCVideoCaptureServer beginPreviewToPIPAnimation]
  -[VCVideoCaptureServer endPreviewToPIPAnimation]
  -[VCVideoCaptureServer beginPIPToPreviewAnimation]
  -[VCVideoCaptureServer endPIPToPreviewAnimation]
  -[VCVideoCaptureServer localVideoAttributes]
  -[VCVideoCaptureServer setLocalVideoAttributes:]
  -[VCVideoCaptureServer appDelegate]
  -[VCVideoCaptureServer setAppDelegate:]
  -[VCVideoCaptureServer onVideoFrame:frameTime:attribute:]
  -[VCVideoCaptureServer setCaptureFrameRate:]
  -[VCVideoCaptureServer startCaptureWithWidth:height:frameRate:]
  -[VCVideoCaptureServer setViewPointCorrectionEnabled:]
  -[VCVideoCaptureServer supportsPortraitResolution]
  -[VCVideoCaptureServer setPauseCapture:]
  -[VCVideoCaptureServer thermalLevelDidChange:]
  -[VCVideoCaptureServer sourceFrameRateDidChange:]
  -[VCVideoCaptureServer effectsEnabledDidChange:]
  -[VCVideoCaptureServer centerStageEnabledDidChange:]
  -[VCVideoCaptureServer portraitBlurEnabledDidChange:]
  -[VCVideoCaptureServer handleCaptureSourcePositionDidChange:]
  -[VCVideoCaptureServer cleanupStreamInputs]
  -[VCVideoCaptureServer onCaptureVideoFrame:frameTime:switching:camera:videoMirrored:]
  -[VCVideoCaptureServer onCaptureScreenFrame:frameTime:orientation:]
  -[VCVideoCaptureServer handleCaptureEvent:]
  -[VCVideoCaptureServer handleCaptureEvent:subType:]
  -[VCVideoCaptureServer setCameraZoomAvailable:currentZoomFactor:maxZoomFactor:]
  -[VCVideoCaptureServer setCFAvailabilityChange:]
  -[VCVideoCaptureServer getCaptureFrameRateForSource:]
  -[VCVideoCaptureServer registerVideoSink:withCaptureSource:]
  -[VCVideoCaptureServer unregisterVideoSink:withCaptureSource:]
  -[VCVideoCaptureServer newFormatDescriptionForCaptureSource:]
  -[VCVideoCaptureServer followSystemCamera]
  -[VCVideoCaptureServer setFollowSystemCamera:]
  -[VCVideoCaptureServer setupLogFiles]
  -[VCVideoCaptureServer setUpDefaultAspectRatios]
  -[VCVideoCaptureServer setUpImageRotationConverter]
  -[VCVideoCaptureServer tearDownImageRotationConverter]
  -[VCVideoCaptureServer registerBlocksForServer]
  -[VCVideoCaptureServer createVideoCaptureWithWidth:height:frameRate:useBackFacingCamera:]
  -[VCVideoCaptureServer handleAVCaptureError:domain:]
  -[VCVideoCaptureServer handleAVCaptureError:error:]
  -[VCVideoCaptureServer reconnectClientLayerFront:]
  -[VCVideoCaptureServer previewVideoWidth:height:frameRate:]
  -[VCVideoCaptureServer captureVideoWidth:height:frameRate:]
  -[VCVideoCaptureServer enqueueFrameToQueueFront:frame:frameTime:]
  -[VCVideoCaptureServer processCaptureSampleBuffer:frameTime:camera:cameraStatusBits:]
  -[VCVideoCaptureServer processPreviewSampleBuffer:frameTime:camera:cameraStatusBits:]
  -[VCVideoCaptureServer didReceiveFirstPreviewFrame]
  -[VCVideoCaptureServer processFrameSizeChange:cameraStatusBits:]
  -[VCVideoCaptureServer applyPressureLevelChanges]
  -[VCVideoCaptureServer getScreenFrameRateForThermalLevel:]
  -[VCVideoCaptureServer getFrameRateForThermalLevel:]
  -[VCVideoCaptureServer getFrameRateForPeakPowerLevel:]
  -[VCVideoCaptureServer getFrameRateForThermalLevel:peakPowerPressure:]
  -[VCVideoCaptureServer notifyThermalChangeForClients:]
  -[VCVideoCaptureServer notifyCameraDidChangeAvailability:available:]
  -[VCVideoCaptureServer notifyFrameRateBeingThrottledForClients:newFrameRate:thermalLevelDidChange:powerLevelDidChange:]
  -[VCVideoCaptureServer notifyEffectsAppliedForClients:effectsApplied:]
  -[VCVideoCaptureServer createResizedFrame:]
  -[VCVideoCaptureServer changeCameraToPendingSettingsWithReset:]
  -[VCVideoCaptureServer canStopPreview]
  -[VCVideoCaptureServer addObservePreferredCamera]
  -[VCVideoCaptureServer removeObservePreferredCamera]
  -[VCVideoCaptureServer registerCaptureConfig:forSource:]
  -[VCVideoCaptureServer deregisterCaptureConfig:forSource:]
  -[VCVideoCaptureServer registerCaptureClientForScreenShare:]
  -[VCVideoCaptureServer deregisterCaptureClientForScreenShare:]
  -[VCVideoCaptureServer registerSystemAudioConfig:forSource:]
  -[VCVideoCaptureServer deregisterSystemAudioConfig:forSource:]
  -[VCVideoCaptureServer dispatchedStartSystemAudioForSource:]
  -[VCVideoCaptureServer dispatchedStopSystemAudioForSource:]
  -[VCVideoCaptureServer dispatchedUpdateSystemAudioConfigTapTypeForClientKey:forSource:]
  -[VCVideoCaptureServer dispatchedStartSystemAudioForClientKey:]
  -[VCVideoCaptureServer dispatchedStopSystemAudioForClientKey:]
  -[VCVideoCaptureServer dispatchedAddScreenCaptureAudioOutputForConfig:]
  -[VCVideoCaptureServer dispatchedRemoveScreenCaptureAudioOutput]
  -[VCVideoCaptureServer copyCameraColorInfo]
  -[VCVideoCaptureServer registerForFrames:]
  -[VCVideoCaptureServer registerForVideoFramesFromSource:withClient:width:height:frameRate:]
  -[VCVideoCaptureServer setupScreenCaptureForSource:config:]
  -[VCVideoCaptureServer registerForVideoFramesFromSource:sourceConfig:]
  -[VCVideoCaptureServer deregisterForVideoFramesFromSource:withClient:]
  -[VCVideoCaptureServer isClientRegisteredForVideoFrames:fromSource:]
  -[VCVideoCaptureServer getCappedFrameRate:]
  -[VCVideoCaptureServer dispatchedSetCaptureFrameRate:]
  -[VCVideoCaptureServer setScreenCaptureFrameRate:]
  -[VCVideoCaptureServer updateViewPointCorrectionStatus]
  -[VCVideoCaptureServer setCurrentFrameRate:]
  -[VCVideoCaptureServer updateImageQueueFrameRate:]
  -[VCVideoCaptureServer setUpScreenVideoCaptureSource:]
  -[VCVideoCaptureServer startScreenShareCapture:]
  -[VCVideoCaptureServer stopScreenShareCapture]
  -[VCVideoCaptureServer sendBiomeEventIsStarting:]
  -[VCVideoCaptureServer isValidStreamInput:]
  -[VCVideoCaptureServer setupStreamInputs]
  -[VCVideoCaptureServer suspendVideoSink:withCaptureSource:]
  -[VCVideoCaptureServer resumeVideoSink:withCaptureSource:]
  -[VCVideoCaptureServer findNextAvailableCaptureSourceID]
  -[VCVideoCaptureServer streamInputIDForCaptureSourceID:]
  -[VCVideoCaptureServer registerStreamInputCaptureSourceWithID:frameRate:]
  -[VCVideoCaptureServer registerStreamInputCaptureSourceWithConfiguration:]
  -[VCVideoCaptureServer unregisterStreamInputCaptureSourceWithCaptureSourceID:]
  -[VCVideoCaptureServer internalRegisterStreamInput:]
  -[VCVideoCaptureServer internalUnregisterStreamInput:]
  -[VCVideoCaptureServer registerStreamInput:]
  -[VCVideoCaptureServer unregisterStreamInput:]
  -[VCVideoCaptureServer shouldSendVideoAttributeCallback:]
  -[VCVideoCaptureServer copyLocalVideoAttributes]
  -[VCVideoCaptureServer updateLocalAspectRatios:localScreenAspectRatio:]
  -[VCVideoCaptureServer localScreenRatioForScreenOrientation:]
  -[VCVideoCaptureServer localExpectedRatioForScreenOrientation:]
  -[VCVideoCaptureServer copyLocalScreenAttributesForVideoAttributes:]
  -[VCVideoCaptureServer dispatchedSetCaptureCameraWithToken:]
  -[VCVideoCaptureServer setCaptureCameraWithToken:]
  -[VCVideoCaptureServer setLocalVideoDestination:facing:]
  -[VCVideoCaptureServer setLocalCamera:]
  -[VCVideoCaptureServer setSystemPreferredAsLocalCamera]
  -[VCVideoCaptureServer sendSnapshotFromFrame:]
  -[VCVideoCaptureServer setCaptureWidth:height:rate:forced:]
  -[VCVideoCaptureServer dispatchedSetCaptureWidth:height:rate:]
  -[VCVideoCaptureServer setCaptureWidth:height:rate:]
  -[VCVideoCaptureServer resetCameraToPreviewSettingsForced:]
  -[VCVideoCaptureServer cameraSupportsWidth:height:]
  -[VCVideoCaptureServer copyReportingStatsForCaptureSource:]
  -[VCVideoCaptureServer copyStatsDictionary]
  -[VCVideoCaptureServer addStreamInputStatsToDict:captureSource:]
  -[VCVideoCaptureServer addScreenStatsToDict:]
  -[VCVideoCaptureServer updatePreviewState]
  -[VCVideoCaptureServer currentVideoSourceToken]


VCSessionDownlinkBandwidthAllocator : NSObject
 @property  unsigned long simultaneousTalkers
 @property  BOOL forceFullBandwidth

  // class methods
  +[VCSessionDownlinkBandwidthAllocator sortMediaEntriesGroupIds:]

  // instance methods
  -[VCSessionDownlinkBandwidthAllocator dealloc]
  -[VCSessionDownlinkBandwidthAllocator reset]
  -[VCSessionDownlinkBandwidthAllocator initWithReportingAgent:]
  -[VCSessionDownlinkBandwidthAllocator sortMediaEntries]
  -[VCSessionDownlinkBandwidthAllocator requiredAudioBitrate:highestAudioBitrates:]
  -[VCSessionDownlinkBandwidthAllocator updateHighestAudioBitrates:bitrate:]
  -[VCSessionDownlinkBandwidthAllocator simultaneousTalkers]
  -[VCSessionDownlinkBandwidthAllocator distributeBitrate:]
  -[VCSessionDownlinkBandwidthAllocator updateSelectedMediaEntriesForClientWithUUID:]
  -[VCSessionDownlinkBandwidthAllocator registerForBandwidthAllocationWithClient:]
  -[VCSessionDownlinkBandwidthAllocator reportingSessionParticipantEventBitrateChanged:optedInNetworkBitrate:actualNetworkBitrate:optedInStreamID:actualStreamID:]
  -[VCSessionDownlinkBandwidthAllocator deregisterForBandwidthAllocationWithClient:]
  -[VCSessionDownlinkBandwidthAllocator client:didActualNetworkBitrateChangeForStreamGroupID:]
  -[VCSessionDownlinkBandwidthAllocator forceFullBandwidth]
  -[VCSessionDownlinkBandwidthAllocator setForceFullBandwidth:]


VCMockIDSDataChannelLinkContext : IDSDataChannelLinkContext
  // instance methods
  -[VCMockIDSDataChannelLinkContext connectionType]
  -[VCMockIDSDataChannelLinkContext init]
  -[VCMockIDSDataChannelLinkContext RATType]
  -[VCMockIDSDataChannelLinkContext remoteRATType]
  -[VCMockIDSDataChannelLinkContext isVirtualRelayLink]


VCMockIDSDatagramChannel : IDSDatagramChannel
 @property  BOOL idsUPlusOneMode

  // class methods
  +[VCMockIDSDatagramChannel extractRTPData:ssrc:sequenceNumber:]

  // instance methods
  -[VCMockIDSDatagramChannel cleanup]
  -[VCMockIDSDatagramChannel dealloc]
  -[VCMockIDSDatagramChannel setEventHandler:]
  -[VCMockIDSDatagramChannel invalidate]
  -[VCMockIDSDatagramChannel start]
  -[VCMockIDSDatagramChannel setReadHandler:]
  -[VCMockIDSDatagramChannel underlyingFileDescriptor]
  -[VCMockIDSDatagramChannel readDatagramWithCompletionHandler:]
  -[VCMockIDSDatagramChannel readDatagramsWithCompletionHandler:]
  -[VCMockIDSDatagramChannel writeDatagrams:datagramsSize:datagramsInfo:datagramsCount:options:completionHandler:]
  -[VCMockIDSDatagramChannel writeDatagram:datagramSize:flags:completionHandler:]
  -[VCMockIDSDatagramChannel writeDatagram:datagramSize:datagramInfo:options:completionHandler:]
  -[VCMockIDSDatagramChannel setReadHandlerWithOptions:]
  -[VCMockIDSDatagramChannel setWriteCompletionHandler:]
  -[VCMockIDSDatagramChannel readyToRead]
  -[VCMockIDSDatagramChannel setChannelPreferences:]
  -[VCMockIDSDatagramChannel setWiFiAssist:]
  -[VCMockIDSDatagramChannel startActiveProbingWithOptions:]
  -[VCMockIDSDatagramChannel stopActiveProbingWithOptions:]
  -[VCMockIDSDatagramChannel flushLinkProbingStatusWithOptions:]
  -[VCMockIDSDatagramChannel queryStatusWithOptions:]
  -[VCMockIDSDatagramChannel setUPlusOneMode:isInitiator:]
  -[VCMockIDSDatagramChannel requestSessionInfoWithOptions:]
  -[VCMockIDSDatagramChannel osChannelInfoLog]
  -[VCMockIDSDatagramChannel queryProbingResultsWithOptions:]
  -[VCMockIDSDatagramChannel setupMockIDSDatagramChannelRequiresOptions:]
  -[VCMockIDSDatagramChannel initRequiresOptions:]
  -[VCMockIDSDatagramChannel initCreateSocketRequiresOptions:dataPath:]
  -[VCMockIDSDatagramChannel flushDatagramPacketsList]
  -[VCMockIDSDatagramChannel readDatagram:datagramSize:datagramOptions:]
  -[VCMockIDSDatagramChannel setWriteDatagramsBlock:]
  -[VCMockIDSDatagramChannel setWriteDatagramBlock:]
  -[VCMockIDSDatagramChannel setReadyToReadBlock:]
  -[VCMockIDSDatagramChannel signalUnderlyingFileDescriptor]
  -[VCMockIDSDatagramChannel enqueueDatagramPacket:datagramSize:options:error:]
  -[VCMockIDSDatagramChannel isControlChannelDatagram:]
  -[VCMockIDSDatagramChannel newArrayOfStreamIdsForPacket:]
  -[VCMockIDSDatagramChannel shouldReadPacket:]
  -[VCMockIDSDatagramChannel dequeueDatagramPacket:]
  -[VCMockIDSDatagramChannel isMediaPacket:length:]
  -[VCMockIDSDatagramChannel isRTCPPacket:length:]
  -[VCMockIDSDatagramChannel isNACKPacket:length:]
  -[VCMockIDSDatagramChannel processWriteCompletionCallback:forDatagramWithSize:error:]
  -[VCMockIDSDatagramChannel processDatagramForDirectIDSDataPath:datagramSize:datagramOptions:error:]
  -[VCMockIDSDatagramChannel reportFirstPacketTimeForMKI:]
  -[VCMockIDSDatagramChannel createSocket]
  -[VCMockIDSDatagramChannel drainUnderlyingFileDescriptor]
  -[VCMockIDSDatagramChannel constructPacket:datagram:datagramSize:datagramOptions:]
  -[VCMockIDSDatagramChannel printDroppedPacketInfo:]
  -[VCMockIDSDatagramChannel processPacket:packetHandler:]
  -[VCMockIDSDatagramChannel addMediaPacketToBuffer:length:datagramOptions:]
  -[VCMockIDSDatagramChannel retrieveAndProcesOnePacket:seq:count:index:]
  -[VCMockIDSDatagramChannel retrieveAndProcessMediaPacketsFromBuffer:packetHandler:]
  -[VCMockIDSDatagramChannel handlePacket:packetHandler:]
  -[VCMockIDSDatagramChannel idsUPlusOneMode]


VCMockIDSDatagramChannelController : VCObject
  // class methods
  +[VCMockIDSDatagramChannelController sharedInstance]

  // instance methods
  -[VCMockIDSDatagramChannelController dealloc]
  -[VCMockIDSDatagramChannelController invalidate]
  -[VCMockIDSDatagramChannelController setWriteDatagramsBlock:]
  -[VCMockIDSDatagramChannelController setWriteDatagramBlock:]
  -[VCMockIDSDatagramChannelController setReadyToReadBlock:]
  -[VCMockIDSDatagramChannelController datagramChannelRequiresOptions:]
  -[VCMockIDSDatagramChannelController datagramChannelRequiresOptions:dataPath:]


VCMockIDSDatagramChannelSocket : VCMockIDSDatagramChannel
  // instance methods
  -[VCMockIDSDatagramChannelSocket dealloc]
  -[VCMockIDSDatagramChannelSocket writeDatagrams:datagramsSize:datagramsInfo:datagramsCount:options:completionHandler:]
  -[VCMockIDSDatagramChannelSocket writeDatagram:datagramSize:flags:completionHandler:]
  -[VCMockIDSDatagramChannelSocket writeDatagram:datagramSize:datagramInfo:options:completionHandler:]
  -[VCMockIDSDatagramChannelSocket readyToRead]
  -[VCMockIDSDatagramChannelSocket initRequiresOptions:localIP:localPort:remoteIP:remotePort:]
  -[VCMockIDSDatagramChannelSocket writeDatagram:datagramSize:]
  -[VCMockIDSDatagramChannelSocket setAllSubscribedStreamIDsOnOptions:]
  -[VCMockIDSDatagramChannelSocket setIsHopByHopEncryptedOnOptions:]
  -[VCMockIDSDatagramChannelSocket setParticipantIDOnOptions:]


VCNetworkAgent : NSObject <NWNetworkAgent>
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[VCNetworkAgent sharedInstance]
  +[VCNetworkAgent agentType]
  +[VCNetworkAgent agentDomain]
  +[VCNetworkAgent agentFromData:]

  // instance methods
  -[VCNetworkAgent agentUUID]
  -[VCNetworkAgent isVoluntary]
  -[VCNetworkAgent isUserActivated]
  -[VCNetworkAgent dealloc]
  -[VCNetworkAgent isKernelActivated]
  -[VCNetworkAgent setAgentDescription:]
  -[VCNetworkAgent setAgentUUID:]
  -[VCNetworkAgent isActive]
  -[VCNetworkAgent setVoluntary:]
  -[VCNetworkAgent setActive:]
  -[VCNetworkAgent setKernelActivated:]
  -[VCNetworkAgent copyAgentData]
  -[VCNetworkAgent setUserActivated:]
  -[VCNetworkAgent agentDescription]
  -[VCNetworkAgent init]
  -[VCNetworkAgent isSpecificUseOnly]
  -[VCNetworkAgent setSpecificUseOnly:]
  -[VCNetworkAgent addAssertion]
  -[VCNetworkAgent removeAssertion]
  -[VCNetworkAgent textString:]
  -[VCNetworkAgent textStringLength:]
  -[VCNetworkAgent clearMediaInformationAssertion]
  -[VCNetworkAgent addMediaInformationAssertion:]
  -[VCNetworkAgent getNetworkAgentRefCount]


AVConferencePreview : NSObject
 @property  NSObject<AVConferencePreviewClientDelegate> *delegate

  // class methods
  +[AVConferencePreview AVConferencePreviewSingleton]

  // instance methods
  -[AVConferencePreview allocWithZone:]
  -[AVConferencePreview setCinematicFramingEnabled:]
  -[AVConferencePreview retain]
  -[AVConferencePreview setDelegate:]
  -[AVConferencePreview maxZoomFactor]
  -[AVConferencePreview delegate]
  -[AVConferencePreview dealloc]
  -[AVConferencePreview setCameraZoomFactor:]
  -[AVConferencePreview release]
  -[AVConferencePreview didStartPreview]
  -[AVConferencePreview copyWithZone:]
  -[AVConferencePreview retainCount]
  -[AVConferencePreview autorelease]
  -[AVConferencePreview init]
  -[AVConferencePreview startPreview]
  -[AVConferencePreview stopPreview]
  -[AVConferencePreview setAnimoji:]
  -[AVConferencePreview setCameraZoomFactor:withRate:]
  -[AVConferencePreview didPausePreview]
  -[AVConferencePreview didStopPreview]
  -[AVConferencePreview didReceiveFirstPreviewFrameFromCameraUniqueID:]
  -[AVConferencePreview didChangeLocalCameraUID:]
  -[AVConferencePreview didChangeLocalVideoAttributes:]
  -[AVConferencePreview didChangeLocalScreenAttributes:]
  -[AVConferencePreview didReceiveErrorFromCameraUniqueID:error:]
  -[AVConferencePreview didReceiveCommError]
  -[AVConferencePreview didGetSnapshot:]
  -[AVConferencePreview cameraDidBecomeAvailableForUniqueID:]
  -[AVConferencePreview cameraDidBecomeInterruptedForForUniqueID:reason:]
  -[AVConferencePreview cameraZoomAvailabilityDidChange:currentZoomFactor:maxZoomFactor:]
  -[AVConferencePreview setFollowSystemCameraEnabled:]
  -[AVConferencePreview isPreviewRunning]
  -[AVConferencePreview pausePreview]
  -[AVConferencePreview getSnapshot]
  -[AVConferencePreview setLocalCameraWithUID:]
  -[AVConferencePreview localVideoLayer:]
  -[AVConferencePreview setLocalVideoLayer:front:]
  -[AVConferencePreview localScreenAttributesForVideoAttributes:]
  -[AVConferencePreview setLocalScreenAttributes:]
  -[AVConferencePreview beginPreviewToPIPAnimation]
  -[AVConferencePreview endPreviewToPIPAnimation]
  -[AVConferencePreview beginPIPToPreviewAnimation]
  -[AVConferencePreview endPIPToPreviewAnimation]
  -[AVConferencePreview localCameraUID]
  -[AVConferencePreview localVideoAttributes]
  -[AVConferencePreview setLocalVideoAttributes:]
  -[AVConferencePreview setMemoji:]
  -[AVConferencePreview registerBlocksForDelegateNotifications]
  -[AVConferencePreview setLocalCamera:]
  -[AVConferencePreview cameraCFramingAvailabilityDidChange:]
  -[AVConferencePreview connectLayer:withSlot:]
  -[AVConferencePreview startPreviewUnpausing:]
  -[AVConferencePreview isCameraZoomAvailable]
  -[AVConferencePreview currentZoomFactor]
  -[AVConferencePreview resetLocalCameraAfterServerDisconnect]
  -[AVConferencePreview localCamera]
  -[AVConferencePreview addStickerWithURL:isFaceSticker:atPosition:identifier:]
  -[AVConferencePreview clearAllStickers:]


DTMFEventHandler : NSObject
  // instance methods
  -[DTMFEventHandler dealloc]
  -[DTMFEventHandler init]
  -[DTMFEventHandler insertStartBlockWithEvent:volume:timestamp:]
  -[DTMFEventHandler insertStopBlockWithEndTimestamp:withPauseCompleteTimestamp:]
  -[DTMFEventHandler sendDTMFEvent:atTimestamp:withSampleRate:]
  -[DTMFEventHandler sendingDTMFEventWithTimeStamp:interval:RTPHandle:]
  -[DTMFEventHandler stopDTMFEventAtTimestamp:withSampleRate:]
  -[DTMFEventHandler shouldTransmitDTMFWithTimestamp:]
  -[DTMFEventHandler constructDTMFEventPacketWithEvent:volume:durationCounter:interval:dataBuffer:isEnd:]
  -[DTMFEventHandler shouldAdjustForLastPauseCompleteTimestamp:]


VCWiFiUtils : NSObject
  // class methods
  +[VCWiFiUtils getInfraChannelNumber:is5Ghz:]
  +[VCWiFiUtils copyAWDLChannelSequence:twoPtFourGhzChannelCount:fiveGhzChannelCount:dfsChannelCount:inactiveSlotCount:]


VCSessionParticipantConfig : NSObject
 @property  NSData *participantData
 @property  NSString *uuid
 @property  unsigned long idsParticipantID
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL frequencyMeteringEnabled
 @property  BOOL audioMuted
 @property  float volume
 @property  float audioPosition
 @property  BOOL audioPaused
 @property  BOOL videoPaused
 @property  unsigned char videoQuality
 @property  unsigned int visibilityIndex
 @property  unsigned int prominenceIndex
 @property  NSData *positionalInfo
 @property  ^v spatialMetadata
 @property  ^{__CFDictionary=} spatialMetadataEntryMap
 @property  int processId
 @property  VCSessionMediaNegotiator *mediaNegotiator
 @property  VCSecurityKeyManager *securityKeyManager
 @property  NSString *sessionUUID
 @property  NSString *idsDestination
 @property  unsigned int transportSessionID
 @property  BOOL isGKVoiceChat
 @property  BOOL isLowLatencyAudio
 @property  long long sessionMode
 @property  BOOL isOneToOneModeEnabled
 @property  NSObject<OS_nw_activity> *nwActivity
 @property  VCNetworkFeedbackController *networkFeedbackController
 @property  NSDictionary *mediaStates
 @property  VCAudioCaptionsCoordinator *captionsCoordinator
 @property  BOOL isServerRTxEnabled

  // instance methods
  -[VCSessionParticipantConfig setVideoQuality:]
  -[VCSessionParticipantConfig videoQuality]
  -[VCSessionParticipantConfig setSessionUUID:]
  -[VCSessionParticipantConfig sessionUUID]
  -[VCSessionParticipantConfig processId]
  -[VCSessionParticipantConfig dealloc]
  -[VCSessionParticipantConfig uuid]
  -[VCSessionParticipantConfig setUuid:]
  -[VCSessionParticipantConfig setVolume:]
  -[VCSessionParticipantConfig volume]
  -[VCSessionParticipantConfig setProcessId:]
  -[VCSessionParticipantConfig nwActivity]
  -[VCSessionParticipantConfig setAudioEnabled:]
  -[VCSessionParticipantConfig setVideoEnabled:]
  -[VCSessionParticipantConfig videoEnabled]
  -[VCSessionParticipantConfig audioEnabled]
  -[VCSessionParticipantConfig idsDestination]
  -[VCSessionParticipantConfig participantData]
  -[VCSessionParticipantConfig setScreenEnabled:]
  -[VCSessionParticipantConfig setAudioPaused:]
  -[VCSessionParticipantConfig screenEnabled]
  -[VCSessionParticipantConfig audioPaused]
  -[VCSessionParticipantConfig isOneToOneModeEnabled]
  -[VCSessionParticipantConfig setVideoPaused:]
  -[VCSessionParticipantConfig videoPaused]
  -[VCSessionParticipantConfig setNwActivity:]
  -[VCSessionParticipantConfig setIdsDestination:]
  -[VCSessionParticipantConfig sessionMode]
  -[VCSessionParticipantConfig setAudioMuted:]
  -[VCSessionParticipantConfig audioMuted]
  -[VCSessionParticipantConfig isGKVoiceChat]
  -[VCSessionParticipantConfig setIsGKVoiceChat:]
  -[VCSessionParticipantConfig cleanupNwActivity]
  -[VCSessionParticipantConfig captionsCoordinator]
  -[VCSessionParticipantConfig setCaptionsCoordinator:]
  -[VCSessionParticipantConfig setSessionMode:]
  -[VCSessionParticipantConfig spatialMetadata]
  -[VCSessionParticipantConfig setSpatialMetadata:]
  -[VCSessionParticipantConfig visibilityIndex]
  -[VCSessionParticipantConfig prominenceIndex]
  -[VCSessionParticipantConfig setVisibilityIndex:]
  -[VCSessionParticipantConfig setProminenceIndex:]
  -[VCSessionParticipantConfig positionalInfo]
  -[VCSessionParticipantConfig isServerRTxEnabled]
  -[VCSessionParticipantConfig setIsServerRTxEnabled:]
  -[VCSessionParticipantConfig securityKeyManager]
  -[VCSessionParticipantConfig setSecurityKeyManager:]
  -[VCSessionParticipantConfig idsParticipantID]
  -[VCSessionParticipantConfig setIdsParticipantID:]
  -[VCSessionParticipantConfig networkFeedbackController]
  -[VCSessionParticipantConfig setNetworkFeedbackController:]
  -[VCSessionParticipantConfig setIsOneToOneModeEnabled:]
  -[VCSessionParticipantConfig transportSessionID]
  -[VCSessionParticipantConfig setTransportSessionID:]
  -[VCSessionParticipantConfig spatialMetadataEntryMap]
  -[VCSessionParticipantConfig setSpatialMetadataEntryMap:]
  -[VCSessionParticipantConfig setParticipantData:]
  -[VCSessionParticipantConfig frequencyMeteringEnabled]
  -[VCSessionParticipantConfig setFrequencyMeteringEnabled:]
  -[VCSessionParticipantConfig audioPosition]
  -[VCSessionParticipantConfig setAudioPosition:]
  -[VCSessionParticipantConfig setPositionalInfo:]
  -[VCSessionParticipantConfig mediaStates]
  -[VCSessionParticipantConfig setMediaStates:]
  -[VCSessionParticipantConfig mediaNegotiator]
  -[VCSessionParticipantConfig setMediaNegotiator:]
  -[VCSessionParticipantConfig isLowLatencyAudio]
  -[VCSessionParticipantConfig setIsLowLatencyAudio:]


VCDuplicationHandler : NSObject
 @property  unsigned char duplicationReason
 @property  BOOL isDuplicationEnabled
 @property  BOOL isDuplicationPending
 @property  BOOL isRemotePreAzul
 @property  BOOL iRATDuplicationEnabled
 @property  BOOL allowDuplication

  // instance methods
  -[VCDuplicationHandler init]
  -[VCDuplicationHandler isDuplicationEnabled]
  -[VCDuplicationHandler iRATDuplicationEnabled]
  -[VCDuplicationHandler isDuplicationPending]
  -[VCDuplicationHandler handleDuplicationStateUpdateEvent:]
  -[VCDuplicationHandler enableDuplication]
  -[VCDuplicationHandler disableDuplication]
  -[VCDuplicationHandler updateDuplicationStateForMissingPacketsUpdateEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForReceivingPacketsUpdateEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForLocalWRMSuggestingCellularEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForLocalWRMSuggestingWiFiEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForRemoteWRMSuggestingWiFiEvent:updateResult:]
  -[VCDuplicationHandler stopRemoteDuplicationAndUpdateResult:updateAlertState:]
  -[VCDuplicationHandler updateDuplicationStateForTurnOffDuplicationForHandoverEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForTurnOnDuplicationForHandoverEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForAlertStateUpdatedEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForConnectionArrayUpdatedEvent:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateWithAlertInfo:]
  -[VCDuplicationHandler updateDuplicationStateForMediaHealthUnrecoverable:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForMediaHealthRecovered:updateResult:]
  -[VCDuplicationHandler updateDuplicationStateForRemoteDuplicationChanged:updateResult:updateAlertState:]
  -[VCDuplicationHandler shareLocalInterfacePreferenceWithPeerDuringActiveDuplicationForEvent:updateResult:]
  -[VCDuplicationHandler isDuplicationDueToWRMSuggestion]
  -[VCDuplicationHandler duplicationReason]
  -[VCDuplicationHandler isRemotePreAzul]
  -[VCDuplicationHandler setIsRemotePreAzul:]
  -[VCDuplicationHandler setIRATDuplicationEnabled:]
  -[VCDuplicationHandler allowDuplication]
  -[VCDuplicationHandler setAllowDuplication:]


VCSecureDataChannel : NSObject
 @property  <VCSecureDataChannelDelegate> *delegate
 @property  long long maxEncryptedDataSize
 @property  long long maxUnencryptedDataSize
 @property  unsigned long maxUDPPayloadSize

  // instance methods
  -[VCSecureDataChannel setDelegate:]
  -[VCSecureDataChannel delegate]
  -[VCSecureDataChannel dealloc]
  -[VCSecureDataChannel sendData:messageType:encrypted:]
  -[VCSecureDataChannel initWithLocalCallID:remoteCallID:isCaller:sharedSecret:error:]
  -[VCSecureDataChannel setupWithSharedSecret:isCaller:error:]
  -[VCSecureDataChannel convertEncryptedData:toData:encrypted:]
  -[VCSecureDataChannel convertData:toEncryptedData:encrypted:]
  -[VCSecureDataChannel maxEncryptedDataSize]
  -[VCSecureDataChannel maxUnencryptedDataSize]
  -[VCSecureDataChannel maxUDPPayloadSize]
  -[VCSecureDataChannel setMaxUDPPayloadSize:]


VCIDSSessionInfoSynchronizer : NSObject
 @property  NSNumber *primaryLinkID
 @property  NSNumber *duplicationLinkID
 @property  @? peerSubscribedStreamCallback
 @property  @? peerPublishedStreamCallback
 @property  @? errorReponseCallback
 @property  id reportingAgent

  // instance methods
  -[VCIDSSessionInfoSynchronizer dealloc]
  -[VCIDSSessionInfoSynchronizer periodicTask:]
  -[VCIDSSessionInfoSynchronizer registerPeriodicTask]
  -[VCIDSSessionInfoSynchronizer deregisterPeriodicTask]
  -[VCIDSSessionInfoSynchronizer reportingAgent]
  -[VCIDSSessionInfoSynchronizer resetParticipantGenerationCounter]
  -[VCIDSSessionInfoSynchronizer flushRealTimeReportingStats]
  -[VCIDSSessionInfoSynchronizer setVCIDSSessionInfoSubscribedStreamIDs:]
  -[VCIDSSessionInfoSynchronizer retryVCIDSSessionInfoSubscribedStreamIDs]
  -[VCIDSSessionInfoSynchronizer sendVCIDSSessionInfoSubscribedStreamIDs:]
  -[VCIDSSessionInfoSynchronizer setVCIDSSessionInfoPublishedStreamIDs:]
  -[VCIDSSessionInfoSynchronizer sessionInfoSynchronizerDelegate]
  -[VCIDSSessionInfoSynchronizer setErrorResponseCallback:]
  -[VCIDSSessionInfoSynchronizer peerSubscribedStreamCallback]
  -[VCIDSSessionInfoSynchronizer setPeerSubscribedStreamCallback:]
  -[VCIDSSessionInfoSynchronizer peerPublishedStreamCallback]
  -[VCIDSSessionInfoSynchronizer setPeerPublishedStreamCallback:]
  -[VCIDSSessionInfoSynchronizer errorReponseCallback]
  -[VCIDSSessionInfoSynchronizer setErrorReponseCallback:]
  -[VCIDSSessionInfoSynchronizer initWithDelegate:connectionManager:reportingAgent:]
  -[VCIDSSessionInfoSynchronizer setPrimaryLinkID:]
  -[VCIDSSessionInfoSynchronizer primaryLinkID]
  -[VCIDSSessionInfoSynchronizer setDuplicationLinkID:]
  -[VCIDSSessionInfoSynchronizer duplicationLinkID]
  -[VCIDSSessionInfoSynchronizer checkVCIDSSessionInfoNeedUpdate:]
  -[VCIDSSessionInfoSynchronizer updateVCIDSSessionInfoResponse:]
  -[VCIDSSessionInfoSynchronizer optInStreamIDsForConnection:]
  -[VCIDSSessionInfoSynchronizer optInAllStreamsForConnection:]
  -[VCIDSSessionInfoSynchronizer optInStreamIDsForNewPrimaryConnection:oldPrimaryConnection:]
  -[VCIDSSessionInfoSynchronizer optOutStreamIDsForNonPrimaryConnection:sentOnConnection:]


VCSessionStatsController : NSObject
 @property  id reportingAgent
 @property  double statsReportingInterval

  // instance methods
  -[VCSessionStatsController dealloc]
  -[VCSessionStatsController reset]
  -[VCSessionStatsController periodicTask:]
  -[VCSessionStatsController registerPeriodicTask]
  -[VCSessionStatsController deregisterPeriodicTask]
  -[VCSessionStatsController reportingAgent]
  -[VCSessionStatsController flushRealTimeReportingStats]
  -[VCSessionStatsController initWithDelegate:connectionManager:uplinkStatsCollector:downlinkStatsCollector:reportingAgent:transportSessionID:streamID:mediaQueue:]
  -[VCSessionStatsController sendLocalStats]
  -[VCSessionStatsController startLocalSessionStatsUpdate]
  -[VCSessionStatsController startLocalSessionStatsReceive]
  -[VCSessionStatsController startLocalSessionStatsSend]
  -[VCSessionStatsController stopLocalSessionStatsUpdate]
  -[VCSessionStatsController updateRemoteSessionStats:]
  -[VCSessionStatsController isRemoteSessionStatsTooLateWithStatsId:]
  -[VCSessionStatsController translateTimestampFromMicro:]
  -[VCSessionStatsController triggerRateControlWithLocalSessionStats:time:forUplink:forDownlink:fromVCRCExternalThread:]
  -[VCSessionStatsController statsReceiveStatsPayload]
  -[VCSessionStatsController handleRemoteSessionStats:]
  -[VCSessionStatsController calculateInterCallbackDurationWithTime:]
  -[VCSessionStatsController healthPrintForServerStats]
  -[VCSessionStatsController resetHealthPrintCounters]
  -[VCSessionStatsController statsReportingInterval]
  -[VCSessionStatsController setStatsReportingInterval:]


CannedAudioInjector : NSObject
 @property  BOOL readyToInject
 @property  NSString *cannedMoviePath
 @property  NSMutableData *samples
 @property  int position
 @property  BOOL fromBeginning

  // class methods
  +[CannedAudioInjector isAudioAvailable:]

  // instance methods
  -[CannedAudioInjector dealloc]
  -[CannedAudioInjector setSamples:]
  -[CannedAudioInjector setPosition:]
  -[CannedAudioInjector samples]
  -[CannedAudioInjector position]
  -[CannedAudioInjector initWithPath:withDescription:fromBeginning:startHostTime:loopLength:]
  -[CannedAudioInjector initWithPath:withDescription:startHostTime:loopLength:]
  -[CannedAudioInjector initWithPath:withDescription:fromBeginning:]
  -[CannedAudioInjector injectToBuffer:size:time:muted:]
  -[CannedAudioInjector setAudioConverterProcAudioBufferList:blockBuffer:]
  -[CannedAudioInjector cleanupAudioConverterProc]
  -[CannedAudioInjector decodeAudio]
  -[CannedAudioInjector readRawAudioSamples]
  -[CannedAudioInjector cannedMoviePath]
  -[CannedAudioInjector setCannedMoviePath:]
  -[CannedAudioInjector fromBeginning]
  -[CannedAudioInjector setFromBeginning:]
  -[CannedAudioInjector readyToInject]
  -[CannedAudioInjector setReadyToInject:]


AVCPacketRelaySocketConnection : NSObject <AVCPacketRelayConnectionProtocol>
 @property  unsigned char type
 @property  BOOL isDemuxNeeded
 @property  @? readHandler
 @property  AVCPacketFilter *packetFilter

  // instance methods
  -[AVCPacketRelaySocketConnection type]
  -[AVCPacketRelaySocketConnection dealloc]
  -[AVCPacketRelaySocketConnection stop]
  -[AVCPacketRelaySocketConnection start]
  -[AVCPacketRelaySocketConnection readHandler]
  -[AVCPacketRelaySocketConnection setReadHandler:]
  -[AVCPacketRelaySocketConnection readyToRead]
  -[AVCPacketRelaySocketConnection sendData:size:error:]
  -[AVCPacketRelaySocketConnection isDemuxNeeded]
  -[AVCPacketRelaySocketConnection setIsDemuxNeeded:]
  -[AVCPacketRelaySocketConnection packetFilter]
  -[AVCPacketRelaySocketConnection setPacketFilter:]
  -[AVCPacketRelaySocketConnection initWithSocket:remoteAddress:packetFilter:]
  -[AVCPacketRelaySocketConnection receiveDataOnSocket:]


AVCPacketRelayIDSConnection : NSObject <AVCPacketRelayConnectionProtocol>
 @property  BOOL isResumed
 @property  unsigned char type
 @property  BOOL isDemuxNeeded
 @property  @? readHandler
 @property  AVCPacketFilter *packetFilter

  // instance methods
  -[AVCPacketRelayIDSConnection type]
  -[AVCPacketRelayIDSConnection isResumed]
  -[AVCPacketRelayIDSConnection dealloc]
  -[AVCPacketRelayIDSConnection stop]
  -[AVCPacketRelayIDSConnection start]
  -[AVCPacketRelayIDSConnection setIsResumed:]
  -[AVCPacketRelayIDSConnection readHandler]
  -[AVCPacketRelayIDSConnection setReadHandler:]
  -[AVCPacketRelayIDSConnection readyToRead]
  -[AVCPacketRelayIDSConnection sendData:size:error:]
  -[AVCPacketRelayIDSConnection isDemuxNeeded]
  -[AVCPacketRelayIDSConnection setIsDemuxNeeded:]
  -[AVCPacketRelayIDSConnection packetFilter]
  -[AVCPacketRelayIDSConnection setPacketFilter:]
  -[AVCPacketRelayIDSConnection initWithIDSSocketDescriptor:]
  -[AVCPacketRelayIDSConnection initWithIDSDestination:]


AVCPacketRelayConnection : NSObject
  // class methods
  +[AVCPacketRelayConnection connectionWithSocket:remoteAddress:packetFilter:]
  +[AVCPacketRelayConnection connectionWithSocket:remoteAddress:]
  +[AVCPacketRelayConnection connectionWithSocket:]
  +[AVCPacketRelayConnection connectionWithIDSDestination:]
  +[AVCPacketRelayConnection connectionWithIDSSocketDescriptor:]


AVCPacketRelay : NSObject
 @property  NSArray *connections
 @property  <AVCPacketRelayConnectionProtocol> *multiplexedConnection
 @property  <AVCPacketRelayDelegate> *delegate

  // instance methods
  -[AVCPacketRelay setConnections:]
  -[AVCPacketRelay connections]
  -[AVCPacketRelay setDelegate:]
  -[AVCPacketRelay delegate]
  -[AVCPacketRelay dealloc]
  -[AVCPacketRelay stop]
  -[AVCPacketRelay start]
  -[AVCPacketRelay initWithConnections:multiplexedConnection:error:]
  -[AVCPacketRelay initWithConnection:connection:error:]
  -[AVCPacketRelay isAllConnectionTypeValid:]
  -[AVCPacketRelay startAllConnections]
  -[AVCPacketRelay stopAllConnections]
  -[AVCPacketRelay findConnectionToForwardData:size:]
  -[AVCPacketRelay healthPrint:isSend:]
  -[AVCPacketRelay updateDemuxPacketStatsWithPacketFilterPacketType:]
  -[AVCPacketRelay multiplexedConnection]
  -[AVCPacketRelay setMultiplexedConnection:]


CannedAVSync : NSObject
 @property  double base
 @property  double modulo

  // class methods
  +[CannedAVSync sharedCannedAVSync]

  // instance methods
  -[CannedAVSync clear]
  -[CannedAVSync setBase:]
  -[CannedAVSync base]
  -[CannedAVSync init]
  -[CannedAVSync addStreamWithCount:rate:]
  -[CannedAVSync addDrift:]
  -[CannedAVSync clampForTime:]
  -[CannedAVSync modulo]
  -[CannedAVSync setModulo:]


CannedEncodedVideoCapture : NSObject <CannedVideoFrameFeeder>
 @property  AVURLAsset *compressedFileAsset
 @property  AVAssetReader *assetReader
 @property  AVAssetTrack *videoTrack
 @property  AVAssetTrack *metadataTrack
 @property  AVAssetReaderTrackOutput *readerVideoTrackOutput
 @property  AVAssetReaderTrackOutput *readerMetadataTrackOutput
 @property  AVAssetReaderOutputMetadataAdaptor *metadataAdaptor
 @property  NSString *movieURLString
 @property  VideoScaler *videoScaler
 @property  int width
 @property  int height
 @property  int allFrameCount
 @property  double allFrameRate
 @property  int frameCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CannedEncodedVideoCapture frameCount]
  -[CannedEncodedVideoCapture initWithPath:]
  -[CannedEncodedVideoCapture width]
  -[CannedEncodedVideoCapture height]
  -[CannedEncodedVideoCapture dealloc]
  -[CannedEncodedVideoCapture setWidth:]
  -[CannedEncodedVideoCapture initialize]
  -[CannedEncodedVideoCapture setHeight:]
  -[CannedEncodedVideoCapture setFrameCount:]
  -[CannedEncodedVideoCapture assetReader]
  -[CannedEncodedVideoCapture videoTrack]
  -[CannedEncodedVideoCapture setVideoTrack:]
  -[CannedEncodedVideoCapture setAssetReader:]
  -[CannedEncodedVideoCapture metadataAdaptor]
  -[CannedEncodedVideoCapture createPixelBufferForFrameIndex:]
  -[CannedEncodedVideoCapture getFrameRate:frameCount:]
  -[CannedEncodedVideoCapture setWidth:height:]
  -[CannedEncodedVideoCapture loadVideoTrackFromList:error:]
  -[CannedEncodedVideoCapture loadMetadataTrackFromList:error:]
  -[CannedEncodedVideoCapture finalizeVideoCapture]
  -[CannedEncodedVideoCapture loadCannedMediaAssets]
  -[CannedEncodedVideoCapture initializeDecoder]
  -[CannedEncodedVideoCapture attachMetadataToPixelBuffer:]
  -[CannedEncodedVideoCapture compressedFileAsset]
  -[CannedEncodedVideoCapture setCompressedFileAsset:]
  -[CannedEncodedVideoCapture metadataTrack]
  -[CannedEncodedVideoCapture setMetadataTrack:]
  -[CannedEncodedVideoCapture readerVideoTrackOutput]
  -[CannedEncodedVideoCapture setReaderVideoTrackOutput:]
  -[CannedEncodedVideoCapture readerMetadataTrackOutput]
  -[CannedEncodedVideoCapture setReaderMetadataTrackOutput:]
  -[CannedEncodedVideoCapture setMetadataAdaptor:]
  -[CannedEncodedVideoCapture movieURLString]
  -[CannedEncodedVideoCapture setMovieURLString:]
  -[CannedEncodedVideoCapture videoScaler]
  -[CannedEncodedVideoCapture setVideoScaler:]
  -[CannedEncodedVideoCapture allFrameCount]
  -[CannedEncodedVideoCapture setAllFrameCount:]
  -[CannedEncodedVideoCapture allFrameRate]
  -[CannedEncodedVideoCapture setAllFrameRate:]


AVCMediaStreamNegotiator : NSObject
 @property  NSData *offer
 @property  NSData *answer

  // class methods
  +[AVCMediaStreamNegotiator AVConferenceOperatingModeWithAVCMediaStreamMode:]
  +[AVCMediaStreamNegotiator AVCVideoStreamModeWithAVCMediaStreamMode:]
  +[AVCMediaStreamNegotiator audioStreamModeWithMediaStreamMode:]
  +[AVCMediaStreamNegotiator clientCodecTypeWithCodecType:]

  // instance methods
  -[AVCMediaStreamNegotiator dealloc]
  -[AVCMediaStreamNegotiator offer]
  -[AVCMediaStreamNegotiator supportedPixelFormats]
  -[AVCMediaStreamNegotiator answer]
  -[AVCMediaStreamNegotiator setAnswer:withError:]
  -[AVCMediaStreamNegotiator generateMediaStreamConfigurationWithError:]
  -[AVCMediaStreamNegotiator initWithMode:options:error:]
  -[AVCMediaStreamNegotiator refreshLoggingParameters]
  -[AVCMediaStreamNegotiator VCVideoFeatureListStringTypeWithAVCMediaStreamMode:]
  -[AVCMediaStreamNegotiator initNegotiatorLocalConfiguration:options:]
  -[AVCMediaStreamNegotiator addHDRModeSpecificSettings:]
  -[AVCMediaStreamNegotiator initWithMode:error:]
  -[AVCMediaStreamNegotiator processOffererInitOptions:errorReason:]
  -[AVCMediaStreamNegotiator createOffer]
  -[AVCMediaStreamNegotiator processOfferWithError:errorReason:]
  -[AVCMediaStreamNegotiator processAnswererInitOptions:errorReason:]
  -[AVCMediaStreamNegotiator initWithOffer:error:]
  -[AVCMediaStreamNegotiator initWithOffer:options:error:]
  -[AVCMediaStreamNegotiator createAnswer]
  -[AVCMediaStreamNegotiator processAnswerWithError:errorReason:]
  -[AVCMediaStreamNegotiator setupAudioStreamConfiguration:errorReason:]
  -[AVCMediaStreamNegotiator setupVideoStreamConfiguration:errorReason:]
  -[AVCMediaStreamNegotiator addLocalCallInfoBlobToOutgoingDictionary:]
  -[AVCMediaStreamNegotiator generateMediaStreamInitOptionsWithError:]
  -[AVCMediaStreamNegotiator pickBestPixelFormatFromSet:]
  -[AVCMediaStreamNegotiator pickBestPixelFormatFromSet:preferenceList:count:acceptDefault:]
  -[AVCMediaStreamNegotiator pickBestHDRMode:]


VCMediaStreamSynchronizer : NSObject <VCMediaStreamSyncSourceDelegate>
 @property  unsigned int sourceSampleRate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCMediaStreamSynchronizer dealloc]
  -[VCMediaStreamSynchronizer initWithSourceSampleRate:destinationSampleRate:]
  -[VCMediaStreamSynchronizer sourceSampleRate]


AVCTextStream : NSObject
 @property  NSDictionary *capabilities
 @property  AVCMediaStreamConfig *configuration
 @property  long long direction
 @property  BOOL rtcpEnabled
 @property  BOOL rtpTimeOutEnabled
 @property  BOOL rtcpTimeOutEnabled
 @property  double rtpTimeOutIntervalSec
 @property  double rtcpTimeOutIntervalSec
 @property  double rtcpSendIntervalSec
 @property  long long streamToken
 @property  <AVCTextStreamDelegate> *delegate

  // instance methods
  -[AVCTextStream setConfiguration:]
  -[AVCTextStream setDirection:]
  -[AVCTextStream setDelegate:]
  -[AVCTextStream delegate]
  -[AVCTextStream configuration]
  -[AVCTextStream pause]
  -[AVCTextStream dealloc]
  -[AVCTextStream resume]
  -[AVCTextStream capabilities]
  -[AVCTextStream stop]
  -[AVCTextStream direction]
  -[AVCTextStream setCapabilities:]
  -[AVCTextStream start]
  -[AVCTextStream streamToken]
  -[AVCTextStream configure:error:]
  -[AVCTextStream setRtcpTimeOutIntervalSec:]
  -[AVCTextStream isRTPTimeOutEnabled]
  -[AVCTextStream setRtcpEnabled:]
  -[AVCTextStream initWithNetworkSockets:callID:error:]
  -[AVCTextStream setRtpTimeOutIntervalSec:]
  -[AVCTextStream setRtpTimeOutEnabled:]
  -[AVCTextStream setRtcpSendIntervalSec:]
  -[AVCTextStream setRtcpTimeOutEnabled:]
  -[AVCTextStream isRTCPEnabled]
  -[AVCTextStream isRTCPTimeOutEnabled]
  -[AVCTextStream rtpTimeOutIntervalSec]
  -[AVCTextStream rtcpTimeOutIntervalSec]
  -[AVCTextStream rtcpSendIntervalSec]
  -[AVCTextStream refreshLoggingParameters]
  -[AVCTextStream newNSErrorWithErrorDictionary:]
  -[AVCTextStream registerBlocksForDelegateNotifications]
  -[AVCTextStream deregisterBlocksForDelegateNotifications]
  -[AVCTextStream validateResultsDictionary:error:]
  -[AVCTextStream initializeServerWithNetworkSockets:callID:error:]


VCCCMessageWrapper : PBCodable <NSCopying>
 @property  BOOL hasMessage
 @property  VCCCMessage *message
 @property  BOOL hasAcknowledgement
 @property  VCCCMessageAcknowledgment *acknowledgement
 @property  BOOL hasContent
 @property  int content

  // instance methods
  -[VCCCMessageWrapper setMessage:]
  -[VCCCMessageWrapper copyTo:]
  -[VCCCMessageWrapper content]
  -[VCCCMessageWrapper dealloc]
  -[VCCCMessageWrapper hasContent]
  -[VCCCMessageWrapper mergeFrom:]
  -[VCCCMessageWrapper dictionaryRepresentation]
  -[VCCCMessageWrapper copyWithZone:]
  -[VCCCMessageWrapper readFrom:]
  -[VCCCMessageWrapper writeTo:]
  -[VCCCMessageWrapper message]
  -[VCCCMessageWrapper isEqual:]
  -[VCCCMessageWrapper setContent:]
  -[VCCCMessageWrapper hasMessage]
  -[VCCCMessageWrapper setAcknowledgement:]
  -[VCCCMessageWrapper acknowledgement]
  -[VCCCMessageWrapper setHasContent:]
  -[VCCCMessageWrapper hasAcknowledgement]
  -[VCCCMessageWrapper contentAsString:]
  -[VCCCMessageWrapper StringAsContent:]
  -[VCCCMessageWrapper clearOneofValuesForContent]


CannedRawVideoCapture : NSObject <CannedVideoFrameFeeder>
 @property  int width
 @property  int height
 @property  NSArray *allResolutions
 @property  int allFrameCount
 @property  double allFrameRate
 @property  NSDictionary *currentResolution
 @property  VideoScaler *videoScaler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CannedRawVideoCapture initWithPath:]
  -[CannedRawVideoCapture width]
  -[CannedRawVideoCapture height]
  -[CannedRawVideoCapture dealloc]
  -[CannedRawVideoCapture setWidth:]
  -[CannedRawVideoCapture setHeight:]
  -[CannedRawVideoCapture createPixelBufferForFrameIndex:]
  -[CannedRawVideoCapture getFrameRate:frameCount:]
  -[CannedRawVideoCapture setWidth:height:]
  -[CannedRawVideoCapture videoScaler]
  -[CannedRawVideoCapture setVideoScaler:]
  -[CannedRawVideoCapture allFrameCount]
  -[CannedRawVideoCapture setAllFrameCount:]
  -[CannedRawVideoCapture allFrameRate]
  -[CannedRawVideoCapture setAllFrameRate:]
  -[CannedRawVideoCapture initializeFrameResolutionArrayFromFolder:]
  -[CannedRawVideoCapture allResolutions]
  -[CannedRawVideoCapture setAllResolutions:]
  -[CannedRawVideoCapture currentResolution]
  -[CannedRawVideoCapture setCurrentResolution:]


SuddenChangeParameters : NSObject
 @property  int margin
 @property  int minSamplesCount
 @property  int minSamplesCountFastBandwidthEstimation
 @property  int minMarginRequired
 @property  double percentage
 @property  double durationThresholdUpward
 @property  double durationThresholdDownward

  // instance methods
  -[SuddenChangeParameters margin]
  -[SuddenChangeParameters setMargin:]
  -[SuddenChangeParameters percentage]
  -[SuddenChangeParameters setPercentage:]
  -[SuddenChangeParameters minSamplesCount]
  -[SuddenChangeParameters setMinSamplesCount:]
  -[SuddenChangeParameters minSamplesCountFastBandwidthEstimation]
  -[SuddenChangeParameters setMinSamplesCountFastBandwidthEstimation:]
  -[SuddenChangeParameters minMarginRequired]
  -[SuddenChangeParameters setMinMarginRequired:]
  -[SuddenChangeParameters durationThresholdUpward]
  -[SuddenChangeParameters setDurationThresholdUpward:]
  -[SuddenChangeParameters durationThresholdDownward]
  -[SuddenChangeParameters setDurationThresholdDownward:]


VCRateControlBandwidthEstimator : NSObject
 @property  double estimatedBandwidth
 @property  double estimatedBandwidthUncapped
 @property  unsigned int radioAccessTechnology
 @property  unsigned int mode
 @property  int bandwidthEstimationState
 @property  BOOL fastSuddenBandwidthDetectionEnabled
 @property  VCRateControlServerBag *serverBag
 @property  double lastProbingArrivalTime

  // instance methods
  -[VCRateControlBandwidthEstimator setServerBag:]
  -[VCRateControlBandwidthEstimator serverBag]
  -[VCRateControlBandwidthEstimator radioAccessTechnology]
  -[VCRateControlBandwidthEstimator dealloc]
  -[VCRateControlBandwidthEstimator mode]
  -[VCRateControlBandwidthEstimator setMode:]
  -[VCRateControlBandwidthEstimator init]
  -[VCRateControlBandwidthEstimator setRadioAccessTechnology:]
  -[VCRateControlBandwidthEstimator setFastSuddenBandwidthDetectionEnabled:]
  -[VCRateControlBandwidthEstimator enableBWELogDump:]
  -[VCRateControlBandwidthEstimator fastSuddenBandwidthDetectionEnabled]
  -[VCRateControlBandwidthEstimator calculateBandwidthEstimationAtTime:mediaTimestamp:mediaDataSize:probingSequence:probingSequenceID:]
  -[VCRateControlBandwidthEstimator calculateBandwidthEstimationForBandwidthSample:arrivalTime:]
  -[VCRateControlBandwidthEstimator updateQualificationParameters]
  -[VCRateControlBandwidthEstimator isPacketProcessedLateWithArrivalTime:]
  -[VCRateControlBandwidthEstimator resetBandwidthWithParameters:probingSequenceDuration:probingSequenceSize:packetsInProbingSequence:]
  -[VCRateControlBandwidthEstimator updateBandwidthEstimation:arrivalTime:]
  -[VCRateControlBandwidthEstimator initializeBandwidthEstimationAtTime:mediaTimestamp:probingSequence:probingSequenceID:]
  -[VCRateControlBandwidthEstimator updateInitialBandwidthEstimationForCellularAtTime:bandwidth:]
  -[VCRateControlBandwidthEstimator detectSuddenChangeWithBandwidth:suddenChangeAbove:suddenChangeBelow:]
  -[VCRateControlBandwidthEstimator recordSuddenChangeBandwidth:]
  -[VCRateControlBandwidthEstimator compensateSuddenChangeBandwidths]
  -[VCRateControlBandwidthEstimator isSuddenChangeDurationMetAtArrivalTime:]
  -[VCRateControlBandwidthEstimator updateBandwidthDivergeCountAtArrivalTime:suddenChangeAbove:suddenChangeBelow:]
  -[VCRateControlBandwidthEstimator estimatedBandwidth]
  -[VCRateControlBandwidthEstimator setEstimatedBandwidth:]
  -[VCRateControlBandwidthEstimator estimatedBandwidthUncapped]
  -[VCRateControlBandwidthEstimator setEstimatedBandwidthUncapped:]
  -[VCRateControlBandwidthEstimator bandwidthEstimationState]
  -[VCRateControlBandwidthEstimator lastProbingArrivalTime]


VCRateControlBandwidthEstimatorMap : NSObject
 @property  double estimatedBandwidth
 @property  double estimatedBandwidthUncapped
 @property  unsigned int radioAccessTechnology
 @property  unsigned int mode
 @property  int bandwidthEstimationState
 @property  BOOL fastSuddenBandwidthDetectionEnabled
 @property  VCRateControlServerBag *serverBag

  // instance methods
  -[VCRateControlBandwidthEstimatorMap setServerBag:]
  -[VCRateControlBandwidthEstimatorMap serverBag]
  -[VCRateControlBandwidthEstimatorMap radioAccessTechnology]
  -[VCRateControlBandwidthEstimatorMap dealloc]
  -[VCRateControlBandwidthEstimatorMap mode]
  -[VCRateControlBandwidthEstimatorMap setMode:]
  -[VCRateControlBandwidthEstimatorMap init]
  -[VCRateControlBandwidthEstimatorMap setRadioAccessTechnology:]
  -[VCRateControlBandwidthEstimatorMap setFastSuddenBandwidthDetectionEnabled:]
  -[VCRateControlBandwidthEstimatorMap enableBWELogDump:]
  -[VCRateControlBandwidthEstimatorMap fastSuddenBandwidthDetectionEnabled]
  -[VCRateControlBandwidthEstimatorMap estimatedBandwidth]
  -[VCRateControlBandwidthEstimatorMap setEstimatedBandwidth:]
  -[VCRateControlBandwidthEstimatorMap estimatedBandwidthUncapped]
  -[VCRateControlBandwidthEstimatorMap setEstimatedBandwidthUncapped:]
  -[VCRateControlBandwidthEstimatorMap bandwidthEstimationState]
  -[VCRateControlBandwidthEstimatorMap bandwidthEstimatorWithID:isProbingSequence:isEndOfProbingSequence:]
  -[VCRateControlBandwidthEstimatorMap deregisterBandwidthEstimatorWithID:]
  -[VCRateControlBandwidthEstimatorMap estimatedBandwidthWithArrivalTime:]
  -[VCRateControlBandwidthEstimatorMap estimatedBandwidthUncappedWithArrivalTime:]


VCSpeechFrameworkWrapper : NSObject
 @property  BOOL frameworkLoaded

  // class methods
  +[VCSpeechFrameworkWrapper defaultSpeechFrameworkWrapper]

  // instance methods
  -[VCSpeechFrameworkWrapper init]
  -[VCSpeechFrameworkWrapper supportedLocales]
  -[VCSpeechFrameworkWrapper findSpeechFrameworkPath]
  -[VCSpeechFrameworkWrapper loadSpeechFramework]
  -[VCSpeechFrameworkWrapper newSFSpeechRecognizerWithLocale:]
  -[VCSpeechFrameworkWrapper newSFSpeechAudioBufferRecognitionRequest]
  -[VCSpeechFrameworkWrapper frameworkLoaded]


VCMediaNegotiationBlobV2StreamGroupPayload : PBCodable <NSCopying>
 @property  BOOL hasCodecType
 @property  unsigned int codecType
 @property  BOOL hasRtpPayload
 @property  unsigned int rtpPayload
 @property  BOOL hasPTime
 @property  unsigned int pTime
 @property  BOOL hasRtcpFlags
 @property  unsigned int rtcpFlags
 @property  BOOL hasMediaFlags
 @property  unsigned int mediaFlags
 @property  BOOL hasProfileLevelId
 @property  unsigned int profileLevelId
 @property  BOOL hasRtpSampleRate
 @property  unsigned int rtpSampleRate
 @property  BOOL hasCipherSuite
 @property  unsigned int cipherSuite
 @property  BOOL hasPackedPayload
 @property  NSData *packedPayload
 @property  BOOL hasEncoderUsage
 @property  unsigned int encoderUsage

  // class methods
  +[VCMediaNegotiationBlobV2StreamGroupPayload defaultFTXTCodecConfig]
  +[VCMediaNegotiationBlobV2StreamGroupPayload defaultDataCodecConfig]
  +[VCMediaNegotiationBlobV2StreamGroupPayload defaultMoCapConfig]
  +[VCMediaNegotiationBlobV2StreamGroupPayload defaultPayloadConfigurationsForStreamGroupID:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload defaultRTPSampleRateForStreamGroupID:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload isDefaultPayloadConfig:index:rtpSampleRate:streamGroupID:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload negotiationCodecTypeWithCodecType:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload isNegotiationCodecTypeAudio:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload codecTypeWithNegotiationCodecType:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload rtcpFlagsWithPayloadConfig:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload mediaFlagsWithPayloadConfig:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload rtcpFlagStringWithPayloadConfig:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload negotiationCipherSuiteWithCipherSuite:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload cipherSuiteWithNegotiationCipherSuite:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload negotiationPackedRtpSampleRateWithRTPSampleRate:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload rtpSampleRateWithNegotiationPackedSampleRate:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload isPTimePackable:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload negotiationPackedPTimeWithPTime:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload pTimeWithNegotiationPackedPTime:]
  +[VCMediaNegotiationBlobV2StreamGroupPayload printWithLogFile:prefix:payloadConfig:]

  // instance methods
  -[VCMediaNegotiationBlobV2StreamGroupPayload copyTo:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload dealloc]
  -[VCMediaNegotiationBlobV2StreamGroupPayload mergeFrom:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2StreamGroupPayload copyWithZone:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload readFrom:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload writeTo:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload isEqual:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload codecType]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setCodecType:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasCodecType:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasCodecType]
  -[VCMediaNegotiationBlobV2StreamGroupPayload pTime]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setPTime:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload encoderUsage]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setEncoderUsage:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload rtpPayload]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setRtpPayload:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload profileLevelId]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setProfileLevelId:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload cipherSuite]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setCipherSuite:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setNegotiationPackedPayloadWithStreamGroupPayload:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload getStreamGroupPayload:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload initWithPayloadConfig:rtpSampleRate:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload initWithPayloadConfig:index:rtpSampleRate:streamGroupID:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload newCompactPayloadWithPayloadConfig:rtpSampleRate:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload rtpSampleRateWithStreamGroupID:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload payloadConfigurationWithStreamGroupID:index:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload payloadConfigurationWithPayloadConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasRtpPayload:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasRtpPayload]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasPTime:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasPTime]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setRtcpFlags:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasRtcpFlags:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasRtcpFlags]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setMediaFlags:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasMediaFlags:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasMediaFlags]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasProfileLevelId:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasProfileLevelId]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setRtpSampleRate:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasRtpSampleRate:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasRtpSampleRate]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasCipherSuite:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasCipherSuite]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasPackedPayload]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setHasEncoderUsage:]
  -[VCMediaNegotiationBlobV2StreamGroupPayload hasEncoderUsage]
  -[VCMediaNegotiationBlobV2StreamGroupPayload rtcpFlags]
  -[VCMediaNegotiationBlobV2StreamGroupPayload mediaFlags]
  -[VCMediaNegotiationBlobV2StreamGroupPayload rtpSampleRate]
  -[VCMediaNegotiationBlobV2StreamGroupPayload packedPayload]
  -[VCMediaNegotiationBlobV2StreamGroupPayload setPackedPayload:]


VCRateControlServerBag : NSObject
 @property  int experimentVersion
 @property  NSNumber *experimentGroupIndex

  // class methods
  +[VCRateControlServerBag keysWithMode:]
  +[VCRateControlServerBag profileNumberKeyWithMode:]
  +[VCRateControlServerBag groupKeysWithMode:primaryKey:]
  +[VCRateControlServerBag prefixForMode:]

  // instance methods
  -[VCRateControlServerBag dealloc]
  -[VCRateControlServerBag initWithMode:serverBagDict:]
  -[VCRateControlServerBag containsAllSecondaryKeysWithPrimaryKey:]
  -[VCRateControlServerBag valueForType:value:]
  -[VCRateControlServerBag valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:]
  -[VCRateControlServerBag getExperimentConfig:defaultValue:]
  -[VCRateControlServerBag experimentVersion]
  -[VCRateControlServerBag experimentGroupIndex]
  -[VCRateControlServerBag getExperimentValueForKey:]


AVCAudioPowerSpectrumBin : NSObject <NSSecureCoding>
 @property  float minFrequency
 @property  float maxFrequency
 @property  float powerLevel

  // class methods
  +[AVCAudioPowerSpectrumBin supportsSecureCoding]

  // instance methods
  -[AVCAudioPowerSpectrumBin encodeWithCoder:]
  -[AVCAudioPowerSpectrumBin initWithCoder:]
  -[AVCAudioPowerSpectrumBin minFrequency]
  -[AVCAudioPowerSpectrumBin maxFrequency]
  -[AVCAudioPowerSpectrumBin powerLevel]
  -[AVCAudioPowerSpectrumBin assign:]


VCMediaNegotiationBlobV2MicrophoneSettingsU1 : PBCodable <NSCopying>
 @property  NSSet *audioPayloads
 @property  BOOL hasRtpSSRC
 @property  unsigned int rtpSSRC
 @property  BOOL hasPayloads
 @property  unsigned int payloads

  // class methods
  +[VCMediaNegotiationBlobV2MicrophoneSettingsU1 flagFromPayload:]
  +[VCMediaNegotiationBlobV2MicrophoneSettingsU1 payloadFromFlag:]

  // instance methods
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 copyTo:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 payloads]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 mergeFrom:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 copyWithZone:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 setPayloads:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 readFrom:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 writeTo:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 isEqual:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 rtpSSRC]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 setRtpSSRC:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 audioPayloads]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 printWithLogFile:prefix:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 setHasRtpSSRC:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 hasRtpSSRC]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 setHasPayloads:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 hasPayloads]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 initWithSSRC:audioPayloads:]
  -[VCMediaNegotiationBlobV2MicrophoneSettingsU1 payloadBitmapWithAudioPayloads:]


VCAudioClientManager : NSObject
  // class methods
  +[VCAudioClientManager sharedInstance]

  // instance methods
  -[VCAudioClientManager registerBlocksForService]
  -[VCAudioClientManager dealloc]
  -[VCAudioClientManager init]
  -[VCAudioClientManager getAudioClientWithProcessId:create:]
  -[VCAudioClientManager handleRegisterMutedTalkerNotificationForAudioClient:error:]
  -[VCAudioClientManager handleUnregisterMutedTalkerNotificationForAudioClient:error:]
  -[VCAudioClientManager handleMutedTalkerNotification:]
  -[VCAudioClientManager registerForMutedTalkerNotfications]
  -[VCAudioClientManager unregisterFromMutedTalkerNotfications]
  -[VCAudioClientManager handleNewClientWithXPCArguments:error:]
  -[VCAudioClientManager handleDisconnectWithXPCArguments:]
  -[VCAudioClientManager unregisterBlocksForService]
  -[VCAudioClientManager secureMicrophoneEngagedNotification]


VCTransportSessionProxy : VCTransportSession
  // instance methods
  -[VCTransportSessionProxy isIPv6]
  -[VCTransportSessionProxy start]
  -[VCTransportSessionProxy createVFD:forStreamType:]
  -[VCTransportSessionProxy networkInterfaceType]
  -[VCTransportSessionProxy networkMTU]
  -[VCTransportSessionProxy initWithTransportSessionID:]


CannedVideoCapture : VCVideoCapture <VCVideoSource>
 @property  ^{CannedVideoCapturePrivate={_opaque_pthread_mutex_t=q[56c]}Ai{_VCVideoSourceToken=(?={?=b24b8}I)}i^{OpaqueCMClock}B^{OpaqueFigThread}B{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}^{OpaqueFigThread}B{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}{_opaque_pthread_mutex_t=q[56c]}^{Frame}i} pimpl
 @property  <CannedVideoFrameFeeder> *frameFeeder
 @property  BOOL enableTxTimestampAlignmentLogs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CannedVideoCapture cannedVideoTypeForPath:]
  +[CannedVideoCapture createPixelBufferPool:withWidth:height:]

  // instance methods
  -[CannedVideoCapture stop:]
  -[CannedVideoCapture dealloc]
  -[CannedVideoCapture setOrientation:]
  -[CannedVideoCapture setFrameRate:]
  -[CannedVideoCapture pimpl]
  -[CannedVideoCapture startPreview]
  -[CannedVideoCapture isPreviewRunning]
  -[CannedVideoCapture isFrontCamera]
  -[CannedVideoCapture startCaptureWithWidth:height:frameRate:]
  -[CannedVideoCapture setWidth:height:frameRate:]
  -[CannedVideoCapture copyColorInfo:]
  -[CannedVideoCapture configureCaptureWithToken:]
  -[CannedVideoCapture getFrameRate]
  -[CannedVideoCapture frameCount:]
  -[CannedVideoCapture frameBecameAvailableCount:figBufferQueueEmptyCount:figBufferQueueErrorCount:]
  -[CannedVideoCapture cameraSupportsFormatWidth:height:]
  -[CannedVideoCapture initWithCaptureServer:width:height:frameRate:videoSourceToken:video:error:]
  -[CannedVideoCapture startThreads]
  -[CannedVideoCapture stopThreads]
  -[CannedVideoCapture frameFeeder]
  -[CannedVideoCapture setFrameFeeder:]
  -[CannedVideoCapture enableTxTimestampAlignmentLogs]


VCVideoTransmitterBase : NSObject <VCConnectionChangedHandler>
 @property  {?=qiIq} lastFrameTime
 @property  double lastKeyFrameSentTime
 @property  unsigned int lastRTPTimestamp
 @property  unsigned int lastSentAudioSampleTime
 @property  double lastSentAudioHostTime
 @property  BOOL isServerBasedBandwidthProbingEnabled
 @property  unsigned int targetBitrate
 @property  unsigned int targetBitrateChangeCounter
 @property  unsigned int encodingWidth
 @property  unsigned int encodingHeight
 @property  unsigned int targetFramerate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoTransmitterBase initWithConfig:]
  -[VCVideoTransmitterBase dealloc]
  -[VCVideoTransmitterBase targetBitrate]
  -[VCVideoTransmitterBase startVideo]
  -[VCVideoTransmitterBase stopVideo]
  -[VCVideoTransmitterBase enqueueVideoFrame:frameTime:cameraStatusBits:]
  -[VCVideoTransmitterBase generateKeyFrameWithFIRType:]
  -[VCVideoTransmitterBase setTemporaryMaximumBitrate:]
  -[VCVideoTransmitterBase setTargetBitrate:]
  -[VCVideoTransmitterBase setKeyFrameOnlyStreamID:]
  -[VCVideoTransmitterBase setStreamIDs:numOfStreamIDs:repairedStreamIDs:numOfRepairedStreamIDs:]
  -[VCVideoTransmitterBase setFECRatio:]
  -[VCVideoTransmitterBase setFECRedundancyVector:]
  -[VCVideoTransmitterBase setMediaSuggestion:]
  -[VCVideoTransmitterBase setEncodingMode:]
  -[VCVideoTransmitterBase handleThermalLevelChange:]
  -[VCVideoTransmitterBase updateWindowState:isLocal:windowRect:]
  -[VCVideoTransmitterBase handleActiveConnectionChange:]
  -[VCVideoTransmitterBase lastSentAudioSampleTime]
  -[VCVideoTransmitterBase collectChannelMetrics:interval:]
  -[VCVideoTransmitterBase setTemporalBitrateArray:]
  -[VCVideoTransmitterBase setHighestActiveQualityIndex:]
  -[VCVideoTransmitterBase setIsServerBasedBandwidthProbingEnabled:]
  -[VCVideoTransmitterBase lastFrameTime]
  -[VCVideoTransmitterBase setLastFrameTime:]
  -[VCVideoTransmitterBase lastRTPTimestamp]
  -[VCVideoTransmitterBase setLastRTPTimestamp:]
  -[VCVideoTransmitterBase lastKeyFrameSentTime]
  -[VCVideoTransmitterBase setLastKeyFrameSentTime:]
  -[VCVideoTransmitterBase setLastSentAudioSampleTime:]
  -[VCVideoTransmitterBase lastSentAudioHostTime]
  -[VCVideoTransmitterBase setLastSentAudioHostTime:]
  -[VCVideoTransmitterBase isServerBasedBandwidthProbingEnabled]
  -[VCVideoTransmitterBase targetBitrateChangeCounter]
  -[VCVideoTransmitterBase setTargetBitrateChangeCounter:]
  -[VCVideoTransmitterBase encodingWidth]
  -[VCVideoTransmitterBase encodingHeight]
  -[VCVideoTransmitterBase targetFramerate]


VCClientRelay : NSObject
 @property  BOOL stopVTPReceiveThread

  // instance methods
  -[VCClientRelay startRelay]
  -[VCClientRelay dealloc]
  -[VCClientRelay stopRelay]
  -[VCClientRelay initWithIDSSocket:]
  -[VCClientRelay setConnectionResult:]
  -[VCClientRelay setupVTPSocket]
  -[VCClientRelay relayIDSPacket]
  -[VCClientRelay relayVTPPacket]
  -[VCClientRelay stopVTPReceiveThread]


VCVideoFrameUtil : NSObject
  // class methods
  +[VCVideoFrameUtil newXPCDictionaryWithCVPixelBuffer:depthPixelBuffer:time:]
  +[VCVideoFrameUtil newCVPixelBufferFromXPCDictionary:isDepth:]
  +[VCVideoFrameUtil CMTimeFromXPCDictionary:]


VCVirtualTTYDevice : NSObject <VCMediaStreamProtocol, VCTextSender, VCAudioIOSink, VCAudioIOSource, VCAudioIODelegate>
 @property  NSObject<VCMediaStreamDelegate> *delegate
 @property  BOOL isValid
 @property  int deviceRole
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVirtualTTYDevice setIsValid:]
  -[VCVirtualTTYDevice unlock]
  -[VCVirtualTTYDevice setDelegate:]
  -[VCVirtualTTYDevice delegate]
  -[VCVirtualTTYDevice setPause:]
  -[VCVirtualTTYDevice dealloc]
  -[VCVirtualTTYDevice isValid]
  -[VCVirtualTTYDevice stop]
  -[VCVirtualTTYDevice start]
  -[VCVirtualTTYDevice lock]
  -[VCVirtualTTYDevice didUpdateBasebandCodec:]
  -[VCVirtualTTYDevice didServerDie]
  -[VCVirtualTTYDevice deviceRole]
  -[VCVirtualTTYDevice pushAudioSamples:]
  -[VCVirtualTTYDevice didSuspendAudioIO:]
  -[VCVirtualTTYDevice didResumeAudioIO:]
  -[VCVirtualTTYDevice sendCharacter:]
  -[VCVirtualTTYDevice sendText:]
  -[VCVirtualTTYDevice pullAudioSamples:]
  -[VCVirtualTTYDevice canProcessAudio]
  -[VCVirtualTTYDevice setCanProcessAudio:]
  -[VCVirtualTTYDevice setDeviceRole:]
  -[VCVirtualTTYDevice setStreamConfig:withError:]
  -[VCVirtualTTYDevice initWithMode:clientPid:]


AVCMoments : NSObject
 @property  <AVCMomentsDelegate> *delegate
 @property  long long streamToken
 @property  unsigned int capabilities
 @property  NSString *requesterID
 @property  int activeRequestCount
 @property  int pendingRequestCount

  // instance methods
  -[AVCMoments disconnect]
  -[AVCMoments connect]
  -[AVCMoments delegate]
  -[AVCMoments dealloc]
  -[AVCMoments capabilities]
  -[AVCMoments requesterID]
  -[AVCMoments streamToken]
  -[AVCMoments activeRequestCount]
  -[AVCMoments registerBlocksForNotifications]
  -[AVCMoments deregisterBlocksForNotifications]
  -[AVCMoments initWithStreamToken:requesterID:delegate:dispatchQueue:]
  -[AVCMoments didStartProcessingRequestHelperWithResult:]
  -[AVCMoments didEndProcessingRequestHelperWithResult:]
  -[AVCMoments didFinishRequestHelperWithResult:]
  -[AVCMoments newRequestWithMediaType:requesteeID:]
  -[AVCMoments newRequestWithMediaType:mode:requesteeID:]
  -[AVCMoments newDictionaryForRequest:]
  -[AVCMoments avcMomentsRequestDidStartRequest:withError:]
  -[AVCMoments avcMomentsRequestDidEndRequest:withError:]
  -[AVCMoments avcMomentsRequestDidRejectRequest:withError:]
  -[AVCMoments pendingRequestCount]


VCNetworkAgentCell : VCObject <NWNetworkAgent>
 @property  BOOL cellularAssertionActive
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[VCNetworkAgentCell sharedInstance]
  +[VCNetworkAgentCell agentType]
  +[VCNetworkAgentCell agentDomain]
  +[VCNetworkAgentCell agentFromData:]

  // instance methods
  -[VCNetworkAgentCell agentUUID]
  -[VCNetworkAgentCell isVoluntary]
  -[VCNetworkAgentCell isUserActivated]
  -[VCNetworkAgentCell dealloc]
  -[VCNetworkAgentCell isKernelActivated]
  -[VCNetworkAgentCell setAgentDescription:]
  -[VCNetworkAgentCell setAgentUUID:]
  -[VCNetworkAgentCell isActive]
  -[VCNetworkAgentCell setVoluntary:]
  -[VCNetworkAgentCell setActive:]
  -[VCNetworkAgentCell setKernelActivated:]
  -[VCNetworkAgentCell copyAgentData]
  -[VCNetworkAgentCell setUserActivated:]
  -[VCNetworkAgentCell agentDescription]
  -[VCNetworkAgentCell init]
  -[VCNetworkAgentCell queryWifiInterfaceName]
  -[VCNetworkAgentCell addCellularAssertion]
  -[VCNetworkAgentCell removeCellularAssertion]
  -[VCNetworkAgentCell cellularAssertionActive]


VCMediaNegotiationBlobVideoRuleCollection : PBCodable <NSCopying>
 @property  int transport
 @property  int operation
 @property  unsigned int formats
 @property  BOOL hasPreferredFormat
 @property  unsigned int preferredFormat
 @property  BOOL hasFormatsExt1
 @property  unsigned int formatsExt1
 @property  BOOL hasPreferredFormatExt1
 @property  unsigned int preferredFormatExt1

  // instance methods
  -[VCMediaNegotiationBlobVideoRuleCollection preferredFormat]
  -[VCMediaNegotiationBlobVideoRuleCollection transport]
  -[VCMediaNegotiationBlobVideoRuleCollection setTransport:]
  -[VCMediaNegotiationBlobVideoRuleCollection hasPreferredFormat]
  -[VCMediaNegotiationBlobVideoRuleCollection operation]
  -[VCMediaNegotiationBlobVideoRuleCollection setOperation:]
  -[VCMediaNegotiationBlobVideoRuleCollection copyTo:]
  -[VCMediaNegotiationBlobVideoRuleCollection setPreferredFormat:]
  -[VCMediaNegotiationBlobVideoRuleCollection mergeFrom:]
  -[VCMediaNegotiationBlobVideoRuleCollection formats]
  -[VCMediaNegotiationBlobVideoRuleCollection dictionaryRepresentation]
  -[VCMediaNegotiationBlobVideoRuleCollection copyWithZone:]
  -[VCMediaNegotiationBlobVideoRuleCollection readFrom:]
  -[VCMediaNegotiationBlobVideoRuleCollection writeTo:]
  -[VCMediaNegotiationBlobVideoRuleCollection isEqual:]
  -[VCMediaNegotiationBlobVideoRuleCollection setFormats:]
  -[VCMediaNegotiationBlobVideoRuleCollection operationAsString:]
  -[VCMediaNegotiationBlobVideoRuleCollection StringAsOperation:]
  -[VCMediaNegotiationBlobVideoRuleCollection transportAsString:]
  -[VCMediaNegotiationBlobVideoRuleCollection StringAsTransport:]
  -[VCMediaNegotiationBlobVideoRuleCollection setHasPreferredFormat:]
  -[VCMediaNegotiationBlobVideoRuleCollection setFormatsExt1:]
  -[VCMediaNegotiationBlobVideoRuleCollection setHasFormatsExt1:]
  -[VCMediaNegotiationBlobVideoRuleCollection hasFormatsExt1]
  -[VCMediaNegotiationBlobVideoRuleCollection setPreferredFormatExt1:]
  -[VCMediaNegotiationBlobVideoRuleCollection setHasPreferredFormatExt1:]
  -[VCMediaNegotiationBlobVideoRuleCollection hasPreferredFormatExt1]
  -[VCMediaNegotiationBlobVideoRuleCollection formatsExt1]
  -[VCMediaNegotiationBlobVideoRuleCollection preferredFormatExt1]


VCVideoRuleCollectionsScreenAirplayEmbedded : VCVideoRuleCollectionsScreenAirplay
  // class methods
  +[VCVideoRuleCollectionsScreenAirplayEmbedded sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsScreenAirplayEmbedded initWithHardwareSettings:]
  -[VCVideoRuleCollectionsScreenAirplayEmbedded initSupportedPayloads]
  -[VCVideoRuleCollectionsScreenAirplayEmbedded setupRules]
  -[VCVideoRuleCollectionsScreenAirplayEmbedded setupH264Rules]
  -[VCVideoRuleCollectionsScreenAirplayEmbedded setupHEVCRules]
  -[VCVideoRuleCollectionsScreenAirplayEmbedded tilesPerFrame:hdrMode:]
  -[VCVideoRuleCollectionsScreenAirplayEmbedded selectPreferredRule:screenSize:]


VCVideoRuleCollectionsScreen : VCVideoRuleCollections
  // class methods
  +[VCVideoRuleCollectionsScreen sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsScreen initWithHardwareSettings:]
  -[VCVideoRuleCollectionsScreen initSupportedPayloads]
  -[VCVideoRuleCollectionsScreen setupH264Rules]
  -[VCVideoRuleCollectionsScreen selectPreferredRule:screenSize:]
  -[VCVideoRuleCollectionsScreen initForMacDecodingOnly]
  -[VCVideoRuleCollectionsScreen setupMacDecodingOnlyRules]


NetworkUtils : NSObject
  // class methods
  +[NetworkUtils createAndStartListener:withParameters:]
  +[NetworkUtils setUniquePIDOnParameters:shouldRunInProcess:]
  +[NetworkUtils createNWPathEvaluator:withIPAddress:localPort:remotePort:shouldRunInProcess:useBackingSocket:]
  +[NetworkUtils newNWConnectionWithIPAddress:srcPort:]
  +[NetworkUtils socketWithIPAddress:srcPort:error:]
  +[NetworkUtils connectedSocketWithIPAddress:srcPort:error:]
  +[NetworkUtils nonConnectedSocketWithIPAddress:srcPort:error:]
  +[NetworkUtils socketWithIPAddress:srcPort:shouldConnect:error:]
  +[NetworkUtils newRTPSocketDictionary:rtpSourcePort:]
  +[NetworkUtils securityKeyMaterialWithMediaKeyIndex:]
  +[NetworkUtils newEncryptionInfoWithMediaKeyIndex:]
  +[NetworkUtils encryptionInfoForKey:]


VCVideoCapture : NSObject
 @property  NSArray *sinkArray
 @property  unsigned int sinkCount
 @property  NSObject<VCVideoCaptureServer> *captureServer

  // instance methods
  -[VCVideoCapture dealloc]
  -[VCVideoCapture initWithCaptureServer:]
  -[VCVideoCapture addSink:]
  -[VCVideoCapture removeSink:]
  -[VCVideoCapture captureServer]
  -[VCVideoCapture sinkCount]
  -[VCVideoCapture distributeVideoFrame:frameTime:preview:orientation:fromCamera:camera:switching:videoMirrored:]
  -[VCVideoCapture sinkArray]


VCTransportSessionIDSMultiLink : VCTransportSessionIDS <VCConnectionManagerDelegate, VCIDSSessionInfoSynchronizerDelegate>
 @property  VCIDSSessionInfoSynchronizer *sessionInfoSynchronizer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCTransportSessionIDSMultiLink dealloc]
  -[VCTransportSessionIDSMultiLink setWiFiAssist:]
  -[VCTransportSessionIDSMultiLink startActiveProbingWithOptions:]
  -[VCTransportSessionIDSMultiLink stopActiveProbingWithOptions:]
  -[VCTransportSessionIDSMultiLink flushLinkProbingStatusWithOptions:]
  -[VCTransportSessionIDSMultiLink onStart]
  -[VCTransportSessionIDSMultiLink queryProbingResultsWithOptions:]
  -[VCTransportSessionIDSMultiLink setOneToOneModeEnabled:isInitiator:]
  -[VCTransportSessionIDSMultiLink initWithCallID:reportingAgent:]
  -[VCTransportSessionIDSMultiLink onStop]
  -[VCTransportSessionIDSMultiLink handleLinkConnectedWithInfo:]
  -[VCTransportSessionIDSMultiLink handleLinkDisconnectedWithInfo:]
  -[VCTransportSessionIDSMultiLink handleSessionInfoResponse:]
  -[VCTransportSessionIDSMultiLink handleProbingResponse:]
  -[VCTransportSessionIDSMultiLink setQuickRelayServerProvider:]
  -[VCTransportSessionIDSMultiLink primaryConnectionChanged:oldPrimaryConnection:activeConnection:]
  -[VCTransportSessionIDSMultiLink connectionCallback:isInitialConnection:]
  -[VCTransportSessionIDSMultiLink didEnableDuplication:activeConnection:]
  -[VCTransportSessionIDSMultiLink didUpdatePreferredInterfaceForDuplication:notifyPeer:enableDuplication:isMediaUnrecoverableSignal:]
  -[VCTransportSessionIDSMultiLink didMediaQualityDegrade:]
  -[VCTransportSessionIDSMultiLink discardConnection:]
  -[VCTransportSessionIDSMultiLink updateParticipantGenerationCounter:]
  -[VCTransportSessionIDSMultiLink resetParticipantGenerationCounter]
  -[VCTransportSessionIDSMultiLink optOutAllStreamsForConnection:]
  -[VCTransportSessionIDSMultiLink optIntoExistingSubscribedStreamsForConnection:]
  -[VCTransportSessionIDSMultiLink setRemoteDeviceVersionIDS]
  -[VCTransportSessionIDSMultiLink logSignalStrength]
  -[VCTransportSessionIDSMultiLink resetActiveConnection]
  -[VCTransportSessionIDSMultiLink VCIDSSessionInfoSynchronizer:sendVCIDSSessionInfoRequest:]
  -[VCTransportSessionIDSMultiLink initWithCallID:requireEncryptionInfo:reportingAgent:notificationQueue:isMultiwaySession:]
  -[VCTransportSessionIDSMultiLink initWithCallID:requireEncryptionInfo:reportingAgent:notificationQueue:isMultiwaySession:dataPath:]
  -[VCTransportSessionIDSMultiLink setDefaultLink:]
  -[VCTransportSessionIDSMultiLink sessionInfoSynchronizer]


VCMovieWriter : NSObject <VCMovieWriterProtocol>
 @property  unsigned int startRTPTimeStamp
 @property  unsigned int endRTPTimeStamp
 @property  unsigned char writerMode
 @property  NSURL *outputURL

  // instance methods
  -[VCMovieWriter dealloc]
  -[VCMovieWriter setOutputURL:]
  -[VCMovieWriter outputURL]
  -[VCMovieWriter setStillImageTime:]
  -[VCMovieWriter initWithOutputURL:transactionID:videoCodec:]
  -[VCMovieWriter appendVideoSampleBuffer:cameraStatus:mediaType:]
  -[VCMovieWriter appendAudioSampleBuffer:mediaType:]
  -[VCMovieWriter finishWritingWithHandler:]
  -[VCMovieWriter shouldAppendSampleBuffer:RTPtimeStamp:mediaType:]
  -[VCMovieWriter shouldFinishWritingSampleBuffer:RTPtimeStamp:mediaType:]
  -[VCMovieWriter setEndRTPTimestampWithTimestamp:]
  -[VCMovieWriter setupWriterWithMode:]
  -[VCMovieWriter startRTPTimeStamp]
  -[VCMovieWriter setStartRTPTimeStamp:]
  -[VCMovieWriter endRTPTimeStamp]
  -[VCMovieWriter setEndRTPTimeStamp:]
  -[VCMovieWriter writerMode]
  -[VCMovieWriter setupContectRect:withCaptureHeight:]
  -[VCMovieWriter setupAssetWriterWithWidth:height:transactionID:]
  -[VCMovieWriter setupInput:queue:dispatchGroup:lastPresentationTime:]
  -[VCMovieWriter processSampleQueue:input:lastPresentationTime:]
  -[VCMovieWriter appendMetaData]
  -[VCMovieWriter startWritingAtTime:]
  -[VCMovieWriter setupInputs]


VCAudioStreamTransport : VCMediaStreamTransport <WRMClientDelegate>
 @property  ^v realtimeContext

  // instance methods
  -[VCAudioStreamTransport dealloc]
  -[VCAudioStreamTransport onStart]
  -[VCAudioStreamTransport realtimeContext]
  -[VCAudioStreamTransport onStop]
  -[VCAudioStreamTransport setPreWarmState:]
  -[VCAudioStreamTransport setWRMNotification:]
  -[VCAudioStreamTransport setWRMMetricConfig:]
  -[VCAudioStreamTransport setWRMCoexMetrics:]
  -[VCAudioStreamTransport reportWRMMetrics:]
  -[VCAudioStreamTransport initWithHandle:callId:localSSRC:]
  -[VCAudioStreamTransport initWithHandle:callId:localSSRC:enableNetworkMonitor:]
  -[VCAudioStreamTransport setWRMCallId:]
  -[VCAudioStreamTransport startWRM]
  -[VCAudioStreamTransport stopWRM]


VCAudioPowerSpectrumBin : NSObject
 @property  {_VCRange=ff} frequencyRange
 @property  float powerLevel

  // instance methods
  -[VCAudioPowerSpectrumBin setPowerLevel:]
  -[VCAudioPowerSpectrumBin powerLevel]
  -[VCAudioPowerSpectrumBin frequencyRange]
  -[VCAudioPowerSpectrumBin initWithFrequencyRange:]
  -[VCAudioPowerSpectrumBin setFrequencyRange:]


VCSystemAudioCapture : VCObject
  // class methods
  +[VCSystemAudioCapture isValidConfiguration:]
  +[VCSystemAudioCapture newAudioTapWithProcessID:audioFormat:]
  +[VCSystemAudioCapture audioTapSessionTypeForInternalSessionType:]
  +[VCSystemAudioCapture newAudioTapWithSessionType:audioFormat:]
  +[VCSystemAudioCapture newAudioTapWithCaptureContext:audioFormat:]

  // instance methods
  -[VCSystemAudioCapture dealloc]
  -[VCSystemAudioCapture stop]
  -[VCSystemAudioCapture initWithConfiguration:]
  -[VCSystemAudioCapture start]
  -[VCSystemAudioCapture newAudioTapWithAudioStreamBasicDescription:]
  -[VCSystemAudioCapture setupCannedAudioInjection]


VCAudioPayload : NSObject
 @property  VCAudioPayloadConfig *config
 @property  unsigned int bitrate
 @property  int bandwidth

  // instance methods
  -[VCAudioPayload initWithConfig:]
  -[VCAudioPayload config]
  -[VCAudioPayload dealloc]
  -[VCAudioPayload bitrate]
  -[VCAudioPayload bandwidth]
  -[VCAudioPayload setBitrate:]
  -[VCAudioPayload setBandwidth:]
  -[VCAudioPayload setCurrentDTXEnable:]
  -[VCAudioPayload isDTXEmptyPacket:]
  -[VCAudioPayload createEncoderWithInputFormat:]
  -[VCAudioPayload encodeAudio:numInputSamples:outputBytes:numOutputBytes:]
  -[VCAudioPayload resetEncoder]
  -[VCAudioPayload resetEncoderWithSampleBuffer:numBytes:]
  -[VCAudioPayload setCodecModeRequest:]
  -[VCAudioPayload getMagicCookie:withLength:]


VCVideoStream : VCMediaStream <VCVideoReceiverDelegate, VCMediaStreamSyncDestination, VCVideoSink, VCVideoCaptureClient, VCVideoCaptureConverterDelegate, AVCRateControllerDelegate, VCRedundancyControllerDelegate, VCStreamSychronizationDelegate>
 @property  unsigned int networkMTU
 @property  VCVideoReceiverBase *videoReceiver
 @property  VCVideoTransmitterBase *videoTransmitter
 @property  unsigned int lastSentAudioSampleTime
 @property  double lastSentAudioHostTime
 @property  unsigned int lastDisplayedFrameRTPTimestamp
 @property  BOOL isServerBasedBandwidthProbingEnabled
 @property  NSNumber *targetStreamID
 @property  NSNumber *sendingStreamID
 @property  <VCVideoReceiverFeedbackDelegate> *videoReceiverFeedbackDelegate
 @property  BOOL isCompoundStreamIDsIncreased
 @property  BOOL shouldEnableFaceZoom
 @property  BOOL didReceiveFirstFrame
 @property  double fecRatio
 @property  unsigned int screenDisplayID
 @property  unsigned int customWidth
 @property  unsigned int customHeight
 @property  unsigned int targetMediaBitrate
 @property  unsigned int targetBitrateChangeCounter
 @property  BOOL shouldEnableMLEnhance
 @property  BOOL isTemporalScalingEnabled
 @property  <VCSessionParticipantLocalVideoStreamDelegate> *videoStreamDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  float synchronizationTimeOffset

  // class methods
  +[VCVideoStream capabilities]
  +[VCVideoStream supportedVideoPayloads]
  +[VCVideoStream terminateProcess:terminateSource:agent:]
  +[VCVideoStream reportingClientTypeForStreamType:]
  +[VCVideoStream newFeatureListStringsWithConfiguration:]
  +[VCVideoStream shouldUseRandomRTPTimestampWithType:]
  +[VCVideoStream isLowLatencyStreamType:]

  // instance methods
  -[VCVideoStream dealloc]
  -[VCVideoStream init]
  -[VCVideoStream setCustomWidth:]
  -[VCVideoStream setCustomHeight:]
  -[VCVideoStream requestLastDecodedFrame]
  -[VCVideoStream supportedPayloads]
  -[VCVideoStream onVideoFrame:frameTime:attribute:]
  -[VCVideoStream networkMTU]
  -[VCVideoStream onCallIDChanged]
  -[VCVideoStream onConfigureStreamWithConfiguration:error:]
  -[VCVideoStream onStartWithCompletionHandler:]
  -[VCVideoStream onStopWithCompletionHandler:]
  -[VCVideoStream onPauseWithCompletionHandler:]
  -[VCVideoStream onResumeWithCompletionHandler:]
  -[VCVideoStream onSendRTCPPacket]
  -[VCVideoStream onRTPTimeout]
  -[VCVideoStream onRTCPTimeout]
  -[VCVideoStream lastReceivedRTPPacketTime]
  -[VCVideoStream lastReceivedRTCPPacketTime]
  -[VCVideoStream rtcpHeartbeatLeeway]
  -[VCVideoStream gatherRealtimeStats:]
  -[VCVideoStream generateKeyFrameWithFIRType:]
  -[VCVideoStream setFECRedundancyVector:]
  -[VCVideoStream setMediaSuggestion:]
  -[VCVideoStream setEncodingMode:]
  -[VCVideoStream updateWindowState:isLocal:windowRect:]
  -[VCVideoStream reportingVideoStreamEvent:]
  -[VCVideoStream handleActiveConnectionChange:]
  -[VCVideoStream cleanupBeforeReconfigure:]
  -[VCVideoStream shouldReportNetworkInterfaceType]
  -[VCVideoStream redundancyController:redundancyPercentageDidChange:]
  -[VCVideoStream setStreamIDs:repairStreamIDs:]
  -[VCVideoStream setTargetStreamID:]
  -[VCVideoStream getReportingClientType]
  -[VCVideoStream getReportingClientName]
  -[VCVideoStream collectRxChannelMetrics:interval:]
  -[VCVideoStream collectRxChannelMetrics:]
  -[VCVideoStream collectTxChannelMetrics:]
  -[VCVideoStream targetStreamID]
  -[VCVideoStream lastSentAudioSampleTime]
  -[VCVideoStream startSynchronization:]
  -[VCVideoStream stopSynchronization]
  -[VCVideoStream updateSourcePlayoutTimestamp:]
  -[VCVideoStream lastDisplayedFrameRTPTimestamp]
  -[VCVideoStream setVideoReceiverFeedbackDelegate:]
  -[VCVideoStream setVideoStreamDelegate:]
  -[VCVideoStream redundancyController:redundancyIntervalDidChange:]
  -[VCVideoStream setShouldEnableFaceZoom:]
  -[VCVideoStream synchronizationTimeOffset]
  -[VCVideoStream setSynchronizationTimeOffset:]
  -[VCVideoStream vcVideoReceiver:didSwitchFromStreamID:toStreamID:]
  -[VCVideoStream setShouldEnableMLEnhance:]
  -[VCVideoStream shouldEnableFaceZoom]
  -[VCVideoStream shouldEnableMLEnhance]
  -[VCVideoStream thermalLevelDidChange:]
  -[VCVideoStream isFECGeneratorEnabled]
  -[VCVideoStream rateController:targetBitrateDidChange:rateChangeCounter:]
  -[VCVideoStream clientCaptureRule]
  -[VCVideoStream avConferencePreviewError:]
  -[VCVideoStream avConferenceScreenCaptureError:]
  -[VCVideoStream cameraAvailabilityDidChange:]
  -[VCVideoStream sourceFrameRateDidChange:]
  -[VCVideoStream setIsServerBasedBandwidthProbingEnabled:]
  -[VCVideoStream getClientSpecificUserInfo]
  -[VCVideoStream deregisterForVideoCapture]
  -[VCVideoStream initWithTransportSessionID:idsParticipantID:ssrc:streamToken:]
  -[VCVideoStream vcVideoReceiver:didReceiveSampleBuffer:isFirstFrame:]
  -[VCVideoStream customWidth]
  -[VCVideoStream customHeight]
  -[VCVideoStream screenDisplayID]
  -[VCVideoStream setScreenDisplayID:]
  -[VCVideoStream setLastSentAudioSampleTime:]
  -[VCVideoStream lastSentAudioHostTime]
  -[VCVideoStream setLastSentAudioHostTime:]
  -[VCVideoStream isServerBasedBandwidthProbingEnabled]
  -[VCVideoStream targetBitrateChangeCounter]
  -[VCVideoStream setTargetBitrateChangeCounter:]
  -[VCVideoStream videoReceiver:didReceiveRemoteFrame:atTime:remoteVideoAttributes:remoteScreenAttributes:isFirstFrame:]
  -[VCVideoStream vcVideoReceiver:requestKeyFrameGenerationWithStreamID:firType:]
  -[VCVideoStream vcVideoReceiverRequestKeyFrame:rtcpPSFBType:]
  -[VCVideoStream vcVideoReceiver:downlinkQualityDidChange:]
  -[VCVideoStream vcVideoReceiver:receivedTMMBR:]
  -[VCVideoStream converter:didConvertFrame:frameTime:cameraStatusBits:]
  -[VCVideoStream overrideConfigWithDefaults]
  -[VCVideoStream newVideoTransmitterConfigWithVideoStreamConfig:]
  -[VCVideoStream initVideoTransmitter]
  -[VCVideoStream destroyVideoTransmitter]
  -[VCVideoStream isScreenConfig:]
  -[VCVideoStream setupMultiwayVideoReceiverTemporalScalingConfig:forTransportStream:]
  -[VCVideoStream setupMultiwayVideoReceiverStreamSwitchInfo:forTransportStream:]
  -[VCVideoStream setupMultiwayVideoReceiverConfig:forTransportStream:]
  -[VCVideoStream setupFeatureListStringsForReceiverConfig:streamConfig:]
  -[VCVideoStream cleaunpReceiverConfig:]
  -[VCVideoStream videoStreamReceiverConfigWithDumpID:reportingAgent:]
  -[VCVideoStream videoReceiverConfigWithVideoStreamConfig:]
  -[VCVideoStream readServerPacketRetransmissionsForVideoStoreBagConfig:]
  -[VCVideoStream setupVideoReceiver:withTransmitterHandle:]
  -[VCVideoStream useUEPForVideoConfig:]
  -[VCVideoStream updateVideoReceiver:]
  -[VCVideoStream destroyVideoReceiver]
  -[VCVideoStream destroyVideoModules]
  -[VCVideoStream setupCompoundStreamIDsWithStreamIDs:]
  -[VCVideoStream startVCRCWithStreamConfig:]
  -[VCVideoStream stopVCRC]
  -[VCVideoStream handleNWConnectionNotification:]
  -[VCVideoStream handleNWConnectionPacketEvent:eventType:]
  -[VCVideoStream setupColorInfo]
  -[VCVideoStream setRTPPayloads:numPayloads:withError:]
  -[VCVideoStream setupVideoStream]
  -[VCVideoStream updateVideoConfig:]
  -[VCVideoStream submitStatisticsCollectorVideoStallUpdateWithTime:]
  -[VCVideoStream submitStatisticsCollectorVideoStallUpdateWithType:currentTime:stallDuration:idsParticipantID:]
  -[VCVideoStream resetRemoteMediaStalled]
  -[VCVideoStream setFecRatio:]
  -[VCVideoStream cacheRemoteVideoFrame:]
  -[VCVideoStream sendLastRemoteVideoFrame:]
  -[VCVideoStream validateVideoStreamConfigurations:]
  -[VCVideoStream isLowLatencyStreamType]
  -[VCVideoStream validateStreamConfiguration:error:]
  -[VCVideoStream updateStreamConfigForLowLatencyStreamTypes:]
  -[VCVideoStream getTransmitMediaControllerWithStreamConfig:]
  -[VCVideoStream getTransmitStatsCollectorWithStreamConfig:]
  -[VCVideoStream getReceiveStatsCollectorWithStreamConfig:]
  -[VCVideoStream deregisterCurrentStreamInputCaptureSource]
  -[VCVideoStream configureStreamInputCaptureSourceWithStreamInputID:frameRate:]
  -[VCVideoStream maxFramerateFromStreamConfigs:]
  -[VCVideoStream configureNetworkSampleRateScaleForStream:transport:]
  -[VCVideoStream operatingModeForVideoStreamType:]
  -[VCVideoStream registerForCameraCaptureWithConfig:]
  -[VCVideoStream registerForVideoCapture]
  -[VCVideoStream collectImageQueuePerformanceMetrics:]
  -[VCVideoStream setupReportingAgent]
  -[VCVideoStream isTransportIPv6]
  -[VCVideoStream getMaxTemporalBitrateForStreamIDs:]
  -[VCVideoStream setTransmitterStreamIDs:repairStreamIDs:]
  -[VCVideoStream setPeerSubscribedStreamIDs:]
  -[VCVideoStream setTargetMediaBitrate:]
  -[VCVideoStream targetMediaBitrate]
  -[VCVideoStream handleVTPSendFailedWithData:]
  -[VCVideoStream reportVideoStreamType]
  -[VCVideoStream collectVideoConfigMetrics:]
  -[VCVideoStream collectVideoStreamStartMetrics:]
  -[VCVideoStream reportingVideoStreamEvent:newVideoAttributes:]
  -[VCVideoStream reportingVideoStreamEvent:newVideoAttributes:currentStreamID:]
  -[VCVideoStream reportingAlgosVideoStreamEvent:]
  -[VCVideoStream getVideoReceiverFeedbackDelegate]
  -[VCVideoStream sendingStreamID]
  -[VCVideoStream isCompoundStreamIDsIncreased]
  -[VCVideoStream didReceiveFirstFrame]
  -[VCVideoStream setDidReceiveFirstFrame:]
  -[VCVideoStream fecRatio]
  -[VCVideoStream videoReceiver]
  -[VCVideoStream videoTransmitter]
  -[VCVideoStream isTemporalScalingEnabled]
  -[VCVideoStream videoStreamDelegate]


VCMediaNegotiationBlobV2CodecFeatures : PBCodable <NSCopying>
 @property  BOOL allowAudioRecording
 @property  BOOL hasAudioFeatures
 @property  unsigned int audioFeatures
 @property  BOOL hasVideoFeatures
 @property  NSData *videoFeatures

  // instance methods
  -[VCMediaNegotiationBlobV2CodecFeatures copyTo:]
  -[VCMediaNegotiationBlobV2CodecFeatures dealloc]
  -[VCMediaNegotiationBlobV2CodecFeatures mergeFrom:]
  -[VCMediaNegotiationBlobV2CodecFeatures dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2CodecFeatures copyWithZone:]
  -[VCMediaNegotiationBlobV2CodecFeatures readFrom:]
  -[VCMediaNegotiationBlobV2CodecFeatures writeTo:]
  -[VCMediaNegotiationBlobV2CodecFeatures isEqual:]
  -[VCMediaNegotiationBlobV2CodecFeatures allowAudioRecording]
  -[VCMediaNegotiationBlobV2CodecFeatures printWithLogFile:prefix:]
  -[VCMediaNegotiationBlobV2CodecFeatures audioFeatures]
  -[VCMediaNegotiationBlobV2CodecFeatures setAudioFeatures:]
  -[VCMediaNegotiationBlobV2CodecFeatures setHasAudioFeatures:]
  -[VCMediaNegotiationBlobV2CodecFeatures hasAudioFeatures]
  -[VCMediaNegotiationBlobV2CodecFeatures hasVideoFeatures]
  -[VCMediaNegotiationBlobV2CodecFeatures videoFeatures]
  -[VCMediaNegotiationBlobV2CodecFeatures setVideoFeatures:]
  -[VCMediaNegotiationBlobV2CodecFeatures initWithAllowAudioRecording:videoFeatures:]


VCMediaStreamGroup : VCObject <VCMediaStreamDelegate, VCMediaCaptureController, VCSecurityEventHandler, VCMediaStreamNotification>
 @property  unsigned int streamGroupID
 @property  unsigned int syncGroupID
 @property  long long streamToken
 @property  unsigned int mediaType
 @property  unsigned int mediaSubtype
 @property  unsigned int state
 @property  <VCMediaCaptureController> *captureController
 @property  BOOL encryptionInfoReceived
 @property  NSArray *mediaStreamInfoArray
 @property  NSDictionary *streamIDToMediaStreamMap
 @property  BOOL hasRepairedStreams
 @property  AVCStatisticsCollector *statisticsCollector
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCMediaStreamGroup initWithConfig:]
  -[VCMediaStreamGroup setMediaType:]
  -[VCMediaStreamGroup mediaType]
  -[VCMediaStreamGroup stopCapture]
  -[VCMediaStreamGroup state]
  -[VCMediaStreamGroup pause]
  -[VCMediaStreamGroup captureController]
  -[VCMediaStreamGroup dealloc]
  -[VCMediaStreamGroup resume]
  -[VCMediaStreamGroup stop]
  -[VCMediaStreamGroup start]
  -[VCMediaStreamGroup startCapture]
  -[VCMediaStreamGroup mediaSubtype]
  -[VCMediaStreamGroup streamToken]
  -[VCMediaStreamGroup didStart]
  -[VCMediaStreamGroup didStop]
  -[VCMediaStreamGroup statisticsCollector]
  -[VCMediaStreamGroup setStatisticsCollector:]
  -[VCMediaStreamGroup configureStreams]
  -[VCMediaStreamGroup mediaStream:didReceiveNewMediaKeyIndex:]
  -[VCMediaStreamGroup collectAndLogChannelMetrics:]
  -[VCMediaStreamGroup willStart]
  -[VCMediaStreamGroup addSyncDestination:]
  -[VCMediaStreamGroup removeSyncDestination:]
  -[VCMediaStreamGroup handleActiveConnectionChange:]
  -[VCMediaStreamGroup vcMediaStreamServerDidDie:]
  -[VCMediaStreamGroup setMediaSubtype:]
  -[VCMediaStreamGroup syncGroupID]
  -[VCMediaStreamGroup setSyncGroupID:]
  -[VCMediaStreamGroup streamGroupID]
  -[VCMediaStreamGroup setCaptureController:]
  -[VCMediaStreamGroup mediaStreamInfoArray]
  -[VCMediaStreamGroup didPause:]
  -[VCMediaStreamGroup didReceiveRTCPPackets:]
  -[VCMediaStreamGroup handleEncryptionInfoChange:]
  -[VCMediaStreamGroup resetDecryptionTimeout]
  -[VCMediaStreamGroup didEncryptionKeyRollTimeout]
  -[VCMediaStreamGroup setEncryptionInfoReceived:]
  -[VCMediaStreamGroup containsStreamWithSSRC:]
  -[VCMediaStreamGroup encryptionInfoReceived]
  -[VCMediaStreamGroup willStop]
  -[VCMediaStreamGroup setupStreamsWithConfig:]
  -[VCMediaStreamGroup callDelegateWithBlock:]
  -[VCMediaStreamGroup containsStreamWithIDSStreamID:]
  -[VCMediaStreamGroup setPerfTimersWithMediaKeyIndex:perfTimerIndexToStart:]
  -[VCMediaStreamGroup startMediaStreams]
  -[VCMediaStreamGroup stopMediaStreams]
  -[VCMediaStreamGroup shouldSetPause:onStream:]
  -[VCMediaStreamGroup setPauseOnMediaStreams:]
  -[VCMediaStreamGroup pauseMediaStreams]
  -[VCMediaStreamGroup resumeMediaStreams]
  -[VCMediaStreamGroup registerMediaStreamNotificationDelegate]
  -[VCMediaStreamGroup unregisterMediaStreamNotificationDelegate]
  -[VCMediaStreamGroup streamIDToMediaStreamMap]
  -[VCMediaStreamGroup hasRepairedStreams]


VCAudioTier : NSObject
 @property  unsigned int networkBitrate
 @property  unsigned int audioCodecBitrate
 @property  unsigned int packetsPerBundle
 @property  unsigned int redNumPayloads
 @property  unsigned int redMaxDelay20ms
 @property  VCAudioPayloadConfig *payloadConfig

  // class methods
  +[VCAudioTier newAudioTierForPayloadConfig:bundlingAppliedByCodec:audioCodecBitrate:packetsPerBundle:redNumPayloads:headerSize:]
  +[VCAudioTier bundlingAppliedByCodecForPayload:mode:]

  // instance methods
  -[VCAudioTier isEqualTo:]
  -[VCAudioTier dictionary]
  -[VCAudioTier packetsPerBundle]
  -[VCAudioTier initWithNetworkBitrate:bundlingAppliedByCodec:audioCodecBitrate:packetsPerBundle:redNumPayloads:payloadConfig:]
  -[VCAudioTier networkBitrate]
  -[VCAudioTier audioCodecBitrate]
  -[VCAudioTier redNumPayloads]
  -[VCAudioTier redMaxDelay20ms]
  -[VCAudioTier payloadConfig]


VCSessionMessaging : NSObject <VCControlChannelDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCSessionMessaging dealloc]
  -[VCSessionMessaging controlChannel:receivedMessage:transactionID:fromParticipant:]
  -[VCSessionMessaging controlChannel:topic:payload:transactionID:fromParticipant:]
  -[VCSessionMessaging controlChannel:sendReliableMessage:didSucceed:toParticipant:]
  -[VCSessionMessaging controlChannel:clearTransactionCacheForParticipant:]
  -[VCSessionMessaging initWithControlChannel:remoteVersion:]
  -[VCSessionMessaging addParticipant:controlChannelProtocolVersion:]
  -[VCSessionMessaging startMessaging]
  -[VCSessionMessaging stopMessaging]
  -[VCSessionMessaging addTopic:associatedStrings:allowConcurrent:receiveHandler:]
  -[VCSessionMessaging addTopic:associatedStrings:allowConcurrent:sendMessageDictionaryCompletionHandler:receiveMessageDictionaryHandler:]
  -[VCSessionMessaging addTopic:associatedStrings:allowConcurrent:requireReliable:sendMessageDictionaryCompletionHandler:receiveMessageDictionaryHandler:]
  -[VCSessionMessaging addTopic:associatedStrings:allowConcurrent:sendCompletionHandler:receiveHandler:]
  -[VCSessionMessaging sendMessage:withTopic:]
  -[VCSessionMessaging sendMessage:withTopic:participantID:]
  -[VCSessionMessaging sendMessageDictionary:withTopic:participantID:]
  -[VCSessionMessaging sendReliableMessage:withTopic:participantID:completion:]
  -[VCSessionMessaging newPackedMessageFromDictionary:]
  -[VCSessionMessaging newDictionaryFromUnpackedMessage:]
  -[VCSessionMessaging newPackedMessageFromMomentsDictionary:]
  -[VCSessionMessaging newDictionaryFromUnpackedMomentsMessage:]
  -[VCSessionMessaging newPackedMessageFromDictionaryV2:]
  -[VCSessionMessaging newDictionaryFromUnpackedMessageV2:]
  -[VCSessionMessaging newPackedMessageFromDictionary:forTopic:controlChannelVersion:]
  -[VCSessionMessaging newDictionaryFromUnpackedMessage:forTopic:controlChannelVersion:]
  -[VCSessionMessaging searchMatchingTopic:payload:transactionID:fromParticipant:]
  -[VCSessionMessaging allocMessageFromPayload:forTopic:participantID:]


VCNetworkAddress : NSObject
 @property  NSString *ip
 @property  unsigned short port
 @property  unsigned short ipVersion
 @property  NSString *interfaceName

  // instance methods
  -[VCNetworkAddress port]
  -[VCNetworkAddress setPort:]
  -[VCNetworkAddress interfaceName]
  -[VCNetworkAddress dealloc]
  -[VCNetworkAddress isIPv6]
  -[VCNetworkAddress setInterfaceName:]
  -[VCNetworkAddress copyWithZone:]
  -[VCNetworkAddress isEqual:]
  -[VCNetworkAddress ipVersion]
  -[VCNetworkAddress setIpVersion:]
  -[VCNetworkAddress setIp:]
  -[VCNetworkAddress ip]
  -[VCNetworkAddress getSockaddrStorage:size:]


VCMediaStreamMultiwayConfig : NSObject
 @property  NSString *sessionId
 @property  NSString *participantId
 @property  unsigned long remoteIDSParticipantID
 @property  unsigned int ssrc
 @property  unsigned int maxNetworkBitrate
 @property  BOOL hasMaxNetworkBitrate
 @property  unsigned int maxMediaBitrate
 @property  BOOL hasMaxMediaBitrate
 @property  float maxPacketsPerSecond
 @property  BOOL hasMaxPacketsPerSecond
 @property  unsigned short idsStreamID
 @property  BOOL hasIdsStreamID
 @property  unsigned int qualityIndex
 @property  BOOL hasQualityIndex
 @property  unsigned int maxIDSStreamIdCount
 @property  BOOL hasMaxIDSStreamIdCount
 @property  unsigned short repairedStreamID
 @property  BOOL hasRepairedStreamID
 @property  unsigned int repairedMaxNetworkBitrate
 @property  BOOL hasRepairedMaxNetworkBitrate
 @property  BOOL startOnDemand
 @property  NSArray *streamIds
 @property  BOOL isOneToOne
 @property  BOOL shouldIgnoreRTPHeaderExtensions
 @property  unsigned int streamGroupID
 @property  unsigned int negotiationProtocolMask

  // instance methods
  -[VCMediaStreamMultiwayConfig setSessionId:]
  -[VCMediaStreamMultiwayConfig sessionId]
  -[VCMediaStreamMultiwayConfig dealloc]
  -[VCMediaStreamMultiwayConfig participantId]
  -[VCMediaStreamMultiwayConfig setParticipantId:]
  -[VCMediaStreamMultiwayConfig streamIds]
  -[VCMediaStreamMultiwayConfig setMaxNetworkBitrate:]
  -[VCMediaStreamMultiwayConfig hasMaxNetworkBitrate]
  -[VCMediaStreamMultiwayConfig setMaxMediaBitrate:]
  -[VCMediaStreamMultiwayConfig hasMaxMediaBitrate]
  -[VCMediaStreamMultiwayConfig setMaxPacketsPerSecond:]
  -[VCMediaStreamMultiwayConfig hasMaxPacketsPerSecond]
  -[VCMediaStreamMultiwayConfig setRepairedStreamID:]
  -[VCMediaStreamMultiwayConfig hasRepairedStreamID]
  -[VCMediaStreamMultiwayConfig setRepairedMaxNetworkBitrate:]
  -[VCMediaStreamMultiwayConfig hasRepairedMaxNetworkBitrate]
  -[VCMediaStreamMultiwayConfig ssrc]
  -[VCMediaStreamMultiwayConfig setSsrc:]
  -[VCMediaStreamMultiwayConfig maxNetworkBitrate]
  -[VCMediaStreamMultiwayConfig qualityIndex]
  -[VCMediaStreamMultiwayConfig setQualityIndex:]
  -[VCMediaStreamMultiwayConfig maxMediaBitrate]
  -[VCMediaStreamMultiwayConfig maxPacketsPerSecond]
  -[VCMediaStreamMultiwayConfig repairedStreamID]
  -[VCMediaStreamMultiwayConfig repairedMaxNetworkBitrate]
  -[VCMediaStreamMultiwayConfig streamGroupID]
  -[VCMediaStreamMultiwayConfig setStreamGroupID:]
  -[VCMediaStreamMultiwayConfig startOnDemand]
  -[VCMediaStreamMultiwayConfig remoteIDSParticipantID]
  -[VCMediaStreamMultiwayConfig setRemoteIDSParticipantID:]
  -[VCMediaStreamMultiwayConfig setIdsStreamID:]
  -[VCMediaStreamMultiwayConfig hasIdsStreamID]
  -[VCMediaStreamMultiwayConfig hasQualityIndex]
  -[VCMediaStreamMultiwayConfig setMaxIDSStreamIdCount:]
  -[VCMediaStreamMultiwayConfig hasMaxIDSStreamIdCount]
  -[VCMediaStreamMultiwayConfig idsStreamID]
  -[VCMediaStreamMultiwayConfig maxIDSStreamIdCount]
  -[VCMediaStreamMultiwayConfig setStartOnDemand:]
  -[VCMediaStreamMultiwayConfig isOneToOne]
  -[VCMediaStreamMultiwayConfig setIsOneToOne:]
  -[VCMediaStreamMultiwayConfig shouldIgnoreRTPHeaderExtensions]
  -[VCMediaStreamMultiwayConfig setShouldIgnoreRTPHeaderExtensions:]
  -[VCMediaStreamMultiwayConfig negotiationProtocolMask]
  -[VCMediaStreamMultiwayConfig setNegotiationProtocolMask:]


VCMediaStreamRateControlConfig : NSObject
 @property  AVCStatisticsCollector *statisticsCollector
 @property  AVCBasebandCongestionDetector *basebandCongestionDetector
 @property  AVCRateControlFeedbackController *feedbackController
 @property  BOOL shouldCreateMediaControlInfoGenerator
 @property  BOOL shouldRegisterMediaControlInfoGeneratorCallbacks
 @property  unsigned char mediaControlInfoVersion
 @property  unsigned int mediaControlInfoGeneratorType
 @property  ^v mediaControlInfoGenerator
 @property  unsigned int mediaControlInfoGeneratorOptions
 @property  VCRateControlMediaController *mediaController
 @property  ^{tagHANDLE=i} mediaQueue
 @property  double mediaQueueThrottlingInterval
 @property  ^{tagVCMediaQueue=} vcMediaQueue

  // instance methods
  -[VCMediaStreamRateControlConfig dealloc]
  -[VCMediaStreamRateControlConfig init]
  -[VCMediaStreamRateControlConfig mediaController]
  -[VCMediaStreamRateControlConfig mediaQueue]
  -[VCMediaStreamRateControlConfig feedbackController]
  -[VCMediaStreamRateControlConfig setFeedbackController:]
  -[VCMediaStreamRateControlConfig basebandCongestionDetector]
  -[VCMediaStreamRateControlConfig setBasebandCongestionDetector:]
  -[VCMediaStreamRateControlConfig statisticsCollector]
  -[VCMediaStreamRateControlConfig setStatisticsCollector:]
  -[VCMediaStreamRateControlConfig setMediaController:]
  -[VCMediaStreamRateControlConfig mediaControlInfoVersion]
  -[VCMediaStreamRateControlConfig setMediaControlInfoVersion:]
  -[VCMediaStreamRateControlConfig setMediaQueue:]
  -[VCMediaStreamRateControlConfig setVcMediaQueue:]
  -[VCMediaStreamRateControlConfig vcMediaQueue]
  -[VCMediaStreamRateControlConfig setMediaControlInfoGenerator:]
  -[VCMediaStreamRateControlConfig mediaControlInfoGenerator]
  -[VCMediaStreamRateControlConfig mediaControlInfoGeneratorType]
  -[VCMediaStreamRateControlConfig shouldCreateMediaControlInfoGenerator]
  -[VCMediaStreamRateControlConfig setShouldCreateMediaControlInfoGenerator:]
  -[VCMediaStreamRateControlConfig shouldRegisterMediaControlInfoGeneratorCallbacks]
  -[VCMediaStreamRateControlConfig setShouldRegisterMediaControlInfoGeneratorCallbacks:]
  -[VCMediaStreamRateControlConfig setMediaControlInfoGeneratorType:]
  -[VCMediaStreamRateControlConfig mediaQueueThrottlingInterval]
  -[VCMediaStreamRateControlConfig setMediaQueueThrottlingInterval:]
  -[VCMediaStreamRateControlConfig mediaControlInfoGeneratorOptions]
  -[VCMediaStreamRateControlConfig setMediaControlInfoGeneratorOptions:]


VCMediaStreamConfig : NSObject
 @property  long long direction
 @property  VCNetworkAddress *localAddress
 @property  NSString *cName
 @property  VCNetworkAddress *remoteAddress
 @property  unsigned int remoteSSRC
 @property  unsigned int localSSRC
 @property  unsigned long recommendedMTU
 @property  ^{tagVCJBTargetEstimatorSynchronizer=} jbTargetEstimatorSynchronizer
 @property  NSData *sendMediaKey
 @property  NSData *receiveMediaKey
 @property  NSDictionary *txPayloadMap
 @property  NSDictionary *rxPayloadMap
 @property  long long SRTPCipherSuite
 @property  BOOL rtpTimeOutEnabled
 @property  double rtpTimeOutInterval
 @property  unsigned int rtpTimestampRate
 @property  BOOL decryptionTimeOutEnabled
 @property  double decryptionTimeOutInterval
 @property  double decryptionMKMRecoveryInterval
 @property  unsigned int cellularUniqueTag
 @property  long long SRTCPCipherSuite
 @property  BOOL rtcpEnabled
 @property  BOOL rtcpXREnabled
 @property  BOOL rtcpTimeOutEnabled
 @property  double rtcpTimeOutInterval
 @property  double rtcpSendInterval
 @property  BOOL rtcpReceiveCallbackEnabled
 @property  unsigned short rtcpRemotePort
 @property  long long primaryTxCodecType
 @property  BOOL rateAdaptationEnabled
 @property  ^{tagVCSecurityKeyHolder=} securityKeyHolder
 @property  int sframeCipherSuite
 @property  VCMediaStreamMultiwayConfig *multiwayConfig
 @property  int captureSource
 @property  VCNetworkFeedbackController *networkFeedbackController
 @property  BOOL isServerPacketRetransmissionEnabled
 @property  unsigned int nackGeneratorStorebagConfigVersion
 @property  BOOL isExtraDelayForPacketRetransmissionsEnabled
 @property  VCMediaStreamRateControlConfig *rateControlConfig
 @property  long long streamInputID
 @property  unsigned long networkClockID
 @property  int jitterBufferMode
 @property  unsigned long fixedJitterBufferSize

  // instance methods
  -[VCMediaStreamConfig setDirection:]
  -[VCMediaStreamConfig remoteAddress]
  -[VCMediaStreamConfig dealloc]
  -[VCMediaStreamConfig direction]
  -[VCMediaStreamConfig localAddress]
  -[VCMediaStreamConfig setLocalAddress:]
  -[VCMediaStreamConfig setRemoteAddress:]
  -[VCMediaStreamConfig init]
  -[VCMediaStreamConfig setRtcpXREnabled:]
  -[VCMediaStreamConfig setRtcpRemotePort:]
  -[VCMediaStreamConfig setRtcpTimeOutInterval:]
  -[VCMediaStreamConfig isRTPTimeOutEnabled]
  -[VCMediaStreamConfig setRtcpEnabled:]
  -[VCMediaStreamConfig setRtcpSendInterval:]
  -[VCMediaStreamConfig setSRTCPCipherSuite:]
  -[VCMediaStreamConfig setRtpTimeOutEnabled:]
  -[VCMediaStreamConfig setSRTPCipherSuite:]
  -[VCMediaStreamConfig rtcpTimeOutInterval]
  -[VCMediaStreamConfig setRtpTimeOutInterval:]
  -[VCMediaStreamConfig setRtcpTimeOutEnabled:]
  -[VCMediaStreamConfig rtpTimeOutInterval]
  -[VCMediaStreamConfig SRTPCipherSuite]
  -[VCMediaStreamConfig SRTCPCipherSuite]
  -[VCMediaStreamConfig setRemoteSSRC:]
  -[VCMediaStreamConfig setRateAdaptationEnabled:]
  -[VCMediaStreamConfig rtcpSendInterval]
  -[VCMediaStreamConfig rtcpRemotePort]
  -[VCMediaStreamConfig remoteSSRC]
  -[VCMediaStreamConfig isRateAdaptationEnabled]
  -[VCMediaStreamConfig isRTCPEnabled]
  -[VCMediaStreamConfig isRTCPTimeOutEnabled]
  -[VCMediaStreamConfig initWithClientDictionary:]
  -[VCMediaStreamConfig rtpTimestampRate]
  -[VCMediaStreamConfig setRtpTimestampRate:]
  -[VCMediaStreamConfig captureSource]
  -[VCMediaStreamConfig setCaptureSource:]
  -[VCMediaStreamConfig jbTargetEstimatorSynchronizer]
  -[VCMediaStreamConfig setJbTargetEstimatorSynchronizer:]
  -[VCMediaStreamConfig networkFeedbackController]
  -[VCMediaStreamConfig setNetworkFeedbackController:]
  -[VCMediaStreamConfig cellularUniqueTag]
  -[VCMediaStreamConfig setCellularUniqueTag:]
  -[VCMediaStreamConfig streamInputID]
  -[VCMediaStreamConfig localSSRC]
  -[VCMediaStreamConfig recommendedMTU]
  -[VCMediaStreamConfig setRecommendedMTU:]
  -[VCMediaStreamConfig setDecryptionTimeOutEnabled:]
  -[VCMediaStreamConfig setDecryptionTimeOutInterval:]
  -[VCMediaStreamConfig isRTCPXREnabled]
  -[VCMediaStreamConfig decryptionMKMRecoveryInterval]
  -[VCMediaStreamConfig setDecryptionMKMRecoveryInterval:]
  -[VCMediaStreamConfig setSecurityKeyHolder:]
  -[VCMediaStreamConfig addRxPayloadType:]
  -[VCMediaStreamConfig addRxPayloadType:networkPayload:]
  -[VCMediaStreamConfig addTxPayloadType:]
  -[VCMediaStreamConfig addTxPayloadType:networkPayload:]
  -[VCMediaStreamConfig primaryTxCodecType]
  -[VCMediaStreamConfig setupMediaStreamConfig]
  -[VCMediaStreamConfig applyMediaStreamClientDictionary:]
  -[VCMediaStreamConfig jitterBufferModeFromAVCJitterBufferMode:]
  -[VCMediaStreamConfig cName]
  -[VCMediaStreamConfig setCName:]
  -[VCMediaStreamConfig setLocalSSRC:]
  -[VCMediaStreamConfig isDecryptionTimeOutEnabled]
  -[VCMediaStreamConfig decryptionTimeOutInterval]
  -[VCMediaStreamConfig sendMediaKey]
  -[VCMediaStreamConfig setSendMediaKey:]
  -[VCMediaStreamConfig receiveMediaKey]
  -[VCMediaStreamConfig setReceiveMediaKey:]
  -[VCMediaStreamConfig securityKeyHolder]
  -[VCMediaStreamConfig sframeCipherSuite]
  -[VCMediaStreamConfig setSframeCipherSuite:]
  -[VCMediaStreamConfig rxPayloadMap]
  -[VCMediaStreamConfig txPayloadMap]
  -[VCMediaStreamConfig multiwayConfig]
  -[VCMediaStreamConfig setMultiwayConfig:]
  -[VCMediaStreamConfig isRTCPReceiveCallbackEnabled]
  -[VCMediaStreamConfig setRtcpReceiveCallbackEnabled:]
  -[VCMediaStreamConfig rateControlConfig]
  -[VCMediaStreamConfig setRateControlConfig:]
  -[VCMediaStreamConfig setStreamInputID:]
  -[VCMediaStreamConfig networkClockID]
  -[VCMediaStreamConfig setNetworkClockID:]
  -[VCMediaStreamConfig jitterBufferMode]
  -[VCMediaStreamConfig setJitterBufferMode:]
  -[VCMediaStreamConfig fixedJitterBufferSize]
  -[VCMediaStreamConfig setFixedJitterBufferSize:]
  -[VCMediaStreamConfig isServerPacketRetransmissionEnabled]
  -[VCMediaStreamConfig setIsServerPacketRetransmissionEnabled:]
  -[VCMediaStreamConfig nackGeneratorStorebagConfigVersion]
  -[VCMediaStreamConfig setNackGeneratorStorebagConfigVersion:]
  -[VCMediaStreamConfig isExtraDelayForPacketRetransmissionsEnabled]
  -[VCMediaStreamConfig setIsExtraDelayForPacketRetransmissionsEnabled:]


AVCVideoDataOutput : NSObject <AVCStreamOutputDelegate>
 @property  BOOL isVideoPaused
 @property  BOOL isMediaStalled
 @property  BOOL isVideoDegraded
 @property  BOOL isVideoSuspended
 @property  BOOL isValid
 @property  <AVCVideoDataOutputDelegate> *delegate
 @property  {?=@} videoAttributes
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSObject<OS_dispatch_queue> *internalReceiverQueue
 @property  long long streamToken
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVCVideoDataOutput setIsValid:]
  -[AVCVideoDataOutput setDelegate:]
  -[AVCVideoDataOutput delegate]
  -[AVCVideoDataOutput setDelegateQueue:]
  -[AVCVideoDataOutput dealloc]
  -[AVCVideoDataOutput isValid]
  -[AVCVideoDataOutput delegateQueue]
  -[AVCVideoDataOutput videoAttributes]
  -[AVCVideoDataOutput streamToken]
  -[AVCVideoDataOutput isVideoPaused]
  -[AVCVideoDataOutput isMediaStalled]
  -[AVCVideoDataOutput isVideoDegraded]
  -[AVCVideoDataOutput setVideoAttributes:]
  -[AVCVideoDataOutput setIsVideoPaused:]
  -[AVCVideoDataOutput streamOutput:didPause:]
  -[AVCVideoDataOutput streamOutput:didStall:]
  -[AVCVideoDataOutput streamOutput:didDegrade:]
  -[AVCVideoDataOutput streamOutput:didSuspend:]
  -[AVCVideoDataOutput initWithStreamToken:delegate:queue:error:]
  -[AVCVideoDataOutput internalReceiverQueue]
  -[AVCVideoDataOutput setInternalReceiverQueue:]
  -[AVCVideoDataOutput setIsVideoDegraded:]
  -[AVCVideoDataOutput setIsMediaStalled:]
  -[AVCVideoDataOutput isVideoSuspended]
  -[AVCVideoDataOutput setIsVideoSuspended:]
  -[AVCVideoDataOutput streamOutput:didReceiveSampleBuffer:]
  -[AVCVideoDataOutput streamOutputServerDidDie:]
  -[AVCVideoDataOutput streamOutputDidBecomeInvalid:]
  -[AVCVideoDataOutput parseVideoAttributes:]


VCLinkProbingResult : NSObject
 @property  unsigned int reorderedPacketsCount
 @property  unsigned int sentRequestCount
 @property  unsigned int receivedResponseCount
 @property  NSMutableArray *requestTimestampAndRTTList
 @property  NSNumber *expMovMeanRTT
 @property  NSNumber *plrEnvelopeValue
 @property  NSNumber *plrTier

  // instance methods
  -[VCLinkProbingResult dealloc]
  -[VCLinkProbingResult sentRequestCount]
  -[VCLinkProbingResult initWithProbingResults:linkProbingResultConfig:]
  -[VCLinkProbingResult mergeProbingResults:]
  -[VCLinkProbingResult updateProbingResult:initialResult:]
  -[VCLinkProbingResult updateLinkStatsWithArrivingNewValueMeanRTT:arrivingNewValuePLR:]
  -[VCLinkProbingResult getPLRTierFromPLREnvelope:]
  -[VCLinkProbingResult reorderedPacketsCount]
  -[VCLinkProbingResult receivedResponseCount]
  -[VCLinkProbingResult requestTimestampAndRTTList]
  -[VCLinkProbingResult expMovMeanRTT]
  -[VCLinkProbingResult plrEnvelopeValue]
  -[VCLinkProbingResult plrTier]


VCVideoFeatureListStringHelper : NSObject
  // class methods
  +[VCVideoFeatureListStringHelper retrieveRawFeaturesStringWithType:]
  +[VCVideoFeatureListStringHelper fixInvalidAspectRatioPortrait:landscape:]
  +[VCVideoFeatureListStringHelper aspectRatioPortrait:landscape:isMismatchedOrientation:]
  +[VCVideoFeatureListStringHelper deriveAspectRatioFLS]
  +[VCVideoFeatureListStringHelper deriveAspectRatioFLSWithPortraitRatio:landscapeRatio:expectedPortraitRatio:expectedLandscapeRatio:]
  +[VCVideoFeatureListStringHelper findFeatureString:value:valueLength:withPrefix:]
  +[VCVideoFeatureListStringHelper newLocalFeaturesStringWithType:]
  +[VCVideoFeatureListStringHelper newLocalFeaturesStringWithType:aspectRatioFLS:]
  +[VCVideoFeatureListStringHelper newEmptyFeatureStringWithPayload:]
  +[VCVideoFeatureListStringHelper newEmptyFeatureString]
  +[VCVideoFeatureListStringHelper extractAspectRatios:prefix:landscapeX:landscapeY:portraitX:portraitY:]
  +[VCVideoFeatureListStringHelper extractAspectRatios:landscapeX:landscapeY:portraitX:portraitY:]
  +[VCVideoFeatureListStringHelper extractExpectedAspectRatios:expectedLandscapeX:expectedLandscapeY:expectedPortraitX:expectedPortraitY:]
  +[VCVideoFeatureListStringHelper defaultPayload:]
  +[VCVideoFeatureListStringHelper featureListString:maxSize:payload:featureListStrings:]
  +[VCVideoFeatureListStringHelper newScreenFeatureString]
  +[VCVideoFeatureListStringHelper newFeatureListStringsDictForGroupID:isOneToOne:]


SIPClientDataDictionary : NSObject
  // instance methods
  -[SIPClientDataDictionary dealloc]
  -[SIPClientDataDictionary init]
  -[SIPClientDataDictionary copyObjectForKey:p2pID:]
  -[SIPClientDataDictionary setObject:forKey:forP2PID:]


VCSessionMessageTopic : NSObject
 @property  BOOL isSendingEnabled
 @property  NSString *topicKey

  // instance methods
  -[VCSessionMessageTopic sendMessage:]
  -[VCSessionMessageTopic dealloc]
  -[VCSessionMessageTopic initWithTopicKey:strings:allowConcurrent:controlChannel:sendCompletionHandler:receiveHandler:]
  -[VCSessionMessageTopic initWithTopicKey:strings:allowConcurrent:requireReliable:controlChannel:sendMessageDataCompletionHandler:receiveMessageDictionaryHandler:]
  -[VCSessionMessageTopic initWithTopicKey:strings:allowConcurrent:requireReliable:controlChannel:sendCompletionHandler:receiveHandler:sendMessageDataCompletionHandler:receiveMessageDictionaryHandler:]
  -[VCSessionMessageTopic expectedMessageType]
  -[VCSessionMessageTopic isPayloadAssociated:]
  -[VCSessionMessageTopic setIsSendingEnabled:]
  -[VCSessionMessageTopic messageForCommand:]
  -[VCSessionMessageTopic sendMessage:participantID:]
  -[VCSessionMessageTopic handleSendMessageDidSucceed:message:participantID:]
  -[VCSessionMessageTopic sendReliableMessage:participantID:completion:]
  -[VCSessionMessageTopic sendMessage:participantID:withSequence:numRetries:]
  -[VCSessionMessageTopic isDuplicateMessageID:messageHistory:participantID:]
  -[VCSessionMessageTopic purgeExpiredEntries:messageHistory:participantID:]
  -[VCSessionMessageTopic passMessage:sequence:fromParticipant:]
  -[VCSessionMessageTopic clearTransactionCacheForParticipant:]
  -[VCSessionMessageTopic topicKey]
  -[VCSessionMessageTopic isSendingEnabled]


VCRedundancyControlAlgorithmAudioLegacy : NSObject <VCRedundancyControlAlgorithm>
 @property  unsigned int redundancyPercentage
 @property  double redundancyInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRedundancyControlAlgorithmAudioLegacy updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControlAlgorithmAudioLegacy redundancyPercentage]
  -[VCRedundancyControlAlgorithmAudioLegacy redundancyInterval]
  -[VCRedundancyControlAlgorithmAudioLegacy computeRedundancyInfo]


AVCAudioPowerSpectrum : NSObject <NSSecureCoding>
 @property  NSArray *channels
 @property  float minFrequency
 @property  float maxFrequency
 @property  long long sourceType

  // class methods
  +[AVCAudioPowerSpectrum supportsSecureCoding]

  // instance methods
  -[AVCAudioPowerSpectrum sourceType]
  -[AVCAudioPowerSpectrum encodeWithCoder:]
  -[AVCAudioPowerSpectrum dealloc]
  -[AVCAudioPowerSpectrum channels]
  -[AVCAudioPowerSpectrum init]
  -[AVCAudioPowerSpectrum initWithCoder:]
  -[AVCAudioPowerSpectrum minFrequency]
  -[AVCAudioPowerSpectrum maxFrequency]
  -[AVCAudioPowerSpectrum applyChannelBins:binCount:channelID:]
  -[AVCAudioPowerSpectrum checkNumChannels:]


VCLinkProbingHandler : NSObject
 @property  <VCLinkProbingHandlerDelegate> *linkProbingHandlerDelegate
 @property  unsigned char linkProbingCapabilityVersion
 @property  BOOL isLinkProbingActive
 @property  NSSet *activelyProbingLinkIDs
 @property  BOOL isDuplicationEnabled

  // instance methods
  -[VCLinkProbingHandler dealloc]
  -[VCLinkProbingHandler initWithDelegate:]
  -[VCLinkProbingHandler linkProbingCapabilityVersion]
  -[VCLinkProbingHandler setLinkProbingCapabilityVersion:]
  -[VCLinkProbingHandler isDuplicationEnabled]
  -[VCLinkProbingHandler updateProbingResults:]
  -[VCLinkProbingHandler linkProbingHandlerDelegate]
  -[VCLinkProbingHandler setLinkProbingHandlerDelegate:]
  -[VCLinkProbingHandler isLinkProbingActive]
  -[VCLinkProbingHandler startActiveProbingOnLinks:]
  -[VCLinkProbingHandler stopActiveProbingOnLinks:resetStats:]
  -[VCLinkProbingHandler dispatchedUpdateProbingResults:]
  -[VCLinkProbingHandler flushProbingResults:]
  -[VCLinkProbingHandler isValidProbingResult:]
  -[VCLinkProbingHandler removeProbingResultsForLinks:]
  -[VCLinkProbingHandler getProbingResultsForLinkID:]
  -[VCLinkProbingHandler loadStorebagValues]
  -[VCLinkProbingHandler setLinkProbingResultConfig]
  -[VCLinkProbingHandler queryProbingResults]
  -[VCLinkProbingHandler updateLinkPreferenceOrder]
  -[VCLinkProbingHandler probingLockdownEnded]
  -[VCLinkProbingHandler resetAggregatedProbingResults]
  -[VCLinkProbingHandler activelyProbingLinkIDs]
  -[VCLinkProbingHandler setIsDuplicationEnabled:]


VideoScaler : NSObject
  // instance methods
  -[VideoScaler dealloc]
  -[VideoScaler init]
  -[VideoScaler convertAndScalePixelBuffer:toWidth:toHeight:withPixelFormat:usingPixelBufferPool:andStoreTo:]


VCSessionParticipantMediaStreamInfo : NSObject
 @property  VCMediaStream *stream
 @property  NSArray *streamConfigs

  // instance methods
  -[VCSessionParticipantMediaStreamInfo dealloc]
  -[VCSessionParticipantMediaStreamInfo stream]
  -[VCSessionParticipantMediaStreamInfo setStream:]
  -[VCSessionParticipantMediaStreamInfo init]
  -[VCSessionParticipantMediaStreamInfo addStreamConfig:]
  -[VCSessionParticipantMediaStreamInfo streamConfigs]


VCCallInfo : NSObject
 @property  unsigned int callID
 @property  unsigned int auNumber
 @property  unsigned int maxBandwidth
 @property  unsigned int cellBandwidth
 @property  NSString *participantID
 @property  BOOL isHDVideoSupported
 @property  BOOL isPreLionOS
 @property  BOOL isVideoQualityDegraded
 @property  BOOL videoIsPaused
 @property  NSString *sdpString
 @property  SDPMini *sdp
 @property  BOOL requiresImplicitFeatureString
 @property  BOOL isIOS
 @property  BOOL usesInitialFECImplementation
 @property  BOOL supportsDynamicMaxBitrate
 @property  BOOL supportsSKEOptimization
 @property  BOOL supportsSpecialAACBundle
 @property  unsigned int visibleRectCropping
 @property  BOOL useNewPLCalc
 @property  unsigned char u8Version
 @property  BOOL supportsDynamicContentsRectWithAspectPreservation
 @property  NSString *frameworkVersion
 @property  NSString *OSVersion
 @property  NSString *deviceType
 @property  BOOL isVideoQualityNearDegraded

  // class methods
  +[VCCallInfo getVCCurrentVersion]

  // instance methods
  -[VCCallInfo OSVersion]
  -[VCCallInfo setUserAgent:]
  -[VCCallInfo dealloc]
  -[VCCallInfo cellBandwidth]
  -[VCCallInfo setCellBandwidth:]
  -[VCCallInfo deviceType]
  -[VCCallInfo participantID]
  -[VCCallInfo setDeviceType:]
  -[VCCallInfo init]
  -[VCCallInfo isIOS]
  -[VCCallInfo callID]
  -[VCCallInfo setCallID:]
  -[VCCallInfo setParticipantID:]
  -[VCCallInfo frameworkVersion]
  -[VCCallInfo maxBandwidth]
  -[VCCallInfo setMaxBandwidth:]
  -[VCCallInfo videoIsPaused]
  -[VCCallInfo supportsDynamicMaxBitrate]
  -[VCCallInfo setSupportsDynamicMaxBitrate:]
  -[VCCallInfo isVideoQualityDegraded]
  -[VCCallInfo requiresImplicitFeatureString]
  -[VCCallInfo setAuNumber:]
  -[VCCallInfo updateWithLastDecodedFrameTime:time:]
  -[VCCallInfo supportsDynamicContentsRectWithAspectPreservation]
  -[VCCallInfo setVideoIsPaused:]
  -[VCCallInfo audioVersionInfo:]
  -[VCCallInfo supportSDPCompression]
  -[VCCallInfo isHDVideoSupported]
  -[VCCallInfo auNumber]
  -[VCCallInfo isPreLionOS]
  -[VCCallInfo setIsPreLionOS:]
  -[VCCallInfo setIsVideoQualityDegraded:]
  -[VCCallInfo usesInitialFECImplementation]
  -[VCCallInfo sdpString]
  -[VCCallInfo setSdpString:]
  -[VCCallInfo sdp]
  -[VCCallInfo setSdp:]
  -[VCCallInfo visibleRectCropping]
  -[VCCallInfo setVisibleRectCropping:]
  -[VCCallInfo useNewPLCalc]
  -[VCCallInfo supportsSpecialAACBundle]
  -[VCCallInfo supportsSKEOptimization]
  -[VCCallInfo setSupportsSKEOptimization:]
  -[VCCallInfo u8Version]
  -[VCCallInfo setU8Version:]
  -[VCCallInfo setOSVersion:]
  -[VCCallInfo setFrameworkVersion:]
  -[VCCallInfo isVideoQualityNearDegraded]
  -[VCCallInfo setIsVideoQualityNearDegraded:]


VCCameraPreview : NSObject
 @property  BOOL started

  // instance methods
  -[VCCameraPreview isStarted]
  -[VCCameraPreview setStarted:]


VCVideoRelay : NSObject
  // class methods
  +[VCVideoRelay sharedInstance]

  // instance methods
  -[VCVideoRelay dealloc]
  -[VCVideoRelay init]
  -[VCVideoRelay enqueueFrame:atTime:cameraStatusBits:]
  -[VCVideoRelay registerForVideoFrames:]
  -[VCVideoRelay deregisterForVideoFrames:]


AVCAudioPowerSpectrumMeter : NSObject <VCAudioPowerSpectrumMeterDelegate>
 @property  <AVCAudioPowerSpectrumMeterDelegate> *delegate
 @property  unsigned int sessionToken
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVCAudioPowerSpectrumMeter cellularTapTypeWithClientCellularTapType:]

  // instance methods
  -[AVCAudioPowerSpectrumMeter delegate]
  -[AVCAudioPowerSpectrumMeter dealloc]
  -[AVCAudioPowerSpectrumMeter setupXPCConnection]
  -[AVCAudioPowerSpectrumMeter sessionToken]
  -[AVCAudioPowerSpectrumMeter delegateQueue]
  -[AVCAudioPowerSpectrumMeter deregisterBlocksForService]
  -[AVCAudioPowerSpectrumMeter cleanupDelegate]
  -[AVCAudioPowerSpectrumMeter initWithConfig:delegate:queue:]
  -[AVCAudioPowerSpectrumMeter unregisterPowerSpectrumForCellularTapType:error:]
  -[AVCAudioPowerSpectrumMeter unregisterPowerSpectrumForStreamToken:]
  -[AVCAudioPowerSpectrumMeter registerPowerSpectrumForCellularTapType:error:]
  -[AVCAudioPowerSpectrumMeter registerPowerSpectrumForStreamToken:]
  -[AVCAudioPowerSpectrumMeter audioPowerSpectrumMeter:didUpdateAudioPowerSpectrums:]
  -[AVCAudioPowerSpectrumMeter registerBlocksForNotifications]
  -[AVCAudioPowerSpectrumMeter cleanupXPCConnection]
  -[AVCAudioPowerSpectrumMeter storeDelegate:delegateQueue:]
  -[AVCAudioPowerSpectrumMeter setupPowerSpectrumMeter]
  -[AVCAudioPowerSpectrumMeter cleanupPowerSpectrumMeter]


VCServerBag : NSObject
  // class methods
  +[VCServerBag sharedInstance]
  +[VCServerBag pullStoreBagKeys]
  +[VCServerBag clearBagWithRefreshIntervalInSeconds:]
  +[VCServerBag checkKeysAgainstHardcodedPrefs:]
  +[VCServerBag retrieveBag]
  +[VCServerBag verifyRequiredKeys:withError:]
  +[VCServerBag verifyRequiredVoiceChatKeys:]
  +[VCServerBag verifyRequiredKeys:]

  // instance methods
  -[VCServerBag init]
  -[VCServerBag waitForBagLoad]


VCRedundancyControlAlgorithmAudio : NSObject <VCRedundancyControlAlgorithm>
 @property  unsigned int redundancyPercentage
 @property  double redundancyInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRedundancyControlAlgorithmAudio init]
  -[VCRedundancyControlAlgorithmAudio updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControlAlgorithmAudio redundancyPercentage]
  -[VCRedundancyControlAlgorithmAudio redundancyInterval]
  -[VCRedundancyControlAlgorithmAudio processNWConnectionStatistics:]
  -[VCRedundancyControlAlgorithmAudio processRCNetworkStatistics:]
  -[VCRedundancyControlAlgorithmAudio computeRedundancyInfo]
  -[VCRedundancyControlAlgorithmAudio updateRedundancyPercentageWithPLRThresholds:]


VCIDRSchedulerPeriodGroup : NSObject
 @property  unsigned int basePeriodCount

  // instance methods
  -[VCIDRSchedulerPeriodGroup dealloc]
  -[VCIDRSchedulerPeriodGroup addStream:]
  -[VCIDRSchedulerPeriodGroup computeStreamsIDRPosition]
  -[VCIDRSchedulerPeriodGroup initWithPeriodCount:framesPerBasePeriod:]
  -[VCIDRSchedulerPeriodGroup computeScheduleItemList]
  -[VCIDRSchedulerPeriodGroup basePeriodCount]


VCAudioTransmitterConfig : NSObject
 @property  ^{tagHANDLE=i} rtpHandle
 @property  ^{tagHANDLE=i} afrcHandle
 @property  ^{tagHANDLE=i} mediaQueue
 @property  ^{tagHANDLE=i} rtpVideo
 @property  ^v controlInfoGenerator
 @property  NSMutableArray *audioPayloads
 @property  VCAudioPayload *chosenAudioPayload
 @property  VCAudioPayload *chosenDTXPayload
 @property  unsigned char packetsPerBundle
 @property  BOOL useRateControl
 @property  int bundlingScheme
 @property  BOOL isUseCaseWatchContinuity
 @property  BOOL allowAudioSwitching
 @property  BOOL supportsAdaptation
 @property  BOOL needsPacketThread
 @property  int chosenRedPayloadType
 @property  BOOL redEnabled
 @property  BOOL includeRedSequenceOffset
 @property  unsigned int redNumPayloads
 @property  unsigned int redMaxDelay20ms
 @property  BOOL transmitROC
 @property  int operatingMode
 @property  VCTransportSession *transportSession
 @property  {tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} inputFormat
 @property  ^{opaqueRTCReporting=} reportingAgent
 @property  int reportingParentID
 @property  AVCStatisticsCollector *statisticsCollector
 @property  BOOL ignoreSilence
 @property  NSArray *streamIDs
 @property  unsigned int tierNetworkBitrate
 @property  unsigned int maxIDSStreamIdCount
 @property  NSArray *supportedNumRedundantPayload
 @property  BOOL sendActiveVoiceOnly
 @property  BOOL currentDTXEnable
 @property  unsigned char mediaControlInfoVersion
 @property  BOOL alwaysOnAudioRedundancyEnabled
 @property  BOOL cellularAllowRedLowBitratesEnabled
 @property  BOOL wifiAllowRedLowBitratesEnabled
 @property  unsigned long remoteIDSParticipantID
 @property  BOOL shouldCreateRedundancyController
 @property  BOOL useChannelDataFormat
 @property  BOOL shouldApplyRedAsBoolean
 @property  unsigned int qualityIndex
 @property  BOOL useWifiTiers
 @property  BOOL supportsCodecBandwidthUpdate
 @property  ^{tagVCCryptor=} sframeCryptor
 @property  unsigned int packetExpirationTime
 @property  BOOL audioIssueDetectorEnabled

  // instance methods
  -[VCAudioTransmitterConfig dealloc]
  -[VCAudioTransmitterConfig supportsAdaptation]
  -[VCAudioTransmitterConfig mediaQueue]
  -[VCAudioTransmitterConfig operatingMode]
  -[VCAudioTransmitterConfig setOperatingMode:]
  -[VCAudioTransmitterConfig inputFormat]
  -[VCAudioTransmitterConfig setInputFormat:]
  -[VCAudioTransmitterConfig transportSession]
  -[VCAudioTransmitterConfig setTransportSession:]
  -[VCAudioTransmitterConfig qualityIndex]
  -[VCAudioTransmitterConfig setQualityIndex:]
  -[VCAudioTransmitterConfig statisticsCollector]
  -[VCAudioTransmitterConfig setStatisticsCollector:]
  -[VCAudioTransmitterConfig reportingAgent]
  -[VCAudioTransmitterConfig setReportingAgent:]
  -[VCAudioTransmitterConfig allowAudioSwitching]
  -[VCAudioTransmitterConfig setAllowAudioSwitching:]
  -[VCAudioTransmitterConfig sendActiveVoiceOnly]
  -[VCAudioTransmitterConfig setSendActiveVoiceOnly:]
  -[VCAudioTransmitterConfig setCurrentDTXEnable:]
  -[VCAudioTransmitterConfig isCurrentDTXEnabled]
  -[VCAudioTransmitterConfig audioPayloads]
  -[VCAudioTransmitterConfig mediaControlInfoVersion]
  -[VCAudioTransmitterConfig setMediaControlInfoVersion:]
  -[VCAudioTransmitterConfig alwaysOnAudioRedundancyEnabled]
  -[VCAudioTransmitterConfig setAlwaysOnAudioRedundancyEnabled:]
  -[VCAudioTransmitterConfig setMediaQueue:]
  -[VCAudioTransmitterConfig rtpHandle]
  -[VCAudioTransmitterConfig setUseRateControl:]
  -[VCAudioTransmitterConfig setPacketsPerBundle:]
  -[VCAudioTransmitterConfig packetsPerBundle]
  -[VCAudioTransmitterConfig setRtpHandle:]
  -[VCAudioTransmitterConfig useRateControl]
  -[VCAudioTransmitterConfig rtpVideo]
  -[VCAudioTransmitterConfig reportingParentID]
  -[VCAudioTransmitterConfig setReportingParentID:]
  -[VCAudioTransmitterConfig sframeCryptor]
  -[VCAudioTransmitterConfig setSframeCryptor:]
  -[VCAudioTransmitterConfig remoteIDSParticipantID]
  -[VCAudioTransmitterConfig setRemoteIDSParticipantID:]
  -[VCAudioTransmitterConfig bundlingScheme]
  -[VCAudioTransmitterConfig setBundlingScheme:]
  -[VCAudioTransmitterConfig redNumPayloads]
  -[VCAudioTransmitterConfig redMaxDelay20ms]
  -[VCAudioTransmitterConfig setMaxIDSStreamIdCount:]
  -[VCAudioTransmitterConfig maxIDSStreamIdCount]
  -[VCAudioTransmitterConfig setRtpVideo:]
  -[VCAudioTransmitterConfig controlInfoGenerator]
  -[VCAudioTransmitterConfig setControlInfoGenerator:]
  -[VCAudioTransmitterConfig afrcHandle]
  -[VCAudioTransmitterConfig setAfrcHandle:]
  -[VCAudioTransmitterConfig setAudioPayloads:]
  -[VCAudioTransmitterConfig chosenAudioPayload]
  -[VCAudioTransmitterConfig setChosenAudioPayload:]
  -[VCAudioTransmitterConfig chosenDTXPayload]
  -[VCAudioTransmitterConfig setChosenDTXPayload:]
  -[VCAudioTransmitterConfig chosenRedPayloadType]
  -[VCAudioTransmitterConfig setChosenRedPayloadType:]
  -[VCAudioTransmitterConfig isUseCaseWatchContinuity]
  -[VCAudioTransmitterConfig setIsUseCaseWatchContinuity:]
  -[VCAudioTransmitterConfig setSupportsAdaptation:]
  -[VCAudioTransmitterConfig isRedEnabled]
  -[VCAudioTransmitterConfig setRedEnabled:]
  -[VCAudioTransmitterConfig includeRedSequenceOffset]
  -[VCAudioTransmitterConfig setIncludeRedSequenceOffset:]
  -[VCAudioTransmitterConfig setRedNumPayloads:]
  -[VCAudioTransmitterConfig setRedMaxDelay20ms:]
  -[VCAudioTransmitterConfig transmitROC]
  -[VCAudioTransmitterConfig setTransmitROC:]
  -[VCAudioTransmitterConfig ignoreSilence]
  -[VCAudioTransmitterConfig setIgnoreSilence:]
  -[VCAudioTransmitterConfig needsPacketThread]
  -[VCAudioTransmitterConfig setNeedsPacketThread:]
  -[VCAudioTransmitterConfig streamIDs]
  -[VCAudioTransmitterConfig setStreamIDs:]
  -[VCAudioTransmitterConfig tierNetworkBitrate]
  -[VCAudioTransmitterConfig setTierNetworkBitrate:]
  -[VCAudioTransmitterConfig supportedNumRedundantPayload]
  -[VCAudioTransmitterConfig setSupportedNumRedundantPayload:]
  -[VCAudioTransmitterConfig cellularAllowRedLowBitratesEnabled]
  -[VCAudioTransmitterConfig setCellularAllowRedLowBitratesEnabled:]
  -[VCAudioTransmitterConfig wifiAllowRedLowBitratesEnabled]
  -[VCAudioTransmitterConfig setWifiAllowRedLowBitratesEnabled:]
  -[VCAudioTransmitterConfig shouldCreateRedundancyController]
  -[VCAudioTransmitterConfig setShouldCreateRedundancyController:]
  -[VCAudioTransmitterConfig useChannelDataFormat]
  -[VCAudioTransmitterConfig setUseChannelDataFormat:]
  -[VCAudioTransmitterConfig shouldApplyRedAsBoolean]
  -[VCAudioTransmitterConfig setShouldApplyRedAsBoolean:]
  -[VCAudioTransmitterConfig useWifiTiers]
  -[VCAudioTransmitterConfig setUseWifiTiers:]
  -[VCAudioTransmitterConfig packetExpirationTime]
  -[VCAudioTransmitterConfig setPacketExpirationTime:]
  -[VCAudioTransmitterConfig supportsCodecBandwidthUpdate]
  -[VCAudioTransmitterConfig setSupportsCodecBandwidthUpdate:]
  -[VCAudioTransmitterConfig audioIssueDetectorEnabled]
  -[VCAudioTransmitterConfig setAudioIssueDetectorEnabled:]


AVCMomentsRequest : NSObject
 @property  NSObject<AVCMomentsRequestDelegate> *delegate
 @property  unsigned char mode
 @property  NSString *transactionID
 @property  unsigned char mediaType
 @property  NSString *requesterID
 @property  NSString *requesteeID

  // instance methods
  -[AVCMomentsRequest validateWithError:]
  -[AVCMomentsRequest setDelegate:]
  -[AVCMomentsRequest rejectWithError:]
  -[AVCMomentsRequest mediaType]
  -[AVCMomentsRequest delegate]
  -[AVCMomentsRequest transactionID]
  -[AVCMomentsRequest dealloc]
  -[AVCMomentsRequest mode]
  -[AVCMomentsRequest startWithError:]
  -[AVCMomentsRequest setMode:]
  -[AVCMomentsRequest requesterID]
  -[AVCMomentsRequest endWithError:]
  -[AVCMomentsRequest initWithMediaType:requesterID:requesteeID:]
  -[AVCMomentsRequest initWithMediaType:requesterID:requesteeID:transactionID:]
  -[AVCMomentsRequest requesteeID]


VCMediaStreamMultiwayConfigAudio : VCMediaStreamMultiwayConfig
 @property  VCAudioRuleCollection *audioRules
 @property  unsigned int preferredMediaBitrate

  // instance methods
  -[VCMediaStreamMultiwayConfigAudio dealloc]
  -[VCMediaStreamMultiwayConfigAudio audioRules]
  -[VCMediaStreamMultiwayConfigAudio setAudioRules:]
  -[VCMediaStreamMultiwayConfigAudio preferredMediaBitrate]
  -[VCMediaStreamMultiwayConfigAudio setPreferredMediaBitrate:]


VCAudioStreamConfig : VCMediaStreamConfig
 @property  long long audioStreamMode
 @property  NSDictionary *codecConfigurations
 @property  BOOL redEnabled
 @property  unsigned char numRedundantPayloads
 @property  NSArray *supportedNumRedundantPayload
 @property  BOOL enableMaxBitrateOnNoChangeCMR
 @property  BOOL forceEVSWideBand
 @property  float volume
 @property  BOOL shouldApplyRedAsBoolean
 @property  BOOL supportsAdaptation
 @property  int bundlingScheme
 @property  BOOL useExternalIO
 @property  BOOL useWifiTiers
 @property  r^{tagVCAudioFrameFormat={AudioStreamBasicDescription=dIIIIIIII}I} externalIOFormat
 @property  int oneToOneOperatingMode
 @property  unsigned int channelCount
 @property  BOOL dtmfTonePlaybackEnabled
 @property  unsigned int dtmfSampleRate
 @property  BOOL anbrEnabled
 @property  long long subscriptionSlot
 @property  BOOL isLowLatency

  // class methods
  +[VCAudioStreamConfig bundlingSchemeForAudioStreamMode:payloadType:]

  // instance methods
  -[VCAudioStreamConfig setChannelCount:]
  -[VCAudioStreamConfig channelCount]
  -[VCAudioStreamConfig dealloc]
  -[VCAudioStreamConfig setVolume:]
  -[VCAudioStreamConfig volume]
  -[VCAudioStreamConfig init]
  -[VCAudioStreamConfig supportsAdaptation]
  -[VCAudioStreamConfig subscriptionSlot]
  -[VCAudioStreamConfig setSubscriptionSlot:]
  -[VCAudioStreamConfig setEnableMaxBitrateOnNoChangeCMR:]
  -[VCAudioStreamConfig setNumRedundantPayloads:]
  -[VCAudioStreamConfig audioStreamMode]
  -[VCAudioStreamConfig setAudioStreamMode:]
  -[VCAudioStreamConfig codecConfigurations]
  -[VCAudioStreamConfig initWithClientDictionary:]
  -[VCAudioStreamConfig bundlingScheme]
  -[VCAudioStreamConfig setBundlingScheme:]
  -[VCAudioStreamConfig setSupportsAdaptation:]
  -[VCAudioStreamConfig isRedEnabled]
  -[VCAudioStreamConfig supportedNumRedundantPayload]
  -[VCAudioStreamConfig shouldApplyRedAsBoolean]
  -[VCAudioStreamConfig setShouldApplyRedAsBoolean:]
  -[VCAudioStreamConfig useWifiTiers]
  -[VCAudioStreamConfig setUseWifiTiers:]
  -[VCAudioStreamConfig setupCodecWithClientDictionary:]
  -[VCAudioStreamConfig setupRedWithRxPayload:txPayload:]
  -[VCAudioStreamConfig setupCNCodecWithClientDictionary:]
  -[VCAudioStreamConfig setupDTMFCodecWithClientDictionary:]
  -[VCAudioStreamConfig setExternalIOFormat:]
  -[VCAudioStreamConfig externalIOFormat]
  -[VCAudioStreamConfig addCodecConfiguration:]
  -[VCAudioStreamConfig addSupportedNumRedundantPayload:]
  -[VCAudioStreamConfig numRedundantPayloads]
  -[VCAudioStreamConfig enableMaxBitrateOnNoChangeCMR]
  -[VCAudioStreamConfig forceEVSWideBand]
  -[VCAudioStreamConfig setForceEVSWideBand:]
  -[VCAudioStreamConfig oneToOneOperatingMode]
  -[VCAudioStreamConfig setOneToOneOperatingMode:]
  -[VCAudioStreamConfig dtmfTonePlaybackEnabled]
  -[VCAudioStreamConfig setDtmfTonePlaybackEnabled:]
  -[VCAudioStreamConfig dtmfSampleRate]
  -[VCAudioStreamConfig setDtmfSampleRate:]
  -[VCAudioStreamConfig anbrEnabled]
  -[VCAudioStreamConfig setAnbrEnabled:]
  -[VCAudioStreamConfig isLowLatency]
  -[VCAudioStreamConfig setIsLowLatency:]
  -[VCAudioStreamConfig useExternalIO]


VCVideoStreamSendGroup : VCMediaStreamSendGroup <VCMediaStreamDelegate, VCSessionUplinkVideoStreamControllerDelegate, VCRedundancyControllerDelegate, VCMediaCaptureController, VCVideoSink, VCVideoCaptureClient, VCMediaStreamSendSyncSourceDelegate>
 @property  int captureFrameRate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCVideoStreamSendGroup initWithConfig:]
  -[VCVideoStreamSendGroup stopCapture]
  -[VCVideoStreamSendGroup dealloc]
  -[VCVideoStreamSendGroup startCapture]
  -[VCVideoStreamSendGroup didStart]
  -[VCVideoStreamSendGroup collectAndLogChannelMetrics:]
  -[VCVideoStreamSendGroup willStart]
  -[VCVideoStreamSendGroup updateActiveMediaStreamIDs:withTargetBitrate:mediaBitrates:]
  -[VCVideoStreamSendGroup activeStreamKeys]
  -[VCVideoStreamSendGroup onVideoFrame:frameTime:attribute:]
  -[VCVideoStreamSendGroup redundancyController:redundancyVectorDidChange:]
  -[VCVideoStreamSendGroup generateKeyFrameWithStreamID:]
  -[VCVideoStreamSendGroup captureFrameRate]
  -[VCVideoStreamSendGroup setCaptureFrameRate:]
  -[VCVideoStreamSendGroup redundancyController:redundancyPercentageDidChange:]
  -[VCVideoStreamSendGroup vcMediaStreamDidRTPTimeOut:]
  -[VCVideoStreamSendGroup vcMediaStreamDidRTCPTimeOut:]
  -[VCVideoStreamSendGroup vcMediaStreamDidDecryptionTimeOut:]
  -[VCVideoStreamSendGroup redundancyController:redundancyIntervalDidChange:]
  -[VCVideoStreamSendGroup setupRedundancyController]
  -[VCVideoStreamSendGroup thermalLevelDidChange:]
  -[VCVideoStreamSendGroup clientCaptureRule]
  -[VCVideoStreamSendGroup avConferencePreviewError:]
  -[VCVideoStreamSendGroup cameraAvailabilityDidChange:]
  -[VCVideoStreamSendGroup sourceFrameRateDidChange:]
  -[VCVideoStreamSendGroup frameRateIsBeingThrottled:thermalLevelDidChange:powerLevelDidChange:]
  -[VCVideoStreamSendGroup maxCaptureResolution]
  -[VCVideoStreamSendGroup maxCaptureCameraFrameRate]
  -[VCVideoStreamSendGroup setUplinkBitrateCapCell:]
  -[VCVideoStreamSendGroup setUplinkBitrateCapWifi:]
  -[VCVideoStreamSendGroup registerForVideoCapture:]
  -[VCVideoStreamSendGroup deregisterForVideoCapture]
  -[VCVideoStreamSendGroup enableRedundancy:]
  -[VCVideoStreamSendGroup shouldCompoundListIgnoreStream:streamConfig:activeStreamIds:]
  -[VCVideoStreamSendGroup streamDescriptionForMediaStreamConfig:]
  -[VCVideoStreamSendGroup shouldSubscribeToStreamID:peerSubscribedStreams:]
  -[VCVideoStreamSendGroup updateUplinkStreamsForPeerSubscribedStreams:]
  -[VCVideoStreamSendGroup setActiveConnection:uplinkBitrateCap:]
  -[VCVideoStreamSendGroup updateBandwidthAllocatorStreamTokenState]
  -[VCVideoStreamSendGroup setupVideoPriority]
  -[VCVideoStreamSendGroup controller:didChangeActiveVideoStreams:]
  -[VCVideoStreamSendGroup updateSendSampleRTPTimestamp:sampleRate:systemTime:]
  -[VCVideoStreamSendGroup setupRedundancySettings]
  -[VCVideoStreamSendGroup setupPayloadTypes]
  -[VCVideoStreamSendGroup cleanupRedundancySettings]
  -[VCVideoStreamSendGroup maxCaptureFrameRate]
  -[VCVideoStreamSendGroup setupUplinkVideoStreamController]
  -[VCVideoStreamSendGroup updateVideoStreamAndProcessFrame:sampleBuffer:lastSentAudioHostTime:lastSentAudioSampleTime:frameTime:attribute:]
  -[VCVideoStreamSendGroup processVideoPriority]
  -[VCVideoStreamSendGroup processVideoEventQueue]
  -[VCVideoStreamSendGroup flushVideoRedundancyEventQueue]
  -[VCVideoStreamSendGroup getCaptureEncodingSize]
  -[VCVideoStreamSendGroup getPixelFormat]
  -[VCVideoStreamSendGroup registerForScreenCapture]
  -[VCVideoStreamSendGroup deregisterForScreenCapture]
  -[VCVideoStreamSendGroup updateSuspendedState]
  -[VCVideoStreamSendGroup captureConfigForScreenShare]
  -[VCVideoStreamSendGroup registerConfigForScreenShare]
  -[VCVideoStreamSendGroup registerClientForScreenShare]
  -[VCVideoStreamSendGroup deregisterClientForScreenShare]
  -[VCVideoStreamSendGroup computeMaxScreenCaptureSize]
  -[VCVideoStreamSendGroup maxStreamFrameRate]


VCTestMonitorManager : NSObject
 @property  BOOL toneInjectionEnabled
 @property  BOOL forceNetworkCellular
 @property  BOOL enableLoopbackInterface
 @property  BOOL enableOneToOneMode
 @property  BOOL enableAudioPowerSpectrumReport
 @property  double emulatedRxPLR
 @property  int forcedTargetBitrate
 @property  int forcedCapBitrate
 @property  NSString *emulatedNetworkConfigPath

  // class methods
  +[VCTestMonitorManager sharedManager]

  // instance methods
  -[VCTestMonitorManager registerBlocksForService]
  -[VCTestMonitorManager dealloc]
  -[VCTestMonitorManager init]
  -[VCTestMonitorManager setEnableLoopbackInterface:]
  -[VCTestMonitorManager setEnableOneToOneMode:]
  -[VCTestMonitorManager setEmulatedRxPLR:]
  -[VCTestMonitorManager setForcedTargetBitrate:]
  -[VCTestMonitorManager setForcedCapBitrate:]
  -[VCTestMonitorManager setEnableAudioPowerSpectrumReport:]
  -[VCTestMonitorManager reportSessionMediaDaemonStats:]
  -[VCTestMonitorManager toneInjectionEnabled]
  -[VCTestMonitorManager setToneInjectionEnabled:]
  -[VCTestMonitorManager forceNetworkCellular]
  -[VCTestMonitorManager setForceNetworkCellular:]
  -[VCTestMonitorManager enableLoopbackInterface]
  -[VCTestMonitorManager emulatedRxPLR]
  -[VCTestMonitorManager forcedTargetBitrate]
  -[VCTestMonitorManager forcedCapBitrate]
  -[VCTestMonitorManager emulatedNetworkConfigPath]
  -[VCTestMonitorManager setEmulatedNetworkConfigPath:]
  -[VCTestMonitorManager enableOneToOneMode]
  -[VCTestMonitorManager enableAudioPowerSpectrumReport]


VCCaptionsReceiver : NSObject
 @property  <VCCaptionsReceiverDelegate> *delegate
 @property  VCCaptionsTranscription *currentTranscription

  // instance methods
  -[VCCaptionsReceiver delegate]
  -[VCCaptionsReceiver dealloc]
  -[VCCaptionsReceiver initWithDelegate:]
  -[VCCaptionsReceiver processCaptionsData:]
  -[VCCaptionsReceiver currentTranscription]
  -[VCCaptionsReceiver setCurrentTranscription:]


VCFigAssetWriter : NSObject <VCMovieWriterProtocol>
 @property  unsigned int startRTPTimeStamp
 @property  unsigned int endRTPTimeStamp
 @property  unsigned char writerMode
 @property  NSURL *outputURL

  // instance methods
  -[VCFigAssetWriter dealloc]
  -[VCFigAssetWriter setOutputURL:]
  -[VCFigAssetWriter outputURL]
  -[VCFigAssetWriter _setupWriter]
  -[VCFigAssetWriter setStillImageTime:]
  -[VCFigAssetWriter initWithOutputURL:transactionID:videoCodec:]
  -[VCFigAssetWriter appendVideoSampleBuffer:cameraStatus:mediaType:]
  -[VCFigAssetWriter appendAudioSampleBuffer:mediaType:]
  -[VCFigAssetWriter finishWritingWithHandler:]
  -[VCFigAssetWriter shouldAppendSampleBuffer:RTPtimeStamp:mediaType:]
  -[VCFigAssetWriter shouldFinishWritingSampleBuffer:RTPtimeStamp:mediaType:]
  -[VCFigAssetWriter setEndRTPTimestampWithTimestamp:]
  -[VCFigAssetWriter setupWriterWithMode:]
  -[VCFigAssetWriter startRTPTimeStamp]
  -[VCFigAssetWriter setStartRTPTimeStamp:]
  -[VCFigAssetWriter endRTPTimeStamp]
  -[VCFigAssetWriter setEndRTPTimeStamp:]
  -[VCFigAssetWriter writerMode]
  -[VCFigAssetWriter setupLivePhotoStillImageCameraStatusBit:resize:videoVisibleWidth:height:]
  -[VCFigAssetWriter trackIDForMediaType:]
  -[VCFigAssetWriter trackIDForWriterMode:]
  -[VCFigAssetWriter compressionSessionWithWidth:height:]
  -[VCFigAssetWriter encodeAndAppendSampleBuffer:]
  -[VCFigAssetWriter writeIdentifierMetadata:]
  -[VCFigAssetWriter setStillImageTimeInternal]


VCCaptionsStreamReceiveGroup : VCVideoStreamReceiveGroup

VCImageRotationConverterBase : VCImageConverterBase
  // instance methods
  -[VCImageRotationConverterBase dealloc]
  -[VCImageRotationConverterBase initWithRotationAngle:formatType:]


VCRedundancyControllerAudio : NSObject <VCRedundancyControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCRedundancyControllerAudio dealloc]
  -[VCRedundancyControllerAudio updateRedundancyStrategyWithNetworkStatistics:]
  -[VCRedundancyControllerAudio reportRedundancyPercentage:redundancyInterval:]
  -[VCRedundancyControllerAudio unregisterStatistics]
  -[VCRedundancyControllerAudio initWithDelegate:statisticsCollector:mode:]


VCControlChannelDialogV1 : VCControlChannelDialog
  // class methods
  +[VCControlChannelDialogV1 sendConfirmationToParticipantID:transactionID:sessionID:transactionDelegate:]
  +[VCControlChannelDialogV1 encryptMessage:buffer:size:sequenceNumber:transactionDelegate:]
  +[VCControlChannelDialogV1 newEncryptedMessageFromMessage:sequenceNumber:transactionDelegate:]
  +[VCControlChannelDialogV1 processMessageFromParticipant:transactionID:messageType:sessionID:transactionDelegate:]

  // instance methods
  -[VCControlChannelDialogV1 dealloc]
  -[VCControlChannelDialogV1 processMessageData:participantID:topic:transactionID:messageStatus:isInternalMessage:]
  -[VCControlChannelDialogV1 newDataFromMessage:topic:transactionID:isReliable:transactionDelegate:]
  -[VCControlChannelDialogV1 initWithSessionID:participantID:participantUUID:optionalTopics:participantConfig:transactionDelegate:]
  -[VCControlChannelDialogV1 processMessageFromParticipant:transactionID:messageType:transactionDelegate:]
  -[VCControlChannelDialogV1 decryptMessageWithMKI:message:buffer:size:sequenceNumber:]
  -[VCControlChannelDialogV1 processEncryptedPayload:isData:topic:sequenceNumber:MKIData:participantID:]
  -[VCControlChannelDialogV1 getTopic:message:fromPayload:]


VCCALayerHost : CALayerHost
  // instance methods
  -[VCCALayerHost layoutSublayers]
  -[VCCALayerHost initWithRemoteVideoClient:]


AVCRemoteVideoClient : NSObject
 @property  VideoAttributes *remoteScreenAttributes
 @property  VideoAttributes *remoteVideoAttributes
 @property  BOOL hasReceivedFirstFrame
 @property  BOOL isVideoPaused
 @property  BOOL isMediaStalled
 @property  BOOL isVideoDegraded
 @property  BOOL isVideoSuspended
 @property  BOOL hasReceivedLastFrame
 @property  BOOL shouldDisplayVideoInfoLayer
 @property  NSString *connectionTypeString
 @property  <AVCRemoteVideoClientDelegate> *delegate
 @property  long long streamToken

  // instance methods
  -[AVCRemoteVideoClient delegate]
  -[AVCRemoteVideoClient dealloc]
  -[AVCRemoteVideoClient setRootLayer:]
  -[AVCRemoteVideoClient observeValueForKeyPath:ofObject:change:context:]
  -[AVCRemoteVideoClient initWithStreamToken:delegate:]
  -[AVCRemoteVideoClient streamToken]
  -[AVCRemoteVideoClient isVideoPaused]
  -[AVCRemoteVideoClient setVideoLayer:forMode:]
  -[AVCRemoteVideoClient isMediaStalled]
  -[AVCRemoteVideoClient isVideoDegraded]
  -[AVCRemoteVideoClient hasReceivedFirstFrame]
  -[AVCRemoteVideoClient remoteVideoAttributes]
  -[AVCRemoteVideoClient remoteScreenAttributes]
  -[AVCRemoteVideoClient slotForMode:]
  -[AVCRemoteVideoClient setVideoLayerHost:forMode:]
  -[AVCRemoteVideoClient setHasReceivedFirstFrame:]
  -[AVCRemoteVideoClient setIsVideoPaused:]
  -[AVCRemoteVideoClient setRemoteScreenAttributes:]
  -[AVCRemoteVideoClient registerBlocksForNotifications]
  -[AVCRemoteVideoClient deregisterBlocksForNotifications]
  -[AVCRemoteVideoClient setRemoteVideoAttributes:]
  -[AVCRemoteVideoClient terminateConnection]
  -[AVCRemoteVideoClient setIsVideoDegraded:]
  -[AVCRemoteVideoClient setIsMediaStalled:]
  -[AVCRemoteVideoClient isVideoSuspended]
  -[AVCRemoteVideoClient setIsVideoSuspended:]
  -[AVCRemoteVideoClient cleanupVideoLayerForAllModes]
  -[AVCRemoteVideoClient setLayerHostBounds:]
  -[AVCRemoteVideoClient createCALayerHostForRootLayer:withContextId:]
  -[AVCRemoteVideoClient setFenceHandleAndGetXPCObject:]
  -[AVCRemoteVideoClient setRemoteVideoLayerBounds:]
  -[AVCRemoteVideoClient insertSubLayerInLayer:videoMode:videoSlot:]
  -[AVCRemoteVideoClient subLayerRefForMode:]
  -[AVCRemoteVideoClient subLayerForMode:]
  -[AVCRemoteVideoClient setActiveVideoLayerForMode:]
  -[AVCRemoteVideoClient cleanupSubLayerForMode:]
  -[AVCRemoteVideoClient cleanupLayerHost]
  -[AVCRemoteVideoClient setActiveVideoModeFromRemoteVideoAttribute:]
  -[AVCRemoteVideoClient checkpointDidReceiveFirstFrame]
  -[AVCRemoteVideoClient checkpointVideoAttributesDidChange]
  -[AVCRemoteVideoClient adjustInfoSubLayerBounds:forSuperLayer:]
  -[AVCRemoteVideoClient insertInfoSubLayerIntoLayer:videoMode:]
  -[AVCRemoteVideoClient updateConnectionInfoWithLocalInterfaceType:remoteInterfaceType:]
  -[AVCRemoteVideoClient drawText:inSubLayer:]
  -[AVCRemoteVideoClient findInfoSubLayerFromLayer:]
  -[AVCRemoteVideoClient hasReceivedLastFrame]
  -[AVCRemoteVideoClient setHasReceivedLastFrame:]
  -[AVCRemoteVideoClient shouldDisplayVideoInfoLayer]
  -[AVCRemoteVideoClient setShouldDisplayVideoInfoLayer:]
  -[AVCRemoteVideoClient connectionTypeString]
  -[AVCRemoteVideoClient setConnectionTypeString:]


VCBitrateRule : NSObject
 @property  unsigned int bitrate
 @property  int connectionType
 @property  VCVideoRule *limitingRule

  // instance methods
  -[VCBitrateRule setConnectionType:]
  -[VCBitrateRule compare:]
  -[VCBitrateRule dealloc]
  -[VCBitrateRule connectionType]
  -[VCBitrateRule bitrate]
  -[VCBitrateRule setBitrate:]
  -[VCBitrateRule initWithBitrate:connectionType:limitingRule:]
  -[VCBitrateRule limitingRule]


VCBitrateArbiter : NSObject
 @property  unsigned int maxAllowedBitrate
 @property  unsigned int maxAllowedBitrate2G
 @property  unsigned int maxAllowedBitrate3G
 @property  unsigned int maxAllowedBitrateLTE
 @property  unsigned int maxAllowedBitrateHighRat
 @property  unsigned int maxAllowedBitrateWifi
 @property  unsigned int maxAllowedBitrateP2P
 @property  unsigned int maxAllowedBitrateUSB
 @property  unsigned int maxAllowedBitrateTCPRelay

  // class methods
  +[VCBitrateArbiter updateMaxAllowedBitratePerConnection:connectionType:negotiatedSettings:]

  // instance methods
  -[VCBitrateArbiter dealloc]
  -[VCBitrateArbiter readHardwareValues]
  -[VCBitrateArbiter initWithDeviceRole:callLogFile:]
  -[VCBitrateArbiter createSupportedBitrateRuleSets]
  -[VCBitrateArbiter addRuleForBitrate:connectionType:limitingRule:]
  -[VCBitrateArbiter storeBagBitrateForKey:]
  -[VCBitrateArbiter readStoreBagValues:]
  -[VCBitrateArbiter updateMaxAllowedBitrate:key:type:isAudio:carrierBundleBitrates:]
  -[VCBitrateArbiter readCarrierBundleValues]
  -[VCBitrateArbiter maxAllowedCellularBitrate]
  -[VCBitrateArbiter maxAllowedScreenShareCellularBitrate]
  -[VCBitrateArbiter maxAllowedBitrateForConnectionType:]
  -[VCBitrateArbiter maxAllowedBitrateForVCConnection:forLocalInterface:]
  -[VCBitrateArbiter maxAllowedBitrateForVCConnection:forLocalInterface:encodeRule:]
  -[VCBitrateArbiter maxAllowedScreenShareBitrateForConnection:]
  -[VCBitrateArbiter maxAllowedAudioOnlyBitrateForConnection:]
  -[VCBitrateArbiter maxAllowedBitrateRuleForConnection:]
  -[VCBitrateArbiter maxAllowedBitrateForVCConnection:forLocalInterface:operatingMode:encodeRule:]
  -[VCBitrateArbiter maxAllowedBitrateForConnectionType:operatingMode:]
  -[VCBitrateArbiter updateNegotiatedSettings:]
  -[VCBitrateArbiter maxAllowedBitrate]
  -[VCBitrateArbiter maxAllowedBitrate2G]
  -[VCBitrateArbiter maxAllowedBitrate3G]
  -[VCBitrateArbiter maxAllowedBitrateLTE]
  -[VCBitrateArbiter maxAllowedBitrateHighRat]
  -[VCBitrateArbiter maxAllowedBitrateWifi]
  -[VCBitrateArbiter maxAllowedBitrateTCPRelay]
  -[VCBitrateArbiter maxAllowedBitrateP2P]
  -[VCBitrateArbiter maxAllowedBitrateUSB]


AVCPacketRelayDriver : NSObject
  // class methods
  +[AVCPacketRelayDriver sharedInstance]

  // instance methods
  -[AVCPacketRelayDriver dealloc]
  -[AVCPacketRelayDriver init]
  -[AVCPacketRelayDriver startMonitoringFileDescriptor:forConnection:]
  -[AVCPacketRelayDriver stopMonitoringFileDescriptor:]


CameraConferenceSynchronizer : NSObject
 @property  {CGSize=dd} localPortraitAspectRatio

  // instance methods
  -[CameraConferenceSynchronizer dealloc]
  -[CameraConferenceSynchronizer reset]
  -[CameraConferenceSynchronizer localPortraitAspectRatio]
  -[CameraConferenceSynchronizer setLocalPortraitAspectRatio:]
  -[CameraConferenceSynchronizer init]
  -[CameraConferenceSynchronizer shouldConferenceChangeCameraToCaptureSettings]
  -[CameraConferenceSynchronizer shouldConferenceSendFirstRemoteFrameNotification]
  -[CameraConferenceSynchronizer shouldConferenceChangeCameraToPreviewSettings]
  -[CameraConferenceSynchronizer changeCameraToCaptureSettings:forced:]
  -[CameraConferenceSynchronizer notifyClientOfRemoteFrame:]
  -[CameraConferenceSynchronizer cameraSizeChangedTo:]
  -[CameraConferenceSynchronizer scheduleFirstRemoteFrameNotification:]
  -[CameraConferenceSynchronizer scheduleCameraChangeToPreviewSettings]
  -[CameraConferenceSynchronizer scheduleCameraChangeToCaptureSettings:]


VCScreenShare : NSObject
 @property  NSNumber *clientPID
 @property  NSString *selectiveScreenUUID
 @property  unsigned int height
 @property  unsigned int width
 @property  unsigned int frameRate
 @property  unsigned int screenCaptureDisplayID
 @property  BOOL isWindowed
 @property  unsigned int selectiveSharingPort

  // instance methods
  -[VCScreenShare setClientPID:]
  -[VCScreenShare width]
  -[VCScreenShare clientPID]
  -[VCScreenShare height]
  -[VCScreenShare dealloc]
  -[VCScreenShare frameRate]
  -[VCScreenShare isWindowed]
  -[VCScreenShare screenCaptureDisplayID]
  -[VCScreenShare selectiveSharingPort]
  -[VCScreenShare selectiveScreenUUID]
  -[VCScreenShare setSelectiveScreenUUID:]
  -[VCScreenShare initWithConfig:pid:]
  -[VCScreenShare updateScreenShareWith:pid:]
  -[VCScreenShare setConfig:pid:]


VCMediaNegotiationFaceTimeSettings : PBCodable <NSCopying>
 @property  BOOL hasCapabilities
 @property  unsigned int capabilities
 @property  BOOL hasSwitches
 @property  unsigned int switches
 @property  BOOL hasOneToOneModeSupported
 @property  BOOL oneToOneModeSupported
 @property  BOOL hasMediaControlInfoSubVersion
 @property  unsigned int mediaControlInfoSubVersion
 @property  BOOL hasLinkProbingCapabilityVersion
 @property  unsigned int linkProbingCapabilityVersion

  // instance methods
  -[VCMediaNegotiationFaceTimeSettings setHasCapabilities:]
  -[VCMediaNegotiationFaceTimeSettings hasCapabilities]
  -[VCMediaNegotiationFaceTimeSettings copyTo:]
  -[VCMediaNegotiationFaceTimeSettings capabilities]
  -[VCMediaNegotiationFaceTimeSettings mergeFrom:]
  -[VCMediaNegotiationFaceTimeSettings dictionaryRepresentation]
  -[VCMediaNegotiationFaceTimeSettings copyWithZone:]
  -[VCMediaNegotiationFaceTimeSettings setCapabilities:]
  -[VCMediaNegotiationFaceTimeSettings readFrom:]
  -[VCMediaNegotiationFaceTimeSettings writeTo:]
  -[VCMediaNegotiationFaceTimeSettings isEqual:]
  -[VCMediaNegotiationFaceTimeSettings mediaControlInfoFECFeedbackVersion]
  -[VCMediaNegotiationFaceTimeSettings SIPDisabled]
  -[VCMediaNegotiationFaceTimeSettings secureMessagingRequired]
  -[VCMediaNegotiationFaceTimeSettings oneToOneModeSupported]
  -[VCMediaNegotiationFaceTimeSettings setOneToOneModeSupported:]
  -[VCMediaNegotiationFaceTimeSettings linkProbingCapabilityVersion]
  -[VCMediaNegotiationFaceTimeSettings setLinkProbingCapabilityVersion:]
  -[VCMediaNegotiationFaceTimeSettings setSwitches:]
  -[VCMediaNegotiationFaceTimeSettings setHasSwitches:]
  -[VCMediaNegotiationFaceTimeSettings hasSwitches]
  -[VCMediaNegotiationFaceTimeSettings setHasOneToOneModeSupported:]
  -[VCMediaNegotiationFaceTimeSettings hasOneToOneModeSupported]
  -[VCMediaNegotiationFaceTimeSettings mediaControlInfoSubVersion]
  -[VCMediaNegotiationFaceTimeSettings setMediaControlInfoSubVersion:]
  -[VCMediaNegotiationFaceTimeSettings setHasMediaControlInfoSubVersion:]
  -[VCMediaNegotiationFaceTimeSettings hasMediaControlInfoSubVersion]
  -[VCMediaNegotiationFaceTimeSettings setHasLinkProbingCapabilityVersion:]
  -[VCMediaNegotiationFaceTimeSettings hasLinkProbingCapabilityVersion]
  -[VCMediaNegotiationFaceTimeSettings switches]


VCStatisticsHistory : NSObject
  // instance methods
  -[VCStatisticsHistory dealloc]
  -[VCStatisticsHistory addStatsHistory:]
  -[VCStatisticsHistory getPacketLossRateAtTime:inMostRecentDuration:]
  -[VCStatisticsHistory getSendingBitrateAtTime:inMostRecentDuration:]
  -[VCStatisticsHistory getReceivingBitrateAtTime:inMostRecentDuration:]
  -[VCStatisticsHistory getServerStatsBitrateAtTime:inMostRecentDuration:]
  -[VCStatisticsHistory getBurstyLossAtTime:inMostRecentDuration:withPercentile:]
  -[VCStatisticsHistory addAndPruneSendHistory:upToTime:]
  -[VCStatisticsHistory getSendHistoryElementWithPacketId:]
  -[VCStatisticsHistory getRoundTripTimeWithPacketId:time:]
  -[VCStatisticsHistory isStatsElementOutOfOrder:]
  -[VCStatisticsHistory getStatsHistoryElementIndex:time:inMostRecentDuration:]
  -[VCStatisticsHistory handleWrappedAroundByteCountForStats:]
  -[VCStatisticsHistory resetHistory]
  -[VCStatisticsHistory clearSendHistory]


LogDumpUtility : NSObject
  // class methods
  +[LogDumpUtility removeFilesInDirectory:olderThan:]
  +[LogDumpUtility logFilename:dumpID:logNameType:prefix:suffix:]
  +[LogDumpUtility shouldCleanupFiles]
  +[LogDumpUtility getCachesDirectoryPath]
  +[LogDumpUtility getDefaultLogDumpPath]
  +[LogDumpUtility removeOldFilesInDefaultLogDumpPath]
  +[LogDumpUtility createDirectory:]
  +[LogDumpUtility createFileListSortedByTimestamp:]


VCSessionPresentationInfo : NSObject <NSSecureCoding>
 @property  BOOL hasPendingChanges
 @property  {tagAVCSessionPresentationInfo={CGRect={CGPoint=dd}{CGSize=dd}}IIC} avcSessionPresentationInfo
 @property  r^{tagVCSpatialAudioMetadataGlobalInfo=IffffffII} metadataGlobalInfo
 @property  unsigned char uiState

  // class methods
  +[VCSessionPresentationInfo supportsSecureCoding]
  +[VCSessionPresentationInfo layoutWithAVCLayout:]
  +[VCSessionPresentationInfo avcLayoutWithLayout:]
  +[VCSessionPresentationInfo uiStateWithAVCUIState:]
  +[VCSessionPresentationInfo avcUIStateWithUIState:]
  +[VCSessionPresentationInfo metadataSateWithUIState:]

  // instance methods
  -[VCSessionPresentationInfo setDisplayID:]
  -[VCSessionPresentationInfo encodeWithCoder:]
  -[VCSessionPresentationInfo hasPendingChanges]
  -[VCSessionPresentationInfo serialize]
  -[VCSessionPresentationInfo init]
  -[VCSessionPresentationInfo initWithCoder:]
  -[VCSessionPresentationInfo unserialize:]
  -[VCSessionPresentationInfo avcSessionPresentationInfo]
  -[VCSessionPresentationInfo setAvcSessionPresentationInfo:]
  -[VCSessionPresentationInfo metadataGlobalInfo]
  -[VCSessionPresentationInfo uiState]


AVCSessionConfiguration : NSObject
 @property  long long sessionMode
 @property  NSString *serviceName
 @property  NSObject<NSCopying> *reportingHierarchyToken
 @property  BOOL oneToOneModeEnabled
 @property  NSObject<OS_nw_activity> *parentNWActivity
 @property  NSUUID *conversationID
 @property  NSDate *conversationTimeBase
 @property  NSDate *conversationTimeBaseTruncated

  // class methods
  +[AVCSessionConfiguration clientSessionModeWithSessionMode:]
  +[AVCSessionConfiguration sessionModeWithClientSessionMode:]

  // instance methods
  -[AVCSessionConfiguration setServiceName:]
  -[AVCSessionConfiguration dealloc]
  -[AVCSessionConfiguration serviceName]
  -[AVCSessionConfiguration conversationID]
  -[AVCSessionConfiguration dictionary]
  -[AVCSessionConfiguration setConversationID:]
  -[AVCSessionConfiguration isOneToOneModeEnabled]
  -[AVCSessionConfiguration reportingHierarchyToken]
  -[AVCSessionConfiguration setReportingHierarchyToken:]
  -[AVCSessionConfiguration setOneToOneModeEnabled:]
  -[AVCSessionConfiguration sessionMode]
  -[AVCSessionConfiguration cleanupNwActivity]
  -[AVCSessionConfiguration setSessionMode:]
  -[AVCSessionConfiguration setParentNWActivity:]
  -[AVCSessionConfiguration conversationTimeBase]
  -[AVCSessionConfiguration setConversationTimeBase:]
  -[AVCSessionConfiguration conversationTimeBaseTruncated]
  -[AVCSessionConfiguration setConversationTimeBaseTruncated:]
  -[AVCSessionConfiguration parentNWActivity]
  -[AVCSessionConfiguration setUpWithDictionary:]
  -[AVCSessionConfiguration serializeNwActivity:]
  -[AVCSessionConfiguration deserializeNwActivity:]


VCVideoFrameBufferPool : NSObject
  // instance methods
  -[VCVideoFrameBufferPool initWithCapacity:]
  -[VCVideoFrameBufferPool dealloc]
  -[VCVideoFrameBufferPool addFrame:time:]
  -[VCVideoFrameBufferPool releaseFrameWithTime:]


VCMediaNegotiationBlobV2StreamGroupStream : PBCodable <NSCopying>
 @property  BOOL hasMetadata
 @property  unsigned int metadata
 @property  BOOL hasPayloadSpecOrPayloads
 @property  unsigned int payloadSpecOrPayloads
 @property  BOOL hasQualityIndex
 @property  unsigned int qualityIndex
 @property  BOOL hasRtpSSRC
 @property  unsigned int rtpSSRC
 @property  BOOL hasStreamID
 @property  unsigned int streamID
 @property  BOOL hasMaxNetworkBitrate
 @property  unsigned int maxNetworkBitrate
 @property  BOOL hasRepairedMaxNetworkBitrate
 @property  unsigned int repairedMaxNetworkBitrate
 @property  BOOL hasAudioChannelCount
 @property  unsigned int audioChannelCount
 @property  BOOL hasStreamIndex
 @property  unsigned int streamIndex
 @property  BOOL hasRequiredPackedPayload
 @property  NSData *requiredPackedPayload
 @property  BOOL hasOptionalPackedPayload
 @property  NSData *optionalPackedPayload
 @property  BOOL hasCoordinateSystem
 @property  unsigned int coordinateSystem

  // class methods
  +[VCMediaNegotiationBlobV2StreamGroupStream printWithLogFile:prefix:streamConfig:]
  +[VCMediaNegotiationBlobV2StreamGroupStream isDefaultPayloadConfigsWithStreamConfig:payloadConfigs:streamGroupID:]
  +[VCMediaNegotiationBlobV2StreamGroupStream streamIndex:forStreamGroupID:qualityIndex:isFallbackStream:]
  +[VCMediaNegotiationBlobV2StreamGroupStream qualityIndex:isFallbackStream:forStreamGroupID:streamIndex:]
  +[VCMediaNegotiationBlobV2StreamGroupStream defaultsForStreamGroupID:streamIndex:]
  +[VCMediaNegotiationBlobV2StreamGroupStream isFallbackStreamWithStreamGroupID:streamConfig:]
  +[VCMediaNegotiationBlobV2StreamGroupStream metadataWithStreamConfig:]
  +[VCMediaNegotiationBlobV2StreamGroupStream updateStreamConfig:withMetadata:]
  +[VCMediaNegotiationBlobV2StreamGroupStream payloadFlagWithPayload:]
  +[VCMediaNegotiationBlobV2StreamGroupStream payloadsWithStreamConfig:payloadBitmap:]
  +[VCMediaNegotiationBlobV2StreamGroupStream payloadSpecWithStreamConfig:payloadConfigs:payloadSpecs:]
  +[VCMediaNegotiationBlobV2StreamGroupStream payloadsWithPayloadBit:]
  +[VCMediaNegotiationBlobV2StreamGroupStream appendMetadata:toString:]
  +[VCMediaNegotiationBlobV2StreamGroupStream appendPayloadsToString:streamConfig:]
  +[VCMediaNegotiationBlobV2StreamGroupStream appendPayloadsSpecsToString:streamConfig:]

  // instance methods
  -[VCMediaNegotiationBlobV2StreamGroupStream hasMetadata]
  -[VCMediaNegotiationBlobV2StreamGroupStream copyTo:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setCoordinateSystem:]
  -[VCMediaNegotiationBlobV2StreamGroupStream streamID]
  -[VCMediaNegotiationBlobV2StreamGroupStream dealloc]
  -[VCMediaNegotiationBlobV2StreamGroupStream mergeFrom:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setMetadata:]
  -[VCMediaNegotiationBlobV2StreamGroupStream dictionaryRepresentation]
  -[VCMediaNegotiationBlobV2StreamGroupStream copyWithZone:]
  -[VCMediaNegotiationBlobV2StreamGroupStream readFrom:]
  -[VCMediaNegotiationBlobV2StreamGroupStream metadata]
  -[VCMediaNegotiationBlobV2StreamGroupStream coordinateSystem]
  -[VCMediaNegotiationBlobV2StreamGroupStream writeTo:]
  -[VCMediaNegotiationBlobV2StreamGroupStream isEqual:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setAudioChannelCount:]
  -[VCMediaNegotiationBlobV2StreamGroupStream audioChannelCount]
  -[VCMediaNegotiationBlobV2StreamGroupStream setStreamID:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasMetadata:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasMaxNetworkBitrate]
  -[VCMediaNegotiationBlobV2StreamGroupStream setRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasRepairedMaxNetworkBitrate:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasRepairedMaxNetworkBitrate]
  -[VCMediaNegotiationBlobV2StreamGroupStream maxNetworkBitrate]
  -[VCMediaNegotiationBlobV2StreamGroupStream qualityIndex]
  -[VCMediaNegotiationBlobV2StreamGroupStream setQualityIndex:]
  -[VCMediaNegotiationBlobV2StreamGroupStream repairedMaxNetworkBitrate]
  -[VCMediaNegotiationBlobV2StreamGroupStream rtpSSRC]
  -[VCMediaNegotiationBlobV2StreamGroupStream setRtpSSRC:]
  -[VCMediaNegotiationBlobV2StreamGroupStream streamIndex]
  -[VCMediaNegotiationBlobV2StreamGroupStream setStreamIndex:]
  -[VCMediaNegotiationBlobV2StreamGroupStream initWithStreamConfig:payloadConfigs:streamGroupID:defaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream initWithStreamConfig:payloadConfigs:streamGroupID:]
  -[VCMediaNegotiationBlobV2StreamGroupStream initSSRC:]
  -[VCMediaNegotiationBlobV2StreamGroupStream streamConfigWithPayloadConfigs:payloadConfigSampleRates:streamGroupID:]
  -[VCMediaNegotiationBlobV2StreamGroupStream usePayloadSpecWithGroupID:qualityIndexForPayloadSpecIndex:defaultPayloadSpecsForQualityIndex:]
  -[VCMediaNegotiationBlobV2StreamGroupStream usesPayloadConfigsWithGroupID:]
  -[VCMediaNegotiationBlobV2StreamGroupStream actualStreamIndex]
  -[VCMediaNegotiationBlobV2StreamGroupStream actualMaxNetworkBitrateWithDefaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream actualMaxRepairedNetworkBitrateWithDefaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream actualAudioChannelCountWithDefaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream actualMetadataWithDefaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream actualQualityIndexWithDefaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream updatePayloadSpecsForConfig:defaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream updatePayloadSpecsForConfig:defaultConfig:payloadConfigs:]
  -[VCMediaNegotiationBlobV2StreamGroupStream dataRequiredPacketPayload]
  -[VCMediaNegotiationBlobV2StreamGroupStream readRequiredPacketPayloadWithStreamConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream optionalPackedPayloaWithDefaultConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream readOptionalPacketPayload:]
  -[VCMediaNegotiationBlobV2StreamGroupStream requiredPayloadCompressWithConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream optionalPayloadCompressWithConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream compressWithConfig:]
  -[VCMediaNegotiationBlobV2StreamGroupStream mediaStreamGroupCoordinateSystem]
  -[VCMediaNegotiationBlobV2StreamGroupStream setNegotiatedCoordinateSystemFromCoordinateSystem:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasRtpSSRC:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasRtpSSRC]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasQualityIndex]
  -[VCMediaNegotiationBlobV2StreamGroupStream setPayloadSpecOrPayloads:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasPayloadSpecOrPayloads:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasPayloadSpecOrPayloads]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasQualityIndex:]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasStreamID:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasStreamID]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasAudioChannelCount:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasAudioChannelCount]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasStreamIndex:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasStreamIndex]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasRequiredPackedPayload]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasOptionalPackedPayload]
  -[VCMediaNegotiationBlobV2StreamGroupStream setHasCoordinateSystem:]
  -[VCMediaNegotiationBlobV2StreamGroupStream hasCoordinateSystem]
  -[VCMediaNegotiationBlobV2StreamGroupStream payloadSpecOrPayloads]
  -[VCMediaNegotiationBlobV2StreamGroupStream requiredPackedPayload]
  -[VCMediaNegotiationBlobV2StreamGroupStream setRequiredPackedPayload:]
  -[VCMediaNegotiationBlobV2StreamGroupStream optionalPackedPayload]
  -[VCMediaNegotiationBlobV2StreamGroupStream setOptionalPackedPayload:]


VCAudioTransmitter : NSObject <VCAudioIOSink, VCConnectionChangedHandler>
 @property  VCAudioTierPicker *audioTierPicker
 @property  VCAudioPayloadConfig *currentAudioPayloadConfig
 @property  VCPacketBundler *audioBundler
 @property  VCAudioTier *currentAudioTier
 @property  int audioTxBitrate
 @property  int actualAudioSendingBitrate
 @property  unsigned int lastSentAudioSampleTime
 @property  unsigned int sentAudioBytes
 @property  unsigned int encodedBytes
 @property  unsigned int redNumPayloads
 @property  unsigned int redMaxDelay20ms
 @property  NSDictionary *dtxMetrics
 @property  int operatingMode
 @property  unsigned char inputMeter
 @property  <VCAudioTransmitterDelegate> *delegate
 @property  BOOL isRedEnabled
 @property  BOOL ignoreSilence
 @property  unsigned int targetBitrate
 @property  unsigned int rateChangeCounter
 @property  {?=I[5I]Id{CGSize=dd}dIdII} currentChannelMetrics
 @property  BOOL isAudioStalled
 @property  int qualityIndicator
 @property  unsigned int maxIDSStreamIdCount
 @property  NSArray *supportedNumRedundantPayload
 @property  BOOL sendActiveVoiceOnly
 @property  BOOL currentDTXEnable
 @property  unsigned char mediaControlInfoVersion
 @property  BOOL useWiFiTiers
 @property  BOOL periodicReportingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioTransmitter initWithConfig:]
  -[VCAudioTransmitter setDelegate:]
  -[VCAudioTransmitter delegate]
  -[VCAudioTransmitter dealloc]
  -[VCAudioTransmitter stop]
  -[VCAudioTransmitter start]
  -[VCAudioTransmitter operatingMode]
  -[VCAudioTransmitter setOperatingMode:]
  -[VCAudioTransmitter qualityIndicator]
  -[VCAudioTransmitter setQualityIndicator:]
  -[VCAudioTransmitter targetBitrate]
  -[VCAudioTransmitter processNWConnectionNotification:]
  -[VCAudioTransmitter pushAudioSamples:]
  -[VCAudioTransmitter gatherRealtimeStats:]
  -[VCAudioTransmitter setTargetBitrate:]
  -[VCAudioTransmitter handleActiveConnectionChange:]
  -[VCAudioTransmitter sendActiveVoiceOnly]
  -[VCAudioTransmitter setSendActiveVoiceOnly:]
  -[VCAudioTransmitter setCurrentDTXEnable:]
  -[VCAudioTransmitter actualAudioSendingBitrate]
  -[VCAudioTransmitter redundancyController:redundancyPercentageDidChange:]
  -[VCAudioTransmitter isCurrentDTXEnabled]
  -[VCAudioTransmitter lastSentAudioSampleTime]
  -[VCAudioTransmitter mediaControlInfoVersion]
  -[VCAudioTransmitter setMediaControlInfoVersion:]
  -[VCAudioTransmitter redundancyController:redundancyIntervalDidChange:]
  -[VCAudioTransmitter packetsPerBundle]
  -[VCAudioTransmitter setInputMeter:]
  -[VCAudioTransmitter inputMeter]
  -[VCAudioTransmitter dtxMetrics]
  -[VCAudioTransmitter rateChangeCounter]
  -[VCAudioTransmitter registerReportingTask]
  -[VCAudioTransmitter redNumPayloads]
  -[VCAudioTransmitter redMaxDelay20ms]
  -[VCAudioTransmitter setMaxIDSStreamIdCount:]
  -[VCAudioTransmitter maxIDSStreamIdCount]
  -[VCAudioTransmitter isRedEnabled]
  -[VCAudioTransmitter ignoreSilence]
  -[VCAudioTransmitter setStreamIDs:]
  -[VCAudioTransmitter supportedNumRedundantPayload]
  -[VCAudioTransmitter setSupportedNumRedundantPayload:]
  -[VCAudioTransmitter redundancyControllerModeForOperatingMode:isRedEnabled:]
  -[VCAudioTransmitter initAudioValues]
  -[VCAudioTransmitter currentAudioPayloadConfig]
  -[VCAudioTransmitter shouldUpdateCodecBitrate:]
  -[VCAudioTransmitter shouldUpdateCodecBandwidth:]
  -[VCAudioTransmitter isCodecModeChangeRequestValid:]
  -[VCAudioTransmitter handleCodecModeChangeEvent:didUpdateBandwidth:didUpdateBitrate:]
  -[VCAudioTransmitter sendCodecModeChangeEvent:]
  -[VCAudioTransmitter setCellTech:remoteCellular:isIPV6:audioCap:]
  -[VCAudioTransmitter setupEncoderBuffer]
  -[VCAudioTransmitter setupAudio:]
  -[VCAudioTransmitter updateAudioTxRate]
  -[VCAudioTransmitter reportRedundancyConfigChange]
  -[VCAudioTransmitter nextAudioInterval:]
  -[VCAudioTransmitter shouldUseDtx]
  -[VCAudioTransmitter usedAudioPayloadForType:]
  -[VCAudioTransmitter removeUnusedAudioPayloads]
  -[VCAudioTransmitter setupAudioEncoders]
  -[VCAudioTransmitter allocateLastInputSampleBuffer:]
  -[VCAudioTransmitter maximumSamplesPerFrame]
  -[VCAudioTransmitter encodeBundleAndSendAudio:sampleCount:]
  -[VCAudioTransmitter encodeAudio:numInputSamples:outputBytes:numOutputBytes:withPayload:isTalking:]
  -[VCAudioTransmitter chooseAudioNetworkBitrate]
  -[VCAudioTransmitter sendAudioBundle:atTimeStamp:nextInterval:]
  -[VCAudioTransmitter bundleAndSendSamples:numEncodedBytes:withPayload:timeStamp:bufferedSamples:hasNewSamples:voiceActivity:priority:]
  -[VCAudioTransmitter setupAudioHeaderSize]
  -[VCAudioTransmitter setupAudioTierPicker]
  -[VCAudioTransmitter updateAudioTxBitrate]
  -[VCAudioTransmitter useAudioPayload:withBitrate:]
  -[VCAudioTransmitter useAudioTier:]
  -[VCAudioTransmitter sendAudioPacketImpl:bytesSent:]
  -[VCAudioTransmitter generateControlInfo]
  -[VCAudioTransmitter sendSframeEncryptedAudioPacket:]
  -[VCAudioTransmitter sendAudioPacket:]
  -[VCAudioTransmitter sendAudioPacket:payloadLength:payloadType:timestamp:priority:marker:nextInterval:padding:paddingLength:sendReport:]
  -[VCAudioTransmitter sentAudioBytes]
  -[VCAudioTransmitter sentAudioBytesShort]
  -[VCAudioTransmitter encodedBytes]
  -[VCAudioTransmitter logTierInfo:]
  -[VCAudioTransmitter setRedNumPayloads:withMaxDelay:]
  -[VCAudioTransmitter reportRTCPPacket]
  -[VCAudioTransmitter audioIssueDetectorCreateAndConfigure]
  -[VCAudioTransmitter audioIssueDetectorProcessFrame:payloadType:length:bitRate:]
  -[VCAudioTransmitter audioIssueDetectorStopAndFinalize]
  -[VCAudioTransmitter reportAWDMetrics]
  -[VCAudioTransmitter audioBundler]
  -[VCAudioTransmitter currentAudioTier]
  -[VCAudioTransmitter audioTxBitrate]
  -[VCAudioTransmitter setRateChangeCounter:]
  -[VCAudioTransmitter isAudioStalled]
  -[VCAudioTransmitter setIsAudioStalled:]
  -[VCAudioTransmitter currentChannelMetrics]
  -[VCAudioTransmitter setCurrentChannelMetrics:]
  -[VCAudioTransmitter useWiFiTiers]
  -[VCAudioTransmitter setUseWiFiTiers:]
  -[VCAudioTransmitter audioTierPicker]
  -[VCAudioTransmitter setAudioTierPicker:]
  -[VCAudioTransmitter periodicReportingEnabled]
  -[VCAudioTransmitter setPeriodicReportingEnabled:]


VCCallInfoBlob : PBCodable <NSCopying>
 @property  unsigned int callID
 @property  unsigned int clientVersion
 @property  NSString *deviceType
 @property  NSString *frameworkVersion
 @property  NSString *osVersion

  // instance methods
  -[VCCallInfoBlob setOsVersion:]
  -[VCCallInfoBlob clientVersion]
  -[VCCallInfoBlob copyTo:]
  -[VCCallInfoBlob setClientVersion:]
  -[VCCallInfoBlob dealloc]
  -[VCCallInfoBlob deviceType]
  -[VCCallInfoBlob mergeFrom:]
  -[VCCallInfoBlob osVersion]
  -[VCCallInfoBlob dictionaryRepresentation]
  -[VCCallInfoBlob copyWithZone:]
  -[VCCallInfoBlob readFrom:]
  -[VCCallInfoBlob setDeviceType:]
  -[VCCallInfoBlob writeTo:]
  -[VCCallInfoBlob isEqual:]
  -[VCCallInfoBlob callID]
  -[VCCallInfoBlob setCallID:]
  -[VCCallInfoBlob frameworkVersion]
  -[VCCallInfoBlob setFrameworkVersion:]
  -[VCCallInfoBlob stringForCheckpoint]


VCEmulatedOutputQueue : VCEmulatedNetworkElement
 @property  unsigned int numberOfPacketsInOutputQueue

  // instance methods
  -[VCEmulatedOutputQueue copyPacketFromPop]
  -[VCEmulatedOutputQueue runUntilTime:]
  -[VCEmulatedOutputQueue connectFrom:]
  -[VCEmulatedOutputQueue numberOfPacketsInOutputQueue]


VCTelephonyInterface : NSObject <CoreTelephonyClientDataDelegate>
 @property  <VCTelephonyInterfaceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCTelephonyInterface ctSubscriptionSlotForSubscriptionSlot:]
  +[VCTelephonyInterface ctDirectionForTelephonyLinkDirection:]
  +[VCTelephonyInterface telephonyLinkDirectionForCtDirection:]

  // instance methods
  -[VCTelephonyInterface unregisterForNotifications]
  -[VCTelephonyInterface setDelegate:]
  -[VCTelephonyInterface delegate]
  -[VCTelephonyInterface dealloc]
  -[VCTelephonyInterface registerForNotifications]
  -[VCTelephonyInterface init]
  -[VCTelephonyInterface anbrActivationState:enabled:]
  -[VCTelephonyInterface anbrBitrateRecommendation:bitrate:direction:]
  -[VCTelephonyInterface initWithTelephonySubscriptionSlot:]
  -[VCTelephonyInterface getAnbrActivationStateWithCompletionHandler:]
  -[VCTelephonyInterface queryAnbrBitrateRecommendation:direction:completionHandler:]
  -[VCTelephonyInterface handleTelephonyNotification:withInfo:]
  -[VCTelephonyInterface handleVocoderNotificationWithInfo:]
  -[VCTelephonyInterface translateVocoderTypeToCoreAudioType:]
  -[VCTelephonyInterface notifyCodecModeChangeEventToCT:]


AVCVirtualTTYDevice : NSObject
 @property  <AVCVirtualTTYDeviceDelegate> *delegate

  // instance methods
  -[AVCVirtualTTYDevice setDelegate:]
  -[AVCVirtualTTYDevice delegate]
  -[AVCVirtualTTYDevice dealloc]
  -[AVCVirtualTTYDevice stop]
  -[AVCVirtualTTYDevice start]
  -[AVCVirtualTTYDevice terminateSession]
  -[AVCVirtualTTYDevice sendCharacter:]
  -[AVCVirtualTTYDevice sendText:]
  -[AVCVirtualTTYDevice registerBlocksForDelegateNotifications]
  -[AVCVirtualTTYDevice deregisterBlocksForDelegateNotifications]
  -[AVCVirtualTTYDevice initWithMode:error:]
  -[AVCVirtualTTYDevice initWithStreamToken:error:]
  -[AVCVirtualTTYDevice initWithMode:error:streamToken:]


VCAudioPayloadConfig : NSObject
 @property  int payload
 @property  unsigned int flags
 @property  unsigned int samplesPerFrame
 @property  unsigned int codecSampleRate
 @property  unsigned int bitrate
 @property  int format
 @property  unsigned int internalBundleFactor
 @property  BOOL payloadOctetAligned
 @property  BOOL forcingBitrate
 @property  NSArray *supportedBitrates
 @property  NSArray *supportedBandwidths
 @property  unsigned int inputSampleRate
 @property  BOOL isDTXEnabled
 @property  unsigned int evsSIDPeriod
 @property  unsigned int blockSize
 @property  unsigned int bundleHeaderBytes
 @property  unsigned short evsChannelAwareOffset
 @property  BOOL evsHeaderFullOnly
 @property  BOOL isOpusInBandFecEnabled

  // instance methods
  -[VCAudioPayloadConfig configure:]
  -[VCAudioPayloadConfig payload]
  -[VCAudioPayloadConfig dealloc]
  -[VCAudioPayloadConfig flags]
  -[VCAudioPayloadConfig className]
  -[VCAudioPayloadConfig blockSize]
  -[VCAudioPayloadConfig bitrate]
  -[VCAudioPayloadConfig format]
  -[VCAudioPayloadConfig inputSampleRate]
  -[VCAudioPayloadConfig isDTXEnabled]
  -[VCAudioPayloadConfig supportedBandwidths]
  -[VCAudioPayloadConfig evsChannelAwareOffset]
  -[VCAudioPayloadConfig evsHeaderFullOnly]
  -[VCAudioPayloadConfig isOpusInBandFecEnabled]
  -[VCAudioPayloadConfig setUseSBR:]
  -[VCAudioPayloadConfig aacBitrate]
  -[VCAudioPayloadConfig createSupportedBitrates]
  -[VCAudioPayloadConfig createSupportedBitratesForAACELD]
  -[VCAudioPayloadConfig createSupportedBitratesForAACELD48]
  -[VCAudioPayloadConfig createSupportedBitratesForOpus]
  -[VCAudioPayloadConfig createSupportedBitratesForAMR8k]
  -[VCAudioPayloadConfig createSupportedBitratesForAMR16k]
  -[VCAudioPayloadConfig createSupportedBitratesForEVS]
  -[VCAudioPayloadConfig setupEncodeProperties:]
  -[VCAudioPayloadConfig initWithConfigDict:]
  -[VCAudioPayloadConfig qualityForBitRate:]
  -[VCAudioPayloadConfig codecSampleRate]
  -[VCAudioPayloadConfig samplesPerFrame]
  -[VCAudioPayloadConfig bundleHeaderBytes]
  -[VCAudioPayloadConfig supportedBitrates]
  -[VCAudioPayloadConfig internalBundleFactor]
  -[VCAudioPayloadConfig payloadOctetAligned]
  -[VCAudioPayloadConfig forcingBitrate]
  -[VCAudioPayloadConfig evsSIDPeriod]


VCTransportStreamGFT : NSObject
 @property  ^{tagVCMediaQueue=} mediaQueue

  // instance methods
  -[VCTransportStreamGFT dealloc]
  -[VCTransportStreamGFT mediaQueue]
  -[VCTransportStreamGFT receivePacket:]
  -[VCTransportStreamGFT setMediaQueue:]
  -[VCTransportStreamGFT initWithTransportSessionID:options:]
  -[VCTransportStreamGFT VCTransportStreamSendPacket:]
  -[VCTransportStreamGFT VCTransportStreamUnblock]
  -[VCTransportStreamGFT registerPacketCallbackContext:callback:]
  -[VCTransportStreamGFT unregisterPacketCallback]
  -[VCTransportStreamGFT processVTPPacket:]


VCSessionBandwidthAllocationTableStreamInfo : NSObject
 @property  NSArray *sortedEntries
 @property  NSMutableDictionary *qualityIndexToTableEntry

  // instance methods
  -[VCSessionBandwidthAllocationTableStreamInfo dealloc]
  -[VCSessionBandwidthAllocationTableStreamInfo init]
  -[VCSessionBandwidthAllocationTableStreamInfo addTableEntry:]
  -[VCSessionBandwidthAllocationTableStreamInfo entryForQualityIndex:]
  -[VCSessionBandwidthAllocationTableStreamInfo sortedEntries]
  -[VCSessionBandwidthAllocationTableStreamInfo qualityIndexToTableEntry]


VCSessionBandwidthAllocationTable : VCObject
 @property  NSDictionary *audioOnlyBitrateToStreamIDsTable
 @property  NSDictionary *audioVideoBitrateToStreamIDsTable
 @property  NSDictionary *videoOnlyBitrateToStreamIDsTable
 @property  NSDictionary *videoStreamIdToRepairStreamIdMap

  // instance methods
  -[VCSessionBandwidthAllocationTable dealloc]
  -[VCSessionBandwidthAllocationTable initWithType:]
  -[VCSessionBandwidthAllocationTable entryForStreamID:]
  -[VCSessionBandwidthAllocationTable addBandwidthAllocationTableEntry:]
  -[VCSessionBandwidthAllocationTable tableEntriesForStreamToken:]
  -[VCSessionBandwidthAllocationTable shouldUseRepairBitrateForEntry:isRedundancyEnabled:isRedundancyEnabledFor720Stream:]
  -[VCSessionBandwidthAllocationTable newAggregatedBandwidthTableWithRedundancy:redundancyEnabledFor720Stream:enableMap:]
  -[VCSessionBandwidthAllocationTable shouldAppendEntry:screenEncoderGroups:]
  -[VCSessionBandwidthAllocationTable cleanupStreamTokenEntries:currentNetworkBitrate:isRedundancyEnabled:screenEncoderGroups:]
  -[VCSessionBandwidthAllocationTable appendEntry:streamTokenEntries:currentNetworkBitrate:shouldUseRepairBitrate:screenEncoderGroups:]
  -[VCSessionBandwidthAllocationTable shouldAddBackupEntry:referenceTable:referenceQualityIndices:]
  -[VCSessionBandwidthAllocationTable printTable:]
  -[VCSessionBandwidthAllocationTable audioOnlyBitrateToStreamIDsTable]
  -[VCSessionBandwidthAllocationTable audioVideoBitrateToStreamIDsTable]
  -[VCSessionBandwidthAllocationTable videoOnlyBitrateToStreamIDsTable]
  -[VCSessionBandwidthAllocationTable videoStreamIdToRepairStreamIdMap]


VCEffectsManager : NSObject
 @property  <VCEffectsManagerDelegate> *delegate
 @property  NSMutableArray *effectsArray

  // class methods
  +[VCEffectsManager sharedManager]

  // instance methods
  -[VCEffectsManager setDelegate:]
  -[VCEffectsManager registerBlocksForService]
  -[VCEffectsManager delegate]
  -[VCEffectsManager dealloc]
  -[VCEffectsManager init]
  -[VCEffectsManager remoteQueueOperationHandlerWithError:operation:]
  -[VCEffectsManager createAllocators]
  -[VCEffectsManager releaseAllocators]
  -[VCEffectsManager encodeProcessedPixelBuffer:time:imageData:processTime:]
  -[VCEffectsManager initializeReceiveQueue:error:]
  -[VCEffectsManager isEffectsOn]
  -[VCEffectsManager isFaceMeshTrackingEnabled]
  -[VCEffectsManager updateThermalLevel:]
  -[VCEffectsManager capturedPixelBuffer:depthDataPixelBuffer:time:imageData:]
  -[VCEffectsManager renderPixelBuffer:time:]
  -[VCEffectsManager capturedPixelBuffer:depthBuffer:time:imageData:toClient:]
  -[VCEffectsManager resetEffectsLogging]
  -[VCEffectsManager checkEffectsHealth]
  -[VCEffectsManager effectsRegistered:]
  -[VCEffectsManager effectsArray]
  -[VCEffectsManager setEffectsArray:]


VCDefaults : NSObject
 @property  BOOL forceScreenHWI
 @property  BOOL forceHWI
 @property  BOOL forceMultiwayHWI
 @property  BOOL forceDisableThermal
 @property  int forceCaptureWidth
 @property  int forceCaptureHeight
 @property  int forceEncodeFramerate
 @property  int forceEncodeWidth
 @property  int forceEncodeHeight
 @property  int forceFramerate
 @property  int forceBitrate
 @property  int forceVideoPayload
 @property  int forceRecvVideoPayload
 @property  int forceKeyFrameInterval
 @property  BOOL forceARCapture
 @property  BOOL forceMirroredCapture
 @property  BOOL forceEnablePearlCamera
 @property  BOOL cameraVideoStablization
 @property  BOOL forceOneToOneMode
 @property  BOOL supportsOneToOneMode
 @property  BOOL forceDisableVideoRuleWiFi1080
 @property  BOOL forceDisableVideoRuleCell720
 @property  BOOL forceDisableProcessSpecificRequirements
 @property  BOOL enableBitstreamCapture
 @property  int enableRxDecodeYUVDump
 @property  BOOL enableVPBLogging
 @property  int enableTxSourceYuvDump
 @property  BOOL enableTxBitstreamDump
 @property  BOOL enableRecvBitstreamDump
 @property  BOOL enablePacketLogging
 @property  BOOL enableTxTimestampAlignmentLogs
 @property  BOOL disableVAD
 @property  int bundleAudio
 @property  BOOL audioRecordingEnabled
 @property  int forceAudioPayload
 @property  int forceAudioBitrate
 @property  int forceAudioPacketsPerBundle
 @property  int forceAudioHardwareSampleRate
 @property  float forceAudioPowerThreshold
 @property  int forceAudioPowerTimeInterval
 @property  BOOL forceDisableAudioPowerSpectrumRegister
 @property  BOOL forceUseFloat
 @property  int forceAudioChannelCount
 @property  BOOL disableRed
 @property  int forceRedNumPayloads
 @property  int forceRedMaxDelay
 @property  BOOL useSBR
 @property  unsigned int aacBlockSize
 @property  int forceVideoStreamResolution
 @property  int forceVideoStreamTxMaxBitrate
 @property  int forceVideoStreamTxMinBitrate
 @property  int forceVideoStreamFramerate
 @property  int forceVideoStreamKeyFrameInterval
 @property  int forceVideoStreamRxMaxBitrate
 @property  int forceVideoStreamRxMinBitrate
 @property  BOOL forceVideoStreamDisableBitrateCap
 @property  int forceVideoStreamPayload
 @property  BOOL forceVideoStreamLowLatency
 @property  double remoteMediaStallTimeout
 @property  BOOL videoStreamRateControlDumpEnabled
 @property  int videoStreamRateControlAlgorithm
 @property  BOOL forceDisableMediaQueue
 @property  BOOL mediaQueueDumpEnabled
 @property  int rateControllerType
 @property  int rateControlStatisticsQueueWaitTime
 @property  BOOL bandwidthEstimationDumpEnabled
 @property  BOOL rateControlDumpEnabled
 @property  BOOL rateControlLogEnabled
 @property  BOOL rateControlAllowVideoStop
 @property  BOOL rateControlAllowBurstyLossRampDown
 @property  int rateControlForceTxCap
 @property  int rateControlForceRxCap
 @property  int rateControlForceTxRate
 @property  int rateControlForceRxRate
 @property  int rateControlBasebandSlowDownFactor
 @property  int packetExpirationTime
 @property  int redundancyControlForceVideoRedundancyPercentage
 @property  BOOL isFECVersion2Enabled
 @property  int max2GRate
 @property  BOOL forceIPv6
 @property  int enableiRATSuggestion
 @property  int localWRMLinkType
 @property  BOOL enableGFTStatsReporting
 @property  BOOL enableGFTStatsReceiveThread
 @property  float pauseHeartbeatInterval
 @property  BOOL forceWiFiAssist
 @property  BOOL forceWiFiAssistOutOfBudget
 @property  int localRATTypeOverride
 @property  int extraPayloads
 @property  int encodingScore
 @property  BOOL canDecodeHD
 @property  BOOL shouldDisplayVideoInfoLayer
 @property  BOOL momentsUserPreferenceEnabled
 @property  BOOL momentsUseBestVideoRule
 @property  BOOL dumpMediaBlob
 @property  unsigned int maxActiveVideoEncoders
 @property  unsigned int maxActiveVideoDecoders
 @property  BOOL forceEVSWideBand
 @property  BOOL forceMuteAtStart
 @property  BOOL forceDisableVideoDegraded
 @property  BOOL forceDisableMediaStalled
 @property  unsigned int minParticipantCountSendVoiceActiveOnly
 @property  BOOL forceDisableMediaEncryption
 @property  BOOL forceDisableReporting
 @property  BOOL forceFECRepairStream
 @property  unsigned int forceVisibilityIndex
 @property  BOOL forceDisableMediaPriority
 @property  unsigned char audioPriorityDecaySlow
 @property  unsigned char audioPriorityDecayFast
 @property  unsigned char audioPriorityRampUpSpeed
 @property  float audioVoiceDetectionSensitivity
 @property  unsigned int silenceLevelMovingAveragePeriod
 @property  unsigned char forceAudioPriorityValue
 @property  BOOL forceAudioPriorityEnabled
 @property  unsigned int multiwayAudioNetworkBitrateCapWifi
 @property  unsigned int multiwayAudioNetworkBitrateCapCellular
 @property  unsigned int multiwayVideoNetworkBitrateCapWifi
 @property  unsigned int multiwayVideoNetworkBitrateCapCellular
 @property  unsigned int prominenceActiveProbabilityThreshold
 @property  unsigned int prominenceInactiveProbabilityThreshold
 @property  unsigned int prominenceActiveAccumulationThreshold
 @property  unsigned int prominenceInactiveAccumulationThreshold
 @property  BOOL forceDisableFaceZoom
 @property  BOOL enableHEIFAndHEVCForMoments
 @property  BOOL forceDynamicEffectsFramerate
 @property  float depthFrameRateMultiplier
 @property  BOOL forceDisableEffectsHealthCheck
 @property  BOOL forceDisableMessageEncryption

  // class methods
  +[VCDefaults sharedInstance]
  +[VCDefaults integerValueForKey:]
  +[VCDefaults integerValueForKey:defaultValue:]
  +[VCDefaults booleanValueForKey:defaultValue:]
  +[VCDefaults booleanValueForKey:]
  +[VCDefaults getDoubleValueForKey:defaultValue:]
  +[VCDefaults copyStringValueForKey:]

  // instance methods
  -[VCDefaults allocWithZone:]
  -[VCDefaults retain]
  -[VCDefaults release]
  -[VCDefaults copyWithZone:]
  -[VCDefaults retainCount]
  -[VCDefaults autorelease]
  -[VCDefaults init]
  -[VCDefaults maxActiveVideoEncoders]
  -[VCDefaults maxActiveVideoDecoders]
  -[VCDefaults useSBR]
  -[VCDefaults aacBlockSize]
  -[VCDefaults disableVAD]
  -[VCDefaults enableTxTimestampAlignmentLogs]
  -[VCDefaults packetExpirationTime]
  -[VCDefaults forceEVSWideBand]
  -[VCDefaults shouldDisplayVideoInfoLayer]
  -[VCDefaults forceScreenHWI]
  -[VCDefaults forceHWI]
  -[VCDefaults forceMultiwayHWI]
  -[VCDefaults forceDisableThermal]
  -[VCDefaults seperateString:]
  -[VCDefaults forceCaptureWidth]
  -[VCDefaults forceCaptureHeight]
  -[VCDefaults forceEncodeWidth]
  -[VCDefaults forceEncodeHeight]
  -[VCDefaults forceEncodeFramerate]
  -[VCDefaults forceFramerate]
  -[VCDefaults forceBitrate]
  -[VCDefaults forceVideoPayload]
  -[VCDefaults forceRecvVideoPayload]
  -[VCDefaults forceKeyFrameInterval]
  -[VCDefaults forceARCapture]
  -[VCDefaults forceMirroredCapture]
  -[VCDefaults forceEnablePearlCamera]
  -[VCDefaults forceDisableVideoRuleWiFi1080]
  -[VCDefaults forceDisableVideoRuleCell720]
  -[VCDefaults forceThermalLevelFramerate:]
  -[VCDefaults enableBitstreamCapture]
  -[VCDefaults enableRxDecodeYUVDump]
  -[VCDefaults enableVPBLogging]
  -[VCDefaults enableRecvBitstreamDump]
  -[VCDefaults enableTxSourceYuvDump]
  -[VCDefaults enableTxBitstreamDump]
  -[VCDefaults enablePacketLogging]
  -[VCDefaults extraPayloads]
  -[VCDefaults encodingScore]
  -[VCDefaults canDecodeHD]
  -[VCDefaults bundleAudio]
  -[VCDefaults audioRecordingEnabled]
  -[VCDefaults forceAudioPayload]
  -[VCDefaults forceAudioBitrate]
  -[VCDefaults forceAudioPacketsPerBundle]
  -[VCDefaults forceAudioHardwareSampleRate]
  -[VCDefaults forceAudioPowerThreshold]
  -[VCDefaults forceAudioPowerTimeInterval]
  -[VCDefaults forceUseFloat]
  -[VCDefaults forceAudioChannelCount]
  -[VCDefaults forceDisableAudioPowerSpectrumRegister]
  -[VCDefaults disableRed]
  -[VCDefaults forceRedNumPayloads]
  -[VCDefaults forceRedMaxDelay]
  -[VCDefaults forceVideoStreamResolution]
  -[VCDefaults forceVideoStreamTxMaxBitrate]
  -[VCDefaults forceVideoStreamTxMinBitrate]
  -[VCDefaults forceVideoStreamFramerate]
  -[VCDefaults forceVideoStreamKeyFrameInterval]
  -[VCDefaults forceVideoStreamRxMaxBitrate]
  -[VCDefaults forceVideoStreamRxMinBitrate]
  -[VCDefaults forceVideoStreamDisableBitrateCap]
  -[VCDefaults forceVideoStreamPayload]
  -[VCDefaults forceVideoStreamLowLatency]
  -[VCDefaults enableHEIFAndHEVCForMoments]
  -[VCDefaults videoStreamRateControlDumpEnabled]
  -[VCDefaults videoStreamRateControlAlgorithm]
  -[VCDefaults forceDisableMediaQueue]
  -[VCDefaults mediaQueueDumpEnabled]
  -[VCDefaults rateControllerType]
  -[VCDefaults rateControlStatisticsQueueWaitTime]
  -[VCDefaults bandwidthEstimationDumpEnabled]
  -[VCDefaults rateControlDumpEnabled]
  -[VCDefaults rateControlLogEnabled]
  -[VCDefaults rateControlAllowVideoStop]
  -[VCDefaults rateControlAllowBurstyLossRampDown]
  -[VCDefaults rateControlForceTxCap]
  -[VCDefaults rateControlForceRxCap]
  -[VCDefaults rateControlForceTxRate]
  -[VCDefaults rateControlForceRxRate]
  -[VCDefaults rateControlBasebandSlowDownFactor]
  -[VCDefaults redundancyControlForceVideoRedundancyPercentage]
  -[VCDefaults max2GRate]
  -[VCDefaults forceIPv6]
  -[VCDefaults enableiRATSuggestion]
  -[VCDefaults localWRMLinkType]
  -[VCDefaults localRATTypeOverride]
  -[VCDefaults enableGFTStatsReporting]
  -[VCDefaults enableGFTStatsReceiveThread]
  -[VCDefaults pauseHeartbeatInterval]
  -[VCDefaults forceWifiAssist]
  -[VCDefaults forceWifiAssistOutOfBudget]
  -[VCDefaults momentsUserPreferenceEnabled]
  -[VCDefaults momentsUseBestVideoRule]
  -[VCDefaults dumpMediaBlob]
  -[VCDefaults cameraVideoStablization]
  -[VCDefaults forceOneToOneMode]
  -[VCDefaults supportsOneToOneMode]
  -[VCDefaults forceMuteAtStart]
  -[VCDefaults minParticipantCountSendVoiceActiveOnly]
  -[VCDefaults forceVisibilityIndex]
  -[VCDefaults forceFECRepairStream]
  -[VCDefaults enableAudioDumpParticipantRemote:]
  -[VCDefaults enableAudioDumpParticipantLocal:]
  -[VCDefaults forceDisableMediaPriority]
  -[VCDefaults audioPriorityDecaySlow]
  -[VCDefaults audioPriorityDecayFast]
  -[VCDefaults audioPriorityRampUpSpeed]
  -[VCDefaults audioVoiceDetectionSensitivity]
  -[VCDefaults silenceLevelMovingAveragePeriod]
  -[VCDefaults forceAudioPriorityValue]
  -[VCDefaults forceAudioPriorityEnabled]
  -[VCDefaults multiwayAudioNetworkBitrateCapWifi]
  -[VCDefaults multiwayAudioNetworkBitrateCapCellular]
  -[VCDefaults multiwayVideoNetworkBitrateCapWifi]
  -[VCDefaults multiwayVideoNetworkBitrateCapCellular]
  -[VCDefaults forceDisableFaceZoom]
  -[VCDefaults forceDynamicEffectsFramerate]
  -[VCDefaults depthFrameRateMultiplier]
  -[VCDefaults forceDisableEffectsHealthCheck]
  -[VCDefaults forceDisableVideoDegraded]
  -[VCDefaults forceDisableMediaStalled]
  -[VCDefaults shouldOverrideEffectsFramerate:]
  -[VCDefaults forceDisableMediaEncryption]
  -[VCDefaults forceDisableMessageEncryption]
  -[VCDefaults forceDisableReporting]
  -[VCDefaults forceDisableProcessSpecificRequirements]
  -[VCDefaults prominenceActiveProbabilityThreshold]
  -[VCDefaults prominenceActiveAccumulationThreshold]
  -[VCDefaults prominenceInactiveProbabilityThreshold]
  -[VCDefaults prominenceInactiveAccumulationThreshold]
  -[VCDefaults remoteMediaStallTimeout]
  -[VCDefaults forceUseInternalRTPThreadingWithDefaultValue:]
  -[VCDefaults isFECVersion2Enabled]
  -[VCDefaults forceWiFiAssist]
  -[VCDefaults forceWiFiAssistOutOfBudget]


VCControlChannel : VCObject
 @property  id messageReceivedDelegate
 @property  id dataReceivedDelegate
 @property  unsigned int reliableMessageResendInterval

  // instance methods
  -[VCControlChannel dealloc]
  -[VCControlChannel init]
  -[VCControlChannel sendReliableMessageAndWait:withTopic:]
  -[VCControlChannel sendReliableMessage:withTopic:]
  -[VCControlChannel flushActiveMessages]
  -[VCControlChannel sendReliableMessageAndWait:withTopic:participantID:]
  -[VCControlChannel sendReliableMessage:withTopic:participantID:timeout:completion:]
  -[VCControlChannel sendReliableMessage:withTopic:participantID:]
  -[VCControlChannel sendUnreliableMessage:withTopic:participantID:]
  -[VCControlChannel setEncryptionWithEncryptionMaterial:]
  -[VCControlChannel setMessageReceivedDelegate:]
  -[VCControlChannel messageReceivedDelegate]
  -[VCControlChannel setDataReceivedDelegate:]
  -[VCControlChannel dataReceivedDelegate]
  -[VCControlChannel addOptionalTopic:]
  -[VCControlChannel throwNotSupportedExceptionForMethod:]
  -[VCControlChannel reliableMessageResendInterval]


VCMediaControlInfo : NSObject
 @property  unsigned long serializedSize
 @property  <VCMediaControlInfoDelegate> *delegate
 @property  unsigned char version
 @property  unsigned char fecFeedbackVersion

  // instance methods
  -[VCMediaControlInfo setDelegate:]
  -[VCMediaControlInfo delegate]
  -[VCMediaControlInfo version]
  -[VCMediaControlInfo invalidate]
  -[VCMediaControlInfo dispose]
  -[VCMediaControlInfo setVersion:]
  -[VCMediaControlInfo serializedSize]
  -[VCMediaControlInfo fecFeedbackVersion]
  -[VCMediaControlInfo setFecFeedbackVersion:]
  -[VCMediaControlInfo initWithBuffer:length:optionalControlInfo:version:]
  -[VCMediaControlInfo configureWithBuffer:length:optionalControlInfo:]
  -[VCMediaControlInfo setInfo:size:type:]
  -[VCMediaControlInfo setInfoUnserialized:type:]
  -[VCMediaControlInfo hasInfoType:]
  -[VCMediaControlInfo getInfo:bufferLength:infoSize:type:]
  -[VCMediaControlInfo getInfoUnserialized:type:]
  -[VCMediaControlInfo serializeToBuffer:bufferLength:blobLength:]


VCMediaControlInfoIPCamera : VCMediaControlInfo
  // instance methods
  -[VCMediaControlInfoIPCamera serializedSize]
  -[VCMediaControlInfoIPCamera configureWithBuffer:length:optionalControlInfo:]
  -[VCMediaControlInfoIPCamera setInfo:size:type:]
  -[VCMediaControlInfoIPCamera hasInfoType:]
  -[VCMediaControlInfoIPCamera getInfo:bufferLength:infoSize:type:]
  -[VCMediaControlInfoIPCamera serializeToBuffer:bufferLength:blobLength:]


VCMediaControlInfoFaceTimeAudio : VCMediaControlInfo
 @property  unsigned long feedbackSize
 @property  BOOL videoEnabled

  // instance methods
  -[VCMediaControlInfoFaceTimeAudio setVideoEnabled:]
  -[VCMediaControlInfoFaceTimeAudio videoEnabled]
  -[VCMediaControlInfoFaceTimeAudio serializedSize]
  -[VCMediaControlInfoFaceTimeAudio feedbackSize]
  -[VCMediaControlInfoFaceTimeAudio configureWithBuffer:length:optionalControlInfo:]
  -[VCMediaControlInfoFaceTimeAudio setInfo:size:type:]
  -[VCMediaControlInfoFaceTimeAudio setInfoUnserialized:type:]
  -[VCMediaControlInfoFaceTimeAudio hasInfoType:]
  -[VCMediaControlInfoFaceTimeAudio getInfo:bufferLength:infoSize:type:]
  -[VCMediaControlInfoFaceTimeAudio getInfoUnserialized:type:]
  -[VCMediaControlInfoFaceTimeAudio serializeToBuffer:bufferLength:blobLength:]
  -[VCMediaControlInfoFaceTimeAudio handleOptionalControlInfo:]


VCMediaControlInfoFaceTimeVideo : VCMediaControlInfo
  // instance methods
  -[VCMediaControlInfoFaceTimeVideo serializedSize]
  -[VCMediaControlInfoFaceTimeVideo configureWithBuffer:length:optionalControlInfo:]
  -[VCMediaControlInfoFaceTimeVideo setInfo:size:type:]
  -[VCMediaControlInfoFaceTimeVideo hasInfoType:]
  -[VCMediaControlInfoFaceTimeVideo getInfo:bufferLength:infoSize:type:]
  -[VCMediaControlInfoFaceTimeVideo serializeToBuffer:bufferLength:blobLength:]
  -[VCMediaControlInfoFaceTimeVideo handleOptionalControlInfo:]


VCMediaControlInfoMultiwayAudio : VCMediaControlInfo
  // instance methods
  -[VCMediaControlInfoMultiwayAudio serializedSize]
  -[VCMediaControlInfoMultiwayAudio configureWithBuffer:length:optionalControlInfo:]
  -[VCMediaControlInfoMultiwayAudio setInfo:size:type:]
  -[VCMediaControlInfoMultiwayAudio hasInfoType:]
  -[VCMediaControlInfoMultiwayAudio getInfo:bufferLength:infoSize:type:]
  -[VCMediaControlInfoMultiwayAudio serializeToBuffer:bufferLength:blobLength:]


VCVideoRuleCollectionsScreenSecondaryEmbedded : VCVideoRuleCollectionsScreenSecondary
  // class methods
  +[VCVideoRuleCollectionsScreenSecondaryEmbedded sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsScreenSecondaryEmbedded initWithHardwareSettings:]
  -[VCVideoRuleCollectionsScreenSecondaryEmbedded initSupportedPayloads]
  -[VCVideoRuleCollectionsScreenSecondaryEmbedded setupRules]
  -[VCVideoRuleCollectionsScreenSecondaryEmbedded setupH264Rules]
  -[VCVideoRuleCollectionsScreenSecondaryEmbedded setupHEVCRules]
  -[VCVideoRuleCollectionsScreenSecondaryEmbedded tilesPerFrame:]
  -[VCVideoRuleCollectionsScreenSecondaryEmbedded selectPreferredRule:screenSize:]


AVCSession : NSObject <AVCSessionParticipantDelegate, AVCSessionParticipantControlProtocol>
 @property  NSDictionary *capabilities
 @property  AVCSessionConfiguration *configuration
 @property  NSObject<OS_dispatch_queue> *delegateNotificationQueue
 @property  NSMutableDictionary *remoteParticipantsMap
 @property  NSMutableDictionary *participantsToAdd
 @property  AVCSessionParticipant *localParticipant
 @property  VCXPCClientShared *xpcConnection
 @property  long long sessionToken
 @property  NSArray *remoteParticipants
 @property  <AVCSessionDelegate> *delegate
 @property  {tagAVCSessionPresentationInfo={CGRect={CGPoint=dd}{CGSize=dd}}IIC} presentationInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *uuid
 @property  NSData *negotiationData
 @property  BOOL audioMuted
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL audioPaused
 @property  BOOL videoPaused
 @property  BOOL oneToOneEnabled
 @property  float volume
 @property  NSData *frequencyLevels

  // class methods
  +[AVCSession mediaNegotiatorVersionWithNegotiationProtocolVersion:]
  +[AVCSession configurationWithSessionMode:]

  // instance methods
  -[AVCSession updateConfiguration:]
  -[AVCSession setConfiguration:]
  -[AVCSession setDelegate:]
  -[AVCSession xpcConnection]
  -[AVCSession delegate]
  -[AVCSession configuration]
  -[AVCSession dealloc]
  -[AVCSession uuid]
  -[AVCSession sessionToken]
  -[AVCSession capabilities]
  -[AVCSession setVolume:]
  -[AVCSession stop]
  -[AVCSession addParticipant:]
  -[AVCSession volume]
  -[AVCSession addParticipants:]
  -[AVCSession setCapabilities:]
  -[AVCSession localParticipant]
  -[AVCSession start]
  -[AVCSession removeParticipant:]
  -[AVCSession setAudioEnabled:]
  -[AVCSession setVideoEnabled:]
  -[AVCSession removeParticipants:]
  -[AVCSession isAudioEnabled]
  -[AVCSession isScreenEnabled]
  -[AVCSession isVideoEnabled]
  -[AVCSession isAudioPaused]
  -[AVCSession setScreenEnabled:]
  -[AVCSession setAudioPaused:]
  -[AVCSession isVideoPaused]
  -[AVCSession setVideoPaused:]
  -[AVCSession stopWithError:]
  -[AVCSession setAudioMuted:]
  -[AVCSession negotiationData]
  -[AVCSession registerBlocksForNotifications]
  -[AVCSession delegateNotificationQueue]
  -[AVCSession remoteParticipants]
  -[AVCSession newNSErrorWithErrorDictionary:]
  -[AVCSession mediaStateForMediaType:]
  -[AVCSession participant:videoPaused:didSucceed:error:]
  -[AVCSession participant:videoEnabled:didSucceed:error:]
  -[AVCSession participant:audioPaused:didSucceed:error:]
  -[AVCSession participant:audioEnabled:didSucceed:error:]
  -[AVCSession participant:screenEnabled:didSucceed:error:]
  -[AVCSession participant:mediaStateDidChange:forMediaType:didSucceed:error:]
  -[AVCSession participant:mediaPrioritiesDidChange:]
  -[AVCSession setMediaState:forMediaType:]
  -[AVCSession isAudioMuted]
  -[AVCSession isOneToOneEnabled]
  -[AVCSession setOneToOneEnabled:]
  -[AVCSession frequencyLevels]
  -[AVCSession deregisterFromNotifications]
  -[AVCSession setupNotificationQueue:]
  -[AVCSession updateOneToOneModeEnabled:]
  -[AVCSession negotiationDataForProtocolVersion:]
  -[AVCSession negotiationDataForLoopbackParticipant]
  -[AVCSession presentationInfo]
  -[AVCSession setPresentationInfo:]
  -[AVCSession initPrivateWithTransportToken:configuration:negotiationData:delegate:queue:]
  -[AVCSession initWithTransportToken:configuration:negotiationData:delegate:queue:]
  -[AVCSession initWithTransportToken:configuration:delegate:queue:]
  -[AVCSession validateParticipantToAdd:]
  -[AVCSession validateParticipantToRemove:]
  -[AVCSession beginParticipantConfiguration]
  -[AVCSession appendConfigurationToXPCArguments:]
  -[AVCSession endParticipantConfiguration]
  -[AVCSession validateParticipantConfiguration]
  -[AVCSession didAddParticipantHandlerWithResult:]
  -[AVCSession participant:frequencyLevelsDidChange:]
  -[AVCSession remoteParticipantsMap]
  -[AVCSession participantsToAdd]


VCStreamInputCaptureSource : VCVideoCapture <VCVideoSink>
 @property  int captureSourceID
 @property  long long streamInputID
 @property  r^{opaqueCMFormatDescription=} formatDescription
 @property  unsigned int frameRate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCStreamInputCaptureSource readIntegerFromConfig:key:value:]
  +[VCStreamInputCaptureSource readUint32FromConfig:key:value:]

  // instance methods
  -[VCStreamInputCaptureSource setDelegate:]
  -[VCStreamInputCaptureSource dealloc]
  -[VCStreamInputCaptureSource frameRate]
  -[VCStreamInputCaptureSource formatDescription]
  -[VCStreamInputCaptureSource isEqual:]
  -[VCStreamInputCaptureSource onVideoFrame:frameTime:attribute:]
  -[VCStreamInputCaptureSource addSink:]
  -[VCStreamInputCaptureSource removeSink:]
  -[VCStreamInputCaptureSource sourceFrameRateDidChange:]
  -[VCStreamInputCaptureSource streamInputID]
  -[VCStreamInputCaptureSource initWithCaptureSourceID:configuration:]
  -[VCStreamInputCaptureSource setupFormatWithConfiguration:]
  -[VCStreamInputCaptureSource setupVideoFormatWithConfiguration:]
  -[VCStreamInputCaptureSource setupDataFormatWithConfiguration:]
  -[VCStreamInputCaptureSource allSinksSuspended]
  -[VCStreamInputCaptureSource didSuspendVideoSink:]
  -[VCStreamInputCaptureSource didResumeVideoSink:]
  -[VCStreamInputCaptureSource captureSourceID]
  -[VCStreamInputCaptureSource setCaptureSourceID:]


AVCVideoStream : NSObject <VCMediaStreamDelegate>
 @property  NSDictionary *capabilities
 @property  AVCMediaStreamConfig *configuration
 @property  long long direction
 @property  BOOL rtcpEnabled
 @property  BOOL rtpTimeOutEnabled
 @property  BOOL rtcpTimeOutEnabled
 @property  double rtpTimeOutIntervalSec
 @property  double rtcpTimeOutIntervalSec
 @property  double rtcpSendIntervalSec
 @property  long long streamToken
 @property  <AVCVideoStreamDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVCVideoStream capabilities]
  +[AVCVideoStream extractClientDownlinkQualityInfoDictionary:]
  +[AVCVideoStream extractClientUplinkQualityInfoDictionary:]

  // instance methods
  -[AVCVideoStream setConfiguration:]
  -[AVCVideoStream setDirection:]
  -[AVCVideoStream setDelegate:]
  -[AVCVideoStream delegate]
  -[AVCVideoStream configuration]
  -[AVCVideoStream pause]
  -[AVCVideoStream dealloc]
  -[AVCVideoStream resume]
  -[AVCVideoStream capabilities]
  -[AVCVideoStream stop]
  -[AVCVideoStream getStats]
  -[AVCVideoStream direction]
  -[AVCVideoStream setCapabilities:]
  -[AVCVideoStream start]
  -[AVCVideoStream streamToken]
  -[AVCVideoStream configure:error:]
  -[AVCVideoStream setRtcpTimeOutIntervalSec:]
  -[AVCVideoStream isRTPTimeOutEnabled]
  -[AVCVideoStream setRtcpEnabled:]
  -[AVCVideoStream initWithNetworkSockets:callID:error:]
  -[AVCVideoStream setRtpTimeOutIntervalSec:]
  -[AVCVideoStream setRtpTimeOutEnabled:]
  -[AVCVideoStream setRtcpSendIntervalSec:]
  -[AVCVideoStream setRtcpTimeOutEnabled:]
  -[AVCVideoStream initWithNWConnectionClientID:options:error:]
  -[AVCVideoStream requestLastDecodedFrame]
  -[AVCVideoStream updateVideoConfiguration:]
  -[AVCVideoStream initWithIDSDestination:callID:error:]
  -[AVCVideoStream isRTCPEnabled]
  -[AVCVideoStream isRTCPTimeOutEnabled]
  -[AVCVideoStream rtpTimeOutIntervalSec]
  -[AVCVideoStream rtcpTimeOutIntervalSec]
  -[AVCVideoStream rtcpSendIntervalSec]
  -[AVCVideoStream terminateSession]
  -[AVCVideoStream refreshLoggingParameters]
  -[AVCVideoStream vcMediaStreamServerDidDie:]
  -[AVCVideoStream vcMediaStreamDidRTPTimeOut:]
  -[AVCVideoStream vcMediaStreamDidRTCPTimeOut:]
  -[AVCVideoStream vcMediaStream:didReceiveRTCPPackets:]
  -[AVCVideoStream vcMediaStream:downlinkQualityDidChange:]
  -[AVCVideoStream vcMediaStream:uplinkQualityDidChange:]
  -[AVCVideoStream vcMediaStream:didUpdateVideoConfiguration:error:dictionary:]
  -[AVCVideoStream registerBlocksForDelegateNotifications]
  -[AVCVideoStream deregisterBlocksForDelegateNotifications]
  -[AVCVideoStream vcMediaStream:didStartStream:error:]
  -[AVCVideoStream vcMediaStreamDidStop:]
  -[AVCVideoStream vcMediaStream:didPauseStream:error:]
  -[AVCVideoStream vcMediaStream:didResumeStream:error:]
  -[AVCVideoStream initWithNetworkSockets:options:error:]
  -[AVCVideoStream initWithLocalAddress:networkSockets:IDSDestination:connectionClientID:callID:options:error:]


VCAudioStreamReceiveGroupConfig : VCMediaStreamGroupConfig <VCAudioStreamGroupConfig>
 @property  VCAudioCaptionsCoordinator *captionsCoordinator
 @property  VCAudioStreamGroupCommonConfig *audioStreamGroupConfig
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VCAudioStreamReceiveGroupConfig dealloc]
  -[VCAudioStreamReceiveGroupConfig init]
  -[VCAudioStreamReceiveGroupConfig captionsCoordinator]
  -[VCAudioStreamReceiveGroupConfig setCaptionsCoordinator:]
  -[VCAudioStreamReceiveGroupConfig audioStreamGroupConfig]
  -[VCAudioStreamReceiveGroupConfig setAudioStreamGroupConfig:]


VCTextStreamConfig : VCMediaStreamConfig
 @property  BOOL redEnabled
 @property  unsigned char numRedundantPayloads
 @property  float txIntervalMin

  // instance methods
  -[VCTextStreamConfig setTxIntervalMin:]
  -[VCTextStreamConfig setNumRedundantPayloads:]
  -[VCTextStreamConfig initWithClientDictionary:]
  -[VCTextStreamConfig isRedEnabled]
  -[VCTextStreamConfig setupCodecWithClientDictionary:]
  -[VCTextStreamConfig numRedundantPayloads]
  -[VCTextStreamConfig txIntervalMin]


VCObject : NSObject
 @property  NSString *logPrefix
 @property  ^{opaqueRTCReporting=} reportingAgent

  // class methods
  +[VCObject terminateProcess:terminateSource:agent:]

  // instance methods
  -[VCObject logPrefix]
  -[VCObject unlock]
  -[VCObject setLogPrefix:]
  -[VCObject dealloc]
  -[VCObject lock]
  -[VCObject init]
  -[VCObject reportingAgent]
  -[VCObject setReportingAgent:]
  -[VCObject stopTimeoutTimer]
  -[VCObject startDeallocTimer]
  -[VCObject startTimeoutTimer]
  -[VCObject startDeallocTimerWithTimeout:]
  -[VCObject startTerminationTimer:terminationType:]
  -[VCObject stopTerminationTimer]


VCHardwareOperatingModeSettings : NSObject
 @property  unsigned int usageMode
 @property  BOOL supportVCPDecoderHEVC
 @property  BOOL supportVCPEncoderHEVC
 @property  BOOL vcpInitializedForHEVC
 @property  NSString *featureListStringHEVC
 @property  NSString *featureListStringH264
 @property  unsigned int tilesPerVideoFrame

  // class methods
  +[VCHardwareOperatingModeSettings encoderUsageTypeWithOperatingMode:]

  // instance methods
  -[VCHardwareOperatingModeSettings initWithMode:]
  -[VCHardwareOperatingModeSettings dealloc]
  -[VCHardwareOperatingModeSettings vcpSupportsHEVCEncoder]
  -[VCHardwareOperatingModeSettings tilesPerVideoFrame]
  -[VCHardwareOperatingModeSettings numTilesPerVideoFrameForHDRMode:]
  -[VCHardwareOperatingModeSettings vcpSupportsHEVCDecoder]
  -[VCHardwareOperatingModeSettings featureListString]
  -[VCHardwareOperatingModeSettings vcpCodecGetPropertiesForID:block:]
  -[VCHardwareOperatingModeSettings usageMode]
  -[VCHardwareOperatingModeSettings supportVCPDecoderHEVC]
  -[VCHardwareOperatingModeSettings supportVCPEncoderHEVC]
  -[VCHardwareOperatingModeSettings vcpInitializedForHEVC]
  -[VCHardwareOperatingModeSettings featureListStringHEVC]
  -[VCHardwareOperatingModeSettings featureListStringH264]


VCHardwareSettings : NSObject
 @property  BOOL supportHEVC
 @property  BOOL vcpSupportsHEVCEncoder
 @property  BOOL isVideoRenderingSupported
 @property  NSSet *pixelFormatCollections
 @property  BOOL isSiriVoiceTapSupported
 @property  BOOL isSiriVoicePlayoutSupported

  // class methods
  +[VCHardwareSettings deviceClass]
  +[VCHardwareSettings screenWidth]
  +[VCHardwareSettings supportsHEVCEncoding]
  +[VCHardwareSettings supportsHEIFEncoding]
  +[VCHardwareSettings isSpatialAudioSupported]
  +[VCHardwareSettings screenHeight]
  +[VCHardwareSettings supportedVideoPayloads]
  +[VCHardwareSettings isCaptionsSupported]
  +[VCHardwareSettings maxActiveVideoEncoders]
  +[VCHardwareSettings maxActiveVideoDecoders]
  +[VCHardwareSettings isSiriVoiceTapSupported]
  +[VCHardwareSettings isSiriVoicePlayoutSupported]
  +[VCHardwareSettings maxOneToOneFramerateSupported]
  +[VCHardwareSettings maxMultiwayFramerateSupported]
  +[VCHardwareSettings maxRemoteParticipants30fps]
  +[VCHardwareSettings maxFpsCameraCaptureDuringSharing]
  +[VCHardwareSettings screenWidthForDisplayID:]
  +[VCHardwareSettings shouldOverrideGPUMuxing]
  +[VCHardwareSettings screenHeightForDisplayID:]
  +[VCHardwareSettings previewPreferredAspectRatio]
  +[VCHardwareSettings maxScreenEncodingSizeSupported]
  +[VCHardwareSettings maxActiveScreenEncoders]
  +[VCHardwareSettings maxFrameRateSupportedScreenShare]
  +[VCHardwareSettings shouldEnforceScreenFrameRateLimit]
  +[VCHardwareSettings limitCameraDownlinkBitrateDuringSharing]
  +[VCHardwareSettings supportsDedicatedSystemAudioStream]
  +[VCHardwareSettings disableMLScalarDuringSharing]
  +[VCHardwareSettings screenShareCapabilities]
  +[VCHardwareSettings supportsPortraitCameraCapture]
  +[VCHardwareSettings preferPresentationTimestamp]
  +[VCHardwareSettings isCellularTappingSupported]
  +[VCHardwareSettings isCaptureSIFRPreferred]
  +[VCHardwareSettings isDisplayPortrait]
  +[VCHardwareSettings maxFrameRateSupportedBackgroundBlur]
  +[VCHardwareSettings builtinMicCount]
  +[VCHardwareSettings disableViewPointCorrectionForSharing]
  +[VCHardwareSettings supportsHEVCDecoding]
  +[VCHardwareSettings isVideoRenderingSupported]
  +[VCHardwareSettings maxVCPSupportedTemporalLayers]
  +[VCHardwareSettings frontCameraOffsetFromDisplayCenter]
  +[VCHardwareSettings retainPixelBufferForMomentsEnabled]

  // instance methods
  -[VCHardwareSettings dealloc]
  -[VCHardwareSettings init]
  -[VCHardwareSettings supportHEVC]
  -[VCHardwareSettings vcpSupportsHEVCEncoder]
  -[VCHardwareSettings isSiriVoiceTapSupported]
  -[VCHardwareSettings isSiriVoicePlayoutSupported]
  -[VCHardwareSettings isVideoRenderingSupported]
  -[VCHardwareSettings featureListStringForH264:]
  -[VCHardwareSettings featureListStringForHEVC:]
  -[VCHardwareSettings isHEVCEncodeSupported:]
  -[VCHardwareSettings isHEVCDecodeSupported:]
  -[VCHardwareSettings tilesPerVideoFrame:]
  -[VCHardwareSettings tilesPerVideoFrame:hdrMode:]
  -[VCHardwareSettings storeHardwareSettingsForAllOperatingModes]
  -[VCHardwareSettings maxNetworkBitrateMultiwayAudioOnWifi:isLowLatencyAudio:]
  -[VCHardwareSettings maxNetworkBitrateMultiwayVideoOnWifi:]
  -[VCHardwareSettings pixelFormatCollections]


VCVideoRuleCollectionKey : NSObject <NSCopying>
 @property  int payload
 @property  unsigned char transportType
 @property  unsigned char encodingType

  // instance methods
  -[VCVideoRuleCollectionKey payload]
  -[VCVideoRuleCollectionKey transportType]
  -[VCVideoRuleCollectionKey copyWithZone:]
  -[VCVideoRuleCollectionKey isEqual:]
  -[VCVideoRuleCollectionKey encodingType]
  -[VCVideoRuleCollectionKey initWithPayload:transportType:encodingType:]


VCVideoRuleCollections : NSObject
 @property  NSArray *supportedPayloads
 @property  NSDictionary *rules
 @property  BOOL isEncodeSupported
 @property  BOOL isDecodeSupported
 @property  NSSet *supportedTransportTypes

  // class methods
  +[VCVideoRuleCollections newCorrectedVideoRules:payload:]

  // instance methods
  -[VCVideoRuleCollections dealloc]
  -[VCVideoRuleCollections rules]
  -[VCVideoRuleCollections isEqual:]
  -[VCVideoRuleCollections init]
  -[VCVideoRuleCollections supportedTransportTypes]
  -[VCVideoRuleCollections supportedPayloads]
  -[VCVideoRuleCollections isPayloadSupported:]
  -[VCVideoRuleCollections addVideoRules:transportType:payload:encodingType:]
  -[VCVideoRuleCollections filterRules:byBitrateRule:]
  -[VCVideoRuleCollections supportedVideoRulesSyncForTransportType:payload:encodingType:]
  -[VCVideoRuleCollections supportedVideoSizesForKey:]
  -[VCVideoRuleCollections getVideoRulesForTransport:payload:encodingType:]
  -[VCVideoRuleCollections supportedVideoRulesSizesForBitrate:transportType:payload:encodingType:]
  -[VCVideoRuleCollections supportedVideoRulesForBitrate:transportType:payload:encodingType:]
  -[VCVideoRuleCollections appendVideoRules:transportType:payload:encodingType:]
  -[VCVideoRuleCollections removeVideoRulesWithWidth:height:transportType:encodingType:]
  -[VCVideoRuleCollections limitRulesFromVideoRules:frameHeight:videoRules:]
  -[VCVideoRuleCollections limitVideoRulesToMaxWidth:maxHeight:transportType:]
  -[VCVideoRuleCollections addSupportedPayload:]
  -[VCVideoRuleCollections isEncodeSupported]
  -[VCVideoRuleCollections isDecodeSupported]
  -[VCVideoRuleCollections videoRulesCollectionsByRemovingPayload:andPayload:removeCellular:]


VCSessionParticipant : VCObject <VCMediaStreamDelegate, VCSecurityEventHandler, VCAudioIOSink, VCAudioIODelegate, VCConnectionChangedHandler, VCRedundancyControllerDelegate, VCAudioPowerSpectrumSourceDelegate, VCMediaStreamGroupDelegate>
 @property  NSString *uuid
 @property  unsigned long idsParticipantID
 @property  NSData *opaqueData
 @property  <VCSessionParticipantDelegate> *delegate
 @property  <VCSessionParticipantStreamDelegate> *streamDelegate
 @property  BOOL muted
 @property  BOOL audioEnabled
 @property  BOOL videoEnabled
 @property  BOOL screenEnabled
 @property  BOOL audioPaused
 @property  BOOL videoPaused
 @property  float audioPosition
 @property  float volume
 @property  NSArray *audioStreams
 @property  NSArray *allParticipantStreamInfo
 @property  NSArray *allParticipantManagedStreamInfos
 @property  (tagNTP=Q{?=II}) creationTime
 @property  NSDictionary *participantStreamTokens
 @property  AVCStatisticsCollector *statisticsCollector
 @property  AVCBasebandCongestionDetector *basebandCongestionDetector
 @property  unsigned int cellularUniqueTag
 @property  VCAudioRuleCollection *supportedAudioRules
 @property  VCSessionMediaNegotiator *mediaNegotiator
 @property  BOOL localOnWiFi
 @property  ^{opaqueRTCReporting=} reportingAgent
 @property  VCSessionParticipantOneToOneConfig *oneToOneConfig
 @property  ^{tagVCMediaQueue=} mediaQueue
 @property  BOOL hasVideoStreams
 @property  BOOL hasScreenStreams
 @property  BOOL oneToOneModeEnabled
 @property  VCCallInfoBlob *callInfoBlob
 @property  int operatingMode
 @property  BOOL sharingEnabled
 @property  unsigned char presentationState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VCSessionParticipant participantInfoWithParticipantData:]
  +[VCSessionParticipant participantDataWithParticipantInfo:]
  +[VCSessionParticipant participantDataWithMediaNegotiatorVersion:participantData:]
  +[VCSessionParticipant participantDataWithParticipantData:isReinit:]
  +[VCSessionParticipant streamGroupIDsFromParticipantData:]
  +[VCSessionParticipant addCodecModesForPayload:toCodecConfig:]
  +[VCSessionParticipant applyVideoNegotiatedSettings:toStreamConfiguration:withFeatureStringDictionary:]
  +[VCSessionParticipant mediaStreamGroupStateToVCStreamGroupState:]
  +[VCSessionParticipant mediaTypesFromStreamGroupID:]

  // instance methods
  -[VCSessionParticipant presentationState]
  -[VCSessionParticipant setPresentationState:]
  -[VCSessionParticipant delegate]
  -[VCSessionParticipant creationTime]
  -[VCSessionParticipant dealloc]
  -[VCSessionParticipant uuid]
  -[VCSessionParticipant isMuted]
  -[VCSessionParticipant setVolume:]
  -[VCSessionParticipant stop]
  -[VCSessionParticipant volume]
  -[VCSessionParticipant sharingEnabled]
  -[VCSessionParticipant setMuted:]
  -[VCSessionParticipant start]
  -[VCSessionParticipant setState:]
  -[VCSessionParticipant setSharingEnabled:]
  -[VCSessionParticipant mediaQueue]
  -[VCSessionParticipant setAudioEnabled:]
  -[VCSessionParticipant setVideoEnabled:]
  -[VCSessionParticipant operatingMode]
  -[VCSessionParticipant isAudioEnabled]
  -[VCSessionParticipant isScreenEnabled]
  -[VCSessionParticipant isVideoEnabled]
  -[VCSessionParticipant isAudioPaused]
  -[VCSessionParticipant setScreenEnabled:]
  -[VCSessionParticipant setAudioPaused:]
  -[VCSessionParticipant isOneToOneModeEnabled]
  -[VCSessionParticipant isVideoPaused]
  -[VCSessionParticipant setVideoPaused:]
  -[VCSessionParticipant setOneToOneModeEnabled:]
  -[VCSessionParticipant didUpdateBasebandCodec:]
  -[VCSessionParticipant didServerDie]
  -[VCSessionParticipant basebandCongestionDetector]
  -[VCSessionParticipant setBasebandCongestionDetector:]
  -[VCSessionParticipant statisticsCollector]
  -[VCSessionParticipant setStatisticsCollector:]
  -[VCSessionParticipant reportingAgent]
  -[VCSessionParticipant setReportingAgent:]
  -[VCSessionParticipant pushAudioSamples:]
  -[VCSessionParticipant audioPowerSpectrumSinkDidRegister]
  -[VCSessionParticipant audioPowerSpectrumSinkDidUnregister]
  -[VCSessionParticipant didSuspendAudioIO:]
  -[VCSessionParticipant didResumeAudioIO:]
  -[VCSessionParticipant audioStreams]
  -[VCSessionParticipant configureAudioIOWithDeviceRole:operatingMode:]
  -[VCSessionParticipant getAudioDumpName]
  -[VCSessionParticipant startAudioDump]
  -[VCSessionParticipant stopAudioDump]
  -[VCSessionParticipant sendAudioPowerSpectrumSourceRegistration:]
  -[VCSessionParticipant startVideo]
  -[VCSessionParticipant handleActiveConnectionChange:]
  -[VCSessionParticipant redundancyController:redundancyPercentageDidChange:]
  -[VCSessionParticipant pullAudioSamples:]
  -[VCSessionParticipant vcMediaStreamServerDidDie:]
  -[VCSessionParticipant vcMediaStream:requestKeyFrameGenerationWithStreamID:firType:]
  -[VCSessionParticipant isLocalOnWiFi]
  -[VCSessionParticipant setMediaQueue:]
  -[VCSessionParticipant initWithConfig:delegate:]
  -[VCSessionParticipant stopAudioIOCompletion]
  -[VCSessionParticipant onStartAudioIO]
  -[VCSessionParticipant onDidResumeAudio]
  -[VCSessionParticipant onPauseAudioStreams]
  -[VCSessionParticipant applyVideoEnabledSetting:]
  -[VCSessionParticipant isActiveMediaType:]
  -[VCSessionParticipant isStreamGroupActive:]
  -[VCSessionParticipant updateAudioSpectrumState]
  -[VCSessionParticipant participantScreenToken]
  -[VCSessionParticipant screenGroup]
  -[VCSessionParticipant participantMicrophoneToken]
  -[VCSessionParticipant startAudioIO]
  -[VCSessionParticipant stopAudioStreams]
  -[VCSessionParticipant startScreenGroup]
  -[VCSessionParticipant redundancyController:redundancyIntervalDidChange:]
  -[VCSessionParticipant collectVideoChannelMetrics:]
  -[VCSessionParticipant collectAudioChannelMetrics:]
  -[VCSessionParticipant idsParticipantID]
  -[VCSessionParticipant cellularUniqueTag]
  -[VCSessionParticipant setCellularUniqueTag:]
  -[VCSessionParticipant handleEncryptionInfoChange:]
  -[VCSessionParticipant resetDecryptionTimeout]
  -[VCSessionParticipant didEncryptionKeyRollTimeout]
  -[VCSessionParticipant dispatchedStart]
  -[VCSessionParticipant setupStreamGroupMediaSync]
  -[VCSessionParticipant completeStreamSetup:]
  -[VCSessionParticipant applyScreenEnabledSetting:]
  -[VCSessionParticipant updateVideoPaused:]
  -[VCSessionParticipant stopVideoCaptureClient]
  -[VCSessionParticipant startSystemAudioCapture]
  -[VCSessionParticipant stopSystemAudioCapture]
  -[VCSessionParticipant supportedAudioRules]
  -[VCSessionParticipant streamGroup:didSuspendStreams:]
  -[VCSessionParticipant setMediaState:forMediaType:]
  -[VCSessionParticipant dispatchedSetMediaState:forMediaType:]
  -[VCSessionParticipant audioPosition]
  -[VCSessionParticipant setAudioPosition:]
  -[VCSessionParticipant mediaNegotiator]
  -[VCSessionParticipant callDelegateWithBlock:]
  -[VCSessionParticipant shouldSetPause:onStream:]
  -[VCSessionParticipant streamGroup:didChangeMediaPriority:]
  -[VCSessionParticipant streamGroup:didChangePlayoutRTPTime:]
  -[VCSessionParticipant didChangeSendingStreamsForStreamGroup:]
  -[VCSessionParticipant didMediaDecryptionTimeOutForStreamGroup:]
  -[VCSessionParticipant streamGroup:didRemoteEnableChange:]
  -[VCSessionParticipant streamGroup:didRemotePauseChange:]
  -[VCSessionParticipant streamGroup:didSwitchFromStreamID:toStreamID:]
  -[VCSessionParticipant didChangeReceivingStreamsForStreamGroup:]
  -[VCSessionParticipant didChangeActualNetworkBitrateForStreamGroup:]
  -[VCSessionParticipant didDecryptionTimeOutForMKMRecoveryForStreamGroup:]
  -[VCSessionParticipant streamGroup:didRequestRedundancy:]
  -[VCSessionParticipant streamGroup:requestKeyFrameGenerationWithStreamID:firType:]
  -[VCSessionParticipant streamGroup:remoteMediaStalled:duration:]
  -[VCSessionParticipant callStreamDelegateWithBlock:]
  -[VCSessionParticipant logAllStreamTokens]
  -[VCSessionParticipant startOneToOneStreams]
  -[VCSessionParticipant dispatchedStartOneToOneStreams]
  -[VCSessionParticipant startMultiwayStreams]
  -[VCSessionParticipant stopMultiwayStreams]
  -[VCSessionParticipant dispatchedStop]
  -[VCSessionParticipant dispatchedSetAudioEnabled:]
  -[VCSessionParticipant dispatchedSetVideoEnabled:]
  -[VCSessionParticipant dispatchedSetScreenEnabled:]
  -[VCSessionParticipant dispatchedSetAudioPaused:]
  -[VCSessionParticipant dispatchedSetVideoPaused:]
  -[VCSessionParticipant streamsToString]
  -[VCSessionParticipant generateEncryptionKey]
  -[VCSessionParticipant oneToOneVideoStream]
  -[VCSessionParticipant stopOneToOneStreams]
  -[VCSessionParticipant stopInternal]
  -[VCSessionParticipant isAudioStream:]
  -[VCSessionParticipant isVideoStream:]
  -[VCSessionParticipant stopAudioIO]
  -[VCSessionParticipant startMediaStreams:]
  -[VCSessionParticipant startAudioStreams]
  -[VCSessionParticipant stopMicStreamGroups]
  -[VCSessionParticipant startMicStreamGroups]
  -[VCSessionParticipant stopStreamGroups:]
  -[VCSessionParticipant startStreamGroups:]
  -[VCSessionParticipant updateStreamGroups:]
  -[VCSessionParticipant updateActiveStateForStreamGroup:]
  -[VCSessionParticipant startStreamGroups]
  -[VCSessionParticipant stopStreamGroups]
  -[VCSessionParticipant startVideoStreams]
  -[VCSessionParticipant stopScreenGroup]
  -[VCSessionParticipant stopMediaStreams:]
  -[VCSessionParticipant stopVideoStreams]
  -[VCSessionParticipant setAudioStreamGroupsPaused:]
  -[VCSessionParticipant setCameraStreamGroupsPaused:]
  -[VCSessionParticipant setPaused:onStreamGroups:]
  -[VCSessionParticipant pauseAudioStreams:]
  -[VCSessionParticipant pauseVideo:]
  -[VCSessionParticipant setupAudioStreamConfiguration:audioRules:]
  -[VCSessionParticipant newOneToOneScreenStreamMultiwayConfiguration:]
  -[VCSessionParticipant newOneToOneVideoStreamMultiwayConfiguration:]
  -[VCSessionParticipant newOneToOneAudioStreamConfigWithAudioSettings:streamDirection:streamSsrc:]
  -[VCSessionParticipant newOneToOneVideoStreamConfigWithStreamDirection:streamSsrc:encodingType:]
  -[VCSessionParticipant newOneToOneScreenStreamConfigWithStreamDirection:streamSsrc:encodingType:]
  -[VCSessionParticipant participantVideoToken]
  -[VCSessionParticipant cameraGroups]
  -[VCSessionParticipant systemAudioGroup]
  -[VCSessionParticipant microphoneGroup]
  -[VCSessionParticipant captionsGroup]
  -[VCSessionParticipant streamGroupWithID:]
  -[VCSessionParticipant participantStreamTokens]
  -[VCSessionParticipant securityKeyHolderUsageForStreamConfigDirection:]
  -[VCSessionParticipant setupSecurityKeyHolderForStreamConfig:]
  -[VCSessionParticipant setupNetworkAddressesForMediaConfig:]
  -[VCSessionParticipant updateConfigurationWithDeviceRole:]
  -[VCSessionParticipant configureAudioWithDeviceRole:]
  -[VCSessionParticipant newVideoRateControlConfigWithMediaControlInfoVersion:enableMediaControlInfoGenerator:isOneToOne:]
  -[VCSessionParticipant newAudioRateControlConfigWithMediaControlInfoVersion:isOneToOne:]
  -[VCSessionParticipant configureVideoWithDeviceRole:streamInfoArray:]
  -[VCSessionParticipant configureOneToOneWithConfig:]
  -[VCSessionParticipant configureWithDeviceRole:negotiatedVideoEnabled:negotiatedScreenEnabled:operatingMode:]
  -[VCSessionParticipant dispatchedConfigureWithDeviceRole:negotiatedVideoEnabled:negotiatedScreenEnabled:operatingMode:]
  -[VCSessionParticipant updateMediaStatesWithConfig:]
  -[VCSessionParticipant setupMediaTypeSettingsWithConfig:]
  -[VCSessionParticipant setupPreferredIOSettings]
  -[VCSessionParticipant preferredRTPTimestampRateForGroupID:]
  -[VCSessionParticipant preferredIOSampleRateForGroupID:]
  -[VCSessionParticipant preferredIOSamplesPerFrameForGroupID:]
  -[VCSessionParticipant participantStateToString:]
  -[VCSessionParticipant streamDelegate]
  -[VCSessionParticipant setStreamDelegate:]
  -[VCSessionParticipant streamGroupsForMediaType:]
  -[VCSessionParticipant streamGroupsForIDs:]
  -[VCSessionParticipant applyMediaState:forMediaType:]
  -[VCSessionParticipant updateMediaState:forStreamGroups:]
  -[VCSessionParticipant hasVideoStreams]
  -[VCSessionParticipant allParticipantManagedStreamInfos]
  -[VCSessionParticipant allParticipantStreamInfo]
  -[VCSessionParticipant streamGroupStateFromStreamGroupID:]
  -[VCSessionParticipant createRedundancyControllers]
  -[VCSessionParticipant collectCaptionsChannelMetrics:]
  -[VCSessionParticipant handleStreamGroupsActiveConnectionChange:]
  -[VCSessionParticipant setupMediaSyncForStreamGroup:]
  -[VCSessionParticipant swapScreenStreamGroupSyncSourceWithState:]
  -[VCSessionParticipant handleRemoteOneToOneSwitchWithStreamGroup:fromStreamID:toStreamID:]
  -[VCSessionParticipant handleSymptomReportForDecryptionError]
  -[VCSessionParticipant opaqueData]
  -[VCSessionParticipant setLocalOnWiFi:]
  -[VCSessionParticipant callInfoBlob]
  -[VCSessionParticipant oneToOneConfig]
  -[VCSessionParticipant setOneToOneConfig:]
  -[VCSessionParticipant hasScreenStreams]


VCAudioSessionMediaProperties : NSObject
 @property  double preferredSampleRate
 @property  double preferredBlockSize
 @property  int operatingMode
 @property  unsigned int vpOperatingMode
 @property  {AudioStreamBasicDescription=dIIIIIIII} inputFormat
 @property  {AudioStreamBasicDescription=dIIIIIIII} outputFormat
 @property  int processId
 @property  BOOL sessionActive

  // instance methods
  -[VCAudioSessionMediaProperties outputFormat]
  -[VCAudioSessionMediaProperties processId]
  -[VCAudioSessionMediaProperties isSessionActive]
  -[VCAudioSessionMediaProperties setProcessId:]
  -[VCAudioSessionMediaProperties setOutputFormat:]
  -[VCAudioSessionMediaProperties isEqual:]
  -[VCAudioSessionMediaProperties operatingMode]
  -[VCAudioSessionMediaProperties setOperatingMode:]
  -[VCAudioSessionMediaProperties inputFormat]
  -[VCAudioSessionMediaProperties preferredSampleRate]
  -[VCAudioSessionMediaProperties setInputFormat:]
  -[VCAudioSessionMediaProperties vpOperatingMode]
  -[VCAudioSessionMediaProperties setVpOperatingMode:]
  -[VCAudioSessionMediaProperties preferredBlockSize]
  -[VCAudioSessionMediaProperties setPreferredBlockSize:]
  -[VCAudioSessionMediaProperties setPreferredSampleRate:]
  -[VCAudioSessionMediaProperties setSessionActive:]


VCTransportSessionIDSSingleLink : VCTransportSessionIDS
  // instance methods
  -[VCTransportSessionIDSSingleLink onStart]
  -[VCTransportSessionIDSSingleLink initWithNotificationQueue:reportingAgent:]
  -[VCTransportSessionIDSSingleLink createVFD:forStreamType:]
  -[VCTransportSessionIDSSingleLink handleLinkConnectedWithInfo:]
  -[VCTransportSessionIDSSingleLink handleLinkDisconnectedWithInfo:]
  -[VCTransportSessionIDSSingleLink updateTransportStream:]


AVCNetworkAddress : NSObject
 @property  NSString *ip
 @property  unsigned short port
 @property  BOOL isIPv6
 @property  NSString *interfaceName

  // instance methods
  -[AVCNetworkAddress port]
  -[AVCNetworkAddress setPort:]
  -[AVCNetworkAddress interfaceName]
  -[AVCNetworkAddress dealloc]
  -[AVCNetworkAddress isIPv6]
  -[AVCNetworkAddress setInterfaceName:]
  -[AVCNetworkAddress setIsIPv6:]
  -[AVCNetworkAddress init]
  -[AVCNetworkAddress setIp:]
  -[AVCNetworkAddress ip]


AVCMediaStreamConfig : NSObject
 @property  AVCNetworkAddress *localAddress
 @property  AVCNetworkAddress *remoteAddress
 @property  NSString *cName
 @property  long long direction
 @property  unsigned long txPayloadType
 @property  unsigned long rxPayloadType
 @property  unsigned int localSSRC
 @property  unsigned int remoteSSRC
 @property  BOOL rateAdaptationEnabled
 @property  BOOL rtcpEnabled
 @property  BOOL rtcpXREnabled
 @property  unsigned short rtcpRemotePort
 @property  double rtcpSendInterval
 @property  BOOL rtpTimeOutEnabled
 @property  BOOL rtcpTimeOutEnabled
 @property  double rtpTimeOutInterval
 @property  double rtcpTimeOutInterval
 @property  unsigned long recommendedMTU
 @property  NSData *sendMediaKey
 @property  NSData *sendMasterKey
 @property  NSData *receiveMediaKey
 @property  NSData *receiveMasterKey
 @property  long long SRTPCipherSuite
 @property  long long SRTCPCipherSuite
 @property  AVCAudioStreamConfig *audio
 @property  AVCVideoStreamConfig *video
 @property  AVCTextStreamConfig *text
 @property  long long streamInputID
 @property  unsigned long networkClockID
 @property  unsigned int jitterBufferMode
 @property  unsigned long fixedJitterBufferSize

  // class methods
  +[AVCMediaStreamConfig streamDirectionWithClientDirection:]
  +[AVCMediaStreamConfig clientStreamDirectionWithDirection:]
  +[AVCMediaStreamConfig cipherSuiteWithClientCipherSuite:]
  +[AVCMediaStreamConfig clientCipherSuiteWithCipherSuite:]
  +[AVCMediaStreamConfig dictionaryForCommonStreamConfig:]

  // instance methods
  -[AVCMediaStreamConfig video]
  -[AVCMediaStreamConfig setDirection:]
  -[AVCMediaStreamConfig text]
  -[AVCMediaStreamConfig setVideo:]
  -[AVCMediaStreamConfig remoteAddress]
  -[AVCMediaStreamConfig dealloc]
  -[AVCMediaStreamConfig direction]
  -[AVCMediaStreamConfig localAddress]
  -[AVCMediaStreamConfig setLocalAddress:]
  -[AVCMediaStreamConfig setRemoteAddress:]
  -[AVCMediaStreamConfig init]
  -[AVCMediaStreamConfig setText:]
  -[AVCMediaStreamConfig dictionary]
  -[AVCMediaStreamConfig audio]
  -[AVCMediaStreamConfig setAudio:]
  -[AVCMediaStreamConfig setReceiveMasterKey:]
  -[AVCMediaStreamConfig setRtcpXREnabled:]
  -[AVCMediaStreamConfig setRtcpRemotePort:]
  -[AVCMediaStreamConfig isValidAudioConfig]
  -[AVCMediaStreamConfig setRxPayloadType:]
  -[AVCMediaStreamConfig setRtcpTimeOutInterval:]
  -[AVCMediaStreamConfig isRTPTimeOutEnabled]
  -[AVCMediaStreamConfig setRtcpEnabled:]
  -[AVCMediaStreamConfig setRtcpSendInterval:]
  -[AVCMediaStreamConfig setSRTCPCipherSuite:]
  -[AVCMediaStreamConfig setRtpTimeOutEnabled:]
  -[AVCMediaStreamConfig setTxPayloadType:]
  -[AVCMediaStreamConfig isValidTextConfig]
  -[AVCMediaStreamConfig setSRTPCipherSuite:]
  -[AVCMediaStreamConfig rtcpTimeOutInterval]
  -[AVCMediaStreamConfig setRtpTimeOutInterval:]
  -[AVCMediaStreamConfig setRtcpTimeOutEnabled:]
  -[AVCMediaStreamConfig setSendMasterKey:]
  -[AVCMediaStreamConfig rtpTimeOutInterval]
  -[AVCMediaStreamConfig sendMasterKey]
  -[AVCMediaStreamConfig receiveMasterKey]
  -[AVCMediaStreamConfig txPayloadType]
  -[AVCMediaStreamConfig SRTPCipherSuite]
  -[AVCMediaStreamConfig SRTCPCipherSuite]
  -[AVCMediaStreamConfig setRemoteSSRC:]
  -[AVCMediaStreamConfig setRateAdaptationEnabled:]
  -[AVCMediaStreamConfig rxPayloadType]
  -[AVCMediaStreamConfig rtcpSendInterval]
  -[AVCMediaStreamConfig rtcpRemotePort]
  -[AVCMediaStreamConfig remoteSSRC]
  -[AVCMediaStreamConfig isRateAdaptationEnabled]
  -[AVCMediaStreamConfig isRTCPEnabled]
  -[AVCMediaStreamConfig isRTCPTimeOutEnabled]
  -[AVCMediaStreamConfig streamInputID]
  -[AVCMediaStreamConfig localSSRC]
  -[AVCMediaStreamConfig recommendedMTU]
  -[AVCMediaStreamConfig setRecommendedMTU:]
  -[AVCMediaStreamConfig isRTCPXREnabled]
  -[AVCMediaStreamConfig cName]
  -[AVCMediaStreamConfig setCName:]
  -[AVCMediaStreamConfig setLocalSSRC:]
  -[AVCMediaStreamConfig sendMediaKey]
  -[AVCMediaStreamConfig setSendMediaKey:]
  -[AVCMediaStreamConfig receiveMediaKey]
  -[AVCMediaStreamConfig setReceiveMediaKey:]
  -[AVCMediaStreamConfig setStreamInputID:]
  -[AVCMediaStreamConfig networkClockID]
  -[AVCMediaStreamConfig setNetworkClockID:]
  -[AVCMediaStreamConfig jitterBufferMode]
  -[AVCMediaStreamConfig setJitterBufferMode:]
  -[AVCMediaStreamConfig fixedJitterBufferSize]
  -[AVCMediaStreamConfig setFixedJitterBufferSize:]
  -[AVCMediaStreamConfig setUpWithDictionary:]
  -[AVCMediaStreamConfig isValidVideoConfig]
  -[AVCMediaStreamConfig isAudioCodecValid]
  -[AVCMediaStreamConfig isAudioCodecMaskValid]
  -[AVCMediaStreamConfig isStreamInputIDValid]
  -[AVCMediaStreamConfig isJitterBufferModeValid]


AVCAudioStreamConfig : NSObject
 @property  long long audioStreamMode
 @property  long long codecType
 @property  BOOL cnEnabled
 @property  unsigned long cnPayloadType
 @property  unsigned long dtmfPayloadType
 @property  unsigned long dtmfTimestampRate
 @property  unsigned long ptime
 @property  unsigned long maxPtime
 @property  float volume
 @property  unsigned long channelAwareOffset
 @property  BOOL octetAligned
 @property  BOOL headerFullOnly
 @property  BOOL dtxEnabled
 @property  long long preferredCodecRateMode
 @property  unsigned int codecRateModeMask
 @property  unsigned int codecBandwidthMask
 @property  BOOL latencySensitiveMode
 @property  BOOL enableMaxBitrateOnNoChangeCMR
 @property  BOOL dtmfTonePlaybackEnabled
 @property  unsigned long numRedundantPayloads
 @property  unsigned long txRedPayloadType
 @property  unsigned long rxRedPayloadType
 @property  BOOL anbrEnabled
 @property  long long subscriptionSlot

  // class methods
  +[AVCAudioStreamConfig clientCodecTypeWithCodecType:]
  +[AVCAudioStreamConfig codecTypeWithClientCodecType:]
  +[AVCAudioStreamConfig streamModeWithClientStreamMode:]
  +[AVCAudioStreamConfig clientStreamModeWithStreamMode:]
  +[AVCAudioStreamConfig codecRateMaskForClientCodecRateMode:]
  +[AVCAudioStreamConfig clientCodecRateMaskForCodecRateMode:]
  +[AVCAudioStreamConfig codecBandwidthMaskForClientCodecBandwidth:]
  +[AVCAudioStreamConfig clientCodecBandwidthMaskForCodecBandwidth:]
  +[AVCAudioStreamConfig codecRateModeForClientCodecRateMode:]
  +[AVCAudioStreamConfig clientCodecRateModeForCodecRateMode:]

  // instance methods
  -[AVCAudioStreamConfig isValid]
  -[AVCAudioStreamConfig setVolume:]
  -[AVCAudioStreamConfig volume]
  -[AVCAudioStreamConfig init]
  -[AVCAudioStreamConfig dictionary]
  -[AVCAudioStreamConfig subscriptionSlot]
  -[AVCAudioStreamConfig setSubscriptionSlot:]
  -[AVCAudioStreamConfig codecType]
  -[AVCAudioStreamConfig setCodecType:]
  -[AVCAudioStreamConfig setEnableMaxBitrateOnNoChangeCMR:]
  -[AVCAudioStreamConfig setOctetAligned:]
  -[AVCAudioStreamConfig maxPtime]
  -[AVCAudioStreamConfig setPtime:]
  -[AVCAudioStreamConfig setRxRedPayloadType:]
  -[AVCAudioStreamConfig setDtxEnabled:]
  -[AVCAudioStreamConfig setPreferredCodecRateMode:]
  -[AVCAudioStreamConfig setHeaderFullOnly:]
  -[AVCAudioStreamConfig setNumRedundantPayloads:]
  -[AVCAudioStreamConfig setCodecRateModeMask:]
  -[AVCAudioStreamConfig setDtmfTimestampRate:]
  -[AVCAudioStreamConfig preferredCodecRateMode]
  -[AVCAudioStreamConfig setMaxPtime:]
  -[AVCAudioStreamConfig audioStreamMode]
  -[AVCAudioStreamConfig setTxRedPayloadType:]
  -[AVCAudioStreamConfig setAudioStreamMode:]
  -[AVCAudioStreamConfig ptime]
  -[AVCAudioStreamConfig setDtmfPayloadType:]
  -[AVCAudioStreamConfig setChannelAwareOffset:]
  -[AVCAudioStreamConfig setLatencySensitiveMode:]
  -[AVCAudioStreamConfig isOctectAligned]
  -[AVCAudioStreamConfig dtmfPayloadType]
  -[AVCAudioStreamConfig isDTXEnabled]
  -[AVCAudioStreamConfig isCNEnabled]
  -[AVCAudioStreamConfig cnPayloadType]
  -[AVCAudioStreamConfig setCnPayloadType:]
  -[AVCAudioStreamConfig setCnEnabled:]
  -[AVCAudioStreamConfig numRedundantPayloads]
  -[AVCAudioStreamConfig enableMaxBitrateOnNoChangeCMR]
  -[AVCAudioStreamConfig dtmfTonePlaybackEnabled]
  -[AVCAudioStreamConfig setDtmfTonePlaybackEnabled:]
  -[AVCAudioStreamConfig anbrEnabled]
  -[AVCAudioStreamConfig setAnbrEnabled:]
  -[AVCAudioStreamConfig setUpWithDictionary:]
  -[AVCAudioStreamConfig isDTMFValid]
  -[AVCAudioStreamConfig isCNValid]
  -[AVCAudioStreamConfig isRedValid]
  -[AVCAudioStreamConfig dtmfTimestampRate]
  -[AVCAudioStreamConfig channelAwareOffset]
  -[AVCAudioStreamConfig isHeaderFullOnly]
  -[AVCAudioStreamConfig codecRateModeMask]
  -[AVCAudioStreamConfig codecBandwidthMask]
  -[AVCAudioStreamConfig setCodecBandwidthMask:]
  -[AVCAudioStreamConfig isLatencySensitiveMode]
  -[AVCAudioStreamConfig txRedPayloadType]
  -[AVCAudioStreamConfig rxRedPayloadType]


AVCVideoStreamConfig : NSObject
 @property  long long txCodecType
 @property  long long rxCodecType
 @property  long long videoResolution
 @property  long long synchronizationSourceStreamToken
 @property  unsigned long framerate
 @property  unsigned long txMaxBitrate
 @property  unsigned long txMinBitrate
 @property  unsigned long rxMaxBitrate
 @property  unsigned long rxMinBitrate
 @property  NSString *rxCodecFeatureListString
 @property  NSString *txCodecFeatureListString
 @property  unsigned long keyFrameInterval
 @property  int remoteVideoInitialOrientation
 @property  BOOL enableCVO
 @property  unsigned long cvoExtensionID
 @property  BOOL isVideoProtected
 @property  long long videoStreamMode
 @property  long long captureSource
 @property  unsigned long screenDisplayID
 @property  unsigned long customWidth
 @property  unsigned long customHeight
 @property  unsigned long tilesPerFrame
 @property  unsigned int pixelFormat
 @property  BOOL ltrpEnabled
 @property  unsigned long hdrMode
 @property  NSString *remoteDeviceName
 @property  BOOL latencySensitiveModeEnabled
 @property  NSString *profileLevel

  // class methods
  +[AVCVideoStreamConfig clientCodecTypeWithCodecType:]
  +[AVCVideoStreamConfig codecTypeWithClientCodecType:]
  +[AVCVideoStreamConfig videoResolutionFromClientResolution:]
  +[AVCVideoStreamConfig clientVideoResolutionFromResolution:]
  +[AVCVideoStreamConfig clientVideoCaptureSourceFromCaptureSource:]
  +[AVCVideoStreamConfig videoCaptureSourceFromClientCaptureSource:]
  +[AVCVideoStreamConfig clientVideoStreamModeFromVideoStreamType:]
  +[AVCVideoStreamConfig videoStreamTypeFromClientVideoStreamMode:]
  +[AVCVideoStreamConfig isPixelFormatValid:hdrMode:]

  // instance methods
  -[AVCVideoStreamConfig hdrMode]
  -[AVCVideoStreamConfig framerate]
  -[AVCVideoStreamConfig pixelFormat]
  -[AVCVideoStreamConfig dealloc]
  -[AVCVideoStreamConfig setFramerate:]
  -[AVCVideoStreamConfig setPixelFormat:]
  -[AVCVideoStreamConfig setHdrMode:]
  -[AVCVideoStreamConfig init]
  -[AVCVideoStreamConfig dictionary]
  -[AVCVideoStreamConfig remoteDeviceName]
  -[AVCVideoStreamConfig setRemoteDeviceName:]
  -[AVCVideoStreamConfig videoResolution]
  -[AVCVideoStreamConfig setCustomWidth:]
  -[AVCVideoStreamConfig setTxMaxBitrate:]
  -[AVCVideoStreamConfig setCustomHeight:]
  -[AVCVideoStreamConfig tilesPerFrame]
  -[AVCVideoStreamConfig setTilesPerFrame:]
  -[AVCVideoStreamConfig setVideoResolution:]
  -[AVCVideoStreamConfig setTxMinBitrate:]
  -[AVCVideoStreamConfig txCodecType]
  -[AVCVideoStreamConfig setTxCodecType:]
  -[AVCVideoStreamConfig rxMinBitrate]
  -[AVCVideoStreamConfig rxMaxBitrate]
  -[AVCVideoStreamConfig rxCodecType]
  -[AVCVideoStreamConfig setRxMinBitrate:]
  -[AVCVideoStreamConfig setRxMaxBitrate:]
  -[AVCVideoStreamConfig setRxCodecType:]
  -[AVCVideoStreamConfig keyFrameInterval]
  -[AVCVideoStreamConfig setKeyFrameInterval:]
  -[AVCVideoStreamConfig captureSource]
  -[AVCVideoStreamConfig setCaptureSource:]
  -[AVCVideoStreamConfig setLtrpEnabled:]
  -[AVCVideoStreamConfig videoStreamMode]
  -[AVCVideoStreamConfig txMaxBitrate]
  -[AVCVideoStreamConfig txMinBitrate]
  -[AVCVideoStreamConfig cvoExtensionID]
  -[AVCVideoStreamConfig setCvoExtensionID:]
  -[AVCVideoStreamConfig enableCVO]
  -[AVCVideoStreamConfig setEnableCVO:]
  -[AVCVideoStreamConfig customWidth]
  -[AVCVideoStreamConfig customHeight]
  -[AVCVideoStreamConfig profileLevel]
  -[AVCVideoStreamConfig setProfileLevel:]
  -[AVCVideoStreamConfig remoteVideoInitialOrientation]
  -[AVCVideoStreamConfig setRemoteVideoInitialOrientation:]
  -[AVCVideoStreamConfig isVideoProtected]
  -[AVCVideoStreamConfig setIsVideoProtected:]
  -[AVCVideoStreamConfig screenDisplayID]
  -[AVCVideoStreamConfig setScreenDisplayID:]
  -[AVCVideoStreamConfig setUpWithDictionary:]
  -[AVCVideoStreamConfig isValidForDirection:]
  -[AVCVideoStreamConfig synchronizationSourceStreamToken]
  -[AVCVideoStreamConfig setSynchronizationSourceStreamToken:]
  -[AVCVideoStreamConfig txCodecFeatureListString]
  -[AVCVideoStreamConfig setTxCodecFeatureListString:]
  -[AVCVideoStreamConfig rxCodecFeatureListString]
  -[AVCVideoStreamConfig setRxCodecFeatureListString:]
  -[AVCVideoStreamConfig setVideoStreamMode:]
  -[AVCVideoStreamConfig isLTRPEnabled]
  -[AVCVideoStreamConfig isLatencySensitiveModeEnabled]
  -[AVCVideoStreamConfig setLatencySensitiveModeEnabled:]


AVCTextStreamConfig : NSObject
 @property  long long codecType
 @property  unsigned long numRedundantPayloads
 @property  unsigned long txRedPayloadType
 @property  unsigned long rxRedPayloadType
 @property  float txIntervalMin

  // class methods
  +[AVCTextStreamConfig clientCodecTypeWithCodecType:]
  +[AVCTextStreamConfig codecTypeWithClientCodecType:]

  // instance methods
  -[AVCTextStreamConfig isValid]
  -[AVCTextStreamConfig dictionary]
  -[AVCTextStreamConfig codecType]
  -[AVCTextStreamConfig setCodecType:]
  -[AVCTextStreamConfig setRxRedPayloadType:]
  -[AVCTextStreamConfig setTxIntervalMin:]
  -[AVCTextStreamConfig setNumRedundantPayloads:]
  -[AVCTextStreamConfig setTxRedPayloadType:]
  -[AVCTextStreamConfig numRedundantPayloads]
  -[AVCTextStreamConfig setUpWithDictionary:]
  -[AVCTextStreamConfig txIntervalMin]
  -[AVCTextStreamConfig isRedValid]
  -[AVCTextStreamConfig txRedPayloadType]
  -[AVCTextStreamConfig rxRedPayloadType]


VCWCMClient : NSObject
 @property  NSObject<OS_xpc_object> *connection
 @property  NSObject<OS_dispatch_queue> *connectionQueue
 @property  <WCMClientDelegate> *wcmClientDelegate

  // instance methods
  -[VCWCMClient connectionQueue]
  -[VCWCMClient dealloc]
  -[VCWCMClient connection]
  -[VCWCMClient init]
  -[VCWCMClient startWCMClient]
  -[VCWCMClient stopWCMClient]
  -[VCWCMClient wcmClientDelegate]
  -[VCWCMClient setWcmClientDelegate:]


SDPParser : NSObject
 @property  NSString *fieldName
 @property  NSString *fieldValue
 @property  unsigned char fieldType
 @property  BOOL parsingDone

  // instance methods
  -[SDPParser fieldName]
  -[SDPParser fieldValue]
  -[SDPParser dealloc]
  -[SDPParser nextLine]
  -[SDPParser fieldType]
  -[SDPParser initWithString:]
  -[SDPParser stringToMediaType:]
  -[SDPParser parseMediaLineHeader:mediaType:supportedPayloads:rtpPort:]
  -[SDPParser parsingDone]


VCTransport : NSObject
  // class methods
  +[VCTransport sharedInstance]

  // instance methods
  -[VCTransport cleanup]
  -[VCTransport dealloc]
  -[VCTransport init]
  -[VCTransport setReportingAgent:]
  -[VCTransport getSignalStrengthBars:displayBars:maxDisplayBars:]
  -[VCTransport updateQualityIndicator:isIPv6:]
  -[VCTransport registerICEBlockForCallID:connectedBlock:newCandidatesBlock:newNominationBlock:removeIPPortBlock:]
  -[VCTransport updateInterfaceList:shouldFilterCellInterface:isUpdateNeeded:]
  -[VCTransport iceConnectedForCallID:result:didReceivePacket:useRelay:secretKey:skeResult:]
  -[VCTransport iceNewCandidatesForCallID:blob:size:newCandidateVersion:]
  -[VCTransport iceShouldNominateNewCandidate:forCallID:interfaceMask:nominated:demote:connectionPriority:replaceOnly:]
  -[VCTransport iceRemoveIPPort:forCallID:isLocalInterface:]
  -[VCTransport registerDataReceivedHandler:forCallID:]
  -[VCTransport receivedDataPacket:length:forCallID:encrypted:OFTType:]
  -[VCTransport stopConnectivityCheckForCallID:]
  -[VCTransport getRemoteCIDForDstIPPort:callID:]
  -[VCTransport getNextBestCandidate:callID:isLocal:IPPortToExclude:]
  -[VCTransport discardRelayBindingForCallID:]
  -[VCTransport discardRelayBindingForCallID:withChannelNumber:]
  -[VCTransport getConnectionDataForCallID:version:useCompressedData:pConnectionData:connectDataSizeInBytes:relayDictionary:interfaceUpdate:nonCellularCandidateTimeout:]
  -[VCTransport setupDTLSSecurity:connectionResult:completionHandler:]
  -[VCTransport detailedErrorCodeForConnectionWithCallID:]
  -[VCTransport startConnectionCheckForCallID:remoteConnectionDataBlob:relayDictionary:iceTimeout:securityIdentity:skeState:usedRelay:]
  -[VCTransport ipPortStillExists:requiresWifi:]
  -[VCTransport sendUDPPacketReliableEncrypted:localIPPort:destinationIPPort:oftType:]
  -[VCTransport sendData:localCallID:remoteCallID:encrypted:OFTType:]
  -[VCTransport setForceRelayForCallID:]
  -[VCTransport setForceIPv6ForCallID:]
  -[VCTransport updateICERoleForCallID:role:remoteCallID:sessionID:]
  -[VCTransport setSKEState:forCallID:]
  -[VCTransport setICETimeout:]
  -[VCTransport updateQoS:]
  -[VCTransport getLoopbackIP:]
  -[VCTransport setARPLHandler:]
  -[VCTransport processRemoteInterfaceChangeMessageWithLocalCallID:remoteCallID:remoteData:remoteLen:remoteCandidateVersion:]
  -[VCTransport getRemoteICEVersion:remoteICEVersion:]
  -[VCTransport updateBasebandForConnection:notificationRegistrationToken:callType:]
  -[VCTransport getCellTechForCallID:localCellTech:isLocalCellularQoSEnabled:remoteCellTech:isRemoteCellularQoSEnabled:]
  -[VCTransport flushBasebandQueue:]


VCVideoRuleCollectionsScreenAirplay : VCVideoRuleCollections
  // class methods
  +[VCVideoRuleCollectionsScreenAirplay sharedInstance]

  // instance methods
  -[VCVideoRuleCollectionsScreenAirplay tilesPerFrame:hdrMode:]


AVAudioClient : NSObject
 @property  AVAudioDeviceList *deviceList
 @property  AVAudioDevice *currentInputDevice
 @property  AVAudioDevice *currentOutputDevice
 @property  BOOL microphoneMuted
 @property  BOOL mixingVoiceWithMediaEnabled
 @property  @? changeListener

  // class methods
  +[AVAudioClient sharedInstance]
  +[AVAudioClient currentOutputDevice]
  +[AVAudioClient defaultInputDevice]
  +[AVAudioClient currentInputDevice]
  +[AVAudioClient startAudioSession]
  +[AVAudioClient defaultOutputDevice]
  +[AVAudioClient setMixingVoiceWithMediaEnabled:]
  +[AVAudioClient unregisterFromMutedTalkerNotifications]
  +[AVAudioClient registerForMutedTalkerNotifications:]
  +[AVAudioClient hasActiveAudioSession]
  +[AVAudioClient isMicrophoneMuted]
  +[AVAudioClient setMicrophoneMuted:]
  +[AVAudioClient setAudioSessionProperties:]
  +[AVAudioClient setOutputDevice:]
  +[AVAudioClient stopAudioSession]
  +[AVAudioClient isMixingVoiceWithMediaEnabled]
  +[AVAudioClient startAudioSessionWithCompletionHandler:]
  +[AVAudioClient setInputDevice:]
  +[AVAudioClient resetAudioSessionOutputPortOverride]
  +[AVAudioClient setFollowSystemInputEnabled:]
  +[AVAudioClient setFollowSystemOutputEnabled:]
  +[AVAudioClient registerSecureMicrophoneEngagedHandler:]

  // instance methods
  -[AVAudioClient changeListener]
  -[AVAudioClient devices]
  -[AVAudioClient dealloc]
  -[AVAudioClient initSharedInstance]
  -[AVAudioClient outputDevices]
  -[AVAudioClient setupXPCConnection]
  -[AVAudioClient currentOutputDevice]
  -[AVAudioClient currentInputDevice]
  -[AVAudioClient inputDevices]
  -[AVAudioClient setChangeListener:]
  -[AVAudioClient init]
  -[AVAudioClient setMixingVoiceWithMediaEnabled:]
  -[AVAudioClient unregisterFromMutedTalkerNotifications]
  -[AVAudioClient registerForMutedTalkerNotifications:]
  -[AVAudioClient hasActiveAudioSession]
  -[AVAudioClient isMicrophoneMuted]
  -[AVAudioClient setMicrophoneMuted:]
  -[AVAudioClient setAudioSessionProperties:]
  -[AVAudioClient setOutputDevice:]
  -[AVAudioClient deviceList]
  -[AVAudioClient stopAudioSession]
  -[AVAudioClient isMixingVoiceWithMediaEnabled]
  -[AVAudioClient startAudioSessionWithCompletionHandler:]
  -[AVAudioClient setInputDevice:]
  -[AVAudioClient resetXPCConnection]
  -[AVAudioClient sendMessageAsync:arguments:reply:]
  -[AVAudioClient sendMessageSync:arguments:]
  -[AVAudioClient registerBlocksForDelegateNotifications]
  -[AVAudioClient cleanupXPCConnection]
  -[AVAudioClient resetAudioSessionOutputPortOverride]
  -[AVAudioClient setFollowSystemInputEnabled:]
  -[AVAudioClient setFollowSystemOutputEnabled:]
  -[AVAudioClient registerSecureMicrophoneEngagedHandler:]
  -[AVAudioClient reregisterMutedTalkerNotificationOverXPC]
  -[AVAudioClient cleanupMutedTalkerNotificationHandler]
  -[AVAudioClient handleMutedTalkerNotificationWithXPCArguments:]
  -[AVAudioClient cleanupSecureMicrophoneEngagedHandler]
  -[AVAudioClient unregisterBlocksForDelegateNotifications]
  -[AVAudioClient setDeviceList:]


(GK_NSDictionaryDeepMutableCopy)
	// instance methods
	-[(GK_NSDictionaryDeepMutableCopy) copyGKSDeepMutable]
	-[(GK_NSDictionaryDeepMutableCopy) copyGKSDeep]

(VCControlChannelMessageProtocol)
	// instance methods
	-[(VCControlChannelMessageProtocol) VCCCLength]
	-[(VCControlChannelMessageProtocol) VCCCGetBytes:size:]
	-[(VCControlChannelMessageProtocol) VCCCString]
	-[(VCControlChannelMessageProtocol) VCCCData]
	-[(VCControlChannelMessageProtocol) VCCCPayloadKey]

(VCControlChannelMessageProtocol)
	// instance methods
	-[(VCControlChannelMessageProtocol) VCCCLength]
	-[(VCControlChannelMessageProtocol) VCCCGetBytes:size:]
	-[(VCControlChannelMessageProtocol) VCCCString]
	-[(VCControlChannelMessageProtocol) VCCCData]
	-[(VCControlChannelMessageProtocol) VCCCPayloadKey]

NSKeyedArchiver(VCKeyedArchiverExtensions)
	// class methods
	+[NSKeyedArchiver(VCKeyedArchiverExtensions) newSecureArchivedDataWithRootObject:]

NSError(AVConferenceError)
	// class methods
	+[NSError(AVConferenceError) AVConferenceServiceError:detailedCode:filePath:description:reason:]
	+[NSError(AVConferenceError) AVConferenceServiceError:detailedCode:returnCode:filePath:description:reason:]
	+[NSError(AVConferenceError) AVConferenceServiceError:detailCode:description:]

01 00 0e00 /System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService: APSConnection 
01 00 2600 /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox: ATAudioTap 
01 00 2600 /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox: ATAudioTapDescription 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReader 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReaderOutputMetadataAdaptor 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReaderTrackOutput 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetWriter 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetWriterInput 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetWriterInputMetadataAdaptor 
01 00 3200 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioFormat 
01 00 3200 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDataOutputSynchronizer 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDepthDataOutput 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDevice 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDeviceInput 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureMetadataOutput 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureSession 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureSynchronizedDepthData 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureSynchronizedMetadataObjectData 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureSynchronizedSampleBufferData 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureVideoDataOutput 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVFlashlight 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMetadataItem 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableMetadataItem 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVTimedMetadataGroup 
01 00 1b00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 1900 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMScreenSharingEvent 
01 00 1900 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMScreenSharingStream 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAContext 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplay 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFenceHandle 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayerHost 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATextLayer 
01 00 2800 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 2a00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMMotionActivityManager 
01 00 1000 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTAudioCodecInfo 
01 00 1000 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTBundle 
01 00 1000 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTXPCServiceSubscriptionContext 
01 00 1000 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 2f00 /System/Library/PrivateFrameworks/FTServices.framework/FTServices: FTServerBag 
01 00 0900 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigScreenCaptureController 
01 00 2300 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSDataChannelLinkContext 
01 00 2300 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSDatagramChannel 
01 00 2300 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAutoreleasePool 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCondition 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDecimalNumber 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 3400 /usr/lib/libobjc.A.dylib: NSObject 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRecursiveLock 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 2c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0700 /System/Library/Frameworks/Network.framework/Network: NWNetworkAgentRegistration 
01 00 1600 /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed: NWNetworkOfInterestManager 
01 00 1700 /System/Library/PrivateFrameworks/PrivacyAccounting.framework/PrivacyAccounting: PAAccessLogger 
01 00 1700 /System/Library/PrivateFrameworks/PrivacyAccounting.framework/PrivacyAccounting: PAApplication 
01 00 1700 /System/Library/PrivateFrameworks/PrivacyAccounting.framework/PrivacyAccounting: PAReplayKitAccess 
01 00 2200 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0d00 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STDynamicActivityAttributionPublisher 
01 00 2100 /System/Library/PrivateFrameworks/AVConference.framework/Frameworks/ViceroyTrace.framework/ViceroyTrace: TimingCollection 
01 00 2100 /System/Library/PrivateFrameworks/AVConference.framework/Frameworks/ViceroyTrace.framework/ViceroyTrace: VCWeakObjectHolder 
