|| __DATA.__data _NavigationConfig_DebugNavigationAutomationNotifications
|| __DATA.__data _NavigationConfig_DebugNavigationIncludeRealtimeUpdates
|| __DATA.__data _NavigationConfig_DebugNavigationServerStrings
|| __DATA.__data _NavigationConfig_DoomDirectionsRequestPriority
|| __DATA.__data _NavigationConfig_IgnoreCourseAccuracy
|| __DATA.__data _NavigationConfig_JunctionViewImagesPreloadingThreshold
|| __DATA.__data _NavigationConfig_LeechingThrottleTimeout
|| __DATA.__data _NavigationConfig_LocationOverdueTimeoutForNotTunnel
|| __DATA.__data _NavigationConfig_LocationOverdueTimeoutForTunnel
|| __DATA.__data _NavigationConfig_LocationOverdueTimeoutForUnknown
|| __DATA.__data _NavigationConfig_MapLocalizeLabels
|| __DATA.__data _NavigationConfig_MinLocationAccuracyForPreArrivalReroute
|| __DATA.__data _NavigationConfig_MinimumDistanceBetweenReroutes
|| __DATA.__data _NavigationConfig_MinimumTimeBetweenReroutes
|| __DATA.__data _NavigationConfig_NavDoomCacheCurrentTripTag
|| __DATA.__data _NavigationConfig_NavdDisconnectRetryCount
|| __DATA.__data _NavigationConfig_NavdDisconnectRetryWindow
|| __DATA.__data _NavigationConfig_NavdMonitoringDistanceThreshold
|| __DATA.__data _NavigationConfig_NavigationDisableServerTTS
|| __DATA.__data _NavigationConfig_NavigationPreventsManifestUpdate
|| __DATA.__data _NavigationConfig_RerouteThrottleCount
|| __DATA.__data _NavigationConfig_RerouteThrottleInterval
|| __DATA.__data _NavigationConfig_RouteRecalHighFrequencySeconds
|| __DATA.__data _NavigationConfig_RouteRecalHighFrequencyTries
|| __DATA.__data _NavigationConfig_RouteRecalLowFrequencySeconds
|| __DATA.__data _NavigationConfig_SaveRoutesToDiskInsteadXPC
|| __DATA.__data _NavigationConfig_ShouldSpeakWrittenAddresses
|| __DATA.__data _NavigationConfig_ShouldSpeakWrittenDirections
|| __DATA.__data _NavigationConfig_ShouldSpeakWrittenPlaceNames
|| __DATA.__data _NavigationConfig_ShouldThrottlePreArrivalReroute
|| __DATA.__data _NavigationConfig_TimeballDefaultCacheAge
|| __DATA.__data _NavigationConfig_TimeballDeferredRefresh
|| __DATA.__data _NavigationConfig_TimeballDestinationComparisonCriteria
|| __DATA.__data _NavigationConfig_TimeballEnabled
|| __DATA.__data _NavigationConfig_TimeballLocationAccuracy
|| __DATA.__data _NavigationConfig_TimeballLocationAttempts
|| __DATA.__data _NavigationConfig_TimeballLocationTimeoutInterval
|| __DATA.__data _NavigationConfig_TimeballRefreshPolicyMaximumIntervalForTTL
|| __DATA.__data _NavigationConfig_TimeballRefreshPolicyRateForForeground
|| __DATA.__data _NavigationConfig_TimeballRequestRouteCount
|| __DATA.__data _NavigationConfig_TracePlaybackLoadDirectionsFromTrace
|| __DATA.__data _NavigationConfig_TrafficIncidentAlertDisplayDurationSeconds
|| __DATA.__data _NavigationConfig_TrafficIncidentAlertDivergenceWarningTimeSeconds
|| __DATA.__data _NavigationConfig_TrafficIncidentAlertSimilarityMaxDivergenceDistance
|| __DATA.__data _NavigationConfig_TrafficIncidentAlertSimilarityMaxTimeDifference
|| __DATA.__data _NavigationConfig_UseCLPedestrianMapMatchedLocations
|| __DATA.__data _NavigationConfig_UseNewDisplayETACalculation
|| __DATA.__objc_data _OBJC_CLASS_$_MNKeepAliveManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballMockLocationProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballMockNetworkRequester
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceMiscInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MNKeepAliveManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNSessionUpdateManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballMockLocationProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballMockNetworkRequester
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceMiscInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNAudioOutputSetting._hfpPreference
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNAudioOutputSetting._pickableRoutes
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNAudioOutputSetting._selected
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNAudioOutputSetting._selectedForSystem
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._branchNames
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._destinationName
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._distance
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._distanceFormat
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._exitNumber
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._instructionFormats
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._intersectionName
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._junctionAngle
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._maneuverType
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._suppressFallback
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._suppressNames
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._toFreeway
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._towardNames
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._transportType
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNNavigationStateGuidance._navigationSessionManager
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNNavigationStateGuidance._startDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._backgroundTimeWindow
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._beepBeforeInstruction
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._distanceUnits
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._drivingVoiceGuidance
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._etaRequestInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._fakeTrafficIncidentAlert
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._initialRequestDelay
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._initialTraceSpeedMultiplier
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._isTracePlaybackCameraTestMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._maxAlternateRoutesCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._muteSpeechOverride
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._pauseSpokenAudio
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._shouldLoadETAUpdatesFromTrace
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._shouldLoadReroutesFromTrace
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._shouldRecordTrace
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._shouldUseGuidanceEventManager
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._simulationGPSError
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._simulationSpeed
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._speechEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._voiceLanguage
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._voiceVolume
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNSettings._walkingVoiceGuidance
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNVoiceController._activeNavigationSession
|| __DATA_CONST.__const _MNErrorDomain
|| __DATA_CONST.__const _MNErrorInternalDescriptionKey
|| __DATA_CONST.__const _MNLogFacilityAssert
|| __DATA_CONST.__const _MNLogFacilityAudio
|| __DATA_CONST.__const _MNLogFacilityCommuteDestination
|| __DATA_CONST.__const _MNLogFacilityCoreLocationRouteHints
|| __DATA_CONST.__const _MNLogFacilityDirectionsRequest
|| __DATA_CONST.__const _MNLogFacilityDodgeball
|| __DATA_CONST.__const _MNLogFacilityETAUpdateRequest
|| __DATA_CONST.__const _MNLogFacilityGuidanceManager
|| __DATA_CONST.__const _MNLogFacilityHybridLocationProvider
|| __DATA_CONST.__const _MNLogFacilityJunctionView
|| __DATA_CONST.__const _MNLogFacilityKeepAliveManager
|| __DATA_CONST.__const _MNLogFacilityLocationManager
|| __DATA_CONST.__const _MNLogFacilityLocationProvider
|| __DATA_CONST.__const _MNLogFacilityLocationTracker
|| __DATA_CONST.__const _MNLogFacilityNavigationService
|| __DATA_CONST.__const _MNLogFacilityNavigationSession
|| __DATA_CONST.__const _MNLogFacilityNavigationSessionManager
|| __DATA_CONST.__const _MNLogFacilityNavigationStateGuidance
|| __DATA_CONST.__const _MNLogFacilityNavigationStateManager
|| __DATA_CONST.__const _MNLogFacilityNavigationStateNoDestination
|| __DATA_CONST.__const _MNLogFacilityNavigationStatePrepareGuidance
|| __DATA_CONST.__const _MNLogFacilityPreloadSession
|| __DATA_CONST.__const _MNLogFacilityRouteStorage
|| __DATA_CONST.__const _MNLogFacilitySessionUpdateManager
|| __DATA_CONST.__const _MNLogFacilitySettingsManager
|| __DATA_CONST.__const _MNLogFacilityTimeballCache
|| __DATA_CONST.__const _MNLogFacilityTimeballDatabase
|| __DATA_CONST.__const _MNLogFacilityTimeballLocalPeer
|| __DATA_CONST.__const _MNLogFacilityTimeballLocalProxy
|| __DATA_CONST.__const _MNLogFacilityTimeballLocationManager
|| __DATA_CONST.__const _MNLogFacilityTimeballRefreshPolicy
|| __DATA_CONST.__const _MNLogFacilityTimeballRequester
|| __DATA_CONST.__const _MNLogFacilityTimeballRoutingProvider
|| __DATA_CONST.__const _MNLogFacilityTimeballServer
|| __DATA_CONST.__const _MNLogFacilityTimeballService
|| __DATA_CONST.__const _MNLogFacilityTimeballXPC
|| __DATA_CONST.__const _MNLogFacilityTrace
|| __DATA_CONST.__const _MNLogFacilityTrafficIncidentAlertUpdater
|| __DATA_CONST.__const _MNLogFacilityTransitUpdateRequest
|| __DATA_CONST.__const _MNLogFacilityTunnelProjector
|| __DATA_CONST.__const _MNLogFacilityXPC
|| __DATA_CONST.__const _MNLogFacilityXPCTransactionCounter
|| __DATA_CONST.__const _MNLogFacilityXPCTransactionManager
|| __DATA_CONST.__const _MNLoggingSubsystem
|| __DATA_CONST.__const _NavdMapsSuggestionsManagerClassString
|| __DATA_CONST.__const _NavdNotificationManagerClassString
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNActiveRouteInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNAnnouncementConflict
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNAnnouncementPlan
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNAnnouncementPlanEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNAudioFrameworkSymbols
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNAudioOutputSetting
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNAudioOutputSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationETAScore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationGeodesicDistanceScore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationLocationHistoryScore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationMapsSuggestionsScore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationOffRouteScore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationScore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationStartEndTimeScore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteDestinationSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCommuteSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCompanionNavigationAdapter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNComparison
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNCoreMotionContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNDirectionsRequestDetails
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNDirectionsRequestManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNDrivingTurnByTurnLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNETADisplayFormatter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNFilePaths
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceEventFeedback
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceEventManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceJunctionViewImage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceJunctionViewInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceLaneInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceSignDescription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceSignInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNHybridLocationProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNListInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNLocationDetails
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNLocationHistory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNMutableSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNanoFormattedStringFormatter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationProxyUpdater
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationServiceDirectionsRequestTicket
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationSessionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStateGuidance
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStateGuidanceTurnByTurn
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStateNoDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStatePredictingDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStatePrepareGuidance
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationTraceInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationTraceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNPlannedDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNPreloadSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRealtimeTransitUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRealtimeUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteCoordinate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteCoordinateWithType
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteProximitySensor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyRulesDefault
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyRulesForeground
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyRulesTimeToLeave
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyScheduler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteUpdateFreshness
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNSessionUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNSignInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNSpokenInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNStartNavigationDetails
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNSuggestionsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimeballCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimeballCacheEntry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimeballLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimeballRoutingProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimeballServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimeballService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTimepoint
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTrace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceAnnotatedUserBehaviorRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceAnnotatedUserEnvironmentRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceBookmark
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceBookmarkRecorder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceCommuteDestinationRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceCommuteDirectionsRequestRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceDirectionsRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceETAUpdateRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceHeadingDataRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceLoader
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceLocationRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceMotionDataRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTracePlaybackDetails
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTracePlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTracePlayerScheduler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTracePlayerTimelineStream
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceRecorder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceRecordingData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceRouteSelectionsRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceRouteSimulator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceVehicleHeadingRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceVehicleSpeedRow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTrafficIncidentAlert
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTrafficIncidentAlertDetails
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTransitInstruction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTransitStepInstruction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTransitWalkingLegInstruction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTunnelLocationProjector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTurnByTurnLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNVoiceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNVoiceLanguageUtil
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNWalkingTurnByTurnLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNXPCActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNXPCTransactionCounter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__MNTimepointAndTransportType
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNActiveRouteInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNAnnouncementConflict
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNAnnouncementPlan
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNAnnouncementPlanEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNAudioFrameworkSymbols
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNAudioOutputSetting
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNAudioOutputSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationETAScore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationGeodesicDistanceScore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationLocationHistoryScore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationMapsSuggestionsScore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationOffRouteScore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationScore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationStartEndTimeScore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteDestinationSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCommuteSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCompanionNavigationAdapter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNComparison
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNCoreMotionContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNDirectionsRequestDetails
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNDirectionsRequestManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNDrivingTurnByTurnLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNETADisplayFormatter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNFilePaths
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceEventFeedback
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceEventManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceJunctionViewImage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceJunctionViewInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceLaneInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceSignDescription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceSignInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNHybridLocationProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNListInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNLocationDetails
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNLocationHistory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNMutableSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNanoFormattedStringFormatter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationProxyUpdater
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationServiceDirectionsRequestTicket
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationSessionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStateGuidance
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStateGuidanceTurnByTurn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStateNoDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStatePredictingDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStatePrepareGuidance
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationTraceInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationTraceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNPlannedDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNPreloadSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRealtimeTransitUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRealtimeUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteCoordinate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteCoordinateWithType
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteProximitySensor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyRulesDefault
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyRulesForeground
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyRulesTimeToLeave
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyScheduler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteUpdateFreshness
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNSignInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNSpokenInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNStartNavigationDetails
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNSuggestionsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimeballCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimeballCacheEntry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimeballLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimeballRoutingProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimeballServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimeballService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTimepoint
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTrace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceAnnotatedUserBehaviorRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceAnnotatedUserEnvironmentRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceBookmark
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceBookmarkRecorder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceCommuteDestinationRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceCommuteDirectionsRequestRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceDirectionsRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceETAUpdateRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceHeadingDataRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceLoader
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceLocationRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceMotionDataRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTracePlaybackDetails
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTracePlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTracePlayerScheduler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTracePlayerTimelineStream
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceRecorder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceRecordingData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceRouteSelectionsRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceRouteSimulator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceVehicleHeadingRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceVehicleSpeedRow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTrafficIncidentAlert
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTrafficIncidentAlertDetails
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTransitInstruction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTransitStepInstruction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTransitWalkingLegInstruction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTunnelLocationProjector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTurnByTurnLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNVoiceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNVoiceLanguageUtil
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNWalkingTurnByTurnLocationTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNXPCActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNXPCTransactionCounter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__MNTimepointAndTransportType
|| __TEXT.__const _MNCommuteETAUpdateInterval
|| __TEXT.__text _MNAssertOptionalProtocolMethodsHelper
|| __TEXT.__text _MNClearStoredRoutesUsedBefore
|| __TEXT.__text _MNDeviceSpeakerIsInUse
|| __TEXT.__text _MNDirectionsRequestDetailsReadFrom
|| __TEXT.__text _MNDisplayETAAndRemainingMinutes
|| __TEXT.__text _MNDrivingWalkingRouteInfosFromRequestResponse
|| __TEXT.__text _MNFormattedStringOptionsHash
|| __TEXT.__text _MNFormattedStringOptionsIsEqual
|| __TEXT.__text _MNGetHoursAndMinutesForTimeInterval
|| __TEXT.__text _MNGetRouteWithID
|| __TEXT.__text _MNGuidanceEventFeedbackReadFrom
|| __TEXT.__text _MNHeadphonesAreInUse
|| __TEXT.__text _MNInstructionsCalculateDistanceUnits
|| __TEXT.__text _MNInstructionsDistanceTypeConvertToMeters
|| __TEXT.__text _MNInstructionsInitOptionsWithDefault
|| __TEXT.__text _MNInstructionsIsStepAppropriateForProceedToRouteAnnouncement
|| __TEXT.__text _MNInstructionsLocalizedImperialUnits
|| __TEXT.__text _MNInstructionsLocalizedMetricUnits
|| __TEXT.__text _MNInstructionsShortPromptTypeForManeuver
|| __TEXT.__text _MNInstructionsShortPromptTypeForStepInRoute
|| __TEXT.__text _MNJSONForBool
|| __TEXT.__text _MNJSONForCoordinate
|| __TEXT.__text _MNJSONForDate
|| __TEXT.__text _MNJSONForError
|| __TEXT.__text _MNJSONForLatLng
|| __TEXT.__text _MNJSONForLocation
|| __TEXT.__text _MNJSONForMapRegion
|| __TEXT.__text _MNJSONForObject
|| __TEXT.__text _MNJSONForRoute
|| __TEXT.__text _MNJSONForRoutes
|| __TEXT.__text _MNJSONForWaypoint
|| __TEXT.__text _MNJSONForWaypointAndTransportType
|| __TEXT.__text _MNJSONStringForObject
|| __TEXT.__text _MNLocaleDidChangeNotification
|| __TEXT.__text _MNLocationDetailsReadFrom
|| __TEXT.__text _MNLogProcessHandling
|| __TEXT.__text _MNLogRouteStorage
|| __TEXT.__text _MNMap
|| __TEXT.__text _MNNavigationServiceStateAsString
|| __TEXT.__text _MNNavigationServiceStateChangedFromNavigatingToStopped
|| __TEXT.__text _MNNavigationServiceStateChangedToNavigating
|| __TEXT.__text _MNNavigationServiceStateIsNavigating
|| __TEXT.__text _MNNavigationTypeForRouteInCountry
|| __TEXT.__text _MNProtocolDeclaresSelector
|| __TEXT.__text _MNRouteCoordinateReadFrom
|| __TEXT.__text _MNRouteRequestOptionsAsString
|| __TEXT.__text _MNSaveRoute
|| __TEXT.__text _MNStringForJSONObject
|| __TEXT.__text _MNTimeballEnabled
|| __TEXT.__text _MNTimepointTypeAsString
|| __TEXT.__text _MNTraceBookmarkReadFrom
|| __TEXT.__text _MNTraceNavigationEventTypeAsString
|| __TEXT.__text _MNTracePlaybackDetailsReadFrom
|| __TEXT.__text _MNTrafficIncidentAlertDetailsReadFrom
|| __TEXT.__text _MNTransitRouteInfosFromRequestResponse
|| __TEXT.__text _MNTransportTypeSupportsTurnByTurn
|| __TEXT.__text _MNTravelModeAsString
|| __TEXT.__text _NavigationConfig_GetConfigStoreStringKeysForWatchSync
|| __TEXT.__text _NavigationConfig_GetUserDefaultStringKeysForWatchSync
|| __TEXT.__text __MNDisplayETAAndRemainingMinutesNew
|| __TEXT.__text __MNDisplayETAAndRemainingMinutesOld
|| __TEXT.__text __navigation_GEOLatLngIsNilOrZero
|| __TEXT.__text _navDisplayAddressForMapItem
|| __TEXT.__text _navDisplayNameForMapItem
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFBundleCopyLocalizationsForPreferences
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFStringTokenizerCopyBestStringLanguage
__ CoreFoundation: _NSCurrentLocaleDidChangeNotification
__ CoreFoundation: _NSLocaleLanguageCode
__ CoreFoundation: _NSLocaleUsesMetricSystem
__ CoreFoundation: _NSURLFileProtectionCompleteUntilFirstUserAuthentication
__ CoreFoundation: _NSURLFileProtectionKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFLocaleCurrentLocaleDidChangeNotification
__ CoreLocation: _CLGenerateRoadSegmentId
__ CoreLocation: _CLLocationCoordinate2DIsValid
__ CoreLocation: _CLLocationCoordinate2DMake
__ CoreLocation: _CLSetRouteHintsForMapMatching
__ CoreLocation: _OBJC_CLASS_$_CLHeading
__ CoreLocation: _OBJC_CLASS_$_CLInUseAssertion
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreLocation: _OBJC_CLASS_$_CLLocationManager
__ CoreLocation: _OBJC_CLASS_$_CLLocationMatchInfo
__ CoreLocation: _OBJC_METACLASS_$_CLLocation
__ CoreLocation: _kCLDistanceFilterNone
__ CoreLocation: _kCLErrorDomain
__ CoreLocation: _kCLLocationAccuracyBest
__ CoreLocation: _kCLLocationAccuracyBestForNavigation
__ CoreLocation: _kCLLocationAccuracyLeech
__ CoreLocation: _kCLLocationCoordinate2DInvalid
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSFileModificationDate
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSSelectorFromString
__ Foundation: _NSSetUncaughtExceptionHandler
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUserDefaultsDidChangeNotification
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSDateComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMeasurement
__ Foundation: _OBJC_CLASS_$_NSMeasurementFormatter
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUnitLength
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ GeoServices: _DefaultLoggingSubsystem
__ GeoServices: _GEOAngleDifferenceDegrees
__ GeoServices: _GEOArrivalTimeAndDistanceInvalid
__ GeoServices: _GEOBearingFromCoordinateToCoordinate
__ GeoServices: _GEOCalculateDistance
__ GeoServices: _GEOClosestCoordinateOnLineSegmentFromCoordinate
__ GeoServices: _GEOConfigGetBOOL
__ GeoServices: _GEOConfigGetDouble
__ GeoServices: _GEOConfigGetInteger
__ GeoServices: _GEOConfigGetString
__ GeoServices: _GEOConfigGetUInteger
__ GeoServices: _GEOConfigSetBytes
__ GeoServices: _GEOCoordinate2DForMapPoint
__ GeoServices: _GEODistanceForTimeOnStep
__ GeoServices: _GEOErrorDomain
__ GeoServices: _GEOErrorReasonKey
__ GeoServices: _GEOFeatureGetLocalizedLabel
__ GeoServices: _GEOFeatureGetLocalizedShield
__ GeoServices: _GEOFeatureGetNativeLabel
__ GeoServices: _GEOFeatureGetNativeShield
__ GeoServices: _GEOFindOrCreateLog
__ GeoServices: _GEOMapPointForCoordinate
__ GeoServices: _GEOMapPointsPerMeterAtLatitude
__ GeoServices: _GEOMapRectForGEOTileKey
__ GeoServices: _GEOMultiSectionFeaturePoints
__ GeoServices: _GEOPolylineCoordinateCompare
__ GeoServices: _GEOPolylineCoordinateInvalid
__ GeoServices: _GEOPolylineCoordinateWithinRange
__ GeoServices: _GEOResourcesPath
__ GeoServices: _GEOStringForError
__ GeoServices: _GEOSynchronizeDefaults
__ GeoServices: _GEOTFTrafficSnapshotReadFrom
__ GeoServices: _GEOTileLoaderClientIdentifier
__ GeoServices: _GEOTimeForDistanceOnStep
__ GeoServices: _GEOTransitDepartureIsImminentDepartureTimeInterval
__ GeoServices: _GeoAnalyticsConfig_RealtimeTrafficProbeTripIdFromCoreLocation
__ GeoServices: _GeoAnalyticsConfig_TrafficSnapshotFilename
__ GeoServices: _GeoServicesConfig_LastKnownOnRoadPosition
__ GeoServices: _GeoServicesConfig_LocalizationCapabilities
__ GeoServices: _GeoServicesConfig_MaxDistanceFromOriginToSuppressReroute
__ GeoServices: _GeoServicesConfig_ResourceManifestEnvironment
__ GeoServices: _GeoServicesConfig_ShouldUseServerArrivalParameters
__ GeoServices: _GeoServicesConfig_ZilchSupported
__ GeoServices: _OBJC_CLASS_$_GEOAddress
__ GeoServices: _OBJC_CLASS_$_GEOApplicationAuditToken
__ GeoServices: _OBJC_CLASS_$_GEOAutomobileOptions
__ GeoServices: _OBJC_CLASS_$_GEOCommonOptions
__ GeoServices: _OBJC_CLASS_$_GEOCompanionRouteDetails
__ GeoServices: _OBJC_CLASS_$_GEOCompanionRouteStatus
__ GeoServices: _OBJC_CLASS_$_GEOCompanionRouteUpdate
__ GeoServices: _OBJC_CLASS_$_GEOComposedRoute
__ GeoServices: _OBJC_CLASS_$_GEOComposedRouteLaneInfo
__ GeoServices: _OBJC_CLASS_$_GEOComposedRouteStep
__ GeoServices: _OBJC_CLASS_$_GEOComposedRouteTraffic
__ GeoServices: _OBJC_CLASS_$_GEOComposedTransitWalkingRouteStep
__ GeoServices: _OBJC_CLASS_$_GEOComposedWaypoint
__ GeoServices: _OBJC_CLASS_$_GEOCountryConfiguration
__ GeoServices: _OBJC_CLASS_$_GEODestinationInfo
__ GeoServices: _OBJC_CLASS_$_GEODirectionService
__ GeoServices: _OBJC_CLASS_$_GEODirectionsError
__ GeoServices: _OBJC_CLASS_$_GEODirectionsRequest
__ GeoServices: _OBJC_CLASS_$_GEODirectionsRequestFeedback
__ GeoServices: _OBJC_CLASS_$_GEODirectionsRequester
__ GeoServices: _OBJC_CLASS_$_GEODirectionsResponse
__ GeoServices: _OBJC_CLASS_$_GEOETARoute
__ GeoServices: _OBJC_CLASS_$_GEOETAStep
__ GeoServices: _OBJC_CLASS_$_GEOETATrafficUpdateRequest
__ GeoServices: _OBJC_CLASS_$_GEOETATrafficUpdateRequester
__ GeoServices: _OBJC_CLASS_$_GEOETATrafficUpdateResponse
__ GeoServices: _OBJC_CLASS_$_GEOETAUpdater
__ GeoServices: _OBJC_CLASS_$_GEOFormattedString
__ GeoServices: _OBJC_CLASS_$_GEOImageServiceRequest
__ GeoServices: _OBJC_CLASS_$_GEOImageServiceRequester
__ GeoServices: _OBJC_CLASS_$_GEOJunction
__ GeoServices: _OBJC_CLASS_$_GEOLatLng
__ GeoServices: _OBJC_CLASS_$_GEOLocalizationCapabilities
__ GeoServices: _OBJC_CLASS_$_GEOLocation
__ GeoServices: _OBJC_CLASS_$_GEOLocationShifter
__ GeoServices: _OBJC_CLASS_$_GEOMapRegion
__ GeoServices: _OBJC_CLASS_$_GEOMapService
__ GeoServices: _OBJC_CLASS_$_GEOMotionContext
__ GeoServices: _OBJC_CLASS_$_GEONavRoutePreloader
__ GeoServices: _OBJC_CLASS_$_GEONavdClientInfo
__ GeoServices: _OBJC_CLASS_$_GEONavdDefaults
__ GeoServices: _OBJC_CLASS_$_GEONavdPeer
__ GeoServices: _OBJC_CLASS_$_GEONavigationDrivingMapMatcher
__ GeoServices: _OBJC_CLASS_$_GEONavigationGuidanceState
__ GeoServices: _OBJC_CLASS_$_GEONavigationProxy
__ GeoServices: _OBJC_CLASS_$_GEONavigationWalkingMapMatcher
__ GeoServices: _OBJC_CLASS_$_GEOPlatform
__ GeoServices: _OBJC_CLASS_$_GEOQuickETARequester
__ GeoServices: _OBJC_CLASS_$_GEOResourceManifestManager
__ GeoServices: _OBJC_CLASS_$_GEOResourceManifestUpdateAssertion
__ GeoServices: _OBJC_CLASS_$_GEORoadMatch
__ GeoServices: _OBJC_CLASS_$_GEORoadMatcher
__ GeoServices: _OBJC_CLASS_$_GEORoute
__ GeoServices: _OBJC_CLASS_$_GEORouteAttributes
__ GeoServices: _OBJC_CLASS_$_GEORouteInitializerData
__ GeoServices: _OBJC_CLASS_$_GEORouteMatch
__ GeoServices: _OBJC_CLASS_$_GEORouteMatcher
__ GeoServices: _OBJC_CLASS_$_GEORoutePreloader
__ GeoServices: _OBJC_CLASS_$_GEOSQLiteDB
__ GeoServices: _OBJC_CLASS_$_GEOStep
__ GeoServices: _OBJC_CLASS_$_GEOStructuredAddress
__ GeoServices: _OBJC_CLASS_$_GEOTFTrafficSnapshot
__ GeoServices: _OBJC_CLASS_$_GEOTileLoader
__ GeoServices: _OBJC_CLASS_$_GEOTraceRouteSimulator
__ GeoServices: _OBJC_CLASS_$_GEOTrafficBannerText
__ GeoServices: _OBJC_CLASS_$_GEOTransitOptions
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteMatcher
__ GeoServices: _OBJC_CLASS_$_GEOTransitRoutePreloader
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteUpdate
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteUpdateRequest
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteUpdater
__ GeoServices: _OBJC_CLASS_$_GEOUserSession
__ GeoServices: _OBJC_CLASS_$_GEOVectorTileDecoder
__ GeoServices: _OBJC_CLASS_$_GEOWalkingOptions
__ GeoServices: _OBJC_IVAR_$_GEONavdPeer._clientInfo
__ GeoServices: _OBJC_IVAR_$_GEONavdPeer._connection
__ GeoServices: _OBJC_IVAR_$_GEORouteInitializerData._directionsResponse
__ GeoServices: _OBJC_IVAR_$_GEORouteInitializerData._etaTrafficUpdateResponse
__ GeoServices: _OBJC_METACLASS_$_GEONavdPeer
__ GeoServices: _OBJC_METACLASS_$_GEOTraceRouteSimulator
__ GeoServices: __GEOConfigRemoveValue
__ GeoServices: __ZNK5zilch12ControlPoint8positionEv
__ GeoServices: __ZNK5zilch14GeoCoordinates1xEv
__ GeoServices: __ZNK5zilch14GeoCoordinates1yEv
__ GeoServices: __ZNK5zilch8Latitude9toDegreesEv
__ GeoServices: __ZNK5zilch9Longitude9toDegreesEv
__ GeoServices: _descriptionForLaneInfos
__ GeoServices: _geo_dispatch_queue_create_with_qos
__ GeoServices: _geo_isolate_sync
__ GeoServices: _geo_isolater_create
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_CLASS_$_PBDataReader
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ libSystem.B.dylib: _XPC_ACTIVITY_ALLOW_BATTERY
__ libSystem.B.dylib: _XPC_ACTIVITY_CHECK_IN
__ libSystem.B.dylib: _XPC_ACTIVITY_DELAY
__ libSystem.B.dylib: _XPC_ACTIVITY_GRACE_PERIOD
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_BIDIRECTIONAL
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_UPLOAD
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_MAINTENANCE
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_UTILITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REPEATING
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_SHOULD_WAKE_DEVICE
__ libSystem.B.dylib: _XPC_ACTIVITY_USES_DUET_POWER_BUDGETING
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___exp10
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_assert_queue_not$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dispatch_workloop_create
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _lround
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _proc_pidpath
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_issue_file
__ libSystem.B.dylib: _sandbox_extension_release
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _xpc_activity_get_state
__ libSystem.B.dylib: _xpc_activity_register
__ libSystem.B.dylib: _xpc_activity_unregister
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: dyld_stub_binder
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _protocol_copyMethodDescriptionList
__ libobjc.A.dylib: _protocol_getMethodDescription
__ libsqlite3.dylib: _sqlite3_backup_finish
__ libsqlite3.dylib: _sqlite3_backup_init
__ libsqlite3.dylib: _sqlite3_backup_step
__ libsqlite3.dylib: _sqlite3_bind_blob
__ libsqlite3.dylib: _sqlite3_bind_double
__ libsqlite3.dylib: _sqlite3_bind_int
__ libsqlite3.dylib: _sqlite3_bind_int64
__ libsqlite3.dylib: _sqlite3_bind_null
__ libsqlite3.dylib: _sqlite3_bind_text
__ libsqlite3.dylib: _sqlite3_clear_bindings
__ libsqlite3.dylib: _sqlite3_close
__ libsqlite3.dylib: _sqlite3_column_blob
__ libsqlite3.dylib: _sqlite3_column_bytes
__ libsqlite3.dylib: _sqlite3_column_double
__ libsqlite3.dylib: _sqlite3_column_int
__ libsqlite3.dylib: _sqlite3_column_text
__ libsqlite3.dylib: _sqlite3_column_type
__ libsqlite3.dylib: _sqlite3_data_count
__ libsqlite3.dylib: _sqlite3_db_config
__ libsqlite3.dylib: _sqlite3_errmsg
__ libsqlite3.dylib: _sqlite3_exec
__ libsqlite3.dylib: _sqlite3_finalize
__ libsqlite3.dylib: _sqlite3_free
__ libsqlite3.dylib: _sqlite3_last_insert_rowid
__ libsqlite3.dylib: _sqlite3_open_v2
__ libsqlite3.dylib: _sqlite3_prepare_v2
__ libsqlite3.dylib: _sqlite3_reset
__ libsqlite3.dylib: _sqlite3_step
MNLocationTracker : NSObject /usr/lib/libc++.1.dylib <MNNavigationSessionObserver, MNSessionUpdateManagerDelegate>
 @property  MNObserverHashTable *safeDelegate
 @property  MNNavigationSession *navigationSession
 @property  int state
 @property  GEOApplicationAuditToken *auditToken
 @property  int transportType
 @property  MNLocation *lastMatchedLocation
 @property  BOOL isRerouting
 @property  BOOL hasArrived
 @property  BOOL shouldProjectAlongRoute
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNLocationTracker init]
  -[MNLocationTracker dealloc]
  -[MNLocationTracker setDelegate:]
  -[MNLocationTracker .cxx_destruct]
  -[MNLocationTracker pause]
  -[MNLocationTracker resume]
  -[MNLocationTracker state]
  -[MNLocationTracker _auditToken]
  -[MNLocationTracker transportType]
  -[MNLocationTracker _defaultsDidChange]
  -[MNLocationTracker _setState:]
  -[MNLocationTracker paused]
  -[MNLocationTracker hasArrived]
  -[MNLocationTracker stopTracking]
  -[MNLocationTracker updateLocation:]
  -[MNLocationTracker _updateShouldLocalizeRoadNames]
  -[MNLocationTracker _matchedLocationForLocation:]
  -[MNLocationTracker _switchedToStepAtIndex:]
  -[MNLocationTracker updateManager:willSendTransitUpdateRequests:]
  -[MNLocationTracker updateManager:didReceiveTransitUpdateResponse:]
  -[MNLocationTracker updateManager:willSendTransitUpdateRequestForRouteIDs:]
  -[MNLocationTracker updateManager:didReceiveTransitUpdates:]
  -[MNLocationTracker updateManager:didReceiveTransitError:]
  -[MNLocationTracker updateManager:willSendETARequest:]
  -[MNLocationTracker updateManager:didReceiveETAResponse:toRequest:]
  -[MNLocationTracker updateManager:didUpdateETAForRouteInfo:]
  -[MNLocationTracker updateManager:didReceiveETAError:]
  -[MNLocationTracker wantsETAUpdates]
  -[MNLocationTracker routeInfoForUpdateManager:]
  -[MNLocationTracker userLocationForUpdateManager:]
  -[MNLocationTracker initWithNavigationSession:]
  -[MNLocationTracker isRerouting]
  -[MNLocationTracker shouldProjectAlongRoute]
  -[MNLocationTracker startTracking]
  -[MNLocationTracker updateDestination:finishedHandler:]
  -[MNLocationTracker reroute:reason:]
  -[MNLocationTracker matchedLocationForLocation:]
  -[MNLocationTracker updateVehicleSpeed:timestamp:]
  -[MNLocationTracker updateVehicleHeading:timestamp:]
  -[MNLocationTracker shouldAllowPause]
  -[MNLocationTracker _setIsNavigatingInLowGuidance:]
  -[MNLocationTracker _updateMatchedLocation:]
  -[MNLocationTracker _roadFeaturesForFeature:outRoadName:outShieldText:outShieldType:]
  -[MNLocationTracker lastMatchedLocation]
  -[MNLocationTracker safeDelegate]
  -[MNLocationTracker navigationSession]
  -[MNLocationTracker _setAuditToken:]
  -[MNLocationTracker resetForTracePlayerAtLocation:]
  -[MNLocationTracker traceForcedRerouteWithResponse:request:]
  -[MNLocationTracker traceForcedActiveTransportTypeChange:]
  -[MNLocationTracker tracePaused]
  -[MNLocationTracker traceJumpedInTime]
  -[MNLocationTracker forceOnRoute:atLocation:]


MNGuidanceSignInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  MNGuidanceSignDescription *primarySign
 @property  MNGuidanceSignDescription *secondarySign
 @property  double primaryDistance_SIRI_USE_ONLY
 @property  double secondaryDistance_SIRI_USE_ONLY
 @property  double timeUntilPrimarySign_SIRI_USE_ONLY
 @property  double timeUntilSecondarySign_SIRI_USE_ONLY

  // class methods
  +[MNGuidanceSignInfo supportsSecureCoding]

  // instance methods
  -[MNGuidanceSignInfo encodeWithCoder:]
  -[MNGuidanceSignInfo initWithCoder:]
  -[MNGuidanceSignInfo .cxx_destruct]
  -[MNGuidanceSignInfo primarySign]
  -[MNGuidanceSignInfo secondarySign]
  -[MNGuidanceSignInfo primaryDistance_SIRI_USE_ONLY]
  -[MNGuidanceSignInfo secondaryDistance_SIRI_USE_ONLY]
  -[MNGuidanceSignInfo timeUntilPrimarySign_SIRI_USE_ONLY]
  -[MNGuidanceSignInfo timeUntilSecondarySign_SIRI_USE_ONLY]
  -[MNGuidanceSignInfo initWithPrimarySign:secondarySign:primaryDistance:secondaryDistance:timeUntilPrimarySign:timeUntilSecondarySign:]


MNObserverHashTable : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL hasObservers
 @property  NSObject<OS_dispatch_queue> *callbackQueue

  // instance methods
  -[MNObserverHashTable methodSignatureForSelector:]
  -[MNObserverHashTable forwardInvocation:]
  -[MNObserverHashTable count]
  -[MNObserverHashTable hasObservers]
  -[MNObserverHashTable .cxx_destruct]
  -[MNObserverHashTable addObserver:]
  -[MNObserverHashTable removeObserver:]
  -[MNObserverHashTable callbackQueue]
  -[MNObserverHashTable setCallbackQueue:]
  -[MNObserverHashTable initWithProtocol:]


MNTransitInstruction : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *majorFormattedInstruction
 @property  NSArray *minorFormattedInstruction
 @property  NSArray *tertiaryFormattedInstruction
 @property  <GEOServerFormattedString> *departureBarInstruction
 @property  long long departureBarStyle
 @property  <GEOServerFormattedString> *countStopsFormattedString
 @property  <GEOServerFormattedString> *expandableListFormattedString
 @property  <GEOServerFormattedString> *primaryTimeInstruction
 @property  <GEOServerFormattedString> *secondaryTimeinstruction
 @property  BOOL hideTimeInstructionsWhenCollapsed
 @property  long long context

  // class methods
  +[MNTransitInstruction instructionForUncertainArrivalToStationStep:context:]

  // instance methods
  -[MNTransitInstruction .cxx_destruct]
  -[MNTransitInstruction context]
  -[MNTransitInstruction initWithContext:]
  -[MNTransitInstruction instructionSet]
  -[MNTransitInstruction departureBarStyle]
  -[MNTransitInstruction setDepartureBarStyle:]
  -[MNTransitInstruction countStopsFormattedString]
  -[MNTransitInstruction expandableListFormattedString]
  -[MNTransitInstruction instructionSetsForInstructionType:]
  -[MNTransitInstruction setMajorFormattedInstruction:]
  -[MNTransitInstruction setMinorFormattedInstruction:]
  -[MNTransitInstruction setTertiaryFormattedInstruction:]
  -[MNTransitInstruction setDepartureBarInstruction:]
  -[MNTransitInstruction setCountStopsFormattedString:]
  -[MNTransitInstruction setExpandableListFormattedString:]
  -[MNTransitInstruction setPrimaryTimeInstruction:]
  -[MNTransitInstruction setSecondaryTimeinstruction:]
  -[MNTransitInstruction setHideTimeInstructionsWhenCollapsed:]
  -[MNTransitInstruction overridenInstructionsMapping]
  -[MNTransitInstruction majorFormattedInstruction]
  -[MNTransitInstruction minorFormattedInstruction]
  -[MNTransitInstruction tertiaryFormattedInstruction]
  -[MNTransitInstruction primaryTimeInstruction]
  -[MNTransitInstruction secondaryTimeinstruction]
  -[MNTransitInstruction _fillInInstructions]
  -[MNTransitInstruction refreshInstructionStrings]
  -[MNTransitInstruction formattedInstructionForType:]
  -[MNTransitInstruction departureBarInstruction]
  -[MNTransitInstruction hideTimeInstructionsWhenCollapsed]


MNTransitStepInstruction : MNTransitInstruction
 @property  GEOComposedRouteStep *step
 @property  NSDictionary *overridenInstructionsMapping

  // class methods
  +[MNTransitStepInstruction instructionForStep:overrides:context:]
  +[MNTransitStepInstruction instructionForStep:context:]

  // instance methods
  -[MNTransitStepInstruction .cxx_destruct]
  -[MNTransitStepInstruction step]
  -[MNTransitStepInstruction instructionSet]
  -[MNTransitStepInstruction overridenInstructionsMapping]
  -[MNTransitStepInstruction initWithStep:overrides:context:]


MNTransitWalkingLegInstruction : MNTransitInstruction
 @property  GEOComposedWalkingRouteLeg *walkingLeg

  // class methods
  +[MNTransitWalkingLegInstruction instructionForWalkingLeg:context:]

  // instance methods
  -[MNTransitWalkingLegInstruction .cxx_destruct]
  -[MNTransitWalkingLegInstruction instructionSet]
  -[MNTransitWalkingLegInstruction overridenInstructionsMapping]
  -[MNTransitWalkingLegInstruction initWithWalkingLeg:context:]
  -[MNTransitWalkingLegInstruction walkingLeg]


MNTracePlayerETAUpdater : MNSessionUpdateManager
  // instance methods
  -[MNTracePlayerETAUpdater dealloc]
  -[MNTracePlayerETAUpdater .cxx_destruct]
  -[MNTracePlayerETAUpdater _handleDelayTimerWithUpdateRow:]
  -[MNTracePlayerETAUpdater playETAUpdate:]
  -[MNTracePlayerETAUpdater startUpdateRequestsForRoutes:andNavigationType:]
  -[MNTracePlayerETAUpdater resumeUpdateRequests]


FakeBitsAndPieces : NSObject /usr/lib/libc++.1.dylib
 @property  GEOLocation *location
 @property  NSString *name
 @property  double weight
 @property  unsigned long type
 @property  NSDate *expires
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  GEOComposedWaypoint *waypoint
 @property  MNCommuteDestinationSuggestion *fakeSuggestion

  // instance methods
  -[FakeBitsAndPieces name]
  -[FakeBitsAndPieces type]
  -[FakeBitsAndPieces setType:]
  -[FakeBitsAndPieces .cxx_destruct]
  -[FakeBitsAndPieces setName:]
  -[FakeBitsAndPieces startDate]
  -[FakeBitsAndPieces endDate]
  -[FakeBitsAndPieces location]
  -[FakeBitsAndPieces setStartDate:]
  -[FakeBitsAndPieces setEndDate:]
  -[FakeBitsAndPieces setWeight:]
  -[FakeBitsAndPieces weight]
  -[FakeBitsAndPieces setLocation:]
  -[FakeBitsAndPieces waypoint]
  -[FakeBitsAndPieces setWaypoint:]
  -[FakeBitsAndPieces setExpires:]
  -[FakeBitsAndPieces expires]
  -[FakeBitsAndPieces fakeSuggestion]


MNAnnouncementConflict : NSObject /usr/lib/libc++.1.dylib
 @property  MNAnnouncementPlanEvent *firstEvent
 @property  MNAnnouncementPlanEvent *secondEvent
 @property  double timeGap
 @property  double desiredTimeGap
 @property  BOOL announcementsAreSimilar

  // instance methods
  -[MNAnnouncementConflict .cxx_destruct]
  -[MNAnnouncementConflict announcementsAreSimilar]
  -[MNAnnouncementConflict timeGap]
  -[MNAnnouncementConflict desiredTimeGap]
  -[MNAnnouncementConflict firstEvent]
  -[MNAnnouncementConflict secondEvent]
  -[MNAnnouncementConflict setFirstEvent:]
  -[MNAnnouncementConflict setSecondEvent:]
  -[MNAnnouncementConflict setTimeGap:]
  -[MNAnnouncementConflict setDesiredTimeGap:]
  -[MNAnnouncementConflict setAnnouncementsAreSimilar:]


MNAnnouncementPlan : NSObject /usr/lib/libc++.1.dylib
 @property  MNGuidanceEventManager *manager
 @property  NSArray *events
 @property  NSMutableArray *plannedEvents
 @property  double distance
 @property  double speed

  // class methods
  +[MNAnnouncementPlan desiredTimeGapBetweenEvent:andEvent:]

  // instance methods
  -[MNAnnouncementPlan .cxx_destruct]
  -[MNAnnouncementPlan manager]
  -[MNAnnouncementPlan events]
  -[MNAnnouncementPlan setEvents:]
  -[MNAnnouncementPlan speed]
  -[MNAnnouncementPlan setSpeed:]
  -[MNAnnouncementPlan setManager:]
  -[MNAnnouncementPlan setDistance:]
  -[MNAnnouncementPlan distance]
  -[MNAnnouncementPlan sortEvents]
  -[MNAnnouncementPlan plannedEvents]
  -[MNAnnouncementPlan initWithEvents:distance:speed:manager:]
  -[MNAnnouncementPlan nextConflict]
  -[MNAnnouncementPlan setPlannedEvents:]


MNTrafficIncidentAlertDetails : PBCodable /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices <NSCopying>
 @property  BOOL hasAlertID
 @property  NSData *alertID
 @property  BOOL hasEtaResponseID
 @property  NSData *etaResponseID
 @property  BOOL hasAlertType
 @property  unsigned int alertType
 @property  BOOL hasEtaRoute
 @property  GEOETARoute *etaRoute
 @property  BOOL hasOriginalRoute
 @property  GEORoute *originalRoute
 @property  BOOL hasOriginalRouteTrafficData
 @property  NSData *originalRouteTrafficData
 @property  BOOL hasAlternateRoute
 @property  GEORoute *alternateRoute
 @property  BOOL hasAlternateRouteTrafficData
 @property  NSData *alternateRouteTrafficData
 @property  BOOL hasStartValidCoordinateRange
 @property  MNRouteCoordinate *startValidCoordinateRange
 @property  BOOL hasEndValidCoordinateRange
 @property  MNRouteCoordinate *endValidCoordinateRange
 @property  BOOL hasIncidentCoordinate
 @property  MNRouteCoordinate *incidentCoordinate
 @property  BOOL hasAlertTimestamp
 @property  double alertTimestamp
 @property  BOOL hasEtaTimestamp
 @property  double etaTimestamp
 @property  BOOL hasDistanceToIncident
 @property  double distanceToIncident
 @property  BOOL hasIsAutomaticReroute
 @property  BOOL isAutomaticReroute

  // class methods
  +[MNTrafficIncidentAlertDetails detailsForTrafficIncidentAlert:]

  // instance methods
  -[MNTrafficIncidentAlertDetails isEqual:]
  -[MNTrafficIncidentAlertDetails copyWithZone:]
  -[MNTrafficIncidentAlertDetails .cxx_destruct]
  -[MNTrafficIncidentAlertDetails dictionaryRepresentation]
  -[MNTrafficIncidentAlertDetails writeTo:]
  -[MNTrafficIncidentAlertDetails mergeFrom:]
  -[MNTrafficIncidentAlertDetails readFrom:]
  -[MNTrafficIncidentAlertDetails copyTo:]
  -[MNTrafficIncidentAlertDetails originalRoute]
  -[MNTrafficIncidentAlertDetails setOriginalRoute:]
  -[MNTrafficIncidentAlertDetails hasOriginalRoute]
  -[MNTrafficIncidentAlertDetails etaTimestamp]
  -[MNTrafficIncidentAlertDetails setEtaTimestamp:]
  -[MNTrafficIncidentAlertDetails setHasEtaTimestamp:]
  -[MNTrafficIncidentAlertDetails hasEtaTimestamp]
  -[MNTrafficIncidentAlertDetails alertType]
  -[MNTrafficIncidentAlertDetails setAlertType:]
  -[MNTrafficIncidentAlertDetails setHasAlertType:]
  -[MNTrafficIncidentAlertDetails hasAlertType]
  -[MNTrafficIncidentAlertDetails setAlertID:]
  -[MNTrafficIncidentAlertDetails setEtaResponseID:]
  -[MNTrafficIncidentAlertDetails setEtaRoute:]
  -[MNTrafficIncidentAlertDetails setOriginalRouteTrafficData:]
  -[MNTrafficIncidentAlertDetails setAlternateRoute:]
  -[MNTrafficIncidentAlertDetails setAlternateRouteTrafficData:]
  -[MNTrafficIncidentAlertDetails setStartValidCoordinateRange:]
  -[MNTrafficIncidentAlertDetails setEndValidCoordinateRange:]
  -[MNTrafficIncidentAlertDetails setIncidentCoordinate:]
  -[MNTrafficIncidentAlertDetails hasAlertID]
  -[MNTrafficIncidentAlertDetails hasEtaResponseID]
  -[MNTrafficIncidentAlertDetails hasEtaRoute]
  -[MNTrafficIncidentAlertDetails hasOriginalRouteTrafficData]
  -[MNTrafficIncidentAlertDetails hasAlternateRoute]
  -[MNTrafficIncidentAlertDetails hasAlternateRouteTrafficData]
  -[MNTrafficIncidentAlertDetails hasStartValidCoordinateRange]
  -[MNTrafficIncidentAlertDetails hasEndValidCoordinateRange]
  -[MNTrafficIncidentAlertDetails hasIncidentCoordinate]
  -[MNTrafficIncidentAlertDetails setAlertTimestamp:]
  -[MNTrafficIncidentAlertDetails setHasAlertTimestamp:]
  -[MNTrafficIncidentAlertDetails hasAlertTimestamp]
  -[MNTrafficIncidentAlertDetails setDistanceToIncident:]
  -[MNTrafficIncidentAlertDetails setHasDistanceToIncident:]
  -[MNTrafficIncidentAlertDetails hasDistanceToIncident]
  -[MNTrafficIncidentAlertDetails setIsAutomaticReroute:]
  -[MNTrafficIncidentAlertDetails setHasIsAutomaticReroute:]
  -[MNTrafficIncidentAlertDetails hasIsAutomaticReroute]
  -[MNTrafficIncidentAlertDetails alertID]
  -[MNTrafficIncidentAlertDetails etaResponseID]
  -[MNTrafficIncidentAlertDetails etaRoute]
  -[MNTrafficIncidentAlertDetails originalRouteTrafficData]
  -[MNTrafficIncidentAlertDetails alternateRoute]
  -[MNTrafficIncidentAlertDetails alternateRouteTrafficData]
  -[MNTrafficIncidentAlertDetails startValidCoordinateRange]
  -[MNTrafficIncidentAlertDetails endValidCoordinateRange]
  -[MNTrafficIncidentAlertDetails incidentCoordinate]
  -[MNTrafficIncidentAlertDetails alertTimestamp]
  -[MNTrafficIncidentAlertDetails distanceToIncident]
  -[MNTrafficIncidentAlertDetails isAutomaticReroute]


MNSimulatorAudioSession : NSObject /usr/lib/libc++.1.dylib <MNAudioSession>
 @property  MNTraceRouteSimulator *simulator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  id delegate
 @property  unsigned long voiceGuidanceLevel

  // instance methods
  -[MNSimulatorAudioSession delegate]
  -[MNSimulatorAudioSession setDelegate:]
  -[MNSimulatorAudioSession .cxx_destruct]
  -[MNSimulatorAudioSession stop]
  -[MNSimulatorAudioSession endSession]
  -[MNSimulatorAudioSession isSpeaking]
  -[MNSimulatorAudioSession beginSession]
  -[MNSimulatorAudioSession setSimulator:]
  -[MNSimulatorAudioSession setVoiceGuidanceLevel:]
  -[MNSimulatorAudioSession speak:shortPromptType:ignorePromptStyle:minimumRequiredLevel:completionBlock:]
  -[MNSimulatorAudioSession simulator]
  -[MNSimulatorAudioSession prepareToAnnounce]
  -[MNSimulatorAudioSession speak:shortPromptType:ignorePromptStyle:completionBlock:]
  -[MNSimulatorAudioSession vibrateForPrompt:]
  -[MNSimulatorAudioSession clearAllAnnouncements]
  -[MNSimulatorAudioSession voiceGuidanceLevel]
  -[MNSimulatorAudioSession initWithSimulator:]


MNNotificationManager : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNNotificationManager showPredictedRouteTrafficIncidentBulletinForCommuteDetails:]


MNNavigationServer : NSObject /usr/lib/libc++.1.dylib <NSXPCListenerDelegate, MNNavigationServiceClientInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNavigationServer sharedServer]

  // instance methods
  -[MNNavigationServer init]
  -[MNNavigationServer dealloc]
  -[MNNavigationServer .cxx_destruct]
  -[MNNavigationServer listener:shouldAcceptNewConnection:]
  -[MNNavigationServer _defaultsDidChange]
  -[MNNavigationServer _resetDetails]
  -[MNNavigationServer navigationServiceProxy:didUpdateNavigationDetails:]
  -[MNNavigationServer _enumerateRemoteObjectsWithHandler:]
  -[MNNavigationServer navigationServiceProxy:willChangeFromState:toState:]
  -[MNNavigationServer navigationServiceProxy:didChangeFromState:toState:]
  -[MNNavigationServer navigationServiceProxy:willStartNavigationWithRoute:navigationType:request:response:]
  -[MNNavigationServer navigationServiceProxyWillPauseNavigation:]
  -[MNNavigationServer navigationServiceProxyWillResumeFromPauseNavigation:]
  -[MNNavigationServer navigationServiceProxy:didFailWithError:]
  -[MNNavigationServer navigationServiceProxy:didChangeNavigationState:]
  -[MNNavigationServer navigationServiceProxy:didUpdateMatchedLocation:]
  -[MNNavigationServer navigationServiceProxy:didUpdateStepIndex:legIndex:]
  -[MNNavigationServer navigationServiceProxy:didUpdateProceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationServer navigationServiceProxy:didUpdateDistanceUntilSign:timeUntilSign:forStepIndex:]
  -[MNNavigationServer navigationServiceProxy:didUpdateDistanceUntilManeuver:timeUntilManeuver:forStepIndex:]
  -[MNNavigationServer navigationServiceProxy:willAnnounce:inSeconds:]
  -[MNNavigationServer navigationServiceProxy:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationServer navigationServiceProxy:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationServer navigationServiceProxy:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationServer navigationServiceProxyHideSecondaryStep:]
  -[MNNavigationServer navigationServiceProxyBeginGuidanceUpdate:]
  -[MNNavigationServer navigationServiceProxyEndGuidanceUpdate:]
  -[MNNavigationServer navigationServiceProxy:updateSignsWithInfo:]
  -[MNNavigationServer navigationServiceProxy:usePersistentDisplay:]
  -[MNNavigationServer navigationServiceProxy:showLaneDirections:]
  -[MNNavigationServer navigationServiceProxy:hideLaneDirectionsForId:]
  -[MNNavigationServer navigationServiceProxy:showJunctionView:]
  -[MNNavigationServer navigationServiceProxy:hideJunctionViewForId:]
  -[MNNavigationServer navigationServiceProxyDidEnterPreArrivalState:]
  -[MNNavigationServer navigationServiceProxyDidArrive:]
  -[MNNavigationServer navigationServiceProxyPredictingDidArrive:]
  -[MNNavigationServer navigationServiceProxy:didEnableGuidancePrompts:]
  -[MNNavigationServer navigationServiceProxy:newGuidanceEventFeedback:]
  -[MNNavigationServer navigationServiceProxy:updatedGuidanceEventFeedback:]
  -[MNNavigationServer navigationServiceProxy:didUpdateDisplayETA:displayRemainingMinutes:forRoute:]
  -[MNNavigationServer navigationServiceProxy:didUpdateRemainingTime:remainingDistance:]
  -[MNNavigationServer navigationServiceProxy:didUpdateETAResponseForRoute:]
  -[MNNavigationServer navigationServiceProxy:didUpdateHeading:accuracy:]
  -[MNNavigationServer navigationServiceProxy:didUpdateMotionType:confidence:]
  -[MNNavigationServer navigationServiceProxy:didUpdatePreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationServer navigationServiceProxyWillReroute:]
  -[MNNavigationServer navigationServiceProxy:didRerouteWithRoute:withLocationDetails:withAlternateRoutes:]
  -[MNNavigationServer navigationServiceProxyDidCancelReroute:]
  -[MNNavigationServer navigationServiceProxy:didUpdateRouteWithNewRideSelection:]
  -[MNNavigationServer navigationServiceProxy:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationServer navigationServiceProxy:didFailRerouteWithError:]
  -[MNNavigationServer navigationServiceProxy:didUpdateAlternateRoutes:]
  -[MNNavigationServer navigationServiceProxy:didReceiveTrafficIncidentAlert:]
  -[MNNavigationServer navigationServiceProxy:didUpdateTrafficIncidentAlert:]
  -[MNNavigationServer navigationServiceProxy:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationServer navigationServiceProxy:didUpdatePossibleCommuteDestinations:]
  -[MNNavigationServer navigationServiceProxy:didUpdateTracePlaybackDetails:]
  -[MNNavigationServer navigationServiceProxy:didActivateAudioSession:]
  -[MNNavigationServer navigationServiceProxy:didStartSpeakingPrompt:]
  -[MNNavigationServer navigationServiceProxy:didStartUsingVoiceLanguage:]
  -[MNNavigationServer navigationServiceProxy:didUpdateAudioOutputSettings:]
  -[MNNavigationServer navigationServiceProxy:didUpdateAudioOutputCurrentSetting:]
  -[MNNavigationServer navigationServiceProxy:didUpdateAudioOutputCurrentSettingForVoicePrompt:]
  -[MNNavigationServer navigationServiceProxy:didUpdateAudioOutputRouteSelection:]
  -[MNNavigationServer navigationServiceProxy:didChangeVolume:]
  -[MNNavigationServer navigationServiceProxy:triggerHaptics:]
  -[MNNavigationServer navigationServiceProxy:willRequestRealtimeUpdatesForRouteIDs:]
  -[MNNavigationServer navigationServiceProxy:didReceiveRealtimeUpdates:]
  -[MNNavigationServer _peerDidDisconnect:]


MNCommuteDestinationStartEndTimeScore : MNCommuteDestinationScore
  // class methods
  +[MNCommuteDestinationStartEndTimeScore weight]

  // instance methods
  -[MNCommuteDestinationStartEndTimeScore score]
  -[MNCommuteDestinationStartEndTimeScore updateScoreIfPossible]
  -[MNCommuteDestinationStartEndTimeScore destinationInvalid]
  -[MNCommuteDestinationStartEndTimeScore descriptionExtras]


MNCommuteDestinationMapsSuggestionsScore : MNCommuteDestinationScore
  // class methods
  +[MNCommuteDestinationMapsSuggestionsScore weight]

  // instance methods
  -[MNCommuteDestinationMapsSuggestionsScore score]
  -[MNCommuteDestinationMapsSuggestionsScore updateScoreIfPossible]
  -[MNCommuteDestinationMapsSuggestionsScore destinationInvalid]
  -[MNCommuteDestinationMapsSuggestionsScore descriptionExtras]


MNMutableSettings : MNSettings
 @property  unsigned long voiceVolume
 @property  unsigned long distanceUnits
 @property  BOOL pauseSpokenAudio
 @property  BOOL muteSpeechOverride
 @property  BOOL speechEnabled
 @property  unsigned long maxAlternateRoutesCount
 @property  BOOL drivingVoiceGuidance
 @property  BOOL walkingVoiceGuidance
 @property  BOOL beepBeforeInstruction
 @property  NSString *voiceLanguage
 @property  double etaRequestInterval
 @property  double initialRequestDelay
 @property  double backgroundTimeWindow
 @property  long long fakeTrafficIncidentAlert
 @property  double initialTraceSpeedMultiplier
 @property  BOOL shouldLoadReroutesFromTrace
 @property  BOOL shouldLoadETAUpdatesFromTrace
 @property  BOOL isTracePlaybackCameraTestMode
 @property  BOOL shouldRecordTrace
 @property  double simulationSpeed
 @property  double simulationGPSError
 @property  BOOL shouldUseGuidanceEventManager

  // class methods
  +[MNMutableSettings settingsWithSettings:]

  // instance methods
  -[MNMutableSettings setMaxAlternateRoutesCount:]
  -[MNMutableSettings setVoiceLanguage:]
  -[MNMutableSettings setVoiceVolume:]
  -[MNMutableSettings setDistanceUnits:]
  -[MNMutableSettings setPauseSpokenAudio:]
  -[MNMutableSettings setMuteSpeechOverride:]
  -[MNMutableSettings setSpeechEnabled:]
  -[MNMutableSettings setBeepBeforeInstruction:]
  -[MNMutableSettings setShouldUseGuidanceEventManager:]
  -[MNMutableSettings setDrivingVoiceGuidance:]
  -[MNMutableSettings setWalkingVoiceGuidance:]
  -[MNMutableSettings setEtaRequestInterval:]
  -[MNMutableSettings setInitialRequestDelay:]
  -[MNMutableSettings setBackgroundTimeWindow:]
  -[MNMutableSettings setFakeTrafficIncidentAlert:]
  -[MNMutableSettings setInitialTraceSpeedMultiplier:]
  -[MNMutableSettings setShouldLoadReroutesFromTrace:]
  -[MNMutableSettings setShouldLoadETAUpdatesFromTrace:]
  -[MNMutableSettings setIsTracePlaybackCameraTestMode:]
  -[MNMutableSettings setShouldRecordTrace:]
  -[MNMutableSettings setSimulationSpeed:]
  -[MNMutableSettings setSimulationGPSError:]


MNRouteRefreshPolicyFactory : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNRouteRefreshPolicyFactory policyRulesForPolicy:error:]


MNSettings : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned long voiceVolume
 @property  unsigned long distanceUnits
 @property  BOOL pauseSpokenAudio
 @property  BOOL muteSpeechOverride
 @property  BOOL speechEnabled
 @property  unsigned long maxAlternateRoutesCount
 @property  BOOL drivingVoiceGuidance
 @property  BOOL walkingVoiceGuidance
 @property  BOOL beepBeforeInstruction
 @property  NSString *voiceLanguage
 @property  double etaRequestInterval
 @property  double initialRequestDelay
 @property  double backgroundTimeWindow
 @property  long long fakeTrafficIncidentAlert
 @property  double initialTraceSpeedMultiplier
 @property  BOOL shouldLoadReroutesFromTrace
 @property  BOOL shouldLoadETAUpdatesFromTrace
 @property  BOOL isTracePlaybackCameraTestMode
 @property  BOOL shouldRecordTrace
 @property  double simulationSpeed
 @property  double simulationGPSError
 @property  BOOL shouldUseGuidanceEventManager

  // class methods
  +[MNSettings supportsSecureCoding]

  // instance methods
  -[MNSettings init]
  -[MNSettings encodeWithCoder:]
  -[MNSettings initWithCoder:]
  -[MNSettings .cxx_destruct]
  -[MNSettings shouldUseGuidanceEventManager]
  -[MNSettings maxAlternateRoutesCount]
  -[MNSettings voiceLanguage]
  -[MNSettings setVoiceLanguage:]
  -[MNSettings voiceVolume]
  -[MNSettings distanceUnits]
  -[MNSettings pauseSpokenAudio]
  -[MNSettings muteSpeechOverride]
  -[MNSettings speechEnabled]
  -[MNSettings beepBeforeInstruction]
  -[MNSettings drivingVoiceGuidance]
  -[MNSettings walkingVoiceGuidance]
  -[MNSettings etaRequestInterval]
  -[MNSettings initialRequestDelay]
  -[MNSettings backgroundTimeWindow]
  -[MNSettings fakeTrafficIncidentAlert]
  -[MNSettings initialTraceSpeedMultiplier]
  -[MNSettings shouldLoadReroutesFromTrace]
  -[MNSettings shouldLoadETAUpdatesFromTrace]
  -[MNSettings isTracePlaybackCameraTestMode]
  -[MNSettings shouldRecordTrace]
  -[MNSettings simulationSpeed]
  -[MNSettings simulationGPSError]


MNDrivingTurnByTurnLocationTracker : MNTurnByTurnLocationTracker <MNTrafficIncidentAlertUpdaterDelegate, MNTunnelLocationProjectorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNDrivingTurnByTurnLocationTracker .cxx_destruct]
  -[MNDrivingTurnByTurnLocationTracker transportType]
  -[MNDrivingTurnByTurnLocationTracker stopTracking]
  -[MNDrivingTurnByTurnLocationTracker _matchedLocationForLocation:]
  -[MNDrivingTurnByTurnLocationTracker updateManager:willSendETARequest:]
  -[MNDrivingTurnByTurnLocationTracker updateManager:didReceiveETAResponse:toRequest:]
  -[MNDrivingTurnByTurnLocationTracker wantsETAUpdates]
  -[MNDrivingTurnByTurnLocationTracker userLocationForUpdateManager:]
  -[MNDrivingTurnByTurnLocationTracker initWithNavigationSession:]
  -[MNDrivingTurnByTurnLocationTracker shouldProjectAlongRoute]
  -[MNDrivingTurnByTurnLocationTracker startTracking]
  -[MNDrivingTurnByTurnLocationTracker tracePaused]
  -[MNDrivingTurnByTurnLocationTracker _updateForArrival]
  -[MNDrivingTurnByTurnLocationTracker _contingencyRouteForLocation:]
  -[MNDrivingTurnByTurnLocationTracker didUpdateAlternateRoutes:traffic:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:receivedAlert:responseCallback:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:invalidatedAlert:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:didDismissAlert:withReroute:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:updatedAlert:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:didSwitchToNewRoute:traffic:forAlert:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdaterRemainingTimeOnRoute:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdaterTimeSinceLastAnnouncement:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdaterTimeUntilNextAnnouncement:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdaterIsCurrentlySpeaking:]
  -[MNDrivingTurnByTurnLocationTracker tunnelLocationProjector:didUpdateLocation:]
  -[MNDrivingTurnByTurnLocationTracker _newMapMatcherForRoute:]
  -[MNDrivingTurnByTurnLocationTracker _overrideLocationForLocation:]
  -[MNDrivingTurnByTurnLocationTracker _updateForLocation:]
  -[MNDrivingTurnByTurnLocationTracker _updateForReroute:rerouteReason:request:response:]
  -[MNDrivingTurnByTurnLocationTracker _detectedMotionForLocation:]
  -[MNDrivingTurnByTurnLocationTracker _allowSwitchToTransportType:forLocation:]
  -[MNDrivingTurnByTurnLocationTracker _alternateRouteForOffRouteLocation:]


MNGuidanceJunctionViewImage : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned long imageID
 @property  NSData *imageData

  // class methods
  +[MNGuidanceJunctionViewImage supportsSecureCoding]

  // instance methods
  -[MNGuidanceJunctionViewImage encodeWithCoder:]
  -[MNGuidanceJunctionViewImage initWithCoder:]
  -[MNGuidanceJunctionViewImage .cxx_destruct]
  -[MNGuidanceJunctionViewImage imageData]
  -[MNGuidanceJunctionViewImage setImageData:]
  -[MNGuidanceJunctionViewImage imageID]
  -[MNGuidanceJunctionViewImage setImageID:]


MNGuidanceJunctionViewInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSUUID *uniqueID
 @property  NSArray *images

  // class methods
  +[MNGuidanceJunctionViewInfo supportsSecureCoding]

  // instance methods
  -[MNGuidanceJunctionViewInfo encodeWithCoder:]
  -[MNGuidanceJunctionViewInfo initWithCoder:]
  -[MNGuidanceJunctionViewInfo .cxx_destruct]
  -[MNGuidanceJunctionViewInfo uniqueID]
  -[MNGuidanceJunctionViewInfo images]
  -[MNGuidanceJunctionViewInfo initWithID:images:]


MNGuidanceEventFeedback : PBCodable /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices <NSCopying>
 @property  NSUUID *uniqueID
 @property  BOOL hasUniqueIDstring
 @property  NSString *uniqueIDstring
 @property  BOOL hasRouteID
 @property  NSData *routeID
 @property  BOOL hasStepID
 @property  unsigned int stepID
 @property  BOOL hasEnrouteNoticeIndex
 @property  unsigned int enrouteNoticeIndex
 @property  BOOL hasEventIndex
 @property  unsigned int eventIndex
 @property  BOOL hasType
 @property  int type
 @property  BOOL hasStartTime
 @property  double startTime
 @property  BOOL hasStartDistance
 @property  double startDistance
 @property  BOOL hasVehicleSpeed
 @property  double vehicleSpeed
 @property  BOOL hasTrafficColor
 @property  unsigned int trafficColor
 @property  BOOL hasSelectedPrimaryStringIndex
 @property  unsigned int selectedPrimaryStringIndex
 @property  BOOL hasSelectedSecondaryStringIndex
 @property  unsigned int selectedSecondaryStringIndex
 @property  BOOL hasShortPrompt
 @property  BOOL shortPrompt
 @property  BOOL hasEndTime
 @property  double endTime
 @property  BOOL hasEndDistance
 @property  double endDistance
 @property  BOOL hasManeuverTime
 @property  double maneuverTime
 @property  NSMutableArray *junctionViewImageIDs
 @property  BOOL hasEventDescription
 @property  NSString *eventDescription

  // class methods
  +[MNGuidanceEventFeedback junctionViewImageIDType]

  // instance methods
  -[MNGuidanceEventFeedback isEqual:]
  -[MNGuidanceEventFeedback copyWithZone:]
  -[MNGuidanceEventFeedback type]
  -[MNGuidanceEventFeedback setType:]
  -[MNGuidanceEventFeedback .cxx_destruct]
  -[MNGuidanceEventFeedback dictionaryRepresentation]
  -[MNGuidanceEventFeedback uniqueID]
  -[MNGuidanceEventFeedback writeTo:]
  -[MNGuidanceEventFeedback initWithEvent:]
  -[MNGuidanceEventFeedback mergeFrom:]
  -[MNGuidanceEventFeedback readFrom:]
  -[MNGuidanceEventFeedback copyTo:]
  -[MNGuidanceEventFeedback typeAsString:]
  -[MNGuidanceEventFeedback StringAsType:]
  -[MNGuidanceEventFeedback startTime]
  -[MNGuidanceEventFeedback endTime]
  -[MNGuidanceEventFeedback setEndTime:]
  -[MNGuidanceEventFeedback setStartTime:]
  -[MNGuidanceEventFeedback setHasType:]
  -[MNGuidanceEventFeedback hasType]
  -[MNGuidanceEventFeedback routeID]
  -[MNGuidanceEventFeedback setRouteID:]
  -[MNGuidanceEventFeedback hasRouteID]
  -[MNGuidanceEventFeedback setStepID:]
  -[MNGuidanceEventFeedback hasStartTime]
  -[MNGuidanceEventFeedback stepID]
  -[MNGuidanceEventFeedback setHasStepID:]
  -[MNGuidanceEventFeedback hasStepID]
  -[MNGuidanceEventFeedback enrouteNoticeIndex]
  -[MNGuidanceEventFeedback shortPrompt]
  -[MNGuidanceEventFeedback setShortPrompt:]
  -[MNGuidanceEventFeedback setHasShortPrompt:]
  -[MNGuidanceEventFeedback hasShortPrompt]
  -[MNGuidanceEventFeedback setHasStartTime:]
  -[MNGuidanceEventFeedback setEnrouteNoticeIndex:]
  -[MNGuidanceEventFeedback setHasEnrouteNoticeIndex:]
  -[MNGuidanceEventFeedback hasEnrouteNoticeIndex]
  -[MNGuidanceEventFeedback eventIndex]
  -[MNGuidanceEventFeedback setEventIndex:]
  -[MNGuidanceEventFeedback setHasEventIndex:]
  -[MNGuidanceEventFeedback hasEventIndex]
  -[MNGuidanceEventFeedback vehicleSpeed]
  -[MNGuidanceEventFeedback setVehicleSpeed:]
  -[MNGuidanceEventFeedback setHasVehicleSpeed:]
  -[MNGuidanceEventFeedback hasVehicleSpeed]
  -[MNGuidanceEventFeedback setHasEndTime:]
  -[MNGuidanceEventFeedback hasEndTime]
  -[MNGuidanceEventFeedback startDistance]
  -[MNGuidanceEventFeedback setStartDistance:]
  -[MNGuidanceEventFeedback eventDescription]
  -[MNGuidanceEventFeedback setEventDescription:]
  -[MNGuidanceEventFeedback addJunctionViewImageID:]
  -[MNGuidanceEventFeedback setUniqueIDstring:]
  -[MNGuidanceEventFeedback junctionViewImageIDsCount]
  -[MNGuidanceEventFeedback clearJunctionViewImageIDs]
  -[MNGuidanceEventFeedback junctionViewImageIDAtIndex:]
  -[MNGuidanceEventFeedback hasUniqueIDstring]
  -[MNGuidanceEventFeedback setHasStartDistance:]
  -[MNGuidanceEventFeedback hasStartDistance]
  -[MNGuidanceEventFeedback setTrafficColor:]
  -[MNGuidanceEventFeedback setHasTrafficColor:]
  -[MNGuidanceEventFeedback hasTrafficColor]
  -[MNGuidanceEventFeedback setSelectedPrimaryStringIndex:]
  -[MNGuidanceEventFeedback setHasSelectedPrimaryStringIndex:]
  -[MNGuidanceEventFeedback hasSelectedPrimaryStringIndex]
  -[MNGuidanceEventFeedback setSelectedSecondaryStringIndex:]
  -[MNGuidanceEventFeedback setHasSelectedSecondaryStringIndex:]
  -[MNGuidanceEventFeedback hasSelectedSecondaryStringIndex]
  -[MNGuidanceEventFeedback setEndDistance:]
  -[MNGuidanceEventFeedback setHasEndDistance:]
  -[MNGuidanceEventFeedback hasEndDistance]
  -[MNGuidanceEventFeedback setManeuverTime:]
  -[MNGuidanceEventFeedback setHasManeuverTime:]
  -[MNGuidanceEventFeedback hasManeuverTime]
  -[MNGuidanceEventFeedback hasEventDescription]
  -[MNGuidanceEventFeedback uniqueIDstring]
  -[MNGuidanceEventFeedback trafficColor]
  -[MNGuidanceEventFeedback selectedPrimaryStringIndex]
  -[MNGuidanceEventFeedback selectedSecondaryStringIndex]
  -[MNGuidanceEventFeedback endDistance]
  -[MNGuidanceEventFeedback maneuverTime]
  -[MNGuidanceEventFeedback junctionViewImageIDs]
  -[MNGuidanceEventFeedback setJunctionViewImageIDs:]


_MNDistanceFormatOptions : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long minimumFractionDigits
 @property  unsigned long maximumFractionDigits
 @property  BOOL metric
 @property  BOOL yards
 @property  BOOL abbreviateUnits
 @property  BOOL spoken
 @property  long long rounding

  // instance methods
  -[_MNDistanceFormatOptions yards]
  -[_MNDistanceFormatOptions minimumFractionDigits]
  -[_MNDistanceFormatOptions setMinimumFractionDigits:]
  -[_MNDistanceFormatOptions maximumFractionDigits]
  -[_MNDistanceFormatOptions setMaximumFractionDigits:]
  -[_MNDistanceFormatOptions metric]
  -[_MNDistanceFormatOptions setMetric:]
  -[_MNDistanceFormatOptions setYards:]
  -[_MNDistanceFormatOptions abbreviateUnits]
  -[_MNDistanceFormatOptions setAbbreviateUnits:]
  -[_MNDistanceFormatOptions spoken]
  -[_MNDistanceFormatOptions setSpoken:]
  -[_MNDistanceFormatOptions rounding]
  -[_MNDistanceFormatOptions setRounding:]


_TempTokenTimestampValue : NSObject /usr/lib/libc++.1.dylib <GEOServerFormatTokenTimeStampValue>
 @property  double timeStamp
 @property  NSTimeZone *timeZone
 @property  NSString *formatPattern
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_TempTokenTimestampValue encodeWithCoder:]
  -[_TempTokenTimestampValue initWithCoder:]
  -[_TempTokenTimestampValue setTimeZone:]
  -[_TempTokenTimestampValue .cxx_destruct]
  -[_TempTokenTimestampValue timeZone]
  -[_TempTokenTimestampValue timeStamp]
  -[_TempTokenTimestampValue setTimeStamp:]
  -[_TempTokenTimestampValue formatPattern]
  -[_TempTokenTimestampValue setFormatPattern:]


_TempToken : NSObject /usr/lib/libc++.1.dylib <GEOServerFormatToken>
 @property  long long type
 @property  NSString *token
 @property  unsigned int value1
 @property  unsigned int value2
 @property  NSString *stringValue
 @property  <GEOServerFormatTokenPriceValue> *priceValue
 @property  <GEOTransitArtworkDataSource> *artworkValue
 @property  NSArray *timeStampValues
 @property  <GEOServerFormatTokenCountdownValue> *countdownValue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *value3s

  // instance methods
  -[_TempToken token]
  -[_TempToken type]
  -[_TempToken setType:]
  -[_TempToken encodeWithCoder:]
  -[_TempToken initWithCoder:]
  -[_TempToken stringValue]
  -[_TempToken .cxx_destruct]
  -[_TempToken setStringValue:]
  -[_TempToken initWithToken:]
  -[_TempToken setToken:]
  -[_TempToken value1]
  -[_TempToken value2]
  -[_TempToken value3s]
  -[_TempToken priceValue]
  -[_TempToken artworkValue]
  -[_TempToken timeStampValues]
  -[_TempToken countdownValue]
  -[_TempToken setValue2:]
  -[_TempToken setValue1:]
  -[_TempToken setPriceValue:]
  -[_TempToken setArtworkValue:]
  -[_TempToken setTimeStampValues:]
  -[_TempToken setCountdownValue:]


_TimeStampValue : NSObject /usr/lib/libc++.1.dylib <GEOServerFormatTokenTimeStampValue>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double timeStamp
 @property  NSTimeZone *timeZone
 @property  NSString *formatPattern

  // instance methods
  -[_TimeStampValue encodeWithCoder:]
  -[_TimeStampValue initWithCoder:]
  -[_TimeStampValue .cxx_destruct]
  -[_TimeStampValue timeZone]
  -[_TimeStampValue timeStamp]
  -[_TimeStampValue formatPattern]
  -[_TimeStampValue initWithTimeStamp:timeZone:formatPattern:]


MNTimeballMockLocationProvider : NSObject /usr/lib/libc++.1.dylib <MNTimeballLocationProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double desiredAccuracy
 @property  CLLocation *location
 @property  <CLLocationManagerDelegate> *delegate

  // instance methods
  -[MNTimeballMockLocationProvider delegate]
  -[MNTimeballMockLocationProvider setDelegate:]
  -[MNTimeballMockLocationProvider .cxx_destruct]
  -[MNTimeballMockLocationProvider location]
  -[MNTimeballMockLocationProvider startUpdatingLocation]
  -[MNTimeballMockLocationProvider stopUpdatingLocation]
  -[MNTimeballMockLocationProvider desiredAccuracy]
  -[MNTimeballMockLocationProvider setDesiredAccuracy:]
  -[MNTimeballMockLocationProvider initWithEffectiveBundleIdentifier:delegate:onQueue:]
  -[MNTimeballMockLocationProvider initWithEffectiveBundle:delegate:onQueue:]
  -[MNTimeballMockLocationProvider initWithDelegate:queue:]
  -[MNTimeballMockLocationProvider _setupTimer]
  -[MNTimeballMockLocationProvider _processNextObject]
  -[MNTimeballMockLocationProvider _deliverNextObject]
  -[MNTimeballMockLocationProvider deliverLocation:afterDelay:]
  -[MNTimeballMockLocationProvider deliverError:afterDelay:]
  -[MNTimeballMockLocationProvider clearLocationsAndErrors]


MNArrivalRegionTimer : NSObject /usr/lib/libc++.1.dylib
 @property  <MNArrivalRegionTimerDelegate> *delegate

  // instance methods
  -[MNArrivalRegionTimer init]
  -[MNArrivalRegionTimer dealloc]
  -[MNArrivalRegionTimer delegate]
  -[MNArrivalRegionTimer setDelegate:]
  -[MNArrivalRegionTimer .cxx_destruct]
  -[MNArrivalRegionTimer updateForLocation:]
  -[MNArrivalRegionTimer initWithArrivalRegion:]


MNStartNavigationDetails : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL isReconnecting
 @property  int navigationType
 @property  BOOL fullGuidance
 @property  GEORouteAttributes *routeAttributes
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  NSArray *routes
 @property  NSDictionary *traffic
 @property  unsigned long selectedRouteIndex
 @property  NSString *requestingAppIdentifier
 @property  NSString *tracePlaybackPath
 @property  MNTraceRecordingData *traceRecordingData
 @property  BOOL shouldSimulateLocations
 @property  NSString *traceRecordingNameOverride
 @property  BOOL copyTraceToCrashReporter
 @property  NSString *fullDescription

  // class methods
  +[MNStartNavigationDetails supportsSecureCoding]

  // instance methods
  -[MNStartNavigationDetails init]
  -[MNStartNavigationDetails encodeWithCoder:]
  -[MNStartNavigationDetails initWithCoder:]
  -[MNStartNavigationDetails .cxx_destruct]
  -[MNStartNavigationDetails fullDescription]
  -[MNStartNavigationDetails routeAttributes]
  -[MNStartNavigationDetails setRouteAttributes:]
  -[MNStartNavigationDetails routes]
  -[MNStartNavigationDetails setRoutes:]
  -[MNStartNavigationDetails selectedRouteIndex]
  -[MNStartNavigationDetails setSelectedRouteIndex:]
  -[MNStartNavigationDetails directionsResponse]
  -[MNStartNavigationDetails setDirectionsResponse:]
  -[MNStartNavigationDetails directionsRequest]
  -[MNStartNavigationDetails requestingAppIdentifier]
  -[MNStartNavigationDetails setRequestingAppIdentifier:]
  -[MNStartNavigationDetails navigationType]
  -[MNStartNavigationDetails traffic]
  -[MNStartNavigationDetails setNavigationType:]
  -[MNStartNavigationDetails setDirectionsRequest:]
  -[MNStartNavigationDetails fullGuidance]
  -[MNStartNavigationDetails setFullGuidance:]
  -[MNStartNavigationDetails setTraffic:]
  -[MNStartNavigationDetails tracePlaybackPath]
  -[MNStartNavigationDetails setTracePlaybackPath:]
  -[MNStartNavigationDetails traceRecordingData]
  -[MNStartNavigationDetails setTraceRecordingData:]
  -[MNStartNavigationDetails shouldSimulateLocations]
  -[MNStartNavigationDetails setShouldSimulateLocations:]
  -[MNStartNavigationDetails traceRecordingNameOverride]
  -[MNStartNavigationDetails setTraceRecordingNameOverride:]
  -[MNStartNavigationDetails copyTraceToCrashReporter]
  -[MNStartNavigationDetails setCopyTraceToCrashReporter:]
  -[MNStartNavigationDetails isReconnecting]
  -[MNStartNavigationDetails setIsReconnecting:]


MNNavigationServiceLocalProxy : NSObject /usr/lib/libc++.1.dylib <MNNavigationStateObserver, MNNavigationSessionManagerDelegate, MNNavigationServiceProxy>
 @property  <MNNavigationServiceClientInterface> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationServiceLocalProxy init]
  -[MNNavigationServiceLocalProxy dealloc]
  -[MNNavigationServiceLocalProxy delegate]
  -[MNNavigationServiceLocalProxy setDelegate:]
  -[MNNavigationServiceLocalProxy .cxx_destruct]
  -[MNNavigationServiceLocalProxy start]
  -[MNNavigationServiceLocalProxy reset]
  -[MNNavigationServiceLocalProxy setHeadingOrientation:]
  -[MNNavigationServiceLocalProxy setGuidancePromptsEnabled:]
  -[MNNavigationServiceLocalProxy setDisplayedStepIndex:]
  -[MNNavigationServiceLocalProxy setIsConnectedToCarplay:]
  -[MNNavigationServiceLocalProxy stopNavigation]
  -[MNNavigationServiceLocalProxy setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationServiceLocalProxy startNavigationWithDetails:activeBlock:]
  -[MNNavigationServiceLocalProxy startPredictingDestinationsWithHandler:]
  -[MNNavigationServiceLocalProxy stopPredictingDestinations]
  -[MNNavigationServiceLocalProxy updateDestination:]
  -[MNNavigationServiceLocalProxy resumeOriginalDestination]
  -[MNNavigationServiceLocalProxy switchToRoute:]
  -[MNNavigationServiceLocalProxy setFullGuidanceMode:]
  -[MNNavigationServiceLocalProxy changeSettings:]
  -[MNNavigationServiceLocalProxy repeatCurrentGuidanceWithReply:]
  -[MNNavigationServiceLocalProxy repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationServiceLocalProxy vibrateForPrompt:withReply:]
  -[MNNavigationServiceLocalProxy stopCurrentGuidancePrompt]
  -[MNNavigationServiceLocalProxy setHFPPreference:forSetting:]
  -[MNNavigationServiceLocalProxy setCurrentAudioOutputSetting:]
  -[MNNavigationServiceLocalProxy setRideIndex:forLegIndex:]
  -[MNNavigationServiceLocalProxy setJunctionViewImageWidth:height:]
  -[MNNavigationServiceLocalProxy acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy setTraceIsPlaying:]
  -[MNNavigationServiceLocalProxy setTracePlaybackSpeed:]
  -[MNNavigationServiceLocalProxy setTracePosition:]
  -[MNNavigationServiceLocalProxy recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationServiceLocalProxy recordPedestrianTracePath:]
  -[MNNavigationServiceLocalProxy interfaceHashesWithHandler:]
  -[MNNavigationServiceLocalProxy updateGuidanceWithData:reply:]
  -[MNNavigationServiceLocalProxy pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceLocalProxy resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceLocalProxy checkinForNavigationService:]
  -[MNNavigationServiceLocalProxy _serviceStateForStateType:]
  -[MNNavigationServiceLocalProxy stateManager:willChangeFromState:toState:]
  -[MNNavigationServiceLocalProxy stateManager:didChangeFromState:toState:]
  -[MNNavigationServiceLocalProxy stateManager:didUpdatePossibleDestinations:]
  -[MNNavigationServiceLocalProxy stateManagerPredictingDidArrive:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:willStartNavigationWithRoute:navigationType:request:response:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didFailWithError:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didChangeNavigationState:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateLocation:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateStepIndex:legIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerDidEnterPreArrivalState:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerDidArrive:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerDidTimeoutInArrivalRegion:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerWillPause:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerWillResumeFromPause:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateDisplayETA:displayRemainingMinutes:forRoute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateRemainingTime:remainingDistance:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateETAResponseForRoute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateHeading:accuracy:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateMotionType:confidence:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdatePreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerWillReroute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didRerouteWithRoute:locationDetails:withAlternateRoutes:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerDidCancelReroute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateRouteWithNewRideSelection:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didFailRerouteWithError:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateAlternateRoutes:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:proceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:currentStepIndex:didUpdateDistanceUntilSign:timeUntilSign:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:willAnnounce:inSeconds:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerHideSecondaryStep:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerBeginGuidanceUpdate:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerEndGuidanceUpdate:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:updateSignsWithInfo:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:usePersistentDisplay:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:showLaneDirections:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:hideLaneDirectionsForId:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:showJunctionView:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:hideJunctionViewForId:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didEnableGuidancePrompts:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:newGuidanceEventFeedback:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:updatedGuidanceEventFeedback:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didReceiveTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didStartSpeakingPrompt:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateAudioSettings:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateCurrentAudioSetting:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateCurrentAudioSettingForVoicePrompt:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateAudioRouteSelection:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didStartUsingVoiceLanguage:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didChangeVolume:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:triggerHaptics:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateTracePlaybackDetails:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:willSendTransitUpdateRequestForRouteIDs:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didReceiveTransitUpdates:]


MNRouteRefreshPolicyRulesDefault : NSObject /usr/lib/libc++.1.dylib <MNRouteRefreshPolicyRules>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long policy
 @property  BOOL canWakeClientForUpdates
 @property  BOOL canWakeDeviceForUpdates

  // instance methods
  -[MNRouteRefreshPolicyRulesDefault init]
  -[MNRouteRefreshPolicyRulesDefault policy]
  -[MNRouteRefreshPolicyRulesDefault canMakeNetworkRequestsForDestination:atDate:]
  -[MNRouteRefreshPolicyRulesDefault timeIntervalForDestinationRefresh:lastUpdate:]
  -[MNRouteRefreshPolicyRulesDefault maxTimeIntervalFromNowForDestinationRefresh:fromDate:]
  -[MNRouteRefreshPolicyRulesDefault canWakeClientForUpdates]
  -[MNRouteRefreshPolicyRulesDefault canWakeDeviceForUpdates]


MNAudioFrameworkSymbols : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNAudioFrameworkSymbols preheatAudioFramework]


MNAudioOutputSetting : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL selectedForSystem
 @property  BOOL hfpPreference

  // class methods
  +[MNAudioOutputSetting supportsSecureCoding]
  +[MNAudioOutputSetting macAddressForRoute:]
  +[MNAudioOutputSetting isBluetoothRoute:]

  // instance methods
  -[MNAudioOutputSetting encodeWithCoder:]
  -[MNAudioOutputSetting initWithCoder:]
  -[MNAudioOutputSetting .cxx_destruct]
  -[MNAudioOutputSetting macAddress]
  -[MNAudioOutputSetting setSelected:]
  -[MNAudioOutputSetting routeUID]
  -[MNAudioOutputSetting isPicked]
  -[MNAudioOutputSetting setPicked:]
  -[MNAudioOutputSetting initWithPickableRoutes:]
  -[MNAudioOutputSetting pickableRouteForHFPPreference:]
  -[MNAudioOutputSetting settingForBluetoothDevice]
  -[MNAudioOutputSetting _isHFPRoute:]
  -[MNAudioOutputSetting selectedForRouteSelection:]
  -[MNAudioOutputSetting settingForBluetoothComboDevice]
  -[MNAudioOutputSetting settingSupportsBluetoothHFP]
  -[MNAudioOutputSetting hfpPreference]
  -[MNAudioOutputSetting _isPicked:]
  -[MNAudioOutputSetting _pickRoute:]
  -[MNAudioOutputSetting setHfpPreference:]
  -[MNAudioOutputSetting setSelected:shouldSetHFPPreference:]
  -[MNAudioOutputSetting initWithPickableRoute:]
  -[MNAudioOutputSetting containsPickableRoute:]
  -[MNAudioOutputSetting isEqualToSetting:]
  -[MNAudioOutputSetting settingForDefaultRoute]
  -[MNAudioOutputSetting allowHFPPreferenceSelectionForRouteSelection:]
  -[MNAudioOutputSetting pickedStateConsistentWithHFPPreference]
  -[MNAudioOutputSetting selectedForSystem]
  -[MNAudioOutputSetting setSelectedForSystem:]


MNAudioOutputSettingsManager : NSObject /usr/lib/libc++.1.dylib
 @property  MNAudioOutputSetting *currentSetting
 @property  MNAudioOutputSetting *currentSettingForVoicePrompt
 @property  NSArray *audioSettings
 @property  unsigned long routeSelection

  // class methods
  +[MNAudioOutputSettingsManager sharedInstance]

  // instance methods
  -[MNAudioOutputSettingsManager init]
  -[MNAudioOutputSettingsManager dealloc]
  -[MNAudioOutputSettingsManager .cxx_destruct]
  -[MNAudioOutputSettingsManager addObserver:]
  -[MNAudioOutputSettingsManager removeObserver:]
  -[MNAudioOutputSettingsManager _registerForNotifications]
  -[MNAudioOutputSettingsManager _unregisterForNotifications]
  -[MNAudioOutputSettingsManager audioSettings]
  -[MNAudioOutputSettingsManager setHFPPreference:forSetting:]
  -[MNAudioOutputSettingsManager updatePickableRoutes]
  -[MNAudioOutputSettingsManager _pickableRoutesChanged]
  -[MNAudioOutputSettingsManager _mediaServerConnectionDied]
  -[MNAudioOutputSettingsManager updateRouteSelectionObservers]
  -[MNAudioOutputSettingsManager _pickCurrentSetting]
  -[MNAudioOutputSettingsManager updateCurrentSettingObservers]
  -[MNAudioOutputSettingsManager updatedCurrentSettingForVoicePromptObservers]
  -[MNAudioOutputSettingsManager updateRouteSelection]
  -[MNAudioOutputSettingsManager reloadSettings]
  -[MNAudioOutputSettingsManager updateSettingsObservers]
  -[MNAudioOutputSettingsManager updatePickableRoutesWithHandler:]
  -[MNAudioOutputSettingsManager currentSetting]
  -[MNAudioOutputSettingsManager currentSettingForVoicePrompt]
  -[MNAudioOutputSettingsManager routeSelection]
  -[MNAudioOutputSettingsManager setCurrentSetting:]


MNCommuteLocationTracker : MNLocationTracker <GEOETAUpdaterDelegate>
 @property  BOOL routingInProgress
 @property  MNCommuteDestinationSuggestion *suggestion
 @property  GEOComposedWaypoint *destination
 @property  GEOComposedRoute *route
 @property  unsigned long destinationID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCommuteLocationTracker dealloc]
  -[MNCommuteLocationTracker .cxx_destruct]
  -[MNCommuteLocationTracker destination]
  -[MNCommuteLocationTracker transportType]
  -[MNCommuteLocationTracker _routeAttributes]
  -[MNCommuteLocationTracker route]
  -[MNCommuteLocationTracker etaUpdaterRoutesForETATrafficUpdateRequest:]
  -[MNCommuteLocationTracker etaUpdater:willSendETATrafficUpdateRequest:]
  -[MNCommuteLocationTracker etaUpdater:receivedETATrafficUpdateResponse:]
  -[MNCommuteLocationTracker etaUpdater:receivedError:]
  -[MNCommuteLocationTracker etaUpdaterUpdatedETA:]
  -[MNCommuteLocationTracker etaUpdaterReceivedInvalidRoute:newRoute:incidentsOnRoute:incidentsOffRoute:]
  -[MNCommuteLocationTracker suggestion]
  -[MNCommuteLocationTracker destinationID]
  -[MNCommuteLocationTracker setDestinationID:]
  -[MNCommuteLocationTracker updateETA]
  -[MNCommuteLocationTracker stopTracking]
  -[MNCommuteLocationTracker updateLocation:]
  -[MNCommuteLocationTracker _matchedLocationForLocation:]
  -[MNCommuteLocationTracker startTracking]
  -[MNCommuteLocationTracker _setAuditToken:]
  -[MNCommuteLocationTracker routingInProgress]
  -[MNCommuteLocationTracker setRoutingInProgress:]
  -[MNCommuteLocationTracker _handleWaypoint:fromLocation:error:]
  -[MNCommuteLocationTracker _requestRouteFromWaypoint:location:]
  -[MNCommuteLocationTracker _directionsRequestFeedback]
  -[MNCommuteLocationTracker _handleDirectionsResponse:error:forRequest:]
  -[MNCommuteLocationTracker _requestRouteFromLocation:]
  -[MNCommuteLocationTracker _checkArrivalForLocation:route:destination:]
  -[MNCommuteLocationTracker _matchedLocationForMatchResult:originalLocation:]
  -[MNCommuteLocationTracker initWithSuggestion:traceManager:]


MNAnnouncementPlanEvent : NSObject /usr/lib/libc++.1.dylib
 @property  MNGuidanceEventManager *manager
 @property  GEOComposedGuidanceEvent *event
 @property  double distance
 @property  double speed
 @property  NSMutableArray *announcementDurations
 @property  BOOL includeInPlan
 @property  unsigned long variantIndex
 @property  double triggerDistance
 @property  double completionDistance

  // instance methods
  -[MNAnnouncementPlanEvent .cxx_destruct]
  -[MNAnnouncementPlanEvent manager]
  -[MNAnnouncementPlanEvent event]
  -[MNAnnouncementPlanEvent setEvent:]
  -[MNAnnouncementPlanEvent speed]
  -[MNAnnouncementPlanEvent setSpeed:]
  -[MNAnnouncementPlanEvent setManager:]
  -[MNAnnouncementPlanEvent setDistance:]
  -[MNAnnouncementPlanEvent distance]
  -[MNAnnouncementPlanEvent variantIndex]
  -[MNAnnouncementPlanEvent setVariantIndex:]
  -[MNAnnouncementPlanEvent initWithEvent:distance:speed:manager:]
  -[MNAnnouncementPlanEvent includeInPlan]
  -[MNAnnouncementPlanEvent completionDistance]
  -[MNAnnouncementPlanEvent triggerDistance]
  -[MNAnnouncementPlanEvent setTriggerDistance:]
  -[MNAnnouncementPlanEvent setIncludeInPlan:]
  -[MNAnnouncementPlanEvent announcementDurations]
  -[MNAnnouncementPlanEvent setAnnouncementDurations:]


MNTimeballServiceLocalProxy : NSObject /usr/lib/libc++.1.dylib <MNTimeballServiceProxyInterface, MNTimeballInternalProvider, MNTimeballInternalObserver>
 @property  MNTimeballServicePeer *peer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNTimeballServiceProxyDelegate> *delegate

  // instance methods
  -[MNTimeballServiceLocalProxy dealloc]
  -[MNTimeballServiceLocalProxy delegate]
  -[MNTimeballServiceLocalProxy setDelegate:]
  -[MNTimeballServiceLocalProxy .cxx_destruct]
  -[MNTimeballServiceLocalProxy _delegate]
  -[MNTimeballServiceLocalProxy addObserver:]
  -[MNTimeballServiceLocalProxy removeObserver:]
  -[MNTimeballServiceLocalProxy peer]
  -[MNTimeballServiceLocalProxy provider:didReceiveError:forDestination:]
  -[MNTimeballServiceLocalProxy provider:didReceiveUpdate:forDestination:]
  -[MNTimeballServiceLocalProxy _requestHighMemoryThreshold:]
  -[MNTimeballServiceLocalProxy _removeHighMemoryThreshold]
  -[MNTimeballServiceLocalProxy _invokeDelegateHandlerWithID:forDestination:update:error:]
  -[MNTimeballServiceLocalProxy _receivedNetworkUpdate:forDestination:]
  -[MNTimeballServiceLocalProxy _receivedNetworkError:forDestination:]
  -[MNTimeballServiceLocalProxy _completedUpdateForDelegateHandlerID:]
  -[MNTimeballServiceLocalProxy _handleResult:forDestination:error:fromNetwork:requestingClientID:handlerID:completed:]
  -[MNTimeballServiceLocalProxy _enqueOperation:]
  -[MNTimeballServiceLocalProxy _requestOptions:forDestinations:fromLocation:freshness:handlerID:]
  -[MNTimeballServiceLocalProxy requestRoutingOptions:forDestinations:freshness:handlerID:]
  -[MNTimeballServiceLocalProxy subscribeToDestination:options:refreshPolicy:]
  -[MNTimeballServiceLocalProxy unsubscribeFromDestination:]
  -[MNTimeballServiceLocalProxy subscribeToAllDestinations]
  -[MNTimeballServiceLocalProxy unsubscribeFromAllDestinations]
  -[MNTimeballServiceLocalProxy initWithPeer:targetQueue:cache:locationManager:routingProvider:scheduler:]


MNCommuteDestinationNavigabilityScore : MNCommuteDestinationScore <MNCommuteDestinationObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNCommuteDestinationNavigabilityScore weight]

  // instance methods
  -[MNCommuteDestinationNavigabilityScore initWithDestination:]
  -[MNCommuteDestinationNavigabilityScore updateScoreIfPossible]
  -[MNCommuteDestinationNavigabilityScore destinationInvalid]
  -[MNCommuteDestinationNavigabilityScore descriptionExtras]
  -[MNCommuteDestinationNavigabilityScore _checkDestinationRoute:]
  -[MNCommuteDestinationNavigabilityScore commuteDestination:didChangeRoute:]


GeodesicDistancePoint : NSObject /usr/lib/libc++.1.dylib
 @property  NSDate *date
 @property  double geodesicDistance
 @property  double timeIntervalSinceReferenceDate

  // instance methods
  -[GeodesicDistancePoint timeIntervalSinceReferenceDate]
  -[GeodesicDistancePoint .cxx_destruct]
  -[GeodesicDistancePoint date]
  -[GeodesicDistancePoint setDate:]
  -[GeodesicDistancePoint geodesicDistance]
  -[GeodesicDistancePoint initWithDate:geodesicDistance:]
  -[GeodesicDistancePoint setGeodesicDistance:]


MNCommuteDestinationGeodesicDistanceScore : MNCommuteDestinationScore <MNCommuteDestinationLocationScore>
 @property  NSMutableArray *geodesicDistances
 @property  double slope

  // class methods
  +[MNCommuteDestinationGeodesicDistanceScore weight]

  // instance methods
  -[MNCommuteDestinationGeodesicDistanceScore .cxx_destruct]
  -[MNCommuteDestinationGeodesicDistanceScore score]
  -[MNCommuteDestinationGeodesicDistanceScore updateForLocation:]
  -[MNCommuteDestinationGeodesicDistanceScore initWithDestination:]
  -[MNCommuteDestinationGeodesicDistanceScore slope]
  -[MNCommuteDestinationGeodesicDistanceScore setSlope:]
  -[MNCommuteDestinationGeodesicDistanceScore updateScoreIfPossible]
  -[MNCommuteDestinationGeodesicDistanceScore destinationInvalid]
  -[MNCommuteDestinationGeodesicDistanceScore descriptionExtras]
  -[MNCommuteDestinationGeodesicDistanceScore _updateScoreAndDestinationInvalid]
  -[MNCommuteDestinationGeodesicDistanceScore geodesicDistances]
  -[MNCommuteDestinationGeodesicDistanceScore setGeodesicDistances:]


MNTimeballService : NSObject /usr/lib/libc++.1.dylib <MNTimeballServiceProxyDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTimeballService dealloc]
  -[MNTimeballService .cxx_destruct]
  -[MNTimeballService initWithClientID:]
  -[MNTimeballService invokeHandlerWithID:forDestination:update:error:]
  -[MNTimeballService completedUpdateForHandlerID:]
  -[MNTimeballService didReceiveError:forDestination:]
  -[MNTimeballService didReceiveUpdate:forDestination:]
  -[MNTimeballService requestRoutingOptions:forDestinations:freshness:callbackBlock:]
  -[MNTimeballService _addHandler:]
  -[MNTimeballService removeSubscriber:forDestination:]
  -[MNTimeballService _handlerForID:]
  -[MNTimeballService _removeHandlerWithID:]
  -[MNTimeballService requestRoutingOptions:forDestination:freshness:completionHandler:]
  -[MNTimeballService addSubscriber:forDestination:options:refreshPolicy:]
  -[MNTimeballService removeSubscriberForAllDestinations:]
  -[MNTimeballService startLeechingDestinationUpdates:]
  -[MNTimeballService stopLeechingDestinationUpdates:]


MNTimeballRoutingProvider : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNTimeballRoutingProvider .cxx_destruct]
  -[MNTimeballRoutingProvider initWithCache:]
  -[MNTimeballRoutingProvider requestRoutingOptions:forDestinations:freshness:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballRoutingProvider _gotoNetworkForOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballRoutingProvider _checkCacheForOptions:forDestinations:freshness:fromOrigin:callbackBlock:callbackQueue:completionBlock:]
  -[MNTimeballRoutingProvider setNetworkRequester:]


MNTracePlaybackDetails : PBCodable /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices <NSCopying>
 @property  BOOL hasEventType
 @property  int eventType
 @property  BOOL hasTracePath
 @property  NSString *tracePath
 @property  BOOL hasTraceDuration
 @property  double traceDuration
 @property  BOOL hasCurrentPosition
 @property  double currentPosition
 @property  NSMutableArray *bookmarks
 @property  BOOL hasRecordedBookmarkID
 @property  unsigned int recordedBookmarkID
 @property  BOOL hasPedestrianTracePath
 @property  NSString *pedestrianTracePath
 @property  BOOL hasPedestrianTraceStartRelativeTimestamp
 @property  double pedestrianTraceStartRelativeTimestamp

  // class methods
  +[MNTracePlaybackDetails bookmarkType]

  // instance methods
  -[MNTracePlaybackDetails isEqual:]
  -[MNTracePlaybackDetails copyWithZone:]
  -[MNTracePlaybackDetails .cxx_destruct]
  -[MNTracePlaybackDetails dictionaryRepresentation]
  -[MNTracePlaybackDetails writeTo:]
  -[MNTracePlaybackDetails mergeFrom:]
  -[MNTracePlaybackDetails readFrom:]
  -[MNTracePlaybackDetails copyTo:]
  -[MNTracePlaybackDetails eventType]
  -[MNTracePlaybackDetails bookmarks]
  -[MNTracePlaybackDetails setEventType:]
  -[MNTracePlaybackDetails setHasEventType:]
  -[MNTracePlaybackDetails hasEventType]
  -[MNTracePlaybackDetails eventTypeAsString:]
  -[MNTracePlaybackDetails StringAsEventType:]
  -[MNTracePlaybackDetails currentPosition]
  -[MNTracePlaybackDetails setCurrentPosition:]
  -[MNTracePlaybackDetails addBookmark:]
  -[MNTracePlaybackDetails setTracePath:]
  -[MNTracePlaybackDetails bookmarksCount]
  -[MNTracePlaybackDetails clearBookmarks]
  -[MNTracePlaybackDetails bookmarkAtIndex:]
  -[MNTracePlaybackDetails setPedestrianTracePath:]
  -[MNTracePlaybackDetails hasTracePath]
  -[MNTracePlaybackDetails setTraceDuration:]
  -[MNTracePlaybackDetails setHasTraceDuration:]
  -[MNTracePlaybackDetails hasTraceDuration]
  -[MNTracePlaybackDetails setHasCurrentPosition:]
  -[MNTracePlaybackDetails hasCurrentPosition]
  -[MNTracePlaybackDetails setRecordedBookmarkID:]
  -[MNTracePlaybackDetails setHasRecordedBookmarkID:]
  -[MNTracePlaybackDetails hasRecordedBookmarkID]
  -[MNTracePlaybackDetails hasPedestrianTracePath]
  -[MNTracePlaybackDetails setPedestrianTraceStartRelativeTimestamp:]
  -[MNTracePlaybackDetails setHasPedestrianTraceStartRelativeTimestamp:]
  -[MNTracePlaybackDetails hasPedestrianTraceStartRelativeTimestamp]
  -[MNTracePlaybackDetails tracePath]
  -[MNTracePlaybackDetails traceDuration]
  -[MNTracePlaybackDetails setBookmarks:]
  -[MNTracePlaybackDetails recordedBookmarkID]
  -[MNTracePlaybackDetails pedestrianTracePath]
  -[MNTracePlaybackDetails pedestrianTraceStartRelativeTimestamp]


MNTraceRecorder : NSObject /usr/lib/libc++.1.dylib <MNLocationRecorder>
 @property  MNTrace *trace
 @property  NSDate *recordingStartTime
 @property  @? timeSinceRecordingBeganHandler
 @property  <MNTraceRecorderBackgroundGuard> *backgroundGuardDelegate
 @property  BOOL copyToCrashReporterDirectory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTraceRecorder init]
  -[MNTraceRecorder dealloc]
  -[MNTraceRecorder .cxx_destruct]
  -[MNTraceRecorder beginTransaction]
  -[MNTraceRecorder endTransaction]
  -[MNTraceRecorder trace]
  -[MNTraceRecorder _prepareStatements]
  -[MNTraceRecorder recordInitialCourse:]
  -[MNTraceRecorder recordLocation:correctedLocation:]
  -[MNTraceRecorder recordError:]
  -[MNTraceRecorder recordCompassHeading:magneticHeading:accuracy:timestamp:]
  -[MNTraceRecorder recordLocationUpdatePause]
  -[MNTraceRecorder recordLocationUpdateResume]
  -[MNTraceRecorder recordVehicleSpeed:timestamp:]
  -[MNTraceRecorder recordVehicleHeading:timestamp:]
  -[MNTraceRecorder recordETATrafficUpdateRequest:forDestination:]
  -[MNTraceRecorder recordETATrafficUpdateResponse:]
  -[MNTraceRecorder recordCommuteDirectionsRequest:forDestinationID:]
  -[MNTraceRecorder recordCommuteDirectionsResponse:error:forRequest:]
  -[MNTraceRecorder _initializeTraceDB]
  -[MNTraceRecorder _isTracePathValid:]
  -[MNTraceRecorder _createTrace]
  -[MNTraceRecorder _openExistingTrace]
  -[MNTraceRecorder backgroundGuardDelegate]
  -[MNTraceRecorder _logError:resultCode:]
  -[MNTraceRecorder _logSqliteErrorWithResult:file:line:]
  -[MNTraceRecorder _serializationError:]
  -[MNTraceRecorder _dispatchWrite:]
  -[MNTraceRecorder startWritingTraceToFileAtPath:shouldPrepareStatements:completion:]
  -[MNTraceRecorder startWritingTraceToFileAtPath:]
  -[MNTraceRecorder _closeTraceDB]
  -[MNTraceRecorder saveTrace]
  -[MNTraceRecorder timeSinceRecordingBegan]
  -[MNTraceRecorder _executeStatementForQuery:handler:]
  -[MNTraceRecorder _recordLocationMatchInfoOnWriteQueue:forLocationID:]
  -[MNTraceRecorder _updateNavigationEventsWithLocationReference:]
  -[MNTraceRecorder _recordLocationEvent:recordingTimestamp:coordinate:rawCoordinate:timestamp:horizontalAccuracy:verticalAccuracy:altitude:speed:speedAccuracy:course:rawCourse:type:courseAccuracy:correctedCoordinate:correctedCourse:matchType:activeTransportType:matchInfo:correctedLocation:speedLimit:shieldText:shieldType:]
  -[MNTraceRecorder _recordLocationEvent:recordingTimestamp:location:correctedLocation:]
  -[MNTraceRecorder recordGuidanceWasStartedForRouteLeg:timestamp:]
  -[MNTraceRecorder recordGuidanceWasEndedAtTime:]
  -[MNTraceRecorder recordTraceEventAtTime:eventType:stage:description:]
  -[MNTraceRecorder recordRouteError:forRouteRequest:]
  -[MNTraceRecorder recordLocation:rawLocation:]
  -[MNTraceRecorder openForRecordingWithErrorHandler:]
  -[MNTraceRecorder startWritingTraceToPath:withErrorHandler:]
  -[MNTraceRecorder initWithPath:clMapMatching:errorHandler:]
  -[MNTraceRecorder copyToCrashReporterDirectory]
  -[MNTraceRecorder setCopyToCrashReporterDirectory:]
  -[MNTraceRecorder setOriginSearchResultData:]
  -[MNTraceRecorder setDestinationSearchResultData:]
  -[MNTraceRecorder startWritingTraceToFileIfNecessaryWithCompletion:]
  -[MNTraceRecorder startWritingTraceToFileWithCompletion:]
  -[MNTraceRecorder startWritingTraceToFile]
  -[MNTraceRecorder cancelTrace]
  -[MNTraceRecorder saveTraceSynchronously]
  -[MNTraceRecorder saveTraceWithHandler:]
  -[MNTraceRecorder recordEnvironmentInfo:value:]
  -[MNTraceRecorder recordDebugSetting:settingValue:]
  -[MNTraceRecorder recordAudioSetting:volume:]
  -[MNTraceRecorder recordStylesheet:data:]
  -[MNTraceRecorder recordMiscInfo:value:]
  -[MNTraceRecorder recordLocation:timestamp:]
  -[MNTraceRecorder recordSimulatedCoordinate:course:altitude:speed:timestamp:activeTransportType:]
  -[MNTraceRecorder setRouteGenius:]
  -[MNTraceRecorder resetLocationsForSimulation]
  -[MNTraceRecorder recordActiveTransportType:timestamp:]
  -[MNTraceRecorder recordGuidanceWasStartedForRouteLeg:]
  -[MNTraceRecorder recordGuidanceWasEnded]
  -[MNTraceRecorder recordTraceEvent:]
  -[MNTraceRecorder recordTraceEventForEventType:stage:description:]
  -[MNTraceRecorder recordNavigationEvent:forLocation:description:]
  -[MNTraceRecorder resetRouteSelections]
  -[MNTraceRecorder recordDirectionsRequest:response:error:waypoints:requestTimestamp:responseTimestamp:]
  -[MNTraceRecorder recordRouteRequest:waypoints:]
  -[MNTraceRecorder recordRouteResponse:forRouteRequest:]
  -[MNTraceRecorder recordRouteError:]
  -[MNTraceRecorder recordRouteSelected:routeIndex:]
  -[MNTraceRecorder recordRouteDeselected]
  -[MNTraceRecorder recordLikelyRouteRequest:response:waypoints:]
  -[MNTraceRecorder recordETATrafficUpdateRequest:]
  -[MNTraceRecorder recordETATrafficUpdateError:]
  -[MNTraceRecorder recordTransitUpdateRequest:withTimestamp:]
  -[MNTraceRecorder recordTransitUpdateResponse:]
  -[MNTraceRecorder recordTransitUpdateError:]
  -[MNTraceRecorder recordMotionUpdate:exitType:confidence:]
  -[MNTraceRecorder recordProjectedArrivalTime:actualArrivalTime:arrivalTimeDelta:matchType:vehicleType:lastKnownLocation:forStepIndex:withDuration:andManeuverType:]
  -[MNTraceRecorder updateActualArrivalTime:arrivalTimeDelta:forStepIndex:]
  -[MNTraceRecorder recordCommuteDestinationWithID:name:waypoint:]
  -[MNTraceRecorder recordDirectionsFeedback:]
  -[MNTraceRecorder recordingStartTime]
  -[MNTraceRecorder setRecordingStartTime:]
  -[MNTraceRecorder timeSinceRecordingBeganHandler]
  -[MNTraceRecorder setTimeSinceRecordingBeganHandler:]
  -[MNTraceRecorder setBackgroundGuardDelegate:]


MNNavigationTraceManager : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerObserver, MNLocationProvider, GEOMotionContextProvider>
 @property  <MNNavigationTraceManagerDelegate> *traceManagerDelegate
 @property  MNTracePlayer *tracePlayer
 @property  MNTraceRecorder *traceRecorder
 @property  MNTraceEventRecorder *traceEventRecorder
 @property  int navigationType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  double desiredAccuracy
 @property  BOOL locationServicesPreferencesDialogEnabled
 @property  double distanceFilter
 @property  BOOL matchInfoEnabled
 @property  int headingOrientation
 @property  @? authorizationRequestBlock
 @property  double expectedGpsUpdateInterval
 @property  int authorizationStatus
 @property  long long activityType
 @property  BOOL usesCLMapCorrection
 @property  BOOL isSimulation
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale
 @property  <GEOMotionContextProviderDelegate> *motionDelegate

  // instance methods
  -[MNNavigationTraceManager dealloc]
  -[MNNavigationTraceManager close]
  -[MNNavigationTraceManager delegate]
  -[MNNavigationTraceManager setDelegate:]
  -[MNNavigationTraceManager .cxx_destruct]
  -[MNNavigationTraceManager activityType]
  -[MNNavigationTraceManager startUpdatingLocation]
  -[MNNavigationTraceManager stopUpdatingLocation]
  -[MNNavigationTraceManager distanceFilter]
  -[MNNavigationTraceManager setDistanceFilter:]
  -[MNNavigationTraceManager desiredAccuracy]
  -[MNNavigationTraceManager setDesiredAccuracy:]
  -[MNNavigationTraceManager setActivityType:]
  -[MNNavigationTraceManager matchInfoEnabled]
  -[MNNavigationTraceManager setMatchInfoEnabled:]
  -[MNNavigationTraceManager startUpdatingHeading]
  -[MNNavigationTraceManager requestWhenInUseAuthorization]
  -[MNNavigationTraceManager authorizationStatus]
  -[MNNavigationTraceManager expectedGpsUpdateInterval]
  -[MNNavigationTraceManager setHeadingOrientation:]
  -[MNNavigationTraceManager headingOrientation]
  -[MNNavigationTraceManager stopUpdatingHeading]
  -[MNNavigationTraceManager requestWhenInUseAuthorizationWithPrompt]
  -[MNNavigationTraceManager isLocationServicesPreferencesDialogEnabled]
  -[MNNavigationTraceManager setLocationServicesPreferencesDialogEnabled:]
  -[MNNavigationTraceManager startUpdatingVehicleSpeed]
  -[MNNavigationTraceManager stopUpdatingVehicleSpeed]
  -[MNNavigationTraceManager startUpdatingVehicleHeading]
  -[MNNavigationTraceManager stopUpdatingVehicleHeading]
  -[MNNavigationTraceManager effectiveBundle]
  -[MNNavigationTraceManager stopMotionUpdates]
  -[MNNavigationTraceManager setMotionDelegate:]
  -[MNNavigationTraceManager startMotionUpdates]
  -[MNNavigationTraceManager isSimulation]
  -[MNNavigationTraceManager _isNavigating]
  -[MNNavigationTraceManager navigationType]
  -[MNNavigationTraceManager setEffectiveBundle:]
  -[MNNavigationTraceManager effectiveBundleIdentifier]
  -[MNNavigationTraceManager setEffectiveBundleIdentifier:]
  -[MNNavigationTraceManager authorizationRequestBlock]
  -[MNNavigationTraceManager setAuthorizationRequestBlock:]
  -[MNNavigationTraceManager usesCLMapCorrection]
  -[MNNavigationTraceManager isTracePlayer]
  -[MNNavigationTraceManager timeScale]
  -[MNNavigationTraceManager setNavigationType:]
  -[MNNavigationTraceManager tracePlayer]
  -[MNNavigationTraceManager traceRecorder]
  -[MNNavigationTraceManager _defaultTraceNameForDestination:]
  -[MNNavigationTraceManager _tracePathForTraceName:]
  -[MNNavigationTraceManager _recordEnvironmentInfo:]
  -[MNNavigationTraceManager _recordStylesheet:]
  -[MNNavigationTraceManager _validFilenameForTraceName:]
  -[MNNavigationTraceManager _defaultTraceExtension]
  -[MNNavigationTraceManager _startIndexForNavigation]
  -[MNNavigationTraceManager tracePlayerDidStart:]
  -[MNNavigationTraceManager tracePlayerDidStop:]
  -[MNNavigationTraceManager tracePlayerDidPause:]
  -[MNNavigationTraceManager tracePlayerDidResume:]
  -[MNNavigationTraceManager tracePlayer:didSeekToTransportType:]
  -[MNNavigationTraceManager tracePlayer:didSeekToTime:fromTime:location:]
  -[MNNavigationTraceManager tracePlayer:didPlayAtTime:]
  -[MNNavigationTraceManager tracePlayer:didJumpToRouteResponse:request:origin:destination:]
  -[MNNavigationTraceManager tracePlayerDidStayOnRoute:]
  -[MNNavigationTraceManager tracePlayer:didUpdateLocation:]
  -[MNNavigationTraceManager tracePlayer:didReceiveLocationError:]
  -[MNNavigationTraceManager tracePlayerDidPauseLocationUpdates:]
  -[MNNavigationTraceManager tracePlayerDidResumeLocationUpdates:]
  -[MNNavigationTraceManager tracePlayer:didUpdateHeading:]
  -[MNNavigationTraceManager tracePlayer:didUpdateMotion:exitType:confidence:]
  -[MNNavigationTraceManager tracePlayer:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationTraceManager tracePlayer:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationTraceManager resetForActiveTileGroupChanged]
  -[MNNavigationTraceManager traceVersion]
  -[MNNavigationTraceManager motionDelegate]
  -[MNNavigationTraceManager openForPlaybackWithTracePath:]
  -[MNNavigationTraceManager openForRecordingWithTraceRecordingData:traceNameOverride:]
  -[MNNavigationTraceManager openForSimulationWithRoute:traceRecordingData:traceNameOverride:]
  -[MNNavigationTraceManager startSimulationWithRoute:request:response:routeAttributes:routeIndex:traceNameOverride:]
  -[MNNavigationTraceManager traceManagerDelegate]
  -[MNNavigationTraceManager setTraceManagerDelegate:]
  -[MNNavigationTraceManager traceEventRecorder]


MNNavigationService : NSObject /usr/lib/libc++.1.dylib <MNNavigationServiceClientInterface>
 @property  MNNavigationDetails *details
 @property  MNAudioOutputSetting *currentAudioOutputSetting
 @property  unsigned long routeSelection
 @property  NSArray *audioSettings
 @property  MNAudioOutputSetting *currentSettingForVoicePrompt
 @property  int headingOrientation
 @property  BOOL guidancePromptsEnabled
 @property  unsigned long state
 @property  BOOL isInNavigatingState
 @property  int navigationType
 @property  int navigationState
 @property  int navigationTransportType
 @property  BOOL isTrackingCurrentLocation
 @property  BOOL isInPreArrivalState
 @property  NSString *currentVoiceLanguage
 @property  int desiredNavigationType
 @property  int desiredTransportType
 @property  GEOComposedRoute *route
 @property  GEODirectionsRequest *currentRequest
 @property  GEODirectionsResponse *currentResponse
 @property  unsigned long routeIndex
 @property  unsigned long reconnectionRouteIndex
 @property  NSArray *alternateRoutes
 @property  unsigned long stepIndex
 @property  MNLocation *lastLocation
 @property  double remainingTime
 @property  double distanceUntilSign
 @property  double timeUntilSign
 @property  double distanceUntilManeuver
 @property  double timeUntilManeuver
 @property  GEOComposedWaypoint *origin
 @property  GEOComposedWaypoint *originalOrigin
 @property  GEOComposedWaypoint *destination
 @property  NSString *destinationName
 @property  GEOComposedWaypoint *originalDestination
 @property  NSString *originalDestinationName
 @property  BOOL isDetour
 @property  BOOL isPredictingDestination
 @property  NSArray *possibleCommuteDestinations
 @property  MNCommuteDestination *predictedCommuteDestination
 @property  NSString *tracePath
 @property  double traceDuration
 @property  NSArray *traceBookmarks
 @property  BOOL navigatingFromTrace
 @property  BOOL traceIsPlaying
 @property  double tracePosition
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNavigationService sharedService]
  +[MNNavigationService clientInterfaceHash]
  +[MNNavigationService daemonInterfaceHash]
  +[MNNavigationService _hashForProtocol:]

  // instance methods
  -[MNNavigationService .cxx_destruct]
  -[MNNavigationService addObserver:]
  -[MNNavigationService removeObserver:]
  -[MNNavigationService state]
  -[MNNavigationService _clientProxy]
  -[MNNavigationService destination]
  -[MNNavigationService origin]
  -[MNNavigationService settings]
  -[MNNavigationService currentRequest]
  -[MNNavigationService details]
  -[MNNavigationService setDetails:]
  -[MNNavigationService setHeadingOrientation:]
  -[MNNavigationService headingOrientation]
  -[MNNavigationService destinationName]
  -[MNNavigationService openForClient:]
  -[MNNavigationService closeForClient:]
  -[MNNavigationService initPrivate]
  -[MNNavigationService routeIndex]
  -[MNNavigationService remainingTime]
  -[MNNavigationService route]
  -[MNNavigationService stepIndex]
  -[MNNavigationService navigationState]
  -[MNNavigationService setGuidancePromptsEnabled:]
  -[MNNavigationService setDisplayedStepIndex:]
  -[MNNavigationService setIsConnectedToCarplay:]
  -[MNNavigationService lastLocation]
  -[MNNavigationService guidancePromptsEnabled]
  -[MNNavigationService navigationType]
  -[MNNavigationService audioSettings]
  -[MNNavigationService alternateRoutes]
  -[MNNavigationService currentResponse]
  -[MNNavigationService navigationTransportType]
  -[MNNavigationService trafficForRoute:]
  -[MNNavigationService isInNavigatingState]
  -[MNNavigationService _resetDetails]
  -[MNNavigationService stopNavigation]
  -[MNNavigationService navigationServiceProxy:didUpdateNavigationDetails:]
  -[MNNavigationService setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationService stopPredictingDestinations]
  -[MNNavigationService updateDestination:]
  -[MNNavigationService resumeOriginalDestination]
  -[MNNavigationService switchToRoute:]
  -[MNNavigationService setFullGuidanceMode:]
  -[MNNavigationService changeSettings:]
  -[MNNavigationService stopCurrentGuidancePrompt]
  -[MNNavigationService setHFPPreference:forSetting:]
  -[MNNavigationService setCurrentAudioOutputSetting:]
  -[MNNavigationService setRideIndex:forLegIndex:]
  -[MNNavigationService setJunctionViewImageWidth:height:]
  -[MNNavigationService setTraceIsPlaying:]
  -[MNNavigationService setTracePlaybackSpeed:]
  -[MNNavigationService setTracePosition:]
  -[MNNavigationService recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationService recordPedestrianTracePath:]
  -[MNNavigationService navigationServiceProxy:willChangeFromState:toState:]
  -[MNNavigationService navigationServiceProxy:didChangeFromState:toState:]
  -[MNNavigationService navigationServiceProxy:willStartNavigationWithRoute:navigationType:request:response:]
  -[MNNavigationService navigationServiceProxyWillPauseNavigation:]
  -[MNNavigationService navigationServiceProxyWillResumeFromPauseNavigation:]
  -[MNNavigationService navigationServiceProxy:didFailWithError:]
  -[MNNavigationService navigationServiceProxy:didChangeNavigationState:]
  -[MNNavigationService navigationServiceProxy:didUpdateMatchedLocation:]
  -[MNNavigationService navigationServiceProxy:didUpdateStepIndex:legIndex:]
  -[MNNavigationService navigationServiceProxy:didUpdateProceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationService navigationServiceProxy:didUpdateDistanceUntilSign:timeUntilSign:forStepIndex:]
  -[MNNavigationService navigationServiceProxy:didUpdateDistanceUntilManeuver:timeUntilManeuver:forStepIndex:]
  -[MNNavigationService navigationServiceProxy:willAnnounce:inSeconds:]
  -[MNNavigationService navigationServiceProxy:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationService navigationServiceProxy:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationService navigationServiceProxy:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationService navigationServiceProxyHideSecondaryStep:]
  -[MNNavigationService navigationServiceProxyBeginGuidanceUpdate:]
  -[MNNavigationService navigationServiceProxyEndGuidanceUpdate:]
  -[MNNavigationService navigationServiceProxy:updateSignsWithInfo:]
  -[MNNavigationService navigationServiceProxy:usePersistentDisplay:]
  -[MNNavigationService navigationServiceProxy:showLaneDirections:]
  -[MNNavigationService navigationServiceProxy:hideLaneDirectionsForId:]
  -[MNNavigationService navigationServiceProxy:showJunctionView:]
  -[MNNavigationService navigationServiceProxy:hideJunctionViewForId:]
  -[MNNavigationService navigationServiceProxyDidEnterPreArrivalState:]
  -[MNNavigationService navigationServiceProxyDidArrive:]
  -[MNNavigationService navigationServiceProxyPredictingDidArrive:]
  -[MNNavigationService navigationServiceProxy:didEnableGuidancePrompts:]
  -[MNNavigationService navigationServiceProxy:newGuidanceEventFeedback:]
  -[MNNavigationService navigationServiceProxy:updatedGuidanceEventFeedback:]
  -[MNNavigationService navigationServiceProxy:didUpdateDisplayETA:displayRemainingMinutes:forRoute:]
  -[MNNavigationService navigationServiceProxy:didUpdateRemainingTime:remainingDistance:]
  -[MNNavigationService navigationServiceProxy:didUpdateETAResponseForRoute:]
  -[MNNavigationService navigationServiceProxy:didUpdateHeading:accuracy:]
  -[MNNavigationService navigationServiceProxy:didUpdateMotionType:confidence:]
  -[MNNavigationService navigationServiceProxy:didUpdatePreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationService navigationServiceProxyWillReroute:]
  -[MNNavigationService navigationServiceProxy:didRerouteWithRoute:withLocationDetails:withAlternateRoutes:]
  -[MNNavigationService navigationServiceProxyDidCancelReroute:]
  -[MNNavigationService navigationServiceProxy:didUpdateRouteWithNewRideSelection:]
  -[MNNavigationService navigationServiceProxy:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationService navigationServiceProxy:didFailRerouteWithError:]
  -[MNNavigationService navigationServiceProxy:didUpdateAlternateRoutes:]
  -[MNNavigationService navigationServiceProxy:didReceiveTrafficIncidentAlert:]
  -[MNNavigationService navigationServiceProxy:didUpdateTrafficIncidentAlert:]
  -[MNNavigationService navigationServiceProxy:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationService navigationServiceProxy:didUpdatePossibleCommuteDestinations:]
  -[MNNavigationService navigationServiceProxy:didUpdateTracePlaybackDetails:]
  -[MNNavigationService navigationServiceProxy:didActivateAudioSession:]
  -[MNNavigationService navigationServiceProxy:didStartSpeakingPrompt:]
  -[MNNavigationService navigationServiceProxy:didStartUsingVoiceLanguage:]
  -[MNNavigationService navigationServiceProxy:didUpdateAudioOutputSettings:]
  -[MNNavigationService navigationServiceProxy:didUpdateAudioOutputCurrentSetting:]
  -[MNNavigationService navigationServiceProxy:didUpdateAudioOutputCurrentSettingForVoicePrompt:]
  -[MNNavigationService navigationServiceProxy:didUpdateAudioOutputRouteSelection:]
  -[MNNavigationService navigationServiceProxy:didChangeVolume:]
  -[MNNavigationService navigationServiceProxy:triggerHaptics:]
  -[MNNavigationService navigationServiceProxy:willRequestRealtimeUpdatesForRouteIDs:]
  -[MNNavigationService navigationServiceProxy:didReceiveRealtimeUpdates:]
  -[MNNavigationService currentVoiceLanguage]
  -[MNNavigationService currentSettingForVoicePrompt]
  -[MNNavigationService routeSelection]
  -[MNNavigationService tracePath]
  -[MNNavigationService traceDuration]
  -[MNNavigationService isOpenForClient:]
  -[MNNavigationService isInPreArrivalState]
  -[MNNavigationService desiredNavigationType]
  -[MNNavigationService desiredTransportType]
  -[MNNavigationService reconnectionRouteIndex]
  -[MNNavigationService distanceUntilSign]
  -[MNNavigationService timeUntilSign]
  -[MNNavigationService distanceUntilManeuver]
  -[MNNavigationService timeUntilManeuver]
  -[MNNavigationService originalOrigin]
  -[MNNavigationService originalDestination]
  -[MNNavigationService isDetour]
  -[MNNavigationService possibleCommuteDestinations]
  -[MNNavigationService predictedCommuteDestination]
  -[MNNavigationService traceBookmarks]
  -[MNNavigationService traceIsPlaying]
  -[MNNavigationService tracePosition]
  -[MNNavigationService ticketForDirectionsRequest:]
  -[MNNavigationService startNavigationWithDetails:error:]
  -[MNNavigationService startPredictingDestinations]
  -[MNNavigationService repeatCurrentGuidance:]
  -[MNNavigationService repeatCurrentTrafficAlert:]
  -[MNNavigationService vibrateForPrompt:completion:]
  -[MNNavigationService isTrackingCurrentLocation]
  -[MNNavigationService displayETAForRoute:]
  -[MNNavigationService displayRemainingMinutesForRoute:]
  -[MNNavigationService alternateRouteIndexForRoute:]
  -[MNNavigationService etaRouteForRoute:]
  -[MNNavigationService realtimeUpdatesForRoutes:]
  -[MNNavigationService realtimeUpdatesForAllRoutes]
  -[MNNavigationService pauseRealtimeUpdates]
  -[MNNavigationService resumeRealtimeUpdates]
  -[MNNavigationService originalDestinationName]
  -[MNNavigationService isPredictingDestination]
  -[MNNavigationService predictedDestinationName]
  -[MNNavigationService predictedDestination]
  -[MNNavigationService predictedRoute]
  -[MNNavigationService isNavigatingFromTrace]
  -[MNNavigationService currentAudioOutputSetting]


MNNavigationServiceDirectionsRequestTicket : NSObject /usr/lib/libc++.1.dylib
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  MNTraceRecordingData *traceRecordingData

  // instance methods
  -[MNNavigationServiceDirectionsRequestTicket .cxx_destruct]
  -[MNNavigationServiceDirectionsRequestTicket cancel]
  -[MNNavigationServiceDirectionsRequestTicket directionsResponse]
  -[MNNavigationServiceDirectionsRequestTicket directionsRequest]
  -[MNNavigationServiceDirectionsRequestTicket traceRecordingData]
  -[MNNavigationServiceDirectionsRequestTicket initWithProxy:request:]
  -[MNNavigationServiceDirectionsRequestTicket submitWithHandler:]


MNRouteRefreshPolicyRulesTimeToLeave : NSObject /usr/lib/libc++.1.dylib <MNRouteRefreshPolicyRules>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long policy
 @property  BOOL canWakeClientForUpdates
 @property  BOOL canWakeDeviceForUpdates

  // instance methods
  -[MNRouteRefreshPolicyRulesTimeToLeave init]
  -[MNRouteRefreshPolicyRulesTimeToLeave policy]
  -[MNRouteRefreshPolicyRulesTimeToLeave canMakeNetworkRequestsForDestination:atDate:]
  -[MNRouteRefreshPolicyRulesTimeToLeave timeIntervalForDestinationRefresh:lastUpdate:]
  -[MNRouteRefreshPolicyRulesTimeToLeave maxTimeIntervalFromNowForDestinationRefresh:fromDate:]
  -[MNRouteRefreshPolicyRulesTimeToLeave canWakeClientForUpdates]
  -[MNRouteRefreshPolicyRulesTimeToLeave canWakeDeviceForUpdates]
  -[MNRouteRefreshPolicyRulesTimeToLeave _timeIntervalToDestination:fromDate:]


MNRouteUpdateFreshness : NSObject /usr/lib/libc++.1.dylib <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  double maxAge
 @property  double maxDisplacement
 @property  double minAccuracy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNRouteUpdateFreshness supportsSecureCoding]

  // instance methods
  -[MNRouteUpdateFreshness init]
  -[MNRouteUpdateFreshness copyWithZone:]
  -[MNRouteUpdateFreshness encodeWithCoder:]
  -[MNRouteUpdateFreshness initWithCoder:]
  -[MNRouteUpdateFreshness maxAge]
  -[MNRouteUpdateFreshness setMaxAge:]
  -[MNRouteUpdateFreshness jsonDictionary]
  -[MNRouteUpdateFreshness setMaxDisplacement:]
  -[MNRouteUpdateFreshness setMinAccuracy:]
  -[MNRouteUpdateFreshness maxDisplacement]
  -[MNRouteUpdateFreshness minAccuracy]


MNRouteUpdate : NSObject /usr/lib/libc++.1.dylib <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  CLLocation *origin
 @property  double travelTime
 @property  double aggressiveTravelTime
 @property  double conservativeTravelTime
 @property  NSArray *routes
 @property  NSArray *nonRecommendedRoutes
 @property  NSString *routeSummary
 @property  NSString *longRouteSummary
 @property  long long travelMode
 @property  NSDate *requestTime
 @property  NSString *requestingClientID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNRouteUpdate supportsSecureCoding]

  // instance methods
  -[MNRouteUpdate init]
  -[MNRouteUpdate isEqual:]
  -[MNRouteUpdate copyWithZone:]
  -[MNRouteUpdate encodeWithCoder:]
  -[MNRouteUpdate initWithCoder:]
  -[MNRouteUpdate .cxx_destruct]
  -[MNRouteUpdate origin]
  -[MNRouteUpdate setOrigin:]
  -[MNRouteUpdate requestTime]
  -[MNRouteUpdate setRequestTime:]
  -[MNRouteUpdate routes]
  -[MNRouteUpdate setRoutes:]
  -[MNRouteUpdate travelTime]
  -[MNRouteUpdate setTravelTime:]
  -[MNRouteUpdate aggressiveTravelTime]
  -[MNRouteUpdate conservativeTravelTime]
  -[MNRouteUpdate setAggressiveTravelTime:]
  -[MNRouteUpdate setConservativeTravelTime:]
  -[MNRouteUpdate jsonDictionary]
  -[MNRouteUpdate copyWithOptions:]
  -[MNRouteUpdate setRequestingClientID:]
  -[MNRouteUpdate satisfiesOptions:]
  -[MNRouteUpdate satisfiesFreshness:fromLocation:]
  -[MNRouteUpdate requestingClientID]
  -[MNRouteUpdate routeSummary]
  -[MNRouteUpdate setRouteSummary:]
  -[MNRouteUpdate longRouteSummary]
  -[MNRouteUpdate setLongRouteSummary:]
  -[MNRouteUpdate nonRecommendedRoutes]
  -[MNRouteUpdate setNonRecommendedRoutes:]
  -[MNRouteUpdate travelMode]
  -[MNRouteUpdate setTravelMode:]


MNCommuteDestinationETAScore : MNCommuteDestinationScore <MNCommuteDestinationObserver, MNCommuteDestinationComparisonScore>
 @property  MNCommuteDestination *otherDestination
 @property  double otherDestinationTravelTime
 @property  NSDate *lastRouteUpdate
 @property  <GEODirectionServiceTicket> *directionsRequestTicket
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNCommuteDestinationETAScore weight]

  // instance methods
  -[MNCommuteDestinationETAScore .cxx_destruct]
  -[MNCommuteDestinationETAScore score]
  -[MNCommuteDestinationETAScore _routeAttributes]
  -[MNCommuteDestinationETAScore initWithDestination:]
  -[MNCommuteDestinationETAScore updateScoreIfPossible]
  -[MNCommuteDestinationETAScore destinationInvalid]
  -[MNCommuteDestinationETAScore descriptionExtras]
  -[MNCommuteDestinationETAScore _directionsRequestFeedback]
  -[MNCommuteDestinationETAScore _handleDirectionsResponse:error:forRequest:]
  -[MNCommuteDestinationETAScore commuteDestination:didChangeRemainingTime:]
  -[MNCommuteDestinationETAScore _updateScoreAndDestinationInvalid]
  -[MNCommuteDestinationETAScore otherDestination]
  -[MNCommuteDestinationETAScore otherDestinationTravelTime]
  -[MNCommuteDestinationETAScore lastRouteUpdate]
  -[MNCommuteDestinationETAScore supportsComparisonType:]
  -[MNCommuteDestinationETAScore setOtherDestination:]
  -[MNCommuteDestinationETAScore setLastRouteUpdate:]
  -[MNCommuteDestinationETAScore directionsRequestTicket]
  -[MNCommuteDestinationETAScore setDirectionsRequestTicket:]
  -[MNCommuteDestinationETAScore _readyForRoute]
  -[MNCommuteDestinationETAScore _requestRoute]
  -[MNCommuteDestinationETAScore setOtherDestinationTravelTime:]
  -[MNCommuteDestinationETAScore updateComparisonDestination:ofType:]


MNSteppingLocationTracker : MNLocationTracker <MNArrivalUpdaterDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSteppingLocationTracker .cxx_destruct]
  -[MNSteppingLocationTracker transportType]
  -[MNSteppingLocationTracker stopTracking]
  -[MNSteppingLocationTracker updateLocation:]
  -[MNSteppingLocationTracker _matchedLocationForLocation:]
  -[MNSteppingLocationTracker initWithNavigationSession:]
  -[MNSteppingLocationTracker startTracking]
  -[MNSteppingLocationTracker matchedLocationForLocation:]
  -[MNSteppingLocationTracker resetForTracePlayerAtLocation:]
  -[MNSteppingLocationTracker arrivalUpdaterDidArrive:]


MNAnnouncementStrategyDelayCompressDrop : NSObject /usr/lib/libc++.1.dylib <MNAnnoucementStrategy>
 @property  MNGuidanceEventManager *manager
 @property  NSArray *events
 @property  double distance
 @property  double speed
 @property  MNAnnouncementPlan *plan

  // instance methods
  -[MNAnnouncementStrategyDelayCompressDrop .cxx_destruct]
  -[MNAnnouncementStrategyDelayCompressDrop initWithManager:]
  -[MNAnnouncementStrategyDelayCompressDrop manager]
  -[MNAnnouncementStrategyDelayCompressDrop events]
  -[MNAnnouncementStrategyDelayCompressDrop setEvents:]
  -[MNAnnouncementStrategyDelayCompressDrop plan]
  -[MNAnnouncementStrategyDelayCompressDrop setPlan:]
  -[MNAnnouncementStrategyDelayCompressDrop speed]
  -[MNAnnouncementStrategyDelayCompressDrop setSpeed:]
  -[MNAnnouncementStrategyDelayCompressDrop setManager:]
  -[MNAnnouncementStrategyDelayCompressDrop setDistance:]
  -[MNAnnouncementStrategyDelayCompressDrop distance]
  -[MNAnnouncementStrategyDelayCompressDrop _canDelayEvent:]
  -[MNAnnouncementStrategyDelayCompressDrop _advanceToResolveConflict:]
  -[MNAnnouncementStrategyDelayCompressDrop _delayToResolveConflict:]
  -[MNAnnouncementStrategyDelayCompressDrop _compressToResolveConflict:]
  -[MNAnnouncementStrategyDelayCompressDrop _dropToResolveConflict:]
  -[MNAnnouncementStrategyDelayCompressDrop _canAdvanceEvent:]
  -[MNAnnouncementStrategyDelayCompressDrop planForEvents:distance:speed:previousEvent:timeSinceLastEvent:]
  -[MNAnnouncementStrategyDelayCompressDrop nextEvent]


MNCoreLocationProvider : NSObject /usr/lib/libc++.1.dylib <CLLocationManagerDelegate, CLLocationManagerVehicleDelegate, MNLocationProvider>
 @property  CLLocationManager *_clLocationManager
 @property  BOOL updatingLocations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  double desiredAccuracy
 @property  BOOL locationServicesPreferencesDialogEnabled
 @property  double distanceFilter
 @property  BOOL matchInfoEnabled
 @property  int headingOrientation
 @property  @? authorizationRequestBlock
 @property  double expectedGpsUpdateInterval
 @property  int authorizationStatus
 @property  long long activityType
 @property  BOOL usesCLMapCorrection
 @property  BOOL isSimulation
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale

  // instance methods
  -[MNCoreLocationProvider init]
  -[MNCoreLocationProvider dealloc]
  -[MNCoreLocationProvider delegate]
  -[MNCoreLocationProvider setDelegate:]
  -[MNCoreLocationProvider .cxx_destruct]
  -[MNCoreLocationProvider activityType]
  -[MNCoreLocationProvider locationManager:didUpdateLocations:]
  -[MNCoreLocationProvider startUpdatingLocation]
  -[MNCoreLocationProvider stopUpdatingLocation]
  -[MNCoreLocationProvider distanceFilter]
  -[MNCoreLocationProvider setDistanceFilter:]
  -[MNCoreLocationProvider desiredAccuracy]
  -[MNCoreLocationProvider setDesiredAccuracy:]
  -[MNCoreLocationProvider setActivityType:]
  -[MNCoreLocationProvider matchInfoEnabled]
  -[MNCoreLocationProvider setMatchInfoEnabled:]
  -[MNCoreLocationProvider locationManagerDidResumeLocationUpdates:]
  -[MNCoreLocationProvider locationManager:didFailWithError:]
  -[MNCoreLocationProvider startUpdatingHeading]
  -[MNCoreLocationProvider locationManager:didChangeAuthorizationStatus:]
  -[MNCoreLocationProvider locationManager:didUpdateHeading:]
  -[MNCoreLocationProvider locationManagerDidPauseLocationUpdates:]
  -[MNCoreLocationProvider locationManager:didUpdateVehicleSpeed:]
  -[MNCoreLocationProvider locationManager:didUpdateVehicleHeading:]
  -[MNCoreLocationProvider requestWhenInUseAuthorization]
  -[MNCoreLocationProvider authorizationStatus]
  -[MNCoreLocationProvider initWithEffectiveBundleIdentifier:]
  -[MNCoreLocationProvider initWithEffectiveBundle:]
  -[MNCoreLocationProvider expectedGpsUpdateInterval]
  -[MNCoreLocationProvider requestLocation]
  -[MNCoreLocationProvider setHeadingOrientation:]
  -[MNCoreLocationProvider headingOrientation]
  -[MNCoreLocationProvider stopUpdatingHeading]
  -[MNCoreLocationProvider requestWhenInUseAuthorizationWithPrompt]
  -[MNCoreLocationProvider isLocationServicesPreferencesDialogEnabled]
  -[MNCoreLocationProvider setLocationServicesPreferencesDialogEnabled:]
  -[MNCoreLocationProvider startUpdatingVehicleSpeed]
  -[MNCoreLocationProvider stopUpdatingVehicleSpeed]
  -[MNCoreLocationProvider startUpdatingVehicleHeading]
  -[MNCoreLocationProvider stopUpdatingVehicleHeading]
  -[MNCoreLocationProvider effectiveBundle]
  -[MNCoreLocationProvider isSimulation]
  -[MNCoreLocationProvider _sharedInit]
  -[MNCoreLocationProvider _createCLLocationManager]
  -[MNCoreLocationProvider _clLocationManager]
  -[MNCoreLocationProvider _updateAuthorizationStatus]
  -[MNCoreLocationProvider _resetForNewEffectiveBundle]
  -[MNCoreLocationProvider setEffectiveBundle:]
  -[MNCoreLocationProvider effectiveBundleIdentifier]
  -[MNCoreLocationProvider setEffectiveBundleIdentifier:]
  -[MNCoreLocationProvider authorizationRequestBlock]
  -[MNCoreLocationProvider setAuthorizationRequestBlock:]
  -[MNCoreLocationProvider usesCLMapCorrection]
  -[MNCoreLocationProvider isTracePlayer]
  -[MNCoreLocationProvider timeScale]
  -[MNCoreLocationProvider resetForActiveTileGroupChanged]
  -[MNCoreLocationProvider traceVersion]
  -[MNCoreLocationProvider setUpdatingLocations:]
  -[MNCoreLocationProvider updatingLocations]


MNRouteRefreshPolicyScheduler : NSObject /usr/lib/libc++.1.dylib <MNTimeballInternalProvider>
 @property  @? refreshCompletion
 @property  double tolerance
 @property  <MNRouteRefreshPolicySchedulerTimedActivity> *timedActivity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteRefreshPolicyScheduler init]
  -[MNRouteRefreshPolicyScheduler dealloc]
  -[MNRouteRefreshPolicyScheduler tolerance]
  -[MNRouteRefreshPolicyScheduler setTolerance:]
  -[MNRouteRefreshPolicyScheduler .cxx_destruct]
  -[MNRouteRefreshPolicyScheduler addObserver:]
  -[MNRouteRefreshPolicyScheduler removeObserver:]
  -[MNRouteRefreshPolicyScheduler scheduleUpdatesForDestination:options:policy:auditToken:]
  -[MNRouteRefreshPolicyScheduler unscheduleUpdateForDestination:]
  -[MNRouteRefreshPolicyScheduler _performDeferredRefresh]
  -[MNRouteRefreshPolicyScheduler _handleSchedulingUpdatesForDestination:options:policy:auditToken:]
  -[MNRouteRefreshPolicyScheduler _handleSchedulingThisDestinationAndRefreshAllDestinations:nextRefreshDate:]
  -[MNRouteRefreshPolicyScheduler _scheduleNextRefreshDateForDestination:routeUpdate:fromDate:completion:]
  -[MNRouteRefreshPolicyScheduler _refreshAllDestinationsAtDate:]
  -[MNRouteRefreshPolicyScheduler _deferRefreshForScheduledDestinationsAfter:]
  -[MNRouteRefreshPolicyScheduler _updateNextRefreshDate:destination:completion:]
  -[MNRouteRefreshPolicyScheduler _enterActiveWorkload]
  -[MNRouteRefreshPolicyScheduler _handleRefreshingCacheEntries:atDate:]
  -[MNRouteRefreshPolicyScheduler _leaveActiveWorkload]
  -[MNRouteRefreshPolicyScheduler _handleRefreshingCacheEntries:atDate:userLocation:]
  -[MNRouteRefreshPolicyScheduler _handleCompletionOfRefresh]
  -[MNRouteRefreshPolicyScheduler refreshCompletion]
  -[MNRouteRefreshPolicyScheduler _refreshPolicyForDestination:]
  -[MNRouteRefreshPolicyScheduler _timeIntervalForRefreshOfDestination:routeUpdate:atDate:]
  -[MNRouteRefreshPolicyScheduler _newActivityFromRefreshPolicyRules:]
  -[MNRouteRefreshPolicyScheduler timedActivity]
  -[MNRouteRefreshPolicyScheduler setTimedActivity:]
  -[MNRouteRefreshPolicyScheduler initWithRoutingProvider:cache:locationManager:]
  -[MNRouteRefreshPolicyScheduler refreshScheduledDestinations]
  -[MNRouteRefreshPolicyScheduler setRefreshCompletion:]


MNNavigationStateLowGuidance : MNNavigationStateGuidance
  // instance methods
  -[MNNavigationStateLowGuidance type]
  -[MNNavigationStateLowGuidance enterState]
  -[MNNavigationStateLowGuidance setFullGuidanceMode:]


MNTrace : NSObject /usr/lib/libc++.1.dylib
 @property  ^{sqlite3=} db
 @property  NSObject<OS_dispatch_queue> *writeQueue
 @property  NSObject<OS_dispatch_group> *writeGroup
 @property  unsigned long version
 @property  unsigned long originalVersion
 @property  BOOL isSimulation
 @property  BOOL isRouteGenius
 @property  BOOL usesCLMapCorrection
 @property  double initialCourse
 @property  NSArray *locations
 @property  NSArray *directions
 @property  NSArray *etaUpdates
 @property  NSArray *headingData
 @property  NSArray *motionData
 @property  NSArray *vehicleHeadingData
 @property  NSArray *vehicleSpeedData
 @property  NSData *startWaypointData
 @property  NSData *endWaypointData
 @property  NSArray *routeSelections
 @property  NSArray *annotatedUserBehavior
 @property  NSArray *annotatedUserEnvironments
 @property  NSArray *bookmarks
 @property  NSArray *bookmarkImages
 @property  NSArray *commuteDestinations
 @property  NSArray *commuteDirectionsRequests
 @property  NSDictionary *miscInfo
 @property  NSString *tracePath
 @property  BOOL copyToCrashReporter
 @property  int mainTransportType

  // instance methods
  -[MNTrace init]
  -[MNTrace dealloc]
  -[MNTrace .cxx_destruct]
  -[MNTrace version]
  -[MNTrace setVersion:]
  -[MNTrace db]
  -[MNTrace setLocations:]
  -[MNTrace bookmarks]
  -[MNTrace directions]
  -[MNTrace setDirections:]
  -[MNTrace locations]
  -[MNTrace mainTransportType]
  -[MNTrace isSimulation]
  -[MNTrace setIsSimulation:]
  -[MNTrace usesCLMapCorrection]
  -[MNTrace writeQueue]
  -[MNTrace copyTraceToCrashReporter]
  -[MNTrace tracePath]
  -[MNTrace setBookmarks:]
  -[MNTrace createTempTraceForRecording]
  -[MNTrace startWritingTraceToPath:]
  -[MNTrace writeGroup]
  -[MNTrace copyToCrashReporter]
  -[MNTrace setCopyToCrashReporter:]
  -[MNTrace openTrace:outError:]
  -[MNTrace closeTrace]
  -[MNTrace startWritingTraceToFile:]
  -[MNTrace serializableBookmarks]
  -[MNTrace miscInfo]
  -[MNTrace originalVersion]
  -[MNTrace _handleOpenErrorWithPath:]
  -[MNTrace bookmarkImages]
  -[MNTrace setOriginalVersion:]
  -[MNTrace isRouteGenius]
  -[MNTrace setIsRouteGenius:]
  -[MNTrace setUsesCLMapCorrection:]
  -[MNTrace initialCourse]
  -[MNTrace setInitialCourse:]
  -[MNTrace etaUpdates]
  -[MNTrace setEtaUpdates:]
  -[MNTrace headingData]
  -[MNTrace setHeadingData:]
  -[MNTrace motionData]
  -[MNTrace setMotionData:]
  -[MNTrace vehicleHeadingData]
  -[MNTrace setVehicleHeadingData:]
  -[MNTrace vehicleSpeedData]
  -[MNTrace setVehicleSpeedData:]
  -[MNTrace startWaypointData]
  -[MNTrace setStartWaypointData:]
  -[MNTrace endWaypointData]
  -[MNTrace setEndWaypointData:]
  -[MNTrace routeSelections]
  -[MNTrace setRouteSelections:]
  -[MNTrace annotatedUserBehavior]
  -[MNTrace setAnnotatedUserBehavior:]
  -[MNTrace annotatedUserEnvironments]
  -[MNTrace setAnnotatedUserEnvironments:]
  -[MNTrace commuteDestinations]
  -[MNTrace setCommuteDestinations:]
  -[MNTrace commuteDirectionsRequests]
  -[MNTrace setCommuteDirectionsRequests:]
  -[MNTrace setMiscInfo:]
  -[MNTrace setBookmarkImages:]


MNTraceLocationRow : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position
 @property  double timestamp
 @property  MNLocation *location
 @property  NSError *error
 @property  MNLocationMatchInfo *matchInfo
 @property  long long locationEventType
 @property  unsigned long originalMatchType

  // instance methods
  -[MNTraceLocationRow .cxx_destruct]
  -[MNTraceLocationRow error]
  -[MNTraceLocationRow setError:]
  -[MNTraceLocationRow timestamp]
  -[MNTraceLocationRow position]
  -[MNTraceLocationRow location]
  -[MNTraceLocationRow setTimestamp:]
  -[MNTraceLocationRow matchInfo]
  -[MNTraceLocationRow setLocation:]
  -[MNTraceLocationRow setMatchInfo:]
  -[MNTraceLocationRow locationEventType]
  -[MNTraceLocationRow setLocationEventType:]
  -[MNTraceLocationRow originalMatchType]
  -[MNTraceLocationRow setOriginalMatchType:]


MNTraceDirectionsRow : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position
 @property  double requestTimestamp
 @property  double responseTimestamp
 @property  GEODirectionsRequest *request
 @property  GEODirectionsResponse *response
 @property  NSError *error
 @property  NSArray *waypoints

  // instance methods
  -[MNTraceDirectionsRow .cxx_destruct]
  -[MNTraceDirectionsRow error]
  -[MNTraceDirectionsRow setError:]
  -[MNTraceDirectionsRow position]
  -[MNTraceDirectionsRow setRequest:]
  -[MNTraceDirectionsRow request]
  -[MNTraceDirectionsRow response]
  -[MNTraceDirectionsRow setResponse:]
  -[MNTraceDirectionsRow waypoints]
  -[MNTraceDirectionsRow setWaypoints:]
  -[MNTraceDirectionsRow responseTimestamp]
  -[MNTraceDirectionsRow requestTimestamp]
  -[MNTraceDirectionsRow setRequestTimestamp:]
  -[MNTraceDirectionsRow setResponseTimestamp:]


MNTraceETAUpdateRow : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position
 @property  double requestTimestamp
 @property  double responseTimestamp
 @property  GEOETATrafficUpdateRequest *request
 @property  GEOETATrafficUpdateResponse *response
 @property  NSError *error

  // instance methods
  -[MNTraceETAUpdateRow .cxx_destruct]
  -[MNTraceETAUpdateRow error]
  -[MNTraceETAUpdateRow setError:]
  -[MNTraceETAUpdateRow position]
  -[MNTraceETAUpdateRow setRequest:]
  -[MNTraceETAUpdateRow request]
  -[MNTraceETAUpdateRow response]
  -[MNTraceETAUpdateRow setResponse:]
  -[MNTraceETAUpdateRow responseTimestamp]
  -[MNTraceETAUpdateRow requestTimestamp]
  -[MNTraceETAUpdateRow setRequestTimestamp:]
  -[MNTraceETAUpdateRow setResponseTimestamp:]


MNTraceHeadingDataRow : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position
 @property  double timestamp
 @property  double trueHeading
 @property  double magneticHeading
 @property  double headingAccuracy

  // instance methods
  -[MNTraceHeadingDataRow timestamp]
  -[MNTraceHeadingDataRow position]
  -[MNTraceHeadingDataRow setTimestamp:]
  -[MNTraceHeadingDataRow magneticHeading]
  -[MNTraceHeadingDataRow trueHeading]
  -[MNTraceHeadingDataRow headingAccuracy]
  -[MNTraceHeadingDataRow setHeadingAccuracy:]
  -[MNTraceHeadingDataRow setTrueHeading:]
  -[MNTraceHeadingDataRow setMagneticHeading:]


MNTraceMotionDataRow : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position
 @property  double timestamp
 @property  unsigned long motionType
 @property  unsigned long exitType
 @property  unsigned long confidence

  // instance methods
  -[MNTraceMotionDataRow confidence]
  -[MNTraceMotionDataRow timestamp]
  -[MNTraceMotionDataRow position]
  -[MNTraceMotionDataRow setTimestamp:]
  -[MNTraceMotionDataRow setConfidence:]
  -[MNTraceMotionDataRow exitType]
  -[MNTraceMotionDataRow motionType]
  -[MNTraceMotionDataRow setExitType:]
  -[MNTraceMotionDataRow setMotionType:]


MNTraceVehicleHeadingRow : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position
 @property  double timestamp
 @property  double vehicleHeading

  // instance methods
  -[MNTraceVehicleHeadingRow timestamp]
  -[MNTraceVehicleHeadingRow position]
  -[MNTraceVehicleHeadingRow setTimestamp:]
  -[MNTraceVehicleHeadingRow vehicleHeading]
  -[MNTraceVehicleHeadingRow setVehicleHeading:]


MNTraceVehicleSpeedRow : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position
 @property  double timestamp
 @property  double vehicleSpeed

  // instance methods
  -[MNTraceVehicleSpeedRow timestamp]
  -[MNTraceVehicleSpeedRow position]
  -[MNTraceVehicleSpeedRow setTimestamp:]
  -[MNTraceVehicleSpeedRow vehicleSpeed]
  -[MNTraceVehicleSpeedRow setVehicleSpeed:]


MNTraceRouteSelectionsRow : NSObject /usr/lib/libc++.1.dylib
 @property  double startTimestamp
 @property  double endTimestamp
 @property  NSData *routeID
 @property  unsigned long selectedRouteIndex

  // instance methods
  -[MNTraceRouteSelectionsRow .cxx_destruct]
  -[MNTraceRouteSelectionsRow setStartTimestamp:]
  -[MNTraceRouteSelectionsRow startTimestamp]
  -[MNTraceRouteSelectionsRow routeID]
  -[MNTraceRouteSelectionsRow setRouteID:]
  -[MNTraceRouteSelectionsRow endTimestamp]
  -[MNTraceRouteSelectionsRow selectedRouteIndex]
  -[MNTraceRouteSelectionsRow setSelectedRouteIndex:]
  -[MNTraceRouteSelectionsRow setEndTimestamp:]


MNTraceAnnotatedUserBehaviorRow : NSObject /usr/lib/libc++.1.dylib
 @property  double timestamp
 @property  long long event

  // instance methods
  -[MNTraceAnnotatedUserBehaviorRow timestamp]
  -[MNTraceAnnotatedUserBehaviorRow setTimestamp:]
  -[MNTraceAnnotatedUserBehaviorRow event]
  -[MNTraceAnnotatedUserBehaviorRow setEvent:]


MNTraceAnnotatedUserEnvironmentRow : NSObject /usr/lib/libc++.1.dylib
 @property  double startTimestamp
 @property  double endTimestamp
 @property  long long environmentType

  // instance methods
  -[MNTraceAnnotatedUserEnvironmentRow setStartTimestamp:]
  -[MNTraceAnnotatedUserEnvironmentRow startTimestamp]
  -[MNTraceAnnotatedUserEnvironmentRow endTimestamp]
  -[MNTraceAnnotatedUserEnvironmentRow setEndTimestamp:]
  -[MNTraceAnnotatedUserEnvironmentRow setEnvironmentType:]
  -[MNTraceAnnotatedUserEnvironmentRow environmentType]


MNTraceCommuteDestinationRow : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long destinationID
 @property  NSString *name
 @property  GEOComposedWaypoint *waypoint

  // instance methods
  -[MNTraceCommuteDestinationRow name]
  -[MNTraceCommuteDestinationRow .cxx_destruct]
  -[MNTraceCommuteDestinationRow setName:]
  -[MNTraceCommuteDestinationRow waypoint]
  -[MNTraceCommuteDestinationRow setWaypoint:]
  -[MNTraceCommuteDestinationRow destinationID]
  -[MNTraceCommuteDestinationRow setDestinationID:]


MNTraceCommuteDirectionsRequestRow : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long destinationID
 @property  double requestTimestamp
 @property  double responseTimestamp
 @property  GEODirectionsRequest *request
 @property  GEODirectionsResponse *response
 @property  NSError *responseError

  // instance methods
  -[MNTraceCommuteDirectionsRequestRow .cxx_destruct]
  -[MNTraceCommuteDirectionsRequestRow setRequest:]
  -[MNTraceCommuteDirectionsRequestRow request]
  -[MNTraceCommuteDirectionsRequestRow response]
  -[MNTraceCommuteDirectionsRequestRow setResponse:]
  -[MNTraceCommuteDirectionsRequestRow setResponseError:]
  -[MNTraceCommuteDirectionsRequestRow responseError]
  -[MNTraceCommuteDirectionsRequestRow destinationID]
  -[MNTraceCommuteDirectionsRequestRow setDestinationID:]
  -[MNTraceCommuteDirectionsRequestRow responseTimestamp]
  -[MNTraceCommuteDirectionsRequestRow requestTimestamp]
  -[MNTraceCommuteDirectionsRequestRow setRequestTimestamp:]
  -[MNTraceCommuteDirectionsRequestRow setResponseTimestamp:]


MNTraceMiscInfo : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *key
 @property  long long intValue
 @property  double doubleValue
 @property  NSString *stringValue

  // instance methods
  -[MNTraceMiscInfo doubleValue]
  -[MNTraceMiscInfo intValue]
  -[MNTraceMiscInfo key]
  -[MNTraceMiscInfo stringValue]
  -[MNTraceMiscInfo .cxx_destruct]
  -[MNTraceMiscInfo setKey:]
  -[MNTraceMiscInfo setStringValue:]
  -[MNTraceMiscInfo setDoubleValue:]
  -[MNTraceMiscInfo setIntValue:]


MNTraceEventRecorder : NSObject /usr/lib/libc++.1.dylib <MNNavigationSessionObserver>
 @property  NSArray *eventHistory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTraceEventRecorder .cxx_destruct]
  -[MNTraceEventRecorder navigationSessionDidStart:]
  -[MNTraceEventRecorder navigationSession:didUpdateMatchedLocation:]
  -[MNTraceEventRecorder navigationSessionWillReroute:]
  -[MNTraceEventRecorder navigationSession:didReroute:withLocation:withAlternateRoutes:]
  -[MNTraceEventRecorder navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNTraceEventRecorder navigationSession:didAnnounce:stage:]
  -[MNTraceEventRecorder navigationSession:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNTraceEventRecorder navigationSession:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNTraceEventRecorder navigationSessionHideSecondaryStep:]
  -[MNTraceEventRecorder navigationSessionBeginGuidanceUpdate:]
  -[MNTraceEventRecorder navigationSessionEndGuidanceUpdate:]
  -[MNTraceEventRecorder navigationSession:updateSignsWithInfo:]
  -[MNTraceEventRecorder navigationSession:showLaneDirections:]
  -[MNTraceEventRecorder navigationSession:hideLaneDirectionsForId:]
  -[MNTraceEventRecorder navigationSession:didAnnounceArrival:]
  -[MNTraceEventRecorder timeSinceStartOfRoute]
  -[MNTraceEventRecorder initWithTraceRecorder:]
  -[MNTraceEventRecorder eventHistory]


_MNJunctionViewPreloadEvent : NSObject /usr/lib/libc++.1.dylib
 @property  GEOComposedGuidanceEvent *junctionViewEvent
 @property  BOOL needsPreload

  // instance methods
  -[_MNJunctionViewPreloadEvent .cxx_destruct]
  -[_MNJunctionViewPreloadEvent junctionViewEvent]
  -[_MNJunctionViewPreloadEvent setJunctionViewEvent:]
  -[_MNJunctionViewPreloadEvent needsPreload]
  -[_MNJunctionViewPreloadEvent setNeedsPreload:]


MNJunctionViewImageLoader : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNJunctionViewImageLoader init]
  -[MNJunctionViewImageLoader .cxx_destruct]
  -[MNJunctionViewImageLoader setJunctionViewImageWidth:height:]
  -[MNJunctionViewImageLoader _stringForImageIDs:]
  -[MNJunctionViewImageLoader imagesForJunctionView:eventID:handler:]
  -[MNJunctionViewImageLoader _imagesForIDs:handler:]
  -[MNJunctionViewImageLoader _imagesForRequest:response:]
  -[MNJunctionViewImageLoader setJunctionViewEvents:]
  -[MNJunctionViewImageLoader updateForLocation:remainingDistanceOnRoute:]


MNTimeballCacheEntry : NSObject /usr/lib/libc++.1.dylib <MNJSONOutput>
 @property  MNRouteUpdate *routeUpdate
 @property  MNPlannedDestination *destination
 @property  NSDate *lastUpdate
 @property  NSDate *nextUpdate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTimeballCacheEntry .cxx_destruct]
  -[MNTimeballCacheEntry destination]
  -[MNTimeballCacheEntry setDestination:]
  -[MNTimeballCacheEntry lastUpdate]
  -[MNTimeballCacheEntry jsonDictionary]
  -[MNTimeballCacheEntry routeUpdate]
  -[MNTimeballCacheEntry setRouteUpdate:]
  -[MNTimeballCacheEntry setLastUpdate:]
  -[MNTimeballCacheEntry nextUpdate]
  -[MNTimeballCacheEntry setNextUpdate:]


MNTimeballCache : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNTimeballCache dealloc]
  -[MNTimeballCache .cxx_destruct]
  -[MNTimeballCache initWithDBFilePath:]
  -[MNTimeballCache clearCache:]
  -[MNTimeballCache setRouteUpdate:forDestination:completionBlock:]
  -[MNTimeballCache getEntriesUpdatedAfter:entryBlock:completionBlock:]
  -[MNTimeballCache getEntryForDestination:completionBlock:]
  -[MNTimeballCache setNextRefreshDate:forDestination:completionBlock:]
  -[MNTimeballCache getEntriesScheduledForRefreshAfter:entryBlock:completionBlock:]
  -[MNTimeballCache _setupDBWithDrop:]
  -[MNTimeballCache _errorBlockWithCompletionBlock:]
  -[MNTimeballCache _handleResult:forStatement:error:completionBlock:]
  -[MNTimeballCache deleteRouteUpdateForDestination:completionBlock:]
  -[MNTimeballCache pruneCache:]


MNRouteProximitySensor : NSObject /usr/lib/libc++.1.dylib
 @property  GEOLocation *location
 @property  double proximityThreshold
 @property  GEOComposedRoute *route
 @property  GEOLocation *closestPointOnRoute
 @property  GEOComposedRouteStep *closestStepOnRoute
 @property  double courseOnRoute
 @property  double distanceFromOrigin
 @property  double distanceFromRoute
 @property  double distanceFromDestination
 @property  double remainingTimeOnRoute
 @property  unsigned long proximity

  // instance methods
  -[MNRouteProximitySensor init]
  -[MNRouteProximitySensor .cxx_destruct]
  -[MNRouteProximitySensor location]
  -[MNRouteProximitySensor proximity]
  -[MNRouteProximitySensor distanceFromDestination]
  -[MNRouteProximitySensor route]
  -[MNRouteProximitySensor initWithRoute:]
  -[MNRouteProximitySensor distanceFromRoute]
  -[MNRouteProximitySensor updateForLocation:]
  -[MNRouteProximitySensor distanceFromOrigin]
  -[MNRouteProximitySensor _updateRouteMatch]
  -[MNRouteProximitySensor _updateProximity]
  -[MNRouteProximitySensor closestPointOnRoute]
  -[MNRouteProximitySensor closestStepOnRoute]
  -[MNRouteProximitySensor courseOnRoute]
  -[MNRouteProximitySensor remainingTimeOnRoute]
  -[MNRouteProximitySensor proximityThreshold]
  -[MNRouteProximitySensor setProximityThreshold:]


MNTrafficIncidentAlertUpdater : NSObject /usr/lib/libc++.1.dylib
 @property  <MNTrafficIncidentAlertUpdaterDelegate> *delegate

  // instance methods
  -[MNTrafficIncidentAlertUpdater dealloc]
  -[MNTrafficIncidentAlertUpdater delegate]
  -[MNTrafficIncidentAlertUpdater setDelegate:]
  -[MNTrafficIncidentAlertUpdater .cxx_destruct]
  -[MNTrafficIncidentAlertUpdater updateForLocation:]
  -[MNTrafficIncidentAlertUpdater clearAlerts]
  -[MNTrafficIncidentAlertUpdater updateForReroute:]
  -[MNTrafficIncidentAlertUpdater updateRerouteProposalStatusForRequest:]
  -[MNTrafficIncidentAlertUpdater updateForAlertFromResponse:]
  -[MNTrafficIncidentAlertUpdater _activateAlertForLocation:]
  -[MNTrafficIncidentAlertUpdater _alertRetryTimerFired:]
  -[MNTrafficIncidentAlertUpdater _removeActiveAlert]
  -[MNTrafficIncidentAlertUpdater _updateAlertDistanceAndETA:]


MNCompanionNavigationAdapter : NSObject /usr/lib/libc++.1.dylib <MNNavigationServiceObserver, MNNavigationSessionObserver>
 @property  <MNCompanionNavigationDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCompanionNavigationAdapter init]
  -[MNCompanionNavigationAdapter dealloc]
  -[MNCompanionNavigationAdapter invalidate]
  -[MNCompanionNavigationAdapter delegate]
  -[MNCompanionNavigationAdapter setDelegate:]
  -[MNCompanionNavigationAdapter .cxx_destruct]
  -[MNCompanionNavigationAdapter _reset]
  -[MNCompanionNavigationAdapter initWithDelegate:]
  -[MNCompanionNavigationAdapter _isInvalidated]
  -[MNCompanionNavigationAdapter setIsNavigatingInLowGuidance:]
  -[MNCompanionNavigationAdapter setIsConnectedToCarplay:]
  -[MNCompanionNavigationAdapter setVoiceVolume:]
  -[MNCompanionNavigationAdapter _setRouteMatch:]
  -[MNCompanionNavigationAdapter navigationService:didChangeFromState:toState:]
  -[MNCompanionNavigationAdapter navigationServiceDidSynchronize:]
  -[MNCompanionNavigationAdapter navigationService:didChangeNavigationState:]
  -[MNCompanionNavigationAdapter navigationService:didUpdateMatchedLocation:]
  -[MNCompanionNavigationAdapter navigationService:didUpdateDistanceUntilManeuver:timeUntilManeuver:forStepIndex:]
  -[MNCompanionNavigationAdapter navigationService:willAnnounce:inSeconds:]
  -[MNCompanionNavigationAdapter navigationService:didEnableGuidancePrompts:]
  -[MNCompanionNavigationAdapter navigationService:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNCompanionNavigationAdapter navigationService:displayManeuverAlertForAnnouncementStage:]
  -[MNCompanionNavigationAdapter navigationService:didUpdateRemainingTime:remainingDistance:]
  -[MNCompanionNavigationAdapter navigationServiceWillReroute:]
  -[MNCompanionNavigationAdapter navigationService:didReroute:traffic:]
  -[MNCompanionNavigationAdapter navigationServiceDidCancelReroute:]
  -[MNCompanionNavigationAdapter navigationService:triggerHaptics:]
  -[MNCompanionNavigationAdapter navigationService:didReceiveRealtimeUpdates:]
  -[MNCompanionNavigationAdapter navigationSession:didChangeNavigationState:]
  -[MNCompanionNavigationAdapter navigationSession:didUpdateMatchedLocation:]
  -[MNCompanionNavigationAdapter navigationSession:matchedToStepIndex:legIndex:]
  -[MNCompanionNavigationAdapter navigationSession:didUpdateRemainingTime:remainingDistance:]
  -[MNCompanionNavigationAdapter navigationSessionWillReroute:]
  -[MNCompanionNavigationAdapter navigationSessionDidCancelReroute:]
  -[MNCompanionNavigationAdapter navigationSession:didReroute:withLocation:withAlternateRoutes:]
  -[MNCompanionNavigationAdapter navigationSession:didUpdateDestination:]
  -[MNCompanionNavigationAdapter navigationSession:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNCompanionNavigationAdapter navigationSession:willAnnounce:inSeconds:]
  -[MNCompanionNavigationAdapter navigationSession:triggerHaptics:]
  -[MNCompanionNavigationAdapter navigationSession:displayManeuverAlertForAnnouncementStage:]
  -[MNCompanionNavigationAdapter navigationSession:didEnableGuidancePrompts:]
  -[MNCompanionNavigationAdapter initWithNavigationSession:]
  -[MNCompanionNavigationAdapter _setRoute:traffic:isTrace:]
  -[MNCompanionNavigationAdapter _cancelScheduledRouteStatus]
  -[MNCompanionNavigationAdapter _cancelScheduledRouteUpdates]
  -[MNCompanionNavigationAdapter _scheduleCoalescedRouteStatusUpdate]
  -[MNCompanionNavigationAdapter _updateCompanionRouteStatus]
  -[MNCompanionNavigationAdapter _scheduleCoalescedRouteUpdates]
  -[MNCompanionNavigationAdapter _sendRouteStatus]
  -[MNCompanionNavigationAdapter _sendRouteUpdates]
  -[MNCompanionNavigationAdapter _sendRouteDetailsAndStatus]
  -[MNCompanionNavigationAdapter _markCurrentHapticsAsTriggered]
  -[MNCompanionNavigationAdapter _setNavigationState:]
  -[MNCompanionNavigationAdapter _setLastLocation:]
  -[MNCompanionNavigationAdapter _setDisplayedStepIndex:]
  -[MNCompanionNavigationAdapter _setPositionFromDestination:]
  -[MNCompanionNavigationAdapter _setDestinationName:]
  -[MNCompanionNavigationAdapter _setPositionFromManeuver:]
  -[MNCompanionNavigationAdapter _setNextAnnouncementStage:timeUntilNextAnnouncement:]
  -[MNCompanionNavigationAdapter _triggerHaptics:]
  -[MNCompanionNavigationAdapter _setAnnouncementStage:]
  -[MNCompanionNavigationAdapter _setGuidancePromptsEnabled:]
  -[MNCompanionNavigationAdapter _handleNavigationServiceStopped]
  -[MNCompanionNavigationAdapter _reloadRouteFromNavigationService:]
  -[MNCompanionNavigationAdapter _setRealtimeUpdates:]
  -[MNCompanionNavigationAdapter _setLocationUnreliable:]


MNCompanionNavigationXPCConnection : NSObject /usr/lib/libc++.1.dylib <MNCompanionNavigationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCompanionNavigationXPCConnection init]
  -[MNCompanionNavigationXPCConnection dealloc]
  -[MNCompanionNavigationXPCConnection .cxx_destruct]
  -[MNCompanionNavigationXPCConnection _closeConnection]
  -[MNCompanionNavigationXPCConnection _stop]
  -[MNCompanionNavigationXPCConnection _openConnection]
  -[MNCompanionNavigationXPCConnection updateNavigationRouteDetails:routeStatus:]
  -[MNCompanionNavigationXPCConnection updateNavigationRouteStatus:]
  -[MNCompanionNavigationXPCConnection updateNavigationRouteWithUpdate:]
  -[MNCompanionNavigationXPCConnection _connectionWasInterrupted]
  -[MNCompanionNavigationXPCConnection _connectionWasInvalidated]
  -[MNCompanionNavigationXPCConnection _resendRouteDetailsAndStatus]


MNTimeballLocationRequest : NSObject /usr/lib/libc++.1.dylib
 @property  double desiredAccuracy
 @property  unsigned long attemptCount
 @property  unsigned long maxAttempts
 @property  NSDate *requestDate
 @property  double timeoutInterval
 @property  @? completionBlock

  // class methods
  +[MNTimeballLocationRequest requestWithAccuracy:maxAttempts:timeoutInterval:completionBlock:]

  // instance methods
  -[MNTimeballLocationRequest init]
  -[MNTimeballLocationRequest .cxx_destruct]
  -[MNTimeballLocationRequest completionBlock]
  -[MNTimeballLocationRequest setCompletionBlock:]
  -[MNTimeballLocationRequest setTimeoutInterval:]
  -[MNTimeballLocationRequest desiredAccuracy]
  -[MNTimeballLocationRequest setDesiredAccuracy:]
  -[MNTimeballLocationRequest timeoutInterval]
  -[MNTimeballLocationRequest attemptCount]
  -[MNTimeballLocationRequest setAttemptCount:]
  -[MNTimeballLocationRequest setMaxAttempts:]
  -[MNTimeballLocationRequest maxAttempts]
  -[MNTimeballLocationRequest requestDate]
  -[MNTimeballLocationRequest setRequestDate:]


MNTimeballLocationManager : NSObject /usr/lib/libc++.1.dylib <CLLocationManagerDelegate>
 @property  CLLocation *lastLocation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimeballLocationManager setLocationProviderClass:]

  // instance methods
  -[MNTimeballLocationManager init]
  -[MNTimeballLocationManager dealloc]
  -[MNTimeballLocationManager .cxx_destruct]
  -[MNTimeballLocationManager locationManager:didUpdateLocations:]
  -[MNTimeballLocationManager locationManager:didFailWithError:]
  -[MNTimeballLocationManager lastLocation]
  -[MNTimeballLocationManager locationProvider]
  -[MNTimeballLocationManager _processPendingRequests]
  -[MNTimeballLocationManager _addRequest:]
  -[MNTimeballLocationManager getLocationWithAccuracy:maxAttempts:timeoutInterval:completion:]
  -[MNTimeballLocationManager _setupLocationProvider]
  -[MNTimeballLocationManager _requestTimedOut:]
  -[MNTimeballLocationManager _removeRequest:]
  -[MNTimeballLocationManager _processLocation:]
  -[MNTimeballLocationManager _processError:]


MNRouteRefreshPolicyRulesForeground : NSObject /usr/lib/libc++.1.dylib <MNRouteRefreshPolicyRules>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long policy
 @property  BOOL canWakeClientForUpdates
 @property  BOOL canWakeDeviceForUpdates

  // instance methods
  -[MNRouteRefreshPolicyRulesForeground init]
  -[MNRouteRefreshPolicyRulesForeground policy]
  -[MNRouteRefreshPolicyRulesForeground canMakeNetworkRequestsForDestination:atDate:]
  -[MNRouteRefreshPolicyRulesForeground timeIntervalForDestinationRefresh:lastUpdate:]
  -[MNRouteRefreshPolicyRulesForeground maxTimeIntervalFromNowForDestinationRefresh:fromDate:]
  -[MNRouteRefreshPolicyRulesForeground canWakeClientForUpdates]
  -[MNRouteRefreshPolicyRulesForeground canWakeDeviceForUpdates]


MNDirectionsRequestManager : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNDirectionsRequestManager init]
  -[MNDirectionsRequestManager .cxx_destruct]
  -[MNDirectionsRequestManager cancelDirectionsRequestWithIdentifier:]
  -[MNDirectionsRequestManager _requestDirectionsFromTraceWithPath:feedback:auditToken:finishedHandler:]
  -[MNDirectionsRequestManager _requestServerDirections:withIdentifier:auditToken:finishedHandler:]
  -[MNDirectionsRequestManager requestDirections:withIdentifier:auditToken:finishedHandler:]


MNSettingsManager : NSObject /usr/lib/libc++.1.dylib
 @property  MNSettings *settings

  // class methods
  +[MNSettingsManager sharedInstance]

  // instance methods
  -[MNSettingsManager init]
  -[MNSettingsManager .cxx_destruct]
  -[MNSettingsManager addObserver:]
  -[MNSettingsManager removeObserver:]
  -[MNSettingsManager settings]
  -[MNSettingsManager updateForSettings:]
  -[MNSettingsManager setVolumeFromDefaults]


MNSignInstructionContents : MNListInstructionContents <MNInstructionContents>
 @property  NSArray *mergeFormats
 @property  NSArray *continueFormats
 @property  NSArray *maneuverFormats
 @property  long long context
 @property  BOOL suppressNames
 @property  NSString *roadName
 @property  BOOL hasServerContent
 @property  BOOL suppressFallback

  // class methods
  +[MNSignInstructionContents contentsWithStep:transportType:destination:]

  // instance methods
  -[MNSignInstructionContents .cxx_destruct]
  -[MNSignInstructionContents context]
  -[MNSignInstructionContents _populateFromStep:]
  -[MNSignInstructionContents setMergeFormats:]
  -[MNSignInstructionContents setContinueFormats:]
  -[MNSignInstructionContents setManeuverFormats:]
  -[MNSignInstructionContents maneuverFormats]
  -[MNSignInstructionContents _instructionsForFormats:]
  -[MNSignInstructionContents mergeFormats]
  -[MNSignInstructionContents continueFormats]
  -[MNSignInstructionContents instructionWithShorterAlternatives]
  -[MNSignInstructionContents instructionForStage:distance:]
  -[MNSignInstructionContents hasServerContent]


MNNavigationAudioSession : NSObject /usr/lib/libc++.1.dylib <MNAudioSession>
 @property  unsigned long sessionType
 @property  NSString *language
 @property  unsigned long appContext
 @property  BOOL speechEnabled
 @property  BOOL muteSpeechOverride
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  id delegate
 @property  unsigned long voiceGuidanceLevel

  // class methods
  +[MNNavigationAudioSession sessionOfType:language:]

  // instance methods
  -[MNNavigationAudioSession init]
  -[MNNavigationAudioSession dealloc]
  -[MNNavigationAudioSession delegate]
  -[MNNavigationAudioSession setDelegate:]
  -[MNNavigationAudioSession .cxx_destruct]
  -[MNNavigationAudioSession stop]
  -[MNNavigationAudioSession endSession]
  -[MNNavigationAudioSession language]
  -[MNNavigationAudioSession muteSpeechOverride]
  -[MNNavigationAudioSession setMuteSpeechOverride:]
  -[MNNavigationAudioSession speechEnabled]
  -[MNNavigationAudioSession setSpeechEnabled:]
  -[MNNavigationAudioSession sessionType]
  -[MNNavigationAudioSession setSessionType:]
  -[MNNavigationAudioSession isSpeaking]
  -[MNNavigationAudioSession appContext]
  -[MNNavigationAudioSession setAppContext:]
  -[MNNavigationAudioSession beginSession]
  -[MNNavigationAudioSession setVoiceGuidanceLevel:]
  -[MNNavigationAudioSession speak:shortPromptType:ignorePromptStyle:minimumRequiredLevel:completionBlock:]
  -[MNNavigationAudioSession prepareToAnnounce]
  -[MNNavigationAudioSession speak:shortPromptType:ignorePromptStyle:completionBlock:]
  -[MNNavigationAudioSession vibrateForPrompt:]
  -[MNNavigationAudioSession clearAllAnnouncements]
  -[MNNavigationAudioSession voiceGuidanceLevel]
  -[MNNavigationAudioSession _deviceSettingsAllowSpeech]
  -[MNNavigationAudioSession _isVoiceGuidanceEnabled]
  -[MNNavigationAudioSession _beepIfNecessaryWithShortPromptType:textToSpeak:]
  -[MNNavigationAudioSession _speak:fallbackPrompt:completionBlock:]


MNSuggestionsManager : NSObject /usr/lib/libc++.1.dylib <MNLocationManagerObserver>
 @property  NSMutableDictionary *suggestionsStorage
 @property  NSHashTable *observers
 @property  BOOL changingState
 @property  unsigned long state
 @property  NSArray *allSuggestions
 @property  BOOL locationsAvailable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSuggestionsManager init]
  -[MNSuggestionsManager dealloc]
  -[MNSuggestionsManager .cxx_destruct]
  -[MNSuggestionsManager addObserver:]
  -[MNSuggestionsManager removeObserver:]
  -[MNSuggestionsManager state]
  -[MNSuggestionsManager setState:]
  -[MNSuggestionsManager locationManagerDidResumeLocationUpdates:]
  -[MNSuggestionsManager locationManagerDidPauseLocationUpdates:]
  -[MNSuggestionsManager setObservers:]
  -[MNSuggestionsManager observers]
  -[MNSuggestionsManager locationManagerUpdatedLocation:]
  -[MNSuggestionsManager locationManagerFailedToUpdateLocation:withError:]
  -[MNSuggestionsManager locationManagerDidReset:]
  -[MNSuggestionsManager locationManagerShouldPauseLocationUpdates:]
  -[MNSuggestionsManager locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNSuggestionsManager locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNSuggestionsManager addSuggestions:]
  -[MNSuggestionsManager _startListenForDebugTestNotifications]
  -[MNSuggestionsManager _stopListenForDebugTestNotifications]
  -[MNSuggestionsManager _verifyHaveObservers]
  -[MNSuggestionsManager changingState]
  -[MNSuggestionsManager suggestionsStorage]
  -[MNSuggestionsManager _notifyObserversDidAddSuggestion:]
  -[MNSuggestionsManager _notifyObserversDidUpdateSuggestions]
  -[MNSuggestionsManager setSuggestionsStorage:]
  -[MNSuggestionsManager setChangingState:]
  -[MNSuggestionsManager setLocationsAvailable:]
  -[MNSuggestionsManager _updateLocationsAvailable]
  -[MNSuggestionsManager refreshSuggestions]
  -[MNSuggestionsManager allSuggestions]
  -[MNSuggestionsManager _addFakeSuggestion:]
  -[MNSuggestionsManager locationsAvailable]


_MNRouteHintSegment : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long roadSegmentID
 @property  {?=dd} startCoordinate
 @property  {?=dd} endCoordinate

  // instance methods
  -[_MNRouteHintSegment setStartCoordinate:]
  -[_MNRouteHintSegment setEndCoordinate:]
  -[_MNRouteHintSegment endCoordinate]
  -[_MNRouteHintSegment startCoordinate]
  -[_MNRouteHintSegment roadSegmentID]
  -[_MNRouteHintSegment setRoadSegmentID:]


MNTurnByTurnLocationTracker : MNLocationTracker <MNArrivalUpdaterDelegate>
 @property  NSData *serverSessionState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTurnByTurnLocationTracker dealloc]
  -[MNTurnByTurnLocationTracker .cxx_destruct]
  -[MNTurnByTurnLocationTracker stopTracking]
  -[MNTurnByTurnLocationTracker updateLocation:]
  -[MNTurnByTurnLocationTracker _matchedLocationForLocation:]
  -[MNTurnByTurnLocationTracker initWithNavigationSession:]
  -[MNTurnByTurnLocationTracker isRerouting]
  -[MNTurnByTurnLocationTracker startTracking]
  -[MNTurnByTurnLocationTracker updateDestination:finishedHandler:]
  -[MNTurnByTurnLocationTracker reroute:reason:]
  -[MNTurnByTurnLocationTracker _setIsNavigatingInLowGuidance:]
  -[MNTurnByTurnLocationTracker traceJumpedInTime]
  -[MNTurnByTurnLocationTracker forceOnRoute:atLocation:]
  -[MNTurnByTurnLocationTracker _updateForArrival]
  -[MNTurnByTurnLocationTracker serverSessionState]
  -[MNTurnByTurnLocationTracker setServerSessionState:]
  -[MNTurnByTurnLocationTracker _newMapMatcherForRoute:]
  -[MNTurnByTurnLocationTracker _overrideLocationForLocation:]
  -[MNTurnByTurnLocationTracker _updateForLocation:]
  -[MNTurnByTurnLocationTracker _updateForReroute:rerouteReason:request:response:]
  -[MNTurnByTurnLocationTracker _detectedMotionForLocation:]
  -[MNTurnByTurnLocationTracker _allowSwitchToTransportType:forLocation:]
  -[MNTurnByTurnLocationTracker _alternateRouteForOffRouteLocation:]
  -[MNTurnByTurnLocationTracker _matchedLocationForMatchResult:originalLocation:]
  -[MNTurnByTurnLocationTracker arrivalUpdaterDidArrive:]
  -[MNTurnByTurnLocationTracker arrivalUpdaterDidEnterPreArrivalState:]
  -[MNTurnByTurnLocationTracker arrivalUpdaterDidTimeoutInArrivalRegion:]
  -[MNTurnByTurnLocationTracker _reroute:rerouteReason:request:response:]
  -[MNTurnByTurnLocationTracker _requestDirectionsForLocation:destination:transportType:handler:]
  -[MNTurnByTurnLocationTracker _allowRerouteForLocation:outError:]
  -[MNTurnByTurnLocationTracker _isRoadFeatureInOppositeDirection:ofCoordinate:course:]
  -[MNTurnByTurnLocationTracker _shouldAdvanceGuidanceToRouteMatch:]
  -[MNTurnByTurnLocationTracker _isCameraTestMode]
  -[MNTurnByTurnLocationTracker _failedToRecalculateRouteWithError:]
  -[MNTurnByTurnLocationTracker _rerouteTicketForLocation:transportType:stepIndex:]
  -[MNTurnByTurnLocationTracker _ticketForNewDestination:fromLocation:transportType:]
  -[MNTurnByTurnLocationTracker _submitRerouteTicketWithHandler:]
  -[MNTurnByTurnLocationTracker _handleOffRouteForLocation:]
  -[MNTurnByTurnLocationTracker _retryLastRouteRecalculation]
  -[MNTurnByTurnLocationTracker _recalculationRetryTimerFired:]
  -[MNTurnByTurnLocationTracker _sendRouteHintForLocation:]
  -[MNTurnByTurnLocationTracker _updateStateForLocation:]
  -[MNTurnByTurnLocationTracker _updateSwitchTransportTypeForLocation:]
  -[MNTurnByTurnLocationTracker initForTestingWithRoute:]


MNTracePlayerScheduler : NSObject /usr/lib/libc++.1.dylib
 @property  <MNTracePlayerSchedulerDelegate> *delegate
 @property  double speedMultiplier
 @property  double position

  // instance methods
  -[MNTracePlayerScheduler init]
  -[MNTracePlayerScheduler dealloc]
  -[MNTracePlayerScheduler delegate]
  -[MNTracePlayerScheduler setDelegate:]
  -[MNTracePlayerScheduler .cxx_destruct]
  -[MNTracePlayerScheduler pause]
  -[MNTracePlayerScheduler resume]
  -[MNTracePlayerScheduler _update]
  -[MNTracePlayerScheduler position]
  -[MNTracePlayerScheduler setPosition:]
  -[MNTracePlayerScheduler setSpeedMultiplier:]
  -[MNTracePlayerScheduler speedMultiplier]
  -[MNTracePlayerScheduler _timerUpdated:]
  -[MNTracePlayerScheduler addTimelineStream:]
  -[MNTracePlayerScheduler removeTimelineStream:]
  -[MNTracePlayerScheduler removeAllTimelineStreams]


MNCommuteDestination : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  GEOComposedRoute *nonRecommendedRoute
 @property  MNObserverHashTable *observers
 @property  BOOL invalid
 @property  MNCommuteDestinationSuggestion *suggestion
 @property  NSString *uniqueIdentifier
 @property  GEOComposedWaypoint *waypoint
 @property  NSString *name
 @property  GEOComposedRoute *route
 @property  GEOComposedRouteTraffic *traffic
 @property  GEODirectionsRequest *directionsRequest
 @property  MNLocation *lastMatchedLocation
 @property  BOOL canGetETARoute
 @property  GEOETARoute *etaRoute
 @property  GEOETATrafficUpdateResponse *etaResponse
 @property  BOOL canCalculateETA
 @property  double remainingTime
 @property  double remainingDistance
 @property  BOOL rerouting
 @property  MNLocation *lastLocation
 @property  double geodesicDistance
 @property  long long score
 @property  NSDictionary *scores
 @property  NSString *shortDescription

  // class methods
  +[MNCommuteDestination supportsSecureCoding]

  // instance methods
  -[MNCommuteDestination init]
  -[MNCommuteDestination isEqual:]
  -[MNCommuteDestination name]
  -[MNCommuteDestination copyWithZone:]
  -[MNCommuteDestination encodeWithCoder:]
  -[MNCommuteDestination initWithCoder:]
  -[MNCommuteDestination .cxx_destruct]
  -[MNCommuteDestination addObserver:]
  -[MNCommuteDestination removeObserver:]
  -[MNCommuteDestination uniqueIdentifier]
  -[MNCommuteDestination score]
  -[MNCommuteDestination setScore:]
  -[MNCommuteDestination shortDescription]
  -[MNCommuteDestination invalid]
  -[MNCommuteDestination setObservers:]
  -[MNCommuteDestination observers]
  -[MNCommuteDestination setRoute:]
  -[MNCommuteDestination remainingDistance]
  -[MNCommuteDestination setRemainingDistance:]
  -[MNCommuteDestination remainingTime]
  -[MNCommuteDestination setRemainingTime:]
  -[MNCommuteDestination route]
  -[MNCommuteDestination setLastLocation:]
  -[MNCommuteDestination etaResponse]
  -[MNCommuteDestination setEtaResponse:]
  -[MNCommuteDestination lastLocation]
  -[MNCommuteDestination waypoint]
  -[MNCommuteDestination directionsRequest]
  -[MNCommuteDestination setSuggestion:]
  -[MNCommuteDestination setInvalid:]
  -[MNCommuteDestination suggestion]
  -[MNCommuteDestination traffic]
  -[MNCommuteDestination scores]
  -[MNCommuteDestination setScores:]
  -[MNCommuteDestination lastMatchedLocation]
  -[MNCommuteDestination setEtaRoute:]
  -[MNCommuteDestination etaRoute]
  -[MNCommuteDestination setDirectionsRequest:]
  -[MNCommuteDestination setTraffic:]
  -[MNCommuteDestination geodesicDistance]
  -[MNCommuteDestination setLastMatchedLocation:]
  -[MNCommuteDestination rerouting]
  -[MNCommuteDestination setRerouting:]
  -[MNCommuteDestination nonRecommendedRoute]
  -[MNCommuteDestination setNonRecommendedRoute:]
  -[MNCommuteDestination canGetETARoute]
  -[MNCommuteDestination canCalculateETA]
  -[MNCommuteDestination updateFrom:]


_MNMapPointsArray : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long count
 @property  ^{?=dd} mapPoints
 @property  ^{Matrix<double points

  // instance methods
  -[_MNMapPointsArray dealloc]
  -[_MNMapPointsArray initWithCapacity:]
  -[_MNMapPointsArray count]
  -[_MNMapPointsArray points]
  -[_MNMapPointsArray mapPoints]


_MNMapPointWithIndex : NSObject /usr/lib/libc++.1.dylib
 @property  {Matrix<double point
 @property  unsigned long index
 @property  BOOL isStartOfSegment
 @property  BOOL isPolylineA
 @property  BOOL isFlipped
 @property  {LineSegment<double segment

  // instance methods
  -[_MNMapPointWithIndex index]
  -[_MNMapPointWithIndex .cxx_construct]
  -[_MNMapPointWithIndex isFlipped]
  -[_MNMapPointWithIndex point]
  -[_MNMapPointWithIndex setPoint:]
  -[_MNMapPointWithIndex setIndex:]
  -[_MNMapPointWithIndex setSegment:]
  -[_MNMapPointWithIndex segment]
  -[_MNMapPointWithIndex setIsFlipped:]
  -[_MNMapPointWithIndex isStartOfSegment]
  -[_MNMapPointWithIndex setIsStartOfSegment:]
  -[_MNMapPointWithIndex isPolylineA]
  -[_MNMapPointWithIndex setIsPolylineA:]


MNRouteCoordinateWithType : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long significanceType
 @property  {PolylineCoordinate=If} routeCoordinate

  // class methods
  +[MNRouteCoordinateWithType divergenceCoordinate:]
  +[MNRouteCoordinateWithType convergenceCoordinate:]

  // instance methods
  -[MNRouteCoordinateWithType .cxx_construct]
  -[MNRouteCoordinateWithType routeCoordinate]
  -[MNRouteCoordinateWithType setRouteCoordinate:]
  -[MNRouteCoordinateWithType significanceType]
  -[MNRouteCoordinateWithType setSignificanceType:]


MNNavigationTraceInfo : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *pedestrianTracePath
 @property  double pedestrianTraceStartRelativeTimestamp

  // instance methods
  -[MNNavigationTraceInfo .cxx_destruct]
  -[MNNavigationTraceInfo setPedestrianTracePath:]
  -[MNNavigationTraceInfo setPedestrianTraceStartRelativeTimestamp:]
  -[MNNavigationTraceInfo pedestrianTracePath]
  -[MNNavigationTraceInfo pedestrianTraceStartRelativeTimestamp]


MNCommuteDestinationUpdater : NSObject /usr/lib/libc++.1.dylib <MNLocationTrackerDelegate, MNCommuteDestinationScoreObserver>
 @property  NSDictionary *scores
 @property  MNCommuteDestinationGeodesicDistanceScore *geodesicDistanceScore
 @property  MNCommuteDestinationMapsSuggestionsScore *mapsSuggestionsScore
 @property  MNCommuteDestinationOffRouteScore *offRouteScore
 @property  MNCommuteDestinationStartEndTimeScore *startEndTimeScore
 @property  MNLocation *lastLocation
 @property  <MNCommuteDestinationUpdaterDelegate> *delegate
 @property  MNCommuteDestination *commuteDestination
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  unsigned long suggestionID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNCommuteDestinationUpdater sessionStartDate]
  +[MNCommuteDestinationUpdater scoreClasses]
  +[MNCommuteDestinationUpdater setSessionStartDate:]

  // instance methods
  -[MNCommuteDestinationUpdater dealloc]
  -[MNCommuteDestinationUpdater delegate]
  -[MNCommuteDestinationUpdater setDelegate:]
  -[MNCommuteDestinationUpdater .cxx_destruct]
  -[MNCommuteDestinationUpdater stop]
  -[MNCommuteDestinationUpdater start]
  -[MNCommuteDestinationUpdater startDate]
  -[MNCommuteDestinationUpdater endDate]
  -[MNCommuteDestinationUpdater route]
  -[MNCommuteDestinationUpdater setLastLocation:]
  -[MNCommuteDestinationUpdater lastLocation]
  -[MNCommuteDestinationUpdater updateForLocation:]
  -[MNCommuteDestinationUpdater updateETA]
  -[MNCommuteDestinationUpdater scores]
  -[MNCommuteDestinationUpdater locationTrackerDidArrive:]
  -[MNCommuteDestinationUpdater locationTracker:didUpdateMatchedLocation:]
  -[MNCommuteDestinationUpdater locationTracker:didUpdateETAForRoute:]
  -[MNCommuteDestinationUpdater locationTrackerWillReroute:]
  -[MNCommuteDestinationUpdater locationTrackerDidCancelReroute:]
  -[MNCommuteDestinationUpdater locationTracker:didReroute:newAlternateRoutes:rerouteReason:request:response:]
  -[MNCommuteDestinationUpdater locationTracker:didFailRerouteWithError:]
  -[MNCommuteDestinationUpdater initWithSuggestion:traceManager:]
  -[MNCommuteDestinationUpdater updateComparisonDestination:ofType:]
  -[MNCommuteDestinationUpdater _generateScoreObjects]
  -[MNCommuteDestinationUpdater _updateDestination]
  -[MNCommuteDestinationUpdater suggestionID]
  -[MNCommuteDestinationUpdater commuteDestination]
  -[MNCommuteDestinationUpdater updateLocationHistory:]
  -[MNCommuteDestinationUpdater commuteScoreUpdaterDidUpdate:]
  -[MNCommuteDestinationUpdater geodesicDistanceScore]
  -[MNCommuteDestinationUpdater offRouteScore]
  -[MNCommuteDestinationUpdater mapsSuggestionsScore]
  -[MNCommuteDestinationUpdater startEndTimeScore]
  -[MNCommuteDestinationUpdater setSuggestionID:]


MNFilePaths : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNFilePaths navTempDirectoryPath]
  +[MNFilePaths routeHandleExtension]
  +[MNFilePaths createFolderIfNotPresent:error:]
  +[MNFilePaths navTracesDirectoryPath]
  +[MNFilePaths navTraceExtension]
  +[MNFilePaths _homeDirectoryPath]
  +[MNFilePaths _cachesDirectoryPath]
  +[MNFilePaths navdCacheDirectoryPath]
  +[MNFilePaths timeballDatabasePath]


MNXPCTransactionManager : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNXPCTransactionManager sharedInstance]

  // instance methods
  -[MNXPCTransactionManager .cxx_destruct]
  -[MNXPCTransactionManager addHighMemoryThresholdRequest:]
  -[MNXPCTransactionManager removeHighMemoryThresholdRequest:afterDelay:]


MNTimepoint : NSObject /usr/lib/libc++.1.dylib <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  long long type
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimepoint supportsSecureCoding]
  +[MNTimepoint leaveNow]
  +[MNTimepoint leaveBy:]
  +[MNTimepoint arriveBy:]

  // instance methods
  -[MNTimepoint isEqual:]
  -[MNTimepoint copyWithZone:]
  -[MNTimepoint type]
  -[MNTimepoint encodeWithCoder:]
  -[MNTimepoint initWithCoder:]
  -[MNTimepoint .cxx_destruct]
  -[MNTimepoint date]
  -[MNTimepoint jsonDictionary]
  -[MNTimepoint initWithType:date:]


_MNTimepointAndTransportType : MNTimepoint <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  int transportType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MNTimepointAndTransportType supportsSecureCoding]

  // instance methods
  -[_MNTimepointAndTransportType isEqual:]
  -[_MNTimepointAndTransportType copyWithZone:]
  -[_MNTimepointAndTransportType encodeWithCoder:]
  -[_MNTimepointAndTransportType initWithCoder:]
  -[_MNTimepointAndTransportType transportType]
  -[_MNTimepointAndTransportType setTransportType:]
  -[_MNTimepointAndTransportType jsonDictionary]
  -[_MNTimepointAndTransportType initWithType:date:transportType:]


MNPlannedDestination : NSObject /usr/lib/libc++.1.dylib <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  _MNTimepointAndTransportType *_internalTimepoint
 @property  NSUUID *uuid
 @property  GEOComposedWaypoint *destinationWaypoint
 @property  int transportType
 @property  MNTimepoint *timepoint
 @property  NSDate *expirationDate
 @property  BOOL expired
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNPlannedDestination supportsSecureCoding]
  +[MNPlannedDestination destinationFromArchiveData:]

  // instance methods
  -[MNPlannedDestination isEqual:]
  -[MNPlannedDestination copyWithZone:]
  -[MNPlannedDestination encodeWithCoder:]
  -[MNPlannedDestination initWithCoder:]
  -[MNPlannedDestination .cxx_destruct]
  -[MNPlannedDestination uuid]
  -[MNPlannedDestination expirationDate]
  -[MNPlannedDestination setExpirationDate:]
  -[MNPlannedDestination uniqueIdentifier]
  -[MNPlannedDestination transportType]
  -[MNPlannedDestination isExpired]
  -[MNPlannedDestination archiveData]
  -[MNPlannedDestination setTransportType:]
  -[MNPlannedDestination timepoint]
  -[MNPlannedDestination setTimepoint:]
  -[MNPlannedDestination destinationWaypoint]
  -[MNPlannedDestination jsonDictionary]
  -[MNPlannedDestination isDuplicateOf:]
  -[MNPlannedDestination _setTimepoint:transportType:]
  -[MNPlannedDestination initWithWaypoint:transportType:]
  -[MNPlannedDestination _internalTimepoint]


MNClassicGuidanceManager : NSObject /usr/lib/libc++.1.dylib <MNGuidanceManager>
 @property  NSString *currentRoadName
 @property  NSString *currentShieldText
 @property  {?=qdBBBBii} currentInstructionOptions
 @property  <MNGuidanceManagerDelegate> *delegate
 @property  NSData *remainingRouteZilchData
 @property  int guidanceState
 @property  BOOL proceedingToRoute
 @property  GEOComposedRouteStep *maneuverStep
 @property  unsigned long maneuverStepIndex
 @property  int transportType
 @property  GEOComposedRoute *route
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNClassicGuidanceManager dealloc]
  -[MNClassicGuidanceManager delegate]
  -[MNClassicGuidanceManager setDelegate:]
  -[MNClassicGuidanceManager .cxx_destruct]
  -[MNClassicGuidanceManager stop]
  -[MNClassicGuidanceManager transportType]
  -[MNClassicGuidanceManager route]
  -[MNClassicGuidanceManager setCurrentRoadName:]
  -[MNClassicGuidanceManager currentRoadName]
  -[MNClassicGuidanceManager maneuverStep]
  -[MNClassicGuidanceManager updateDestination:]
  -[MNClassicGuidanceManager updateForReroute:]
  -[MNClassicGuidanceManager timeSinceLastAnnouncement]
  -[MNClassicGuidanceManager timeUntilNextAnnouncement]
  -[MNClassicGuidanceManager _resetStepState]
  -[MNClassicGuidanceManager _clearCurrentRoadName]
  -[MNClassicGuidanceManager maneuverStepIndex]
  -[MNClassicGuidanceManager _getStepAtIndex:]
  -[MNClassicGuidanceManager setCurrentShieldText:]
  -[MNClassicGuidanceManager _nameInfoForContinueSign]
  -[MNClassicGuidanceManager _nameInfoForCurrentRoad]
  -[MNClassicGuidanceManager _getStepAtIndex:clampIndexToRange:]
  -[MNClassicGuidanceManager guidanceState]
  -[MNClassicGuidanceManager _maneuverStepIndex]
  -[MNClassicGuidanceManager _announcementForArrival]
  -[MNClassicGuidanceManager _announcementForStart]
  -[MNClassicGuidanceManager _updateValidateRouteMatchForLocation:]
  -[MNClassicGuidanceManager _startingWrongWayForLocation:navigatorState:routeMatch:]
  -[MNClassicGuidanceManager _notifyAnnounceManeuverForStep:withDistance:withCombinedGuidance:playShortPrompt:isRepeat:stage:timeLimit:]
  -[MNClassicGuidanceManager _notifyDisplayManeuverForStep:withDistance:allowCombinedGuidance:]
  -[MNClassicGuidanceManager _updateCheckIfNextStep:navigatorState:routeMatch:]
  -[MNClassicGuidanceManager _updateGuidanceStateWithLocation:withMatch:withNavigatorState:stepChanged:]
  -[MNClassicGuidanceManager _currentAnnouncementStage]
  -[MNClassicGuidanceManager proceedingToRoute]
  -[MNClassicGuidanceManager updateGuidanceForProceedToRouteAtLocation:routeMatch:remainingTime:distanceUntilDestination:]
  -[MNClassicGuidanceManager _updatePrepareForNextStep]
  -[MNClassicGuidanceManager _updateConsiderContinueAnnouncement:location:]
  -[MNClassicGuidanceManager _updateConsiderInitialAnnouncement:passedManeuverStart:]
  -[MNClassicGuidanceManager _updateConsiderExecuteAnnouncement:location:]
  -[MNClassicGuidanceManager _updateConsiderPrepareAnnouncement:withMatch:]
  -[MNClassicGuidanceManager _timeUntilNextAnnouncement:location:upcomingStage:]
  -[MNClassicGuidanceManager _distanceForSign]
  -[MNClassicGuidanceManager _getClosestStepWithNameForProceedToRoute:routeMatch:]
  -[MNClassicGuidanceManager _combinedGuidanceForStep:withType:]
  -[MNClassicGuidanceManager _notifyAnnounceProceedToRoute:withClosestStep:withNamedStep:andSecondaryStep:isRepeat:]
  -[MNClassicGuidanceManager _notifyDisplayManeuverForSecondaryStep:]
  -[MNClassicGuidanceManager _durationOfLastAnnouncement]
  -[MNClassicGuidanceManager _adjustedVehicleSpeed:]
  -[MNClassicGuidanceManager _speedFactor:]
  -[MNClassicGuidanceManager _calculateExecutionDistance:withLogging:]
  -[MNClassicGuidanceManager _estimateTimeToSpeakExecutionAnnouncement]
  -[MNClassicGuidanceManager _notifyAnnounceContinueAsRepeat:]
  -[MNClassicGuidanceManager updateGuidanceForLocation:navigatorState:]
  -[MNClassicGuidanceManager repeatLastGuidanceAnnouncement:]
  -[MNClassicGuidanceManager addInjectedEvent:]
  -[MNClassicGuidanceManager updateForReturnToRoute]
  -[MNClassicGuidanceManager initWithNavigationSession:proceedToRoute:allowMidRouteStart:]
  -[MNClassicGuidanceManager _hasSubsteps]
  -[MNClassicGuidanceManager _hasCurrentRoadNameChangedForLocation:]
  -[MNClassicGuidanceManager maneuverStepCoordinate]
  -[MNClassicGuidanceManager _announcementInProgress]
  -[MNClassicGuidanceManager remainingRouteZilchData]
  -[MNClassicGuidanceManager currentShieldText]
  -[MNClassicGuidanceManager currentInstructionOptions]
  -[MNClassicGuidanceManager setCurrentInstructionOptions:]


MNRealtimeTransitUpdate : MNRealtimeUpdate <NSSecureCoding>
 @property  GEOTransitRouteUpdate *transitUpdate

  // class methods
  +[MNRealtimeTransitUpdate supportsSecureCoding]

  // instance methods
  -[MNRealtimeTransitUpdate encodeWithCoder:]
  -[MNRealtimeTransitUpdate initWithCoder:]
  -[MNRealtimeTransitUpdate .cxx_destruct]
  -[MNRealtimeTransitUpdate routeID]
  -[MNRealtimeTransitUpdate initWithTransitRouteUpdate:]
  -[MNRealtimeTransitUpdate transitUpdate]


MNComparison : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNComparison isValue:equalTo:]


MNTimeballServiceRemoteProxy : NSObject /usr/lib/libc++.1.dylib <MNTimeballServiceProxyInterface, MNTimeballServiceProxyDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNTimeballServiceProxyDelegate> *delegate

  // instance methods
  -[MNTimeballServiceRemoteProxy init]
  -[MNTimeballServiceRemoteProxy dealloc]
  -[MNTimeballServiceRemoteProxy delegate]
  -[MNTimeballServiceRemoteProxy setDelegate:]
  -[MNTimeballServiceRemoteProxy .cxx_destruct]
  -[MNTimeballServiceRemoteProxy _closeConnection]
  -[MNTimeballServiceRemoteProxy _remoteObjectProxy]
  -[MNTimeballServiceRemoteProxy _openConnection]
  -[MNTimeballServiceRemoteProxy invokeHandlerWithID:forDestination:update:error:]
  -[MNTimeballServiceRemoteProxy completedUpdateForHandlerID:]
  -[MNTimeballServiceRemoteProxy didReceiveError:forDestination:]
  -[MNTimeballServiceRemoteProxy didReceiveUpdate:forDestination:]
  -[MNTimeballServiceRemoteProxy requestRoutingOptions:forDestinations:freshness:handlerID:]
  -[MNTimeballServiceRemoteProxy subscribeToDestination:options:refreshPolicy:]
  -[MNTimeballServiceRemoteProxy unsubscribeFromDestination:]
  -[MNTimeballServiceRemoteProxy subscribeToAllDestinations]
  -[MNTimeballServiceRemoteProxy unsubscribeFromAllDestinations]
  -[MNTimeballServiceRemoteProxy _registerForNavdRestart]


MNDurationRequestKey : NSObject /usr/lib/libc++.1.dylib <NSCopying>
 @property  VSSpeechRequest *speechRequest

  // instance methods
  -[MNDurationRequestKey isEqual:]
  -[MNDurationRequestKey copyWithZone:]
  -[MNDurationRequestKey .cxx_destruct]
  -[MNDurationRequestKey speechRequest]
  -[MNDurationRequestKey initWithSpeechRequest:]


MNDurationRequest : NSObject /usr/lib/libc++.1.dylib
 @property  NSMutableArray *completions
 @property  double startTime

  // instance methods
  -[MNDurationRequest init]
  -[MNDurationRequest .cxx_destruct]
  -[MNDurationRequest completions]
  -[MNDurationRequest setCompletions:]
  -[MNDurationRequest startTime]
  -[MNDurationRequest setStartTime:]


MNVoiceEvent : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long options
 @property  NSString *textToSpeak
 @property  unsigned long shortPromptType
 @property  @? completion
 @property  BOOL isPrivate

  // class methods
  +[MNVoiceEvent eventWithText:fallbackPrompt:options:completion:]
  +[MNVoiceEvent isValidShortPromptType:]

  // instance methods
  -[MNVoiceEvent options]
  -[MNVoiceEvent .cxx_destruct]
  -[MNVoiceEvent completion]
  -[MNVoiceEvent isEqualToEvent:]
  -[MNVoiceEvent isPrivate]
  -[MNVoiceEvent textToSpeak]
  -[MNVoiceEvent initWithText:fallbackPrompt:options:completion:]
  -[MNVoiceEvent shortPromptType]


MNVoiceEventQueue : NSObject /usr/lib/libc++.1.dylib
 @property  <MNVoiceEventQueueDelegate> *delegate

  // instance methods
  -[MNVoiceEventQueue init]
  -[MNVoiceEventQueue delegate]
  -[MNVoiceEventQueue setDelegate:]
  -[MNVoiceEventQueue .cxx_destruct]
  -[MNVoiceEventQueue addEvent:]
  -[MNVoiceEventQueue removeAllEvents]
  -[MNVoiceEventQueue _removeEventsMatching:includeEventToMatch:]
  -[MNVoiceEventQueue hasAnotherEvent]
  -[MNVoiceEventQueue dequeueNextEvent]


MNVoiceController : NSObject /usr/lib/libc++.1.dylib <CARSessionObserving, VSSpeechSynthesizerDelegate, AVAudioPlayerDelegate, MNVoiceEventQueueDelegate>
 @property  CARSessionStatus *carSessionStatus
 @property  <VSSpeechSynthesizerDelegate> *delegate
 @property  VSSpeechSynthesizer *synthesizer
 @property  VSSpeechRequest *speechRequest
 @property  MNVoiceEvent *currentVoiceEvent
 @property  AVAudioPlayer *leftTurnAudioPlayer
 @property  AVAudioPlayer *rightTurnAudioPlayer
 @property  MNVoiceEventQueue *eventQueue
 @property  NSMutableDictionary *durationRequests
 @property  NSCache *speechDuration
 @property  NSString *currentVoiceLanguage
 @property  NSLocale *currentVoiceLocale
 @property  BOOL speechMuted
 @property  BOOL deviceMuted
 @property  MNNavigationAudioSession *activeNavigationSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNVoiceController sharedInstance]
  +[MNVoiceController localizedStringForKey:]
  +[MNVoiceController defaultVoiceLanguageWithSource:]

  // instance methods
  -[MNVoiceController init]
  -[MNVoiceController dealloc]
  -[MNVoiceController delegate]
  -[MNVoiceController setDelegate:]
  -[MNVoiceController .cxx_destruct]
  -[MNVoiceController stop]
  -[MNVoiceController addObserver:]
  -[MNVoiceController removeObserver:]
  -[MNVoiceController _defaultsDidChange]
  -[MNVoiceController eventQueue]
  -[MNVoiceController _processNextEvent]
  -[MNVoiceController setVolume:]
  -[MNVoiceController audioPlayerDidFinishPlaying:successfully:]
  -[MNVoiceController speechRequest]
  -[MNVoiceController setSpeechRequest:]
  -[MNVoiceController speechSynthesizer:didFinishSynthesisRequest:withInstrumentMetrics:error:]
  -[MNVoiceController speechSynthesizer:didFinishSpeaking:withError:]
  -[MNVoiceController isSpeaking]
  -[MNVoiceController synthesizer]
  -[MNVoiceController _mediaServicesWereReset:]
  -[MNVoiceController speechDuration]
  -[MNVoiceController durationRequests]
  -[MNVoiceController durationToSpeak:]
  -[MNVoiceController prepareToAnnounce]
  -[MNVoiceController currentVoiceLanguage]
  -[MNVoiceController activeNavigationSession]
  -[MNVoiceController setAudioSessionProperties]
  -[MNVoiceController speak:fallbackPrompt:completionBlock:]
  -[MNVoiceController deviceMuted]
  -[MNVoiceController beepIfNecessaryForShortPromptType:textToSpeak:]
  -[MNVoiceController clearAllEvents]
  -[MNVoiceController setActiveNavigationSession:]
  -[MNVoiceController speechMuted]
  -[MNVoiceController voiceEventQueue:wantsToImmediatelyPlayEvent:]
  -[MNVoiceController _updateCurrentVoiceLanguage]
  -[MNVoiceController _localizedStringForKey:]
  -[MNVoiceController submitVoiceAssetWithLanguage:andGender:]
  -[MNVoiceController _estimateDurationToSpeak:]
  -[MNVoiceController requestForSpeech:]
  -[MNVoiceController _stopCurrentEvent]
  -[MNVoiceController _deactivateAudioSession]
  -[MNVoiceController leftTurnAudioPlayer]
  -[MNVoiceController rightTurnAudioPlayer]
  -[MNVoiceController currentVoiceEvent]
  -[MNVoiceController setCurrentVoiceEvent:]
  -[MNVoiceController _handleFinishedSpeakingWithStatusCode:]
  -[MNVoiceController cacheAnnouncement:]
  -[MNVoiceController isPlayingAudio]
  -[MNVoiceController _handleFinishedPlayingBeepWithStatusCode:]
  -[MNVoiceController _playEvent:]
  -[MNVoiceController _performWithActiveAudioSession:]
  -[MNVoiceController _playTextEvent:]
  -[MNVoiceController _playBeepEvent:]
  -[MNVoiceController _setGender]
  -[MNVoiceController _eventProcessingTimerFired:]
  -[MNVoiceController _failCurrentEventAndProcessNext]
  -[MNVoiceController _setMaintainInactivePersistentConnection:]
  -[MNVoiceController _activateAudioSession:]
  -[MNVoiceController _setAudioSessionActive:]
  -[MNVoiceController _activationDebugTimerFired:]
  -[MNVoiceController _audioInterruption:]
  -[MNVoiceController _setVolumeControlEnabled:]
  -[MNVoiceController _resetAudioPlayers]
  -[MNVoiceController carSessionStatus]
  -[MNVoiceController currentVoiceLocale]
  -[MNVoiceController warmUpTTS]
  -[MNVoiceController endAnnounce]


MNRingerSwitchObserver : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  int ringerStateNotifyToken
 @property  BOOL ringerSwitchEnabled

  // class methods
  +[MNRingerSwitchObserver sharedObserver]

  // instance methods
  -[MNRingerSwitchObserver init]
  -[MNRingerSwitchObserver dealloc]
  -[MNRingerSwitchObserver .cxx_destruct]
  -[MNRingerSwitchObserver dispatchQueue]
  -[MNRingerSwitchObserver setDispatchQueue:]
  -[MNRingerSwitchObserver ringerSwitchEnabled]
  -[MNRingerSwitchObserver registerForRingerStateNotifications]
  -[MNRingerSwitchObserver loadPropertiesOnConcurrentQueue]
  -[MNRingerSwitchObserver unregisterForRingerStateNotifications]
  -[MNRingerSwitchObserver fetchRingerSwitchEnabled]
  -[MNRingerSwitchObserver ringerStateNotifyToken]
  -[MNRingerSwitchObserver stateForNotifyToken:]
  -[MNRingerSwitchObserver setRingerSwitchEnabled:]
  -[MNRingerSwitchObserver setRingerStateNotifyToken:]


MNLocationManager : NSObject /usr/lib/libc++.1.dylib <GEOResourceManifestTileGroupObserver, MNLocationProviderDelegate>
 @property  @? locationCorrector
 @property  NSString *effectiveBundleIdentifier
 @property  NSBundle *effectiveBundle
 @property  BOOL isHeadingServicesAvailable
 @property  CLHeading *heading
 @property  MNLocation *lastLocation
 @property  BOOL hasLocation
 @property  BOOL isLastLocationStale
 @property  NSError *locationError
 @property  double expectedGpsUpdateInterval
 @property  double timeScale
 @property  double desiredAccuracy
 @property  double distanceFilter
 @property  long long activityType
 @property  int headingOrientation
 @property  <MNLocationRecorder> *locationRecorder
 @property  unsigned long locationProviderType
 @property  <MNLocationProvider> *locationProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNLocationManager sharedLocationManager]

  // instance methods
  -[MNLocationManager init]
  -[MNLocationManager dealloc]
  -[MNLocationManager .cxx_destruct]
  -[MNLocationManager stop]
  -[MNLocationManager _reset]
  -[MNLocationManager activityType]
  -[MNLocationManager distanceFilter]
  -[MNLocationManager setDistanceFilter:]
  -[MNLocationManager desiredAccuracy]
  -[MNLocationManager setDesiredAccuracy:]
  -[MNLocationManager setActivityType:]
  -[MNLocationManager expectedGpsUpdateInterval]
  -[MNLocationManager setHeadingOrientation:]
  -[MNLocationManager headingOrientation]
  -[MNLocationManager heading]
  -[MNLocationManager effectiveBundle]
  -[MNLocationManager hasLocation]
  -[MNLocationManager resourceManifestManager:didChangeActiveTileGroup:fromOldTileGroup:]
  -[MNLocationManager setLastLocation:]
  -[MNLocationManager lastLocation]
  -[MNLocationManager stopHeadingUpdateWithObserver:]
  -[MNLocationManager stopLocationUpdateWithObserver:]
  -[MNLocationManager isHeadingServicesAvailable]
  -[MNLocationManager isLocationServicesPossiblyAvailable:]
  -[MNLocationManager startLocationUpdateWithObserver:]
  -[MNLocationManager startHeadingUpdateWithObserver:]
  -[MNLocationManager locationProvider:didUpdateLocation:]
  -[MNLocationManager locationProvider:didUpdateHeading:]
  -[MNLocationManager locationProvider:didReceiveError:]
  -[MNLocationManager locationProviderDidChangeAuthorizationStatus:]
  -[MNLocationManager locationProviderShouldPauseLocationUpdates:]
  -[MNLocationManager locationProviderDidPauseLocationUpdates:]
  -[MNLocationManager locationProviderDidResumeLocationUpdates:]
  -[MNLocationManager locationProvider:didUpdateVehicleSpeed:timestamp:]
  -[MNLocationManager locationProvider:didUpdateVehicleHeading:timestamp:]
  -[MNLocationManager setEffectiveBundle:]
  -[MNLocationManager effectiveBundleIdentifier]
  -[MNLocationManager setEffectiveBundleIdentifier:]
  -[MNLocationManager timeScale]
  -[MNLocationManager setLocationProvider:]
  -[MNLocationManager setLocationRecorder:]
  -[MNLocationManager locationProvider]
  -[MNLocationManager isLocationServicesApproved]
  -[MNLocationManager isLocationServicesDenied]
  -[MNLocationManager isLocationServicesRestricted]
  -[MNLocationManager isLastLocationStale]
  -[MNLocationManager _setTrackingLocation:]
  -[MNLocationManager _reportLocationStatus:]
  -[MNLocationManager _reportLocationReset]
  -[MNLocationManager isLocationServicesPossiblyAvailable]
  -[MNLocationManager isLocationServicesAvailable]
  -[MNLocationManager locationRecorder]
  -[MNLocationManager _reportLocationSuccess]
  -[MNLocationManager _reportLocationFailureWithError:]
  -[MNLocationManager _startLocationUpdateWithObserver:desiredAccuracy:]
  -[MNLocationManager _setTrackingHeading:]
  -[MNLocationManager setLocationCorrector:]
  -[MNLocationManager isLocationServicesAuthorizationNeeded]
  -[MNLocationManager pushLocation:]
  -[MNLocationManager locationError]
  -[MNLocationManager locationCorrector]
  -[MNLocationManager addLocationListener:]
  -[MNLocationManager removeLocationListener:]
  -[MNLocationManager setLocationProviderType:]
  -[MNLocationManager _createLocationAssertion]
  -[MNLocationManager _clearLocationAssertion]
  -[MNLocationManager _updateForNewLocation:rawLocation:]
  -[MNLocationManager useGPSLocationProvider]
  -[MNLocationManager useLeechedLocationProvider]
  -[MNLocationManager useHybridLocationProvider]
  -[MNLocationManager useTraceLocationProvider:]
  -[MNLocationManager _setLastLocationReceivedFromMaps:]
  -[MNLocationManager _hasLocationAssertion]
  -[MNLocationManager requestLocationAccessFor:]
  -[MNLocationManager removeLocationAccessFor:]
  -[MNLocationManager removeLocationAccessForAll]
  -[MNLocationManager locationProviderType]


_MNOffRouteInfo : NSObject /usr/lib/libc++.1.dylib
 @property  double penalty

  // instance methods
  -[_MNOffRouteInfo .cxx_destruct]
  -[_MNOffRouteInfo penalty]
  -[_MNOffRouteInfo _coordinateFromWaypoint:]
  -[_MNOffRouteInfo initWithCurrentDate:location:destination:]
  -[_MNOffRouteInfo updateWithCurrentDate:location:isMostRecentReroute:throttledReroutesCount:]


MNCommuteDestinationOffRouteScore : MNCommuteDestinationScore <MNCommuteDestinationLocationScore>
 @property  NSMutableArray *offRouteEntries

  // class methods
  +[MNCommuteDestinationOffRouteScore weight]

  // instance methods
  -[MNCommuteDestinationOffRouteScore .cxx_destruct]
  -[MNCommuteDestinationOffRouteScore score]
  -[MNCommuteDestinationOffRouteScore updateForLocation:]
  -[MNCommuteDestinationOffRouteScore initWithDestination:]
  -[MNCommuteDestinationOffRouteScore updateScoreIfPossible]
  -[MNCommuteDestinationOffRouteScore destinationInvalid]
  -[MNCommuteDestinationOffRouteScore descriptionExtras]
  -[MNCommuteDestinationOffRouteScore _updateScoreAndDestinationInvalid]
  -[MNCommuteDestinationOffRouteScore updateForRerouteWithLocation:]
  -[MNCommuteDestinationOffRouteScore offRouteEntries]
  -[MNCommuteDestinationOffRouteScore setOffRouteEntries:]


MNTraceBookmarkRecorder : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNTraceBookmarkRecorder .cxx_destruct]
  -[MNTraceBookmarkRecorder initWithTrace:]
  -[MNTraceBookmarkRecorder recordBookmarkAtTime:withScreenshotData:completionHandler:]


MNWeakTimer : NSObject /usr/lib/libc++.1.dylib
 @property  id target
 @property  SEL selector
 @property  NSTimer *timer

  // class methods
  +[MNWeakTimer scheduledTimerWithTimeInterval:target:selector:]

  // instance methods
  -[MNWeakTimer dealloc]
  -[MNWeakTimer selector]
  -[MNWeakTimer invalidate]
  -[MNWeakTimer .cxx_destruct]
  -[MNWeakTimer setTarget:]
  -[MNWeakTimer target]
  -[MNWeakTimer setSelector:]
  -[MNWeakTimer timer]
  -[MNWeakTimer initWithTimeInterval:target:selector:]
  -[MNWeakTimer _timerDidFire]


MNETADisplayFormatter : NSObject /usr/lib/libc++.1.dylib
 @property  <MNETADisplayFormatterDelegate> *delegate
 @property  double remainingTime
 @property  double displayRemainingTime
 @property  NSDate *displayETA

  // instance methods
  -[MNETADisplayFormatter dealloc]
  -[MNETADisplayFormatter delegate]
  -[MNETADisplayFormatter setDelegate:]
  -[MNETADisplayFormatter .cxx_destruct]
  -[MNETADisplayFormatter remainingTime]
  -[MNETADisplayFormatter setRemainingTime:]
  -[MNETADisplayFormatter _updateTimerFired]
  -[MNETADisplayFormatter displayETA]
  -[MNETADisplayFormatter _updateDisplayETA]
  -[MNETADisplayFormatter _displayTimeIntervalForTimeInterval:]
  -[MNETADisplayFormatter _displayDateWithRemainingTime:]
  -[MNETADisplayFormatter _scheduleUpdateTimer]
  -[MNETADisplayFormatter initWithTimeZone:]
  -[MNETADisplayFormatter displayRemainingTime]


MNGuidanceSignDescription : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSUUID *uniqueID
 @property  NSArray *titles
 @property  NSArray *details
 @property  NSDictionary *variableOverrides
 @property  long long distanceDetailLevel
 @property  GEOJunction *junction
 @property  NSString *shieldText
 @property  int shieldID
 @property  NSString *shieldStringID
 @property  int composedGuidanceEventIndex

  // class methods
  +[MNGuidanceSignDescription supportsSecureCoding]

  // instance methods
  -[MNGuidanceSignDescription encodeWithCoder:]
  -[MNGuidanceSignDescription initWithCoder:]
  -[MNGuidanceSignDescription .cxx_destruct]
  -[MNGuidanceSignDescription uniqueID]
  -[MNGuidanceSignDescription details]
  -[MNGuidanceSignDescription titles]
  -[MNGuidanceSignDescription shieldText]
  -[MNGuidanceSignDescription junction]
  -[MNGuidanceSignDescription shieldID]
  -[MNGuidanceSignDescription shieldStringID]
  -[MNGuidanceSignDescription distanceDetailLevel]
  -[MNGuidanceSignDescription variableOverrides]
  -[MNGuidanceSignDescription composedGuidanceEventIndex]
  -[MNGuidanceSignDescription initWithID:titles:details:variableOverrides:distanceDetailLevel:junction:shieldText:shieldID:shieldStringID:composedGuidanceEventIndex:]


MNNavigationStateGuidance : MNNavigationState
  // class methods
  +[MNNavigationStateGuidance guidanceStateForStartDetails:stateManager:navigationSessionManager:]

  // instance methods
  -[MNNavigationStateGuidance .cxx_destruct]
  -[MNNavigationStateGuidance enterState]
  -[MNNavigationStateGuidance setDisplayedStepIndex:]
  -[MNNavigationStateGuidance setIsConnectedToCarplay:]
  -[MNNavigationStateGuidance currentDestination]
  -[MNNavigationStateGuidance stopNavigation]
  -[MNNavigationStateGuidance updateDestination:]
  -[MNNavigationStateGuidance resumeOriginalDestination]
  -[MNNavigationStateGuidance switchToRoute:]
  -[MNNavigationStateGuidance repeatCurrentGuidanceWithReply:]
  -[MNNavigationStateGuidance repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationStateGuidance vibrateForPrompt:withReply:]
  -[MNNavigationStateGuidance stopCurrentGuidancePrompt]
  -[MNNavigationStateGuidance setHFPPreference:forSetting:]
  -[MNNavigationStateGuidance setCurrentAudioOutputSetting:]
  -[MNNavigationStateGuidance setRideIndex:forLegIndex:]
  -[MNNavigationStateGuidance setJunctionViewImageWidth:height:]
  -[MNNavigationStateGuidance acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationStateGuidance setTraceIsPlaying:]
  -[MNNavigationStateGuidance setTracePlaybackSpeed:]
  -[MNNavigationStateGuidance setTracePosition:]
  -[MNNavigationStateGuidance recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationStateGuidance recordPedestrianTracePath:]
  -[MNNavigationStateGuidance updateGuidanceWithData:reply:]
  -[MNNavigationStateGuidance pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateGuidance resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateGuidance traceManager]
  -[MNNavigationStateGuidance initWithStateManager:navigationSessionManager:startDetails:]
  -[MNNavigationStateGuidance leaveState]
  -[MNNavigationStateGuidance requiresHighMemoryThreshold]
  -[MNNavigationStateGuidance desiredLocationProviderType]
  -[MNNavigationStateGuidance shouldClearStoredRoutes]
  -[MNNavigationStateGuidance preEnterState]


MNCommuteDestinationLocationHistoryScore : MNCommuteDestinationScore <MNCommuteDestinationLocationHistoryScore>
 @property  NSArray *locationHistory
 @property  double scoredDistance
 @property  double scoredTimeInterval

  // class methods
  +[MNCommuteDestinationLocationHistoryScore weight]

  // instance methods
  -[MNCommuteDestinationLocationHistoryScore .cxx_destruct]
  -[MNCommuteDestinationLocationHistoryScore score]
  -[MNCommuteDestinationLocationHistoryScore updateScoreIfPossible]
  -[MNCommuteDestinationLocationHistoryScore destinationInvalid]
  -[MNCommuteDestinationLocationHistoryScore descriptionExtras]
  -[MNCommuteDestinationLocationHistoryScore updateLocationHistory:]
  -[MNCommuteDestinationLocationHistoryScore scoredDistance]
  -[MNCommuteDestinationLocationHistoryScore scoredTimeInterval]
  -[MNCommuteDestinationLocationHistoryScore setLocationHistory:]
  -[MNCommuteDestinationLocationHistoryScore setScoredDistance:]
  -[MNCommuteDestinationLocationHistoryScore setScoredTimeInterval:]
  -[MNCommuteDestinationLocationHistoryScore locationHistory]
  -[MNCommuteDestinationLocationHistoryScore _scoreForDistance:timeInterval:]


MNWalkGuidanceManager : MNClassicGuidanceManager
  // instance methods
  -[MNWalkGuidanceManager transportType]
  -[MNWalkGuidanceManager updateGuidanceForProceedToRouteAtLocation:routeMatch:remainingTime:distanceUntilDestination:]
  -[MNWalkGuidanceManager _updatePrepareForNextStep]
  -[MNWalkGuidanceManager _updateConsiderExecuteAnnouncement:location:]
  -[MNWalkGuidanceManager _combinedGuidanceForStep:withType:]
  -[MNWalkGuidanceManager _adjustedVehicleSpeed:]


MNCommuteDestinationScore : NSObject /usr/lib/libc++.1.dylib
 @property  NSHashTable *observers
 @property  NSDate *lastUpdate
 @property  MNCommuteDestination *destination
 @property  BOOL destinationInvalid
 @property  int score
 @property  double weightedScore
 @property  MNCommuteDestinationSuggestion *destinationSuggestion
 @property  NSString *descriptionExtras

  // class methods
  +[MNCommuteDestinationScore weight]
  +[MNCommuteDestinationScore sessionStartDate]
  +[MNCommuteDestinationScore setSessionStartDate:]
  +[MNCommuteDestinationScore sessionStartDateOrNow]

  // instance methods
  -[MNCommuteDestinationScore init]
  -[MNCommuteDestinationScore .cxx_destruct]
  -[MNCommuteDestinationScore addObserver:]
  -[MNCommuteDestinationScore removeObserver:]
  -[MNCommuteDestinationScore score]
  -[MNCommuteDestinationScore destination]
  -[MNCommuteDestinationScore setDestination:]
  -[MNCommuteDestinationScore lastUpdate]
  -[MNCommuteDestinationScore setObservers:]
  -[MNCommuteDestinationScore observers]
  -[MNCommuteDestinationScore initWithDestination:]
  -[MNCommuteDestinationScore notifyObservers]
  -[MNCommuteDestinationScore lastUpdateIsNow]
  -[MNCommuteDestinationScore destinationSuggestion]
  -[MNCommuteDestinationScore updateScoreIfPossible]
  -[MNCommuteDestinationScore destinationInvalid]
  -[MNCommuteDestinationScore descriptionExtras]
  -[MNCommuteDestinationScore setLastUpdate:]
  -[MNCommuteDestinationScore weightedScore]


MNDirectionsResponseInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSArray *routeInfos
 @property  GEODirectionsRequest *request
 @property  GEODirectionsResponse *response
 @property  NSError *error
 @property  GEODirectionsError *directionsError
 @property  MNTraceRecordingData *traceRecordingData

  // class methods
  +[MNDirectionsResponseInfo supportsSecureCoding]

  // instance methods
  -[MNDirectionsResponseInfo encodeWithCoder:]
  -[MNDirectionsResponseInfo initWithCoder:]
  -[MNDirectionsResponseInfo .cxx_destruct]
  -[MNDirectionsResponseInfo error]
  -[MNDirectionsResponseInfo setError:]
  -[MNDirectionsResponseInfo setRequest:]
  -[MNDirectionsResponseInfo request]
  -[MNDirectionsResponseInfo response]
  -[MNDirectionsResponseInfo setResponse:]
  -[MNDirectionsResponseInfo routeInfos]
  -[MNDirectionsResponseInfo setRouteInfos:]
  -[MNDirectionsResponseInfo traceRecordingData]
  -[MNDirectionsResponseInfo setTraceRecordingData:]
  -[MNDirectionsResponseInfo directionsError]
  -[MNDirectionsResponseInfo setDirectionsError:]


MNKeepAliveManager : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long counter
 @property  NSString *launchdKeepAliveFile
 @property  NSFileManager *fileManager

  // class methods
  +[MNKeepAliveManager sharedInstance]

  // instance methods
  -[MNKeepAliveManager init]
  -[MNKeepAliveManager checkIn]
  -[MNKeepAliveManager .cxx_destruct]
  -[MNKeepAliveManager counter]
  -[MNKeepAliveManager fileManager]
  -[MNKeepAliveManager setFileManager:]
  -[MNKeepAliveManager setCounter:]
  -[MNKeepAliveManager checkOut]
  -[MNKeepAliveManager launchdKeepAliveFile]
  -[MNKeepAliveManager setLaunchdKeepAliveFile:]


MNNavigationServiceRemoteProxy : NSObject /usr/lib/libc++.1.dylib <MNNavigationServiceProxy>
 @property  <MNNavigationServiceClientInterface> *delegate
 @property  unsigned long interruptionCount
 @property  unsigned long clientCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationServiceRemoteProxy init]
  -[MNNavigationServiceRemoteProxy dealloc]
  -[MNNavigationServiceRemoteProxy methodSignatureForSelector:]
  -[MNNavigationServiceRemoteProxy forwardInvocation:]
  -[MNNavigationServiceRemoteProxy delegate]
  -[MNNavigationServiceRemoteProxy setDelegate:]
  -[MNNavigationServiceRemoteProxy .cxx_destruct]
  -[MNNavigationServiceRemoteProxy _closeConnection]
  -[MNNavigationServiceRemoteProxy setHeadingOrientation:]
  -[MNNavigationServiceRemoteProxy openForClient:]
  -[MNNavigationServiceRemoteProxy closeForClient:]
  -[MNNavigationServiceRemoteProxy setGuidancePromptsEnabled:]
  -[MNNavigationServiceRemoteProxy setDisplayedStepIndex:]
  -[MNNavigationServiceRemoteProxy setIsConnectedToCarplay:]
  -[MNNavigationServiceRemoteProxy _remoteObjectProxy]
  -[MNNavigationServiceRemoteProxy _handleInterruption]
  -[MNNavigationServiceRemoteProxy interruptionCount]
  -[MNNavigationServiceRemoteProxy _openConnection]
  -[MNNavigationServiceRemoteProxy clientCount]
  -[MNNavigationServiceRemoteProxy stopNavigation]
  -[MNNavigationServiceRemoteProxy navigationServiceProxy:didUpdateNavigationDetails:]
  -[MNNavigationServiceRemoteProxy setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationServiceRemoteProxy startNavigationWithDetails:activeBlock:]
  -[MNNavigationServiceRemoteProxy startPredictingDestinationsWithHandler:]
  -[MNNavigationServiceRemoteProxy stopPredictingDestinations]
  -[MNNavigationServiceRemoteProxy updateDestination:]
  -[MNNavigationServiceRemoteProxy resumeOriginalDestination]
  -[MNNavigationServiceRemoteProxy switchToRoute:]
  -[MNNavigationServiceRemoteProxy setFullGuidanceMode:]
  -[MNNavigationServiceRemoteProxy changeSettings:]
  -[MNNavigationServiceRemoteProxy repeatCurrentGuidanceWithReply:]
  -[MNNavigationServiceRemoteProxy repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationServiceRemoteProxy vibrateForPrompt:withReply:]
  -[MNNavigationServiceRemoteProxy stopCurrentGuidancePrompt]
  -[MNNavigationServiceRemoteProxy setHFPPreference:forSetting:]
  -[MNNavigationServiceRemoteProxy setCurrentAudioOutputSetting:]
  -[MNNavigationServiceRemoteProxy setRideIndex:forLegIndex:]
  -[MNNavigationServiceRemoteProxy setJunctionViewImageWidth:height:]
  -[MNNavigationServiceRemoteProxy acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationServiceRemoteProxy setTraceIsPlaying:]
  -[MNNavigationServiceRemoteProxy setTracePlaybackSpeed:]
  -[MNNavigationServiceRemoteProxy setTracePosition:]
  -[MNNavigationServiceRemoteProxy recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationServiceRemoteProxy recordPedestrianTracePath:]
  -[MNNavigationServiceRemoteProxy interfaceHashesWithHandler:]
  -[MNNavigationServiceRemoteProxy updateGuidanceWithData:reply:]
  -[MNNavigationServiceRemoteProxy pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceRemoteProxy resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceRemoteProxy checkinForNavigationService:]
  -[MNNavigationServiceRemoteProxy navigationServiceProxy:willChangeFromState:toState:]
  -[MNNavigationServiceRemoteProxy navigationServiceProxy:didChangeFromState:toState:]
  -[MNNavigationServiceRemoteProxy isOpenForClient:]
  -[MNNavigationServiceRemoteProxy _updateConnection]
  -[MNNavigationServiceRemoteProxy _shouldReconnectWithInterruptionOnDate:]
  -[MNNavigationServiceRemoteProxy _restoreNavigationSession]
  -[MNNavigationServiceRemoteProxy _restorePredictionSession]
  -[MNNavigationServiceRemoteProxy _restoreIdleConnection]
  -[MNNavigationServiceRemoteProxy _releaseSandboxExtension]
  -[MNNavigationServiceRemoteProxy _consumeSandboxExtension:]


MNTimeAndDistanceUpdater : NSObject /usr/lib/libc++.1.dylib
 @property  <MNTimeAndDistanceUpdaterDelegate> *delegate
 @property  double remainingTime
 @property  double remainingDistance
 @property  double distanceToManeuverStart
 @property  double distanceToManeuverEnd

  // instance methods
  -[MNTimeAndDistanceUpdater dealloc]
  -[MNTimeAndDistanceUpdater delegate]
  -[MNTimeAndDistanceUpdater setDelegate:]
  -[MNTimeAndDistanceUpdater .cxx_destruct]
  -[MNTimeAndDistanceUpdater remainingDistance]
  -[MNTimeAndDistanceUpdater remainingTime]
  -[MNTimeAndDistanceUpdater startUpdating]
  -[MNTimeAndDistanceUpdater stopUpdating]
  -[MNTimeAndDistanceUpdater setRoutes:mainRoute:location:notificationType:]
  -[MNTimeAndDistanceUpdater distanceToManeuverStart]
  -[MNTimeAndDistanceUpdater distanceToManeuverEnd]
  -[MNTimeAndDistanceUpdater _startTimerToNextMinute]
  -[MNTimeAndDistanceUpdater updateDisplayETAForRoute:notificationType:]
  -[MNTimeAndDistanceUpdater setLocation:notificationType:]


MNCoreMotionContextProvider : NSObject /usr/lib/libc++.1.dylib <GEOMotionContextProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <GEOMotionContextProviderDelegate> *motionDelegate

  // instance methods
  -[MNCoreMotionContextProvider dealloc]
  -[MNCoreMotionContextProvider .cxx_destruct]
  -[MNCoreMotionContextProvider stopMotionUpdates]
  -[MNCoreMotionContextProvider setMotionDelegate:]
  -[MNCoreMotionContextProvider startMotionUpdates]
  -[MNCoreMotionContextProvider initWithTraceRecorder:]
  -[MNCoreMotionContextProvider motionDelegate]


_MNTracePlayerTimelineStreamSearchObject : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerTimelineStreamObjectType>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double position

  // instance methods
  -[_MNTracePlayerTimelineStreamSearchObject position]
  -[_MNTracePlayerTimelineStreamSearchObject initWithPosition:]


MNTracePlayerTimelineStream : NSObject /usr/lib/libc++.1.dylib
 @property  @? handler
 @property  unsigned long nextIndex
 @property  double nextUpdatePosition

  // instance methods
  -[MNTracePlayerTimelineStream handler]
  -[MNTracePlayerTimelineStream initWithData:]
  -[MNTracePlayerTimelineStream .cxx_destruct]
  -[MNTracePlayerTimelineStream setHandler:]
  -[MNTracePlayerTimelineStream nextIndex]
  -[MNTracePlayerTimelineStream jumpToPosition:]
  -[MNTracePlayerTimelineStream nextUpdatePosition]
  -[MNTracePlayerTimelineStream triggerNextUpdate]


MNRealtimeUpdate : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSUUID *routeID
 @property  NSDate *lastUpdated
 @property  NSError *error

  // class methods
  +[MNRealtimeUpdate supportsSecureCoding]

  // instance methods
  -[MNRealtimeUpdate encodeWithCoder:]
  -[MNRealtimeUpdate initWithCoder:]
  -[MNRealtimeUpdate .cxx_destruct]
  -[MNRealtimeUpdate error]
  -[MNRealtimeUpdate routeID]
  -[MNRealtimeUpdate lastUpdated]


MNTraceNavigationEventRecorder : NSObject /usr/lib/libc++.1.dylib <MNNavigationSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTraceNavigationEventRecorder .cxx_destruct]
  -[MNTraceNavigationEventRecorder navigationSessionDidStart:]
  -[MNTraceNavigationEventRecorder navigationSessionDidStop:]
  -[MNTraceNavigationEventRecorder navigationSession:didUpdateDisplayETA:displayRemainingMinutes:forRoute:]
  -[MNTraceNavigationEventRecorder navigationSession:didSuppressReroute:]
  -[MNTraceNavigationEventRecorder navigationSession:didReroute:withLocation:withAlternateRoutes:]
  -[MNTraceNavigationEventRecorder navigationSession:didUpdateDestination:]
  -[MNTraceNavigationEventRecorder initWithTraceRecorder:]
  -[MNTraceNavigationEventRecorder setLastMatchedLocation:]
  -[MNTraceNavigationEventRecorder _userGotOnRoute]
  -[MNTraceNavigationEventRecorder _userWentOffRoute]
  -[MNTraceNavigationEventRecorder _recordEvent:description:]
  -[MNTraceNavigationEventRecorder _descriptionForWaypoint:]


MNLocationDetails : PBCodable /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices <NSCopying>
 @property  BOOL hasLocation
 @property  GEOLocation *location
 @property  BOOL hasRouteIDData
 @property  NSData *routeIDData
 @property  BOOL hasStepIndex
 @property  unsigned int stepIndex
 @property  BOOL hasLocationState
 @property  unsigned int locationState
 @property  BOOL hasRouteCoordinate
 @property  MNRouteCoordinate *routeCoordinate
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasRoadCoordinate
 @property  GEOLatLng *roadCoordinate
 @property  BOOL hasRouteMatchCourse
 @property  double routeMatchCourse
 @property  BOOL hasRoadMatchCourse
 @property  double roadMatchCourse
 @property  BOOL hasRoadName
 @property  NSString *roadName
 @property  BOOL hasShieldText
 @property  NSString *shieldText
 @property  BOOL hasShieldType
 @property  long long shieldType
 @property  BOOL hasRoadLineType
 @property  unsigned int roadLineType
 @property  BOOL hasRampType
 @property  int rampType
 @property  BOOL hasSpeedLimit
 @property  unsigned int speedLimit
 @property  BOOL hasSpeedLimitIsMPH
 @property  BOOL speedLimitIsMPH
 @property  BOOL hasIsGoodMatch
 @property  BOOL isGoodMatch
 @property  BOOL hasHorizontalAccuracy
 @property  double horizontalAccuracy
 @property  BOOL hasCourseAccuracy
 @property  double courseAccuracy
 @property  BOOL hasDistanceFromRoute
 @property  double distanceFromRoute
 @property  BOOL hasTransitID
 @property  unsigned long transitID
 @property  BOOL hasIsTunnelProjection
 @property  BOOL isTunnelProjection
 @property  BOOL hasSpeedLimitShieldType
 @property  long long speedLimitShieldType
 @property  BOOL hasRawReferenceFrame
 @property  int rawReferenceFrame

  // class methods
  +[MNLocationDetails locationDetailsWithLocation:]
  +[MNLocationDetails locationWithLocationDetails:]
  +[MNLocationDetails locationWithLocationDetails:route:]

  // instance methods
  -[MNLocationDetails isEqual:]
  -[MNLocationDetails copyWithZone:]
  -[MNLocationDetails .cxx_destruct]
  -[MNLocationDetails dictionaryRepresentation]
  -[MNLocationDetails timestamp]
  -[MNLocationDetails location]
  -[MNLocationDetails hasTimestamp]
  -[MNLocationDetails setTimestamp:]
  -[MNLocationDetails writeTo:]
  -[MNLocationDetails mergeFrom:]
  -[MNLocationDetails readFrom:]
  -[MNLocationDetails copyTo:]
  -[MNLocationDetails horizontalAccuracy]
  -[MNLocationDetails setHorizontalAccuracy:]
  -[MNLocationDetails setLocation:]
  -[MNLocationDetails setHasHorizontalAccuracy:]
  -[MNLocationDetails hasHorizontalAccuracy]
  -[MNLocationDetails setHasTimestamp:]
  -[MNLocationDetails hasLocation]
  -[MNLocationDetails rampType]
  -[MNLocationDetails speedLimit]
  -[MNLocationDetails speedLimitIsMPH]
  -[MNLocationDetails hasCourseAccuracy]
  -[MNLocationDetails hasTransitID]
  -[MNLocationDetails courseAccuracy]
  -[MNLocationDetails setCourseAccuracy:]
  -[MNLocationDetails setHasCourseAccuracy:]
  -[MNLocationDetails transitID]
  -[MNLocationDetails setTransitID:]
  -[MNLocationDetails setHasTransitID:]
  -[MNLocationDetails routeCoordinate]
  -[MNLocationDetails shieldText]
  -[MNLocationDetails setShieldText:]
  -[MNLocationDetails hasShieldText]
  -[MNLocationDetails shieldType]
  -[MNLocationDetails stepIndex]
  -[MNLocationDetails isGoodMatch]
  -[MNLocationDetails setIsGoodMatch:]
  -[MNLocationDetails setDistanceFromRoute:]
  -[MNLocationDetails setRouteCoordinate:]
  -[MNLocationDetails setStepIndex:]
  -[MNLocationDetails distanceFromRoute]
  -[MNLocationDetails hasShieldType]
  -[MNLocationDetails setShieldType:]
  -[MNLocationDetails setHasShieldType:]
  -[MNLocationDetails roadName]
  -[MNLocationDetails setRoadName:]
  -[MNLocationDetails isTunnelProjection]
  -[MNLocationDetails setIsTunnelProjection:]
  -[MNLocationDetails hasRoadName]
  -[MNLocationDetails setRampType:]
  -[MNLocationDetails locationState]
  -[MNLocationDetails setLocationState:]
  -[MNLocationDetails setRouteMatchCourse:]
  -[MNLocationDetails setRoadMatchCourse:]
  -[MNLocationDetails roadLineType]
  -[MNLocationDetails setRoadLineType:]
  -[MNLocationDetails setSpeedLimit:]
  -[MNLocationDetails setSpeedLimitIsMPH:]
  -[MNLocationDetails speedLimitShieldType]
  -[MNLocationDetails setSpeedLimitShieldType:]
  -[MNLocationDetails setRawReferenceFrame:]
  -[MNLocationDetails setRoadCoordinate:]
  -[MNLocationDetails setRouteIDData:]
  -[MNLocationDetails hasRouteIDData]
  -[MNLocationDetails setHasStepIndex:]
  -[MNLocationDetails hasStepIndex]
  -[MNLocationDetails setHasLocationState:]
  -[MNLocationDetails hasLocationState]
  -[MNLocationDetails hasRouteCoordinate]
  -[MNLocationDetails hasRoadCoordinate]
  -[MNLocationDetails setHasRouteMatchCourse:]
  -[MNLocationDetails hasRouteMatchCourse]
  -[MNLocationDetails setHasRoadMatchCourse:]
  -[MNLocationDetails hasRoadMatchCourse]
  -[MNLocationDetails setHasRoadLineType:]
  -[MNLocationDetails hasRoadLineType]
  -[MNLocationDetails setHasRampType:]
  -[MNLocationDetails hasRampType]
  -[MNLocationDetails rampTypeAsString:]
  -[MNLocationDetails StringAsRampType:]
  -[MNLocationDetails setHasSpeedLimit:]
  -[MNLocationDetails hasSpeedLimit]
  -[MNLocationDetails setHasSpeedLimitIsMPH:]
  -[MNLocationDetails hasSpeedLimitIsMPH]
  -[MNLocationDetails setHasIsGoodMatch:]
  -[MNLocationDetails hasIsGoodMatch]
  -[MNLocationDetails setHasDistanceFromRoute:]
  -[MNLocationDetails hasDistanceFromRoute]
  -[MNLocationDetails setHasIsTunnelProjection:]
  -[MNLocationDetails hasIsTunnelProjection]
  -[MNLocationDetails setHasSpeedLimitShieldType:]
  -[MNLocationDetails hasSpeedLimitShieldType]
  -[MNLocationDetails rawReferenceFrame]
  -[MNLocationDetails setHasRawReferenceFrame:]
  -[MNLocationDetails hasRawReferenceFrame]
  -[MNLocationDetails rawReferenceFrameAsString:]
  -[MNLocationDetails StringAsRawReferenceFrame:]
  -[MNLocationDetails routeIDData]
  -[MNLocationDetails roadCoordinate]
  -[MNLocationDetails routeMatchCourse]
  -[MNLocationDetails roadMatchCourse]


MNDirectionsRequestDetails : PBCodable /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices <NSCopying>
 @property  BOOL hasOrigin
 @property  GEOComposedWaypoint *origin
 @property  BOOL hasDestination
 @property  GEOComposedWaypoint *destination
 @property  BOOL hasRouteAttributes
 @property  GEORouteAttributes *routeAttributes
 @property  BOOL hasMaxRouteCount
 @property  unsigned int maxRouteCount
 @property  BOOL hasCurrentUserLocation
 @property  GEOLocation *currentUserLocation
 @property  BOOL hasCurrentMapRegion
 @property  GEOMapRegion *currentMapRegion
 @property  BOOL hasDirectionsRequestFeedback
 @property  GEODirectionsRequestFeedback *directionsRequestFeedback
 @property  BOOL hasTracePath
 @property  NSString *tracePath

  // instance methods
  -[MNDirectionsRequestDetails isEqual:]
  -[MNDirectionsRequestDetails copyWithZone:]
  -[MNDirectionsRequestDetails .cxx_destruct]
  -[MNDirectionsRequestDetails dictionaryRepresentation]
  -[MNDirectionsRequestDetails writeTo:]
  -[MNDirectionsRequestDetails destination]
  -[MNDirectionsRequestDetails setDestination:]
  -[MNDirectionsRequestDetails origin]
  -[MNDirectionsRequestDetails mergeFrom:]
  -[MNDirectionsRequestDetails readFrom:]
  -[MNDirectionsRequestDetails copyTo:]
  -[MNDirectionsRequestDetails setOrigin:]
  -[MNDirectionsRequestDetails routeAttributes]
  -[MNDirectionsRequestDetails currentUserLocation]
  -[MNDirectionsRequestDetails currentMapRegion]
  -[MNDirectionsRequestDetails hasCurrentUserLocation]
  -[MNDirectionsRequestDetails setCurrentUserLocation:]
  -[MNDirectionsRequestDetails setRouteAttributes:]
  -[MNDirectionsRequestDetails setCurrentMapRegion:]
  -[MNDirectionsRequestDetails hasRouteAttributes]
  -[MNDirectionsRequestDetails hasCurrentMapRegion]
  -[MNDirectionsRequestDetails hasDestination]
  -[MNDirectionsRequestDetails hasOrigin]
  -[MNDirectionsRequestDetails setTracePath:]
  -[MNDirectionsRequestDetails hasTracePath]
  -[MNDirectionsRequestDetails tracePath]
  -[MNDirectionsRequestDetails directionsRequestFeedback]
  -[MNDirectionsRequestDetails maxRouteCount]
  -[MNDirectionsRequestDetails setMaxRouteCount:]
  -[MNDirectionsRequestDetails setDirectionsRequestFeedback:]
  -[MNDirectionsRequestDetails setHasMaxRouteCount:]
  -[MNDirectionsRequestDetails hasMaxRouteCount]
  -[MNDirectionsRequestDetails hasDirectionsRequestFeedback]


MNTransitLocationTracker : MNSteppingLocationTracker
 @property  BOOL debugSnapToTransitLines

  // instance methods
  -[MNTransitLocationTracker .cxx_destruct]
  -[MNTransitLocationTracker transportType]
  -[MNTransitLocationTracker stopTracking]
  -[MNTransitLocationTracker _matchedLocationForLocation:]
  -[MNTransitLocationTracker initWithNavigationSession:]
  -[MNTransitLocationTracker startTracking]
  -[MNTransitLocationTracker _isInaccurateLocation:]
  -[MNTransitLocationTracker _locationForInaccurateLocation:]
  -[MNTransitLocationTracker _timeToDisplayStaleGPSLocation]
  -[MNTransitLocationTracker _correctedLocationForLocation:]
  -[MNTransitLocationTracker _roadMatchForOffRouteLocation:routeMatch:]
  -[MNTransitLocationTracker debugSnapToTransitLines]
  -[MNTransitLocationTracker setDebugSnapToTransitLines:]


MNTimeballSubscription : NSObject /usr/lib/libc++.1.dylib <MNJSONOutput, NSCopying, NSSecureCoding>
 @property  MNPlannedDestination *destination
 @property  long long options
 @property  unsigned long refreshPolicy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimeballSubscription supportsSecureCoding]
  +[MNTimeballSubscription subscriptionForDestination:options:refreshPolicy:]

  // instance methods
  -[MNTimeballSubscription isEqual:]
  -[MNTimeballSubscription copyWithZone:]
  -[MNTimeballSubscription options]
  -[MNTimeballSubscription encodeWithCoder:]
  -[MNTimeballSubscription initWithCoder:]
  -[MNTimeballSubscription .cxx_destruct]
  -[MNTimeballSubscription destination]
  -[MNTimeballSubscription jsonDictionary]
  -[MNTimeballSubscription refreshPolicy]


MNTimeballSubscriberStore : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *subscriptions

  // instance methods
  -[MNTimeballSubscriberStore init]
  -[MNTimeballSubscriberStore .cxx_destruct]
  -[MNTimeballSubscriberStore subscriptions]
  -[MNTimeballSubscriberStore subscribe:]
  -[MNTimeballSubscriberStore unsubscribe:]
  -[MNTimeballSubscriberStore unsubscribeFromDestination:]


MNTraceBookmark : PBCodable /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices <NSCopying>
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasImageData
 @property  NSData *imageData

  // instance methods
  -[MNTraceBookmark isEqual:]
  -[MNTraceBookmark copyWithZone:]
  -[MNTraceBookmark .cxx_destruct]
  -[MNTraceBookmark dictionaryRepresentation]
  -[MNTraceBookmark timestamp]
  -[MNTraceBookmark hasTimestamp]
  -[MNTraceBookmark setTimestamp:]
  -[MNTraceBookmark writeTo:]
  -[MNTraceBookmark mergeFrom:]
  -[MNTraceBookmark readFrom:]
  -[MNTraceBookmark copyTo:]
  -[MNTraceBookmark imageData]
  -[MNTraceBookmark setHasTimestamp:]
  -[MNTraceBookmark setImageData:]
  -[MNTraceBookmark hasImageData]


MNTraceRecordingData : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  MNLocationDetails *initialUserLocationDetails
 @property  NSArray *waypoints
 @property  GEODirectionsRequest *initialDirectionsRequest
 @property  GEODirectionsResponse *initialDirectionsResponse
 @property  NSError *initialDirectionsRequestError
 @property  double initialDirectionsRequestTimestamp
 @property  double initialDirectionsResponseTimestamp

  // class methods
  +[MNTraceRecordingData supportsSecureCoding]

  // instance methods
  -[MNTraceRecordingData encodeWithCoder:]
  -[MNTraceRecordingData initWithCoder:]
  -[MNTraceRecordingData .cxx_destruct]
  -[MNTraceRecordingData waypoints]
  -[MNTraceRecordingData setWaypoints:]
  -[MNTraceRecordingData initialUserLocationDetails]
  -[MNTraceRecordingData initialDirectionsRequest]
  -[MNTraceRecordingData initialDirectionsResponse]
  -[MNTraceRecordingData initialDirectionsRequestError]
  -[MNTraceRecordingData initialDirectionsRequestTimestamp]
  -[MNTraceRecordingData initialDirectionsResponseTimestamp]
  -[MNTraceRecordingData setInitialDirectionsRequest:]
  -[MNTraceRecordingData setInitialDirectionsResponse:]
  -[MNTraceRecordingData setInitialDirectionsRequestError:]
  -[MNTraceRecordingData setInitialDirectionsRequestTimestamp:]
  -[MNTraceRecordingData setInitialDirectionsResponseTimestamp:]
  -[MNTraceRecordingData setInitialUserLocationDetails:]


MNXPCTransactionCounter : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNXPCTransactionCounter init]
  -[MNXPCTransactionCounter dealloc]
  -[MNXPCTransactionCounter count]
  -[MNXPCTransactionCounter .cxx_destruct]
  -[MNXPCTransactionCounter decrement]
  -[MNXPCTransactionCounter increment:]


MNAlternateRoutesUpdater : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *alternateRoutes

  // instance methods
  -[MNAlternateRoutesUpdater .cxx_destruct]
  -[MNAlternateRoutesUpdater updateForLocation:]
  -[MNAlternateRoutesUpdater alternateRoutes]
  -[MNAlternateRoutesUpdater setAlternateRoutes:forMainRoute:]
  -[MNAlternateRoutesUpdater updateForReroute:rerouteReason:]
  -[MNAlternateRoutesUpdater alternateRouteForLocation:]
  -[MNAlternateRoutesUpdater _findTrackedAlternateRouteMatching:]


_MNTrackedAlternateRoute : NSObject /usr/lib/libc++.1.dylib
 @property  MNActiveRouteInfo *alternateRoute
 @property  MNActiveRouteInfo *mainRoute
 @property  {?=If} divergenceCoordinate

  // instance methods
  -[_MNTrackedAlternateRoute .cxx_destruct]
  -[_MNTrackedAlternateRoute divergenceCoordinate]
  -[_MNTrackedAlternateRoute setAlternateRoute:]
  -[_MNTrackedAlternateRoute alternateRoute]
  -[_MNTrackedAlternateRoute setMainRoute:]
  -[_MNTrackedAlternateRoute setDivergenceCoordinate:]
  -[_MNTrackedAlternateRoute mainRoute]


MNLocationHistory : NSObject /usr/lib/libc++.1.dylib
 @property  <MNLocationHistoryProvider> *locationHistoryProvider
 @property  NSArray *locationHistory

  // instance methods
  -[MNLocationHistory init]
  -[MNLocationHistory .cxx_destruct]
  -[MNLocationHistory locationHistory]
  -[MNLocationHistory locationHistoryProvider]
  -[MNLocationHistory setLocationHistoryProvider:]


MNWalkingTurnByTurnLocationTracker : MNTurnByTurnLocationTracker
  // instance methods
  -[MNWalkingTurnByTurnLocationTracker transportType]
  -[MNWalkingTurnByTurnLocationTracker initWithNavigationSession:]
  -[MNWalkingTurnByTurnLocationTracker _newMapMatcherForRoute:]
  -[MNWalkingTurnByTurnLocationTracker _detectedMotionForLocation:]
  -[MNWalkingTurnByTurnLocationTracker _allowSwitchToTransportType:forLocation:]


MNCommuteDestinationSuggestion : NSObject /usr/lib/libc++.1.dylib <NSCopying, NSSecureCoding>
 @property  NSData *rawSuggestion
 @property  NSString *uniqueIdentifier
 @property  unsigned long type
 @property  NSString *name
 @property  GEOComposedWaypoint *waypoint
 @property  double weight
 @property  NSDate *expires
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  BOOL allDay

  // class methods
  +[MNCommuteDestinationSuggestion supportsSecureCoding]
  +[MNCommuteDestinationSuggestion _setupFakes]
  +[MNCommuteDestinationSuggestion _fakeBitsAndPiecesForSuggestion:]
  +[MNCommuteDestinationSuggestion fakeDestinationSuggestion:]
  +[MNCommuteDestinationSuggestion fakeDestinationSuggestion:completionHandler:]
  +[MNCommuteDestinationSuggestion fakeDestinationSuggestions]

  // instance methods
  -[MNCommuteDestinationSuggestion name]
  -[MNCommuteDestinationSuggestion copyWithZone:]
  -[MNCommuteDestinationSuggestion type]
  -[MNCommuteDestinationSuggestion setType:]
  -[MNCommuteDestinationSuggestion encodeWithCoder:]
  -[MNCommuteDestinationSuggestion initWithCoder:]
  -[MNCommuteDestinationSuggestion .cxx_destruct]
  -[MNCommuteDestinationSuggestion setName:]
  -[MNCommuteDestinationSuggestion startDate]
  -[MNCommuteDestinationSuggestion endDate]
  -[MNCommuteDestinationSuggestion uniqueIdentifier]
  -[MNCommuteDestinationSuggestion setStartDate:]
  -[MNCommuteDestinationSuggestion setEndDate:]
  -[MNCommuteDestinationSuggestion setWeight:]
  -[MNCommuteDestinationSuggestion weight]
  -[MNCommuteDestinationSuggestion setUniqueIdentifier:]
  -[MNCommuteDestinationSuggestion waypoint]
  -[MNCommuteDestinationSuggestion setWaypoint:]
  -[MNCommuteDestinationSuggestion setAllDay:]
  -[MNCommuteDestinationSuggestion isAllDay]
  -[MNCommuteDestinationSuggestion setExpires:]
  -[MNCommuteDestinationSuggestion expires]
  -[MNCommuteDestinationSuggestion rawSuggestion]
  -[MNCommuteDestinationSuggestion setRawSuggestion:]


MNPreloadSession : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNPreloadSession preloadSessionForRoute:loggingEnabled:minimalDebugging:fullDebugging:delegate:traits:withBatteryHandler:]


MNLocation : CLLocation /usr/lib/libsqlite3.dylib
 @property  int _nav_source
 @property  unsigned long traceIndex
 @property  unsigned long state
 @property  GEORoadMatch *roadMatch
 @property  CLLocation *rawLocation
 @property  GEORouteMatch *routeMatch
 @property  GEONavigationMatchInfo *detailedMatchInfo
 @property  NSString *roadName
 @property  NSString *shieldText
 @property  long long shieldType
 @property  unsigned int roadLineType
 @property  int rampType
 @property  unsigned long speedLimit
 @property  BOOL speedLimitIsMPH
 @property  long long speedLimitShieldType
 @property  BOOL isDirectional
 @property  BOOL locationUnreliable
 @property  unsigned long stepIndex
 @property  BOOL isProjected
 @property  NSDate *expirationDate
 @property  NSDate *originalDate
 @property  {CLLocationCoordinate2D=dd} rawShiftedCoordinate
 @property  BOOL isLeeched

  // instance methods
  -[MNLocation .cxx_destruct]
  -[MNLocation state]
  -[MNLocation expirationDate]
  -[MNLocation setExpirationDate:]
  -[MNLocation setState:]
  -[MNLocation initWithClientLocation:]
  -[MNLocation matchInfo]
  -[MNLocation rampType]
  -[MNLocation speedLimit]
  -[MNLocation speedLimitIsMPH]
  -[MNLocation shieldText]
  -[MNLocation setShieldText:]
  -[MNLocation shieldType]
  -[MNLocation stepIndex]
  -[MNLocation routeMatch]
  -[MNLocation setRouteMatch:]
  -[MNLocation roadMatch]
  -[MNLocation setLocationUnreliable:]
  -[MNLocation detailedMatchInfo]
  -[MNLocation setDetailedMatchInfo:]
  -[MNLocation setShieldType:]
  -[MNLocation roadName]
  -[MNLocation setRoadName:]
  -[MNLocation _roadFeature]
  -[MNLocation initWithRawLocation:]
  -[MNLocation rawLocation]
  -[MNLocation locationUnreliable]
  -[MNLocation originalDate]
  -[MNLocation setOriginalDate:]
  -[MNLocation _navigation_routeMatch]
  -[MNLocation _navigation_hasValidCourse]
  -[MNLocation _navigation_isStale]
  -[MNLocation setRampType:]
  -[MNLocation initWithLocationDetails:route:]
  -[MNLocation initWithRouteMatch:rawLocation:locationMatchType:]
  -[MNLocation initWithRoadMatch:rawLocation:locationMatchType:]
  -[MNLocation initWithRawLocation:locationMatchType:]
  -[MNLocation roadLineType]
  -[MNLocation setRoadLineType:]
  -[MNLocation setSpeedLimit:]
  -[MNLocation setSpeedLimitIsMPH:]
  -[MNLocation speedLimitShieldType]
  -[MNLocation setSpeedLimitShieldType:]
  -[MNLocation initWithLocationDetails:]
  -[MNLocation _navigation_rawShiftedCoordinate]
  -[MNLocation _navigation_detailedMatchInfo]
  -[MNLocation setTraceIndex:]
  -[MNLocation traceIndex]
  -[MNLocation _nav_source]
  -[MNLocation setRawShiftedCoordinate:]
  -[MNLocation setIsDirectional:]
  -[MNLocation setRoadMatch:]
  -[MNLocation setRawLocation:]
  -[MNLocation isProjected]
  -[MNLocation _referenceFrameAsString:]
  -[MNLocation propagatedLocationForTimeInterval:shouldProjectAlongRoute:]
  -[MNLocation isDirectional]
  -[MNLocation rawShiftedCoordinate]
  -[MNLocation isLeeched]
  -[MNLocation setIsLeeched:]
  -[MNLocation initWithGEOLocation:]


MNHybridLocationProvider : NSObject /usr/lib/libc++.1.dylib <MNLocationProviderDelegate, MNLocationProvider>
 @property  unsigned long mode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  double desiredAccuracy
 @property  BOOL locationServicesPreferencesDialogEnabled
 @property  double distanceFilter
 @property  BOOL matchInfoEnabled
 @property  int headingOrientation
 @property  @? authorizationRequestBlock
 @property  double expectedGpsUpdateInterval
 @property  int authorizationStatus
 @property  long long activityType
 @property  BOOL usesCLMapCorrection
 @property  BOOL isSimulation
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale

  // instance methods
  -[MNHybridLocationProvider init]
  -[MNHybridLocationProvider delegate]
  -[MNHybridLocationProvider setDelegate:]
  -[MNHybridLocationProvider .cxx_destruct]
  -[MNHybridLocationProvider setMode:]
  -[MNHybridLocationProvider activityType]
  -[MNHybridLocationProvider mode]
  -[MNHybridLocationProvider startUpdatingLocation]
  -[MNHybridLocationProvider stopUpdatingLocation]
  -[MNHybridLocationProvider distanceFilter]
  -[MNHybridLocationProvider setDistanceFilter:]
  -[MNHybridLocationProvider desiredAccuracy]
  -[MNHybridLocationProvider setDesiredAccuracy:]
  -[MNHybridLocationProvider setActivityType:]
  -[MNHybridLocationProvider matchInfoEnabled]
  -[MNHybridLocationProvider setMatchInfoEnabled:]
  -[MNHybridLocationProvider startUpdatingHeading]
  -[MNHybridLocationProvider requestWhenInUseAuthorization]
  -[MNHybridLocationProvider authorizationStatus]
  -[MNHybridLocationProvider initWithEffectiveBundleIdentifier:]
  -[MNHybridLocationProvider initWithEffectiveBundle:]
  -[MNHybridLocationProvider expectedGpsUpdateInterval]
  -[MNHybridLocationProvider setHeadingOrientation:]
  -[MNHybridLocationProvider headingOrientation]
  -[MNHybridLocationProvider stopUpdatingHeading]
  -[MNHybridLocationProvider requestWhenInUseAuthorizationWithPrompt]
  -[MNHybridLocationProvider isLocationServicesPreferencesDialogEnabled]
  -[MNHybridLocationProvider setLocationServicesPreferencesDialogEnabled:]
  -[MNHybridLocationProvider startUpdatingVehicleSpeed]
  -[MNHybridLocationProvider stopUpdatingVehicleSpeed]
  -[MNHybridLocationProvider startUpdatingVehicleHeading]
  -[MNHybridLocationProvider stopUpdatingVehicleHeading]
  -[MNHybridLocationProvider effectiveBundle]
  -[MNHybridLocationProvider isSimulation]
  -[MNHybridLocationProvider _sharedInit]
  -[MNHybridLocationProvider locationProvider:didUpdateLocation:]
  -[MNHybridLocationProvider locationProvider:didUpdateHeading:]
  -[MNHybridLocationProvider locationProvider:didReceiveError:]
  -[MNHybridLocationProvider locationProviderDidChangeAuthorizationStatus:]
  -[MNHybridLocationProvider locationProviderShouldPauseLocationUpdates:]
  -[MNHybridLocationProvider locationProviderDidPauseLocationUpdates:]
  -[MNHybridLocationProvider locationProviderDidResumeLocationUpdates:]
  -[MNHybridLocationProvider locationProvider:didUpdateVehicleSpeed:timestamp:]
  -[MNHybridLocationProvider locationProvider:didUpdateVehicleHeading:timestamp:]
  -[MNHybridLocationProvider setEffectiveBundle:]
  -[MNHybridLocationProvider effectiveBundleIdentifier]
  -[MNHybridLocationProvider setEffectiveBundleIdentifier:]
  -[MNHybridLocationProvider authorizationRequestBlock]
  -[MNHybridLocationProvider setAuthorizationRequestBlock:]
  -[MNHybridLocationProvider usesCLMapCorrection]
  -[MNHybridLocationProvider isTracePlayer]
  -[MNHybridLocationProvider timeScale]
  -[MNHybridLocationProvider resetForActiveTileGroupChanged]
  -[MNHybridLocationProvider traceVersion]
  -[MNHybridLocationProvider _setEffectiveAccuracy:]
  -[MNHybridLocationProvider coreLocationProvider]
  -[MNHybridLocationProvider leechedLocationProvider]


MNNavigationDetails : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSMutableDictionary *trackedCommuteDestinations
 @property  NSMapTable *routeIDLookup
 @property  NSMutableDictionary *routeLookup
 @property  unsigned long state
 @property  int navigationType
 @property  int desiredNavigationType
 @property  int desiredTransportType
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  MNLocation *location
 @property  BOOL guidancePromptsEnabled
 @property  BOOL isDetour
 @property  int headingOrientation
 @property  int navigationState
 @property  GEONavigationGuidanceState *guidanceState
 @property  BOOL isInPreArrivalState
 @property  GEOComposedRoute *currentRoute
 @property  unsigned long routeIndex
 @property  unsigned long reconnectionRouteIndex
 @property  unsigned long selectedPreviewRouteIndex
 @property  NSArray *previewRoutes
 @property  NSArray *alternateRoutes
 @property  GEOComposedWaypoint *originalOrigin
 @property  GEOComposedWaypoint *originalDestination
 @property  unsigned long stepIndex
 @property  unsigned long legIndex
 @property  double proceedToRouteDistance
 @property  NSString *displayString
 @property  double remainingTime
 @property  double remainingDistance
 @property  unsigned long closestStepIndex
 @property  double distanceUntilSign
 @property  double timeUntilSign
 @property  double distanceUntilManeuver
 @property  double timeUntilManeuver
 @property  NSString *currentVoiceLanguage
 @property  NSArray *possibleCommuteDestinations
 @property  NSString *tracePath
 @property  BOOL traceIsPlaying
 @property  double traceDuration
 @property  double tracePosition
 @property  NSArray *traceBookmarks

  // class methods
  +[MNNavigationDetails supportsSecureCoding]

  // instance methods
  -[MNNavigationDetails init]
  -[MNNavigationDetails encodeWithCoder:]
  -[MNNavigationDetails initWithCoder:]
  -[MNNavigationDetails .cxx_destruct]
  -[MNNavigationDetails state]
  -[MNNavigationDetails setState:]
  -[MNNavigationDetails location]
  -[MNNavigationDetails setHeadingOrientation:]
  -[MNNavigationDetails headingOrientation]
  -[MNNavigationDetails setLocation:]
  -[MNNavigationDetails displayString]
  -[MNNavigationDetails setDisplayString:]
  -[MNNavigationDetails routeIndex]
  -[MNNavigationDetails remainingDistance]
  -[MNNavigationDetails setRemainingDistance:]
  -[MNNavigationDetails remainingTime]
  -[MNNavigationDetails setRemainingTime:]
  -[MNNavigationDetails directionsResponse]
  -[MNNavigationDetails stepIndex]
  -[MNNavigationDetails navigationState]
  -[MNNavigationDetails setNavigationState:]
  -[MNNavigationDetails setGuidancePromptsEnabled:]
  -[MNNavigationDetails setDirectionsResponse:]
  -[MNNavigationDetails directionsRequest]
  -[MNNavigationDetails guidancePromptsEnabled]
  -[MNNavigationDetails navigationType]
  -[MNNavigationDetails currentRoute]
  -[MNNavigationDetails setAlternateRoutes:]
  -[MNNavigationDetails alternateRoutes]
  -[MNNavigationDetails setNavigationType:]
  -[MNNavigationDetails setTraceIsPlaying:]
  -[MNNavigationDetails setTracePosition:]
  -[MNNavigationDetails setCurrentRoute:withAlternateRoutes:]
  -[MNNavigationDetails setDirectionsRequest:]
  -[MNNavigationDetails updateLocationFromDetails:]
  -[MNNavigationDetails setProceedToRouteDistance:]
  -[MNNavigationDetails setClosestStepIndex:]
  -[MNNavigationDetails setDistanceUntilSign:]
  -[MNNavigationDetails setTimeUntilSign:]
  -[MNNavigationDetails setDistanceUntilManeuver:]
  -[MNNavigationDetails setTimeUntilManeuver:]
  -[MNNavigationDetails updateETATrafficForRoute:]
  -[MNNavigationDetails setPreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationDetails updateWithTrafficIncidentAlert:]
  -[MNNavigationDetails removeTrafficIncidentAlert:]
  -[MNNavigationDetails updatePossibleCommuteDestinations:]
  -[MNNavigationDetails setCurrentVoiceLanguage:]
  -[MNNavigationDetails currentVoiceLanguage]
  -[MNNavigationDetails setTracePath:]
  -[MNNavigationDetails setTraceDuration:]
  -[MNNavigationDetails tracePath]
  -[MNNavigationDetails traceDuration]
  -[MNNavigationDetails setDesiredNavigationType:]
  -[MNNavigationDetails setDesiredTransportType:]
  -[MNNavigationDetails setIsDetour:]
  -[MNNavigationDetails routeInfoForRoute:]
  -[MNNavigationDetails isInPreArrivalState]
  -[MNNavigationDetails desiredNavigationType]
  -[MNNavigationDetails desiredTransportType]
  -[MNNavigationDetails reconnectionRouteIndex]
  -[MNNavigationDetails distanceUntilSign]
  -[MNNavigationDetails timeUntilSign]
  -[MNNavigationDetails distanceUntilManeuver]
  -[MNNavigationDetails timeUntilManeuver]
  -[MNNavigationDetails originalOrigin]
  -[MNNavigationDetails originalDestination]
  -[MNNavigationDetails isDetour]
  -[MNNavigationDetails possibleCommuteDestinations]
  -[MNNavigationDetails traceBookmarks]
  -[MNNavigationDetails traceIsPlaying]
  -[MNNavigationDetails tracePosition]
  -[MNNavigationDetails routeLookupIDs]
  -[MNNavigationDetails setOriginalDestination:]
  -[MNNavigationDetails copySerializableValuesFrom:]
  -[MNNavigationDetails previewRoutes]
  -[MNNavigationDetails selectedPreviewRouteIndex]
  -[MNNavigationDetails setIsInPreArrivalState:]
  -[MNNavigationDetails routeInfoForID:]
  -[MNNavigationDetails setTraceBookmarks:]
  -[MNNavigationDetails guidanceState]
  -[MNNavigationDetails proceedToRouteDistance]
  -[MNNavigationDetails closestStepIndex]
  -[MNNavigationDetails trackedCommuteDestinations]
  -[MNNavigationDetails setTrackedCommuteDestinations:]
  -[MNNavigationDetails routeLookup]
  -[MNNavigationDetails _updateRouteIDLookup]
  -[MNNavigationDetails routeIDLookup]
  -[MNNavigationDetails legIndex]
  -[MNNavigationDetails setGuidanceState:]
  -[MNNavigationDetails setOriginalOrigin:]


MNNavigationStatePredictingDestination : MNNavigationState <MNCommuteSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationStatePredictingDestination type]
  -[MNNavigationStatePredictingDestination .cxx_destruct]
  -[MNNavigationStatePredictingDestination enterState]
  -[MNNavigationStatePredictingDestination setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationStatePredictingDestination startNavigationWithDetails:activeBlock:]
  -[MNNavigationStatePredictingDestination stopPredictingDestinations]
  -[MNNavigationStatePredictingDestination traceManager]
  -[MNNavigationStatePredictingDestination leaveState]
  -[MNNavigationStatePredictingDestination requiresHighMemoryThreshold]
  -[MNNavigationStatePredictingDestination desiredLocationProviderType]
  -[MNNavigationStatePredictingDestination commuteSession:didUpdateDestinations:]
  -[MNNavigationStatePredictingDestination commuteSessionDidArrive:]


MNRouteCoordinate : PBCodable /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices <NSCopying>
 @property  BOOL hasIndex
 @property  unsigned int index
 @property  BOOL hasOffset
 @property  float offset

  // instance methods
  -[MNRouteCoordinate isEqual:]
  -[MNRouteCoordinate copyWithZone:]
  -[MNRouteCoordinate index]
  -[MNRouteCoordinate dictionaryRepresentation]
  -[MNRouteCoordinate writeTo:]
  -[MNRouteCoordinate setOffset:]
  -[MNRouteCoordinate mergeFrom:]
  -[MNRouteCoordinate readFrom:]
  -[MNRouteCoordinate copyTo:]
  -[MNRouteCoordinate offset]
  -[MNRouteCoordinate setIndex:]
  -[MNRouteCoordinate setHasIndex:]
  -[MNRouteCoordinate hasIndex]
  -[MNRouteCoordinate setHasOffset:]
  -[MNRouteCoordinate hasOffset]


MNGuidanceEventManager : NSObject /usr/lib/libc++.1.dylib <MNGuidanceManager, MNTimeManagerObserver>
 @property  NSArray *events
 @property  MNLocation *location
 @property  double speed
 @property  BOOL isInPreArrivalState
 @property  <MNGuidanceManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNGuidanceEventManager dealloc]
  -[MNGuidanceEventManager delegate]
  -[MNGuidanceEventManager setDelegate:]
  -[MNGuidanceEventManager .cxx_destruct]
  -[MNGuidanceEventManager stop]
  -[MNGuidanceEventManager reset]
  -[MNGuidanceEventManager location]
  -[MNGuidanceEventManager events]
  -[MNGuidanceEventManager speed]
  -[MNGuidanceEventManager setSpeed:]
  -[MNGuidanceEventManager setLocation:]
  -[MNGuidanceEventManager updateDestination:]
  -[MNGuidanceEventManager setJunctionViewImageWidth:height:]
  -[MNGuidanceEventManager updateForReroute:]
  -[MNGuidanceEventManager timeSinceLastAnnouncement]
  -[MNGuidanceEventManager timeUntilNextAnnouncement]
  -[MNGuidanceEventManager durationOfEvent:announcementIndex:distance:]
  -[MNGuidanceEventManager isInPreArrivalState]
  -[MNGuidanceEventManager setIsInPreArrivalState:]
  -[MNGuidanceEventManager updateGuidanceForLocation:navigatorState:]
  -[MNGuidanceEventManager repeatLastGuidanceAnnouncement:]
  -[MNGuidanceEventManager addInjectedEvent:]
  -[MNGuidanceEventManager updateForReturnToRoute]
  -[MNGuidanceEventManager _initSpecialGuidanceEvents]
  -[MNGuidanceEventManager _markEventSpoken:]
  -[MNGuidanceEventManager _cacheStartingAudioEvents]
  -[MNGuidanceEventManager _hasSpokenEvent:]
  -[MNGuidanceEventManager _maneuverWithTitle:detail:type:shieldText:shieldID:]
  -[MNGuidanceEventManager _adjustedVehicleSpeed]
  -[MNGuidanceEventManager _isValidEvent:]
  -[MNGuidanceEventManager _notifySpeechEvent:variant:ignorePromptStyle:]
  -[MNGuidanceEventManager _timeUntilEventTrigger:]
  -[MNGuidanceEventManager _cacheAudioEventIfNecessary:]
  -[MNGuidanceEventManager _junctionViewEvents]
  -[MNGuidanceEventManager _filterValidEvents]
  -[MNGuidanceEventManager _cacheValidAudioEvents]
  -[MNGuidanceEventManager _stepDidChange]
  -[MNGuidanceEventManager _considerAnnouncements]
  -[MNGuidanceEventManager _considerHaptics]
  -[MNGuidanceEventManager _considerLaneGuidance]
  -[MNGuidanceEventManager _considerSignGuidance]
  -[MNGuidanceEventManager _considerStickiness]
  -[MNGuidanceEventManager _considerJunctionViewGuidance]
  -[MNGuidanceEventManager _cacheEndingAudioEvents]
  -[MNGuidanceEventManager _isEventValid:start:end:]
  -[MNGuidanceEventManager _spokenEventsRemainingInStep]
  -[MNGuidanceEventManager _indexForEventUUID:]
  -[MNGuidanceEventManager _notifyAnalyticsForNewEvents:previousEvents:]
  -[MNGuidanceEventManager _handleJunctionViewInfo:]
  -[MNGuidanceEventManager _trafficColorForRoute:traffic:distanceRemaining:]
  -[MNGuidanceEventManager _timeRemainingForEvent:]
  -[MNGuidanceEventManager _selectAnnouncementForEvent:withTimeRemaining:withMinIndex:selectedIndex:]
  -[MNGuidanceEventManager _serverStringDictionaryForEvent:spoken:]
  -[MNGuidanceEventManager timeManagerDidChangeProvider:]
  -[MNGuidanceEventManager initWithNavigationSession:isReconnecting:]
  -[MNGuidanceEventManager _shouldUseLocation:]


MNNavigationStateGuidanceTurnByTurn : MNNavigationStateGuidance
  // instance methods
  -[MNNavigationStateGuidanceTurnByTurn type]
  -[MNNavigationStateGuidanceTurnByTurn enterState]
  -[MNNavigationStateGuidanceTurnByTurn setFullGuidanceMode:]


MNTrafficIncidentAlertDetailsKey : MNTrafficIncidentAlertDetails
  // instance methods
  -[MNTrafficIncidentAlertDetailsKey isEqual:]


MNSpokenInstructionContents : MNListInstructionContents <MNInstructionContents>
 @property  <GEOServerFormattedString> *proceedInstructionFormat
 @property  <GEOServerFormattedString> *continueInstructionFormat
 @property  <GEOServerFormattedString> *initialInstructionFormat
 @property  <GEOServerFormattedString> *prepareInstructionFormat
 @property  NSArray *executionInstructionFormats
 @property  long long context
 @property  int numSignsWanted
 @property  BOOL suppressNames
 @property  NSString *roadName
 @property  BOOL hasServerContent
 @property  BOOL suppressFallback

  // class methods
  +[MNSpokenInstructionContents contentsWithStep:transportType:destination:options:isSecondary:]

  // instance methods
  -[MNSpokenInstructionContents init]
  -[MNSpokenInstructionContents .cxx_destruct]
  -[MNSpokenInstructionContents context]
  -[MNSpokenInstructionContents setContext:]
  -[MNSpokenInstructionContents _populateFromStep:]
  -[MNSpokenInstructionContents instructionForStage:distance:]
  -[MNSpokenInstructionContents hasServerContent]
  -[MNSpokenInstructionContents setProceedInstructionFormat:]
  -[MNSpokenInstructionContents setContinueInstructionFormat:]
  -[MNSpokenInstructionContents setInitialInstructionFormat:]
  -[MNSpokenInstructionContents setPrepareInstructionFormat:]
  -[MNSpokenInstructionContents setExecutionInstructionFormats:]
  -[MNSpokenInstructionContents executionInstructionFormats]
  -[MNSpokenInstructionContents proceedInstructionFormat]
  -[MNSpokenInstructionContents continueInstructionFormat]
  -[MNSpokenInstructionContents prepareInstructionFormat]
  -[MNSpokenInstructionContents initialInstructionFormat]
  -[MNSpokenInstructionContents _instructionsForFormats:distance:]
  -[MNSpokenInstructionContents numSignsWanted]
  -[MNSpokenInstructionContents instructionWithShorterAlternatives:]


MNNavigationStateNoDestination : MNNavigationState
  // instance methods
  -[MNNavigationStateNoDestination type]
  -[MNNavigationStateNoDestination setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationStateNoDestination startNavigationWithDetails:activeBlock:]
  -[MNNavigationStateNoDestination startPredictingDestinationsWithHandler:]
  -[MNNavigationStateNoDestination desiredLocationProviderType]


MNTracePlayer : NSObject /usr/lib/libc++.1.dylib <MNTracePlayerSchedulerDelegate, MNTimeProvider>
 @property  MNTrace *trace
 @property  BOOL isPlaying
 @property  BOOL isPaused
 @property  double position
 @property  double duration
 @property  int mainTransportType
 @property  NSDate *currentLocationDate
 @property  NSData *selectedRouteID
 @property  unsigned long selectedRouteIndex
 @property  double speedMultiplier
 @property  BOOL shouldPlayETARequests
 @property  MNSessionUpdateManager *sessionUpdater
 @property  BOOL forceDirectionsResponsesFromTrace
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double currentTime

  // instance methods
  -[MNTracePlayer dealloc]
  -[MNTracePlayer .cxx_destruct]
  -[MNTracePlayer pause]
  -[MNTracePlayer resume]
  -[MNTracePlayer stop]
  -[MNTracePlayer initWithPath:]
  -[MNTracePlayer start]
  -[MNTracePlayer addObserver:]
  -[MNTracePlayer removeObserver:]
  -[MNTracePlayer position]
  -[MNTracePlayer duration]
  -[MNTracePlayer isPaused]
  -[MNTracePlayer trace]
  -[MNTracePlayer currentTime]
  -[MNTracePlayer isPlaying]
  -[MNTracePlayer selectedRouteIndex]
  -[MNTracePlayer mainTransportType]
  -[MNTracePlayer sessionUpdater]
  -[MNTracePlayer setSpeedMultiplier:]
  -[MNTracePlayer setShouldPlayETARequests:]
  -[MNTracePlayer setForceDirectionsResponsesFromTrace:]
  -[MNTracePlayer startAtLocationIndex:]
  -[MNTracePlayer speedMultiplier]
  -[MNTracePlayer requestDirectionsNearTimestamp:withHandler:errorHandler:]
  -[MNTracePlayer tracePlayerScheduler:didUpdatePosition:]
  -[MNTracePlayer initWithTrace:]
  -[MNTracePlayer initWithPath:outError:]
  -[MNTracePlayer _createTimelineStreams]
  -[MNTracePlayer _locationWithCurrentDate:]
  -[MNTracePlayer _responseTimeForRequestAtIndex:]
  -[MNTracePlayer jumpToTime:]
  -[MNTracePlayer requestDirectionsWithHandler:errorHandler:]
  -[MNTracePlayer jumpToLocationAtIndex:]
  -[MNTracePlayer skipByTimeInterval:]
  -[MNTracePlayer jumpToBookmarkAtIndex:]
  -[MNTracePlayer currentLocationDate]
  -[MNTracePlayer selectedRouteID]
  -[MNTracePlayer shouldPlayETARequests]
  -[MNTracePlayer forceDirectionsResponsesFromTrace]


MNVoiceLanguageUtil : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNVoiceLanguageUtil systemDefaultVoiceLanguage]
  +[MNVoiceLanguageUtil systemDefaultVoiceLanguageWithSource:]
  +[MNVoiceLanguageUtil _uiVoiceLanguage]


MNCommuteSession : NSObject /usr/lib/libc++.1.dylib <MNCommuteDestinationUpdaterDelegate, MNCommuteDestinationObserver, MNLocationManagerObserver, MNSuggestionsManagerObserver>
 @property  MNCommuteDestinationUpdater *comparisonDestinationStartTime
 @property  unsigned long requestedCommuteSessionState
 @property  unsigned long commuteSessionState
 @property  MNNavigationTraceManager *traceManager
 @property  NSArray *rankedDestinations
 @property  NSString *suggestionsDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCommuteSession init]
  -[MNCommuteSession dealloc]
  -[MNCommuteSession .cxx_destruct]
  -[MNCommuteSession stop]
  -[MNCommuteSession start]
  -[MNCommuteSession addObserver:]
  -[MNCommuteSession removeObserver:]
  -[MNCommuteSession locationManagerDidResumeLocationUpdates:]
  -[MNCommuteSession locationManagerDidPauseLocationUpdates:]
  -[MNCommuteSession locationManagerUpdatedLocation:]
  -[MNCommuteSession locationManagerFailedToUpdateLocation:withError:]
  -[MNCommuteSession locationManagerDidReset:]
  -[MNCommuteSession locationManagerShouldPauseLocationUpdates:]
  -[MNCommuteSession locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNCommuteSession locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNCommuteSession addSuggestion:]
  -[MNCommuteSession updateLocation:]
  -[MNCommuteSession traceManager]
  -[MNCommuteSession commuteDestination:didChangeInvalid:]
  -[MNCommuteSession suggestionsManager:didAddSuggestion:]
  -[MNCommuteSession destinationUpdater:didUpdateDestination:]
  -[MNCommuteSession destinationUpdaterDidArrive:]
  -[MNCommuteSession setCommuteSessionState:]
  -[MNCommuteSession startETAUpdatesWithInterval:]
  -[MNCommuteSession stopETAUpdates]
  -[MNCommuteSession commuteSessionState]
  -[MNCommuteSession requestedCommuteSessionState]
  -[MNCommuteSession setRequestedCommuteSessionState:]
  -[MNCommuteSession _updateSuggestionsManagerState]
  -[MNCommuteSession _updatedDestinations]
  -[MNCommuteSession updateComparisonStartDate]
  -[MNCommuteSession comparisonDestinationStartTime]
  -[MNCommuteSession setComparisonDestinationStartTime:]
  -[MNCommuteSession rankedDestinations]
  -[MNCommuteSession _resetRankedDestinations]
  -[MNCommuteSession initWithTraceName:isTraceRecording:]
  -[MNCommuteSession suggestionsDescription]


MNRouteManager : NSObject /usr/lib/libc++.1.dylib <MNLocationManagerObserver>
 @property  GEOComposedRoute *currentRoute
 @property  MNActiveRouteInfo *currentRouteInfo
 @property  GEOETARoute *etaRoute
 @property  NSArray *alternateRoutes
 @property  NSArray *allRoutes
 @property  NSArray *contingencyRouteSegments
 @property  NSArray *previewRoutes
 @property  unsigned long selectedRouteIndex
 @property  GEORouteAttributes *routeAttributes
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  NSString *requestingAppIdentifier
 @property  GEOComposedWaypoint *originalDestination
 @property  GEOComposedRoute *originalRoute
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteManager init]
  -[MNRouteManager dealloc]
  -[MNRouteManager open]
  -[MNRouteManager close]
  -[MNRouteManager .cxx_destruct]
  -[MNRouteManager initWithAuditToken:]
  -[MNRouteManager locationManagerDidResumeLocationUpdates:]
  -[MNRouteManager locationManagerDidPauseLocationUpdates:]
  -[MNRouteManager routeAttributes]
  -[MNRouteManager originalRoute]
  -[MNRouteManager selectedRouteIndex]
  -[MNRouteManager setSelectedRouteIndex:]
  -[MNRouteManager directionsResponse]
  -[MNRouteManager updateForLocation:]
  -[MNRouteManager directionsRequest]
  -[MNRouteManager requestingAppIdentifier]
  -[MNRouteManager currentRoute]
  -[MNRouteManager locationManagerUpdatedLocation:]
  -[MNRouteManager locationManagerFailedToUpdateLocation:withError:]
  -[MNRouteManager locationManagerDidReset:]
  -[MNRouteManager locationManagerShouldPauseLocationUpdates:]
  -[MNRouteManager locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNRouteManager locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNRouteManager allRoutes]
  -[MNRouteManager alternateRoutes]
  -[MNRouteManager etaRoute]
  -[MNRouteManager currentRouteInfo]
  -[MNRouteManager contingencyRouteSegments]
  -[MNRouteManager originalDestination]
  -[MNRouteManager previewRoutes]
  -[MNRouteManager _clearPreloader]
  -[MNRouteManager updateWithAlternateRoutes:]
  -[MNRouteManager _createContingencyRoutesForResponse:]
  -[MNRouteManager _updatePreloaderForRoute:]
  -[MNRouteManager updateWithInitialDirectionsRequest:directionsResponse:waypoints:]
  -[MNRouteManager updateWithPreviewRoutes:selectedRouteIndex:]
  -[MNRouteManager updateWithStartNavigationDetails:]
  -[MNRouteManager updateForReroute:rerouteReason:request:response:]
  -[MNRouteManager clearCurrentRoute]


MNNavigationSession : NSObject /usr/lib/libc++.1.dylib <GEOMotionContextDelegate, MNGuidanceManagerDelegate, MNLocationManagerHeadingObserver, MNLocationManagerObserver, MNLocationTrackerDelegate, MNNavigationAudioSessionDelegate, MNTimeAndDistanceUpdaterDelegate, MNTracePlayerObserver, MNVoiceControllerObserver, MNSessionUpdateManagerDelegate>
 @property  BOOL traceIsPlaying
 @property  GEOComposedWaypoint *destination
 @property  GEOApplicationAuditToken *auditToken
 @property  MNRouteManager *routeManager
 @property  GEOMotionContext *motionContext
 @property  <MNAudioSession> *audioSession
 @property  MNNavigationTraceManager *traceManager
 @property  BOOL isAllowedToSwitchTransportTypes
 @property  int navigationType
 @property  MNLocation *lastMatchedLocation
 @property  int navigationState
 @property  double remainingTime
 @property  double remainingDistance
 @property  double distanceToManeuverStart
 @property  double distanceToManeuverEnd
 @property  BOOL guidancePromptsEnabled
 @property  BOOL isConnectedToCarplay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationSession init]
  -[MNNavigationSession dealloc]
  -[MNNavigationSession .cxx_destruct]
  -[MNNavigationSession auditToken]
  -[MNNavigationSession addObserver:]
  -[MNNavigationSession removeObserver:]
  -[MNNavigationSession destination]
  -[MNNavigationSession locationManagerDidResumeLocationUpdates:]
  -[MNNavigationSession locationManagerDidPauseLocationUpdates:]
  -[MNNavigationSession remainingDistance]
  -[MNNavigationSession remainingTime]
  -[MNNavigationSession navigationState]
  -[MNNavigationSession setGuidancePromptsEnabled:]
  -[MNNavigationSession setIsNavigatingInLowGuidance:]
  -[MNNavigationSession setIsConnectedToCarplay:]
  -[MNNavigationSession motionContextDidUpdateMotion:]
  -[MNNavigationSession motionContext]
  -[MNNavigationSession guidancePromptsEnabled]
  -[MNNavigationSession isConnectedToCarplay]
  -[MNNavigationSession navigationType]
  -[MNNavigationSession audioSession]
  -[MNNavigationSession setAudioSession:]
  -[MNNavigationSession locationManagerUpdatedLocation:]
  -[MNNavigationSession locationManagerFailedToUpdateLocation:withError:]
  -[MNNavigationSession locationManagerDidReset:]
  -[MNNavigationSession locationManagerShouldPauseLocationUpdates:]
  -[MNNavigationSession locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationSession locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationSession locationManagerUpdatedHeading:]
  -[MNNavigationSession _startLocationUpdates]
  -[MNNavigationSession _stopLocationUpdates]
  -[MNNavigationSession _startAudioSession]
  -[MNNavigationSession _stopAudioSession]
  -[MNNavigationSession locationTracker:didChangeState:]
  -[MNNavigationSession locationTrackerDidEnterPreArrivalState:]
  -[MNNavigationSession locationTrackerDidArrive:]
  -[MNNavigationSession locationTrackerDidTimeoutInArrivalRegion:]
  -[MNNavigationSession locationTracker:didUpdateMatchedLocation:]
  -[MNNavigationSession locationTracker:matchedToStepIndex:legIndex:]
  -[MNNavigationSession locationTracker:didUpdateETAForRoute:]
  -[MNNavigationSession locationTrackerWillReroute:]
  -[MNNavigationSession locationTracker:didSuppressReroute:]
  -[MNNavigationSession locationTrackerDidCancelReroute:]
  -[MNNavigationSession locationTracker:didReroute:newAlternateRoutes:rerouteReason:request:response:]
  -[MNNavigationSession locationTracker:didFailRerouteWithError:]
  -[MNNavigationSession locationTracker:didUpdateAlternateRoutes:]
  -[MNNavigationSession locationTracker:didSwitchToNewTransportType:newRoute:request:response:]
  -[MNNavigationSession locationTracker:receivedTrafficIncidentAlert:responseCallback:]
  -[MNNavigationSession locationTracker:invalidatedTrafficIncidentAlert:]
  -[MNNavigationSession locationTracker:updatedTrafficIncidentAlert:]
  -[MNNavigationSession updateManager:willSendTransitUpdateRequests:]
  -[MNNavigationSession updateManager:didReceiveTransitUpdateResponse:]
  -[MNNavigationSession updateManager:willSendTransitUpdateRequestForRouteIDs:]
  -[MNNavigationSession updateManager:didReceiveTransitUpdates:]
  -[MNNavigationSession updateManager:didReceiveTransitError:]
  -[MNNavigationSession updateManager:willSendETARequest:]
  -[MNNavigationSession updateManager:didReceiveETAResponse:toRequest:]
  -[MNNavigationSession updateManager:didUpdateETAForRouteInfo:]
  -[MNNavigationSession updateManager:didReceiveETAError:]
  -[MNNavigationSession wantsETAUpdates]
  -[MNNavigationSession routeInfoForUpdateManager:]
  -[MNNavigationSession userLocationForUpdateManager:]
  -[MNNavigationSession lastMatchedLocation]
  -[MNNavigationSession traceJumpedInTime]
  -[MNNavigationSession vibrateForPrompt:]
  -[MNNavigationSession updateDestination:]
  -[MNNavigationSession resumeOriginalDestination]
  -[MNNavigationSession switchToRoute:]
  -[MNNavigationSession stopCurrentGuidancePrompt]
  -[MNNavigationSession setJunctionViewImageWidth:height:]
  -[MNNavigationSession traceManager]
  -[MNNavigationSession routeManager]
  -[MNNavigationSession timeSinceLastAnnouncement]
  -[MNNavigationSession timeUntilNextAnnouncement]
  -[MNNavigationSession isCurrentlySpeaking]
  -[MNNavigationSession tracePlayerDidStart:]
  -[MNNavigationSession tracePlayerDidStop:]
  -[MNNavigationSession tracePlayerDidPause:]
  -[MNNavigationSession tracePlayerDidResume:]
  -[MNNavigationSession tracePlayer:didSeekToTransportType:]
  -[MNNavigationSession tracePlayer:didSeekToTime:fromTime:location:]
  -[MNNavigationSession tracePlayer:didPlayAtTime:]
  -[MNNavigationSession tracePlayer:didJumpToRouteResponse:request:origin:destination:]
  -[MNNavigationSession tracePlayerDidStayOnRoute:]
  -[MNNavigationSession tracePlayer:didUpdateLocation:]
  -[MNNavigationSession tracePlayer:didReceiveLocationError:]
  -[MNNavigationSession tracePlayerDidPauseLocationUpdates:]
  -[MNNavigationSession tracePlayerDidResumeLocationUpdates:]
  -[MNNavigationSession tracePlayer:didUpdateHeading:]
  -[MNNavigationSession tracePlayer:didUpdateMotion:exitType:confidence:]
  -[MNNavigationSession tracePlayer:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationSession tracePlayer:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationSession traceIsPlaying]
  -[MNNavigationSession audioSessionDidFinishAnnouncingArrival:]
  -[MNNavigationSession audioSessionWillAnnounceArrival:]
  -[MNNavigationSession distanceToManeuverStart]
  -[MNNavigationSession guidanceManager:didArriveWithAnnouncement:]
  -[MNNavigationSession guidanceManager:didStartWithAnnouncement:]
  -[MNNavigationSession distanceToManeuverEnd]
  -[MNNavigationSession guidanceManager:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationSession guidanceManager:willAnnounce:inSeconds:]
  -[MNNavigationSession guidanceManagerDidUpdateProgress:currentStepIndex:distanceUntilSign:timeUntilSign:]
  -[MNNavigationSession guidanceManagerHideSecondaryStep:]
  -[MNNavigationSession guidanceManagerProceedingToRoute:proceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationSession guidanceManager:announce:shortPromptType:ignorePromptStyle:stage:hasSecondaryManeuver:completionBlock:]
  -[MNNavigationSession guidanceManager:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationSession guidanceManager:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationSession addInjectedEvent:]
  -[MNNavigationSession voiceController:didStartSpeakingPrompt:]
  -[MNNavigationSession voiceController:didActivateAudioSession:]
  -[MNNavigationSession repeatCurrentGuidance]
  -[MNNavigationSession repeatCurrentTrafficAlert]
  -[MNNavigationSession timeAndDistanceUpdater:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationSession timeAndDistanceUpdater:didUpdateRemainingTime:remainingDistance:]
  -[MNNavigationSession timeAndDistanceUpdater:didUpdateDisplayETA:displayRemainingMinutes:forRoute:]
  -[MNNavigationSession guidanceManagerBeginGuidanceUpdate:]
  -[MNNavigationSession guidanceManager:updateSignsWithInfo:]
  -[MNNavigationSession guidanceManager:showLaneDirections:]
  -[MNNavigationSession guidanceManager:hideLaneDirectionsForId:]
  -[MNNavigationSession guidanceManagerEndGuidanceUpdate:]
  -[MNNavigationSession guidanceManager:triggerHaptics:]
  -[MNNavigationSession guidanceManager:usePersistentDisplay:]
  -[MNNavigationSession guidanceManager:hideJunctionViewForId:]
  -[MNNavigationSession guidanceManager:showJunctionView:]
  -[MNNavigationSession guidanceManager:newGuidanceEventFeedback:]
  -[MNNavigationSession guidanceManager:updatedGuidanceEventFeedback:]
  -[MNNavigationSession _closeTileLoader]
  -[MNNavigationSession _openTileLoader]
  -[MNNavigationSession _startMotionUpdates]
  -[MNNavigationSession _startLocationTracking]
  -[MNNavigationSession _startETAUpdates]
  -[MNNavigationSession _startTravelTimeUpdates]
  -[MNNavigationSession _startGuidanceAllowMidRouteStart:]
  -[MNNavigationSession _stopLocationTracking]
  -[MNNavigationSession _stopETAUpdates]
  -[MNNavigationSession _stopGuidance]
  -[MNNavigationSession _stopTravelTimeUpdates]
  -[MNNavigationSession _stopMotionUpdates]
  -[MNNavigationSession _locationTrackerForTransportType:navigationType:]
  -[MNNavigationSession initWithRouteManager:auditToken:traceManager:]
  -[MNNavigationSession startNavigationSessionWithDetails:]
  -[MNNavigationSession stopNavigationSession]
  -[MNNavigationSession isAllowedToSwitchTransportTypes]


MNTunnelLocationProjector : NSObject /usr/lib/libc++.1.dylib
 @property  <MNTunnelLocationProjectorDelegate> *delegate
 @property  BOOL isProjecting

  // instance methods
  -[MNTunnelLocationProjector init]
  -[MNTunnelLocationProjector dealloc]
  -[MNTunnelLocationProjector delegate]
  -[MNTunnelLocationProjector setDelegate:]
  -[MNTunnelLocationProjector .cxx_destruct]
  -[MNTunnelLocationProjector stop]
  -[MNTunnelLocationProjector _approximateMaxSpeedForRoad:]
  -[MNTunnelLocationProjector updateLocation:]
  -[MNTunnelLocationProjector isProjecting]
  -[MNTunnelLocationProjector _locationIsGoodEnoughToEndProjection:]
  -[MNTunnelLocationProjector _locationOverdueTimeoutForLocation:]
  -[MNTunnelLocationProjector _resetLocationUpdateOverdueWithTimeout:]
  -[MNTunnelLocationProjector _locationUpdateOverdueTimerFired:]
  -[MNTunnelLocationProjector _projectFromLocation:timeInterval:]


MNPhoneCallObserver : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[MNPhoneCallObserver sharedPhoneCallObserver]

  // instance methods
  -[MNPhoneCallObserver init]
  -[MNPhoneCallObserver dealloc]
  -[MNPhoneCallObserver .cxx_destruct]
  -[MNPhoneCallObserver _startObserving]
  -[MNPhoneCallObserver hasActiveCalls]
  -[MNPhoneCallObserver _isActiveCall:]


MNXPCActivity : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *identifier
 @property  BOOL repeat
 @property  BOOL shouldWakeDevice
 @property  BOOL useCoreDuetPowerBudgeting
 @property  BOOL runOnBattery
 @property  double tolerance
 @property  unsigned long qualityOfService
 @property  unsigned long networkRequirements
 @property  NSDate *scheduledDate

  // class methods
  +[MNXPCActivity checkInActivity:codeBlock:]

  // instance methods
  -[MNXPCActivity init]
  -[MNXPCActivity invalidate]
  -[MNXPCActivity tolerance]
  -[MNXPCActivity .cxx_destruct]
  -[MNXPCActivity identifier]
  -[MNXPCActivity qualityOfService]
  -[MNXPCActivity remainingTime]
  -[MNXPCActivity scheduledDate]
  -[MNXPCActivity repeat]
  -[MNXPCActivity scheduleForDate:codeBlock:]
  -[MNXPCActivity initWithIdentifier:repeat:shouldWakeDevice:useCoreDuetPowerBudgeting:runOnBattery:tolerance:qualityOfService:networkRequirements:]
  -[MNXPCActivity _needsNetworkRequirement:]
  -[MNXPCActivity shouldWakeDevice]
  -[MNXPCActivity useCoreDuetPowerBudgeting]
  -[MNXPCActivity runOnBattery]
  -[MNXPCActivity networkRequirements]


MNNavigationServicePeer : GEONavdPeer /System/Library/Frameworks/CoreLocation.framework/CoreLocation
 @property  NSString *peerIdentifier
 @property  int processIdentifier
 @property  GEOApplicationAuditToken *auditToken

  // class methods
  +[MNNavigationServicePeer logCategory]
  +[MNNavigationServicePeer peerForConnection:]

  // instance methods
  -[MNNavigationServicePeer dealloc]
  -[MNNavigationServicePeer .cxx_destruct]
  -[MNNavigationServicePeer processIdentifier]
  -[MNNavigationServicePeer auditToken]
  -[MNNavigationServicePeer peerIdentifier]
  -[MNNavigationServicePeer logCategory]
  -[MNNavigationServicePeer initWithConnection:peerIdentifier:processIdentifier:]
  -[MNNavigationServicePeer clearConnectionHandlers]


MNDriveGuidanceManager : MNClassicGuidanceManager
  // instance methods
  -[MNDriveGuidanceManager transportType]
  -[MNDriveGuidanceManager _resetStepState]
  -[MNDriveGuidanceManager _nameInfoForContinueSign]
  -[MNDriveGuidanceManager _updatePrepareForNextStep]
  -[MNDriveGuidanceManager _updateConsiderContinueAnnouncement:location:]
  -[MNDriveGuidanceManager _updateConsiderExecuteAnnouncement:location:]
  -[MNDriveGuidanceManager _updateConsiderPrepareAnnouncement:withMatch:]
  -[MNDriveGuidanceManager _distanceForSign]
  -[MNDriveGuidanceManager _continuePhase]
  -[MNDriveGuidanceManager _announceSettings]


MNTrafficIncidentAlert : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSData *alertID
 @property  NSData *etaResponseID
 @property  unsigned long alertType
 @property  double distanceToIncident
 @property  NSDate *eta
 @property  NSArray *alertTitles
 @property  NSArray *alertDescriptions
 @property  NSArray *spokenTexts
 @property  GEOETARoute *oldETARoute
 @property  GEORouteIncident *oldETARouteIncident
 @property  GEOComposedRoute *originalRoute
 @property  GEOComposedRouteTraffic *originalRouteTraffic
 @property  GEOComposedRoute *alternateRoute
 @property  GEOComposedRouteTraffic *alternateRouteTraffic
 @property  double oldEstimatedTime
 @property  double newEstimatedTime
 @property  {?=If} startValidCoordinateRange
 @property  {?=If} endValidCoordinateRange
 @property  {?=If} incidentCoordinate
 @property  {?=If} alternateEndValidCoordinateRange
 @property  NSDate *alertDate
 @property  double alertDisplayDuration
 @property  BOOL isAutomaticReroute
 @property  unsigned long secondsSaved

  // class methods
  +[MNTrafficIncidentAlert supportsSecureCoding]
  +[MNTrafficIncidentAlert trafficIncidentAlertForDetails:]

  // instance methods
  -[MNTrafficIncidentAlert encodeWithCoder:]
  -[MNTrafficIncidentAlert initWithCoder:]
  -[MNTrafficIncidentAlert .cxx_destruct]
  -[MNTrafficIncidentAlert originalRoute]
  -[MNTrafficIncidentAlert secondsSaved]
  -[MNTrafficIncidentAlert alertType]
  -[MNTrafficIncidentAlert eta]
  -[MNTrafficIncidentAlert setEta:]
  -[MNTrafficIncidentAlert isSimilarTo:]
  -[MNTrafficIncidentAlert _divergenceCoordinate]
  -[MNTrafficIncidentAlert updateLocation:]
  -[MNTrafficIncidentAlert setDistanceToIncident:]
  -[MNTrafficIncidentAlert alertID]
  -[MNTrafficIncidentAlert etaResponseID]
  -[MNTrafficIncidentAlert alternateRoute]
  -[MNTrafficIncidentAlert startValidCoordinateRange]
  -[MNTrafficIncidentAlert endValidCoordinateRange]
  -[MNTrafficIncidentAlert incidentCoordinate]
  -[MNTrafficIncidentAlert distanceToIncident]
  -[MNTrafficIncidentAlert isAutomaticReroute]
  -[MNTrafficIncidentAlert initWithRoute:traffic:etaRoute:etaResponse:]
  -[MNTrafficIncidentAlert originalRouteTraffic]
  -[MNTrafficIncidentAlert oldETARoute]
  -[MNTrafficIncidentAlert alternateRouteTraffic]
  -[MNTrafficIncidentAlert alternateEndValidCoordinateRange]
  -[MNTrafficIncidentAlert updateAlertIDWithAlert:]
  -[MNTrafficIncidentAlert initWithTrafficIncidentAlertDetails:]
  -[MNTrafficIncidentAlert alertDate]
  -[MNTrafficIncidentAlert spokenTexts]
  -[MNTrafficIncidentAlert _findRouteDivergence]
  -[MNTrafficIncidentAlert _dynamicStringValues]
  -[MNTrafficIncidentAlert _routeCoordinateAtDuration:beforeRouteCoordinate:]
  -[MNTrafficIncidentAlert alertTitles]
  -[MNTrafficIncidentAlert alertDescriptions]
  -[MNTrafficIncidentAlert oldETARouteIncident]
  -[MNTrafficIncidentAlert oldEstimatedTime]
  -[MNTrafficIncidentAlert newEstimatedTime]
  -[MNTrafficIncidentAlert alertDisplayDuration]


MNTimeballServicePeer : MNNavigationServicePeer
  // class methods
  +[MNTimeballServicePeer logCategory]

  // instance methods
  -[MNTimeballServicePeer dealloc]


MNTimeballLocalPeer : MNTimeballServicePeer
  // class methods
  +[MNTimeballLocalPeer logCategory]

  // instance methods
  -[MNTimeballLocalPeer hasEntitlement:]
  -[MNTimeballLocalPeer initWithClientIdentifier:]


MNTimeManager : NSObject /usr/lib/libc++.1.dylib
 @property  <MNTimeProvider> *provider

  // class methods
  +[MNTimeManager sharedManager]
  +[MNTimeManager currentTime]
  +[MNTimeManager currentDate]

  // instance methods
  -[MNTimeManager init]
  -[MNTimeManager .cxx_destruct]
  -[MNTimeManager addObserver:]
  -[MNTimeManager removeObserver:]
  -[MNTimeManager setProvider:]
  -[MNTimeManager provider]
  -[MNTimeManager _resetToDefaultProvider]


MNGuidanceLaneInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSUUID *uniqueID
 @property  BOOL isForManeuver
 @property  NSArray *lanes
 @property  NSArray *titles
 @property  NSArray *instructions
 @property  NSDictionary *variableOverrides
 @property  long long distanceDetailLevel
 @property  int composedGuidanceEventIndex

  // class methods
  +[MNGuidanceLaneInfo supportsSecureCoding]

  // instance methods
  -[MNGuidanceLaneInfo encodeWithCoder:]
  -[MNGuidanceLaneInfo initWithCoder:]
  -[MNGuidanceLaneInfo .cxx_destruct]
  -[MNGuidanceLaneInfo uniqueID]
  -[MNGuidanceLaneInfo titles]
  -[MNGuidanceLaneInfo instructions]
  -[MNGuidanceLaneInfo lanes]
  -[MNGuidanceLaneInfo distanceDetailLevel]
  -[MNGuidanceLaneInfo variableOverrides]
  -[MNGuidanceLaneInfo composedGuidanceEventIndex]
  -[MNGuidanceLaneInfo initWithID:isForManeuver:lanes:titles:instructions:variableOverrides:distanceDetailLevel:composedGuidanceEventIndex:]
  -[MNGuidanceLaneInfo isForManeuver]


MNNavigationSessionLogger : NSObject /usr/lib/libc++.1.dylib <MNNavigationSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationSessionLogger init]
  -[MNNavigationSessionLogger .cxx_destruct]
  -[MNNavigationSessionLogger navigationSessionDidStart:]
  -[MNNavigationSessionLogger navigationSessionDidStop:]
  -[MNNavigationSessionLogger navigationSession:didUpdateMatchedLocation:]
  -[MNNavigationSessionLogger navigationSessionDidEnterPreArrivalState:]
  -[MNNavigationSessionLogger navigationSessionDidArrive:]
  -[MNNavigationSessionLogger navigationSessionDidTimeoutInArrivalRegion:]
  -[MNNavigationSessionLogger navigationSession:didUpdateDisplayETA:displayRemainingMinutes:forRoute:]
  -[MNNavigationSessionLogger navigationSessionWillReroute:]
  -[MNNavigationSessionLogger navigationSession:didSuppressReroute:]
  -[MNNavigationSessionLogger navigationSession:didReroute:withLocation:withAlternateRoutes:]
  -[MNNavigationSessionLogger navigationSession:didUpdateDestination:]
  -[MNNavigationSessionLogger navigationSession:didFailRerouteWithError:]
  -[MNNavigationSessionLogger navigationSession:updateSignsWithInfo:]
  -[MNNavigationSessionLogger _stringForLocationType:]


MNNavigationClientProxy : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNNavigationClientProxy init]
  -[MNNavigationClientProxy .cxx_destruct]
  -[MNNavigationClientProxy requestDirections:withIdentifier:handler:]
  -[MNNavigationClientProxy cancelDirectionsRequestWithIdentifier:]
  -[MNNavigationClientProxy _directionsRequestManager]


MNTimeballMockNetworkRequester : MNTimeballNetworkRequester
  // class methods
  +[MNTimeballMockNetworkRequester setExpectedRouteUpdate:]

  // instance methods
  -[MNTimeballMockNetworkRequester requestRoutingOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]


MNTraceEventServerFormattedString : NSObject /usr/lib/libc++.1.dylib <GEOServerFormattedString>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *formatStrings
 @property  NSArray *formatTokens
 @property  NSArray *separators
 @property  NSArray *formatStyles
 @property  <GEOServerConditionalString> *alternativeString

  // instance methods
  -[MNTraceEventServerFormattedString encodeWithCoder:]
  -[MNTraceEventServerFormattedString initWithCoder:]
  -[MNTraceEventServerFormattedString .cxx_destruct]
  -[MNTraceEventServerFormattedString formatStrings]
  -[MNTraceEventServerFormattedString separators]
  -[MNTraceEventServerFormattedString formatTokens]
  -[MNTraceEventServerFormattedString alternativeString]
  -[MNTraceEventServerFormattedString formatStyles]
  -[MNTraceEventServerFormattedString initWithFormatStrings:formatTokens:separators:]


MNTraceEvent : NSObject /usr/lib/libc++.1.dylib
 @property  double timeSinceStartOfRoute
 @property  unsigned long stepIndex
 @property  unsigned long stage
 @property  double distanceToStartOfManeuver
 @property  MNLocation *location
 @property  unsigned long eventType
 @property  NSString *primaryDescription
 @property  NSString *secondaryDescription
 @property  NSDictionary *eventData

  // instance methods
  -[MNTraceEvent .cxx_destruct]
  -[MNTraceEvent location]
  -[MNTraceEvent eventType]
  -[MNTraceEvent stage]
  -[MNTraceEvent stepIndex]
  -[MNTraceEvent setEventType:]
  -[MNTraceEvent eventData]
  -[MNTraceEvent setEventData:]
  -[MNTraceEvent timeSinceStartOfRoute]
  -[MNTraceEvent secondaryDescription]
  -[MNTraceEvent initWithTime:stepIndex:stage:distance:location:eventType:eventData:]
  -[MNTraceEvent instructionsFromSignDescription:]
  -[MNTraceEvent stringByInstructions:]
  -[MNTraceEvent _calculateDescription]
  -[MNTraceEvent primaryDescription]
  -[MNTraceEvent shieldToText:]
  -[MNTraceEvent distanceToStartOfManeuver]


MNArrivalUpdater : NSObject /usr/lib/libc++.1.dylib <MNArrivalRegionTimerDelegate>
 @property  BOOL isInPreArrivalRegion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNArrivalUpdater init]
  -[MNArrivalUpdater setDelegate:]
  -[MNArrivalUpdater .cxx_destruct]
  -[MNArrivalUpdater arrivalRegionTimerDidFire:]
  -[MNArrivalUpdater updateForLocation:remainingDistanceAlongRoute:]
  -[MNArrivalUpdater initWithRoute:useLegacyArrival:]
  -[MNArrivalUpdater isInPreArrivalRegion]
  -[MNArrivalUpdater updateForRoute:]
  -[MNArrivalUpdater _checkArrivalForLocation:remainingDistanceAlongRoute:]
  -[MNArrivalUpdater _isInPreArrivalRegionForLocation:remainingDistanceAlongRoute:]
  -[MNArrivalUpdater _shouldUseNewArrivalLogic]
  -[MNArrivalUpdater _legacyCheckArrivalForLocation:]
  -[MNArrivalUpdater _legacyCheckDrivingArrivalForLocation:]
  -[MNArrivalUpdater _legacyCheckNonDrivingArrivalForLocation:]


MNLeechedLocationProvider : MNCoreLocationProvider
  // instance methods
  -[MNLeechedLocationProvider init]
  -[MNLeechedLocationProvider setDesiredAccuracy:]


MNTraceLoader : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNTraceLoader .cxx_destruct]
  -[MNTraceLoader loadTraceWithPath:outError:]
  -[MNTraceLoader _loadTraceVersion]
  -[MNTraceLoader _updateTraceFromVersion:outError:]
  -[MNTraceLoader _loadInfoTable]
  -[MNTraceLoader _loadLocationsTable]
  -[MNTraceLoader _loadDirectionsTable]
  -[MNTraceLoader _loadETAUpdatesTable]
  -[MNTraceLoader _loadCompassHeadingDataTable]
  -[MNTraceLoader _loadMotionDataTable]
  -[MNTraceLoader _loadVehicleDataTable]
  -[MNTraceLoader _loadRouteSelectionsTable]
  -[MNTraceLoader _loadAnnotatedUserBehaviorTable]
  -[MNTraceLoader _loadAnnotatedUserEnvironmentTable]
  -[MNTraceLoader _loadCommuteDestinationsTable]
  -[MNTraceLoader _loadCommuteDirectionsRequestsTable]
  -[MNTraceLoader _loadMiscInfo]
  -[MNTraceLoader _executeQuery:rowHandler:]
  -[MNTraceLoader _tableExists:]
  -[MNTraceLoader _handleUpdateError]


MNListInstructionContents : NSObject /usr/lib/libc++.1.dylib <MNInstructionContents>
 @property  int transportType
 @property  double distance
 @property  <GEOServerFormattedString> *distanceFormat
 @property  NSArray *instructionFormats
 @property  GEOComposedWaypoint *destination
 @property  NSString *destinationName
 @property  long long context
 @property  BOOL suppressNames
 @property  NSString *roadName
 @property  BOOL hasServerContent
 @property  BOOL suppressFallback

  // class methods
  +[MNListInstructionContents contentsWithStep:transportType:]

  // instance methods
  -[MNListInstructionContents init]
  -[MNListInstructionContents .cxx_destruct]
  -[MNListInstructionContents context]
  -[MNListInstructionContents destination]
  -[MNListInstructionContents setDestination:]
  -[MNListInstructionContents transportType]
  -[MNListInstructionContents setDistance:]
  -[MNListInstructionContents distance]
  -[MNListInstructionContents setTransportType:]
  -[MNListInstructionContents destinationName]
  -[MNListInstructionContents setDestinationName:]
  -[MNListInstructionContents roadName]
  -[MNListInstructionContents setRoadName:]
  -[MNListInstructionContents instruction]
  -[MNListInstructionContents _populateFromStep:]
  -[MNListInstructionContents setDistanceFormat:]
  -[MNListInstructionContents _instructionsForFormats:]
  -[MNListInstructionContents stringForDistance:]
  -[MNListInstructionContents instructionWithShorterAlternatives]
  -[MNListInstructionContents instructionForStage:distance:]
  -[MNListInstructionContents suppressNames]
  -[MNListInstructionContents setSuppressNames:]
  -[MNListInstructionContents hasServerContent]
  -[MNListInstructionContents suppressFallback]
  -[MNListInstructionContents setSuppressFallback:]
  -[MNListInstructionContents setInstructionFormats:]
  -[MNListInstructionContents instructionFormats]
  -[MNListInstructionContents distanceFormat]


MNTraceRouteSimulatorEvent : NSObject /usr/lib/libc++.1.dylib
 @property  double timestamp
 @property  GEOLocation *location
 @property  @? completion

  // instance methods
  -[MNTraceRouteSimulatorEvent .cxx_destruct]
  -[MNTraceRouteSimulatorEvent timestamp]
  -[MNTraceRouteSimulatorEvent location]
  -[MNTraceRouteSimulatorEvent completion]
  -[MNTraceRouteSimulatorEvent initWithLocation:]
  -[MNTraceRouteSimulatorEvent initWithTime:completion:]


MNTraceRouteSimulator : GEOTraceRouteSimulator /System/Library/Frameworks/CoreLocation.framework/CoreLocation <MNLocationProvider, MNTimeProvider>
 @property  NSArray *traceEvents
 @property  double simulationSpeedOverride
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  double desiredAccuracy
 @property  BOOL locationServicesPreferencesDialogEnabled
 @property  double distanceFilter
 @property  BOOL matchInfoEnabled
 @property  int headingOrientation
 @property  @? authorizationRequestBlock
 @property  double expectedGpsUpdateInterval
 @property  int authorizationStatus
 @property  long long activityType
 @property  BOOL usesCLMapCorrection
 @property  BOOL isSimulation
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale
 @property  double currentTime

  // instance methods
  -[MNTraceRouteSimulator delegate]
  -[MNTraceRouteSimulator setDelegate:]
  -[MNTraceRouteSimulator .cxx_destruct]
  -[MNTraceRouteSimulator activityType]
  -[MNTraceRouteSimulator startUpdatingLocation]
  -[MNTraceRouteSimulator stopUpdatingLocation]
  -[MNTraceRouteSimulator distanceFilter]
  -[MNTraceRouteSimulator setDistanceFilter:]
  -[MNTraceRouteSimulator desiredAccuracy]
  -[MNTraceRouteSimulator setDesiredAccuracy:]
  -[MNTraceRouteSimulator setActivityType:]
  -[MNTraceRouteSimulator matchInfoEnabled]
  -[MNTraceRouteSimulator setMatchInfoEnabled:]
  -[MNTraceRouteSimulator startUpdatingHeading]
  -[MNTraceRouteSimulator requestWhenInUseAuthorization]
  -[MNTraceRouteSimulator authorizationStatus]
  -[MNTraceRouteSimulator expectedGpsUpdateInterval]
  -[MNTraceRouteSimulator setHeadingOrientation:]
  -[MNTraceRouteSimulator headingOrientation]
  -[MNTraceRouteSimulator stopUpdatingHeading]
  -[MNTraceRouteSimulator requestWhenInUseAuthorizationWithPrompt]
  -[MNTraceRouteSimulator isLocationServicesPreferencesDialogEnabled]
  -[MNTraceRouteSimulator setLocationServicesPreferencesDialogEnabled:]
  -[MNTraceRouteSimulator startUpdatingVehicleSpeed]
  -[MNTraceRouteSimulator stopUpdatingVehicleSpeed]
  -[MNTraceRouteSimulator startUpdatingVehicleHeading]
  -[MNTraceRouteSimulator stopUpdatingVehicleHeading]
  -[MNTraceRouteSimulator _tearDown]
  -[MNTraceRouteSimulator _setup]
  -[MNTraceRouteSimulator currentTime]
  -[MNTraceRouteSimulator effectiveBundle]
  -[MNTraceRouteSimulator isSimulation]
  -[MNTraceRouteSimulator currentDate]
  -[MNTraceRouteSimulator setEffectiveBundle:]
  -[MNTraceRouteSimulator effectiveBundleIdentifier]
  -[MNTraceRouteSimulator setEffectiveBundleIdentifier:]
  -[MNTraceRouteSimulator authorizationRequestBlock]
  -[MNTraceRouteSimulator setAuthorizationRequestBlock:]
  -[MNTraceRouteSimulator usesCLMapCorrection]
  -[MNTraceRouteSimulator isTracePlayer]
  -[MNTraceRouteSimulator timeScale]
  -[MNTraceRouteSimulator navigationSessionDidStart:]
  -[MNTraceRouteSimulator navigationSession:didUpdateMatchedLocation:]
  -[MNTraceRouteSimulator navigationSessionWillReroute:]
  -[MNTraceRouteSimulator navigationSession:didReroute:withLocation:withAlternateRoutes:]
  -[MNTraceRouteSimulator navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNTraceRouteSimulator navigationSession:didAnnounce:stage:]
  -[MNTraceRouteSimulator navigationSession:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNTraceRouteSimulator navigationSession:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNTraceRouteSimulator navigationSessionHideSecondaryStep:]
  -[MNTraceRouteSimulator navigationSession:didAnnounceArrival:]
  -[MNTraceRouteSimulator navigationSession:didEnableGuidancePrompts:]
  -[MNTraceRouteSimulator insertVoiceEventAtTime:completion:]
  -[MNTraceRouteSimulator setSimulationSpeedOverride:]
  -[MNTraceRouteSimulator recordLocationsAlongRouteWithRecorder:]
  -[MNTraceRouteSimulator resetForActiveTileGroupChanged]
  -[MNTraceRouteSimulator traceVersion]
  -[MNTraceRouteSimulator generateGuidanceWithRequest:response:routeAttributes:routeIndex:withCompletion:]
  -[MNTraceRouteSimulator _generateEvents]
  -[MNTraceRouteSimulator generateGuidance]
  -[MNTraceRouteSimulator traceEvents]
  -[MNTraceRouteSimulator simulationSpeedOverride]


MNActiveRouteInfo : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSUUID *routeID
 @property  GEOComposedRoute *route
 @property  GEOETARoute *etaRoute
 @property  GEOETATrafficUpdateResponse *etaResponse
 @property  NSDate *displayETA
 @property  unsigned long displayRemainingMinutes
 @property  GEOComposedRouteTraffic *traffic
 @property  unsigned long alternateRouteIndex
 @property  GEOTransitRouteUpdateRequest *transitRouteUpdateRequest

  // class methods
  +[MNActiveRouteInfo supportsSecureCoding]

  // instance methods
  -[MNActiveRouteInfo encodeWithCoder:]
  -[MNActiveRouteInfo initWithCoder:]
  -[MNActiveRouteInfo .cxx_destruct]
  -[MNActiveRouteInfo routeID]
  -[MNActiveRouteInfo setRoute:]
  -[MNActiveRouteInfo route]
  -[MNActiveRouteInfo initWithRoute:]
  -[MNActiveRouteInfo transitRouteUpdateRequest]
  -[MNActiveRouteInfo etaResponse]
  -[MNActiveRouteInfo setEtaResponse:]
  -[MNActiveRouteInfo traffic]
  -[MNActiveRouteInfo setEtaRoute:]
  -[MNActiveRouteInfo etaRoute]
  -[MNActiveRouteInfo setAlternateRouteIndex:]
  -[MNActiveRouteInfo initWithRoute:traffic:]
  -[MNActiveRouteInfo setTraffic:]
  -[MNActiveRouteInfo initWithRoute:trafficRoute:routeInitalizerData:]
  -[MNActiveRouteInfo displayETA]
  -[MNActiveRouteInfo displayRemainingMinutes]
  -[MNActiveRouteInfo alternateRouteIndex]
  -[MNActiveRouteInfo setDisplayETA:]
  -[MNActiveRouteInfo setDisplayRemainingMinutes:]
  -[MNActiveRouteInfo updateWithETARoute:offsetInMeters:]


MNNavigationStateManager : NSObject /usr/lib/libc++.1.dylib <MNNavigationStateInterface>
 @property  GEOApplicationAuditToken *auditToken
 @property  <MNNavigationSessionManagerDelegate> *navigationDelegate
 @property  BOOL isStarted
 @property  MNNavigationState *currentState
 @property  unsigned long currentStateType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNavigationStateManager sharedManager]

  // instance methods
  -[MNNavigationStateManager init]
  -[MNNavigationStateManager dealloc]
  -[MNNavigationStateManager .cxx_destruct]
  -[MNNavigationStateManager auditToken]
  -[MNNavigationStateManager isStarted]
  -[MNNavigationStateManager start]
  -[MNNavigationStateManager addObserver:]
  -[MNNavigationStateManager removeObserver:]
  -[MNNavigationStateManager reset]
  -[MNNavigationStateManager currentState]
  -[MNNavigationStateManager setHeadingOrientation:]
  -[MNNavigationStateManager setCurrentState:]
  -[MNNavigationStateManager _initialState]
  -[MNNavigationStateManager transitionToState:]
  -[MNNavigationStateManager setGuidancePromptsEnabled:]
  -[MNNavigationStateManager setDisplayedStepIndex:]
  -[MNNavigationStateManager setIsConnectedToCarplay:]
  -[MNNavigationStateManager setNavigationDelegate:]
  -[MNNavigationStateManager navigationDelegate]
  -[MNNavigationStateManager locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationStateManager locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationStateManager stopNavigation]
  -[MNNavigationStateManager currentStateType]
  -[MNNavigationStateManager setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationStateManager startNavigationWithDetails:activeBlock:]
  -[MNNavigationStateManager startPredictingDestinationsWithHandler:]
  -[MNNavigationStateManager stopPredictingDestinations]
  -[MNNavigationStateManager updateDestination:]
  -[MNNavigationStateManager resumeOriginalDestination]
  -[MNNavigationStateManager switchToRoute:]
  -[MNNavigationStateManager setFullGuidanceMode:]
  -[MNNavigationStateManager changeSettings:]
  -[MNNavigationStateManager repeatCurrentGuidanceWithReply:]
  -[MNNavigationStateManager repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationStateManager vibrateForPrompt:withReply:]
  -[MNNavigationStateManager stopCurrentGuidancePrompt]
  -[MNNavigationStateManager setHFPPreference:forSetting:]
  -[MNNavigationStateManager setCurrentAudioOutputSetting:]
  -[MNNavigationStateManager setRideIndex:forLegIndex:]
  -[MNNavigationStateManager setJunctionViewImageWidth:height:]
  -[MNNavigationStateManager acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationStateManager setTraceIsPlaying:]
  -[MNNavigationStateManager setTracePlaybackSpeed:]
  -[MNNavigationStateManager setTracePosition:]
  -[MNNavigationStateManager recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationStateManager recordPedestrianTracePath:]
  -[MNNavigationStateManager interfaceHashesWithHandler:]
  -[MNNavigationStateManager updateGuidanceWithData:reply:]
  -[MNNavigationStateManager pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateManager resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateManager checkinForNavigationService:]
  -[MNNavigationStateManager commuteSession:didUpdateDestinations:]
  -[MNNavigationStateManager commuteSessionDidArrive:]
  -[MNNavigationStateManager _replayStateForNewObserver:]
  -[MNNavigationStateManager navSessionDestination]
  -[MNNavigationStateManager _stateTypeForState:]
  -[MNNavigationStateManager _changeToDesiredLocationProviderTypeForState:]


MNSessionUpdateManager : NSObject /usr/lib/libc++.1.dylib <GEOTransitRouteUpdaterDelegate>
 @property  <MNSessionUpdateManagerDelegate> *delegate
 @property  NSString *requestingAppIdentifier
 @property  GEOApplicationAuditToken *auditToken
 @property  GEODataRequestThrottlerToken *throttleToken
 @property  double etaRequestInterval
 @property  double initialRequestDelay
 @property  double opportunisticRequestTimeWindow
 @property  unsigned long maxAlternateRoutesCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSessionUpdateManager init]
  -[MNSessionUpdateManager dealloc]
  -[MNSessionUpdateManager delegate]
  -[MNSessionUpdateManager setDelegate:]
  -[MNSessionUpdateManager .cxx_destruct]
  -[MNSessionUpdateManager auditToken]
  -[MNSessionUpdateManager setAuditToken:]
  -[MNSessionUpdateManager transitRouteUpdater:willSendRequests:]
  -[MNSessionUpdateManager transitRouteUpdater:willUpdateTransitForRouteIDs:]
  -[MNSessionUpdateManager transitRouteUpdater:didFailUpdateForRouteIDs:withError:]
  -[MNSessionUpdateManager transitRouteUpdater:didReceiveResponse:]
  -[MNSessionUpdateManager transitRouteUpdater:didUpdateTransitRoutes:]
  -[MNSessionUpdateManager throttleToken]
  -[MNSessionUpdateManager _updateETAResponse:withRemainingDistanceFromRequest:]
  -[MNSessionUpdateManager stopUpdateRequests]
  -[MNSessionUpdateManager requestingAppIdentifier]
  -[MNSessionUpdateManager setRequestingAppIdentifier:]
  -[MNSessionUpdateManager maxAlternateRoutesCount]
  -[MNSessionUpdateManager setMaxAlternateRoutesCount:]
  -[MNSessionUpdateManager _handleETAResponse:forRouteInfo:request:error:]
  -[MNSessionUpdateManager startUpdateRequestsForRoutes:andNavigationType:]
  -[MNSessionUpdateManager etaRequestInterval]
  -[MNSessionUpdateManager setEtaRequestInterval:]
  -[MNSessionUpdateManager initialRequestDelay]
  -[MNSessionUpdateManager setInitialRequestDelay:]
  -[MNSessionUpdateManager _scheduleETATimerWithInterval:]
  -[MNSessionUpdateManager _terminateETARequests]
  -[MNSessionUpdateManager _continueETARequests]
  -[MNSessionUpdateManager _hasAtLeastOneActiveSubscriber]
  -[MNSessionUpdateManager _sendETARequest]
  -[MNSessionUpdateManager _baseETARequest]
  -[MNSessionUpdateManager _updateETARequest:withRouteInfo:andUserLocation:]
  -[MNSessionUpdateManager restartUpdateTimer]
  -[MNSessionUpdateManager pauseUpdateRequestsForSubscriber:]
  -[MNSessionUpdateManager resumeUpdateRequestsForSubscriber:]
  -[MNSessionUpdateManager setThrottleToken:]
  -[MNSessionUpdateManager opportunisticRequestTimeWindow]
  -[MNSessionUpdateManager setOpportunisticRequestTimeWindow:]


MNNavigationSessionManager : NSObject /usr/lib/libc++.1.dylib <MNSessionUpdateManagerDelegate, MNNavigationSessionObserver, MNSettingsObserver, MNNavigationTraceManagerDelegate, MNAudioOutputSettingsManagerObserver>
 @property  <MNNavigationSessionManagerDelegate> *delegate
 @property  MNSessionUpdateManager *updateManager
 @property  MNNavigationSession *navigationSession
 @property  MNRouteManager *routeManager
 @property  GEOApplicationAuditToken *auditToken
 @property  MNNavigationTraceManager *traceManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationSessionManager init]
  -[MNNavigationSessionManager dealloc]
  -[MNNavigationSessionManager delegate]
  -[MNNavigationSessionManager setDelegate:]
  -[MNNavigationSessionManager .cxx_destruct]
  -[MNNavigationSessionManager auditToken]
  -[MNNavigationSessionManager initWithAuditToken:]
  -[MNNavigationSessionManager setGuidancePromptsEnabled:]
  -[MNNavigationSessionManager setDisplayedStepIndex:]
  -[MNNavigationSessionManager setIsNavigatingInLowGuidance:]
  -[MNNavigationSessionManager setIsConnectedToCarplay:]
  -[MNNavigationSessionManager navigationSession:didChangeNavigationState:]
  -[MNNavigationSessionManager navigationSession:didUpdateMatchedLocation:]
  -[MNNavigationSessionManager navigationSession:matchedToStepIndex:legIndex:]
  -[MNNavigationSessionManager navigationSessionDidEnterPreArrivalState:]
  -[MNNavigationSessionManager navigationSessionDidArrive:]
  -[MNNavigationSessionManager navigationSessionDidTimeoutInArrivalRegion:]
  -[MNNavigationSessionManager navigationSessionWillPause:]
  -[MNNavigationSessionManager navigationSessionWillResumeFromPause:]
  -[MNNavigationSessionManager navigationSession:didUpdateDisplayETA:displayRemainingMinutes:forRoute:]
  -[MNNavigationSessionManager navigationSession:didUpdateRemainingTime:remainingDistance:]
  -[MNNavigationSessionManager navigationSession:didUpdateETAResponseForRoute:]
  -[MNNavigationSessionManager navigationSession:didUpdateHeading:accuracy:]
  -[MNNavigationSessionManager navigationSession:didUpdateMotionType:confidence:]
  -[MNNavigationSessionManager navigationSessionWillReroute:]
  -[MNNavigationSessionManager navigationSessionDidCancelReroute:]
  -[MNNavigationSessionManager navigationSession:didReroute:withLocation:withAlternateRoutes:]
  -[MNNavigationSessionManager navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationSessionManager navigationSession:didFailRerouteWithError:]
  -[MNNavigationSessionManager navigationSession:didUpdateAlternateRoutes:]
  -[MNNavigationSessionManager navigationSession:proceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationSessionManager navigationSession:currentStepIndex:didUpdateDistanceUntilSign:timeUntilSign:]
  -[MNNavigationSessionManager navigationSession:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationSessionManager navigationSession:willAnnounce:inSeconds:]
  -[MNNavigationSessionManager navigationSession:triggerHaptics:]
  -[MNNavigationSessionManager navigationSession:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationSessionManager navigationSession:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationSessionManager navigationSession:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationSessionManager navigationSessionHideSecondaryStep:]
  -[MNNavigationSessionManager navigationSessionBeginGuidanceUpdate:]
  -[MNNavigationSessionManager navigationSessionEndGuidanceUpdate:]
  -[MNNavigationSessionManager navigationSession:updateSignsWithInfo:]
  -[MNNavigationSessionManager navigationSession:usePersistentDisplay:]
  -[MNNavigationSessionManager navigationSession:showLaneDirections:]
  -[MNNavigationSessionManager navigationSession:hideLaneDirectionsForId:]
  -[MNNavigationSessionManager navigationSession:showJunctionView:]
  -[MNNavigationSessionManager navigationSession:hideJunctionViewForId:]
  -[MNNavigationSessionManager navigationSession:didEnableGuidancePrompts:]
  -[MNNavigationSessionManager navigationSession:newGuidanceEventFeedback:]
  -[MNNavigationSessionManager navigationSession:updatedGuidanceEventFeedback:]
  -[MNNavigationSessionManager navigationSession:didReceiveTrafficIncidentAlert:responseCallback:]
  -[MNNavigationSessionManager navigationSession:didUpdateTrafficIncidentAlert:]
  -[MNNavigationSessionManager navigationSession:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationSessionManager navigationSession:didActivateAudioSession:]
  -[MNNavigationSessionManager navigationSession:didStartSpeakingPrompt:]
  -[MNNavigationSessionManager updateManager:willSendTransitUpdateRequests:]
  -[MNNavigationSessionManager updateManager:didReceiveTransitUpdateResponse:]
  -[MNNavigationSessionManager updateManager:willSendTransitUpdateRequestForRouteIDs:]
  -[MNNavigationSessionManager updateManager:didReceiveTransitUpdates:]
  -[MNNavigationSessionManager updateManager:didReceiveTransitError:]
  -[MNNavigationSessionManager updateManager:willSendETARequest:]
  -[MNNavigationSessionManager updateManager:didReceiveETAResponse:toRequest:]
  -[MNNavigationSessionManager updateManager:didUpdateETAForRouteInfo:]
  -[MNNavigationSessionManager updateManager:didReceiveETAError:]
  -[MNNavigationSessionManager wantsETAUpdates]
  -[MNNavigationSessionManager routeInfoForUpdateManager:]
  -[MNNavigationSessionManager userLocationForUpdateManager:]
  -[MNNavigationSessionManager navigationSession]
  -[MNNavigationSessionManager setVoiceGuidanceLevel:]
  -[MNNavigationSessionManager vibrateForPrompt:]
  -[MNNavigationSessionManager voiceGuidanceLevel]
  -[MNNavigationSessionManager stopNavigation]
  -[MNNavigationSessionManager setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationSessionManager updateDestination:]
  -[MNNavigationSessionManager resumeOriginalDestination]
  -[MNNavigationSessionManager switchToRoute:]
  -[MNNavigationSessionManager stopCurrentGuidancePrompt]
  -[MNNavigationSessionManager setHFPPreference:forSetting:]
  -[MNNavigationSessionManager setCurrentAudioOutputSetting:]
  -[MNNavigationSessionManager setRideIndex:forLegIndex:]
  -[MNNavigationSessionManager setJunctionViewImageWidth:height:]
  -[MNNavigationSessionManager acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationSessionManager setTraceIsPlaying:]
  -[MNNavigationSessionManager setTracePlaybackSpeed:]
  -[MNNavigationSessionManager setTracePosition:]
  -[MNNavigationSessionManager recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationSessionManager recordPedestrianTracePath:]
  -[MNNavigationSessionManager pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationSessionManager resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationSessionManager traceManager]
  -[MNNavigationSessionManager routeManager]
  -[MNNavigationSessionManager audioOutputSettingsManager:didUpdateSettings:]
  -[MNNavigationSessionManager audioOutputSettingsManager:didUpdateCurrentSetting:]
  -[MNNavigationSessionManager audioOutputSettingsManager:didUpdateCurrentSettingForVoicePrompt:]
  -[MNNavigationSessionManager audioOutputSettingsManager:didUpdateRouteSelection:]
  -[MNNavigationSessionManager _traceManager]
  -[MNNavigationSessionManager navigationTraceManager:didUpdateTracePlaybackDetails:]
  -[MNNavigationSessionManager settingsManager:didUpdateSettings:previousSettings:]
  -[MNNavigationSessionManager addInjectedEvent:]
  -[MNNavigationSessionManager startNavigationWithDetails:]
  -[MNNavigationSessionManager updateForStartNavigation:]
  -[MNNavigationSessionManager repeatCurrentGuidance]
  -[MNNavigationSessionManager repeatCurrentTrafficAlert]
  -[MNNavigationSessionManager _routeManager]
  -[MNNavigationSessionManager _proxyUpdater]
  -[MNNavigationSessionManager navigationTraceManagerDidFailToRecordTrace:]
  -[MNNavigationSessionManager updateManager]


MNDeviceTimeProvider : NSObject /usr/lib/libc++.1.dylib <MNTimeProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double currentTime

  // instance methods
  -[MNDeviceTimeProvider currentTime]


MNNavigationStatePrepareGuidance : MNNavigationState
  // instance methods
  -[MNNavigationStatePrepareGuidance type]
  -[MNNavigationStatePrepareGuidance .cxx_destruct]
  -[MNNavigationStatePrepareGuidance enterState]
  -[MNNavigationStatePrepareGuidance stopNavigation]
  -[MNNavigationStatePrepareGuidance setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationStatePrepareGuidance startNavigationWithDetails:activeBlock:]
  -[MNNavigationStatePrepareGuidance pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationStatePrepareGuidance resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationStatePrepareGuidance traceManager]
  -[MNNavigationStatePrepareGuidance leaveState]
  -[MNNavigationStatePrepareGuidance requiresHighMemoryThreshold]
  -[MNNavigationStatePrepareGuidance desiredLocationProviderType]
  -[MNNavigationStatePrepareGuidance shouldClearStoredRoutes]
  -[MNNavigationStatePrepareGuidance initWithStateManager:previewRoutes:selectedRouteIndex:]


MNTimeballServer : NSObject /usr/lib/libc++.1.dylib <NSXPCListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimeballServer defaultServer]

  // instance methods
  -[MNTimeballServer init]
  -[MNTimeballServer dealloc]
  -[MNTimeballServer .cxx_destruct]
  -[MNTimeballServer listener:shouldAcceptNewConnection:]
  -[MNTimeballServer _cache]
  -[MNTimeballServer _scheduler]
  -[MNTimeballServer _routingProvider]
  -[MNTimeballServer _navd_localProxyForClient:]
  -[MNTimeballServer _navd_addProxy:]
  -[MNTimeballServer _navd_removeProxy:]
  -[MNTimeballServer _localProxyForPeer:]
  -[MNTimeballServer _peerDidConnectWithProxy:]
  -[MNTimeballServer _peerDidDisconnectWithProxy:]


MNNavigationState : NSObject /usr/lib/libc++.1.dylib
 @property  MNNavigationStateManager *stateManager
 @property  unsigned long type
 @property  BOOL requiresHighMemoryThreshold
 @property  unsigned long desiredLocationProviderType
 @property  BOOL requiresLocationAccess
 @property  BOOL shouldClearStoredRoutes
 @property  double locationUpdateInterval
 @property  double suggestionUpdateFrequency
 @property  MNNavigationTraceManager *traceManager

  // instance methods
  -[MNNavigationState init]
  -[MNNavigationState dealloc]
  -[MNNavigationState respondsToSelector:]
  -[MNNavigationState methodSignatureForSelector:]
  -[MNNavigationState forwardInvocation:]
  -[MNNavigationState type]
  -[MNNavigationState .cxx_destruct]
  -[MNNavigationState enterState]
  -[MNNavigationState stateManager]
  -[MNNavigationState traceManager]
  -[MNNavigationState initWithStateManager:]
  -[MNNavigationState leaveState]
  -[MNNavigationState requiresHighMemoryThreshold]
  -[MNNavigationState desiredLocationProviderType]
  -[MNNavigationState shouldClearStoredRoutes]
  -[MNNavigationState preEnterState]
  -[MNNavigationState requiresLocationAccess]
  -[MNNavigationState _isSelectorValidForForwarding:]
  -[MNNavigationState locationUpdateInterval]
  -[MNNavigationState suggestionUpdateFrequency]


MNNavigationProxyUpdater : NSObject /usr/lib/libc++.1.dylib <MNNavigationSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationProxyUpdater init]
  -[MNNavigationProxyUpdater .cxx_destruct]
  -[MNNavigationProxyUpdater setDisplayedStepIndex:]
  -[MNNavigationProxyUpdater setIsNavigatingInLowGuidance:]
  -[MNNavigationProxyUpdater setIsConnectedToCarplay:]
  -[MNNavigationProxyUpdater setVoiceVolume:]
  -[MNNavigationProxyUpdater navigationSession:didChangeNavigationState:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateMatchedLocation:]
  -[MNNavigationProxyUpdater navigationSession:matchedToStepIndex:legIndex:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateStepNameInfo:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateRemainingTime:remainingDistance:]
  -[MNNavigationProxyUpdater navigationSession:didReroute:withLocation:withAlternateRoutes:]
  -[MNNavigationProxyUpdater navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateDestination:]
  -[MNNavigationProxyUpdater navigationSession:currentStepIndex:didUpdateDistanceUntilSign:timeUntilSign:]
  -[MNNavigationProxyUpdater navigationSession:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationProxyUpdater navigationSession:willAnnounce:inSeconds:]
  -[MNNavigationProxyUpdater navigationSession:triggerHaptics:]
  -[MNNavigationProxyUpdater navigationSession:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationProxyUpdater navigationSession:didEnableGuidancePrompts:]
  -[MNNavigationProxyUpdater navigationSession:didReceiveTrafficIncidentAlert:responseCallback:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateTrafficIncidentAlert:]
  -[MNNavigationProxyUpdater navigationSession:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationProxyUpdater enteredRoutePreviewWithTransportType:]
  -[MNNavigationProxyUpdater navigationSessionStopped:]
  -[MNNavigationProxyUpdater navigationSessionStarted:]
  -[MNNavigationProxyUpdater updateClusteredSectionSelectedRideForNavigationSession:]


MNNanoFormattedStringFormatter : NSObject /usr/lib/libc++.1.dylib <GEOServerFormattedStepStringFormatter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNanoFormattedStringFormatter sharedFormatter]

  // instance methods
  -[MNNanoFormattedStringFormatter listInstructionForStep:]
  -[MNNanoFormattedStringFormatter signInstructionsForStep:]


MNTimeballNetworkRequester : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[MNTimeballNetworkRequester requestRoutingOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballNetworkRequester _makeDirectionsRequestsWithOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballNetworkRequester _makeETARequestsWithOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]


MNNavigationStateGuidanceStepping : MNNavigationStateGuidance
  // instance methods
  -[MNNavigationStateGuidanceStepping type]


MNLocationMatchInfo : NSObject /usr/lib/libc++.1.dylib
 @property  long long matchQuality
 @property  {CLLocationCoordinate2D=dd} matchCoordinate
 @property  double matchCourse
 @property  int matchFormOfWay
 @property  int matchRoadClass
 @property  BOOL matchShifted
 @property  NSData *matchDataArray

  // instance methods
  -[MNLocationMatchInfo .cxx_destruct]
  -[MNLocationMatchInfo initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:matchDataArray:]
  -[MNLocationMatchInfo matchQuality]
  -[MNLocationMatchInfo matchCoordinate]
  -[MNLocationMatchInfo matchCourse]
  -[MNLocationMatchInfo matchFormOfWay]
  -[MNLocationMatchInfo matchRoadClass]
  -[MNLocationMatchInfo matchDataArray]
  -[MNLocationMatchInfo matchShifted]


NSMethodSignature(NavigationMethodForwarding)
	// class methods
	+[NSMethodSignature(NavigationMethodForwarding) _navigation_methodSignatureForEmptyMethod]

GEOLocalizationCapabilities(MNExtras)
	// class methods
	+[GEOLocalizationCapabilities(MNExtras) localizationCapabilitiesForPhoneticLocaleID:]

NSDateFormatter(MNExtras)
	// class methods
	+[NSDateFormatter(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:suppressTimeZoneDisplay:useShortFormat:]
	+[NSDateFormatter(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:showTimeZone:useShortFormat:]
	+[NSDateFormatter(MNExtras) _timestampFormatterForTimeZone:displayTimeZone:]
	+[NSDateFormatter(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:]
	+[NSDateFormatter(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:relativeToTimeZone:]
	+[NSDateFormatter(MNExtras) _navigation_debugDescriptionForDate:]

NSDate(BusinessHourExtras)
	// instance methods
	-[NSDate(BusinessHourExtras) isWholeHour]

NSString(HTMLEncoding)
	// class methods
	+[NSString(HTMLEncoding) _navigation_replacementForFormatToken:options:overrideVariables:]
	+[NSString(HTMLEncoding) _navigation_stringForExpectedTravelTime:dateUnitStyle:]
	+[NSString(HTMLEncoding) _navigation_formattedStringForHourRanges:timeZone:]
	+[NSString(HTMLEncoding) _navigation_formattedDescriptionForFrequency:]
	+[NSString(HTMLEncoding) _navigation_localizedStringForDistance:detail:unitFormat:locale:useMetric:useYards:]
	+[NSString(HTMLEncoding) _navigation_formattedStringForInteger:]
	+[NSString(HTMLEncoding) _navigation_formattedDescriptionForLiveStatus:updatedDepartureTimeString:]
	+[NSString(HTMLEncoding) _navigation_stringWithSeconds:andAbbreviationType:]
	+[NSString(HTMLEncoding) _navigation_spokenStringWithSeconds:abbreviated:]
	+[NSString(HTMLEncoding) _navigation_formattedStringForFloat:useIncreasedPrecision:]
	+[NSString(HTMLEncoding) _navigation_abbreviatedFromatterUnitsStyleForLocale:]
	+[NSString(HTMLEncoding) _navigation_descriptionForFrequencyRangeWithMinFrequency:maxFrequency:]
	+[NSString(HTMLEncoding) _navigation_descriptionForFrequencyMinuteValue:]
	+[NSString(HTMLEncoding) _frequencyStringForComponents:forRange:forceShort:]
	+[NSString(HTMLEncoding) _componentsWillUseShortFormat:]
	+[NSString(HTMLEncoding) _navigation_stringForServerFormattedString:options:overrideVariables:allTokensExpanded:]
	+[NSString(HTMLEncoding) _navigation_overridenTokenForToken:overrideVariables:]
	+[NSString(HTMLEncoding) _navigation_stringForServerFormattedString:abbreviatedUnits:detail:spoken:overrideVariables:]
	+[NSString(HTMLEncoding) _navigation_stringForServerFormattedString:abbreviatedUnits:detail:spoken:overrideVariables:allTokensExpanded:]
	+[NSString(HTMLEncoding) _navigation_stringForDistance:formatter:locale:]
	+[NSString(HTMLEncoding) _navigation_stringWithMinutes:andAbbreviationType:]
	+[NSString(HTMLEncoding) _navigation_spokenStringWithSeconds:andAbbreviationType:]
	+[NSString(HTMLEncoding) _navigation_spokenStringWithMinutes:andAbbreviationType:]
	+[NSString(HTMLEncoding) _navigation_formattedStringForPriceValue:currencyCode:]
	+[NSString(HTMLEncoding) _navigation_localizedStringForDistance:context:extraDetail:]
	+[NSString(HTMLEncoding) _navigation_stringWithSeconds:abbreviated:]
	+[NSString(HTMLEncoding) _navigation_stringWithTimeStampValues:options:]
	+[NSString(HTMLEncoding) _navigation_stringWithCountdownValue:inToken:options:]
	+[NSString(HTMLEncoding) _navigation_commaListDelimiter]
	+[NSString(HTMLEncoding) _navigation_formattedStringForPriceValueWithAmount:currencyCode:]
	+[NSString(HTMLEncoding) _navigation_formattedStringForPriceValueWithAmount:currencyCode:showsCurrencySymbol:]
	+[NSString(HTMLEncoding) _navigation_logMismatchBetweenServerInstruction:clientInstruction:]
	+[NSString(HTMLEncoding) _navigation_addPrefixToInstructions:isServer:isSpoken:]
	+[NSString(HTMLEncoding) _navigation_logIfContainsVariables:]
	+[NSString(HTMLEncoding) _navigation_formattedStringForFloat:]
	+[NSString(HTMLEncoding) _navigation_formatFloatForPrintedDistance:]
	+[NSString(HTMLEncoding) _navigation_stringForServerFormattedString:options:overrideVariables:]
	+[NSString(HTMLEncoding) _navigation_stringForServerFormattedString:]
	+[NSString(HTMLEncoding) _navigation_replacementForFormatToken:abbreviatedUnits:detail:spoken:overrideVariables:]
	+[NSString(HTMLEncoding) _navigation_languageDirectionStringWithFormat:]
	+[NSString(HTMLEncoding) _navigation_compareServerInstructions:withClientInstructions:]
	+[NSString(HTMLEncoding) _navigation_selectInstructionWithServerString:isSpoken:clientBlock:]
	+[NSString(HTMLEncoding) _navigation_selectInstructionWithServerStringArray:isSpoken:clientBlock:]
	+[NSString(HTMLEncoding) _navigation_stringWithSpeed:]
	+[NSString(HTMLEncoding) _navigation_stringWithSpeedUnits]
	+[NSString(HTMLEncoding) _navigation_stringWithDirection:abbreviated:]
	+[NSString(HTMLEncoding) _navigation_stringWithAltitude:accuracy:]
	+[NSString(HTMLEncoding) _navigation_stringWithAltitudeUnits]
	+[NSString(HTMLEncoding) _navigation_stringWithTime:]
	+[NSString(HTMLEncoding) _navigation_pointerDescription:]

	// instance methods
	-[NSString(HTMLEncoding) _navigation_sanitizedStringForDisplayInHTML]
	-[NSString(HTMLEncoding) _navigation_stringByEscapingHTML]
	-[NSString(HTMLEncoding) _navigation_stringByReplacingNewLinesWithString:]
	-[NSString(HTMLEncoding) _navigation_isPrivate]
	-[NSString(HTMLEncoding) _navigation_stripTagsFromSpokenString]
	-[NSString(HTMLEncoding) _navigation_stripDebugPrefix]
	-[NSString(HTMLEncoding) _navigation_isEqualToString:]
	-[NSString(HTMLEncoding) _navigation_containsVariables]
	-[NSString(HTMLEncoding) _navigation_stringByMakingPhonetic]
	-[NSString(HTMLEncoding) _navigation_stringByMarkingAsAddress]
	-[NSString(HTMLEncoding) _navigation_stringByMarkingAsNavigationText]
	-[NSString(HTMLEncoding) _navigation_stringByMarkingAsNormalText]
	-[NSString(HTMLEncoding) _navigation_isCJK]
	-[NSString(HTMLEncoding) _navigation_stringByMarkingAsPrivateText]
	-[NSString(HTMLEncoding) _navigation_stringByStrippingPrivateTag]
	-[NSString(HTMLEncoding) _navigation_stripVariablesFromString]
	-[NSString(HTMLEncoding) _navigation_distanceLevenshtein:]

GEOLocation(MNExtras)
	// class methods
	+[GEOLocation(MNExtras) locationWithCLLocation:course:]

	// instance methods
	-[GEOLocation(MNExtras) clientLocation]
	-[GEOLocation(MNExtras) initWithCLLocation:]
	-[GEOLocation(MNExtras) initWithCLLocation:useMatchInfo:]
	-[GEOLocation(MNExtras) initWithCLLocation:course:]

NSProcessInfo(MNExtras)
	// instance methods
	-[NSProcessInfo(MNExtras) _navigation_isNavd]

NSError(MNExtras)
	// class methods
	+[NSError(MNExtras) _navigation_errorWithCode:userInfo:]
	+[NSError(MNExtras) _navigation_errorWithCode:]

	// instance methods
	-[NSError(MNExtras) _navigation_errorCodeAsString]

GEOComposedWaypoint(MNExtras)
	// class methods
	+[GEOComposedWaypoint(MNExtras) appleParkWaypointFromMuid]
	+[GEOComposedWaypoint(MNExtras) appleParkWaypointFromAddress]
	+[GEOComposedWaypoint(MNExtras) appleParkWaypointFromLatLng]

	// instance methods
	-[GEOComposedWaypoint(MNExtras) localeIdentifier]
	-[GEOComposedWaypoint(MNExtras) destinationType]
	-[GEOComposedWaypoint(MNExtras) destinationInfo]
	-[GEOComposedWaypoint(MNExtras) humanDescription]
	-[GEOComposedWaypoint(MNExtras) navDisplayName]
	-[GEOComposedWaypoint(MNExtras) navAnnouncementAddress]
	-[GEOComposedWaypoint(MNExtras) navDisplayNameWithSpecialContacts:]
	-[GEOComposedWaypoint(MNExtras) navDisplayAddress]
	-[GEOComposedWaypoint(MNExtras) navAnnouncementName]
	-[GEOComposedWaypoint(MNExtras) humanDescriptionWithLatLng]
	-[GEOComposedWaypoint(MNExtras) humanDescriptionWithAddressAndLatLng]

GEOComposedRoute(MNTimeball)
	// class methods
	+[GEOComposedRoute(MNTimeball) _findDivergenceAndConvergence:pointCount:otherPoints:pointCount:divergenceTolerance:convergenceTolerance:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:]
	+[GEOComposedRoute(MNTimeball) findDivergenceAndConvergence:pointCount:otherPoints:pointCount:divergenceTolerance:convergenceTolerance:outCoordinatesA:outCoordinatesB:]
	+[GEOComposedRoute(MNTimeball) _pointsDiverge:pointCount:otherPoints:pointCount:tolerance:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) _startIndexForPoints:withPoints:pointCount:toleranceSquared:]
	+[GEOComposedRoute(MNTimeball) _pointsConverge:pointCount:otherPoints:pointCount:tolerance:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) _pointsConverge:pointCount:otherPoints:pointCount:tolerance:outCoordinatesA:outCoordinatesB:]
	+[GEOComposedRoute(MNTimeball) _addPointsToArray:forMapPoints:pointCount:isPolylineA:]
	+[GEOComposedRoute(MNTimeball) pointsDiverge:pointCount:otherPoints:pointCount:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) pointsConverge:pointCount:otherPoints:pointCount:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) findDivergenceAndConvergence:pointCount:otherCoordinates:pointCount:distanceInMeters:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:]
	+[GEOComposedRoute(MNTimeball) findDivergenceAndConvergence:pointCount:otherPoints:pointCount:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:]
	+[GEOComposedRoute(MNTimeball) _stringForPoint:]

	// instance methods
	-[GEOComposedRoute(MNTimeball) findDivergenceAndConvergenceWithRoute:outDivergenceCoordinate:outConvergenceCoordinate:]
	-[GEOComposedRoute(MNTimeball) _mapPoints]
	-[GEOComposedRoute(MNTimeball) divergenceAndConvergenceWithRoute:outOtherRoutePoints:]
	-[GEOComposedRoute(MNTimeball) _timeball_isEqualToRoute:]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromRouteMatch:etaRoute:outRemainingDistance:outDistanceToManeuverStart:outDistanceToManeuverEnd:]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromLocation:etaRoute:]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromLocation:etaRoute:outRemainingDistance:outDistanceToManeuverStart:outDistanceToManeuverEnd:]
	-[GEOComposedRoute(MNTimeball) findDivergenceAndConvergenceWithRoute:distanceInMeters:outDivergenceCoordinate:outConvergenceCoordinate:]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromLocation:]
	-[GEOComposedRoute(MNTimeball) divergenceAndConvergenceWithRoute:]
	-[GEOComposedRoute(MNTimeball) turnAnglesLookup]
	-[GEOComposedRoute(MNTimeball) setTurnAnglesLookup:]
	-[GEOComposedRoute(MNTimeball) cameraFocusStyleForStep:]

GEORouteInitializerData(MNExtras)
	// instance methods
	-[GEORouteInitializerData(MNExtras) allRoutes]
	-[GEORouteInitializerData(MNExtras) nonRecommendedRoutes]
	-[GEORouteInitializerData(MNExtras) allRouteInfos]
	-[GEORouteInitializerData(MNExtras) _allRouteInfosWithTypes:]

NSNumber(CGFloat)
	// instance methods
	-[NSNumber(CGFloat) cgFloatValue]

NSBundle(MNExtras)
	// class methods
	+[NSBundle(MNExtras) _navigation_isRunningInSiri]
	+[NSBundle(MNExtras) _navigationBundle]
	+[NSBundle(MNExtras) _navigation_implementsSiriMethod]

	// instance methods
	-[NSBundle(MNExtras) _navigation_localizedStringForKey:value:table:]

GEOStructuredAddress(MNExtras)
	// instance methods
	-[GEOStructuredAddress(MNExtras) singleLineAddress]

NSLocale(MNExtras)
	// class methods
	+[NSLocale(MNExtras) _navigation_overrideDistanceUnit:]
	+[NSLocale(MNExtras) _localeOverridesForLocaleWithCountryCode:]
	+[NSLocale(MNExtras) _navigation_setNeedsUpdateOverrideDistanceUnit]
	+[NSLocale(MNExtras) set_navigation_overrideDistanceUnitProvider:]
	+[NSLocale(MNExtras) _navigation_overrideDistanceUnitProvider]

	// instance methods
	-[NSLocale(MNExtras) _navigation_distanceUsesMetricSystem]
	-[NSLocale(MNExtras) _navigation_useYardsForShortDistances]
	-[NSLocale(MNExtras) _navigation_distanceUsesMetricSystemIgnoringUserPreference:]
	-[NSLocale(MNExtras) _navigation_objectForKey:]

GEORoute(MNExtras)
	// instance methods
	-[GEORoute(MNExtras) extendToOriginOfRoute:]

CLLocation(MNExtras)
	// class methods
	+[CLLocation(MNExtras) _navigation_stringWithType:]
	+[CLLocation(MNExtras) _navigation_isLocation:equalTo:]

	// instance methods
	-[CLLocation(MNExtras) _navigation_routeMatch]
	-[CLLocation(MNExtras) _navigation_hasValidCourse]
	-[CLLocation(MNExtras) _navigation_setGtLog:]
	-[CLLocation(MNExtras) _navigation_hasMatch]
	-[CLLocation(MNExtras) _navigation_isStale]
	-[CLLocation(MNExtras) _navigation_isEqualToLocationCoordinate:]
	-[CLLocation(MNExtras) _navigation_rawShiftedCoordinate]
	-[CLLocation(MNExtras) _navigation_gtLog]
	-[CLLocation(MNExtras) _navigation_courseAccuracy]
	-[CLLocation(MNExtras) _navigation_speedAccuracy]
	-[CLLocation(MNExtras) _navigation_detailedMatchInfo]
	-[CLLocation(MNExtras) initWithGeoLocation:]
	-[CLLocation(MNExtras) initWithCoordinate:rawCoordinate:course:rawCourse:courseAccuracy:speed:speedAccuracy:altitude:timestamp:horizontalAccuracy:verticalAccuracy:type:referenceFrame:]
	-[CLLocation(MNExtras) _navigation_locationDescription]
	-[CLLocation(MNExtras) _navigation_geoLocation]

GEOComposedRouteStep(MNInstructions)
	// instance methods
	-[GEOComposedRouteStep(MNInstructions) contentsForContext:]

GEORouteAttributes(MNExtras)
	// class methods
	+[GEORouteAttributes(MNExtras) defaultRouteAttributesForTransportType:]

GEOLatLng(MNExtras)
NSCalendar(MNExtras)
	// instance methods
	-[NSCalendar(MNExtras) _navigation_transitRelativeDateStringForDate:context:inTimeZone:outUsedFormat:]
	-[NSCalendar(MNExtras) _navigation_isDateInToday:inTimeZone:]
	-[NSCalendar(MNExtras) _navigation_dateStringForDate:withStyle:useRelativeFormatting:inTimeZone:]
	-[NSCalendar(MNExtras) _navigation_offsetDate:toTimeZone:]
	-[NSCalendar(MNExtras) _navigation_relativeDateStringForDate:context:inTimeZone:]
	-[NSCalendar(MNExtras) _navigation_isDateInTomorrow:inTimeZone:]

GEOAddress(MNExtras)
	// instance methods
	-[GEOAddress(MNExtras) singleLineAddress]

NSUUID(MNExtras)
	// class methods
	+[NSUUID(MNExtras) _navigation_uuidForData:]
	+[NSUUID(MNExtras) _navigation_dataForUUID]

	// instance methods
	-[NSUUID(MNExtras) _navigation_data]

NSArray(MNExtras)
	// instance methods
	-[NSArray(MNExtras) _navigation_firstObjectPassingTest:]

NSData(MNExtras)
	// instance methods
	-[NSData(MNExtras) _navigation_unsignedIntegerValue]

NSTimeZone(MNExtras)
	// instance methods
	-[NSTimeZone(MNExtras) _navigation_isEquivalentToTimeZone:forDate:]
	-[NSTimeZone(MNExtras) _navigation_hasSameOffsetFromGMTAsTimeZone:]
	-[NSTimeZone(MNExtras) _navigation_isEquivalentToTimeZone:forDates:]

GEOETARoute(MNExtras)
	// instance methods
	-[GEOETARoute(MNExtras) hasTrafficIncidentAlert]
	-[GEOETARoute(MNExtras) hasValidTrafficIncidentAlert]
	-[GEOETARoute(MNExtras) initForRoute:usingETAsFromOtherRoute:]

GEOStep(MNExtras)
	// instance methods
	-[GEOStep(MNExtras) speed]
	-[GEOStep(MNExtras) maneuverIsTakeNthExitAtRoundabout]

NSDictionary(MNExtras)
	// class methods
	+[NSDictionary(MNExtras) _serverStringDictionaryForDistance:validDistance:destination:spoken:]
	+[NSDictionary(MNExtras) _serverStringDictionaryForMapItem:]

NSMutableArray(MNTraceRouteSimulator)
	// instance methods
	-[NSMutableArray(MNTraceRouteSimulator) insertByTimestamp:]

01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLHeading 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLInUseAssertion 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationManager 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationMatchInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOAddress 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOApplicationAuditToken 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOAutomobileOptions 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCommonOptions 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCompanionRouteDetails 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCompanionRouteStatus 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCompanionRouteUpdate 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRoute 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRouteLaneInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRouteStep 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRouteTraffic 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedTransitWalkingRouteStep 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedWaypoint 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCountryConfiguration 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODestinationInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionService 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsError 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsRequestFeedback 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsRequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsResponse 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETARoute 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETAStep 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETATrafficUpdateRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETATrafficUpdateRequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETATrafficUpdateResponse 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETAUpdater 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOFormattedString 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOImageServiceRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOImageServiceRequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOJunction 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLatLng 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocalizationCapabilities 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocation 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocationShifter 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapRegion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapService 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMotionContext 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavRoutePreloader 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavdClientInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavdDefaults 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavdPeer 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationDrivingMapMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationGuidanceState 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationProxy 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationWalkingMapMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOPlatform 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOQuickETARequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOResourceManifestManager 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOResourceManifestUpdateAssertion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORoadMatch 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORoadMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORoute 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteAttributes 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteInitializerData 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteMatch 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORoutePreloader 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOSQLiteDB 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOStep 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOStructuredAddress 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTFTrafficSnapshot 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTileLoader 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTraceRouteSimulator 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTrafficBannerText 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitOptions 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRoutePreloader 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteUpdate 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteUpdateRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteUpdater 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOUserSession 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOVectorTileDecoder 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOWalkingOptions 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateComponentsFormatter 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMeasurement 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMeasurementFormatter 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 0600 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnitLength 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0100 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0100 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBDataReader 
