|| __DATA.__data _NavigationConfig_ARGuidanceArrivalLabelMinimumStepIndex
|| __DATA.__data _NavigationConfig_ARGuidanceHeadingDeltaTurn
|| __DATA.__data _NavigationConfig_ARGuidanceInitialGuidanceDistanceThreshold
|| __DATA.__data _NavigationConfig_ARGuidanceNextManeuverDistanceOffset
|| __DATA.__data _NavigationConfig_ApproachingWaypointThreshold
|| __DATA.__data _NavigationConfig_AutomaticallyEndOnArrival
|| __DATA.__data _NavigationConfig_AutomaticallyEndOnVehicleDisconnectAfterArrival
|| __DATA.__data _NavigationConfig_DebugNavigationAutomationNotifications
|| __DATA.__data _NavigationConfig_DebugNavigationIncludeRealtimeUpdates
|| __DATA.__data _NavigationConfig_DebugNavigationServerStrings
|| __DATA.__data _NavigationConfig_DoomDirectionsRequestPriority
|| __DATA.__data _NavigationConfig_ETAResponseFakeTrafficIncidentAlert
|| __DATA.__data _NavigationConfig_ETAResponseFakeTrafficIncidentSimulateVotingButtons
|| __DATA.__data _NavigationConfig_ETAResponseFakeTrafficIncidentVotingButtonDisplay
|| __DATA.__data _NavigationConfig_ETAUpdateInterval
|| __DATA.__data _NavigationConfig_EVChargingMonitorMaximumTime
|| __DATA.__data _NavigationConfig_EVChargingMonitorMinimumTime
|| __DATA.__data _NavigationConfig_EVChargingMonitorSpeedThreshold
|| __DATA.__data _NavigationConfig_EnableDodgeball
|| __DATA.__data _NavigationConfig_EnableNavigationTransportModeSwitching
|| __DATA.__data _NavigationConfig_IgnoreCourseAccuracy
|| __DATA.__data _NavigationConfig_InitialETARequestDelay
|| __DATA.__data _NavigationConfig_JunctionViewImagesPreloadingThreshold
|| __DATA.__data _NavigationConfig_LPRAverageSpeedForETAGuess
|| __DATA.__data _NavigationConfig_LPRBoundingRegionRadius
|| __DATA.__data _NavigationConfig_LPRDebugKeysResetAfter_DEBUG
|| __DATA.__data _NavigationConfig_LPRMaskPlateFailureCode_DEBUG
|| __DATA.__data _NavigationConfig_LPRMaskingRulesDateOverride
|| __DATA.__data _NavigationConfig_LPRProvideBadVersion_DEBUG
|| __DATA.__data _NavigationConfig_LeechingThrottleTimeout
|| __DATA.__data _NavigationConfig_LocationOverdueTimeoutForTunnel
|| __DATA.__data _NavigationConfig_LocationProjectionTimeSeconds
|| __DATA.__data _NavigationConfig_LogRoutes_RoutePreview_AlternateRoutes
|| __DATA.__data _NavigationConfig_LogRoutes_RoutePreview_MainRoute
|| __DATA.__data _NavigationConfig_MNAudioHardwareEngine_ChangedToAlertsOnly
|| __DATA.__data _NavigationConfig_MapLocalizeLabels
|| __DATA.__data _NavigationConfig_MinLocationAccuracyForPreArrivalReroute
|| __DATA.__data _NavigationConfig_MinimumDistanceBetweenReroutes
|| __DATA.__data _NavigationConfig_MinimumTimeBetweenReroutes
|| __DATA.__data _NavigationConfig_NavDoomCacheCurrentTripTag
|| __DATA.__data _NavigationConfig_NavdDisconnectRetryCount
|| __DATA.__data _NavigationConfig_NavdDisconnectRetryWindow
|| __DATA.__data _NavigationConfig_NavdMonitoringDistanceThreshold
|| __DATA.__data _NavigationConfig_NavdXPCDownloadSizeBytes
|| __DATA.__data _NavigationConfig_NavigationDebugPanelMuteVoice
|| __DATA.__data _NavigationConfig_NavigationDingInstead
|| __DATA.__data _NavigationConfig_NavigationDisableServerTTS
|| __DATA.__data _NavigationConfig_NavigationPreventsManifestUpdate
|| __DATA.__data _NavigationConfig_NavigationShowLiveAlternateRoutesInTrenchMode
|| __DATA.__data _NavigationConfig_RerouteThrottleCount
|| __DATA.__data _NavigationConfig_RerouteThrottleInterval
|| __DATA.__data _NavigationConfig_RouteRecalHighFrequencySeconds
|| __DATA.__data _NavigationConfig_RouteRecalHighFrequencyTries
|| __DATA.__data _NavigationConfig_RouteRecalLowFrequencySeconds
|| __DATA.__data _NavigationConfig_SaveRoutesToDiskInsteadXPC
|| __DATA.__data _NavigationConfig_ShouldSpeakWrittenAddresses
|| __DATA.__data _NavigationConfig_ShouldSpeakWrittenDirections
|| __DATA.__data _NavigationConfig_ShouldSpeakWrittenPlaceNames
|| __DATA.__data _NavigationConfig_ShouldThrottlePreArrivalReroute
|| __DATA.__data _NavigationConfig_SimulationEnabled
|| __DATA.__data _NavigationConfig_SimulationGPSError
|| __DATA.__data _NavigationConfig_SimulationKeepLocationAfterEndingNavigation
|| __DATA.__data _NavigationConfig_SimulationShouldShowPrompt
|| __DATA.__data _NavigationConfig_SimulationSimulateGeoFences
|| __DATA.__data _NavigationConfig_SimulationSpeedOverride
|| __DATA.__data _NavigationConfig_SimulationStartDistanceBeforeWaypoint
|| __DATA.__data _NavigationConfig_SimulationStartWaypoint
|| __DATA.__data _NavigationConfig_SimulationType
|| __DATA.__data _NavigationConfig_SimulationWaitAtWaypointDuration
|| __DATA.__data _NavigationConfig_SpokenGuidanceVolume
|| __DATA.__data _NavigationConfig_TimeIntervalToIgnoreCellLocations
|| __DATA.__data _NavigationConfig_TimeballDefaultCacheAge
|| __DATA.__data _NavigationConfig_TimeballDeferredRefresh
|| __DATA.__data _NavigationConfig_TimeballDestinationComparisonCriteria
|| __DATA.__data _NavigationConfig_TimeballEnabled
|| __DATA.__data _NavigationConfig_TimeballLocationAccuracy
|| __DATA.__data _NavigationConfig_TimeballLocationAttempts
|| __DATA.__data _NavigationConfig_TimeballLocationTimeoutInterval
|| __DATA.__data _NavigationConfig_TimeballRefreshPolicyMaximumIntervalForTTL
|| __DATA.__data _NavigationConfig_TimeballRefreshPolicyRateForForeground
|| __DATA.__data _NavigationConfig_TimeballRequestRouteCount
|| __DATA.__data _NavigationConfig_TracePlaybackDefaultSpeedMultiplier
|| __DATA.__data _NavigationConfig_TracePlaybackInitialRouteSource
|| __DATA.__data _NavigationConfig_TracePlaybackIsCameraTestMode
|| __DATA.__data _NavigationConfig_TracePlaybackShouldLoadETAUpdatesFromTrace
|| __DATA.__data _NavigationConfig_TracePlaybackShouldLoadReroutesFromTrace
|| __DATA.__data _NavigationConfig_TracePlaybackShouldSendAnalytics
|| __DATA.__data _NavigationConfig_TraceRecordingCopyToCrashReporter
|| __DATA.__data _NavigationConfig_TraceRecordingCreateSymbolicLinkToLatestTrace
|| __DATA.__data _NavigationConfig_TraceRecordingEnabled
|| __DATA.__data _NavigationConfig_TraceRecordingRoutePreviewGuidanceEnabled
|| __DATA.__data _NavigationConfig_TrafficIncidentAlertDisplayDurationSeconds
|| __DATA.__data _NavigationConfig_TransitMockWeakSignalNotifications
|| __DATA.__data _NavigationConfig_TransitTriggerRegionRadius
|| __DATA.__data _NavigationConfig_TransitTriggerRegionRadiusStrongLocation
|| __DATA.__data _NavigationConfig_UGCRequestDiscoverabilityPrompt
|| __DATA.__data _NavigationConfig_UseCLDrivingMapMatchedLocations
|| __DATA.__data _NavigationConfig_UseCLPedestrianMapMatchedLocations
|| __DATA.__data _NavigationConfig_UseNewDisplayETACalculation
|| __DATA.__data _NavigationConfig_WaypointArrival_DistanceFromWaypointPolygonToAllowDeparture
|| __DATA.__data _NavigationConfig_WaypointArrival_DistanceToCenterToAllowDeparture
|| __DATA.__data _NavigationConfig_WaypointArrival_TimeAtWaypointToAllowDeparture
|| __DATA.__objc_data _OBJC_CLASS_$_MNAnnouncementConflict
|| __DATA.__objc_data _OBJC_CLASS_$_MNAnnouncementPlan
|| __DATA.__objc_data _OBJC_CLASS_$_MNAnnouncementPlanEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MNCompanionNavigationAdapter
|| __DATA.__objc_data _OBJC_CLASS_$_MNCoreMotionContextProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MNCyclingTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_CLASS_$_MNDirectionsRequestDetails
|| __DATA.__objc_data _OBJC_CLASS_$_MNDirectionsRequestManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNDrivingTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_CLASS_$_MNETADisplayFormatter
|| __DATA.__objc_data _OBJC_CLASS_$_MNGuidanceJunctionViewImage
|| __DATA.__objc_data _OBJC_CLASS_$_MNKeepAliveManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNLPRRuleHelper
|| __DATA.__objc_data _OBJC_CLASS_$_MNLPRRuleMatcher
|| __DATA.__objc_data _OBJC_CLASS_$_MNLocationTracker
|| __DATA.__objc_data _OBJC_CLASS_$_MNNanoFormattedStringFormatter
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationProxyUpdater
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationServiceDirectionsRequestTicket
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationSession
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationSessionManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationStateGuidanceTurnByTurn
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationStateRoutePreview
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationStateRoutePreviewGuidance
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationTraceInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MNNavigationTraceManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNPlannedDestination
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteCoordinate
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteGeniusRemoteService
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteProximitySensor
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyFactory
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyRulesDefault
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyRulesForeground
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyRulesTimeToLeave
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteRefreshPolicyScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_MNRouteUpdateFreshness
|| __DATA.__objc_data _OBJC_CLASS_$_MNSpokenInstructionContents
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballCache
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballCacheEntry
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballLocationManager
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballMockLocationProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballMockNetworkRequester
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballRoutingProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballServer
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimeballService
|| __DATA.__objc_data _OBJC_CLASS_$_MNTimepoint
|| __DATA.__objc_data _OBJC_CLASS_$_MNTrace
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceAnnotatedUserBehaviorRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceAnnotatedUserEnvironmentRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceBookmark
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceBookmarkRecorder
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceDirectionsRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceETAUpdateRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceEVDataRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceHeadingDataRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceLoader
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceLocationRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceMiscInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceMotionDataRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceNavigationEventRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTracePlayer
|| __DATA.__objc_data _OBJC_CLASS_$_MNTracePlayerScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_MNTracePlayerTimelineStream
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceRecorder
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceVehicleHeadingRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTraceVehicleSpeedRow
|| __DATA.__objc_data _OBJC_CLASS_$_MNTransitInstruction
|| __DATA.__objc_data _OBJC_CLASS_$_MNTransitStepInstruction
|| __DATA.__objc_data _OBJC_CLASS_$_MNTransitWalkingSegmentInstruction
|| __DATA.__objc_data _OBJC_CLASS_$_MNTunnelLocationProjector
|| __DATA.__objc_data _OBJC_CLASS_$_MNTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_CLASS_$_MNVehicleMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_MNWalkingTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_CLASS_$_MNXPCActivity
|| __DATA.__objc_data _OBJC_CLASS_$_MNXPCTransactionCounter
|| __DATA.__objc_data _OBJC_CLASS_$__MNTimepointAndTransportType
|| __DATA.__objc_data _OBJC_METACLASS_$_MNAnnouncementConflict
|| __DATA.__objc_data _OBJC_METACLASS_$_MNAnnouncementPlan
|| __DATA.__objc_data _OBJC_METACLASS_$_MNAnnouncementPlanEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MNCompanionNavigationAdapter
|| __DATA.__objc_data _OBJC_METACLASS_$_MNCoreMotionContextProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_MNCyclingTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_MNDirectionsRequestDetails
|| __DATA.__objc_data _OBJC_METACLASS_$_MNDirectionsRequestManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNDrivingTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_MNETADisplayFormatter
|| __DATA.__objc_data _OBJC_METACLASS_$_MNGuidanceJunctionViewImage
|| __DATA.__objc_data _OBJC_METACLASS_$_MNKeepAliveManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNLPRRuleHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_MNLPRRuleMatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_MNLocationTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNanoFormattedStringFormatter
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationProxyUpdater
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationServiceDirectionsRequestTicket
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationSession
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationSessionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationStateGuidanceTurnByTurn
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationStateRoutePreview
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationStateRoutePreviewGuidance
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationTraceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MNNavigationTraceManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNPlannedDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteCoordinate
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteGeniusRemoteService
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteProximitySensor
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyRulesDefault
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyRulesForeground
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyRulesTimeToLeave
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteRefreshPolicyScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_MNRouteUpdateFreshness
|| __DATA.__objc_data _OBJC_METACLASS_$_MNSpokenInstructionContents
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballCache
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballCacheEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballLocationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballMockLocationProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballMockNetworkRequester
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballRoutingProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballServer
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimeballService
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTimepoint
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTrace
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceAnnotatedUserBehaviorRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceAnnotatedUserEnvironmentRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceBookmark
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceBookmarkRecorder
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceDirectionsRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceETAUpdateRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceEVDataRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceHeadingDataRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceLoader
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceLocationRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceMiscInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceMotionDataRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceNavigationEventRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTracePlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTracePlayerScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTracePlayerTimelineStream
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceRecorder
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceVehicleHeadingRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTraceVehicleSpeedRow
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTransitInstruction
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTransitStepInstruction
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTransitWalkingSegmentInstruction
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTunnelLocationProjector
|| __DATA.__objc_data _OBJC_METACLASS_$_MNTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_MNVehicleMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_MNWalkingTurnByTurnLocationTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_MNXPCActivity
|| __DATA.__objc_data _OBJC_METACLASS_$_MNXPCTransactionCounter
|| __DATA.__objc_data _OBJC_METACLASS_$__MNTimepointAndTransportType
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._branchNames
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._destinationName
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._distance
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._distanceFormat
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._exitNumber
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._instructionFormats
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._intersectionName
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._junctionAngle
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._maneuverType
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._suppressFallback
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._suppressNames
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._toFreeway
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._towardNames
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNListInstructionContents._transportType
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNNavigationStateGuidance._navigationSessionManager
|| __DATA.__objc_ivar _OBJC_IVAR_$_MNNavigationStateGuidance._startDetails
|| __DATA_CONST.__const _LPRResourceExtensionSigned
|| __DATA_CONST.__const _MNErrorDomain
|| __DATA_CONST.__const _MNErrorInternalDescriptionKey
|| __DATA_CONST.__const _MNErrorInterruptionDatesKey
|| __DATA_CONST.__const _MNLPRRuleMatcherErrorDomain
|| __DATA_CONST.__const _MNLogFacilityAssert
|| __DATA_CONST.__const _MNLogFacilityCoreLocationRouteHints
|| __DATA_CONST.__const _MNLogFacilityDirectionsRequest
|| __DATA_CONST.__const _MNLogFacilityDodgeball
|| __DATA_CONST.__const _MNLogFacilityETAUpdateRequest
|| __DATA_CONST.__const _MNLogFacilityEVChargingStateMonitor
|| __DATA_CONST.__const _MNLogFacilityGuidanceManager
|| __DATA_CONST.__const _MNLogFacilityHybridLocationProvider
|| __DATA_CONST.__const _MNLogFacilityJunctionView
|| __DATA_CONST.__const _MNLogFacilityKeepAliveManager
|| __DATA_CONST.__const _MNLogFacilityLocationManager
|| __DATA_CONST.__const _MNLogFacilityLocationProvider
|| __DATA_CONST.__const _MNLogFacilityLocationTracker
|| __DATA_CONST.__const _MNLogFacilityNavigationDetails
|| __DATA_CONST.__const _MNLogFacilityNavigationService
|| __DATA_CONST.__const _MNLogFacilityNavigationSession
|| __DATA_CONST.__const _MNLogFacilityNavigationSessionManager
|| __DATA_CONST.__const _MNLogFacilityNavigationSimulation
|| __DATA_CONST.__const _MNLogFacilityNavigationStateGuidance
|| __DATA_CONST.__const _MNLogFacilityNavigationStateManager
|| __DATA_CONST.__const _MNLogFacilityNavigationStateNoDestination
|| __DATA_CONST.__const _MNLogFacilityNavigationStateRoutePreview
|| __DATA_CONST.__const _MNLogFacilityRouteAttributes
|| __DATA_CONST.__const _MNLogFacilityRouteStorage
|| __DATA_CONST.__const _MNLogFacilitySessionUpdateManager
|| __DATA_CONST.__const _MNLogFacilitySettingsManager
|| __DATA_CONST.__const _MNLogFacilityTimeballCache
|| __DATA_CONST.__const _MNLogFacilityTimeballDatabase
|| __DATA_CONST.__const _MNLogFacilityTimeballLocalPeer
|| __DATA_CONST.__const _MNLogFacilityTimeballLocalProxy
|| __DATA_CONST.__const _MNLogFacilityTimeballLocationManager
|| __DATA_CONST.__const _MNLogFacilityTimeballRefreshPolicy
|| __DATA_CONST.__const _MNLogFacilityTimeballRequester
|| __DATA_CONST.__const _MNLogFacilityTimeballRoutingProvider
|| __DATA_CONST.__const _MNLogFacilityTimeballServer
|| __DATA_CONST.__const _MNLogFacilityTimeballService
|| __DATA_CONST.__const _MNLogFacilityTimeballXPC
|| __DATA_CONST.__const _MNLogFacilityTrace
|| __DATA_CONST.__const _MNLogFacilityTransitUpdateRequest
|| __DATA_CONST.__const _MNLogFacilityVehicleMonitor
|| __DATA_CONST.__const _MNLogFacilityXPC
|| __DATA_CONST.__const _MNLogFacilityXPCTransactionCounter
|| __DATA_CONST.__const _MNLogFacilityXPCTransactionManager
|| __DATA_CONST.__const _MNLoggingAudioSubsystem
|| __DATA_CONST.__const _MNLoggingSubsystem
|| __DATA_CONST.__const _NavdNotificationManagerClassString
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNActiveRouteInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNComparison
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNDisplayETAInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNFilePaths
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceARInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceEventFeedback
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceJunctionViewInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceLaneInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceSignDescription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNGuidanceSignInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNHybridLocationProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNListInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavdStateUpdater
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStateGuidance
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNavigationStateNoDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRealtimeTransitUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRealtimeUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteCoordinateWithType
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNRouteDistanceInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNSignInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNStartNavigationDetails
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTracePlaybackDetails
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTraceRecordingData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTrafficIncidentAlert
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNTransitAlert
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNUserOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MNVoiceLanguageUtil
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNActiveRouteInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNComparison
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNDisplayETAInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNFilePaths
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceARInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceEventFeedback
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceJunctionViewInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceLaneInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceSignDescription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNGuidanceSignInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNHybridLocationProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNListInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavdStateUpdater
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStateGuidance
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNavigationStateNoDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRealtimeTransitUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRealtimeUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteCoordinateWithType
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNRouteDistanceInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNSignInstructionContents
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNStartNavigationDetails
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTracePlaybackDetails
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTraceRecordingData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTrafficIncidentAlert
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNTransitAlert
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNUserOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MNVoiceLanguageUtil
|| __TEXT.__text _MNAssertOptionalProtocolMethodsHelper
|| __TEXT.__text _MNClearStoredRoutesUsedBefore
|| __TEXT.__text _MNCurrentNavigationStateAllowsDoom
|| __TEXT.__text _MNDeviceSpeakerIsInUse
|| __TEXT.__text _MNDirectionsRequestDetailsReadFrom
|| __TEXT.__text _MNDisplayETAAndRemainingMinutes
|| __TEXT.__text _MNFormattedStringOptionsHash
|| __TEXT.__text _MNFormattedStringOptionsIsEqual
|| __TEXT.__text _MNGetErrorsLog
|| __TEXT.__text _MNGetHoursAndMinutesForTimeInterval
|| __TEXT.__text _MNGetMNDirectionsRequestLog
|| __TEXT.__text _MNGetMNLocationProviderLog
|| __TEXT.__text _MNGetMNLocationTrackerLog
|| __TEXT.__text _MNGetMNNavigationDetailsLog
|| __TEXT.__text _MNGetMNNavigationStateManagerLog
|| __TEXT.__text _MNGetMNRouteAttributesLog
|| __TEXT.__text _MNGetMNRouteStorageLog
|| __TEXT.__text _MNGetMNTunnelProjectorLog
|| __TEXT.__text _MNGetMNVirtualGarageManagerLog
|| __TEXT.__text _MNGetMNXPCTransactionManagerLog
|| __TEXT.__text _MNGetProcessHandlingLog
|| __TEXT.__text _MNGetRouteWithID
|| __TEXT.__text _MNGuidanceEventFeedbackReadFrom
|| __TEXT.__text _MNHeadphonesAreInUse
|| __TEXT.__text _MNInstructionsCalculateDistanceUnits
|| __TEXT.__text _MNInstructionsCalculateScaledDistanceUnits
|| __TEXT.__text _MNInstructionsDistanceTypeConvertToMeters
|| __TEXT.__text _MNInstructionsInitOptionsWithDefault
|| __TEXT.__text _MNInstructionsLocalizedImperialUnits
|| __TEXT.__text _MNInstructionsLocalizedMetricUnits
|| __TEXT.__text _MNInstructionsShortPromptTypeForManeuver
|| __TEXT.__text _MNJSONForBool
|| __TEXT.__text _MNJSONForCoordinate
|| __TEXT.__text _MNJSONForDate
|| __TEXT.__text _MNJSONForError
|| __TEXT.__text _MNJSONForLatLng
|| __TEXT.__text _MNJSONForLocation
|| __TEXT.__text _MNJSONForMapRegion
|| __TEXT.__text _MNJSONForObject
|| __TEXT.__text _MNJSONForRoute
|| __TEXT.__text _MNJSONForRoutes
|| __TEXT.__text _MNJSONForWaypoint
|| __TEXT.__text _MNJSONForWaypointAndTransportType
|| __TEXT.__text _MNJSONStringForObject
|| __TEXT.__text _MNLocaleDidChangeNotification
|| __TEXT.__text _MNMap
|| __TEXT.__text _MNNavigationServiceStateAsString
|| __TEXT.__text _MNNavigationServiceStateChangedFromNavigatingToStopped
|| __TEXT.__text _MNNavigationServiceStateChangedToNavigating
|| __TEXT.__text _MNNavigationServiceStateIsNavigating
|| __TEXT.__text _MNNavigationTypeForRouteInCountry
|| __TEXT.__text _MNProtocolDeclaresSelector
|| __TEXT.__text _MNRouteCoordinateReadFrom
|| __TEXT.__text _MNRouteRequestOptionsAsString
|| __TEXT.__text _MNSaveRoute
|| __TEXT.__text _MNStringForJSONObject
|| __TEXT.__text _MNTimeballEnabled
|| __TEXT.__text _MNTimepointTypeAsString
|| __TEXT.__text _MNTraceBookmarkReadFrom
|| __TEXT.__text _MNTraceNavigationEventTypeAsString
|| __TEXT.__text _MNTracePlaybackDetailsReadFrom
|| __TEXT.__text _MNTransportTypeSupportsTurnByTurn
|| __TEXT.__text _MNTravelModeAsString
|| __TEXT.__text _NavigationConfig_GetConfigStoreStringKeysForWatchSync
|| __TEXT.__text _NavigationConfig_GetUserDefaultStringKeysForWatchSync
|| __TEXT.__text __MNDisplayETAAndRemainingMinutesNew
|| __TEXT.__text __MNDisplayETAAndRemainingMinutesOld
|| __TEXT.__text __navigation_GEOLatLngIsNilOrZero
|| __TEXT.__text _navDisplayAddressForMapItem
|| __TEXT.__text _navDisplayNameForMapItem
__ AVFAudio: _OBJC_CLASS_$_AVAudioPlayer
__ AssistantServices: _OBJC_CLASS_$_AFConnection
__ AssistantServices: _OBJC_CLASS_$_AFPreferences
__ AudioSession: _AVAudioSessionCategoryPlayback
__ AudioSession: _AVAudioSessionInterruptionNotification
__ AudioSession: _AVAudioSessionInterruptionReasonKey
__ AudioSession: _AVAudioSessionInterruptionTypeKey
__ AudioSession: _AVAudioSessionMediaServicesWereLostNotification
__ AudioSession: _AVAudioSessionMediaServicesWereResetNotification
__ AudioSession: _AVAudioSessionModeVoicePrompt
__ AudioSession: _AVAudioSessionPortBuiltInSpeaker
__ AudioSession: _OBJC_CLASS_$_AVAudioSession
__ AudioToolbox: _AudioServicesPlaySystemSoundWithCompletion
__ AudioToolbox: _AudioServicesPlaySystemSoundWithOptions
__ AudioToolbox: _AudioServicesStopSystemSound
__ AudioToolbox: _kAudioServicesPlaySystemSoundOptionVibrationPatternKey
__ Celestial: _AVSystemController_AppWantsVolumeChangesAttribute
__ Celestial: _AVSystemController_FullMuteAttribute
__ Celestial: _AVSystemController_NowPlayingAppIsPlayingAttribute
__ Celestial: _AVSystemController_PickableRouteType_Override
__ Celestial: _AVSystemController_PickableRouteType_Wireless
__ Celestial: _AVSystemController_PickableRoutesDidChangeNotification
__ Celestial: _AVSystemController_RouteDescriptionKey_AVAudioRouteName
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_EndpointType
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_EndpointType_Vehicle
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_IsHFPRoute
__ Celestial: _AVSystemController_RouteDescriptionKey_IsBTRoute
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteType
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _AVSystemController_SubscribeToNotificationsAttribute
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyLocalizationsForPreferences
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFStringTokenizerCopyBestStringLanguage
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _NSCurrentLocaleDidChangeNotification
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSLocaleLanguageCode
__ CoreFoundation: _NSLocaleUsesMetricSystem
__ CoreFoundation: _NSURLFileProtectionCompleteUntilFirstUserAuthentication
__ CoreFoundation: _NSURLFileProtectionKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFErrorDebugDescriptionKey
__ CoreFoundation: _kCFErrorUnderlyingErrorKey
__ CoreFoundation: _kCFLocaleCurrentLocaleDidChangeNotification
__ CoreLocation: _CLLocationCoordinate2DIsValid
__ CoreLocation: _CLLocationCoordinate2DMake
__ CoreLocation: _CLSetMapMatchingRouteHint
__ CoreLocation: _OBJC_CLASS_$_CLCircularRegion
__ CoreLocation: _OBJC_CLASS_$_CLHeading
__ CoreLocation: _OBJC_CLASS_$_CLInUseAssertion
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreLocation: _OBJC_CLASS_$_CLLocationManager
__ CoreLocation: _OBJC_CLASS_$_CLLocationMatchInfo
__ CoreLocation: _OBJC_CLASS_$_CLSimulationManager
__ CoreLocation: _OBJC_METACLASS_$_CLLocation
__ CoreLocation: _kCLDistanceFilterNone
__ CoreLocation: _kCLErrorDomain
__ CoreLocation: _kCLLocationAccuracyBestForNavigation
__ CoreLocation: _kCLLocationAccuracyLeech
__ CoreLocation: _kCLLocationCoordinate2DInvalid
__ CoreMotion: _OBJC_CLASS_$_CMActivityManager
__ CoreMotion: _kCMVehicleConnectedNotification
__ CoreMotion: _kCMVehicleDisconnectedNotification
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSFileModificationDate
__ Foundation: _NSFileType
__ Foundation: _NSFileTypeSymbolicLink
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSSetUncaughtExceptionHandler
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _NSUserDefaultsDidChangeNotification
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDateInterval
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMeasurement
__ Foundation: _OBJC_CLASS_$_NSMeasurementFormatter
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUnitEnergy
__ Foundation: _OBJC_CLASS_$_NSUnitLength
__ Foundation: _OBJC_CLASS_$_NSUnitPower
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ GeoServices: _DefaultLoggingSubsystem
__ GeoServices: _GEOAngleDifferenceDegrees
__ GeoServices: _GEOArrivalTimeAndDistanceInvalid
__ GeoServices: _GEOBearingFromCoordinateToCoordinate
__ GeoServices: _GEOCalculateDistance
__ GeoServices: _GEOConfigGetBOOL
__ GeoServices: _GEOConfigGetDate
__ GeoServices: _GEOConfigGetDouble
__ GeoServices: _GEOConfigGetInteger
__ GeoServices: _GEOConfigGetPropertiesForKey
__ GeoServices: _GEOConfigGetString
__ GeoServices: _GEOConfigGetUInteger
__ GeoServices: _GEOConfigRemoveDelegateListenerForAllKeys
__ GeoServices: _GEOConfigSetArray
__ GeoServices: _GEOConfigSetBOOL
__ GeoServices: _GEOConfigSetBytes
__ GeoServices: _GEOCoordinate2DForMapPoint
__ GeoServices: _GEOErrorDomain
__ GeoServices: _GEOErrorReasonKey
__ GeoServices: _GEOFeatureGetLocalizedLabel
__ GeoServices: _GEOFeatureGetLocalizedShield
__ GeoServices: _GEOFeatureGetNativeLabel
__ GeoServices: _GEOFindOrCreateLog
__ GeoServices: _GEOMapPointForCoordinate
__ GeoServices: _GEOMapPointsPerMeterAtLatitude
__ GeoServices: _GEOMapRectForGEOTileKey
__ GeoServices: _GEOMapRectMakeWithRadialDistance
__ GeoServices: _GEOMultiSectionFeaturePoints
__ GeoServices: _GEOPolylineCoordinateAsShortString
__ GeoServices: _GEOPolylineCoordinateAsString
__ GeoServices: _GEOPolylineCoordinateCompare
__ GeoServices: _GEOPolylineCoordinateInRange
__ GeoServices: _GEOPolylineCoordinateInvalid
__ GeoServices: _GEOPolylineCoordinateIsABeforeB
__ GeoServices: _GEOPolylineCoordinateIsABeforeOrEqualToB
__ GeoServices: _GEOPolylineCoordinateIsInvalid
__ GeoServices: _GEOPolylineCoordinateIsValid
__ GeoServices: _GEOPolylineCoordinateNearestIndex
__ GeoServices: _GEOPolylineCoordinateRangeAsString
__ GeoServices: _GEOPolylineCoordinateRangeEqual
__ GeoServices: _GEOPolylineCoordinateRangeInvalid
__ GeoServices: _GEOPolylineCoordinateRangeIsInvalid
__ GeoServices: _GEOPolylineCoordinateRangeIsValid
__ GeoServices: _GEOPolylineCoordinateWithinRange
__ GeoServices: _GEOResourcesPath
__ GeoServices: _GEOServerFormatTokenEqual
__ GeoServices: _GEOStringForError
__ GeoServices: _GEOSynchronizeDefaults
__ GeoServices: _GEOTFTrafficSnapshotReadFrom
__ GeoServices: _GEOTileKeyMake
__ GeoServices: _GEOTileLoaderClientIdentifier
__ GeoServices: _GEOTransitDepartureIsImminentDepartureTimeInterval
__ GeoServices: _GeoAnalyticsConfig_TrafficSnapshotFilename
__ GeoServices: _GeoServicesConfig_LastKnownOnRoadPosition
__ GeoServices: _GeoServicesConfig_LocalizationCapabilitiesSupportedPhoneticTypes
__ GeoServices: _GeoServicesConfig_MaxDistanceFromOriginToSuppressReroute
__ GeoServices: _GeoServicesConfig_NavdAutomaticTrafficIncidentRerouteDelay
__ GeoServices: _GeoServicesConfig_NavdShouldAutomaticallyRerouteTrafficIncidents
__ GeoServices: _GeoServicesConfig_NavigationAllowProjectingLocationPastManeuver
__ GeoServices: _GeoServicesConfig_RequestRoutingPathPoints
__ GeoServices: _GeoServicesConfig_ResourceManifestEnvironment
__ GeoServices: _GeoServicesConfig_ShouldUseServerArrivalParameters
__ GeoServices: _GeoServicesConfig_UseWaypointRouteInDirectionsResponse
__ GeoServices: _MapsFeaturesConfig_WaypointRoutesEnabled
__ GeoServices: _OBJC_CLASS_$_GEOAddress
__ GeoServices: _OBJC_CLASS_$_GEOAnalyticsPipelinePortal
__ GeoServices: _OBJC_CLASS_$_GEOApplicationAuditToken
__ GeoServices: _OBJC_CLASS_$_GEOAutomobileOptions
__ GeoServices: _OBJC_CLASS_$_GEOChargerPlug
__ GeoServices: _OBJC_CLASS_$_GEOChargerPlugsInfo
__ GeoServices: _OBJC_CLASS_$_GEOCoarseLocationMetadata
__ GeoServices: _OBJC_CLASS_$_GEOCommonOptions
__ GeoServices: _OBJC_CLASS_$_GEOCompanionRouteDetails
__ GeoServices: _OBJC_CLASS_$_GEOCompanionRouteStatus
__ GeoServices: _OBJC_CLASS_$_GEOCompanionRouteUpdate
__ GeoServices: _OBJC_CLASS_$_GEOCompanionTransitAlightMessage
__ GeoServices: _OBJC_CLASS_$_GEOComposedETARoute
__ GeoServices: _OBJC_CLASS_$_GEOComposedRoute
__ GeoServices: _OBJC_CLASS_$_GEOComposedRouteLaneInfo
__ GeoServices: _OBJC_CLASS_$_GEOComposedRouteMutableData
__ GeoServices: _OBJC_CLASS_$_GEOComposedRouteStep
__ GeoServices: _OBJC_CLASS_$_GEOComposedRouteTraffic
__ GeoServices: _OBJC_CLASS_$_GEOComposedTransitWalkingRouteStep
__ GeoServices: _OBJC_CLASS_$_GEOComposedWaypoint
__ GeoServices: _OBJC_CLASS_$_GEOCountryConfiguration
__ GeoServices: _OBJC_CLASS_$_GEOCyclingOptions
__ GeoServices: _OBJC_CLASS_$_GEOCyclingUserPreferences
__ GeoServices: _OBJC_CLASS_$_GEODestinationInfo
__ GeoServices: _OBJC_CLASS_$_GEODirectionService
__ GeoServices: _OBJC_CLASS_$_GEODirectionsError
__ GeoServices: _OBJC_CLASS_$_GEODirectionsRequest
__ GeoServices: _OBJC_CLASS_$_GEODirectionsRequestFeedback
__ GeoServices: _OBJC_CLASS_$_GEODirectionsResponse
__ GeoServices: _OBJC_CLASS_$_GEOETATrafficUpdateRequest
__ GeoServices: _OBJC_CLASS_$_GEOETATrafficUpdateRequester
__ GeoServices: _OBJC_CLASS_$_GEOETATrafficUpdateResponse
__ GeoServices: _OBJC_CLASS_$_GEOEVInfo
__ GeoServices: _OBJC_CLASS_$_GEOFormatArgument
__ GeoServices: _OBJC_CLASS_$_GEOFormattedString
__ GeoServices: _OBJC_CLASS_$_GEOImageServiceRequest
__ GeoServices: _OBJC_CLASS_$_GEOImageServiceRequester
__ GeoServices: _OBJC_CLASS_$_GEOJunction
__ GeoServices: _OBJC_CLASS_$_GEOLPRDefinedPlateType
__ GeoServices: _OBJC_CLASS_$_GEOLPRInfo
__ GeoServices: _OBJC_CLASS_$_GEOLPRLPRConvertRule
__ GeoServices: _OBJC_CLASS_$_GEOLPRLPRMapRule
__ GeoServices: _OBJC_CLASS_$_GEOLPRLicensePlateRegion
__ GeoServices: _OBJC_CLASS_$_GEOLPRLicensePlateRestrictionRules
__ GeoServices: _OBJC_CLASS_$_GEOLPRLicensePlateStructure
__ GeoServices: _OBJC_CLASS_$_GEOLPRRestrictionRegion
__ GeoServices: _OBJC_CLASS_$_GEOLPRValueMapping
__ GeoServices: _OBJC_CLASS_$_GEOLPRVehicle
__ GeoServices: _OBJC_CLASS_$_GEOLatLng
__ GeoServices: _OBJC_CLASS_$_GEOLocalizationCapabilities
__ GeoServices: _OBJC_CLASS_$_GEOLocation
__ GeoServices: _OBJC_CLASS_$_GEOLocationShifter
__ GeoServices: _OBJC_CLASS_$_GEOMapRegion
__ GeoServices: _OBJC_CLASS_$_GEOMotionContext
__ GeoServices: _OBJC_CLASS_$_GEONavRoutePreloadStrategy
__ GeoServices: _OBJC_CLASS_$_GEONavdClientInfo
__ GeoServices: _OBJC_CLASS_$_GEONavdDefaults
__ GeoServices: _OBJC_CLASS_$_GEONavdPeer
__ GeoServices: _OBJC_CLASS_$_GEONavigabilityInfo
__ GeoServices: _OBJC_CLASS_$_GEONavigationBicycleMapMatcher
__ GeoServices: _OBJC_CLASS_$_GEONavigationDrivingMapMatcher
__ GeoServices: _OBJC_CLASS_$_GEONavigationGuidanceState
__ GeoServices: _OBJC_CLASS_$_GEONavigationProxy
__ GeoServices: _OBJC_CLASS_$_GEONavigationWalkingMapMatcher
__ GeoServices: _OBJC_CLASS_$_GEONumberData
__ GeoServices: _OBJC_CLASS_$_GEOObserverHashTable
__ GeoServices: _OBJC_CLASS_$_GEOPBTransitArtwork
__ GeoServices: _OBJC_CLASS_$_GEOPathMatcher
__ GeoServices: _OBJC_CLASS_$_GEOPlatform
__ GeoServices: _OBJC_CLASS_$_GEOQuickETARequester
__ GeoServices: _OBJC_CLASS_$_GEOResourceManager
__ GeoServices: _OBJC_CLASS_$_GEOResourceManifestManager
__ GeoServices: _OBJC_CLASS_$_GEOResourceManifestUpdateAssertion
__ GeoServices: _OBJC_CLASS_$_GEOResourceRequester
__ GeoServices: _OBJC_CLASS_$_GEORoadMatch
__ GeoServices: _OBJC_CLASS_$_GEORoadMatcher
__ GeoServices: _OBJC_CLASS_$_GEORouteAttributes
__ GeoServices: _OBJC_CLASS_$_GEORouteInitializerData
__ GeoServices: _OBJC_CLASS_$_GEORouteMatch
__ GeoServices: _OBJC_CLASS_$_GEORouteMatcher
__ GeoServices: _OBJC_CLASS_$_GEORoutePreloader
__ GeoServices: _OBJC_CLASS_$_GEOSQLiteDB
__ GeoServices: _OBJC_CLASS_$_GEOStep
__ GeoServices: _OBJC_CLASS_$_GEOStructuredAddress
__ GeoServices: _OBJC_CLASS_$_GEOTFTrafficSnapshot
__ GeoServices: _OBJC_CLASS_$_GEOTileLoader
__ GeoServices: _OBJC_CLASS_$_GEOTrafficBannerText
__ GeoServices: _OBJC_CLASS_$_GEOTrafficBannerTextButton
__ GeoServices: _OBJC_CLASS_$_GEOTransitBanner
__ GeoServices: _OBJC_CLASS_$_GEOTransitOptions
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteMatcher
__ GeoServices: _OBJC_CLASS_$_GEOTransitRoutePreloadStrategy
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteUpdate
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteUpdateRequest
__ GeoServices: _OBJC_CLASS_$_GEOTransitRouteUpdater
__ GeoServices: _OBJC_CLASS_$_GEOUserSession
__ GeoServices: _OBJC_CLASS_$_GEOVectorTileDecoder
__ GeoServices: _OBJC_CLASS_$_GEOVehicleSpecifications
__ GeoServices: _OBJC_CLASS_$_GEOWalkingOptions
__ GeoServices: _OBJC_IVAR_$_GEONavdPeer._clientInfo
__ GeoServices: _OBJC_IVAR_$_GEONavdPeer._connection
__ GeoServices: _OBJC_IVAR_$_GEORouteInitializerData._directionsRequest
__ GeoServices: _OBJC_IVAR_$_GEORouteInitializerData._directionsResponse
__ GeoServices: _OBJC_IVAR_$_GEORouteInitializerData._etaTrafficUpdateResponse
__ GeoServices: _OBJC_METACLASS_$_GEONavdPeer
__ GeoServices: _OBJC_METACLASS_$_GEORouteAttributes
__ GeoServices: __GEOConfigAddDelegateListenerForKey
__ GeoServices: __GEOConfigHasValue
__ GeoServices: __GEOConfigRegisterStateCaptureFunctions
__ GeoServices: __GEOConfigRemoveValue
__ GeoServices: _descriptionForLaneInfos
__ GeoServices: _geo_dispatch_queue_create_with_qos
__ GeoServices: _geo_get_global_queue
__ GeoServices: _geo_isolate_sync
__ GeoServices: _geo_isolate_sync_data
__ GeoServices: _geo_isolater_create
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_CLASS_$_PBDataReader
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ SoftLinking: __sl_dlopen
__ VirtualGarage: _GEOEvChargingConnectorTypeFromVGConnectorType
__ VirtualGarage: _OBJC_CLASS_$_VGVehicle
__ VirtualGarage: _OBJC_CLASS_$_VGVehicleState
__ VirtualGarage: _OBJC_CLASS_$_VGVirtualGarageService
__ VoiceServices: _OBJC_CLASS_$_VSSpeechRequest
__ VoiceServices: _OBJC_CLASS_$_VSSpeechSynthesizer
__ VoiceServices: _OBJC_CLASS_$_VSSpeechSynthesizerPreference
__ VoiceServices: _OBJC_CLASS_$_VSVoiceAsset
__ libSystem.B.dylib: _XPC_ACTIVITY_ALLOW_BATTERY
__ libSystem.B.dylib: _XPC_ACTIVITY_CHECK_IN
__ libSystem.B.dylib: _XPC_ACTIVITY_DELAY
__ libSystem.B.dylib: _XPC_ACTIVITY_GRACE_PERIOD
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_UPLOAD_SIZE
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_MAINTENANCE
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_UTILITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REPEATING
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_SHOULD_WAKE_DEVICE
__ libSystem.B.dylib: _XPC_ACTIVITY_USES_DUET_POWER_BUDGETING
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___exp10
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_assert_queue_not$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dispatch_workloop_create
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _modff
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _proc_pidpath
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_issue_file
__ libSystem.B.dylib: _sandbox_extension_release
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _xpc_activity_get_state
__ libSystem.B.dylib: _xpc_activity_register
__ libSystem.B.dylib: _xpc_activity_unregister
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _protocol_copyMethodDescriptionList
__ libobjc.A.dylib: _protocol_getMethodDescription
__ libsqlite3.dylib: _sqlite3_bind_blob
__ libsqlite3.dylib: _sqlite3_bind_double
__ libsqlite3.dylib: _sqlite3_bind_int
__ libsqlite3.dylib: _sqlite3_bind_null
__ libsqlite3.dylib: _sqlite3_bind_text
__ libsqlite3.dylib: _sqlite3_clear_bindings
__ libsqlite3.dylib: _sqlite3_close
__ libsqlite3.dylib: _sqlite3_column_blob
__ libsqlite3.dylib: _sqlite3_column_bytes
__ libsqlite3.dylib: _sqlite3_column_double
__ libsqlite3.dylib: _sqlite3_column_int
__ libsqlite3.dylib: _sqlite3_column_text
__ libsqlite3.dylib: _sqlite3_column_type
__ libsqlite3.dylib: _sqlite3_data_count
__ libsqlite3.dylib: _sqlite3_db_config
__ libsqlite3.dylib: _sqlite3_errmsg
__ libsqlite3.dylib: _sqlite3_errstr
__ libsqlite3.dylib: _sqlite3_exec
__ libsqlite3.dylib: _sqlite3_expanded_sql
__ libsqlite3.dylib: _sqlite3_finalize
__ libsqlite3.dylib: _sqlite3_free
__ libsqlite3.dylib: _sqlite3_last_insert_rowid
__ libsqlite3.dylib: _sqlite3_open_v2
__ libsqlite3.dylib: _sqlite3_prepare_v2
__ libsqlite3.dylib: _sqlite3_reset
__ libsqlite3.dylib: _sqlite3_step
MNSoundEffectResourceController : NSObject <AVAudioPlayerDelegate>
 @property  AVAudioPlayer *approach
 @property  AVAudioPlayer *leftTurn
 @property  AVAudioPlayer *rightTurn
 @property  <MNSoundEffectControllerDelegate> *delegate
 @property  BOOL playing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSoundEffectResourceController .cxx_destruct]
  -[MNSoundEffectResourceController stop]
  -[MNSoundEffectResourceController setDelegate:]
  -[MNSoundEffectResourceController init]
  -[MNSoundEffectResourceController audioPlayerDidFinishPlaying:successfully:]
  -[MNSoundEffectResourceController audioPlayerDecodeErrorDidOccur:error:]
  -[MNSoundEffectResourceController delegate]
  -[MNSoundEffectResourceController playing]
  -[MNSoundEffectResourceController leftTurn]
  -[MNSoundEffectResourceController approach]
  -[MNSoundEffectResourceController _registerForObservation]
  -[MNSoundEffectResourceController _audioSessionInterruption:]
  -[MNSoundEffectResourceController _mediaSessionServicesWereLost:]
  -[MNSoundEffectResourceController _mediaSessionServicesWereReset:]
  -[MNSoundEffectResourceController _playerForFileName:andExtension:]
  -[MNSoundEffectResourceController rightTurn]
  -[MNSoundEffectResourceController playSound:andReport:]
  -[MNSoundEffectResourceController setApproach:]
  -[MNSoundEffectResourceController setLeftTurn:]
  -[MNSoundEffectResourceController setRightTurn:]


MNLocationTracker : NSObject <MNNavigationSessionObserver>
 @property  MNObserverHashTable *safeDelegate
 @property  MNNavigationSession *navigationSession
 @property  int state
 @property  GEOApplicationAuditToken *auditToken
 @property  int transportType
 @property  MNLocation *lastMatchedLocation
 @property  BOOL isRerouting
 @property  BOOL hasArrived
 @property  BOOL shouldProjectAlongRoute
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNLocationTracker _setState:]
  -[MNLocationTracker forceReroute]
  -[MNLocationTracker transportType]
  -[MNLocationTracker hasArrived]
  -[MNLocationTracker stopTracking]
  -[MNLocationTracker .cxx_destruct]
  -[MNLocationTracker paused]
  -[MNLocationTracker _auditToken]
  -[MNLocationTracker setDelegate:]
  -[MNLocationTracker init]
  -[MNLocationTracker _setAuditToken:]
  -[MNLocationTracker pause]
  -[MNLocationTracker state]
  -[MNLocationTracker updateLocation:]
  -[MNLocationTracker _defaultsDidChange]
  -[MNLocationTracker resume]
  -[MNLocationTracker dealloc]
  -[MNLocationTracker startTracking]
  -[MNLocationTracker _updateShouldLocalizeRoadNames]
  -[MNLocationTracker _matchedLocationForLocation:]
  -[MNLocationTracker _switchedToStepAtIndex:]
  -[MNLocationTracker initWithNavigationSession:]
  -[MNLocationTracker isRerouting]
  -[MNLocationTracker shouldProjectAlongRoute]
  -[MNLocationTracker updateDestination:finishedHandler:]
  -[MNLocationTracker reroute:reason:]
  -[MNLocationTracker matchedLocationForLocation:]
  -[MNLocationTracker updateVehicleSpeed:timestamp:]
  -[MNLocationTracker updateVehicleHeading:timestamp:]
  -[MNLocationTracker updateRequestForETAUpdate:]
  -[MNLocationTracker updateForETAUResponse:]
  -[MNLocationTracker shouldAllowPause]
  -[MNLocationTracker enterRegionWithId:]
  -[MNLocationTracker exitRegionWithId:]
  -[MNLocationTracker monitoringDidFailForRegionWithId:withError:]
  -[MNLocationTracker _setIsNavigatingInLowGuidance:]
  -[MNLocationTracker _updateMatchedLocation:]
  -[MNLocationTracker _roadFeaturesForFeature:outRoadName:outShieldText:outShieldType:]
  -[MNLocationTracker lastMatchedLocation]
  -[MNLocationTracker safeDelegate]
  -[MNLocationTracker navigationSession]
  -[MNLocationTracker resetForTracePlayerAtLocation:]
  -[MNLocationTracker traceForcedRerouteWithResponse:request:]
  -[MNLocationTracker traceForcedActiveTransportTypeChange:]
  -[MNLocationTracker tracePaused]
  -[MNLocationTracker traceJumpedInTime]
  -[MNLocationTracker forceOnRoute:atLocation:]


MNGuidanceSignInfo : NSObject <NSSecureCoding>
 @property  MNGuidanceSignDescription *primarySign
 @property  MNGuidanceSignDescription *secondarySign
 @property  unsigned long stepIndex
 @property  double primaryDistance_SIRI_USE_ONLY
 @property  double secondaryDistance_SIRI_USE_ONLY
 @property  double timeUntilPrimarySign_SIRI_USE_ONLY
 @property  double timeUntilSecondarySign_SIRI_USE_ONLY

  // class methods
  +[MNGuidanceSignInfo supportsSecureCoding]

  // instance methods
  -[MNGuidanceSignInfo initWithCoder:]
  -[MNGuidanceSignInfo .cxx_destruct]
  -[MNGuidanceSignInfo stepIndex]
  -[MNGuidanceSignInfo encodeWithCoder:]
  -[MNGuidanceSignInfo initWithPrimarySign:secondarySign:stepIndex:primaryDistance:secondaryDistance:timeUntilPrimarySign:timeUntilSecondarySign:]
  -[MNGuidanceSignInfo primarySign]
  -[MNGuidanceSignInfo secondarySign]
  -[MNGuidanceSignInfo primaryDistance_SIRI_USE_ONLY]
  -[MNGuidanceSignInfo secondaryDistance_SIRI_USE_ONLY]
  -[MNGuidanceSignInfo timeUntilPrimarySign_SIRI_USE_ONLY]
  -[MNGuidanceSignInfo timeUntilSecondarySign_SIRI_USE_ONLY]


MNObserverHashTable : NSObject
 @property  BOOL hasObservers
 @property  NSObject<OS_dispatch_queue> *callbackQueue

  // instance methods
  -[MNObserverHashTable methodSignatureForSelector:]
  -[MNObserverHashTable hasObservers]
  -[MNObserverHashTable .cxx_destruct]
  -[MNObserverHashTable count]
  -[MNObserverHashTable callbackQueue]
  -[MNObserverHashTable initWithProtocol:]
  -[MNObserverHashTable setCallbackQueue:]
  -[MNObserverHashTable addObserver:]
  -[MNObserverHashTable removeObserver:]
  -[MNObserverHashTable forwardInvocation:]


MNTransitInstruction : NSObject
 @property  NSArray *majorFormattedInstruction
 @property  NSArray *minorFormattedInstruction
 @property  NSArray *tertiaryFormattedInstruction
 @property  <GEOServerFormattedString> *departureBarInstruction
 @property  long long departureBarStyle
 @property  <GEOServerFormattedString> *countStopsFormattedString
 @property  <GEOServerFormattedString> *expandableListFormattedString
 @property  <GEOServerFormattedString> *primaryTimeInstruction
 @property  <GEOServerFormattedString> *secondaryTimeinstruction
 @property  BOOL hideTimeInstructionsWhenCollapsed
 @property  long long context

  // class methods
  +[MNTransitInstruction instructionForUncertainArrivalToStationStep:context:]

  // instance methods
  -[MNTransitInstruction setDepartureBarStyle:]
  -[MNTransitInstruction departureBarStyle]
  -[MNTransitInstruction .cxx_destruct]
  -[MNTransitInstruction instructionSet]
  -[MNTransitInstruction initWithContext:]
  -[MNTransitInstruction countStopsFormattedString]
  -[MNTransitInstruction expandableListFormattedString]
  -[MNTransitInstruction context]
  -[MNTransitInstruction instructionSetsForInstructionType:]
  -[MNTransitInstruction setMajorFormattedInstruction:]
  -[MNTransitInstruction setMinorFormattedInstruction:]
  -[MNTransitInstruction setTertiaryFormattedInstruction:]
  -[MNTransitInstruction setDepartureBarInstruction:]
  -[MNTransitInstruction setCountStopsFormattedString:]
  -[MNTransitInstruction setExpandableListFormattedString:]
  -[MNTransitInstruction setPrimaryTimeInstruction:]
  -[MNTransitInstruction setSecondaryTimeinstruction:]
  -[MNTransitInstruction setHideTimeInstructionsWhenCollapsed:]
  -[MNTransitInstruction overridenInstructionsMapping]
  -[MNTransitInstruction majorFormattedInstruction]
  -[MNTransitInstruction minorFormattedInstruction]
  -[MNTransitInstruction tertiaryFormattedInstruction]
  -[MNTransitInstruction primaryTimeInstruction]
  -[MNTransitInstruction secondaryTimeinstruction]
  -[MNTransitInstruction _fillInInstructions]
  -[MNTransitInstruction refreshInstructionStrings]
  -[MNTransitInstruction formattedInstructionForType:]
  -[MNTransitInstruction departureBarInstruction]
  -[MNTransitInstruction hideTimeInstructionsWhenCollapsed]


MNTransitStepInstruction : MNTransitInstruction
 @property  GEOComposedRouteStep *step
 @property  NSDictionary *overridenInstructionsMapping

  // class methods
  +[MNTransitStepInstruction instructionForStep:overrides:context:]
  +[MNTransitStepInstruction instructionForStep:context:]

  // instance methods
  -[MNTransitStepInstruction step]
  -[MNTransitStepInstruction .cxx_destruct]
  -[MNTransitStepInstruction instructionSet]
  -[MNTransitStepInstruction overridenInstructionsMapping]
  -[MNTransitStepInstruction initWithStep:overrides:context:]


MNTransitWalkingSegmentInstruction : MNTransitInstruction
 @property  GEOComposedWalkingRouteSegment *walkingSegment

  // class methods
  +[MNTransitWalkingSegmentInstruction instructionForWalkingSegment:context:]

  // instance methods
  -[MNTransitWalkingSegmentInstruction .cxx_destruct]
  -[MNTransitWalkingSegmentInstruction instructionSet]
  -[MNTransitWalkingSegmentInstruction overridenInstructionsMapping]
  -[MNTransitWalkingSegmentInstruction initWithWalkingSegment:context:]
  -[MNTransitWalkingSegmentInstruction walkingSegment]


MNEVChargingStateMonitor : NSObject <VGVirtualGarageObserver>
 @property  NSMeasurement *targetBatteryCharge
 @property  <MNEVChargingStateMonitorDelegate> *delegate

  // instance methods
  -[MNEVChargingStateMonitor _startTimer]
  -[MNEVChargingStateMonitor updateForLocation:]
  -[MNEVChargingStateMonitor .cxx_destruct]
  -[MNEVChargingStateMonitor setDelegate:]
  -[MNEVChargingStateMonitor delegate]
  -[MNEVChargingStateMonitor dealloc]
  -[MNEVChargingStateMonitor virtualGarageDidUpdate:]
  -[MNEVChargingStateMonitor _consumeUpdatedVirtualGarage:forceDelegateCallback:]
  -[MNEVChargingStateMonitor _notifyShouldShowChargingInfo]
  -[MNEVChargingStateMonitor initWithTargetBatteryCharge:]
  -[MNEVChargingStateMonitor updateForArrival]
  -[MNEVChargingStateMonitor targetBatteryCharge]


MNTracePlayerETAUpdater : MNSessionUpdateManager
  // instance methods
  -[MNTracePlayerETAUpdater .cxx_destruct]
  -[MNTracePlayerETAUpdater dealloc]
  -[MNTracePlayerETAUpdater _handleDelayTimerWithUpdateRow:]
  -[MNTracePlayerETAUpdater playETAUpdate:]
  -[MNTracePlayerETAUpdater startUpdateRequestsForRoutes:andNavigationType:]
  -[MNTracePlayerETAUpdater resumeUpdateRequests]


MNAnnouncementConflict : NSObject
 @property  MNAnnouncementPlanEvent *firstEvent
 @property  MNAnnouncementPlanEvent *secondEvent
 @property  double timeGap
 @property  double desiredTimeGap
 @property  BOOL announcementsAreSimilar

  // instance methods
  -[MNAnnouncementConflict .cxx_destruct]
  -[MNAnnouncementConflict timeGap]
  -[MNAnnouncementConflict announcementsAreSimilar]
  -[MNAnnouncementConflict desiredTimeGap]
  -[MNAnnouncementConflict firstEvent]
  -[MNAnnouncementConflict secondEvent]
  -[MNAnnouncementConflict setFirstEvent:]
  -[MNAnnouncementConflict setSecondEvent:]
  -[MNAnnouncementConflict setTimeGap:]
  -[MNAnnouncementConflict setDesiredTimeGap:]
  -[MNAnnouncementConflict setAnnouncementsAreSimilar:]


MNAnnouncementPlan : NSObject
 @property  NSArray *events
 @property  NSMutableArray *plannedEvents
 @property  double distance
 @property  double speed

  // class methods
  +[MNAnnouncementPlan desiredTimeGapBetweenEvent:andEvent:]

  // instance methods
  -[MNAnnouncementPlan speed]
  -[MNAnnouncementPlan events]
  -[MNAnnouncementPlan setSpeed:]
  -[MNAnnouncementPlan .cxx_destruct]
  -[MNAnnouncementPlan setDistance:]
  -[MNAnnouncementPlan setEvents:]
  -[MNAnnouncementPlan distance]
  -[MNAnnouncementPlan sortEvents]
  -[MNAnnouncementPlan plannedEvents]
  -[MNAnnouncementPlan initWithEvents:distance:speed:durations:]
  -[MNAnnouncementPlan nextConflict]
  -[MNAnnouncementPlan setPlannedEvents:]


MNAudioSystemEvent : NSObject
 @property  NSString *utterance
 @property  unsigned long shortPrompt
 @property  unsigned long guidanceLevel
 @property  BOOL isPrivate
 @property  BOOL hasSoundEffect
 @property  @? handler

  // instance methods
  -[MNAudioSystemEvent isPrivate]
  -[MNAudioSystemEvent .cxx_destruct]
  -[MNAudioSystemEvent shortPrompt]
  -[MNAudioSystemEvent isEqualToEvent:]
  -[MNAudioSystemEvent guidanceLevel]
  -[MNAudioSystemEvent utterance]
  -[MNAudioSystemEvent handler]
  -[MNAudioSystemEvent initWithUtterance:andShortPrompt:andVoiceGuidanceLevel:andCompletion:]
  -[MNAudioSystemEvent hasSoundEffect]


MNAnnouncementEngine : NSObject
 @property  MNAnnouncementPlan *plan

  // instance methods
  -[MNAnnouncementEngine plan]
  -[MNAnnouncementEngine .cxx_destruct]
  -[MNAnnouncementEngine setPlan:]
  -[MNAnnouncementEngine nextEvent]
  -[MNAnnouncementEngine _canDelayEvent:]
  -[MNAnnouncementEngine _advanceToResolveConflict:]
  -[MNAnnouncementEngine _delayToResolveConflict:]
  -[MNAnnouncementEngine _compressToResolveConflict:]
  -[MNAnnouncementEngine _dropToResolveConflict:]
  -[MNAnnouncementEngine _canAdvanceEvent:]
  -[MNAnnouncementEngine planForEvents:distance:speed:previousEvent:timeSinceLastEvent:durations:]


MNNotificationManager : NSObject
  // instance methods
  -[MNNotificationManager showPredictedRouteTrafficIncidentBulletinForCommuteDetails:]


MNNavigationServer : NSObject <NSXPCListenerDelegate, MNNavigationServiceClientInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNavigationServer sharedServer]

  // instance methods
  -[MNNavigationServer navigationServiceProxyDidArrive:]
  -[MNNavigationServer navigationServiceProxy:didUpdateETAResponseForRoute:]
  -[MNNavigationServer navigationServiceProxy:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationServer navigationServiceProxyDidEnterPreArrivalState:]
  -[MNNavigationServer navigationServiceProxy:didUpdateDistanceUntilSign:timeUntilSign:forStepIndex:]
  -[MNNavigationServer navigationServiceProxy:updatedGuidanceEventFeedback:]
  -[MNNavigationServer navigationServiceProxy:didUpdateRouteWithNewRideSelection:]
  -[MNNavigationServer navigationServiceProxy:didReceiveTransitAlert:]
  -[MNNavigationServer navigationServiceProxy:didUpdateProceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationServer navigationServiceProxy:didStartSpeakingPrompt:]
  -[MNNavigationServer .cxx_destruct]
  -[MNNavigationServer navigationServiceProxy:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationServer navigationServiceProxy:didRerouteWithRoute:withLocation:withAlternateRoutes:]
  -[MNNavigationServer navigationServiceProxyEndGuidanceUpdate:]
  -[MNNavigationServer navigationServiceProxy:didUpdateMotionType:confidence:]
  -[MNNavigationServer navigationServiceProxy:updateSignsWithARInfo:]
  -[MNNavigationServer _resetDetails]
  -[MNNavigationServer navigationServiceProxy:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationServer navigationServiceProxy:updateSignsWithInfo:]
  -[MNNavigationServer navigationServiceProxy:usePersistentDisplay:]
  -[MNNavigationServer navigationServiceProxyHideSecondaryStep:]
  -[MNNavigationServer navigationServiceProxy:didReceiveRouteSignalStrength:]
  -[MNNavigationServer navigationServiceProxy:didFailWithError:]
  -[MNNavigationServer navigationServiceProxy:didProcessSpeechEvent:]
  -[MNNavigationServer navigationServiceProxy:didEnterPreArrivalStateForWaypoint:endOfLegIndex:]
  -[MNNavigationServer init]
  -[MNNavigationServer navigationServiceProxy:willAnnounce:inSeconds:]
  -[MNNavigationServer navigationServiceProxy:willChangeFromState:toState:]
  -[MNNavigationServer navigationServiceProxy:didReceiveTrafficIncidentAlert:]
  -[MNNavigationServer _enumerateRemoteObjectsWithHandler:]
  -[MNNavigationServer navigationServiceProxy:didUpdateDistanceUntilManeuver:timeUntilManeuver:forStepIndex:]
  -[MNNavigationServer navigationServiceProxy:didUpdateTracePlaybackDetails:]
  -[MNNavigationServer navigationServiceProxy:didArriveAtWaypoint:endOfLegIndex:]
  -[MNNavigationServer navigationServiceProxy:didChangeFromState:toState:]
  -[MNNavigationServer navigationServiceProxyDidCancelReroute:]
  -[MNNavigationServer navigationServiceProxyWillReroute:]
  -[MNNavigationServer navigationServiceProxy:willStartNavigationWithRoute:navigationType:request:response:]
  -[MNNavigationServer navigationServiceProxy:didUpdateStepIndex:segmentIndex:]
  -[MNNavigationServer navigationServiceProxy:didUpdatePreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationServer navigationServiceProxy:didFailRerouteWithError:]
  -[MNNavigationServer navigationServiceProxy:didUpdateHeading:accuracy:]
  -[MNNavigationServer navigationServiceProxy:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationServer navigationServiceProxy:triggerHaptics:]
  -[MNNavigationServer navigationServiceProxy:hideLaneDirectionsForId:]
  -[MNNavigationServer navigationServiceProxy:showJunctionView:]
  -[MNNavigationServer navigationServiceProxy:showLaneDirections:]
  -[MNNavigationServer navigationServiceProxy:didUpdateNavigationDetails:]
  -[MNNavigationServer navigationServiceProxy:didResumeNavigatingFromWaypoint:endOfLegIndex:]
  -[MNNavigationServer navigationServiceProxy:didUpdateDisplayedStepIndex:segmentIndex:]
  -[MNNavigationServer navigationServiceProxy:didUpdateMatchedLocation:]
  -[MNNavigationServer _defaultsDidChange]
  -[MNNavigationServer navigationServiceProxy:didChangeNavigationState:]
  -[MNNavigationServer navigationServiceProxyBeginGuidanceUpdate:]
  -[MNNavigationServer navigationServiceProxy:didReceiveRealtimeUpdates:]
  -[MNNavigationServer navigationServiceProxy:didUpdateTrafficIncidentAlert:]
  -[MNNavigationServer navigationServiceProxy:didEnableGuidancePrompts:]
  -[MNNavigationServer dealloc]
  -[MNNavigationServer navigationServiceProxy:willRequestRealtimeUpdatesForRouteIDs:]
  -[MNNavigationServer navigationServiceProxy:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationServer navigationServiceProxy:didChangeVoiceGuidanceLevel:]
  -[MNNavigationServer navigationServiceProxy:didActivateAudioSession:]
  -[MNNavigationServer listener:shouldAcceptNewConnection:]
  -[MNNavigationServer navigationServiceProxy:newGuidanceEventFeedback:]
  -[MNNavigationServer navigationServiceProxyWillPauseNavigation:]
  -[MNNavigationServer navigationServiceProxy:didUpdateDisplayETA:remainingDistance:]
  -[MNNavigationServer navigationServiceProxy:didEndWithReason:]
  -[MNNavigationServer navigationServiceProxy:didUpdateAlternateRoutes:]
  -[MNNavigationServer navigationServiceProxyWillResumeFromPauseNavigation:]
  -[MNNavigationServer navigationServiceProxy:hideJunctionViewForId:]
  -[MNNavigationServer navigationServiceProxy:didStartUsingVoiceLanguage:]
  -[MNNavigationServer navigationServiceProxy:willProcessSpeechEvent:]
  -[MNNavigationServer _peerDidDisconnect:]


MNCyclingTurnByTurnLocationTracker : MNTurnByTurnLocationTracker <MNTunnelLocationProjectorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCyclingTurnByTurnLocationTracker transportType]
  -[MNCyclingTurnByTurnLocationTracker stopTracking]
  -[MNCyclingTurnByTurnLocationTracker .cxx_destruct]
  -[MNCyclingTurnByTurnLocationTracker startTracking]
  -[MNCyclingTurnByTurnLocationTracker _matchedLocationForLocation:]
  -[MNCyclingTurnByTurnLocationTracker initWithNavigationSession:]
  -[MNCyclingTurnByTurnLocationTracker shouldProjectAlongRoute]
  -[MNCyclingTurnByTurnLocationTracker updateRequestForETAUpdate:]
  -[MNCyclingTurnByTurnLocationTracker updateForETAUResponse:]
  -[MNCyclingTurnByTurnLocationTracker userLocationForUpdateManager:]
  -[MNCyclingTurnByTurnLocationTracker _updateForArrivalAtLegIndex:]
  -[MNCyclingTurnByTurnLocationTracker _updateForAlternateRoutes:]
  -[MNCyclingTurnByTurnLocationTracker tunnelLocationProjector:didUpdateLocation:]
  -[MNCyclingTurnByTurnLocationTracker _newMapMatcherForRoute:]
  -[MNCyclingTurnByTurnLocationTracker _overrideLocationForLocation:]
  -[MNCyclingTurnByTurnLocationTracker _updateForLocation:]
  -[MNCyclingTurnByTurnLocationTracker _updateForReroute:rerouteReason:request:response:]
  -[MNCyclingTurnByTurnLocationTracker _detectedMotionForLocation:]
  -[MNCyclingTurnByTurnLocationTracker _allowSwitchToTransportType:forLocation:]
  -[MNCyclingTurnByTurnLocationTracker _alternateRouteForOffRouteLocation:]


MNRouteRefreshPolicyFactory : NSObject
  // class methods
  +[MNRouteRefreshPolicyFactory policyRulesForPolicy:error:]


MNDrivingTurnByTurnLocationTracker : MNTurnByTurnLocationTracker <MNTrafficIncidentAlertUpdaterDelegate, MNTunnelLocationProjectorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNDrivingTurnByTurnLocationTracker transportType]
  -[MNDrivingTurnByTurnLocationTracker stopTracking]
  -[MNDrivingTurnByTurnLocationTracker .cxx_destruct]
  -[MNDrivingTurnByTurnLocationTracker startTracking]
  -[MNDrivingTurnByTurnLocationTracker _matchedLocationForLocation:]
  -[MNDrivingTurnByTurnLocationTracker initWithNavigationSession:]
  -[MNDrivingTurnByTurnLocationTracker shouldProjectAlongRoute]
  -[MNDrivingTurnByTurnLocationTracker updateRequestForETAUpdate:]
  -[MNDrivingTurnByTurnLocationTracker updateForETAUResponse:]
  -[MNDrivingTurnByTurnLocationTracker tracePaused]
  -[MNDrivingTurnByTurnLocationTracker _updateForArrivalAtLegIndex:]
  -[MNDrivingTurnByTurnLocationTracker _updateForAlternateRoutes:]
  -[MNDrivingTurnByTurnLocationTracker tunnelLocationProjector:didUpdateLocation:]
  -[MNDrivingTurnByTurnLocationTracker _newMapMatcherForRoute:]
  -[MNDrivingTurnByTurnLocationTracker _overrideLocationForLocation:]
  -[MNDrivingTurnByTurnLocationTracker _updateForLocation:]
  -[MNDrivingTurnByTurnLocationTracker _updateForReroute:rerouteReason:request:response:]
  -[MNDrivingTurnByTurnLocationTracker _detectedMotionForLocation:]
  -[MNDrivingTurnByTurnLocationTracker _allowSwitchToTransportType:forLocation:]
  -[MNDrivingTurnByTurnLocationTracker _alternateRouteForOffRouteLocation:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:receivedAlert:responseCallback:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:invalidatedAlert:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:didDismissAlert:withReroute:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:updatedAlert:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdater:didSwitchToNewRoute:forAlert:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdaterTimeSinceLastAnnouncement:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdaterTimeUntilNextAnnouncement:]
  -[MNDrivingTurnByTurnLocationTracker trafficIncidentAlertUpdaterIsCurrentlySpeaking:]


MNGuidanceJunctionViewImage : NSObject <NSSecureCoding>
 @property  unsigned long imageID
 @property  NSData *imageData

  // class methods
  +[MNGuidanceJunctionViewImage supportsSecureCoding]

  // instance methods
  -[MNGuidanceJunctionViewImage initWithCoder:]
  -[MNGuidanceJunctionViewImage setImageData:]
  -[MNGuidanceJunctionViewImage .cxx_destruct]
  -[MNGuidanceJunctionViewImage imageData]
  -[MNGuidanceJunctionViewImage imageID]
  -[MNGuidanceJunctionViewImage encodeWithCoder:]
  -[MNGuidanceJunctionViewImage setImageID:]


MNGuidanceJunctionViewInfo : NSObject <NSSecureCoding>
 @property  NSUUID *uniqueID
 @property  NSArray *images

  // class methods
  +[MNGuidanceJunctionViewInfo supportsSecureCoding]

  // instance methods
  -[MNGuidanceJunctionViewInfo initWithCoder:]
  -[MNGuidanceJunctionViewInfo uniqueID]
  -[MNGuidanceJunctionViewInfo .cxx_destruct]
  -[MNGuidanceJunctionViewInfo images]
  -[MNGuidanceJunctionViewInfo encodeWithCoder:]
  -[MNGuidanceJunctionViewInfo initWithID:images:]


MNGuidanceEventFeedback : PBCodable <NSCopying>
 @property  NSUUID *uniqueID
 @property  BOOL hasUniqueIDstring
 @property  NSString *uniqueIDstring
 @property  BOOL hasRouteID
 @property  NSData *routeID
 @property  BOOL hasStepID
 @property  unsigned int stepID
 @property  BOOL hasEnrouteNoticeIndex
 @property  unsigned int enrouteNoticeIndex
 @property  BOOL hasEventIndex
 @property  unsigned int eventIndex
 @property  BOOL hasType
 @property  int type
 @property  BOOL hasStartTime
 @property  double startTime
 @property  BOOL hasStartDistance
 @property  double startDistance
 @property  BOOL hasVehicleSpeed
 @property  double vehicleSpeed
 @property  BOOL hasTrafficColor
 @property  unsigned int trafficColor
 @property  BOOL hasSelectedPrimaryStringIndex
 @property  unsigned int selectedPrimaryStringIndex
 @property  BOOL hasSelectedSecondaryStringIndex
 @property  unsigned int selectedSecondaryStringIndex
 @property  BOOL hasShortPrompt
 @property  BOOL shortPrompt
 @property  BOOL hasEndTime
 @property  double endTime
 @property  BOOL hasEndDistance
 @property  double endDistance
 @property  BOOL hasManeuverTime
 @property  double maneuverTime
 @property  NSMutableArray *junctionViewImageIDs
 @property  BOOL hasEnrouteNoticeIdentifier
 @property  NSString *enrouteNoticeIdentifier
 @property  BOOL hasTrafficCameraType
 @property  unsigned int trafficCameraType
 @property  BOOL hasEventDescription
 @property  NSString *eventDescription

  // class methods
  +[MNGuidanceEventFeedback junctionViewImageIDType]

  // instance methods
  -[MNGuidanceEventFeedback hasStartTime]
  -[MNGuidanceEventFeedback setHasStartTime:]
  -[MNGuidanceEventFeedback mergeFrom:]
  -[MNGuidanceEventFeedback enrouteNoticeIndex]
  -[MNGuidanceEventFeedback setHasEnrouteNoticeIndex:]
  -[MNGuidanceEventFeedback hasEnrouteNoticeIndex]
  -[MNGuidanceEventFeedback uniqueID]
  -[MNGuidanceEventFeedback endTime]
  -[MNGuidanceEventFeedback stepID]
  -[MNGuidanceEventFeedback setStartTime:]
  -[MNGuidanceEventFeedback setType:]
  -[MNGuidanceEventFeedback setEndTime:]
  -[MNGuidanceEventFeedback setEventIndex:]
  -[MNGuidanceEventFeedback hasEventIndex]
  -[MNGuidanceEventFeedback .cxx_destruct]
  -[MNGuidanceEventFeedback setHasEventIndex:]
  -[MNGuidanceEventFeedback vehicleSpeed]
  -[MNGuidanceEventFeedback setHasVehicleSpeed:]
  -[MNGuidanceEventFeedback hasVehicleSpeed]
  -[MNGuidanceEventFeedback shortPrompt]
  -[MNGuidanceEventFeedback setShortPrompt:]
  -[MNGuidanceEventFeedback setHasShortPrompt:]
  -[MNGuidanceEventFeedback hasShortPrompt]
  -[MNGuidanceEventFeedback dictionaryRepresentation]
  -[MNGuidanceEventFeedback writeTo:]
  -[MNGuidanceEventFeedback setHasEndTime:]
  -[MNGuidanceEventFeedback setHasType:]
  -[MNGuidanceEventFeedback hasStepID]
  -[MNGuidanceEventFeedback setStartDistance:]
  -[MNGuidanceEventFeedback hasType]
  -[MNGuidanceEventFeedback routeID]
  -[MNGuidanceEventFeedback setHasStepID:]
  -[MNGuidanceEventFeedback isEqual:]
  -[MNGuidanceEventFeedback copyTo:]
  -[MNGuidanceEventFeedback startDistance]
  -[MNGuidanceEventFeedback typeAsString:]
  -[MNGuidanceEventFeedback readFrom:]
  -[MNGuidanceEventFeedback trafficCameraType]
  -[MNGuidanceEventFeedback StringAsType:]
  -[MNGuidanceEventFeedback startTime]
  -[MNGuidanceEventFeedback type]
  -[MNGuidanceEventFeedback setEnrouteNoticeIndex:]
  -[MNGuidanceEventFeedback setStepID:]
  -[MNGuidanceEventFeedback setTrafficColor:]
  -[MNGuidanceEventFeedback hasRouteID]
  -[MNGuidanceEventFeedback hasEndTime]
  -[MNGuidanceEventFeedback eventIndex]
  -[MNGuidanceEventFeedback copyWithZone:]
  -[MNGuidanceEventFeedback initWithEvent:]
  -[MNGuidanceEventFeedback setRouteID:]
  -[MNGuidanceEventFeedback setVehicleSpeed:]
  -[MNGuidanceEventFeedback eventDescription]
  -[MNGuidanceEventFeedback addJunctionViewImageID:]
  -[MNGuidanceEventFeedback setUniqueIDstring:]
  -[MNGuidanceEventFeedback junctionViewImageIDsCount]
  -[MNGuidanceEventFeedback clearJunctionViewImageIDs]
  -[MNGuidanceEventFeedback junctionViewImageIDAtIndex:]
  -[MNGuidanceEventFeedback setEnrouteNoticeIdentifier:]
  -[MNGuidanceEventFeedback setEventDescription:]
  -[MNGuidanceEventFeedback hasUniqueIDstring]
  -[MNGuidanceEventFeedback setHasStartDistance:]
  -[MNGuidanceEventFeedback hasStartDistance]
  -[MNGuidanceEventFeedback setHasTrafficColor:]
  -[MNGuidanceEventFeedback hasTrafficColor]
  -[MNGuidanceEventFeedback setSelectedPrimaryStringIndex:]
  -[MNGuidanceEventFeedback setHasSelectedPrimaryStringIndex:]
  -[MNGuidanceEventFeedback hasSelectedPrimaryStringIndex]
  -[MNGuidanceEventFeedback setSelectedSecondaryStringIndex:]
  -[MNGuidanceEventFeedback setHasSelectedSecondaryStringIndex:]
  -[MNGuidanceEventFeedback hasSelectedSecondaryStringIndex]
  -[MNGuidanceEventFeedback setEndDistance:]
  -[MNGuidanceEventFeedback setHasEndDistance:]
  -[MNGuidanceEventFeedback hasEndDistance]
  -[MNGuidanceEventFeedback setManeuverTime:]
  -[MNGuidanceEventFeedback setHasManeuverTime:]
  -[MNGuidanceEventFeedback hasManeuverTime]
  -[MNGuidanceEventFeedback hasEnrouteNoticeIdentifier]
  -[MNGuidanceEventFeedback setTrafficCameraType:]
  -[MNGuidanceEventFeedback setHasTrafficCameraType:]
  -[MNGuidanceEventFeedback hasTrafficCameraType]
  -[MNGuidanceEventFeedback hasEventDescription]
  -[MNGuidanceEventFeedback uniqueIDstring]
  -[MNGuidanceEventFeedback trafficColor]
  -[MNGuidanceEventFeedback selectedPrimaryStringIndex]
  -[MNGuidanceEventFeedback selectedSecondaryStringIndex]
  -[MNGuidanceEventFeedback endDistance]
  -[MNGuidanceEventFeedback maneuverTime]
  -[MNGuidanceEventFeedback junctionViewImageIDs]
  -[MNGuidanceEventFeedback setJunctionViewImageIDs:]
  -[MNGuidanceEventFeedback enrouteNoticeIdentifier]


_MNDistanceFormatOptions : NSObject
 @property  unsigned long minimumFractionDigits
 @property  unsigned long maximumFractionDigits
 @property  BOOL metric
 @property  BOOL yards
 @property  BOOL abbreviateUnits
 @property  BOOL spoken
 @property  long long rounding
 @property  NSUnitLength *unitLength
 @property  NSLocale *locale

  // instance methods
  -[_MNDistanceFormatOptions yards]
  -[_MNDistanceFormatOptions setLocale:]
  -[_MNDistanceFormatOptions minimumFractionDigits]
  -[_MNDistanceFormatOptions .cxx_destruct]
  -[_MNDistanceFormatOptions spoken]
  -[_MNDistanceFormatOptions isEqual:]
  -[_MNDistanceFormatOptions locale]
  -[_MNDistanceFormatOptions maximumFractionDigits]
  -[_MNDistanceFormatOptions setMetric:]
  -[_MNDistanceFormatOptions setMinimumFractionDigits:]
  -[_MNDistanceFormatOptions metric]
  -[_MNDistanceFormatOptions rounding]
  -[_MNDistanceFormatOptions setMaximumFractionDigits:]
  -[_MNDistanceFormatOptions abbreviateUnits]
  -[_MNDistanceFormatOptions unitLength]
  -[_MNDistanceFormatOptions setYards:]
  -[_MNDistanceFormatOptions setAbbreviateUnits:]
  -[_MNDistanceFormatOptions setSpoken:]
  -[_MNDistanceFormatOptions setRounding:]
  -[_MNDistanceFormatOptions setUnitLength:]


_TempTokenTimestampValue : NSObject <GEOServerFormatTokenTimeStampValue>
 @property  double timeStamp
 @property  NSTimeZone *timeZone
 @property  NSString *formatPattern
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_TempTokenTimestampValue setTimeZone:]
  -[_TempTokenTimestampValue timeZone]
  -[_TempTokenTimestampValue initWithCoder:]
  -[_TempTokenTimestampValue .cxx_destruct]
  -[_TempTokenTimestampValue timeStamp]
  -[_TempTokenTimestampValue setFormatPattern:]
  -[_TempTokenTimestampValue setTimeStamp:]
  -[_TempTokenTimestampValue formatPattern]
  -[_TempTokenTimestampValue encodeWithCoder:]


_TempToken : NSObject <GEOServerFormatToken>
 @property  long long type
 @property  NSString *token
 @property  unsigned int value1
 @property  unsigned int value2
 @property  NSArray *value3s
 @property  NSString *stringValue
 @property  float percentageValue
 @property  BOOL shouldScaleUnits
 @property  NSString *accessibilityLabel
 @property  <GEOServerFormatTokenPriceValue> *priceValue
 @property  <GEOTransitArtworkDataSource> *artworkValue
 @property  NSArray *timeStampValues
 @property  <GEOServerFormatTokenCountdownValue> *countdownValue
 @property  <GEOServerFormatTokenUrlValue> *urlValue
 @property  <GEOServerFormatTokenManeuverValue> *maneuverValue
 @property  <GEOServerFormatTokenNumberData> *numberData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_TempToken stringValue]
  -[_TempToken setToken:]
  -[_TempToken urlValue]
  -[_TempToken setNumberData:]
  -[_TempToken initWithCoder:]
  -[_TempToken setStringValue:]
  -[_TempToken value1]
  -[_TempToken value2]
  -[_TempToken setType:]
  -[_TempToken setUrlValue:]
  -[_TempToken .cxx_destruct]
  -[_TempToken accessibilityLabel]
  -[_TempToken value3s]
  -[_TempToken initWithToken:]
  -[_TempToken token]
  -[_TempToken percentageValue]
  -[_TempToken countdownValue]
  -[_TempToken shouldScaleUnits]
  -[_TempToken type]
  -[_TempToken priceValue]
  -[_TempToken artworkValue]
  -[_TempToken timeStampValues]
  -[_TempToken maneuverValue]
  -[_TempToken numberData]
  -[_TempToken setValue2:]
  -[_TempToken encodeWithCoder:]
  -[_TempToken setCountdownValue:]
  -[_TempToken setValue1:]
  -[_TempToken setValue3s:]
  -[_TempToken setPercentageValue:]
  -[_TempToken setPriceValue:]
  -[_TempToken setArtworkValue:]
  -[_TempToken setTimeStampValues:]
  -[_TempToken setManeuverValue:]


_TimeStampValue : NSObject <GEOServerFormatTokenTimeStampValue>
 @property  double timeStamp
 @property  NSTimeZone *timeZone
 @property  NSString *formatPattern
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_TimeStampValue timeZone]
  -[_TimeStampValue initWithCoder:]
  -[_TimeStampValue .cxx_destruct]
  -[_TimeStampValue timeStamp]
  -[_TimeStampValue formatPattern]
  -[_TimeStampValue encodeWithCoder:]
  -[_TimeStampValue initWithTimeStamp:timeZone:formatPattern:]


MNTimeballMockLocationProvider : NSObject <MNTimeballLocationProvider>
 @property  double desiredAccuracy
 @property  CLLocation *location
 @property  <CLLocationManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTimeballMockLocationProvider initWithDelegate:queue:]
  -[MNTimeballMockLocationProvider startUpdatingLocation]
  -[MNTimeballMockLocationProvider desiredAccuracy]
  -[MNTimeballMockLocationProvider setDesiredAccuracy:]
  -[MNTimeballMockLocationProvider stopUpdatingLocation]
  -[MNTimeballMockLocationProvider initWithEffectiveBundleIdentifier:delegate:onQueue:]
  -[MNTimeballMockLocationProvider .cxx_destruct]
  -[MNTimeballMockLocationProvider setDelegate:]
  -[MNTimeballMockLocationProvider location]
  -[MNTimeballMockLocationProvider delegate]
  -[MNTimeballMockLocationProvider initWithEffectiveBundle:delegate:onQueue:]
  -[MNTimeballMockLocationProvider _setupTimer]
  -[MNTimeballMockLocationProvider _processNextObject]
  -[MNTimeballMockLocationProvider _deliverNextObject]
  -[MNTimeballMockLocationProvider deliverLocation:afterDelay:]
  -[MNTimeballMockLocationProvider deliverError:afterDelay:]
  -[MNTimeballMockLocationProvider clearLocationsAndErrors]


MNArrivalRegionTimer : NSObject
 @property  <MNArrivalRegionTimerDelegate> *delegate

  // instance methods
  -[MNArrivalRegionTimer updateForLocation:]
  -[MNArrivalRegionTimer .cxx_destruct]
  -[MNArrivalRegionTimer setDelegate:]
  -[MNArrivalRegionTimer init]
  -[MNArrivalRegionTimer delegate]
  -[MNArrivalRegionTimer dealloc]
  -[MNArrivalRegionTimer initWithArrivalRegion:]


MNStartNavigationDetails : NSObject <NSCopying, NSSecureCoding>
 @property  int navigationType
 @property  unsigned long guidanceType
 @property  GEORouteAttributes *routeAttributes
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  NSArray *routes
 @property  NSDictionary *traffic
 @property  unsigned long selectedRouteIndex
 @property  MNLocation *initialUserLocation
 @property  NSString *requestingAppIdentifier
 @property  BOOL isReconnecting
 @property  NSArray *spokenAnnouncements
 @property  NSString *tracePlaybackPath
 @property  MNTraceRecordingData *traceRecordingData
 @property  long long simulationType
 @property  NSString *traceRecordingNameOverride
 @property  NSString *fullDescription

  // class methods
  +[MNStartNavigationDetails supportsSecureCoding]

  // instance methods
  -[MNStartNavigationDetails fullDescription]
  -[MNStartNavigationDetails setGuidanceType:]
  -[MNStartNavigationDetails setRouteAttributes:]
  -[MNStartNavigationDetails routes]
  -[MNStartNavigationDetails initWithCoder:]
  -[MNStartNavigationDetails .cxx_destruct]
  -[MNStartNavigationDetails traffic]
  -[MNStartNavigationDetails setDirectionsResponse:]
  -[MNStartNavigationDetails init]
  -[MNStartNavigationDetails requestingAppIdentifier]
  -[MNStartNavigationDetails setRequestingAppIdentifier:]
  -[MNStartNavigationDetails setRoutes:]
  -[MNStartNavigationDetails directionsRequest]
  -[MNStartNavigationDetails setSelectedRouteIndex:]
  -[MNStartNavigationDetails setNavigationType:]
  -[MNStartNavigationDetails selectedRouteIndex]
  -[MNStartNavigationDetails navigationType]
  -[MNStartNavigationDetails routeAttributes]
  -[MNStartNavigationDetails spokenAnnouncements]
  -[MNStartNavigationDetails setDirectionsRequest:]
  -[MNStartNavigationDetails copyWithZone:]
  -[MNStartNavigationDetails directionsResponse]
  -[MNStartNavigationDetails setTraffic:]
  -[MNStartNavigationDetails encodeWithCoder:]
  -[MNStartNavigationDetails guidanceType]
  -[MNStartNavigationDetails isReconnecting]
  -[MNStartNavigationDetails setTracePlaybackPath:]
  -[MNStartNavigationDetails setTraceRecordingData:]
  -[MNStartNavigationDetails setSimulationType:]
  -[MNStartNavigationDetails setTraceRecordingNameOverride:]
  -[MNStartNavigationDetails initialUserLocation]
  -[MNStartNavigationDetails setInitialUserLocation:]
  -[MNStartNavigationDetails setIsReconnecting:]
  -[MNStartNavigationDetails setSpokenAnnouncements:]
  -[MNStartNavigationDetails tracePlaybackPath]
  -[MNStartNavigationDetails traceRecordingData]
  -[MNStartNavigationDetails simulationType]
  -[MNStartNavigationDetails traceRecordingNameOverride]


MNNavigationServiceLocalProxy : NSObject <MNNavigationStateObserver, MNNavigationSessionManagerDelegate, MNNavigationServiceProxy>
 @property  <MNNavigationServiceClientInterface> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationServiceLocalProxy repeatCurrentGuidanceWithReply:]
  -[MNNavigationServiceLocalProxy setTracePosition:]
  -[MNNavigationServiceLocalProxy startNavigationWithDetails:activeBlock:]
  -[MNNavigationServiceLocalProxy stopCurrentGuidancePrompt]
  -[MNNavigationServiceLocalProxy stopNavigationWithReason:]
  -[MNNavigationServiceLocalProxy resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceLocalProxy vibrateForPrompt:withReply:]
  -[MNNavigationServiceLocalProxy setTracePlaybackSpeed:]
  -[MNNavigationServiceLocalProxy recordPedestrianTracePath:]
  -[MNNavigationServiceLocalProxy enableNavigationCapability:]
  -[MNNavigationServiceLocalProxy setGuidancePromptsEnabled:]
  -[MNNavigationServiceLocalProxy setTraceIsPlaying:]
  -[MNNavigationServiceLocalProxy interfaceHashesWithHandler:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerDidEnterPreArrivalState:]
  -[MNNavigationServiceLocalProxy updateDestination:]
  -[MNNavigationServiceLocalProxy acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy changeUserOptions:]
  -[MNNavigationServiceLocalProxy setDisplayedStepIndex:]
  -[MNNavigationServiceLocalProxy setJunctionViewImageWidth:height:]
  -[MNNavigationServiceLocalProxy pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceLocalProxy setRideIndex:forSegmentIndex:]
  -[MNNavigationServiceLocalProxy repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationServiceLocalProxy recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationServiceLocalProxy setIsConnectedToCarplay:]
  -[MNNavigationServiceLocalProxy setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationServiceLocalProxy forceReroute]
  -[MNNavigationServiceLocalProxy setGuidanceType:]
  -[MNNavigationServiceLocalProxy resumeOriginalDestination]
  -[MNNavigationServiceLocalProxy disableNavigationCapability:]
  -[MNNavigationServiceLocalProxy switchToRoute:]
  -[MNNavigationServiceLocalProxy checkinForNavigationService:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didReceiveRouteSignalStrength:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didReceiveTransitUpdates:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didStartSpeakingPrompt:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateRouteWithNewRideSelection:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didFailRerouteWithError:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:willProcessSpeechEvent:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdatePreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateAlternateRoutes:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateHeading:accuracy:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didEnableGuidancePrompts:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:willSendTransitUpdateRequestForRouteIDs:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didStartUsingVoiceLanguage:]
  -[MNNavigationServiceLocalProxy .cxx_destruct]
  -[MNNavigationServiceLocalProxy navigationSessionManagerEndGuidanceUpdate:]
  -[MNNavigationServiceLocalProxy setHeadingOrientation:]
  -[MNNavigationServiceLocalProxy setDelegate:]
  -[MNNavigationServiceLocalProxy _serviceStateForStateType:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:willStartNavigationWithRoute:navigationType:request:response:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:newGuidanceEventFeedback:]
  -[MNNavigationServiceLocalProxy init]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateMotionType:confidence:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didArriveAtWaypoint:endOfLegIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didProcessSpeechEvent:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didResumeNavigatingFromWaypoint:endOfLegIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerWillReroute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:proceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationServiceLocalProxy reset]
  -[MNNavigationServiceLocalProxy navigationSessionManagerHideSecondaryStep:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateTracePlaybackDetails:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didReceiveTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:showLaneDirections:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerWillResumeFromPause:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:hideJunctionViewForId:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:updateSignsWithInfo:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:showJunctionView:]
  -[MNNavigationServiceLocalProxy stateManager:willChangeFromState:toState:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:shouldEndWithReason:]
  -[MNNavigationServiceLocalProxy delegate]
  -[MNNavigationServiceLocalProxy navigationSessionManager:updatedGuidanceEventFeedback:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerWillPause:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateETAResponseForRoute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didFailWithError:]
  -[MNNavigationServiceLocalProxy start]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateStepIndex:segmentIndex:]
  -[MNNavigationServiceLocalProxy stateManager:didChangeFromState:toState:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerBeginGuidanceUpdate:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didStopWithReason:]
  -[MNNavigationServiceLocalProxy dealloc]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didEnterPreArrivalStateForWaypoint:endOfLegIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateTrafficIncidentAlert:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didReceiveTransitAlert:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateDisplayETA:remainingDistance:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:updateSignsWithARInfo:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didChangeNavigationState:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerDidCancelReroute:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:willAnnounce:inSeconds:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateLocation:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didUpdateDisplayedStepIndex:segmentIndex:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:usePersistentDisplay:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationServiceLocalProxy navigationSessionManagerDidArrive:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:hideLaneDirectionsForId:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:currentStepIndex:didUpdateDistanceUntilSign:timeUntilSign:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:triggerHaptics:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didRerouteWithRoute:location:withAlternateRoutes:]
  -[MNNavigationServiceLocalProxy navigationSessionManager:didChangeVoiceGuidanceLevel:]


MNRouteRefreshPolicyRulesDefault : NSObject <MNRouteRefreshPolicyRules>
 @property  unsigned long policy
 @property  BOOL canWakeClientForUpdates
 @property  BOOL canWakeDeviceForUpdates
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteRefreshPolicyRulesDefault policy]
  -[MNRouteRefreshPolicyRulesDefault init]
  -[MNRouteRefreshPolicyRulesDefault canMakeNetworkRequestsForDestination:atDate:]
  -[MNRouteRefreshPolicyRulesDefault timeIntervalForDestinationRefresh:lastUpdate:]
  -[MNRouteRefreshPolicyRulesDefault maxTimeIntervalFromNowForDestinationRefresh:fromDate:]
  -[MNRouteRefreshPolicyRulesDefault canWakeClientForUpdates]
  -[MNRouteRefreshPolicyRulesDefault canWakeDeviceForUpdates]


MNAudioHardwareEngine : NSObject <MNAudioEventQueueDelegate, MNAudioSessionAccessDelegate, MNHapticControllerDelegate, MNSoundEffectControllerDelegate, MNSpeechControllerDelegate>
 @property  MNAudioPathwayResourceAccess *pathwayAccess
 @property  MNAudioSessionResourceAccess *sessionAccess
 @property  MNHapticResourceController *hapticController
 @property  MNSoundEffectResourceController *sfxController
 @property  MNSpeechResourceController *speechController
 @property  unsigned long voiceGuidanceLevel
 @property  MNAudioSystemOptions *options
 @property  BOOL speaking
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNAudioHardwareEngine headphonesAreInUse]
  +[MNAudioHardwareEngine deviceSpeakerIsInUse]

  // instance methods
  -[MNAudioHardwareEngine cache:]
  -[MNAudioHardwareEngine options]
  -[MNAudioHardwareEngine .cxx_destruct]
  -[MNAudioHardwareEngine stop]
  -[MNAudioHardwareEngine addObserver:]
  -[MNAudioHardwareEngine _speechMuted]
  -[MNAudioHardwareEngine removeObserver:]
  -[MNAudioHardwareEngine speaking]
  -[MNAudioHardwareEngine voiceGuidanceLevel]
  -[MNAudioHardwareEngine _registerForObservation]
  -[MNAudioHardwareEngine _mediaSessionServicesWereLost:]
  -[MNAudioHardwareEngine _mediaSessionServicesWereReset:]
  -[MNAudioHardwareEngine soundEffectResourceController:didFailWhilePlayingIndicator:withError:]
  -[MNAudioHardwareEngine soundEffectResourceController:didFinishPlayingIndicator:]
  -[MNAudioHardwareEngine soundEffectResourceController:wasInterruptedWhilePlayingIndicator:withError:]
  -[MNAudioHardwareEngine changeOptions:forTransportType:]
  -[MNAudioHardwareEngine speechController]
  -[MNAudioHardwareEngine pathwayAccess]
  -[MNAudioHardwareEngine sessionAccess]
  -[MNAudioHardwareEngine speak:withShortPrompt:andVoiceGuidanceLevel:thenCallCompletion:]
  -[MNAudioHardwareEngine _processNextEventIfNecessary]
  -[MNAudioHardwareEngine clearAlEvents]
  -[MNAudioHardwareEngine sfxController]
  -[MNAudioHardwareEngine hapticController]
  -[MNAudioHardwareEngine _stopCurrentEvent]
  -[MNAudioHardwareEngine durationOf:]
  -[MNAudioHardwareEngine _hardwareIsBusy]
  -[MNAudioHardwareEngine _processNextEvent]
  -[MNAudioHardwareEngine _process:]
  -[MNAudioHardwareEngine _retryDeactivation]
  -[MNAudioHardwareEngine _finishedProcessingEventWithStatus:]
  -[MNAudioHardwareEngine audioSystemEventQueue:eventWillInterrupt:]
  -[MNAudioHardwareEngine audioSessionResourceAccess:didActivateSession:]
  -[MNAudioHardwareEngine audioSessionResourceAccess:didFailWhileActivatingSession:]
  -[MNAudioHardwareEngine audioSessionResourceAccess:didDeactivateSession:]
  -[MNAudioHardwareEngine audioSessionResourceAccess:didFailWhileDeactivatingSession:]
  -[MNAudioHardwareEngine audioSessionResourceAccess:didTimeoutWithError:]
  -[MNAudioHardwareEngine speechResourceController:willStartSpeakingUtterance:]
  -[MNAudioHardwareEngine speechResourceController:didFinishSpeakingUtterance:withDuration:]
  -[MNAudioHardwareEngine speechResourceController:didFailWhileSpeakingUtterance:withError:]
  -[MNAudioHardwareEngine speechResourceController:didTimeoutWhileSpeakingUtterance:withError:]
  -[MNAudioHardwareEngine speechResourceController:wasInterruptedWhileSpeakingUtterance:withError:]
  -[MNAudioHardwareEngine initWithAudioSystemOptions:andVoiceLanguage:andTransportType:]
  -[MNAudioHardwareEngine changeTransportType:]
  -[MNAudioHardwareEngine vibrateForShortPrompt:]
  -[MNAudioHardwareEngine setPathwayAccess:]
  -[MNAudioHardwareEngine setSessionAccess:]
  -[MNAudioHardwareEngine setHapticController:]
  -[MNAudioHardwareEngine setSfxController:]
  -[MNAudioHardwareEngine setSpeechController:]


MNAnnouncementPlanEvent : NSObject
 @property  GEOComposedGuidanceEvent *event
 @property  double distance
 @property  double speed
 @property  NSArray *durations
 @property  NSMutableArray *announcementDurations
 @property  BOOL includeInPlan
 @property  unsigned long variantIndex
 @property  double triggerDistance
 @property  double completionDistance

  // instance methods
  -[MNAnnouncementPlanEvent speed]
  -[MNAnnouncementPlanEvent setSpeed:]
  -[MNAnnouncementPlanEvent .cxx_destruct]
  -[MNAnnouncementPlanEvent variantIndex]
  -[MNAnnouncementPlanEvent setVariantIndex:]
  -[MNAnnouncementPlanEvent setEvent:]
  -[MNAnnouncementPlanEvent durations]
  -[MNAnnouncementPlanEvent setDurations:]
  -[MNAnnouncementPlanEvent setDistance:]
  -[MNAnnouncementPlanEvent distance]
  -[MNAnnouncementPlanEvent event]
  -[MNAnnouncementPlanEvent initWithEvent:distance:speed:durations:]
  -[MNAnnouncementPlanEvent includeInPlan]
  -[MNAnnouncementPlanEvent completionDistance]
  -[MNAnnouncementPlanEvent triggerDistance]
  -[MNAnnouncementPlanEvent setTriggerDistance:]
  -[MNAnnouncementPlanEvent announcementDurations]
  -[MNAnnouncementPlanEvent setIncludeInPlan:]
  -[MNAnnouncementPlanEvent setAnnouncementDurations:]


MNTimeballServiceLocalProxy : NSObject <MNTimeballServiceProxyInterface, MNTimeballInternalProvider, MNTimeballInternalObserver>
 @property  MNTimeballServicePeer *peer
 @property  <MNTimeballServiceProxyDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTimeballServiceLocalProxy peer]
  -[MNTimeballServiceLocalProxy _delegate]
  -[MNTimeballServiceLocalProxy _enqueOperation:]
  -[MNTimeballServiceLocalProxy .cxx_destruct]
  -[MNTimeballServiceLocalProxy setDelegate:]
  -[MNTimeballServiceLocalProxy addObserver:]
  -[MNTimeballServiceLocalProxy delegate]
  -[MNTimeballServiceLocalProxy dealloc]
  -[MNTimeballServiceLocalProxy removeObserver:]
  -[MNTimeballServiceLocalProxy provider:didReceiveError:forDestination:]
  -[MNTimeballServiceLocalProxy provider:didReceiveUpdate:forDestination:]
  -[MNTimeballServiceLocalProxy _requestHighMemoryThreshold:]
  -[MNTimeballServiceLocalProxy _removeHighMemoryThreshold]
  -[MNTimeballServiceLocalProxy _invokeDelegateHandlerWithID:forDestination:update:error:]
  -[MNTimeballServiceLocalProxy _receivedNetworkUpdate:forDestination:]
  -[MNTimeballServiceLocalProxy _receivedNetworkError:forDestination:]
  -[MNTimeballServiceLocalProxy _completedUpdateForDelegateHandlerID:]
  -[MNTimeballServiceLocalProxy _handleResult:forDestination:error:fromNetwork:requestingClientID:handlerID:completed:]
  -[MNTimeballServiceLocalProxy _requestOptions:forDestinations:fromLocation:freshness:handlerID:]
  -[MNTimeballServiceLocalProxy requestRoutingOptions:forDestinations:freshness:handlerID:]
  -[MNTimeballServiceLocalProxy subscribeToDestination:options:refreshPolicy:]
  -[MNTimeballServiceLocalProxy unsubscribeFromDestination:]
  -[MNTimeballServiceLocalProxy subscribeToAllDestinations]
  -[MNTimeballServiceLocalProxy unsubscribeFromAllDestinations]
  -[MNTimeballServiceLocalProxy initWithPeer:targetQueue:cache:locationManager:routingProvider:scheduler:]


MNTimeballService : NSObject <MNTimeballServiceProxyDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTimeballService .cxx_destruct]
  -[MNTimeballService initWithClientID:]
  -[MNTimeballService dealloc]
  -[MNTimeballService invokeHandlerWithID:forDestination:update:error:]
  -[MNTimeballService completedUpdateForHandlerID:]
  -[MNTimeballService didReceiveError:forDestination:]
  -[MNTimeballService didReceiveUpdate:forDestination:]
  -[MNTimeballService requestRoutingOptions:forDestinations:freshness:callbackBlock:]
  -[MNTimeballService _addHandler:]
  -[MNTimeballService removeSubscriber:forDestination:]
  -[MNTimeballService _handlerForID:]
  -[MNTimeballService _removeHandlerWithID:]
  -[MNTimeballService requestRoutingOptions:forDestination:freshness:completionHandler:]
  -[MNTimeballService addSubscriber:forDestination:options:refreshPolicy:]
  -[MNTimeballService removeSubscriberForAllDestinations:]
  -[MNTimeballService startLeechingDestinationUpdates:]
  -[MNTimeballService stopLeechingDestinationUpdates:]


MNTimeballRoutingProvider : NSObject
  // instance methods
  -[MNTimeballRoutingProvider .cxx_destruct]
  -[MNTimeballRoutingProvider setNetworkRequester:]
  -[MNTimeballRoutingProvider initWithCache:]
  -[MNTimeballRoutingProvider requestRoutingOptions:forDestinations:freshness:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballRoutingProvider _gotoNetworkForOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballRoutingProvider _checkCacheForOptions:forDestinations:freshness:fromOrigin:callbackBlock:callbackQueue:completionBlock:]


MNTracePlaybackDetails : PBCodable <NSCopying>
 @property  BOOL hasEventType
 @property  int eventType
 @property  BOOL hasTracePath
 @property  NSString *tracePath
 @property  BOOL hasTraceDuration
 @property  double traceDuration
 @property  BOOL hasCurrentPosition
 @property  double currentPosition
 @property  NSMutableArray *bookmarks
 @property  BOOL hasRecordedBookmarkID
 @property  unsigned int recordedBookmarkID
 @property  BOOL hasPedestrianTracePath
 @property  NSString *pedestrianTracePath
 @property  BOOL hasPedestrianTraceStartRelativeTimestamp
 @property  double pedestrianTraceStartRelativeTimestamp

  // class methods
  +[MNTracePlaybackDetails bookmarkType]

  // instance methods
  -[MNTracePlaybackDetails hasEventType]
  -[MNTracePlaybackDetails mergeFrom:]
  -[MNTracePlaybackDetails setTracePath:]
  -[MNTracePlaybackDetails setHasEventType:]
  -[MNTracePlaybackDetails .cxx_destruct]
  -[MNTracePlaybackDetails dictionaryRepresentation]
  -[MNTracePlaybackDetails writeTo:]
  -[MNTracePlaybackDetails isEqual:]
  -[MNTracePlaybackDetails copyTo:]
  -[MNTracePlaybackDetails StringAsEventType:]
  -[MNTracePlaybackDetails readFrom:]
  -[MNTracePlaybackDetails currentPosition]
  -[MNTracePlaybackDetails eventTypeAsString:]
  -[MNTracePlaybackDetails bookmarkAtIndex:]
  -[MNTracePlaybackDetails setTraceDuration:]
  -[MNTracePlaybackDetails eventType]
  -[MNTracePlaybackDetails traceDuration]
  -[MNTracePlaybackDetails copyWithZone:]
  -[MNTracePlaybackDetails setEventType:]
  -[MNTracePlaybackDetails tracePath]
  -[MNTracePlaybackDetails bookmarks]
  -[MNTracePlaybackDetails setCurrentPosition:]
  -[MNTracePlaybackDetails setBookmarks:]
  -[MNTracePlaybackDetails addBookmark:]
  -[MNTracePlaybackDetails bookmarksCount]
  -[MNTracePlaybackDetails clearBookmarks]
  -[MNTracePlaybackDetails setPedestrianTracePath:]
  -[MNTracePlaybackDetails hasTracePath]
  -[MNTracePlaybackDetails setHasTraceDuration:]
  -[MNTracePlaybackDetails hasTraceDuration]
  -[MNTracePlaybackDetails setHasCurrentPosition:]
  -[MNTracePlaybackDetails hasCurrentPosition]
  -[MNTracePlaybackDetails setRecordedBookmarkID:]
  -[MNTracePlaybackDetails setHasRecordedBookmarkID:]
  -[MNTracePlaybackDetails hasRecordedBookmarkID]
  -[MNTracePlaybackDetails hasPedestrianTracePath]
  -[MNTracePlaybackDetails setPedestrianTraceStartRelativeTimestamp:]
  -[MNTracePlaybackDetails setHasPedestrianTraceStartRelativeTimestamp:]
  -[MNTracePlaybackDetails hasPedestrianTraceStartRelativeTimestamp]
  -[MNTracePlaybackDetails recordedBookmarkID]
  -[MNTracePlaybackDetails pedestrianTracePath]
  -[MNTracePlaybackDetails pedestrianTraceStartRelativeTimestamp]


MNTraceRecorder : NSObject <MNLocationRecorder>
 @property  MNTrace *trace
 @property  NSDate *recordingStartTime
 @property  @? timeSinceRecordingBeganHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTraceRecorder trace]
  -[MNTraceRecorder beginTransaction]
  -[MNTraceRecorder .cxx_destruct]
  -[MNTraceRecorder endTransaction]
  -[MNTraceRecorder recordInitialCourse:]
  -[MNTraceRecorder recordLocation:correctedLocation:]
  -[MNTraceRecorder recordError:]
  -[MNTraceRecorder recordCompassHeading:magneticHeading:accuracy:timestamp:]
  -[MNTraceRecorder recordLocationUpdatePause]
  -[MNTraceRecorder recordLocationUpdateResume]
  -[MNTraceRecorder recordVehicleSpeed:timestamp:]
  -[MNTraceRecorder recordVehicleHeading:timestamp:]
  -[MNTraceRecorder setIsSimulation:]
  -[MNTraceRecorder init]
  -[MNTraceRecorder _prepareStatements]
  -[MNTraceRecorder timeSinceRecordingBegan]
  -[MNTraceRecorder recordETAURequest:response:error:destinationName:requestTimestamp:responseTimestamp:]
  -[MNTraceRecorder _isTracePathValid:]
  -[MNTraceRecorder _updateForExistingTrace]
  -[MNTraceRecorder _initializeTraceDB]
  -[MNTraceRecorder _closeTraceDB]
  -[MNTraceRecorder _dispatchWrite:]
  -[MNTraceRecorder saveTraceWithCompletionHandler:]
  -[MNTraceRecorder _logError:resultCode:]
  -[MNTraceRecorder _logSqliteErrorWithResult:file:line:]
  -[MNTraceRecorder _executeStatementForQuery:handler:]
  -[MNTraceRecorder recordLocation:rawLocation:timestamp:]
  -[MNTraceRecorder _recordLocationMatchInfoOnWriteQueue:forLocationID:]
  -[MNTraceRecorder _updateNavigationEventsWithLocationReference:]
  -[MNTraceRecorder _recordLocationEvent:recordingTimestamp:coordinate:rawCoordinate:timestamp:horizontalAccuracy:verticalAccuracy:altitude:speed:speedAccuracy:course:rawCourse:type:courseAccuracy:correctedCoordinate:correctedCourse:matchType:activeTransportType:matchInfo:correctedLocation:speedLimit:shieldText:shieldType:]
  -[MNTraceRecorder _recordLocationEvent:recordingTimestamp:location:correctedLocation:]
  -[MNTraceRecorder recordLocation:rawLocation:]
  -[MNTraceRecorder startWritingTraceToPath:withErrorHandler:]
  -[MNTraceRecorder saveTraceSynchronously]
  -[MNTraceRecorder setRecordingStartTime:]
  -[MNTraceRecorder recordEnvironmentInfo:value:]
  -[MNTraceRecorder recordDebugSetting:settingValue:]
  -[MNTraceRecorder recordAudioSetting:voiceGuidance:]
  -[MNTraceRecorder recordStylesheet:data:]
  -[MNTraceRecorder recordMiscInfo:value:]
  -[MNTraceRecorder recordNavigationEvent:forLocation:description:]
  -[MNTraceRecorder recordLocation:timestamp:]
  -[MNTraceRecorder recordSimulatedCoordinate:course:altitude:speed:timestamp:activeTransportType:]
  -[MNTraceRecorder setRouteGenius:]
  -[MNTraceRecorder resetLocationsForSimulation]
  -[MNTraceRecorder recordDirectionsRequest:response:error:waypoints:selectedRouteIndex:requestTimestamp:responseTimestamp:]
  -[MNTraceRecorder recordTransitUpdateRequest:withTimestamp:]
  -[MNTraceRecorder recordTransitUpdateResponse:]
  -[MNTraceRecorder recordTransitUpdateError:]
  -[MNTraceRecorder recordMotionUpdate:exitType:confidence:]
  -[MNTraceRecorder recordVirtualGarageVehicleState:isDifferentVehicle:]
  -[MNTraceRecorder recordingStartTime]
  -[MNTraceRecorder timeSinceRecordingBeganHandler]
  -[MNTraceRecorder setTimeSinceRecordingBeganHandler:]


MNNavigationTraceManager : NSObject <MNTracePlayerObserver, GEOMotionContextProvider, MNLocationProvider, MNVirtualGarageProvider>
 @property  <MNNavigationTraceManagerDelegate> *traceManagerDelegate
 @property  MNTracePlayer *tracePlayer
 @property  MNTraceRecorder *traceRecorder
 @property  int navigationType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <GEOMotionContextProviderDelegate> *motionDelegate
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  BOOL isAuthorized
 @property  int headingOrientation
 @property  double expectedGpsUpdateInterval
 @property  BOOL coarseModeEnabled
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale
 @property  <MNVirtualGarageProviderDelegate> *virtualGarageDelegate

  // instance methods
  -[MNNavigationTraceManager isTracePlayer]
  -[MNNavigationTraceManager effectiveBundleIdentifier]
  -[MNNavigationTraceManager isAuthorized]
  -[MNNavigationTraceManager startUpdatingLocation]
  -[MNNavigationTraceManager setEffectiveBundle:]
  -[MNNavigationTraceManager stopUpdatingHeading]
  -[MNNavigationTraceManager timeScale]
  -[MNNavigationTraceManager traceVersion]
  -[MNNavigationTraceManager stopUpdatingVehicleSpeed]
  -[MNNavigationTraceManager startUpdatingVehicleSpeed]
  -[MNNavigationTraceManager setEffectiveBundleIdentifier:]
  -[MNNavigationTraceManager stopMonitoringForRegion:]
  -[MNNavigationTraceManager startUpdatingHeading]
  -[MNNavigationTraceManager stopUpdatingLocation]
  -[MNNavigationTraceManager startUpdatingVehicleHeading]
  -[MNNavigationTraceManager stopUpdatingVehicleHeading]
  -[MNNavigationTraceManager headingOrientation]
  -[MNNavigationTraceManager effectiveBundle]
  -[MNNavigationTraceManager startMonitoringForRegion:]
  -[MNNavigationTraceManager .cxx_destruct]
  -[MNNavigationTraceManager expectedGpsUpdateInterval]
  -[MNNavigationTraceManager setHeadingOrientation:]
  -[MNNavigationTraceManager setDelegate:]
  -[MNNavigationTraceManager _isNavigating]
  -[MNNavigationTraceManager setNavigationType:]
  -[MNNavigationTraceManager navigationType]
  -[MNNavigationTraceManager coarseModeEnabled]
  -[MNNavigationTraceManager stopMotionUpdates]
  -[MNNavigationTraceManager setMotionDelegate:]
  -[MNNavigationTraceManager startMotionUpdates]
  -[MNNavigationTraceManager delegate]
  -[MNNavigationTraceManager resetForActiveTileGroupChanged]
  -[MNNavigationTraceManager close]
  -[MNNavigationTraceManager dealloc]
  -[MNNavigationTraceManager traceRecorder]
  -[MNNavigationTraceManager tracePlayer]
  -[MNNavigationTraceManager _defaultTraceNameForDestination:isSimulation:]
  -[MNNavigationTraceManager _tracePathForTraceName:]
  -[MNNavigationTraceManager _createSymlinkForTracePath:]
  -[MNNavigationTraceManager _recordEnvironmentInfo:]
  -[MNNavigationTraceManager _recordStylesheet:]
  -[MNNavigationTraceManager _copyTraceToCrashReporterDirectory:]
  -[MNNavigationTraceManager _validFilenameForTraceName:]
  -[MNNavigationTraceManager _defaultTraceExtension]
  -[MNNavigationTraceManager _startIndexForNavigation]
  -[MNNavigationTraceManager tracePlayerDidStart:]
  -[MNNavigationTraceManager tracePlayerDidStop:]
  -[MNNavigationTraceManager tracePlayerDidPause:]
  -[MNNavigationTraceManager tracePlayerDidResume:]
  -[MNNavigationTraceManager tracePlayer:didSeekToTransportType:]
  -[MNNavigationTraceManager tracePlayer:didSeekToTime:fromTime:location:]
  -[MNNavigationTraceManager tracePlayer:didPlayAtTime:]
  -[MNNavigationTraceManager tracePlayer:didJumpToRouteResponse:request:origin:destination:]
  -[MNNavigationTraceManager tracePlayerDidStayOnRoute:]
  -[MNNavigationTraceManager tracePlayer:didUpdateLocation:]
  -[MNNavigationTraceManager tracePlayer:didReceiveLocationError:]
  -[MNNavigationTraceManager tracePlayerDidPauseLocationUpdates:]
  -[MNNavigationTraceManager tracePlayerDidResumeLocationUpdates:]
  -[MNNavigationTraceManager tracePlayer:didUpdateHeading:]
  -[MNNavigationTraceManager tracePlayer:didUpdateMotion:exitType:confidence:]
  -[MNNavigationTraceManager tracePlayer:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationTraceManager tracePlayer:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationTraceManager tracePlayer:didUpdateEVData:]
  -[MNNavigationTraceManager motionDelegate]
  -[MNNavigationTraceManager startVirtualGarageUpdates]
  -[MNNavigationTraceManager stopVirtualGarageUpdates]
  -[MNNavigationTraceManager virtualGarageDelegate]
  -[MNNavigationTraceManager setVirtualGarageDelegate:]
  -[MNNavigationTraceManager openForPlaybackWithTracePath:]
  -[MNNavigationTraceManager openForRecordingWithTraceRecordingData:traceName:selectedRouteIndex:isReconnecting:isSimulation:]
  -[MNNavigationTraceManager openForSimulationWithRoute:traceRecordingData:traceNameOverride:]
  -[MNNavigationTraceManager traceManagerDelegate]
  -[MNNavigationTraceManager setTraceManagerDelegate:]


MNNavigationService : NSObject <MNNavigationServiceClientInterface>
 @property  MNNavigationDetails *details
 @property  MNNavigationDetails *details
 @property  MNUserOptions *cachedUserOptions
 @property  int headingOrientation
 @property  BOOL guidancePromptsEnabled
 @property  unsigned long state
 @property  BOOL isInNavigatingState
 @property  int navigationType
 @property  int navigationState
 @property  int navigationTransportType
 @property  BOOL isTrackingCurrentLocation
 @property  BOOL isInPreArrivalState
 @property  NSString *currentVoiceLanguage
 @property  int desiredNavigationType
 @property  int desiredTransportType
 @property  GEOComposedRoute *route
 @property  GEODirectionsRequest *currentRequest
 @property  GEODirectionsResponse *currentResponse
 @property  unsigned long routeIndex
 @property  unsigned long reconnectionRouteIndex
 @property  NSArray *alternateRoutes
 @property  unsigned long stepIndex
 @property  unsigned long displayedStepIndex
 @property  MNLocation *lastLocation
 @property  MNDisplayETAInfo *displayEtaInfo
 @property  MNRouteDistanceInfo *remainingDistanceInfo
 @property  double distanceUntilSign
 @property  double timeUntilSign
 @property  double distanceUntilManeuver
 @property  double timeUntilManeuver
 @property  GEOComposedWaypoint *origin
 @property  GEOComposedWaypoint *originalOrigin
 @property  GEOComposedWaypoint *destination
 @property  NSString *destinationName
 @property  GEOComposedWaypoint *originalDestination
 @property  NSString *originalDestinationName
 @property  BOOL isDetour
 @property  MNGuidanceLaneInfo *activeLaneInfo
 @property  NSString *tracePath
 @property  double traceDuration
 @property  NSArray *traceBookmarks
 @property  BOOL navigatingFromTrace
 @property  BOOL traceIsPlaying
 @property  double tracePosition
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNavigationService _hashForProtocol:]
  +[MNNavigationService daemonInterfaceHash]
  +[MNNavigationService sharedService]
  +[MNNavigationService clientInterfaceHash]

  // instance methods
  -[MNNavigationService setTracePosition:]
  -[MNNavigationService initPrivate]
  -[MNNavigationService stopCurrentGuidancePrompt]
  -[MNNavigationService stopNavigationWithReason:]
  -[MNNavigationService setTracePlaybackSpeed:]
  -[MNNavigationService recordPedestrianTracePath:]
  -[MNNavigationService unregisterObserver:]
  -[MNNavigationService setGuidancePromptsEnabled:]
  -[MNNavigationService setTraceIsPlaying:]
  -[MNNavigationService isInNavigatingState]
  -[MNNavigationService updateDestination:]
  -[MNNavigationService changeUserOptions:]
  -[MNNavigationService setDisplayedStepIndex:]
  -[MNNavigationService setJunctionViewImageWidth:height:]
  -[MNNavigationService setRideIndex:forSegmentIndex:]
  -[MNNavigationService recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationService setIsConnectedToCarplay:]
  -[MNNavigationService setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationService forceReroute]
  -[MNNavigationService setGuidanceType:]
  -[MNNavigationService resumeOriginalDestination]
  -[MNNavigationService switchToRoute:]
  -[MNNavigationService openForClient:]
  -[MNNavigationService navigationServiceProxyDidArrive:]
  -[MNNavigationService navigationServiceProxy:didUpdateETAResponseForRoute:]
  -[MNNavigationService registerObserver:]
  -[MNNavigationService isOpenForClient:]
  -[MNNavigationService navigationServiceProxy:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationService currentVoiceLanguage]
  -[MNNavigationService remainingDistanceInfo]
  -[MNNavigationService navigationServiceProxyDidEnterPreArrivalState:]
  -[MNNavigationService navigationServiceProxy:didUpdateDistanceUntilSign:timeUntilSign:forStepIndex:]
  -[MNNavigationService route]
  -[MNNavigationService navigationServiceProxy:updatedGuidanceEventFeedback:]
  -[MNNavigationService lastLocation]
  -[MNNavigationService origin]
  -[MNNavigationService headingOrientation]
  -[MNNavigationService tracePosition]
  -[MNNavigationService navigationServiceProxy:didUpdateRouteWithNewRideSelection:]
  -[MNNavigationService alternateRoutes]
  -[MNNavigationService activeLaneInfo]
  -[MNNavigationService guidancePromptsEnabled]
  -[MNNavigationService navigationServiceProxy:didReceiveTransitAlert:]
  -[MNNavigationService navigationServiceProxy:didUpdateProceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationService navigationServiceProxy:didStartSpeakingPrompt:]
  -[MNNavigationService .cxx_destruct]
  -[MNNavigationService navigationServiceProxy:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationService navigationServiceProxy:didRerouteWithRoute:withLocation:withAlternateRoutes:]
  -[MNNavigationService setDetails:]
  -[MNNavigationService navigationServiceProxyEndGuidanceUpdate:]
  -[MNNavigationService setHeadingOrientation:]
  -[MNNavigationService navigationServiceProxy:didUpdateMotionType:confidence:]
  -[MNNavigationService navigationServiceProxy:updateSignsWithARInfo:]
  -[MNNavigationService _resetDetails]
  -[MNNavigationService navigationServiceProxy:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationService destination]
  -[MNNavigationService navigationServiceProxy:updateSignsWithInfo:]
  -[MNNavigationService desiredTransportType]
  -[MNNavigationService navigationServiceProxy:usePersistentDisplay:]
  -[MNNavigationService navigationServiceProxyHideSecondaryStep:]
  -[MNNavigationService navigationServiceProxy:didReceiveRouteSignalStrength:]
  -[MNNavigationService navigationServiceProxy:didFailWithError:]
  -[MNNavigationService navigationServiceProxy:didProcessSpeechEvent:]
  -[MNNavigationService navigationServiceProxy:didEnterPreArrivalStateForWaypoint:endOfLegIndex:]
  -[MNNavigationService destinationName]
  -[MNNavigationService desiredNavigationType]
  -[MNNavigationService navigationServiceProxy:willAnnounce:inSeconds:]
  -[MNNavigationService navigationServiceProxy:willChangeFromState:toState:]
  -[MNNavigationService navigationServiceProxy:didReceiveTrafficIncidentAlert:]
  -[MNNavigationService traceBookmarks]
  -[MNNavigationService displayedStepIndex]
  -[MNNavigationService isDetour]
  -[MNNavigationService navigationServiceProxy:didUpdateDistanceUntilManeuver:timeUntilManeuver:forStepIndex:]
  -[MNNavigationService navigationServiceProxy:didUpdateTracePlaybackDetails:]
  -[MNNavigationService navigationServiceProxy:didArriveAtWaypoint:endOfLegIndex:]
  -[MNNavigationService navigationServiceProxy:didChangeFromState:toState:]
  -[MNNavigationService navigationServiceProxyDidCancelReroute:]
  -[MNNavigationService navigationServiceProxyWillReroute:]
  -[MNNavigationService traceIsPlaying]
  -[MNNavigationService navigationServiceProxy:willStartNavigationWithRoute:navigationType:request:response:]
  -[MNNavigationService navigationServiceProxy:didUpdateStepIndex:segmentIndex:]
  -[MNNavigationService navigationServiceProxy:didUpdatePreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationService state]
  -[MNNavigationService navigationServiceProxy:didFailRerouteWithError:]
  -[MNNavigationService distanceUntilSign]
  -[MNNavigationService navigationState]
  -[MNNavigationService navigationServiceProxy:didUpdateHeading:accuracy:]
  -[MNNavigationService navigationServiceProxy:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationService navigationType]
  -[MNNavigationService navigationServiceProxy:triggerHaptics:]
  -[MNNavigationService navigationServiceProxy:hideLaneDirectionsForId:]
  -[MNNavigationService navigationServiceProxy:showJunctionView:]
  -[MNNavigationService navigationServiceProxy:showLaneDirections:]
  -[MNNavigationService navigationServiceProxy:didUpdateNavigationDetails:]
  -[MNNavigationService navigationServiceProxy:didResumeNavigatingFromWaypoint:endOfLegIndex:]
  -[MNNavigationService details]
  -[MNNavigationService navigationServiceProxy:didUpdateDisplayedStepIndex:segmentIndex:]
  -[MNNavigationService navigationTransportType]
  -[MNNavigationService navigationServiceProxy:didUpdateMatchedLocation:]
  -[MNNavigationService userOptions]
  -[MNNavigationService currentResponse]
  -[MNNavigationService navigationServiceProxy:didChangeNavigationState:]
  -[MNNavigationService originalOrigin]
  -[MNNavigationService navigationServiceProxyBeginGuidanceUpdate:]
  -[MNNavigationService navigationServiceProxy:didReceiveRealtimeUpdates:]
  -[MNNavigationService timeUntilSign]
  -[MNNavigationService navigationServiceProxy:didUpdateTrafficIncidentAlert:]
  -[MNNavigationService traceDuration]
  -[MNNavigationService reconnectionRouteIndex]
  -[MNNavigationService navigationServiceProxy:didEnableGuidancePrompts:]
  -[MNNavigationService routeIndex]
  -[MNNavigationService navigationServiceProxy:willRequestRealtimeUpdatesForRouteIDs:]
  -[MNNavigationService navigationServiceProxy:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationService navigationServiceProxy:didChangeVoiceGuidanceLevel:]
  -[MNNavigationService navigationServiceProxy:didActivateAudioSession:]
  -[MNNavigationService currentRequest]
  -[MNNavigationService timeUntilManeuver]
  -[MNNavigationService navigationServiceProxy:newGuidanceEventFeedback:]
  -[MNNavigationService navigationServiceProxyWillPauseNavigation:]
  -[MNNavigationService _clientProxy]
  -[MNNavigationService navigationServiceProxy:didUpdateDisplayETA:remainingDistance:]
  -[MNNavigationService stepIndex]
  -[MNNavigationService closeForClient:]
  -[MNNavigationService navigationServiceProxy:didEndWithReason:]
  -[MNNavigationService navigationServiceProxy:didUpdateAlternateRoutes:]
  -[MNNavigationService navigationServiceProxyWillResumeFromPauseNavigation:]
  -[MNNavigationService navigationServiceProxy:hideJunctionViewForId:]
  -[MNNavigationService isInPreArrivalState]
  -[MNNavigationService navigationServiceProxy:didStartUsingVoiceLanguage:]
  -[MNNavigationService originalDestination]
  -[MNNavigationService tracePath]
  -[MNNavigationService navigationServiceProxy:willProcessSpeechEvent:]
  -[MNNavigationService distanceUntilManeuver]
  -[MNNavigationService cachedUserOptions]
  -[MNNavigationService setCachedUserOptions:]
  -[MNNavigationService ticketForDirectionsRequest:]
  -[MNNavigationService startNavigationWithDetails:error:]
  -[MNNavigationService repeatCurrentGuidance:]
  -[MNNavigationService repeatCurrentTrafficAlert:]
  -[MNNavigationService vibrateForPrompt:completion:]
  -[MNNavigationService disableNavigationCapability:reason:]
  -[MNNavigationService enableNavigationCapability:reason:]
  -[MNNavigationService isTrackingCurrentLocation]
  -[MNNavigationService displayETAInfoForRoute:]
  -[MNNavigationService remainingDistanceInfoForRoute:]
  -[MNNavigationService alternateRouteIndexForRoute:]
  -[MNNavigationService etaRouteForRoute:]
  -[MNNavigationService realtimeUpdatesForRoutes:]
  -[MNNavigationService realtimeUpdatesForAllRoutes]
  -[MNNavigationService pauseRealtimeUpdates]
  -[MNNavigationService resumeRealtimeUpdates]
  -[MNNavigationService displayEtaInfo]
  -[MNNavigationService originalDestinationName]
  -[MNNavigationService isNavigatingFromTrace]


MNNavigationServiceDirectionsRequestTicket : NSObject
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  MNTraceRecordingData *traceRecordingData

  // instance methods
  -[MNNavigationServiceDirectionsRequestTicket .cxx_destruct]
  -[MNNavigationServiceDirectionsRequestTicket directionsRequest]
  -[MNNavigationServiceDirectionsRequestTicket cancel]
  -[MNNavigationServiceDirectionsRequestTicket directionsResponse]
  -[MNNavigationServiceDirectionsRequestTicket traceRecordingData]
  -[MNNavigationServiceDirectionsRequestTicket initWithProxy:request:]
  -[MNNavigationServiceDirectionsRequestTicket submitWithHandler:]


MNRouteRefreshPolicyRulesTimeToLeave : NSObject <MNRouteRefreshPolicyRules>
 @property  unsigned long policy
 @property  BOOL canWakeClientForUpdates
 @property  BOOL canWakeDeviceForUpdates
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteRefreshPolicyRulesTimeToLeave policy]
  -[MNRouteRefreshPolicyRulesTimeToLeave init]
  -[MNRouteRefreshPolicyRulesTimeToLeave canMakeNetworkRequestsForDestination:atDate:]
  -[MNRouteRefreshPolicyRulesTimeToLeave timeIntervalForDestinationRefresh:lastUpdate:]
  -[MNRouteRefreshPolicyRulesTimeToLeave maxTimeIntervalFromNowForDestinationRefresh:fromDate:]
  -[MNRouteRefreshPolicyRulesTimeToLeave canWakeClientForUpdates]
  -[MNRouteRefreshPolicyRulesTimeToLeave canWakeDeviceForUpdates]
  -[MNRouteRefreshPolicyRulesTimeToLeave _timeIntervalToDestination:fromDate:]


_MNLPRPlateCharacter : NSObject
  // instance methods
  -[_MNLPRPlateCharacter .cxx_destruct]


_MNLPRPlate : NSObject
  // instance methods
  -[_MNLPRPlate .cxx_destruct]


MNLPRRuleMatcher : NSObject
  // instance methods
  -[MNLPRRuleMatcher .cxx_destruct]
  -[MNLPRRuleMatcher initForVehicle:withRules:]
  -[MNLPRRuleMatcher generateMaskedPlateForWaypoints:date:timeZone:error:]
  -[MNLPRRuleMatcher debug_jsonDescriptionOfLastPlate]


MNVehicleMonitor : NSObject
 @property  <MNVehicleMonitorDelegate> *delegate

  // instance methods
  -[MNVehicleMonitor startMonitoring]
  -[MNVehicleMonitor stopMonitoring]
  -[MNVehicleMonitor .cxx_destruct]
  -[MNVehicleMonitor setDelegate:]
  -[MNVehicleMonitor delegate]
  -[MNVehicleMonitor dealloc]


MNRouteUpdateFreshness : NSObject <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  double maxAge
 @property  double maxDisplacement
 @property  double minAccuracy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNRouteUpdateFreshness supportsSecureCoding]

  // instance methods
  -[MNRouteUpdateFreshness setMaxAge:]
  -[MNRouteUpdateFreshness initWithCoder:]
  -[MNRouteUpdateFreshness minAccuracy]
  -[MNRouteUpdateFreshness maxAge]
  -[MNRouteUpdateFreshness init]
  -[MNRouteUpdateFreshness jsonDictionary]
  -[MNRouteUpdateFreshness copyWithZone:]
  -[MNRouteUpdateFreshness encodeWithCoder:]
  -[MNRouteUpdateFreshness setMaxDisplacement:]
  -[MNRouteUpdateFreshness setMinAccuracy:]
  -[MNRouteUpdateFreshness maxDisplacement]


MNRouteUpdate : NSObject <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  CLLocation *origin
 @property  double travelTime
 @property  double aggressiveTravelTime
 @property  double conservativeTravelTime
 @property  NSArray *routes
 @property  NSArray *nonRecommendedRoutes
 @property  NSString *routeSummary
 @property  NSString *longRouteSummary
 @property  long long travelMode
 @property  NSDate *requestTime
 @property  NSString *requestingClientID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNRouteUpdate supportsSecureCoding]

  // instance methods
  -[MNRouteUpdate requestTime]
  -[MNRouteUpdate setRequestTime:]
  -[MNRouteUpdate routes]
  -[MNRouteUpdate initWithCoder:]
  -[MNRouteUpdate origin]
  -[MNRouteUpdate setOrigin:]
  -[MNRouteUpdate setTravelTime:]
  -[MNRouteUpdate setRouteSummary:]
  -[MNRouteUpdate .cxx_destruct]
  -[MNRouteUpdate travelTime]
  -[MNRouteUpdate conservativeTravelTime]
  -[MNRouteUpdate setAggressiveTravelTime:]
  -[MNRouteUpdate setConservativeTravelTime:]
  -[MNRouteUpdate init]
  -[MNRouteUpdate jsonDictionary]
  -[MNRouteUpdate isEqual:]
  -[MNRouteUpdate setRoutes:]
  -[MNRouteUpdate copyWithOptions:]
  -[MNRouteUpdate aggressiveTravelTime]
  -[MNRouteUpdate routeSummary]
  -[MNRouteUpdate copyWithZone:]
  -[MNRouteUpdate encodeWithCoder:]
  -[MNRouteUpdate setRequestingClientID:]
  -[MNRouteUpdate satisfiesOptions:]
  -[MNRouteUpdate satisfiesFreshness:fromLocation:]
  -[MNRouteUpdate requestingClientID]
  -[MNRouteUpdate longRouteSummary]
  -[MNRouteUpdate setLongRouteSummary:]
  -[MNRouteUpdate nonRecommendedRoutes]
  -[MNRouteUpdate setNonRecommendedRoutes:]
  -[MNRouteUpdate travelMode]
  -[MNRouteUpdate setTravelMode:]


MNTracePreparedStatement : NSObject
  // class methods
  +[MNTracePreparedStatement preparedStatementForTrace:statement:outError:]

  // instance methods
  -[MNTracePreparedStatement step]
  -[MNTracePreparedStatement finalize]
  -[MNTracePreparedStatement clearBindings]
  -[MNTracePreparedStatement init]
  -[MNTracePreparedStatement execute]
  -[MNTracePreparedStatement reset]
  -[MNTracePreparedStatement stepRow]
  -[MNTracePreparedStatement dealloc]
  -[MNTracePreparedStatement bind:string:]
  -[MNTracePreparedStatement bind:double:]
  -[MNTracePreparedStatement bind:int:]
  -[MNTracePreparedStatement bind:data:]
  -[MNTracePreparedStatement bindNull:]
  -[MNTracePreparedStatement _prepareStatementForTrace:statement:outError:]
  -[MNTracePreparedStatement initForTrace:statement:outError:]
  -[MNTracePreparedStatement columnInt:]
  -[MNTracePreparedStatement columnDouble:]
  -[MNTracePreparedStatement columnString:]
  -[MNTracePreparedStatement columnData:]


MNSteppingLocationTracker : MNLocationTracker <MNArrivalUpdaterDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSteppingLocationTracker transportType]
  -[MNSteppingLocationTracker stopTracking]
  -[MNSteppingLocationTracker .cxx_destruct]
  -[MNSteppingLocationTracker updateLocation:]
  -[MNSteppingLocationTracker startTracking]
  -[MNSteppingLocationTracker _matchedLocationForLocation:]
  -[MNSteppingLocationTracker initWithNavigationSession:]
  -[MNSteppingLocationTracker matchedLocationForLocation:]
  -[MNSteppingLocationTracker resetForTracePlayerAtLocation:]
  -[MNSteppingLocationTracker arrivalUpdaterDidArrive:atEndOfLegAtIndex:]


MNLocationProviderCLParameters : NSObject
 @property  long long activityType
 @property  BOOL fusionInfoEnabled

  // instance methods
  -[MNLocationProviderCLParameters fusionInfoEnabled]
  -[MNLocationProviderCLParameters setActivityType:]
  -[MNLocationProviderCLParameters setFusionInfoEnabled:]
  -[MNLocationProviderCLParameters activityType]


MNCoreLocationProvider : NSObject <CLLocationManagerDelegate, CLLocationManagerVehicleDelegate, MNLocationProvider>
 @property  CLLocationManager *_clLocationManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  BOOL isAuthorized
 @property  int headingOrientation
 @property  double expectedGpsUpdateInterval
 @property  BOOL coarseModeEnabled
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale

  // instance methods
  -[MNCoreLocationProvider locationManager:didExitRegion:]
  -[MNCoreLocationProvider isTracePlayer]
  -[MNCoreLocationProvider setMatchInfoEnabled:]
  -[MNCoreLocationProvider locationManager:didEnterRegion:]
  -[MNCoreLocationProvider locationManager:didUpdateHeading:]
  -[MNCoreLocationProvider locationManager:monitoringDidFailForRegion:withError:]
  -[MNCoreLocationProvider effectiveBundleIdentifier]
  -[MNCoreLocationProvider isAuthorized]
  -[MNCoreLocationProvider requestLocation]
  -[MNCoreLocationProvider startUpdatingLocation]
  -[MNCoreLocationProvider setEffectiveBundle:]
  -[MNCoreLocationProvider stopUpdatingHeading]
  -[MNCoreLocationProvider timeScale]
  -[MNCoreLocationProvider setDesiredAccuracy:]
  -[MNCoreLocationProvider _sharedInit]
  -[MNCoreLocationProvider initWithEffectiveBundleIdentifier:]
  -[MNCoreLocationProvider traceVersion]
  -[MNCoreLocationProvider _updateCoarseModeEnabled]
  -[MNCoreLocationProvider stopUpdatingVehicleSpeed]
  -[MNCoreLocationProvider startUpdatingVehicleSpeed]
  -[MNCoreLocationProvider setEffectiveBundleIdentifier:]
  -[MNCoreLocationProvider stopMonitoringForRegion:]
  -[MNCoreLocationProvider startUpdatingHeading]
  -[MNCoreLocationProvider stopUpdatingLocation]
  -[MNCoreLocationProvider startUpdatingVehicleHeading]
  -[MNCoreLocationProvider stopUpdatingVehicleHeading]
  -[MNCoreLocationProvider initWithEffectiveBundle:]
  -[MNCoreLocationProvider setDistanceFilter:]
  -[MNCoreLocationProvider headingOrientation]
  -[MNCoreLocationProvider locationManager:didUpdateVehicleSpeed:]
  -[MNCoreLocationProvider locationManagerDidResumeLocationUpdates:]
  -[MNCoreLocationProvider effectiveBundle]
  -[MNCoreLocationProvider startMonitoringForRegion:]
  -[MNCoreLocationProvider .cxx_destruct]
  -[MNCoreLocationProvider expectedGpsUpdateInterval]
  -[MNCoreLocationProvider setHeadingOrientation:]
  -[MNCoreLocationProvider locationManager:didFailWithError:]
  -[MNCoreLocationProvider locationManagerDidPauseLocationUpdates:]
  -[MNCoreLocationProvider setDelegate:]
  -[MNCoreLocationProvider _updateAuthorizationStatus]
  -[MNCoreLocationProvider init]
  -[MNCoreLocationProvider _resetForNewEffectiveBundle]
  -[MNCoreLocationProvider locationManagerDidChangeAuthorization:]
  -[MNCoreLocationProvider locationManager:didUpdateLocations:]
  -[MNCoreLocationProvider locationManager:didUpdateVehicleHeading:]
  -[MNCoreLocationProvider coarseModeEnabled]
  -[MNCoreLocationProvider _updateForCLParameters:]
  -[MNCoreLocationProvider delegate]
  -[MNCoreLocationProvider resetForActiveTileGroupChanged]
  -[MNCoreLocationProvider _clLocationManager]
  -[MNCoreLocationProvider dealloc]
  -[MNCoreLocationProvider _createCLLocationManager]
  -[MNCoreLocationProvider setCLParameters:]


MNRouteRefreshPolicyScheduler : NSObject <MNTimeballInternalProvider>
 @property  @? refreshCompletion
 @property  double tolerance
 @property  <MNRouteRefreshPolicySchedulerTimedActivity> *timedActivity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteRefreshPolicyScheduler setTolerance:]
  -[MNRouteRefreshPolicyScheduler tolerance]
  -[MNRouteRefreshPolicyScheduler .cxx_destruct]
  -[MNRouteRefreshPolicyScheduler init]
  -[MNRouteRefreshPolicyScheduler addObserver:]
  -[MNRouteRefreshPolicyScheduler dealloc]
  -[MNRouteRefreshPolicyScheduler removeObserver:]
  -[MNRouteRefreshPolicyScheduler scheduleUpdatesForDestination:options:policy:auditToken:]
  -[MNRouteRefreshPolicyScheduler unscheduleUpdateForDestination:]
  -[MNRouteRefreshPolicyScheduler _performDeferredRefresh]
  -[MNRouteRefreshPolicyScheduler _handleSchedulingUpdatesForDestination:options:policy:auditToken:]
  -[MNRouteRefreshPolicyScheduler _handleSchedulingThisDestinationAndRefreshAllDestinations:nextRefreshDate:]
  -[MNRouteRefreshPolicyScheduler _scheduleNextRefreshDateForDestination:routeUpdate:fromDate:completion:]
  -[MNRouteRefreshPolicyScheduler _refreshAllDestinationsAtDate:]
  -[MNRouteRefreshPolicyScheduler _deferRefreshForScheduledDestinationsAfter:]
  -[MNRouteRefreshPolicyScheduler _updateNextRefreshDate:destination:completion:]
  -[MNRouteRefreshPolicyScheduler _enterActiveWorkload]
  -[MNRouteRefreshPolicyScheduler _handleRefreshingCacheEntries:atDate:]
  -[MNRouteRefreshPolicyScheduler _leaveActiveWorkload]
  -[MNRouteRefreshPolicyScheduler _handleRefreshingCacheEntries:atDate:userLocation:]
  -[MNRouteRefreshPolicyScheduler _handleCompletionOfRefresh]
  -[MNRouteRefreshPolicyScheduler refreshCompletion]
  -[MNRouteRefreshPolicyScheduler _refreshPolicyForDestination:]
  -[MNRouteRefreshPolicyScheduler _timeIntervalForRefreshOfDestination:routeUpdate:atDate:]
  -[MNRouteRefreshPolicyScheduler _newActivityFromRefreshPolicyRules:]
  -[MNRouteRefreshPolicyScheduler timedActivity]
  -[MNRouteRefreshPolicyScheduler setTimedActivity:]
  -[MNRouteRefreshPolicyScheduler initWithRoutingProvider:cache:locationManager:]
  -[MNRouteRefreshPolicyScheduler refreshScheduledDestinations]
  -[MNRouteRefreshPolicyScheduler setRefreshCompletion:]


MNHapticResourceController : NSObject
 @property  <MNHapticControllerDelegate> *delegate
 @property  BOOL vibrating

  // instance methods
  -[MNHapticResourceController .cxx_destruct]
  -[MNHapticResourceController setDelegate:]
  -[MNHapticResourceController delegate]
  -[MNHapticResourceController stopVibrating]
  -[MNHapticResourceController triggerVibration]
  -[MNHapticResourceController vibrating]
  -[MNHapticResourceController playHapticSound:andReport:]


MNNavigationStateLowGuidance : MNNavigationStateGuidance
  // instance methods
  -[MNNavigationStateLowGuidance setGuidanceType:]
  -[MNNavigationStateLowGuidance type]
  -[MNNavigationStateLowGuidance postEnterState]


MNTrace : NSObject
 @property  ^{sqlite3=} db
 @property  NSObject<OS_dispatch_queue> *writeQueue
 @property  NSObject<OS_dispatch_group> *writeGroup
 @property  unsigned long version
 @property  unsigned long originalVersion
 @property  BOOL isSimulation
 @property  NSArray *locations
 @property  NSArray *directions
 @property  NSArray *etaUpdates
 @property  NSArray *headingData
 @property  NSArray *motionData
 @property  NSArray *vehicleHeadingData
 @property  NSArray *vehicleSpeedData
 @property  NSArray *evData
 @property  NSArray *navigationEvents
 @property  NSArray *annotatedUserBehavior
 @property  NSArray *annotatedUserEnvironments
 @property  NSArray *bookmarks
 @property  NSArray *bookmarkImages
 @property  NSDictionary *miscInfo
 @property  NSString *tracePath
 @property  int mainTransportType

  // instance methods
  -[MNTrace setLocations:]
  -[MNTrace .cxx_destruct]
  -[MNTrace directions]
  -[MNTrace isSimulation]
  -[MNTrace setIsSimulation:]
  -[MNTrace evData]
  -[MNTrace init]
  -[MNTrace locations]
  -[MNTrace setVersion:]
  -[MNTrace setDirections:]
  -[MNTrace mainTransportType]
  -[MNTrace db]
  -[MNTrace version]
  -[MNTrace dealloc]
  -[MNTrace tracePath]
  -[MNTrace bookmarks]
  -[MNTrace miscInfo]
  -[MNTrace setBookmarks:]
  -[MNTrace writeQueue]
  -[MNTrace startWritingTraceToPath:]
  -[MNTrace writeGroup]
  -[MNTrace prepareStatement:outError:]
  -[MNTrace closeTrace]
  -[MNTrace serializableBookmarks]
  -[MNTrace originalVersion]
  -[MNTrace _handleOpenErrorWithPath:]
  -[MNTrace openTrace:outError:]
  -[MNTrace bookmarkImages]
  -[MNTrace setOriginalVersion:]
  -[MNTrace etaUpdates]
  -[MNTrace setEtaUpdates:]
  -[MNTrace headingData]
  -[MNTrace setHeadingData:]
  -[MNTrace motionData]
  -[MNTrace setMotionData:]
  -[MNTrace vehicleHeadingData]
  -[MNTrace setVehicleHeadingData:]
  -[MNTrace vehicleSpeedData]
  -[MNTrace setVehicleSpeedData:]
  -[MNTrace setEvData:]
  -[MNTrace annotatedUserBehavior]
  -[MNTrace setAnnotatedUserBehavior:]
  -[MNTrace annotatedUserEnvironments]
  -[MNTrace setAnnotatedUserEnvironments:]
  -[MNTrace setMiscInfo:]
  -[MNTrace navigationEvents]
  -[MNTrace setNavigationEvents:]
  -[MNTrace setBookmarkImages:]


MNTraceLocationRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double timestamp
 @property  MNLocation *location
 @property  NSError *error
 @property  MNLocationMatchInfo *matchInfo
 @property  {?=dd} correctedCoordinate
 @property  double correctedCourse
 @property  long long locationEventType
 @property  unsigned long originalMatchType

  // instance methods
  -[MNTraceLocationRow .cxx_destruct]
  -[MNTraceLocationRow setLocation:]
  -[MNTraceLocationRow setMatchInfo:]
  -[MNTraceLocationRow correctedCoordinate]
  -[MNTraceLocationRow matchInfo]
  -[MNTraceLocationRow location]
  -[MNTraceLocationRow timestamp]
  -[MNTraceLocationRow setCorrectedCoordinate:]
  -[MNTraceLocationRow setTimestamp:]
  -[MNTraceLocationRow setError:]
  -[MNTraceLocationRow error]
  -[MNTraceLocationRow position]
  -[MNTraceLocationRow locationEventType]
  -[MNTraceLocationRow setLocationEventType:]
  -[MNTraceLocationRow correctedCourse]
  -[MNTraceLocationRow setCorrectedCourse:]
  -[MNTraceLocationRow originalMatchType]
  -[MNTraceLocationRow setOriginalMatchType:]


MNTraceDirectionsRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double requestTimestamp
 @property  double responseTimestamp
 @property  GEODirectionsRequest *request
 @property  GEODirectionsResponse *response
 @property  NSError *error
 @property  NSArray *waypoints
 @property  unsigned long selectedRouteIndex

  // instance methods
  -[MNTraceDirectionsRow waypoints]
  -[MNTraceDirectionsRow setRequest:]
  -[MNTraceDirectionsRow .cxx_destruct]
  -[MNTraceDirectionsRow request]
  -[MNTraceDirectionsRow setSelectedRouteIndex:]
  -[MNTraceDirectionsRow selectedRouteIndex]
  -[MNTraceDirectionsRow response]
  -[MNTraceDirectionsRow setWaypoints:]
  -[MNTraceDirectionsRow setError:]
  -[MNTraceDirectionsRow error]
  -[MNTraceDirectionsRow position]
  -[MNTraceDirectionsRow setResponse:]
  -[MNTraceDirectionsRow responseTimestamp]
  -[MNTraceDirectionsRow requestTimestamp]
  -[MNTraceDirectionsRow setRequestTimestamp:]
  -[MNTraceDirectionsRow setResponseTimestamp:]


MNTraceETAUpdateRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double requestTimestamp
 @property  double responseTimestamp
 @property  GEOETATrafficUpdateRequest *request
 @property  GEOETATrafficUpdateResponse *response
 @property  NSError *error

  // instance methods
  -[MNTraceETAUpdateRow setRequest:]
  -[MNTraceETAUpdateRow .cxx_destruct]
  -[MNTraceETAUpdateRow request]
  -[MNTraceETAUpdateRow response]
  -[MNTraceETAUpdateRow setError:]
  -[MNTraceETAUpdateRow error]
  -[MNTraceETAUpdateRow position]
  -[MNTraceETAUpdateRow setResponse:]
  -[MNTraceETAUpdateRow responseTimestamp]
  -[MNTraceETAUpdateRow requestTimestamp]
  -[MNTraceETAUpdateRow setRequestTimestamp:]
  -[MNTraceETAUpdateRow setResponseTimestamp:]


MNTraceHeadingDataRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double timestamp
 @property  double trueHeading
 @property  double magneticHeading
 @property  double headingAccuracy

  // instance methods
  -[MNTraceHeadingDataRow setHeadingAccuracy:]
  -[MNTraceHeadingDataRow headingAccuracy]
  -[MNTraceHeadingDataRow trueHeading]
  -[MNTraceHeadingDataRow magneticHeading]
  -[MNTraceHeadingDataRow timestamp]
  -[MNTraceHeadingDataRow setTimestamp:]
  -[MNTraceHeadingDataRow position]
  -[MNTraceHeadingDataRow setTrueHeading:]
  -[MNTraceHeadingDataRow setMagneticHeading:]


MNTraceMotionDataRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double timestamp
 @property  unsigned long motionType
 @property  unsigned long exitType
 @property  unsigned long confidence

  // instance methods
  -[MNTraceMotionDataRow motionType]
  -[MNTraceMotionDataRow setConfidence:]
  -[MNTraceMotionDataRow setExitType:]
  -[MNTraceMotionDataRow setMotionType:]
  -[MNTraceMotionDataRow confidence]
  -[MNTraceMotionDataRow exitType]
  -[MNTraceMotionDataRow timestamp]
  -[MNTraceMotionDataRow setTimestamp:]
  -[MNTraceMotionDataRow position]


MNTraceVehicleHeadingRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double timestamp
 @property  double vehicleHeading

  // instance methods
  -[MNTraceVehicleHeadingRow timestamp]
  -[MNTraceVehicleHeadingRow setTimestamp:]
  -[MNTraceVehicleHeadingRow position]
  -[MNTraceVehicleHeadingRow vehicleHeading]
  -[MNTraceVehicleHeadingRow setVehicleHeading:]


MNTraceVehicleSpeedRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double timestamp
 @property  double vehicleSpeed

  // instance methods
  -[MNTraceVehicleSpeedRow vehicleSpeed]
  -[MNTraceVehicleSpeedRow timestamp]
  -[MNTraceVehicleSpeedRow setTimestamp:]
  -[MNTraceVehicleSpeedRow setVehicleSpeed:]
  -[MNTraceVehicleSpeedRow position]


MNTraceEVDataRow : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double timestamp
 @property  VGVehicle *vehicle

  // instance methods
  -[MNTraceEVDataRow vehicle]
  -[MNTraceEVDataRow setVehicle:]
  -[MNTraceEVDataRow .cxx_destruct]
  -[MNTraceEVDataRow timestamp]
  -[MNTraceEVDataRow setTimestamp:]
  -[MNTraceEVDataRow position]


MNTraceNavigationEventRow : NSObject
 @property  double relativeTimestamp
 @property  NSDate *date
 @property  unsigned long locationID
 @property  long long eventType
 @property  NSString *eventName
 @property  NSString *eventDescription
 @property  NSString *speakableEventDescription

  // instance methods
  -[MNTraceNavigationEventRow relativeTimestamp]
  -[MNTraceNavigationEventRow setRelativeTimestamp:]
  -[MNTraceNavigationEventRow .cxx_destruct]
  -[MNTraceNavigationEventRow eventName]
  -[MNTraceNavigationEventRow locationID]
  -[MNTraceNavigationEventRow setLocationID:]
  -[MNTraceNavigationEventRow setEventName:]
  -[MNTraceNavigationEventRow setDate:]
  -[MNTraceNavigationEventRow eventType]
  -[MNTraceNavigationEventRow setEventType:]
  -[MNTraceNavigationEventRow date]
  -[MNTraceNavigationEventRow eventDescription]
  -[MNTraceNavigationEventRow setEventDescription:]
  -[MNTraceNavigationEventRow speakableEventDescription]
  -[MNTraceNavigationEventRow setSpeakableEventDescription:]


MNTraceAnnotatedUserBehaviorRow : NSObject
 @property  double timestamp
 @property  long long event

  // instance methods
  -[MNTraceAnnotatedUserBehaviorRow setEvent:]
  -[MNTraceAnnotatedUserBehaviorRow timestamp]
  -[MNTraceAnnotatedUserBehaviorRow setTimestamp:]
  -[MNTraceAnnotatedUserBehaviorRow event]


MNTraceAnnotatedUserEnvironmentRow : NSObject
 @property  double startTimestamp
 @property  double endTimestamp
 @property  long long environmentType

  // instance methods
  -[MNTraceAnnotatedUserEnvironmentRow setEndTimestamp:]
  -[MNTraceAnnotatedUserEnvironmentRow endTimestamp]
  -[MNTraceAnnotatedUserEnvironmentRow startTimestamp]
  -[MNTraceAnnotatedUserEnvironmentRow setStartTimestamp:]
  -[MNTraceAnnotatedUserEnvironmentRow setEnvironmentType:]
  -[MNTraceAnnotatedUserEnvironmentRow environmentType]


MNTraceMiscInfo : NSObject
 @property  NSString *key
 @property  long long intValue
 @property  double doubleValue
 @property  NSString *stringValue

  // instance methods
  -[MNTraceMiscInfo stringValue]
  -[MNTraceMiscInfo setDoubleValue:]
  -[MNTraceMiscInfo setKey:]
  -[MNTraceMiscInfo setStringValue:]
  -[MNTraceMiscInfo doubleValue]
  -[MNTraceMiscInfo setIntValue:]
  -[MNTraceMiscInfo .cxx_destruct]
  -[MNTraceMiscInfo intValue]
  -[MNTraceMiscInfo key]


_MNJunctionViewPreloadEvent : NSObject
 @property  GEOComposedGuidanceEvent *junctionViewEvent
 @property  BOOL needsPreload

  // instance methods
  -[_MNJunctionViewPreloadEvent .cxx_destruct]
  -[_MNJunctionViewPreloadEvent junctionViewEvent]
  -[_MNJunctionViewPreloadEvent setJunctionViewEvent:]
  -[_MNJunctionViewPreloadEvent needsPreload]
  -[_MNJunctionViewPreloadEvent setNeedsPreload:]


MNJunctionViewImageLoader : NSObject
  // instance methods
  -[MNJunctionViewImageLoader setJunctionViewImageWidth:height:]
  -[MNJunctionViewImageLoader .cxx_destruct]
  -[MNJunctionViewImageLoader init]
  -[MNJunctionViewImageLoader _stringForImageIDs:]
  -[MNJunctionViewImageLoader imagesForJunctionView:eventID:handler:]
  -[MNJunctionViewImageLoader _imagesForIDs:handler:]
  -[MNJunctionViewImageLoader _imagesForRequest:response:]
  -[MNJunctionViewImageLoader setJunctionViewEvents:]
  -[MNJunctionViewImageLoader updateForLocation:remainingDistanceOnRoute:]


MNAudioSystemOptions : NSObject <NSCopying>
 @property  unsigned long drivingVoiceGuidanceLevel
 @property  unsigned long walkingVoiceGuidanceLevel
 @property  unsigned long cyclingVoiceGuidanceLevel
 @property  BOOL useHFP
 @property  BOOL pauseSpokenAudio
 @property  BOOL chimeBeforeInstruction
 @property  BOOL muteSpeechOverride

  // instance methods
  -[MNAudioSystemOptions muteSpeechOverride]
  -[MNAudioSystemOptions cyclingVoiceGuidanceLevel]
  -[MNAudioSystemOptions walkingVoiceGuidanceLevel]
  -[MNAudioSystemOptions drivingVoiceGuidanceLevel]
  -[MNAudioSystemOptions pauseSpokenAudio]
  -[MNAudioSystemOptions chimeBeforeInstruction]
  -[MNAudioSystemOptions useHFP]
  -[MNAudioSystemOptions copyWithZone:]
  -[MNAudioSystemOptions initWithDrivingVoiceGuidanceLevel:andWalkingVoiceGuidanceLevel:andCyclingVoiceGuidanceLevel:andUseHFP:andPauseSpokenAudio:andChimeBeforeInstruction:andMuteSpeechOverride:]


MNTimeballCacheEntry : NSObject <MNJSONOutput>
 @property  MNRouteUpdate *routeUpdate
 @property  MNPlannedDestination *destination
 @property  NSDate *lastUpdate
 @property  NSDate *nextUpdate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTimeballCacheEntry setDestination:]
  -[MNTimeballCacheEntry setLastUpdate:]
  -[MNTimeballCacheEntry .cxx_destruct]
  -[MNTimeballCacheEntry destination]
  -[MNTimeballCacheEntry lastUpdate]
  -[MNTimeballCacheEntry jsonDictionary]
  -[MNTimeballCacheEntry routeUpdate]
  -[MNTimeballCacheEntry setRouteUpdate:]
  -[MNTimeballCacheEntry nextUpdate]
  -[MNTimeballCacheEntry setNextUpdate:]


MNTimeballCache : NSObject
  // instance methods
  -[MNTimeballCache .cxx_destruct]
  -[MNTimeballCache initWithDBFilePath:]
  -[MNTimeballCache dealloc]
  -[MNTimeballCache pruneCache:]
  -[MNTimeballCache clearCache:]
  -[MNTimeballCache setRouteUpdate:forDestination:completionBlock:]
  -[MNTimeballCache getEntriesUpdatedAfter:entryBlock:completionBlock:]
  -[MNTimeballCache getEntryForDestination:completionBlock:]
  -[MNTimeballCache setNextRefreshDate:forDestination:completionBlock:]
  -[MNTimeballCache getEntriesScheduledForRefreshAfter:entryBlock:completionBlock:]
  -[MNTimeballCache _setupDBWithDrop:]
  -[MNTimeballCache _errorBlockWithCompletionBlock:]
  -[MNTimeballCache _handleResult:forStatement:error:completionBlock:]
  -[MNTimeballCache deleteRouteUpdateForDestination:completionBlock:]


MNRouteProximitySensor : NSObject
 @property  GEOLocation *location
 @property  double proximityThreshold
 @property  GEOComposedRoute *route
 @property  GEOLocation *closestPointOnRoute
 @property  GEOComposedRouteStep *closestStepOnRoute
 @property  double courseOnRoute
 @property  double distanceFromOrigin
 @property  double distanceFromRoute
 @property  double distanceFromDestination
 @property  double remainingTimeOnRoute
 @property  unsigned long proximity

  // instance methods
  -[MNRouteProximitySensor route]
  -[MNRouteProximitySensor updateForLocation:]
  -[MNRouteProximitySensor distanceFromOrigin]
  -[MNRouteProximitySensor .cxx_destruct]
  -[MNRouteProximitySensor distanceFromRoute]
  -[MNRouteProximitySensor distanceFromDestination]
  -[MNRouteProximitySensor init]
  -[MNRouteProximitySensor location]
  -[MNRouteProximitySensor initWithRoute:]
  -[MNRouteProximitySensor proximity]
  -[MNRouteProximitySensor _updateRouteMatch]
  -[MNRouteProximitySensor _updateProximity]
  -[MNRouteProximitySensor closestPointOnRoute]
  -[MNRouteProximitySensor closestStepOnRoute]
  -[MNRouteProximitySensor courseOnRoute]
  -[MNRouteProximitySensor remainingTimeOnRoute]
  -[MNRouteProximitySensor proximityThreshold]
  -[MNRouteProximitySensor setProximityThreshold:]


MNTrafficIncidentAlertUpdater : NSObject
 @property  <MNTrafficIncidentAlertUpdaterDelegate> *delegate

  // instance methods
  -[MNTrafficIncidentAlertUpdater updateForLocation:]
  -[MNTrafficIncidentAlertUpdater .cxx_destruct]
  -[MNTrafficIncidentAlertUpdater setDelegate:]
  -[MNTrafficIncidentAlertUpdater delegate]
  -[MNTrafficIncidentAlertUpdater dealloc]
  -[MNTrafficIncidentAlertUpdater clearAlerts]
  -[MNTrafficIncidentAlertUpdater updatePreviousIncidentResultForRequest:]
  -[MNTrafficIncidentAlertUpdater updateForAlertFromResponse:]
  -[MNTrafficIncidentAlertUpdater updateForReroute:]
  -[MNTrafficIncidentAlertUpdater _activateAlertForLocation:]
  -[MNTrafficIncidentAlertUpdater _alertRetryTimerFired:]
  -[MNTrafficIncidentAlertUpdater _removeActiveAlert]
  -[MNTrafficIncidentAlertUpdater _updateAlertDistanceAndETA:]
  -[MNTrafficIncidentAlertUpdater _updateRerouteProposalStatusForRequest:]
  -[MNTrafficIncidentAlertUpdater _updatePreviousDisplayedBannerForRequest:]


MNCompanionNavigationAdapter : NSObject <MNNavigationServiceObserver, MNNavigationSessionObserver>
 @property  <MNCompanionNavigationDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCompanionNavigationAdapter setIsConnectedToCarplay:]
  -[MNCompanionNavigationAdapter _isInvalidated]
  -[MNCompanionNavigationAdapter _reset]
  -[MNCompanionNavigationAdapter .cxx_destruct]
  -[MNCompanionNavigationAdapter _setRouteMatch:]
  -[MNCompanionNavigationAdapter setDelegate:]
  -[MNCompanionNavigationAdapter init]
  -[MNCompanionNavigationAdapter initWithDelegate:]
  -[MNCompanionNavigationAdapter setIsNavigatingInLowGuidance:]
  -[MNCompanionNavigationAdapter delegate]
  -[MNCompanionNavigationAdapter dealloc]
  -[MNCompanionNavigationAdapter invalidate]
  -[MNCompanionNavigationAdapter navigationSession:didChangeNavigationState:]
  -[MNCompanionNavigationAdapter navigationSession:didUpdateMatchedLocation:]
  -[MNCompanionNavigationAdapter navigationSession:matchedToStepIndex:segmentIndex:]
  -[MNCompanionNavigationAdapter navigationSession:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNCompanionNavigationAdapter navigationSession:didUpdateDisplayETA:remainingDistance:]
  -[MNCompanionNavigationAdapter navigationSessionWillReroute:]
  -[MNCompanionNavigationAdapter navigationSessionDidCancelReroute:]
  -[MNCompanionNavigationAdapter navigationSession:didReroute:withLocation:withAlternateRoutes:rerouteReason:]
  -[MNCompanionNavigationAdapter navigationSession:didUpdateDestination:]
  -[MNCompanionNavigationAdapter navigationSession:willAnnounce:inSeconds:]
  -[MNCompanionNavigationAdapter navigationSession:triggerHaptics:]
  -[MNCompanionNavigationAdapter navigationSession:displayManeuverAlertForAnnouncementStage:]
  -[MNCompanionNavigationAdapter navigationSession:didEnableGuidancePrompts:]
  -[MNCompanionNavigationAdapter initWithNavigationSession:]
  -[MNCompanionNavigationAdapter navigationService:didChangeFromState:toState:]
  -[MNCompanionNavigationAdapter navigationServiceDidSynchronize:]
  -[MNCompanionNavigationAdapter navigationService:didChangeNavigationState:]
  -[MNCompanionNavigationAdapter navigationService:didUpdateMatchedLocation:]
  -[MNCompanionNavigationAdapter navigationService:didUpdateStepIndex:segmentIndex:]
  -[MNCompanionNavigationAdapter navigationService:didUpdateDisplayedStepIndex:segmentIndex:]
  -[MNCompanionNavigationAdapter navigationService:updateSignsWithInfo:]
  -[MNCompanionNavigationAdapter navigationService:willAnnounce:inSeconds:]
  -[MNCompanionNavigationAdapter navigationService:didEnableGuidancePrompts:]
  -[MNCompanionNavigationAdapter navigationService:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNCompanionNavigationAdapter navigationService:displayManeuverAlertForAnnouncementStage:]
  -[MNCompanionNavigationAdapter navigationService:didUpdateDisplayETA:remainingDistance:]
  -[MNCompanionNavigationAdapter navigationServiceWillReroute:]
  -[MNCompanionNavigationAdapter navigationService:didReroute:]
  -[MNCompanionNavigationAdapter navigationServiceDidCancelReroute:]
  -[MNCompanionNavigationAdapter navigationService:didSwitchToNewTransportType:newRoute:traffic:]
  -[MNCompanionNavigationAdapter navigationService:triggerHaptics:]
  -[MNCompanionNavigationAdapter navigationService:didReceiveRealtimeUpdates:]
  -[MNCompanionNavigationAdapter navigationService:didReceiveTransitAlert:]
  -[MNCompanionNavigationAdapter _setRoute:traffic:isTrace:]
  -[MNCompanionNavigationAdapter _cancelScheduledRouteStatus]
  -[MNCompanionNavigationAdapter _cancelScheduledRouteUpdates]
  -[MNCompanionNavigationAdapter _scheduleCoalescedRouteStatusUpdate]
  -[MNCompanionNavigationAdapter _updateCompanionRouteStatus]
  -[MNCompanionNavigationAdapter _scheduleCoalescedRouteUpdates]
  -[MNCompanionNavigationAdapter _sendRouteStatus]
  -[MNCompanionNavigationAdapter _sendRouteUpdates]
  -[MNCompanionNavigationAdapter _sendRouteDetailsAndStatus]
  -[MNCompanionNavigationAdapter _markCurrentHapticsAsTriggered]
  -[MNCompanionNavigationAdapter _setNavigationState:]
  -[MNCompanionNavigationAdapter _setLastLocation:]
  -[MNCompanionNavigationAdapter _setDisplayedStepIndex:]
  -[MNCompanionNavigationAdapter _setPositionFromDestination:]
  -[MNCompanionNavigationAdapter _setDestinationName:]
  -[MNCompanionNavigationAdapter _setPositionFromManeuver:]
  -[MNCompanionNavigationAdapter _setNextAnnouncementStage:timeUntilNextAnnouncement:]
  -[MNCompanionNavigationAdapter _triggerHaptics:]
  -[MNCompanionNavigationAdapter _setAnnouncementStage:]
  -[MNCompanionNavigationAdapter _setGuidancePromptsEnabled:]
  -[MNCompanionNavigationAdapter _handleNavigationServiceStopped]
  -[MNCompanionNavigationAdapter _reloadRouteFromNavigationService:]
  -[MNCompanionNavigationAdapter _setRealtimeUpdates:]
  -[MNCompanionNavigationAdapter _setTransitAlightMessage:]
  -[MNCompanionNavigationAdapter setVoiceGuidance:]
  -[MNCompanionNavigationAdapter _setLocationUnreliable:]


MNCompanionNavigationXPCConnection : NSObject <MNCompanionNavigationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCompanionNavigationXPCConnection _stop]
  -[MNCompanionNavigationXPCConnection _closeConnection]
  -[MNCompanionNavigationXPCConnection .cxx_destruct]
  -[MNCompanionNavigationXPCConnection _openConnection]
  -[MNCompanionNavigationXPCConnection init]
  -[MNCompanionNavigationXPCConnection dealloc]
  -[MNCompanionNavigationXPCConnection updateNavigationRouteDetails:routeStatus:]
  -[MNCompanionNavigationXPCConnection updateNavigationRouteStatus:]
  -[MNCompanionNavigationXPCConnection updateNavigationRouteWithUpdate:]
  -[MNCompanionNavigationXPCConnection _resendRouteDetailsAndStatus]
  -[MNCompanionNavigationXPCConnection _connectionWasInterrupted]
  -[MNCompanionNavigationXPCConnection _connectionWasInvalidated]


MNTimeballLocationRequest : NSObject
 @property  double desiredAccuracy
 @property  unsigned long attemptCount
 @property  unsigned long maxAttempts
 @property  NSDate *requestDate
 @property  double timeoutInterval
 @property  @? completionBlock

  // class methods
  +[MNTimeballLocationRequest requestWithAccuracy:maxAttempts:timeoutInterval:completionBlock:]

  // instance methods
  -[MNTimeballLocationRequest setRequestDate:]
  -[MNTimeballLocationRequest desiredAccuracy]
  -[MNTimeballLocationRequest setDesiredAccuracy:]
  -[MNTimeballLocationRequest requestDate]
  -[MNTimeballLocationRequest .cxx_destruct]
  -[MNTimeballLocationRequest init]
  -[MNTimeballLocationRequest setAttemptCount:]
  -[MNTimeballLocationRequest timeoutInterval]
  -[MNTimeballLocationRequest completionBlock]
  -[MNTimeballLocationRequest attemptCount]
  -[MNTimeballLocationRequest setCompletionBlock:]
  -[MNTimeballLocationRequest setMaxAttempts:]
  -[MNTimeballLocationRequest maxAttempts]
  -[MNTimeballLocationRequest setTimeoutInterval:]


MNTimeballLocationManager : NSObject <CLLocationManagerDelegate>
 @property  CLLocation *lastLocation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimeballLocationManager setLocationProviderClass:]

  // instance methods
  -[MNTimeballLocationManager lastLocation]
  -[MNTimeballLocationManager .cxx_destruct]
  -[MNTimeballLocationManager locationProvider]
  -[MNTimeballLocationManager locationManager:didFailWithError:]
  -[MNTimeballLocationManager _processPendingRequests]
  -[MNTimeballLocationManager init]
  -[MNTimeballLocationManager _processError:]
  -[MNTimeballLocationManager locationManager:didUpdateLocations:]
  -[MNTimeballLocationManager _processLocation:]
  -[MNTimeballLocationManager dealloc]
  -[MNTimeballLocationManager _addRequest:]
  -[MNTimeballLocationManager getLocationWithAccuracy:maxAttempts:timeoutInterval:completion:]
  -[MNTimeballLocationManager _setupLocationProvider]
  -[MNTimeballLocationManager _requestTimedOut:]
  -[MNTimeballLocationManager _removeRequest:]


MNRouteRefreshPolicyRulesForeground : NSObject <MNRouteRefreshPolicyRules>
 @property  unsigned long policy
 @property  BOOL canWakeClientForUpdates
 @property  BOOL canWakeDeviceForUpdates
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteRefreshPolicyRulesForeground policy]
  -[MNRouteRefreshPolicyRulesForeground init]
  -[MNRouteRefreshPolicyRulesForeground canMakeNetworkRequestsForDestination:atDate:]
  -[MNRouteRefreshPolicyRulesForeground timeIntervalForDestinationRefresh:lastUpdate:]
  -[MNRouteRefreshPolicyRulesForeground maxTimeIntervalFromNowForDestinationRefresh:fromDate:]
  -[MNRouteRefreshPolicyRulesForeground canWakeClientForUpdates]
  -[MNRouteRefreshPolicyRulesForeground canWakeDeviceForUpdates]


MNUserOptionsEngine : NSObject
 @property  NSString *currentVoiceLanguage
 @property  MNUserOptions *options

  // class methods
  +[MNUserOptionsEngine sharedInstance]

  // instance methods
  -[MNUserOptionsEngine currentVoiceLanguage]
  -[MNUserOptionsEngine localizedStringForKey:]
  -[MNUserOptionsEngine options]
  -[MNUserOptionsEngine .cxx_destruct]
  -[MNUserOptionsEngine _updateSpokenBundle]
  -[MNUserOptionsEngine init]
  -[MNUserOptionsEngine addObserver:]
  -[MNUserOptionsEngine update:]
  -[MNUserOptionsEngine updateNavigationSessionLanguage:]
  -[MNUserOptionsEngine removeObserver:]


MNDirectionsRequestManager : NSObject
  // instance methods
  -[MNDirectionsRequestManager .cxx_destruct]
  -[MNDirectionsRequestManager init]
  -[MNDirectionsRequestManager cancelDirectionsRequestWithIdentifier:]
  -[MNDirectionsRequestManager _requestDirectionsFromTraceWithPath:feedback:auditToken:finishedHandler:]
  -[MNDirectionsRequestManager _requestServerDirections:preferredRoute:withIdentifier:auditToken:finishedHandler:]
  -[MNDirectionsRequestManager _logRoutes:error:]
  -[MNDirectionsRequestManager requestDirections:withIdentifier:auditToken:finishedHandler:]


MNSignInstructionContents : MNListInstructionContents <MNInstructionContents>
 @property  NSArray *mergeFormats
 @property  NSArray *continueFormats
 @property  NSArray *maneuverFormats
 @property  long long context
 @property  BOOL suppressNames
 @property  NSString *roadName
 @property  BOOL hasServerContent
 @property  BOOL suppressFallback

  // class methods
  +[MNSignInstructionContents contentsWithStep:destination:]

  // instance methods
  -[MNSignInstructionContents .cxx_destruct]
  -[MNSignInstructionContents context]
  -[MNSignInstructionContents _populateFromStep:]
  -[MNSignInstructionContents setMergeFormats:]
  -[MNSignInstructionContents setContinueFormats:]
  -[MNSignInstructionContents setManeuverFormats:]
  -[MNSignInstructionContents maneuverFormats]
  -[MNSignInstructionContents _instructionsForFormats:]
  -[MNSignInstructionContents mergeFormats]
  -[MNSignInstructionContents continueFormats]
  -[MNSignInstructionContents instructionWithShorterAlternatives]
  -[MNSignInstructionContents instructionForStage:distance:]
  -[MNSignInstructionContents hasServerContent]


MNTurnByTurnLocationTracker : MNLocationTracker <MNArrivalUpdaterDelegate, MNEVChargingStateMonitorDelegate>
 @property  NSData *serverSessionState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTurnByTurnLocationTracker forceReroute]
  -[MNTurnByTurnLocationTracker stopTracking]
  -[MNTurnByTurnLocationTracker .cxx_destruct]
  -[MNTurnByTurnLocationTracker updateLocation:]
  -[MNTurnByTurnLocationTracker dealloc]
  -[MNTurnByTurnLocationTracker startTracking]
  -[MNTurnByTurnLocationTracker _matchedLocationForLocation:]
  -[MNTurnByTurnLocationTracker initWithNavigationSession:]
  -[MNTurnByTurnLocationTracker isRerouting]
  -[MNTurnByTurnLocationTracker updateDestination:finishedHandler:]
  -[MNTurnByTurnLocationTracker reroute:reason:]
  -[MNTurnByTurnLocationTracker _setIsNavigatingInLowGuidance:]
  -[MNTurnByTurnLocationTracker traceJumpedInTime]
  -[MNTurnByTurnLocationTracker forceOnRoute:atLocation:]
  -[MNTurnByTurnLocationTracker evChargingStateMonitorShouldShowChargingInfo:]
  -[MNTurnByTurnLocationTracker evChargingStateMonitor:didChangeChargingState:]
  -[MNTurnByTurnLocationTracker evChargingStateMonitor:didReachTargetBatteryCharge:]
  -[MNTurnByTurnLocationTracker _updateForArrivalAtLegIndex:]
  -[MNTurnByTurnLocationTracker setServerSessionState:]
  -[MNTurnByTurnLocationTracker serverSessionState]
  -[MNTurnByTurnLocationTracker _newMapMatcherForRoute:]
  -[MNTurnByTurnLocationTracker _overrideLocationForLocation:]
  -[MNTurnByTurnLocationTracker _updateForLocation:]
  -[MNTurnByTurnLocationTracker _updateForReroute:rerouteReason:request:response:]
  -[MNTurnByTurnLocationTracker _detectedMotionForLocation:]
  -[MNTurnByTurnLocationTracker _allowSwitchToTransportType:forLocation:]
  -[MNTurnByTurnLocationTracker _alternateRouteForOffRouteLocation:]
  -[MNTurnByTurnLocationTracker arrivalUpdater:isApproachingEndOfLegAtIndex:]
  -[MNTurnByTurnLocationTracker arrivalUpdater:didArriveAtEndOfLegAtIndex:]
  -[MNTurnByTurnLocationTracker arrivalUpdater:didEnterPreArrivalStateForLegIndex:]
  -[MNTurnByTurnLocationTracker arrivalUpdaterDidTimeoutInArrivalRegion:]
  -[MNTurnByTurnLocationTracker _reroute:rerouteReason:request:response:]
  -[MNTurnByTurnLocationTracker _requestDirectionsForLocation:destination:transportType:handler:]
  -[MNTurnByTurnLocationTracker _allowRerouteForLocation:outError:]
  -[MNTurnByTurnLocationTracker _isRoadFeatureInOppositeDirection:ofCoordinate:course:]
  -[MNTurnByTurnLocationTracker _shouldAdvanceGuidanceToRouteMatch:]
  -[MNTurnByTurnLocationTracker _routeHintTypeForTransportType:]
  -[MNTurnByTurnLocationTracker _isCameraTestMode]
  -[MNTurnByTurnLocationTracker _failedToRecalculateRouteWithError:]
  -[MNTurnByTurnLocationTracker _rerouteTicketForLocation:transportType:]
  -[MNTurnByTurnLocationTracker _ticketForNewDestination:fromLocation:transportType:]
  -[MNTurnByTurnLocationTracker _submitRerouteTicketWithHandler:]
  -[MNTurnByTurnLocationTracker _matchedLocationForMatchResult:originalLocation:]
  -[MNTurnByTurnLocationTracker _handleOffRouteForLocation:]
  -[MNTurnByTurnLocationTracker _retryLastRouteRecalculation]
  -[MNTurnByTurnLocationTracker _recalculationRetryTimerFired:]
  -[MNTurnByTurnLocationTracker _sendRouteHintForLocation:]
  -[MNTurnByTurnLocationTracker _hasArrivedAtFinalDestination]
  -[MNTurnByTurnLocationTracker _updateStateForLocation:]
  -[MNTurnByTurnLocationTracker _updateSwitchTransportTypeForLocation:]
  -[MNTurnByTurnLocationTracker _updateForDepartureAtLegIndex:]
  -[MNTurnByTurnLocationTracker _startMonitoringBatteryChargeForLegIndex:]
  -[MNTurnByTurnLocationTracker initForTestingWithRoute:]


MNTracePlayerScheduler : NSObject
 @property  <MNTracePlayerSchedulerDelegate> *delegate
 @property  double speedMultiplier
 @property  double position

  // instance methods
  -[MNTracePlayerScheduler .cxx_destruct]
  -[MNTracePlayerScheduler setDelegate:]
  -[MNTracePlayerScheduler init]
  -[MNTracePlayerScheduler _update]
  -[MNTracePlayerScheduler pause]
  -[MNTracePlayerScheduler delegate]
  -[MNTracePlayerScheduler resume]
  -[MNTracePlayerScheduler dealloc]
  -[MNTracePlayerScheduler setPosition:]
  -[MNTracePlayerScheduler position]
  -[MNTracePlayerScheduler setSpeedMultiplier:]
  -[MNTracePlayerScheduler speedMultiplier]
  -[MNTracePlayerScheduler _timerUpdated:]
  -[MNTracePlayerScheduler addTimelineStream:]
  -[MNTracePlayerScheduler removeTimelineStream:]
  -[MNTracePlayerScheduler removeAllTimelineStreams]


MNSimulatedLocationGenerator : NSObject
 @property  BOOL endAtFinalDestination
 @property  long long state
 @property  MNLocation *lastLocation
 @property  {?=If} lastRouteCoordinate

  // instance methods
  -[MNSimulatedLocationGenerator lastLocation]
  -[MNSimulatedLocationGenerator .cxx_destruct]
  -[MNSimulatedLocationGenerator stringForState:]
  -[MNSimulatedLocationGenerator state]
  -[MNSimulatedLocationGenerator initWithRouteInfo:]
  -[MNSimulatedLocationGenerator nextSimulatedLocationWithElapsedTime:]
  -[MNSimulatedLocationGenerator _updateForProceedingToStartOfLegOverTimeDelta:outCourse:outSpeed:]
  -[MNSimulatedLocationGenerator _updateForFollowingRouteOverTimeDelta:outCourse:outSpeed:]
  -[MNSimulatedLocationGenerator _updateForProceedingToWaypointOverTimeDelta:outCourse:outSpeed:]
  -[MNSimulatedLocationGenerator _updateForWaitingAtWaypointOverTimeDelta:outCourse:outSpeed:]
  -[MNSimulatedLocationGenerator _locationWithCoordinate:course:speed:]
  -[MNSimulatedLocationGenerator _simulationStartRouteCoordinate]
  -[MNSimulatedLocationGenerator _projectedCoordinateOffRouteFrom:toCoordinate:overTimeDelta:outCourse:outSpeed:]
  -[MNSimulatedLocationGenerator _projectedCoordinateOnRouteFrom:overTimeDelta:outSpeed:]
  -[MNSimulatedLocationGenerator _isCoordinate:atEndOfLeg:]
  -[MNSimulatedLocationGenerator _courseFromCoordinate:toCoordinate:]
  -[MNSimulatedLocationGenerator updateWithRouteInfo:]
  -[MNSimulatedLocationGenerator endAtFinalDestination]
  -[MNSimulatedLocationGenerator setEndAtFinalDestination:]
  -[MNSimulatedLocationGenerator lastRouteCoordinate]


MNNavigationServiceEmptyProxy : NSObject
  // instance methods
  -[MNNavigationServiceEmptyProxy methodSignatureForSelector:]
  -[MNNavigationServiceEmptyProxy .cxx_destruct]
  -[MNNavigationServiceEmptyProxy respondsToSelector:]
  -[MNNavigationServiceEmptyProxy forwardInvocation:]
  -[MNNavigationServiceEmptyProxy initWithPeer:]
  -[MNNavigationServiceEmptyProxy _isSelectorValidForForwarding:]


_MNMapPointsArray : NSObject
 @property  unsigned long count
 @property  ^{?=dd} mapPoints
 @property  ^v points

  // instance methods
  -[_MNMapPointsArray initWithCapacity:]
  -[_MNMapPointsArray count]
  -[_MNMapPointsArray points]
  -[_MNMapPointsArray dealloc]
  -[_MNMapPointsArray mapPoints]


_MNMapPointWithIndex : NSObject
 @property  {Matrix<double point
 @property  unsigned long index
 @property  BOOL isStartOfSegment
 @property  BOOL isPolylineA
 @property  BOOL isFlipped
 @property  {LineSegment<double segment

  // instance methods
  -[_MNMapPointWithIndex segment]
  -[_MNMapPointWithIndex isFlipped]
  -[_MNMapPointWithIndex setIndex:]
  -[_MNMapPointWithIndex .cxx_construct]
  -[_MNMapPointWithIndex setPoint:]
  -[_MNMapPointWithIndex point]
  -[_MNMapPointWithIndex index]
  -[_MNMapPointWithIndex setSegment:]
  -[_MNMapPointWithIndex isStartOfSegment]
  -[_MNMapPointWithIndex setIsStartOfSegment:]
  -[_MNMapPointWithIndex isPolylineA]
  -[_MNMapPointWithIndex setIsPolylineA:]
  -[_MNMapPointWithIndex setIsFlipped:]


MNRouteCoordinateWithType : NSObject
 @property  unsigned long significanceType
 @property  {PolylineCoordinate=If} routeCoordinate

  // class methods
  +[MNRouteCoordinateWithType divergenceCoordinate:]
  +[MNRouteCoordinateWithType convergenceCoordinate:]

  // instance methods
  -[MNRouteCoordinateWithType .cxx_construct]
  -[MNRouteCoordinateWithType routeCoordinate]
  -[MNRouteCoordinateWithType significanceType]
  -[MNRouteCoordinateWithType setRouteCoordinate:]
  -[MNRouteCoordinateWithType setSignificanceType:]


MNGuidanceManager : NSObject <MNTimeManagerObserver>
 @property  NSArray *events
 @property  MNLocation *location
 @property  double speed
 @property  <MNGuidanceManagerDelegate> *delegate
 @property  BOOL isInPreArrivalState
 @property  BOOL shouldShowChargingInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNGuidanceManager updateDestination:]
  -[MNGuidanceManager setJunctionViewImageWidth:height:]
  -[MNGuidanceManager speed]
  -[MNGuidanceManager events]
  -[MNGuidanceManager setSpeed:]
  -[MNGuidanceManager .cxx_destruct]
  -[MNGuidanceManager setLocation:]
  -[MNGuidanceManager stop]
  -[MNGuidanceManager setDelegate:]
  -[MNGuidanceManager setIsInPreArrivalState:]
  -[MNGuidanceManager reset]
  -[MNGuidanceManager location]
  -[MNGuidanceManager _isValidEvent:]
  -[MNGuidanceManager delegate]
  -[MNGuidanceManager dealloc]
  -[MNGuidanceManager isInPreArrivalState]
  -[MNGuidanceManager updateForReroute:]
  -[MNGuidanceManager timeSinceLastAnnouncement]
  -[MNGuidanceManager timeUntilNextAnnouncement]
  -[MNGuidanceManager _resetLastAnnouncementTime]
  -[MNGuidanceManager _initSpecialGuidanceEventsForRoute:]
  -[MNGuidanceManager _specialSpokenEvents:forLegIndex:]
  -[MNGuidanceManager _markEventSpoken:]
  -[MNGuidanceManager _guidanceEventIsSpecial:]
  -[MNGuidanceManager _eventWasSpoken:]
  -[MNGuidanceManager _adjustedVehicleSpeed]
  -[MNGuidanceManager _notifySpeechEvent:variant:ignorePromptStyle:]
  -[MNGuidanceManager _filterValidEvents]
  -[MNGuidanceManager _junctionViewEvents]
  -[MNGuidanceManager _distanceToEndOfRoute]
  -[MNGuidanceManager _considerAnnouncements]
  -[MNGuidanceManager _considerHaptics]
  -[MNGuidanceManager _considerLaneGuidance]
  -[MNGuidanceManager _considerSignGuidance]
  -[MNGuidanceManager _considerPersistence]
  -[MNGuidanceManager _considerJunctionViewGuidance]
  -[MNGuidanceManager _considerARGuidance]
  -[MNGuidanceManager _considerStartingAnnouncementsForLocation:]
  -[MNGuidanceManager _considerGetOnRouteAnnouncementsForLocation:]
  -[MNGuidanceManager _considerChargingAnnouncementsForLocation:]
  -[MNGuidanceManager _considerArrivalAnnouncementsForLocation:]
  -[MNGuidanceManager _considerOtherSpecialAnnouncementsForLocation:]
  -[MNGuidanceManager _planAnnouncements]
  -[MNGuidanceManager _spokenEventsRemainingInStep]
  -[MNGuidanceManager _durationsForEvent:]
  -[MNGuidanceManager _timeRemainingForEvent:]
  -[MNGuidanceManager _selectAnnouncementForEvent:withTimeRemaining:withMinIndex:selectedIndex:]
  -[MNGuidanceManager _notifyAnalyticsForNewEvents:previousEvents:]
  -[MNGuidanceManager _distanceToManeuverStart]
  -[MNGuidanceManager _distanceToRouteCoordinate:]
  -[MNGuidanceManager _serverStringDictionaryForEvent:distance:validDistance:spoken:]
  -[MNGuidanceManager durationOfEvent:announcementIndex:distance:]
  -[MNGuidanceManager _isEVChargingEvent:]
  -[MNGuidanceManager _serverStringDictionaryForChargingEvent:]
  -[MNGuidanceManager _nextLaneGuidanceEvent]
  -[MNGuidanceManager _indexForEventUUID:]
  -[MNGuidanceManager _validEventsForSignGuidance:]
  -[MNGuidanceManager _sortedSignEventsFromValidSignEvents:]
  -[MNGuidanceManager _signForGuidanceEvent:isPrimary:shouldOverridePrimaryDistances:distance:]
  -[MNGuidanceManager _specialSignEvents:forLeg:]
  -[MNGuidanceManager _validEventsForARGuidance]
  -[MNGuidanceManager _createArGuidanceInfosForEvent:forStep:]
  -[MNGuidanceManager _maneuverTypeForAREvent:]
  -[MNGuidanceManager _closestContinueAREventToRouteCoordinate:]
  -[MNGuidanceManager _headingForArEvent:]
  -[MNGuidanceManager _specialAREvents:forLeg:]
  -[MNGuidanceManager _arrivalARGuidanceEventsForLeg:]
  -[MNGuidanceManager _hasPersistentEvents]
  -[MNGuidanceManager _nextJunctionViewGuidanceEvent]
  -[MNGuidanceManager _handleJunctionViewInfo:]
  -[MNGuidanceManager _timeUntilEventTrigger:]
  -[MNGuidanceManager _trafficColorForRoute:traffic:distanceRemaining:]
  -[MNGuidanceManager timeManagerDidChangeProvider:]
  -[MNGuidanceManager initWithRouteInfo:andIsReconnecting:announcementsToIgnore:]
  -[MNGuidanceManager repeatLastGuidanceAnnouncement:]
  -[MNGuidanceManager updateGuidanceForLocation:navigatorState:]
  -[MNGuidanceManager shouldShowChargingInfo]
  -[MNGuidanceManager setShouldShowChargingInfo:]


MNSimulationLocationProvider : NSObject <MNLocationProvider>
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  BOOL isAuthorized
 @property  int headingOrientation
 @property  double expectedGpsUpdateInterval
 @property  BOOL coarseModeEnabled
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSimulationLocationProvider isTracePlayer]
  -[MNSimulationLocationProvider effectiveBundleIdentifier]
  -[MNSimulationLocationProvider isAuthorized]
  -[MNSimulationLocationProvider startUpdatingLocation]
  -[MNSimulationLocationProvider setEffectiveBundle:]
  -[MNSimulationLocationProvider stopUpdatingHeading]
  -[MNSimulationLocationProvider timeScale]
  -[MNSimulationLocationProvider traceVersion]
  -[MNSimulationLocationProvider stopUpdatingVehicleSpeed]
  -[MNSimulationLocationProvider startUpdatingVehicleSpeed]
  -[MNSimulationLocationProvider setEffectiveBundleIdentifier:]
  -[MNSimulationLocationProvider stopMonitoringForRegion:]
  -[MNSimulationLocationProvider startUpdatingHeading]
  -[MNSimulationLocationProvider stopUpdatingLocation]
  -[MNSimulationLocationProvider startUpdatingVehicleHeading]
  -[MNSimulationLocationProvider stopUpdatingVehicleHeading]
  -[MNSimulationLocationProvider headingOrientation]
  -[MNSimulationLocationProvider effectiveBundle]
  -[MNSimulationLocationProvider startMonitoringForRegion:]
  -[MNSimulationLocationProvider .cxx_destruct]
  -[MNSimulationLocationProvider expectedGpsUpdateInterval]
  -[MNSimulationLocationProvider setHeadingOrientation:]
  -[MNSimulationLocationProvider setDelegate:]
  -[MNSimulationLocationProvider coarseModeEnabled]
  -[MNSimulationLocationProvider delegate]
  -[MNSimulationLocationProvider resetForActiveTileGroupChanged]
  -[MNSimulationLocationProvider dealloc]
  -[MNSimulationLocationProvider updateWithRouteInfo:]
  -[MNSimulationLocationProvider _sendLocationUpdate:]
  -[MNSimulationLocationProvider initWithSimulationType:routeInfo:]


MNNavigationTraceInfo : NSObject
 @property  NSString *pedestrianTracePath
 @property  double pedestrianTraceStartRelativeTimestamp

  // instance methods
  -[MNNavigationTraceInfo .cxx_destruct]
  -[MNNavigationTraceInfo setPedestrianTracePath:]
  -[MNNavigationTraceInfo setPedestrianTraceStartRelativeTimestamp:]
  -[MNNavigationTraceInfo pedestrianTracePath]
  -[MNNavigationTraceInfo pedestrianTraceStartRelativeTimestamp]


MNRouteGeniusRemoteService : NSObject <MNRouteGeniusDelegateProxy>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteGeniusRemoteService .cxx_destruct]
  -[MNRouteGeniusRemoteService stop]
  -[MNRouteGeniusRemoteService initWithDelegate:]
  -[MNRouteGeniusRemoteService start]
  -[MNRouteGeniusRemoteService dealloc]
  -[MNRouteGeniusRemoteService didUpdateRouteGenius:]
  -[MNRouteGeniusRemoteService _q_closeConnection]
  -[MNRouteGeniusRemoteService _q_openConnectionIfNecessary]


MNFilePaths : NSObject
  // class methods
  +[MNFilePaths createFolderIfNotPresent:error:]
  +[MNFilePaths _cachesDirectoryPath]
  +[MNFilePaths navTempDirectoryPath]
  +[MNFilePaths navdCacheDirectoryPath]
  +[MNFilePaths routeHandleExtension]
  +[MNFilePaths _homeDirectoryPath]
  +[MNFilePaths navTraceExtension]
  +[MNFilePaths navTracesDirectoryPath]
  +[MNFilePaths timeballDatabasePath]


MNTransitAlert : NSObject <NSSecureCoding>
 @property  MNActiveRouteInfo *currentRouteInfo
 @property  <GEOServerFormattedString> *command
 @property  <GEOServerFormattedString> *detail
 @property  GEOPBTransitArtwork *artwork
 @property  int maneuverType
 @property  unsigned long stopIndex
 @property  unsigned long stepIndex

  // class methods
  +[MNTransitAlert supportsSecureCoding]

  // instance methods
  -[MNTransitAlert artwork]
  -[MNTransitAlert initWithCoder:]
  -[MNTransitAlert .cxx_destruct]
  -[MNTransitAlert command]
  -[MNTransitAlert maneuverType]
  -[MNTransitAlert stopIndex]
  -[MNTransitAlert detail]
  -[MNTransitAlert stepIndex]
  -[MNTransitAlert encodeWithCoder:]
  -[MNTransitAlert currentRouteInfo]
  -[MNTransitAlert initWithTransitBanner:transitStep:activeRoute:]


MNXPCTransactionManager : NSObject
  // class methods
  +[MNXPCTransactionManager sharedInstance]

  // instance methods
  -[MNXPCTransactionManager .cxx_destruct]
  -[MNXPCTransactionManager addHighMemoryThresholdRequest:]
  -[MNXPCTransactionManager removeHighMemoryThresholdRequest:afterDelay:]


MNTimepoint : NSObject <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  long long type
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimepoint supportsSecureCoding]
  +[MNTimepoint leaveNow]
  +[MNTimepoint leaveBy:]
  +[MNTimepoint arriveBy:]

  // instance methods
  -[MNTimepoint initWithCoder:]
  -[MNTimepoint .cxx_destruct]
  -[MNTimepoint jsonDictionary]
  -[MNTimepoint isEqual:]
  -[MNTimepoint initWithType:date:]
  -[MNTimepoint type]
  -[MNTimepoint copyWithZone:]
  -[MNTimepoint encodeWithCoder:]
  -[MNTimepoint date]


_MNTimepointAndTransportType : MNTimepoint <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  int transportType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MNTimepointAndTransportType supportsSecureCoding]

  // instance methods
  -[_MNTimepointAndTransportType setTransportType:]
  -[_MNTimepointAndTransportType transportType]
  -[_MNTimepointAndTransportType initWithCoder:]
  -[_MNTimepointAndTransportType jsonDictionary]
  -[_MNTimepointAndTransportType isEqual:]
  -[_MNTimepointAndTransportType copyWithZone:]
  -[_MNTimepointAndTransportType encodeWithCoder:]
  -[_MNTimepointAndTransportType initWithType:date:transportType:]


MNPlannedDestination : NSObject <MNJSONOutput, NSSecureCoding, NSCopying>
 @property  _MNTimepointAndTransportType *_internalTimepoint
 @property  NSUUID *uuid
 @property  GEOComposedWaypoint *destinationWaypoint
 @property  int transportType
 @property  MNTimepoint *timepoint
 @property  NSDate *expirationDate
 @property  BOOL expired
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNPlannedDestination supportsSecureCoding]
  +[MNPlannedDestination destinationFromArchiveData:]

  // instance methods
  -[MNPlannedDestination setTransportType:]
  -[MNPlannedDestination transportType]
  -[MNPlannedDestination uniqueIdentifier]
  -[MNPlannedDestination archiveData]
  -[MNPlannedDestination initWithCoder:]
  -[MNPlannedDestination .cxx_destruct]
  -[MNPlannedDestination isExpired]
  -[MNPlannedDestination setTimepoint:]
  -[MNPlannedDestination setExpirationDate:]
  -[MNPlannedDestination jsonDictionary]
  -[MNPlannedDestination isEqual:]
  -[MNPlannedDestination destinationWaypoint]
  -[MNPlannedDestination timepoint]
  -[MNPlannedDestination uuid]
  -[MNPlannedDestination copyWithZone:]
  -[MNPlannedDestination expirationDate]
  -[MNPlannedDestination encodeWithCoder:]
  -[MNPlannedDestination isDuplicateOf:]
  -[MNPlannedDestination _setTimepoint:transportType:]
  -[MNPlannedDestination initWithWaypoint:transportType:]
  -[MNPlannedDestination _internalTimepoint]


MNRealtimeTransitUpdate : MNRealtimeUpdate <NSSecureCoding>
 @property  GEOTransitRouteUpdate *transitUpdate

  // class methods
  +[MNRealtimeTransitUpdate supportsSecureCoding]

  // instance methods
  -[MNRealtimeTransitUpdate initWithCoder:]
  -[MNRealtimeTransitUpdate .cxx_destruct]
  -[MNRealtimeTransitUpdate routeID]
  -[MNRealtimeTransitUpdate initWithTransitRouteUpdate:]
  -[MNRealtimeTransitUpdate encodeWithCoder:]
  -[MNRealtimeTransitUpdate transitUpdate]


MNComparison : NSObject
  // class methods
  +[MNComparison isValue:equalTo:]


MNTimeballServiceRemoteProxy : NSObject <MNTimeballServiceProxyInterface, MNTimeballServiceProxyDelegate>
 @property  <MNTimeballServiceProxyDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTimeballServiceRemoteProxy _closeConnection]
  -[MNTimeballServiceRemoteProxy .cxx_destruct]
  -[MNTimeballServiceRemoteProxy _openConnection]
  -[MNTimeballServiceRemoteProxy setDelegate:]
  -[MNTimeballServiceRemoteProxy init]
  -[MNTimeballServiceRemoteProxy _remoteObjectProxy]
  -[MNTimeballServiceRemoteProxy delegate]
  -[MNTimeballServiceRemoteProxy dealloc]
  -[MNTimeballServiceRemoteProxy invokeHandlerWithID:forDestination:update:error:]
  -[MNTimeballServiceRemoteProxy completedUpdateForHandlerID:]
  -[MNTimeballServiceRemoteProxy didReceiveError:forDestination:]
  -[MNTimeballServiceRemoteProxy didReceiveUpdate:forDestination:]
  -[MNTimeballServiceRemoteProxy requestRoutingOptions:forDestinations:freshness:handlerID:]
  -[MNTimeballServiceRemoteProxy subscribeToDestination:options:refreshPolicy:]
  -[MNTimeballServiceRemoteProxy unsubscribeFromDestination:]
  -[MNTimeballServiceRemoteProxy subscribeToAllDestinations]
  -[MNTimeballServiceRemoteProxy unsubscribeFromAllDestinations]
  -[MNTimeballServiceRemoteProxy _registerForNavdRestart]


MNRingerSwitchObserver : NSObject
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  int ringerStateNotifyToken
 @property  BOOL ringerSwitchEnabled

  // class methods
  +[MNRingerSwitchObserver sharedObserver]

  // instance methods
  -[MNRingerSwitchObserver fetchRingerSwitchEnabled]
  -[MNRingerSwitchObserver setRingerStateNotifyToken:]
  -[MNRingerSwitchObserver .cxx_destruct]
  -[MNRingerSwitchObserver loadPropertiesOnConcurrentQueue]
  -[MNRingerSwitchObserver unregisterForRingerStateNotifications]
  -[MNRingerSwitchObserver init]
  -[MNRingerSwitchObserver ringerSwitchEnabled]
  -[MNRingerSwitchObserver registerForRingerStateNotifications]
  -[MNRingerSwitchObserver dispatchQueue]
  -[MNRingerSwitchObserver setRingerSwitchEnabled:]
  -[MNRingerSwitchObserver dealloc]
  -[MNRingerSwitchObserver stateForNotifyToken:]
  -[MNRingerSwitchObserver setDispatchQueue:]
  -[MNRingerSwitchObserver ringerStateNotifyToken]


MNLocationManager : NSObject <GEOResourceManifestTileGroupObserver, MNLocationProviderDelegate>
 @property  @? locationCorrector
 @property  NSString *effectiveBundleIdentifier
 @property  NSBundle *effectiveBundle
 @property  BOOL isHeadingServicesAvailable
 @property  CLHeading *heading
 @property  MNLocation *lastLocation
 @property  BOOL coarseModeEnabled
 @property  double expectedGpsUpdateInterval
 @property  double timeScale
 @property  int headingOrientation
 @property  <MNLocationRecorder> *locationRecorder
 @property  unsigned long locationProviderType
 @property  <MNLocationProvider> *locationProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNLocationManager sharedLocationManager]

  // instance methods
  -[MNLocationManager stopHeadingUpdateWithObserver:]
  -[MNLocationManager stopLocationUpdateWithObserver:]
  -[MNLocationManager effectiveBundleIdentifier]
  -[MNLocationManager setLastLocation:]
  -[MNLocationManager locationProvider:monitoringDidFailForRegion:withError:]
  -[MNLocationManager setLocationRecorder:]
  -[MNLocationManager locationProvider:didReceiveError:]
  -[MNLocationManager setEffectiveBundle:]
  -[MNLocationManager startLocationUpdateWithObserver:]
  -[MNLocationManager locationProviderDidChangeAuthorizationStatus:]
  -[MNLocationManager setLocationProvider:]
  -[MNLocationManager timeScale]
  -[MNLocationManager isHeadingServicesAvailable]
  -[MNLocationManager lastLocation]
  -[MNLocationManager setEffectiveBundleIdentifier:]
  -[MNLocationManager stopMonitoringForRegion:]
  -[MNLocationManager locationRecorder]
  -[MNLocationManager locationProvider:didUpdateVehicleSpeed:timestamp:]
  -[MNLocationManager heading]
  -[MNLocationManager startHeadingUpdateWithObserver:]
  -[MNLocationManager headingOrientation]
  -[MNLocationManager _reset]
  -[MNLocationManager locationProviderDidPauseLocationUpdates:]
  -[MNLocationManager locationProviderDidResumeLocationUpdates:]
  -[MNLocationManager resourceManifestManager:didChangeActiveTileGroup:fromOldTileGroup:]
  -[MNLocationManager locationCorrector]
  -[MNLocationManager effectiveBundle]
  -[MNLocationManager _reportLocationSuccess]
  -[MNLocationManager locationProvider:didUpdateVehicleHeading:timestamp:]
  -[MNLocationManager pushLocation:]
  -[MNLocationManager locationProviderShouldPauseLocationUpdates:]
  -[MNLocationManager startMonitoringForRegion:]
  -[MNLocationManager setLocationCorrector:]
  -[MNLocationManager _updateForNewShiftedLocation:rawLocation:]
  -[MNLocationManager locationProviderType]
  -[MNLocationManager _reportLocationReset]
  -[MNLocationManager .cxx_destruct]
  -[MNLocationManager expectedGpsUpdateInterval]
  -[MNLocationManager _setTrackingLocation:]
  -[MNLocationManager setLocationProviderType:]
  -[MNLocationManager locationProvider]
  -[MNLocationManager locationProvider:didUpdateLocation:]
  -[MNLocationManager setHeadingOrientation:]
  -[MNLocationManager _setTrackingHeading:]
  -[MNLocationManager _reportLocationStatus:]
  -[MNLocationManager _reportLocationFailureWithError:]
  -[MNLocationManager locationProvider:didUpdateHeading:]
  -[MNLocationManager stop]
  -[MNLocationManager init]
  -[MNLocationManager locationProvider:didChangeCoarseMode:]
  -[MNLocationManager _shiftLocationIfNecessary:handler:]
  -[MNLocationManager removeLocationListener:]
  -[MNLocationManager requestLocationAccessFor:]
  -[MNLocationManager _hasLocationAssertion]
  -[MNLocationManager removeLocationAccessFor:]
  -[MNLocationManager useGPSLocationProviderWithCLParameters:]
  -[MNLocationManager useHybridLocationProvider]
  -[MNLocationManager locationProvider:didEnterRegion:]
  -[MNLocationManager coarseModeEnabled]
  -[MNLocationManager addLocationListener:]
  -[MNLocationManager removeLocationAccessForAll]
  -[MNLocationManager useSimulationLocationProvider:]
  -[MNLocationManager dealloc]
  -[MNLocationManager _clearLocationAssertion]
  -[MNLocationManager _createLocationAssertion]
  -[MNLocationManager locationProvider:didExitRegion:]
  -[MNLocationManager useTraceLocationProvider:]


MNTraceBookmarkRecorder : NSObject
  // instance methods
  -[MNTraceBookmarkRecorder .cxx_destruct]
  -[MNTraceBookmarkRecorder initWithTrace:]
  -[MNTraceBookmarkRecorder recordBookmarkAtTime:withScreenshotData:completionHandler:]


MNWeakTimer : NSObject
 @property  id target
 @property  SEL selector
 @property  NSTimer *timer

  // class methods
  +[MNWeakTimer scheduledTimerWithTimeInterval:target:selector:]

  // instance methods
  -[MNWeakTimer selector]
  -[MNWeakTimer .cxx_destruct]
  -[MNWeakTimer timer]
  -[MNWeakTimer setTarget:]
  -[MNWeakTimer target]
  -[MNWeakTimer setSelector:]
  -[MNWeakTimer dealloc]
  -[MNWeakTimer invalidate]
  -[MNWeakTimer _timerDidFire]
  -[MNWeakTimer initWithTimeInterval:target:selector:]


MNETADisplayFormatter : NSObject
 @property  <MNETADisplayFormatterDelegate> *delegate
 @property  double remainingTimeToEndOfRoute
 @property  double remainingTimeToEndOfLeg
 @property  double displayRemainingTimeToEndOfLeg
 @property  NSDate *displayETAToEndOfLeg
 @property  double displayRemainingTimeToEndOfRoute
 @property  NSDate *displayETAToEndOfRoute

  // instance methods
  -[MNETADisplayFormatter .cxx_destruct]
  -[MNETADisplayFormatter _updateTimerFired]
  -[MNETADisplayFormatter setDelegate:]
  -[MNETADisplayFormatter delegate]
  -[MNETADisplayFormatter dealloc]
  -[MNETADisplayFormatter displayETAToEndOfRoute]
  -[MNETADisplayFormatter _updateDisplayETA]
  -[MNETADisplayFormatter _displayTimeIntervalForTimeInterval:]
  -[MNETADisplayFormatter _displayDateWithRemainingTime:]
  -[MNETADisplayFormatter _scheduleUpdateTimer]
  -[MNETADisplayFormatter initWithTimeZone:]
  -[MNETADisplayFormatter setRemainingTimeToEndOfRoute:]
  -[MNETADisplayFormatter setRemainingTimeToEndOfLeg:]
  -[MNETADisplayFormatter remainingTimeToEndOfRoute]
  -[MNETADisplayFormatter remainingTimeToEndOfLeg]
  -[MNETADisplayFormatter displayRemainingTimeToEndOfLeg]
  -[MNETADisplayFormatter displayETAToEndOfLeg]
  -[MNETADisplayFormatter displayRemainingTimeToEndOfRoute]


MNRouteAttributes : GEORouteAttributes <VGVirtualGarageObserver, NSSecureCoding, NSCopying>
 @property  BOOL hasResolvedRules

  // class methods
  +[MNRouteAttributes supportsSecureCoding]
  +[MNRouteAttributes _loadLPRRulesForWaypoints:forceUpdate:queue:completion:]

  // instance methods
  -[MNRouteAttributes _commonInit]
  -[MNRouteAttributes initWithCoder:]
  -[MNRouteAttributes vehicle]
  -[MNRouteAttributes .cxx_destruct]
  -[MNRouteAttributes init]
  -[MNRouteAttributes buildRouteAttributes:result:]
  -[MNRouteAttributes dealloc]
  -[MNRouteAttributes buildRouteAttributesForETAUpdateRequest:queue:result:]
  -[MNRouteAttributes copyWithZone:]
  -[MNRouteAttributes virtualGarageDidUpdate:]
  -[MNRouteAttributes encodeWithCoder:]
  -[MNRouteAttributes initWithAttributes:waypoints:]
  -[MNRouteAttributes shouldRetryForError:]
  -[MNRouteAttributes initWithAttributes:latLngs:]
  -[MNRouteAttributes hasResolvedRules]
  -[MNRouteAttributes setHasResolvedRules:]
  -[MNRouteAttributes _populateRouteAttributes:result:]
  -[MNRouteAttributes _loadRulesIfNecessary:result:]
  -[MNRouteAttributes _resolveSelectedVehicle:completion:]


MNGuidanceSignDescription : NSObject <NSSecureCoding>
 @property  NSUUID *uniqueID
 @property  NSArray *titles
 @property  NSArray *details
 @property  NSDictionary *variableOverrides
 @property  long long distanceDetailLevel
 @property  GEOJunction *junction
 @property  <GEOTransitArtworkDataSource> *artworkOverride
 @property  NSString *shieldText
 @property  int shieldID
 @property  NSString *shieldStringID
 @property  int composedGuidanceEventIndex

  // class methods
  +[MNGuidanceSignDescription supportsSecureCoding]

  // instance methods
  -[MNGuidanceSignDescription titles]
  -[MNGuidanceSignDescription initWithCoder:]
  -[MNGuidanceSignDescription uniqueID]
  -[MNGuidanceSignDescription .cxx_destruct]
  -[MNGuidanceSignDescription shieldText]
  -[MNGuidanceSignDescription junction]
  -[MNGuidanceSignDescription details]
  -[MNGuidanceSignDescription artworkOverride]
  -[MNGuidanceSignDescription variableOverrides]
  -[MNGuidanceSignDescription encodeWithCoder:]
  -[MNGuidanceSignDescription shieldID]
  -[MNGuidanceSignDescription initWithID:titles:details:variableOverrides:distanceDetailLevel:junction:artworkOverride:shieldText:shieldID:shieldStringID:composedGuidanceEventIndex:]
  -[MNGuidanceSignDescription shieldStringID]
  -[MNGuidanceSignDescription distanceDetailLevel]
  -[MNGuidanceSignDescription composedGuidanceEventIndex]


MNNavigationStateGuidance : MNNavigationState
  // class methods
  +[MNNavigationStateGuidance guidanceStateForStartDetails:stateManager:navigationSessionManager:]

  // instance methods
  -[MNNavigationStateGuidance repeatCurrentGuidanceWithReply:]
  -[MNNavigationStateGuidance setTracePosition:]
  -[MNNavigationStateGuidance stopCurrentGuidancePrompt]
  -[MNNavigationStateGuidance stopNavigationWithReason:]
  -[MNNavigationStateGuidance resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateGuidance vibrateForPrompt:withReply:]
  -[MNNavigationStateGuidance setTracePlaybackSpeed:]
  -[MNNavigationStateGuidance recordPedestrianTracePath:]
  -[MNNavigationStateGuidance enableNavigationCapability:]
  -[MNNavigationStateGuidance setTraceIsPlaying:]
  -[MNNavigationStateGuidance updateDestination:]
  -[MNNavigationStateGuidance acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationStateGuidance setDisplayedStepIndex:]
  -[MNNavigationStateGuidance setJunctionViewImageWidth:height:]
  -[MNNavigationStateGuidance pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateGuidance setRideIndex:forSegmentIndex:]
  -[MNNavigationStateGuidance repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationStateGuidance recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationStateGuidance setIsConnectedToCarplay:]
  -[MNNavigationStateGuidance forceReroute]
  -[MNNavigationStateGuidance resumeOriginalDestination]
  -[MNNavigationStateGuidance disableNavigationCapability:]
  -[MNNavigationStateGuidance switchToRoute:]
  -[MNNavigationStateGuidance desiredLocationProviderType]
  -[MNNavigationStateGuidance .cxx_destruct]
  -[MNNavigationStateGuidance enterState]
  -[MNNavigationStateGuidance traceManager]
  -[MNNavigationStateGuidance postEnterState]
  -[MNNavigationStateGuidance initWithStateManager:navigationSessionManager:startDetails:]
  -[MNNavigationStateGuidance simulationLocationProvider]
  -[MNNavigationStateGuidance leaveState]
  -[MNNavigationStateGuidance currentDestination]
  -[MNNavigationStateGuidance requiresHighMemoryThreshold]
  -[MNNavigationStateGuidance clParameters]
  -[MNNavigationStateGuidance shouldClearStoredRoutes]
  -[MNNavigationStateGuidance preEnterState]


MNAudioSystemEventQueue : NSObject
 @property  <MNAudioEventQueueDelegate> *delegate
 @property  unsigned long capacity
 @property  unsigned long count
 @property  BOOL empty
 @property  BOOL full

  // instance methods
  -[MNAudioSystemEventQueue full]
  -[MNAudioSystemEventQueue capacity]
  -[MNAudioSystemEventQueue clear]
  -[MNAudioSystemEventQueue empty]
  -[MNAudioSystemEventQueue initWithCapacity:]
  -[MNAudioSystemEventQueue .cxx_destruct]
  -[MNAudioSystemEventQueue count]
  -[MNAudioSystemEventQueue dequeue]
  -[MNAudioSystemEventQueue setDelegate:]
  -[MNAudioSystemEventQueue delegate]
  -[MNAudioSystemEventQueue _enqueue:]
  -[MNAudioSystemEventQueue _dequeue]
  -[MNAudioSystemEventQueue enqueue:withOptions:andReport:]
  -[MNAudioSystemEventQueue _removeEventsMatching:]


MNLPRRuleHelper : NSObject
  // instance methods
  -[MNLPRRuleHelper workQueue]
  -[MNLPRRuleHelper fetchRulesForWaypoints:forceUpdateManifest:forceUpdateRules:completionQueue:completion:]
  -[MNLPRRuleHelper _findResourceNamesForRegions:forceUpdate:asyncCompletion:]
  -[MNLPRRuleHelper _loadRules:asyncCompletion:]
  -[MNLPRRuleHelper prefetchRulesForWaypoints:]


MNDirectionsResponseInfo : NSObject <NSSecureCoding>
 @property  NSArray *routeInfos
 @property  GEODirectionsRequest *request
 @property  GEODirectionsResponse *response
 @property  NSError *error
 @property  GEODirectionsError *directionsError
 @property  MNTraceRecordingData *traceRecordingData

  // class methods
  +[MNDirectionsResponseInfo supportsSecureCoding]

  // instance methods
  -[MNDirectionsResponseInfo setRequest:]
  -[MNDirectionsResponseInfo initWithCoder:]
  -[MNDirectionsResponseInfo .cxx_destruct]
  -[MNDirectionsResponseInfo request]
  -[MNDirectionsResponseInfo response]
  -[MNDirectionsResponseInfo setError:]
  -[MNDirectionsResponseInfo encodeWithCoder:]
  -[MNDirectionsResponseInfo error]
  -[MNDirectionsResponseInfo setResponse:]
  -[MNDirectionsResponseInfo setTraceRecordingData:]
  -[MNDirectionsResponseInfo traceRecordingData]
  -[MNDirectionsResponseInfo routeInfos]
  -[MNDirectionsResponseInfo directionsError]
  -[MNDirectionsResponseInfo setRouteInfos:]
  -[MNDirectionsResponseInfo setDirectionsError:]


MNGuidanceARInfo : NSObject <NSSecureCoding>
 @property  int eventType
 @property  int maneuverType
 @property  <GEOServerFormattedString> *instruction
 @property  NSDictionary *variableOverrides
 @property  NSString *arrowLabel
 @property  {?=ddd} locationCoordinate
 @property  {GEOPolylineCoordinateRange={?=If}{?=If}} locationCoordinateRange
 @property  NSString *maneuverRoadName
 @property  double heading
 @property  unsigned long stepIndex
 @property  unsigned long priority

  // class methods
  +[MNGuidanceARInfo supportsSecureCoding]

  // instance methods
  -[MNGuidanceARInfo initWithCoder:]
  -[MNGuidanceARInfo heading]
  -[MNGuidanceARInfo .cxx_destruct]
  -[MNGuidanceARInfo setPriority:]
  -[MNGuidanceARInfo init]
  -[MNGuidanceARInfo isEqual:]
  -[MNGuidanceARInfo maneuverType]
  -[MNGuidanceARInfo maneuverRoadName]
  -[MNGuidanceARInfo priority]
  -[MNGuidanceARInfo eventType]
  -[MNGuidanceARInfo arrowLabel]
  -[MNGuidanceARInfo variableOverrides]
  -[MNGuidanceARInfo locationCoordinate]
  -[MNGuidanceARInfo instruction]
  -[MNGuidanceARInfo stepIndex]
  -[MNGuidanceARInfo encodeWithCoder:]
  -[MNGuidanceARInfo initWithEventType:maneuverType:instruction:variableOverrides:arrowLabel:locationCoordinateRange:maneuverRoadName:stepIndex:]
  -[MNGuidanceARInfo initWithEventType:maneuverType:instruction:variableOverrides:arrowLabel:locationCoordinate:maneuverRoadName:heading:stepIndex:]
  -[MNGuidanceARInfo locationCoordinateRange]


MNKeepAliveManager : NSObject
 @property  unsigned long counter
 @property  NSString *launchdKeepAliveFile
 @property  NSFileManager *fileManager

  // class methods
  +[MNKeepAliveManager sharedInstance]

  // instance methods
  -[MNKeepAliveManager checkIn]
  -[MNKeepAliveManager setCounter:]
  -[MNKeepAliveManager fileManager]
  -[MNKeepAliveManager .cxx_destruct]
  -[MNKeepAliveManager init]
  -[MNKeepAliveManager counter]
  -[MNKeepAliveManager setFileManager:]
  -[MNKeepAliveManager checkOut]
  -[MNKeepAliveManager launchdKeepAliveFile]
  -[MNKeepAliveManager setLaunchdKeepAliveFile:]


MNNavigationServiceRemoteProxy : NSObject <MNNavigationServiceProxy>
 @property  <MNNavigationServiceClientInterface> *delegate
 @property  NSArray *interruptionDates
 @property  unsigned long interruptionCount
 @property  unsigned long clientCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationServiceRemoteProxy repeatCurrentGuidanceWithReply:]
  -[MNNavigationServiceRemoteProxy setTracePosition:]
  -[MNNavigationServiceRemoteProxy startNavigationWithDetails:activeBlock:]
  -[MNNavigationServiceRemoteProxy clientCount]
  -[MNNavigationServiceRemoteProxy stopCurrentGuidancePrompt]
  -[MNNavigationServiceRemoteProxy stopNavigationWithReason:]
  -[MNNavigationServiceRemoteProxy resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceRemoteProxy vibrateForPrompt:withReply:]
  -[MNNavigationServiceRemoteProxy setTracePlaybackSpeed:]
  -[MNNavigationServiceRemoteProxy recordPedestrianTracePath:]
  -[MNNavigationServiceRemoteProxy enableNavigationCapability:]
  -[MNNavigationServiceRemoteProxy setGuidancePromptsEnabled:]
  -[MNNavigationServiceRemoteProxy setTraceIsPlaying:]
  -[MNNavigationServiceRemoteProxy interfaceHashesWithHandler:]
  -[MNNavigationServiceRemoteProxy updateDestination:]
  -[MNNavigationServiceRemoteProxy acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationServiceRemoteProxy changeUserOptions:]
  -[MNNavigationServiceRemoteProxy setDisplayedStepIndex:]
  -[MNNavigationServiceRemoteProxy setJunctionViewImageWidth:height:]
  -[MNNavigationServiceRemoteProxy pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationServiceRemoteProxy setRideIndex:forSegmentIndex:]
  -[MNNavigationServiceRemoteProxy repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationServiceRemoteProxy recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationServiceRemoteProxy setIsConnectedToCarplay:]
  -[MNNavigationServiceRemoteProxy setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationServiceRemoteProxy forceReroute]
  -[MNNavigationServiceRemoteProxy setGuidanceType:]
  -[MNNavigationServiceRemoteProxy resumeOriginalDestination]
  -[MNNavigationServiceRemoteProxy disableNavigationCapability:]
  -[MNNavigationServiceRemoteProxy switchToRoute:]
  -[MNNavigationServiceRemoteProxy checkinForNavigationService:]
  -[MNNavigationServiceRemoteProxy openForClient:]
  -[MNNavigationServiceRemoteProxy isOpenForClient:]
  -[MNNavigationServiceRemoteProxy _startNavigationWithDetails:]
  -[MNNavigationServiceRemoteProxy methodSignatureForSelector:]
  -[MNNavigationServiceRemoteProxy _closeConnection]
  -[MNNavigationServiceRemoteProxy .cxx_destruct]
  -[MNNavigationServiceRemoteProxy setHeadingOrientation:]
  -[MNNavigationServiceRemoteProxy _restoreIdleConnection]
  -[MNNavigationServiceRemoteProxy _restoreNavigationSession]
  -[MNNavigationServiceRemoteProxy _openConnection]
  -[MNNavigationServiceRemoteProxy setDelegate:]
  -[MNNavigationServiceRemoteProxy _updateConnection]
  -[MNNavigationServiceRemoteProxy init]
  -[MNNavigationServiceRemoteProxy interruptionDates]
  -[MNNavigationServiceRemoteProxy navigationServiceProxy:willChangeFromState:toState:]
  -[MNNavigationServiceRemoteProxy _shouldReconnectWithInterruptionOnDate:]
  -[MNNavigationServiceRemoteProxy navigationServiceProxy:didChangeFromState:toState:]
  -[MNNavigationServiceRemoteProxy _hasNavigationServiceEntitlement]
  -[MNNavigationServiceRemoteProxy navigationServiceProxy:didUpdateNavigationDetails:]
  -[MNNavigationServiceRemoteProxy interruptionCount]
  -[MNNavigationServiceRemoteProxy _remoteObjectProxy]
  -[MNNavigationServiceRemoteProxy delegate]
  -[MNNavigationServiceRemoteProxy _releaseSandboxExtension]
  -[MNNavigationServiceRemoteProxy _handleInterruption]
  -[MNNavigationServiceRemoteProxy dealloc]
  -[MNNavigationServiceRemoteProxy _consumeSandboxExtension:]
  -[MNNavigationServiceRemoteProxy closeForClient:]
  -[MNNavigationServiceRemoteProxy forwardInvocation:]


MNTimeAndDistanceUpdater : NSObject
 @property  <MNTimeAndDistanceUpdaterDelegate> *delegate

  // instance methods
  -[MNTimeAndDistanceUpdater .cxx_destruct]
  -[MNTimeAndDistanceUpdater setDelegate:]
  -[MNTimeAndDistanceUpdater delegate]
  -[MNTimeAndDistanceUpdater dealloc]
  -[MNTimeAndDistanceUpdater startUpdating]
  -[MNTimeAndDistanceUpdater stopUpdating]
  -[MNTimeAndDistanceUpdater _startTimerToNextMinute]
  -[MNTimeAndDistanceUpdater updateDisplayETAForRoute:notificationType:]
  -[MNTimeAndDistanceUpdater setLocation:notificationType:]
  -[MNTimeAndDistanceUpdater setRoutes:mainRoute:location:notificationType:]


MNCoreMotionContextProvider : NSObject <GEOMotionContextProvider>
 @property  <GEOMotionContextProviderDelegate> *motionDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNCoreMotionContextProvider .cxx_destruct]
  -[MNCoreMotionContextProvider stopMotionUpdates]
  -[MNCoreMotionContextProvider setMotionDelegate:]
  -[MNCoreMotionContextProvider startMotionUpdates]
  -[MNCoreMotionContextProvider dealloc]
  -[MNCoreMotionContextProvider motionDelegate]
  -[MNCoreMotionContextProvider initWithTraceRecorder:]


_MNTracePlayerTimelineStreamSearchObject : NSObject <MNTracePlayerTimelineStreamObjectType>
 @property  double position
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MNTracePlayerTimelineStreamSearchObject position]
  -[_MNTracePlayerTimelineStreamSearchObject initWithPosition:]


MNTracePlayerTimelineStream : NSObject
 @property  @? handler
 @property  unsigned long nextIndex
 @property  double nextUpdatePosition

  // instance methods
  -[MNTracePlayerTimelineStream nextIndex]
  -[MNTracePlayerTimelineStream .cxx_destruct]
  -[MNTracePlayerTimelineStream initWithData:]
  -[MNTracePlayerTimelineStream setHandler:]
  -[MNTracePlayerTimelineStream handler]
  -[MNTracePlayerTimelineStream jumpToPosition:]
  -[MNTracePlayerTimelineStream nextUpdatePosition]
  -[MNTracePlayerTimelineStream triggerNextUpdate]


MNRealtimeUpdate : NSObject <NSSecureCoding>
 @property  NSUUID *routeID
 @property  NSDate *lastUpdated
 @property  NSError *error

  // class methods
  +[MNRealtimeUpdate supportsSecureCoding]

  // instance methods
  -[MNRealtimeUpdate initWithCoder:]
  -[MNRealtimeUpdate .cxx_destruct]
  -[MNRealtimeUpdate routeID]
  -[MNRealtimeUpdate lastUpdated]
  -[MNRealtimeUpdate encodeWithCoder:]
  -[MNRealtimeUpdate error]


MNTraceNavigationEventRecorder : NSObject <MNNavigationSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTraceNavigationEventRecorder .cxx_destruct]
  -[MNTraceNavigationEventRecorder navigationSession:didStartWithRoute:navigationType:isReconnecting:]
  -[MNTraceNavigationEventRecorder navigationSession:didStopWithReason:]
  -[MNTraceNavigationEventRecorder navigationSession:matchedToStepIndex:segmentIndex:]
  -[MNTraceNavigationEventRecorder navigationSession:didEnterPreArrivalStateForWaypoint:endOfLegIndex:]
  -[MNTraceNavigationEventRecorder navigationSession:didArriveAtWaypoint:endOfLegIndex:]
  -[MNTraceNavigationEventRecorder navigationSession:didResumeNavigatingFromWaypoint:endOfLegIndex:]
  -[MNTraceNavigationEventRecorder navigationSession:didSuppressReroute:]
  -[MNTraceNavigationEventRecorder navigationSession:didReroute:withLocation:withAlternateRoutes:rerouteReason:]
  -[MNTraceNavigationEventRecorder navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNTraceNavigationEventRecorder navigationSession:didUpdateDestination:]
  -[MNTraceNavigationEventRecorder navigationSession:didUpdateAlternateRoutes:]
  -[MNTraceNavigationEventRecorder navigationSession:didAnnounce:stage:]
  -[MNTraceNavigationEventRecorder navigationSession:updateSignsWithInfo:]
  -[MNTraceNavigationEventRecorder navigationSession:updateSignsWithARInfo:]
  -[MNTraceNavigationEventRecorder navigationSession:showLaneDirections:]
  -[MNTraceNavigationEventRecorder navigationSession:hideLaneDirectionsForId:]
  -[MNTraceNavigationEventRecorder navigationSession:showJunctionView:]
  -[MNTraceNavigationEventRecorder navigationSession:hideJunctionViewForId:]
  -[MNTraceNavigationEventRecorder navigationSession:didReceiveTrafficIncidentAlert:responseCallback:]
  -[MNTraceNavigationEventRecorder navigationSession:didReceiveTransitAlert:]
  -[MNTraceNavigationEventRecorder initWithTraceRecorder:]
  -[MNTraceNavigationEventRecorder _userGotOnRoute]
  -[MNTraceNavigationEventRecorder _userWentOffRoute]
  -[MNTraceNavigationEventRecorder _recordEvent:description:]
  -[MNTraceNavigationEventRecorder _recordDebugSettings]
  -[MNTraceNavigationEventRecorder _descriptionForWaypoint:]
  -[MNTraceNavigationEventRecorder _stringForSignDescription:]
  -[MNTraceNavigationEventRecorder setLastMatchedLocation:]


MNAudioSessionResourceAccess : NSObject
 @property  <MNAudioSessionAccessDelegate> *delegate
 @property  unsigned long promptStyle
 @property  unsigned long state

  // class methods
  +[MNAudioSessionResourceAccess headphonesAreInUse]
  +[MNAudioSessionResourceAccess deviceSpeakerIsInUse]

  // instance methods
  -[MNAudioSessionResourceAccess _cancelTimer]
  -[MNAudioSessionResourceAccess .cxx_destruct]
  -[MNAudioSessionResourceAccess setDelegate:]
  -[MNAudioSessionResourceAccess init]
  -[MNAudioSessionResourceAccess promptStyle]
  -[MNAudioSessionResourceAccess state]
  -[MNAudioSessionResourceAccess activate]
  -[MNAudioSessionResourceAccess _createTimer]
  -[MNAudioSessionResourceAccess delegate]
  -[MNAudioSessionResourceAccess deactivate]
  -[MNAudioSessionResourceAccess dealloc]
  -[MNAudioSessionResourceAccess updatePropertiesWithOptions:forTransportType:error:]
  -[MNAudioSessionResourceAccess _changeNumChannels]
  -[MNAudioSessionResourceAccess _stringForAVAudioSessionErrorCode:]
  -[MNAudioSessionResourceAccess _timeoutOccurred:]


MNSpeechResourceController : NSObject <VSSpeechSynthesizerDelegate>
 @property  <MNSpeechControllerDelegate> *delegate
 @property  BOOL speaking
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSpeechResourceController _cancelTimer]
  -[MNSpeechResourceController .cxx_destruct]
  -[MNSpeechResourceController setDelegate:]
  -[MNSpeechResourceController speechSynthesizer:didStartSpeakingRequest:]
  -[MNSpeechResourceController speechSynthesizer:didFinishSpeakingRequest:successfully:phonemesSpoken:withError:]
  -[MNSpeechResourceController speechSynthesizer:didFinishSpeakingRequest:withInstrumentMetrics:]
  -[MNSpeechResourceController speechSynthesizer:didFinishSynthesisRequest:withInstrumentMetrics:error:]
  -[MNSpeechResourceController initWithLanguage:]
  -[MNSpeechResourceController delegate]
  -[MNSpeechResourceController dealloc]
  -[MNSpeechResourceController speaking]
  -[MNSpeechResourceController _registerForObservation]
  -[MNSpeechResourceController _audioSessionInterruption:]
  -[MNSpeechResourceController _mediaSessionServicesWereReset:]
  -[MNSpeechResourceController cache:withDisclosure:andReport:]
  -[MNSpeechResourceController durationOf:]
  -[MNSpeechResourceController speak:withDisclosure:andReport:]
  -[MNSpeechResourceController stopSpeakingAndReport:]
  -[MNSpeechResourceController _prepareSynthesizerWithLanguage:andVoiceName:andGender:andAudioSessionID:]
  -[MNSpeechResourceController _warmUpTTSForLanguage:andVoiceName:andGender:andAudioSessionID:]
  -[MNSpeechResourceController _markVoiceForDownloadingWithLanguage:andVoiceName:andGender:]
  -[MNSpeechResourceController _requestForUtterance:withLanguage:andVoiceName:andGender:andAudioSessionID:andCanUseServerTTS:]
  -[MNSpeechResourceController _createTimerForUtterance:andIsCaching:]
  -[MNSpeechResourceController _createDurationCacheIfNecessary]
  -[MNSpeechResourceController _estimateDurationForUtterance:]
  -[MNSpeechResourceController _addDurationToCache:forUtterance:]
  -[MNSpeechResourceController _clampVolume:]
  -[MNSpeechResourceController _cachingTimeoutOccurred:]
  -[MNSpeechResourceController _speakingTimeoutOccurred:]
  -[MNSpeechResourceController _updateEstimatorWithDuration:andUtterance:]


MNDirectionsRequestDetails : PBCodable <NSCopying>
 @property  BOOL hasOrigin
 @property  GEOComposedWaypoint *origin
 @property  BOOL hasDestination
 @property  GEOComposedWaypoint *destination
 @property  BOOL hasRouteAttributes
 @property  GEORouteAttributes *routeAttributes
 @property  BOOL hasMaxRouteCount
 @property  unsigned int maxRouteCount
 @property  BOOL hasCurrentUserLocation
 @property  GEOLocation *currentUserLocation
 @property  BOOL hasCurrentMapRegion
 @property  GEOMapRegion *currentMapRegion
 @property  BOOL hasDirectionsRequestFeedback
 @property  GEODirectionsRequestFeedback *directionsRequestFeedback
 @property  BOOL hasCommonOptions
 @property  GEOCommonOptions *commonOptions
 @property  BOOL hasTracePath
 @property  NSString *tracePath

  // instance methods
  -[MNDirectionsRequestDetails setRouteAttributes:]
  -[MNDirectionsRequestDetails mergeFrom:]
  -[MNDirectionsRequestDetails setTracePath:]
  -[MNDirectionsRequestDetails setDestination:]
  -[MNDirectionsRequestDetails origin]
  -[MNDirectionsRequestDetails setCommonOptions:]
  -[MNDirectionsRequestDetails setOrigin:]
  -[MNDirectionsRequestDetails hasOrigin]
  -[MNDirectionsRequestDetails .cxx_destruct]
  -[MNDirectionsRequestDetails dictionaryRepresentation]
  -[MNDirectionsRequestDetails writeTo:]
  -[MNDirectionsRequestDetails destination]
  -[MNDirectionsRequestDetails hasDestination]
  -[MNDirectionsRequestDetails isEqual:]
  -[MNDirectionsRequestDetails copyTo:]
  -[MNDirectionsRequestDetails commonOptions]
  -[MNDirectionsRequestDetails currentMapRegion]
  -[MNDirectionsRequestDetails setCurrentMapRegion:]
  -[MNDirectionsRequestDetails hasRouteAttributes]
  -[MNDirectionsRequestDetails hasCurrentMapRegion]
  -[MNDirectionsRequestDetails hasCommonOptions]
  -[MNDirectionsRequestDetails readFrom:]
  -[MNDirectionsRequestDetails routeAttributes]
  -[MNDirectionsRequestDetails currentUserLocation]
  -[MNDirectionsRequestDetails setCurrentUserLocation:]
  -[MNDirectionsRequestDetails hasCurrentUserLocation]
  -[MNDirectionsRequestDetails copyWithZone:]
  -[MNDirectionsRequestDetails tracePath]
  -[MNDirectionsRequestDetails hasTracePath]
  -[MNDirectionsRequestDetails directionsRequestFeedback]
  -[MNDirectionsRequestDetails maxRouteCount]
  -[MNDirectionsRequestDetails setMaxRouteCount:]
  -[MNDirectionsRequestDetails setDirectionsRequestFeedback:]
  -[MNDirectionsRequestDetails setHasMaxRouteCount:]
  -[MNDirectionsRequestDetails hasMaxRouteCount]
  -[MNDirectionsRequestDetails hasDirectionsRequestFeedback]


MNTransitLocationTracker : MNSteppingLocationTracker <MNLocationManagerObserver>
 @property  BOOL debugSnapToTransitLines
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNTransitLocationTracker locationManager:didExitRegion:]
  -[MNTransitLocationTracker locationManager:didEnterRegion:]
  -[MNTransitLocationTracker locationManager:monitoringDidFailForRegion:withError:]
  -[MNTransitLocationTracker locationManagerFailedToUpdateLocation:withError:]
  -[MNTransitLocationTracker transportType]
  -[MNTransitLocationTracker locationManagerDidResumeLocationUpdates:]
  -[MNTransitLocationTracker stopTracking]
  -[MNTransitLocationTracker locationManagerShouldPauseLocationUpdates:]
  -[MNTransitLocationTracker .cxx_destruct]
  -[MNTransitLocationTracker locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNTransitLocationTracker locationManagerDidPauseLocationUpdates:]
  -[MNTransitLocationTracker locationManagerUpdatedLocation:]
  -[MNTransitLocationTracker locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNTransitLocationTracker locationManagerDidReset:]
  -[MNTransitLocationTracker startTracking]
  -[MNTransitLocationTracker _matchedLocationForLocation:]
  -[MNTransitLocationTracker initWithNavigationSession:]
  -[MNTransitLocationTracker reroute:reason:]
  -[MNTransitLocationTracker _initRegionAlertsForRoute:]
  -[MNTransitLocationTracker _startMonitoringTransitAlerts]
  -[MNTransitLocationTracker _stopMonitoringAllRegions]
  -[MNTransitLocationTracker _isInaccurateLocation:]
  -[MNTransitLocationTracker _locationForInaccurateLocation:]
  -[MNTransitLocationTracker _timeToDisplayStaleGPSLocation]
  -[MNTransitLocationTracker _correctedLocationForLocation:]
  -[MNTransitLocationTracker _roadMatchForOffRouteLocation:routeMatch:]
  -[MNTransitLocationTracker _clRegionWithCenter:identifier:signalStrength:]
  -[MNTransitLocationTracker _stopMonitoringForRegionWithIdentifier:]
  -[MNTransitLocationTracker _stepForRegionAlert:]
  -[MNTransitLocationTracker _triggerAlertForRegionId:]
  -[MNTransitLocationTracker debugSnapToTransitLines]
  -[MNTransitLocationTracker setDebugSnapToTransitLines:]


MNUserOptions : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long drivingVoiceGuidanceLevel
 @property  unsigned long walkingVoiceGuidanceLevel
 @property  unsigned long cyclingVoiceGuidanceLevel
 @property  unsigned long distanceUnits
 @property  BOOL useHFP
 @property  BOOL pauseSpokenAudio
 @property  BOOL chimeBeforeInstruction
 @property  BOOL muteSpeechOverride
 @property  BOOL speechEnabled
 @property  unsigned long maxAlternateRoutesCount
 @property  NSString *voiceLanguage

  // class methods
  +[MNUserOptions supportsSecureCoding]

  // instance methods
  -[MNUserOptions muteSpeechOverride]
  -[MNUserOptions distanceUnits]
  -[MNUserOptions changeTransportType:toVoiceGuidanceLevel:]
  -[MNUserOptions initWithCoder:]
  -[MNUserOptions setDrivingVoiceGuidanceLevel:]
  -[MNUserOptions cyclingVoiceGuidanceLevel]
  -[MNUserOptions setWalkingVoiceGuidanceLevel:]
  -[MNUserOptions setChimeBeforeInstruction:]
  -[MNUserOptions setDistanceUnits:]
  -[MNUserOptions voiceLanguage]
  -[MNUserOptions setSpeechEnabled:]
  -[MNUserOptions guidanceLevelForTransportType:]
  -[MNUserOptions walkingVoiceGuidanceLevel]
  -[MNUserOptions drivingVoiceGuidanceLevel]
  -[MNUserOptions setPauseSpokenAudio:]
  -[MNUserOptions init]
  -[MNUserOptions maxAlternateRoutesCount]
  -[MNUserOptions setUseHFP:]
  -[MNUserOptions isEqual:]
  -[MNUserOptions pauseSpokenAudio]
  -[MNUserOptions setMuteSpeechOverride:]
  -[MNUserOptions setCyclingVoiceGuidanceLevel:]
  -[MNUserOptions speechEnabled]
  -[MNUserOptions chimeBeforeInstruction]
  -[MNUserOptions useHFP]
  -[MNUserOptions copyWithZone:]
  -[MNUserOptions encodeWithCoder:]
  -[MNUserOptions setMaxAlternateRoutesCount:]


MNTimeballSubscription : NSObject <MNJSONOutput, NSCopying, NSSecureCoding>
 @property  MNPlannedDestination *destination
 @property  long long options
 @property  unsigned long refreshPolicy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimeballSubscription supportsSecureCoding]
  +[MNTimeballSubscription subscriptionForDestination:options:refreshPolicy:]

  // instance methods
  -[MNTimeballSubscription initWithCoder:]
  -[MNTimeballSubscription options]
  -[MNTimeballSubscription .cxx_destruct]
  -[MNTimeballSubscription destination]
  -[MNTimeballSubscription jsonDictionary]
  -[MNTimeballSubscription isEqual:]
  -[MNTimeballSubscription copyWithZone:]
  -[MNTimeballSubscription encodeWithCoder:]
  -[MNTimeballSubscription refreshPolicy]


MNTimeballSubscriberStore : NSObject
 @property  NSArray *subscriptions

  // instance methods
  -[MNTimeballSubscriberStore subscriptions]
  -[MNTimeballSubscriberStore .cxx_destruct]
  -[MNTimeballSubscriberStore init]
  -[MNTimeballSubscriberStore unsubscribe:]
  -[MNTimeballSubscriberStore subscribe:]
  -[MNTimeballSubscriberStore unsubscribeFromDestination:]


MNTraceBookmark : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  double timestamp
 @property  BOOL hasImageData
 @property  NSData *imageData

  // instance methods
  -[MNTraceBookmark mergeFrom:]
  -[MNTraceBookmark setImageData:]
  -[MNTraceBookmark .cxx_destruct]
  -[MNTraceBookmark imageData]
  -[MNTraceBookmark dictionaryRepresentation]
  -[MNTraceBookmark writeTo:]
  -[MNTraceBookmark isEqual:]
  -[MNTraceBookmark copyTo:]
  -[MNTraceBookmark readFrom:]
  -[MNTraceBookmark hasTimestamp]
  -[MNTraceBookmark timestamp]
  -[MNTraceBookmark copyWithZone:]
  -[MNTraceBookmark hasImageData]
  -[MNTraceBookmark setHasTimestamp:]
  -[MNTraceBookmark setTimestamp:]


MNRouteDistanceInfo : NSObject <NSSecureCoding>
 @property  double distanceRemainingToEndOfLeg
 @property  double distanceRemainingToEndOfRoute

  // class methods
  +[MNRouteDistanceInfo supportsSecureCoding]

  // instance methods
  -[MNRouteDistanceInfo initWithCoder:]
  -[MNRouteDistanceInfo .cxx_destruct]
  -[MNRouteDistanceInfo init]
  -[MNRouteDistanceInfo isEqual:]
  -[MNRouteDistanceInfo encodeWithCoder:]
  -[MNRouteDistanceInfo distanceRemainingToEndOfLeg]
  -[MNRouteDistanceInfo initWithDistanceRemainingToEndOfLeg:distanceRemainingToEndOfRoute:forLegIndex:forRouteID:]
  -[MNRouteDistanceInfo distanceRemainingToEndOfRoute]


MNTraceRecordingData : NSObject <NSSecureCoding>
 @property  MNLocation *initialUserLocation
 @property  NSArray *waypoints
 @property  GEODirectionsRequest *initialDirectionsRequest
 @property  GEODirectionsResponse *initialDirectionsResponse
 @property  NSError *initialDirectionsRequestError
 @property  double initialDirectionsRequestTimestamp
 @property  double initialDirectionsResponseTimestamp

  // class methods
  +[MNTraceRecordingData supportsSecureCoding]

  // instance methods
  -[MNTraceRecordingData waypoints]
  -[MNTraceRecordingData initWithCoder:]
  -[MNTraceRecordingData .cxx_destruct]
  -[MNTraceRecordingData setWaypoints:]
  -[MNTraceRecordingData encodeWithCoder:]
  -[MNTraceRecordingData initialUserLocation]
  -[MNTraceRecordingData setInitialUserLocation:]
  -[MNTraceRecordingData initialDirectionsRequestTimestamp]
  -[MNTraceRecordingData initialDirectionsResponseTimestamp]
  -[MNTraceRecordingData initialDirectionsRequest]
  -[MNTraceRecordingData initialDirectionsResponse]
  -[MNTraceRecordingData initialDirectionsRequestError]
  -[MNTraceRecordingData setInitialDirectionsRequest:]
  -[MNTraceRecordingData setInitialDirectionsResponse:]
  -[MNTraceRecordingData setInitialDirectionsRequestError:]
  -[MNTraceRecordingData setInitialDirectionsRequestTimestamp:]
  -[MNTraceRecordingData setInitialDirectionsResponseTimestamp:]


MNXPCTransactionCounter : NSObject
  // instance methods
  -[MNXPCTransactionCounter decrement]
  -[MNXPCTransactionCounter .cxx_destruct]
  -[MNXPCTransactionCounter count]
  -[MNXPCTransactionCounter init]
  -[MNXPCTransactionCounter dealloc]
  -[MNXPCTransactionCounter increment:]


MNAlternateRoutesUpdater : NSObject
 @property  NSArray *alternateRoutes

  // instance methods
  -[MNAlternateRoutesUpdater updateForLocation:]
  -[MNAlternateRoutesUpdater alternateRoutes]
  -[MNAlternateRoutesUpdater .cxx_destruct]
  -[MNAlternateRoutesUpdater setAlternateRoutes:forMainRoute:]
  -[MNAlternateRoutesUpdater updateForReroute:rerouteReason:]
  -[MNAlternateRoutesUpdater alternateRouteForLocation:]


_MNTrackedAlternateRoute : NSObject
 @property  MNActiveRouteInfo *alternateRoute
 @property  MNActiveRouteInfo *mainRoute
 @property  {?=If} divergenceCoordinate

  // instance methods
  -[_MNTrackedAlternateRoute mainRoute]
  -[_MNTrackedAlternateRoute .cxx_destruct]
  -[_MNTrackedAlternateRoute divergenceCoordinate]
  -[_MNTrackedAlternateRoute alternateRoute]
  -[_MNTrackedAlternateRoute setMainRoute:]
  -[_MNTrackedAlternateRoute setAlternateRoute:]
  -[_MNTrackedAlternateRoute setDivergenceCoordinate:]


MNWalkingTurnByTurnLocationTracker : MNTurnByTurnLocationTracker
  // instance methods
  -[MNWalkingTurnByTurnLocationTracker transportType]
  -[MNWalkingTurnByTurnLocationTracker initWithNavigationSession:]
  -[MNWalkingTurnByTurnLocationTracker _newMapMatcherForRoute:]
  -[MNWalkingTurnByTurnLocationTracker _detectedMotionForLocation:]
  -[MNWalkingTurnByTurnLocationTracker _allowSwitchToTransportType:forLocation:]


MNLocation : CLLocation <NSSecureCoding>
 @property  unsigned long traceIndex
 @property  unsigned long state
 @property  GEORoadMatch *roadMatch
 @property  CLLocation *rawLocation
 @property  NSUUID *routeID
 @property  GEORouteMatch *routeMatch
 @property  GEONavigationMatchInfo *detailedMatchInfo
 @property  NSString *roadName
 @property  NSString *shieldText
 @property  long long shieldType
 @property  unsigned int roadLineType
 @property  int rampType
 @property  unsigned long speedLimit
 @property  BOOL speedLimitIsMPH
 @property  long long speedLimitShieldType
 @property  BOOL isDirectional
 @property  BOOL locationUnreliable
 @property  unsigned long stepIndex
 @property  BOOL isProjected
 @property  NSDate *expirationDate
 @property  NSDate *originalDate
 @property  {CLLocationCoordinate2D=dd} rawShiftedCoordinate
 @property  BOOL isLeeched

  // class methods
  +[MNLocation supportsSecureCoding]

  // instance methods
  -[MNLocation _navigation_detailedMatchInfo]
  -[MNLocation _navigation_hasValidCourse]
  -[MNLocation rampType]
  -[MNLocation traceIndex]
  -[MNLocation initWithCoder:]
  -[MNLocation setShieldText:]
  -[MNLocation setRawShiftedCoordinate:]
  -[MNLocation setSpeedLimitIsMPH:]
  -[MNLocation setIsDirectional:]
  -[MNLocation initWithRawLocation:]
  -[MNLocation setRoadMatch:]
  -[MNLocation .cxx_destruct]
  -[MNLocation isProjected]
  -[MNLocation rawLocation]
  -[MNLocation _referenceFrameAsString:]
  -[MNLocation shieldText]
  -[MNLocation setRawLocation:]
  -[MNLocation initWithRouteMatch:rawLocation:locationMatchType:]
  -[MNLocation shieldType]
  -[MNLocation setState:]
  -[MNLocation isLeeched]
  -[MNLocation setExpirationDate:]
  -[MNLocation initWithRawLocation:locationMatchType:]
  -[MNLocation setRouteMatch:]
  -[MNLocation setIsLeeched:]
  -[MNLocation routeID]
  -[MNLocation _navigation_isStale]
  -[MNLocation setRoadLineType:]
  -[MNLocation matchInfo]
  -[MNLocation propagatedLocationForTimeInterval:shouldProjectAlongRoute:]
  -[MNLocation _roadFeature]
  -[MNLocation _navigation_routeMatch]
  -[MNLocation locationUnreliable]
  -[MNLocation initWithRoadMatch:rawLocation:locationMatchType:]
  -[MNLocation state]
  -[MNLocation setRoadName:]
  -[MNLocation speedLimitIsMPH]
  -[MNLocation setRampType:]
  -[MNLocation initWithCLLocation:]
  -[MNLocation _navigation_rawShiftedCoordinate]
  -[MNLocation setSpeedLimit:]
  -[MNLocation originalDate]
  -[MNLocation setOriginalDate:]
  -[MNLocation roadLineType]
  -[MNLocation speedLimit]
  -[MNLocation roadMatch]
  -[MNLocation roadName]
  -[MNLocation speedLimitShieldType]
  -[MNLocation detailedMatchInfo]
  -[MNLocation setLocationUnreliable:]
  -[MNLocation initWithClientLocation:]
  -[MNLocation isDirectional]
  -[MNLocation routeMatch]
  -[MNLocation expirationDate]
  -[MNLocation stepIndex]
  -[MNLocation setTraceIndex:]
  -[MNLocation setShieldType:]
  -[MNLocation setDetailedMatchInfo:]
  -[MNLocation isEqualToLocation:]
  -[MNLocation encodeWithCoder:]
  -[MNLocation setSpeedLimitShieldType:]
  -[MNLocation rawShiftedCoordinate]


MNHybridLocationProvider : NSObject <MNLocationProviderDelegate, MNLocationProvider>
 @property  unsigned long mode
 @property  double distanceFilter
 @property  double desiredAccuracy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <MNLocationProviderDelegate> *delegate
 @property  NSBundle *effectiveBundle
 @property  NSString *effectiveBundleIdentifier
 @property  BOOL isAuthorized
 @property  int headingOrientation
 @property  double expectedGpsUpdateInterval
 @property  BOOL coarseModeEnabled
 @property  BOOL isTracePlayer
 @property  unsigned long traceVersion
 @property  double timeScale

  // instance methods
  -[MNHybridLocationProvider isTracePlayer]
  -[MNHybridLocationProvider effectiveBundleIdentifier]
  -[MNHybridLocationProvider isAuthorized]
  -[MNHybridLocationProvider coreLocationProvider]
  -[MNHybridLocationProvider locationProvider:monitoringDidFailForRegion:withError:]
  -[MNHybridLocationProvider startUpdatingLocation]
  -[MNHybridLocationProvider locationProvider:didReceiveError:]
  -[MNHybridLocationProvider desiredAccuracy]
  -[MNHybridLocationProvider setEffectiveBundle:]
  -[MNHybridLocationProvider locationProviderDidChangeAuthorizationStatus:]
  -[MNHybridLocationProvider stopUpdatingHeading]
  -[MNHybridLocationProvider timeScale]
  -[MNHybridLocationProvider setDesiredAccuracy:]
  -[MNHybridLocationProvider _sharedInit]
  -[MNHybridLocationProvider distanceFilter]
  -[MNHybridLocationProvider initWithEffectiveBundleIdentifier:]
  -[MNHybridLocationProvider traceVersion]
  -[MNHybridLocationProvider stopUpdatingVehicleSpeed]
  -[MNHybridLocationProvider startUpdatingVehicleSpeed]
  -[MNHybridLocationProvider setEffectiveBundleIdentifier:]
  -[MNHybridLocationProvider stopMonitoringForRegion:]
  -[MNHybridLocationProvider startUpdatingHeading]
  -[MNHybridLocationProvider stopUpdatingLocation]
  -[MNHybridLocationProvider startUpdatingVehicleHeading]
  -[MNHybridLocationProvider locationProvider:didUpdateVehicleSpeed:timestamp:]
  -[MNHybridLocationProvider stopUpdatingVehicleHeading]
  -[MNHybridLocationProvider initWithEffectiveBundle:]
  -[MNHybridLocationProvider setDistanceFilter:]
  -[MNHybridLocationProvider headingOrientation]
  -[MNHybridLocationProvider locationProviderDidPauseLocationUpdates:]
  -[MNHybridLocationProvider locationProviderDidResumeLocationUpdates:]
  -[MNHybridLocationProvider effectiveBundle]
  -[MNHybridLocationProvider locationProvider:didUpdateVehicleHeading:timestamp:]
  -[MNHybridLocationProvider locationProviderShouldPauseLocationUpdates:]
  -[MNHybridLocationProvider startMonitoringForRegion:]
  -[MNHybridLocationProvider .cxx_destruct]
  -[MNHybridLocationProvider expectedGpsUpdateInterval]
  -[MNHybridLocationProvider locationProvider:didUpdateLocation:]
  -[MNHybridLocationProvider setHeadingOrientation:]
  -[MNHybridLocationProvider locationProvider:didUpdateHeading:]
  -[MNHybridLocationProvider setDelegate:]
  -[MNHybridLocationProvider init]
  -[MNHybridLocationProvider locationProvider:didChangeCoarseMode:]
  -[MNHybridLocationProvider locationProvider:didEnterRegion:]
  -[MNHybridLocationProvider leechedLocationProvider]
  -[MNHybridLocationProvider coarseModeEnabled]
  -[MNHybridLocationProvider delegate]
  -[MNHybridLocationProvider _setEffectiveAccuracy:]
  -[MNHybridLocationProvider resetForActiveTileGroupChanged]
  -[MNHybridLocationProvider setMode:]
  -[MNHybridLocationProvider mode]
  -[MNHybridLocationProvider locationProvider:didExitRegion:]


MNNavigationDetails : NSObject <NSSecureCoding>
 @property  NSMapTable *routeIDLookup
 @property  NSMutableDictionary *routeLookup
 @property  unsigned long state
 @property  int navigationType
 @property  int desiredNavigationType
 @property  int desiredTransportType
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  MNLocation *location
 @property  BOOL guidancePromptsEnabled
 @property  BOOL isDetour
 @property  int headingOrientation
 @property  int navigationState
 @property  GEONavigationGuidanceState *guidanceState
 @property  BOOL isInPreArrivalState
 @property  GEOComposedRoute *currentRoute
 @property  unsigned long routeIndex
 @property  unsigned long reconnectionRouteIndex
 @property  unsigned long selectedPreviewRouteIndex
 @property  NSArray *previewRoutes
 @property  NSArray *alternateRoutes
 @property  GEOComposedWaypoint *originalOrigin
 @property  GEOComposedWaypoint *originalDestination
 @property  unsigned long stepIndex
 @property  unsigned long segmentIndex
 @property  unsigned long displayedStepIndex
 @property  double proceedToRouteDistance
 @property  NSString *displayString
 @property  unsigned long closestStepIndex
 @property  double distanceUntilSign
 @property  double timeUntilSign
 @property  double distanceUntilManeuver
 @property  double timeUntilManeuver
 @property  NSString *currentVoiceLanguage
 @property  MNGuidanceLaneInfo *activeLaneInfo
 @property  NSArray *spokenAnnouncements
 @property  MNDisplayETAInfo *displayETAInfo
 @property  MNRouteDistanceInfo *remainingDistanceInfo
 @property  NSString *tracePath
 @property  BOOL traceIsPlaying
 @property  double traceDuration
 @property  double tracePosition
 @property  NSArray *traceBookmarks

  // class methods
  +[MNNavigationDetails supportsSecureCoding]

  // instance methods
  -[MNNavigationDetails setTracePosition:]
  -[MNNavigationDetails displayString]
  -[MNNavigationDetails setGuidancePromptsEnabled:]
  -[MNNavigationDetails setTraceIsPlaying:]
  -[MNNavigationDetails setDisplayedStepIndex:]
  -[MNNavigationDetails setDisplayString:]
  -[MNNavigationDetails updateETATrafficForRoute:]
  -[MNNavigationDetails currentVoiceLanguage]
  -[MNNavigationDetails remainingDistanceInfo]
  -[MNNavigationDetails initWithCoder:]
  -[MNNavigationDetails setOriginalDestination:]
  -[MNNavigationDetails setTracePath:]
  -[MNNavigationDetails setAlternateRoutes:]
  -[MNNavigationDetails setNavigationState:]
  -[MNNavigationDetails headingOrientation]
  -[MNNavigationDetails tracePosition]
  -[MNNavigationDetails setCurrentRoute:withAlternateRoutes:]
  -[MNNavigationDetails alternateRoutes]
  -[MNNavigationDetails activeLaneInfo]
  -[MNNavigationDetails guidancePromptsEnabled]
  -[MNNavigationDetails .cxx_destruct]
  -[MNNavigationDetails setDesiredTransportType:]
  -[MNNavigationDetails setHeadingOrientation:]
  -[MNNavigationDetails setLocation:]
  -[MNNavigationDetails desiredTransportType]
  -[MNNavigationDetails setState:]
  -[MNNavigationDetails setDirectionsResponse:]
  -[MNNavigationDetails setOriginalOrigin:]
  -[MNNavigationDetails desiredNavigationType]
  -[MNNavigationDetails init]
  -[MNNavigationDetails setProceedToRouteDistance:]
  -[MNNavigationDetails setIsInPreArrivalState:]
  -[MNNavigationDetails traceBookmarks]
  -[MNNavigationDetails displayedStepIndex]
  -[MNNavigationDetails routeLookup]
  -[MNNavigationDetails guidanceState]
  -[MNNavigationDetails isDetour]
  -[MNNavigationDetails displayETAInfo]
  -[MNNavigationDetails currentRoute]
  -[MNNavigationDetails setDistanceUntilManeuver:]
  -[MNNavigationDetails setActiveLaneInfo:]
  -[MNNavigationDetails directionsRequest]
  -[MNNavigationDetails setTimeUntilSign:]
  -[MNNavigationDetails setIsDetour:]
  -[MNNavigationDetails setNavigationType:]
  -[MNNavigationDetails selectedPreviewRouteIndex]
  -[MNNavigationDetails setDistanceUntilSign:]
  -[MNNavigationDetails routeInfoForID:]
  -[MNNavigationDetails traceIsPlaying]
  -[MNNavigationDetails location]
  -[MNNavigationDetails state]
  -[MNNavigationDetails distanceUntilSign]
  -[MNNavigationDetails navigationState]
  -[MNNavigationDetails proceedToRouteDistance]
  -[MNNavigationDetails navigationType]
  -[MNNavigationDetails _updateRouteIDLookup]
  -[MNNavigationDetails routeLookupIDs]
  -[MNNavigationDetails setTraceBookmarks:]
  -[MNNavigationDetails spokenAnnouncements]
  -[MNNavigationDetails setTraceDuration:]
  -[MNNavigationDetails setTimeUntilManeuver:]
  -[MNNavigationDetails setGuidanceState:]
  -[MNNavigationDetails removeTrafficIncidentAlert:]
  -[MNNavigationDetails updateWithTrafficIncidentAlert:]
  -[MNNavigationDetails previewRoutes]
  -[MNNavigationDetails setPreviewRoutes:withSelectedRouteIndex:]
  -[MNNavigationDetails copySerializableValuesFrom:]
  -[MNNavigationDetails originalOrigin]
  -[MNNavigationDetails timeUntilSign]
  -[MNNavigationDetails traceDuration]
  -[MNNavigationDetails reconnectionRouteIndex]
  -[MNNavigationDetails setDirectionsRequest:]
  -[MNNavigationDetails routeIndex]
  -[MNNavigationDetails segmentIndex]
  -[MNNavigationDetails timeUntilManeuver]
  -[MNNavigationDetails directionsResponse]
  -[MNNavigationDetails stepIndex]
  -[MNNavigationDetails routeIDLookup]
  -[MNNavigationDetails setClosestStepIndex:]
  -[MNNavigationDetails closestStepIndex]
  -[MNNavigationDetails setDesiredNavigationType:]
  -[MNNavigationDetails setCurrentVoiceLanguage:]
  -[MNNavigationDetails isInPreArrivalState]
  -[MNNavigationDetails originalDestination]
  -[MNNavigationDetails encodeWithCoder:]
  -[MNNavigationDetails markAnnouncementSpoken:]
  -[MNNavigationDetails tracePath]
  -[MNNavigationDetails routeInfoForRoute:]
  -[MNNavigationDetails distanceUntilManeuver]


MNNavigationStateRoutePreviewGuidance : MNNavigationStateGuidance
  // instance methods
  -[MNNavigationStateRoutePreviewGuidance stopNavigationWithReason:]
  -[MNNavigationStateRoutePreviewGuidance setGuidanceType:]
  -[MNNavigationStateRoutePreviewGuidance enterState]
  -[MNNavigationStateRoutePreviewGuidance type]
  -[MNNavigationStateRoutePreviewGuidance initWithStateManager:navigationSessionManager:startDetails:]


MNNavdStateUpdater : NSObject <MNNavigationStateObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNavdStateUpdater sharedUpdater]

  // instance methods
  -[MNNavdStateUpdater initPrivate]
  -[MNNavdStateUpdater .cxx_destruct]
  -[MNNavdStateUpdater addObserver:]
  -[MNNavdStateUpdater isNavigatingOrPredictingDestination]
  -[MNNavdStateUpdater isNavigatingWithETA]
  -[MNNavdStateUpdater stateManager:didChangeFromState:toState:]
  -[MNNavdStateUpdater removeObserver:]


MNRouteCoordinate : PBCodable <NSCopying>
 @property  BOOL hasIndex
 @property  unsigned int index
 @property  BOOL hasOffset
 @property  float offset

  // instance methods
  -[MNRouteCoordinate setHasOffset:]
  -[MNRouteCoordinate hasOffset]
  -[MNRouteCoordinate mergeFrom:]
  -[MNRouteCoordinate setIndex:]
  -[MNRouteCoordinate offset]
  -[MNRouteCoordinate dictionaryRepresentation]
  -[MNRouteCoordinate writeTo:]
  -[MNRouteCoordinate setHasIndex:]
  -[MNRouteCoordinate isEqual:]
  -[MNRouteCoordinate copyTo:]
  -[MNRouteCoordinate readFrom:]
  -[MNRouteCoordinate index]
  -[MNRouteCoordinate setOffset:]
  -[MNRouteCoordinate copyWithZone:]
  -[MNRouteCoordinate hasIndex]


MNNavigationStateGuidanceTurnByTurn : MNNavigationStateGuidance
  // instance methods
  -[MNNavigationStateGuidanceTurnByTurn setGuidanceType:]
  -[MNNavigationStateGuidanceTurnByTurn type]
  -[MNNavigationStateGuidanceTurnByTurn postEnterState]
  -[MNNavigationStateGuidanceTurnByTurn setFullGuidanceMode:]


MNSpokenInstructionContents : MNListInstructionContents <MNInstructionContents>
 @property  <GEOServerFormattedString> *proceedInstructionFormat
 @property  <GEOServerFormattedString> *continueInstructionFormat
 @property  <GEOServerFormattedString> *initialInstructionFormat
 @property  <GEOServerFormattedString> *prepareInstructionFormat
 @property  NSArray *executionInstructionFormats
 @property  long long context
 @property  int numSignsWanted
 @property  BOOL suppressNames
 @property  NSString *roadName
 @property  BOOL hasServerContent
 @property  BOOL suppressFallback

  // class methods
  +[MNSpokenInstructionContents contentsWithStep:destination:options:isSecondary:]

  // instance methods
  -[MNSpokenInstructionContents .cxx_destruct]
  -[MNSpokenInstructionContents init]
  -[MNSpokenInstructionContents setContext:]
  -[MNSpokenInstructionContents context]
  -[MNSpokenInstructionContents _populateFromStep:]
  -[MNSpokenInstructionContents instructionForStage:distance:]
  -[MNSpokenInstructionContents hasServerContent]
  -[MNSpokenInstructionContents setProceedInstructionFormat:]
  -[MNSpokenInstructionContents setContinueInstructionFormat:]
  -[MNSpokenInstructionContents setInitialInstructionFormat:]
  -[MNSpokenInstructionContents setPrepareInstructionFormat:]
  -[MNSpokenInstructionContents setExecutionInstructionFormats:]
  -[MNSpokenInstructionContents executionInstructionFormats]
  -[MNSpokenInstructionContents proceedInstructionFormat]
  -[MNSpokenInstructionContents continueInstructionFormat]
  -[MNSpokenInstructionContents prepareInstructionFormat]
  -[MNSpokenInstructionContents initialInstructionFormat]
  -[MNSpokenInstructionContents _instructionsForFormats:distance:]
  -[MNSpokenInstructionContents numSignsWanted]
  -[MNSpokenInstructionContents instructionWithShorterAlternatives:]


MNNavigationStateNoDestination : MNNavigationState
  // instance methods
  -[MNNavigationStateNoDestination startNavigationWithDetails:activeBlock:]
  -[MNNavigationStateNoDestination setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationStateNoDestination desiredLocationProviderType]
  -[MNNavigationStateNoDestination type]


MNTracePlayer : NSObject <MNTracePlayerSchedulerDelegate, MNTimeProvider>
 @property  MNTrace *trace
 @property  BOOL isPlaying
 @property  BOOL isPaused
 @property  double position
 @property  double duration
 @property  double speedMultiplier
 @property  BOOL shouldPlayETARequests
 @property  MNSessionUpdateManager *sessionUpdater
 @property  BOOL forceDirectionsResponsesFromTrace
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double currentTime

  // instance methods
  -[MNTracePlayer trace]
  -[MNTracePlayer isPlaying]
  -[MNTracePlayer initWithPath:]
  -[MNTracePlayer .cxx_destruct]
  -[MNTracePlayer stop]
  -[MNTracePlayer pause]
  -[MNTracePlayer currentTime]
  -[MNTracePlayer addObserver:]
  -[MNTracePlayer resume]
  -[MNTracePlayer start]
  -[MNTracePlayer dealloc]
  -[MNTracePlayer removeObserver:]
  -[MNTracePlayer duration]
  -[MNTracePlayer isPaused]
  -[MNTracePlayer position]
  -[MNTracePlayer sessionUpdater]
  -[MNTracePlayer setSpeedMultiplier:]
  -[MNTracePlayer setShouldPlayETARequests:]
  -[MNTracePlayer setForceDirectionsResponsesFromTrace:]
  -[MNTracePlayer startAtLocationIndex:]
  -[MNTracePlayer speedMultiplier]
  -[MNTracePlayer requestDirectionsNearTimestamp:withHandler:errorHandler:]
  -[MNTracePlayer tracePlayerScheduler:didUpdatePosition:]
  -[MNTracePlayer initWithTrace:]
  -[MNTracePlayer initWithPath:outError:]
  -[MNTracePlayer _createTimelineStreams]
  -[MNTracePlayer _locationWithCurrentDate:]
  -[MNTracePlayer _responseTimeForRequestAtIndex:]
  -[MNTracePlayer jumpToTime:]
  -[MNTracePlayer requestDirectionsWithHandler:errorHandler:]
  -[MNTracePlayer jumpToLocationAtIndex:]
  -[MNTracePlayer skipByTimeInterval:]
  -[MNTracePlayer jumpToBookmarkAtIndex:]
  -[MNTracePlayer shouldPlayETARequests]
  -[MNTracePlayer forceDirectionsResponsesFromTrace]


MNDisplayETAInfo : NSObject <NSSecureCoding>
 @property  unsigned long displayRemainingMinutesToEndOfLeg
 @property  NSDate *displayETAToEndOfLeg
 @property  unsigned long displayRemainingMinutesToEndOfRoute
 @property  NSDate *displayETAToEndOfRoute
 @property  NSUUID *routeID
 @property  unsigned long legIndex

  // class methods
  +[MNDisplayETAInfo supportsSecureCoding]

  // instance methods
  -[MNDisplayETAInfo initWithCoder:]
  -[MNDisplayETAInfo legIndex]
  -[MNDisplayETAInfo .cxx_destruct]
  -[MNDisplayETAInfo routeID]
  -[MNDisplayETAInfo isEqual:]
  -[MNDisplayETAInfo setRouteID:]
  -[MNDisplayETAInfo encodeWithCoder:]
  -[MNDisplayETAInfo displayRemainingMinutesToEndOfRoute]
  -[MNDisplayETAInfo displayRemainingMinutesToEndOfLeg]
  -[MNDisplayETAInfo displayETAToEndOfRoute]
  -[MNDisplayETAInfo initWithDisplayETAToEndOfLeg:displayRemainingMinutesToEndOfLeg:displayETAToEndOfRoute:displayRemainingMinutesToEndOfRoute:]
  -[MNDisplayETAInfo displayETAToEndOfLeg]
  -[MNDisplayETAInfo initWithDisplayETAToEndOfLeg:displayRemainingMinutesToEndOfLeg:forLegIndex:displayETAToEndOfRoute:displayRemainingMinutesToEndOfRoute:forRouteID:]
  -[MNDisplayETAInfo setDisplayETAToEndOfLeg:]
  -[MNDisplayETAInfo setDisplayRemainingMinutesToEndOfLeg:]
  -[MNDisplayETAInfo setDisplayETAToEndOfRoute:]
  -[MNDisplayETAInfo setDisplayRemainingMinutesToEndOfRoute:]
  -[MNDisplayETAInfo _isDisplayDate:equalToDisplayDate:]
  -[MNDisplayETAInfo setLegIndex:]


MNVoiceLanguageUtil : NSObject
  // class methods
  +[MNVoiceLanguageUtil systemDefaultVoiceLanguage]
  +[MNVoiceLanguageUtil _uiVoiceLanguage]


MNRouteManager : NSObject <MNLocationManagerObserver>
 @property  GEOComposedRoute *currentRoute
 @property  MNActiveRouteInfo *currentRouteInfo
 @property  NSArray *alternateRoutes
 @property  NSArray *allRoutes
 @property  NSArray *contingencyRouteSegments
 @property  NSArray *previewRoutes
 @property  unsigned long selectedRouteIndex
 @property  GEORouteAttributes *routeAttributes
 @property  GEODirectionsRequest *directionsRequest
 @property  GEODirectionsResponse *directionsResponse
 @property  GEOCommonOptions *commonOptions
 @property  NSString *requestingAppIdentifier
 @property  GEOComposedWaypoint *originalDestination
 @property  GEOComposedRoute *originalRoute
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNRouteManager locationManagerFailedToUpdateLocation:withError:]
  -[MNRouteManager updateForLocation:]
  -[MNRouteManager locationManagerDidResumeLocationUpdates:]
  -[MNRouteManager alternateRoutes]
  -[MNRouteManager locationManagerShouldPauseLocationUpdates:]
  -[MNRouteManager .cxx_destruct]
  -[MNRouteManager locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNRouteManager locationManagerDidPauseLocationUpdates:]
  -[MNRouteManager init]
  -[MNRouteManager requestingAppIdentifier]
  -[MNRouteManager currentRoute]
  -[MNRouteManager commonOptions]
  -[MNRouteManager allRoutes]
  -[MNRouteManager initWithAuditToken:]
  -[MNRouteManager locationManagerUpdatedLocation:]
  -[MNRouteManager directionsRequest]
  -[MNRouteManager setSelectedRouteIndex:]
  -[MNRouteManager selectedRouteIndex]
  -[MNRouteManager routeAttributes]
  -[MNRouteManager locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNRouteManager previewRoutes]
  -[MNRouteManager locationManagerDidReset:]
  -[MNRouteManager close]
  -[MNRouteManager dealloc]
  -[MNRouteManager originalRoute]
  -[MNRouteManager open]
  -[MNRouteManager directionsResponse]
  -[MNRouteManager originalDestination]
  -[MNRouteManager currentRouteInfo]
  -[MNRouteManager _clearPreloader]
  -[MNRouteManager updateWithAlternateRoutes:]
  -[MNRouteManager _updatePreloaderForRoute:]
  -[MNRouteManager updateWithInitialDirectionsRequest:directionsResponse:waypoints:]
  -[MNRouteManager updateWithPreviewRoutes:selectedRouteIndex:]
  -[MNRouteManager updateWithStartNavigationDetails:]
  -[MNRouteManager updateForReroute:rerouteReason:request:response:]
  -[MNRouteManager clearCurrentRoute]
  -[MNRouteManager contingencyRouteSegments]


MNNavigationSession : NSObject <GEOConfigChangeListenerDelegate, GEOMotionContextDelegate, MNAudioManagerObserver, MNGuidanceManagerDelegate, MNLocationManagerHeadingObserver, MNLocationManagerObserver, MNLocationTrackerDelegate, MNTimeAndDistanceUpdaterDelegate, MNTracePlayerObserver, MNVehicleMonitorDelegate, MNSessionUpdateManagerDelegate>
 @property  BOOL traceIsPlaying
 @property  GEOComposedWaypoint *destination
 @property  GEOApplicationAuditToken *auditToken
 @property  MNRouteManager *routeManager
 @property  GEOMotionContext *motionContext
 @property  <MNAudioProvider> *audioProvider
 @property  MNNavigationTraceManager *traceManager
 @property  BOOL isAllowedToSwitchTransportTypes
 @property  int navigationType
 @property  MNLocation *lastMatchedLocation
 @property  int navigationState
 @property  BOOL guidancePromptsEnabled
 @property  BOOL isConnectedToCarplay
 @property  unsigned long displayedStepIndex
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationSession stopCurrentGuidancePrompt]
  -[MNNavigationSession enableNavigationCapability:]
  -[MNNavigationSession setGuidancePromptsEnabled:]
  -[MNNavigationSession valueChangedForGEOConfigKey:]
  -[MNNavigationSession updateDestination:]
  -[MNNavigationSession setDisplayedStepIndex:]
  -[MNNavigationSession setJunctionViewImageWidth:height:]
  -[MNNavigationSession auditToken]
  -[MNNavigationSession setIsConnectedToCarplay:]
  -[MNNavigationSession forceReroute]
  -[MNNavigationSession locationManagerFailedToUpdateLocation:withError:]
  -[MNNavigationSession resumeOriginalDestination]
  -[MNNavigationSession disableNavigationCapability:]
  -[MNNavigationSession switchToRoute:]
  -[MNNavigationSession locationManagerDidResumeLocationUpdates:]
  -[MNNavigationSession guidancePromptsEnabled]
  -[MNNavigationSession locationManagerShouldPauseLocationUpdates:]
  -[MNNavigationSession .cxx_destruct]
  -[MNNavigationSession locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationSession locationManagerDidPauseLocationUpdates:]
  -[MNNavigationSession destination]
  -[MNNavigationSession locationManagerUpdatedHeading:]
  -[MNNavigationSession init]
  -[MNNavigationSession isConnectedToCarplay]
  -[MNNavigationSession displayedStepIndex]
  -[MNNavigationSession locationManagerUpdatedLocation:]
  -[MNNavigationSession traceIsPlaying]
  -[MNNavigationSession addObserver:]
  -[MNNavigationSession navigationState]
  -[MNNavigationSession navigationType]
  -[MNNavigationSession setAudioProvider:]
  -[MNNavigationSession audioProvider]
  -[MNNavigationSession locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationSession setIsNavigatingInLowGuidance:]
  -[MNNavigationSession motionContextDidUpdateMotion:]
  -[MNNavigationSession locationManagerDidReset:]
  -[MNNavigationSession dealloc]
  -[MNNavigationSession motionContext]
  -[MNNavigationSession removeObserver:]
  -[MNNavigationSession routeManager]
  -[MNNavigationSession _stopAudioSession]
  -[MNNavigationSession _startAudioSession]
  -[MNNavigationSession locationTracker:didChangeState:]
  -[MNNavigationSession locationTracker:didEnterPreArrivalStateForWaypoint:endOfLegIndex:]
  -[MNNavigationSession locationTracker:didArriveAtWaypoint:endOfLegIndex:]
  -[MNNavigationSession locationTracker:didResumeNavigatingFromWaypoint:endOfLegIndex:]
  -[MNNavigationSession locationTrackerDidEnterPreArrivalState:]
  -[MNNavigationSession locationTrackerDidArrive:]
  -[MNNavigationSession locationTrackerDidTimeoutInArrivalRegion:]
  -[MNNavigationSession locationTracker:didUpdateMatchedLocation:]
  -[MNNavigationSession locationTracker:matchedToStepIndex:segmentIndex:]
  -[MNNavigationSession locationTracker:didReachETAUpdatePosition:]
  -[MNNavigationSession locationTracker:didUpdateETAForRoute:]
  -[MNNavigationSession locationTrackerWillReroute:]
  -[MNNavigationSession locationTracker:didSuppressReroute:]
  -[MNNavigationSession locationTrackerDidCancelReroute:]
  -[MNNavigationSession locationTracker:didReroute:newAlternateRoutes:rerouteReason:request:response:]
  -[MNNavigationSession locationTracker:didFailRerouteWithError:]
  -[MNNavigationSession locationTracker:didUpdateAlternateRoutes:]
  -[MNNavigationSession locationTracker:didSwitchToNewTransportType:newRoute:request:response:]
  -[MNNavigationSession locationTracker:receivedTrafficIncidentAlert:responseCallback:]
  -[MNNavigationSession locationTracker:invalidatedTrafficIncidentAlert:]
  -[MNNavigationSession locationTracker:updatedTrafficIncidentAlert:]
  -[MNNavigationSession locationTracker:shouldShowChargingInfoForWaypoint:]
  -[MNNavigationSession locationTracker:didReceiveTransitAlert:]
  -[MNNavigationSession locationTracker:didReceiveRouteSignalStrength:]
  -[MNNavigationSession lastMatchedLocation]
  -[MNNavigationSession traceJumpedInTime]
  -[MNNavigationSession updateManager:willSendETARequest:]
  -[MNNavigationSession routeInfoForUpdateManager:]
  -[MNNavigationSession userLocationForUpdateManager:]
  -[MNNavigationSession traceManager]
  -[MNNavigationSession timeSinceLastAnnouncement]
  -[MNNavigationSession timeUntilNextAnnouncement]
  -[MNNavigationSession isCurrentlySpeaking]
  -[MNNavigationSession tracePlayerDidStart:]
  -[MNNavigationSession tracePlayerDidStop:]
  -[MNNavigationSession tracePlayerDidPause:]
  -[MNNavigationSession tracePlayerDidResume:]
  -[MNNavigationSession tracePlayer:didSeekToTransportType:]
  -[MNNavigationSession tracePlayer:didSeekToTime:fromTime:location:]
  -[MNNavigationSession tracePlayer:didPlayAtTime:]
  -[MNNavigationSession tracePlayer:didJumpToRouteResponse:request:origin:destination:]
  -[MNNavigationSession tracePlayerDidStayOnRoute:]
  -[MNNavigationSession tracePlayer:didUpdateLocation:]
  -[MNNavigationSession tracePlayer:didReceiveLocationError:]
  -[MNNavigationSession tracePlayerDidPauseLocationUpdates:]
  -[MNNavigationSession tracePlayerDidResumeLocationUpdates:]
  -[MNNavigationSession tracePlayer:didUpdateHeading:]
  -[MNNavigationSession tracePlayer:didUpdateMotion:exitType:confidence:]
  -[MNNavigationSession tracePlayer:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationSession tracePlayer:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationSession vehicleMonitorDidDisconnectFromVehicle:]
  -[MNNavigationSession guidanceManagerBeginGuidanceUpdate:]
  -[MNNavigationSession guidanceManagerEndGuidanceUpdate:]
  -[MNNavigationSession guidanceManager:willProcessSpeechEvent:]
  -[MNNavigationSession guidanceManager:updatedGuidanceEventFeedback:]
  -[MNNavigationSession guidanceManager:didProcessSpeechEvent:]
  -[MNNavigationSession guidanceManager:announce:isImportant:shortPromptType:ignorePromptStyle:stage:completionBlock:]
  -[MNNavigationSession durationForAnnouncement:]
  -[MNNavigationSession guidanceManager:willAnnounce:inSeconds:]
  -[MNNavigationSession guidanceManager:triggerHaptics:]
  -[MNNavigationSession guidanceManager:showLaneDirections:]
  -[MNNavigationSession guidanceManager:hideLaneDirectionsForId:]
  -[MNNavigationSession guidanceManager:updateSignsWithInfo:]
  -[MNNavigationSession guidanceManager:updateSignsWithARInfo:]
  -[MNNavigationSession guidanceManager:usePersistentDisplay:]
  -[MNNavigationSession guidanceManager:hideJunctionViewForId:]
  -[MNNavigationSession guidanceManager:showJunctionView:]
  -[MNNavigationSession guidanceManager:newGuidanceEventFeedback:]
  -[MNNavigationSession updateWithInitialLocation:]
  -[MNNavigationSession repeatCurrentGuidance]
  -[MNNavigationSession repeatCurrentTrafficAlert]
  -[MNNavigationSession vibrateForPrompt:]
  -[MNNavigationSession timeAndDistanceUpdater:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationSession timeAndDistanceUpdater:didUpdateDisplayETA:remainingDistance:]
  -[MNNavigationSession _stopLocationUpdates]
  -[MNNavigationSession _closeTileLoader]
  -[MNNavigationSession _openTileLoader]
  -[MNNavigationSession _startLocationUpdates]
  -[MNNavigationSession _startMotionUpdates]
  -[MNNavigationSession _startTravelTimeUpdates]
  -[MNNavigationSession _startGuidanceAllowMidRouteStart:announcementsToIgnore:]
  -[MNNavigationSession _startVirtualGarageUpdates]
  -[MNNavigationSession _startLocationTracking]
  -[MNNavigationSession _stopLocationTracking]
  -[MNNavigationSession _stopGuidance]
  -[MNNavigationSession _stopTravelTimeUpdates]
  -[MNNavigationSession _stopMotionUpdates]
  -[MNNavigationSession _stopVirtualGarageUpdates]
  -[MNNavigationSession _locationTrackerForTransportType:navigationType:]
  -[MNNavigationSession didChangeUserOptionsFrom:to:]
  -[MNNavigationSession audioManager:didActivateAudioSession:]
  -[MNNavigationSession audioManager:didStartSpeakingPrompt:]
  -[MNNavigationSession updateManager:willSendTransitUpdateRequests:]
  -[MNNavigationSession updateManager:didReceiveTransitUpdateResponse:]
  -[MNNavigationSession updateManager:willSendTransitUpdateRequestForRouteIDs:]
  -[MNNavigationSession updateManager:didReceiveTransitUpdates:]
  -[MNNavigationSession updateManager:didReceiveTransitError:]
  -[MNNavigationSession updateManager:didReceiveETAResponse:]
  -[MNNavigationSession wantsETAUpdates]
  -[MNNavigationSession initWithRouteManager:auditToken:traceManager:]
  -[MNNavigationSession startNavigationSessionWithDetails:]
  -[MNNavigationSession stopNavigationSessionWithReason:]
  -[MNNavigationSession _transitStopAtStopIndex:]
  -[MNNavigationSession isAllowedToSwitchTransportTypes]


MNTunnelLocationProjector : NSObject
 @property  <MNTunnelLocationProjectorDelegate> *delegate
 @property  BOOL isProjecting

  // instance methods
  -[MNTunnelLocationProjector .cxx_destruct]
  -[MNTunnelLocationProjector stop]
  -[MNTunnelLocationProjector setDelegate:]
  -[MNTunnelLocationProjector init]
  -[MNTunnelLocationProjector updateLocation:]
  -[MNTunnelLocationProjector delegate]
  -[MNTunnelLocationProjector dealloc]
  -[MNTunnelLocationProjector isProjecting]
  -[MNTunnelLocationProjector updateForRouteInfo:]
  -[MNTunnelLocationProjector _resetTimerWithTimeout:]
  -[MNTunnelLocationProjector _tunnelRanges]
  -[MNTunnelLocationProjector _locationUpdateOverdueTimerFired:]
  -[MNTunnelLocationProjector _tunnelRangeForRouteCoordinate:]
  -[MNTunnelLocationProjector _projectedLocationFrom:timeInterval:tunnelRange:]
  -[MNTunnelLocationProjector _projectedRouteCoordinateFrom:timeInterval:tunnelRange:]


MNPhoneCallObserver : NSObject
  // class methods
  +[MNPhoneCallObserver sharedPhoneCallObserver]

  // instance methods
  -[MNPhoneCallObserver .cxx_destruct]
  -[MNPhoneCallObserver _startObserving]
  -[MNPhoneCallObserver init]
  -[MNPhoneCallObserver dealloc]
  -[MNPhoneCallObserver hasActiveCalls]
  -[MNPhoneCallObserver _isActiveCall:]


MNXPCActivity : NSObject
 @property  NSString *identifier
 @property  BOOL repeat
 @property  BOOL shouldWakeDevice
 @property  BOOL useCoreDuetPowerBudgeting
 @property  BOOL runOnBattery
 @property  double tolerance
 @property  unsigned long qualityOfService
 @property  unsigned long networkRequirements
 @property  NSDate *scheduledDate

  // class methods
  +[MNXPCActivity checkInActivity:codeBlock:]

  // instance methods
  -[MNXPCActivity tolerance]
  -[MNXPCActivity qualityOfService]
  -[MNXPCActivity remainingTime]
  -[MNXPCActivity .cxx_destruct]
  -[MNXPCActivity repeat]
  -[MNXPCActivity init]
  -[MNXPCActivity identifier]
  -[MNXPCActivity scheduledDate]
  -[MNXPCActivity invalidate]
  -[MNXPCActivity scheduleForDate:codeBlock:]
  -[MNXPCActivity initWithIdentifier:repeat:shouldWakeDevice:useCoreDuetPowerBudgeting:runOnBattery:tolerance:qualityOfService:networkRequirements:]
  -[MNXPCActivity _needsNetworkRequirement:]
  -[MNXPCActivity shouldWakeDevice]
  -[MNXPCActivity useCoreDuetPowerBudgeting]
  -[MNXPCActivity runOnBattery]
  -[MNXPCActivity networkRequirements]


MNNavigationServicePeer : GEONavdPeer
 @property  NSString *peerIdentifier
 @property  int processIdentifier

  // instance methods
  -[MNNavigationServicePeer isEntitled]
  -[MNNavigationServicePeer auditToken]
  -[MNNavigationServicePeer clearConnection]
  -[MNNavigationServicePeer .cxx_destruct]
  -[MNNavigationServicePeer initWithConnection:]
  -[MNNavigationServicePeer peerIdentifier]
  -[MNNavigationServicePeer processIdentifier]


MNButtonActionTitle : NSObject <NSSecureCoding>
 @property  unsigned long action
 @property  NSString *title
 @property  int buttonDisplay

  // class methods
  +[MNButtonActionTitle supportsSecureCoding]

  // instance methods
  -[MNButtonActionTitle initWithCoder:]
  -[MNButtonActionTitle .cxx_destruct]
  -[MNButtonActionTitle action]
  -[MNButtonActionTitle buttonDisplay]
  -[MNButtonActionTitle title]
  -[MNButtonActionTitle encodeWithCoder:]
  -[MNButtonActionTitle initWithAction:withTitle:buttonDisplay:]


MNTrafficIncidentAlert : NSObject <NSSecureCoding>
 @property  double newEstimatedTime
 @property  double oldEstimatedTime
 @property  double oldHistoricTime
 @property  NSMutableArray *oldRouteIncidents
 @property  NSData *alertID
 @property  NSData *etaResponseID
 @property  NSString *bannerID
 @property  unsigned long alertType
 @property  BOOL shouldShowTimer
 @property  NSString *bannerDescription
 @property  double distanceToIncident
 @property  NSArray *alertTitles
 @property  NSArray *alertDescriptions
 @property  NSArray *spokenTexts
 @property  GEORouteIncident *incident
 @property  MNActiveRouteInfo *mainRouteInfo
 @property  GEOComposedRoute *originalRoute
 @property  GEONavigabilityInfo *originalRouteNavigability
 @property  MNActiveRouteInfo *alternateRouteInfo
 @property  GEOComposedRoute *alternateRoute
 @property  {?=If} startValidCoordinateRange
 @property  {?=If} endValidCoordinateRange
 @property  {?=If} incidentCoordinate
 @property  {?=If} alternateEndValidCoordinateRange
 @property  NSDate *alertDate
 @property  double alertDisplayDuration
 @property  BOOL isAutomaticReroute
 @property  BOOL isReroute
 @property  unsigned long secondsSaved
 @property  int previousBannerChange
 @property  GEOPBTransitArtwork *artwork
 @property  NSString *analyticsMessage

  // class methods
  +[MNTrafficIncidentAlert supportsSecureCoding]
  +[MNTrafficIncidentAlert validTrafficIncidentAlertForMainRouteInfo:alternateRouteInfo:]

  // instance methods
  -[MNTrafficIncidentAlert alertType]
  -[MNTrafficIncidentAlert artwork]
  -[MNTrafficIncidentAlert initWithCoder:]
  -[MNTrafficIncidentAlert .cxx_destruct]
  -[MNTrafficIncidentAlert oldRouteIncidents]
  -[MNTrafficIncidentAlert bannerDescription]
  -[MNTrafficIncidentAlert previousBannerChange]
  -[MNTrafficIncidentAlert secondsSaved]
  -[MNTrafficIncidentAlert shouldShowTimer]
  -[MNTrafficIncidentAlert dismissButtonTitle]
  -[MNTrafficIncidentAlert incident]
  -[MNTrafficIncidentAlert updateLocation:]
  -[MNTrafficIncidentAlert isReroute]
  -[MNTrafficIncidentAlert alertID]
  -[MNTrafficIncidentAlert originalRoute]
  -[MNTrafficIncidentAlert encodeWithCoder:]
  -[MNTrafficIncidentAlert bannerID]
  -[MNTrafficIncidentAlert alternateRoute]
  -[MNTrafficIncidentAlert mainRouteInfo]
  -[MNTrafficIncidentAlert alternateRouteInfo]
  -[MNTrafficIncidentAlert etaResponseID]
  -[MNTrafficIncidentAlert startValidCoordinateRange]
  -[MNTrafficIncidentAlert endValidCoordinateRange]
  -[MNTrafficIncidentAlert alternateEndValidCoordinateRange]
  -[MNTrafficIncidentAlert updateAlertIDWithAlert:]
  -[MNTrafficIncidentAlert distanceToIncident]
  -[MNTrafficIncidentAlert setDistanceToIncident:]
  -[MNTrafficIncidentAlert spokenTexts]
  -[MNTrafficIncidentAlert _initWithGeoTrafficBannerText:mainRouteInfo:alternateRouteInfo:]
  -[MNTrafficIncidentAlert _dynamicStringValues]
  -[MNTrafficIncidentAlert _buttonDisplayForAlertAction:]
  -[MNTrafficIncidentAlert buttonActionTitles]
  -[MNTrafficIncidentAlert _buttonTitleForAlertAction:]
  -[MNTrafficIncidentAlert _alertTypeForGeoBannerStyle:]
  -[MNTrafficIncidentAlert _initRouteCoordinates]
  -[MNTrafficIncidentAlert _populateServerFields:]
  -[MNTrafficIncidentAlert _routeCoordinateOnRoute:distanceFromEnd:]
  -[MNTrafficIncidentAlert isAutomaticReroute]
  -[MNTrafficIncidentAlert _stringForAlertType:]
  -[MNTrafficIncidentAlert _populateButtonActionAndTitles:]
  -[MNTrafficIncidentAlert alertTitles]
  -[MNTrafficIncidentAlert alertDescriptions]
  -[MNTrafficIncidentAlert originalRouteNavigability]
  -[MNTrafficIncidentAlert alertDisplayDuration]
  -[MNTrafficIncidentAlert acceptButtonDisplay]
  -[MNTrafficIncidentAlert dismissButtonDisplay]
  -[MNTrafficIncidentAlert acceptButtonTitle]
  -[MNTrafficIncidentAlert incidentCoordinate]
  -[MNTrafficIncidentAlert alertDate]
  -[MNTrafficIncidentAlert analyticsMessage]
  -[MNTrafficIncidentAlert newEstimatedTime]
  -[MNTrafficIncidentAlert oldEstimatedTime]
  -[MNTrafficIncidentAlert oldHistoricTime]


MNTimeballServicePeer : MNNavigationServicePeer
  // class methods
  +[MNTimeballServicePeer logCategory]

  // instance methods
  -[MNTimeballServicePeer dealloc]


MNTimeballLocalPeer : MNTimeballServicePeer
  // class methods
  +[MNTimeballLocalPeer logCategory]

  // instance methods
  -[MNTimeballLocalPeer hasEntitlement:]
  -[MNTimeballLocalPeer initWithClientIdentifier:]


MNTimeManager : NSObject
 @property  <MNTimeProvider> *provider

  // class methods
  +[MNTimeManager currentDate]
  +[MNTimeManager sharedManager]
  +[MNTimeManager currentTime]

  // instance methods
  -[MNTimeManager setProvider:]
  -[MNTimeManager .cxx_destruct]
  -[MNTimeManager init]
  -[MNTimeManager addObserver:]
  -[MNTimeManager provider]
  -[MNTimeManager removeObserver:]
  -[MNTimeManager _resetToDefaultProvider]


MNGuidanceLaneInfo : NSObject <NSSecureCoding>
 @property  NSUUID *uniqueID
 @property  BOOL isForManeuver
 @property  NSArray *lanes
 @property  NSArray *titles
 @property  NSArray *instructions
 @property  NSDictionary *variableOverrides
 @property  long long distanceDetailLevel
 @property  int composedGuidanceEventIndex

  // class methods
  +[MNGuidanceLaneInfo supportsSecureCoding]

  // instance methods
  -[MNGuidanceLaneInfo lanes]
  -[MNGuidanceLaneInfo titles]
  -[MNGuidanceLaneInfo initWithCoder:]
  -[MNGuidanceLaneInfo uniqueID]
  -[MNGuidanceLaneInfo .cxx_destruct]
  -[MNGuidanceLaneInfo instructions]
  -[MNGuidanceLaneInfo variableOverrides]
  -[MNGuidanceLaneInfo encodeWithCoder:]
  -[MNGuidanceLaneInfo initWithID:isForManeuver:lanes:titles:instructions:variableOverrides:distanceDetailLevel:composedGuidanceEventIndex:]
  -[MNGuidanceLaneInfo distanceDetailLevel]
  -[MNGuidanceLaneInfo composedGuidanceEventIndex]
  -[MNGuidanceLaneInfo isForManeuver]


MNNavigationSessionLogger : NSObject <MNNavigationSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationSessionLogger .cxx_destruct]
  -[MNNavigationSessionLogger init]
  -[MNNavigationSessionLogger navigationSession:didStartWithRoute:navigationType:isReconnecting:]
  -[MNNavigationSessionLogger navigationSession:didChangeNavigationState:]
  -[MNNavigationSessionLogger navigationSession:didStopWithReason:]
  -[MNNavigationSessionLogger navigationSession:didUpdateMatchedLocation:]
  -[MNNavigationSessionLogger navigationSession:matchedToStepIndex:segmentIndex:]
  -[MNNavigationSessionLogger navigationSession:didEnterPreArrivalStateForWaypoint:endOfLegIndex:]
  -[MNNavigationSessionLogger navigationSession:didArriveAtWaypoint:endOfLegIndex:]
  -[MNNavigationSessionLogger navigationSession:didResumeNavigatingFromWaypoint:endOfLegIndex:]
  -[MNNavigationSessionLogger navigationSessionDidEnterPreArrivalState:]
  -[MNNavigationSessionLogger navigationSessionDidArrive:]
  -[MNNavigationSessionLogger navigationSession:didUpdateDisplayETA:remainingDistance:]
  -[MNNavigationSessionLogger navigationSession:didUpdateETAResponseForRoute:]
  -[MNNavigationSessionLogger navigationSessionWillReroute:]
  -[MNNavigationSessionLogger navigationSession:didSuppressReroute:]
  -[MNNavigationSessionLogger navigationSessionDidCancelReroute:]
  -[MNNavigationSessionLogger navigationSession:didReroute:withLocation:withAlternateRoutes:rerouteReason:]
  -[MNNavigationSessionLogger navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationSessionLogger navigationSession:didUpdateDestination:]
  -[MNNavigationSessionLogger navigationSession:didFailRerouteWithError:]
  -[MNNavigationSessionLogger navigationSession:didUpdateAlternateRoutes:]
  -[MNNavigationSessionLogger navigationSession:updateSignsWithInfo:]
  -[MNNavigationSessionLogger navigationSession:updateSignsWithARInfo:]
  -[MNNavigationSessionLogger navigationSession:didReceiveTrafficIncidentAlert:responseCallback:]
  -[MNNavigationSessionLogger _stringForLocationType:]
  -[MNNavigationSessionLogger _updateCameraStyleAttributesForLocation:]
  -[MNNavigationSessionLogger _stringForStyleAttributeKey:]


MNNavigationClientProxy : NSObject
  // instance methods
  -[MNNavigationClientProxy .cxx_destruct]
  -[MNNavigationClientProxy init]
  -[MNNavigationClientProxy requestDirections:withIdentifier:handler:]
  -[MNNavigationClientProxy cancelDirectionsRequestWithIdentifier:]
  -[MNNavigationClientProxy _directionsRequestManager]


MNTimeballMockNetworkRequester : MNTimeballNetworkRequester
  // class methods
  +[MNTimeballMockNetworkRequester setExpectedRouteUpdate:]

  // instance methods
  -[MNTimeballMockNetworkRequester requestRoutingOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]


MNArrivalUpdater : NSObject <MNArrivalRegionTimerDelegate>
 @property  BOOL isInPreArrivalRegion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNArrivalUpdater updateForLocation:]
  -[MNArrivalUpdater .cxx_destruct]
  -[MNArrivalUpdater setDelegate:]
  -[MNArrivalUpdater init]
  -[MNArrivalUpdater updateForRoute:]
  -[MNArrivalUpdater arrivalRegionTimerDidFire:]
  -[MNArrivalUpdater initWithRoute:useLegacyArrival:]
  -[MNArrivalUpdater isInPreArrivalRegion]
  -[MNArrivalUpdater allowDepartureForLocation:]
  -[MNArrivalUpdater updateForDepartureFromWaypoint]
  -[MNArrivalUpdater setIsCharging:location:]
  -[MNArrivalUpdater _shouldUseNewArrivalLogic]
  -[MNArrivalUpdater _legacyCheckArrivalForLocation:]
  -[MNArrivalUpdater _checkArrival:forLocation:]
  -[MNArrivalUpdater _setArrivalForLegIndex:]
  -[MNArrivalUpdater _checkPreArrival:forLocation:]
  -[MNArrivalUpdater _checkApproachingForLocation:]
  -[MNArrivalUpdater _distanceToEndOfLeg:fromLocation:]
  -[MNArrivalUpdater _legacyCheckDrivingArrivalForLocation:]
  -[MNArrivalUpdater _legacyCheckNonDrivingArrivalForLocation:]


MNTraceLoader : NSObject
  // instance methods
  -[MNTraceLoader trace]
  -[MNTraceLoader .cxx_destruct]
  -[MNTraceLoader loadTraceWithPath:outError:]
  -[MNTraceLoader loadTraceWithPath:options:outError:]
  -[MNTraceLoader _loadTraceVersion]
  -[MNTraceLoader _updateTraceFromVersion:outError:]
  -[MNTraceLoader _loadInfoTable]
  -[MNTraceLoader _loadLocationsTable:]
  -[MNTraceLoader _loadDirectionsTable]
  -[MNTraceLoader _loadETAUpdatesTable]
  -[MNTraceLoader _loadCompassHeadingDataTable]
  -[MNTraceLoader _loadMotionDataTable]
  -[MNTraceLoader _loadVehicleDataTable]
  -[MNTraceLoader _loadEVDataTable]
  -[MNTraceLoader _loadNavigationEventsTable]
  -[MNTraceLoader _loadAnnotatedUserBehaviorTable]
  -[MNTraceLoader _loadAnnotatedUserEnvironmentTable]
  -[MNTraceLoader _loadMiscInfo]
  -[MNTraceLoader loadExtraData]
  -[MNTraceLoader _executeQuery:rowHandler:]
  -[MNTraceLoader _tableExists:]
  -[MNTraceLoader _handleUpdateError]


MNListInstructionContents : NSObject <MNInstructionContents>
 @property  int transportType
 @property  double distance
 @property  <GEOServerFormattedString> *distanceFormat
 @property  NSArray *instructionFormats
 @property  GEOComposedWaypoint *destination
 @property  NSString *destinationName
 @property  long long context
 @property  BOOL suppressNames
 @property  NSString *roadName
 @property  BOOL hasServerContent
 @property  BOOL suppressFallback

  // class methods
  +[MNListInstructionContents contentsWithStep:]

  // instance methods
  -[MNListInstructionContents setTransportType:]
  -[MNListInstructionContents transportType]
  -[MNListInstructionContents setDestination:]
  -[MNListInstructionContents .cxx_destruct]
  -[MNListInstructionContents destination]
  -[MNListInstructionContents destinationName]
  -[MNListInstructionContents setDestinationName:]
  -[MNListInstructionContents init]
  -[MNListInstructionContents setRoadName:]
  -[MNListInstructionContents roadName]
  -[MNListInstructionContents setDistance:]
  -[MNListInstructionContents distance]
  -[MNListInstructionContents instruction]
  -[MNListInstructionContents context]
  -[MNListInstructionContents _populateFromStep:]
  -[MNListInstructionContents setDistanceFormat:]
  -[MNListInstructionContents _instructionsForFormats:]
  -[MNListInstructionContents stringForDistance:]
  -[MNListInstructionContents instructionWithShorterAlternatives]
  -[MNListInstructionContents instructionForStage:distance:]
  -[MNListInstructionContents suppressNames]
  -[MNListInstructionContents setSuppressNames:]
  -[MNListInstructionContents hasServerContent]
  -[MNListInstructionContents suppressFallback]
  -[MNListInstructionContents setSuppressFallback:]
  -[MNListInstructionContents setInstructionFormats:]
  -[MNListInstructionContents instructionFormats]
  -[MNListInstructionContents distanceFormat]


MNVirtualGarageManager : NSObject <MNVirtualGarageProviderDelegate>
 @property  VGVehicle *lastVehicleState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNVirtualGarageManager sharedManager]

  // instance methods
  -[MNVirtualGarageManager initPrivate]
  -[MNVirtualGarageManager setProvider:]
  -[MNVirtualGarageManager unregisterObserver:]
  -[MNVirtualGarageManager registerObserver:]
  -[MNVirtualGarageManager .cxx_destruct]
  -[MNVirtualGarageManager stop]
  -[MNVirtualGarageManager start]
  -[MNVirtualGarageManager dealloc]
  -[MNVirtualGarageManager setTraceRecorder:]
  -[MNVirtualGarageManager virtualGarageProvider:didUpdateSelectedVehicle:]
  -[MNVirtualGarageManager _standardVirtualGarageProvider]
  -[MNVirtualGarageManager _isStandardProvider:]
  -[MNVirtualGarageManager lastVehicleState]


MNAudioPathwayResourceAccess : NSObject
 @property  NSDictionary *hfpRoute
 @property  BOOL enableHFPUse
 @property  BOOL wantsVolumeControl

  // instance methods
  -[MNAudioPathwayResourceAccess .cxx_destruct]
  -[MNAudioPathwayResourceAccess addObserver:]
  -[MNAudioPathwayResourceAccess dealloc]
  -[MNAudioPathwayResourceAccess removeObserver:]
  -[MNAudioPathwayResourceAccess hfpRoute]
  -[MNAudioPathwayResourceAccess _registerForObservation]
  -[MNAudioPathwayResourceAccess initWithHFPEnabled:]
  -[MNAudioPathwayResourceAccess setEnableHFPUse:]
  -[MNAudioPathwayResourceAccess setWantsVolumeControl:]
  -[MNAudioPathwayResourceAccess _updateHFPRoute]
  -[MNAudioPathwayResourceAccess setHfpRoute:]
  -[MNAudioPathwayResourceAccess _mediaServerConnectionDied]
  -[MNAudioPathwayResourceAccess _pickableRoutesChanged]
  -[MNAudioPathwayResourceAccess _unregisterForObservation]
  -[MNAudioPathwayResourceAccess _findUsableRouteWithHandler:]
  -[MNAudioPathwayResourceAccess _routeIsUsable:]
  -[MNAudioPathwayResourceAccess _otherAudioIsPlaying]
  -[MNAudioPathwayResourceAccess _routeIsAirTunes:]
  -[MNAudioPathwayResourceAccess _routeIsOverride:]
  -[MNAudioPathwayResourceAccess _routeIsHFP:]
  -[MNAudioPathwayResourceAccess _routeIsForVehicle:]
  -[MNAudioPathwayResourceAccess _routeIsBluetooth:]
  -[MNAudioPathwayResourceAccess _routeIsWireless:]
  -[MNAudioPathwayResourceAccess enableHFPUse]
  -[MNAudioPathwayResourceAccess wantsVolumeControl]


MNActiveRouteInfo : NSObject <NSSecureCoding>
 @property  NSUUID *routeID
 @property  GEOComposedRoute *route
 @property  GEOComposedETARoute *etaRoute
 @property  GEOETATrafficUpdateResponse *etaResponse
 @property  GEOComposedRouteTraffic *traffic
 @property  MNDisplayETAInfo *displayETAInfo
 @property  MNRouteDistanceInfo *remainingDistanceInfo
 @property  unsigned long alternateRouteIndex
 @property  GEOTransitRouteUpdateRequest *transitRouteUpdateRequest

  // class methods
  +[MNActiveRouteInfo supportsSecureCoding]

  // instance methods
  -[MNActiveRouteInfo remainingDistanceInfo]
  -[MNActiveRouteInfo initWithCoder:]
  -[MNActiveRouteInfo route]
  -[MNActiveRouteInfo etaRoute]
  -[MNActiveRouteInfo .cxx_destruct]
  -[MNActiveRouteInfo traffic]
  -[MNActiveRouteInfo routeID]
  -[MNActiveRouteInfo setEtaResponse:]
  -[MNActiveRouteInfo displayETAInfo]
  -[MNActiveRouteInfo initWithRoute:]
  -[MNActiveRouteInfo setRoute:]
  -[MNActiveRouteInfo transitRouteUpdateRequest]
  -[MNActiveRouteInfo etaResponse]
  -[MNActiveRouteInfo encodeWithCoder:]
  -[MNActiveRouteInfo setAlternateRouteIndex:]
  -[MNActiveRouteInfo alternateRouteIndex]
  -[MNActiveRouteInfo setDisplayETAInfo:]
  -[MNActiveRouteInfo setRemainingDistanceInfo:]
  -[MNActiveRouteInfo setEtaRoute:]
  -[MNActiveRouteInfo initWithRoute:trafficRoute:routeInitalizerData:]


MNNavigationStateManager : NSObject <MNNavigationStateInterface>
 @property  GEOApplicationAuditToken *auditToken
 @property  <MNNavigationSessionManagerDelegate> *navigationDelegate
 @property  BOOL isStarted
 @property  MNNavigationState *currentState
 @property  unsigned long currentStateType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNavigationStateManager sharedManager]

  // instance methods
  -[MNNavigationStateManager repeatCurrentGuidanceWithReply:]
  -[MNNavigationStateManager setTracePosition:]
  -[MNNavigationStateManager startNavigationWithDetails:activeBlock:]
  -[MNNavigationStateManager stopCurrentGuidancePrompt]
  -[MNNavigationStateManager stopNavigationWithReason:]
  -[MNNavigationStateManager resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateManager vibrateForPrompt:withReply:]
  -[MNNavigationStateManager setTracePlaybackSpeed:]
  -[MNNavigationStateManager recordPedestrianTracePath:]
  -[MNNavigationStateManager enableNavigationCapability:]
  -[MNNavigationStateManager setGuidancePromptsEnabled:]
  -[MNNavigationStateManager setTraceIsPlaying:]
  -[MNNavigationStateManager interfaceHashesWithHandler:]
  -[MNNavigationStateManager updateDestination:]
  -[MNNavigationStateManager acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationStateManager changeUserOptions:]
  -[MNNavigationStateManager setDisplayedStepIndex:]
  -[MNNavigationStateManager setJunctionViewImageWidth:height:]
  -[MNNavigationStateManager auditToken]
  -[MNNavigationStateManager pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateManager setRideIndex:forSegmentIndex:]
  -[MNNavigationStateManager repeatCurrentTrafficAlertWithReply:]
  -[MNNavigationStateManager recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationStateManager setIsConnectedToCarplay:]
  -[MNNavigationStateManager setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationStateManager forceReroute]
  -[MNNavigationStateManager setGuidanceType:]
  -[MNNavigationStateManager resumeOriginalDestination]
  -[MNNavigationStateManager disableNavigationCapability:]
  -[MNNavigationStateManager switchToRoute:]
  -[MNNavigationStateManager checkinForNavigationService:]
  -[MNNavigationStateManager .cxx_destruct]
  -[MNNavigationStateManager setHeadingOrientation:]
  -[MNNavigationStateManager isStarted]
  -[MNNavigationStateManager locationManager:didUpdateVehicleHeading:timestamp:]
  -[MNNavigationStateManager _initialState]
  -[MNNavigationStateManager init]
  -[MNNavigationStateManager _stateTypeForState:]
  -[MNNavigationStateManager _replayStateForNewObserver:]
  -[MNNavigationStateManager reset]
  -[MNNavigationStateManager addObserver:]
  -[MNNavigationStateManager currentState]
  -[MNNavigationStateManager navSessionDestination]
  -[MNNavigationStateManager locationManager:didUpdateVehicleSpeed:timestamp:]
  -[MNNavigationStateManager start]
  -[MNNavigationStateManager transitionToState:]
  -[MNNavigationStateManager currentStateType]
  -[MNNavigationStateManager dealloc]
  -[MNNavigationStateManager removeObserver:]
  -[MNNavigationStateManager navigationDelegate]
  -[MNNavigationStateManager setNavigationDelegate:]
  -[MNNavigationStateManager setCurrentState:]
  -[MNNavigationStateManager _changeToDesiredLocationProviderTypeForState:]


MNSessionUpdateManager : NSObject <GEOTransitRouteUpdaterDelegate>
 @property  <MNSessionUpdateManagerDelegate> *delegate
 @property  NSString *requestingAppIdentifier
 @property  GEOApplicationAuditToken *auditToken
 @property  GEODataRequestThrottlerToken *throttleToken
 @property  unsigned long maxAlternateRoutesCount
 @property  GEOLatLng *tripOrigin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNSessionUpdateManager auditToken]
  -[MNSessionUpdateManager setAuditToken:]
  -[MNSessionUpdateManager .cxx_destruct]
  -[MNSessionUpdateManager setDelegate:]
  -[MNSessionUpdateManager throttleToken]
  -[MNSessionUpdateManager init]
  -[MNSessionUpdateManager maxAlternateRoutesCount]
  -[MNSessionUpdateManager stopUpdateRequests]
  -[MNSessionUpdateManager requestingAppIdentifier]
  -[MNSessionUpdateManager setRequestingAppIdentifier:]
  -[MNSessionUpdateManager setTripOrigin:]
  -[MNSessionUpdateManager delegate]
  -[MNSessionUpdateManager transitRouteUpdater:willSendRequests:]
  -[MNSessionUpdateManager transitRouteUpdater:willUpdateTransitForRouteIDs:]
  -[MNSessionUpdateManager transitRouteUpdater:didFailUpdateForRouteIDs:withError:]
  -[MNSessionUpdateManager transitRouteUpdater:didReceiveResponse:]
  -[MNSessionUpdateManager transitRouteUpdater:didUpdateTransitRoutes:]
  -[MNSessionUpdateManager dealloc]
  -[MNSessionUpdateManager tripOrigin]
  -[MNSessionUpdateManager setMaxAlternateRoutesCount:]
  -[MNSessionUpdateManager _handleETAResponse:forRouteInfo:etaRoute:]
  -[MNSessionUpdateManager startUpdateRequestsForRoutes:andNavigationType:]
  -[MNSessionUpdateManager _scheduleETATimerWithInterval:]
  -[MNSessionUpdateManager _terminateETARequests]
  -[MNSessionUpdateManager _continueETARequests]
  -[MNSessionUpdateManager _sendETARequest]
  -[MNSessionUpdateManager _hasAtLeastOneActiveSubscriber]
  -[MNSessionUpdateManager _sendETARequestWithRouteAttributes:]
  -[MNSessionUpdateManager _baseETARequest]
  -[MNSessionUpdateManager _updateETARequest:withRouteInfo:andUserLocation:]
  -[MNSessionUpdateManager _updateRouteAttributesFor:route:updatedLocation:completion:]
  -[MNSessionUpdateManager restartUpdateTimer]
  -[MNSessionUpdateManager requestUpdateForETAUPosition:]
  -[MNSessionUpdateManager pauseUpdateRequestsForSubscriber:]
  -[MNSessionUpdateManager resumeUpdateRequestsForSubscriber:]
  -[MNSessionUpdateManager setThrottleToken:]


MNSessionUpdateResponseInfo : NSObject
 @property  GEOETATrafficUpdateRequest *request
 @property  GEOETATrafficUpdateResponse *response
 @property  NSError *error
 @property  double responseTime

  // instance methods
  -[MNSessionUpdateResponseInfo setRequest:]
  -[MNSessionUpdateResponseInfo .cxx_destruct]
  -[MNSessionUpdateResponseInfo responseTime]
  -[MNSessionUpdateResponseInfo request]
  -[MNSessionUpdateResponseInfo response]
  -[MNSessionUpdateResponseInfo setError:]
  -[MNSessionUpdateResponseInfo error]
  -[MNSessionUpdateResponseInfo setResponse:]
  -[MNSessionUpdateResponseInfo setResponseTime:]


MNNavigationSessionManager : NSObject <MNSessionUpdateManagerDelegate, MNNavigationSessionObserver, MNUserOptionsObserver, MNNavigationTraceManagerDelegate>
 @property  <MNNavigationSessionManagerDelegate> *delegate
 @property  MNSessionUpdateManager *updateManager
 @property  MNNavigationSession *navigationSession
 @property  MNRouteManager *routeManager
 @property  GEOApplicationAuditToken *auditToken
 @property  MNNavigationTraceManager *traceManager
 @property  MNSimulationLocationProvider *simulationLocationProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationSessionManager setTracePosition:]
  -[MNNavigationSessionManager stopCurrentGuidancePrompt]
  -[MNNavigationSessionManager stopNavigationWithReason:]
  -[MNNavigationSessionManager resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationSessionManager setTracePlaybackSpeed:]
  -[MNNavigationSessionManager recordPedestrianTracePath:]
  -[MNNavigationSessionManager enableNavigationCapability:]
  -[MNNavigationSessionManager setGuidancePromptsEnabled:]
  -[MNNavigationSessionManager setTraceIsPlaying:]
  -[MNNavigationSessionManager updateDestination:]
  -[MNNavigationSessionManager acceptReroute:forTrafficIncidentAlert:]
  -[MNNavigationSessionManager setDisplayedStepIndex:]
  -[MNNavigationSessionManager setJunctionViewImageWidth:height:]
  -[MNNavigationSessionManager auditToken]
  -[MNNavigationSessionManager pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationSessionManager setRideIndex:forSegmentIndex:]
  -[MNNavigationSessionManager recordTraceBookmarkAtCurrentPositionWthScreenshotData:]
  -[MNNavigationSessionManager setIsConnectedToCarplay:]
  -[MNNavigationSessionManager setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationSessionManager forceReroute]
  -[MNNavigationSessionManager resumeOriginalDestination]
  -[MNNavigationSessionManager disableNavigationCapability:]
  -[MNNavigationSessionManager switchToRoute:]
  -[MNNavigationSessionManager setVoiceGuidanceLevel:]
  -[MNNavigationSessionManager .cxx_destruct]
  -[MNNavigationSessionManager setDelegate:]
  -[MNNavigationSessionManager init]
  -[MNNavigationSessionManager initWithAuditToken:]
  -[MNNavigationSessionManager setIsNavigatingInLowGuidance:]
  -[MNNavigationSessionManager delegate]
  -[MNNavigationSessionManager dealloc]
  -[MNNavigationSessionManager voiceGuidanceLevel]
  -[MNNavigationSessionManager routeManager]
  -[MNNavigationSessionManager navigationSession:didChangeNavigationState:]
  -[MNNavigationSessionManager navigationSession:didStopWithReason:]
  -[MNNavigationSessionManager navigationSession:shouldEndWithReason:]
  -[MNNavigationSessionManager navigationSession:didUpdateMatchedLocation:]
  -[MNNavigationSessionManager navigationSession:matchedToStepIndex:segmentIndex:]
  -[MNNavigationSessionManager navigationSession:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationSessionManager navigationSession:didEnterPreArrivalStateForWaypoint:endOfLegIndex:]
  -[MNNavigationSessionManager navigationSession:didArriveAtWaypoint:endOfLegIndex:]
  -[MNNavigationSessionManager navigationSession:didResumeNavigatingFromWaypoint:endOfLegIndex:]
  -[MNNavigationSessionManager navigationSessionDidEnterPreArrivalState:]
  -[MNNavigationSessionManager navigationSessionDidArrive:]
  -[MNNavigationSessionManager navigationSessionWillPause:]
  -[MNNavigationSessionManager navigationSessionWillResumeFromPause:]
  -[MNNavigationSessionManager navigationSession:didReceiveRouteSignalStrength:]
  -[MNNavigationSessionManager navigationSession:didReachETAUpdatePosition:]
  -[MNNavigationSessionManager navigationSession:didUpdateDisplayETA:remainingDistance:]
  -[MNNavigationSessionManager navigationSession:didUpdateETAResponseForRoute:]
  -[MNNavigationSessionManager navigationSession:didUpdateHeading:accuracy:]
  -[MNNavigationSessionManager navigationSession:didUpdateMotionType:confidence:]
  -[MNNavigationSessionManager navigationSessionWillReroute:]
  -[MNNavigationSessionManager navigationSessionDidCancelReroute:]
  -[MNNavigationSessionManager navigationSession:didReroute:withLocation:withAlternateRoutes:rerouteReason:]
  -[MNNavigationSessionManager navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationSessionManager navigationSession:didFailRerouteWithError:]
  -[MNNavigationSessionManager navigationSession:didUpdateAlternateRoutes:]
  -[MNNavigationSessionManager navigationSession:proceedToRouteDistance:displayString:closestStepIndex:]
  -[MNNavigationSessionManager navigationSession:currentStepIndex:didUpdateDistanceUntilSign:timeUntilSign:]
  -[MNNavigationSessionManager navigationSession:willAnnounce:inSeconds:]
  -[MNNavigationSessionManager navigationSession:willProcessSpeechEvent:]
  -[MNNavigationSessionManager navigationSession:didProcessSpeechEvent:]
  -[MNNavigationSessionManager navigationSession:triggerHaptics:]
  -[MNNavigationSessionManager navigationSession:displayPrimaryStep:instructions:shieldType:shieldText:drivingSide:maneuverStepIndex:isSynthetic:]
  -[MNNavigationSessionManager navigationSession:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationSessionManager navigationSession:displaySecondaryStep:instructions:shieldType:shieldText:drivingSide:]
  -[MNNavigationSessionManager navigationSessionHideSecondaryStep:]
  -[MNNavigationSessionManager navigationSessionBeginGuidanceUpdate:]
  -[MNNavigationSessionManager navigationSessionEndGuidanceUpdate:]
  -[MNNavigationSessionManager navigationSession:updateSignsWithInfo:]
  -[MNNavigationSessionManager navigationSession:updateSignsWithARInfo:]
  -[MNNavigationSessionManager navigationSession:usePersistentDisplay:]
  -[MNNavigationSessionManager navigationSession:showLaneDirections:]
  -[MNNavigationSessionManager navigationSession:hideLaneDirectionsForId:]
  -[MNNavigationSessionManager navigationSession:showJunctionView:]
  -[MNNavigationSessionManager navigationSession:hideJunctionViewForId:]
  -[MNNavigationSessionManager navigationSession:didEnableGuidancePrompts:]
  -[MNNavigationSessionManager navigationSession:newGuidanceEventFeedback:]
  -[MNNavigationSessionManager navigationSession:updatedGuidanceEventFeedback:]
  -[MNNavigationSessionManager navigationSession:didReceiveTrafficIncidentAlert:responseCallback:]
  -[MNNavigationSessionManager navigationSession:didUpdateTrafficIncidentAlert:]
  -[MNNavigationSessionManager navigationSession:didInvalidateTrafficIncidentAlert:]
  -[MNNavigationSessionManager navigationSession:didActivateAudioSession:]
  -[MNNavigationSessionManager navigationSession:didStartSpeakingPrompt:]
  -[MNNavigationSessionManager navigationSession:didReceiveTransitAlert:]
  -[MNNavigationSessionManager navigationSession]
  -[MNNavigationSessionManager updateManager:willSendETARequest:]
  -[MNNavigationSessionManager routeInfoForUpdateManager:]
  -[MNNavigationSessionManager userLocationForUpdateManager:]
  -[MNNavigationSessionManager traceManager]
  -[MNNavigationSessionManager navigationTraceManager:didUpdateTracePlaybackDetails:]
  -[MNNavigationSessionManager userOptionsEngine:didChangeFrom:to:]
  -[MNNavigationSessionManager simulationLocationProvider]
  -[MNNavigationSessionManager startNavigationWithDetails:]
  -[MNNavigationSessionManager updateForStartNavigation:]
  -[MNNavigationSessionManager updateWithInitialLocation:]
  -[MNNavigationSessionManager repeatCurrentGuidance]
  -[MNNavigationSessionManager repeatCurrentTrafficAlert]
  -[MNNavigationSessionManager vibrateForPrompt:]
  -[MNNavigationSessionManager updateManager:willSendTransitUpdateRequests:]
  -[MNNavigationSessionManager updateManager:didReceiveTransitUpdateResponse:]
  -[MNNavigationSessionManager updateManager:willSendTransitUpdateRequestForRouteIDs:]
  -[MNNavigationSessionManager updateManager:didReceiveTransitUpdates:]
  -[MNNavigationSessionManager updateManager:didReceiveTransitError:]
  -[MNNavigationSessionManager updateManager:didReceiveETAResponse:]
  -[MNNavigationSessionManager wantsETAUpdates]
  -[MNNavigationSessionManager _routeManager]
  -[MNNavigationSessionManager _traceManager]
  -[MNNavigationSessionManager _proxyUpdater]
  -[MNNavigationSessionManager navigationTraceManagerDidFailToRecordTrace:]
  -[MNNavigationSessionManager updateManager]


MNDeviceTimeProvider : NSObject <MNTimeProvider>
 @property  double currentTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNDeviceTimeProvider currentTime]


MNNavigationStateRoutePreview : MNNavigationState
  // instance methods
  -[MNNavigationStateRoutePreview startNavigationWithDetails:activeBlock:]
  -[MNNavigationStateRoutePreview stopNavigationWithReason:]
  -[MNNavigationStateRoutePreview resumeRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateRoutePreview pauseRealtimeUpdatesForSubscriber:]
  -[MNNavigationStateRoutePreview setRoutesForPreview:selectedRouteIndex:]
  -[MNNavigationStateRoutePreview desiredLocationProviderType]
  -[MNNavigationStateRoutePreview .cxx_destruct]
  -[MNNavigationStateRoutePreview enterState]
  -[MNNavigationStateRoutePreview type]
  -[MNNavigationStateRoutePreview traceManager]
  -[MNNavigationStateRoutePreview simulationLocationProvider]
  -[MNNavigationStateRoutePreview leaveState]
  -[MNNavigationStateRoutePreview requiresHighMemoryThreshold]
  -[MNNavigationStateRoutePreview shouldClearStoredRoutes]
  -[MNNavigationStateRoutePreview initWithStateManager:previewRoutes:selectedRouteIndex:]


MNAudioManager : NSObject <MNAudioHardwareEngineObserver, MNAudioProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  int transportType
 @property  unsigned long voiceGuidanceLevel

  // instance methods
  -[MNAudioManager transportType]
  -[MNAudioManager .cxx_destruct]
  -[MNAudioManager stopSpeaking]
  -[MNAudioManager addObserver:]
  -[MNAudioManager dealloc]
  -[MNAudioManager isSpeaking]
  -[MNAudioManager removeObserver:]
  -[MNAudioManager voiceGuidanceLevel]
  -[MNAudioManager audioHardwareEngine:didActivateAudioSession:]
  -[MNAudioManager audioHardwareEngine:didStartSpeakingPrompt:]
  -[MNAudioManager durationOf:]
  -[MNAudioManager changeTransportType:]
  -[MNAudioManager vibrateForShortPrompt:]
  -[MNAudioManager voiceGuidanceEnabled]
  -[MNAudioManager speak:withVoiceGuidanceLevel:andCondition:usingShortPrompt:thenCallCompletion:]
  -[MNAudioManager initWithTransportType:andVoiceGuidanceLevel:andVoiceLanguage:]
  -[MNAudioManager didChangeUserOptionsFrom:to:]
  -[MNAudioManager clearAllAnnouncements]
  -[MNAudioManager changeVoiceGuidanceLevel:forTransportType:]
  -[MNAudioManager _supportedTransportTypeForTransportType:]
  -[MNAudioManager _changeVoiceGuidanceLevel:forTransportType:]
  -[MNAudioManager _pushAudioSystemOptionsFromUserOptions:]
  -[MNAudioManager _deviceSettingsAllowSpeech]
  -[MNAudioManager _deviceIsMuted]


MNTimeballServer : NSObject <NSXPCListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNTimeballServer defaultServer]

  // instance methods
  -[MNTimeballServer _scheduler]
  -[MNTimeballServer .cxx_destruct]
  -[MNTimeballServer _cache]
  -[MNTimeballServer init]
  -[MNTimeballServer dealloc]
  -[MNTimeballServer listener:shouldAcceptNewConnection:]
  -[MNTimeballServer _routingProvider]
  -[MNTimeballServer _navd_localProxyForClient:]
  -[MNTimeballServer _navd_addProxy:]
  -[MNTimeballServer _navd_removeProxy:]
  -[MNTimeballServer _localProxyForPeer:]
  -[MNTimeballServer _peerDidConnectWithProxy:]
  -[MNTimeballServer _peerDidDisconnectWithProxy:]


MNNavigationState : NSObject
 @property  MNNavigationStateManager *stateManager
 @property  unsigned long type
 @property  BOOL requiresHighMemoryThreshold
 @property  BOOL requiresLocationAccess
 @property  unsigned long desiredLocationProviderType
 @property  MNLocationProviderCLParameters *clParameters
 @property  BOOL shouldClearStoredRoutes
 @property  double locationUpdateInterval
 @property  double suggestionUpdateFrequency
 @property  MNNavigationTraceManager *traceManager
 @property  MNSimulationLocationProvider *simulationLocationProvider

  // instance methods
  -[MNNavigationState changeUserOptions:]
  -[MNNavigationState desiredLocationProviderType]
  -[MNNavigationState methodSignatureForSelector:]
  -[MNNavigationState .cxx_destruct]
  -[MNNavigationState enterState]
  -[MNNavigationState stateManager]
  -[MNNavigationState init]
  -[MNNavigationState respondsToSelector:]
  -[MNNavigationState type]
  -[MNNavigationState dealloc]
  -[MNNavigationState forwardInvocation:]
  -[MNNavigationState traceManager]
  -[MNNavigationState postEnterState]
  -[MNNavigationState _isSelectorValidForForwarding:]
  -[MNNavigationState simulationLocationProvider]
  -[MNNavigationState initWithStateManager:]
  -[MNNavigationState leaveState]
  -[MNNavigationState requiresHighMemoryThreshold]
  -[MNNavigationState clParameters]
  -[MNNavigationState shouldClearStoredRoutes]
  -[MNNavigationState preEnterState]
  -[MNNavigationState requiresLocationAccess]
  -[MNNavigationState locationUpdateInterval]
  -[MNNavigationState suggestionUpdateFrequency]


MNVirtualGarageStandardProvider : NSObject <VGVirtualGarageObserver, MNVirtualGarageProvider>
 @property  <MNVirtualGarageProviderDelegate> *virtualGarageDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNVirtualGarageStandardProvider .cxx_destruct]
  -[MNVirtualGarageStandardProvider dealloc]
  -[MNVirtualGarageStandardProvider virtualGarageDidUpdate:]
  -[MNVirtualGarageStandardProvider startVirtualGarageUpdates]
  -[MNVirtualGarageStandardProvider stopVirtualGarageUpdates]
  -[MNVirtualGarageStandardProvider virtualGarageDelegate]
  -[MNVirtualGarageStandardProvider setVirtualGarageDelegate:]


MNNavigationProxyUpdater : NSObject <MNNavigationSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MNNavigationProxyUpdater setDisplayedStepIndex:]
  -[MNNavigationProxyUpdater setIsConnectedToCarplay:]
  -[MNNavigationProxyUpdater .cxx_destruct]
  -[MNNavigationProxyUpdater init]
  -[MNNavigationProxyUpdater setIsNavigatingInLowGuidance:]
  -[MNNavigationProxyUpdater navigationSession:didChangeNavigationState:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateMatchedLocation:]
  -[MNNavigationProxyUpdater navigationSession:matchedToStepIndex:segmentIndex:]
  -[MNNavigationProxyUpdater navigationSession:currentStepIndex:didUpdateDistanceUntilManeuver:timeUntilManeuver:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateStepNameInfo:]
  -[MNNavigationProxyUpdater navigationSession:didArriveAtWaypoint:endOfLegIndex:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateDisplayETA:remainingDistance:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateETAResponseForRoute:]
  -[MNNavigationProxyUpdater navigationSession:didReroute:withLocation:withAlternateRoutes:rerouteReason:]
  -[MNNavigationProxyUpdater navigationSession:didSwitchToNewTransportType:newRoute:]
  -[MNNavigationProxyUpdater navigationSession:didUpdateDestination:]
  -[MNNavigationProxyUpdater navigationSession:currentStepIndex:didUpdateDistanceUntilSign:timeUntilSign:]
  -[MNNavigationProxyUpdater navigationSession:willAnnounce:inSeconds:]
  -[MNNavigationProxyUpdater navigationSession:triggerHaptics:]
  -[MNNavigationProxyUpdater navigationSession:displayManeuverAlertForAnnouncementStage:]
  -[MNNavigationProxyUpdater navigationSession:didEnableGuidancePrompts:]
  -[MNNavigationProxyUpdater setVoiceGuidance:]
  -[MNNavigationProxyUpdater enteredRoutePreviewWithTransportType:]
  -[MNNavigationProxyUpdater navigationSessionStopped:]
  -[MNNavigationProxyUpdater navigationSessionStarted:navigationType:]
  -[MNNavigationProxyUpdater updateClusteredSectionSelectedRideForNavigationSession:]
  -[MNNavigationProxyUpdater _geoNavigationTypeForNavigationType:]


MNNanoFormattedStringFormatter : NSObject <GEOServerFormattedStepStringFormatter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MNNanoFormattedStringFormatter sharedFormatter]

  // instance methods
  -[MNNanoFormattedStringFormatter listInstructionForStep:]
  -[MNNanoFormattedStringFormatter signInstructionsForStep:]


MNTimeballNetworkRequester : NSObject
  // instance methods
  -[MNTimeballNetworkRequester requestRoutingOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballNetworkRequester _makeDirectionsRequestsWithOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]
  -[MNTimeballNetworkRequester _makeETARequestsWithOptions:forDestinations:fromOrigin:auditToken:callbackBlock:callbackQueue:]


MNNavigationStateGuidanceStepping : MNNavigationStateGuidance
  // instance methods
  -[MNNavigationStateGuidanceStepping type]


MNLocationMatchInfo : NSObject
 @property  long long matchQuality
 @property  {CLLocationCoordinate2D=dd} matchCoordinate
 @property  double matchCourse
 @property  int matchFormOfWay
 @property  int matchRoadClass
 @property  BOOL matchShifted
 @property  NSData *matchDataArray

  // instance methods
  -[MNLocationMatchInfo initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:matchDataArray:]
  -[MNLocationMatchInfo .cxx_destruct]
  -[MNLocationMatchInfo matchCourse]
  -[MNLocationMatchInfo matchCoordinate]
  -[MNLocationMatchInfo matchFormOfWay]
  -[MNLocationMatchInfo matchRoadClass]
  -[MNLocationMatchInfo matchDataArray]
  -[MNLocationMatchInfo matchShifted]
  -[MNLocationMatchInfo matchQuality]


NSMethodSignature(NavigationMethodForwarding)
	// class methods
	+[NSMethodSignature(NavigationMethodForwarding) _navigation_methodSignatureForEmptyMethod]

GEOLocalizationCapabilities(MNExtras)
	// class methods
	+[GEOLocalizationCapabilities(MNExtras) supportedPhoneticTypesForPhoneticLocaleID:]

(MNExtras)
	// class methods
	+[(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:suppressTimeZoneDisplay:useShortFormat:]
	+[(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:showTimeZone:useShortFormat:]
	+[(MNExtras) _timestampFormatterForTimeZone:displayTimeZone:]
	+[(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:]
	+[(MNExtras) _navigation_localizedTimestampStringForDepartureArrivalDate:inTimeZone:canIncludeDate:relativeToTimeZone:]
	+[(MNExtras) _navigation_debugDescriptionForDate:]

(BusinessHourExtras)
	// instance methods
	-[(BusinessHourExtras) isWholeHour]

(HTMLEncoding)
	// class methods
	+[(HTMLEncoding) _navigation_stringForExpectedTravelTime:dateUnitStyle:]
	+[(HTMLEncoding) _navigation_stringForServerFormattedString:]
	+[(HTMLEncoding) _navigation_stringWithSeconds:andAbbreviationType:]
	+[(HTMLEncoding) _navigation_formattedStringForHourRanges:timeZone:delimeter:]
	+[(HTMLEncoding) _navigation_localizedStringForDistance:detail:unitFormat:locale:useMetric:useYards:]
	+[(HTMLEncoding) _navigation_formattedStringForHourRanges:timeZone:]
	+[(HTMLEncoding) _navigation_formattedDescriptionForFrequency:]
	+[(HTMLEncoding) _navigation_formattedStringForInteger:]
	+[(HTMLEncoding) _navigation_stringWithSeconds:abbreviated:]
	+[(HTMLEncoding) _navigation_replacementForFormatToken:options:overrideVariables:]
	+[(HTMLEncoding) _navigation_formattedDescriptionForLiveStatus:updatedDepartureTimeString:]
	+[(HTMLEncoding) _navigation_localizedStringForDistance:context:extraDetail:]
	+[(HTMLEncoding) _navigation_formattedStringForFloat:useIncreasedPrecision:]
	+[(HTMLEncoding) _navigation_abbreviatedFromatterUnitsStyleForLocale:]
	+[(HTMLEncoding) _navigation_descriptionForFrequencyRangeWithMinFrequency:maxFrequency:estimate:recurring:]
	+[(HTMLEncoding) _frequencyDateComponents:]
	+[(HTMLEncoding) _frequencyStringForComponents:forRange:forceShort:]
	+[(HTMLEncoding) _navigation_frequencyRangeLocalizedInHoursWithMinHours:maxHours:estimate:recurring:]
	+[(HTMLEncoding) _navigation_frequencyRangeLocalizedInMinutesWithMinMinutes:maxMinutes:estimate:recurring:]
	+[(HTMLEncoding) _componentsWillUseShortFormat:]
	+[(HTMLEncoding) _navigation_frequencyRangeLocalizedInMixedUnitsWithMinString:maxString:estimate:recurring:]
	+[(HTMLEncoding) _navigation_stringForServerFormattedString:options:overrideVariables:allTokensExpanded:]
	+[(HTMLEncoding) _navigation_overridenTokenForToken:overrideVariables:]
	+[(HTMLEncoding) _navigation_stringForServerFormattedString:abbreviatedUnits:detail:spoken:overrideVariables:]
	+[(HTMLEncoding) _navigation_stringForServerFormattedString:abbreviatedUnits:detail:spoken:overrideVariables:allTokensExpanded:]
	+[(HTMLEncoding) _navigation_localizedStringForDistance:detail:unitFormat:locale:useMetric:useYards:shouldScale:]
	+[(HTMLEncoding) _navigation_stringForDistance:formatter:locale:shouldScale:]
	+[(HTMLEncoding) _navigation_formatterForOptions:]
	+[(HTMLEncoding) _navigation_stringWithMinutes:andAbbreviationType:]
	+[(HTMLEncoding) _navigation_spokenStringWithSeconds:andAbbreviationType:]
	+[(HTMLEncoding) _navigation_spokenStringWithMinutes:andAbbreviationType:]
	+[(HTMLEncoding) _navigation_replacementForFormatToken:options:overrideVariables:useMetric:]
	+[(HTMLEncoding) _navigation_formattedStringForPriceValue:currencyCode:]
	+[(HTMLEncoding) _navigation_spokenStringWithSeconds:abbreviated:]
	+[(HTMLEncoding) _navigation_descriptionForFrequencyMinuteValue:]
	+[(HTMLEncoding) _navigation_stringWithTimeStampValues:options:]
	+[(HTMLEncoding) _navigation_stringWithCountdownValue:inToken:options:]
	+[(HTMLEncoding) _navigation_stringForPower:unit:]
	+[(HTMLEncoding) _navigation_commaListDelimiter]
	+[(HTMLEncoding) _navigation_formattedStringForPriceValueWithAmount:currencyCode:]
	+[(HTMLEncoding) _navigation_formattedStringForPriceValueWithAmount:currencyCode:showsCurrencySymbol:]
	+[(HTMLEncoding) _navigation_logMismatchBetweenServerInstruction:clientInstruction:]
	+[(HTMLEncoding) _navigation_addPrefixToInstructions:isServer:isSpoken:]
	+[(HTMLEncoding) _navigation_logIfContainsVariables:]
	+[(HTMLEncoding) _navigation_formattedStringForFloat:]
	+[(HTMLEncoding) _navigation_formatFloatForPrintedDistance:]
	+[(HTMLEncoding) _navigation_formattedStringForOperatingHours:timeZone:]
	+[(HTMLEncoding) _navigation_stringForServerFormattedString:options:overrideVariables:]
	+[(HTMLEncoding) _navigation_replacementForFormatToken:abbreviatedUnits:detail:spoken:overrideVariables:]
	+[(HTMLEncoding) _navigation_languageDirectionStringWithFormat:]
	+[(HTMLEncoding) _navigation_compareServerInstructions:withClientInstructions:]
	+[(HTMLEncoding) _navigation_selectInstructionWithServerString:isSpoken:clientBlock:]
	+[(HTMLEncoding) _navigation_selectInstructionWithServerStringArray:isSpoken:clientBlock:]
	+[(HTMLEncoding) _navigation_stringWithSpeed:]
	+[(HTMLEncoding) _navigation_stringWithSpeedUnits]
	+[(HTMLEncoding) _navigation_stringWithDirection:abbreviated:]
	+[(HTMLEncoding) _navigation_stringWithAltitude:accuracy:]
	+[(HTMLEncoding) _navigation_stringWithAltitudeUnits]
	+[(HTMLEncoding) _navigation_stringWithTime:]
	+[(HTMLEncoding) _navigation_pointerDescription:]

	// instance methods
	-[(HTMLEncoding) _navigation_sanitizedStringForDisplayInHTML]
	-[(HTMLEncoding) _navigation_isPrivate]
	-[(HTMLEncoding) _navigation_stringByStrippingPrivateTag]
	-[(HTMLEncoding) _navigation_stringByEscapingHTML]
	-[(HTMLEncoding) _navigation_stringByReplacingNewLinesWithString:]
	-[(HTMLEncoding) _navigation_stripTagsFromSpokenString]
	-[(HTMLEncoding) _navigation_stripDebugPrefix]
	-[(HTMLEncoding) _navigation_isEqualToString:]
	-[(HTMLEncoding) _navigation_containsVariables]
	-[(HTMLEncoding) _navigation_stringByMakingPhonetic]
	-[(HTMLEncoding) _navigation_stringByMarkingAsAddress]
	-[(HTMLEncoding) _navigation_stringByMarkingAsNavigationText]
	-[(HTMLEncoding) _navigation_stringByMarkingAsNormalText]
	-[(HTMLEncoding) _navigation_isCJK]
	-[(HTMLEncoding) _navigation_stringByMarkingAsPrivateText]
	-[(HTMLEncoding) _navigation_stripVariablesFromString]
	-[(HTMLEncoding) _navigation_distanceLevenshtein:]
	-[(HTMLEncoding) mnlpr_componentsSeparatedByGlyph]

GEOLocation(MNExtras)
	// class methods
	+[GEOLocation(MNExtras) locationWithCLLocation:course:]

	// instance methods
	-[GEOLocation(MNExtras) clientLocation]
	-[GEOLocation(MNExtras) initWithCLLocation:]
	-[GEOLocation(MNExtras) initWithCLLocation:useMatchInfo:]
	-[GEOLocation(MNExtras) initWithCLLocation:course:]

NSProcessInfo(MNExtras)
	// instance methods
	-[NSProcessInfo(MNExtras) _navigation_isNavd]

(MNExtras)
	// class methods
	+[(MNExtras) _navigation_errorWithCode:debugDescription:underlyingError:]
	+[(MNExtras) _navigation_errorWithCode:userInfo:]
	+[(MNExtras) _navigation_errorWithCode:]

	// instance methods
	-[(MNExtras) _navigation_errorCodeAsString]

GEOLPRVehicle(MNExtras)
	// instance methods
	-[GEOLPRVehicle(MNExtras) _matchesPower:andVehicle:]
	-[GEOLPRVehicle(MNExtras) matchesPlateInfo:]
	-[GEOLPRVehicle(MNExtras) matchesLicensePlateRegion:]
	-[GEOLPRVehicle(MNExtras) matchesDefinedPlateCondition:error:]

GEOLPRLicensePlateStructure(MNExtras)
	// instance methods
	-[GEOLPRLicensePlateStructure(MNExtras) supportedAlphabeticCharacterSet]
	-[GEOLPRLicensePlateStructure(MNExtras) supportedNumericCharacterSet]

GEOLPRLicensePlateRestrictionRules(MNExtras)
	// instance methods
	-[GEOLPRLicensePlateRestrictionRules(MNExtras) plateRegionsContainingLatLngs:inRadius:]

GEOLPRLicensePlateRegion(MNExtras)
	// instance methods
	-[GEOLPRLicensePlateRegion(MNExtras) plateInfosMatchingVehicle:]
	-[GEOLPRLicensePlateRegion(MNExtras) restrictionRegionsContainingLatLngs:inRadius:]

GEOLPRDefinedPlateType(MNExtras)
	// instance methods
	-[GEOLPRDefinedPlateType(MNExtras) hasDefinedPlateConditionsForVehicle:error:]

GEOLPRLPRConvertRule(MNExtras)
	// instance methods
	-[GEOLPRLPRConvertRule(MNExtras) rules:forPlateTypes:atIndexes:]
	-[GEOLPRLPRConvertRule(MNExtras) hasValidDateInterval]
	-[GEOLPRLPRConvertRule(MNExtras) validDateInterval]
	-[GEOLPRLPRConvertRule(MNExtras) pickupRulesForPlateTypes:atIndexes:]
	-[GEOLPRLPRConvertRule(MNExtras) mapRulesForPlateTypes:atIndexes:]
	-[GEOLPRLPRConvertRule(MNExtras) fillRulesForPlateTypes:atIndexes:]

GEOLPRRestrictionRegion(MNExtras)
	// instance methods
	-[GEOLPRRestrictionRegion(MNExtras) plateTypeIndexesMatchingVehicle:error:]

GEOComposedWaypoint(MNExtras)
	// class methods
	+[GEOComposedWaypoint(MNExtras) appleParkWaypointFromMuid]
	+[GEOComposedWaypoint(MNExtras) appleParkWaypointFromAddress]
	+[GEOComposedWaypoint(MNExtras) appleParkWaypointFromLatLng]

	// instance methods
	-[GEOComposedWaypoint(MNExtras) localeIdentifier]
	-[GEOComposedWaypoint(MNExtras) humanDescription]
	-[GEOComposedWaypoint(MNExtras) destinationInfo]
	-[GEOComposedWaypoint(MNExtras) destinationType]
	-[GEOComposedWaypoint(MNExtras) navDisplayName]
	-[GEOComposedWaypoint(MNExtras) humanDescriptionWithAddressAndLatLng]
	-[GEOComposedWaypoint(MNExtras) navAnnouncementAddress]
	-[GEOComposedWaypoint(MNExtras) navDisplayNameWithSpecialContacts:]
	-[GEOComposedWaypoint(MNExtras) navDisplayAddress]
	-[GEOComposedWaypoint(MNExtras) navAnnouncementName]
	-[GEOComposedWaypoint(MNExtras) humanDescriptionWithLatLng]

GEOComposedRoute(MNTimeball)
	// class methods
	+[GEOComposedRoute(MNTimeball) _findDivergenceAndConvergence:pointCount:otherPoints:pointCount:divergenceTolerance:convergenceTolerance:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:]
	+[GEOComposedRoute(MNTimeball) findDivergenceAndConvergence:pointCount:otherPoints:pointCount:divergenceTolerance:convergenceTolerance:outCoordinatesA:outCoordinatesB:]
	+[GEOComposedRoute(MNTimeball) _pointsDiverge:pointCount:otherPoints:pointCount:tolerance:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) _startIndexForPoints:withPoints:pointCount:toleranceSquared:]
	+[GEOComposedRoute(MNTimeball) _pointsConverge:pointCount:otherPoints:pointCount:tolerance:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) _pointsConverge:pointCount:otherPoints:pointCount:tolerance:outCoordinatesA:outCoordinatesB:]
	+[GEOComposedRoute(MNTimeball) _addPointsToArray:forMapPoints:pointCount:isPolylineA:]
	+[GEOComposedRoute(MNTimeball) pointsDiverge:pointCount:otherPoints:pointCount:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) pointsConverge:pointCount:otherPoints:pointCount:outCoordinateA:outCoordinateB:]
	+[GEOComposedRoute(MNTimeball) findDivergenceAndConvergence:pointCount:otherCoordinates:pointCount:distanceInMeters:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:]
	+[GEOComposedRoute(MNTimeball) findDivergenceAndConvergence:pointCount:otherPoints:pointCount:outDivergenceCoordinateA:outDivergenceCoordinateB:outConvergenceCoordinateA:outConvergenceCoordinateB:]
	+[GEOComposedRoute(MNTimeball) _stringForPoint:]

	// instance methods
	-[GEOComposedRoute(MNTimeball) divergenceAndConvergenceWithRoute:outOtherRoutePoints:]
	-[GEOComposedRoute(MNTimeball) findDivergenceAndConvergenceWithRoute:outDivergenceCoordinate:outConvergenceCoordinate:]
	-[GEOComposedRoute(MNTimeball) _timeball_isEqualToRoute:]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromRouteMatch:etaRoute:outRemainingDistanceToEndOfLeg:outDistanceToManeuverStart:outDistanceToManeuverEnd:outRemainingTimeToEndOfRoute:outRemainingDistanceToEndOfRoute:]
	-[GEOComposedRoute(MNTimeball) _isNavigableForWatch]
	-[GEOComposedRoute(MNTimeball) _mapPoints]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromLocation:etaRoute:]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromLocation:etaRoute:outRemainingDistanceToEndOfLeg:outDistanceToManeuverStart:outDistanceToManeuverEnd:outRemainingTimeToEndOfRoute:outRemainingDistanceToEndOfRoute:]
	-[GEOComposedRoute(MNTimeball) findDivergenceAndConvergenceWithRoute:distanceInMeters:outDivergenceCoordinate:outConvergenceCoordinate:]
	-[GEOComposedRoute(MNTimeball) remainingTimeFromLocation:]
	-[GEOComposedRoute(MNTimeball) divergenceAndConvergenceWithRoute:]

GEORouteInitializerData(MNExtras)
	// instance methods
	-[GEORouteInitializerData(MNExtras) allRoutes]
	-[GEORouteInitializerData(MNExtras) allETAUAlternateRouteInfos]
	-[GEORouteInitializerData(MNExtras) mainRouteInfo]
	-[GEORouteInitializerData(MNExtras) nonRecommendedRoutes]
	-[GEORouteInitializerData(MNExtras) allRouteInfos]
	-[GEORouteInitializerData(MNExtras) routeInfosWithMaxCount:]
	-[GEORouteInitializerData(MNExtras) _allRouteInfosWithTypes:maxCount:]

(CGFloat)
	// instance methods
	-[(CGFloat) cgFloatValue]

NSBundle(MNExtras)
	// class methods
	+[NSBundle(MNExtras) _navigation_isRunningInSiri]
	+[NSBundle(MNExtras) _navigationBundle]
	+[NSBundle(MNExtras) _navigation_implementsSiriMethod]

	// instance methods
	-[NSBundle(MNExtras) _navigation_localizedStringForKey:value:table:]

GEOStructuredAddress(MNExtras)
	// instance methods
	-[GEOStructuredAddress(MNExtras) singleLineAddress]

(MNExtras)
	// class methods
	+[(MNExtras) _navigation_overrideDistanceUnit:]
	+[(MNExtras) _localeOverridesForLocaleWithCountryCode:]

	// instance methods
	-[(MNExtras) _navigation_distanceUsesMetricSystem]
	-[(MNExtras) _navigation_useYardsForShortDistances]
	-[(MNExtras) _navigation_distanceUsesMetricSystemIgnoringUserPreference:]
	-[(MNExtras) _navigation_objectForKey:]

CLLocation(MNExtras)
	// class methods
	+[CLLocation(MNExtras) _navigation_stringWithType:]
	+[CLLocation(MNExtras) _navigation_isLocation:equalTo:]

	// instance methods
	-[CLLocation(MNExtras) _navigation_detailedMatchInfo]
	-[CLLocation(MNExtras) _navigation_hasValidCourse]
	-[CLLocation(MNExtras) _navigation_isEqualToLocationCoordinate:]
	-[CLLocation(MNExtras) _navigation_setGtLog:]
	-[CLLocation(MNExtras) _navigation_hasMatch]
	-[CLLocation(MNExtras) _navigation_isStale]
	-[CLLocation(MNExtras) _navigation_routeMatch]
	-[CLLocation(MNExtras) _navigation_rawShiftedCoordinate]
	-[CLLocation(MNExtras) _navigation_gtLog]
	-[CLLocation(MNExtras) _navigation_speedAccuracy]
	-[CLLocation(MNExtras) initWithGeoLocation:]
	-[CLLocation(MNExtras) _navigation_geoCoordinate3D]
	-[CLLocation(MNExtras) initWithCoordinate:rawCoordinate:course:rawCourse:courseAccuracy:speed:speedAccuracy:altitude:timestamp:horizontalAccuracy:verticalAccuracy:type:referenceFrame:serializedCoarseMetaData:]
	-[CLLocation(MNExtras) initWithCoordinate:rawCoordinate:course:rawCourse:courseAccuracy:speed:speedAccuracy:altitude:timestamp:horizontalAccuracy:verticalAccuracy:type:referenceFrame:]
	-[CLLocation(MNExtras) _navigation_locationDescription]
	-[CLLocation(MNExtras) _navigation_geoLocation]

GEOComposedRouteStep(MNInstructions)
	// instance methods
	-[GEOComposedRouteStep(MNInstructions) contentsForContext:]

GEORouteAttributes(MNExtras)
	// class methods
	+[GEORouteAttributes(MNExtras) defaultRouteAttributesForTransportType:]

	// instance methods
	-[GEORouteAttributes(MNExtras) _vehicleSpecifications]

GEOLatLng(MNExtras)
(MNExtras)
	// instance methods
	-[(MNExtras) _navigation_transitRelativeDateStringForDate:context:inTimeZone:outUsedFormat:]
	-[(MNExtras) _navigation_isDateInToday:inTimeZone:]
	-[(MNExtras) _navigation_dateStringForDate:withStyle:useRelativeFormatting:inTimeZone:]
	-[(MNExtras) _navigation_offsetDate:toTimeZone:]
	-[(MNExtras) _navigation_relativeDateStringForDate:context:inTimeZone:]
	-[(MNExtras) _navigation_isDateInTomorrow:inTimeZone:]

GEOAddress(MNExtras)
	// instance methods
	-[GEOAddress(MNExtras) singleLineAddress]

NSUUID(MNExtras)
	// class methods
	+[NSUUID(MNExtras) _navigation_uuidForData:]
	+[NSUUID(MNExtras) _navigation_dataForUUID]

	// instance methods
	-[NSUUID(MNExtras) _navigation_data]

(MNExtras)
	// instance methods
	-[(MNExtras) _navigation_firstObjectPassingTest:]

(MNExtras)
	// instance methods
	-[(MNExtras) _navigation_unsignedIntegerValue]

(MNExtras)
	// instance methods
	-[(MNExtras) _navigation_isEquivalentToTimeZone:forDate:]
	-[(MNExtras) _navigation_hasSameOffsetFromGMTAsTimeZone:]
	-[(MNExtras) _navigation_isEquivalentToTimeZone:forDates:]

GEOStep(MNExtras)
	// instance methods
	-[GEOStep(MNExtras) maneuverIsTakeNthExitAtRoundabout]

GEOETATrafficUpdateResponse(Testing)
	// instance methods
	-[GEOETATrafficUpdateResponse(Testing) addFakeTrafficIncidentAlert:mainRouteInfo:alternateRouteInfo:]
	-[GEOETATrafficUpdateResponse(Testing) _addDebugArguments:]

GEODirectionsResponse(Testing)
	// instance methods
	-[GEODirectionsResponse(Testing) addFakeTrafficIncidentAlert:]

(MNExtras)
	// class methods
	+[(MNExtras) _serverStringDictionaryForDistance:validDistance:destination:spoken:useDisplayName:]
	+[(MNExtras) _serverStringDictionaryForMapItem:]

01 00 0800 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFConnection 
01 00 0800 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFPreferences 
01 00 1200 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioPlayer 
01 00 0900 /System/Library/PrivateFrameworks/AudioSession.framework/AudioSession: AVAudioSession 
01 00 0b00 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLCircularRegion 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLHeading 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLInUseAssertion 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationManager 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationMatchInfo 
01 00 0300 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLSimulationManager 
01 00 0d00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMActivityManager 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOAddress 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOAnalyticsPipelinePortal 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOApplicationAuditToken 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOAutomobileOptions 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOChargerPlug 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOChargerPlugsInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCoarseLocationMetadata 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCommonOptions 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCompanionRouteDetails 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCompanionRouteStatus 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCompanionRouteUpdate 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCompanionTransitAlightMessage 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedETARoute 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRoute 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRouteLaneInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRouteMutableData 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRouteStep 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedRouteTraffic 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedTransitWalkingRouteStep 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOComposedWaypoint 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCountryConfiguration 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCyclingOptions 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCyclingUserPreferences 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODestinationInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionService 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsError 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsRequestFeedback 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEODirectionsResponse 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETATrafficUpdateRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETATrafficUpdateRequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOETATrafficUpdateResponse 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOEVInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOFormatArgument 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOFormattedString 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOImageServiceRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOImageServiceRequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOJunction 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRDefinedPlateType 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRLPRConvertRule 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRLPRMapRule 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRLicensePlateRegion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRLicensePlateRestrictionRules 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRLicensePlateStructure 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRRestrictionRegion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRValueMapping 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLPRVehicle 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLatLng 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocalizationCapabilities 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocation 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocationShifter 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapRegion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMotionContext 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavRoutePreloadStrategy 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavdClientInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavdDefaults 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavdPeer 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigabilityInfo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationBicycleMapMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationDrivingMapMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationGuidanceState 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationProxy 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONavigationWalkingMapMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEONumberData 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOObserverHashTable 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOPBTransitArtwork 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOPathMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOPlatform 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOQuickETARequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOResourceManager 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOResourceManifestManager 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOResourceManifestUpdateAssertion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOResourceRequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORoadMatch 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORoadMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteAttributes 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteInitializerData 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteMatch 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORouteMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEORoutePreloader 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOSQLiteDB 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOStep 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOStructuredAddress 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTFTrafficSnapshot 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTileLoader 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTrafficBannerText 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTrafficBannerTextButton 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitBanner 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitOptions 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteMatcher 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRoutePreloadStrategy 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteUpdate 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteUpdateRequest 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOTransitRouteUpdater 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOUserSession 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOVectorTileDecoder 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOVehicleSpecifications 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOWalkingOptions 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateComponentsFormatter 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateInterval 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMeasurement 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMeasurementFormatter 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 0f00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnitEnergy 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnitLength 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUnitPower 
01 00 1300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0100 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0100 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBDataReader 
01 00 0540 /System/Library/PrivateFrameworks/VirtualGarage.framework/VirtualGarage: VGVehicle 
01 00 0540 /System/Library/PrivateFrameworks/VirtualGarage.framework/VirtualGarage: VGVehicleState 
01 00 0540 /System/Library/PrivateFrameworks/VirtualGarage.framework/VirtualGarage: VGVirtualGarageService 
01 00 0a00 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSSpeechRequest 
01 00 0a00 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSSpeechSynthesizer 
01 00 0a00 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSSpeechSynthesizerPreference 
01 00 0a00 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSVoiceAsset 
